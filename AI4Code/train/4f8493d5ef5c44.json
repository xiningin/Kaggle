{"cell_type":{"6f993a25":"code","6babfb29":"code","feaaff82":"code","ac158c3e":"code","1fce0ff5":"code","01164528":"code","59af21df":"code","77ed242b":"code","f437a439":"code","800915c6":"code","d6a47098":"code","7dccef79":"code","fc93e6f3":"code","c01caa5e":"code","5a875e98":"code","3cb4c11c":"code","d0492348":"code","83678d35":"code","d90ee98f":"code","248ccdd5":"code","6e8bdc02":"code","9b745058":"code","8e108369":"code","bf631808":"code","b8ff6059":"code","0c2a15cc":"code","0f867275":"code","265c25ca":"code","e51e1aba":"code","a5011dd6":"code","2f763b46":"code","e0803f95":"code","ad21ebf7":"code","64a2f2fd":"code","5ddf848e":"code","699b18db":"code","839429e8":"code","f120f88a":"code","5fb79181":"code","d219ecee":"code","a8a13f3a":"code","96336cf7":"code","1e157b99":"code","adceaed1":"code","846008a2":"code","e39f4a4a":"code","60cb283c":"code","b3661c37":"code","5713ed20":"code","727117ba":"code","d4a313a8":"code","40b7af11":"code","7bd08890":"code","bb1c7e7c":"code","474756d2":"code","5b12ff1f":"code","06439ee7":"code","22a7847c":"code","ec5280e5":"code","d7911e22":"code","ecc863fe":"code","21c372a7":"code","dcb7ffdd":"markdown","7d6c4ca4":"markdown","140293de":"markdown","6fc893c0":"markdown","8e6b08e3":"markdown","db4deda3":"markdown","28094ba6":"markdown","a450b9ba":"markdown","b521b429":"markdown","7471e228":"markdown","68da040d":"markdown","a48e713c":"markdown","29201a47":"markdown","e230f180":"markdown","e4fb6c01":"markdown","0b85db0f":"markdown","21cd4967":"markdown","90133dee":"markdown","9764ec20":"markdown","07dcaf90":"markdown","e5f8a6e2":"markdown","cfa96494":"markdown","455ffc51":"markdown","a6d482a5":"markdown","ee150406":"markdown","db36bc69":"markdown","1a9d8f30":"markdown","a4c86d23":"markdown","32fe4d5e":"markdown","74ff89e6":"markdown","42922d0c":"markdown","fa90ece2":"markdown","685c5b77":"markdown"},"source":{"6f993a25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6babfb29":"df1 = pd.read_csv('\/kaggle\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.sorted-by-count.csv')\ndf = pd.read_csv('\/kaggle\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')","feaaff82":"pd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)","ac158c3e":"df.head(3)","1fce0ff5":"#columns =['title','title_orig'] #,'merchant_profile_picture','product_url','product_picture','merchant_name','merchant_title']\n#df = dff.drop(columns, axis=1)\ndf.columns","01164528":"df.shape","59af21df":"round(df.describe().T)","77ed242b":"import seaborn as sns\nimport matplotlib.pyplot as plt","f437a439":"df.info()","800915c6":"plt.figure(figsize = (15,3))\nsns.heatmap(df.isnull(), cmap = 'cubehelix', cbar=False)","d6a47098":"df.isnull().sum()","7dccef79":"df['rating_five_count'] = df['rating_five_count'].fillna(0)\ndf['rating_four_count'] = df['rating_four_count'].fillna(0)\ndf['rating_three_count'] = df['rating_three_count'].fillna(0)\ndf['rating_two_count'] = df['rating_two_count'].fillna(0)\ndf['rating_one_count'] = df['rating_one_count'].fillna(0)","fc93e6f3":"df['has_urgency_banner'] = df['has_urgency_banner'].replace(np.nan, 0)","c01caa5e":"df.isnull().any()","5a875e98":"#df['origin_country'].value_counts().plot(kind = 'bar')\nsns.countplot('origin_country', data=df)","3cb4c11c":"df['origin_country'] = df['origin_country'].replace('VE', 'Other')\ndf['origin_country'] = df['origin_country'].replace('AT', 'Other')\ndf['origin_country'] = df['origin_country'].replace('SG', 'Other')\ndf['origin_country'] = df['origin_country'].replace('GB', 'Other')\ndf['origin_country'] = df['origin_country'].replace(np.nan, 'Other')","d0492348":"#df['origin_country'].value_counts().plot(kind = 'bar')\nsns.countplot('origin_country', data=df)","83678d35":"# Replacing different variations of sizes into one.\n\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S.', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('XS.', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('M.', 'M')\n\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-XS', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE XS', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size4XL', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('size S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size M', 'M')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size -XXS', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE-XXS', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size S.', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('s', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SizeL', 'L')\n\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('5XL', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('4XL', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('3XL', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('2XL', 'XL')","d90ee98f":"pr_val = df['product_variation_size_id'].value_counts()\n#pr_val = pr_val[pr_val>10]\npr_val[pr_val > 1]","248ccdd5":"def pr_var(name):\n    if name == 'XXXS' \\\n    or name == 'XXS' \\\n    or name == 'XS' \\\n    or name == 'S' \\\n    or name == 'M' \\\n    or name == 'L' \\\n    or name == 'XL' \\\n    or name == 'XXL' \\\n    or name == 'XXXXL' \\\n    or name == 'XXXXXL':\n        return name\n    else:\n        return \"OTHER\"\n    \ndf['product_variation_size_id'] = df['product_variation_size_id'].replace(np.nan, 'OTHER')\ndf['product_variation_size_id'] = df['product_variation_size_id'].apply(pr_var)","6e8bdc02":"fig_dims = (10, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot('product_variation_size_id',\n              order = df['product_variation_size_id'].value_counts().index,\n              palette=\"magma\",\n              data = df,\n              ax = ax)\nax.set(xlabel='Size', ylabel='Count')\nplt.show()","9b745058":"pr_colr = df['product_color'].value_counts()\npr_colr[pr_colr > 2]","8e108369":"df['product_color'] = df['product_color'].replace('Black', 'black')\ndf['product_color'] = df['product_color'].replace('White', 'white')\n\ndf['product_color'] = df['product_color'].replace('navyblue', 'blue')\ndf['product_color'] = df['product_color'].replace('lightblue', 'blue')\ndf['product_color'] = df['product_color'].replace('skyblue', 'blue')\ndf['product_color'] = df['product_color'].replace('darkblue', 'blue')\ndf['product_color'] = df['product_color'].replace('navy', 'blue')\n\ndf['product_color'] = df['product_color'].replace('winered', 'red')\ndf['product_color'] = df['product_color'].replace('rosered', 'red')\ndf['product_color'] = df['product_color'].replace('rose', 'red')\ndf['product_color'] = df['product_color'].replace('orange-red', 'red')\n\ndf['product_color'] = df['product_color'].replace('lightpink', 'pink')\n\ndf['product_color'] = df['product_color'].replace('armygreen', 'green')\ndf['product_color'] = df['product_color'].replace('khaki', 'green')\ndf['product_color'] = df['product_color'].replace('lightgreen', 'green')\ndf['product_color'] = df['product_color'].replace('fluorescentgreen', 'green')\n\ndf['product_color'] = df['product_color'].replace('gray', 'grey')\n\ndf['product_color'] = df['product_color'].replace('coffee', 'brown')\n\ndf['product_color'] = df['product_color'].replace('multicolor', 'other')\ndf['product_color'] = df['product_color'].replace('floral', 'other')\ndf['product_color'] = df['product_color'].replace('leopard', 'other')\ndf['product_color'] = df['product_color'].replace('camouflage', 'other')\n\ndf['product_color'] = df['product_color'].replace('white & green', 'dual')\ndf['product_color'] = df['product_color'].replace('black & green', 'dual')\ndf['product_color'] = df['product_color'].replace('black & white', 'dual')\ndf['product_color'] = df['product_color'].replace('camouflage', 'other')\n    \ndf['product_color'] = df['product_color'].replace(np.nan, 'other')\n\npr_colr = df['product_color'].value_counts()\npr_colr[pr_colr > 2]","bf631808":"# Show Most popular colors\nfig_dims = (10, 15)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot('product_color',\n              data = df,\n              order = df['product_color'].value_counts().iloc[:15].index,\n              ax = ax)\nax.set(xlabel='Product Colour', ylabel='Count')\nplt.xticks(rotation=45, ha='right')\nplt.show()","b8ff6059":"print('Median of units sold is',df['units_sold'].median())\nprint('Mean of units sold is',df['units_sold'].mean())\ndf['units_sold'].value_counts()","0c2a15cc":"def below_ten(units_sold):\n    if units_sold < 10:\n        return 10\n    else:\n        return units_sold","0f867275":"df['units_sold'] = df['units_sold'].apply(below_ten)","265c25ca":"df['units_sold'].value_counts()","e51e1aba":"df[df['units_sold'] == 100000]","a5011dd6":"def is_successful(units_sold):\n    if units_sold > 1000:\n        return 1\n    else:\n        return 0","2f763b46":"df['is_successful'] = df['units_sold'].apply(is_successful)\n#df['is_successful'] = df['units_sold'].apply(is_successful).astype('category')\nprint('Percent of successful products: ', df['is_successful'].value_counts()[1] \/ len(df['is_successful'])*100)\nsns.countplot(data=df, x='is_successful')\nplt.show()","e0803f95":"fig_dims = (15, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(x = 'keyword',\n            y = 'count',\n            data = df2.iloc[:20],\n            ax = ax)\nax.set(xlabel='Keyword', ylabel='Count')\nplt.xticks(rotation=45, ha='right')\nplt.show()","ad21ebf7":"pop_tags = df2.iloc[:10]['keyword'].tolist()\n\ndef check_tag_quality(tags):\n    tag_str = tags\n    prod_tags = tag_str.split(',')\n    \n    common_elements = np.intersect1d(pop_tags, prod_tags)\n    return len(common_elements) \/ len(pop_tags)\n    \ndf['tag_quality'] = df['tags'].apply(check_tag_quality)","64a2f2fd":"def tag_count(tags):\n    tag_str = tags\n    prod_tags = tag_str.split(',')\n    return len(prod_tags)\n    \ndf['tag_count'] = df['tags'].apply(tag_count)","5ddf848e":"def is_localised(trans,origi):\n    if trans == origi:\n        return 0\n    else:\n        return 1\n    \ndf['title_localised'] = df.apply(lambda x: is_localised(x.title, x.title_orig), axis = 1)","699b18db":"def check_name(title,name):\n    title = str(title).replace(\" \", \"\")\n    title = title.replace(\".\", \"\")\n    \n    name = str(name).replace(\" \", \"\")\n    name = name.replace(\".\", \"\")\n    \n    if title.lower() == name.lower():\n        return 1\n    else:\n        return 0\n    \ndf['com_same_name'] = df.apply(lambda x: check_name(x.merchant_title, x.merchant_name), axis = 1)","839429e8":"def inc_positive_per(wordset):\n    pos_ses = 'avis positifs'\n    if f'{pos_ses}' in f'{wordset}':\n        return 1\n    else:\n        return 0\n\ndf['subtitle_rating'] = df['merchant_info_subtitle'].apply(inc_positive_per)","f120f88a":"def check_rating_prop(s_count,t_count):\n    if s_count == 0:\n        return 0\n    else:\n        return s_count\/t_count\n    \ndf['rating_five_count'] = df.apply(lambda x: check_rating_prop(x.rating_five_count, x.rating_count), axis = 1)\ndf['rating_four_count'] = df.apply(lambda x: check_rating_prop(x.rating_four_count, x.rating_count), axis = 1)\ndf['rating_three_count'] = df.apply(lambda x: check_rating_prop(x.rating_three_count, x.rating_count), axis = 1)\ndf['rating_two_count'] = df.apply(lambda x: check_rating_prop(x.rating_two_count, x.rating_count), axis = 1)\ndf['rating_one_count'] = df.apply(lambda x: check_rating_prop(x.rating_one_count, x.rating_count), axis = 1)","5fb79181":"def check_dis_per(r_price,buyer_price):\n    return (r_price - buyer_price) \/ r_price\n    \ndf['discount_rate'] = df.apply(lambda x: check_dis_per(x.retail_price, x.price),axis = 1)","d219ecee":"def merchant_pop_on_prod(m_count,p_count):\n    if m_count == 0:\n        return 0\n    else:\n        return p_count \/ m_count\n    \ndf['merch_pop_proc'] = df.apply(lambda x: merchant_pop_on_prod(x.merchant_rating_count, x.rating_count),axis = 1)","a8a13f3a":"fig_dims = (25, 25)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.heatmap(df.corr(),\n            annot=True,\n            ax=ax)\nax.add_patch(plt.Rectangle((0,2),31,1, \n                           fill = False, \n                           edgecolor = 'blue', \n                           lw = 3))\nplt.xticks(rotation=45, ha='right')\nplt.yticks(rotation=45, ha='right')\nplt.show()","96336cf7":"print('Overall stats:')\nprint(df['price'].mean())\nprint(df['retail_price'].mean())\nprint('----------------------')\nprint('Stats for successful products:')\nprint(df[df['is_successful'] == 1]['price'].mean())\nprint(df[df['is_successful'] == 1]['retail_price'].mean())\nprint('----------------------')\nprint('Stats for unsuccessful products:')\nprint(df[df['is_successful'] == 0]['price'].mean())\nprint(df[df['is_successful'] == 0]['retail_price'].mean())","1e157b99":"df['diff_in_price'] = round(df['price']\/df['retail_price'],2)\ndf['diff_in_price']","adceaed1":"sns.violinplot(data=df, y='diff_in_price', x='is_successful')","846008a2":"print('Percent of products using ad boosts: ', df['uses_ad_boosts'].value_counts()[1] \/ len(df['uses_ad_boosts'])*100)","e39f4a4a":"sns.countplot(data=df, x='uses_ad_boosts', hue='is_successful')","60cb283c":"pd.crosstab(df['uses_ad_boosts'], df['is_successful'])","b3661c37":"pd.crosstab(df['uses_ad_boosts'], df['units_sold'])","5713ed20":"df.groupby('is_successful').mean()[ratings_column]","727117ba":"df.groupby('units_sold').mean()[ratings_column]","d4a313a8":"merchant_columns = ['merchant_rating_count', 'merchant_rating',\n       'merchant_id', 'merchant_has_profile_picture']\n\n\nsns.countplot(data=df, x='merchant_has_profile_picture', hue='is_successful')","40b7af11":"sns.violinplot(data=df, y='merchant_rating', x='is_successful')","7bd08890":"sns.violinplot(data=df, y='merchant_rating', x='units_sold')","bb1c7e7c":"column_to_drop  = ['crawl_month','product_id','product_picture', 'product_url','merchant_profile_picture', \n        'merchant_id', 'currency_buyer','title','title_orig','tags','shipping_option_name','rating_count',\n       'theme','urgency_text', 'merchant_title', 'merchant_name', 'merchant_info_subtitle',\n       ]","474756d2":"df = df.drop(column_to_drop, axis = 1)","5b12ff1f":"df = pd.get_dummies(df, \n                    columns = ['product_color'],\n                    prefix = 'color_',\n                    drop_first = True)\ndf.head()","06439ee7":"df = pd.get_dummies(df, columns = ['product_variation_size_id'],\n                    prefix = 'size_',drop_first = True)\ndf.head()","22a7847c":"y = df['is_successful']\nX = df[['price', 'retail_price', 'uses_ad_boosts', 'badge_product_quality',\n       'product_variation_inventory',\n       'inventory_total', 'merchant_rating_count', 'merchant_rating',\n       'merchant_has_profile_picture','diff_in_price']]","ec5280e5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import train_test_split","d7911e22":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=57, shuffle=True)","ecc863fe":"models = [LogisticRegression(), DecisionTreeClassifier(), XGBClassifier(),  \n          GradientBoostingClassifier(), KNeighborsClassifier(), RandomForestClassifier()]\n\nfor model in models:\n    \n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    \n    print(model)\n    print('---------------------------')\n    print(metrics.classification_report(y_test,y_pred))\n    print('')\n    print('')","21c372a7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\n\nmodels = RandomForestClassifier()\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(metrics.accuracy_score(y_test,y_pred))","dcb7ffdd":"# The use of ad boosts to boost the success..","7d6c4ca4":"# Units Sold - Data Analysis","140293de":"# Product Color - Data Analysis","6fc893c0":"The column names raises some more possible analysis that can be performed:\n* How different is the 'price' from 'retail price' and what is the effect of the difference. Expecting higher number of units sold if price is less than retail price and vice versa.\n* Does having ad boosts increase success?\n* Any correlation between units sold and ratings?\n* What is badges? This looks like 'awards' of some sort? Do success with increase in number of badges?\n* What are effect of different type of badges?\n* Effect of tags? Higher number of tags results in success?\n* Maybe some brief analysis on product variations.. Do increased variations leads to inreased success?\n* Shipping options analysis\n* Analysis of inventory total and units sold.\n* Merchant detail analysis.. Does merchant rating affect success?\n* What about the details of the merchant? Does not having a profile picture reduce success? Perhaps detailed info leads to higher success?\n* Do all product contains pictures?\n* I am expecting only one theme..'summer' but let's see.\n","8e6b08e3":"# **Let's see if we have any missing values**","db4deda3":"**Check whether the merchant subtitle contains postive ratings**","28094ba6":"**Check the number of tags include in the product**","a450b9ba":"# Replacing NA ratings with 0","b521b429":"Maybe comparing the % change of price and retail price to the success of the products shade some light?","7471e228":"**Check Merchant title and Merchant name**","68da040d":"# Higher ratings means higher units sold?","a48e713c":"# Popular product tags in Summer - 2020","29201a47":"# Successful merchants","e230f180":"There is an almost equal use of ad boosts by the products.","e4fb6c01":"I am finally going with Random Forests","0b85db0f":"There is a higher chance of success if merchant has profile picture.","21cd4967":"**Correlation Heat Map**","90133dee":"It seems like ad boosts do not have any impact on units sold.. perhaps something I am missing here? I mean, there must be some benefit of the addition cost(?) for the ad boosts.\n\nThe website needs to consider the effectiveness of this, otherwise the merchants may simply not use it and the website might lose this additional income.","9764ec20":"# Reading The Dataseta","07dcaf90":"# Remove Unwanted Columns","e5f8a6e2":"Major Factors which increases the 'units_sold'\n\nRating Count,\nRating,\nRating Five Count,\nRating Four Count,\nRating Three Count.\nMerchant Rating Count,\nMerchant Rating,\nMerchant Has Profile Picture,\nIs Title Localised,\nRating,\nBadge Product Quality,\nBadges Count,\nProduct Variation Inventory,\nNumber of Tags,\nTitle Localised,\nNumber Of Tags,\nHave Rating on Merchant Subtitle,\nHigh Retail Price,\nHigh Buyer Price,\n\nMajor Factors which decreases the 'units_sold'\n\nRating Two Count,\nRating One Count,\nPrice Increment,\nShipping Price Increment,\nIf Merchant title and Merchant name has differnt names,\nNo Urgency Banner,\nHigh Price (Buyer Price),\nLower discount rate (Buyer price compare to retail price),\n\nSpecial Note :-\n\nAdd Boost does not have any significant change to the 'units_sold'","cfa96494":"* The rating count has zero null values, however individual rating count has 45 null values. Does this mean that rating count of 45 products are zero?\n* Product color and size variation has 41 and 14 null values respectively. Perhaps this products have no variations?\n* has_urgency banner and urgency_text have similar null values. This makes sense, however, I will convert this to zeros and ones.\n* Origin countries have 17 null values. I might replace this with the mode if necessary.\n* Surprisingly there are 4 missing merchant names but only one missing info subtitle.\n* There are 1347 missing merchant profile pictures. I am expecting this to match with 'zeros' in 'merchant_has_profile_picture'","455ffc51":"Successful products have more ratings. This is expected as units sold is higher so rating is also higher. However, if I am building a model, I don't think it would be a good idea to keep this column as the huge number of ratings must be the result of higher units sold.","a6d482a5":"# **Inspiration**\n* Trying to validate the established idea of human sensitiveness to price drops ? (discounted price compared to original retail_price)\n* Do bad products sell ? How about the relationship between the quality of a product (ratings) and its success ? Does the price factor into this?\n* Do seller's fame factor into top products ?\n* Do the number of tags (making a product more discoverable) factor into the success of a product ?","ee150406":"# Price and retail price and the relation of their difference..","db36bc69":"# Create Model to predict Units Sold","1a9d8f30":"From the above plots, the higher units sold tend to have higher ratings. which again makes sense","a4c86d23":"**Now let's create a column which indicates how many popular tags contain on a specific product tag**","32fe4d5e":"Nothing interesting here. I will just drop these columns if need be..","74ff89e6":"**China and US are the prominent countries. Since other countries have less contribution for the set, those items were replaced with 'Other'**","42922d0c":"# Product Variation - Data Analysis","fa90ece2":"# Some conclusions\n* The site mainly sells female clothing.\n* Higher units sold means higher rating count.\n* The use of ad boosts does not seen to have any effect on the units sold and the site may lose revenue from this ads.\n* More detailed units sold and inventory levels would have been more helpful for analysis.\n* Product quality badges seems to increase the success of the products. Perhaps reviewing more products will increase motivation for merchants to improve their product? Different levels of badges can be applied?\n* The tags can be improved so that products can be categorised more specfically. This can be done by reducing the number of tags per product, so the mechants are forced to choose their tags more wisely.\n* Majority of the products are black and white. This might have been defined wrongly by the merchants. If not the case, the merchants can be encoured to include more variation to these.","685c5b77":"**Check whether the title was localised or not**"}}