{"cell_type":{"78765716":"code","8a15f29d":"code","82eb7794":"code","95abc676":"code","e591ac32":"code","d0fc6512":"code","ccb8c4c2":"code","25267e66":"code","4bf36224":"code","b3d91978":"code","d3120ffc":"code","9f1cd7c8":"code","6f1deb9f":"code","a53b3aca":"code","b0ce5f92":"code","7426bd47":"code","a34e3742":"code","2ee590df":"code","16969043":"code","4e4a4e5d":"code","8486c7ee":"code","ebf338af":"markdown","6510bf8e":"markdown","48f9e6f2":"markdown","2ba4f943":"markdown","6bb1ebd8":"markdown","d21411ac":"markdown","c6522e8b":"markdown","722eb321":"markdown","71aa6c45":"markdown","951e6a27":"markdown","3cc648e2":"markdown","a0dce229":"markdown","f9e577f0":"markdown"},"source":{"78765716":"pip install -U lightautoml","8a15f29d":"pip install -U gensim==3.8.3","82eb7794":"import os\nimport logging\n\nlogging.basicConfig(format='[%(asctime)s] (%(levelname)s): %(message)s', level=logging.INFO)\n\nimport pandas as pd\nimport numpy as np\n\nfrom lightautoml.automl.presets.text_presets import TabularNLPAutoML\nfrom lightautoml.tasks import Task\nfrom sklearn.metrics import mean_absolute_error\nimport multiprocessing as mp","95abc676":"N_THREADS = mp.cpu_count()  # \u0434\u0430\u0431\u044b \u043d\u0435 \u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\u0430\u0445\nN_FOLDS = 10\nRANDOM_STATE = 42\nTIMEOUT = 5 * 3600 # \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f - \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435\nTARGET_NAME = 'final_price'\nPATH = '..\/input\/lightautomlcourse-hw1'","e591ac32":"train_data = pd.read_csv(os.path.join(PATH,'train_data.csv'))\ntest_data = pd.read_csv(os.path.join(PATH,'test_data.csv'))\nsubmission = pd.read_csv(os.path.join(PATH,'sample_submission.csv'))","d0fc6512":"colors = {\n    ' Silver ': [192, 192, 192],\n    ' Blue ': [0, 0, 255],\n    ' Black ': [0, 0, 0],\n    ' White ': [255, 255, 255],\n    ' Grey ': [128, 128, 128],\n    ' Red ': [255, 0, 0],\n    ' Brown ': [165, 42, 42],\n    ' Green ': [0, 128, 0],\n    ' Carnelian red ': [179, 27, 27],\n    ' Beige ': [245, 245, 220],\n    ' Sky blue ': [135, 206, 235],\n    ' Golden ': [255, 215, 0],\n    ' Yellow ': [255, 255, 0],\n    ' Purple ': [128, 0, 128],\n    ' Orange ': [255, 165, 0],\n    ' Pink ': [255, 192, 203]\n}","ccb8c4c2":"dict_country_manuf = {\n    'MAZDA': 'Japan',\n    'CHRYSLER': 'USA',\n    'HUMMER': 'USA',\n    'SAAB': 'Sweden',\n    'UAZ': 'Russia',\n    'MASERATI': 'Italy',\n    'TESLA': 'USA',\n    'MG': 'Great Britain',\n    'HYUNDAI': 'South Korea',\n    'LINCOLN': 'USA',\n    'PONTIAC': 'USA',\n    'LEXUS': 'Japan',\n    'OTHER': 'Other',\n    'AUDI': 'Germany',\n    'MERCURY': 'USA',\n    'TOYOTA': 'Japan',\n    'NISSAN': 'Japan',\n    'SKODA': 'Czech Republic',\n    'PORSCHE': 'Germany',\n    'GREATWALL': 'China',\n    'SUZUKI': 'Japan',\n    'BENTLEY': 'Great Britain',\n    'FOTON': 'China',\n    'SSANGYONG': 'South Korea',\n    'FIAT': 'Italy',\n    'MITSUBISHI': 'Japan',\n    'ALFA ROMEO': 'Italy',\n    'PEUGEOT': 'France',\n    'KIA': 'South Korea',\n    'HAVAL': 'China',\n    'VAZ': 'Russia',\n    'SUBARU': 'Japan',\n    'FERRARI': 'Italy',\n    'BMW': 'Germany',\n    'JEEP': 'USA',\n    'JAGUAR': 'Great Britain',\n    'ISUZU': 'Japan',\n    'RENAULT': 'France',\n    'FORD': 'USA',\n    'MOSKVICH': 'Russia',\n    'CADILLAC': 'USA',\n    'VOLVO': 'Sweden',\n    'INFINITI': 'Japan',\n    'HONDA': 'Japan',\n    'ASTON MARTIN': 'Great Britain',\n    'BUICK': 'USA',\n    'TATA': 'India',\n    'SEAT': 'Spain',\n    'MERCEDES-BENZ': 'Germany',\n    'DAEWOO': 'South Korea',\n    'LAND ROVER': 'Great Britain',\n    'VOLKSWAGEN': 'Germany',\n    'OPEL': 'Germany',\n    'ROVER': 'Great Britain',\n    'ROLLS-ROYCE': 'Great Britain',\n    'DODGE': 'USA',\n    'JAC': 'China',\n    'CHEVROLET': 'USA',\n    'SATURN': 'USA',\n    'SCION': 'Japan',\n    'LAMBORGHINI': 'Italy',\n    'GAZ': 'Russia',\n    'ACURA': 'Japan',\n    'CITROEN': 'France',\n    'MINI': 'Great Britain',\n    'ZAZ': 'Russia',\n    'CHERY': 'China',\n    'GMC': 'USA',\n    'DAIHATSU': 'Japan',\n    'LANCIA': 'Italy'\n}","25267e66":"dict_sport_car_country = {\n    'MASERATI': '1',\n    'ALFA ROMEO': '1',\n    'FERRARI': '1',\n    'ASTON MARTIN': '1',\n    'LAMBORGHINI': '1',\n}","4bf36224":"dict_extra_vehicle_color = {\n    ' Green ': 1,\n    ' Golden ': 1,\n    ' Yellow ': 1,\n    ' Purple ': 1,\n    ' Orange ': 1,\n    ' Pink ': 1\n}","b3d91978":"def create_col_with_min_freq(data, col, min_freq=10):\n    # replace rare values (less than min_freq rows) in feature by RARE_VALUE\n    data[col + '_fixed'] = data[col].astype(str)\n    data.loc[data[col + '_fixed'].value_counts()[data[col + '_fixed']].values < min_freq, col + '_fixed'] = \"RARE_VALUE\"\n    data.replace({'nan': np.nan}, inplace=True)\n\ndef create_gr_feats(data):\n    # create aggregation feats for numeric features based on categorical ones\n    for cat_col in ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category',\n                    'vehicle_gearbox_type', 'doors_cnt', 'wheels', 'vehicle_color',\n                    'vehicle_interior_color', 'deal_type']:\n        create_col_with_min_freq(data, cat_col, 15)\n        for num_col in ['current_mileage', 'vehicle_year', 'car_leather_interior']:\n            for n, f in [('mean', np.mean), ('min', np.nanmin), ('max', np.nanmax)]:\n                data['FIXED_' + n + '_' + num_col + '_by_' + cat_col] = data.groupby(cat_col + '_fixed')[\n                    num_col].transform(f)\n\n    # create features with counts\n    for col in ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category',\n                'current_mileage', 'vehicle_year', 'vehicle_gearbox_type', 'doors_cnt',\n                'wheels', 'vehicle_color', 'vehicle_interior_color', 'car_vin', 'deal_type']:\n        data[col + '_cnt'] = data[col].map(data[col].value_counts(dropna=False))","d3120ffc":"def create_expert_feats(data):\n    tmp = []\n    for i in data.doors_cnt.to_list():\n        if pd.isna(i):\n            tmp.append(i)\n        elif len(i) == 3:\n            tmp.append(i[2])\n        else:\n            tmp.append(i[1])\n    data['doors_1'] = tmp\n    print('1 done')\n    tmp = []\n    for i in data.doors_cnt.to_list():\n        if pd.isna(i):\n            tmp.append(i)\n        elif len(i) == 3:\n            tmp.append(i[2])\n        else:\n            tmp.append(i[3])\n    data['doors_2'] = tmp\n    print('2 done')\n    data['wmi'] = None\n    data['vds'] = None\n    data['vds5'] = None\n    data['vds4'] = None\n    data['vds3'] = None\n    data.loc[data.car_vin.notna(), 'wmi'] = data.loc[data.car_vin.notna(), 'car_vin'].map(lambda x: x[:4])\n    print('wmi done')\n    data.loc[(data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'vds'] = data.loc[\n        (data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'car_vin'].map(lambda x: x[4:10])\n    data.loc[(data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'vds5'] = data.loc[\n        (data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'car_vin'].map(lambda x: x[4:9])\n    data.loc[(data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'vds4'] = data.loc[\n        (data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'car_vin'].map(lambda x: x[4:8])\n    data.loc[(data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'vds3'] = data.loc[\n        (data.car_vin.notna()) & (data.car_vin.str.len() > 10), 'car_vin'].map(lambda x: x[4:7])\n    for column in ['current_mileage', 'vehicle_year', 'car_leather_interior']:\n        data.loc[data[column] == 0, column] = None\n    data['age'] = None\n    data.loc[data.vehicle_year.notna(), 'age'] = 2021 - data.loc[data.vehicle_year.notna(), 'vehicle_year']\n    data['mil_per_year'] = None\n    data.loc[(data.age.notna()) & (data.current_mileage.notna()), 'mil_per_year'] = data.loc[(data.age.notna()) & (\n        data.current_mileage.notna()), 'current_mileage'] \/ (data.loc[(data.age.notna()) & (\n        data.current_mileage.notna()), 'age'] + 0.0)\n    data['description'] = data.vehicle_manufacturer + ' ' \\\n                          + data.vehicle_model + ' ' \\\n                          + data.vehicle_gearbox_type \\\n                          + data.wheels + data.vehicle_color \\\n                          + data.vehicle_interior_color \\\n                          + data.deal_type\n\n    data['R'] = None\n    data['G'] = None\n    data['B'] = None\n    for color in colors.keys():\n        data.loc[data.vehicle_color == color, 'R'] = colors[color][0]\n        data.loc[data.vehicle_color == color, 'G'] = colors[color][1]\n        data.loc[data.vehicle_color == color, 'B'] = colors[color][2]\n    data['country'] = None\n    for man in dict_country_manuf.keys():\n        data.loc[data.vehicle_manufacturer == man, 'country'] = dict_country_manuf[man]\n    data['sport'] = None\n    for sp in dict_sport_car_country.keys():\n        data.loc[data.vehicle_manufacturer == sp, 'sport'] = dict_sport_car_country[sp]\n    data['extra_vehicle_color'] = None\n    for extra in dict_extra_vehicle_color.keys():\n        data.loc[data.vehicle_color == extra, 'extra_vehicle_color'] = dict_extra_vehicle_color[extra]\n    data['color_scheme'] = data.vehicle_color + '\/' + data.vehicle_interior_color\n    data['NANs_cnt'] = data.isnull().sum(axis = 1)","9f1cd7c8":"create_expert_feats(train_data)\ncreate_expert_feats(test_data)\n\nall_df = pd.concat([train_data, test_data]).reset_index(drop = True)\ncreate_gr_feats(all_df)\ntrain_data, test_data = all_df[:len(train_data)], all_df[len(train_data):]","6f1deb9f":"train_data.loc[\n    (train_data['final_price'] > np.percentile(train_data['final_price'], 99.9)), 'final_price'] = np.percentile(\n    train_data['final_price'], 99.9)","a53b3aca":"task = Task('reg', loss='mae', metric='mae')\nroles = {\n    'target': TARGET_NAME,\n    'drop': ['row_ID'],\n    'category': ['vehicle_manufacturer', 'vehicle_category', 'vehicle_year', 'doors_cnt', 'wheels', 'vehicle_model',\n                 'vehicle_color', 'vehicle_interior_color', 'wmi', 'vds', 'vds3', 'vds4', 'vds5', 'age', 'deal_type',\n                 'car_leather_interior', 'R', 'G', 'B', 'sport', 'country', 'extra_vehicle_color', 'color_scheme'],\n    'text': ['description']\n}","b0ce5f92":"automl = TabularNLPAutoML(task=task,\n                          memory_limit=30,\n                          timeout=TIMEOUT,\n                          cpu_limit=N_THREADS,\n                          general_params={'use_algos':\n                                              [['lgb', 'cb'],\n                                               ['lgb_tuned'],\n                                               ]},\n                          reader_params={'cv': N_FOLDS,\n                                         'random_state': RANDOM_STATE,\n                                         'n_jobs': N_THREADS},\n                          selection_params={'importance_type': 'permutation'},\n                          text_params={'lang': 'en'}\n                          )","7426bd47":"oof_pred = automl.fit_predict(train_data, roles=roles)\nlogging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","a34e3742":"test_pred = automl.predict(test_data)\nlogging.info('Prediction for test data:\\n{}\\nShape = {}'\n             .format(test_pred, test_pred.shape))","2ee590df":"submission[TARGET_NAME] = test_pred.data[:, 0]\nsubmission.head()","16969043":"a = train_data.loc[train_data.car_vin.str.len() == 19].car_vin.value_counts()\nleaks = train_data.loc[train_data.car_vin.isin(list(a[a == 1].index))]\nfull_df = pd.merge(leaks[['car_vin', 'final_price', 'deal_type', 'vehicle_category']],\n                   test_data.loc[test_data.car_vin.str.len() == 19, ['row_ID', 'car_vin', 'deal_type', 'vehicle_category']],\n                   how='inner',\n                   on=['car_vin', 'deal_type', 'vehicle_category'])\nfor row in list(full_df.row_ID.values):\n    submission.loc[submission.row_ID == row, 'final_price'] = full_df.loc[full_df.row_ID == row, 'final_price'].values","4e4a4e5d":"submission.head()","8486c7ee":"submission.to_csv('submission.csv', index=False)","ebf338af":"### \u041d\u0435\u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0446\u0432\u0435\u0442\u0430\n[\u041f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e :)](https:\/\/www.kaggle.com\/sokolovaleks\/lightautoml-hw1#7.-Feature-engineering)","6510bf8e":"## FE","48f9e6f2":"### \u041f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0438 \u0440\u0430\u0441\u0447\u0435\u0442 \u0444\u0438\u0447\u0435\u0439\n\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u0434\u0435\u0438:\n* \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u0438\u043d\u0430\u043c\u0438 \u2014 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 WMI \u0438 VDS\n* \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043d\u0438\u043c\u0438 \u043a\u0430\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c","2ba4f943":"## \u0427\u0443\u0442\u043e\u0447\u043a\u0443 \u043c\u0430\u0433\u0438\u0438\n\u041f\u043e\u0434\u0441\u0442\u0440\u0438\u0433\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b","6bb1ebd8":"### \u0421\u043f\u0440\u043e\u0442\u043a\u0430\u0440\u044b\n[\u041f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e :)](https:\/\/www.kaggle.com\/sokolovaleks\/lightautoml-hw1#7.-Feature-engineering)","d21411ac":"## \u0424\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","c6522e8b":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","722eb321":"### \u0426\u0432\u0435\u0442\u0430\n\u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0446\u0432\u0435\u0442\u043e\u0432 \u0432 RGB","71aa6c45":"### \u0424\u0438\u0447\u0438 \u0438\u0437 strong baseline\n[\u041f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e :)](https:\/\/www.kaggle.com\/alexryzhkov\/lightautoml-hw-1-with-custom-fe)","951e6a27":"### \u0420\u0435\u0433\u0438\u043e\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n[\u041f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e :)](https:\/\/www.kaggle.com\/sokolovaleks\/lightautoml-hw1#7.-Feature-engineering)","3cc648e2":"## Summary\n\u042d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u043e\u043b\u043e \u0434\u0430\u0451\u0442:\n* Public - 1286.81882\n* Private - 1306.27066\n","a0dce229":"## AutoML","f9e577f0":"## \u0415\u0449\u0451 \u043d\u0435 \u043c\u043d\u043e\u0433\u043e \u043c\u0430\u0433\u0438\u0438\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u043e\u043b\u043d\u044b\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u0432\u0438\u043d\u0430\u043c \u0438\u0437 train \u0434\u043b\u044f test"}}