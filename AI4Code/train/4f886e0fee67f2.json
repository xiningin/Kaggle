{"cell_type":{"c0f9df11":"code","04f3e815":"code","424fb1a3":"code","3e8648de":"code","8999b67a":"code","77cd239a":"code","1fbb38a0":"code","eb6f4ee3":"code","b22124e2":"code","713a4447":"code","a428d811":"code","f8109d0c":"code","d9103e53":"code","e285becb":"code","613e4b7f":"code","fdd161df":"code","8785fdbc":"code","2d654ca0":"code","7e0f1b32":"code","df055c47":"code","8195ff27":"code","cc12cf29":"code","5290aff0":"code","6e51db9e":"code","5e5fd15e":"code","4a311f68":"code","83023060":"code","13361861":"code","5c1103ec":"code","10facb24":"code","144d0ed4":"code","e4f2a94c":"code","08b96114":"code","789ab4d6":"code","169b863e":"code","b0bdf0c7":"code","9fc4b6f9":"code","80fd4fdc":"code","93b35fb1":"code","607e0ec1":"code","7de1d44a":"code","ec2f6ae2":"markdown","00ada19f":"markdown","6b031f4c":"markdown","95d95843":"markdown","16158808":"markdown","5b08c75e":"markdown","be6c834d":"markdown","beca323e":"markdown","84db2772":"markdown","e6edc3a8":"markdown","688bc082":"markdown","182753d3":"markdown","2f438ba8":"markdown","f5c3018c":"markdown","c74f5104":"markdown","2a4c52b2":"markdown","19e23997":"markdown","a62d5b20":"markdown","3fc959bf":"markdown","4c30872f":"markdown","da716d07":"markdown","bf63f29d":"markdown","45a4bd40":"markdown"},"source":{"c0f9df11":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\n\nplt.rcParams[\"figure.figsize\"] = (12, 6)","04f3e815":"df_train = pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\", na_values='?', index_col= 0)\ndf_test = pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\", na_values=\"?\", index_col = 0) ","424fb1a3":"df_train","3e8648de":"# Para lidar melhor com o target\n\ndf_train[\"income\"].replace({\"<=50K\":0,\">50K\":1}, inplace = True)","8999b67a":"df_train.isnull().sum()","77cd239a":"df_test.isnull().sum()","1fbb38a0":"plt.figure(figsize = (18,8))\nsns.heatmap(df_train.corr(), cmap='BuPu', annot = True, fmt = '.2f')\nplt.show()","eb6f4ee3":"df_train.drop('fnlwgt', axis = 1, inplace = True)\ndf_test.drop('fnlwgt', axis = 1, inplace = True)","b22124e2":"plt.style.use(\"fivethirtyeight\")\nsns.boxplot(x = df_train.income, y = df_train.age)\nplt.show()","713a4447":"plt.style.use(\"fivethirtyeight\")\nsns.boxplot(x = df_train.income, y = df_train['hours.per.week'])\nplt.show()","a428d811":"plt.style.use(\"fivethirtyeight\")\nsns.boxplot(x = df_train.income, y = df_train['capital.loss'])\nplt.show()","f8109d0c":"plt.style.use(\"fivethirtyeight\")\nsns.boxplot(x = df_train.income, y = df_train['capital.gain'])\nplt.show()","d9103e53":"df_train.columns","e285becb":"fig, axes = plt.subplots(nrows = 4, ncols = 2)\nplt.tight_layout(pad = .2, w_pad = .5, h_pad = 5,)\n\nfeatures = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex', 'native.country']\neixos = [[0,0],[0,1],[1,0],[1,1],[2,0],[2,1],[3,0],[3,1]]\n\nfor feature, eixo in zip(features, eixos):\n    df_train.groupby([feature, 'income']).size().unstack().plot(kind = 'bar', stacked = True, ax = axes[eixo[0],eixo[1]], figsize = (15,12))","613e4b7f":"df_train = df_train[['age', 'hours.per.week', 'workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex', 'income']]\ndf_test = df_test[['age', 'hours.per.week', 'workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex']]","fdd161df":"warnings.filterwarnings(\"ignore\")\ndf_train.dropna(inplace = True)","8785fdbc":"df_test.fillna(method = 'ffill', inplace = True)","2d654ca0":"X_train = df_train[['age', 'hours.per.week', 'workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex']]\ny_train = df_train.income\n\nX_test = df_test","7e0f1b32":"enc = OneHotEncoder(handle_unknown='ignore')\nnew_categorical_features_train = enc.fit_transform(X_train[['workclass','education','marital.status','occupation','relationship','race','sex']]).toarray()\nnew_categorical_features_test = enc.transform(X_test[['workclass','education','marital.status','occupation','relationship','race','sex']]).toarray()","df055c47":"# A ordem dos valores corresponde \u00e0 apresentada no enc.categories_\n\nnew_categorical_features_train[0]","8195ff27":"enc.categories_","cc12cf29":"new_columns = []\nfor lista in enc.categories_:\n    for element in lista:\n        new_columns.append(element) ","5290aff0":"new_columns","6e51db9e":"new_X_train = X_train[['age','hours.per.week']]\nnew_X_test = X_test[['age','hours.per.week']]","5e5fd15e":"dicio_train = {}\nfor j, col in enumerate(new_columns):\n    dicio_train[col] = [new_categorical_features_train[i][j] for i in range(len(new_categorical_features_train))]","4a311f68":"dicio_test = {}\nfor j, col in enumerate(new_columns):\n    dicio_test[col] = [new_categorical_features_test[i][j] for i in range(len(new_categorical_features_test))]","83023060":"pre_new_X_train = pd.DataFrame(dicio_train)\npre_new_X_test =  pd.DataFrame(dicio_test)\npre_new_X_train.index = new_X_train.index\npre_new_X_test.index = new_X_test.index","13361861":"new_X_train = pd.concat([new_X_train, pre_new_X_train], axis = 1)\nnew_X_test = pd.concat([new_X_test, pre_new_X_test], axis = 1)","5c1103ec":"len(new_X_train.age.unique())","10facb24":"len(new_X_train['hours.per.week'].unique())","144d0ed4":"scaler = MinMaxScaler(feature_range=(-3,3))\nnew_X_train[['age','hours.per.week']] = scaler.fit_transform(new_X_train[['age','hours.per.week']])\nnew_X_test[['age','hours.per.week']] = scaler.transform(new_X_test[['age','hours.per.week']])","e4f2a94c":"grid_params = {'n_neighbors':[10, 40, 70, 100], 'weights':['uniform', 'distance'], 'metric':['euclidean','manhattan']}\n\nmodel = KNeighborsClassifier()\ngrid_search = GridSearchCV(model, grid_params, verbose = 1, cv = 4, n_jobs = -1)\n\ngrid_results = grid_search.fit(new_X_train, y_train) ","08b96114":"grid_results.best_score_","789ab4d6":"grid_results.best_estimator_","169b863e":"grid_results.best_params_","b0bdf0c7":"y_test = grid_search.predict(new_X_test)","9fc4b6f9":"results = pd.DataFrame({'income' : y_test})","80fd4fdc":"results.index.name = 'id'","93b35fb1":"results['income'].replace({0:\"<=50K\",1:\">50K\"}, inplace = True)","607e0ec1":"results","7de1d44a":"results.to_csv(\"Knn_DatasetAdult_PMR3508-2021-141.csv\")","ec2f6ae2":"###### An\u00e1lise das vari\u00e1veis num\u00e9ricas","00ada19f":"# Treinando o modelo","6b031f4c":"# Exportando os resultados","95d95843":"##### Analisaremos agora, a rela\u00e7\u00e3o entre o target (0 ou 1 para \"income\") e as vari\u00e1veis num\u00e9ricas ","16158808":"##### Das vari\u00e1veis num\u00e9ricas (n\u00e3o categ\u00f3ricas), nota-se que todas apresentam uma correla\u00e7\u00e3o razo\u00e1vel com o income, exceto fnlwgt. \n##### Logo, j\u00e1 podemos excluir essa feature","5b08c75e":"###### Montando um dataframe que contenha as colunas num\u00e9ricas que j\u00e1 t\u00ednhamos e as novas colunas obtidas com o one-hot encoding:","be6c834d":"# Estruturando os dados para treinar o modelo","beca323e":"## Importando pacotes","84db2772":"## An\u00e1lise explorat\u00f3ria de dados","e6edc3a8":"##### Antes de decidir o que fazer com os dados nulos, ser\u00e1 feita a an\u00e1lise: ","688bc082":"##### Checando valores nulos:","182753d3":"##### Para lidar melhor com o target, adotaremos 0 para \"<=50K\" e 1 para \">50K\"","2f438ba8":"##### Olharemos primeiro a matriz de correla\u00e7\u00e3o entre as features num\u00e9ricas:","f5c3018c":"##### Segue a an\u00e1lise da rela\u00e7\u00e3o entre as features categ\u00f3ricas e o label: ","c74f5104":"## Carregando os arquivos e verificando valores NaN ","2a4c52b2":"Novas colunas resultantes do one-hot encoding :","19e23997":"##### Ser\u00e1 usado o one-hot encoding para as vari\u00e1veis categ\u00f3ricas","a62d5b20":"Iremos usar as seguintes features para o modelo:\n- Age\n- Hours per week\n- Workclass \n- Education\n- Marital.status\n- Occupation\n- Relationship\n- Race\n- Sex","3fc959bf":"###### Nota-se que temos muitos valores para as features 'age' e 'hours.per.week' e s\u00e3o as \u00fanicas features que n\u00e3o passaram por one-hot encoding. O KNN \u00e9 um m\u00e9todo que utiliza como par\u00e2metro de classifica\u00e7\u00e3o a dist\u00e2ncia entre as observa\u00e7\u00f5es, dessa forma o MinMaxScaling pode ser interessante para tentar manter mais balanceada a importancia das features.","4c30872f":"##### Lidando com os missing values verificados anteriormente","da716d07":"##### \u00c9 poss\u00edvel concluir que tanto capital gain quanto capital loss n\u00e3o prov\u00eam informa\u00e7\u00f5es relevantes para se determinar a renda, sendo que ambos t\u00eam quase todos os seus valores nulos, ent\u00e3o podemos desconsiderar essas duas features","bf63f29d":"##### Importante notar que praticamente todos os dados s\u00e3o de pessoas dos Estados Unidos, assim a feature \"native.country\" \u00e9 pouco \u00fatil","45a4bd40":"# Realizando predi\u00e7\u00f5es"}}