{"cell_type":{"6ca2e046":"code","ba618725":"code","8a0ccc0b":"code","e1a8c4b8":"code","8fa18969":"code","0021c953":"code","fb4dd8d6":"code","c4c1cfbf":"code","2f2ca4cd":"code","e4326873":"code","5a368a99":"code","5192b8fe":"code","76ed5695":"code","8aa5ea29":"code","8b3087fd":"code","1f49d81b":"code","a414e8b3":"code","f2d860aa":"markdown","3dd68375":"markdown","68b72374":"markdown","2920c2e0":"markdown","777944d3":"markdown"},"source":{"6ca2e046":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ba618725":"df=pd.read_csv(\"..\/input\/heart.csv\")\ndf.head()","8a0ccc0b":"#Count the number of rows and columns in the daha set\ndf.shape","e1a8c4b8":"#count the number of missing values in each columns\ndf.isna().sum()","8fa18969":"#get a count of the number of target(1) or not(0)\ndf.target.value_counts()","0021c953":"#visualize the count\nsns.countplot(df.target,label=\"count\")\nplt.show()","fb4dd8d6":"#create a pair plot\nsns.pairplot(df,hue=\"target\")\nplt.show()","c4c1cfbf":"df.corr()","2f2ca4cd":"#visualize the correlation\nplt.figure(figsize=(15,10))\nsns.heatmap(df.corr(), annot=True,fmt=\".0%\")\nplt.show()","e4326873":"#Split the data set into independent(x) and dependent (y) data sets\nx=df.iloc[:,0:13].values\ny=df.iloc[:,-1].values","5a368a99":"#split the data set into 75% training and 25% testing\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.25,random_state=0)","5192b8fe":"#scale the data(feature scaling)\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.fit_transform(x_test)","76ed5695":"#create a function for the models\ndef models(x_train,y_train):\n  #Logistic Regression Model\n  from sklearn.linear_model import LogisticRegression\n  log=LogisticRegression(random_state=0)\n  log.fit(x_train,y_train)\n  \n  #Decision Tree\n  from sklearn.tree import DecisionTreeClassifier\n  tree=DecisionTreeClassifier(criterion='entropy',random_state=0)\n  tree.fit(x_train,y_train)\n  \n  #Random Forest Classifier\n  from sklearn.ensemble import RandomForestClassifier\n  forest = RandomForestClassifier(n_estimators=10,criterion=\"entropy\",random_state=0)\n  forest.fit(x_train,y_train)\n\n  #Print the models accuracy on the training data\n  print(\"[0]Logistic Regression Training Accuracy:\",log.score(x_train,y_train))\n  print(\"[1]Decision Tree Classifier Training Accuracy:\",tree.score(x_train,y_train))\n  print(\"[2]Random Forest Classifier Training Accuracy:\",forest.score(x_train,y_train))\n  \n  return log,tree,forest","8aa5ea29":"#Getting all of the models\nmodel = models(x_train,y_train)","8b3087fd":"#test model accuracy on confusion matrix\nfrom sklearn.metrics import confusion_matrix\n\nfor i in range(len(model)):\n  print(\"Model \", i)\n  cm =confusion_matrix(y_test,model[i].predict(x_test))\n\n  TP=cm[0][0]\n  TN=cm[1][1]\n  FN=cm[1][0]\n  FP=cm[0][1]\n\n  print(cm)\n  print(\"Testing Accuracy = \", (TP+TN) \/ (TP+TN+FN+FP))\n  print()","1f49d81b":"#show another way to get metrics of the models\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n\nfor i in range(len(model) ):\n  print(\"Model \",i)\n  print( classification_report(y_test,model[i].predict(x_test)))\n  print( accuracy_score(y_test,model[i].predict(x_test)))\n  print()","a414e8b3":"#print the prediction of random forest classifier model\npred=model[2].predict(x_test)\nprint(pred)\nprint()\nprint(y_test)","f2d860aa":"<h1>Data Analysis of Heart Disease <\/h1>","3dd68375":"References:\n\nhttps:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners\n\nhttps:\/\/seaborn.pydata.org\/tutorial\/distributions.html\n\nhttps:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\n\nhttps:\/\/www.youtube.com\/watch?v=NSSOyhJBmWY\n\nThank you!","68b72374":"Hello, everyone! I am new here. ","2920c2e0":"<h2>Import Required Modules<\/h2>","777944d3":"<h2>Read Data<\/h2>"}}