{"cell_type":{"ce2029b2":"code","bbdce6f7":"code","ec3d9768":"code","65fcdce5":"code","1f57e48e":"code","92e1ea0a":"code","0ac48e19":"code","2efc8198":"code","94af131d":"code","04089010":"code","c7ad1c92":"code","75e12859":"code","d2d0fdec":"code","132264d6":"code","966d8000":"code","302b751c":"code","e8c29651":"code","c61c6416":"code","b1600691":"code","b1198066":"code","4427b979":"code","b6a6a709":"code","830fafdf":"code","4e00b5eb":"code","41400328":"code","b72d13a6":"code","05cc1523":"code","eb28ccb5":"code","9a1824e0":"code","40f2b899":"code","a15107ca":"code","7bb4dd0d":"code","2d7b61a4":"code","f208dc80":"code","ab2c2fc0":"code","a411a64e":"markdown","1f4a577e":"markdown","83ed2bcd":"markdown","e20fcff4":"markdown","6d4b88e1":"markdown","490f1de0":"markdown","7bc76749":"markdown","1a0a077c":"markdown","ccac203f":"markdown","0bdfeaf8":"markdown","38b545a4":"markdown","3887f931":"markdown","bebf6726":"markdown","3211c961":"markdown","7407a22b":"markdown","8c268da1":"markdown","b84a6349":"markdown","2d0b7cb2":"markdown","374561ce":"markdown","320f5b08":"markdown","999cda2c":"markdown","96e1a441":"markdown","d409a3f4":"markdown","b7a620f7":"markdown","b98a21fb":"markdown","e2e944a1":"markdown","415cbbac":"markdown","4f2d0c55":"markdown","6a75f5c2":"markdown","5edf9316":"markdown","0c5b6466":"markdown","f1208854":"markdown"},"source":{"ce2029b2":"import pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))","bbdce6f7":"df = pd.read_csv('..\/input\/us-used-car-sales-data\/used_car_sales.csv')\nzip_codes = pd.read_csv('..\/input\/zipcodes-county-fips-crosswalk\/ZIP-COUNTY-FIPS_2017-06.csv')\ndf.head()","ec3d9768":"zip_codes_clean = zip_codes.groupby(by=['ZIP','STATE'], as_index=False).first()[['ZIP','STATE']]","65fcdce5":"df['Age'] = df['yearsold'] - df['Year']\ndf.head()","1f57e48e":"df = df[df['zipcode'].str.isdigit() == True]\ndf['zipcode'] = df['zipcode'].astype(int)","92e1ea0a":"df.shape","0ac48e19":"df = pd.merge(df, zip_codes_clean, left_on='zipcode', right_on='ZIP', how='left')\ndf.drop('ZIP',axis=1,inplace=True)\n","2efc8198":"df.shape","94af131d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")","04089010":"sns.pairplot(df)\nplt.show()","c7ad1c92":"g = sns.scatterplot(df['Age'],df['pricesold'])\ng.set(xlabel='Age', ylabel='Selling Price')\nplt.show()","75e12859":"df[df['Age']>100]","d2d0fdec":"df = df[df['Year']>0]\ndf.loc[df['Year']<100,['Year']] += 1900","132264d6":"df['Age'] = df['yearsold'] - df['Year']","966d8000":"g = sns.scatterplot(df['Age'],df['pricesold'])\ng.set(xlabel='Age', ylabel='Selling Price')\nplt.show()","302b751c":"df[df['Age']>100]","e8c29651":"df = df[df['Age']<100]","c61c6416":"g = sns.scatterplot(df['Age'],df['pricesold'])\ng.set(xlabel='Age', ylabel='Selling Price')\nplt.show()","b1600691":"df = df[df['Age']>=0]\ng = sns.scatterplot(df['Age'],df['pricesold'])\ng.set(xlabel='Age', ylabel='Selling Price')\nplt.show()","b1198066":"df[df['pricesold']>200000]","4427b979":"g = sns.scatterplot(df['Mileage'],df['pricesold'])\ng.set(xlabel='Mileage', ylabel='Selling Price')\nplt.show()","b6a6a709":"df = df[(df['Mileage']<300000) & (df['Mileage']>0)]","830fafdf":"g = sns.scatterplot(df['Mileage'],df['pricesold'])\ng.set(xlabel='Mileage', ylabel='Selling Price')\nplt.show()","4e00b5eb":"sns.distplot(df['NumCylinders'],kde=False,bins=20)\nplt.show()","41400328":"df[df['NumCylinders'] > 16]","b72d13a6":"df = df[df['NumCylinders'] <= 16]","05cc1523":"sns.distplot(df['NumCylinders'],kde=False,bins=16)\nplt.show()","eb28ccb5":"oldtimers = df[df['Age'] > 25]\nnewtimers = df[df['Age'] <= 25]","9a1824e0":"plt.subplot(1, 2, 1)\nplt.scatter(newtimers['Age'],newtimers['pricesold'])\nplt.ylabel('Selling Price')\nplt.xlabel('Age')\nplt.title('Newtimers Selling Prices')\nplt.subplot(1, 2, 2)\nplt.scatter(oldtimers['Age'],oldtimers['pricesold'])\nplt.ylabel('Selling Price')\nplt.xlabel('Age')\nplt.title('Oldtimers Selling Prices')\nplt.tight_layout()\nplt.show()","40f2b899":"import numpy as np\n\nplt.rcParams[\"figure.figsize\"] = [10,5]\nplt.subplot(1, 2, 1)\nmakes = newtimers['Make'].value_counts(ascending=True).tail(10).index\ny_pos = np.arange(len(makes))\nsalescount = newtimers['Make'].value_counts(ascending=True).tail(10).values \nplt.barh(y_pos, salescount, align='center', alpha=0.5)\nplt.yticks(y_pos, makes)\nplt.ylabel('Makes')\nplt.title('Newtimers Top 10 Sales count')\nplt.subplot(1, 2, 2)\nmakes = oldtimers['Make'].value_counts(ascending=True).tail(10).index\ny_pos = np.arange(len(makes))\nsalescount = oldtimers['Make'].value_counts(ascending=True).tail(10).values \nplt.barh(y_pos, salescount, align='center', alpha=0.5)\nplt.yticks(y_pos, makes)\nplt.ylabel('Makes')\nplt.title('Oldtimers Top 10 Sales count')\nplt.tight_layout()\nplt.show()","a15107ca":"states = df['STATE'].value_counts().index\nsalescount = df['STATE'].value_counts().values","7bb4dd0d":"import plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\ndata = [ dict(\n        type='choropleth',\n        locations = states,\n        z = salescount, \n        locationmode = 'USA-states',\n        colorbar = dict(\n            title = \"Salescount\")\n        ) ]\n\nlayout = dict(\n    title = 'US used car sales by states',\n    geo = dict(\n        scope = 'usa',\n        projection=dict(type='albers usa')\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='d3-cloropleth-map')","2d7b61a4":"newtimers.groupby(by=['Make','Model','Year']).size().sort_values(ascending=False).head()","f208dc80":"mileage = newtimers[(newtimers['Make'] == 'Ford') \n          & (newtimers['Model'] == 'Mustang') \n          & (newtimers['Year'] == 2007)]['Mileage']\nsalesprices = newtimers[(newtimers['Make'] == 'Ford') \n          & (newtimers['Model'] == 'Mustang') \n          & (newtimers['Year'] == 2007)]['pricesold']","ab2c2fc0":"plt.scatter(mileage,salesprices)\nplt.ylabel('Selling Price')\nplt.xlabel('Mileage')\nplt.show()","a411a64e":"For our purpose we only need zip code and state. If we would only copy these columns we would end with duplicates which would duplicate sales data later when we join the two dataframes. To be safe let's create a unique zip,state dataframe.","1f4a577e":"Some differences in Makes between New- and Oldtimers. Nissan and Honda haven't made it to the oldtimer section, yet :)","83ed2bcd":"There's a lot of samples with ZERO cylinders. I'm not cleaning this up here but you could try to map that number from other listings to correct this as much as possible.","e20fcff4":"### US States from ZIP Code\nfor this to work we need to clean up the zip codes in the sales dataframe first by removing non numeric zip codes and convert the column type to integer. I'm converting the zip codes to integer because the zip data frames stores them as such (i hope there are no issues with the leading zeroes in the US zip codes)","6d4b88e1":"ok, we're good. no duplicates","490f1de0":"And recalculate the Age column again","7bc76749":"## Analysis on a specific model\nLet's focus on newtimers and one of the top selling models, the 2007 Ford Mustang.","1a0a077c":"I'm not a car salesman but $200k+ for Porsche and Ferrari? Sounds realistic.","ccac203f":"## Adding some features\nAdding some features that don't come with the dataset but are helpful for visualization and building models on top of the dataset. \n### Age of the car","0bdfeaf8":"Let's take a look at the age\/selling price distribution side by side","38b545a4":"Oh boy, there's some cleanup to do.\n\n### Selling price by Age\nLet's take a look how the age\/price scatter plot looks like","3887f931":"## More Visualizations\n### Sales by Car Makes\nWhat's the Car Make breakdown in both groups?","bebf6726":"well, looks like there are cars with over 1M miles on the clock - hard to believe. Let's fix this. We could either just replace the mileage with something more reasonable (e.g. the maximum of the \"clean\" mileage in the remaining dataset) or simply delete those items. I chose the latter and delete all samples with a mileage over 300K.\nSame applies to samples with mileage of zero. We're looking at used cars, so I would expect some miles.","3211c961":"## Take a look at the features","7407a22b":"ok - yeah there's something off. In commercial vehicles 16 cylinders are max. Let's print the outliers here.","8c268da1":"cars with a negative age? there's some next year models and typos. For now I just delete them","b84a6349":"### Sales by Region","2d0b7cb2":"Cars for 200k+? Let's see them.","374561ce":"There's still some odd looking old cars with an age over 100 years. Let's look at them","320f5b08":"And do the histogram again.","999cda2c":"There's some outliers, most likely due to a wrong Model year in the data set. Let's clean this up","96e1a441":"# Used car sales in the US\nThis notebook is an intro into the US used car sales dataset on Kaggle.  ","d409a3f4":"Just a few above 16. I'll just delete them.","b7a620f7":"I'll just delete the wrong ones from the data set.","b98a21fb":"That looks much better. \n\nThe pairplot also showed some issues with the NumCylinders feature. Let's take a closer look at this.","e2e944a1":"And let's do the scatterplot one more time.","415cbbac":"## Splitting dataset into Oldtimers and Newtimers\nI think it makes sense to split the dataset into two. Historical cars (age >25 years) and \"normal\" cars that are younger than 25 years","4f2d0c55":"## Selling price by miles","6a75f5c2":"Looks reasonable to me. Newtimers prices go down over time while Oldtimer prices seem to go up over time.","5edf9316":"Let's do the scatterplot again","0c5b6466":"## Initial Analysis & Cleanup\nLet's start with a pairplot to get an overview of the data.","f1208854":"Fix the samples that used YY instead of YYYY. The list above showed only 19xx cars. So you'll need to change the code below if you'll see cars that clearly where built in the 2000s."}}