{"cell_type":{"28612795":"code","161cd217":"code","1cd13f7a":"code","07dc3922":"code","222fa0a5":"code","1746639f":"code","e6766629":"code","8bd5dfdc":"code","d9bf4788":"code","e6d7c955":"code","65653f9f":"code","2b8c3d86":"code","b625374b":"code","58e8d7e8":"code","d4056608":"code","06ca3f6d":"code","c060f2b5":"code","5201a4da":"code","eda426cb":"code","28c77a42":"code","69fc282c":"code","b1396228":"code","9ebc9fbd":"code","188ecda5":"code","dadc6e9b":"code","ec5b5bea":"code","7f27e41b":"code","e17c207c":"code","1a7eecff":"code","37d0b86e":"code","70dffc21":"code","4365f036":"code","ccfbacec":"code","84ba08dc":"code","1a9b06b5":"code","8fa3c1f2":"code","9b2fa257":"code","b887895a":"code","066d4ea3":"code","226201c5":"code","412455f4":"code","dcf79074":"code","aa54e643":"code","d950f8f6":"code","d976f95d":"code","33e44949":"code","5c9dc0ee":"code","09d8016b":"code","743dc4b5":"code","9d2fd027":"code","238a35a3":"code","098d6f7e":"code","343b6edc":"code","c5b9ebbd":"code","0c0e8a7b":"code","a7ffaee6":"code","6da6724c":"code","6f52d8d8":"code","626189d4":"code","38fad4ca":"code","9a75ac5a":"code","c0ccd7bf":"code","03a65aff":"code","dbaa532a":"code","61f14b40":"code","2e45665a":"code","64f8ba65":"code","58146f2f":"code","30c1847c":"code","1ea6b9a0":"code","2169aec6":"code","10d8fa36":"code","f3983270":"code","75770e72":"code","b11edb0e":"code","df8d95d6":"code","2fa5d675":"code","d2b21f97":"code","b7e0e785":"code","45a94fdf":"code","ee6d7fe1":"code","4cafcabc":"code","e77cb966":"code","61d3214b":"code","f88feeaa":"code","89bdd412":"code","0c578ea3":"code","8e6a4d7d":"code","2c569f6a":"code","64597ae1":"code","72daf715":"code","4cb2124a":"code","a197f5da":"code","f3a23dc0":"markdown","ed1fae9e":"markdown","830039ef":"markdown","6ed9ca80":"markdown","8744fe9e":"markdown","3b066db7":"markdown","25a377fa":"markdown","6f0ffeab":"markdown","27fe1652":"markdown","6e5716fd":"markdown","c35f2568":"markdown","44b8de56":"markdown","63abec63":"markdown","80e67127":"markdown","09ea7910":"markdown","9d5c666d":"markdown","32c8fa1f":"markdown","78116355":"markdown","1488ca1c":"markdown","56cf9a56":"markdown","9197c44d":"markdown","45eb35d0":"markdown","7b8e9329":"markdown","eb89bd12":"markdown","8cf2c701":"markdown","96b5ae40":"markdown","127a6020":"markdown","030dc4a6":"markdown","96c883ba":"markdown","dd4ff386":"markdown","48e362dd":"markdown","1416c3c3":"markdown","cd6bb1be":"markdown","2ca3d277":"markdown","b2ad0750":"markdown","b3d4f42c":"markdown","6b990eff":"markdown","4ad3881c":"markdown","7f6b223b":"markdown","4836a1bc":"markdown","4cc5438d":"markdown","08216d91":"markdown","74e6fff7":"markdown","ba5cb03a":"markdown","aa8d617d":"markdown","42b235ba":"markdown","f3e84606":"markdown","e53d0d36":"markdown","210b5181":"markdown","0741e3d9":"markdown","d561f260":"markdown","bdca1834":"markdown","6f942530":"markdown","8417948f":"markdown","63c5dfcf":"markdown","610ebd5f":"markdown","4b31fc94":"markdown","418d3d70":"markdown","7fa938b6":"markdown","b2b079da":"markdown","31e335d2":"markdown","60c9725b":"markdown","96f74097":"markdown","521abfb7":"markdown","b56ab42f":"markdown","2e18ba25":"markdown","30b05977":"markdown","c0cccd3d":"markdown","b0e033f1":"markdown","fce735ff":"markdown","56d892c3":"markdown","98d1e92e":"markdown","7236df3c":"markdown","a8c97736":"markdown","7782b5ba":"markdown","f5d410a8":"markdown","5643d22f":"markdown","92268ac7":"markdown","49032a30":"markdown","8cb60d6f":"markdown","7e9cd81f":"markdown","f14dd5f0":"markdown","6412abae":"markdown","4bd839dc":"markdown","834f5a5e":"markdown","aef78c0b":"markdown","b9185da3":"markdown","7a7bd783":"markdown","89c10ebd":"markdown","dee67711":"markdown","73ad7823":"markdown","e033a49e":"markdown","b5882de1":"markdown","6ad1a179":"markdown","40c82b0d":"markdown","25b9192c":"markdown","42eac3b1":"markdown","43202c42":"markdown","909bc6bf":"markdown","729305a5":"markdown","cd734153":"markdown","499663e5":"markdown","745de617":"markdown","ddb5109e":"markdown","fced75f9":"markdown","be39f855":"markdown","e4b9783e":"markdown","71d4e266":"markdown","c09e08e7":"markdown","d09320e4":"markdown","fb44837c":"markdown","89cd0564":"markdown","6ca06457":"markdown","3a7ae3af":"markdown","31bd5b4d":"markdown","de4f5bbe":"markdown","91dd8437":"markdown","cecbab4e":"markdown","a8a6e488":"markdown","4b1e6a50":"markdown","af18eeec":"markdown","e49468de":"markdown","b629742c":"markdown","ec77d9fe":"markdown","a2b4a2a2":"markdown","a40e2f47":"markdown","62606c17":"markdown","98cb3d5d":"markdown","831f905c":"markdown","ba36dd38":"markdown","733b7d21":"markdown"},"source":{"28612795":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# \u8bbe\u7f6e\u56fe\u5f62\u7684\u98ce\u683c\nsns.set_style(\"darkgrid\")\nsns.set_palette(\"Set2\")\n\n# \u663e\u793aDataFrame\u7684\u6240\u6709\u5185\u5bb9\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)","161cd217":"def plot_category(df, feature, group=None):\n    \"\"\"\n    \u4e3a\u4e86\u65b9\u4fbf\u5bf9\u6240\u6709\u7279\u5f81\u8fdb\u884c\u6bd4\u8f83, \u5efa\u8bae\u5bf9\u8fde\u7eed\u578b\u7279\u5f81\u8fdb\u884c\u79bb\u6563\u5316\u540e, \u4e5f\u7528\u8fd9\u4e2a\u7ed8\u56fe\u51fd\u6570.\n    \u5bf91\u4e2a\u6216\u80052\u4e2a\u7c7b\u522b\u7279\u5f81\u8fdb\u884c\u7ed8\u56fe\n    \u8fd4\u56de\u4e24\u5f20\u5b50\u56fe:\n    \u7b2c\u4e00\u5f20\u662f\u5404\u4e2alevel\u7684\u6837\u672c\u4e2a\u6570\n    \u7b2c\u4e8c\u5f20\u662f\u5404\u4e2alevel\u4e0b\u7684\u751f\u5b58\u7387, \u4ee5\u53ca95%\u7f6e\u4fe1\u533a\u95f4\n    \"\"\"\n    fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, figsize=(10, 6))\n    sns.countplot(x=feature, hue=group, data=df, ax=ax0)\n    sns.barplot(x=feature, y=\"Survived\", hue=group, data=df, ax=ax1)\n    ax1.hlines(\n        Survived_avg,\n        -0.5,\n        df[feature].nunique() - 0.5,\n        colors=\"red\",\n        linestyles=\"dashed\",\n    )\n    if not group:\n        plt.suptitle(feature)\n    else:\n        plt.suptitle(feature + \" | \" + group)\n","1cd13f7a":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf = pd.concat([df_train, df_test]).reset_index().drop([\"index\"], axis=1)\nn_train = df_train.shape[0]\nn_all = df.shape[0]\ndf.head()","07dc3922":"Survived_avg = np.around(df.Survived.mean(), decimals=2)\nprint(f\"\u5e73\u5747\u751f\u5b58\u7387: {Survived_avg}\")","222fa0a5":"df.isna().sum().sort_values(ascending=False).loc[lambda x: x > 0]","1746639f":"df[\"Title\"] = \"man\"\ndf.loc[df.Sex == \"female\", \"Title\"] = \"woman\"\ndf.loc[df[\"Name\"].str.contains(\"Master\"), \"Title\"] = \"boy\"\ndf.Title.value_counts(normalize=True)","e6766629":"plot_category(df, \"Sex\")","8bd5dfdc":"plot_category(df, \"Title\")","d9bf4788":"df[\"Title2\"] = df[\"Title\"]\ndf.loc[(df.Title == \"woman\") & (df.Age <= 14), \"Title2\"] = \"girl\"\nplot_category(df, \"Title2\")\ndel df[\"Title2\"]","e6d7c955":"df.Fare.replace(0, np.NaN, inplace=True)\ndf[\"Pfare\"] = df[\"Fare\"] \/ df.groupby(\"Ticket\")[\"Ticket\"].transform(\"count\")","65653f9f":"df[\"Fare_bin\"] = pd.qcut(df[\"Fare\"], 10)\nplot_category(df, \"Fare_bin\")","2b8c3d86":"df[\"Pfare_bin\"] = pd.qcut(df[\"Pfare\"], 10)\nplot_category(df, \"Pfare_bin\")","b625374b":"plot_category(df, \"Pclass\")","58e8d7e8":"df[\"Age_bin\"] = pd.qcut(df[\"Age\"], 10)\nplot_category(df, \"Age_bin\")","d4056608":"plot_category(df, \"SibSp\")","06ca3f6d":"plot_category(df, \"Parch\")","c060f2b5":"df[\"Family\"] = df.SibSp + df.Parch\nplot_category(df, \"Family\")","5201a4da":"plot_category(df, \"Embarked\")","eda426cb":"df.drop([\"Sex\", \"Cabin\", \"Family\", \"Parch\", \"SibSp\", \"Age\", \"Age_bin\", \"Fare_bin\"], axis=1, inplace=True)\ndf.head()","28c77a42":"plot_category(df, \"Title\", group=\"Pclass\")","69fc282c":"plot_category(df, \"Title\", group=\"Pfare_bin\")","b1396228":"plot_category(df, \"Title\", group=\"Embarked\")","9ebc9fbd":"df.loc[(df.Title == \"boy\") & (df.Embarked == \"Q\")]","188ecda5":"sns.catplot(x=\"Pclass\", y=None, hue=\"Pfare_bin\", col=\"Title\", data=df, kind=\"count\")\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Pfare_bin\", col=\"Title\", data=df, kind=\"bar\")","dadc6e9b":"sns.catplot(x=\"Pclass\", y=None, hue=\"Embarked\", col=\"Title\", data=df, kind=\"count\")\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Embarked\", col=\"Title\", data=df, kind=\"bar\")","ec5b5bea":"sns.catplot(x=\"Embarked\", y=None, hue=\"Pfare_bin\", col=\"Title\", data=df, kind=\"count\")\nsns.catplot(x=\"Embarked\", y=\"Survived\", hue=\"Pfare_bin\", col=\"Title\", data=df, kind=\"bar\")","7f27e41b":"sns.catplot(x=\"Pclass\", y=None, hue=\"Pfare_bin\", row=\"Embarked\", col=\"Title\", data=df, kind=\"count\")\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Pfare_bin\", row=\"Embarked\", col=\"Title\", data=df, kind=\"bar\")","e17c207c":"df.loc[(df.Title == \"man\") \n       & (df.Pclass == 1)\n       & (df.Embarked.isin([\"S\"])) \n       & (26.832 < df.Pfare) \n       & (df.Pfare <= 31.679),\n       \"Survived\"].mean()","1a7eecff":"df.loc[(df.Title == \"woman\") \n       & (df.Pclass == 3)\n       & (df.Embarked.isin([\"S\"]))\n       & (df.Pfare <= 6.323),\n       \"Survived\"].mean()","37d0b86e":"df.loc[(df.Title == \"boy\") \n       & (df.Pclass == 3)\n       & (df.Embarked.isin([\"S\"])) \n       & (df.Pfare <= 6.323),\n       \"Survived\"].mean()","70dffc21":"df[\"Surname\"] = df[\"Name\"].str.split(\",\").str[0]\n\ndf[\"Ticket_id\"] = (\n    df.Pclass.astype(str)\n    + \"-\"\n    + df.Ticket.str[:-1].astype(str)\n    + \"-\"\n    + df.Fare.astype(str)\n    + \"-\"\n    + df.Embarked.astype(str)\n)\n\ndf[\"Group_id\"] = df.Surname + \"-\" + df[\"Ticket_id\"]\n\n# \u540e\u7eed\u5904\u7406\ndf.loc[df.Title == \"man\", \"Group_id\"] = \"noGroup\"\ndf[\"WC_count\"] = (\n    df.loc[df.Title != \"man\"]\n    .groupby(\"Group_id\")[\"Group_id\"]\n    .transform(\"count\")\n)\ndf.loc[df.WC_count <= 1, \"Group_id\"] = \"noGroup\"","4365f036":"indices = []\ncount = 0\nfor i in range(n_all):\n    if df.loc[i, \"Title\"] != \"man\" and df.loc[i, \"Group_id\"] == \"noGroup\":\n        idx = np.flatnonzero(\n            (df[\"Ticket_id\"] == df.loc[i, \"Ticket_id\"])\n            & (df[\"Group_id\"] != \"noGroup\")\n        )\n        if len(idx):\n            df.loc[i, \"Group_id\"] = df.loc[idx[0], \"Group_id\"]\n            indices.append(i)\n            count += 1\nprint(f\"\u53d1\u73b0\u4e86{count}\u4e2a\u5973\u4fdd\u59c6\")\ndf.loc[indices]","ccfbacec":"print(f\"\u975eWCG\u7ec4\u53f7\u4e2a\u6570: {df.Group_id.loc[lambda x: x == 'noGroup'].nunique()}\")\nprint(f\"WCG\u7ec4\u53f7\u4e2a\u6570: {df.Group_id.loc[lambda x: x != 'noGroup'].nunique()}\")\n\nprint()\nprint(f\"\u975eWCG\u4e58\u5ba2\u4e2a\u6570: {df.Group_id.loc[lambda x: x == 'noGroup'].count()}\")\n\nprint()\nprint(f\"WCG\u4e58\u5ba2\u4e2a\u6570: {df.Group_id.loc[lambda x: x != 'noGroup'].count()}\")\n\nprint()\nprint(\"\u975eWCG\u4e58\u5ba2\u7684Title\u5206\u5e03:\")\nprint(df.loc[df.Group_id == \"noGroup\", \"Title\"].value_counts())\n\nprint()\nprint(\"WCG\u4e58\u5ba2\u7684Title\u5206\u5e03:\")\nprint(df.loc[df.Group_id != \"noGroup\", \"Title\"].value_counts())\n\nprint()\nprint(\"\u5168\u4f53\u4e58\u5ba2\u7684Title\u5206\u5e03:\")\nprint(df.Title.value_counts())\n\nprint()\nprint(\"\u975eWCG\u8986\u76d6\u7387:\")\nprint((df.loc[df.Group_id == \"noGroup\", \"Title\"].value_counts() \/ df.Title.value_counts()).fillna(0.0))\n\nprint()\nprint(\"WCG\u8986\u76d6\u7387:\")\nprint((df.loc[df.Group_id != \"noGroup\", \"Title\"].value_counts() \/ df.Title.value_counts()).fillna(0.0))","84ba08dc":"df.loc[(df.Title == \"man\") & (df.Group_id == \"noGroup\"), \"Survived\"].mean()","1a9b06b5":"df.loc[(df.Title == \"boy\") & (df.Group_id == \"noGroup\"), \"Survived\"].mean()","8fa3c1f2":"df.loc[(df.Title == \"boy\") & (df.Group_id == \"noGroup\")]","9b2fa257":"df.loc[(df.Title == \"boy\") & (df.Group_id != \"noGroup\"), \"Survived\"].mean()","b887895a":"df.loc[(df.Title == \"woman\") & (df.Group_id == \"noGroup\"), \"Survived\"].mean()","066d4ea3":"df.loc[(df.Title == \"woman\") & (df.Group_id != \"noGroup\"), \"Survived\"].mean()","226201c5":"df[\"WCSurvived\"] = df.loc[df.Group_id != \"noGroup\"].groupby(\"Group_id\").Survived.transform(\"mean\")","412455f4":"print(\"\u7ec4\u5185\u751f\u5b58\u7387\u7684\u5206\u5e03:\")\nprint(df.WCSurvived.value_counts())","dcf79074":"df.loc[df.WCSurvived == 0.75]","aa54e643":"df.loc[df.WCSurvived == 0.5]","d950f8f6":"groups_test = set(df[n_train:].Group_id.unique()) - set(df[:n_train].Group_id.unique())\ndf.loc[df.Group_id.isin(groups_test)].sort_values(by=\"Surname\")","d976f95d":"sns.catplot(x=\"Pclass\", y=None, hue=\"Pfare_bin\", row=\"Embarked\", col=\"Title\", data=df.loc[df.Group_id != \"noGroup\"], kind=\"count\")\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Pfare_bin\", row=\"Embarked\", col=\"Title\", data=df.loc[df.Group_id != \"noGroup\"], kind=\"bar\")","33e44949":"df.loc[df.Group_id.isin(groups_test), \"WCSurvived\"] = 0.0\ndf.loc[df.Surname == \"Gibson\", \"WCSurvived\"] = 1.0\ndf.loc[df.Group_id.isin(groups_test)].sort_values(by=\"Surname\")","5c9dc0ee":"df.loc[(df.Group_id != \"noGroup\") & df.WCSurvived.isna()].shape[0]","09d8016b":"df.loc[n_train : n_all - 1, \"Predict\"] = 0\ndf.loc[n_train : n_all - 1, \"Predict\"][(df.Title == \"woman\")] = 1\ndf.loc[n_train : n_all - 1, \"Predict\"][(df.Title == \"woman\") & (df[\"WCSurvived\"] == 0)] = 0\ndf.loc[n_train : n_all - 1, \"Predict\"][(df.Title == \"boy\") & (df[\"WCSurvived\"] == 1)] = 1","743dc4b5":"df_boy_test = df[n_train:].loc[(df.Title == \"boy\")]\ndf_boy_WCG_test = df[n_train:].loc[(df.Title == \"boy\") & (df.Group_id != \"noGroup\")]\ndf_boy_alive = df[n_train:].loc[(df.Title == \"boy\") & (df.Predict == 1)]\nprint(f\"\u88ab\u9884\u6d4b\u4e3a\u751f\u5b58\u7684boy({df_boy_alive.shape[0]}\u4e2a, \u6d4b\u8bd5\u96c6\u91cc\u9762\u7684WCG boy\u6709{df_boy_WCG_test.shape[0]}\u4e2a, \u6d4b\u8bd5\u96c6\u91cc\u9762\u7684boy\u6709{df_boy_test.shape[0]}\u4e2a):\")\ndf_boy_alive","9d2fd027":"df_woman_test = df[n_train:].loc[(df.Title == \"woman\")]\ndf_woman_WCG_test = df[n_train:].loc[(df.Title == \"woman\") & (df.Group_id != \"noGroup\")]\ndf_woman_dead = df[n_train:].loc[(df.Title == \"woman\") & (df.Predict == 0)]\nprint(f\"\u88ab\u9884\u6d4b\u4e3a\u6b7b\u4ea1\u7684woman({df_woman_dead.shape[0]}\u4e2a, \u6d4b\u8bd5\u96c6\u91cc\u9762\u7684WCG woman\u6709{df_woman_WCG_test.shape[0]}\u4e2a, \u6d4b\u8bd5\u96c6\u91cc\u9762\u7684woman\u6709{df_woman_test.shape[0]}\u4e2a):\")\ndf_woman_dead","238a35a3":"output = pd.DataFrame(\n    {\n        \"PassengerId\": df[n_train:].PassengerId,\n        \"Survived\": df[n_train:].Predict.astype(\"int\"),\n    }\n)\noutput.to_csv(\"WCG_gender.csv\", index=False)\nprint(\"\u5206\u6570\u4e3a: 0.81578!\")","098d6f7e":"df_noGroup = df[[\"PassengerId\", \"Survived\", \"Title\", \"Pclass\", \"Pfare\", \"Embarked\", \"Group_id\"]]\ndf_noGroup = df_noGroup.loc[df_noGroup.Group_id == \"noGroup\"]\ndel df_noGroup[\"Group_id\"]\nprint(df_noGroup.shape)","343b6edc":"df_man = df_noGroup.loc[df_noGroup.Title == \"man\"].copy()\nprint(df_man.shape)\ndf_man.head()","c5b9ebbd":"df_woman = df_noGroup.loc[df_noGroup.Title == \"woman\"].copy()\nprint(df_woman.shape)\ndf_woman.head()","0c0e8a7b":"plot_category(df_man, \"Pclass\")","a7ffaee6":"plot_category(df_woman, \"Pclass\")","6da6724c":"df_man[\"Pfare_bin\"] = pd.qcut(df_man[\"Pfare\"], 10)\nplot_category(df_man, \"Pfare_bin\")","6f52d8d8":"df_woman[\"Pfare_bin\"] = pd.qcut(df_woman[\"Pfare\"], 9)\nplot_category(df_woman, \"Pfare_bin\")","626189d4":"plot_category(df_man, \"Embarked\")","38fad4ca":"plot_category(df_woman, \"Embarked\")","9a75ac5a":"plot_category(df_man, \"Pclass\", \"Pfare_bin\")","c0ccd7bf":"plot_category(df_woman, \"Pclass\", \"Pfare_bin\")","03a65aff":"plot_category(df_man, \"Pclass\", \"Embarked\")","dbaa532a":"plot_category(df_woman, \"Pclass\", \"Embarked\")","61f14b40":"plot_category(df_man, \"Pfare_bin\", \"Embarked\")","2e45665a":"plot_category(df_woman, \"Pfare_bin\", \"Embarked\")","64f8ba65":"sns.catplot(x=\"Pclass\", y=None, hue=\"Pfare_bin\", col=\"Embarked\", data=df_man, kind=\"count\")\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Pfare_bin\", col=\"Embarked\", data=df_man, kind=\"bar\")","58146f2f":"sns.catplot(x=\"Pclass\", y=None, hue=\"Pfare_bin\", col=\"Embarked\", data=df_woman, kind=\"count\")\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Pfare_bin\", col=\"Embarked\", data=df_woman, kind=\"bar\")","30c1847c":"df_man.Pfare.fillna(df_man.Pfare.mean(), inplace=True)\ndf_woman.Pfare.fillna(df_woman.Pfare.mean(), inplace=True)\n\ndf_man.Embarked.fillna(\"S\", inplace=True)\ndf_woman.Embarked.fillna(\"S\", inplace=True)\n\ndf_man.Pfare = (df_man.Pfare - df_man.Pfare.mean()) \/ df_man.Pfare.std()\ndf_woman.Pfare = (df_woman.Pfare - df_woman.Pfare.mean()) \/ df_woman.Pfare.std()\n\n\ny_man = df_man.Survived\nn_man = len(y_man)\nn_train_man = y_man.count()\nX_man = df_man[[\"Pclass\", \"Pfare\", \"Embarked\"]]\n\ny_woman = df_woman.Survived\nn_woman = len(y_woman)\nn_train_woman = y_woman.count()\nX_woman = df_woman[[\"Pclass\", \"Pfare\", \"Embarked\"]]\n\nX_man = pd.get_dummies(X_man, columns=[\"Pclass\", \"Embarked\"])\nX_woman = pd.get_dummies(X_woman, columns=[\"Pclass\", \"Embarked\"])\n\nX_train_man, X_test_man = X_man[:n_train_man].copy(), X_man[n_train_man:].copy()\ny_train_man = y_man[:n_train_man].copy()\n\nX_train_woman, X_test_woman = X_woman[:n_train_woman].copy(), X_woman[n_train_woman:].copy()\ny_train_woman = y_woman[:n_train_woman].copy()\n\nX_man.head(), X_woman.head()","1ea6b9a0":"from sklearn.model_selection import cross_val_score, KFold, cross_val_predict\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nfrom time import time\n\nrandom_state = 0\n\n\ndef best_mean_std(cv_results):\n    scores = np.array(cv_results[\"mean_test_score\"]) - 0.0 * np.array(\n        cv_results[\"std_test_score\"]\n    )\n    best_idx = np.argmax(scores)\n    return best_idx\n\ndef score_func_alive(y, y_pred):\n    TP = np.sum((y_pred == 1) & (y == 1))\n    FP = np.sum((y_pred == 1) & (y == 0))\n    return (TP - FP) \/ len(y)\n\nscoring_alive = make_scorer(score_func_alive)\n\ndef score_func_dead(y, y_pred):\n    TN = np.sum((y_pred == 0) & (y == 0))\n    FN = np.sum((y_pred == 0) & (y == 1))\n    return (TN - FN) \/ len(y)\n\nscoring_dead = make_scorer(score_func_dead)\n\nclass Titanic:\n    def __init__(self, mdl, scoring, cv):\n        self.mdl = mdl\n        self.scoring = scoring\n        self.cv = cv\n\n    def fit(self, X, y):\n        self.mdl.fit(X, y)\n        return self\n\n    def predict(self, X):\n        y_hat = self.mdl.predict(X)\n        return y_hat\n\n    def search(self, X, y, search):\n        t0 = time()\n        search.fit(X, y)\n        t1 = time()\n        print(f\"Searching elapses {t1 - t0} seconds.\")\n\n        best_idx = best_mean_std(search.cv_results_)\n        best_params = dict(search.cv_results_[\"params\"][best_idx])\n        print(best_params)\n        self.mdl.set_params(**best_params)\n        scores_val = cross_val_score(\n            self.mdl, X, y, scoring=self.scoring, cv=self.cv\n        )\n        mu = np.mean(scores_val)\n        sigma = np.std(scores_val)\n        bounds_left = mu - 1.96 * sigma\n        bounds_right = mu + 1.96 * sigma\n        print(\n            f\"val score: {mu:.6f} +- {1.96 * sigma:.6f} = \"\n            f\"({bounds_left:.6f}, {bounds_right:.6f})\"\n        )\n\n        self.mdl.fit(X, y)\n        return best_params","2169aec6":"from sklearn.ensemble import ExtraTreesClassifier as ETC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = ETC(random_state=random_state)\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    n_estimators=[500],\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","10d8fa36":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LDA(solver=\"lsqr\")\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    shrinkage=np.linspace(0.0, 1.0, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","f3983270":"from sklearn.svm import LinearSVC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LinearSVC()\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    C=np.logspace(-5, 3, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","75770e72":"from sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LogisticRegression(random_state=random_state)\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    C=np.logspace(-3, 3, 10),\n    max_iter=[30, 100, 300, 1000],\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","b11edb0e":"from sklearn.svm import NuSVC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = NuSVC()\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    nu=np.logspace(-5, -1, 10),\n    gamma=np.logspace(-3, 0, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","df8d95d6":"from tempfile import mkdtemp\nfrom shutil import rmtree\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsTransformer\n\nfrom sklearn.model_selection import GridSearchCV\n\ncachedir = mkdtemp()\ngraph_model = KNeighborsTransformer(n_neighbors=32)\nlearner = KNeighborsClassifier(n_neighbors=5, metric=\"precomputed\")\nmdl = Pipeline(steps=[(\"graph\", graph_model),\n                      (\"learner\", learner)],\n               memory=cachedir)\n\n\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    learner__n_neighbors=np.arange(1, 31),\n    learner__weights=[\"uniform\", \"distance\"],\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nrmtree(cachedir, ignore_errors=True)\n\nX_test_man.loc[y_test_hat_man == 1]","2fa5d675":"from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = QDA()\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    reg_param=np.logspace(-6, 0, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","d2b21f97":"from sklearn.ensemble import RandomForestClassifier as RF\n\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = RF(random_state=random_state)\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    n_estimators=[500],\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","b7e0e785":"from sklearn.svm import SVC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = SVC()\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    C=np.logspace(-3, 3, 10),\n    gamma=np.logspace(-3, 3, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","45a94fdf":"from lightgbm import LGBMClassifier\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LGBMClassifier()\ncv = KFold(n_splits=15, shuffle=True, random_state=random_state)\ntitanic_man = Titanic(mdl, scoring_alive, cv)\n\nsearch_spaces = dict(\n    n_estimators=np.arange(10, 101, 10),\n    num_leaves=np.arange(3, 11),\n)\n\nsearch = GridSearchCV(\n    titanic_man.mdl,\n    param_grid=search_spaces,\n    cv=titanic_man.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_man.scoring,\n)\n\ntitanic_man.search(X_train_man, y_train_man, search)\ny_val_hat_man = cross_val_predict(titanic_man.mdl, X_train_man, y_train_man, cv=titanic_man.cv)\nprint(f\"val score: {score_func_alive(y_train_man, y_val_hat_man)}\")\n\nprint(confusion_matrix(y_train_man, y_val_hat_man))\nprint(classification_report(y_train_man, y_val_hat_man, digits=6))\n\ntitanic_man.fit(X_train_man, y_train_man)\ny_test_hat_man = titanic_man.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","ee6d7fe1":"from sklearn.ensemble import ExtraTreesClassifier as ETC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = ETC(random_state=random_state)\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    n_estimators=[500],\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","4cafcabc":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LDA(solver=\"lsqr\")\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    shrinkage=np.linspace(0.0, 1.0, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","e77cb966":"from sklearn.svm import LinearSVC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LinearSVC()\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    C=np.logspace(-5, 3, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","61d3214b":"from sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LogisticRegression(random_state=random_state)\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    C=np.logspace(-3, 3, 10),\n    max_iter=[30, 100, 300, 1000],\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","f88feeaa":"from sklearn.svm import NuSVC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = NuSVC()\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    nu=np.logspace(-5, -1, 10),\n    gamma=np.logspace(-3, 0, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","89bdd412":"from tempfile import mkdtemp\nfrom shutil import rmtree\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsTransformer\n\nfrom sklearn.model_selection import GridSearchCV\n\ncachedir = mkdtemp()\ngraph_model = KNeighborsTransformer(n_neighbors=32)\nlearner = KNeighborsClassifier(n_neighbors=5, metric=\"precomputed\")\nmdl = Pipeline(steps=[(\"graph\", graph_model),\n                      (\"learner\", learner)],\n               memory=cachedir)\n\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    learner__n_neighbors=np.arange(1, 31),\n    learner__weights=[\"uniform\", \"distance\"],\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\n\nrmtree(cachedir, ignore_errors=True)\n\nX_test_woman.loc[y_test_hat_woman == 0]","0c578ea3":"from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA\n\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = QDA()\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    reg_param=np.logspace(-6, 0, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","8e6a4d7d":"from sklearn.ensemble import RandomForestClassifier as RF\n\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = RF(random_state=random_state)\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    n_estimators=[500],\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","2c569f6a":"from sklearn.svm import SVC\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = SVC()\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    C=np.logspace(-3, 3, 10),\n    gamma=np.logspace(-3, 3, 10),\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","64597ae1":"from lightgbm import LGBMClassifier\n\nfrom sklearn.model_selection import GridSearchCV\n\nmdl = LGBMClassifier()\n\ncv = KFold(n_splits=9, shuffle=True, random_state=random_state)\ntitanic_woman = Titanic(mdl, scoring_dead, cv)\n\nsearch_spaces = dict(\n    n_estimators=np.arange(10, 101, 10),\n    num_leaves=np.arange(3, 21),\n)\n\nsearch = GridSearchCV(\n    titanic_woman.mdl,\n    param_grid=search_spaces,\n    cv=titanic_woman.cv,\n    verbose=0,\n    refit=False,\n    scoring=titanic_woman.scoring,\n)\n\ntitanic_woman.search(X_train_woman, y_train_woman, search)\ny_val_hat_woman = cross_val_predict(titanic_woman.mdl, X_train_woman, y_train_woman, cv=titanic_woman.cv)\nprint(f\"val score: {score_func_dead(y_train_woman, y_val_hat_woman)}\")\n\nprint(confusion_matrix(y_train_woman, y_val_hat_woman))\nprint(classification_report(y_train_woman, y_val_hat_woman, digits=6))\n\ntitanic_woman.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = titanic_woman.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","72daf715":"from sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.svm import SVC\nfrom lightgbm import LGBMClassifier as LGBM\nfrom sklearn.ensemble import VotingClassifier\n\nmdl1 = KNN(n_neighbors=5, weights=\"uniform\")\nmdl2 = SVC(**{'C': 2.154434690031882, 'gamma': 46.41588833612773})\nmdl3 = LGBM(**{'n_estimators': 80, 'num_leaves': 7})\n\nmdl = VotingClassifier([(\"KNN\", mdl1),\n                        (\"SVC\", mdl2), \n                        (\"LGBM\", mdl3)],\n                      weights=[1,1,1])\n\nmdl.fit(X_train_man, y_train_man)\ny_test_hat_man = mdl.predict(X_test_man)\n\nX_test_man.loc[y_test_hat_man == 1]","4cb2124a":"from sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\n\nmdl1 = KNN(n_neighbors=9, weights=\"uniform\")\nmdl2 = SVC(**{'C': 46.41588833612773, 'gamma': 2.154434690031882})\n\nmdl = VotingClassifier([(\"KNN\", mdl1),\n                        (\"SVC\", mdl2)],\n                      weights=[1,1])\n\nmdl.fit(X_train_woman, y_train_woman)\ny_test_hat_woman = mdl.predict(X_test_woman)\n\nX_test_woman.loc[y_test_hat_woman == 0]","a197f5da":"df.loc[X_test_man.loc[y_test_hat_man == 1].index, \"Predict\"] = y_test_hat_man[y_test_hat_man == 1]\ndf.loc[X_test_woman.loc[y_test_hat_woman == 0].index, \"Predict\"] = y_test_hat_woman[y_test_hat_woman == 0]\n\noutput = pd.DataFrame(\n    {\n        \"PassengerId\": df[n_train:].PassengerId,\n        \"Survived\": df[n_train:].Predict.astype(\"int\"),\n    }\n)\noutput.to_csv(\"WCG_non-WCG.csv\", index=False)","f3a23dc0":"## Title, Pclass, Pfare\u4ea4\u53c9","ed1fae9e":"## woman\u7684ETC\u6a21\u578b","830039ef":"* \u53d1\u73b0\u7ec4\u5185\u751f\u5b58\u7387\u5927\u90e8\u5206\u662f0.0\u6216\u80051.0, \u5373\u540c\u751f\u540c\u6b7b\u7684\u6982\u7387\u975e\u5e38\u5927, \u7ec4\u5185\u751f\u5b58\u7387\u7684\u9884\u6d4b\u80fd\u529b\u6bd4\u4ee5\u5f80\u53d1\u73b0\u7684\u4efb\u4f55\u7279\u5f81\u90fd\u66f4\u5f3a!","6ed9ca80":"* \u53d1\u73b0boy\u867d\u7136\u4e5f\u662f\u7537\u6027, \u4f46\u662f\u751f\u5b58\u7387\u4e0eman\u622a\u7136\u4e0d\u540c, man\u751f\u5b58\u7387\u4e0d\u523020%, \u800cboy\u751f\u5b58\u7387\u63a5\u8fd160%\n* \u8bf4\u660e\u5bf9\u7537\u6027\u5206\u6210\u7ec6\u5206\u6210\u4e24\u7c7b, \u662f\u6709\u4ef7\u503c\u7684\n* \u6709\u9057\u61be\u7684\u5730\u65b9\u5728\u4e8e: boy\u7684\u5360\u6bd4\u592a\u5c0f\u4e86, \u5bf9\u6574\u4f53\u6210\u7ee9\u7684\u63d0\u5347\u975e\u5e38\u6709\u9650(\u7406\u8bba\u4e0a, \u51c6\u786e\u7387\u6700\u591a\u63d0\u9ad84.7%\u5de6\u53f3)","8744fe9e":"* man\u4e0d\u7ba1\u662f\u4ec0\u4e48Pclass, \u90fd\u65e0\u6cd5\u8fbe\u5230\u5e73\u5747\u751f\u5b58\u7387, Pclass == 1\u7684man\u7a0d\u4f4e\u4e8e\u5e73\u5747\u751f\u5b58\u7387\n* woman\u4e0d\u7ba1\u662f\u4ec0\u4e48Pclass, \u90fd\u8d85\u8fc7\u4e86\u5e73\u5747\u751f\u5b58\u7387, Pclass == 3\u7684woman\u7a0d\u9ad8\u4e8e\u5e73\u5747\u751f\u5b58\u7387\n* boy\u4e0d\u7ba1\u662f\u4ec0\u4e48Pclass, \u90fd\u8d85\u8fc7\u4e86\u5e73\u5747\u751f\u5b58\u7387, Pclass == 3\u7684boy\u63a5\u8fd1\u4e8e\u5e73\u5747\u751f\u5b58\u7387","3b066db7":"#### \u5bf9\u4e8eman, \u5168\u90e8\u662f\u975eWCG\u4e58\u5ba2, \u751f\u5b58\u7387:","25a377fa":"### \u6d4b\u8bd5\u96c6\u91cc\u9762, \u88ab\u9884\u6d4b\u4e3a\u6b7b\u4ea1\u7684woman:","6f0ffeab":"## \u5b9a\u4e49\u76f8\u5173\u51fd\u6570","27fe1652":"## \u57fa\u4e8e\u7ec4\u5185\u751f\u5b58\u7387, \u8fdb\u884c\u9884\u6d4b\n* \u5982\u679cwoman\u7684\u7ec4\u5185\u751f\u5b58\u7387\u662f0%, \u90a3\u4e48\u9884\u6d4b\u5979\u6b7b\u4ea1, \u5426\u5219, \u9884\u6d4b\u5979\u751f\u5b58\n* \u5982\u679c\u4e58\u5ba2\u662fman, \u4e00\u5f8b\u9884\u6d4b\u4ed6\u6b7b\u4ea1.\n* \u5982\u679cboy\u7684\u7ec4\u5185\u751f\u5b58\u7387\u662f100%, \u90a3\u4e48\u9884\u6d4b\u4ed6\u751f\u5b58, \u5426\u5219, \u9884\u6d4b\u4ed6\u6b7b\u4ea1.\n\n* \u80cc\u540e\u7684\u903b\u8f91:\n* woman\u7684\u751f\u5b58\u7387\u6574\u4f53\u4e0a\u662f\u6bd4\u8f83\u9ad8\u7684, \u6240\u4ee5\u9ed8\u8ba4\u9884\u6d4b\u4e3a\u751f\u5b58, \u9884\u6d4b\u5979\u6b7b\u4ea1, \u9700\u8981\u6bd4\u8f83\u4e25\u82db\u7684\u6761\u4ef6(\u7ec4\u5185\u751f\u5b58\u7387\u662f0%)\n* man\u7684\u751f\u5b58\u7387\u6574\u4f53\u4e0a\u662f\u6bd4\u8f83\u4f4e\u7684, \u5149\u51ed\u7ec4\u5185\u751f\u5b58\u7387, \u5df2\u7ecf\u65e0\u6cd5\u9884\u6d4b\u54ea\u4e9b\u662f\u5e78\u5b58\u8005\u4e86, \u6240\u4ee5, \u4e00\u5f8b\u9884\u6d4b\u4e3a\u6b7b\u4ea1.\n* boy\u7684\u7ec4\u5185\u751f\u5b58\u7387\u5982\u679c\u662f100%, \u90a3\u4e48\u9884\u6d4b\u4ed6\u751f\u5b58, \u5982\u679c\u662f0%, \u90a3\u4e48\u9884\u6d4b\u4ed6\u6b7b\u4ea1, \u8fd9\u4e24\u6761\u6ca1\u6709\u4ec0\u4e48\u53ef\u8bf4\u7684. \u9664\u53bb\u8fd9\u4e24\u6761\u60c5\u51b5, \u6d4b\u8bd5\u96c6\u603b\u5171\u53ea\u5269\u4e0b4\u4e2a\u6837\u672c\u4e86, \u6839\u636e\u5206\u6790, \u53d1\u73b0\u8fd94\u4e2a\u6837\u672c\u6b7b\u4ea1\u7684\u6982\u7387\u6bd4\u8f83\u5927.","6e5716fd":"## man\u7684LDA\u6a21\u578b","c35f2568":"* \u5f53\u4e3a0\u65f6, \u7a0d\u5fae\u4f4e\u4e8e\u5e73\u5747\u503c\n* \u5f53\u4e3a1\u62162\u62163\u65f6, \u7a0d\u5fae\u9ad8\u4e8e\u5e73\u5747\u503c\n* \u5176\u4ed6\u7684\u53d6\u503c\u56e0\u4e3a\u6837\u672c\u5c11, \u4e0d\u505a\u8bc4\u4ef7.\n* \u603b\u4f53\u6765\u770b, \u6709\u5f31\u9884\u6d4b\u6027, \u4f46\u662f\u6bd4SibSp, Parch\u90fd\u8981\u5f3a.","44b8de56":"## EDA","63abec63":"## \u5173\u4e8e\u56e0\u53d8\u91cf(Survived)","80e67127":"## Title, Pclass, Pfare, Embarked\u4ea4\u53c9","09ea7910":"## WCG\u6a21\u578b\u7684\u6838\u5fc3\u6982\u5ff5: Woman-Child-Groups (WCG)\n* \u6ce8\u610f, WCG\u4e0d\u540c\u4e8eWCG\u6a21\u578b, WCG\u662f\u4e00\u79cd\u5206\u7ec4\u65b9\u6cd5, WCG\u6a21\u578b\u662f\u57fa\u4e8eWCG\u7684\u9884\u6d4b\u6a21\u578b.\n* WCG\u7528\u4e00\u53e5\u8bdd\u6765\u6982\u62ec, \u5c31\u662f: \u5c06\u4e00\u4e2a\u5bb6\u5ead\u5185\u7684\u6240\u6709\u5973\u6027(\u5305\u62ec\u5973\u4fdd\u59c6)\u6216\u5b69\u5b50\u8ba4\u5b9a\u4e3a\u4e00\u7ec4.\n* \u9700\u8981\u7279\u522b\u7559\u610f\u7684\u662f: \u4e00\u4e2a\u5bb6\u5ead\u5185\u7684\u6210\u5e74\u7537\u6027\u5e76\u6ca1\u6709\u5206\u5230\u7ec4\u91cc\u9762.\n* \u8fd9\u80cc\u540e\u7684\u903b\u8f91\u662f: \n1. \u4e00\u4e2a\u5bb6\u5ead\u5185\u7684\u6210\u5458\u6d3b\u52a8\u5728\u4e00\u8d77, \u540c\u751f\u6216\u540c\u6b7b\u7684\u6982\u7387\u6781\u5927, \u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28, \u5982\u679c\u4e00\u4e2a\u7ec4\u5185\u7684\u6210\u5458\u4e00\u90e8\u5206\u5728\u8bad\u7ec3\u96c6\u91cc\u9762, \u4e00\u90e8\u5206\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762, \u6839\u636e\u8bad\u7ec3\u96c6\u7684\u751f\u5b58\u7387\u5c31\u53ef\u4ee5\u53bb\u9884\u6d4b\u6d4b\u8bd5\u96c6\u6210\u5458\u7684\u751f\u6b7b.\n2. \u7537\u4eba\u56e0\u4e3a\"\u5973\u58eb\u548c\u5b69\u5b50\u4f18\u5148\"\u8fd9\u6761\u89c4\u5219, \u5e76\u4e0d\u9075\u5faa\u7b2c1\u6761\u903b\u8f91.\n3. \u867d\u7136\u4f20\u7edf\u610f\u4e49\u4e0a, \u5973\u4fdd\u59c6\u4e0d\u7b97\u662f\u5bb6\u5ead\u6210\u5458, \u4f46\u662f\u5973\u4fdd\u59c6\u548c\u4e1c\u5bb6\u6d3b\u52a8\u5728\u4e00\u8d77, \u4e5f\u7b26\u5408\"\u5973\u58eb\u548c\u5b69\u5b50\u4f18\u5148\"\u8fd9\u6761\u89c4\u5219\u7684, \u56e0\u6b64, \u5973\u4fdd\u59c6\u7684\u751f\u5b58\u7387\u548c\u4e1c\u5bb6\u7684\u5973\u751f\u5b69\u5b50\u7684\u751f\u5b58\u7387\u5e94\u8be5\u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684.","9d5c666d":"## Pclass","32c8fa1f":"## woman\u7684\u8868\u73b0\u826f\u597d\u7684\u6a21\u578b\u5c0f\u7ed3:\n* KNN: 9:6\n* SVC: 7:3","78116355":"## \u4efb\u52a1\u5206\u6790\n* \u4e4b\u524d\u5206\u6790\u8fc7: \u975eWCG\u4e58\u5ba2\u4e2a\u6570\u4e3a1079, \u5176\u4e2d: man 782\u4e2a, woman 295\u4e2a, boy 2\u4e2a.\n* \u975eWCG\u7684man\u751f\u5b58\u7387\u4e3a16%.\n* \u975eWCG\u7684woman\u751f\u5b58\u7387\u4e3a81.8%, \u6b7b\u4ea1\u7387\u4e3a18.2%.(\u56e0\u4e3a\u662f\u5728\"gender model\"\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6b63, \u56e0\u6b64, \u5bf9\u627e\u5230\u6b7b\u4ea1\u7684woman\u66f4\u611f\u5174\u8da3)\n* \u975eWCG\u7684boy\u53ea\u67092\u4e2a, \u6070\u597d\u90fd\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762, \u6839\u636e\u5206\u6790, \u751f\u5b58\u7387\u5927\u6982\u7387\u4e3a0%, \"gender model\"\u672c\u6765\u5c31\u662f\u9884\u6d4bboy\u4e3a\u6b7b\u4ea1, \u5e76\u4e14\u6837\u672c\u53ea\u67092\u4e2a, \u56e0\u6b64, \u5bf9\u4e8eboy, \u4e0d\u9700\u8981\u518d\u5efa\u6a21\u4e86.\n\n* \u73b0\u5728\u4efb\u52a1\u5f88\u6e05\u6670\u4e86, \u4e24\u4e2a\u4efb\u52a1:\n1. \u5728782\u4e2aman\u4e2d\u5bfb\u627e\u51fa\u5e78\u5b58\u8005, \u8bad\u7ec3\u96c6\u91cc\u9762\u751f\u5b58\u7387\u53ea\u670916%.\n2. \u5728295\u4e2awoman\u4e2d\u5bfb\u627e\u51fa\u9047\u96be\u8005, \u8bad\u7ec3\u96c6\u91cc\u9762\u6b7b\u4ea1\u7387\u53ea\u670918.2%\n\n* \u56e0\u4e3a\u5360\u6bd4\u5f88\u5c0f, \u8fd9\u4e24\u9879\u4efb\u52a1\u90fd\u662f\u6bd4\u8f83\u96be\u7684, \u8981\u6709\u5fc3\u7406\u51c6\u5907, \u5176\u4e2d\u4e00\u4e2a\u8bc1\u636e:\n* \u8fd9\u4e2a\u6bd4\u8d5b\u63d0\u4ea4\u7684\u5927\u90e8\u5206solutions\u91cc\u9762, man\u5168\u90e8\u88ab\u9884\u6d4b\u4e3a\u6b7b\u4ea1, \u6ca1\u6709\u4e00\u4e2a\u5e78\u5b58\u8005.","1488ca1c":"## \u5b9a\u4e49\u51fd\u6570","56cf9a56":"## \u586b\u5145\u7f3a\u5931\u503c, \u72ec\u70ed\u7f16\u7801, \u5212\u5206\u6570\u636e\u96c6","9197c44d":"* WCG\u6a21\u578b\u662f\u672c\u6587\u4e2d\u6700\u6838\u5fc3, \u6700\u7cbe\u5f69\u7684\u90e8\u5206\n* WCG\u6a21\u578b\u4e0d\u662f\u6211\u7684\u60f3\u5230\u7684, \u5f53\u7136, \u5e76\u4e0d\u662f\u56e0\u4e3a\u6211\u592a\u83dc\u4e86, \u800c\u662f\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u4eba\u6765\u8bf4, \u90fd\u662f\u96be\u4ee5\u60f3\u5230\u7684.\n* WCG\u6a21\u578b\u96be\u4ee5\u60f3\u5230\u7684\u539f\u56e0:\n1. Name\u4e00\u822c\u4f1a\u88ab\u60f3\u5f53\u7136\u7684\u8ba4\u4e3a\u7c7b\u4f3cId\u7684\u4e1c\u897f, \u5f88\u6709\u53ef\u80fd\u76f4\u63a5\u5220\u9664\u6389\u4e86, \u4e0d\u4f1a\u60f3\u5230\u53bb\u5206\u6790\u5b83.\n2. \u5bb6\u5ead\u6210\u5458\u4e2a\u6570\u901a\u5e38\u662f3\u4e2a\u4ee5\u5185, \u4e0d\u8d85\u8fc711\u4e2a, \u7edf\u8ba1\u5bb6\u5ead\u751f\u5b58\u7387\u4e00\u822c\u4f1a\u88ab\u8ba4\u4e3a\u662f\u8fc7\u62df\u7684.\n3. \u7edf\u8ba1\u5bb6\u5ead\u5b58\u6d3b\u7387\u7684\u65f6\u5019, \u5c06man\u5254\u9664\u51fa\u53bb, \u8fd9\u4e2a\u6bd4\u8f83\u96be\u60f3\u5230\u7684.\n4. \u8003\u8651\u5230\u53ef\u80fd\u5b58\u5728\u5973\u4fdd\u59c6\u8fd9\u7c7b\u7fa4\u4f53.\n* \u6bcf\u4e00\u6761\u90fd\u81f3\u5c11\u6dd8\u6c7090%\u7684\u4eba, \u5355\u4e2a\u4eba\u540c\u65f6\u8003\u8651\u5230\u4ee5\u4e0a4\u6761\u7684, \u6982\u7387\u662f\u4e07\u4e2d\u65e0\u4e00.\n* \u8fd8\u597dKaggle\u53ef\u4ee5\u5206\u4eab\u7684, \u4e0d\u65ad\u6709\u4eba\u5728\u5176\u4ed6\u4eba\u5de5\u4f5c\u7684\u57fa\u7840\u4e0a\u505a\u51fa\u66f4\u591a\u7684\u52aa\u529b, \u9010\u6e10\u51d1\u9f50\u4e86\u8fd94\u6761, WCG\u6a21\u578b\u5c5e\u4e8eKaggle\u793e\u533a\u7684**\u96c6\u4f53\u667a\u6167**\n\n* \u6682\u65f6\u770b\u4e0d\u61c2\u4e0a\u9762\u63cf\u8ff0\u7684, \u6ca1\u5173\u7cfb, \u4e0b\u6587\u4f1a\u5177\u4f53\u63cf\u8ff0.","45eb35d0":"## man\u7684\u8868\u73b0\u826f\u597d\u7684\u6a21\u578b\u5c0f\u7ed3:\n* KNN: 12:20\n* SVC: 5:10\n* LGBM: 15:21","7b8e9329":"## WCG\u6a21\u578b\u6210\u7ee9\u8bc4\u4f30\n#### 0.81578\u7684\u6210\u7ee9\u610f\u5473\u7740\u6709341\u4e2a\u6837\u672c\u9884\u6d4b\u6b63\u786e\n#### \"gender model\"\u6709320\u4e2a\u6837\u672c\u9884\u6d4b\u6b63\u786e\n#### WCG\u591a\u589e\u52a0\u4e8621\u4e2a\u6b63\u786e\u9884\u6d4b\u6a21\u578b, \u4f46\u662f\u76f8\u6bd4\"gender model\"\u53ea\u6539\u53d8\u4e8623\u4e2a\u6837\u672c(\u5176\u4e2d8\u4e2aboy, 15\u4e2awoman)\n#### \u8fd9\u610f\u5473\u7740\u8fd923\u4e2a\u6837\u672c\u91cc\u9762, \u670922\u4e2a\u6b63\u786e\u9884\u6d4b, 1\u4e2a\u9519\u8bef\u9884\u6d4b, \u56e0\u4e3a\u5c06\u539f\u5148\u6b63\u786e\u7684\u7ed3\u679c\u6539\u6210\u4e86\u9519\u8bef\u7684\u7ed3\u679c, \u8981\u5012\u6263\u5206.\n#### \u8fd923\u4e2a\u6837\u672c\u91cc\u9762, \u670922\u4e2a\u6b63\u786e, \u6b63\u786e\u7387\u5947\u9ad8!","eb89bd12":"## Title\u4e0eEmbarked\u4ea4\u53c9","8cf2c701":"### Title\u5206\u5e03\u6bd4\u8f83","96b5ae40":"## woman\u7684KNN\u6a21\u578b","127a6020":"# \u5bf9\u975eWCG\u4e58\u5ba2\u8fdb\u884c\u9884\u6d4b","030dc4a6":"## man\u7684RF\u6a21\u578b","96c883ba":"## Title, Pclass, Embarked\u4ea4\u53c9","dd4ff386":"### \u627e\u51fa\u54ea\u4e9b\u7ec4\u662f\u5168\u90e8\u6210\u5458\u90fd\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684:","48e362dd":"### \u9884\u6d4b\u4e0e\u63d0\u4ea4","1416c3c3":"* \u9a8c\u8bc1\u4e86\u4e0a\u9762\u8bf4\u7684\u4e09\u79cd\u5f02\u5e38\u60c5\u51b5.\n* \u5bf9\u4e8eman\u7684\u5f02\u5e38\u60c5\u51b5, \u751f\u5b58\u7387\u662f58%, \u867d\u7136\u9ad8\u4e8e\u5e73\u5747\u751f\u5b58\u7387(38%), \u4f46\u662f\u53ea\u6bd450%\u9ad8\u4e00\u70b9\u70b9.\n* \u5bf9\u4e8ewoman\u6216\u8005boy\u7684\u5f02\u5e38\u60c5\u51b5, \u751f\u5b58\u7387\u5206\u4e3a\u4e8631.4%, 31.6%, \u5982\u679c\u9884\u6d4b\u4ed6\u4eec\u4e3a\u6b7b\u4ea1, \u770b\u8d77\u6765\u4e0d\u9519.\n* \u4f46\u662f, \u5e76\u4e0d\u6253\u7b97\u9009\u62e9\u76f4\u63a5\u4f7f\u7528\u4ea4\u53c9\u7279\u5f81\u505a\u9884\u6d4b, \u539f\u56e0:\n1. 3\u79cd\u5f02\u5e38\u60c5\u51b5\u7684\u6837\u672c\u5e76\u4e0d\u592a\u591a, \u800c\u4e14\u51c6\u786e\u7387\u4e5f\u4e0d\u7b97\u9ad8, \u56e0\u6b64, \u603b\u4f53\u51c6\u786e\u7387\u4e0d\u4f1a\u63d0\u9ad8\u592a\u591a.\n2. \u6709\u8fc7\u62df\u7684\u98ce\u9669, \u51c6\u786e\u7387\u8981\u8fdb\u4e00\u6b65\u4e0b\u8c03.\n3. \u60f3\u6cd5\u6bd4\u8f83naive, \u6ca1\u6709\u7528\u5230\u4efb\u4f55\u673a\u5668\u5b66\u4e60\u6a21\u578b.\n4. \u5e76\u4e0d\u597d\u8bc4\u4f30\u6cdb\u5316\u80fd\u529b.","cd6bb1be":"* \u5bf9\u6bd4Fare\u4e0ePfare\u7684\u56fe\u5f62, \u53d1\u73b0Pfare\u7684\u5355\u8c03\u6027\u66f4\u597d.","2ca3d277":"## Embarked","b2ad0750":"\u8fd9\u4e2a\u6bd4\u8d5b\u7ed9\u6211\u7684\u6700\u5927\u6536\u83b7\u662f: **\u7279\u5f81\u5de5\u7a0b\u51b3\u5b9a\u6210\u7ee9\u7684\u4e0a\u9650!**\n\n\u4ee5\u524d\u770b\u5230\u8fc7\u8fd9\u53e5\u8bdd, \u4f46\u662f\u6211\u662f\u55e4\u4e4b\u4ee5\u9f3b\u7684, \u4f46\u662f\u8fd9\u4e2a\u6bd4\u8d5b\u8ba9\u6211\u5bf9\u8fd9\u53e5\u8bdd\u6df1\u4ee5\u4e3a\u7136.\n\n1. WCG\u6a21\u578b\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u673a\u5668\u5b66\u4e60\u6a21\u578b, \u4f46\u662f\u9884\u6d4b\u6548\u679c\u975e\u5e38\u597d, 23\u4e2a\u6837\u672c\u91cc\u9762\u670922\u4e2a\u6539\u5bf9\u4e86, 1\u4e2a\u6539\u9519\u4e86(\u76f8\u6bd4gender model), \u8fd9\u662f\u56e0\u4e3a\u53d1\u73b0\u4e86magic\u7279\u5f81: \u7ec4\u5185\u751f\u5b58\u7387, \u597d\u7684\u7279\u5f81\u4e0d\u9700\u8981\u673a\u5668\u5b66\u4e60\u6a21\u578b, \u4e5f\u80fd\u6709\u975e\u5e38\u597d\u7684\u8868\u73b0.\n2. non-WCG\u6a21\u578b\u5fd9\u4e4e\u4e86\u534a\u5929, \u7ed3\u679c11\u4e2a\u6837\u672c\u91cc\u97626\u4e2a\u6539\u5bf9\u4e86, 5\u4e2a\u6539\u9519\u4e86, \u51c0\u6536\u76ca\u4e3a1\u4e2a\u6837\u672c. \u4e00\u65b9\u9762\u662f\u56e0\u4e3anon-WCG\u4e58\u5ba2\u975e\u5e38\u96be\u4ee5\u9884\u6d4b, \u53e6\u4e00\u65b9\u9762\u662f\u56e0\u4e3a\u76ee\u524d\u6ca1\u6709\u627e\u5230\u597d\u7684\u7279\u5f81\u6765\u9884\u6d4bnon-WCG\u4e58\u5ba2, \u5149\u9760\u673a\u5668\u5b66\u4e60\u6a21\u578b\u662f\u65e0\u6cd5\u8fbe\u5230\u597d\u7684\u6548\u679c\u7684.\n","b3d4f42c":"### \u53ef\u89c6\u5316","6b990eff":"## \u5bfc\u5165\u6570\u636e","4ad3881c":"* Fare: \u8239\u7968\u7684\u603b\u4ef7(\u4e00\u5f20\u8239\u7968\u6709\u53ef\u80fd\u8ba9\u597d\u51e0\u4e2a\u4e58\u5ba2\u4e0a\u8239)\n* \u56e0\u6b64, Fare\u662f\u4e00\u4e2a\u4ea4\u53c9\u6027\u7279\u5f81, \u540c\u65f6\u8003\u8651\u4e86\u5e73\u5747\u4ef7\u683c\u548c\u4e00\u5f20\u7968\u7684\u4e58\u5ba2\u6570\u91cf\n* \u5bf9Fare\u8fd9\u4e2a\u7279\u5f81\u8fdb\u884c\"\u63d0\u7eaf\", \u6c42\u5e73\u5747\u4ef7\u683c(Pfare), \u5e73\u5747\u4ef7\u683c\u66f4\u80fd\u4f53\u73b0\u51fa\u4e58\u5ba2\u7684\u5730\u4f4d, \u4ece\u800c\u53cd\u6620\u5728\u751f\u5b58\u7387\u4e0a.\n* \u6709\u4e00\u4e9bFare\u53d6\u503c\u4e3a0, \u8fd9\u4e2a\u8bbe\u5b9a\u4e0d\u80fd\u63a5\u53d7, \"\u6ca1\u6709\u514d\u8d39\u7684\u5348\u9910\", \u5c060\u8d4b\u503c\u4e3aNaN.","7f6b223b":"### \u4e8c\u91cd\u4ea4\u53c9\u7279\u5f81","4836a1bc":"## \u65b0\u7279\u5f81: Pfare","4cc5438d":"#### \u5bf9\u4e8eboy, \u5927\u90e8\u5206\u662fWCG\u4e58\u5ba2, \u53ea\u67092\u4e2a\u662f\u975eWCG\u4e58\u5ba2, \u800c\u4e14\u6070\u597d\u90fd\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762, \u65e0\u6cd5\u8ba1\u7b97\u751f\u5b58\u7387, \u4e0d\u8fc7\u6839\u636e\u7279\u5f81\u5206\u6790, \u751f\u5b58\u7387\u5e94\u8be5\u662f0%.","08216d91":"## woman\u7684NuSVC\u6a21\u578b","74e6fff7":"## woman\u7684LogisticRegression\u6a21\u578b","ba5cb03a":"### \u68c0\u67e5WCG\u4e58\u5ba2\u662f\u5426\u90fd\u6709\u4e86\u7ec4\u5185\u751f\u5b58\u7387","aa8d617d":"## man\u7684LGBM\u6a21\u578b","42b235ba":"## \u65b0\u7279\u5f81: Title","f3e84606":"### \u5229\u7528\u4e4b\u524d\u7684\u56db\u91cd\u4ea4\u53c9\u7279\u5f81\u5bf9\u8fd9\u4e9b\u5bb6\u65cf\u8fdb\u884c\u9884\u6d4b:\n* \u4e0e\u4e4b\u524d\u7684\u56db\u91cd\u4ea4\u53c9\u7279\u5f81\u5206\u6790\u4e0d\u540c, \u4e4b\u524d\u4f7f\u7528\u7684\u662f\u5168\u4f53\u4e58\u5ba2\u6570\u636e, \u8fd9\u4e00\u6b21, \u4f7f\u7528\u7684\u662fWCG\u4e58\u5ba2\u6570\u636e.","e53d0d36":"* \u5bf9\u4e8eman, \u7b2c2\u9ad8\u6863\u7684Pfare\u7684\u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c.\n* \u5bf9\u4e8ewoman\u6216boy, \u6700\u4f4e\u6863\u7684Pfare\u7684\u751f\u5b58\u7387\u5728\u5e73\u5747\u503c\u9644\u8fd1.","210b5181":"* \u5bf9\u4e8eman, \u5728Embarked == S, \u7b2c2\u9ad8Pfare\u6863\u4f4d, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c\n* \u5bf9\u4e8ewoman, \u5728Embarked == S, \u6700\u4f4ePfare\u6863\u4f4d, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c\n* \u5bf9\u4e8eboy, \u5728Embarked == S, \u6700\u4f4ePfare\u6863\u4f4d, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c","0741e3d9":"* \u4e8c\u91cd\u4ea4\u53c9\u7279\u5f81\u5c0f\u7ed3: \u53d1\u73b0\u7ed3\u5408Pclass\u4e0ePfare, \u597d\u50cf\u662f\u53ef\u4ee5\u627e\u5230woman\u9047\u96be\u8005\u7684.","d561f260":"* \u5f53\u4e3a0\u65f6, \u7a0d\u5fae\u4f4e\u4e8e\u5e73\u5747\u503c\n* \u5f53\u4e3a1\u65f6, \u7a0d\u5fae\u9ad8\u4e8e\u5e73\u5747\u503c\n* \u5f53\u4e3a2\u65f6, \u7a0d\u5fae\u9ad8\u4e8e\u5e73\u5747\u503c\n* \u5176\u4ed6\u7684\u53d6\u503c\u56e0\u4e3a\u6837\u672c\u5c11, \u4e0d\u505a\u8bc4\u4ef7.\n* \u603b\u4f53\u6765\u770b, \u6709\u5f31\u9884\u6d4b\u6027.","bdca1834":"## man\u7684\u96c6\u6210\u6a21\u578b","6f942530":"## man\u7684NuSVC\u6a21\u578b","8417948f":"### \u4e09\u91cd\u4ea4\u53c9\u7279\u5f81","63c5dfcf":"### \u5220\u9664\u4ee5\u540e\u7528\u4e0d\u5230\u7684\u7279\u5f81, \u4e3b\u8981\u76ee\u7684\u662f\u7b80\u5316\u6570\u636e\u663e\u793a, \u91cd\u70b9\u5173\u6ce8\u91cd\u8981\u7684\u7279\u5f81.","610ebd5f":"## \u7ec4\u5185\u751f\u5b58\u7387\n* \u53d1\u73b0\u4e00\u4e2a\u5bb6\u5ead\u5185\u7684\u6210\u5458\u540c\u751f\u6216\u540c\u6b7b\u7684\u6982\u7387\u6781\u5927, \u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28, \u5982\u679c\u4e00\u4e2a\u7ec4\u5185\u7684\u6210\u5458\u4e00\u90e8\u5206\u5728\u8bad\u7ec3\u96c6\u91cc\u9762, \u4e00\u90e8\u5206\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762, \u6839\u636e\u8bad\u7ec3\u96c6\u7684\u751f\u5b58\u7387\u5c31\u53ef\u4ee5\u53bb\u9884\u6d4b\u6d4b\u8bd5\u96c6\u6210\u5458\u7684\u751f\u6b7b.","4b31fc94":"* \u4ee4\u4eba\u5403\u60ca\u7684\u662f: \u5355\u8eabwoman\u6bd4\u975e\u5355\u8eabwoman\u7684\u751f\u5b58\u7387\u9ad8\u51fa\u4e86\u5c06\u8fd120%, \u662f\u56e0\u4e3a\u5355\u8eabwoman\u884c\u52a8\u66f4\u7075\u6d3b\u65b9\u4fbf?","418d3d70":"* Embarked == Q\u7684boy, \u751f\u5b58\u7387\u4e3a0%, \u53ef\u80fd\u662f\u6709\u5076\u7136\u6027\u7684, \u56e0\u4e3a\u8fd9\u6837\u7684\u6837\u672c\u592a\u5c11.\n* \u5176\u4ed6\u7684group\u5f62\u72b6\u7b26\u5408\u9884\u671f.","7fa938b6":"## \u5355\u4e2a\u7279\u5f81\u7684\u9884\u6d4b\u80fd\u529b\u6392\u540d:\n#### \u57fa\u4e8e\u56fe\u5f62\u4e3b\u89c2\u5224\u65ad\n\n#### \u5f3a\u9884\u6d4b\u80fd\u529b\u7279\u5f81:\n* Title, Sex\n* Pclass\n* Pfare\n\n#### \u4e2d\u9884\u6d4b\u80fd\u529b\u7279\u5f81:\n* Embarked\n\n#### \u5f31\u9884\u6d4b\u80fd\u529b\u7279\u5f81:\n* Family, Parch, SibSp\n\n#### \u65e0\u9884\u6d4b\u80fd\u529b\u7279\u5f81:\n* Age\n\n\n\u4e0b\u6587\u4e2d, \u4e0d\u518d\u53bb\u8003\u8651Family, Parch, SibSp, \u56e0\u4e3a\u8fd9\u4e9b\u90fd\u662f\u5bb6\u5ead\u56e0\u7d20, WCG\u6a21\u578b\u4e5f\u662f\u8003\u8651\u5bb6\u5ead\u56e0\u7d20, \u800c\u4e14\u5de7\u5999\u5f97\u591a.\n\n\u4e5f\u4e0d\u4f1a\u8003\u8651Age.\n\nTitle\u662f\u76ee\u524d\u6700\u5f3a\u7684\u7279\u5f81, \u800c\u4e14\u540e\u9762\u7684WCG\u6a21\u578b\u548c\"Voting of KNN\"\u6a21\u578b\u4e5f\u662f\u6839\u636eTitle\u8fdb\u884c\u5206\u6cbb\u7684.\n\n\u56e0\u6b64, \u540e\u9762\u7684\u4ea4\u53c9\u7279\u5f81\u5fc5\u987b\u8981\u6709Title, \u6ca1\u6709Title\u7684\u4ea4\u53c9\u7279\u5f81\u4e0d\u8003\u8651.","b2b079da":"## woman\u7684QDA\u6a21\u578b","31e335d2":"* \u5bf9\u4e8eman, Pclass == 1, Embarked == \"S\", Pfare\u7b2c2\u9ad8\u6863\u4f4d\u4e0a, \u751f\u5b58\u7387\u9ad8\u4e8e\u5e73\u5747\u503c\n* \u5bf9\u4e8ewoman, Pclass == 3, Embarked == \"S\", Pfare\u6700\u4f4e\u6863\u4f4d\u4e0a, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c\n* \u5bf9\u4e8eboy, Pclass == 3, Embarked == \"S\", Pfare\u6700\u4f4e\u6863\u4f4d\u4e0a, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c","60c9725b":"* \u53d1\u73b0\u7b49\u7ea7\u8d8a\u9ad8, \u751f\u5b58\u7387\u8d8a\u9ad8, \u7b26\u5408\u9884\u671f","96f74097":"### \u6d4b\u8bd5\u96c6\u91cc\u9762, \u88ab\u9884\u6d4b\u4e3a\u751f\u5b58\u7684boy:","521abfb7":"## man\u7684LinearSVC\u6a21\u578b","b56ab42f":"* \u51c6\u786e\u7387\u4e3a0.81818, \u610f\u5473\u7740\u603b\u5171\u6709342\u4e2a\u6837\u672c\u88ab\u6b63\u786e\u9884\u6d4b, \u76f8\u6bd4WCG\u6a21\u578b, \u5c31\u53ea\u591a\u4e861\u4e2a\u6837\u672c.\n* non-WCG\u6a21\u578b\u53ea\u6539\u53d8\u4e8611\u4e2a\u6837\u672c, \u610f\u5473\u7740\u5176\u4e2d\u67096\u4e2a\u6539\u5bf9\u4e86, 5\u4e2a\u88ab\u6539\u9519\u4e86, \u51c0\u6536\u76ca\u4e3a1\u4e2a\u6837\u672c.\n* non-WCG\u6a21\u578b\u7684\u8868\u73b0\u4e0d\u5c3d\u5982\u610f, \u4f46\u662f\u8fd8\u884c\u5c06non-WCG\u6a21\u578b\u4fdd\u7559\u4e0b\u6765, \u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u5957\u7528\u673a\u5668\u5b66\u4e60\u7684\u6a21\u677f.","2e18ba25":"### \u4e3a\u4ec0\u4e48EDA\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u9884\u6d4b?\n* EDA\u53ea\u662f\u63d0\u4f9b\u4e00\u4e9b\u601d\u8def, \u5177\u4f53\u8fdb\u884c\u9884\u6d4b, \u9700\u8981\u501f\u52a9\u673a\u5668\u5b66\u4e60, \u7406\u7531:\n1. \u673a\u5668\u5b66\u4e60\u5c06\u7279\u5f81\u7ed3\u5408\u4f1a\u66f4\u5de7\u5999, \u800c\u4e0d\u50cf\u4ea4\u53c9\u7279\u5f81\u90a3\u6837naive.\n2. \u673a\u5668\u5b66\u4e60\u4f1a\u66f4\u79d1\u5b66\u7684\u9a8c\u8bc1\u6210\u7ee9(\u6bd4\u5982\u4ea4\u53c9\u9a8c\u8bc1)","30b05977":"* \u53d1\u73b0\u7ed3\u5408Pclass\u4e0ePfare, \u597d\u50cf\u662f\u53ef\u4ee5\u627e\u5230woman\u9047\u96be\u8005\u7684.","c0cccd3d":"* \u53ea\u6709\u4e24\u4e2a\u6837\u672c, \u6839\u636e\u4e4b\u524d\u7684\u56db\u91cd\u4ea4\u53c9\u7279\u5f81\u5206\u6790, \u5168\u90e8\u90fd\u6b7b\u4ea1\u7684\u6982\u7387\u6bd4\u8f83\u5927.","b0e033f1":"# \u4f7f\u7528WCG\u6a21\u578b\u5bf9WCG\u4e58\u5ba2\u8fdb\u884c\u9884\u6d4b","fce735ff":"## woman\u7684LinearSVC\u6a21\u578b","56d892c3":"* man\u5360\u4e8659.7%\u5de6\u53f3, woman\u5360\u4e8635.6%\u5de6\u53f3, \u7537\u5b69\u5360\u4e864.7%\u5de6\u53f3.\n* \u540e\u9762\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5360\u6bd4\u5f88\u91cd\u8981, man\u7684\u5360\u6bd4\u5f88\u5927, \u4f46\u96be\u4ee5\u9884\u6d4b\u51fa\u5e78\u5b58\u8005, \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6700\u9ad8\u5206(83%\u5de6\u53f3)\u96be\u4ee5\u8d85\u51fa\u57fa\u51c6\u5206(\u6027\u522b\u6a21\u578b, 76.6%)\u592a\u591a\u7684\u4e3b\u8981\u539f\u56e0.","98d1e92e":"* \u7ec4\u5185\u751f\u5b58\u7387\u4e3a0.5, \u4f46\u662f:\n* Pclass == 1, Pfare\u5904\u5728\u8f83\u9ad8\u6863, \u8fd9\u79cd\u60c5\u51b5\u5c5e\u4e8e\u4e4b\u524d\u53d1\u73b0\u7684woman\u5927\u6982\u7387\u751f\u5b58\u7684\u60c5\u51b5.","7236df3c":"* \u5168\u90e8\u6210\u5458\u90fd\u5728\u6d4b\u8bd5\u96c6\u91cc\u7684\u5bb6\u65cf\u6709: Gibson, Klasen, Peacock, van Billiard.\n* Gibson\u5bb6\u65cf\u7684      Pclass == 1, Pfare == 29.7(\u7b2c9\u6863), Embarked == \"C\", Title == \"woman\"\n* Klasen\u5bb6\u65cf\u7684      Pclass == 3, Pfare == 6.09(\u7b2c1\u6863), Embarked == \"S\", Title == \"woman\"\n* Peacock\u5bb6\u65cf\u7684     Pclass == 3, Pfare == 4.59(\u7b2c1\u6863), Embarked == \"S\", Title == \"woman\"(2\u4e2awoman, 1\u4e2aboy, \u7b97\u505awoman, \u56e0\u4e3a\u540c\u751f\u540c\u6b7b, \u5c11\u6570\u670d\u4ece\u591a\u6570)\n* van Billiard\u5bb6\u65cf\u7684Pclass == 3, Pfare == 4.83(\u7b2c1\u6863), Embarked == \"S\", Title == \"boy\"","a8c97736":"* \u5bf9\u4e8eman, Pclass == 1, \u7b2c2\u9ad8\u6863\u7684Pfare, \u751f\u5b58\u7387\u63a5\u8fd1\u5e73\u5747\u503c\n* \u5bf9\u4e8ewoman\u6216\u8005boy, Pclass == 3, \u6700\u4f4e\u6863\u7684Pfare, \u751f\u5b58\u7387\u63a5\u8fd1\u5e73\u5747\u503c","7782b5ba":"### \u4e3a\u4e86\u4fdd\u9669\u8d77\u89c1, \u9a8c\u8bc1\u4e00\u4e0b: \"\u4e0d\u9700\u8981\u7279\u522b\u5206\u79bb\u51fa\u5973\u5b69\u4e86, \u5973\u5b69\u548c\u6210\u5e74\u5973\u6027\u5206\u4e3a\u4e00\u7c7b\u5373\u53ef\"\n* \u5047\u8bbe14\u5c81\u4ee5\u53ca\u4ee5\u4e0b, \u662f\u5973\u5b69, 14\u5c81\u4ee5\u53ca\u4ee5\u4e0a, \u662f\u6210\u5e74\u5973\u6027","f5d410a8":"* \u524d\u9762\u63d0\u5230\u4e86\"\u5982\u679c\u4e00\u4e2a\u7ec4\u5185\u7684\u6210\u5458\u4e00\u90e8\u5206\u5728\u8bad\u7ec3\u96c6\u91cc\u9762, \u4e00\u90e8\u5206\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762, \u6839\u636e\u8bad\u7ec3\u96c6\u7684\u751f\u5b58\u7387\u5c31\u53ef\u4ee5\u53bb\u9884\u6d4b\u6d4b\u8bd5\u96c6\u6210\u5458\u7684\u751f\u6b7b\"\n* \u4f46\u662f, \u5982\u679c\u4e00\u4e2a\u7ec4\u5185\u7684\u5168\u90e8\u6210\u5458\u90fd\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762, \u53c8\u8be5\u5982\u4f55?","5643d22f":"## man\u7684ETC\u6a21\u578b","92268ac7":"* \u53d6\u503c\u4e3aC\u65f6, \u9ad8\u4e8e\u5e73\u5747\u503c\n* \u53d6\u503c\u4e3aS\u65f6, \u4f4e\u4e8e\u5e73\u5747\u503c\n* \u53d6\u503c\u4e3aQ\u65f6, \u5728\u5e73\u5747\u503c\u9644\u8fd1\n* \u603b\u4f53\u6765\u770b, \u662f\u4e2d\u7b49\u9884\u6d4b\u80fd\u529b\u7684\u7279\u5f81.","49032a30":"## EDA\u5c0f\u7ed3\n* \u53d1\u73b0man\u5e78\u5b58\u8005\u96be\u5ea6\u8981\u6bd4\u53d1\u73b0woman\u9047\u96be\u8005\u8981\u5927\n* 3\u4e2a\u7279\u5f81\u7ed3\u5408\u8d77\u6765\u4f7f\u7528, \u5bf9\u4e8e\u53d1\u73b0\u8fd9\u4e24\u7c7b\u7fa4\u4f53\u6709\u5e2e\u52a9.","8cb60d6f":"# \u5bfc\u5165","7e9cd81f":"# notebook\u7684\u53c2\u8003\n\u8fd9\u4e2anotebook\u662f\u5728[Link](https:\/\/www.kaggle.com\/mviola\/titanic-wcg-knns-ensemble-0-82775-top-1)\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u5199\u7684.","f14dd5f0":"* Survived\u7f3a\u5931\u7684\u90fd\u662f\u6d4b\u8bd5\u96c6\u7684\u90e8\u5206\n* Cabin, Age\u7f3a\u5931\u6bd4\u8f83\u4e25\u91cd, \u5982\u679c\u4e00\u5b9a\u8981\u4f7f\u7528\u5b83\u4eec, \u9700\u8981\u6bd4\u8f83\u8c28\u614e, \u540e\u6765\u53d1\u73b0\u5b83\u4eec\u5e76\u4e0d\u91cd\u8981, \u6ca1\u6709\u4f7f\u7528\u4e0a.\n* Embarked, Fare\u7f3a\u5931\u8f83\u5c11","6412abae":"## \u5bfc\u5165\u5305\n\u8fd9\u4e9b\u662f\u673a\u5668\u5b66\u4e60\u6700\u5e38\u7528\u7684\u5305, \u503c\u5f97\u7cfb\u7edf\u5b66\u4e60:\n* numpy: \u77e9\u9635\u8fd0\u7b97, \u5411\u91cf\u5316\u8fd0\u7b97, Python\u79d1\u5b66\u8ba1\u7b97\u7684\u57fa\u7840\u5305\n* pandas: \u64cd\u4f5c\u7ed3\u6784\u5316\u6570\u636e.\n* matplotlib: Python\u53ef\u89c6\u5316\u7684\u57fa\u7840\u5305\n* seaborn: \u7ed8\u5236\u7edf\u8ba1\u56fe\n* scikit-learn: \u673a\u5668\u5b66\u4e60\u5e93","4bd839dc":"## SibSp","834f5a5e":"* \u6839\u636e\u56db\u91cd\u4ea4\u53c9\u7279\u5f81, \u53d1\u73b0:\n* Gibson\u5bb6\u65cf\u5927\u6982\u7387\u5e94\u8be5\u662f\u540c\u751f\u7684.\n* Klasen, Peacock, van Billiard\u5bb6\u65cf\u5927\u6982\u7387\u90fd\u662f\u540c\u6b7b\u7684.","aef78c0b":"## woman\u7684SVC\u6a21\u578b","b9185da3":"## man\u7684QDA\u6a21\u578b","7a7bd783":"* \u53d1\u73b0woman\u4e0egirl\u7684\u751f\u5b58\u7387\u5e76\u6ca1\u6709\u663e\u8457\u5dee\u522b, \u56e0\u6b64, \u4e0d\u9700\u8981\u7279\u522b\u5206\u79bb\u51fa\u5973\u5b69\u4e86, \u5973\u5b69\u548c\u6210\u5e74\u5973\u6027\u5206\u4e3a\u4e00\u7c7b\u5373\u53ef","89c10ebd":"# EDA","dee67711":"## Title\u4e0ePclass\u4ea4\u53c9","73ad7823":"## woman\u7684LDA\u6a21\u578b","e033a49e":"## woman\u7684RF\u6a21\u578b","b5882de1":"## Age","6ad1a179":"* \u53d1\u73b0male\u751f\u5b58\u7387\u8fdc\u8fdc\u4f4e\u4e8e\u5e73\u5747\u503c, female\u751f\u5b58\u7387\u8fdc\u8fdc\u9ad8\u4e8e\u5e73\u5747\u503c, \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b80\u5355\u7684**\"gender model\"**, \u6b63\u786e\u7387\u5c31\u9ad8\u8fbe76.6%\u7684\u539f\u56e0.\n* **\"gender model\"**: \u9884\u6d4b\u5b8c\u5168\u53ea\u770bSex\u7279\u5f81, \u5982\u679c\u662fmale, \u4e00\u5f8b\u9884\u6d4b\u4e3a\u6b7b\u4ea1, \u5982\u679c\u662ffemale, \u4e00\u5f8b\u9884\u6d4b\u4e3a\u751f\u5b58.","40c82b0d":"* \u7ec4\u5185\u751f\u5b58\u7387\u4e3a0.75, \u4f46\u662f:\n* Pclass == 3, Pfare\u5904\u5728\u6700\u4f4e\u6863, Embarked == \"S\", \u8fd9\u79cd\u60c5\u51b5\u5c5e\u4e8e\u4e4b\u524d\u53d1\u73b0\u7684boy\u5927\u6982\u7387\u6b7b\u4ea1\u7684\u60c5\u51b5.","25b9192c":"### WCG\u7ec4\u53f7(GroupId)\u7684\u8ba1\u7b97\u65b9\u6cd5: **GroupId = Surname + Pclass + Ticket(\u820d\u6389\u6700\u540e\u4e00\u4f4d) + Fare + Embarked**\n* \u4e00\u5bb6\u4eba\u5c31\u5e94\u8be5\u6709\u76f8\u540c\u7684Surname, \u548c\u4e2d\u56fd\u4e0d\u540c, \u5f88\u591a\u56fd\u5bb6\u5973\u6027\u5ac1\u4eba\u4ee5\u540e, \u5c31\u968f\u4e08\u592b\u7684\u59d3\u6c0f.\n* \u4e00\u5bb6\u4eba\u5e94\u8be5\u662f\u76f8\u540c\u7684\u9636\u5c42.\n* \u4e00\u5bb6\u4eba\u5e94\u8be5\u662f\u4f7f\u7528\u76f8\u540c\u7684\u8239\u7968.\n* \u5176\u4e2dTicket\u820d\u6389\u6700\u540e\u4e00\u4f4d, \u56e0\u4e3a\u53d1\u73b0\u6709\u4e9b\u5b9e\u9645\u4e0a\u662f\u4e00\u5bb6\u4eba, \u4f46\u662fTicket\u6700\u540e\u4e00\u4f4d\u4e0d\u540c(\u8fd9\u79cd\u60c5\u51b5\u5e76\u4e0d\u591a\u89c1, \u53d1\u73b0\u8fd9\u79cd\u73b0\u8c61\u7684\u4eba\u89c2\u5bdf\u529b\u60ca\u4eba!)\n![2.png](attachment:c75946ab-5c4a-4b28-98e0-7235485a5ddd.png)\n\n* \u56e0\u4e3a\u820d\u6389\u4e86\u6700\u540e\u4e00\u4f4d, \u6709\u53ef\u80fd\u4e24\u5f20\u4e0d\u540cTicket\u88ab\u8ba4\u4e3a\u662f\u76f8\u540c\u7684Ticket\u4e86, \u56e0\u6b64, \u9700\u8981Fare, Embarked\u6765\u8fdb\u4e00\u6b65\u786e\u8ba4.\n* \u8fd9\u4e2a\u516c\u5f0f\u91cc\u9762, \u6ca1\u7528Cabin, \u6709\u4e24\u4e2a\u7406\u7531:\n1. Cabin\u4e0eTicket\u4fe1\u606f\u662f\u6709\u5197\u4f59\u7684.\n2. Cabin\u7684\u7f3a\u5931\u7387\u592a\u9ad8\u4e86.\n3. \u5982\u679c\u5bb6\u5ead\u6210\u5458\u7684\u4eba\u6570\u8f83\u591a, \u6709\u53ef\u80fd\u5206\u5728\u4e86\u4e0d\u540cCabin\u91cc\u9762.\n\n\n* \u5173\u4e8eGroupId\u7684\u540e\u7eed\u5904\u7406(\u4fee\u6b63\u65b9\u6cd5):\n1. \u5c06\u6240\u6709\u7684man\u7684GroupId\u8d4b\u503c\u4e3a\"noGroup\", \u56e0\u4e3a\u524d\u9762\u63d0\u5230\u4e86, man\u5e76\u4e0d\u5c5e\u4e8e\u4efb\u4f55WCG.\n2. \u5c06\u7ec4\u5185\u6210\u5458\u4e2a\u6570\u4e3a1\u7684\u4e58\u5ba2\u7684GroupId, \u8d4b\u503c\u4e3a\"noGroup\", \u903b\u8f91\u5f88\u7b80\u5355, \u5355\u72ec\u4e00\u4e2a\u4eba, \u4e0d\u80fd\u7b97\u662f\u4e00\u4e2a\"Group\", \n   \u53e6\u5916, \u5bf9\u4e8e\u9884\u6d4b\u6beb\u65e0\u7528\u5904, \u5355\u72ec\u4e00\u4e2a\u4eba\u65e0\u6cd5\u7528\u6765\u9884\u6d4b\u5176\u4ed6\u4e58\u5ba2\u7684\u751f\u6b7b.\n3. \u5c06\u5973\u4fdd\u59c6\u7684GroupId\u6539\u4e3a\u4e1c\u5bb6\u7684GroupId, \u5173\u4e8e\u5973\u4fdd\u59c6\u7684\u8ba4\u5b9a\u65b9\u6cd5\u4f1a\u5728\u4e0b\u6587\u4e2d\u7ec6\u8bb2.","42eac3b1":"* \u9664\u4e86\u7b2c\u4e00\u4e2a\u533a\u95f4(\u4f4e\u5e74\u9f84\u6bb5), \u5176\u4ed6\u533a\u95f4\u7684\u751f\u5b58\u7387\u90fd\u5728\u5e73\u5747\u751f\u5b58\u7387\u9644\u8fd1\n* \u4f46\u662f\u4f4e\u5e74\u9f84\u6bb5\u5df2\u7ecf\u901a\u8fc7Title\u4f53\u73b0\u8fc7\u4e86\n* \u56e0\u6b64, Age\u5f88\u53ef\u80fd\u662f\u4fe1\u606f\u91cf\u4f4e\u7684\u7279\u5f81, \u53ef\u4ee5\u8003\u8651\u820d\u6389.","43202c42":"## \u89c2\u5bdf\u7f3a\u5931\u503c","909bc6bf":"### \u5355\u4e2a\u7279\u5f81","729305a5":"### \u5973\u4fdd\u59c6\u7684\u8ba4\u5b9a\n* \u6ce8\u610f: \u5973\u4fdd\u59c6\u53ea\u662f\u5bf9\u4e00\u7c7b\u4eba\u7684\u79f0\u547c, \u5e76\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u5b9a\u662f\u8fd9\u6837\u7684\u804c\u4e1a, \u662f\u4e0d\u662f\u8fd9\u6837\u7684\u804c\u4e1a, \u4e0d\u5f71\u54cd\u9884\u6d4b.\n\n![3.png](attachment:06ce614d-880f-4fc1-b6b9-cff10e6c1d02.png)\n\n* \u7ea2\u6846\u5708\u51fa\u6765\u7684\u4e24\u4e2a\u4eba, \u53d1\u73b0\u9664\u4e86Surname\u4e0d\u7b26\u5408GroupId\u7684\u6807\u51c6, \u5176\u4ed6\u90fd\u7b26\u5408.\n\n* \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7ec4\u53f7(\u4e0d\u662fWCG\u7684\u7ec4\u53f7, \u4ec5\u4ec5\u7528\u6765\u8f85\u52a9\u8ba4\u5b9a\u5973\u4fdd\u59c6\u7684): **TicketId = Pclass + Ticket(\u820d\u6389\u6700\u540e\u4e00\u4f4d) + Fare + Embarked**\n\n* \u5973\u4fdd\u59c6\u7684\u8ba4\u5b9a\u6807\u51c6:\n1. \u4e0d\u80fd\u662fman, \u56e0\u4e3aWCG\u4ee5\u53ca\u6392\u9664\u6389man\u4e86, \u7406\u8bba\u4e0a\u6709\u53ef\u80fd\u662fboy, \u5b9e\u9645\u53d1\u73b0\u627e\u51fa\u6765\u7684\u90fd\u662fwoman, \u8fd9\u662f\u5c06\u8fd9\u7c7b\u4eba\u547d\u540d\u4e3a\"\u5973\u4fdd\u59c6\"\u7684\u539f\u56e0\u4e4b\u4e00.\n2. GroupId\u4e3a\"noGroup\", \u5373, \u5047\u8bbe\u5973\u4fdd\u59c6\u662f\u5355\u72ec\u4e00\u4eba(\u5973\u4fdd\u59c6\u5728\u8239\u4e0a\u6ca1\u6709\u5bb6\u4eba)\u548c\u4e1c\u5bb6\u5728\u4e00\u8d77.\n3. \u5b58\u5728\u4e0e\u8be5\u6837\u672cTicketId\u76f8\u540c\u7684WCG(\u4e1c\u5bb6\u7684GroupId\u4e0d\u80fd\u4e3a\"noGroup\")\n\n* \u8ba4\u5b9a\u4e3a\u5973\u4fdd\u59c6\u4ee5\u540e, \u5c06\u8be5\u6837\u672c\u7684GroupId(\u539f\u5148\u4e3a\"noGroup\")\u4fee\u6b63\u4e3a\u4e1c\u5bb6\u7684GroupId, \u5373\u5973\u4fdd\u59c6\u7b97\u662f\u4e1c\u5bb6\u7684\u6210\u5458.\n\n\n**\u601d\u8003**: \n* \u524d\u9762\u5bf9GroupId\u7684\u540e\u7eed\u5904\u7406\u4e2d, \u5c06\u7ec4\u5185\u6210\u5458\u4e2a\u6570\u4e3a1\u7684\u4e58\u5ba2\u7684GroupId, \u8d4b\u503c\u4e3a\"noGroup\"(\u4e0b\u6587\u4e2d\u7b80\u79f0\u4e3a\"\u89c4\u52192\"), \n* \u57fa\u4e8e\u5973\u4fdd\u59c6\u7684\u8ba4\u5b9a\u6807\u51c63, \u610f\u5473\u7740\u5982\u679c\u4e1c\u5bb6\u662f\u4e00\u4e2a\u4eba\u7684\u8bdd, \u5973\u4fdd\u59c6\u4e0d\u4f1a\u88ab\u8ba4\u5b9a\u4e3a\u5973\u4fdd\u59c6.\n* \u90a3\u4e48, \u89c4\u52192\u662f\u4e0d\u662f\u6709\u5408\u7406\u6027\u5462?\n* \u7b54\u6848\u662f\u6709\u5408\u7406\u6027.\n* \u56e0\u4e3a\u89c4\u52192\u867d\u7136\u4f1a\u9020\u6210\"\u5982\u679c\u4e1c\u5bb6\u662f\u4e00\u4e2a\u4eba\u7684\u8bdd, \u5973\u4fdd\u59c6\u4e0d\u4f1a\u88ab\u8ba4\u5b9a\u4e3a\u5973\u4fdd\u59c6\", \n* \u4f46\u662f\u66f4\u591a\u7684\u907f\u514d\u4e86\"\u4e24\u4e2a\u4e58\u5ba2\u6070\u597d\u53ea\u662f\u540c\u7968, \u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb, \u65e2\u4e0d\u662f\u540c\u4e00\u4e2a\u5bb6\u5ead, \u4e5f\u4e0d\u662f\u4e1c\u5bb6\u4e0e\u5973\u4fdd\u59c6\u7684\u5173\u7cfb\".\n* \u89c4\u52192\u8981\u6c42\u5bb6\u5ead\u6210\u5458\u81f3\u5c11\u662f2\u4e2a, \u90a3\u4e48\u90a3\u4e2a\"\u5f02\u59d3\"\u7684\u662f\u5973\u4fdd\u59c6\u7684\u6982\u7387\u5c31\u975e\u5e38\u5927\u4e86, \u5982\u679c\u5bb6\u5ead\u6210\u5458\u53ea\u67091\u4e2a, \u90a3\u4e2a\"\u5f02\u59d3\"\u7684\u662f\u5973\u4fdd\u59c6\u7684\u6982\u7387\u6bd4\u8f83\u5c0f.","cd734153":"## \u63d0\u4ea4WCG\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c","499663e5":"* \u5bf9\u4e8eman, Pclass == 1, \u751f\u5b58\u7387\u63a5\u8fd1\u5e73\u5747\u503c\n* \u5bf9\u4e8ewoman\u6216\u8005boy, Pclass == 3, Embarked == S, \u751f\u5b58\u7387\u63a5\u8fd1\u5e73\u5747\u503c","745de617":"* \u662f\u7684, WCG\u4e58\u5ba2\u90fd\u6709\u4e86\u7ec4\u5185\u751f\u5b58\u7387","ddb5109e":"## man\u7684LogisticRegression\u6a21\u578b","fced75f9":"## \u975eWCG\u4e58\u5ba2(\"noGroup\")\u4e0eWCG\u4e58\u5ba2(\u975e\"noGroup\")\u7684\u533a\u522b\n* \u4e0b\u6587\u4e2d\u4f1a\u6839\u636eGroup_id\u662f\u5426\u4e3a\"noGroup\", \u5bf9\u6837\u672c\u8fdb\u884c\u5206\u6cbb, WCG\u4e58\u5ba2\u4f1a\u7528WCG\u6a21\u578b\u8fdb\u884c\u9884\u6d4b, \u975eWCG\u4e58\u5ba2\u4f1a\u7528\u5176\u4ed6\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\n* \u5728\u6b64\u4e4b\u524d, \u6709\u5fc5\u8981\u8bf4\u660e\u4e00\u4e0b, \u8fd9\u79cd\u5206\u6cbb\u662f\u6709\u5fc5\u8981\u7684.","be39f855":"## Title, Pfare, Embarked\u4ea4\u53c9","e4b9783e":"* \u53d1\u73b0Embarked == Q\u7684boy\u5e94\u8be5\u662f\u5728\u81ea\u4e8e\u540c\u4e00\u4e2a\u5bb6\u5ead(\u6210\u4e3a\"Rice\"\u5bb6\u5ead), \u540c\u4e00\u4e2a\u5bb6\u5ead\u51fa\u73b0\u540c\u751f\u540c\u6b7b\u7684\u6982\u7387\u76f8\u5f53\u5927(\u4e0b\u6587\u4e2d\u4f1a\u9a8c\u8bc1\u8fd9\u4e00\u70b9), \u4e0d\u5de7\u7684\u662f, \u8fd9\u4e2a\u5bb6\u5ead\u6b63\u597d\u843d\u5728\u4e86\"\u540c\u6b7b\"\u8fd9\u4e2a\u72b6\u6001.","71d4e266":"## Parch","c09e08e7":"## Title\u4e0ePfare\u4ea4\u53c9","d09320e4":"# \u5b66\u5230\u4e86\u4ec0\u4e48?","fb44837c":"### \u5c0f\u7ed3\n* \u975eWCG\u4e58\u5ba2\u4e0eWCG\u4e58\u5ba2\u7684\u5206\u5e03\u662f\u76f8\u5dee\u6bd4\u8f83\u5927\u7684.\n* \u975eWCG\u4e58\u5ba2\u4e0eWCG\u4e58\u5ba2\u7684\u5404\u4e2aTitle\u751f\u5b58\u7387\u4e5f\u662f\u76f8\u5dee\u6bd4\u8f83\u5927\u7684.\n* \u56e0\u6b64, \u8fd9\u79cd\u5206\u6cbb, \u662f\u6709\u5fc5\u8981\u7684.","89cd0564":"* \u53d1\u73b0\u751f\u6216\u6b7b\u6bd4\u4f8b\u5e76\u4e0d\u662f\u592a\u60ac\u6b8a, \u5426\u5219\u7684\u8bdd, \u8981\u91cd\u70b9\u8003\u8651\u7c7b\u522b\u5e73\u8861\u7684\u95ee\u9898\u4e86.\n* \u8fd9\u4e2a\u5e73\u5747\u751f\u5b58\u7387\u662f\u6bd4\u8f83\u91cd\u8981\u7684, \u8bb0\u4f4f\u8fd9\u4e2a\u6570\u5b57, \u540e\u9762\u4f1a\u591a\u6b21\u7528\u5230","6ca06457":"## \u5c0f\u7ed3\n* \u5bf9\u4e8e\u5355\u4e2a\u7279\u5f81\u8fdb\u884c\u4e86\u6392\u540d, \u5bf9\u7279\u5f81\u7684\u9884\u6d4b\u80fd\u529b\u6709\u4e2a\u603b\u4f53\u7684\u5224\u65ad\n* \u4f7f\u7528\u4e8c\u91cd\u4ea4\u53c9\u7279\u5f81, \u4e09\u91cd\u4ea4\u53c9\u7279\u5f81, \u56db\u91cd\u4ea4\u53c9\u7279\u5f81, \u5bf9\u4e8e\u53d1\u73b0\u90a3\u4e9b\u5f02\u5e38\u60c5\u51b5\u975e\u5e38\u6709\u5e2e\u52a9.\n* \u53d1\u73b0\u4e8c\u91cd\u4ea4\u53c9\u7279\u5f81, \u4e09\u91cd\u4ea4\u53c9\u7279\u5f81\u7684\u5f02\u5e38\u60c5\u51b5\u662f\u548c\u56db\u91cd\u4ea4\u53c9\u7279\u5f81\u7684\u5f02\u5e38\u60c5\u51b5\u4e0d\u77db\u76fe\u7684, \u662f\u4e00\u81f4\u7684.\n* \u56e0\u6b64, \u53ea\u4fdd\u7559\u4e0b\u56db\u91cd\u4ea4\u53c9\u7279\u5f81\u7684\u5f02\u5e38\u60c5\u51b5:\n* \u5bf9\u4e8eman, Pclass == 1, Embarked == \"S\", Pfare\u7b2c2\u9ad8\u6863\u4f4d\u4e0a, \u751f\u5b58\u7387\u9ad8\u4e8e\u5e73\u5747\u503c\n* \u5bf9\u4e8ewoman, Pclass == 3, Embarked == \"S\", Pfare\u6700\u4f4e\u6863\u4f4d\u4e0a, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c\n* \u5bf9\u4e8eboy, Pclass == 3, Embarked == \"S\", Pfare\u6700\u4f4e\u6863\u4f4d\u4e0a, \u751f\u5b58\u7387\u63a5\u8fd1\u4e8e\u5e73\u5747\u503c\n* \u8fd8\u6709\u4e00\u4e9b\u5c0f\u6837\u672c\u7684\u60c5\u51b5.","3a7ae3af":"* \"\u5973\u58eb\u548c\u5b69\u5b50\u4f18\u5148\"\u539f\u5219\u4e0b, \u4e0d\u9700\u8981\u7279\u522b\u5206\u79bb\u51fa\u5973\u5b69\u4e86, \u5973\u5b69\u548c\u6210\u5e74\u5973\u6027\u5206\u4e3a\u4e00\u7c7b\u5373\u53ef\n* \"\u5973\u58eb\u548c\u5b69\u5b50\u4f18\u5148\"\u539f\u5219\u4e0b, \u7537\u5b69\u6709\u5fc5\u8981\u4ece\u7537\u6027\u4e2d\u5206\u79bb\u51fa\u6765, \u7537\u5b69\u79f0\u4e3a\"boy\", \u6210\u5e74\u7537\u6027\u79f0\u4e3a\"man\"\n* \u4e3a\u4e86\u548c\u539f\u5148\u7684\u7279\u5f81\"Sex\"\u4f5c\u533a\u5206, \u79f0\u4e3a\"Title\", \u8fd9\u4e24\u4e2a\u7279\u5f81\u7684\u4fe1\u606f\u91cf\u662f\u6709\u6bd4\u8f83\u5927\u7684\u91cd\u53e0\u7684, \u53ef\u4ee5\u8003\u8651\u4fdd\u7559\u5176\u4e2d\u4e00\u4e2a.","31bd5b4d":"#### \u5bf9\u4e8ewoman, \u975eWCG\u4e58\u5ba2\u548cWCG\u4e58\u5ba2\u5360\u6bd4\u90fd\u4e0d\u5c0f, \u56e0\u6b64, \u4e24\u8fb9\u7684\u751f\u5b58\u7387\u8ba1\u7b97\u6709\u4e86\u610f\u4e49:","de4f5bbe":"### \u53ef\u89c6\u5316","91dd8437":"## woman\u7684\u96c6\u6210\u6a21\u578b","cecbab4e":"* \u53d1\u73b0\u8fd911\u4e2a\u5973\u4fdd\u59c6\u91cc\u9762, \u67099\u4e2a\u662f\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684, \u6700\u591a\u53ef\u4ee5\u63d0\u9ad8\u6210\u7ee99\/418=2.15%, \u8bf4\u660e\u53d1\u73b0\u5973\u4fdd\u59c6\u7684\u52aa\u529b\u662f\u6709\u4ef7\u503c\u7684.\n* \u4e0b\u6587\u53ef\u4ee5\u53d1\u73b0, \u5176\u4e2d3\u4e2a\u5973\u4fdd\u59c6\u88ab\u9884\u6d4b\u6b7b\u4ea1, \u5206\u522b\u662f\u7d22\u5f15\u53f7\u4e3a1140, 1171, 1258, \u5979\u4eec\u7684Pclass\u90fd\u4e3a3, \u5176\u4ed6\u90fd\u88ab\u9884\u6d4b\u4e3a\u751f\u5b58, \u5979\u4eec\u7684Pclass\u90fd\u4e3a1\u62162.","a8a6e488":"* \u53d1\u73b0\u5355\u4e2a\u7279\u5f81\u65e0\u6cd5\u627e\u5230man\u5e78\u5b58\u8005\u6216\u8005woman\u9047\u96be\u8005","4b1e6a50":"### \u7ec4\u5185\u751f\u5b58\u7387\u7684\u5206\u5e03","af18eeec":"* \u4e09\u91cd\u4ea4\u53c9\u7279\u5f81\u5c0f\u7ed3:\n* \u5bf9\u4e8eman, \u80fd\u5426\u53d1\u73b0\u5e78\u5b58\u8005, \u4f46\u662f\u6837\u672c\u5f88\u5c0f, \u4e0d\u77e5\u9053\u662f\u5426\u8fc7\u62df.\n* \u5bf9\u4e8ewoman, \u80fd\u5426\u53d1\u73b0\u9047\u96be\u8005, \u6837\u672c\u6bd4man\u5e78\u5b58\u8005\u8981\u591a\u4e00\u4e9b, \u4e5f\u8981\u5f53\u5fc3\u8fc7\u62df.","e49468de":"## woman\u7684LGBM\u6a21\u578b","b629742c":"* \u53ea\u6709\u5360\u6bd4230\/1309\u7684\u4e58\u5ba2\u662fWCG\u4e58\u5ba2, \u53e6\u5916\u5360\u6bd41079\/1309\u7684\u4e58\u5ba2\u9700\u8981\u5176\u4ed6\u6a21\u578b\u6765\u8fdb\u884c\u9884\u6d4b.\n* \u5927\u7ea6\u670996.7%\u7684boy\u662fWCG\u6210\u5458.\n* \u5927\u7ea6\u670936.7%\u7684woman\u662fWCG\u6210\u5458.\n* \u6ca1\u6709man\u662fWCG\u6210\u5458.","ec77d9fe":"## man\u7684KNN\u6a21\u578b","a2b4a2a2":"### \u751f\u5b58\u7387\u7684\u533a\u522b","a40e2f47":"* \u867d\u7136\u4e0d\u80fd\u505a\u51fa\u9884\u6d4b, \u4f46\u662f, \u5bf9\u5404\u4e2a\u7279\u5f81\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u53c9\u60c5\u51b5\u6709\u4e86\u975e\u5e38\u76f4\u89c2\u7684\u4e86\u89e3, \u4e3a\u4ee5\u540e\u7684\u5efa\u6a21, \u6253\u4e0b\u4e86\u57fa\u7840, \u6bd4\u5982:\n1. Title\u662f\u76ee\u524d\u53d1\u73b0\u7684\u6700\u91cd\u8981\u7279\u5f81, \u4e0b\u6587\u4e2d, \u5bf9\u6837\u672c\u7684\u5206\u6cbb\u4ee5Title\u4e3a\u4e3b.\n2. Pclass\u662f\u76ee\u524d\u53d1\u73b0\u7b2c\u4e8c\u91cd\u8981\u7684\u7279\u5f81.\n3. Pfare\u662f\u76ee\u524d\u53d1\u73b0\u7b2c\u4e09\u91cd\u8981\u7684\u7279\u5f81.\n4. Embarked\u662f\u76ee\u524d\u53d1\u73b0\u7b2c\u56db\u91cd\u8981\u7684\u7279\u5f81, \u53d1\u73b0\u7684\u4e09\u79cd\u5f02\u5e38\u60c5\u51b5\u90fd\u662f\u5728\"S\"\u4e0a. \u5f53\u7136, \u8fd8\u6709\u4e00\u4e9b\u5c0f\u6837\u672c\u60c5\u51b5.","62606c17":"## \u5173\u4e8e\u5b57\u6bb5\n* PassengerId: \u6574\u6570\u7f16\u53f7, \u5bf9\u4e8e\u6ca1\u6709\u4ec0\u4e48\u7528, \u4ecd\u7136\u4fdd\u7559\u5b83, \u5982\u679c\u4ee5\u540e\u6837\u672c\u6253\u4e71\u987a\u5e8f, \u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u5feb\u901f\u5b9a\u4f4d.\n* Survived: \u56e0\u53d8\u91cf, \u8bad\u7ec3\u96c6\u91cc\u9762\u90fd\u662f0\u6216\u80051, \u8868\u793a\u662f\u5426\u751f\u5b58, \u6d4b\u8bd5\u96c6\u91cc\u9762\u90fd\u662fNaN\n\n##### \u7279\u5f81:\n* Pclass: \u8868\u793a\u9636\u5c42, \u8d8a\u5c0f\u8868\u793a\u9636\u5c42\u8d8a\u9ad8, \u4ece\u751f\u5b58\u7387\u9ad8\u4f4e\u6216\u8005Fare\u7684\u5e73\u5747\u503c\u9ad8\u4f4e\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e00\u70b9.\n* Sex: \u6027\u522b, \"\u5973\u58eb\u5b69\u5b50\u4f18\u5148\"\u539f\u5219\u8ba9\u6027\u522b\u5bf9\u751f\u5b58\u7387\u5f71\u54cd\u8f83\u5927.\n* Age: \u5e74\u9f84, \"\u5973\u58eb\u5b69\u5b50\u4f18\u5148\"\u539f\u5219\u5e94\u8be5\u4f1a\u8ba9\u672a\u6210\u5e74\u4eba\u7684\u751f\u5b58\u7387\u63d0\u9ad8, \u5176\u4ed6\u5404\u4e2a\u5e74\u9f84\u6bb5\u7684\u751f\u5b58\u7387\u662f\u5426\u4e0d\u540c\u5462?\n* Fare: \u8239\u7968\u7684\u603b\u4ef7(\u4e00\u5f20\u8239\u7968\u6709\u53ef\u80fd\u8ba9\u597d\u51e0\u4e2a\u4e58\u5ba2\u4e0a\u8239)\n* Embarked: \u4e0a\u8239\u5730\u70b9.\n\n##### \u7c97\u7c97\u770b\u8d77\u6765\u6ca1\u6709\u4ec0\u4e48\u7528\u5904, \u4f46\u662f, \u5982\u679c\u8003\u8651\u4e0e\u5176\u4ed6\u4e58\u5ba2\u4e4b\u95f4\u7684\u5173\u7cfb\u7684\u8bdd, \u5bf9\u9884\u6d4b\u751f\u6b7b\u6709\u53ef\u80fd\u6709\u5e2e\u52a9\u7684\u7279\u5f81:\n* Name: \u59d3\u540d\u597d\u50cf\u65e0\u6cd5\u51b3\u5b9a\u751f\u6b7b\n* Ticket: \u8239\u7968\u53f7\u7801\n* Cabin: \u8239\u8231\u53f7\u7801\n* SibSp: \u5144\u5f1f\u59d0\u59b9\u6216\u8005\u914d\u5076\u7684\u4e2a\u6570\n* Parch: \u7236\u6bcd\u6216\u8005\u5b69\u5b50\u7684\u4e2a\u6570","98cb3d5d":"* \u56e0\u4e3a\u5df2\u7ecf\u4f7f\u7528Title\u8fdb\u884c\u5206\u6cbb\u4e86, \u5c31\u4e0d\u518d\u4f7f\u7528\u5b83\u4e86.\n* \u975eWCG\u4e58\u5ba2\u4e0d\u80fd\u4f7f\u7528WCG\u6a21\u578b\u7528\u5230\u7684\u7279\u5f81, \u6bd4\u5982\u7ec4\u5185\u751f\u5b58\u7387, \u56e0\u4e3a\u975eWCG\u4e58\u5ba2\u8981\u4e48\u662fman, \u8981\u4e48\u662f\u5355\u8eabwoman.\n* \u5bf9\u4e8e\u975eWCG\u4e58\u5ba2, \u4f7f\u7528\u4e4b\u524d\u5206\u6790\u8fc7\u7684\u91cd\u8981\u7279\u5f81: Pclass, Pfare, Embarked.","831f905c":"## Family","ba36dd38":"## man\u7684SVC\u6a21\u578b","733b7d21":"* \u5f53\u4e3a0\u65f6, \u7a0d\u5fae\u4f4e\u4e8e\u5e73\u5747\u503c\n* \u5f53\u4e3a1\u65f6, \u7a0d\u5fae\u9ad8\u4e8e\u5e73\u5747\u503c\n* \u5f53\u4e3a2\u65f6, \u5e73\u5747\u503c\u9644\u8fd1\n* \u5176\u4ed6\u7684\u53d6\u503c\u56e0\u4e3a\u6837\u672c\u5c11, \u4e0d\u505a\u8bc4\u4ef7.\n* \u603b\u4f53\u6765\u770b, \u6709\u5f31\u9884\u6d4b\u6027."}}