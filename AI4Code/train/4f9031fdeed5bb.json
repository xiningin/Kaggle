{"cell_type":{"475f5f8b":"code","607ebb4a":"markdown"},"source":{"475f5f8b":"from bs4 import BeautifulSoup\nimport requests\nimport csv\nimport time\n\n\nfilecsv = open('k700.csv', 'w', encoding='utf8')\ncsv_columns = ['Name', 'Date' ,'Rate', 'Votes', 'Genre', 'Duration','Type', 'Certificate', 'Episodes', 'Nudity', 'Violence', 'Profanity', 'Alcohol', 'Frightening']\nwriter = csv.DictWriter(filecsv, fieldnames=csv_columns)\nwriter.writeheader()\n\nx = 1\ns = requests.Session()\n\nheaders = {\"User-Agent\" : \"\"}\n\n\nfor page in range(1,51, 50): #You can change the number of of the foor loop I changed to just get the first page to show an examklpe of the output\n    print ('--- page Number', round(page \/ 50 + 1 - .02), '---')\n\n    try:\n        r = requests.get(f'https:\/\/www.imdb.com\/search\/title\/?title_type=feature,tv_movie,tv_series,tv_special,short&start={page}&ref_=adv_nxt)\n    except requests.exceptions.ConnectionError:\n        r.status_code = \"Connection refused\"\n    # r = requests.get('https:\/\/www.imdb.com\/search\/title\/?title_type=feature,tv_movie,tv_series,tv_episode,tv_special,tv_miniseries,short&adult=include&start={i}&ref_=adv_nxt',\n    #     headers=headers)\n    \n\n    soup = BeautifulSoup(r.content, 'html.parser')\n\n    \n    ancher = soup.find_all('div', {'class':'lister-item mode-advanced'})\n    for pt in ancher:\n\n        name = pt.find('h3', {'class':'lister-item-header'}).find('a').text\n        print (name)\n        dates = pt.find('span', {'class':'lister-item-year text-muted unbold'}).text.replace('(', '').replace(')', '').strip()\n        for i in dates.split():\n            if i.isdigit():\n                date = i\n\n        rates = pt.find('strong')\n        if rates:\n            rate = rates.text\n        else:\n            rate = 'No Rate'\n\n        vote = pt.find('span', {'name':'nv'})\n        if vote:\n            votes = vote.text\n        else:\n            votes = 'No Votes'\n\n        genre = pt.find('span', {'class':'genre'}).text.strip()\n        \n        first_link = pt.find('h3', {'class':'lister-item-header'}).find('a').attrs['href']\n\n        try:\n            r2 = requests.get('http:\/\/imdb.com'+first_link)\n        except requests.exceptions.ConnectionError:\n            r2.status_code = \"Connection refused\"\n\n        \n        soup2 = BeautifulSoup(r2.content, 'html.parser')\n\n        typeee = soup2.find('span', {'class':'EpisodeNavigationForSeries__EpisodeCountSpan-sc-1aswzzz-3 jbsbnI'})\n        if typeee:\n            typee = 'Series'\n\n        else:\n            typee = 'Film'\n\n        if typee == 'Film':\n            episdoes = '-'\n        else:\n            episdoes = soup2.find('span', {'class':'ipc-title__subtext'}).text\n        \n\n\n        duuration = pt.find('span', {'class':'runtime'})\n\n        if duuration:\n            duration = duuration.text[:-3]\n        else:\n            duration = 'None'\n\n\n        certificates = soup2.find_all('a', {'class':'ipc-link ipc-link--baseAlt ipc-link--inherit-color TitleBlockMetaData__StyledTextLink-sc-12ein40-1 rgaOW'})\n        if len(certificates) == 2:\n            certificate = certificates[1].text\n            \n\n        else:\n            certificate = 'None'\n            \n        if certificate == 'None':\n            second_link = 'None'\n        else:\n\n            second_link = certificates[1].attrs['href']\n\n        \n\n        try:\n            r3 = requests.get('http:\/\/imdb.com'+second_link)\n        except requests.exceptions.ConnectionError:\n            r3.status_code = \"Connection refused\"\n\n        # r3 = requests.get('http:\/\/imdb.com'+second_link,headers=headers)\n        soup3 = BeautifulSoup(r3.content, 'html.parser')\n\n        if certificate == 'None':\n\n            nudity = 'No Rate'\n            violence = 'No Rate'\n            profanity = 'No Rate'\n            alcohol = 'No Rate'\n            frightening = 'No Rate'\n\n        else:\n\n            element = soup3.find_all('div', {'class':'advisory-severity-vote__container ipl-zebra-list__item'})\n            if element:\n\n                nudity = element[0].find('span')\n                if nudity:    \n                    nudity = nudity.text\n                else:\n                    nudity = 'No Rate'\n\n                violence = element[2].find('span')\n                if violence:    \n                    violence = violence.text\n                else:\n                    violence = 'No Rate'\n\n                profanity = element[4].find('span')\n                if profanity:    \n                    profanity = profanity.text\n                else:\n                    profanity = 'No Rate'\n\n                alcohol = element[6].find('span')\n                if alcohol:    \n                    alcohol = alcohol.text\n                else:\n                    alcohol = 'No Rate'\n\n                frightening = element[8].find('span')\n                if frightening:    \n                    frightening = frightening.text\n                else:\n                    frightening = 'No Rate'\n\n            else:\n                nudity = 'No Rate'\n                violence = 'No Rate'\n                profanity = 'No Rate'\n                alcohol = 'No Rate'\n                frightening = 'No Rate'\n\n        print ('Got', x)\n        x = x+1\n\n        writer.writerow({'Name':name, 'Date':date ,'Rate':rate, 'Votes':votes, 'Genre':genre, 'Duration':duration, 'Type':typee, 'Certificate':certificate, 'Episodes':episdoes,\n         'Nudity':nudity, 'Violence':violence, 'Profanity':profanity, 'Alcohol':alcohol, 'Frightening':frightening})\n","607ebb4a":"This code is for Imdb Most popular Films and serie [Here](https:\/\/www.kaggle.com\/mazenramadan\/imdb-most-popular-films-and-series)\n<br>\nThis is the code for collecting the data using requests and beatifulsoup\n<br>\nThe code maybe not work in future if the website's developer team changed the name of css tags"}}