{"cell_type":{"d8eb678b":"code","bb52330b":"code","145aa029":"code","ca05e6f0":"code","d62fdf7d":"code","8418e4ea":"code","e65fc364":"code","bc17db8c":"code","e4e3a44d":"code","02686e11":"code","93a00c53":"code","1735f257":"code","b7ebf82e":"code","6cf52989":"code","6c60f381":"code","848a7850":"code","d7326e4c":"code","eb7ab915":"code","fd3f78b5":"code","e6b0721e":"code","c2f17abd":"code","20f24c9d":"markdown","4c180bb6":"markdown","692fa6d4":"markdown","57ef962b":"markdown","e4dd9356":"markdown","43ed6ac6":"markdown","ca61e079":"markdown","161b146e":"markdown","065be857":"markdown","4ab9183d":"markdown"},"source":{"d8eb678b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bb52330b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) \n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()\n","145aa029":"df[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\ndf.head()\n","ca05e6f0":"#Generate a Wordcloud\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'white', width = 1000,  height = 1000, max_words = 121).generate(\" \".join(df['title']))\n  \nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Words in Title',fontsize = 30)\nplt.show()","d62fdf7d":"\nlabels = 'Movies','TV Series'\nsr = pd.Series(df['type'])\nx = sr.value_counts()\nprint(x)\nfig1, ax1 = plt.subplots()\nax1.pie(x, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n","8418e4ea":"from sklearn.preprocessing import MultiLabelBinarizer # Similar to One-Hot Encoding\n\ndata= df['listed_in'].astype(str).apply(lambda s : s.replace('&',' ').replace(',', ' ').split()) \n\ntest = data\nmlb = MultiLabelBinarizer()\nres = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_)\ncorr = res.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(35, 34))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()","e65fc364":"temp_df1 = df['release_year'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['release_year'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'CONTENT RELEASE OVER THE YEAR' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","bc17db8c":"df1 = df[df[\"type\"] == \"TV Show\"]\ndf2 = df[df[\"type\"] == \"Movie\"]\n\ntemp_df1 = df1['release_year'].value_counts().reset_index()\ntemp_df2 = df2['release_year'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['release_year'],\n                name=\"TV Shows\",\n                marker = dict(color = 'rgb(249, 6, 6)'))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['index'],\n                y = temp_df2['release_year'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(26, 118, 255)'))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'CONTENT RELEASE OVER THE YEAR BY CONTENT TYPE' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","e4e3a44d":"trace = go.Histogram(\n                     x = df['duration'],\n                     xbins=dict(size=0.5),\n                     marker = dict(color = 'rgb(26, 118, 255)'))\nlayout = go.Layout(template= \"plotly_dark\", title = 'Distribution of Movies Duration', xaxis = dict(title = 'Minutes'))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","02686e11":"temp_df = df['country'].value_counts().reset_index()[:20]\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['country'],\n                marker = dict(color = 'rgb(153,255,153)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 20 COUNTIES WITH MOST CONTENT' , xaxis = dict(title = 'Countries'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","93a00c53":"new_df = df[['title','director','cast','listed_in','description']]\nnew_df.head()\n","1735f257":"!pip install rake-nltk\n\nfrom rake_nltk import Rake\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n","b7ebf82e":"#Clean Data\nnew_df.dropna(inplace = True)\n\nblanks = []  # start with an empty list\n\ncol=['title','director','cast','listed_in','description']\nfor i,col in new_df.iterrows():  # iterate over the DataFrame\n    if type(col)==str:            # avoid NaN values\n        if col.isspace():         # test 'review' for whitespace\n            blanks.append(i)     # add matching index numbers to the list\n\nnew_df.drop(blanks, inplace=True)","6cf52989":"# initializing the new column\nnew_df['Key_words'] = \"\"\n\nfor index, row in new_df.iterrows():\n    description = row['description']\n    \n    # instantiating Rake, by default it uses english stopwords from NLTK\n    # and discards all puntuation characters as well\n    r = Rake()\n\n    # extracting the words by passing the text\n    r.extract_keywords_from_text(description)\n\n    # getting the dictionary whith key words as keys and their scores as values\n    key_words_dict_scores = r.get_word_degrees()\n    \n    # assigning the key words to the new column for the corresponding movie\n    row['Key_words'] = list(key_words_dict_scores.keys())\n\n# dropping the Plot column\nnew_df.drop(columns = ['description'], inplace = True)\n","6c60f381":"new_df['cast'] = new_df['cast'].map(lambda x: x.split(',')[:3])\n\nnew_df['listed_in'] = new_df['listed_in'].map(lambda x: x.lower().split(','))\n\nnew_df['director'] = new_df['director'].map(lambda x: x.split(' '))\n\nfor index, row in new_df.iterrows():\n    row['cast'] = [x.lower().replace(' ','') for x in row['cast']]\n    row['director'] = ''.join(row['director']).lower()\n    \nnew_df.set_index('title', inplace = True)","848a7850":"new_df['bag_of_words'] = ''\ncolumns = new_df.columns\nfor index, row in new_df.iterrows():\n    words = ''\n    for col in columns:\n        if col != 'director':\n            words = words + ' '.join(row[col])+ ' '\n        else:\n            words = words + row[col]+ ' '\n    row['bag_of_words'] = words\n    \nnew_df.drop(columns = [col for col in new_df.columns if col!= 'bag_of_words'], inplace = True)","d7326e4c":"new_df.head()","eb7ab915":"count = CountVectorizer()\ncount_matrix = count.fit_transform(new_df['bag_of_words'])\n\nindices = pd.Series(new_df.index)\nindices[:5]","fd3f78b5":"cosine_sim = cosine_similarity(count_matrix, count_matrix)\ncosine_sim","e6b0721e":"def recommendations(Title, cosine_sim = cosine_sim) :\n    \n    recommended_movies = []    \n    idx = indices[indices == Title].index[0]\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    \n    for i in top_10_indexes:\n        recommended_movies.append(list(new_df.index)[i])\n        \n    return recommended_movies","c2f17abd":"recommendations('Love')","20f24c9d":"# Content released over the Years by Content Type","4c180bb6":"# Modelling Content based Recommendation System with Natural Language Processing\n\n*  Initialize the Vectorizer to make Document-term matrix \n\n*  Using the cosine similarity to recommend the movies and tv series \n\n\n\n","692fa6d4":"**Cosine Similarity Matrix**","57ef962b":"# No of Movies and TV Series in the Dataset","e4dd9356":"**Recommendation Function to return 10 movies\/tv shows based on the given title **","43ed6ac6":"# Top 20 Countries with Most Content","ca61e079":"# BuzzWords in Dataset using WordCloud","161b146e":"# Content released over the Years on Netflix ","065be857":"# Cleaning data for Building Recommendation System","4ab9183d":"# Distribution of Movie Duration : Histogram "}}