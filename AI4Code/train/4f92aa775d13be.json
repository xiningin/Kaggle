{"cell_type":{"ce860b24":"code","cc20a7ca":"code","7f5b55b8":"code","a809e93e":"code","7d20901f":"code","9330bd3c":"code","4c02c40e":"code","0af3fb29":"code","5b514eb2":"code","88877c51":"code","589cfa88":"code","f9b92a03":"code","7491b25b":"code","80e3000e":"code","9acebb57":"code","243e835d":"code","229678b9":"code","50e6fda3":"code","bc78be31":"code","0daf2deb":"code","23e92ff5":"code","508b49d8":"code","2af35a81":"code","27830fd6":"code","86ba51f5":"code","354f760b":"code","99e29f54":"code","fb77826a":"code","6aa11e6e":"code","fdcbcb9c":"code","7666a063":"code","38a836c0":"code","3c517244":"code","1a45c9c2":"code","c1678fa7":"code","da48ab2c":"code","ffdae355":"code","b58c5162":"code","3572af4e":"code","891abffa":"code","7834ed6e":"code","874e321f":"code","d2bb6d75":"code","dc336ffa":"code","ce5d7e1c":"code","b3d49e05":"code","505a22ff":"code","691cd1fe":"code","f1ad743e":"code","a195a662":"markdown","6db22b7c":"markdown","88a3b7a4":"markdown","ac9d07db":"markdown","aa0ec942":"markdown"},"source":{"ce860b24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cc20a7ca":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7f5b55b8":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')","a809e93e":"print(data.shape)\nprint(store.shape)","7d20901f":"data.head()","9330bd3c":"store.head()","4c02c40e":"data.info()\n# data.dtypes","0af3fb29":"data.describe(include='object')","5b514eb2":"data.describe()[['Sales','Customers']]","88877c51":"data.describe()[['Sales','Customers']].loc['mean']","589cfa88":"data.describe()[['Sales','Customers']].loc['min']","f9b92a03":"data.describe()[['Sales','Customers']].loc['max']","7491b25b":"data.Store.nunique()","80e3000e":"data.head()\ndata.Store.value_counts().head(50).plot.bar()","9acebb57":"data.Store.value_counts().tail(50).plot.bar()","243e835d":"data.Store.value_counts()","229678b9":"data.DayOfWeek.value_counts()","50e6fda3":"data.Open.value_counts()","bc78be31":"data.Promo.value_counts()","0daf2deb":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\nstore_id= data.Store.unique()[0]\nprint(store_id)\nstore_rows=data[data['Store']==store_id]\nprint(store_rows.shape)\n# store_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","23e92ff5":"# store_rows[store_rows['Sales']==0]","508b49d8":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')\nstore_test_rows = test[test['Store']==store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","2af35a81":"store_rows['Sales'].plot.hist()\n# it is slightly skewed.","27830fd6":"data['Sales'].plot.hist()\n# it is slightly skewed.","86ba51f5":"store.head()","354f760b":"# store.isna.sum()","99e29f54":"store_id=store[store['Store']==1].T","fb77826a":"store[~store['Promo2SinceYear'].isna()].iloc[0]","6aa11e6e":"# Method1\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\nstore['Promo2SinceWeek']= store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear']= store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']= store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0]) \n\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']= store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']= store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore.isna().sum()\n      ","fdcbcb9c":"data_merged = data.merge(store, on='Store',how='left')\nprint(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isna().sum().sum()) #to cross check if there are any missing values","7666a063":"# encoding\n# 3 categorical column,1 date column, rest are numerical\n# data_merged.dtypes\ndata_merged['day']=data_merged['Date'].dt.day\ndata_merged['month']=data_merged['Date'].dt.month\ndata_merged['year']=data_merged['Date'].dt.year\n#data_merged['dayofweek']=data_merged['Date'].dt.strftime('%a')\n","38a836c0":"# Decision tress - label encoding should be used.\n# regression - one hot encoding must be used.","3c517244":"# data_merged.dtypes\n# StateHoliday,StoreType,Assortment,PromoInterval\ndata_merged['StateHoliday'].unique()\n# for creating dummy variables - label encoding is used\ndata_merged['StateHoliday']=data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday']=data_merged['StateHoliday'].astype(int)\ndata_merged","1a45c9c2":"# encoding assorted\ndata_merged['Assortment']\n# for creating dummy variables - label encoding is used\ndata_merged['Assortment']=data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment']=data_merged['Assortment'].astype(int)\ndata_merged","c1678fa7":"data_merged['StoreType'].unique()\ndata_merged['StoreType']=data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType']=data_merged['StoreType'].astype(int)\ndata_merged","da48ab2c":"data_merged['PromoInterval'].unique()\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged","ffdae355":"# Train and validate Split\nfeatures= data_merged.columns.drop(['Sales','Date'])\nfrom sklearn.model_selection import train_test_split\ntrain_x,validate_x,train_y,validate_y = train_test_split(data_merged[features],np.log(data_merged['Sales']+1),test_size=0.2,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","b58c5162":"# from sklearn.tree import DecisionTreeRegressor\n\n# model_dt = DecisionTreeRegressor(max_depth=20,random_state=1).fit(train_x,train_y)\n# validate_y_pred = model_dt.predict(validate_x)\n\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_dt=DecisionTreeRegressor(max_depth=10,random_state=1).fit(train_x,train_y)\nvalidate_y_pred=model_dt.predict(validate_x)","3572af4e":"!pip install pydotplus","891abffa":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","7834ed6e":"draw_tree(model_dt,features)","874e321f":"validate_y_pred = model_dt.predict(validate_x)\nfrom sklearn.metrics import mean_squared_error\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nnp.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))","d2bb6d75":"# submitting the train on test data set","dc336ffa":"model_dt.feature_importances_","ce5d7e1c":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nplt.barh(features,model_dt.feature_importances_)\npd.Series(model_dt.feature_importances_,index=features)","b3d49e05":"stores_avg_cust = data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1 = test.merge(stores_avg_cust,on='Store',how='left')\ntest.shape,test_1.shape\ntest_merged = test_1.merge(store,on='Store',how='inner')\ntest_merged['Open']=test_merged['Open'].fillna(1)\ntest_merged['Date']=pd.to_datetime(test_merged[\"Date\"],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\ntest_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map(map_promo)\n","505a22ff":"test_merged","691cd1fe":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred) - 1","f1ad743e":"submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsubmission_predicted = pd.DataFrame({'Id':test['Id'],'Sales':test_pred_inv})\nsubmission_predicted.to_csv('submission.csv',index=False)\nsubmission_predicted.head()","a195a662":"# steps done in the current ml data\n\n* summary stats\n* understand your data\n* data preprocessing\n --missing value imputation\n --transformation\n --scaling\n --encoding\n* model fitting'\n* model summary\n* Prediction\n* Evaluation","6db22b7c":"****Store - It is categorical column hence min and max must not be done. we do value counts to check if every category has same amount of data********","88a3b7a4":"****Granularity - One big brand has various number of branches and each rows is the data of that branch day wise****","ac9d07db":"store_test_rows","aa0ec942":"****Granularity - Here it is the metadata of the branches with respect to promotional events events conducted overall****"}}