{"cell_type":{"7d635940":"code","eccc25fb":"code","f5153048":"code","e01ed251":"code","bc4bd83a":"markdown","a477fa7e":"markdown","20ae4d25":"markdown","5d327d00":"markdown","8c34fa78":"markdown","639ff78c":"markdown","17885037":"markdown","28686c51":"markdown"},"source":{"7d635940":"import random","eccc25fb":"class StopExecution(Exception):\n    def _render_traceback_(self):\n        pass","f5153048":"class Snake:\n\n    # Default Constructor\n    def __init__(self):\n\n        print(\"###### Welcome to Snakes & Ladders Game ######\")\n        self.name = input(\"Enter the Name of Player 1 : \")\n        self.comp = input(\"Enter the Name of Player 2 : \")\n        print(\"###### Let us Start ######\")\n        # self.name = name\n        # self.comp = comp\n        # self.p1 = 0\n        # self.p2 = 0\n        self.game = [0, 0]    # Steps of the Players\n\n        # Goto Dictionaries\n        self.pos_of_snakes = {17 : 7, 54 : 34, 62 : 19, 98 : 79}\n        self.pos_of_ladders = {3 : 38, 24 : 33,  42 : 93, 72 : 84}\n    \n    # Display Player's Name\n    def displayName(self):\n\n        print(\"Player 1's Name : {}, Player 2's Name : {}\".format(self.name, self.comp))\n\n    # Display Winner's Name\n    def displayWinner(self, number):\n\n        if number == \"1\":   winner = self.name\n        else:   winner = self.comp\n        print(\"Player {} won the Game!\".format(number))\n        print(\"Congratulations {} !!\".format(winner))\n        print(\"###### Game Successfully Finished ######\")\n        raise StopExecution                       # ipynb equivalent of exit(0)\n\n    # Check for Any Snakes or Ladders in the current position\n    def checkSnakeLadder(self, pos):\n\n        if pos in self.pos_of_snakes.keys():    pos = self.pos_of_snakes.get(pos)\n        elif pos in self.pos_of_ladders.keys():     pos = self.pos_of_ladders.get(pos)\n        return pos\n\n    # Check for 'quit'\n    def quitGame(self, number):\n\n        if number == \"1\":   self.displayWinner(\"2\")\n        else:   self.displayWinner(\"1\")\n        raise StopExecution                       # ipynb equivalent of exit(0)\n    \n    # Check for Overflow Position\n    def checkMoreThanHundred(self, pos, x):\n\n        if (pos + x) > 100:   pass                  # Check for >100\n        else:   pos += x\n        return pos\n    \n    # Check for the Range of Input in Manual Mode\n    def checkManualMode(self, inp):\n        x = int(inp)\n        if x not in range(2,20):\n            print(\"Invalid Input! The Number you Entered isn't within the range of between 1 and 20\")\n            x = int(input(\"Please Enter a Number within the given Range : \"))\n        return x\n\n    # Check for the Move Input if it's Valid or Illegal\n    def checkMoveInput(self, number):\n\n        inp = input(\"Player {} : \".format(number))\n        if inp == \"roll\":   x = random.randint(1, 6)\n        elif inp == \"quit\":     self.quitGame(number)\n        elif inp.isnumeric():   x = self.checkManualMode(inp)\n        else:   \n            print(\"Illegal Input, Please Input a Valid Input!\")\n            x = self.checkMoveInput(number)\n        print(\"You got a \", x)\n        return x\n    \n    # Player Position Function\n    def playerPosition(self, number):\n        \n        pos = 0\n        pos = self.game[int(number)-1]\n        x = self.checkMoveInput(number)            # Check for Valid Input\n        pos = self.checkMoreThanHundred(pos, x)    # Check for the Validity of the Position\n        pos = self.checkSnakeLadder(pos)           # Check for Snakes and Ladder\n        print(\" Your Final Position is \", pos)\n        if pos == 100:                             # Check for Winner\n            self.displayWinner(number)\n        self.game[int(number)-1] = pos             # Lastly assigning the step into the list\n\n    # Snake Game Function\n    def snakeGame(self):\n\n        while True:\n            self.playerPosition('1')\n            self.playerPosition('2')\n            # break","e01ed251":"# Main Method\nif __name__ == \"__main__\":\n    snake = Snake()\n    # snake.displayName()\n    snake.snakeGame()\n    del snake                                     # Delete the Object","bc4bd83a":"# END                                         \n","a477fa7e":"#  Importing Libraries","20ae4d25":"# Snake Class","5d327d00":"# Main Method","8c34fa78":"#  Snake & Ladders\n\n* Author: Rahul Bordoloi                     \n* Date Created: 14 July, 2020      \n* Language & Version - Python 3.6.8                                        \n\n ","639ff78c":"**Problem Statement - <br>**\nDesign and implement a Snakes and Ladders game in Python. ","17885037":"For exiting from a cell in ipynb without killing the terminal,","28686c51":"Python File Link - [snakeAndLadder.py](https:\/\/drive.google.com\/file\/d\/1aR0RMjxGpSdzCmcg6wtrAWMKbj_8AIRA\/view?usp=sharing) <br>\nColab Notebook Link - [snakeAndLadder.ipynb](https:\/\/colab.research.google.com\/drive\/1U4O7FXY6TOEqEj8GDMawNEJOt-XOAQbe?usp=sharing)"}}