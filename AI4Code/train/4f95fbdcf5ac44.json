{"cell_type":{"7bccd18f":"code","c7404be9":"code","ed748857":"code","4d085548":"code","fc0a014d":"code","db4c2cd6":"code","cac83815":"code","7f77a373":"code","71d0cd6d":"code","ccb6d5c9":"code","eb6971f5":"code","abe98fe9":"code","90663d44":"code","bb6acb35":"code","a1898069":"code","eae29b3b":"code","481cdcbb":"code","05cb2ff8":"code","e8fdb6d1":"code","633631d2":"code","49e7a0d1":"code","c79f3654":"code","73665c6d":"code","22e8e0eb":"code","a74aacb8":"markdown","8be4a566":"markdown","4b8f0148":"markdown","4d3602c4":"markdown","a5b7e164":"markdown","2c2a23fa":"markdown","a0b5f303":"markdown","c5e416a7":"markdown","523f5a09":"markdown","83be1637":"markdown","b12951b4":"markdown","582e57ae":"markdown","0437b809":"markdown","a761428d":"markdown","c7a23644":"markdown","78529bcd":"markdown","79c56f08":"markdown","cd5b7142":"markdown","ca16c9b0":"markdown","214b5715":"markdown","d9b0806d":"markdown"},"source":{"7bccd18f":"import tensorflow as tf \nfrom tensorflow import keras\nfrom sklearn import preprocessing, model_selection\nimport numpy as np \nimport pandas as pd ","c7404be9":"df = pd.read_csv('..\/input\/star-dataset\/6 class csv.csv')\ndf.head()","ed748857":"df.tail()","4d085548":"df.isnull().values.any()","fc0a014d":"df.corr()","db4c2cd6":"import matplotlib.pyplot as plt\n\ndef plot_corr(df):\n    corr = df.corr()\n    fig,ax = plt.subplots(figsize = (6,6))\n    ax.matshow(corr)\n    plt.xticks(range(len(corr.columns)),corr.columns)\n    plt.yticks(range(len(corr.columns)),corr.columns)\n    \n    \nplot_corr(df) ","cac83815":"# star class:  Star Type\n#     0     :  Brown Dwarf\n#     1     :  Red Dwarf\n#     2     :  White Dwarf\n#     3     :  Main-Sequence\n#     4     :  Supergiant\n#     5     :  Hypergiant","7f77a373":"brown_dwarf = len(df.loc[df['Star type'] == 0])\nred_dwarf = len(df.loc[df['Star type'] == 1])\nwhite_dwarf = len(df.loc[df['Star type'] == 2])\nmain_sequence = len(df.loc[df['Star type'] == 3])\nsupergiant = len(df.loc[df['Star type'] == 4])\nhypergiant = len(df.loc[df['Star type'] == 5])\n\nprint(\"Brown dwarf = {} \".format(brown_dwarf))\nprint(\"Red dwarf  = {} \".format(red_dwarf))\nprint(\"White Dwarf = {} \".format(white_dwarf))\nprint(\"Main Sequence = {} \".format(main_sequence))\nprint(\"Supergiant= {} \".format(supergiant))\nprint(\"Hypergiant = {} \".format(hypergiant)) \nprint(\"Total stars in the dataset = {} \".format(len(df)))","71d0cd6d":"x = np.array(df.drop(['Star type', 'Star color','Spectral Class'],1))   # Excludes Star type, Star color and Spectral Class\ny = np.array(df['Star type'], dtype ='float')                           # Only Star type column\ny.shape = (len(y),1)                                                    # Shaping the star type column into a column vector","ccb6d5c9":"x_train ,x_test , y_train, y_test = model_selection.train_test_split(x,y, test_size = 0.3)    #Splits data into 70:30 ratio","eb6971f5":"x_f_train = preprocessing.scale(x_train)\nx_f_test = preprocessing.scale(x_test)\ny_f_train = y_train\ny_f_test = y_test","abe98fe9":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(200,activation = tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(300,activation = tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(6,activation = tf.nn.softmax))\n\n\nmodel.compile(optimizer = tf.train.AdamOptimizer(),\n       loss = 'sparse_categorical_crossentropy',\n       metrics=['accuracy'])","90663d44":"model.fit(x_f_train,y_f_train, epochs = 100)","bb6acb35":"val_loss,val_acc = model.evaluate(x_f_test,y_f_test)\nprint(\"Loss % = {} , Accuracy % = {} \".format(val_loss*100,val_acc*100))","a1898069":"# [1,0,0,0,0,0] = Brown Dwarf\n# [0,1,0,0,0,0] = Red Dwarf\n# [0,0,1,0,0,0] = White Dwarf\n# [0,0,0,1,0,0] = Main Sequence\n# [0,0,0,0,1,0] = Supergiant\n# [0,0,0,0,0,1] = Hypergiant\n\narr = np.array([[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]])","eae29b3b":"z = np.round(model.predict(x_f_test))\n\nprint('_____________________________________________________')\nprint(\"Prediction : P-Class : O-Class \")\n\nc1=c2=c3=c4=c5=c6=c7=c8=c9=c10=c11=c12=0  #counter variables\n\nfor i in range(0,len(z)):\n    if np.array_equal(z[i],arr[0]):\n        print(\"{}  :  {} :  {}\".format(z[i],0,y_test[i]))\n        c1+=1\n    elif np.array_equal(z[i],arr[1]):\n        print(\"{}  :  {} :  {}\".format(z[i],1,y_test[i]))\n        c2+=1\n    elif np.array_equal(z[i],arr[2]):\n        print(\"{}  :  {} :  {}\".format(z[i],2,y_test[i]))\n        c3+=1  \n    elif np.array_equal(z[i],arr[3]):\n        print(\"{}  :  {} :  {}\".format(z[i],3,y_test[i]))\n        c4+=1 \n    elif np.array_equal(z[i],arr[4]):\n        print(\"{}  :  {} :  {}\".format(z[i],4,y_test[i]))\n        c5+=1\n    elif np.array_equal(z[i],arr[5]):\n        print(\"{}  :  {} :  {}\".format(z[i],5,y_test[i]))\n        c6+=1    \n\nprint('_____________________________________________________')\nprint(\"Predicted NO. of Brown Dwarfs = {}\".format(c1))\nprint(\"Predicted NO. of Red Dwarfs = {}\".format(c2))\nprint(\"Predicted NO. of White Dwarfs = {}\".format(c3))\nprint(\"Predicted NO. of Main Sequence stars = {}\".format(c4))\nprint(\"Predicted NO. of Supergiants = {}\".format(c5))\nprint(\"Predicted NO. of Hypergiants = {}\".format(c6))\nprint(\"Total tested stars = {}\".format(len(z)))\n\nm = y_test\n\nprint('_____________________________________________________')\n\nfor i in range(0,len(m)):\n    if m[i] == 0:\n        c7+=1\n    elif m[i] == 1 :\n        c8+=1 \n    elif m[i] == 2 :\n        c9+=1 \n    elif m[i] == 3 :\n        c10+=1 \n    elif m[i] == 4 :\n        c11+=1 \n    elif m[i] == 5 :\n        c12+=1     \n\n\nprint(\"Original NO. of Brown Dwarfs = {}\".format(c7))\nprint(\"Original NO. of Red Dwarfs = {}\".format(c8))\nprint(\"Original NO. of White Dwarfs = {}\".format(c9))\nprint(\"Original NO. of Main Sequence stars = {}\".format(c10))\nprint(\"Original NO. of Supergiants = {}\".format(c11))\nprint(\"Original NO. of Hypergiants = {}\".format(c12))\nprint(\"Total tested stars = {}\".format(len(x_test)))\n\nprint('_____________________________________________________')\nprint('Accuracy = {}%'.format((val_acc*100)))","481cdcbb":"df1 = pd.read_csv('..\/input\/star-dataset\/6 class csv.csv')\n\n\n\nx1 = np.array(df1.drop(['Star color','Spectral Class'],1))\ny1 = np.array(df1['Star type'], dtype ='float')\ny1.shape = (len(y1),1)\nc1 =0\n\nfor i in range(0,len(x1)):\n    if x1[i][4] == 0:\n        a = plt.scatter(x1[i][0],x1[i][3], s = 30 , c = 'green', marker = '.')\n    elif x1[i][4]== 1:\n        b = plt.scatter(x1[i][0],x1[i][3],s = 50 , c = 'red',marker = '.')\n    elif x1[i][4]== 2:\n        c = plt.scatter(x1[i][0],x1[i][3],s = 75 , c = 'gray',marker = '.')\n    elif x1[i][4]== 3:\n        d = plt.scatter(x1[i][0],x1[i][3],s = 90 , c = 'brown',marker = '.')     \n    elif x1[i][4]== 4:\n        e = plt.scatter(x1[i][0],x1[i][3],s = 100 , c = 'orange',marker = 'o') \n    elif x1[i][4]== 5:\n        f = plt.scatter(x1[i][0],x1[i][3],s = 150 , c = 'blue',marker = 'o')\n        \n        \n    c1+=1\n\n\nprint(\"Total Counted Stars = {}\".format(c1)) \nplt.xlabel(\"Temperature(K)\")\nplt.ylabel(\"Absolute Magnitude(Mv)\")\nplt.title(\"H-R Diagram of Total Stars \")\nplt.legend((a,b,c,d,e,f),('Brown Dwarf','Red Dwarf','White Dwarf','Main Sequence','Supergiant','Hypergiant'))\nm = np.linspace(0,40000,100)\nn = (0*m) -7.5\nplt.plot(m,n,'--m')\nf = np.linspace(0,6000,100)\ng = (0*f)+15.4\nplt.plot(f,g,'--c')\nplt.scatter(5778,4.83,s = 95, c= 'yellow',marker = 'o' )\nplt.gca().invert_xaxis()\nplt.gca().invert_yaxis()\nplt.show()","05cb2ff8":"##  Yellow coloured point in the Main Sequence star band denotes our \"SUN\"","e8fdb6d1":"c2=0\n\nfor i in range(0,len(y_train)):\n    if y_train[i] == 0:\n        a = plt.scatter(x_train[i][0],x_train[i][3], s = 30 , c = 'green', marker = '.')\n    elif y_train[i]== 1:\n        b = plt.scatter(x_train[i][0],x_train[i][3],s = 50 , c = 'red',marker = '.')\n    elif y_train[i]== 2:\n        c = plt.scatter(x_train[i][0],x_train[i][3],s = 75 , c = 'gray',marker = '.')\n    elif y_train[i]== 3:\n        d = plt.scatter(x_train[i][0],x_train[i][3],s = 90 , c = 'brown',marker = '.')      \n    elif y_train[i]== 4:\n        e = plt.scatter(x_train[i][0],x_train[i][3],s = 100 , c = 'orange',marker = 'o') \n    elif y_train[i]== 5:\n        f = plt.scatter(x_train[i][0],x_train[i][3],s = 150 , c = 'blue',marker = 'o')    \n    c2+=1\n\n\nprint(\"Total Trained Stars = {}\".format(c2)) \nplt.xlabel(\"Temperature(K)\")\nplt.ylabel(\"Absolute Magnitude(Mv)\")\nplt.title(\"H-R Diagram of Trained Stars \")\nplt.legend((a,b,c,d,e,f),('Brown Dwarf','Red Dwarf','White Dwarf','Main Sequence','Supergiant','Hypergiant'))\nm = np.linspace(0,40000,100)\nn = (0*m) -7.5\nplt.plot(m,n,'--m')\nf = np.linspace(0,6000,100)\ng = (0*f)+15.4\nplt.plot(f,g,'--c')\nplt.gca().invert_xaxis()\nplt.gca().invert_yaxis()\nplt.show()","633631d2":"c3=0\n\nfor i in range(0,len(y_test)):\n    if y_test[i] == 0:\n        a = plt.scatter(x_test[i][0],x_test[i][3], s = 30 , c = 'green', marker = '.')\n    elif y_test[i]== 1:\n        b = plt.scatter(x_test[i][0],x_test[i][3],s = 50 , c = 'red',marker = '.')\n    elif y_test[i]== 2:\n        c = plt.scatter(x_test[i][0],x_test[i][3],s = 75 , c = 'gray',marker = '.')\n    elif y_test[i]== 3:\n        d = plt.scatter(x_test[i][0],x_test[i][3],s = 90 , c = 'brown',marker = '.')   \n    elif y_test[i]== 4:\n        e = plt.scatter(x_test[i][0],x_test[i][3],s = 100 , c = 'orange',marker = 'o')\n    elif y_test[i]== 5:\n        f = plt.scatter(x_test[i][0],x_test[i][3],s = 150 , c = 'blue',marker = 'o')     \n    c3+=1\n\n\nprint(\"Total Tested Stars = {}\".format(c3)) \nplt.xlabel(\"Temperature(K)\")\nplt.ylabel(\"Absolute Magnitude(Mv)\")\nplt.title(\"H-R Diagram of Tested Stars \")\nplt.legend((a,b,c,d,e,f),('Brown Dwarf','Red Dwarf','White Dwarf','Main Sequence','Supergiant','Hypergiant'))\nm = np.linspace(0,40000,100)\nn = (0*m) -7.5\nplt.plot(m,n,'--m')\nf = np.linspace(0,6000,100)\ng = (0*f)+15.4\nplt.plot(f,g,'--c')\nplt.gca().invert_xaxis()\nplt.gca().invert_yaxis()\nplt.show()","49e7a0d1":"c4 = 0\n\nfor i in range(0,len(z)):\n    if np.array_equal(z[i],arr[0]):\n        a = plt.scatter(x_test[i][0],x_test[i][3], s = 30 , c = 'green', marker = '.')\n    elif np.array_equal(z[i],arr[1]):\n        b = plt.scatter(x_test[i][0],x_test[i][3],s = 50 , c = 'red',marker = '.')\n    elif np.array_equal(z[i],arr[2]):\n        c = plt.scatter(x_test[i][0],x_test[i][3],s = 75 , c = 'gray',marker = '.')\n    elif np.array_equal(z[i],arr[3]):\n        d = plt.scatter(x_test[i][0],x_test[i][3],s = 90 , c = 'brown',marker = '.')    \n    elif np.array_equal(z[i],arr[4]):\n        e = plt.scatter(x_test[i][0],x_test[i][3],s = 100 , c = 'orange',marker = 'o')\n    elif np.array_equal(z[i],arr[5]):\n        f = plt.scatter(x_test[i][0],x_test[i][3],s = 150 , c = 'blue',marker = 'o')     \n    c4+=1\n\nprint(\"Total Predicted Stars = {}\".format(c4)) \nplt.xlabel(\"Temperature(K)\")\nplt.ylabel(\"Absolute Magnitude(Mv)\")\nplt.title(\"H-R Diagram of Stars \")\nplt.legend((a,b,c,d,e,f),('Brown Dwarf','Red Dwarf','White Dwarf','Main Sequence','Supergiant','Hypergiant'))\nm = np.linspace(0,40000,100)\nn = (0*m) -7.5\nplt.plot(m,n,'--m')\nf = np.linspace(0,6000,100)\ng = (0*f)+15.4\nplt.plot(f,g,'--c')\nplt.gca().invert_xaxis()\nplt.gca().invert_yaxis()\nplt.show()\nprint(\"Accuracy = {} %\".format(val_acc*100))","c79f3654":"## Clearly H-R Diagram of Tested Stars matched with the H-R Diagram of the Predicted Stars\n## Thus,our Model learned effectively and hence can be applied to predict future data of stars\n## The best part is that it can predict star type of thousands of stars at once in just a few seconds  \n## This makes our model extremely valuable\n\n## N.B. : More the data(accurate data) provided , better it will predict.","73665c6d":"import pickle\n\ndata = np.hstack((x_f_train,y_f_train))    # Merging the label column (y_test) with the X_test  i.e the total training set\n\nwith open(\"6_class_model.pickle\",\"wb\") as f:\n    pickle.dump( data , f)","22e8e0eb":"######   End Of This Notebook . Thanks For Reading . Hope that u learned a bit of Astronomy and application of ML   ########","a74aacb8":"## Visualizing Correlation of columns","8be4a566":"## -- Visualizing Tested Stars","4b8f0148":"## Lower part of dataset","4d3602c4":"## -- Converting Data into Numpy Arrays ( For Sake of Convenience)","a5b7e164":"## -- Neccessary Modules","2c2a23fa":"## Finding Correlation of our dataset to check for redundant columns","a0b5f303":"## -- Splitting Data into Training And Testing Data","c5e416a7":"# Data Visualization","523f5a09":"## Saving Trained data in a pickle for future use","83be1637":"## -- Visualizing Whole Dataset","b12951b4":"## -- Loading dataset of stars from CSV","582e57ae":"## -- Visualizing Trained Stars","0437b809":"## -- Fitting Data into Model ","a761428d":"## -- Scaling Data for Better Modelling (Only x values)","c7a23644":"## Checking Stats about our dataset","78529bcd":"## -- Visualizing Predicted Stars","79c56f08":"## -- Using DNN Model for Training Data ","cd5b7142":"# Star Classification Using A Deep Neural Network (6 Class Classification)","ca16c9b0":"## -- Checking Trained Data For Overfitting and Underfitting over tested data","214b5715":"## Checking For NULL Values","d9b0806d":"## -- Predicting Star Type of Test Data from Trained Data "}}