{"cell_type":{"deb6c5cd":"code","7c592858":"code","ca771165":"code","50563184":"code","2f24ef6a":"code","de2f1415":"code","3bb2c48d":"code","73d99050":"code","980d92a6":"code","eec28f74":"code","83b19252":"code","2f4097b6":"code","732d100e":"code","6740eb7c":"code","efcf1fc5":"code","1aee1ca7":"code","476a3985":"code","d77d7732":"code","1f453b4d":"code","86f4a912":"code","643e6bda":"code","4d334f99":"code","ddc95ce0":"code","63a2e198":"code","e03446d7":"code","3dedf4dd":"code","d1a94070":"code","2df6bccb":"code","9bbefc63":"code","3ad4b685":"code","accfd1fd":"code","2c3015dc":"code","cf1315a1":"code","e5773bee":"code","7ffec741":"code","72a37e68":"code","cfb2d9b2":"code","5e528227":"code","8d0d89b6":"code","7726c5c7":"code","e5fc367f":"code","2f10e7f1":"code","b1629e1d":"markdown","e3e37f94":"markdown","8e8a5481":"markdown","3ba593ab":"markdown","eabd7a48":"markdown","f3119fe1":"markdown","4cffd88d":"markdown","be59c567":"markdown","444e6d33":"markdown","8e2ddb3c":"markdown","9f4ba0c7":"markdown","d91e1a91":"markdown","6afe330f":"markdown","9ab2c31f":"markdown","5d99c31b":"markdown","346faf62":"markdown","54781ae6":"markdown","3290e9f9":"markdown","5b083964":"markdown","e0ab101f":"markdown","1e9f4ba4":"markdown","cc2b3f61":"markdown","cf200f9e":"markdown","28acaca0":"markdown","ab62dbee":"markdown","c0274a40":"markdown","b7121df1":"markdown","01196868":"markdown","d0af1656":"markdown","db0cd969":"markdown","b59bc956":"markdown","1ea317d5":"markdown","8ae373f0":"markdown","acf3eca5":"markdown","60347580":"markdown","3cadd42f":"markdown","558b73cb":"markdown","abc1740a":"markdown","ca4d099b":"markdown","ce7ed076":"markdown","b8c1fa8d":"markdown","40d673ed":"markdown","54e8c23c":"markdown","1659c227":"markdown","5b481d19":"markdown","aa00ccf8":"markdown","95d9899b":"markdown","ae22f1ad":"markdown","7b1bd7d5":"markdown","82a505ae":"markdown","34e1585b":"markdown","66c3c343":"markdown","4b63b860":"markdown","5c6e7262":"markdown","4bf0566d":"markdown","a795e0e7":"markdown","70342722":"markdown","2145351b":"markdown","bb70a6d7":"markdown","a5269e23":"markdown","a0446fd2":"markdown","05a76e96":"markdown","dfb302e2":"markdown","9c4c6e68":"markdown","5fb18fdc":"markdown","9a7e28d4":"markdown","3dc046f0":"markdown","5f78dd85":"markdown","44821cbf":"markdown"},"source":{"deb6c5cd":"# Importing Libraries\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n# import matplotlib as plt\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches as mpatches\nimport matplotlib.cm as cm\n\n# Reading Dataset\nsupermarket_ram = pd.read_csv(\"..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv\")\nsupermarket_ram.head()\n\nsns.set_style(\"white\")\n# sns.set(font_scale=1)","7c592858":"supermarket_ram.info()","ca771165":"supermarket_ram.describe()","50563184":"nan_df = supermarket_ram[supermarket_ram.isna().any(axis=1)]\nnan_df.head(10)","2f24ef6a":"supermarket_ram['Month'] = supermarket_ram['Date'].str[0:1]\nsupermarket_ram.head()","de2f1415":"supermarket_ram['Month'] = supermarket_ram['Month'].astype(int)\nsupermarket_ram.describe()","3bb2c48d":"sales = supermarket_ram.groupby('Month').sum()\n\nfig, ax = plt.subplots()\nmonths = ['January', 'February', 'March']\nbars = ax.bar(months, sales['Total'], width = 0.3, color = '#2940d3') # color = '#2940d3'\n\n# bars[0].set_color('#ffc947')\n# bars[1].set_color('#2940d3')\n# bars[2].set_color('#ff96ad')\n\n\nax.set_title('Month-Wise Supermarket Sales', fontsize = 14)\nax.set_xticks(months)\nax.tick_params(axis='both', labelsize=12)\nax.set_ylabel('Total Sales', fontsize = 14)\n\n# Setting plot margins\nplt.subplots_adjust(left=0.01,\n                    bottom=0.1, \n                    right=1.3, \n                    top=1.5, \n                    wspace=0.9, \n                    hspace=0.9)\n\nplt.show()","73d99050":"supermarket_cities = [City for City, df in supermarket_ram.groupby('City')]\nsupermarket_cities","980d92a6":"# forming mandalay dataframe\nmandalay_filter = (supermarket_ram['City'] == 'Mandalay')\nmandalay_df = supermarket_ram[mandalay_filter].copy() # Taking a copy of df to avoid warnings----Python shell cannot recognize wheather mandalay_df is view or copy \nmandalay_month_df = mandalay_df.groupby('Month').sum()\nmandalay_month_df.head()","eec28f74":"# forming napy dataframe\nnapy_filter = (supermarket_ram['City'] == 'Naypyitaw')\nnapy_df = supermarket_ram[napy_filter].copy()\nnapy_month_df = napy_df.groupby('Month').sum()\nnapy_month_df.head()","83b19252":"# forming yan dataframe\nyan_filter = (supermarket_ram['City'] == 'Yangon')\nyan_df = supermarket_ram[yan_filter].copy()\nyan_month_df = yan_df.groupby('Month').sum()\nyan_month_df.head()","2f4097b6":"# Forming bar plot\nx = np.arange(3)\nmonth =  ['January', 'February', 'March']\nplt.bar(x-0.25, mandalay_month_df['Total'], width = 0.25, color = '#ffc947')\nplt.bar(x, napy_month_df['Total'], width = 0.25, color = '#2940d3')\nplt.bar(x+0.25, yan_month_df['Total'], width = 0.25, color = '#ff96ad')\n\n# Setting labels, title and legend\nplt.xticks(x, month, size = 14)\nplt.title('Comparison of Month-Wise Sales of Different Branches', fontsize=14)\nplt.ylabel('Total Sales', fontsize=14)\nplt.legend([\"Mandalay\", \"Naypyitaw\", \"Yangon\"], loc='upper right', bbox_to_anchor=(1.145,1), fontsize=13)  # Naypyitaw', 'Yangon\n\n# Setting plot margins\nplt.subplots_adjust(left=0.01,\n                    bottom=0.1, \n                    right=1.3, \n                    top=1.5, \n                    wspace=0.9, \n                    hspace=0.9)\n\nplt.show()","732d100e":"mandalay_sales = mandalay_df[\"Total\"].sum()\nmandalay_profit = mandalay_df['gross income'].sum()\n\nnapy_sales = napy_df[\"Total\"].sum()\nnapy_profit = napy_df['gross income'].sum()\n\nyan_sales = yan_df[\"Total\"].sum()\nyan_profit = yan_df['gross income'].sum()\n\ncity_sales = [mandalay_sales, napy_sales, yan_sales]\ncity_profit = [mandalay_profit, napy_profit, yan_profit]\ncity_names = [\"Mandalay\", \"Naypyitaw\", \"Yangon\"]\nprint(city_sales)\nprint(city_profit)","6740eb7c":"mandalay_filter = (mandalay_df['Customer type'] == 'Member')\nmandalay_member_df = mandalay_df[mandalay_filter].copy()\nmandalay_members = len(mandalay_member_df['Customer type'])\n\nnapy_filter = (napy_df['Customer type'] == 'Member')\nnapy_member_df = napy_df[napy_filter].copy()\nnapy_members = len(napy_member_df['Customer type'])\n\nyan_filter = (yan_df['Customer type'] == 'Member')\nyan_member_df = yan_df[yan_filter].copy()\nyan_members = len(yan_member_df['Customer type'])\n\ncity_members = [mandalay_members, napy_members, yan_members]\ncity_members","efcf1fc5":"fig, axs = plt.subplots(1, 3, figsize=(17, 17))\naxs[0].pie(city_sales, colors = ['#ffc947', '#2940d3', '#ff96ad'], radius=1.2, autopct = \"%0.1f%%\")\naxs[0].set_title('Total Sales Comparison of Different Cities', fontsize=14)\naxs[0].legend(city_names, loc = 'upper right', bbox_to_anchor=(1.25,1), fontsize=12)\naxs[0].set_aspect('equal')\n\naxs[1].pie(city_profit, colors = ['#ffc947', '#2940d3', '#ff96ad'], radius=1.2, autopct = \"%0.1f%%\")\naxs[1].set_title('Total Profit Comparison of Different Cities', fontsize=14)\naxs[1].legend(city_names, loc = 'upper right', bbox_to_anchor=(1.25,1), fontsize=12)\naxs[1].set_aspect('equal')\n\naxs[2].pie(city_members, colors = ['#ffc947', '#2940d3', '#ff96ad'], radius=1.2, autopct = \"%0.1f%%\")\naxs[2].set_title('Members Comparison of Different Cities', fontsize=14)\naxs[2].legend(city_names, loc = 'upper right', bbox_to_anchor=(1.25,1), fontsize=12)\naxs[2].set_aspect('equal')\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.4)\nplt.show()","1aee1ca7":"# Grouping dataframe \nsales = supermarket_ram.groupby('Product line').sum()\nsales['Unit price'] = sales['Unit price']\/sales['Quantity']\n\n# Correcting corresponding columns \nsales['gross margin percentage'] = sales['gross margin percentage']\/sales['Quantity'] \nsales['Rating'] = (sales['Rating'])*(len(sales['Rating'])\/len(supermarket_ram['Rating'])) \nsales.head(10)","476a3985":"# Declaring figure parameters\nproducts =  [Product for Product, df in supermarket_ram.groupby('Product line')]\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n# Plotting Bar Chart\nax1 = sns.barplot(x=products, y=sales['Total'], data = sales, palette='crest')\nax1.set_title('Sales of Different Products', fontsize = 16)\nax1.set_ylabel('Total Sales', fontsize=16)\nax1.tick_params(axis='x', rotation = 30)\nax1.set_xticklabels(products, fontsize=12)\nax1.tick_params(axis='y')\n\n\n# Plotting Line Charts\nax2 = ax1.twinx()\nax2 = sns.lineplot(x = products, y= sales['Unit price'], data=sales, color = 'r' ,lw=1.5, marker='o')  # '#ffc947', '#2940d3'\nax2.set(ylabel=None)\nax2.set(yticklabels=[])\n# ax2.tick_params(left=False)\nax2.set_yticks([])\n\nax3 = ax1.twinx()\nax3 = sns.lineplot(x = products, y= sales['gross margin percentage'], data=sales, color = 'black', lw=1.5, marker='o')\n\n\nax3.set(yticklabels=[])\nax3.set(ylabel=None)\nax3.set_yticks([])\n\nprice = mpatches.Patch(color='r')\nprofit = mpatches.Patch(color='black')\n\n# Defining Legend\nname = ['Unit Price', 'Profit(%)']\nax1.legend(labels=name, handles=[price, profit], loc=\"upper right\", bbox_to_anchor=(1.14, 1), fontsize=13)\n\nplt.show()","d77d7732":"fig, ax1 = plt.subplots(figsize=(10, 6))\n\n\n\n\nax1 = sns.barplot(x=products, y=sales['Rating'], data = sales, palette='crest')\nax1.set_title('Rating of Different Products', fontsize = 16)\nax1.set_ylabel('Unit Price', fontsize=16)\nax1.set_xticklabels(products, fontsize=12)\n\nax1.tick_params(axis='x', rotation = 30)\nax1.tick_params(axis='y')\n\nax3 = ax1.twinx()\nax3.set_ylabel('Unit price',  fontsize = 16)\nax3 = sns.lineplot(x = products, y= 'Unit price', data=sales, color = 'r', marker='o', lw=1.8)\nax3.tick_params(axis='y')\n\nplt.show()","1f453b4d":"customer_type_df = supermarket_ram.groupby('Customer type').sum()\nmember_sales = customer_type_df.iloc[0]['Unit price']\nnormal_sales = customer_type_df.iloc[1]['Unit price']\nmember_normal_sales = [member_sales, normal_sales]\nmember_normal_legend = ['Member', 'Normal']\ncustomer_type_df","86f4a912":"customer_gender_df = supermarket_ram.groupby('Gender').sum()\nfemale_sales = customer_gender_df.iloc[0]['Total']\nmale_sales = customer_gender_df.iloc[1]['Total']\nfemale_male_sales = [female_sales, male_sales]\nfemale_male_legend = ['Females', 'Males']\ncustomer_gender_df.head()","643e6bda":"fig, axs = plt.subplots(1, 2, figsize=(13, 13))\naxs[0].pie(member_normal_sales, colors = ['#ffc947', '#2940d3'], radius=1.2, autopct = \"%0.1f%%\")\naxs[0].set_title('Sales Comparison of Members and Normal Customers')\naxs[0].legend(member_normal_legend, loc = 'upper right')\naxs[0].set_aspect('equal')\n\naxs[1].pie(female_male_sales, colors = ['#ffc947', '#2940d3'], radius=1.2, autopct = \"%0.1f%%\")\naxs[1].set_title('Sales Comparison of Males and Females')\naxs[1].legend(female_male_legend, loc = 'upper right')\naxs[1].set_aspect('equal')\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.4)\nplt.show()","4d334f99":"supermarket_ram['Date'] =  pd.to_datetime(supermarket_ram['Date'])\nsupermarket_ram['Day'] = supermarket_ram['Date'].dt.day_name() # \"day_name()\" is the new command instead of \"day_name\"\nsupermarket_ram.head()","ddc95ce0":"daywise_df = supermarket_ram.groupby('Day').sum()\ndaywise_df = daywise_df.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']) \ndaywise_df.head(10)","63a2e198":"fig, ax1 = plt.subplots(figsize=(10, 6))\n\ndaywise_day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nax1 = sns.barplot(x=daywise_day, y=daywise_df['Total'], data = daywise_df, palette='crest')\nax1.set_title('Day-Wise Sales of Supermarket', size=16)\n\nax1.tick_params(axis='x')\nax1.tick_params(axis='y')\nax1.set_ylabel('Total Sales', fontsize=14)\nax1.set_xticklabels(daywise_day, fontsize=14)\nplt.show()","e03446d7":"member_filter = (supermarket_ram['Customer type'] == 'Member')\nmember_df = supermarket_ram[member_filter]\nmember_daywise_df = member_df.groupby('Day').sum()\nmember_daywise_df = member_daywise_df.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\nmember_daywise_df.head(7)","3dedf4dd":"nonmember_filter = (supermarket_ram['Customer type'] ==  'Normal')\nnonmember_df = supermarket_ram[nonmember_filter]\nnonmember_daywise_df = nonmember_df.groupby('Day').sum()\nnonmember_daywise_df = nonmember_daywise_df.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']) \nnonmember_daywise_df.head(7)","d1a94070":"day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nx = np.arange(7)\nplt.bar(x-0.2, nonmember_daywise_df['Total'], width = 0.4, color = '#ffc947')\nplt.bar(x+0.2, member_daywise_df['Total'], width = 0.4, color = '#2940d3')\nplt.xticks(x, day, fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.title('Sales Comparison of Members and Non-Members', fontsize = 14)\nplt.ylabel('Total Sales', fontsize = 14)\nplt.legend([\"Non-Members\", \"Members\"], loc = 'upper right', bbox_to_anchor=(1.2,1), fontsize=13)\n\nplt.subplots_adjust(left=0.01,\n                    bottom=0.1, \n                    right=1.3, \n                    top=1.2, \n                    wspace=0.9, \n                    hspace=0.9)\n\nplt.show()","2df6bccb":"female_filter = (supermarket_ram['Gender'] == 'Female')\nfemale_df = supermarket_ram[female_filter]\nfemale_df.head()","9bbefc63":"male_filter = (supermarket_ram['Gender'] == 'Male')\nmale_df = supermarket_ram[male_filter]\nmale_df.head()","3ad4b685":"female_daywise_df = female_df.groupby('Day').sum()\nfemale_daywise_df = female_daywise_df.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\nfemale_daywise_df.head(10)","accfd1fd":"male_daywise_df = male_df.groupby('Day').sum()\nmale_daywise_df = male_daywise_df.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\nmale_daywise_df.head(10)","2c3015dc":"x = np.arange(7)\nplt.bar(x-0.2, female_daywise_df['Total'], width = 0.4, color = '#ffc947')\nplt.bar(x+0.2, male_daywise_df['Total'], width = 0.4, color = '#2940d3')\nplt.xticks(x, day, size = 10, fontsize=13)\nplt.yticks(size = 10, fontsize=12)\nplt.title('Comparison of Day-Wise Sales of Males and Females', fontsize = 14)\nplt.ylabel('Total Sales', fontsize =14)\nplt.legend([\"Females\", \"Males\"], fontsize = 13)\nplt.subplots_adjust(left=0.01,\n                    bottom=0.1, \n                    right=1.3, \n                    top=1.2, \n                    wspace=0.9, \n                    hspace=0.9)\nplt.show()","cf1315a1":"female_member_filter = (female_df['Customer type'] == 'Member')\nfemale_member_df = female_df[female_member_filter]\ntotal_female_members = len(female_member_df)\n\nfemale_nonmember_filter = (female_df['Customer type'] == 'Normal')\nfemale_nonmember_df = female_df[female_nonmember_filter]\ntotal_female_nonmembers = len(female_nonmember_df)","e5773bee":"male_member_filter = (male_df['Customer type'] == 'Member')\nmale_member_df = male_df[male_member_filter]\ntotal_male_members = len(male_member_df)\n\nmale_nonmember_filter = (male_df['Customer type'] == 'Normal')\nmale_nonmember_df = male_df[male_nonmember_filter]\ntotal_male_nonmembers = len(male_nonmember_df)","7ffec741":"x = np.arange(2)\ncategories = ['Members', 'Non-Members']\nfemale_count = [total_female_members, total_female_nonmembers]\nmale_count = [total_male_members, total_male_nonmembers]\n\nplt.bar(x-0.1, female_count, width = 0.2, color = '#ffc947')\nplt.bar(x+0.1, male_count, width = 0.2, color = '#2940d3')\n\nplt.xticks(x, categories, size = 10, fontsize=14)\nplt.yticks(size = 10, fontsize=14)\nplt.title('Comparison of Memberships Among Males and Females', fontsize = 14)\nplt.ylabel('Total Customers', fontsize =14)\nplt.legend([\"Females\", \"Males\"], fontsize = 12, loc=\"upper right\", bbox_to_anchor=(1.15,1))\nplt.subplots_adjust(left=0.01,\n                    bottom=0.1, \n                    right=1, \n                    top=1.2, \n                    wspace=0.9, \n                    hspace=0.9)\nplt.show()","72a37e68":"supermarket_ram.head()","cfb2d9b2":"# 1. Electronics Accessories\nelectronic_filter = (supermarket_ram['Product line'] == 'Electronic accessories')\nproduct_electronic_df = supermarket_ram[electronic_filter]\n\nfemale_filter = (product_electronic_df['Gender'] == 'Female')\nproduct_electronic_female_df = product_electronic_df[female_filter]\ntotal_female_electronic_sales = product_electronic_female_df['Total'].sum()\nprint('total_female_electronic_sales: {}'.format(total_female_electronic_sales))\n\nmale_filter = (product_electronic_df['Gender'] == 'Male')\nproduct_electronic_male_df = product_electronic_df[male_filter]\ntotal_male_electronic_sales = product_electronic_male_df['Total'].sum()\nprint('total_male_electronic_sales: {}'.format(total_male_electronic_sales))\n\n\nmember_filter = (product_electronic_df['Customer type'] == 'Member')\nproduct_electronic_member_df = product_electronic_df[member_filter]\ntotal_member_electronic_sales = product_electronic_member_df['Total'].sum()\nprint('total_member_electronic_sales: {}'.format(total_member_electronic_sales))\n\nnonmember_filter = (product_electronic_df['Customer type'] == 'Normal')\nproduct_electronic_nonmember_df = product_electronic_df[nonmember_filter]\ntotal_nonmember_electronic_sales = product_electronic_nonmember_df['Total'].sum()\nprint('total_nonmember_electronic_sales: {}'.format(total_nonmember_electronic_sales))\n\n\n# 2. Fashion Accessories\nfashion_filter = (supermarket_ram['Product line'] == 'Fashion accessories')\nproduct_fashion_df = supermarket_ram[fashion_filter]\n\nfemale_filter = (product_fashion_df['Gender'] == 'Female')\nproduct_fashion_female_df = product_fashion_df[female_filter]\ntotal_female_fashion_sales = product_fashion_female_df['Total'].sum()\nprint('\\ntotal_female_fashion_sales: {}'.format(total_female_fashion_sales))\n\nmale_filter = (product_fashion_df['Gender'] == 'Male')\nproduct_fashion_male_df = product_fashion_df[male_filter]\ntotal_male_fashion_sales = product_fashion_male_df['Total'].sum()\nprint('total_male_fashion_sales: {}'.format(total_male_fashion_sales))\n\nmember_filter = (product_fashion_df['Customer type'] == 'Member')\nproduct_fashion_member_df = product_fashion_df[member_filter]\ntotal_member_fashion_sales = product_fashion_member_df['Total'].sum()\nprint('total_member_fashion_sales: {}'.format(total_member_fashion_sales))\n\nnonmember_filter = (product_fashion_df['Customer type'] == 'Normal')\nproduct_fashion_nonmember_df = product_fashion_df[nonmember_filter]\ntotal_nonmember_fashion_sales = product_fashion_nonmember_df['Total'].sum()\nprint('total_nonmember_fashion_sales: {}'.format(total_nonmember_fashion_sales))\n\n\n# 3. Food and beverages\nfood_filter = (supermarket_ram['Product line'] == 'Food and beverages')\nproduct_food_df = supermarket_ram[food_filter]\n\nfemale_filter = (product_food_df['Gender'] == 'Female')\nproduct_food_female_df = product_food_df[female_filter]\ntotal_female_food_sales = product_food_female_df['Total'].sum()\nprint('\\ntotal_female_food_sales: {}'.format(total_female_food_sales))\n\nmale_filter = (product_food_df['Gender'] == 'Male')\nproduct_food_male_df = product_food_df[male_filter]\ntotal_male_food_sales = product_food_male_df['Total'].sum()\nprint('total_male_food_sales: {}'.format(total_male_food_sales))\n\nmember_filter = (product_food_df['Customer type'] == 'Member')\nproduct_food_member_df = product_food_df[member_filter]\ntotal_member_food_sales = product_food_member_df['Total'].sum()\nprint('total_member_food_sales: {}'.format(total_member_food_sales))\n\nnonmember_filter = (product_food_df['Customer type'] == 'Normal')\nproduct_food_nonmember_df = product_food_df[nonmember_filter]\ntotal_nonmember_food_sales = product_food_nonmember_df['Total'].sum()\nprint('total_nonmember_food_sales: {}'.format(total_nonmember_food_sales))\n\n# 4. Health and beauty\nhealth_filter = (supermarket_ram['Product line'] == 'Health and beauty')\nproduct_health_df = supermarket_ram[health_filter]\n\nfemale_filter = (product_health_df['Gender'] == 'Female')\nproduct_health_female_df = product_health_df[female_filter]\ntotal_female_health_sales = product_health_female_df['Total'].sum()\nprint('\\ntotal_female_health_sales: {}'.format(total_female_health_sales))\n\nmale_filter = (product_health_df['Gender'] == 'Male')\nproduct_health_male_df = product_health_df[male_filter]\ntotal_male_health_sales = product_health_male_df['Total'].sum()\nprint('total_male_health_sales: {}'.format(total_male_health_sales))\n\nmember_filter = (product_health_df['Customer type'] == 'Member')\nproduct_health_member_df = product_health_df[member_filter]\ntotal_member_health_sales = product_health_member_df['Total'].sum()\nprint('total_member_health_sales: {}'.format(total_member_health_sales))\n\nnonmember_filter = (product_health_df['Customer type'] == 'Normal')\nproduct_health_nonmember_df = product_health_df[nonmember_filter]\ntotal_nonmember_health_sales = product_health_nonmember_df['Total'].sum()\nprint('total_nonmember_health_sales: {}'.format(total_nonmember_health_sales))\n\n\n# 5. Home and lifestyle\nhome_filter = (supermarket_ram['Product line'] == 'Home and lifestyle')\nproduct_home_df = supermarket_ram[home_filter]\n\nfemale_filter = (product_home_df['Gender'] == 'Female')\nproduct_home_female_df = product_home_df[female_filter]\ntotal_female_home_sales = product_home_female_df['Total'].sum()\nprint('\\ntotal_female_home_sales: {}'.format(total_female_home_sales))\n\nmale_filter = (product_home_df['Gender'] == 'Male')\nproduct_home_male_df = product_home_df[male_filter]\ntotal_male_home_sales = product_home_male_df['Total'].sum()\nprint('total_male_home_sales: {}'.format(total_male_home_sales))\n\nmember_filter = (product_home_df['Customer type'] == 'Member')\nproduct_home_member_df = product_home_df[member_filter]\ntotal_member_home_sales = product_home_member_df['Total'].sum()\nprint('total_member_home_sales: {}'.format(total_member_home_sales))\n\nnonmember_filter = (product_home_df['Customer type'] == 'Normal')\nproduct_home_nonmember_df = product_home_df[nonmember_filter]\ntotal_nonmember_home_sales = product_home_nonmember_df['Total'].sum()\nprint('total_nonmember_home_sales: {}'.format(total_nonmember_home_sales))\n\n# 6. Sports and travel\nsports_filter = (supermarket_ram['Product line'] == 'Sports and travel')\nproduct_sports_df = supermarket_ram[sports_filter]\n\nfemale_filter = (product_sports_df['Gender'] == 'Female')\nproduct_sports_female_df = product_sports_df[female_filter]\ntotal_female_sports_sales = product_sports_female_df['Total'].sum()\nprint('\\ntotal_female_sports_sales: {}'.format(total_female_sports_sales))\n\nmale_filter = (product_sports_df['Gender'] == 'Male')\nproduct_sports_male_df = product_sports_df[male_filter]\ntotal_male_sports_sales = product_sports_male_df['Total'].sum()\nprint('total_male_sports_sales: {}'.format(total_male_sports_sales))\n\nmember_filter = (product_sports_df['Customer type'] == 'Member')\nproduct_sports_member_df = product_sports_df[member_filter]\ntotal_member_sports_sales = product_sports_member_df['Total'].sum()\nprint('total_member_sports_sales: {}'.format(total_member_sports_sales))\n\nnonmember_filter = (product_sports_df['Customer type'] == 'Normal')\nproduct_sports_nonmember_df = product_sports_df[nonmember_filter]\ntotal_nonmember_sports_sales = product_sports_nonmember_df['Total'].sum()\nprint('total_nonmember_sports_sales: {}'.format(total_nonmember_sports_sales))","5e528227":"# Declaring plotting variables \nx = np.arange(6)\nfemale_product_sales = [total_female_electronic_sales, total_female_fashion_sales, total_female_food_sales, total_female_health_sales, total_female_home_sales, total_female_sports_sales]\nmale_product_sales = [total_male_electronic_sales, total_male_fashion_sales, total_male_food_sales, total_male_health_sales, total_male_home_sales, total_male_sports_sales]\n\nmember_product_sales = [total_member_electronic_sales, total_member_fashion_sales, total_member_food_sales, total_member_health_sales, total_member_home_sales, total_member_sports_sales]\nnonmember_product_sales = [total_nonmember_electronic_sales, total_nonmember_fashion_sales, total_nonmember_food_sales, total_nonmember_health_sales, total_nonmember_home_sales, total_nonmember_sports_sales]\n\nproducts = ['Electronic \\n accessories', 'Fashion \\n accessories', 'Food and \\n beverages', 'Health and \\n beauty', 'Home and \\n lifestyle', 'Sports and \\n travel']\n\nfig, ax = plt.subplots(1, 2, figsize=(16.5, 6.5))\n\n# Subplotting (1,1)\nax[0].bar(x-0.2, female_product_sales, width = 0.4, color = '#ffc947')\nax[0].bar(x+0.2, male_product_sales, width = 0.4, color = '#2940d3')\n\nax[0].set_xticks(x)\nax[0].set_xticklabels(products, fontsize=13, rotation = '0')\nax[0].set_title('Product Wise Sales of Females and Males', fontsize = 14)\nax[0].set_ylabel('Total Sales', fontsize =14)\nax[0].legend([\"Females\", \"Males\"], fontsize = 12)\n\n\n# Subplotting (1,2)\nax[1].bar(x-0.2, member_product_sales, width = 0.4, color = '#ffc947')\nax[1].bar(x+0.2, nonmember_product_sales, width = 0.4, color = '#2940d3')\n\nax[1].set_xticks(x)\nax[1].set_xticklabels(products, fontsize=13, rotation = '0')\nax[1].set_title('Product Wise Sales of Members and Non-Members', fontsize = 14)\nax[1].set_ylabel('Total Sales', fontsize =14)\nax[1].legend([\"Members\", \"Non-Members\"], fontsize = 12)\n\nfig.tight_layout()\nplt.show()","8d0d89b6":"supermarket_payment = [Payment for Payment, df in supermarket_ram.groupby('Payment')]\nsupermarket_payment","7726c5c7":"member_payment_df = member_df.groupby('Payment').sum()\nmember_payment = member_payment_df['Total']\n\nnonmember_payment_df = nonmember_df.groupby('Payment').sum()\nnonmember_payment = nonmember_payment_df['Total']\n\npayment_legends = ['Cash', 'Credit card', 'Ewallet']","e5fc367f":"female_payment_df = female_df.groupby('Payment').sum()\nfemale_payment = female_payment_df['Total']\n\nmale_payment_df = male_df.groupby('Payment').sum()\nmale_payment = male_payment_df['Total']\n\nfemale_payment_df","2f10e7f1":"x = np.arange(3)\nfig, ax = plt.subplots(1, 2, figsize=(14.5, 5.5))\nax[0].bar(x-0.2, member_payment, width = 0.4, color = '#ffc947')\nax[0].bar(x+0.2, nonmember_payment, width = 0.4, color = '#2940d3')\nax[0].set_xticks(x)\nax[0].set_xticklabels(supermarket_payment, fontsize=12)\nax[0].set_title('Comparison of Payment of Members and Non-Members', fontsize = 14)\nax[0].set_ylabel('Total Sales', fontsize =14)\nax[0].legend([\"Members\", 'Non-Members'], fontsize = 12, loc = \"upper right\", bbox_to_anchor=(1.24,1))\n\nax[1].bar(x-0.2, female_payment, width = 0.4, color = '#ffc947')\nax[1].bar(x+0.2, male_payment, width = 0.4, color = '#2940d3')\nax[1].set_xticks(x)\nax[1].set_xticklabels(supermarket_payment, fontsize=12)\nax[1].set_title('Comparison of Payment of Males and Females', fontsize = 14)\nax[1].set_ylabel('Total Sales', fontsize =14)\nax[1].legend([\"Females\", 'Males'], fontsize = 12, loc=\"upper right\",bbox_to_anchor=(1.15,1))\nfig.tight_layout()\n\nplt.show()","b1629e1d":"#### **# Result:** \n* Sales and profit of Napyitaw is slightly larger. \n* All the branches have almost same members.","e3e37f94":"### **1.1 Analysing Memberships Among Customer Genders** ","8e8a5481":"# **Question #1: In which month most of the sales occur?**","3ba593ab":"#### **B. Column-Wise Statistical Description of Dataframe**","eabd7a48":"#### **# Result (Based on Membership):**\n* \"Fashion Accessories\" \"Health and Beauty\", \"Home and Lifestyle\" and \"Sports and Travel\" items are almost equally purchased by Members and Non-Members.\n* Non-Members contribute larger amount of sales from \"Electronic Accessories\".\n* Members contribute larger amount of sales from \"Food and Beverages\".","f3119fe1":"#### **C. Plotting Month-Wise Sales**","4cffd88d":"#### **# Result:** \n* On tuesday and sunday, member purchases is larger. On these days, supermarket should focus on member's segment.\n* On thursday, non-member purchases is larger. On this day, supermarket has a better chance to increase memberships.  ","be59c567":"# **Question #2: How is the overall performance of different branches?**","444e6d33":"#### **A. Obtaining Sales of Members and Non-Members**","8e2ddb3c":"#### **C. Plotting the Performance Metrics for all Supermarket Branches** ","9f4ba0c7":"#### **A. Adding Day of the Week Column**","d91e1a91":"# **Question #4: How are the ratings of different product lines? Is there a relation of ratings with prices?** ","6afe330f":"#### **A. Column-Wise Structure of Dataframe**","9ab2c31f":"# **Question #3: What were the most sold items? What is the most profitable product line?**","5d99c31b":"## **1.2 Month-Wise Sales of Different Branches**","346faf62":"#### **A. Filtering Female Customers and Forming their Dataframe**","54781ae6":"## **1.1 Month-Wise Sales of Supermarket**","3290e9f9":"# **# Question #5: Who are the leading buyers?**","5b083964":"#### **C. Plotting Membership and Non-Membership Count for Males and Females**","e0ab101f":"#### **# Result:** \n* From January, supermarket sales have slightly decreased. \n* February receives least sales. This can be because February is the shortest month. \n* Month-wise change in sales not very significant. ","1e9f4ba4":"# **Question #9: Which products are more purchased by different customer segments?**","cc2b3f61":"#### **A. Filtering and Forming the Data Frame for Members** ","cf200f9e":"#### **B. Plotting the Sales of Different Product Lines and Representing Corresponding Prices and Profits**","28acaca0":"#### **A. Obtaining Total Sales & Total Profit of Different Branches**","ab62dbee":"#### **C. Plotting Day-Wise Sales Comparison of Members and Non-Members** ","c0274a40":"#### A. Plotting Ratings and Corresponding Prices   (A sectio pending)","b7121df1":"#### **C. Plotting Sales for Different Branches**","01196868":"#### **B. Converting the \"Month\" Column to Integer (from string)**","d0af1656":"#### **# Result:** \n1. Tuesday and saturday have larger sale in the week.\n2. Monday has the least sale in the week. ","db0cd969":"#### **A. Adding Month Column**","b59bc956":"#### **B. Filtering Male Customers and Forming their Dataframe**","1ea317d5":"#### **A. Finding Different Types of Payments (Not Given in the Dataset)** ","8ae373f0":"#### **B. Summing the Total Sales According to the Day of the Week**","acf3eca5":"#### **A. Grouping Dataframe According to the Product Line**","60347580":"#### **C. Representing Female Dataframe on Weekday Basis (Day-Wise)**  ","3cadd42f":"#### **D. Plotting Payment Preferences for Different Customer Segments**","558b73cb":"#### **C. Plotting the Sales**","abc1740a":"#### **# Result:** \n* The sales of different products are similar. \n* Profit is approximately proportional to the price. \n* Profit earned from fashion accessories and food and beverages is significantly larger. ","ca4d099b":"#### **C. Looking for any NaNs**","ce7ed076":"#### **# Result (Based on Gender):** \n* All payment methods are significantly used.\n* Cash and credit card payments methods are more used by females. \n* Ewallet payment is almost equally used by both the genders  ","b8c1fa8d":"#### **# Result (Based on Memberships):** \n* All payment methods are significantly used.\n* Cash payments methods are almost equally used among members and non-members. \n* Members use more credit card payments.\n* Non-members use slightly larger e-wallet payments. ","40d673ed":"#### **# Result:** \n* Sales of the branches is similar. \n* From January, the sales have slightly decreased for each branch. \n* Mandalay has most consistent sales.","54e8c23c":"#### **E. Plotting Male and Female Sales (Day-Wise)**","1659c227":"# **Question #10: What is the preferred payment for different customers?**","5b481d19":"# **Question #8: Which customer segment prefer membership?**","aa00ccf8":"#### **A. Forming Member and Non-Member Dataframes for Female Customers**","95d9899b":"#### **# Result:** \n* Sales from males and females is similar. Families seem to do most of the purchases. \n* Exceptionally, on tuesday number of female customers is significantly larger. Therefore; on tuesday, supermarket should focus more on ladies segment.  \n* Wednesday and thursday have more male customers. Therefore; on these days, supermarket should focus on men segment.","ae22f1ad":"#### **B. Obtaining Sales of Males and Females**","7b1bd7d5":"#### **B. Forming Member and Non-Member Dataframes for Male Customers**","82a505ae":"# **Data Description & Structure**","34e1585b":"#### **# Result (Based on Gender):**\n* \"Electronic Accessories\" and \"Sports and Travel\" items are almost equally purchased by males and females.\n* Female customers contribute larger amount of sales from \"Fashion Accessories\", \"Food and Beverages\" and \"Home and Lifestyle\".\n* Male customers contribute larger amount of sales from \"Health adn Beauty\".","66c3c343":"#### **B. Obtaining Number of Members for each Supermarket Branch**","4b63b860":"### **1.1. Sales Analysis Based on Membership**","5c6e7262":"* **Invoice:** Represents the order ID.\n* **Branch:** Branch of the supermarket.\n* **City:** City of the supermarket. (**Note:** Branch and city represent the same information.) \n* **Customer Type:** Type of customer (member or non-member).\n* **Product line:** Type of the product category.\n* **Unit Price:** Price of single unit.\n* **Quantity:** Quantity of ordered product.\n* **Tax 5%:** Tax on order.\n* **Total:** Total value of order.\n* **Date:** Order date.\n* **Time:** Time of day for order.\n* **Payment:** Mode of payment.\n* **cogs:** Cost of order. \n* **gross margin percentage:** Profit margin of the order.\n* **gross income:** Total profit of the order.\n* **Rating:** Customer rating received.\n","4bf0566d":"#### **B. Filtering and forming the dataframe for Non-Members (Normal Customers)**","a795e0e7":"# **Importing Libraries and Dataset**","70342722":"### **1.2 Sales Analysis Based on Gender** ","2145351b":"#### **D. Representing Male Dataframe on Weekday Basis (Day-Wise)**  ","bb70a6d7":"#### **A. Finding the Supermarket Braches (City-Wise)** ","a5269e23":"#### **C. Plotting the Sales of Respective Customer Segments**","a0446fd2":"#### **# Result:**\n* There is a slight difference between female and male memberships.\n* The difference between male and female non-members is also small.\n* Overall, female customers prefer memberships slightly more. ","05a76e96":"#### # **Result:** \n* The sale from members and non-members is almost same.\n* The sale from female customers is slightly more than the male customers. ","dfb302e2":"#### **C. Forming Dataset for Females and Males**","9c4c6e68":"#### **B. Forming Dataset for Members and Non-Members**","5fb18fdc":"#### **A. Forming Product Wise Dataframes**","9a7e28d4":"#### **# Result:** Products with smaller prices tend to get slightly lower ratings.","3dc046f0":"#### **B. Filtering the Cities and Forming their Individual Data Frames**    ","5f78dd85":"# **Question #6: Which days of the week have most sales?** ","44821cbf":"# **Question #7:  How different customers prefer visiting the supermarket?** "}}