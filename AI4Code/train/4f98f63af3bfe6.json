{"cell_type":{"aa2419af":"code","be587832":"code","d8e1dd03":"code","6f0a1aca":"code","4046b737":"code","e02f1103":"code","da10094c":"code","cea03584":"code","eb5a5d20":"code","0fb91526":"code","22ee4e22":"code","a45a99fa":"code","83476da8":"markdown","9c1a5f2a":"markdown","178ac2ae":"markdown","7e77b55b":"markdown","2523394f":"markdown","60b10e09":"markdown","44d32619":"markdown","f43a63a4":"markdown","da502069":"markdown","8ac6a130":"markdown","6af7f16c":"markdown"},"source":{"aa2419af":"%%time\nimport pandas as pd\nimport numpy as np\nimport gc\nimport os\nimport random\nimport glob\nfrom tqdm import tqdm\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nfrom matplotlib_venn import venn2\n%matplotlib inline\n\ninputPath = '\/kaggle\/input\/used-car-price-forecasting\/'\ntrain = pd.read_csv(inputPath + 'train.csv')\ntest = pd.read_csv(inputPath + 'test.csv')\ntrain['flag'] = 'train'\ntest['flag'] = 'test'\n\ndf = pd.concat([train,test],axis=0)\ndel train,test\ngc.collect()","be587832":"df.describe()","d8e1dd03":"%%time\n# fillna with most frequent value\ndf['year'].fillna(df['year'].mode()[0], inplace=True)\n\n# fillna with new category\ndf['model'] = df['model'].fillna('nan')\n\n# fillna with new category\ndf['condition'] = df['condition'].fillna('nan')\n\n# fillna with new value\ndf['cylinders'] = df['cylinders'].fillna('-2 cylinders')\ndf['cylinders'] = df['cylinders'].map(lambda x:x.replace('other','-1 cylinders'))\n\n# fillna with new category\ndf['fuel'] = df['fuel'].fillna('nan')\n\n# fillna with new value\ndf['odometer'] = df['odometer'].fillna('-1')\ndf['odometer'] = df['odometer'].astype(float)\n\n# fillna with new category\ndf['title_status'] = df['title_status'].fillna('nan')\n\n# fillna with new category\ndf['transmission'] = df['transmission'].fillna('nan')\n\n# fillna with new category\ndf['vin'] = df['vin'].fillna('nan')\n\n# fillna with new category\ndf['drive'] = df['drive'].fillna('nan')\n\n# fillna with new category\ndf['size'] = df['size'].fillna('nan')\n\n# fillna with new category\ndf['type'] = df['type'].fillna('nan')\n\n# fillna with new category\ndf['paint_color'] = df['paint_color'].fillna('nan')","6f0a1aca":"%%time\ndf['cylinders'] = df['cylinders'].map(lambda x:x.split(' ')[0])\ndf['cylinders'] = df['cylinders'].astype(int)","4046b737":"%%time\ndf = pd.get_dummies(df, columns=['paint_color'])","e02f1103":"%%time\nfor c in ['region','manufacturer','model','condition','fuel','title_status','transmission', 'vin', 'drive', 'size', 'type', 'state']:\n    lbl = LabelEncoder()\n    df[c] = lbl.fit_transform(df[c].astype(str))","da10094c":"%%time\nfor c in ['region','manufacturer','model','condition','fuel','title_status','transmission', 'vin', 'drive', 'size', 'type', 'state']:\n    df['count_' + c] = df.groupby([c])['flag'].transform('count')","cea03584":"%%time\ndf['mean_manufacturer_odometer'] = df.groupby(['manufacturer'])['odometer'].transform('mean')\ndf['std_manufacturer_odometer'] = df.groupby(['manufacturer'])['odometer'].transform('std')\ndf['max_manufacturer_odometer'] = df.groupby(['manufacturer'])['odometer'].transform('max')\ndf['min_manufacturer_odometer'] = df.groupby(['manufacturer'])['odometer'].transform('min')\ndf['maxmin_manufacturer_odometer'] = df['max_manufacturer_odometer'] - df['min_manufacturer_odometer']","eb5a5d20":"%%time\ndf['num_chars'] = df['description'].apply(len) \ndf['num_words'] = df['description'].apply(lambda x: len(x.split()))\ndf['num_unique_words'] = df['description'].apply(lambda x: len(set(w for w in x.split())))","0fb91526":"%%time\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\ndef rmse(y_true, y_pred):\n    return (mean_squared_error(y_true, y_pred))** .5\n\ntrain_df = df[df['flag']=='train']\ntrain_df['price'] = np.log1p(train_df['price'])\ntest_df = df[df['flag']=='test']\ndel df\ngc.collect()\n\ndrop_features = ['id', 'price', 'description', 'flag']\nfeatures = [f for f in train_df.columns if f not in drop_features]\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(train_df[features], train_df['price'], test_size=0.2, random_state=1,stratify=train_df['manufacturer'])\nmodel = RandomForestRegressor(n_estimators=50,max_depth=10,random_state=1,verbose=1,n_jobs=-1)\nmodel.fit(train_x, train_y)\nvalid_preds = model.predict(valid_x)\nprint('Valid RMSE Score:', rmse(valid_y, valid_preds))","22ee4e22":"importances = model.feature_importances_\nindices = np.argsort(importances)[-20:]\nplt.figure(figsize=(20, 10))\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","a45a99fa":"%%time\ntest_preds = model.predict(test_df[features])\ntest_df['price'] = np.expm1(test_preds)\ntest_df[['id','price']].to_csv('submission.csv',index=False)","83476da8":"# One Hot Encoding","9c1a5f2a":"# Count Encoding","178ac2ae":"# Feature Importance","7e77b55b":"# Aggregation","2523394f":"# Training","60b10e09":"# Label Encoding","44d32619":"# Ordinal Encoding","f43a63a4":"# baseline","da502069":"# Text Count","8ac6a130":"# Filling Missing Values","6af7f16c":"# Submission"}}