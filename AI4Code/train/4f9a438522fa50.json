{"cell_type":{"591a2a62":"code","71774ea9":"code","2bbc8c0b":"code","b5db7b66":"code","f54b85e5":"code","4c5c97fc":"code","2b21a8fc":"code","300c554c":"code","8471c243":"code","bfddd0c7":"code","43a12a7d":"code","995c39ce":"code","f0ee5d64":"code","5ff06bfb":"code","c84d0f6d":"code","2bace692":"code","2e8c8499":"code","1f84f700":"code","4c63536a":"code","22858fdd":"code","5764be8f":"code","22fe5483":"code","2c5e9138":"code","0a0bf103":"code","0daa9ad8":"code","2731d358":"code","96836a5a":"code","f6a3f62b":"code","28232f79":"code","370798a8":"code","a2ae4b46":"code","d6fe1f95":"code","ee503e0a":"code","f295df00":"code","003800e4":"code","eb30b260":"code","059867c5":"code","9f8eecc5":"code","ed1b2527":"code","472753f8":"code","1a7adf34":"code","2a45752b":"code","107173aa":"code","32e9941d":"code","d16f5b14":"code","9ae9fa1a":"code","d12eb15f":"code","1ab20360":"code","f1d2ad6f":"code","ded358c3":"code","cc09e6a5":"code","7e4c5f20":"code","06750d20":"code","cebd8bff":"code","92ddea73":"code","4bfbac63":"code","6a45ad45":"code","094f28ea":"code","0b71b9c1":"code","2e2f0290":"code","d2e9f4f5":"code","355fe3bd":"code","abbcffec":"code","6e6be1aa":"code","76de93e4":"code","bf14f322":"code","1ad5f0ba":"markdown","4ac891c5":"markdown","76340b99":"markdown","237c2769":"markdown","6c4dff06":"markdown","1ec176a7":"markdown","87540671":"markdown","5fa4dfdc":"markdown","224eb917":"markdown","83fa41c0":"markdown","1ec2940d":"markdown","d6cb6d2b":"markdown","4461f907":"markdown","2f7e7101":"markdown","b6c98d8e":"markdown","68b9da31":"markdown","ced3074e":"markdown","f503e383":"markdown","25ad0da3":"markdown","64eb0342":"markdown","89837c96":"markdown","3fe6a87d":"markdown","2ab256ce":"markdown","b4749947":"markdown","b45fb892":"markdown","ce9e04af":"markdown","ff151518":"markdown","fa06d96a":"markdown","0162f1fe":"markdown","41b0ba99":"markdown","7e48f1ed":"markdown","93515770":"markdown","4bf80e54":"markdown","76e9ef7c":"markdown","8a103b20":"markdown","6c4f2898":"markdown","4a6b7df6":"markdown","91945d1d":"markdown","b799cb89":"markdown","05b46648":"markdown","5eeea6ea":"markdown","59421596":"markdown","5ee235d7":"markdown","2d052e7f":"markdown","65f67fc5":"markdown","3be2c8de":"markdown","fef99564":"markdown","e3f29d96":"markdown","c218be89":"markdown","f461a064":"markdown","94987782":"markdown","ce35190a":"markdown","d73371ac":"markdown","9dbe5e2d":"markdown","1c8d361c":"markdown","871a3395":"markdown","282da956":"markdown","9cb3921e":"markdown","82f87b34":"markdown","bc3039a9":"markdown","4d36f431":"markdown","9879a989":"markdown","1f8ff603":"markdown"},"source":{"591a2a62":"import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\nimport plotly.express as px\nfrom datetime import datetime as dt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n\n\nNoAnsString='.NoAns'\n# \npredf = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv',low_memory=False).fillna(NoAnsString)\n# predf = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv').fillna(NoAnsString)\nquestiontext=predf.iloc[[0]]\n\nqt=questiontext.to_dict()\n# print(qt)\n\ndf=predf.drop(index=0)","71774ea9":"df.loc[(df.Q40_Part_9 != NoAnsString),'Q40_Part_9'] ='Certification'\ndf.loc[(df.Q40_Part_10 != NoAnsString),'Q40_Part_10'] ='University'\n\ndf.loc[(df.Q13 == 'Once'),'Q13']                ='a             Once'\ndf.loc[(df.Q13 == '2-5 times'),'Q13']           ='b             2 - 5 times'\ndf.loc[(df.Q13 == '6-25 times'),'Q13']          ='c             6 - 25 times'\ndf.loc[(df.Q13 == 'More than 25 times'),'Q13']  ='d             More than 25 times'\n\ndf.loc[(df.Q4 == 'No formal education past high school'),'Q4']                              ='a            Finished high school'\ndf.loc[(df.Q4 == 'Some college\/university study without earning a bachelor\u2019s degree'),'Q4'] ='b           Some college\/uni '\ndf.loc[(df.Q4 == 'Bachelor\u2019s degree'),'Q4']                                                 ='c           Bachelor\u2019s degree'\ndf.loc[(df.Q4 == 'Master\u2019s degree'),'Q4']                                                   ='d           Master\u2019s degree'\ndf.loc[(df.Q4 == 'Doctoral degree'),'Q4']                                                   ='e           Doctoral degree'\ndf.loc[(df.Q4 == 'Professional doctorate'),'Q4']                                            ='f           Professional doctorate'\n\ndf.loc[(df.Q6 == '< 1 year'),'Q6']     ='a         Under 1 year'\ndf.loc[(df.Q6 == '1-3 years'),'Q6']    ='b          1 - 3 years'\ndf.loc[(df.Q6 == '3-5 years'),'Q6']    ='c          3 - 5 years'\ndf.loc[(df.Q6 == '5-10 years'),'Q6']   ='d         5 - 10 years'\ndf.loc[(df.Q6 == '10-20 years'),'Q6']  ='e        10 - 19 years'\ndf.loc[(df.Q6 == '20+ years'),'Q6']    ='f           20 or more'\ndf.loc[(df.Q6 == 'I have never written code'),'Q6']    ='g  I have never written code'\n\ndf.loc[(df.Q15 == 'Under 1 year'),'Q15']                          ='a             Under 1 year'\ndf.loc[(df.Q15 == '1-2 years'),'Q15']                             ='b              1 - 2 years'\ndf.loc[(df.Q15 == '2-3 years'),'Q15']                             ='c              2 - 3 years'\ndf.loc[(df.Q15 == '3-4 years'),'Q15']                             ='d              3 - 4 years'\ndf.loc[(df.Q15 == '4-5 years'),'Q15']                             ='e              4 - 5 years'\ndf.loc[(df.Q15 == '5-10 years'),'Q15']                            ='f             5 - 10 years'\ndf.loc[(df.Q15 == '10-20 years'),'Q15']                           ='g            10 - 19 years'\ndf.loc[(df.Q15 == '20 or more years'),'Q15']                      ='h                20 or more years'\ndf.loc[(df.Q15 == 'I do not use machine learning methods'),'Q15'] ='i            Do not use ML methods'\n\ndf.loc[(df.Q21 == '0-49 employees'),'Q21']           ='a                     0-49 employees'\ndf.loc[(df.Q21 == '50-249 employees'),'Q21']         ='b                   50-249 employees'\ndf.loc[(df.Q21 == '250-999 employees'),'Q21']        ='c                  250-999 employees'\ndf.loc[(df.Q21 == '1000-9,999 employees'),'Q21']     ='d               1000-9,999 employees'\ndf.loc[(df.Q21 == '10,000 or more employees'),'Q21'] ='e           10,000 or more employees'\n\ndf.loc[(df.Q22 == '0'),'Q22']           ='a                 0'\ndf.loc[(df.Q22 == '1-2'),'Q22']         ='b             1 - 2'\ndf.loc[(df.Q22 == '3-4'),'Q22']         ='c             3 - 4'\ndf.loc[(df.Q22 == '5-9'),'Q22']         ='d             5 - 9'\ndf.loc[(df.Q22 == '10-14'),'Q22']       ='e           10 - 14'\ndf.loc[(df.Q22 == '15-19'),'Q22']       ='f           15 - 19'\ndf.loc[(df.Q22 == '20+'),'Q22']         ='g         20 people'\n\ndf.loc[(df.Q26 == '$0'),'Q26']                      ='a         $0'\ndf.loc[(df.Q26 == '$1-99'),'Q26']                   ='b         $1 - $99'\ndf.loc[(df.Q26 == '$100-$999'),'Q26']               ='c         $100 - $999'\ndf.loc[(df.Q26 == '$1000-$9,999'),'Q26']             ='d         $1,000 - $9,000'\ndf.loc[(df.Q26 == '$10,000-$99,999'),'Q26']         ='e         $10,000-$99,999'\ndf.loc[(df.Q26 == '$100,000 or more ($USD)'),'Q26'] ='f         $100,000 or more'\n\n\n\ndf.loc[(df.Q25 == '$0-999'),'Q25']           ='a        $ 0 -$999'\ndf.loc[(df.Q25 == '1,000-1,999'),'Q25']      ='b        $ 1,000 - $1,999'\ndf.loc[(df.Q25 == '2,000-2,999'),'Q25']      ='c        $ 2,000 - $2,999'\ndf.loc[(df.Q25 == '3,000-3,999'),'Q25']      ='d        $ 3,000 - $3,999'\ndf.loc[(df.Q25 == '4,000-4,999'),'Q25']      ='e        $ 4,000 - $4,999'\ndf.loc[(df.Q25 == '5,000-7,499'),'Q25']      ='f        $ 5,000 - $7,499'\n\ndf.loc[(df.Q25 == '7,500-9,999'),'Q25']      ='g        $ 7,500 - $9,999'\ndf.loc[(df.Q25 == '10,000-14,999'),'Q25']    ='h        $10,000 - $14,999'\ndf.loc[(df.Q25 == '15,000-19,999'),'Q25']    ='i        $15,000 - $19,999'\ndf.loc[(df.Q25 == '20,000-24,999'),'Q25']    ='j        $20,000 - $24,999'\ndf.loc[(df.Q25 == '25,000-29,999'),'Q25']    ='k        $25,000 - $29,999'\ndf.loc[(df.Q25 == '30,000-39,999'),'Q25']    ='l        $30,000 - $39,999'\n\ndf.loc[(df.Q25 == '40,000-49,999'),'Q25']    ='m        $40,000 - $49,999'\ndf.loc[(df.Q25 == '50,000-59,999'),'Q25']    ='n        $50,000 - $59,999'\ndf.loc[(df.Q25 == '60,000-69,999'),'Q25']    ='o        $60,000 - $69,999'\ndf.loc[(df.Q25 == '70,000-79,999'),'Q25']    ='p        $70,000 - $79,999'\ndf.loc[(df.Q25 == '80,000-89,999'),'Q25']    ='q        $80,000 - $89,999'\ndf.loc[(df.Q25 == '90,000-99,999'),'Q25']    ='r        $90,000 - $99,999'\n\ndf.loc[(df.Q25 == '100,000-124,999'),'Q25']  ='s       $100,000 - $124,999'\ndf.loc[(df.Q25 == '125,000-149,999'),'Q25']  ='t       $125,000 - $149,999'\ndf.loc[(df.Q25 == '150,000-199,999'),'Q25']  ='u       $150,000 - $199,999'\ndf.loc[(df.Q25 == '200,000-249,999'),'Q25']  ='v       $200,000 - $249,999'\ndf.loc[(df.Q25 == '250,000-299,999'),'Q25']  ='w       $250,000 - $299,999'\ndf.loc[(df.Q25 == '300,000-499,999'),'Q25']  ='x       $300,000 - $499,999'\ndf.loc[(df.Q25 == '$500,000-999,999'),'Q25'] ='y       $500,000 - $999,999'\ndf.loc[(df.Q25 == '>$1,000,000'),'Q25']      ='z        $1,000,000 or more'\n\n\n# Rename first variable\nif \"Duration\" not in df.columns:\n        df.rename(columns = {'Time from Start to Finish (seconds)':'Duration'}, inplace = True)\n","2bbc8c0b":"def getTargetCols(df,stem):\n    # df=df[0:100]\n    cols=[]\n    for coll in df.columns:\n        if coll.startswith(stem):\n            cols.append(coll)\n    col_index=[df.columns.get_loc(colllee) for colllee in cols]\n    rowindex=[]\n    for i,resp in df.iterrows():\n        b=[]\n        for col in col_index:\n            if resp[col] != NoAnsString:\n                b.append(resp[col])\n        if len(b)>0:\n            rowindex.append(i-1)\n    return rowindex\n\nri=getTargetCols(df,'Q42')\n\ncompletes = df.iloc[ri]\n\ndf=completes #[ : 200]\n# print(len(completes))\n","b5db7b66":"quesTextDict={'Q7':'Q7 Regularly used language',\n'Q9':'Q9 Regularly used IDE',\n'Q10':'Q10 Regularly used NoteBook',\n'Q12':'Q12 Regularly used specialized Hardware',\n'Q14':'Q14 Regularly used Viz Libraries',\n'Q16':'Q16 Regularly used ML frameworks',\n'Q17':'Q17 Regularly used ML algos',\n'Q18':'Q18 Regularly used Vision methods',\n'Q19':'Q19 Regularly used NLP methods',\n'Q24':'Q24 Important part of work',\n'Q27_A':'Q27 A. Regularly use - Computing platforms',\n'Q29_A':'Q29 A. Regularly use - Cloud Services',\n'Q30_A':'Q30 A. Regularly use - Data storage',\n'Q31_A':'Q31 A. Regularly use - Managed Machine Learing products',\n'Q32_A':'Q32 A. Regularly use - Big Data Products',\n'Q34_A':'Q34 A. Regularly use - BI tools',\n'Q36_A':'Q36 A. Regularly use - Any AutoML tools',\n'Q37_A':'Q37 A. Regularly use - AutoML platforms',\n'Q38_A':'Q38 A. Regularly use - Tool to manage ML',\n'Q39':'Q39 Where deployed \/ published to',\n'Q40':'Q40 Platforms on which you have done a DS course',\n'Q42':'Q42 Fav Media source',\n'Q27_B':'Q27 B. Planned take up - Computing platforms',\n'Q29_B':'Q29 B. Planned take up - Cloud Services',\n'Q30_B':'Q30 B. Planned take up - Data storage',\n'Q31_B':'Q31 B. Planned take up - Managed Machine Learing products',\n'Q32_B':'Q32 B. Planned take up - Big Data Products',\n'Q34_B':'Q34 B. Planned take up - BI tools',\n'Q36_B':'Q36 B. Planned take up - Any AutoML tools',\n'Q37_B':'Q37 B. Planned take up - AutoML platforms',\n'Q38_B':'Q38 B. Planned take up - Tool to manage ML',\n'Q1':'Q1 Age Groups',\n'Q2':'Q2 Gender',\n'Q3':'Q3 Country',\n'Q4':'Q4 Formal EDU',\n'Q5':'Q5 Title',\n'Q6':'Q6 Length of writing code \/ programming',\n'Q8':'Q8 Recommended language for aspiring',\n'Q11':'Q11 Most often used platform',\n'Q13':'Q13 Frequency of using TPU',\n'Q15':'Q15 Years using ML methods',\n'Q20':'Q20 Industry worked in',\n'Q21':'Q21 Company size',\n'Q22':'Q22 Data Science people',\n'Q23':'Q23 Current ML methods used',\n'Q25':'Q25 Current Salary US$',\n'Q26':'Q26 Spend on Cloud or ML',\n'Q28':'Q28 Most enjoyable platform',\n'Q33':'Q33 Most often used Data products',\n'Q35':'Q35 BI tool used most often',\n'Q41':'Q41 Primary Tool to analyse data',\n}","f54b85e5":"def makeFilterSeries():\n    FSeries=[]\n    for i, resp in df.iterrows():\n        if not resp['Q5'] in ['Currently not employed', 'Student']:\n            FSeries.append('Professional')\n        else:\n            FSeries.append(NoAnsString)\n    return FSeries\nFilterData=makeFilterSeries()\n\ndef makeBannerSeries():\n    bannercol=[]\n    for i, resp in df.iterrows():\n        bannerentry=['.Total']\n        if resp['Q40_Part_3'] == 'Kaggle Learn Courses':\n            bannerentry.append('Courses - Kaggle Learn')\n        else:\n            bannerentry.append('Courses - NOT Kaggle')\n        if resp['Q40_Part_1'] != NoAnsString:\n            bannerentry.append('Courses - Coursera')\n        if resp['Q40_Part_7'] != NoAnsString:\n            bannerentry.append('Courses - Udemy')\n        if resp['Q3'] == 'India':\n            bannerentry.append('Country - India')\n        if resp['Q3'] == 'United States of America':\n            bannerentry.append('Country - U.S.A')\n        if resp['Q3'] != 'India' and resp['Q3'] != 'United States of America':\n            bannerentry.append('Country - Rest of the World')\n        if resp['Q5'] in ['Currently not employed', 'Student']: \n            bannerentry.append('Status - Student \/ unemployed')\n        else:\n            bannerentry.append('Status - Working')\n        if resp['Q1'] in ['18-21', '22-24','25-29']:\n            bannerentry.append('Age - Below 30 yrs')\n        else:\n            bannerentry.append('Age - Over 30 yrs')\n        bannercol.append(bannerentry)\n        # print(bannerentry)\n    return bannercol\n    \nBannerData=makeBannerSeries()\n# print(BannerData[1:25])\n# print(len(EduBanner))","4c5c97fc":"def labelslots(xx:list):\n    val=0\n    labellist=[]\n    for  r in xx:\n        for k in r:\n            if not k in labellist:\n                labellist.append(k)\n    return sorted(labellist)\n\n# a=labelslots(BannerSeries)\n# print(a)\n","2b21a8fc":"def PrepData(q:list,isBanner):\n    targetcols=[]\n    for col in df.columns:\n        if [col]==q:\n            targetcols.append(q[0])\n        else:\n            if col.startswith(q[0] + '_Part'):\n                targetcols.append(col)\n    ret=[]\n    \n    a=df[targetcols].values.tolist()\n    for bp in a:\n        if isBanner:\n            bp.append('.Total')\n        # if bp != f\"['{NoAnsString}']\":\n        ret.append(bp)\n    return ret\n\n# res=PrepData(['Q7'])\n# print(res[1:10])","300c554c":"def MultiTab(side:list,B:list,F:list=['All'],colpercents=True,showbase=True):\n    xtabdata = pd.DataFrame( index=df.index).fillna(NoAnsString)\n    if len(B) == 1:\n        C=PrepData(B,True)\n        if len(C) != len(xtabdata):\n            print(C)\n        else:\n            B= C\n    xtabdata['Banner'] = B\n    S=PrepData(side,False)\n    xtabdata['SideData'] = S\n    if len(F) ==1: #'all':\n        F=list(itertools.repeat(['All'],len(xtabdata)))\n    xtabdata['Filter'] = F\n    FilterLabel = list(set(FilterData))\n    FilterLabel.remove(NoAnsString) \n    rawcrosstab=pd.DataFrame(columns=labelslots(B), index=labelslots(S)).fillna(0).astype(float)\n    bases=pd.DataFrame(columns=rawcrosstab.columns,index=['.Answered','counted']).fillna(0).astype(float)\n    for rownumber, xtabdataField in xtabdata[['Banner','SideData','Filter']].iterrows():\n        bases.at['counted'] = 0\n        if xtabdataField['Filter'] != NoAnsString:\n            for bannerentry in xtabdataField['Banner']:\n                if bannerentry != NoAnsString:\n                    # if bannerentry=='Udemy':\n                    #     print(rownumber,'Udemy')\n                    for sideentry in xtabdataField['SideData']:\n                        if sideentry != NoAnsString:\n                            rawcrosstab.at[sideentry,bannerentry] += 1\n                            if bases.at['counted',bannerentry] == 0:\n                                bases.at['.Answered',bannerentry] = 1 + bases.at['.Answered',bannerentry]\n                                bases.at['counted',bannerentry] = 1\n    if colpercents:\n        displaytab = rawcrosstab.divide(bases.loc['.Answered'], axis='columns').astype(float)\n        displaytab = displaytab.mul(100).round(1)   #.astype(str) + '%' can cause problems\n    else:\n        displaytab=rawcrosstab\n\n    if showbase:\n        displaytab=pd.concat([bases.loc['.Answered'].to_frame().transpose(),displaytab],axis=0).fillna(0)\n    displaytab=displaytab.loc[(displaytab.T != 0).any()]\n    displaytab=displaytab.loc[:,(displaytab != 0).any(axis=0)]\n    displaytab.sort_index()\n    return displaytab\n","8471c243":"cm = sns.light_palette(\"blue\", as_cmap=True)\npd.set_option('display.precision', 0)\n\n\nt=1\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","bfddd0c7":"pd.set_option('display.precision', 0)\n\nt += 1\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","43a12a7d":"t = 3\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","995c39ce":"t = 4\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","f0ee5d64":"t =5\n\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","5ff06bfb":"t = 6\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","c84d0f6d":"t=7\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","2bace692":"t = 8\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","2e8c8499":"t = 9\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","1f84f700":"t = 10\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","4c63536a":"t = 11\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","22858fdd":"\nt = 12\n\n\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","5764be8f":"t = 13\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","22fe5483":"t = 14\n\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","2c5e9138":"t = 15\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","0a0bf103":"t = 16\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","0daa9ad8":"t = 17\n\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","2731d358":"t = 18\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","96836a5a":"t = 19\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","f6a3f62b":"t = 20\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","28232f79":"t = 21\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","370798a8":"t =22\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","a2ae4b46":"t = 23\n\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","d6fe1f95":"t = 24\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","ee503e0a":"t = 25\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","f295df00":"def makeFilterSeries():\n    FSeries=[]\n    for i, resp in df.iterrows():\n        if not resp['Q5'] in ['Currently not employed', 'Student'] and resp['Q26']=='$0 ($USD)':\n            FSeries.append('Professional')\n        else:\n            FSeries.append(NoAnsString)\n    return FSeries\nFilterData=makeFilterSeries()\n\ndef CountryComparisonBanner():\n    bannercol=[]\n    for i, resp in df.iterrows():\n        bannerentry=['.Total']\n        if resp['Q3'] == 'India':\n            bannerentry.append('India')\n        if resp['Q3'] == 'United States of America':\n                bannerentry.append('U.S.A')\n        if resp['Q3'] != 'India' and resp['Q3'] != 'United States of America':\n            bannerentry.append('Everybody Else')\n        bannercol.append(bannerentry)\n    return bannercol\n    \nCompareCountries=CountryComparisonBanner()\n# print(BannerData[1:25])\n# print(len(EduBanner))","003800e4":"t = 4\n\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=CompareCountries,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","eb30b260":"t = 5\n\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=CompareCountries,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","059867c5":"t = 26\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","9f8eecc5":"t = 27\nab = t\n\ns=[(f'Q{ab}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","ed1b2527":"\ns=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","472753f8":"t = 28\n\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n\n#q28","1a7adf34":"\n\ns=[(f'Q27_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=['Q27_B'],B=['Q28'],F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","2a45752b":"\nt += 1 \nab=t\ns=[(f'Q{t}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","107173aa":"# Q29_B\ns=[(f'Q29_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=['Q29_B'],B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","32e9941d":"t += 1 \nab=t\ns=[(f'Q{t}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","d16f5b14":"######\n###\n\n# s=[(f'Q{ab}_B')]\n# tablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\n# print(tablelabel)\n# qd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\n# qd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","9ae9fa1a":"t += 1\nab = t\n\ns=[(f'Q{ab}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","d12eb15f":"\ns=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","1ab20360":"t += 1\nab = t\n\ns=[(f'Q{ab}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","f1d2ad6f":"\ns=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","ded358c3":"pd.set_option('display.precision', 0)\nt += 1\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","cc09e6a5":"pd.set_option('display.precision', 0)\nt += 1\nab=t\ns=[(f'Q{t}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","7e4c5f20":"\ns=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","06750d20":"t = 35\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","cebd8bff":"t = 36\nab=t\ns=[(f'Q{ab}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","92ddea73":"\ns=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","4bfbac63":"t = 37\nab=t\ns=[(f'Q{ab}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","6a45ad45":"\ns=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","094f28ea":"t = 38\nab=t\ns=[(f'Q{ab}_A')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","0b71b9c1":"s=[(f'Q{ab}_B')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","2e2f0290":"t = 39\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","d2e9f4f5":"t = 40\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","355fe3bd":"def makeKaggleLearnBanner():\n    bannercol=[]\n    for i, resp in df.iterrows():\n        bannerentry=['.Total']\n        if resp['Q40_Part_3'] == 'Kaggle Learn Courses':\n            bannerentry.append('Courses - Kaggle Learn')\n        else:\n            bannerentry.append('Courses - NOT Kaggle Learn')\n        if resp['Q40_Part_1'] != NoAnsString:\n            bannerentry.append('Courses - Coursera')\n        if resp['Q40_Part_7'] != NoAnsString:\n            bannerentry.append('Courses - Udemy')\n        bannercol.append(bannerentry)\n    return bannercol\n    \nKaggleLearnBanner=makeKaggleLearnBanner()","abbcffec":"\ns=[(f'Q40')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=['Q40'],B=KaggleLearnBanner,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n\n\n","6e6be1aa":"\ns=[(f'Q42')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=['Q42'],B=KaggleLearnBanner,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n\n","76de93e4":"t = 41\n\ns=[(f'Q41')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","bf14f322":"t = 42\n\ns=[(f'Q{t}')]\ntablelabel=f\"=>=>   {str(quesTextDict.get(s[0]))}\"\nprint(tablelabel)\nqd=MultiTab(side=s,B=BannerData,F='all',colpercents=True,showbase=True)\nqd.style.background_gradient(cmap=cm,subset=(qd.index[1 :], qd.select_dtypes(float).columns)).applymap(lambda v: 'opacity: 50%;' if (v < 10) else None ) \n","1ad5f0ba":"# Data cleaning","4ac891c5":"# 7 in 10 people do not use a AutoML product","76340b99":"# The Salary question","237c2769":"# AWS leads GCP in regularly used computing platforms, then Azure","6c4dff06":"# Of the respndents using AutoML, Google Cloud AutoML is the leader","1ec176a7":"# Data science staff","87540671":"# The most popular ML framework is Scikit-Learn, followed by TensorFlow ","5fa4dfdc":"# Microsoft Power BI is the most commonly used BI tool, then Tableau","224eb917":"# Three quarters are planning to use the Google Cloud Compute Engine","83fa41c0":"# Respondents want to use TensorBoard in the future","1ec2940d":"# Jupyter Notebooks and Visual Studio Code are the most popular IDEs","d6cb6d2b":"# India has twice as many students in the sample","4461f907":"# Microsoft Power BI and Tableau are the most popular BI Tools","2f7e7101":"# Research Report\n","b6c98d8e":"# Current \/ Regular Usage","68b9da31":"# NLP methods","ced3074e":"# Industry worked in","f503e383":"# Half of the people who have not done Kaggle Learn, have done Couresa","25ad0da3":"# Most respondents have not used specialized hardware","64eb0342":"# Magority of respondents use GitHub","89837c96":"# The primary tools to analyze data are Excel, Google Sheets, Rstudio and JupyterLabs","3fe6a87d":"# The education level is about the same between USA and Indian respondents","2ab256ce":"# Most plan to take up AWS and GCP because they enjoy them","b4749947":"# ... and people will stick with MySQL into the future","b45fb892":"# What sources of information do people who have not done Kaggle Learn","ce9e04af":"# Most people have been using ML methods for less than 2 years","ff151518":"# A Topline Market Research Report","fa06d96a":"# Drill down on salary\n## lets compare formal education","0162f1fe":"# Demographics","41b0ba99":"# Python is heavily endorsed for aspiring data scientists","7e48f1ed":"# Most people do not use tools to manage ML","93515770":"#  Need to create a \"Completed the intervew\" dataset as many people do not finish and hence the bases distorted.\n\n# To do this, we only select the respondents that answered the last question, Q42.\n# After this, we have n=18,329 valid, completed surveys\n","4bf80e54":"# Python dominates","76e9ef7c":"# Couresa is the most popular DS course, follwed by Kaggle, then Udemy","8a103b20":"## The numbers in the cells are percentages. The percentage are based on the people who have Answered the question. The number for the base is at the top of the column.\n## Each column is a Sub-group analysis","6c4f2898":"# More people intend to use Google Cloud AutoML in the future","4a6b7df6":"# EC2 is a popular cloud service","91945d1d":"# Nearly half plan to use Tableau in the future, followed by Microsoft Power BI, then Google Data Studio","b799cb89":"# But GCP is poised to grow","05b46648":"# Kaggle, YouTube and Blogs are the places people go to for data science topics","5eeea6ea":"# Only a third of respondents have ML methods in production","59421596":"# Company size","5ee235d7":"# EFS, followed by GCS are most popular data storage solutions","2d052e7f":"# Make question text dict","65f67fc5":"# About half have spent less than $100 on cloud or ML","3be2c8de":"# Google Cloud Vertex AI, closely followed by Azure Machine Learning Studio are the products people have their eyes on for the future","fef99564":"# Most work is done on laptops","e3f29d96":"## Setup","c218be89":"# Kaggle and Collab are the most popular note books","f461a064":"# Most popular ML algo is linear or logistic regression, followed by decision trees and random forest","94987782":"# MySQL is used the most","ce35190a":"# Matplotlib is the most popular viz library","d73371ac":"# Most respondents have not used TPUs","9dbe5e2d":"# No one answered Q30 B","1c8d361c":"# Who are these people that have not done a Kaggle Learn Course?","871a3395":"# MySQL is the most popular product for Big Data","282da956":"# Most respondents do not use Managed Machine Learning products","9cb3921e":"# Most people are analyzing data to understand and effect busuiness decisions, rather than building models","82f87b34":"# The A and B questions\n\n# Current and future usage","bc3039a9":"# Vision methods","4d36f431":"# AutoML tools are dominated by Automated model selection and Automated Full ML pipelines","9879a989":"# Create banners and filters\n# A banner goes across thew top of the table\n# A Filter is to reduce the data set to just the respondents we are interested in","1f8ff603":"# AWS, then GCP are the most enjoyable platforms"}}