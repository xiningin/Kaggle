{"cell_type":{"f3945e5f":"code","aca9aca1":"code","c6be290b":"code","167f62a8":"code","b203b501":"code","27d6cb0e":"code","c1206577":"code","346ce138":"code","f98782d7":"code","d85f24dd":"code","7e597f61":"code","5ea7406a":"code","8706a9d8":"code","af9ee4cf":"code","41d9c3d1":"code","6471c335":"code","380ac648":"code","a55fb39d":"code","a3a81fab":"code","592bfa99":"code","a9b264dc":"code","c4651f78":"code","2a031f36":"code","170a0767":"code","69e1bc8f":"code","6c91ab9b":"code","37339007":"code","7793c95d":"code","db4e6b1f":"code","99f82586":"code","2641afb2":"code","f7f77946":"code","6ddfd842":"code","c5ad3d8b":"code","1d893a58":"code","4aaf4f6b":"code","dad0569f":"code","0b8f0774":"code","8732433e":"code","68c0d74c":"code","83312368":"code","ca710539":"code","252c3986":"code","da4c21c5":"code","2eb0835e":"code","8c41c9fc":"code","9b76529f":"markdown","6d6cac8e":"markdown","a1b746be":"markdown","9b63c6f3":"markdown","6f2f51cc":"markdown","305b07de":"markdown","30c642b8":"markdown","4cd59d0a":"markdown","e39a276a":"markdown","4925dbea":"markdown","8d245464":"markdown","c1a630d8":"markdown","a6fdb1c7":"markdown","c757a2a0":"markdown","dec961b4":"markdown","35a941a0":"markdown","422b6458":"markdown","acb83d03":"markdown","8c21e596":"markdown","d76b92bc":"markdown","dfbdf3e4":"markdown","70ddf1fa":"markdown","9be2a6d4":"markdown","4fb194d7":"markdown","21455dca":"markdown","e0157226":"markdown","e511cc6f":"markdown","9d822511":"markdown","f02a464e":"markdown"},"source":{"f3945e5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aca9aca1":"from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","c6be290b":"df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncountries_iso = pd.read_csv(\"\/kaggle\/input\/countries-of-the-world-iso-codes-and-population\/country_codes_2020.csv\")\ncountries=pd.read_csv(\"\/kaggle\/input\/countries-of-the-world-iso-codes-and-population\/countries_by_population_2019.csv\")","167f62a8":"df.head()","b203b501":"df.info()","27d6cb0e":"df.drop('Last Update',axis=1,inplace = True)\n\n#Making new column of Active Cases in dataset\ndf['Active'] = df['Confirmed']-df['Deaths']-df['Recovered']\n\n#Converting string Date time into Python Date time object\ndf['ObservationDate'] = pd.to_datetime(df['ObservationDate'])\ndf['Confirmed']=df['Confirmed'].astype('int')\ndf['Deaths']=df['Deaths'].astype('int')\ndf['Recovered']=df['Recovered'].astype('int')\ndf['Active']=df['Active'].astype('int')\n\n#Renaming columns\ndf.rename(columns = {'ObservationDate':'Date','Recovered':'Cured','Province\/State':'State','Country\/Region':'Country'}, inplace = True)\n\n#Replacing null values\ndf[\"State\"].fillna(\"No State\",inplace=True) \n\ndata_df=df.groupby('Date').sum()\ndata_df.reset_index(inplace=True)\n\n#Making new columns of Recovery and Death Rate.\ndata_df['Recovery_Rate']=data_df['Cured']\/data_df['Confirmed']\ndata_df['Death_Rate']=data_df['Deaths']\/data_df['Confirmed']","c1206577":"df_updated = df[df['Date'] == max(df['Date'])].reset_index()\ndf_updated_grouped = df_updated.groupby('Country')['Confirmed', 'Deaths', 'Cured','Active'].sum().reset_index()\ntemp = df_updated.groupby(['Country', 'State'])['Confirmed', 'Cured', 'Deaths','Active'].max()\nhead20 = temp.head(20)\nhead20.style.background_gradient(cmap='Pastel1_r')\n","346ce138":"temp.sum()","f98782d7":"temp_f = df_updated_grouped[['Country', 'Confirmed','Cured','Deaths','Active']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\nhead10 = temp_f.head(10)\nhead10.style.background_gradient(cmap='Pastel1_r')","d85f24dd":"temp10=temp_f.head(10)\ntemp_fc=list(temp10['Country'])\n","7e597f61":"plt.figure(figsize=(10,5))\nsns.barplot(x=temp_fc,y=temp10['Confirmed'])\nplt.grid(True)\nplt.title('Confirmed Cases',size = 20)\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Country\",fontsize = 18)\nplt.ylabel('Confirmed in crore',fontsize = 18)\nplt.legend(loc=0)\nplt.show()","5ea7406a":"plt.figure(figsize=(10,5))\nsns.barplot(x=temp_fc,y=temp10['Cured'])\nplt.grid(True)\nplt.title('Cured Cases',size = 20)\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Country\",fontsize = 18)\nplt.ylabel('Cured in crore',fontsize = 18)\nplt.legend(loc=0)\nplt.show()","8706a9d8":"plt.figure(figsize=(10,5))\nsns.barplot(x=temp_fc,y=temp10['Deaths'])\nplt.grid(True)\nplt.title('Death Cases',size = 20)\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Country\",fontsize = 18)\nplt.ylabel('Deaths',fontsize = 18)\nplt.legend(loc=0)\nplt.show()","af9ee4cf":"plt.figure(figsize=(10,5))\nsns.barplot(x=temp_fc,y=temp10['Active'])\nplt.grid(True)\nplt.title('Active Cases',size = 20)\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Country\",fontsize = 18)\nplt.ylabel('Active in million',fontsize = 18)\nplt.legend(loc=0)\nplt.show()","41d9c3d1":"f, ax = plt.subplots(figsize=(10, 5))\nplt.tick_params(size=5,labelsize = 13)\nplt.ylabel('Country',fontsize = 18)\nbar1=sns.barplot(x=\"Confirmed\",y=\"Country\",data=temp10,\n            label=\"Confirmed\", color=\"#0065b3\")\n\nbar2=sns.barplot(x=\"Cured\", y=\"Country\", data=temp10,\n            label=\"Cured\", color=\"#03ff39\")\n\nbar3=sns.barplot(x=\"Deaths\", y=\"Country\", data=temp10,\n            label=\"Deaths\", color=\"red\")\n\nax.legend(loc=4, ncol = 1)\nplt.xlabel(\"Total Cases in crore\",fontsize = 18)\nplt.show()","6471c335":"world_province_cases=temp10[['Confirmed','Cured','Active','Deaths','Country']].groupby('Country').max().sort_values('Confirmed',ascending=False)\nworld_province_cases.plot(kind='bar',width=0.95,colormap='rainbow',figsize=(10,5),fontsize = 13)\nplt.grid(True)\nplt.show()","380ac648":"fig = plt.figure(figsize=(7,7))\nconf_per_state = temp10.groupby('Country')['Confirmed'].max().sort_values(ascending=False)\n\ndef absolute_value(val):\n    a  = val\n    return (np.round(a,2))\nconf_per_state.plot(kind=\"pie\",title='Percentage of confirmed cases per country',autopct=absolute_value)\nplt.legend(loc=1, ncol = 7)\nplt.show()","a55fb39d":"fig = plt.figure(figsize=(7,7))\nconf_per_state = temp10.groupby('Country')['Cured'].max().sort_values(ascending=False)\n\ndef absolute_value(val):\n    a  = val\n    return (np.round(a,2))\nconf_per_state.plot(kind=\"pie\",title='Percentage of cured cases per country',autopct=absolute_value)\nplt.legend(loc=1, ncol = 7)\nplt.show()","a3a81fab":"fig = plt.figure(figsize=(7,7))\nconf_per_state = temp10.groupby('Country')['Deaths'].max().sort_values(ascending=False)\n\ndef absolute_value(val):\n    a  = val\n    return (np.round(a,2))\nconf_per_state.plot(kind=\"pie\",title='Percentage of death cases per country',autopct=absolute_value)\nplt.legend(loc=1, ncol = 7)\nplt.show()","592bfa99":"fig = plt.figure(figsize=(7,7))\nconf_per_state = temp10.groupby('Country')['Active'].max().sort_values(ascending=False)\n\ndef absolute_value(val):\n    a  = val\n    return (np.round(a,2))\nconf_per_state.plot(kind=\"pie\",title='Percentage of active cases per country',autopct=absolute_value)\nplt.legend(loc=1, ncol = 7)\nplt.show()","a9b264dc":"plt.figure(figsize= (14,8))\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases in millions',fontsize = 20)\nplt.title(\"Total Confirmed, Cured, Deaths and Active cases in World\" , fontsize = 20)\n\nax1 = plt.plot_date(data=data_df,y= 'Confirmed',x= 'Date',label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(data=data_df,y= 'Cured',x= 'Date',label = 'Cured',linestyle ='-',color = 'g')\nax3 = plt.plot_date(data=data_df,y= 'Deaths',x= 'Date',label = 'Death',linestyle ='-',color = 'r')\nax4 = plt.plot_date(data=data_df,y= 'Active',x= 'Date',label = 'Active',linestyle ='-',color = 'y')\n\nplt.legend();","c4651f78":"plt.figure(figsize= (14,8))\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Rate',fontsize = 20)\nplt.title(\"Recovery and Death Rate in World\" , fontsize = 20)\n\nax1 = plt.plot_date(data=data_df,y= 'Recovery_Rate',x= 'Date',label = 'Recovery_rate',linestyle ='-',color = 'g')\nax2 = plt.plot_date(data=data_df,y= 'Death_Rate',x= 'Date',label = 'Death_rate',linestyle ='-',color = 'r')\n\nplt.legend();","2a031f36":"import plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=list(data_df.Date), y=list(data_df.Confirmed)))\n\n# Set title\nfig.update_layout(\n    title_text=\"Confirmed cases over time\"\n)\n\n# Add range slider\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\n\nfig.show()","170a0767":"import plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=list(data_df.Date), y=list(data_df.Cured)))\n\n# Set title\nfig.update_layout(\n    title_text=\"Cured cases over time\"\n)\n\n# Add range slider\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\n\nfig.show()","69e1bc8f":"import plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=list(data_df.Date), y=list(data_df.Deaths)))\n\n# Set title\nfig.update_layout(\n    title_text=\"Death cases over time\"\n)\n\n# Add range slider\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\n\nfig.show()","6c91ab9b":"import plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=list(data_df.Date), y=list(data_df.Active)))\n\n# Set title\nfig.update_layout(\n    title_text=\"Active cases over time\"\n)\n\n# Add range slider\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\n\nfig.show()","37339007":"cols_to_drop = ['Rank', 'pop2018','GrowthRate', 'area', 'Density']\ncountries = countries.drop(columns = cols_to_drop)\n\n\ncountries = countries.merge(countries_iso[['name', 'cca3']], on = ['name'], how = \"left\")\n\ncols_to_rename = {'name': 'Country', 'pop2019': 'Population', 'cca3': 'ISO'}\ncountries = countries.rename(columns = cols_to_rename)\n\n#fixing the most important mismatches\ncountries_to_rename = {'US': 'United States',\\\n                       'Mainland China': 'China',\\\n                       'UK': 'United Kingdom',\\\n                       'Congo (Kinshasa)': 'DR Congo',\\\n                       'North Macedonia': 'Macedonia',\\\n                       'Republic of Ireland': 'Ireland',\\\n                       'Congo (Brazzaville)': 'Republic of the Congo'}\n\ntemp_f['Country'] = temp_f['Country'].replace(countries_to_rename)\n\ntemp_map = temp_f.merge(countries, on = \"Country\", how = \"left\")","7793c95d":"temp_map.head()\n","db4e6b1f":"fig = px.choropleth(temp_map, locations=\"ISO\",\n                    color=\"Confirmed\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.YlOrRd)\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Corona confirmed cases\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width = 750,\n    height = 350,\n    margin=dict(l=0,r=0,b=0,t=30)\n)\n\nfig.update_layout(layout)\n\nfig.show()","99f82586":"fig = px.choropleth(temp_map, locations=\"ISO\",\n                    color=\"Cured\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.YlGn)\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Corona cured cases\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width = 750,\n    height = 350,\n    margin=dict(l=0,r=0,b=0,t=30)\n)\n\nfig.update_layout(layout)\n\nfig.show()","2641afb2":"fig = px.choropleth(temp_map, locations=\"ISO\",\n                    color=\"Deaths\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.YlOrRd)\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Corona death cases\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width = 750,\n    height = 350,\n    margin=dict(l=0,r=0,b=0,t=30)\n)\n\nfig.update_layout(layout)\n\nfig.show()","f7f77946":"fig = px.choropleth(temp_map, locations=\"ISO\",\n                    color=\"Active\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.YlOrRd)\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Corona active cases\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width = 750,\n    height = 350,\n    margin=dict(l=0,r=0,b=0,t=30)\n)\n\nfig.update_layout(layout)\n\nfig.show()","6ddfd842":"from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom colorama import Fore \nimport plotly.figure_factory as ff\nimport warnings\nwarnings.filterwarnings('ignore')","c5ad3d8b":"df_vaccine=pd.read_csv(r\"..\/input\/covid19-in-india\/covid_vaccine_statewise.csv\")","1d893a58":"df_vaccine.tail()","4aaf4f6b":"df_vaccine.drop('Total Individuals Vaccinated',axis=1,inplace = True)\n\n#Making new column of Total Vaccinatons in dataset\ndf_vaccine['Total Vaccinatons'] = df_vaccine['First Dose Administered']+df_vaccine['Second Dose Administered']\n\n#Renaming columns\ndf_vaccine.rename(columns = {'Updated On':'Date'}, inplace = True)","dad0569f":"df_vaccine.info()","0b8f0774":"male = df_vaccine[\"Male(Individuals Vaccinated)\"].max() \nfemale = df_vaccine[\"Female(Individuals Vaccinated)\"].max()  \ntrans = df_vaccine[\"Transgender(Individuals Vaccinated)\"].max()\npx.pie(names=[\"Male Vaccinated\",\"Female Vaccinated\",\"Trans Gender\"],values=[male,female,trans],title=\"Male and Female Vaccinated ratio for Covid19\")","8732433e":"Rajasthan = df_vaccine[df_vaccine[\"State\"]==\"Rajasthan\"]\nfig_vaccine = px.line(Rajasthan,x=\"Date\",y=\"Total Vaccinatons\",title=\"Vaccination over time-->Rajasthan\")  \nfig_vaccine.update_xaxes(rangeslider_visible=True) ","68c0d74c":"fig_vaccine = px.line(Rajasthan,x=\"Date\",y=\"Total CoviShield Administered\",title=\"CoviShield Administered-->Rajasthan\")  \nfig_vaccine.update_xaxes(rangeslider_visible=True) ","83312368":"fig_vaccine = px.line(Rajasthan,x=\"Date\",y=\"Total Covaxin Administered\",title=\"Covaxin Administered-->Rajasthan\")  \nfig_vaccine.update_xaxes(rangeslider_visible=True) ","ca710539":"df_vaccine_state=pd.read_csv('..\/input\/india-covid19-vaccination-data\/state.csv')","252c3986":"df_vaccine_state.info()","da4c21c5":"df_vaccine_state.head()","2eb0835e":"df_updated_vaccine = df_vaccine_state[df_vaccine_state['date'] == max(df_vaccine_state['date'])].reset_index()\ndf_updated_grouped_vaccine = df_updated_vaccine.groupby('State')['Total'].sum().reset_index()\n\ntemp_f_vaccine = df_updated_grouped_vaccine[['State', 'Total']]\ntemp_f_vaccine = temp_f_vaccine.sort_values(by='State')\ntemp_f_vaccine = temp_f_vaccine.reset_index(drop=True)\ntemp_f_vaccine.style.background_gradient(cmap='Pastel1_r')","8c41c9fc":"temp_f_vaccine = df_updated_grouped_vaccine[['State', 'Total']]\ntemp_f_vaccine = temp_f_vaccine.sort_values(by='Total', ascending=False)\ntemp_f_vaccine = temp_f_vaccine.reset_index(drop=True)\nhead10_vaccine = temp_f_vaccine.head(10)\nhead10_vaccine.style.background_gradient(cmap='Pastel1_r')","9b76529f":"## **Visualizing cases for top 10 affected countries**","6d6cac8e":"### COVID 19: Active Cases On Map\nHere is the Total Active cases of each country on world map.","a1b746be":"## **Top countries with Confirmed cases.**\nCountries which have most to least number of Confirmed cases","9b63c6f3":"### COVID 19: Death Cases On Map\nHere is the Total Death cases of each country on world map.","6f2f51cc":"## **Visualizing Confirmed cases for top 10 countries**","305b07de":"### COVID 19: Confirmed Cases","30c642b8":"# Recovery rate and Date Rate in World\nBelow, you can see this time series for the Recovery rate and Date Rate in World.","4cd59d0a":"# Visualization on Pie Chart\nA pie chart data visualizaton of the top 10 affected countries","e39a276a":"### Vaccination","4925dbea":"# Total Confirmed, Cured, Death and Active cases in each country\nGetting values of Total number of confirmed cases, deaths reported, cured and active cases all across the world","8d245464":"### **Importing Libraries**","c1a630d8":"# Preprocessing","a6fdb1c7":"# Visualization on Map\nVisualizing the Total COVID cases across the World on the World Map. Here the most affected country can be seen darker in colour and the less affected countries can be seen lighter in colour.\n\nHere I am using the datasets from [Countries of the World; ISO codes and population](https:\/\/www.kaggle.com\/erikbruin\/countries-of-the-world-iso-codes-and-population) .As I want to use built-in geometries of plotly.express later on to plot numbers on a world map, I am also merging the three-letter ISO country code to the dataframe.\n\nRenaming the Country names according to dataset, so that mismatching can be fixed and cases of the country can be visualized on map.","c757a2a0":"## **Visualizing cases for top 10 countries combinedly.**","dec961b4":"# Imports and Datasets","35a941a0":"# Visualizing total cases in World according to dates\nBelow, you can see this time series for the Total Confirmed, Cured, Deaths and Active cases in World.","422b6458":"#### Dataset\n* 2019 Novel Coronavirus COVID-19  Data Repository by Johns Hopkins University.\n* This dataset is updated on daily basis by Johns Hopkins CSSE\n[(link)](https:\/\/github.com\/CSSEGISandData\/COVID-19)","acb83d03":"### COVID 19: Cured Cases On Map\nHere is the Total Cured cases of each country on world map.","8c21e596":"# COVID-19 Analysis and Visualization\n# Introduction to COVID-19 \n![903866-world-coronavirus.jpg](attachment:903866-world-coronavirus.jpg)\n\n**Coronaviruses** are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as **Middle East Respiratory Syndrome (MERS)** and **Severe Acute Respiratory Syndrome (SARS)**. The most recently discovered coronavirus causes coronavirus disease COVID-19 - **World Health Organization**\n\n The number of new cases are increasing day by day around the world. This dataset has information from the countries and states of World at daily level.","d76b92bc":"# Top 10 countries Analysis & Visualization\nAnalysing and Visualizing Confirmed, Cured, Death and Active cases of top 10 affected countries.","dfbdf3e4":"# Content :\n\n* [Imports and Datasets](#Imports-and-Datasets)\n* [General Analysis](#General-Analysis)\n* [Preprocessing](#Preprocessing)\n* [Total Confirmed, Cured, Death and Active cases in each country](#Total-Confirmed,-Cured,-Death-and-Active-cases-in-each-country)\n* [Top 10 countries Analysis & Visualization](#Top-10-countries-Analysis-&-Visualization)\n     * [Confirmed, Cured and Death Cases (Bar Plot Viz)](#Visualizing-cases-for-top-10-affected-countries)        \n     * [Visualizing cases for top 10 countries combinedly](#Visualizing-cases-for-top-10-countries-combinedly.)\n* [Visualization on Pie Chart](#Visualization-on-Pie-Chart)\n* [Visualizing total cases in World according to dates](#Visualizing-total-cases-in-World-according-to-dates)\n* [Recovery rate and Date Rate in World](#Recovery-rate-and-Date-Rate-in-World)\n* [COVID 19: Range Slider Visualization](#COVID-19:-Range-Slider-Visualization)\n     * [COVID 19: Confirmed Cases](#COVID-19:-Confirmed-Cases)\n     * [COVID 19: Cured Cases](#COVID-19:-Cured-Cases)        \n     * [COVID 19: Death Cases](#COVID-19:-Death-Cases) \n     * [COVID 19: Active Cases](#COVID-19:-Active-Cases)\n* [Visualization on Map](#Visualization-on-Map)\n     * [COVID 19: Confirmed Cases On Map](#COVID-19:-Confirmed-Cases-On-Map) \n     * [COVID 19: Cured Cases On Map](#COVID-19:-Cured-Cases-On-Map)\n     * [COVID 19: Death Cases On Map](#COVID-19:-Death-Cases-On-Map)\n     * [COVID 19: Active Cases On Map](#COVID-19:-Active-Cases-On-Map)\n* [Valuable Feedback](#Valuable-Feedback)     ","70ddf1fa":"### COVID 19: Death Cases","9be2a6d4":"### COVID 19: Cured Cases","4fb194d7":"# Valuable Feedback\n\n* [LinkedIn](https:\/\/www.linkedin.com\/in\/nakul-saraswat-231a1014a\/)\n* **Please UPVOTE if you liked the notebook.**\n* **Your FEEDBACK is much appreciated.**","21455dca":"# COVID 19: Range Slider Visualization\nVisualized the total COVID cases date wise on a range slider. Here you can analyze the data between a particular time period than can be days, months or a year by just sliding the below slider.","e0157226":"### COVID 19: Active Cases","e511cc6f":"# General Analysis\nGetting country wise data","9d822511":"### COVID 19: Confirmed Cases On Map\nHere is the Total Confirmed cases of each country on world map.","f02a464e":"## **Total Confirmed, Cured and Death cases in World.**\nCalculating Total Confirmed, Cured and Death cases in World by summing all the cases of each country."}}