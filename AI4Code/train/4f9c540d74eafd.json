{"cell_type":{"df103592":"code","45174f79":"code","df808efc":"code","c66ea00a":"code","13169606":"code","11d14215":"code","06a1cd47":"code","ac234ab7":"code","c85b3624":"code","be2e730f":"code","496e0045":"code","68f64327":"code","899bf080":"code","8b905ad6":"code","9c1fee58":"code","68e074ba":"code","1d9d27f2":"code","df9efbf1":"code","fda330d2":"code","95b88135":"code","cc191ff1":"code","39a9df15":"code","bad64333":"markdown","f9e1990e":"markdown","88ffaecf":"markdown","360b0b6e":"markdown","48768cc6":"markdown","77e4a068":"markdown","577b8fb7":"markdown","7fca7736":"markdown","e31fbabb":"markdown","7e8cd1b0":"markdown","503eacdc":"markdown","46d10097":"markdown","4dbed126":"markdown","4eec5cf5":"markdown","833cc0f5":"markdown","02849a81":"markdown","2f566071":"markdown","0eb4ff05":"markdown","93136d79":"markdown","e77c653a":"markdown","8af8f8d3":"markdown"},"source":{"df103592":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport seaborn as sns\nplt.style.use('fivethirtyeight')","45174f79":"#load train data\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n#create a new column 'Is_train' to differentiate the training data from the testing data, 1 = training, 0 = testing\ntrain_df['Is_train'] = 1\ntest_df['Is_train'] = 0\n#create the 'Survived' column filled with null values in the testing data\n#so as to share the same columns as the training data\ntest_df['Survived'] = np.nan\n#combine the trainning data and testing data\nfull_df = pd.concat([train_df, test_df], ignore_index=True)\n# delete the two dataframes which are no longer needed\ndel train_df, test_df","df808efc":"def compare_hists(col_name, bins=None, df=full_df):\n    plt.hist(df[df.Survived==1][col_name].dropna(), bins=bins, density=False, label='survived', alpha=0.5)\n    plt.hist(df[df.Survived==0][col_name].dropna(), bins=bins, density=False, label='not survived',alpha=0.5)\n    plt.title('Histograms of {}'.format(col_name))\n    plt.xlabel(col_name)\n    plt.ylabel('Number')\n    plt.legend(loc='upper right')\n    plt.show()","c66ea00a":"#fix the errors and fill in the missing age values for the Sammann family\nfull_df.loc[279, ['SibSp', 'Parch']]= 0, 2\nfull_df.loc[1283, ['SibSp', 'Parch']] = 1, 1\nfull_df.loc[987, 'Age'] = 26\nfull_df.loc[1188, ['Age', 'SibSp', 'Parch']] = 40, 0, 2\nfull_df.loc[48, ['Age', 'SibSp', 'Parch']] = 16, 1, 1\nfull_df.loc[920, ['Age', 'SibSp', 'Parch']] = 18, 1, 1\nfull_df.loc[68, ['SibSp', 'Parch']] = 0, 0\nfull_df.loc[1105, ['SibSp', 'Parch']] = 0, 0\nfull_df.loc[736, ['SibSp', 'Parch']] = 0, 4\nfull_df.loc[[436, 1058, 86, 147], ['SibSp', 'Parch']] = 3, 1\n\n#fix two more errors were found during my deep analysis of fare variable\nfull_df.loc[[451, 490], 'Fare'] = 6.9667","13169606":"full_df.loc[1043, 'Fare'] = 7.8292\nfull_df.loc[[61, 829], 'Embarked'] = 'S'\ndf = full_df.drop('Cabin', axis=1)\ndel full_df","11d14215":"compare_hists('Age', bins=np.arange(0, 90, 5))","06a1cd47":"compare_hists('Age', bins=np.arange(21), df=df[df.Age<20])","ac234ab7":"#the median of all the samples\ndf.Age.median()","c85b3624":"#the median values of the samples of three Pclasses\ndf.groupby('Pclass').Age.median()","be2e730f":"#extract titles from Nmae\ndf['Title'] = df['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\n#check for missing value(s)\ndf.Title.isnull().sum()","496e0045":"#check the counts of each titles\ntitle_counts = df.Title.value_counts()\n\ntitle_counts.to_frame().T","68f64327":"#check the sex of the passengers with different titles in the full dataset\nfemale_titles = set()\nmale_titles = set()\nfor t in df.Title.unique():\n    if ((df.Title== t) & (df.Sex=='female')).any():\n        female_titles.add(t)\n    if ((df.Title== t) & (df.Sex=='male')).any():\n        male_titles.add(t)\n\nmix_titles = female_titles & male_titles\nfemale_only_titles = female_titles - mix_titles\nmale_only_titles = male_titles - mix_titles\nprint('mix_titles:', mix_titles)\nprint('female_only_titles', female_only_titles)\nprint('male_only_titles', male_only_titles)","899bf080":"#check the Age ranges of different titles of the full data\nplt.figure(figsize=(20,5))\nsns.boxplot(x='Title', y='Age', data=df);","8b905ad6":"#change the title from 'Dr' to 'Dr (female)' for the female\ndf.loc[(df.Title=='Dr') & (df.Sex == 'female'), 'Title'] = 'Dr (female)'","9c1fee58":"#group the titles to combine as many rare titles with the common ones as possible\n#based on the title definitions and the sex information of the dataset\n#rare titles are those in less than 10 samples\ntitle_groups = {'Male adult': ['Mr', 'Don', 'Rev', 'Dr',  'Sir', 'Major',  'Col', 'Capt', 'Countess', 'Jonkheer'],\n                'Boy': ['Master'],\n                'Miss': ['Miss'],\n               'Other female': ['Mrs', 'Dona', 'Mme', 'Mlle', 'Ms', 'Lady', 'Dr (female)']}","68e074ba":"df['Title_group'] = df['Title']\nfor k in title_groups:\n    df['Title_group'].replace(title_groups[k], k, inplace=True)","1d9d27f2":"df['Title_group'].value_counts()","df9efbf1":"pd.pivot_table(df, values='Age', index='Pclass', columns='Title_group', aggfunc='median')","fda330d2":"pd.pivot_table(df, values='Age', index='Pclass', columns='Title_group', aggfunc='count')","95b88135":"#median age for boys\nboy_median_age = df.loc[df.Title_group == 'Boy', 'Age'].median()\n#fillna for boys' age\ndf.loc[df.Title_group=='Boy', 'Age'] = df.loc[df.Title_group=='Boy', 'Age'].fillna(boy_median_age)\n#check the number of missing age values for boys\ndf.loc[df.Title_group == 'Boy', 'Age'].isnull().sum()","cc191ff1":"#filling missing age values for other title groups in different pclasses\ndf['Age'] = df[['Pclass', 'Title_group', 'Age']].\\\n            groupby(by=['Pclass', 'Title_group']).transform(lambda x: x.fillna(x.median()))","39a9df15":"#check the number of missing age values\ndf['Age'].isnull().sum()","bad64333":"### Impute with the median of the samples of each Pclass?\n\nIn my notebook \"titanic-eda-with-detailed-explanation\", Pclass has the highest coorelation with Age than the rest features.","f9e1990e":"Imputation strategy:   \nThe male with 'Master' title are boys while the male with the other titles are adults.   \nThe median age value of the same title group increases with the drecreasing Pclass value in most cases.\nSo imputation with the median values of the subsets by 'Title_group'('Title') and Pclass is better than the previous two.   \nDue to the small sample size of 'Boy' group and close median values, their imputation is made with the median value of all the samples in that title group.","88ffaecf":"This imputation strategy is not good either for the same reason as the last strategy.","360b0b6e":"**Categorize title by count and sex**\n\n|Sex\\Counts|>10|<10|\n|:--|:--|:--|\n|Male|'Mr', 'Master'|'Major', 'Sir', 'Don', 'Capt', 'Jonkheer', 'Rev', 'Col'|\n|Female|'Miss', 'Mrs'|'Ms', 'Lady', 'Countess', 'Mme', 'Mlle', 'Dona'|\n|Mix||'Dr'|","48768cc6":"## Imputation strategy","77e4a068":"With the imputation with this median, a boy who had a high chance of survival may be categorized as a man who had a low chance of survival. This imputation strategy is not good.","577b8fb7":"### Load the functions","7fca7736":"## Impute 'Age'","e31fbabb":"## Background of this notebook","7e8cd1b0":"### Load the two datasets and combine them","503eacdc":"### Review how survival rates vary with age","46d10097":"## Load packages and modules","4dbed126":"### Handling the missing values of 'Fare' and 'Embarked' and the 'Cabin'","4eec5cf5":"### Fix some data errors and fill in a couple of missing age values\n\nReferences:   \n[Some SibSp\/Parch values are wrong](https:\/\/www.kaggle.com\/c\/titanic\/discussion\/39787)   \n[Miss Erna Alexandra Andersson](https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/erna-andersson.html)   \n[Miss Ida Augusta Margareta Andersson](https:\/\/www.encyclopedia-titanica.org\/titanic-victim\/ida-augusta-margareta-andersson.html)","833cc0f5":"### Load libraries, packages and modules","02849a81":"### Impute with the median of all the samples?","2f566071":"**Finding:**  \nThe passengers under 15 (esp under 5) had much higher survival rates than the rest.  \nVery few passengers over 65 survived.","0eb4ff05":"## Table of Contents\n1. Background of this notebook\n2. Load packages and modules   \n    2.1 Load libraries, packages and modules   \n    2.2 Load the two datasets and combine them   \n    2.3 Load the functions   \n3. Prepare data   \n    3.1 Fix some data errors and fill in a couple of missing age values   \n    3.2  Handling the missing values of 'Fare' and 'Embarked' and the 'Cabin'   \n4. Impute 'Age'   \n    4.1 Review how survival rates vary with age\n5. Imputation strategy   \n    5.1 Impute with the median of all the samples?   \n    5.2 Impute with the median of the samples of each Pclass?   \n    5.3 Impute with the median of the samples of each Title?","93136d79":"## Prepare data","e77c653a":"In my previous notebook [\"Dealing with missing values (Part 1)\"](https:\/\/www.kaggle.com\/bofangli\/dealing-with-missing-values-part-1?scriptVersionId=51847308), the number and types of missingness were analyzed for the combination of train data set and test data set. Based on the analysis results, the imputation was made for 'Fare' and 'Embarked' and the 'Cabin' variable was dropped.\n\nIn this notebook, I'll work on the imputation for 'Age'.","8af8f8d3":"### Impute with the median of the samples of each Title?"}}