{"cell_type":{"9ace8b83":"code","b27d97d1":"code","259d61b3":"code","3b70cadc":"code","6c6bc5c2":"code","64a818b2":"code","0450bdab":"code","85af23cc":"code","e0867fbe":"code","2c22d11a":"markdown"},"source":{"9ace8b83":"# This kernel might be the shortest code in Kaggle competitions\n# I will use no machine learning in the predictions but only mathematics ! (maths not hot ! just sauce...)\n# From the kernels of other competitors approximately all linear regression \n# hypotheses are satistified (normal distribution of features, Homoscedasticity, ...)\n# So We can solve the problem where \n# y = Ax (1)\n# y' = A'x (2)\n# y = (ground thruth i.e known target), A = training data, \n# and b = bias (y - Ax); y' = target to predict, A' = testing data and b' = bias of the predicted target: \n# Solution: (1) => x = A^-1y and replace it in (2)=> y' = A'A^-1y","b27d97d1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings #filtering warnings\nwarnings.filterwarnings('ignore')","259d61b3":"df_train = pd.read_csv('..\/input\/train.csv', low_memory=False)\ndf_test = pd.read_csv('..\/input\/test.csv',low_memory=False)","3b70cadc":"ids_test = df_test['ID_code']\ny = df_train['target']\ndel df_train['target']\ndel df_train['ID_code']\ndel df_test['ID_code']","6c6bc5c2":"# Min Max scaling\nA = (df_train - df_train.min()) \/ (df_train.min() - df_train.max())\nA_prime = (df_test - df_test.min()) \/ (df_test.min() - df_test.max())","64a818b2":"# solving (1) with numpy linalg.lstsq\nx,_,_,_ = np.linalg.lstsq(A, y)","0450bdab":"# predicting test data target\ny_prime = np.dot(A_prime, x)","85af23cc":"submission = pd.DataFrame({'ID_code':ids_test, 'target':y_prime})\nsubmission.head(20)","e0867fbe":"submission.to_csv('submission.csv', index = False)","2c22d11a":"Yes you are right ! using the linear model in Scikit-Learn with solver = least-sqarre will give approximately the same score."}}