{"cell_type":{"399384bc":"code","fcc641f4":"code","a2914779":"code","ccdff9e7":"code","92b55542":"code","ad8ac8e1":"code","73d2238a":"code","17c48662":"code","5a0806b7":"code","6392fdfa":"code","0a22400c":"code","cb3fb694":"code","347daa60":"code","9c575789":"code","2f4bec5a":"code","1203d98a":"code","67ab17c3":"code","dbae7e8c":"code","e4d3f620":"code","323d34cb":"code","383491fb":"code","766309e2":"code","7316001c":"code","2dcff971":"markdown","d38b0295":"markdown","54cfaa4c":"markdown","5a10c602":"markdown","166ee9ef":"markdown","93c440bf":"markdown","8dc809a6":"markdown","87300706":"markdown","e0eed2b9":"markdown","97c1f83e":"markdown","e6753265":"markdown"},"source":{"399384bc":"!pip install beautifulsoup4\n!pip install ekphrasis","fcc641f4":"import requests, json\nimport string\nimport re\nfrom itertools import chain\n\nimport numpy as np\nimport pandas as pd\n\nfrom bs4 import BeautifulSoup\n\nfrom ekphrasis.classes.preprocessor import TextPreProcessor\nfrom ekphrasis.classes.tokenizer import SocialTokenizer\nfrom ekphrasis.dicts.emoticons import emoticons\nfrom ekphrasis.dicts.noslang.slangdict import slangdict\n\nfrom nltk.corpus import words\nfrom nltk.corpus import stopwords\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\nen_words = words.words()\nst_words = stopwords.words()","a2914779":"df = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\ndf_leak = pd.read_csv('\/kaggle\/input\/disasters-on-social-media\/socialmedia-disaster-tweets-DFE.csv',  encoding ='ISO-8859-1')\ndf_leak['target'] = (df_leak['choose_one'] == 'Relevant').astype(np.int8)\ndf_leak['id'] = df_leak.index.astype(np.int16)\ndf_leak = df_leak[['target', 'id']]\ntest_df = test_df.merge(df_leak, on=['id'], how='left')\n\nprint(df.shape, test_df.shape)","ccdff9e7":"def get_unk_words(txts):\n    txt = ' '.join(txts)\n    doc = nlp(txt)\n    tokens = set([tok.lemma_ for tok in doc])\n\n    word_dict = set([tok.lower() for tok in en_words])\n    not_word_tokens = tokens - tokens.intersection(word_dict)\n    print('Vocabs size', len(tokens))\n    print('Unknown vocabs size', len(not_word_tokens))\n    print(f'Tweets contain unknown words: {100 * len(not_word_tokens) \/ len(tokens):.2f}%')\n    return not_word_tokens","92b55542":"pairs =  list(slangdict.items())\nfor i in range(10):\n    print(pairs[i])","ad8ac8e1":"uncased_slang_dict = {}\nfor key, value in slangdict.items():\n    value = re.sub(r'it means', '', value)\n    value = re.sub(r'\\*\\*\\*', 'uck', value)\n    value = re.sub(r'\\*\\*', 'it', value)\n    value = re.sub(r'it refers to', '', value)\n    uncased_slang_dict[key.lower()] = value.lower()\nprint('Slang words number:', len(uncased_slang_dict))","73d2238a":"##Source: https:\/\/www.kaggle.com\/chardo\/top-5-winning-automl-submission\n\nreplacement_patterns = [\n    (r'won\\'t', 'will not'),\n    (r'can\\'t', 'cannot'),\n    (r'i\\'m', 'i am'),\n    (r'I\\'m', 'I am'),\n    (r'ain\\'t', 'is not'),\n    (r'(\\w+)\\'ll', '\\g<1> will'),\n    (r'(\\w+)n\\'t', '\\g<1> not'),\n    (r'(\\w+)\\'ve', '\\g<1> have'),\n    (r'(\\w+)\\'s', '\\g<1> is'),\n    (r'(\\w+)\\'re', '\\g<1> are'),\n    (r'(\\w+)\\'d', '\\g<1> would'),\n]","17c48662":"abbr = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\",\n    \"yr\": \"year\",\n    \"u.s\":\"usa\",\n}\ndef replace_slang(txt, slang):\n    ctxt = re.sub(r'\\s+', ' ', txt)\n    res = []\n    for tok in ctxt.split():\n        if tok.lower() in slang:\n            res.append(slang[tok.lower()])\n        else:\n            res.append(tok)\n    res = ' '.join(res)\n    return res.strip()\n\nsent = 'I want to go aamof home'\nprint(sent)\nprint(replace_slang(sent, abbr))","5a0806b7":"text_processor = TextPreProcessor(\n    # terms that will be normalized\n    normalize = ['rest_emoticons', 'rtl_face', 'cashtag','url',\n                 'email', 'percent', 'money', 'phone', 'user', \n                 'time', 'date', 'number', 'eastern_emoticons'],\n    # terms that will be annotated\n    annotate = set([\"elongated\", \"repeated\"]),\n    fix_html = True,  # fix HTML tokens\n    segmenter=\"twitter\", \n    corrector = \"twitter\", \n    unpack_hashtags = True,  # perform word segmentation on hashtags\n    unpack_contractions = True,  # Unpack contractions (can't -> can not)\n    spell_correct_elong = False,  # spell correction for elongated words\n    tokenizer=SocialTokenizer(lowercase=False).tokenize,\n    dicts=[emoticons]\n)","6392fdfa":"def preprocess(txt):\n    # remove non-ascii characters\n    res = txt.encode('ascii', 'ignore').decode()\n    # replace slang token if the token is not an english word\n    res = replace_slang(res, uncased_slang_dict)\n    # replace shorten pattern i.e I'll--> I will\n    for patt, rep in replacement_patterns:\n        res = re.sub(patt, rep, res)\n    # Extract emojis and hashtags and segment the txt\n    res = ' '.join(text_processor.pre_process_doc(res)).strip()\n    for patt in [r\"<elongated>\", r\"<repeated>\"]:\n        res = re.sub(patt, '', res)\n        \n    # another try to replace the slangs after segmentation\n    res = replace_slang(res, uncased_slang_dict)\n\n    # remove punctuaions\n    res = re.sub(r'[%s]' % re.escape(''.join(string.punctuation)), r' ',res)\n    # lower case\n    res = res.lower()\n    # remove consecutive duplicated tokens\n    res = re.sub(r'\\b(\\w+)(?:\\W+\\1\\b)+', r'\\1', res)\n    #remove extra spaces\n    res = re.sub(r'\\s+', ' ', res)\n    return res.strip()","0a22400c":"df['ctext'] = df['text'].apply(preprocess)\ntest_df['ctext'] = test_df['text'].apply(preprocess)","cb3fb694":"for txt, ctxt in test_df[['text', 'ctext']].values[0:30]:\n    print(txt)\n    print(ctxt)\n    print()","347daa60":"not_word_tokens = get_unk_words(df['ctext'])","9c575789":"not_word_tokens = get_unk_words(test_df['ctext'])","2f4bec5a":"for tok in list(not_word_tokens)[0:20]:\n    print(tok)","1203d98a":"df = df.fillna('unk')\ntest_df = test_df.fillna('unk')","67ab17c3":"\ndf = df.groupby(by = ['ctext']).agg({\n    'id': 'first',\n    'location': lambda x:x.value_counts().index[0],\n    'keyword':lambda x:x.value_counts().index[0],\n    'target': lambda x:x.value_counts().index[0],\n    'text': lambda x:x.value_counts().index[0],\n}).reset_index()\n\n","dbae7e8c":"print(df.shape)","e4d3f620":"def preprocess_kw(txt):\n    res = txt.lower()\n    res = re.sub(r'[^a-zA-Z]', r' ', res)\n    res = re.sub(r'\\s+', r' ', res)\n    doc = nlp(res)\n    res = ' '.join([token.lemma_ for token in doc])\n    res = re.sub(r'\\s+', r' ', res)\n    return res.strip()","323d34cb":"keyword = set(df['keyword'].values)\nkeyword = {\n    key: preprocess_kw(key).lower() for key in keyword\n}\n    \ndf['ckeyword'] = df['keyword'].apply(lambda txt: keyword[txt])\ntest_df['ckeyword'] = test_df['keyword'].apply(lambda txt: keyword[txt])","383491fb":"df[df['keyword']!='unk'][['keyword', 'ckeyword']]","766309e2":"ids = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\n\ndf.loc[df['id'].isin(ids), 'target'] = 0","7316001c":"df.to_csv('df.csv', index = False)\ntest_df.to_csv('test_df.csv', index = False)","2dcff971":"# Fix misclassified target","d38b0295":"# remove duplicated texts","54cfaa4c":"# Unknow words","5a10c602":"# read data","166ee9ef":"# Get more chat abbreviation","93c440bf":"# Util Functions","8dc809a6":"# Get Chat Abbreviation","87300706":"# Import Libs","e0eed2b9":"# Clean column keywords\n\n* remove strang characters\n* replace words with their lemma","97c1f83e":"# Text cleaning","e6753265":"# Define text preprocessor\n* extract emojis\n* replace numbers\/date\/money\n* extract hashtags\n* correct enlongated\/repeated character\n"}}