{"cell_type":{"27b1c4f0":"code","050e058d":"code","c37217d5":"code","38f61bfd":"code","2053a928":"code","1bbc7f5d":"code","38fc0ffc":"code","2b104741":"code","9b41231b":"code","dd61383c":"code","a657e449":"code","36ab6bd2":"code","b4b845d4":"code","f3771e5f":"code","e2da2c4b":"code","07a801a6":"code","521604bc":"code","61de2261":"code","f4970c62":"code","1723fdcf":"code","88117ed5":"code","e10fbd58":"code","33c7086b":"code","b25082b4":"code","eb6e7b56":"code","e6090f41":"code","db8fc93b":"code","ff251956":"code","f60a1e33":"code","ed7a9a7c":"code","9c158e66":"code","d0650d55":"code","523d0d09":"code","bdca0eaa":"code","18b47ee2":"code","d4a1a50a":"code","e73845b8":"code","b6ff3f04":"code","6e48e486":"code","023d9703":"code","8874179d":"code","29ea3a20":"code","7329217f":"code","dbfa6f6b":"code","714de4ae":"code","23ce5b2e":"code","66fce3c7":"code","e7ffb055":"code","0d9ef1a1":"code","94cefba3":"code","724507f6":"code","6af271ac":"code","b01cab2b":"code","d8a59947":"code","6b96bd8f":"code","f1bc9a3c":"code","7216cb11":"code","d0719311":"code","e4892c38":"code","6e4f656f":"code","64a2b6d4":"code","a3b9de1f":"code","8b0dddb7":"code","c8f3caa4":"code","cf74055e":"code","e8a0caa1":"code","fba29acb":"code","72df9959":"code","4c9a7682":"markdown","1bb417cf":"markdown","fb4e4aee":"markdown","6969338d":"markdown","f545b588":"markdown","220fc187":"markdown","d759e91e":"markdown","00e5528e":"markdown","600987cd":"markdown","0a3eee4a":"markdown"},"source":{"27b1c4f0":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom scipy.stats import expon,norm,boxcox\nfrom sklearn.preprocessing import PowerTransformer\nfrom scipy.stats.stats import pearsonr\nfrom scipy.stats import boxcox,norm\n\n\nfrom sklearn.model_selection import KFold,cross_val_score,GridSearchCV,RandomizedSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import Lasso,Ridge,RidgeCV\nfrom sklearn.preprocessing import normalize,StandardScaler\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom mlxtend.regressor import StackingRegressor\nfrom sklearn.svm import SVR\n\n\nfrom hyperopt import STATUS_OK \nfrom hyperopt import hp\nfrom hyperopt import tpe\nfrom hyperopt import Trials\nfrom hyperopt import fmin\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","050e058d":"train = pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\")\ntest = pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\")","c37217d5":"#train.head()","38f61bfd":"#train.shape,test.shape","2053a928":"#train.info()","1bbc7f5d":"def missing(df):\n  number=df.isnull().sum().sort_values(ascending=False)[df.isnull().sum().sort_values(ascending=False)!=0]\n  percent=number\/len(df)*100\n  missing_df=pd.concat((number,percent),keys=['Number','Percent'], axis=1)\n  return missing_df","38fc0ffc":"#missing(train)","2b104741":"#missing(test)","9b41231b":"f,ax=plt.subplots(figsize=(8,6))\nsns.distplot(x=np.log1p(train['Item_Outlet_Sales']))\nax.set_title('Distribution of SalePrice')","dd61383c":"f,ax=plt.subplots(figsize=(8,6))\nsns.distplot(x=train['Item_Outlet_Sales'])\nax.set_title('Distribution of SalePrice')","a657e449":"saleprice=train.Item_Outlet_Sales\nsaleprice.isnull().any()","36ab6bd2":"norm_sale_price,fitted_lambda=boxcox(saleprice)#fitted_lambda is estimated by maximum likelyhood method","b4b845d4":"sns.distplot(norm_sale_price,fit=norm)","f3771e5f":"f,ax=plt.subplots(figsize=(8,6))\nmask=np.zeros_like(train.corr())\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(train.corr(),annot=True,mask=mask)\nax.set_title('Correlation Between Featurs')","e2da2c4b":"f,ax=plt.subplots(figsize=(8,6))\nsns.scatterplot(x='Item_MRP',y='Item_Outlet_Sales',data=train,hue='Outlet_Size')","07a801a6":"f,ax=plt.subplots(figsize=(8,6))\nsns.scatterplot(x='Outlet_Establishment_Year',y='Item_Outlet_Sales',data=train)","521604bc":"f,ax=plt.subplots(2,2,figsize=(15,10))\n\nsns.boxplot(x='Item_Fat_Content',y='Item_Outlet_Sales',data=train,ax=ax[0,0])\nsns.boxplot(x='Outlet_Size',y='Item_Outlet_Sales',data=train,ax=ax[0,1])\nsns.boxplot(x='Outlet_Location_Type',y='Item_Outlet_Sales',data=train,ax=ax[1,0])\nsns.boxplot(x='Outlet_Type',y='Item_Outlet_Sales',data=train,ax=ax[1,1])","61de2261":"train['Item_Fat_Content']=train['Item_Fat_Content'].apply( lambda x: 'Low Fat' if x in ['Low Fat','low fat','low fat'] else 'Regular')\ntest['Item_Fat_Content']=test['Item_Fat_Content'].apply( lambda x: 'Low Fat' if x in ['Low Fat','low fat','low fat'] else 'Regular')\n","f4970c62":"f,ax=plt.subplots(figsize=(8,6))\nsns.boxplot(x='Item_Fat_Content',y='Item_Outlet_Sales',data=train)","1723fdcf":"f, ax=plt.subplots(figsize=(12,6))\n\nax=sns.boxplot(x='Item_Type',y='Item_Outlet_Sales',data=train)\nax= plt.setp(ax.get_xticklabels(), rotation=45)","88117ed5":"f,ax=plt.subplots(figsize=(14,6))\n\nax=sns.countplot(x='Item_Type',data=train)\nax= plt.setp(ax.get_xticklabels(), rotation=45)","e10fbd58":"f,ax=plt.subplots(2,2,figsize=(20,8))\nsns.countplot(x='Item_Fat_Content',data=train,ax=ax[0,0])\n#sns.countplot(x='Item_Type',data=train,ax=ax[0,1])\nsns.countplot(x='Outlet_Size',data=train,ax=ax[1,0])\nsns.countplot(x='Outlet_Location_Type',data=train,ax=ax[1,1])","33c7086b":"f,ax=plt.subplots(figsize=(10,6))\nsns.countplot(x='Outlet_Type',hue='Outlet_Location_Type',data=train)\nplt.legend(loc='upper right')\nax.set_title('Number of Outlet Type Based on Location Type')","b25082b4":"f,ax=plt.subplots(figsize=(10,6))\nsns.boxplot(x='Item_Weight',data=train)","eb6e7b56":"train['Item_Weight']=train['Item_Weight'].fillna(train['Item_Weight'].median())\ntest['Item_Weight']=test['Item_Weight'].fillna(test['Item_Weight'].median())","e6090f41":"train['Outlet_Size']= train['Outlet_Size'].fillna(train['Outlet_Size'].mode()[0])\ntest['Outlet_Size']= test['Outlet_Size'].fillna(test['Outlet_Size'].mode()[0])","db8fc93b":"missing(train)","ff251956":"missing(test)","f60a1e33":"Item_Outlet_Sales=train['Item_Outlet_Sales']\ntrain.drop(columns='Item_Outlet_Sales',inplace=True)","ed7a9a7c":"train.drop(columns=['Item_Identifier','Outlet_Identifier'],inplace=True)\nitem_indentifier=test['Item_Identifier']\ntest.drop(columns=['Item_Identifier','Outlet_Identifier'],inplace=True)","9c158e66":"#transformed_sale_value,calculated_lambda_value=boxcox(Item_Outlet_Sales)","d0650d55":"# sns.distplot(transformed_sale_value,fit=norm)","523d0d09":"sns.distplot(x=train['Item_Weight'],fit=norm)","bdca0eaa":"sns.distplot(x=train['Item_Visibility'],fit=norm)","18b47ee2":"any(train['Item_Visibility']==0),any(test['Item_Visibility']==0)","d4a1a50a":"print(any(train['Item_Visibility']<0))\nprint(any(test['Item_Visibility']<0))","e73845b8":"sns.distplot(x=np.log(train['Item_Visibility']+1),fit=norm)","b6ff3f04":"sns.distplot(x=train['Item_MRP'],fit=norm)","6e48e486":"sns.distplot(x=train['Outlet_Establishment_Year'])","023d9703":"final_train=pd.get_dummies(train)\nfinel_test=pd.get_dummies(test)","8874179d":"X=final_train.values\ny=Item_Outlet_Sales.values","29ea3a20":"#after scaling\nsc = StandardScaler()\n\n\nX_train_scaled = sc.fit_transform(final_train)\npd.DataFrame(X_train_scaled,columns=list(final_train.columns)).head()\n\n","7329217f":"y_train_scaled=sc.fit_transform((y).reshape(-1, 1))\ny_train_scaled_log=np.log1p(y)","dbfa6f6b":"def evaluate(model):\n  cv=KFold(n_splits=5,shuffle=True,random_state=42)\n  score=-(cross_val_score(model,X_train_scaled,y_train_scaled_log,scoring='neg_mean_squared_error',cv=cv,n_jobs=-1))\n  print(score)\n  print(score.mean(),score.std())","714de4ae":"%%time\n#l1 regularization perfom feature selection\nls=Lasso()\nevaluate(ls)","23ce5b2e":"%%time\n#l2 regularization\nri=Ridge()\nevaluate(ri)","66fce3c7":"%%time\ndt=DecisionTreeRegressor()\nevaluate(dt)","e7ffb055":"%%time\nrf=RandomForestRegressor()\nevaluate(rf)","0d9ef1a1":"%%time\nxgb=XGBRegressor()\nevaluate(xgb)","94cefba3":"%%time\nlgb=LGBMRegressor()\nevaluate(lgb)","724507f6":"%%time\nstack_gen =StackingRegressor(regressors=[ri, ls, dt, rf, xgb, lgb],meta_regressor=xgb,use_features_in_secondary=True)\n                              \nevaluate(stack_gen)","6af271ac":"%%time\nfrom sklearn.svm import SVR\nsvr=SVR()\n\nevaluate(svr)","b01cab2b":"# %%time\n# from sklearn.model_selection import GridSearchCV,KFold\n\n# cv=KFold(n_splits=5,shuffle=True,random_state=42)\n\n# param={\n#      'learning_rate':np.logspace(-3,-1,3),\n#      'n_estimators':np.linspace(500,700,3,dtype=int),\n#      'max_depth':np.linspace(5,8,4,dtype=int)\n#  }\n\n# xgb_gs=GridSearchCV(xgb,param_grid=param,scoring='neg_mean_squared_error',cv=cv)\n\n# xgb_gs.fit(X_train_scaled,y_train_scaled)","d8a59947":"# xgb_gs.best_score_","6b96bd8f":"# %%time\n# cv=KFold(n_splits=5,shuffle=True,random_state=42)\n# svm_param={\n#      'gamma':np.logspace(-3,1,2),\n#      'C':np.linspace(0.1,10,3)\n     \n#  }\n\n# svm_gs=GridSearchCV(svr,param_grid=svm_param,scoring='neg_mean_squared_error',cv=cv)\n\n# svm_gs.fit(X_train_scaled,y_train_scaled)","f1bc9a3c":"# svm_gs.best_score_","7216cb11":"#defining objective function\nrandom_state=42\ncv=KFold(n_splits=5,shuffle=True,random_state=42)\n\ndef xgb_mse_cv(params, random_state=random_state, cv=cv, X=X_train_scaled, y=y_train_scaled_log):\n    \n    params = {'n_estimators': int(params['n_estimators']), \n              'max_depth': int(params['max_depth']), \n             'learning_rate': params['learning_rate']}\n    \n   \n    model = LGBMRegressor(random_state=random_state, **params)\n    \n    \n    score = -cross_val_score(model, X, y, cv=cv, scoring=\"neg_mean_squared_error\", n_jobs=-1).mean()\n\n    return score","d0719311":"%%time\n\n# possible values of parameters\nspace={'n_estimators': hp.quniform('n_estimators', 100, 2000, 1),\n       'max_depth' : hp.quniform('max_depth', 2, 20, 1),\n       'learning_rate': hp.loguniform('learning_rate', -5, 0)\n      }\n\n# trials will contain logging information\ntrials = Trials()\n\nbest=fmin(fn=xgb_mse_cv, \n          space=space, \n          algo=tpe.suggest, \n          max_evals=20, \n          trials=trials, \n          rstate=np.random.RandomState(random_state) \n         )","e4892c38":"best","6e4f656f":"model = LGBMRegressor(random_state=random_state, n_estimators=int(best['n_estimators']),\n                      max_depth=int(best['max_depth']),learning_rate=best['learning_rate'])","64a2b6d4":"X_test_scaled = sc.fit_transform(finel_test)","a3b9de1f":"model.fit(X_train_scaled,y_train_scaled_log)","8b0dddb7":"scaled_prediction=model.predict(X_test_scaled)","c8f3caa4":"predicted_saleprice=np.floor(np.expm1(scaled_prediction))","cf74055e":"predicted_saleprice","e8a0caa1":"predicted_saleprice=pd.Series(predicted_saleprice)","fba29acb":"Predicted_price=pd.concat([item_indentifier,predicted_saleprice],keys=['Item_Identifier','Predicted_Sale'],axis=1)","72df9959":"Predicted_price.head()","4c9a7682":"3.1 Gridsearch","1bb417cf":"There is no negative value ,good for us.We can use boxcox transform to normalize data.","fb4e4aee":"3.3 Bayesian optimization","6969338d":"**2.Transformation and Model Building**","f545b588":"Missing value Imputation","220fc187":"3.2 Random Search","d759e91e":"**3.Hyper-parameter tunning**","00e5528e":"Data is right skewd we need to transform it to normal form as possible.","600987cd":"**1.EDA**","0a3eee4a":"Correlation between features"}}