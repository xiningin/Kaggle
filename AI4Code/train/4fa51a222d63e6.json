{"cell_type":{"9a11860e":"code","9ac6384e":"code","edaa685d":"code","9708f632":"code","65aaff95":"code","ae045fc1":"code","0daf02d3":"code","1414eb38":"code","a350d494":"code","e0cab916":"code","b65a801c":"code","b1d48cfd":"code","08c7b2e7":"code","c0bbc801":"code","b0abc224":"code","d4f06c5f":"code","9b526af0":"code","c6198b07":"code","18caaf8d":"code","ffddc203":"markdown","aca084ca":"markdown","2f47f79d":"markdown","a81cac4c":"markdown","50eca9c6":"markdown","e0d91831":"markdown","c73158ec":"markdown","1127476c":"markdown","05f18af0":"markdown","8bc360e6":"markdown","0c1c0e3d":"markdown","97311f89":"markdown","ef7c54b1":"markdown","57f148b6":"markdown","7f22a4e8":"markdown","82f0d353":"markdown","731d95ae":"markdown","5504fa1b":"markdown","1bf9db85":"markdown","b665d671":"markdown"},"source":{"9a11860e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ac6384e":"import matplotlib.pyplot as plt\nfig = plt.figure()\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2], [3,4])\nplt.show()","edaa685d":"fig = plt.figure(figsize=(8,3))\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2], [3,4])\nplt.show()","9708f632":"fig = plt.figure(figsize=(8,3), dpi=50)\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2], [3,4])\nplt.show()","65aaff95":"fig = plt.figure()\naxes1 = fig.add_subplot(1,2,1)\naxes1.plot([1,2], [3,4])\naxes2 = fig.add_subplot(1,2,2)\naxes2.plot([5,6], [7,8])\nplt.show()","ae045fc1":"fig = plt.figure(figsize=(20,3))\naxes1 = fig.add_subplot(1,6,1)\naxes1.plot([1,2], [3,4])\naxes2 = fig.add_subplot(1,6,2)\naxes2.scatter([1,2], [3,4])\naxes3 = fig.add_subplot(1,6,3)\naxes3.bar([1,2], [3,4])\naxes4 = fig.add_subplot(1,6,4)\naxes4.barh([1,2], [3,4])\naxes5 = fig.add_subplot(1,6,5)\naxes5.hist([1,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,8,8,9,10])\naxes6 = fig.add_subplot(1,6,6)\naxes6.hist([1,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,8,8,9,10], orientation=\"horizontal\")\nplt.show()","0daf02d3":"fig = plt.figure(figsize=(6, 2))\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2], [3,4])\naxes2 = axes1.twinx()\naxes2.plot([5,6], [7,8])\nplt.show()","1414eb38":"fig = plt.figure()\naxes1 = fig.add_subplot(1,2,1)\naxes1.plot([1,2], [3,4])\naxes2 = fig.add_subplot(1,2,2)\naxes2.plot([1,2], [3,4])\naxes2.set_xlim(0,5)\naxes2.set_ylim(0,5)\nplt.show()","a350d494":"import matplotlib.ticker as ticker\nfig = plt.figure(figsize=(8, 2))\naxes1 = fig.add_subplot(1,2,1)\naxes1.plot([1,2], [3,4])\naxes2 = fig.add_subplot(1,2,2)\naxes2.plot([1,2], [3,4])\naxes2.xaxis.set_major_locator(ticker.MultipleLocator(0.5))\nplt.show()","e0cab916":"import matplotlib.ticker as ticker\n@ticker.FuncFormatter\ndef return_pos(x, pos):\n    return pos\nfig = plt.figure(figsize=(8, 2))\naxes1 = fig.add_subplot(1,2,1)\naxes1.plot([1,2], [3,4])\naxes2 = fig.add_subplot(1,2,2)\naxes2.plot([1,2], [3,4])\naxes2.xaxis.set_major_formatter(return_pos)\nplt.show()","b65a801c":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(12,3))\naxes1 = fig.add_subplot(1,3,1)\naxes2 = fig.add_subplot(1,3,2)\naxes3 = fig.add_subplot(1,3,3)\naxes1.plot([0,1], [0,1])\naxes2.plot([0,1], [0,1])\naxes3.plot([0,1], [0,1])\naxes1.grid()\naxes2.xaxis.grid()\naxes3.yaxis.grid()\nplt.show()","b1d48cfd":"fig = plt.figure(figsize=(6,2))\naxes1 = fig.add_subplot(1,1,1)\naxes2 = axes1.twinx()\naxes1.plot([1,2], [3,4])\naxes2.plot([3,4], [5,6])\naxes1.set_title(\"Axes title\")\naxes1.set_xlabel(\"x label\")\naxes1.set_ylabel(\"y1 label\")\naxes2.set_ylabel(\"y2 label\")\nplt.show()","08c7b2e7":"fig = plt.figure(figsize=(8, 2))\naxes1 = fig.add_subplot(1,2,1)\naxes2 = fig.add_subplot(1,2,2)\naxes1.plot([1,2], [3,4])\naxes2.plot([5,6], [7,8])\nfig.canvas.draw()\naxes1.set_xticklabels([str(i.get_text()) for i in axes1.get_xticklabels()], rotation=90, ha='center')\naxes2.set_xticklabels([str(i.get_text()) for i in axes2.get_xticklabels()], rotation=45, ha='right')\nplt.show()","c0bbc801":"fig = plt.figure(figsize=(8, 2))\naxes1 = fig.add_subplot(1,2,1)\naxes2 = fig.add_subplot(1,2,2)\naxes1.plot([1,2], [3,4])\naxes2.plot([5,6], [7,8])\nfor label in axes1.xaxis.get_ticklabels():\n    label.set_rotation(90)\n    label.set_horizontalalignment('center')\nfor label in axes2.xaxis.get_ticklabels():\n    label.set_rotation(45)\n    label.set_horizontalalignment('right')\nplt.show()","b0abc224":"fig = plt.figure(figsize=(4,3))\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2], [3,4])\naxes1.text(0.5, 0.5, 'textbox', transform=axes1.transAxes,\n    fontsize=14,\n    va=\"center\",\n    ha=\"center\",\n    bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))\naxes1.text(1.2, 3.2, '.(1,2, 3,2)', transform=axes1.transData)\nplt.show()","d4f06c5f":"fig = plt.figure(figsize=(8,3))\naxes1 = fig.add_subplot(1,2,1)\naxes2 = fig.add_subplot(1,2,2)\naxes1.plot([1], [1], marker='o', markersize=7, label='label1', color='red')\naxes1.plot([2], [2], marker='.', markersize=7, label='label2', color='green')\naxes1.plot([3], [3], marker='*', markersize=8, label='label3', color='blue')\naxes1.plot([4], [4], marker='x', markersize=9, label='label4', color='black')\naxes2.scatter([1], [1], marker='o', label='label1', color='red')\naxes2.scatter([2], [2], marker='.', label='label2', color='green')\naxes2.scatter([3], [3], marker='*', label='label3', color='blue')\naxes2.scatter([4], [4], marker='x', label='label4', color='black')\ntry:\n    axes2.scatter([5], [5], marker='x', markersize=9, label='label4', color='black')\nexcept AttributeError as e:\n    print('Error :', e)\nplt.show()","9b526af0":"fig = plt.figure(figsize=(8,3))\naxes1 = fig.add_subplot(1,2,1)\naxes2 = fig.add_subplot(1,2,2)\naxes1.plot([1], [1], marker='o', markersize=7, label='label1', color='red')\naxes1.plot([2], [2], marker='.', markersize=7, label='label2', color='green')\naxes1.plot([3], [3], marker='*', markersize=8, label='label3', color='blue')\naxes1.plot([4], [4], marker='x', markersize=9, label='label4', color='black')\naxes2.scatter([1], [1], marker='o', label='label1', color='red')\naxes2.scatter([2], [2], marker='.', label='label2', color='green')\naxes2.scatter([3], [3], marker='*', label='label3', color='blue')\naxes2.scatter([4], [4], marker='x', label='label4', color='black')\naxes1.legend()\naxes2.legend()\nplt.show()","c6198b07":"fig = plt.figure(figsize=(4,3))\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2], [3,4])\naxes1.axhline(3.5, 0.0, 1.0, linestyle='dashed', color=\"red\")\naxes1.axvline(1.5, 0.0, 1.0, linestyle='dashed', color=\"green\")\naxes1.text(1.7, 3.53, 'textbox', transform=axes1.transData, color=\"red\")\nplt.show()","18caaf8d":"fig = plt.figure(figsize=(4,3))\naxes1 = fig.add_subplot(1,1,1)\naxes1.plot([1,2],[3,4])\naxes1.axhspan(ymin=3.4, ymax=3.6, alpha=0.3, color='red')\naxes1.axvspan(xmin=1.4, xmax=1.6, alpha=0.3, color='green')","ffddc203":"<a id=\"EditTitles\"><\/a>\n## set_title() and set_*label() methods of exes object set the titles\n- axes.set_title()\n- axes.set_xlabel()\n- axes.set_ylabel()","aca084ca":"# Trial matplotlib\n\n## Reference\n\n- Official\n - https:\/\/matplotlib.org\/3.1.1\/index.html\n\n## Table of Contents\n\n- [Basic to use matplotlib objects](#BasicToUseMatplotlibObjects)\n - [Figsize](#Figsize)\n - [Trellis](#Trellis)\n - [KindOfFigures](#KindOfFigures)\n - [Twinx](#Twinx)\n - [FigureDisplayRange](#FigureDisplayRange)\n - [CustomizeAutoLocator](#Locator)\n - [CustomizeAutoFormatter](#Formatter)\n - [Grid](#Grid)\n- [TextOperations](#TextOperations)\n - [EditTitles](#EditTitles)\n - [RotateTickLabels](#RotateTickLabels)\n - [TextBox](#TextBox)\n- [CustomizeAxes](#CustomizeAxes)\n - [MarkerConfigurations](#MarkerConfigurations)\n - [AddLegend](#AddLegend)\n - [AddAuxiliaryLine](#AddAuxiliaryLine)\n - [AddSpans](#AddSpans)","2f47f79d":"<a id=\"MarkerConfigurations\"><\/a>\n## Marker configureations\n- axes.plot() has options marker, markersize, label, color, and etc.\n- axes.scatter() doesn't have markersize option.","a81cac4c":"<a id=\"KindOfFigures\"><\/a>\n## replace axes.plot() to draw another kind of figures\n- Examples: scatter(), bar(), ... etc.","50eca9c6":"<a id=\"Locator\"><\/a>\n## Use locator in ticker module\nlocator can control tick of spines","e0d91831":"<a id=\"CustomizeAxes\"><\/a>\n# Customize Axes","c73158ec":"<a id=\"BasicToUseMatplotlibObjects\"><\/a>\n# Basic to use matplotlib objects\nTo show figures, matplotlib requres the sequence as follows.\n1. import at just 1st time\n2. generate fig\n3. generate axes from fig\n4. plot to axes\n5. output","1127476c":"<a id=\"Grid\"><\/a>\n## grid() methods of axes and axis add grid\n- axes.grid()\n- xaxis.grid()\n- yaxis.grid()","05f18af0":"<a id=\"Formatter\"><\/a>\n## Use formatter in ticker module\nformatter can control tick labels of spines","8bc360e6":"<a id=\"RotateTickLabelsAsLikeAsTutorials\"><\/a>\n## Rotate tick labels as like as official tutorials\nReference\n- https:\/\/matplotlib.org\/3.1.1\/tutorials\/intermediate\/artists.html#sphx-glr-tutorials-intermediate-artists-py","0c1c0e3d":"<a id=\"Figsize\"><\/a>\n## figure() has figsize option and dpi option\n- default figsize is (6.4, 4.8) and the unit is inches","97311f89":"<a id=\"AddSpans\"><\/a>\n## Add Spans\n- axes.axvspan() and axes.axhspan() add spans","ef7c54b1":"<a id=\"AddAuxiliaryLine\"><\/a>\n## Add Auxiliary line\n- axes.axhline() and axes.axvline() add lines","57f148b6":"<a id=\"RotateTickLabels\"><\/a>\n## Rotate tick labels\n- axes.set_xticklabels() method has a option 'rotation'\n- axes.set_xticklabels() method require a argument of list for labeling\n- axes.get_xticklabels() method return a iterable object of current xticklabels\n- figure.canvas.draw() method calcurate current xticklabels","7f22a4e8":"<a id=\"FigureDisplayRange\"><\/a>\n## axes.set_*lim() methods set display ranges\n- set_xlim()\n- set_ylim()","82f0d353":"<a id=\"TextOperations\"><\/a>\n# Text operations","731d95ae":"<a id=\"AddLegend\"><\/a>\n## Add legend\n- axes.legend() add legend","5504fa1b":"<a id=\"Twinx\"><\/a>\n## axes.twinx() add 2nd axes to overwrap existing axes","1bf9db85":"<a id=\"TextBox\"><\/a>\n## Add text box\n- axes.text() add textbox\n- transform can select from transAxes and transData","b665d671":"<a id=\"Trellis\"><\/a>\n## add_subplot() can generate trellis by some axes\n- Usage: add_subplot(rows, columns, zero origin axes number)"}}