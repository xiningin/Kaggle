{"cell_type":{"9e5903aa":"code","609cbdef":"code","33dff732":"code","0b477093":"code","a1e8d1be":"code","e181f340":"code","99ee9c5c":"code","91dbc1fe":"code","a17a67d4":"code","c2b25f34":"code","edf98639":"code","9ada36a7":"code","45f7eaeb":"code","ea81dfa6":"code","cdf1aa19":"code","01dfc73e":"code","41bcb459":"code","fa32b89c":"code","4addd8f9":"code","7ca75ea9":"code","82f510ac":"code","0594ecf8":"code","fc5b53aa":"code","a6d92868":"code","b8d29732":"code","1a11d756":"code","28799561":"code","9ce3d17e":"code","1feaad67":"code","f82c6c3d":"markdown","a3897697":"markdown","6e428211":"markdown","4ed8b77c":"markdown","cb971148":"markdown","925f1e69":"markdown","a1858e9c":"markdown","061b574c":"markdown","ecbca366":"markdown","ba5e8b57":"markdown","b722354d":"markdown","29f8fe0c":"markdown"},"source":{"9e5903aa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n!ls ..\/input\/titanic\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","609cbdef":"train.info()\nprint('-'* 40)\ntest.info()","33dff732":"train.head()","0b477093":"test.head()","a1e8d1be":"data = pd.concat([train , test], sort=False)","e181f340":"# \u5404\u7279\u5fae\u91cf\u304c\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u8a55\u4fa1\u57fa\u6e96\u3068\u306a\u308b\u5024\ntrain['Survived'].mean()","99ee9c5c":"# Pclass\u3068\u306e\u76f8\u95a2\n# groupby\u306e\u4f7f\u3044\u65b9\uff1a\u8a55\u4fa1\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8df\u3001data[]\u3001\u6b21\u306bgroupby()\u306e\u4e2d\u306b\u3069\u308c\u3067\u5206\u3051\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30b0\u30eb\u30fc\u30d7\u30e9\u30d9\u30eb\u304cindex(\u5217)\u306b\u306a\u308b\u3002index\u306b\u3057\u305f\u304f\u7121\u3044\u5834\u5408\u306fas_index=False\u3092\u6307\u5b9a\ndata[['Survived', 'Pclass']].groupby(['Pclass'], as_index=False).mean()\n# 0.4\u3068\u5dee\u7570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","91dbc1fe":"# Sex\u3068\u306e\u76f8\u95a2\ndata[['Survived', 'Sex']].groupby(['Sex'], as_index=False).mean()\n# 0.4\u3068\u5dee\u7570\u304c\u5927\u304d\u304f\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u5927\u304d\u304f\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","a17a67d4":"# Embarked\u3068\u306e\u76f8\u95a2\ndata[['Survived', 'Embarked']].groupby(['Embarked'], as_index=False).mean()\n# 0.4\u3068\u308f\u305a\u304b\u306b\u5dee\u7570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u308f\u305a\u304b\u306b\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","c2b25f34":"# Fare\u3068\u306e\u76f8\u95a2\nplt.hist(data.loc[data['Survived'] == 1, 'Fare'].dropna(),\n        range=(0, 250), alpha=.5, bins=25, label='Survived')\nplt.hist(data.loc[data['Survived'] == 0, 'Fare'].dropna(),\n        range=(0, 250), alpha=.5, bins=25, label='Death')\nplt.xlabel('Fare')\nplt.ylabel('count')\nplt.legend()\nplt.show()\n# \u8996\u899a\u7684\u306b\u898b\u3066\u76f8\u95a2\u304c\u3042\u308a\u305d\u3046","edf98639":"# Age\u3068\u306e\u76f8\u95a2\n","9ada36a7":"# Name\u3068\u306e\u76f8\u95a2\ndata['Title'] = data['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\npd.crosstab(data['Title'], data['Sex'])","45f7eaeb":"data['Title'] = data['Title'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona', 'Dr', 'Jonkheer', 'Lady', 'Major', 'Mlle', 'Mme', 'Ms', 'Rev', 'Sir'], 'Rare')\ndata[['Survived', 'Title']].groupby(['Title'], as_index=False).mean()\n# 0.4\u3068\u5dee\u7570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","ea81dfa6":"#\u3000Ccbin\u3068\u306e\u76f8\u95a2\ndata['Cabin_ini'] = data['Cabin'].str[0]\ndata['Cabin_ini'] = data['Cabin_ini'].replace(['G', 'T'], 'R')\ndata[['Cabin_ini', 'Survived']].groupby(['Cabin_ini'], as_index=False).mean()\n# 0.4\u3068\u5dee\u7570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","cdf1aa19":"# Ticket\u3068\u306e\u76f8\u95a2\ndata['Ticket_ini'] = data['Ticket'].str[0]\ndata['Ticket_ini'].value_counts()","01dfc73e":"data['Ticket_head'] = data['Ticket_ini'].replace(['9', '8', '5', 'L', '6', '4', 'F', '7', 'W'], 'R')\ndata[['Ticket_head', 'Survived']].groupby(['Ticket_head'], as_index=False).mean()\n# 0.4\u3068\u5dee\u7570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","41bcb459":"data['Familysize'] = data['SibSp'] + data['Parch'] + 1\ndata['Familysize'].value_counts()","fa32b89c":"data[['Familysize', 'Survived']].groupby(['Familysize'], as_index=False).mean()\n# 0.4\u3068\u5dee\u7570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3053\u306e\u7279\u5fae\u91cf\u306f\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u304c\u3042\u308b\u3068\u8a00\u3048\u308b","4addd8f9":"data = data.drop(['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Cabin_ini', 'Ticket_ini'], axis=1)","7ca75ea9":"data['Fare'].fillna(data['Fare'].dropna().median(),inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata.isnull().sum()","82f510ac":"data.loc[ data['Age'] <= 16, 'Age'] = 0\ndata.loc[(data['Age'] > 16) & (data['Age'] <= 32), 'Age'] = 1\ndata.loc[(data['Age'] > 32) & (data['Age'] <= 48), 'Age'] = 2\ndata.loc[(data['Age'] > 48) & (data['Age'] <= 64), 'Age'] = 3\ndata.loc[ data['Age'] > 64, 'Age'] = 4\ndata['Age'].head()","0594ecf8":"data['Fare'].describe()\ndata.loc[ data['Fare'] <= 7.895800, 'Fare'] = 0\ndata.loc[(data['Fare'] > 7.895800 ) & (data['Fare'] <= 14.454200), 'Fare'] = 1\ndata.loc[(data['Fare'] > 14.454200) & (data['Fare'] <= 31.275000), 'Fare'] = 2\ndata.loc[ data['Fare'] > 31.275000, 'Fare'] = 3\ndata['Fare'].head()","fc5b53aa":"data.dtypes","a6d92868":"data['Sex'].replace(['male', 'female'], [0, 1], inplace=True)\ndata['Embarked'] = data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\ndata['Title'] = data['Title'].map({'Master':0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Rare':4}).astype(int)\ndata['Ticket_head'] = data['Ticket_head'].map({'1':0, '2':1, '3':2, 'A':3, 'C':4, 'P':5, 'R':6, 'S':7}).astype(int)","b8d29732":"data.dtypes","1a11d756":"data.drop(['PassengerId'], axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)","28799561":"# from sklearn.model_selection import train_test_split\n\n# X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=0, stratify=y_train)\n\n# import lightgbm as lgb\n\n# lgb_train = lgb.Dataset(X_train, y_train)\n# lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)\n\n# params = {\n#     'objective': 'binary'\n# }\n\n# model = lgb.train(params, lgb_train,\n#                   valid_sets=[lgb_train, lgb_eval],\n#                   verbose_eval=10,\n#                   num_boost_round=1000,\n#                   early_stopping_rounds=10)\n\n# y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n# y_pred = (y_pred > 0.5).astype(int)\n\n# gender_submission['Survived'] = list(map(int, y_pred))\n# gender_submission.to_csv('gender_submission.csv', index=False)","9ce3d17e":"# from sklearn.ensemble import RandomForestClassifier\n# clf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\n# clf.fit(X_train, y_train)\n# y_pred = clf.predict(X_test)\n# gender_submission['Survived'] = list(map(int, y_pred))\n# gender_submission.to_csv('gender_submission.csv', index=False)","1feaad67":"from xgboost import XGBClassifier\nxgb = XGBClassifier(max_depth=12, learning_rate=0.1, n_estimators=180)\nxgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)\ngender_submission['Survived'] = list(map(int, y_pred))\ngender_submission.to_csv('gender_submission.csv', index=False)\nacc = round(xgb.score(X_train, y_train) * 100, 2)\nacc ","f82c6c3d":"## \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","a3897697":"### XGBoost","6e428211":"## \u6b20\u640d\u5024\u306e\u6271\u3044\u3068\u30c7\u30fc\u30bf\u306e\u6574\u7406","4ed8b77c":"### RandomForest","cb971148":"### Fare\u3068Age\u3092\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\n* \u7279\u5fae\u91cf\u306e\u91cd\u307f\u3092\u63c3\u3048\u3089\u308c\u308b\n* \u5916\u308c\u5024\u3092\u7121\u52b9\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b","925f1e69":"### \u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u7528\u3044\u308b\u7279\u5fae\u91cf","a1858e9c":" ### \u5909\u5f62\u3092\u8981\u3059\u308b\u7279\u5fae\u91cf","061b574c":" ### \u6b20\u640d\u5024\u306e\u88dc\u5b8c\n","ecbca366":"2. \u8996\u899a\u5316\u3057\u3066\u8a55\u4fa1\u3059\u308b","ba5e8b57":"### LightGBM","b722354d":"## \u3084\u308a\u305f\u3044\u3053\u3068\n1. \u307e\u305a\u3001\u305d\u308c\u305e\u308c\u306e\u7279\u5fae\u91cf\u304c\u751f\u5b58\u7387\u3068\u95a2\u4fc2\u304c\u3042\u308b\u306e\u304b\u8abf\u3079\u305f\u3044\n<br>\n\u30fb\u306a\u3044\u2192\u305d\u306e\u7279\u5fae\u91cf\u306f\u524a\u9664\u3059\u308b\n<br>\n\u30fb\u3042\u308b\u2192\u6b8b\u3057\u3066\u304a\u304f\n<br>\n\u3000a\uff1aint,float\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u2192\u305d\u306e\u307e\u307e\n<br>\n\u3000b\uff1aobject\u2192\u30c7\u30fc\u30bf\u3092\u5909\u5f62\u3059\u308b\n<br>\n2. \u65b0\u3057\u3044\u7279\u5fae\u91cf\u3092\u4f5c\u6210\u3059\u308b\n<br>\n\u30fbTitanic\u306b\u9650\u308b\u4f8b\u3092\u3042\u3052\u308c\u3070\u3001\n<br>\n\u3000a\uff1aSibSp\u3068Parch\u3092\u8db3\u3057\u3066FamilySize\u3092\u5b9a\u7fa9\u3059\u308b\n<br>\n\u3000b\uff1aName\u304b\u3089\u656c\u79f0\u3092\u53d6\u308a\u51fa\u3059\n<br>\n\u3000c\uff1aCabin\u304b\u3089\u982d\u6587\u5b57\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059","29f8fe0c":"1. \u751f\u5b58\u7387\u306e\u5024\u3092\u51fa\u3057\u3066\u8a55\u4fa1\u3059\u308b"}}