{"cell_type":{"0a399dbf":"code","acc46fab":"code","8d6ea311":"code","0b21b469":"code","830cdafd":"code","b5ff101a":"code","8145e4af":"code","3d72cb7e":"code","1e558783":"code","1cf10aef":"code","2b15e946":"code","de617482":"code","f8ff95d0":"code","dbacc37e":"code","2f8b10da":"markdown","78f8f6eb":"markdown","b16422cc":"markdown","f3dc3343":"markdown","16bdd58a":"markdown","8a3eb790":"markdown","0bd1936f":"markdown","0d4ea100":"markdown"},"source":{"0a399dbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acc46fab":"import matplotlib as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport plotly as py\nimport plotly.express as px\nimport cufflinks as cf\nfrom plotly.offline import iplot,plot, download_plotlyjs, init_notebook_mode\ncf.go_offline()\n","8d6ea311":"df = pd.read_csv('..\/input\/top-play-store-games\/android-games.csv')","0b21b469":"df.head()","830cdafd":"df.shape","b5ff101a":"df.info()","8145e4af":"df.describe()","3d72cb7e":"def resamble(num):\n    if str(num).endswith('M'):\n        num = num[:-2]\n        #i = num.str.split(' ').str[0]\n        return float(num)\n        \n        \n    elif str(num).endswith('k'):\n        num = num[:-2]\n        #i = num.str.split(' ').str[0]\n        return float(num)\/1000\ndf['installs'] = df['installs'].apply(resamble)\ndf['installs'].unique()","1e558783":"Total_install = df.groupby( by = 'category').sum().reset_index()","1cf10aef":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\nx = Total_install['category']\ny = Total_install['total ratings']\n\n# Creating two subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                    shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(go.Bar(\n    x=y,\n    y=x,\n    marker=dict(\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='Total ratings in BarChart',\n    orientation='h',\n), 1, 1)\n\nfig.append_trace(go.Scatter(\n    x=y, y=x,\n    mode='lines+markers',\n    line_color='rgb(128, 0, 128)',\n    name='Total ratings in linePlot',\n), 1, 2)\n\nfig.update_layout(\n    title='Total ratings of each category',\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.85],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.47, 1],\n        side='top',\n        dtick=25000,\n    ),\n    legend=dict(x=0.029, y=1.038, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(150, 200, 25)',\n    plot_bgcolor='rgb(248, 200, 220)',\n)\n\n\nfig.show()\n","2b15e946":"\n\n\nx = Total_install['category']\ny = Total_install['installs']\n\n# Creating two subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                    shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(go.Bar(\n    x=y,\n    y=x,\n    marker=dict(\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='Number of installation in BarChart',\n    orientation='h',\n), 1, 1)\n\nfig.append_trace(go.Scatter(\n    x=y, y=x,\n    mode='lines+markers',\n    line_color='rgb(128, 0, 128)',\n    name='Number of installation in linePlot',\n), 1, 2)\n\nfig.update_layout(\n    title='Number of installation of each category',\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.85],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.47, 1],\n        side='top',\n        dtick=25000,\n    ),\n    legend=dict(x=0.029, y=1.038, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(150, 245, 245)',\n    plot_bgcolor='rgb(140, 20, 2)',\n)\n\n\nfig.show()\n","de617482":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    y=Total_install['category'],\n    x=Total_install['growth (30 days)'],\n    name='Growth in 1 month',\n    orientation='h',\n    marker=dict(\n        color='rgba(246, 78, 139, 0.6)',\n        line=dict(color='rgba(246, 78, 139, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n    y=Total_install['category'],\n    x=Total_install['growth (60 days)'],\n    name='Growth within 2 months',\n    orientation='h',\n    marker=dict(\n        color='rgba(58, 71, 80, 0.6)',\n        line=dict(color='rgba(58, 71, 80, 1.0)', width=3)\n    )\n))\n\nfig.update_layout(barmode='stack',template = \"plotly_dark\",\n                  title_text=\"Growth of each category with respect to Month \")\nfig.show()","f8ff95d0":"sns.countplot(x = df['price'], data = df)","dbacc37e":"import plotly.graph_objects as go\n\nx = Total_install['category']\nfig = go.Figure(go.Bar(x=x, y=Total_install['5 star ratings'], name='5 Star'))\nfig.add_trace(go.Bar(x=x, y=Total_install['4 star ratings'], name='4 Star'))\nfig.add_trace(go.Bar(x=x, y=Total_install['3 star ratings'], name='3 Star'))\nfig.add_trace(go.Bar(x=x, y=Total_install['2 star ratings'], name='2 Star'))\nfig.add_trace(go.Bar(x=x, y=Total_install['1 star ratings'], name='1 Star'))\n\n\n\n\n\nfig.update_layout(barmode='stack',template = \"plotly_dark\",\n                  title_text=\"Rating distribution of different types of game\", xaxis = {'categoryorder':'total descending'})\nfig.show()","2f8b10da":"Obserbations:\n\nHere we are seeing the rating in descending order. Action Game are having top most ratings in all ratings type. And here another point to notice is The amount of ratings with respect to type,\n\n5 star are top most\n\nthen 1 star,\n\nthen 4 star,\n\nthen 3 star and 2 star.","78f8f6eb":"Observations:\n\nHere we are seeing that Action types game are having most numbers of rating.If you do make a         rank.\n\n1. Game Acction.\n2. Game Causal.\n3. Game Archade.\n4. Game Strategy.\n","b16422cc":"# Objective :\n    \nHere our main target is to make  Comparision Among those Category. How  does al the feature\nvalues varies within those Groups.","f3dc3343":"Observations:\n\nGame Acton and Game Word have the Highest numbers of growth in the 30 days.Most of the types of game have higher growth in 30 days. But there are also some games which has higher growth in 60 days.\n\nGames having Higher growth in 60 days.\n\nGame Sports.\n\nGame Simulation.\n\nGame Rool Playing.\n\nGame Puzzle.\n\nGame Music.","16bdd58a":"Here our DataFrame does not contsins any null values.But here we are seeing that, the units of installs column is in million and we have to take only numeric value to analyze our data.","8a3eb790":"Here we are seeing that most of the games are free.","0bd1936f":"Thanks for your time. If you like this Please poke a commet how can i improve it.","0d4ea100":"Observations:\n\nHere some interesting point to notice is Instead of having most numbers rating Action Game does not contains highest numbers of installation. Archade and Causal types of game almost equally installed much more then others.Game like Car racing, Sports are also installed in a descent numbers. One point to notice is People are not interested in educational of game.Let's have this rank......\n\n1. Game Archade.\n\n2. Game Causal.\n\n3. Game Action.\n\n4. Game Racing.\n\n5. Game Sports."}}