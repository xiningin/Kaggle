{"cell_type":{"55eeea76":"code","e1f8c198":"code","69341916":"code","b1223f93":"code","1939b9bc":"code","ce4f3855":"code","99133126":"code","07b41ad4":"code","f7ee4ecb":"code","0e1a7326":"markdown"},"source":{"55eeea76":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pickle\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# coordinates for the goal\nGOAL_CENTER_X_COORD = 89\nGOAL_CENTER_Y_COORD = 0\n\n# read csv\ngame_plays_df = pd.read_csv('..\/input\/nhl-game-data\/game_plays.csv')\ngame_plays_df.head()","e1f8c198":"# get plays that are either a shot or a goal\nshots_df = game_plays_df.loc[(game_plays_df['event'] == 'Shot') | (game_plays_df['event'] == 'Goal')]\n\n# remove N\/A's\nshots_df = shots_df.dropna()\n\n# only include shots taken in offensive zone\nshots_df = shots_df[shots_df['st_x'] >= 25]\n\nshots_df.head()","69341916":"# categorize shots\nshots_df.secondaryType = pd.Categorical(shots_df.secondaryType)\nshots_df['shot_type'] = shots_df.secondaryType.cat.codes\n\nshots_df[['secondaryType','shot_type']].head()","b1223f93":"# compute shot angle\nshots_df['shot_angle'] = shots_df[['st_x', 'st_y']].apply(\n    lambda row: np.arctan(row['st_y']\/(89 - row['st_x'])) * (180\/np.pi),\n    axis=1\n)\n\n# compute shot distance\nshots_df['shot_dist'] = shots_df[['st_x', 'st_y']].apply(\n    lambda row: np.sqrt((row['st_x'] - GOAL_CENTER_X_COORD)**2 + (row['st_y'] - GOAL_CENTER_Y_COORD)**2),\n    axis=1\n)","1939b9bc":"# sample shots w\/o replacement\nshots_sample_df = shots_df.sample(n=1000, replace=False)","ce4f3855":"# generate train and test sets\nX = shots_sample_df[['shot_angle','shot_dist','shot_type']]\ny = shots_sample_df['event']\nindicies = range(len(shots_sample_df))\n\n# train with 75% of sample\nX_train, X_test, y_train, y_test, train_indicies, test_indicies = train_test_split(X, y, indicies, test_size=0.25)","99133126":"# perform logistic regression\nlogisticRegr = LogisticRegression()\nlogisticRegr.fit(X_train, y_train)\n\n# use the model on the test set and save the prob of goal\nprob = logisticRegr.predict_proba(X_test)[:,[0]]","07b41ad4":"# generate heat map of predicted probabilities\nx_coords = shots_sample_df['st_x'].iloc[test_indicies]\ny_coords = shots_sample_df['st_y'].iloc[test_indicies]\n\nplt.scatter(x_coords, y_coords, c=prob.T[0], cmap=plt.cm.coolwarm)\nplt.plot(GOAL_CENTER_X_COORD, GOAL_CENTER_Y_COORD, 'kx')\nplt.axis([25, 100, -42.5, 42.5])\nplt.show()","f7ee4ecb":"# print the model's score\nscore = logisticRegr.score(X_test, y_test)\nprint(score)","0e1a7326":"Still need to filter data to only consider **even strength** shots."}}