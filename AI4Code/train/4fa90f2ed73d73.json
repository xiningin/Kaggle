{"cell_type":{"3e21db98":"code","0858eab6":"code","04ce9848":"code","0b2515f3":"code","75df90d8":"code","4a47d8b8":"code","08942ecc":"code","6e1c584a":"code","303cd40c":"code","442e1cff":"code","d7148bcb":"code","992a27c4":"code","8cdddbc5":"code","f954e488":"code","6fbb6f64":"code","eb1be666":"code","7e691f1a":"code","2f412746":"code","8a367f1b":"code","cbf21dba":"code","4d0fefed":"code","26d97963":"code","53a5ad43":"code","4faf7356":"code","a79d83d6":"code","fd703c3e":"code","49dd40cf":"code","4b0dd0f4":"code","d7988e04":"code","b8b09bcf":"code","891ed99f":"code","ba270541":"code","394f9a42":"code","73f54a95":"code","9dfbd0fb":"code","b25eeae7":"code","b662bd7d":"code","4f6e631b":"code","306538a5":"code","63e7abfd":"code","960ac564":"code","9a48bfa8":"code","7f161ac9":"code","55389e56":"code","d1249d8c":"code","c0118336":"code","6606fdbb":"code","3deebc37":"code","a356bc2b":"code","5185b535":"code","ff404f87":"code","d3070b67":"markdown","f745cb31":"markdown","0d294625":"markdown","11338b9a":"markdown","85082a6b":"markdown","2b769cbe":"markdown","3117c54e":"markdown","c5411af1":"markdown","7a626a05":"markdown"},"source":{"3e21db98":"import numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv('..\/input\/train_transaction.csv')\ntest = pd.read_csv('..\/input\/test_transaction.csv')\nsub = pd.read_csv('..\/input\/sample_submission.csv')","0858eab6":"useful_features = list(train.iloc[:, 3:55].columns)\n\ny = train.sort_values('TransactionDT')['isFraud']\nX = train.sort_values('TransactionDT')[useful_features]\nX_test = test[useful_features]\ndel train, test","04ce9848":"useful_features","0b2515f3":"categorical_features = [\n    'ProductCD',\n    'card1', 'card2', 'card3', 'card4', 'card5', 'card6',\n    'addr1', 'addr2',\n    'P_emaildomain',\n    'R_emaildomain',\n    'M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'M9'\n]\n\ncontinuous_features = list(filter(lambda x: x not in categorical_features, X))","75df90d8":"class ContinuousFeatureConverter:\n    def __init__(self, name, feature, log_transform):\n        self.name = name\n        self.skew = feature.skew()\n        self.log_transform = log_transform\n        \n    def transform(self, feature):\n        if self.skew > 1:\n            feature = self.log_transform(feature)\n        \n        mean = feature.mean()\n        std = feature.std()\n        return (feature - mean)\/(std + 1e-6)        ","4a47d8b8":"from tqdm.autonotebook import tqdm\n\nfeature_converters = {}\ncontinuous_features_processed = []\ncontinuous_features_processed_test = []\n\nfor f in tqdm(continuous_features):\n    feature = X[f]\n    feature_test = X_test[f]\n    log = lambda x: np.log10(x + 1 - min(0, x.min()))\n    converter = ContinuousFeatureConverter(f, feature, log)\n    feature_converters[f] = converter\n    continuous_features_processed.append(converter.transform(feature))\n    continuous_features_processed_test.append(converter.transform(feature_test))\n    \ncontinuous_train = pd.DataFrame({s.name: s for s in continuous_features_processed}).astype(np.float32)\ncontinuous_test = pd.DataFrame({s.name: s for s in continuous_features_processed_test}).astype(np.float32)","08942ecc":"continuous_train['isna_sum'] = continuous_train.isna().sum(axis=1)\ncontinuous_test['isna_sum'] = continuous_test.isna().sum(axis=1)\n\ncontinuous_train['isna_sum'] = (continuous_train['isna_sum'] - continuous_train['isna_sum'].mean())\/continuous_train['isna_sum'].std()\ncontinuous_test['isna_sum'] = (continuous_test['isna_sum'] - continuous_test['isna_sum'].mean())\/continuous_test['isna_sum'].std()","6e1c584a":"isna_columns = []\nfor column in tqdm(continuous_features):\n    isna = continuous_train[column].isna()\n    if isna.mean() > 0.:\n        continuous_train[column + '_isna'] = isna.astype(int)\n        continuous_test[column + '_isna'] = continuous_test[column].isna().astype(int)\n        isna_columns.append(column)\n        \ncontinuous_train = continuous_train.fillna(continuous_train.median())\ncontinuous_test = continuous_test.fillna(continuous_test.median())","303cd40c":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom tqdm.autonotebook import tqdm\n\ndef categorical_encode(df_train, df_test, categorical_features, n_values=140):\n    df_train = df_train[categorical_features].astype(str)\n    df_test = df_test[categorical_features].astype(str)\n    \n    categories = []\n    for column in tqdm(categorical_features):\n        categories.append(list(df_train[column].value_counts().iloc[: n_values - 1].index) + ['Other'])\n        values2use = categories[-1]\n        df_train[column] = df_train[column].apply(lambda x: x if x in values2use else 'Other')\n        df_test[column] = df_test[column].apply(lambda x: x if x in values2use else 'Other')\n        \n    \n    ohe = OneHotEncoder(categories=categories)\n    ohe.fit(pd.concat([df_train, df_test]))\n    df_train = pd.DataFrame(ohe.transform(df_train).toarray()).astype(np.float16)\n    df_test = pd.DataFrame(ohe.transform(df_test).toarray()).astype(np.float16)\n    return df_train, df_test","442e1cff":"for feat in categorical_features:\n    print(X[feat].nunique())","d7148bcb":"train_categorical, test_categorical = categorical_encode(X, X_test, categorical_features)","992a27c4":"num_shape = continuous_train.shape[1]\ncat_shape = train_categorical.shape[1]","8cdddbc5":"X = pd.concat([continuous_train, train_categorical], axis=1)\ndel continuous_train, train_categorical\nX_test = pd.concat([continuous_test, test_categorical], axis=1)\ndel continuous_test, test_categorical","f954e488":"test_rows = X_test.shape[0]","6fbb6f64":"X = pd.concat([X, X_test], axis = 0)","eb1be666":"del X_test","7e691f1a":"import keras\nimport random\nimport tensorflow as tf\nimport keras.backend as K\n\nfrom keras.models import Model\nfrom keras.layers import Dense, Input, Dropout, BatchNormalization, Activation\nfrom keras.utils.generic_utils import get_custom_objects\nfrom keras.optimizers import Adam, Nadam\nfrom keras.callbacks import Callback\nfrom sklearn.metrics import roc_auc_score\n\nnp.random.seed(42) # NumPy\nrandom.seed(42) # Python\ntf.set_random_seed(42) # Tensorflow","2f412746":"# Compatible with tensorflow backend\nclass roc_callback(Callback):\n    def __init__(self,training_data,validation_data):\n        self.x = training_data[0]\n        self.y = training_data[1]\n        self.x_val = validation_data[0]\n        self.y_val = validation_data[1]\n\n\n    def on_train_begin(self, logs={}):\n        return\n\n    def on_train_end(self, logs={}):\n        return\n\n    def on_epoch_begin(self, epoch, logs={}):\n        return\n\n    def on_epoch_end(self, epoch, logs={}):\n        y_pred_val = self.model.predict(self.x_val)\n        roc_val = roc_auc_score(self.y_val, y_pred_val)\n        print('\\rroc-auc_val: %s' % (str(round(roc_val,4))),end=100*' '+'\\n')\n        return\n\n    def on_batch_begin(self, batch, logs={}):\n        return\n\n    def on_batch_end(self, batch, logs={}):\n        return\n    \ndef focal_loss(gamma=2., alpha=.25):\n    def focal_loss_fixed(y_true, y_pred):\n        pt_1 = tf.where(tf.equal(y_true, 1), y_pred, tf.ones_like(y_pred))\n        pt_0 = tf.where(tf.equal(y_true, 0), y_pred, tf.zeros_like(y_pred))\n        return -K.mean(alpha * K.pow(1. - pt_1, gamma) * K.log(K.epsilon()+pt_1))-K.mean((1-alpha) * K.pow( pt_0, gamma) * K.log(1. - pt_0 + K.epsilon()))\n    return focal_loss_fixed\n\ndef custom_gelu(x):\n    return 0.5 * x * (1 + tf.tanh(tf.sqrt(2 \/ np.pi) * (x + 0.044715 * tf.pow(x, 3))))\n\nget_custom_objects().update({'custom_gelu': Activation(custom_gelu)})\nget_custom_objects().update({'focal_loss_fn': focal_loss()})","8a367f1b":"from keras.layers import concatenate","cbf21dba":"K.clear_session()\nfrom keras.optimizers import Adam\nfrom keras import regularizers\nfrom keras.regularizers import l2 \ndef create_model():\n    num_inp = Input(shape=(num_shape,))\n    cat_inp = Input(shape=(cat_shape,))\n    inps = concatenate([num_inp, cat_inp])\n    x = Dense(128, activation=\"selu\",\\\n                kernel_initializer='lecun_normal')(inps)\n    x = Dense(64, activation=\"relu\")(x)\n    x = Dense(32, activation=custom_gelu)(x)\n    x = Dense(32, activation=custom_gelu)(x)\n    x = Dense(64, activation=\"relu\")(x)\n    x = Dense(128, activation='selu',kernel_initializer='lecun_normal')(x)\n    #x = Dropout(.2)(x)\n    cat_out = Dense(cat_shape, activation = \"linear\")(x)\n    num_out = Dense(num_shape, activation = \"linear\")(x)\n    model = Model(inputs=[num_inp, cat_inp], outputs=[num_out, cat_out])\n    model.compile(\n        optimizer=Adam(.05, clipnorm = 1, clipvalue = 1),\n        loss=[\"mse\", \"mse\"]\n    )\n      \n\n    return model","4d0fefed":"model_mse = create_model()","26d97963":"model_mse.summary()","53a5ad43":"def inputSwapNoise(arr, p):\n    n, m = arr.shape\n    idx = range(n)\n    swap_n = round(n*p)\n    for i in range(m):\n        col_vals = np.random.permutation(arr[:, i]) # change the order of the row\n        swap_idx = np.random.choice(idx, size= swap_n) # choose row\n        arr[swap_idx, i] = np.random.choice(col_vals, size = swap_n) # n*p row and change it \n    return arr","4faf7356":"def auto_generator(X, swap_rate, batch_size):\n    indexes = np.arange(X.shape[0])\n    while True:\n        np.random.shuffle(indexes)\n        num_X = X[indexes[:batch_size], :num_shape] \n        num_y = inputSwapNoise(num_X, swap_rate)\n        cat_X = X[indexes[:batch_size], num_shape:] \n        cat_y = inputSwapNoise(cat_X, swap_rate)\n        yield [num_y, cat_y], [num_X, cat_X]","a79d83d6":"batch_size = 2048#128","fd703c3e":"from keras.callbacks import ModelCheckpoint, LearningRateScheduler\nauto_ckpt = ModelCheckpoint(\"ae.model\", monitor='loss', verbose=1, save_best_only=True, save_weights_only=True, mode='min', period=1)","49dd40cf":"from keras import backend as K\n\n\nclass WarmUpLearningRateScheduler(keras.callbacks.Callback):\n    \"\"\"Warmup learning rate scheduler\n    \"\"\"\n\n    def __init__(self, warmup_batches, init_lr, verbose=0):\n        \"\"\"Constructor for warmup learning rate scheduler\n\n        Arguments:\n            warmup_batches {int} -- Number of batch for warmup.\n            init_lr {float} -- Learning rate after warmup.\n\n        Keyword Arguments:\n            verbose {int} -- 0: quiet, 1: update messages. (default: {0})\n        \"\"\"\n\n        super(WarmUpLearningRateScheduler, self).__init__()\n        self.warmup_batches = warmup_batches\n        self.init_lr = init_lr\n        self.verbose = verbose\n        self.batch_count = 0\n        self.learning_rates = []\n\n    def on_batch_end(self, batch, logs=None):\n        self.batch_count = self.batch_count + 1\n        lr = K.get_value(self.model.optimizer.lr)\n        self.learning_rates.append(lr)\n\n    def on_batch_begin(self, batch, logs=None):\n        if self.batch_count <= self.warmup_batches:\n            lr = self.batch_count*self.init_lr\/self.warmup_batches\n            K.set_value(self.model.optimizer.lr, lr)\n            if self.verbose > 0:\n                print('\\nBatch %05d: WarmUpLearningRateScheduler setting learning '\n                      'rate to %s.' % (self.batch_count + 1, lr))\nwarm_up_lr = WarmUpLearningRateScheduler(400, init_lr=0.005)","4b0dd0f4":"import gc\ngc.collect()","d7988e04":"gc.collect()\nepochs = 30\ntrain_gen = auto_generator(X.values, .25, batch_size)\nhist = model_mse.fit_generator(train_gen, steps_per_epoch=len(X)\/\/batch_size, epochs=epochs,\n                           verbose=1, workers=-1, \n                           use_multiprocessing=True,\n                              callbacks=[auto_ckpt, warm_up_lr])","b8b09bcf":"del train_gen\ngc.collect()\nmodel_mse.load_weights(\"ae.model\")","891ed99f":"for layer in model_mse.layers:\n    layer.trainable = False\nmodel_mse.compile(\n    optimizer=\"adam\",\n    loss=[\"mse\", \"mse\"]\n)","ba270541":"model_mse.summary()","394f9a42":"def make_model(loss_fn):\n    x1 = model_mse.layers[3].output\n    x2 = model_mse.layers[4].output\n    x3 = model_mse.layers[5].output\n    x4 = model_mse.layers[6].output\n    x5 = model_mse.layers[7].output\n    x6 = model_mse.layers[8].output\n    x_conc = concatenate([x1,x2,x3, x4, x5, x6])\n    x = Dropout(.1)(x_conc)\n    x = Dense(500, activation='relu')(x)\n    x = Dropout(.3)(x)\n    x = Dense(200, activation='sigmoid')(x)\n    x = Dropout(.3)(x)\n    x = Dense(100, activation='relu')(x)\n    #x = Dropout(.5)(x)\n    x = Dense(1, activation = 'sigmoid')(x)\n    model = Model([model_mse.layers[0].input, model_mse.layers[1].input], x)\n    model.compile(\n        optimizer=\"adam\",\n        loss=[loss_fn]\n    )\n    return model","73f54a95":"fraud_model = make_model(\"binary_crossentropy\")\nfraud_focal_model = make_model(\"focal_loss_fn\")","9dfbd0fb":"X_test = X.iloc[-test_rows:, :]\nX = X.iloc[:-test_rows, :]","b25eeae7":"import gc\ngc.collect()","b662bd7d":"split_ind = int(X.shape[0]*0.8)\n\nX_tr = X.iloc[:split_ind]\nX_val = X.iloc[split_ind:]\n\ny_tr = y.iloc[:split_ind]\ny_val = y.iloc[split_ind:]\n\ndel X","4f6e631b":"from keras.callbacks import ModelCheckpoint\nckpt = ModelCheckpoint(\"best_fraud.model\", monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=True, mode='min', period=1)","306538a5":"gc.collect()","63e7abfd":"fraud_model.fit([X_tr.iloc[:, :num_shape], X_tr.iloc[:, num_shape:]], y_tr, epochs=100,\n                batch_size=2048, \n                validation_data = ([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], y_val),\n               callbacks=[ckpt], verbose = 2)","960ac564":"valid_preds = fraud_model.predict([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], batch_size = 8000, verbose = True)\nroc_auc_score(y_val, valid_preds)","9a48bfa8":"fraud_model.load_weights(\"best_fraud.model\")\nvalid_preds = fraud_model.predict([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], batch_size = 8000, verbose = True)\nroc_auc_score(y_val, valid_preds)","7f161ac9":"ckpt2 = ModelCheckpoint(\"best_fraud_focal.model\", monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=True, mode='min', period=1)\nfraud_focal_model.fit([X_tr.iloc[:, :num_shape], X_tr.iloc[:, num_shape:]], y_tr, epochs=100, batch_size=2048, \n                validation_data = ([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], y_val),\n               callbacks=[ckpt2], verbose = 2)","55389e56":"fraud_model.load_weights(\"best_fraud.model\")","d1249d8c":"fraud_focal_model.load_weights(\"best_fraud_focal.model\")","c0118336":"valid_preds = fraud_model.predict([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], batch_size = 8000, verbose = True)\nroc_auc_score(y_val, valid_preds)","6606fdbb":"from scipy.stats import rankdata, spearmanr\nvalid_preds = fraud_model.predict([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], batch_size = 8000, verbose = True)\nvalid_preds2 = fraud_focal_model.predict([X_val.iloc[:, :num_shape], X_val.iloc[:, num_shape:]], batch_size = 8000, verbose = True)\nscore = roc_auc_score(y_val, valid_preds)\nscore2 = roc_auc_score(y_val, valid_preds2)\nscore_avg = roc_auc_score(y_val, (.5*valid_preds) + (.5*valid_preds2))\nprint(score)\nprint(score2)\nprint(score_avg)\nprint('Rank averaging: ', roc_auc_score(y_val, rankdata(valid_preds, method='dense') + rankdata(valid_preds2, method='dense')))","3deebc37":"X_tr = pd.concat([X_tr, X_val, X_val, X_val, X_val], axis = 0)\ny_tr = pd.concat([y_tr, y_val, y_val, y_val, y_val], axis = 0)","a356bc2b":"fraud_model.fit([X_tr.iloc[:, :num_shape], X_tr.iloc[:, num_shape:]], y_tr, epochs=10, batch_size=2048)\nfraud_focal_model.fit([X_tr.iloc[:, :num_shape], X_tr.iloc[:, num_shape:]], y_tr, epochs=10, batch_size=2048)","5185b535":"test_preds = fraud_model.predict([X_test.iloc[:, :num_shape], X_test.iloc[:, num_shape:]], batch_size = 8000)\ntest_preds2 = fraud_focal_model.predict([X_test.iloc[:, :num_shape], X_test.iloc[:, num_shape:]], batch_size = 8000)","ff404f87":"sub['isFraud'] = rankdata(test_preds, method='dense') + rankdata(test_preds2, method='dense')\nsub.isFraud = sub.isFraud\/sub.isFraud.max()\nsub.to_csv('submission.csv', index=False)","d3070b67":"We will train one with binary crossentropy and another with focal loss just like the previous kernel","f745cb31":"What we will do here is construct a simple autoencoder that will take in our noised numeric and categorical features, concatenate them and then pass them through several dense layers that will then try to predict our original unnoised numeric and categorical features. What this will do is in essence try to learn the relationships between the features and which features should co-occur. ","0d294625":"Next we will make a new model that branches off the previous one. This will take in non-noisy inputs and pass them through the encoding part of the autoencoder and then concatenated all of the middle layers of the encoder and then we will train our classifier based on the features that concatenated encoder outputs. ","11338b9a":"I've always wanted to try autoencoders for tabular data and finally found an excuse to try them out. This kernel heavily borrows from https:\/\/www.kaggle.com\/abazdyrev\/keras-nn-focal-loss-experiments who did a better job formatting the data than I did in my first NN starter kernel. https:\/\/www.kaggle.com\/ryches\/keras-nn-starter-w-time-series-split. It takes inspiration from Christof's post here https:\/\/www.kaggle.com\/c\/petfinder-adoption-prediction\/discussion\/88740#latest-515210 and Michael Jahrer's famous Porto Seguro solution","85082a6b":"In the autoencoder we were able to take advantage of being able to train on both the train and test set because the autoencoder was trying to guess inputs rather than our target. No we will split our test set back out because we will be training on those targets for the second phase and we dont have that information for the test set","2b769cbe":"\nNow we will train the autoencoder using our generator for several epochs","3117c54e":"We will create a small generator so that we can continuously do this swapping and create new samples for the model to see","c5411af1":"Now we need to invent some realistic noise. As Michael noted in his post he used something he called swap noise. What this is doing is swapping a columns values with other possible values from that column a certain percentage of the time. For example say there is a feature like TransactionAMT. If we used swap noise on that column it would swap 15% of the rows of the TransactionAMT column with other possible values (like swapping 20 for 400, etc.). The model would then see 400 was swapped in and all of the other features around it and it would try to learn that 20 was the real original value and try to correct the various errors we have introduced into the input.  ","7a626a05":"Now we will freeze the layers of the autoencoder"}}