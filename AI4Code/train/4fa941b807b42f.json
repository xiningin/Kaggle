{"cell_type":{"664f9f36":"code","8b0c5ede":"code","05a008df":"code","17c4c780":"code","e7506540":"code","a2fdcc00":"code","ff733892":"code","96fbe5ba":"code","7f522063":"code","69e727a8":"code","c0e701d2":"code","e9bce523":"code","b793edb0":"code","7e4fb1a9":"code","c03cab15":"code","70a7e0a1":"code","9b7f7cb7":"code","c96967b6":"code","9e83a997":"code","dd24ebd8":"markdown","8f0085ac":"markdown","580d24e7":"markdown","484aabf4":"markdown","1b6a7932":"markdown","5a05cf14":"markdown","b0f5990f":"markdown","d4467609":"markdown"},"source":{"664f9f36":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom catboost import CatBoostClassifier","8b0c5ede":"#Read the data\n\n#train data\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\n\n#test data\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\n\n#sample submission\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\",index_col='Id')","05a008df":"#reduce the size of dataframe. Credits to https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021\/discussion\/291844\n\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","17c4c780":"#aply reduction to train dataframe\n\ntrain_df = reduce_mem_usage(train)","e7506540":"#aply reduction to test dataframe\n\ntest_df = reduce_mem_usage(test)","a2fdcc00":"#columns names\n\ncolumnas = train_df.columns\ntrain_df[columnas].dtypes","ff733892":"#function for kde plot - Train and Test\n\ndef kde_plot(var):\n    fig = plt.figure(figsize=(10,6))\n    sns.kdeplot(data=train_df, x=var)\n    sns.kdeplot(data=test_df, x=var)\n    fig.legend(labels=['train','test'])\n    plt.title(var)\n    plt.show()","96fbe5ba":"#Plot all numerical variables\n\nfor i in columnas[1:11]:\n    kde_plot(i)","7f522063":"#function for kde plot - Train and Test\n\ndef count_plot(var):\n    fig,axs = plt.subplots(ncols=2,figsize=(16,9))\n    sns.countplot(x=var,data=train_df,ax=axs[0])\n    sns.countplot(x=var,data=test_df,ax=axs[1])\n    axs[0].title.set_text('Train')\n    axs[1].title.set_text('Test')\n    plt.show()","69e727a8":"#Plot all numerical variables\n\nfor i in columnas[12:-1]:\n    count_plot(i)","c0e701d2":"fig = plt.figure(figsize=(10,6))\nsns.countplot(x=\"Cover_Type\",data=train_df)\nplt.show()","e9bce523":"train.columns","b793edb0":"x = train[train.columns[~train.columns.isin(['Id','Cover_Type'])]]\nx.head()","7e4fb1a9":"y = train['Cover_Type']\ny.head()","c03cab15":"model = CatBoostClassifier()","70a7e0a1":"grid = {'learning_rate': [0.03, 0.1],\n        'depth': [2,4, 6, 10],\n        'l2_leaf_reg': [1, 3, 5]}","9b7f7cb7":"model_final = model.randomized_search(grid,\n                                      X=x,\n                                      y=y,\n                                      plot=True)","c96967b6":"submission.head()","9e83a997":"submission['Cover_Type'] = model_final.predict(test)\nsubmission.to_csv('modelo_4.csv')","dd24ebd8":"## 0. Modules, Data Read and dataframe dimension reduction","8f0085ac":"In principle, no data drifting is observed between the corresponding variables train and test","580d24e7":"# Tabular Playgroud Series - December 2021","484aabf4":"### 1.3 Target","1b6a7932":"### 1.2 Categorical Variables","5a05cf14":"## 1. Exploratory Data Analisys","b0f5990f":"## 2. Model","d4467609":"### 1.1 Continuos Variables"}}