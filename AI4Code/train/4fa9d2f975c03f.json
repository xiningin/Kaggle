{"cell_type":{"e0090dfd":"code","79a9a4b6":"code","eef12248":"code","4de5a8ee":"code","5d0fa7ec":"code","476893a3":"code","2bc1c6df":"code","98c1e9ad":"code","3d21341e":"code","3bc4d92b":"code","86636bd9":"markdown","47ae6744":"markdown","433202a5":"markdown"},"source":{"e0090dfd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","79a9a4b6":"#First we load the datasets\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nitem_cat = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","eef12248":"sales_train.head(5)","4de5a8ee":"#this code split dates in months ans years and create a new column with year-month\nsales_train['Month']=[i.split('.')[1] for i in sales_train['date']]\nsales_train['Year']=[i.split('.')[2] for i in sales_train['date']]\nsales_train['Month-Year']=sales_train['Year']+'-'+sales_train['Month']","5d0fa7ec":"#Here we agreggate total sales per motnh and year. Notice how we select only Octover 2015\ndt=sales_train.groupby(['item_id','shop_id','Month-Year']).sum()[['item_cnt_day']].reset_index()\ndt=dt[dt['Month-Year']=='2015-10']","476893a3":"#We know that there are items and shops combinations in test set that don't exist in sales_train set. We'll fill missing values with 0's\nsubmission=pd.merge(test,dt,how='left',on=['item_id','shop_id']).fillna(0)","2bc1c6df":"#We change some columns names\nsubmission.columns=['ID', 'shop_id', 'item_id', 'Month-Year', 'item_cnt_month']","98c1e9ad":"#Here We clip item_cnt_month values between 0 and 20\nsubmission['item_cnt_month'] = submission['item_cnt_month'].clip(0,20)","3d21341e":"#We glance at our data\nsubmission.head()","3bc4d92b":"#Finally, I select my columns and create my submission\nsubmission[['ID','item_cnt_month']].to_csv('previous_value_benchmark.csv',index=False)","86636bd9":"Notes:\n\n1. This is a really quick kernel mainly created to prove how good the previous values bechmark is as a prediction. Futhermore we can upload our submission clipping our prediction between 0 and 20 and without it for cheking the effects that this has in both submissions.\n\n2. Clipping the prediction column between 0 and 20 is a piece of advice given during the course. \n\n3. The final score is in fact 1.16777 better than a buch of results got it using more sophisticated models.\n\nThank you for reading this.","47ae6744":"We are going to use only the \"sales_train\" dataset. Our way is quite simple, first we are going to agreggate sales per month and select total sales per item and shop for October 2015. We use this data to predict November 2015 sales.","433202a5":"**Introduction**\n\nHello everybody, this is a quick exersice to demostrate the fact that using the previous values benchmark gives us a relative good score. Of course I'm trying more sophisticated model that I'd be sharing in the future."}}