{"cell_type":{"07f5a105":"code","92a95658":"code","8c093d7f":"code","a95c37a2":"code","d79caed2":"code","fc433d27":"code","baf23e60":"code","614ae015":"code","457030c9":"code","7a533a52":"code","afdb49c3":"code","09f9ea8d":"code","47d31157":"code","9c66d885":"code","931c5d4b":"code","947ed690":"code","e82ea7ee":"code","f9db495f":"code","221f705b":"code","c9944595":"code","ae2735c2":"code","4d925cfd":"code","00dcd005":"code","ba0b55c0":"markdown","cbbff016":"markdown","6e18bc84":"markdown","1270b779":"markdown","86689990":"markdown","42e023e9":"markdown","9ecff3aa":"markdown","9f4acfee":"markdown","d4b4f398":"markdown","9f85f12d":"markdown","a2a1dd24":"markdown","12499c76":"markdown","c6b23a7c":"markdown","da690aaf":"markdown","f1df6727":"markdown"},"source":{"07f5a105":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import StandardScaler, scale\nfrom sklearn.linear_model import LinearRegression, Lasso, RANSACRegressor\nfrom sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","92a95658":"dataset = pd.read_csv(\"..\/input\/real-estate-price-prediction\/Real estate.csv\")","8c093d7f":"dataset.head()","a95c37a2":"dataset.isnull().sum()","d79caed2":"x = dataset.iloc[:, :-1] #Independent Features\ny = dataset.iloc[:, -1] #Dependent\/Target Features","fc433d27":"lasso = Lasso(random_state=7).fit(x,y)\nmodel = SelectFromModel(lasso, prefit=True)\nx_new = model.transform(x)\nselected_feat = pd.DataFrame(model.inverse_transform(x_new), columns=x.columns, index=x.index)\nselected_feat.head()","baf23e60":"selected_col = selected_feat.columns[selected_feat.var() != 0]\nX = dataset[selected_col]\nX.head()","614ae015":"plt.figure(figsize=(10,8))\nplt.subplot(221, title=\"X2 House age\")\nsns.distplot(X['X2 house age'])\n\nplt.subplot(222, title=\"Distance Nearest MRT Station\", facecolor = 'y')\nsns.distplot(X['X3 distance to the nearest MRT station'])\n\nplt.subplot(223, title=\"Convenience Stores\", facecolor = 'w')\nsns.distplot(X['X4 number of convenience stores'])\n\nplt.subplot(224, title=\"Serial Number\", facecolor = 'y')\nsns.distplot(X['No'])","457030c9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .25, random_state = 0)","7a533a52":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","afdb49c3":"def reg_score(y_test, y_pred):\n    print(f'RMSE Score \\t - \\t{np.sqrt(mean_squared_error(y_test, y_pred))}')\n    print(f'R2 Score \\t - \\t{r2_score(y_test, y_pred)}')\n    print(f'MAE Score \\t - \\t{mean_absolute_error(y_test, y_pred)}')","09f9ea8d":"reg = LinearRegression() \nreg.fit(X_train, y_train)\nreg.score(X_test, y_test)","47d31157":"y_predLN = reg.predict(X_test)\nreg_score(y_test, y_predLN)","9c66d885":"rfm = RandomForestRegressor()\nrfm.fit(X_train, y_train)\nrfm.score(X_test, y_test)","931c5d4b":"y_predRF = rfm.predict(X_test)\nreg_score(y_test, y_predRF)","947ed690":"gbm = GradientBoostingRegressor()\ngbm.fit(X_train, y_train)\ngbm.score(X_test, y_test)","e82ea7ee":"y_predGB = gbm.predict(X_test)\nreg_score(y_test, y_predGB)","f9db495f":"rnr = RANSACRegressor()\nrnr.fit(X_train, y_train)\nrnr.score(X_test, y_test)","221f705b":"y_predRN = rnr.predict(X_test)\nreg_score(y_test, y_predRN)","c9944595":"plt.figure(figsize=(10,5))\nplt.scatter(y_test, y_predLN)\nplt.xlabel('Target', size=20)\nplt.ylabel('Prediction', size=20)\nplt.show()","ae2735c2":"comparedDF = pd.DataFrame(y_test)\ncomparedDF.head()","4d925cfd":"comparedDF['Prediction'] = y_predRN #Using the RANSAC Predicted Model\ncomparedDF.reset_index(drop=True, inplace=True) #Reset the index to count sequentially\ncomparedDF['Prediction'] = comparedDF['Prediction'].apply(lambda x: f'{x:.1f}') #Change the Prediction feature to 1dp","00dcd005":"comparedDF.head(10)","ba0b55c0":"### Feature Scaling","cbbff016":"### Build Models","6e18bc84":"### Comparing y_pred with y_test","1270b779":"### Import Dataset","86689990":"### Split dataset to train_test","42e023e9":"### Check and Fill Missing Columns","9ecff3aa":"### Select Columns Without Zero's as Values","9f4acfee":"### Import Modules","d4b4f398":"### RandomForest Model","9f85f12d":"### RANSAC Model","a2a1dd24":"### Visualisation","12499c76":"### GradientBoosting Regressor","c6b23a7c":"### Linear Regression Model","da690aaf":"### Note\nStandard Scale may or may not affect our model performance.","f1df6727":"### Feature Selection"}}