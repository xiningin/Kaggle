{"cell_type":{"d772aec4":"code","a28e28ce":"code","75e2a62f":"code","6a3f43aa":"code","c87153df":"code","84f872f7":"code","ca40a93e":"code","3496bea7":"code","e7da1273":"code","dfd14a32":"code","0c3837eb":"code","78380689":"markdown","10475f21":"markdown","ee9610f7":"markdown","6415fa39":"markdown","d798c314":"markdown"},"source":{"d772aec4":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport re as re\n\ntrain = pd.read_csv('..\/input\/train.csv', header = 0, dtype={'Age': np.float64})\ntest  = pd.read_csv('..\/input\/test.csv' , header = 0, dtype={'Age': np.float64})\nids = test['PassengerId']\nfull_data = [train, test]\n\nprint (train.info())\nprint (test.info())","a28e28ce":"print (train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","75e2a62f":"for dataset in full_data:\n    age_avg \t   = dataset['Age'].mean()\n    age_std \t   = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain['CategoricalAge'] = pd.cut(train['Age'], 5)\n\nprint (train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean())","6a3f43aa":"import random\nfor dataset in full_data:\n    a=random.choice(['S','C','Q'])\n    dataset['Embarked'] = dataset['Embarked'].fillna(\"S\")\nprint (train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","c87153df":"for dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\ntrain['CategoricalFare'] = pd.qcut(train['Fare'], 4)\nprint (train[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean())","84f872f7":"for dataset in full_data:\n    dataset['Cabin'] = dataset['Cabin'].fillna('0')\n#train['CategoricalFare'] = pd.qcut(train['Fare'], 4)\nfor dataset in full_data:\n    dataset.loc[ dataset['Cabin'] != '0', 'Cabin'] = '1'\n    dataset['Cabin'] = dataset['Cabin'].astype(int)\nprint (train[['Cabin', 'Survived']].groupby(['Cabin'], as_index=False).mean())","ca40a93e":"def get_title(name):\n\ttitle_search = re.search(' ([A-Za-z]+)\\.', name)\n\t# If the title exists, extract and return it.\n\tif title_search:\n\t\treturn title_search.group(1)\n\treturn \"\"\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n\nprint(pd.crosstab(train['Title'], train['Sex']))\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nprint (train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean())","3496bea7":"for dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    #dataset['Fare']=dataset['Fare']\/max(dataset['Fare'])\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4\n    #dataset['Age']=dataset['Age']\/max(dataset['Age'])\n\n# Feature Selection . \ndrop_elements = ['PassengerId', 'Name', 'Ticket'\n                 ]\ntrain = train.drop(drop_elements, axis = 1)\ntrain = train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)\n\n\ntest  = test.drop(drop_elements, axis = 1)\n\nprint (train.head(10))\n\ntrain = train.values\ntest  = test.values","e7da1273":"from keras.utils import np_utils\nX = train[0::, 1::]\ny = train[0::, 0]\n#Y=np_utils.to_categorical(y)","dfd14a32":"from tpot import TPOTClassifier\nmodel = TPOTClassifier(generations=10,population_size=100,random_state=433, verbosity=2)\nmodel.fit(X,y)","0c3837eb":"#model.fit(train[0::, 1::], train[0::, 0])\nresult = model.predict(test)\n#result=[np.argmax(pred) for pred in result]\npdtest = pd.DataFrame({'PassengerId': ids,\n                            'Survived': result})\npdtest.to_csv('gptest.csv', index=False)","78380689":"filling the null values in ages by sampling from a normal distribution with mean , varience calculated from data ","10475f21":"separating title from names","ee9610f7":"Categoriging based on having a cabin or not . NULL value in cabit row denotes not having a cabin . then seeing it's effect on survival ","6415fa39":"Seeing the effect of FARE on survival ","d798c314":"Filling the null values in Embarked by the maximum occured value 'S'"}}