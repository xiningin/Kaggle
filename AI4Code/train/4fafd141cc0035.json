{"cell_type":{"d5b00ed1":"code","cf7d310c":"code","38af3ae2":"code","d61c7cb0":"code","f54b9100":"code","a22d8cce":"code","f7365953":"code","2964c78b":"code","2b622fae":"code","2a688ae1":"code","680f0e42":"code","85f8fa9f":"code","87dacc30":"code","91e4042c":"code","69666324":"code","bbdd082e":"code","f4cd0034":"code","b0b4115d":"code","1551ce3e":"code","63aa9187":"code","842d8b24":"code","a5e00ade":"code","2db732e2":"code","917d1e85":"code","7c2ab818":"code","c6ec1e26":"code","4c432979":"code","35ab0093":"code","8941604b":"code","9a549519":"code","9d1a129c":"code","7c6b1909":"code","4c4293b7":"code","ce001ad4":"code","791e4b40":"code","79974ba4":"code","0f59b79a":"code","51ab0e11":"code","c9784e61":"code","2e2d44ef":"code","3a20a853":"code","dd329ce4":"code","15ccb6aa":"code","3b96403d":"code","34a5c2dc":"code","06360096":"code","c4e01e23":"code","52fd476c":"code","c0f2365e":"code","99d87918":"code","e6b642c4":"markdown","65999d26":"markdown","54e2e2f5":"markdown","3c327ba2":"markdown","c3fbff2e":"markdown","2436a543":"markdown","0f6244ed":"markdown"},"source":{"d5b00ed1":"import sys\n\nrandomLst = ['a',0,2]\n\nfor entry in randomLst:\n  try:\n    #here are the suspicious statements\n    print(\"The entry point is :\", entry)\n\n    r = 1\/int(entry)    #this will generate exceptions\n    break\n  \n  except:\n    print(\"Oops! \",sys.exc_info()[0], \"occured\")\n    print(\"Next entry\")\n    print()\n\nprint(\"The reciprocal of \",entry, \" is \", r)","cf7d310c":"#Numpy Arrays\n\n#list of put volume data in lacs\nput_vol = [52.89, 45.14, 63.84, 77.1, 74.6]\n\n#list of call volume in lacs\ncall_vol = [49.41, 50.45, 59.11, 80.49, 65.11]","38af3ae2":"#lets install numpy in colab\n!pip install -q numpy","d61c7cb0":"#lets import numpy \nimport numpy as np\n\nn_put_vol = np.array(put_vol)\n\nn_call_vol = np.array(call_vol)\n\n#compute pcr\nn_put_vol\/n_call_vol","f54b9100":"#lets create rank 1 array\na = np.array([1,2,3])\nprint(a, type(a))","a22d8cce":"#lets know the shape of the array\nprint(a.shape)","f7365953":"#accessing the array elements\nprint(a[0], a[1],a[2])","2964c78b":"#lets update array item\na[1] = 5","2b622fae":"a","2a688ae1":"#task: create a rank2 array\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)","680f0e42":"b.shape","85f8fa9f":"#zeros(shape, dtype): returns an array of given shape and dtype, filled with zeroes\n#creating 1-d array\nnp.zeros(5) ","87dacc30":"#creating a two dimensional array\nnp.zeros((3,5), dtype=np.int64)","91e4042c":"#task create an array filled with 1's of shape 3,5\n#ones(shape, dtype): returns an array of given shape and dtype, filled with ones \nnp.ones((3,5), dtype=np.int64)","69666324":"#create a constant array with 7 as item of shape 3,3\n#full(shape, fill_value): returns an array of given shape and dtype, filled with fill_value given as parameter\nnp.full((3,3), 7)","bbdd082e":"#arange([start,] stop-1, [step]): This returns an array with evenly spaced values within a given interval\nnp.arange(5)","f4cd0034":"np.arange(3,8)","b0b4115d":"#array with an interval as step\nnp.arange(3,8, 0.5)","1551ce3e":"#linspace(start, stop, num, endpoint): returns evenly spaced numbers over a specified interval\nnp.linspace(2.0, 3.0, num=10)","63aa9187":"np.linspace(2.0, 3.0, num=10, endpoint=False)","842d8b24":"np.full((3,3), 7, dtype=np.float64)","a5e00ade":"#lets create an identity matrix\nnp.identity(5, dtype=np.int64) ","2db732e2":"np.eye(4,k=2)","917d1e85":"#rand():It is used to create an array of a given shape and populate it with random samples,\n#from a uniform distribution over[0,1]. It takes only positive arguments\nnp.random.rand()","7c2ab818":"#1-d array with 4 random values\nnp.random.rand(4)","c6ec1e26":"#2-d array\nnp.random.rand(2,3)","4c432979":"#randn(): \nnp.random.randn()","35ab0093":"np.random.randn(2,3)","8941604b":"#randint():\n#generating a random integer between 0 and 6\nnp.random.randint(6)","9a549519":"#generating 1-d array\nnp.random.randint(3,9, size=5)","9d1a129c":"#ndim: this attribute dsiplays the number of dimensions of array\nn_call_vol.ndim","7c6b1909":"n_put_vol.shape","4c4293b7":"n_2d = np.array([put_vol, call_vol])","ce001ad4":"n_2d","791e4b40":"n_2d.shape","79974ba4":"n_2d.shape = (5,2)","0f59b79a":"n_2d.shape","51ab0e11":"#slicing()\na = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])","c9784e61":"#lets pull out a sub arry consisting of 2 rows and 1&2 column\nb = a[:2,1:3]\nb","2e2d44ef":"#type conversion\nx = np.array([1,2])\nprint(x.dtype)","3a20a853":"#lets force convert the data type\nx = np.array([1,2], dtype=np.float64)\nx.dtype","dd329ce4":"a[1:,1:]","15ccb6aa":"#lets reshape our array\nres = np.arange(12)","3b96403d":"res","34a5c2dc":"np.reshape(res, (3,4))","06360096":"x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]],dtype=np.float64)\n\nx + y","c4e01e23":"np.add(x,y)","52fd476c":"x = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])","c0f2365e":"#we want to add the constant vector to each row of the matrix\nv = np.array([1,0,1])","99d87918":"#we want to add vector v to each row of the matrix x, storing the result in y\ny = np.empty_like(x)\n\nfor i in range(4):\n  y[i,:] = x[i,:] + v\n\n#lets print the output\nprint(y)","e6b642c4":"**Array Indexing**\n\nNumpy offers several ways to index into arrays","65999d26":"**Random  Sampling**","54e2e2f5":"# **Day 5 contd**\n\n**Numpy**\n\nIts package or module to perform scientific computing in python efficiently. It works only on numerical data.","3c327ba2":"**Array attributes and Methods**","c3fbff2e":"**Broadcasting**\nIts a powerful mechanism that allows numpy to work with arrays of different shape when performing arithmetic operations.","2436a543":"**Array creation using built in methods**","0f6244ed":"# **Day 5**\n\n**Exceptions**\n\nException is an abnormal condition which changes the flow of execution of the program.\n\n\n**Handling the exceptions using try\/except clause**"}}