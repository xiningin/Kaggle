{"cell_type":{"6c57310c":"code","f93fe812":"code","595e3d28":"code","50ebbb7f":"code","36b559ba":"code","13f1cd73":"code","2919ce6e":"code","238f8d07":"code","fa601693":"code","a31ad76d":"code","a73c07c8":"code","a5fb1a51":"code","ac913dd6":"code","bb845ffe":"code","373b225e":"code","e5dc7be9":"code","6b3fe5ac":"code","c2a19dbe":"code","cbd606cf":"code","64cfbae4":"code","67082a09":"markdown","fac54d73":"markdown","2fcacc48":"markdown","644e17ba":"markdown","d94bf2fd":"markdown","691d9927":"markdown","ef939985":"markdown"},"source":{"6c57310c":"!pip install pyenchant pysastrawi","f93fe812":"!wget http:\/\/archive.ubuntu.com\/ubuntu\/pool\/main\/libr\/libreoffice-dictionaries\/hunspell-id_6.4.3-1_all.deb\n!dpkg -i hunspell-id_6.4.3-1_all.deb","595e3d28":"!apt update && apt install -y enchant libenchant1c2a hunspell hunspell-en-us libhunspell-1.6-0","50ebbb7f":"import re\nimport os\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport sklearn\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nimport enchant\nimport lightgbm as lgbm","36b559ba":"!pip freeze > requirements.txt","13f1cd73":"print('Numpy version:', np.__version__)\nprint('Pandas version:', pd.__version__)\nprint('Scikit-Learn version:', sklearn.__version__)\nprint('Matplotlib version:', matplotlib.__version__)\nprint('Seaborn version:', sns.__version__)\nprint('NLTK version:', nltk.__version__)\nprint('LightGBM version:', lgbm.__version__)","2919ce6e":"SEED = 42\n\nos.environ['PYTHONHASHSEED']=str(SEED)\nrandom.seed(SEED)\nnp.random.seed(SEED)","238f8d07":"nltk.download('wordnet')","fa601693":"!ls \/kaggle\/input","a31ad76d":"X_train = pd.read_parquet('\/kaggle\/input\/shopee-review-cleaned\/X_train.parquet', engine='pyarrow')\nX_train = X_train['X']\n\nX_test = pd.read_parquet('\/kaggle\/input\/shopee-review-cleaned\/X_test.parquet', engine='pyarrow')\nX_test = X_test['X']\n\ny_train = pd.read_parquet('\/kaggle\/input\/shopee-review-cleaned\/y_train.parquet', engine='pyarrow')\ny_train = y_train['y']","a73c07c8":"rating_count = y_train.value_counts().sort_index().to_list()\ntotal_rating = sum(rating_count)\nlowest_rating_count = min(rating_count)\nrating_weight = [lowest_rating_count\/rc for rc in rating_count]\n\nprint(rating_count)\nprint(total_rating)\nprint(rating_weight)","a5fb1a51":"rating_weight_dict = {\n    1: rating_weight[0],\n    2: rating_weight[1],\n    3: rating_weight[2],\n    4: rating_weight[3],\n    5: rating_weight[4],\n}","ac913dd6":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(lowercase=False, ngram_range=(1,3), analyzer=lambda t:t, min_df=10, sublinear_tf=True)\n\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)","bb845ffe":"print(X_train.shape)\nprint(X_test.shape)","373b225e":"from sklearn.metrics import classification_report, f1_score, confusion_matrix\n\ndef predict(model, X, tweak_proba=False):\n    if tweak_proba:\n        y = model.predict_proba(X)\n\n        for i in range(len(y)):\n            y[i, 0] = y[i, 0] * 1.05 # rating 1\n#             y[i, 1] = y[i, 1] * 1.0 # rating 1\n#             y[i, 2] = y[i, 2] * 1.0 # rating 1\n            y[i, 3] = y[i, 3] * 1.30  # rating 4\n            y[i, 4] = y[i, 4] * 1.30  # rating 5\n\n        # +1 because np.argmax range is 0-4, not 1-5\n        y = np.argmax(y, axis=1)\n        for i in range(len(y)):\n            y[i] = y[i] + 1\n    else:\n        y = model.predict(X)\n    return y\n\ndef metrics(y_true, y_pred):\n    print('F1 Score :', f1_score(y_true, y_pred, average='macro'))\n    print(classification_report(y_true, y_pred))\n\n    cm = confusion_matrix(y_true, y_pred)\n    cm = pd.DataFrame(cm, range(1, 6), range(1, 6))\n\n    sns.heatmap(cm, annot=True, cmap=\"YlGnBu\", fmt=\"d\")\n    plt.show()","e5dc7be9":"from datetime import datetime\n\nmodel = lgbm.LGBMClassifier(\n    n_estimators=150,\n    class_weight=rating_weight_dict,\n    boosting_type='dart',\n    max_bin=1023,\n    max_depth=0,\n    num_leaves=255,\n    learning_rate=0.03,\n    extra_trees=True,\n    feature_fraction=0.8\n)\n\nSTART_TIME = datetime.now()\nmodel.fit(X_train, y_train, verbose=3)\nEND_TIME = datetime.now()\n\nprint((END_TIME - START_TIME).seconds)","6b3fe5ac":"y_train_pred = predict(model, X_train)\nmetrics(y_train, y_train_pred)","c2a19dbe":"y_train_pred2 = predict(model, X_train, tweak_proba=True)\nmetrics(y_train, y_train_pred2)","cbd606cf":"y_test_pred = predict(model, X_test)\n\ndf_submission = pd.concat([pd.Series(list(range(1,60428)), name='review_id', dtype=np.int32), pd.Series(y_test_pred, name='rating')], axis=1)\ndf_submission.to_csv('submission.csv', index=False)\n\ndf_submission","64cfbae4":"y_test_pred2 = predict(model, X_test, tweak_proba=True)\n\ndf_submission2 = pd.concat([pd.Series(list(range(1,60428)), name='review_id', dtype=np.int32), pd.Series(y_test_pred2, name='rating')], axis=1)\ndf_submission2.to_csv('submission_tweak_proba.csv', index=False)\n\ndf_submission2","67082a09":"# LightGBM","fac54d73":"# Changelog\n\n### Version 9\n\n* Lower min_df for TF-IDF from 25 to 10\n* Increase n_estimators from 100 to 150\n\n### Version 8\n\n* Use LightGBM\n* Load dataset from prepared parquet\n* Use 3-gram for TF-IDF\n\n### Version 3\n\n* Change TF-IDF param\n* More trees\n* Denser trees\n* Lower LR\n* Lower or upper token depends on total lower\/upper char\n\n### Version 1\n\n* Initialize code","2fcacc48":"# Class Weight","644e17ba":"# Library","d94bf2fd":"# Word representation","691d9927":"# Model functions","ef939985":"# Dataset"}}