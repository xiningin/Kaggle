{"cell_type":{"aa4fcae0":"code","e8e5d017":"code","0320d906":"code","13e53996":"code","d8d5452b":"code","a35a45f4":"code","8c8cc8d9":"code","73862f31":"code","1cea7156":"code","9d493540":"code","90c4fb9f":"code","935fd741":"code","3097200f":"code","0db6f65c":"code","5a3c076b":"code","e781ac19":"code","cd11c7b0":"code","22c70e69":"code","2be5cede":"code","298aec83":"markdown","ef82cb07":"markdown","7db3db49":"markdown","9b98a9fc":"markdown","979a03a3":"markdown","f1d129b8":"markdown","fc0a8c59":"markdown","773d610d":"markdown"},"source":{"aa4fcae0":"!pip install torchaudio==0.8.1\n%matplotlib inline\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import OrderedDict\n\n## Related to image processing\nimport cv2\n\n## Related to sound\nimport torchaudio\nimport torchaudio.transforms as T\nimport IPython.display as ipd\n\n## Related to deeplearning\nimport torch\nfrom torch import nn, optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision.models as models","e8e5d017":"PATH_TO_FOLDER =\"\"\nCSV_FILENAME = \"UrbanSound8K.csv\"\nMOUNTING_LOCATION = \"..\/input\/urbansound8k\/\"\n\n# DF VARS\nFILENAME = \"slice_file_name\"\nFID = \"fsID\"\nSTART = \"start\"\nEND = \"end\"\nSL = \t\"salience\"\t\nFOLD = \"fold\"\nCLASSID = \"classID\"\nCLASS = \"class\"","0320d906":"def plot_spectrogram(waveform, title=None, ylabel='freq_bin', aspect='auto', axs = None):\n  if axs is None :\n    fig, axs = plt.subplots(1, 1)\n  axs.set_ylabel(ylabel)\n  axs.set_xlabel('frame')\n  amp = torchaudio.transforms.AmplitudeToDB('magnitude',top_db=80)\n  res = amp(np.abs(torch.stft(waveform,2048)))[0]\n  y = torch.sum(res.permute(2,0,1),axis =0)\n  im = axs.imshow(y)\n  plt.title(title or 'Spectrogram (db)')\n\ndef plot_waveform(waveform, sample_rate, title=\"Waveform\", axes = None):\n  num_channels, num_frames = waveform.shape\n  time_axis = torch.arange(0, num_frames) \/ sample_rate\n  waveform = waveform[0]\n  if axes is None:\n    figure, axes = plt.subplots(1, 1)\n  plt.plot(time_axis, waveform, linewidth=1)\n  plt.title(title)\n\ndef load_sound_by_index(file_index, df):\n  sound_picked_fn = df[FILENAME][file_index]\n  waveform, sr = torchaudio.load(MOUNTING_LOCATION+PATH_TO_FOLDER+\"fold\"+ str(df[FOLD][file_index])+os.path.sep+sound_picked_fn) # load audio\n  audio_mono = torch.mean(waveform, dim=0, keepdim=True) # Convert sterio to mono\n  return audio_mono","13e53996":"df = pd.read_csv(MOUNTING_LOCATION+PATH_TO_FOLDER+CSV_FILENAME)\n#df = df.loc[df[\"fold\"]==1].reset_index(drop=True)  ## Select only mounting folder 1\nr,c = df.shape","d8d5452b":"print(f\"In this dataset there is {df.shape[0]} sounds\")","a35a45f4":"plt.hist(df[CLASSID].values, bins=10,range=(0,9))\nplt.title('Classes histogram')","8c8cc8d9":"plt.hist(df[SL].values, bins=2,range=(1,2))\nplt.title('Salience (1: Foreground, 2: Background)')","73862f31":"print(f\"There is {len(np.unique(df[FID].values))} differents sources of sound in this dataset.\")\n\nplt.hist(df[FID].values, bins=len(np.unique(df[FID].values)))\nplt.title('Sources histogram')","1cea7156":"dfC1 = df[df[CLASSID]==1].reset_index(drop=True)\nindex = 20\nsound_picked_fn = dfC1[FILENAME][index]\nclass_name1 = dfC1[CLASS][index]\nwaveform, sr1 = torchaudio.load(MOUNTING_LOCATION+PATH_TO_FOLDER+\"fold\"+ str(dfC1[FOLD][index])+os.path.sep+sound_picked_fn) # load audio\naudio_mono1 = torch.mean(waveform, dim=0, keepdim=True) # Convert sterio to mono\n\ndfC2 = df[df[CLASSID]==2].reset_index(drop=True)\nsound_picked_fn = dfC2[FILENAME][0]\nclass_name2 = dfC2[CLASS][0]\nwaveform, sr2 = torchaudio.load(MOUNTING_LOCATION+PATH_TO_FOLDER+\"fold\"+ str(dfC2[FOLD][0])+os.path.sep+sound_picked_fn) # load audio\naudio_mono2 = torch.mean(waveform, dim=0, keepdim=True) # Convert sterio to mono\n\ndfC3 = df[df[CLASSID]==3].reset_index(drop=True)\nsound_picked_fn = dfC3[FILENAME][10]\nclass_name3 = dfC3[CLASS][10]\nwaveform, sr3 = torchaudio.load(MOUNTING_LOCATION+PATH_TO_FOLDER+\"fold\"+ str(dfC3[FOLD][10])+os.path.sep+sound_picked_fn) # load audio\naudio_mono3 = torch.mean(waveform, dim=0, keepdim=True) # Convert sterio to mono","9d493540":"sfig, saxs = plt.subplots(nrows=1, ncols=3, figsize=(12,4))\n\nplt.sca(saxs[0])\nplot_waveform(audio_mono1.numpy(),sr1, title=\"Waveform sample \"+str(class_name1),axes=saxs[0])\n\nplt.sca(saxs[1])\nplot_waveform(audio_mono2.numpy(),sr2, title=\"Waveform sample \"+str(class_name2),axes=saxs[1])\n\nplt.sca(saxs[2])\nplot_waveform(audio_mono3.numpy(),sr3,title=\"Waveform sample \"+str(class_name3),axes=saxs[2])","90c4fb9f":"mfig, maxs = plt.subplots(nrows=1, ncols=3, figsize=(12,4))\nplt.sca(maxs[0])\nplot_spectrogram(audio_mono1, title=\"Spectrogram sample \"+class_name1,axs=maxs[0])\n\nplt.sca(maxs[1])\nplot_spectrogram(audio_mono2, title=\"Spectrogram sample \"+class_name2,axs=maxs[1])\n\nplt.sca(maxs[2])\nplot_spectrogram(audio_mono3, title=\"Spectrogram sample \"+class_name3,axs=maxs[2])","935fd741":"amp = torchaudio.transforms.AmplitudeToDB('magnitude',top_db=80)\ni1 = (torch.mean(torch.sum(amp(torch.abs(torch.stft(audio_mono1,799)[0])), axis=2).T, axis=0).reshape(20,20))\ni2 = (torch.mean(torch.sum(amp(torch.abs(torch.stft(audio_mono2,799)[0])), axis=2).T, axis=0).reshape(20,20))\ni3 = (torch.mean(torch.sum(amp(torch.abs(torch.stft(audio_mono3,799)[0])), axis=2).T, axis=0).reshape(20,20))\n\nfig, axs = plt.subplots(nrows=1, ncols=3, figsize=(12,4))\nplt.sca(axs[0])\nplt.imshow(i1)\nplt.title(\"Sample \"+class_name1)\nplt.sca(axs[1])\nplt.imshow(i2)\nplt.title(\"Sample \"+class_name2)\nplt.sca(axs[2])\nplt.imshow(i1)\nplt.title(\"Sample \"+class_name3)\nplt.suptitle('Compressed reshaped visu of spectrogram')\nplt.show()","3097200f":"arrOfImages = []\namp = torchaudio.transforms.AmplitudeToDB('magnitude',top_db=80)\n\ndef specAndResize(i):\n    return  cv2.resize(torch.sum(amp(torch.abs(torch.stft(load_sound_by_index(i, df),799)[0])), axis=2).numpy(),(100,100))\n\nfor i in range(0, df.shape[0]):\n  if (i%500 == 0):\n    print(\"Preprocessed percentage : \"+str(int((i\/df.shape[0])*100)))\n  arrOfImages.append(specAndResize(i))\n  \narrOfImages = np.array(arrOfImages)","0db6f65c":"\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)\nclass SoundDataset(Dataset):\n  \n    def __init__(self, dataframe, arrayOfImages , transform=None):\n        \"\"\"\n        Args:\n            dataframe (Panda df): dataframe for sounds\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n            images (numpy array 2D) : Array of images (compressed spectrograms)\n        \"\"\"\n        self.sound_frame = dataframe\n        self.transform = transform\n        self.images = arrayOfImages\n\n    def __len__(self):\n        return len(self.sound_frame)\n\n    def filename(self, idx):\n      return os.path.join(MOUNTING_LOCATION+PATH_TO_FOLDER+\"fold\"+str(self.sound_frame[FOLD][idx])+os.path.sep,self.sound_frame[FILENAME][idx]) #self.sound_frame.iloc[idx, 5] self.sound_frame.iloc[idx, 0]\n\n    def __getitem__(self, idx):\n        if torch.is_tensor(idx):\n            idx = idx.tolist()\n        \n        spec = self.images.squeeze()[idx]\n        image = np.repeat(spec[..., np.newaxis], 3, -1)\n        #image=spec\n        target = self.sound_frame[CLASSID][idx] #self.sound_frame.iloc[idx, 6]\n\n        #print(image.shape)\n        if self.transform:\n            image = self.transform(image)\n\n        return image, target\n\ntransform = transforms.Compose([transforms.ToTensor(), transforms.Resize((100,100)), transforms.Normalize(np.mean(arrOfImages),np.std(arrOfImages))])\n\nds = SoundDataset(df,arrOfImages, transform=transform)\ntrain_set, val_test_set = torch.utils.data.random_split(ds, [round(r*0.6), r-round(r*0.6)])\ntest_set, val_set = torch.utils.data.random_split(val_test_set, [int((r-round(r*0.6))*0.5),int((r-round(r*0.6))*0.5)+1])#+1\ntrain_loader = DataLoader(train_set, batch_size=16,shuffle=True, num_workers=2)\nval_loader = DataLoader(val_set, batch_size=16,shuffle=True, num_workers=2)\ntest_loader = DataLoader(test_set, batch_size=16,shuffle=True, num_workers=2)","5a3c076b":"model = models.wide_resnet50_2(pretrained=True)\n\n#for param in model.parameters():\n#    param.requires_grad = False\n\nclassifier = nn.Sequential(OrderedDict([('fc1', nn.Dropout(0.4)),('fc2', nn.Linear(2048, 10)), ('sf', nn.LogSoftmax())]))\n    \nmodel.fc = classifier\n\ncriterion = nn.NLLLoss()\nmodel = model.to(device)\noptimizer = optim.AdamW(model.parameters(), lr = 0.0001, amsgrad=True)\n\nepochs = 20\nsteps = 0\nrunning_loss = 0\nloss_tab = []\nval_loss_tab = []\nval_acc_tab = []\nacc_tab = []\naccuracy = 0\nfor epoch in range(epochs):\n    for inputs, labels in train_loader:\n        steps += 1\n        # Move input and label tensors to the default device\n        inputs, labels = inputs.to(device), labels.to(device)\n \n        res = model(inputs)\n        loss = criterion(res, labels)\n        running_loss += loss.item()\n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()     \n    \n        top_probs, top_class = torch.topk(torch.exp(res), 1,dim=1)\n        valid_pred = top_class == labels.view(*top_class.shape)\n        count = torch.mean((valid_pred).type(torch.FloatTensor))\n        accuracy += count\n    val_loss = 0\n    val_accuracy = 0\n    model.eval()\n    with torch.no_grad():\n        for inputs, labels in val_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            res = model(inputs)\n            valR_loss = criterion(res, labels)\n\n            val_loss += valR_loss.item()\n            top_probs, top_class = torch.topk(torch.exp(res), 1,dim=1)\n            valid_pred = top_class == labels.view(*top_class.shape)\n            count = torch.mean((valid_pred).type(torch.FloatTensor))\n            val_accuracy += count\n            \n    print(f\"Epoch {epoch+1}\/{epochs}.. \"\n          f\"Train loss: {running_loss\/len(train_loader):.3f}.. \"\n          f\"Val loss: {val_loss\/len(val_loader):.3f}.. \"\n          f\"Val accuracy: {val_accuracy\/len(val_loader):.3f}\")\n    val_loss_tab.append(val_loss\/len(val_loader))\n    loss_tab.append(val_loss\/len(train_loader))\n    val_acc_tab.append(val_accuracy\/len(val_loader))\n    acc_tab.append(accuracy\/len(train_loader))\n    accuracy = 0\n    running_loss = 0\n    model.train()","e781ac19":"test_loss = 0\naccuracy = 0\nmodel.eval()\nwith torch.no_grad():\n    for inputs, labels in test_loader:\n        # TODO: validation and test_loss update\n        inputs, labels = inputs.to(device), labels.to(device)\n        res = model(inputs)\n        testR_loss = criterion(res, labels)\n\n        test_loss += testR_loss.item()\n        top_probs, top_class = torch.topk(torch.exp(res), 1,dim=1)\n\n        valid_pred = top_class == labels.view(*top_class.shape)\n        # TODO: accuracy update\n        count = torch.mean((valid_pred).type(torch.FloatTensor))\n        accuracy += count\n\nprint(f\"Test accuracy: {accuracy\/len(test_loader):.3f}\")","cd11c7b0":"# loss curves\nx = np.linspace(0,len(loss_tab), len(val_loss_tab))\nplt.plot(x, loss_tab, label= \"Train loss\")\nplt.plot(x, val_loss_tab, label = \"Test loss\")\nplt.legend()","22c70e69":"#Accuracy curves\nx = np.linspace(0,len(acc_tab), len(val_acc_tab))\nplt.plot(x, acc_tab, label= \"Train acc\")\nplt.plot(x, val_acc_tab, label = \"Val acc\")\nplt.legend()","2be5cede":"model.eval()\nlabels_tab =[]\npred_tab =[]\nmodel_test = model.to(\"cpu\")\nwith torch.no_grad():\n    for inputs, labels in test_loader:\n        inputs, labels\n        res = model_test(inputs)\n        top_probs, top_class = torch.topk(torch.exp(res), 1,dim=1)\n        labels_tab.append(labels.clone().detach().to(\"cpu\"))\n        pred_tab.append(top_class.clone().detach().to(\"cpu\"))\n\n\nclasses = []\nfor values in range(0,10):\n  classes.append(df[df[CLASSID] == values][CLASS].reset_index()[CLASS][0])\n\nfrom sklearn.metrics import confusion_matrix\nlabels = np.concatenate([el.numpy() for el in labels_tab]).ravel()\n\npred = np.concatenate([el.numpy() for el in pred_tab]).ravel()\n\ncm = confusion_matrix(labels, pred)\n\ncm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\nplt.imshow(cm, interpolation='nearest')\nplt.title(\"Confusion matrix\")\nplt.colorbar()\ntick_marks = np.arange(len(classes))\nplt.xticks(tick_marks, classes, rotation=90)\nplt.yticks(tick_marks, classes)\n\nfmt = '.2f' \nthresh = cm.max() \/ 2.\n\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","298aec83":"## Imports and define some paths\n","ef82cb07":"## Preprocessing","7db3db49":"## Exploratory data analysis","9b98a9fc":"## Some information about the dataset\nThis dataset is composed of 6.6GB of data, including 8732 sound files of around 4 seconds(but less or equal) and 1 CSV file giving info about files where to find them in the dataset,their original file, their location in the original files, and of course their classes in ID but also with the name associated to it, also if the sound to detect is in foreground or background.\n\nThere are ten classes of sound and the aim of this project is to develop a classifier for this sound.\n\nThe ten classes are : airconditioner, carhorn, childrenplaying, dogbark, drilling, engineidling, gunshot, jackhammer, siren, street_music.\n\n## How I will do it ?\nSo the idea is to develop a classifier I decided to use features generating a 2D representation of the sound and applying CNN on the generated representation to classify the classes.\n\n\n\n\n**VERSION BIGNN :**\nThis is the version of the project using Transfer Learning on wide\\_resnet\\_50\\_2, using images from spectrogram resized","979a03a3":"## Define some processing and visualization functions","f1d129b8":"## Metrics\n","fc0a8c59":"### Sample pick","773d610d":"## Import data"}}