{"cell_type":{"9d1aa42e":"code","a97bc503":"code","d72e0e35":"code","05f6b652":"code","4be62a4c":"code","41db766d":"code","dcaf08a2":"code","dbd0d458":"code","cf512ec8":"code","835e6250":"code","ae5f7574":"code","6b813ba5":"code","7ea5fbc3":"markdown","cb34f300":"markdown","3da62f02":"markdown","920f045a":"markdown","b36f7ff4":"markdown","88e88612":"markdown","18a53795":"markdown"},"source":{"9d1aa42e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a97bc503":"covid_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv');\n\ncovid_data.head()\n","d72e0e35":"print(\"Train data missing value count for each feature\")\nprint(covid_data.isnull().sum())","05f6b652":"import seaborn as sns\nsns.set(rc={'figure.figsize':(8,8)})\nsns.heatmap(covid_data.isnull(), yticklabels = False, cmap=\"YlGnBu\")","4be62a4c":"#Total number of countries effected by Covid-19\nuniqueValues = covid_data['Country\/Region'].unique()\nprint('Total number of countries effected by Covid-19: %s' % len(uniqueValues)) \nprint(uniqueValues);","41db766d":"# Convert ObservationDate to datetime object\ncovid_data['ObservationDate'] = pd.to_datetime(covid_data['ObservationDate'], format='%m\/%d\/%Y', utc=True);","dcaf08a2":"# Group data by date\ndate_grouped=covid_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\n\n#Calculate Active cases around the world\ndate_grouped[\"Active Cases\"] = date_grouped[\"Confirmed\"] - date_grouped[\"Recovered\"] - date_grouped[\"Deaths\"]\n\n# Total number of Confirmed cases around the world\nprint('Total number of Confirmed cases around the world: %s' % date_grouped[\"Confirmed\"].iloc[-1])\n\n# Total number of Recovered cases around the world\nprint('Total number of Recovered cases around the world: %s' % date_grouped[\"Recovered\"].iloc[-1])\n\n# Total number of Death cases around the world\nprint('Total number of Death cases around the world: %s' % date_grouped[\"Deaths\"].iloc[-1])\n\ndate_grouped.tail()","dbd0d458":"import plotly.graph_objects as go\nfig=go.Figure()\nfig.add_trace(go.Scatter(x=date_grouped.index, y=date_grouped[\"Confirmed\"],\n                    mode='lines+markers',\n                    name='Confirmed',marker_color='purple'))\nfig.add_trace(go.Scatter(x=date_grouped.index, y=date_grouped[\"Recovered\"],\n                    mode='lines+markers',\n                    name='Recovered', marker_color='green'))\nfig.add_trace(go.Scatter(x=date_grouped.index, y=date_grouped[\"Deaths\"],\n                    mode='lines+markers',\n                    name='Death', marker_color='red'))\nfig.update_layout(title=\"Confirmed, Recovered, Death case counts\",\n                 xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","cf512ec8":"# Group data by country\ncountry_grouped=covid_data.groupby(['Country\/Region','ObservationDate']).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\n\ncountry_grouped[\"Death_Percent\"] = country_grouped[\"Deaths\"] \/ country_grouped[\"Confirmed\"] * 100 \ncountry_grouped[\"Recovered_Percent\"] = country_grouped[\"Recovered\"] \/ country_grouped[\"Confirmed\"] * 100\n\n# get total sum of each country\ntotal_sum_country = country_grouped.groupby(['Country\/Region']).tail(1)\ntotal_sum_country.tail(20)","835e6250":"\ntotal_sum_country = total_sum_country.reset_index()\ntop_10_confirmed_country = total_sum_country.sort_values(by=['Confirmed'],ascending=False).head(10)","ae5f7574":"fig1, ax1 = plt.subplots()\nax1.pie(top_10_confirmed_country['Confirmed'], labels=top_10_confirmed_country['Country\/Region'], autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()","6b813ba5":"top_10_confirmed_country_death_percent = top_10_confirmed_country.sort_values(by=['Death_Percent'],ascending=False).head(10)\ntop_10_confirmed_country_death_percent.head(10)","7ea5fbc3":"**Top 10 Countries with Confirmed Cases**","cb34f300":"**Death Rates of Top 10 Countries with Confirmed Cases**","3da62f02":"# Covid Visualiation","920f045a":"# 1.2. Visualization","b36f7ff4":"**Pie Chart Top 10 Countries with Confirmed Case Percentage**","88e88612":"# 1.1. Missing Values\nMissing values only exist in Province\/State feature","18a53795":"# 1. Analysis of Dataset"}}