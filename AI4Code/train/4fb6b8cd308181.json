{"cell_type":{"fae5a460":"code","d205cd6b":"code","11e5c223":"code","eaa4dd37":"code","ae03667f":"code","c8ceea0a":"code","d1d945d3":"code","24c2bd09":"code","7d3431ed":"code","4e7da900":"code","52353755":"code","c58dacd7":"code","5b2565f8":"code","40e6e00b":"markdown","1c387faf":"markdown","1de35d76":"markdown","863df683":"markdown","248d9b74":"markdown","d8f49a8d":"markdown","35406811":"markdown","c3e21229":"markdown","9c04126a":"markdown","7d65905a":"markdown"},"source":{"fae5a460":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom math import pi\nfrom pandas.tools.plotting import parallel_coordinates\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d205cd6b":"# Define dictionary\ndictionary = {\"column1\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n              \"column2\":[1,2,3,4,np.nan,6,7,8,np.nan,10,np.nan,12,13,14,15,16,np.nan,18,np.nan,20],\n              \"column3\":[1,2,3,4,np.nan,6,7,8,9,10,11,12,13,np.nan,15,16,17,18,np.nan,20]}\n# Create data frame from dictionary\ndata_missingno = pd.DataFrame(dictionary) \n\n# import missingno library\nimport missingno as msno\nmsno.matrix(data_missingno)\nplt.show()","11e5c223":"# missingno bar plot\nmsno.bar(data_missingno)\nplt.show()","eaa4dd37":"# load iris data\ndata = pd.read_csv('..\/input\/Iris.csv')\ndata = data.drop(['Id'],axis=1)\n# Make the plot\nplt.figure(figsize=(15,10))\nparallel_coordinates(data, 'Species', colormap=plt.get_cmap(\"Set1\"))\nplt.title(\"Iris data class visualization according to features (setosa, versicolor, virginica)\")\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"cm\")\nplt.savefig('graph.png')\nplt.show()","ae03667f":"# Calculate the correlation between individuals.\ncorr = data.iloc[:,0:4].corr()\ncorr","c8ceea0a":"# import networkx library\nimport networkx as nx\n\n# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = -0.2\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=10)","d1d945d3":"data.head()","24c2bd09":"# venn2\nfrom matplotlib_venn import venn2\nsepal_length = data.iloc[:,0]\nsepal_width = data.iloc[:,1]\npetal_length = data.iloc[:,2]\npetal_width = data.iloc[:,3]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(sepal_length)-15, len(sepal_width)-15, 15), set_labels = ('sepal_length', 'sepal_width'))\nplt.show()","7d3431ed":"# donut plot\nfeature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(sepal_length),len(sepal_width),len(petal_length),len(petal_width)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.4,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","4e7da900":"# spider graph\ncategories = list(data)[:4]\nN = len(categories)\nangles = [ n \/ float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize = (10,10))\nax = plt.subplot(111,polar = True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color= \"red\", size = 7)\nplt.ylim(0,6)\n\nvalues = data.loc[0].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"setosa\" )\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = data.loc[1].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"versicolor\" )\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc = \"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","52353755":"# cluster map (dendogram and tree)\ndf = data.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndf1 = data.Species\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","c58dacd7":"# trace1 is line plot\n# go: graph object\ntrace1 = go.Scatter(\n    x=df.index,\n    y=df.SepalLengthCm,\n    mode = \"markers\",\n    xaxis='x2',\n    yaxis='y2',\n    name = \"SepalLengthCm\",\n    marker = dict(color = 'rgba(0, 112, 20, 0.8)'),\n)\n\n# trace2 is histogram\ntrace2 = go.Histogram(\n    x=df.SepalLengthCm,\n    opacity=0.75,\n    name = \"Sepal Length(Cm)\",\n    marker=dict(color='rgba(10, 200, 250, 0.6)'))\n\n# add trace1 and trace2\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.7, 1],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = ' Sepal Length(Cm) Histogram and Scatter Plot'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5b2565f8":"# import data again\ndata = pd.read_csv('..\/input\/Iris.csv')\n# data of iris setosa\niris_setosa = data[data.Species == \"Iris-setosa\"]\n# # data of iris virginica\niris_virginica = data[data.Species == \"Iris-virginica\"]\n\n# trace1 =  iris setosa\ntrace1 = go.Scatter3d(\n    x=iris_setosa.SepalLengthCm,\n    y=iris_setosa.SepalWidthCm,\n    z=iris_setosa.PetalLengthCm,\n    mode='markers',\n    name = \"iris_setosa\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\n# trace2 =  iris virginica\ntrace2 = go.Scatter3d(\n    x=iris_virginica.SepalLengthCm,\n    y=iris_virginica.SepalWidthCm,\n    z=iris_virginica.PetalLengthCm,\n    mode='markers',\n    name = \"iris_virginica\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = ' 3D iris_setosa and iris_virginica',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","40e6e00b":"Donut (Matplotlib)\u00b6\n* A donut chart is a pie chart with an area of the center cut out.","1c387faf":"Cluster Map (Seaborn)\u00b6\n\n* Plot a matrix dataset as a hierarchically-clustered heatmap.","1de35d76":"\nSpider Chart (Matplotlib)\n* A spider(radar) plot is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables.","863df683":"* Apart from matrix plot we can use bar plot to observe missign values.\n* Bar is a simple visualization of nullity by column.\n* Numbers at left side of plot is percentage.\n* Numbers at top of the plot is number of non missign values\n* Numbers at right side of plot is number of sample in data.","248d9b74":"\nBasic 3D Scatter Plot (Plotly)\n* import data again to avoid confusion\n* go.Scatter3d: 3D scatter\n* We will plot iris setosa and iris virginica classes according to their Sepal Length(x), Sepal Width(y), and Petal Length(z).","d8f49a8d":"\nNetwork Charts (Networkx)\u00b6\n\n* We will use iris data that we import at previous part( parallel plot)\n* Network charts are related with correlation network.\n* It can be used instead of heatmaps in seaborn library.\n* At first look at correlation between features.\n\ncorr(): gives correlation between features\n\nAs you can see from table below, petal length is positively correlated with sepal length and petal width. \n\nAlso, petal length is negatively correlated with sepal width.","35406811":"1.Matrix and Box Plots (Missingno)","c3e21229":"Venn (Matplotlib)\u00b6\n\n* You can use venn diagram to visualize the size of groups and their intersection.","9c04126a":"\nParallel Plots (Pandas)\u00b6\n\n* In order to learn parallel plots, we will use famous iris data set from sklearn library\n* Parallel plot allow to compare the feature of several individual observations on a set of numerical variables.\n* Each vertical bar represents a feature(column or variable) like petal length (cm).\n* Values are then plotted as series of lines connected across each axis.\n* Different colors shows different classes like setosa.\n* Parallel plot allow to detect interesting patterns. For example as you can see we can easily classify setosa according to petal width (cm) feature.\n* Lets look at code.\n    \n    Load iris data into data frame\n    \n    parallel_coordinates: we import parallel_coordinates from pandas library\n   \n   colormap: color map that paints classes with different colors","7d65905a":"\nInset Plots (Plotly)\n* If you do not understand the code check my plotly tutorial."}}