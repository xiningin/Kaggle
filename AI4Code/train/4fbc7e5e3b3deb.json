{"cell_type":{"30fb67b6":"code","cab5f61d":"code","ec0d17da":"code","458f294e":"code","b3a95402":"code","a3829948":"code","825df763":"code","3315d773":"code","03ef08be":"code","2629115c":"code","3412b53f":"code","c4098347":"code","6244a8f1":"code","9e945d73":"markdown"},"source":{"30fb67b6":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport cv2","cab5f61d":"import os\n\ntrain_dir='..\/input\/10-monkey-species\/training\/training'\n\nvalidation_dir='..\/input\/10-monkey-species\/validation\/validation'\n\nprint(\"TRAINING SET\",len(os.listdir(train_dir)))\nprint(\"VALIDATION SET\",len(os.listdir(validation_dir)))\n","ec0d17da":"image=cv2.imread('..\/input\/10-monkey-species\/training\/training\/n0\/n0018.jpg')\nprint(image.shape)","458f294e":"def plotimage(plt):\n    img_size=150\n    plt.figure(figsize=(18,20))\n    ctr=0\n    for expression in os.listdir(\"..\/input\/10-monkey-species\/training\/training\"):\n        for i in range(0,10):\n            ctr += 1\n            plt.subplot(6,6,ctr)\n            img = load_img(\"..\/input\/10-monkey-species\/training\/training\/\" + expression + \"\/\" +os.listdir(\"..\/input\/10-monkey-species\/training\/training\/\" + expression)[i], target_size=(img_size, img_size))\n            plt.imshow(img)\n            plt.title(expression)\n\n    plt.tight_layout()\n    return plt","b3a95402":"plotimage(plt).show()","a3829948":" from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_gen=ImageDataGenerator(rescale=1.0\/255.0,\n                           \n                            rotation_range=20,\n                            width_shift_range=0.2,\n                            height_shift_range=0.2,\n                            horizontal_flip=True)\nvalidation_gen=ImageDataGenerator(rescale=1.0\/255.0)","825df763":"trainDatagen=train_gen.flow_from_directory(train_dir,\n                                          target_size=(150,150),\n                                           batch_size=100,\n                                           class_mode='categorical')\nvalDatagen=validation_gen.flow_from_directory(validation_dir,\n                                              target_size=(150,150),\n                                           batch_size=20,\n                                           class_mode='categorical')","3315d773":"def create_model(input_shape):\n   \n    base_model = tf.keras.applications.Xception(input_shape = input_shape,\n                       include_top = False)\n                      \n\n    # we do not have to train all of the layers\n    for layer in base_model.layers:\n        layer.trainable = False\n        \n    x = tf.keras.layers.Flatten()(base_model.output)\n    x = tf.keras.layers.Dense(512, activation = 'relu')(x)\n    x = tf.keras.layers.Dropout(0.6)(x)\n    x = tf.keras.layers.Dense(10, activation = 'softmax')(x)\n    \n    return tf.keras.models.Model(base_model.input,x)\nmodel = create_model((150,150,3))\nmodel.summary()","03ef08be":"model.compile(loss='categorical_crossentropy',\n             optimizer=tf.keras.optimizers.SGD(lr=0.005),\n             metrics=['accuracy'])","2629115c":"class mycallbacks(tf.keras.callbacks.Callback):\n    def on_epoch_end(self,epochs,logs={}):\n        if(logs.get('accuracy')>0.99):\n            self.model.stop_training=True","3412b53f":"callbacks=mycallbacks()\nhistory=model.fit_generator(trainDatagen,validation_data=valDatagen,epochs=20,verbose=1,callbacks=[callbacks])","c4098347":"monkey= {'n0':'mantled_howler','n1':'patas_monkey',\n      'n2':'bald_uakari','n3':'japanese_macaque',\n      'n4':'pygmy_marmoset','n5':'white_headed_capuchin',\n      'n6':'silvery_marmoset','n7':'common_squirrel_monkey',\n      'n8':'black_headed_night_monkey','n9':'nilgiri_langur'}\nread_file=pd.read_csv('..\/input\/10-monkey-species\/monkey_labels.txt')\nread_file.head()\n","6244a8f1":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()\n","9e945d73":"# please upvote if you like this notebook"}}