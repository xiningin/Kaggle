{"cell_type":{"a3febc17":"code","864d6fa5":"code","4dc7b263":"code","933a75d8":"code","b67b7fcd":"code","db149b38":"code","c122e7f6":"code","da2f8f17":"code","ce469bbf":"code","ac2c4db3":"code","4c666e43":"code","7b84db16":"code","82586173":"code","aad1bac0":"code","52a89260":"code","49e42c89":"code","b4fea3b2":"code","63c1958a":"code","101ac62d":"code","fb325421":"code","392350a3":"code","2b95d3db":"code","cd2d87e2":"code","c1914916":"code","77cd56c9":"code","b04584fd":"code","9cb546ba":"code","4fe61182":"code","9362fc85":"code","685b8efd":"code","ba599917":"code","2ee8b7c9":"code","206899f7":"code","9afd60c5":"code","264cdc0e":"code","bd902aa4":"code","bb812be8":"code","2a225c57":"code","2d0408a8":"code","70ebcbdc":"code","a3c05cca":"code","4c3c26c7":"code","54c3009a":"code","5f45893d":"code","39b1e37d":"code","dc756ccc":"code","d63fd239":"code","b86c297b":"code","c0b86cda":"code","8a5c6619":"code","c960f147":"code","7e872f73":"code","a0b52416":"code","97779f61":"code","750956f1":"code","c2081773":"code","a9b5bdd1":"code","91ef7926":"code","9dc0bceb":"code","fbf26af4":"code","e31389f7":"code","44c3aafd":"code","fb763bf6":"code","e2d66aa9":"code","334b9e81":"code","fc673c64":"code","75d585cc":"code","d54f6afb":"code","4b02ad82":"code","c57f3a1e":"code","1b6ef93d":"code","f7266512":"code","c29fdfe4":"code","938361ed":"code","54534153":"code","158e3ec8":"code","493a2e00":"code","18f560b3":"code","71acafc3":"code","eb9b7feb":"code","8f818e0a":"code","c43b2a13":"code","081c8541":"code","3334c99d":"code","11b05151":"code","8f63e481":"code","c7deb3c7":"markdown","b08cd6e6":"markdown","82928384":"markdown","a0b24eef":"markdown","567d97e3":"markdown","f45b7eb2":"markdown","c89b48d9":"markdown","6f6e392d":"markdown","99477c7a":"markdown","bfc31175":"markdown","08634899":"markdown","a1909ae9":"markdown","1353a148":"markdown","0308d206":"markdown","df94ecb8":"markdown","1ffbe372":"markdown","1f5db695":"markdown","7a3e0721":"markdown","ee92178a":"markdown","1ad5212d":"markdown","ba900978":"markdown","614114b4":"markdown","03e815d0":"markdown","cf9e3f0a":"markdown","c046377e":"markdown","2cfabec0":"markdown","68ed772c":"markdown","7876e008":"markdown","d431eed1":"markdown","11a2fa51":"markdown","3c69c87a":"markdown","fec9c687":"markdown","cdafd37d":"markdown","59e5434e":"markdown","b9b34671":"markdown","14931b1c":"markdown","e0873724":"markdown","62900a7f":"markdown","712e6c64":"markdown","f333a536":"markdown","a8422831":"markdown","614f0f24":"markdown","b340efc7":"markdown","8f8d2be5":"markdown","cbcf6b5d":"markdown","3eb7a395":"markdown","47b07580":"markdown","ce75ddb0":"markdown","ce91d504":"markdown","45c441bf":"markdown","555327d6":"markdown","72f94cd5":"markdown","a145f654":"markdown"},"source":{"a3febc17":"import pandas as pd\nimport numpy as np\nimport sys\nimport sklearn\nprint(pd.__version__)\nprint(np.__version__)\nprint(sys.version)\nprint(sklearn.__version__)","864d6fa5":"col_names = [\"duration\",\"protocol_type\",\"service\",\"flag\",\"src_bytes\",\n    \"dst_bytes\",\"land\",\"wrong_fragment\",\"urgent\",\"hot\",\"num_failed_logins\",\n    \"logged_in\",\"num_compromised\",\"root_shell\",\"su_attempted\",\"num_root\",\n    \"num_file_creations\",\"num_shells\",\"num_access_files\",\"num_outbound_cmds\",\n    \"is_host_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\n    \"srv_serror_rate\",\"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\n    \"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n    \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\n    \"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\"dst_host_srv_serror_rate\",\n    \"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\",\"label\"]\n\n# KDDTrain+_2.csv & KDDTest+_2.csv are the datafiles without the last column about the difficulty score\n# these have already been removed.\ndf = pd.read_csv(\"..\/input\/kddddd\/KDDTrain_2.csv\", header=None, names = col_names)\ndf_test = pd.read_csv(\"..\/input\/kddtttttt\/KDDTest_2.csv\", header=None, names = col_names)\n\n\n# shape, this gives the dimensions of the dataset\nprint('Dimensions of the Training set:',df.shape)\nprint('Dimensions of the Test set:',df_test.shape)\n","4dc7b263":"# first five rows\ndf.head(5)","933a75d8":"df.describe()","b67b7fcd":"print('Label distribution Training set:')\nprint(df['label'].value_counts())\nprint()\nprint('Label distribution Test set:')\nprint(df_test['label'].value_counts())","db149b38":"# colums that are categorical and not binary yet: protocol_type (column 2), service (column 3), flag (column 4).\n# explore categorical features\nprint('Training set:')\nfor col_name in df.columns:\n    if df[col_name].dtypes == 'object' :\n        unique_cat = len(df[col_name].unique())\n        print(\"Feature '{col_name}' has {unique_cat} categories\".format(col_name=col_name, unique_cat=unique_cat))\n\n#see how distributed the feature service is, it is evenly distributed and therefore we need to make dummies for all.\nprint()\nprint('Distribution of categories in service:')\nprint(df['service'].value_counts().sort_values(ascending=False).head())","c122e7f6":"# Test set\nprint('Test set:')\nfor col_name in df_test.columns:\n    if df_test[col_name].dtypes == 'object' :\n        unique_cat = len(df_test[col_name].unique())\n        print(\"Feature '{col_name}' has {unique_cat} categories\".format(col_name=col_name, unique_cat=unique_cat))","da2f8f17":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder\ncategorical_columns=['protocol_type', 'service', 'flag']\n# insert code to get a list of categorical columns into a variable, categorical_columns\ncategorical_columns=['protocol_type', 'service', 'flag'] \n # Get the categorical values into a 2D numpy array\ndf_categorical_values = df[categorical_columns]\ntestdf_categorical_values = df_test[categorical_columns]\ndf_categorical_values.head()","ce469bbf":"# protocol type\nunique_protocol=sorted(df.protocol_type.unique())\nstring1 = 'Protocol_type_'\nunique_protocol2=[string1 + x for x in unique_protocol]\n# service\nunique_service=sorted(df.service.unique())\nstring2 = 'service_'\nunique_service2=[string2 + x for x in unique_service]\n# flag\nunique_flag=sorted(df.flag.unique())\nstring3 = 'flag_'\nunique_flag2=[string3 + x for x in unique_flag]\n# put together\ndumcols=unique_protocol2 + unique_service2 + unique_flag2\nprint(dumcols)\n\n#do same for test set\nunique_service_test=sorted(df_test.service.unique())\nunique_service2_test=[string2 + x for x in unique_service_test]\ntestdumcols=unique_protocol2 + unique_service2_test + unique_flag2","ac2c4db3":"df_categorical_values_enc=df_categorical_values.apply(LabelEncoder().fit_transform)\nprint(df_categorical_values_enc.head())\n# test set\ntestdf_categorical_values_enc=testdf_categorical_values.apply(LabelEncoder().fit_transform)","4c666e43":"enc = OneHotEncoder()\ndf_categorical_values_encenc = enc.fit_transform(df_categorical_values_enc)\ndf_cat_data = pd.DataFrame(df_categorical_values_encenc.toarray(),columns=dumcols)\n# test set\ntestdf_categorical_values_encenc = enc.fit_transform(testdf_categorical_values_enc)\ntestdf_cat_data = pd.DataFrame(testdf_categorical_values_encenc.toarray(),columns=testdumcols)\n\ndf_cat_data.head()","7b84db16":"trainservice=df['service'].tolist()\ntestservice= df_test['service'].tolist()\ndifference=list(set(trainservice) - set(testservice))\nstring = 'service_'\ndifference=[string + x for x in difference]\ndifference","82586173":"for col in difference:\n    testdf_cat_data[col] = 0\n\ntestdf_cat_data.shape","aad1bac0":"newdf=df.join(df_cat_data)\nnewdf.drop('flag', axis=1, inplace=True)\nnewdf.drop('protocol_type', axis=1, inplace=True)\nnewdf.drop('service', axis=1, inplace=True)\n# test data\nnewdf_test=df_test.join(testdf_cat_data)\nnewdf_test.drop('flag', axis=1, inplace=True)\nnewdf_test.drop('protocol_type', axis=1, inplace=True)\nnewdf_test.drop('service', axis=1, inplace=True)\nprint(newdf.shape)\nprint(newdf_test.shape)","52a89260":"# take label column\nlabeldf=newdf['label']\nlabeldf_test=newdf_test['label']\n# change the label column\nnewlabeldf=labeldf.replace({ 'normal' : 0, 'neptune' : 1 ,'back': 1, 'land': 1, 'pod': 1, 'smurf': 1, 'teardrop': 1,'mailbomb': 1, 'apache2': 1, 'processtable': 1, 'udpstorm': 1, 'worm': 1,\n                           'ipsweep' : 2,'nmap' : 2,'portsweep' : 2,'satan' : 2,'mscan' : 2,'saint' : 2\n                           ,'ftp_write': 3,'guess_passwd': 3,'imap': 3,'multihop': 3,'phf': 3,'spy': 3,'warezclient': 3,'warezmaster': 3,'sendmail': 3,'named': 3,'snmpgetattack': 3,'snmpguess': 3,'xlock': 3,'xsnoop': 3,'httptunnel': 3,\n                           'buffer_overflow': 4,'loadmodule': 4,'perl': 4,'rootkit': 4,'ps': 4,'sqlattack': 4,'xterm': 4})\nnewlabeldf_test=labeldf_test.replace({ 'normal' : 0, 'neptune' : 1 ,'back': 1, 'land': 1, 'pod': 1, 'smurf': 1, 'teardrop': 1,'mailbomb': 1, 'apache2': 1, 'processtable': 1, 'udpstorm': 1, 'worm': 1,\n                           'ipsweep' : 2,'nmap' : 2,'portsweep' : 2,'satan' : 2,'mscan' : 2,'saint' : 2\n                           ,'ftp_write': 3,'guess_passwd': 3,'imap': 3,'multihop': 3,'phf': 3,'spy': 3,'warezclient': 3,'warezmaster': 3,'sendmail': 3,'named': 3,'snmpgetattack': 3,'snmpguess': 3,'xlock': 3,'xsnoop': 3,'httptunnel': 3,\n                           'buffer_overflow': 4,'loadmodule': 4,'perl': 4,'rootkit': 4,'ps': 4,'sqlattack': 4,'xterm': 4})\n# put the new label column back\nnewdf['label'] = newlabeldf\nnewdf_test['label'] = newlabeldf_test\nprint(newdf['label'].head())","49e42c89":"to_drop_DoS = [2,3,4]\nto_drop_Probe = [1,3,4]\nto_drop_R2L = [1,2,4]\nto_drop_U2R = [1,2,3]\nDoS_df=newdf[~newdf['label'].isin(to_drop_DoS)];\nProbe_df=newdf[~newdf['label'].isin(to_drop_Probe)];\nR2L_df=newdf[~newdf['label'].isin(to_drop_R2L)];\nU2R_df=newdf[~newdf['label'].isin(to_drop_U2R)];\n\n#test\nDoS_df_test=newdf_test[~newdf_test['label'].isin(to_drop_DoS)];\nProbe_df_test=newdf_test[~newdf_test['label'].isin(to_drop_Probe)];\nR2L_df_test=newdf_test[~newdf_test['label'].isin(to_drop_R2L)];\nU2R_df_test=newdf_test[~newdf_test['label'].isin(to_drop_U2R)];\nprint('Train:')\nprint('Dimensions of DoS:' ,DoS_df.shape)\nprint('Dimensions of Probe:' ,Probe_df.shape)\nprint('Dimensions of R2L:' ,R2L_df.shape)\nprint('Dimensions of U2R:' ,U2R_df.shape)\nprint('Test:')\nprint('Dimensions of DoS:' ,DoS_df_test.shape)\nprint('Dimensions of Probe:' ,Probe_df_test.shape)\nprint('Dimensions of R2L:' ,R2L_df_test.shape)\nprint('Dimensions of U2R:' ,U2R_df_test.shape)","b4fea3b2":"# Split dataframes into X & Y\n# assign X as a dataframe of feautures and Y as a series of outcome variables\nX_DoS = DoS_df.drop('label',1)\nprint('Dimensions of DoS:' ,X_DoS.shape)\nY_DoS = DoS_df.label\nX_Probe = Probe_df.drop('label',1)\nY_Probe = Probe_df.label\nX_R2L = R2L_df.drop('label',1)\nY_R2L = R2L_df.label\nX_U2R = U2R_df.drop('label',1)\nY_U2R = U2R_df.label\n# test set\nX_DoS_test = DoS_df_test.drop('label',1)\nY_DoS_test = DoS_df_test.label\nX_Probe_test = Probe_df_test.drop('label',1)\nY_Probe_test = Probe_df_test.label\nX_R2L_test = R2L_df_test.drop('label',1)\nY_R2L_test = R2L_df_test.label\nX_U2R_test = U2R_df_test.drop('label',1)\nY_U2R_test = U2R_df_test.label","63c1958a":"colNames=list(X_DoS)\ncolNames\ncolNames_test=list(X_DoS_test)","101ac62d":"from sklearn import preprocessing\nscaler1 = preprocessing.StandardScaler().fit(X_DoS)\nX_DoS=scaler1.transform(X_DoS) \nscaler2 = preprocessing.StandardScaler().fit(X_Probe)\nX_Probe=scaler2.transform(X_Probe) \nscaler3 = preprocessing.StandardScaler().fit(X_R2L)\nX_R2L=scaler3.transform(X_R2L) \nscaler4 = preprocessing.StandardScaler().fit(X_U2R)\nX_U2R=scaler4.transform(X_U2R) \n# test data\nscaler5 = preprocessing.StandardScaler().fit(X_DoS_test)\nX_DoS_test=scaler5.transform(X_DoS_test) \nscaler6 = preprocessing.StandardScaler().fit(X_Probe_test)\nX_Probe_test=scaler6.transform(X_Probe_test) \nscaler7 = preprocessing.StandardScaler().fit(X_R2L_test)\nX_R2L_test=scaler7.transform(X_R2L_test) \nscaler8 = preprocessing.StandardScaler().fit(X_U2R_test)\nX_U2R_test=scaler8.transform(X_U2R_test) ","fb325421":"print(X_DoS.std(axis=0))","392350a3":"print(X_Probe.std(axis=0));\nX_R2L.std(axis=0);\nX_U2R.std(axis=0);","2b95d3db":"#univariate feature selection with ANOVA F-test. using secondPercentile method, then RFE\n#Scikit-learn exposes feature selection routines as objects that implement the transform method\n#SelectPercentile: removes all but a user-specified highest scoring percentage of features\n#f_classif: ANOVA F-value between label\/feature for classification tasks.\nfrom sklearn.feature_selection import SelectPercentile, f_classif\nnp.seterr(divide='ignore', invalid='ignore');\nselector=SelectPercentile(f_classif, percentile=10)\nX_newDoS = selector.fit_transform(X_DoS,Y_DoS)\nX_newDoS.shape","cd2d87e2":"true=selector.get_support()\nnewcolindex_DoS=[i for i, x in enumerate(true) if x]\nnewcolname_DoS=list( colNames[i] for i in newcolindex_DoS )\nnewcolname_DoS","c1914916":"X_newProbe = selector.fit_transform(X_Probe,Y_Probe)\nX_newProbe.shape","77cd56c9":"true=selector.get_support()\nnewcolindex_Probe=[i for i, x in enumerate(true) if x]\nnewcolname_Probe=list( colNames[i] for i in newcolindex_Probe )\nnewcolname_Probe","b04584fd":"X_newR2L = selector.fit_transform(X_R2L,Y_R2L)\nX_newR2L.shape","9cb546ba":"true=selector.get_support()\nnewcolindex_R2L=[i for i, x in enumerate(true) if x]\nnewcolname_R2L=list( colNames[i] for i in newcolindex_R2L)\nnewcolname_R2L","4fe61182":"X_newU2R = selector.fit_transform(X_U2R,Y_U2R)\nX_newU2R.shape","9362fc85":"true=selector.get_support()\nnewcolindex_U2R=[i for i, x in enumerate(true) if x]\nnewcolname_U2R=list( colNames[i] for i in newcolindex_U2R)\nnewcolname_U2R","685b8efd":"print('Features selected for DoS:',newcolname_DoS)\nprint()\nprint('Features selected for Probe:',newcolname_Probe)\nprint()\nprint('Features selected for R2L:',newcolname_R2L)\nprint()\nprint('Features selected for U2R:',newcolname_U2R)","ba599917":"'''from sklearn import preprocessing\nfrom sklearn import utils\n\nlab_enc = preprocessing.LabelEncoder()\nencoded = lab_enc.fit_transform(Y_DoS) '''\n","2ee8b7c9":"#print(utils.multiclass.type_of_target(Y_DoS))\n","206899f7":"#print(utils.multiclass.type_of_target(Y_DoS.astype('int')))","9afd60c5":"#print(utils.multiclass.type_of_target(encoded))","264cdc0e":"Y_DoS=Y_DoS.astype('int')\nY_Probe=Y_Probe.astype('int')\nY_R2L=Y_R2L.astype('int')\nY_U2R=Y_U2R.astype('int')","bd902aa4":"#X_newDoS","bb812be8":"from sklearn.feature_selection import RFE\nfrom sklearn.ensemble import RandomForestClassifier\n# Create a decision tree classifier. By convention, clf means 'classifier'\nclf = RandomForestClassifier(random_state=0)\n\n#rank all features, i.e continue the elimination until the last one\nrfe = RFE(clf, n_features_to_select=1)\nrfe.fit(X_newDoS, Y_DoS)\nprint (\"DoS Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_DoS)))","2a225c57":"rfe.fit(X_newProbe, Y_Probe)\nprint (\"Probe Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_Probe)))","2d0408a8":"rfe.fit(X_newR2L, Y_R2L)\n \nprint (\"R2L Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_R2L)))","70ebcbdc":"rfe.fit(X_newU2R, Y_U2R)\n \nprint (\"U2R Features sorted by their rank:\")\n\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_U2R)))","a3c05cca":"from sklearn.feature_selection import RFE\nclf = RandomForestClassifier(random_state=0)\nrfe = RFE(estimator=clf, n_features_to_select=13, step=1)\nrfe.fit(X_DoS, Y_DoS)\nX_rfeDoS=rfe.transform(X_DoS)\ntrue=rfe.support_\nrfecolindex_DoS=[i for i, x in enumerate(true) if x]\nrfecolname_DoS=list(colNames[i] for i in rfecolindex_DoS)","4c3c26c7":"rfe.fit(X_Probe, Y_Probe)\nX_rfeProbe=rfe.transform(X_Probe)\ntrue=rfe.support_\nrfecolindex_Probe=[i for i, x in enumerate(true) if x]\nrfecolname_Probe=list(colNames[i] for i in rfecolindex_Probe)","54c3009a":"rfe.fit(X_R2L, Y_R2L)\nX_rfeR2L=rfe.transform(X_R2L)\ntrue=rfe.support_\nrfecolindex_R2L=[i for i, x in enumerate(true) if x]\nrfecolname_R2L=list(colNames[i] for i in rfecolindex_R2L)","5f45893d":"rfe.fit(X_U2R, Y_U2R)\nX_rfeU2R=rfe.transform(X_U2R)\ntrue=rfe.support_\nrfecolindex_U2R=[i for i, x in enumerate(true) if x]\nrfecolname_U2R=list(colNames[i] for i in rfecolindex_U2R)","39b1e37d":"print('Features selected for DoS:',rfecolname_DoS)\nprint()\nprint('Features selected for Probe:',rfecolname_Probe)\nprint()\nprint('Features selected for R2L:',rfecolname_R2L)\nprint()\nprint('Features selected for U2R:',rfecolname_U2R)","dc756ccc":"print(X_rfeDoS.shape)\nprint(X_rfeProbe.shape)\nprint(X_rfeR2L.shape)\nprint(X_rfeU2R.shape)","d63fd239":"clf_DoS=RandomForestClassifier(random_state=0)\nclf_Probe=RandomForestClassifier(random_state=0)\nclf_R2L=RandomForestClassifier(random_state=0)\nclf_U2R=RandomForestClassifier(random_state=0)\nclf_DoS.fit(X_DoS, Y_DoS)\nclf_Probe.fit(X_Probe, Y_Probe)\nclf_R2L.fit(X_R2L, Y_R2L)\nclf_U2R.fit(X_U2R, Y_U2R)","b86c297b":"# selected features\nclf_rfeDoS=RandomForestClassifier(random_state=0)\nclf_rfeProbe=RandomForestClassifier(random_state=0)\nclf_rfeR2L=RandomForestClassifier(random_state=0)\nclf_rfeU2R=RandomForestClassifier(random_state=0)\nclf_rfeDoS.fit(X_rfeDoS, Y_DoS)\nclf_rfeProbe.fit(X_rfeProbe, Y_Probe)\nclf_rfeR2L.fit(X_rfeR2L, Y_R2L)\nclf_rfeU2R.fit(X_rfeU2R, Y_U2R)","c0b86cda":"clf_DoS.predict(X_DoS_test)","8a5c6619":"Y_DoS_pred=clf_DoS.predict(X_DoS_test)\n# Create confusion matrix\npd.crosstab(Y_DoS_test, Y_DoS_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","c960f147":"Y_Probe_pred=clf_Probe.predict(X_Probe_test)\n# Create confusion matrix\npd.crosstab(Y_Probe_test, Y_Probe_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","7e872f73":"Y_R2L_pred=clf_R2L.predict(X_R2L_test)\n# Create confusion matrix\npd.crosstab(Y_R2L_test, Y_R2L_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","a0b52416":"Y_U2R_pred=clf_U2R.predict(X_U2R_test)\n# Create confusion matrix\npd.crosstab(Y_U2R_test, Y_U2R_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","97779f61":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\naccuracy = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='precision')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='recall')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='f1')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","750956f1":"accuracy = cross_val_score(clf_Probe, X_Probe_test, Y_Probe_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_Probe, X_Probe_test, Y_Probe_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_Probe, X_Probe_test, Y_Probe_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_Probe, X_Probe_test, Y_Probe_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","c2081773":"accuracy = cross_val_score(clf_R2L, X_R2L_test, Y_R2L_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_R2L, X_R2L_test, Y_R2L_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_R2L, X_R2L_test, Y_R2L_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_R2L, X_R2L_test, Y_R2L_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","a9b5bdd1":"accuracy = cross_val_score(clf_U2R, X_U2R_test, Y_U2R_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_U2R, X_U2R_test, Y_U2R_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_U2R, X_U2R_test, Y_U2R_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_U2R, X_U2R_test, Y_U2R_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","91ef7926":"# reduce test dataset to 13 features, use only features described in rfecolname_DoS etc.\nX_DoS_test2=X_DoS_test[:,rfecolindex_DoS]\nX_Probe_test2=X_Probe_test[:,rfecolindex_Probe]\nX_R2L_test2=X_R2L_test[:,rfecolindex_R2L]\nX_U2R_test2=X_U2R_test[:,rfecolindex_U2R]\nX_U2R_test2.shape","9dc0bceb":"Y_DoS_pred2=clf_rfeDoS.predict(X_DoS_test2)\n# Create confusion matrix\npd.crosstab(Y_DoS_test, Y_DoS_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","fbf26af4":"Y_Probe_pred2=clf_rfeProbe.predict(X_Probe_test2)\n# Create confusion matrix\npd.crosstab(Y_Probe_test, Y_Probe_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","e31389f7":"Y_R2L_pred2=clf_rfeR2L.predict(X_R2L_test2)\n# Create confusion matrix\npd.crosstab(Y_R2L_test, Y_R2L_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","44c3aafd":"Y_U2R_pred2=clf_rfeU2R.predict(X_U2R_test2)\n# Create confusion matrix\npd.crosstab(Y_U2R_test, Y_U2R_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","fb763bf6":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='precision')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='recall')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='f1')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","e2d66aa9":"accuracy = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","334b9e81":"accuracy = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","fc673c64":"accuracy = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","75d585cc":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","d54f6afb":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","4b02ad82":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","c57f3a1e":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","1b6ef93d":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","f7266512":"accuracy = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","c29fdfe4":"accuracy = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","938361ed":"accuracy = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","54534153":"accuracy = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","158e3ec8":"accuracy = cross_val_score(clf_rfeProbe, X_Probe_test2, Y_Probe_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","493a2e00":"accuracy = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","18f560b3":"accuracy = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","71acafc3":"accuracy = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","eb9b7feb":"accuracy = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","8f818e0a":"accuracy = cross_val_score(clf_rfeR2L, X_R2L_test2, Y_R2L_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","c43b2a13":"accuracy = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","081c8541":"accuracy = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","3334c99d":"accuracy = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","11b05151":"accuracy = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","8f63e481":"accuracy = cross_val_score(clf_rfeU2R, X_U2R_test2, Y_U2R_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","c7deb3c7":"## Identify categorical features","b08cd6e6":"### Check that the Standard Deviation is 1","82928384":"### Add 6 missing categories from train set to test set","a0b24eef":"# One-Hot-Encoding","567d97e3":"# LabelEncoder","f45b7eb2":"\n# Step 5: Prediction & Evaluation (validation):\n* Using All features\n* confusion matrix\n* DOS","c89b48d9":"### Get the features that were selected: U2R","6f6e392d":"# Using 13 Features for each category\n* Confusion Matrices\n* DOS\n","99477c7a":"### Make column names for dummies","bfc31175":"# Step 2: Feature Scaling:","08634899":"### Get the features that were selected: R2L","a1909ae9":"* U2R","1353a148":"* U2R","0308d206":"# Step 3: Feature Selection:","df94ecb8":"* R2L","1ffbe372":"* U2R","1f5db695":"### Save a list of feature names for later use (it is the same for every attack category). Column names are dropped at this stage.","7a3e0721":"# 2. Recursive Feature Elimination for feature ranking (Option 1: get importance from previous selected)","ee92178a":"****## \n\n## To procede with the data mining, the second option is considered as this uses RFE. From now on the number of features for every attack category is 13.","1ad5212d":"## Transform categorical features into numbers using LabelEncoder()","ba900978":"# Step 1: Data preprocessing:","614114b4":"## Statistical Summary","03e815d0":"# 2. Recursive Feature Elimination, select 13 features each of 122 (Option 2: get 13 best features from 122 from RFE)","cf9e3f0a":"# 1. Univariate Feature Selection using ANOVA F-test","c046377e":"### Insert categorical features into a 2D numpy array","2cfabec0":"## Join encoded categorical dataframe with the non-categorical dataframe","68ed772c":"* PROBE","7876e008":"* PROBE","d431eed1":"# Summary of features selected by Univariate Feature Selection","11a2fa51":"### Conclusion: Need to make dummies for all categories as the distribution is fairly even. In total: 3+70+11=84 dummies.\n### Comparing the results shows that the Test set has fewer categories (6), these need to be added as empty columns.","3c69c87a":"# Cross Validation: Accuracy, Precision, Recall, F-measure\n* DOS","fec9c687":"# Modelling Intrusion Detection: Analysis of a Feature Selection Mechanis\n## Method Description\n### Step 1: Data preprocessing:\n### Step 2: Feature Selection:\n### Step 4: Build the model:\n### Step 5: Prediction & Evaluation (validation):\n","cdafd37d":"### Get the features that were selected: Probe","59e5434e":"* R2L","b9b34671":"* R2L","14931b1c":"### Get the features that were selected: DoS","e0873724":"## Version Check","62900a7f":"* U2R","712e6c64":"## Load the Dataset","f333a536":"* PROBE","a8422831":"* Cross Validation: Accuracy, Precision, Recall, F-measure\n* DoS\n\n","614f0f24":"# Summary of features selected by RFE","b340efc7":"* PROBE","8f8d2be5":"## Label Distribution of Training and Test set","cbcf6b5d":"## Sample view of the training dataset","3eb7a395":"# build the model","47b07580":"# Split Dataset into 4 datasets for every attack category\n## Rename every attack label: 0=normal, 1=DoS, 2=Probe, 3=R2L and 4=U2R.\n## Replace labels column with new labels column\n## Make new datasets\n","ce75ddb0":"## Use StandardScaler() to scale the dataframes","ce91d504":"* R2L","45c441bf":"* U2R","555327d6":"* R2L","72f94cd5":"* PROBE","a145f654":"# CV 2, 5, 10, 30, 50 fold\n* DOS"}}