{"cell_type":{"8b9df149":"code","c5b9effc":"code","319aa249":"code","040b4c5f":"code","0b60cd54":"code","72463cd7":"code","ac612d71":"code","b7aa2d17":"code","2b66bb70":"code","e3b795e8":"code","65edc593":"code","84ade19d":"code","e33b3c2c":"code","188a704b":"code","2d51044a":"markdown","22ff958e":"markdown","14a184b9":"markdown","005f6a80":"markdown","3bae2e42":"markdown"},"source":{"8b9df149":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5b9effc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","319aa249":"#Importing the dataset\ndataset=pd.read_csv('..\/input\/position-salaries\/Position_salaries.csv')","040b4c5f":"dataset.head(n=10)","0b60cd54":"dataset.info() #data type","72463cd7":"dataset.describe()","ac612d71":"dataset.isnull().sum()#null values","b7aa2d17":"#Seperating the X and Y columns\nX=dataset.iloc[:,1:2].values\nY=dataset.iloc[:,2].values","2b66bb70":"# Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X, Y)","e3b795e8":"# Fitting Polynomial Regression to the dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 3)\nX_poly = poly_reg.fit_transform(X)\npoly_reg.fit(X_poly, Y)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, Y)","65edc593":"# Visualising the Linear Regression results\nplt.scatter(X, Y, color = 'red')\nplt.plot(X, lin_reg.predict(X), color = 'blue')\nplt.show()","84ade19d":"# Visualising the Polynomial Regression results\nplt.scatter(X, Y, color = 'red')\nplt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color = 'blue')\nplt.title('Truth or bluff(Polynomial Regression)')\nplt.xlabel('position level')\nplt.ylabel('salary')\nplt.show()","e33b3c2c":"# Predicting a new result with Linear Regression\nlin_reg.predict([[6.5]])","188a704b":"# Predicting a new result with Polynomial Regression\nlin_reg_2.predict(poly_reg.fit_transform([[6.5]]))","2d51044a":"This is a linear regression plot..the blue line indicates line of best fit","22ff958e":"In this algorithm am using a position_salaries dataset, to predict salaries at different levels and comparing it with linear regression score..Polynomial regression is used when the data is non-linear.\n\nHope you enjoy it !!","14a184b9":"degree=3 indicates the value at the power of X, as we have equation for polynomial regression :\nY=wx^3+wx^2+b(if degree=3)..in case if you have taken degree=2.i.e (Y=wx^2+wx+b)\n\nfor linear regression its: y=wx+b..This is the difference between the equations.\nTry changing the degree values to compare the scores","005f6a80":"we can check by taking any other values and compare it with linear regression score.\nHope you liked it..please give me an upvote","3bae2e42":"This is how the curve looks like,so am predicting the salary at 6.5 level in the below syntax and comparing it with linear regression"}}