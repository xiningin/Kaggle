{"cell_type":{"48e5bc31":"code","2a90a285":"code","1309a50a":"code","72c550cc":"code","7e31474e":"code","679cc7c6":"code","f4587576":"code","469b3b39":"code","457b03c5":"code","f0f261da":"code","fa3d91f1":"markdown"},"source":{"48e5bc31":"import optuna\nfrom xgboost import XGBRegressor\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nxgb.__version__","2a90a285":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\ntest.head()","1309a50a":"columns = test.columns[1:]\ncategorical_cols=['cat'+str(i) for i in range(10)]\ncontinous_cols=['cont'+str(i) for i in range(14)]\ntarget = train['target']","72c550cc":"for e in categorical_cols:\n    le = LabelEncoder()\n    train[e]=le.fit_transform(train[e])\n    test[e]=le.transform(test[e])","7e31474e":"def objective(trial,data=train,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data[columns], target, test_size=0.2,random_state=42)\n    \n    param = {\n        #'eval_metric': 'rmse', \n        \"objective\": \"reg:squarederror\",\n        'random_state': 48,\n        'n_estimators': 1000,\n        'tree_method': 'gpu_hist',\n        'predictor': 'gpu_predictor',\n        'gpu_id': 0,\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        'colsample_bytree': trial.suggest_loguniform('colsample_bytree', 0.2, 1.0),\n        'subsample': trial.suggest_loguniform('subsample', 0.4, 1.0),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 0.5),\n        'max_depth': trial.suggest_categorical('max_depth', [5,10,20,30]),\n\n    }\n    \n    model = XGBRegressor(**param)  \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=10,verbose=False)\n\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","679cc7c6":"'''%%time\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=50)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)'''","f4587576":"params = {'reg_alpha': 0.48918981977195675,\n 'reg_lambda': 0.23166250104970132,\n 'colsample_bytree': 0.5257968778075015,\n 'subsample': 0.8959010674808804,\n 'learning_rate': 0.0278438302966696,\n 'max_depth': 5,\n 'random_state': 48,\n 'n_estimators': 1000,\n 'metric': 'rmse'}","469b3b39":"preds = np.zeros(test.shape[0])\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nrmse=[]  # list contains rmse for each fold\nn=0\nfor trn_idx, test_idx in kf.split(train,target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target[trn_idx],target[test_idx]\n    model = XGBRegressor(**params)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=20,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits\n    rmse.append(mean_squared_error(y_val, model.predict(X_val), squared=False))\n    print(n+1,rmse[n])\n    n+=1","457b03c5":"np.mean(rmse)","f0f261da":"sub['target']=preds\nsub.to_csv('submission_xgb_1.csv', index=False)","fa3d91f1":"This is a modified version of the following notebook: https:\/\/www.kaggle.com\/hamzaghanmi\/lgbm-hyperparameter-tuning-using-optuna\n\nThe main differences are the following:\n\nDummy encoding of the categorical variables\nModified ranges of the test options adn increased number of test rounds\nUse of GPU"}}