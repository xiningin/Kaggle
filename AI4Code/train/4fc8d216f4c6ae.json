{"cell_type":{"c35cb4e9":"code","d527ff1d":"code","438734e6":"code","7893addb":"code","d0bf471e":"code","7b75b00e":"code","7799d7cb":"code","81585a74":"code","669ea2e4":"code","128264ea":"code","6f370915":"code","d0844b45":"code","69319079":"code","332bf2d9":"code","897fd64c":"code","f3fbeed1":"code","7466d325":"code","ffcbf2be":"code","7c5d68ad":"code","60bde656":"code","c8df2f8c":"code","2ffc0d8e":"code","294e6631":"code","ecc69280":"code","481765a7":"code","dd4a9676":"code","4de2241b":"code","64b1b702":"code","3eaa94cc":"code","1ac5bf09":"code","badf38b8":"code","b45e21c4":"code","6c6e9f61":"code","6f48a934":"code","178a5f80":"code","6b322f59":"code","5a0462ac":"code","16b8cba8":"code","154eb7a9":"code","3f5f0027":"code","b5fe26a5":"code","77e0f1f3":"code","52bd0896":"code","400a1820":"code","ba65a1a7":"code","5ecbaeb2":"code","0d79bb13":"code","c8b46abc":"code","95232039":"code","b10f9f14":"code","8de4a87f":"code","c2f1ced6":"markdown","dff9e09c":"markdown","b18ce436":"markdown","9a152f15":"markdown","2754d1bf":"markdown","815aadc9":"markdown","b35d6702":"markdown","34f6b0d5":"markdown","8365d51d":"markdown","caed9306":"markdown","cf6dea6d":"markdown","2b7a0cfb":"markdown"},"source":{"c35cb4e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport pandas_profiling\n\n# Matplotlib forms basis for visualization in Python\nimport matplotlib.pyplot as plt\n\n# We will use the Seaborn library\nimport seaborn as sns\nsns.set()\n\n# Graphics in retina format are more sharp and legible\n%config InlineBackend.figure_format = 'retina'\n\n#\u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 8, 5\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d527ff1d":"#Read data\ndf = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\n\n# First 5 rows of our data\ndf.head()","438734e6":"profile = pandas_profiling.ProfileReport(df)\nprofile","7893addb":"#Count for target values\ndf.target.value_counts()","d0bf471e":"df.groupby('target').mean()","7b75b00e":"# Rows, columns:\ndf.shape","7799d7cb":"# summary of dataset\ndf.info()","81585a74":"# \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u21161 (\u043d\u043e \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c)\ndf.describe()","669ea2e4":"features = ['trestbps', 'restecg','thalach']\ndf[features].hist(figsize=(10, 4));","128264ea":"#\u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\npd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))","6f370915":"# \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e \u0433\u0435\u043d\u0434\u0435\u0440\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443\npd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\n\n# \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 - \u0443 \u0436\u0435\u043d\u0449\u0438\u043d \u0431\u043e\u043b\u0435\u0437\u043d\u0438 \u0441\u0435\u0440\u0434\u0446\u0430 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0447\u0430\u0449\u0435, \u0447\u0435\u043c \u0443 \u043c\u0443\u0436\u0447\u0438\u043d. \n# \u0418 \u0431\u043e\u043b\u044c\u043d\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0437\u0434\u043e\u0440\u043e\u0432\u044b\u0445.","d0844b45":"sns.distplot(df.chol)","69319079":"# `pairplot()` may become very slow with the SVG or retina format\n%config InlineBackend.figure_format = 'png'\nsns.pairplot(df[['thalach','chol', 'trestbps', 'oldpeak']]);","332bf2d9":"%config InlineBackend.figure_format = 'retina'","897fd64c":"# chol - serum cholestoral in mg\/dl\n# thalach - maximum heart rate achieved\n# sex - (1 = male; 0 = female)\n\nsns.lmplot('thalach', 'chol', data=df, hue='sex', fit_reg=False);\n","f3fbeed1":"# \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\ndf['age'].mean()","7466d325":"# \u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\ndf['age'].median()","ffcbf2be":"# \u0414\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f\ndf.var()","7c5d68ad":"# \u0414\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f, plot\ndf.var().plot()","60bde656":"# \u041c\u043e\u0434\u0430 \ndf.mode()\n\n# \u0417\u0434\u0435\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0434\u043b\u044f \u0445\u043e\u043b\u0435\u0441\u0442\u0435\u0440\u0438\u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0441\u0440\u0430\u0437\u0443 \u0434\u043b\u044f \u0442\u0440\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - 197, 204, 234\n# df[df['chol']==197].value_counts('chol')","c8df2f8c":"# Skewness \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n# thalach - maximum heart rate achieved\n# chol - serum cholestoral in mg\/dl\ndf[['thalach','chol']].skew()","2ffc0d8e":"sns.distplot(df['thalach'])","294e6631":"sns.distplot(df['chol'])","ecc69280":"# Kurtosis \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndf.kurtosis()","481765a7":"features = ['thalach', 'chol']\ndf[features].hist(figsize=(10, 4));","dd4a9676":"# Box plot\nsns.boxplot(x='thalach', data=df);","4de2241b":"sns.boxplot(data=df[['thalach','chol', 'trestbps']]);","64b1b702":"sns.violinplot(data=df['chol']);","3eaa94cc":"# Scatter plot\nplt.scatter(df['trestbps'], df['thalach']);","1ac5bf09":"sns.jointplot(x='thalach', y='chol', \n              data=df, kind='scatter');","badf38b8":"# \u0412 \u043f\u0430\u043d\u0434\u0430\u0441\u0435 \u043d\u0435 \u043d\u0430\u0448\u0435\u043b \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e, \u0432\u043e\u0437\u044c\u043c\u0435\u043c chi2_contingency \u0438\u0437 SciPy:\n\nimport scipy.stats as stats","b45e21c4":"stat, p, dof, expected = stats.chi2_contingency(df[['chol', 'thalach']])","6c6e9f61":"print('dof=%d' % dof)","6f48a934":"prob = 0.95\ncritical = stats.chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))","178a5f80":"# \u0415\u0441\u043b\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 >= \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \n# \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043e\u0442\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 (H0), \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\n# \u0415\u0441\u043b\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 < \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \n# \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0435\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 (H0), \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f.\n# \u041c\u044b \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c (\u0441 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 0.05)\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","6b322f59":"# P \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 0.05 - \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0434\u043b\u044f df['chol'] \u043e\u0442\u0432\u0435\u0440\u0433\u0430\u0435\u043c\nstats.kstest(df['chol'], cdf='norm', args=(df['chol'].mean(), df['chol'].std()))\n\n","5a0462ac":"from scipy.stats import boxcox","16b8cba8":"df['trestbps'].hist()","154eb7a9":"data=boxcox(df['trestbps'])","3f5f0027":"df['trestbps_bc']=data[0]","b5fe26a5":"df['trestbps_y']=data[1]","77e0f1f3":"df[['trestbps','trestbps_bc','trestbps_y']]","52bd0896":"df[['trestbps','trestbps_bc']].hist()","400a1820":"df.corr(method='pearson')","ba65a1a7":"Var_Corr = df.corr(method='pearson')\n# plot the heatmap and annotation on it\nplt.subplots(figsize=(15,10))\nsns.heatmap(Var_Corr, xticklabels=Var_Corr.columns, yticklabels=Var_Corr.columns, annot=True)","5ecbaeb2":"df.corr(method='spearman')","0d79bb13":"Var_Corr = df.corr(method='spearman')\n# plot the heatmap and annotation on it\nplt.subplots(figsize=(15,10))\nsns.heatmap(Var_Corr, xticklabels=Var_Corr.columns, yticklabels=Var_Corr.columns, annot=True)","c8b46abc":"df.corr(method='kendall')","95232039":"Var_Corr = df.corr(method='kendall')\n# plot the heatmap and annotation on it\nplt.subplots(figsize=(15,10))\nsns.heatmap(Var_Corr, xticklabels=Var_Corr.columns, yticklabels=Var_Corr.columns, annot=True)","b10f9f14":"# Compute the z score of each value in the sample, \n# relative to the sample mean and standard deviation.\nstats.zscore(df, axis=1)","8de4a87f":"df.mad()","c2f1ced6":"**Chi-squared test**","dff9e09c":"Data contains 14 columns: <br>\n\n* age - age in years <br>\n* sex - (1 = male; 0 = female) <br>\n* cp - chest pain type <br>\n* trestbps - resting blood pressure (in mm Hg on admission to the hospital) <br>\n* chol - serum cholestoral in mg\/dl <br>\n* fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false) <br>\n* restecg - resting electrocardiographic results <br>\n* thalach - maximum heart rate achieved <br>\n* exang - exercise induced angina (1 = yes; 0 = no) <br>\n* oldpeak - ST depression induced by exercise relative to rest <br>\n* slope - the slope of the peak exercise ST segment <br>\n* ca - number of major vessels (0-3) colored by flourosopy <br>\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect <br>\n* target - have disease or not (1=yes, 0=no)","b18ce436":"# Box Cox transformation(Power transform) ","9a152f15":"# 1. \u0421\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0435\u0434\u0438\u0430\u043d\u0430, \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f, \u043c\u043e\u0434\u0430","2754d1bf":"# INTRODUCTION\n\nObjectives:\n1. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 - https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci\n2. \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0438\u0436\u0435\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435\n\nAnswer questions:\n1. \u0421\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0435\u0434\u0438\u0430\u043d\u0430, \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f, \u043c\u043e\u0434\u0430. \n2. Skewness(\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0430\u0441\u0441\u0438\u043c\u0435\u0442\u0440\u0438\u0438), kurtosis(\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u044d\u043a\u0441\u0446\u0435\u0441\u0441\u0430)\n3. Chi-squared test, Kolmogorov\u2013Smirnov test\n4. box cox transformation. Power transform\n5. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 - \u041f\u0438\u0440\u0441\u043e\u043d, \u0421\u043f\u0438\u0440\u043c\u0430\u043d, \u041a\u0435\u043d\u0434\u0430\u043b\u043b\n6. Standard score, robust standard score\n","815aadc9":"# 3. Chi-squared test, Kolmogorov\u2013Smirnov test","b35d6702":"# Initial exploration","34f6b0d5":"**Kolmogorov-Smirnov test**","8365d51d":"# Some visualizations","caed9306":"# 5. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 - \u041f\u0438\u0440\u0441\u043e\u043d, \u0421\u043f\u0438\u0440\u043c\u0430\u043d, \u041a\u0435\u043d\u0434\u0430\u043b\u043b","cf6dea6d":"# 6. Standard score, robust standard score","2b7a0cfb":"# 2. Skewness(\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0430\u0441\u0441\u0438\u043c\u0435\u0442\u0440\u0438\u0438), kurtosis(\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u044d\u043a\u0441\u0446\u0435\u0441\u0441\u0430)"}}