{"cell_type":{"c0ac0d5e":"code","440bc7b3":"code","cfb2fc5e":"code","b71f789f":"code","bdc90daa":"code","1a13cc7e":"code","dcd4afe4":"code","3301ea11":"code","0466a292":"code","42bc7428":"code","a8c772c7":"markdown","63882acf":"markdown","2e3dced3":"markdown","f029064d":"markdown","5cb87309":"markdown"},"source":{"c0ac0d5e":"import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport os\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","440bc7b3":"SEED = 42\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)\n\nPROJECT_ROOT_DIR = \".\"\nCHAPTER_ID = \"autoencoders\"\nIMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\nos.makedirs(IMAGES_PATH, exist_ok=True)\n\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)","cfb2fc5e":"def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)","b71f789f":"def plot_image(image):\n    plt.imshow(image, cmap=\"binary\")\n    plt.axis(\"off\")","bdc90daa":"(X_train_full, y_train_full), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()\nX_train_full = X_train_full.astype(np.float32) \/ 255\nX_test = X_test.astype(np.float32) \/ 255\nX_train, X_valid = X_train_full[:-5000], X_train_full[-5000:]\ny_train, y_valid = y_train_full[:-5000], y_train_full[-5000:]","1a13cc7e":"def rounded_accuracy(y_true, y_pred):\n    return keras.metrics.binary_accuracy(tf.round(y_true), tf.round(y_pred))\n\nstacked_encoder = keras.models.Sequential([\n    keras.layers.Flatten(input_shape=[28, 28]),\n    keras.layers.Dense(100, activation=\"selu\"),\n    keras.layers.Dense(30, activation=\"selu\"),\n])\nstacked_decoder = keras.models.Sequential([\n    keras.layers.Dense(100, activation=\"selu\", input_shape=[30]),\n    keras.layers.Dense(28 * 28, activation=\"sigmoid\"),\n    keras.layers.Reshape([28, 28])\n])\nstacked_ae = keras.models.Sequential([stacked_encoder, stacked_decoder])\nstacked_ae.compile(loss=\"binary_crossentropy\",\n                   optimizer=keras.optimizers.SGD(learning_rate=1.5), metrics=[rounded_accuracy])\nhistory = stacked_ae.fit(X_train, X_train, epochs=20,\n                         validation_data=(X_valid, X_valid))","dcd4afe4":"def show_reconstructions(model, images=X_valid, n_images=5):\n    reconstructions = model.predict(images[:n_images])\n    fig = plt.figure(figsize=(n_images * 1.5, 3))\n    for image_index in range(n_images):\n        plt.subplot(2, n_images, 1 + image_index)\n        plot_image(images[image_index])\n        plt.subplot(2, n_images, 1 + n_images + image_index)\n        plot_image(reconstructions[image_index])\n        \nshow_reconstructions(stacked_ae)\nsave_fig(\"reconstruction_plot\")","3301ea11":"np.random.seed(42)\n\nfrom sklearn.manifold import TSNE\n\nX_valid_compressed = stacked_encoder.predict(X_valid)\ntsne = TSNE()\nX_valid_2D = tsne.fit_transform(X_valid_compressed)\nX_valid_2D = (X_valid_2D - X_valid_2D.min()) \/ (X_valid_2D.max() - X_valid_2D.min())","0466a292":"plt.scatter(X_valid_2D[:, 0], X_valid_2D[:, 1], c=y_valid, s=10, cmap=\"tab10\")\nplt.axis(\"off\")\nplt.show()","42bc7428":"plt.figure(figsize=(10, 8))\ncmap = plt.cm.tab10\nplt.scatter(X_valid_2D[:, 0], X_valid_2D[:, 1], c=y_valid, s=10, cmap=cmap)\nimage_positions = np.array([[1., 1.]])\nfor index, position in enumerate(X_valid_2D):\n    dist = np.sum((position - image_positions) ** 2, axis=1)\n    if np.min(dist) > 0.02: # if far enough from other images\n        image_positions = np.r_[image_positions, [position]]\n        imagebox = mpl.offsetbox.AnnotationBbox(\n            mpl.offsetbox.OffsetImage(X_valid[index], cmap=\"binary\"),\n            position, bboxprops={\"edgecolor\": cmap(y_valid[index]), \"lw\": 2})\n        plt.gca().add_artist(imagebox)\nplt.axis(\"off\")\nsave_fig(\"fashion_mnist_visualization_plot\")\nplt.show()","a8c772c7":"# common functions","63882acf":"# make data and split data","2e3dced3":"# reconstrunction","f029064d":"# predict validation set","5cb87309":"# make model and train model"}}