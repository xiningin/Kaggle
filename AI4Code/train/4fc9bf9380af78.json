{"cell_type":{"011eae63":"code","0bbc14e1":"code","db946667":"code","1d734a29":"code","2660eabd":"code","3c78cb32":"code","387bd246":"code","83a886ac":"code","83be7ffd":"code","f11d3e76":"code","8304ddce":"code","2cd947ea":"code","0280f633":"code","f7dfb224":"code","a808ecd7":"code","3bb3c63a":"code","bed54abc":"code","be4b3e09":"code","e5b326d5":"code","ee427b8f":"code","a5591e8f":"code","0bf09460":"code","2542e607":"code","299bdd9d":"markdown","c4b53f33":"markdown","b7f25492":"markdown","7b740857":"markdown","111e146b":"markdown","9d86163f":"markdown","f6d80f33":"markdown","0ad602a1":"markdown","e5be7c33":"markdown","196e8a4d":"markdown","6b7b4bc1":"markdown","a70fca63":"markdown","3e07f7a6":"markdown","a3a07e82":"markdown","a2ebd250":"markdown","5def19f7":"markdown","20155d2c":"markdown","3fffad2c":"markdown","a7dc9bc6":"markdown","b8f32930":"markdown"},"source":{"011eae63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\nimport seaborn as sns\n\n\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\npaths = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        paths.append(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bbc14e1":"data = pd.read_csv(paths[0])\ndata.info()\n","db946667":"data.isnull().values.any()\n\n","1d734a29":"data.columns\n","2660eabd":"data.describe()","3c78cb32":"data.head()","387bd246":"\n\ndata.nunique()\n\n\n","83a886ac":"data.school.value_counts(normalize=True)","83be7ffd":"data.sex.value_counts(normalize=True)","f11d3e76":"sns.set(rc={'figure.figsize':(8,6)})\nsns.countplot(x=\"school\", hue =\"sex\", data=data)","8304ddce":"sns.countplot(data.age)","2cd947ea":"data['internet'] = data['internet'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['romantic'] = data['romantic'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['school'] = data['school'].replace({'GP': 0, 'MS': 1}).astype(int)\ndata['sex'] = data['sex'].replace({'M': 0, 'F': 1})\ndata['address'] = data['address'].replace({'R': 0, 'U': 1})\ndata['famsize'] = data['famsize'].replace({'LE3': 0, 'GT3': 1})\ndata['Pstatus'] = data['Pstatus'].replace({'A': 0, 'T': 1})\ndata['Mjob'] = data['Mjob'].replace({'at_home': 0, 'health': 1, 'other': 2, 'services': 3, 'teacher': 4})\ndata['Fjob'] = data['Fjob'].replace({'at_home': 0, 'health': 1, 'other': 2, 'services': 3, 'teacher': 4}).astype(int)\ndata['reason'] = data['reason'].replace({'course': 0, 'other': 1, 'home': 2, 'reputation': 3}).astype(int)\ndata['guardian'] = data['guardian'].replace({'mother': 0, 'father': 1, 'other': 2}).astype(int)\ndata['schoolsup'] = data['schoolsup'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['famsup'] = data['famsup'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['paid'] = data['paid'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['activities'] = data['activities'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['nursery'] = data['nursery'].replace({'no': 0, 'yes': 1}).astype(int)\ndata['higher'] = data['higher'].replace({'no': 0, 'yes': 1}).astype(int)\n\ndata.info()","0280f633":"data.columns\n","f7dfb224":"data['GAvg'] = (data['G1'] + data['G2'] + data['G3']) \/ 3\ndef grade_assign(df):\n    # Create a list to store the data\n    grades = []\n\n    # For each row in the column,\n    for row in df['GAvg']:\n        # if more than a value,\n        if row >= (0.9 * df['GAvg'].max()):\n            # Append a letter grade\n            grades.append('A')\n        # else, if more than a value,\n        elif row >= (0.7 * df['GAvg'].max()):\n            # Append a letter grade\n            grades.append('B')\n        # else, if more than a value,\n        elif row < (0.7 * df['GAvg'].max()):\n            # Append a letter grade\n            grades.append('C')   \n    # Create a column from the list\n    df['grades'] = grades\n    return df","a808ecd7":"data = grade_assign(data)\ndata.head()","3bb3c63a":"\nX = data.drop(['grades','famsize'], axis=1)\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndata['grades'] = le.fit_transform(data['grades'])\ny=data['grades']","bed54abc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=100)\n","be4b3e09":"from sklearn.linear_model import LinearRegression\nReg = LinearRegression()\nReg.fit(X_train, y_train)\n","e5b326d5":"y_pred = Reg.predict(X_test)\nprint(y_pred)","ee427b8f":"from sklearn.metrics import accuracy_score\ncount_misclassified = (y_test != y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy_score(y_pred.round(),y_test,normalize = False)\n","a5591e8f":"dtree = tree.DecisionTreeClassifier(max_depth=5, criterion='entropy', random_state=42)\ndtree.fit(X_train,y_train)","0bf09460":"import graphviz\nfrom sklearn.tree import export_text\n\nfeature_names = X.columns\ndot_data = tree.export_graphviz(dtree, out_file=None, feature_names=X.columns,class_names=['unacc', 'acc', 'good', 'vgood'], filled=True, rounded=True, special_characters=True)  \ngraph = graphviz.Source(dot_data)  \nprint(graph)\nr = export_text(dtree, feature_names=X.columns.tolist())\nprint(r)","2542e607":"predictions = dtree.predict(X_test)\n\n\naccuracy_score(y_true = y_test, y_pred = predictions)\n","299bdd9d":"no of unique datatypes","c4b53f33":"again display new attribute values for 5 rows","b7f25492":"Importing packages","7b740857":"Building Decision Tree","111e146b":"splitting into train and test set","9d86163f":"Build LR model","f6d80f33":"first 5 row","0ad602a1":"visualizing graph for male and female count","e5be7c33":"visualizing graph into list","196e8a4d":"predicting accuracy of decisiontree","6b7b4bc1":"calculate avg of grade and assign grade to find op","a70fca63":"normalization in terms of sex","3e07f7a6":"Visualizing graph for age","a3a07e82":"statistical data","a2ebd250":"Loading Dataset\n\ndata = pd.read_csv(paths[0])\ndata.info()\n","5def19f7":"replacing the attribute value to integer and change its type","20155d2c":"normalization interms os chool","3fffad2c":"Column names","a7dc9bc6":"predicting op","b8f32930":"Check for null value"}}