{"cell_type":{"66b358c2":"code","8ae2db8d":"code","f0b34904":"code","3278b8ba":"code","3e35eac9":"code","955cd8be":"code","df752db1":"code","ada8ae4e":"code","6a24387c":"code","81605ad9":"code","b72ac511":"code","650d459a":"code","920818f1":"code","f1e508f5":"code","1ebb1520":"code","e2e03f2c":"code","ddc703d7":"code","ac951a48":"code","573aac6d":"code","eb23d6db":"code","59e07dbd":"code","9b1d801b":"code","816e821b":"code","83acae07":"code","8f430807":"code","142c6f3c":"code","7fd33858":"code","edf46d22":"code","1fe9e35a":"code","326fb72a":"code","9b841fe9":"code","7aba92b0":"code","f8f6776f":"code","c58a4036":"code","2335152b":"code","7a76413c":"code","8afe6acb":"code","e541931b":"code","38c50862":"code","efbfbdbd":"code","42345494":"code","df851496":"code","b7215637":"code","9f0f02c0":"code","030bb1a1":"code","2d140159":"code","f4242bc2":"code","8977e98c":"code","4f4d5494":"code","2cef83cd":"code","cfd71037":"code","53258f2b":"code","bb53dc49":"code","478268e3":"code","1b7b589c":"code","cd5a4e80":"code","c0e4455e":"code","2aa16c06":"code","76c6db27":"code","8e284227":"code","0addb326":"code","c2521240":"code","c0cbc7b9":"code","aa957a2a":"code","1f9dc306":"code","a5216271":"code","061ce0e2":"code","faeabb5b":"code","5f3b79d5":"code","16c38b9e":"code","221a28e3":"code","10628965":"code","66e3f890":"code","ecc7b997":"code","3c6dbd74":"code","5c964d0f":"code","f1359d3c":"code","e2f5790a":"code","4c4f771a":"code","ea422941":"code","5b5b1206":"code","593a339f":"code","4b08ef1a":"code","77316cd5":"code","b78c8897":"code","a6c9078b":"code","083a0224":"code","d05a1dfe":"code","14175e17":"code","f4ecf8aa":"code","5e6c6535":"code","8731a0f5":"code","e910ec3b":"code","9ed50c1b":"code","3d9f24c3":"code","fa7d47c5":"code","0a868bcb":"code","eb30f585":"code","c6741805":"code","26e3d100":"code","fce5e8f2":"code","fc325f47":"code","4c2e0224":"code","039aeaf9":"code","f0b95823":"code","2963f22e":"code","7e7e622f":"code","e0337dcb":"code","4616c057":"code","cd9767cb":"code","3ce91bec":"code","2d8894fd":"code","d72b0b9c":"code","b80aca1b":"code","7d76116b":"code","651ee1f7":"code","810bcf18":"code","932387da":"code","6db8d6c0":"code","3c40ad2c":"code","25a3b537":"code","5bb04826":"code","e4541268":"code","489d15d9":"code","162fbef4":"code","02fcd40d":"code","51027ec5":"code","4b4ebc81":"code","83f29657":"code","bbaa3b8f":"code","c0daa1ee":"code","2aeae688":"markdown","b5ed3242":"markdown","10b23175":"markdown","e631177a":"markdown","7b000f8b":"markdown","0e09e8f8":"markdown","186e0d52":"markdown","7bb725bf":"markdown","dbceb7ce":"markdown","86899cf6":"markdown","fd0bb8e0":"markdown","17b75f4b":"markdown","cad7ccdb":"markdown","caa852a1":"markdown","9eab6488":"markdown","359d06e3":"markdown","9cc44007":"markdown","c2876e7b":"markdown","f7a99c27":"markdown","89562bc9":"markdown","b001d39c":"markdown","67cc4b92":"markdown","2aa67d47":"markdown","563a8b55":"markdown","7113a702":"markdown","86e4be14":"markdown","9ad2ae6f":"markdown","84723cab":"markdown","34ba3c02":"markdown","5e36a0d5":"markdown","469eb5f1":"markdown","399752c7":"markdown","28eb9bc2":"markdown","1ca3c0d9":"markdown","e0b1e98c":"markdown","785a59b9":"markdown"},"source":{"66b358c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ae2db8d":"!pip install pandas_summary","f0b34904":"import pandas_summary as ps\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","3278b8ba":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmit = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","3e35eac9":"train_ps = ps.DataFrameSummary(train)","955cd8be":"train.head(3)","df752db1":"train.shape","ada8ae4e":"train_ps.columns_types","6a24387c":"print('Numeric columns are:', train_ps.numerics)\nprint('categorical columns are:', train_ps.categoricals)\nprint('bool columns are:', train_ps.bools)\nprint('unique columns are:', train_ps.uniques)","81605ad9":"train_ps.columns_stats.T","b72ac511":"sns.heatmap(train.isnull(), cbar=False, yticklabels=False, cmap='viridis')","650d459a":"test_ps = ps.DataFrameSummary(test)","920818f1":"test.head()","f1e508f5":"test.shape","1ebb1520":"test.columns","e2e03f2c":"print('Numeric columns are:', test_ps.numerics)\nprint('categorical columns are:', test_ps.categoricals)\nprint('bool columns are:', test_ps.bools)\nprint('unique columns are:', test_ps.uniques)","ddc703d7":"test_ps.columns_stats.T","ac951a48":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False, cmap='viridis')","573aac6d":"# basic statistics  train df\ntrain_ps.summary().T","eb23d6db":"#basic statistics test df\ntest_ps.summary().T","59e07dbd":"correlation_Train = train_ps.corr\ncorrelation_Train","9b1d801b":"plt.figure(figsize=(20, 10))\nsns.heatmap(correlation_Train, annot=True, cmap = 'viridis')\nplt.show()","816e821b":"correlation_Test = test_ps.corr\ncorrelation_Test","83acae07":"plt.figure(figsize=(20, 10))\nsns.heatmap(correlation_Test, annot=True, cmap = 'viridis')\nplt.show()","8f430807":"! pip install sweetviz","142c6f3c":"import sweetviz as sv","7fd33858":"report = sv.analyze(train)","edf46d22":"report.show_html()","1fe9e35a":"sns.catplot('Survived', data = train, kind= 'count')","326fb72a":"train.Survived.value_counts()","9b841fe9":"train_ps.bools","7aba92b0":"sns.catplot('Sex', data =train,  hue = 'Survived',  kind= 'count')","f8f6776f":"sns.distplot(train['Age'])","c58a4036":"bins = np.linspace(min(train['Age']), max(train['Age']), 5)","2335152b":"bins","7a76413c":"group_names = ['child', 'young', 'adult', 'old']\ntrain['age_bining'] = pd.cut(train['Age'], bins, labels = group_names, include_lowest=True)","8afe6acb":"sns.catplot(\"age_bining\", kind = 'count', hue = 'Survived', data = train)","e541931b":"sns.catplot(\"age_bining\", kind = 'count',  data = train)","38c50862":"test.hist(figsize=(14,8))\nplt.title('Histograms of test data')\nplt.show()","efbfbdbd":"bins = np.linspace(min(test['Age']), max(test['Age']), 5)\ngroup_names = ['child', 'young', 'adult', 'old']\ntest['age_bining'] = pd.cut(test['Age'], bins, labels = group_names, include_lowest=True)","42345494":"sns.catplot(\"age_bining\", kind = 'count',data = test)","df851496":"sns.catplot(\"SibSp\", kind = 'count',data = train)","b7215637":"sns.catplot(\"SibSp\", kind = 'count',hue = \"Survived\", data = train, aspect=1.5)\nplt.show()","9f0f02c0":"sns.catplot(\"Parch\", kind = 'count',data = train,aspect=1.5)","030bb1a1":"sns.catplot(\"Parch\", kind = 'count',hue = 'Survived', data = train,aspect=2)","2d140159":"q1 = train.quantile(0.25)\nq3 = train.quantile(0.75)\nIQR = q3-q1\nIQR.sort_values(ascending = False)","f4242bc2":"sns.boxplot(y = 'Fare',data = train)","8977e98c":"sns.boxplot(y = 'Age',data = train)","4f4d5494":"train.isnull().sum()","2cef83cd":"test.isnull().sum()","cfd71037":"train.drop(['Cabin', 'age_bining'], axis = 1, inplace=True)\ntest.drop(['Cabin', 'age_bining'], axis = 1, inplace=True)","53258f2b":"print('train Age mean:',train[\"Age\"].mean())\nprint('train Embarked mode:',train[\"Embarked\"].mode())\nprint('Test Age mean:',test['Age'].mean())\nprint('Test Fare mean:',test['Fare'].mean())","bb53dc49":"train['Age']= train['Age'].fillna(value= 29.69)\ntest['Age']= test['Age'].fillna(value= 29.69)","478268e3":"train[\"Embarked\"]= train[\"Embarked\"].fillna(value = 'S')\ntest['Fare']= test['Fare'].fillna(value= 35.62)","1b7b589c":"train.isnull().sum().sum()","cd5a4e80":"test.isnull().sum().sum()","c0e4455e":"bins = np.linspace(min(train['Age']), max(train['Age']), 5)\ngroup_names = ['child', 'young', 'adult', 'old']\ntrain['age_bins'] = pd.cut(train['Age'], bins, labels = group_names, include_lowest=True)","2aa16c06":"train.head(2)","76c6db27":"bins = np.linspace(min(test['Age']), max(test['Age']), 5)\ngroup_names = ['child', 'young', 'adult', 'old']\ntest['age_bins'] = pd.cut(test['Age'], bins, labels = group_names, include_lowest=True)","8e284227":"test.head(2)","0addb326":"train['sibilings']= train['SibSp'].apply(lambda x: x>0 , True, False)\ntrain.head()","c2521240":"test['sibilings']= test['SibSp'].apply(lambda x: x>0 , True, False)\ntest.head()","c0cbc7b9":"train['parents']= train['Parch'].apply(lambda x: x>0 , True, False)\ntrain.head()","aa957a2a":"test['parents']= test['Parch'].apply(lambda x: x>0 , True, False)\ntest.head()","1f9dc306":"train['parents']= train['parents'].astype('int')\ntrain['sibilings']= train['sibilings'].astype('int')\ntrain.head()","a5216271":"test['parents']= test['parents'].astype('int')\ntest['sibilings']= test['sibilings'].astype('int')\ntest.head()","061ce0e2":"train['age_bins']= train['age_bins'].map({'child': 0, 'young': 1, 'adult': 2, 'old': 3})\ntrain.head()","faeabb5b":"test['age_bins']= test['age_bins'].map({'child': 0, 'young': 1, 'adult': 2, 'old': 3})\ntest.head()","5f3b79d5":"train['Sex']= train['Sex'].map({'female': 0, 'male': 1})\ntrain.head()","16c38b9e":"test['Sex']= test['Sex'].map({'female': 0, 'male': 1})\ntest.head()","221a28e3":"train['Embarked'].unique()","10628965":"train['Embarked']= train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})\ntrain.head()","66e3f890":"test['Embarked']= test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})\ntest.head()","ecc7b997":"X = train.drop(['PassengerId', 'Name', 'Survived', 'Ticket'], axis =1)\ny = train['Survived']\nX.shape, y.shape","3c6dbd74":"from sklearn.preprocessing import StandardScaler","5c964d0f":"sc = StandardScaler()\nX_sc = sc.fit_transform(X)","f1359d3c":"from sklearn.feature_selection import SelectKBest, chi2","e2f5790a":"skb = SelectKBest(score_func=chi2, k = 7)\nbest_feature = skb.fit(X, y)","4c4f771a":"best_feature_score = pd.DataFrame(best_feature.scores_, columns= ['feature_score'])\nbest_feature_columns_name = pd.DataFrame(X.columns, columns = ['Columns_name'])","ea422941":"best_feature_df = pd.concat([best_feature_score, best_feature_columns_name], axis = 1)","5b5b1206":"best_feature_df.nlargest(7, 'feature_score')","593a339f":"from sklearn.ensemble import ExtraTreesClassifier","4b08ef1a":"et = ExtraTreesClassifier()\net.fit(X,y)","77316cd5":"feature_importance = pd.Series(et.feature_importances_, index= X.columns)","b78c8897":"feature_importance.nlargest(7).plot(kind = 'barh')","a6c9078b":"X.columns","083a0224":"selected = ['Pclass', 'Sex', 'Age',  'Parch', 'Fare', 'Embarked',\n        'parents']\nX_selected = X[selected]\nX_selected.head()","d05a1dfe":"# split train\/test 80-20\nfrom sklearn.model_selection import train_test_split","14175e17":"X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size = .20, random_state = 1)","f4ecf8aa":"#model LR\nfrom sklearn.linear_model import LogisticRegression","5e6c6535":"lr = LogisticRegression()\nlr.fit(X_train, y_train)","8731a0f5":"print(lr.score(X_train, y_train))\nprint(lr.score(X_test, y_test))","e910ec3b":"lr_pred = lr.predict(X_test)","9ed50c1b":"from sklearn import metrics","3d9f24c3":"target_names = ['Dies(0)', 'Survived(1)']","fa7d47c5":"print(metrics.classification_report(y_test, lr_pred, target_names= target_names))","0a868bcb":"metrics.plot_confusion_matrix(lr, X_test, y_test)","eb30f585":"??metrics.plot_confusion_matrix","c6741805":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier","26e3d100":"?? DecisionTreeClassifier","fce5e8f2":"dt = DecisionTreeClassifier(criterion='entropy', class_weight={1: 1.6})\ndt.fit(X_train, y_train)","fc325f47":"print(dt.score(X_train, y_train))\nprint(dt.score(X_test, y_test))","4c2e0224":"dt_pred = dt.predict(X_test)","039aeaf9":"print(metrics.classification_report(y_test, dt_pred,target_names= target_names))","f0b95823":"metrics.plot_confusion_matrix(dt, X_test, y_test)","2963f22e":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier","7e7e622f":"rf = RandomForestClassifier(criterion='entropy', class_weight={1:1.6})\nrf.fit(X_train, y_train)","e0337dcb":"print(rf.score(X_train, y_train))\nprint(rf.score(X_test, y_test))","4616c057":"rf_pred = rf.predict(X_test)","cd9767cb":"print(metrics.classification_report(y_test, rf_pred, target_names= target_names))","3ce91bec":"metrics.plot_confusion_matrix(rf, X_test, y_test)","2d8894fd":"lr_e = LogisticRegression()\nlr_e.fit(X_selected, y)","d72b0b9c":"lr_e.score(X_selected, y)","b80aca1b":"# Dt\ndt_e = DecisionTreeClassifier(criterion='entropy', class_weight={1:1.6})\ndt_e.fit(X_selected, y)","7d76116b":"dt_e.score(X_selected, y)","651ee1f7":"#RF\nrf_e = RandomForestClassifier(criterion='entropy', class_weight={1:1.6})\nrf_e.fit(X_selected, y)","810bcf18":"rf_e.score(X_selected, y)","932387da":"from sklearn.model_selection import cross_val_score, KFold","6db8d6c0":"kf = KFold(n_splits=10)\ncross_va =  cross_val_score(rf_e, X_selected, y, cv= kf, scoring='accuracy')","3c40ad2c":"cross_va.mean()","25a3b537":"!pip install eli5","5bb04826":"selected","e4541268":"feature_names = ['Pclass', 'Sex', 'Age', 'Parch', 'Fare', 'Embarked', 'parents']","489d15d9":"import eli5","162fbef4":"eli5.show_weights(dt_e, feature_names = feature_names, target_names=\"Survived\")","02fcd40d":"eli5.show_weights(rf_e, feature_names = feature_names, target_names=\"Survived\")","51027ec5":"to_pred = test[selected]\nto_pred.head()","4b4ebc81":"y_pred = rf.predict(to_pred)","83f29657":"test.shape, submit.shape","bbaa3b8f":"submission = pd.DataFrame()\nsubmission['PassengerId'] = submit['PassengerId']\nsubmission['Survived'] = y_pred\nsubmission","c0daa1ee":"submission.to_csv('submission.csv', index=False)","2aeae688":"## Interpret Model & Evaluate\n+ eli5","b5ed3242":"### to train df","10b23175":"## Install pandas summary","e631177a":"### Narrative \n+ All method give us the same result","7b000f8b":"**Data Dictionary**  \nVariable|\tDefinition|\tKey |   \nsurvival|\tSurvival\t0 = No, 1 = Yes  \npclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd  \nsex\tSex\t \nAge\tAge in years\t \nsibsp\t# of siblings \/ spouses aboard the Titanic\t \nparch\t# of parents \/ children aboard the Titanic\t \nticket\tTicket number\t  \nfare\tPassenger fare\t  \ncabin\tCabin number\t  \nembarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton  ","0e09e8f8":"### Built model with entire X_selected","186e0d52":"### Data correlations","7bb725bf":"## EDA","dbceb7ce":"### To Test df","86899cf6":"### Question About sibilings","fd0bb8e0":"#### Distributions for test","17b75f4b":"### Built Model with cross validation","cad7ccdb":"## view General Info\n+ structure\n+ composition\n+ types\n+ Missing Values\n+ basic Statistics","caa852a1":"### Narrative \n+ People with not sibiling not survived","9eab6488":"## Read Datasets","359d06e3":"### Narrative \n+ 3 columns have missing values\n + Cabin, Fare, and age","9cc44007":"### Narrative\n+ 3 columsn have missing values\n    + Age, Cabin, Embarked\n","c2876e7b":"## Predict X_test dataset","f7a99c27":"### Save Submission dataset","89562bc9":"## Create more variables\n+ Age_bins\n+ Sibilings (no, yes)\n+ Parch (no, yes)","b001d39c":"### Create bins for Age variable on train data\n","67cc4b92":"## features selections, scale and importance\n+ scaler\n+ Select Kbest\n+ Extratree","2aa67d47":"## Handling with missing data","563a8b55":"## END","7113a702":"### Question \n+ About Age variable","86e4be14":"### Using sweetviz","9ad2ae6f":"### Narrative  \n+ passanger without children aboard not Survived","84723cab":"### Narrative \n+ the youngest people have  the most die\n+ mayority of The passager are young people","34ba3c02":"### train.hist(figsize=(14,8))\nplt.title('Histograms')\nplt.show()","5e36a0d5":"### Question:\n+ about target","469eb5f1":"### Narrative  \n+ The data points have outlier\n\n#### Solution\n+ Ignore\n+ Change","399752c7":"### Fill \n+ Age, Fare with mean\n+ Embarked with mode","28eb9bc2":"### Check outliers","1ca3c0d9":"### Data Distributions","e0b1e98c":"## Model Building\n+ Split train\/test \n+ Random Forest\n+ Decision Tree\n+ Lr\n","785a59b9":"## imports Libraries"}}