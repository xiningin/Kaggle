{"cell_type":{"ff45a527":"code","90bd1299":"code","521fecaa":"code","5238d4d9":"code","af132c42":"code","13fc8ddc":"code","5f2cb941":"code","0ad4fb9b":"code","af72862f":"code","cb226e9d":"code","86bc9227":"code","947dbf6f":"code","1e40e179":"code","351d6bb1":"code","4e8cf7d4":"markdown","f1428f60":"markdown","fd22d866":"markdown","a361359e":"markdown","3ad7f50c":"markdown","7cc120b9":"markdown","31c95aff":"markdown","27e99c29":"markdown","e091a003":"markdown","546a796e":"markdown","cf9f483f":"markdown","5015ab23":"markdown","fd85376f":"markdown","733ac688":"markdown","4fbe33f8":"markdown"},"source":{"ff45a527":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport folium\n\nfrom itertools import chain\nfrom folium.plugins import MarkerCluster, TimestampedGeoJson\nfrom geopy.geocoders import Nominatim","90bd1299":"plt.style.use('seaborn')","521fecaa":"df_brazil_raw = pd.read_csv(\"\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv\")\ndf_brazil_raw.columns = [c.capitalize() for c in df_brazil_raw.columns]\ndf_brazil_raw.Date = pd.to_datetime(df_brazil_raw.Date)\ndf_brazil_raw.head()","5238d4d9":"def filling_date_gaps(df):\n  # The snippet bellow is taken from stack overflow\n  # https:\/\/stackoverflow.com\/a\/41274715\/2313889\n  new_index = pd.MultiIndex.from_product(df.index.levels, names=df.index.names)\n  new_df= df.reindex(new_index)\n  # Optional: convert missing values to zero, and convert the data back\n  # to integers. See explanation below.\n  new_df = new_df.fillna(0).astype(int).reset_index()\n\n  return new_df\n\n# By assumming Hour is sorted, we hold on to the last record of the day\ndf_brazil = df_brazil_raw.groupby(['State', 'Date']).last()\n# At this point, we are not using it the Hour information\ndf_brazil = df_brazil.drop(columns=['Hour'])\ndf_brazil = filling_date_gaps(df_brazil)","af132c42":"df_brazil.head()","13fc8ddc":"df_states_last = df_brazil.groupby(\"State\").last().drop(columns=['Date'])\ndf_states_last.style.background_gradient(cmap='Reds')","5f2cb941":"geolocator = Nominatim(user_agent=\"Corona\")\ndef getLatLong(row):\n  location = geolocator.geocode(f\"{row.name}, Brazil\")\n  return (location.latitude, location.longitude)","0ad4fb9b":"# df_states_last['Location'] = df_states_last.apply(getLatLong, axis='columns')\ndf_states_last['Location'] = \\\n[(-9.0478679, -70.5264976),\n (-9.6611661, -36.6502426),\n (-4.479925, -63.5185396),\n (-12.285251, -41.9294776),\n (-5.3264703, -39.7156073),\n (-15.7754462, -47.7970891),\n (-19.5687682, -40.1721991),\n (-15.9323662, -50.1392928),\n (-5.2085503, -45.3930262),\n (-12.2115009, -55.5716547),\n (-19.5852564, -54.4794731),\n (-18.5264844, -44.1588654),\n (-24.4842187, -51.8148872),\n (-7.1219366, -36.7246845),\n (-4.7493933, -52.8973006),\n (-8.4116316, -37.5919699),\n (-7.6992782, -42.5043787),\n (-5.6781175, -36.4781776),\n (-29.8425284, -53.7680577),\n (-22.9110137, -43.2093727),\n (-10.943145, -62.8277863),\n (-27.0628367, -51.114965),\n (-10.6743911, -37.3773519),\n (-23.5506507, -46.6333824),\n (-10.8855129, -48.3716912)]","af72862f":"def metrics_per_state_bars():\n  ax = df_states_last[['Suspects', 'Refuses', 'Cases']]\\\n        .sort_values('Suspects')\\\n        .plot(kind='bar', figsize=(12, 8), title=\"Metrics per State\");\n  ax.tick_params(axis='x', labelrotation=60);\n  ax.set_xlabel(\"\");\n\nmetrics_per_state_bars()","cb226e9d":"def metrics_per_state_over_time_plot():\n  cols = 'Suspects', 'Refuses', 'Cases'\n  df = df_brazil.set_index(['State', 'Date'])\n  pieces, types = zip(*[(df[c], [c]*len(df[c])) for c in cols])\n  df = pd.concat(pieces).to_frame('Total').reset_index()\n  df['Types'] = list(chain(*types))\n\n  g = sns.FacetGrid(df, col='State', hue='Types', \n                    height=5, sharey=False, col_wrap=2);\n  g.map(plt.plot, 'Date', 'Total');\n  g.set_xticklabels(rotation=60);\n  g.add_legend();\n\nmetrics_per_state_over_time_plot()","86bc9227":"def metrics_per_state_map():\n  map_corona = folium.Map(location=df_states_last['Location']['Maranh\u00e3o'],\n                          min_zoom=2, max_zoom=15, zoom_start=4)\n  \n  def marker(row, container, color='blue'):\n    folium.Marker(\n      location=row.Location,\n      icon=folium.Icon(color),\n      tooltip=f'\\\n      <li>State: {row.name}\\\n      <li>Cases: {row.Cases}\\\n      <li>Suspects: {row.Suspects}\\\n      <li>Refuses: {row.Refuses}\\\n      '\n    ).add_to(container)\n\n  # map_cluster = MarkerCluster(options={\n  #   'spiderfyOnMaxZoom': True,\n  #   'showCoverageOnHover': True,\n  #   'zoomToBoundsOnClick': True\n  # })\n  # map_cluster.add_to(map_corona)\n\n\n  g_refu = folium.FeatureGroup(name='Refuses')\n  g_susp = folium.FeatureGroup(name='Suspects')\n  g_cases = folium.FeatureGroup(name='Cases')\n  g_refu.add_to(map_corona)\n  g_susp.add_to(map_corona)\n  g_cases.add_to(map_corona)\n\n  df = df_states_last\n  df[df['Refuses'] > 0].apply(lambda x: marker(x, g_refu, 'blue'), axis='columns')\n  df[df['Suspects'] > 0].apply(lambda x: marker(x, g_susp, 'gray'), axis='columns')\n  df[df['Cases'] > 0].apply(lambda x: marker(x, g_cases, 'red'), axis='columns')\n\n  # I believe there is a bug with autoZIndex\n  folium.LayerControl(collapsed=False, autoZIndex=True).add_to(map_corona)\n  return map_corona\n\nmetrics_per_state_map()  ","947dbf6f":"df_brazil_loc = df_brazil.merge(df_states_last['Location'], how=\"left\", on=\"State\")","1e40e179":"df_brazil_loc.head()","351d6bb1":"def metrics_per_state_over_time_map():\n  MAX = df_brazil_loc.Suspects.max()\n  MAX_RADIUS = 28\n  MIN_RADIUS = 4\n  DATA = {\n      'Refuses': 'Blue',\n      'Suspects': 'Gray',\n      'Cases': 'Red',\n      }\n\n  def buildGeoJson(points):\n    return {\n      \"type\": \"FeatureCollection\", \n      \"features\": points\n    }\n\n  def getPoints(row, data, color=\"blue\"):\n    return \\\n    {\n      \"type\": \"Feature\",\n      \n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [row.Location[1], row.Location[0]]\n      },\n\n      \"properties\": {\n        \"time\": row.Date.strftime(\"%Y-%m-%d\"),\n        \"popup\": f\"<li>{row.State}<\/li>\",\n        \"toolTip\": f\"<li>{row.State}<\/li>\",\n        \"icon\": \"circle\",\n        \"iconstyle\": {\n          \"fillColor\": color,\n          # \"fillColor\": \"rgb(255, 50, 0,li 0)\",\n          \"fillOpacity\": 0.33,\n          \"stroke\": \"false\",\n          \"radius\": MIN_RADIUS + (MAX_RADIUS-MIN_RADIUS) * row[data]\/MAX\n          },\n          \"style\": {\"weight\": 0},\n      },\n    }\n\n  def getData(data, color):\n    return df_brazil_loc[df_brazil_loc[data] > 0]\\\n      .apply(lambda x: getPoints(x, data, color), axis='columns').to_list()\n\n  points = list(chain(*[getData(k, v) for (k, v) in DATA.items()]))\n  map_corona = folium.Map(location=df_states_last['Location']['Maranh\u00e3o'],\n                          min_zoom=2, max_zoom=15, zoom_start=3)\n  TimestampedGeoJson(\n      buildGeoJson(points),\n      add_last_point=False,\n      auto_play=False,\n      loop_button=True,\n      date_options='YYYY\/MM\/DD',\n      time_slider_drag_update=True,\n      duration='P0D'\n  ).add_to(map_corona)\n\n  return map_corona\n\nmetrics_per_state_over_time_map()","4e8cf7d4":"### Total Occurences","f1428f60":"### Total Occurences","fd22d866":"## Loading Dataset","a361359e":"### Occurences over Time","3ad7f50c":"## Importing Modules","7cc120b9":"## Last Information per State","31c95aff":"### Occurences over Time","27e99c29":"## Retrieving Geolocation ","e091a003":"Bellow, we see that each entry of the dataset present the overall stats up to that timestamp. Therefore, when dealing with the data, there is no need to accumulate these records.","546a796e":"# Visualizing Information","cf9f483f":"# Processing Information","5015ab23":"## Filling Dates","fd85376f":"# Environment Setup","733ac688":"## Plots","4fbe33f8":"## Maps"}}