{"cell_type":{"f0caf0a0":"code","c6436675":"code","46f98cea":"code","9d2fe47d":"code","0a562d66":"code","a4862a8c":"code","78c45a9a":"code","53a1c836":"code","7c93472e":"code","3a128fcc":"code","cb35bf36":"code","b9464c14":"code","9531e618":"code","030c0506":"code","28f69c06":"code","760721b9":"code","72de1482":"code","fd0e6c82":"code","d46781d7":"code","fa7f0701":"markdown","d7f83201":"markdown","18c2e9ae":"markdown","9b895ac5":"markdown","8980fde2":"markdown","ba885978":"markdown","251b5551":"markdown","f5d9fdc9":"markdown","83301b74":"markdown"},"source":{"f0caf0a0":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport random\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport os\nfrom sklearn.utils import resample\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly import tools\nfrom plotly.offline import iplot, init_notebook_mode\n\ninit_notebook_mode()","c6436675":"PATH_to_images = '..\/input\/siim-isic-melanoma-classification\/jpeg\/'\nPATH_to_dataframes = '..\/input\/siim-isic-melanoma-classification\/'","46f98cea":"# Import data\ntrain = pd.read_csv(PATH_to_dataframes + \"train.csv\")","9d2fe47d":"train.head()","0a562d66":"print(f'{train.shape[0]} observations, {train.shape[1]} columns')","a4862a8c":"# Missing values per column\ntrain.isna().sum()","78c45a9a":"# Drop missing values\ntrain = train.dropna()","53a1c836":"# Display proportion of benign and malignant melanomas\ntrain.benign_malignant.value_counts(normalize = True)","7c93472e":"fig = px.histogram(train, x=\"benign_malignant\",\n                   hover_data=train.columns)\nfig.update_layout(title_text='Count of benign\/malignant')\nfig.show()","3a128fcc":"fig = px.histogram(train, x=\"anatom_site_general_challenge\",\n                   hover_data=train.columns)\nfig.update_layout(title_text='Anatom sites')\nfig.show()","cb35bf36":"# Categorizing age\ntrain['age_cat'] = '0 \/ 20 years'\ntrain.loc[(train['age_approx'] > 20) & (train['age_approx'] <= 40), 'age_cat'] = '20 \/ 40 years'\ntrain.loc[(train['age_approx'] > 40) & (train['age_approx'] <= 60), 'age_cat'] = '40 \/ 60 years'\ntrain.loc[(train['age_approx'] > 60) & (train['age_approx'] <= 80), 'age_cat'] = '60 \/ 80 years'\ntrain.loc[(train['age_approx'] > 80), 'age_approx'] = '80+ years'","b9464c14":"# Separate minority and majority class\ntrain_no_target = train[train['target']==0]\ntrain_target = train[train['target']==1]","9531e618":"def display_image(df):\n    \n    random_sampling = [random.randint(0, len(df)) for i in range(9)]\n    image_indexes = [list(df.index)[random_sampling[i]] for i in range(len(random_sampling))]\n    \n    i = 0\n    \n    # plot first few images\n    plt.figure(figsize=(12,12))\n    for index in image_indexes:\n        \n        # Get corresponding label\n        image_name = df.loc[index, 'image_name']\n        site = df.loc[index, \"anatom_site_general_challenge\"]\n        target = df.loc[index, \"target\"]        \n        \n        # define subplot\n        plt.subplot(330 + 1 + i)\n        plt.title('Target: %s \\n'%target+\\\n                  'Site: %s\\n'%site,\n                  fontsize=18)\n        \n        # plot raw pixel data\n        numpy_image = cv2.imread(PATH_to_images + \"train\/\" + image_name + \".jpg\")\n        plt.imshow(cv2.cvtColor(numpy_image, cv2.COLOR_BGR2RGB))\n        i+=1\n        \n    plt.subplots_adjust(bottom = 0.001)  # the bottom of the subplots of the figure\n    plt.subplots_adjust(top = 0.99)\n    # show the figure\n    plt.show()","030c0506":"display_image(train_no_target)","28f69c06":"display_image(train_target)","760721b9":"train_parallel = train[['image_name', 'patient_id', 'sex', 'age_cat', 'anatom_site_general_challenge', 'diagnosis', 'target']]\n\nfig = px.parallel_categories(train_parallel, color=\"target\", color_continuous_scale=px.colors.sequential.algae)\nfig.update_layout(title='Parallel category diagram on trainset')\nfig.show()","72de1482":"train.target.value_counts()","fd0e6c82":"# Downsampling majority class\ndf_majority_downsampled = resample(train_no_target, \n                                   replace=False, # sample without replacement\n                                   n_samples=584, # to match minority class\n                                   random_state=42)\n \n# Combine minority class with downsampled majority class\ntrain_downsampled = pd.concat([df_majority_downsampled, train_target])","d46781d7":"train_parallel_downsampled = train_downsampled[['image_name', 'patient_id', 'sex', 'age_cat', 'anatom_site_general_challenge', 'diagnosis', 'target']]\n\nfig = px.parallel_categories(train_parallel_downsampled, color=\"target\", color_continuous_scale=px.colors.sequential.algae)\nfig.update_layout(title='Parallel category diagram on downsampled trainset')\nfig.show()","fa7f0701":"The problem here is that it is barely readable as our data are imbalanced. I will perform downsampling on the data and check the changes.","d7f83201":"# 2. Clean data","18c2e9ae":"# 3. EDA","9b895ac5":"Facing a imbalanced classification problem.","8980fde2":"This visualization is also quite useful to check undesirable categories in categorical columns that don't count as missing value. Here I can see that I didn't clean the sex column.","ba885978":"<hr>\n<br>\n<div align='justify'><font color=\"#353B47\" size=\"4\">Thank you for taking the time to read this notebook. I hope that I was able to answer your questions or your curiosity and that it was quite understandable. <u>any constructive comments are welcome<\/u>. They help me progress and motivate me to share better quality content. I am above all a passionate person who tries to advance my knowledge but also that of others. If you liked it, feel free to <u>upvote and share my work.<\/u> <\/font><\/div>\n<br>\n<div align='center'><font color=\"#353B47\" size=\"3\">Thank you and may passion guide you.<\/font><\/div>","251b5551":"<div align='center'><font size=\"5\" color='#353B47'>SIIM ISIC<\/font><\/div>\n<div align='center'><font size=\"4\" color=\"#353B47\">Exploratory Data Analysis<\/font><\/div>\n<br>\n<hr>","f5d9fdc9":"# 1. Load libraries and data","83301b74":"I would like to represent the target through all columns in the dataframe. To do so, I will use a parallel category diagram."}}