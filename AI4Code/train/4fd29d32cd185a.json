{"cell_type":{"0a2a654e":"code","597879ee":"code","400d020f":"code","a879606d":"code","2e108564":"code","6683c629":"code","4f4ad59b":"code","3ee46686":"code","08b9983c":"code","c66cb7b4":"code","d19cbace":"code","5393cbfa":"code","3ebeebba":"code","2b268f86":"code","84598a95":"code","15347e66":"code","d1488627":"code","5ccb4519":"code","4df4bbca":"code","60c5e2dc":"code","5c0bbc25":"code","5ce37283":"code","5fd30cf0":"code","17d2b3c8":"markdown","8442bb73":"markdown","8abe6a4b":"markdown","429350c2":"markdown","954a2179":"markdown","f9254d22":"markdown","42abf323":"markdown","8081ad9a":"markdown","b3e432c3":"markdown","6e866f18":"markdown","04edee0b":"markdown"},"source":{"0a2a654e":"# Reading the datasets\n\nimport pandas as pd\n\napps = pd.read_csv('https:\/\/github.com\/Gbofrc\/Google-Play-Store-apps-and-reviews\/raw\/main\/apps.csv')\nusers = pd.read_csv('https:\/\/github.com\/Gbofrc\/Google-Play-Store-apps-and-reviews\/raw\/main\/user_reviews.csv')","597879ee":"# view of the first three rows of apps.csv\napps.sample(3)","400d020f":"# view of the first three rows of users.csv\nusers.sample(3)","a879606d":"# The shape of the apps. There are 9559 rows, wich row an observation, with 14 columns, each column a distinct variable\napps.shape","2e108564":"# The shape of the users. There are 9559 rows, wich row an observation, with 5 columns, each column a distinct variable\nusers.shape","6683c629":"# There are no duplicates entries in the apps.csv\nprint(apps.duplicated().value_counts())","4f4ad59b":"# Only Rating and Size columns are floating type, all the others are strings\napps.info()","3ee46686":"# All columns are the string type\nusers.info()","08b9983c":"# Detecting chars to remove\napps['Installs'].unique()","c66cb7b4":"# Detecting chars to remove\napps['Price'].unique()","d19cbace":"# We want the Price and Installs columns to be the float type\nchars_to_remove = ['+', ',', '$']\ncolumns_to_clean = ['Installs', 'Price']\n\nfor column in columns_to_clean:\n    for char in chars_to_remove:\n        apps[column] = apps[column].apply(lambda x: x.replace(char, \"\"))\n        \napps.sample(5)","5393cbfa":"# After characters removed, we want to change the type of Installs and Price columns\n\n# Convert Installs to float data type\napps['Installs'] = apps['Installs'].astype('float')\n\n# Convert Price to float data type\napps['Price'] = apps['Price'].astype('float')\n\n# Checking dtype\nprint(apps.info())","3ebeebba":"# checking categories into dataset\nprint(apps['Category'].unique())","2b268f86":"print('This dataset has ' + str(len(apps['Category'].unique())) + ' unique categories')","84598a95":"# how many apps in each category\napps['Category'].value_counts()","15347e66":"# Viewing categories in a bar graph\n\n# pip install dash - if plotly is not installed\n\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\ndata = [go.Bar(\n        x = apps['Category'].value_counts().index, # index = category name\n        y = apps['Category'].value_counts().values, # value = count\n)]\n\nplotly.offline.iplot(data)","d1488627":"# Exploring Ratings\n\napps['Rating'].describe()","5ccb4519":"# Distribution of apps according to their ratings\ndata = [go.Histogram(\n        x = apps['Rating']\n)]\n\n# Vertical dashed line to indicate the average app rating\nlayout = {'shapes': [{\n              'type' :'line',\n              'x0': apps['Rating'].mean(),\n              'y0': 0,\n              'x1': apps['Rating'].mean(),\n              'y1': 1000,\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\nplotly.offline.iplot({'data': data, 'layout': layout})","4df4bbca":"%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Select rows where both 'Rating' and 'Size' values are present (ie. the two values are not null)\napps_not_null = apps[(~apps['Rating'].isnull()) & (~apps['Size'].isnull())]\n\n# Subset for categories with at least 250 apps\nlarge_categories = apps_not_null.groupby(['Category']).filter(lambda x: len(x) >= 250)\n\n# Plot size vs. rating\nplot1 = sns.jointplot(x = large_categories['Size'], y = large_categories['Rating'])\n\n# Select apps whose 'Type' is 'Paid'\npaid_apps = apps_not_null[apps_not_null['Type'] == 'Paid']\n\n# Plot price vs. rating\nplot2 = sns.jointplot(x = paid_apps['Price'], y = paid_apps['Rating'])","60c5e2dc":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8)\n\n# Select a few popular app categories\npopular_app_cats = apps[apps.Category.isin(['GAME', 'FAMILY', 'PHOTOGRAPHY',\n                                            'MEDICAL', 'TOOLS', 'FINANCE',\n                                            'LIFESTYLE','BUSINESS'])]\n\n# Examine the price trend by plotting Price vs Category\nax = sns.stripplot(x = popular_app_cats['Price'], y = popular_app_cats['Category'], jitter=True, linewidth=1)\nax.set_title('App pricing trend across categories')\n\n# Apps whose Price is greater than 200\napps_above_200 = popular_app_cats[popular_app_cats['Price'] > 200]\napps_above_200[['Category', 'App', 'Price']]","5c0bbc25":"# Select apps priced below $100\napps_under_100 = popular_app_cats[popular_app_cats['Price'] < 100]\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8)\n\n# Examine price vs category with the authentic apps (apps_under_100)\nax = sns.stripplot(x = 'Price', y = 'Category', data = apps_under_100, jitter = True, linewidth = 1)\nax.set_title('App pricing trend across categories after filtering for junk apps')","5ce37283":"box0 = go.Box(\n    # Data for paid apps\n    y = apps[apps['Type'] == \"Paid\"]['Installs'],\n    name = 'Paid'\n)\n\nbox1 = go.Box(\n    # Data for free apps\n    y = apps[apps['Type'] == \"Free\"]['Installs'],\n    name = 'Free'\n)\n\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps vs. free apps\",\n    yaxis = dict(title = \"Log number of downloads\",\n                type = 'log',\n                autorange = True)\n)\n\n# Add trace0 and trace1 to a list for plotting\ndata = [box0, box1]\nplotly.offline.iplot({'data': data, 'layout': layout})","5fd30cf0":"# Join the two dataframes\nmerged = pd.merge(apps, users, on = \"App\")\n\n# Drop NA values from Sentiment and Review columns\nmerged = merged.dropna(subset = ['Sentiment', 'Review'])\n\nsns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n# User review sentiment polarity for paid vs. free apps\nax = sns.boxplot(x = 'Type', y = 'Sentiment_Polarity', data = merged)\nax.set_title('Sentiment Polarity Distribution')","17d2b3c8":"<p>By looking at a random sample of the dataset rows (from the above task), we observe that some entries in the columns like Installs and Price have a few special characters due to the way the numbers have been represented. The <code>unique()<\/code> method confirms it<\/p>\n\n<p>This prevents the columns from being purely numeric, making it difficult to use them in subsequent future mathematical calculations. Ideally, as their names suggest, we would want these columns to contain only digits from [0-9].<\/p><p>Hence, we now proceed to clean our data. Specifically, the special characters <code>,<\/code> and <code>+<\/code> present in <code>Installs<\/code> column and <code>$<\/code> present in <code>Price<\/code> column need to be removed.<\/p>\n<p>It is also always a good practice to print a summary of your dataframe after completing data cleaning. We will use the <code>info()<\/code> method to acheive this.<\/p>","8442bb73":"### Relation between app category and app price\u00b6\nSo now comes the hard part. How are companies and developers supposed to make ends meet? What monetization strategies can companies use to maximize profit? The costs of apps are largely based on features, complexity, and platform.\n\nThere are many factors to consider when selecting the right pricing strategy for your mobile app. It is important to consider the willingness of your customer to pay for your app. A wrong price could break the deal before the download even happens. Potential customers could be turned off by what they perceive to be a shocking cost, or they might delete an app they\u2019ve downloaded after receiving too many ads or simply not getting their money's worth.\n\nDifferent categories demand different price ranges. Some apps that are simple and used daily, like the calculator app, should probably be kept free. However, it would make sense to charge for a highly-specialized medical app that diagnoses diabetic patients. Below, we see that Medical and Family apps are the most expensive. Some medical apps extend even up to 80 dollars! All game apps are reasonably priced below 20 dollars.","8abe6a4b":"### Sentiment analysis of user reviews\u00b6\nMining user review data to determine how people feel about your product, brand, or service can be done using a technique called sentiment analysis. User reviews for apps can be analyzed to identify if the mood is positive, negative or neutral about that app. For example, positive words in an app review might include words such as 'amazing', 'friendly', 'good', 'great', and 'love'. Negative words might be words like 'malware', 'hate', 'problem', 'refund', and 'incompetent'.\n\nBy plotting sentiment polarity scores of user reviews for paid and free apps, we observe that free apps receive a lot of harsh comments, as indicated by the outliers on the negative y-axis. Reviews for paid apps appear never to be extremely negative. This may indicate something about app quality, i.e., paid apps being of higher quality than free apps on average. The median polarity score for paid apps is a little higher than free apps, thereby syncing with our previous observation.\n\nIn this notebook, we analyzed over ten thousand apps from the Google Play Store. We can use our findings to inform our decisions should we ever wish to create an app ourselves.","429350c2":"### Cleaning","954a2179":"### Popularity of paid apps vs free apps\nFor apps in the Play Store today, there are five types of pricing strategies: free, freemium, paid, paymium, and subscription. Let's focus on free and paid apps only. Some characteristics of free apps are:\n\nFree to download.\nMain source of income often comes from advertisements.\nOften created by companies that have other products and the app serves as an extension of those products.\nCan serve as a tool for customer retention, communication, and customer service.\nSome characteristics of paid apps are:\n\nUsers are asked to pay once for the app to download and use it.\nThe user can't really get a feel for the app before buying it.\nAre paid apps installed as much as free apps? It turns out that paid apps have a relatively lower number of installs than free apps, though the difference is not as stark as I would have expected!","f9254d22":"### Exploring","42abf323":"<p>With more than 1 billion active users in 190 countries around the world, Google Play continues to be an important distribution platform to build a global audience. For businesses to get their apps in front of users, it's important to make them more quickly and easily discoverable on Google Play. To improve the overall search experience, Google has introduced the concept of grouping apps into categories.<\/p>\n<p>This brings us to the following questions:<\/p>\n<ul>\n<li>Which category has the highest share of (active) apps in the market? <\/li>\n<li>Is any specific category dominating the market?<\/li>\n<li>Which categories have the fewest number of apps?<\/li>\n<\/ul>\n<p>We will see that there are <code>33<\/code> unique app categories present in our dataset. <em>Family<\/em> and <em>Game<\/em> apps have the highest market prevalence. Interestingly, <em>Tools<\/em>, <em>Business<\/em> and <em>Medical<\/em> apps are also at the top.<\/p>","8081ad9a":"### Size and price of an app\n\n<p>Let's now examine app size and app price. For size, if the mobile app is too large, it may be difficult and\/or expensive for users to download. Lengthy download times could turn users off before they even experience your mobile app. Plus, each user's device has a finite amount of disk space. For price, some users expect their apps to be free or inexpensive. These problems compound if the developing world is part of your target market; especially due to internet speeds, earning power and exchange rates.<\/p>\n\nHow can we effectively come up with strategies to size and price our app?\n\nDoes the size of an app affect its rating?\nDo users really care about system-heavy apps or do they prefer light-weighted apps?\nDoes the price of an app affect its rating?\nDo users always prefer free apps over paid apps?\nWe find that the majority of top rated apps (rating over 4) range from 2 MB to 20 MB. We also find that the vast majority of apps price themselves under $10.\n\n","b3e432c3":"### Import, read, first look","6e866f18":"### Filter out \"junk\" apps\n\nIt looks like a bunch of the really expensive apps are \"junk\" apps. That is, apps that don't really have a purpose. Some app developer may create an app called I Am Rich Premium or most expensive app (H) just for a joke or to test their app development skills. Some developers even do this with malicious intent and try to make money by hoping people accidentally click purchase on their app in the store.\n\nLet's filter out these junk apps and re-do our visualization.","04edee0b":"# Google Play Store apps and reviews\n\n<p>Mobile apps are everywhere. They are easy to create and can be lucrative. Because of these two factors, more and more apps are being developed. In this notebook, we will do a comprehensive analysis of the Android app market by comparing over ten thousand apps in Google Play across different categories. We'll look for insights in the data to devise strategies to drive growth and retention.<\/p>\n<p><img src=\"https:\/\/assets.datacamp.com\/production\/project_619\/img\/google_play_store.png\" alt=\"Google Play logo\" width=\"600\"><\/p>\n<p>Let's take a look at the data, which consists of two files:<\/p>\n<ul>\n<li><a href='https:\/\/github.com\/Gbofrc\/Google-Play-Store-apps-and-reviews\/raw\/main\/apps.csv'>apps.csv<\/a> contains all the details of the applications on Google Play. There are 13 features that describe a given app.<\/li>\n<li><a href='https:\/\/github.com\/Gbofrc\/Google-Play-Store-apps-and-reviews\/raw\/main\/user_reviews.csv'>users_reviews.csv<\/a>: contains 100 reviews for each app, most helpful first. The text in each review has been pre-processed and attributed with three new features: Sentiment (Positive, Negative or Neutral), Sentiment Polarity and Sentiment Subjectivity.<\/li>\n<\/ul>\n\n\n\n"}}