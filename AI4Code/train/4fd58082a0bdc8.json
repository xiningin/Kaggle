{"cell_type":{"ab4c9c37":"code","26ecd9c6":"code","b5e7a085":"code","1184b159":"code","9649dcf8":"code","56a9de17":"code","5b3eed17":"code","46d1c01b":"code","3a84db50":"code","c1c1d28c":"code","2437f543":"code","5e7ca8b4":"code","48f6d599":"code","1ed10a78":"code","9f768126":"code","229dde9b":"code","29bc01cd":"code","64b9533e":"code","b9dfccc1":"code","57213154":"code","3eaa0b56":"code","0852da6a":"code","45a1e5c5":"code","ebb73363":"code","504259a1":"code","294e3252":"markdown","93ccb1ef":"markdown","dac27551":"markdown","b5702d4a":"markdown","ff9a3965":"markdown","c579e358":"markdown","7e080289":"markdown","3aa5e1a9":"markdown","36bad3d5":"markdown","57ff92b0":"markdown","303b888f":"markdown","381816b0":"markdown","cd4129d1":"markdown","f2613818":"markdown","055c9474":"markdown","0bc1f294":"markdown","a226b10b":"markdown","52d48bc2":"markdown"},"source":{"ab4c9c37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26ecd9c6":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom surprise import KNNBasic, SVD, Reader, accuracy, Dataset\nfrom surprise.model_selection import cross_validate, train_test_split\n%matplotlib inline","b5e7a085":"ratings = pd.read_csv(\"\/kaggle\/input\/the-movies-dataset\/ratings_small.csv\")\nratings","1184b159":"reader = Reader()\ndata = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)","9649dcf8":"pmf_svd = SVD(biased = False)\ncv_pmf = cross_validate(pmf_svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","56a9de17":"cv_pmf","5b3eed17":"print('Average MAE for PMF Collaborative Filtering: ', cv_pmf['test_mae'].mean())\nprint('Average RMSE for PMF Collaborative Filtering: ', cv_pmf['test_rmse'].mean())","46d1c01b":"sim_options = {'user_based': True}\nuser_based_cf = KNNBasic(sim_options=sim_options)\ncv_ub = cross_validate(user_based_cf, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","3a84db50":"print('Average MAE for User-based Collaborative Filtering: ', cv_ub['test_mae'].mean())\nprint('Average RMSE for User-based Collaborative Filtering: ', cv_ub['test_rmse'].mean())","c1c1d28c":"sim_options = {'user_based': False}\nitem_based_cf = KNNBasic(sim_options=sim_options)\ncv_ib = cross_validate(item_based_cf, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","2437f543":"print('Average MAE for Item-based Collaborative Filtering: ', cv_ib['test_mae'].mean())\nprint('Average RMSE for Item-based Collaborative Filtering: ', cv_ib['test_rmse'].mean())","5e7ca8b4":"sim_options = {'name':'cosine', 'user_based': True}\nub_cosine = KNNBasic(sim_options=sim_options);\ncv_ub_cosine = cross_validate(ub_cosine, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","48f6d599":"sim_options = {'name':'msd', 'user_based': True}\nub_msd = KNNBasic(sim_options=sim_options);\ncv_ub_msd = cross_validate(ub_msd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","1ed10a78":"sim_options = {'name':'pearson', 'user_based': True}\nub_pearson = KNNBasic(sim_options=sim_options);\ncv_ub_pearson = cross_validate(ub_pearson, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","9f768126":"x = [0,1,2]\ny_mae = [cv_ub_cosine['test_mae'].mean(),cv_ub_msd['test_mae'].mean(),cv_ub_pearson['test_mae'].mean()]\ny_rmse = [cv_ub_cosine['test_rmse'].mean(),cv_ub_msd['test_rmse'].mean(),cv_ub_pearson['test_rmse'].mean()]\nplt.plot(x, y_mae)\nplt.plot(x, y_rmse)\nplt.title('User-based Collaborative Filtering(With 5-fold CV)')\nplt.legend(['MAE','RMSE'])\nplt.xticks(x,['Cosine','MSD','Pearson'])\nplt.xlabel('Similarity')\nplt.ylabel('Average Test(MAE & RMSE)')\nplt.show()","229dde9b":"sim_options = {'name':'cosine', 'user_based': False}\nib_cosine = KNNBasic(sim_options=sim_options);\ncv_ib_cosine = cross_validate(ib_cosine, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","29bc01cd":"sim_options = {'name':'msd', 'user_based': False}\nib_msd = KNNBasic(sim_options=sim_options);\ncv_ib_msd = cross_validate(ib_msd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","64b9533e":"sim_options = {'name':'pearson', 'user_based': False}\nib_pearson = KNNBasic(sim_options=sim_options);\ncv_ib_pearson = cross_validate(ib_pearson, data, measures=['RMSE', 'MAE'], cv=5, verbose=True);","b9dfccc1":"\nx = [0,1,2]\ny_mae = [cv_ib_cosine['test_mae'].mean(),cv_ib_msd['test_mae'].mean(),cv_ib_pearson['test_mae'].mean()]\ny_rmse = [cv_ib_cosine['test_rmse'].mean(),cv_ib_msd['test_rmse'].mean(),cv_ib_pearson['test_rmse'].mean()]\nplt.plot(x, y_mae)\nplt.plot(x, y_rmse)\nplt.title('Item-based Collaborative Filtering(With 5-fold CV)')\nplt.legend(['MAE','RMSE'])\nplt.xticks(x,['Cosine','MSD','Pearson'])\nplt.xlabel('Similarity')\nplt.ylabel('Average Test(MAE & RMSE)')\nplt.show()","57213154":"trainset, testset = train_test_split(data, test_size = 0.25, random_state = 42)","3eaa0b56":"ubc_nn_mae = []\nubc_nn_rmse = []\nk1 = list(np.arange(1,100,1))\nfor i in k1:\n  ubc_nn = KNNBasic(k = i, sim_options = {'user_based' : True})\n  ubc_nn.fit(trainset)\n  predictions = ubc_nn.test(testset)\n  ubc_nn_mae.append(accuracy.mae(predictions))\n  ubc_nn_rmse.append(accuracy.rmse(predictions))","0852da6a":"plt.plot(k1,ubc_nn_mae)\nplt.plot(k1,ubc_nn_rmse)\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Testset(MAE & RMSE)')\nplt.legend(['MAE','RMSE'])\nplt.title('User-based Collaborative Filtering')\nplt.show()","45a1e5c5":"#Best K\nk_ubc = ubc_nn_rmse.index(min(ubc_nn_rmse))+1\nprint('Best Value of K : ', k_ubc)\nprint('Minimum RMSE : ', min(ubc_nn_rmse))","ebb73363":"ibc_nn_mae = []\nibc_nn_rmse = []\nfor i in k1:\n  ibc_nn = KNNBasic(k = i, sim_options = {'user_based' : False})\n  ibc_nn.fit(trainset)\n  predictions = ibc_nn.test(testset)\n  ibc_nn_mae.append(accuracy.mae(predictions))\n  ibc_nn_rmse.append(accuracy.rmse(predictions))","504259a1":"plt.plot(k1,ibc_nn_mae)\nplt.plot(k1,ibc_nn_rmse)\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Testset(MAE & RMSE)')\nplt.legend(['MAE','RMSE'])\nplt.title('Item-based Collaborative Filtering')\nplt.show()","294e3252":"#### MSD","93ccb1ef":"#### Item-Based CF","dac27551":"### Probablistic Matrix Factorization","b5702d4a":"#### Pearson","ff9a3965":"#### Markdown","c579e358":"## Item-Based CF\n\n#### Cosine","7e080289":"#### Pearson","3aa5e1a9":"### User-Based CF","36bad3d5":"#### MSD","57ff92b0":"## Impact of Number of neighbours on model\u00b6\n","303b888f":"#### Observation","381816b0":"#### Observation","cd4129d1":"# Performance Evaluation of Various Models\n\n","f2613818":"# Read Dataset","055c9474":"# Comparison of similarity metrics","0bc1f294":"### Item-Based CF","a226b10b":"## User-Based CF","52d48bc2":"#### Cosine"}}