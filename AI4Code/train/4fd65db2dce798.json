{"cell_type":{"17a6b63d":"code","f5582e12":"code","cff930a0":"code","7e29e797":"code","f0432c04":"code","e1158319":"code","1c42f0cc":"code","b704aed7":"code","94570f3c":"code","cdf36a67":"code","c47d16f2":"markdown","41027629":"markdown","7d394cca":"markdown","859aa1dd":"markdown","3dbcf6d6":"markdown","b9d059b8":"markdown","34727509":"markdown","e2371b28":"markdown","77fc9db1":"markdown"},"source":{"17a6b63d":"!apt install libturbojpeg0\n!apt -y install libvips libvips-dev\n!pip install jpeg4py\n!pip install pyvips","f5582e12":"import glob\nimport time\nimport os\nimport jpeg4py as jpeg\nfrom PIL import Image\nimport struct\nimport imghdr\nimport skimage.io\nimport imageio\nimport cv2\nimport shutil\nimport numpy as np\nfrom io import BytesIO","cff930a0":"INPUT_PATH_PNG = \"..\/input\/aptos2019-blindness-detection\/train_images\/\"\nfiles_png_init = sorted(glob.glob(INPUT_PATH_PNG + '*.png'))\nfiles_png_init = files_png_init[:300]\nprint('PNG Files: {}'.format(len(files_png_init)))\n\nos.mkdir('\/dev\/shm\/1\/')\nfiles_png = []\nfor f in files_png_init:\n    new_path = '\/dev\/shm\/1\/' + os.path.basename(f)\n    shutil.copy(f, new_path)\n    files_png.append(new_path)\n\nINPUT_PATH_JPG_SMALL = \"..\/input\/open-images-2019-object-detection\/test\/\"\nfiles_jpg_small_init = sorted(glob.glob(INPUT_PATH_JPG_SMALL + '*.jpg'))\nfiles_jpg_small_init = files_jpg_small_init[:3000]\nprint('JPG small files: {}'.format(len(files_jpg_small_init)))\n\nos.mkdir('\/dev\/shm\/2\/')\nfiles_jpg_small = []\nfor f in files_jpg_small_init:\n    new_path = '\/dev\/shm\/2\/' + os.path.basename(f)\n    shutil.copy(f, new_path)\n    files_jpg_small.append(new_path)\n\nINPUT_PATH_JPG_BIG = \"..\/input\/sp-society-camera-model-identification\/train\/\"\nfiles_jpg_big_init = sorted(glob.glob(INPUT_PATH_JPG_BIG + '*\/*.jpg'))\nfiles_jpg_big_init = files_jpg_big_init[:300]\nprint('JPG big files: {}'.format(len(files_jpg_big_init)))\n\nos.mkdir('\/dev\/shm\/3\/')\nfiles_jpg_big = []\nfor f in files_jpg_big_init:\n    new_path = '\/dev\/shm\/3\/' + os.path.basename(f)\n    shutil.copy(f, new_path)\n    files_jpg_big.append(new_path)","7e29e797":"start_time = time.time()\nd = []\nfor f in files_jpg_small:\n    a = jpeg.JPEG(f).decode()\n    d.append(a)\nprint('Time to read {} JPEGs small for libjpeg-turbo (jpeg4py): {:.2f} sec'.format(len(files_jpg_small), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_jpg_big:\n    a = jpeg.JPEG(f).decode()\n    d.append(a)\nprint('Time to read {} JPEGs big for libjpeg-turbo (jpeg4py): {:.2f} sec'.format(len(files_jpg_big), time.time() - start_time))","f0432c04":"start_time = time.time()\nd = []\nfor f in files_jpg_small:\n    b = cv2.imread(f)\n    # b = np.transpose(b, (1, 0, 2))\n    # b = np.flip(b, axis=0)\n    b = cv2.cvtColor(b, cv2.COLOR_BGR2RGB)\n    d.append(b)\nprint('Time to read {} JPEGs small for cv2 with BGR->RGB conversion: {:.2f} sec'.format(len(files_jpg_small), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_jpg_big:\n    b = cv2.imread(f)\n    # b = np.transpose(b, (1, 0, 2))\n    # b = np.flip(b, axis=0)\n    b = cv2.cvtColor(b, cv2.COLOR_BGR2RGB)\n    d.append(b)\nprint('Time to read {} JPEGs big for cv2 with BGR->RGB conversion: {:.2f} sec'.format(len(files_jpg_big), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_png:\n    b = cv2.imread(f)\n    # b = np.transpose(b, (1, 0, 2))\n    # b = np.flip(b, axis=0)\n    b = cv2.cvtColor(b, cv2.COLOR_BGR2RGB)\n    d.append(b)\nprint('Time to read {} PNGs for cv2 with BGR->RGB conversion: {:.2f} sec'.format(len(files_png), time.time() - start_time))","e1158319":"start_time = time.time()\nd = []\nfor f in files_jpg_small:\n    b = cv2.imread(f)\n    d.append(b)\nprint('Time to read {} JPEGs small for cv2 no conversion: {:.2f} sec'.format(len(files_jpg_small), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_jpg_big:\n    b = cv2.imread(f)\n    d.append(b)\nprint('Time to read {} JPEGs big for cv2 no conversion: {:.2f} sec'.format(len(files_jpg_big), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_png:\n    b = cv2.imread(f)\n    d.append(b)\nprint('Time to read {} PNGs for cv2 no conversion: {:.2f} sec'.format(len(files_png), time.time() - start_time))","1c42f0cc":"start_time = time.time()\nd = []\nfor f in files_jpg_small:\n    c = Image.open(f)\n    c = np.array(c)\n    d.append(c)\nprint('Time to read {} JPEGs small for PIL: {:.2f} sec'.format(len(files_jpg_small), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_jpg_big:\n    c = Image.open(f)\n    c = np.array(c)\n    d.append(c)\nprint('Time to read {} JPEGs big for PIL: {:.2f} sec'.format(len(files_jpg_big), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_png:\n    c = Image.open(f)\n    c = np.array(c)\n    d.append(c)\nprint('Time to read {} PNGs for PIL: {:.2f} sec'.format(len(files_png), time.time() - start_time))","b704aed7":"start_time = time.time()\nd = []\nplugin = 'matplotlib'\nfor f in files_jpg_small:\n    c = skimage.io.imread(f, plugin=plugin)\n    c = np.array(c)\n    d.append(c)\nprint('Time to read {} JPEGs small for skimage.io Plugin: {}: {:.2f} sec'.format(len(files_jpg_small), plugin, time.time() - start_time))\n\nstart_time = time.time()\nd = []\nplugin = 'matplotlib'\nfor f in files_jpg_big:\n    c = skimage.io.imread(f, plugin=plugin)\n    c = np.array(c)\n    d.append(c)\nprint('Time to read {} JPEGs big for skimage.io Plugin: {}: {:.2f} sec'.format(len(files_jpg_big), plugin, time.time() - start_time))\n\nstart_time = time.time()\nd = []\nplugin = 'matplotlib'\nfor f in files_png:\n    c = skimage.io.imread(f, plugin=plugin)\n    c = np.array(c)\n    d.append(c)\nprint('Time to read {} PNGs for skimage.io Plugin: {}: {:.2f} sec'.format(len(files_png), plugin, time.time() - start_time))","94570f3c":"start_time = time.time()\nd = []\nfor f in files_jpg_small:\n    c = imageio.imread(f)\n    d.append(c)\nprint('Time to read {} JPEGs small for Imageio (no rotate): {:.2f} sec'.format(len(files_jpg_small), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_jpg_big:\n    c = imageio.imread(f)\n    d.append(c)\nprint('Time to read {} JPEGs big for Imageio (no rotate): {:.2f} sec'.format(len(files_jpg_big), time.time() - start_time))\n\nstart_time = time.time()\nd = []\nfor f in files_png:\n    c = imageio.imread(f)\n    d.append(c)\nprint('Time to read {} PNGs for Imageio (no rotate): {:.2f} sec'.format(len(files_png), time.time() - start_time))","cdf36a67":"import pyvips\n\nformat_to_dtype = {\n    'uchar': np.uint8,\n    'char': np.int8,\n    'ushort': np.uint16,\n    'short': np.int16,\n    'uint': np.uint32,\n    'int': np.int32,\n    'float': np.float32,\n    'double': np.float64,\n    'complex': np.complex64,\n    'dpcomplex': np.complex128,\n}\n\nstart_time = time.time()\nd = []\nfor f in files_png:\n    c = pyvips.Image.new_from_file(f, access='sequential')\n    c = np.ndarray(buffer=c.write_to_memory(),\n                   dtype=format_to_dtype[c.format],\n                   shape=[c.height, c.width, c.bands])\n    d.append(c)\nprint('Time to read {} PNGs for PyVips: {:.2f} sec'.format(len(files_png), time.time() - start_time))","c47d16f2":"Test cv2 without conversion","41027629":"Test cv2 with conversion from BGR to RGB format","7d394cca":"Test PyVips","859aa1dd":"Get image links and copy images in memory (\/dev\/shm\/)","3dbcf6d6":"Test jpeg4py (libjpeg-turbo) speed","b9d059b8":"Test PIL Image","34727509":"Test Imageio","e2371b28":"Loading all needed modules","77fc9db1":"Test SKImage"}}