{"cell_type":{"1d314516":"code","5ed5d816":"code","90cb1ee7":"code","05f33e65":"code","5ecc01be":"code","e90e19ec":"code","3f043a48":"code","2c778947":"code","d0322f70":"code","471d5b75":"code","95cc018f":"code","5d3ead65":"code","ad570b07":"code","0816e804":"code","0815e457":"code","0b70bfed":"code","968f5ad0":"code","8f2d659f":"code","4f41083a":"code","1587731b":"code","fd2e3ba7":"code","7e11b9e8":"code","0170b64b":"markdown"},"source":{"1d314516":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ed5d816":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n%matplotlib inline","90cb1ee7":"df=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","05f33e65":"df.isnull().sum()","5ecc01be":"\ndf['Outcome']=np.where(df['Outcome']==1,'Diabetic','No Diabetic')","e90e19ec":"sns.pairplot(df,hue='Outcome')","3f043a48":"\nX=df.drop('Outcome',axis=1).values\ny=df['Outcome'].values\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","2c778947":"# Creating some Tensors\nX_train=torch.FloatTensor(X_train)\nX_test=torch.FloatTensor(X_test)\ny_train=torch.LongTensor(y_train)\ny_test=torch.LongTensor(y_test)","d0322f70":"# Creatng the model in pytorch\nclass ANN_Model(nn.Module):\n    def __init__(self,input_features=8,hidden1=20,hidden2=20,output_features=2):\n        super().__init__()\n        self.fc1=nn.Linear(input_features,hidden1)\n        self.fc2=nn.Linear(hidden1,hidden2)\n        self.out=nn.Linear(hidden2,output_features)\n        \n    \n    def forward(self,x):\n        x=F.relu(self.fc1(x))\n        x=F.relu(self.fc2(x))\n        x=self.out(x)\n        return x\n    \n        ","471d5b75":"#Instantiate my ANN\ntorch.manual_seed(4206969)\nmodel=ANN_Model()","95cc018f":"model.parameters","5d3ead65":"# Backward Propogation -- define the loss func and the optimizer \nloss_function=nn.CrossEntropyLoss() #for multi class \noptimizer=torch.optim.Adam(model.parameters(),lr=0.01)\n","ad570b07":"# trigger the forward propogation\nepochs=500\nfinal_losses=[]\nfor i in range(epochs):\n    i+i+1\n    y_pred=model.forward(X_train)\n    loss=loss_function(y_pred,y_train)\n    final_losses.append(loss)\n    if(i%10==1):\n        print('Epochs number :{}and the loss is {}'.format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","0816e804":"#plotting the loss funtion\nplt.plot(range(epochs),final_losses)\nplt.ylabel('loss')\nplt.xlabel('Epochs')\n","0815e457":"#predictions\npredictions=[]\nwith torch.no_grad():\n    for i,data in enumerate(X_test):\n        y_pred=model(data)\n        predictions.append(y_pred.argmax().item())\n        ","0b70bfed":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predictions)","968f5ad0":"plt.figure(figsize=(10,6))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Actual')\nplt.ylabel('Predicted')","8f2d659f":"from sklearn.metrics import accuracy_score\nscore=accuracy_score(y_test,predictions)","4f41083a":"print(score)","1587731b":"# save the model\ntorch.save(model,'diabetes.pt')","fd2e3ba7":"model=torch.load('.\/diabetes.pt')","7e11b9e8":"model.eval()","0170b64b":"# Creating a ANN using Pytorch"}}