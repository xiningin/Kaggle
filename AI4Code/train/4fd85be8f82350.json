{"cell_type":{"abd481e7":"code","75c10b2d":"code","5ae1fe5d":"code","a0ef4a65":"code","bb20a770":"code","9ef7a5a7":"code","246c3124":"code","fe0ebfb5":"code","991cef59":"code","3e404c2f":"code","4c223647":"code","11ceaeb3":"code","8bfacd1e":"code","8dc2403b":"code","dc46d2f7":"code","d9679a3c":"code","305b7d87":"code","00ee151e":"code","17ec3902":"code","a236ee2c":"code","7b49354b":"code","6d161f12":"code","448f9465":"code","f2855bfc":"code","2b9d12de":"code","c556fbc5":"code","326333f1":"code","2f112344":"code","7abe8283":"code","0fab6e4d":"code","bdc6ab08":"code","c23b49a0":"code","76ed8404":"code","8fd5f8d3":"code","2851d677":"code","5d513117":"code","c82198db":"code","3812c49c":"code","3aef4c68":"code","73e71d96":"code","295abac6":"code","7a1abcad":"code","2cc577f6":"code","a8ff8c27":"code","2388c6ef":"code","e325cf2e":"code","ec4e9420":"code","cd224410":"code","b9dd4e94":"code","d5c19674":"code","1d68b1ec":"code","7588cc1d":"code","8e0648d0":"code","547e8e09":"code","7a3aac34":"code","4fe1bc6a":"code","a380d6c3":"code","28277744":"code","2176dc79":"code","f3c32a30":"code","83078924":"code","515ed44f":"code","299bdea1":"code","e09ebd46":"code","9a926248":"code","9c0c72e5":"code","e7570ea8":"code","bac44d24":"code","41ef43f5":"code","9997469b":"code","8aba6584":"code","4b552582":"code","20477438":"code","6ae7122d":"code","ac38a117":"code","9a2b2cab":"code","a65f13af":"code","4bf753bb":"code","737956e7":"code","2022ef9d":"code","40dd0c69":"code","267222b3":"code","611d29d9":"code","2d5f6f0d":"code","61bd10bb":"code","b80a7d9a":"code","2f3f57ac":"code","353af7a9":"code","6e490828":"code","8ec70a3d":"code","2de63907":"code","005b4843":"code","76a991b5":"code","959f7383":"code","b9a7bc18":"code","d395c91a":"code","cc0995a2":"code","e5b11f13":"code","7170c7d1":"code","555787d6":"code","3da6c40a":"code","57af0b86":"code","aa3921f5":"code","9d1aef03":"code","739e5992":"code","ab3f1d1d":"code","5428d1c7":"code","327a7936":"code","a7e4bf6d":"code","37ab06c4":"code","102ae00f":"code","04ab2737":"code","29ae8f40":"code","1bac5649":"code","bc4f817f":"code","b40f42c2":"code","0461fb93":"code","e59f2b17":"code","bafaddaa":"code","44af6137":"code","90344ace":"code","dab221bd":"code","aedb7c84":"code","9f2e488f":"code","55c4bb04":"code","bd8cd43e":"code","25d385ec":"code","b36d6678":"code","25963f8a":"code","5fc88f5f":"code","db58f774":"code","c7c01a0c":"code","bcd5397e":"code","7aef53bf":"code","941dbbf6":"code","fd4ac5b8":"code","0ba10881":"code","0dbc519d":"code","cd33c3ba":"code","88291336":"markdown","6a693043":"markdown","edac208a":"markdown","119ec81a":"markdown","35878546":"markdown","a48ad820":"markdown","5d72ef4f":"markdown","46bef346":"markdown","4ce06106":"markdown","29ea59ac":"markdown","1cc3bfb5":"markdown","76829d94":"markdown","4185e4c8":"markdown"},"source":{"abd481e7":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","75c10b2d":"path = r'\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv'\ndf = pd.read_csv(path)\ndf","5ae1fe5d":"df=df[['model','year','transmission','fuelType','mileage','tax','mpg','engineSize','price']]\ndf","a0ef4a65":"df.info()\n","bb20a770":"df['year'] = df['year'].astype(object)\n","9ef7a5a7":"df.isnull().sum()\n","246c3124":"df.dtypes\n","fe0ebfb5":"df.corr()[\"price\"].sort_values()\n","991cef59":"df.value_counts(df[\"fuelType\"]).plot.bar()","3e404c2f":"plt.figure(figsize=(12,8))\nsns.countplot(df[\"transmission\"])\n","4c223647":"plt.figure(figsize=(12,8))\nsns.countplot(x = df[\"model\"].T )","11ceaeb3":"plt.figure(figsize=(12,8))\nsns.countplot(x = df[\"year\"].T )","8bfacd1e":"plt.figure(figsize=(15,5),facecolor='w') \nsns.barplot(x = df[\"year\"], y = df[\"price\"])","8dc2403b":"plt.figure(figsize=(26,12),facecolor='w') \nsns.barplot(x = df[\"year\"], y = df[\"price\"])","dc46d2f7":"plt.figure(figsize=(26,12),facecolor='w') \nsns.barplot(x = df[\"year\"], y = df[\"price\"] ,hue=df[\"transmission\"])","d9679a3c":"plt.figure(figsize=(26,12),facecolor='w') \nsns.pointplot(x = df[\"year\"], y = df[\"price\"] ,hue=df[\"fuelType\"])","305b7d87":"plt.figure(figsize=(15,10)) \nsns.scatterplot(df[\"mileage\"], df[\"price\"], hue = df[\"engineSize\"])","00ee151e":"plt.figure(figsize=(15,10)) \nsns.scatterplot(df[\"mileage\"], df[\"price\"], hue = df[\"fuelType\"])","17ec3902":"sns.pairplot(df)\n","a236ee2c":"plt.figure(figsize=(12,10))\nax = sns.heatmap(df.corr())","7b49354b":"fig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","6d161f12":"plt.figure(figsize = (12,10))\nsns.scatterplot(x = df[\"year\"], y = df[\"mileage\"])","448f9465":"plt.figure(figsize=(18,12))\nsns.distplot(df[\"price\"])\nplt.show()","f2855bfc":"df[\"age_car\"] = 2021 - df[\"year\"]\n","2b9d12de":"plt.figure(figsize=(13,7))\nsns.countplot(df.age_car)\nplt.show()","c556fbc5":"sns.scatterplot(y='price', x='mpg', data=df, hue='fuelType')\nplt.show()","326333f1":"sns.scatterplot(y='price', x='engineSize', data=df, hue='transmission')\nplt.show()","2f112344":"sns.scatterplot(y='price', x='mileage', data=df)\nplt.show()","7abe8283":"sns.scatterplot(y='mpg', x='tax', data=df)\nplt.show()","0fab6e4d":"sns.heatmap(df.corr(), cmap='Blues_r', annot=True)\nplt.title('Correlation Matrix')","bdc6ab08":"sns.boxplot(x='fuelType', y='price', data=df, hue='transmission');\nplt.xlabel('FuelType');\nplt.legend(loc='upper right')\nplt.title('Price vs Fueltype by Transmission');","c23b49a0":"df.info()","76ed8404":"df[\"age_car\"] = df[\"age_car\"].astype(str).astype(int)","8fd5f8d3":"df.info()","2851d677":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nfrom scipy.stats import iqr","5d513117":"def plots(df,col):\n    fig, ax = plt.subplots(1, 2, figsize=(6,4))\n    ax[0].hist(df[col])\n    ax[0].set_title(col + ' hist')\n    ax[1].boxplot(df[col])\n    ax[1].set_title(col + ' boxplot')\n    plt.show()","c82198db":"plots(df, 'mileage')\n","3812c49c":"upper_limit = df['mileage'].quantile(0.99)\nlower_limit = df['mileage'].quantile(0.01)","3aef4c68":"new_df = df[(df['mileage'] <= upper_limit) & (df['mileage'] >=lower_limit)]\n","73e71d96":"new_df","295abac6":"plots(new_df, 'mileage')\n","7a1abcad":"plots(df, 'mpg')\n","2cc577f6":"upper_limit = df['mpg'].quantile(0.99)\nlower_limit = df['mpg'].quantile(0.01)","a8ff8c27":"new_df = df[(df['mpg'] <= upper_limit) & (df['mpg'] >=lower_limit)]","2388c6ef":"plots(new_df, 'mpg')\n","e325cf2e":"plots(df, 'tax')","ec4e9420":"new_df = df[(df['tax'] <= 180) & (df['tax'] >=70)]","cd224410":"plots(new_df, 'tax')","b9dd4e94":"plots(df, 'engineSize')\n","d5c19674":"new_df =  df[df['engineSize'] < 3]","1d68b1ec":"new_df =  df[df['engineSize'] >1]","7588cc1d":"plots(new_df, 'engineSize')","8e0648d0":"plots(df, 'price')\n","547e8e09":"upper_limit = df['price'].quantile(0.99)\nlower_limit = df['price'].quantile(0.01)","7a3aac34":"new_df = df[(df['price'] <= upper_limit) & (df['price'] >=lower_limit)]","4fe1bc6a":"plots(new_df, 'price')","a380d6c3":"new_df=pd.get_dummies(new_df, drop_first=True)\nnew_df.head()","28277744":"X=new_df.drop('price', axis = 1).values\ny=new_df['price'].values","2176dc79":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42)\n","f3c32a30":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","83078924":"scaler.fit(X_train)\nX_train = scaler.transform(X_train)          \nX_test = scaler.transform(X_test) ","515ed44f":"from sklearn.neighbors import KNeighborsRegressor\nknn_model = KNeighborsRegressor().fit(X_train, y_train)","299bdea1":"knn_model","e09ebd46":"knn_model.n_neighbors","9a926248":"y_pred = knn_model.predict(X_test)","9c0c72e5":"from sklearn.metrics import mean_squared_error, r2_score\nnp.sqrt(mean_squared_error(y_test, y_pred))","e7570ea8":"r2_score(y_test, y_pred)","bac44d24":"RMSE = [] \n\nfor k in range(10):\n    k = k+1\n    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)\n    y_pred = knn_model.predict(X_train) \n    rmse = np.sqrt(mean_squared_error(y_train,y_pred)) \n    RMSE.append(rmse) \n    print(\"k =\" , k , \"i\u00e7in RMSE de\u011feri: \", rmse)","41ef43f5":"from sklearn.model_selection import GridSearchCV","9997469b":"knn_params = {'n_neighbors': np.arange(2,30,1)}","8aba6584":"knn = KNeighborsRegressor()","4b552582":"knn_cv_model = GridSearchCV(knn, knn_params, cv = 10)","20477438":"knn_cv_model.fit(X_train, y_train)","6ae7122d":"knn_cv_model.best_params_[\"n_neighbors\"]","ac38a117":"knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"])","9a2b2cab":"knn_tuned.fit(X_train, y_train)","a65f13af":"np.sqrt(mean_squared_error(y_test, knn_tuned.predict(X_test)))","4bf753bb":"y_pred = knn_tuned.predict(X_test)","737956e7":"r2_score(y_test, y_pred)","2022ef9d":"from sklearn.tree import DecisionTreeRegressor\ncart_model = DecisionTreeRegressor(min_samples_split = 2)","40dd0c69":"cart_model.fit(X_train, y_train)","267222b3":"cart_model.predict(X_test)","611d29d9":"y_pred =cart_model.predict(X_test)","2d5f6f0d":"np.sqrt(mean_squared_error(y_test, y_pred))","61bd10bb":"cart_model = DecisionTreeRegressor()\ncart_model.fit(X_train, y_train)\ny_pred = cart_model.predict(X_test)","b80a7d9a":"np.sqrt(mean_squared_error(y_test, y_pred))","2f3f57ac":"cart_params = {\"min_samples_split\": range(2,100),\n               \"max_leaf_nodes\": range(5,15)}","353af7a9":"cart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10)","6e490828":"cart_cv_model.fit(X_train, y_train)","8ec70a3d":"cart_cv_model.best_params_","2de63907":"cart_tuned = DecisionTreeRegressor(max_leaf_nodes = 14, min_samples_split = 2)","005b4843":"cart_tuned.fit(X_train, y_train)","76a991b5":"y_pred = cart_tuned.predict(X_test)","959f7383":"np.sqrt(mean_squared_error(y_test, y_pred))","b9a7bc18":"from sklearn.ensemble import BaggingRegressor\n\nbag_model = BaggingRegressor(bootstrap_features = True)\nbag_model.fit(X_train, y_train)","d395c91a":"bag_model.n_estimators","cc0995a2":"bag_model.estimators_","e5b11f13":"bag_model.estimators_samples_","7170c7d1":"bag_model.estimators_features_","555787d6":"bag_model.estimators_[1]","3da6c40a":"y_pred = bag_model.predict(X_test)","57af0b86":"np.sqrt(mean_squared_error(y_test, y_pred))","aa3921f5":"bag_model = BaggingRegressor(bootstrap_features = True)\nbag_model.fit(X_train, y_train)","9d1aef03":"bag_params = {\"n_estimators\": range(2,25)}","739e5992":"bag_cv_model = GridSearchCV(bag_model, bag_params, cv = 10)","ab3f1d1d":"bag_cv_model.fit(X_train, y_train)","5428d1c7":"bag_cv_model.best_params_","327a7936":"bag_tuned = BaggingRegressor( n_estimators = 24, random_state = 45)","a7e4bf6d":"bag_tuned.fit(X_train, y_train)","37ab06c4":"y_pred = bag_tuned.predict(X_test)","102ae00f":"np.sqrt(mean_squared_error(y_test, y_pred))","04ab2737":"from sklearn.ensemble import GradientBoostingRegressor\ngbm_model = GradientBoostingRegressor()\ngbm_model.fit(X_train, y_train)\n\n\ny_pred = gbm_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","29ae8f40":"gbm_params = {\n    'learning_rate': [ 0.01, 0.1],\n    'max_depth': [3, 5, 8,50],\n    'n_estimators': [100,200,300,400, 500, 1000],\n    'subsample': [1,0.5,0.75,0.25]\n}","1bac5649":"gbm = GradientBoostingRegressor()\ngbm_cv_model = GridSearchCV(gbm, gbm_params, cv = 5, n_jobs = -1, verbose = 2)\ngbm_cv_model.fit(X_train, y_train)","bc4f817f":"gbm_cv_model.best_params_","b40f42c2":"gbm_tuned = GradientBoostingRegressor(learning_rate = 0.1,  \n                                      max_depth = 8, \n                                      n_estimators = 1000, \n                                      subsample = 0.5)\n\ngbm_tuned = gbm_tuned.fit(X_train,y_train)","0461fb93":"y_pred = gbm_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e59f2b17":"from lightgbm import LGBMRegressor\n","bafaddaa":"lgbm = LGBMRegressor()\nlgbm_model = lgbm.fit(X_train, y_train)","44af6137":"y_pred = lgbm_model.predict(X_test, \n                            num_iteration = lgbm_model.best_iteration_)\n\nnp.sqrt(mean_squared_error(y_test, y_pred))","90344ace":"lgbm_model","dab221bd":"lgbm_grid = {\n    'colsample_bytree': [0.2,0.4, 0.6,0.8,0.9,1],\n    'learning_rate': [0.01, 0.1, 0.5,1],\n    'n_estimators': [20,30, 40,50, 100, 200],\n    'max_depth': [1,2,3,4,5,6,7,8] }\n\nlgbm = LGBMRegressor()\nlgbm_cv_model = GridSearchCV(lgbm, lgbm_grid, cv=10, n_jobs = -1, verbose = 2)","aedb7c84":"lgbm_cv_model.fit(X_train, y_train)","9f2e488f":"lgbm_cv_model.best_params_","55c4bb04":"lgbm_tuned = LGBMRegressor(learning_rate = 0.1, \n                           max_depth = 8, \n                           n_estimators = 200,\n                          colsample_bytree = 0.9)\n\nlgbm_tuned = lgbm_tuned.fit(X_train,y_train)","bd8cd43e":"y_pred = lgbm_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","25d385ec":"from sklearn.linear_model import ElasticNet\n\nelas= ElasticNet(random_state=42)\nelas_model = elas.fit(X_train, y_train)","b36d6678":"y_pred = elas_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","25963f8a":"elasGrid = {\"max_iter\": [1, 5, 10],\n                      \"alpha\": [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],\n                      \"l1_ratio\": np.arange(0.0, 1.0, 0.1)}","5fc88f5f":"elas= ElasticNet(random_state=42)\nelas_cv_model = GridSearchCV(elas, elasGrid, cv=5, n_jobs = -1, verbose = 2)","db58f774":"elas_cv_model.fit(X_train, y_train)","c7c01a0c":"elas_cv_model.best_params_","bcd5397e":"elas_tuned = ElasticNet(alpha = 0.1, \n                               l1_ratio = 0.8, \n                               max_iter = 10)\n\nelas_tuned = elas_tuned.fit(X_train,y_train)","7aef53bf":"y_pred = elas_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","941dbbf6":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","fd4ac5b8":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=20)","0ba10881":"model = Sequential()\n\nmodel.add(Dense(48,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam',loss='mse')","0dbc519d":"history=model.fit(X_train, \n          y_train, \n          epochs=500,\n          validation_data=(X_test, y_test),\n          callbacks=[early_stop]\n          )","cd33c3ba":"losses = pd.DataFrame(model.history.history)\nlosses.plot()","88291336":"# knn","6a693043":"# ElasticNet","edac208a":"# mdoel tuning","119ec81a":"# Model Tuning","35878546":"# CART","a48ad820":"# ## Model Tuning","5d72ef4f":"# Artificial Neural Networks\n","46bef346":"# Model Tuning","4ce06106":"# Model Tuning","29ea59ac":"#  Bagged Trees Regresyon","1cc3bfb5":"# Light GBM","76829d94":"# Gradient Boosting Machines\n","4185e4c8":"# predict"}}