{"cell_type":{"4462c0cf":"code","6962924c":"code","ddad0ce4":"code","1c7035ad":"code","71fb9ce7":"code","61cf7331":"code","e4a3b09b":"code","d7b26b77":"code","dd252458":"code","ab099eeb":"code","215619b4":"code","a22d2a9f":"code","96729d86":"code","7d5275fb":"code","416cf59e":"code","b6da5d9b":"code","b82fb70a":"code","43389985":"code","4bf7fa9a":"code","c46562c9":"markdown","9d3ccf8a":"markdown","0ed35f98":"markdown","f3c01b18":"markdown","2976efd5":"markdown","7717eba9":"markdown","eed8ea59":"markdown"},"source":{"4462c0cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6962924c":"from bokeh.plotting import figure, show\n\nfrom bokeh.io import output_notebook\n\nfrom bokeh.models import ColumnDataSource, HoverTool\n\nfrom bokeh.transform import dodge\n\noutput_notebook()","ddad0ce4":"df = pd.read_csv('\/kaggle\/input\/2019-coronavirus-dataset-01212020-01262020\/2019_nCoV_20200121_20200206.csv')\ndf.head()","1c7035ad":"# only check mainland and remove inaccurate suspected numbers\ndf = df[df['Country\/Region'] == 'Mainland China']\ndf = df.drop(['Suspected', 'Country\/Region'], axis=1)\ndf = df.fillna(0)","71fb9ce7":"# convert the last update field type to datatime\ndef convert_last_update_to_day(x):\n    return pd.to_datetime(x.split(' ')[0])\n\ndf['Last Update'] = df['Last Update'].apply(convert_last_update_to_day)\ndf = df.groupby(['Province\/State', 'Last Update']).max()\ndf.head()","61cf7331":"def get_df_by_name(provinces, df=df):\n    ''' get dataframe by province list\n    '''\n    dfs = list()\n    for p in provinces:\n        df_tmp = df.loc[p]\n        df_tmp = df_tmp.sort_values(by='Last Update')\n        dfs.append(df_tmp)\n    return dfs, provinces","e4a3b09b":"def draw_trend(source, province):\n    ''' draw trend line with bokeh source data\n    '''\n    plot = figure(x_axis_type=\"datetime\", title=\"{} Trend\".format(province), plot_width=800, plot_height=350)\n\n    plot.line('Last Update', 'Confirmed', line_color='red', source=source, legend_label='Confirmed')\n    plot.circle('Last Update', 'Confirmed', fill_color=\"white\", size=8, source=source)   \n\n    plot.line('Last Update', 'Recovered', line_color='green', source=source, legend_label='Recovered')\n    plot.circle('Last Update', 'Recovered', fill_color=\"white\", size=8, source=source)      \n\n    plot.line('Last Update', 'Death', line_color='black', source=source, legend_label='Death')\n    plot.circle('Last Update', 'Death', fill_color=\"white\", size=8, source=source)      \n\n    plot.legend.location = \"top_left\"\n    plot.add_tools(HoverTool(tooltips=[(\"# Confirmed\", \"@Confirmed\"), (\"# Recovered\", \"@Recovered\"), (\"# Death\", \"@Death\")]))\n\n    show(plot)","d7b26b77":"# prepare dataframes\n\ndf_hubei = df.loc['Hubei']\ndf_hubei = df_hubei.sort_values(by='Last Update')\nsource_hubei = ColumnDataSource(df_hubei)\n\ndf_shanghai = df.loc['Shanghai']\ndf_shanghai = df_shanghai.sort_values(by='Last Update')\nsource_shanghai = ColumnDataSource(df_shanghai)\n\ndf_sum = df.groupby(by='Last Update').sum()\nsource_china = ColumnDataSource(df_sum)\n\nsource_others = ColumnDataSource(df_sum - df_hubei)","dd252458":"draw_trend(source_shanghai, 'Shanghai')","ab099eeb":"draw_trend(source_china, 'China')","215619b4":"draw_trend(source_hubei, 'Hubei')","a22d2a9f":"plot = figure(x_axis_type=\"datetime\", title=\"Trends Comparison\", plot_width=800, plot_height=350)\n\nplot.line('Last Update', 'Confirmed', line_color='red', source=source_china, legend_label='# Confirmed China')\nplot.circle('Last Update', 'Confirmed', fill_color=\"white\", size=8, source=source_china)   \n\nplot.line('Last Update', 'Confirmed', line_color='orange', source=source_hubei, legend_label='# Confirmed Hubei')\nplot.circle('Last Update', 'Confirmed', fill_color=\"white\", size=8, source=source_hubei)      \n\nplot.line('Last Update', 'Confirmed', line_color='green', source=source_shanghai, legend_label='# Confirmed Shanghai')\nplot.circle('Last Update', 'Confirmed', fill_color=\"white\", size=8, source=source_shanghai)     \n\nplot.line('Last Update', 'Confirmed', line_color='pink', source=source_others, legend_label='# Confirmed Non-Hubei')\nplot.circle('Last Update', 'Confirmed', fill_color=\"white\", size=8, source=source_others)   \n\n\nplot.legend.location = \"top_left\"\nplot.add_tools(HoverTool(tooltips=[(\"# Confirmed\", \"@Confirmed\")]))\n\nshow(plot)","96729d86":"df_sum_by_province = df.groupby(by='Province\/State').max()\ndf_sum_by_province = df_sum_by_province[df_sum_by_province.index!='Hubei']\ndf_sum_by_province.head()\ndf_sum_by_province = df_sum_by_province.sort_values(by='Confirmed')","7d5275fb":"p = figure(y_range=list(df_sum_by_province.index), title=\"Distribution of Confirmed\", plot_width=800, plot_height=550)\np.hbar(y=list(df_sum_by_province.index), right=list(df_sum_by_province['Confirmed']), height=0.6)\n\np.xgrid.grid_line_color = None\np.x_range.start = 0\n\np.add_tools(HoverTool(tooltips=[(\"Province\", \"@y\"), (\"Confirmed\", \"@right\")]))\n\nshow(p)","416cf59e":"a = df_sum['Confirmed'].iloc[:-1].reset_index(drop=True)\nb = df_sum['Confirmed'].iloc[1:].reset_index(drop=True)\nchg = b - a\ndf_increase = df_sum.iloc[1:,:]\npd.options.mode.chained_assignment = None\ndf_increase['chg'] = chg.values\ndf_increase['date'] = df_increase.index.map(lambda x: x.strftime('%Y-%m-%d'))\ndf_increase","b6da5d9b":"p = figure(x_range=list(df_increase.index.format()), title=\"Increased Number of China Confirmed\", plot_width=1000, plot_height=350)\np.vbar(x=list(df_increase.index.format()), top=list(df_increase['chg']), width=0.2)\np.line(x=list(df_increase.index.format()), y=list(df_increase['chg']))\np.circle(x=list(df_increase.index.format()), y=list(df_increase['chg']), fill_color=\"white\", size=8)    \n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\np.add_tools(HoverTool(tooltips=[(\"Date\", \"@x\"), (\"Increaed Number\", \"@top\")]))\n\nshow(p)","b82fb70a":"df_others = df_sum - df_hubei\na = df_others['Confirmed'].iloc[:-1].reset_index(drop=True)\nb = df_others['Confirmed'].iloc[1:].reset_index(drop=True)\nchg = b - a\ndf_others_increase = df_others.iloc[1:,:]\npd.options.mode.chained_assignment = None\ndf_others_increase['chg'] = chg.values\ndf_others_increase['date'] = df_others_increase.index.map(lambda x: x.strftime('%Y-%m-%d'))\ndf_others_increase","43389985":"p = figure(x_range=list(df_others_increase.index.format()), title=\"Increased Number of Non-Hubei Confirmed\", plot_width=1000, plot_height=350)\np.vbar(x=list(df_others_increase.index.format()), top=list(df_others_increase['chg']), width=0.2)\np.line(x=list(df_others_increase.index.format()), y=list(df_others_increase['chg']))\np.circle(x=list(df_others_increase.index.format()), y=list(df_others_increase['chg']), fill_color=\"white\", size=8)    \n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\np.add_tools(HoverTool(tooltips=[(\"Date\", \"@x\"), (\"Increaed Number\", \"@top\")]))\n\nshow(p)","4bf7fa9a":"source1 = ColumnDataSource(df_increase)\nsource2 = ColumnDataSource(df_others_increase)\n\np = figure(x_range=list(df_increase.index.format()), title=\"Increased Number Comparison\", plot_width=1000, plot_height=350)\n\np.vbar(x=dodge('date', 0, range=p.x_range), top='chg', width=0.2, color=\"#718dbf\", legend_label=\"China\", source=source1)\np.vbar(x=dodge('date', 0.25, range=p.x_range), top='chg', width=0.2, color=\"#e84d60\", legend_label=\"China without Hubei\", source=source2)\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.legend.location = \"top_left\"\n\np.add_tools(HoverTool(tooltips=[(\"Date\", \"@date\"), (\"Increaed Number\", \"@chg\")]))\n\nshow(p)","c46562c9":"# Trends","9d3ccf8a":"## Comparing The Trends","0ed35f98":"## Hubei Trends","f3c01b18":"## China Trends","2976efd5":"# Increasing Rate","7717eba9":"# Distribution of Confirmed without Hubei ","eed8ea59":"## Shanghai Trends"}}