{"cell_type":{"8540980d":"code","930f93f2":"code","0f7ff3b0":"code","994507d2":"code","d9d6821c":"code","4e07c778":"code","cfc78967":"code","462d7968":"code","c5773e0a":"code","b3f4572b":"code","45476c4d":"code","82fb68a4":"code","2d0fe49c":"code","bc98cf99":"code","784493da":"code","25e576c1":"markdown","6dfa6b22":"markdown","7b42df55":"markdown","76ed080e":"markdown","848f6f46":"markdown","6eb8c7e5":"markdown","c7137467":"markdown","e3231df3":"markdown","1862b995":"markdown","afc4f431":"markdown"},"source":{"8540980d":"!pip install -Uqq fastai","930f93f2":"from fastai.tabular.all import *","0f7ff3b0":"path = Path('..\/input\/adult-census-income')","994507d2":"df = pd.read_csv(path\/'adult.csv')","d9d6821c":"!pip install bayesian-optimization -q","4e07c778":"from bayes_opt import BayesianOptimization","cfc78967":"def fit_with(lr:float, wd:float, dp:float, n_layers:float, layer_1:float, layer_2:float, layer_3:float):\n    print(lr, wd, dp)\n    if int(n_layers) == 2:\n        layers = [int(layer_1), int(layer_2)]\n    elif int(n_layers) == 3:\n        layers = [int(layer_1), int(layer_2), int(layer_3)]\n    else:\n        layers = [int(layer_1)]\n    config = tabular_config(embed_p = float(dp), ps = float(dp))\n    learn = tabular_learner(dls, layers=layers, metrics=accuracy, config=config)\n    \n    with learn.no_bar() and learn.no_logging():\n        learn.fit(5, lr=float(lr))\n    \n    acc = float(learn.validate()[1])\n    \n    return acc","462d7968":"df.columns","c5773e0a":"\ncat_names = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race']\ncont_names = ['age', 'fnlwgt', 'education.num']\nprocs = [Categorify, FillMissing, Normalize]\ny_names = 'income'\ny_block = CategoryBlock()\nsplits = RandomSplitter()(range_of(df))","b3f4572b":"to = TabularPandas(df, procs=procs, cat_names=cat_names, cont_names=cont_names,\n                   y_names=y_names, y_block=y_block, splits=splits)","45476c4d":"dls = to.dataloaders(bs=512)","82fb68a4":"hps = {\n    'lr' : (1e-05, 1e-01),\n    'wd' : (4e-4,0.4),\n    'dp' : (0.01, 0.5),\n    'n_layers' : (1,3),\n    'layer_1' : (50, 200),\n    'layer_2' : (100,1000),\n    'layer_3' : (200,2000)\n}","2d0fe49c":"optim = BayesianOptimization(\n    f = fit_with,\n    pbounds = hps,\n    verbose = 2,\n    random_state=1\n)","bc98cf99":"%time optim.maximize(n_iter=10)","784493da":"print(optim.max)","25e576c1":"what dls does is that a dataloader simply gives us data in batches.","6dfa6b22":"Now we create a fit_with function for training on hyperparameters and giving us the accuracy back.","7b42df55":"creating a TabularPandas","76ed080e":"Loading data into a dataframe from path. Path is a urllib object which has a lot of added functionalities than just having a text path","848f6f46":"installing\/updating fastai","6eb8c7e5":"lets import all the tabular functions,given by fastai","c7137467":"declaring our hyperparameters","e3231df3":"we declare our optimisers","1862b995":"This notebook is going to be an adaptation of Zach Mueller's a walk with fastai. Where he creates a Bayesian optimisation on this dataset.\n\nhttps:\/\/github.com\/muellerzr\/Practical-Deep-Learning-for-Coders-2.0\/blob\/master\/Tabular%20Notebooks\/02_Bayesian_Optimization.ipynb","afc4f431":"Installing Bayesian optimisation package"}}