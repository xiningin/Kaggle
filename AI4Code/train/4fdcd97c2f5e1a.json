{"cell_type":{"c0bab59e":"code","37fa0e05":"code","93f9eaae":"code","a5f33f60":"code","0179747a":"code","628a7732":"code","424acd78":"code","a4825357":"code","2442ec71":"code","d7912610":"code","357770e6":"code","3c07f2a8":"code","22facf1f":"code","a6fd9484":"code","3650b5fa":"code","3949f03d":"code","eaead86a":"code","6a6580bf":"code","617e83b0":"code","81f9d4cc":"code","081676e2":"code","ea99b5ff":"code","8c3dd3e9":"code","f2cae70d":"code","5934251d":"code","0bed3f8d":"code","b682965c":"code","4a3ceb21":"code","f334180e":"code","a742408b":"code","f3e2ae3e":"code","5326b9e2":"code","78f94591":"code","a48c56fa":"code","5c47e907":"code","1f3c2fda":"code","fafeb65b":"code","1801c048":"markdown","d6c814fa":"markdown","9a01f2f9":"markdown","4dbd6b1b":"markdown","9bc57a59":"markdown","484faff4":"markdown","3618b7fa":"markdown","fcef60ff":"markdown","7177f437":"markdown","8fc71a61":"markdown","a70a9399":"markdown","498c0f41":"markdown","8b6370a7":"markdown","c71fd378":"markdown","acd26559":"markdown","97f72c16":"markdown","dc74b6a8":"markdown"},"source":{"c0bab59e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.options.mode.chained_assignment = None\nplt.style.use('ggplot')\n%matplotlib inline","37fa0e05":"champs = pd.read_csv(\"..\/input\/champs.csv\")\nchamps.head()","93f9eaae":"matches = pd.read_csv(\"..\/input\/matches.csv\")\nmatches.head()","a5f33f60":"participants = pd.read_csv('..\/input\/participants.csv')\nparticipants.tail()","0179747a":"stats1 = pd.read_csv('..\/input\/stats1.csv')\nstats1.head(2)","628a7732":"stats2 = pd.read_csv('..\/input\/stats2.csv')\nstats2.head(2)","424acd78":"stats = stats1.append(stats2)\nstats.shape","a4825357":"stats.head()","2442ec71":"df = pd.merge(participants, stats, how = 'left', on = ['id'], suffixes=('', '_y'))\n\ndf = pd.merge(df , champs, how = 'left', left_on= 'championid', right_on='id'\n             ,suffixes=('', '_y') )\n\ndf = pd.merge(df, matches, how = 'left', left_on = 'matchid', right_on = 'id'\n              , suffixes=('', '_y'))","d7912610":"df.columns","357770e6":"def final_position(col):\n    if col['role'] in ('DUO_SUPPORT', 'DUO_CARRY'):\n        return col['role']\n    else:\n        return col['position']","3c07f2a8":"df['adjposition'] = df.apply(final_position, axis = 1)","22facf1f":"df.head()","a6fd9484":"df['team'] = df['player'].apply(lambda x: '1' if x <= 5 else '2')\ndf['team_role'] = df['team'] + ' - ' + df['adjposition']","3650b5fa":"df.head()","3949f03d":"remove_index = []\nfor i in ('1 - MID', '1 - TOP', '1 - DUO_SUPPORT', '1 - DUO_CARRY', '1 - JUNGLE',\n          '2 - MID', '2 - TOP', '2 - DUO_SUPPORT', '2 - DUO_CARRY', '2 - JUNGLE'):\n    df_remove = df[df['team_role'] == i].groupby('matchid').agg({'team_role':'count'})\n    remove_index.extend(df_remove[df_remove['team_role'] != 1].index.values)","eaead86a":"remove_index.extend(df[df['adjposition'] == 'BOT']['matchid'].unique())\nremove_index = list(set(remove_index))","6a6580bf":"print('# matches in dataset before cleaning:{}'.format(df['matchid'].nunique()))\ndf = df[~df['matchid'].isin(remove_index)]\nprint('# matches in dataset after cleaning: {}'.format(df['matchid'].nunique()))","617e83b0":"df.columns","81f9d4cc":"df = df[['id', 'matchid', 'player', 'name', 'adjposition', 'team_role',\n         'win', 'kills', 'deaths', 'assists', 'turretkills','totdmgtochamp',\n         'totheal', 'totminionskilled', 'goldspent', 'totdmgtaken', 'inhibkills',\n         'pinksbought', 'wardsplaced', 'duration', 'platformid',\n         'seasonid', 'version']]\ndf.head()","081676e2":"df_v = df.copy()\n# Putting ward limits\ndf_v['wardsplaced'] = df_v['wardsplaced'].apply(lambda x: x if x<30 else 30)\ndf_v['wardsplaced'] = df_v['wardsplaced'].apply(lambda x: x if x>0 else 0)\n\ndf_v['wardsplaced'].head()","ea99b5ff":"plt.figure(figsize=(12,10))\nsns.violinplot(x='seasonid', y= 'wardsplaced', hue='win', data= df_v, split = True\n              , inner= 'quartile')\nplt.title('Wardsplaced by season : win & lose')","8c3dd3e9":"df_corr = df._get_numeric_data()\ndf_corr = df_corr.drop(['id', 'matchid', 'player', 'seasonid'], axis = 1)\n\nm = np.zeros_like(df_corr.corr(), dtype=np.bool)\nm[np.triu_indices_from(m)] = True\n\nplt.figure(figsize=(16,10))\nsns.heatmap(df_corr.corr(), cmap = 'coolwarm', annot= True, fmt = '.2f',\n            linewidths=.5, mask = m)\n\nplt.title('Correlations - win vs factors (all games)')\n","f2cae70d":"df_corr_2 = df._get_numeric_data()\n# for games less than 25mins\ndf_corr_2 = df_corr_2[df_corr_2['duration'] <= 1500]\ndf_corr_2 = df_corr_2.drop(['id', 'matchid', 'player', 'seasonid'], axis = 1)\n\nm = np.zeros_like(df_corr_2.corr(), dtype=np.bool)\nm[np.triu_indices_from(m)] = True\n\nplt.figure(figsize=(16,10))\nsns.heatmap(df_corr_2.corr(), cmap = 'coolwarm', annot= True, fmt = '.2f',\n            linewidths=.5, mask = m)\n\nplt.title('Correlations - win vs factors (for games last less than 25 mins)')","5934251d":"df_corr_3 = df._get_numeric_data()\n# for games more than 40mins\ndf_corr_3 = df_corr_3[df_corr_3['duration'] > 2400]\ndf_corr_3 = df_corr_3.drop(['id', 'matchid', 'player', 'seasonid'], axis = 1)\n\nm = np.zeros_like(df_corr_3.corr(), dtype=np.bool)\nm[np.triu_indices_from(m)] = True\n\nplt.figure(figsize=(16,10))\nsns.heatmap(df_corr_3.corr(), cmap = 'coolwarm', annot= True, fmt = '.2f',\n            linewidths=.5, mask = m)\n\nplt.title('Correlations - win vs factors (for games last less than 40 mins)')","0bed3f8d":"pd.options.display.float_format = '{:,.1f}'.format\n\n\ndf_win_rate = df.groupby('name').agg({'win': 'sum','name': 'count',\n                                     'kills':'mean','deaths':'mean',\n                                     'assists':'mean'})\ndf_win_rate.columns = ['win' , 'total matches', 'K', 'D', 'A']\ndf_win_rate['win rate'] = df_win_rate['win'] \/ df_win_rate['total matches'] * 100\ndf_win_rate['KDA'] = (df_win_rate['K'] + df_win_rate['A']) \/ df_win_rate['D']\ndf_win_rate = df_win_rate.sort_values('win rate',ascending= False)\ndf_win_rate = df_win_rate[['total matches', 'win rate' , 'K' , 'D', 'A', 'KDA']]\n\n\nprint('Top 10 win rate')\nprint(df_win_rate.head(10))\nprint('Least 10 win rate')\nprint(df_win_rate.tail(10))","b682965c":"df_win_rate.reset_index(inplace= True)","4a3ceb21":"# plotting the result visually\nplt.figure(figsize=(16,30))\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\nax = sns.scatterplot(x=\"win rate\", y=\"name\", hue='KDA',\n                     palette=cmap, sizes=(10, 200),\n                     data=df_win_rate)","f334180e":"df_win_rate.head()","a742408b":"df_2 = df.sort_values(['matchid','adjposition'], ascending = [1,1])\n\ndf_2['shift 1'] = df_2['name'].shift()\ndf_2['shift -1'] = df_2['name'].shift(-1)\n\ndef matchup(x):\n    if x['player'] <= 5:\n        if x['name'] < x['shift -1']:\n            name_return = x['name'] + ' vs ' + x['shift -1']\n        else:\n            name_return = x['shift -1'] + ' vs ' + x['name']\n    else:\n        if x['name'] < x['shift 1']:\n            name_return = x['name'] + ' vs ' + x['shift 1']\n        else:\n            name_return = x['shift 1'] + ' vs ' + x['name']\n    return name_return\n\ndf_2['matchup'] = df_2.apply(matchup, axis = 1)\ndf_2['win_adj'] = df_2.apply(lambda x: x['win'] if x['name'] == x['matchup'].split(' vs')[0]\n                            else 0, axis = 1)\n\ndf_2.head()","f3e2ae3e":"df_matchup = df_2.groupby(['adjposition', 'matchup']).agg({'win_adj': 'sum', 'matchup': 'count'})\ndf_matchup.columns = ['win matches', 'total matches']\ndf_matchup['total matches'] = df_matchup['total matches'] \/ 2\ndf_matchup['win rate'] = df_matchup['win matches'] \/  df_matchup['total matches']  * 100\ndf_matchup['dominant score'] = df_matchup['win rate'] - 50\ndf_matchup['dominant score (ND)'] = abs(df_matchup['dominant score'])\ndf_matchup = df_matchup[df_matchup['total matches'] > df_matchup['total matches'].sum()*0.0001]\n\ndf_matchup = df_matchup.sort_values('dominant score (ND)', ascending = False)\ndf_matchup = df_matchup[['total matches', 'dominant score']]                   \ndf_matchup = df_matchup.reset_index()\n\nprint('Dominant score +\/- means first\/second champion dominant:')\n\nfor i in df_matchup['adjposition'].unique(): \n        print('\\n{}:'.format(i))\n        print(df_matchup[df_matchup['adjposition'] == i].iloc[:,1:].head(5))","5326b9e2":"df_matchup['adjposition'].unique()\n\ndf_matchup_TOP = df_matchup.loc[df_matchup['adjposition'] == 'TOP']\ndf_matchup_JUNGLE = df_matchup.loc[df_matchup['adjposition'] == 'JUNGLE']\ndf_matchup_MID = df_matchup.loc[df_matchup['adjposition'] == 'MID']\ndf_matchup_DUO_CARRY = df_matchup.loc[df_matchup['adjposition'] == 'DUO_CARRY']\ndf_matchup_DUO_SUPPORT = df_matchup.loc[df_matchup['adjposition'] == 'DUO_SUPPORT']\n\n\nprint(df_matchup_TOP.shape)\nprint(df_matchup_JUNGLE.shape)\nprint(df_matchup_MID.shape)\nprint(df_matchup_DUO_CARRY.shape)\nprint(df_matchup_DUO_SUPPORT.shape)","78f94591":"# plotting duo carry \nplt.figure(figsize=(16,60))\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"dominant score\", y=\"matchup\", data=df_matchup_DUO_CARRY,\n            label=\"Total\", color=\"b\")","a48c56fa":"# plotting TOP\n\nplt.figure(figsize=(16,200))\nsns.set()\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"dominant score\", y=\"matchup\", data=df_matchup_TOP,\n            label=\"Total\", color=\"c\")","5c47e907":"# plotting jungle\n\nplt.figure(figsize=(16,100))\nsns.set()\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"dominant score\", y=\"matchup\", data=df_matchup_JUNGLE,\n            label=\"Total\", color=\"g\")","1f3c2fda":"# plotting mid\n\nplt.figure(figsize=(16,100))\nsns.set()\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"dominant score\", y=\"matchup\", data=df_matchup_MID,\n            label=\"Total\", color=\"r\")","fafeb65b":"# plotting support\n\nplt.figure(figsize=(16,100))\nsns.set()\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"dominant score\", y=\"matchup\", data=df_matchup_DUO_SUPPORT,\n            label=\"Total\", color=\"m\")","1801c048":"## Some Data Cleaning","d6c814fa":"Correlations here are stronger and more obvisious:\n* kills & deaths affect strongly the winning process\n* also assits & turretkills affect the winning process \n* kills has strong relation with goldspent\n* more goldspent means more totdamagetochamp means more likely to earn kills","9a01f2f9":"if you never played the game, you would find these info interesting !\n* deaths affect badly on win rate\n* kills goes well with goldspent & totdmgtochamp \n* deaths propotional with duration & totdmgtaken\n* more goldspent at late game ( more duration )\n* totminionkilled aka farming goes well with totdmgtochamp aka damaging enemy champs ALSO more  goldspent ofcourse.","4dbd6b1b":"So in the late game as gamers call it OR after 40 mins of game time we find that:\n* deaths & kills doesnt even matter alot and have very poor correlation with game winning.\n* inhibkills & turretkills have about 25% chance of winning the game(still not big correlation).\n* kills have high correlation with goldspent & totdmgtochamp.\n* assists have 40% corr with wardsplaced ( as this is the support's job) also -43% with totminionkilled( supports don't farm alot) and -32% with kills.\n","9bc57a59":"we can notice that wards are getting more popular and growing everyseason in both winning & losing games.","484faff4":"### removing matchid with duplicate roles","3618b7fa":"If we plot the ADC ( DUO_CARRY) for an example, we notice:\n* the negative values means the LEFT champion dominates ( kalista vs kogmaw scored -12.5 means kalista dominates by far)\n* The positive values  means the RIGHT champion dominates (Graves vs Tristana scored +5.5 means Tristana dominates by far)\n* While we approach zero from both sides means both champions have balanced dominance points ( MissFortune vs Caitlyn). so its totally up to your skills ;) ","fcef60ff":"## EDA (Exploratory Data Analysis)","7177f437":"## Thanks, Thats all for now","8fc71a61":"### The Columns we need","a70a9399":"## Counter pick advices !","498c0f41":"## Some Data Cleaning","8b6370a7":"#### putting all together in one DataFrame","c71fd378":"### Top win rate champions:","acd26559":"## Before & After Cleaning","97f72c16":"###  remove unclassified BOT, as correct ones should be DUO_SUPPORT OR DUO_CARRY","dc74b6a8":"#### This is kinda generic so we will split the heatmap into:\n games less than 25mins\n & games more than 25min "}}