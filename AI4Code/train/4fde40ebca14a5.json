{"cell_type":{"98c49917":"code","a8eaea61":"code","adcdd9e7":"code","653510b6":"code","c58528fd":"code","a5dde34e":"code","7840aa0e":"code","7e1bb184":"code","ab7eeff5":"code","fc18505b":"code","61fe53f4":"code","bde12bbe":"code","576be0f4":"code","862bfc74":"code","9f07e9a2":"code","fc78f0e6":"code","7a63c59e":"code","4dbf8559":"code","119abcf1":"code","328195f4":"code","26b1416b":"code","79e25d00":"code","0d7d827c":"code","f2379118":"code","1a2ae861":"code","0745ec93":"code","d5875348":"code","21b8315f":"code","a2b0644e":"code","69639512":"code","949f2981":"code","07b49556":"code","64f169e6":"code","3acb5824":"code","0ab2ab2c":"code","ddfb8177":"code","a4b715e3":"code","5318f23c":"code","3af7d9e4":"code","d5e80ecd":"code","50979d8a":"code","fa90eddc":"code","17d1495c":"code","d4c96857":"code","5a2af1a5":"code","e86e2c26":"code","21109338":"code","8aabcf01":"code","4609c963":"code","bd2eb252":"code","dcfba62c":"code","bcaa2152":"code","f3df6f7e":"code","79e3956d":"code","c9cf54d4":"code","9eb7d00e":"code","b4b868db":"code","bd580305":"code","f85aa2bf":"code","0ef07cd4":"code","ac99f1aa":"code","c2401bdf":"markdown","97c86712":"markdown","086a2162":"markdown","bbd54cfc":"markdown","52c887c3":"markdown","89e97f8a":"markdown","362f0432":"markdown","89a71c50":"markdown","7dbc93a4":"markdown","c128619b":"markdown","0c242ebb":"markdown","04b1deec":"markdown","0deccfd7":"markdown","923e6206":"markdown","e13f3657":"markdown","a5c8dca8":"markdown","b8d32c1c":"markdown"},"source":{"98c49917":"!python3 -m pip install --upgrade pip","a8eaea61":"!pip install seaborn==0.11.0","adcdd9e7":"!python3 -m pip install pandas","653510b6":"!python3 -m pip install matplotlib","c58528fd":"!python3 -m pip install seaborn","a5dde34e":"!python3 -m pip install sklearn","7840aa0e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) ","7e1bb184":"df = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/ojjy\/datascience\/master\/heart_failure_clinic\/heart_failure_clinical_records_dataset.csv\")\ndf.head(5)","ab7eeff5":"df['age'] = df['age'].astype(int)","fc18505b":"df.tail(5)","61fe53f4":"df.shape","bde12bbe":"df.isnull().sum()","576be0f4":"df.info()","862bfc74":"df['anaemia'].value_counts()","9f07e9a2":"df['diabetes'].value_counts()","fc78f0e6":"df['sex'].value_counts()","7a63c59e":"df['smoking'].value_counts()","4dbf8559":"df['DEATH_EVENT'].value_counts()","119abcf1":"df[(df['anaemia']==1)&(df['diabetes']==1)&(df['smoking']==1)]","328195f4":"plt.figure(figsize=(15,10))\nsns.countplot(x='age', data=df)","26b1416b":"fig, axes = plt.subplots(2, 3, figsize=(15, 10))\nsns.countplot(x=df['anaemia'], data=df, ax=axes[0,0])\nsns.countplot(x=df['diabetes'], data=df, ax=axes[0,1])\nsns.countplot(x=df['high_blood_pressure'], data=df, ax=axes[0,2])\nsns.countplot(x=df['sex'], data=df, ax=axes[1,0])\nsns.countplot(x=df['smoking'], data=df, ax=axes[1,1])\nsns.countplot(x=df['DEATH_EVENT'], data=df, ax=axes[1,2])","79e25d00":"x=df.drop('DEATH_EVENT', axis=1)\ny=df['DEATH_EVENT']","0d7d827c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)\nprint(f\"x_train: {x_train.shape}\")\nprint(f\"x_test: {x_test.shape}\")\nprint(f\"y_train: {y_train.shape}\")\nprint(f\"y_test: {y_test.shape}\")","f2379118":"accuracy_list=[]\nmodel_list=[]","1a2ae861":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nada_clf = AdaBoostClassifier(n_estimators=500, learning_rate=0.01, random_state=0)\nada_model = ada_clf.fit(x_train, y_train)\ny_pred_ada = ada_model.predict(x_test)\nada_acc = accuracy_score(y_test, y_pred_ada)\naccuracy_list.append(round(ada_acc*100, 2))\nmodel_list.append(\"AdaBoost\")\nround(ada_acc*100, 2)","0745ec93":"ada_clf.score(x_test, y_test)","d5875348":"confusion_matrix(y_test, y_pred_ada)","21b8315f":"!pip install xgboost","a2b0644e":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nxgb_clf = XGBClassifier(n_estimators=500, learning_rate=0.01, random_state=0)\nxgb_model=xgb_clf.fit(x_train, y_train)\ny_pred_xgb = xgb_model.predict(x_test)\nxgb_acc = accuracy_score(y_test, y_pred_xgb)\naccuracy_list.append(round(xgb_acc*100, 2))\nmodel_list.append(\"XGBoost\")\nround(xgb_acc*100, 2)","69639512":"xgb_clf.score(x_test, y_test)","949f2981":"confusion_matrix(y_test, y_pred_xgb)","07b49556":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\ngrb_clf = GradientBoostingClassifier(max_depth=2, random_state=1)\ngrb_model = grb_clf.fit(x_train, y_train)\ny_pred_grb = grb_model.predict(x_test)\ngrb_acc = accuracy_score(y_test, y_pred_grb)\naccuracy_list.append(round(grb_acc*100, 2))\nmodel_list.append(\"GradientBoost\")\nround(grb_acc*100, 2)","64f169e6":"grb_clf.score(x_test, y_test)","3acb5824":"confusion_matrix(y_test, y_pred_grb)","0ab2ab2c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nlog_reg = LogisticRegression()\nlog_reg_model = log_reg.fit(x_train, y_train)\ny_pred_log = log_reg_model.predict(x_test)\nlog_reg_acc = accuracy_score(y_test, y_pred_log)\naccuracy_list.append(round(log_reg_acc*100,2))\nmodel_list.append(\"Logistic Regression\")\nround(log_reg_acc*100,2)","ddfb8177":"log_reg.score(x_test, y_test)","a4b715e3":"confusion_matrix(y_test, y_pred_log)","5318f23c":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nsv_clf = SVC()\nsv_clf.fit(x_train, y_train)\ny_pred_sv = sv_clf.predict(x_test)\nsv_clf_acc = accuracy_score(y_test, y_pred_sv)\naccuracy_list.append(round(sv_clf_acc*100, 2))\nmodel_list.append(\"SVC\")\nround(sv_clf_acc*100, 2)","3af7d9e4":"sv_clf.score(x_test, y_test)","d5e80ecd":"confusion_matrix(y_test, y_pred_sv)","50979d8a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nkn_clf = KNeighborsClassifier(n_neighbors=6)\nkn_clf.fit(x_train, y_train)\ny_pred_kn = kn_clf.predict(x_test)\nkn_clf_acc = accuracy_score(y_test, y_pred_kn)\naccuracy_list.append(round(kn_clf_acc*100, 2))\nmodel_list.append('KNN')\nround(kn_clf_acc*100, 2)","fa90eddc":"kn_clf.score(x_test, y_test)","17d1495c":"confusion_matrix(y_test, y_pred_kn)","d4c96857":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\ndt_clf = DecisionTreeClassifier(max_leaf_nodes=3, random_state=0, criterion='entropy')\ndt_clf.fit(x_train, y_train)\ny_pred_dt = dt_clf.predict(x_test)\ndt_clf_acc = accuracy_score(y_test, y_pred_dt)\naccuracy_list.append(round(dt_clf_acc*100, 2))\nmodel_list.append('Decision Tree')\nround(dt_clf_acc*100, 2)","5a2af1a5":"dt_clf.score(x_test, y_test)","e86e2c26":"confusion_matrix(y_test, y_pred_dt)","21109338":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nr_clf = RandomForestClassifier(max_features=0.5, max_depth=15, random_state=1)\nr_clf.fit(x_train, y_train)\ny_pred_r = r_clf.predict(x_test)\nr_clf_acc = accuracy_score(y_test, y_pred_r)\naccuracy_list.append(round(r_clf_acc*100, 2))\nmodel_list.append(\"Random Forest\")\nround(r_clf_acc*100, 2)","8aabcf01":"r_clf.score(x_test, y_test)","4609c963":"confusion_matrix(y_test, y_pred_r)","bd2eb252":"!pip install lightgbm","dcfba62c":"from lightgbm import LGBMClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nlgb_clf = LGBMClassifier(max_depth=2, random_state=4)\nlgb_clf.fit(x_train,y_train)\ny_pred_lgb = lgb_clf.predict(x_test)\nlgb_clf_acc = accuracy_score(y_test, y_pred_lgb)\naccuracy_list.append(round(lgb_clf_acc*100, 2))\nmodel_list.append('LGBM')\nround(lgb_clf_acc*100, 2)","bcaa2152":"lgb_clf.score(x_test, y_test)","f3df6f7e":"confusion_matrix(y_test, y_pred_lgb)","79e3956d":"!pip install catboost","c9cf54d4":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\ncat_clf = CatBoostClassifier()\ncat_clf.fit(x_train,y_train)\ny_pred_cat = cat_clf.predict(x_test)\ncat_clf_acc = accuracy_score(y_test, y_pred_cat)\naccuracy_list.append(round(cat_clf_acc*100, 2))\nmodel_list.append('CatBoost')\nround(cat_clf_acc*100, 2)","9eb7d00e":"cat_clf.score(x_test, y_test)","b4b868db":"confusion_matrix(y_test, y_pred_cat)","bd580305":"accuracy_list","f85aa2bf":"model_list","0ef07cd4":"dataset = pd.DataFrame({'x':model_list, 'y':accuracy_list})\ndataset","ac99f1aa":"plt.rcParams['figure.figsize']=20,8\nplt.xlabel('Classifier Models', fontsize = 20)\nplt.ylabel('% of Accuracy', fontsize = 20)\nplt.bar(model_list, accuracy_list)\nfor i, v in enumerate(model_list):\n    plt.text(v, accuracy_list[i], accuracy_list[i],  # \uc88c\ud45c (x\ucd95 = v, y\ucd95 = y[0]..y[1], \ud45c\uc2dc = y[0]..y[1])\n             fontsize='large',\n             horizontalalignment='center',  # horizontalalignment (left, center, right)\n             verticalalignment='bottom')    # verticalalignment (top, center, bottom)","c2401bdf":"## 3. Load Dataset","97c86712":"### 6-7. Decision Tree","086a2162":"### 6-4. Logistic Regression","bbd54cfc":"## 4. Data Explorary Analysis","52c887c3":"### 6-3. GradientBoost","89e97f8a":"### 6-1. AdaBoost","362f0432":"### 6-5. Support Vector Machine","89a71c50":"### 6-9. CatBoost","7dbc93a4":"### 6-6. KNN","c128619b":"## 1. Install libraries","0c242ebb":"## 5. Split data","04b1deec":"## 6. Modeling","0deccfd7":"### 6-8. lightgbm","923e6206":"## 7. Compared with models","e13f3657":"### 6-2. XGBoost","a5c8dca8":"## 2. Import libraries","b8d32c1c":"### 6-8. Random Forest"}}