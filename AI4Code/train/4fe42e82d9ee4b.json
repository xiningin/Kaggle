{"cell_type":{"decb8e3c":"code","eda2e936":"code","30f8fb07":"code","20f8aa88":"code","6b0ab537":"code","113a1b1b":"code","b7e6314b":"code","64649378":"code","c5162816":"code","6296cd81":"code","40b2479b":"code","1c87b64b":"code","1e7195c1":"code","7ea58903":"code","0feb8299":"code","e78869cd":"code","2bdbdf3b":"code","26cf8263":"code","d85e51b6":"code","3920af90":"code","98b86a2b":"code","fda6106c":"code","1e60c802":"code","674c6177":"code","9b5a6e8d":"code","83b67ede":"code","fffe8ff4":"code","e82d5988":"code","fcb40a1a":"code","0875e11f":"code","db0b65e7":"code","2cb66eb1":"code","2dfcf51d":"code","34299c2a":"code","23e98f71":"code","3d46846d":"code","08d7d612":"code","76cdea43":"code","8a1807a7":"markdown","7e51a63f":"markdown","e6e1334f":"markdown","eb795cfd":"markdown","fc097d0a":"markdown"},"source":{"decb8e3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eda2e936":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nimport pickle","30f8fb07":"!pip install hydroeval","20f8aa88":"from sklearn.metrics import explained_variance_score, max_error, mean_absolute_error, mean_squared_error, mean_squared_log_error\nfrom sklearn.metrics import median_absolute_error, r2_score, mean_poisson_deviance, mean_gamma_deviance\nimport hydroeval as hy","6b0ab537":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity='all'","113a1b1b":"veri=pd.read_csv('..\/input\/auto-data\/auto-mpg.csv')\nveri.head()","b7e6314b":"from sklearn.utils import shuffle ","64649378":"veri = shuffle(veri)\nveri.head()\ntype(veri)","c5162816":"X = veri.iloc[:,1:8]\ny = pd.DataFrame(veri.iloc[:,0])\ntype(y)\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 10)\nX_train.shape\nX_test.shape\ny_train\ny_train.shape\ny_test.shape","6296cd81":"# scaler_0 = MinMaxScaler().fit(X_train)\nscaler = StandardScaler().fit(X_train)\nX_train_sc = scaler.transform(X_train)\nX_test_sc = scaler.transform(X_test)\n\nscaler_y = StandardScaler().fit(y_train)\ny_train_sc = scaler_y.transform(y_train)\n#y_test_sc = scaler_y.transform(y_test)","40b2479b":"Model = MLPRegressor(hidden_layer_sizes = (256,128,64,32),\n                    activation = 'relu',\n                    learning_rate = 'adaptive',\n                    learning_rate_init=0.005,\n                    max_iter=300,\n                    random_state=3)\nModel.fit(X_train_sc, y_train_sc.ravel())","1c87b64b":"Model.out_activation_","1e7195c1":"y_pred_sc = Model.predict(X_test_sc)\ny_pred_real = scaler_y.inverse_transform(y_pred_sc)\nprint('R^2:', r2_score(y_pred_real,y_test))","7ea58903":"plt.figure(figsize=(5,5))\nplt.scatter(x=y_pred_real, y=y_test)\nx=[0,50]\ny=[0,50]\nplt.plot(x,y,'--', c='r')\nplt.xlabel('predicted values')\nplt.ylabel('measured values');","0feb8299":"from sklearn.model_selection import cross_val_score","e78869cd":"scores = cross_val_score(Model, X_train_sc, y_train_sc.ravel(), cv = 5)","2bdbdf3b":"scores.mean()","26cf8263":"from sklearn.model_selection import RandomizedSearchCV","d85e51b6":"parametreler = {'hidden_layer_sizes':[(32,),(16,8),(32,16,4),(256,128,64,32)],\n               'activation':['identity','logistic','tanh','relu'],\n               'solver':['adam','lbfgs'],\n               'alpha': [0.001,0.0001,0.00001,0.000001],\n                'max_iter':[500]\n               }\nIzgara_model_11 = RandomizedSearchCV(estimator=MLPRegressor(),\n                                   param_distributions=parametreler,\n                                   n_jobs=-1,\n                                   cv=5,\n                                    random_state=4)\nIzgara_model_11.fit(X_train_sc,y_train_sc.ravel())","3920af90":"en_iyi = Izgara_model_11.best_estimator_\nprint(Izgara_model_11.best_params_)\nprint(en_iyi.out_activation_)       # MLPRegression da \u00e7\u0131kt\u0131 activation function her zaman identity dir. \nscores = cross_val_score(en_iyi, X_train_sc, y_train_sc.ravel(), cv=5)\nprint(scores.mean())","98b86a2b":"y_pred_11 = en_iyi.predict(X_test_sc)\ny_pred_11_real = scaler_y.inverse_transform(y_pred_11)\nprint('R^2:', r2_score(y_pred_11_real,y_test))","fda6106c":"plt.figure(figsize=(5,5))\nplt.scatter(x=y_pred_11_real, y=y_test)\nx=[0,55]\ny=[0,55]\nplt.plot(x,y,'--', c='r')\nplt.xlabel('predicted values')\nplt.ylabel('measured values');","1e60c802":"param_2 = {'solver':['sgd'],\n          'hidden_layer_sizes':[(32,),(16,8),(32,16,8),(256,128,64,32)],\n          'activation':['identity','logistic','tanh','relu'],\n          'momentum':[0.7,0.75,0.80,0.85,0.90,0.95], # momentumu daha k\u00fc\u00e7\u00fck aral\u0131klarla dene (0.7 ile 1 aras\u0131nda)\n           'learning_rate':['constant','adaptive', 'invscaling'],\n          'max_iter': [700]\n          }\nIzgara_2 = RandomizedSearchCV(estimator=MLPRegressor(),\n                             param_distributions=param_2,\n                             n_jobs=-1,\n                             cv=5,\n                             verbose=2,\n                             random_state=5)\nIzgara_2.fit(X_train_sc,y_train_sc.ravel())","674c6177":"en_iyi_2 = Izgara_2.best_estimator_\nprint(Izgara_2.best_params_)","9b5a6e8d":"scores_2 = cross_val_score(en_iyi_2,X_train_sc,y_train_sc.ravel())\nprint(scores_2.mean())","83b67ede":"y_pred_2 = en_iyi_2.predict(X_test_sc)\ny_pred_2_real = scaler_y.inverse_transform(y_pred_2)\nprint('R^2:', r2_score(y_pred_2_real,y_test))","fffe8ff4":"plt.figure(figsize=(5,5))\nplt.scatter(x=y_pred_2_real, y=y_test)\nx=[0,55]\ny=[0,55]\nplt.plot(x,y,'--', c='r')\nplt.xlabel('predicted values')\nplt.ylabel('measured values');","e82d5988":"yeni_veri = pd.read_csv('..\/input\/auto-data\/auto_yabanci.csv', header=None)\nyeni_veri.head()\nX_yeni = yeni_veri.iloc[:,1:8]\nX_yeni.head()\nX_yeni_sc = scaler.transform(X_yeni)\ny_yeni = pd.DataFrame(yeni_veri.iloc[:,0])\nX_yeni_sc.shape\ny_yeni.head()","fcb40a1a":"Model_pred = Model.predict(X_yeni_sc)\nModel_pred_real = scaler_y.inverse_transform(Model_pred)\n#Model_pred_real\nModel_R2 = r2_score(Model_pred_real,y_yeni)\nModel_expl_var= explained_variance_score(Model_pred_real,y_yeni)\nModel_max_err=max_error(Model_pred_real,y_yeni)\nModel_mae=mean_absolute_error(Model_pred_real,y_yeni)\nModel_mse=mean_squared_error(Model_pred_real,y_yeni)\nModel_msle = mean_squared_log_error(Model_pred_real,y_yeni)\nModel_med_a_e = median_absolute_error(Model_pred_real,y_yeni)\nModel_mpd=mean_poisson_deviance(Model_pred_real,y_yeni)\nModel_mgd=mean_gamma_deviance(Model_pred_real,y_yeni)","0875e11f":"en_iyi_pred = en_iyi.predict(X_yeni_sc)\nen_iyi_pred_real = scaler_y.inverse_transform(en_iyi_pred)\n#en_iyi_pred_real\nen_iyi_R2 =r2_score(en_iyi_pred_real,y_yeni)\nen_iyi_expl_var= explained_variance_score(en_iyi_pred_real,y_yeni)\nen_iyi_max_err=max_error(en_iyi_pred_real,y_yeni)\nen_iyi_mae=mean_absolute_error(en_iyi_pred_real,y_yeni)\nen_iyi_mse=mean_squared_error(en_iyi_pred_real,y_yeni)\nen_iyi_msle = mean_squared_log_error(en_iyi_pred_real,y_yeni)\nen_iyi_med_a_e = median_absolute_error(en_iyi_pred_real,y_yeni)\nen_iyi_mpd=mean_poisson_deviance(en_iyi_pred_real,y_yeni)\nen_iyi_mgd=mean_gamma_deviance(en_iyi_pred_real,y_yeni)","db0b65e7":"en_iyi_2_pred = en_iyi_2.predict(X_yeni_sc)\nen_iyi_2_pred_real = scaler_y.inverse_transform(en_iyi_2_pred)\n#en_iyi_2_pred_real\nen_iyi_2_R2=r2_score(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_expl_var= explained_variance_score(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_max_err=max_error(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_mae=mean_absolute_error(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_mse=mean_squared_error(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_msle = mean_squared_log_error(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_med_a_e = median_absolute_error(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_mpd=mean_poisson_deviance(en_iyi_2_pred_real,y_yeni)\nen_iyi_2_mgd=mean_gamma_deviance(en_iyi_2_pred_real,y_yeni)","2cb66eb1":"sonuclar1 = pd.concat([pd.DataFrame(Model_pred_real), pd.DataFrame(en_iyi_pred_real), pd.DataFrame(en_iyi_2_pred_real), pd.DataFrame(y_yeni.values)], axis=1)\nsonuclar1.columns = ['Model_Pred_values','en_iyi_pred','en_iyi_2_pred','Measured values']\nsonuclar1","2dfcf51d":"my_eval_Model = hy.evaluator(hy.nse, sonuclar1['Measured values'].values,\n                       sonuclar1['Model_Pred_values'].values, axis=1)\nNSE_Model=my_eval_Model[0]\n\nmy_eval_Model = hy.evaluator(hy.nse, sonuclar1['Measured values'].values,\n                       sonuclar1['en_iyi_pred'].values, axis=1)\nNSE_en_iyi=my_eval_Model[0]\n\nmy_eval_Model = hy.evaluator(hy.nse, sonuclar1['Measured values'].values,\n                       sonuclar1['en_iyi_2_pred'].values, axis=1)\nNSE_en_iyi_2=my_eval_Model[0]","34299c2a":"comparison = pd.DataFrame({'Model_name': ['1. Model', '2. Model', '3. Model'],\n                            'R^2':[Model_R2, en_iyi_R2,en_iyi_2_R2],\n                             'expl_var':[Model_expl_var,en_iyi_expl_var,en_iyi_2_expl_var],\n                             'max err':[Model_max_err,en_iyi_max_err,en_iyi_2_max_err],\n                             'mae':[Model_mae,en_iyi_mae,en_iyi_2_mae],\n                             'mse':[Model_mse,en_iyi_mse,en_iyi_2_mse],\n                             'msle':[Model_msle,en_iyi_msle,en_iyi_2_msle],\n                             'med_a_e':[Model_med_a_e,en_iyi_med_a_e,en_iyi_2_med_a_e],\n                             'mpd':[Model_mpd,en_iyi_mpd,en_iyi_2_mpd],\n                             'mgd':[Model_mgd,en_iyi_mgd,en_iyi_2_mgd],\n                             'NSE':[NSE_Model,NSE_en_iyi,NSE_en_iyi_2]\n                            })\ncomparison","23e98f71":"import matplotlib.pyplot as plt\nfig, axs = plt.subplots(3, figsize=(5,15))\n\naxs[0].scatter(x=Model_pred_real, y=y_yeni)\naxs[0].set_title(\"1. Model\")\naxs[0].plot(x,y,'--', c='r')\naxs[0].set_xlabel('predicted values')\naxs[0].set_ylabel('measured values')\naxs[0].text(0,45,'hidden_layer_sizes=(256, 128, 64, 32), learning_rate=adaptive, learning_rate_init=0.005, max_iter=300, random_state=3');\n\naxs[1].scatter(x=en_iyi_pred_real, y=y_yeni)\naxs[1].set_title(\"2. Model\")\naxs[1].plot(x,y,'--', c='r')\naxs[1].set_xlabel('predicted values')\naxs[1].set_ylabel('measured values')\naxs[1].text(0,45,Izgara_model_11.best_params_)\n\naxs[2].scatter(x=en_iyi_2_pred_real, y=y_yeni)\naxs[2].set_title(\"3. Model\")\naxs[2].plot(x,y,'--', c='r')\naxs[2].set_xlabel('predicted values')\naxs[2].set_ylabel('measured values')\naxs[2].text(0,45,Izgara_2.best_params_);\n\n# bu grafikleri birle\u015ftirelim\n\nplt.figure(figsize=(5,5))\nplt.scatter(x=Model_pred_real, y=y_yeni, c='r', marker='+', alpha=0.4, label='Model')\nplt.scatter(x=en_iyi_2_pred_real, y=y_yeni, c='b', marker='*',alpha=0.4, label='en_iyi_2')\nplt.scatter(x=en_iyi_pred_real, y=y_yeni, c='g',alpha=0.4, label='en_iyi')\nplt.legend()\nx=[10,37]\ny=[10,37]\nplt.plot(x,y,'--', c='r')\nplt.xlabel('predicted values')\nplt.ylabel('measured values');","3d46846d":"### SAVE THE MODEL","08d7d612":"pkl_filename = 'Auto_Regressor.pkl'\nwith open(pkl_filename, 'wb') as file:\n    pickle.dump(Model, file)\n    \nwith open(pkl_filename, 'rb') as file:\n    Auto_Regressor = pickle.load(file)","76cdea43":"predict = Auto_Regressor.predict(X_yeni_sc)\npredict_real = scaler_y.inverse_transform(predict)\npredict_real","8a1807a7":"### APPLICATION OF GRIDSEARCH FOR THE BEST HYPERPARAMETER (SOLVER:SGD)","7e51a63f":"### APPLICATION OF GRIDSEARCH FOR THE BEST HYPERPARAMETER (SOLVER:ADAM OR LBFGS)","e6e1334f":"### MODEL CONSTRUCTION WITH 4 HIDDEN LAYER, ACTIVATION FUNCTION:RELU, SOLVER:ADAM","eb795cfd":"### Now load the unseen data for evaluation of the model","fc097d0a":"### Prediction of miles per gallon with unseen data.\nThe Auto MPG DATA SET is devided into two sets to be able to find the performence of the MLP Regression model with unseen Data (50 data is left outside the model constuction data - auto_yabanci.csv). The model performance is evaluated with different error metrics including Nash-Sutcliffe coefficient. "}}