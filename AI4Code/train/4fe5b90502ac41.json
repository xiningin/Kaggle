{"cell_type":{"bb1ae6a4":"code","dd79c333":"code","64540ef8":"code","b4e41b91":"code","d565687e":"code","78cd7b38":"code","e73dad7f":"code","215afabd":"code","cafc7156":"code","40422ed0":"code","af983d80":"code","167447b6":"code","d90ea546":"code","be2bd6bc":"code","d3f290b9":"code","19a1a8ad":"code","aa1d779f":"code","d8d78a9d":"code","738e99e0":"code","b3133ee6":"code","54d3fd83":"code","4a293988":"code","5f657962":"code","516d6bde":"code","2436c977":"code","33ff38b2":"code","bdf83265":"code","2d8200ae":"code","bba21eb9":"code","ac4ee8be":"code","bb82a6b6":"code","6fb6d69c":"code","45cef5d0":"code","0d7f15c4":"code","88c46af1":"code","6a0a316b":"code","6cbb3b52":"code","2f21d473":"code","b63846b3":"code","40609644":"code","9327723a":"code","5f94cfce":"code","64369499":"code","293f446a":"code","5b70e236":"code","41c1d5b6":"code","6cc0a879":"code","0cc91858":"code","dfe4133a":"code","c4ed1bfd":"code","6f2d887c":"code","c782bae5":"code","5f1ea3f4":"code","a5ae474d":"code","5e85ec09":"markdown","595c174b":"markdown","eba88f06":"markdown","920c2a4f":"markdown","d8da8095":"markdown","abdc338b":"markdown","6244e9aa":"markdown","fea2103e":"markdown","13f4d12d":"markdown","864f0f78":"markdown","57dba897":"markdown","0e67c673":"markdown","3affa709":"markdown","a11a0f58":"markdown","86d91a0a":"markdown","47157eb4":"markdown","d07026a1":"markdown","f51c05c7":"markdown","7ebc5f82":"markdown","7615aade":"markdown","5bc94d48":"markdown","36fbaa0c":"markdown","59b6c9cb":"markdown","36b272f6":"markdown","ce2b89ee":"markdown","809d01af":"markdown","0bf969ce":"markdown","c830489c":"markdown","0809b227":"markdown","7201bd49":"markdown","1b9c8cd7":"markdown","50ce6718":"markdown","8b0f4faa":"markdown","dff26ea8":"markdown","96885907":"markdown","71d3b109":"markdown","82a26e95":"markdown","52a7cd7c":"markdown","95c2cf86":"markdown","7fe58736":"markdown","e04093cb":"markdown","acdb36a1":"markdown","dcae06fe":"markdown","88342cf7":"markdown","d862b770":"markdown","ff5d118f":"markdown","c54c4a07":"markdown","8ca74138":"markdown","313be7c1":"markdown","4ec3f681":"markdown","83d2a3b3":"markdown","3db6f64c":"markdown","53067beb":"markdown"},"source":{"bb1ae6a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport math\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import GridSearchCV\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split, KFold, cross_validate, cross_val_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd79c333":"full_data = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","64540ef8":"full_data.head()","b4e41b91":"print(full_data.columns.unique())\nlen(full_data.columns.unique())","d565687e":"full_data.info()","78cd7b38":"print(full_data.columns[full_data.isna().any()].unique())\nlen(full_data.columns[full_data.isna().any()].unique())","e73dad7f":"full_data['Year'].isna().sum()","215afabd":"full_data['Year'].isna().sum() \/ full_data['Year'].count() * 100","cafc7156":"full_data.loc[full_data['Year'].isna()].head()","40422ed0":"plt.figure(figsize=(15, 10))\nplt.title(\"Years\")\nsns.distplot(a=full_data['Year'])\nplt.show()\n\nfull_data['Year'].value_counts() \/ full_data['Year'].dropna().count() * 100","af983d80":"year_corr = full_data.corr()[\"Year\"]\nyear_corr.abs().sort_values(ascending=False)[1:]","167447b6":"plt.figure(figsize=(15, 10))\nplt.title(\"Platform vs. Year\")\nsns.scatterplot(x=full_data['Platform'], y=full_data['Year'])\nplt.show()","d90ea546":"plt.figure(figsize=(15, 10))\nplt.title(\"Genre vs. Year\")\nsns.scatterplot(x=full_data['Genre'], y=full_data['Year'])\nplt.show()","be2bd6bc":"plt.figure(figsize=(15, 10))\nplt.title(\"Publisher vs. Year\")\nsns.scatterplot(x=full_data['Publisher'], y=full_data['Year'])\nplt.show()","d3f290b9":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nyear_num_features = ['Rank', 'JP_Sales']\nyear_cat_features = ['Publisher', 'Platform']\nyear_features = year_num_features + year_cat_features\n\nnum_transformer = SimpleImputer(strategy=\"constant\")\n\ncat_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"onehot\", OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(transformers=[(\"num\", num_transformer, year_num_features),\n                                               (\"cat\", cat_transformer, year_cat_features)])\n\nyear_X = full_data.dropna()[year_features]\nyear_Y = full_data.dropna()['Year']\n\nyear_X_train, year_X_test, year_y_train, year_y_test = train_test_split(year_X, year_Y, test_size=0.33, random_state=42)","19a1a8ad":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nbase_models = [(\"Ada_model\", AdaBoostClassifier(random_state=42)),\n               (\"RF_model\", RandomForestClassifier(random_state=42)),\n               (\"KN_model\", KNeighborsClassifier())]\n\nkfolds = 4 # 4 = 75% train, 25% validation\nsplit = KFold(n_splits=kfolds, shuffle=True, random_state=42)\n\nfor name, model in base_models:\n    model_steps = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)])\n    \n    model_steps.fit(year_X_train, year_y_train)\n\n    model_preds = model_steps.predict(year_X_test)\n\n    print(f\"{name} accuracy: {accuracy_score(year_y_test, model_preds)}\")","aa1d779f":"final_year_X_train = full_data[full_data['Year'].notnull()][year_features]\nfinal_year_y_train = full_data[full_data['Year'].notnull()][['Year']]\n\nfinal_year_X_test = full_data[full_data['Year'].isnull()][year_features]","d8d78a9d":"model_steps = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', RandomForestClassifier(random_state=42))])\n\nmodel_steps.fit(final_year_X_train, np.ravel(final_year_y_train))\n\nfinal_model_preds = model_steps.predict(final_year_X_test)","738e99e0":"full_data.loc[full_data['Year'].isnull(), 'Year'] = final_model_preds","b3133ee6":"full_data['Year'].isna().sum()","54d3fd83":"full_data['Publisher'].isna().sum()","4a293988":"print(len(full_data['Publisher'].unique()))\nprint(full_data['Publisher'].unique())","5f657962":"full_data.loc[full_data['Publisher'].isna()].head(20)","516d6bde":"full_data.loc[full_data['Publisher'].isna(), 'Publisher'] = 'Unknown'","2436c977":"full_data['Publisher'].isna().sum()","33ff38b2":"plt.figure(figsize=(15, 10))\nplt.title(\"Platforms\")\nsns.countplot(x=full_data['Platform'], order=full_data['Platform'].value_counts().index)\nplt.show()\n\nprint(full_data['Platform'].value_counts() \/ full_data.shape[0] * 100)","bdf83265":"plt.figure(figsize=(35, 10))\nplt.title(\"Year\")\nsns.countplot(x=full_data['Year'], order=full_data['Year'].value_counts().index)\nplt.show()\n\nprint(full_data['Year'].value_counts() \/ full_data.shape[0] * 100)","2d8200ae":"plt.figure(figsize=(15, 10))\nplt.title(\"Genre\")\nsns.countplot(x=full_data['Genre'], order=full_data['Genre'].value_counts().index)\nplt.show()\n\nprint(full_data['Genre'].value_counts() \/ full_data.shape[0] * 100)","bba21eb9":"top_ten = full_data['Publisher'].value_counts().head(10)","ac4ee8be":"plt.figure(figsize=(15, 10))\nplt.title(\"Publisher\")\nsns.countplot(x=full_data['Publisher'], order=top_ten.index)\nplt.show()\n\nprint(top_ten \/ full_data.shape[0] * 100)","bb82a6b6":"plt.figure(figsize=(15, 10))\nplt.title(\"North America Sales\")\nsns.distplot(a=full_data['NA_Sales'], kde=False)\nplt.show()\n\nprint(full_data['NA_Sales'].describe())","6fb6d69c":"plt.figure(figsize=(15, 10))\nplt.title(\"North America Sales\")\nsns.boxplot(x=full_data['NA_Sales'])\nplt.show()\n\nprint(full_data['NA_Sales'].describe())","45cef5d0":"full_data.loc[full_data['NA_Sales'] == 41.49]","0d7f15c4":"plt.figure(figsize=(15, 10))\nplt.title(\"Europe Sales\")\nsns.distplot(a=full_data['EU_Sales'], kde=False)\nplt.show()\n\nprint(full_data['EU_Sales'].describe())","88c46af1":"plt.figure(figsize=(15, 10))\nplt.title(\"Europe Sales\")\nsns.boxplot(x=full_data['EU_Sales'])\nplt.show()\n\nprint(full_data['EU_Sales'].describe())","6a0a316b":"full_data.loc[full_data['EU_Sales'] == 29.02]","6cbb3b52":"plt.figure(figsize=(15, 10))\nplt.title(\"Japan Sales\")\nsns.distplot(a=full_data['JP_Sales'], kde=False)\nplt.show()\n\nprint(full_data['JP_Sales'].describe())","2f21d473":"plt.figure(figsize=(15, 10))\nplt.title(\"Japan Sales\")\nsns.boxplot(x=full_data['JP_Sales'])\nplt.show()\n\nprint(full_data['JP_Sales'].describe())","b63846b3":"full_data.loc[full_data['JP_Sales'] == 10.22]","40609644":"plt.figure(figsize=(15, 10))\nplt.title(\"Other Sales\")\nsns.distplot(a=full_data['Other_Sales'], kde=False)\nplt.show()\n\nprint(full_data['Other_Sales'].describe())","9327723a":"plt.figure(figsize=(15, 10))\nplt.title(\"Other Sales\")\nsns.boxplot(x=full_data['Other_Sales'])\nplt.show()\n\nprint(full_data['Other_Sales'].describe())","5f94cfce":"full_data.loc[full_data['Other_Sales'] == 10.57]","64369499":"plt.figure(figsize=(15, 10))\nplt.title(\"Global Sales\")\nsns.distplot(a=full_data['Global_Sales'], kde=False)\nplt.show()\n\nprint(full_data['Global_Sales'].describe())","293f446a":"plt.figure(figsize=(15, 10))\nplt.title(\"Global Sales\")\nsns.boxplot(x=full_data['Global_Sales'])\nplt.show()\n\nprint(full_data['Global_Sales'].describe())","5b70e236":"full_data.loc[full_data['Global_Sales'] == 82.74]","41c1d5b6":"plt.figure(figsize=(35, 10))\nplt.title(\"Year\")\nsns.scatterplot(x=full_data['Year'], y=full_data['Global_Sales'])\nplt.show()","6cc0a879":"plt.figure(figsize=(35, 10))\nplt.title(\"Platform\")\nsns.barplot(x=full_data['Platform'], y=full_data['Global_Sales'])\nplt.show()\n\nfor plat in full_data['Platform'].unique():\n    print(plat, \" \", full_data.loc[full_data['Platform'] == plat, 'Global_Sales'].median())","0cc91858":"plt.figure(figsize=(35, 10))\nplt.title(\"Genre\")\nsns.barplot(x=full_data['Genre'], y=full_data['Global_Sales'])\nplt.show()\n\nfor genr in full_data['Genre'].unique():\n    print(genr, \" \", full_data.loc[full_data['Genre'] == genr, 'Global_Sales'].median())","dfe4133a":"sale_pbl = full_data[['Publisher', 'Global_Sales']]\nsale_pbl = sale_pbl.groupby('Publisher')['Global_Sales'].sum().sort_values(ascending=False).head(20)\nsale_pbl = pd.DataFrame(sale_pbl).reset_index()\n# sale_pbl","c4ed1bfd":"plt.figure(figsize=(15, 10))\nsns.barplot(x='Publisher', y='Global_Sales', data=sale_pbl)\nplt.xticks(rotation=90)","6f2d887c":"num_features = []\ncat_features = ['Platform', 'Genre', 'Publisher']\n\nfeatures = num_features + cat_features\nX = full_data.drop([\"Global_Sales\"], axis=1)[features]\ny = full_data[\"Global_Sales\"]\n\nnum_transformer = SimpleImputer(strategy=\"constant\")\n\ncat_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"onehot\", OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(transformers=[(\"num\", num_transformer, num_features),\n                                               (\"cat\", cat_transformer, cat_features)])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","c782bae5":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\nbase_models = [(\"DT_model\", DecisionTreeRegressor(random_state=42)),\n               (\"RF_model\", RandomForestRegressor(random_state=42,n_jobs=-1)),\n               (\"GB_model\", GradientBoostingRegressor(random_state=42)),\n               (\"Ada_model\", AdaBoostRegressor(random_state=42)),\n               (\"KNN_model\", KNeighborsRegressor(n_jobs=-1))]\n\nkfolds = 4 # 4 = 75% train, 25% validation\nsplit = KFold(n_splits=kfolds, shuffle=True, random_state=42)\n\nfor name, model in base_models:\n    model_steps = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)])\n    \n    model_steps.fit(X_train, y_train)\n\n    model_preds = model_steps.predict(X_test)\n\n    print(f\"{name} mean squared error result: {mean_squared_error(y_test, model_preds)}\")","5f1ea3f4":"param_grid = { \n    'n_estimators': [100, 500, 1000],\n    'max_depth' : [3, 5, 8, None],\n    'max_features': ['auto', 'sqrt', 'log2']\n}","a5ae474d":"final_RF_model = RandomForestRegressor(random_state=42, n_estimators=100, max_depth=None, max_features='auto')\n\nmodel_steps = Pipeline(steps=[('preprocessor', preprocessor), ('model', final_RF_model)])\n\nmodel_steps.fit(X_train, y_train)\n\nmodel_preds = model_steps.predict(X_test)\n\nprint(\"Mean Squared Error: \", mean_squared_error(y_test, model_preds))","5e85ec09":"**Sales in the rest of the world**","595c174b":"**Publisher**\n\nSince there are too many publishers, let's just focus on the top 10 most popular publishers.","eba88f06":"Wii Sports it is. Also, this is actually the #1 game in the rank! No wonder why the game is this popular in North America.","920c2a4f":"So we see that the most popular platforms are like DS, PS2, PS3, PC, and etc. This follows our expectations.","d8da8095":"Now we have looked at the data, I begin to be curious about what factors will affect the global sales of a game. Obviously when predicting about this, we cannot use any of the region sale information or the rank as parameters for our model because that is data leakage. Therefore, we are left to only the Platform, Year, Genre, and Publisher columns. So I say let's now work on making a prediction of the global sales based on these four columns and see how accurate the prediction is.","abdc338b":"**Sales in North America**","6244e9aa":"# Univariate Data Analysis\n\nNow we have take a quick look at the data. I say we can see more distributions of variables regarding video game sales. (Rank and names obviously don't need to be examined individually)","fea2103e":"**Sales in Europe**","13f4d12d":"I don't want to drop data, so here I will just give them a Publisher value of 'Unknown'","864f0f78":"This shows that the most popular genres are action and sports. Again, this kinda follows our expectations. Action games are usually the most popular kind.","57dba897":"**Publisher**","0e67c673":"Wow! This time it is not Wii Sport! It is actually Pokemon Red\/Blue! This is actually a surprise to me. I would though that since Wii Sport is the number 1 game and is from Japan, Wii Sport would be the number 1 at Japan too. I guess this is the beauty of data analysis.","3affa709":"We see that most games were released around 2010, which I think is partly due to the time this dataset was collected and partly because that time period was when devices like computer or game station really gained popularity.","a11a0f58":"Again, small association between the genre of the game and the global sales. However, still not a significant association.","86d91a0a":"**Global Sales**","47157eb4":"So now there seems to be a little trend. It seems like games on platforms like Wii, NES, GB do have a higher global sales comparing to games on platforms like SAT. It is very likely that since devices like Wii are more popular, people are more likely to invest money on games that are on these platforms. ","d07026a1":"**Publisher vs. Global Sales**","f51c05c7":"**Year vs. Global Sales**","7ebc5f82":"Still right-skewed, and the game that has the most sale is:","7615aade":"**Genre**","5bc94d48":"OK, so we see that the sales in North America is highly right-skewed. Most companies will not even make a million sales in NA, but there is a game that sold 41.49 million times! I wonder what game that is. Let's check out.","36fbaa0c":"Since Random Forest has the best performance, let's fill missing values using the year it predicts","59b6c9cb":"Since only 1.6% of the data has missing values, I think it is OK to fill the missing value. So let's take a deeper look at the data and how we can impute missing values.","36b272f6":"# Introduction\n\nHello everyone! This is my data analysis with the video game sales dataset. I am actually very excited to explore more about this dataset because I am myself a video game fan. So let's load the data and take a quick look!","ce2b89ee":"**Genre vs. Global Sales**","809d01af":"OK, so we see that this dataset contains 11 columns of information.\n\n\n**The columns are:**\n\n* Rank - Ranking of overall sales, integer\n\n* Name - The games name\n\n* Platform - Platform of the games release (i.e. PC,PS4, etc.), object\n\n* Year - Year of the game's release, float\n\n* Genre - Genre of the game ,object\n\n* Publisher - Publisher of the game, object\n\n* NA_Sales - Sales in North America (in millions), float\n\n* EU_Sales - Sales in Europe (in millions), float\n\n* JP_Sales - Sales in Japan (in millions), float\n\n* Other_Sales - Sales in the rest of the world (in millions), float\n\n* Global_Sales - Total worldwide sales, float\n\n\nWe also see that two of the columns contain missing values. Let's take a quick look at these two columns.","0bf969ce":"# Model","c830489c":"After tuning parameters, I found the default parameters actually have the lowest error. So the final performance of our model is a 3.17 mean squred error when predicting global sales for a video game.","0809b227":"So these are the performances of baseline models. From the results we can see Random Forest is again the best baseline model.","7201bd49":"# Define the Question","1b9c8cd7":"Now the global sales is shown. Again, it is visualized, and the game with the most sales is Wii Sport, which is indeed ranked #1 in our dataset.","50ce6718":"**Year**","8b0f4faa":"**Genre**","dff26ea8":"The platform seems to be an indication of the year because there are platforms that didn't release games during the 1980s. So I will include this feature as an input to the model.","96885907":"**Platform**","71d3b109":"**Sales in Japan**","82a26e95":"Since there is not a single year that is very common, I will not fill missing values with the median or something similar. Instead, let's see if we can use a classifier to predict missing values. First, let's see which columns are most correlated with Years:","52a7cd7c":"So Rank and JP_Sales are the two numerical variables that are correlated with Year. Let's now see if there are categorical variables that are correlated:","95c2cf86":"The publisher also seems to have an effect on the global sales. Essentially, companies like Nintendo or EA are more likely to make games that have high sales. ","7fe58736":"Now we have successfully filled the missing values in Year using predictions from a Random Forest Classifier.","e04093cb":"# Other Parameters vs. Global Sales\n\nNow since we are curious in how other parameters may affect the final global sales, let's actually visualize the associations between global sales and other parameters we are interested in. ","acdb36a1":"OK, now for the other parts of the world, GTA San Andreas is actully the most sold game. Again, an interesting thing to learn. ","dcae06fe":"**Publisher**","88342cf7":"**Platform**","d862b770":"So basically the companies that sell the most amount of games are like EA, Activision, NBG, Ubisoft, and others. These companies are indeed the most famous ones out there.","ff5d118f":"I cannot see a trend here. It seems like each year there are games with every genre created.","c54c4a07":"Well, it is again Wii Sports.","8ca74138":"Again, the distribution is highly right skewed. This again indicates that the video game market is somewhat an oligopoly. Most companies will only have a small share in the market, but there are a few that will sell exponentially more. Also, let's check which game has the most sales in Europe. ","313be7c1":"Although not very clear, we can see that certain publishers never released games during 1980s. So publisher perhaps can also be an useful variable to add to our model.","4ec3f681":"**Platform vs. Global Sales**","83d2a3b3":"In conclusion, among these four parameters, it seems like the Year doesn't have a huge impact on the global sale, but the other three parameters all have an impact to certain extent. ","3db6f64c":"There isn't really an association between the year and the global sales of games. It is shown that most games would only make minimal global sales despite which year it is. So the global sale isn't really something that depends on the time.","53067beb":"**Year**"}}