{"cell_type":{"8b3fe03d":"code","63cb6ffc":"code","026eff51":"code","7a780506":"code","4c16b5fc":"code","621e8b54":"code","eb3d4741":"code","78f750e1":"code","e06a9354":"code","0b54676b":"code","89a9c8eb":"code","322970e4":"code","8857f94c":"code","89dcf76f":"code","1fc66471":"code","99774787":"code","ffe4d7c8":"code","a67a4214":"code","808ddf81":"code","272c36fc":"code","166d308a":"code","beb68692":"code","83d8a4b8":"code","f96987c0":"code","c3bcb4f3":"code","a1c90438":"code","e4c5eaa7":"code","4a77a441":"code","013a227e":"code","a03189b8":"code","49465ec4":"markdown","545c6bf4":"markdown","e47d8cff":"markdown","38a89af2":"markdown","38dbf2a6":"markdown","61e703ed":"markdown","36861e30":"markdown","708e0ef1":"markdown","fbc15d98":"markdown","0c1b14ba":"markdown","e8be8059":"markdown","c41e3f15":"markdown","668fabd3":"markdown","4c5abc29":"markdown","9e2634b6":"markdown","1a594e94":"markdown","2f238b8a":"markdown","82b941a6":"markdown","40ec7b3c":"markdown","6ce32f7c":"markdown","55135d9b":"markdown","39f74835":"markdown","7cc1f3a3":"markdown","70a4d705":"markdown","069cd918":"markdown","ed598e28":"markdown","1b41a18b":"markdown","b01ebb77":"markdown","6f3443a7":"markdown"},"source":{"8b3fe03d":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nfor planet in planets:\n    print(planet, end=' ') # print all on same line","63cb6ffc":"planets = ['Mercury','Venus','Earth','Mars','Jupiter','Saturn','Uranus','Neptune']\nfor planet in planets:\n    print(planet,end=' ')","026eff51":"multiplicands = (2, 2, 2, 3, 3, 5)\nproduct = 1\nfor mult in multiplicands:\n    product = product * mult\nproduct","7a780506":"multiplicands = 2,2,2,3,3,5\nproduct = 1\nfor mult in multiplicands:\n    product = product * mult\nproduct","4c16b5fc":"s = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'\nmsg = ''\n# print all the uppercase letters in s, one at a time\nfor char in s:\n    if char.isupper():\n        print(char, end='')        ","621e8b54":"s = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'\nfor char in s:\n    if char.isupper():\n        print(char,end='')","eb3d4741":"for i in range(5):\n    print(\"Doing important work. i =\", i)","78f750e1":"r = range(5)\nr","e06a9354":"help(range)","0b54676b":"list(range(5))","89a9c8eb":"nums = [1, 2, 4, 8, 16]\nfor i in range(len(nums)):\n    nums[i] = nums[i] * 2\nnums","322970e4":"nums = [1,2,4,8,16]\nfor i in range(len(nums)):\n    nums[i] = nums[i] * 2\nnums","8857f94c":"def double_odds(nums):\n    for i, num in enumerate(nums):\n        if num % 2 == 1:\n            nums[i] = num * 2\n\nx = list(range(10))\ndouble_odds(x)\nx","89dcf76f":"list(enumerate(['a', 'b']))","1fc66471":"x = 0.125\nnumerator, denominator = x.as_integer_ratio()","99774787":"x = 0.125\nnumerator,denominator = x.as_integer_ratio()","ffe4d7c8":"nums = [\n    ('one', 1, 'I'),\n    ('two', 2, 'II'),\n    ('three', 3, 'III'),\n    ('four', 4, 'IV'),\n]\n\nfor word, integer, roman_numeral in nums:\n    print(integer, word, roman_numeral, sep=' = ', end='; ')","a67a4214":"nums = [\n    ('one',1,'I'),\n    ('two',2,'II'),\n    ('three',3,'III'),\n    ('four',4,'IV'),\n]\nfor word,integer,roman_numeral in nums:\n    print(integer,word,roman_numeral, sep=' = ', end=' ; ')","808ddf81":"for tup in nums:\n    word = tup[0]\n    integer = tup[1]\n    roman_numeral = tup[2]\n    print(integer, word, roman_numeral, sep=' = ', end='; ')","272c36fc":"for tup in nums:\n    word = tup[0]\n    integer = tup[1]\n    roman_numeral = tup[2]\n    print(integer,word,roman_numeral, sep=' = ', end='; ')","166d308a":"i = 0\nwhile i < 10:\n    print(i, end=' ')\n    i += 1","beb68692":"squares = [n**2 for n in range(10)]\nsquares","83d8a4b8":"squares = []\nfor n in range(10):\n    squares.append(n**2)\nsquares","f96987c0":"short_planets = [planet for planet in planets if len(planet) < 6]\nshort_planets","c3bcb4f3":"# str.upper() returns an all-caps version of a string\nloud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]\nloud_short_planets","a1c90438":"[\n    planet.upper() + '!' \n    for planet in planets \n    if len(planet) < 6\n]","e4c5eaa7":"[32 for planet in planets]","4a77a441":"def count_negatives(nums):\n    \"\"\"Return the number of negative numbers in the given list.\n    \n    >>> count_negatives([5, -1, -2, 0, 3])\n    2\n    \"\"\"\n    n_negative = 0\n    for num in nums:\n        if num < 0:\n            n_negative = n_negative + 1\n    return n_negative","013a227e":"def count_negatives(nums):\n    return len([num for num in nums if num < 0])","a03189b8":"def count_negatives(nums):\n    # Reminder: in the \"booleans and conditionals\" exercises, we learned about a quirk of \n    # Python where it calculates something like True + True + False + True to be equal to 3.\n    return sum([num < 0 for num in nums])","49465ec4":"We can see that that the things we were iterating over are tuples. This helps explain that `for i, num` syntax. We're \"unpacking\" the tuple, just like in this example from the previous tutorial:","545c6bf4":"(Continuing the SQL analogy, you could think of these three lines as SELECT, FROM, and WHERE)\n\nThe expression on the left doesn't technically have to involve the loop variable (though it'd be pretty unusual for it not to). What do you think the expression below will evaluate to? Press the 'output' button to check. ","e47d8cff":"We can use this unpacking syntax any time we iterate over a collection of tuples.","38a89af2":"# Your Turn\n\nTry the [hands-on exercise](https:\/\/www.kaggle.com\/kernels\/fork\/1275177) with loops and list comprehensions\n","38dbf2a6":"(If you're familiar with SQL, you might think of this as being like a \"WHERE\" clause)\n\nHere's an example of filtering with an `if` condition *and* applying some transformation to the loop variable:","61e703ed":"List comprehensions combined with some of the functions we've seen like `min`, `max`, `sum`, `len`, and `sorted`, can lead to some pretty impressive one-line solutions for problems that would otherwise require several lines of code. \n\nFor example, [the last exercise](https:\/\/www.kaggle.com\/kernels\/fork\/1275173) included a brainteaser asking you to write a function to count the number of negative numbers in a list *without using loops* (or any other syntax we hadn't seen). Here's how we might solve the problem now that we have loops in our arsenal:\n","36861e30":"You might assume that `range(5)` returns the list `[0, 1, 2, 3, 4]`. The truth is a little bit more complicated:","708e0ef1":"### range()\n\n`range()` is a function that returns a sequence of numbers. It turns out to be very useful for writing loops.\n\nFor example, if we want to repeat some action 5 times:","fbc15d98":"Note that the range starts at zero, and that by convention the top of the range is not included in the output. `range(5)` gives the numbers from 0 up to *but not including* 5. \n\nThis may seem like a strange way to do things, but the documentation (accessed via `help(range)`) alludes to the reasoning when it says:\n\n> `range(4)` produces 0, 1, 2, 3.  These are exactly the valid indices for a list of 4 elements.  \n\nSo for any list `L`, `for i in range(len(L)):` will iterate over all its valid indices.","0c1b14ba":"Which of these solutions is the \"best\" is entirely subjective. Solving a problem with less code is always nice, but it's worth keeping in mind the following lines from [The Zen of Python](https:\/\/en.wikipedia.org\/wiki\/Zen_of_Python):\n\n> Readability counts.  \n> Explicit is better than implicit.\n\nThe last definition of `count_negatives` might be the shortest, but will other people reading your code understand how it works? \n\nWriting Pythonic code doesn't mean never using for loops!","e8be8059":"# Loops\n\nLoops are a way to repeatedly execute some code statement.","c41e3f15":"This is equivalent to the following (more tedious) code:","668fabd3":"Just as we can use `int()`, `float()`, and `bool()` to convert objects to another type, we can use `list()` to convert a list-like thing into a list, which shows a more familiar (and useful) representation:","4c5abc29":"This is the classic way of iterating over the indices of a list or other sequence.\n\n> **Aside**: `for i in range(len(L)):` is analogous to constructs like `for (int i = 0; i < L.length; i++)` in other languages.","9e2634b6":"## ``while`` loops\nThe other type of loop in Python is a ``while`` loop, which iterates until some condition is met:","1a594e94":"The argument of the ``while`` loop is evaluated as a boolean statement, and the loop is executed until the statement evaluates to False.","2f238b8a":"We can also add an `if` condition:","82b941a6":"## List comprehensions\n\nList comprehensions are one of Python's most beloved and unique features. The easiest way to understand them is probably to just look at a few examples:","40ec7b3c":"`range` returns a \"range object\". It acts a lot like a list (it's iterable), but doesn't have all the same capabilities. As we saw in the [previous tutorial](https:\/\/www.kaggle.com\/colinmorris\/lists), we can call `help()` on an object like `r` to see Python's documentation on that object, including all of its methods. Click the 'output' button if you're curious about what the help page for a range object looks like.","6ce32f7c":"**[Python Course Home Page](https:\/\/www.kaggle.com\/learn\/python)**\n\n---\n","55135d9b":"### `enumerate`\n\n`for foo in x` loops over the elements of a list and `for i in range(len(x))` loops over the indices of a list. What if you want to do both?\n\nEnter the `enumerate` function, one of Python's hidden gems:","39f74835":"Notice the simplicity of the ``for`` loop: we specify the variable we want to use, the sequence we want to loop over, and use the \"``in``\" keyword to link them together in an intuitive and readable way.\n\nThe object to the right of the \"``in``\" can be any object that supports iteration. Basically, if it can be thought of as a sequence or collection of things, you can probably loop over it. In addition to lists, we can iterate over the elements of a tuple:","7cc1f3a3":"Much better, right?\n\nWell if all we care about is minimizing the length of our code, this third solution is better still!","70a4d705":"Here's a solution using a list comprehension:","069cd918":"Here's how we would do the same thing without a list comprehension:","ed598e28":"---\n**[Python Course Home Page](https:\/\/www.kaggle.com\/learn\/python)**\n\n","1b41a18b":"People usually write these on a single line, but you might find the structure clearer when it's split up over 3 lines:","b01ebb77":"Given a list, `enumerate` returns an object which iterates over the indices *and* the values of the list.\n\n(Like the `range()` function, it returns an iterable object. To see its contents as a list, we can call `list()` on it.)","6f3443a7":"And even iterate over each character in a string:"}}