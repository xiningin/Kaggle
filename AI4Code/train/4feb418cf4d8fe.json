{"cell_type":{"8a482157":"code","8baca9a3":"code","59831df1":"code","57383b93":"code","483f6942":"code","d48be047":"code","7bf16a65":"code","445ba248":"code","6ecb18c3":"code","2b3a8cab":"markdown","b7f95bc9":"markdown","7a8ecc2d":"markdown","80a80eb3":"markdown","b3d693f5":"markdown","89433318":"markdown","3840eb32":"markdown","d63252c5":"markdown","4d3bc16d":"markdown","a9ad472b":"markdown"},"source":{"8a482157":"def minimax_agent(obs, config):\n    import random\n    import numpy as np\n    \n    print(\"Step {}: MiniMax Agent moving\".format(obs.step))\n\n    # Gets board at next step if agent drops piece in selected column\n    def drop_piece(grid, col, mark, config):\n        next_grid = grid.copy()\n        for row in range(config.rows-1, -1, -1):\n            if next_grid[row][col] == 0:\n                break\n        next_grid[row][col] = mark\n        return next_grid\n\n    # Helper function for get_heuristic: checks if window satisfies heuristic conditions\n    def check_window(window, num_discs, piece, config):\n        return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)\n\n    # Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\n    def count_windows(grid, num_discs, piece, config):\n        num_windows = 0\n        # horizontal\n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[row, col:col+config.inarow])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(grid[row:row+config.inarow, col])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1   \n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        return num_windows\n                \n    # Helper function for minimax: calculates value of heuristic for grid\n    def get_heuristic(grid, mark, config):\n        num_threes = count_windows(grid, 3, mark, config)\n        num_fours = count_windows(grid, 4, mark, config)\n        num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n        num_fours_opp = count_windows(grid, 4, mark%2+1, config)\n        score = num_threes - 1e2*num_threes_opp - 1e4*num_fours_opp + 1e6*num_fours\n        return score\n    \n    # Uses minimax to calculate value of dropping piece in selected column\n    def score_move(grid, col, mark, config, nsteps):\n        next_grid = drop_piece(grid, col, mark, config)\n        score = minimax(next_grid, nsteps-1, False, mark, config)\n        return score\n\n    # Helper function for minimax: checks if agent or opponent has four in a row in the window\n    def is_terminal_window(window, config):\n        return window.count(1) == config.inarow or window.count(2) == config.inarow\n\n    # Helper function for minimax: checks if game has ended\n    def is_terminal_node(grid, config):\n        # Check for draw \n        if list(grid[0, :]).count(0) == 0:\n            return True     \n        # Check for win: horizontal, vertical, or diagonal\n        # horizontal \n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[row, col:col+config.inarow])\n                if is_terminal_window(window, config):\n                    return True\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(grid[row:row+config.inarow, col])\n                if is_terminal_window(window, config):\n                    return True              \n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                if is_terminal_window(window, config):\n                    return True\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                if is_terminal_window(window, config):\n                    return True\n        return False\n\n    # Minimax implementation\n    def minimax(node, depth, maximizingPlayer, mark, config):\n        is_terminal = is_terminal_node(node, config)\n        valid_moves = [c for c in range(config.columns) if node[0][c] == 0]\n        if depth == 0 or is_terminal:\n            return get_heuristic(node, mark, config)\n        if maximizingPlayer:\n            value = -np.Inf\n            for col in valid_moves:\n                child = drop_piece(node, col, mark, config)\n                value = max(value, minimax(child, depth-1, False, mark, config))\n            return value\n        else:\n            value = np.Inf\n            for col in valid_moves:\n                child = drop_piece(node, col, mark%2+1, config)\n                value = min(value, minimax(child, depth-1, True, mark, config))\n            return value\n\n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    # Use the heuristic to assign a score to each possible board in the next step\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config, 3) for col in valid_moves]))\n    print(\"Scores:\", scores, end=' - ')\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    # Select at random from the maximizing columns\n    move = random.choice(max_cols)\n    print(\"Selected move:\", move)\n    return move","8baca9a3":"def alphabeta_agent(obs, config):\n    import random\n    import numpy as np\n    \n    print(\"Step {}: AphaBeta Agent moving\".format(obs.step))\n\n    # Gets board at next step if agent drops piece in selected column\n    def drop_piece(grid, col, mark):\n        next_grid = grid.copy()\n        for row in range(config.rows-1, -1, -1):\n            if next_grid[row][col] == 0:\n                break\n        next_grid[row][col] = mark\n        return next_grid\n\n    # Get the number of pieces of the same mark in a window\n    def pieces_in_window(window, piece):\n        return window.count(piece) * (window.count(piece) + window.count(0) == config.inarow)\n    \n    # Counts number of pieces for both players for every possible window\n    def count_windows(grid):\n        windows = {piece: [0 for i in range(config.inarow+1)] for piece in [1, 2]}\n        \n        # horizontal\n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[row, col:col+config.inarow])\n                windows[1][pieces_in_window(window, 1)]+=1\n                windows[2][pieces_in_window(window, 2)]+=1\n\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(grid[row:row+config.inarow, col])\n                windows[1][pieces_in_window(window, 1)]+=1\n                windows[2][pieces_in_window(window, 2)]+=1\n\n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                windows[1][pieces_in_window(window, 1)]+=1\n                windows[2][pieces_in_window(window, 2)]+=1\n\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                windows[1][pieces_in_window(window, 1)]+=1\n                windows[2][pieces_in_window(window, 2)]+=1\n        return windows\n                \n    # Calculates value of heuristic for grid\n    def get_heuristic(grid, mark):\n        windows=count_windows(grid)\n        score =  windows[mark][1] + windows[mark][2]*3 + windows[mark][3]*9 + windows[mark][4]*81 - windows[mark%2+1][1] - windows[mark%2+1][2]*3 - windows[mark%2+1][3]*9 - windows[mark%2+1][4]*81\n        return score\n    \n    # Uses alphabeta to calculate value of dropping piece in selected column\n    def score_move(grid, col, mark, nsteps):\n        next_grid = drop_piece(grid, col, mark)\n        score = alphabeta(next_grid, nsteps-1, -np.Inf, np.Inf, False, mark)\n        return score\n\n    # Checks if game has ended\n    def is_terminal_node(grid):\n        windows=count_windows(grid)\n        return windows[1][config.inarow] + windows[2][config.inarow] > 0\n\n    # Alpha Beta pruning implementation\n    def alphabeta(node, depth, a, b, maximizingPlayer, mark):\n        is_terminal = is_terminal_node(node)\n        valid_moves = [c for c in range(config.columns) if node[0][c] == 0]\n        if depth == 0 or is_terminal:\n            return get_heuristic(node, mark)\n        if maximizingPlayer:\n            value = -np.Inf\n            for col in valid_moves:\n                child = drop_piece(node, col, mark)\n                value = max(value, alphabeta(child, depth-1, a, b, False, mark))\n                a = max(a, value)\n                if a >= b:\n                    break # \u03b2 cutoff\n            return value\n        else:\n            value = np.Inf\n            for col in valid_moves:\n                child = drop_piece(node, col, mark%2+1)\n                value = min(value, alphabeta(child, depth-1, a, b, True, mark))\n                b = min(b, value)\n                if b <= a:\n                    break # \u03b1 cutoff\n            return value\n\n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    n_steps = 4 if obs.board.count(0)>len(obs.board)*2\/3 else 5 if obs.board.count(0)>len(obs.board)\/3 else 6\n    # Use the heuristic to assign a score to each possible board in the next step\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, n_steps) for col in valid_moves]))\n    print(\"Scores:\", scores, end=' - ')\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    # Select at random from the maximizing columns\n    move = random.choice(max_cols)\n    print(\"Selected move:\", move)\n    return move","59831df1":"from kaggle_environments import make, evaluate\n\n# Create the game environment\nenv = make(\"connectx\", debug=True)\n\n# Two random agents play one game round\nenv.run([minimax_agent, alphabeta_agent])\n\n# Print debug messages\nstatus = \"Agent 1 won!\" if env.state[0].reward==1 else \"Agent 2 won!\" if env.state[1].reward==1 else \"It's a tie.\"\nenv.debug_print(\"The match is over: \" + status)","57383b93":"# Show the game\nenv.render(mode=\"ipython\")","483f6942":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    import time\n    from joblib import Parallel, delayed\n    from kaggle_environments import evaluate\n    import multiprocessing as mp\n \n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    \n    cores = mp.cpu_count()\n    half_rounds_per_core = n_rounds \/\/ cores \/\/ 2\n\n    def evaluate_per_core(half_rounds):\n        outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], half_rounds)\n        outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], half_rounds)]\n        return outcomes  \n    \n    start_time=time.time()\n    results = Parallel(n_jobs=mp.cpu_count())(delayed(evaluate_per_core)(half_rounds_per_core) for i in range(cores))\n    total_time=time.time()-start_time\n\n    outcomes = [result for results_per_job in results for result in results_per_job]\n\n    print(\"In total, {} episodes have been evaluated using {} CPU's cores.\".format(len(outcomes), cores))\n    print(\"Total time: {:.2f} minutes ({:.2f} seconds per match on average)\".format(total_time\/60, total_time\/n_rounds))\n    print(\"Agent 1 Won: {:.2%}\".format(outcomes.count([1,-1])\/len(outcomes)))\n    print(\"Agent 2 Won: {:.2%}\".format(outcomes.count([-1,1])\/len(outcomes)))\n    print(\"Ties:        {:.2%}\".format(outcomes.count([0,0])\/len(outcomes)))\n    print(\"Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Invalid Plays by Agent 2:\", outcomes.count([0, None]))","d48be047":"get_win_percentages(agent1=\"random\", agent2=\"negamax\", n_rounds=20)","7bf16a65":"get_win_percentages(agent1=\"negamax\", agent2=minimax_agent, n_rounds=20)","445ba248":"get_win_percentages(agent1=minimax_agent, agent2=alphabeta_agent, n_rounds=20)","6ecb18c3":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(alphabeta_agent, \"alpha-beta_agent.py\")","2b3a8cab":"## Test Agents one against the other","b7f95bc9":"### Agent `negamax` VS MiniMax 3-step Lookahead Agent","7a8ecc2d":"## Create file for submission","80a80eb3":"Note: `alphabeta_agen` may generate some invalid plays because it runs out of time, but the competition server is faster.","b3d693f5":"### MiniMax 3-step Lookahead Agent VS Alpha-beta pruning 4-step Lookahead Agent\n","89433318":"## Alpha-beta pruning 4-Steps Lookahead Agent","3840eb32":"### Get win percentages against `random` agent","d63252c5":"### Agent `random` VS Agent `negamax`","4d3bc16d":"# Introduction\n\nThis notebook is based con the exercise [Exercise: N-Step Lookahead](https:\/\/www.kaggle.com\/alexisbcook\/exercise-n-step-lookahead) from the course [Intro to Game AI and Reinforcement Learning](https:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning) by [Alexis Cook](https:\/\/www.kaggle.com\/alexisbcook).\n\nIt improves on the provided code implementing the [Alpha-Beta pruning](https:\/\/en.wikipedia.org\/wiki\/Alpha\u2013beta_pruning) algorithm. \n\n**In version 2 of this notebook** I also improved the algorithm evaluating the board. Now it counts in the same pass all the combination of valid windows for both players. As a result it is 37% faster than version 1, and richer and better heuristics were also implemented.\n\nTo avoid timeout errors in the ConnectX competition server the agent starts with 4-step lookahead and increase to 5 and 6-step lookahead later in the game.\n\nThe MiniMax agent 3-steps lookahead is also provided for comparison and testing.","a9ad472b":"## MiniMax 3-Steps Lookahead Agent"}}