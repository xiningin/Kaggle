{"cell_type":{"b1b803ac":"code","3d354f31":"code","381b68ce":"code","2d85ba94":"code","a5b4e776":"code","7bab56af":"code","11001db3":"code","b0fde821":"code","3e2327b0":"code","3a154527":"code","7e36524e":"code","ee90c5c9":"code","9fb32148":"code","6c3ec6e9":"code","65a9b18f":"code","68e46803":"code","4134550e":"code","081f1ef1":"code","6c2d47e9":"code","d7ec15c9":"code","858ba1a5":"code","0f299137":"code","1a80599c":"code","4680fdcf":"code","87123a42":"code","f6225038":"code","3f3efe39":"code","565e917a":"code","dc35d4bf":"code","8557faad":"code","a9b057b9":"code","1a48c970":"code","f1c8c980":"code","3388ebaf":"code","41e9cb40":"code","ca134576":"code","bb2a351d":"code","8fc077b7":"code","751271e1":"code","c68c2e3a":"code","3ba47b24":"code","17e5e07f":"code","210c433b":"code","5ee54dcd":"code","9ea27701":"code","d2ca0ae7":"code","ee61826f":"code","dcffcad7":"code","838de7f8":"code","485003d3":"code","80919b74":"code","5cd5ad32":"code","e3e41755":"code","95a1f65f":"code","3f483a17":"code","acce1485":"code","519d5701":"code","4b8b50fa":"code","222b57b6":"code","546c18ef":"code","354c581d":"code","4944f0f0":"code","9d324f85":"code","d33662c8":"code","c4ad75de":"markdown","045da9ac":"markdown","c3e5d383":"markdown","c2720bcd":"markdown","25b7640f":"markdown","a3a891a5":"markdown","fc5cfabb":"markdown","ec1cf32d":"markdown","de91f530":"markdown","4e002364":"markdown","b44b774c":"markdown","836d10c8":"markdown","8fedba9b":"markdown","15cb76bb":"markdown","8a0d75b3":"markdown","ea78781b":"markdown","55c09e84":"markdown","c1a3526f":"markdown","b5759e62":"markdown","d25d188e":"markdown","3e2a7da5":"markdown","41d8d7e0":"markdown","2514c2e9":"markdown","cce63934":"markdown","c9e74f04":"markdown","a9063f34":"markdown","bc7f11ad":"markdown","22c94088":"markdown","1e51ec98":"markdown","b093c26e":"markdown","c05f1b84":"markdown","4177c051":"markdown","622d1846":"markdown","619375b6":"markdown","90b50987":"markdown","b0715502":"markdown","a2294134":"markdown","393cf03f":"markdown","45ab5516":"markdown","63f5f234":"markdown","7dce8e68":"markdown","3a139324":"markdown","6b10a52d":"markdown"},"source":{"b1b803ac":"# Importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","3d354f31":"train_data = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ntest_data = pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')","381b68ce":"train_data.info()","2d85ba94":"train_data.head()","a5b4e776":"train_data.tail()","7bab56af":"train_data = train_data.iloc[:,1:]\ntrain_data.head()","11001db3":"train_data.describe()","b0fde821":"train_data.shape","3e2327b0":"train_data['Kilometers_Driven'].value_counts()","3a154527":"# Looking ate the unique values of Categorical Features\nprint(train_data['Location'].unique())\nprint(train_data['Fuel_Type'].unique())\nprint(train_data['Transmission'].unique())\nprint(train_data['Owner_Type'].unique())\n\n#Rest Feature are worked for Feature Engineering","7e36524e":"train_data.isnull().sum()","ee90c5c9":"print(\"Shape of train data Before dropping any Row: \",train_data.shape)\ntrain_data = train_data[train_data['Mileage'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Mileage: \",train_data.shape)\ntrain_data = train_data[train_data['Engine'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Engine : \",train_data.shape)\ntrain_data = train_data[train_data['Power'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Power  : \",train_data.shape)\ntrain_data = train_data[train_data['Seats'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Seats  : \",train_data.shape)","9fb32148":"train_data = train_data.reset_index(drop=True)","6c3ec6e9":"for i in range(train_data.shape[0]):\n    train_data.at[i, 'Company'] = train_data['Name'][i].split()[0]\n    train_data.at[i, 'Mileage(km\/kg)'] = train_data['Mileage'][i].split()[0]\n    train_data.at[i, 'Engine(CC)'] = train_data['Engine'][i].split()[0]\n    train_data.at[i, 'Power(bhp)'] = train_data['Power'][i].split()[0]","65a9b18f":"train_data['Mileage(km\/kg)'] = train_data['Mileage(km\/kg)'].astype(float)\ntrain_data['Engine(CC)'] = train_data['Engine(CC)'].astype(float)","68e46803":"train_data['Power'][76]","4134550e":"x = 'n'\ncount = 0\nposition = []\nfor i in range(train_data.shape[0]):\n    if train_data['Power(bhp)'][i]=='null':\n        x = 'Y'\n        count = count + 1\n        position.append(i)\nprint(x)\nprint(count)\nprint(position)","081f1ef1":"train_data = train_data.drop(train_data.index[position])\ntrain_data = train_data.reset_index(drop=True)","6c2d47e9":"train_data.shape","d7ec15c9":"train_data['Power(bhp)'] = train_data['Power(bhp)'].astype(float)","858ba1a5":"train_data.head()","0f299137":"for i in range(train_data.shape[0]):\n    if pd.isnull(train_data.loc[i,'New_Price']) == False:\n        train_data.at[i,'New_car_Price'] = train_data['New_Price'][i].split()[0]","1a80599c":"train_data['New_car_Price'] = train_data['New_car_Price'].astype(float)","4680fdcf":"train_data.drop([\"Name\"],axis=1,inplace=True)\ntrain_data.drop([\"Mileage\"],axis=1,inplace=True)\ntrain_data.drop([\"Engine\"],axis=1,inplace=True)\ntrain_data.drop([\"Power\"],axis=1,inplace=True)\ntrain_data.drop([\"New_Price\"],axis=1,inplace=True)","87123a42":"train_data.info()","f6225038":"train_data['Price'].describe()","3f3efe39":"f, ax = plt.subplots(figsize=(15,8))\nsns.distplot(train_data['Price'])\nplt.xlim([0,160])","565e917a":"train_data['Fuel_Type'].describe()","dc35d4bf":"var = 'Fuel_Type'\ndata = pd.concat([train_data['Price'], train_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(12, 8))\nfig = sns.boxplot(x=var, y=\"Price\", data=data)\nfig.axis(ymin=0, ymax=165);","8557faad":"var = 'Fuel_Type'\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.swarmplot(x = var, y ='Price', data = train_data)","a9b057b9":"var = 'Year'\ndata = pd.concat([train_data['Price'], train_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(20, 10))\nfig = sns.swarmplot(x=var, y=\"Price\", data=data)\nfig.axis(ymin=0, ymax=165);\nplt.xticks(rotation=90);","1a48c970":"var = 'Owner_Type'\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.stripplot(x = var, y ='Price', data = train_data) ","f1c8c980":"var = \"Company\"\nplt.figure(figsize=(20, 10))\nsns.catplot(x=var, kind=\"count\", palette=\"ch:.25\", height=8, aspect=2, data=train_data);\nplt.xticks(rotation=90);","3388ebaf":"var = 'Location'\ntrain_data[var].value_counts()","41e9cb40":"# Plot Location vs Price\nsns.catplot(y='Price',x=var,data= train_data.sort_values('Price',ascending=False),kind=\"boxen\",height=6, aspect=3)\nplt.show","ca134576":"Location = train_data[[var]]\nLocation = pd.get_dummies(Location,drop_first=True)\nLocation.head()","bb2a351d":"var = 'Fuel_Type'\ntrain_data[var].value_counts()","8fc077b7":"# Plot Fuel_Type vs Price\n# Yes we did this earlier... but used here for the work required here\nsns.catplot(y='Price',x=var,data= train_data.sort_values('Price',ascending=False),kind=\"boxen\",height=6, aspect=3)\nplt.show","751271e1":"Fuel_t = train_data[[var]]\nFuel_t = pd.get_dummies(Fuel_t,drop_first=True)\nFuel_t.head()","c68c2e3a":"var = 'Transmission'\ntrain_data[var].value_counts()","3ba47b24":"# Plot Transmission vs Price\n# Yes we did this earlier... but used here for the work required here\nsns.catplot(y='Price',x=var,data= train_data.sort_values('Price',ascending=False),kind=\"boxen\",height=6, aspect=3)\nplt.show","17e5e07f":"Transmission = train_data[[var]]\nTransmission = pd.get_dummies(Transmission,drop_first=True)\nTransmission.head()","210c433b":"var = 'Owner_Type'\ntrain_data[var].value_counts()","5ee54dcd":"train_data.replace({\"First\":1,\"Second\":2,\"Third\": 3,\"Fourth & Above\":4},inplace=True)\ntrain_data.head()","9ea27701":"var = 'Company'\ntrain_data[var].value_counts()","d2ca0ae7":"# Plot Company vs Price\n# Yes we did this earlier... but used here for the work required here\nsns.catplot(y='Price',x=var,data= train_data.sort_values('Price',ascending=False),kind=\"boxen\",height=6, aspect=3)\nplt.show","ee61826f":"train_data.drop([\"Company\"],axis=1,inplace=True)","dcffcad7":"final_train= pd.concat([train_data,Location,Fuel_t,Transmission],axis=1)\nfinal_train.head()","838de7f8":"final_train.drop([\"Location\",\"Fuel_Type\",\"Transmission\",\"New_car_Price\"],axis=1,inplace=True)\nfinal_train.head()","485003d3":"final_train.shape","80919b74":"test_data.head()","5cd5ad32":"test_data = test_data.iloc[:,1:]\n\nprint(\"Shape of test data Before dropping any Row: \",train_data.shape)\ntest_data = test_data[test_data['Mileage'].notna()]\nprint(\"Shape of test data After dropping Rows with NULL values in Mileage: \",test_data.shape)\ntest_data = test_data[test_data['Engine'].notna()]\nprint(\"Shape of test data After dropping Rows with NULL values in Engine : \",test_data.shape)\ntest_data = test_data[test_data['Power'].notna()]\nprint(\"Shape of test data After dropping Rows with NULL values in Power  : \",test_data.shape)\ntest_data = test_data[test_data['Seats'].notna()]\nprint(\"Shape of test data After dropping Rows with NULL values in Seats  : \",test_data.shape)\nprint('Droping null done')\n\ntest_data = test_data.reset_index(drop=True)\nprint('Index reset done')\n\nfor i in range(test_data.shape[0]):\n    test_data.at[i, 'Mileage(km\/kg)'] = test_data['Mileage'][i].split()[0]\n    test_data.at[i, 'Engine(CC)'] = test_data['Engine'][i].split()[0]\n    test_data.at[i, 'Power(bhp)'] = test_data['Power'][i].split()[0]\nprint('Split Done') \n\ntest_data['Mileage(km\/kg)'] = test_data['Mileage(km\/kg)'].astype(float)\ntest_data['Engine(CC)'] = test_data['Engine(CC)'].astype(float)\nprint('casting 1 Done') \n\nposition = []\nfor i in range(test_data.shape[0]):\n    if test_data['Power(bhp)'][i]=='null':\n        position.append(i)\n        \ntest_data = test_data.drop(test_data.index[position])\ntest_data = test_data.reset_index(drop=True) \n\ntest_data['Power(bhp)'] = test_data['Power(bhp)'].astype(float)\nprint('casting 2 Done') \n\nfor i in range(test_data.shape[0]):\n    if pd.isnull(test_data.loc[i,'New_Price']) == False:\n        test_data.at[i,'New_car_Price'] = test_data['New_Price'][i].split()[0]\n\ntest_data['New_car_Price'] = test_data['New_car_Price'].astype(float)\n\ntest_data.drop([\"Name\"],axis=1,inplace=True)\ntest_data.drop([\"Mileage\"],axis=1,inplace=True)\ntest_data.drop([\"Engine\"],axis=1,inplace=True)\ntest_data.drop([\"Power\"],axis=1,inplace=True)\ntest_data.drop([\"New_Price\"],axis=1,inplace=True)\n\nvar = 'Location'\nLocation = test_data[[var]]\nLocation = pd.get_dummies(Location,drop_first=True)\nLocation.head()\n\nvar = 'Fuel_Type'\nFuel_t = test_data[[var]]\nFuel_t = pd.get_dummies(Fuel_t,drop_first=True)\nFuel_t.head()\n\nvar = 'Transmission'\nTransmission = test_data[[var]]\nTransmission = pd.get_dummies(Transmission,drop_first=True)\nTransmission.head()\n\ntest_data.replace({\"First\":1,\"Second\":2,\"Third\": 3,\"Fourth & Above\":4},inplace=True)\ntest_data.head()\n\nfinal_test= pd.concat([test_data,Location,Fuel_t,Transmission],axis=1)\nfinal_test.head()\n\nfinal_test.drop([\"Location\",\"Fuel_Type\",\"Transmission\",\"New_car_Price\"],axis=1,inplace=True)\nfinal_test.head()\n\nprint(\"Final Test Size: \",final_test.shape)\n","e3e41755":"final_test.head()","95a1f65f":"final_train.columns","3f483a17":"X = final_train.loc[:,['Year', 'Kilometers_Driven', 'Owner_Type', 'Seats',\n       'Mileage(km\/kg)', 'Engine(CC)', 'Power(bhp)', \n       'Location_Bangalore', 'Location_Chennai', 'Location_Coimbatore',\n       'Location_Delhi', 'Location_Hyderabad', 'Location_Jaipur',\n       'Location_Kochi', 'Location_Kolkata', 'Location_Mumbai',\n       'Location_Pune', 'Fuel_Type_Diesel', 'Fuel_Type_LPG',\n       'Fuel_Type_Petrol', 'Transmission_Manual']]\nX.shape","acce1485":"y = final_train.loc[:,['Price']]\ny.head()","519d5701":"plt.figure(figsize=(18,18))\nsns.heatmap(train_data.corr(),annot=True,cmap='RdYlGn')\n\nplt.show()","4b8b50fa":"plt.figure(figsize=(18,18))\nsns.heatmap(final_train.corr(),annot=True,cmap='RdYlGn')\n\nplt.show()","222b57b6":"from sklearn.ensemble import ExtraTreesRegressor\nselection= ExtraTreesRegressor()\nselection.fit(X,y)","546c18ef":"#plot graph of feature importances for better visualization\n\nplt.figure(figsize = (12,8))\nfeat_importances = pd.Series(selection.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')\nplt.show()","354c581d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 25)","4944f0f0":"from sklearn.linear_model import LinearRegression\nlinear_reg = LinearRegression()\nlinear_reg.fit(X_train, y_train)\ny_pred= linear_reg.predict(X_test)\nprint(\"Accuracy on Training set: \",linear_reg.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",linear_reg.score(X_test,y_test))","9d324f85":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor()\nrf_reg.fit(X_train, y_train)\ny_pred= rf_reg.predict(X_test)\nprint(\"Accuracy on Training set: \",rf_reg.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",rf_reg.score(X_test,y_test))","d33662c8":"from sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nprint(\"\\t\\tError Table\")\nprint('Mean Absolute Error      : ', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared  Error      : ', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared  Error : ', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('R Squared Error          : ', metrics.r2_score(y_test, y_pred))","c4ad75de":"\ud83d\udca5\ud83d\udca5\ud83d\udca5\ud83d\udca5 **Oh Yeah!!!!**\n\nThat's a **Great Accuracy**","045da9ac":"Well after using *.notna()* we have many absent indexes (Eg: If row no 47 was droped then after 46 we have 48 index), so I reset the index and droping the present index.","c3e5d383":"### Owner Type","c2720bcd":"# Final Features Selection\n\nAs our train and test data are ready so now we have to only look for features on which we have to work.","25b7640f":"### First let me try Linear Regression","a3a891a5":"# Working with Categorical Data","fc5cfabb":"Cleary **Maruti** is most comman brand followed by **Hyundai**","ec1cf32d":"### Working with Transmission","de91f530":"### Fuel Type","4e002364":"Let's Drop sum Rows which contains NULL values.\n\nI ignored New_Price as there are many cell which contains NULL value in this column.","b44b774c":"We will have to prepare this test data with performing all the steps agaon for test data","836d10c8":"Again we will be using One-hot-encoding","8fedba9b":"First let's have a look over our target column","15cb76bb":"### Working for Location","8a0d75b3":"At this point when I tried to change **Power(bhp)** to float an error occured (Can't convert str to float : null).\nSo, I started investigating. And found some cell where having values: 'null bhp'","ea78781b":"# Build it (Model)\n\nFirst we are spliting the data to train and test for the model","55c09e84":"#### Not a good accuracy so, let's try something more better.","c1a3526f":"### Now I am using Random Forest Regressor (obviously for better accuracy)","b5759e62":"### Year","d25d188e":"# Feautre Engineering \ud83d\udee0\nThere are many different data which could be extarcted from present. And, that's where Feature Engineering comes.","3e2a7da5":"Now,\n\nLet's delete all useless featiures.","41d8d7e0":"A lot of variation so let's drop them","2514c2e9":"### Working with Owner_Type","cce63934":"As for now we have left with only 5 categorical features:\n1. Location\n2. Fuel_Type\n3. Transmission\n4. Owner_Type\n5. Company","c9e74f04":"We will be using One-hot-encoding here","a9063f34":"### Company","bc7f11ad":"For hadeling categorical data. We modtly use these 2 path:\n1. OneHotEncoder\n2. LabelEncoder\n\nWhere OneHotEncoder is used where data are not in any order and LabelEncoder when data is in order.\n\nSo, for each Features we will use plots to find out what to be used there.","22c94088":"We are Done with Training data, so now work on Test Data","1e51ec98":"From above values, we could judge that Mubmai has most number of cars to be sold followed by others.","b093c26e":"### Working for Fuel_Type","c05f1b84":"As, we thought diseal car would cost followed Petrol.","4177c051":"Clearly, it's a strong tendency.\n\nPrice of Newest is high compared to old models.","622d1846":"As Owner_Type column has ordered data so we will be using **Label Encoding** \n**Finally**","619375b6":"No, order so One-hot-encoding","90b50987":"# Data Visualization\n### Let's Plot some\nData visualization is the best way to find out how a data looks like","b0715502":"### Price","a2294134":"# Prepare Test Data","393cf03f":"### Working with Company","45ab5516":"Now the new shape of training data is:","63f5f234":"So, in total I have 5975 Rows now to work forward. I droped 44 rows.","7dce8e68":"Then I found the indexes of these values and removed them.","3a139324":" So, Finally this NoteBook End here \ud83e\udd35\ud83c\udffb\n \n One could go even further by Hyperparameter tuning. But, for now I left it  over you all\n \n Before going a humble request if you liked the notebook the \n <font color=\"Red\">Please Upvote ( It motivates me ) <\/font>\n \n And Stay Tuned... \n **I WILL BE ADDING LINK OF DEPLOYED MODEL SOON IN COMMENT SECTION**\n **If not done till Know**\n \n Till then Happy Coding\n ","6b10a52d":"# Used Car Price Prediction\n\n<font color=\"Green\"> 3rd, 4th and 5th (End date: 12th of July,2020)  Day of my KaggleStreak <\/font>\n\nSo called Second hand's car have a huge market base.\nMany consider to buy a Used Car intsead of buying of new one, as it's is feasible and a better investment.\n\nThe main reason for this huge market is that when you buy a New Car and sale it just another day without any default on it, the price of car reduces by 30%.\n\nThere are also many frauds in the market who not only sale wrong but also they could mislead to wrong price.\n\nSo, here I used this following dataset to Predict the price of any used car.\n\nDo give <font color=\"Red\"> UPVOTE <\/font>\n\n**I WILL BE ADDING LINK OF DEPLOYED MODEL SOON IN COMMENT SECTION**\n**If not done till Know**"}}