{"cell_type":{"061b16b8":"code","eb5a9b54":"code","8fdd2d7f":"code","6588c0d5":"code","2c1f0e21":"code","96060e9e":"code","7524774e":"code","d00b17dd":"code","64f4dd2a":"code","7d86d13a":"code","ca6baa20":"code","97d8b645":"code","d44de173":"code","70342396":"code","baff94c0":"code","045d1553":"code","122b6e07":"code","fabab5a2":"code","d663794a":"code","6edc6de1":"code","d4127dac":"code","e2e57207":"code","3b2809cf":"code","bfb5ecb3":"code","a526f034":"code","cdcf1655":"code","4df96d79":"code","44644317":"code","d7cb649b":"code","a9cd66e9":"code","14b7bf0e":"code","91abb992":"code","4ef56f9f":"code","3277e871":"code","5d74dba4":"code","06a1515e":"code","4af89589":"code","292c3f3a":"code","f330c769":"code","a94d4a1f":"code","ca27e6c5":"code","400b770f":"code","e634da92":"code","830c7cb2":"code","fdd9f0e0":"code","49061c58":"code","d0207449":"code","04705c35":"code","9fc5765a":"code","ebdd2cec":"markdown","a76188b6":"markdown","390f3260":"markdown","d6995f62":"markdown","87bbf537":"markdown","296d5c9f":"markdown","2938054c":"markdown","a7112f68":"markdown","ba9ecdfb":"markdown","4a0f1362":"markdown","acecf8f1":"markdown"},"source":{"061b16b8":"import numpy as np\nimport seaborn as sns\nimport pandas as pd \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport scipy\nfrom scipy.stats import norm, skew, zscore\nimport time","eb5a9b54":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","8fdd2d7f":"f,ax = plt.subplots(figsize=(12,2))\nplt.xticks(size = 14)\nplt.yticks(size = 14)\nbar1 =  ax.barh('train', train.shape[0], color=\"indianred\")\nbar2 =  ax.barh('test', test.shape[0], color=\"green\")\nax.set_title(\"Train and test datasets size comparison\", fontsize=20, pad=5)\nax.bar_label(bar1, [\"{0:.2f}%\".format((train.shape[0]\/(train.shape[0]+test.shape[0]))*100)], label_type=\"center\",\n             fontsize=20, color=\"white\", weight=\"bold\")\nax.bar_label(bar2,[\"{0:.2f}%\".format((test.shape[0]\/(train.shape[0]+test.shape[0]))*100)], label_type=\"center\",\n             fontsize=20, color=\"white\", weight=\"bold\")\nplt.show()","6588c0d5":"targets_list = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']","2c1f0e21":"train.head()","96060e9e":"print(\" Shape \".center(100,'*'))\nprint('Rows: {}'.format(train.shape[0]))\nprint('Columns: {}'.format(train.shape[1]))\nprint(\" Head \".center(100,'*'))\nprint(train.head())\nprint(\" Types \".center(100,'*'))\nprint(train.dtypes)\nprint(\" Missing values \".center(100,'*'))\nprint(\"Missing values %:   {}%\".format(train.isna().sum().sum()\/(train.shape[0]*train.shape[1])*100))\nprint(train.isna().sum())\nprint(' Duplicated'.center(100,'*'))\nprint(train.duplicated().sum())","7524774e":"df_train = train.copy()","d00b17dd":"df_train['date_time'] = pd.to_datetime(df_train.date_time, format=\"%Y-%m-%d %H:%M:%S\")\ndf_train['month'] = pd.DatetimeIndex(df_train['date_time']).month\ndf_train['day'] = pd.DatetimeIndex(df_train['date_time']).day\ndf_train['hour'] = pd.DatetimeIndex(df_train['date_time']).hour\ndf_train['dayofweek'] = pd.DatetimeIndex(df_train['date_time']).dayofweek\n\ndf_train.head()\n","64f4dd2a":"to_desc = df_train.drop(columns = ['date_time','target_carbon_monoxide','target_benzene','target_nitrogen_oxides'])\ndesc = to_desc.describe().T.drop(columns = ['count'])\n\ndesc_df = pd.DataFrame(index= [col for col in to_desc.columns], \n                   columns= desc.describe().T.columns.tolist().remove('count'), data= desc )\n\nf,ax = plt.subplots(figsize=(10,14))\nsns.heatmap(desc_df, annot=True,cmap = \"coolwarm\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = True,\n            annot_kws={\"size\": 12})\nax.xaxis.tick_top()\nplt.xticks(size = 14)\nplt.yticks(size = 14, rotation = 0)\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","7d86d13a":"corr_target_pearson = df_train.corr(method='pearson')\ncorr_target_spearman = df_train.corr(method='spearman')\n\nfig = plt.figure(figsize = (16,12))\nsns.heatmap(corr_target_pearson, annot=True, cmap='YlGn',linewidth = 0.5, vmin=-1, vmax=+1, fmt = \".1f\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=0)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (16,12))\nsns.heatmap(corr_target_spearman, annot=True, cmap='YlGn',linewidth = 0.5, vmin=-1, vmax=+1, fmt = \".1f\")\nplt.xticks(rotation=45)\nplt.title('Spearman Correlation')\nplt.show()","ca6baa20":"test.head()","97d8b645":"print(\" Shape \".center(100,'*'))\nprint('Rows: {}'.format(test.shape[0]))\nprint('Columns: {}'.format(test.shape[1]))\nprint(\" Head \".center(100,'*'))\nprint(test.head())\nprint(\" Types \".center(100,'*'))\nprint(test.dtypes)\nprint(\" Missing values \".center(100,'*'))\nprint(\"Missing values %:   {}%\".format(test.isna().sum().sum()\/(test.shape[0]*test.shape[1])*100))\nprint(test.isna().sum())\nprint(' Duplicated'.center(100,'*'))\nprint(test.duplicated().sum())","d44de173":"df_test = test.copy()\ndf_test['date_time'] = pd.to_datetime(df_test.date_time, format=\"%Y-%m-%d %H:%M:%S\")\ndf_test['year'] = pd.DatetimeIndex(df_test['date_time']).year\ndf_test['month'] = pd.DatetimeIndex(df_test['date_time']).month\ndf_test['day'] = pd.DatetimeIndex(df_test['date_time']).day\ndf_test['hour'] = pd.DatetimeIndex(df_test['date_time']).hour\ndf_test['dayofweek'] = pd.DatetimeIndex(df_test['date_time']).dayofweek\ndf_test.head()","70342396":"to_desc = df_test.drop(columns = ['date_time'])\ndesc = to_desc.describe().T.drop(columns = ['count'])\n\ndesc_df = pd.DataFrame(index= [col for col in to_desc.columns], \n                   columns= desc.describe().T.columns.tolist().remove('count'), data= desc )\n\nf,ax = plt.subplots(figsize=(10,14))\nsns.heatmap(desc_df, annot=True,cmap = \"coolwarm\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = True,\n            annot_kws={\"size\": 12})\nax.xaxis.tick_top()\nplt.xticks(size = 14)\nplt.yticks(size = 14, rotation = 0)\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","baff94c0":"df_target = train[['date_time','target_carbon_monoxide','target_benzene','target_nitrogen_oxides' ]]","045d1553":"to_desc = train[targets_list]\ndesc = to_desc.describe().T.drop(columns = ['count'])\n\ndesc_df = pd.DataFrame(index= [col for col in to_desc.columns], \n                   columns= desc.describe().T.columns.tolist().remove('count'), data= desc )\n\nf,ax = plt.subplots(figsize=(12,4))\nsns.heatmap(desc_df, annot=True,cmap = \"coolwarm\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = True,\n            annot_kws={\"size\": 12})\nax.xaxis.tick_top()\nplt.xticks(size = 14)\nplt.yticks(size = 14, rotation = 0)\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","122b6e07":"color = ['forestgreen', 'royalblue','indianred']\nfor i in range(3):\n    fig, ax = plt.subplots(figsize=(24,6))\n    plt.xticks(rotation=45)\n    sns.lineplot(x = df_train['date_time'], y = df_train[targets_list[i]], color=color[i], linewidth=1.5,ax=ax)\n    ax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\n    ax.grid(axis=\"both\")\n    plt.show()","fabab5a2":"color = ['forestgreen', 'royalblue','indianred']\nfor i in range(3):\n    sns.displot(data = df_train, x = targets_list[i], color=color[i],kde=True, stat = 'density',aspect=3)\nplt.show()\n","d663794a":"sns.pairplot(train[targets_list],  height=4, aspect=1.5, palette = 'Paired')\nplt.show()","6edc6de1":"color = ['forestgreen', 'royalblue','indianred']\nfor i in range(3):\n    fig, ax = plt.subplots(figsize=(10,6))\n    stats.probplot(train[targets_list[i]], plot=ax)\n    ax.set_title(targets_list[i])\n    plt.show()","d4127dac":"# df_train_norm = df_train_norm.drop(df_train_norm[df_train_norm.target_carbon_monoxide > 2.3].index)\n# df_train_norm = df_train_norm.drop(df_train_norm[df_train_norm.target_nitrogen_oxides < 2.55].index)\n# df_train_norm = df_train_norm.drop(df_train_norm[df_train_norm.target_benzene < 0.3].index)\n\n# fig, ax = plt.subplots(figsize=(8,2))\n# sns.boxplot(x=df_train_norm['target_carbon_monoxide'])\n\n# fig, ax = plt.subplots(figsize=(8,2))\n# sns.boxplot(x=df_train_norm['target_benzene'])\n\n# fig, ax = plt.subplots(figsize=(8,2))\n# sns.boxplot(x=df_train_norm['target_nitrogen_oxides'])\n\n# plt.show()","e2e57207":"# sns.pairplot(df_train_norm[targets_list],  height=3, aspect=1, palette = 'Paired')\n# plt.show()","3b2809cf":"# print(df_train_norm.shape)\n# for i in targets_list:\n#     z_scores = stats.zscore(df_train_norm[i])\n#     abs_z_scores = np.abs(z_scores)\n#     filtered_entries = (abs_z_scores < 3)\n#     df_train_norm = df_train_norm[filtered_entries]\n# print(df_train_norm.shape)","bfb5ecb3":"target = df_train[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]\ntarget.head()","a526f034":"df_train = df_train.drop(columns = ['date_time','target_carbon_monoxide','target_benzene','target_nitrogen_oxides' ])","cdcf1655":"df_train = pd.get_dummies(df_train, columns = ['month'], dtype = 'int64')\ndf_train.insert(loc=13, column='month_2', value=0)\ndf_train = pd.get_dummies(df_train, columns = ['day', 'hour', 'dayofweek'], dtype = 'int64')\ndf_train.head()","4df96d79":"df_test = pd.get_dummies(df_test, columns = ['month'], dtype = 'int64')\ndf_test['month_5'] = 0\ndf_test['month_6'] = 0\ndf_test['month_7'] = 0\ndf_test['month_8'] = 0\ndf_test['month_9'] = 0\ndf_test['month_10'] = 0\ndf_test['month_11'] = 0\ndf_test['month_12'] = 0\ndf_test = pd.get_dummies(df_test, columns = ['day', 'hour', 'dayofweek'], dtype = 'int64')\ndf_test = df_test[df_train.columns]\ndf_test.head()","44644317":"# !pip install auto-sklearn\n# !pip install --upgrade flake8","d7cb649b":"# import autosklearn.regression\n# import sklearn.metrics\n# from autosklearn.metrics import mean_squared_log_error","a9cd66e9":"# X_train = df_train\n# x_test = df_test\n# target_carbon_monoxide = target.target_carbon_monoxide.values\n# target_benzene = target.target_benzene.values\n# target_nitrogen_oxides = target.target_nitrogen_oxides.values\n","14b7bf0e":"# automl1 = autosklearn.regression.AutoSklearnRegressor(\n# time_left_for_this_task=30*60,\n# n_jobs = -1,\n# metric=mean_squared_log_error,\n# scoring_functions=[mean_squared_log_error]\n# )\n\n# automl1.fit(X = X_train, y = target_carbon_monoxide)\n# print(automl1.sprint_statistics())\n# sample_submission.target_carbon_monoxide = automl1.predict(x_test)","91abb992":"# automl2 = autosklearn.regression.AutoSklearnRegressor(\n# time_left_for_this_task=30*60,\n# n_jobs = -1,\n# metric=mean_squared_log_error,\n# scoring_functions=[mean_squared_log_error]\n# )\n\n# automl2.fit(X = X_train, y = target_benzene)\n# print(automl2.sprint_statistics())\n# sample_submission.target_benzene = automl2.predict(x_test)","4ef56f9f":"# automl3 = autosklearn.regression.AutoSklearnRegressor(\n# time_left_for_this_task=30*60,\n# n_jobs = -1,\n# metric=mean_squared_log_error,\n# scoring_functions=[mean_squared_log_error]\n# )\n\n# automl3.fit(X = X_train, y = target_nitrogen_oxides)\n# print(automl3.sprint_statistics())\n# sample_submission.target_nitrogen_oxides = automl3.predict(x_test)\n\n","3277e871":"# sample_submission.to_csv('submission.csv',index=False)\n# sample_submission.shape","5d74dba4":"import h2o\nfrom h2o.automl import H2OAutoML\nh2o.init()\nsample_submissionh2o = sample_submission.copy()","06a1515e":"X_train = df_train\nx_test = df_test\ntarget_carbon_monoxide = target.target_carbon_monoxide.values\ntarget_benzene = target.target_benzene.values\ntarget_nitrogen_oxides = target.target_nitrogen_oxides.values\n","4af89589":"X_train1 = X_train.join(target.target_carbon_monoxide)\nhtrain = h2o.H2OFrame(X_train1)\nhtest = h2o.H2OFrame(x_test)\nx = htrain.columns\ny = \"target_carbon_monoxide\"\nx.remove(y)","292c3f3a":"%%time \naml1 = H2OAutoML(max_runtime_secs = 3600, \n                 seed = 1,\n                 include_algos = ['GBM', 'StackedEnsemble'])\naml1.train(x=x, y =y, training_frame=htrain)","f330c769":"lb = aml1.leaderboard\nlb","a94d4a1f":"pred1 = aml1.predict(htest)\npred1 = pred1.as_data_frame()\nsample_submissionh2o.target_carbon_monoxide = pred1","ca27e6c5":"X_train2 = X_train.join(target.target_benzene)\nhtrain = h2o.H2OFrame(X_train2)\nhtest = h2o.H2OFrame(x_test)\nx = htrain.columns\ny = \"target_benzene\"\nx.remove(y)","400b770f":"%%time \naml2 = H2OAutoML(max_runtime_secs = 3600, \n                 seed = 1,\n                 include_algos = ['GBM','StackedEnsemble'])\naml2.train(x=x, y =y, training_frame=htrain)","e634da92":"lb = aml2.leaderboard\nlb","830c7cb2":"pred2 = aml2.predict(htest)\npred2 = pred2.as_data_frame()\nsample_submissionh2o.target_benzene = pred2","fdd9f0e0":"X_train3 = X_train.join(target.target_nitrogen_oxides)\nhtrain = h2o.H2OFrame(X_train3)\nhtest = h2o.H2OFrame(x_test)\nx = htrain.columns\ny = \"target_nitrogen_oxides\"\nx.remove(y)","49061c58":"aml3 = H2OAutoML(max_runtime_secs = 3600, \n                 seed = 1,\n                 include_algos = ['GBM','StackedEnsemble'])\naml3.train(x=x, y =y, training_frame=htrain)","d0207449":"lb = aml3.leaderboard\nlb","04705c35":"pred3 = aml3.predict(htest)\npred3 = pred3.as_data_frame()\nsample_submissionh2o.target_nitrogen_oxides = pred3","9fc5765a":"sample_submissionh2o.to_csv('submissionh2o.csv',index=False)","ebdd2cec":"3","a76188b6":"# Preprocessing","390f3260":"**H2OAutoML**","d6995f62":"## Test","87bbf537":"outliers testing solution","296d5c9f":"# First Exploration","2938054c":"**auto-sklearn**","a7112f68":"# Models","ba9ecdfb":"## Train","4a0f1362":"2","acecf8f1":"## Targets"}}