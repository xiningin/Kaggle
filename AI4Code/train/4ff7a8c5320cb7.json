{"cell_type":{"51b084a9":"code","2279bb31":"code","b791f78f":"code","6cbd8fd3":"code","4d113307":"code","7686a326":"code","d231aba5":"code","ceddbae0":"code","6b05f37b":"code","5f71cb90":"code","2da91aca":"code","ce557e4b":"code","ba7bac59":"code","7ad2f258":"code","16b472e0":"code","9d2fb90e":"code","db24e75d":"code","a506a1f5":"code","e14f654c":"code","a2a5202b":"markdown","b5e76711":"markdown"},"source":{"51b084a9":"import numpy as np\nimport pandas as pd\nimport os\n\nfrom scipy.stats import rankdata\n\nLABELS = [\"HasDetections\"]","2279bb31":"!ls ..\/input\/detecting-malwares-with-ftrl-proximal","b791f78f":"!ls ..\/input\/outputs-for-microsoft","6cbd8fd3":"predict_list = []\n\n\npredict_list.append(pd.read_csv(\"..\/input\/lightgbm\/submission_lgbm.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/malware-predictions-3500-trees\/submission0.72968.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/detecting-malwares-with-ftrl-proximal\/submission.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/outputs-for-microsoft\/submission_ashish_kfold.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_5.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_6.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_7.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_8.csv\")[LABELS].values)\npredict_list.append(pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_9.csv\")[LABELS].values)","4d113307":"print(\"Rank averaging on \", len(predict_list), \" files\")\npredictions = np.zeros_like(predict_list[0])\nfor predict in predict_list:\n    for i in range(1):\n        predictions[:, i] = np.add(predictions[:, i], rankdata(predict[:, i])\/predictions.shape[0])  \npredictions \/= len(predict_list)\n\nsubmission = pd.read_csv('..\/input\/microsoft-malware-prediction\/sample_submission.csv')\nsubmission[LABELS] = predictions\nsubmission.to_csv('super_blend.csv', index=False)","7686a326":"submission.head()","d231aba5":"import numpy as np # NUMPY\nimport pandas as pd # PANDAS\n\n# DATA VIZUALIZATION LIBRARIES\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# METRICS TO MEASURE RMSE\nfrom math import sqrt\nfrom sklearn import metrics","ceddbae0":"#ALL PUBLIC SOLUTION RMSE < 0.2269 (WITHOUT REPETITIONS)\ndf_base0 = pd.read_csv(\"..\/input\/lightgbm\/submission_lgbm.csv\",names=[\"MachineIdentifier\",\"HasDetections0\"], skiprows=[0],header=None)\ndf_base1 = pd.read_csv(\"..\/input\/malware-predictions-3500-trees\/submission0.72968.csv\",names=[\"MachineIdentifier\",\"HasDetections1\"], skiprows=[0],header=None)\ndf_base2 = pd.read_csv(\"..\/input\/detecting-malwares-with-ftrl-proximal\/submission.csv\",names=[\"MachineIdentifier\",\"HasDetections2\"], skiprows=[0],header=None)\ndf_base3 = pd.read_csv(\"..\/input\/outputs-for-microsoft\/submission_ashish_kfold.csv\",names=[\"MachineIdentifier\",\"HasDetections3\"], skiprows=[0],header=None)\ndf_base4 = pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_5.csv\",names=[\"MachineIdentifier\",\"HasDetections4\"], skiprows=[0],header=None)\ndf_base5 = pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_6.csv\",names=[\"MachineIdentifier\",\"HasDetections5\"], skiprows=[0],header=None)\ndf_base6 = pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_7.csv\",names=[\"MachineIdentifier\",\"HasDetections6\"], skiprows=[0],header=None)\ndf_base7 = pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_8.csv\",names=[\"MachineIdentifier\",\"HasDetections7\"], skiprows=[0],header=None)\ndf_base8 = pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_9.csv\",names=[\"MachineIdentifier\",\"HasDetections8\"], skiprows=[0],header=None)","6b05f37b":"df_base = pd.merge(df_base0,df_base1,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base2,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base3,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base4,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base5,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base6,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base7,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base8,how='inner',on='MachineIdentifier')","5f71cb90":"#CORRELATION MATRIX (Pearson Correlation to measure how similar are 2 solutions)\nplt.figure(figsize=(16,12))\nsns.heatmap(df_base.iloc[:,1:].corr(),annot=True,fmt=\".2f\")","2da91aca":"# ALTERNATIVE WAY - RMSE MATRIX (RMSE to measure how similar are 2 solutions)\nM = np.zeros([df_base.iloc[:,1:].shape[1],df_base.iloc[:,1:].shape[1]])\nfor i in np.arange(M.shape[1]):\n    for j in np.arange(M.shape[1]):\n        M[i,j] = sqrt(metrics.mean_squared_error(df_base.iloc[:,i+1], df_base.iloc[:,j+1]))","ce557e4b":"#SOLUTION = MEAN OF COLUMNS\ndf_base['HasDetections'] = df_base.iloc[:,1:].mean(axis=1)\ndf_base[['MachineIdentifier','HasDetections']].to_csv(\"Bestoutput.csv\",index=False)","ba7bac59":"#ALL PUBLIC SOLUTION RMSE < 0.2269 (WITHOUT REPETITIONS)\ndf_base0 = pd.read_csv(\"..\/input\/lightgbm\/submission_lgbm.csv\",names=[\"MachineIdentifier\",\"HasDetections0\"], skiprows=[0],header=None)\ndf_base1 = pd.read_csv(\"..\/input\/malware-predictions-3500-trees\/submission0.72968.csv\",names=[\"MachineIdentifier\",\"HasDetections1\"], skiprows=[0],header=None)\ndf_base2 = pd.read_csv(\"..\/input\/detecting-malwares-with-ftrl-proximal\/submission.csv\",names=[\"MachineIdentifier\",\"HasDetections2\"], skiprows=[0],header=None)\ndf_base3 = pd.read_csv(\"..\/input\/outputs-for-microsoft\/submission_ashish_kfold.csv\",names=[\"MachineIdentifier\",\"HasDetections3\"], skiprows=[0],header=None)\ndf_base8 = pd.read_csv(\"..\/input\/hung-the-nguyen\/submission_lgbm_9.csv\",names=[\"MachineIdentifier\",\"HasDetections8\"], skiprows=[0],header=None)","7ad2f258":"df_base = pd.merge(df_base0,df_base1,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base2,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base3,how='inner',on='MachineIdentifier')\ndf_base = pd.merge(df_base,df_base8,how='inner',on='MachineIdentifier')","16b472e0":"#CORRELATION MATRIX (Pearson Correlation to measure how similar are 2 solutions)\nplt.figure(figsize=(16,12))\nsns.heatmap(df_base.iloc[:,1:].corr(),annot=True,fmt=\".2f\")","9d2fb90e":"# ALTERNATIVE WAY - RMSE MATRIX (RMSE to measure how similar are 2 solutions)\nM = np.zeros([df_base.iloc[:,1:].shape[1],df_base.iloc[:,1:].shape[1]])\nfor i in np.arange(M.shape[1]):\n    for j in np.arange(M.shape[1]):\n        M[i,j] = sqrt(metrics.mean_squared_error(df_base.iloc[:,i+1], df_base.iloc[:,j+1]))","db24e75d":"#SOLUTION = MEAN OF COLUMNS\ndf_base['HasDetections'] = df_base.iloc[:,1:].mean(axis=1)\ndf_base[['MachineIdentifier','HasDetections']].to_csv(\"Bestoutput1.csv\",index=False)","a506a1f5":"double_blend = df_base['HasDetections'] * 0.5 + submission['HasDetections'] * 0.5\nsample = pd.read_csv('..\/input\/microsoft-malware-prediction\/sample_submission.csv')\nsample.head()","e14f654c":"sample['HasDetections'] = double_blend\nsample.to_csv('Bouble_blend.csv', index=False)","a2a5202b":"\n## Thanks to this all kernels \n\n* Inspired the super blend technique by Saurabh Kumar (https:\/\/www.kaggle.com\/saurabh502\/why-no-blend),\n* https:\/\/www.kaggle.com\/roydatascience\/light-gbm-on-stratified-k-folds-malwares\n* https:\/\/www.kaggle.com\/hung96ad\/lightgbm) ","b5e76711":"#### We have take less correlation columns to blend data"}}