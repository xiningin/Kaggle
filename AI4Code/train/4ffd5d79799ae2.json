{"cell_type":{"e7a9b9d8":"code","e799f9c0":"code","1b0407ec":"code","239eaf6f":"code","12c2e0d1":"code","0caef10a":"code","d6ccffff":"code","70196c7d":"code","f570da13":"code","5773c1ff":"code","e5754b4d":"code","f50a6732":"code","e2a7e03c":"code","4afa1674":"code","3c016105":"code","af9e57e5":"code","fa200e4c":"code","1a4c9bfd":"markdown","bf4beaa4":"markdown","6ec80db4":"markdown","6c0ff2ce":"markdown","c81515e8":"markdown","9323f413":"markdown","b1219525":"markdown","5883a625":"markdown","fa9aa182":"markdown","2b6747fc":"markdown","a0569bab":"markdown","960628c1":"markdown","343fe0f1":"markdown","086cb5fe":"markdown","2c1e5cd6":"markdown","0fa3d913":"markdown","21fa5a1d":"markdown"},"source":{"e7a9b9d8":"#You know what this step is for\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom datetime import datetime\nimport seaborn as sns\nimport plotly.plotly as py\nimport re\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\ninit_notebook_mode(connected=True)\n\nimport os\nreviews = pd.read_csv(\"..\/input\/google-amazon-facebook-employee-reviews\/employee_reviews.csv\")\n","e799f9c0":"#Getting shape of the dataset\nprint(\"Shape is\",reviews.shape)","1b0407ec":"reviews.info()","239eaf6f":"# Preprocessing steps\nreviews.columns = reviews.columns.str.replace('-','_')\nreviews.head(10)","12c2e0d1":"#Since column Unnamed:0 is nothing but the index, therefore dropping it.\nreviews = reviews.drop(\"Unnamed: 0\",axis=1)\n\n#Plotting the number of reviews present for each company\ncounts = reviews['company'].value_counts()\ncounts = pd.DataFrame(counts)\ntrace1 = go.Bar(\n                x = counts.index,\n                y = counts.company,\n                name = \"Number of reviews for each company\",\n                marker = dict(color='rgb(26, 118, 255)',\n                             line=dict(color='black',width=1.5)),\n                text = counts.company)\ndata = [trace1]\nlayout = go.Layout(barmode = \"group\",title='Number of reviews of each company')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","0caef10a":"#Plotting number of reviews of each company by country\ncmp_lc= reviews[[\"company\",\"location\"]]\ncmp_lc= cmp_lc[cmp_lc.location != 'none']\ncmp_lc= cmp_lc.reset_index(drop=True)\n\ndef find_country(s):\n    try:\n        x = re.search(r'\\((.*?)\\)',s).group(1)\n        return str(x)\n    except:\n        return str(\"United States\")\n    \ncmp_lc['country'] = cmp_lc['location'].apply(find_country)\ncmp_lc = cmp_lc.drop('location',axis=1)\ncmp_lc = cmp_lc.groupby([\"company\", \"country\"]).size().reset_index()\ncmp_lc = cmp_lc.rename(columns={0: 'total_reviews'})\ncompanies = list(cmp_lc.company.unique())\ncompany_data = []\nv = True\n\n\nfor i in companies:\n    if i!='amazon':\n        v=False\n    data_upd = [dict(type='choropleth',\n                     locations = cmp_lc[cmp_lc['company']==i]['country'],\n                     z = cmp_lc[cmp_lc['company']==i]['total_reviews'],\n                     locationmode='country names',\n                     text = cmp_lc[cmp_lc['company']==i]['country'],\n                     visible = v,\n                     colorbar = dict(title = \"Numbers of Reviews\"))]\n    \n    company_data.extend(data_upd)\n\ncompanies = [x.capitalize() for x in companies]\n\n# set menues inside the plot\nsteps = []\ncp = 0\nfor i in range(0,len(company_data)):\n    step = dict(method = \"restyle\",\n                args = [\"visible\", [False]*len(company_data)],\n                label = companies[cp]) \n    step['args'][1][i] = True\n    steps.append(step)\n    cp += 1\n    \n\nsliders = [dict(active = 6,\n                currentvalue = {\"prefix\": \"Company: \"},\n                pad = {\"t\": 50},\n                steps = steps)]\n\n# Set the layout\nlayout = dict(title = 'Number of reviews country specific for each company',\n              sliders = sliders)\n\nfig = dict(data=company_data, layout=layout)\niplot( fig, filename='companies-cloropleth-map')","d6ccffff":"#Getting wordclouds for each company\nstopwords = set(STOPWORDS)\nextras = [\"great\",\"work\",\"company\",\"place\",\"good\"]\nstopwords.update(extras)\ncompanies = list(reviews.company.unique())\nfor company in companies:\n    stopwords.add(company)\n\ndef wordclouds(df,companies):\n    for company in companies:\n        temp = df.loc[df[\"company\"]==company]\n        text = \" \".join(str(review) for review in temp.summary)\n        # Create and generate a word cloud image:\n        wordcloud = WordCloud(stopwords=stopwords,collocations = False).generate(text)\n        # Display the generated image:\n        plt.imshow(wordcloud, interpolation='bilinear')\n        plt.axis(\"off\")\n        plt.title(company.upper())\n        plt.show()\n        \nwordclouds(reviews,companies)","70196c7d":"apple_mask = np.array(Image.open(\"..\/input\/mask-images\/apple.png\"))\namazon_mask = np.array(Image.open(\"..\/input\/mask-images\/amazon.png\"))\nnetflix_mask = np.array(Image.open(\"..\/input\/mask-images\/netflix.png.png\"))\n\ndef transform_format(val):\n    if val == 0:\n        return 255\n    elif val == 26:\n        return 255\n    else:\n        return val\n\n# Transforming mask into a new one that will work with the function:\nt_apple_mask = np.ndarray((apple_mask.shape[0],apple_mask.shape[1]), np.int32)\nt_amazon_mask = np.ndarray((amazon_mask.shape[0],amazon_mask.shape[1]), np.int32)\nt_netflix_mask = np.ndarray((netflix_mask.shape[0],netflix_mask.shape[1]), np.int32)\n\nfor i in range(len(apple_mask)):\n    t_apple_mask[i] = list(map(transform_format,apple_mask[i]))\n\nfor i in range(len(amazon_mask)):\n    t_amazon_mask[i] = list(map(transform_format,amazon_mask[i]))\n\nfor i in range(len(netflix_mask)):\n    t_netflix_mask[i] = list(map(transform_format,netflix_mask[i]))\n\nstopwords = set(STOPWORDS)\nextras = [\"great\",\"work\",\"company\",\"place\",\"good\"]\nstopwords.update(extras)\ncompanies = [\"apple\",\"amazon\",\"microsoft\",\"netflix\"]\nfor company in companies:\n    stopwords.add(company)\n\ntemp = reviews.loc[reviews[\"company\"]==\"apple\"]\ntext = \" \".join(str(review) for review in temp.summary)\n# Create and generate a word cloud image:\nwc1 = WordCloud(background_color=\"white\", max_words=500, mask=t_apple_mask,\n               stopwords=stopwords, contour_width=5)\nwc1.generate(text)\ntemp = reviews.loc[reviews[\"company\"]==\"amazon\"]\ntext = \" \".join(str(review) for review in temp.summary)\nwc2 = WordCloud(background_color=\"white\", max_words=500, mask=t_amazon_mask,\n               stopwords=stopwords, contour_width=5)\nwc2.generate(text)\n\ntemp = reviews.loc[reviews[\"company\"]==\"netflix\"]\ntext = \" \".join(str(review) for review in temp.summary)\nwc3 = WordCloud(background_color=\"white\", max_words=1000, mask=t_netflix_mask,\n               stopwords=stopwords, contour_width=5)\nwc3.generate(text)\n\n\n# fig, ((ax1, ax2),ax3)= plt.subplots(2, 2, sharex=True, sharey=True,figsize=(15,15))\n# ax1.imshow(wc1, interpolation='bilinear')\n# ax1.axis(\"off\")\n# ax2.imshow(wc2, interpolation='bilinear')\n# ax2.axis(\"off\")\n# ax3.imshow(wc3, interpolation='bilinear')\n# ax3.axis(\"off\")\n\ngs = gridspec.GridSpec(2, 2)\n\nfig = plt.figure(figsize=(40,40))\nax1 = fig.add_subplot(gs[0, 0]) # row 0, col 0\nax1.imshow(wc1, interpolation='bilinear')\nax1.axis(\"off\")\n\nax2 = fig.add_subplot(gs[0, 1]) # row 0, col 1\nax2.imshow(wc2, interpolation='bilinear')\nax2.axis(\"off\")\n\nax3 = fig.add_subplot(gs[1, :]) # row 1, span all columns\nax3.imshow(wc3, interpolation='bilinear')\nax3.axis(\"off\")","f570da13":"# Preprocessing done for datetime data\nreviews.dates = reviews.dates.str.strip()\nreviews = reviews[reviews.dates != 'None']\nreviews = reviews[reviews.dates != 'Jan 0, 0000']\nreviews = reviews[reviews.dates != 'Nov 0, 0000']\nreviews.dates = [datetime.strptime(x, '%b %d, %Y') for x in reviews.dates]\nreviews['year'] = pd.DatetimeIndex(reviews.dates).year  ","5773c1ff":"cmp_lc = reviews[[\"company\",\"dates\"]]\ncmp_lc = cmp_lc.reset_index(drop=True)\ncmp_lc.sort_values(by='dates')\ncmp_lc = cmp_lc.groupby([\"company\", \"dates\"]).size().reset_index()\ncmp_lc = cmp_lc.rename(columns={0: 'total_reviews'})\n\namazon = go.Scatter(\n    x=cmp_lc[cmp_lc['company']=='amazon']['dates'],\n    y=cmp_lc[cmp_lc['company']=='amazon']['total_reviews'],\n    name = \"Amazon\",\n    line = dict(color = '#17BECF'),\n    opacity = 0.8)\n\nmicrosoft = go.Scatter(\n    x=cmp_lc[cmp_lc['company']=='microsoft']['dates'],\n    y=cmp_lc[cmp_lc['company']=='microsoft']['total_reviews'],\n    name = \"Microsoft\",\n    line = dict(color = '#7F7F7F'),\n    opacity = 0.8)\n\napple = go.Scatter(\n    x=cmp_lc[cmp_lc['company']=='apple']['dates'],\n    y=cmp_lc[cmp_lc['company']=='apple']['total_reviews'],\n    name = \"Apple\",\n    line = dict(color = '#0fac1f'),\n    opacity = 0.8)\n\ngoogle = go.Scatter(\n    x=cmp_lc[cmp_lc['company']=='google']['dates'],\n    y=cmp_lc[cmp_lc['company']=='google']['total_reviews'],\n    name = \"Google\",\n    line = dict(color = '#6335c3'),\n    opacity = 0.8)\n\nfacebook = go.Scatter(\n    x=cmp_lc[cmp_lc['company']=='facebook']['dates'],\n    y=cmp_lc[cmp_lc['company']=='facebook']['total_reviews'],\n    name = \"Facebook\",\n    line = dict(color = '#808000'),\n    opacity = 0.8)\n\n\ndata = [amazon,microsoft,apple,google,facebook]\n\nlayout = dict(\n    title='Analysing any trend between number of reviews and dates',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)","e5754b4d":"def find_employee_type(s):\n    x = re.search(r'([^-]*)-',s).group(1)\n    return str(x)\n    \nreviews['employee_type'] = reviews['job_title'].apply(find_employee_type)\ncmp_lc= reviews[[\"company\",\"employee_type\"]] \ncmp_lc = cmp_lc.groupby([\"company\", \"employee_type\"]).size().reset_index()\ncmp_lc = cmp_lc.rename(columns={0: 'total_reviews_by_title'})\n\nyears = list(cmp_lc.company.unique())\ncompany_data = []\nv = True\n\nfor i in years:\n    if i!='amazon':\n        v=False\n    data_upd = [dict(type='bar',\n                     visible = v,\n                     x = cmp_lc[cmp_lc['company']==i]['employee_type'],\n                     y = cmp_lc[cmp_lc['company']==i]['total_reviews_by_title'],\n                     textposition = 'auto',\n                     marker=dict(\n                     color='rgb(158,202,225)',\n                     line=dict(\n                         color='rgb(8,48,107)',\n                         width=1.5),\n                     ),\n                 opacity=0.6)]\n    \n    company_data.extend(data_upd)\n\nyears = [x.capitalize() for x in years]\n\n# set menus inside the plot\nsteps = []\nyr = 0\nfor i in range(0,len(company_data)):\n    step = dict(method = \"restyle\",\n                args = [\"visible\", [False]*len(company_data)],\n                label = years[yr]) \n    step['args'][1][i] = True\n    steps.append(step)\n    yr += 1\n    \n\nsliders = [dict(active = 6,\n                currentvalue = {\"prefix\": \"Company: \"},\n                pad = {\"t\": 50},\n                steps = steps)]\n\n# Set the layout\nlayout = dict(title = 'Do current employees review the comapnies more than the ex-employees?',\n              sliders = sliders)\n\nfig = dict(data=company_data, layout=layout)\niplot(fig)","f50a6732":"#Function to plot\ndef plotit(df,company):\n    cmp_lc = df[[\"year\",\"company\",\"overall_ratings\",\"work_balance_stars\",\"culture_values_stars\",\n                      \"carrer_opportunities_stars\",\"comp_benefit_stars\",\"senior_mangemnet_stars\"]]\n    cmp_lc = cmp_lc.loc[cmp_lc[\"company\"]==company]\n    cmp_lc = cmp_lc.drop('company',axis=1)\n    cmp_lc = cmp_lc[cmp_lc.work_balance_stars != 'none']\n    cmp_lc = cmp_lc[cmp_lc.culture_values_stars != 'none']\n    cmp_lc = cmp_lc[cmp_lc.carrer_opportunities_stars != 'none']\n    cmp_lc = cmp_lc[cmp_lc.comp_benefit_stars != 'none']\n    cmp_lc = cmp_lc[cmp_lc.senior_mangemnet_stars != 'none']\n    cmp_lc[[\"overall_ratings\",\"work_balance_stars\",\"culture_values_stars\",\"carrer_opportunities_stars\",\n            \"comp_benefit_stars\",\"senior_mangemnet_stars\"]] = cmp_lc[[\"overall_ratings\",\"work_balance_stars\",\"culture_values_stars\",\n            \"carrer_opportunities_stars\",\"comp_benefit_stars\",\"senior_mangemnet_stars\"]].apply(pd.to_numeric)\n    cmp_lc = cmp_lc.groupby('year').agg({'overall_ratings':np.median,'work_balance_stars':np.median,\n                                        'culture_values_stars':np.median,'carrer_opportunities_stars':np.median,\n                                        'comp_benefit_stars':np.median,'senior_mangemnet_stars':np.median}).reset_index()\n\n    t1 = go.Scatter(\n        x = cmp_lc.year,\n        y = cmp_lc.overall_ratings,\n        mode = \"lines+markers\",\n        name = \"Overall Ratings\",\n        marker = dict(color = 'rgba(240,230,140 0.8)'),\n    )\n\n    t2 = go.Scatter(\n        x = cmp_lc.year,\n        y = cmp_lc.work_balance_stars,\n        mode = \"lines+markers\",\n        name = \"Work Balance Stars\",\n        marker = dict(color = 'rgba(211,211,211, 0.8)'),\n    )\n    t3 = go.Scatter(\n        x = cmp_lc.year,\n        y = cmp_lc.culture_values_stars,\n        mode = \"lines+markers\",\n        name = \"Culture Value Stars\",\n        marker = dict(color = 'rgba(220,165,112)'),\n    )\n    t4 = go.Scatter(\n        x = cmp_lc.year,\n        y = cmp_lc.carrer_opportunities_stars,\n        mode = \"lines+markers\",\n        name = \"Career Opportunities Stars\",\n        marker = dict(color = 'rgba(218,165,32, 0.8)'),\n    )\n    t5 = go.Scatter(\n        x = cmp_lc.year,\n        y = cmp_lc.comp_benefit_stars,\n        mode = \"lines+markers\",\n        name = \"Compensation and Benefits Stars\",\n        marker = dict(color = 'rgba(128,128,128, 0.8)'),\n    )\n    t6 = go.Scatter(\n        x = cmp_lc.year,\n        y = cmp_lc.senior_mangemnet_stars,\n        mode = \"lines+markers\",\n        name = \"Senior Management Stars\",\n        marker = dict(color = 'rgba(144,89,35, 0.8)'),\n    )\n\n    data = [t1,t2,t3,t4,t5,t6]\n    layout = dict(title = 'How did ratings change over the years for %s?'%company,\n                  xaxis= dict(title= 'Years',ticklen= 5,zeroline= False)\n                 )\n    fig = dict(data = data, layout = layout)\n    iplot(fig)\nplotit(reviews,'amazon')","e2a7e03c":"plotit(reviews,'microsoft')","4afa1674":"plotit(reviews,'apple')","3c016105":"plotit(reviews,'google')","af9e57e5":"plotit(reviews,'facebook')","fa200e4c":"plotit(reviews,'netflix')","1a4c9bfd":"Let's see how many reviews do we have for each company.","bf4beaa4":"Apple's ratings are a bit weird as Work Balance is pretty low and the only positive part about it is the Culture Value.","6ec80db4":"I guess they speak for themselves when it comes to Amazon.","6c0ff2ce":"If you work for Google then ofcourse you could pretty much work for any company in the entire world.","c81515e8":"Now lets find out how do the current employees relate former ones when it comes to reviewing the companies --","9323f413":"How big is the dataset?","b1219525":"# This notebook tries to provide basic EDA using plotly\n\n\nThis dataset contains web scraped data for over 67k Employee reviews of Google, Amazon, Apple and more.\nMy work in this notebook is majorly focuses upon providing a brief overview without the use of any complex statistical graphs.\nFeel free to fork it and play with the code.\nMy second notebook (in progress) will cover sentiment analysis based on the reviews. \n\n# Enough with the talk, lets dig a little deeper and see!","5883a625":"Facebook has 4\/5 Work Balance stars but has been rated high constantly when it comes to others. \nWell i'll leave it upon you to decide then.","fa9aa182":"Printing the head of the dataset -","2b6747fc":"Woah. Can we mask them? Well yes. \nTime is never better than spent than trying to get that little piece of code to work!!","a0569bab":"Brief overview :","960628c1":"I hope you liked my work. Please feel free to drop in any questions.\nAlso check out my Part II of the notebook.","343fe0f1":"Netflix has constantly recieved 5\/5 stars when it comes to Compensation and Benefits but underperforms in case of Career Opportunities!!","086cb5fe":"This step involves processing datetime data so that we can analyse if there are crazy events when somehow a massive amount of people reviewed a company in order to get some conditional benefits.","2c1e5cd6":"Let's try to see now how have the ratings changed over years for each company?\nAnd not just overall ratings, but also individual ratings.","0fa3d913":"Wordclouds can be pretty useful in grasping what the people are saying.\nWorclouds for each company -","21fa5a1d":"Voila! 251 current or previous employees reviewed Amazon on September 18, 2017. I wonder what kind of incentives did they get!\nAnyhow Amazon constantly has a high number of reviews getting posted even now. "}}