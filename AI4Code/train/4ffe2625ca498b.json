{"cell_type":{"1883ce54":"code","895d19ab":"code","59c6f99f":"code","58dbd979":"code","730c3056":"code","1578362e":"code","1aa92584":"code","62ad9561":"code","899cd581":"code","5b4f154c":"code","be7c4285":"code","4c3f14cf":"code","d8847dc4":"code","914ded74":"code","5822e124":"code","d443355f":"code","1ae1d8cb":"code","925cd5aa":"code","f3c91cc4":"code","e3c3d419":"code","9b187f8d":"code","e0932f92":"code","b5932f38":"code","83afeff5":"code","abd18133":"code","aaf7dc3e":"code","2fa3fb18":"code","a3ea544d":"code","cbf16b0d":"code","a3c955f9":"code","8a54336f":"code","8d26755a":"code","cfc43bf6":"code","7d362d10":"code","894caa9a":"code","229a39b6":"code","31090068":"code","89dbf219":"code","75eb032e":"code","771f4915":"code","c40791ed":"code","502bae91":"code","8e56e54f":"code","5fe386d6":"code","49d0a402":"code","d8ff76e9":"code","3f6b9c0a":"code","dda484d7":"code","48bbf883":"code","79966110":"code","35126066":"code","e2ef41f7":"code","535b9562":"code","8672b7cd":"code","30a8e91e":"code","67bb202d":"code","f2694d19":"code","16545024":"code","f4c9e8ee":"code","7195c342":"code","19e30ad6":"code","097760e7":"code","d25d0b6f":"code","0b37b949":"markdown","20774f6f":"markdown","64e9db5e":"markdown","03a679d2":"markdown","3dee27cb":"markdown","c0f64a58":"markdown","332042f3":"markdown","72f30dfb":"markdown","baf5832b":"markdown","dacf8f6e":"markdown","0dd8927d":"markdown","9bf3483c":"markdown","6561fb4b":"markdown","df816f88":"markdown","132889ae":"markdown","575794af":"markdown","82c0187d":"markdown","91e0ff9f":"markdown","324f0737":"markdown","be9e3f23":"markdown","96070b38":"markdown","0d307891":"markdown","321286a7":"markdown","d66f949d":"markdown","e975d0ca":"markdown","1db99487":"markdown","60b9f18c":"markdown","d4004e6c":"markdown","4857c40f":"markdown","397e97a2":"markdown","dfe74df4":"markdown","dd72bacc":"markdown","acc572db":"markdown"},"source":{"1883ce54":"import os\nimport pandas as pd\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import VotingClassifier\nimport numpy as np","895d19ab":"train_path = os.path.join('..', 'input', 'titanic', 'train.csv')\ntest_path = os.path.join('..', 'input', 'titanic', 'test.csv')\n\ntrain, test = pd.read_csv(train_path), pd.read_csv(test_path)","59c6f99f":"train.head()","58dbd979":"train.shape","730c3056":"test.head()","1578362e":"test.shape","1aa92584":"train.info()","62ad9561":"train.describe()","899cd581":"train.describe(include=['O'])","5b4f154c":"plt.figure(figsize=(10, 5))\nsns.countplot(data=train, x='Survived')\nplt.show()","be7c4285":"plt.figure(figsize=(10, 5))\nsns.barplot(data=train, x='Pclass', y='Survived', ci=None)\nplt.show()","4c3f14cf":"plt.figure(figsize = (10, 7))\nsns.violinplot(y = 'Age', x = 'Survived', data = train)\nplt.show()","d8847dc4":"plt.figure(figsize=(10, 5))\nsns.countplot(data=train, y='SibSp')\nplt.show()","914ded74":"fig = plt.figure(figsize=(15, 8))\nsns.barplot(data=train, x='SibSp', y='Survived', ci=False)\nplt.show()","5822e124":"plt.figure(figsize=(10, 5))\nsns.countplot(data=train, y='Parch')\nplt.show()","d443355f":"plt.figure(figsize = (10, 7))\nsns.violinplot(y = 'Fare', x = 'Survived', data = train)\nplt.show()","1ae1d8cb":"plt.figure(figsize=(10, 5))\nsns.countplot(data=train, x='Survived', hue='Sex')\nplt.show()","925cd5aa":"plt.figure(figsize=(10, 5))\nsns.countplot(data=train, y='Embarked')\nplt.show()","f3c91cc4":"fig = plt.figure(figsize=(15, 8))\nsns.barplot(data=train, x='Embarked', y='Survived', ci=False)\nplt.show()","e3c3d419":"corr_matrix = train.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","9b187f8d":"num_features = ['Fare', 'Parch', 'SibSp', 'Age']\ncat_features = ['Sex', 'Pclass']\ntrain_prepared = train[num_features + cat_features]","e0932f92":"num_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('std_scaler', StandardScaler())\n])\n\ncat_pipeline = Pipeline([\n    ('hot_encoder', OneHotEncoder())\n])\n\nfull_pipeline = ColumnTransformer([\n    ('num', num_pipeline, num_features),\n    ('cat', cat_pipeline, cat_features)\n])","b5932f38":"X_train = full_pipeline.fit_transform(train_prepared)\ny_train = train['Survived']","83afeff5":"sgd_clf = SGDClassifier()\nsgd_clf.fit(X_train, y_train)","abd18133":"scores = cross_val_score(sgd_clf, X_train, y_train, scoring='accuracy', cv=3)","aaf7dc3e":"print('SGD Classfier score:', scores.mean())\nprint('SGD Classfier loss:', scores.std())","2fa3fb18":"sgd_scores = [scores.mean(), scores.std()]","a3ea544d":"param_grid = {'C': np.arange(0.5, 10.5, 0.5),\n              'penalty': ['l1', 'l2']}\n\ngs = GridSearchCV(estimator=LogisticRegression(),\n                  param_grid=param_grid, cv=3, scoring='accuracy',\n                  verbose=0, n_jobs=-1)\n\ngrid_result = gs.fit(X_train, y_train)","cbf16b0d":"best_params = grid_result.best_params_\nlr_model = grid_result.best_estimator_","a3c955f9":"scores = cross_val_score(lr_model, X_train, y_train, scoring='accuracy', cv=3)","8a54336f":"print('Logistic Regression CV score:', scores.mean())\nprint('Logistic Regression CV loss:', scores.std())\nprint('Best Logistic Regression Parameters:', best_params)","8d26755a":"log_scores = [scores.mean(), scores.std()]","cfc43bf6":"param_grid = {'gamma': ['scale', 'auto'],\n              'kernel': ['poly', 'rbf', 'sigmoid'],\n              'C' : [1e-4, 5e-4, 1e-3, 5e-3, 0.01, 0.05, 0.1, 0.5, 1., 1.5, 2, 3, 4, 5, 6, 7],\n              'degree': np.arange(1, 11, 1)}\n\n#define the grid search\ngs = GridSearchCV(estimator = SVC(),\n                  param_grid = param_grid, cv = 3, scoring = 'accuracy', \n                  verbose = 0, n_jobs = -1)\n\n#train the grid search\ngrid_result = gs.fit(X_train, y_train)","7d362d10":"best_params = grid_result.best_params_\nsvc_model = grid_result.best_estimator_","894caa9a":"scores = cross_val_score(svc_model, X_train, y_train, scoring='accuracy', cv=3)","229a39b6":"print('Support Vector Classifier score:', scores.mean())\nprint('Support Vector Classifier loss:', scores.std())\nprint('Best Logistic Regression Parameters:', best_params)","31090068":"svc_scores = [scores.mean(), scores.std()]","89dbf219":"param_grid = {'criterion': ['gini', 'entropy'],\n              'splitter': ['best', 'random'],\n              'max_depth': np.arange(2, 15, 1),\n              'min_samples_split': np.arange(2, 8, 1)}\n\n#define the grid search\ngs = GridSearchCV(estimator = DecisionTreeClassifier(),\n                  param_grid = param_grid, cv = 3, scoring = 'accuracy', \n                  verbose = 0, n_jobs = -1)\n\n#train the grid search\ngrid_result = gs.fit(X_train, y_train)","75eb032e":"best_params = grid_result.best_params_\ndtc_model = grid_result.best_estimator_","771f4915":"scores = cross_val_score(dtc_model, X_train, y_train, scoring='accuracy', cv=3)","c40791ed":"print('Decision Tree score:', scores.mean())\nprint('Decision Tree loss:', scores.std())\nprint('Best Logistic Regression Parameters:', best_params)","502bae91":"dtc_scores = [scores.mean(), scores.std()]","8e56e54f":"param_grid = {'criterion': ['gini', 'entropy'],\n              'n_estimators': np.arange(100, 1000, 100)}\n\n#define the grid search\ngs = GridSearchCV(estimator = RandomForestClassifier(),\n                  param_grid = param_grid, cv = 3, scoring = 'accuracy', \n                  verbose = 0, n_jobs = -1)\n\n#train the grid search\ngrid_result = gs.fit(X_train, y_train)","5fe386d6":"best_params = grid_result.best_params_\nrfc_model = grid_result.best_estimator_","49d0a402":"scores = cross_val_score(rfc_model, X_train, y_train, scoring='accuracy', cv=3)","d8ff76e9":"print('Random Forest score:', scores.mean())\nprint('Random Forest loss:', scores.std())\nprint('Best Logistic Regression Parameters:', best_params)","3f6b9c0a":"rfc_scores = [scores.mean(), scores.std()]","dda484d7":"base_estimator = [DecisionTreeClassifier(max_depth=1),\n                  DecisionTreeClassifier(max_depth=5),\n                  DecisionTreeClassifier(max_depth=10)]\n\nparam_grid = {'base_estimator': base_estimator,\n              'n_estimators': np.arange(50, 500, 50),\n              'learning_rate': np.arange(0.1, 2., 0.2),\n              'algorithm': ['SAMME', 'SAMME.R']}\n\n#define the grid search\ngs = GridSearchCV(estimator = AdaBoostClassifier(),\n                  param_grid = param_grid, cv = 3, scoring = 'accuracy', \n                  verbose = 0, n_jobs = -1)\n\n#train the grid search\ngrid_result = gs.fit(X_train, y_train)","48bbf883":"best_params = grid_result.best_params_\nada_model = grid_result.best_estimator_","79966110":"scores = cross_val_score(rfc_model, X_train, y_train, scoring='accuracy', cv=3)","35126066":"print('AdaBoost score:', scores.mean())\nprint('AdaBoost loss:', scores.std())\nprint('Best Logistic Regression Parameters:', best_params)","e2ef41f7":"ada_scores = [scores.mean(), scores.std()]","535b9562":"model_voting = VotingClassifier(estimators=[\n    ('sgd', sgd_clf),\n    ('lr', lr_model),\n    ('svc', svc_model),\n    ('dtc', dtc_model),\n    ('rfc', rfc_model),\n    ('ada', ada_model)\n], voting='hard')\n\nmodel_voting.fit(X_train, y_train)","8672b7cd":"scores = cross_val_score(model_voting, X_train, y_train, scoring='accuracy', cv=3)","30a8e91e":"print('Voting Classifier score:', scores.mean())\nprint('Voting Classifier loss:', scores.std())\nprint('Best Logistic Regression Parameters:', best_params)","67bb202d":"voting_scores = [scores.mean(), scores.std()]","f2694d19":"print('SVC score:', svc_scores[0])\nprint('SVC loss:', svc_scores[1])","16545024":"import joblib\n\njoblib.dump(svc_model, 'svc_model.sav')","f4c9e8ee":"test_prepared = test[num_features + cat_features]\nX_test = full_pipeline.fit_transform(test_prepared)","7195c342":"y_test = svc_model.predict(X_test)","19e30ad6":"y_test","097760e7":"y_pred = pd.DataFrame({'Survived': y_test})\n\nresults = pd.concat([test['PassengerId'], y_pred], axis=1, sort=False)\nresults.head()","d25d0b6f":"results.to_csv('results.csv', index=False)","0b37b949":"### 3. Age\n**Age missing values:** 177","20774f6f":"### 5. Parch\nparents \/ children aboard the Titanic","64e9db5e":"The majority of the passangers embarked from Southampton","03a679d2":"### 6. Fare","3dee27cb":"### Summary of categorical features","c0f64a58":"The majority of passengers did not have a spouse or sibling","332042f3":"## Logistic Regression","72f30dfb":"## Support Vector Classifier","baf5832b":"# Save best model","dacf8f6e":"### Summary of numerical features","0dd8927d":"We can see the vast majority who died was men.","9bf3483c":"## Looking for Correlations in numerical values","6561fb4b":"# Select and Train a Model","df816f88":"## Random Forest","132889ae":"### We will now explore these various features and how they are connected to survival","575794af":"# Prepare the Data","82c0187d":"The majority of passengers did not have a parents or children","91e0ff9f":"C = Cherbourg, Q = Queenstown, S = Southampton","324f0737":"## Voting Classifier","be9e3f23":"The SVC model is the best model with high accuracy and low loss.","96070b38":"### 2. Pclass\n1 = 1st, 2 = 2nd, 3 = 3rd","0d307891":"# Analyze Data","321286a7":"### 8. Embarked","d66f949d":"## SGDClassifier","e975d0ca":"### 7. Sex","1db99487":"### 1. Survivals\n0 = Not survived\n1 = Survived","60b9f18c":"### 4. SibSp\nsiblings \/ spouses aboard the Titanic","d4004e6c":"## Decision Tree","4857c40f":"# Predict Test Set","397e97a2":"Seems like is not a relevant data","dfe74df4":"# Import Data","dd72bacc":"## AdaBoost","acc572db":"I consider Pclass features like a categorical, because de scalar value represent a category."}}