{"cell_type":{"b757fb69":"code","cb3b61fd":"code","50fe5dbc":"code","45d39898":"code","15606dce":"code","6d95cabb":"code","b574457d":"code","34e9252f":"code","83e033d3":"code","e2c3988e":"code","d49c2009":"code","605a55c0":"code","13e2afd2":"code","2d7f7df1":"code","0b54d721":"code","4f3d8c42":"code","9be9ece8":"code","e2980154":"code","1124a9ae":"code","e2aaa063":"code","045b431f":"code","5b7e9cfb":"code","ca689438":"code","cc0f449f":"code","3bb3401c":"markdown","9bb15961":"markdown","66d2b4cb":"markdown","1f012e3c":"markdown","c2fc9482":"markdown","0f4b92b3":"markdown","73950381":"markdown","3e65af53":"markdown","e7dae6ea":"markdown","93c07a9a":"markdown","b399d117":"markdown","e3248c7a":"markdown","4abd99ec":"markdown","53eab54d":"markdown","e82bf9b3":"markdown","ecd813df":"markdown","05ee9199":"markdown","8e8a10d8":"markdown","a8eacca8":"markdown","4fb59681":"markdown","a170fb76":"markdown","4d178aba":"markdown","48dc64f4":"markdown","9e558878":"markdown","6df9d1c9":"markdown","78811829":"markdown","1d665914":"markdown","0d5c8ce0":"markdown","d943104b":"markdown","5c30a51f":"markdown"},"source":{"b757fb69":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        df = pd.read_csv(os.path.join(dirname, filename))\n        \ndf.head()\n","cb3b61fd":"df.isnull().sum()","50fe5dbc":"df['Year'].fillna(df['Year'].mode()[0], inplace=True)\n\ndf['Publisher'].replace(np.nan, df['Publisher'].mode()[0], inplace=True)\n\ndf.isnull().sum()","45d39898":"np.unique(df['Platform'])","15606dce":"df['Platform'].replace('2600', 'Atari', inplace=True)","6d95cabb":"np.unique(df['Platform'])","b574457d":"df = df[df.Year < 2017]\ndf.head()","34e9252f":"import matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nimport pandas as pd","83e033d3":"    g_sales_over_years = df.groupby(['Year'])['Global_Sales'].sum()\n\n    box_plot_df = pd.DataFrame(columns=[str(int(i)) for i in g_sales_over_years.index])\n\n    for i in g_sales_over_years.index:\n        box_plot_df.at[0, str(int(i))] = g_sales_over_years[i]\n\n    plt.figure(figsize=(13.7, 9))\n\n    sns.barplot(x='variable', y='value', data=pd.melt(box_plot_df), palette='plasma', ec='Black')\n\n    plt.ylabel('Global Sales (in Millions)', fontsize=22)\n    plt.xlabel('Year', fontsize=22)\n    plt.title('Global Sales (in Millions) throughout the Years', fontsize=24, fontweight='bold')\n    plt.xticks(rotation=45, fontsize=16)\n    plt.yticks(fontsize=16)\n    plt.show()","e2c3988e":" style.use('seaborn-poster')\n\nf, ax = plt.subplots()\nplatform_releases = df['Platform'].value_counts()\n\nsns.barplot(x=platform_releases.values, y=platform_releases.index, ec='Black')\nax.set_title('Platforms with the Most Releases', fontweight='bold', fontsize=23)\nax.set_xlabel('Releases', fontsize=18)\nax.set_xlim(0, max(platform_releases.values)+130)\nax.set_ylabel('Platform', fontsize=18)\n\nfor p in ax.patches:\n    width = p.get_width()\n    ax.text(width + 62,\n            p.get_y() + p.get_height() \/ 2. + 0.28,\n            int(width),\n            ha=\"center\", fontsize=14)\n\nplt.show()","d49c2009":"style.use('seaborn-poster')\ngenre_global_sales = df.groupby(['Genre'])['Global_Sales'].sum().sort_values(ascending=False)\nprint(genre_global_sales)\nsns.barplot(x=genre_global_sales.index, y=genre_global_sales.values, ec='Black', palette='twilight')\nplt.xticks(rotation=20, fontsize=12)\nplt.xlabel('Genre', fontsize=18)\nplt.ylabel('Global Sales (in Millions)', fontsize=18)\nplt.title('Global Sales of Genres from 1980-2016', fontweight='bold', fontsize=22)\nplt.tight_layout()\nplt.show()","605a55c0":"top5_genres_list = df.groupby(['Genre'])['Global_Sales'].sum().sort_values(ascending=False).head(5).index\n\ntop5_genre_df = df[df.Genre.isin(top5_genres_list)]\nfig, (ax0,ax1) = plt.subplots(2,2, figsize=(17,10))\n\nfig.suptitle('Top 5 Genres and their Sales (in Millions) Respective to their Country', fontsize=20, fontweight = 'bold')\n\nsns.lineplot(x='Year', y='NA_Sales', hue='Genre', data=top5_genre_df, ci=None, ax=ax0[0], palette='Set1')\n\nsns.lineplot(x='Year', y='EU_Sales', hue='Genre', data=top5_genre_df, ci=None, ax=ax0[1], palette='Set1')\n\nsns.lineplot(x='Year', y='JP_Sales', hue='Genre', data=top5_genre_df, ci=None, ax=ax1[0], palette='Set1')\n\nsns.lineplot(x='Year', y='Other_Sales', hue='Genre', data=top5_genre_df, ci=None, ax=ax1[1], palette='Set1')\n\nax0[0].legend(loc='upper right')\nax0[1].legend(loc='upper right')\nax1[0].legend(loc='upper right')\nax1[1].legend(loc='upper right')\n\nax1[1].set_ylim(-0.1,1.6)\n\nax0[0].set_ylabel('NA Sales (in Millions)', fontsize=16)\nax0[1].set_ylabel('EU Sales (in Millions)', fontsize=16)\nax1[0].set_ylabel('Japan Sales (in Millions)', fontsize=16)\nax1[1].set_ylabel('Other Sales (in Millions)', fontsize=16)\n\nax0[0].set_xlabel('Year', fontsize=16)\nax0[1].set_xlabel('Year', fontsize=16)\nax1[0].set_xlabel('Year', fontsize=16)\nax1[1].set_xlabel('Year', fontsize=16)\n\n\nplt.show()","13e2afd2":"style.use('seaborn-poster')\n\ntop10_publishers_list = df.groupby(['Publisher'])['Global_Sales']\\\n    .sum()\\\n    .sort_values(ascending=False).head(10).index\n\nzero_to_five_publishers_list = top10_publishers_list[0:5]\nfive_to_ten_publishers_list = top10_publishers_list[5:]\nzero_to_five_publishers_df = df[df.Publisher.isin(zero_to_five_publishers_list)]\nfive_to_ten_publishers_df = df[df.Publisher.isin(five_to_ten_publishers_list)]\n\n\nfig, (ax0, ax1) = plt.subplots(2,1)\nplt.subplots_adjust(hspace=0.33, top=.95)\n\n# 1 - 5 in Global Sales\nsns.lineplot(x='Year', y='Global_Sales',\n             data=zero_to_five_publishers_df, hue='Publisher',\n             ci=None, ax=ax0, palette='Set1')\n\nax0.legend(prop={'size':11.5})\n\n# 5-10 in Global Sales\nsns.lineplot(x='Year', y='Global_Sales',\n             data=five_to_ten_publishers_df, hue='Publisher',\n             ci=None, ax=ax1, palette='Set1')\n\nax0.set_title('Top 1-5 Publishers by Global Sales')\nax0.set_ylabel('Global Sales (in Millions)')\n\nax0.spines['right'].set_visible(False)\nax0.spines['top'].set_visible(False)\n\nax1.set_title('Top 5-10 Publishers by Global Sales')\nax1.set_ylabel('Global Sales (in Millions)')\nax1.legend(loc='upper center', prop={'size': 11.5})\nax1.set_ylim(-0.5, 5)\n\nax1.spines['right'].set_visible(False)\nax1.spines['top'].set_visible(False)\n\nplt.show()","2d7f7df1":"from sklearn.preprocessing import LabelEncoder","0b54d721":"categorical_labels = ['Platform', 'Genre', 'Publisher']\nnumerical_lables = ['Global_Sales']\nenc = LabelEncoder()\nencoded_df = pd.DataFrame(columns=['Platform', 'Genre', 'Publisher', 'Global_Sales'])\n\nfor label in categorical_labels:\n    temp_column = df[label]\n\n    encoded_temp_col = enc.fit_transform(temp_column)\n\n    encoded_df[label] = encoded_temp_col\n\nfor label in numerical_lables:\n    encoded_df[label] = df[label].values\n\nencoded_df.head()","4f3d8c42":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.model_selection import train_test_split","9be9ece8":"x = encoded_df.iloc[:, 0:3]\ny = encoded_df.iloc[:,3:]\n\nscalar = StandardScaler()\n\nx = scalar.fit_transform(x)\n\nlinear_reg = LinearRegression()\n\nlinear_reg.fit(x, y)\n\ny_pred = linear_reg.predict(x)\n\nr2 = r2_score(y, y_pred)\n\nprint('\\nLinear Regression Results without Cross Validation:')\n\nprint(f'MAE in $ (Millions): {mean_absolute_error(y_pred, y)}')\n\nprint(f'MSE in $ (Millions): {mean_squared_error(y_pred, y)}')\n\nprint(f'R2 Coeff: {r2}')","e2980154":"linear_reg = LinearRegression()\n\ny_pred = cross_val_predict(linear_reg, x, y, cv=5)\n\nr2 = r2_score(y, y_pred)\n\nprint(f'MAE in Sales (Millions): {mean_absolute_error(y_pred, y)}')\n\nprint(f'MSE in Sales (Millions): {mean_squared_error(y_pred, y)}')\n\nprint(f'R2 Coeff: {r2}')","1124a9ae":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV","e2aaa063":"x = scalar.fit_transform(x)\n\nridge = Ridge()\n\ngrid = GridSearchCV(ridge, param_grid={'alpha':range(0,10)}, refit=True)\n\ny_pred = cross_val_predict(grid, x,y, cv=5)\n\nr2 = r2_score(y, y_pred)\n\nprint(f'MAE in Sales (Millions): {mean_absolute_error(y_pred, y)}')\n\nprint(f'MSE in Sales (Millions): {mean_squared_error(y_pred, y)}')\n\nprint(f'R2 Coeff: {r2}')","045b431f":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV","5b7e9cfb":"lasso = Lasso()\n\ngrid = GridSearchCV(lasso, param_grid={'alpha': range(1, 10)}, refit=True)\n\ny_pred = cross_val_predict(grid, x, y, cv=5)\n\nr2 = r2_score(y, y_pred)\n\nprint(f'MAE in Sales (Millions): {mean_absolute_error(y_pred, y)}')\n\nprint(f'MSE in Sales (Millions): {mean_squared_error(y_pred, y)}')\n\nprint(f'R2 Coeff: {r2}')","ca689438":"def linear_regression_lasso_model(x, y, scalar):\n    x_train, x_test, y_train, y_test = train_test_split(x, y)\n\n    x_train = scalar.fit_transform(x_train)\n    x_test = scalar.transform(x_test)\n\n    lasso = Lasso(alpha=1)\n\n    lasso.fit(x_train, y_train)\n\n    y_pred = lasso.predict(x_test)\n\n    return {'MAE': mean_absolute_error(y_test, y_pred),\n            'MSE': mean_squared_error(y_test, y_pred)}","cc0f449f":"lasso_result_list = list()\nfor i in range(0,10):\n    lasso_result_list.append(linear_regression_lasso_model(x,y,scalar))\n\nmae = list()\nmse = list()\n\nfor result in lasso_result_list:\n    mae.append(result['MAE'])\n    mse.append(result['MSE'])\n\nprint(f'MAE in Sales (Millions): {np.mean(mae)}')\nprint(f'MSE in Sales (Millions): {np.mean(mse)}')\nprint('\\nTest by Test Results:')\n\nfor counter in range(0,len(lasso_result_list)):\n    print(f'Test {counter+1}:\\n\\tMAE: {mae[counter]}\\n\\tMSE: {mse[counter]}')","3bb3401c":"# Predictive Modeling\n\nSo I plan to have different types of predicting going on, but as of now this is what I have:  \nLinear Regression: Predicts the global sales of a product based on Publisher, Genre, and Platform\n\n## Linear Regression\n","9bb15961":"I found it interesting that PS2 had the most releases over all of the previous consoles -- and that the Nintendo DS had the most. ","66d2b4cb":"I feel like Action is a meta genre, as all genres here can be action games.","1f012e3c":"## Platform Releases","c2fc9482":"# Top 5 Genres and their Sales Over the Years Respective of their Countries  \nTitle is a mouthfull, but basically just showing the sales of the top 5 genres (classified by most sales) separated by the individual country.","0f4b92b3":"Not bad,but not good. The MAE here incidicts how off I am from the correct answer by 1 being equal to 1 million in sales.","73950381":"# Table of Contents\n1. Data Cleaning\n2. EDA\n3. Preprocessing\n4. Modeling\n5. Summary\nLet's begin by importing what we need for now and read the file","3e65af53":"### Preprocessing\nI store in memory the labels that I am going to later use to build my dataframe solely from the features and label that I need.  \nMy plan is to label encode all the categorical labels  \nLet's import what we need:  ","e7dae6ea":"It seems that Lasso Regression was able to perform the best in terms of MAE and MSE. I also optimized Alpha with GridSearch and found it to be 1. So in my actual model, that is the alpha parameter I will be using. ","93c07a9a":"Thank you for taking the time to explore my kernel!\nIf you have any tips, criticisms, or suggestions, please feel free to tell me.","b399d117":"## Global Sales Over the Years","e3248c7a":"Great. Now we can move on!  \nWhile looking through the data, I noticed this:","4abd99ec":"While graphing, I noticed there was a lack of Years in 2017+. So I removed anything from 2017 and up.","53eab54d":"2600? A.K.A Atari","e82bf9b3":"Ok. That is all the data cleaning I'll be doing.","ecd813df":"Personally, I found it very interesting that the peak was in 2007-2009 considering that nowadays you can download copies of the game instead of having to go to GameStop or something of the sort. (Note that the peak is a bit taller because we filled the nas with the mode)","05ee9199":"## Results from Different Models","8e8a10d8":"# Publishers' Global Sales \nI was curious to see how the individual publishers did over time.  \nI took the 10 publishers with the most global sales and spit them into two graphs.","a8eacca8":"Due to missing values, I believe this is why Role-Playing has really weird behavior in the Other Sales graph.","4fb59681":"### Lasso Regression with Cross Validation","a170fb76":"## Most Popular Genres","4d178aba":"# Summary\n\nBy using cross validation, I was able to get a good idea of which model would perform best. In this case, Lasso Regression outperformed the models by around 10,000 sales. When it came to actually working against the test data set, it performed really well--averaging a MAE of about 580,000 sales. This isn't too bad, considering that the scale of Global Sales is in the millions for this data set. So while it is not pinpoint accurate, it can still give some indication of how a game will do depending on the features I used.","48dc64f4":"Pretty interesting timeline for the Sega genesis. Similar behavior to that of Activisions. ","9e558878":"## Predictive Modeling with Lasso Regression\nI run the model through 10 different test train splits to see how much the model results variate.","6df9d1c9":"### Without Cross Validation","78811829":"### With Cross Validation","1d665914":"# Data Cleaning","0d5c8ce0":"### Ridge Regression with Cross Validation","d943104b":"Nice. Now let's check for any good ol'  ![image](https:\/\/hips.hearstapps.com\/hmg-prod.s3.amazonaws.com\/images\/supernannyjofrostreturns-1573063913.jpg?crop=1.00xw:0.751xh;0,0.0523xh&resize=768:*)","5c30a51f":"# EDA\nWork in progress.  \n  \nLet's import what we need"}}