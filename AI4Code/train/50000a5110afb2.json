{"cell_type":{"1a33ae10":"code","048ef8c8":"code","bf5be1e1":"code","6144131f":"code","0204cfe3":"code","b04d4024":"code","914eb6bb":"code","35c9998f":"code","01a0f7d6":"code","a60014a1":"code","3e0083fa":"code","a82da4a4":"code","bd6540ba":"code","5484e07f":"code","48b9454c":"code","9a68d15c":"markdown","8a10bae9":"markdown","f0fbc603":"markdown","c67587d1":"markdown","8b889f5e":"markdown"},"source":{"1a33ae10":"!pip install kaggle-environments -U > \/dev\/null 2>&1\n!cp -r ..\/input\/lux-ai-2021\/* .","048ef8c8":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\nimport numpy as np\nimport math\nimport json\nfrom pathlib import Path\nimport random\nfrom tqdm.notebook import tqdm\nfrom matplotlib import pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import Sequence\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split","bf5be1e1":"def seed_everything(seed_value):\n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n    tf.random.set_seed(seed_value)\n\nseed = 42\nseed_everything(seed)","6144131f":"def to_label(action):\n    strs = action.split(' ')\n    unit_id = strs[1]\n    if strs[0] == 'm':\n        label = {'c': None, 'n': 0, 's': 1, 'w': 2, 'e': 3}[strs[2]]\n    elif strs[0] == 'bcity':\n        label = 4\n    else:\n        label = None\n    return unit_id, label\n\n\ndef depleted_resources(obs):\n    for u in obs['updates']:\n        if u.split(' ')[0] == 'r':\n            return False\n    return True\n\n\ndef create_dataset_from_json(episode_dir, team_name='Toad Brigade'): \n    obses = {}\n    x = []\n    y = []\n    \n    episodes = list(Path(episode_dir).glob('*[0-9].json'))\n    for filepath in tqdm(episodes): \n        with open(filepath) as f:\n            json_load = json.load(f)\n\n        ep_id = json_load['info']['EpisodeId']\n        index = np.argmax([r or 0 for r in json_load['rewards']])\n        if json_load['info']['TeamNames'][index] != team_name:\n            continue\n\n        for i in range(len(json_load['steps'])-1):\n            if json_load['steps'][i][index]['status'] == 'ACTIVE':\n                actions = json_load['steps'][i+1][index]['action']\n                obs = json_load['steps'][i][0]['observation']\n                \n                if depleted_resources(obs):\n                    break\n                \n                obs['player'] = index\n                obs = dict([\n                    (k,v) for k,v in obs.items() \n                    if k in ['step', 'updates', 'player', 'width', 'height']\n                ])\n                obs_id = f'{ep_id}_{i}'\n                obses[obs_id] = obs\n                                \n                for action in actions:\n                    unit_id, label = to_label(action)\n                    if label is not None:\n                        x.append((obs_id, unit_id))\n                        y.append(label)\n\n    return obses, x, y","0204cfe3":"episode_dir = '..\/input\/lux-ai-episodes'\nobses, x, y = create_dataset_from_json(episode_dir)\nprint('Observations:', len(obses), 'Samples:', len(x))","b04d4024":"actions = ['Move North', 'Move South', 'Move West', 'Move East', 'Build City']\nfor value, count in zip(*np.unique(y, return_counts=True)):\n    print(f'{actions[value]:<11}: {count:>3}')","914eb6bb":"# Input for Neural Network\ndef make_uid2pos(obs):\n    ret = {}\n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        \n        if input_identifier == 'u':\n            x = int(strs[4]) \n            y = int(strs[5]) \n            ret[strs[3]] = (x,y)\n    return ret\n\ndef make_array(obs):\n    width, height = obs['width'], obs['height']\n    x_shift = (32 - width) \/\/ 2\n    y_shift = (32 - height) \/\/ 2\n    cities = {}\n    \n    b = np.zeros((32, 32, 20), dtype=np.float32)\n    \n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        \n        if input_identifier == 'u':\n            x = int(strs[4]) + x_shift\n            y = int(strs[5]) + y_shift\n            wood = int(strs[7])\n            coal = int(strs[8])\n            uranium = int(strs[9])\n            team = int(strs[2])\n            cooldown = float(strs[6])\n            idx = 2 + (team - obs['player']) % 2 * 3\n            b[x, y, idx:idx + 3] = (\n                1,\n                cooldown \/ 6,\n                (wood + coal + uranium) \/ 100\n            )\n        elif input_identifier == 'ct':\n            # CityTiles\n            team = int(strs[1])\n            city_id = strs[2]\n            x = int(strs[3]) + x_shift\n            y = int(strs[4]) + y_shift\n            idx = 8 + (team - obs['player']) % 2 * 2\n            b[x, y, idx:idx + 2] = (\n                1,\n                cities[city_id]\n            )\n        elif input_identifier == 'r':\n            # Resources\n            r_type = strs[1]\n            x = int(strs[2]) + x_shift\n            y = int(strs[3]) + y_shift\n            amt = int(strs[4])\n            b[x, y, {'wood': 12, 'coal': 13, 'uranium': 14}[r_type]] = amt \/ 800\n        elif input_identifier == 'rp':\n            # Research Points\n            team = int(strs[1])\n            rp = int(strs[2])\n            b[:, :, 15 + (team - obs['player']) % 2] = min(rp, 200) \/ 200\n        elif input_identifier == 'c':\n            # Cities\n            city_id = strs[2]\n            fuel = float(strs[3])\n            lightupkeep = float(strs[4])\n            cities[city_id] = min(fuel \/ lightupkeep, 10) \/ 10\n    \n    # Day\/Night Cycle\n    b[:, :, 17] = obs['step'] % 40 \/ 40\n    # Turns\n    b[:, :, 18] = obs['step'] \/ 360\n    # Map Size\n    b[x_shift:32 - x_shift, y_shift:32 - y_shift, 19] = 1\n\n    return b\n\n\nclass LuxSequence(Sequence):\n    def __init__(self, obses, x_set, y_set, batch_size):\n        self.obses = obses\n        self.x, self.y = x_set, y_set\n        self.batch_size = batch_size\n        self.obses_array = {k: make_array(obs) for k, obs in obses.items()}\n        self.uid2pos = {k: make_uid2pos(obs) for k, obs in obses.items()}\n        self.obs_size = {k: obs['width'] for k, obs in obses.items()}\n        del self.obses\n        \n    def __len__(self):\n        return math.ceil(len(self.x) \/ self.batch_size)\n\n    def __getitem__(self, idx):\n        batch_x = self.x[\n            idx * self.batch_size:(idx + 1) * self.batch_size]\n        batch_y = self.y[\n            idx * self.batch_size:(idx + 1) * self.batch_size]\n        \n        states = []\n        for ind in range(len(batch_x)):\n            obs_id, unit_id = batch_x[ind]\n            unit_pos = self.uid2pos[obs_id][unit_id]\n            size = self.obs_size[obs_id]\n            state = self.obses_array[obs_id]\n            \n            shift = (32 - size) \/\/ 2\n            x = unit_pos[0] + shift\n            y = unit_pos[1] + shift\n            state[:, :, :2] = 0\n            state[x, y, 0] = state[x, y, 2]\n            state[x, y, 1] = state[x, y, 4]\n            states.append(state)\n            \n        states = np.array(states)        \n        actions = np.array(batch_y)\n        return states, actions","35c9998f":"# Neural Network for Lux AI\ndef create_luxnet(blocks=12, filters=32):\n    inputs = layers.Input((32, 32, 20))\n    x = layers.Conv2D(filters, 3, padding='same')(inputs)\n    x = layers.BatchNormalization()(x)\n    x = layers.ReLU()(x)\n    \n    for _ in range(blocks):\n        residual = layers.Conv2D(filters, 3, padding='same')(x)\n        residual = layers.BatchNormalization()(residual)\n        x = layers.Add()([x, residual])\n        x = layers.ReLU()(x)\n\n    x = tf.reduce_sum(x * inputs[:,:,:,:1], [1, 2])\n    outputs = layers.Dense(5, activation='softmax')(x)    \n    \n    model = Model(inputs, outputs)\n    return model","01a0f7d6":"model = create_luxnet()\nmodel.summary()","a60014a1":"model.compile(\n    optimizer='adam', \n    loss='sparse_categorical_crossentropy', \n    metrics=['accuracy']\n)    \nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.1, random_state=42, stratify=y)\nbatch_size = 64\ntrain_seq = LuxSequence(obses, x_train, y_train, batch_size)\nval_seq = LuxSequence(obses, x_val, y_val, batch_size)\nmodel_checkpoint = tf.keras.callbacks.ModelCheckpoint(\n    filepath='model.h5',\n    monitor='val_accuracy',\n    mode='max',\n    save_best_only=True\n)","3e0083fa":"history = model.fit(\n    train_seq, \n    validation_data=val_seq,\n    callbacks=[model_checkpoint],\n    epochs=15,\n    workers=2,\n    use_multiprocessing=True\n)","a82da4a4":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\n\nepochs = range(len(accuracy))\n\nplt.figure()\n\nplt.plot(epochs, accuracy, label='Training accuracy')\nplt.plot(epochs, val_accuracy, label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc='lower right')\n\nplt.show()","bd6540ba":"%%writefile agent.py\nimport os\nimport numpy as np\nimport tensorflow as tf\nfrom lux.game import Game\n\n\npath = '\/kaggle_simulations\/agent' if os.path.exists('\/kaggle_simulations') else '.'\nmodel = tf.keras.models.load_model(f'{path}\/model.h5')\n\n\ndef make_input(obs, unit_id):\n    width, height = obs['width'], obs['height']\n    x_shift = (32 - width) \/\/ 2\n    y_shift = (32 - height) \/\/ 2\n    cities = {}\n    \n    b = np.zeros((32, 32, 20), dtype=np.float32)\n    \n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        \n        if input_identifier == 'u':\n            x = int(strs[4]) + x_shift\n            y = int(strs[5]) + y_shift\n            wood = int(strs[7])\n            coal = int(strs[8])\n            uranium = int(strs[9])\n            if unit_id == strs[3]:\n                # Position and Cargo\n                b[x, y, :2] = (\n                    1,\n                    min(wood + coal + uranium, 100) \/ 100\n                )\n            # Units\n            team = int(strs[2])\n            cooldown = float(strs[6])\n            idx = 2 + (team - obs['player']) % 2 * 3\n            b[x, y, idx:idx + 3] = (\n                1,\n                cooldown \/ 6,\n                min(wood + coal + uranium, 100) \/ 100\n            )\n        elif input_identifier == 'ct':\n            # CityTiles\n            team = int(strs[1])\n            city_id = strs[2]\n            x = int(strs[3]) + x_shift\n            y = int(strs[4]) + y_shift\n            idx = 8 + (team - obs['player']) % 2 * 2\n            b[x, y, idx:idx + 2] = (\n                1,\n                cities[city_id]\n            )\n        elif input_identifier == 'r':\n            # Resources\n            r_type = strs[1]\n            x = int(strs[2]) + x_shift\n            y = int(strs[3]) + y_shift\n            amt = int(strs[4])\n            b[x, y, {'wood': 12, 'coal': 13, 'uranium': 14}[r_type]] = amt \/ 800\n        elif input_identifier == 'rp':\n            # Research Points\n            team = int(strs[1])\n            rp = int(strs[2])\n            b[:, :, 15 + (team - obs['player']) % 2] = min(rp, 200) \/ 200\n        elif input_identifier == 'c':\n            # Cities\n            city_id = strs[2]\n            fuel = float(strs[3])\n            lightupkeep = float(strs[4])\n            cities[city_id] = min(fuel \/ lightupkeep, 10) \/ 10\n    \n    # Day\/Night Cycle\n    b[:, :, 17] = obs['step'] % 40 \/ 40\n    # Turns\n    b[:, :, 18] = obs['step'] \/ 360\n    # Map Size\n    b[x_shift:32 - x_shift, y_shift:32 - y_shift, 19] = 1\n\n    return b\n\n\ngame_state = None\ndef get_game_state(observation):\n    global game_state\n    \n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation[\"player\"]\n    else:\n        game_state._update(observation[\"updates\"])\n    return game_state\n\n\ndef in_city(pos):    \n    try:\n        city = game_state.map.get_cell_by_pos(pos).citytile\n        return city is not None and city.team == game_state.id\n    except:\n        return False\n\n\ndef call_func(obj, method, args=[]):\n    return getattr(obj, method)(*args)\n\n\nunit_actions = [('move', 'n'), ('move', 's'), ('move', 'w'), ('move', 'e'), ('build_city',)]\ndef get_action(policy, unit, dest):\n    for label in np.argsort(policy)[::-1]:\n        act = unit_actions[label]\n        pos = unit.pos.translate(act[-1], 1) or unit.pos\n        if pos not in dest or in_city(pos):\n            return call_func(unit, *act), pos \n            \n    return unit.move('c'), unit.pos\n\n\ndef agent(observation, configuration):\n    global game_state\n    \n    game_state = get_game_state(observation)    \n    player = game_state.players[observation.player]\n    actions = []\n    \n    # City Actions\n    unit_count = len(player.units)\n    for city in player.cities.values():\n        for city_tile in city.citytiles:\n            if city_tile.can_act():\n                if unit_count < player.city_tile_count: \n                    actions.append(city_tile.build_worker())\n                    unit_count += 1\n                elif not player.researched_uranium():\n                    actions.append(city_tile.research())\n                    player.research_points += 1\n    \n    # Worker Actions\n    units = [\n        unit for unit in player.units\n        if unit.can_act() and (game_state.turn % 40 < 30 or not in_city(unit.pos))\n    ]\n    states = np.array([make_input(observation, unit.id) for unit in units])\n    \n    if len(states) > 0:\n        policies = model.predict(states)\n\n        dest = []\n        for policy, unit in zip(policies, units):\n            action, pos = get_action(policy, unit, dest)\n            actions.append(action)\n            dest.append(pos)\n\n    return actions","5484e07f":"from kaggle_environments import make\n\nenv = make(\"lux_ai_2021\", configuration={\"width\": 12, \"height\": 12, \"loglevel\": 1, \"annotations\": True}, debug=True)\nsteps = env.run(['agent.py', 'agent.py'])\nenv.render(mode=\"ipython\", width=1200, height=800)","48b9454c":"!tar -czf submission.tar.gz *","9a68d15c":"# Training","8a10bae9":"# Preprocessing","f0fbc603":"# Submission","c67587d1":"In the original code by [sazuma](https:\/\/www.kaggle.com\/shoheiazuma\/lux-ai-imitation-learning-keras), one epoch took approximately 140 seconds","8b889f5e":"### \u26a1 This a faster version of [sazuma](https:\/\/www.kaggle.com\/shoheiazuma)'s [Lux AI Imitation Learning Keras](https:\/\/www.kaggle.com\/shoheiazuma\/lux-ai-imitation-learning-keras).\nThe difference is \u2248 640 seconds compared to 2096 seconds (train loop only time). Changes are made to `make_input` function and `__getitem__` in `LuxSequence` (inspired by similar speed up version of sazuma's Torch version of [imitation learning notebook](https:\/\/www.kaggle.com\/shoheiazuma\/lux-ai-with-imitation-learning) made by [Splend1dChan](https:\/\/www.kaggle.com\/a24998667\/fast-lux-ai-with-il-cached-inputs)."}}