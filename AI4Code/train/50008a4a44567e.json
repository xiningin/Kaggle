{"cell_type":{"1c548723":"code","7754a3f2":"code","5a9db8ad":"code","a2ad167d":"code","430c359b":"code","58c3aa97":"code","f308cf66":"code","e79599fc":"code","8451e8dc":"code","8d768877":"code","651e26b2":"code","6c821975":"code","da9fd728":"code","74535d8c":"code","251e7a60":"code","3c0f386f":"code","f85d7b80":"code","798c1ecb":"code","5d122c41":"markdown"},"source":{"1c548723":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7754a3f2":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping","5a9db8ad":"import h5py\nh5f = h5py.File('\/kaggle\/input\/street-view-house-nos-h5-file\/SVHN_single_grey1.h5', 'r')","a2ad167d":"# Load the training, test and validation set\nx_train = h5f['X_train'][:]\ny_train = h5f['y_train'][:]\nx_test = h5f['X_test'][:]\ny_test = h5f['y_test'][:]\n\n\n# Close this file\nh5f.close()","430c359b":"import matplotlib.pyplot as plt","58c3aa97":"fig, axes = plt.subplots(nrows=5,ncols=5)\nfig.figsize=(15,12)\nc = 0\nfor i in range(0,5):\n    for j in range(0, 5):\n        axes[i,j].imshow(x_test[c,...])\n        c+=1","f308cf66":"# input image dimensions\nimg_rows, img_cols = 32, 32\n\n#Keras expects data to be in the format (N_E.N_H,N_W,N_C)\n#N_E = Number of Examples, N_H = height, N_W = Width, N_C = Number of Channels.\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\ninput_shape = (img_rows, img_cols, 1)","e79599fc":"x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\n#Normalizing the input\nx_train \/= 255.0\nx_test \/= 255.0\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","8451e8dc":"batch_size = 128\nnum_classes = 10\nepochs = 3 # 12","8d768877":"y_train[:10]","651e26b2":"from tensorflow.keras.utils import to_categorical\ny_train_ohe = to_categorical(y_train)","6c821975":"y_train_ohe[:10]","da9fd728":"y_test_ohe = to_categorical(y_test)\ny_test_ohe.shape","74535d8c":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size=(4,4), input_shape=(32, 32, 1), activation='relu', padding='same', strides=1))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=2))\n\nmodel.add(Conv2D(filters = 64, kernel_size=(3,3), activation='relu', padding='valid', strides=1))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=2))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=1024, activation='relu'))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Dense(units=10, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n#model.summary()","251e7a60":"%%time\nhistory = model.fit(x_train, y_train_ohe, batch_size=batch_size, epochs=epochs, validation_split=0.1)","3c0f386f":"model.evaluate(x_test, y_test_ohe, verbose=0)","f85d7b80":"pd.DataFrame(history.history).plot(figsize=(10,6))\nplt.grid(True)\nplt.show()","798c1ecb":"history.history","5d122c41":"Pre-processing the dataset <br>\nNormalizing the input"}}