{"cell_type":{"eff2f21a":"code","76128113":"code","a5ec681b":"code","d247bb48":"code","ea71318a":"code","d90dc6a4":"code","bfdcc4d8":"code","c8d23c86":"code","18e3f931":"code","aa858923":"code","ab2967f7":"code","14d3c697":"code","088d5420":"code","a3ee1123":"code","ce82ae77":"code","2eee245c":"code","6c4b4c92":"code","6b8d820b":"code","b5a31047":"code","d4062de8":"code","d410c6cc":"code","9613bf5f":"code","6219000f":"code","7a3be077":"code","1520cb5b":"code","9d2c9564":"markdown","7285018a":"markdown","905e9cf9":"markdown","80270bcd":"markdown","5dcccf5f":"markdown","2a40df4f":"markdown","d2ef5df8":"markdown","91fa6523":"markdown","f51991dd":"markdown","c0ff8643":"markdown","ff559632":"markdown"},"source":{"eff2f21a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76128113":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import figure\nimport scipy.stats as stats\n\ndf = pd.read_csv('..\/input\/fifa19\/data.csv')\ndf.head()","a5ec681b":"df.info()","d247bb48":"#Percent of NA\n(df.isnull().sum().sum())\/(df.shape[0]*df.shape[1])*100","ea71318a":"#Removing NA values\ndf = df.fillna(method = 'ffill').fillna(method='bfill')","d90dc6a4":"#Searching for duplicates\ndf.duplicated().sum()","bfdcc4d8":"#Age distribuition\nplt.figure(figsize=(14,7))\n\nsns.distplot(x=df['Age'], bins =60)\nplt.title('Age distribution')\nplt.show()","c8d23c86":"#Counting nationality\nnation_count = df['Nationality'].value_counts().reset_index().set_index('index').head(20).rename(columns={'Nationality': 'Count'})\nnation_count","18e3f931":"#Plotting\nfig, ax = plt.subplots(figsize=(14,7))\n\nsns.barplot(nation_count['Count'], nation_count.index)\nfor i,v in enumerate(nation_count['Count']):\n    ax.text(v, i+0.1, str(v))\n    \n\nplt.xlabel('Count')\nplt.ylabel('Nationality')\nplt.title('Nationality count')\nplt.show()","aa858923":"#Counting club\nclub_count= df['Club'].value_counts().reset_index().set_index('index').head(10).rename(columns={'Club':'Count'})\n","ab2967f7":"fig, ax = plt.subplots(figsize=(14,7))\nsns.barplot(club_count['Count'], club_count.index)\nfor i,v in enumerate(club_count['Count']):\n    ax.text(v,i,str(v))\n    \nplt.xlabel('Count')\nplt.ylabel('Club')\nplt.title('Club count')\nplt.show()","14d3c697":"#Preferred foot count\npreferred_foot = df['Preferred Foot'].value_counts().reset_index().set_index('index')\npreferred_foot","088d5420":"#Plotting\nfig, ax = plt.subplots(figsize=(14,7))\nsns.barplot(preferred_foot['Preferred Foot'], preferred_foot.index)\nfor i, v in enumerate(preferred_foot['Preferred Foot']):\n    ax.text(v, i, str(v))\nplt.xlabel('Count')\nplt.ylabel('Preferred Foot')\nplt.title('Preferred foot count')\nplt.show()","a3ee1123":"#Correlation between foot and skill (1 - Right foot, 0 - Left foot)\nskill_foot=df[['Skill Moves', 'Preferred Foot']].sample(500)\nskill_foot['Preferred Foot'] = skill_foot['Preferred Foot'].map(lambda x: 1 if(x=='Right') else 0)\nskill_foot","ce82ae77":"#Foot and skill correltion numerically\nstats.pointbiserialr(skill_foot['Skill Moves'], skill_foot['Preferred Foot'])[0]","2eee245c":"#Plotting\nfig, ax = plt.subplots(figsize=(14,7))\nsns.pointplot(x='Preferred Foot', y='Skill Moves', data=skill_foot)\nax.text(1, 2.5, 'Correlation:' + str(stats.pointbiserialr(skill_foot['Skill Moves'], skill_foot['Preferred Foot'])[0]))\nplt.title('Preferred foot and skill correlation')\nplt.show()","6c4b4c92":"#Function for converting inches to centimeters\ndef inc_to_cm(a):\n    a = float(a.replace(\"'\",\".\"))\n    a = round(a*2.54*10,1)\n    return a\n\n\nheight_skill = df[['Height', 'Skill Moves']]\nheight_skill['Height'] = height_skill['Height'].apply(inc_to_cm)\n","6b8d820b":"#Height and skill correlation numerically\nstats.pearsonr(height_skill['Skill Moves'],height_skill['Height'])[0]","b5a31047":"#Plotting\nfig, ax = plt.subplots(figsize=(14,7))\nsns.regplot(x= 'Skill Moves', y ='Height', data = height_skill)\nax.text(4, 175, 'Correlation: '+str(stats.pearsonr(height_skill['Skill Moves'],height_skill['Height'])[0]))\nplt.title('Height and Skill moves correlation')\nplt.show()","d4062de8":"#Convering pounds to kg\ndef pound_to_kg(a):\n    a = int(a.replace('lbs', ''))\n    a = round(a\/2.2046,1)\n    return a","d410c6cc":"weight_skill = df[['Skill Moves','Weight']]\nweight_skill['Weight'] = weight_skill['Weight'].map(pound_to_kg)\nweight_skill","9613bf5f":"#Weight and skill correlation numerically\nstats.pearsonr(weight_skill['Skill Moves'], weight_skill['Weight'])[0]","6219000f":"#Plotting\nfig, ax = plt.subplots(figsize=(14,7))\nsns.regplot(x = 'Weight', y = 'Skill Moves', data = weight_skill)\nax.text(98,4.9,'Correlation: ' + str(stats.pearsonr(weight_skill['Skill Moves'], weight_skill['Weight'])[0]))\nplt.show()","7a3be077":"correlation_df = df.loc[:,'Crossing':'GKReflexes'].set_index(df['Nationality']).sample(50)","1520cb5b":"plt.figure(figsize=(20,20))\nsns.heatmap(data = correlation_df, annot=True)\nplt.show()","9d2c9564":"# Age","7285018a":"# Height and skill correlation","905e9cf9":"# Nationality","80270bcd":"# Preferred foot and skill correlation","5dcccf5f":"# Data cleaning","2a40df4f":"# General info","d2ef5df8":"# **EDA and Plotting**","91fa6523":"# Nationality correlation","f51991dd":"# Preferred foot","c0ff8643":"# **Correlation**","ff559632":"# Club"}}