{"cell_type":{"d82b6c0e":"code","4e6dbb71":"code","d15af98d":"code","1b9fb3f7":"code","7657ab30":"code","ee70e52a":"code","365db93c":"code","b9c680de":"code","5501fc5a":"code","0c82b4a1":"code","2b4bb064":"code","3c2e4b03":"code","44d6db8f":"code","1ee40018":"code","6e958f70":"code","924558cf":"code","863fe34d":"code","c0fd6756":"code","84c4085c":"code","fefd271a":"code","1dde5b05":"code","26b45bae":"code","603377a1":"code","86061a85":"code","144198ac":"code","f5c5c8e1":"code","a2064b69":"code","5b7e304b":"code","1b41d0c1":"code","97c27fb4":"code","6480527e":"code","8ff127bf":"code","91f55071":"code","754dd792":"code","3dd65732":"code","b8abf0fb":"code","b2f69db4":"code","cc55a584":"code","f4a3b2de":"code","98383600":"code","5042d13e":"code","204e1e91":"code","03087337":"code","5ead8f6b":"markdown","1689a645":"markdown","d8caa15b":"markdown","0aaedc52":"markdown","eeda51bb":"markdown","3a4acbe0":"markdown","213e0f63":"markdown","4293bad9":"markdown","f86ee668":"markdown"},"source":{"d82b6c0e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")","4e6dbb71":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d15af98d":"pd.set_option('display.max_columns', 100)\nencoding_latin = 'latin'\nice = pd.read_csv('\/kaggle\/input\/recipeData.csv', low_memory = False, encoding = encoding_latin)\nice.head(9)","1b9fb3f7":"ice.shape","7657ab30":"ice.info()","ee70e52a":"ice.describe().T","365db93c":"ice.isnull().sum()","b9c680de":"missing = round(100*(ice.isnull().sum()\/len('BeerID')), 2)\nmissing","5501fc5a":"ice.columns","0c82b4a1":"ice_missing = ice.copy()\nice_missing = ice_missing.T\ntrue = ice_missing.isnull().sum(axis=1)\nfalse = (len(ice_missing.columns) - true)\nice_missing['Valid Count'] = false \/ len(ice_missing.columns)\nice_missing['NA Count'] = true \/ len(ice_missing.columns)\n\nice_missing[['NA Count','Valid Count']].sort_values(\n    'NA Count', ascending=False).plot.bar(\n    stacked=True,figsize=(12,6))\nplt.legend(loc=9)\nplt.ylim(0,1.15)\nplt.title('Normed Missing Values Count', fontsize=20)\nplt.xlabel('Normed (%) count', fontsize=20)\nplt.ylabel('Column name', fontsize=20)\nplt.xticks(rotation=60)\nplt.show()\n\nice = ice[pd.notnull(ice['Style'])]","2b4bb064":"gb_style = ice.groupby(['Style']).count().sort_values(['BeerID'], ascending=False).reset_index()[:20]\ngb_style['BeerID'] = (gb_style['BeerID'] \/ len(ice)) * 100\n\nplt.figure(figsize=(12,8))\ng = sns.barplot(x=gb_style['BeerID'], y=gb_style['Style'], orient='h')\nplt.title('Normed Style Popularity (%) for 20 most popular Styles', fontsize=22)\nplt.ylabel('Style Name', fontsize=20)\nplt.xlabel('Normed Style Popularity (%)', fontsize=20)\n\nplt.xlim(0,18)\n\nfor index, row in gb_style.iterrows():\n    g.text(y=index+0.2,x=row['BeerID']+1,s='{:.2f}%'.format(row['BeerID']),\n           color='black', ha=\"center\", fontsize=16)\n\nplt.show()","3c2e4b03":"general_styles = ['Amber Ale','Pale Ale','Red Ale','Cider','Spice Beer',\n                  'IPA','Lager','Specialty','Porter','Wheat Beer']\ngeneral_styles_dict = {'Brown':'Red','Fruit':'Spice', 'Stout':'Porter'}\n\nice_general_styles = ice.copy()\nice_general_styles['Style_aux'] = 'Other'\nfor style in general_styles:\n    ice_general_styles.loc[ice_general_styles['Style'].str.contains(style), 'Style_aux'] = style\nfor key in general_styles_dict:\n    ice_general_styles.loc[ice_general_styles['Style'].str.contains('{} Ale'.format(key)), 'Style_aux'] = '{} Ale'.format(general_styles_dict[key])\n\nice_general_styles = ice_general_styles[ice_general_styles['Style_aux']!='Other']\ngb_style = ice_general_styles.groupby(['Style_aux']).count().sort_values(['BeerID'], ascending=False).reset_index()[:20]\ngb_style['BeerID'] = (gb_style['BeerID'] \/ len(ice)) * 100\n\nplt.figure(figsize=(12,6))\ng=sns.barplot(x=gb_style['BeerID'], y=gb_style['Style_aux'], orient='h')\nplt.title('Normed Style Popularity (%) for GENERAL Styles', fontsize=25)\nplt.ylabel('Style Name', fontsize=20)\nplt.xlabel('Normed Style Popularity (%)', fontsize=20)\nplt.xlim(0,22.5)\n\nfor index, row in gb_style.iterrows():\n    g.text(y=index+0.1,x=row['BeerID']+1,s='{:.2f}%'.format(row['BeerID']),\n           color='black', ha=\"center\", fontsize=16)\n\nplt.show()","44d6db8f":"plt.figure(figsize=(12,12))\ncount=0\nfor col, color in zip(['OG', 'FG', 'ABV', 'IBU','Color'],['b','y','c','m','g']):\n    count+=1\n    if(count==5):\n        plt.subplot(3,2,(5,6))\n    else:\n        plt.subplot(3,2,count)\n    sns.distplot(ice[col], bins=100, label=col, color=color)\n    plt.title('{} Distribution'.format(col), fontsize=15)\n    plt.legend()\n    plt.ylabel('Normed Frequency', fontsize=15)\n    plt.xlabel(col, fontsize=15)\n\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\nplt.show()","1ee40018":"plt.figure(figsize=(12,12))\ncount=0\nfor col, color in zip(['OG', 'FG', 'ABV', 'IBU','Color'],['b','y','c','m','g']):\n    count+=1\n    if(count==5):\n        plt.subplot(3,2,(5,6))\n    else:\n        plt.subplot(3,2,count)\n    sns.distplot(np.log1p(ice[col]), bins=100, label=col, color=color)\n    plt.title('Log(1 + {}) Distribution'.format(col), fontsize=15)\n    plt.legend()\n    plt.ylabel('Normed Frequency', fontsize=15)\n    plt.xlabel('Log(1 + {})'.format(col), fontsize=15)\n\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\nplt.show()","6e958f70":"general_styles = ['Amber Ale','Pale Ale','Red Ale','Cider','Spice Beer',\n                  'IPA','Lager','Specialty','Porter','Wheat Beer']\ngeneral_styles_dict = {'Brown':'Red','Fruit':'Spice', 'Stout':'Porter'}\n\nice_general_styles = ice.copy()\nice['Style_aux'] = 'Other'\nfor style in general_styles:\n    ice_general_styles.loc[ice_general_styles['Style'].str.contains(style), 'Style_aux'] = style\nfor key in general_styles_dict:\n    ice_general_styles.loc[ice_general_styles['Style'].str.contains('{} Ale'.format(key)), 'Style_aux'] = '{} Ale'.format(general_styles_dict[key])\n\nplt.figure(figsize=(12,6))\nsns.boxplot(ice_general_styles['Style_aux'], ice_general_styles['ABV'])\nplt.xticks(rotation=45)\nplt.ylim(0,25)\nplt.title('ABV by GENERAL Styles', fontsize=22)\nplt.xlabel('Style', fontsize=20)\nplt.ylabel('ABV', fontsize=20)\nplt.show()","924558cf":"order = ice_general_styles.groupby('Style_aux')['Color'].median().fillna(0).sort_values()[::-1].index\n\nplt.figure(figsize=(12,6))\nsns.boxplot(ice_general_styles['Style_aux'], ice_general_styles['Color'])\nplt.xticks(rotation=45)\nplt.ylim(0,55)\nplt.title('Color by GENERAL Styles', fontsize=22)\nplt.xlabel('Style', fontsize=20)\nplt.ylabel('Color', fontsize=20)\nplt.show()","863fe34d":"ice_abv_color = ice[(ice['ABV']<=20) & (ice['Color']<=50)]\nice_abv_color = ice_abv_color.sample(int(len(ice_abv_color)\/10), random_state=42)\n\nplt.figure(figsize=(12,6))\nsns.regplot(ice_abv_color['ABV'],ice_abv_color['Color'])\nplt.title('ABV and Color relation', fontsize=22)\nplt.xlabel('ABV', fontsize=20)\nplt.ylabel('Color', fontsize=20)\nplt.show()","c0fd6756":"plt.figure(figsize=(12,14))\ncount=0    \nfor col in ['OG', 'FG', 'IBU']:\n    for i in range(1,3):\n        count+=1\n        plt.subplot(3,2,count)\n\n        if (i==1):\n            sns.boxplot(ice_general_styles['Style_aux'], np.log1p(ice_general_styles[col]))\n        else:\n            sns.violinplot(ice_general_styles['Style_aux'], np.log1p(ice_general_styles[col]))\n        plt.xticks(rotation=45)\n        plt.title('Log (1+{}) by GENERAL Styles'.format(col), fontsize=14)\n        plt.xlabel(' ')\n        plt.ylabel('Log (1+{})'.format(col), fontsize=14)\n\nplt.subplots_adjust(hspace=0.4)\nplt.show()","84c4085c":"col= 'BrewMethod'\ngb_brew_method = ice.groupby([col]).count().sort_values(['BeerID'], ascending=False).reset_index()[:20]\ngb_brew_method['BeerID'] = (gb_brew_method['BeerID'] \/ len(ice)) * 100\n\nplt.figure(figsize=(8,6))\ng=sns.barplot(gb_brew_method[col], gb_brew_method['BeerID'])\nplt.title('{} Distribution'.format(col), fontsize=15)\nplt.legend()\nplt.ylabel('Normed Frequency (%)', fontsize=15)\nplt.xlabel(col, fontsize=15)\n\nfor index, row in gb_brew_method.iterrows():\n    g.text(x=index,y=row['BeerID']+1,s='{:.2f}%'.format(row['BeerID']), \n           color='black', ha=\"center\", fontsize=16)\n\nplt.show()","fefd271a":"col = 'SugarScale'\ngb_brew_method = ice.groupby([col]).count().sort_values(['BeerID'], ascending=False).reset_index()[:20]\ngb_brew_method['BeerID'] = (gb_brew_method['BeerID'] \/ len(ice)) * 100\n\nplt.figure(figsize=(8,6))\ng=sns.barplot(gb_brew_method[col], gb_brew_method['BeerID'])\nplt.title('{} Distribution'.format(col), fontsize=15)\nplt.legend()\nplt.ylabel('Normed Frequency (%)', fontsize=15)\nplt.xlabel(col, fontsize=15)\n\nfor index, row in gb_brew_method.iterrows():\n    g.text(x=index,y=row['BeerID']+1,s='{:.2f}%'.format(row['BeerID']), \n           color='black', ha=\"center\", fontsize=16)\n\nplt.show()","1dde5b05":"ice.head()","26b45bae":"ice.isnull().sum()","603377a1":"ice.dtypes","86061a85":"ice.columns","144198ac":"beer = ice.drop(['BeerID', 'Name', 'URL', 'Style', 'BrewMethod', 'PrimingMethod', 'PrimingAmount', 'UserId', 'Style_aux'], axis = 1)\nbeer.head()","f5c5c8e1":"beer1 = beer.fillna(beer.mean())\nbeer1.head()","a2064b69":"beer1.columns","5b7e304b":"beer1 = beer1.reindex(columns=['StyleID', 'Size(L)', 'OG', 'FG', 'ABV', 'IBU', 'Color', 'BoilSize',\n       'BoilTime', 'BoilGravity', 'Efficiency', 'MashThickness',\n       'PitchRate', 'PrimaryTemp', 'SugarScale'])","1b41d0c1":"beer1.head()","97c27fb4":"'''from sklearn.preprocessing import LabelEncoder\n\nlb = LabelEncoder() \nbeer['SugarScale'] = lb.fit_transform(beer['SugarScale'])\nbeer.head()'''","6480527e":"sns.pairplot(beer1)","8ff127bf":"corr = beer1.corr()\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)","91f55071":"X = beer1.iloc[:,:-1]\nX.head()","754dd792":"y = beer1.iloc[:,14]\ny.head()","3dd65732":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale","b8abf0fb":"X_scaled = scale(X)\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.3, random_state = 100)","b2f69db4":"from sklearn.svm import SVC","cc55a584":"model = SVC()\nmodel.fit(X_train, y_train)","f4a3b2de":"pred = model.predict(X_test)\npred","98383600":"from sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score","5042d13e":"# confusion matrix and accuracy\n\n# accuracy\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=pred), \"\\n\")\n\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=pred))","204e1e91":"from sklearn.metrics import classification_report","03087337":"print(classification_report(y_test, pred))","5ead8f6b":"## Import the Libraries","1689a645":"## Classification Report","d8caa15b":"## Model Building","0aaedc52":"## Train Test Split","eeda51bb":"### Prediction from the Train Model","3a4acbe0":"## Import other Libraries","213e0f63":"## Exploratory Data Analysis","4293bad9":"## Check the accuracy","f86ee668":"## Read the dataset"}}