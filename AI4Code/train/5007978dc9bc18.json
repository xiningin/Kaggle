{"cell_type":{"01498e69":"code","026cd9a4":"code","a245f821":"code","93ba9448":"code","89289764":"code","742910a7":"code","5f647f83":"code","385412ff":"code","840d79b7":"code","a5b28f9f":"code","a18a5629":"code","3faa20ee":"code","61a12406":"code","b2c82681":"code","d6c1ce8b":"code","828b8890":"code","f82a2798":"code","3379976e":"code","092d6405":"code","90991611":"code","0041de2f":"code","633351cb":"code","3c5a25ee":"code","7a5d3f20":"code","49e16ee4":"code","107f8429":"code","97676489":"code","d8573dc4":"code","303bcbfb":"markdown","1c042148":"markdown","a1bc6a66":"markdown","f3604143":"markdown","90ac3be7":"markdown","212bafbe":"markdown","9a0829ad":"markdown"},"source":{"01498e69":"import os\nimport json\nimport math\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom skimage.transform import resize\nfrom tqdm import tqdm_notebook as tqdm\nimport keras\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Input, BatchNormalization, UpSampling2D, Add\nfrom keras.layers import Conv2D, MaxPooling2D, LeakyReLU\nfrom keras import Model\nfrom keras.optimizers import Adam, Nadam\nfrom sklearn.decomposition import PCA, KernelPCA\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score, classification_report","026cd9a4":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","a245f821":"def crop_image1(img,tol=5):\n    # img is image data\n    # tol  is tolerance\n        \n    mask = img>tol\n    return img[np.ix_(mask.any(1),mask.any(0))]","93ba9448":"train_resized_imgs = []\n\nfor image_id in tqdm(train_df['id_code']):\n    path=f\"..\/input\/train_images\/{image_id}.png\"\n    img = cv2.imread(path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    img = crop_image1(img)\n    img = cv2.resize(img, (224, 224))\n    img=cv2.addWeighted (img,4, cv2.GaussianBlur(img , (0,0) , 224\/10) ,-4 ,128)\n    train_resized_imgs.append(img)","89289764":"test_resized_imgs = []\n\nfor image_id in tqdm(test_df['id_code']):\n    path=f\"..\/input\/test_images\/{image_id}.png\"\n    img = cv2.imread(path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    img = crop_image1(img)\n    img = cv2.resize(img, (224, 224))\n    img=cv2.addWeighted (img,4, cv2.GaussianBlur(img , (0,0) , 224\/10) ,-4 ,128)\n    test_resized_imgs.append(img)","742910a7":"y = train_df['diagnosis'].values","5f647f83":"train_idx = len(train_resized_imgs)\ntrain_resized_imgs.extend(test_resized_imgs)\n\ntrain_resized_imgs = np.expand_dims(train_resized_imgs, axis=-1)","385412ff":"dataGen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        zca_epsilon=1e-06,  # epsilon for ZCA whitening\n        rotation_range=30,  # randomly rotate images in the range (degrees, 0 to 180)\n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        shear_range=0.,  # set range for random shear\n        zoom_range=[0.75, 1.25],  # set range for random zoom\n        channel_shift_range=0.05,  # set range for random channel shifts\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images\n        rescale=1\/255.,\n        # set function that will be applied on each input\n        preprocessing_function=None\n    ).flow(np.array(train_resized_imgs), np.array(train_resized_imgs), batch_size=64)\n\ndef generator():\n    for x, _ in dataGen:\n        yield x, x","840d79b7":"def get_encoder(shape=(224, 224, 2)):\n    def res_block(x, n_features):\n        _x = x\n        x = BatchNormalization()(x)\n        x = LeakyReLU()(x)\n    \n        x = Conv2D(n_features, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n        x = Add()([_x, x])\n        return x\n    \n    inp = Input(shape=shape)\n    \n    # 224\n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(inp)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 112\n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(2):\n        x = res_block(x, 32)\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 56\n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(2):\n        x = res_block(x, 32)\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 28\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 64)\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 14\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 64)\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(x)    \n    \n    # 7\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 64)\n    \n    x = Conv2D(1, kernel_size=(1, 1), strides=(1, 1), padding='same')(x)\n    return Model(inp, x)","a5b28f9f":"def get_decoder(shape=(7, 7, 128)):\n    inp = Input(shape=shape)\n\n    x = UpSampling2D((2, 2))(inp)\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = UpSampling2D((2, 2))(x)\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = UpSampling2D((2, 2))(x)\n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = UpSampling2D((2, 2))(x)\n    x = Conv2D(16, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = UpSampling2D((2, 2))(x)\n    x = Conv2D(9, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU()(x)\n    \n    x = Conv2D(1, kernel_size=(1, 1), strides=(1, 1), padding='same')(x)\n    return Model(inp, x)","a18a5629":"from keras.callbacks import *\n\nclass CyclicLR(Callback):\n    \"\"\"This callback implements a cyclical learning rate policy (CLR).\n    The method cycles the learning rate between two boundaries with\n    some constant frequency, as detailed in this paper (https:\/\/arxiv.org\/abs\/1506.01186).\n    The amplitude of the cycle can be scaled on a per-iteration or \n    per-cycle basis.\n    This class has three built-in policies, as put forth in the paper.\n    \"triangular\":\n        A basic triangular cycle w\/ no amplitude scaling.\n    \"triangular2\":\n        A basic triangular cycle that scales initial amplitude by half each cycle.\n    \"exp_range\":\n        A cycle that scales initial amplitude by gamma**(cycle iterations) at each \n        cycle iteration.\n    For more detail, please see paper.\n    \n    # Example\n        ```python\n            clr = CyclicLR(base_lr=0.001, max_lr=0.006,\n                                step_size=2000., mode='triangular')\n            model.fit(X_train, Y_train, callbacks=[clr])\n        ```\n    \n    Class also supports custom scaling functions:\n        ```python\n            clr_fn = lambda x: 0.5*(1+np.sin(x*np.pi\/2.))\n            clr = CyclicLR(base_lr=0.001, max_lr=0.006,\n                                step_size=2000., scale_fn=clr_fn,\n                                scale_mode='cycle')\n            model.fit(X_train, Y_train, callbacks=[clr])\n        ```    \n    # Arguments\n        base_lr: initial learning rate which is the\n            lower boundary in the cycle.\n        max_lr: upper boundary in the cycle. Functionally,\n            it defines the cycle amplitude (max_lr - base_lr).\n            The lr at any cycle is the sum of base_lr\n            and some scaling of the amplitude; therefore \n            max_lr may not actually be reached depending on\n            scaling function.\n        step_size: number of training iterations per\n            half cycle. Authors suggest setting step_size\n            2-8 x training iterations in epoch.\n        mode: one of {triangular, triangular2, exp_range}.\n            Default 'triangular'.\n            Values correspond to policies detailed above.\n            If scale_fn is not None, this argument is ignored.\n        gamma: constant in 'exp_range' scaling function:\n            gamma**(cycle iterations)\n        scale_fn: Custom scaling policy defined by a single\n            argument lambda function, where \n            0 <= scale_fn(x) <= 1 for all x >= 0.\n            mode paramater is ignored \n        scale_mode: {'cycle', 'iterations'}.\n            Defines whether scale_fn is evaluated on \n            cycle number or cycle iterations (training\n            iterations since start of cycle). Default is 'cycle'.\n    \"\"\"\n\n    def __init__(self, base_lr=0.001, max_lr=0.006, step_size=2000., mode='triangular',\n                 gamma=1., scale_fn=None, scale_mode='cycle'):\n        super(CyclicLR, self).__init__()\n\n        self.base_lr = base_lr\n        self.max_lr = max_lr\n        self.step_size = step_size\n        self.mode = mode\n        self.gamma = gamma\n        if scale_fn == None:\n            if self.mode == 'triangular':\n                self.scale_fn = lambda x: 1.\n                self.scale_mode = 'cycle'\n            elif self.mode == 'triangular2':\n                self.scale_fn = lambda x: 1\/(2.**(x-1))\n                self.scale_mode = 'cycle'\n            elif self.mode == 'exp_range':\n                self.scale_fn = lambda x: gamma**(x)\n                self.scale_mode = 'iterations'\n        else:\n            self.scale_fn = scale_fn\n            self.scale_mode = scale_mode\n        self.clr_iterations = 0.\n        self.trn_iterations = 0.\n        self.history = {}\n\n        self._reset()\n\n    def _reset(self, new_base_lr=None, new_max_lr=None,\n               new_step_size=None):\n        \"\"\"Resets cycle iterations.\n        Optional boundary\/step size adjustment.\n        \"\"\"\n        if new_base_lr != None:\n            self.base_lr = new_base_lr\n        if new_max_lr != None:\n            self.max_lr = new_max_lr\n        if new_step_size != None:\n            self.step_size = new_step_size\n        self.clr_iterations = 0.\n        \n    def clr(self):\n        cycle = np.floor(1+self.clr_iterations\/(2*self.step_size))\n        x = np.abs(self.clr_iterations\/self.step_size - 2*cycle + 1)\n        if self.scale_mode == 'cycle':\n            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(cycle)\n        else:\n            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(self.clr_iterations)\n        \n    def on_train_begin(self, logs={}):\n        logs = logs or {}\n\n        if self.clr_iterations == 0:\n            K.set_value(self.model.optimizer.lr, self.base_lr)\n        else:\n            K.set_value(self.model.optimizer.lr, self.clr())        \n            \n    def on_batch_end(self, epoch, logs=None):\n        \n        logs = logs or {}\n        self.trn_iterations += 1\n        self.clr_iterations += 1\n\n        self.history.setdefault('lr', []).append(K.get_value(self.model.optimizer.lr))\n        self.history.setdefault('iterations', []).append(self.trn_iterations)\n\n        for k, v in logs.items():\n            self.history.setdefault(k, []).append(v)\n        \n        K.set_value(self.model.optimizer.lr, self.clr())","3faa20ee":"encoder = get_encoder((224, 224, 1))\ndecoder = get_decoder((7, 7, 1))","61a12406":"inp = Input((224, 224, 1))\ne = encoder(inp)\nd = decoder(e)\nmodel = Model(inp, d)","b2c82681":"from keras import backend as K\n\ndef mask_mse(y_true, y_pred):\n    mask = 1. - 1. \/ ( 1. + K.exp(-y_true**2))\n    return K.abs(y_true*mask - y_pred*mask)","d6c1ce8b":"model.compile(optimizer=Nadam(lr=2*1e-3, schedule_decay=1e-5), loss='mse')","828b8890":"model.summary()","f82a2798":"model.fit_generator(generator(), steps_per_epoch=500, epochs=5, callbacks=[\n    CyclicLR(base_lr=8*1e-4, max_lr=6*1e-3, step_size=250, gamma=0.9)\n])","3379976e":"vec = encoder.predict(np.array(train_resized_imgs)\/255.)","092d6405":"avec = np.array([v.flatten()\n                 for v in vec])","90991611":"sc = MinMaxScaler()\navec = sc.fit_transform(avec)","0041de2f":"train_idx = 3662","633351cb":"pca = PCA(n_components=3)\nemb = pca.fit_transform(avec)\nte_emb = emb[train_idx:]\nemb = emb[:train_idx]","3c5a25ee":"pca.explained_variance_ratio_[:5]","7a5d3f20":"labelMap = {\n    0:'No DR',\n    1:'Mild',\n    2:'Moderate',\n    3:'Severe',\n    4:'Proliferative DR'\n}","49e16ee4":"plt.figure(figsize=(10, 10))\n\nfor t in list(set(y)):\n    plt.plot(emb[np.array(y) == t, 0], emb[np.array(y) == t, 1], '.', label=labelMap[t], alpha=0.75)\nplt.plot(te_emb[:, 0], te_emb[:, 1], '.', label='test data', color='gray', alpha=0.45)\n\nplt.xlabel('component 0')\nplt.ylabel('component 1')\nplt.legend();","107f8429":"import plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","97676489":"init_notebook_mode(connected=True)","d8573dc4":"data = [go.Scatter3d(\n    x=emb[np.array(y) == t, 0],\n    y=emb[np.array(y) == t, 1],\n    z=emb[np.array(y) == t, 2],\n    mode='markers',\n    marker=dict(\n        size=3,\n        opacity=0.75\n    ),\n    name=labelMap[t]\n)\n    for t in list(set(y))\n]\n\ndata.append(go.Scatter3d(\n    x=te_emb[:, 0],\n    y=te_emb[:, 1],\n    z=te_emb[:, 2],\n    mode='markers',\n    marker=dict(\n        color='#c0c0c0',\n        size=2,\n        opacity=0.75\n    ),\n    name='test data'\n))\n\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple-3d-scatter')","303bcbfb":"## <center> Conclusion","1c042148":"## <center> AutoEncoder","a1bc6a66":"   Based on PCA decomposition above can be make same conclusion about this dataset:\n   1. persons with diabetic retinopathy and without one can be very easy split. This decision correlate with xhlulu and Marsh research;\n   2. The main conclusion of this research is that the training and test data are not similar. On the PCA decomposition above, the main part of the test data is grouped into a separate cluster, which overlaps with the train data a little.\n   3. ```is_true(secondConclusion) ? \"ShakeUp is coming\": \"Mistake\"``` ","f3604143":"![Autoencoder](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/28\/Autoencoder_structure.png)","90ac3be7":"## <center> Reference\n* https:\/\/www.kaggle.com\/xhlulu\/densenet-keras-starter\n* https:\/\/www.kaggle.com\/vbookshelf\/dr-mobilenet-binary-classifier-tfjs-web-app\n* https:\/\/github.com\/bckenstler\/CLR\n* https:\/\/www.kaggle.com\/ratthachat\/aptos-simple-preprocessing-decoloring-cropping","212bafbe":"Pipeline released in this kernel is very simple:\n* train encoder and used one for translate image in vector\n* visulize results vectors used PCA decomposition algorithm\n* do some conclusion about train and test data","9a0829ad":"Explained variance ration of PCA"}}