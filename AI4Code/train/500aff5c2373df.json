{"cell_type":{"a1a5f22a":"code","dffb239d":"code","64f38a87":"code","8b65ac8a":"code","1cb239e1":"code","6265676a":"code","9b7917f6":"code","231aa7b7":"code","3e5deaaf":"code","7aebe817":"code","9f6b9ed7":"code","766d1db5":"code","03641ddc":"code","fd64f314":"code","d756f266":"code","f7324491":"code","dfc0f5a1":"code","8f62e48d":"code","81d58217":"code","ba82150e":"code","413e822c":"code","e838cf01":"code","819026b8":"code","53929cdf":"code","bd1982bc":"code","8b7d1106":"code","75cbc8b4":"code","d9553f3e":"markdown","ca16b0c5":"markdown","a8448f09":"markdown","28ae8188":"markdown"},"source":{"a1a5f22a":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxAQEBAQEA8NDxAOEA8PDw0NEA8NDw0QFRUWFxUSFRYYHSggGRslGxcVIzIhJSkrLi4uGSA\/ODMtNygtLisBCgoKDg0OGhAQGisfHR0tListLS0rLS0tKy0tLS0tLS0tKy0tLS0tKy0rLS0tLS0tLS0tLS0tLS0rKy0tLSstLf\/AABEIAP8AxgMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAAAQIDBAUGB\/\/EADIQAAICAgEDAgUDBQABBQAAAAECAAMEERIFITEGExQiQVFhcZGhFSMyQlKBFiQlYrH\/xAAZAQEBAQEBAQAAAAAAAAAAAAAAAQIDBAX\/xAAjEQEBAQACAgEDBQAAAAAAAAAAARECEgMhIkFR8BMjgaHh\/9oADAMBAAIRAxEAPwD41ERPS85ERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERARqJbUQRqNSwES4ivGOMtEYarxiWiXIbVIiJlW3XioEV7LCnuciirX7hIU8ST8w0Ngj6+JmTpy7Ss28bbAhVPbJUFxtFZ99iQR9D5mKvKXgqWVc\/b5cGVzWwDEkqex2Nkn6eZkTqABVzUDdWFVbOR4niNIzJruQAPqPA7Tc6sXv8Amfx\/qp6ceSjkOJpN5fX+IUEMpG\/IYFf11MlvTFQObLuISxK9isvssnPf+XbtMPx7ewaSAdtv3N\/MFJDFP0LAGZrOpq\/MWUhg7pYAHKcSqBPp5H7R8E\/c\/MamTjFLDWSuwQN7+Ug6IP6aIMzt0m0FhpdqSAOa7sIUMQnf5tAg9vvMeRn2OX2xC2HbIvZPGgAPsABOhj9XHIu4G1IeqsJy03BV2H2Nb4rsaMk6ryvORxYkAfxJmWyIiAiIhSIiAiJIEIlRJiTNYzqIk6kyiNRqTAEuIiJfURhrBERObb13RvTyWYFWSMHPzrbMi+llxLTUtKIqFSQKnPfkft4nLo9PlqfiLL8XDrsa1aEyntNlxrOmChEPYH5eR1szb6d1jD+Cqxcj+oo1ORdetmE1KhhYqDR5n6cf5lG6nhXY1OPkLnL8Gclca3HNDGyq2w2BbVbWmDE91J8+Jja36xjo9KXOi\/3cVb7Mc5VWC72DJspCs2wAvDkVUsFLbI\/aZE9H2lEPxOF7tuKM2nE52nItp9s2nQ4cQ3EN2J76OvvNun1Rjh6cw05Hx+PjLjIFar4R3Sk013t\/uCEIPADuV8jc16\/UqDJxb\/bs1jdOXBZRx2zjHsq5jv424P30JPkemDF9J3WJXq3FW++k5NGEzuMm6nTMGGl4AlVJClgSP5zYXo261cfWTgJZmUHIxsay2wXWIC\/Y\/JxU\/I3k67efOtnF9UY6tjZZqyTnYeMmNWqtX8JY1dZrruc\/5ghTsqB3IHcTXxfUtaZHTbjVYV6fhjFdQV5WtvIPJfoB\/eHn7GN5GRm6b6Vf3sRkfBzqch8ir+3bkV0i2uou1btwDDsQwIBB1OX\/AEBlx0vtycWg21G6jGta34i+sEjkAqELsqePIjep0fTHqivErxa3qtc42XkZLFCoDLZj+yFGz5B7\/pNbL6piZOPSL0y0ysXGXFrbHNTY9yVk+2zhtMpHLR1vevpHs9MPS+lJdh5txLCzHswUq0dIffd1bkNf\/Ua1N\/I9EWVm9WzulhsNgMoe9cfh1LcVYn2\/m22hpdnZHb7c7pXV1pxsqgozHJswXVhriood2YHf35DU2+peokts6s4rsH9TNZrBK\/2uORXaeX37IR2+8vyPSx9HXBreWThJTTj0ZZyme32bKLmCVumkLEknWiAZqZHp\/wBq4VXZeHUj0pkVZTNc1N9THSmvihYns3Yga4meiwOr42Rh5a3e9VXR0vpmI\/t+01tj1ZanlWrEAjZHYnxuauP6tx1LIteXj1piUYeLk47VPm011WPY2ydAe41jb4ka0PMm8lyOb\/6TtWy5bb8SqrHWh3zHew0Mt45U+3pebFhyIHH\/AFbetS1vptFwmyvjcVmGTbjitPfIt4IGHA+33Zt7G9DRHcHYHS6j6qxMo3V31ZwpyEwW9xXpsyasjFreoP30LFZHO96O5z6+oYYxLcYrmcVynycSxRRyYtUK+Nw3oD5QdrvzNTanqOB7Df8ALfsZb2W\/5P7GUAlp19Odqwpb\/k\/sZb2W+x\/YzHJAmsjK\/st\/y37SmpOplcbG\/wDwf1+8uJrHqNSdSwERNViW1EuGtSIicHUiIgIiICIiAiIhSIiBEsBIEtCCrs6l3O\/HgeJI7D8sP2WVm2UiJIEkCWRNAJOpIEnU0zqNTIh158HsZUCTNSVKll0dSJl1sflf5EgCa6s6qFiX1E0a50RE8b0ET1fR+l4lfTz1DJoyM3eS2MaaLjj14oChhZawUnbb0PAnHtwBcMvIxa2TFxRS7JdYtltaWutajYA5fOft4mda6uZE6ON0qw1VZJC+xZljD3yHI2BUdhrzriw7z0vqj0Y5zM5cL4QpRddwwK8hPi1qr\/yIqY8iANnzvUuw6vExAnren9Mw6OnU5+TjZOb8RffSRTccanCFZUD3GCk835bAOhoRbiSPJCTqdbD6WuVbd7FmPi0qeSHqOVTSVQk8FLHXNtf8j6d52PTfpcp1bBxcyuq2rJPuKa7BbRlVGtyro6H5hsfuItxeryOo1O\/n+j8qmq24nFYY+jkUUZNN+RiqzcVa1EJ0NkA9zr6yenekMjIRWpu6e9lie5XhjMo+LsXjy0Kt75aB+U9\/xGxMrgBZetAT33odz+k6\/R\/S2TlUvkIceuiq32bb8q9MZKn4hvmLfTuB99nxM\/TfSl14ITI6YGaxq667M2hLMhlYr8i72QSOxOt9tTcsTK4THZ3K6nZ6Z6Wy8hslUrRWwSoyVvtro9nbFdkuQNAqdnf0lOten7sRarHbHtqyOftZGJcmTS7IQHTkv+w2O0uzU61zFlxOp6T6UuVlJXYStCLZflWL2NePUpew7+m9BQfuwm16l6PXVk1DHPHGzacbIxGvcaSu5QCLHPji\/ME\/QCalm4nX1riJWT4lxQfxPoPXPS\/GxOnYdGA9gqS03pkGzMsZaFtsLjlxQMW+Uce4A795x6OivUcpCmDllMKy52ryPdGIAwUupQ6Nin\/Xv5nXh1s1y5dpXl\/YP4lhQfxPRYPpq+2pbi+JQlm\/ZOXkVYxyOJ0TWGOyN9t9h+ZPTPTtuQqlLsBWdildNuXRXdYwOtKhO+58b1v6TrnCfVz3l9nneBU7hl7\/AI8j9JuZOOyM1bqVdGZHQ+UdToqf0O5rsNAD6jv+n4mrxxmcmMCJYSZMXXIiInz3ses9G4PVlU5PTWXTE12oL8YAgfS6qxtcfyRPR5eLj32dWw8L4UZGVg9PY0UWImNZmVXV2ZNeOxPEgaOgD539p8v0PsJP7TF463OWPddR6c+J0rFpuagW\/wBae16q7qrmpBx6hqzgSFPy71vwRO\/mdJtx+vXdWvNVWBVkWZQyTdURkLwIWutVYszMSBrX1M+S6\/AH6QAPsP2jqdnY6d1tKqwjdO6ZkHbN7uSmS1p2dgbS1Rob0O07PovB6wiDI6cyNVbyS2s34pqbidEZFNjaAOvJG9eD3nj5BA\/E1eJ2fTM3o2Dbbn2dPxsTPuruxkTCF7V4tVbVcr76gtiGxBaOA02l3vxOpSnHqXpywri1IlFtDrjXC6ii5feL0hy7Ha7G9sf1nx8j9I0PsJnqTk9Z6PYLV1rZA5dLvCgkDZ96o6H5ns\/TfSKsXPwbKMTAbBHw7DrORlt7t1r1jlwAuVQ3uEoK\/bJ7d58hk8R9hLeJ2eyzKjX0fKqfS2J1wcqyVLDVB+35nS6P0itK+nZFGJg5NbLVfndRzMpq1w7hZ89XFbkFfAKCNhi2x5nz3UaH2EvVOz6T12vgfVAYqPdtxLK\/mU+4jZTMrLo99qQf\/M4OY4\/oeGuxyHUssldjYHtJ319p5msA\/L2\/H4MgDv8AnwZ06sdnsOiZa9P6bZke3j339StOKlN\/J1GHT81rsqsD81nBfP8Ar9fEz9RzVz+lLb7WNRb0u81CnHDVocTIGwVVmJ7W7+v1ni0Hf6d\/M3OPbX48zpw8e3sxz8mTH0exgOt5hJA\/+NYbJ13PTKtd55\/0cwFfU9kDl0vIVdkDZ5V6A+85XWupNl3vkOqq1i0qVTZUe3UlQI3+EBmmJ6OPj+Pv7T+nHl5Pfp7LqnSLc+vCuw1ruSrBx8W2tbalfGtqLcldXIOjvYP13NvpnSkqXBuqxcO6vVVuZn5WSyDFuWw+5WAtqBOAXtsNy3PCaB8yeP4mv0rZm+mf1Ju47fq2or1DN5D\/ACyr7F0QwZHcshBH0IIM4Ny99\/fzM\/jt9B\/+wRudpw+Mjj2961dRLEaiY6N64kRE+W95ERARECAEQYlWEREhAS0qJaVEiSJEkTTKZlPccvr4P6\/eYpkqbXnwexmuKVKnRm6p2NzU4r\/1\/BmbHIHbl\/Bnbx3LjlznpsAy4kcR\/wBfwZYAff8Agz1SPPSZF+\/7Suh9\/wCDLggn8DxNyYxVlSSRoS0xWNvt9p0+jM21rkxLsInF0cGIifJfRIm\/07pNl9d1qtUleOFNj3OUG25cVGge54n8fnvM9PpjOcqFxLiWT3ANKPk2o2dnsdug0e\/zD7yauOTAnZb0rnaqIxrD7yNYijiW4hyhDDfytyGtHudj69pUel88p7gw8gpw9zkFHdeIfet73xOwPJjYZXIMTt5npPNru9j2DYxNgVqTyrs4FQ5DHXgso76\/yH3E1X6HlA0o1Fivk8vYV+KtaFAJ0Ce2t\/XX8S7DK50gTpt6fzAljnFvCUsyWMV1wZTpu3kgEjZHYTIPTOcXZBiXl0VXYAA9m3x0d6YnTaA2To\/aTTK5IlpWSJpFogRLGVhJAkCXE1EqRAMSZpmt2p9j9JcGaKOR4MuLW+89HHyxx5cG6Glg00\/dP3ki0\/edJ5GejoNZ23MPKaxcnyYBlvl1J48ZS8THuJnsvVyoiJ857XU6B1o4bO61JY7LxVnsuVVGjsMiMFsU7G1bY7Tut6491bfiaDcz1VoqG\/INDWrbTYXKl\/7Y1V4Tydb7ePHRJkXtXqsb1zcmyakLuLBZbVdk41j8sizJGmrcFdPbZ48g9\/Amsnq24OLPbpJFuLd359zRjHHUefqp2fzPPRJ1h2r1q+vLg7MlFVa282vWq3Jra61va\/uCxX5Jr2U0F0P8t73OVkdd93JpybqKrxSldZota1kuFYIU2HfJjs7Oz3133szjxL1h2r0uV6uawl2xaGs1kLXc1mQXqqyCxuT\/AC02\/cs0SNjn28DWSz1ltl\/9ljCup6bcej3Mj28a2kEIyaYfLo91PYkb8kk+WiOsXtVrbC7M7HbOzOx8bZjsn9zKgxEsZW3LLKSwM1EWkgyImozVxJJkCQTNItLKZiBl1MSpYvuTuUlgZucmcZNy25jBkgzes2MgMSu4l1HOiInieoiIgIiICIiAMRHb8wpEdvzJ7QiJIMdvzHb8yi4kiU2JO5dZxYmNysS6YtJBlQZMsqYyB5IMxSwaXUsZQZIMoDG5uVnGTcSgMS9kxqRETzO5ERAREQEREBERAREQpERCEbiIFtyQZQGSDLqLRIjcui24BkCJUxkUy0wy+5qVMX3EryiNRgiInJ0IiICIiAiIgIiICIiAiIgIiIUiIhASdyIgxO5MrG5dFtydygMncai0Su4jREREikREBERAREQEREBERAREQEREBERAREQEREKREQhERCkREIREQEREBERAREQEREBERAREQEREBERAREQEREBERA\/\/2Q==',width=400,height=400)","dffb239d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64f38a87":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadssubsaharancsv\/subsaharan.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'subsaharan.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","8b65ac8a":"df.isnull().sum()","1cb239e1":"#Code from Gabriel Preda\n#plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Reds')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","6265676a":"plot_count(\"COVIDLoans\", \"COVIDLoans\", df,4)","9b7917f6":"plot_count(\"GovernmentPriority\", \"GovernmentPriority\", df,4)","231aa7b7":"plot_count(\"EmploymentType\", \"EmploymentType\", df,4)","3e5deaaf":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.Pastel1(np.linspace(0,1,20))\ndf[\"MobileMoneyActivity\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"MobileMoneyDeposit\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"\")\nplt.axis(\"off\")\nplt.show()","7aebe817":"#Code by Dmitriy Kravitsov https:\/\/www.kaggle.com\/dmkravtsov\/4-1-titanic-with-acc-92-and-f1-93\n\ndef spearman(frame, features):\n    spr = pd.DataFrame()\n    spr['feature'] = features\n    spr['spearman'] = [frame[f].corr(frame['MonthlyIncome Bracket'], 'spearman') for f in features]\n    spr = spr.sort_values('spearman')\n    plt.figure(figsize=(6, 0.25*len(features)))\n    sns.barplot(data=spr, y='feature', x='spearman', orient='h')\n    \nfeatures = df.columns\nspearman(df, features)","9f6b9ed7":"# df feature distribution before features tuning\ndef basic_details(df):\n    b = pd.DataFrame()\n    b['Missing value, %'] = round(df.isnull().sum()\/df.shape[0]*100)\n    b['N unique value'] = df.nunique()\n    b['dtype'] = df.dtypes\n    return b\nbasic_details(df)","766d1db5":"fig = px.bar(df, \n             x='MonthlyNeed', y='TopPriority', color_discrete_sequence=['#2B3A67'],\n             title='Pandemic Montly Needed & Priorities', text='Age_Group')\n\nfig.show()","03641ddc":"fig = px.bar(df, \n             x='EmploymentType', y='JobLoss', color_discrete_sequence=['crimson'],\n             title='Pandemic Impacts on Jobs', text='InformalWorker')\n\nfig.show()","fd64f314":"import shap\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nimport random","d756f266":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","f7324491":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","dfc0f5a1":"#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","8f62e48d":"X = dfmodel.drop(['GovernmentPriority','COVIDLoans'], axis = 1)\ny = dfmodel['GovernmentPriority']","81d58217":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","ba82150e":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","413e822c":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","e838cf01":"print(LGBM)","819026b8":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","53929cdf":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","bd1982bc":"shap.summary_plot(shap_values[1], X)","8b7d1106":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'black',\n                      height =2000,\n                      width = 2000,\n                      colormap='Set2',\n                     ).generate(str(df[\"GovernmentPriority\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"\")\nplt.show()","75cbc8b4":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('To me programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge, Grace Hopper quote' )","d9553f3e":"#https:\/\/www.kaggle.com\/mpwolke\/covid-19-hematocrit\/notebook (My 1st Shap Values Covid-19 Hematocrit)\n\n\n#Codes by rossinEndrew https:\/\/www.kaggle.com\/endrewrossin\/fast-initial-lightgbm-model-to-detect-exam-result\/comments","ca16b0c5":"#Sub-Saharan Economic Impacts of Covid-19, by Benno Ndulu \n\n\nThe COVID-19 pandemic found the countries of Sub-Saharan Africa generally ill-prepared to contain the virus or to deal with its economic fallout. \n\nFirst, the capacity of the health-care system to contain the spread of infection, handle emergencies and provide care for the sick was very weak, due, partly, to many years of underinvestment in the health-care system.\n\nSecond, there was a lack of fiscal space to adequately fund either containment interventions in the health sector or safety nets to ameliorate the effects of these interventions, particularly for low-income members of the population. \n\nThird, for a majority of the poor, a combination of low personal precautionary savings and an inability to access the credit system in the absence of a formal welfare system meant that they had no means to finance their survival during lockdowns. A sharp decline of remittances exacerbated this difficulty.\n\nThese features shaped not only the type and effectiveness of responses to the pandemic but also their impacts on lives and livelihoods in the region.https:\/\/www.cigionline.org\/articles\/covid-19-pandemic-and-its-impact-sub-saharan-african-economies","a8448f09":"#COVID-19 effects in sub-Saharan Africa and what local industry and governments can do\n\n![](https:\/\/www.unido.org\/sites\/default\/files\/inline-images\/F1.PNG)https:\/\/www.unido.org\/news\/covid-19-effects-sub-saharan-africa-and-what-local-industry-and-governments-can-do","28ae8188":"Image ifc.org"}}