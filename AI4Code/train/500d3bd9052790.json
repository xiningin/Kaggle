{"cell_type":{"8f7b0ed7":"code","95ea509d":"code","5065c66b":"code","b3da87c4":"code","9dbcf5e1":"code","a9f43aed":"code","af59baa4":"code","af9c4b86":"code","203b7b9b":"code","5c8f691c":"code","d5da4e67":"code","cd5bef73":"code","cb0d9d88":"code","a0919a7a":"code","69ffcff0":"code","06eac64d":"code","2372152c":"code","b8d71b8e":"code","5c49291b":"code","81eb7f56":"code","a0586ec6":"code","334247a5":"code","53ab09e0":"code","0a1866e7":"code","7276ed04":"code","034a3ab0":"code","5ab73618":"code","38a8d7d0":"code","948aaa07":"code","1d85c4a5":"code","e789365f":"code","9dc1d33b":"code","bc6b7401":"code","b5d56013":"code","d1f833c4":"code","593a2b36":"code","959034d2":"code","47c1888d":"code","21adbf8a":"markdown","372a6fa9":"markdown","8fac61a3":"markdown","f4c8e5f2":"markdown","d2916229":"markdown","932d79d1":"markdown","fa3b125a":"markdown","501eb8e3":"markdown","7e8861e1":"markdown","4f81b6e3":"markdown","a9e1f419":"markdown","fdcbe11c":"markdown","c6cafbb0":"markdown","58820f8b":"markdown","fca46fb6":"markdown","1201787e":"markdown","e57cf31a":"markdown","5a5b7552":"markdown","64826285":"markdown","2c5377ec":"markdown","2879d50a":"markdown","0b7135b3":"markdown","dd9e7467":"markdown","eca19da2":"markdown","2300ab61":"markdown","294fe102":"markdown","e7657904":"markdown","0039a412":"markdown","d37130ec":"markdown","e7e03457":"markdown","ca3b6721":"markdown"},"source":{"8f7b0ed7":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","95ea509d":"!wget -O loan_train.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/data\/loan_train.csv","5065c66b":"df = pd.read_csv('loan_train.csv')\ndf.head()","b3da87c4":"df.shape","9dbcf5e1":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","a9f43aed":"df['loan_status'].value_counts()","af59baa4":"# notice: installing seaborn might takes a few minutes\n!conda install -c anaconda seaborn -y","af9c4b86":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","203b7b9b":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","5c8f691c":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()","d5da4e67":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","cd5bef73":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","cb0d9d88":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","a0919a7a":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","69ffcff0":"df[['Principal','terms','age','Gender','education']].head()","06eac64d":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()","2372152c":"X = Feature.drop(['Bechalor', 'High School or Below', 'college'], axis = 'columns')\nX[0:5]","b8d71b8e":"y = df['loan_status'].values\ny[:5]","5c49291b":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","81eb7f56":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","a0586ec6":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)","334247a5":"knn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)","53ab09e0":"knn.score(X_test, y_test)","0a1866e7":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()","7276ed04":"model.fit(X_train, y_train)\ny_pred = model.predict(X_test)","034a3ab0":"model.score(X_test, y_test)","5ab73618":"from sklearn.svm import SVC\nsvc = SVC()","38a8d7d0":"svc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)","948aaa07":"svc.score(X_test, y_test)","1d85c4a5":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(C=1, solver = 'lbfgs')","e789365f":"lr.fit(X_train, y_train)\ny_pred = lr.predict_proba(X_test)","9dc1d33b":"lr.score(X_test, y_test)","bc6b7401":"from sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss","b5d56013":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","d1f833c4":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","593a2b36":"test_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\n\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\nX = test_df[['Principal','terms','age','Gender','weekend']]\n\nX = preprocessing.StandardScaler().fit(X).transform(X)\n\ny = test_df['loan_status'].values","959034d2":"models = {\n    'KNN': {\n        'model': knn\n    },\n    'SVM': {\n        'model': svc \n    },\n    'Decision Tree': {\n        'model': model\n    },\n    'LogisticRegression' : {\n        'model': lr\n        }\n    }","47c1888d":"scores = []\ny_pred = 0\nfor model_name, mp in models.items():\n    y_pred = mp['model'].predict(X)\n    scores.append({\n        'Algorithm': model_name,\n        'Jaccard': jaccard_score(y, y_pred, pos_label = 'PAIDOFF'),\n        'F1-score': f1_score(y, y_pred, average='weighted'),\n    })\n    \ndf = pd.DataFrame(scores,columns=['Algorithm','Jaccard','F1-score'])\ndf","21adbf8a":"# Model Evaluation using Test set\n","372a6fa9":"### Load Test set for evaluation\n","8fac61a3":"Let's look at gender:\n","f4c8e5f2":"This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n| -------------- | ------------------------------------------------------------------------------------- |\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |\n","d2916229":"## Normalize Data\n","932d79d1":"86 % of female pay there loans while only 73 % of males pay there loan\n","fa3b125a":"### Convert to date time object\n","501eb8e3":"260 people have paid off the loan on time while 86 have gone into collection\n","7e8861e1":"Let's plot some columns to underestand data better:\n","4f81b6e3":"# Data visualization and pre-processing\n","a9e1f419":"# Pre-processing:  Feature selection\/extraction\n","fdcbe11c":"#### Features before One Hot Encoding\n","c6cafbb0":"First, download and load the test set:\n","58820f8b":"# Classification\n","fca46fb6":"Data Standardization give data zero mean and unit variance (technically should be done after train test split)\n","1201787e":"Let's convert male to 0 and female to 1:\n","e57cf31a":"# Support Vector Machine\n","5a5b7552":"## One Hot Encoding\n\n#### How about education?\n","64826285":"We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4\n","2c5377ec":"# Logistic Regression\n","2879d50a":"### About dataset\n","0b7135b3":"What are our lables?\n","dd9e7467":"### Load Data From CSV File\n","eca19da2":"#### Used one hot encoding technique to convert categorical varables to binary variables and append them to the feature Data Frame\n","2300ab61":"### Let's look at the day of the week people get the loan\n","294fe102":"## Convert Categorical features to numerical values\n","e7657904":"Let's define feature sets, X:\n","0039a412":"### Feature Selection\n","d37130ec":"Let\u2019s see how many of each class is in our data set\n","e7e03457":"# K Nearest Neighbor(KNN)","ca3b6721":"# Decision Tree\n"}}