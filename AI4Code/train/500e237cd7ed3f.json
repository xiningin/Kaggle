{"cell_type":{"cee623e5":"code","228c7175":"code","af2c673d":"code","2fefd901":"code","432d5ec6":"code","c3a16351":"code","e40c533f":"code","741a4047":"code","5e0fc4d9":"code","f4ef2246":"code","135953a7":"code","8edd6f98":"code","aebd5551":"code","630a2572":"code","a96fad29":"code","cc6f1f14":"code","4ff146a0":"code","be8170d7":"code","f0512fc7":"code","7eaea0df":"code","64cfdca7":"code","e7963978":"code","06f5113f":"code","067dfa78":"code","48f757f1":"code","c0557bc9":"code","4adac8b7":"code","8b81987a":"code","0d9cf0be":"code","bdece5ac":"code","edfa971f":"code","d8c418bd":"code","6c17a685":"code","4b5b62b5":"code","a4e704ad":"code","57b0bed5":"code","f64d844e":"code","ece4a450":"code","efc09433":"code","b9f2c427":"code","ff9b82d9":"code","7dc9457b":"code","67bcb755":"code","ca0d25e8":"code","cec4b2f6":"code","4c36b04b":"code","6ef3f6c2":"code","65439c2e":"code","0ebe841e":"code","887dbfb6":"code","0ce7eb02":"code","7a1b56bc":"code","da63e812":"code","e58121e3":"code","55d592c8":"code","18d67a5a":"code","3faae3ee":"code","ccbae122":"code","c9b84577":"code","10b39af6":"code","b7aaa259":"code","8c2613dc":"code","b650754a":"code","9bf36d25":"code","2cbf23d9":"code","83bcdb86":"code","a0ea347a":"code","429d90b8":"code","29f3b130":"code","49abd7a7":"code","86d75fa8":"code","ba5bf8fe":"code","fd123d72":"code","647da72f":"markdown","6cc3b697":"markdown","cba7513c":"markdown","e9239d32":"markdown","13e8dd0e":"markdown","cf11ce77":"markdown","67c89ba0":"markdown","06a766bc":"markdown","8a02ed8f":"markdown","4989408d":"markdown","10213930":"markdown","cfdaff33":"markdown","b1340df9":"markdown","185e1383":"markdown","c3b9ead7":"markdown"},"source":{"cee623e5":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime\nfrom dateutil.relativedelta import relativedelta\nimport seaborn as sns\nimport statsmodels.api as sm  \nfrom statsmodels.tsa.stattools import acf  \nfrom statsmodels.tsa.stattools import pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport os","228c7175":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af2c673d":"C_Oil = pd.read_csv('..\/input\/ntt-data-global-ai-challenge-06-2020\/Crude_oil_trend.csv', index_col=0)","2fefd901":"ts = C_Oil[\"Price\"] \nts.head(10)","432d5ec6":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n    \n    #Determing rolling statistics\n    rolmean = timeseries.rolling(window=12).mean()\n    rolstd = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize=(8,5))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n    \ntest_stationarity(ts) ","c3a16351":"C_Oil = pd.read_csv('..\/input\/ntt-data-global-ai-challenge-06-2020\/Crude_oil_trend.csv')\nC_Oil.columns = ['Date','Price']","e40c533f":"C_Oil.head(3)","741a4047":"C_Oil.describe()","5e0fc4d9":"C_Oil.describe(include='O')","f4ef2246":"print('Time period start: {}\\nTime period end: {}'.format(C_Oil.Date.min(),C_Oil.Date.max()))","135953a7":"C_Oil.columns","8edd6f98":"C_Oil.shape","aebd5551":"C_Oil['Date'] = pd.to_datetime(C_Oil['Date'], format='%Y-%m-%d') ","630a2572":"C_Oil['Date'] ","a96fad29":"y = C_Oil.set_index('Date')","cc6f1f14":"y.index","4ff146a0":"y.isnull().sum()","be8170d7":"y.plot(figsize=(15, 6))\nplt.show()","f0512fc7":"from pandas import Series\nfrom matplotlib import pyplot\npyplot.figure(1)\npyplot.subplot(211)\ny.Price.hist()\npyplot.subplot(212)\ny.Price.plot(kind='kde')\npyplot.show()","7eaea0df":"ts_log = np.log(y)\nplt.plot(ts_log)","64cfdca7":"moving_avg = ts_log.rolling(window = 30).mean()\nplt.plot(moving_avg, color = 'Teal')\nplt.plot(ts_log)\nplt.show()","e7963978":"ts_log_moving_avg_diff = ts_log.Price - moving_avg.Price\nts_log_moving_avg_diff.head(30)","06f5113f":"ts_log_moving_avg_diff.dropna(inplace=True)\ntest_stationarity(ts_log_moving_avg_diff)","067dfa78":"expwighted_avg = ts_log.ewm(halflife=30).mean()\nplt.plot(ts_log)\nplt.plot(expwighted_avg, color='Teal')","48f757f1":"ts_log_ewma_diff = ts_log.Price - expwighted_avg.Price\ntest_stationarity(ts_log_ewma_diff)","c0557bc9":"#Differencing\n\nts_log_diff = ts_log.Price - ts_log.Price.shift()\nplt.plot(ts_log_diff)","4adac8b7":"ts_log_diff.dropna(inplace=True)\ntest_stationarity(ts_log_diff)","8b81987a":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nresult = seasonal_decompose(ts_log, model='additive', freq=30)\ntrend = result.trend\nseasonal = result.seasonal\nresidual = result.resid\n\nplt.subplot(411)\nplt.plot(ts_log, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","0d9cf0be":"from statsmodels.tsa.ar_model import AR\nfrom random import random","bdece5ac":"# fit model\nmodel = AR(ts_log_diff)\nmodel_fit = model.fit()","edfa971f":"plt.plot(ts_log_diff)\nplt.plot(model_fit.fittedvalues, color='Teal')\nplt.title('RSS: %.4f'% np.nansum((model_fit.fittedvalues-ts_log_diff)**2))\nplt.show()","d8c418bd":"predictions_ARIMA_diff = pd.Series(model_fit.fittedvalues, copy=True)\nprint (predictions_ARIMA_diff.head())","6c17a685":"#Cumulative Sum to reverse differencing:\npredictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint (predictions_ARIMA_diff_cumsum.head())","4b5b62b5":"predictions_ARIMA_log = pd.Series(ts_log.Price.iloc[0], index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)\npredictions_ARIMA_log.head()","a4e704ad":"#Taking Exponent to reverse Log Transform:\npredictions_ARIMA = np.exp(predictions_ARIMA_log)","57b0bed5":"plt.plot(y.Price)\nplt.plot(predictions_ARIMA)\nplt.title('RMSE: %.4f'% np.sqrt(np.nansum((predictions_ARIMA-y.Price)**2)\/len(y.Price)))","f64d844e":"from statsmodels.tsa.arima_model import ARMA\nfrom random import random\n\n# fit model\nmodel = ARMA(ts_log_diff, order=(0, 1))\nmodel_fit = model.fit(disp=False)","ece4a450":"model_fit.summary()","efc09433":"plt.plot(ts_log_diff)\nplt.plot(model_fit.fittedvalues, color='red')\nplt.title('RSS: %.4f'% np.nansum((model_fit.fittedvalues-ts_log_diff)**2))","b9f2c427":"from statsmodels.tsa.arima_model import ARMA\nfrom random import random\n\n# fit model\nmodel = ARMA(ts_log_diff, order=(2, 1))\nmodel_fit = model.fit(disp=False)","ff9b82d9":"model_fit.summary()","7dc9457b":"plt.plot(ts_log_diff)\nplt.plot(model_fit.fittedvalues, color='Teal')\nplt.title('RSS: %.4f'% np.nansum((model_fit.fittedvalues-ts_log_diff)**2))","67bcb755":"import warnings\nfrom pandas import read_csv\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'","ca0d25e8":"C_Oil = pd.read_csv('..\/input\/ntt-data-global-ai-challenge-06-2020\/Crude_oil_trend.csv')\nC_Oil.columns = ['Date','Price']","cec4b2f6":"C_Oil['Date']= pd.to_datetime(C_Oil['Date']) \nC_Oil.columns\nC_Oil.info()\nC_Oil['Date'].min(), C_Oil['Date'].max()\nC_Oil.isnull().sum()\nC_Oil.describe()\nC_Oil.dtypes","4c36b04b":"C_Oil = C_Oil.groupby('Date')['Price'].sum().reset_index()\nC_Oil = C_Oil.set_index('Date')\nC_Oil.index","6ef3f6c2":"Crud = C_Oil['Price'].resample('MS').mean()","65439c2e":"Crud['2020':]","0ebe841e":"Crud.plot(figsize=(15, 6))\nplt.show()","887dbfb6":"from pylab import rcParams\nrcParams['figure.figsize'] = 18, 8\ndecomposition = sm.tsa.seasonal_decompose(Crud, model='additive')\nfig = decomposition.plot()\nplt.show()","0ce7eb02":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nsea_pdq = [(x[0], x[1], x[2], 12) for x in \n                list(itertools.product(p, d, q))]\n","7a1b56bc":"print('Examples of parameter combinations for Seasonal ARIMA...')\nprint('Crud_oil: {} x {}'.format(pdq[1], sea_pdq[1]))\nprint('Crud_oil: {} x {}'.format(pdq[1], sea_pdq[2]))\nprint('Crud_oil: {} x {}'.format(pdq[2], sea_pdq[3]))\nprint('Crud_oil: {} x {}'.format(pdq[2], sea_pdq[4]))","da63e812":"for param in pdq:\n    for param_seasonal in sea_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(Crud,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","e58121e3":"mod = sm.tsa.statespace.SARIMAX(Crud,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","55d592c8":"results.plot_diagnostics(figsize=(12, 8))\nplt.show()","18d67a5a":"pred = results.get_prediction(start=pd.to_datetime('2014-12-01'), dynamic=False)\n","3faae3ee":"pred_ci = pred.conf_int()\nax = Crud['2020':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(10, 4))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Year')\nax.set_ylabel('Price')\nplt.legend()\nplt.show()","ccbae122":"y_forecasted = pred.predicted_mean\ny_truth = Crud['2014-12-01':]","c9b84577":"mse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error is {}'.format(round(mse, 2)))","10b39af6":"ts = y.Price - y.Price.shift()\nts.dropna(inplace=True)","b7aaa259":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(ts, lags=30, ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(ts, lags=30, ax=ax2)","8c2613dc":"#divide into train and validation set\ntrain = y[:int(0.80*(len(y)))]\nvalid = y[int(0.80*(len(y))):]","b650754a":"from statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n# fit model\nmodel = ARIMA(train, order=(1, 1, 1))\nmodel_fit = model.fit(disp=1)","9bf36d25":"model_fit.summary()","2cbf23d9":"C_Oil = pd.read_csv('..\/input\/ntt-data-global-ai-challenge-06-2020\/Crude_oil_trend.csv')\nC_Oil.columns = ['Date','Price']","83bcdb86":"C_Oil['Date'] = pd.to_datetime(C_Oil['Date'])\nC_Oil.set_axis(C_Oil['Date'], inplace=True)","a0ea347a":"close_data = C_Oil['Price'].values\nclose_data = close_data.reshape((-1,1))","429d90b8":"split_percent = 0.80\nsplit = int(split_percent*len(close_data))","29f3b130":"close_train = close_data[:split]\nclose_test = close_data[split:]","49abd7a7":"date_train = C_Oil['Date'][:split]\ndate_test = C_Oil['Date'][split:]","86d75fa8":"print(len(close_train))\nprint(len(close_test))\n","ba5bf8fe":"from keras.preprocessing.sequence import TimeseriesGenerator\nlook_back = 30\n\ntrain_generator = TimeseriesGenerator(close_train, close_train, length=look_back, batch_size=20)     \ntest_generator = TimeseriesGenerator(close_test, close_test, length=look_back, batch_size=1)","fd123d72":"from keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\nmodel = Sequential()\nmodel.add(\n    LSTM(100,\n        activation='relu',\n        input_shape=(look_back,1))\n)\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n\nnum_epochs = 5\nmodel.fit_generator(train_generator, epochs=num_epochs, verbose=1)","647da72f":"# <font size=\"5\"><span style=\"color: Purple;\">Conclusion**<\/span><\/font>\n\n\n>><font size=\"3\"><span style=\"color: Olive;\">So Our Aim was to find predict on 75-day moving averages of Oil Prices between July 16 to August 21, 2020,which is the future period.And had focused and propitiated on the outcomes. Perhaps We had used lot of other external datasets for trial and error analysis and enhanced some of time series method with appropriate algorithms which gave us good prediction accuracy.<\/span><\/font> \n\n<font size=\"5.5\"><span style=\"color: Lavender;\">\u270c\ufe0fSo Cheers To All!! Hope This Would be Helpful \ud83d\udc4dStay  Safe\ud83d\udcaa<\/span><\/font>","6cc3b697":"# <font size=\"5\"><font size=\"5\"><span style=\"color: Purple;\">Time Series forecasting<\/span><\/font>\n\n>><font size=\"3\"><span style=\"color: Teal;\">Autoregression (AR) The autoregression (AR) method models the next step in the sequence as a linear function of the observations at prior time steps. Number of AR (Auto-Regressive) terms (p): p is the parameter associated with the auto-regressive aspect of the model, which incorporates past values i.e lags of dependent variable. For instance if p is 5, the predictors for x(t) will be x(t-1)\u2026.x(t-5).<\/span>\n","cba7513c":"<span style=\"color: Black;\">**This Python 3 environment comes with many helpful analytics libraries installed**<\/span>    \n<span style=\"color: Black;\">**It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python**<\/span>    \n<span style=\"color: Black;\">**For example, here's several helpful packages to load**<\/span>\n\n","e9239d32":"# <font size=\"5\"><span style=\"color: Purple;\">Exponential weighted average<\/span><\/font>\n\n","13e8dd0e":"# <font size=\"5\"><span style=\"color: Purple;\">Time Series Analysis<\/span><\/font>\n","cf11ce77":"# <font size=\"5\"><span style=\"color: Purple;\">Setting index as the datetime column for easier manipulations:<\/span><\/font>\n\n","67c89ba0":"# <font size=\"5\"><span style=\"color: NAVY;\">ARIMA Model Built<\/span><\/font>","06a766bc":"# <font size=\"5\"><span style=\"color: Purple;\">LSTM Neural Network<\/span><\/font>\n\n\n>><font size=\"3\"><span style=\"color: Teal;\">LSTM stands for long short term memory. It is a model or architecture that extends the memory of recurrent neural networks. Typically, recurrent neural networks have \u2018short term memory\u2019 in that they use persistent previous information to be used in the current neural network. Essentially, the previous information is used in the present task. That means we do not have a list of all of the previous information available for the neural node. LSTM introduces long-term memory into recurrent neural networks. It mitigates the vanishing gradient problem, which is where the neural network stops learning because the updates to the various weights within a given neural network become smaller and smaller. It does this by using a series of \u2018gates\u2019. These are contained in memory blocks which are connected through layers, like this:<\/span><\/font>\n\n><font size=\"4\"><span style=\"color: Navy;\">LSTM work There are three types of gates within a unit:<\/span><\/font>   \n>>><font size=\"3\"><span style=\"color: Olive;\">1.Input Gate: Scales input to cell (write)<\/span><\/font>  \n>>><font size=\"3\"><span style=\"color: Olive;\">2.Output Gate: Scales output to cell (read)<\/span><\/font>  \n>>><font size=\"3\"><span style=\"color: Olive;\">3.Forget Gate: Scales old cell value (reset)<\/span><\/font>   \n>><font size=\"3\"><span style=\"color: Olive;\">Each gate is like a switch that controls the read\/write, thus incorporating the long-term memory function into the model.<\/span><\/font> \n\n\n\n","8a02ed8f":"# <font size=\"5\"><span style=\"color: Purple;\">Stationarity Check<\/span><\/font>\n> > <font size=\"3\">* <span style=\"color: Teal;\">Stationarity means that the statistical properties of a time series which is essential because the whole results of the regression might be fabricated.<\/span><\/font>\n\n> > <font size=\"3\">* <span style=\"color: Teal;\">Stationarity is used with many useful analytical tools and statistical tests and models<\/span><\/font>\n","4989408d":"# <font size=\"5\"><span style=\"color: Purple;\">Autoregressive Integrated Moving Average (ARIMA)<\/span><\/font>  \n\n>><font size=\"3\"><span style=\"color: Teal;\">ARIMA is a simple stochastic time series model that we can use to train and then forecast future time points.These model aims to explain data by using time series data on its past values and uses linear regression to make predictions.ARIMA uses a number of lagged observations of time series to forecast observations.<\/span><\/font>\n\n\n>>><font size=\"3\"><span style=\"color: NAVY;\">1.  The data is regressed on its past values<\/span> <\/font>   \n>>><font size=\"3\"><span style=\"color: NAVY;\">2.  The \u201cI\u201d stands for integrated, which means that the data is stationary (This is the Reason why we make the data Stationary if it's not which is a step one above please refer\"Stationarity Check\")<\/span><\/font>.  \n>>><font size=\"3\"><span style=\"color: NAVY;\">3.  ARIMA (p, d, q)<\/span><\/font>    \n>>>><font size=\"3\"><span style=\"color: Olive;\"> *    The parameter p is the number of autoregressive terms or the number of \u201clag observations.\u201d <\/span><\/font>    \n>>>><font size=\"3\"><span style=\"color: Olive;\"> *    The parameter d is known as the degree of differencing<\/span><\/font>   \n>>>><font size=\"3\"><span style=\"color: Olive;\"> *    The parameter q is the number of forecast errors in the model<\/span><\/font> \n\n\n\n\n\n   \n  \n   \n","10213930":"# <font size=\"5\"><span style=\"color: Purple;\">Reversing the transformations<\/span><\/font>\n\n>># <font size=\"4\"><span style=\"color: Navy;\">Fitted or predicted values:<\/span><\/font>\n\n\n\n","cfdaff33":"# <font size=\"5\"><span style=\"color: Purple;\">Moving Average (MA)<\/span><\/font>\n\n>><font size=\"3\"><span style=\"color: Teal;\">Number of MA (Moving Average) terms (q): q is size of the moving average part window of the model i.e. lagged forecast errors in prediction equation. For instance if q is 5, the predictors for x(t) will be e(t-1)\u2026.e(t-5) where e(i) is the difference between the moving average at ith instant and actual value.<\/span><\/font>\n\n","b1340df9":"# <font size=\"5\"> <span style=\"color: Maroon;\">Comprehensive Explanation of Forecasting<\/span><\/font>\n\n\n<img src=\"https:\/\/images.oedigital.com\/images\/maritime\/w600\/-111492.jpg\" width=\"850x\">         \n\n\n># <font size=\"6\"> <span style=\"color: Lime;\">Introduction<\/span><\/font>  \n>><font size=\"4\"><span style=\"color: Teal;\">The Oil and Gas Industry is experiencing its third price collapse in 12 years. This time is different. The current context combines a supply shock with an unprecedented demand drop and a global humanitarian crisis.  Additionally, the sector\u2019s financial and structural health is worse than in previous crises. Today, with prices touching 30-year lows, and accelerating societal pressure, executives\u2019 sense that change is inevitable. The COVID-19 crisis accelerates what was already shaping up to be one of the industry\u2019s most transformative moments.<\/span><\/font>\n\n\n><font size=\"5\"><span style=\"color: Purple;\">Long-term challenges<\/span><\/font>\n>><font size=\"3\"><span style=\"color: Teal;\">Looking out beyond today\u2019s crisis toward the late 2030s, the macro-environment is set to become even more challenging. Start with supply and demand. We expect growth in demand for hydrocarbons, particularly oil, to peak in the 2030s, and then begin a slow decline.<\/span><\/font>\n\n\n\n><font size=\"5\"><span style=\"color: Purple;\">The Crisis Impetus<\/span><\/font>\n>><font size=\"3\"><span style=\"color: Teal;\">The pandemic is first and foremost a humanitarian challenge, as well as an unprecedented economic one. The industry has responded with a Herculean effort to successfully and safely operate essential assets in this challenging time. The current crisis will have a profound impact on the industry, both short and long term.<\/span><\/font>\n","185e1383":"# <font size=\"5\"><span style=\"color: Purple;\">Data Preprocessing and Visualization<\/span><\/font>  \n><font size=\"4\"><span style=\"color: Navy;\">Converting to datetime format:<\/span><\/font>\n\n","c3b9ead7":"# <font size=\"5\"><span style=\"color: Purple;\">Autoregressive Moving Average (ARMA)<\/span><\/font>\n\n\n>><font size=\"3\"><span style=\"color: Teal;\">Number of AR (Auto-Regressive) terms (p): p is the parameter associated with the auto-regressive aspect of the model, which incorporates past values i.e lags of dependent variable. For instance if p is 5, the predictors for x(t) will be x(t-1)\u2026.x(t-5). Number of MA (Moving Average) terms (q): q is size of the moving average part window of the model i.e. lagged forecast errors in prediction equation. For instance if q is 5, the predictors for x(t) will be e(t-1)\u2026.e(t-5) where e(i) is the difference between the moving average at ith instant and actual value.<\/span><\/font>\n"}}