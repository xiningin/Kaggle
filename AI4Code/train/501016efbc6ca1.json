{"cell_type":{"6ebfb151":"code","1e95d0b1":"code","0a2da2ac":"code","75e1170b":"code","cf18d7eb":"code","f1aa703d":"code","f91dab01":"code","a8dcac79":"code","873917b5":"code","5662eedd":"code","d8c32b08":"code","8e55fa7f":"code","a234ade0":"code","5485f944":"code","594ca934":"code","67ae9588":"code","3c893f32":"code","300ba87f":"code","4f7e3048":"code","cbe60098":"code","b2ee8423":"code","98f28f42":"code","c9ad746d":"code","5a97222b":"code","5703316d":"code","518dff89":"code","c5941990":"code","1b5eb4b1":"code","8c36040a":"code","db89977e":"code","d8fa430f":"code","2022aeed":"code","8e790f5b":"code","ba4271cf":"code","cd3c1bad":"code","e700f02f":"code","eeca7074":"code","8a527497":"code","b91e50e7":"code","eba2d01a":"code","a9c42148":"code","5ee2c970":"code","f1179c3c":"code","cb56abba":"code","e2f2c7d9":"code","a0fadec8":"code","4802e297":"code","500eb077":"code","214bfd36":"code","45516586":"code","24accdd0":"code","5cb584aa":"code","d8a520b7":"code","a5c30b7a":"code","6928c29c":"code","bab602ec":"code","1c1f9d53":"code","28596fba":"code","ed2a4bb3":"code","cbca8345":"code","a76b6474":"code","b877e42d":"code","3376085e":"code","88370a82":"code","f3cd062e":"code","763e1d83":"code","0f96be81":"code","e938c4fe":"code","687ed6d5":"code","4fc5360b":"code","1c217db8":"code","539383ed":"code","40df25dc":"code","9d81385d":"code","f5e5eec8":"code","aa0099d6":"code","4f794a22":"code","49632eab":"code","9f7ea13f":"code","de304dc0":"code","bfadbadc":"code","94eb8b89":"code","97035819":"code","7f5c9628":"code","d71c08f0":"code","79fd8682":"code","9d0f829d":"code","ac59e2a5":"code","b9e44b0d":"code","5d79db20":"code","6ad6f8e2":"code","16e87e5f":"code","ac314f65":"markdown","5a6b8fc4":"markdown","28d4252e":"markdown","2f2a640c":"markdown","892700f2":"markdown","267f4c55":"markdown","3fdab473":"markdown","e381a0d1":"markdown","060f7f40":"markdown","36a3d865":"markdown","94ef78fd":"markdown","5dd76d62":"markdown","1772563f":"markdown","f2c715af":"markdown","a5ef4133":"markdown","e24b5aa3":"markdown","29f94e32":"markdown","a13f2669":"markdown"},"source":{"6ebfb151":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e95d0b1":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n# %matplotlib notebook\nplt.rcParams[\"figure.figsize\"] = (12,6)\n# plt.rcParams['figure.dpi'] = 100\nsns.set_style(\"whitegrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.warn(\"this will not show\")\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\npd.options.display.max_rows = 100\npd.options.display.max_columns = 100","0a2da2ac":"df0 = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ndf = df0.copy() ","75e1170b":"df.head(2)","cf18d7eb":"df.info()","f1aa703d":"df.isnull().sum().any()","f91dab01":"df.describe().T","a8dcac79":"df = df.drop('id', axis = 1)","873917b5":"sns.distplot(df['price']);","5662eedd":"df[df[\"price\"] > 3000000]","d8c32b08":"df.groupby(\"waterfront\").mean().T","8e55fa7f":"plt.figure(figsize = (8,10))\ndf.corr()[\"price\"].sort_values().drop(\"price\").plot(kind = \"barh\");","a234ade0":"sns.scatterplot(x = 'price',y = 'sqft_living', data = df, hue = \"grade\");","5485f944":"sns.countplot(df['bedrooms']);","594ca934":"sns.boxplot(x = 'bedrooms', y = 'price', data = df);","67ae9588":"df[df[\"bedrooms\"] > 10]","3c893f32":"df = df[df[\"bedrooms\"] != 33]","300ba87f":"df.shape","4f7e3048":"df['date'].dtype","cbe60098":"df['date'] = pd.to_datetime(df['date'])","b2ee8423":"df['date']","98f28f42":"df['year'] = df['date'].apply(lambda date : date.year)","c9ad746d":"df['month'] = df['date'].apply(lambda date : date.month)","5a97222b":"df.head()","5703316d":"sns.boxplot(x = 'year', y = 'price', data = df);","518dff89":"df.groupby('year')['price'].mean().plot();","c5941990":"sns.boxplot(x = 'month', y = 'price', data = df);","1b5eb4b1":"df.groupby('month')['price'].mean().plot();","8c36040a":"month_dummy = pd.get_dummies(df[\"month\"], prefix = \"month\")\ndf = pd.concat([df, month_dummy], axis = 1)\ndf.head()","db89977e":"df = df.drop(['date', \"year\", \"month\"], axis = 1)","d8fa430f":"df['zipcode'].value_counts()","2022aeed":"df = df.drop('zipcode', axis = 1)","8e790f5b":"df['yr_renovated'].value_counts()","ba4271cf":"df['yr_built'].value_counts()","cd3c1bad":"sns.distplot(df['sqft_basement']);","e700f02f":"df['sqft_basement'].value_counts()","eeca7074":"df[df[\"sqft_basement\"] > 3000]","8a527497":"sns.distplot(df['sqft_above']);","b91e50e7":"df['sqft_above'].value_counts()","eba2d01a":"df[df[\"sqft_above\"] > 6000]","a9c42148":"plt.figure(figsize = (12, 8))\nsns.scatterplot(x = 'price', y = 'long', data = df);","5ee2c970":"plt.figure(figsize  = (12, 8))\nsns.scatterplot(x = 'price', y = 'lat', data = df);","f1179c3c":"plt.figure(figsize = (12, 8))\nsns.scatterplot(x = 'long', y = 'lat', data = df, hue = 'price');","cb56abba":"len(df) * (0.01)","e2f2c7d9":"df.sort_values('price', ascending = False).head(216)","a0fadec8":"non_top_1_perc = df.sort_values('price', ascending = False).iloc[216:]","4802e297":"plt.figure(figsize = (12, 8))\nsns.scatterplot(x = 'long', y = 'lat', data = non_top_1_perc, hue = 'price',\n                palette = 'RdYlGn', edgecolor = None, alpha = 0.2);","500eb077":"sns.boxplot(x = 'waterfront', y = 'price', data = df);","214bfd36":"import folium\nfolium.Map(location=[df[\"lat\"].mean(), df[\"long\"].mean()], zoom_start=10)","45516586":"map_kc = folium.Map(location=[df[\"lat\"].mean(), df[\"long\"].mean()], zoom_start = 10) # location=[47.511,  -122.257]\nfor lat, lng in zip(df['lat'], df['long']):\n    folium.CircleMarker(\n        [lat, lng],\n        radius = 1,\n        color = 'blue',\n        fill = False ,\n        fill_color ='#3186CC',\n        fill_opacity = 0.3).add_to(map_kc)\nmap_kc","24accdd0":"df.head()","5cb584aa":"df.shape","d8a520b7":"from sklearn.model_selection import train_test_split","a5c30b7a":"X = df.drop('price', axis = 1)\ny = df['price']","6928c29c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=101)","bab602ec":"from sklearn.preprocessing import MinMaxScaler  # RobustScaler()","1c1f9d53":"scaler = MinMaxScaler()","28596fba":"X_train= scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","ed2a4bb3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation","cbca8345":"from sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score","a76b6474":"def eval_metric(actual, pred):\n    mae = mean_absolute_error(actual, pred)\n    mse = mean_squared_error(actual, pred)\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    score = r2_score(actual, pred)\n    return print(\"r2_score:\", score, \"\\nmae:\", mae, \"\\nmse:\", mse, \"\\nrmse:\", rmse)","b877e42d":"X_train.shape","3376085e":"model = Sequential()\n\nmodel.add(Dense(19, activation = 'relu', input_dim = X_train.shape[1]))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer = 'adam', loss = 'mae')","88370a82":"model.weights","f3cd062e":"model.fit(x = X_train, y = y_train, validation_split = 0.15, batch_size = 128, epochs = 1000)","763e1d83":"model.summary()","0f96be81":"model.weights","e938c4fe":"pd.DataFrame(model.history.history)","687ed6d5":"loss_df = pd.DataFrame(model.history.history)\nloss_df.plot()","4fc5360b":"model.evaluate(X_test, y_test, verbose=0)","1c217db8":"y_pred = model.predict(X_test)","539383ed":"eval_metric(y_test, y_pred)","40df25dc":"from tensorflow.keras.optimizers import Adam","9d81385d":"model = Sequential()\n\nmodel.add(Dense(19, activation = 'relu', input_dim = X_train.shape[1]))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(1))\n\nopt = Adam(lr = 0.003)\nmodel.compile(optimizer = opt, loss = 'mae')","f5e5eec8":"model.fit(x = X_train, y = y_train, validation_split = 0.15, batch_size = 128, epochs = 1000)","aa0099d6":"loss_df = pd.DataFrame(model.history.history)\nloss_df.plot()","4f794a22":"y_pred = model.predict(X_test)","49632eab":"eval_metric(y_test, y_pred)","9f7ea13f":"from tensorflow.keras.callbacks import EarlyStopping","de304dc0":"model = Sequential()\n\nmodel.add(Dense(19, activation = 'relu', input_dim = X_train.shape[1]))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(1))\n\nopt = Adam(lr = 0.1)\nmodel.compile(optimizer = opt, loss = 'mae')","bfadbadc":"early_stop = EarlyStopping(monitor = \"val_loss\", mode = \"auto\", verbose = 1, patience = 35)","94eb8b89":"model.fit(x = X_train, y = y_train, validation_split = 0.15, batch_size = 128, epochs = 1000, callbacks = [early_stop])","97035819":"loss_df = pd.DataFrame(model.history.history)\nloss_df.plot()","7f5c9628":"y_pred = model.predict(X_test)","d71c08f0":"eval_metric(y_test, y_pred)","79fd8682":"import pickle\npickle.dump(scaler, open(\"scaler_kc_house\", 'wb'))","9d0f829d":"model = Sequential()\n\nmodel.add(Dense(19, activation = 'relu', input_dim = X_train.shape[1]))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(19, activation = 'relu'))\nmodel.add(Dense(1))\n\nopt = Adam(lr = 0.1)\nmodel.compile(optimizer = opt, loss = 'mae')","ac59e2a5":"model.fit(x = X_train, y = y_train, validation_data = (X_test, y_test), batch_size = 128, epochs = 1000)","b9e44b0d":"loss_df = pd.DataFrame(model.history.history)\nloss_df.plot()","5d79db20":"y_pred = model.predict(X_test)","6ad6f8e2":"eval_metric(y_test, y_pred)","16e87e5f":"model.save('model_kc_house.h5')  # creates a HDF5 file 'my_model.h5'","ac314f65":"## date","5a6b8fc4":"# EarlyStopping","28d4252e":"## sqft_above","2f2a640c":"# Modelling & Model Performance","892700f2":"### Id_number","267f4c55":"# Exploratory Data Analysis and Visualization","3fdab473":"## price","e381a0d1":"We will be using data from a Kaggle data set:\n\nhttps:\/\/www.kaggle.com\/harlfoxem\/housesalesprediction\n\n#### Feature Columns\n    \n* id - Unique ID for each home sold\n* date - Date of the home sale\n* price - Price of each home sold\n* bedrooms - Number of bedrooms\n* bathrooms - Number of bathrooms, where .5 accounts for a room with a toilet but no shower\n* sqft_living - Square footage of the apartments interior living space\n* sqft_lot - Square footage of the land space\n* floors - Number of floors\n* waterfront - A dummy variable for whether the apartment was overlooking the waterfront or not\n* view - An index from 0 to 4 of how good the view of the property was\n* condition - An index from 1 to 5 on the condition of the apartment,\n* grade - An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average level of construction and design, and 11-13 have a high quality level of construction and design.\n* sqft_above - The square footage of the interior housing space that is above ground level\n* sqft_basement - The square footage of the interior housing space that is below ground level\n* yr_built - The year the house was initially built\n* yr_renovated - The year of the house\u2019s last renovation\n* zipcode - What zipcode area the house is in\n* lat - Lattitude\n* long - Longitude\n* sqft_living15 - The square footage of interior housing living space for the nearest 15 neighbors\n* sqft_lot15 - The square footage of the land lots of the nearest 15 neighbors","060f7f40":"# Saving Final Model and Scaler","36a3d865":"## zipcode","94ef78fd":"## sqft_basement","5dd76d62":"# learning_rate","1772563f":"## Geographical Properties","f2c715af":"## latest data","a5ef4133":"## yr_renovated & yr_built","e24b5aa3":"## bedrooms","29f94e32":"# Keras Regression","a13f2669":"# Preprocessing of Data\n* Train | Test Split, Scalling"}}