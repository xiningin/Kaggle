{"cell_type":{"f38b5ea1":"code","a88703ee":"code","fa032122":"code","3abdbaec":"code","2b6fee8c":"code","168c2031":"code","c5519278":"code","ecf25cdf":"code","ff3ed629":"code","552ae6a2":"code","d4517187":"code","88cb489e":"code","a1926565":"code","e7842ca1":"code","5fe41272":"code","ccfd05c1":"code","ef787cc2":"code","d90f0cad":"code","a6e5dd73":"code","0e0db147":"code","a4271e14":"code","a0e4f96d":"code","d7348f19":"code","748582fd":"code","c9d3411c":"code","ca962341":"code","64c625eb":"code","4fc7a618":"code","6826c184":"code","c41a8b1a":"code","23bc0e35":"code","ea2ac73d":"code","9f2363f2":"code","9e31576e":"markdown","eb25addc":"markdown","0dd69afb":"markdown"},"source":{"f38b5ea1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a88703ee":"df = pd.read_csv('..\/input\/USA_Housing.csv')\ndf.head()","fa032122":"df.info()","3abdbaec":"df.describe()","2b6fee8c":"df.columns","168c2031":"sns.pairplot(df)","c5519278":"sns.distplot(df['Price'])","ecf25cdf":"sns.heatmap(df.corr(),annot=True)","ff3ed629":"df.columns","552ae6a2":"X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n       'Avg. Area Number of Bedrooms', 'Area Population']]","d4517187":"y= df['Price']","88cb489e":"from sklearn.model_selection import train_test_split\n","a1926565":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.4, random_state=101)","e7842ca1":"from sklearn.linear_model import LinearRegression","5fe41272":"lm = LinearRegression()","ccfd05c1":"lm.fit(X_train,  y_train)","ef787cc2":"print(lm.intercept_)","d90f0cad":"lm.coef_","a6e5dd73":"X_train.columns","0e0db147":"pd.DataFrame(lm.coef_, X.columns, columns=['Coeff'])","a4271e14":"from sklearn.datasets import load_boston","a0e4f96d":"boston = load_boston()","d7348f19":"boston.keys()","748582fd":"print(boston['DESCR'])","c9d3411c":"predictions = lm.predict(X_test)","ca962341":"predictions","64c625eb":"y_test","4fc7a618":"plt.scatter(y_test,predictions)","6826c184":"sns.distplot(y_test-predictions)","c41a8b1a":"from sklearn import metrics\n","23bc0e35":"metrics.mean_absolute_error(y_test, predictions)","ea2ac73d":"metrics.mean_squared_error(y_test, predictions)","9f2363f2":"np.sqrt(metrics.mean_squared_error(y_test, predictions))","9e31576e":"**Note**\nThis notebook is a practice from the Udemy course by Jose Portilla - Python for datascience and machine learning","eb25addc":"**A note on errors**\n* MAE = Mean Absolute Error it's the average error\n* MSE = Mean Squared Error punishes larger errors, which tends to be more useful in the real world\n* RMSE = Root Mean Squared Error is interpretable in the y units\nThere are all loss functions because we want to minimize them","0dd69afb":"**> Normal distributed residuals is a good sign**"}}