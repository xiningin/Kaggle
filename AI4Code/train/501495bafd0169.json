{"cell_type":{"4dedbcc9":"code","90a113fa":"code","b7c1c218":"code","9b4eb1f0":"code","13b1e6f8":"code","d1ee6b16":"code","d571e314":"code","2a9aa20f":"code","d5f13b81":"code","ae15a2fd":"code","2b1a2d3c":"code","e6ff2a84":"code","e023d8f3":"code","7237512a":"code","9f6154ed":"markdown","62aacc99":"markdown","99f9a1da":"markdown"},"source":{"4dedbcc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90a113fa":"df = pd.read_csv('..\/input\/connect-4\/c4_game_database.csv')","b7c1c218":"df.shape","9b4eb1f0":"df.head()","13b1e6f8":"df.dtypes","d1ee6b16":"df.isnull().sum()","d571e314":"df= df.dropna()","2a9aa20f":"import seaborn as sns \nimport matplotlib.pyplot as plt ","d5f13b81":"fig = plt.figure(figsize = (22,18))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","ae15a2fd":"X = df.drop('winner', axis = 1)\ny = df['winner']","2b1a2d3c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.35,random_state=42)","e6ff2a84":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel_1 = RandomForestClassifier(max_depth=30, random_state=15)\nmodel_1.fit(X_train, y_train)","e023d8f3":"y_pred = model_1.predict(X_test)","7237512a":"accuracy_score(y_test,y_pred)\n","9f6154ed":"## Loading Data","62aacc99":"## Split Data","99f9a1da":"# Building Model Using RF"}}