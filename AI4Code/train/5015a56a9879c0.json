{"cell_type":{"7ef2a6f4":"code","d816fb5f":"code","412ed308":"code","09c18ef6":"code","9b453369":"code","a4c469f7":"code","3adb3dfe":"code","6e44078d":"code","6ebd73d4":"code","bf1b3906":"code","20b4d3bd":"code","77225c8b":"code","0c07937d":"code","796e981d":"code","c6a74916":"code","2f0da136":"code","cc232c13":"code","626de0c5":"code","7d644d26":"code","de679a3f":"code","1ee37ee0":"code","2e5a8ca6":"code","27ff772a":"code","4ecd8f82":"code","39b78c5a":"code","836f4ed7":"code","c8de36ca":"code","8773b7d8":"code","9f021bed":"code","85ee670b":"code","d1be2a88":"code","6ff8d2f8":"code","dbde7bf5":"code","25c83c19":"code","d4a69c4a":"code","e6fd378f":"code","5094091d":"code","18a7d9ad":"code","7758eb9d":"code","f8b6a488":"code","94e523a1":"code","e93c003a":"code","98ebbb9d":"code","0f3d09b6":"code","5c310601":"code","28daa648":"code","2002ce8a":"code","1925bfc6":"code","491e4782":"code","85a2cf75":"code","78ca09f4":"code","d16adf84":"code","630d3cdf":"code","ee0f0e7d":"code","67f07760":"code","50b4b727":"code","c603f837":"code","3789f420":"code","c101ad3b":"code","1d588e5f":"code","f482322a":"code","664d2d6c":"code","ca932167":"code","cbab8518":"code","6d968013":"code","f0bf2822":"code","020400f1":"code","6f2b38c9":"code","48d4ca63":"code","7700c78d":"code","80cfa80e":"code","3d450fe6":"code","260ce5bc":"code","085276bb":"code","9d8fe227":"code","095e7a5d":"code","0e05bae5":"code","91bcb307":"code","603e3b7f":"code","68c3304d":"code","690b9101":"code","1803fedb":"code","0bd74988":"code","8669b484":"code","ffe0b7c6":"code","1decc7b2":"code","49d85e07":"code","a0b96877":"code","0ae32c25":"markdown","553d0b26":"markdown","d67a0529":"markdown","22457066":"markdown","ad706e1c":"markdown","963ddb38":"markdown","45257598":"markdown","82f29792":"markdown","dd8e3ad1":"markdown","82727736":"markdown","72019a41":"markdown","50b930ef":"markdown","ecdf735c":"markdown","9aebc826":"markdown","d33cafdc":"markdown","b95d8abb":"markdown","b30785ab":"markdown","a37e7d9d":"markdown"},"source":{"7ef2a6f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d816fb5f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom scipy.integrate import odeint\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport folium\nfrom scipy.integrate import odeint\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n","412ed308":"df1 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')\ndf1.head(2)","09c18ef6":"df1 = df1[df1.columns[:-8]]\ndf1.drop('Unnamed: 3', axis=1, inplace=True)","9b453369":"df1['reporting date'] = pd.to_datetime(df1['reporting date'])\ndf1['exposure_start'] = pd.to_datetime(df1['exposure_start'])\ndf1['exposure_end'] = pd.to_datetime(df1['exposure_end'])\ndf1['hosp_visit_date'] = pd.to_datetime(df1['hosp_visit_date'])\ndf1['symptom_onset'] = pd.to_datetime(df1['symptom_onset'])","a4c469f7":"df2 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\ndf2 = df2[df2.columns[:-12]]\ndf2.loc[df2['sex']=='male', 'sex'] = 'Male'\ndf2.loc[df2['sex']=='female', 'sex'] = 'Female'\ndf2.head(2)\n","3adb3dfe":"df3 = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\ndf3.head()","6e44078d":"df1.head(2)","6ebd73d4":"df1['sym_exp_diff'] = (df1['symptom_onset'] - df1['exposure_end']).dt.days\ndf1['hosp_sym_diff'] = (df1['hosp_visit_date'] - df1['symptom_onset']).dt.days","bf1b3906":"fig = px.pie(df1, values=[df1['gender'].value_counts()[0], df1['gender'].value_counts()[1]], names=['Male', 'Female'], title='Male v Female Affected Ratio')\nfig.show()","20b4d3bd":"fig = px.violin(df2[df2['sex']!='4000'].dropna(subset=['age', 'sex']), y=\"age\", x='sex', color=\"sex\",\n                hover_data=df2.columns, title='Age Ratio of people affected b\/w the two genders')\nfig.show()","77225c8b":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\ndf3_mapping = df3.loc[:20000].dropna(subset=['Confirmed']).reset_index(drop=True)\n\nfor i in range(0, len(df3_mapping)):\n    folium.Circle(\n        location=[df3_mapping.iloc[i]['Lat'], df3_mapping.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(df3_mapping.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(df3_mapping.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(df3_mapping.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(df3_mapping.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(df3_mapping.iloc[i]['Recovered']),\n        radius=int(df3_mapping.iloc[i]['Confirmed'])**1.1).add_to(m)","0c07937d":"ncov_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nncov_df['ObservationDate'] = pd.to_datetime(ncov_df['ObservationDate']) \n\nncov_df[\"Country\"] = ncov_df[\"Country\/Region\"].replace(\n    {\n        \"Mainland China\": \"China\",\n        \"Hong Kong SAR\": \"Hong Kong\",\n        \"Taipei and environs\": \"Taiwan\",\n        \"Iran (Islamic Republic of)\": \"Iran\",\n        \"Republic of Korea\": \"South Korea\",\n        \"Republic of Ireland\": \"Ireland\",\n        \"Macao SAR\": \"Macau\",\n        \"Russian Federation\": \"Russia\",\n        \"Republic of Moldova\": \"Moldova\",\n        \"Taiwan*\": \"Taiwan\",\n        \"Cruise Ship\": \"Others\",\n        \"United Kingdom\": \"UK\",\n        \"Viet Nam\": \"Vietnam\",\n        \"Czechia\": \"Czech Republic\",\n        \"St. Martin\": \"Saint Martin\",\n        \"Cote d'Ivoire\": \"Ivory Coast\",\n        \"('St. Martin',)\": \"Saint Martin\",\n        \"Congo (Kinshasa)\": \"Congo\",\n    }\n)\nncov_df[\"Province\"] = ncov_df[\"Province\/State\"].fillna(\"-\").replace(\n    {\n        \"Cruise Ship\": \"Diamond Princess cruise ship\",\n        \"Diamond Princess\": \"Diamond Princess cruise ship\"\n    }\n)","796e981d":"ncov_df.head()","c6a74916":"ncov_india = ncov_df[ncov_df['Country'] == 'India']\nncov_india = pd.DataFrame(ncov_india.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_india['ObservationDate'], y=ncov_india['Confirmed'], name='Confirmed Cases'))\n# fig1.add_trace(go.Scatter(x=ncov_india[21:23]['ObservationDate'], y=ncov_india[21:23]['Confirmed'], mode='markers', name='Inflection', marker=dict(color='Red',line=dict(width=5, color='Red'))))\nfig1.layout.update(title_text='COVID-19 Growth in India',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"Black\"\n    ))\nfig1.layout.plot_bgcolor = 'white'\nfig1.layout.paper_bgcolor = 'white'\nfig1.show()","2f0da136":"ncov_india.tail()","cc232c13":"\nncov_china = ncov_df[ncov_df['Country'] == 'China']\nncov_china = pd.DataFrame(ncov_china.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_china['ObservationDate'], y=ncov_china['Confirmed'], name='Confirmed Cases'))\nfig1.add_trace(go.Scatter(x=ncov_china[21:23]['ObservationDate'], y=ncov_china[21:23]['Confirmed'], mode='markers', name='Inflection', marker=dict(color='Red',line=dict(width=5, color='Red'))))\nfig1.layout.update(title_text='COVID-19 Growth in China & Inflection',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n#         color=\"white\"\n    ))\n# fig1.layout.plot_bgcolor = 'Black'\n# fig1.layout.paper_bgcolor = 'Black'\nfig1.show()","626de0c5":"fig = px.box(df1.dropna(subset=['sym_exp_diff']), y=\"sym_exp_diff\", points='all', title='Days difference between symptom and exposure dates') # typically after how many days after the exposure do the symptoms come up\n# fig.layout.plot_bgcolor = '#6A7806'\n# fig.layout.paper_bgcolor = '#6A7806'\nfig.show()","7d644d26":"fig = px.box(df1.dropna(subset=['hosp_sym_diff']).reset_index(drop=True), y=\"hosp_sym_diff\", points='all', \\\n             title='Days difference between hospital visit and symptom dates') # typically after how many days after the exposure do the symptoms come up\nfig.show()","de679a3f":"ncov_italy = ncov_df[ncov_df['Country'] == 'Italy']\nncov_us = ncov_df[ncov_df['Country'] == 'US']\nncov_spain = ncov_df[ncov_df['Country'] == 'Spain']\nncov_germany = ncov_df[ncov_df['Country'] == 'Germany']\nncov_iran = ncov_df[ncov_df['Country'] == 'Iran']\nncov_france = ncov_df[ncov_df['Country'] == 'France']\nncov_uk = ncov_df[ncov_df['Country'] == 'UK']\nncov_swiss = ncov_df[ncov_df['Country'] == 'Switzerland']\nncov_soukor = ncov_df[ncov_df['Country'] == 'South Korea']\n\nncov_italy = pd.DataFrame(ncov_italy.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_us = pd.DataFrame(ncov_us.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_spain = pd.DataFrame(ncov_spain.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_germany = pd.DataFrame(ncov_germany.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_iran = pd.DataFrame(ncov_iran.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_france = pd.DataFrame(ncov_france.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_uk = pd.DataFrame(ncov_uk.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_swiss = pd.DataFrame(ncov_swiss.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_soukor = pd.DataFrame(ncov_soukor.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()","1ee37ee0":"ncov_all = pd.DataFrame(ncov_df.groupby(['Country', 'ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index().drop_duplicates(subset=['Country'], keep='last')\nncov_all.reset_index(drop=True, inplace=True)\nncov_all = ncov_all.sort_values(by=['Confirmed'], ascending=False).reset_index(drop=True)\nncov_all = ncov_all.head(20)  # Top 20 countries only selected\n","2e5a8ca6":"fig = go.Figure(data=[\n    go.Bar(name='Confirmed',x=ncov_all['Country'].unique(), y=ncov_all['Confirmed']),\n    go.Bar(name='Deaths', x=ncov_all['Country'].unique(), y=ncov_all['Deaths']),\n    go.Bar(name='Recovered', x=ncov_all['Country'].unique(), y=ncov_all['Recovered'])\n])\n# Change the bar mode\nfig.layout.update(barmode='stack', title='Top 20 Country-wise Corona Cases & Consequences', yaxis_showgrid=False)\nfig.show()","27ff772a":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_italy['ObservationDate'], y=ncov_italy['Confirmed'], name='Italy'))\nfig1.add_trace(go.Scatter(x=ncov_us['ObservationDate'], y=ncov_us['Confirmed'], name='USA'))\nfig1.add_trace(go.Scatter(x=ncov_spain['ObservationDate'], y=ncov_spain['Confirmed'], name='Spain'))\nfig1.add_trace(go.Scatter(x=ncov_uk['ObservationDate'], y=ncov_uk['Confirmed'], name='UK'))\nfig1.add_trace(go.Scatter(x=ncov_germany['ObservationDate'], y=ncov_germany['Confirmed'], name='Germany'))\nfig1.add_trace(go.Scatter(x=ncov_iran['ObservationDate'], y=ncov_iran['Confirmed'], name='Iran'))\nfig1.add_trace(go.Scatter(x=ncov_france['ObservationDate'], y=ncov_france['Confirmed'], name='France'))\nfig1.add_trace(go.Scatter(x=ncov_india['ObservationDate'], y=ncov_india['Confirmed'], name='India'))\n\nfig1.layout.update(title_text='COVID-19 Growth in the World',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n        size=12,\n#         color=\"white\"\n    ))\n# fig1.layout.plot_bgcolor = 'Black'\n# fig1.layout.paper_bgcolor = 'Black'\nfig1.show()","4ecd8f82":"\nncov_all['CD_Ratio'] = ncov_all['Deaths']\/ncov_all['Confirmed']\nncov_all['CR_Ratio'] = ncov_all['Recovered']\/ncov_all['Confirmed']\nncov_all = ncov_all.round(2)\npd.set_option('display.max_rows', 200)\nprint(ncov_all.loc[ncov_all['Country']=='India'])\nncov_all.head()","39b78c5a":"\nncov_all_cdr = ncov_all.sort_values(by=['CD_Ratio'], ascending=False).reset_index(drop=True)\nncov_all_crr = ncov_all.sort_values(by=['CR_Ratio'], ascending=False).reset_index(drop=True)\nfig = px.bar(ncov_all_cdr, x=\"Country\", y=\"CD_Ratio\", color='CD_Ratio', title='Country-wise Death:Confirmed Cases Ratio')\nfig.show()","836f4ed7":"# 1 out of 10 person dies in Italy which is too high\nfig = px.bar(ncov_all_crr, x=\"Country\", y=\"CR_Ratio\", color='CR_Ratio', title='Country-wise Recovered:Confirmed Cases Ratio')\nfig.show()","c8de36ca":"cov19ind_age=pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\ncov19ind_age","8773b7d8":"# Interesting Facts here:\n# i) What did China do that there recovery rate is so high?\n# ii) Need to understand why the deaths:confirmed ratio are so high in Iran, Italy, Spain and UK\ndf2_china = df2[df2['country']=='China'].dropna(subset=['age']).reset_index(drop=True)\ndf2_italy = df2[df2['country']=='Italy'].dropna(subset=['age']).reset_index(drop=True)\ndf2_india = df2[df2['country']=='India'].dropna(subset=['age']).reset_index(drop=True)\nprint(df2_india)\n# df2_china.head(2)\nfig = go.Figure()\nfig.add_trace(go.Box(y=df2_china['age'], name='China'))\nfig.add_trace(go.Box(y=df2_italy['age'], name='Italy'))\nfig.add_trace(go.Box(y=df2_india['age'], name='India'))\nfig.update_layout(title='Age Comparison between Chinese,Italians and Indians')\n\nfig.show()","9f021bed":"df2_india.head()","85ee670b":"def clean(x):\n    if x == 'death' or x == 'died' or x == 'Death':\n        return 'death'\n    elif x == 'discharged' or x=='discharge':\n        return 'discharge'\n    elif x == 'recovered' or x=='stable':\n        return 'recovered'\n    else:\n        return np.nan\n    \ndef apply_int(x):\n    try:\n        y = int(x)\n        return y\n    except:\n        return np.nan\n\n    \ndf1_chinese = pd.DataFrame(df2_china[df2_china['outcome'].apply(clean)=='death']['age'].apply(apply_int)).assign(outcome='death')\ndf2_chinese = pd.DataFrame(df2_china[df2_china['outcome'].apply(clean)=='discharge']['age'].apply(apply_int)).assign(outcome='discharge')\ndf3_chinese = pd.DataFrame(df2_china[df2_china['outcome'].apply(clean)=='recovered']['age'].apply(apply_int)).assign(outcome='recovered')\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df1_chinese['age'], name=\"Deceased Patients\"))\nfig.add_trace(go.Box(y=df2_chinese['age'], name=\"Discharged Patients\"))\nfig.add_trace(go.Box(y=df3_chinese['age'], name=\"Recovered Patients\"))\nfig.update_layout(title_text='Chinese COVID-19 Patients Outcome Age-Wise')\nfig.show()","d1be2a88":"df_india= pd.read_csv('..\/input\/coronavirus-cases-in-india\/Covid cases in India.csv')\ndbd_tc_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset April 2020.xlsx', sheet_name='Daily Cases Time-Series')\ndbd_tc_india.tail(2)\n","6ff8d2f8":"temp=pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ntemp['Date'] = pd.to_datetime(temp['Date'], format='%d\/%m\/%y')\ntemp = temp.groupby('Date', as_index=False).sum()\ntemp=temp.drop(['Sno'], axis = 1) \ntemp.rename(columns = {'Confirmed':'Total Confirmed','Cured':'Total Recovered','Deaths':'Total Deceased'}, inplace = True)\ntemp['Daily Confirmed'] = temp['Total Confirmed'].diff()\ntemp['Daily Deceased'] = temp['Total Deceased'].diff()\ntemp=temp[1:]\ntemp","dbde7bf5":"dbd_tc_india=temp","25c83c19":"db_india = pd.DataFrame(dbd_tc_india.groupby(['Date'])['Total Confirmed'].sum()).reset_index()\n\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=db_india['Date'], y=db_india['Total Confirmed']))\nfig1.layout.update(title_text='COVID-19 Growth in India',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = 'Black'\nfig1.layout.paper_bgcolor = 'Black'\nfig1.show()","d4a69c4a":"db_state_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset April 2020.xlsx', sheet_name='State-Wise Data')\ndb_state_india = db_state_india[db_state_india['State']!='Total']\ndb_state_india.head(2)","e6fd378f":"fig = px.bar(db_state_india.sort_values('Confirmed', ascending=False).sort_values('Confirmed', ascending=True),\n             x=\"Confirmed\", y=\"State\", \n             title='Total Confirmed Cases', \n             text='Confirmed', \n             orientation='h', \n             width=800, height=800, range_x = [0, max(db_state_india['Confirmed'])])\nfig.update_traces(marker_color='#670404', opacity=0.8, textposition='inside')\n\nfig.update_layout(plot_bgcolor='#CDCCA7')\nfig.show()","5094091d":"dbd_testing_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset April 2020.xlsx', sheet_name='ICMR Testing Count')\ndbd_testing_india['Update Time Stamp'] = pd.to_datetime(dbd_testing_india['Update Time Stamp'], format='%d\/%m\/%Y %I:%M: %p')\ndbd_testing_india.head(2)\n","18a7d9ad":"df_hos_bed = dbd_testing_india.rename(columns={'Update Time Stamp':'DateTime', 'Total Individuals Tested':'TotalIndividualsTested', 'Total Positive Cases':\\\n                                              'TotalPositiveCases'}).copy()\ndf_hos_bed['DateTime'] = df_hos_bed['DateTime'].dt.date\ndf_hos_bed.tail()","7758eb9d":"\n\ndf_hos_bed['totalnegative'] = df_hos_bed['TotalIndividualsTested'] - df_hos_bed['TotalPositiveCases']","f8b6a488":"df_hos_bed_per_day = df_hos_bed.drop_duplicates(subset=['DateTime'], keep='last')\ndf_hos_bed_per_day['test_results_posratio'] = round(df_hos_bed_per_day['TotalPositiveCases']\/df_hos_bed_per_day['TotalIndividualsTested'], 3)\ndf_hos_bed_per_day.tail()\n","94e523a1":"df_indi = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset April 2020.xlsx', sheet_name='Raw Data')\ndf_indi.rename(columns={'Patient Number':'id','Current Status':'current_status', 'Age Bracket':'age', 'Notes':'notes'}, inplace=True)\ndf_indi.head(2)","e93c003a":"df_indi.dropna(subset=['current_status', 'age'], inplace=True)\ndf_indi.reset_index(drop=True, inplace=True)\ndf_indi['current_status'].unique(), df_indi.shape\ndf1_indians = df_indi[df_indi['current_status'] == 'Deceased']\ndf2_indians = df_indi[df_indi['current_status'] == 'Hospitalized']\ndf3_indians = df_indi[df_indi['current_status'] == 'Recovered']\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df1_indians['age'], name=\"Deceased Patients\"))\nfig.add_trace(go.Box(y=df2_indians['age'], name=\"Hospitalized Patients\"))\nfig.add_trace(go.Box(y=df3_indians['age'], name=\"Recovered Patients\"))\nfig.update_layout(title_text='Indian COVID-19 Patients Outcome Age-Wise')\nfig.show()\n","98ebbb9d":"df1_indians[df1_indians['age']==1]\n#patient of age 1 died","0f3d09b6":"pep_no_trav_his = df_indi[df_indi['notes'].str.contains('Travel') == False]\npep_with_trav_his = df_indi[df_indi['notes'].str.contains('Travel') == True]\ndf_indi['id'].nunique(), pep_no_trav_his['id'].nunique()\ncolors = ['#B5B200', '#1300B5']\nnegative = round(pep_no_trav_his['id'].nunique()\/df_indi['id'].nunique()*100, 2)\npositive = round(pep_with_trav_his['id'].nunique()\/df_indi['id'].nunique()*100, 2)\n                         \nfig = px.pie(pep_no_trav_his, values=[negative, positive], names=['Patients w\/o Travel History', 'Patients with Travel History'], \\\n             title='Patients with and without Travel History')\nfig.show()","5c310601":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(pep_no_trav_his['notes'].apply(lambda x: x.replace('travel', '')))\n","28daa648":"colors = ['#269A06', '#AF0E06']\ndf_hos_bed_per_day_clean = df_hos_bed_per_day.dropna(subset=['TotalPositiveCases']).reset_index(drop=True)\ndf_hos_bed_per_day_clean['TotalIndividualsTested'].fillna(df_hos_bed_per_day_clean['Total Samples Tested']-900, inplace=True)\ndf_hos_bed_per_day_clean['totalnegative'] = df_hos_bed_per_day_clean['TotalIndividualsTested'] - df_hos_bed_per_day_clean['TotalPositiveCases']\nnegative = round(df_hos_bed_per_day_clean['totalnegative'].sum()\/df_hos_bed_per_day_clean['TotalIndividualsTested'].sum()*100, 2)\npositive = round(df_hos_bed_per_day_clean['TotalPositiveCases'].sum()\/df_hos_bed_per_day_clean['TotalIndividualsTested'].sum()*100, 2)\nfig = go.Figure(data=[go.Pie(labels=['People who tested Negative','People who tested Positive'],\n                             values= [negative,positive],hole =.5)])\n                          \n\nfig.update_traces(title_text='COVID19 Test Results', hoverinfo='label+percent', textinfo='value', textfont_size=15,\n                  marker=dict(colors=colors, line=dict(color='#FFFFFF', width=2)))\nfig.show()","2002ce8a":"df_w_testing = pd.read_csv('..\/input\/covid19-testing-rate-all-countries\/full-list-total-tests-for-covid-19.csv')\ndf_w_testing.head(2)\n","1925bfc6":"df_w_testing = df_w_testing[(df_w_testing['Entity']=='Italy') | (df_w_testing['Entity']=='France') | \\\n                            (df_w_testing['Entity']=='Germany') | (df_w_testing['Entity']=='United Kingdom') | \\\n                            (df_w_testing['Entity']=='United States') | (df_w_testing['Entity']=='Spain') | \\\n                            ((df_w_testing['Entity']=='India'))]\ndf_w_testing['Date'] = pd.to_datetime(df_w_testing['Date'])\ndf_w_testing.reset_index(drop=True, inplace=True)","491e4782":"df_fra = df_w_testing[df_w_testing['Entity'] == 'France']\ndf_ita = df_w_testing[df_w_testing['Entity'] == 'Italy']\ndf_spa = df_w_testing[df_w_testing['Entity'] == 'Spain']\ndf_uk = df_w_testing[df_w_testing['Entity'] == 'United Kingdom']\ndf_us = df_w_testing[df_w_testing['Entity'] == 'United States']\ndf_ger = df_w_testing[df_w_testing['Entity'] == 'Germany']\ndf_fra_rate = pd.merge(df_fra[['Date', 'Total tests']], ncov_france[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_ita_rate = pd.merge(df_ita[['Date', 'Total tests']], ncov_italy[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_ger_rate = pd.merge(df_ger[['Date', 'Total tests']], ncov_germany[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_us_rate = pd.merge(df_us[['Date', 'Total tests']], ncov_us[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_uk_rate = pd.merge(df_uk[['Date', 'Total tests']], ncov_uk[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_spa_rate = pd.merge(df_spa[['Date', 'Total tests']], ncov_spain[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_fra_rate['positive_percentage'] = round(df_fra_rate['Confirmed']\/df_fra_rate['Total tests'], 2)\ndf_ita_rate['positive_percentage'] = round(df_ita_rate['Confirmed']\/df_ita_rate['Total tests'], 2)\ndf_ger_rate['positive_percentage'] = round(df_ger_rate['Confirmed']\/df_ger_rate['Total tests'], 2)\ndf_us_rate['positive_percentage'] = round(df_us_rate['Confirmed']\/df_us_rate['Total tests'], 2)\ndf_uk_rate['positive_percentage'] = round(df_uk_rate['Confirmed']\/df_uk_rate['Total tests'], 2)\ndf_spa_rate['positive_percentage'] = round(df_spa_rate['Confirmed']\/df_spa_rate['Total tests'], 2)\ndf_rate = pd.DataFrame(['France', 'Italy', 'Germany', 'USA', 'UK', 'Spain']).rename(columns={0:'Country'})\ndf_rate['positive_percentage_mean'] = [df_fra_rate['positive_percentage'].mean(), df_ita_rate['positive_percentage'].mean(), \\\n                                  df_ger_rate['positive_percentage'].mean(), df_us_rate['positive_percentage'].mean(), \\\n                                  df_uk_rate['positive_percentage'].mean(), df_spa_rate['positive_percentage'].mean()]\ndf_rate['positive_percentage_mean'] = df_rate['positive_percentage_mean']*100\ndf_rate['positive_percentage_mean'] = df_rate['positive_percentage_mean'].round(2)\ndf_rate","85a2cf75":"df_ind_rate = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset April 2020.xlsx', sheet_name='ICMR Testing Count')\ndf_ind_rate = df_ind_rate.dropna(subset=['Total Positive Cases']).reset_index(drop=True)\ndf_ind_rate['Total Individuals Tested'].fillna(df_ind_rate['Total Samples Tested']-900, inplace=True)\ndf_ind_rate['positive_percentage'] = round(df_ind_rate['Total Positive Cases']\/df_ind_rate['Total Individuals Tested'], 2)\ndf_ind_rate_count = pd.DataFrame(['India']).rename(columns={0:'Country'})\ndf_ind_rate_count['positive_percentage_mean'] = [round(df_ind_rate['positive_percentage'].mean()*100, 2)]\ndf_rate = pd.concat([df_rate, df_ind_rate_count], ignore_index=True)\nfig = px.bar(df_rate.sort_values(by=['positive_percentage_mean'], ascending=False), x='Country', y='positive_percentage_mean',\n            title='Percentage of People who turned out to be +ve in Testing')\nfig.show()","78ca09f4":"df_hos_bed_per_day = df_hos_bed_per_day.dropna(subset=['TotalPositiveCases']).reset_index(drop=True)\ndf_hos_bed_per_day['TotalIndividualsTested'].fillna(df_hos_bed_per_day['Total Samples Tested']-900, inplace=True)\ndf_hos_bed_per_day['test_results_posratio'] = round(df_hos_bed_per_day['TotalPositiveCases']\/df_hos_bed_per_day['TotalIndividualsTested'], 3)\ndf_hos_bed_per_day.head(2)\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=df_hos_bed_per_day['DateTime'], y=df_hos_bed_per_day['test_results_posratio']*100, name='Confirmed Cases', \\\n                         marker=dict(color='#D32210')))\nfig1.layout.update(title_text='COVID-19 Positive Detection per Test Ratio in India w.r.t. Time',xaxis_showgrid=False, width=700, yaxis_title='% of Patients Tested +ve',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = '#097E99'\nfig1.layout.paper_bgcolor = '#097E99'\nfig1.show()\n","d16adf84":"type(df_hos_bed_per_day['DateTime'][0])","630d3cdf":"dbd_tc_india.rename(columns={'Daily Confirmed':'New Cases'}, inplace=True)\ndbd_tc_india.head(2)\nss = []\nfor i in dbd_tc_india.index:\n    if(i!= min(dbd_tc_india.index)):\n        lm = dbd_tc_india.loc[i]['New Cases']\/dbd_tc_india.loc[i-1]['New Cases']\n    else:\n        lm = np.NaN\n    ss.append(lm)\n        \ndbd_tc_india['Growth_Rate'] = ss\ndbd_tc_india.head(2)","ee0f0e7d":"# Analysing the Growth Factor in India\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=dbd_tc_india.iloc[35:(dbd_tc_india.shape[0]-1)]['Date'], y=dbd_tc_india.iloc[35:(dbd_tc_india.shape[0]-1)]['Growth_Rate'], name='Growth Factor', \\\n                         marker=dict(color='#008040')))\nfig1.layout.update(title_text='COVID-19 Growth Factor in India w.r.t. Time',xaxis_showgrid=False, yaxis_showgrid=False, width=700, yaxis_title='Growth Factor',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = '#4d3900'\nfig1.layout.paper_bgcolor = '#4d3900'\nfig1.show()","67f07760":"print('Mean Growth Factor in India = ', round(dbd_tc_india.iloc[35:]['Growth_Rate'].mean(), 2))\ndf_ind_main = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset April 2020.xlsx', sheet_name='Raw Data')\ndf_ind_main = df_ind_main.dropna(subset=['Date Announced'])\ndf_ind_main.reset_index(drop=True)\ndf_ind_main = df_ind_main.drop_duplicates(subset=df_ind_main.drop('Patient Number', axis=1).columns)\ndf_ind_main.reset_index(drop=True)\ndf_ind_main.head(2)","50b4b727":"# Guesstimating the population that might have been affected by the Patients based on their places visited\ncol = 'Notes'\ndf_ind_main['Notes'] = df_ind_main['Notes'].fillna('NA').apply(lambda x: x.replace('No Travel', 'Non-travel'))\nconditions  = [ df_ind_main[col].str.contains('Travel') == True, df_ind_main[col].str.contains('Attended|attended') == True]\nchoices     = [1300, 350] \n\n# Guesstimating avg. population that might have been affected (Airport: 1200 (flight+both side airport) + 100[miscellaneous], \n# Religious Event: 250 + 100[miscellaneous])\n\ndf_ind_main[\"estd_population\"] = np.select(conditions, choices, default=100) # default is 100 (only miscellaneous)","c603f837":"# Total population, N.\nN = 1000000 # considering the a rough estimate of 10 lakhs as population of India who might have been exposed because 135 crore,\n            # i.e. the entire population is too unrealistic\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 102, 19 # till India crossed 100 cases\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n# Contact rate, beta, and mean recovery rate, gamma, (in 1\/days).\nbeta, gamma = 2.4, 1.\/35 # considering Beta & Gamma value based on China's & Europe situation\n# A grid of time points (in days)\nt = np.linspace(0, 30, 30)\n\n# The SIR model differential equations.\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n# Initial conditions vector\ny0 = S0, I0, R0\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, beta, gamma))\nS, I, R = ret.T\n\n# Plot the data on three separate curves for S(t), I(t) and R(t)\nfig = plt.figure(facecolor='w', figsize=(12,10))\nax = fig.add_subplot(111, axisbelow=True)\nax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')\nax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')\nax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered with immunity')\nax.set_xlabel('Time in Days', size=13)\nax.set_ylabel('Number of People', size=13)\n# ax.set_ylim(0,1.2)\nax.yaxis.set_tick_params(length=0)\nax.xaxis.set_tick_params(length=0)\nax.grid(b=True, which='major', c='w', lw=2, ls='-')\nlegend = ax.legend()\nax.set_facecolor('#dddddd')\nlegend.get_frame().set_alpha(0.5)\nfor spine in ('top', 'right', 'bottom', 'left'):\n    ax.spines[spine].set_visible(False)\nax.set_title('Potential COVID-19 Scenario from 14th March for next 30 days in India without lockdown', size=15)\nplt.show()\n","3789f420":"dbd_tc_india.head(2)\ndbd_tc_param = pd.DataFrame(dbd_tc_india.groupby(['Date'])['Total Confirmed','Total Recovered', 'Total Deceased'].sum().reset_index())\ndbd_tc_param['Total Active Cases'] = dbd_tc_param['Total Confirmed'] - dbd_tc_param['Total Recovered'] - dbd_tc_param['Total Deceased']\ndbd_tc_param.tail()","c101ad3b":"dbd_tc_pl = dbd_tc_param[(dbd_tc_param['Date']>'2020-03-01') & (dbd_tc_param['Date']<'2020-03-25')].reset_index(drop=True) # considering pre lockdown period\ndbd_tc_pl","1d588e5f":"dbd_tc_param = dbd_tc_param[dbd_tc_param['Date']>='2020-03-25'].reset_index(drop=True) # considering from lockdown date\ndbd_tc_param = dbd_tc_param[:-1]\ndbd_tc_param","f482322a":"dbd_tc_pl['Date']=pd.to_datetime(dbd_tc_pl['Date'], format=\"%Y-%m-%d\")\n# df['Date'] = pd.to_datetime(df['Date'])","664d2d6c":"dbd_tc_pl['Date'].tail()","ca932167":"data = dbd_tc_pl.set_index('Date')['Total Active Cases']\ninfected = dbd_tc_pl.set_index('Date')['Total Confirmed']\nrecovered = dbd_tc_pl.set_index('Date')['Total Recovered']\ndata.index=data.index.to_pydatetime()\ninfected.index=infected.index.to_pydatetime()\nrecovered.index=recovered.index.to_pydatetime()\ns_0 = 30000\ni_0 = 5\nr_0 = 3\n","cbab8518":"# Defining Loss Function for estimating Beta and Gamma\ndef loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2\ndef predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = list(data.index.values)\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))\ndef train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.00000001, 2), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    print(beta,gamma)\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('India')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")\n    fig.savefig(f\"India.png\")\ntrain(recovered, infected, data)","6d968013":"data = dbd_tc_param.set_index('Date')['Total Active Cases']\ninfected = dbd_tc_param.set_index('Date')['Total Confirmed']\nrecovered = dbd_tc_param.set_index('Date')['Total Recovered']\ndata.index=data.index.to_pydatetime()\ninfected.index=infected.index.to_pydatetime()\nrecovered.index=recovered.index.to_pydatetime()\ns_0 = 100000 \ni_0 = 883\nr_0 = 75\ndef loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2\npres_fut = np.array(list(data.index.values)+ list((np.array(pd.date_range('2020-05-04', periods=240))))) # 60 days from 19th April","f0bf2822":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = pres_fut\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","020400f1":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.000001, 0.5), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('India')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")\n    fig.savefig(f\"LD India.png\")\n    return df\npred_india=train(recovered, infected, data)","6f2b38c9":"list_df=[]\ndef train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.000001, 0.5), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    ef=[.25,.5,.75,1,1.25,1.5,1.75]\n    fig, ax = plt.subplots()\n    for i in ef:\n        beta=i*optimal.x[0]\n        new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n        df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n#         fig, ax = plt.subplots(figsize=(15, 10))\n        ax.set_title('Ef='+str(i))\n        df['Susceptible'].plot(ax=ax)\n        print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")\n        x=\"ef\"+str(i)+\"India.png\"\n        list_df.append(df)\n#         fig.savefig(x)\n    plt.ylabel('Count')\n    plt.xlabel('Time')\n    plt.title('SIR model Prediction - Infected')\n    plt.show()\n    return df\npred_india=train(recovered, infected, data)\npred_india=list_df[3] # get predicted dataframe for Ef=1","48d4ca63":"pred_india.head()","7700c78d":"cols_to_sum = ['Predicted Infected','Predicted Recovered']\ndf=pred_india\ndf['predicted total'] = pred_india[cols_to_sum].sum(axis=1)\ndf['daily new cases'] =  df['predicted total'].diff()\ndf=df[1:]\ndf","80cfa80e":"peak=df[df['daily new cases']==df['daily new cases'].max()] \npeak","3d450fe6":"end97=peak['daily new cases']*.03\nend99=peak['daily new cases']*0.01\nindex = abs(df['daily new cases'] - int(end97)).idxmin()\nrowdata97 = pd.DataFrame(df.loc[ index , : ])\nrowdata97=rowdata97.transpose()\nrowdata97","260ce5bc":"index = abs(df['daily new cases'] - int(end99)).idxmin()\nrowdata99 = pd.DataFrame(df.loc[ index , : ])\nrowdata99=rowdata99.transpose()\nrowdata99","085276bb":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['daily new cases'], name='Daily new cases per day', \\\n                         ))\n\nfig1.add_trace(go.Scatter(x=peak.index.to_pydatetime(), y=peak['daily new cases'],mode='markers',\n    marker=dict(\n        size=8,\n        color='red',\n        symbol='cross'\n    ),\n    name='Peak'\n))\nfig1.add_trace(go.Scatter(x=rowdata97.index.to_pydatetime(), y=rowdata97['daily new cases'],mode='markers',\n    marker=dict(\n        size=8,\n        color='orange',\n        symbol='cross'\n    ),\n    name='End 97%'\n))\nfig1.add_trace(go.Scatter(x=rowdata99.index.to_pydatetime(), y=rowdata99['daily new cases'],mode='markers',\n    marker=dict(\n        size=8,\n        color='green',\n        symbol='cross'\n    ),\n    name='End 99%'\n))\nfig1.layout.update(title_text='Predicting daily new cases per day with SIR modelling',xaxis_showgrid=False, width=800, xaxis_title='Date',\\\n                yaxis_title='Patient Count',\n        height=600,font=dict(\n        size=14,\n    ))\n\nfig1.show()","9d8fe227":"fig1 = go.Figure()\nEf=0.25\nfor df in list_df:\n    cols_to_sum = ['Predicted Infected','Predicted Recovered']\n    df['predicted total'] = df[cols_to_sum].sum(axis=1)\n    df['daily new cases'] =  df['predicted total'].diff()\n    df=df[1:]\n    fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['daily new cases'], name='Predicted with Ef='+str(Ef), \\\n                             ))\n#     fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Susceptible'], name='Susceptible with Ef='+str(Ef), \\\n#                              ))\n#     fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Predicted Recovered'], name='Recovered with Ef='+str(Ef), \\\n#                              ))\n\n# fig1.add_trace(go.Scatter(x=df.index.values, y=df['Actual Infected'], name='Actual with Ef='+str(Ef), \\\n#                          ))\n    Ef+=0.25\n\nfig1.layout.update(title_text='Predicting daily new cases per day with SIR modelling',xaxis_showgrid=False, width=800, xaxis_title='Date',\\\n                yaxis_title='Patient Count',\n        height=600,font=dict(\n#         family=\"Courier New, monospace\",\n        size=14,\n#         color=\"white\"\n    ))\n# fig1.layout.plot_bgcolor = '#3E6704'\n# fig1.layout.paper_bgcolor = '#3E6704'\nfig1.show()","095e7a5d":"x=pred_india[pred_india['Predicted Infected']==pred_india['Predicted Infected'].max()] \nx","0e05bae5":"end97=x['Predicted Infected']*.03\nend99=x['Predicted Infected']*0.01\nend90=x['Predicted Infected']*0.10","91bcb307":"index = abs(pred_india['Predicted Infected'] - int(end97)).idxmin()\nrowdata97 = pred_india.loc[ index , : ]\nrowdata97 = pd.DataFrame(df.loc[ index , : ])\nrowdata97=rowdata97.transpose()\nrowdata97","603e3b7f":"index = abs(pred_india['Predicted Infected'] - int(end99)).idxmin()\nrowdata99 = pred_india.loc[ index , : ]\nrowdata99 = pd.DataFrame(df.loc[ index , : ])\nrowdata99=rowdata99.transpose()\nrowdata99","68c3304d":"index = abs(pred_india['Predicted Infected'] - int(end90)).idxmin()\nrowdata90 = pred_india.loc[ index , : ]\nrowdata90 = pd.DataFrame(df.loc[ index , : ])\nrowdata90=rowdata90.transpose()\nrowdata90","690b9101":"fig1 = go.Figure()\nEf=0.25\nfor df in list_df:\n    fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Predicted Infected'], name='Predicted with Ef='+str(Ef), \\\n                             ))\n#     fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Susceptible'], name='Susceptible with Ef='+str(Ef), \\\n#                              ))\n#     fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Predicted Recovered'], name='Recovered with Ef='+str(Ef), \\\n#                              ))\n\n# fig1.add_trace(go.Scatter(x=df.index.values, y=df['Actual Infected'], name='Actual with Ef='+str(Ef), \\\n#                          ))\n    Ef+=0.25\n\nfig1.layout.update(title_text='Predicting Infected patients with SIR modelling',xaxis_showgrid=False, width=800, xaxis_title='Date',\\\n                yaxis_title='Patient Count',\n        height=600,font=dict(\n#         family=\"Courier New, monospace\",\n        size=14,\n#         color=\"white\"\n    ))\n# fig1.layout.plot_bgcolor = '#3E6704'\n# fig1.layout.paper_bgcolor = '#3E6704'\nfig1.show()","1803fedb":"fig1 = go.Figure()\nEf=0.25\nfor df in list_df:\n    if Ef in [0.75,1.0,1.25]:\n        fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Predicted Infected'], name='Predicted with Ef='+str(Ef), \\\n                                 ))\n        fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Susceptible'], name='Susceptible with Ef='+str(Ef), \\\n                                 ))\n        fig1.add_trace(go.Scatter(x=df.index.to_pydatetime(), y=df['Predicted Recovered'], name='Recovered with Ef='+str(Ef), \\\n                                 ))\n    \n#     fig1.add_trace(go.Scatter(x=df.index.values, y=df['Actual Infected'], name='Actual with Ef='+str(Ef), \\\n#                              ))\n    Ef+=0.25\n\nfig1.layout.update(title_text='SIR modelling for Effect of Restrictions like Lockdown etc.',xaxis_showgrid=False, width=800, xaxis_title='Date',\\\n                yaxis_title='Patient Count',\n        height=600,font=dict(\n#         family=\"Courier New, monospace\",\n        size=14,\n#         color=\"white\"\n    ))\n# fig1.layout.plot_bgcolor = '#3E6704'\n# fig1.layout.paper_bgcolor = '#3E6704'\nfig1.show()","0bd74988":"pred_india","8669b484":"ncov_india.head()","ffe0b7c6":"ncov_india['week_no'] = ncov_india['ObservationDate'].dt.week\nncov_india_infl = ncov_india.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_india_infl\n\nncov_india_infl_weekly = ncov_india_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_india_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_india_infl_weekly\nncov_india_infl = pd.merge(ncov_india_infl, ncov_india_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_india_infl","1decc7b2":"ncov_india_infl['Increased_Cases'] = np.log(ncov_india_infl['Increased_Cases'])\nncov_india_infl = ncov_india_infl.replace([np.inf, -np.inf], np.nan)\nncov_india_infl = ncov_india_infl.fillna(0)\nncov_india_infl.drop(ncov_india_infl.tail(1).index,inplace=True) \nncov_india_infl","49d85e07":"ncov_india['week_no'] = ncov_india['ObservationDate'].dt.week\nncov_india_infl = ncov_india.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_india_infl\nncov_india_infl_weekly = ncov_india_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_india_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_india_infl = pd.merge(ncov_india_infl, ncov_india_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_india_infl['Increased_Cases'] = np.log(ncov_india_infl['Increased_Cases'])\nncov_india_infl = ncov_india_infl.replace([np.inf, -np.inf], np.nan)\nncov_india_infl = ncov_india_infl.fillna(0)\nncov_india_infl.drop(ncov_india_infl.tail(1).index,inplace=True) \nncov_india_infl\n\nncov_china['week_no'] = ncov_china['ObservationDate'].dt.week\nncov_china_infl = ncov_china.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_china_infl\nncov_china_infl_weekly = ncov_china_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_china_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_china_infl = pd.merge(ncov_china_infl, ncov_china_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_china_infl['Increased_Cases'] = np.log(ncov_china_infl['Increased_Cases'])\nncov_china_infl = ncov_china_infl.replace([np.inf, -np.inf], np.nan)\nncov_china_infl = ncov_china_infl.fillna(0)\nncov_china_infl.drop(ncov_china_infl.tail(1).index,inplace=True) \nncov_china_infl\nncov_italy['week_no'] = ncov_italy['ObservationDate'].dt.week\nncov_italy_infl = ncov_italy.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_italy_infl\nncov_italy_infl_weekly = ncov_italy_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_italy_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_italy_infl = pd.merge(ncov_italy_infl, ncov_italy_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_italy_infl['Increased_Cases'] = np.log(ncov_italy_infl['Increased_Cases'])\nncov_italy_infl = ncov_italy_infl.replace([np.inf, -np.inf], np.nan)\nncov_italy_infl = ncov_italy_infl.fillna(0)\nncov_italy_infl.drop(ncov_italy_infl.tail(1).index,inplace=True) \nncov_italy_infl\nncov_us['week_no'] = ncov_us['ObservationDate'].dt.week\nncov_us_infl = ncov_us.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_us_infl\nncov_us_infl_weekly = ncov_us_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_us_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_us_infl = pd.merge(ncov_us_infl, ncov_us_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_us_infl['Increased_Cases'] = np.log(ncov_us_infl['Increased_Cases'])\nncov_us_infl = ncov_us_infl.replace([np.inf, -np.inf], np.nan)\nncov_us_infl = ncov_us_infl.fillna(0)\nncov_us_infl.drop(ncov_us_infl.tail(1).index,inplace=True) \nncov_us_infl\nncov_germany['week_no'] = ncov_germany['ObservationDate'].dt.week\nncov_germany_infl = ncov_germany.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_germany_infl\nncov_germany_infl_weekly = ncov_germany_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_germany_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_germany_infl = pd.merge(ncov_germany_infl, ncov_germany_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_germany_infl['Increased_Cases'] = np.log(ncov_germany_infl['Increased_Cases'])\nncov_germany_infl = ncov_germany_infl.replace([np.inf, -np.inf], np.nan)\nncov_germany_infl = ncov_germany_infl.fillna(0)\nncov_germany_infl.drop(ncov_germany_infl.tail(1).index,inplace=True) \nncov_germany_infl\nncov_spain['week_no'] = ncov_spain['ObservationDate'].dt.week\nncov_spain_infl = ncov_spain.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_spain_infl\nncov_spain_infl_weekly = ncov_spain_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_spain_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_spain_infl = pd.merge(ncov_spain_infl, ncov_spain_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_spain_infl['Increased_Cases'] = np.log(ncov_spain_infl['Increased_Cases'])\nncov_spain_infl = ncov_spain_infl.replace([np.inf, -np.inf], np.nan)\nncov_spain_infl = ncov_spain_infl.fillna(0)\nncov_spain_infl.drop(ncov_spain_infl.tail(1).index,inplace=True) \nncov_spain_infl\nncov_soukor['week_no'] = ncov_soukor['ObservationDate'].dt.week\nncov_soukor_infl = ncov_soukor.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_soukor_infl\nncov_soukor_infl_weekly = ncov_soukor_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_soukor_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_soukor_infl = pd.merge(ncov_soukor_infl, ncov_soukor_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_soukor_infl['Increased_Cases'] = np.log(ncov_soukor_infl['Increased_Cases'])\nncov_soukor_infl = ncov_soukor_infl.replace([np.inf, -np.inf], np.nan)\nncov_soukor_infl = ncov_soukor_infl.fillna(0)\nncov_spain_infl.drop(ncov_spain_infl.tail(1).index,inplace=True) \nncov_soukor_infl\nncov_iran['week_no'] = ncov_iran['ObservationDate'].dt.week\nncov_iran_infl = ncov_iran.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_iran_infl\nncov_iran_infl_weekly = ncov_iran_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_iran_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_iran_infl = pd.merge(ncov_iran_infl, ncov_iran_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_iran_infl['Increased_Cases'] = np.log(ncov_iran_infl['Increased_Cases'])\nncov_iran_infl = ncov_iran_infl.replace([np.inf, -np.inf], np.nan)\nncov_iran_infl = ncov_iran_infl.fillna(0)\nncov_iran_infl.drop(ncov_iran_infl.tail(1).index,inplace=True) \nncov_iran_infl\nncov_france['week_no'] = ncov_france['ObservationDate'].dt.week\nncov_france_infl = ncov_france.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_france_infl\nncov_france_infl_weekly = ncov_france_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_france_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_france_infl = pd.merge(ncov_france_infl, ncov_france_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_france_infl['Increased_Cases'] = np.log(ncov_france_infl['Increased_Cases'])\nncov_france_infl = ncov_france_infl.replace([np.inf, -np.inf], np.nan)\nncov_france_infl = ncov_france_infl.fillna(0)\nncov_france_infl.drop(ncov_france_infl.tail(1).index,inplace=True) \nncov_france_infl\nncov_uk['week_no'] = ncov_uk['ObservationDate'].dt.week\nncov_uk_infl = ncov_uk.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_uk_infl\nncov_uk_infl_weekly = ncov_uk_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_uk_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_uk_infl = pd.merge(ncov_uk_infl, ncov_uk_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_uk_infl['Increased_Cases'] = np.log(ncov_uk_infl['Increased_Cases'])\nncov_uk_infl = ncov_uk_infl.replace([np.inf, -np.inf], np.nan)\nncov_uk_infl = ncov_uk_infl.fillna(0)\nncov_uk_infl.drop(ncov_uk_infl.tail(1).index,inplace=True) \nncov_uk_infl","a0b96877":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_india_infl['Confirmed'], y=ncov_india_infl['Increased_Cases'], name='India', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_china_infl['Confirmed'], y=ncov_china_infl['Increased_Cases'], name='China', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_italy_infl['Confirmed'], y=ncov_italy_infl['Increased_Cases'], name='Italy', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_us_infl['Confirmed'], y=ncov_us_infl['Increased_Cases'], name='USA', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_soukor_infl['Confirmed'], y=ncov_soukor_infl['Increased_Cases'], name='South Korea', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_france_infl['Confirmed'], y=ncov_france_infl['Increased_Cases'], name='France', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_uk_infl['Confirmed'], y=ncov_uk_infl['Increased_Cases'], name='UK', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_iran_infl['Confirmed'], y=ncov_iran_infl['Increased_Cases'], name='Iran', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_spain_infl['Confirmed'], y=ncov_spain_infl['Increased_Cases'], name='Spain', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_germany_infl['Confirmed'], y=ncov_germany_infl['Increased_Cases'], name='Germany', \\\n                         ))\n\n\nfig1.layout.update(title_text='Predicting Inflection Point for the Countries',xaxis_showgrid=False, width=800, xaxis_title='Total no. of Confirmed Cases',\\\n                yaxis_title='log(Increased no. of Confirmed Cases w.r.t. previous week)',\n        height=600,font=dict(\n#         family=\"Courier New, monospace\",\n        size=14,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = '#3E6704'\nfig1.layout.paper_bgcolor = '#3E6704'\nfig1.show()","0ae32c25":"We see that outcome trends are similar to China w.r.t. Age","553d0b26":"Comparing the Death:Confirmed & Recovered:Confirmed Ratios","d67a0529":"We all know an exponential graph keeps on increasing, and when we are in that period of exponential we are not able to predict how far is the inflection point in the curve\n\nGetting an Idea of the Inflection Point for a Country","22457066":"We see that none of the countries have approached the inflection point yet","ad706e1c":"# date at which peak number of active infections is estimated","963ddb38":"# Estimating Beta & Gamma for India through SIR Modeling\nBeta and Gamma are estimated in the following way:\nValidation data used is from 2nd Mar to 24th Mar (pre-lockdown period) and 25th Mar to 19th Apr (lockdown period)\nForward prediction of 60 days have been done from 20th April considering parameter values derived during lockdown period\nDefine y(t) for the SIR model, and then use RMSE as the loss function, and used L-BFGS-B gradient descent optimization to minimise the loss function\n\nPre-Lockdown Period (2nd March-25th March)\n\nAssumptions taken:\nAn initial population of 50000 could have been potentially exposed to COVID-19 as of 2nd March","45257598":"Lockdown Period (25th Mar - 19th April)\nAssumptions taken:\nAn initial population of 100000 could have been potentially exposed to COVID-19 as of 25th March","82f29792":"- From the notes it seems the other patients without any travel history, who have been affected are mainly the closed ones of the patients with travel history and few other exceptions\n# COVID19 Test Results in India","dd8e3ad1":"# Data analysis and modelling","82727736":"For my understanding, I have taken reference from the following Kernel: https:\/\/www.kaggle.com\/duttadebadri\/covid-19-analysing-growth-sir-modeling-india\/notebook","72019a41":"# date at which peak number of daily cases per day is estimated","50b930ef":"To better understand this I'm going to try out SIR models\u00b6\nSIR Epidemic Model for India\nThis is a potential SIR model, if lockdown hadn't been imposed (14th March - 14th April, 30 days)","ecdf735c":"# Inflection point analysis","9aebc826":"**The theory behind this is that, when the no. of weekly cases start dropping consistently for a few consecutive weeks w.r.t. previous week we have hit the inflection point**\n\nWe see that only China and South Korea have been able to hit the inflection point\n","d33cafdc":"# getting new cases\/day from prediction","b95d8abb":"# COVID19 Test Results in Rest of the World","b30785ab":"Compared to the Western countries (Europe & USA) although we see that although the curve is in the trend of going up exponentially, however the no. of cases have not increased drastically. Because for those countries we see that the no. of cases has increased exponentially in the multiples of 1000 over a span of 2-3 weeks, where as in India its still below 1000\nFollowing are the possible reasons:\n- No. of testings done are less as compared to other countries, but even after that the no. of cases being a random multiple of 1000s like 50k or 60k is quite absurd\n- Community transmission never got triggered in India maybe because of climatic conditions or some other factors that we might be missing out on?\n- No community transmission happening yet\n- People here are more immunized?\nState-Wise No. of cases in India","a37e7d9d":"# SIR modelling results with Social restriction parameter "}}