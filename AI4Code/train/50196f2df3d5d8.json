{"cell_type":{"730bc154":"code","f36f2467":"code","0f5b6b51":"code","08dc19ec":"code","2c6a4821":"code","2e47ae21":"code","394aabc0":"code","d413cb37":"code","7849286f":"code","bf915918":"code","88e2bf81":"code","c7afcfe3":"code","31ef0010":"code","840d0774":"code","c2857462":"code","bb15c5eb":"code","d79c7d1f":"code","a5863017":"code","59f33736":"code","cef85842":"code","a73bab56":"code","8c2d4932":"code","d7f33f7f":"code","fd348694":"code","9175ebf4":"code","c4195564":"code","21346163":"code","d028f6c4":"code","83407b89":"code","57f544b3":"code","d282cadb":"code","6e1b014e":"code","54dce444":"code","41a878f4":"code","3e84cfcb":"code","ede6d27a":"code","b29a947a":"code","79a2f3e8":"code","85573977":"code","d9b2e255":"code","65aa94f3":"code","4b86a639":"code","c0ea355f":"code","213bf3b4":"code","9845aab9":"code","1b4ae0e0":"code","efc48202":"code","b494fdf7":"code","dc30a8e7":"code","13ea3987":"markdown","827dac34":"markdown","9b665a57":"markdown","458c55da":"markdown","a1c745c4":"markdown","53de28cf":"markdown","8c524ad8":"markdown"},"source":{"730bc154":"import os \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import stats\nimport pandas_profiling","f36f2467":"# import scikit learn modules\nfrom sklearn.model_selection import train_test_split # split the data into train and test\nfrom sklearn.linear_model import LinearRegression # import linear regression model\nimport sklearn.metrics as metrics # rsquare RMSE, etc.\nimport statsmodels.formula.api as sm # To build linear regression model using stats models\nfrom patsy import dmatrices","0f5b6b51":"data = pd.read_csv(\"..\/input\/Car_sales.csv\")\ndata.head()","08dc19ec":"data.columns","2c6a4821":"data[\"Latest_Launch\"] = pd.to_datetime(data[\"Latest_Launch\"])","2e47ae21":"data.tail()","394aabc0":"data.dtypes","d413cb37":"data[\"month_name\"] = data.Latest_Launch.dt.month_name()\ndata[\"weekday\"] = data.Latest_Launch.dt.weekday_name\ndata[\"date\"] = data.Latest_Launch.dt.day.astype(str)\ndata.head()","7849286f":"# pandas_profiling.ProfileReport(data)\n# dropping the correlated variables.\ndata = data.drop(columns=[\"Power_perf_factor\",\"Price_in_thousands\"])\n","bf915918":"numeric_var_names = [key for key, val in dict(data.dtypes).items() if val in [\"float64\",\"int64\",\"float32\",\"int32\"]]\ncat_var_names = [key for key, val in dict(data.dtypes).items() if val in [\"object\"]]\nprint(numeric_var_names)\nprint(cat_var_names)","88e2bf81":"data_num = data[numeric_var_names]\ndata_cat = data[cat_var_names]","c7afcfe3":"def outlier_capping(x):\n    x = x.clip_upper(x.quantile(0.99))\n    x = x.clip_lower(x.quantile(0.01))\n    return x\ndata_num = data_num.apply(outlier_capping)","31ef0010":"def Missing_imputation(x):\n    x = x.fillna(x.median())\n    return x\ndata_num = data_num.apply(Missing_imputation)","840d0774":"def cat_missing_imputation(x):\n    x = x.fillna(x.mode())\n    return x\ndata_cat = data_cat.apply(cat_missing_imputation)","c2857462":"# converting to numerical \ndef create_dummies(df, colname):\n    col_dummies = pd.get_dummies(df[colname], prefix = colname, drop_first= True)\n    df = pd.concat([df, col_dummies], axis = 1)\n    df.drop(colname, axis = 1, inplace = True)\n    return df\n\nfor c_feature in data_cat.columns:\n    data_cat[c_feature] = data_cat[c_feature].astype(\"category\")\n    data_cat = create_dummies(data_cat, c_feature)","bb15c5eb":"data_cat.columns = data_cat.columns.str.replace(\" \", \"_\")\ndata_cat.columns = data_cat.columns.str.replace(\"-\", \"_\")","d79c7d1f":"# concatenating to make it a single data_frame \n\ndata_new = pd.concat([data_num, data_cat], axis = 1)\ndata_new.head()","a5863017":"sns.distplot(np.log(data_new.Sales_in_thousands))","59f33736":"data_new[\"ln_carSales\"] = np.log(data_new[\"Sales_in_thousands\"])\ndata_new.head()","cef85842":"# sns.heatmap(data_new.corr())\n# corrm = data_new.corr()\n# corrm.to_csv(\"corrm.csv\")","a73bab56":"features = data_new[data_new.columns.difference([\"ln_carSales\",\"Sales_in_thousands\"])]\ntarget = data_new[\"ln_carSales\"]","8c2d4932":"## Feature reduction\ndata_new.head()","d7f33f7f":"features.columns.shape","fd348694":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport itertools\nlm = LinearRegression()\nrfe = RFE(lm, n_features_to_select=20)\nrfe = rfe.fit(features, target)","9175ebf4":"for feature, select in zip(features.columns, rfe.get_support()):\n    if select == True:\n        print(feature, select)","c4195564":"RFE_features = features.columns[rfe.get_support()]\nRFE_features","21346163":"# Feature Selection based on importance\nfrom sklearn.feature_selection import f_regression\nF_values, p_values = f_regression(features, target)","d028f6c4":"f_reg_results = [(i,v,z) for i, v, z in zip(features.columns, F_values, [\"%.3f\" %p for p in p_values])]\nf_reg_results = pd.DataFrame(f_reg_results, columns=[\"variable\", \"F_Value\", \"P_Value\"])\nf_reg_results","83407b89":"f_reg_res = f_reg_results.sort_values(by = \"F_Value\", ascending = False).reset_index(drop = True).variable\nf_reg_res","57f544b3":"list_vars = set(f_reg_res[:20]).union(set(RFE_features))\nlist_vars","d282cadb":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom patsy import dmatrices","6e1b014e":"all_columns = \"+\".join(list(list_vars))\nmy_formula = \"ln_carSales ~ \" + all_columns\nprint(my_formula)","54dce444":"my_formula = \"ln_carSales ~ Model_A8+Model_Accord+date_20+Model_Grand_Cherokee+Horsepower+\\\nModel_Cavalier+Model_3000GT+Model_Civic+Model_GTI+Manufacturer_Mercedes_B+Length+\\\nModel_SW+Model_CL500+Model_GS400+Manufacturer_Volvo+Model_Carrera_Coupe+Vehicle_type_Passenger+\\\ndate_28+Model_Diamante+Model_Malibu+Model_Cutlass+Model_Eldorado+\\\nModel_Carrera_Cabrio+Model_SLK230+Model_Prowler+Manufacturer_Ford+\\\nModel_Viper+Model_Avenger\"","41a878f4":"# get y and x dataframes based on this regression\ny, x = dmatrices(my_formula, data_new, return_type = \"dataframe\")","3e84cfcb":"variance_inflation_factor(x.values, 1)","ede6d27a":"# variance for each x, calculate and save in dataframe\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(x.values, i) for i in range(x.shape[1])]\nvif[\"features\"] = x.columns\nvif.round(1)","b29a947a":"train, test = train_test_split(data_new, test_size = 0.3, random_state = 123)\nprint(len(train))\nprint(len(test))","79a2f3e8":"my_formula = \"ln_carSales ~ Model_A8+Model_Grand_Cherokee+Horsepower+Model_3000GT+Model_GTI+Length+\\\nModel_SW+Model_CL500+Manufacturer_Volvo+Vehicle_type_Passenger+date_28+Model_SLK230+Manufacturer_Ford+\\\nModel_Avenger\"","85573977":"model = sm.ols(my_formula, data = train)\nmodel = model.fit()","d9b2e255":"print(model.summary())","65aa94f3":"np.exp(model.predict(test))","4b86a639":"train[\"pred\"] = pd.DataFrame(np.exp(model.predict(train)))\ntest[\"pred\"] = pd.DataFrame(np.exp(model.predict(test)))","c0ea355f":"train.head()","213bf3b4":"train.head()","9845aab9":"# Train data\nMAPE_train = np.mean(np.abs(train.Sales_in_thousands - train.pred)\/train.Sales_in_thousands)\nprint(MAPE_train)\n\nRMSE_train = metrics.mean_squared_error(train.Sales_in_thousands, train.pred)\nprint(RMSE_train)\n\nCorr_train = stats.pearsonr(train.Sales_in_thousands, train.pred)\nprint(Corr_train)\n\n# Test \nMAPE_test = np.mean(np.abs(test.Sales_in_thousands - test.pred)\/test.Sales_in_thousands)\nprint(MAPE_test)\n\nRMSE_test = metrics.mean_squared_error(test.Sales_in_thousands, test.pred)\nprint(RMSE_test)\n\nCorr_test = stats.pearsonr(test.Sales_in_thousands, test.pred)\nprint(Corr_test)","1b4ae0e0":"train[\"Decile\"] = pd.qcut(train[\"pred\"], 10, labels = False)\ntrain.head()","efc48202":"avg_actual = train[[\"Decile\", \"Sales_in_thousands\"]].groupby(train.Decile).mean().sort_index(ascending = False)[\"Sales_in_thousands\"]\navg_pred = train[[\"Decile\", \"pred\"]].groupby(train.Decile).mean().sort_index(ascending = False)[\"pred\"]","b494fdf7":"Decile_analysis_train = pd.concat([avg_actual, avg_pred], axis = 1)\n","dc30a8e7":"Decile_analysis_train","13ea3987":"### F Regression","827dac34":"The pattern should be similar for actual and predicted. Hence, the features are not picked correctly.","9b665a57":"### Sampling","458c55da":"### Accuracy metrics","a1c745c4":"### VIF","53de28cf":"### Decile analysis\n","8c524ad8":"### Applying RFE (Recursive Feature Elimination)"}}