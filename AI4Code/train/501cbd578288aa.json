{"cell_type":{"a0b2f368":"code","9c205e92":"code","ed2e6086":"code","0a0c59e5":"code","10a2e03c":"code","9bbbe49a":"code","5109d6c1":"code","3d73928c":"code","d2b7ee29":"code","68cfd3f0":"code","9aa3ab9a":"code","6b262295":"code","a44e685a":"code","fabd8d4d":"code","b1b8fd1b":"code","e1ca9f2f":"code","f26080c6":"markdown","dd368592":"markdown","32705c7d":"markdown","a99bb53f":"markdown","052dc59e":"markdown","a3585c01":"markdown","b251cb2c":"markdown","0cb25088":"markdown","1b465019":"markdown","2da6602f":"markdown","f0c5db2a":"markdown","022d963c":"markdown","dce5bfe6":"markdown","3b38569d":"markdown","451ac9d8":"markdown","03012f5d":"markdown","cf9cf237":"markdown"},"source":{"a0b2f368":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9c205e92":"import numpy as np \nimport pandas as pd \nfrom IPython.display import Markdown\nfrom datetime import timedelta\nimport json, requests\nfrom datetime import datetime\nimport glob\nimport requests \nfrom bs4 import BeautifulSoup\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport pycountry\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.offline as py\nimport plotly.express as ex\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\nplt.style.use(\"seaborn-talk\")\nplt.rcParams['figure.figsize'] = 8, 5\nplt.rcParams['image.cmap'] = 'viridis'\nfrom fbprophet import Prophet\npd.set_option('display.max_rows', None)\nfrom math import sin, cos, sqrt, atan2, radians\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS","ed2e6086":"import plotly.express as px\nimport plotly.graph_objs as go\nfig = go.Figure()\n\ndata = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\nd1 = data.melt(id_vars=\"Date\",value_vars=['Deaths','Cured','Confirmed'], var_name='Case',value_name='Count')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=1000, height=700)\nfig=px.area(d1, x=\"Date\", y=\"Count\",color='Case',\n              title='Weekly Trend',color_discrete_sequence = px.colors.sequential.Plasma_r)\nfig.show()","0a0c59e5":"states = pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv', usecols=['detected_state'])\nSTOPWORDS= [\"Pradesh\"]\n# Create and generate a word cloud image:\nwordcloud = WordCloud(width=480, height=480,margin=0,\n                          stopwords=STOPWORDS, collocations=False\n).generate(' '.join(states['detected_state']))\nplt.figure(figsize=(20,10), facecolor='k')\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\n#plt.tight_layout(pad=0)\n#plt.savefig('wordcloud.png', facecolor='k', bbox_inches='tight')","10a2e03c":"symptoms = pd.read_csv('\/kaggle\/input\/covid19-symptoms-checker\/Raw-Data.csv', usecols=['Symptoms'])\n\n# Create and generate a word cloud image:\nwordcloud = WordCloud(width=480, height=480,margin=0,\n                          stopwords=STOPWORDS, collocations=False\n).generate(' '.join(symptoms['Symptoms']))\nplt.figure(figsize=(20,10), facecolor='k')\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()","9bbbe49a":"dist_src = pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv')\ndist = dist_src['detected_district']\nplt.style.use('ggplot')\ndist.value_counts(ascending=False).nlargest(20).plot(kind='bar', figsize=(15,8))\nplt.ylabel('Count of Covid cases')\nplt.legend()","5109d6c1":"data_s = pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv')\nsrc=data_s['notes']\nsrc = src.dropna()\nSTOPWORDS = [\"awaitedDetails\", \"awaited\", \"*Travelled*\", \"to\", \"awaitedContact\", \"from\"]\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_font_size=100, max_words=50, background_color=\"white\", width=1300, height=800,\n                          stopwords = STOPWORDS, collocations=False\n).generate(''.join(src))\n\nplt.figure(figsize=(20,10), facecolor='k')\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show() \n \n\n","3d73928c":"sns.set(style=\"darkgrid\")\nsrc2 =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\nsns.catplot(y=\"State\", x=\"TotalSamples\", kind=\"swarm\", data=src2)","d2b7ee29":"sns.catplot(y=\"State\", x=\"TotalSamples\",kind='box',data=src2) ","68cfd3f0":"# plot data\n#fig, ax = plt.subplots(figsize=(15,7))\n# use unstack()\n#src2.groupby(['State','Postive']).count()['Positive'].unstack().plot(ax=ax)\n#grouped = src2.groupby(['State'])\n#total_sample = src2.groupby(['State'])['TotalSamples'].sum()\n#pos = src2.groupby(['State'])['Positive'].sum()\n#neg = src2.groupby(['State'])['Negative'].sum()\n\nplt.clf() \nsrc2.groupby('State').sum().plot(kind='bar', figsize=(15,10))","9aa3ab9a":"df = pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv', usecols=['AgeGroup', 'TotalCases'])\n#sns.set(style=\"darkgrid\")\n#g = sns.relplot(x=\"AgeGroup\", y=\"TotalCases\", kind=\"line\", data=ageGrps)\n#plt.bar(df['AgeGroup'], df['TotalCases']) \n#plt.xlabel(\"AgeGroup\") \n#plt.ylabel(\"TotalCases\") \n#plt.xticks(rotation=90)\n#plt.show() \n\ndf_d = pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv')\nfig = px.bar(df_d[['AgeGroup', 'Percentage']].sort_values('Percentage', ascending=False), \n             x=\"Percentage\", y=\"AgeGroup\", color='AgeGroup',color_discrete_sequence = ex.colors.cyclical.IceFire\n              ,title='Infections by age group',orientation='h')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_layout(barmode='stack')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',yaxis_title='Age Group',xaxis_title='Percentages')\nfig.update_layout(template = 'plotly_white')\nfig.show()","6b262295":"df_temp = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ntemp = df_temp.groupby('Date')['Confirmed', 'Deaths', 'Cured'].sum().reset_index()\nfig = px.scatter(temp, x=\"Date\", y=\"Confirmed\", color=\"Confirmed\",\n                 size='Confirmed', hover_data=['Confirmed'],\n                 color_discrete_sequence = px.colors.qualitative.G10)\nfig.update_layout(title_text='Daily Trend',\n                  plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","a44e685a":"#importing libraries\nimport scipy\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fabd8d4d":"covid_19_India=pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndate_wise_data = covid_19_India[['State\/UnionTerritory',\"Date\",\"Confirmed\",\"Deaths\",\"Cured\"]]\ndate_wise_data['Date'] = date_wise_data['Date'].apply(pd.to_datetime, dayfirst=True)\ndate_wise_data = date_wise_data.groupby([\"Date\"]).sum().reset_index()\ndef formatted_text(string):\n    display(Markdown(string))\n \nimport scipy\ndef logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\nd_df = date_wise_data.copy()\np0 = (0,0,0)\ndef plot_logistic_fit_data(d_df, title, p0=p0):\n    d_df = d_df.sort_values(by=['Date'], ascending=True)\n    d_df['x'] = np.arange(len(d_df)) + 1\n    d_df['y'] = d_df['Confirmed']\n\n    x = d_df['x']\n    y = d_df['y']\n\n    c2 = scipy.optimize.curve_fit(logistic,  x,  y,  p0=p0 )\n    #y = logistic(x, L, k, x0)\n    popt, pcov = c2\n\n    x = range(1,d_df.shape[0] + int(popt[2]))\n    y_fit = logistic(x, *popt)\n    \n    p_df = pd.DataFrame()\n    p_df['x'] = x\n    p_df['y'] = y_fit.astype(int)\n    \n    print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\n    print(\"Predicted k (growth rate): \" + str(float(popt[1])))\n    print(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")\n\n    x0 = int(popt[2])\n    \n    traceC = go.Scatter(\n        x=d_df['x'], y=d_df['y'],\n        name=\"Confirmed\",\n        marker=dict(color=\"Red\"),\n        mode = \"markers+lines\",\n        text=d_df['Confirmed'],\n    )\n\n    traceP = go.Scatter(\n        x=p_df['x'], y=p_df['y'],\n        name=\"Predicted\",\n        marker=dict(color=\"blue\"),\n        mode = \"lines\",\n        text=p_df['y'],\n    )\n    \n    trace_x0 = go.Scatter(\n        x = [x0, x0], y = [0, p_df.loc[p_df['x']==x0,'y'].values[0]],\n        name = \"X0 - Inflexion point\",\n        marker=dict(color=\"black\"),\n        mode = \"lines\",\n        text = \"X0 - Inflexion point\"\n    )\n\n    data = [traceC, traceP, trace_x0]\n\n    layout = dict(title = 'Logistic Curve Projection on Confirmed Cases in India',\n          xaxis = dict(title = 'Day since 30 January 2020', showticklabels=True), \n          yaxis = dict(title = 'Number of cases'),\n          hovermode = 'closest',plot_bgcolor='rgb(275, 270, 273)'\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='covid-logistic-forecast')\n    \nL = 250000\nk = 0.25\nx0 = 100\np0 = (L, k, x0)\nplot_logistic_fit_data(d_df, 'India') \n","b1b8fd1b":"covid_19_India = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndate_wise_data = covid_19_India[['State\/UnionTerritory',\"Date\",\"Confirmed\",\"Deaths\",\"Cured\"]]\ndate_wise_data['Date'] = date_wise_data['Date'].apply(pd.to_datetime, dayfirst=True)\ndate_wise_data = date_wise_data.groupby([\"Date\"]).sum().reset_index()\ndef formatted_text(string):\n    display(Markdown(string))\n \nimport scipy\ndef logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\nd_df = date_wise_data.copy()\np0 = (0,0,0)\ndef plot_logistic_fit_data(d_df, title, p0=p0):\n    d_df = d_df.sort_values(by=['Date'], ascending=True)\n    d_df['x'] = np.arange(len(d_df)) + 1\n    d_df['y'] = d_df['Cured']\n\n    x = d_df['x']\n    y = d_df['y']\n\n    c2 = scipy.optimize.curve_fit(logistic,  x,  y,  p0=p0 )\n    #y = logistic(x, L, k, x0)\n    popt, pcov = c2\n\n    x = range(1,d_df.shape[0] + int(popt[2]))\n    y_fit = logistic(x, *popt)\n    \n    p_df = pd.DataFrame()\n    p_df['x'] = x\n    p_df['y'] = y_fit.astype(int)\n    \n    print(\"Predicted L (the maximum number of Cured cases): \" + str(int(popt[0])))\n    print(\"Predicted k (growth rate): \" + str(float(popt[1])))\n    print(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")\n\n    x0 = int(popt[2])\n    \n    traceC = go.Scatter(\n        x=d_df['x'], y=d_df['y'],\n        name=\"Cured\",\n        marker=dict(color=\"Red\"),\n        mode = \"markers+lines\",\n        text=d_df['Cured'],\n    )\n\n    traceP = go.Scatter(\n        x=p_df['x'], y=p_df['y'],\n        name=\"Predicted\",\n        marker=dict(color=\"blue\"),\n        mode = \"lines\",\n        text=p_df['y'],\n    )\n    \n    trace_x0 = go.Scatter(\n        x = [x0, x0], y = [0, p_df.loc[p_df['x']==x0,'y'].values[0]],\n        name = \"X0 - Inflexion point\",\n        marker=dict(color=\"black\"),\n        mode = \"lines\",\n        text = \"X0 - Inflexion point\"\n    )\n\n    data = [traceC, traceP, trace_x0]\n\n    layout = dict(title = 'Logistic Curve Projection on Cured Covid Cases in India',\n          xaxis = dict(title = 'Day since 30 January 2020,', showticklabels=True), \n          yaxis = dict(title = 'Number of cases'),\n          hovermode = 'closest',plot_bgcolor='rgb(275, 270, 273)'\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='covid-logistic-forecast')\n    \nL = 250000\nk = 0.25\nx0 = 100\np0 = (L, k, x0)\nplot_logistic_fit_data(d_df, 'India')","e1ca9f2f":"covid_19_India = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndate_wise_data = covid_19_India[['State\/UnionTerritory',\"Date\",\"Confirmed\",\"Deaths\",\"Cured\"]]\ndate_wise_data['Date'] = date_wise_data['Date'].apply(pd.to_datetime, dayfirst=True)\ndate_wise_data = date_wise_data.groupby([\"Date\"]).sum().reset_index()\ndef formatted_text(string):\n    display(Markdown(string))\n \nimport scipy\ndef logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\nd_df = date_wise_data.copy()\np0 = (0,0,0)\ndef plot_logistic_fit_data(d_df, title, p0=p0):\n    d_df = d_df.sort_values(by=['Date'], ascending=True)\n    d_df['x'] = np.arange(len(d_df)) + 1\n    d_df['y'] = d_df['Deaths']\n\n    x = d_df['x']\n    y = d_df['y']\n\n    c2 = scipy.optimize.curve_fit(logistic,  x,  y,  p0=p0 )\n    #y = logistic(x, L, k, x0)\n    popt, pcov = c2\n\n    x = range(1,d_df.shape[0] + int(popt[2]))\n    y_fit = logistic(x, *popt)\n    \n    p_df = pd.DataFrame()\n    p_df['x'] = x\n    p_df['y'] = y_fit.astype(int)\n    \n    print(\"Predicted L (the maximum number of Cured cases): \" + str(int(popt[0])))\n    print(\"Predicted k (growth rate): \" + str(float(popt[1])))\n    print(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")\n\n    x0 = int(popt[2])\n    \n    traceC = go.Scatter(\n        x=d_df['x'], y=d_df['y'],\n        name=\"Deaths\",\n        marker=dict(color=\"Red\"),\n        mode = \"markers+lines\",\n        text=d_df['Cured'],\n    )\n\n    traceP = go.Scatter(\n        x=p_df['x'], y=p_df['y'],\n        name=\"Predicted\",\n        marker=dict(color=\"blue\"),\n        mode = \"lines\",\n        text=p_df['y'],\n    )\n    \n    trace_x0 = go.Scatter(\n        x = [x0, x0], y = [0, p_df.loc[p_df['x']==x0,'y'].values[0]],\n        name = \"X0 - Inflexion point\",\n        marker=dict(color=\"black\"),\n        mode = \"lines\",\n        text = \"X0 - Inflexion point\"\n    )\n\n    data = [traceC, traceP, trace_x0]\n\n    layout = dict(title = 'Logistic Curve Projection on Covid Deaths in India',\n          xaxis = dict(title = 'Day since 30 January 2020', showticklabels=True), \n          yaxis = dict(title = 'Number of cases'),\n          hovermode = 'closest',plot_bgcolor='rgb(275, 270, 273)'\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='covid-logistic-forecast')\n    \nL = 10000\nk = 0.25\nx0 = 100\np0 = (L, k, x0)\nplot_logistic_fit_data(d_df, 'India')","f26080c6":"## Source of Infection","dd368592":"## Covid Tests performed by States","32705c7d":"-","a99bb53f":"## Top 20 Cities by highest number of cases","052dc59e":"### Fit a Logistic Curve on Confirmed Cases in India ","a3585c01":"## Infections by Age Group","b251cb2c":"# Plot Daily Growth of Cases ","0cb25088":"# Exploratory Data Analysis","1b465019":"## Symptoms\n","2da6602f":"## Statewise Testing: Total Samples Vs Negative\/Postive Results","f0c5db2a":"### Thanks for taking time to review the EDA and predictions. Appreciate your feedback.","022d963c":"## Weekly Trends of Covid cases ","dce5bfe6":"## States with highest Covid Spread","3b38569d":"My motivation stems from\nYouTube Video : ***Exponential growth and epidemics***\nBy 3blue1Brown\n\nhttps:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg","451ac9d8":"### Fit a Logistic Curve on Cured Cases in India ","03012f5d":"### Fit a Logistic Curve on Covid Death Cases in India ","cf9cf237":"# Prediction"}}