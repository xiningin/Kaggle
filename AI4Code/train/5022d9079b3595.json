{"cell_type":{"9638948b":"code","3b9f98ab":"code","2293de2b":"code","92ef5778":"code","c303dcb3":"code","3086b4f6":"code","68f479a7":"code","0fb98519":"code","106577d0":"code","f4332da6":"code","0744376f":"code","69569628":"code","d4526ac0":"markdown"},"source":{"9638948b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno as msno\n\nimport bq_helper\nfrom bq_helper import BigQueryHelper\nimport re\nfrom fancyimpute import KNN\nfrom pandas import DataFrame\n\n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3b9f98ab":"def initiate_BigQuery():\n    \"\"\"This function will initiate the WDI Table for BigQuery\n\n        Args:\n            None\n\n        Returns: None\n\n        \"\"\"\n    wdi = bq_helper.BigQueryHelper(active_project=\"patents-public-data\",\n                                   dataset_name=\"worldbank_wdi\")\n\n    #Initiate the BigQuery database assistant\n    bq_assistant2 = BigQueryHelper(\"patents-public-data\", \"worldbank_wdi\")\n    print(bq_assistant2.list_tables())\n    print(bq_assistant2.table_schema('wdi_2016'))","2293de2b":"def call_query(indicators, max_querysize, bq_assistant, wdi):\n    \"\"\"This function searches and returns a list of list of our variables\n\n        Args:\n            indicators: This is a list of the WDI indicator codes of the desired variables\n            max_querysize: This is a BigQuery parameter for specifing the max size of each query.\n            bq_assistant: The BigQueryTool for quering\n            wdi: The name of our database\n\n        Returns: A list of list containing the variables we have searched for\n\n        \"\"\"\n    query_list = indicators\n    df_list = []\n\n    for query_item in query_list:\n        query = \"\"\"\n                  SELECT country_name, year, indicator_code, indicator_name, indicator_value\n                  FROM `patents-public-data.worldbank_wdi.wdi_2016`\n                  WHERE indicator_code LIKE '%OURQUERY%'\n                  ORDER BY country_name, year \n                  \"\"\"\n        updated_query = query.replace(\"OURQUERY\", query_item)\n        print(\"Now running Query for item: \", query_item)\n    \n        query_size = bq_assistant.estimate_query_size(updated_query)\n        print('The query size will be: ', query_size)\n    \n        query_response = wdi.query_to_pandas_safe(updated_query, max_gb_scanned=max_querysize)\n        print(query_response.shape, \"\\n\")\n    \n    \n        file_name = query_response.indicator_name[0]\n    \n        for k in file_name.split(\"\\n\"):\n            name = re.sub(r\"[^a-zA-Z0-9]+\", ' ', k)\n            real_name = str(name) + str('.csv')\n        \n        \n        query_response.to_csv(real_name)\n        real_name = query_response\n        df_list.append(real_name)\n    \n    print(\"Query Done. Please see output for individual files. \\n\")\n    return df_list\n","92ef5778":"def clean_query(my_list):\n    \"\"\"This function cleans up the list of list containing our data\n\n        Args:\n            my_list: our list of list conaing the big query result \n\n        Returns: a cleaned list, with correct column names \n\n        \"\"\"\n    clean_list = []\n    for number, i in enumerate(my_list):\n        column_name = i.indicator_name[0]\n        column = i.rename(columns={'indicator_value':str(column_name)}, inplace=True)\n        df = DataFrame(my_list[int(number)],columns=[\"country_name\", \"year\", \"indicator_code\", \"indicator_name\", str(column_name)])\n        df.drop(['indicator_code', 'indicator_name'], axis = 1, inplace=True)\n        clean_list.append(df)\n        \n    print(\"Query has been Cleaned \\n\")\n    return clean_list","c303dcb3":"def convert_to_df(cleaned_list):\n    \"\"\"This function converts our list of list to a dataframe\n\n        Args:\n            cleaned_list: the cleaned list returned from the clean_list function\n\n        Returns: Panda dataframe containing all our data\n\n        \"\"\"\n    final_df = cleaned_list[0]\n    \n    for i in cleaned_list[1:]:\n        final_df = pd.concat([final_df, i.iloc[:,2:3]], axis=1)\n    \n    final_df.to_csv('Unparsed Data .csv',index=False)\n    \n    print(\"Convert to Dataframe: \", final_df.shape)\n    print(\"Query Converted to a Dataframe \\n\")\n    print(\"See output for full country list named UNPARSED DATA \\n\")\n    return final_df","3086b4f6":"def parse_country(dataframe, country_list):\n    \"\"\"This function parses our data for our listed countries\n\n        Args:\n            dataframe: our cleaned dataframe\n            country_list: A list containing the countries of the world or economic unions which we are interested in\n\n        Returns: a dataframe with only our desired countries\n\n        \"\"\"\n    country_df = dataframe[dataframe.country_name.str.contains('|'.join(country_list), na=False)]\n    print(\"Parse Country: \", country_df.shape)\n    return country_df","68f479a7":"# my_countries = ['Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra',\n#        'Angola', 'Antigua and Barbuda', 'Argentina',\n#        'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan',\n#        'Bahamas, The', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n#        'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n#        'Bosnia and Herzegovina', 'Botswana', 'Brazil',\n#        'British Virgin Islands', 'Brunei Darussalam', 'Bulgaria',\n#        'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cambodia', 'Cameroon',\n#        'Canada', 'Cayman Islands',\n#        'Central African Republic',\n#        'Chad', 'Channel Islands', 'Chile', 'China', 'Colombia', 'Comoros',\n#        'Congo, Dem. Rep.', 'Congo, Rep.', 'Costa Rica', \"Cote d'Ivoire\",\n#        'Croatia', 'Cuba', 'Curacao', 'Cyprus', 'Czech Republic',\n#        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador',\n#        'Egypt, Arab Rep.', 'El Salvador', 'Equatorial Guinea', 'Eritrea',\n#        'Estonia', 'Ethiopia', 'European Union',\n#        'Faroe Islands', 'Fiji', 'Finland', 'France', 'Gabon', 'Gambia',  'Germany',\n#        'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guam',\n#        'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti',\n#        'Honduras', 'Hong Kong SAR, China', 'Hungary', \n#        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq',\n#        'Ireland', 'Isle of Man', 'Israel', 'Italy', 'Jamaica', 'Japan',\n#        'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati',\n#        'Korea, Dem. People\ufffds Rep.', 'Korea, Rep.', 'Kosovo', 'Kuwait',\n#        'Kyrgyz Republic', 'Lao PDR', 'Latvia', 'Lebanon',\n#        'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n#        'Luxembourg', 'Macao SAR, China', 'Macedonia, FYR', 'Madagascar',\n#        'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta',\n#        'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro',\n#        'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal',\n#        'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua',\n#        'Niger', 'Nigeria', 'Northern Mariana Islands',\n#        'Norway', 'Oman', 'Pacific island small states', 'Pakistan',\n#        'Palau', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru',\n#        'Philippines', 'Poland', 'Portugal', \n# 'Puerto Rico', 'Qatar', 'Romania',\n#        'Russian Federation', 'Rwanda', 'Samoa', 'San Marino',\n#        'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia',\n#        'Seychelles', 'Sierra Leone', 'Singapore',\n#        'Sint Maarten (Dutch part)', 'Slovak Republic', 'Slovenia',\n#        'Small states', 'Solomon Islands', 'Somalia', 'South Africa',\n#        'South Sudan', 'Spain',\n#        'Sri Lanka', 'St. Kitts and Nevis', 'St. Lucia',\n#        'St. Martin (French part)', 'St. Vincent and the Grenadines', 'Sudan', 'Suriname',\n#        'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic',\n#        'Tajikistan', 'Tanzania', 'Thailand', 'Togo',\n#        'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey',\n#        'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu', 'Uganda',\n#        'Ukraine', 'United Arab Emirates', 'United Kingdom',\n#        'United States', 'Uruguay', 'Uzbekistan',\n#        'Vanuatu', 'Venezuela, RB', 'Vietnam', 'Virgin Islands (U.S.)',\n#        'West Bank and Gaza', 'World', 'Yemen, Rep.', 'Zambia', 'Zimbabwe']\n\n","0fb98519":"def fill_values(dataset, neighbors, country_list):\n    \"\"\"A K- Nearest Neighbor model which fills the NAs in our dataframe\n\n        Args:\n            dataset; The dataset\n            neighbors: A KNN parameter for the neigbors used in modelling. Usually integer 3 or 5 \n            country_list: A list containing our desired countries\n\n        Returns: a dataframe with the possible NA's filled\n\n        \"\"\"\n    dataset_columns = list(dataset.columns)\n    dataset.replace(0, np.nan, inplace=True)\n\n    filled_data = pd.DataFrame()\n    for country in country_list:\n        print(country)\n        iteration_incomplete_dataset = dataset[dataset.isin([country]).any(axis=1)]\n        iteration_incomplete_dataset.drop(['country_name'], axis=1, inplace=True)\n        filled_country_data = pd.DataFrame(KNN(k=neighbors).fit_transform(iteration_incomplete_dataset))\n        complete_data = filled_country_data\n        complete_data.insert(0, 'Country', country)\n        filled_data = pd.concat([filled_data, complete_data])\n    \n    filled_data.columns = dataset_columns\n    filled_data.year = filled_data.year.astype(int)\n    return filled_data","106577d0":"def save_data(dataframe):\n    dataframe.to_csv('My_dataset.csv',index=False) #output our result","f4332da6":"def create_data(indicators, country_list, bq_assistant, neighbors, fill_missing=True):\n    \"\"\"The final function to call all other functions\n\n        Args:\n            indicators: Our WDI indicator code variables\n            country_list: A list of our desired countries\n            neighbor: KNN nearest neighbor\n            bq_assistant: The BigQuery Object to initialize our query\n            fill_missing: A True or False variable to employ KNN to fill NAs\n\n        Returns: a dataframe with the desired variables\n\n        \"\"\"\n    initiate_BigQuery()\n    \n    raw_query = call_query(indicators, querysize, bq_assistant, wdi)\n    \n    clean_data = clean_query(raw_query)\n    \n    clean_dataframe = convert_to_df(clean_data)\n    \n    country_dataframe = parse_country(clean_dataframe, country_list)\n    \n    \n    final = pd.DataFrame()\n    if fill_missing == True:\n        completed_data = fill_values(country_dataframe, neighbors, country_list)\n        final = completed_data\n        save_data(final)\n    else:\n        final = country_dataframe\n        save_data(final)\n    \n\n    return final","0744376f":"#Please input a list for the WDI indicators which you are interested in as well as the countries you would like to spool the data for.\n# It should be in a list format.\n\nindicators_list = ['FR.INR.LEND', 'FR.INR.DPST', 'FM.LBL.BMNY.GD.ZS', 'SH.DYN.NMRT', 'SE.SEC.ENRL.GC.FE.ZS'] #list of WDI indicator code(s)\ncountry_list = [\"Nigeria\", \"Niger\", 'France', \"United Kingdom\"] #list of countries\nfill_NA = True #String indicating whether user wants to employ the KNN nearest neighbors models to fill NA values input TRUE or FALSE\nquerysize = 10 #A value in Gigabyte representing the maximum computer resource which each query will employ\nneighbors = 5 #A value for the KNN model recommeded: Use 3 or 5\n\n\nwdi = bq_helper.BigQueryHelper(active_project=\"patents-public-data\",\n                                   dataset_name=\"worldbank_wdi\")\nbq_assistant = BigQueryHelper(\"patents-public-data\", \"worldbank_wdi\")","69569628":"data = create_data(indicators_list, country_list,bq_assistant, neighbors, fill_missing=fill_NA)\ndata.head(50)","d4526ac0":"This is a python script to pull data from the Kaggle World Development Indicator (WDI) Big Query dataset. This is mostly for economists looking for a fast way to iterate and populate data for multiple countries and or economic unions. \n\nHOW TO USE;\nGO TO THE SECOND TO LAST JUPYTER CELL AND INPUT YOUR INDICATOR CODE GOTTEN FROM ANY SAMPLE WDI DOCUMENT. **MUST BE IN A LIST**\n\nINPUT THE COUNTRIES OR UNIONS YOU ARE INTERESTED IN. **MUST BE IN A LIST**\n\nSELECT TRUE OR FALSE TO FILL THE NA VALUES IN THE DATASET\n\n> YOUR FINAL OUTPUT WILL BE SAVED AS MY_DATASET"}}