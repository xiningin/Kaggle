{"cell_type":{"43ec3fb2":"code","48dcae04":"code","3b3e4276":"code","db085f3a":"code","12dfb243":"code","a956298b":"code","e7772307":"code","055e051c":"code","0503375f":"code","d3c06186":"code","c8019093":"code","6a582a56":"code","0178c656":"code","14b065b7":"code","5aa75f4d":"code","75d06a6c":"code","3115a96c":"code","08eae2f3":"code","e4ebe63b":"code","5971c3a7":"code","19638956":"code","710488e8":"code","a805eac7":"code","6601789a":"code","abe817bf":"code","311b4161":"code","bc3c4179":"code","3acaeae8":"code","6de7c920":"code","a9cd92ff":"code","8a672e01":"code","8cae0f9e":"code","0d9f684a":"code","f139a1f9":"code","d6dc2aef":"code","e6c42649":"code","b7a6b994":"code","1f8f35b1":"code","7d320695":"code","c07dc13a":"code","3c8624f5":"code","777e2626":"code","b98c1adc":"code","254edd5f":"code","c6748cd2":"code","31344e52":"code","3a452e96":"code","13dc439e":"code","01edfc15":"code","c7ca67bd":"code","b88b1a3a":"code","f3a0a24f":"code","ab9e6b42":"code","51d79797":"code","be377e53":"code","b8f7c6ce":"code","0676d5d1":"code","d006ea97":"code","4474906f":"code","7d7df9b5":"code","81a5794b":"code","bfb6e84e":"code","6a635e03":"code","412dde82":"code","4d748759":"markdown","3bd12450":"markdown","5b464e65":"markdown","e4d1a5e1":"markdown","b64d9ddc":"markdown","7a88b64d":"markdown","15d8947a":"markdown","df46c07d":"markdown","f229db3e":"markdown","a8b4ee44":"markdown","2506e4e3":"markdown","c1f6d06f":"markdown","7640856c":"markdown","e6d3d317":"markdown","30212918":"markdown","c5df94fd":"markdown","dbba14be":"markdown","decd375e":"markdown","e6505d54":"markdown","5a8464bd":"markdown","280c0638":"markdown","ad2df06b":"markdown","3092664c":"markdown","5f635c5e":"markdown","72443c81":"markdown","8d77a807":"markdown","2c78c548":"markdown","b4a2b406":"markdown","8b1d5d65":"markdown","cf49c4e9":"markdown","8c632e7c":"markdown","b4a4e9b9":"markdown","0bb76508":"markdown","2874f4d6":"markdown","395d5058":"markdown","b99226e4":"markdown"},"source":{"43ec3fb2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n%matplotlib inline\nsns.set(style=\"darkgrid\")","48dcae04":"idata = pd.read_csv('..\/input\/india-trade-data\/2018-2010_import.csv') \nedata = pd.read_csv('..\/input\/india-trade-data\/2018-2010_export.csv') ","3b3e4276":"def max_counts( feature , number, data, return_rest = False ) : \n    counts = data[feature].value_counts()\n    values_list = list(counts[:number].values)\n    rest_value =  sum(counts.values) - sum (values_list)\n    index_list = list(counts[:number].index)\n    \n    if return_rest : \n        values_list.append(rest_value )\n        index_list.append('rest items')\n    \n    result = pd.Series(values_list, index=index_list)\n    if len(data[feature]) <= number : \n        result = None\n    return result","db085f3a":"def series_pie(series) : \n    plt.pie(series.values,labels=list(series.index),autopct ='%1.2f%%',labeldistance = 1.1,explode = [0.05 for i in range(len(series.values))] )\n    plt.show()","12dfb243":"def series_bar(series) : \n    plt.bar(list(series.index),series.values )\n    plt.show()","a956298b":"def make_label_encoder(original_feature , new_feature,data) : \n    enc  = LabelEncoder()\n    enc.fit(data[original_feature])\n    data[new_feature] = enc.transform(data[original_feature])\n    data.drop([original_feature],axis=1, inplace=True)","e7772307":"idata.head()","055e051c":"idata.shape","0503375f":"len(idata['HSCode'].unique())","d3c06186":"idata['HSCode'].value_counts()[:10]","c8019093":"len(idata['HSCode'].unique())","6a582a56":"len(idata['Commodity'].unique())","0178c656":"new_data = idata[idata['HSCode']==5]['Commodity']\nnew_data","14b065b7":"new_data.unique()","5aa75f4d":"for x in range(idata['HSCode'].max()): \n    new_data = idata[idata['HSCode']==x]['Commodity']\n    print(len(new_data.unique()))\n    print('---------------')","75d06a6c":"idata.drop(['Commodity'],axis=1, inplace=True)","3115a96c":"idata.head()","08eae2f3":"idata['country'].unique()","e4ebe63b":"len(idata['country'].unique())","5971c3a7":"counts = idata['country'].value_counts()","19638956":"counts[:10]","710488e8":"max_countries = max_counts('country',8,idata)","a805eac7":"max_countries","6601789a":"series_pie(max_countries)","abe817bf":"series_bar(max_countries)","311b4161":"make_label_encoder('country','country_code',idata)","bc3c4179":"idata.head()","3acaeae8":"idata.info()","6de7c920":"new_data  = idata[idata['value'] > 0]","a9cd92ff":"new_data.shape","8a672e01":"new_data.info()","8cae0f9e":"X = new_data.drop(['value'], axis=1, inplace=False)\ny = new_data['value']","0d9f684a":"X.shape","f139a1f9":"y.shape","d6dc2aef":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","e6c42649":"GBRModel = GradientBoostingRegressor(n_estimators=1000,max_depth=10,learning_rate = 0.1 ,random_state=33)\nGBRModel.fit(X_train, y_train)","b7a6b994":"print('GBRModel Train Score is : ' , GBRModel.score(X_train, y_train))\nprint('GBRModel Test Score is : ' , GBRModel.score(X_test, y_test))","1f8f35b1":"y_pred = GBRModel.predict(X_test)\nprint('Predicted Value for GBRModel is : ' , y_pred[:10])","7d320695":"len(edata['HSCode'].unique())","c07dc13a":"edata['HSCode'].value_counts()[:10]","3c8624f5":"len(edata['HSCode'].value_counts())","777e2626":"edata.drop(['Commodity'],axis=1, inplace=True)","b98c1adc":"edata.head()","254edd5f":"edata['country'].unique()","c6748cd2":"len(edata['country'].unique())","31344e52":"counts = edata['country'].value_counts()","3a452e96":"counts[:10]","13dc439e":"list(counts[:10].index)","01edfc15":"max_countries = max_counts('country',8,edata)\nmax_countries","c7ca67bd":"series_pie(max_countries)","b88b1a3a":"series_bar(max_countries)","f3a0a24f":"make_label_encoder('country','country_code',edata)","ab9e6b42":"edata.head()","51d79797":"edata.info()","be377e53":"new_data  = edata[edata['value'] > 0]","b8f7c6ce":"new_data.shape","0676d5d1":"new_data.info()","d006ea97":"X = new_data.drop(['value'], axis=1, inplace=False)\ny = new_data['value']","4474906f":"X.shape","7d7df9b5":"y.shape","81a5794b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","bfb6e84e":"GBRModel = GradientBoostingRegressor(n_estimators=1000,max_depth=10,learning_rate = 0.1 ,random_state=33)\nGBRModel.fit(X_train, y_train)","6a635e03":"print('GBRModel Train Score is : ' , GBRModel.score(X_train, y_train))\nprint('GBRModel Test Score is : ' , GBRModel.score(X_test, y_test))","412dde82":"y_pred = GBRModel.predict(X_test)\nprint('Predicted Value for GBRModel is : ' , y_pred[:10])","4d748759":"____\n\nlet's pie chart it","3bd12450":"\n_____\n\n\n\n# Building the Model\n\n\nlet's first define X & y","5b464e65":"_____\n\n# Data Processing\n","e4d1a5e1":"_____\n\nlet's  use Gradient Boosting Regressor , with 1000 estimators & 10 depth & 0.1 learning rate","b64d9ddc":"let's work with country feature","7a88b64d":"great work , & even we avoided OF , since test accuracy is high , now let's make prediction ","15d8947a":"what are the unique values for it ? ","df46c07d":"what are the most repeated countries ","f229db3e":"also we can bar them ","a8b4ee44":"so value feature got more than 14K null value , & we cannot fill them with mean or median , since this is the output , so it will mislead the training , we'll have to drop all these rows with any value less than or equal 0","2506e4e3":"cool , lets get the Commodity data , for only specific HSCode value","c1f6d06f":"what are the dimensions ? ","7640856c":"let's start with HSCode feature , how many unique values in it","e6d3d317":"so we'll need to start in data processing","30212918":"_____\n\nnow how data looks like ","c5df94fd":"______\n\nso it looks that this feature is very correlated to the other feature Commodity . \n\nso how many are them ","dbba14be":"so we can apply labelencoder to them","decd375e":"since we have 2 files , we'll need to handle them separately ","e6505d54":"_____\n\n# Import Data\n\nlet's have a look to import data","5a8464bd":"now how is accuracy ? ","280c0638":"so we'll need to get the max countries to graph them , let's say we'll get max 8 countries","ad2df06b":"let's have a look to top values for it","3092664c":"# Indian Trade Data regression\nBy : Hesham Asem\n\n____\n\nso we have here 2 data files , for import & export for a specific indian company , between 2010 & 2018\n\nlets use them to build a regression model , so we can expect the value using other features . \n\ndata file : \nhttps:\/\/www.kaggle.com\/lakshyaag\/india-trade-data#2018-2010_export.csv\n\n_____\n\nfirst to import the libraries \n","5f635c5e":"_____\n\nhow data looks like now ? ","72443c81":"so it's clear that those two features are very correlated , so we can drop one of them , let's drop commodity","8d77a807":"we ned to check if we have any nulls","2c78c548":"few features , what is the dimension ? ","b4a2b406":"then to read the data","8b1d5d65":"____\n\n# Needed Functions . \n\nas usual , we'll build here important funcstion which will be helpful in data processing . \n\nand you can see that some functions have the arg (data) , since we'll have to repeat our steps on idata & edata","cf49c4e9":"how many country we have here ","8c632e7c":"now how fata looks like ","b4a4e9b9":"______\n\n______\n\n# Export Data\n\n\nnow , we'll have to repeat almost all steps to export data , instead of import data","0bb76508":"and to be more sure , we'll mak for block for HSCode values , to get unique values for Commodity data ","2874f4d6":"& how many unqiue values for Commodity ? ","395d5058":"cool , now we ready for training\n\n________\n\n","b99226e4":"split it"}}