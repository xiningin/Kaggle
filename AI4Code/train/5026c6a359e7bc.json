{"cell_type":{"00383a26":"code","c0833fa1":"code","33cb546b":"code","bf4f44fc":"code","1207a019":"code","bb4053c7":"code","9973f9fa":"code","4145dd05":"code","ca56e0e1":"code","400a860a":"code","02c1beb2":"code","b5045470":"code","7c7d36a0":"code","11cf0dc4":"code","1a7ddc8c":"code","905aae45":"code","7c479612":"code","7ac8ab6c":"code","04b71ab5":"code","19a79461":"code","09d260db":"code","a13d1abc":"code","564a73cd":"markdown","39874877":"markdown","34d41245":"markdown","6a6d859a":"markdown"},"source":{"00383a26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0833fa1":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom collections import Counter\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport plotly\nsns.set_style('darkgrid')","33cb546b":"df=pd.read_csv('..\/input\/fifa19\/data.csv')\ndf.columns","bf4f44fc":"#\u3068\u308a\u3042\u3048\u305a\u3044\u3089\u306a\u305d\u3046\u306a\u30ab\u30e9\u30e0\u3092\u6d88\u3059\ndf = df.drop(['Unnamed: 0','Photo', 'Flag', 'Club Logo'], axis=1, inplace=False)","1207a019":"#\u6b20\u640d\u5024\u306e\u6570\u3092\u78ba\u8a8d\n#\u9806\u306b\u4e26\u3079\u308b\u306e\u306fsort\u3068sort_values\ndf.isnull().sum()[df.isnull().sum()>0].sort_values()","bb4053c7":"df.isnull().sum()[df.isnull().sum()==48].sort_values()\n#48\u500b\u306e\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u30ab\u30e9\u30e0\u304c\u591a\u3044\u3002\u3053\u308c\u3089\u306f\u5168\u3066\u540c\u3058\u9078\u624b\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u4e88\u60f3\u3067\u304d\u308b\nmissing_height = df[df['Height'].isnull()].index.tolist()\ndf.drop(df.index[missing_height],inplace =True)","9973f9fa":"#\u6b20\u640d\u5024\u3092\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u3059\u308b\nmsno.bar(df,color='red')","4145dd05":"#\u6b20\u640d\u5024\u306e\u5272\u5408\u304c\u5927\u304d\u3044\u30ab\u30e9\u30e0\u3092\u6d88\u3059\ndf.drop(['Loaned From','Release Clause','Joined'],axis=1,inplace=True)\nmsno.bar(df,color='red')","ca56e0e1":"df.isnull().sum()[df.isnull().sum()>0].sort_values()","400a860a":"df = df.drop(['Jersey Number'], axis=1)","02c1beb2":"#'Value'\u3068'Wage'\u3092\u6574\u5f62\u3059\u308b\ndf_value = df['Value']\ndef value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1]) #\u6570\u5b57\u306e\u6587\u5b57\u5217\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u5909\u63db: float()\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndf['Value'] = df['Value'].apply(value_to_int)\ndf['Wage'] = df['Wage'].apply(value_to_int)\n#\u8981\u7d20\uff08\u30b9\u30ab\u30e9\u30fc\u5024\uff09\u306b\u5bfe\u3059\u308b\u95a2\u6570 Series\u306e\u5404\u8981\u7d20\u306b\u9069\u7528: map(), apply() \/ DataFrame\u306e\u5404\u8981\u7d20\u306b\u9069\u7528: applymap()\n#\u884c\u30fb\u5217\uff08\u4e00\u6b21\u5143\u914d\u5217\uff09\u306b\u5bfe\u3059\u308b\u95a2\u6570 DataFrame\u306e\u5404\u884c\u30fb\u5404\u5217\u306b\u9069\u7528: apply()","b5045470":"df.columns","7c7d36a0":"df.loc[:,'ID':'Weight']","11cf0dc4":"df['Body Type'].unique()","1a7ddc8c":"df = df.drop(['Real Face','Contract Valid Until'], axis=1)\ndf.loc[:,'ID':'Weight']","905aae45":"df.loc[:,'LS':'RB']","7c479612":"#position\u304cGK\u306e\u4eba\u3063\u3066\u3082\u3057\u304b\u3057\u3066LS~RB\u307e\u3067\u6b20\u3051\u3066\u308b\uff1f\nGK_df = df[df['Position'] == 'GK']\nGK_df_LR = GK_df.loc[:,'LS':'RB']\nGK_df_LR\n#LS~RB\u307e\u3067\u306e\u629c\u3051\u306e\u307b\u3068\u3093\u3069\u306fGK\u306e\u3067\u3042\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u306d","7ac8ab6c":"GK_df_LR.isnull().sum()","04b71ab5":"df.loc[:,'Crossing':'GKReflexes']","19a79461":"#'LS'~'RB'\u307e\u3067\u306e\u6570\u5024\u306e\u5909\u52d5\u306f'Crossing'~'GKReflexes'\u304c\u6c7a\u5b9a\u4ed8\u3051\u3066\u3044\u308b\u306e\u3067\u306f\uff1f\nplayer_features = (\n    'Crossing', 'Finishing',\n       'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve',\n       'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes'\n)\n\n\nfrom math import pi\nidx = 1\nplt.figure(figsize=(30,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    categories=top_features.keys()\n    N = len(categories)\n\n    values = list(top_features.values())\n    values += values[:1]\n\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    ax = plt.subplot(6, 5, idx, polar=True)\n\n    plt.xticks(angles[:-1], categories, color='grey', size=12)\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=10)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n    ax.fill(angles, values, 'b', alpha=0.1)\n    plt.title(position_name, size=15, y=1.1)\n    idx += 1","09d260db":"import plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go","a13d1abc":"rating = pd.DataFrame(df.groupby(['Nationality'])['Overall'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('Nationality')['Overall'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'YlOrRd',\n            locationmode = 'country names',\n            locations = count['Nationality'],\n            text = count['Nationality'],\n            z = count['Overall'],\n)]\n\nlayout = go.Layout(title = 'Country vs Ratings')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","564a73cd":"## 2.\u304a\u3082\u3057\u308d\u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u307f\u3088\u3046","39874877":"# \u30c7\u30fc\u30bf\u3092\u898b\u3066\u8003\u3048\u3066\u307f\u308b","34d41245":"## 1.\u6b20\u640d\u5024\u306e\u51e6\u7406(\u30ab\u30e9\u30e0\u306e\u524a\u9664)","6a6d859a":"\u521d\u5fc3\u8005\u304c\u4ed6\u4eba\u306ekernel\u3092\u53c2\u8003\u306b\u3057\u3066FIFA\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u904a\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n<br>\n\u81ea\u5206\u306e\u5099\u5fd8\u9332\u3068\u3057\u3066\u3001\u7406\u89e3\u3067\u304d\u306a\u304b\u3063\u305f\u3068\u3053\u308d\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u8abf\u3079\u306a\u304c\u3089\u66f8\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u306e\u3067\u3001\u52d8\u9055\u3044\u3057\u3066\u3044\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\u3002\n<br>\n\u3082\u3057\u9593\u9055\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n<br>\n\u307e\u3060\u9014\u4e2d\u3067\u3059\u3002\u6c17\u304c\u5411\u3044\u305f\u3089\u3069\u3093\u3069\u3093\u66f8\u304d\u8db3\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003kernel\n<br>\nRoshan Sharma:FIFA Data Visualization:< https:\/\/www.kaggle.com\/roshansharma\/fifa-data-visualization >\n<br>\nNitin Datta:FIFA in depth analysis with Linear Regression:< https:\/\/www.kaggle.com\/nitindatta\/fifa-in-depth-analysis-with-linear-regression#3.-Data-Analysis >"}}