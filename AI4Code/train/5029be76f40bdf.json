{"cell_type":{"8d7d9f7d":"code","f35f7656":"code","f3787ff3":"code","1515842c":"code","36af75bc":"code","88c79d6d":"code","80c3f645":"code","1e5e9722":"code","e26b41d6":"code","1c2a902b":"code","a39b577e":"code","d05a27db":"code","cf3b8daf":"code","2b94afe4":"code","0046cedf":"code","316c9935":"code","f28bd1b8":"code","8673217f":"code","84e51ecb":"code","36142a78":"code","dec80d55":"code","9a455c7d":"code","d971d74e":"code","e2e79762":"code","162f8c11":"code","b19e4855":"code","641d1257":"code","bb5681f0":"code","489b3849":"code","8d410fcc":"code","1cdf2bad":"markdown","8a664d3d":"markdown","627427f3":"markdown","41466bca":"markdown","e9cd35e8":"markdown","1edd7f29":"markdown","337e43de":"markdown","9a5b2a36":"markdown","e1d96871":"markdown","399f464b":"markdown","6fe0fbac":"markdown","9a8c8e31":"markdown","7a1f8e1b":"markdown"},"source":{"8d7d9f7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f35f7656":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.applications import VGG16\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPooling2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.callbacks import ReduceLROnPlateau\nimport tensorflow as tf","f3787ff3":"train_df = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")","1515842c":"train_df.head()","36af75bc":"plt.figure(figsize = (10,10)) # Label Count\nsns.set(style=\"darkgrid\")\nsns.countplot(train_df['label'])","88c79d6d":"y_train = train_df['label']\ny = train_df['label']\ndel train_df['label']","80c3f645":"from sklearn.preprocessing import LabelBinarizer\nlabel_binarizer = LabelBinarizer()\ny_train = label_binarizer.fit_transform(y_train)","1e5e9722":"x_train = train_df.values\nx_test = test_df.values","e26b41d6":"# Normalize the data\nx_train = x_train \/ 255\nx_test = x_test \/ 255","1c2a902b":"# Reshaping the data from 1-D to 3-D as required through input by CNN's\nx_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)","a39b577e":"f, ax = plt.subplots(2,5) \nf.set_size_inches(10, 10)\nk = 0\nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(x_train[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n    plt.tight_layout()","d05a27db":"# Using Data augmentation to prevent overfitting\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","cf3b8daf":"x_train,x_val,y_train,y_val = train_test_split(x_train,y_train,test_size = 0.1 , random_state = 0)","2b94afe4":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 3, verbose=1,factor=0.5, min_lr=0.00001)","0046cedf":"model = Sequential()\nmodel.add(Conv2D(32 , (5,5) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128 , (2,2) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128 , (2,2) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128 , (2,2) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.1))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(units = 256 , activation = 'relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(units = 10 , activation = 'softmax'))\nmodel.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","316c9935":"history = model.fit(datagen.flow(x_train,y_train, batch_size = 64) ,epochs = 30,validation_data = (x_val, y_val) ,callbacks=[learning_rate_reduction] )","f28bd1b8":"print(\"Accuracy of the model on Validation Data is - \" , model.evaluate(x_val,y_val)[1]*100 , \"%\")","8673217f":"epochs = [i for i in range(30)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Validation Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'r-o' , label = 'Testing Loss')\nax[1].set_title('Testing Accuracy & Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","84e51ecb":"pred_val = model.predict_classes(x_val)\npred_val[:5]","36142a78":"new_y_val = []\nfor i in y_val:\n    new_y_val.append(i.argmax())\nnew_y_val[:5]    ","dec80d55":"classes = [\"Number \" + str(i) for i in range(10)]\nprint(classification_report(new_y_val, pred_val, target_names = classes))","9a455c7d":"cm = confusion_matrix(new_y_val,pred_val)\ncm","d971d74e":"cm = pd.DataFrame(cm , index = [i for i in range(10)] , columns = [i for i in range(10)])","e2e79762":"plt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap = \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True , fmt = '')","162f8c11":"correct = np.nonzero(pred_val == new_y_val)[0]\nincorrect = np.nonzero(pred_val != new_y_val)[0]","b19e4855":"i = 0\nfor c in correct[:6]:\n    plt.subplot(3,2,i+1)\n    plt.imshow(x_val[c].reshape(28,28), cmap=\"gray\", interpolation='none')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(pred_val[c], new_y_val[c]))\n    plt.tight_layout()\n    i += 1","641d1257":"i = 0\nfor c in incorrect[:6]:\n    plt.subplot(3,2,i+1)\n    plt.imshow(x_val[c].reshape(28,28), cmap=\"gray\", interpolation='none')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(pred_val[c], new_y_val[c]))\n    plt.tight_layout()\n    i += 1","bb5681f0":"predictions = model.predict_classes(x_test)\npredictions[:5]","489b3849":"submission['Label'] = predictions\nsubmission.to_csv(\"submission.csv\" , index = False)","8d410fcc":"submission.head()","1cdf2bad":"# Analysis after Model Training","8a664d3d":"**The dataset seems balanced as for each training label , enough training examples exist**","627427f3":"# Data Visualization and Preprocessing","41466bca":"**We can see that the labels it has incorrectly predicted are actually really close**","e9cd35e8":"# Loading the MNIST dataset in Keras","1edd7f29":"**Some of the Incorrectly Predicted Classes**","337e43de":"**Preview of first 10 images**","9a5b2a36":"For the data augmentation, i choosed to :\n\nRandomly rotate some training images by 10 degrees Randomly Zoom by 10% some training images Randomly shift images horizontally by 10% of the width Randomly shift images vertically by 10% of the height I did not apply a vertical_flip nor horizontal_flip since it could have lead to misclassify.\n\nOnce our model is ready, we fit the training dataset .","e1d96871":"# Training The Model","399f464b":"**Some of the Correctly Predicted Classes**","6fe0fbac":"# Description of the MNIST Handwritten Digit Recognition Problem\nThe MNIST problem is a dataset developed by Yann LeCun, Corinna Cortes and Christopher Burges for evaluating machine learning models on the handwritten digit classification problem.\n\nThe dataset was constructed from a number of scanned document dataset available from the National Institute of Standards and Technology (NIST). This is where the name for the dataset comes from, as the Modified NIST or MNIST dataset.\n\nImages of digits were taken from a variety of scanned documents, normalized in size and centered. This makes it an excellent dataset for evaluating models, allowing the developer to focus on the machine learning with very little data cleaning or preparation required.\n\nEach image is a 28 by 28 pixel square (784 pixels total). A standard split of the dataset is used to evaluate and compare models, where 60,000 images are used to train a model and a separate set of 10,000 images are used to test it.\n\nIt is a digit recognition task. As such there are 10 digits (0 to 9) or 10 classes to predict. Results are reported using prediction error, which is nothing more than the inverted classification accuracy.\n\nExcellent results achieve a prediction error of less than 1%. State-of-the-art prediction error of approximately 0.2% can be achieved with large Convolutional Neural Networks.\n![image.png](attachment:image.png)","9a8c8e31":"# Data Augmentation\nIn order to avoid overfitting problem, we need to expand artificially our dataset. We can make your existing dataset even larger. The idea is to alter the training data with small transformations to reproduce the variations.\n\nApproaches that alter the training data in ways that change the array representation while keeping the label the same are known as data augmentation techniques. Some popular augmentations people use are grayscales, horizontal flips, vertical flips, random crops, color jitters, translations, rotations, and much more.\n\nBy applying just a couple of these transformations to our training data, we can easily double or triple the number of training examples and create a very robust model.","7a1f8e1b":"**We perform a grayscale normalization to reduce the effect of illumination's differences.Moreover the CNN converges faster on [0..1] data than on [0..255].**"}}