{"cell_type":{"313a9959":"code","e0969d06":"code","8bf2a4f6":"code","a359594d":"code","5d7f4de2":"code","318327ec":"code","f895e662":"code","c1715b26":"code","7ed18ab6":"code","40f6211e":"code","2b25b0ac":"code","1baf2a6b":"code","9c8fb775":"code","1928a751":"code","f883fa4a":"code","bb555422":"code","e3b5c2f4":"code","4d266ec4":"code","496e169f":"code","000a9e3a":"code","7552ebee":"code","d867bc45":"code","12723f86":"code","e746f281":"code","002cf6ff":"code","1149dcfa":"code","00f83979":"code","3260593f":"code","061deaf7":"code","c0d8d43f":"code","cbd89d3f":"code","b88aa590":"code","be07d235":"code","ca2c2bc2":"code","75e83ae7":"code","583cb3cc":"markdown","b8fdb6a4":"markdown","d1007060":"markdown","1bf0ad49":"markdown","081978b2":"markdown","af088a14":"markdown","a99a7401":"markdown","4ff43592":"markdown","c7db2ae0":"markdown","7827956b":"markdown","1319472e":"markdown"},"source":{"313a9959":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n","e0969d06":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Bidirectional, Dense,Dropout,LSTM,Activation, RepeatVector, SimpleRNN\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n\nimport os, glob\n","8bf2a4f6":"years = ['2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']\ncompanies = ['stedin', 'liander','enduris', 'enexis','westland-infra','rendo','coteq'] ","a359594d":"\npath = r'..\/input\/dutch-energy\/Electricity\/' \n\nstedin=[]\nliander = []\nenduris = []\nenexis = []\nwestland_infra = []\nrendo = []\ncoteq = []\n\nfor company in companies:\n    all_files = glob.glob(f\"{path}\/{company}*.csv\")\n    for file in all_files:\n        print(company, file)\n        for year in years:\n            if year in file:\n                print(f\"adding column year {year} to {file}\")\n        \n                comp_df = company\n                print(f\"processing for : {comp_df}\")\n                comp_df = pd.read_csv(file, index_col=None, header=0)\n                comp_df['year'] = year\n\n                if company == companies[0]:\n                    stedin.append(comp_df)\n\n                elif company == companies[1]:\n                    liander.append(comp_df)\n                    \n                elif company == companies[2]:\n                        enduris.append(comp_df)\n                        \n                elif company == companies[3]:\n                    enexis.append(comp_df)\n\n                elif company == companies[4]:\n                    westland_infra.append(comp_df)\n\n                elif company == companies[5]:\n                    rendo.append(comp_df)\n\n                elif company == companies[6]:\n                    coteq.append(comp_df)  \n\n\n                \n        print('-------------------------------')\n\n        \n","5d7f4de2":"stedin_df = pd.concat(stedin, axis=0, ignore_index=True)\n# liander_df = pd.concat(liander, axis=0, ignore_index=True)\n# enduris_df = pd.concat(enduris, axis=0, ignore_index=True)\n# enexis_df = pd.concat(enexis, axis=0, ignore_index=True)\n# westland_infra_df = pd.concat(westland_infra, axis=0, ignore_index=True)\n# rendo_df = pd.concat(rendo, axis=0, ignore_index=True)\n# coteq_df = pd.concat(coteq, axis=0, ignore_index=True)","318327ec":"stedin_df.info()","f895e662":"stedin_df.isna().sum()","c1715b26":"stedin_df = stedin_df.drop('STANDAARDDEVIATIE', 1)","7ed18ab6":"stedin_df.head(5)","40f6211e":"stedin_df.info()","2b25b0ac":"top_10_cities = stedin_df['city'].value_counts().sort_values(ascending = False).nlargest(10)","1baf2a6b":"top_10_df = stedin_df[stedin_df['city'].isin(top_10_cities.index)] ","9c8fb775":"top_10_df.head(2)","1928a751":"pd.DataFrame(top_10_df.year.value_counts())","f883fa4a":"fig, ax = plt.subplots(figsize=(10,7))\ntop_10_df.groupby(['year'])['annual_consume'].sum().plot(kind = 'bar', ax=ax, title = 'Total annual consumption')","bb555422":"fig, ax = plt.subplots(figsize=(10,7))\ntop_10_df.groupby(['year'])['smartmeter_perc'].sum().plot(kind = 'bar', ax=ax, title = 'total smart meter usage')","e3b5c2f4":"top_10_df['consumption_per_connection'] = top_10_df['annual_consume'] \/ (top_10_df['num_connections'] * top_10_df['perc_of_active_connections'] \/ 100)\ntop_10_df.loc[top_10_df['consumption_per_connection'] == np.inf, 'consumption_per_connection'] = 0","4d266ec4":"cpc = top_10_df.groupby(['year'])['consumption_per_connection'].sum()\ncpc.plot(kind='bar', title= 'total consumption per connection', figsize=(10, 7))","496e169f":"city_conumption = top_10_df.groupby(['city'])['annual_consume'].sum().sort_values(ascending=False).head(10)\ncity_conumption.plot(kind='bar', title= 'total consumption per city (top 10 cities)', figsize=(10, 7))","000a9e3a":"t1c_ac = top_10_df.groupby(['year','city'])['annual_consume'].sum().sort_values(ascending = False).head(110)\nt1c_ac.unstack().plot(kind='bar', title= 'yearly total consumption per city (top 10 cities)', figsize=(15, 10))","7552ebee":"top_10_cities_sm=stedin_df.groupby(['city'])['smartmeter_perc'].sum().sort_values(ascending = False).head(10)\ntop_10_cities_sm.plot(kind='bar', title= 'total smart meter per city (top 10 cities)', figsize=(12, 8))","d867bc45":"sm_10_df = stedin_df[stedin_df['city'].isin(top_10_cities_sm.index)] ","12723f86":"top_10_sm_yearly = sm_10_df.groupby(['year','city'])['smartmeter_perc'].mean().sort_values(ascending = False)\ntop_10_sm_yearly.unstack().plot(kind='bar', title= 'average yearly smart-meter in top 10 cities', figsize=(15, 10))","e746f281":"stedin_df.annual_consume.sort_values(ascending = True)","002cf6ff":"def plot_df(df, x, y, title=\"\", xlabel='Date', ylabel='Value', dpi=100):\n    plt.figure(figsize=(16,5), dpi=dpi)\n    plt.plot(x, y, color='tab:red')\n    plt.gca().set(title=title, xlabel=xlabel, ylabel=ylabel)\n    plt.show()\n\nplot_df(stedin_df, x=stedin_df.index, y=stedin_df.annual_consume, title='data distribution from 2009 to 2020.')    ","1149dcfa":"dataset = stedin_df.annual_consume.values.reshape(-1,1)\n\nsclar = MinMaxScaler(feature_range=(0,1))\ndataset = sclar.fit_transform(dataset)\ndataset.shape","00f83979":"def load_data(dataset, seq_len):\n    X_train = []\n    y_train = []\n    split_size = int(0.8 * len(dataset))\n    \n    for i in range(seq_len, len(dataset)):\n        X_train.append(dataset[i - seq_len: i, 0])\n        y_train.append(dataset[i, 0])\n\n   \n    X_test = X_train[split_size:]\n    y_test = y_train[split_size:]\n\n   \n    X_train = X_train[:split_size]\n    y_train = y_train[:split_size]\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n\n    X_test = np.array(X_test)\n    y_test = np.array(y_test)\n\n    return [X_train, y_train, X_test, y_test]","3260593f":"seq_len = 20 #choose sequence length\n\nX_train, y_train, X_test, y_test = load_data(dataset, seq_len)\n\nX_train = X_train.reshape(X_train.shape[0], seq_len, 1)\nX_test = X_test.reshape(X_test.shape[0], seq_len, 1)\n\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","061deaf7":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Bidirectional(LSTM(64, return_sequences=True, input_shape=(X_train.shape[1],1))))\nmodel.add(Bidirectional(LSTM(64,return_sequences= False, activation= 'relu')))\nmodel.add(tf.keras.layers.Dense(32, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(16, activation = 'relu'))\nmodel.add(Dense(1, activation = 'linear'))\n\nmodel.compile(loss='mse', optimizer = 'adam')\nhist = model.fit(X_train, y_train, epochs=5, validation_split=0.3, batch_size=1024)\nmodel.summary()","c0d8d43f":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12,7))\nax.plot(hist.history['loss'], 'b' ,label = 'train loss', linewidth=2)\nax.plot(hist.history['val_loss'], 'r', label ='Validation loss', linewidth=2)\nax.set_title('model loss')\nax.set_ylabel('mse')\nax.set_xlabel('epoch')\nax.legend()\nplt.show()","cbd89d3f":"pred = model.predict(X_test)","b88aa590":"y_test_in.shape","be07d235":"def eval_score(y_test, y_true):\n    mae = mean_absolute_error(y_test, y_true)\n    mse = mean_squared_error(y_test, y_true)\n     \n    \n    return f\"mae : {mae}, mse : {mse}\"","ca2c2bc2":"eval_score(y_test, pred)","75e83ae7":"def plot_predictions(test, predicted, title):\n    plt.figure(figsize=(16, 4))\n    plt.plot(test, color='blue', label='Actual power consumption data')\n    plt.plot(predicted, alpha=0.7, color='red', label='Predicted power consumption data')\n    plt.title(title)\n    plt.xlabel('Time')\n    plt.ylabel('Normalized power consumption scale')\n    plt.legend()\n    plt.show()\n\n\nplot_predictions(y_test, pred, \"Predictions made by model\")","583cb3cc":"## Time series analysis","b8fdb6a4":"---------\n## To understand data properly, we will need to introduce a year column into the dataset,\n## since each file, states the data year, I will extract the year from the file and populate it with a separate column","d1007060":"### Let's focus on the first top 10 cities based on their annual electricity consumption","1bf0ad49":"### total consumption per connection in top 10 cities","081978b2":"### Total consumption among 10 cities shows a slight decrease in year 2019\n-------","af088a14":"# Link to alternate model\n\n# [Energy conumption in NL](https:\/\/www.kaggle.com\/raaavan\/cnn-lstm-time-series)","a99a7401":"### over time the smart meter usage kept on increasing since 2015 and within last 5 year it has shown an exponential growth\n\n-----------","4ff43592":"# Data Context\n\n### The energy network of the Netherlands is managed by a few companies. The energy data is collected from following companies.\n\n- Enexis\n- Liander\n- Stedin\n- Enduris\n- Westlandinfra\n- Rendo\n- Coteq","c7db2ae0":"----------\n## top 10 cites that uses smart meter more often","7827956b":"### the graph shows first 3 cites have a huge consumption rate while in remaming cities the rate is pretty much low.\n--------","1319472e":"## 1st use-case\n### Time-series analysis on electricity data from Stedin company"}}