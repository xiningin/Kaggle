{"cell_type":{"759fdab4":"code","b3a212ec":"code","3040b3d3":"code","dcf20fbd":"code","b68e19bd":"code","44f059d7":"code","dae786b7":"code","2eebde30":"code","b542285d":"code","78fc38e6":"markdown","80a9392d":"markdown","37c8cce4":"markdown"},"source":{"759fdab4":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport keras\nimport os\nimport warnings\nimport cv2\n\nwarnings.filterwarnings('ignore')","b3a212ec":"main_file = \"..\/input\/6000-store-items-images-classified-by-color\"\n\navailable_files = os.listdir(main_file)\nprint(\"Available files are: \\n\\t{}\".format(available_files))","3040b3d3":"training = os.path.join(main_file, 'train')\ntesting = os.path.join(main_file, 'test')","dcf20fbd":"training_images = {category: [] for category in os.listdir(os.path.join(training))}\ntesting_images = []\n\nlabels = {ix: category for ix, category in enumerate(list(training_images.keys()))}","b68e19bd":"n_H = 160\nn_W = 160\nn_C = 3\n\nfor file in ['training', 'testing']:\n    for category in range(12):\n        if file == 'training':\n            for image in os.listdir(os.path.join(training, labels[category])):\n                img = plt.imread(os.path.join(training, labels[category], image))\n                training_images[labels[category]].append((cv2.resize(img, (n_H, n_W)), category))\n        else:\n            for image in os.listdir(os.path.join(testing)):\n                img = plt.imread(os.path.join(testing, image))\n                testing_images.append(cv2.resize(img, (n_H, n_W)))","44f059d7":"print(\"Training set ...\")\n\nfor category in range(12):\n    print(\"There are {} image in the category of {}\".format(len(training_images[labels[category]]), \n                                                            labels[category]))","dae786b7":"Index = 3\ncate = np.random.choice([int(i) for i in range(12)])\nimage = training_images[labels[cate]][Index][0]\ntarget = training_images[labels[cate]][Index][1]\n\nplt.imshow(image)\nplt.title(\"Label: {}\".format(labels[target]))\nplt.xticks([])\nplt.yticks([])\nplt.show()\n","2eebde30":"def get_inputs(training_images, train_size = None, dev_size = None) :\n    m_examples = 0\n    for category in list(training_images.keys()) : \n        m_examples += len(training_images[category])\n    \n    m_train = np.floor(np.multiply(train_size, m_examples))\n    m_dev = np.subtract(m_examples, m_train)\n    \n    x_train = np.zeros([int(m_train), n_H, n_W, n_C])\n    y_train = np.zeros([1, int(m_train)])\n    \n    x_dev = np.zeros([int(m_dev), n_H, n_W, n_C])\n    y_dev = np.zeros([1, int(m_dev)])\n    \n    all_images = []\n    for category in range(12) : \n        for item in training_images[labels[category]] : \n            all_images.append(item)\n    np.random.shuffle(all_images)\n    \n    for train_image in range(int(m_train)) : \n        x_train[train_image] = all_images[train_image][0]\n        y_train[:, train_image] = all_images[train_image][1] \n        \n    #for dev_image in range(int(m_dev)) :\n    #    x_dev[dev_image] = all_images[dev_image][0]\n        #y_dev[dev_image] = all_images[dev_image][1]\n    \n    return x_train, y_train","b542285d":"x_train, y_train = get_inputs(training_images, train_size = 0.8, dev_size = 0.2)","78fc38e6":"#### Now, we're going to load the images and put them in the categories dict.","80a9392d":"#### Let's display now some of the training examples .\n\n**Change the index in order to see more examples.**","37c8cce4":"### Classification by Color :\n\nIn this notebook, I'm going to try to build a deep learning model that's able to look at any given image, and tell what color is represented in it.\n\n**Data description :**\n - The dataset contains `6239` images labeled by their colors. We have 12 categories, meaning 12 colors.\n \n - The images are not grayscale, but RGB.\n \n#### Loading packages . "}}