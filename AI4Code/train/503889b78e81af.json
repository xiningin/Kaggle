{"cell_type":{"5d8c99c5":"code","a58b71d5":"code","3e45bb09":"code","dc42689e":"code","7203a6f6":"code","06cf3876":"code","4a5df7e4":"code","e58ca4ee":"code","341f21a6":"code","b8e5225f":"code","6bbf4c6f":"code","14030e09":"code","d7f23fa5":"code","df97ad69":"code","d2645938":"code","4f794efd":"code","4ccd056c":"code","24860f06":"code","a9291ff0":"code","683757b0":"code","e41ef7bf":"code","708084de":"code","bb60df41":"code","4d09ba17":"code","d30ec489":"code","d95a6e58":"code","e36d9a91":"code","bb32219a":"code","702ce60f":"code","c3b562f3":"code","2829efa3":"code","c415b681":"code","2bec46cb":"code","6a90e2fe":"code","83edfefc":"code","8662f756":"code","92220d62":"code","2deec1c1":"code","24537f2a":"markdown","9bef5d36":"markdown","bbe1a3f1":"markdown"},"source":{"5d8c99c5":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","a58b71d5":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub428\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","3e45bb09":"import pandas as pd\nimport numpy as np","dc42689e":"X_train.head()","7203a6f6":"X_train.info()","06cf3876":"X_train.describe()","4a5df7e4":"X_train.columns","e58ca4ee":"y_train.head()","341f21a6":"y_train['income'].value_counts()\n#classifier \ubb38\uc81c\uc784\uc744 \uc54c \uc218 \uc788\uc74c","b8e5225f":"column_num = ['age', 'fnlwgt', 'education.num', 'capital.gain', 'capital.loss', 'hours.per.week']\ncolumn_cat = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex', 'native.country']","6bbf4c6f":"# captital.gain\uc758 \ub370\uc774\ud130\uac00 \ub9ce\uc774 \uce58\uc6b0\uce5c \uac83\uc73c\ub85c \ubcf4\uc784\ndef PrintSkew(column):\n    print(column, X_train[column].skew())\n\nfor column in column_num:\n    PrintSkew(column)","14030e09":"#X_train['capital.gain'].describe()\nX_train['capital.loss'].describe()","d7f23fa5":"(X_train['capital.gain'] == 0).sum()\n#(X_train['capital.loss'] == 0).sum()\n# capital.gain, capital.loss'\uc740 0\uc774 \ub108\ubb34 \ub9ce\uc73c\ubbc0\ub85c \uc81c\uac70","df97ad69":"column_num = ['age', 'fnlwgt', 'education.num', 'hours.per.week']","d2645938":"def DropOutlierViaESD(column):\n    # ESD \ubc29\ubc95\n    std = X_train[column].std()\n    mean = X_train[column].mean()\n    condi = ((mean -3*std) <= X_train[column]) & (X_train[column] <= (mean + 3*std))\n    X_train[column] = X_train.loc[condi, column]","4f794efd":"# \uc22b\uc790\uc758 \uc774\uc0c1\uce58 \uc81c\uac70\nfor column in column_num:\n    DropOutlierViaESD(column)","4ccd056c":"X_train.dropna(inplace=True)","24860f06":"X_train.isna().sum()","a9291ff0":"X_test.isna().sum()","683757b0":"# X_test \uacb0\uce21\uce58\ub294 median \uac12\uc73c\ub85c \uc774\uc0c1\uce58 \ub300\uc785\ndef FillNaCategoryMedian(column):\n    X_test[column] = X_test[column].fillna(X_test[column].value_counts().index[0])\n\nfor column in column_cat:\n    FillNaCategoryMedian(column)    \n\nX_test.isna().sum()","e41ef7bf":"# Category \ub370\uc774\ud130 \uc21c\uc11c\ud615\uc778\uc9c0 \uba85\ubaa9\ud615\uc778\uc9c0 \ud655\uc778\n\n#workclass: \uace0\uc6a9 \ud615\ud0dc\n#education: \uad50\uc721 \uc218\uc900\n#marital.status: \uacb0\ud63c \uc0c1\ud0dc\n#occupation: \uc5c5\uc885\n#relationship: \uac00\uc871 \uad00\uacc4\n#race: \uc778\uc885\n#sex: \uc131\ubcc4\n#native.country: \uad6d\uc801\n\n#education\uc740 \uc21c\uc11c\ud615, \ub098\uba38\uc9c0 \uba85\ubaa9\ud615\uc73c\ub85c \ubcf4\uc784\n    \nX_train[column_cat[-1]].value_counts()\n# race \ub294 White \ub610\ub294 Others\ub85c \uc218\uc815\n# native.country\ub3c4 United-States \ub610\ub294 Others\ub85c \uc218\uc815","708084de":"X_train['race'] = X_train['race'].apply(lambda x: 'White' if x == 'White' else 'Others')\nX_train['native.country'] = X_train['native.country'].apply(lambda x: 'United-States' if x == 'United-States' else 'Others')\n\nX_test['race'] = X_test['race'].apply(lambda x: 'White' if x == 'White' else 'Others')\nX_test['native.country'] = X_test['native.country'].apply(lambda x: 'United-States' if x == 'United-States' else 'Others')","bb60df41":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train[column_num])\nX_train_scaled = pd.DataFrame(data=X_train_scaled, columns=column_num, index=X_train[column_num].index)\n\ny_train = y_train.loc[X_train_scaled.index]\n\nX_test_scaled = scaler.transform(X_test[column_num])\nX_test_scaled = pd.DataFrame(data=X_test_scaled, columns=column_num, index=X_test[column_num].index)","4d09ba17":"X_train[column_cat] = X_train[column_cat].astype('str')\nX_test[column_cat] = X_test[column_cat].astype('str')","d30ec489":"column_nomi = ['workclass', 'marital.status', 'occupation', 'relationship', 'race', 'sex', 'native.country']\ncolumn_ord = ['education']","d95a6e58":"# \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \uc704\ud574 \ud569\uccd0\uc11c \uc9c4\ud589\ntrain_data_cnt = X_train.shape[0]\ntest_data_cnt = X_test.shape[0]\ndata_label = pd.concat([X_train[column_cat], X_test[column_cat]], axis=0)\ndata_label.shape","e36d9a91":"from sklearn.preprocessing import LabelEncoder\n#help(LabelEncoder)\n\ndef EncoderLabel(column):\n    label = LabelEncoder()\n    label.fit(data_label[column])\n    data_label[column] = label.transform(data_label[column])\n    \nfor column in column_cat:\n    print(column)\n    EncoderLabel(column)","bb32219a":"data_cat = pd.get_dummies(data_label)\nX_train_cat = data_cat[:train_data_cnt]\nX_test_cat = data_cat[train_data_cnt:]","702ce60f":"data_train = pd.concat([X_train_scaled, X_train_cat], axis=1)\ndata_train.tail()","c3b562f3":"data_test = pd.concat([X_test_scaled, X_test_cat], axis=1)\ndata_test.tail()","2829efa3":"from sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()\nlabel.fit(y_train['income'])\ny_train_label = label.transform(y_train['income'])","c415b681":"# GridSearchCV \ub300\uc2e0 \uc0ac\uc6a9\ud574\ubd04\n# \uc0ac\uc6a9\ubc95 \uc219\uc9c0\ud558\uae30...?\n\n# from sklearn.model_selection import train_test_split\n# data_train_train, data_train_val, data_y_trian, data_y_val = train_test_split(data_train, y_train_label,\n#                                                                               stratify=y_train_label,\n#                                                                               test_size=0.2, random_state=42)\n# \n# from xgboost import XGBClassifier\n# xgb = XGBClassifier()\n# xgb.fit(data_train_train, data_y_trian,\n#         early_stopping_rounds=100,\n#         eval_metric='logloss',\n#         eval_set=[(data_train_val, data_y_val)])\n# y_predict_label = xgb.predict(data_train_val)\n# \n# from sklearn.metrics import accuracy_score\n# \n# accuracy_score(y_predict_label, data_y_val)","2bec46cb":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(data_train, y_train_label)\ny_predict_label = xgb.predict(data_test)","6a90e2fe":"xgb.score(data_train, y_train_label)","83edfefc":"y_predict = label.inverse_transform(y_predict_label)","8662f756":"result = pd.DataFrame({'id':y_test['id'], 'income':y_predict})","92220d62":"result.to_csv('result.csv', index=False)","2deec1c1":"y_test_income = (y_test['income'] != '<=50K').astype(int)\npred = (result['income'] != '<=50K').astype(int)\n\nfrom sklearn.metrics import accuracy_score\nprint('accuracy score:', (accuracy_score(y_test_income, pred)))","24537f2a":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","9bef5d36":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)","bbe1a3f1":"# \uc0ac\uc6a9\uc790 \ucf54\ub529"}}