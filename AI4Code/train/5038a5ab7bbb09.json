{"cell_type":{"cc9e0ae1":"code","fdfaa63a":"code","654e89ac":"code","e29c6a32":"code","35c70de6":"code","f1cbeac4":"code","4a1bae04":"code","0c54b745":"code","e79f416c":"code","6c70aa70":"code","381a02e7":"code","9fd78682":"markdown","3136fb2d":"markdown","8a235de4":"markdown"},"source":{"cc9e0ae1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdfaa63a":"df = pd.read_csv('\/kaggle\/input\/divorce-prediction\/divorce_data.csv',delimiter = ';')\n","654e89ac":"df.head()","e29c6a32":"df['Divorce'].values","35c70de6":"df.isnull().all()","f1cbeac4":"sns.histplot(x=df['Divorce'],y=df.index)","4a1bae04":"# data visualization by Divorce stuation\nfig, axes = plt.subplots(11,5,figsize=(28,25))\ns=0\nfor i in range(0,11):\n    for j in range(0,5): \n        s+=1\n        if s==55:\n            break\n        sns.countplot(ax = axes[i,j],x=f'Q{s}',data=df,hue='Divorce')\n        axes[i,j].set_title(f'Q{s}')\n","0c54b745":"f,ax = plt.subplots(figsize=(25, 20))\n\nsns.heatmap(df.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',cmap='viridis',ax=ax)\nplt.show()","e79f416c":"X = df.drop('Divorce',axis =1)\nY = df['Divorce']","6c70aa70":"from sklearn.model_selection import train_test_split \nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=42)","381a02e7":"# Evaluating the ANN\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom tensorflow.keras.models import Sequential # initialize neural network library\nfrom tensorflow.keras.layers import Dense # build our layers library\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1]))\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn = build_classifier, epochs = 50)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 2)\nmean = accuracies.mean()\nvariance = accuracies.std()\nprint(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","9fd78682":"# Conclusion\n* **As you can see, we have an accuracy rate of 97 percent. If you want, you can increase this rate by playing with the parameters.**\n* **Please give me feedback and comment. Thanks for everything...**\n\n* **!This is an unfinished script!**","3136fb2d":"# Prepare And Modeling Data","8a235de4":"# Exploratory Data Analysis (EDA)"}}