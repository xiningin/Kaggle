{"cell_type":{"3a7f07c4":"code","51d22fed":"code","e18614e1":"code","4d42e504":"code","3fb5185a":"code","cc175849":"code","3354c798":"code","1fe00ec7":"code","64e7375e":"code","f52386c1":"code","796261ca":"code","a5aa3ee0":"code","b89e7663":"code","980d4cad":"code","09a1c6ba":"code","1b60f263":"code","ef51ca91":"code","d39311cf":"code","2a305473":"code","eabc8024":"markdown","15c2507f":"markdown","983decf6":"markdown","05e3164c":"markdown","b4bc7e5f":"markdown","bb507a80":"markdown","0476f8e8":"markdown","0332f723":"markdown","9c891cfe":"markdown","ede7deb4":"markdown","051352a5":"markdown"},"source":{"3a7f07c4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nimport os\nimport math\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","51d22fed":"train_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain_df.head()","e18614e1":"train_df['SalePrice'] = np.log(train_df['SalePrice'])","4d42e504":"import fastai_structured as fs\nfs.train_cats(train_df)\nfs.apply_cats(test_df, train_df)","3fb5185a":"nas = {}\ndf_trn, y_trn, nas = fs.proc_df(train_df, 'SalePrice', na_dict=nas)   ## Avoid creating NA columns as total cols may not match later\ndf_test, _, _ = fs.proc_df(test_df, na_dict=nas)\ndf_trn.head()","cc175849":"def rmse(x,y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(train_X), train_y), rmse(m.predict(val_X), val_y),     ## RMSE of log of prices\n                m.score(train_X, train_y), m.score(val_X, val_y)]\n    #if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","3354c798":"train_X, val_X, train_y, val_y = train_test_split(df_trn, y_trn, test_size=0.5, random_state=42)","1fe00ec7":"model1 = linear_model.LinearRegression()\nmodel2 = RandomForestRegressor()","64e7375e":"model1.fit(train_X, train_y)\nmodel2.fit(train_X, train_y)","f52386c1":"print_score(model1)","796261ca":"print_score(model2)","a5aa3ee0":"preds1 = model1.predict(val_X)\npreds2 = model2.predict(val_X)","b89e7663":"test_preds1 = model1.predict(df_test)\ntest_preds2 = model2.predict(df_test)","980d4cad":"stacked_predictions = np.column_stack((preds1, preds2))\nstacked_test_predictions = np.column_stack((test_preds1, test_preds2))","09a1c6ba":"meta_model = linear_model.LinearRegression()","1b60f263":"meta_model.fit(stacked_predictions, val_y)","ef51ca91":"final_predictions = meta_model.predict(stacked_test_predictions)","d39311cf":"submission = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmission.head()","2a305473":"submission['SalePrice'] = np.exp(final_predictions)   ## Convert log back \nsubmission.to_csv('stacking_example.csv', index=False)","eabc8024":"The evaluation criteria is RMSE of log of Sales Price. So first, let's change the target variable to log","15c2507f":"### Make predictions on validation AND test set","983decf6":"### This kernel is based on the excellent lectures by [@kazanova](https:\/\/www.kaggle.com\/kazanova) from the [Competitive Data Science](https:\/\/www.coursera.org\/learn\/competitive-data-science) course on Coursera\nWe'll create a simple meta model by stacking a linear model and a RF model","05e3164c":"### Defining function to calculate the evaluation metric","b4bc7e5f":"### Use meta model to make preditions on the stacked predictions of test set","bb507a80":"### Form a new dataset for validation & test by stacking the predictions","0476f8e8":"### Submit predictions","0332f723":"### Specify meta model & fit it on stacked validation set predictions","9c891cfe":"### Handling categorical data","ede7deb4":"### Splitting into training & validation sets","051352a5":"### Specify & fit models on training set"}}