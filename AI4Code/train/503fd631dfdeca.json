{"cell_type":{"51ad6d04":"code","c3e1438c":"code","d693c444":"code","84ccacca":"code","f417332a":"code","c8ed24f0":"code","6f032179":"code","a28563b8":"code","70527d26":"code","61be6324":"code","145965f0":"code","904d150c":"code","5229a803":"code","440706d5":"code","a040e16d":"code","ab4e9b2e":"code","a4c894a1":"code","019021c4":"code","d4897159":"code","8de1e32e":"code","8f5f15e3":"code","a512308d":"code","52ed19bb":"code","b710f380":"code","6480efd5":"code","0e7c41bf":"code","7134f7eb":"code","39f8c7ec":"code","4338ac1b":"markdown"},"source":{"51ad6d04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3e1438c":"!wget http:\/\/s3.amazonaws.com\/plink1-assets\/dev\/plink_linux_x86_64.zip\n!unzip plink_linux_x86_64.zip","d693c444":"!mkdir -p khazar","84ccacca":"!.\/plink --bfile ..\/input\/genome-data-of-a-khazar-origin\/khazar3_1-22_maf0.01mind0.035geno0.005 --keep-allele-order --recode vcf-iid --out khazar\/khazar23me_vcf","f417332a":"import pandas as pd\nimport torch\nfrom torch import tensor, from_numpy\nfrom torch import nn, stack\nimport numpy as np\nimport csv\nfrom tqdm import tqdm\nimport pickle\nimport math\nimport plotly.express as px\nfrom random import randint\nimport time\nfrom matplotlib.patches import Ellipse\nimport matplotlib.transforms as transforms\nfrom scipy.stats import norm, beta, multivariate_normal","c8ed24f0":"load = False\nif load:\n    df_fam = pd.read_csv(\n        'khazar\/khazar3_1-22_maf0.01mind0.035geno0.005.fam', \n        sep = '\\s+', \n        names = ['ID1', 'ID2', 'IDF', 'IDM', 'sex', 'pop'], \n        header = None, \n        \n        index_col = False\n        )","6f032179":"def save_obj(obj, name):\n    with open(name + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n\ndef load_obj(name ):\n    with open(name + '.pkl', 'rb') as f:\n        return pickle.load(f)\n","a28563b8":"fname = 'khazar\/khazar23me_vcf.vcf'\nchrom = 0\nrws = 0\nnullnull = np.array(['0\/0' for x in range (1774)])\nnulleins = np.array(['0\/1' for x in range (1774)])\neinseins = np.array(['1\/1' for x in range (1774)])\npunkte = np.array(['.\/.' for x in range (1774)])\ntensor_dict = {}\nsnip_dict={}\nwith open (fname, 'r') as check:\n    reader = csv.reader(check, delimiter = '\\t')\n    for row in tqdm(reader, total = 270926):\n        if chrom:\n            t1 = np.array(np.array(row[9:]) == punkte, dtype=bool)\n            t2 = np.array(np.array(row[9:]) == nullnull, dtype=bool)\n            t3 = np.array(np.array(row[9:]) == nulleins, dtype=bool)\n            t4 = np.array(np.array(row[9:]) == einseins, dtype=bool)\n            tensor_dict[rws] = np.stack([t1, t2, t3, t4], axis = 1)\n            snip_dict[rws] = row[2]\n            rws +=1\n        if row[0] == '#CHROM':\n            chrom = 1\n","70527d26":"%%time\n# to return a group of the key-value \n# pairs in the dictionary \nresult = tensor_dict.values() \n  \n# Convert object to a list \ndata = list(result) \n  \n# Convert list to an array \nohe = np.stack(data, axis=0)\n  \n# print the numpy array \nprint(ohe.shape)","61be6324":"%%time\ncnt_ohe = ohe.sum(axis=1)\np = (cnt_ohe + 0.5) \/ (ohe.shape[1] + 1)\nidx_ohe_flattened_zeros = cnt_ohe.flatten() == 0\ncnt_ohe_flattened_variating = cnt_ohe.flatten()[np.invert(idx_ohe_flattened_zeros)]","145965f0":"%%time\ncell_run = False   \nif cell_run:\n    ohe_l_A = ohe[:,ohe[0,:,1]==1,:]\n    cnt_ohe_l_A = ohe_l_A.sum(axis=1)\n    p_l_A = (cnt_ohe_l_A + 0.5) \/ (ohe_l_A.shape[1] + 1)\n    ohe_l_A.shape","904d150c":"if torch.cuda.is_available():\n    print('CUDA')\n    device = torch.device(\"cuda:0\")\n    #ohe = from_numpy(ohe).to(device)","5229a803":"%%time\nstate_dict = {1:'0\/0',2:'0\/1',3:'1\/1',0:'.\/.'}\ntorch.cuda.empty_cache()\n\ncuda_ohe = from_numpy(ohe).to(device)\ncuda_p = from_numpy(p).to(device)\ncuda_cnt_ohe = from_numpy(cnt_ohe.flatten()).to(device)\nidx_ohe_flattened_zeros = cuda_cnt_ohe == 0\ncnt_ohe_flattened_variating = cuda_cnt_ohe[~(idx_ohe_flattened_zeros)]\ncshape = cuda_ohe.shape[1]\n#cuda_base = from_numpy(ohe[0,0,:]).to(device)\nprint(cuda_ohe.type())\n#distrib = from_numpy(np.abs(ohe.sum(axis = 1, dtype=np.int16) - int(cshape\/2)).flatten().argsort()).to(device)\n#torch.cuda.empty_cache()","440706d5":"%%time\n#mask_array = from_numpy(ohe.any(axis = 1).flatten()).to(device)\nmask_array = from_numpy(ohe.any(axis = 1).flatten()).to(device)\ninitial_mask_array = mask_array.sum()\ngroup_array = np.zeros(mask_array.shape[0])\nprint('Non ZERO locus-variants: ', mask_array.sum())\ndistrib = from_numpy(np.abs(ohe.sum(axis = 1, dtype=np.int16) - int(cshape\/2)).flatten().argsort()).to(device)\ndistrib_pos = np.zeros(mask_array.shape[0])\nfor cnt, element in enumerate(distrib):\n    distrib_pos[element] = cnt\nbase_loc_n = 1\nfinal_graph_dict = {}","a040e16d":"start = time.time()\n\nwhile (int(mask_array.sum()) > 1):\n\n    f10 = randint(0, 11)  #\u043e\u0434\u0438\u043d \u0438\u0437 \u043f\u0435\u0440\u0432\u044b\u0445 10 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u043b\u043e\u043a\u0443\u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    position = distrib[mask_array[distrib]][f10] #\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u043b\u043e\u043a\u0443\u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    mask_array[position] = False\n    group_array[position] = base_loc_n\n\n    ind1 = position \/\/ 4 #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u043b\u043e\u043a\u0443\u0441\u0430\n    state1 = position % 4 #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0434\u043b\u044f \u043b\u043e\u043a\u0443\u0441\u0430\n\n    cuda_ohe_l_A = cuda_ohe[:,cuda_ohe[ind1,:,state1]==True,:]\n    cuda_cnt_ohe_l_A = cuda_ohe_l_A.sum(axis=1, dtype=torch.int16)\n    p_l_A = ((cuda_cnt_ohe_l_A + 0.5) \/ (cuda_ohe_l_A.shape[1] + 1))\n    cshape_l_A = cuda_ohe_l_A.shape[1]\n\n    cnt_ohe_l_A_flattened_variating = cuda_cnt_ohe_l_A.flatten()[~(idx_ohe_flattened_zeros)]\n    tmp_p = (cnt_ohe_flattened_variating + cnt_ohe_l_A_flattened_variating) \/ (cshape + cshape_l_A)\n    z =  torch.abs((cnt_ohe_flattened_variating\/cshape -\\\n         cnt_ohe_l_A_flattened_variating\/cshape_l_A) \/ torch.sqrt(tmp_p*(1-tmp_p)*(1.0\/cshape + 1.0\/cshape_l_A))) #z\n    \n    outliers = torch.argmax(z * mask_array)\n\n    kanten = torch.log(p_l_A.flatten()[outliers]) - torch.log(cuda_p.flatten()[outliers])\n    final_graph_dict.update({position:(outliers.cpu().numpy().flatten()[0], kanten.cpu().numpy().flatten()[0])})\n\n    mask_array[outliers] = False\n    group_array[outliers] = base_loc_n\n    base_loc_n +=1\n    if base_loc_n \/ 100 == base_loc_n \/\/ 100:\n        lenfgd = len(final_graph_dict)\n        mas = mask_array.sum()\n        print(int(time.time() - start), 'locus: ', base_loc_n, ' with ', \n              (time.time() - start)\/base_loc_n, ' -sec per locus')\n        print('locus-variants left', mas, \n              'dict len: ', lenfgd,\n             'diff = ', initial_mask_array - mas - lenfgd *2)\n        #t = torch.cuda.get_device_properties(0).total_memory\n        #r = torch.cuda.memory_reserved(0) \n        #a = torch.cuda.memory_allocated(0)\n        #f = r-a  # free inside reserved\n        #print('FREE GPU:', f)\n    if base_loc_n \/ 50000 == base_loc_n \/\/ 50000:\n        print('SAVING......')\n        save_obj(final_graph_dict, 'graph_dict')\n        np.save('group_array.npy', group_array)\n        np.save('mask_array.npy', mask_array)\n        np.save('base_loc_n.npy', np.array(base_loc_n))\n","ab4e9b2e":"save_obj(final_graph_dict, 'graph_dict')\nnp.save('group_array.npy', group_array)\nnp.save('mask_array.npy', mask_array)\nnp.save('base_loc_n.npy', np.array(base_loc_n))","a4c894a1":"base_loc_n","019021c4":"final_graph_dict","d4897159":"df_fgd = pd.DataFrame([final_graph_dict.keys(), final_graph_dict.items()[0], final_graph_dict.values()[1]])","8de1e32e":"df_fgd.columns = ['base', 'tuple']","8f5f15e3":"df_fgd['opposite'], df_fgd['edge'] = zip(*df_fgd.tuple)","a512308d":"df_fgd.tail(20)","52ed19bb":"len(df_fgd) * 2","b710f380":"len(pd.unique(df_fgd.base))","6480efd5":"len(pd.unique(df_fgd.opposite))","0e7c41bf":"len(pd.unique(df_fgd.base.to_list() + df_fgd.opposite.to_list()))","7134f7eb":"mask_array","39f8c7ec":"mask_array = ohe.any(axis = 1).flatten()\nbase_loc_n = 1\nstart = time.time()\npull_size = 2\nwhile (int(mask_array.sum()) > 2):\n    \n    position = distrib[distrib_pos[(group_array == base_loc_n).nonzero()].argmin()]\n    if mask_array[position]:\n        mask_array[(group_array == base_loc_n).nonzero()] = False\n        \n        #print('\u0418\u0442\u0435\u0440\u0430\u0446\u0438\u044f n.', base_loc_n, '\u043b\u043e\u043a\u0443\u0441\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435', mask_array.sum())\n        ind1 = position \/\/ 4 #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u043b\u043e\u043a\u0443\u0441\u0430\n        state1 = position % 4 #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0434\u043b\u044f \u043b\u043e\u043a\u0443\u0441\u0430\n        if cnt_ohe[ind1,state1] == 0:\n            break\n        #print ('\\n', '\u041e\u043f\u043e\u0440\u043d\u044b\u0439 \u043b\u043e\u043a\u0443\u0441: ', ind1,  snip_dict[ind1])\n        #print ('\u041e\u043f\u043e\u0440\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442: ',state1, state_dict[state1]) \n\n        cuda_ohe_l_A = cuda_ohe[:,cuda_ohe[ind1,:,state1]==True,:]\n        cuda_cnt_ohe_l_A = cuda_ohe_l_A.sum(axis=1, dtype=torch.int16)\n        p_l_A = ((cuda_cnt_ohe_l_A + 0.5) \/ (cuda_ohe_l_A.shape[1] + 1))\n\n        x = np.array([p.flatten(), \n                    p_l_A.cpu().numpy().flatten()]).T\n        dens = multivariate_normal.pdf(x, \n                                    mean=np.array([.5,.5]), \n                                    cov=cov)\n\n        outliers = (dens + np.invert(mask_array) * 100).argmin()   \n        kanten = torch.log(p_l_A.flatten()[outliers]) - torch.log(cuda_p.flatten()[outliers])\n        final_graph_dict.update({key:outliers})\n        mask_array[(group_array == group_array[outliers]).nonzero()] = False\n        group_array[(group_array == group_array[outliers]).nonzero()] = base_loc_n\n        if base_loc_n \/ 100 == base_loc_n \/\/ 100:\n            print((time.time() - start), 'locus: ', base_loc_n, ' with ', (time.time() - start)\/base_loc_n, ' -sec per locus', '  locus-variants left', mask_array.sum(), 'dict len: ', len(final_graph_dict))\n    base_loc_n +=1","4338ac1b":"<img src=\"https:\/\/monosnap.com\/image\/QW7V9wLEtWVb6WzYWPKpjPVpDw5WTh\" width=\"720\" height=\"360\">"}}