{"cell_type":{"ef111776":"code","7dd4e799":"code","d8057be6":"code","d3b1fbf0":"code","b31540fc":"code","89abe33c":"code","81aec332":"code","06195689":"code","81478b84":"code","2d923357":"code","46cdc3e3":"code","d12602bb":"code","c7a95201":"code","6daa9da3":"code","d4203aff":"code","9d10e301":"code","50429042":"code","b89e3c6f":"code","edd1e57c":"code","c5f246db":"code","dd30d230":"code","7ff573d7":"code","f11cb573":"code","4d4d35ef":"code","4ec96289":"code","a6e32f47":"code","f789110f":"code","c900e369":"code","dde7eb77":"code","8c9b4074":"code","90d4fb7a":"code","c611f07a":"code","5c2b28da":"code","7588ca02":"code","fdaa48b0":"markdown","79b626f5":"markdown","e2a8b599":"markdown"},"source":{"ef111776":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport os","7dd4e799":"image = cv2.imread('..\/input\/surface-crack-detection\/Negative\/00002.jpg')\ntype(image)","d8057be6":"plt.imshow(image)","d3b1fbf0":"image = cv2.imread('..\/input\/surface-crack-detection\/Positive\/00003.jpg')\ntype(image)","b31540fc":"plt.imshow(image)","89abe33c":"image.shape","81aec332":"path = '..\/input\/surface-crack-detection'","06195689":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout\nfrom keras.layers import Dense, Flatten, Activation\nfrom keras.preprocessing.image import ImageDataGenerator","81478b84":"model = Sequential()\nmodel.add(Conv2D(input_shape=(227,227,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=2, activation=\"softmax\"))\nmodel.summary()","2d923357":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","46cdc3e3":"datagen = ImageDataGenerator(rescale=1.0\/255,validation_split=0.3)","d12602bb":"train_data = datagen.flow_from_directory(path,\n                                         target_size=[227,227],\n                                         batch_size=64,\n                                         class_mode='categorical',\n                                         subset='training')\ntest_data = datagen.flow_from_directory(path,\n                                        target_size=[227,227],\n                                        batch_size=64,\n                                        class_mode='categorical',\n                                        subset='validation')\n                                       \n","c7a95201":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=15,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","6daa9da3":"print(history.history.keys())","d4203aff":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","9d10e301":"from keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\n\nfrom keras.applications import InceptionV3\nfrom keras.applications import ResNet50\nfrom keras.models import Model","50429042":"vgg = VGG16(include_top=False, weights='imagenet', input_shape=(227,227,3))\nvgg.summary()","b89e3c6f":"for layer in vgg.layers:\n    layer.trainable=False","edd1e57c":"x = Flatten()(vgg.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(2,activation='sigmoid')(x)\nmodel = Model(inputs=vgg.input, outputs=prediction)\nmodel.summary()","c5f246db":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","dd30d230":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","7ff573d7":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","f11cb573":"inception = InceptionV3(include_top=False, weights='imagenet', input_shape=(227,227,3))\ninception.summary()","4d4d35ef":"for layer in inception.layers:\n    layer.trainable=False","4ec96289":"x = Flatten()(inception.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(2,activation='sigmoid')(x)\nmodel = Model(inputs=inception.input, outputs=prediction)\nmodel.summary()","a6e32f47":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","f789110f":"hist=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","c900e369":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","dde7eb77":"resnet = ResNet50(include_top=False, weights='imagenet', input_shape=(227,227,3))\nresnet.summary()","8c9b4074":"for layer in resnet.layers:\n    layer.trainable=False","90d4fb7a":"x = Flatten()(resnet.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(2,activation='sigmoid')(x)\nmodel = Model(inputs=resnet.input, outputs=prediction)\nmodel.summary()","c611f07a":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","5c2b28da":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","7588ca02":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","fdaa48b0":"## Resnet Architecture","79b626f5":"## VGG16 Architecture","e2a8b599":"## Inception Architecture"}}