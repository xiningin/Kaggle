{"cell_type":{"fc8cce4c":"code","74b35f6c":"code","5f20b80c":"code","361db899":"code","5f75c832":"code","3088272c":"code","eb543b32":"code","35ec81b9":"code","0f2601ac":"code","36563edc":"code","c109ef5e":"code","40bb4236":"code","6ca489ad":"code","9e0e5a6c":"code","5d6eea89":"code","fb2c9937":"code","ab61d90a":"code","0306e13a":"code","d1da86e3":"code","6052d153":"code","d97d9c58":"code","8af40d19":"code","04097530":"code","ebcfdc95":"code","0592db1e":"code","a0e71b8e":"code","fa17c182":"code","42834d01":"code","d3f22b29":"code","d682c737":"code","46f434cc":"code","a8cadb48":"code","b60fe89e":"code","fd3fdb95":"code","39f9c0aa":"code","1b1f13a1":"code","7246f179":"code","f3750967":"code","51af5da7":"code","7f6f20b9":"code","36145576":"code","c9e3bbca":"code","bafffa16":"code","bf390e39":"code","8b97565c":"code","5e52b456":"code","ec9a98fe":"code","a8a15e03":"code","67851957":"code","c22e4557":"code","63943ffe":"code","61eba8e4":"code","2c04e309":"code","faf24981":"code","a0e18137":"code","0adb7b41":"code","df745f7d":"code","bb3d1849":"code","1c0b2cbf":"code","3485a566":"code","2756038e":"code","3069b6c2":"markdown"},"source":{"fc8cce4c":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler","74b35f6c":"data=pd.read_csv(\"..\/input\/employee_data.csv\")","5f20b80c":"data.head()","361db899":"data.shape","5f75c832":"data.describe(include='all')","3088272c":"data.isna().sum()","eb543b32":"sns.countplot(data.status)\nplt.title('No of levels in status')","35ec81b9":"sns.countplot(data.department)\nplt.xticks(rotation=45)\nplt.title('No of categories in department')","0f2601ac":"sns.boxplot(x='status',y='satisfaction',data=data)","36563edc":"sns.boxplot(x='status',y='tenure',data=data)","c109ef5e":"sns.countplot(x='status',hue='department',data=data)\nplt.legend(bbox_to_anchor=(1.05, 1), borderaxespad=0.5)","40bb4236":"y=data.status\nX=data\nX.drop('status',axis=1,inplace=True)","6ca489ad":"train_X,test_X,train_y,test_y=train_test_split(X,y,test_size=0.3,random_state=1)\nprint(train_X.shape)\nprint(test_X.shape)\nprint(train_y.shape)\nprint(test_y.shape)","9e0e5a6c":"cat_cols=['department','salary']\nnum_cols=data.columns.difference(cat_cols)","5d6eea89":"#preprocessing on train data\ntrain_X['department'].fillna('others',inplace=True)\ntrain_X['filed_complaint'].fillna('0',inplace=True)\ntrain_X['recently_promoted'].fillna('0',inplace=True)","fb2c9937":"train_X.isna().sum()","ab61d90a":"imp_num=SimpleImputer(missing_values=np.nan,strategy='mean')\ntrain_X[num_cols]=imp_num.fit_transform(train_X[num_cols])","0306e13a":"train_X[cat_cols]=train_X[cat_cols].apply(lambda x:x.astype(\"category\"))\ntrain_X[num_cols]=train_X[num_cols].apply(lambda x:x.astype(\"float\"))","d1da86e3":"train_num_data=train_X.loc[:,num_cols]\ntrain_cat_data=train_X.loc[:,cat_cols]","6052d153":"stand=StandardScaler()\nstand.fit(train_num_data[train_num_data.columns])\ntrain_num_data[train_num_data.columns]=stand.transform(train_num_data[train_num_data.columns])","d97d9c58":"train_X=pd.concat([train_num_data,train_cat_data],axis=1)","8af40d19":"train_X=pd.get_dummies(train_X,columns=cat_cols)","04097530":"#preprocessing on validation data\ntest_X['department'].fillna('others',inplace=True)\ntest_X['filed_complaint'].fillna('0',inplace=True)\ntest_X['recently_promoted'].fillna('0',inplace=True)","ebcfdc95":"test_X[num_cols]=imp_num.transform(test_X[num_cols])","0592db1e":"test_X[cat_cols]=test_X[cat_cols].apply(lambda x:x.astype(\"category\"))\ntest_X[num_cols]=test_X[num_cols].apply(lambda x:x.astype(\"float\"))","a0e71b8e":"test_num_data=test_X.loc[:,num_cols]\ntest_cat_data=test_X.loc[:,cat_cols]","fa17c182":"test_num_data[test_num_data.columns]=stand.transform(test_num_data[test_num_data.columns])\n\ntest_X=pd.concat([test_num_data,test_cat_data],axis=1)","42834d01":"test_X=pd.get_dummies(test_X,columns=cat_cols)","d3f22b29":"print(train_X.shape)\nprint(test_X.shape)","d682c737":"#MODEL 1\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\nlog=LogisticRegression()\nlog.fit(train_X,train_y)\n\ntrain_pred1=log.predict(train_X)\ntest_pred1=log.predict(test_X)","46f434cc":"print(\"clasifiacation report on train:\",classification_report(train_y,train_pred1))\nprint(\"clasifiacation report on test:\",classification_report(test_y,test_pred1))","a8cadb48":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,n_jobs=None, train_sizes=np.linspace(.1, 1.0, 10)):\n    \n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n    plt.legend(loc=\"best\")\n    return plt","b60fe89e":"plot_learning_curve(estimator=log,title='logistic_regression_learning_curve',X=train_X,y=train_y,cv=5,ylim=(0.25,1.00))","fd3fdb95":"#MODEL 2\nfrom sklearn.tree  import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()\ndtc.fit(train_X,train_y)\ntrain_preds2=dtc.predict(train_X)\ntest_preds2=dtc.predict(test_X)","39f9c0aa":"print(\"clasifiacation report on train:\",classification_report(train_y,train_preds2))\nprint(\"clasifiacation report on test:\",classification_report(test_y,test_preds2))","1b1f13a1":"plot_learning_curve(estimator=dtc,title='Decesion_tree_learning_curve',X=train_X,y=train_y,cv=5,ylim=(0.50,1.50))","7246f179":"#MODEL 3\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\ndt=DecisionTreeClassifier()\nparams={\n    'criterion':['gini','entropy'],\n    'max_depth':np.arange(4,20,1),\n    'min_samples_split':np.arange(0.001,0.1,0.01),\n    'max_features':['log2','sqrt','auto'],\n    'min_weight_fraction_leaf':np.arange(0.001,0.25,0.05)\n}\nrandom=RandomizedSearchCV(dt,param_distributions=params,n_iter=10,verbose=1)\nrandom.fit(train_X,train_y)","f3750967":"random.best_estimator_","51af5da7":"params2={\n    'criterion':['gini','entropy'],\n    'max_depth':np.arange(10,16,1),\n    'min_samples_split':np.arange(0.05,0.1,0.01),\n    'max_features':['log2','sqrt','auto'],\n    'min_weight_fraction_leaf':np.arange(0.001,0.25,0.05)\n}\ngrid=GridSearchCV(estimator=dt,param_grid=params2,cv=5,verbose=1,n_jobs=-1)\ngrid.fit(train_X,train_y)","7f6f20b9":"grid.best_estimator_.fit(train_X,train_y)","36145576":"train_preds3=grid.best_estimator_.predict(train_X)\ntest_preds3=grid.best_estimator_.predict(test_X)","c9e3bbca":"print(\"clasifiacation report on train:\",classification_report(train_y,train_preds3))\nprint(\"clasifiacation report on test:\",classification_report(test_y,test_preds3))","bafffa16":"plot_learning_curve(estimator=grid.best_estimator_,title='Decision_tree_learning_curve',X=train_X,y=train_y,cv=5,ylim=(0.50,1.50))","bf390e39":"#MODEL4\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier()\nparam_knn={\n    'n_neighbors':np.arange(3,18,1),\n    'weights':['uniform','distance'],\n    'algorithm':['auto','brute'],\n}\nrandom2=RandomizedSearchCV(knn,param_distributions=param_knn,n_iter=10,verbose=1,cv=5)\nrandom2.fit(train_X,train_y)\n","8b97565c":"random2.best_estimator_","5e52b456":"param_knn2={\n    'n_neighbors':np.arange(3,10,1),\n    'weights':['uniform','distance'],\n    'algorithm':['auto','brute'],\n}\ngrid2=GridSearchCV(estimator=knn,param_grid=param_knn2,cv=5,verbose=1,n_jobs=-1)\ngrid2.fit(train_X,train_y)","ec9a98fe":"grid2.best_estimator_.fit(train_X,train_y)\ntrain_preds4=grid2.best_estimator_.predict(train_X)\ntest_preds4=grid2.best_estimator_.predict(test_X)\n","a8a15e03":"print(\"clasifiacation report on train:\",classification_report(train_y,train_preds4))\nprint(\"clasifiacation report on test:\",classification_report(test_y,test_preds4))","67851957":"plot_learning_curve(estimator=grid2.best_estimator_,title='knn_learning_curve',X=train_X,y=train_y,cv=5,ylim=(0.50,1.50))","c22e4557":"#MODEL 5\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(train_X,train_y)\ntrain_preds5=rfc.predict(train_X)\ntest_preds5=rfc.predict(test_X)","63943ffe":"print(\"clasifiacation report on train:\",classification_report(train_y,train_preds5))\nprint(\"clasifiacation report on test:\",classification_report(test_y,test_preds5))","61eba8e4":"rfc2=RandomForestClassifier(n_jobs=-1,max_features=\"sqrt\",class_weight=\"balanced_subsample\")\nparam_grid = {\"n_estimators\" : np.arange(10,100,1),\n           \"max_depth\" : np.arange(8,20,1),\n           \"min_samples_leaf\" : np.arange(5,20,1),\n           \"class_weight\" : ['balanced','balanced_subsample']}\nrandom3=RandomizedSearchCV(estimator=rfc2,param_distributions=param_grid,n_iter=5,cv=5,verbose=1)","2c04e309":"random3.fit(train_X,train_y)","faf24981":"random3.best_estimator_","a0e18137":"param_grid2 = {\"n_estimators\" : np.arange(75,100,1),\n           \"max_depth\" : np.arange(12,18,1),\n           \"min_samples_leaf\" : np.arange(10,16,1),\n           \"class_weight\" : ['balanced','balanced_subsample']}\ngrid3=GridSearchCV(estimator=rfc2,param_grid=param_grid2,cv=2,verbose=1,n_jobs=-1)\ngrid3.fit(train_X,train_y)\n","0adb7b41":"grid3.best_estimator_.fit(train_X,train_y)\ntrain_preds6=grid3.best_estimator_.predict(train_X)\ntest_preds6=grid3.best_estimator_.predict(test_X)","df745f7d":"print(\"clasifiacation report on train:\",classification_report(train_y,train_preds6))\nprint(\"clasifiacation report on test:\",classification_report(test_y,test_preds6))","bb3d1849":"plot_learning_curve(estimator=grid3.best_estimator_,title='knn_learning_curve',X=train_X,y=train_y,cv=5,ylim=(0.50,1.50))","1c0b2cbf":"results=pd.DataFrame({' ':['Employeed','Left'],'LOG-f1_score':[0.86,0.41],'Decision Tree 1-f1_score':[0.97,0.91],'Decision Tree 2-f1_score':[0.91,0.72],'Knn-f1_score':[0.97,0.91],'Random Forest 1':[0.98,0.94],'Random Forest 2':[0.98,0.92]})","3485a566":"results","2756038e":"# \"Rondom forest 1\", is the best model for prediction,since it has high f1-score","3069b6c2":"EMPLOYEE STATUS PREDICTION\n\nTARGET VARIABLE:STATUS(employed\/status)\n\nPROBLEM:classification problem\n\n**DATA DESCRIPTION:**\n\n'status' \u2013 Current employment status (Employed \/ Left)\n\n'department' \u2013 Department employees belong(ed) to\n\n'salary' \u2013 Salary level relative to rest of their department\n\n'tenure' \u2013 Number of years at the company\n\n'recently_promoted' \u2013 Was the employee promoted in the last 3 years?\n\n'n_projects' \u2013 Number of projects employee is staffed on\n\n'avg_monthly_hrs' \u2013 Average number of hours worked per month\n\n'satisfaction' \u2013 Score for employee\u2019s satisfaction with the company (higher is better)\n\n'last_evaluation' \u2013 Score for most recent evaluation of employee (higher is better)\n\n'filed_complaint' \u2013 Has the employee filed a formal complaint in the last 3 years?"}}