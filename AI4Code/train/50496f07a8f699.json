{"cell_type":{"c6ffae05":"code","2bddc956":"code","48259379":"code","8364a401":"code","b0984aa7":"code","984d0fe2":"code","5ca91a14":"code","02595795":"code","eb5d8713":"code","4004badd":"code","c8cb6ffe":"code","33224126":"code","744fc985":"code","ddabe144":"code","696f8045":"code","e2847955":"code","c2193fcd":"code","1e9d0299":"code","b6b4bb9e":"code","3d6547e9":"code","a1112325":"code","ab5f8910":"code","db235cb1":"code","7ae00b68":"code","8df71dbe":"code","64c00ed9":"code","2c4578b6":"code","f130c468":"code","d7935b83":"code","b4c614f5":"code","d22633d0":"code","aa9fa9db":"code","13daaa6c":"code","38cf2a57":"code","91165fdf":"code","6a62ed88":"code","60db3861":"code","f6ca2cda":"code","656499dc":"code","00c1637b":"code","d4d3c8ce":"code","52111246":"code","a485d0c3":"code","9de455ae":"code","8d1c20fe":"code","53163daa":"code","858055af":"code","00a20884":"code","4cc2efbe":"code","dfc7b022":"code","180bacf0":"code","06a6f5ca":"code","5948af24":"code","f51940d4":"code","3cedb9b3":"code","88f72f89":"code","5013988e":"code","56eb8696":"code","5adf24ff":"code","362ca5bc":"code","d468c672":"code","57ca6bd4":"code","a4f7aa2b":"code","656d0d36":"code","c6cb5122":"code","8529690f":"code","4309c44c":"code","1d91bcc1":"code","85a069a3":"markdown","43b27997":"markdown","f126366f":"markdown"},"source":{"c6ffae05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bddc956":"#pip install download\n# import download\n# from download import download","48259379":"#download(\"https:\/\/he-s3.s3.ap-southeast-1.amazonaws.com\/media\/hackathon\/cipla-data-scientist-hiring-challenge\/predict-the-loan-sanction-amount-16-2a470a5b\/dfb5e5f2c9bc11eb.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=74e8965847d5a880d9698745ec6a8f7e1e983bc7bb050d2debd014737299e4f1&X-Amz-Date=20210620T172232Z&X-Amz-Credential=AKIA6I2ISGOYH7WWS3G5%2F20210620%2Fap-southeast-1%2Fs3%2Faws4_request\",\".\/\",'zip',replace=True)","8364a401":"pd.set_option(\"display.max_columns\",None)","b0984aa7":"train = pd.read_csv(\"..\/input\/loan-amount-sanctioned-dataset\/train.csv\")\ntest = pd.read_csv(\"..\/input\/loan-amount-sanctioned-dataset\/test.csv\")\nprint(train.shape,test.shape)","984d0fe2":"train.head()","5ca91a14":"train.info()","02595795":"print(train.isna().sum()\/train.shape[0]*100)\nprint(train.isna().sum())\n#(train.isnull().sum())","eb5d8713":"train = train[train['Loan Sanction Amount (USD)'].isna() == False]#.isna().sum()\ntrain.reset_index(drop=True,inplace=True)","4004badd":"train.isna().sum()#\/train.shape[0]*100","c8cb6ffe":"train['Income Stability'].value_counts()\ntrain['Type of Employment'].value_counts()","33224126":"train['Income Stability'].fillna('Unknown',inplace=True)\ntrain['Type of Employment'].fillna('Unknown',inplace=True)","744fc985":"test['Income Stability'].fillna('Unknown',inplace=True)\ntest['Type of Employment'].fillna('Unknown',inplace=True)","ddabe144":"for col in train.drop(['Customer ID', 'Name'],axis=1).select_dtypes('object').columns:\n    print(f\"***************{col}***************************\")\n    print(train[col].value_counts())","696f8045":"train.Profession.replace({'Unemployed':'Working','Businessman':'Working','Student':'Working','Maternity leave':'Working'},inplace=True)\ntest.Profession.replace({'Unemployed':'Working','Businessman':'Working','Student':'Working','Maternity leave':'Working'},inplace=True)\nprint(train.Profession.nunique(),test.Profession.nunique(),train.Profession.unique())","e2847955":"train.describe(include=['object'])","c2193fcd":"test.describe(include=['object'])","1e9d0299":"train.nunique()","b6b4bb9e":"train.columns","3d6547e9":"train['Co-Applicant'].unique()\ntest['Co-Applicant'].unique()","a1112325":"train['Co-Applicant'].replace({-999:-1},inplace=True)\ntest['Co-Applicant'].replace({-999:-1},inplace=True)","ab5f8910":"test['Co-Applicant'].replace({'?':-1},inplace=True)","db235cb1":"income_fill = train.groupby(['Income Stability', 'Profession', 'Type of Employment'])['Income (USD)'].mean().to_dict()","7ae00b68":"train.groupby(['Income Stability', 'Profession', 'Type of Employment'])['Income (USD)'].mean()","8df71dbe":"a","64c00ed9":"income_fill\n","2c4578b6":"train['Income (USD)']","f130c468":"train.loc[2,'Gender']\ntrain.loc[train.Gender == 'F']\ntrain.iloc[[0,2],[1,9]]","d7935b83":"train[train['Income (USD)'].isna() == True]#.index","b4c614f5":"#[income_fill[(i,j,k)] for i,j,k in zip(train[train['Income (USD)'].isna() == True]['Income Stability'],train[train['Income (USD)'].isna() == True]['Profession'],train[train['Income (USD)'].isna() == True]['Type of Employment'])]","d22633d0":"train.loc[train[train['Income (USD)'].isna() == True].index,['Income (USD)']]","aa9fa9db":"a = [i for i in zip(train[train['Income (USD)'].isna() == True])]","13daaa6c":"#income_fill[(1,1,1)]","38cf2a57":"#[income_fill[(i,j,k)] for i,j,k in zip(train[train['Income (USD)'].isna() == True]['Income Stability'],train[train['Income (USD)'].isna() == True]['Profession'],train[train['Income (USD)'].isna() == True]['Type of Employment'])]","91165fdf":"train.loc[train[train['Income (USD)'].isna() == True].index,['Income (USD)']]=[income_fill[(i,j,k)] for i,j,k in zip(train[train['Income (USD)'].isna() == True]['Income Stability'],train[train['Income (USD)'].isna() == True]['Profession'],train[train['Income (USD)'].isna() == True]['Type of Employment'])]\ntrain['Income (USD)'].fillna(method='bfill',inplace=True)\ntrain['Income (USD)'].isna().sum()","6a62ed88":"test.loc[test[test['Income (USD)'].isna() == True].index,['Income (USD)']]=[income_fill[(i,j,k)] for i,j,k in zip(test[test['Income (USD)'].isna() == True]['Income Stability'],test[test['Income (USD)'].isna() == True]['Profession'],test[test['Income (USD)'].isna() == True]['Type of Employment'])]\ntest['Income (USD)'].isna().sum()","60db3861":"train.isna().sum()[train.isna().sum()!=0]","f6ca2cda":"mean_loan = train['Current Loan Expenses (USD)'].mean()\ntrain['Current Loan Expenses (USD)'].fillna(mean_loan,inplace=True)\ntest['Current Loan Expenses (USD)'].fillna(mean_loan,inplace=True)","656499dc":"train.Dependents.fillna(1,inplace=True)\ntrain['Credit Score'].fillna(-1,inplace=True)\ntrain['Has Active Credit Card'].fillna('Unknown',inplace=True)\ntrain['Property Location'].fillna('Unknown',inplace=True)","00c1637b":"test.Dependents.fillna(1,inplace=True)\ntest['Credit Score'].fillna(-1,inplace=True)\ntest['Has Active Credit Card'].fillna('Unknown',inplace=True)\ntest['Property Location'].fillna('Unknown',inplace=True)","d4d3c8ce":"train.isna().sum()","52111246":"train.columns","a485d0c3":"train.drop(['Customer ID', 'Name', 'Gender','Location','Property ID','Property Age'],axis=1,inplace=True)\ntrain.head()","9de455ae":"train_features = train.drop(['Loan Sanction Amount (USD)'],axis=1)\ntest_features = test\ntarget = train['Loan Sanction Amount (USD)']","8d1c20fe":"target.shape","53163daa":"train.shape,test.shape,train_features.shape,test_features.shape","858055af":"train_features['Income Stability'].value_counts().to_dict()","00a20884":"for col in train_features.select_dtypes('object').columns:\n    print(f\"********************{col}*****************\")\n    object_dict = train_features[col].value_counts().to_dict()\n    train_features.replace(object_dict,inplace=True)\n    test_features.replace(object_dict,inplace=True)\ntrain_features.head()","4cc2efbe":"train_features.drop_duplicates(train.drop(['Loan Sanction Amount (USD)'],axis=1).columns).shape\ntrain_features.shape, train.shape","dfc7b022":"from sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.model_selection import train_test_split,cross_validate \nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,ExtraTreesRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor","180bacf0":"X_train, X_test, y_train, y_test = train_test_split(train_features,target,test_size=0.2,random_state=42)","06a6f5ca":"cat_cols = train_features.select_dtypes(include='object').columns","5948af24":"cat_cols","f51940d4":"import warnings\nwarnings.filterwarnings('ignore')","3cedb9b3":"models = [LGBMRegressor(random_state=42),XGBRegressor(random_state=42),ExtraTreesRegressor(random_state=42),LinearRegression(),CatBoostRegressor(random_state=42,verbose=0)]\nfor model in models:\n    print(f\"********************{model}*********************\")\n    cv = cross_validate(model,train_features,target,cv=10,scoring=['r2'])\n    print(cv['test_r2'].mean())","88f72f89":"selected_columns = ['Loan Amount Request (USD)','Credit Score','Co-Applicant','Income Stability','No. of Defaults','Income (USD)','Profession','Has Active Credit Card']\nfor col in train_features.drop(selected_columns,axis=1).columns:\n    print(f\"***************{col}*******************\")\n    cv = cross_validate(LGBMRegressor(random_state=42),np.log1p(train_features[[col]+selected_columns]),target,cv=10,scoring=['r2'])\n    print(cv['test_r2'].mean())","5013988e":"selected_columns = ['Loan Amount Request (USD)','Credit Score','Co-Applicant','Income Stability','No. of Defaults','Income (USD)','Profession','Has Active Credit Card']","56eb8696":"metric = [0]\nfor i in range(1,100,1):\n    print(f\"********************{i}*********************\")\n    cv = cross_validate(LGBMRegressor(random_state=42,n_estimators=67,num_leaves=16,max_depth=9,learning_rate=i\/1000),np.log1p(train_features[selected_columns]),target,cv=10,scoring=['r2'])\n    metric.append(cv['test_r2'].mean())","5adf24ff":"max(metric)","362ca5bc":"for i in range(70,201,):\n    print(f\"**************{i}*******************\")\n    cat =  LGBMRegressor(random_state=42,n_estimators=i)\n    cat.fit(np.log1p(X_train),y_train)\n    print(max(0,100*r2_score(y_test,np.abs(cat.predict(np.log1p(X_test))))))","d468c672":"cat =  LGBMRegressor(random_state=42,n_estimators=67,num_leaves=16,max_depth=9)\ncat.fit(np.log1p(train_features[selected_columns]),target)\n#print(max(0,100*r2_score(y_test,np.abs(cat.predict(np.log1p(X_test))))))","57ca6bd4":"mean_pro = test[test['Property Price']!=\"?\"]['Property Price'].apply(float).mean()","a4f7aa2b":"test['Property Price'].replace({'?':mean_pro},inplace=True)\ntest['Property Price'] = test['Property Price'].apply(float)","656d0d36":"test.describe(include='object')","c6cb5122":"test['Co-Applicant'] = test['Co-Applicant'].apply(int)","8529690f":"predict = np.abs(cat.predict(np.log1p(test[selected_columns])))","4309c44c":"submis = pd.DataFrame({'Loan Sanction Amount (USD)':predict},index=test['Customer ID'])\nsubmis.head()","1d91bcc1":"submis.to_csv(\"cipla_hackerearth_999SelectedColumnsLogfrequency_crossVal_lgbm62_15_11.csv\",index=True)","85a069a3":"### How many missing values present in individual columns","43b27997":"## Basic overview of data","f126366f":"# Import tha data"}}