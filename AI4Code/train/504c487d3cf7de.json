{"cell_type":{"5bbb5d2c":"code","803554d0":"code","19fa95f4":"code","0cd23278":"code","f6ece1ec":"code","7135a851":"code","88e3114c":"code","6471f4b4":"code","497f784d":"code","f42f444f":"code","eb720d24":"code","166625c1":"code","752b83dc":"code","ab8f2960":"code","7d67c000":"code","67475684":"code","9be9cae4":"code","05a4e209":"code","bbaaad51":"code","5f24598a":"code","537f9e1a":"markdown","583fd44e":"markdown","52f674e0":"markdown","dba7b6c8":"markdown","bf81b609":"markdown","d4a1d954":"markdown","305159f6":"markdown","7a6e8b68":"markdown","1ea14a19":"markdown"},"source":{"5bbb5d2c":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\n\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout,BatchNormalization,GlobalAveragePooling2D,UpSampling2D","803554d0":"cifar10 = tf.keras.datasets.cifar100\n(X_train, Y_train), (X_test,Y_test) = cifar10.load_data()","19fa95f4":"plt.figure(figsize=(12,12))\nfor i in range(100):\n  plt.subplot(10,10,1+i)\n  plt.axis('off')\n  plt.imshow(X_train[i],cmap='gray')","0cd23278":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val=train_test_split(X_train, Y_train,test_size=0.2)","f6ece1ec":"from keras.utils.np_utils import to_categorical\ny_train=to_categorical(y_train,num_classes=100)\ny_val=to_categorical(y_val,num_classes=100)\ny_test=to_categorical(Y_test,num_classes=100)","7135a851":"x_train = x_train*1.0\/255\nx_val = x_val*1.0\/255\nX_test = X_test*1.0\/255","88e3114c":"print(x_train.shape,x_val.shape,X_test.shape)\nprint(y_train.shape,y_val.shape,y_test.shape)","6471f4b4":"train_datagen = ImageDataGenerator( \n        rotation_range = 10,  \n        zoom_range = 0.1, \n        width_shift_range = 0.1,  \n        height_shift_range = 0.1,\n        shear_range = 0.1,\n        horizontal_flip = True,  \n        vertical_flip = False\n        )\ntrain_datagen.fit(x_train)","497f784d":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(\n    monitor='val_accuracy', \n    patience=3, \n    verbose=1, \n    factor=0.6, \n    min_lr=1e-6)","f42f444f":"from tensorflow.keras.applications import InceptionV3\ninception_model = InceptionV3(\n    include_top=False,\n    weights='imagenet',\n    input_shape=(224,224,3)\n)\n\nfor layer in inception_model.layers:\n    if isinstance(layer, BatchNormalization):\n        layer.trainable = True\n    else:\n        layer.trainable = False","eb720d24":"inception_model.summary()","166625c1":"model=tf.keras.models.Sequential()\nmodel.add(UpSampling2D(size=(7, 7),interpolation='bilinear'))\nmodel.add(inception_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dropout(.25))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(100, activation='softmax'))\n","752b83dc":"optimizer = tf.keras.optimizers.SGD(learning_rate=1e-3, momentum=0.9)","ab8f2960":"model.compile(\n    optimizer = optimizer,\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","7d67c000":"result=model.fit(\n    train_datagen.flow(x_train, y_train, batch_size = 128),\n    validation_data = (x_val, y_val),\n    epochs = 60,\n    verbose = 1,\n    callbacks = [learning_rate_reduction]\n)\n","67475684":"model.summary()","9be9cae4":"acc = result.history['accuracy']\nval_acc = result.history['val_accuracy']\nloss = result.history['loss']\nval_loss = result.history['val_loss']\n\nplt.figure(figsize=(20, 10))\nplt.subplot(1, 2, 1)\nplt.title(\"Training and Validation Accuracy\")\nplt.plot(acc,color = 'green',label = 'Training Acuracy')\nplt.plot(val_acc,color = 'red',label = 'Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.subplot(1, 2, 2)\nplt.title('Training and Validation Loss')\nplt.plot(loss,color = 'blue',label = 'Training Loss')\nplt.plot(val_loss,color = 'purple',label = 'Validation Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(loc='upper right')\nplt.show()","05a4e209":"y_pred = np.argmax(model.predict(X_test), axis=-1)\ny_true = Y_test.ravel()\nprint(y_pred.shape,y_true.shape)","bbaaad51":"from sklearn.metrics import accuracy_score,confusion_matrix\n\nprint(\"Testing Accuracy: \", accuracy_score(y_true,y_pred))","5f24598a":"cm = confusion_matrix(y_true,y_pred)\ncm","537f9e1a":"# Importing Libraries","583fd44e":"# Importing the Inceptionv3 Model","52f674e0":"# Onehot encoding of the outputs\n","dba7b6c8":"# CIFAR 100 using Transfer Learning (Inceptionv3)","bf81b609":"# Plotting some images","d4a1d954":"# Image Data Augmentation","305159f6":"# Reduce Learning Rate if accuracy is not improving for 3 epochs","7a6e8b68":"# Importing the Cifar 100 Dataset\n","1ea14a19":"# Predictions,Accuracy and Confusion Matrix"}}