{"cell_type":{"aa6765f7":"code","32eaa70e":"code","6981cffc":"code","13b54b75":"code","d37f86fb":"code","5fe1ed9a":"code","966d77fc":"code","fce4f4d1":"code","5f9fdd64":"code","12af2c26":"code","1ca9e510":"code","829d7ec5":"code","7bbcb588":"code","8b995554":"code","22fc5322":"code","570eb935":"code","397a37df":"code","ad81288f":"code","6d276439":"code","c5b3d4e2":"code","e84cd0ec":"code","5aafff53":"code","d64a0ac0":"code","bc00ec85":"code","e84e48e1":"code","ace64c25":"code","70b76e5f":"code","2c59fa03":"code","29109a21":"markdown","358fe16b":"markdown","c9a6567f":"markdown","c403b641":"markdown","da900f16":"markdown","da4de19d":"markdown","245cef08":"markdown","839dd704":"markdown","efc59b7d":"markdown","8d4f7eb0":"markdown","4e92a8f6":"markdown","5fcbe050":"markdown"},"source":{"aa6765f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport missingno as msno\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.offline as py\nimport plotly.graph_objs as go\npd.options.display.max_columns = 999\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nplt.style.use('seaborn-bright')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","32eaa70e":"df = pd.read_csv(\"..\/input\/data.csv\")\ndf.drop(columns='Unnamed: 0', inplace=True)\ndf.head(5)","6981cffc":"columns_to_drop = ['ID', 'Real Face', 'Joined', 'Loaned From', 'Contract Valid Until', 'LS',\n                   'ST', 'RS', 'LW', 'LF', 'CF','RF', 'RW', 'LAM','CAM','RAM', 'LM',\n                   'LCB', 'CB', 'RCB', 'RB', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM',\n                   'CDM', 'RDM', 'RWB', 'LB','Flag', 'Club Logo']\ndf.drop(columns_to_drop, inplace=True, axis=1)\n","13b54b75":"df.head(5)","d37f86fb":"null = df.isnull().sum()\/df.shape[0]\nplt.figure(figsize=(16,12))\nnull.plot.bar()\nplt.title('Missing data in percent', fontsize=20)\nplt.xticks(rotation=60)\nplt.show()","5fe1ed9a":"column_null = null[9:].index\nmsno.matrix(df[column_null])","966d77fc":"df.dropna(inplace=True)","fce4f4d1":"df.isnull().sum()","5f9fdd64":"def dollar_to_number(df_value):\n    try:\n        value = float(df_value[1:-1])\n        dollar = df_value[-1:]\n\n        if dollar == 'M':\n            value = value * 1000000\n        elif dollar == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndef height_to_cm(df_value):\n    try:\n        feet = int(df_value[0])\n        inch = int(df_value[2:])\n        \n        new_value = (feet*30.48)+(inch*2.54)\n    except ValueError:\n        new_value = 0\n    return new_value\n\ndef weight_to_kg(df_value):\n    try:\n        lbs = int(df_value[:-3])\n        \n        new_value = lbs*0.453592\n    except ValueError:\n        new_value = 0\n    return new_value","12af2c26":"df['Value'] = df['Value'].apply(dollar_to_number)\ndf['Release Clause'] = df['Release Clause'].apply(dollar_to_number)\ndf['Wage'] = df['Wage'].apply(dollar_to_number)\ndf['CM'] = df['Height'].apply(height_to_cm)\ndf['KG'] = df['Weight'].apply(weight_to_kg)\n\n#positions = {['ST', 'RW', 'LW', 'CF', 'LF', 'LS', 'RS', 'RF']:'Attacker',\n            #['CAM', 'CM', 'LM', 'RM', 'CDM', 'RCM','LCM', 'LDM', 'RDM', 'LAM', 'RAM']:'Middlefielder',\n             #['LWB', 'RWB', 'CB', 'RB', 'LB', 'LCB', 'RCB']:'Defender'}\ndf['Position_Cat'] = df['Position'].replace(['ST', 'RW', 'LW', 'CF', 'LF', 'LS', 'RS', 'RF'], 'Attacker')\ndf['Position_Cat'] = df['Position_Cat'].replace(['CAM', 'CM', 'LM', 'RM', 'CDM', 'RCM','LCM', 'LDM', 'RDM', 'LAM', 'RAM'], 'Middlefielder')\ndf['Position_Cat'] = df['Position_Cat'].replace(['LWB', 'RWB', 'CB', 'RB', 'LB', 'LCB', 'RCB'], 'Deffender')","1ca9e510":"field_players = df[df['Position'] != 'GK']\nfield_players.drop(columns=['GKDiving','GKHandling', 'GKKicking',\n                            'GKPositioning', 'GKReflexes'], inplace=True)\ngoalkeepers = df[df['Position'] == 'GK']\ncat_columns = df.select_dtypes(include='object')\nnumeric_columns = df.select_dtypes(exclude='object')\nnumeric_columns_field = field_players.select_dtypes(exclude='object')\nnumeric_columns_GK = goalkeepers.select_dtypes(exclude='object')","829d7ec5":"numeric_columns_field_corr = numeric_columns_field.corr()\nnumeric_columns_GK_corr = numeric_columns_GK.corr()\nmask1 = np.zeros_like(numeric_columns_field_corr)\nmask2 = np.zeros_like(numeric_columns_GK_corr)\nmask1[np.triu_indices_from(mask1)] = True\nmask2[np.triu_indices_from(mask2)] = True\nfig = plt.figure(figsize=(15,20))\nax1 = fig.add_subplot(211)\nax1.title.set_text('Field players')\nsns.heatmap(numeric_columns_field_corr, cmap='YlGnBu', annot=True, fmt='.1f', mask=mask1)\nax2 = fig.add_subplot(212)\nax2.title.set_text('Goalkeepers')\nsns.heatmap(numeric_columns_GK_corr, cmap='YlGnBu', annot=True, fmt='.1f', mask=mask2)","7bbcb588":"top_10 = df['Nationality'].value_counts()[:20]\n\nplt.figure(figsize=(16,10))\nsns.barplot(top_10.index, top_10.values)\nplt.xticks(rotation=45)\nplt.title('Most frequent nationality of player')\nplt.show()","8b995554":"plt.figure(figsize=(16,10))\nsns.countplot(x='Preferred Foot', data=df)\nplt.title('Foot preferation')","22fc5322":"fix, (ax1,ax2) = plt.subplots(1, 2, figsize=(16,10))\nsns.barplot(x=df['Work Rate'].value_counts().index, y=df['Work Rate'].value_counts().values, data=df, ax=ax1)\nax1.tick_params(rotation=45)\nax1.title.set_text('Work rate')\nsns.countplot(x='Body Type', data=df, ax=ax2, order=df['Body Type'].value_counts().index)\nax2.tick_params(rotation=45)\nax2.title.set_text('Body Type')","570eb935":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(16,10))\nsns.countplot(x='Position_Cat', data=df, ax=ax1, order=['GK', 'Deffender', 'Middlefielder', 'Attacker'])\nsns.violinplot(x='Position_Cat', y='Overall', data=df, ax=ax2, order=['GK', 'Deffender', 'Middlefielder', 'Attacker'])\nplt.suptitle('Positions')\nax1.set_xlabel('Position category')\nax2.set_xlabel('Position category')\nplt.show()","397a37df":"plt.figure(figsize=(16,10))\nsns.scatterplot(df['KG'], df['CM'], alpha=0.5)\nplt.title('Height vs Weight')\nplt.arrow(110.222856,170, 0, 5, head_width=0.5)\nplt.annotate('A. Akinfenwa', (107, 168), fontsize=12)\nplt.show()","ad81288f":"corr = round(df[['Value', 'Wage']].corr().iloc[1,0], 2)\nplt.figure(figsize=(16,10))\nsns.scatterplot(df['Value']\/1000000, 'Wage', data=df, style='Position_Cat', hue='Preferred Foot', markers=['^','v', 'o','X'], palette='Set1')\nplt.text(x=40,y=500000, s='Correlattion {}'.format(corr), fontsize=15)\nplt.xlabel('Value in milions')\nplt.title('Wage vs Value')\n#plt.xlim(0,150)\n#plt.ylim(0,600000)\nplt.show()","6d276439":"top_10_club = df.groupby(by='Club').mean()['Overall'].sort_values(ascending=False)[:10].index\ndf10 = df[df['Club'].isin(top_10_club)]\nplt.figure(figsize=(16,10))\nsns.boxplot(x='Club', y='Overall', data=df10, order=top_10_club)\nplt.title('Top 10 clubs rating based on overall of players')\nplt.show()","c5b3d4e2":"top_10_value = df.groupby(by='Club').mean()['Value'].sort_values(ascending=False)[:10].index\nvalue10 = df[df['Club'].isin(top_10_value)]\nplt.figure(figsize=(16,10))\nsns.boxplot(x='Club', y=df['Value']\/1000000, data=value10, order=top_10_value)\nplt.title('Top 10 clubs rating based on value of players')\nplt.xticks(rotation=45)\nplt.show()","e84cd0ec":"top_10_sum = df.groupby(by='Club').sum()['Value'].sort_values(ascending=False)[:10]\nplt.figure(figsize=(16,10))\nsns.barplot(top_10_sum.index, top_10_sum.values\/1000000)\nplt.title('Most valuable clubs in milions')\nplt.xticks(rotation=45)\nplt.show()","5aafff53":"plt.figure(figsize=(16,10))\nsns.scatterplot(y='Overall', x='Jersey Number', data=df, hue='Position_Cat', size=df['Wage'])\nplt.arrow(30, 95, -17, 0, head_width=0.85, head_length=0.5, fc='k', ec='k')\nplt.annotate('Number 10 and 7', (31, 94), fontsize=15)\nplt.xticks(np.linspace(0,100,11))\nplt.show()","d64a0ac0":"data_sort = pd.DataFrame()\nbest_features = df[numeric_columns.columns].groupby(df['Position_Cat']).mean()\nfor i, j in zip(range(best_features.shape[0]), best_features.index):\n    best_9 = best_features.iloc[i,:].sort_values(ascending=False)\n    #print(best_9)\n    data_sort[j] = best_9[:15].index\n    \nbest_Attacker = ['SprintSpeed', 'Acceleration', 'Agility', 'Balance', 'ShotPower', 'Jumping']\nbest_GK = ['GKReflexes', 'GKDiving', 'GKPositioning', 'GKHandling', 'GKKicking', 'Reactions']\nbest_Middlefielder = ['Balance', 'Agility', 'Acceleration', 'SprintSpeed', 'Stamina', 'ShortPassing']\nbest_Deffender = ['Strength', 'Jumping', 'Stamina', 'StandingTackle', 'Aggression', 'SlidingTackle']\n\nlabels = [best_Attacker,best_Middlefielder, best_Deffender, best_GK]","bc00ec85":"player_atk = df[df['Position_Cat'] == 'Attacker'][best_Attacker].sample(1)\nplayer_def = df[df['Position_Cat'] == 'Deffender'][best_Deffender].sample(1)\nplayer_gk = df[df['Position_Cat'] == 'GK'][best_GK].sample(1)\nplayer_mid = df[df['Position_Cat'] == 'Middlefielder'][best_Middlefielder].sample(1)\n#\nstats1=player_atk.values.T\nstats2=player_def.values.T\nstats3=player_gk.values.T\nstats4=player_mid.values.T\n#\nangles1=np.linspace(0, 2*np.pi, len(best_Attacker), endpoint=False)\nangles2=np.linspace(0, 2*np.pi, len(best_Deffender), endpoint=False)\nangles3=np.linspace(0, 2*np.pi, len(best_GK), endpoint=False)\nangles4=np.linspace(0, 2*np.pi, len(best_Middlefielder), endpoint=False)\n#\nstats1=np.concatenate((stats1,[stats1[0]]))\nstats2=np.concatenate((stats2,[stats2[0]]))\nstats3=np.concatenate((stats3,[stats3[0]]))\nstats4=np.concatenate((stats4,[stats4[0]]))\n#\nangles1=np.concatenate((angles1,[angles1[0]]))\nangles2=np.concatenate((angles2,[angles2[0]]))\nangles3=np.concatenate((angles3,[angles3[0]]))\nangles4=np.concatenate((angles4,[angles4[0]]))\n#\nplayer = [player_atk, player_mid, player_def, player_gk]\nangles = [angles1, angles2, angles3, angles4]\nstats = [stats1, stats2, stats3, stats4]\n\nfig  = plt.figure(figsize=(15,14))\nfor p, s in zip([0, 1, 2, 3],[1, 2, 3, 4]):\n    ax = fig.add_subplot(2, 2, s, polar=True)\n    ax.plot(angles[p], stats[p], 'o-', linewidth=2, label='Messi')\n    ax.fill(angles[p], stats[p], alpha=0.25)\n    ax.set_thetagrids(angles[p] * 180\/np.pi, labels[p])\n    ax.set_title(df.loc[player[p].index[0]]['Position_Cat'] + ': ' + df.loc[player[p].index[0]]['Name']\n                 + '\\n Nationality: ' + df.loc[player[p].index[0]]['Nationality']\n                 + '\\n Overall: ' + np.str(df.loc[player[p].index[0]]['Overall'])\n                )\n    fig.suptitle('Random players for each position', fontsize=16)","e84e48e1":"def scatter_3d(x, y, z):\n    \"\"\"Choose X, Y, Z.\"\"\"\n    trace1 = go.Scatter3d(\n        x=x,\n        y=y,\n        z=z,\n        mode='markers',\n        marker=dict(\n            size=12,\n            color=z,                \n            colorscale='Viridis',  \n            opacity=0.8\n\n        ),text=df['Name']\n    )\n\n    data = [trace1]\n    layout = go.Layout(\n        scene=dict(\n        xaxis=dict(\n            title=x.name),\n        yaxis=dict(\n            title=y.name),\n        zaxis=dict(\n            title=z.name)),\n        margin=dict(\n            l=0,\n            r=0,\n            b=0,\n            t=0\n        )\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig, filename='3d-scatter-colorscale')","ace64c25":"scatter_3d(df['Value'], df['Wage'], df['Overall'])","70b76e5f":"def find_player(c, player):\n    sc = StandardScaler()\n    pos = df[df['Name'] == player]['Position_Cat'].values[0]\n    base_data = df[df['Position_Cat'] == pos].reset_index(drop=True)\n    base_scales = sc.fit_transform(base_data[col_to_cluster])\n    base = pd.DataFrame(columns=col_to_cluster, data=base_scales)\n    \n    kmeans = KMeans(n_clusters=c, random_state=1)\n    k = kmeans.fit_predict(base[col_to_cluster])\n    pred = pd.concat([base_data[col_to_cluster], base_data['Name'], base_data['Overall'],\n                      pd.Series(k).rename('Cluster')], axis=1)\n    pred['Cluster'] = pred['Cluster'].astype('category')\n    \n    player_predict = pred[pred['Name'] == player]['Cluster']\n    \n    top_5_similar = pred[pred['Cluster'] == player_predict.values[0]]\n    top_5_similar = top_5_similar.sort_values(by='Overall', ascending=False)\n    \n    print(top_5_similar[:5])\n    \n    fig, ax = plt.subplots(figsize=(16,10))\n    x = np.array(pred[col_to_cluster[0]])\n    y = np.array(pred[col_to_cluster[1]])\n    cluster = np.array(pred['Cluster'])\n    for g in np.unique(cluster):\n        i = np.where(cluster == g)\n        ax.scatter(x[i], y[i], label=g)\n        \n    ax.legend()\n    plt.xlabel(col_to_cluster[0])\n    plt.ylabel(col_to_cluster[1])\n    plt.show()\n    \n    return pred\n    \n    \n","2c59fa03":"col_to_cluster = ['Stamina', 'Strength']\n\npred = find_player(5, 'L. Messi')","29109a21":"**Basic statistics**","358fe16b":"**Effect of jersey number**","c9a6567f":"**3D Scatter**","c403b641":"Variables in which occurs missing data are often specific rows which has most of the data missing. That's why I'm going to drop these rows.","da900f16":"**Radar graphs**","da4de19d":"**Quick look**","245cef08":"**Correlations heatmaps for field players and goalkeepers**","839dd704":"**Countries with most players**","efc59b7d":"**Top 10 clubs**","8d4f7eb0":"**Missing data**","4e92a8f6":"**Finding similar player**","5fcbe050":"**Feature enginnering need for visualization**"}}