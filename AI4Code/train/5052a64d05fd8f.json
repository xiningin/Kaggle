{"cell_type":{"25a265c4":"code","04136b51":"code","68d8f9f1":"code","482ffdfa":"code","0d4c1198":"code","f99594a5":"code","ab9fa177":"code","301780f5":"code","abaca0a5":"code","2078c6a0":"markdown","5be261f8":"markdown","3707ff5f":"markdown","e95a8488":"markdown"},"source":{"25a265c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04136b51":"import matplotlib.pyplot as plt\n\nimport math\n\npx = [0.025,3.866,11.7,7.006,16.457,3.482,14.21,6.08,1.828,2.946,19.771,2.382,0.178,10.633,12.035,3.325,9.016,1.141,15.666,10.398]\npy = [11.272,16.175,9.597,17.919,14.932,17.179,10.271,0.3,7.289,3.318,8.914,0.093,7.558,11.424,12.143,13.261,7.042,12.154,16.052,6.039]\nqx = [2.045,1.292,11.482,2.277,11.071,0.31,12.78,14.086,6.136,9.736,17.67,11.618,4.78,9.436,9.918,2.97,11.392,2.21,9.72,13.078]\nqy = [17.985,24.168,25.06,27.622,32.196,24.606,27.311,14.512,16.446,14.429,30.285,11.751,15.468,25.596,27.097,21.726,21.355,19.398,32.428,21.623]\n\n#Fine Centroid\ncen_px = sum(px)\/len(px)\ncen_py = sum(py)\/len(py)\ncen_qx = sum(qx)\/len(qx)\ncen_qy = sum(qy)\/len(qy)\n\nprint(\"Centroid P : ({0},{1})\".format(cen_px,cen_py))\nplt.scatter(px, py, color='blue', alpha=1)\nplt.scatter(cen_px,cen_py,marker='*',color='red',s=100)\nplt.show()\n\nprint(\"Centroid Q : ({0},{1})\".format(cen_qx,cen_qy))\nplt.scatter(qx, qy, color='green', alpha=1)\nplt.scatter(cen_qx,cen_qy,marker='*',color='orange',s=100)\nplt.show()","68d8f9f1":"plt.scatter(px, py, color='blue', alpha=1)\nplt.scatter(cen_px,cen_py,marker='*',color='red',s=100)\nplt.scatter(qx, qy, color='green', alpha=1)\nplt.scatter(cen_qx,cen_qy,marker='*',color='orange',s=100)\nplt.show()","482ffdfa":"lenght = len(px)\n\ntranpx = []\ntranpy = []\ntranqx = []\ntranqy = []\n\n# print(lenght)\nfor i in range(lenght):\n    tranpx.append(px[i] - cen_px)\n    tranpy.append(py[i] - cen_py)\n    tranqx.append(qx[i] - cen_qx)\n    tranqy.append(qy[i] - cen_qy)\n\ntrancen_px = sum(tranpx)\/len(tranpx)\ntrancen_py = sum(tranpy)\/len(tranpy)\ntrancen_qx = sum(tranqx)\/len(tranqx)\ntrancen_qy = sum(tranqy)\/len(tranqy)\n# print(\"Centroid P : ({0},{1})\".format(trancen_px,trancen_py))\n# print(\"Centroid Q : ({0},{1})\".format(trancen_qx,trancen_qy))\n\nplt.scatter(tranpx, tranpy, color='blue',marker='x',alpha=1)\nplt.scatter(trancen_px,trancen_py,marker='*',color='red',s=100)\nplt.show()\n\nplt.scatter(tranqx, tranqy, color='green', alpha=1)\nplt.scatter(trancen_qx,trancen_qy,marker='*',color='orange',s=100)\nplt.show()","0d4c1198":"plt.scatter(tranpx, tranpy, color='blue',alpha=1)\nplt.scatter(trancen_px,trancen_py,marker='*',color='red',s=100)\nplt.scatter(tranqx, tranqy, color='green',marker='x', alpha=1)\nplt.scatter(trancen_qx,trancen_qy,marker='*',color='orange',s=100)\nplt.show()","f99594a5":"#Rotate function\ndef rotate(px, py,qx,qy, angle):\n    #origin\n    ox = px \n    oy = py\n    #target\n    tx = qx\n    ty = qy\n    #rotate\n    rx = ox + math.cos(angle) * (tx - ox) - math.sin(angle) * (ty - oy)\n    ry = oy + math.sin(angle) * (tx - ox) + math.cos(angle) * (ty - oy)\n    return rx, ry\n","ab9fa177":"# rotatepx = []\n# rotatepy = []\n# rotateqx = []\n# rotateqy = []\n\n# for i in range(lenght):\n    \n#     rx,ry = rotate(tranpx[i],tranpy[i],tranqx[i],tranqy[i], math.radians(0))\n#     rotatepx.append(rx)\n#     rotatepy.append(ry)\n    \n\n# plt.scatter(rotatepx, rotatepy, color='blue',alpha=1,s=20)\n# plt.scatter(trancen_px,trancen_py,marker='*',color='red',s=100)\n\n# plt.scatter(tranqx, tranqy, color='green',marker='x', alpha=1)\n# plt.scatter(trancen_qx,trancen_qy,marker='*',color='orange',s=100)\n# plt.show()\n","301780f5":"\nnewpx = []\nnewpy = []\n\n\nfor i in range(lenght):\n    \n    rx,ry = rotate(px[i],py[i],qx[i],qy[i], math.radians(0))\n    newpx.append(rx)\n    newpy.append(ry)\n    \nprint('px : {}'.format(px))\nprint('py : {}'.format(py))\nprint('newpx : {}'.format(newpx))\nprint('newpy : {}'.format(newpy))\nprint('qx : {}'.format(qx))\nprint('qy : {}'.format(qy))\n\nplt.title (\"dataset\")\nplt.scatter(px, py, color='blue', alpha=1)\nplt.scatter(qx, qy, color='orange', alpha=1)\nplt.show()\n\nplt.title (\"translation parameter\")\n# plt.scatter(px, py, color='blue', alpha=1,s=20)\nplt.scatter(newpx, newpy, color='blue', alpha=1)\nplt.scatter(qx, qy,color='orange',marker='x', alpha=1)\nplt.show()\n","abaca0a5":"def error (px,py,qx,qy):\n    \n    err_x = []\n    err_y = []\n    for i in range(len(px)):\n        err_x.append((px[i]\/qx[i]))\n        err_y.append((py[i]\/qy[i]))\n\n    avgerr_x = 1.0-sum(err_x)\/len(err_x)\n    avgerr_y = 1.0-sum(err_y)\/len(err_y)\n    return avgerr_x,avgerr_y\nprint(\"Error : {}\".format(error(newpx,newpy,qx,qy)))\n     ","2078c6a0":"##  \u0e22\u0e49\u0e32\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e0a\u0e38\u0e14\u0e43\u0e2b\u0e49 centroid \u0e21\u0e32\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48 (0,0)\n\u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49\u0e41\u0e15\u0e48\u0e25\u0e30\u0e08\u0e38\u0e14 \u0e25\u0e1a\u0e01\u0e31\u0e1a\u0e04\u0e48\u0e32 centroid \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07","5be261f8":"## \u0e2b\u0e32 rotation parameter \u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21","3707ff5f":"## \u0e2b\u0e32 Centroid","e95a8488":"## \u0e2b\u0e32\u0e04\u0e48\u0e32 Error\n"}}