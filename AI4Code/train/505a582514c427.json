{"cell_type":{"3492d020":"code","8599bd45":"code","3f7b3499":"code","593ec3bb":"code","114a78d8":"code","f7f9966d":"code","a4c55a85":"code","e8bcb3b6":"code","089c6418":"code","149a657c":"code","cfd6c687":"code","27581982":"code","a58545be":"code","dcd0cd56":"code","258d5b11":"code","f884d4ea":"code","db608cd6":"code","3be42deb":"code","f651ed9b":"markdown","25dfa579":"markdown","68ef2568":"markdown","e2c7d896":"markdown","2775d895":"markdown","045f7e4d":"markdown"},"source":{"3492d020":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8599bd45":"train = pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')\ntest = pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv')","3f7b3499":"pd.options.display.max_columns = None","593ec3bb":"train.head()","114a78d8":"train.info()","f7f9966d":"train.isnull().sum(), test.isnull().sum()","a4c55a85":"# Impute: winPlacePerc\ntrain['winPlacePerc'] = train['winPlacePerc'].fillna(train['winPlacePerc'].mean())\n# test['winPlacePerc'] => 'winPlacePerc'\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u306e\u3067\u306a\u3057","e8bcb3b6":"# Index\ntrain = train.set_index('Id')\ntest = test.set_index('Id')","089c6418":"# Drop: groupId, matchId\ncols_to_drop = ['groupId', 'matchId']\ntrain = train.drop(cols_to_drop, axis=1)\ntest = test.drop(cols_to_drop, axis=1)","149a657c":"# Encode: matchType\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ntrain['matchType'] = label_encoder.fit_transform(train['matchType'])\ntest['matchType'] = label_encoder.transform(test['matchType'])","cfd6c687":"train.head()","27581982":"test.head()","a58545be":"# Train-Test Split\nfrom sklearn.model_selection import train_test_split\n\nX = train.drop('winPlacePerc', axis=1)\ny = train['winPlacePerc']\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)","dcd0cd56":"# Model\nfrom lightgbm import LGBMRegressor\nlgbm = LGBMRegressor()","258d5b11":"# Fit\nlgbm.fit(X_train, y_train)","f884d4ea":"# Predict, Evaluate\nfrom sklearn.metrics import mean_absolute_error\nmean_absolute_error(lgbm.predict(X_valid), y_valid)","db608cd6":"# Predict\npredictions = lgbm.predict(test)\npredictions","3be42deb":"# Submit\nsubmissions = pd.DataFrame({\n    'Id': test.index,\n    'winPlacePerc': predictions\n})\nsubmissions.to_csv('submission.csv', index=False)","f651ed9b":"# Import datasets","25dfa579":"# Submit","68ef2568":"# Preprocessing","e2c7d896":"# Modeling","2775d895":"# Workflow\n1. Import datasets\n1. EDA\n1. Preprocessing\n1. Modeling\n1. Submit","045f7e4d":"# EDA"}}