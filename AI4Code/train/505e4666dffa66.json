{"cell_type":{"3778b719":"code","5818a230":"code","7e41105a":"code","5083e3fd":"code","d8eb73a8":"code","df805a7f":"code","e846a81b":"code","312d5764":"code","18f9bc84":"code","7abcb80c":"code","b555a804":"code","ea57c266":"code","11b6ca60":"code","da9c272d":"markdown","9585cd58":"markdown","26ebe33a":"markdown","1dcd64bb":"markdown","017c8345":"markdown"},"source":{"3778b719":"# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications import EfficientNetB4, EfficientNetB7, InceptionV3, InceptionResNetV2, DenseNet201\nfrom tensorflow.keras.applications.densenet import preprocess_input\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Input\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline","5818a230":"# Alguns par\u00e2metros para leitura do dataset\nim_shape = (299,299)\n\nTRAINING_DIR = '..\/input\/amazon-fruits-small\/ds_frutas_am\/train'\nTEST_DIR = '..\/input\/amazon-fruits-small\/ds_frutas_am\/test'\n\nseed = 10\n\nBATCH_SIZE = 16","7e41105a":"#Using keras ImageGenerator and flow_from_directoty\n\n# Image dataset without augmentation\n#data_generator = ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.2)\n# With augmentation\ndata_generator = ImageDataGenerator(\n        validation_split=0.2,\n        rotation_range=20,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        preprocessing_function=preprocess_input,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest')\nval_data_generator = ImageDataGenerator(preprocessing_function=preprocess_input,validation_split=0.2)","5083e3fd":"\n# Generator para parte train\ntrain_generator = data_generator.flow_from_directory(TRAINING_DIR, target_size=im_shape, shuffle=True, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")\n# Generator para parte valida\u00e7\u00e3o\nvalidation_generator = val_data_generator.flow_from_directory(TRAINING_DIR, target_size=im_shape, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"validation\")\n\n# Generator para dataset de teste\ntest_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_generator = test_generator.flow_from_directory(TEST_DIR, target_size=im_shape, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE)\n\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples\nnb_test_samples = test_generator.samples\nclasses = list(train_generator.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","d8eb73a8":"# Visualizando alguns exemplos do dataset por meio do Generator criado\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    #gera subfigures\n    plt.subplot(330 + 1 + i)\n    batch = train_generator.next()[0]*255\n    image = batch[0].astype('uint8')\n    plt.imshow(image)\nplt.show()","df805a7f":"base_model = DenseNet201(weights='imagenet', include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = Flatten()(x)\nx = Dense(100, activation='relu')(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam()\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","e846a81b":"epochs = 80\n\n# Saving the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE)","312d5764":"#Vamos ver como foi o treino?\nimport matplotlib.pyplot as plt\n\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","18f9bc84":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","7abcb80c":"# Using the validation dataset\nscore = model.evaluate_generator(validation_generator)\nprint('Val loss:', score[0])\nprint('Val accuracy:', score[1])\n\n# EfficientNetB4:\n# Val loss: 0.005038644652813673\n# Val accuracy: 1.0\n\n# EfficientNetB7\n# Val loss: 0.42408379912376404\n# Val accuracy: 0.8333333134651184\n\n# InceptionV3:\n# Val loss: 0.6152629852294922\n# Val accuracy: 0.7777777910232544\n\n# InceptionResNetV2:\n# Val loss: 0.6003723740577698\n# Val accuracy: 0.8333333134651184\n\n# DenseNet201\n# Val loss: 0.4191788136959076\n# Val accuracy: 0.8333333134651184","b555a804":"# Using the test dataset\nscore = model.evaluate_generator(test_generator)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\n# EfficientNetB4:\n# Test loss: 0.22749367356300354\n# Test accuracy: 0.8666666746139526\n\n# EfficientNetB7:\n# Test loss: 0.5978226065635681\n# Test accuracy: 0.8666666746139526\n\n# InceptionV3:\n# Test loss: 0.961193323135376\n# Test accuracy: 0.7666666507720947\n\n# InceptionResNetV2:\n# Test loss: 0.33447590470314026\n# Test accuracy: 0.8999999761581421\n\n# DenseNet201\n# Test loss: 0.08695536106824875\n# Test accuracy: 1.0","ea57c266":"import itertools\n\n#Plot the confusion matrix. Set Normalize = True\/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","11b6ca60":"# Some reports\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n#Confution Matrix and Classification Report\nY_pred = model.predict_generator(test_generator)#, nb_test_samples \/\/ BATCH_SIZE, workers=1)\ny_pred = np.argmax(Y_pred, axis=1)\ntarget_names = classes\n\n#Confution Matrix\ncm = confusion_matrix(test_generator.classes, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\nprint('Classification Report')\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))","da9c272d":"# Imports de Libs","9585cd58":"This is a simple example using Transfer Learning for an image recognition problem.","26ebe33a":"# Transfer Learning from a Deep Model","1dcd64bb":"# Lendo o dataset","017c8345":"### Metodologia\nRealizei a experi\u00eancia com o mesmo tratamento inicial do dataset (***augmentation***) e com mesmas configura\u00e7\u00f5es finais do modelo (camada ***flaten*** + camada ***dense*** de 100 neur\u00f4nios) dadas no exemplo. Foram experimentadas as seguintes arquiteturas cl\u00e1ssicas: ***EfficientNetB4***, ***EfficientNetB7***, ***InceptionV3***, ***InceptionResNetV2***, ***DenseNet201***. A ideia era buscar o 100% de acur\u00e1cia, primeiro testando essas arquiteturas sem mudar a configura\u00e7\u00e3o dada no exemplo e depois partir para as tentivas de modifica\u00e7\u00f5es no *data augmentation* e na camada de classifica\u00e7\u00e3o.\n\n### Resultado\nFoi obtido o seguinte resultado na valida\u00e7\u00e3o dos modelos com os dados de teste:\n\n**EfficientNetB4:**<\/br>\nTest loss: 0.22749367356300354<\/br>\nTest accuracy: 0.8666666746139526<\/br>\n\n**EfficientNetB7:**<\/br>\nTest loss: 0.5978226065635681<\/br>\nTest accuracy: 0.8666666746139526\n\n**InceptionV3:**<\/br>\nTest loss: 0.961193323135376<\/br>\nTest accuracy: 0.7666666507720947\n\n**InceptionResNetV2:**<\/br>\nTest loss: 0.33447590470314026<\/br>\nTest accuracy: 0.8999999761581421<\/br>\n\n**DenseNet201:**<\/br>\nTest loss: 0.08695536106824875<\/br>\nTest accuracy: 1.0<\/br>\n\nAntes de partir para as modifica\u00e7\u00f5es da configura\u00e7\u00e3o inicial dada no exemplo, o modelo usando a arquitetura *DenseNet201* conseguiu obter 100% de acur\u00e1cia para os dados de teste."}}