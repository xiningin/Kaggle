{"cell_type":{"15d54456":"code","fba3c7ad":"code","9777098c":"code","1dbec8bd":"code","074e1033":"code","e3407301":"code","66c13b54":"code","a01076d1":"code","4b1584b5":"code","bd410d73":"markdown","a1b0a989":"markdown","eacf9460":"markdown","2de16d8d":"markdown","e8825d06":"markdown"},"source":{"15d54456":"import os\nprint(os.listdir('..\/input'))\nprint(os.listdir('..\/input\/digit-recognizer'))","fba3c7ad":"import pandas as pd\ntrain_set = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_set","9777098c":"y = train_set['label']\ny","1dbec8bd":"X = train_set.drop('label', axis=1, inplace=True)\nX = train_set\nX","074e1033":"y = pd.get_dummies(y)\ny","e3407301":"#The first hidden layer will have 600 neurons, second: 400, third: 200, fourth: 10.\n#from tensorflow.keras import Sequential\n#from tensorflow.keras.layers import Dense\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nclassifier = Sequential()\n\n#Now addindg the hidden layers:\nclassifier.add(Dense(units=600, kernel_initializer='uniform', activation='relu', input_dim=784))\nclassifier.add(Dense(units=400, kernel_initializer='uniform', activation='relu'))\nclassifier.add(Dense(units=200, kernel_initializer='uniform', activation='relu'))\nclassifier.add(Dense(units=10, kernel_initializer='uniform', activation='sigmoid'))","66c13b54":"classifier.compile(optimizer='sgd', loss='mean_squared_error', metrics=['accuracy'])","a01076d1":"classifier.fit(X, y, batch_size=10, epochs=10)","4b1584b5":"X_test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ny_pred = classifier.predict(X_test)\ny_pred","bd410d73":"### Now that we have our data in X and y, we can start with our neural network. Let\u2019s create four hidden layers, one input layer, and one output layer using Keras.","a1b0a989":"Exercices from the book: Practical Machine Learning and Image Processing (Himanshu Singh)","eacf9460":"### Now training","2de16d8d":"### Now predicting on the Test Set:","e8825d06":"### Now minimizing the loss with the \"Stochastic Gradient Descent\" `sgd` Algorithm"}}