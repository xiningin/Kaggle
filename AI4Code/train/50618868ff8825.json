{"cell_type":{"dea30b5b":"code","d47dd102":"code","d8fec470":"code","dbbbf7d0":"code","2bd9b903":"code","d8f74691":"code","eb959e7a":"code","65fdd84e":"code","55981b69":"code","6d685799":"code","3b30f029":"code","e380aa07":"code","f49a5569":"code","3c8f8908":"code","b39e8bc7":"markdown","6e4782b9":"markdown","8cbf4ec7":"markdown"},"source":{"dea30b5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d47dd102":"import torch\nimport torch.nn as nn\n\nimport nltk\nimport numpy as np\nimport pandas as pd\nnltk.download('punkt')\nfrom nltk.stem.porter import PorterStemmer\n\nimport json,urllib\nfrom torch.utils.data import Dataset, DataLoader\n\nimport random","d8fec470":"class NeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, num_classes):\n        super(NeuralNet, self).__init__()\n        self.l1 = nn.Linear(input_size, hidden_size)\n        self.l2 = nn.Linear(hidden_size, hidden_size)\n        self.l3 = nn.Linear(hidden_size, num_classes)\n        self.relu = nn.ReLU()\n    \n    def forward(self, x):\n        out = self.l1(x)\n        out = self.relu(out)\n        out = self.l2(out)\n        out = self.relu(out)\n        out = self.l3(out)\n        # no activation and no softmax\n        return out\n","dbbbf7d0":"class NeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, num_classes):\n        super(NeuralNet, self).__init__()\n        self.l1 = nn.Linear(input_size, hidden_size)\n        self.l2 = nn.Linear(hidden_size, hidden_size)\n        self.l3 = nn.Linear(hidden_size, num_classes)\n        self.relu = nn.ReLU()\n    \n    def forward(self, x):\n        out = self.l1(x)\n        out = self.relu(out)\n        out = self.l2(out)\n        out = self.relu(out)\n        out = self.l3(out)\n        # no activation and no softmax\n        return out\n","2bd9b903":"stemmer = PorterStemmer()\n\ndef tokenize(sentence):\n    return nltk.word_tokenize(sentence)\n\ndef stem(word):\n    return stemmer.stem(word.lower())\n\ndef bag_of_words(tokenized_sentence, all_words):\n    \"\"\"\n    sentence = [\"hello, \"how\", \"are\", \"you\"]\n    words = [\"hi\", \"hello\", \"I\", \"you\", \"bye\", \"thank\", \"cool\"]\n    bag =   [0,     1,       0,   1,    0,      0,       0 ]\n    \"\"\"\n    tokenized_sentence = [stem(w) for w in tokenized_sentence]\n    \n    bag = np.zeros(len(all_words), dtype = np.float32)\n    for idx, w in enumerate(all_words):\n        if w in tokenized_sentence:\n            bag[idx] = 1.0\n    return bag\n","d8f74691":"url = '\/kaggle\/input\/chatbot-dataset\/intents.json'","eb959e7a":"with open(url, 'r') as f:\n    intents = json.load(f)\n\n\nall_words = []\ntags = []\nxy = []\nfor intent in intents['intents']:\n    tag = intent['tag']\n    tags.append(tag)\n    for pattern in intent['patterns']:\n        w = tokenize(pattern)\n        all_words.extend(w)\n        xy.append((w, tag))\n\nignore_words = ['?','!','.',',']\nall_words = [stem(w) for w in all_words if w not in ignore_words]\nall_words = sorted(set(all_words))\ntags  = sorted(set(tags))\n\nX_train  = []\ny_train = []\nfor (pattern_sentence, tag) in xy:\n    bag = bag_of_words(pattern_sentence, all_words)\n    X_train.append(bag)\n    \n    label = tags.index(tag)\n    y_train.append(label) # CrossEntropyLoss\n\nX_train = np.array(X_train)\ny_train = np.array(y_train)\n\nclass ChatDataset(Dataset):\n    def __init__(self):\n        self.n_samples = len(X_train)\n        self.x_data = X_train\n        self.y_data = y_train\n        \n    # dataset[idx]\n    def __getitem__(self, index):\n        return self.x_data[index], self.y_data[index]\n\n    def __len__(self):\n        return self.n_samples\n\n# Hyper paramters\nbatch_size = 8\nhidden_size = 8\noutput_size = len(tags)\ninput_size = len(X_train[0])\nlearning_rate = 0.001\nnum_epochs = 1000\n\n\ndataset = ChatDataset()\ntrain_loader = DataLoader(dataset = dataset, batch_size = batch_size,\n                        shuffle =True, num_workers=2)\n\ndevice  = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nmodel = NeuralNet(input_size, hidden_size, output_size)\n\n# loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n\nfor epoch in range(num_epochs):\n    for (words, labels) in train_loader:\n        words = words.to(device)\n        labels = labels.to(device)\n\n        # Forward\n        outputs = model(words)\n        loss = criterion(outputs, labels)\n\n        # backward and optimizer step\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n    if (epoch +1) % 100 == 0:\n        # f'epoch {epoch+1}\/{num_epochs}, loss={loss.item():.4f}'\n        print(\"epoch {}\/{}, loss={:.4f}.\".format(epoch+1,num_epochs,loss.item()))\n\n# print(f'Final loss, loss={loss.item():.4f}')\nprint(\"Final Loss, loss{:.4f}\".format(loss.item()))","65fdd84e":"data = {\n    \"model_state\":model.state_dict(),\n    \"input_size\":input_size,\n    \"output_size\":output_size,\n    \"hiddent_size\": hidden_size,\n    \"all_words\":all_words,\n    \"tags\": tags\n}\nFILE = \"data.pth\"\ntorch.save(data, FILE)\n\nprint(\"Traning complete. file saved to\",FILE)","55981b69":"device  = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(device)\n\nwith open(url,'r') as f:\n  intents = json.load(f) \n\n\nFILE = \"data.pth\"\ndata = torch.load(FILE)\n\ninput_size = data['input_size']\nhidden_size = data['hiddent_size']\noutput_size = data['output_size']\nall_words = data['all_words']\ntags = data['tags']\nmodel_state = data['model_state']\n\nmodel = NeuralNet(input_size, hidden_size, output_size).to(device)\nmodel.load_state_dict(model_state)\nmodel.eval()","6d685799":"df = pd.read_csv(\"..\/input\/all-india-pincode-directory-with-contact-details\/all_india_PO_list_without_APS_offices_ver2_lat_long.csv\")","3b30f029":"df.columns","e380aa07":"df = df[['officename','pincode']]\ndf.head()","f49a5569":"def callme():\n  po = {v: k for v, k in enumerate(pf)}\n  print(\"Taru: Select your near Post Office \\n \")\n\n  for i,j in po.items():\n    print(i,j)\n\n  sel = int(input(\"\\n Enter Number\"))\n  print(\"\\n Taru: You selected {} Post office. \\n\".format(po[sel]))\n\n  sen = input(\"Taru: Enter another query \\n You: \")\n  return sen","3c8f8908":"bot_name = \"Taru\"\n\nprint(\"Namste !!! We are working everywhere in Pan-india. Just drop you delivery location pincode\/postal code to check delivery availability or ask us at Whatsapp Helpline 1234567890.\")\nwhile True:\n  sentence = input('You: ')\n\n  for word in sentence.split():\n    if word.isdigit():\n      word = int(word)\n      pf = list(df['Office Name'][df['Pincode'] == word ])\n      if len(pf) == 0:\n        print(\"Sorry to inform you, We don't deliver here :(\")\n        break\n      sentence = callme()\n      # sentence = input('You: ')\n    \n    # else:\n      # print(\"Please Enter Pincode !!!\")\n\n  if sentence =='quit':\n    break\n  \n  sentence = tokenize(sentence)\n  X = bag_of_words(sentence, all_words)\n  X = X.reshape(1, X.shape[0])\n  X = torch.from_numpy(X)\n\n  output = model(X)\n  _, predicted = torch.max(output, dim=1)\n  tag = tags[predicted.item()]\n\n  probs = torch.softmax(output, dim=1)\n  prob = probs[0][predicted.item()]\n\n\n  if prob.item() >0.75:\n    for intent in intents[\"intents\"]:\n      if tag == intent[\"tag\"]:\n        print(bot_name, \":\",random.choice(intent['responses']))\n        # print(\"{}:{}\".format(bot_name,random.choice(intent['responses'])))\n      \n  else:\n    print(\"{} I do not understand...contact on WhatsApp 1234567890\".format(bot_name))","b39e8bc7":"# ChatBot Using PyTorch\n\n<img src='https:\/\/github.com\/taruntiwarihp\/raw_images\/blob\/master\/download.png?raw=true'>\n\nA chatbot is a software application used to conduct an on-line chat conversation via text or text-to-speech, in lieu of providing direct contact with a live human agent. A chatbot is a type of software that can automate conversations and interact with people through messaging platforms.","6e4782b9":"* Add This dataset from [here](https:\/\/www.kaggle.com\/taruntiwarihp\/all-india-pincode-directory-with-contact-details)","8cbf4ec7":"####  Enter Some Query in input to check chatbot work and chatbot will randomly answer your question.\n\n\n1. Hello, Hi, Whats up\n2. See you later, cya\n3. name, what is you name\n4. Tell me joke\n5. Do you take credit card, do you accept cash\n6. What's item do you have, What on the menu\n7. When you guys are open, What are opening time\n8. What is my order status, can you track my order\n9. I want to cancel my order, can you cancel my order\n10. Thanks\n"}}