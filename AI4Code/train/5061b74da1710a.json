{"cell_type":{"6a537811":"code","5b82220f":"code","7c7edcfc":"code","6583df30":"code","74404977":"code","ba0d1d16":"code","7a7799df":"code","d854c8b7":"markdown","ce32d738":"markdown"},"source":{"6a537811":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","5b82220f":"meta_train = pd.read_csv('..\/input\/training_set_metadata.csv')\ntrain = pd.read_csv('..\/input\/training_set.csv')","7c7edcfc":"for ix in range(2):\n    fig, axes = plt.subplots(2, 6,figsize=(15,10))\n    for i, t in enumerate([42,90]):\n        for pb in train.passband.unique():\n            oid = meta_train[meta_train.target==t].object_id.values[ix]\n            a = train[(train.passband==pb)&(train.object_id==oid)]\n            x = a.groupby(['object_id','passband'])['mjd','flux'].diff().fillna(0)\n            x['object_id'] = a.object_id\n            x = x.groupby(['object_id'])['mjd','flux'].cumsum().fillna(0)\n            x['object_id'] = a.object_id\n            x['detected'] = a.detected\n            axes[i, pb].scatter(x.mjd,x.flux,s=1)","6583df30":"for ix in range(2):\n    fig, axes = plt.subplots(2, 6,figsize=(15,10))\n\n    for i, t in enumerate([88,92]):\n        for pb in train.passband.unique():\n            oid = meta_train[meta_train.target==t].object_id.values[ix]\n            a = train[(train.passband==pb)&(train.object_id==oid)]\n            x = a.groupby(['object_id','passband'])['mjd','flux'].diff().fillna(0)\n            x['object_id'] = a.object_id\n            x = x.groupby(['object_id'])['mjd','flux'].cumsum().fillna(0)\n            x['object_id'] = a.object_id\n            x['detected'] = a.detected\n            axes[i, pb].scatter(x.mjd,x.flux,s=1)","74404977":"from astropy.stats import LombScargle","ba0d1d16":"for ix in range(2):\n    fig, axes = plt.subplots(2, 6,figsize=(15,10))\n    for i, t in enumerate([42,90]):\n        for pb in train.passband.unique():\n            oid = meta_train[meta_train.target==t].object_id.values[ix]\n            a = train[(train.passband==pb)&(train.object_id==oid)]\n            x = a.groupby(['object_id','passband'])['mjd','flux'].diff().fillna(0)\n            x['object_id'] = a.object_id\n            x = x.groupby(['object_id'])['mjd','flux'].cumsum().fillna(0)\n            x['object_id'] = a.object_id\n            x['detected'] = a.detected\n            frequency, power = LombScargle(x.mjd,x.flux).autopower(nyquist_factor=2)\n            axes[i, pb].scatter(frequency,power,s=1)","7a7799df":"for ix in range(2):\n    fig, axes = plt.subplots(2, 6,figsize=(15,10))\n    for i, t in enumerate([88,92]):\n        for pb in train.passband.unique():\n            oid = meta_train[meta_train.target==t].object_id.values[ix]\n            a = train[(train.passband==pb)&(train.object_id==oid)]\n            x = a.groupby(['object_id','passband'])['mjd','flux'].diff().fillna(0)\n            x['object_id'] = a.object_id\n            x = x.groupby(['object_id'])['mjd','flux'].cumsum().fillna(0)\n            x['object_id'] = a.object_id\n            x['detected'] = a.detected\n            frequency, power = LombScargle(x.mjd,x.flux).autopower(nyquist_factor=2)\n            axes[i, pb].scatter(frequency,power,s=1)","d854c8b7":"Now let us do some Lomb Scargle","ce32d738":"The saga continues with trying to differentiate the classes.  We know that distinguishing between 88,92 is easy where 42,90 is hard for most models"}}