{"cell_type":{"7dceb854":"code","5b5ee340":"code","0eedea74":"code","58e8e097":"code","48307244":"code","26295b17":"code","7e03904c":"code","eff47871":"code","5f0cbc3e":"code","9bc0bb10":"code","4b434fde":"code","133c5eb3":"code","4523e1cb":"code","837d475a":"code","d7412571":"code","6b52cafa":"code","147c235c":"code","abd986a6":"code","66a3592a":"code","ed57df6f":"code","00281351":"code","cce1824a":"code","32337132":"code","05cef49e":"code","64ad51c5":"code","d4b641e8":"code","d4e64b60":"code","647d97b4":"code","2f04a07a":"code","8a0c15ad":"code","7910ba9a":"code","2697edbc":"code","8157f89e":"code","bf1e93e8":"code","d57b6870":"code","70e3d66a":"code","8c073257":"code","964c7f3d":"code","0d0bf4d3":"code","228e1426":"code","781b4bd4":"code","6af1e3c4":"code","0409d47c":"code","18521358":"code","1a0cd801":"code","63e23acd":"code","6a5b2d06":"code","9b95a749":"code","7d1d6273":"markdown","6fd1cd43":"markdown","ded06479":"markdown","957cafd6":"markdown","80a4b6b6":"markdown","a01dfbc6":"markdown"},"source":{"7dceb854":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","5b5ee340":"dframe = pd.read_csv(\"..\/input\/ner.csv\", encoding = \"ISO-8859-1\", error_bad_lines=False)","0eedea74":"dframe","58e8e097":"dframe.columns","48307244":"dataset=dframe.drop(['Unnamed: 0', 'lemma', 'next-lemma', 'next-next-lemma', 'next-next-pos',\n       'next-next-shape', 'next-next-word', 'next-pos', 'next-shape',\n       'next-word', 'prev-iob', 'prev-lemma', 'prev-pos',\n       'prev-prev-iob', 'prev-prev-lemma', 'prev-prev-pos', 'prev-prev-shape',\n       'prev-prev-word', 'prev-shape', 'prev-word',\"pos\"],axis=1)","26295b17":"dataset.info()","7e03904c":"dataset.head()","eff47871":"dataset.isnull().sum()","5f0cbc3e":"dataset.dropna(inplace=True)","9bc0bb10":"dataset['tag'].value_counts()","4b434fde":"dataset['tag'].describe()","133c5eb3":"dataset['tag'].unique()","4523e1cb":"dataset=dataset.drop(['shape'],axis=1)","837d475a":"dataset.head(10)","d7412571":"class SentenceGetter(object):\n    \n    def __init__(self, dataset):\n        self.n_sent = 1\n        self.dataset = dataset\n        self.empty = False\n        agg_func = lambda s: [(w, t) for w,t in zip(s[\"word\"].values.tolist(),s[\"tag\"].values.tolist())]\n        self.grouped = self.dataset.groupby(\"sentence_idx\").apply(agg_func)\n        self.sentences = [s for s in self.grouped]","6b52cafa":"getter = SentenceGetter(dataset)","147c235c":"sentences = getter.sentences","abd986a6":"print(sentences[5])","66a3592a":"maxlen = max([len(s) for s in sentences])\nprint ('Maximum sequence length:', maxlen)","ed57df6f":"# Check how long sentences are so that we can pad them\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use(\"ggplot\")","00281351":"plt.hist([len(s) for s in sentences], bins=40)\nplt.show()","cce1824a":"words = list(set(dataset[\"word\"].values))\nwords.append(\"ENDPAD\")","32337132":"n_words = len(words); n_words","05cef49e":"tags = list(set(dataset[\"tag\"].values))","64ad51c5":"n_tags = len(tags)\nn_tags","d4b641e8":"word2idx = {w: i for i, w in enumerate(words)}\ntag2idx = {t: i for i, t in enumerate(tags)}","d4e64b60":"word2idx['Obama']","647d97b4":"tag2idx[\"O\"]","2f04a07a":"from keras.preprocessing.sequence import pad_sequences\nX = [[word2idx[w[0]] for w in s] for s in sentences]","8a0c15ad":"X = pad_sequences(maxlen=140, sequences=X, padding=\"post\",value=n_words - 1)","7910ba9a":"X[0]","2697edbc":"y = [[tag2idx[w[1]] for w in s] for s in sentences]","8157f89e":"y = pad_sequences(maxlen=140, sequences=y, padding=\"post\", value=tag2idx[\"O\"])","bf1e93e8":"from keras.utils import to_categorical\ny = [to_categorical(i, num_classes=n_tags) for i in y]","d57b6870":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","70e3d66a":"from keras.models import Model, Input\nfrom keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional","8c073257":"input = Input(shape=(140,))\nmodel = Embedding(input_dim=n_words, output_dim=140, input_length=140)(input)\nmodel = Dropout(0.2)(model)\nmodel = Bidirectional(LSTM(units=100, return_sequences=True, recurrent_dropout=0.1))(model)\nmodel = Dropout(0.2)(model)\nmodel = Bidirectional(LSTM(units=100, return_sequences=True, recurrent_dropout=0.1))(model)\nmodel = Dropout(0.5)(model)\nout = TimeDistributed(Dense(n_tags, activation=\"softmax\"))(model)  # softmax output layer","964c7f3d":"model = Model(input, out)","0d0bf4d3":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","228e1426":"model.summary()","781b4bd4":"history = model.fit(X_train, np.array(y_train), batch_size=32, epochs=1, validation_split=0.2, verbose=1)","6af1e3c4":"i = 0\np = model.predict(np.array([X_test[i]]))\np = np.argmax(p, axis=-1)\nprint(\"{:14} ({:5}): ({:4})\".format(\"Word\", \"True\", \"Pred\"))\nfor w,pred in zip(X_test[i],p[0]):\n    print(\"{:14}: {}\".format(words[w],tags[pred]))","0409d47c":"p[0]","18521358":"predictions = model.predict(np.array(X_test))\npredictions = np.argmax(predictions, axis=-1)","1a0cd801":"predictions.shape","63e23acd":"y_test_arr = np.array(y_test)\ny_test_result=np.argmax(y_test_arr, axis=-1)\ny_test_result.shape","6a5b2d06":"y_test_result[0]","9b95a749":"predictions[0]","7d1d6273":"\n**Importing the dataset for named entity recognition model**","6fd1cd43":"## Data preprocessing**","ded06479":"* Keep word, pos, sentence_idx and tag as an input, remove all other columns","957cafd6":"> **Create list of list of tuples to differentiate each sentence from each other**","80a4b6b6":"Dropping rows having NULL Values","a01dfbc6":"**Converting words to numbers and numbers to words**"}}