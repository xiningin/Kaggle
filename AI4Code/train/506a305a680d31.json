{"cell_type":{"d6addf93":"code","9113f1bd":"code","2aff389d":"code","b54cdc97":"code","34d7f6a9":"code","92524a91":"code","f1b2e49b":"code","81e42498":"code","09a5aae4":"code","a02eca5f":"code","721bc6c0":"code","8bee9234":"code","e4090554":"code","4b806f3a":"code","b75ba96d":"code","587cc991":"code","11054f7e":"code","66201c61":"code","e87f1c37":"code","5e725db2":"code","a14ccf38":"code","50105e80":"code","1649226d":"code","c318ba4f":"code","8e3198f0":"code","27228a92":"code","7b6dc51c":"code","52862699":"code","7a56c70d":"code","8d8676d9":"code","e9ec101b":"code","2dc747cd":"code","c8dc3f4b":"code","5b4cef50":"code","cac615a5":"code","7601a7ee":"code","9edfbad2":"code","f72ff4b8":"code","4793ce3d":"code","8a9065e4":"code","bb01c71e":"code","0cbfdf06":"code","e5fb5bda":"code","ac0da9f2":"code","ba40de97":"code","7df49f3e":"code","3b5fcc88":"code","72416099":"code","bbb15212":"code","0f4689ce":"code","394d20cd":"code","626a46cb":"code","35793fab":"code","d9c32b31":"code","f34031b5":"code","8c3a16e4":"code","e253c974":"code","9f29f723":"code","01cbc74d":"code","3fd533cb":"markdown"},"source":{"d6addf93":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport sklearn\nimport sklearn.model_selection as model_selection\nimport time\n%matplotlib inline","9113f1bd":"df = pd.read_csv(\"\/kaggle\/input\/california-housing-prices\/housing.csv\")\ndf.head()","2aff389d":"df.describe()","b54cdc97":"df.isnull().sum()","34d7f6a9":"df.shape","92524a91":"df.dtypes","f1b2e49b":"df[\"ocean_proximity\"].unique()","81e42498":"dummies = pd.get_dummies(df[\"ocean_proximity\"],drop_first=True)\ndf = pd.concat([df,dummies], axis = 1)","09a5aae4":"df = df.drop([\"ocean_proximity\"],axis = 1)","a02eca5f":"df.head(10)","721bc6c0":"sb.scatterplot(x = df.latitude, y = df.longitude)\nplt.title(\"California\")","8bee9234":"from sklearn.cluster import KMeans\nX = df.loc[:,['latitude','longitude']]\nsse = {}\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(X)\n    df[\"clusters\"] = kmeans.labels_\n    #print(data[\"clusters\"])\n    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.ylabel(\"SSE\")\nplt.show()","e4090554":"df = df.drop([\"clusters\"], axis = 1)","4b806f3a":"# creates 5 clusters using k-means clustering algorithm.\nid_n=8\nkmeans = KMeans(n_clusters=id_n, random_state=0).fit(X)\ndf['cluster']=kmeans.labels_\nptsymb = np.array(['b.','r.','m.','g.','c.','k.','b*','r*','m*','r^']);\nplt.figure(figsize=(12,12))\nplt.ylabel('Longitude', fontsize=12)\nplt.xlabel('Latitude', fontsize=12)\nfor i in range(id_n):\n    cluster = np.where(df['cluster']==i)[0]\n    plt.plot(X.latitude[cluster].values,X.longitude[cluster].values,ptsymb[i])\nplt.show()","b75ba96d":"df","587cc991":"df.cluster.unique()","11054f7e":"df.dtypes","66201c61":"df[\"cluster\"] = df[\"cluster\"].astype(\"category\")","e87f1c37":"dummies = pd.get_dummies(df[\"cluster\"],drop_first=True)\ndf = pd.concat([df,dummies], axis = 1)\ndf = df.drop([\"cluster\",\"latitude\",\"longitude\"], axis = 1)","5e725db2":"df.shape","a14ccf38":"train, test = model_selection.train_test_split(df, test_size=0.2)","50105e80":"print(train.shape, test.shape)","1649226d":"print(train.isnull().sum(),test.isnull().sum())","c318ba4f":"train_notnull = train.dropna()\ntest_notnull = test.dropna()","8e3198f0":"train_notnull[\"n_rooms_per_bedroom\"] = np.divide(train_notnull[\"total_rooms\"],train_notnull['total_bedrooms'])\ntest_notnull[\"n_rooms_per_bedroom\"] = np.divide(test_notnull[\"total_rooms\"],test_notnull['total_bedrooms'])","27228a92":"print(train_notnull[\"n_rooms_per_bedroom\"].describe())\nprint(test_notnull[\"n_rooms_per_bedroom\"].describe())","7b6dc51c":"train = train.fillna(0)\ntest = test.fillna(0)","52862699":"def impute_bedrooms(df):\n    if df[\"total_bedrooms\"] == 0:\n        return np.round(df[\"total_rooms\"]\/5)\n    else:\n        return df[\"total_bedrooms\"]","7a56c70d":"train[\"total_bedrooms\"] = train.apply(impute_bedrooms, axis = 1)\ntest[\"total_bedrooms\"] = test.apply(impute_bedrooms, axis = 1)","8d8676d9":"print(train.isnull().sum())\nprint(test.isnull().sum())","e9ec101b":"corr = train.corr()\nsb.heatmap(corr,\n          vmin=-1, vmax=1, center=0,\n          cmap=sb.diverging_palette(20, 220, n=200),\n          square=True)","2dc747cd":"corr","c8dc3f4b":"sb.scatterplot(x = train[\"median_income\"], y = train[\"median_house_value\"])","5b4cef50":"index1 = train[ (train['median_income'] >= 12) & (train['median_house_value'] < 410000)].index\ntrain.drop(index1, inplace = True)","cac615a5":"index2 = train[ (train['median_income'] >= 10) & (train['median_house_value'] < 300000)].index\ntrain.drop(index2, inplace = True)","7601a7ee":"idx1 = train[ (train['median_income'] >= 7) & (train['median_house_value'] < 100000)].index\ntrain.drop(idx1, inplace = True)","9edfbad2":"idx2 = train[ (train['median_income'] >= 9) & (train['median_house_value'] < 200000)].index\ntrain.drop(idx2, inplace = True)\nprint(train.shape)","f72ff4b8":"sb.scatterplot(x = train[\"median_income\"], y = train[\"median_house_value\"])","4793ce3d":"train","8a9065e4":"test","bb01c71e":"y_train = train[\"median_house_value\"]\nX_train = train.drop([\"median_house_value\"],axis = 1)\ny_test = test[\"median_house_value\"]\nX_test = test.drop([\"median_house_value\"],axis = 1)","0cbfdf06":"print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","e5fb5bda":"##### Random Forest\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=1000, n_jobs=-1 ,random_state=42)\nrf.fit(X_train,y_train)","ac0da9f2":"predictions = rf.predict(X_test)","ba40de97":"mse = sklearn.metrics.mean_squared_error(y_test, predictions)\nrmse = np.sqrt(mse)\nprint('Accuracy for Random Forest',100*max(0,rmse))","7df49f3e":"from sklearn.model_selection import GridSearchCV\nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [90, 100, 110],\n    'max_features': [\"sqrt\"],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [2, 3],\n    'n_estimators': [600, 800]\n}\n# Create a based model\nrf = RandomForestRegressor()\n# Instantiate the grid search model\nrf_grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n                          cv = 3, n_jobs = -1, verbose = 2)\nrf_grid_search.fit(X_train,y_train)","3b5fcc88":"rf_grid_search.best_params_","72416099":"def evaluate(model, X_test, y_test):\n    predictions = model.predict(X_test)\n    errors = abs(predictions - y_test)\n    mape = 100 * np.mean(errors \/ y_test)\n    accuracy = 100 - mape\n    print('Model Performance')\n    print('Average Error: {:0.4f} $.'.format(np.mean(errors)))\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n    \n    return accuracy\nbase_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\nbase_model.fit(X_train, y_train)\nbase_accuracy = evaluate(base_model, X_test, y_test)","bbb15212":"best_random = rf_grid_search.best_estimator_\nrandom_accuracy = evaluate(rf_grid_search, X_test, y_test)","0f4689ce":"print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) \/ base_accuracy))","394d20cd":"best_random = rf_grid_search.best_estimator_\nrandom_accuracy = evaluate(rf_grid_search, X_train, y_train)","626a46cb":"importances = list(best_random.feature_importances_)\n# List of tuples with variable and importance\nfeature_list = list(X_train.columns)\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)]\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","35793fab":"X_train_new = X_train[\"median_income\"]\nX_test_new = X_test[\"median_income\"]","d9c32b31":"from rgf.sklearn import RGFRegressor\nfrom sklearn.model_selection import GridSearchCV","f34031b5":"!pip install rgf-python","8c3a16e4":"rgf = RGFRegressor(max_leaf=500,l2=0.1, reg_depth=1)","e253c974":"rgf.fit(X_train,y_train)","9f29f723":"train_accuracy = evaluate(rgf, X_train, y_train)","01cbc74d":"test_accuracy = evaluate(rgf, X_test, y_test)","3fd533cb":"*CALIFORNIA HOUSE PRICING*"}}