{"cell_type":{"b3dcf023":"code","a11b360f":"code","e10226d9":"code","245d1ecb":"code","9ee265b4":"code","e3e41860":"code","b28f734b":"code","92fd6eaa":"code","02ea80bc":"code","68c522b6":"markdown","a20e5eba":"markdown","5c9f369b":"markdown","e8804df6":"markdown","7ddf8098":"markdown","d17411cb":"markdown","48e09b36":"markdown","d7554a04":"markdown"},"source":{"b3dcf023":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import *","a11b360f":"df = pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\ndf","e10226d9":"Y = pd.get_dummies(df[\"Attrition_Flag\"])\nY = Y[\"Existing Customer\"]","245d1ecb":"fig, axs = plt.subplots(2, 2)\nplt.figure(figsize=(10,10))\naxs[0,0].scatter(df[\"Months_on_book\"],df[\"Total_Trans_Amt\"], c= Y)\nplt.figure(figsize=(10,10))\naxs[1,0].scatter(df[\"Total_Trans_Amt\"],df[\"Avg_Open_To_Buy\"], c= Y)\nplt.figure(figsize=(10,10))\naxs[1,1].scatter(df[\"Avg_Open_To_Buy\"],df[\"Total_Trans_Ct\"], c= Y)\nplt.figure(figsize=(10,10))\naxs[0,1].scatter(df[\"Total_Trans_Ct\"],df[\"Months_Inactive_12_mon\"], c= Y)","9ee265b4":"X = df[[\"Months_on_book\", \"Total_Trans_Amt\", \"Avg_Open_To_Buy\", \"Total_Trans_Ct\", \"Months_Inactive_12_mon\"]]\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X,Y,test_size=0.33,random_state=42)","e3e41860":"clf2 = tree.DecisionTreeClassifier(criterion = \"entropy\", splitter = \"best\", max_depth = 10)\nclf2 = clf2.fit(X_train, Y_train)","b28f734b":"print(\"Accuracy : \", metrics.accuracy_score(Y_test, clf2.predict(X_test)) *  100)\nprint(\"Recall : \", metrics.recall_score(Y_test, clf2.predict(X_test)) *  100)\nprint(\"Precision : \", metrics.precision_score(Y_test, clf2.predict(X_test)) *  100)\nprint(metrics.confusion_matrix(Y_test, clf2.predict(X_test)))\nprint(metrics.classification_report(Y_test, clf2.predict(X_test)))","92fd6eaa":"clf = tree.DecisionTreeClassifier(criterion = \"entropy\", splitter = \"best\", max_depth = 10)\nclf = clf2.fit(X, Y)","02ea80bc":"print(\"Accuracy : \", metrics.accuracy_score(Y, clf.predict(X)) *  100)\nprint(\"Recall : \", metrics.recall_score(Y, clf.predict(X)) *  100)\nprint(\"Precision : \", metrics.precision_score(Y, clf.predict(X)) *  100)\nprint(metrics.confusion_matrix(Y, clf.predict(X)))\nprint(metrics.classification_report(Y, clf.predict(X)))","68c522b6":"**Evaluating the model outsample**","a20e5eba":"**Creating the model of classification**","5c9f369b":"**Creating the dependent variable using \"Attrition_Flag\" with 1 when \"Existing Customer\" and 0 when \"Attrited Customer\"**","e8804df6":"**Creating the model whith all sample**","7ddf8098":"**Showing the relations of the variables what will be used**","d17411cb":"**Spliting the samples**","48e09b36":"**Importing the csv whith the datas**","d7554a04":"**Avaluating th model whith all sample**"}}