{"cell_type":{"ea9edc08":"code","9bbe2510":"code","bdace38b":"code","ab2e9f26":"code","99d043a7":"code","961eda57":"code","48815dcf":"code","eb97c6a7":"code","b5e90430":"code","bad4214c":"code","94dc503c":"markdown","2dd259d1":"markdown","c7a97dff":"markdown","4c7c0c50":"markdown","f86248eb":"markdown","347840fe":"markdown","6c526db1":"markdown","4b3e96a3":"markdown","42a4fddf":"markdown"},"source":{"ea9edc08":"!conda install -y -c rdkit rdkit;","9bbe2510":"! wget https:\/\/ftp.ncbi.nlm.nih.gov\/pubchem\/Compound\/Extras\/CID-InChI-Key.gz","bdace38b":"import cv2\nimport os\nimport gzip\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\n\nimport rdkit\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw","ab2e9f26":"length = 500\nwith gzip.open('CID-InChI-Key.gz', 'r') as InChIs:\n    data = [InChIs.readline().decode() for _ in tqdm(range(length))]","99d043a7":"Chem.MolFromInchi(data[0].split('\\t')[1])","961eda57":"InChI_dict = {'InChI':[]}\nfor i, d in tqdm(enumerate(data)):\n    InChI = d.split('\\t')[1]\n    m = Chem.MolFromInchi(InChI)\n    if m != None:\n        InChI_dict['InChI'].append(InChI)","48815dcf":"save_path = '.\/images\/'\ntrain = pd.DataFrame(InChI_dict)\ntrain['file_name'] = 'train_' + train.index.astype('str') + '.png'\ntrain['file_path'] = save_path + train['file_name']\ntrain.head()","eb97c6a7":"if not (os.path.isdir(save_path)):\n    os.makedirs(os.path.join(save_path))\n    \nfor idx, row in tqdm(train.iterrows()):\n    file = row['file_path']\n    InChI = row['InChI']\n    m = Chem.MolFromInchi(InChI)\n    if m != None:\n        img = Draw.MolToImage(m, size=(300,300))\n        img.save(file)    ","b5e90430":"image_paths = train.file_path","bad4214c":"plt.figure(figsize=(20, 18))\nfor i in range(20):\n    img = cv2.imread(image_paths[i])\n    plt.subplot(5, 4, i+1)\n    plt.imshow(img)\nplt.show()","94dc503c":"## Show Images","2dd259d1":"## Set up environment\u00b6","c7a97dff":"## Save Images","4c7c0c50":"## Download PubChem Compound ID(CDI) for InChI\n\nWe can download tons of Molecular Images from https:\/\/ftp.ncbi.nlm.nih.gov\/pubchem\n\nThere are index of ftp at \/pubchem\/Compound\/Extras, and I'm going to download **CID-InChI-Key.gz**\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1kgOTcGQnZFchzyQvZV4HbVdxEtf5uME2)","f86248eb":"# Introduction\n\n**Main Topic**\n\nThis notebook is for **Generate Molecular Image using [PubChem](https:\/\/pubchem.ncbi.nlm.nih.gov\/)** \n\n**References**\n\n[**PubChem Official Docs**](https:\/\/pubchemdocs.ncbi.nlm.nih.gov\/about)\n\n[**Generate SMILES Molecular Image(Korean)**](https:\/\/dacon.io\/competitions\/official\/235640\/codeshare\/1630?dtype=recent)\n","347840fe":"## Next Step\n\nAs we know, Competition dataset is low resolution images.\nSo it would be better to matching resolution using Image Processing.\n\n-low resolution --> high resolution\n\n-high resolution --> low resolution\n\nI don't know which one is better now. But we can figure it out :)\n\nHope to be helpful this NB.","6c526db1":"## Generate DataFrame","4b3e96a3":"# Install PubChem from scratch","42a4fddf":"## Open gz file\n\nThere are tons of InChI Component in **CID-InChI-Key.gz** so I'll just extract 500 Components from on it.\n\n**- note -**\n\nComponents are stored with similar components in order, So It would be better to select randomly if you want to use this datasets  "}}