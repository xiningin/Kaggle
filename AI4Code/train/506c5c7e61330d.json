{"cell_type":{"ae791690":"code","d32e5640":"code","62a8ef58":"code","6c1e9d12":"code","23aba1d6":"code","a82c928b":"code","776bf56c":"code","da361084":"code","d7369462":"code","89fe9551":"code","eea180b9":"code","c429512b":"code","cdef64ed":"code","0cacaaff":"code","cafa42e1":"code","1c1ca067":"code","dac3b8ca":"code","898df47d":"code","3f915298":"code","efefc5b4":"code","0f64f982":"code","726ce339":"code","ad777ba0":"markdown","e83968ff":"markdown"},"source":{"ae791690":"import pandas as pd\nimport numpy as np","d32e5640":"# Importing Housing.csv\nhousing = pd.read_csv('\/kaggle\/input\/housing\/newhousing.csv')","62a8ef58":"# Looking at the first five rows\nhousing.head()","6c1e9d12":"housing.shape","23aba1d6":"# What type of values are stored in the columns?\nhousing.info()","a82c928b":"housing.columns","776bf56c":"# Putting feature variable to X\nX = housing[['area', 'bedrooms', 'bathrooms', 'stories', 'mainroad',\n       'guestroom', 'basement', 'hotwaterheating', 'airconditioning',\n       'parking', 'prefarea', 'semi-furnished', 'unfurnished',\n       'areaperbedroom', 'bbratio']]\n\n# Putting response variable to y\ny = housing['price']","da361084":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.distplot(y)\nplt.show()","d7369462":"y.skew()","89fe9551":"from scipy import stats\ny=stats.boxcox(y)[0]","eea180b9":"sns.distplot(y)\nplt.show()","c429512b":"# Importing matplotlib and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# Let's see the correlation matrix \nplt.figure(figsize = (16,10))     # Size of the figure\nsns.heatmap(X.corr(),annot = True)\nplt.show()","cdef64ed":"#creating correlation matrix for the given data\ncorrmat = np.corrcoef(X.transpose())\ncorrmat","0cacaaff":"#Make a diagonal matrix with diagonal entry of Matrix corrmat\np=np.diagflat(corrmat.diagonal())\np","cafa42e1":"# subtract diagonal entries making all diagonals 0\ncorrmat_diag_zero = corrmat - p\nprint(\"max corr:\",corrmat_diag_zero.max(), \", min corr: \", corrmat_diag_zero.min(),)\n","1c1ca067":"import matplotlib.pyplot as plt\nfrom sklearn import  linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.metrics import explained_variance_score\n#Importing the PCA module\nfrom sklearn.decomposition import PCA","dac3b8ca":"#random_state is the seed used by the random number generator, it can be any integer.\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7 ,test_size = 0.3, random_state=42)\n\nfrom sklearn.preprocessing import PowerTransformer\nscaler = PowerTransformer()\nXtrain=scaler.fit_transform(X_train) \nXtest=scaler.transform(X_test) \n\n","898df47d":"pca = PCA(random_state=42)\npca.fit(Xtrain)","3f915298":"var_cumu = np.cumsum(pca.explained_variance_ratio_)\nvar_cumu ","efefc5b4":"fig = plt.figure(figsize=[12,8])\nplt.vlines(x=10, ymax=1, ymin=0, colors=\"r\", linestyles=\"--\")\nplt.hlines(y=0.94, xmax=12, xmin=0, colors=\"g\", linestyles=\"--\")\nplt.plot(var_cumu)\nplt.ylabel(\"Cumulative variance explained\")\nplt.show()","0f64f982":"pca = PCA(n_components=10,random_state=42)\n\n#Scale and transform data to get Principal Components\n\n# fit_transform and transform to get the reduced data\nXtrain_reduced = pca.fit_transform(Xtrain)\nXtest_reduced = pca.transform(Xtest)\n\n\nregrpca = linear_model.LinearRegression()\n# Train the model using the principal components of the transformed training sets\nregrpca.fit(Xtrain_reduced, y_train)\n# Make predictions using the principal components of the transformed testing set\ny_pred = regrpca.predict(Xtest_reduced)\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\n\n","726ce339":"# Explained variance score: 1 is perfect prediction\nprint('R2 score: %.2f' % r2_score(y_test, y_pred))","ad777ba0":"## Splitting Data into Training and Testing Sets","e83968ff":"### Importing and Understanding Data"}}