{"cell_type":{"0c55d80f":"code","b1e40db7":"code","a41318ce":"code","43c19c5f":"code","61547f10":"code","be1c7830":"code","3cc59b89":"code","5b997266":"code","251b11f1":"code","8e293830":"code","27fc6896":"code","af12622d":"code","88cac1a8":"code","f3919e47":"code","6c58c959":"code","1472756a":"code","b50862c2":"code","2f15cc67":"code","860f2337":"code","d3b4d04c":"code","7dc781b6":"code","9f54cdba":"code","229c7930":"code","ee2efd61":"code","e3629bbf":"code","333cc001":"code","f6da9872":"code","22c15676":"code","fb32d410":"code","008747bb":"code","5b0727c5":"code","b938b4c3":"code","badfb4f0":"code","f2f5379a":"code","c2477b69":"code","16ce5735":"code","e970e367":"code","f88a5337":"code","992c618d":"code","4884dd3a":"code","a3f14f4f":"code","4865994c":"code","08d5457b":"code","69c9cc30":"code","273c1404":"code","7dd2a577":"code","e1075ecf":"code","4695ec39":"code","3a6edaa9":"code","941586c8":"code","9db73be0":"code","ed867d09":"code","e9d1b58e":"code","f1fcd833":"code","69ff0122":"code","0dd95be7":"code","15712609":"code","662f6073":"code","f37b5359":"code","82daf560":"code","e5af64fb":"code","c1b2acff":"code","2587e31b":"code","edf24183":"code","7d3783b9":"markdown","4d925835":"markdown","e0d70285":"markdown","e6569e8f":"markdown","27b314e7":"markdown","d6974d05":"markdown","3a0efdd6":"markdown","f3d0f389":"markdown","f6e6ed51":"markdown","47edfe72":"markdown","b8572c95":"markdown","9428204f":"markdown","34c2fe1d":"markdown","8eeace8c":"markdown","a23b5001":"markdown","1b5758a4":"markdown","edd1e099":"markdown","cae8cdbb":"markdown","f020a583":"markdown"},"source":{"0c55d80f":"# Below code provides the dataset working directory which has been uploaded to kernel\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b1e40db7":"# import the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling","a41318ce":"# Read the data\ncar_sales = pd.read_csv('\/kaggle\/input\/sampledataset\/car_sales.csv')","43c19c5f":"car_sales.head(2)","61547f10":"# check for the missing values and data types\ncar_sales.info()","be1c7830":"# car_sales.columns\n# care_sales.describe()","3cc59b89":"# Get the detail profile report\npandas_profiling.ProfileReport(car_sales)","5b997266":"# Matplotlib vs seaborn\n# plot between 'resale_value' and 'Sales'\ncar_sales.plot(kind='scatter', x='four_year_resale_value', y='Sales_in_thousands', alpha=0.2)","251b11f1":"sns.lmplot(x='four_year_resale_value', y='Sales_in_thousands', data=car_sales, aspect=1.5, scatter_kws={'alpha':0.2})","8e293830":"# Separate the numerical and categorical variables using data types\n# Numerical columns\nnumeric_var_names = [key for key in dict(car_sales.dtypes) \n                                if dict(car_sales.dtypes)[key] in ['float64', 'int64', 'float32', 'int32']]\n# Categorical columns\ncategorical_var_names = cat_var_names=[key for key in dict(car_sales.dtypes) if dict(car_sales.dtypes)[key] in ['object']]","27fc6896":"# there are other ways to split numerical and categorical data\n# df.loc[,: df.dtypes == object]\ncateg_names = car_sales.loc[:,car_sales.dtypes == object]\ncateg_names","af12622d":"numeric_var_names","88cac1a8":"categorical_var_names","f3919e47":"# Numerical data\ncar_sales_num = car_sales[numeric_var_names]\n# Categorical data\ncar_sales_cat = car_sales[cat_var_names]","6c58c959":"car_sales_num.head()","1472756a":"car_sales_cat.head()","b50862c2":"# There are so many ways to handle the outliers\n# Here we simply use clip (lower, upper)","2f15cc67":"# function to clip the data\ndef clipping(x):\n    x = x.clip(lower = x.quantile(0.01), upper = x.quantile(0.99))\n    return x","860f2337":"# car_sales_num.quantile","d3b4d04c":"# car_sales_num.clip?","7dc781b6":"car_sales_num = car_sales_num.apply(lambda x : clipping(x))","9f54cdba":"car_sales_num.head()","229c7930":"# There are various ways to fill the missing values, here we are using 'mean' to fill missing values\n# function to fill the missing values\ndef data_imputation(x):\n    x = x.fillna(x.mean())\n    return x","ee2efd61":"car_sales_num=car_sales_num.apply(lambda x: data_imputation(x))","e3629bbf":"car_sales_num.info()","333cc001":"car_sales_num.head()","f6da9872":"car_sales_cat.head()","22c15676":"# we can drop 'Model' and 'Latest_launch'\ncar_sales_cat = car_sales[['Manufacturer', 'Vehicle_type']]","fb32d410":"# Create dummies for variables 'Manufacturer' and 'Vehicle_type'\n# function to create dummies\ndef create_dummies( df, colname ):\n    col_dummies = pd.get_dummies(df[colname], prefix=colname)\n    col_dummies.drop(col_dummies.columns[0], axis=1, inplace=True)\n    df = pd.concat([df, col_dummies], axis=1)\n    df.drop( colname, axis = 1, inplace = True )\n    return df","008747bb":"for c_feature in ['Manufacturer', 'Vehicle_type']:\n    car_sales_cat[c_feature] = car_sales_cat[c_feature].astype('category')\n    car_sales_cat = create_dummies(car_sales_cat , c_feature )","5b0727c5":"car_sales_cat.head(5)","b938b4c3":"# Now combine the data\n# pd.concat(car_sales_num, car_sales_cat)\ncar_sales_new = pd.concat([car_sales_num, car_sales_cat], axis=1)","badfb4f0":"car_sales_new.head(2)","f2f5379a":"# exploration of variables\nsns.distplot(car_sales_new.Sales_in_thousands)","c2477b69":"car_sales_new[\"ln_sales_in_thousands\"]= np.log(car_sales_new[\"Sales_in_thousands\"]+1)","16ce5735":"sns.distplot(car_sales_new.ln_sales_in_thousands)","e970e367":"# Drop the previous Y variable\ncar_sales_new = car_sales_new.drop(['Sales_in_thousands'],axis=1)","f88a5337":"car_sales_new.columns","992c618d":"# Finding the relation between X variables using below\ncar_sales_new.corr()","4884dd3a":"sns.heatmap(car_sales_new.corr())","a3f14f4f":"# Separate Y variable from X variables\nfeature_columns = car_sales_new.columns.difference( ['ln_sales_in_thousands'] )\nfeature_columns","4865994c":"from sklearn.model_selection import train_test_split","08d5457b":"train_X, test_X, train_y, test_y = train_test_split( car_sales_new[feature_columns],\n                                                  car_sales_new['ln_sales_in_thousands'],\n                                                  test_size = 0.3,\n                                                  random_state = 111 )","69c9cc30":"# In this model, X variables amd Y variable must be in separate data frames \n# we need to add constant in the linear equation (y = mx + c) manually","273c1404":"import statsmodels.api as sm","7dd2a577":"train_X = sm.add_constant(train_X)\nlr = sm.OLS(train_y,train_X).fit()","e1075ecf":"print(lr.summary())","4695ec39":"# In this model, X variables amd Y variable must be in same data frame\n# No need to add constant in the linear equation (y = mx + c) manually. ","3a6edaa9":"import statsmodels.formula.api as smf","941586c8":"# Syntax to build the model\n# Y ~ X1 + X2 + X3 .....","9db73be0":"columns = \"+\".join(train_X.columns.difference( ['ln_sales_in_thousands'] ))\nformula_api = \"ln_sales_in_thousands~\" + columns","ed867d09":"formula_api","e9d1b58e":"lr = smf.ols(formula = formula_api, data = train_X).fit()","f1fcd833":"# Please try to find out why it is throwing error\n# Hint: look at the description of the error X variable","69ff0122":"# - sign is not allowed, hence try to replace - sign with ''.\n# train_X.columns= [phrase.strip().replace('-', '') for phrase in train_X.columns]","0dd95be7":"train_X, test_X, train_y, test_y = train_test_split( car_sales_new[feature_columns],\n                                                  car_sales_new['ln_sales_in_thousands'],\n                                                  test_size = 0.3,\n                                                  random_state = 123 )","15712609":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","662f6073":"linreg = LinearRegression()\nlinreg.fit( train_X, train_y )","f37b5359":"# predict the train data\ny_pred_train = linreg.predict( train_X )","82daf560":"train_X.shape","e5af64fb":"test_X.shape","c1b2acff":"# predict the test data\ny_pred_test = linreg.predict( test_X )","2587e31b":"# Calculate the Residual\nresidual = test_y - y_pred_test","edf24183":"# Now plot the residuals to check for normal distribution using Q-Q plot\nfrom scipy import stats\nimport pylab\n\nstats.probplot( residual, dist=\"norm\", plot=pylab )\npylab.show()","7d3783b9":"In statistics, linear regression is a linear approach to find the relationship between a dependent variable and independent variables.","4d925835":"![linear.jpg](attachment:linear.jpg)","e0d70285":"# Split the data","e6569e8f":"* Above is Q-Q plot which illustrates residuals are plotted along the line, hence they are normally distributed\n* same assumption can be checked in other ways, please refer to below link to check for further details.\n\n#https:\/\/www.kaggle.com\/pavan1512\/linear-regression-assumptions","27b314e7":"# Handling Outliers","d6974d05":"**statsmodels has two sub modules**\n* statsmodels.api\n* statsmodels.formula.api","3a0efdd6":"# Data Understanding","f3d0f389":"**Linear Regression with below python modules**\n1. statsmodels\n2. sklearn","f6e6ed51":"**Above graph is not normally distributed, lets try applying log transformation **","47edfe72":"# Handling Missing values","b8572c95":"# Definition","9428204f":"# Build the model using sklearn","34c2fe1d":"# Handling the categorical variables","8eeace8c":"# Build the model using statsmodels.formula.api","a23b5001":"**Lets try to understand the linear regression with an example**","1b5758a4":"# Build the model using statsmodels.api","edd1e099":"# Data Visualization","cae8cdbb":"**From above, it is clear that 'seaborn' has advantages over 'Matplotlib'**","f020a583":"# statsmodels"}}