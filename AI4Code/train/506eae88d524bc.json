{"cell_type":{"343866ce":"code","3dd1d74b":"code","7698e708":"code","af899401":"code","54695421":"code","a66f4f26":"code","658d449b":"code","e24e0663":"code","a7917eeb":"code","e335fab6":"code","95d95f57":"code","204e91fc":"code","4f919e6a":"code","9dc42452":"code","fb800369":"code","a3b87451":"code","d539f8a6":"code","bbf4a9fe":"code","3c302612":"code","73fa31a7":"code","704e3552":"code","8c045734":"code","de852b62":"code","3fbfde09":"code","cca48b43":"code","8f07abd8":"code","87cd8fef":"code","60905616":"code","d681cb20":"code","f1d3bb47":"code","46a3c142":"code","ff39b930":"code","a9afb1f7":"code","37cbe485":"code","e58b6f31":"code","e6d18a57":"code","a5913176":"code","96b8f43e":"code","479b8b4c":"code","e9d900a0":"code","88492f10":"code","e613ab62":"code","05c61ad7":"code","0d600501":"code","c8d466ea":"code","44e5b345":"code","43accb0f":"code","364a3495":"code","75580b1f":"code","eb368dd2":"code","b9e2188e":"code","da16e8d5":"code","c9a23d5e":"markdown","ae210304":"markdown","3224bf4e":"markdown","8ebfb8db":"markdown","ac7c5aed":"markdown","c22ea91f":"markdown","75b30453":"markdown","6d23a8de":"markdown","47d96d3d":"markdown","c91f9bd4":"markdown"},"source":{"343866ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3dd1d74b":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpl.style.use('ggplot')","7698e708":"#read the data\npd.set_option('display.max_columns', None)\ndf = pd.read_csv(\"..\/input\/seattle-sdot-collisions-data\/Collisions.csv\")\nprint(\"Data read into dataframe!\") ","af899401":"df.head()","54695421":"#shape of the data\ndf.shape","a66f4f26":"#info about data\ndf.info()","658d449b":"#columns\ndf.columns.values","e24e0663":"df.dtypes.value_counts().plot(kind='bar')","a7917eeb":"Null_values = df.isnull().sum()\nNull_values[0:40]","e335fab6":"df1= df.drop(['X','Y','INTKEY','COLDETKEY','REPORTNO','LOCATION','EXCEPTRSNCODE','EXCEPTRSNDESC','SEVERITYDESC','INJURIES','SERIOUSINJURIES','FATALITIES','INCDATE','INCDTTM','SDOT_COLCODE','SDOT_COLDESC','INATTENTIONIND','UNDERINFL','PEDROWNOTGRNT','SDOTCOLNUM','SPEEDING','ST_COLDESC','SEGLANEKEY','CROSSWALKKEY','HITPARKEDCAR'],axis=1)","95d95f57":"df1.dtypes.value_counts().plot(kind='bar')","204e91fc":"sns.countplot(df1['STATUS'], data=df1)","4f919e6a":"sns.countplot(df1['ADDRTYPE'], data=df1)","9dc42452":"df = df1","fb800369":"df.shape","a3b87451":"Null_values = df.isnull().sum()\nNull_values[0:15]","d539f8a6":"df['ST_COLCODE'] = df['ST_COLCODE'].fillna(0)\ndf['SEVERITYCODE'] = df['SEVERITYCODE'].fillna(0)\n\ndf['ADDRTYPE'] = df['ADDRTYPE'].fillna(0)\ndf['ADDRTYPE'] = df['ADDRTYPE'].replace(0,'others')\n\ndf['WEATHER'] = df['WEATHER'].fillna(0)\ndf['WEATHER'] = df['WEATHER'].replace(0,'others')\n\ndf['ROADCOND'] = df['ROADCOND'].fillna(0)\ndf['ROADCOND'] = df['ROADCOND'].replace(0,'others')\n\ndf['LIGHTCOND'] = df['LIGHTCOND'].fillna(0)\ndf['LIGHTCOND'] = df['LIGHTCOND'].replace(0,'others')\n\ndf['COLLISIONTYPE'] = df['COLLISIONTYPE'].fillna(0)\ndf['COLLISIONTYPE'] = df['COLLISIONTYPE'].replace(0,'others')\n\ndf['JUNCTIONTYPE'] = df['JUNCTIONTYPE'].fillna(0)\ndf['JUNCTIONTYPE'] = df['JUNCTIONTYPE'].replace(0,'others')","bbf4a9fe":"Null_values = df.isnull().sum()\nNull_values[0:15]","3c302612":"#addrtype\nfrom sklearn import preprocessing\naddrtype = preprocessing.LabelEncoder()\naddrtype.fit(['Intersection','Block','Alley','others'])\ndf['ADDRTYPE'] = addrtype.transform(df['ADDRTYPE'])","73fa31a7":"#status\nfrom sklearn import preprocessing\nstatus = preprocessing.LabelEncoder()\nstatus.fit(['Unmatched','Matched'])\ndf['STATUS'] = status.transform(df['STATUS'])","704e3552":"#weather\nfrom sklearn import preprocessing\nweathercond = preprocessing.LabelEncoder()\nweathercond.fit(df['WEATHER'])\ndf['WEATHER'] = weathercond.transform(df['WEATHER'])","8c045734":"#Road\nfrom sklearn import preprocessing\nroadcond = preprocessing.LabelEncoder()\nroadcond.fit(df['ROADCOND'])\ndf['ROADCOND'] = roadcond.transform(df['ROADCOND'])","de852b62":"#light\nfrom sklearn import preprocessing\nlight = preprocessing.LabelEncoder()\nlight.fit(df['LIGHTCOND'])\ndf['LIGHTCOND'] = light.transform(df['LIGHTCOND'])","3fbfde09":"#collision type\nfrom sklearn import preprocessing\ncoll = preprocessing.LabelEncoder()\ncoll.fit(df['COLLISIONTYPE'])\ndf['COLLISIONTYPE'] = coll.transform(df['COLLISIONTYPE'])","cca48b43":"#junction type\nfrom sklearn import preprocessing\njun = preprocessing.LabelEncoder()\njun.fit(df['JUNCTIONTYPE'])\ndf['JUNCTIONTYPE'] = jun.transform(df['JUNCTIONTYPE'])","8f07abd8":"df.head()","87cd8fef":"sns.countplot(df['SEVERITYCODE'], data=df)","60905616":"fig, axes = plt.subplots(2, 2, sharex=True, figsize=(10,5))\nsns.boxplot(ax=axes[0, 0], data=df, x='SEVERITYCODE', y='ADDRTYPE')\nsns.boxplot(ax=axes[0, 1], data=df, x='SEVERITYCODE', y='STATUS')\nsns.boxplot(ax=axes[1, 0], data=df, x='SEVERITYCODE', y='WEATHER')\nsns.boxplot(ax=axes[1, 1], data=df, x='SEVERITYCODE', y='ROADCOND')","d681cb20":"sns.pairplot(df[['SEVERITYCODE','ADDRTYPE','WEATHER','ROADCOND']])","f1d3bb47":"sns.heatmap(df.corr(),cmap=\"Blues\", linewidth=0.3, cbar_kws={\"shrink\": .8})","46a3c142":"df[['ADDRTYPE', 'SEVERITYCODE','COLLISIONTYPE','JUNCTIONTYPE', 'WEATHER', 'ROADCOND', 'LIGHTCOND']].plot(kind='hist', figsize=(10,6), alpha=0.5, stacked=False)","ff39b930":"#import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, f1_score, r2_score, confusion_matrix, classification_report","a9afb1f7":"df2 = pd.read_csv('..\/input\/collision-data\/new_data_collisions.csv')","37cbe485":"#split the data\n\nX = df2[['OBJECTID','INCKEY','STATUS','ADDRTYPE','COLLISIONTYPE','PERSONCOUNT','PEDCOUNT','PEDCYLCOUNT','VEHCOUNT','JUNCTIONTYPE', 'WEATHER', 'ROADCOND', 'LIGHTCOND']]\ny = df2['SEVERITYCODE']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","e58b6f31":"print(\"Train set size\")\nprint(X_train.shape)\nprint(y_train.shape)\nprint('')\nprint(\"Test set size\")\nprint(X_test.shape)\nprint(y_test.shape)","e6d18a57":"#K Nearest Neighbors\nk=17\nknn = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nknn","a5913176":"knn_pred = knn.predict(X_test)\nknn_pred","96b8f43e":"print('Score:',accuracy_score(knn_pred, y_test))\nprint('F1-Score:',f1_score(knn_pred, y_test))\nprint('')\nprint('Confusion Martix:')\nprint(confusion_matrix(y_test, knn_pred))\nprint('')\nprint('Classification Report:')\nprint (classification_report(y_test, knn_pred))","479b8b4c":"\nKs = 20\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    knn = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    pred=knn.predict(X_test)\n    mean_acc[n-1] = accuracy_score(y_test, pred)\n\n    \n    std_acc[n-1]=np.std(pred==y_test)\/np.sqrt(pred.shape[0])\n\nmean_acc","e9d900a0":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()","88492f10":"#Decision Tree\ntree = DecisionTreeClassifier(criterion=\"gini\", max_depth = 4).fit(X_train, y_train)\ntree","e613ab62":"tree_pred = tree.predict(X_test)\ntree_pred","05c61ad7":"print('Score:',accuracy_score(tree_pred, y_test))\nprint('F1-Score:',f1_score(tree_pred, y_test))\nprint('')\nprint('Confusion Martix:')\nprint(confusion_matrix(y_test, tree_pred))\nprint('')\nprint('Classification Report:')\nprint (classification_report(y_test, tree_pred))","0d600501":"#Logistic Regression\nlr = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\nlr","c8d466ea":"lr_pred = lr.predict(X_test)\nlr_pred","44e5b345":"print('Score:',accuracy_score(lr_pred, y_test))\nprint('F1-Score:',f1_score(lr_pred, y_test))\nprint('')\nprint('Confusion Martix:')\nprint(confusion_matrix(y_test, lr_pred))\nprint('')\nprint('Classification Report:')\nprint (classification_report(y_test, lr_pred))","43accb0f":"#Navie Bayes\nnb = GaussianNB(priors=None, var_smoothing=1e-09).fit(X_train,y_train)\nnb","364a3495":"nb_pred = nb.predict(X_test)\nnb_pred","75580b1f":"print('Score:',accuracy_score(nb_pred, y_test))\nprint('F1-Score:',f1_score(nb_pred, y_test))\nprint('')\nprint('Confusion Martix:')\nprint(confusion_matrix(y_test, knn_pred))\nprint('')\nprint('Classification Report:')\nprint (classification_report(y_test, nb_pred))","eb368dd2":"#Random Forest\nrf = RandomForestClassifier(n_estimators=20).fit(X_train,y_train)\nrf","b9e2188e":"rf_pred = rf.predict(X_test)\nrf_pred","da16e8d5":"print('Score:',accuracy_score(rf_pred, y_test))\nprint('F1-Score:',f1_score(rf_pred, y_test))\nprint('')\nprint('Confusion Martix:')\nprint(confusion_matrix(y_test, knn_pred))\nprint('')\nprint('Classification Report:')\nprint (classification_report(y_test, rf_pred))","c9a23d5e":"<h2>Missing Values of data<\/h2>","ae210304":"<h2>Encoding the data<\/h2>","3224bf4e":"\n<h2>Conclusion<\/h2>\nA traffic collision, also called a motor vehicle collision, car accident, or car crash, occurs when a vehicle collides with another vehicle, pedestrian, animal, road debris, or other stationary obstruction, such as a tree, pole or building. Traffic collisions often result in injury, disability, death, and property damage as well as financial costs to both society and the individuals involved.\n<br><br>\nPurpose of this project was to identify the type of collisions or type of injury to the during of collision. The major important of predicting is Weather condition, Road condition, Address of collision, How many peoples are involved, How many vehicles are present and Which type of vehicles. That are hepls to predicte to what type of injury or disability in collision.\n<br><br>\nFinal discussion, we get optimal solution to the Collisions of all year in further analysis.","8ebfb8db":"<h2>Predictive Modeling & Evaluation<\/h2>","ac7c5aed":"handle the missing values, the best case remove the which columns are many missing values. \n<ul><li>INTKEY<\/li>\n    <li>EXCEPTRSNCODE<\/li>\n    <li>EXCEPTRSNDESC<\/li>\n    <li>INATTENTIONIND<\/li>\n    <li>PEDROWNOTGRNT<\/li>\n    <li>SDOTCOLNUM<\/li>\n    <li>SPEEDING<\/li><\/ul>","c22ea91f":"<h1> Data Understanding<\/h1>","75b30453":"<h2>Exploratory Data Analysis<\/h2>","6d23a8de":"Visualize for objects(string) values of the columns","47d96d3d":"Finally, get a good result for all classification algorithms. the best classifier of this problem is **Decision Tree**. It's get best score and more true positive values.","c91f9bd4":"\n<h3> Collisions<\/h3>\n<p>A collision is the event in which two or more bodies exert forces on each other in about a relatively short time. Although the most common use of the word collision refers to incidents in which two or more objects collide with great force, the scientific use of the term implies nothing about the magnitude of the force.<\/p><br>\n <h3>Trafic Collisions - All years<\/h3><br>\n A traffic collision, also called a motor vehicle collision, car accident, or car crash, occurs when a vehicle collides with another vehicle, pedestrian, animal, road debris, or other stationary obstruction, such as a tree, pole or building. Traffic collisions often result in injury, disability, death, and property damage as well as financial costs to both society and the individuals involved.\n<p>All collisions provided by SPD and recorded by Traffic Records. <\/p>\n\n"}}