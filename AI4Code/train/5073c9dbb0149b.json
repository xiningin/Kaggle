{"cell_type":{"09f8aeb1":"code","b61017e7":"code","f28321bf":"code","745fc39b":"code","1782b5cf":"code","e5ae5a8d":"code","402158a9":"code","b0289fa1":"code","5de2bb73":"code","bca92253":"code","980d4416":"code","e9718c61":"code","b574ba82":"code","ccbf2078":"code","375ec9a5":"code","d7730926":"code","c35e55b4":"code","31748b21":"code","b7562fc3":"code","289ac540":"code","02977be6":"code","1bfe70ae":"code","d58379bc":"code","09a1e711":"code","fd2818a3":"code","fc56b101":"code","d5f39528":"code","d9266248":"code","d4623a90":"code","9ccc8f83":"code","8ba9ed09":"code","86dd5f95":"code","297a3575":"code","415385f9":"code","f61619f8":"code","be4a0195":"code","aae5cf97":"code","8d0b858a":"code","3ca2470a":"code","e13c1ef6":"code","b9fb1a71":"code","153436d3":"code","062141ff":"code","8964b22c":"code","cc98cefd":"code","a9159ba6":"code","f7516f9b":"code","bfc4f12b":"code","0033935b":"code","8e8865d0":"code","26da242c":"code","89d5692d":"code","77123886":"code","ce6f8620":"code","7a8ea0d5":"code","4c5acfb5":"markdown","c2703332":"markdown","57409d59":"markdown","7c12d48c":"markdown","463da3a1":"markdown","db7ef6c1":"markdown"},"source":{"09f8aeb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n#%matplotlib notebook\nplt.rcParams[\"figure.figsize\"] = (10,6)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.warn(\"this will not show\")\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b61017e7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix\nfrom sklearn.metrics import plot_roc_curve, plot_precision_recall_curve, roc_auc_score, auc, roc_curve\nfrom sklearn.impute import SimpleImputer","f28321bf":"df = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndata = df = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","745fc39b":"df.head()","1782b5cf":"df.shape","e5ae5a8d":"df.info()","402158a9":"df.describe()","b0289fa1":"df = df.drop('id',axis=1)","5de2bb73":"df.stroke.value_counts(normalize=True)","bca92253":"df.age.sort_values()","980d4416":"round(df.age.sort_values())[:100]","e9718c61":"df[df['stroke'] == 1]['age'].nsmallest(10)","b574ba82":"df = df.drop(index = 3116)\n# gender de\u011fi\u015fkeninde yer alan 'other' de\u011ferini drop ediyoruz. ","ccbf2078":"df = df[df['age'] >= 14]","375ec9a5":"df.shape\nprint(f\"14 ya\u015f ve alt\u0131 ki\u015filer d\u00fc\u015f\u00fcnce {df.shape[0]} sat\u0131r kald\u0131. {5110-df.shape[0]} tane sat\u0131r d\u00fc\u015fm\u00fc\u015f  olduk.\")","d7730926":"df.info()","c35e55b4":"df.describe()","31748b21":"data.smoking_status.value_counts()","b7562fc3":"df['stroke'].value_counts(normalize=True)*100","289ac540":"df['stroke'].value_counts().plot(kind = 'bar');","02977be6":"sns.heatmap(df.corr(),annot = True);","1bfe70ae":"sns.boxplot(data = df, x = 'stroke', y = 'age')","d58379bc":"df.head()","09a1e711":"sns.pairplot(df,hue='stroke');","fd2818a3":"df = pd.get_dummies(df, drop_first=True)\ndf","fc56b101":"X = df.drop('stroke',axis=1)\ny = df['stroke']","d5f39528":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","d9266248":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","d4623a90":"import missingno as msno","9ccc8f83":"msno.bar(X_train)","8ba9ed09":"msno.matrix(X_train)","86dd5f95":"msno.bar(X_test)","297a3575":"X_train.describe()\n","415385f9":"sns.boxplot(X_train.bmi)","f61619f8":"X_train","be4a0195":"from sklearn.impute import SimpleImputer","aae5cf97":"imputer = SimpleImputer(missing_values=np.nan, strategy=\"median\")\n\nX_train['bmi'] = imputer.fit_transform(X_train['bmi'].values.reshape(-1,1))[:,0]\n\n","8d0b858a":"X_test['bmi'] = imputer.fit_transform(X_test['bmi'].values.reshape(-1,1))[:,0]\n","3ca2470a":"print(X_train.isnull().sum(), X_test.isnull().sum())","e13c1ef6":"X_train['bmi']","b9fb1a71":"scaler = MinMaxScaler()","153436d3":"X_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","062141ff":"from sklearn.linear_model import LogisticRegression","8964b22c":"log_model = LogisticRegression(class_weight='balanced')","cc98cefd":"log_model.fit(X_train_scaled,y_train)","a9159ba6":"y_pred = log_model.predict(X_test_scaled)","f7516f9b":"y_pred_proba = log_model.predict_proba(X_test_scaled)","bfc4f12b":"test_data = pd.concat([X_test, y_test], axis=1)\ntest_data[\"pred\"] = y_pred\ntest_data[\"pred_proba\"] = y_pred_proba[:,1]\n","0033935b":"test_data.sample(10)","8e8865d0":"from sklearn.metrics import confusion_matrix, classification_report","26da242c":"print(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","89d5692d":"from sklearn.model_selection import cross_validate","77123886":"model = LogisticRegression(class_weight = \"balanced\")\n\nscores = cross_validate(model, X_train_scaled, y_train, scoring = ['accuracy', 'precision','recall','f1'], cv = 10)\ndf_scores = pd.DataFrame(scores, index = range(1, 11))\n#df_scores\ndf_scores.mean()[2:]","ce6f8620":"y_pred_proba = log_model.predict_proba(X_test_scaled)\n\nfp_rate, tp_rate, thresholds = roc_curve(y_test, y_pred_proba[:,1])\n\noptimal_idx = np.argmax(tp_rate - fp_rate)\noptimal_threshold = thresholds[optimal_idx]\noptimal_threshold\n\ntest_data = pd.concat([X_test, y_test], axis=1)\n\ntest_data[\"pred_proba\"] = y_pred_proba[:,1]\n\ntest_data[\"pred\"] = y_pred\n\ntest_data[\"pred2\"] = test_data[\"pred_proba\"].apply(lambda x : 1 if x >= optimal_threshold else 0)\n\ny_pred2 = test_data[\"pred2\"]\n\nprint(classification_report(y_test,y_pred2))\n","7a8ea0d5":"print(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred2))","4c5acfb5":"Datam\u0131z\u0131 inceledi\u011fimiz zaman ya\u015f s\u00fctununda yer alan verilerin tahminlerimizi sapt\u0131racak \u00f6l\u00e7\u00fcde \nanlams\u0131z de\u011ferler i\u00e7erdi\u011fini g\u00f6rmekteyiz. \u00d6rne\u011fin 'stroke' olan ki\u015filerden ya\u015f\u0131 en k\u00fc\u00e7\u00fck olan \n10 ki\u015fiyi getirdi\u011fimiz zaman 1.320 ya\u015f ve 14.00 gibi ya\u015flar g\u00f6r\u00fcyoruz. Sonraki ya\u015flar\u0131n ba\u015flang\u0131c\u0131 ise en yak\u0131n 32.00\nolarak kar\u015f\u0131m\u0131za \u00e7\u0131kmaktad\u0131r. Bu datay\u0131 kullanarak daha anlaml\u0131 tahminler yapmak i\u00e7in 14 ya\u015f ve alt\u0131 herkesi drop\netmek yerinde olacakt\u0131r diye d\u00fc\u015f\u00fcn\u00fcyorum.","c2703332":"kategorik de\u011fi\u015fkenlerde yer alan de\u011ferleri scale edebilmek i\u00e7in\n1 ve 0 haline getiriyoruz. ","57409d59":"## Modelling ","7c12d48c":"Yukar\u0131daki grafikten de anla\u015f\u0131laca\u011f\u0131 \u00fczere median ile doldurmak daha mant\u0131kl\u0131 olacakt\u0131r.","463da3a1":"## Scaling","db7ef6c1":"## Train | Test Split and Filling None"}}