{"cell_type":{"42b3c398":"code","c1362ade":"code","67873b87":"code","c3865d48":"code","bff6281f":"code","78172375":"code","3da43685":"code","d511856a":"code","3ee04d2f":"code","2516070d":"markdown"},"source":{"42b3c398":"import os\nfrom kaggle.competitions import nflrush\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport gc\nimport tqdm\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c1362ade":"env = nflrush.make_env()\ntrain = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n\n","67873b87":"def preprocessing(df):\n    Poss = list(df.PossessionTeam.unique())\n    HT = list(df.HomeTeamAbbr.unique())\n    VT = list(df.VisitorTeamAbbr.unique())\n    ['HST', 'BLT', 'ARZ', 'CLV'] # poss\n    ['BAL', 'HOU', 'ARI', 'CLE'] # home\/away \n    abbrev = {'HOU':'HST','BAL':'BLT','ARI':'ARZ','CLE':'CLV'}\n\n    df = df.replace({\"HomeTeamAbbr\": abbrev})\n    df = df.replace({\"VisitorTeamAbbr\": abbrev})\n    \n    df['Team'] = np.where(df['Team'].copy()=='away',df['VisitorTeamAbbr'],df['HomeTeamAbbr'])\n    df['Offense'] = np.where(df['Team']==df['PossessionTeam'],1,0)\n    return df","c3865d48":"def flip_left(df):\n    \n    # standardize yard line\n    df['Opp'] = np.where(df['PossessionTeam']==df['FieldPosition'],0,1)\n    df['OppYardLine'] =  50-df['YardLine'] + 50 \n    df = df.rename(columns={'YardLine':'WrongYardLine'})\n    df['YardLine'] = np.where(df['Opp']==1, df['OppYardLine'], df['WrongYardLine'])\n    \n    # offensive players should always be moving from 0 to 100\n    df['AltLeftX'] = 120 - df['X'] - 10\n    df['AltLeftY'] = 160\/3 - df['Y']\n    df['AltRightX'] = df['X'] - 10\n    \n    df = df.rename(columns={'X':'WrongX','Y':'WrongY'})\n    \n    df['ToLeft'] = np.where(df['PlayDirection']=='left',1,0)\n\n    df['X'] = np.where(df['ToLeft']==1, df['AltLeftX'], df['AltRightX'])\n    df['Y'] = np.where(df['ToLeft']==1, df['AltLeftY'], df['WrongY'])\n\n    # change orientation if flipping field\n    df['Dir'] = np.radians(df['Dir'].copy())\n    df['Or'] = np.radians(df['Orientation'].copy())\n    \n    \n#  taking this step from Michael Lopez's R kernel. I don't understand why it's necessary, but let's be safe\n#   mutate(Dir_std_1 = ifelse(ToLeft & Dir < 90, Dir + 360, Dir), \n#          Dir_std_1 = ifelse(!ToLeft & Dir > 270, Dir - 360, Dir_std_1))\n\n    \n    \n    df['Dir1'] = np.where(((df.ToLeft==1)&(df['Dir'] < (np.pi\/2))), df['Dir']+(2*np.pi), df['Dir'])\n    df['Dir1'] = np.where(((df.ToLeft==0)&(df['Dir'] > ((3*np.pi)\/2))), df['Dir']-(2*np.pi), df['Dir1'])\n    \n    df['Or1'] = np.where(((df.ToLeft==1)&(df['Or'] < (np.pi\/2))), df['Or']+(2*np.pi), df['Or'])\n    df['Or1'] = np.where(((df.ToLeft==0)&(df['Or'] > ((3*np.pi)\/2))), df['Or']-(2*np.pi), df['Or1'])\n    \n    # should be (3\/2)*pi, pi\/2\n    print(df.loc[df.ToLeft==1].Dir1.median())\n    print(df.loc[df.ToLeft==0].Dir1.median())\n    \n    # this part I understand\n#     mutate(Dir_std_2 = ifelse(ToLeft, Dir_std_1 - 180, Dir_std_1))\n    df['Dir'] = np.where((df['ToLeft']==1),df['Dir1']-np.pi,df['Dir1'])\n    df['Or'] = np.where((df['ToLeft']==1),df['Or1']-np.pi,df['Or1'])\n    \n    # should be pi\/2,pi\/2\n    print(df.loc[df.ToLeft==1].Dir.median())\n    print(df.loc[df.ToLeft==0].Dir.median())\n    \n    # this part I don't understand either\n    # i guess original direction is relative to the y axis? Not relative to team direction?\n    df['Dir'] = (np.pi\/2)-df['Dir'].copy()\n    df['Or'] = (np.pi\/2)-df['Or'].copy()\n    \n    # i think pad orientation is off by 90 degrees\n    df['Or'] = df['Or'].copy() - (np.pi\/2)\n    \n    df = df.drop(columns=['Dir1'])\n    df = df.drop(columns=['Or1','Orientation','AltLeftX','AltLeftY','AltRightX','WrongX','WrongY'])\n    \n    return df \n","bff6281f":"train = preprocessing(train)\ntrain = flip_left(train)\n","78172375":"def fe(df):\n    \n    df['IsBc'] = np.where(df['NflIdRusher']==df['NflId'],1,0)\n    df = df.sort_values(by=['PlayId', 'Team', 'IsBc']).reset_index()\n    \n    # future point\n    df['U'] = df['S'] * 1.75 * np.cos(df['Dir'])+ df['X']\n    df['W'] = df['S'] * 1.75 * np.sin(df['Dir']) + df['Y']\n    \n    # orientation vector\n    df['Uo'] = df['S'] * 1.25 * np.cos(df['Or'])+ df['X']\n    df['Wo'] = df['S'] * 1.25 * np.sin(df['Or']) + df['Y']\n    \n    \n    \n    return df","3da43685":"train = fe(train)","d511856a":"#https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='lightgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax","3ee04d2f":"import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport matplotlib.path as mpath\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          los_line=False,\n                          los_line_number=50,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(15, 7)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='darkblue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n#             plt.text(x, 5, str(numb - 10),\n#                      horizontalalignment='center',\n#                      fontsize=20,  # fontname='Arial',\n#                      color='white')\n#             plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n#                      horizontalalignment='center',\n#                      fontsize=20,  # fontname='Arial',\n#                      color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n#         ax.plot([x, x], [22.91, 23.57], color='white')\n#         ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if los_line:\n        hl = los_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='orange')\n    \n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n#         plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n#                  color='yellow')\n    return fig, ax\n\n\nimport random\n\nplays = list(train.PlayId.values)\nplay = random.sample(plays,1)[0]\n\n# Michael Lopez's sample plays in his kernel with gif of play \n# play = 20170910000081\nplay = 20170910001102\nplay_df = train.loc[train.PlayId==play]\n\n# line of scrimmage\nlos = play_df.YardLine.mode()[0]\ndistance = play_df.Distance.mode()[0]\nfirst_down = los + distance\nfig, ax = create_football_field(highlight_line=True,\n                      highlight_line_number=first_down,\n                      los_line=True,\n                      los_line_number=los\n                     )\nbc = play_df.loc[play_df.IsBc==1]\noffense = play_df.loc[(play_df.Offense==1)&(play_df.IsBc==0)]\ndefense = play_df.loc[(play_df.Offense==0)]\n        \n\nfor index, row in offense.iterrows():\n    ax.arrow(row['X'], row['Y'], (row['Uo']-row['X']), (row['Wo']-row['Y']), head_width=0.2, head_length=0.7, ec='lightblue')\n    ax.arrow(row['X'], row['Y'], (row['U']-row['X']), (row['W']-row['Y']), head_width=0.2, head_length=0.7, ec='blue')\n#     ax.arrow(row['X'], row['Y'], row['U2'], row['W2'], head_width=0.2, head_length=0.7, ec='lightblue')\n# plt.scatter(offense.X,offense.Y, s=35, color='blue', zorder=5)\n\nfor index, row in defense.iterrows():\n    ax.arrow(row['X'], row['Y'], (row['Uo']-row['X']), (row['Wo']-row['Y']), head_width=0.2, head_length=0.7, ec='pink')\n    ax.arrow(row['X'], row['Y'], (row['U']-row['X']), (row['W']-row['Y']), head_width=0.2, head_length=0.7, ec='red')\n#     ax.arrow(row['X'], row['Y'], row['U2'], row['W2'], head_width=0.2, head_length=0.7, ec='pink')\nplt.scatter(defense.X,defense.Y, s=35, color='red', zorder=5)\n\n# plt.scatter(bc.X.values[0],bc.Y.values[0],s=35,color='black')\n# # ball carrier\nax.arrow(bc.X.values[0], bc.Y.values[0], (bc.U.values[0]-bc.X.values[0]), (bc.W.values[0]-bc.Y.values[0]), head_width=0.2, head_length=0.7, ec='black')\nax.arrow(bc.X.values[0], bc.Y.values[0], (bc.Uo.values[0]-bc.X.values[0]), (bc.Wo.values[0]-bc.Y.values[0]), head_width=0.2, head_length=0.7, ec='white')\n# ax.arrow(bc.X.values[0], bc.Y.values[0], bc.U2.values[0], bc.W2.values[0], head_width=0.2, head_length=0.7, ec='black')\n\nplt.title('Speed\/Dir\/Orientation Vector Plot')\nplt.legend(loc=4)\nplt.show()","2516070d":"Simple kernel that does 5 things:\n\n- fixes yardline so that it goes from 1-99\n- standardizes X and Y so that play direction doesn't matter\n- changes X to go from -10 to 110, so that it matches up with yardage\n- flips\/standardizes oriention and direction vectors based on play direction\n- plots those vectors and matches sample gifs from Michael Lopez's kernel\n"}}