{"cell_type":{"1213d781":"code","8319cf83":"code","696a13bd":"code","7365bfe5":"code","c6e90849":"code","fe0c9177":"code","c288ea86":"code","88194f93":"code","24c66f0a":"code","780f5bd4":"code","137c30c7":"code","ea96b0fc":"code","f7e56665":"code","fa2fed5d":"code","a74737e5":"code","805b3b0c":"code","7a1976b7":"code","eac83646":"code","9bf61670":"markdown","374d78aa":"markdown","10b84590":"markdown"},"source":{"1213d781":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8319cf83":"import pandas as pd\nimport numpy as np\nimport datetime \nimport calendar\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\", context=\"talk\")\nimport nltk\nnltk.download('punkt')\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer \nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nimport string\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn import decomposition\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score","696a13bd":"df_fake = pd.read_csv(\"\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv\")\ndf_real = pd.read_csv(\"\/kaggle\/input\/fake-and-real-news-dataset\/True.csv\")","7365bfe5":"df_fake[\"RESULT\"] = 0\ndf_real[\"RESULT\"] = 1","c6e90849":"df = pd.concat([df_fake,df_real],ignore_index=True)","fe0c9177":"df","c288ea86":"df[\"Final_Text\"] = df[\"title\"] + df[\"text\"]","88194f93":"df[\"RESULT\"].value_counts()","24c66f0a":"df[['RESULT','subject','Final_Text']].groupby(['RESULT','subject']).count()","780f5bd4":"lemmatizer = WordNetLemmatizer()\nporterstem = PorterStemmer()\nlst_lemmetized = []\nlst_stemmed = []\ndef Preprocessing_Lemmatizing_Stemming(text):\n    tokens = word_tokenize(text)\n    tokens = [w.lower() for w in tokens]\n    table = str.maketrans('', '', string.punctuation)\n    stripped = [w.translate(table) for w in tokens]\n    words = [word for word in stripped if word.isalpha()]\n    stop_words = set(stopwords.words('english'))\n    words = [w for w in words if not w in stop_words]\n    words_lemmtized = [lemmatizer.lemmatize(w) for w in words]\n    words_stemmed = [porterstem.stem(w) for w in words]\n    \n    lst_lemmetized.append(\" \".join(words_lemmtized))\n    lst_stemmed.append(\" \".join(words_stemmed))","137c30c7":"for i in df[\"Final_Text\"]:\n    Preprocessing_Lemmatizing_Stemming(str(i))","ea96b0fc":"X = lst_lemmetized\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', LogisticRegression())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Lemmetized text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))\n\n\nX = lst_stemmed\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', LogisticRegression())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Stemmed text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))","f7e56665":"X = lst_lemmetized\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', MultinomialNB())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Lemmetized text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))\n\n\nX = lst_stemmed\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', MultinomialNB())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Stemmed text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))","fa2fed5d":"X = lst_lemmetized\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', KNeighborsClassifier())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Lemmetized text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))\n\n\nX = lst_stemmed\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', KNeighborsClassifier())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Stemmed text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))","a74737e5":"X = lst_lemmetized\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', RandomForestClassifier())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Lemmetized text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))\n\n\nX = lst_stemmed\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', RandomForestClassifier())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Stemmed text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))","805b3b0c":"X = lst_lemmetized\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', DecisionTreeClassifier())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Lemmetized text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))\n\n\nX = lst_stemmed\ny = df[\"RESULT\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', DecisionTreeClassifier())])\n\nmodel = pipe.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy of the model using Stemmed text {}%\".format(round(accuracy_score(y_test, y_pred)*100,2)))\nprint(confusion_matrix(y_test,y_pred))","7a1976b7":"X = lst_lemmetized\ny = df[\"RESULT\"]\n\n\n\npipe = Pipeline([('tfidf', TfidfVectorizer()),\n                 ('model', DecisionTreeClassifier())])\n\ncriterion = ['gini', 'entropy']\nmax_depth = [2,4,6,8]\n\nparameters = dict(model__criterion=criterion, model__max_depth=max_depth)\n\nclf = GridSearchCV(pipe, parameters)\n\nclf.fit(X, y)","eac83646":"print(\"Grid Search results\")\nprint('Criterion:', clf.best_estimator_.get_params()['model__criterion'])\nprint('Max_depth:', clf.best_estimator_.get_params()['model__max_depth'])","9bf61670":"# DecisionTreeClassifier produces the best result, time to find the best basic parameters","374d78aa":"# **Pre-processing the text to get two corpus; Lemmetized and Stemmed**","10b84590":"# Feeding both the corpus to multiple algorithms "}}