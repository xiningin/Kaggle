{"cell_type":{"403288b2":"code","504cdd34":"code","d0f94983":"code","1aa390df":"code","8d684eb4":"code","19259992":"code","9de4e400":"code","37b60630":"code","d9c80834":"code","d6eab1a6":"code","7a7666c8":"code","0e56d458":"code","63ae33c8":"code","f43dd004":"code","23804c66":"code","ba8bc5b9":"code","2856f9c3":"code","9b2a8b36":"code","a9f1176a":"code","7e4b5b95":"code","ed0d3723":"code","73e6874d":"code","f4a26dbc":"code","f0b41bbe":"code","1570b6ec":"code","f25cf43e":"code","dd3a053b":"code","4b2e9dd8":"code","9da1b6ed":"code","4bdc1fa8":"code","b250d545":"code","be7e986a":"code","216191c9":"code","30c9c9e8":"code","b085affa":"code","aef423c0":"code","8600de27":"code","8b13b2a6":"code","1c5d4cda":"code","984c27ae":"code","1ae5ced3":"code","e958100f":"code","7744656e":"code","0efcf10c":"code","c03adb1b":"code","d11c82f3":"code","45a2ed8f":"markdown","57c98bcf":"markdown","0319bfc2":"markdown"},"source":{"403288b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","504cdd34":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","d0f94983":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1aa390df":"train.head()","8d684eb4":"test.head()","19259992":"train.info()","9de4e400":"test.info()","37b60630":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","d9c80834":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","d6eab1a6":"train[train['Embarked'].isnull()]","7a7666c8":"train.drop([61, 829], axis=0,inplace=True)","0e56d458":"test[test['Fare'].isnull()]","63ae33c8":"test.drop([152], axis=0,inplace=True)","f43dd004":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","23804c66":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","ba8bc5b9":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')","2856f9c3":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)","9b2a8b36":"train['Age'].hist(bins=30,color='darkred',alpha=0.7)","a9f1176a":"sns.countplot(x='SibSp',data=train)","7e4b5b95":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","ed0d3723":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","73e6874d":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=test,palette='winter')","f4a26dbc":"def impute_age_train(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","f0b41bbe":"def impute_age_test(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 42\n\n        elif Pclass == 2:\n            return 27\n\n        else:\n            return 24\n\n    else:\n        return Age","1570b6ec":"train['Age'] = train[['Age','Pclass']].apply(impute_age_train,axis=1)","f25cf43e":"test['Age'] = test[['Age','Pclass']].apply(impute_age_test,axis=1)","dd3a053b":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","4b2e9dd8":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","9da1b6ed":"train.drop('Cabin',axis=1,inplace=True)","4bdc1fa8":"test.drop('Cabin',axis=1,inplace=True)","b250d545":"print(train.dropna(inplace=True))","be7e986a":"print(test.dropna(inplace=True))","216191c9":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)","30c9c9e8":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","b085affa":"train = pd.concat([train,sex,embark],axis=1)","aef423c0":"train.head()","8600de27":"sex = pd.get_dummies(test['Sex'],drop_first=True)\nembark = pd.get_dummies(test['Embarked'],drop_first=True)","8b13b2a6":"test.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","1c5d4cda":"test = pd.concat([test,sex,embark],axis=1)","984c27ae":"test.head()","1ae5ced3":"X_train = train.drop('Survived',axis=1)","e958100f":"y_train = train['Survived']","7744656e":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","0efcf10c":"predictions = logmodel.predict(test)\nprint(\"Accuracy on training set: {}\".format(logmodel.score(X_train,y_train)))","c03adb1b":"my_submission = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})","d11c82f3":"my_submission.to_csv('submission.csv', index=False)","45a2ed8f":"**Data Cleaning**\n","57c98bcf":"**Converting Categorical Features**","0319bfc2":"**Building a Logistics Regression model**"}}