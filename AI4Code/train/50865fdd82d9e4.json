{"cell_type":{"515af236":"code","9c724544":"code","2bd8c3b7":"code","8c74336c":"code","cd7361ab":"code","673ae3e3":"code","ad164970":"code","94ac5362":"code","9c140a13":"code","601cc330":"code","2fbe4f54":"code","8c37c73b":"code","1e02153b":"code","788addf4":"code","077cb8fe":"code","ee5fbcd6":"code","93161eba":"code","eb521e23":"code","af788ff4":"code","9250fe1d":"code","f8286bfb":"code","19666357":"code","d0f67bfa":"code","78db6036":"code","cf200c31":"code","b21fa00b":"code","2346aa31":"code","28554341":"markdown","13878428":"markdown","60faab4b":"markdown","7bb16765":"markdown","965a82c1":"markdown","b41fad38":"markdown","4ca33bd3":"markdown","5fb0f691":"markdown","9e20f351":"markdown","fd16c34d":"markdown","9cc4da2b":"markdown","fdac5fcd":"markdown","a86540d8":"markdown","09f92fd6":"markdown","fd048b00":"markdown","3cba6aae":"markdown","6dc3691f":"markdown","26366a81":"markdown","bc1aeee2":"markdown","def52cf7":"markdown","3bff8e16":"markdown","0499b567":"markdown"},"source":{"515af236":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.animation as animation","9c724544":"# setting up data path\nDATADIR=\"..\/input\/metrica-sports-sample-data\/sample-data\/data\"\ngame_id=2","2bd8c3b7":"eventfile='\/Sample_Game_%d\/Sample_Game_%d_RawEventsData.csv' %(game_id,game_id) #file name\nevents=pd.read_csv('{}\/{}'.format(DATADIR,  eventfile))\n","8c74336c":"events.head()","cd7361ab":"events['Type'].value_counts()","673ae3e3":"def to_metric_coordinates(data,field_dimen=(106.,68.)):\n    #Converts (x,y) positions from Metrica Unit (cartesian) to meters. Origin at the center (0,0)\n    x_columns = [c for c in data.columns if c[-1].lower()==\"x\"]\n    y_columns = [c for c in data.columns if c[-1].lower()==\"y\"]\n    data[x_columns]=(data[x_columns]-0.5)*field_dimen[0]\n    data[y_columns]=(data[y_columns]-0.5)*field_dimen[1]\n    return data","ad164970":"events=to_metric_coordinates(events)\nevents.head()","94ac5362":"home_events= events[events['Team']==\"Home\"]\naway_events= events[events['Team']==\"Away\"]","9c140a13":"home_events['Type'].value_counts()","601cc330":"away_events['Type'].value_counts()","2fbe4f54":"shots=events[events['Type']==\"SHOT\"]\nshots.head()","8c37c73b":"home_shots = home_events[home_events.Type=='SHOT']\nhome_shots.head(10)","1e02153b":"away_shots = away_events[away_events.Type=='SHOT']\naway_shots.head(10)","788addf4":"home_shots['Subtype'].value_counts()","077cb8fe":"away_shots['Subtype'].value_counts()","ee5fbcd6":"home_shots['From'].value_counts()","93161eba":"away_shots['From'].value_counts()","eb521e23":"home_goals = home_shots[home_shots['Subtype'].str.contains('-GOAL')].copy()\nhome_goals","af788ff4":"away_goals = away_shots[away_shots['Subtype'].str.contains('-GOAL')].copy()\naway_goals","9250fe1d":"\n\ndef plot_pitch( field_dimen = (106.0,68.0), field_color ='green', linewidth=2, markersize=20):\n    \"\"\" plot_pitch\n    \n    Plots a soccer pitch. All distance units converted to meters.\n    \n    Parameters\n    -----------\n        field_dimen: (length, width) of field in meters. Default is (106,68)\n        field_color: color of field. options are {'green','white'}\n        linewidth  : width of lines. default = 2\n        markersize : size of markers (e.g. penalty spot, centre spot, posts). default = 20\n        \n    Returrns\n    -----------\n       fig,ax : figure and aixs objects (so that other data can be plotted onto the pitch)\n    \"\"\"\n    fig,ax = plt.subplots(figsize=(12,8)) # create a figure \n    # decide what color we want the field to be. Default is green, but can also choose white\n    if field_color=='green':\n        ax.set_facecolor('mediumseagreen')\n        lc = 'whitesmoke' # line color\n        pc = 'w' # 'spot' colors\n    elif field_color=='white':\n        lc = 'k'\n        pc = 'k'\n    # ALL DIMENSIONS IN m\n    border_dimen = (3,3) # include a border arround of the field of width 3m\n    meters_per_yard = 0.9144 # unit conversion from yards to meters\n    half_pitch_length = field_dimen[0]\/2. # length of half pitch\n    half_pitch_width = field_dimen[1]\/2. # width of half pitch\n    signs = [-1,1] \n    # Soccer field dimensions typically defined in yards, so we need to convert to meters\n    goal_line_width = 8*meters_per_yard\n    box_width = 20*meters_per_yard\n    box_length = 6*meters_per_yard\n    area_width = 44*meters_per_yard\n    area_length = 18*meters_per_yard\n    penalty_spot = 12*meters_per_yard\n    corner_radius = 1*meters_per_yard\n    D_length = 8*meters_per_yard\n    D_radius = 10*meters_per_yard\n    D_pos = 12*meters_per_yard\n    centre_circle_radius = 10*meters_per_yard\n    # plot half way line # center circle\n    ax.plot([0,0],[-half_pitch_width,half_pitch_width],lc,linewidth=linewidth)\n    ax.scatter(0.0,0.0,marker='o',facecolor=lc,linewidth=0,s=markersize)\n    y = np.linspace(-1,1,50)*centre_circle_radius\n    x = np.sqrt(centre_circle_radius**2-y**2)\n    ax.plot(x,y,lc,linewidth=linewidth)\n    ax.plot(-x,y,lc,linewidth=linewidth)\n    for s in signs: # plots each line seperately\n        # plot pitch boundary\n        ax.plot([-half_pitch_length,half_pitch_length],[s*half_pitch_width,s*half_pitch_width],lc,linewidth=linewidth)\n        ax.plot([s*half_pitch_length,s*half_pitch_length],[-half_pitch_width,half_pitch_width],lc,linewidth=linewidth)\n        # goal posts & line\n        ax.plot( [s*half_pitch_length,s*half_pitch_length],[-goal_line_width\/2.,goal_line_width\/2.],pc+'s',markersize=6*markersize\/20.,linewidth=linewidth)\n        # 6 yard box\n        ax.plot([s*half_pitch_length,s*half_pitch_length-s*box_length],[box_width\/2.,box_width\/2.],lc,linewidth=linewidth)\n        ax.plot([s*half_pitch_length,s*half_pitch_length-s*box_length],[-box_width\/2.,-box_width\/2.],lc,linewidth=linewidth)\n        ax.plot([s*half_pitch_length-s*box_length,s*half_pitch_length-s*box_length],[-box_width\/2.,box_width\/2.],lc,linewidth=linewidth)\n        # penalty area\n        ax.plot([s*half_pitch_length,s*half_pitch_length-s*area_length],[area_width\/2.,area_width\/2.],lc,linewidth=linewidth)\n        ax.plot([s*half_pitch_length,s*half_pitch_length-s*area_length],[-area_width\/2.,-area_width\/2.],lc,linewidth=linewidth)\n        ax.plot([s*half_pitch_length-s*area_length,s*half_pitch_length-s*area_length],[-area_width\/2.,area_width\/2.],lc,linewidth=linewidth)\n        # penalty spot\n        ax.scatter(s*half_pitch_length-s*penalty_spot,0.0,marker='o',facecolor=lc,linewidth=0,s=markersize)\n        # corner flags\n        y = np.linspace(0,1,50)*corner_radius\n        x = np.sqrt(corner_radius**2-y**2)\n        ax.plot(s*half_pitch_length-s*x,-half_pitch_width+y,lc,linewidth=linewidth)\n        ax.plot(s*half_pitch_length-s*x,half_pitch_width-y,lc,linewidth=linewidth)\n        # draw the D\n        y = np.linspace(-1,1,50)*D_length # D_length is the chord of the circle that defines the D\n        x = np.sqrt(D_radius**2-y**2)+D_pos\n        ax.plot(s*half_pitch_length-s*x,y,lc,linewidth=linewidth)\n        \n    # remove axis labels and ticks\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_xticks([])\n    ax.set_yticks([])\n    # set axis limits\n    xmax = field_dimen[0]\/2. + border_dimen[0]\n    ymax = field_dimen[1]\/2. + border_dimen[1]\n    ax.set_xlim([-xmax,xmax])\n    ax.set_ylim([-ymax,ymax])\n    ax.set_axisbelow(True)\n    return fig,ax","f8286bfb":"home_goals.head()","19666357":"fig,ax=plot_pitch()\nax.plot(events.loc[198]['Start X'],events.loc[198]['Start Y'],'ro')","d0f67bfa":"fig,ax=plot_pitch()\nax.plot(events.loc[198]['Start X'],events.loc[198]['Start Y'],'ro')\nax.annotate(\"\",xy=events.loc[198][['End X','End Y']], xytext = events.loc[198][['Start X','Start Y']],alpha=0.1,arrowprops=dict(arrowstyle=\"->\",color=\"r\"))","78db6036":"events[185:200]","cf200c31":"# plot event function\ndef plot_events( events, figax=None, field_dimen = (106.0,68), indicators = ['Marker','Arrow'], color='r', marker_style = 'o', alpha = 0.5, annotate=False):\n    \"\"\" plot_events( events )\n    \n    Plots Metrica event positions on a football pitch. event data can be a single or several rows of a data frame. All distances should be in meters.\n    \n    Parameters\n    -----------\n        events: row (i.e. instant) of the home team tracking data frame\n        fig,ax: Can be used to pass in the (fig,ax) objects of a previously generated pitch. Set to (fig,ax) to use an existing figure, or None (the default) to generate a new pitch plot, \n        field_dimen: tuple containing the length and width of the pitch in meters. Default is (106,68)\n        indicators: List containing choices on how to plot the event. 'Marker' places a marker at the 'Start X\/Y' location of the event; 'Arrow' draws an arrow from the start to end locations. Can choose one or both.\n        color: color of indicator. Default is 'r' (red)\n        marker_style: Marker type used to indicate the event position. Default is 'o' (filled ircle).\n        alpha: alpha of event marker. Default is 0.5    \n        annotate: Boolean determining whether text annotation from event data 'Type' and 'From' fields is shown on plot. Default is False.\n        \n    Returrns\n    -----------\n       fig,ax : figure and aixs objects (so that other data can be plotted onto the pitch)\n    \"\"\"\n\n    if figax is None: # create new pitch \n        fig,ax = plot_pitch( field_dimen = field_dimen )\n    else: # overlay on a previously generated pitch\n        fig,ax = figax \n    for i,row in events.iterrows():\n        if 'Marker' in indicators:\n            ax.plot(  row['Start X'], row['Start Y'], color+marker_style, alpha=alpha )\n        if 'Arrow' in indicators:\n            ax.annotate(\"\", xy=row[['End X','End Y']], xytext=row[['Start X','Start Y']], alpha=alpha, arrowprops=dict(alpha=alpha,width=0.5,headlength=4.0,headwidth=4.0,color=color),annotation_clip=False)\n        if annotate:\n            textstring = row['Type'] + ': ' + row['From']\n            ax.text( row['Start X'], row['Start Y'], textstring, fontsize=10, color=color)\n    return fig,ax","b21fa00b":"plot_events(events.loc[190:198], indicators =['Marker','Arrow'])","2346aa31":"# which playerer were involved in making the goal. assist and scorer. \nplot_events(events.loc[190:198], indicators =['Marker','Arrow'],annotate=True)","28554341":"#### Now let's find that which player took the shots from the \"From\" field","13878428":"#### Now we will see that, to which direction the shot was taken","60faab4b":"#### Subtype column is the result of the SHOT. Let's explore \"Subtype\"","7bb16765":"#### Let's plot the indices from 190 to 198.  From this plotting, it's a bit tricky to say from where the passing started as the dataset doesn't have the times when the player had the ball and ran with ball","965a82c1":"# Exploring the tracking data","b41fad38":"#### Plotting the passes that lead to  goal creation. \n#### As we saw that the goal happened at 198 th index. let's see some previous indexes to see from there the home team got the ball. We see that at 190 index home team got the ball and at 198 index the goal took place","4ca33bd3":"#### first start with plotting the football field where we will visualize the data","5fb0f691":"#### Let's dig into \"shots\" data from home and away team","9e20f351":"#### We will see the \"Type\" field to see different events like pass, set pieces, shots etc. that has been in the match.","fd16c34d":"#### We will work with \"Sample Game 2\" dataset. ","9cc4da2b":"#### Now, we are going to see the events when \"goal\" happened ","fdac5fcd":"# Exploring the events data","a86540d8":"# Data load and initialization\n","09f92fd6":"#### Now, we will plot the shots of both teams","fd048b00":"#### Now we will be dividing the events data into home and away events data to explore more","3cba6aae":"#### we will save the pitch figure and axis data on the variable so that we can super impose the data onto the figure\/ field later on","6dc3691f":"#### we will read event data for now","26366a81":"#### first shot is in 198th index. The \"red\" dot is the point of the field from where the shot was taken","bc1aeee2":"# Necessary Imports","def52cf7":"#### Looks like Player 1 assisted and player 10 scored","3bff8e16":"#### The positions (x,y coordinates) of each event are in between 0 to 1. These are according to the Metrica Coordinate System which is actually like Cartesian coordinate system. Here the origin (0,0) is at the bottom left corner of the field.\n\n<img align=\"center\" width=\"360\" height=\"200\" src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0e\/Cartesian-coordinate-system.svg\/1200px-Cartesian-coordinate-system.svg.png\">\n\n\n\n#### We will convert these coordinates into actual size of football fields (length 106m, width 68m). Also the origin (0,0) will be at the center of the field. ","0499b567":"### visualization of the data above"}}