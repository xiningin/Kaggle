{"cell_type":{"3f1c9836":"code","0c7fddfe":"code","44fe86f7":"code","54865cf2":"code","94ac0092":"code","cc0c4fbe":"code","66a50959":"code","66ac219d":"code","97249b31":"code","490b1adc":"code","33fa5a96":"code","4573bc08":"code","372f96d8":"code","696fc5cc":"code","e9d59cfd":"markdown","564a0068":"markdown","f7c95479":"markdown","d0de2a60":"markdown","3dedf16f":"markdown","338ad5ec":"markdown","f9f501f3":"markdown","ede16efb":"markdown","8a16333b":"markdown","e9086e74":"markdown","9d0e07d8":"markdown","d13f2e66":"markdown","dccd03ad":"markdown","f99c66dd":"markdown","a77e1874":"markdown"},"source":{"3f1c9836":"import numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\n#from keras.utils import np_utils\n#from sklearn.preprocessing import LabelEncoder","0c7fddfe":"# Random seed for reproducibility\nseed = 10\nnp.random.seed(seed)\n# Import data\ndf = pd.read_csv('..\/input\/Sensorless_drive_diagnosis.csv', sep = ' ', header = None)\n# Print first 10 samples\nprint(df.head(10))","44fe86f7":"# Check missing values\nprint(df.isna().sum())","54865cf2":"# Remove missing values IF AVAILABLE and print first 10 samples\n# df = df.dropna()\n# print(df.head(10))\n# print(df.shape)\n","94ac0092":"# Divide data into features X and target (Classes) Y\nX = df.loc[:,0:47]\nY = df.loc[:,48]\nprint(X.shape)\nprint(Y.shape)","cc0c4fbe":"# Statistical summary of the variables\nprint(X.describe())","66a50959":"# Check for class imbalance\nprint(df.groupby(Y).size())","66ac219d":"# Normalize features within range 0 (minimum) and 1 (maximum)\nscaler = MinMaxScaler(feature_range=(0, 1))\nX = scaler.fit_transform(X)\nX = pd.DataFrame(X)","97249b31":"# Convert target Y to one hot encoded Y for Neural Network\nY = pd.get_dummies(Y)\n# If target is in string form, use following code:\n# First encode target values as integers from string\n# Then perform one hot encoding\n# encoder = LabelEncoder()\n# encoder.fit(Y)\n# Y = encoder.transform(Y)\n# Y = np_utils.to_categorical(Y)","490b1adc":"# For Keras, convert dataframe to array values (Inbuilt requirement of Keras)\nX = X.values\nY = Y.values","33fa5a96":"# First define baseline model. Then use it in Keras Classifier for the training\ndef baseline_model():\n    # Create model here\n    model = Sequential()\n    model.add(Dense(15, input_dim = 48, activation = 'relu')) # Rectified Linear Unit Activation Function\n    model.add(Dense(15, activation = 'relu'))\n    model.add(Dense(11, activation = 'softmax')) # Softmax for multi-class classification\n    # Compile model here\n    model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n    return model","4573bc08":"# Create Keras Classifier and use predefined baseline model\nestimator = KerasClassifier(build_fn = baseline_model, epochs = 100, batch_size = 10, verbose = 0)\n# Try different values for epoch and batch size","372f96d8":"# KFold Cross Validation\nkfold = KFold(n_splits = 5, shuffle = True, random_state = seed)\n# Try different values of splits e.g., 10","696fc5cc":"# Object to describe the result\nresults = cross_val_score(estimator, X, Y, cv = kfold)\n# Result\nprint(\"Result: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","e9d59cfd":"Two hidden layers are defined with \"Rectified Linear Unit\" (relu) and 15 neurons each. Furthermore, this is a multi-class classification problem and there are total 11 target clsses, therefore \"softmax\" activation function and 11 neurons are used in the output layer. For hidden layers, the number of neurons should be in between the input data dimension and the output data dimension. In this case, the input data has 48 variable columns and output classes are 11. Therefore, the number of neurons for the hidden layer should be in between 11 and 48. You can try different values for the number of neurons as well as different number of hidden layers.  ","564a0068":"**Dataset Rights**: This dataset has been taken from \"University of California Irvine Machine Learning Repository\" for the knowledge purpose and all the rights for this dataset are reserved by them. For more details like content of the dataset, owner of the dataset and reference research paper, please refer the following link: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Dataset+for+Sensorless+Drive+Diagnosis","f7c95479":"No missing values. ","d0de2a60":"Since all the classes have same sample size, there is no class imbalance. ","3dedf16f":"Step 3. Data pre-processing","338ad5ec":"Input dimension (input_dim) is 48, because the input variable columns are 48. It will change as per the dimension of the input variables.","f9f501f3":"**Note**: If you use only one hidden layer, then it will be the case of simple Neural Network problem. But, if you use more than one hidden layers for example 3, it will be considered as the deep learning problem.  ","ede16efb":"Scale of all the variables is different. Therefore, feature scaling is important.    ","8a16333b":"Column indices 0 to 47 are input variables (total 48 columns). Column index 48 is target column that contains 11 different classes (1 column). ","e9086e74":"To train the Neural Network, single target column must be converted into one hot encoded fomat. For more details, visit this link: https:\/\/machinelearningmastery.com\/why-one-hot-encode-data-in-machine-learning\/","9d0e07d8":"**Dataset Information**: Dataset is extracted from the electric current drive signals. The drive contains intact as well as defective components. Therefore, dataset has 11 classes based on the condition of the components. Aim is, to predict the correct component condition based on the input variables using **Deep Learning** technique. Tools used: **Keras TensorFlow** ","d13f2e66":"From the result above, the accuracy is 94% and it can be improved by techniques like feature extraction, selection and feature engineering. ","dccd03ad":"Step 2. Import and print data","f99c66dd":"Step 4. Define Neural Network Model ","a77e1874":"Step 5. Define cross-validation and train pre-defined model "}}