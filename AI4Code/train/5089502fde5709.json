{"cell_type":{"95194cf3":"code","91f3cb03":"code","c1ff0168":"code","001b90a6":"code","9ed60ebb":"code","313db616":"code","85125e41":"code","00853f79":"code","dc1629da":"code","dd67be9f":"code","dbe70082":"code","0412c335":"code","186ad93f":"code","4ba4eb8e":"code","ccb2c4df":"code","bdec981f":"code","931a77c0":"code","23ef35dc":"code","802861fc":"code","95170b09":"code","bebca52f":"code","0bd752de":"code","0e7503e4":"code","1b725984":"markdown","ca8829b2":"markdown","05a4ed8b":"markdown"},"source":{"95194cf3":"#import python libraries\nimport pandas as pd \nimport os\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","91f3cb03":"df = pd.read_csv(\"..\/input\/habit-loop-tracker\/habitss.csv\"  ,usecols=range(1,8))\ndf = df.replace(2, 1)","c1ff0168":"df.head(10)","001b90a6":"df.describe()","9ed60ebb":"df2 = df[df == 1].count()\ndf2.plot(kind='bar',figsize=(10,7))\nplt.show()","313db616":"df.corr(\"pearson\").sort_values('Out on time', ascending=False)","85125e41":"f, ax = plt.subplots(figsize=(10, 10))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax)\n\nplt.show()","00853f79":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n","dc1629da":"#using elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nfrom kmodes.kmodes import KModes\n","dd67be9f":"X = df.iloc[:,[2, 6]].values","dbe70082":"kmodes = KModes(n_clusters = 3, init=\"Huang\", n_init = 10, verbose=1)\nclusters = kmodes.fit_predict(X)\n","0412c335":"df['clusters'] = clusters.astype(int)\ndf['clusters'] = df['clusters'].map({1: 'cluster_1', 2: 'cluster_2',0:'cluster_3'})","186ad93f":"cl1 = df[df['clusters'] == 'cluster_1']\ncl1f = df[df['clusters'] == 'cluster_1']\ncl1 = cl1[cl1 == 1].count()\ncl1.plot(kind='bar',figsize=(10,7))\nplt.show()","4ba4eb8e":"cl2 = df[df['clusters'] == 'cluster_2']\ncl2f = df[df['clusters'] == 'cluster_2']\ncl2 = cl2[cl2 == 1].count()\ncl2.plot(kind='bar',figsize=(10,7))\nplt.show()","ccb2c4df":"cl3 = df[df['clusters'] == 'cluster_3']\ncl3f = df[(df['clusters'] == 'cluster_3')]\ncl3 = cl3[cl3 == 1].count()\ncl3.plot(kind='bar',figsize=(10,7))\nplt.show()","bdec981f":"cluster_all = pd.concat([cl2f,cl1f,cl3f])\n","931a77c0":"cluster_all.groupby('clusters').count().plot.bar(stacked=True, figsize=(10,7))\nplt.show()","23ef35dc":"cluster_all[cluster_all==1].count().plot.bar(stacked=True, figsize=(10,7))\nplt.show()","802861fc":"# cluster_all.set_index('clusters').groupby('clusters').plot.bar(stacked=True, figsize=(10,7))\n# plt.show()","95170b09":"# cluster_all.pivot(index='clusters')\ncc = cluster_all[cluster_all == 1].count()\ncc.plot.bar(stacked=True, figsize=(10,7))\nplt.show()","bebca52f":"cluser1 = cl1f[cl1f==1].count().tolist()\ncluser2 = cl2f[cl2f==1].count().tolist()\ncluser3 = cl3f[cl3f==1].count().tolist()","0bd752de":"cluser1","0e7503e4":"# Heights of bars1 + bars2\nbars = np.add(cluser1, cluser2).tolist()\n \n# The position of the bars on the x-axis\nr = [0,1,2,3,4,5,6,7]\n \n# Names of group and bar width\nnames = ['Morning Meditation', 'Morning readings', 'Midday Sleep', 'Arthour',\n       'Before sleep readings', 'Before sleep meditation', 'Out on time']\nbarWidth = 1\nplt.figure(figsize=(15,6))\n# Create brown bars\nplt.bar(r, cluser1,  edgecolor='white', width=barWidth)\n# Create green bars (middle), on top of the firs ones\nplt.bar(r, cluser2, bottom=cluser1,  edgecolor='white', width=barWidth)\n# Create green bars (top)\nplt.bar(r, cluser3, bottom=bars,  edgecolor='white', width=barWidth)\n# Custom X axis\nplt.title('Clustering Habits')\nplt.legend()\nplt.xticks(r, names, fontweight='bold')\nplt.tick_params(axis='x', labelrotation=45)\nplt.xlabel(\"Habits\",labelpad=14)\nplt.legend([\"The Supervisor\", \"The Idealist\",\"The Visionary\"]);\n# Show graphic\nplt.show()\n","1b725984":"# Clustering","ca8829b2":"# Correlation","05a4ed8b":"## KMode"}}