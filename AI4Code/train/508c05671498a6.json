{"cell_type":{"4c3ae365":"code","a7cd357a":"code","98156597":"code","ee21cffb":"code","d495d873":"code","193f03dd":"code","aa544c82":"code","7db86b3e":"code","344116e4":"code","36707d9a":"code","f17aa40d":"code","03107dfd":"code","cfdf7900":"code","652a4bde":"code","ba05292d":"code","b3fb26ad":"code","df53af3d":"code","c63c2d53":"code","a852c2d9":"code","5e1d6f71":"code","c97ad1d0":"code","67bf6bc2":"code","d6ba4b40":"code","466bb971":"code","db98e5e9":"code","77139a31":"code","f363db90":"code","155efc52":"markdown","1d1c98d2":"markdown","26ce8e41":"markdown","d44a8af2":"markdown","51c44474":"markdown","e0c0aa9a":"markdown","cda889a3":"markdown","2c4013a9":"markdown"},"source":{"4c3ae365":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler , StandardScaler\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7cd357a":"df = pd.read_csv('..\/input\/daily-power-generation-in-india-20172020\/file_02.csv')\ndf.head()","98156597":"df.rename(columns={'Thermal Generation Actual (in MU)':'therm_gen_actual_MU','Thermal Generation Estimated (in MU)':'therm_gen_estimated_MU','Nuclear Generation Actual (in MU)':'nu_gen_actual_MU','Nuclear Generation Estimated (in MU)':'nu_gen_estimated_MU','Hydro Generation Actual (in MU)':'hydro_gen_actual_MU', 'Hydro Generation Estimated (in MU)':'hydro_gen_estimated_MU'},inplace=True)\ndf.head()","ee21cffb":"pd.isna(df).sum()","d495d873":"df[\"nu_gen_actual_MU\"]=df.nu_gen_actual_MU.fillna(df.nu_gen_actual_MU.mean())\ndf[\"nu_gen_estimated_MU\"]=df.nu_gen_estimated_MU.fillna(df.nu_gen_estimated_MU.mean())\npd.isna(df).sum()","193f03dd":"df.info()","aa544c82":"df['Date']= pd.to_datetime(df['Date'])\nfor column in ['therm_gen_actual_MU', 'therm_gen_estimated_MU']:\n    df[column] = df[column].apply(lambda x: np.float(x.replace(',', '')))","7db86b3e":"df.describe()","344116e4":"df1 = df.groupby(by=['Region'])[['therm_gen_actual_MU','therm_gen_estimated_MU','nu_gen_actual_MU','nu_gen_estimated_MU','hydro_gen_actual_MU','hydro_gen_estimated_MU']].sum()\ndf1","36707d9a":"plt.figure(figsize=(20,10))\nplt.scatter(df['therm_gen_actual_MU'], df['therm_gen_estimated_MU'],c='r')\nplt.xlabel('Thermal gen actual in MU')\nplt.ylabel('Thermal gen estimated in MU')\nplt.title('Thermally generated power')","f17aa40d":"plt.figure(figsize=(20,10))\nplt.scatter(df['nu_gen_actual_MU'], df['nu_gen_estimated_MU'],c='r')\nplt.xlabel('Nuclear gen actual in MU')\nplt.ylabel('Nuclear gen estimated in MU')\nplt.title('Nuclear generated power')","03107dfd":"plt.figure(figsize=(20,10))\nplt.scatter(df['hydro_gen_actual_MU'], df['hydro_gen_estimated_MU'],c='r')\nplt.xlabel('Hydro gen actual in MU')\nplt.ylabel('Hydro gen estimated in MU')\nplt.title('Hydro generated power')","cfdf7900":"therm_co_relation = df.iloc[:,3:5]\nnu_co_relation = df.iloc[:,5:7]\nhydro_co_relation = df.iloc[:,7:9]","652a4bde":"plt.figure(figsize=(12,10))\nplt.subplot(2,2,1)\nsns.heatmap(therm_co_relation.corr(), annot = True)\nplt.subplot(2,2,2)\nsns.heatmap(nu_co_relation.corr(), annot = True)\nplt.subplot(2,2,3)\nsns.heatmap(hydro_co_relation.corr(), annot = True)","ba05292d":"plt.figure(figsize=(20,10))\nplt.scatter(df['Date'], df['index'],c='g')\nplt.xlabel('Date')\nplt.ylabel('Index')\nplt.title('date index relation')","b3fb26ad":"start_date = '2020-03-01'\nend_date = '2020-07-01'","df53af3d":"mask = (df['Date'] > start_date) & (df['Date'] <= end_date)","c63c2d53":"df2 = df.loc[mask]\ndf2","a852c2d9":"X_A = df['therm_gen_actual_MU'].values.reshape(-1, 1)             \t\t\t\t\t\nY_A = df['therm_gen_estimated_MU'].values.reshape(-1, 1)\nX_B = df['hydro_gen_actual_MU'].values.reshape(-1, 1)\nY_B = df['hydro_gen_estimated_MU'].values.reshape(-1, 1)","5e1d6f71":"X_train, X_test, y_train, y_test = train_test_split(X_A, Y_A ,test_size=0.20, random_state = 40)\nprint('Shape of Training Xs:{}'.format(X_train.shape))\nprint('Shape of Test Xs:{}'.format(X_test.shape))\nprint('Shape of Training Ys:{}'.format(y_train.shape))\nprint('Shape of Test Ys:{}'.format(y_test.shape))","c97ad1d0":"learner = LinearRegression();\n\nlearner.fit(X_train,y_train); \ny_predicted = learner.predict(X_test)\nscore=learner.score(X_test,y_test);","67bf6bc2":"print(score)","d6ba4b40":"plt.figure(figsize=(18,9))\nplt.scatter(X_test,y_test)\nplt.plot(X_test,y_predicted,color='r')","466bb971":"X_train, X_test, y_train, y_test = train_test_split(X_B, Y_B ,test_size=0.20, random_state = 40)\nprint('Shape of Training Xs:{}'.format(X_train.shape))\nprint('Shape of Test Xs:{}'.format(X_test.shape))\nprint('Shape of Training Ys:{}'.format(y_train.shape))\nprint('Shape of Test Ys:{}'.format(y_test.shape))","db98e5e9":"learner = LinearRegression();\n\nlearner.fit(X_train,y_train); \ny_predicted = learner.predict(X_test)\nscore=learner.score(X_test,y_test);","77139a31":"print(score)","f363db90":"plt.figure(figsize=(18,9))\nplt.scatter(X_test,y_test)\nplt.plot(X_test,y_predicted,color='r')","155efc52":"#### Finding null values","1d1c98d2":"#### Checking Region wise Generation ","26ce8e41":"#### Converting Object","d44a8af2":"#### Replacing null values with mean","51c44474":"#### Renamimg columns for better understand","e0c0aa9a":"#### Print 1st 5 rows","cda889a3":"#### Nuclear gen has less co-relation","2c4013a9":"#### Missing data between March 2020 to July 2020 approx"}}