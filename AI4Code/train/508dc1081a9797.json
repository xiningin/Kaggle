{"cell_type":{"a29e0dbb":"code","9132c240":"code","f038245b":"code","8d02b322":"code","fa20f39d":"code","eb803f73":"code","3a74004e":"code","5495943b":"code","d5646685":"code","785991c7":"code","22b1cd38":"code","1a08f028":"code","4807f3bc":"code","11904a21":"code","4563c27e":"code","d34f235b":"code","c827c428":"code","4cff085a":"code","48f71b6d":"code","4cd16bd7":"code","9c96d5c7":"code","dc5fe26c":"code","eba01a79":"code","b9f26ab6":"code","ddc3d1c9":"code","f7ac661a":"code","33101538":"code","785adf36":"code","5977afd5":"code","b70c4e35":"code","8ab823b2":"code","7d2f3a55":"code","a8d9d45c":"code","4fbb4d52":"code","74274f92":"code","5f4a2974":"code","224985b5":"code","eb5ed929":"code","c98cca23":"code","f5992699":"code","4306a13f":"code","7941cf96":"code","fd270fb0":"markdown","fd0bf88c":"markdown","6848ba86":"markdown","688c1d49":"markdown","adbe0f10":"markdown","a28e2a0e":"markdown","2cecbcde":"markdown","7fc3076e":"markdown","74cac53d":"markdown","20c60a9f":"markdown","bd455ff6":"markdown","6b091e1f":"markdown","34d26b5f":"markdown","7da902f7":"markdown","663f8526":"markdown","762ca8ad":"markdown","06720c84":"markdown","4116665c":"markdown","052b9660":"markdown","2d914795":"markdown","e3961958":"markdown","2dba4eb4":"markdown","1fcdfba0":"markdown","23df955b":"markdown"},"source":{"a29e0dbb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime","9132c240":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')\n\ndf.info()","f038245b":"df.tail()","8d02b322":"df = df.astype({\"zip\": \"Int64\"})","fa20f39d":"df['zip'].value_counts().head()","eb803f73":"df['twp'].value_counts().head()","3a74004e":"df['reason'] = df['title'].apply(lambda s:s.split(':')[0])\ndf['reason'].head()","5495943b":"df['reason'].value_counts()","d5646685":"sns.countplot(x='reason', data=df,palette=\"Dark2\")","785991c7":"df['dt'] = df['timeStamp'].apply(lambda x: pd.to_datetime(x))","22b1cd38":"df['dt']","1a08f028":"df = df[df['dt'] <= datetime.datetime(2019, 12, 10,0,0,0)]","4807f3bc":"df['hour'] = df['dt'].apply(lambda x: x.hour)\ndf['month'] = df['dt'].apply(lambda x: x.month)\ndf['weekday'] = df['dt'].apply(lambda x: x.dayofweek)","11904a21":"df['weekday'].unique()","4563c27e":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","d34f235b":"df['weekday'] = df['weekday'].apply(lambda int:dmap[int])","c827c428":"plt.figure(figsize=(20,8))\nsns.countplot(x='weekday', hue='reason', data=df,palette=\"Dark2\")\nplt.legend(bbox_to_anchor=(1,1))","4cff085a":"plt.figure(figsize=(20,8))\nsns.countplot(x='month', hue='reason', data=df,palette=\"Dark2\")\nplt.legend(bbox_to_anchor=(1,1))","48f71b6d":"plt.figure(figsize=(20,8))\nsns.countplot(x='month', data=df,palette=\"Dark2\")","4cd16bd7":"dw_h_agg = df.pivot_table(index='weekday', columns='hour', values='e', aggfunc='count')\ndw_h_agg = dw_h_agg.loc[['Mon','Tue','Wed','Thu','Fri','Sat','Sun']]\ndw_h_agg","9c96d5c7":"plt.figure(figsize=(20,10))\nsns.heatmap(dw_h_agg,cmap= 'coolwarm')","dc5fe26c":"df['dt'] = df['timeStamp'].apply(lambda x: pd.to_datetime(x).date())","eba01a79":"df = df[df['dt'] <= datetime.date(2016, 12, 10)]","b9f26ab6":"df.tail()","ddc3d1c9":"df_aggregation = df.groupby('dt').count()","f7ac661a":"df_aggregation","33101538":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(20,8))\nsns.lineplot(x = df_aggregation.index, y= 'e', data=df_aggregation)","785adf36":"df_aggregation = df_aggregation[df_aggregation['e'] < 700]\nplt.figure(figsize=(20,8))\nsns.lineplot(x = df_aggregation.index, y= 'e', data=df_aggregation)","5977afd5":"!pip install fullmoon","b70c4e35":"from fullmoon import NextFullMoon, IsFullMoon","8ab823b2":"n = NextFullMoon()\nn.set_origin_date_string('2015-11-11')\nfull_moons = []\nwhile True:\n    next_full_moon = n.next_full_moon()\n    if next_full_moon >= datetime.datetime(2016, 12, 10):\n        break\n    full_moons.append(next_full_moon.date())","7d2f3a55":"fig, ax1 = plt.subplots(figsize=(20,8))\n\nfor fm in full_moons:\n    ax1.axvline(x=fm, color='black')\nax1.plot(df_aggregation['lat'], color='red')","a8d9d45c":"df_aggregation2 = df.groupby('dt').count()","4fbb4d52":"df_aggregation2.reset_index(inplace=True)","74274f92":"df_aggregation2['is_full_moon'] = df_aggregation2['dt'].apply(lambda x: x in full_moons)","5f4a2974":"df_aggregation2[df_aggregation2['is_full_moon'] == True]['e'].mean()","224985b5":"df_aggregation2[df_aggregation2['is_full_moon'] == False]['e'].mean()","eb5ed929":"np.std(df_aggregation2[df_aggregation2['is_full_moon'] == True]['e'])","c98cca23":"np.std(df_aggregation2[df_aggregation2['is_full_moon'] == False]['e'])","f5992699":"from scipy import stats as st\nalpha = 0.05","4306a13f":"df_true = df_aggregation2[df_aggregation2['is_full_moon'] == True]['e']\ndf_false = df_aggregation2[df_aggregation2['is_full_moon'] == False]['e']","7941cf96":"results = st.ttest_ind(df_false, df_true)\n\nprint('p-value:', results.pvalue)\n\nif (results.pvalue < alpha):\n    print(\"Rejecting the 0-hypothesis\")\nelse:\n    print(\"Failed to reject the 0-hypothesis\")","fd270fb0":"So far, an intermediate conclusion can be made that the correlation **is not traced**","fd0bf88c":"### What global conclusions can we draw?","6848ba86":"### Main questions:","688c1d49":"It is easy to see that the peak of calls falls on a time in the middle of the day on weekdays.","adbe0f10":"The fact that on Saturday and Sunday fewer accidents occur is easily explained by the fact that on weekends people often sit at home or leave somewhere, rather than driving around the city.","a28e2a0e":"In this project, I want to analyze data on calls to 911, try to find patterns and answer the main hypothesis:\n\nIs it true that people are crazier on a full moon (they call 911 more often)?","2cecbcde":"Let's get rid of emissions:","7fc3076e":"For hypothesis testing, we use Student's t-test. We have 2 hypotheses:\n1) H0: Average 911 calls on full moon and normal days are the same\n\n2) H1: Average 911 calls on full moon and normal days are different","74cac53d":"Let's create a list of all the full moons for 2016:","20c60a9f":"After the New Year and Christmas, people calm down and the number of calls decreases by ~ 10%.","bd455ff6":"#### From what localities 911 is called most often?","6b091e1f":"Let's immediately see what data we are dealing with, whether it is necessary to process the missing results or change the data type in the columns","34d26b5f":"In general, EMS and Firefighters are called equally frequently throughout the year. But accidents happen more often in winter due to bad weather.","7da902f7":"Let's look at a heatmap using seaborn and our data. First, we will need to restructure the DataFrae so that the columns become Hours and the Index becomes the Day of the week.","663f8526":"Let's create a new DF with data grouped by day","762ca8ad":"#### What indexes are used to call 911 most often this Pennsylvania region?","06720c84":"Since the data for 2020 is only for the first half of it, we will delete them so that they do not interfere with the analysis.","4116665c":"According to the small research done, it became clear that there is no special correlation and this difference is covered by an error.\n\n\nOur theory is proven not only by visual analysis, but also by checking the Student's t-test","052b9660":"We stand a count plot of distribution by days of the week and reasons for the call","2d914795":"# Introduction","e3961958":"This is how the distribution by day looks like for ~ 2016","2dba4eb4":"**Let's add some new columns for further analysis**","1fcdfba0":"Note that the weekdays are written from 0 to 6, where **0 is Monday, and 6 is Sunday**\n\nUse .map () with this dictionary to map the actual string names to the day of the week:","23df955b":"Let's create a new column with the reason for calling the rescue service and find the most common reason for calling"}}