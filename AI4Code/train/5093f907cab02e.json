{"cell_type":{"486f3de9":"code","4841e6c9":"code","21018b2f":"code","36e12fbb":"code","e58726b6":"code","ef9dcfe6":"code","6bee73bc":"code","aa626667":"code","6cf812b5":"code","b2aa54c1":"code","257c2fb3":"code","b4daed26":"code","a9e2bc92":"code","c56e2e00":"code","07c1760b":"code","560d4fcf":"code","611a40f4":"code","78fbed0d":"code","476e74c5":"code","830ffb19":"code","e9f47cd0":"code","1ce2b108":"code","2bc3dd0e":"code","7e896c0d":"code","415df29c":"markdown","53d2721a":"markdown","b2019250":"markdown","5814727e":"markdown","724c4cf0":"markdown","29bac5a4":"markdown","9ffd33db":"markdown","0ece94d4":"markdown","8ae46221":"markdown","867aebbe":"markdown","ad87014f":"markdown","84d22e35":"markdown","6ad9e465":"markdown"},"source":{"486f3de9":"import numpy as np\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, f1_score, accuracy_score, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4841e6c9":"data = pd.read_csv('\/kaggle\/input\/mental-health-in-tech-survey\/survey.csv')\ndata.head(10).style.applymap(lambda x : \"background-color: #eaedb4\")","21018b2f":"\ndef EDA(df):\n    \n    print('\\033[1m' +'EXPLORATORY DATA ANALYSIS :'+ '\\033[0m\\n')\n    print('\\033[1m' + 'Shape of the data (rows, columns):' + '\\033[0m')\n    print(df.shape, \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'All columns from the dataframe :' + '\\033[0m')\n    print(df.columns, \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Datatpes and Missing values:' + '\\033[0m')\n    print(df.info(), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    for col in df.columns:\n        print('\\033[1m' + 'Unique values in {} :'.format(col) + '\\033[0m',len(data[col].unique()))\n    print('\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Summary statistics for the data :' + '\\033[0m')\n    print(df.describe(include='all'), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n        \n    print('\\033[1m' + 'Memory used by the data :' + '\\033[0m')\n    print(df.memory_usage(), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Number of duplicate values :' + '\\033[0m')\n    print(df.duplicated().sum())\n          \nEDA(data)","36e12fbb":"plt.figure(figsize=(12,6) , dpi=100)\nsns.heatmap(data.isna(), cmap='YlGn', cbar = False, alpha = 0.6)\nplt.xticks(rotation=90)\nhfont = {'fontname':'monospace'}\nplt.title ('Heatmap For missing values',\n           **hfont,\n           color = '#29452b',\n           weight = 'semibold',\n           fontsize = 16,\n           alpha = 0.6)\nplt.xticks(**hfont)\nplt.show()","e58726b6":"cols = []\nprops = []\nprop = {'Column' : cols, 'Missing_Proportion': props}\nfor col in data.columns:\n    missing_prop = data[col].isna().sum() \/ data.shape[0] * 100\n    if missing_prop > 0:\n        cols.append(col)\n        props.append(missing_prop)\n \nprop = pd.DataFrame(prop).sort_values('Missing_Proportion', ignore_index=True)\nprop.style.applymap(lambda x : \"background-color: #eaedb4\")","ef9dcfe6":"print('\\033[1m' + 'Total countries surveyed :' + '\\033[0m', len(data.Country.value_counts()))\nprint('\\033[1m' + 'Unique states in the Data :' + '\\033[0m\\n', data.state.unique())","6bee73bc":"# Dropping\n\ndf = data.drop(columns=['state', 'comments', 'Timestamp'])\nprint('\\033[1m' + 'Columns in updated Dataframe :' + '\\033[0m', len(df.columns))","aa626667":"# Imputing\n\ndf['self_employed'] = df['self_employed']\\\n                      .fillna(pd.Series(np.random.choice(['Yes', 'No'], p=[0.117647, 0.882353], size=len(df))))\n\ndf['work_interfere'] = df['work_interfere']\\\n                      .fillna(pd.Series(np.random.choice(['Sometimes', 'Never', 'Rarely', 'Often']\n                                                         , p=[0.467337, 0.214070, 0.173869, 0.144724], size=len(df))))\n\nprint('\\033[1m' + 'Total empty values in the Dataset :' + '\\033[0m' , df.isnull().sum().sum())","6cf812b5":"# Feature engineering\n\nage = []\nfor i in data.Age:\n    if (i<18) or (i>99):\n        age.append(31)   # Median\n    else:\n        age.append(i)\n\ndf['Age'] = age\n\nother  = ['A little about you', 'p', 'Nah', 'Enby', 'Trans-female','something kinda male?','queer\/she\/they','non-binary','All','fluid', 'Genderqueer','Androgyne', 'Agender','Guy (-ish) ^_^', 'male leaning androgynous','Trans woman','Neuter', 'Female (trans)','queer','ostensibly male, unsure what that really means','trans']\nmale   = ['male', 'Male','M', 'm', 'Male-ish', 'maile','Cis Male','Mal', 'Male (CIS)','Make','Male ', 'Man', 'msle','cis male', 'Cis Man','Malr','Mail']\nfemale = ['Female', 'female','Cis Female', 'F','f','Femake', 'woman','Female ','cis-female\/femme','Female (cis)','femail','Woman','female']\n\ndf['Gender'].replace(to_replace = other, value = 'other', inplace=True)\ndf['Gender'].replace(to_replace = male, value = 'M', inplace=True)\ndf['Gender'].replace(to_replace = female, value = 'F', inplace=True)\n\nprint('\\033[1m' + 'Unique values in updated Gender column :' + '\\033[0m', df.Gender.unique())\nprint('\\033[1m' + 'Range of column Age (Before) :' + '\\033[0m', (data.Age.min(), data.Age.max()))\nprint('\\033[1m' + 'Range of column Age :' + '\\033[0m', (df.Age.min(), df.Age.max()))","b2aa54c1":"# Univariate visualization of categorical variables\n\ndf_ = df.drop(['Age', 'Country'], axis=1)\n\nbuttons = []\ni = 0\nvis = [False] * 24\n\nfor col in df_.columns:\n    vis[i] = True\n    buttons.append({'label' : col,\n             'method' : 'update',\n             'args'   : [{'visible' : vis},\n             {'title'  : col}] })\n    i+=1\n    vis = [False] * 24\n\nfig = go.Figure()\n\nfor col in df_.columns:\n    fig.add_trace(go.Pie(\n             values = df_[col].value_counts(),\n             labels = df_[col].value_counts().index,\n             title = dict(text = 'Distribution of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',))\n\nfig.update_traces(hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('YlGn').as_hex(),\n                              line=dict(color='#000000', width=1)))\n              \n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                  updatemenus = [dict(\n                        type = 'dropdown',\n                        x = 1.15,\n                        y = 0.85,\n                        showactive = True,\n                        active = 0,\n                        buttons = buttons)],\n                 annotations=[\n                             dict(text = \"<b>Choose<br>Column<b> : \",\n                             showarrow=False,\n                             x = 1.06, y = 0.92, yref = \"paper\", align = \"left\")])\n\nfor i in range(1,22):\n    fig.data[i].visible = False\n\nfig.show()","257c2fb3":"# Univariate visualization of non-categorical variables\n\n\n\nfig = make_subplots(rows = 2, cols=1)\n\nfig.append_trace(go.Bar(\n                        y = data['Country'].value_counts(),\n                        x = data['Country'].value_counts().index,\n                        name = 'Observations from Countries (Log)',\n                        text = data['Country'].value_counts(),\n                        textfont = dict(size = 10,\n                                        family = 'monospace'),\n                        textposition = 'outside',\n                        marker=dict(color=\"#6aa87b\")\n                        ), row=1, col=1)\n\nfig.append_trace(go.Histogram(\n                        x = df['Age'],\n                        nbinsx = 8,\n                        text = ['16', '500', '562', '149', '26', '5', '1'],\n                        marker =  dict(color=\"#6aa87b\")),\n                        row=2, col=1)\n\n\n# For Subplot : 1\n\nfig.update_xaxes(\n        row=1, col=1,\n        tickfont = dict(size=10, family = 'monospace'),\n        tickmode = 'array',\n        ticktext = data['Country'].value_counts().index,\n        tickangle = 60,\n        ticklen = 6,\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_yaxes(type = 'log',\n        row=1, col=1,\n        tickfont = dict(size=15, family = 'monospace'),\n        tickmode = 'array',\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_traces(\n                  marker_line_color='black',\n                  marker_line_width= 1.2,\n                  opacity=0.6,\n                  row = 1, col = 1)\n\nfig.update_xaxes(range=[-1,48], row = 1, col = 1)\n\n# For Subplot : 2\n\nfig.update_xaxes(        \n        title = dict(text = 'Age',\n                     font = dict(size = 15,\n                                 family = 'monospace')),\n        row=2, col=1,\n        tickfont = dict(size=15, family = 'monospace', color = 'black'),\n        tickmode = 'array',\n        ticktext = ['10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79'],\n        ticklen = 6,\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_yaxes(\n        row=2, col=1,\n        tickfont = dict(size=15, family = 'monospace'),\n        tickmode = 'array',\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_traces(\n                  marker_line_color='black',\n                  marker_line_width = 2,\n                  opacity = 0.6,\n                  row = 2, col = 1)\n\n\nfig.update_layout(height=1200, width=900,\n                  title = dict(text = 'Univariate visualization of non-categorical variables<br>1. Observation from Countries(Log)<br>2. Ages Count',\n                               x = 0.5,\n                               font = dict(size = 16, color ='#27302a',\n                               family = 'monospace')),\n                  plot_bgcolor='#edf2c7',\n                  paper_bgcolor = '#edf2c7',\n                  showlegend = False)\n\nfig.show()","b4daed26":"prop = pd.DataFrame(df.Gender.value_counts(normalize=True))\nprop.style.applymap(lambda x : \"background-color: #eaedb4\")","a9e2bc92":"male_country   = df[df['Gender'] == 'M'][['Country', 'Gender']]\nfemale_country = df[df['Gender'] == 'F'][['Country', 'Gender']]\nmale_country   = male_country.value_counts()\nfemale_country = female_country.value_counts()\n\nmale_country   = pd.DataFrame(male_country).reset_index().rename(columns={0:'count'}).head(15)\nfemale_country = pd.DataFrame(female_country).reset_index().rename(columns={0:'count'}).head(15)\nmale_country['count'] = male_country['count'] * -1","c56e2e00":"fig = make_subplots(rows=1, cols=2,\n                    specs=[[{}, {}]],\n                    shared_yaxes=True,\n                    horizontal_spacing=0)\n\nfig.append_trace(go.Bar(\n                 y = male_country.Country,\n                 x = male_country['count'],\n                 text = male_country['count'],\n                 textfont = dict(size = 10, color = '#6aa87b'),\n                 textposition = 'outside',\n                 name = 'Male responses',\n                 marker_color='#6aa87b',\n                 orientation = 'h'),\n                 row=1, col=1)\n\nfig.append_trace(go.Bar(\n                 y = male_country.Country,\n                 x = female_country['count'],\n                 text = female_country['count'],\n                 textfont = dict(size = 10, color = '#913f3f'),\n                 textposition = 'outside',\n                 name = 'Female responses',\n                 marker_color='#913f3f',\n                 orientation = 'h'),\n                 row=1, col=2)\n\n\nfig.update_xaxes(\n        tickfont = dict(size=15),\n        tickmode = 'array',\n        ticklen = 6,\n        showline = False,\n        showgrid = False,\n        ticks = 'outside')\n\nfig.update_yaxes(showgrid=False,\n                 categoryorder='total ascending',\n                 ticksuffix=' ',\n                 showline=False)\n\nfig.update_layout(\n                  font_family   = 'monospace',\n                  title         = dict(text = 'Gender of the survey respondents across Countries', x = 0.525),\n                  margin        = dict(t=80, b=0, l=70, r=40),\n                  hovermode     = \"y unified\",\n                  plot_bgcolor  = '#edf2c7',\n                  paper_bgcolor = '#edf2c7',\n                  font          = dict(color='black'),\n                  legend        = dict(orientation=\"h\",\n                                       yanchor=\"bottom\", y=1,\n                                       xanchor=\"center\", x=0.5),\n                  hoverlabel    = dict(bgcolor=\"#edf2c7\", font_size=13, \n                                      font_family=\"Monospace\"))\n\n\nfig.show()","07c1760b":"male   = df[df.Gender == 'M'].drop(['Gender', 'Age', 'Country'], axis=1)\nfemale = df[df.Gender == 'F'].drop(['Gender', 'Age', 'Country'], axis=1)\nother  = df[df.Gender == 'other'].drop(['Gender', 'Age', 'Country'], axis=1)","560d4fcf":"buttons = []\ni = 0\nvis = [False] * 21\n\nfor col in male.columns:\n    vis[i] = True\n    buttons.append({'label' : col,\n             'method' : 'update',\n             'args'   : [{'visible' : vis},\n             {'title'  : col}] })\n    i+=1\n    vis = [False] * 21\n\nfig = make_subplots(rows=1, cols=2,\n                    specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfor col in male.columns:\n    fig.add_trace(go.Pie(\n             values = male[col].value_counts(),\n             labels = male[col].value_counts().index,\n             title = dict(text = 'Male distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,1)\n\n\nfor col in female.columns:\n    fig.add_trace(go.Pie(\n             values = female[col].value_counts(),\n             labels = female[col].value_counts().index,\n             title = dict(text = 'Female distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,2)\n\nfig.update_traces(hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('YlGn').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=1, col=2, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n              \n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                  font_family   = 'monospace',\n                  updatemenus = [dict(\n                        type = 'dropdown',\n                        x = 0.62,\n                        y = 0.91,\n                        showactive = True,\n                        active = 0,\n                        buttons = buttons)],\n                 annotations=[\n                             dict(text = \"<b>Choose<br>Column<b> : \",\n                                  font = dict(size = 14),\n                             showarrow=False,\n                             x = 0.5, y = 1, yref = \"paper\", align = \"left\")])\n\nfor i in range(1,42):\n    fig.data[i].visible = False\nfig.data[21].visible = True\n\nfig.show()","611a40f4":"# Choosing countries with more than 30 observations\n\nus = df[df.Country == 'United States'].drop(['Age', 'Country'], axis=1)\nuk = df[df.Country == 'United Kingdom'].drop(['Age', 'Country'], axis=1)\ncd = df[df.Country == 'Canada'].drop(['Age', 'Country'], axis=1)\ngr = df[df.Country == 'Germany'].drop(['Age', 'Country'], axis=1)","78fbed0d":"buttons = []\ni = 0\nvis = [False] * 22\n\nfor col in us.columns:\n    vis[i] = True\n    buttons.append({'label' : col,\n             'method' : 'update',\n             'args'   : [{'visible' : vis},\n             {'title'  : col}] })\n    i+=1\n    vis = [False] * 22\n\nfig = make_subplots(rows=2, cols=2,\n                    specs=[[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]],\n                    vertical_spacing = 0.1)\n\nfor col in us.columns:\n    fig.add_trace(go.Pie(\n             values = us[col].value_counts(),\n             labels = us[col].value_counts().index,\n             title = dict(text = 'U.S. distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,1)\n    \nfor col in uk.columns:\n    fig.add_trace(go.Pie(\n             values = uk[col].value_counts(),\n             labels = uk[col].value_counts().index,\n             title = dict(text = 'U.K. distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,2)\n\n\nfor col in cd.columns:\n    fig.add_trace(go.Pie(\n             values = cd[col].value_counts(),\n             labels = cd[col].value_counts().index,\n             title = dict(text = 'Canada distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),2,1)\n    \nfor col in gr.columns:\n    fig.add_trace(go.Pie(\n             values = gr[col].value_counts(),\n             labels = gr[col].value_counts().index,\n             title = dict(text = 'Germany distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),2,2)\n\nfig.update_traces(hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('RdBu_r').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=2, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=2, col=2, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n              \n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                   paper_bgcolor = '#edf2c7',\n                  height = 1200,\n                  font_family   = 'monospace',\n                  updatemenus = [dict(\n                        type = 'dropdown',\n                        x = 0.60,\n                        y = 0.96,\n                        showactive = True,\n                        active = 0,\n                        buttons = buttons)],\n                 annotations=[\n                             dict(text = \"<b>Choose<br>Column<b> : \",\n                                  font = dict(size = 14),\n                             showarrow=False,\n                             x = 0.48, y = 1, yref = \"paper\", align = \"left\")])\n\nfor i in range(0,88):\n    fig.data[i].visible = False\n\nfig.data[0].visible = True\nfig.data[22].visible = True\nfig.data[44].visible = True\nfig.data[66].visible = True\n\nfig.show()","476e74c5":"seek = df[df.treatment == 'Yes'].drop(['treatment', 'Country', 'Age'], axis=1)\ndont = df[df.treatment == 'No'].drop(['treatment', 'Country', 'Age'], axis=1)","830ffb19":"buttons = []\ni = 0\nvis = [False] * 21\n\nfor col in seek.columns:\n    vis[i] = True\n    buttons.append({'label' : col,\n             'method' : 'update',\n             'args'   : [{'visible' : vis},\n             {'title'  : col}] })\n    i+=1\n    vis = [False] * 21\n\nfig = make_subplots(rows=1, cols=2,\n                    specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfor col in dont.columns:\n    fig.add_trace(go.Pie(\n             values = dont[col].value_counts(),\n             labels = dont[col].value_counts().index,\n             title = dict(text = 'No Treatment: <br>Distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,1)\n\n\nfor col in seek.columns:\n    fig.add_trace(go.Pie(\n             values = seek[col].value_counts(),\n             labels = seek[col].value_counts().index,\n             title = dict(text = 'Seek Treatment: <br>Distribution<br>of {}'.format(col),\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,2)\n\nfig.update_traces(hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('YlGn').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=1, col=2, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n              \n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                  font_family   = 'monospace',\n                  updatemenus = [dict(\n                        type = 'dropdown',\n                        x = 0.60,\n                        y = 0.95,\n                        showactive = True,\n                        active = 0,\n                        buttons = buttons)],\n                 annotations=[\n                             dict(text = \"<b>Choose<br>Column<b> : \",\n                                  font = dict(size = 14),\n                             showarrow=False,\n                             x = 0.5, y = 1.03, yref = \"paper\", align = \"left\")])\n\nfor i in range(1,42):\n    fig.data[i].visible = False\nfig.data[21].visible = True\n\nfig.show()","e9f47cd0":"df1 = df.copy()\n\nfrom sklearn.preprocessing import LabelEncoder\ncols = df1.columns\n\nencoder = LabelEncoder()\nfor col in cols:\n    encoder.fit(df1[col])\n    df1[col] = encoder.transform(df1[col])\n\nplt.figure(figsize = (16, 10), dpi = 100)\n\ncorr = df1.corr()\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nsns.heatmap(corr,\n            mask = mask,\n            cmap = 'YlGn_r',\n            vmax=.3,\n            annot = True,\n            linewidths = 0.5,\n            fmt = \".2f\",\n            alpha = 0.6)\n\nhfont = {'fontname':'monospace'}\nplt.xticks(**hfont)\nplt.yticks(**hfont)\n\nplt.title('Correlation matrix',\n          family = 'monospace',\n          fontsize = 20,\n          weight = 'semibold',\n          color = '#964545')\n\nplt.show()","1ce2b108":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\n\nwords = ''.join(data['comments'].dropna())\n\n\nplt.figure(figsize=(14,14), dpi=150)\n\nwordcloud = WordCloud(max_words=200,\n                       stopwords = STOPWORDS,\n                       background_color = \"white\",\n                       mask = np.array(Image.open(\"\/kaggle\/input\/d\/toomuchsauce\/imagebrain\/Untitled design.png\")),\n                       contour_color='#023075',\n                       contour_width=1,\n                       width=1500, height=800).generate(words)\n\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\n\nplt.show()","2bc3dd0e":"# Encoding Target\n\ndf.treatment = df.treatment.astype('category')\ndf.treatment = df.treatment.cat.codes\ndf.treatment.value_counts()\n\n\n\n# Train and Test set\n\nX = df.drop('treatment', axis =1)\ny = df.treatment\n\ncols = X.columns\n\nencoder = LabelEncoder()\nfor col in cols:\n    encoder.fit(X[col])\n    X[col] = encoder.transform(X[col])\n\n# Splitting\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 39)","7e896c0d":"from warnings import filterwarnings\nfilterwarnings(\"ignore\")\n\nsteps = [('scaler', StandardScaler()),\n         ('log_reg', LogisticRegression())]\n\npipeline = Pipeline(steps)\n\nparameters = dict(log_reg__solver = ['newton-cg', 'lbfgs', 'liblinear'],\n                  log_reg__penalty =  ['l2'],\n                  log_reg__C = [100, 10, 1.0, 0.1, 0.01])\n\n\ncv = GridSearchCV(pipeline,\n                  param_grid = parameters,\n                  cv = 5,\n                  scoring = 'accuracy',\n                  n_jobs = -1,\n                  error_score = 0.0)\n\ncv.fit(X_train, y_train)\ny_pred = cv.predict(X_test)\nlog_accuracy = accuracy_score(y_pred, y_test) * 100\n\nprint('\\033[1m' +'Best parameters : '+ '\\033[0m', cv.best_params_)\nprint('\\033[1m' +'Accuracy : {:.2f}%'.format(log_accuracy) + '\\033[0m')\nprint('\\033[1m' +'Classification report : '+ '\\033[0m\\n', classification_report(y_test, y_pred))\n\ncm = confusion_matrix(y_pred, y_test)\nprint('\\033[1m' +'Confusion Matrix : '+ '\\033[0m')\nplt.figure(dpi=100)\nsns.heatmap(cm, cmap = 'YlGn',annot = True, fmt='d')\nplt.show()","415df29c":"<div align=\"center\">\n  <img width=\"900\" height=\"600\" src=\"https:\/\/i.postimg.cc\/bJRXT1rT\/Copy-of-data-preprocessing.png\">\n<\/div>","53d2721a":"<div align=\"center\">\n  <img width=\"900\" src=\"https:\/\/i.postimg.cc\/BvP6Z5qq\/4.gif\">\n<\/div>\n","b2019250":"<div align=\"center\">\n  <img width=\"900\" src=\"https:\/\/i.postimg.cc\/02dLZNV7\/7.gif\">\n<\/div>","5814727e":"<div align=\"center\">\n  <img width=\"900\"  src=\"https:\/\/i.postimg.cc\/mgBXvMTt\/Copy-of-welcome-little-one.png\">\n<\/div>","724c4cf0":"<div align=\"center\">\n  <img width=\"900\" src=\"https:\/\/i.postimg.cc\/MpTF5GPg\/5.png\">\n<\/div>\n","29bac5a4":" About the Data\n\n\n| Column      | Description |\n| ----------- | ----------- |\n| Timestamp |Timestamp|\n| Age |Age|\n| Gender |Gender|\n| Country |Country|\n|state| If you live in the United States, which state or territory do you live in?|\n|self_employed| Are you self-employed?|\n|family_history| Do you have a family history of mental illness?|\n|treatment| Have you sought treatment for a mental health condition?|\n|work_interfere| If you have a mental health condition, do you feel that it interferes with your work?|\n|no_employees| How many employees does your company or organization have?|\n|remote_work| Do you work remotely (outside of an office) at least 50% of the time?|\n|tech_company| Is your employer primarily a tech company\/organization?|\n|benefits| Does your employer provide mental health benefits?|\n|care_options| Do you know the options for mental health care your employer provides?|\n|wellness_program| Has your employer ever discussed mental health as part of an employee wellness program?|\n|seek_help| Does your employer provide resources to learn more about mental health issues and how to seek help?|\n|anonymity| Is your anonymity protected if you choose to take advantage of mental health or substance abuse treatment resources?|\n|leave| How easy is it for you to take medical leave for a mental health condition?|\n|mentalhealthconsequence| Do you think that discussing a mental health issue with your employer would have negative consequences?|\n|physhealthconsequence| Do you think that discussing a physical health issue with your employer would have negative consequences?|\n|coworkers| Would you be willing to discuss a mental health issue with your coworkers?|\n|supervisor| Would you be willing to discuss a mental health issue with your direct supervisor(s)?|\n|mentalhealthinterview| Would you bring up a mental health issue with a potential employer in an interview?|\n|physhealthinterview| Would you bring up a physical health issue with a potential employer in an interview?|\n|mentalvsphysical| Do you feel that your employer takes mental health as seriously as physical health?|\n|obs_consequence| Have you heard of or observed negative consequences for coworkers with mental health conditions in your workplace?|\n|comments| Any additional notes or comments|\n    ","9ffd33db":"\n<div align=\"center\">\n  <img width=\"900\"  src=\"https:\/\/i.postimg.cc\/QNRLtYV1\/mental-health-in-tech.gif\">\n<\/div>\n","0ece94d4":"A simple model gave us an out of sample accuracy of about 70%.\n \n* Thank You for sitting through the notebook  \n* Feel free to ask any questions  ","8ae46221":"<div align=\"center\">\n  <img width=\"720\" height=\"600\" src=\"https:\/\/i.postimg.cc\/9MGr6rfz\/data-preprocessing.png\">\n<\/div>","867aebbe":"<div align=\"center\">\n  <img width=\"900\" height=\"600\" src=\"https:\/\/i.postimg.cc\/8kFCqKHn\/Copy-of-mental-health-in-tech.png\">\n<\/div>\n","ad87014f":"<div align=\"center\">\n  <img width=\"900\" src=\"https:\/\/i.ibb.co\/qyH92gQ\/3.png\">\n<\/div>","84d22e35":"<div align=\"center\">\n  <img width=\"900\" src=\"https:\/\/i.postimg.cc\/CKZDcyVF\/6.gif\">\n<\/div>","6ad9e465":"<div align=\"center\">\n  <img width=\"900\" height=\"600\" src=\"https:\/\/i.postimg.cc\/1tH7gcGS\/Copy-of-data-preprocessing.gif\">\n<\/div>"}}