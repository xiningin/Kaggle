{"cell_type":{"4a43615f":"code","66f81c28":"code","61ec42cc":"code","e99a837c":"code","b4a6aa73":"code","2e93cdaa":"code","fb505d22":"code","082cec6a":"code","6f291301":"code","e350cd5d":"code","ea1547fa":"code","6cfea6ed":"code","453a3779":"code","02a650d6":"code","4adbaeb4":"code","a017aaa4":"code","f6b1d879":"code","72cc322f":"code","0b3bb113":"code","907058a0":"code","6b381d6c":"code","585b29df":"code","4407d40a":"code","cdf5a16b":"code","d2e9b23b":"code","2fff9b51":"code","bd56a5b5":"code","161cd148":"code","2dda247b":"code","752eff01":"code","eaed668d":"code","17d87781":"code","24216549":"code","822548ec":"code","0b9c6297":"code","8f1692b4":"code","0eff1d2c":"code","343d1a21":"code","339ee8df":"code","ee91a62a":"code","ab937e5e":"code","87b828c7":"code","a69f296f":"markdown","34b5cb80":"markdown","6f0f167e":"markdown","b21e75c2":"markdown","a1bce8f4":"markdown","ddc17d0c":"markdown","dc2952dd":"markdown","b1fa94ed":"markdown","29887db0":"markdown","8d569db4":"markdown","4a8707b4":"markdown","8f76b96a":"markdown","803262de":"markdown","4eae46ca":"markdown","178be9ec":"markdown","a8a71afd":"markdown","860d7d40":"markdown","592fc6cb":"markdown","1ae57a87":"markdown","1262bd15":"markdown"},"source":{"4a43615f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66f81c28":"annual = pd.read_csv('\/kaggle\/input\/gold-prices\/annual_csv.csv')\nmonthly = pd.read_csv('\/kaggle\/input\/gold-prices\/monthly_csv.csv')","61ec42cc":"annual.head()","e99a837c":"monthly.head()","b4a6aa73":"annual.describe()","2e93cdaa":"monthly.describe()","fb505d22":"annual.info()","082cec6a":"monthly.info()","6f291301":"def set_ts_index(data, ts_column='Date'):\n    data[ts_column] = pd.to_datetime(data[ts_column])\n    data.set_index(ts_column, inplace=True)\n    data.info()\n    return data","e350cd5d":"annual = set_ts_index(annual)","ea1547fa":"monthly = set_ts_index(monthly)","6cfea6ed":"annual.isna().sum()","453a3779":"monthly.isna().sum()","02a650d6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['figure.figsize'] = (14,8)\nsns.set()","4adbaeb4":"fig, axes = plt.subplots(2,2)\nplots = [\n    ('annual', annual),\n    ('annual', annual[:'1975']),\n    ('log of annual', np.log(annual)),\n    ('log of annual', np.log(annual['1970':])),\n]\n\nfor i, plot_info in enumerate(plots):\n    title, data = plot_info\n    ax = axes[i\/\/2, i%2]\n    sns.lineplot(data=data, ax=ax)\n    ax.set_title(\"{} gold prices from \\n {} to {}\".format(\n        title.capitalize(), data.index.min().year, data.index.max().year\n    ), pad=-30)\nplt.show()","a017aaa4":"fig, axes = plt.subplots(2,2)\nplots = [\n    ('monthly', monthly),\n    ('monthly', monthly[:'1975']),\n    ('log of monthly', np.log(monthly)),\n    ('log of monthly', np.log(monthly['1970':])),\n]\n\nfor i, plot_info in enumerate(plots):\n    title, data = plot_info\n    ax = axes[i\/\/2, i%2]\n    sns.lineplot(data=data, ax=ax)\n    ax.set_title(\"{} gold prices from \\n {} to {}\".format(\n        title.capitalize(), data.index.min().year, data.index.max().year\n    ), pad=-30)\nplt.show()","f6b1d879":"fig, axes = plt.subplots(2,2)\nplots = [\n    ('annual', annual),\n    ('annual', annual[:'1975']),\n    ('log of annual', np.log(annual)),\n    ('log of annual', np.log(annual['1970':])),\n]\n\nfor i, plot_info in enumerate(plots):\n    title, data = plot_info\n    ax = axes[i\/\/2, i%2]\n    sns.histplot(data, ax=ax)\n    ax.set_title(\"Histogram of {} gold prices from \\n {} to {}\".format(\n        title.lower(), data.index.min().year, data.index.max().year\n    ), pad=-30)\nplt.show()","72cc322f":"fig, axes = plt.subplots(2,2)\nplots = [\n    ('monthly', monthly),\n    ('monthly', monthly[:'1975']),\n    ('log of monthly', np.log(monthly)),\n    ('log of monthly', np.log(monthly['1970':])),\n]\n\nfor i, plot_info in enumerate(plots):\n    title, data = plot_info\n    ax = axes[i\/\/2, i%2]\n    sns.histplot(data, ax=ax)\n    ax.set_title(\"Histogram of {} gold prices from \\n {} to {}\".format(\n        title.lower(), data.index.min().year, data.index.max().year\n    ), pad=-30)\nplt.show()","0b3bb113":"# we shall work with data from 1970 going forward\nannual_prices = annual['1970':].copy()\nmonthly_prices = monthly['1970':].copy()\nannual_price_changes = annual_prices.diff().dropna()\nmonthly_price_changes = monthly_prices.diff().dropna()","907058a0":"fig, ax = plt.subplots()\nsns.lineplot(data=annual_price_changes, ax=ax)\nax.set_title(\"Changes in anual gold price changes from \\n {} to {}\".format(\n    annual_price_changes.index.min().year, annual_price_changes.index.max().year\n), pad=-30)\nax.set_ylabel(\"Change in gold price\")\nplt.show()","6b381d6c":"fig, ax = plt.subplots()\nsns.lineplot(data=monthly_price_changes, ax=ax)\nax.set_title(\"Changes in monthly gold price from \\n {} to {}\".format(\n    monthly_price_changes.index.min().year, monthly_price_changes.index.max().year\n), pad=-30)\nax.set_ylabel(\"Change in gold price\")\nplt.show()","585b29df":"pd.plotting.autocorrelation_plot(annual_prices)\nplt.title(\"Autocorrelation plot of annual gold prices\")\nplt.show()","4407d40a":"pd.plotting.autocorrelation_plot(annual_price_changes)\nplt.title(\"Autocorrelation plot of changes in annual gold price\")\nplt.show()","cdf5a16b":"pd.plotting.autocorrelation_plot(monthly_prices)\nplt.title(\"Autocorrelation plot of monthly gold prices\")\nplt.show()","d2e9b23b":"pd.plotting.autocorrelation_plot(monthly_price_changes)\nplt.title(\"Autocorrelation plot of changes in monthly gold price\")\nplt.show()","2fff9b51":"from statsmodels.tsa.seasonal import seasonal_decompose","bd56a5b5":"seasonal_decompose(annual_prices, period=10).plot()\nprint(\"Time series decomposition of annual gold prices\")\nplt.show()","161cd148":"seasonal_decompose(annual_price_changes).plot()\nprint(\"Time series decomposition of changes in annual gold prices\")\nplt.show()","2dda247b":"seasonal_decompose(monthly_prices, period=150).plot()\nprint(\"Time series decomposition of monthly gold prices\")\nplt.show()","752eff01":"seasonal_decompose(monthly_price_changes, period=150).plot()\nprint(\"Time series decomposition of changes in monthly gold prices\")\nplt.show()","eaed668d":"from sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom statsmodels.tsa.arima.model import ARIMA","17d87781":"# utility functions\ndef time_series_split(data, split_point):\n    return data[:split_point], data[split_point:]\n\ndef get_features_and_targets(data, target_col='Price'):\n    X = data.reset_index().copy()\n    y = X.pop(target_col)\n    X = np.squeeze(X)\n    return X, y","24216549":"import time\n\ndef train_model(model, X, **fit_params):\n    start_time = time.perf_counter()\n    model_instance = model(X, **fit_params).fit()\n    fit_time = time.perf_counter() - start_time\n    print(f'Fit time: {fit_time}s')\n    return model_instance","822548ec":"def plot_model_performance(model, X, y, X_test, y_test):\n    rows, cols = 2, 1\n    fig, axes = plt.subplots(rows, cols, figsize=(14, 16))\n\n    predictions = model.predict(start=X.min(), end=X.max())\n    ax = axes[0]\n    sns.lineplot(x=X, y=y, ax=ax)\n    sns.lineplot(x=X, y=predictions.values, ax=ax)\n    ax.set_title(\"Actual vs predicted gold price from \\n {} to {}\".format(\n        X.min().year, X.max().year\n    ), pad=-30)\n#     print('Train RMSE: {}'.format(mean_squared_error(\n#         y, predictions, squared=False)))\n\n    y_pred = model.predict(start=X_test.min(), end=X_test.max())\n    ax = axes[1]\n    sns.lineplot(x=X_test, y=y_test, ax=ax)\n    sns.lineplot(x=X_test, y=y_pred.values, ax=ax)\n    ax.set_title(\"Actual vs predicted gold price from \\n {} to {}\".format(\n        X_test.min().year, X_test.max().year\n    ), pad=-30)\n    \n    for ax in axes:\n        ax.set_ylabel(\"Gold price\")\n        ax.legend([\"Actual\", \"Predicted\"])\n    plt.show()\n    \n    print('Test RMSE: {}'.format(mean_squared_error(\n        y_test, y_pred, squared=False)))","0b9c6297":"split_point = '2010'\nXa_train, Xa_test = time_series_split(annual_prices, split_point)\n\nXa, ya = get_features_and_targets(Xa_train)\nXa_test, ya_test = get_features_and_targets(Xa_test)","8f1692b4":"annual_ar_model = train_model(AutoReg, Xa_train, lags=10)\n\nplot_model_performance(annual_ar_model, Xa, ya, Xa_test, ya_test)","0eff1d2c":"annual_arima_model = train_model(ARIMA, Xa_train, order=(10,1,0))\n\nplot_model_performance(annual_arima_model, Xa, ya, Xa_test, ya_test)","343d1a21":"Xm_train, Xm_test = time_series_split(monthly_prices, split_point)\n\nXm, ym = get_features_and_targets(Xm_train)\nXm_test, ym_test = get_features_and_targets(Xm_test)","339ee8df":"monthly_ar_model = train_model(AutoReg, Xm_train, lags=150)\n\nplot_model_performance(monthly_ar_model, Xm, ym, Xm_test, ym_test)","ee91a62a":"monthly_arima_model = train_model(ARIMA, Xm_train, order=(150,1,0))\n\nplot_model_performance(monthly_arima_model, Xm, ym, Xm_test, ym_test)","ab937e5e":"annual_ar_model = AutoReg(annual_prices, lags=10).fit()\n\nya_pred = annual_ar_model.predict(start='2020', end='2021')","87b828c7":"annual_data = annual_prices.append(pd.DataFrame(ya_pred, columns=['Price']))\nannual_prices.tail(5)","a69f296f":"The autocorrelation of monthly data is about 150 months. This implies that the price of gold this month is dependent on the price of gold for the last 150 months, i.e: last month, going backwards up to 12.5 years ago.","34b5cb80":"## Exploratory Data Analysis","6f0f167e":"## Modelling","b21e75c2":"The autocorrelation of annual data is about 10 years. This implies that the price of gold this year is dependent on the price of gold for the last 10 years, i.e: last year, going backwards up to 10 years ago.","a1bce8f4":"The distribution of the data from 1970 is lognormal but left skewed.","ddc17d0c":"### Plotting the autocorrelation","dc2952dd":"### Time Series Analysis","b1fa94ed":"The annual data seems to have a nice trend and some seasonality, just as we expected. The monthly data, however, is quite noisy and though it had good-looking results on the autocorrelation plot, the same doesn't translate to the time series decomposition.","29887db0":"### Plotting the time series","8d569db4":"### Differencing","4a8707b4":"## Prediction\nWhat will be the price of gold in 2020 and 2021?","8f76b96a":"### Annual Gold Prices","803262de":"Gold prices seem to be rising exponentially from 1970.\n\n### Question\n\nWhy is the price of gold from 1950 to 1968 constant?\nThis is due to the [Bretton Woods System](https:\/\/en.wikipedia.org\/wiki\/Bretton_Woods_system)","4eae46ca":"### Monthly Gold Prices","178be9ec":"### Time series decomposition","a8a71afd":"## Data Cleaning","860d7d40":"# Gold Prices EDA and modelling\n## Loading the data","592fc6cb":"The ARIMA model gives accurate predictions for the first 12 months.","1ae57a87":"The ARIMA model gives accurate predictions for the first 2 years.","1262bd15":"### Visualizing the distribution of the data"}}