{"cell_type":{"06099cc1":"code","4a856c6a":"code","44a830e9":"code","4f731f96":"code","ea1cada5":"code","ff24f7bb":"code","926bb7f7":"code","156a2799":"code","44c8c715":"code","24d5b70a":"code","08097219":"code","ae6d6b56":"code","5efa5cac":"code","ccc42235":"code","289afbbd":"code","e1459629":"code","84a4b0aa":"code","b9866516":"code","5fced6f9":"markdown","f7ca3b57":"markdown","e93ad65a":"markdown","ac3d1c69":"markdown","576269c2":"markdown","71e22126":"markdown","0a2e4951":"markdown","cf650c9b":"markdown","3d46c4c6":"markdown","c3e4e722":"markdown","184e8188":"markdown","6d72af7f":"markdown"},"source":{"06099cc1":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport gc\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfpath = '\/kaggle\/input\/santa-2019-revenge-of-the-accountants\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-2019-revenge-of-the-accountants\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')","4a856c6a":"family_size_dict = data[['n_people']].to_dict()['n_people']\nm,_ = data.shape \n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].T.to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","44a830e9":"data.head()","4f731f96":"plt.figure(figsize=(16,9))\nsns.countplot(data['n_people'])","ea1cada5":"plt.figure(figsize=(16,9))\nsns.distplot(data['choice_0'],bins=100,kde=False)\nplt.title('Preferred Choice of each Family')","ff24f7bb":"plt.figure(figsize=(16,9))\nsns.distplot(data['choice_9'],bins=100,kde=False)\nplt.title('Least Preferred Choice for each Family')","926bb7f7":"def weekday(days):\n    weekday = []\n    for day in days:\n        if day%7==2:\n            weekday.append('Monday')\n        elif day%7==1:\n            weekday.append('Tuesday')\n        elif day%7==0:\n            weekday.append('Wednesday')\n        elif day%7==6:\n            weekday.append('Thursday')\n        elif day%7==5:\n            weekday.append('Friday')\n        elif day%7==4:\n            weekday.append('Saturday')\n        else:\n            weekday.append('Sunday')\n    return weekday\nweekday_list = [weekday(data[cols].values[i][:].tolist()) for i in range(5000)]\nweekday_list = pd.DataFrame(weekday_list,columns = ['weekday_'+cols[i] for i in range(10)])\nweekday_list","156a2799":"plt.figure(figsize=(16,9))\nsns.countplot(weekday_list['weekday_choice_0'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])","44c8c715":"plt.figure(figsize=(16,9))\nsns.countplot(weekday_list['weekday_choice_9'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])","24d5b70a":"#lets set a difficulty score per choice, 0 is weekdays, 1 is weekends, 2 is christmas eve\ndef difficulty(days):\n    dif = []\n    for day in days:\n        wd = weekday([day])\n        if day == 1 or day == 2 or day == 3:\n            dif.append(1)\n        elif wd[0]=='Monday' or wd[0]=='Tuesday' or wd[0]=='Wednesday' or wd[0]=='Thursday':\n            dif.append(0)\n        else:\n            dif.append(1)\n    return dif\n\ndif_list = [difficulty(data[cols].values[i][:].tolist()) for i in range(5000)]\ndif_list = pd.DataFrame(dif_list,columns = ['difficulty_'+cols[i] for i in range(10)])\ndif_sum = pd.DataFrame(np.sum(dif_list,axis=1),columns=['dif_sum'])\n#data = pd.concat([data,dif_sum],axis=1)\nplt.figure(figsize=(16,9))\nsns.countplot(dif_sum['dif_sum'])\nplt.title(\"Number of difficult days per family\")\nprint(\"The mean number of difficult days per family is: {}\".format(np.mean(dif_sum['dif_sum'])))\nprint(\"Standard deviation of difficult days is: {}\".format(np.std(dif_sum['dif_sum'])))","08097219":"family_size = list(range(2,9))\ncost_per_family_size = np.zeros((11,len(family_size)))\ndef choice_cost(n,choice):\n    if choice == 0:\n        return 0\n    elif choice == 1:\n        return 50\n    elif choice == 2:\n        return 50 + 9 * n\n    elif choice == 3:\n        return 100 + 9 * n\n    elif choice == 4:\n        return 200 + 9 * n\n    elif choice == 5:\n        return 200 + 18 * n\n    elif choice == 6:\n        return 300 + 18 * n\n    elif choice == 7:\n        return 300 + 36 * n\n    elif choice == 8:\n        return 400 + 36 * n\n    elif choice == 9:\n        return 500 + 36 * n + 199 * n\n    else:\n        return 500 + 36 * n + 398 * n\nj = 0\nfor n in family_size:  \n    for i in range(11):\n        cost_per_family_size[i,j]=choice_cost(n,i)\n    j+=1\n\ncost_per_family_size = pd.DataFrame(cost_per_family_size.T,index = [str(x)+'_people' for x in range(2,9)],columns = ['choice_'+str(x) for x in range(11)])\ncost_per_family_size['n_people']=list(range(2,9))\ncost_per_family_size","ae6d6b56":"plt.figure(figsize=(16,9))\nfor i in range(11):\n    sns.lineplot(data=cost_per_family_size,x='n_people',y='choice_'+str(i))","5efa5cac":"plt.figure(figsize=(16,9))\nfor i in range(2,9):\n    sns.lineplot(data=cost_per_family_size,x='n_people',y='choice_'+str(i))","ccc42235":"sorted_families = []\ndaily_occupancy={i:0 for i in range(1,101)}\nanswer = np.zeros((m,3))\nfor j in range(4):\n    for i in range(m):\n        if difficulty(data.loc[i][['choice_'+str(j)]])==[0] and i not in sorted_families and daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+data.loc[i][['n_people']][0]<300:\n            sorted_families.append(i)\n            answer[i,0]=i\n            answer[i,1]=data.loc[i][['choice_'+str(j)]]\n            answer[i,2]=j\n            daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]","289afbbd":"def daily_plot(answer):\n    def get_daily_occupancy(answer):\n        daily_occupancy={i:0 for i in range(0,101)}\n        for i in range(m):\n            daily_occupancy[int(answer[i,1])]+=data.loc[i]['n_people']\n        return daily_occupancy\n    daily_occupancy = get_daily_occupancy(answer)\n    plt.figure(figsize=(12,7))\n    fig = sns.lineplot(x=list(range(1,101)),y=[daily_occupancy[i] for i in range(1,101)])\n    ax = plt.axes()\n    x = np.linspace(0, 100, 100)\n    y= np.linspace(125,125,100)\n    ax.plot(x, y,color='green');\n    x = np.linspace(0, 100, 100)\n    y= np.linspace(300,300,100)\n    ax.plot(x, y,color='red')\ndaily_plot(answer)","e1459629":"for j in range(4,8):\n    for i in range(m):\n        if difficulty(data.loc[i][['choice_'+str(j)]])==[0] and i not in sorted_families and daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]<125:\n            sorted_families.append(i)\n            answer[i,0]=i\n            answer[i,1]=data.loc[i][['choice_'+str(j)]]\n            answer[i,2]=j\n            daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\ndaily_plot(answer)","84a4b0aa":"for j in range(4):\n    for i in range(m):\n        if (difficulty(data.loc[i][['choice_'+str(j)]])==[1] or difficulty(data.loc[i][['choice_'+str(j)]])==[2]) and i not in sorted_families and daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+data.loc[i][['n_people']][0]<300:\n            sorted_families.append(i)\n            answer[i,0]=i\n            answer[i,1]=data.loc[i][['choice_'+str(j)]]\n            answer[i,2]=j\n            daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\ndaily_plot(answer)","b9866516":"del sorted_families\nfor k,v in daily_occupancy.items():\n    if v<125:\n        for j in range(4):\n            for i in range(m):\n                if daily_occupancy[data.loc[i][['choice_'+str(int(answer[i,2]))]][0]]-data.loc[i][['n_people']][0]>=125 and data.loc[i][['choice_'+str(j)]][0]==k and daily_occupancy[k]<=125:\n                    answer[i,0]=i\n                    answer[i,1]=data.loc[i][['choice_'+str(j)]]\n                    answer[i,2]=j\n                    daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\ndaily_plot(answer)","5fced6f9":"**You probably gain a lot from prioritizing choices in the weekdays Mon-Thu since most people's other choices are in the weekends**\n\nTuesday seems higher than it is because it is also christmas eve, which is the day with higher preference overall.\n\nIf you initialize your guess by getting the minimum ammount of people in each weekday with the minimum possible cost, the weekends should be easy enough to optimize.","f7ca3b57":"**This is a feature made to visualize how much families prefer weekends and days near christmas over weekdays.**\nWe show here that for 10 choices, on average, 7 of them are either near christmas or on the weekends (fridays, saturdays and sundays).\nThe choice between weekends and weekdays seem to follow a normal distribution with a mean of 7.2 and standard deviation of 1.4.","e93ad65a":"After weekend choice initialization, there's only 3 points below 125 participants, let's run a quick unoptimized swap just to get a baseline.\nWe need to start thinking about swaps because all families are sorted.","ac3d1c69":"After a simple greedy initialization of the four most preferred choices we have the graph above, indicating that just simply favouring those four main choices are not enough to comply with the minimum of 125 people on weekdays. Let's try now to correct the few points which are below the green line.","576269c2":"**There are certain choices that we need to make that take into account the number of people, this will be further explored later**","71e22126":"Every weekday is now initialized between 125 and 300 persons per day, now let's try and do the same with the weekends.","0a2e4951":"from https:\/\/www.kaggle.com\/capiru\/santa-s-workshop-eda-sorting-visualization\n\n**Santa 2019: Revenge of the Accountants**\nThis competition is a scheduling optimization challenge where you have two major factors to consider:\n1. The preferred day for a family to visit has costs associated to it. Where the costs are as follows:\n    * choice_0: no consolation gifts\n    * choice_1: one 50 gift card to Santa's Gift Shop\n    * choice_2: one 50 gift card, and 25% off Santa's Buffet (value 9) for each family member\n    * choice_3: one 100 gift card, and 25% off Santa's Buffet (value 9) for each family member\n    * choice_4: one 200 gift card, and 25% off Santa's Buffet (value 9) for each family member\n    * choice_5: one 200 gift card, and 50% off Santa's Buffet (value 18) for each family member\n    * choice_6: one 300 gift card, and 50% off Santa's Buffet (value 18) for each family member\n    * choice_7: one 300 gift card, and free Santa's Buffet (value 36) for each family member\n    * choice_8: one 400 gift card, and free Santa's Buffet (value 36) for each family member\n    * choice_9: one 500 gift card, and free Santa's Buffet (value 36) for each family member, and 50% off North Pole Helicopter Ride tickets (value 199) for each family member\n    * otherwise: one 500 gift card, and free Santa's Buffet (value 36) for each family member, and free North Pole Helicopter Ride tickets (value 398) for each family member\n\n","cf650c9b":"**Each family has 10 main choices, which each choice is a day in the 100 day period they want to visit Santa, the higher tiers of preference for a certain day, the more we pay, so we are trying to optimize the most prefered choice we can give each family as to minimize costs. **","3d46c4c6":"We should definitely avoid choices 9 and no choices since they grow really quickly with family size.","c3e4e722":"**All choices seem to follow the same distribution, the takeaways are:**\n*     Friday\/Saturday\/Sunday are busier overall\n*     Weekdays, even the ones near christmas, have lower preference overall.","184e8188":"Now every family is initialized by their preferred choice, going for weekdays first.","6d72af7f":"No choice overlaps family size, indicating that no matter the family size it's always better to prioritize choice over family size, and within the same choice category, prioritise family size."}}