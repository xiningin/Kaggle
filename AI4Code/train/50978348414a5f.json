{"cell_type":{"32cb7b65":"code","7c7a4475":"code","bb898ac3":"code","b969d67d":"code","791debd6":"code","93d1fafd":"code","0ce002ef":"code","aee8728a":"code","60150680":"code","9cbadea0":"code","8250155f":"code","e9e00d1f":"code","b65600b2":"code","a842f8b4":"code","1525a5ab":"code","5cc502bf":"code","c0c716c8":"code","5b04cdb6":"code","71a91c63":"code","ebb4e2e5":"code","85588480":"markdown","1bfb0a56":"markdown","e0960d8e":"markdown","f9a9e9ec":"markdown","328dd969":"markdown","bc00ad93":"markdown","64dced7c":"markdown","735da710":"markdown","bce6d121":"markdown","9cabcd4a":"markdown","10d59ab1":"markdown","86e2bc35":"markdown","649e9b83":"markdown"},"source":{"32cb7b65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c7a4475":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","bb898ac3":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","b969d67d":"def getMetadata(dataframe) :\n    metadata_matrix = pd.DataFrame({\n                    'Datatype' : dataframe.dtypes, # data types of columns\n                    'Total_Element': dataframe.count(), # total elements in columns\n                    'Null_Count': dataframe.isnull().sum(), # total null values in columns\n                    'Null_Percentage': round(dataframe.isnull().sum()\/len(dataframe) * 100,2) ,# percentage of null values\n                    'Unique_Value': dataframe.nunique()\n                       })\n    return metadata_matrix\n\ntrain_metadata=getMetadata(train_data)\ntrain_metadata","791debd6":"msno.bar(train_data)\nplt.show()","93d1fafd":"plt.figure(figsize = [10,6])\nsns.countplot(x='Survived',data=train_data)\nplt.title(\"Plot showing the number of people who died vs number of people who survived\")\nplt.show()","0ce002ef":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","aee8728a":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","60150680":"plt.figure(figsize = [10,6])\nsns.countplot(x='Survived',data=train_data,hue='Sex')\nplt.title(\"Plot showing the number of people who died vs number of people who survived based on their gender\")\nplt.show()","9cbadea0":"plt.figure(figsize = [10,6])\nsns.countplot(x='Survived',data=train_data,hue='Pclass')\nplt.title(\"Plot showing the number of people who died vs number of people who survived based on their Passenger Class\")\nplt.show()","8250155f":"plt.figure(figsize = [10,6])\nsns.countplot(x='Survived',data=train_data,hue='SibSp')\nplt.title(\"Plot showing the number of people who died vs number of people who survived based on the number of Siblings\/Spouses onboard\")\nplt.show()","e9e00d1f":"plt.figure(figsize = [10,6])\nsns.countplot(x='Survived',data=train_data,hue='Parch')\nplt.title(\"Plot showing the number of people who died vs number of people who survived based on the number of Parents\/Children onboard\")\nplt.show()","b65600b2":"plt.figure(figsize = [10,6])\nsns.histplot(data=train_data, x=\"Age\", kde=True, hue = 'Survived')\nplt.title(\"Plot showing the number of people who died vs number of people who survived based on their Age\")\nplt.show()","a842f8b4":"y = train_data[\"Survived\"]","1525a5ab":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\"]\nX = train_data[features].copy()\nX_test = test_data[features].copy()\n","5cc502bf":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X.columns if X[cname].nunique() < 10 and \n                        X[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X.columns if X[cname].dtype in ['int64', 'float64']]\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='most_frequent')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","c0c716c8":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=1000, max_depth=20, random_state=1)","5b04cdb6":"# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X, y)","71a91c63":"predictions = my_pipeline.predict(X_test)","ebb4e2e5":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","85588480":"Should cite the getMetadata function here which I got from [Titanic_Logistic_Regression](https:\/\/www.kaggle.com\/prabhatm0307\/titanic-logistic-regression) by [Prabhat Mishra](https:\/\/www.kaggle.com\/prabhatm0307).","1bfb0a56":"We can see that majority of the people who died belonged to Third Class, and the majority of the people who survived belonged to First Class, but not by much.","e0960d8e":"**Investigating the Data:-**","f9a9e9ec":"**Defining the model:-**","328dd969":"**Generating Predictions:-**","bc00ad93":"We can see that the majority of the people who died were Male, while the majority of the people who survived were Female.","64dced7c":"**Defining the features to be used for modelling:-**","735da710":"**Loading the data:-**","bce6d121":"### Exploratory Data Analysis","9cabcd4a":"### Identifying the output:-","10d59ab1":"**Pre-processing the data:-**","86e2bc35":"**Generating the Output:-**","649e9b83":"**Creating Pipeline:-**"}}