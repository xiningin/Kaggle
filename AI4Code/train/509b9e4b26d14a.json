{"cell_type":{"85ef7414":"code","8a31be34":"code","1d3e9353":"code","1dc26e86":"code","43552115":"code","21c83be8":"code","f6332224":"code","22742d73":"code","42a74831":"code","102009dc":"code","ecebf8cd":"code","fdc0b5c7":"code","1a7e84f4":"code","0842a79b":"code","7062f99e":"code","412793c9":"code","79934db1":"code","f5afda99":"code","3edea177":"code","7991e204":"code","8afc4ad4":"code","a83a3a77":"code","06adab17":"code","76fbd70e":"code","e2604660":"code","af967a4f":"code","67f39c5e":"markdown","eece5ab0":"markdown","335ee215":"markdown","8190f906":"markdown","2514c710":"markdown","5f06b0b6":"markdown","7a39bb64":"markdown","cc4e3ce6":"markdown","82b7d770":"markdown","c2ffd8af":"markdown","775ac10c":"markdown","740eae64":"markdown","3ba4bc4f":"markdown","b04fa493":"markdown","f26dcd1a":"markdown","87168f10":"markdown","4392a8cd":"markdown"},"source":{"85ef7414":"import pandas as pd\nfrom math import sqrt\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","8a31be34":"movies_df = pd.read_csv('\/kaggle\/input\/grouplens-2018\/ml-latest\/movies.csv')\nratings_df = pd.read_csv('\/kaggle\/input\/grouplens-2018\/ml-latest\/ratings.csv')","1d3e9353":"movies_df.shape","1dc26e86":"movies_df.tail()","43552115":"#Using regular expressions to find a year stored between parentheses\n#We specify the parantheses so we don't conflict with movies that have years in their titles\nmovies_df['year'] = movies_df.title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\n#Removing the parentheses\nmovies_df['year'] = movies_df.year.str.extract('(\\d\\d\\d\\d)',expand=False)\n#Removing the years from the 'title' column\nmovies_df['title'] = movies_df.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\n#Applying the strip function to get rid of any ending whitespace characters that may have appeared\nmovies_df['title'] = movies_df['title'].apply(lambda x: x.strip())\nmovies_df.head()","21c83be8":"#Dropping the genres column, no need for them\nmovies_df = movies_df.drop('genres', 1)\nmovies_df.head()","f6332224":"ratings_df.head()","22742d73":"#Drop removes a specified row or column from a dataframe\nratings_df = ratings_df.drop('timestamp', 1)\nratings_df.head()","42a74831":"# here's a hypothetical user that we want to make suggestions for\nuserInput = [\n            {'title':'Avatar 2', 'rating':7},\n            {'title':'13 Hours', 'rating':3.5},\n            {'title':'Jumanji', 'rating':7},\n            {'title':\"Sherlock: The Abominable Bride\", 'rating':8},\n            {'title':'Jurassic World', 'rating':8},\n    {'title':'Star Wars: Episode VII - The Force Awakens', 'rating':6},\n    {'title':'Avengers: Age of Ultron', 'rating':9},\n    {'title':'Ant-Man', 'rating':8},\n    {'title':'Justice League: Throne of Atlantis', 'rating':7}]\ninputMovies = pd.DataFrame(userInput)\ninputMovies","102009dc":"inputId = movies_df[movies_df['title'].isin(inputMovies['title'].tolist())]\ninputId.head()","ecebf8cd":"inputMovies = pd.merge(inputId, inputMovies)\ninputMovies","fdc0b5c7":"inputMovies = inputMovies.drop('year', 1)\ninputMovies","1a7e84f4":"#Filtering out users that have watched movies that the input has watched and storing it\nuserSubset = ratings_df[ratings_df['movieId'].isin(inputMovies['movieId'].tolist())]\nuserSubset.head()","0842a79b":"userSubsetGroup = userSubset.groupby(['userId'])","7062f99e":"#Sorting it so users with movie most in common with the input will have priority\nuserSubsetGroup = sorted(userSubsetGroup,  key=lambda x: len(x[1]), reverse=True)","412793c9":"userSubsetGroup[0]","79934db1":"userSubsetGroup = userSubsetGroup[0:100]","f5afda99":"#Store the Pearson Correlation in a dictionary, where the key is the user Id and the value is the coefficient\npearsonCorrelationDict = {}\n\n#For every user group in our subset\nfor name, group in userSubsetGroup:\n    #Let's start by sorting the input and current user group so the values aren't mixed up later on\n    group = group.sort_values(by='movieId')\n    inputMovies = inputMovies.sort_values(by='movieId')\n    #Get the N for the formula\n    nRatings = len(group)\n    #Get the review scores for the movies that they both have in common\n    temp_df = inputMovies[inputMovies['movieId'].isin(group['movieId'].tolist())]\n    #And then store them in a temporary buffer variable in a list format to facilitate future calculations\n    tempRatingList = temp_df['rating'].tolist()\n    #Let's also put the current user group reviews in a list format\n    tempGroupList = group['rating'].tolist()\n    #Now let's calculate the pearson correlation between two users, so called, x and y\n    Sxx = sum([i**2 for i in tempRatingList]) - pow(sum(tempRatingList),2)\/float(nRatings)\n    Syy = sum([i**2 for i in tempGroupList]) - pow(sum(tempGroupList),2)\/float(nRatings)\n    Sxy = sum( i*j for i, j in zip(tempRatingList, tempGroupList)) - sum(tempRatingList)*sum(tempGroupList)\/float(nRatings)\n    \n    #If the denominator is different than zero, then divide, else, 0 correlation.\n    if Sxx != 0 and Syy != 0:\n        pearsonCorrelationDict[name] = Sxy\/sqrt(Sxx*Syy)\n    else:\n        pearsonCorrelationDict[name] = 0\n","3edea177":"pearsonDF = pd.DataFrame.from_dict(pearsonCorrelationDict, orient='index')\npearsonDF.columns = ['similarityIndex']\npearsonDF['userId'] = pearsonDF.index\npearsonDF.index = range(len(pearsonDF))\npearsonDF.head()","7991e204":"topUsers=pearsonDF.sort_values(by='similarityIndex', ascending=False)[0:50]\ntopUsers.head()","8afc4ad4":"topUsersRating = topUsers.merge(ratings_df, left_on='userId', right_on='userId', how='inner')\ntopUsersRating.head()","a83a3a77":"#Multiplies the similarity by the user's ratings\ntopUsersRating['weightedRating'] = topUsersRating['similarityIndex']*topUsersRating['rating']\ntopUsersRating.head()","06adab17":"#Applies a sum to the topUsers after grouping it up by userId\ntempTopUsersRating = topUsersRating.groupby('movieId').sum()[['similarityIndex','weightedRating']]\ntempTopUsersRating.columns = ['sum_similarityIndex','sum_weightedRating']\ntempTopUsersRating.head()","76fbd70e":"#Creates an empty dataframe\nrecommendation_df = pd.DataFrame()\n#Now we take the weighted average\nrecommendation_df['weighted average recommendation score'] = tempTopUsersRating['sum_weightedRating']\/tempTopUsersRating['sum_similarityIndex']\nrecommendation_df['movieId'] = tempTopUsersRating.index\nrecommendation_df.head()","e2604660":"recommendation_df = recommendation_df.sort_values(by='weighted average recommendation score', ascending=False)\nrecommendation_df.head(10)","af967a4f":"movies_df.loc[movies_df['movieId'].isin(recommendation_df.head(10)['movieId'].tolist())]","67f39c5e":"In this notebook, a simple implementation of a recommendation systems based on Collaborative Filtering for movies is presented.","eece5ab0":"Now, let's start recommending movies to the input user.\n\n#### Rating of selected users to all movies\nWe're going to do this by taking the weighted average of the ratings of the movies using the Pearson Correlation as the weight. But to do this, we first need to get the movies watched by the users in our __pearsonDF__ from the ratings dataframe and then store their correlation in a new column called _similarityIndex\". This is achieved below by merging of these two tables.","335ee215":"Now lets look at the first user","8190f906":"We now group up the rows by user ID.","2514c710":"#### Similarity of users to input user\nNext, we are going to compare all users (not really all !!!) to our specified user and find the one that is most similar.  \nwe're going to find out how similar each user is to the input through the __Pearson Correlation Coefficient__. It is used to measure the strength of a linear association between two variables. The formula for finding this coefficient between sets X and Y with N values can be seen in the image below. \n\nWhy Pearson Correlation?\n\nPearson correlation is invariant to scaling, i.e. multiplying all elements by a nonzero constant or adding any constant to all elements. For example, if you have two vectors X and Y,then, pearson(X, Y) == pearson(X, 2 * Y + 3). This is a pretty important property in recommendation systems because for example two users might rate two series of items totally different in terms of absolute rates, but they would be similar users (i.e. with similar ideas) with similar rates in various scales .\n\n![alt text](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/bd1ccc2979b0fd1c1aec96e386f686ae874f9ec0 \"Pearson Correlation\")\n\nThe values given by the formula vary from r = -1 to r = 1, where 1 forms a direct correlation between the two entities (it means a perfect positive correlation) and -1 forms a perfect negative correlation. \n\nIn our case, a 1 means that the two users have similar tastes while a -1 means the opposite.","5f06b0b6":"<h1>Table of contents<\/h1>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#ref2\">Preprocessing<\/a><\/li>\n        <li><a href=\"#ref3\">Collaborative Filtering<\/a><\/li>\n    <\/ol>\n<\/div>\n<br>\n<hr>","7a39bb64":"#### The users who has seen the same movies","cc4e3ce6":"Now, we calculate the Pearson Correlation between input user and subset group, and store it in a dictionary, where the key is the user Id and the value is the coefficient\n","82b7d770":"Now all we need to do is simply multiply the movie rating by its weight (The similarity index), then sum up the new ratings and divide it by the sum of the weights.\n\nWe can easily do this by simply multiplying two columns, then grouping up the dataframe by movieId and then dividing two columns:\n\nIt shows the idea of all similar users to candidate movies for the input user:","c2ffd8af":"We will select a subset of users to iterate through. This limit is imposed because we don't want to waste too much time going through every single user.","775ac10c":"data used: \nFull: 27,000,000 ratings and 1,100,000 tag applications applied to 58,000 movies by 280,000 users. Includes tag genome data with 14 million relevance scores across 1,100 tags. Last updated 9\/2018.\nfrom https:\/\/grouplens.org\/datasets\/movielens\/","740eae64":"#### The top x similar users to input user\nNow let's get the top 50 users that are most similar to the input.","3ba4bc4f":"The process for creating a User Based recommendation system is as follows:\n- Select a user with the movies the user has watched\n- Based on his rating to movies, find the top X neighbours \n- Get the watched movie record of the user for each neighbour.\n- Calculate a similarity score using some formula\n- Recommend the items with the highest score","b04fa493":"#### Add movieId to input user","f26dcd1a":"<hr>\n\n<a id=\"ref2\"><\/a>\n# Preprocessing","87168f10":"Now let's sort it and see the top 20 movies that the algorithm recommended!","4392a8cd":"<hr>\n\n<a id=\"ref3\"><\/a>\n# Collaborative Filtering"}}