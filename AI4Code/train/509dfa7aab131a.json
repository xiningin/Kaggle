{"cell_type":{"890a00b3":"code","07be5b93":"code","16b03d95":"code","26b15508":"code","50431a0a":"code","ca2709fe":"code","67e75e6b":"code","0e128128":"code","cd7a0c1f":"code","3e74b21e":"code","5169dac1":"code","74737c02":"code","50304f37":"code","e7af7c02":"code","21d8896a":"code","65e52920":"code","133689e5":"code","f589fe0a":"code","64c9d61f":"code","09951953":"code","af486525":"markdown"},"source":{"890a00b3":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom tqdm import tqdm","07be5b93":"import tensorflow as tf\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","16b03d95":"train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")","26b15508":"target = train['claim']\ndata = train.drop(['id','claim'],axis=1)\ntest = test.drop('id',axis=1)","50431a0a":"columns=data.columns.tolist()\nprint(columns)","ca2709fe":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 3, 5),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-1, 1.0),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 10.0),\n        \"bagging_freq\": 5,\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","67e75e6b":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=8)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","0e128128":"study.trials_dataframe()","cd7a0c1f":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","3e74b21e":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","5169dac1":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","74737c02":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective','max_depth','learning_rate'])","50304f37":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","e7af7c02":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","21d8896a":"Best_trial=study.best_trial.params\nprint(Best_trial)","65e52920":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsample","133689e5":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","f589fe0a":"model","64c9d61f":"print(preds.shape)\nprint(pd.Series(preds).value_counts())","09951953":"subm = sample\nsubm['claim'] = np.where(preds<0.5,0,1).astype(int)\nsubm.to_csv('submission.csv',index=False)\nsubm","af486525":"# LGBM with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna\n"}}