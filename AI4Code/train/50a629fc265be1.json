{"cell_type":{"b4c2d78c":"code","c5716475":"code","25b68b82":"code","0c77384a":"code","bfbc5598":"code","4e7e9632":"code","a3833e07":"code","c5b4045e":"code","a00f9e5d":"code","25c7dde1":"code","44938f45":"code","abe72f48":"code","104693b1":"code","e4391ac3":"code","caaac15c":"code","0a5f0e54":"code","ba985158":"code","84d382c9":"code","5e899543":"code","7b3ae781":"code","7ef3bfe8":"code","d33221d7":"code","7e65d01f":"code","1bf41c82":"code","07f325cd":"code","30e52678":"code","74fc3f49":"code","442d05bb":"code","0af761d4":"code","dd9e1fc2":"code","8da5fd4b":"code","41a0041d":"code","c8e9bccc":"code","9a19af77":"code","1c4d391c":"code","f36796b3":"code","2f6c03be":"code","dbec6072":"code","abb4ff0b":"code","ed031c18":"code","d3f285a8":"code","d92fc73e":"code","df0cde63":"code","497dc417":"code","9b3e93a3":"code","1144bfe4":"code","6e84cd8e":"code","16268b48":"markdown","295ed38d":"markdown","549b9901":"markdown","b25c513c":"markdown","59a807a2":"markdown","877c8d1f":"markdown","8e1dc5f3":"markdown","46314911":"markdown","fe50b562":"markdown","bcd6aa28":"markdown","badf6a5f":"markdown","ecff8328":"markdown","ff7cff25":"markdown","a6db4588":"markdown","ea102aea":"markdown"},"source":{"b4c2d78c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5716475":"!pip install beautifulsoup4\n!pip install ekphrasis\n!pip install transformers","25b68b82":"import nltk\nnltk.download('words')\nnltk.download('stopwords')","0c77384a":"# Data Cleaning Packages\nimport requests, json\nimport string\nimport re\nfrom itertools import chain\n\nimport numpy as np\nimport pandas as pd\n\nfrom bs4 import BeautifulSoup\n\nfrom ekphrasis.classes.preprocessor import TextPreProcessor\nfrom ekphrasis.classes.tokenizer import SocialTokenizer\nfrom ekphrasis.dicts.emoticons import emoticons\nfrom ekphrasis.dicts.noslang.slangdict import slangdict\n\n\nfrom nltk.corpus import words\nfrom nltk.corpus import stopwords\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\nen_words = words.words()\nst_words = stopwords.words()\n\n# Packages for Classification Task\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nimport transformers\nfrom sklearn.utils import shuffle\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom transformers import TFAutoModel, AutoTokenizer\nimport transformers\nfrom tensorflow.keras.utils import get_custom_objects\nfrom tensorflow.keras import Input, Model, Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, LSTM, Embedding, GlobalAveragePooling1D\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\n\n","bfbc5598":"try:\n  tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n  #print('Running on TPU ', tpu.cluster_spec().as_dict()['worker'])\nexcept ValueError:\n  raise BaseException('ERROR: Not connected to a TPU runtime; please see the previous cell in this notebook for instructions!')\n\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","4e7e9632":"\ndf = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\ndf.info()","a3833e07":"df.target.value_counts()","c5b4045e":"def get_unk_words(txts):\n    txt = ' '.join(txts)\n    doc = nlp(txt)\n    tokens = set([tok.lemma_ for tok in doc])\n\n    word_dict = set([tok.lower() for tok in en_words])\n    not_word_tokens = tokens - tokens.intersection(word_dict)\n    print('Vocabs size', len(tokens))\n    print('Unknown vocabs size', len(not_word_tokens))\n    print(f'Tweets contain unknown words: {100 * len(not_word_tokens) \/ len(tokens):.2f}%')\n    return not_word_tokens","a00f9e5d":"pairs =  list(slangdict.items())\nfor i in range(10):\n    print(pairs[i])","25c7dde1":"uncased_slang_dict = {}\nfor key, value in slangdict.items():\n    value = re.sub(r'it means', '', value)\n    value = re.sub(r'\\*\\*\\*', 'uck', value)\n    value = re.sub(r'\\*\\*', 'it', value)\n    value = re.sub(r'it refers to', '', value)\n    uncased_slang_dict[key.lower()] = value.lower()\nprint('Slang words number:', len(uncased_slang_dict))","44938f45":"replacement_patterns = [\n    (r'won\\'t', 'will not'),\n    (r'can\\'t', 'cannot'),\n    (r'i\\'m', 'i am'),\n    (r'I\\'m', 'I am'),\n    (r'ain\\'t', 'is not'),\n    (r'(\\w+)\\'ll', '\\g<1> will'),\n    (r'(\\w+)n\\'t', '\\g<1> not'),\n    (r'(\\w+)\\'ve', '\\g<1> have'),\n    (r'(\\w+)\\'s', '\\g<1> is'),\n    (r'(\\w+)\\'re', '\\g<1> are'),\n    (r'(\\w+)\\'d', '\\g<1> would'),\n]","abe72f48":"abbr = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\",\n    \"yr\": \"year\",\n    \"u.s\":\"usa\",\n}\ndef replace_slang(txt, slang):\n    ctxt = re.sub(r'\\s+', ' ', txt)\n    res = []\n    for tok in ctxt.split():\n        if tok.lower() in slang:\n            res.append(slang[tok.lower()])\n        else:\n            res.append(tok)\n    res = ' '.join(res)\n    return res.strip()\n\n\n\n## A small Preview\nsent = 'I want to go aamof home'\nprint(sent)\nprint(replace_slang(sent, abbr))","104693b1":"text_processor = TextPreProcessor(\n    # terms that will be normalized\n    normalize = ['rest_emoticons', 'rtl_face', 'cashtag','url',\n                 'email', 'percent', 'money', 'phone', 'user', \n                 'time', 'date', 'number', 'eastern_emoticons'],\n    # terms that will be annotated\n    annotate = set([\"elongated\", \"repeated\"]),\n    fix_html = True,  # fix HTML tokens\n    segmenter=\"twitter\", \n    corrector = \"twitter\", \n    unpack_hashtags = True,  # perform word segmentation on hashtags\n    unpack_contractions = True,  # Unpack contractions (can't -> can not)\n    spell_correct_elong = False,  # spell correction for elongated words\n    tokenizer=SocialTokenizer(lowercase=False).tokenize,\n    dicts=[emoticons]\n)","e4391ac3":"def preprocess(txt):\n    # remove non-ascii characters\n    res = txt.encode('ascii', 'ignore').decode()\n    # replace slang token if the token is not an english word\n    res = replace_slang(res, uncased_slang_dict)\n    # replace shorten pattern i.e I'll--> I will\n    for patt, rep in replacement_patterns:\n        res = re.sub(patt, rep, res)\n    # Extract emojis and hashtags and segment the txt\n    res = ' '.join(text_processor.pre_process_doc(res)).strip()\n    for patt in [r\"<elongated>\", r\"<repeated>\"]:\n        res = re.sub(patt, '', res)\n        \n    # another try to replace the slangs after segmentation\n    res = replace_slang(res, uncased_slang_dict)\n\n    # remove punctuaions\n    res = re.sub(r'[%s]' % re.escape(''.join(string.punctuation)), r' ',res)\n    # lower case\n    res = res.lower()\n    # remove consecutive duplicated tokens\n    res = re.sub(r'\\b(\\w+)(?:\\W+\\1\\b)+', r'\\1', res)\n    #remove extra spaces\n    res = re.sub(r'\\s+', ' ', res)\n    return res.strip()\ndf['ctext'] = df['text'].apply(preprocess)\ntest['ctext'] = test['text'].apply(preprocess)","caaac15c":"for txt, ctxt in test[['text', 'ctext']].values[80:100]:\n    print(txt)\n    print(ctxt)\n    print()","0a5f0e54":"not_word_tokens = get_unk_words(df['ctext'])","ba985158":"not_word_tokens = get_unk_words(test['ctext'])","84d382c9":"for tok in list(not_word_tokens)[0:20]:\n    print(tok)","5e899543":"df = df.fillna('unk')\ntest = test.fillna('unk')","7b3ae781":"ids = [443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]","7ef3bfe8":"df.loc[df['id'].isin(ids), 'target']= 0","d33221d7":"#A = df.groupby('ctext', as_index=False)['target'].mean()\n#A.head()","7e65d01f":"#A = A[A['target'] < 1].reset_index(drop=True)\n#A = A[A['target'] > 0].reset_index(drop=True)","1bf41c82":"dict_tur_target = {'2 pcs 1 8 w cree led work light offroad lamp car truck boat mining forward flood beam full rea url': 1,\n '360 wise news china is stock market crash are there gems in the rubble url': 1,\n 'a look at state actions a year after ferguson is upheaval url': 0,\n 'allah describes piling up wealth thinking it would last forever as the description of the people of hellfire in surah humaza reflect': 0,\n 'angry woman openly accuses nema of stealing relief materials meant for idps an angry internally displaced wom url': 0,\n 'ashes number australias collapse at trent bridge among worst in history england bundled out australia for number url': 0,\n 'bayelsa poll tension in bayelsa as patience jonathan plans to start an off topic discussion apc pdp plans by former first lady and url': 0,\n 'caution breathing may be hazardous to your health': 0,\n 'choking hazard prompts recall of kraft cheese singles url': 0,\n 'cleared incident with injury i number inner loop exit number md number georgia ave silver spring': 1,\n 'deaths number url': 1,\n 'detonate feat m o p by apollo brown url': 0,\n 'detonation fashionable mountaineering electronic watch water resistant couples leisure tab url': 0,\n 'do you feel like you are sinking in low self image take the quiz url': 0,\n 'drunk meals number what to cook when you are totally obliterated url': 0,\n 'earthquake drill': 0,\n 'enugu government to demolish illegal structures at international conference centre url': 0,\n 'fatality url': 1,\n 'fedex no longer to transport bioterror germs in wake of anthrax lab mishaps url': 0,\n 'fedex no longer to transport bioterror germs in wake of anthrax lab mishaps url via user': 0,\n 'fire hazard associated with installation of non compliant external cladding on url by user cbplawyers': 0,\n 'foods care offers 2 go nestle india slips into loss after magginoodle ban unsafe and hazardous for human consumption': 0,\n 'governor weighs parole for california school bus hijacker url': 0,\n 'he came to a land which was engulfed in tribal war and turned it into a land of peace i e madinah prophet muhammad islam': 0,\n 'hellfire is surrounded by desires so be careful and do not let your desires control you afterlife': 0,\n 'hellfire we do not even want to think about it or mention it so lets not do anything that leads to it islam': 0,\n 'heres how media in pakistan covered the capture of terrorist mohammed naved url': 0,\n 'hollywood movie about trapped miners released in chile the number hollywood movie about trapped miners starring url': 0,\n 'hollywood movie about trapped miners released in chile url': 0,\n 'hot c number specially modified to land in a stadium and rescue hostages in iran in number url pre break best': 0,\n 'hot funtenna hijacking computers to send data as sound waves black hat number url pre break best': 0,\n 'hot reddit is new content policy goes into effect many horrible subreddits banned or quarantined url pre break best': 0,\n 'how is it one careless match can start a forest fire but it takes a whole box to start a campfire': 0,\n 'i liked a user video from user url gun range mayhem': 0,\n 'i pledge allegiance to the p o p e and the burning buildings of epic city': 0,\n 'ignition knock detonation sensor senso beck arnley number url': 0,\n 'in islam saving a person is equal in reward to saving all humans islam is the opposite of terrorism': 0,\n 'kosciusko police investigating pedestrian fatality hit by a train thursday url': 1,\n 'like for the music video i want some real action shit like burning buildings and police chases not some weak ben winston shit': 0,\n 'm i am burning i am burning buildings i am building oh ooh': 0,\n 'new ladies shoulder tote handbag faux leather hobo purse cross body bag womens url': 0,\n 'pandemonium in aba as woman delivers baby without face photos url': 0,\n 'petition heartless owner that whipped horse until it collapsed is told he can keep his animal act now url': 0,\n 'potus strategic patience is a strategy for genocide refugees idp internally displaced people horror etc url': 0,\n 'reddit is new content policy goes into effect many horrible subreddits banned or quarantined url': 0,\n 'reddit updates content policy promises to quarantine extremely offensive communities url': 0,\n 'reddit will now quarantine offensive content url': 0,\n 'reddit will now quarantine offensivecontent url': 0,\n 'remove the url and linkury browser hijacker url': 0,\n 'rt notexplained the only known image of infamous hijacker d b cooper url': 0,\n 'sassy city girl country hunk stranded in smoky mountain snowstorm ao ms url ibook love book boost': 0,\n 'spot flood combo 5 3 inch 3 0 w curved cree led work light bar 4 x4 offroad fog lamp full re url': 0,\n 'star wars power of the jedi collection number battle droid hasbro full read by ebay url': 0,\n 'survival keep in touch whistle fire starter wire saw cree torch emergency blanket s knife full re url': 0,\n 'swansea plot start an off topic discussion transfer move for southampton target virgil van dijk url': 0,\n 'that horrible sinking feeling when youve been at home on your phone for a while and you realise its been on 3 g this whole time': 0,\n 'the dress memes have officially exploded on the internet url': 0,\n 'the prophet peace be upon him said save yourself from hellfire even if it is by giving half a date in charity': 0,\n 'the way you move is like a full on rainstorm and i am a house of cards': 0,\n 'to fight bioterrorism sir': 0,\n 'trafford centre film fans angry after odeon cinema evacuated following false fire alarm url': 1,\n 'truth url news bbc cnn islam truth god isis terrorism quran lies url': 0,\n 'twia board approves number percent rate hike the texas windstorm insurance association twia board of directors v url': 0,\n 'u s national park services tonto national forest stop the annihilation of the salt river wild horse url via user': 0,\n 'url cindy noonan user heartbreak in baltimore rioting yah istorical underground railraod': 0,\n 'user chinas stock market crash this summer has sparked interest from bargain hunt url user': 0,\n 'user fettilootch is slanglucci oppressions greatest danger coming soon the album url': 0,\n 'user good morning i pray any attack of the enemy number derail your destiny is blocked by the lord that he floods your life w heavenly blessings': 0,\n 'user love what you picked we are playing worth it by fifth harm kid ink because of you listen vote url': 0,\n 'user thank you for the follow go to url brutally abused desolate lost her lovely mum dies is it murder': 0,\n 'user we need help horses will die please rt sign petition take a stand be a voice for them gilbert 23 url': 0,\n 'watch sarah palin obliterate planned parenthood for targeting minority women bb4sp url': 0,\n 'who is bringing the tornadoes and floods who is bringing the climate change god is after america he is plaguing her farrakhan quote': 0,\n 'why are you deluged with low self image take the quiz url': 0,\n 'world annihilation vs self transformation url aliens attack to exterminate humans url': 0,\n 'world fedex no longer to transport bioterror germs in wake of anthrax lab mishaps url': 0,\n 'world war ii book lightning joe an autobiography by general j lawton collins url': 0,\n 'wowo number nigerian refugees repatriated from cameroon': 0}","07f325cd":"df['target_clean'] = df['ctext'].map(dict_tur_target) ","30e52678":"df['target_clean'].value_counts(dropna = False)","74fc3f49":"df['target_clean'] = np.where(np.isnan(df['target_clean']), df['target'],df['target_clean'] )","442d05bb":"df['target_clean'] = df['target_clean'].astype(int)\ndf['target_clean'].value_counts(dropna = False)","0af761d4":"#max_length = 42  # Maximum length of input sentence to the model.\n#batch_size = 16\n","dd9e1fc2":"#google\/electra-large-discriminator\n#tokenizer = transformers.RobertaTokenizer.from_pretrained(\"roberta-large\", do_lower_case=True)\n##tokenizer = transformers.ElectraTokenizer.from_pretrained(\"google\/electra-large-discriminator\", do_lower_case=True)","8da5fd4b":"model = 'roberta-large'\nbatch_size = 16 * tpu_strategy.num_replicas_in_sync\n\ntokenizer = transformers.RobertaTokenizer.from_pretrained(model, do_lower_case=True)\nauto = tf.data.experimental.AUTOTUNE\nepochs = 10\nmax_length = 40\n","41a0041d":"def create_electra_model_with_layer(electra,learning_rate):\n    \n    input_ids = Input(shape = (max_length,), dtype = tf.int32)\n    \n\n    electra_layer = TFAutoModel.from_pretrained(electra)\n    electra_layer = electra_layer([input_ids])[0]\n\n    output = GlobalAveragePooling1D()(electra_layer)\n    #output = Dense(2, activation = 'sigmoid')(output)\n\n    \n   \n    \n    \n    \n    output = Dense(400, activation='relu')(output)\n    output = Dense(100, activation='relu')(output)\n    output = Dense(2, activation='sigmoid')(output)\n    \n    model = Model(inputs = input_ids, outputs = output)\n    model.compile(optimizer = Adam(lr = learning_rate), loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])\n    return model\n\n\ndef build_tokenizer(text,tokenizer):\n    train_encoded = tokenizer.batch_encode_plus(text, padding=True, max_length=max_length, truncation=True)\n    return np.array(train_encoded['input_ids'])","c8e9bccc":"text, target_clean = df['ctext'].values.tolist(), df['target_clean']\nx_train, x_valid, y_train, y_valid = train_test_split(text, target_clean, test_size=0.33, random_state=1)\nx_train = build_tokenizer(x_train,tokenizer)\nx_valid = build_tokenizer(x_valid,tokenizer)\nx_test  = build_tokenizer(test['ctext'].values.tolist(),tokenizer)","9a19af77":"def build_datasets_for_train_test_valid(x, y, train_test_valid, batch_size):\n    if train_test_valid == \"train\":\n        dataset = (\n            tf.data.Dataset\n            .from_tensor_slices((x, y))\n            .repeat()\n            .shuffle(2048)\n            .batch(batch_size)\n            .prefetch(auto)\n        )\n    elif train_test_valid == \"valid\":\n        dataset = (\n            tf.data.Dataset\n            .from_tensor_slices((x, y))\n            .batch(batch_size)\n            .cache()\n            .prefetch(auto)\n        )\n    elif train_test_valid == \"test\":\n        dataset = (\n            tf.data.Dataset\n            .from_tensor_slices(x)\n            .batch(batch_size)\n        )\n    else:\n        raise NotImplementedError\n    return dataset","1c4d391c":"train_dataset = build_datasets_for_train_test_valid(x_train, y_train, \"train\", batch_size)\nvalid_dataset = build_datasets_for_train_test_valid(x_valid, y_valid, \"valid\", batch_size)\ntest_dataset  = build_datasets_for_train_test_valid(x_test, None, \"test\", batch_size)","f36796b3":"def create_electra_model(electra_layer,random_seed,learning_rate):\n    tf.keras.backend.clear_session()\n    tf.random.set_seed(random_seed)\n    with tpu_strategy.scope():\n        model = create_electra_model_with_layer(electra_layer,learning_rate)\n    model.summary()    \n    return model","2f6c03be":"electra_model_2 = create_electra_model(model,11242345,1e-5)","dbec6072":"len_x_train = len(x_train)\nlr_reduction = [tf.keras.callbacks.EarlyStopping(patience = 2, \n                                              monitor = 'val_loss', \n                                              restore_best_weights = True, \n                                              mode = 'min')]\n\nsteps_per_epoch = len_x_train \/\/ batch_size\nhistory_xlm = electra_model_2.fit(train_dataset,\n                      validation_data=valid_dataset,\n                      steps_per_epoch=steps_per_epoch,\n                      epochs = 10, \n                      callbacks = lr_reduction)","abb4ff0b":"'''\ntrain_encoded = tokenizer(text=list(df.ctext),\n                    add_special_tokens=True,\n                    max_length=max_length,\n                    truncation=True,\n                    padding=True,\n                    return_attention_mask=True,\n                    return_token_type_ids=True,\n                    return_tensors='tf'\n                    )\n'''","ed031c18":"'''\nval_size = int(len(df)*0.3)\ndataset = tf.data.Dataset.from_tensor_slices((train_encoded.data, df.target_clean.values))\nval_dataset = (dataset.take(val_size).batch(batch_size))\ntrain_dataset = (dataset.skip(val_size).batch(batch_size))\n'''","d3f285a8":"'''\nMODEL_NAME = 'roberta-large'\n#MODEL_NAME = 'google\/electra-large-discriminator'\nwith tpu_strategy.scope():\n    transformer = transformers.TFAutoModel.from_pretrained(MODEL_NAME)\n'''","d92fc73e":"'''\ndef create_model():\n\n    input_1 = tf.keras.Input(shape=(max_length,),name='input_ids', dtype='int32')\n    input_2 = tf.keras.Input(shape=(max_length,),name='attention_mask', dtype='int32')\n    input_3 = tf.keras.Input(shape=(max_length,),name='token_type_ids', dtype='int32')\n\n\n    sequence_output = transformer((input_1, input_2, input_3))[0]\n    #lstm = tf.keras.layers.LSTM(64, dropout=0.2)(sequence_output)\n    #output = tf.keras.layers.Dense(3, activation='softmax')(lstm)\n    output_1 = tf.keras.layers.Dense(500, activation='relu')(sequence_output[:,0,:])\n    output_2 = tf.keras.layers.Dense(300, activation='linear')(output_1)\n    output_3 = tf.keras.layers.Dense(200, activation='relu')(output_2)\n    output_4 = tf.keras.layers.Dense(100, activation='linear')(output_3)\n    output = tf.keras.layers.Dense(2, activation='sigmoid', name='output_layer')(output_4)\n      \n    model = tf.keras.Model(inputs=(input_1, input_2, input_3), outputs=output)\n    return model\n'''","df0cde63":"'''\nwith tpu_strategy.scope():\n    model = create_model()\n    optimizer = tf.keras.optimizers.Adam(learning_rate =1e-5)\n    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    model.summary()\n'''","497dc417":"'''\nlr_reduction = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss',\n    factor=0.3,\n    patience= 1,\n    min_lr=1e-7\n)\n\nhistory = model.fit(\n    train_dataset,\n    epochs = 10,\n    verbose = 2,\n    batch_size = batch_size,\n    callbacks=[lr_reduction],\n    validation_data=val_dataset\n)\n'''","9b3e93a3":"'''\nencoding_test = tokenizer(text=list(test.text),\n                    add_special_tokens=True,\n                    max_length=max_length,\n                    truncation=True,\n                    padding=True,\n                    return_attention_mask=True,\n                    return_token_type_ids=True,\n                    return_tensors='tf'\n                    )\n\npred_submission = model.predict(encoding_test.data, batch_size=16, verbose=1)\ntest_pred_labels = np.argmax(pred_submission, axis=1)\n\n#submission = pd.DataFrame()\ntest['target'] = test_pred_labels\nsubmission = test[['id','target']]\n#submission.to_csv(\"submission.csv\", index = False)\n'''","1144bfe4":"pred_test = electra_model_2.predict(test_dataset)\npredictions = np.argmax(pred_test, axis = 1)\n\n#from sklearn.metrics import classification_report\n#print(classification_report(test['label'], predictions))\n\n#submission = pd.DataFrame()\ntest['target'] = predictions\nsubmission = pd.DataFrame(test[['id','target']])","6e84cd8e":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n\n\n# create a link to download the dataframe\ncreate_download_link(submission)","16268b48":"# Data Cleaning******","295ed38d":"**Check and use TPU**","549b9901":"**Check cleaned test data**","b25c513c":"**Install and Load Required packages for Data Cleaning and Classification**","59a807a2":"# Some of the texts were multilabel(may be due to manual entry, I do not know), fixing them up MANUALLY(must be a way to do it better, working on it.......)****","877c8d1f":"**Remove Special Charectars and Punctuations**","8e1dc5f3":"**Get the Slangs Dictionary**","46314911":"# Prediction ****","fe50b562":"# Edit some wrong targets that were marked ****","bcd6aa28":"**Mark Words that are not from the dictionary**","badf6a5f":"**Load Train and Test Data**","ecff8328":"**Some of the abbreviations that can be found in tweets**","ff7cff25":"**Twitter Text Pre-processing**","a6db4588":"**Checkout The wrongly marked data**","ea102aea":"**Patterns Dictionary**"}}