{"cell_type":{"8ff21347":"code","a3401785":"code","65d7ed96":"code","c83feef6":"code","0cfa62cb":"code","0f98c32a":"code","17b191b3":"code","edf7026a":"code","278e7005":"code","a01d6a83":"code","d28adb27":"code","79d93095":"code","9363799c":"code","ebc8c02b":"code","a1eb1f60":"code","b2b612c4":"code","1860d326":"code","46e92248":"code","ab8e63b0":"code","86dfc8d5":"code","6b4d0164":"code","d867fb95":"code","d50f0163":"code","91c35e01":"code","057df627":"code","117ec962":"code","dc92b510":"code","cac6b858":"code","3cf60cb1":"code","9c2efc11":"code","7b380cb9":"code","c2642273":"code","32e4a0f1":"code","61929ca8":"markdown"},"source":{"8ff21347":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","a3401785":"data = pd.read_csv('..\/input\/train.csv')","65d7ed96":"data.head(5)","c83feef6":"# data\n","0cfa62cb":"data = data.iloc[:, 1:]","0f98c32a":"data.head(5)","17b191b3":"y = data['target']\n# x.head(5)\nx = data.iloc[:, 1:]\nx.head(5)","edf7026a":"y.head(5)","278e7005":"# import seaborn as sns","a01d6a83":"# sns.countplot(data['target'], label = 'Count')","d28adb27":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=123)","79d93095":"import lightgbm as lgb\n\nfrom sklearn.metrics import auc, accuracy_score, roc_auc_score\nfrom sklearn.model_selection import GridSearchCV","9363799c":"\nestimator = lgb.LGBMClassifier(learning_rate = 0.125, metric = 'l1', \n                        n_estimators = 20, num_leaves = 38)\n\n\nparam_grid = {\n    'n_estimators': [x for x in range(20, 36, 2)],\n    'learning_rate': [0.10, 0.125, 0.15, 0.175, 0.2]}\ngridsearch = GridSearchCV(estimator, param_grid)\n\ngridsearch.fit(X_train, y_train,\n        eval_set = [(X_test, y_test)],\n        eval_metric = ['auc', 'binary_logloss'],\n        early_stopping_rounds = 5)","ebc8c02b":"# print('Best parameters found by grid search are:', gridsearch.best_params_)\n","a1eb1f60":"gbm = lgb.LGBMClassifier(learning_rate = 0.125, metric = 'l1', \n                        n_estimators = 20)\n\n\ngbm.fit(X_train, y_train,\n        eval_set=[(X_test, y_test)],\n        eval_metric=['auc', 'binary_logloss'],\nearly_stopping_rounds=5)","b2b612c4":"import matplotlib.pyplot as plt\nax = lgb.plot_importance(gbm, height = 0.4, \n                         max_num_features = 25, \n                         xlim = (0,100), ylim = (0,23), \n                         figsize = (10,6))\nplt.show()","1860d326":"sorted(gbm.feature_importances_,reverse=True)\n","46e92248":"temp = 0 \ntotal = sum(gbm.feature_importances_)\nfor feature in sorted(gbm.feature_importances_, reverse=True):\n    temp+=feature\n    if temp\/total >= 0.85:\n        print(feature,temp\/total) # stop when we \n        break","ab8e63b0":"from sklearn.metrics import auc, accuracy_score, roc_auc_score\nfrom sklearn import metrics\n\ny_pred_prob = gbm.predict_proba(X_test)[:, 1]\nauc_roc_0=str(metrics.roc_auc_score(y_test, y_pred_prob)) # store AUC score without dimensionality reduction\nprint('AUC without dimensionality reduction: \\n' + auc_roc_0)","86dfc8d5":"x = x.drop(['var_81','var_170','var_0','var_21','var_44','var_133'], axis=1)\n","6b4d0164":"\n# Remake our test\/train set with our reduced dataset\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=21)\n\nreduc_estimator = lgb.LGBMClassifier(learning_rate = 0.125, metric = 'l1', \n                        n_estimators = 20, num_leaves = 38)\n\n# Parameter grid for hyperparameter tuning\nparam_grid = {\n    'n_estimators': [x for x in range(20, 36, 2)],\n    'learning_rate': [0.10, 0.125, 0.15, 0.175, 0.2]}\n\ngridsearch = GridSearchCV(reduc_estimator, param_grid)\n\ngridsearch.fit(X_train, y_train,\n        eval_set = [(X_test, y_test)],\n        eval_metric = ['auc', 'binary_logloss'],\n        early_stopping_rounds = 5)\nprint('Best parameters found by grid search are:', gridsearch.best_params_)","d867fb95":"gbm = lgb.LGBMClassifier(learning_rate = 0.1, metric = 'l1', \n                        n_estimators = 20)\ngbm.fit(X_train, y_train,\n        eval_set=[(X_test, y_test)],\n        eval_metric=['auc', 'binary_logloss'],\nearly_stopping_rounds=5)","d50f0163":"y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration_)\nprint('The accuracy of prediction is:', accuracy_score(y_test, y_pred))\nprint('The roc_auc_score of prediction is:', roc_auc_score(y_test, y_pred))\nprint('The null acccuracy is:', max(y_test.mean(), 1 - y_test.mean()))","91c35e01":"# X_test[:,1]","057df627":"y_pred_prob = gbm.predict_proba(X_test)[:, 1]\ny_pred_prob\n","117ec962":"fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred_prob)\n\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.rcParams['font.size'] = 12\nplt.title('ROC curve for credit card defaulting classifier')\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.grid(True)","dc92b510":"\nauc_roc_1 = str(metrics.roc_auc_score(y_test, y_pred_prob))\nprint('AUC with dimensionality reduction: \\n' + auc_roc_1)\nprint('AUC without dimensionality reduction: \\n' + auc_roc_0)","cac6b858":"from sklearn import metrics\nprint(metrics.confusion_matrix(y_test, y_pred))","3cf60cb1":"test = pd.read_csv('..\/input\/test.csv')\n# test.head()\n\ntest = test.iloc[:, 1:]\n# test.head(5)\n# test.shape\ntest = test.drop(['var_81','var_170','var_0','var_21','var_44','var_133'], axis=1)\n# test.shape\n","9c2efc11":"# predictions = np.zeros(len(data[\"target\"]))\n\npredictions = gbm.predict_proba(test)[:,1]\nnew = pd.read_csv('..\/input\/test.csv')\nnew = new['ID_code']\n# new.head(5)\n# predictions.head(5)","7b380cb9":"# predictions","c2642273":"submission = pd.DataFrame({\"ID_code\": new, \"target\": predictions})\n# submission = pd.DataFrame({\"ID_code\": test.Id, \"target\": redictions})\n# submission[\"target\"] = predictions\nsubmission.to_csv(\"submission.csv\", index=False)","32e4a0f1":"submission.head(5)","61929ca8":"Light GBM"}}