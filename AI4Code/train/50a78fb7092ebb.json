{"cell_type":{"941146bc":"code","cd1a7198":"code","7cb4ce42":"code","7b7d21d0":"code","6bdd918d":"code","caa782ed":"code","54dab1c0":"code","0faa2ee9":"code","44142a2c":"code","e4fad7bb":"code","227a9a8d":"code","2a73bb5d":"code","0e52407a":"code","f146a6c6":"code","cbdd11a0":"code","67690e5a":"code","32ec65f7":"code","4e494fc2":"markdown"},"source":{"941146bc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport itertools\nimport math\nfrom sklearn.model_selection import train_test_split, KFold\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.layers import BatchNormalization\nfrom keras.optimizers import Adam, RMSprop, Adagrad","cd1a7198":"#Reading the data\ntrain = pd.read_csv(\"..\/input\/mnist-in-csv\/mnist_train.csv\")\ntest = pd.read_csv(\"..\/input\/mnist-in-csv\/mnist_test.csv\")","7cb4ce42":"#Training data head\ntrain.head()","7b7d21d0":"test.shape","6bdd918d":"#Specifying train and test data\ntrain_X = train.iloc[:,1:]\ntrain_y = train.iloc[:,0]\ntest = test.iloc[:,1:]","caa782ed":"#Shape of the specified data\nprint(train_X.shape)\nprint(train_y.shape)\nprint(test.shape)","54dab1c0":"train_y.value_counts()","0faa2ee9":"# Normalize the data\ntrain_X = train_X \/ 255.0\ntest = test \/ 255.0","44142a2c":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\ntrain_X = train_X.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e4fad7bb":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ntrain_y = to_categorical(train_y, num_classes = 10)","227a9a8d":"# Take a look at sample image\ng = plt.imshow(train_X[0][:,:,0])","2a73bb5d":"# train 10 identical CNN models\n\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.layers import DepthwiseConv2D, Reshape, Activation\n\nnets = 10\nmodel = [0] *nets\n\n\nfor j in range(nets):\n    model[j] = Sequential()\n\n    model[j].add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(128, kernel_size = 4, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Flatten())\n    model[j].add(Dropout(0.4))\n    model[j].add(Dense(10, activation='softmax'))\n\n    # COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST\n    model[j].compile(optimizer='adam', loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n    \nprint('All Models Defined')","0e52407a":"# LR Reduction Callback\nfrom keras.callbacks import ReduceLROnPlateau\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=0, \n                                            factor=0.5, \n                                            min_lr=0.00001)","f146a6c6":"# train for 20 epochs\nhistory = [0] * nets\nepochs = 20\n\ndatagen = ImageDataGenerator(\n    rotation_range=13,\n    zoom_range=0.11,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ndatagen.fit(train_X)\n\nfor j in range(nets):\n    print(f'Individual Net: {j+1}')   \n    X_train2, X_val2, Y_train2, Y_val2 = train_test_split(train_X, train_y, test_size = 0.1)\n    history[j] = model[j].fit_generator(datagen.flow(X_train2,Y_train2, batch_size=64),\n        epochs = epochs, steps_per_epoch = X_train2.shape[0]\/\/64,  \n        validation_data = (X_val2,Y_val2), callbacks=[learning_rate_reduction], verbose=0)\n    \n    print(\"CNN Model {0:d}: Epochs={1:d}, Training accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(\n        j+1,epochs,max(history[j].history['accuracy']),max(history[j].history['val_accuracy']) ))","cbdd11a0":"#Result\nresults = np.zeros( (test.shape[0],10) ) \nfor j in range(nets):\n    results = results + model[j].predict(test)\n    \nresults = np.argmax(results,axis = 1)","67690e5a":"#Test on result\nplt.imshow(test[0][:,:,0])\nplt.title(results[0])","32ec65f7":"L = 4\nW = 4\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(test[i].reshape(28,28))\n    axes[i].set_title(results[i])\n    axes[i].axis('off')\nplt.subplots_adjust(wspace=0.5)","4e494fc2":"# Ensemble Of Convolutional Neural Networks in MNIST Classification"}}