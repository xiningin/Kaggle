{"cell_type":{"e9e7c66f":"code","bd12e43c":"code","a23d4be5":"code","1cf2e021":"code","22196046":"code","e63b5ec0":"code","0f5c1ba6":"code","94409a13":"code","09c0dddc":"code","ad2d648a":"code","4dadad42":"code","ad1ab461":"code","f75796fd":"code","b2b93fe3":"code","9322c84b":"code","89189051":"code","a0c38eeb":"code","f444f871":"code","13eea491":"code","c0eb0614":"code","04b0d5bb":"code","db47fbe7":"code","a422744a":"code","2b272a42":"code","76b31cfb":"code","1daba547":"code","75aeaad9":"code","1e5ba41d":"code","1021f5f9":"code","d7f3bb7c":"code","d375c862":"code","5c2c9cc1":"code","efff9ca3":"code","425b448e":"code","2328aa37":"code","de63a6c8":"code","055828b8":"code","9f3ca073":"code","e971c450":"code","0800f435":"code","b63c596e":"code","54197ea0":"code","2516129e":"code","4feb4f5e":"code","a29ced5a":"code","c8d34a3f":"code","39f393ae":"code","621c714e":"code","a9b7a405":"code","d68980aa":"code","9ec5a62f":"code","70dbba04":"code","f9810c3b":"code","b4ab20f5":"code","c6d65655":"code","b79799d0":"code","9816149c":"code","df0df19a":"code","f5091026":"code","89a96f2d":"code","872eedc3":"code","2d732b3a":"code","f4cd9574":"code","fecb8e85":"code","3c16f1e3":"code","a248acd1":"code","a76609c7":"code","3d59e94e":"code","c9b12673":"code","8793f217":"code","c66266e5":"code","a609211d":"code","636ba02c":"code","47248606":"code","58c36976":"code","94da80ce":"code","465eb77c":"code","443dd307":"code","a8740eb8":"code","0b8189b6":"code","b5da3038":"code","7b949550":"code","532056f0":"code","52b3d0d5":"code","00973c77":"code","03bd2d69":"code","31b01beb":"code","ec0742fd":"code","a08a3d99":"code","22a4d596":"code","1de2e211":"code","44ca0df7":"code","09d7f8c9":"code","9974ec1e":"code","6760166b":"code","cfb8d362":"code","83ddc7ea":"code","8fd98530":"code","6414e025":"code","3d6152f3":"code","5167087b":"code","31e5add4":"code","f900b22a":"code","35b948d6":"code","87d55ae7":"markdown","2140b1b9":"markdown","fcdd539e":"markdown","88ce5838":"markdown","2226c90d":"markdown","525b04f2":"markdown","c1889a99":"markdown","85982648":"markdown","8c6f02cc":"markdown","4f7b785f":"markdown","5454918d":"markdown","e5693d71":"markdown","3f744b03":"markdown","c820e8a6":"markdown","45b31e59":"markdown","04aca4dd":"markdown","a5ad31ea":"markdown","c18f84e6":"markdown","ee8bbcae":"markdown","8ac9826f":"markdown","f467c371":"markdown","c7cebd8a":"markdown","935e472b":"markdown","c7c19b38":"markdown","95bea29f":"markdown","6059cff9":"markdown","6eff075b":"markdown","42f8a6ec":"markdown","337bc4d8":"markdown","aeb4b9d6":"markdown","4d88053b":"markdown","0adf9f20":"markdown","f9e3a9f3":"markdown","0732e067":"markdown","50e366b7":"markdown","b6f38484":"markdown","22118a14":"markdown","236a6cf8":"markdown","2d41e9ea":"markdown","05b6b5ca":"markdown","e0a686c2":"markdown","1126dfcf":"markdown","10012f51":"markdown","910aff87":"markdown","c41cdec3":"markdown","b0f42274":"markdown","f2857ca2":"markdown","305668d0":"markdown","ef810b39":"markdown","f0ad7198":"markdown","4a20259c":"markdown","01389c72":"markdown"},"source":{"e9e7c66f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bd12e43c":"data=pd.read_csv('..\/input\/data.csv')","a23d4be5":"data.info() # this code give us general information about our data","1cf2e021":"data.describe() #this code give us  digital information. After we will look closely. ","22196046":"data.head() # To look first 5 values\n\n#data.tail() # to look last 5 values","e63b5ec0":"# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Finishing.plot(kind = 'line', color = 'g',label = 'Finishing',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Positioning.plot(color = 'r',label = 'Positioning',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","0f5c1ba6":"# x = Special, y = Skill Moves\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.plot(kind='scatter', x='Special', y='Skill Moves',alpha = 0.5,color = 'red')\nplt.xlabel('Special')              # label = name of label\nplt.ylabel('Skill Moves')\nplt.title('Special Skill Moves Scatter Plot')  # title = title of plot\nplt.show()          # for showing plot","94409a13":"# bins = number of bar in figure\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.SprintSpeed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","09c0dddc":"# clf() = cleans it up again you can start a fresh\ndata.SprintSpeed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","ad2d648a":"#create dictionary and look its keys and values\ndictionary = {'istanbul' : 'besiktas','paris' : 'psg'}\nprint(\"dictionary:\",dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())","4dadad42":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['istanbul'] = \"galatasaray\"    # update existing entry\nprint(dictionary)\ndictionary['madrid'] = \"realmadrid\"       # Add new entry\nprint(dictionary)\n","ad1ab461":"del dictionary['istanbul']              # remove entry with key 'spain'\nprint(dictionary)\nprint('paris' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n","f75796fd":"# In order to run all code you need to take comment this line\n# del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","b2b93fe3":"data=pd.read_csv('..\/input\/data.csv')","9322c84b":"series = data['Club']        # data['Club'] = series\nprint(type(series))\ndata_frame = data[['Agility']]  # data[['Agility']] = data frame\nprint(type(data_frame))\n","89189051":"# Comparison operator\nprint(21 > 2)\nprint(3!=2) #It means that 3 is not equal to 2\n# Boolean operators\nprint(True and False)\nprint(True or False)","a0c38eeb":"# 1 - Filtering Pandas data frame\nx = data['Age']>43     # There are only 3 footballers who have older than 43\ndata[x]","f444f871":"# 2 - Filtering pandas with logical_and\n# There are only 2 footballers who are older than 43 and smaller Potential value than 60\ndata[np.logical_and(data['Age']>43, data['Potential']<60 )]","13eea491":"data.columns  # now we can look every columns' names","c0eb0614":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Age']>43) & (data['Potential']<60) ]","04b0d5bb":"# Stay in loop if condition( i is not equal 5) is true\na = 0\nwhile a != 5 :\n    print('a is: ',a)\n    a +=1 \nprint(a,' is equal to 5')","db47fbe7":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'barcelona','france':'psg'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Value']][0:6].iterrows():\n    print(index,\" : \",value)\n\n","a422744a":"# example of what we learn above\ndef fake_func():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = fake_func()\nprint(a,b,c)","2b272a42":"# guess print what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","76b31cfb":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","1daba547":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","75aeaad9":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","1e5ba41d":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","1021f5f9":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(city = 'madrid', team = 'realmadrid', value = \"\u20ac128M\")","d7f3bb7c":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","d375c862":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","5c2c9cc1":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","efff9ca3":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","425b448e":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","2328aa37":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","de63a6c8":"# lets return our data csv and make one more list comprehension example\n# lets classify footballers whether they have high or low potential. Our threshold is average potential.\nthreshold = sum(data.Potential)\/len(data.Potential)\nprint(threshold)\ndata[\"pot_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Potential]\ndata.loc[:10,[\"pot_level\",\"Potential\"]] # we will learn loc more detailed later","055828b8":"data=pd.read_csv('..\/input\/data.csv')\ndata.head(10) # first 10 player\n#data.tail()","9f3ca073":"#data.shape()  # shape gives number of rows and columns in a tuble our data is 18207X89","e971c450":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","0800f435":"# For example lets look frequency of players Nationality\nprint(data['Nationality'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 1662 player from England,1198 player from Germany etc...","b63c596e":"# for example mean of age is 25.12\ndata.describe() #ignore null entries","54197ea0":"# For example: compare Potential of players that are real face  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Potential',by = 'Real Face')","2516129e":"# Firstly I create new data from fifa data to explain melt more easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","4feb4f5e":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Nationality','Club'])\nmelted","a29ced5a":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","c8d34a3f":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","39f393ae":"data1 = data['Nationality'].head()\ndata2= data['Value'].head()\ndata3= data['Name'].head()\nconc_data_col = pd.concat([data3,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","621c714e":"data.dtypes.head(10)","a9b7a405":"# lets convert object(str) to categorical and int to float.\ndata['Nationality'] = data['Nationality'].astype('category')\ndata['Age'] = data['Age'].astype('float')","d68980aa":"# As you can see Nationality is converted from object to categorical\n# And Age ,s converted from int to float\ndata.dtypes.head(10)","9ec5a62f":"# Lets look at does player data have nan value?\n# As you can see there are 18207  entries. However Club has 17966 non-null object so it has 241 null object.\ndata.info()","70dbba04":"# Lets check club\ndata[\"Club\"].value_counts(dropna =False)\n# As you can see, there are 241 NAN value","f9810c3b":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Club\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","b4ab20f5":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","c6d65655":"# In order to run all code, we need to make this line comment\n# assert 1==2 # return error because it is false","b79799d0":"assert  data['Club'].notnull().all() # returns nothing because we drop nan values","9816149c":"data[\"Club\"].fillna('empty',inplace = True)","df0df19a":"assert  data['Club'].notnull().all() # returns nothing because we do not have nan values","f5091026":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","89a96f2d":"# we dont need player Id photo and flag etc. lets drop them all\ndata=data.drop(['ID','Photo','Flag'],axis=1)\ndata.head()","872eedc3":"threshold1 = data.Dribbling.mean()\nprint(threshold1)\ndata[\"fin_level\"] = [\"high\" if i > threshold1 else \"low\" for i in data.Finishing]\ndata.loc[:10,[\"fin_level\",\"Finishing\"]]","2d732b3a":"#lets find all the turkish player\nturk= data.Nationality == 'Turkey'\ndata[turk]\n","f4cd9574":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\nteam = [\"realmadrid\",\"psg\"]\nlist_label = [\"country\",\"team\"]\nlist_col = [country,team]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","fecb8e85":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","3c16f1e3":"# Broadcasting\ndf[\"value\"] = 0 #Broadcasting entire column\ndf","a248acd1":"# Plotting all data \ndata1 = data.loc[:,[\"Age\",\"Potential\",\"Overall\"]]\ndata1.plot()\n# it is confusing","a76609c7":"# subplots\ndata1.plot(subplots = True)\nplt.show()","3d59e94e":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Potential\",y = \"Overall\")\nplt.show()","c9b12673":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Age\",bins = 50,range= (0,50),normed = True)","8793f217":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Age\",bins = 50,range= (0,50),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Age\",bins = 50,range= (0,50),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","c66266e5":"data.describe()","a609211d":"# read data\ndata = pd.read_csv('..\/input\/data.csv')\ndata= data.set_index(\"Unnamed: 0\")\ndata.head()","636ba02c":"# indexing using square brackets\ndata[\"Nationality\"][1]","47248606":"# using column attribute and row label\ndata.Nationality[1]","58c36976":"# using loc accessor\ndata.loc[1,[\"Nationality\"]]","94da80ce":"# Selecting only some columns\ndata[[\"Name\",\"Nationality\"]]","465eb77c":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"Nationality\"]))     # series\nprint(type(data[[\"Nationality\"]]))   # data frames","443dd307":"# Slicing and indexing series\ndata.loc[1:10,\"Name\":\"Potential\"]   # 10 and \"Potential\" are inclusive","a8740eb8":"# Reverse slicing \ndata.loc[10:1:-1,\"Name\":\"Potential\"] ","0b8189b6":"# From something to end\ndata.loc[1:10,\"SlidingTackle\":] ","b5da3038":"# Creating boolean series\nboolean = data.Club == 'Juventus'\ndata[boolean]","7b949550":"# Combining filters\nfirst_filter =  data.Club == 'Juventus'\nsecond_filter = data.Potential > 88\ndata[first_filter & second_filter]","532056f0":"# Filtering column based others\ndata.Age[data.Overall>90]","52b3d0d5":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.Overall.apply(div)","00973c77":"# Or we can use lambda function\ndata.Overall.apply(lambda n : n\/2)","03bd2d69":"# Defining column using other columns\ndata[\"total_power\"] = data.Overall + data.Potential\ndata.head()\n#at the end of the columns our total_power","31b01beb":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","ec0742fd":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 300. It is not remarkable change but it is just example\ndata3.index = range(300,18507,1)\ndata3.head()","a08a3d99":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"Unnamed: 0\")\n# also you can use \n# data.index = data[\"Unnamed: 0\"]","22a4d596":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/data.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","1de2e211":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Name\",\"Age\"]) \ndata1.head(100)\n# data1.loc[\"Nationality\",\"Club\"] # how to use indexes","44ca0df7":"dic = {\"teams\":[\"A\",\"A\",\"B\",\"B\"],\"players\":[\"cris\",\"thomas\",\"bale\",\"mbap\"],\"response\":[10,45,5,9],\"age\":[22,23,27,19]}\ndf = pd.DataFrame(dic)\ndf","09d7f8c9":"# pivoting\ndf.pivot(index=\"teams\",columns = \"players\",values=\"response\")","9974ec1e":"df1 = df.set_index([\"teams\",\"players\"])\ndf1\n# lets unstack it","6760166b":"# level determines indexes\ndf1.unstack(level=0)","cfb8d362":"df1.unstack(level=1)","83ddc7ea":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","8fd98530":"df","6414e025":"# df.pivot(index=\"teams\",columns = \"players\",values=\"response\")\npd.melt(df,id_vars=\"teams\",value_vars=[\"age\",\"response\"])","3d6152f3":"# We will use df\ndf","5167087b":"# according to teams take means of other features\ndf.groupby(\"teams\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","31e5add4":"# we can only choose one of the feature\ndf.groupby(\"teams\").age.max() ","f900b22a":"# Or we can choose multiple features\ndf.groupby(\"teams\")[[\"age\",\"response\"]].min() ","35b948d6":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()","87d55ae7":"Now we can look our data closely by using sample codes.","2140b1b9":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nAnd I learn most basic while and for loops.","fcdd539e":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","88ce5838":"Now I will show you that we can easily filter the whole data as we want.","2226c90d":"<a id=\"19\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","525b04f2":"<a id=\"36\"><\/a> <br>\n### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","c1889a99":"<a id=\"18\"><\/a> <br>\n### EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n<br>We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n<br> What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","85982648":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.","8c6f02cc":"<a id=\"22\"><\/a> <br>\n### CONCATENATING DATA\nWe can concatenate two dataframe ","4f7b785f":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON","5454918d":"[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for loop syntax\n<br> i: iterator\n<br> num1: iterable object","e5693d71":"* Histogram is better when we need to see distribution of numerical data.","3f744b03":"<a id=\"37\"><\/a> <br>\n### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label\n","c820e8a6":"<a id=\"5\"><\/a> <br>\nBefore continue with pandas,  I have  learnt  **logic, control flow** and **filtering.**\n<br>Comparison operator:  ==, <, >, <=    They are same in maths.\n<br>Boolean operators: and, or ,not\n<br> Filtering pandas","45b31e59":"<a id=\"38\"><\/a> <br>\n### HIERARCHICAL INDEXING\n* Setting indexing","04aca4dd":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS FOUNDATION ","a5ad31ea":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","c18f84e6":"<a id=\"20\"><\/a> <br>\n### TIDY DATA\nWe tidy data with melt().\nDescribing melt is confusing. Therefore lets make example to understand it.","ee8bbcae":"<a id=\"27\"><\/a> <br>\n### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","8ac9826f":"<a id=\"24\"><\/a> <br>\n### MISSING DATA and TESTING WITH ASSERT\nIf we encounter with missing data, what we can do:\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n<br>Assert statement: check that you can turn on or turn off when you are done with your testing of the program","f467c371":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list.","c7cebd8a":"<a id=\"26\"><\/a> <br>\n### REV\u0130EW of PANDAS\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy","935e472b":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of l learn.**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","c7c19b38":"In this part, we learn:\n* Diagnose data for cleaning\n* Exploratory data analysis\n* Visual exploratory data analysis\n* Tidy data\n* Pivoting data\n* Concatenating data\n* Data types\n* Missing data and testing with assert","95bea29f":"<a id=\"41\"><\/a> <br>\n### MELTING DATA FRAMES\n* Reverse of pivoting","6059cff9":"<a id=\"39\"><\/a> <br>\n### PIVOTING DATA FRAMES\n* pivoting: reshape tool","6eff075b":"<a id=\"12\"><\/a> <br>\n### LAMBDA FUNCTION\nFaster way of writing function.","42f8a6ec":"<a id=\"17\"><\/a> <br>\n### DIAGNOSE DATA for CLEANING\nWe have to diagnose and clean data before exploring.\n<br>Unclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\n<br> I will use head, tail, columns, shape and info methods to diagnose data","337bc4d8":"zip(): zip lists","aeb4b9d6":"<a id=\"8\"><\/a> <br>\n### USER DEFINED FUNCTION\nWhat we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. \n<br>cant modify values\n<br>tuble uses paranthesis like tuble = (1,2,3)\n<br>unpack tuble into several variables like a,b,c = tuble\n    ","4d88053b":"<a id=\"29\"><\/a> <br>\n### STATISTICAL EXPLORATORY DATA ANALYSIS\nI already explained it at previous parts. However lets look at one more time.\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","0adf9f20":"<a id=\"32\"><\/a> <br>\n# MANIPULATING DATA FRAMES WITH PANDAS","f9e3a9f3":"<a id=\"35\"><\/a> <br>\n### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","0732e067":"Lets make some exemples :)","50e366b7":"In this part, I learn:\n* how to import csv file\n* plotting line,scatter and histogram\n* basic dictionary features\n* basic pandas features like filtering that is actually something always used and main for being data scientist\n* While and for loops.","b6f38484":"* Scatter is better when there is correlation between two variables","22118a14":"<a id=\"23\"><\/a> <br>\n### DATA TYPES\nThere are 5 basic data types: object(string),booleab,  integer, float and categorical.\n<br> We can make conversion data types like from str to categorical or from int to float\n<br> Why is category important: \n* make dataframe smaller in memory \n* can be utilized for anlaysis especially for sklear(we will learn later)","236a6cf8":"**DATA SCIENTIST**\n**In this tutorial I will use fifa data set for practising what I learn and explain how some fonctions ,values,... etc. work.**\n**Before starting Iwant to notify that I will use the tutorial of the DATAI team for beginners. So I will follow the same way but I will add thins that I discovered.**\n\n**Content:**\n1. [Introduction to Python:](#1)\n    1. [Matplotlib](#2)\n    1. [Dictionaries ](#3)\n    1. [Pandas](#4)\n    1. [Logic, control flow and filtering](#5)\n    1. [Loop data structures](#6)\n1. [Python Data Science Toolbox:](#7)\n    1. [User defined function](#8)\n    1. [Scope](#9)\n    1. [Nested function](#10)\n    1. [Default and flexible arguments](#11)\n    1. [Lambda function](#12)\n    1. [Anonymous function](#13)\n    1. [List comprehension](#14)\n1. [Cleaning Data](#15)\n    1. [Diagnose data for cleaning](#16)\n    1. [Exploratory data analysis](#17)\n    1. [Visual exploratory data analysis](#18)\n    1. [Tidy data](#19)\n    1. [Pivoting data](#20)\n    1. [Concatenating data](#21)\n    1. [Data types](#22)\n    1. [Missing data and testing with assert](#23)\n1. [Pandas Foundation](#24)\n    1. [Review of pandas](#25)\n    1. [Building data frames from scratch](#26)\n    1. [Visual exploratory data analysis](#27)\n    1. [Statistical explatory data analysis](#28)\n1. [Manipulating Data Frames with Pandas](#29)\n    1. [Indexing data frames](#30)\n    1. [Slicing data frames](#31)\n    1. [Filtering data frames](#32)\n    1. [Transforming data frames](#33)\n    1. [Index objects and labeled data](#34)\n    1. [Hierarchical indexing](#35)\n    1. [Pivoting data frames](#36)\n    1. [Stacking and unstacking data frames](#37)\n    1. [Melting data frames](#38)\n    1. [Categoricals and groupby](#39)","2d41e9ea":"<a id=\"40\"><\/a> <br>\n### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","05b6b5ca":"<a id=\"34\"><\/a> <br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","e0a686c2":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search Local scope, Enclosing function, Global and Built in scopes, respectively.","1126dfcf":"<a id=\"21\"><\/a> <br>\n### PIVOTING DATA\nReverse of melting.","10012f51":"* Line plot is better when x axis is time. Let's make one.","910aff87":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script.** we define it.**\n* local: defined in a function.** we define but in function**.\n* built in scope: names in predefined built in scope module such as print, len.** They are already defined.**\n<br><br>Lets make some basic examples","c41cdec3":"First of all we add our csv as a pandas dataframe.","b0f42274":"Up to now, I learn \n* User defined function \n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n*  Anonymous function\n* List comprehension","f2857ca2":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","305668d0":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","ef810b39":"<a id=\"28\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","f0ad7198":"<a id=\"33\"><\/a> <br>\n### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","4a20259c":"<a id=\"3\"><\/a> <br>\n### DICTIONARY\nWhy we need dictionary?\n* It has 'key' and 'value' ,each key has a value(s)\n* Faster than lists\n<br>\nWhat is key and value. Example:\n* dictionary = {'spain' : 'madrid'}\n* Key is spain.\n* Values is madrid.\n<br>\n<br>**It's that easy.**\n<br>Lets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","01389c72":"<a id=\"4\"><\/a> <br>\n### PANDAS\nWhat we need to know about pandas?\n* CSV: comma - separated values\n"}}