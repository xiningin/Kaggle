{"cell_type":{"0eb80cac":"code","ffd7e9b9":"code","4ae16743":"code","485ace29":"code","ba7d3a0f":"code","dc6549cc":"code","ad6c7b4d":"code","9646faa5":"code","fb000d4a":"code","fbbf1399":"code","8eeeb8bf":"code","fc43c822":"code","7501a2f8":"code","b9827b4d":"code","db88ff9a":"code","3cfb079e":"code","2691e40d":"code","bafa227d":"code","b2f7853b":"code","86deb052":"code","42c7c907":"code","7622698f":"code","29938764":"code","94cd8747":"code","a269521a":"code","5d56b187":"code","d16be3e4":"code","5a0879b3":"code","99529420":"markdown","f896f135":"markdown","1cf4a0e0":"markdown","aa01b94d":"markdown","a1df8850":"markdown","5c3f015b":"markdown","07133165":"markdown","81016793":"markdown","225ed08b":"markdown","7cfb2df5":"markdown","534b7287":"markdown","172f735f":"markdown","c6e963cb":"markdown","382d5a8c":"markdown","145f2397":"markdown","48ce86d7":"markdown","d42e1995":"markdown","44da45ec":"markdown","14f13570":"markdown","e9ee2f8f":"markdown","72a58a66":"markdown","81a9a240":"markdown","884d190f":"markdown","0550f1b6":"markdown","480899e9":"markdown","270ebb4c":"markdown","255824d0":"markdown","74c3c1e9":"markdown","7724ce58":"markdown","67ddc444":"markdown","884acd65":"markdown","7d09c308":"markdown","10d49503":"markdown","efb46dc5":"markdown","952c9104":"markdown","7f9d686f":"markdown","25ec4115":"markdown","a7d7d9d1":"markdown","a126da55":"markdown"},"source":{"0eb80cac":"%matplotlib inline\n\nimport math\nimport random\nimport matplotlib\nimport numpy as np\nimport seaborn as sn\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom typing import *","ffd7e9b9":"def healthy_choices(food: str) -> bool:\n    \n    ### WRITE CODE HERE ###","4ae16743":"healthy_choices(\"apples\")  # Expected True","485ace29":"healthy_choices(\"donuts\")  # Expected False","ba7d3a0f":"healthy_choices(\"green beans\")  # Expected False","dc6549cc":"def healthier_choices(food: str) -> bool:\n    \n    ### WRITE CODE HERE ###","ad6c7b4d":"healthier_choices(\"apples\")  # Expected True","9646faa5":"healthier_choices(\"donuts\")  # Expected False","fb000d4a":"healthier_choices(\"green beans\")  # Expected True","fbbf1399":"def healthiest_choices(food: str, servings: int) -> bool:\n    \n    ### WRITE CODE HERE ###","8eeeb8bf":"healthiest_choices(\"apples\", 2)   # Expected True","fc43c822":"healthiest_choices(\"donut\", 2)   # Expected False","7501a2f8":"healthiest_choices(\"donut\", 1)   # Expected True","b9827b4d":"healthiest_choices(\"green beans\", 40)   # Expected False","db88ff9a":"test = pd.read_csv(\"..\/input\/cleveland-data\/cleveland-testing.csv\")\ntest_disease = test[test[\"heart_disease\"] == True]\ntest_healthy = test[test[\"heart_disease\"] == False]","3cfb079e":"train = pd.read_csv(\"..\/input\/cleveland-data\/cleveland-training.csv\")\ntrain_disease = train[train[\"heart_disease\"] == True]\ntrain_healthy = train[train[\"heart_disease\"] == False]\ntrain_disease","2691e40d":"train_healthy","bafa227d":"def analyze_file(filename: str, predict, axes):\n    # Open the file to get the data\n\n    data = pd.read_csv(\"..\/input\/cleveland-data\/cleveland-\" + filename + \".csv\")\n\n    # Set up the storage of the results\n\n    results = [[0, 0], \n               [0, 0]]\n    \n    for index, row in data.iterrows():\n\n        # Make a prediction\n        \n        prediction = predict(row[\"age\"], row[\"female\"], row[\"chest_pain\"], row[\"rest_bps\"], \n                             row[\"cholesterol\"], row[\"high_fasting_blood_sugar\"], row[\"rest_ecg\"], \n                             row[\"maximum_heart_rate\"], row[\"exercise_angina\"], row[\"vessels\"])\n\n        # Saving the results\n\n        results[1 - int(prediction)][1 - row[\"heart_disease\"]] += 1\n\n    # Calculating the accuracy on all patients\n\n    total = len(data)\n    correct = results[0][0] + results[1][1]\n\n    # Graph the results for the user\n    \n    df_cm = pd.DataFrame(results, [\"Disease\", \"Healthy\"], [\"Disease\", \"Healthy\"])\n    sn.set(font_scale=1.4)#for label size\n    sn.heatmap(df_cm, annot=True, annot_kws={\"size\": 16}, fmt=\"d\", ax=axes)# font size\n    axes.set_xlabel(\"Actual\")\n    axes.set_ylabel(\"Predicted\")\n    axes.set_title(filename.capitalize() + \" Accuracy: \" + \"{:.2%}\".format(correct \/ float(total)))","b2f7853b":"def analyze(predict):\n    # https:\/\/stackoverflow.com\/questions\/35572000\/how-can-i-plot-a-confusion-matrix\n    # https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html\n    # https:\/\/matplotlib.org\/users\/text_intro.html\n\n    fig = plt.figure(figsize = (10, 5))\n    ax1 = fig.add_subplot(121)\n    ax2 = fig.add_subplot(122)\n    analyze_file(\"training\", predict, ax1)\n    analyze_file(\"testing\", predict, ax2)\n    plt.tight_layout()\n","86deb052":"def default_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                    high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                    exercise_angina: bool, vessels: int) -> bool:\n    return True\n\nanalyze(default_predict)","42c7c907":"def female_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                   high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                   exercise_angina: bool, vessels: int) -> bool:\n    if female:\n        return False\n    else:\n        return True\n    \nanalyze(female_predict)","7622698f":"def age_female_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                       high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                       exercise_angina: bool, vessels: int) -> bool:\n    \n    ## Remove `return True` below and replace with if-elif-else statements\n    ## that use age and female only.\n    return True\n\nanalyze(age_female_predict)","29938764":"def mhr_cp_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                   high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                   exercise_angina: bool, vessels: int) -> bool:\n    \n    ## Remove `return True` below and replace with if-elif-else statements\n    ## that use maximum_heart_rate and chest_pain only.\n    return True\n\nanalyze(mhr_cp_predict)","94cd8747":"def ver_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                exercise_angina: bool, vessels: int) -> bool:\n    \n    ## Remove `return True` below and replace with if-elif-else statements\n    ## that use vessels, exercise_angina, and rest_ecg only.\n    return True\n\nanalyze(ver_predict)","a269521a":"def overfit_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                    high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                    exercise_angina: bool, vessels: int) -> bool:\n    \n    ##################################\n    # BEGIN PREDICTION CODE\n    ##################################\n    \n    if age == 67 and not female and chest_pain == \"asymptomatic\" and rest_bps == 160 and \\\n    cholesterol == 286 and not high_fasting_blood_sugar and rest_ecg == \"hypertrophy\" and \\\n    maximum_heart_rate == 108 and exercise_angina and vessels == 3:\n            prediction = True\n    elif age == 67 and not female and chest_pain == \"asymptomatic\" and rest_bps == 120 and \\\n    cholesterol == 229 and not high_fasting_blood_sugar and rest_ecg == \"hypertrophy\" and \\\n    maximum_heart_rate == 129 and exercise_angina and vessels == 2:\n            prediction = True\n    elif age == 62 and female and chest_pain == \"asymptomatic\" and rest_bps == 140 and \\\n    cholesterol == 268 and not high_fasting_blood_sugar and rest_ecg == \"hypertrophy\" and \\\n    maximum_heart_rate == 160 and not exercise_angina and vessels == 2:\n            prediction = True\n    elif age == 63 and not female and chest_pain == \"asymptomatic\" and rest_bps == 130 and \\\n    cholesterol == 254 and not high_fasting_blood_sugar and rest_ecg == \"hypertrophy\" and \\\n    maximum_heart_rate == 147 and not exercise_angina and vessels == 1:\n            prediction = True\n    elif age == 53 and not female and chest_pain == \"asymptomatic\" and rest_bps == 140 and \\\n    cholesterol == 203 and high_fasting_blood_sugar and rest_ecg == \"hypertrophy\" and \\\n    maximum_heart_rate == 155 and exercise_angina and vessels == 0:\n            prediction = True\n    else:\n        prediction = False\n        \n    ##################################\n    # END PREDICTION CODE\n    ##################################\n\n    return prediction\n\nanalyze(overfit_predict)","5d56b187":"def final_predict(age: int, female: bool, chest_pain: str, rest_bps: int, cholesterol: int, \n                  high_fasting_blood_sugar: bool, rest_ecg: str, maximum_heart_rate: int, \n                  exercise_angina: bool, vessels: int) -> bool:\n    \n    ## Remove `return True` below and replace with if-elif-else statements\n    ## that replicate the decision tree above.\n    return True\n\nanalyze(final_predict)","d16be3e4":"test_healthy","5a0879b3":"test_disease","99529420":"*Discuss your views here*","f896f135":"# Step 1: Healthy Eating Choices\n\nLet's practice writing conditionals by coding up some simple rules for healthy eating.","1cf4a0e0":"### Summative Question\n\nWhich examples do you think are more important to classify correctly, positive or negative examples, and why?","aa01b94d":"![heart-disease-graphs.png](attachment:heart-disease-graphs.png)","a1df8850":"### Lab Question\n\nHow accurate are your rules employing `vessels`, `exercise_angina` and `rest_ecg` on the test set? How do they differ on the positive and negative examples?","5c3f015b":"# Conditional Statements","07133165":"Now run the following lines of code one at a time to test your function.","81016793":"### Lab Question\n\nHow accurate are your rules employing `maximum_heart_rate` and `chest_pain` on the test set? How do they differ on the positive and negative examples?","225ed08b":"#### Step 5.3 `vessels`, `exercise_angina`, and `rest_ecg`","7cfb2df5":"*Discuss your results here*","534b7287":"### Step 1.1\n\nApples are healthy, right? Complete the `healthy_choices` function below with an if-statement, so that it returns True if the `food` parameter is `apples` and False otherwise.","172f735f":"## Step 5\n\nWhile this is an improvement over the default answer, we can do better. Write three separate attempts at a rule, looking at the training data given in the table above, and in each case limiting yourself to only use the features listed. Feel free to use the three hypotheses you wrote in Step 2 as inspiration.\n\nBy using all of the features listed at each step, you should be able to achieve 100% accuracy on the training set. If you are having trouble reaching 100% accuracy, examine which of the 10 individuals from the training set are being classified incorrectly according to your rule, and add some extra conditions to ensure that they are classified correctly. Consider using the `and`, `or`, and `not` operators, as well as nested `if-elif-else` statements, to express these conditions.\n\nNote that 100% accuracy on the training set does not imply a similar accuracy on the testing set. That's okay. We will discuss this phenomenon, known as overfitting, in step 6.","c6e963cb":"### Lab Question\n\nDid this improve our accuracy? Is this rule better at predicting healthy or diseased patients?","382d5a8c":"### Lab Question\n\nBased on the above decision tree, which features appear to be the most \nhelpful in making predictions?","145f2397":"*Replace this with your answers*","48ce86d7":"### Step 1.2\n\nHmm, that last one should really be `True` too. Write a new version of your `healthy_choices` function below (called `healthier_choices`), but this time add an `elif` conditional statement that allows `green beans` to be considered healthy.","d42e1995":"While the formal system of Boolean logic was developed by [George Boole](http:\/\/en.wikipedia.org\/wiki\/George_Boole), the study of logic has roots as far back as Ancient Greece and [Aristotle](http:\/\/en.wikipedia.org\/wiki\/Aristotle) and his foundational work on [Syllogisms](http:\/\/en.wikipedia.org\/wiki\/Syllogism). Our ability to reason logically and rationally is often cited as a primary indicator of our intelligence, not only on an individual level as measured by SAT and IQ tests, but also on a species level to distinguish our actions and behaviors from other organisms. Today we will spend our lab understanding the basics of intelligence.\n\n[Artificial Intelligence (AI)](http:\/\/www.alanturing.net\/turing_archive\/pages\/Reference%20Articles\/What%20is%20AI.html#Int) is a field within computer science with the goal of recreating, through the use of a computer, the intelligence we see in human behavior. The goal of AI has yet to be achieved in a broad sense, but much progress has been made in the fields of logic and categorization. Today we'll focus on [inductive logic](http:\/\/en.wikipedia.org\/wiki\/Inductive_reasoning): our ability to make generalizations based on data and apply these general rules to new situations. \n\nTo start, we will need some plotting and data analysis libraries. Hit <kbd>Shift+Enter<\/kbd> to execute the following code.","44da45ec":"*Discuss your answers here*","14f13570":"*Discuss your results here*","e9ee2f8f":"## Step 4\n\nWe will now use what you know about if-elif-else statements to edit this python program and better classify a given patient.\n\nConsider the following hypothesis: \"Males get heart disease, and females do not get heart disease.\" Translated into a formal logical statement, we would write code seen below.\n\nHit <kbd>Shift+Enter<\/kbd> to run the analysis code with this rule.","72a58a66":"These functions will display the percent accuracy of these predictions. In addition, they will break down the predictions into four categories:\n\n* True Positives - These patients have heart disease and were predicted correctly\n* False Positives - These patients do **not** have heart disease and were predicted **incorrectly**\n* True Negatives - These patients do **not** have heart disease and were predicted correctly\n* False Negatives - These patients have heart disease and were predicted **incorrectly**\n\nThese will be displayed using a [confusion matrix](https:\/\/en.wikipedia.org\/wiki\/Confusion_matrix). Our goal is to have high numbers on the diagonal, such that every patient is either a True Positive (placed in the upper left quadrant) or a True Negative (placed in the lower right quadrant).\n\nNotice that there is one line of code in this function, which will predict that every patient will have heart disease. \n\nHit <kbd>Shift+Enter<\/kbd> to execute this code.","81a9a240":"### Lab Question\n\nHow accurate are your rules employing `age` and `female` on the test set? How do they differ on the positive and negative examples?","884d190f":"#### Step 5.1 `age` and `female`","0550f1b6":"We will be adding our logical rules in functions written below. We will use these functions to try and predict if each patient in our dataset has heart disease. \n\nHit <kbd>Shift+Enter<\/kbd> to run the following sections of code.","480899e9":"### Step 1.3\n\nThat's better! Well, *maybe* we can have donuts, but in moderation? If we add a new parameter to the function, then we'll be able to be more specific about our output.\n\nComplete the function below and encode the following logic. One serving of anything is healthy, more than 10 of anything servings are unhealthy, but in-between, `apples` and `green beans` are healthy.","270ebb4c":"## Appendix\n\nTo help you see all the data involved in the testset, here are two tables of each row and features. The first table shows all **healthy** patients.","255824d0":"#### Step 5.2 `maximum_heart_rate` and `chest_pain`","74c3c1e9":"The second table shows all **diseased** patients.","7724ce58":"*Discuss your results here*","67ddc444":"A common way to combat overfitting is to recognize that you are also trying to minimize the [description length](https:\/\/en.wikipedia.org\/wiki\/Minimum_description_length) of your rule set, similar to the idea of [Occam's razor](https:\/\/en.wikipedia.org\/wiki\/Occam%27s_razor) that the simplest explanation is often the best. You might find less accuracy on the training set, but have more generalization to the testing set.\n\nAs the final piece of this lab, write nested if-statements that capture the logic in the following compact decision tree structure. The grey boxes and lines beneath them represent conditions, and the circles represent predictions to be made when the above chains of conditions are met. If completed correctly, your accuracy on the training set should be 90%, and your accuracy on the testing set should be above 80%.\n\n![heart-tree.png](attachment:heart-tree.png)\n","884acd65":"They also give you some more detailed information about these features. For example, the \"female\" attribute can be True or False. False is shown on the left of this figure, since the values are sorted alphabetically.\n\n* **age**: age in years (*integer*)\n* **female**: true if female patient (*Boolean*)\n* **chest_pain**: four types of chest pain were recorded (*string*)\n  * asymptomatic\n  * atypical angina\n  * non-anginal pain\n  * typical angina \n* **rest_bps**: resting systolic blood pressure in mm Hg on admission to the hospital (*integer*)\n* **cholesterol**: serum cholesterol in mg\/dl (*integer*)\n* **high_fasting_blood_sugar**: true if > 120 mg\/dl (*Boolean*)\n* **rest_ecg**: resting electrocardiographic results (*string*)\n  * hypertrophy\n  * normal\n  * wave abnormality \n* **maximum_heart_rate**: maximum heart rate achieved (*integer*)\n* **exercise_angina**: exercise induced angina (*Boolean*)\n* **vessels**: number of major vessels (0-3) colored by flourosopy, showing they are clogged (*integer*)\n* **heart_disease**: doctor's diagnosis of heart disease (*Boolean*) \n\nThe final piece of data, **heart_disease**, is what they would like to summarize based on the other 10 features.\n\n### Lab Question\n\nWhat conclusions can you draw about the data from the histograms above? Write at least three hypotheses or inferences to summarize these charts, and record them in the box below. ","7d09c308":"## Step 3\n\nThey next present you with the following ten example patients, listing off their features. They would like a way to make decisions about newly admitted patients which is based on this table, and simple enough for someone to remember the rule. They are hoping that the rules you generate on these ten patients will generalize to their whole dataset of over 300 patients.\n\nHit <kbd>Shift+Enter<\/kbd> to execute the following two code cells.","10d49503":"# Grading Criteria\n\nA **Complete** submission includes correct function definitions and thoughtful answers for the following:\n* Correct function definitions for Step 1.\n* Function definitions for each of Steps 5.1, 5.2, and 5.3 that use **only** the specified features and yield 100% accuracy on the **training set**. There is no minimum accuracy for the **testing set** for those steps.\n* A function definition for Step 6 (`final_predict`) that has at least 90% accuracy on the **training set** and at least 80% accuracy on the **testing set**.\n* Insightful and thoughtful answers to the Lab Questions in Steps 2, 3, 4, 5, and 6.\n\nA **Partially Complete** submission includes sincere attempts at defining every function and answering each question, but up to three of the functions are flawed in some way, and up to six of the answers to Lab Questions are in some way lacking.","efb46dc5":"*Discuss your results here*","952c9104":"*Discuss your answers here*","7f9d686f":"## Step 6\n\nYou should notice above that you can get very high accuracy on the training set and still have low accuracy on the testing set. In fact, you could write a rule individually for each example in the training set to get 100%, but this would have very low generalization. This is known as [overfitting](https:\/\/en.wikipedia.org\/wiki\/Overfitting). Run the following section of code to see overfitting in action.","25ec4115":"# Diagnosing Heart Disease\n\n## Step 2\n\nImagine you are tasked by the [Cleveland Clinic](http:\/\/my.clevelandclinic.org\/) to help them train new doctors to diagnose patients with [heart disease](https:\/\/en.wikipedia.org\/wiki\/Cardiovascular_disease). They have been reviewing their [past patient histories](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Heart+Disease) and started to notice some patterns after narrowing their focus to a few key features of each patient. They show you some histograms and bar charts, where the patients with heart disease are colored red, and those without are colored blue. Those features with categorical data are stacked bar charts, while those with numerical data are overlaid histograms.\n\nHit <kbd>Shift+Enter<\/kbd> to execute the following code.","a7d7d9d1":"*Enter your names here*","a126da55":"### Lab Question\n\nIs the accuracy of this simple rule what you expected? Why or why not? "}}