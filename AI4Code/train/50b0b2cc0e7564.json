{"cell_type":{"b8af8730":"code","fb365639":"code","7b8d8f4a":"code","86d6e208":"code","67d83bb2":"code","8d10cef1":"code","ef1e0df7":"code","d7d2bd1d":"code","48173c3c":"code","7893439e":"code","a354a235":"code","94bdaf06":"code","b7f7d07e":"code","fc12b266":"code","b88c7986":"code","c7073cf2":"code","452f42c7":"code","1c2caa8e":"code","da1e6b85":"code","34b058f4":"code","8d6bbf14":"code","4c233afb":"code","aa7d3114":"code","ee76ed4a":"code","9684cf22":"code","3a17b293":"code","ee7b0425":"code","ef093fd3":"code","09183aca":"code","59c8c211":"code","f7db9a08":"code","ff122114":"code","3a2243ca":"code","0b1a2471":"code","5aff8ab5":"code","4c7a6c8f":"code","d62bcfef":"code","2835ab1b":"code","016a3dfd":"code","16431c13":"code","7f13daad":"code","b79449fc":"code","26dd0a12":"code","38249023":"code","0250fea9":"code","d85858e5":"code","d4f356ad":"code","6805dde0":"code","44e7c59e":"code","412c63a8":"code","e39eeefd":"code","b494dbeb":"code","950da385":"code","8dba8147":"code","2a009c65":"code","5a7d3862":"code","98490eba":"code","51999216":"code","8b71b693":"code","1b191db4":"code","e6368a01":"code","00c3ae6e":"code","bdb2c078":"code","3ed17d43":"code","88770d25":"code","ac9d797d":"code","41fadd4b":"code","952e6dff":"code","4fab360b":"code","156b63f6":"code","103763b4":"code","24189e76":"code","cbfe43fd":"code","26d06ac2":"code","332781b9":"code","eab0bc47":"code","8f930a6e":"code","6a6f6953":"code","a84080e3":"code","54d995ba":"code","0e6b8177":"code","6b8243a3":"code","a0be67a9":"code","892265f5":"code","92f84a08":"code","8abf8012":"code","c3fea91e":"markdown","97bc4889":"markdown","c62eaefb":"markdown","87381336":"markdown","7c6b82e9":"markdown","3bf0cec0":"markdown","c46e68d1":"markdown","8d39d03e":"markdown","293afe8c":"markdown","0af5e4ba":"markdown","07f434a1":"markdown","aa955715":"markdown","270b9cce":"markdown","5078f082":"markdown","221c60d2":"markdown","34824370":"markdown","3b0c5d8c":"markdown","397bd356":"markdown","f31ebc0e":"markdown","37879a48":"markdown","e9ea310d":"markdown","ce5d5f9b":"markdown","a64cd46b":"markdown","9313d177":"markdown","8a8a36ad":"markdown","25f37447":"markdown","766089d2":"markdown","d25ef0ae":"markdown","96b01c07":"markdown","fd5c28d2":"markdown","422c0808":"markdown"},"source":{"b8af8730":"import pandas as pd\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport os\nprint(os.listdir(\"..\/input\"))","fb365639":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","7b8d8f4a":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","86d6e208":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306eProfile Report\u3092\u4f5c\u6210\n# (\u51fa\u529b\u7d50\u679c\u304c\u81a8\u5927\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3002\u5fc5\u8981\u306a\u6642\u3060\u3051\u5b9f\u884c)\n# pandas_profiling.ProfileReport(train)","67d83bb2":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306eProfile Report\u3092\u4f5c\u6210\n# (\u51fa\u529b\u7d50\u679c\u304c\u81a8\u5927\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3002\u5fc5\u8981\u306a\u6642\u3060\u3051\u5b9f\u884c)\n# pandas_profiling.ProfileReport(test)","8d10cef1":"# \u5168\u30c7\u30fc\u30bf\u3092\u4e00\u65e6\u7d50\u5408\n# \u30c6\u30b9\u30c8\u3082\u542b\u3081\u305f\u5168\u30c7\u30fc\u30bf\u3067\u7279\u5fb4\u91cf\u3092\u898b\u3066\u3044\u304f\uff08\u4f8b\uff1a\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\u969b\u306emedian\u5024\u306a\u3069\uff09\nntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.Survived.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['Survived'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","ef1e0df7":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:50]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})","d7d2bd1d":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","48173c3c":"all_data['Cabin'] = all_data['Cabin'].fillna(\"Undefined\")","7893439e":"all_data.head()","a354a235":"all_data.dtypes","94bdaf06":"def get_cabin_num(cabin):\n    if cabin == \"Undefined\":\n        return np.nan\n    else:\n        cabins = cabin.split(\" \")\n        count = len(cabins)\n        return count\nall_data['CabinCount'] = all_data['Cabin'].apply(get_cabin_num)","b7f7d07e":"all_data.query(\"CabinCount > 1\")","fc12b266":"def split_cabin(cabin, num):\n    if cabin == \"Undefined\":\n        return \"Undefined\"\n    else:\n        cabins = cabin.split(\" \")\n        if len(cabins) >= num:\n            return cabins[num - 1]\n        else:\n            return \"Undefined\"\nall_data['Cabin1'] = all_data['Cabin'].apply(split_cabin, num=1)\nall_data['Cabin2'] = all_data['Cabin'].apply(split_cabin, num=2)\nall_data['Cabin3'] = all_data['Cabin'].apply(split_cabin, num=3)\nall_data['Cabin4'] = all_data['Cabin'].apply(split_cabin, num=4)","b88c7986":"all_data.query(\"CabinCount > 1\").head()","c7073cf2":"def get_cabin_type(cabin):\n    return cabin[0]\nall_data['CabinType1'] = all_data['Cabin1'].apply(get_cabin_type)\nall_data['CabinType2'] = all_data['Cabin2'].apply(get_cabin_type)\nall_data['CabinType3'] = all_data['Cabin3'].apply(get_cabin_type)\nall_data['CabinType4'] = all_data['Cabin4'].apply(get_cabin_type)","452f42c7":"# CabinType\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinType1').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('CabinType1',hue='Survived',data=train_ch)","1c2caa8e":"# Type\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinType2').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('CabinType2',hue='Survived',data=train_ch)","da1e6b85":"# Type\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinType3').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('CabinType3',hue='Survived',data=train_ch)","34b058f4":"# Type\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinType4').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('CabinType4',hue='Survived',data=train_ch)","8d6bbf14":"print(train_ch.query('Survived == 1').size)\nprint(train_ch.query('Survived != 1').size)","4c233afb":"def get_cabin_num(cabin):\n    if cabin == \"Undefined\":\n        return \"Undefined\"\n    else:\n        return \"c_\" + cabin[1:]\nall_data['CabinNum1'] = all_data['Cabin1'].apply(get_cabin_num)\nall_data['CabinNum2'] = all_data['Cabin2'].apply(get_cabin_num)\nall_data['CabinNum3'] = all_data['Cabin3'].apply(get_cabin_num)\nall_data['CabinNum4'] = all_data['Cabin4'].apply(get_cabin_num)","aa7d3114":"# print(all_data['CabinNum1'].unique())\n# print(all_data['CabinNum2'].unique())\n# print(all_data['CabinNum3'].unique())\n# print(all_data['CabinNum4'].unique())","ee76ed4a":"# CabinNum1\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinNum1').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))","9684cf22":"all_data = all_data.drop('Cabin', axis=1)\nall_data = all_data.drop('CabinCount', axis=1)\nall_data = all_data.drop('Cabin1', axis=1)\nall_data = all_data.drop('Cabin2', axis=1)\nall_data = all_data.drop('Cabin3', axis=1)\nall_data = all_data.drop('Cabin4', axis=1)\n# all_data = all_data.drop('CabinType1', axis=1)\nall_data = all_data.drop('CabinType2', axis=1)\nall_data = all_data.drop('CabinType3', axis=1)\nall_data = all_data.drop('CabinType4', axis=1)\nall_data = all_data.drop('CabinNum1', axis=1)\nall_data = all_data.drop('CabinNum2', axis=1)\nall_data = all_data.drop('CabinNum3', axis=1)\nall_data = all_data.drop('CabinNum4', axis=1)","3a17b293":"# Age\u304cNaN\u306b\u306a\u3063\u3066\u308b\u3084\u3064\u306e\u7279\u5fb4\u3092\u8abf\u3079\u3066\u307f\u308b\nall_data.query('Age != Age').head()","ee7b0425":"def get_type_from_name(name):\n    array_name = name.split(\",\")\n    family_name = array_name[0]\n    name_with_type = array_name[1].split(\".\")\n    type = name_with_type[0].replace(\" \",\"\")\n    return type\nall_data['Type'] = all_data['Name'].apply(get_type_from_name)","ef093fd3":"all_data[\"Age\"] = all_data.groupby(\"Type\")[\"Age\"].transform(\n    lambda x: x.fillna(x.median()))","09183aca":"# Embarked\u304cNaN\u306b\u306a\u3063\u3066\u3044\u308b\u3084\u3064\u3092\u8abf\u3079\u3066\u307f\u308b\nall_data.query('Embarked != Embarked')","59c8c211":"all_data[\"Embarked\"] = all_data.groupby(\"Pclass\")[\"Embarked\"].transform(\n    lambda x: x.fillna(x.mode()))","f7db9a08":"same_ticket_count_gp = all_data.groupby('Ticket', as_index=False).size().reset_index()\nsame_ticket_count_gp = same_ticket_count_gp.rename(columns={0: 'TicketCount'})\nsame_ticket_count_gp.head()\nall_data = pd.merge(all_data, same_ticket_count_gp, on='Ticket', how='left')\nall_data['Fare'] = all_data['Fare'] \/ all_data['TicketCount']\nall_data.head()","ff122114":"all_data = all_data.drop('TicketCount', axis=1)","3a2243ca":"# Fare\u304cNaN\u306b\u306a\u3063\u3066\u3044\u308b\u3084\u3064\u3092\u8abf\u3079\u307f\u308b\nall_data.query('Fare != Fare')","0b1a2471":"all_data[\"Fare\"] = all_data.groupby(\"Pclass\")[\"Fare\"].transform(\n    lambda x: x.fillna(x.median()))","5aff8ab5":"all_data['Type'].unique()","4c7a6c8f":"# Miss,Master,Mr,Mrs,Ms\u304f\u3089\u3044\u3057\u304b\u3044\u3089\u306a\u3044\u3002\u3042\u3068\u306fOther\u306b\u3059\u308b\nall_data['Type'] = all_data['Type'].replace('Mlle', 'Miss')\nall_data['Type'] = all_data['Type'].replace('Ms', 'Miss')\nall_data['Type'] = all_data['Type'].replace('Mme', 'Mrs')\nall_data['Type'] = [val if val in ['Mr', 'Mrs', 'Miss', 'Ms', 'Master'] else 'Others' for val in all_data['Type']]","d62bcfef":"# Type\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Type').sum()\nprint(grouped_ch)\nsns.countplot('Type',hue='Survived',data=train_ch)","2835ab1b":"# Master(\u8d64\u3061\u3083\u3093)\nprint(\"Pclass:1, Master count: \" + str(train_ch.query('Type == \"Master\" and Pclass == 1').shape[0]))\nprint(\"Pclass:1, Master survived count: \" + str(train_ch.query('Type == \"Master\" and Pclass == 1')['Survived'].sum()))\nprint(\"Pclass:2, Master count: \" + str(train_ch.query('Type == \"Master\" and Pclass == 2').shape[0]))\nprint(\"Pclass:2, Master survived count: \" + str(train_ch.query('Type == \"Master\" and Pclass == 2')['Survived'].sum()))\nprint(\"Pclass:3, Master count: \" + str(train_ch.query('Type == \"Master\" and Pclass == 3').shape[0]))\nprint(\"Pclass:3, Master survived count: \" + str(train_ch.query('Type == \"Master\" and Pclass == 3')['Survived'].sum()))","016a3dfd":"all_data['FamilyNum'] = all_data['SibSp'] + all_data['Parch'] + 1","16431c13":"# FamilyNum\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('FamilyNum').sum()\nprint(grouped_ch)\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('FamilyNum',hue='Survived',data=train_ch)","7f13daad":"all_data['Is_Alone'] = all_data['FamilyNum'] == 1","b79449fc":"# Is_Alone\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Is_Alone').sum()\nprint(grouped_ch)\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Is_Alone',hue='Survived',data=train_ch)","26dd0a12":"# \u8a18\u8f09\u306b\u3076\u308c\u306e\u3042\u308b\u90e8\u5206\u3092\u306a\u304f\u3059\n# all_data['Ticket'] = all_data['Ticket'].str.replace(\"\/\",\"\")\n# all_data['Ticket'] = all_data['Ticket'].str.replace(\".\",\"\")\ndef get_ticket_sign_1(ticket):\n    array_name = ticket.split(\" \")\n    if len(array_name) > 1:\n        sign = array_name[0]\n        array_sign = sign.split(\"\/\")\n        if len(array_sign) > 1:\n            return array_sign[0]\n        else:\n            return array_sign[0]\n    else:\n        return \"Undefined\"\n    \ndef get_ticket_sign_2(ticket):\n    array_name = ticket.split(\" \")\n    if len(array_name) > 1:\n        sign = array_name[0]\n        array_sign = sign.split(\"\/\")\n        if len(array_sign) > 1:\n            return array_sign[1]\n        else:\n            return \"Undefined\"\n    else:\n        return \"Undefined\"\n\ndef get_ticket_no(ticket):\n    array_name = ticket.split(\" \")\n    if len(array_name) > 2:\n        return array_name[2]\n    elif len(array_name) == 2:\n        return array_name[1]\n    else:\n        return array_name[0]\n    \nall_data['Ticket_Sign1'] = all_data['Ticket'].apply(get_ticket_sign_1)\nall_data['Ticket_Sign2'] = all_data['Ticket'].apply(get_ticket_sign_2)\nall_data['Ticket_No'] = all_data['Ticket'].apply(get_ticket_no)","38249023":"all_data.head()","0250fea9":"print(all_data['Ticket_Sign1'].unique())\nprint(all_data['Ticket_Sign2'].unique())\nprint(all_data['Ticket_No'].unique())","d85858e5":"all_data['Ticket_Sign1'] = all_data['Ticket_Sign1'].replace('STON', 'SOTON')\nall_data['Ticket_Sign1'] = all_data['Ticket_Sign1'].str.replace('.', '')\nprint(all_data['Ticket_Sign1'].unique())","d4f356ad":"# all_data['Ticket_Sign1'] = [val if val in ['Undefined', 'PC', 'CA', 'SOTON', 'SC', 'FCC', 'SW', 'PP', 'A', 'C', 'P', 'SO', 'W', 'WE'] else 'Others' for val in all_data['Ticket_Sign1']]","6805dde0":"# Ticket_Sign1\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Ticket_Sign1').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Ticket_Sign1',hue='Survived',data=train_ch)","44e7c59e":"# Ticket_Sign2\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Ticket_Sign2').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Ticket_Sign2',hue='Survived',data=train_ch)","412c63a8":"# Ticket_No\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Ticket_No').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\n# sns.countplot('Ticket_No',hue='Survived',data=train_ch)","e39eeefd":"all_data = all_data.drop('Ticket_No', axis=1)\nall_data = all_data.drop('Ticket_Sign2', axis=1)\nall_data = all_data.drop(\"Ticket\", axis=1)","b494dbeb":"all_data.dtypes","950da385":"all_data['Pclass'] = ['c_' + str(x) for x in all_data.Pclass]","8dba8147":"all_data['FareBin'] = pd.cut(all_data.Fare, 10, labels=False)\nall_data['AgeBin'] = pd.cut(all_data.Age, 10, labels=False)","2a009c65":"# FareBin\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('FareBin').sum()\nprint(grouped_ch)\nsns.countplot('FareBin',hue='Survived',data=train_ch)","5a7d3862":"# AgeBin\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('AgeBin').sum()\nprint(grouped_ch)\nsns.countplot('AgeBin',hue='Survived',data=train_ch)","98490eba":"all_data = all_data.drop(['Fare', 'Age'], axis=1)","51999216":"# SibSp\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\nsns.countplot('AgeBin',hue='SibSp',data=train_ch)","8b71b693":"# Parch\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Parch',hue='Survived',data=train_ch)","1b191db4":"all_data.head()","e6368a01":"# \u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u70ba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.preprocessing import LabelEncoder\n# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u304cobject\u306e\u5217\u306e\u5024\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\nlbl = LabelEncoder()\nlbl.fit(list(all_data['CabinType1'].values))\nall_data['CabinType1'] = lbl.transform(list(all_data['CabinType1'].values))\nlbl.fit(list(all_data['Ticket_Sign1'].values))\nall_data['Ticket_Sign1'] = lbl.transform(list(all_data['Ticket_Sign1'].values))","00c3ae6e":"all_data.head()","bdb2c078":"all_data = all_data.drop('Sex', axis=1) # Type\u3068\u91cd\u8907\u3057\u305d\u3046","3ed17d43":"all_data_PassengerId = all_data['PassengerId']\nall_data_Name = all_data['Name']\nall_data = all_data.drop('PassengerId', axis=1)\nall_data = all_data.drop('Name', axis=1)","88770d25":"all_data = pd.get_dummies(all_data)","ac9d797d":"train_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\n# Find correlations with the target and sort\ncorrelations = train_ch.corr()['Survived'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(30))","41fadd4b":"all_data = all_data.drop('FamilyNum', axis=1)\nall_data = all_data.drop('Type_Mr', axis=1)\n# all_data = all_data.drop('Is_Alone', axis=1)\nall_data = all_data.drop('Embarked_Q', axis=1)\nall_data = all_data.drop('Type_Others', axis=1)","952e6dff":"all_data.head()","4fab360b":"all_data.dtypes","156b63f6":"all_data.head()","103763b4":"# all_data['Fare'] = (all_data['Fare'] - all_data['Fare'].mean()) \/ all_data['Fare'].std()\n# all_data['Age'] = (all_data['Age'] - all_data['Age'].mean()) \/ all_data['Age'].std()\n# all_data['CabinNum'] = (all_data['CabinNum'] - all_data['CabinNum'].mean()) \/ all_data['CabinNum'].std()\n# all_data['FamilyNum'] = (all_data['FamilyNum'] - all_data['FamilyNum'].mean()) \/ all_data['FamilyNum'].std()\n# all_data['FareBin'] = (all_data['FareBin'] - all_data['FareBin'].mean()) \/ all_data['FareBin'].std()\n# all_data['AgeBin'] = (all_data['AgeBin'] - all_data['AgeBin'].mean()) \/ all_data['AgeBin'].std()\n# all_data['Cabin'] = (all_data['Cabin'] - all_data['Cabin'].mean()) \/ all_data['Cabin'].std()\n# all_data['Ticket'] = (all_data['Ticket'] - all_data['Ticket'].mean()) \/ all_data['Ticket'].std()\nall_data = (all_data - all_data.mean()) \/ all_data.std()","24189e76":"X_train = all_data.iloc[:train.shape[0],:]\nX_train['PassengerId'] = all_data_PassengerId.iloc[:train.shape[0]]\nX_test = all_data.iloc[train.shape[0]:,:]\nX_test_PassengerId = all_data_PassengerId.iloc[train.shape[0]:]","cbfe43fd":"from sklearn.model_selection import KFold, train_test_split\nX = X_train\nY = y_train\nX_train, X_val, y_train, y_val = train_test_split(\n    X, Y, test_size=0.3, random_state=0\n)","26d06ac2":"X_train_Passenger_Id = X_train.PassengerId\nX_train = X_train.drop('PassengerId', axis=1)\nX_val_Passenger_Id = X_val.PassengerId\nX_val = X_val.drop('PassengerId', axis=1)","332781b9":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)","eab0bc47":"y_pred_val_1 = svc.predict(X_val)\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\ncm = confusion_matrix(y_val, y_pred_val_1)\nprint(cm)\n\naccuracy=accuracy_score(y_pred_val_1,y_val)\nprint(accuracy)","8f930a6e":"# \u30e2\u30c7\u30eb\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.linear_model import LogisticRegression\n# C\u30921,10,100,1000,10000\u3068\u5909\u3048\u305f\u304c\u3042\u307e\u308a\u7d50\u679c\u306b\u5f71\u97ff\u306f\u306a\u304b\u3063\u305f\nslr = LogisticRegression(C = 100)\n\n# fit\u95a2\u6570\u3067\u5b66\u7fd2\u958b\u59cb\nslr.fit(X_train,y_train)\n\n# \u504f\u56de\u5e30\u4fc2\u6570(\u56de\u5e30\u5206\u6790\u306b\u304a\u3044\u3066\u5f97\u3089\u308c\u308b\u56de\u5e30\u65b9\u7a0b\u5f0f\u306e\u5404\u8aac\u660e\u5909\u6570\u306e\u4fc2\u6570)\u3092\u51fa\u529b\n# \u504f\u56de\u5e30\u4fc2\u6570\u306fscikit-learn\u306ecoef\u3067\u53d6\u5f97\nprint('\u50be\u304d\uff1a{0}'.format(slr.coef_[0]))\n\n# y\u5207\u7247(\u76f4\u7dda\u3068y\u8ef8\u3068\u306e\u4ea4\u70b9)\u3092\u51fa\u529b\n# \u4f59\u8ac7\uff1ax\u5207\u7247\u3082\u3042\u308a\u3001\u305d\u308c\u306f\u76f4\u7dda\u3068x\u8ef8\u3068\u306e\u4ea4\u70b9\u3092\u6307\u3059\nprint('y\u5207\u7247: {0}'.format(slr.intercept_))","6a6f6953":"y_pred_val_2 = slr.predict(X_val)\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\ncm = confusion_matrix(y_val, y_pred_val_2)\nprint(cm)\n\naccuracy=accuracy_score(y_pred_val_2,y_val)\nprint(accuracy)","a84080e3":"import copy\nX_val_ch = copy.copy(X_val)\nX_val_ch['PassengerId'] = X_val_Passenger_Id\nX_val_ch['Survived_pred'] = y_pred_val\nX_val_ch = pd.merge(X_val_ch, train, on='PassengerId')","54d995ba":"X_val_ch.to_csv('validation_result.csv', index=False)","0e6b8177":"X_test.head()","6b8243a3":"X_train.head()","a0be67a9":"y_test_pred = slr.predict(X_test)","892265f5":"y_test_pred_2 = svc.predict(X_test)","92f84a08":"submission = pd.DataFrame({\n    \"PassengerId\": X_test_PassengerId,\n    \"Survived\": y_test_pred_2\n})\nsubmission.to_csv('submission.csv', index=False)","8abf8012":"X_train.head()","c3fea91e":"CabinType1\u306f\u4f7f\u3048\u305d\u3046\u3060\u3051\u3069\u3001CabinType2\uff5e4\u306f\u3044\u3089\u306a\u305d\u3046","97bc4889":"Pclass\u304c1\u306a\u306e\u3067\u3001\u4e0a\u6d41\u968e\u7d1a\u306e\u4eba\u3002Pclass\u304c1\u306e\u4eba\u3005\u306f\u6050\u3089\u304f\u540c\u3058\u3088\u3046\u306a\u3068\u3053\u308d\u304b\u3089\u4e57\u3063\u3066\u308b\u306f\u305a\u306a\u306e\u3067\u3001Pclass\u304c1\u306e\u4eba\u306e\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3088\u3046\u306b\u3059\u308b\u3002","c62eaefb":"\u8d64\u3061\u3083\u3093\u306f40\u4eba\u3044\u305f\u3051\u3069\u300120\u4eba\u304f\u3089\u3044\u3057\u304b\u751f\u304d\u6b8b\u3089\u306a\u304b\u3063\u305f\u3002\u3053\u306e\u8fba\u306f\u7b49\u7d1a\u3082\u95a2\u4fc2\u3057\u3066\u305d\u3046","87381336":"# Cabin\u306e\u8981\u7d20\u3092\u7d30\u5207\u308c\u306b\u3059\u308b","7c6b82e9":"## \u76f8\u95a2\u95a2\u4fc2\u306e\u30c1\u30a7\u30c3\u30af","3bf0cec0":"# \u76f8\u95a2\u304c\u5f37\u305d\u3046\u306a\u306e\u3092\u843d\u3068\u3059","c46e68d1":"\u691c\u8a3c\u7d50\u679c\u3092\u5206\u6790\u3057\u305f\u7d50\u679c\u3001\u7537\u6027\u3092UnSurvived\u3068\u3059\u308b\u7387\u304c\u9ad8\u3059\u304e\u308b\u305f\u3081\u3001\u3042\u3048\u3066Type_Mr\u3092\u6d88\u3059","8d39d03e":"# \u7d50\u679cCSV\u306e\u4f5c\u6210","293afe8c":"# \u3042\u3093\u307e\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u3084\u3064\uff08PassengerId,Name,Ticket\uff09\u306f\u6d88\u3059","0af5e4ba":"# Cabin\u306f\u8907\u6570\u6301\u3064\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u5206\u5272\u3059\u308b","07f434a1":"\u3084\u3063\u3071\u308a\u5f53\u521d\u306e\u60c5\u5831\u901a\u308a\u3001Miss\u3001Mrs\u304c\u591a\u3044\u3002\u3053\u3053\u3067\u306e\u7279\u5fb4\u3068\u3057\u3066\u306fMiss\u3068Mrs\u3067\u306fMiss\u306e\u65b9\u304c\u591a\u3044\u3068\u3044\u3046\u3053\u3068\u3002\u60f3\u5b9a\u3067\u306f\u65e2\u5a5a\u5973\u6027\u306e\u65b9\u304c\u591a\u3044\u3068\u601d\u3063\u305f\u3093\u3060\u3051\u3069\u6050\u3089\u304f\u5b50\u4f9b\u3082\u542b\u307e\u308c\u308b\u3093\u3060\u308d\u3046\u306a\u3002","aa955715":"Ticket No\u306b\u3042\u307e\u308a\u5dee\u306f\u306a\u3055\u305d\u3046","270b9cce":"# SVC","5078f082":"# EDA","221c60d2":"# Fare\u306e\u984d\u3092\u6574\u7406(\u3069\u3046\u3082\u540c\u4e00\u30c1\u30b1\u30c3\u30c8\u3092\u6301\u3063\u3066\u3044\u3044\u308b\u4eba\u306e\u91d1\u984d\u304c\u3084\u305f\u3089\u9ad8\u3044\u3002\u540c\u3058\u30c1\u30b1\u30c3\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u4eba\u306e\u6570\u3067Fare\u3092\u5272\u308b\u3068\u826f\u3044\u611f\u3058\u306b\u306a\u308b)","34824370":"# \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u3068\u4e88\u6e2c","3b0c5d8c":"# \u6a19\u6e96\u5316\uff08\u4eca\u56de\u5229\u7528\u3059\u308b\u30e2\u30c7\u30eb\u306fLinear Regression\u3067\u4e88\u6e2c\u3059\u308b\u305f\u3081\uff09","397bd356":"# \u6b20\u640d\u5024\u3082\u57cb\u307e\u3063\u305f\u306e\u3067\u3001object\u578b\u3092Dummy Encode\u3059\u308b","f31ebc0e":"# Cabin\u306eType\u3067\u751f\u5b58\u7387\u304c\u5909\u308f\u308b\u304b\u30c1\u30a7\u30c3\u30af","37879a48":"\u3042\u3093\u307e\u308a\u5dee\u5206\u306a\u3055\u305d\u3046","e9ea310d":"## \u6b20\u640d\u5024","ce5d5f9b":"# Fare, Age\u3092Bin\u3067\u8868\u793a\uff08\u8ffd\u52a0\uff09","a64cd46b":"# Ticket\u306f\u8272\u3005\u7a2e\u985e\u304c\u3042\u308b\u304b\u3089\u5206\u89e3","9313d177":"## \u5973\u6027\u306f\u5206\u304b\u308b\u3051\u3069\u7537\u6027\u306e\u65e2\u5a5a\u3001\u672a\u5a5a\u304c\u5206\u304b\u3089\u3093\u3002\u5bb6\u65cf\u306e\u6570\u3092\u51fa\u3057\u3066\u307f\u3088\u3046","8a8a36ad":"# \u3042\u3093\u307e\u308a\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u3084\u3064\u3068\u3001\u4f59\u8a08\u306a\u3084\u3064\u306f\u524a\u9664\u3059\u308b","25f37447":"# SibSp\u3068Parch\u5225\u306e\u7d50\u679c\u751f\u5b58\u8005\u6570\u3092\u78ba\u8a8d","766089d2":"# Type\u5225\u306e\u50be\u5411\u3092\u898b\u3066\u307f\u308b","d25ef0ae":"# Logistic Regression","96b01c07":"Pclass\u304c3\u306e\u4eba\u306a\u306e\u3067\u3001Pclass\u304c3\u306eFare\u306e\u4e2d\u592e\u5024\u3092\u6c42\u3081\u3066\u57cb\u3081\u308b\u3002","fd5c28d2":"# \u7279\u5b9a\u9805\u76ee\u3092LabelEncoding","422c0808":"# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u5909\u63db"}}