{"cell_type":{"ca532b0e":"code","9cab3196":"code","1f4ddc30":"code","525fde7f":"code","1d641089":"code","264ab81d":"code","8a1c5d69":"code","59f712fd":"code","13b435e6":"code","cea20dcc":"code","1fdbf833":"code","2b06d216":"code","7dba10fa":"code","0aa7921a":"code","f097a7b2":"code","12883a1a":"code","d3442692":"code","29cf2342":"code","b630b731":"code","786cbd66":"code","cab5dd44":"code","9c02e97d":"code","5bffda37":"markdown","1a761464":"markdown","e620c3b3":"markdown","4d7bd9ba":"markdown","9bae2be3":"markdown","bfe583eb":"markdown","e85f6539":"markdown","962f32fa":"markdown","af60824b":"markdown","bc453acd":"markdown","762d4b6f":"markdown","d9e57bfd":"markdown","b0eb38c1":"markdown","00eb5a3a":"markdown","f346276e":"markdown"},"source":{"ca532b0e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport seaborn as sns \nimport plotly.express as ex\nBASEPATH='..\/input\/agriculture-master-competition'","9cab3196":"def read_csvfile(filepath):\n    df = pd.read_csv(filepath)\n    return df\ninput_df = read_csvfile(os.path.join(BASEPATH,\"train_data.csv\"))\ninput_df.info()\nlabelcolumns = list(input_df.columns[20:])\nfeaturecolumns = list(input_df.columns[2:20])","1f4ddc30":"input_df[featurecolumns].describe()","525fde7f":"featurecolumns.remove(\"d.rainfall_detect\")","1d641089":"x = sorted(input_df[\"d.wind_speed\"].tolist())\nprint(x[:10])\ninput_df = input_df[input_df[\"d.wind_speed\"] != -9999]\ndisplay(input_df[featurecolumns].describe())","264ab81d":"print(len(input_df[input_df[\"d.photometric\"]>input_df[\"d.photometric\"].std()*3]))\nprint(len(input_df[input_df[\"d.outside_photometric\"]>input_df[\"d.outside_photometric\"].std()*3]))\nprint(len(input_df[input_df[\"d.radiometric\"]>input_df[\"d.radiometric\"].std()*3]))","8a1c5d69":"input_df.describe(include=['O'])","59f712fd":"for lc in labelcolumns:\n    newgroup=list(featurecolumns)\n    newgroup.append(lc)\n    display(input_df[newgroup].groupby(lc).mean())","13b435e6":"for lc in labelcolumns:  \n    display(input_df[labelcolumns].groupby(lc).mean())  ","cea20dcc":"def showDataHist():\n    fig,ax = plt.subplots(figsize = (20,15))\n    ax = fig.gca()\n    input_df.hist(ax=ax)\n    plt.show()\nshowDataHist()","1fdbf833":"def showactuatorplot(df):\n    fig,ax =  plt.subplots(3,4,figsize=(17,10))\n    plotindex=0\n    for colname in df.columns[20:]:\n        x = list(set(df[colname]))\n        y=[]\n        sorted(x) \n        for i in x:\n            y.append(len(df[df[colname] == i]))\n        print(colname)\n        print(y[:10])\n        \n        ax[plotindex\/\/4,plotindex%4].bar(x,y)\n        ax[plotindex\/\/4,plotindex%4].set_title(colname)\n        plotindex+=1\n    fig.show()\nshowactuatorplot(input_df)","2b06d216":"def showCorrelation(df):\n    plt.figure(figsize=(21,15))\n    ax = sns.heatmap(df.corr(),square=False, annot=True, fmt='.2f', linecolor='white')\nshowCorrelation(input_df[featurecolumns+labelcolumns])","7dba10fa":"sns.pairplot(input_df[featurecolumns], kind='scatter', diag_kind='hist')","0aa7921a":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.stripplot(x=\"actuator10\", y=\"d.radiometric\", data=input_df,ax=ax)","f097a7b2":"def showrelationplot_onefeature(featurename):\n    fig,ax =  plt.subplots(11,1,figsize=(5,65))\n    plotindex=0\n    for colname in labelcolumns:\n        x1 = input_df[input_df[colname] == 1][featurename]\n        x2 = input_df[input_df[colname] == 0][featurename]\n        binsx =  50 #max(int(x1.max()-x1.min()),int(x2.max()-x2.min()))\n        \n        ax[plotindex%11].axis(xmin=min(x1.min(),x2.min()), xmax=max(x1.max(),x2.max()))\n        sns.histplot(x=x1,ax=ax[plotindex%11],bins=binsx,color='red')\n        \n        ax[plotindex%11].axis(xmin=min(x1.min(),x2.min()), xmax=max(x1.max(),x2.max()))\n        sns.histplot(x=x2,ax=ax[plotindex%11],bins=binsx,color='blue')\n        \n        ax[plotindex%11].set_title(colname)\n        plotindex+=1\n    fig.show()\nshowrelationplot_onefeature('d.soil_EC')","12883a1a":"def showrelationplot_twofeature(featurename1,featurename2,actuatorname=None):\n    if actuatorname != None:\n        x = input_df[input_df[actuatorname] == 1][[featurename1,featurename2,actuatorname]]\n        x=x.append(input_df[input_df[actuatorname] == 0][[featurename1,featurename2,actuatorname]] )\n        colors = ['r' if a == 0 else 'g' for a in x[actuatorname]] \n        fig , ax = plt.subplots()\n        sns.scatterplot(x[featurename1],x[featurename2],ax=ax,c=colors)\n        fig.show()\n    else:\n        fig , ax = plt.subplots(11,1,figsize=(5,65))\n        for idx,lc in enumerate(labelcolumns):\n            actuatorname=lc\n            x = input_df[input_df[actuatorname] == 1][[featurename1,featurename2,actuatorname]]\n            x=x.append(input_df[input_df[actuatorname] == 0][[featurename1,featurename2,actuatorname]] )\n            colors = ['r' if a == 0 else 'g' for a in x[actuatorname]] \n            ax[idx].set_title(actuatorname)\n            sns.scatterplot(x=x[featurename1],y=x[featurename2],ax=ax[idx],c=colors)\n            fig.show()\nprint(featurecolumns)\nshowrelationplot_twofeature(\"d.soil_temperature\",\"d.soil_EC\")","d3442692":"def showrelationplot_threefeature(featurename1,featurename2,featurename3,actuatorname=None):\n    if actuatorname != None:\n        x = input_df[input_df[actuatorname] == 1][[featurename1,featurename2,featurename3,actuatorname]]\n        x=x.append(input_df[input_df[actuatorname] == 0][[featurename1,featurename2,featurename3,actuatorname]] )\n        colors = ['r' if a == 0 else 'g' for a in x[actuatorname]] \n        fig = ex.scatter_3d(input_df,x=featurename1,y=featurename2,z=featurename3,color=actuatorname)\n        fig.show()\nprint(featurecolumns)\nshowrelationplot_threefeature(\"d.soil_temperature\",\"d.soil_EC\",\"d.soil_PH\",\"actuator03\")","29cf2342":"def dataNormalized(feature_df,zeromean=True):\n    if zeromean:\n        feature_df = (feature_df - feature_df.mean())\/feature_df.std()\n    else:\n        feature_df=(feature_df-feature_df.min())\/(feature_df.max()-feature_df.min())\n    feature_df[\"d.rainfall_detect\"]=0\n    return feature_df\nnormalized_df = dataNormalized(input_df[featurecolumns],False)\nnormalized_df.describe()","b630b731":"def balanceDataset(train_df,valid_df,minnum):\n    for lc in labelcolumns:\n        print(len(train_df[train_df[lc] == 0]),len(valid_df[valid_df[lc] == 0]),len(train_df[train_df[lc] == 1]),len(valid_df[valid_df[lc] == 1]))\n    print(\"===\")\n    for lc in labelcolumns:\n        l=0 if len(valid_df[valid_df[lc] == 1]) > len(valid_df[valid_df[lc] == 0]) else 1\n        trainn = len(train_df[train_df[lc] == l])\n        validn=len(valid_df[valid_df[lc] == l])\n        if validn+1 < minnum*(trainn+validn):\n            moven = (trainn+validn)*minnum-validn\n            move_rows = train_df[train_df[lc] == l].sample(frac=moven\/trainn).copy()\n            valid_df=valid_df.append(move_rows)\n            train_df=train_df.drop(move_rows[\"index\"])\n\n            validnn=len(valid_df[valid_df[lc] == (not l)])\n            if validnn > len(move_rows):\n                move_rows = valid_df[valid_df[lc] == (not l)].sample(frac=len(move_rows)\/validnn).copy()\n                train_df=train_df.append(move_rows)\n                valid_df=valid_df.drop(move_rows[\"index\"])\n    for lc in labelcolumns:\n        print(len(train_df[train_df[lc] == 0]),len(valid_df[valid_df[lc] == 0]),len(train_df[train_df[lc] == 1]),len(valid_df[valid_df[lc] == 1]))\n    return train_df,valid_df\n\n\ndef splitDataframe(df,train_sample):\n    shuffle_df = df.sample(frac=1)\n    train_df,valid_df = np.split(shuffle_df,[int(train_sample*len(shuffle_df))])\n    print(len(train_df),len(valid_df))\n    train_df,valid_df=balanceDataset(train_df,valid_df,0.3)\n    print(len(train_df),len(valid_df))\n    return train_df,valid_df\n            \ntrain_df,valid_df=splitDataframe(input_df,0.8)","786cbd66":"def trainDataframeBalance(df):\n    balancecolumns = labelcolumns[:6]\n    balance_df = pd.DataFrame(columns = df.columns)\n    for cn in balancecolumns:\n        balance_df=balance_df.append(df[df[cn] == 0].copy())\n        \n    balancecolumns = labelcolumns[-2:]\n    for cn in balancecolumns:\n        balance_df=balance_df.append(df[df[cn] == 1].copy())\n        \n    balancecolumns = labelcolumns[:6]\n    for cn in balancecolumns:\n        tmp_zero=balance_df[balance_df[cn] == 0]\n        tmp_one=balance_df[balance_df[cn] == 1]\n        if 2*len(tmp_one)<len(tmp_zero):\n            balance_df=balance_df.append(df[df[cn] == 1].sample(frac=(len(tmp_zero)-len(tmp_one))\/(len(tmp_zero)*2)))\n    return balance_df\n\n\nprint(\"Before\")\nshowactuatorplot(train_df)\nbalance_df=trainDataframeBalance(train_df)\nprint(\"\\nAfter\")\nshowactuatorplot(balance_df)\n        ","cab5dd44":"def removeOutlier(input_df):\n    input_df = input_df[input_df[\"d.wind_speed\"] != -9999]\n    input_df = input_df[input_df[\"d.photometric\"]<input_df[\"d.photometric\"].std()*3]\n    input_df = input_df[input_df[\"d.outside_photometric\"]<input_df[\"d.outside_photometric\"].std()*3]\n    input_df = input_df[input_df[\"d.radiometric\"]<input_df[\"d.radiometric\"].std()*3]\n    return input_df\ninput_df = removeOutlier(input_df)","9c02e97d":"def seed_torch(seed=2021):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","5bffda37":"### Balance labels in Training and Validation Data","1a761464":"Delete -9999.0 in `d.wind_speed`","e620c3b3":"Actuator1-4 and Actuator5-7\u6b63\u76f8\u95dc\u6027\u5f88\u5f37 \u53ef\u80fd\u63a7\u5236\u7684\u6771\u897f\u5dee\u4e0d\u591a\u985e\u578b\n\nActuator8 \u5c0d\u65bc temperature \u6709\u8ca0\u76f8\u95dc \u53ef\u80fd\u8ddf\u662f\u6839\u64da\u6eab\u5ea6\u8b8a\u5316\u63a7\u5236\u7684\u5100\u5668\n","4d7bd9ba":"### Remove Outlier","9bae2be3":"## Balance training data ","bfe583eb":"freq = 1 means the data didn't have repeat date","e85f6539":"`d.photometric` \u3001 `d.outside_photometric` and `d.radiometric` have Outlie, remove it.","962f32fa":"Delete`d.rainfall_detect` feature because its values in all row are zeor ","af60824b":"## EDA Data","bc453acd":"### Set Seed","762d4b6f":"### Normalization","d9e57bfd":"## Utils","b0eb38c1":"Label \u8cc7\u6599\u4e0d\u5747\u5f88\u56b4\u91cd 1\u8ddf0\u6578\u91cf\u5dee\u7570\u5f88\u5927","00eb5a3a":"# EDA of Agriculture Master Competition\n\nThis is a private competition of agricultural data that want participant use data to control actuators action","f346276e":"Actuator1-4 \u5f88\u76f8\u4f3c \n\nActuator5-7\u4e5f\u5f88\u76f8\u4f3c"}}