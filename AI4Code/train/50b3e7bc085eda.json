{"cell_type":{"72e72d37":"code","1717c801":"code","fc76c447":"code","1c7fe67f":"code","de4ef0dc":"code","ba29b503":"code","4a2ad737":"code","1e98f9b0":"code","d1d64e25":"code","0be1d208":"code","ebe6a0d3":"code","6bf2f01b":"code","09fbbd3b":"code","4c3b475c":"code","013b4ef0":"code","83b1f7da":"code","6d7a762e":"code","a050b947":"code","286b855f":"code","1508f9cb":"code","f56e307c":"code","66a61458":"code","2e14386d":"code","487d956f":"code","866a614c":"code","38445a77":"code","e2184952":"code","bccf4d81":"code","d619dc8a":"code","c16e6203":"code","d9233acc":"code","6eddebb9":"code","b7387eb6":"code","a16d96b2":"code","9571bb81":"code","4535ce83":"code","0f2c1d76":"code","a1453e63":"code","bc0bf144":"code","f1cd0629":"code","ab398fb4":"code","c585e49f":"code","24b79b77":"code","5245c9ee":"code","9e2c9fe3":"code","420d6a04":"code","f7f67a1e":"code","17f2bb40":"code","2eedb499":"code","f23bfa12":"code","7b90a6ae":"code","a817b32c":"code","0c77ce89":"code","dfc81b10":"code","ee11cc9b":"code","be448eb7":"code","7cb620fe":"code","a24ae2f1":"code","4f270a8a":"code","caf41c2c":"code","445cf139":"code","00146e2b":"code","491d7fb8":"code","b0f0dc1d":"code","aff74b7a":"code","83474c66":"code","9046990f":"code","b0afc2b4":"code","8a751f46":"code","3aa27cd4":"code","02fb3e15":"code","a60743a7":"code","12237a0d":"code","d43d0afa":"code","d505f7a1":"code","2170b5a8":"code","d6ed4456":"code","beaa6dea":"code","12c3787c":"code","f1628964":"code","92369711":"code","d201e443":"code","253879e5":"code","b376d034":"code","873d99f9":"code","bfa3c34e":"code","25a290d5":"code","27cd274a":"code","3aa117ac":"code","bb5b6742":"code","0c9e8235":"code","699a7b8d":"code","d356beba":"code","fb2a9534":"code","dc604957":"code","cce1e81a":"code","49bc6e33":"code","2138f5f6":"code","66b27a27":"code","f4b301f5":"code","8edb9f62":"code","1b65da19":"code","e7862b3f":"code","8f682389":"code","34068d06":"code","4cabcc36":"code","aa0b926c":"code","3cdbb090":"code","9dd88c85":"code","ddd57966":"code","9b8de92d":"code","f281ee3f":"code","cab4c401":"code","7db7f58a":"code","39bc2e3b":"code","e63e3a32":"code","ae9f45cc":"code","e630d678":"code","a0cd98ab":"code","37988c30":"code","4af43153":"code","85ff750d":"markdown","4a1455a9":"markdown","13b81395":"markdown","1dec0a4f":"markdown","5bb53f63":"markdown"},"source":{"72e72d37":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os","1717c801":"# read in the files separately, all at once cause a kernel failure\ninjury_record = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/InjuryRecord.csv\")","fc76c447":"injury_record.head()","1c7fe67f":"injury_counts = injury_record['BodyPart'].value_counts()\ninjury_counts.plot.bar()\nplt.xlabel('Body Part')\nplt.show()","de4ef0dc":"# compare body parts vs surface\ninjury_surface = pd.crosstab(injury_record['BodyPart'], injury_record['Surface'])","ba29b503":"injury_surface.plot.bar()\nplt.legend(title='Surface', loc = 'center')\nplt.title('Surface vs Body Part Injured')\nplt.show()\n# plt.savefig('surf_body.jpg', bbox_inches='tight')","4a2ad737":"play_list = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/PlayList.csv\")","1e98f9b0":"injury_record.groupby('Surface').count()","d1d64e25":"play_list['Weather'] = play_list['Weather'].str.lower()","0be1d208":"play_list['GameID'].nunique()","ebe6a0d3":"# id weather conditions by game, drop duplicates so it's clean to join to the injury record data\ngame_weather = play_list[['GameID','Weather']]\ngame_weather = game_weather.drop_duplicates(['GameID','Weather'])","6bf2f01b":"# match player key and position, drop duplicates to join to injury record data\nplayer_positions = play_list[['PlayerKey','RosterPosition']]\nplayer_positions = player_positions.drop_duplicates('PlayerKey')","09fbbd3b":"# same as above for stadium type\ngame_environment = play_list[['GameID','StadiumType']]\ngame_environment = game_environment.drop_duplicates(['GameID','StadiumType'])","4c3b475c":"# merge the data into injury record\ninjury_record = pd.merge(injury_record, game_environment, on = 'GameID', how = 'left')\ninjury_record = pd.merge(injury_record, player_positions, on = 'PlayerKey', how = 'left')\ninjury_record = pd.merge(injury_record, game_weather, on = 'GameID', how = 'left')","013b4ef0":"injury_record","83b1f7da":"injury_record['Weather'].unique()","6d7a762e":"injury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Outdoors','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Open','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Outddors','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Oudoor','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Open Roof','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Retr. Roof - Open','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Heinz Field','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Retr. Roof - Outdoor','Outdoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Indoors','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Dome','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Retr. Roof-Closed','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Domed, closed','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Retr. Roof - Closed','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Indoor, Roof Closed','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Indoord, closed','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Closed Indoor','Indoor')\ninjury_record['StadiumType'] = injury_record['StadiumType'].str.replace('Indoor, Outdoor Roof','Indoor')","a050b947":"injury_record['Weather'] = injury_record['Weather'].astype(str)","286b855f":"# function to create wet variable\ndef conditions(string):\n        if \"rain\" in string:\n            return 1\n        else:\n            return 0","1508f9cb":"injury_record['Wet'] = injury_record['Weather'].apply(conditions)","f56e307c":"injury_record[injury_record['StadiumType'].isnull()]","66a61458":"# look at injuries with wet turf\npd.crosstab(injury_record['Wet'], injury_record['Surface'])","2e14386d":"wet_injuries = pd.crosstab(injury_record['Wet'], injury_record['Surface'])\nwet_injuries.plot.bar()\nplt.legend(title='Surface', loc='upper right')\nplt.xlabel('No Rain vs Rain')\nplt.title('Wet vs Surface where Injuries Occur')\n#plt.show()\nplt.savefig('wet_surface_injuries.jpg', bbox_inches='tight')","487d956f":"pd.crosstab(injury_record['RosterPosition'], injury_record['Surface']).plot.bar()\nplt.legend(title='Surface', loc='center')\nplt.xlabel('Roster Position')\nplt.title('Roster Position vs Surface Type Injury Breakdown')\n#plt.show()\nplt.savefig('surface_position.jpg', bbox_inches='tight')","866a614c":"# clean up the play_list DF for stadium type, indoor\/outdoor\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Outdoors','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Open','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Outddors','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Oudoor','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Open Roof','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retr. Roof - Open','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Heinz Field','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retr. Roof - Outdoor','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoors','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Dome','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retr. Roof-Closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Domed, closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retr. Roof - Closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoor, Roof Closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoord, closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Closed Indoor','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoord','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Outdoor Retr Roof-Outdoor','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Ourdoor','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retr. Roof-Outdoor','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoor, closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoord, Outdoor','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoord, open','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retr. Roof Closed','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Outdor','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Outside','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Retractable Roof','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Bowl','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoor, Outdoor Roof','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoor, Outdoor','Indoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Indoor, open','Outdoor')\nplay_list['StadiumType'] = play_list['StadiumType'].str.replace('Cloudy','Outdoor')","38445a77":"# there are enough observations that we can model after dropping nulls\nplay_list['StadiumType'].dropna(inplace=True)\nplay_list['StadiumType'].unique()","e2184952":"mod1_data_pl = pd.concat([play_list,pd.get_dummies(play_list['RosterPosition'], prefix='Pos')],axis=1)","bccf4d81":"injured_gameid = list(injury_record['GameID'])","d619dc8a":"def cond_injured(df):\n    if (df['GameID'] in injured_gameid):\n        return 1\n    else:\n        return 0","c16e6203":"mod1_data_pl['Injured'] = play_list.apply(cond_injured, axis=1)","d9233acc":"mod1_data_pl = mod1_data_pl.drop_duplicates(['GameID'])","6eddebb9":"mod1_data_pl = mod1_data_pl.drop(columns=['PlayKey','RosterPosition','PlayType','PlayerGamePlay','Position',\n                                          'PositionGroup','Pos_Kicker',])","b7387eb6":"mod1_data_pl","a16d96b2":"# create a list to identify wet turf\npl_wet = ['rain','showers','snow','scattered showers','light rain','cloudy, rain','rainy','cloudy, light snow accumulating 1-2\"',\n         'cloudy with periods of rain, thunder possible. winds shifting to wnw, 10-20 mph.','rain shower']","9571bb81":"# for mapping for a model - new variable\nturfs = {'Natural':0, 'Synthetic':1}\nin_out = {'Outdoor':0, 'Indoor':1}","4535ce83":"# function to create wet variable\ndef conditions(df):\n    if (df['Weather'] in pl_wet) & (df['StadiumType'] == 'Outdoor'):\n        return 1\n    else:\n        return 0","0f2c1d76":"mod1_data_pl['Wet'] = mod1_data_pl.apply(conditions, axis = 1)","a1453e63":"mod1_data_pl['FieldType'] = mod1_data_pl['FieldType'].map(turfs)","bc0bf144":"mod1_data_pl['StadiumType'] = mod1_data_pl['StadiumType'].map(in_out)","f1cd0629":"# these instances of injured players can be retained based on null values; weather is null but stadium is indoor\nkeep = ['36621-13','36696-24','40051-13','43826-7','47382-3']","ab398fb4":"mod1_data_pl.loc[(mod1_data_pl['Weather'].isnull()) &  (mod1_data_pl['GameID'].isin(keep)), 'Weather'] = 'ok'","c585e49f":"drops_weather_stadiumtype = mod1_data_pl[(mod1_data_pl['Weather'].isnull()) | (mod1_data_pl['StadiumType'].isnull())].index","24b79b77":"mod1_data_pl.drop(drops_weather_stadiumtype, inplace = True)","5245c9ee":"mod1_data_pl = mod1_data_pl.drop(columns=['PlayerKey','GameID','Weather'])","9e2c9fe3":"# correlation of the dataset\ncorr1 = mod1_data_pl.corr()\ncorr1","420d6a04":"# create the X and y data for train_test_split\nX = mod1_data_pl[[\n 'PlayerDay',\n 'PlayerGame',\n 'StadiumType',\n 'FieldType',\n 'Temperature',\n 'Pos_Cornerback',\n 'Pos_Defensive Lineman',\n 'Pos_Linebacker',\n 'Pos_Offensive Lineman',\n 'Pos_Quarterback',\n 'Pos_Running Back',\n 'Pos_Safety',\n 'Pos_Tight End',\n 'Pos_Wide Receiver',\n    'Wet']].to_numpy(copy = True)\ny = mod1_data_pl['Injured'].to_numpy(copy = True)","f7f67a1e":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0)","17f2bb40":"# Fitting Random Forest to the Trng set\nfrom sklearn.ensemble import RandomForestClassifier\n# Create Classifier - entropy is ideal criterion\nclassifier = RandomForestClassifier(n_estimators = 150, max_depth = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","2eedb499":"# Apply K-fold cross validation \nfrom sklearn.model_selection import cross_val_score\nrf_scores = cross_val_score(classifier, X_train, y_train, cv=10)\nrf_scores.mean()","f23bfa12":"# Predictions\ny_pred = classifier.predict(X_test) ","7b90a6ae":"# Make the confusion matrix - evaluate the model\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred) \ncm","a817b32c":"importances = classifier.feature_importances_\nimportances","0c77ce89":"# due to the size of the tracking data file, the dask package is utilized\nimport dask.dataframe as dd\ntrack_data = dd.read_csv('..\/input\/nfl-playing-surface-analytics\/PlayerTrackData.csv')","dfc81b10":"track_data = track_data.drop('event', axis = 1)","ee11cc9b":"track_data.head()","be448eb7":"td = track_data.groupby('PlayKey').max().compute() - track_data.groupby('PlayKey').min().compute()","7cb620fe":"distances = track_data.groupby('PlayKey').dis.sum().compute()","a24ae2f1":"mn_speed = track_data.groupby('PlayKey').s.mean().compute()","4f270a8a":"max_speed = track_data.groupby('PlayKey').s.max().compute()","caf41c2c":"max_speed.head()","445cf139":"td = td.drop(['dis','s'], axis = 1)","00146e2b":"td = pd.merge(td, distances, on = 'PlayKey', how = 'left')\ntd = pd.merge(td, mn_speed, on = 'PlayKey', how = 'left')","491d7fb8":"td['speed_time_ratio'] = td['s']\/td['time']\ntd['distance_time_ratio'] = td['dis']\/td['time']\ntd['mean_speed'] = td['s']\ntd = td.drop('s', axis = 1)","b0f0dc1d":"td.head()","aff74b7a":"play_and_injury_data = pd.merge(play_list, injury_record, how='left', on='PlayKey')\nplay_and_injury_data.drop(['PlayerKey_y', 'GameID_y', 'Weather_y', 'RosterPosition_y', 'StadiumType_y'], axis=1, inplace=True)","83474c66":"import math\ndef encode_injured_players(string):\n    if (pd.isnull(string)):\n        return 0\n    else:\n        return 1","9046990f":"play_and_injury_data['Injured'] = play_and_injury_data['BodyPart'].apply(encode_injured_players)","b0afc2b4":"# function to create wet variable\ndef conditions(string):\n        if \"rain\" in string:\n            return 1\n        else:\n            return 0","8a751f46":"play_and_injury_data['Weather_x'] = play_and_injury_data['Weather_x'].astype(str)\nplay_and_injury_data['Wet'] = play_and_injury_data['Weather_x'].apply(conditions)\nplay_and_injury_data = play_and_injury_data[play_and_injury_data['PlayType'] != '0']\nplay_and_injury_data = play_and_injury_data.rename(columns={'PlayerKey_x': 'PlayerKey', \n                                     'GameID_x': 'GameID', \n                                     'RosterPosition_x':'RosterPosition', \n                                     'StadiumType_x': 'StadiumType', \n                                     'Weather_x': 'Weather'})","3aa27cd4":"play_and_injury_data.columns","02fb3e15":"mn_player_plays = play_and_injury_data.groupby('PlayerKey').mean()\nmn_player_plays['PlayerGamePlay'].mean()","a60743a7":"mod2_data_pl = play_and_injury_data","12237a0d":"mod2_data_pl['FieldType'] = mod2_data_pl['FieldType'].map(turfs)\nmod2_data_pl['StadiumType'] = mod2_data_pl['StadiumType'].map(in_out)","d43d0afa":"mod2_data_pl['StadiumType'].unique()","d505f7a1":"drops_weather_stadiumtype2 = mod2_data_pl[(mod2_data_pl['Weather'].isnull()) | (mod2_data_pl['StadiumType'].isnull())].index","2170b5a8":"mod2_data_pl.drop(drops_weather_stadiumtype2, inplace = True)","d6ed4456":"# merge tracking data onto mod2_data_pl\nmod2_data_pl = pd.merge(mod2_data_pl, td, on = 'PlayKey', how = 'left')","beaa6dea":"mod2_data_pl","12c3787c":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['mean_speed'])\nplt.title('Mean Speed vs Injured')\nplt.xlabel('Not injured vs injured')\nplt.show()\n#plt.savefig('mnspeed_injured.jpg', bbox_inches='tight')","f1628964":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['x'])\nplt.title('X range (max-min) vs Injured')\nplt.xlabel('Not injured vs injured')\nplt.show()\n#plt.savefig('xrange_injured.jpg', bbox_inches='tight')","92369711":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['y'])\nplt.title('Y range (max-min) vs Injured')\nplt.xlabel('Not injured vs injured')\nplt.show()\n#plt.savefig('yrange_injured.jpg', bbox_inches='tight')","d201e443":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['time'])\nplt.title('Time range (max-min) vs Injured')\nplt.xlabel('Not injured vs injured')\nplt.show()","253879e5":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['mean_speed'])\nplt.title('Average Speed vs Field Type')\nplt.xlabel('Natural vs Turf')\nplt.show()","b376d034":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['x'])\nplt.title('X range (max-min) vs Field Type')\nplt.xlabel('Natural vs Turf')\nplt.show()","873d99f9":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['y'])\nplt.title('Y range (max-min) vs Field Type')\nplt.xlabel('Natural vs Turf')\nplt.show()","bfa3c34e":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['time'])\nplt.title('Time range (max-min) vs Field Type')\nplt.xlabel('Natural vs Turf')\nplt.show()","25a290d5":"mod2_injured = mod2_data_pl[mod2_data_pl['Injured'] == 1]\nmod2_notinjured = mod2_data_pl[mod2_data_pl['Injured'] == 0]","27cd274a":"mod2_injured['mean_speed'].mean()","3aa117ac":"mod2_notinjured['mean_speed'].mean()","bb5b6742":"mod2_injured_turf = mod2_injured[mod2_data_pl['FieldType'] == 1]\nmod2_injured_grass = mod2_injured[mod2_data_pl['FieldType'] == 0]","0c9e8235":"mod2_injured_turf['mean_speed'].mean()","699a7b8d":"mod2_injured_grass['mean_speed'].mean()","d356beba":"sns.boxplot(mod2_injured['FieldType'], mod2_injured['mean_speed'])\nplt.title('Mean speed vs Field Type - Injured Only')\nplt.xlabel('Natural vs Turf')\nplt.show()\n#plt.savefig('mean_spd_field_type.jpg', bbox_inches='tight')","fb2a9534":"sns.boxplot(mod2_injured['FieldType'], mod2_injured['x'])\nplt.title('X range (max-min) vs Field Type - Injured Only')\nplt.xlabel('Natural vs Turf')\nplt.show()","dc604957":"sns.boxplot(mod2_injured['FieldType'], mod2_injured['y'])\nplt.title('Y range (max-min) vs Field Type - Injured Only')\nplt.xlabel('Natural vs Turf')\nplt.show()","cce1e81a":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['dis'])\nplt.title('Distance vs Field Type')\nplt.xlabel('Natural vs Turf')\nplt.show()\n#plt.savefig('distance_turf.jpg', bbox_inches='tight')","49bc6e33":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['dis'])\nplt.title('Distance vs Injured')\nplt.xlabel('Not-injured vs Injured')\nplt.show()\n#plt.savefig('distance_injured.jpg', bbox_inches='tight')","2138f5f6":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['speed_time_ratio'])\nplt.title('Speed_time_ratio vs Injured')\nplt.xlabel('Not-injured vs Injured')\nplt.show()\n","66b27a27":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['speed_time_ratio'])\nplt.title('Speed_time_ratio vs FieldType')\nplt.xlabel('Natural vs Turf')\nplt.show()\n","f4b301f5":"turf = mod2_data_pl[mod2_data_pl['FieldType'] == 1]\nturf['speed_time_ratio'].mean()","8edb9f62":"grass = mod2_data_pl[mod2_data_pl['FieldType'] == 0]\ngrass['speed_time_ratio'].mean()","1b65da19":"grass['mean_speed'].mean()","e7862b3f":"turf['mean_speed'].mean()","8f682389":"sns.distplot(turf['mean_speed'], hist = False, kde = True,\n                 kde_kws = {'shade': True, 'linewidth': 3})","34068d06":"sns.distplot(grass['mean_speed'], hist = False, kde = True,\n                 kde_kws = {'shade': True, 'linewidth': 3})","4cabcc36":"grass['x'].mean()","aa0b926c":"grass['y'].mean()","3cdbb090":"turf['x'].mean()","9dd88c85":"turf['y'].mean()","ddd57966":"sns.boxplot(mod2_data_pl['FieldType'], mod2_data_pl['distance_time_ratio'])\nplt.title('Distance_time_ratio vs FieldType')\nplt.xlabel('Natural vs Turf')\nplt.show()","9b8de92d":"sns.boxplot(mod2_data_pl['Injured'], mod2_data_pl['distance_time_ratio'])\nplt.title('Distance_time_ratio vs Injured')\nplt.xlabel('Not-injured vs Injured')\nplt.show()","f281ee3f":"injury_plays = play_and_injury_data[play_and_injury_data['Injured'] == 1]\npd.crosstab(injury_plays['PlayType'], injury_plays['FieldType']).plot.bar()\nplt.legend(title='Surface', loc = 'upper right')\nplt.title('Play Type by Field Type Where Injuries Occurred')\nplt.show()\n#plt.savefig('play_type_injuries.jpg', bbox_inches='tight')\n# note - a previous plot was included where more injured instances occurred - the data was modified to capture\n# only playkeys where injuries occur in this version","cab4c401":"# Noticed all temperatures with -999 degrees were indoor stadiums that are temp controlled\nplay_and_injury_data['Temperature'].replace(-999, value=0, inplace=True)\ninjury_plays = play_and_injury_data[play_and_injury_data['Injured'] == 1]\ninjury_plays['Temperature'].hist(grid=False, bins=10)\nplt.title('Injury Count by Temperature')\nplt.xlabel('Temperature')\nplt.ylabel('Count')\nplt.show()\n#plt.savefig('temp_injuries.jpg', bbox_inches='tight')","7db7f58a":"injury_plays['PlayerGamePlay'].hist(grid=False, bins=10)\nplt.xlabel('Plays Played')\nplt.ylabel('Count')\nplt.title('Injury Count by Plays Played')\nplt.show()\n#plt.savefig('play_cnt_injuries.jpg', bbox_inches='tight')","39bc2e3b":"injured_grass = grass[grass['Injured'] == 1]\ninjured_grass['PlayerGamePlay'].hist(grid=False, bins=10)\nplt.xlabel('Plays Played')\nplt.ylabel('Count')\nplt.title('Injury Count by Plays Played on Natural Surface')\nplt.show()\n#plt.savefig('play_cnt_injuries_nat.jpg', bbox_inches='tight')","e63e3a32":"injured_turf = turf[turf['Injured'] == 1]\ninjured_turf['PlayerGamePlay'].hist(grid=False, bins=10)\nplt.xlabel('Plays Played')\nplt.ylabel('Count')\nplt.title('Injury Count by Plays Played on Synthetic Surface')\nplt.show()\n#plt.savefig('play_cnt_injuries_turf.jpg', bbox_inches='tight')","ae9f45cc":"mod2_data_pl = pd.merge(mod2_data_pl, max_speed, on = 'PlayKey', how = 'left')","e630d678":"mod2_data_pl['max_speed_play'] = mod2_data_pl['s']","a0cd98ab":"max_spd_injured = mod2_data_pl[mod2_data_pl['Injured'] == 1]\nmax_spd_notinjured = mod2_data_pl[mod2_data_pl['Injured'] == 0]","37988c30":"max_spd_injured['max_speed_play'].hist(grid=False, bins=10)\nplt.xlabel('Max Speed')\nplt.ylabel('Count')\nplt.title('Max Speed Injured Players - yards per second')\nplt.show()\n#plt.savefig('maxspeedinjured.jpg', bbox_inches='tight')","4af43153":"max_spd_notinjured['max_speed_play'].hist(grid=False, bins=100)\nplt.xlim(left = 0)\nplt.xlim(right = 10)\nplt.xlabel('Max Speed')\nplt.ylabel('Count')\nplt.title('Max Speed Not Injured - yards per second')\nplt.show()\n#plt.savefig('maxspeednotinjured.jpg', bbox_inches='tight')","85ff750d":"## First and Future - Analytics","4a1455a9":"\n## Access the tracking data","13b81395":"According to the RF model, field type (turf or natural) is the 4th most important feature in the model. Day, game, and temperature have more influence over an injury occurring in a game according to the random forest classifier. In general, the model does not predict well but helps understand the relationship of surface on the risk of being injured.","1dec0a4f":"## Merging the track data with play list","5bb53f63":"## Game Injury Model - Predicting if a player will be injured in a game"}}