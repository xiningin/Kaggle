{"cell_type":{"fea79e71":"code","a1ec1203":"code","acb0203a":"code","4a26e712":"code","267f76e6":"code","7b1432ea":"code","92d7ba08":"code","fc7f1221":"code","2d0eb5ab":"code","c6953a23":"code","546fde77":"code","7408e8e8":"code","dd3e1e99":"code","33604de8":"code","3dee1ff4":"code","37ddbc66":"code","357eee42":"code","4754fd53":"code","276df875":"markdown","4c2f842d":"markdown","8aab278c":"markdown","521e7e02":"markdown","e4fabfed":"markdown","5e9e1066":"markdown","5e0215d3":"markdown","618905d3":"markdown","c1e264b9":"markdown","faaf01d7":"markdown","047a986d":"markdown","055d5bf8":"markdown","63e9a430":"markdown","0f76f63f":"markdown"},"source":{"fea79e71":"import numpy as np                # linear algebra\nimport pandas as pd               # data frames\nimport seaborn as sns             # visualizations\nimport matplotlib.pyplot as plt   # visualizations\nimport scipy.stats                # statistics\nfrom sklearn import preprocessing\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a1ec1203":"df = pd.read_csv(\"..\/input\/cereal.csv\")\n\n# Print the head of df\nprint(df.head())\n\n# Print the info of df\nprint(df.info())\n\n# Print the shape of df\nprint(df.shape)","acb0203a":"df.iloc[:,~df.columns.isin(['name','mfr','type','rating'])].describe()","4a26e712":"pd.DataFrame(df['mfr'].value_counts(dropna=False))","267f76e6":"# Visualization product ranking\ndf = df.sort_values(['rating'],ascending=False).reset_index(drop=True)\nplt.figure(figsize=(20,20))\nsns.barplot(x=df[\"rating\"],y=df[\"name\"])\nplt.xlabel(\"Product Name\",fontsize=15)\nplt.ylabel(\"Rating\",fontsize=15)\nplt.title(\"Product Rating\",fontsize=15)\nplt.show()","7b1432ea":"# Barcharts to understand the categorical variables\nf, axes = plt.subplots(1,2, figsize=(10, 5))\nsns.countplot(x=\"mfr\", data=df, ax=axes[0], palette=\"Set3\")\nsns.countplot(x=\"type\", data=df, ax=axes[1], palette=\"Set2\")","92d7ba08":"# Display the histogram to undestand the data\nf, axes = plt.subplots(3,5, figsize=(20, 12))\nsns.distplot( df[\"calories\"], ax=axes[0,0])\nsns.distplot( df[\"protein\"], ax=axes[0,1])\nsns.distplot( df[\"fat\"], ax=axes[0,2])\nsns.distplot( df[\"fiber\"], ax=axes[0,3])\nsns.distplot( df[\"sodium\"], ax=axes[0,4])\nsns.distplot( df[\"carbo\"], ax=axes[1,0])\nsns.distplot( df[\"sugars\"], ax=axes[1,1])\nsns.distplot( df[\"protein\"], ax=axes[1,2])\nsns.distplot( df[\"vitamins\"], ax=axes[1,3])\nsns.distplot( df[\"cups\"], ax=axes[1,4])\nsns.distplot( df[\"potass\"], ax=axes[2,0])\nsns.distplot( df[\"vitamins\"], ax=axes[2,1])\nsns.distplot( df[\"shelf\"], ax=axes[2,2])\nsns.distplot( df[\"weight\"], ax=axes[2,3])","fc7f1221":"# Barcharts: are they comparable?\nf, axes = plt.subplots(1,2, figsize=(10, 5))\nsns.scatterplot(x=\"mfr\", y=\"weight\", data=df, ax=axes[0])\nsns.scatterplot(x=\"mfr\", y=\"cups\", data=df, ax=axes[1])","2d0eb5ab":"#How to normalize the values\ndf.loc[df['name'].isin(['All-Bran','Lucky Charms','Puffed Wheat'])]","c6953a23":"# Normalize with weight\ncereals = df.iloc[:,~df.columns.isin(['name','mfr','type','rating'])].div(df.weight, axis=0)\ncereals = pd.concat([df.iloc[:,df.columns.isin(['name','mfr','type','rating'])] , cereals], axis=1)\ncereals.head()","546fde77":"# Compute the correlation matrix\ncorr=df.iloc[:,~cereals.columns.isin(['name','mfr','type'])].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","7408e8e8":"sns.lmplot(x=\"sugars\",y=\"rating\",data=cereals)\nsns.jointplot(x=\"calories\", y=\"rating\", data=cereals)","dd3e1e99":"cereals_scale = cereals\n\nscaler = preprocessing.StandardScaler()\ncolumns =cereals.columns[3:]\ncereals_scale[columns] = scaler.fit_transform(cereals_scale[columns])\ncereals_scale.head()","33604de8":"#Finding the average of good and bad ingredients\ncereals_scale['Good'] = cereals_scale.loc[:,['protein','fiber','vitamins']].mean(axis=1)\n#Good: the bigger the better.\ncereals_scale['Bad'] = cereals_scale.loc[:,['fat','sodium','potass', 'sugars']].mean(axis=1)\n#Multiply by negative to make this indicator the bigger the worse.\ncereals_scale.loc[cereals_scale['name'].isin(['All-Bran','Lucky Charms','Puffed Wheat'])]","3dee1ff4":"#Visualize the relacionship between the good\/bad ingredients measure\nax = sns.lmplot('Good', # Horizontal axis\n           'Bad', # Vertical axis\n           data=cereals_scale, # Data source\n           fit_reg=True, # Don't fix a regression line\n           height = 10,\n           aspect =2 ) # size and dimension\n\nplt.title('Cereals Plot')\n# Set x-axis label\nplt.xlabel('Good')\n# Set y-axis label\nplt.ylabel('Bad')\n\n\ndef label_point(x, y, val, ax):\n    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n    for i, point in a.iterrows():\n        if point['val'] == 'Lucky Charms':\n            ax.text(point['x']+.02, point['y'], str(point['val']),bbox=dict(facecolor='red', alpha=0.5))\n        else:\n            ax.text(point['x']+.02, point['y'], str(point['val']))\n\nlabel_point(cereals_scale.Good, cereals_scale.Bad, cereals_scale.name, plt.gca())  ","37ddbc66":"#Finding a proxy of Sharpe Ratio good\/bad to make a new ranking.\ncereals_scale['new_ranking'] = cereals_scale['Good']\/cereals_scale['Bad']\n\n# Visualization new ranking\nnew_cereals = cereals_scale.sort_values(['new_ranking'],ascending=False).reset_index(drop=True)\nplt.figure(figsize=(20,20))\nsns.barplot(x=new_cereals[\"new_ranking\"],y=new_cereals[\"name\"])\nplt.xlabel(\"Product Name\",fontsize=15)\nplt.ylabel(\"New Rating\",fontsize=15)\nplt.title(\"Product Rating\",fontsize=15)\nplt.show()","357eee42":"#Finding the most characteristic ingredient in each cereal\ndef knownby (row):\n    maxValue = max(map(abs, pd.Series.tolist(row)[4:12]))\n    try:\n        index = pd.Series.tolist(row).index(maxValue)\n    except ValueError:\n        index = pd.Series.tolist(row).index(-maxValue)        \n    return index\n\ncereals_scale['knowby']=cereals_scale.apply(lambda row: knownby (row),axis=1)\ncereals_scale['knowby']=cereals_scale.columns[cereals_scale['knowby']]\ncereals_scale.loc[cereals_scale['name'].isin(['All-Bran','Lucky Charms','Puffed Wheat'])]","4754fd53":"# Count of ingredients prevalence\nax = sns.countplot(x=\"knowby\", data=cereals_scale, palette=\"Set3\")","276df875":"It looks like we have information for 77 cereals across 16 variables: name, brand and nutrition facts.","4c2f842d":"It look like the nutritional facts are given by portion which varies by cereal. We need to make those variables comparable.","8aab278c":"If not Lucky charms which variables make a cereal perform better in the rating.","521e7e02":"General Mills and Kelloggs are the biggest brands in the dataset. General Mills has been producing Lucky Charms by since 1964.","e4fabfed":"## Objective\nI have been eating Lucky Charms since I was a kid, the marshmallows and the integral cereal combination looks like the perfect breakfast (sometimes even lunch and dinner) but many people say this is a bad cereal. So the question have to be ask: is Lucky Charms a good cereal amongst the other options? ","5e9e1066":"## Data Transformations\n\nNow that we have comparable variables across cereals let\u2019s standardize those variables to have an holistic approach of a cereal in all its features. This allow us to create new features with the existing variables.\n","5e0215d3":"Now Lucky Charms go up 13th positions with this new approach, however still not in the top. ","618905d3":"In this context, a linear regression frontier shows the relationship between good and bad nutrients from a cereal. No doubts the best cereal by its ingredients is *All-Brand with extra Fiber* and the worse is *Cinnamon Toast Crunch*. *Lucky Charms* is not that bad but is not that good either given that is over the line.","c1e264b9":"## Basic Exploratory Data Analysis\n","faaf01d7":"Well it looks like the ingredient each cereal should be known for make them most of them look bad. Companies should consider adding more fiber and vitamins.\n\nSo to answer the question, is *Lucky Charms* a good cereal? Maybe as not as healthy as *Total Whole Grain* but if good means happy yes *Lucky Charms* is the best!\n","047a986d":"Lucky Charms has the 7th worse ranking mmm\u2026 maybe the general public don\u2019t like those amazing pink hearts marshmallows.","055d5bf8":"Fiber and protein have a little correlation with the consumer preference while calories and sugars influence the most.  ","63e9a430":"It looks like the best way to make them comparable is by weight.","0f76f63f":"# New Features\nTo evaluate each individual cereal we are going to create two new variables:\n-\tMeasure of good\/bad ingredients in each cereal\n-\tThe ingredient that is more relevant in each cereal\n\n"}}