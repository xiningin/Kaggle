{"cell_type":{"454e86d2":"code","42cb3597":"code","f4638e80":"code","53bed1ad":"code","ea1ea79d":"code","3d92954e":"code","d5ddbecc":"code","12632882":"code","299f8597":"code","8e537bde":"code","ceabea79":"code","161fa0c7":"code","a158c5e5":"code","00fed113":"markdown","178a9e2a":"markdown","643bb42d":"markdown","463a75c7":"markdown"},"source":{"454e86d2":"# Load libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport re\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","42cb3597":"## Data Cleaning \n\n# Loading the response dataset from Kaggle Survey\nkaggle_multiple_choice = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', low_memory=False)\n\n# Separating questions from answers\n# This Series stores all questions\nkaggle_questions = kaggle_multiple_choice.iloc[0,:]\n\n# This DataFrame stores all answers\nkaggle = kaggle_multiple_choice.iloc[1:,:]","f4638e80":"# removing everyone that took less than 4 minutes or more than 180 minutes to answer the survey (altogether 1%)\n\nanswers_before = kaggle.shape[0]\nprint(f'Initial dataset length is {answers_before} answers.')\n\n# Identify those who took less than 4 min\nless_4_minutes = kaggle[round(kaggle.iloc[:,0].astype(int) \/ 60) <= 4].index\n\n# Dropping those rows\nkaggle = kaggle.drop(less_4_minutes, axis=0)\n\n# Identify those who took more than 180 min\nmore_180_minutes = kaggle[round(kaggle.iloc[:,0].astype(int) \/ 60) >= 180].index\nkaggle = kaggle.drop(more_180_minutes, axis=0)\n\nanswers_after = kaggle.shape[0]\nprint('After removing respondents that took less than 4 minutes or more than 180 minutes' \\\n      f'to answer the survey we were left with {answers_after} answers.')\n\n# removing respondents who are neither man nor woman\nanswers_before = kaggle.shape[0]\n\nnon_woman_man = kaggle[(kaggle.Q2 == 'Prefer not to say') | \\\n                             (kaggle.Q2 == 'Prefer to self-describe') | \\\n                             (kaggle.Q2 == 'Nonbinary')\n                            ].index\n# Dropping rows\nkaggle = kaggle.drop(list(non_woman_man), axis=0)\nanswers_after = kaggle.shape[0]\nprint(f'After removing respondents who are not man or woman we were left with {answers_after} answers.')","53bed1ad":"# Simplifying age groups\nkaggle.Q1 = kaggle.Q1.replace('18-21', '18-24')\nkaggle.Q1 = kaggle.Q1.replace('22-24', '18-24')\nkaggle.Q1 = kaggle.Q1.replace('25-29', '25-29')\nkaggle.Q1 = kaggle.Q1.replace('30-34', '30-39')\nkaggle.Q1 = kaggle.Q1.replace('35-39', '30-39')\nkaggle.Q1 = kaggle.Q1.replace('40-44', '40-49')\nkaggle.Q1 = kaggle.Q1.replace('45-49', '40-49')\nkaggle.Q1 = kaggle.Q1.replace('50-54', '50-59')\nkaggle.Q1 = kaggle.Q1.replace('55-59', '50-59')\nkaggle.Q1 = kaggle.Q1.replace('60-69', '60+')\nkaggle.Q1 = kaggle.Q1.replace('70+', '60+')","ea1ea79d":"# add a new column 'Employed' transformed from 'Q5' (Job Titles)\ndef employed(row):\n    if row == 'NaN':\n        return 'Not answered'\n    elif row == 'Currently not employed':\n        return 'Unemployed'\n    else:\n        return 'Employed'\n\nkaggle['Employed'] = kaggle['Q5'].apply(lambda row: employed(row))","3d92954e":"# Now lets rename some columns to have more meaningfull names\nkaggle.columns = kaggle.columns.str.replace('Q20', 'CompanySize')\nkaggle.columns = kaggle.columns.str.replace('Q24', 'Compensation')\nkaggle.columns = kaggle.columns.str.replace('Q15', 'MLExp')\nkaggle.columns = kaggle.columns.str.replace('Q1', 'Age')\nkaggle.columns = kaggle.columns.str.replace('Q2', 'Gender')\nkaggle.columns = kaggle.columns.str.replace('Q5', 'Title')\nkaggle.columns = kaggle.columns.str.replace('Q3', 'Country')\nkaggle.columns = kaggle.columns.str.replace('Q6', 'CodeExp')\nkaggle.columns = kaggle.columns.str.replace('Q4', 'HighestEdu')\n","d5ddbecc":"# To create good plots, we need to transform some columns into categories.\n# This is because a category might have a logical order, that will be preserved when plotting.\n# Otherwise the categories would be sorted by alphabetical order\n\n# Transform CodeExperience column into category\ntime_writting_code = ['I have never written code', '< 1 years', '1-2 years', '3-5 years',\n                      '5-10 years', '10-20 years', '20+ years']\ncat_dtype = pd.api.types.CategoricalDtype(categories=time_writting_code, ordered=True)\nkaggle.CodeExp = kaggle.CodeExp.astype(cat_dtype)\n# Now CodeExperience has a specific order as defined by the list time_writting_code\n\n# We will do the same for CompanySize and transform the column into category\ncompany_size = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '10,000 or more employees']\ncat_dtype = pd.api.types.CategoricalDtype(categories=company_size, ordered=True)\nkaggle.CompanySize = kaggle.CompanySize.astype(cat_dtype)\n\n# We will do the same for Age and transform the column into category\nage = ['18-24', '25-29', '30-39', '40-49', '50-59','60+']\ncat_dtype = pd.api.types.CategoricalDtype(categories=age, ordered=True)\nkaggle.Age = kaggle.Age.astype(cat_dtype)","12632882":"# Add count column to make groupby easier\nkaggle['Count'] = 1","299f8597":"# Filtering only the columns we will need\nkaggle = kaggle[['Age', 'Gender','HighestEdu','Country', 'Title', 'Employed','CompanySize', 'Compensation', 'CodeExp',\n                 'MLExp','Count']]\n\n# Finally our Dataframe looks like this \nkaggle.head(5)","8e537bde":"## Data analysis\n# % of Unemployed survey participants in gender\nkaggle_employed = kaggle[['Gender','Age','Employed','Count']]\nkaggle_employed = kaggle_employed.groupby(['Gender','Age','Employed'])['Count'].sum().reset_index()\nkaggle_unemployed  = kaggle_employed.loc[kaggle_employed['Employed'] == \"Unemployed\"]\nkaggle_emp_total = kaggle_employed.groupby(['Gender','Age'])['Count'].sum().reset_index()\nkaggle_emp_total.columns = kaggle_emp_total.columns.str.replace('Count', 'total')\nkaggle_employ_share = pd.merge(\n    kaggle_unemployed,\n    kaggle_emp_total,\n    how=\"inner\",\n    on=['Gender','Age'],\n    sort=True,\n    copy=True,\n    indicator=False,\n    validate=None\n)\n\nkaggle_employ_share['Unemployed_share'] = round(kaggle_employ_share['Count']\/kaggle_employ_share['total']*100,0)\nkaggle_employ_share = kaggle_employ_share[['Gender','Age','Unemployed_share']]\nages = ['18-24', '25-29', '30-39', '40-49', '50-59','60+']\n\n# unemployed rate in gender\nfig = go.Figure()\n\n# Man unemployed rate in age groups\nman_unemployed = kaggle_employ_share.loc[kaggle_employ_share[\"Gender\"] == 'Man']\n\n# Add a line for man participants\nfig.add_trace(go.Scatter(x=man_unemployed.Age, y=man_unemployed.Unemployed_share,\n                    mode='lines',\n                    name='Man',\n                    line = dict(color = '#9fc5e8'\n                                  ,width=5))\n             )\n\n# Add markers at the line for man participants\nfig.add_trace(go.Scatter(\n        x=[man_unemployed.Age.to_list()[1],\n           man_unemployed.Age.to_list()[2],\n           man_unemployed.Age.to_list()[3]],\n        y=[man_unemployed.Unemployed_share.to_list()[1],\n          man_unemployed.Unemployed_share.to_list()[2],\n          man_unemployed.Unemployed_share.to_list()[3]],\n        mode='markers',\n        name = 'Man',\n    showlegend=False,\n        marker=dict(color='#9fc5e8', size=15)\n    ))\n\n# Add a line for woman participants\nwoman_unemployed = kaggle_employ_share.loc[kaggle_employ_share[\"Gender\"] == 'Woman']\nfig.add_trace(go.Scatter(x=woman_unemployed.Age, y=woman_unemployed.Unemployed_share,\n                    mode='lines',\n                    name='Woman',\n                    line = dict(color = '#ea9999'\n                                  ,width=5))\n             )\n\n# Add markers at the line for woman participants\nfig.add_trace(go.Scatter(\n        x=[woman_unemployed.Age.to_list()[1],\n           woman_unemployed.Age.to_list()[2],\n           woman_unemployed.Age.to_list()[3]],\n        y=[woman_unemployed.Unemployed_share.to_list()[1],\n          woman_unemployed.Unemployed_share.to_list()[2],\n          woman_unemployed.Unemployed_share.to_list()[3]],\n        mode='markers',\n        name = 'Woman',\n        showlegend=False,\n        marker=dict(color='#ea9999', size=15)\n    ))\n\n\n# layout for x-axis, y-axis, chart size, chart background color\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=100,\n        t=110,\n    ),\n    #showlegend=False,\n    plot_bgcolor='white'\n)\n\n\nannotations = []\n\n# Labels for age 25-29, 30-39, 40-49\nannotations.append(dict(xref='paper', x=0.35, y=man_unemployed.Unemployed_share.to_list()[1],\n                                  xanchor='right', yanchor='middle',\n                                  text='Man' + ' {}%'.format(man_unemployed.Unemployed_share.to_list()[1]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n\nannotations.append(dict(xref='paper', x=0.35, y=woman_unemployed.Unemployed_share.to_list()[1],\n                                  xanchor='right', yanchor='middle',\n                                  text='Woman' + ' {}%'.format(woman_unemployed.Unemployed_share.to_list()[1]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='% of unemployed survey participants in each age group'\\\n                                      '<br><span style=\"font-size:12px\"><i>The unemployed rate in'\\\n                                      ' woman participants surpassed man since age 25-29<\/span><\/i>',\n                              font=dict(family='Arial',\n                                        size=16,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\n\n\nfig.update_layout(annotations=annotations)\n\nfig.show()","ceabea79":"# % of Studens in employed survey participants in gender\nkaggle_student = kaggle.loc[kaggle['Employed'] == 'Employed'][['Gender','Age','Title','Count']]\n\n# add a new column 'Student' transformed from 'Title' (Job Titles)\ndef student(row):\n    if row == 'NaN':\n        return 'Not answered'\n    elif row == 'Student':\n        return 'Student'\n    else:\n        return 'Not Student'\n\nkaggle_student['Student'] = kaggle_student['Title'].apply(lambda row: student(row))\n\nkaggle_student = kaggle_student.groupby(['Gender','Age','Student'])['Count'].sum().reset_index()\nkaggle_student_total = kaggle_student.groupby(['Gender','Age'])['Count'].sum().reset_index()\nkaggle_student_total.columns = kaggle_student_total.columns.str.replace('Count', 'total')\nkaggle_student_share = pd.merge(\n    kaggle_student,\n    kaggle_student_total,\n    how=\"inner\",\n    on=['Gender','Age'],\n    sort=True,\n    copy=True,\n    indicator=False,\n    validate=None\n)\n\nkaggle_student_share['student_share'] = round(kaggle_student_share['Count']\/kaggle_student_share['total']*100,0)\nkaggle_student_share = kaggle_student_share.loc[kaggle_student_share['Student'] == 'Student']\nkaggle_student_share = kaggle_student_share[['Gender','Age','student_share']]\nages = ['18-24', '25-29', '30-39', '40-49', '50-59','60+']\nkaggle_student_share['student_share'] = kaggle_student_share['student_share'].fillna(0)\n\n# student rate in gender\n\nfig = go.Figure()\n\n# Man student rate in age groups\nman_student = kaggle_student_share.loc[kaggle_student_share[\"Gender\"] == 'Man']\n\n# Add a line for man participants\nfig.add_trace(go.Scatter(x=man_student.Age, y=man_student.student_share,\n                    mode='lines',\n                    name='Man',\n                    line = dict(color = '#9fc5e8'\n                                  ,width=5))\n             )\n\n# Add markers at the line for man participants\nfig.add_trace(go.Scatter(\n        x=[man_student.Age.to_list()[1]],\n        y=[man_student.student_share.to_list()[1]],\n        mode='markers',\n        name = 'Man',\n    showlegend=False,\n        marker=dict(color='#9fc5e8', size=15)\n           ))\n    \n\n# Add a line for woman participants\nwoman_student = kaggle_student_share.loc[kaggle_student_share[\"Gender\"] == 'Woman']\nfig.add_trace(go.Scatter(x=woman_student.Age, y=woman_student.student_share,\n                    mode='lines',\n                    name='Woman',\n                    line = dict(color = '#ea9999'\n                                  ,width=5))\n             )\n\n# Add markers at the line for woman participants\nfig.add_trace(go.Scatter(\n        x=[woman_student.Age.to_list()[1]],\n        y=[woman_student.student_share.to_list()[1]],\n        mode='markers',\n        name = 'Woman',\n        showlegend=False,\n        marker=dict(color='#ea9999', size=15)  \n    ))\n\n\n# layout for x-axis, y-axis, chart size, chart background color\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=100,\n        t=110,\n    ),\n    #showlegend=False,\n    plot_bgcolor='white'\n)\n\n\nannotations = []\n\n# Labels for age 25-29, 30-39, 40-49\nannotations.append(dict(xref='paper', x=0.35, y=man_student.student_share.to_list()[1],\n                                  xanchor='right', yanchor='middle',\n                                  text='Man' + ' {}%'.format(man_student.student_share.to_list()[1]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n\nannotations.append(dict(xref='paper', x=0.35, y=woman_student.student_share.to_list()[1],\n                                  xanchor='right', yanchor='middle',\n                                  text='Woman' + ' {}%'.format(woman_student.student_share.to_list()[1]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='% of survey participants that are students in each age group'\\\n                                      '<br><span style=\"font-size:12px\"><i>Higher shares of participants '\\\n                                      'are students in woman than man <\/span><\/i>',\n                              font=dict(family='Arial',\n                                        size=16,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\n\n\nfig.update_layout(annotations=annotations)\n\nfig.show()","161fa0c7":"# % of employed survey participants having different highest education level\nkaggle_edu = kaggle.loc[kaggle['Employed'] == 'Employed'][['Gender','Age','HighestEdu','Count']]\nkaggle_edu = kaggle_edu.loc[kaggle_edu['HighestEdu'] != 'I prefer not to answer']\n\n# grouping education levels\nkaggle_edu.HighestEdu = kaggle_edu.HighestEdu.replace(\"Some college\/university study without earning a bachelor\u2019s degree\",\"Bachelor or below\")\nkaggle_edu.HighestEdu = kaggle_edu.HighestEdu.replace(\"Bachelor\u2019s degree\",\"Bachelor or below\")\nkaggle_edu.HighestEdu = kaggle_edu.HighestEdu.replace(\"Professional degree\",\"Bachelor or below\")\nkaggle_edu.HighestEdu = kaggle_edu.HighestEdu.replace(\"No formal education past high school\",\"Bachelor or below\")\n\n# add a new column 'Bachelor_master' transformed from 'HighestEdu'\ndef bachelor_master(row):\n    if row == 'Master\u2019s degree':\n        return 'Master or above'\n    elif row == 'Doctoral degree':\n        return 'Master or above'\n    else:\n        return 'Bachelor or below'\n\nkaggle_edu['Bachelor_master'] = kaggle_edu['HighestEdu'].apply(lambda row: bachelor_master(row))\n\nkaggle_edu = kaggle_edu.groupby(['Gender','Age','Bachelor_master'])['Count'].sum().reset_index()\nkaggle_edu_total = kaggle_edu.groupby(['Gender','Age'])['Count'].sum().reset_index()\nkaggle_edu_total.columns = kaggle_edu_total.columns.str.replace('Count', 'total')\nkaggle_edu_share = pd.merge(\n    kaggle_edu,\n    kaggle_edu_total,\n    how=\"inner\",\n    on=['Gender','Age'],\n    sort=True,\n    copy=True,\n    indicator=False,\n    validate=None\n)\n\n\nkaggle_edu_share['Edu_share'] = round(kaggle_edu_share['Count']\/kaggle_edu_share['total']*100,0)\n#kaggle_edu_share = kaggle_edu_share.loc[kaggle_student_share['Student'] == 'Student']\nkaggle_edu_share = kaggle_edu_share[['Gender','Age','Bachelor_master','Edu_share']]\n\n# plot the share of participants who have master degree above\n# Add data\nages = ['18-24', '25-29', '30-39', '40-49', '50-59','60+']\nman_edu = kaggle_edu_share.loc[kaggle_edu_share['Gender']== \"Man\"]\nwoman_edu = kaggle_edu_share.loc[kaggle_edu_share['Gender']== \"Woman\"]\n\n\nman_bachelor = man_edu.loc[man_edu['Bachelor_master']== \"Bachelor or below\"].Edu_share\nwoman_bachelor = woman_edu.loc[woman_edu['Bachelor_master']== \"Bachelor or below\"].Edu_share\nman_master = man_edu.loc[man_edu['Bachelor_master']== \"Master or above\"].Edu_share\nwoman_master = woman_edu.loc[woman_edu['Bachelor_master']== \"Master or above\"].Edu_share\n\n# dash options include 'dash', 'dot', and 'dashdot'\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=ages, y=man_master, name='Man',\n                         line=dict(color='#9fc5e8', width=4)))\nfig.add_trace(go.Scatter(x=ages, y=woman_master, name='Woman',\n                         line = dict(color='#ea9999', width=4)))\n\n\n\n# layout for x-axis, y-axis, chart size, chart background color\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=30,\n        t=110,\n    ),\n    legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=0.01,\n    xanchor=\"right\",\n    x=1\n    ),\n    #showlegend=False,\n    plot_bgcolor='white'\n)\n\n\nannotations = []\n\n\n\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='% of participants having master or doctoral degree in the next 2 years.'\\\n                                      '<br><span style=\"font-size:12px\"><i>Women are more likely to '\\\n                                      'pursue higher academic levels than men.<\/span><\/i>',\n                              font=dict(family='Arial',\n                                        size=16,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\n\n\nfig.update_layout(annotations=annotations)\nfig.show()\n","a158c5e5":"# Median yearly compensation in gender\nkaggle_compensation = kaggle.loc[kaggle['Employed'] == 'Employed'][['Gender','Age','Title','HighestEdu','Compensation','Count']]\n\n# add a new column 'Bachelor_master' transformed from 'HighestEdu'\ndef bachelor_master(row):\n    if row == 'Master\u2019s degree':\n        return 'Master or above'\n    elif row == 'Doctoral degree':\n        return 'Master or above'\n    else:\n        return 'Bachelor or below'\n\nkaggle_compensation['Bachelor_master'] = kaggle_compensation['HighestEdu'].apply(lambda row: bachelor_master(row))\n\n# Removing those who didn't disclose compensation\nanswers_before = kaggle_compensation.shape[0]\nkaggle_compensation.dropna(subset=['Compensation'], inplace=True)\nanswers_after = kaggle_compensation.shape[0]\n#print(f'After removing respondents who did not disclose compensation there were left {answers_after} answers.')\n\n# Transform range of salaries into numerical value\n# We are summing up the lowest and highest value for each category, and then dividing by 2.\n# Some regex needed to clean the text\nkaggle_compensation.Compensation = kaggle_compensation.Compensation.replace('$0-999', '0-999')\nkaggle_compensation.Compensation = kaggle_compensation.Compensation.replace('> $500,000', '500,000-500,000')\ncompensation = kaggle_compensation.Compensation.str.replace(r'(?:(?!\\d|\\-).)*', '').str.split('-')\nkaggle_compensation['Compensation'] = compensation.apply(lambda x: round((float(x[0]) + float(x[1]))\/ 2),-3)\n\nkaggle_compensation = kaggle_compensation.groupby(['Gender','Age','Bachelor_master'])['Compensation'].median().reset_index()\n\n# Plot median yearly compensation in man-bachelor or below, woman-bachelor or below, man-master or above and woman-master or above\nages = ['18-24', '25-29', '30-39', '40-49', '50-59','60+']\nman_compensation = kaggle_compensation.loc[kaggle_compensation['Gender']== \"Man\"]\nwoman_compensation = kaggle_compensation.loc[kaggle_compensation['Gender']== \"Woman\"]\n\n\nman_bachelor = man_compensation.loc[man_compensation['Bachelor_master']== \"Bachelor or below\"].Compensation\nman_master = man_compensation.loc[man_compensation['Bachelor_master']== \"Master or above\"].Compensation\nwoman_bachelor = woman_compensation.loc[woman_compensation['Bachelor_master']== \"Bachelor or below\"].Compensation\nwoman_master = woman_compensation.loc[woman_compensation['Bachelor_master']== \"Master or above\"].Compensation\n\n\"\"\"\nman_doctor = man_edu.loc[man_edu['Bachelor_master']== \"Doctoral degree\"].Edu_share\nwoman_doctor = woman_edu.loc[woman_edu['Bachelor_master']== \"Doctoral degree\"].Edu_share\n\nfig = make_subplots(rows=3, cols=1,\n                    shared_xaxes=True,\n                    shared_yaxes=True,\n                    vertical_spacing=0.1)\n\"\"\"\n# dash options include 'dash', 'dot', and 'dashdot'\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=ages, y=man_bachelor, name='Bachelor or below[Man]',\n                         line=dict(color='#9fc5e8', width=4)))\n\nfig.add_trace(go.Scatter(x=ages, y=man_master, name='Master or above[Man]',\n                         line=dict(color='#D9E2E9', width=2,dash ='dash')))\n\n\nfig.add_trace(go.Scatter(x=ages, y=woman_bachelor, name = 'Bachelor or below[Woman]',\n                         line=dict(color='#D9E2E9', width=2)))\n\nfig.add_trace(go.Scatter(x=ages, y=woman_master, name='Master or above[Woman]',\n                         line=dict(color='#ea9999', width=4,dash='dash')))\n\n\n\n# layout for x-axis, y-axis, chart size, chart background color\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=30,\n        t=110,\n    ),\n    legend=dict(\n    orientation=\"h\",\n    yanchor=\"top\",\n    y=1,\n    xanchor=\"left\",\n    x=0.01\n    ),\n    showlegend=True,\n    plot_bgcolor='white'\n)\n\n\nannotations = []\n\n\n\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Median yearly compensation in gender with different highest education levels'\\\n                                      '<br><span style=\"font-size:12px\"><i>Women with master or even doctor degree '\\\n                                      'can win an equal amount of median yearly salary with men having bachelor degree.<\/span><\/i>',\n                              font=dict(family='Arial',\n                                        size=16,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\n\n\nfig.update_layout(annotations=annotations)\nfig.show()\n","00fed113":"Finding 3:\n\nWomen are more likely to pursue higher academic levels than men.","178a9e2a":"Finding 4:\n\nWomen with master or even doctor degree can win an equal amount of median yearly salary with men having bachelor degree.","643bb42d":"Finding 2:\n\nHigher shares of participants are students in woman than in man.","463a75c7":"Finding 1:\n\nThe unemployed rate in woman participants surpassed man since the age group 25-29"}}