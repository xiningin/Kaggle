{"cell_type":{"9a2e1c7c":"code","c99cb7f1":"code","9df34bfe":"code","1f5365fa":"code","31ea1cc7":"code","e85ab46a":"code","577359d2":"code","8b6cf194":"code","6d6edd8a":"code","1df51f2a":"code","ec14bd3b":"code","eed859b9":"code","c58893d6":"code","b10bb196":"code","d3bfea63":"code","74af9c2d":"code","964f8bcf":"code","68d53122":"code","fabc0149":"code","4271938c":"code","f85caf6d":"code","218ef455":"code","09267a86":"code","fb4a6678":"code","22c1577e":"markdown","c4adef0c":"markdown"},"source":{"9a2e1c7c":"import numpy as np\nimport os\nimport cv2\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","c99cb7f1":"image_path_train = '..\/input\/chest-xray-masks-and-labels\/Lung Segmentation\/CXR_png\/'\nmask_path_train = '..\/input\/chest-xray-masks-and-labels\/Lung Segmentation\/masks\/'\nimage_path_test = '..\/input\/sample\/sample\/sample\/images\/' ","9df34bfe":"images = os.listdir(image_path_train)\nmask = os.listdir(mask_path_train)\nmask = [fName.split(\".png\")[0] for fName in mask]\nimage_file_name = [fName.split(\"_mask\")[0] for fName in mask]","1f5365fa":"check = [i for i in mask if \"mask\" in i]\nprint(\"Total mask that has modified name:\", len(check))","31ea1cc7":"testing_files = set(os.listdir(image_path_train)) & set(os.listdir(mask_path_train))\ntraining_files = check","e85ab46a":"def getData(X_shape, flag = \"MONT\"):\n    im_array = []\n    mask_array = []\n    shape = (X_shape, X_shape)\n    # X_shape = image_size\n    if flag == \"MONT\":\n        for i in tqdm(testing_files): \n            \n            # im.shape = (X_shape, X_shape, 1)\n            im = cv2.imread(os.path.join(image_path_train, i))\n            im = cv2.resize(im, shape)[:, :, 0]\n            im = cv2.equalizeHist(im)\n            # mask.shape = (X_shape, X_shape, 1)\n            mask = cv2.imread(os.path.join(mask_path_train, i))\n            mask = cv2.resize(mask, shape)[:, :, 0]\n            \n            im_array.append(im)\n            mask_array.append(mask)\n    \n    if flag == \"SHEN\":\n        for i in tqdm(training_files): \n            \n            # im.shape = (X_shape, X_shape, 1)\n            im = cv2.imread(os.path.join(image_path_train, i.split(\"_mask\")[0] + \".png\"))\n            im = cv2.resize(im, shape)[:, :, 0]\n            im = cv2.equalizeHist(im)\n            # mask.shape = (X_shape, X_shape, 1)\n            mask = cv2.imread(os.path.join(mask_path_train, i + \".png\"))\n            mask = cv2.resize(mask, shape)[:, :, 0]\n            \n            im_array.append(im)\n            mask_array.append(mask)\n    # return list\n    return im_array, mask_array","577359d2":"def get_test(X_shape, n_samples = 100):\n    im_array = []\n    shape = (X_shape, X_shape)\n    test_files = random.choices(list(os.listdir(image_path_test)), k=n_samples)\n    for i in tqdm(test_files):\n        im = cv2.imread(os.path.join(image_path_test, i))\n        im = cv2.resize(im, shape)[:, :, 0]\n        im = cv2.equalizeHist(im)\n        im_array.append(im)\n    return im_array","8b6cf194":"dim, n_samples = 512, 150 # n_samples = [1, 5606]\n\nimage_shen, mask_shen = getData(dim, flag = \"SHEN\")\nimage_mont, mask_mont = getData(dim, flag = \"MONT\")\nX_test = get_test(dim, n_samples = n_samples)","6d6edd8a":"image_shen = np.array(image_shen).reshape(len(image_shen), dim, dim, 1)\nmask_shen = np.array(mask_shen).reshape(len(mask_shen), dim, dim, 1)\n\nimage_mont = np.array(image_mont).reshape(len(image_mont), dim, dim, 1)\nmask_mont = np.array(mask_mont).reshape(len(mask_mont), dim, dim, 1)\n\nX_test = np.array(X_test).reshape(len(X_test), dim, dim, 1)","1df51f2a":"print(image_shen.shape, mask_shen.shape)\nprint(image_mont.shape, mask_mont.shape)\nprint(X_test.shape)","ec14bd3b":"i = 25\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(9, 13))\naxs[0, 0].imshow(image_shen[i], cmap='gray')\naxs[0, 1].imshow(mask_shen[i], cmap='gray')\naxs[0, 0].set_ylabel('Shenzhen')\n\naxs[1, 0].imshow(image_mont[i], cmap='gray')\naxs[1, 1].imshow(mask_mont[i], cmap='gray')\naxs[1, 0].set_ylabel('Montgomery')\n\naxs[2, 0].imshow(X_test[i], cmap='gray')\naxs[2, 0].set_ylabel('NIH')\n\naxs[0, 0].set_title('CXR')\naxs[1, 0].set_title('CXR')\naxs[2, 0].set_title('CXR')\n\naxs[0, 1].set_title('mask')\naxs[1, 1].set_title('mask')\n\nfig.delaxes(axs[2, 1])","eed859b9":"assert image_shen.shape == mask_shen.shape\nassert image_mont.shape == mask_mont.shape\nimages = np.concatenate((image_shen, image_mont), axis=0)\nmasks  = np.concatenate((mask_shen, mask_mont), axis=0)\n\nprint(images.shape, masks.shape)","c58893d6":"X_train, X_val, Y_train, Y_val = train_test_split((images - 127.0) \/ 127.0, \n                                                  (masks > 127).astype(np.float32), \n                                                  test_size = 0.15, \n                                                  random_state = 2018)\nX_testNorm = (X_test - 127.0) \/ 127.0","b10bb196":"import tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler\nfrom tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau","d3bfea63":"def dice_coef(y_true, y_pred):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + 1) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + 1)\n\ndef dice_coef_loss(y_true, y_pred):\n    return -dice_coef(y_true, y_pred)\n\ndef jaccard_coef(y_true, y_pred):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (intersection + 1.0) \/ (K.sum(y_true_f) + K.sum(y_pred_f) - intersection + 1.0)\n\ndef jaccard_coef_loss(y_true, y_pred):\n    return -jaccard_coef(y_true, y_pred) ","74af9c2d":"def unet(input_size=(256,256,1)):\n    inputs = Input(input_size)\n    \n    conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(inputs)\n    conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(pool1)\n    conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n\n    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(pool2)\n    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n\n    conv4 = Conv2D(256, (3, 3), activation='relu', padding='same')(pool3)\n    conv4 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)\n\n    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same')(pool4)\n    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same')(conv5)\n\n    up6 = concatenate([Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(conv5), conv4], axis=3)\n    conv6 = Conv2D(256, (3, 3), activation='relu', padding='same')(up6)\n    conv6 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv6)\n\n    up7 = concatenate([Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(conv6), conv3], axis=3)\n    conv7 = Conv2D(128, (3, 3), activation='relu', padding='same')(up7)\n    conv7 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv7)\n\n    up8 = concatenate([Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(conv7), conv2], axis=3)\n    conv8 = Conv2D(64, (3, 3), activation='relu', padding='same')(up8)\n    conv8 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv8)\n\n    up9 = concatenate([Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(conv8), conv1], axis=3)\n    conv9 = Conv2D(32, (3, 3), activation='relu', padding='same')(up9)\n    conv9 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv9)\n\n    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(conv9)\n\n    return Model(inputs=[inputs], outputs=[conv10])","964f8bcf":"model = unet(input_size=(dim, dim, 1))","68d53122":"weight_path=\"{}_weights.best.hdf5\".format('cxr_reg')\n\ncheckpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, \n                             save_best_only=True, mode='min', save_weights_only = True)\n\nreduceLROnPlat = ReduceLROnPlateau(monitor='val_loss', factor=0.5, \n                                   patience=4, \n                                   verbose=1, mode='min', epsilon=0.0001, cooldown=2, min_lr=1e-6)\nearly = EarlyStopping(monitor=\"val_loss\", \n                      mode=\"min\", \n                      patience=35) # probably needs to be more patient, but kaggle time is limited\ncallbacks_list = [checkpoint, early, reduceLROnPlat]","fabc0149":"metrics = [dice_coef, jaccard_coef,\n           'binary_accuracy', \n           tf.keras.metrics.Precision(), \n           tf.keras.metrics.Recall()]\n\nloss = [dice_coef_loss, \n        jaccard_coef_loss,\n        'binary_crossentropy']","4271938c":"model.compile(optimizer = Adam(lr = 1e-4), \n              loss = loss, \n              metrics = metrics)","f85caf6d":"res = model.fit(X_train, Y_train, \n                validation_data=(X_val, Y_val), \n                batch_size=16, epochs=80,\n                callbacks=callbacks_list)","218ef455":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (10, 5))\nax1.plot(res.history['loss'], '-', label = 'Loss')\nax1.plot(res.history['val_loss'], '-', label = 'Validation Loss')\nax1.legend()\n\nax2.plot(100 * np.array(res.history['binary_accuracy']), '-', \n         label = 'Accuracy')\nax2.plot(100 * np.array(res.history['val_binary_accuracy']), '-',\n         label = 'Validation Accuracy')\nax2.legend();","09267a86":"preds = model.predict(X_testNorm)","fb4a6678":"fig, axs = plt.subplots(nrows=5, ncols=2, figsize=(10, 20))\n\nfor i in range(5):\n    for j in range(2):\n        if j != 1:\n            axs[i, j].imshow(X_testNorm[i], cmap='gray')\n            axs[i, j].set_title('CXR')\n        else:\n            axs[i, j].imshow(preds[i], cmap='gray')\n            axs[i, j].set_title('predicted mask')","22c1577e":"### images\n* 'CHNCXR_0242_0.png'\n* 'MCUCXR_0017_0.png'\n\n### mask\n* 'MCUCXR_0017_0.png'\n* 'CHNCXR_0337_1_mask.png'\n\n### test\n* '00006199_010.png'","c4adef0c":"# Dataset\n### Montgomery and Shenzhen for train\nhttps:\/\/www.kaggle.com\/nikhilpandey360\/chest-xray-masks-and-labels\n\n### Random NIH for test\nhttps:\/\/www.kaggle.com\/nih-chest-xrays\/sample"}}