{"cell_type":{"aac3308a":"code","fbee7d82":"code","1917e677":"code","6e3a20d9":"code","359418d7":"code","ba4d322a":"code","539612cc":"code","f796dabc":"code","67129feb":"code","b9881a60":"code","657d6873":"code","b1142013":"code","0521c3e2":"code","b71cf199":"code","9c0dca6d":"code","5a270b85":"code","f11f5c6d":"code","1094bf11":"code","711657b0":"code","70f9ea3d":"code","3c5c91b7":"code","3a868082":"code","c7f7fe9c":"code","a49fd11f":"code","db925ea4":"code","23d67710":"code","c57775c5":"code","7f6c866f":"code","21965190":"code","16ed6a23":"code","948ad5b6":"code","5362ad78":"code","b1228a12":"code","cf439482":"code","08c8f0f3":"code","4421f7f5":"code","84846033":"code","ee3d1691":"code","95d96386":"code","e7473d40":"code","7f2c3726":"code","d69a1236":"code","42b136f6":"code","778270d4":"code","b2716a14":"code","f1acb6e7":"code","3ff1b370":"code","332240aa":"code","e39212a9":"code","e08b03df":"code","d634aa41":"code","0e09826c":"code","637bb86c":"code","024b4d1d":"code","bfa44086":"code","1953003a":"code","b304fa3e":"code","9e7e7794":"code","9264c321":"code","ecc39eab":"code","5e8afa05":"code","7ede6217":"code","0a09c1ce":"code","b7f02272":"code","4f5bfc7f":"code","4e0ca765":"code","cad64990":"code","7d3074a8":"code","c27e5495":"code","5d2841ce":"code","5a833955":"code","11d0d4fe":"code","d4bfdf3b":"code","df6d3396":"code","2ebd741e":"code","d210ced5":"code","e4c7b0c4":"code","91966fe5":"code","14320a07":"code","8a9d94d2":"code","edb92ca7":"code","bcb9a954":"code","caf9f46d":"code","eb009875":"code","17f7eda8":"code","8b121253":"code","13368da8":"code","df023bc3":"code","7617e754":"markdown","0ee7f19f":"markdown","5d96957f":"markdown","07630df4":"markdown","67a13614":"markdown","c677836d":"markdown","5f308cf7":"markdown","3d462821":"markdown","200a7323":"markdown","9081c858":"markdown","4f4692d5":"markdown","3c1bcb9a":"markdown","e2b60a7f":"markdown","c64d6067":"markdown","65cdf9a8":"markdown","e4d36bab":"markdown","2f63ea8f":"markdown","1840bbf4":"markdown","fc691016":"markdown","62b35eec":"markdown","61c91e31":"markdown","1bec1e09":"markdown","8e7bfcaf":"markdown","517d29c9":"markdown","46073beb":"markdown","f23cc0fb":"markdown","818a3812":"markdown","2dc0bcf9":"markdown","506dd1dd":"markdown","0a58a657":"markdown","b77787af":"markdown","ad80be9a":"markdown","d9f2923f":"markdown","f9255d5a":"markdown","85909ba9":"markdown","87e7f1df":"markdown","b7e6d42b":"markdown","fd53af4f":"markdown","c367d94d":"markdown","c221988e":"markdown","56fc777c":"markdown","dd4cdb84":"markdown","875b5538":"markdown","2d24979d":"markdown","1632dd2b":"markdown","0bbc7c31":"markdown","bbdf92f2":"markdown","ac42549c":"markdown","6276a43b":"markdown","c81635a7":"markdown","e7d25b6b":"markdown","076401d0":"markdown","48ecc06d":"markdown"},"source":{"aac3308a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbee7d82":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","1917e677":"train_df.columns","6e3a20d9":"train_df.head()","359418d7":"train_df.describe()","ba4d322a":"train_df.info()","539612cc":"def bar_plot(variable):\n    var = train_df[variable]       #girilen degiskeni 'var' adl\u0131 degiskene atad\u0131k\n    varValue = var.value_counts()  #icinde kac farkl\u0131 ozellik oldugunu say\u0131yor.(orn: Sex:(f)veya(m))\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    \n    ","f796dabc":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","67129feb":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","b9881a60":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","657d6873":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)\n","b1142013":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]] # butun yolcular\u0131n classlar\u0131na gore hayatta kal\u0131p kalmad\u0131klar\u0131","0521c3e2":"# Pclass vs Survived  \ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=False).mean() #classlara gore hayatta kalma ortalamalar\u0131\n# Pclass'a gore groupby yapt\u0131k ve asag\u0131daki sonuc c\u0131kt\u0131.","b71cf199":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean()","9c0dca6d":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)  # survived k\u0131sm\u0131n\u0131 buyukten kucuge s\u0131ralad\u0131k.","5a270b85":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","f11f5c6d":"def detect_outliers(df,features):\n    outlier_indices=[]\n    for c in features:\n        q1 = np.percentile(df[c],25) \n        q3 = np.percentile(df[c],75)\n        iqr = q3 - q1\n        outlier_step = iqr*1.5\n        outlier_list_col = df[(df[c] < q1 - outlier_step) | (df[c] > q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    return multiple_outliers","1094bf11":"train_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","711657b0":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0).reset_index(drop=True)","70f9ea3d":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","3c5c91b7":"train_df.head()","3a868082":"train_df.columns[train_df.isnull().any()] #train_df'nin icindeki missing value olan sutunlar","c7f7fe9c":"train_df.isnull().sum() # kac tane missing value oldugu","a49fd11f":"train_df[train_df[\"Embarked\"].isnull()]","db925ea4":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")","23d67710":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","c57775c5":"#simdi Fare degeri bos olan yolcuya bakal\u0131m.\ntrain_df[train_df[\"Fare\"].isnull()]","7f6c866f":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","21965190":"# Fare bilgisi bos olan yolcu kald\u0131 m\u0131 diye bakal\u0131m.\ntrain_df[train_df[\"Fare\"].isnull()]","16ed6a23":"list1 = [\"SibSp\",\"Parch\",\"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt=\".2f\") #annot=False dersek kutularda say\u0131 yazmaz.\nplt.show()","948ad5b6":"g = sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","5362ad78":"g = sns.factorplot(x=\"Parch\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels=\"Survived Probability\"\nplt.show()","b1228a12":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels=\"Survived Probability\"\nplt.show()","cf439482":"g = sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","08c8f0f3":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=2)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","4421f7f5":"g = sns.FacetGrid(train_df, row=\"Embarked\", size=2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","84846033":"g = sns.FacetGrid(train_df, row=\"Embarked\", col=\"Survived\", size=2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","ee3d1691":"train_df[train_df[\"Age\"].isnull()] #hangi yolcular\u0131n yaslar\u0131n\u0131n bilinmedigine bak\u0131yoruz.","95d96386":"sns.factorplot(data=train_df, x=\"Sex\", y=\"Age\", kind=\"box\")\nplt.show()","e7473d40":"sns.factorplot(data=train_df, x=\"Sex\", y=\"Age\", hue=\"Pclass\", kind=\"box\") #s\u0131n\u0131fland\u0131rma olarak Pclass ekledik.\nplt.show()","7f2c3726":"sns.factorplot(data=train_df, x=\"Parch\", y=\"Age\", kind=\"box\")\nsns.factorplot(data=train_df, x=\"SibSp\", y=\"Age\", kind=\"box\")\nplt.show()","d69a1236":"train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]] #Cinsiyet verilerini say\u0131ya donusturduk\nsns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","42b136f6":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","778270d4":"train_df[train_df[\"Age\"].isnull()]","b2716a14":"train_df[\"Name\"].head(10)","f1acb6e7":"s = \"Allen, Mr. William Henry\"\ns.split(\".\")[0].split(\",\")[-1].strip()","3ff1b370":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","332240aa":"train_df[\"Title\"].head(10)","e39212a9":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","e08b03df":"#convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i==\"Master\" else 1 if i==\"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"Title\"]] \ntrain_df[\"Title\"].head(10)","d634aa41":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=0)\nplt.show()","0e09826c":"g = sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","637bb86c":"train_df.drop(labels=[\"Name\"], axis=1, inplace=True)","024b4d1d":"train_df.head(10)","bfa44086":"train_df = pd.get_dummies(train_df, columns=[\"Title\"])\ntrain_df.head()","1953003a":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1\n#sibsp=0 ve parch=0 oldugunda ailede 0 kisi var gibi olmas\u0131n diye +1 ekledik.","b304fa3e":"train_df.head()","9e7e7794":"g=sns.factorplot(x=\"Fsize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","9264c321":"train_df[\"family_size\"]=[1 if i<5 else 0 for i in train_df[\"Fsize\"]]","ecc39eab":"train_df.head(10)","5e8afa05":"sns.countplot(x=\"family_size\", data=train_df)\nplt.show()","7ede6217":"g=sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show() ","0a09c1ce":"train_df=pd.get_dummies(train_df, columns=[\"family_size\"])","b7f02272":"train_df.head()","4f5bfc7f":"train_df[\"Embarked\"].head()","4e0ca765":"sns.countplot(x=\"Embarked\", data=train_df)\nplt.show()","cad64990":"train_df=pd.get_dummies(train_df, columns=[\"Embarked\"])","7d3074a8":"train_df.head()","c27e5495":"train_df[\"Ticket\"].head(20)","5d2841ce":"a=\"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]\n","5a833955":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] =tickets\n    ","11d0d4fe":"train_df[\"Ticket\"].head(20)","d4bfdf3b":"train_df.head()","df6d3396":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","2ebd741e":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Pclass\"])\ntrain_df.head()","d210ced5":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","e4c7b0c4":"train_df.drop(labels=[\"PassengerId\", \"Cabin\"],axis=1, inplace=True)\ntrain_df.columns","91966fe5":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","14320a07":"train_df_len","8a9d94d2":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","edb92ca7":"test.head()","bcb9a954":"train = train_df[:train_df_len]\nX_train = train.drop(labels=[\"Survived\"],axis=1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.33, random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","caf9f46d":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2)\nacc_log_test = round(logreg.score(X_test, y_test)*100,2)\nprint(\"Training Accuracy: %{}\".format(acc_log_train))\nprint(\"Testing Accuracy: %{}\".format(acc_log_test))","eb009875":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\": range(10,500,20),\n                \"max_depth\": range(1,20,2)}\nsvc_param_grid = {\"kernel\": [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\": [2,3,10],\n                \"min_samples_leaf\": [1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\": [\"gini\"]}\nloreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                   \"penalty\":[\"l1\",\"l2\"]}\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype=int),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param =[dt_param_grid,\n                  svc_param_grid,\n                  rf_param_grid,\n                  loreg_param_grid,\n                  knn_param_grid]","17f7eda8":"cv_result=[]\nbest_estimators=[] \nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid = classifier_param[i], cv = StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])\n","8b121253":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\",\n           \"SVM\",\n           \"RandomForestClassifier\",\n           \"LogisticRegression\",\n           \"KNeighborsClassifier\"]})\ng=sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_ylabel(\"Cross Validation Scores\")","13368da8":"votingC = VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                       (\"rf\",best_estimators[2]),\n                                       (\"lr\",best_estimators[3])],\n                                       voting=\"soft\", n_jobs=-1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","df023bc3":"test_survived = pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)\n","7617e754":"<a id=\"28\"><\/a>\n# Drop Passenger Id and Cabin","0ee7f19f":"<a id=\"15\"><\/a>\n## Pclass -- Survived","5d96957f":"<a id=\"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Sibsp - Survived\n* Parch - Survived","07630df4":"<a id=\"20\"><\/a>\n## Fill Missing Age Value","67a13614":"* SibSp ve Parch thresholdu 3 olacak sekilde ortak bir feature olarak kullan\u0131labilir\u00e7\n* Kucuk ailelerin hayatta kalma olas\u0131l\u0131klar\u0131 daha fazla.\n* Parch degeri 3 olanlar\u0131n standart sapmas\u0131 buyuk.","c677836d":"* 1.classtaki yolcular 2.classtakilerden, 2.classtakiler de 3.classtakilerden ya\u015fl\u0131. ","5f308cf7":"\"Fare\" bilgisi bos yolcu kalmad\u0131","3d462821":"Goruldugu uzere Fare bilgisi 80 olan yolcular genellikle C liman\u0131ndan binmisler. Embarked k\u0131sm\u0131 missing olan yolcular\u0131n bilgisini C ile dolduracag\u0131z.","200a7323":"<a id=\"34\"><\/a>\n## Prediction and Submission","9081c858":"* kad\u0131nlar erkeklerden daha yuksek hayatta kalma olas\u0131l\u0131g\u0131na sahip.\n* erkeklerin C liman\u0131ndaki Pclass= 3'te hayatta kalma olas\u0131l\u0131g\u0131 yuksek.\n* Embarked ve Sex bilgisi trainingde dogrudan kullan\u0131labilir.","4f4692d5":"<a id=\"19\"><\/a>\n## Embarked -- Sex -- Fare -- Survived","3c1bcb9a":"<a id=\"11\"><\/a>\n# Visualization","e2b60a7f":"Fare ozelligi ile Survived ozelligi aras\u0131nda bir correlation var (0.26)","c64d6067":"<a id=\"4\"><\/a>\n## Categorical Variable Analysis","65cdf9a8":"nokta'ya gore ay\u0131r ilk k\u0131sm\u0131 al, onu da virgule gore ay\u0131r son k\u0131sm\u0131 al, strip ile boslugu yok et.","e4d36bab":"* Ya\u015f tahmini i\u00e7in cinsiyet ozelligi bize cok yard\u0131mc\u0131 olmaz, cunku iki cinsiyetin ya\u015f da\u011f\u0131l\u0131mlar\u0131 birbirine cok yak\u0131n. Daha fazla ozellige bakmam\u0131z gerekiyor.","2f63ea8f":"<a id=\"16\"><\/a>\n## Age -- Survived","1840bbf4":"<a id=\"12\"><\/a>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","fc691016":"<a id=\"31\"><\/a>\n## Simple Logistic Regression ","62b35eec":"<a id=\"1\"><\/a>\n# Load and Check Data\n","61c91e31":"<a id=\"17\"><\/a>\n## Pclass -- Survived -- Age","1bec1e09":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history, in 1912. The Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color=\"blue\">\nContent:\n    \n    \n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    \n    *[Univariate Variable Analysis](#3)\n    \n    *[Categorical Variable Analysis](#4)\n    \n    *[Numerical Variable Analysis](#5)   \n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    \n    *[Find Missing Value](#9)\n    \n    *[Fill Missing Value](#10)\n1. [Visualization](#11)\n    \n    *[Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    \n    *[SibSp -- Survived](#13)\n    \n    *[Parch -- Survived](#14)\n    \n    *[Pclass -- Survived](#15)\n    \n    *[Age -- Survived](#16)\n    \n    *[Pclass -- Survived -- Age](#17)\n    \n    *[Embarked -- Sex -- Pclass -- Survived](#18)\n    \n    *[Embarked -- Sex -- Fare -- Survived](#19)\n    \n    *[Fill Missing Age Value](#20)\n1. [Feature Engineering](#21)\n    \n    *[Name - Title](#22)\n    \n    *[Family Size](#23)\n    \n    *[Embarked](#24)\n    \n    *[Ticket](#25)\n    \n    *[Pclass](#26)\n    \n    *[Sex](#27)\n    \n    *[Drop Passenger Id and Cabin](#28)\n1. [Modeling](#29)\n    \n    *[Train Test Split](#30)\n    \n    *[Simple Logistic Regression](#31)\n    \n    *[Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    \n    *[Ensemble Modeling](#33)\n    \n    *[Prediction and Submission](#34)\n    \n","8e7bfcaf":"<a id=\"22\"><\/a>\n## Name - Title","517d29c9":"<a id=\"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has 1 missing value","46073beb":"<a id=\"13\"><\/a>\n## SibSp -- Survived","f23cc0fb":"<a id=\"32\"><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n5 machine learning classifier kars\u0131last\u0131racag\u0131z. Hepsinin accuracy'sini cross validation ile bulacag\u0131z.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression\n","818a3812":"Embarked k\u0131sm\u0131n\u0131 doldurmak istiyoruz. Bunun icin Fare olarak 80 para odeyen yolcular\u0131n Embarked bilgilerine bakacag\u0131z ve ona gore dolduracag\u0131z.","2dc0bcf9":"<a id=\"24\"><\/a>\n# Embarked","506dd1dd":"<a id=\"8\"><\/a>\n# Missing value\n*Find Missing Value\n\n*Fill Missing Value","0a58a657":"<a id=\"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassengerId","b77787af":"kucuk ailelerin hayatta kalma olas\u0131l\u0131g\u0131 genis ailelerden daha fazlad\u0131r.","ad80be9a":"* age <=10 ise hayatta kalma sans\u0131 yuksek.\n* yasl\u0131 yolcular (80) hayatta kald\u0131lar.\n* 20li yaslardakilerin cogu kurtulamad\u0131.\n* yolcular\u0131n cogu 15 ile 30 yas aras\u0131nda.\n* age ozelligi trainingde kullan\u0131labilir.","d9f2923f":"* float64(2): Fare and Age\n* int64(5): Pclass, SibSp, Parch, PassengerId and Survived\n* object(5): Cabin, Embarked, Ticket, Name and Sex","f9255d5a":"* Fazla para odeyen (Fare) yolcular\u0131n hayatta kalma olas\u0131l\u0131g\u0131 yuksek.","85909ba9":"<a id=\"30\"><\/a>\n## Train Test Split","87e7f1df":"Pclass'\u0131 3 olan yolcular\u0131n ortalama nekadar Fare odediklerine bakt\u0131k ve train_df[\"Fare\"] degeri bos olan yolcunun fare bilgisini o ortalama deger ile doldurduk.","b7e6d42b":"* pclass ozelligi model training icin onemlidir.","fd53af4f":"<a id=\"27\"><\/a>\n# Sex","c367d94d":"Art\u0131k Embarked k\u0131sm\u0131 bos olan yolcu yok","c221988e":"<a id=\"21\"><\/a>\n# Feature Engineering","56fc777c":"<a id=\"5\"><\/a>\n## Numerical Variable Analysis","dd4cdb84":"* ya\u015f ve cinsiyet birbiriyle iliskili degil fakat ya\u015f; parch, sibsp ve pclass ile iliskili.","875b5538":"<a id=\"26\"><\/a>\n# Pclass","2d24979d":"<a id=\"14\"><\/a>\n## Parch -- Survived","1632dd2b":"* Fazla SibSp de\u011feri, hayatta kalma olas\u0131l\u0131g\u0131n\u0131 azalt\u0131yor.\n* E\u011fer SibSp == 0, 1 veya 2 ise hayatta kalma olas\u0131l\u0131g\u0131 fazlad\u0131r.\n* Bu kategoriyi yorumlayarak yeni bir ozellik olusturulabilir.","0bbc7c31":"<a id=\"25\"><\/a>\n# Ticket","bbdf92f2":"<a id=\"2\"><\/a>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passengers\n1. Age: age of passengers\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C=Cherbourg, Q=Queenstown, S=Southampton)\n","ac42549c":"<a id=\"33\"><\/a>\n## Ensemble Modeling","6276a43b":"<a id=\"23\"><\/a>\n# Family Size","c81635a7":"<a id=\"9\"><\/a>\n## Find Missing Value","e7d25b6b":"<a id=\"7\"><\/a>\n# Outlier Detection","076401d0":"<a id=\"18\"><\/a>\n## Embarked -- Sex -- Pclass -- Survived","48ecc06d":"<a id=\"29\"><\/a>\n# Modeling"}}