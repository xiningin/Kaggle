{"cell_type":{"caf82bd0":"code","8273b235":"code","2fa5a96d":"markdown","d910a5df":"markdown"},"source":{"caf82bd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Bokeh libraries\nfrom bokeh.io import output_notebook\nfrom bokeh.palettes import inferno, Spectral, all_palettes, Category20\nfrom bokeh.plotting import figure, curdoc, show\nfrom bokeh.models import ColumnDataSource, FactorRange, CustomJS, Slider\nfrom bokeh.models.widgets import Panel, Tabs\nfrom bokeh.layouts import gridplot, row, column, layout\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nimport numpy as np # we will use this later, so import it now\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,LinearInterpolator\nfrom datetime import datetime\nfrom dateutil.parser import parse\nimport pandas as pd\nimport collections\n\n\nfrom bokeh.io import output_file, show\nfrom bokeh.layouts import row\nfrom bokeh.palettes import Viridis3\nfrom bokeh.plotting import figure\nfrom bokeh.models import CheckboxGroup, CustomJS\nfrom bokeh.models.widgets import DataTable, DateFormatter, TableColumn,Div\nimport numpy as np\nfrom bokeh.models import Paragraph, Panel, Tabs, Column\n\nfrom bokeh.io import output_file, show\nfrom bokeh.layouts import row\nfrom bokeh.palettes import Viridis3\nfrom bokeh.plotting import figure\nfrom bokeh.models import CheckboxGroup, CustomJS\nfrom bokeh.layouts import column, widgetbox\nfrom bokeh.models import CustomJS, ColumnDataSource, Slider, Select\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.models.glyphs import VBar\nfrom bokeh.palettes import Spectral6\nfrom bokeh.transform import linear_cmap,factor_cmap\n# from collections import Counter\nfrom math import pi\nfrom bokeh.models.glyphs import Wedge\nfrom bokeh.models import glyphs,GraphRenderer\n\nimport pandas as pd\n\nfrom bokeh.palettes import Category20c,Spectral\nfrom bokeh.plotting import figure, show\nfrom bokeh.transform import cumsum\nimport pandas as pd\n\noutput_notebook()\n# My word count data\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8273b235":"# Title: Interactive Sales Dashboard\n# Author: Akhilesh Rai\n# Date: 31\/08\/2019\n# Thank you for checking out my kernel!  \n# Please upvote if you like the dashboard and comment if you have any suggestions.\n\nsales_train = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nitems_train = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitem_categories = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nyear = []\nmonth = []\nfor x in range(0,sales_train.shape[0]):\n    month.append(sales_train['date'][x].split('.')[1])\n    year.append(sales_train['date'][x].split('.')[2])\nsales_train['date'] = sales_train['date'].str.replace('.', '-', regex=True)\nsales_train['month'] = month\nsales_train['year'] = year\nsales_df = sales_train.copy()\ndf = sales_df.copy()\nsource_sales = ColumnDataSource(data=df)\nyear_list=df['year'].unique().tolist().copy()\nmonth_list = df['month'].unique().tolist().copy()\nmonth_list = list(sales_train.month)\nmonth_count = collections.Counter(month_list)\nmonth = list(month_count.keys())\nmonth_counts = list(month_count.values())\nyear_list = list(sales_train.year)\nyear_count = collections.Counter(year_list)\nyear = list(year_count.keys())\nyear_count = list(year_count.values())\nmonth_group = pd.DataFrame({'index': list(range(1,len(sales_train.groupby([\"month\"])[\"item_cnt_day\"].sum())+1)),\n                                'month_count': sales_train.groupby([\"month\"])[\"item_cnt_day\"].sum()})\n\n#ts.drop(columns = 'date_block_num')\n\nmonth_group = month_group.reset_index()\ndel month_group['month']\nmonth_group.astype({'month_count': 'int32'}).dtypes\nmonth_cds = ColumnDataSource(month_group)\n\nhover = HoverTool(tooltips = '@month_count= Counts')\nsales_month = figure(plot_width=400, plot_height=300,tools = [hover])\n\nsales_month.line('index','month_count',source = month_cds, line_width=2)\nsales_month.background_fill_color = '#fffce6'\n\nyear_group = pd.DataFrame({'index': list(range(1,len(sales_train.groupby([\"year\"])[\"item_cnt_day\"].sum())+1)),\n                                'year_count': sales_train.groupby([\"year\"])[\"item_cnt_day\"].sum()})\n\n#ts.drop(columns = 'date_block_num')\n\nyear_group = year_group.reset_index()\ndel year_group['year']\nyear_group.astype({'year_count': 'int32'}).dtypes\nyear_cds = ColumnDataSource(year_group)\n\nhover = HoverTool(tooltips = '@year_count= Counts')\nsales_year = figure(plot_width=400, plot_height=300,tools = [hover])\n\nsales_year.line('index','year_count',source = year_cds, line_width=2)\nsales_year.background_fill_color = '#fffce6'\n\nts = pd.DataFrame({'index': list(range(1,len(sales_train.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum())+1)),\n                                'datenum': sales_train.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()})\n\n#ts.drop(columns = 'date_block_num')\nts.head()\nts = ts.reset_index()\ndel ts['date_block_num']\nts.astype({'datenum': 'int32'}).dtypes\nts_cds = ColumnDataSource(ts)\n\nhover = HoverTool(tooltips = '@datenum= Counts')\nsales_line = figure(plot_width=400, plot_height=300,tools = [hover])\n\nsales_line.line('index','datenum',source = ts_cds, line_width=2)\nsales_line.background_fill_color = '#fffce6'\n\nsales_line.axis.visible=False\n\noutput_notebook()\nhover = HoverTool()\np = figure(plot_width=400, plot_height=400,tools = [hover])\np.background_fill_color = '#fffce6'\np.outline_line_width = 7\np.outline_line_alpha = 0.9\np.outline_line_color = \"black\"\n\nprops = dict(line_width=4, line_alpha=0.7)\nl0 = p.line('index','datenum',source = ts_cds, color=Viridis3[0],legend = \"Line 0 : per day\", **props)\nl1 = p.line('index','month_count',source = month_cds, color=Viridis3[2], legend=\"Line 1: per month\", **props)\n\ncheckbox = CheckboxGroup(labels=[\"Line 0\", \"Line 1\"],\n                         active=[0, 1], width=100)\ncheckbox.callback = CustomJS(args=dict(l0=l0, l1=l1, checkbox=checkbox), code=\"\"\"\nl0.visible = 0 in checkbox.active;\nl1.visible = 1 in checkbox.active;\n\n\"\"\")\n\nlayout_sales_line = column(checkbox, p)\n\n\nYear_COLORS =  ['#2b83ba',\n                '#abdda4',\n                '#8e0152']\nCOLORS = ['#2b83ba',\n          '#abdda4',\n          '#ffffbf',\n          '#fdae61',\n          '#d7191c',\n          '#276419',\n          '#4d9221',\n          '#7fbc41',\n          '#b8e186',\n          '#e6f5d0',\n          '#c51b7d',\n          '#8e0152']\n# create dataframes of data\n\n\nmonth_counts = collections.Counter(month_list)\ndf_month = pd.DataFrame({'months' : ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul','Aug','Sept','Oct','Nov','Dec'],\n                         'counts':list(month_counts.values()),'color' : COLORS})\n\nsource_month = ColumnDataSource(df_month)\n\n\ndf_year = pd.DataFrame({'years' : year,\n                         'counts':year_count,'color' : Year_COLORS})\n\nsource_year = ColumnDataSource(df_year)\n\ntotal = sum(list(month_counts.values()))\nx = [1,2,3,4,5,7,8,9,10,11,12]\ny = [1,2,3,4,5,7,8,9,10,11,12]\n\n\n\nmonths = df_month['months']\n\nhover = HoverTool(tooltips = '@counts= Counts')\nbar_plot = figure(x_range=months, plot_height=400,plot_width =400, toolbar_location=None, title=\"No of Items Sold\", tools = [hover])\nbar_months = bar_plot.vbar(x='months', top='counts', width=0.9, source=source_month,\n                   line_color='white',color = 'color')\nbar_years = bar_plot.vbar(x='years', top='counts', width=0.9, source=source_year,\n                   line_color='white',color = 'color')\n\n\nbar_plot.background_fill_color = '#fffce6'\nbar_plot.outline_line_width = 7\nbar_plot.outline_line_alpha = 0.9\nbar_plot.outline_line_color = \"black\"\n# callback for input controls\ncallback = CustomJS(args=dict(months=bar_months, years=bar_years, plot=bar_plot), code=\"\"\"\n    if (ui_view.value==\"months\") {\n      plot.x_range.factors = months.data_source.data.months\n    } else {\n      plot.x_range.factors = years.data_source.data.years\n    }\n\"\"\")\n\nui_view = Select(title=\"View\", callback=callback, value=\"months\", options=[\"months\", \"years\"])\ncallback.args['ui_view'] = ui_view\n\n# layout\nlayout_bar = column(ui_view, bar_plot)\n\n\n\ndf_month = df_month.rename(index=str, columns={0:'value', 'index':'months'})\ndf_month['angle'] = df_month['counts']\/sum(list(df_month['counts'])) * 2*pi\ndf_month['color'] = Category20c[len(list(df_month['counts']))]\n\ndf_year = pd.DataFrame({'index' : [x for x in range(1,4)],'years' : year,\n                         'counts': year_count})\ndf_year = df_year.rename(index=str, columns={0:'value'})\n\ndf_year['angle'] = df_year['counts']\/sum(list(df_year['counts'])) * 2*pi\ndf_year['color'] = Spectral[len(list(df_year['counts']))]\n\nsource_pie_month = ColumnDataSource(df_month)\nsource_pie_year = ColumnDataSource(df_year)\nsource = ColumnDataSource(df_month)\n\n\npie_chart = figure(plot_height=400,plot_width = 500, title=\"Pie Chart\", toolbar_location=None,\n           tools=\"hover\", tooltips=[(\"Counts\", \"@counts\")])\npie_chart.wedge(x=0, y=1, radius=0.4, \n                       start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),\n                       line_color=\"white\", fill_color='color', legend='counts', source=source)\n\npie_chart.legend.location = \"bottom_right\"\npie_chart.legend.orientation = \"vertical\"\npie_chart.legend.label_text_font_size = \"8px\"\npie_chart.background_fill_color = '#fffce6'\npie_chart.xgrid.visible = False\npie_chart.ygrid.visible = False\npie_chart.axis.axis_label=None\npie_chart.axis.visible=False\npie_chart.grid.grid_line_color = None\npie_chart.outline_line_width = 7\npie_chart.outline_line_alpha = 0.9\npie_chart.outline_line_color = \"black\"\n\nselect = Select(options=['month', 'year'],value='month',title = \"Value\")\ncallback = CustomJS(args={\"cds2\": source_pie_month, \"cds3\": source_pie_year, \"source\": source}, code=\"\"\"\n    if (cb_obj.value == \"month\") {\n        source.data = cds2.data\n    } else if(cb_obj.value == \"year\") {\n        source.data = cds3.data\n    }\n    console.log(source.data)\n\"\"\")\nselect.js_on_change('value', callback)\nlayout_pie = column(select, pie_chart)\ndf_month = df_month.drop(['color','angle'],axis = 1)\n\nColumns = [TableColumn(field=Ci, title=Ci) for Ci in df_month.columns] # bokeh columns\ndata_table = DataTable(columns=Columns, source=ColumnDataSource(df_month),width = 300) # bokeh table\n\nsome_div = Div(text=\"<b> No of Items sold: <\/b>\", style={'font-size': '200%', 'color': 'black'})\nmore_div = Div(text=\"<b> 2935849 <\/b>\", style={'font-size': '200%', 'color': '#5f9afa'})\ny = column(row(some_div,more_div),data_table)\n\nl = gridplot([[layout_sales_line,y],[layout_bar,layout_pie]])\ntitle_div = Div(text=\"<b> Sales Count <\/b>\", style={'font-size': '400%', 'color': '#5f9afa'})\np2 = column(title_div,l)\n\nmonth_group = pd.DataFrame({'index': list(range(1,len(sales_train.groupby([\"month\"])[\"item_price\"].sum())+1)),\n                                'month_count': sales_train.groupby([\"month\"])[\"item_price\"].sum()})\n\n#ts.drop(columns = 'date_block_num')\nmonth_group.head()\nmonth_group = month_group.reset_index()\ndel month_group['month']\nmonth_group.astype({'month_count': 'int32'}).dtypes\nmonth_price_cds = ColumnDataSource(month_group)\n\nhover = HoverTool(tooltips = '@month_count= Counts')\nsales_price_month = figure(plot_width=400, plot_height=300,tools = [hover])\n\nsales_price_month.line('index','month_count',source = month_price_cds, line_width=2)\nsales_price_month.background_fill_color = '#fffce6'\n\nyear_group = pd.DataFrame({'index': list(range(1,len(sales_train.groupby([\"year\"])[\"item_price\"].sum())+1)),\n                                'year_count': sales_train.groupby([\"year\"])[\"item_price\"].sum()})\n\n#ts.drop(columns = 'date_block_num')\n\nyear_group = year_group.reset_index()\ndel year_group['year']\nyear_group.astype({'year_count': 'int32'}).dtypes\nyear_price_cds = ColumnDataSource(year_group)\n\nts_price = pd.DataFrame({'index': list(range(1,len(sales_train.groupby([\"date_block_num\"])[\"item_price\"].sum())+1)),\n                                'datenum': sales_train.groupby([\"date_block_num\"])[\"item_price\"].sum()})\n\n#ts.drop(columns = 'date_block_num')\nts_price.head()\nts_price = ts_price.reset_index()\ndel ts_price['date_block_num']\nts_price.astype({'datenum': 'int32'}).dtypes\nts_price_cds = ColumnDataSource(ts_price)\n\nhover = HoverTool(tooltips = '@datenum= Counts')\nsales_line = figure(plot_width=500, plot_height=300,tools = [hover])\n\nsales_line.line('index','datenum',source = ts_price_cds, line_width=2)\nsales_line.background_fill_color = '#fffce6'\n\nsales_line.axis.visible=False\n\noutput_notebook()\nhover = HoverTool()\np = figure(plot_width=400, plot_height=400,tools = [hover])\np.background_fill_color = '#fffce6'\np.outline_line_width = 7\np.outline_line_alpha = 0.9\np.outline_line_color = \"black\"\n\nprops = dict(line_width=4, line_alpha=0.7)\nl0 = p.line('index','datenum',source = ts_price_cds, color=Viridis3[0],legend = \"Line 0 : per day\", **props)\nl1 = p.line('index','month_count',source = month_price_cds, color=Viridis3[2], legend=\"Line 1: per month\", **props)\n\ncheckbox = CheckboxGroup(labels=[\"Line 0\", \"Line 1\"],\n                         active=[0, 1], width=100)\ncheckbox.callback = CustomJS(args=dict(l0=l0, l1=l1, checkbox=checkbox), code=\"\"\"\nl0.visible = 0 in checkbox.active;\nl1.visible = 1 in checkbox.active;\n\n\"\"\")\n\nlayout_sales_line2 = column(checkbox, p)\n\nYear_COLORS =  ['#2b83ba',\n                '#abdda4',\n                '#8e0152']\nCOLORS = ['#2b83ba',\n          '#abdda4',\n          '#ffffbf',\n          '#fdae61',\n          '#d7191c',\n          '#276419',\n          '#4d9221',\n          '#7fbc41',\n          '#b8e186',\n          '#e6f5d0',\n          '#c51b7d',\n          '#8e0152']\n# create dataframes of data\n\n\ndf_month2 = pd.DataFrame({'months' : ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul','Aug','Sept','Oct','Nov','Dec'],\n                         'counts':list(month_group['month_count']),'color' : COLORS})\n\nsource_month2 = ColumnDataSource(df_month2)\n\n\ndf_year2 = pd.DataFrame({'years' : year,\n                         'counts':list(year_group['year_count']),'color' : Year_COLORS})\n\nsource_year2 = ColumnDataSource(df_year2)\n\ntotal = sum(list(month_group['month_count']))\nx = [1,2,3,4,5,7,8,9,10,11,12]\ny = [1,2,3,4,5,7,8,9,10,11,12]\n\n\n\nmonths = df_month['months']\n\nhover = HoverTool(tooltips = '@counts= Price')\nbar_plot2 = figure(x_range=months, plot_height=400,plot_width =400, toolbar_location=None, title=\"Total Sales\", tools = [hover])\nbar_months = bar_plot2.vbar(x='months', top='counts', width=0.9, source=source_month2,\n                   line_color='white',color = 'color')\nbar_years = bar_plot2.vbar(x='years', top='counts', width=0.9, source=source_year2,\n                   line_color='white',color = 'color')\n\n\nbar_plot2.background_fill_color = '#fffce6'\nbar_plot2.outline_line_width = 7\nbar_plot2.outline_line_alpha = 0.9\nbar_plot2.outline_line_color = \"black\"\n# callback for input controls\ncallback = CustomJS(args=dict(months=bar_months, years=bar_years, plot=bar_plot2), code=\"\"\"\n    if (ui_view.value==\"months\") {\n      plot.x_range.factors = months.data_source.data.months\n    } else {\n      plot.x_range.factors = years.data_source.data.years\n    }\n\"\"\")\n\nui_view = Select(title=\"View\", callback=callback, value=\"months\", options=[\"months\", \"years\"])\ncallback.args['ui_view'] = ui_view\n\n# layout\nlayout_bar2 = column(ui_view, bar_plot2)\n\ndf_month2 = df_month2.rename(index=str, columns={0:'value', 'index':'months'})\ndf_month2['angle'] = df_month2['counts']\/sum(list(df_month2['counts'])) * 2*pi\ndf_month2['color'] = Category20c[len(list(df_month2['counts']))]\n\n\ndf_year2 = df_year2.rename(index=str, columns={0:'value'})\n\ndf_year2['angle'] = df_year2['counts']\/sum(list(df_year2['counts'])) * 2*pi\ndf_year2['color'] = Spectral[len(list(df_year2['counts']))]\n\nsource_pie_month2 = ColumnDataSource(df_month2)\nsource_pie_year2 = ColumnDataSource(df_year2)\nsource = ColumnDataSource(df_month2)\n\npie_chart2 = figure(plot_height=400,plot_width = 500, title=\"Pie Chart\", toolbar_location=None,\n           tools=\"hover\", tooltips=[(\"Counts\", \"@counts\")])\npie_chart2.wedge(x=0, y=1, radius=0.4, \n                       start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),\n                       line_color=\"white\", fill_color='color', legend='counts', source=source)\n\npie_chart2.legend.location = \"bottom_right\"\npie_chart2.legend.orientation = \"vertical\"\npie_chart2.legend.label_text_font_size = \"8px\"\npie_chart2.background_fill_color = '#fffce6'\npie_chart2.xgrid.visible = False\npie_chart2.ygrid.visible = False\npie_chart2.axis.axis_label=None\npie_chart2.axis.visible=False\npie_chart2.grid.grid_line_color = None\npie_chart2.outline_line_width = 7\npie_chart2.outline_line_alpha = 0.9\npie_chart2.outline_line_color = \"black\"\n\nselect = Select(options=['month', 'year'],value='month',title = \"Value\")\ncallback = CustomJS(args={\"cds2\": source_pie_month2, \"cds3\": source_pie_year2, \"source\": source}, code=\"\"\"\n    if (cb_obj.value == \"month\") {\n        source.data = cds2.data\n    } else if(cb_obj.value == \"year\") {\n        source.data = cds3.data\n    }\n    console.log(source.data)\n\"\"\")\nselect.js_on_change('value', callback)\nlayout_pie2 = column(select, pie_chart2)\n\ndf_month2 = df_month2.drop(['color','angle'],axis = 1)\n\nColumns = [TableColumn(field=Ci, title=Ci) for Ci in df_month2.columns] # bokeh columns\ndata_table2 = DataTable(columns=Columns, source=ColumnDataSource(df_month2),width = 300) # bokeh table\n\nsome_div = Div(text=\"<b> Total Sales: <\/b>\", style={'font-size': '200%', 'color': 'black'})\nmore_div = Div(text=\"<b> 2615410572.36 <\/b>\", style={'font-size': '200%', 'color': '#5f9afa'})\ny2 = column(row(some_div,more_div),data_table2)\n\nl2 = gridplot([[layout_sales_line2,y2],[layout_bar2,layout_pie2]])\ntitle_div2 = Div(text=\"<b> Total Sales <\/b>\", style={'font-size': '400%', 'color': '#5f9afa'})\np = column(title_div2,l2)\n\n\n\n\n\n#more_div = Div(text=\"<b> 2615410572.36 <\/b>\", style={'font-size': '200%', 'color': '#000000'})\ntitle_div2 = Div(text=\"<b> About <\/b>\", style={'font-size': '400%', 'color': '#5f9afa'})\ndiv = Div(text=\"\"\" The kernel was made after much delibration with folks at <a href=\"http:\/\/discourse.bokeh.org\">bokeh.org<\/a>. Remember that this is just part 1 of the notebook and\nthe prediction part is due in the <b>next<\/b> notebook. \nI would say that this part <b>EDA<\/b> is yet to be completed. \n<p>The major concept of Bokeh is that graphs are built up one layer at a time. We start out by creating a figure, and then we add elements, called glyphs, to the figure. \n                        (For those who have used ggplot, the idea of glyphs is essentially the same as that of geoms which are added to a graph one \u2018layer\u2019 at a time.) \n                            Glyphs can take on many shapes depending on the desired use: circles, lines, patches, bars, arcs, and so on.\n                            <\/p><h2>References:<\/h2> \n  \n<ul> \n  <li><a href=\"http:\/\/discourse.bokeh.org\">Bokeh.org<\/a><\/li> \n  <li><a href=\"https:\/\/bokeh.pydata.org\/en\/latest\"\/>Bokeh Documentation<\/li> \n  <li><a href=\"<a href=\"https:\/\/stackoverflow.com\/questions\/45197006\/how-to-make-an-interactive-bokeh-plot\"\/>Stack Overflow<\/li>  \n<\/ul>  <\/p>\n<p>&copy Akhilesh Rai.<i>2019<\/i>. All Rights Reserved.<\/p>\n\"\"\", width=700, height=100)\n\n#last_div = Div(text=\"<p><\/p><p><\/p>&copy Akhilesh Rai\", style={'font-size': '80%', 'color': '#5f9afa'})\ntitlediv = column(div)\n\ntext = column(title_div2,titlediv)\np3 = column(text)\n\n\ntab1 = Panel(child=p,title=\"Total Sales\")\ntab2 = Panel(child=p2, title=\"Sales Count\")\ntab3 = Panel(child=p3, title=\"About\")\ntabs = Tabs(tabs=[ tab1, tab2,tab3 ])\nshow(tabs)","2fa5a96d":"# This kernel is a Bokeh Tutorial","d910a5df":"## Bokeh Interactive Dashboard\nBokeh is an interactive dashboard that targets web browsers for presentation. My goal was to understand and make an interactive using minimal code. \n\n***Building blocks of bokeh:***\n\n**Glyphs** are the basic visual marks that Bokeh can display. At the lowest level, there are glyph objects, such as Line. If you are using the low-level bokeh.models interface, it is your responsibility to create and coordinate all the various Bokeh objects, including glyph objects and their data sources. To make life easier, the bokeh.plotting interface exposes higher-level glyph methods such as the line() method used in the first example. The second example also adds in calls to circle() to display circle and line glyphs together on the same plot. Besides lines and circles, Bokeh makes many additional glyphs and markers available.\n\n**ColumnDataSource** is the object where the data of a Bokeh graph is stored. You can choose not to use a ColumnDataSource and feed your graph directly with Python dictionaries, pandas dataframes, etc, but for certain features such as having a popup window showing data information when the user hovers the mouse on glyphs, you are forced to use a ColumnDataSource otherwise the popup window will not be able to get the data. Other uses would be when streaming data.\n\nYou can create a ColumnDataSource from dictionaries and pandas dataframes and then use the ColumnDataSource to create the glyphs.\n\nI have tried to make this code with minimum code. Hope you guys like it. \n\n"}}