{"cell_type":{"23ea370a":"code","eb4992dd":"code","e24bd475":"code","b8825b38":"code","470a0277":"code","dc5ca09c":"code","bbf22099":"code","bc843ca8":"code","b154cdfb":"code","2250fcce":"code","ee0847d5":"code","117db18a":"code","ba62d6a2":"code","e2be9c11":"code","14ed7604":"code","8f139e90":"code","c2cbbe91":"code","cc19e891":"code","6cc20986":"code","3d9c9fc9":"code","b36221fa":"code","94f7a1c9":"code","8988b89d":"code","6408936c":"code","ccf908df":"code","1aa216b4":"code","cb620ac1":"code","178c6838":"code","91201ccb":"code","01772d8c":"code","a1589fb0":"code","1c2872c2":"markdown","20fc044f":"markdown","7c23097b":"markdown","e1265ee8":"markdown","77abd676":"markdown","0345b0ab":"markdown","e7f54472":"markdown","9b02f332":"markdown","52d2d5cb":"markdown","c9ab239b":"markdown"},"source":{"23ea370a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","eb4992dd":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","e24bd475":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","b8825b38":"train.info()","470a0277":"test.info()","dc5ca09c":"all = pd.concat([train, test], sort = False)\nall.info()","bbf22099":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","bc843ca8":"all.info()","b154cdfb":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","2250fcce":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","ee0847d5":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","117db18a":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","ba62d6a2":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","e2be9c11":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","14ed7604":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","8f139e90":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","c2cbbe91":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","cc19e891":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","6cc20986":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","3d9c9fc9":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","b36221fa":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","94f7a1c9":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","8988b89d":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","6408936c":"predictions = ada.predict(X_test)","ccf908df":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","1aa216b4":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","cb620ac1":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","178c6838":"t_pred = ada.predict(TestForPred).astype(int)","91201ccb":"PassengerId = all_test['PassengerId']","01772d8c":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","a1589fb0":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","1c2872c2":"****Train\/Test Split","20fc044f":"## Combine train and test","7c23097b":"****Final Predictions","e1265ee8":"****Extra Features:","77abd676":"# Import Libraries","0345b0ab":"# Import Data","e7f54472":"****Build AdaBoost","9b02f332":"****Check Accuracy","52d2d5cb":"****Check Accuracy","c9ab239b":"[Original NB](https:\/\/www.kaggle.com\/arunayyappan3936\/titanic-basic-solution-using-adaboost)"}}