{"cell_type":{"5d25f0d7":"code","a0496ce5":"code","d3ab67b2":"code","54c63a01":"code","d1dd145d":"code","ebad5ff2":"code","7d0aaada":"code","92b54971":"code","9bdce48d":"code","cd5ceafc":"code","a85a0160":"code","157ab9dd":"code","8f84a5e0":"code","66eea758":"code","7c008912":"code","b5353c86":"code","1e9b5fbc":"code","723b84c8":"code","4d3cea29":"code","e86c47b3":"code","cb749828":"code","ea1dc471":"code","e01def59":"code","427ec3e5":"code","0596dc14":"code","2b7bb217":"code","81905204":"code","fd9b0014":"code","57e7b3ff":"code","c52869be":"code","09e119dc":"code","ad33d131":"code","16c37a7b":"code","11982049":"code","a6887242":"code","fbab5346":"code","646be1bf":"code","50a7466c":"code","46728e38":"code","4e13e640":"code","f3a7d08b":"code","7eb331f5":"code","cd6fd6c9":"code","691f8653":"code","b6dada25":"code","f5e218bc":"code","41a1facd":"code","3a514157":"code","83c9f1db":"code","8318a841":"code","8a2e16be":"code","951d5d99":"code","891960bc":"code","1780fd1e":"markdown","b4f14ca5":"markdown","5bd51f07":"markdown","884421bb":"markdown","8afad279":"markdown","4ec6214d":"markdown","aecaf8ee":"markdown","ccc136b1":"markdown","37a4db85":"markdown","ca518bcd":"markdown","1a4b673f":"markdown","361172bc":"markdown","62bd530b":"markdown","a0304329":"markdown","1e935f66":"markdown","c5c6ba96":"markdown"},"source":{"5d25f0d7":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\n# ML tools\nimport h2o\nfrom h2o.estimators import H2OGradientBoostingEstimator\nfrom h2o.estimators import H2ORandomForestEstimator","a0496ce5":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ndf_sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","d3ab67b2":"df_train.head()","54c63a01":"df_train.info()","d1dd145d":"df_test.info()","ebad5ff2":"# date conversion + feature extraction\ndf_train['date_time'] = pd.to_datetime(df_train.date_time)\ndf_train['year'] = df_train.date_time.dt.year\ndf_train['month'] = df_train.date_time.dt.month\ndf_train['day'] = df_train.date_time.dt.day\ndf_train['hour'] = df_train.date_time.dt.hour\ndf_train['weekday'] = df_train.date_time.dt.weekday\n\ndf_test['date_time'] = pd.to_datetime(df_test.date_time)\ndf_test['year'] = df_test.date_time.dt.year\ndf_test['month'] = df_test.date_time.dt.month\ndf_test['day'] = df_test.date_time.dt.day\ndf_test['hour'] = df_test.date_time.dt.hour\ndf_test['weekday'] = df_test.date_time.dt.weekday","7d0aaada":"df_train.describe(include='all', datetime_is_numeric=True)","92b54971":"df_test.describe(include='all', datetime_is_numeric=True)","9bdce48d":"targets = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']","cd5ceafc":"df_train[targets].describe()","a85a0160":"for t in targets:\n    my_alpha=0.25\n    fig, ax = plt.subplots(figsize=(16,4))\n    ax.scatter(df_train.date_time, df_train[t], alpha=my_alpha, \n               color='darkred', s=4)\n    ax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\n    plt.xticks(rotation=90)\n    plt.title(t)\n    plt.grid()\n    plt.show()","157ab9dd":"# incremental view\nfor t in targets:\n    my_alpha=0.25\n    fig, ax = plt.subplots(figsize=(16,4))\n    ax.scatter(df_train.date_time, df_train[t].diff(), alpha=my_alpha, \n               color='darkred', s=4)\n    ax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\n    plt.xticks(rotation=90)\n    plt.title(t + ' - incremental')\n    plt.grid()\n    plt.show()","8f84a5e0":"corr_target_pearson = df_train[targets].corr(method='pearson')\ncorr_target_spearman = df_train[targets].corr(method='spearman')\n\nfig = plt.figure(figsize = (4,3))\nsns.heatmap(corr_target_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (4,3))\nsns.heatmap(corr_target_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","66eea758":"# distributions \/ scatter plots\nsns.pairplot(df_train[targets])\nplt.show()","7c008912":"# add boxplots of targets (=> look for outliers)\nfor t in targets:\n    plt.figure(figsize=(8,2))\n    plt.boxplot(df_train[t], vert=False)\n    plt.grid()\n    plt.title(t + ' - boxplot')\n    plt.show()","b5353c86":"# smae with log trafo\nfor t in targets:\n    plt.figure(figsize=(8,2))\n    plt.boxplot(np.log10(df_train[t]), vert=False)\n    plt.grid()\n    plt.title(t + ' - boxplot of log10(...)')\n    plt.show()","1e9b5fbc":"# # check accumulation of values on 0.1 for Benzene.\n# # these are the strange straight lines in the scatter plot above\n# check = df_train[df_train.target_benzene <= 0.1]\n# check.shape","723b84c8":"# # let's try to remove those => score gets much worse... => version 16\n# df_train = df_train[df_train.target_benzene>0.1]\n# # redo scatter plots\n# sns.pairplot(df_train[targets])\n# plt.show()","4d3cea29":"# numerical features excluding time features\nfeatures_num = ['deg_C', 'relative_humidity', 'absolute_humidity',\n                'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']","e86c47b3":"# plot distributions of numerical features\nfor f in features_num:\n    plt.figure(figsize=(14,4))\n    ax1 = plt.subplot(1,2,1)\n    ax1.hist(df_train[f], bins=50, color='blue')\n    plt.title(f + ' [Train]')\n    plt.grid()\n    ax2 = plt.subplot(1,2,2, sharex=ax1)\n    ax2.hist(df_test[f], bins=50, color='green')\n    plt.title(f + ' [Test]')\n    plt.grid()\n    plt.show()","cb749828":"# correlations (training)\ncorr_pearson_train = df_train[features_num].corr(method='pearson')\ncorr_pearson_test = df_test[features_num].corr(method='pearson')\n\nfig = plt.figure(figsize = (7,5))\nsns.heatmap(corr_pearson_train, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation - Train')\nplt.show()\n\nfig = plt.figure(figsize = (7,5))\nsns.heatmap(corr_pearson_test, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation - Test')\nplt.show()","ea1dc471":"# scatter plots of features (train)\nsns.pairplot(df_train[features_num])\nplt.show()","e01def59":"# scatter plots of features (test)\nsns.pairplot(df_test[features_num])\nplt.show()","427ec3e5":"for f in features_num:\n    plt.figure(figsize=(14,4))\n    ax1 = plt.subplot(2,1,1)\n    ax1.scatter(df_train.date_time, df_train[f], alpha=my_alpha, color='blue', s=4)\n    ax1.scatter(df_test.date_time, df_test[f], alpha=my_alpha, color='green', s=4)\n    plt.title(f)\n    plt.grid()","0596dc14":"# time features\nfeatures_time = ['year', 'month', 'day', 'hour', 'weekday']","2b7bb217":"# plot distributions of time features\nfor f in features_time:\n    plt.figure(figsize=(14,4))\n    ax1 = plt.subplot(1,2,1)\n    v = df_train[f].value_counts().sort_index()\n    ax1.bar(height=v.values, x=v.index, color='blue')\n    plt.title(f + ' [Train]')\n    plt.grid()\n    ax2 = plt.subplot(1,2,2, sharex=ax1)\n    v = df_test[f].value_counts().sort_index()\n    ax2.bar(height=v.values, x=v.index, color='green')\n    plt.title(f + ' [Test]')\n    plt.grid()\n    plt.show()","81905204":"# plot targets vs features column-wise\nfig, axs = plt.subplots(13, 3, figsize=(16,64))\ni = 0\nfor f in features_num + features_time:\n    for t in targets:\n        current_ax = axs.flat[i]\n        corr_t = np.round(df_train[f].corr(df_train[t], method='pearson'),4)\n        current_ax.scatter(df_train[f], df_train[t],\n                           alpha=0.25, s=4,\n                           color='darkred')\n        t_short = t.replace('target_','')\n        current_ax.set_title(t_short + ' vs ' + f + ', corr=' + str(corr_t))\n        current_ax.grid()\n        i = i + 1","fd9b0014":"for t in targets:\n    plt.figure(figsize=(10,4))\n    plt.acorr(df_train[t].diff()[2:], maxlags=20)\n    plt.title('Autocorrelations of increments of ' + t)\n    plt.grid()\n    plt.show()","57e7b3ff":"# exclude one day in 2011 (is also in test set)\ndf_train = df_train[df_train.year==2010]\ndf_train = df_train.reset_index()","c52869be":"# exclude August (being unusual low)\ndf_train = df_train[df_train.month!=8]\ndf_train = df_train.reset_index()","09e119dc":"# size of adjusted training data\nn_train = df_train.shape[0]\nprint('Training size (after adjustments):', n_train)","ad33d131":"# specify manual folds for cross validation\ndf_train['fold'] = np.floor(df_train.index \/ 579)\ndf_train.fold.value_counts().sort_index()","16c37a7b":"# select predictors\npredictors = features_num + features_time\n\npredictors.remove('year')\npredictors.remove('month')\n# predictors.remove('day')\n\nprint('Number of predictors: ', len(predictors))\nprint(predictors)","11982049":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","a6887242":"# upload data in H2O environment\ntrain_hex = h2o.H2OFrame(df_train)\ntest_hex = h2o.H2OFrame(df_test)","fbab5346":"# define Gradient Boosting model - target 1\ntarget = 'target_carbon_monoxide'\n\nfit_1 = H2OGradientBoostingEstimator(ntrees = 250,\n                                     max_depth=9,\n                                     min_rows=5,\n                                     learn_rate=0.02, # default: 0.1\n                                     sample_rate=1,\n                                     col_sample_rate=0.7,\n                                     fold_column='fold',\n                                     score_each_iteration=True,\n                                     stopping_metric='RMSE',\n                                     stopping_rounds=5,\n                                     stopping_tolerance=0.001, # default 0.001\n                                     seed=999)\n\n# and train model\nt1 = time.time()\nfit_1.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","646be1bf":"# show cross validation metrics\nfit_1.cross_validation_metrics_summary()","50a7466c":"# variable importance using shap values\nt1 = time.time()\nfit_1.shap_summary_plot(train_hex);\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","46728e38":"# define Gradient Boosting model - target 2\ntarget = 'target_benzene'\nn_cv = 5\n\nfit_2 = H2OGradientBoostingEstimator(ntrees = 250,\n                                     max_depth=9,\n                                     min_rows=5,\n                                     learn_rate=0.1, # default: 0.1\n                                     sample_rate=1,\n                                     col_sample_rate=0.7,\n                                     fold_column='fold',\n                                     score_each_iteration=True,\n                                     stopping_metric='RMSE',\n                                     stopping_rounds=5,\n                                     stopping_tolerance=0.001, # default 0.001\n                                     seed=999)\n\n# and train model\nt1 = time.time()\nfit_2.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","4e13e640":"# show cross validation metrics\nfit_2.cross_validation_metrics_summary()","f3a7d08b":"# variable importance using shap values\nt1 = time.time()\nfit_2.shap_summary_plot(train_hex);\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","7eb331f5":"# define Gradient Boosting model - target 3\ntarget = 'target_nitrogen_oxides'\n\nfit_3 = H2OGradientBoostingEstimator(ntrees = 250,\n                                     max_depth=9,\n                                     min_rows=5,\n                                     learn_rate=0.1, # default: 0.1\n                                     sample_rate=1,\n                                     col_sample_rate=0.7,\n                                     fold_column='fold',\n                                     score_each_iteration=True,\n                                     stopping_metric='RMSE',\n                                     stopping_rounds=5,\n                                     stopping_tolerance=0.001, # default 0.001\n                                     seed=999)\n\n# and train model\nt1 = time.time()\nfit_3.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","cd6fd6c9":"# show cross validation metrics\nfit_3.cross_validation_metrics_summary()","691f8653":"# variable importance using shap values\nt1 = time.time()\nfit_3.shap_summary_plot(train_hex);\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","b6dada25":"# mean metrics (cross validation)\nprint('Mean RMSE on CV:', (fit_1.rmse(xval=True) + fit_2.rmse(xval=True) + fit_3.rmse(xval=True))\/3)\nprint('Mean RMSLE on CV:', (fit_1.rmsle(xval=True) + fit_2.rmsle(xval=True) + fit_3.rmsle(xval=True))\/3)","f5e218bc":"# predict on test set\npred_test_1 = fit_1.predict(test_hex).as_data_frame()\npred_test_2 = fit_2.predict(test_hex).as_data_frame()\npred_test_3 = fit_3.predict(test_hex).as_data_frame()","41a1facd":"# build submission data frame\ndf_sub.target_carbon_monoxide = pred_test_1\ndf_sub.target_benzene = pred_test_2\ndf_sub.target_nitrogen_oxides = pred_test_3\ndf_sub.head()","3a514157":"# the first row is already known as it is part of the training set!\ndf_train[7110:]","83c9f1db":"# overwrite known target values\ndf_sub.loc[0,'target_carbon_monoxide'] = 1.4\ndf_sub.loc[0,'target_benzene'] = 4.1\ndf_sub.loc[0,'target_nitrogen_oxides'] = 186.5","8318a841":"# basic stats of submission\ndf_sub.describe()","8a2e16be":"# visualize submission\nsns.pairplot(df_sub[targets], \n             kind='reg', \n             plot_kws={'line_kws':{'color':'magenta'}, 'scatter_kws': {'alpha': 0.25}})\nplt.show()","951d5d99":"# visualize as time series\nfor t in targets:\n    my_alpha=0.25\n    fig, ax = plt.subplots(figsize=(16,4))\n    ax.scatter(df_train.date_time, df_train[t], alpha=my_alpha, \n               color='darkred', s=4)\n    ax.scatter(df_sub.date_time, df_sub[t], alpha=my_alpha, \n               color='magenta', s=4)\n    ax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\n    plt.xticks(rotation=90)\n    plt.title(t)\n    plt.grid()\n    plt.show()","891960bc":"# save submission file\ndf_sub.to_csv('submission.csv', index=False)","1780fd1e":"<a id='7'><\/a>\n# Baseline Models","b4f14ca5":"### Target Correlations","5bd51f07":"<a id='3'><\/a>\n# Numerical Features","884421bb":"### Trying to build first baseline models ignoring the time series structure...","8afad279":"#### => Targets show strong correlation!","4ec6214d":"<a id='6'><\/a>\n# Autocorrelations of targets","aecaf8ee":"<a id='2'><\/a>\n# Targets","ccc136b1":"#### There seems to be a structural change for Nitrogen Oxides target around September 2010!","37a4db85":"<a id='5'><\/a>\n# Targets vs Features","ca518bcd":"<a id='4'><\/a>\n# Time Features","1a4b673f":"# Table of Contents\n* [Data Preparation](#1)\n* [Targets](#2)\n* [Numerical Features](#3)\n* [Time Features](#4)\n* [Targets vs Features](#5)\n* [Autocorrelations of Targets](#6)\n* [Baseline Models](#7)\n* [Predict on Test Set and Visualize Results](#8)","361172bc":"<a id='8'><\/a>\n# Predict on Test Set and Visualize Results","62bd530b":"### We have three target variables here:","a0304329":"### Time Series Plots","1e935f66":"### Time Series Plots","c5c6ba96":"<a id='1'><\/a>\n# Data Preparation"}}