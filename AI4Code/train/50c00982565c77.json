{"cell_type":{"f6b02f1d":"code","294f5b04":"code","f9ff2f9c":"code","095aa816":"code","5d4f2afd":"code","47d76020":"code","61a35224":"code","bdad7ad0":"code","41d7abd7":"code","b31aaef8":"code","e092b253":"code","688574ca":"code","5409095d":"code","68ef4f58":"code","444a95ec":"code","bc4ffb53":"code","3878852d":"code","c3230640":"code","050d4d5f":"code","ee74c288":"code","484f8f7d":"code","e221bc5e":"code","1c028bd2":"code","402d7737":"code","5cf7ad6b":"code","4aee4116":"code","e1a9edee":"code","9fd38a07":"code","31b623e3":"markdown","9c8b089d":"markdown","b8c53712":"markdown","3c7e7ac7":"markdown","207161c5":"markdown"},"source":{"f6b02f1d":"!pip uninstall kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","294f5b04":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","f9ff2f9c":"! kaggle competitions download -c taxi","095aa816":"!unzip taxi.zip","5d4f2afd":"import torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport random\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler","47d76020":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","61a35224":"train = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')","bdad7ad0":"cab_type = {\"Uber\":0, \"Lyft\":1}\n\ntrain['cab_type']= train['cab_type'].map(cab_type)\ntest['cab_type']= test['cab_type'].map(cab_type)","41d7abd7":"summary_mapping = {\" Clear \":0,\" Drizzle \":1,\" Foggy \":2,\" Light Rain \":3,\" Mostly Cloudy \":4,\" Overcast \":5,\" Partly Cloudy \":6,\" Possible Drizzle \":7,\" Rain \":8}\n\ntrain['short_summary'] = train['short_summary'].map(summary_mapping)\ntest['short_summary'] = test['short_summary'].map(summary_mapping)","b31aaef8":"icon_mapping = {\" clear-day \":0,\" clear-night \":1,\" cloudy \":2,\" fog \":3,\" partly-cloudy-day \":4,\" partly-cloudy-night \":5,\" rain \":6}\n\ntrain['icon'] = train['icon'].map(icon_mapping)\ntest['icon'] = test['icon'].map(icon_mapping)","e092b253":"train.info()","688574ca":"x_data = train.loc[0:,\"cab_type\":\"precipIntensityMax\"]\ny_data = train.loc[0:,\"price\"]\n\nx_data = np.array(x_data)\ny_data = np.array(y_data)\nscaler = MinMaxScaler()\n\nx_data = scaler.fit_transform(x_data)\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device).reshape(-1,1)\n\nprint(x_train[:5])\nprint(x_train.shape)\nprint(y_train[:5])\nprint(y_train.shape)","5409095d":"x_test = test.loc[0:,\"cab_type\":]\nx_test = np.array(x_test)\nx_test = scaler.transform(x_test)\nx_test = torch.FloatTensor(x_test).to(device)\n\nx_test[:3]","68ef4f58":"learning_rate = 5e-3\n#1000\ntraining_epochs = 500\nbatch_size =38","444a95ec":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","bc4ffb53":"linear1=torch.nn.Linear(19,19,bias=True)\nlinear2=torch.nn.Linear(19,1,bias=True)\n#dropout=torch.nn.Dropout(p=0.3)\nrelu=torch.nn.ReLU()","3878852d":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)","c3230640":"model = torch.nn.Sequential(linear1,relu,\n                            linear2).to(device)","050d4d5f":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","ee74c288":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n        \n        \n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","484f8f7d":"model(x_train)","e221bc5e":"with torch.no_grad():\n\n  x_test=np.array(x_test)\n  x_test=torch.from_numpy(x_test).float().to(device)\n  predict=model(x_test)","1c028bd2":"predict","402d7737":"correct_prediction = predict.cpu().numpy().reshape(-1,1)","5cf7ad6b":"result = pd.read_csv('submission_form.csv')","4aee4116":"for i in range(len(predict)):\n  result['price'][i]=predict[i].item()","e1a9edee":"result","9fd38a07":"result.to_csv('submit.csv', index=False)","31b623e3":"\ubbf8\ub2c8\ubc30\uce58\ub97c \ub3c4\uc785\ud560 \uac83 \uc785\ub2c8\ub2e4. ","9c8b089d":"\n# \uae30\uc874 baseline\ucf54\ub4dc\uc640 \ucc28\uc774\uc810\n* \ubbf8\ub2c8\ubc30\uce58\ub97c \uc774\uc6a9\ud558\uc600\ub2e4.\n* \uc77c\ubc18 \uc120\ud615\ud68c\uadc0 \ubc29\ubc95\uc5d0\uc11c NN\ubaa8\ub378\ub85c \ubcc0\ud658\uc2dc\ucf30\ub2e4.\n","b8c53712":"\ub370\uc774\ud130\uac00\uacf5\uacfc\uc815\uacfc \ubaa8\ub378 \ubd88\ub7ec\uc624\ub294 \uacfc\uc815\uc740 \ubca0\uc774\uc2a4\ub77c\uc778 \ucf54\ub4dc\ub97c \uadf8\ub300\ub85c \uac00\uc838\uc654\uc2b5\ub2c8\ub2e4.","3c7e7ac7":"\ub808\uc774\uc5b4\ub97c \ub450\uacb9\uc73c\ub85c \uc313\uc544\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","207161c5":"https:\/\/www.youtube.com\/watch?v=bYHMD_hKmWI"}}