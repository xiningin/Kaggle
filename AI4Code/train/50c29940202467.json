{"cell_type":{"f837657e":"code","ce275098":"code","f958a99d":"code","1608f5ee":"code","9e3cf2cc":"code","66bc4ca2":"code","6b45e5a0":"code","59eaa2e6":"code","c5e29656":"code","ce0c326a":"code","707f38d7":"code","0f0f77bd":"code","949823ad":"code","c94ac55f":"code","5d5fd00b":"code","97192c61":"code","4eb51eda":"code","d925aa87":"code","d33f49d8":"code","5b7e2795":"code","31eeceea":"code","d35bee42":"code","5776059c":"code","40548f1f":"code","ff973242":"code","3c024831":"code","358ef3a7":"code","283c29a3":"code","660f7f6a":"code","0b24ec58":"code","4038f7c1":"code","6fbc4d5b":"code","39a9393e":"code","8057493f":"code","5ce65f6e":"code","47ca17ce":"code","7594e548":"code","5c1bd450":"code","d3265fd8":"code","84500e2c":"code","9dbae635":"code","900b4178":"code","4f071469":"code","18810c1c":"code","e3728b8b":"code","9c536f1e":"code","6b3eb97a":"code","ef7a8a69":"code","2104554b":"code","88958427":"code","2b49e510":"code","b72ba269":"code","26516e4f":"code","3f343b2b":"code","d6f4d1f9":"code","eb716849":"code","5924442e":"code","9f03bcc3":"code","8424d64e":"code","d3cbedf4":"code","a1c8bb9e":"code","f9744d21":"code","21733737":"code","bd8eafce":"code","1a4ec100":"code","5be3ec74":"code","ec479401":"code","cc7e69bc":"code","7247b624":"code","4e626851":"code","ae53c077":"code","69116fd1":"code","ba82e0b0":"code","733c39cd":"code","f279966d":"code","119da9bb":"code","8d414271":"code","2de09c0d":"code","0a62d575":"code","dc1faeaa":"code","f49dca44":"code","b5c8e5b1":"code","c975a8dd":"code","a2b86cbe":"code","3f4e06a2":"code","a9014a0b":"code","9dae052c":"code","8c73b470":"code","f1b018f0":"code","fabce1fd":"code","4204bc81":"code","7a44bc3a":"code","8514971d":"code","34b3ebe7":"code","8177c152":"markdown"},"source":{"f837657e":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport statsmodels.api as sm\nfrom pylab import rcParams\n\nimport numpy as np\nimport pandas as pd\n\nimport os\nimport matplotlib.pyplot as plt\nimport pandas_datareader as web\nimport datetime as dt\n\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n\nimport matplotlib.dates as dates\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","ce275098":"df = pd.read_csv(\"..\/input\/google-stock-data\/GOOG.csv\")\ndf.head()","f958a99d":"df.index = pd.to_datetime(df[\"Date\"])\ndf.drop('Date', axis=1, inplace=True)","1608f5ee":"df.describe()\n","9e3cf2cc":"df['Open'].plot(figsize=(12,8))\nplt.ylabel(\"open price\")","66bc4ca2":"df['High'].plot(figsize=(12,8))\nplt.ylabel(\"High price\")","6b45e5a0":"df['Volume'].plot(figsize=(12,8))\nplt.ylabel(\"Volume price\")","59eaa2e6":"df.isnull().sum()\n","c5e29656":"df['Total Pos'] = df.sum(axis=1)\n","ce0c326a":"df.head()\n","707f38d7":"df['Total Pos'].plot(figsize=(10,8))\nplt.title('Total Portfolio Value')","0f0f77bd":"df.drop('Total Pos',axis=1).plot(kind='line',figsize=(10,8))\n","949823ad":"df['Daily Return'] = df['Total Pos'].pct_change(1)\n","c94ac55f":"cum_ret = 100 * (df['Total Pos'][-1]\/df['Total Pos'][0] -1 )\nprint('Our return {} was percent!'.format(cum_ret))","5d5fd00b":"df['Daily Return'].mean()","97192c61":"df['Daily Return'].std()","4eb51eda":"df['Daily Return'].plot(kind='kde')","d925aa87":"SR = df['Daily Return'].mean()\/df['Daily Return'].std()","d33f49d8":"ASR = (252**0.5)*SR","5b7e2795":"all_plot = df\/df.iloc[0]\nall_plot.plot(figsize=(24,16))","31eeceea":"df.hist(bins=100,figsize=(12,6));\nplt.tight_layout()","d35bee42":"df.resample(rule='A').mean()\n","5776059c":"df.resample(rule='AS').min()\n","40548f1f":"df.resample(rule='AS').std()","ff973242":"df.resample(rule='M').mean().head()","3c024831":"df.resample(rule='MS').max().head()","358ef3a7":"title = 'Yearly Mean Closing Price for zoom'\ndf['Close'].resample('A').mean().plot.bar(title=title,figsize=(10,8));","283c29a3":"df.resample(rule='M').max().tail(10)","660f7f6a":"df.tail()","0b24ec58":"df['Close'].resample('M').max().plot.bar(figsize=(25,6),color='#1f77b4');\nxlim=[\"2021-01-31\", \"2021-10-311\"]\n","4038f7c1":"ax = df['Close'].plot(figsize=(24,6),title=title)","6fbc4d5b":"df['6-month-SMA'] = df['Close'].rolling(window=6).mean()\ndf['12-month-SMA'] = df['Close'].rolling(window=12).mean()\ndf['2-month-SMA'] = df['Close'].rolling(window=2).mean()","39a9393e":"df.head(10)\n","8057493f":"df[[\"Close\",\"6-month-SMA\",\"12-month-SMA\",\"2-month-SMA\"]].plot(figsize=(18,10));\n","5ce65f6e":"df['EWMA12'] = df['Close'].ewm(span=12,adjust=True).mean()\n","47ca17ce":"df[['Close','EWMA12']].plot(figsize=(12,6));\n","7594e548":"df[['Close','EWMA12','12-month-SMA']].plot(figsize=(30,15)).autoscale(axis='x',tight=True);\n","5c1bd450":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing","d3265fd8":"span = 12\nalpha = 2\/(span+1)","84500e2c":"df['EWMA12'] = df['Close'].ewm(alpha=alpha,adjust=False).mean()","9dbae635":"model=SimpleExpSmoothing(df[\"Close\"])","900b4178":"model.fit(smoothing_level=alpha,optimized=False)","4f071469":"fitted_model=model.fit(smoothing_level=alpha,optimized=False)","18810c1c":"fitted_model.fittedvalues\n","e3728b8b":"fitted_model.fittedvalues.shift(-1)","9c536f1e":"df[\"SES12\"]=fitted_model.fittedvalues.shift(-1)","6b3eb97a":"df[['Close',\"SES12\"]].plot(figsize=(30,15)).autoscale(axis='x',tight=True);","ef7a8a69":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\ndf['DESadd12'] = ExponentialSmoothing(df['Close'], trend='add').fit().fittedvalues.shift(-1)\ndf.head()","2104554b":"df[['Close',  'SES12', 'DESadd12']].plot(figsize=(24,12))","88958427":"df['DESadd12'].head()","2b49e510":"df[['Close','EWMA12','DESadd12']].iloc[:12].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","b72ba269":"df['DESmul12'] = ExponentialSmoothing(df['Close'], trend='mul').fit().fittedvalues.shift(-1)\ndf.head()","26516e4f":"df[['Close','DESadd12','DESmul12']].iloc[:48].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","3f343b2b":"df['TESadd12'] = ExponentialSmoothing(df['Close'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues\ndf.head()","d6f4d1f9":"\ndf['TESmul12'] = ExponentialSmoothing(df['Close'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues\ndf.head()","eb716849":"df[['Close','TESadd12','TESmul12']].plot(figsize=(24,12)).autoscale(axis='x',tight=True);","5924442e":"df[['Close','TESadd12','TESmul12']].iloc[:48].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","9f03bcc3":"df = pd.read_csv(\"..\/input\/google-stock-data\/GOOG.csv\")\ndf.head()","8424d64e":"len(df)","d3cbedf4":"train_df = df.iloc[:3000]\ntest_df = df.iloc[3000:]","a1c8bb9e":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=train_df['Date'],y=train_df['Open'],name=\"google Train\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['Open'],name=\"google Test\"),secondary_y=False,)","f9744d21":"from sklearn.preprocessing import MinMaxScaler","21733737":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(train_df['Close'].values.reshape(-1,1))","bd8eafce":"prediction_days = 30\n\nx_train = []\ny_train = []\n\nfor x in range(prediction_days, len(scaled_data)-5):     \n    x_train.append(scaled_data[x-prediction_days:x, 0])\n    y_train.append(scaled_data[x+5, 0])     \n    \nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","1a4ec100":"model = Sequential()    \nmodel.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1],1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1))","5be3ec74":"model.summary()\nmodel.compile(optimizer='adam', loss='mean_squared_error') \n\n","ec479401":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=25)\nhis=model.fit(x_train,y_train,epochs=200,batch_size=512,callbacks=[callback])","cc7e69bc":"plt.plot(his.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['loss'], loc='upper right')\nplt.show()","7247b624":"actual_prices = test_df['Close'].values\ntotal_dataset = pd.concat((train_df['Close'], test_df['Close']), axis=0)\n\nmodel_inputs = total_dataset[len(total_dataset)-len(test_df)-prediction_days:].values\nmodel_inputs = model_inputs.reshape(-1,1)\nmodel_inputs = scaler.transform(model_inputs)","4e626851":"x_test = []\nfor x in range(prediction_days,len(model_inputs)):\n    x_test.append(model_inputs[x-prediction_days:x,0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))\n\npredicted_prices = model.predict(x_test)\npredicted_prices = scaler.inverse_transform(predicted_prices)","ae53c077":"plt.plot(actual_prices, color='red', label=f\"Actual price\")\nplt.plot(predicted_prices, color= 'blue', label=f\"Predicted 5-days-after price\")\nplt.title(f\"google Stock\")\nplt.xlabel(\"Days in test period\")\nplt.ylabel(f\"Price\")\nplt.legend()\nplt.show()","69116fd1":"test_df['predict']=predicted_prices\ntest_df[[\"Date\",\"Close\",\"predict\"]]","ba82e0b0":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=train_df['Date'],y=train_df['Close'],name=\"Train Actual\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['Close'],name=\"Test Actual\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['predict'],name=\"Predicted 5-days after price\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=900,height=500,title_text=\"Zoom\")\nfig.update_xaxes(title_text=\"year\")\nfig.update_yaxes(title_text=\"prices\",secondary_y=False)\nfig.show()","733c39cd":"df = pd.read_csv('..\/input\/google-stock-data\/GOOG.csv')\n#transform datetime\ndf['Date'] =  pd.to_datetime(df['Date'], format = '%Y-%m-%d')","f279966d":"#indexing date\ndf = df.set_index('Date')\ndf.index","119da9bb":"#visualize of each atrribute\ndf.plot(subplots = True, figsize = (10,12))\nplt.title('Google Stock Attributes')\nplt.show()","8d414271":"#check stock from 2015 - 2021\ndf['2015':'2021'].plot(subplots = True, figsize = (10,12))\nplt.title('Google Stock Attributes')\nplt.show()","2de09c0d":"#check moving average\ndf['MA for 20 days'] = df['Open'].rolling(20).mean()\ndf['MA for 50 days'] = df['Open'].rolling(50).mean()\n\n#visualize moving average\ndf.truncate(before = '2019-01-01', after = '2021-01-01')[['Adj Close','MA for 20 days','MA for 50 days']].plot(subplots = False, figsize = (12,5))","0a62d575":"#check daily return\ndf['Daily Return'] = df['Adj Close'].pct_change()\nresult = df.sort_values(by = ['Daily Return'], ascending = False)\nresult.head()","dc1faeaa":"#cleaning data\nresult.dropna(inplace = True)\nresult.head()","f49dca44":"x = df['Open'].resample('MS').mean()\nx.head()","b5c8e5b1":"#check open price on 2019\nx['2019':]","c975a8dd":"#visualize time series of open price\nx.plot(figsize = (10,6))\nplt.title(\"Open Price\")\nplt.show()","a2b86cbe":"#build model\nrcParams['figure.figsize'] = 10,6\ndecomposition = sm.tsa.seasonal_decompose(x, model = 'additive')\nfig = decomposition.plot()\nplt.show()","3f4e06a2":"from pandas.plotting import autocorrelation_plot\n#visualize autocorrelation\nplt.rcParams.update({'figure.figsize':(10,6), 'figure.dpi':120})\nautocorrelation_plot(x.tolist())","a9014a0b":"import itertools\n\n#check parameter in model\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","9dae052c":"#selection of parameter\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            model = sm.tsa.statespace.SARIMAX(x, order = param, seasonal_order = param_seasonal, enforce_stationarity = False,\n                                            enforce_invertibility = False)\n            results = model.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n                continue","8c73b470":"#fitting model\nmodel = sm.tsa.statespace.SARIMAX(x, order = (1, 1, 1), seasonal_order = (1, 1, 0, 12), enforce_stationarity = False,\n                                enforce_invertibility = False)\nresult = model.fit()\nprint(results.summary().tables[1])","f1b018f0":"#visualize of fitting model\nresult.plot_diagnostics(figsize = (15, 11))\nplt.show()","fabce1fd":"#prediction of open price\ny_pred = result.get_prediction(start = pd.to_datetime('2019-01-01'), dynamic = False)\npred_ci = y_pred.conf_int()\nprint(pred_ci)","4204bc81":"#visualize prediction of open price\nax = x['2019':].plot(label = 'Observed')\ny_pred.predicted_mean.plot(ax = ax, label = 'One-Step Ahead Forecast', alpha = .7, figsize = (10, 6))\nax.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color = 'k', alpha = .2)\nplt.title(\"Prediction of Open Price\")\nax.set_xlabel('Date')\nax.set_ylabel('Open Price')\nplt.legend()\nplt.show()","7a44bc3a":"#prediction of forecast\ny_forecasted = y_pred.predicted_mean\ny_truth = x['2019-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))","8514971d":"#visualize prediction of forecast\npred_uc = results.get_forecast(steps = 100)\npred_ci = pred_uc.conf_int()\nax = x.plot(label = 'Observed', figsize = (10,6))\npred_uc.predicted_mean.plot(ax = ax, label = 'Forecast')\nax.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color = 'k', alpha = .25)\nplt.title(\"Forecast of Open Price\")\nax.set_xlabel('Date')\nax.set_ylabel('Open Price')\nplt.legend()\nplt.show()","34b3ebe7":"from statsmodels.tsa.stattools import adfuller, kpss\n# ADF Test\nresult = adfuller(x, autolag = 'AIC')\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')\n\n# KPSS Test\nresult = kpss(x, regression = 'c')\nprint('\\nKPSS Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nfor key, value in result[3].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')","8177c152":"# ARIMA Model\n"}}