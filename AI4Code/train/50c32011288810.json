{"cell_type":{"ba7de972":"code","a27b3eb7":"code","bf47ef2f":"code","4dd4009a":"code","ae6e6623":"code","13fee2eb":"code","09edbd79":"code","e33e8bef":"code","10387d59":"code","b9657d04":"code","c6fa3823":"code","0a78a870":"code","3a6d62a5":"code","9229d3b4":"code","224ce42a":"code","b0570b36":"code","9277d755":"markdown","5199edee":"markdown","cca42029":"markdown","a3bf0c3f":"markdown"},"source":{"ba7de972":"!pip install imutils","a27b3eb7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport random\nimport imutils\nimport tensorflow as tf\nfrom keras.preprocessing.image import img_to_array,load_img\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\n\nimport os","bf47ef2f":"img_folder = \"\/kaggle\/input\/object-detection-bike-dataset\/images\/images\/\"","4dd4009a":"img_location = []\nimg_names = []\nfor dirname, _, filenames in os.walk(img_folder):\n    for filename in filenames:\n        img_location.append(os.path.join(dirname, filename))\n        img_names.append(filename)","ae6e6623":"annotations = pd.read_csv(\"\/kaggle\/input\/object-detection-bike-dataset\/annotations.csv\")","13fee2eb":"annotations.head()","09edbd79":"# Loading images and resclaing them to 256*256 pixels\n\nimg_h, img_w = 256, 256\ndata, target, img_name = [],[], []\n\nfor index,rows in annotations.iterrows():\n    name,start_x,start_y,end_x,end_y=rows[\"image_name\"],rows[\"x1\"],rows[\"y1\"],rows[\"x2\"],rows[\"y2\"]\n    \n    img_name.append(name)\n    \n    image_path=img_folder+name\n    image=cv2.imread(image_path)\n    h,w=image.shape[:2]\n    \n    start_x \/= w\n    end_x \/= w\n    start_y \/= h\n    end_y \/= h\n    \n    image = load_img(image_path, target_size = (img_h, img_w))\n    image = img_to_array(image)\n    \n    data.append(image)\n    target.append((start_x,start_y,end_x,end_y))","e33e8bef":"# Normalization of pixel values\ndata=np.array(data,dtype=\"float32\")\/255.0\ntarget=np.array(target,dtype=\"float32\")\n","10387d59":"# Shape of data and target\ndata.shape, target.shape","b9657d04":"# Splitting into train and test data\ntrain_img,test_img,y_train,y_test=train_test_split(data,target,test_size=0.15,random_state=20)","c6fa3823":"model = Sequential([\n    layers.Conv2D(32,3, padding = \"same\", activation = \"relu\", input_shape = (img_h, img_w, 3)),\n    layers.Conv2D(32,3, padding = \"same\", activation = \"relu\"),\n    layers.MaxPooling2D(),\n    layers.Conv2D(64,3, padding = \"same\", activation = \"relu\"),\n    layers.Conv2D(64,3, padding = \"same\", activation = \"relu\"),\n    layers.MaxPooling2D(),\n    layers.Conv2D(128,3, padding = \"same\", activation = \"relu\"),\n    layers.Conv2D(128,3, padding = \"same\", activation = \"relu\"),\n    layers.MaxPooling2D(),\n    layers.Flatten(),\n    layers.Dense(128,activation = \"relu\"),\n    layers.Dense(64,activation = \"relu\"),\n    layers.Dense(32,activation = \"relu\"),\n    layers.Dense(4,activation = \"sigmoid\")\n])\n","0a78a870":"model.compile(loss=\"mse\",optimizer=\"adam\")\n","3a6d62a5":"model.summary()","9229d3b4":"epochs = 15\nhistory = model.fit(train_img,y_train,validation_data=(test_img,y_test),batch_size=16,epochs=epochs)\n","224ce42a":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(10, 4))\n\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","b0570b36":"val_image_path=img_folder+random.choice(img_name)\nval_image=load_img(val_image_path,target_size=(img_h,img_w))\nval_image=np.array(val_image)\/255\nval_image=np.expand_dims(val_image,axis=0)\n\nprediction=model.predict(val_image)[0]\n(startX,startY,endX,endY)=prediction\n\nval_img=cv2.imread(val_image_path)\nval_img=imutils.resize(val_img,width=600)\n(h,w)=val_img.shape[:2]\n\nstartX=int(startX*w)\nstartY=int(startY*h)\nendX=int(endX*w)\nendY=int(endY*h)\n\ncv2.rectangle(val_img,(startX,startY),(endX,endY),(255,0,0),2)\nplt.imshow(val_img)\nplt.axis(\"off\")","9277d755":"## Validating on any random image","5199edee":"## Importing annotations and image data","cca42029":"## Apply Model","a3bf0c3f":"## Impoting useful libraries"}}