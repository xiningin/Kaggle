{"cell_type":{"3ae8ec75":"code","d9556fde":"code","9771bc81":"code","13836060":"code","ee6daaac":"code","8d711180":"code","58aa5bce":"code","d4011dfd":"code","13020bef":"code","0a2c9399":"code","1e1c5290":"code","20649e52":"code","ae9bcff4":"code","7b5523d9":"code","7df91855":"code","713ce22f":"code","06d7cac9":"code","e37dc65b":"markdown","4c137b40":"markdown","49ee9f82":"markdown","b68c0c99":"markdown","8a23e8fa":"markdown"},"source":{"3ae8ec75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d9556fde":"data=pd.read_csv(\"..\/input\/tourism_dataset.csv\")","9771bc81":"data.info()","13836060":"data.head()","ee6daaac":"data.tail()","8d711180":"x = data['country']\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color = 'white',\n                          width = 512,\n                          height = 384\n                         ).generate(\" \".join(x))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","58aa5bce":"sns.barplot(x = data.country, y = data.year_2000)\nplt.xlabel('countries')\nplt.xticks(rotation = 45)\nplt.ylabel('visitors(millions)')\nplt.title('Visitors of the countries in 2000', color = 'blue', fontsize = 20)\nplt.show()","d4011dfd":"sns.barplot(x = data.country, y = data.year_2016)\nplt.xlabel('countries')\nplt.xticks(rotation = 45)\nplt.ylabel('visitors(millions)')\nplt.title('Visitors of the countries in 2016', color = 'blue', fontsize = 20)\nplt.show()","13020bef":"labels = data.country\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown', 'orange', 'purple', 'cyan', 'pink']\nexplode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nsizes = data.year_2016\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.title(\"Ratio of Most Visited Countries in 2016\", color = 'blue', fontsize = 20)\nplt.show()","0a2c9399":"x = sns.stripplot(x = \"country\", y = \"year_2016\", data = data, jitter = True)\nplt.xticks(rotation = 45)\nplt.show()","1e1c5290":"data1 = dict(type = 'choropleth', \n           locations = data.country,\n           locationmode = 'country names',\n           z = data['year_2016'],\n           colorbar = {'title':'Visitors (millions)'})\nlayout = dict(title = 'Most Visited Countries', \n             geo = dict(showframe = False, \n                       projection = {'type': 'natural earth'}))\nchoromap = go.Figure(data = [data1], layout = layout)\niplot(choromap)","20649e52":"plt.scatter(data.year_2000,data.year_2016) \nplt.xlabel(\"2000 visitors (millions)\")  \nplt.ylabel(\"2016 visitors (millions)\")","ae9bcff4":"# linear regression\n# sklearn library\n\nfrom sklearn.linear_model import LinearRegression\nlinear_reg=LinearRegression()\n\nx=data.year_2000.values \ny=data.year_2016.values\n\nx=data.year_2000.values.reshape(-1,1)\ny=data.year_2016.values.reshape(-1,1)\n\nlinear_reg.fit (x,y)","7b5523d9":"array=np.array([x]).reshape(-1,1) \nplt.scatter(x,y)\ny_head=linear_reg.predict(array) \nplt.plot(array,y_head,color=\"red\")  ","7df91855":"lr = LinearRegression()\n\nlr.fit(x,y)\n\n#%% predict\ny_head = lr.predict(x)\n\nplt.scatter(x,y)\nplt.plot(x,y_head,color=\"red\",label =\"linear\")\n\nfrom sklearn.preprocessing import PolynomialFeatures\npolynomial_regression = PolynomialFeatures(degree = 2)\n\nx_polynomial = polynomial_regression.fit_transform(x)\nlinear_reg2 = LinearRegression()\nlinear_reg2.fit(x_polynomial,y)\ny_head2 = linear_reg2.predict(x_polynomial)\n\nplt.plot(x,y_head2,color= \"green\",label = \"poly\")\nplt.legend()\n\npolynomial_regression2 = PolynomialFeatures(degree = 4)\nx_polynomial = polynomial_regression2.fit_transform(x)\n\nlinear_reg3 = LinearRegression()\nlinear_reg3.fit(x_polynomial,y)\n\ny_head3 = linear_reg3.predict(x_polynomial)\n\nplt.plot(x,y_head3,color= \"black\",label = \"poly\")\nplt.xlabel(\"2000 visitors (millions)\")\nplt.ylabel(\"2016 visitors (millions)\")\nplt.legend()","713ce22f":"from sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()   # random sate = 0\ntree_reg.fit(x,y)\n\nx_ = np.arange(min(x),max(x),0.01).reshape(-1,1)\ny_head = tree_reg.predict(x_)\n# %% visualize\nplt.scatter(x,y,color=\"red\")\nplt.plot(x_,y_head,color = \"green\")\nplt.xlabel(\"2000 visitors (millions)\")\nplt.ylabel(\"2016 visitors (millions)\")\nplt.show()","06d7cac9":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 100, random_state = 42)\nrf.fit(x,y.ravel())\nx_ = np.arange(min(x),max(x),0.01).reshape(-1,1)\ny_head = rf.predict(x_)\n\n# visualize\nplt.scatter(x,y.ravel(),color=\"red\")\nplt.plot(x_,y_head,color=\"green\")\nplt.xlabel(\"2000 visitors (millions)\")\nplt.ylabel(\"2016 visitors (millions)\")\nplt.show()","e37dc65b":"**RANDOM FOREST REGRESSION**","4c137b40":"**Visualization and Regression Analyze of Most Visited Countries in 2000 and 2016**\n\n\nThis dataset includes most visited 10 countries in 2000 and 2016.\n\n\nSource: World Tourism Organization  (UNWTO)","49ee9f82":"**DECISION TREE REGRESSION**","b68c0c99":"**POLYNOMIAL REGRESSION**","8a23e8fa":"**LINEAR REGRESSION**"}}