{"cell_type":{"0945e28b":"code","40d2d972":"code","988b7b9f":"code","457ea5dd":"code","2b0cb320":"code","ab1178de":"code","638e697c":"code","c6fb3dd9":"code","d3d0454a":"code","ca04b1b3":"code","9eaaad5c":"code","e9bb1fd4":"code","eb33595e":"code","a0953c5c":"code","06980f6e":"code","9058a5f1":"code","446bd15a":"code","651dc82c":"code","6aa0bcf8":"code","8e6c3f46":"code","2ee76d10":"code","02488db2":"code","11885d6b":"code","4f8a3f31":"code","7149254e":"code","4e03ae4b":"code","88ec51a2":"code","e8b580b6":"code","71ecfe24":"code","08455dac":"code","9684421f":"code","1043b048":"code","9bed613d":"code","68fc685d":"code","a65d37b0":"code","63cb4c70":"code","d023d992":"code","d1fc3c93":"code","611d6d32":"code","4fb7e16f":"code","f8689eb4":"code","59e2bf6b":"code","4f5ec7b0":"code","cf100d01":"code","1feb4b1d":"code","e3f9543f":"code","7ffd965a":"code","b5b7a9d1":"code","1fda7d2d":"code","5ea1468b":"code","0ab2998f":"code","421c8b9b":"code","33288031":"code","3d24c0c8":"markdown","51caec2f":"markdown","b9a9d830":"markdown","8971c1f4":"markdown","343f8c39":"markdown","74bd8890":"markdown","be36cd0d":"markdown","88f7147c":"markdown","28bf2829":"markdown","557ee06b":"markdown"},"source":{"0945e28b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom ast import literal_eval\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","40d2d972":"movies = pd.read_csv('..\/input\/movies_metadata.csv', low_memory=False)\nratings = pd.read_csv('..\/input\/ratings.csv')\ncredits = pd.read_csv('..\/input\/credits.csv')\nkeywords = pd.read_csv('..\/input\/keywords.csv')\nlinks = pd.read_csv('..\/input\/links.csv')","988b7b9f":"movies.head()","457ea5dd":"genre_frequencies = [y for x in movies.genres for y in x]","2b0cb320":"from collections import Counter\ngenre_count = dict(Counter(genre_frequencies))","ab1178de":"plt.figure(figsize=(30,15))\nsns.barplot(x=list(genre_count.keys()),y=list(genre_count.values()))\nplt.title(\"Genre Type Histogram\", fontsize=30)\nplt.xticks(fontsize=15)\nplt.xlabel(\"Genre Types\",fontsize=25)\nplt.yticks(fontsize=15)","638e697c":"plt.figure(figsize=(30,15))\nsns.distplot(movies.runtime[movies.runtime<420],color='c')\nplt.yticks(fontsize=15)\nplt.xticks(fontsize=15)\nplt.xlabel('Running Time',fontsize=25)\nplt.ylabel('Frequencies',fontsize=25)\nplt.title(\"Running Time histogram\", fontsize=40)","c6fb3dd9":"plt.figure(figsize=(30,15))\nsns.distplot(movies.runtime[movies.runtime<420],color='orange',bins=100)\nplt.yticks(fontsize=15)\nplt.xticks(fontsize=15)\nplt.xlabel('Votes counts',fontsize=25)\nplt.ylabel('Frequencies',fontsize=25)\nplt.title(\"Vote counts Histogram\", fontsize=40)","d3d0454a":"plt.figure(figsize=(30,15))\nsns.distplot(list(movies.runtime[movies.runtime<420]),color='c',bins=100)\nplt.yticks(fontsize=15)\nplt.xticks(fontsize=15)\nplt.xlabel('Votes Average Score',fontsize=25)\nplt.ylabel('Frequencies',fontsize=25)\nplt.title(\"Vote Average Score Histogram\", fontsize=40)","ca04b1b3":"ratings.userId.value_counts().head()","9eaaad5c":"tfid = TfidfVectorizer(stop_words='english')\nmovies.overview = movies.overview.fillna('')\n\n### since making cos_sim matrix taking too long, temporaily used only 10000 rows\ntfid_matrix = tfid.fit_transform(movies.overview.iloc[1:10000])","e9bb1fd4":"tfid_matrix.shape","eb33595e":"cos_sim = cosine_similarity(tfid_matrix,tfid_matrix)","a0953c5c":"pd.DataFrame(cos_sim).head(10)","06980f6e":"indices = pd.Series(movies.index, index=movies['title']).drop_duplicates()\nindices.head()","9058a5f1":"idx = indices['Jumanji']\nsim_movies = sorted(list(enumerate(cos_sim[idx])), key= lambda x: x[1], reverse=True)\nsim_movies = sim_movies[1:11]\nsim_num = [x[0] for x in sim_movies]\nsim_value = [x[1] for x in sim_movies]\nresult = indices.iloc[sim_num]","446bd15a":"### making recommend engine based on cosine similarities\n\ndef recommend_engine(title,cos_sim = cos_sim):\n    idx = indices[title]\n    sim_movies = sorted(list(enumerate(cos_sim[idx])), key= lambda x: x[1], reverse=True)\n    sim_movies = sim_movies[1:11]\n    sim_num = [x[0] for x in sim_movies]\n    sim_value = [x[1] for x in sim_movies]\n    result = indices.iloc[sim_num]\n    result[0:10] = sim_value\n    return(result)\n\n### cosine sim value are represented with movie name","651dc82c":"#### what is the recommended movies from Jumanji?\n#### Most similar movies in terms of cosine similarities\nrecommend_engine('Jumanji')","6aa0bcf8":"movies.columns","8e6c3f46":"credits.columns","2ee76d10":"### merge movies, keywords, credits data into movies sole dataset\n\nmovies = movies.drop([19730, 29503, 35587])\n\nkeywords['id'] = keywords['id'].astype('int')\ncredits['id'] = credits['id'].astype('int')\nmovies['id'] = movies['id'].astype('int')\n\nmovies = movies.merge(keywords, on='id')\nmovies = movies.merge(credits, on='id')","02488db2":"### strinfied features are splited into list\n\nfeatures = ['genres','keywords','cast','crew']\n\nfor feature in features:\n    movies[feature] = movies[feature].apply(literal_eval)","11885d6b":"### who is director? finding director function\n\ndef get_director(data):\n    for x in data:\n        if x['job'] == 'Director':\n            return x['name']\n    return np.nan","4f8a3f31":"### making director columns\n\nmovies['director'] = movies.crew.apply(get_director)","7149254e":"### making get_list function\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    return []","4e03ae4b":"movies.cast = movies.cast.apply(get_list)\nmovies.genres = movies.genres.apply(get_list)\nmovies.keywords = movies.keywords.apply(get_list)","88ec51a2":"### delete space within strings and change into lowercase \ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''\n        \n### since our movies dataset is consiste of 3 columns of list and 1 string(director) column, \n### we divide function into two set.","e8b580b6":"features = ['cast','keywords','director','genres']","71ecfe24":"for feature in features:\n    movies[feature] = movies[feature].apply(clean_data)","08455dac":"movies[features].head(10)","9684421f":"def create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' '","1043b048":"movies['soup'] = movies.apply(create_soup, axis=1)","9bed613d":"from sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(movies['soup'])","68fc685d":"from sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","a65d37b0":"movies = movies.reset_index()\nindices = pd.Series(movies.index, index=movies['title'])","63cb4c70":"tmp = recommend_engine('The Godfather',cosine_sim2).index","d023d992":"list(tmp)","d1fc3c93":"def rank_plot(movie_name, cos_sim=cos_sim):\n    tmp = recommend_engine(movie_name,cos_sim)\n    tmp2 = recommend_engine(movie_name,cosine_sim2)\n    plt.figure(figsize=(10,5))\n    sns.barplot(x = tmp[0:10], y=tmp.index)\n    plt.title(\"Recommended Movies from  \" + str.upper(movie_name) + \" using cosine_sim\", fontdict= {'fontsize' :20})\n    plt.xlabel(\"Cosine Similarities\")\n    plt.show()\n      \n    plt.figure(figsize=(10,5))\n    sns.barplot(x = tmp2[0:10], y=tmp2.index)\n    plt.title(\"Recommended Movies from  \" + str.upper(movie_name) + \" using cosine_sim2\", fontdict= {'fontsize' :20})\n    plt.xlabel(\"Cosine Similarities\")\n    \n    plt.show()","611d6d32":"rank_plot(\"The Godfather\")\n\nrank_plot(\"Jumanji\")","4fb7e16f":"### importing rating dataset\n\nrating = pd.read_csv(\"..\/input\/ratings_small.csv\")","f8689eb4":"### Checking data head\n\nrating.head()","59e2bf6b":"### Checking Data shape\n\nrating.shape","4f5ec7b0":"### prepare Df which will record scores of movies\n\ndf = pd.DataFrame( index = rating.userId.unique() )","cf100d01":"### Making df recording score of each user's record into df\n\nfor i in range(0,20000):\n    ID = rating.loc[i,:].userId\n    movieID = rating.loc[i,:].movieId\n    movieScore = rating.loc[i,:].rating\n\n    if movieID in list(df.columns):\n        df.loc[ID, movieID] = movieScore\n    else:\n        df[movieID] = 0\n        df.loc[ID,movieID] = movieScore","1feb4b1d":"### shape of df (number of rows: number of users, number of columns : number of movies )\n\ndf.shape","e3f9543f":"### Checking data head\n\ndf.head()","7ffd965a":"### making cosine similarity matrix between users to users (671 by 671 in this case)\n\nFiltering_cosim = cosine_similarity(df,df)","b5b7a9d1":"most_sim_user = sorted(list(enumerate(Filtering_cosim[100])), key=lambda x:x[1], reverse=True)[1]","1fda7d2d":"most_sim_users = sorted(list(enumerate(Filtering_cosim[8])), key=lambda x: x[1], reverse=True)\nmost_sim_users = most_sim_users[1:11]\nsim_users = [x[0] for x in most_sim_users]\nprint(sim_users)","5ea1468b":"candidates_movies = df.loc[sim_users,:]","0ab2998f":"def UBCF(user_num):\n    ### finding most similar users among matrix\n\n    most_sim_users = sorted(list(enumerate(Filtering_cosim[user_num])), key=lambda x: x[1], reverse=True)\n    most_sim_users = most_sim_users[1:11]\n\n    ### user index and their similairity values \n\n    sim_users = [x[0] for x in most_sim_users]\n    sim_values = [x[1] for x in most_sim_users]\n\n    ### among users having most similar preferences, finding movies having highest average score\n    ### however except the movie that original user didn't see\n\n    candidates_movies = df.loc[sim_users,:]\n\n    candidates_movies.mean(axis=0).head()\n\n    mean_score = pd.Series(candidates_movies.mean(axis=0))\n    mean_score = mean_score.sort_values(axis=0, ascending=False)\n    \n    recom_mov = list(mean_score.iloc[0:10].keys())\n    for i in recom_mov:\n        recom_mov_title = movies.loc[movies.id.isin(recom_mov),:].title\n        recom_mov_title\n    return(recom_mov_title)","421c8b9b":"UBCF(400)","33288031":"UBCF(1)","3d24c0c8":"# <a id=\"3\"><\/a><br> Contents based Recommendation Engine","51caec2f":"**Histrgram for Genre distribution**","b9a9d830":"# <a id=\"2\"><\/a><br> Data Preprocessing : making Cosine Similarities matrix and Contents based Recommendation Engine","8971c1f4":"# Contents\n1. [Data Importing & Exploring](#1)\n2. [Data Preprocessing : making Cosine Similarities matrix](#2)\n3. [Contents based Recommendation Engine](#3)\n4. [User-based Collaborative Filtering Engine](#4)","343f8c39":"# Things to be improved.....\n I didn't composite cosine matrix from all of movies since huge data frame triggers RAM shortage in this kernel..\n1.   User based Collaborative Engine is made so that recommend 10 movies for each users, but data memoery shorage blocking this in kernel.\n2.  within same context,  cosine similarity matrix within a few users do not provide useful discrimination among users when it comes to efficiencies of engine.","74bd8890":"# <a id=\"1\"><\/a><br> Data Importing & Exploring ","be36cd0d":"**Cosine Similarities Matrix**","88f7147c":"# User-based Collaborative Filtering Engine","28bf2829":"https:\/\/www.google.com\/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjE-eeOkvLdAhUCZt4KHfRrCewQjRx6BAgBEAU&url=http%3A%2F%2Ftechinpink.com%2F2017%2F08%2F04%2Fimplementing-similarity-measures-cosine-similarity-versus-jaccard-similarity%2F&psig=AOvVaw1Jdc5prhjic09utk_5qqft&ust=1538926499074204","557ee06b":"# Which movies are recommended to each Users?\n\n"}}