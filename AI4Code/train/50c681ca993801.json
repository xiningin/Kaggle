{"cell_type":{"64657e12":"code","4c7801fe":"code","382bffde":"code","abc6ddce":"code","5c694c03":"code","1a9061e9":"code","e46d62dd":"code","284b9512":"code","a3c36123":"code","fc737e0a":"code","bc1f8d4d":"code","d226569d":"code","3ca23fd0":"code","d2dd77b3":"code","30950dce":"code","e65f96c5":"code","cceb9a9c":"code","a5e2952e":"code","db73bf37":"code","eedc92eb":"code","4a3c3482":"code","a5302852":"code","d5ae7c08":"code","b26afdf4":"code","3d5daacf":"code","7cab6c32":"code","b75ab4ed":"code","4db463b2":"code","b85d3935":"code","ce552557":"code","39294913":"code","d5c4c295":"code","b41a6e30":"markdown","f5a97072":"markdown","6e69872e":"markdown","766ea515":"markdown","f84ebe15":"markdown","9107d581":"markdown","bf5b6114":"markdown","a8ac8a88":"markdown"},"source":{"64657e12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c7801fe":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","382bffde":"df.head()","abc6ddce":"df.info()","5c694c03":"import matplotlib.pyplot as plt\nimport seaborn as sns","1a9061e9":"sns.pairplot(data = df, hue = 'Outcome', palette = \"rainbow\")","e46d62dd":"sns.barplot(x = 'Outcome',y = 'Pregnancies', data=df )","284b9512":"df.info()","a3c36123":"sns.lmplot(x = 'Insulin', y = 'Glucose', data = df, hue = 'Outcome')","fc737e0a":"df.BMI.plot(kind = 'hist', bins= 30, color = 'red')","bc1f8d4d":"df.BloodPressure.describe()","d226569d":"sns.boxplot(x = 'Outcome', y = 'Age', data = df)","3ca23fd0":"sns.boxplot(x = 'Outcome', y = 'BMI', data = df)","d2dd77b3":"sns.lmplot(x = 'Glucose', y = 'BMI', hue = 'Outcome', data = df)","30950dce":"sns.countplot(x = 'Pregnancies',data = df)","e65f96c5":"sns.boxplot(x = 'Outcome', y = 'DiabetesPedigreeFunction', data = df)","cceb9a9c":"corr = df.corr()\nsns.heatmap(corr)","a5e2952e":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","db73bf37":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","eedc92eb":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4a3c3482":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","a5302852":"y_pred = classifier.predict(X_test)","d5ae7c08":"from sklearn.metrics import confusion_matrix, accuracy_score\nc_matrix = confusion_matrix(y_test, y_pred)\nprint(c_matrix)\naccuracy_score(y_test, y_pred)","b26afdf4":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","3d5daacf":"y_pred = classifier.predict(X_test)","7cab6c32":"c_matrix = confusion_matrix(y_test, y_pred)\nprint(c_matrix)\naccuracy_score(y_test, y_pred)","b75ab4ed":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","4db463b2":"y_pred = classifier.predict(X_test)","b85d3935":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","ce552557":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","39294913":"y_pred = classifier.predict(X_test)","d5c4c295":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","b41a6e30":"# Feature Scaling","f5a97072":"# Splitting data into training and test set","6e69872e":"# KNN","766ea515":"# RandomForest Classifier","f84ebe15":"# Logistic Regression","9107d581":"KNN and Logistic regression model has high accuracy score","bf5b6114":"# Data Visualization","a8ac8a88":"# Kernel SVM Model"}}