{"cell_type":{"674c493d":"code","cf8c69da":"code","f63a6d7c":"code","b5633ef2":"code","94514e4c":"code","ea05891d":"code","ca33f220":"code","5bdbdd42":"code","7f538d8e":"code","cf707885":"code","593abfd6":"code","d638adc3":"code","5c195282":"code","74bc14a1":"code","f87643c0":"code","d600d17b":"code","16b53144":"code","0281b134":"code","61c3631d":"code","862d74e8":"code","a73c6cb5":"code","9e365505":"code","e67956c6":"code","294ccf59":"code","b1fde1f6":"code","97895f3a":"code","9ab9c3d6":"code","fda7a3ce":"code","babc0c34":"code","7567d021":"code","f090334f":"code","25ee260f":"code","b765785f":"code","2b6aa53d":"code","33f913f4":"code","d63ff829":"code","dc776961":"code","49ad6be9":"code","6d134302":"code","dd688189":"code","71137d44":"code","2c288341":"code","6cb22994":"code","6b09251e":"code","94dd52d7":"code","0268df3b":"code","04d9a253":"code","cf466808":"code","ed802004":"code","de0c9ce1":"code","4f431723":"code","55003ab6":"code","cb5e5298":"code","c0184edf":"code","f185b529":"code","7b213efd":"code","8e2cb0e0":"code","2ea0f313":"code","8bfecea3":"code","20eca3a4":"code","1605447b":"markdown","d5805a2b":"markdown","0b72296b":"markdown","e3d06bfd":"markdown","c2f70369":"markdown","f09ee057":"markdown","40e9fd62":"markdown","f528f836":"markdown","77494463":"markdown","53453651":"markdown","afa785b9":"markdown","005a2300":"markdown","e4152edb":"markdown","23e27143":"markdown","667315c2":"markdown","a6b4a1bb":"markdown","77917794":"markdown","3545e237":"markdown","16394f12":"markdown","041bbf25":"markdown","6ae2a2f6":"markdown","586143f9":"markdown","9f096347":"markdown","33e68784":"markdown","9a371a32":"markdown","53f90db2":"markdown","fcc7053d":"markdown","ff419e80":"markdown","7f923fb4":"markdown","d24e5e9e":"markdown","fa7a0b95":"markdown","9aba2acc":"markdown","8396cfcc":"markdown","3872106e":"markdown"},"source":{"674c493d":"#Load Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns #importing seaborn module \nimport warnings\nfrom collections import Counter\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler \nfrom sklearn import metrics\nwarnings.filterwarnings('ignore')  #this will ignore the warnings.it wont display warnings in notebook\nplt.style.use('ggplot')\nplt.rcParams['figure.figsize']=[6,3]\nplt.rcParams['figure.dpi']=80","cf8c69da":"#Load train and test files \ndata = pd.read_csv('..\/input\/black-friday\/train.csv')\ntest = pd.read_csv('..\/input\/black-friday\/test.csv')","f63a6d7c":"#First look at train\ndata.sample(5)","b5633ef2":"#First look at test\ntest.sample(5)","94514e4c":"#Shape of train and test\nprint('There are {} rows and {} columns in train'.format(data.shape[0],data.shape[1]))\nprint('There are {} rows and {} columns in train'.format(test.shape[0],test.shape[1]))","ea05891d":"#Check Missing values in train\ndata.isna().sum()","ca33f220":"#Check Missing values in test\ntest.isna().sum()","5bdbdd42":"#Check data types in train\ndata.info()","7f538d8e":"#Check data types in test\ntest.info()","cf707885":"#Lets describe train\ndata.describe()","593abfd6":"#Lets describe test\ntest.describe()","d638adc3":"#Lets concatenate train & test\ndf=pd.concat([data,test])\ndf.shape ","5c195282":"#Explore numerical variable - Stay_In_Current_City_Years\ndf.Stay_In_Current_City_Years.value_counts()\n#Total 5 unique vaues","74bc14a1":"#Lets remove '+' symbol and convert to object\ndf['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].apply(lambda x: x.replace('+', '')\n                                if isinstance(x, str) else x).astype(int)\ndf['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].astype('object')\ndf.Stay_In_Current_City_Years.value_counts()","f87643c0":"#Explore categorical variables - Gender & Age\ncat_col_1 = [\n 'Gender',\n 'Age',\n ]\ncount = 1\nfor cols in cat_col_1:\n    plt.subplot(2, 2, count)\n    df[cols].value_counts().plot.pie(shadow=True,autopct='%1.1f%%',radius=1.5,textprops={'fontsize': 10} )\n    count +=1\n    plt.subplot(2, 2, count)\n    plt.tight_layout()\n    sns.countplot(cols, data=df)\n    fig=plt.gcf()\n    fig.set_size_inches(12,7)\n    plt.xticks(fontsize=10)\n    plt.yticks(fontsize=3)\n    plt.xticks(rotation=30)\n    count+=1","d600d17b":"#Explore categorical variables - Marital_Status, City_Category & Stay_In_Current_City_Years\ncat_col_2 = [\n 'Marital_Status',\n 'City_Category',\n 'Stay_In_Current_City_Years',\n ]\ncount = 1\nfor cols in cat_col_2:\n    plt.subplot(3, 2, count)\n    df[cols].value_counts().plot.pie(shadow=True,autopct='%1.1f%%',radius=1.2,textprops={'fontsize': 10} )\n    count +=1\n    plt.subplot(3, 2, count)\n    plt.tight_layout()\n    sns.countplot(cols, data=df)\n    fig=plt.gcf()\n    fig.set_size_inches(10,7)\n    plt.xticks(fontsize=8)\n    plt.yticks(fontsize=3)\n    plt.xticks(rotation=30)\n    count+=1 ","16b53144":"#Explore categorical variable - Occupation\ncat_col_3 = ['Occupation',]\ncount = 1\nfor cols in cat_col_3:\n    plt.subplot(1, 2, count)\n    df[cols].value_counts().plot.pie(shadow=True,autopct='%1.1f%%',radius=1.4,textprops={'fontsize': 9} )\n    count +=1\n    plt.subplot(1, 2, count)\n    plt.tight_layout()\n    #df.Occupation.value_counts().sort_values().plot(kind = 'bar')\n    sns.countplot(x=\"Occupation\", data=df,facecolor=(0, 0, 0, 0), linewidth=5, edgecolor=sns.color_palette(\"dark\", 5))\n    fig=plt.gcf()\n    fig.set_size_inches(12,7)\n    plt.xticks(fontsize=10)\n    plt.yticks(fontsize=3)\n    plt.xticks(rotation=30)\n    count+=1","0281b134":"#Explore categorical variable - Product_Category_1\ncat_col_4 = ['Product_Category_1',]\ncount = 1\nfor cols in cat_col_4:\n    plt.subplot(1, 2, count)\n    df[cols].value_counts().plot.pie(shadow=True,autopct='%1.1f%%',radius=1.9,textprops={'fontsize': 8} )\n    count +=1\n    plt.subplot(1, 2, count)\n    plt.tight_layout()\n    plt.style.use('ggplot')\n    df.Product_Category_1.value_counts().sort_values().plot(kind = 'bar')\n    fig=plt.gcf()\n    plt.title(\"Product_Category_1\", fontsize=15) \n    fig.set_size_inches(15,7)\n    plt.xticks(fontsize=10)\n    plt.yticks(fontsize=9)\n    plt.xticks(rotation=30)\n    count+=1","61c3631d":"#Explore categorical variable - Product_Category_2\ncat_col_5 = ['Product_Category_2',]\ncount = 1\nfor cols in cat_col_5:\n    plt.subplot(1, 2, count)\n    df[cols].value_counts().plot.pie(shadow=True,autopct='%1.1f%%',radius=1.9,textprops={'fontsize': 8} )\n    count +=1\n    plt.subplot(1, 2, count)\n    plt.tight_layout()\n    plt.style.use('fivethirtyeight')\n    df.Product_Category_2.value_counts().sort_values().plot(kind = 'bar')\n    fig=plt.gcf()\n    plt.title(\"Product_Category_2\", fontsize=15) \n    fig.set_size_inches(15,10)\n    plt.xticks(fontsize=8)\n    plt.yticks(fontsize=9)\n    plt.xticks(rotation=30)\n    count+=1","862d74e8":"#Explore categorical variable - Product_Category_3\ncat_col_6 = ['Product_Category_3',]\ncount = 1\nfor cols in cat_col_6:\n    plt.subplot(1, 2, count)\n    df[cols].value_counts().plot.pie(shadow=True,autopct='%1.1f%%',radius=1.9,textprops={'fontsize': 8} )\n    count +=1\n    plt.subplot(1, 2, count)\n    plt.tight_layout()\n    plt.style.use('ggplot')\n    df.Product_Category_3.value_counts().sort_values().plot(kind = 'bar')\n    fig=plt.gcf()\n    plt.title(\"Product_Category_3\", fontsize=15) \n    fig.set_size_inches(15,10)\n    plt.xticks(fontsize=8)\n    plt.yticks(fontsize=9)\n    plt.xticks(rotation=30)\n    count+=1","a73c6cb5":"#Lets explore numerical variables - User_ID , Product_ID & Purchase\n# Lets see how Purchase analysis looks like\nsns.set(style='whitegrid', palette=\"deep\", font_scale=1.1, rc={\"figure.figsize\": [8, 5]})\nsns.distplot(\n    df['Purchase'], norm_hist=False, kde=False, bins=20, hist_kws={\"alpha\": 1}\n).set(xlabel='Purchase', ylabel='Count');","9e365505":"# Lets see how User_ID analysis looks like\nsns.set(style='darkgrid', palette=\"rocket\", font_scale=1.1, rc={\"figure.figsize\": [8, 5]})\nsns.distplot(\n    df['User_ID'], norm_hist=False, kde=False, bins=10, hist_kws={\"alpha\": 1}\n).set(xlabel='User_ID', ylabel='Count');","e67956c6":"#variables - Product_ID \n#Lets emove P and convert product id to a integer\ndf['Product_ID'] = df['Product_ID'].apply(lambda x: x.replace('P', '')\n                                if isinstance(x, str) else x).astype(int)\n\ndf['Product_ID'] = df['Product_ID'].astype('int')","294ccf59":"# Lets see how Product_ID analysis looks like\nsns.set(style='darkgrid', palette=\"Set1\", font_scale=1.1, rc={\"figure.figsize\": [8, 5]})\nsns.distplot(\n    df['Product_ID'], norm_hist=False, kde=False, bins=50, hist_kws={\"alpha\": 1}\n).set(xlabel='Product_ID', ylabel='Frequency');","b1fde1f6":"#Variable - Age Vs Purchase\n#Catplot Age+Purchase\nsns.catplot(x='Age',y='Purchase',kind='point',data=df, order=['0-17', '18-25', '26-35', '36-45',  '46-50', '51-55', '55+'],)","97895f3a":"#Variable - Age Vs Purchase with hue = Gender\n#Catplot Age+Purchase\nsns.catplot(x='Age',y='Purchase',kind='point',data=df, order=['0-17', '18-25', '26-35', '36-45',  '46-50', '51-55', '55+'],hue='Gender')","9ab9c3d6":"#Catplot Age+Purchase+City_Category+Gender\nsns.catplot(x='Age',y='Purchase',kind='point',data=df,col='City_Category',hue='Gender', order=['0-17', '18-25', '26-35', '36-45',  '46-50', '51-55', '55+'])","fda7a3ce":"#Catplot Age+Purchase+Stay_In_Current_City_Years+Gender\nsns.catplot(x='Age',y='Purchase',kind='point',data=df,col='Stay_In_Current_City_Years',hue='Gender', order=['0-17', '18-25', '26-35', '36-45',  '46-50', '51-55', '55+'])","babc0c34":"#Catplot Marital_Status+Purchase\nsns.catplot(x='Marital_Status',y='Purchase',kind='point',data=df)","7567d021":"#Catplot Age+Purchase+Marital_Status\nsns.catplot(x='Age',y='Purchase',kind='point',data=df,hue='Marital_Status', order=['0-17', '18-25', '26-35', '36-45',  '46-50', '51-55', '55+'])","f090334f":"#Catplot Age+Purchase+Marital_Status+Gender\nsns.catplot(x='Age',y='Purchase',kind='point',data=df,col='Marital_Status',hue='Gender', order=['0-17', '18-25', '26-35', '36-45',  '46-50', '51-55', '55+'])","25ee260f":"# Boxplot of Age Vs Purchase in ascending order of purchase\nsorted_nb = df.groupby(['Age'])['Purchase'].median().sort_values()\nsns.boxenplot(x=df['Age'], y=df['Purchase'], order=list(sorted_nb.index))","b765785f":"# Boxplot of Age Vs Purchase in horizontal orientation across Gender\ng = sns.catplot(x=\"Purchase\", y=\"Age\", row=\"Gender\",\n                kind=\"box\", orient=\"h\", height=2.5, aspect=3,\n                data=df)\ng.set(xscale=\"log\")","2b6aa53d":"#Facetgrid for Occupation  + Purchase + City_Category  & hue = Gender\ncond_plot = sns.FacetGrid(data=df, col='Occupation', hue='Gender', col_wrap=4)\ncond_plot.map(sns.stripplot, 'City_Category', 'Purchase');","33f913f4":"#Facetgrid for Occupation  + Purchase + City_Category  & hue = Gender\ncond_plot = sns.FacetGrid(data=df, col='Occupation', hue='Gender', col_wrap=4)\ncond_plot.map(sns.scatterplot, 'Age', 'Purchase');","d63ff829":"df.sample(5)","dc776961":"'''#Impute mode into Product_Category_2 & Product_Category_3\ndf['Product_Category_2'].fillna(df['Product_Category_2'].value_counts().index[0], inplace=True)\ndf['Product_Category_3'].fillna(df['Product_Category_3'].value_counts().index[0], inplace=True)\n#df.isna().sum()'''\n\n# fill the missing data\ndf['Product_Category_2'].fillna(method='bfill', inplace=True)\ndf['Product_Category_3'].fillna(method='bfill', inplace=True)","49ad6be9":"df['Product_Category_2'].fillna(df['Product_Category_2'].value_counts().index[0], inplace=True)\ndf['Product_Category_3'].fillna(df['Product_Category_3'].value_counts().index[0], inplace=True)","6d134302":"df.isnull().sum()","dd688189":"#Convert Product_Category_1, Product_Category_2 & Product_Category_3 from object to numerical int\ndf['Product_Category_1']  = df['Product_Category_1'].astype('int')\ndf['Product_Category_2']  = df['Product_Category_2'].astype('int')\ndf['Product_Category_3']  = df['Product_Category_3'].astype('int')","71137d44":"df.info()","2c288341":"#Creating train and test set\ndf_backup = df.copy()","6cb22994":"#Shape of train and test\nprint('There are {} rows and {} columns in train'.format(df.shape[0],df.shape[1]))","6b09251e":"#Final Look at data\ndf.head()","94dd52d7":"#Converting categorocal variables to dummy variables \ndf=pd.get_dummies(df,drop_first=True)","0268df3b":"#Lets do a correlation plot for entire dataframe\nsns.heatmap(df.corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':10})\nfig=plt.gcf()\nfig.set_size_inches(18,12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.show()","04d9a253":"# Segregating train and test from df\ntrain=df[:data.shape[0]]\ntest1=df[data.shape[0]:]","cf466808":"#Shape of train and test\nprint('There are {} rows and {} columns in train'.format(train.shape[0],train.shape[1]))\nprint('There are {} rows and {} columns in test'.format(test1.shape[0],test1.shape[1]))","ed802004":"train.head(5)","de0c9ce1":"test1.head(5)","4f431723":"train.drop('Purchase', axis = 1, inplace = True)\ntest1.drop('Purchase', axis = 1, inplace = True)","55003ab6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.values, data['Purchase'].values, test_size = 0.3, random_state = 4)","cb5e5298":"#### Scale input values ####\nsc_x = StandardScaler() \nX_train = sc_x.fit_transform(X_train)  \nX_test = sc_x.transform(X_test)\ntest1_sc = sc_x.transform(test1)","c0184edf":"#XGBoost Regressor\n# Import XGBoost Regressor\nfrom xgboost import XGBRegressor\n\n#Create a XGBoost Regressor\nreg = XGBRegressor(n_estimators=3600, learning_rate=0.05)\n\n# Train the model using the training sets \nreg.fit(X_train, y_train,early_stopping_rounds=5,eval_set=[(X_test, y_test)], verbose=0)","f185b529":"#Predicting Test data with the model\ny_test_pred = reg.predict(X_test)","7b213efd":"# Model Evaluation\nacc_xgb = metrics.r2_score(y_test, y_test_pred)\nprint('R^2:', acc_xgb)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))\nRMSE_xgb=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))","8e2cb0e0":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(y_test, y_test_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","2ea0f313":"# Checking residuals\nplt.scatter(y_test_pred,y_test-y_test_pred)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show()","8bfecea3":"#Predict on final test data set\npredicted_prices = reg.predict(test1_sc)\n# We will look at the predicted prices to ensure we have something sensible.\nprint(predicted_prices)","20eca3a4":"#Prepare submission file\nmy_submission = pd.DataFrame({'Purchase': predicted_prices, 'User_ID': test.User_ID,'Product_ID': test.Product_ID })\n# you could use any filename. We choose submission here\nmy_submission.to_csv('.\/submission_rahulpednekar.csv', index=False)\n","1605447b":"All missing values are imputed ","d5805a2b":"* Male have higher buying than female across all age categories\n* 51-55 age group is highest in bothh Genders","0b72296b":"* For Occupation=9 and city category = B, only female buyers are present\n* For Occupation=9 and city category = C, female buyers have very good presence","e3d06bfd":"Approx Run time : 23 mins","c2f70369":"* In City category B & C : Probabiity of purchases is more for male Gender Vs Female\n* For City category A : For age group 45-50 & 55+, female buyers are more than male buyers, for other age groups male are more than female\n* In City category B : Probabiity of purchases is more for age group 0-17 than 18-25, 26-35, 36-45 & 46-50 which is interesting","f09ee057":"Variable \"Stay_In_Current_City_Years\" cleaned","40e9fd62":"Drop target column(Purchase) from train and test","f528f836":"* A retail company \u201cABC Private Limited\u201d wants to understand the customer purchase behaviour (specifically, purchase amount) against various products of different categories. They have shared purchase summary of various customers for selected high volume products from last month.\n* The data set also contains customer demographics (age, gender, marital status, city_type, stay_in_current_city), product details (product_id and product category) and Total purchase_amount from last month.\n\n* Now, they want to build a model to predict the purchase amount of customer against various products which will help them to create personalized offer for customers against different products.","77494463":"* age group 46-50 and married spent more than non-married\n* In all other age groups , unmarried people spent more than married","53453651":"* Age group 51-55 is the highest purchase group with value 9520+ as median\n* Age group 0-17 is the lowest purchase group with value 8920+ as median as they are non-adults and need to depend upon parents for buying ","afa785b9":"we can see again that 51-55 is having highest mean of the Purchase amount and is the highest spender","005a2300":"For Product_Category_2 : eight is highest and 7.0 is lowest","e4152edb":"Train and Test split","23e27143":"Step 1 : Explore train and test datasets","667315c2":"Lets see relationship between categorical and numerical variables","a6b4a1bb":"* Marital_status : 59% Not married Vs 41% married\n* City_Category  : Maximum buyers belong to City_Category=B (42.1%) and min to City_Category=A (26.8%)\n* Stay_In_Current_City_Years : Maximum buyers have stayed in city for 1 year and minimum buyers for 0 years (i.e. recently moved)","77917794":"We can see negative correlation of Purchase with product category 1","3545e237":"> **We got RMSE value of 2525.15 with XGB**","16394f12":"Prepare submission file","041bbf25":"Occupation : Maximum buyers belong to Occupation category = 4 and minimum buyers belong to category = 8","6ae2a2f6":"Model Building starts","586143f9":"Step 2 : Data cleaning ","9f096347":"Step 3 : Exploratory Data Analysis (EDA)","33e68784":"Frequency distribution looks almost similar for all types of users","9a371a32":"* Maximum frequency (>50k times)can be seen betwee Purchase value (5000-8600)\n* Few amounts as high as 23961 is also seen\n* Min value is 12","53f90db2":"Product_Category_2 & Product_Category_3 have many missing vaules in train & test","fcc7053d":"* Irrespective of marital status, male purchasing is more than female across all age groups\n* age group 0-17 is not married because of obvious reasons","ff419e80":"> **Please upVote if you have liked my Kernel **","7f923fb4":"For Product_Category_3 16.0  is max Vs 3.0 is min","d24e5e9e":"Unmarried people buy more than married people ","fa7a0b95":"We will use XGB Regressor to predict Puchase prices ","9aba2acc":"Irrespective of stay in current city, male purchasing is more than female","8396cfcc":"* Gender : 75.3% is male Vs 24.7% female\n* Age    : Maximum buyers(39.9%) belong to age group 26-35 and minimum (2.7%) belong to 0-17 age group ","3872106e":"Maximum frequency of product id can be seen from 110000 to 120000"}}