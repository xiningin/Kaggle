{"cell_type":{"5f65792e":"code","cc2df51a":"code","95b4589d":"code","5f70d862":"code","4f52b578":"code","ae881631":"code","5d2da4e3":"code","87ad2905":"code","21c950ce":"code","00441292":"code","6d1b1cfb":"code","b0ef1b94":"code","8109bb70":"code","bd282ebe":"code","1659fdb2":"code","4d06fc77":"code","958ec8b4":"code","8effb6f2":"code","a5b1d385":"code","c13baa1e":"code","b16cb829":"code","c6e04761":"code","d8ce90ca":"code","190f8a0f":"markdown"},"source":{"5f65792e":"# import necessary modules \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport numpy as np \nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import confusion_matrix, classification_report ","cc2df51a":"#reading csv for train data\ndata_train=pd.read_csv(\"..\/input\/hackerearths-reduce-marketing-waste\/train.csv\")\ndata_train","95b4589d":"#Checking For Null Values if any Present\ndata_train.isnull().sum()","5f70d862":"#removing extra special characters from columns for performing operations and coverting object to int or float according to convienence\ndata_train['Deal_value'] = data_train['Deal_value'].str.replace('$', '')\ndata_train['Weighted_amount'] = data_train['Weighted_amount'].str.replace('$', '')\ndata_train['Deal_value']=data_train['Deal_value'].astype('float')\ndata_train['Weighted_amount']=data_train['Weighted_amount'].astype('float')\ndata_train.head()","4f52b578":"#filling  Numerical null values by mean\ndata_train['Deal_value'] = data_train['Deal_value'].fillna((data_train['Deal_value'].mean()))\ndata_train['Weighted_amount'] = data_train['Weighted_amount'].fillna((data_train['Weighted_amount'].mean()))\ndata_train['Internal_rating'] = data_train['Internal_rating'].fillna((data_train['Internal_rating'].mean()))\ndata_train['Success_probability'] = data_train['Success_probability'].fillna((data_train['Success_probability'].mean()))\ndata_train.head()\n#filling non numerical null values by most occuring one\ndf_most_common_imputed = data_train.apply(lambda x: x.fillna(x.value_counts().index[0]))\ndf_most_common_imputed","ae881631":"#encoding object data type to which it can be fitted to model\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor column_name in df_most_common_imputed.columns:\n    if df_most_common_imputed[column_name].dtype == object:\n        df_most_common_imputed[column_name] = le.fit_transform(df_most_common_imputed[column_name])\n    else:\n        pass\n#Selecting best featues according to importance\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\ndf_most_common_imputed[df_most_common_imputed < 0] = 0\nX = df_most_common_imputed.iloc[:,0:]  \ny = df_most_common_imputed.iloc[:,-1] \n\ny=y.astype('int')\nbestfeatures = SelectKBest(score_func=chi2, k=23)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Features','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(23,'Score')) \ndf_most_common_imputed","5d2da4e3":"#drop other columns other than top 5-6 selected\ndf_most_common_imputed.drop([\"Deal_title\",\"Lead_name\",\"Date_of_creation\",\"Designation\",\"Pitch\",\"Industry\",\"Deal_value\",\"Contact_no\",\"Location\",\"POC_name\",\"Lead_POC_email\",\"Lead_revenue\",\"Resource\",\"Hiring_candidate_role\",\"Last_lead_update\",\"Internal_POC\"], axis=1, inplace=True)","87ad2905":"#BOXPLOT FOR OUTLIAR DETECTION ON TRAINING DATA\na=df_most_common_imputed['Weighted_amount']\nb=df_most_common_imputed['Fund_category']\nc=df_most_common_imputed['Geography']\nd=df_most_common_imputed['Lead_source']\ne=df_most_common_imputed['Level_of_meeting']\nf=df_most_common_imputed['Internal_rating']\nto_plot=[a,b,c,d,e,f]\nfig=plt.figure(1,figsize=(16,9))\nax=fig.add_subplot(111)\nbp=ax.boxplot(to_plot)","21c950ce":" #ScatterPLOT FOR OUTLIAR DETECTION ON TRAINING DATA\nplt.scatter(b,c,e,f,alpha=1)","00441292":"#ScatterPLOT FOR OUTLIAR DETECTION ON TRAINING DATA\nplt.scatter(a,d,alpha=1)","6d1b1cfb":"#removing Outliars from training data\ndf_most_common_imputed\nimport pandas as pd\nfrom scipy import stats\nz_scores = stats.zscore(df_most_common_imputed)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\nnew_df = df_most_common_imputed[filtered_entries]\nnew_df","b0ef1b94":"#reading csv for test data\ndata_test=pd.read_csv(\"..\/input\/hackerearths-reduce-marketing-waste\/test.csv\")\ndata_test.head()","8109bb70":"#Checking For Null Values if any Present\ndata_test.isnull().sum()","bd282ebe":"#removing extra special characters from columns for performing operations and coverting object to int or float according to convienence\ndata_test['Deal_value'] = data_test['Deal_value'].str.replace('$', '')\ndata_test['Weighted_amount'] = data_test['Weighted_amount'].str.replace('$', '')\ndata_test['Deal_value']=data_test['Deal_value'].astype('float')\ndata_test['Weighted_amount']=data_test['Weighted_amount'].astype('float')\ndata_test.head()","1659fdb2":"#filling  Numerical null values by mean\ndata_test['Deal_value'] = data_test['Deal_value'].fillna((data_test['Deal_value'].mean()))\ndata_test['Weighted_amount'] = data_test['Weighted_amount'].fillna((data_test['Weighted_amount'].mean()))\ndata_test['Internal_rating'] = data_test['Internal_rating'].fillna((data_test['Internal_rating'].mean()))\ndata_test.head()\n#filling non numerical null values by most occuring one\ndt_most_common_imputed = data_test.apply(lambda x: x.fillna(x.value_counts().index[0]))\ndt_most_common_imputed\n","4d06fc77":"#drop other columns other than top 5-6 selected above\ndt_most_common_imputed.drop([\"Deal_title\",\"Lead_name\",\"Contact_no\",\"Deal_value\",\"Date_of_creation\",\"Designation\",\"Pitch\",\"Industry\",\"Location\",\"POC_name\",\"Lead_POC_email\",\"Lead_revenue\",\"Resource\",\"Hiring_candidate_role\",\"Last_lead_update\",\"Internal_POC\"], axis=1, inplace=True)","958ec8b4":"#encoding object data type to which it can be fitted to model\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor column_name in dt_most_common_imputed.columns:\n    if dt_most_common_imputed[column_name].dtype == object:\n        dt_most_common_imputed[column_name] = le.fit_transform(dt_most_common_imputed[column_name])\n    else:\n        pass\nfor column_name in df_most_common_imputed.columns:\n    if df_most_common_imputed[column_name].dtype == object:\n        df_most_common_imputed[column_name] = le.fit_transform(df_most_common_imputed[column_name])\n    else:\n        pass\n#splitting data for training and testing\nx_train = new_df.iloc[:,0:-1]  \ny_train = new_df.iloc[:,-1] \nx_test=   dt_most_common_imputed\nx_train\nx_test","8effb6f2":"#BOXPLOT FOR OUTLIAR DETECTION ON TESTING DATA\na=dt_most_common_imputed['Weighted_amount']\nb=dt_most_common_imputed['Fund_category']\nc=dt_most_common_imputed['Geography']\nd=dt_most_common_imputed['Lead_source']\ne=dt_most_common_imputed['Level_of_meeting']\nf=dt_most_common_imputed['Internal_rating']\nto_plot=[a,b,c,d,e,f]\nfig=plt.figure(1,figsize=(16,9))\nax=fig.add_subplot(111)\nbp=ax.boxplot(to_plot)","a5b1d385":"#ScatterPLOT FOR OUTLIAR DETECTION ON TESTING DATA\nplt.scatter(b,c,e,f,alpha=1)","c13baa1e":"#ScatterPLOT FOR OUTLIAR DETECTION ON TESTING DATA\nplt.scatter(a,d,alpha=1)","b16cb829":"#creating different dataframe for output \ndf=pd.DataFrame()\ndf['Deal_title']=data_test['Deal_title']\ndf['Success_probability']=df_most_common_imputed['Success_probability']\ndf","c6e04761":"#Applying xgboost as it is too efficient\nimport xgboost as xgb\nxg_reg = xgb.XGBRegressor( learning_rate = 0.101,\n                max_depth =4,objective=\"reg:linear\",alpha =1,n_estimators=9)\nxg_reg.fit(x_train,y_train)\nxgbost= xg_reg.predict(x_test)\ndf[\"Success_probability\"]=xgbost\ndf.head()\n","d8ce90ca":"#output CSV\ndf.to_csv(\"xg_boost.csv\", index=False)","190f8a0f":"# NO OUTLIARS DETECTED NO NEED OF REMOVAL"}}