{"cell_type":{"51345826":"code","dca106b5":"code","c64f37bb":"code","bea9884f":"code","430d41cb":"code","ba3a0e89":"code","4ef94a18":"code","8a69a508":"code","43b88bee":"code","946f1df4":"code","ec0090ef":"code","1be0f5ac":"code","0a635b2c":"code","b5ee2a28":"code","915b1765":"code","25037017":"code","24858341":"code","312de849":"code","005dac61":"code","02420b0c":"code","57f4423a":"code","33beec13":"code","dc82b974":"code","282cacc7":"code","f1d9669a":"code","c9f83834":"code","914f10c8":"code","62ec5e8d":"code","f7bbe8b6":"code","03c67ebb":"code","c6e4df73":"code","7317425d":"code","46ae20de":"markdown"},"source":{"51345826":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport seaborn as sns\nimport matplotlib.pyplot as plt","dca106b5":"df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\").drop(columns=['Soil_Type7', 'Soil_Type15']) \ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\").drop(columns=['Soil_Type7', 'Soil_Type15']) ","c64f37bb":"df.head()","bea9884f":"df.isnull().sum()","430d41cb":"df.groupby('Cover_Type').size()","ba3a0e89":"X = df.drop(['Id','Cover_Type'],axis = 1)\ny = df.Cover_Type\nlen(y.unique())","4ef94a18":"X.head(2)","8a69a508":"sns.histplot(X.Elevation)","43b88bee":"sns.histplot(X.Aspect)","946f1df4":"sns.histplot(X.Slope)","ec0090ef":"from sklearn.preprocessing import StandardScaler,LabelEncoder\nsc = StandardScaler()\nle = LabelEncoder()\ny = le.fit_transform(y)\nX = sc.fit_transform(X)","1be0f5ac":"set(y)","0a635b2c":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size = 0.02,random_state = 42)\nX_test,X_,y_test,y_ = train_test_split(X_val,y_val,test_size = 0.000002,random_state = 42)","b5ee2a28":"len(X_train),len(X_val),len(X_test)","915b1765":"X_train.shape,y_train.shape","25037017":"EPOCHS = 90 \nVERBOSE = 2 \nRUNS = 1 \nBATCH_SIZE = 512 ","24858341":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    pass\nprint('Num',strategy.num_replicas_in_sync)","312de849":"def model_fun(X):\n    il = tf.keras.layers.Input(shape=(X.shape[-1]))\n    x = tf.keras.layers.Dense(128, activation='relu')(il)\n    x1 = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dense(64, activation='relu')(x1)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dropout(0.2)(tf.keras.layers.Concatenate()([x, x1]))\n    x = tf.keras.layers.Dense(units=64, activation='relu')(x) \n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dense(64, activation='relu')(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    output = tf.keras.layers.Dense(7, activation=\"softmax\")(x)\n    model = tf.keras.Model(inputs = il,outputs = output)\n    return model\n    ","005dac61":"lr =tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=5, verbose=VERBOSE)\nes = tf.keras.callbacks.EarlyStopping(monitor=\"val_acc\", patience=10, verbose=VERBOSE, mode=\"max\", restore_best_weights=True)","02420b0c":"with strategy.scope():\n    model = model_fun(X_train)\n    model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=tf.keras.optimizers.Adam(), metrics=[\"accuracy\"])\n    history = model.fit(X_train,y_train,\n                        verbose=VERBOSE,\n                        shuffle=True,\n                        batch_size=BATCH_SIZE,epochs=EPOCHS\n                        ,use_multiprocessing=True,\n                        callbacks=[lr,es],\n                        validation_data=(X_val,y_val))","57f4423a":"y_predict = model.predict(X_test)\ny_predict = le.inverse_transform(np.argmax(y_predict,axis = 1))","33beec13":"from sklearn.metrics import confusion_matrix,accuracy_score\nplt.figure(figsize=(10,10))\ncm = confusion_matrix(y_test,y_predict)\nsns.heatmap(cm,annot=True,fmt='.2f')","dc82b974":"accuracy_score(y_test,y_predict)*100","282cacc7":"test_df.head()","f1d9669a":"Ids = test_df.Id\ntest_df.drop('Id',axis = 1,inplace = True)","c9f83834":"sub_x = sc.fit_transform(test_df)","914f10c8":"sub_x.shape","62ec5e8d":"sub_predict = model.predict(sub_x)\nsub_predict = le.inverse_transform(np.argmax(sub_predict,axis = 1))","f7bbe8b6":"sub = pd.DataFrame()","03c67ebb":"sub['Id'] = Ids\nsub['Cover_Type'] = sub_predict","c6e4df73":"sub.head()","7317425d":"sub.to_csv('submission_dec.csv',index = False)","46ae20de":"## check for null values"}}