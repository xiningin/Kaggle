{"cell_type":{"2c18b253":"code","e08f7c8f":"code","72badcda":"code","6523c901":"code","f06ec153":"code","ef78e1e9":"code","24edab9d":"code","63bb9e73":"code","60e096df":"code","47df8c74":"code","085f7ccc":"code","12e8747c":"code","4a622f19":"code","61e7f6a8":"code","75c18fa8":"code","98769037":"markdown","ce6f79c6":"markdown","80df9f12":"markdown","027fd1cd":"markdown","e500571d":"markdown","4d08cf37":"markdown","603620c8":"markdown","4c865437":"markdown","b41451b2":"markdown","50e91d29":"markdown"},"source":{"2c18b253":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e08f7c8f":"!pip install --upgrade seaborn\nimport seaborn as sns\nimport warnings  \nwarnings.filterwarnings('ignore')","72badcda":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv',parse_dates=True)\n\n#only consider the year for the date_added column, and change all released dates to 2019\ndf['date_added']=pd.to_datetime(df['date_added']).dt.year\ndf.replace(to_replace=2020,value=2019,inplace=True)\nsns.set(style='darkgrid')\n\nprint(df.info())\nprint(df.head())\nsns.heatmap(df.isnull(),cbar=False)","6523c901":"#the countries are separated using the explode method\ndf_country_explode_movie = df[df['type']=='Movie'].assign(country=df.country.str.split(', ')).explode('country')\ndf_country_explode_tv = df[df['type']=='TV Show'].assign(country=df.country.str.split(', ')).explode('country')\n\n#an index is created with the 20 countries that released the largest amounts of movies and tv shows\ndf_countries_sum_movie = df_country_explode_movie.groupby(['country'])['listed_in'].count().sort_values(ascending=False)\ndf_countries_sum_tv = df_country_explode_tv.groupby(['country'])['listed_in'].count().sort_values(ascending=False)\nidx_popular_countries_movies = df_countries_sum_movie.head(20).index\nidx_popular_countries_tv = df_countries_sum_tv.head(20).index\n\n#the exploded data is filtered according to these indexes\ndf_popular_movies = df_country_explode_movie[df_country_explode_movie.country.isin(idx_popular_countries_movies)]\ndf_popular_tv = df_country_explode_tv[df_country_explode_tv.country.isin(idx_popular_countries_tv)]\n\nfig,ax = plt.subplots(2,1,figsize=[20,14])\nsns.countplot(x='country',data=df_popular_movies,ax=ax[0],order=idx_popular_countries_movies)\nsns.countplot(x='country',data=df_popular_tv,ax=ax[1],order=idx_popular_countries_tv)\nax[0].set_xticklabels(idx_popular_countries_movies,rotation=45)\nax[0].set_title('Movies released by country')\nax[1].set_xticklabels(idx_popular_countries_tv,rotation=45)\nax[1].set_title('Tv shows released by country')\n\nplt.show()\n","f06ec153":"#how has the number of tv shows changed through the years? finding the number of tv shows per country first, and the total number after\ndf_year_tv = df_country_explode_tv[df_country_explode_tv.country.isin(idx_popular_countries_tv)]\ndf_year_country_tv = df_year_tv[df_year_tv['type']=='TV Show'].groupby(['release_year','country'])['show_id'].count().to_frame().reset_index()\ndf_year_all_tv = df_year_tv[df_year_tv['type']=='TV Show'].groupby(['release_year'])['show_id'].count().to_frame().reset_index()\n\ndf_year_country_tv.columns.values[2]='counts'\ndf_year_all_tv.columns.values[1]='counts'\nfig, ax = plt.subplots(1,1,figsize=[15,10])\ncountry_tv_shows = sns.lineplot(x='release_year',y='counts',data=df_year_country_tv,hue='country')\nall_tv_shows = sns.lineplot(x='release_year',y='counts',data=df_year_all_tv,linestyle='--',color='red')\nax.text(0.83,0.9,'All TV Shows',transform=ax.transAxes,size=15,color='red')\nplt.xlim(left=1990,right=2019)\nplt.show()\n","ef78e1e9":"#same procedure is applied to movies\ndf_year_movies = df_country_explode_movie[df_country_explode_movie.country.isin(idx_popular_countries_movies)]\ndf_year_country_movies = df_year_movies[df_year_movies['type']=='Movie'].groupby(['release_year','country'])['show_id'].count().to_frame().reset_index()\ndf_year_all_movies = df_year_movies[df_year_movies['type']=='Movie'].groupby(['release_year'])['show_id'].count().to_frame().reset_index()\n\ndf_year_country_movies.columns.values[2]='counts'\ndf_year_all_movies.columns.values[1]='counts'\n\nfig, ax = plt.subplots(1,1,figsize=[15,10])\ncountry_movies_shows = sns.lineplot(x='release_year',y='counts',data=df_year_country_movies,hue='country')\nall_movies_shows = sns.lineplot(x='release_year',y='counts',data=df_year_all_movies,linestyle='--',color='red')\nax.text(0.79,0.9,'All Movies',transform=ax.transAxes,size=15,color='red')\nplt.xlim(left=1985,right=2019)\nplt.show()","24edab9d":"#we can analyse\ndf_genre_exp= df.assign(listed_in=df.listed_in.str.split(', ')).explode('listed_in')\n\nidx_genre_movie = df_genre_exp[df_genre_exp['type']=='Movie'].groupby('listed_in')['show_id'].count().sort_values(ascending=False).head(10).index\nidx_genre_tv = df_genre_exp[df_genre_exp['type']=='TV Show'].groupby('listed_in')['show_id'].count().sort_values(ascending=False).head(10).index\n\ndf_genre_movies = df_genre_exp[df_genre_exp.listed_in.isin(idx_genre_movie)]\ndf_genre_tv = df_genre_exp[df_genre_exp.listed_in.isin(idx_genre_tv)]\n\ndf_genres_count_movies = df_genre_movies[df_genre_movies['type']=='Movie'].groupby(['release_year','listed_in'])['show_id'].count().reset_index()\ndf_genres_count_tv = df_genre_tv[df_genre_tv['type']=='TV Show'].groupby(['release_year','listed_in'])['show_id'].count().reset_index()\n\ndf_genres_count_movies.columns.values[2]='counts'\ndf_genres_count_tv.columns.values[2]='counts'\n\n\nfig, ax = plt.subplots(2,1,figsize=(15,10))\nsns.lineplot(x='release_year',y='counts',data=df_genres_count_movies,hue='listed_in',ax=ax[0])\nsns.lineplot(x='release_year',y='counts',data=df_genres_count_tv,hue='listed_in',ax=ax[1])\nfor axes in ax:\n    axes.set_xlim(left=1995,right=2019)\n    \nax[0].set_title('Movie genres released per year')\nax[1].set_title('TV Show genres released per year')\n\nplt.show()","63bb9e73":"df_genres_count_movies_added = df_genre_movies[df_genre_movies['type']=='Movie'].groupby(['date_added','listed_in'])['show_id'].count().reset_index()\ndf_genres_count_tv_added = df_genre_tv[df_genre_tv['type']=='TV Show'].groupby(['date_added','listed_in'])['show_id'].count().reset_index()\n\n\nfig, ax = plt.subplots(2,1,figsize=(15,10))\nsns.lineplot(x='date_added',y='show_id',data=df_genres_count_movies_added, hue='listed_in',ax=ax[0])\nsns.lineplot(x='date_added',y='show_id',data=df_genres_count_tv_added, hue='listed_in',ax=ax[1])\nfor axes in ax:\n    axes.set_xlim(left=2014,right=2019)\nax[0].set_title('Movie genres released per year')\nax[1].set_title('TV Show genres released per year')\n\nplt.show()","60e096df":"#summarising the above \ndf_movies_added_sum = df_genres_count_movies_added.groupby('date_added').sum()\ndf_tv_added_sum = df_genres_count_tv_added.groupby('date_added').sum()\ndf_movies_added_sum.columns.values[0]='counts'\ndf_tv_added_sum.columns.values[0]='counts'\n\nfix, ax=plt.subplots(2,1,figsize=(15,10))\nsns.lineplot(x='release_year',y='counts',data=df_year_all_tv,ax=ax[0],label='TV Show', marker='o')\nsns.lineplot(x='release_year',y='counts',data=df_year_all_movies,ax=ax[0],label='Movie',marker='o')\nsns.lineplot(x='date_added',y='counts',data=df_movies_added_sum,ax=ax[1],label='TV Show',marker='o')\nsns.lineplot(x='date_added',y='counts',data=df_tv_added_sum,ax=ax[1],label='Movie',marker='o')\n\nax[0].set_xlim(left=1980,right=2019)\nax[1].set_xlim(left=2012,right=2019)\n\nplt.legend()\nplt.show()","47df8c74":"#25 directors with the highest number of movies\ndf_directors_exp = df.assign(director=df.director.str.split(', ')).explode('director')\ndf_directors= df_directors_exp[['show_id','type','director']]\ndf_directors = df_directors[df_directors['type']=='Movie']\ndf_directors= df_directors[~df_directors.duplicated(subset=['show_id'],keep='first')]\ndirectors_count = (df_directors['director']).to_frame()\ndirectors_count.columns.values[0]='director'\ndirectors_count= directors_count['director'].value_counts().sort_values(ascending=False).to_frame().reset_index()\ndirectors_count.columns.values[0]='director'\ndirectors_count.columns.values[1]='number of movies'\ndirectors_count = directors_count.set_index(np.arange(1,len(directors_count)+1))\nprint(directors_count.head(25))\n","085f7ccc":"#same reasoning is applied to actors\ndf_cast_exp = df.assign(cast=df.cast.str.split(', ')).explode('cast')\ndf_cast= df_cast_exp[['show_id','type','cast']]\ndf_cast= df_cast[~df_cast.duplicated(subset=['show_id'],keep='first')]\ncast_count = (df_cast['cast']).to_frame()\ncast_count.columns.values[0]='actor'\ncast_count= cast_count['actor'].value_counts().sort_values(ascending=False).to_frame().reset_index()\ncast_count.columns.values[0]='actor'\ncast_count.columns.values[1]='number of movies\/shows'\ncast_count = cast_count.set_index(np.arange(1,len(cast_count)+1))\nprint(cast_count.head(25))","12e8747c":"duration = df[['show_id','type','duration','release_year']]\nduration_movie = duration[duration['type']=='Movie']\nduration_tv = duration[duration['type']=='TV Show']\n\nduration_movie['duration_int']= duration_movie['duration'].str.extract('(\\d+)', expand=False)\nduration_movie['duration_int'] = duration_movie['duration_int'].astype('int')\n\nduration_tv['duration_int']= duration_tv['duration'].str.extract('(\\d+)', expand=False)\nduration_tv['duration_int'] = duration_tv['duration_int'].astype('int')\nduration_tv = duration_tv[duration_tv['release_year']>2000]\n\nduration_movie.columns.values[4]= 'movie duration \/ min'\nduration_tv.columns.values[4]='number of seasons'\nfig,ax=plt.subplots(1,1,figsize=(15,10))\nsns.regplot(x='release_year',y='duration_int',data=duration_movie)\nplt.show()","4a622f19":"fig,ax=plt.subplots(1,1,figsize=(15,10))\nsns.swarmplot(x='release_year',y='duration_int',data=duration_tv)\nplt.show()","61e7f6a8":"longest_film_id = duration_movie[duration_movie['duration_int']==max(duration_movie['duration_int'])].iloc[0,0]\nlongest_film = df[df['show_id']==longest_film_id]\nprint(longest_film[['title','duration']])\n","75c18fa8":"duration_movie_2=duration_movie.drop(index=4315)\nlongest_film_id = duration_movie_2[duration_movie_2['duration_int']==max(duration_movie_2['duration_int'])].iloc[0,0]\nlongest_film = df[df['show_id']==longest_film_id]\nprint(longest_film[['title','duration']])\n","98769037":"What about directors and actors? There are no directors listed for TV-shows, so these will only be analysed for movies. The .explode() method will be used to separate the directors in separate entries where multiple ones are listed. We are now considering all entries in the database for the next two analyses.","ce6f79c6":"Using the same approach, we can separate each genre and look at how many entries each genre has every year between movies and TV shows. We are only considering the first 10 most popular genres.","80df9f12":"What about the longest film?","027fd1cd":"While the overall number of TV shows is lower, we can observe that they are being added in increasing amounts.\nWe can summarise the above findings in two graphs with the sums of all TV shows and movies by release date and date added.","e500571d":"Movies seem to be getting shorter through the years, but TV shows have discrete number of seasons, so a swarmplot could be more appropriate.\n\n","4d08cf37":"How is the duration of movies changing in time?","603620c8":"We can now look at how the total number of TV shows and movies has changed through the years in the above countries. The following analysis is only considering the so-called \"popular\" countries.","4c865437":"The heatmap presents a large number of missing directors. \nFrom printing the head of the dataframe, the missing values are identified to belong to the TV shows.\n\nFor the next step, the popular countries are visualised in terms of number of TV shows and Movies.","b41451b2":"Similarly, we can look at genres by by date added.","50e91d29":"This was the interactive Black Mirror episode, what about an actual movie?"}}