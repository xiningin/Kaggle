{"cell_type":{"460bf184":"code","e3017b0f":"code","ecbe73bb":"code","5a6f89d3":"code","f59650e1":"code","69e5890a":"code","e6b73591":"code","a9e3ea66":"code","1b2fad82":"code","3181280e":"code","20626acc":"code","a254a751":"code","fc384ae1":"code","daafbf13":"code","bc32d599":"code","b98710ad":"code","9fce43b7":"code","6f39eab7":"code","88bafdad":"code","850c990f":"code","12a3eb93":"code","2d7fd69b":"code","5b1e302b":"code","36cca2e2":"code","acbfe2c8":"code","ce8acd19":"code","ea9f2196":"code","13ccb9cf":"code","32a9c737":"code","de382c5b":"code","664cf23f":"code","cd04fcb3":"code","913909d5":"code","b7ac4da3":"code","90ee066b":"code","52fc7915":"code","226dff45":"code","b2d6b91d":"code","68e35f8c":"code","24c9159a":"code","5d188be4":"code","61725ce9":"code","4031dca8":"markdown","15b59833":"markdown","21ae407f":"markdown","d8557cea":"markdown","936eba1f":"markdown","5ec14eb1":"markdown"},"source":{"460bf184":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3017b0f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","ecbe73bb":"df = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')","5a6f89d3":"row,column = df.shape\nprint(f\"row: {row},column: {column}\")","f59650e1":"df.head()","69e5890a":"df.isnull().sum()","e6b73591":"df['model'].value_counts()","a9e3ea66":"model_count=df['model'].value_counts()\nlow_mod = model_count[model_count <= 50]\nlow_mod","1b2fad82":"df['model'] = df['model'].apply(lambda y : 'Others' if y in low_mod else y)\ndf['model'].value_counts()","3181280e":"df.head()","20626acc":"df['transmission'].value_counts()","a254a751":"df['fuelType'].value_counts()","fc384ae1":"df['engineSize'].describe()","daafbf13":"df['engineSize'].value_counts()","bc32d599":"df = df[(df['engineSize'] > 1.0)]\ndf.shape","b98710ad":"df.mpg.describe()","9fce43b7":"df.head()","6f39eab7":"u_bound=df['mpg'].quantile(0.95)\nl_bound=df['mpg'].quantile(0.05)\nprint(u_bound,l_bound)","88bafdad":"df = df.loc[df['mpg']<u_bound]\ndf","850c990f":"df = df.loc[df['mpg']>l_bound]\ndf.head()","12a3eb93":"df['tax'].describe()","2d7fd69b":"df['tax'].sort_values()","5b1e302b":"df.shape","36cca2e2":"fuel_dummies=pd.get_dummies(df['fuelType'])\nfuel_dummies.shape","acbfe2c8":"df = pd.concat([df,fuel_dummies],axis=1)","ce8acd19":"print(df.shape)","ea9f2196":"transmission_dummies = pd.get_dummies(df['transmission'])\nmodel_dummies = pd.get_dummies(df['model'])\ndf = pd.concat([df,transmission_dummies,model_dummies],axis=1)\ndf","13ccb9cf":"df = df.drop(['Others'],axis=1)               # avoiding Dummy variable Trap\ndf","32a9c737":"df = df.loc[df['price']>10000]              # Otherwise We get a negetive value as our result.\ndf","de382c5b":"x = df.drop(['price','model','transmission','fuelType'],axis=1)\nx","664cf23f":"y = df['price'].values\ny","cd04fcb3":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.20,random_state=0)","913909d5":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(x_train,y_train)","b7ac4da3":"reg.score(x_test,y_test)","90ee066b":"len(x.columns)","52fc7915":"x.columns","226dff45":"p = np.where(x.columns == ' X1')[0][0]\nprint(p)","b2d6b91d":"def pred_price(u_model,u_year,u_transmission,u_mileage,u_fuelType,u_tax,u_mpg,u_enginesize):\n  temp_list = np.zeros(len(x.columns))\n  temp_list[0] = u_year\n  temp_list[1] = u_mileage\n  temp_list[2] = u_tax\n  temp_list[3] = u_mpg\n  temp_list[4] = u_enginesize\n  temp_list[np.where(x.columns == u_model)[0][0]] = 1.0\n  temp_list[np.where(x.columns == u_transmission)[0][0]] = 1.0\n  temp_list[np.where(x.columns == u_fuelType)[0][0]] = 1.0\n  print(reg.predict([temp_list]))","68e35f8c":"\nu_model = input(\"Enter the model name: \")\nu_model = \" \"+u_model\nu_year = int(input(\"Enter the year: \"))\nu_transmission = input(\"Transmission Type: \").title()\nu_mileage = int(input(\"Enter the mileage: \"))\nu_fuelType = input(\"Diesel or Petrol: \").title()\nu_tax = int(input(\"Enter the Tax: \"))\nu_mpg = float(input(\"mpg: \"))\nu_enginesize = float(input(\"Enter the Engine Size: \"))\npred_price(u_model,u_year,u_transmission,u_mileage,u_fuelType,u_tax,u_mpg,u_enginesize)","24c9159a":"y_pred = reg.predict(x_test)\ntype(y_pred)","5d188be4":"y_pred = reg.predict(x_test)              \nnp.set_printoptions(precision=0)\nprint(np.concatenate((y_test.reshape(len(y_test),1),y_pred.reshape(len(y_pred),1)),1))","61725ce9":"y_pred","4031dca8":"Actual value V\/S Predicted value","15b59833":"split into train and test set","21ae407f":"model training","d8557cea":"**User Friendly Interface**","936eba1f":"**ACCURACY**","5ec14eb1":"Removeing the Outliers ** "}}