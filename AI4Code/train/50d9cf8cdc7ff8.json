{"cell_type":{"a6fab855":"code","7c1f7ee5":"code","802ce3ba":"code","78b9e140":"code","623ab884":"code","596fc1ad":"code","fe1987b9":"code","666f3756":"code","fb2d3cdc":"code","78f30a50":"code","0027f8f5":"code","d849a54b":"code","18d34074":"code","45abf5e4":"code","255a2eff":"code","82dc7844":"code","cd480808":"code","9351f2ae":"code","4c3dc250":"code","56bcae35":"code","f2712cbd":"code","6fda848d":"markdown","bff9293e":"markdown"},"source":{"a6fab855":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7c1f7ee5":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/reviews\/Restaurant_Reviews.tsv',sep='\\t')","802ce3ba":"df.head(5)","78b9e140":"\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n\n#import nltk\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# BeautifulSoup libraray\nfrom bs4 import BeautifulSoup \n\nimport re # regex\n\n#keras\nfrom keras.preprocessing.text import one_hot,Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Embedding,Input,Dropout\nfrom keras.models import Model\nfrom keras.utils import to_categorical\n","623ab884":"df.isna().sum()","596fc1ad":"from nltk.corpus import stopwords\ndef clean_reviews(review):\n    \n# 1. Removing html tags\n    review_text = BeautifulSoup(review).get_text()\n\n# 2. Retaining only alphabets.\n    review_text = re.sub(\"[^a-zA-Z]\",\" \",review_text)\n\n# 3. Converting to lower case and splitting\n    word_tokens= review_text.lower().split()\n\n# 4. Remove stopwords\n    stop_words= set(stopwords.words(\"english\"))     \n    word_tokens= [w for w in word_tokens if not w in stop_words]\n\n    cleaned_review=\" \".join(word_tokens)\n    return cleaned_review\n\ndf['Review']=df['Review'].apply(clean_reviews)\n\n\n","fe1987b9":"df.head(5)","666f3756":"blanks = []  # start with an empty list\n\nfor i,lb,rv in df.itertuples():  # iterate over the DataFrame\n    if type(rv)==str:            # avoid NaN values\n        if rv.isspace():         # test 'review' for whitespace\n            blanks.append(i)     # add matching index numbers to the list\n        \nprint(len(blanks), 'blanks: ', blanks)","fb2d3cdc":"from sklearn.model_selection import train_test_split\n\nX = df['Review']\ny = df['Liked']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","78f30a50":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import LinearSVC\n\n# Na\u00efve Bayes:\ntext_clf_nb = Pipeline([('tfidf', TfidfVectorizer()),('clf', MultinomialNB())])\n\n# Linear SVC:\ntext_clf_lsvc = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LinearSVC())])","0027f8f5":"text_clf_nb","d849a54b":"text_clf_nb.fit(X_train, y_train)","18d34074":"predictions = text_clf_nb.predict(X_test)","45abf5e4":"from sklearn import metrics\nprint(metrics.confusion_matrix(y_test,predictions))","255a2eff":"# Print a classification report\nprint(metrics.classification_report(y_test,predictions))","82dc7844":"print(metrics.accuracy_score(y_test,predictions))","cd480808":"text_clf_lsvc.fit(X_train, y_train)","9351f2ae":"predictions = text_clf_lsvc.predict(X_test)","4c3dc250":"from sklearn import metrics\nprint(metrics.confusion_matrix(y_test,predictions))","56bcae35":"print(metrics.classification_report(y_test,predictions))","f2712cbd":"# Print the overall accuracy\nprint(metrics.accuracy_score(y_test,predictions))","6fda848d":"# for data cleaning","bff9293e":"**To know any blanks**"}}