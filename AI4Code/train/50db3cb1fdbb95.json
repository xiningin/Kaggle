{"cell_type":{"97a8d685":"code","b78e0729":"code","758d1ae2":"code","7a8fb0fc":"code","a701fb2c":"code","97c68b61":"code","a429b11b":"code","7b38e32f":"code","4b1fffd6":"code","c9f403c0":"code","ca1e0e5e":"code","6748d928":"code","2ab87d30":"code","01be7148":"code","5fa40447":"code","c71dfb13":"code","1083d8f5":"markdown","782c1fcf":"markdown","0f4eeb0f":"markdown","220a2c7d":"markdown","afa15708":"markdown","146f36e8":"markdown","29ecd0a4":"markdown","4b5f7746":"markdown","f793834c":"markdown","aa5dfceb":"markdown","d781cc3b":"markdown"},"source":{"97a8d685":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b78e0729":"# read data from csv\ndata = pd.read_csv(\"..\/input\/amd-vs-intel\/AMDvIntel.csv\")\ndata.info()","758d1ae2":"data.head(10)","7a8fb0fc":"# We drop \"name\" and \"price\" columns. Because these features does not important for classification.\ndata = data.drop(['Name','Price'],axis=1)\ndata.head(10)","a701fb2c":"# Y axis is comparison class. Which is Intel or AMD.\ny = data['IorA'].values\ny = y.reshape(-1,1)\n# x_data is all other things without Y axis in data.\nx_data = data.drop(['IorA'],axis = 1)\nprint(x_data)","97c68b61":"# NORMALIZATION\n# We should normalize our dataset for right result. In this dataset we do not need necessary but we usually need normalize datasets. \n# Because maybe in a dataset one column include very high numbers (100000000, 154000000 etc.) and other column include very little number (0,01  0,005 etc.).\n# For right result we need normalize datasets.\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values\nx.head(10)","a429b11b":"# now we organize our test and train data.\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","7b38e32f":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver='lbfgs')  # for FutureWarning Error we need to write solver='lbfgs'\nlr.fit(x_train, y_train.ravel())\nprint(\"Logistic Regression test accuracy (score): \", lr.score(x_test, y_test))","4b1fffd6":"from sklearn.neighbors import KNeighborsClassifier\nK = 5   # neighbors number\nknn = KNeighborsClassifier(n_neighbors=K)\nknn.fit(x_train, y_train.ravel())\nprint(\"When K = {} neighnors , KNN test accuracy: {}\".format(K, knn.score(x_test, y_test)))\nprint(\"When K = {} neighnors , KNN train accuracy: {}\".format(K, knn.score(x_train, y_train)))","c9f403c0":"# Now we find the best K (hyperparameter, number of neighbors) for our data.\nran = np.arange(1,30)\ntrain_list = []\ntest_list = []\nfor i,each in enumerate(ran):\n    knn = KNeighborsClassifier(n_neighbors=each)\n    knn.fit(x_train, y_train.ravel())\n    test_list.append(knn.score(x_test, y_test))\n    train_list.append(knn.score(x_train, y_train))","ca1e0e5e":"# VISUALIZATION RESULT\nplt.figure(figsize=[15,10])\nplt.plot(ran,test_list,label='Test Score')\nplt.plot(ran,train_list,label = 'Train Score')\nplt.xlabel('Number of Neighbers')\nplt.ylabel('Scores\/Accuracy')\nplt.xticks(ran)\nplt.legend()\nprint(\"Best test score is {} and K = {}\".format(np.max(test_list), test_list.index(np.max(test_list))+1))\nprint(\"Best train score is {} and K = {}\".format(np.max(train_list), train_list.index(np.max(train_list))+1))","6748d928":"# Third algorithm is Support Vector Machine algorithm. \nfrom sklearn.svm import SVC\nsvm = SVC(random_state=42,gamma='scale')   # for FutureWarning, we need to write gamma='auto' or gamma='scale'\n# scale accuracy is 0.9230769230769231\n# auto  accuracy is 0.8461538461538461\nsvm.fit(x_train, y_train.ravel())\nprint(\"SVM test accuracy: {}\".format(svm.score(x_test, y_test)))","2ab87d30":"# import the algorithm\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train.ravel())\nprint(\"Naive Bayes test accuracy: \", nb.score(x_test, y_test))","01be7148":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(x_train, y_train.ravel())\nprint(\"Decision Tree Algorithm test accuracy: \", dtree.score(x_test, y_test))","5fa40447":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=100, random_state=3)    # n_estimators is number of Decision Tree in this algorithm.\nrf.fit(x_train, y_train.ravel())\nprint(\"Random Forest Algorithm test accuracy: \",rf.score(x_test, y_test))","c71dfb13":"from sklearn.metrics import confusion_matrix, classification_report\nrf = RandomForestClassifier(n_estimators= 10, random_state=3)\nrf.fit(x_train, y_train.ravel())\ny_predicted = rf.predict(x_test)\nmatrix = confusion_matrix(y_test, y_predicted)\nprint(\"Confusion Matrix: \\n\",matrix)\nprint(\"Classification Report: \\n\", classification_report(y_test, y_predicted))\n","1083d8f5":"> Data Information\nOur data is about Intel and AMD CPU comparasion.","782c1fcf":">     2. K-Nearest Neighbour (KNN) ","0f4eeb0f":"### INTRODUCTION\nIn this kernel we learn supervised learning algorithms.\n\n    1. Logistic Regression\n    2. K-Nearest Neighbour (KNN) \n    3. Support Vector Machine (SVM)\n    4. Naive Bayes\n    5. Decision Tree\n    6. Random Forest\n    7. Confusion Matrix\n    8. Conclusion","220a2c7d":"### CONCLUSION\n In this kernel we learn classification algorithms with IntelvsAMD CPU dataset.\n If you can find any bug or mistake, please send me feedback. \n Thank you for visit.","afa15708":"    6. Random Forest ","146f36e8":"We finished classification algorithms. Lets we check which class more accurate. This means how many Intel CPU the algorithms has marked as AMD CPU.","29ecd0a4":">     1. LOGISTIC REGRESSION","4b5f7746":"    5. Decision Tree","f793834c":"    4. Naive Bayes","aa5dfceb":"    3. Support Vector Machine (SVM)","d781cc3b":"In this algorithm, we have a hyperparameter N. Train data is divided into N pieces. We get N pieces subsample (subtrain) data. Then run every subtrain data in Decision Tree Algorithm. "}}