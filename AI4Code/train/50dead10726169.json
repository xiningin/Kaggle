{"cell_type":{"4aa36b7f":"code","e7806939":"code","46a632f3":"code","bdbbd227":"code","c00344d3":"code","2d0258eb":"code","647c6fd2":"code","d88289a4":"code","88929034":"code","75789f66":"code","beef607f":"code","164f184c":"code","dc943905":"code","a1e93932":"code","d802986d":"code","38d313aa":"code","6cc4bda6":"code","d7e18c16":"code","2d732b9b":"code","00445742":"code","fe61ad2d":"code","93d81184":"code","68bcddd5":"code","86dbc337":"code","2361c7bb":"code","bcadd7fd":"code","67180c64":"code","ce9e5585":"code","251ca0da":"markdown","6ca8709e":"markdown","d32db090":"markdown","364a3d19":"markdown","86707ed0":"markdown","c0a6a22a":"markdown","67540285":"markdown","958aab82":"markdown","43bf5e94":"markdown","7dd3b627":"markdown","10c05a26":"markdown","894aa0f0":"markdown","76f13566":"markdown","7433d69a":"markdown","ca764115":"markdown"},"source":{"4aa36b7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv) | datani ustigaishlash uchun, csv fayllarni bilan ishlash\nimport matplotlib.pyplot as plt\n\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n# warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# this is not so important, juts seeing what we have | bu juda muhim emas, shunchaki nima bor ekanligini ko'rish uchun\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7806939":"# Load data that we will use | Foydalanadigan datani yuklash\ntimesData = pd.read_csv(\"..\/input\/world-university-rankings\/timesData.csv\")","46a632f3":"# Information about data | Data haqida ma'lumot\ntimesData.info()","bdbbd227":"# first 10 rows of data | dataning birinchi 10 qatori\ntimesData.head(10)","c00344d3":"# prepare DataFrame | DataFrameni tayyorlash\ndf = timesData.iloc[:100,:]\n\n# Creating trace | Trace(shunchaki element) yaratish\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = 'lines',\n                    name = 'citations',\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text = df.university_name\n)\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = 'lines+markers',\n                    name = 'teaching',\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text = df.university_name\n)\ndata = [trace1, trace2]\nlayout = dict(title = \"Citations and Teaching  vs World Rank of Top 100 Universities <br>Citations va Teaching ni top 100 ta universitet o'rni bo'yicha\",\n              xaxis = dict(title = 'World Rank', ticklen = 5, zeroline = False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","2d0258eb":"# prepare DataFrame | DataFrame ni tayyorlash\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]\n\n# Creating trace | Trace yaratish\ntrace1 = go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = 'markers',\n                    name = '2014',\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text = df2014.university_name\n)\ntrace2 = go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = 'markers',\n                    name = '2015',\n                    marker = dict(color = 'rgba(12, 128, 14, 0.8)'),\n                    text = df2015.university_name\n)\ntrace3 = go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = 'markers',\n                    name = '2016',\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = df2016.university_name\n)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = \"\"\"Citations vs World Rank of Top 100 Universities with 2014, 2015 and 2016 years<br>\n2014, 2015, 2016-yillarda 100 ta top universitetning Citations va World Ranki\"\"\",\n              xaxis = dict(title = 'World Rank', ticklen = 10, zeroline = False),\n              yaxis = dict(title = 'Citation', ticklen = 5, zeroline = False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","647c6fd2":"# making figure )) | shakl yasash\n# bow figure | kamon shakli\nfig = go.Figure(data=[\n    go.Scatter(\n        x=[1, 10, 20, 30, 40, 50, 60, 70, 80],\n        y=[80, 70, 60, 50, 40, 30, 20, 10, 1]\n    ),\n    go.Scatter(\n        x=[1, 80],\n        y=[80, 1]\n    ),\n    go.Scatter(\n        x=[1, 10, 20, 30, 40, 50, 60, 70, 80],\n        y=[1, 10, 20, 30, 40, 50, 60, 70, 80]\n    )\n])\n\nfig.update_xaxes(type=\"log\")\nfig.update_yaxes(type=\"log\")\n\nfig.show()","d88289a4":"# style 1\n# prepare DataFrame | DataFrameni tayyorlash\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n\n# Creating traces\ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = 'citations',\n                marker = dict(color = 'rgba(200, 174, 200, 0.5)',\n                             line = dict(color = 'rgb(0, 0, 0)', width = 1.5)),\n                text = df2014.country\n)\ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = 'teaching',\n                marker = dict(color = 'rgba(12, 255, 128, 0.8)',\n                             line = dict(color = 'rgb(0, 0, 0)', width = 1.5)),\n                text = df2014.country\n)\ndata = [trace1, trace2]\nlayout = dict(title = \"\"\"Citations vs Teaching of Top 3 Universities in 2014 year<br>\n2014-yilda Top 3 ta universitetlarning Citations va Teachinglari\"\"\",\n              xaxis = dict(title = 'Top 3 Universities', ticklen = 10, zeroline = False),\n              barmode = 'group'\n             )\n# layout = go.Layout(...) #you can use this, instead of dict | dict o'rniga ishlata olish mumkin\nfig = dict(data = data, layout = layout)\niplot(fig)","88929034":"# style 2\n# prepare DataFrame | DataFrame tayyorlash\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n\n# Creating traces\nx = df2014.university_name\n\ntrace1 = {\n    'x': x,\n    'y': df2014.citations,\n    'name': 'citations',\n    'type': 'bar'\n}\ntrace2 = {\n    'x': x,\n    'y': df2014.teaching,\n    'name': 'citations',\n    'type': 'bar'\n}\ndata = [trace1, trace2]\nlayout = {\n    'title': \"\"\"Citations vs Teaching of Top 3 Universities in 2014 year<br>\n2014-yilda Top 3 ta universitetlarning Citations va Teachinglari\"\"\",\n    'xaxis': {'title': 'Top 3 Universities' },\n    'barmode': 'relative'\n}\n\nfig = dict(data = data, layout = layout)\niplot(fig)","75789f66":"# style 3\nfrom plotly import tools\nfrom plotly import subplots \n\n# prepare DataFrame | DataFrame tayyorlash\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\n\n# Creating traces | Tracelar yaratish\ny_saving = [each for each in df2016.research]\ny_net_worth = [float(each) for each in df2016.income]\nuniversity_name2016 = [each for each in df2016.university_name]\n\ntrace0 = go.Bar(\n                x = y_saving,\n                y = university_name2016,\n                marker = dict(color = 'rgba(200, 174, 200, 0.5)',\n                             line = dict(color = 'rgb(0, 0, 0)', width = 1.5)),\n                name = 'research',\n                orientation = 'h'\n)\ntrace1 = go.Scatter(\n                x = y_net_worth,\n                y = university_name2016,\n                mode = 'lines+markers',\n                marker = dict(color = 'rgba(12, 255, 128, 0.8)'),\n                name = 'income'\n)\ndata = [trace1, trace2]\nlayout = dict(\n              title = 'Citations vs Income',\n              yaxis = dict(showticklabels = True, domain = [0, 0.85]),\n              yaxis2 = dict(showline = True, showticklabels = False, linecolor = 'rgba(50, 102, 102, 0.8)', linewidth = 2, domain = [0, 0.85]),\n              xaxis = dict(zeroline = False, showline = False, showticklabels = True, showgrid = True, domain = [0, 0.45]),\n              xaxis2 = dict(zeroline = False, showline = False, showticklabels = True, showgrid = True, domain = [0.47, 1], side = 'top', dtick = 5),\n              legend = dict(x = 0.029, y = 1.038, font = dict(size = 10)),\n              margin = dict(l = 200, r = 20, t = 70, b = 70),\n              paper_bgcolor = 'rgb(248, 248, 255)',\n              plot_bgcolor = 'rgb(248, 248, 255)'\n)\nannotations = []\ny_s = np.round(y_saving, decimals = 2)\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\ncheck_number = 0\nfor ydn, yd, xd in zip(y_nw, y_s, university_name2016):\n    # labelling the scatter savings | scatter savingsga label qo'yish\n    annotations.append(dict(xref = 'x2', yref = 'y2', y = xd, x = (ydn - 2) if check_number > ydn else (ydn + 2), text = '{:,}'.format(ydn), font = dict(family = 'Arial', size = 12, color = 'rgb(255, 78, 45)'), showarrow=False))\n    # labelling the bar net worth | net worth barga label qo'yish\n    annotations.append(dict(xref = 'x1', yref = 'y1', y = xd, x = yd + 3, text = str(yd), font = dict(family = 'Arial', size = 12, color = 'rgb(171, 50, 96)'), showarrow=False))\n    check_number = ydn\n\nlayout['annotations'] = annotations\n\n#  Creating two subplots | 2 ta sublot yaratish\nfig = tools.make_subplots(rows = 1, cols = 2, specs = [[{},{}]], shared_xaxes = True,\n                        shared_yaxes = False, vertical_spacing = 0.001)\n\n# fig = subplots.make_subplots(rows = 1, cols = 2, specs = [[{},{}]], shared_xaxes = True,\n#                         shared_yaxes = False, vertical_spacing = 0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","beef607f":"colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen', 'cryn']\n\nfig = go.Figure(data=[go.Pie(labels=['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen', 'Other'],\n                             values=[4500,2500,1053,500,300],\n                             title='Elements of air',\n                             hole=.3,\n                             pull=[0, 0, 0.2, 0, 0])])\nfig.update_traces(hoverinfo='label+percent+value', textposition='inside', textinfo='label+percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=0.5)))\niplot(fig)\n#  fig.show()","164f184c":"from plotly.subplots import make_subplots\n\nlabels = ['1st', '2nd', '3rd', '4th', '5th']\n\n# Define color sets of paintings\nnight_colors = ['rgb(56, 75, 126)', # 1st\n                'rgb(18, 36, 37)',  # 2nd\n                'rgb(34, 53, 101)', # 3rd\n                'rgb(36, 55, 57)',  # 4th\n                'rgb(6, 4, 4)']     # 5th\n\nsunflowers_colors = ['rgb(177, 127, 38)',  # 1st\n                     'rgb(205, 152, 36)',  # 2nd\n                     'rgb(99, 79, 37)',    # 3rd\n                     'rgb(129, 180, 179)', # 4th\n                     'rgb(124, 103, 37)']  # 5th\n\nirises_colors = ['rgb(33, 75, 99)',    # 1st\n                 'rgb(79, 129, 102)',  # 2nd\n                 'rgb(151, 179, 100)', # 3rd\n                 'rgb(175, 49, 35)',   # 4th\n                 'rgb(36, 73, 147)']   # 5th\n\ncafe_colors =  ['rgb(146, 123, 21)',  # 1st\n                'rgb(177, 180, 34)',  # 2nd\n                'rgb(206, 206, 40)',  # 3rd\n                'rgb(175, 51, 21)',   # 4th\n                'rgb(35, 36, 21)']    # 5th\n\n# Create subplots, using 'domain' type for pie charts\nspecs = [[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=2, cols=2, specs=specs)\n\n# Define pie charts\nfig.add_trace(go.Pie(labels=labels,\n                     values=[38, 27, 18, 10, 7],\n                     name='Starry Night',\n                     marker_colors=night_colors),\n              1,\n              1)\nfig.add_trace(go.Pie(labels=labels,\n                     values=[28, 26, 21, 15, 10],\n                     name='Sunflowers',\n                     marker_colors=sunflowers_colors),\n              1,\n              2)\nfig.add_trace(go.Pie(labels=labels,\n                     values=[38, 19, 16, 14, 13],\n                     name='Irises',\n                     marker_colors=irises_colors),\n              2,\n              1)\nfig.add_trace(go.Pie(labels=labels, \n                     values=[31, 24, 19, 18, 8], \n                     name='The Night Caf\u00e9',\n                     marker_colors=cafe_colors), \n              2,\n              2)\n\n# Tune layout and hover info\nfig.update_traces(hoverinfo='label+percent+name',\n                  textinfo='none')\nfig.update(layout_title_text='Van Gogh: 5 Most Prominent Colors Shown Proportionally',\n           layout_showlegend=False)\n\nfig = go.Figure(fig)\nfig.show()","dc943905":"timesData.head(2)","a1e93932":"# data preparation | data tayyorlash\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\nvalues = [float(each.replace(',', '.')) for each in df2016.num_students]\nlabels = df2016.university_name\n\n# vizualization\nfig = {\n    'data': [{\n        'labels': labels,\n        'name': 'Number of Students rates',\n      \"domain\": {\"x\": [0.5, .9]},\n        'values': values,\n        'hoverinfo': 'label+percent+value',\n        'textposition': 'inside',\n        'textinfo': 'percent',\n        'pull': [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05],\n        'hole': .25,\n        'type': 'pie'\n    }],\n    'layout': {\n        'title': 'Universities Number of Students rates',\n        'annotations': [{\n            \"font\": { \"size\": 20},\n            \"showarrow\": False,\n            \"text\": \"Number of Students\",\n            \"x\": 0.15,\n            \"y\": 1\n        },]\n    }\n}\niplot(fig)","d802986d":"timesData.info()","38d313aa":"timesData.head(2)","6cc4bda6":"data = timesData[timesData.year == 2014].iloc[:10,:]\ndata.replace(['-'], 20, inplace = True)\ndata.income = data.income.astype('float')\n\n# vizualization\nimport seaborn as sns\ncolors = ['blue', 'red', 'yellow', 'gray', 'green', 'yellow', 'pink', 'black', 'white', 'green']\n\nfig = go.Figure(data=[go.Scatter(x=data.international, y=data.income,\n                                 mode=\"markers\",\n                                 marker=dict(size=data.income, color= colors, line=dict(color='#000000', width=0.5)),\n                                )\n      ])\nfig.show()","d7e18c16":"# data preparation | datani tayyorlash\ndf2016 = timesData[timesData.year == 2016].iloc[:20, :]\nnum_students = [float(each.replace(',', '.')) for each in df2016.num_students]\ncolors = [float(each.replace(',', '.')) for each in df2016.international]\n\n# taking abbreviation of University name | Universitet nomini qisqartmasini olish\nuniversity_name = []\nfor names in df2016.university_name:\n    abb = ''\n    for name in names.split():\n        if name[0].isupper():\n            abb = abb + name[0]\n    university_name.append(abb)\n\n# vizualization\nannotations = []\nfor u_name, rank, teaching, size in zip(university_name, df2016.world_rank, df2016.teaching, num_students):\n    annotations.append({\n            \"font\": { \"size\": 10 },\n            \"showarrow\": False,\n            \"text\": u_name,\n            \"x\": float(rank),\n            \"y\": float(teaching) + len(str(round(size * 2)))\n    })\n    \nfig = {\n    'data': [{\n        'x': df2016.world_rank,\n        'y': df2016.teaching,\n        'mode': 'markers',\n        'marker': {\n            'size': num_students,\n            'color': colors,\n            'showscale': True\n        },\n        'text': df2016.university_name\n    }],\n    'layout': {\n        'title': \"\"\"Top 20 Universities World Rank and Teaching in 2016<br>\n2016-yil top 20 universitet World Rank va Teachingi\"\"\",\n        'annotations': annotations,\n        'xaxis': {'title': 'World Rank' },\n        'yaxis': {'title': 'Teaching' }\n    }\n}\niplot(fig)","2d732b9b":"# data preparation | datani tayyorlash\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\n# vizualization\nfig = {\n    'data': [{\n        'x': x2011,\n        'opacity': .75,\n        'name': '2011',\n        'type': 'histogram',\n        'marker': {\n            'color': 'rgba(171, 50, 96, 0.6)',\n        }\n    }, {\n        'x': x2012,\n        'opacity': .75,\n        'name': '2012',\n        'type': 'histogram',\n        'marker': {\n            'color': 'rgba(12, 50, 196, 0.6)',\n        }\n    }],\n    'layout': {\n        'barmode': 'overlay',\n        'title': 'Student Staff Ratio in 2011 and 2012',\n        'xaxis': {'title': 'Student Staff Ratio', 'zeroline': True, 'zerolinewidth': 3, 'zerolinecolor': 'DarkGreen' },\n        'yaxis': {'title': 'Count', 'zeroline': True, 'zerolinewidth': 3, 'zerolinecolor': 'green' }\n    }\n}\n\niplot(fig)","00445742":"# Let's see what we have | Nimalar bor ekan?\ntimesData.country.value_counts()","fe61ad2d":"# data preparation\ncountries = timesData.country # [timesData.year == 2011]\ncountries.replace(['United States of America'], 'USA', inplace = True)\ncountries.replace(['United Kingdom'], 'UK', inplace = True)\n# vizualization\nplt.subplots(figsize=(8, 8))\n\nwordCloud = WordCloud(\n    background_color = 'white',\n    width = 512,\n    height = 384,\n    ).generate(\" \".join(countries))\n\nplt.imshow(wordCloud)\nplt.axis('off')\nplt.savefig('my_interesting_graph.png')\n\nplt.show()","93d81184":"# data preparation | datani tayyorlash\nx2015 = timesData[timesData.year == 2015]\n\n# vizualization\nfig = {\n    'data': [{\n        'y': x2015.total_score,\n        'opacity': .75,\n        'name': 'Total Score of Universities in 2015',\n        'type': 'box',\n        'marker': {\n            'color': 'rgb(12, 12, 140)',\n        }\n    }, {\n        'y': x2015.research,\n        'opacity': .75,\n        'name': 'Research of Universities in 2015',\n        'type': 'box',\n        'marker': {\n            'color': 'rgb(12, 128, 128)',\n        }\n    }],\n    'layout': {\n        'boxmode': 'overlay',\n        'title': \"\"\"Total Score and Research of Universities in 2015<br>\n2015 yilda universitetlarning umumiy bahosi va tadqiqotlari\"\"\",\n    }\n}\n\niplot(fig)","68bcddd5":"# import figure factory\nimport plotly.figure_factory as ff\n\n# data preparation | datani tayyorlash\ndf = timesData[timesData.year == 2015]\ndf2015 = df.loc[:, ['research', 'international', 'total_score']]\ndf2015['index'] = np.arange(1, len(df2015) + 1)\n\n# vizualization\nfig = ff.create_scatterplotmatrix(df2015, diag = 'box', index = 'index', colormap = 'Portland',\n                                 colormap_type = 'cat',\n                                 height = 700, width = 700)\niplot(fig)","86dbc337":"fig = {\n    'data': [{\n        'x': df.world_rank,\n        'y': df.teaching,\n        'name': 'Teaching',\n        'marker': {\n            'color': 'rgba(16, 112, 2, 0.8)'\n        },\n        'type': 'scatter',\n        'mode': 'lines+markers',\n    }, {\n        'x': df.world_rank,\n        'y': df.income,\n        'xaxis': 'x2',\n        'yaxis': 'y2',\n        'name': 'Income',\n        'marker': {\n            'color': 'rgba(160, 112, 20, 0.8)'\n        },\n        'type': 'scatter',\n        'mode': 'lines',\n    },],\n    'layout': {\n        'xaxis2': {\n            'domain': [.6, .95],\n            'anchor': 'y2',\n        },\n        'yaxis2': {\n            'domain': [.6, .95],\n            'anchor': 'x2',\n        },\n        'title': 'Income and Teaching vs World Rank of Universities',\n        'xaxis': { 'title': 'World Rank' },\n    }\n}\niplot(fig)","2361c7bb":"df.info()","bcadd7fd":"# giving title to x, y, z axis\n# version-1\nfig = {\n    'data': [{\n        'x': [1, 2],\n        'y': [1, 2],\n        'z': [1, 2],\n        'name': 'Legendary',\n        'type': 'scatter3d',\n        'mode': 'markers',\n    },],\n    'layout': {\n        'showlegend': False,\n        'scene':{\n            'xaxis':{ 'title': 'x axis' },\n            'yaxis':{ 'title': 'y axis' },\n            'zaxis':{ 'title': 'z axis' },\n        }\n    }\n}\niplot(fig)\n# version-2\n\n# trace1 = go.Scatter3d(\n#     x=[1, 2],\n#     y=[1, 2],\n#     z=[1, 2],\n#     name='Legendary'\n# )\n# data = go.Data([trace1])\n# layout = go.Layout(\n#     showlegend=True,\n#     scene=go.Scene(\n#         xaxis=dict(title='x axis title'),\n#         yaxis=dict(title='y axis title'),\n#         zaxis=dict(title='z axis title')\n#     )\n# )\n\n# go.FigureWidget(data=data, layout=layout)","67180c64":"# data preparation | datani tayyorlash\nhover_info = []\nfor name, rank, research, citation in zip(df.university_name, df.world_rank, df.research, df.citations):\n    hover_info.append(\"Name: {}<br>World Rank: {}<br>Research: {}<br>Citations: {}\".format(name, rank, research, citation))\n\n# vizualization\nfig = {\n    'data':[{\n        'x': df.world_rank,\n        'y': df.research,\n        'z': df.citations,\n        'text':  hover_info,\n        'hoverinfo': 'text', # 'skip', 'text', default: 'x+y+z'\n        'type': 'scatter3d',\n        'mode': 'lines+markers',\n        'marker': {\n            'size': 10,\n            'color': 'blue',\n        }\n    }],\n    'layout': {\n        'title': '3D plot World Rank, Research and Citations of universities in 2015',\n        'margin': {\n            'l': 0,\n            'r': 0,\n            't': 0,\n            'b': 0,\n        },\n        'scene': {\n            'xaxis': { 'title': 'World Rank' },\n            'yaxis': { 'title': 'Research' },\n            'zaxis': { 'title': 'Citations' },\n        }\n        \n    }\n}\niplot(fig)","ce9e5585":"# making tarces | tracelar hosil qilish\ntrace1 = go.Scatter(\n    x = df.world_rank,\n    y = df.research,\n    name = 'Research',\n)\ntrace2 = go.Scatter(\n    x = df.world_rank,\n    y = df.citations,\n    xaxis = 'x2',\n    yaxis = 'y2',\n    name = 'Citations',\n)\ntrace3 = go.Scatter(\n    x = df.world_rank,\n    y = df.income,\n    xaxis = 'x3',\n    yaxis = 'y3',\n    name = 'Income',\n)\ntrace4 = go.Scatter(\n    x = df.world_rank,\n    y = df.total_score,\n    xaxis = 'x4',\n    yaxis = 'y4',\n    name = 'Total Score',\n)\n\n# making figure\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis = { 'domain': [0, .45], },\n    yaxis = { 'domain': [0, .45], },\n    \n    xaxis2 = { 'domain': [.55, 1], 'anchor': 'y2' },\n    yaxis2 = { 'domain': [0, .45], 'anchor': 'x2' },\n    \n    xaxis3 = { 'domain': [0, .45], 'anchor': 'y3' },\n    yaxis3 = { 'domain': [.55, 1], 'anchor': 'x3' },\n    \n    xaxis4 = { 'domain': [.55, 1], 'anchor': 'y4' },\n    yaxis4 = { 'domain': [.55, 1], 'anchor': 'x4' },\n    \n    title = 'Research, Citation, Income and Total Score vs World Rank of Universities'\n)\n\n# vizualization\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","251ca0da":"<a id=\"9\"><\/a><br>\n# 9. Box Plot","6ca8709e":"<a id=\"11\"><\/a><br>\n# 11. Inset Plots","d32db090":"<a id=\"2\"><\/a><br>\n# 2. Line Charts","364a3d19":"# INTRODUCTION | KIRISH\n<font style=\"margin-left: 30px; font-size: 18px;\">\n    \n* This notebook shows some basic usefull ways of using plotly library\n    * <b><i>Plotly librirary<\/i><\/b> -- Open Source Graphing Library, which is Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.\n<br\/><br\/>\n* (*Uzb*)Bu notebook plotly kutubxonasidan foydalanishning bir qancha boshlang'ich va kerakli bo'lgan yo'llarini ko'rsatadi\n    * <b><i>Plotly kutubxonasi<\/i><\/b> -- Open Source Graphing Library, bu Python grafika kutubxonasi interfaol va sifatli nashrlarni yaratadi. Qanday qilib line plot, scatter plot, area chart, bar chart, error bar, box plot, histogram, heatmap, subplot, multiple-axes, polar chart, and bubble chartlar hosil qilish bo'yicha misollar keltirilgan.\n<\/font>\n\n## Content | Mundarija:\n1. [Loading data and explonation of features | Datani yuklash va elementlarini aniqlash](#1)\n1. [Line Charts](#2)\n1. [Scatter Charts](#3)\n1. [Bar Charts](#4)\n1. [Pie Charts](#5)\n1. [Bubble Charts](#6)\n1. [Histogram](#7)\n1. [Word Cloud](#8)\n1. [Box Plot](#9)\n1. [Scatter Plot Matrix](#10)\n1. [Insert Plots](#11)\n1. [3D Scatter Plot with Colorscaling](#12)\n1. [Multiple Sublots](#13)","86707ed0":"## Students rate of top 7 universities in 2016\n## 2016-yilda top 7 universitetning talabalari darajasi","c0a6a22a":"<a id=\"6\"><\/a><br>\n# 6. Bublle Charts","67540285":"<a id=\"10\"><\/a><br>\n# 10. Scatter Matrix Plots","958aab82":"<a id=\"3\"><\/a><br>\n# 3. Scatter Charts","43bf5e94":"<a id=\"4\"><\/a><br>\n# 4. Bar Charts","7dd3b627":"<a id=\"7\"><\/a><br>\n# 7. Histogram\n### Lets look at histogram of students-staff ratio in 2011 and 2012 years.\n### 2011 va 2012 yillarda talabalar va xodimlar nisbati Histogram(gistogrammas)ini ko'rib chiqaylik.","10c05a26":"<a id=\"5\"><\/a><br>\n# 5. Pie Charts","894aa0f0":"<a id=\"13\"><\/a><br>\n# 13. Multiple Subplots\n<font style=\"font-size: 18px; color: rgb(20, 100, 200)\">\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<\/font>","76f13566":"<a id=\"12\"><\/a><br>\n# 12. 3D Scatter Plot with Colorscaling\n<font style=\"font-size: 18px; color: rgb(20, 100, 200)\">\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<\/font>","7433d69a":"<a id=\"8\"><\/a><br>\n# 8. Word Cloud\n### Not a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in data.\n### Pyplot emas, lekin uni o'rganish vizualizatsiya uchun juda yaxshi. Datamizda qaysi davlat eng ko'p tilga olinishini ko'rib chiqaylik.","ca764115":"<a id=\"1\"><\/a><br>\n# 1. Loading data and explonation of features | Datani yuklash va elementlarini aniqlash\n<font style=\"font-size: 15px; color: green\">\n\n* <b><h4>timesData includes 14 features | timesData 14 ta elementga ega:<\/h4><\/b>\n    1. world_rank\n    1. university_name\n    1. country\n    1. teaching\n    1. international\n    1. research\n    1. citations\n    1. income\n    1. total_score\n    1. num_students\n    1. student_staff_ratio\n    1. international_students\n    1. female_male_ratio\n    1. year\n"}}