{"cell_type":{"e39c2598":"code","abd1788c":"code","8a64dd1a":"code","28d80ef7":"code","72f11440":"code","940e4cc7":"code","5aecdb64":"code","92d2eb3c":"code","17839d4c":"code","17f0e3b9":"markdown","dbe74eb9":"markdown","de0cf872":"markdown","6838904f":"markdown","cbf7f198":"markdown"},"source":{"e39c2598":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","abd1788c":"data_hearth = pd.read_csv(\"..\/input\/heart.csv\")\ndata_hearth.head(10)\ndata = data_hearth","8a64dd1a":"data.info()","28d80ef7":"data.corr()","72f11440":"x,y = data_hearth.loc[:,data_hearth.columns != 'target'], data_hearth.loc[:,'target']\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)","940e4cc7":"from sklearn.neighbors import KNeighborsClassifier\nscores=[]\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    scores.append(knn2.score(x_test,y_test))\n  \nplt.plot(range(1,15),scores)\nplt.show()","5aecdb64":"\nknn = KNeighborsClassifier(n_neighbors=4)\nknn.fit(x_train,y_train)\npredictions = knn.predict(x_test)\nacc = knn.score(x_test,y_test)*100\nprint(acc)","92d2eb3c":"from tensorflow import set_random_seed\nset_random_seed(101)\nimport tensorflow\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense # build our layers library\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1]))\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn = build_classifier, epochs = 500)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 3)\nmean = accuracies.mean()\nvariance = accuracies.std()\n","17839d4c":"print(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","17f0e3b9":"Lets try neural networks.","dbe74eb9":"**ANN**","de0cf872":"*We should'nt use KNN :)","6838904f":"Thanks for your reading. If you support me just vote up and leave a comment. Have a nice day.","cbf7f198":"**KNN**"}}