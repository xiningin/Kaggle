{"cell_type":{"af9a517f":"code","ecfeb3ee":"code","f8c619c3":"code","336009d7":"code","fc4f8c08":"code","67bae685":"code","f71cc441":"code","eeda2a2c":"code","aa0ac366":"code","81f02f6d":"code","c04efa1d":"code","fb9c7f53":"code","af8989b3":"code","c5880752":"code","077e03c9":"code","dfdf964f":"code","0c5698cc":"code","adf92618":"code","e0b19a64":"code","08991a39":"code","7547c843":"code","068e4a56":"code","3ebe8021":"code","237c7696":"code","c7b17447":"code","08759782":"code","500e4362":"code","7594dd05":"code","3f337040":"code","28061b52":"code","42ab8218":"code","37734fd3":"markdown","a39f06df":"markdown","98abe704":"markdown","4ff115c9":"markdown","4c216ba3":"markdown","4dc90c2a":"markdown","103c4cd4":"markdown","7de6cd6d":"markdown","e3473e59":"markdown","fc3a4191":"markdown","b8c8651c":"markdown","d7d60819":"markdown","f5295d32":"markdown","afae3671":"markdown","360d1135":"markdown","d6b5f1d0":"markdown","e085d1f1":"markdown","b2967f26":"markdown","92f07fea":"markdown","a6a53d76":"markdown","f130761d":"markdown","450b4e84":"markdown"},"source":{"af9a517f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ecfeb3ee":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n%matplotlib inline\nimport io\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f8c619c3":"df = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndf.head()","336009d7":"print(df.columns)\nprint(df.shape)","fc4f8c08":"df.info()","67bae685":"corrmat = df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,15))\ng = sns.heatmap(df[top_corr_features].corr(),annot = True)","f71cc441":"sns.boxplot(df['price_range'],df['ram']);\nplt.show()\nsns.swarmplot(df['price_range'],df['ram']);","eeda2a2c":"sns.barplot(df['price_range'],df['ram']);","aa0ac366":"sns.violinplot(df['price_range'],df['battery_power']);","81f02f6d":"plt.figure(figsize=(20,5))\nplt.hist(df['battery_power'],bins=50)\nplt.show()","c04efa1d":"sns.swarmplot(df['price_range'],df['px_height']);\nplt.show()\nsns.boxplot(df['price_range'],df['px_height']);","fb9c7f53":"sns.swarmplot(df['price_range'],df['px_width']);\nplt.show()\nsns.boxplot(df['price_range'],df['px_width']);","af8989b3":"sns.pointplot(df['price_range'],df['fc'])","c5880752":"sns.pointplot(df['price_range'],df['pc']);","077e03c9":"plt.figure(figsize=(10,6))\ndf['fc'].hist(alpha=0.5,color='blue',label='Front camera')\ndf['pc'].hist(alpha=0.5,color='red',label='Primary camera')\nplt.legend()\nplt.xlabel('MP');","dfdf964f":"labels_4g = ['4G-Supported','Not Supported']\nvalues_4g = df['four_g'].value_counts().values\nfig1, ax1 = plt.subplots()\nax1.pie(values_4g, labels=labels_4g, shadow=True, startangle=90, autopct='%1.1f%%');","0c5698cc":"sns.countplot(df['price_range'],hue=df['four_g'])","adf92618":"labels_4g = ['3G-Supported','Not Supported']\nvalues_4g = df['three_g'].value_counts().values\nfig1, ax1 = plt.subplots()\nax1.pie(values_4g, labels=labels_4g, shadow=True, startangle=90, autopct='%1.1f%%');","e0b19a64":"sns.countplot(df['price_range'],hue=df['three_g'])","08991a39":"sns.boxplot(df['price_range'],df['int_memory']);","7547c843":"sns.boxenplot(df['price_range'],df['sc_h']);\nplt.show()\nsns.boxenplot(df['price_range'],df['sc_w']);","068e4a56":"df = df[~((df['ram'] < 1410) & (df['price_range'] == 2))] #dropping phones less belonging to price range 2 and ram less than 1410 mb. \ndf = df[~((df['ram'] > 1650) & (df['price_range'] == 0))] #dropping phones less belonging to price range 0 and ram greater than 1650 mb. \ndf = df.drop(columns=(['m_dep'])) #mobile depth doesn't have a role in categorizing price range\n\ndf = pd.get_dummies(df, columns = ['blue','dual_sim','four_g','three_g','touch_screen','wifi']) \n# Creating a dummy variable for the categorical features \n\nstandardScaler = StandardScaler() #scaling down the numeric\/continous variables\ncolumns_to_scale = ['battery_power','ram','px_height','px_width','mobile_wt','int_memory','sc_h','sc_w','talk_time','fc','n_cores','pc']\ndf[columns_to_scale] = standardScaler.fit_transform(df[columns_to_scale])\ndf.head()","3ebe8021":"X=df.drop('price_range',axis=1) #defining X \ny=df['price_range'] #defining y\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)","237c7696":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression(C=1, \n                              max_iter=1000, \n                              penalty='l1',\n                              solver='saga')","c7b17447":"from sklearn.model_selection import GridSearchCV\nparam_grid1 = [\n    {'penalty' : ['l1','l2','elasticnet','none'],\n     'C' : np.logspace(-4,4,20),\n     'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n     'max_iter': [100,1000,2500,5000]\n    }\n]\n\nrf_Grid1 = GridSearchCV(estimator = logmodel, param_grid = param_grid1, cv = 3, verbose = True, n_jobs = -1)\nrf_Grid1.fit(X_train,y_train)","08759782":"rf_Grid1.best_estimator_","500e4362":"logmodel.fit(X_train,y_train)\ny_predict = logmodel.predict(X_test)\nprint(accuracy_score(y_test,y_predict))\nprint(classification_report(y_test,y_predict))\npd.crosstab(y_test,y_predict)","7594dd05":"url1 = '\/kaggle\/input\/mobile-price-classification\/test.csv'\ntest_df = pd.read_csv(url1) #importing the test file \ntest_df.head()","3f337040":"test_df1 = test_df.drop('id', axis=1) #id column is removed as we need to predict for this dataset\ntest_df1 = test_df1.drop(columns=(['m_dep'])) #columns which are not present in train dataset are removed\ntest_df1 = pd.get_dummies(test_df1, columns = ['blue','dual_sim','four_g','three_g','touch_screen','wifi']) #dummy values for the columns(same columns as train dataset)\n\nstandardScaler = StandardScaler() #standardscaling the columns(same columns as train dataset)\ncolumns_to_scale = ['battery_power','ram','px_height','px_width','mobile_wt','int_memory','sc_h','sc_w','talk_time','fc','n_cores','pc']\ntest_df1[columns_to_scale] = standardScaler.fit_transform(test_df1[columns_to_scale]) \n\ntest_df1.head(1)","28061b52":"Predicted_price = logmodel.predict(test_df1)\nPredicted_price","42ab8218":"test_df['predicted_price'] = Predicted_price #adding predicted column to the test dataset\ntest_df.head()","37734fd3":"## Predicting for the test data","a39f06df":"## Battery Power (battery_power)\nTotal energy a battery can store in mAh","98abe704":"Most of the phones are 3G compatible in all price ranges.","4ff115c9":"## Internal Memory (int_memory)\nInternal Memory in Gigabytes","4c216ba3":"## Preprocessing","4dc90c2a":"# Data Vizualization\n## Correlation","103c4cd4":"## Pixel Height (px_height) \nPixel Resolution Height","7de6cd6d":"## Screen Height and Screen Width (sc_h, sc_w)\nScreen height and screen width in cm","e3473e59":"## Pixel Width (px_width)\nPixel Resolution Width","fc3a4191":"## MOBILE PRICE CLASSIFICATION \n\nIn this data:\n* id:ID\n* battery_power:Total energy a battery can store in one time measured in mAh\n* blue:Has bluetooth or not\n* clock_speed:speed at which microprocessor executes instructions\n* dual_sim:Has dual sim support or not\n* fc:Front Camera mega pixels\n* four_g:Has 4G or not\n* int_memory:Internal Memory in Gigabytes\n* m_dep:Mobile Depth in cm\n* mobile_wt:Weight of mobile phone\n* n_cores:Number of cores of processor\n* pc:Primary Camera mega pixels\n* px_height:Pixel Resolution Height\n* px_width:Pixel Resolution Width\n* ram:Random Access Memory in Megabytes\n* sc_h:Screen Height of mobile in cm\n* sc_w:Screen Width of mobile in cm\n* talk_time:longest time that a single battery charge will last when you are\n* three_g:Has 3G or not\n* wifi:Has wifi or not","b8c8651c":"## RAM (ram)\nRandom Access Memory","d7d60819":"Internal memory does not play a significant role in categorizing price range.","f5295d32":"It can be noted that phones belonging to price range 3 have more screen height and width. However, the converse need not be true.","afae3671":"RAM is strongly correlated with price_range which can be visualized in the above plots. The price range increases as the RAM increases. ","360d1135":"![Mobile-Phone-Evolution.jpg](attachment:Mobile-Phone-Evolution.jpg)","d6b5f1d0":"## Front Camera (fc)\nFront Camera mega pixels","e085d1f1":"# ----------------------------------------------**----------------------------------------------","b2967f26":"## Model Training: Logistic Regression","92f07fea":"## 4G and 3G Supported (four_g, three_g)\n4G and 3G compatibility","a6a53d76":"## Primary Camera (pc)\nPrimary Camera mega pixels","f130761d":"There are no null values in the dataset.","450b4e84":"Mobile phones belonging to price range 3 have more phones compitable to 4G. However, it is very insignificant with the given dataset."}}