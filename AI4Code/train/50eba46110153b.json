{"cell_type":{"8ffe9289":"code","1ba06736":"code","da89f69f":"code","b9bef72d":"code","10cbf6e9":"code","370a8fbf":"code","1bf38f98":"code","9a8ee955":"code","86c33a19":"code","6133a912":"code","f1242109":"code","5f263392":"code","32527689":"code","723b1a28":"code","8cc378a6":"code","b77721e6":"code","8d5f8801":"code","6f42e1eb":"code","07d5c5c4":"code","5ece6b43":"code","b4ed909b":"code","d191720d":"code","3507a039":"code","300643a1":"markdown","38257b2b":"markdown","e096155b":"markdown","ae8dd74c":"markdown","ed7bb9e0":"markdown","e9c3d503":"markdown","943f7605":"markdown","e397ce60":"markdown","426ae59f":"markdown","3ee941ef":"markdown","5cc05663":"markdown","21b5cc50":"markdown","9a422798":"markdown","c754e890":"markdown","7bcb8583":"markdown","4a77c0e2":"markdown","0d1b7c5f":"markdown","38daa928":"markdown","6f088ddc":"markdown","275e6557":"markdown","e0953ef0":"markdown","dcc1ae92":"markdown","77be1999":"markdown","7a8d7b5d":"markdown","c14c7a81":"markdown"},"source":{"8ffe9289":"!python --version","1ba06736":"import tensorflow as tf # \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\nimport keras # API \u0434\u043b\u044f TensorFlow\nimport numpy as np # \u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\nimport matplotlib as mpl # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nimport matplotlib.pyplot as plt # MATLAB-\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nimport pandas as pd # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\nimport seaborn as sns # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 (\u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0430\u0434 matplotlib)\nimport os # \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\n\n# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n%matplotlib inline","da89f69f":"pkgs = {\n    '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u0430': ['TensorFlow', 'Keras', 'NumPy', 'Matplotlib', 'Pandas', 'Seaborn'],\n    '\u0412\u0435\u0440\u0441\u0438\u044f': [i.__version__ for i in [tf, keras, np, mpl, pd, sns]]}\n\ndf_pkgs = pd.DataFrame(data = pkgs) # \u0412\u0435\u0440\u0441\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\ndf_pkgs.head(None).style.hide_index() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 N \u0441\u0442\u0440\u043e\u043a \u0438\u043b\u0438 \u0432\u0441\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c None","b9bef72d":"# \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\npd.set_option('display.max_columns', 15) # \u0421\u0442\u043e\u043b\u0431\u0446\u044b\npd.set_option('display.max_rows', 10) # \u0421\u0442\u0440\u043e\u043a\u0438","10cbf6e9":"np.random.seed(1) # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0441\u0435\u0432\u0434\u043e\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ndf_train = pd.read_csv(\n    os.path.join('..\/input\/sign-language-mnist\/sign_mnist_train', 'sign_mnist_train.csv')\n)\ndf_train = df_train.iloc[np.random.permutation(len(df_train))] # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","370a8fbf":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ndf_test = pd.read_csv(\n    os.path.join('..\/input\/sign-language-mnist\/sign_mnist_test', 'sign_mnist_test.csv')\n)","1bf38f98":"# \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\nfor i in range(0,len(df_train.label.values)):\n    if df_train.label[i] > 8:\n        df_train.label[i] -= 1\n\n# \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\nfor i in range(0,len(df_test.label.values)):\n    if df_test.label[i] > 8:\n        df_test.label[i] -= 1","9a8ee955":"df_train.head(5) # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 N \u0441\u0442\u0440\u043e\u043a \u0438\u043b\u0438 \u0432\u0441\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c None","86c33a19":"df_train.shape","6133a912":"train_size = df_train.shape[0] # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0436\u0435\u0441\u0442\u043e\u0432\n\nval_percent = 10 # \u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445\nval_size = int(df_train.shape[0] * (1 \/ val_percent)) # \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f\ntrain_size -= val_size # \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f\n\n# \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nX_train = np.asarray(df_train.iloc[:train_size, 1:]).reshape([train_size, 28, 28, 1])\ny_train = np.asarray(df_train.iloc[:train_size, 0]).reshape([train_size, 1])\n\n# \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u044b\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nX_val = np.asarray(df_train.iloc[train_size:, 1:]).reshape([val_size, 28, 28, 1])\ny_val = np.asarray(df_train.iloc[train_size:, 0]).reshape([val_size, 1])","f1242109":"X_train.shape","5f263392":"X_val.shape","32527689":"# \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nX_test = np.asarray(df_test.iloc[:, 1:]).reshape([-1, 28, 28, 1])\ny_test = np.asarray(df_test.iloc[:, 0]).reshape([-1, 1])","723b1a28":"X_test.shape","8cc378a6":"# \u0412\u044b\u0431\u043e\u0440\u043a\u0438\nX_train = X_train \/ 255 # \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f\nX_val = X_val \/ 255 # \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f\nX_test = X_test \/ 255 # \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f","b77721e6":"def _countplot(df, sampling, pad):\n    \"\"\"\n    \u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n\n    (pandas.core.frame.DataFrame, str, int) -> None\n\n    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n        df - \u0414\u0430\u043d\u043d\u044b\u0435\n        sampling - \u0412\u044b\u0431\u043e\u0440\u043a\u0430 (train, val)\n        pad - \u041e\u0442\u0441\u0442\u0443\u043f \u043e\u0442 \u0440\u044f\u0434\u0430 \u0434\u043e \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: None\n    \"\"\"\n\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u044b\n    plt.figure(\n        figsize = (18, 11) # \u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n    )\n\n    ax = plt.axes() # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439 \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0444\u0438\u0433\u0443\u0440\u0435\n    ax.xaxis.tick_bottom() # \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u043a \u0432 \u043d\u0438\u0436\u043d\u044e\u044e \u0447\u0430\u0441\u0442\u044c\n\n    # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n    ax = sns.countplot(df.label, label = '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n\n    # \u041c\u0435\u0442\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n    if sampling == 'train':\n        iloc = df.iloc[train_size:, :]\n        title = '\u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439'\n    elif sampling == 'val':\n        iloc = df.iloc[:train_size, :]\n        title = '\u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439'\n    \n    counts = iloc.groupby(df.label)['label'].count().index.tolist()\n\n    i = 0\n\n    for p in ax.patches:\n        height = p.get_height()\n\n        ax.text(\n            p.get_x() + p.get_width() \/ 2.0, # X \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430\n            height + pad, # Y \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430\n            df.label.value_counts()[counts[i]], # \u0422\u0435\u043a\u0441\u0442\n            ha = 'center', # \u0412\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u0435\n            fontdict = {\n                'fontsize': 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n                'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n            },\n        )\n\n        i += 1\n\n    # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a\n    ax.tick_params(\n        axis = 'x', # \u041e\u0441\u044c\n        direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n        color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n        labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        bottom = True,  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n    )\n    ax.tick_params(\n        axis = 'y', # \u041e\u0441\u044c\n        direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n        color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n        labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        left = True  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n    )\n\n    # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0441\u0435\u0439\n    ax.set_title(\n        label = '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 ' + title + ' \u0432\u044b\u0431\u043e\u0440\u043a\u0438', # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n        fontdict = {\n            'fontsize': 18, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n            'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n        },\n        pad = 20 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n    )\n\n    # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n    ax.set_xlabel(\n        '\u041c\u0435\u0442\u043a\u0438',\n        fontsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        fontdict = {\n            'color': '#000000' # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        },\n        labelpad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f\n\n    );\n    ax.set_ylabel(\n        '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e',\n        fontsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        fontdict = {\n            'color': '#000000' # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        },\n        labelpad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f\n    );\n    \n    plt.show() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b","8d5f8801":"_countplot(df_train, 'train', 15)\n_countplot(df_test, 'val', 5)","6f42e1eb":"rows = 4 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\ncols = 6 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n\npic_index = 0 # \u0421\u0447\u0435\u0442\u0447\u0438\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n\nfig = plt.gcf() # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b\nfig.set_size_inches(cols * 2.4, rows * 2.4) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n\nidx_show = [] # \u041c\u0435\u0442\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0436\u0435 \u0431\u044b\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b\n\ncnt = 0 # \u0421\u0447\u0435\u0442\u0447\u0438\u043a\n\nfor i in range(0, len(X_train)):\n    # \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u043c\u0435\u0442\u043a\u043e\u0439 \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u043b\u0430\u0441\u044c\n    if y_train[i][0] not in idx_show:\n        cnt += 1\n        \n        sp = plt.subplot(rows, cols, cnt)\n        sp.axis('Off') # \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439\n\n        plt.imshow(X_train[i].reshape([28, 28]), cmap = 'gray') \n\n        label = y_train[i][0] if y_train[i][0] <= 8 else y_train[i][0] + 1 # \u0411\u0443\u043a\u0432\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430\n        \n        plt.title('{} ({})'.format(y_train[i][0], chr(label + 65)), y = -0.15, fontsize = 14, color = '#000000')\n        \n        idx_show.append(y_train[i][0]) # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043a\u0438 \n        \n        if cnt == rows * cols:\n            break\n\nplt.suptitle(\n    '\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438', # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n    fontsize = 20, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    fontdict = {\n        'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    },\n    y = 1.04 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n)\n\nplt.tight_layout(pad = 0, w_pad = 0, h_pad = 1.0) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u044f\u043c\u0438\n\nplt.show() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b","07d5c5c4":"# \u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u044f\u043c\u0438 \u0432 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\nmodel = keras.Sequential([\n    \n    # \u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Conv2D(\n        16, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\n        (3, 3), # \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\n        activation = tf.nn.relu, # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n        input_shape = (28, 28, 1) # \u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    ),\n    keras.layers.MaxPooling2D(2, 2), # \u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    \n    # \u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Conv2D(\n        32, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\n        (3, 3), # \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\n        activation = tf.nn.relu # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n    ),\n    keras.layers.MaxPooling2D(2,2), # \u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    \n    keras.layers.Flatten(), # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\n    \n    # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Dense(\n        units = 16, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432\n        activation = tf.nn.relu # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n    ),\n    # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Dense(\n        24, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 = \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n        activation = tf.nn.softmax # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n    )\n])","5ece6b43":"model.compile(\n    optimizer = keras.optimizers.Adam(learning_rate = 0.001), # \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\n    loss = 'sparse_categorical_crossentropy', # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044c\n    metrics = ['accuracy'] # \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u044f\n)\n\nmodel.summary() # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","b4ed909b":"class ModelCallback(keras.callbacks.Callback):\n    \"\"\"\n    \u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432\n    \"\"\"\n    \n    def on_epoch_end(self, epoch, logs = {}):\n        \"\"\"\n        \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u044d\u043f\u043e\u0445\u0438\n        \"\"\"\n        \n        # \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u044d\u043f\u043e\u0445\u0435\n        if(logs.get('accuracy') >= 1.0):\n              self.model.stop_training = True # \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\ncallbacks = ModelCallback() # \u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432","d191720d":"history = model.fit(\n    X_train, # \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n    y_train, # \u041c\u0435\u0442\u043a\u0438\n    batch_size = 32, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n    epochs = 15, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445\n    validation_data = [\n        X_val, # \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n        y_val # \u041c\u0435\u0442\u043a\u0438\n    ],\n    callbacks = [callbacks] # \u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n)","3507a039":"eval_test = model.evaluate(\n    X_test, # \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\n    y_test  # \u041c\u0435\u0442\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n)\n\neval_test_d = {\n    'test_loss': [eval_test[0]],\n    'test_accuracy, %': [eval_test[1] * 100]}\n\ndf_eval_test = pd.DataFrame(data = eval_test_d).round(3).astype(str)\n\ndf_eval_test.head(None).style.hide_index() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 N \u0441\u0442\u0440\u043e\u043a \u0438\u043b\u0438 \u0432\u0441\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c None","300643a1":"## \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 - [Sign Language MNIST](https:\/\/www.kaggle.com\/datamunge\/sign-language-mnist)\n\n### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n> \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 [MNIST](https:\/\/www.kaggle.com\/c\/digit-recognizer\/overview). \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u043c\u0435\u0442\u043a\u0438 (0-25) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u0443\u043a\u0432\u044b (A-Z) \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0436\u0435\u0441\u0442\u043e\u0432. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043c\u0435\u0442\u043a\u0438 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0436\u0435\u0441\u0442\u0430\u043c\u0438: 9 (J) \u0438 25 (Z).\n\n<img src=\"https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/3258\/5337\/amer_sign2.png?GoogleAccessId=web-data@kaggle-161607.iam.gserviceaccount.com&Expires=1587064702&Signature=YO8vRWO5oJmV8doAF2kiXxq3Q4gQhSM%2FyMhcbrSDncm7er8ldrkYN%2FO2xK2ZcADOcgFb%2BfAkeRxTj52YNGDN2MUjw3AXz1i9xivfwLqr%2FF7UaLnrIxdW%2FwPvq%2BjZKTI5%2FAao9sppFa9%2BIgJaY0swjpi8XK4BuRY4qG%2BamGW9GRCwhv0WvJRa9nAZ5%2Fa7ucK6s83jFkHn2axIlfZysttxqh6juPobIwYEifrBq2KF%2BUbG5JQ%2F9mHMOiV20xuXYNBXEownlo9ggCAlf%2Fm1Pvrvey4ZWl0ObjLVr0KFCGxjN%2Fzsp31M7fzQ8k1lv4DwRCEPz03f%2FSCYyoQZbDbPjEv93Q%3D%3D\" alt=\"Sign Language MNIST\" \/>\n\n### \u0417\u0430\u0434\u0430\u0447\u0430\n\n> \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043b\u0430\u0441\u0441\u043e\u0432\u0443\u044e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 24 \u0431\u0443\u043a\u0432 \u0434\u0430\u043a\u0442\u0438\u043b\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0436\u0435\u0441\u0442\u043e\u0432.\n\n<hr>\n\n<font style='color: Red; font-size: 16px'>\u0415\u0441\u043b\u0438 \u0431\u043b\u043e\u043a\u043d\u043e\u0442 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c, \u0413\u041e\u041b\u041e\u0421\u0423\u0415\u041c.<\/font>\n<font style='color: Green; font-size: 16px'>\u041c\u043e\u0439 <a href='https:\/\/github.com\/DmitryRyumin\/'>GitHub<\/a>.<\/font>\n\n<hr>","38257b2b":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","e096155b":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n\n> \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c \u043b\u0435\u0436\u0438\u0442 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 [0, 255]. \u042d\u0442\u043e\u0442 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0432\u044b\u0441\u043e\u043a \u0438 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0442\u0440\u0443\u0434\u043d\u043e \u0443\u0447\u0438\u0442\u044c\u0441\u044f. \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f **\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f** \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e **\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439** \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d [0, 1] \u043f\u0443\u0442\u0435\u043c \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 **255**","ae8dd74c":"### \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\n> 30 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0436\u0435\u0441\u0442\u043e\u0432 \u0441 \u043c\u0435\u0442\u043a\u0430\u043c\u0438","ed7bb9e0":"### \u0412\u0435\u0440\u0441\u0438\u044f Python","e9c3d503":"#### \u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435","943f7605":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","e397ce60":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043e\u043a\n\n**\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0448\u0430\u0433\u043e\u0432:**\n\n- \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432 10% \u043e\u0442 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n- \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e (90% \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430) \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u0443\u044e (10% \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n- \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u043e\u0431\u043e\u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043d\u0430 28x28 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439  \n- \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u043a \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432","426ae59f":"### \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","3ee941ef":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","5cc05663":"### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","21b5cc50":"#### \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","9a422798":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432","c754e890":"### \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\n> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 24710 \u043c\u0430\u0442\u0440\u0438\u0446 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0436\u0435\u0441\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 28x28 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439","7bcb8583":"### \u0421\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u043a \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 9 \u043d\u0430 1\n\n> \u042d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043a\u0438 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0436\u0435\u0441\u0442\u043e\u043c: 9 (J)","4a77c0e2":"### \u0412\u0435\u0440\u0441\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","0d1b7c5f":"#### \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","38daa928":"### \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\n> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 7172 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0436\u0435\u0441\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 28x28 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439","6f088ddc":"### \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\n> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 2745 \u043c\u0430\u0442\u0440\u0438\u0446 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0436\u0435\u0441\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 28x28 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439","275e6557":"### \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\n> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 27455 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0436\u0435\u0441\u0442\u043e\u0432 \u0438 785 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, 1-\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u0436\u0435\u0441\u0442\u043e\u043c, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 784 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 - \u044d\u0442\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","e0953ef0":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","dcc1ae92":"### \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","77be1999":"### \u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","7a8d7b5d":"### \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432","c14c7a81":"### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u043a"}}