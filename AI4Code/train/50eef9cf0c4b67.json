{"cell_type":{"85b3ab7e":"code","64b16f1a":"code","bc625f0c":"code","dd8fe4ba":"code","e2cd174b":"code","4c03c7f8":"code","685c4d0e":"code","b3043b24":"code","4d4197d0":"code","bce7a95e":"code","4b0c1bbe":"code","4a12e929":"code","2939ba4c":"code","aa017edc":"code","c3bd79a4":"code","c8259e78":"code","12227b5b":"code","bc64a12b":"code","3037b9d2":"code","7c40ee84":"code","e9f3b1d7":"code","5d91a111":"code","7fd0c76a":"code","f89d1972":"code","75fead54":"code","77af1b56":"code","40895e21":"code","1ade96b2":"code","ea5588e6":"code","23f6888d":"markdown","2834488d":"markdown","eb8a75ac":"markdown","b8d084f1":"markdown","480a8940":"markdown","727035a0":"markdown"},"source":{"85b3ab7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64b16f1a":"questions=pd.read_csv('\/kaggle\/input\/pythonquestions\/Questions.csv',encoding='latin1')","bc625f0c":"questions.head()","dd8fe4ba":"questions.columns","e2cd174b":"questions.loc[67]['Title']","4c03c7f8":"questions.loc[67]['Body']","685c4d0e":"from absl import logging\n\nimport tensorflow as tf\n\nimport tensorflow_hub as hub\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport re\nimport seaborn as sns\n\nmodule_url = \"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\" \nmodel = hub.load(module_url)\nprint (\"module %s loaded\" % module_url)\ndef embed(input):\n  return model(input)","b3043b24":"word = \"Elephant\"\nsentence = \"I am a sentence for which I would like to get its embedding.\"\nparagraph = (\n    \"Universal Sentence Encoder embeddings also support short paragraphs. \"\n    \"There is no hard limit on how long the paragraph is. Roughly, the longer \"\n    \"the more 'diluted' the embedding will be.\")\nmessages = [word, sentence, paragraph]\n\n# Reduce logging output.\nlogging.set_verbosity(logging.ERROR)\n\nmessage_embeddings = embed(messages)\n\nfor i, message_embedding in enumerate(np.array(message_embeddings).tolist()):\n  print(\"Message: {}\".format(messages[i]))\n  print(\"Embedding size: {}\".format(len(message_embedding)))\n  message_embedding_snippet = \", \".join(\n      (str(x) for x in message_embedding[:3]))\n  print(\"Embedding: [{}, ...]\\n\".format(message_embedding_snippet))","4d4197d0":"message_embeddings.shape","bce7a95e":"questions.shape","4b0c1bbe":"title=list(questions['Title'].values)","4a12e929":"title[45:78]","2939ba4c":"embed1=embed(title[:100000])","aa017edc":"embed2=embed(title[100000:200000])","c3bd79a4":"embed3=embed(title[200000:300000])","c8259e78":"embed4=embed(title[300000:400000])","12227b5b":"embed5=embed(title[400000:500000])","bc64a12b":"embed6=embed(title[500000:])","3037b9d2":"embeds=[np.array(embed1),np.array(embed2),np.array(embed3),np.array(embed4),np.array(embed5),np.array(embed6)]","7c40ee84":"names=['embed1','embed2','embed3','embed4','embed5','embed6']","e9f3b1d7":"import pickle\nfor i in range(6):\n    file=open(names[i],'wb')\n    pickle.dump(embeds[i],file)\n    file.close()","5d91a111":"for i in embeds:\n    print(i.shape)","7fd0c76a":"#search_results","f89d1972":"inputs=input('enter query :')\nvector=embed([inputs])\nvector=np.array(vector)\nfor i in range(len(embeds)):\n    s=np.dot(vector,embeds[i].T)\n    norm_a=np.linalg.norm(embeds[i],axis=1)\n    norm_a=norm_a*np.linalg.norm(vector)\n    s=np.reshape(s,-1)\n    norm=s\/norm_a\n    if i==0:\n        m=list(s)\n    else:\n        m.extend(list(s))\n\n        \nm=np.array(m)\n\nind = np.argpartition(m, -10)[-10:]","75fead54":"x=questions.loc[ind[0]]['Body']","77af1b56":"len(x)","40895e21":"x","1ade96b2":"def preprocess(x):\n    m=re.finditer('\\n',x)\n    mp = [match.start() for match in m]\n    clean=[]\n    for i in range(len(mp)):\n        if i==0:\n            clean.append(x[:mp[i]])\n            continue\n        clean.append(x[mp[i-1]:mp[i]])\n    clean_ans=[]\n    for i in clean:\n        i=re.sub('\\n', '', i)\n        i=re.sub('<.*?>', '', i)\n        if i=='':\n            continue\n        clean_ans.append(i)\n    return clean_ans     \n        ","ea5588e6":"for i in ind:\n    print('Title : '+questions.loc[i]['Title'])\n    x=questions.loc[i]['Body']\n    x=preprocess(x)\n    for j in x:\n        print(j)\n    break\n    ","23f6888d":"# Semantic Search Engine on python related StackOverFlow Data Using Universal Sentence Encoder","2834488d":"# Cleaning the Body of Questions:","eb8a75ac":"# Universal sentence Encoder Model:","b8d084f1":"# Loading Titles:","480a8940":"# > Search Queries","727035a0":"# USE vectors of Titles Store in pickle files "}}