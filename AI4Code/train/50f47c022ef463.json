{"cell_type":{"7c7fc3d6":"code","a38bdebf":"code","2ef3bbc5":"code","e3c6d6dd":"code","beeb8566":"code","a9db55c7":"code","32d24586":"code","f5cadf96":"code","2399e25d":"code","d38a96ea":"code","c51186ec":"code","e64cee5b":"code","7c9bed1f":"code","fcdce501":"code","247d1058":"code","abe31439":"code","ff921ae2":"code","8b3a9cfb":"code","7d4e224e":"code","bd5e4345":"code","9967578f":"code","5fa3c82f":"code","6cf0b6cd":"code","712d22f9":"code","bf7a0c6b":"code","f9342a01":"code","8f24eaee":"code","283c8dfa":"code","82b2620a":"code","7315af2c":"code","0196c1bd":"code","d25792f7":"code","d5b76197":"code","63851ae9":"code","41779429":"markdown","8c7cc180":"markdown","0e865aef":"markdown","432c4164":"markdown","671e94ab":"markdown","c77f772f":"markdown","dcddd3c9":"markdown","994a0579":"markdown","305a29f3":"markdown","7fab5b9b":"markdown","0be13718":"markdown","af9de152":"markdown","5fd8cfff":"markdown","816e5d97":"markdown","32b638c1":"markdown","323204b8":"markdown","b937331d":"markdown","f4d76840":"markdown","39fa3ca3":"markdown","0ae4ffb4":"markdown","3aa43056":"markdown","08df38bc":"markdown","7925bbe4":"markdown","0593770c":"markdown","535da5db":"markdown","d3b00f1a":"markdown"},"source":{"7c7fc3d6":"import os \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller","a38bdebf":"arqs = os.listdir(\"..\/input\/stock-time-series-20050101-to-20171231\/\")\nfor a in ['all_stocks_2006-01-01_to_2018-01-01.csv', \n          'all_stocks_2017-01-01_to_2018-01-01.csv']:\n  arqs.remove(a)","2ef3bbc5":"data=pd.DataFrame(pd.read_csv(\"..\/input\/stock-time-series-20050101-to-20171231\/\"+arqs[0])['Date'])\nfor a in arqs:\n  name=a.replace('_2006-01-01_to_2018-01-01.csv','')\n  arq = pd.DataFrame(pd.read_csv(\"..\/input\/stock-time-series-20050101-to-20171231\/\"+a)[\"Open\"])\n  arq.rename(columns={'Open': name}, inplace=True)\n  data=pd.concat([data, arq], axis=1, join='outer')","e3c6d6dd":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,1], name = data.iloc[:,1].name, line = dict(color = '#17BECF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,2], name = data.iloc[:,2].name, line = dict(color = '#CF1717'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,3], name = data.iloc[:,3].name, line = dict(color = '#AACF17'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,4], name = data.iloc[:,4].name, line = dict(color = '#17CF29'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,5], name = data.iloc[:,5].name, line = dict(color = '#1742CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,6], name = data.iloc[:,6].name, line = dict(color = '#B017CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,7], name = data.iloc[:,7].name, line = dict(color = '#CF1773'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,8], name = data.iloc[:,8].name, line = dict(color = '#17B0CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,9], name = data.iloc[:,9].name, line = dict(color = '#CFA417'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,10], name = data.iloc[:,10].name, line = dict(color = '#CF5E17'), opacity = 0.8))\nfig.update_layout(title_text=data.iloc[:,1].name+', '+data.iloc[:,2].name+', '+data.iloc[:,3].name+', '+data.iloc[:,4].name+', '+data.iloc[:,5].name+', '+\n                 data.iloc[:,6].name+', '+data.iloc[:,7].name+', '+data.iloc[:,8].name+', '+data.iloc[:,9].name+' and '+data.iloc[:,10].name)\nfig.show()","beeb8566":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,11], name = data.iloc[:,11].name, line = dict(color = '#17BECF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,12], name = data.iloc[:,12].name, line = dict(color = '#CF1717'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,13], name = data.iloc[:,13].name, line = dict(color = '#AACF17'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,14], name = data.iloc[:,14].name, line = dict(color = '#17CF29'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,15], name = data.iloc[:,15].name, line = dict(color = '#1742CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,16], name = data.iloc[:,16].name, line = dict(color = '#B017CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,17], name = data.iloc[:,17].name, line = dict(color = '#CF1773'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,18], name = data.iloc[:,18].name, line = dict(color = '#17B0CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,19], name = data.iloc[:,19].name, line = dict(color = '#CFA417'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,20], name = data.iloc[:,20].name, line = dict(color = '#CF5E17'), opacity = 0.8))\nfig.update_layout(title_text=data.iloc[:,11].name+', '+data.iloc[:,12].name+', '+data.iloc[:,13].name+', '+data.iloc[:,14].name+', '+data.iloc[:,15].name+', '+\n                 data.iloc[:,16].name+', '+data.iloc[:,17].name+', '+data.iloc[:,18].name+', '+data.iloc[:,19].name+' and '+data.iloc[:,20].name)\nfig.show()","a9db55c7":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,21], name = data.iloc[:,21].name, line = dict(color = '#17BECF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,22], name = data.iloc[:,22].name, line = dict(color = '#CF1717'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,23], name = data.iloc[:,23].name, line = dict(color = '#AACF17'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,24], name = data.iloc[:,24].name, line = dict(color = '#17CF29'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,25], name = data.iloc[:,25].name, line = dict(color = '#1742CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,26], name = data.iloc[:,26].name, line = dict(color = '#B017CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,27], name = data.iloc[:,27].name, line = dict(color = '#CF1773'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,28], name = data.iloc[:,28].name, line = dict(color = '#17B0CF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,29], name = data.iloc[:,29].name, line = dict(color = '#CFA417'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=data.Date, y=data.iloc[:,30], name = data.iloc[:,30].name, line = dict(color = '#CF5E17'), opacity = 0.8))\nfig.update_layout(title_text=data.iloc[:,21].name+', '+data.iloc[:,22].name+', '+data.iloc[:,23].name+', '+data.iloc[:,24].name+', '+data.iloc[:,25].name+', '+\n                 data.iloc[:,26].name+', '+data.iloc[:,27].name+', '+data.iloc[:,28].name+', '+data.iloc[:,29].name+' and '+data.iloc[:,30].name)\nfig.show()","32d24586":"variations=((data.select_dtypes(float)\/data.select_dtypes(float).shift(1))-1)\nvariations=variations.dropna()","f5cadf96":"f = plt.figure(figsize=(15, 13))\nplt.matshow(variations.corr(), fignum=f.number)\nplt.xticks(range(variations.shape[1]), variations.columns, fontsize=14, rotation=45)\nplt.yticks(range(variations.shape[1]), variations.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14);","2399e25d":"data=data.set_index(\"Date\")\ndata=data.dropna()\ncolumns = data.columns","d38a96ea":"data=data.dropna()\nindex=data.index\ncolumns = data.columns\ndf_stats = pd.DataFrame(columns=['P-value'], index=columns)\nfor col in columns:\n  dftest = adfuller(data[col], autolag='AIC')\n  df_stats.loc[col]=dftest[1]","c51186ec":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=df_stats.index, y=df_stats['P-value'],\n            text=df_stats['P-value'],\n            textposition='auto',)])\n\nfig.show()","e64cee5b":"data_diff = pd.DataFrame(columns=columns)\ndata_diff['Date']=data.index\nfor col in columns:\n  data_diff[col] = pd.DataFrame(np.diff(data[col]))\n\ndata_diff=data_diff.dropna()\nfor col in columns:\n  dftest = adfuller(data_diff[col], autolag='AIC')\n  df_stats.loc[col]=dftest[1]","7c9bed1f":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=df_stats.index, y=df_stats['P-value'],\n            text=df_stats['P-value'],\n            textposition='auto',)])\n\nfig.show()","fcdce501":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data_diff.Date, y=data_diff.iloc[:,1], name = data_diff.iloc[:,1].name, line = dict(color = '#17BECF'), opacity = 0.8))","247d1058":"!pip install pmdarima","abe31439":"from pmdarima.arima import auto_arima\nstepwise_model = auto_arima(data_diff[\"AAPL\"], start_p=1, start_q=1, max_p=3, max_q=3, m=12, start_P=0, seasonal=True,\n                           d=1, D=1, trace=True, error_action='ignore', suppress_warnings=True, stepwise=True)","ff921ae2":"data_diff=data_diff.set_index('Date')\ntrain = data_diff[\"AAPL\"].loc[data_diff.index < '2016-12-31']\ntest = data_diff[\"AAPL\"].loc['2016-12-31':'2017-01-31']\nstepwise_model.fit(train)\nfuture_forecast = stepwise_model.predict(n_periods=20)\nfuture_forecast = pd.DataFrame(future_forecast, index = test.index, columns=[\"AAPL\"])","8b3a9cfb":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=test.index, y=test.values, name = \"AAPL - Original Serie\", line = dict(color = '#17BECF'), opacity = 0.8))\nfig.add_trace(go.Scatter(x=future_forecast.index, y=future_forecast[\"AAPL\"], name = \"AAPL - Forecasting Serie\", line = dict(color = '#CF1717'), opacity = 0.8))\nfig.show()","7d4e224e":"lags = pd.DataFrame()\nfor i in range(10,0,-1):\n    lags['t-'+str(i)] = data_diff[\"AAPL\"].shift(i)\n    lags['t'] = data_diff['AAPL'].values\nlags = lags[13:]\n\nfrom sklearn.ensemble import RandomForestRegressor\narray = lags.values\nX = array[:,0:-1]\ny = array[:,-1]\nmodel = RandomForestRegressor(n_estimators=500, random_state=1)\nmodel.fit(X, y)","bd5e4345":"import plotly.graph_objects as go\nnames = lags.columns\nfig = go.Figure(data=[go.Bar(\n            x=lags.columns, y=model.feature_importances_,\n            text=model.feature_importances_,\n            textposition='auto',)])\n\nfig.show()","9967578f":"from sklearn.feature_selection import RFE\nrfe = RFE(RandomForestRegressor(n_estimators=500, random_state=1), 4)\nfit = rfe.fit(X, y)\nnames = lags.columns\ncolumns=[]\nfor i in range(len(fit.support_)):\n    if fit.support_[i]:\n        columns.append(names[i])\n\nprint(\"Columns with predictive power:\", columns )","5fa3c82f":"from statsmodels.tsa.seasonal import seasonal_decompose\nimport plotly.graph_objects as go\nresult = seasonal_decompose(data, model='additive', freq=1)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=result.seasonal.index, y=result.seasonal.values, mode='lines', name='Seasonal - AAPL'))","6cf0b6cd":"columns=data.columns\ndata_mean=pd.DataFrame(columns=columns)\nfor col in columns:\n    data_mean[col] = data[col].rolling(window = 80).mean()\ndata_mean = data_mean.dropna()","712d22f9":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data.index, y=data['AAPL'], mode='lines', name='AAPL'))\nfig.add_trace(go.Scatter(x=data.index, y=data_mean['AAPL'], mode='lines', name='AAPL - Rolling Mean'))","bf7a0c6b":"#pre-processing data\ndf_forecasting=pd.DataFrame(data[\"AAPL\"])\ndf_forecasting[\"AAPL_diff\"] = df_forecasting[\"AAPL\"].diff()\nfor i in range(4,0,-1):\n    df_forecasting['t-'+str(i)] = df_forecasting[\"AAPL\"].shift(i)\ndf_forecasting=df_forecasting.dropna()\ndf_forecasting[\"AAPL_rolling\"] = df_forecasting[\"AAPL\"].rolling(window = 80).mean()\ndf_forecasting= df_forecasting.dropna()","f9342a01":"#model\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\nx=df_forecasting.iloc[:,1:]\ny=df_forecasting.iloc[:,0]\nx_train, x_valid = x.loc[x.index < '2017-10-01'], x.loc[x.index >= '2017-10-01']\ny_train, y_valid = y.loc[y.index < '2017-10-01'], y.loc[y.index >= '2017-10-01']\nmdl = rf=RandomForestRegressor(n_estimators=100)\nmdl.fit(x_train, y_train)\npred=mdl.predict(x_valid)\nmean_absolute_error(y_valid, pred)\npred=pd.Series(pred, index=y_valid.index)","8f24eaee":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=y_valid.index, y=y_valid.values, mode='lines', name='AAPL'))\nfig.add_trace(go.Scatter(x=pred.index, y=pred.values, mode='lines', name='AAPL - Forecasting'))","283c8dfa":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=y_train.loc[y_train.index > '2017-07-01'].index, y=y_train.loc[y_train.index > '2017-07-01'].values, mode='lines', name='AAPL before'))\nfig.add_trace(go.Scatter(x=y_valid.index, y=y_valid.values, mode='lines', name='AAPL observed'))\nfig.add_trace(go.Scatter(x=pred.index, y=pred.values, mode='lines', name='AAPL - Forecasting'))","82b2620a":"from sklearn.metrics import mean_squared_log_error\nvar_menor_erro = None\nvalor_menor_erro = 1000.\n\nfor var in x_train.columns:\n    mdl = RandomForestRegressor(n_jobs=-1, random_state=0, n_estimators=500)\n    mdl.fit(x_train[[var]], y_train)\n    p = mdl.predict(x_valid[[var]])\n    erro = np.sqrt(mean_squared_log_error(y_valid, p)) * 100\n    print(\"Vari\u00e1vel: {} - Erro: {:.4f}\\n\".format(var, erro))\n    \n    if erro < valor_menor_erro:\n        var_menor_erro = var\n        valor_menor_erro = erro\n        \nprint(\"Var: {} - Error: {:.4f}\\n\".format(var_menor_erro, valor_menor_erro))","7315af2c":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\nscore=[]\nmse=[]\npredict=pd.DataFrame()\nfor c in data.columns:\n  #pre-processing data\n  df_forecasting=pd.DataFrame(data[c])\n  df_forecasting[\"var_diff\"] = df_forecasting[c].diff()\n  for i in range(4,0,-1):\n      df_forecasting['t-'+str(i)] = df_forecasting[c].shift(i)\n  df_forecasting=df_forecasting.dropna()\n  df_forecasting[\"var_rolling\"] = df_forecasting[c].rolling(window = 80).mean()\n  df_forecasting= df_forecasting.dropna()\n  #modeling \n  x=df_forecasting.iloc[:,1:]\n  y=df_forecasting.iloc[:,0]\n  x_train, x_valid = x.loc[x.index < '2017-10-01'], x.loc[x.index >= '2017-10-01']\n  y_train, y_valid = y.loc[y.index < '2017-10-01'], y.loc[y.index >= '2017-10-01']\n  mdl = RandomForestRegressor(n_estimators=100)\n  mdl.fit(x_train, y_train)\n  pred=mdl.predict(x_valid)\n  predict[c+\"_valid\"]=y_valid.values\n  predict[c+\"_predict\"]=pred\n  m=mean_absolute_error(y_valid, pred)\n  s=mdl.score(x_valid, y_valid)\n  score.append([c, s])\n  mse.append([c, m])\n\npredict=predict.set_index(y_valid.index)\npred=pd.Series(pred, index=y_valid.index)\nscore=pd.DataFrame(score, columns=[\"Asset\", \"Score\"])\nscore=score.set_index(\"Asset\")","0196c1bd":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=score.index, y=score[\"Score\"],\n            text=score[\"Score\"],\n            textposition='auto',)])\n\nfig.show()","d25792f7":"print(\"Max is:\", score[score[\"Score\"]==score.max()[0]].index)\nprint(\"Min is:\", score[score[\"Score\"]==score.min()[0]].index)","d5b76197":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data[\"INTC\"].loc['2017-07-01':'2017-10-01'].index, y=data[\"INTC\"].loc['2017-07-01':'2017-10-01'].values, mode='lines', name='INTC observed'))\nfig.add_trace(go.Scatter(x=predict[\"INTC_valid\"].index, y=predict[\"INTC_valid\"].values, mode='lines', name='INTC observed'))\nfig.add_trace(go.Scatter(x=predict[\"INTC_predict\"].index, y=predict[\"INTC_predict\"].values, mode='lines', name='INTC - Forecasting'))","63851ae9":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data[\"VZ\"].loc['2017-07-01':'2017-10-01'].index, y=data[\"VZ\"].loc['2017-07-01':'2017-10-01'].values, mode='lines', name='VZ observed'))\nfig.add_trace(go.Scatter(x=predict[\"VZ_valid\"].index, y=predict[\"VZ_valid\"].values, mode='lines', name='VZ observed'))\nfig.add_trace(go.Scatter(x=predict[\"VZ_predict\"].index, y=predict[\"VZ_predict\"].values, mode='lines', name='VZ - Forecasting'))","41779429":"It is observed that the lags, differentiated series and rolling mean are necessary features to improve the model. Seasonality does not have efficient predictive capacity.","8c7cc180":"#### Model performance","0e865aef":"### Random Forest Model","432c4164":"### Random Forest for 30 assets ","671e94ab":"The series do not have seasonality that could be used with predictive power.","c77f772f":"#### The worst perform: INTC ","dcddd3c9":"## Stationary test, diff and auto-arima[](http:\/\/)","994a0579":"### Auto-ARIMA","305a29f3":"#### Rolling Mean","7fab5b9b":"## Conclusion","0be13718":"We will therefore use 4 previous lags for as features for our model.","af9de152":"### Diff","5fd8cfff":"#### The best perform: VZ","816e5d97":"We have adopted a comparative analysis between the traditional ARIMA technique and another machine learning technique, Random Forest Regression, for series data of the top 30 US-traded assets. The objective is to show that traditional techniques have forecasting problems for series with few predictors, such as poorly standardized seasonality and volatile tendency. ** For this, we adopted a classification model that took into consideration features such as differentiated series, rolling mean and lags. The series with the best predictive power for the period is the asset \"VZ\"; and the worst performer is \"INTC\".**","32b638c1":"## Visualizing Data","323204b8":"## Import Data","b937331d":"## Random Forest Regression ","f4d76840":"The purpose of this kernel is to evaluate the **possibility of using regressive classification algorithms as a way to predict time series lags.** For this, a quick prediction was made with Auto-ARIMA, and after finding the difficulty of this model to achieve good results, I used the techniques of Random Forest Regression, using features such as lags, diff and rolling mean.","39fa3ca3":"# Random Forest Regression model for Time Series predict","0ae4ffb4":"### Correlation","3aa43056":"### Attributes Selections","08df38bc":"#### Seasonal","7925bbe4":"### Line chart","0593770c":"### Stationary test","535da5db":"#### Lags","d3b00f1a":"It can be seen that the series are very volatile due to reduced operations and little correlation with predictive ability. This scenario requires more sophisticated predictive models with new variables."}}