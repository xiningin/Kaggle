{"cell_type":{"fbf4417a":"code","35b5a19a":"code","102b5409":"code","5ad8218a":"markdown"},"source":{"fbf4417a":"###################### LOAD PACKAGES ##########################\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk import PorterStemmer\nfrom IPython.core.display import display, HTML\nimport pandas as pd\nimport torch\nfrom transformers import *\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertForQuestionAnswering.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')\n","35b5a19a":"# keep only documents with covid -cov-2 and cov2\ndef search_focus(df):\n    dfa = df[df['abstract'].str.contains('covid')]\n    dfb = df[df['abstract'].str.contains('-cov-2')]\n    dfc = df[df['abstract'].str.contains('cov2')]\n    dfd = df[df['abstract'].str.contains('ncov')]\n    frames=[dfa,dfb,dfc,dfd]\n    df = pd.concat(frames)\n    df=df.drop_duplicates(subset='title', keep=\"first\")\n    return df\n\n# load the meta data from the CSV file using 3 columns (abstract, title, authors),\ndf=pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv', usecols=['title','journal','abstract','authors','doi','publish_time','sha','full_text_file'])\nprint (df.shape)\n#fill na fields\ndf=df.fillna('no data provided')\n#drop duplicate titles\ndf = df.drop_duplicates(subset='title', keep=\"first\")\n#keep only 2020 dated papers\ndf=df[df['publish_time'].str.contains('2020')]\n# convert abstracts to lowercase\ndf[\"abstract\"] = df[\"abstract\"].str.lower()+df[\"title\"].str.lower()\n#show 5 lines of the new dataframe\ndf=search_focus(df)\nprint (df.shape)\ndf.head()","102b5409":"import functools\n\ndef remove_stopwords(text,stopwords):\n    text = \"\".join(c for c in text if c not in ('!','.',',','?','(',')','-'))\n    text_tokens = word_tokenize(text)\n    #remove stopwords\n    tokens_without_sw = [word for word in text_tokens if not word in stopwords.words()]\n    str1=''\n    str1=' '.join(word for word in tokens_without_sw)\n    return str1\n\n### spacy score sentence\ndef score_sentence(search,sentence):\n        main_doc=nlp(sentence)\n        search_doc=nlp(search)\n        sent_score=main_doc.similarity(search_doc)\n        return sent_score\n\n# custom sentence score\ndef score_sentence_prob(search,sentence,focus):\n    keywords=search.split()\n    sent_parts=sentence.split()\n    word_match=0\n    missing=0\n    for word in keywords:\n        word_count=sent_parts.count(word)\n        word_match=word_match+word_count\n        if word_count==0:\n            missing=missing+1\n    percent = 1-(missing\/len(keywords))\n    final_score=abs((word_match\/len(sent_parts)) * percent)\n    if missing==0:\n        final_score=final_score+1\n    if focus not in sentence:\n        final_score=0\n    return final_score\n\n# BERT pretrained question answering module\ndef answer_question(question,text, model,tokenizer):\n    input_text = \"[CLS] \" + question + \" [SEP] \" + text + \" [SEP]\"\n    input_ids = tokenizer.encode(input_text)\n    token_type_ids = [0 if i <= input_ids.index(102) else 1 for i in range(len(input_ids))]\n    start_scores, end_scores = model(torch.tensor([input_ids]), token_type_ids=torch.tensor([token_type_ids]))\n    all_tokens = tokenizer.convert_ids_to_tokens(input_ids)\n    #print(' '.join(all_tokens[torch.argmax(start_scores) : torch.argmax(end_scores)+1]))\n    answer=(' '.join(all_tokens[torch.argmax(start_scores) : torch.argmax(end_scores)+1]))\n    # show qeustion and text\n    #tokenizer.decode(input_ids)\n    answer=answer.replace(\" ##\", \"\")\n    answer=answer.replace(\" \u00b7 \", \"\u00b7\")\n    answer=answer.replace(\" . \", \".\")\n    answer=answer.replace(\" , \", \",\")\n    if '[SEP]'in answer or '[CLS]' in answer or answer=='':\n        answer='unk'\n        \n    return answer\n\ndef process_question(df,search,focus):\n    df_table = pd.DataFrame(columns = [\"date\",\"study\",\"link\",\"journal\",\"severe\",\"sever sig.\",\"severe age adj.\",\"Severe OR Calculated or Extracted\",\"fatality\",\"fatality sig.\",\"fatality age adj.\",\"Fatality OR Calculated or Extracted\",\"design\",\"sample\",\"risk factor\"])\n    # focuses to make sure the exact phrase in text\n    #df1 = df[df['abstract'].str.contains(focus)]\n    # focus to make sure all words in text\n    df1=df[functools.reduce(lambda a, b: a&b, (df['abstract'].str.contains(s) for s in search))]\n    search=remove_stopwords(search,stopwords)\n    for index, row in df1.iterrows():\n        sentences = row['abstract'].split('. ')\n        pub_sentence=''\n        hi_score=0\n        study=''\n        hi_study_score=0\n        for sentence in sentences:\n            if len(sentence)>75 and focus in sentence:\n                rel_score=score_sentence_prob(search,sentence,focus)\n                if rel_score>.02:\n                    sentence=sentence.capitalize()\n                    if sentence[len(sentence)-1]!='.':\n                        sentence=sentence+'.'\n                    pub_sentence=pub_sentence+' '+sentence\n                    if rel_score>hi_score:\n                        hi_score=rel_score\n                \n        if pub_sentence!='':\n            text=row['abstract'][0:1000]\n            \n            question='how many patients or cases were in the study, review or analysis?'\n            sample=answer_question(question,text,model,tokenizer)\n            sample=sample.replace(\"#\", \"\")\n            sample=sample.replace(\" , \", \",\")\n            if sample=='19' or sample=='' or '[SEP]'in sample:\n                sample='unk'\n            if len(sample)>50:\n                sample='unk'\n            sample=sample.replace(\" \", \"\")\n            \n            question='what type or kind of review study analysis model was used?'\n            design=answer_question(question,text,model,tokenizer)\n            design=design.replace(\" ##\", \"\")\n            if '[SEP]'in design or '[CLS]' in design or design=='':\n                design='unk'\n            \n            ### get sever numbers\n            question='what is the '+keyword+' HR OR RR AOR hazard odds ratio ()?'\n            severe=answer_question(question,text,model,tokenizer)\n            df_table.loc[index,'severe']=severe\n            \n            authors=row[\"authors\"].split(\" \")\n            link=row['doi']\n            title=row[\"title\"]\n            score=hi_score\n            journal=row[\"journal\"]\n            if journal=='':\n                journal=row['full_text_file']\n            linka='https:\/\/doi.org\/'+link\n            linkb=title\n            final_link='<p align=\"left\"><a href=\"{}\">{}<\/a><\/p>'.format(linka,linkb)\n            #author_link='<p align=\"left\"><a href=\"{}\">{}<\/a><\/p>'.format(linka,authors[0]+' et al.')\n            #sentence=pub_sentence+' '+author_link\n            sentence=pub_sentence\n            #sentence='<p fontsize=tiny\" align=\"left\">'+sentence+'<\/p>'\n            to_append = [row['publish_time'],title,linka,journal,severe,\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",design,sample,keyword]\n            df_length = len(df_table)\n            df_table.loc[df_length] = to_append\n            \n    return df_table\n###################### MAIN PROGRAM ###########################\n\n\n### focus quesiton with single keyword\n#keywords = ['hypertension']\nkeywords = ['hypertension','diabetes','heart disease','gender','copd','smoking','age','stroke','cerbrovascular','cancer','kidney disease','drinking','tuberculosis','obesity']\n#'diabetes','heart disease','male gender','copd','smoking','age','stroke','cerbrovascular','cancer','kidney disease','drinking','tuberculosis','bmi'\n\nq=0\n\ndf_all_risk_factors = pd.DataFrame(columns = [\"date\",\"study\",\"link\",\"journal\",\"severe\",\"sever sig.\",\"severe age adj.\",\"Severe OR Calculated or Extracted\",\"fatality\",\"fatality sig.\",\"fatality age adj.\",\"Fatality OR Calculated or Extracted\",\"design\",\"sample\",\"risk factor\"])\n\n# loop through the list of questions\nfor keyword in keywords:\n    # limit results to severe risk factors\n    search_words = keyword+' risk factor severe'\n    \n    # get best sentences\n    df_table=process_question(df,search_words,keyword)\n    df_answers=df_table\n        \n    display(HTML('<h3>'+search_words+'<\/h3>'))\n    \n    #print (text)\n    \n    #limit the size of the df for the html table\n    #df_table=df_table.head(100)\n    df_table=df_table.drop_duplicates(subset='study', keep=\"first\")\n    df_table = df_table.sort_values(by=['date'], ascending=False)\n    \n    df_allriskcsv=df_table\n    \n    #convert df to html\n    df_table=HTML(df_table.to_html(escape=False,index=False))\n    \n    # show the HTML table with responses\n    display(df_table)\n    \n    \n    q=q+1\n    df_allriskcsv.to_csv(keyword+'_risk_factors.csv',index = False)\n    df_all_risk_factors=df_all_risk_factors.append(df_allriskcsv, ignore_index=True)\ndf_all_risk_factors.to_csv('all_risk_factors.csv',index = False)\nprint ('done')","5ad8218a":"\n# **Risk Factors Table**\n\n![](https:\/\/sportslogohistory.com\/wp-content\/uploads\/2018\/09\/georgia_tech_yellow_jackets_1991-pres-1.png)\n"}}