{"cell_type":{"08cd41f6":"code","c28621de":"code","566d1523":"code","5b18e731":"code","97ec1c17":"code","a7985990":"code","90be9a45":"code","17d98eb7":"code","434bf6cc":"code","76fbf1be":"code","6e31ca55":"code","230ebeee":"code","9f446fcd":"code","93bc5c37":"code","a505b387":"code","0af6fea7":"code","e238933d":"code","c6c3dfe7":"code","3f7615a1":"code","13278eeb":"markdown","6c9fd02b":"markdown","b8f46ab9":"markdown","41223e52":"markdown","b2c1e08e":"markdown","451c3ce4":"markdown","c18bba97":"markdown","52801a86":"markdown","716a3a84":"markdown","2942265f":"markdown"},"source":{"08cd41f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","c28621de":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","566d1523":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","5b18e731":"sns.heatmap(train_data.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","97ec1c17":"sns.countplot(x = 'Survived', data = train_data)","a7985990":"sns.countplot(x = 'Survived', hue = 'Sex', data = train_data, palette = 'RdBu_r')","90be9a45":"sns.countplot(x='Survived', hue = 'Pclass', data = train_data)","17d98eb7":"sns.distplot(train_data['Age'].dropna(), kde = False, bins = 30)","434bf6cc":"sns.countplot(x= 'SibSp', data = train_data)","76fbf1be":"train_data['Fare'].hist(bins = 40)","6e31ca55":"sns.boxplot(x= 'Pclass', y = 'Age',data = train_data )","230ebeee":"## Created a funtion to fill the null values of age based on the passenger class mean\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","9f446fcd":"train_data['Age'] = train_data[['Age','Pclass']].apply(impute_age, axis =1)","93bc5c37":"## Run the heatmap to check for null values\nsns.heatmap(train_data.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","a505b387":"## Dropping the null values\ntrain_data.drop('Cabin', axis =1, inplace = True)","0af6fea7":"## Run the heatmap to check for null values\nsns.heatmap(train_data.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","e238933d":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","c6c3dfe7":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","3f7615a1":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","13278eeb":"Now the data is all set and no null values are displayed.","6c9fd02b":"Most of the purchase prices are 0 and 50. As most of the people are in lower passenger class with cheaper price tickets.","b8f46ab9":"The histogram shows that there are quiet a few children and majority of younger passengers between 20  to 40 yrs age ","41223e52":"Most people on the board didnt have neither children or a spouse on board.  Lot of singles on board.","b2c1e08e":"Most of the people that didnt survive are male and the survied are female","451c3ce4":"Using the class and the age i am planning to fill the null values of Age","c18bba97":"From the above plot its evident that most of the people didnt survive.","52801a86":"Our function above executed successfully in filling the null values for age.\nBut we still have the missing values for cabin and i am going to drop it as i dont think i require it for my analysis\n","716a3a84":"Missing age information and lot of cabin information. ","2942265f":"The above graph gives the view of passenger class survived and non survived.\nMajority of the people who didnt survive are from the lower passenger class.\nHighest number of people who survived are from the higher passenger class."}}