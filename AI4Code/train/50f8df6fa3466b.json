{"cell_type":{"738fab1c":"code","d2f1b440":"code","4cc8c0a9":"code","e69b4809":"code","83974bfc":"code","387fbd94":"code","3b2deac4":"code","ee767b40":"code","e6400177":"code","861015cf":"code","f1b33f8b":"code","e301d995":"code","591a1099":"code","7bf31833":"code","8114878e":"code","811ac229":"code","5cbd128f":"code","59dabbe0":"code","7355b755":"code","7225ca24":"code","04cc42a9":"code","8e6ebeac":"code","5d0ca313":"code","58da6e6a":"code","c2e7c4d5":"markdown","7ebe5213":"markdown"},"source":{"738fab1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n#\/kaggle\/input\/spotify-top-200-charts-20202021\/spotify_dataset.csv","d2f1b440":"import matplotlib.pyplot as plt\nimport seaborn as sns","4cc8c0a9":"df = pd.read_csv(\"\/kaggle\/input\/spotify-top-200-charts-20202021\/spotify_dataset.csv\")\ndf.head()","e69b4809":"df.describe()","83974bfc":"df.info()","387fbd94":"df[['Week of Highest Charting_start','Week of Highest Charting_end']] = df['Week of Highest Charting'].str.split('--', expand=True)","3b2deac4":"df['Week of Highest Charting_start'] = pd.to_datetime(df['Week of Highest Charting_start'], yearfirst=True)\ndf['Week of Highest Charting_end'] = pd.to_datetime(df['Week of Highest Charting_end'], yearfirst=True)\ndf['Streams'] = df['Streams'].replace(',','', regex=True)\ndf['Streams'] = df['Streams'].astype('int64')\ndf[['Artist','Chord']] = df[['Artist','Chord']].astype('category')\n# Converting object columns to relevant float\/int\nobject_cols = ['Danceability','Energy','Loudness','Speechiness','Acousticness','Liveness','Tempo','Valence','Artist Followers','Popularity','Duration (ms)']\nfor each_col in object_cols:\n    df[each_col] = pd.to_numeric(df[each_col], errors='coerce')\ndf.info()","ee767b40":"#Taking the Log base 10 of Streams and Artist Followers\nimport numpy as np\ndf['logStreams'] = np.log10(df['Streams'])\ndf['logFollowers'] = np.log10(df['Artist Followers'])\ndf","e6400177":"#Replacing Duration Miliseconds with seconds so they are on a more standard range\ndf['Duration(s)'] = df['Duration (ms)']\/1000\ndf","861015cf":"#Remove nulls as they all are important numerical variables like popularity and weeks charted\ndf = df.dropna()\ndf.isnull().sum() ","f1b33f8b":"df.sort_values(by=['Popularity'])\ndf10 = df.head(10)\nplt.figure(figsize=(8,8))\nsns.barplot(x=df10['Song Name'],\n            y=df10['Popularity'], \n            palette=\"Paired\")\nplt.xlabel(\"Song Name\", size = 12)\nplt.ylabel(\"Popularity\", size = 12)\nplt.title(\"Top 10 Popular Songs\", size = 18)\nplt.xticks(rotation = 90)\nplt.tight_layout()\nplt.show()","e301d995":"import plotly.express as px\nfig = px.bar(df10, x='Song Name', y='Popularity')\nfig.show()","591a1099":"fig = px.bar(df10, x='Artist', y='Popularity')\nfig.show()","7bf31833":"to_drop = ['Index', 'Song Name', 'Artist', 'Song ID', 'Genre', 'Weeks Charted']\ndf1 = df.drop(to_drop,axis=1)\ndf1.head()","8114878e":"org = [i for i in df1.columns]\ncols = df1[org].select_dtypes(include=['float64']).columns\ncols = [i for i in cols if i not in ['Chord']]\ncols","811ac229":"plt.figure(figsize=(20,12))\nfor i in enumerate(cols):\n    plt.subplot(3,4,i[0]+1)\n    sns.violinplot(data=df1, x=i[1])\nplt.show()","5cbd128f":"plt.figure(figsize=(15,12))\nsns.heatmap(df.corr(),annot=True,cmap='cubehelix_r')\nplt.show()","59dabbe0":"#Exploration of Popularity vs. the Number of Streams\nhigh_pop = df[df.Popularity >= 85]\nmid_pop = df[(df.Popularity < 85) & (df.Popularity >= 40)]\nlow_pop = df[df.Popularity < 40]\n\nplt.scatter(high_pop.Popularity, high_pop['Streams'], label = \"High Popularity\")\nplt.scatter(mid_pop.Popularity, mid_pop['Streams'], label = \"Mid Popularity\")\nplt.scatter(low_pop.Popularity, low_pop['Streams'], label = \"Low Popularity\")\n\nplt.title(\"Popularity vs. Number of Streams\")\nplt.xlabel(\"Popularity\")\nplt.ylabel(\"# of Streams in Ten Millions\")\nplt.legend()\nplt.figure(figsize = (10,10), dpi = 200)\n\nplt.show()\n\nprint('\\033[1m' + \"High Popularity Correlation:\" + '\\033[0m', '\\n', high_pop[[\"Popularity\", \"Streams\"]].corr())\nprint('\\033[1m' + \"Mid Popularity Correlation:\" + '\\033[0m', '\\n', mid_pop[[\"Popularity\", \"Streams\"]].corr())\nprint('\\033[1m' + \"Low Popularity Correlation:\" + '\\033[0m', '\\n', low_pop[[\"Popularity\", \"Streams\"]].corr())","7355b755":"#Parsing the genres into individual columns\nimport string\ngenres = []\nspotify = df\n\nfor rowlist in spotify.Genre:\n    for item in rowlist.split(\"'\"):\n        item = item.translate(str.maketrans('', '', string.punctuation))\n        if item not in genres:\n            genres.append(item)\n        if len(item) < 2:\n            genres.remove(item)\n    \nprint(genres)\nprint(len(genres))","7225ca24":"hip_hop = []\nrap = []\npop = []\nrock = []\n\nfor item in genres:\n    if 'pop' in item:\n        pop.append(item)\n    elif 'rap' in item:\n        rap.append(item)\n    elif 'hip hop' in item:\n        hip_hop.append(item)\n    elif 'rock' in item:\n        rock.append(item)\n\npop.sort()    \n\nprint(pop)\nprint(len(pop))\nprint(rap)\nprint(len(rap))\nprint(hip_hop)\nprint(len(hip_hop))\nprint(rock)\nprint(len(rock))","04cc42a9":"##Replace pop, rap, and hip hop variants with a generic genre to reduce dimensionality\ngenre_trim = genres\n\ndef genre_trimmer():\n    for i in range(len(genre_trim)):\n        if genre_trim[i] in pop:\n            genre_trim[i] = 'pop'\n        elif genre_trim[i] in rap:\n            genre_trim[i] = 'rap'\n        elif genre_trim[i] in hip_hop:\n            genre_trim[i] = 'hip hop'\n\ngenre_trimmer()\ngenres_unique = np.unique(np.array(genre_trim))\nprint(len(genres_unique))\nprint(genres_unique)","8e6ebeac":"#spotify_genre1 = spotify\n#for rowlist in spotify_genre1.Genre:\n#    for item in rowlist.split(\"'\"):\n#        item = item.translate(str.maketrans('', '', string.punctuation))\n#        if item in genres:\n#            spotify_genre1[\"{}\".format(item)] = item\n  #[1 for ]\n#        for g in genres:\n#            if g in item:\n#                spotify_genre1[\"{}\".format(item)] = 1\n#            else:\n#                spotify_genre1[\"{}\".format(item)] = 0\n\n","5d0ca313":"for rowlist in spotify.Genre:\n    rowlist = list(rowlist.split(\"'\"))\n    #for item in rowlist:\n   #   item = item.translate(str.maketrans('', '', string.punctuation))\n   #   print(rowlist)\n   #   if len(item) < 2:\n   #     rowlist.remove(item)\n    for i in range(len(rowlist)):\n        rowlist[i] = rowlist[i].translate(str.maketrans('', '', string.punctuation))\n    if len(rowlist[i]) < 2:\n        rowlist.remove(rowlist[i])\n    print(rowlist)\n    #rowlist = ','.join(i).tolist()","58da6e6a":"for rlist in spotify.Genre:\n    for i in range(len(rlist)):\n        print(rlist[i])\n        if rlist[i] in pop:\n            rlist[i] = 'pop'\n\nprint(spotify.Genre)","c2e7c4d5":"### Dummy encoding the unique genres","7ebe5213":"Different Attempts at dummy encoding genres"}}