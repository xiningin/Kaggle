{"cell_type":{"ba91c919":"code","a512eb38":"code","5709e471":"code","f1780f92":"code","98769cec":"code","dc0857e7":"code","52df6921":"code","bc97e72e":"code","8571bd53":"code","ee080e79":"code","72f6c53b":"code","4f3e6620":"code","1a231218":"code","bda60be1":"code","ed11742e":"code","757d29f4":"code","392a28e9":"code","d5562b6f":"code","f0d5c5e3":"code","a5521b8d":"code","903ef61a":"code","939a7896":"code","751e3b65":"code","7df01e62":"code","ea904db1":"code","a854cbff":"code","b8899a99":"code","4de9232f":"code","488a0f9b":"code","cdebacf5":"code","90e83ac5":"code","eb21c836":"code","daa1504d":"code","b16a4c61":"code","1bbac9a1":"markdown","f8397503":"markdown","3f9f2521":"markdown","48fd6120":"markdown","30f9d6a3":"markdown","1db9af69":"markdown","86b06fde":"markdown","6d62927f":"markdown","783013df":"markdown","719b401d":"markdown","9306b4a2":"markdown","56b1ea7b":"markdown"},"source":{"ba91c919":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport folium\nfrom folium.plugins import FastMarkerCluster","a512eb38":"# Load csv file into DataFrame\nflights = pd.read_csv('..\/input\/flights-in-brazil-compilation-jun2019-jun2021\/raw_2021.csv', encoding='utf-8', low_memory=False)\nflights","5709e471":"# Load csv file into DataFrame\nairports = pd.read_csv('..\/input\/airportcodes\/airport-codes_csv.csv', engine='python', encoding='utf-8')\nairports","f1780f92":"# Check null values by columns\nflights.isnull().sum()","98769cec":"# Drop unnecesary columns\nflights.drop(['auth_code', 'scheduled_dep', 'real_dep', 'scheduled_arr', 'situation', 'jus_code'], axis=1, inplace=True)\nflights","dc0857e7":"# Remove rows which has nulll values\nflights.dropna(axis=0, inplace=True)\nflights","52df6921":"# Re-check DataFRame whether it contains null rows or not\nflights.isnull().sum()","bc97e72e":"airports","8571bd53":"# Check null values by columns\nairports.isnull().sum()","ee080e79":"# Split coordinates column into latitude and longtitude\nairports['long'] = airports['coordinates'].str.split(',', expand=True)[0]\nairports['lat'] = airports['coordinates'].str.split(',', expand=True)[1]\nairports","72f6c53b":"# Drop unnecessary columns\nairports.drop(['type', 'elevation_ft', 'continent', 'iso_country', 'iso_region', 'municipality', 'gps_code', 'iata_code', 'local_code', 'coordinates'], axis=1, inplace=True)\nairports","4f3e6620":"# Relocate columns and rename 'ident'\nairports.rename(columns={'ident': 'ICAO'}, inplace=True)\nairports = airports[['ICAO', 'name', 'lat', 'long']]\nairports","1a231218":"# Re-check DataFRame whether it contains null rows or not\nairports.isnull().sum()","bda60be1":"# Check unique values of each column\nfor i in range(len(flights.columns)):\n    column_list = flights.columns.tolist()\n    print(column_list[i])\n    print(flights.iloc[:, i].unique())","ed11742e":"# Copy flights for backup\nflights_copy = flights.copy()\nflights_copy","757d29f4":"# I have no idea with line_type of following values: C, G, L, R, E, H and X\n# Therefore, I decided to remove rows which contain those\ntarget = ['N', 'I']\nflights = flights_copy.loc[flights['line_type'].isin(target)]\nflights","392a28e9":"# Check unique values of each column\nfor i in range(len(flights.columns)):\n    column_list = flights.columns.tolist()\n    print(column_list[i])\n    print(flights.iloc[:, i].unique())","d5562b6f":"# Split Arrival(Scheduled, Real) into Year, Month and Date\nflights['real_arr'] = pd.to_datetime(flights['real_arr'])\nflights.dtypes","f0d5c5e3":"# Extract values of year, month and day by using attribute of dt\nflights['real_arr_Year'] = flights['real_arr'].dt.year\nflights['real_arr_Month'] = flights['real_arr'].dt.month\nflights['real_arr_Day'] = flights['real_arr'].dt.day\n\nflights","a5521b8d":"# Merge two DataFrames: flights, airports\n# Purpose: append lat, long column on flights\naviation_origin = pd.merge(flights, airports, left_on='origin', right_on='ICAO', how='outer')\naviation_origin.rename(columns={'lat': 'origin_lat', 'long': 'origin_long'}, inplace=True)\naviation_origin","903ef61a":"# Check how many values are NaN\naviation_origin.isnull().sum()","939a7896":"# Drop NaN rows\naviation_origin.dropna(inplace=True)\naviation_origin","751e3b65":"# Extract origin coordinates column from 'aviation'\norigin_coordinates = aviation_origin[['origin_lat', 'origin_long']]\norigin_coordinates","7df01e62":"aviation_destination = pd.merge(flights, airports, left_on='destination', right_on='ICAO', how='outer')\naviation_destination.rename(columns={'lat': 'destination_lat', 'long': 'destination_long'}, inplace=True)\naviation_destination","ea904db1":"# Check how many values are NaN\naviation_destination.isnull().sum()","a854cbff":"# Drop NaN rows\naviation_destination.dropna(inplace=True)\naviation_destination","b8899a99":"# Extract destination coordinates column from 'aviation'\ndestination_coordinates = aviation_destination[['destination_lat', 'destination_long']]\ndestination_coordinates","4de9232f":"aviation_origin_count = aviation_origin.groupby(by=['company'], as_index=False).count()\naviation_origin_count","488a0f9b":"# Create Bar Plot\nplt.bar(aviation_origin_count['company'], aviation_origin_count['flight'])\n\nplt.xlabel('company')\nplt.xticks(rotation=90)\nplt.ylabel('flight')\nplt.title('How many flights does each company have')\nplt.savefig('Figure1.png', overwrite=True)\n\nplt.show()","cdebacf5":"# Check Top 3 companies\naviation_origin_top = aviation_origin_count.sort_values(by=['flight'], ascending=False, ignore_index=True)\naviation_origin_top","90e83ac5":"# Drop rows of companies which is with Top 3 in order to compare well\naviation_origin_top.drop(aviation_origin_top.index[0:3], axis=0, inplace=True)\naviation_origin_top.reset_index(drop=True, inplace=True)\naviation_origin_top","eb21c836":"# Create Bar Plot\nplt.bar(aviation_origin_top['company'], aviation_origin_top['flight'])\n\nplt.xlabel('company')\nplt.xticks(rotation=90)\nplt.ylabel('flight')\nplt.title('How many flights does each company have (Except Top 3)')\nplt.savefig('Figure2.png', overwrite=True)\n\nplt.show()","daa1504d":"# Create Map object with folium\nmap = folium.Map(location=(-12.109923,-57.8987643), zoom_start=5.32)\nmap","b16a4c61":"# FastMarkerCluster\n\nFastMarkerCluster(data=aviation_origin[['origin_lat', 'origin_long']]).add_to(map)\nfolium.LayerControl().add_to(map)\n\nmap","1bbac9a1":"### Flights","f8397503":"### Arrival","3f9f2521":"## Data Preprocessing","48fd6120":"### Map","30f9d6a3":"### Airports","1db9af69":"### Matplotlib","86b06fde":"## Visualiation","6d62927f":"## Import libraries and data","783013df":"# Flight data in Brazil - Visualization","719b401d":"## Data Preparing","9306b4a2":"### Departure","56b1ea7b":"## Data Reshaping"}}