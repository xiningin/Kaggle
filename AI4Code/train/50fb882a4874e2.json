{"cell_type":{"821a08f0":"code","c2e61581":"code","34d08b97":"code","6050bef1":"code","6b4f4cdf":"code","67bb512b":"code","479cb3c2":"code","be090b07":"code","60aec112":"code","4497c8ea":"code","35b1dc6d":"code","b13b430f":"code","e2c5b5ec":"code","c2ef54fa":"markdown","a825431f":"markdown"},"source":{"821a08f0":"#importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.patches import Circle\n\n#setting plot style to seaborn\nplt.style.use('seaborn')","c2e61581":"#reading data\ndf = pd.read_csv('..\/input\/citibike-system-data\/201306-citibike-tripdata.csv')\ndf.head()","34d08b97":"#we have 5,77,703 rows and 15 columns, seems to be quite a bit of missing values\ndf.info()","6050bef1":"#sum of missing values in each column\ndf.isna().sum()","6b4f4cdf":"#calculating the percentage of missing values\n#sum of missing value is the column divided by total number of rows in the dataset multiplied by 100\n\ndata_loss1 = round((df['end station id'].isna().sum()\/df.shape[0])*100)\ndata_loss2 = round((df['birth year'].isna().sum()\/df.shape[0])*100)\n\nprint(data_loss1, '% of data loss if NaN rows of end station id, \\nend station name, end station latitude and end station longitude dropped.\\n')\nprint(data_loss2, '% of data loss if NaN rows of birth year dropped.')","67bb512b":"#dropping NaN values\nrows_before_dropping = df.shape[0]\n\n#droppping missing valued rows from birth year will a loss of 42% of data,\n#so decided to drop entire birth year column.\ndf.drop('birth year',axis=1, inplace=True)\n\n#Now left with end station id, end station name, end station latitude and end station longitude\n#these four columns have missing values in exact same row,\n#so dropping NaN from all four columns will still result in 3% data loss\ndf.dropna(axis=0, inplace=True)\nrows_after_dropping = df.shape[0]\n\n#total data loss\nprint('% of data lost: ',((rows_before_dropping-rows_after_dropping)\/rows_before_dropping)*100)\n\n#checking for NaN\ndf.isna().sum()","479cb3c2":"#plotting total no.of males and females\nsplot = sns.countplot('gender', data=df)\n\n#adding value above each bar:Annotation\nfor p in splot.patches:\n    an = splot.annotate(format(p.get_height(), '.2f'),\n                        #bar value is nothing but height of the bar\n                       (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                       ha = 'center',\n                       va = 'center', \n                       xytext = (0, 10), \n                       textcoords = 'offset points')\n    an.set_size(20)#test size\nsplot.axes.set_title(\"Gender distribution\",fontsize=30)\nsplot.axes.set_xlabel(\"Gender\",fontsize=20)\nsplot.axes.set_ylabel(\"Count\",fontsize=20)\n\n#adding x tick values\nsplot.axes.set_xticklabels(['Unknown', 'Male', 'Female'])\nplt.show()","be090b07":"#number of subscribers(annual pass) vs customers(24 hours\/3day pass)\nuser_type_count = df['usertype'].value_counts()\nplt.pie(user_type_count.values, labels=user_type_count.index ,autopct='%1.2f%%', textprops={'fontsize': 15} )\nplt.title('Subscribers vs Customers', fontsize=20)\nplt.show()","60aec112":"#converting trip duration from seconds to minuits\ndf['tripduration'] = df['tripduration']\/60\n\n#creating bins (0-30min, 30-60min, 60-120min, 120 and above)\nmax_limit = df['tripduration'].max()\ndf['tripduration_bins'] = pd.cut(df['tripduration'], [0, 30, 60, 120, max_limit])\n\nsns.barplot(x='tripduration_bins', y='tripduration', data=df, estimator=np.size)\nplt.title('Usual trip duration', fontsize=30)\nplt.xlabel('Trip duration group', fontsize=20)\nplt.ylabel('Trip Duration', fontsize=20)\nplt.show()","4497c8ea":"#number of trips that started and ended at same station\nstart_end_same = df[df['start station name'] == df['end station name']].shape[0]\n\n#number of trips that started and ended at different station\nstart_end_diff = df.shape[0]-start_end_same\n\nfig,ax=plt.subplots()\nax.pie([start_end_same,start_end_diff], labels=['Same', 'Different'], autopct='%1.2f%%', textprops={'fontsize': 20})\nax.set_title('Same start and end location vs Different start and end location', fontsize=20)\n\n\ncircle = Circle((0,0), 0.6, facecolor='white')\nax.add_artist(circle)\n\nplt.show()","35b1dc6d":"#converting string to datetime object\ndf['starttime']= pd.to_datetime(df['starttime'])\n\n#since we are dealing with single month, we grouping by days\n#using count aggregation to get number of occurances i.e, total trips per day\nstart_time_count = df.set_index('starttime').groupby(pd.Grouper(freq='D')).count()\n\n#we have data from July month for only one day which is at last row, lets drop it\nstart_time_count.drop(start_time_count.tail(1).index, axis=0, inplace=True)\n\n#again grouping by day and aggregating with sum to get total trip duration per day\n#which will used while plotting\ntrip_duration_count = df.set_index('starttime').groupby(pd.Grouper(freq='D')).sum()\n\n#again dropping the last row for same reason\ntrip_duration_count.drop(trip_duration_count.tail(1).index, axis=0, inplace=True)\n\n#plotting total rides per day\n#using start station id to get the count\nfig,ax=plt.subplots(figsize=(25,10))\nax.bar(start_time_count.index, 'start station id', data=start_time_count, label='Total riders')\n#bbox_to_anchor is to position the legend box\nax.legend(loc =\"lower left\", bbox_to_anchor=(0.01, 0.89), fontsize='20')\nax.set_xlabel('Days of the month June 2013', fontsize=30)\nax.set_ylabel('Riders',  fontsize=40)\nax.set_title('Bikers trend for the month June', fontsize=50)\n\n#creating twin x axis to plot line chart is same figure\nax2=ax.twinx()\n#plotting total trip duration of all user per day\nax2.plot('tripduration', data=trip_duration_count, color='y', label='Total trip duration', marker='o', linewidth=5, markersize=12)\nax2.set_ylabel('Time duration',  fontsize=40)\nax2.legend(loc =\"upper left\", bbox_to_anchor=(0.01, 0.9), fontsize='20')\n\nax.set_xticks(trip_duration_count.index)\nax.set_xticklabels([i for i in range(1,31)])\n\n#tweeking x and y ticks labels of axes1\nax.tick_params(labelsize=30, labelcolor='#eb4034')\n#tweeking x and y ticks labels of axes2\nax2.tick_params(labelsize=30, labelcolor='#eb4034')\n\nplt.show()","b13b430f":"#top 10 start station\ntop_start_station = df['start station name'].value_counts()[:10]\n\nfig,ax=plt.subplots(figsize=(20,8))\nax.bar(x=top_start_station.index, height=top_start_station.values, color='#70eb67', width=0.5)\n\n#adding value above each bar:Annotation\nfor p in ax.patches:\n    an = ax.annotate(format(p.get_height(), '.2f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center',\n                   va = 'center', \n                   xytext = (0, 10), \n                   textcoords = 'offset points')\n    an.set_size(20)\nax.set_title(\"Top 10 start locations in NY\",fontsize=30)\nax.set_xlabel(\"Station name\",fontsize=20)\n\n#rotating the x tick labels to 45 degrees\nax.set_xticklabels(top_start_station.index, rotation = 45, ha=\"right\")\nax.set_ylabel(\"Count\",fontsize=20)\n#tweeking x and y tick labels \nax.tick_params(labelsize=15)\nplt.show()","e2c5b5ec":"#top 10 end station\ntop_end_station = df['end station name'].value_counts()[:10]\n\nfig,ax=plt.subplots(figsize=(20,8))\nax.bar(x=top_end_station.index, height=top_end_station.values, color='#edde68', width=0.5)\n\n#adding value above each bar:Annotation\nfor p in ax.patches:\n    an = ax.annotate(format(p.get_height(), '.2f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center',\n                   va = 'center', \n                   xytext = (0, 10), \n                   textcoords = 'offset points')\n    an.set_size(20)\nax.set_title(\"Top 10 end locations in NY\",fontsize=30)\nax.set_xlabel(\"Station name\",fontsize=20)\n\n#rotating the x tick labels to 45 degrees\nax.set_xticklabels(top_end_station.index, rotation = 45, ha=\"right\")\nax.set_ylabel(\"Count\",fontsize=20)\n#tweeking x and y tick labels \nax.tick_params(labelsize=15)\nplt.show()","c2ef54fa":"# Conclusions\n* **We can see more number of Male riders in New York city but due to large number of unkown gender we cannot get to any concrete conclusion. Filling unknown gender values is possible but we are not going to do it considering riders did not choose to disclose their gender.**\n* **We can see there are more number of yearly subscribers than 1\/3day customers. But the difference is not much, company can focus on converting them.**\n* **There are large number of riders who ride for less than half an hour per trip and most less than 1 hour.**\n* **Nearly 96% of rides have different start and end location.**\n* **Number of riders increase considerabily closing to end of the month.**\n* **There are negligible riders on 1st sunday of the month.**\n* **Amont of time the riders use the bike decreases closing to the end of the month.**\n* **Top 10 trip start locations:**\n\n    1. **W 20 St & 11 Ave**\n    \n    2. **E 17 St & Broadway**\n    \n    3. **Broadway & W 58 St**\n    \n    4. **Broadway & E 14 St**\n    \n    5. **Broadway & W 24 St**\n    \n    6. **Central Park S & 6 Ave**\n    \n    7. **West Thames St**\n    \n    8. **West St & Chambers St**\n    \n    9. **Lafayette St & E 8 St**\n    \n    10. **8 Ave & W 31 St N**\n    \n* **Top 10 trip start locations:**\n\n    1. **W 20 St & 11 Ave**\n    \n    2. **E 17 St & Broadway**\n    \n    3. **Broadway & W 58 St**\n    \n    4. **Central Park S & 6 Ave**\n    \n    5. **West Thames St**\n    \n    6. **Broadway & E 14 St**\n    \n    7. **Broadway & W 24 St**\n    \n    8. **West St & Chambers St**\n    \n    9. **9 Ave & W 14 St**\n    \n    10. **8 Ave & W 31 St N**\n    \n#  Thank you","a825431f":"# CitiBike is New York City\u2019s bike share system, and the largest in the nation. CitiBike launched in May 2013 and has become an essential part of transportation network. They make commute fun, efficient and affordable \u2013 not to mention healthy and good for the environment.\n\n**Here we will be dealing with the data from June 2013 having all the details of riders. Also, there are so many missing values to deal with. Some of the questions we will answering would look like - Where do Citi Bikers ride? When do they ride? How far do they go? Which stations are most popular? What days of the week are most rides taken on? Discovering the answers to these questions and more.**\n\n[Link in CitiBike dataset. If possible give an upvote to the dadaset](https:\/\/www.kaggle.com\/sujan97\/citibike-system-data)\n\n**Columsn of dataset**\n\n1. **Trip duration in seconds**\n1. **Start time**\n1. **Stop time**\n1. **Start station id**\n1. **Start station name**\n1. **Start station latitude**\n1. **Start station longitude**\n1. **End station id**\n1. **End station name**\n1. **End station latitude**\n1. **End station longitude**\n1. **Bikeid**\n1. **Birth year**\n1. **User type - (Customer = 24-hour pass or 3-day pass user; Subscriber = Annual Member)**\n1. **Gender - (Zero=unknown; 1=male; 2=female)**"}}