{"cell_type":{"91adc17d":"code","8971f5bc":"code","fd04a35a":"code","dbdd7ae6":"code","a4162935":"code","86718710":"code","61890e9b":"code","1c13b7e9":"code","c95e44b6":"code","38ea194d":"code","b7dc562b":"markdown","f461ae47":"markdown","d4fef088":"markdown","a0833f29":"markdown","d673bf2d":"markdown","dd412dea":"markdown","c14fd8d9":"markdown","df1dff9f":"markdown","3508be63":"markdown","f5e118bd":"markdown","4df39958":"markdown","689a5fea":"markdown","ac0fba04":"markdown","1ece9e5a":"markdown","eeb06ebc":"markdown","265e76fb":"markdown","aa88b0e8":"markdown"},"source":{"91adc17d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport requests ","8971f5bc":"df = pd.read_csv(\"\/kaggle\/input\/data-set\/disney_movies_total_gross.csv\")\nprint(df.head())","fd04a35a":"print(df.info())","dbdd7ae6":"print(df[df['inflation_adjusted_gross'] <= 0])","a4162935":"mg = df[df['genre'].isna()]\nprint(mg)","86718710":"print(df['genre'].unique())\nprint(\"\")\nprint(\"Number of genres:\")\nprint(len(df['genre'].unique()))","61890e9b":"movies_m = list(mg['movie_title'])\n\n\nindex_list =  list(mg.index)\n\n\n############API CODE#################\n\n#starting_data_frame = mg.loc[[20]]\n\n\n\n#for i in range(17):\n    #response = requests.get('http:\/\/www.omdbapi.com\/?t=' + movies_m[i] + '&apikey=2d514876')\n    \n    #thing = response.json()\n    #new = dict(thing)\n    \n\n    #for z in list(new.keys()):\n        #if z == 'Genre':\n            #list_of_genres = new['Genre'].split(',')\n            \n        \n\n    #pooh = mg.loc[[index_list[i]]]\n\n    #pooh = pooh.append([pooh]*(len(list_of_genres)-1), ignore_index=True)\n\n    #pooh['genre'] = pd.Series(list_of_genres)\n\n    #starting_data_frame = starting_data_frame.append(pooh, ignore_index=True)\n\n\n\n\n\n\n#fresh_df = pd.concat([df, starting_data_frame], ignore_index=True)\n\n\n\n\n#fresh_df['genre'] = fresh_df['genre'].fillna(0)\n\n\n#index_to_drop = fresh_df[fresh_df['genre'] == 0]\n\n#list_to_drop = list(index_to_drop.index)\n#fresh_df = fresh_df.drop(list_to_drop)\n#print(fresh_df.info())\n\nnew_csv = pd.read_csv('\/kaggle\/input\/fixed-dataset\/fixed_movies.csv')","1c13b7e9":"print(new_csv['genre'].unique())\nprint(\"\")\nprint(\"Number of genres:\")\nprint(len(new_csv['genre'].unique()))","c95e44b6":"check = df[df['genre'].isna()]\ncheck2 = new_csv[new_csv['movie_title'].isin(movies_m)]\n\nprint(check.groupby('movie_title').count())\nprint(check2.groupby('movie_title').count())","38ea194d":"list_of_genres = list(new_csv['genre'].unique())\n\n\ngenres_with_spaces = []\n\nfor i in list_of_genres:\n    if i[0] == \" \":\n        genres_with_spaces.append(i)\n\n\n\nstring_without_spaces = []\n\nfor i in genres_with_spaces:\n    string_without_spaces.append(i.strip())\n\n\n\n\nnew_csv['genre'] = new_csv[\"genre\"].replace(genres_with_spaces, string_without_spaces)\n\n\n\nvs = new_csv.groupby('genre')['inflation_adjusted_gross'].sum()\n\n\n\nsorted_vs = vs.sort_values(axis=0, ascending=False)\n\nprint(sorted_vs)\nsorted_vs.plot(kind='bar', title=\"Gross Generated By genres Of Movies\")\nplt.xlabel('movie genres')\nplt.ylabel('money')\n\n\n\nplt.show()","b7dc562b":"**In order to find \"erroneous\" values, we will set a condition to subset rows where the inflation_adjusted_gross <= 0.**","f461ae47":"**The values are unable to be located, therefore, will not contribute to the data.**","d4fef088":"### inflation_adjusted_gross column","a0833f29":"**Now knowing the names of the movies with the missing genres, I will use OMDB api to find the genres associated with each movie then populate the dataframe with the new genres and create a new dataframe. However, lets take a look at how many genres there are in the dataset and the types of genres before we populate the dataset with the new genres**","d673bf2d":"**The columns of interest are the \"genre\" and \"inflation_adjusted_gross\" column. We notice there is missing values in the \"genre\" column, but lets take a look at the inflation_adjusted_gross column\".**","dd412dea":"### Graphing","c14fd8d9":"**This is a short EDA over the \"Disney Movies 1937-2016 Gross Income\" dataset. We will be using the OMDB Api to populate the missing genres in the dataset to get a more accurate read on which genre's generate the most gross.** ","df1dff9f":"# Introduction","3508be63":"Let us find what rows contain the missing genres.","f5e118bd":"# Importing Modules","4df39958":"# Exploratory Data Analysis","689a5fea":"**Constructing dataframe with genre values for the missing movies using OMDB Api (Unfortunetely due to kaggle's time constraint, the code for the api cannot be run, however, I created a new csv using the dataframe that was outputted through this code)**","ac0fba04":"**The amount of genre's for each movie has substantially increased because many movies are categorized to more then 1 genre.\nIn order to account for this, I decided that for each genre the movie is categorized into, the same 'inflation_adjusted_gross' applies to it**\n","1ece9e5a":"# What genres of disney movies generate the most gross?\n","eeb06ebc":"**Interestingly, we ended with a dataframe larger then we started with before. Lets find out why**","265e76fb":"![disney_money.jpg](attachment:disney_money.jpg)","aa88b0e8":"### genre column"}}