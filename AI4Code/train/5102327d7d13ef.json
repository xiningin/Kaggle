{"cell_type":{"56db0c47":"code","ad2a6666":"code","2ef89a85":"code","56bf2d54":"code","f4378130":"code","9f33f964":"code","0fe8c466":"code","9a9ad5a0":"code","9f5a77f9":"code","73b5aeeb":"code","c6bcb9aa":"code","4eea34b6":"code","9018583d":"code","14b86309":"code","de361155":"code","8bb160b7":"code","92dde1ed":"code","6abb06d7":"code","dfff78ee":"code","038851dc":"code","f5e66f6e":"code","2a242831":"code","3f5065f8":"code","1f73bce1":"code","409c4697":"code","399cafd6":"code","cde65bd9":"code","23f54097":"code","1b49de59":"code","f270d2cf":"markdown","78ceab85":"markdown","a9a688a8":"markdown","13f40e40":"markdown"},"source":{"56db0c47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad2a6666":"test = pd.read_csv(\"..\/input\/loan-default-prediction\/test_v2.csv.zip\", low_memory=True)\ntrain = pd.read_csv(\"..\/input\/loan-default-prediction\/train_v2.csv.zip\", low_memory=True)\nsubmission = pd.read_csv(\"..\/input\/loan-default-prediction\/sampleSubmission.csv\")","2ef89a85":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","56bf2d54":"train.info()","f4378130":"train = reduce_mem_usage(train, verbose=True)","9f33f964":"train.info()","0fe8c466":"non_number_train_columns = train.dtypes[train.dtypes == object].index.values\nnon_number_train_columns","9a9ad5a0":"for col in non_number_train_columns:\n    print(col, len(train[train[col]=='NA']))","9f5a77f9":"train.fillna(-1)\n\nfor cols in train[train['f137']=='NA'].index:\n    train.loc[cols,'f137'] = -1\n\nfor cols in non_number_train_columns:\n    train[cols] = train[cols].astype(np.float64)","73b5aeeb":"train.info()","c6bcb9aa":"test.info()","4eea34b6":"test = reduce_mem_usage(test, verbose=True)","9018583d":"test.info()","14b86309":"test.head()","de361155":"non_number_test_columns = test.dtypes[test.dtypes == object].index.values\nnon_number_test_columns","8bb160b7":"for i in test[test['f276']=='NA'].index:\n    print(i)","92dde1ed":"for cols in test[test['f276']=='NA'].index:\n    print(test.loc[cols,'f276'])","6abb06d7":"# test.loc[cols,'f276']","dfff78ee":"test[test['f276']=='NA']","038851dc":"# test.loc[test[test['f137']=='NA'],'f137']","f5e66f6e":"test.loc[1,'f137']","2a242831":"test.fillna(-1)\n\nfor cols in test[test['f276']=='NA'].index:\n    test.loc[cols,'f276'] = -1\n\nfor cols in non_number_test_columns:\n    test[cols] = test[cols].astype(np.float64)","3f5065f8":"test.info()","1f73bce1":"train = train.fillna(train.mean())\ntest = test.fillna(test.mean())","409c4697":"x_train = train.iloc[:len(train)*9\/\/10].drop(['id','loss'], axis=1)\nx_val = train.iloc[len(train)*9\/\/10:].drop(['id','loss'], axis=1)\nx_test = test.drop(['id'], axis=1)\n\ny_train = train.iloc[:len(train)*9\/\/10]['loss']\ny_val = train.iloc[len(train)*9\/\/10:]['loss']","399cafd6":"import time\nfrom xgboost import XGBRegressor\nts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=10,\n    n_estimators=1000,\n    min_child_weight=0.5, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.1,\n#     tree_method='gpu_hist',\n    seed=42)\n\nmodel.fit(\n    x_train, \n    y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(x_train, y_train), (x_val, y_val)], \n    verbose=True, \n    early_stopping_rounds = 20)\n\ntime.time() - ts","cde65bd9":"Y_pred = model.predict(x_val)\nY_test = model.predict(x_test)","23f54097":"submission['loss'] = Y_test\nsubmission.to_csv('submission_xgb.csv',index=False)","1b49de59":"# test.isnull().sum()","f270d2cf":"1","78ceab85":"1","a9a688a8":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfor columns in train.columns[1:]:\n    print(columns)\n    print('Mean',train[columns].mean())\n    print('Median',train[columns].median())\n    sns.distplot(train[columns]) # , kde=False, fit=stats.gamma\n    plt.show()","13f40e40":"for col in non_number_test_columns:\n    print(cols, len(test[test[cols]=='NA']))"}}