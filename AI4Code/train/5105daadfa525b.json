{"cell_type":{"77e1a3aa":"code","0ae9a9c9":"code","b97830b7":"code","ac6c4ede":"code","fddea93e":"code","99f67d89":"code","d0efc48a":"code","68142ea5":"code","9356d4a8":"code","7014b835":"code","b3af4c5a":"code","f70ac7b2":"code","65b78316":"code","4f679a75":"code","ab49260f":"code","3438abc4":"code","19f263da":"code","f9a30471":"code","825f12b0":"code","fe1ac144":"code","02bcdd6e":"code","012de957":"code","12286f91":"code","c147b8e4":"code","146b2031":"code","cb2e1bc1":"code","de0d7d45":"code","8ea0ccd7":"code","a1f778fd":"code","e4e4333a":"code","28434a9d":"code","648b1126":"code","ebe6202e":"code","d7a249af":"code","ebddc555":"code","06ea701b":"code","dba8985b":"code","dfffd145":"code","9c312255":"code","da0d80cc":"code","c7452512":"code","825b7f8c":"code","57da57e0":"code","63bd9bd6":"code","1033e2fa":"code","84575e97":"code","84b1356e":"code","84ed5ea4":"markdown","64e91e53":"markdown","644417c8":"markdown","fdae9554":"markdown","32fbb14f":"markdown","aa917e9f":"markdown","e92bbcfd":"markdown","66d3fe96":"markdown","e32c7d25":"markdown","bce4a6eb":"markdown"},"source":{"77e1a3aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ae9a9c9":"# importing the training and test datasets:\ntitanic_train = pd.read_csv(r'\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\ntitanic_test=pd.read_csv(r'\/kaggle\/input\/titanic\/test.csv',index_col='PassengerId')","b97830b7":"titanic_train.head()","ac6c4ede":"titanic_test.head()","fddea93e":"# let us check the % of passengers who survived:\ntitanic_train.loc[:,'Survived'].sum()\/len(titanic_train.loc[:,'Survived'])*100","99f67d89":"# Checking the missing values by feature\ntitanic_train.isna().sum()","d0efc48a":"# evaluating relationship b\/w various vars and Survival, we will evaluate the relationship with Age and Fare separately:\nvars = ['Pclass','Sex','SibSp','Parch','Embarked']\n\ni=1\nfig=plt.figure()\n\nfor var in vars:\n    sns.countplot(data=titanic_train,x=var,hue='Survived')\n    plt.show()","68142ea5":"# Checking the relationship b\/w Age,fare and survival:\n\nsns.displot(data=titanic_train,x='Age',hue='Survived',multiple='stack',bins=8)\n\nsns.displot(data=titanic_train,x='Fare',hue='Survived',multiple='stack',bins=10)\nplt.show()","9356d4a8":"titanic_train.loc[titanic_train.Embarked.isna()==True,:]","7014b835":"titanic_train.Embarked.fillna('C',inplace=True)","b3af4c5a":"# Cabin has 687 missing values in the training set, 327 missing values in the test set; let us just replace this with 'NA':\ntitanic_train.Cabin.fillna('NA',inplace=True)\ntitanic_test.Cabin.fillna('NA',inplace=True)","f70ac7b2":"titanic_train[\"Title\"] = ([i.split(\",\")[1].split(\".\")[0].strip() for i in titanic_train.Name])\ntitanic_test[\"Title\"] = ([i.split(\",\")[1].split(\".\")[0].strip() for i in titanic_test.Name])","65b78316":"print(titanic_train.Title.unique())\nprint(titanic_test.Title.unique())","4f679a75":"# Let us map the different titles to reduce the number of unique titles, for example Mme can be replaced with Mrs., Ms and Mlle can be replaced with Miss:\ntitle_dict = {'Mr':'Mr','Miss':'Miss','Mrs':'Mrs','Master':'Master','Mlle':'Miss','Ms':'Mrs','Mme':'Mrs','Dr':'Dr','Rev':'Rev','Major':'Mr','Don':'Mr','Col':'Mr','Lady':'Mrs','Jonkheer':'Mr','the Countess':'Mrs','Capt':'Mr','Sir':'Mr','Dona':'Mrs'}\ntitanic_train.Title = titanic_train.Title.map(title_dict)\ntitanic_test.Title = titanic_test.Title.map(title_dict)","ab49260f":"# Evaluating Age by title:\nprint(titanic_train.loc[titanic_train.Title=='Master',:].Age.describe([]))\nprint(' ')\nprint(titanic_train.loc[titanic_train.Title=='Mr',:].Age.describe([]))\n","3438abc4":"titanic_train.loc[(titanic_train.Age<=12)&(titanic_train.Title=='Mr'),'Title']='Master'","19f263da":"# let us check for similar anomaly in the test set:\nprint(titanic_test.loc[titanic_test.Title=='Master',:].Age.describe([]))\nprint(' ')\nprint(titanic_test.loc[titanic_test.Title=='Mr',:].Age.describe([]))","f9a30471":"# here we see that some males >12 have been addressed as Master, let us change their title to Mr:\ntitanic_test.loc[(titanic_test.Age>12)&(titanic_test.Title=='Master'),'Title']='Mr'","825f12b0":"# let us evaluate Age by title for Miss and Mrs:\nprint(titanic_train.loc[titanic_train.Title=='Miss',:].Age.describe())\nprint(' ')\nprint(titanic_train.loc[titanic_train.Title=='Mrs',:].Age.describe())","fe1ac144":"# let us change the Title of females who are Miss and above the age 25 to 'Miss Senior':\ntitanic_train.loc[(titanic_train.Age>25)&(titanic_train.Title=='Miss'),'Title']='Miss Senior'\ntitanic_test.loc[(titanic_test.Age>25)&(titanic_test.Title=='Miss'),'Title']='Miss Senior'","02bcdd6e":"# let us make a boxplot to see the relationship b\/w Age and title by Pclass:\nplt.figure(figsize=(12,5))\nsns.boxplot(data=titanic_train, y='Age',x='Pclass',hue='Title')\nplt.show()","012de957":"# From the boxplot we see that age varies across titles across the 3 classes (1,2,3), so let us impute age using Title and Pclass as factors:\ndef age_imputer(dataframe):\n    id_list = dataframe[dataframe.Age.isna()].index\n    \n    for id in id_list:\n        pclass = dataframe.Pclass[id]\n        title = dataframe.Title[id]\n        dataframe.Age[id] = titanic_train.loc[(titanic_train['Pclass']==pclass)&(titanic_train['Title']==title),:].Age.median()\n        \n    return dataframe","12286f91":"age_imputer(titanic_train)","c147b8e4":"# Imputing missing values of Age in test set:\ntitle_test = ['Mr','Miss','Mrs','Master','Rev','Dr','Miss Senior']\npclass_test = [1,2,3]\nfor title in title_test:\n    for pclass in pclass_test:\n        titanic_test.loc[(titanic_test.Pclass==pclass) & (titanic_test.Title==title) & (titanic_test.Age.isna()==True),'Age']=titanic_train.loc[(titanic_train.Pclass== pclass) & (titanic_train.Title==title),:].Age.median()","146b2031":"# Imputing missing Fare value in test set:\ntitanic_test.loc[titanic_test.Fare.isna()==True,:]","cb2e1bc1":"# Let us impute this missing Fare value with median Fare value in Class 3 in train set:\ntitanic_test.loc[titanic_test.Fare.isna()==True,'Fare']=titanic_train.loc[titanic_train.Pclass==3,:].Fare.median()","de0d7d45":"# Now there should be no missing values:\nprint(titanic_train.isna().sum())\nprint(titanic_test.isna().sum())","8ea0ccd7":"# let us also make a plot to see the relationship b\/w Survival and title:\nsns.countplot(data=titanic_train, x='Title',hue='Survived')\nplt.show()","a1f778fd":"# Handling outliers in the train and test sets:\nsns.boxplot(data=titanic_train,y= 'Age',x='Title')\nplt.show()\n\nsns.boxplot(data=titanic_train,y= 'Fare',x='Pclass')\nplt.show()","e4e4333a":"# dummy variable creation for Sex and Title:\ntrain_dummy = pd.get_dummies(titanic_train[['Sex','Title']],drop_first=True)\ntest_dummy = pd.get_dummies(titanic_test[['Sex','Title']],drop_first=True)","28434a9d":"titanic_train=pd.concat([titanic_train,train_dummy],axis=1)\ntitanic_test=pd.concat([titanic_test,test_dummy],axis=1)","648b1126":"titanic_train.columns","ebe6202e":"# splitting into X,y (I have chosen a few variables which I think will influence survival rate):\n\nX=titanic_train[['Pclass','Age','Fare','SibSp','Parch','Title_Master','Title_Miss','Title_Miss Senior','Title_Mr','Title_Mrs','Title_Rev']]\ny=titanic_train['Survived']","d7a249af":"# splitting into train and validation set:\nfrom sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val = train_test_split(X,y,train_size=0.8,random_state=40,stratify=y)","ebddc555":"# Scaling the variables:\n\n# scaling the variables Age, Fare and Fam_size using standard scaler:\nscale_vars = ['Pclass','Age','Fare','SibSp','Parch']\n\nfrom sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nX_train[scale_vars]=scaler.fit_transform(X_train[scale_vars])","06ea701b":"# applying the scaler to transform X_val and titanic_test:\nX_val[scale_vars] = scaler.transform(X_val[scale_vars])\ntitanic_test[scale_vars] = scaler.transform(titanic_test[scale_vars])","dba8985b":"# model building using KNN classifier:\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nknn_model = KNeighborsClassifier()\n\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\nknn_params = {'n_neighbors':[5,7,9,11,13],'metric':['minkowski','manhattan','chebyshev']}\n\n# evaluate model\nknn_GS = GridSearchCV(knn_model, knn_params, scoring=\"accuracy\", cv = cv, n_jobs=-1)\nknn_GS.fit(X_train,y_train)","dfffd145":"print(knn_GS.best_params_)\nprint(knn_GS.best_score_)","9c312255":"# Evaluating the model on the validation set:\nfrom sklearn.metrics import confusion_matrix\nknn_mod = KNeighborsClassifier(n_neighbors=13,metric='manhattan')\nknn_mod.fit(X_train,y_train)\ny_val_pred = knn_mod.predict(X_val)\nconfusion_matrix(y_val,y_val_pred)","da0d80cc":"# building the model using the best parameters on the complete dataset i.e. X, scaling the variables first:\nX[scale_vars] = scaler.transform(X[scale_vars])","c7452512":"X.head()","825b7f8c":"# Fitting the model on X,y:\nknn_mod.fit(X,y)","57da57e0":"y_train_pred = knn_mod.predict(X)","63bd9bd6":"confusion_matrix(y,y_train_pred)","1033e2fa":"# Extracting the predictor variabes used for model building into X_test:\nX_test = titanic_test[['Pclass','Age','Fare','SibSp','Parch','Title_Master','Title_Miss','Title_Miss Senior','Title_Mr','Title_Mrs','Title_Rev']]","84575e97":"# predicting on X_test:\ny_test_pred = knn_mod.predict(X_test)","84b1356e":"# saving the output to a csv file:\noutput = pd.DataFrame({'PassengerId': titanic_test.index,'Survived': y_test_pred})\noutput.to_csv('Submission_KNN_8July.csv',index=False)","84ed5ea4":"#### We see from above that both the passengers travelled in Pclass 1 and we know from the training data that maximum % of passengers from Cherbourg travelled in Pclass 1, hence we will replace these 2 missing values with 'C':","64e91e53":"### from the above plot we can draw 2 simple conclusions:\n1) Younger males i.e. boys had a better survival rate\n\n2) Older females had a better survival rate then younger ones! This is opposite the conclusion drawn for Males!","644417c8":"### Now let us build a KNN classifier model, steps to be done:\n1) Splitting the training data into X and Y\n\n2) Splitting the training dataset into training and test sets\n\n3) KNN model building and hyperparameter tuning using GridSearchCV\n\n4) Finding the best parameters and building a final model using these parameters","fdae9554":"# Conclusions basis above 2 plots:\n1) Age: younger passengers especially below 20 had a better chance of survival then older ones\n2) Fare: clearly, people with higher fares (of a higher socio economic status) had a better chance of survival","32fbb14f":"# handling missing values:\n- first let us handle missing values in Embarked column which has only 2 missing values:","aa917e9f":"### Here is my attempt at Titanic survival prediction basis KNN classifier model, request fellow peers to please have a look and give their suggestions to further work on this notebook.\n### Thanks a lot!","e92bbcfd":"# conclusions from the above plots:\n1) Passengers in higher class had a better chance of survival\n2) Females had a better chance of survival then males\n3) Passengers with sibling+spouse equaling 1 or 2 had a better survival rate\n4) Passengers with Parent + child totaling to 1,2 or 3 had a better survival rate\n5) Passengers who Embarked from C (Cherbourg) or Q (Queenstown) had a better survival rate","66d3fe96":"### Master is used to address boys till the age of 12 but it seems some boys have been given the title of Mr, let us correct this and change title of all males <=12 to Master:\n","e32c7d25":"### Missing value imputation in the Age column in both train and test set:\n - #### Age is related to title in the sense that Master refers to a child and Miss refers to an unmarried female who would we may assume will be of a young age though not necessarily!\n- #### Passengers traveling in  \n\n","bce4a6eb":"### Predicting on the test set:"}}