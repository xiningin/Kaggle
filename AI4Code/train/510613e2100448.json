{"cell_type":{"c1a50f14":"code","4c4ed22a":"code","fe541c4e":"code","1074a4e0":"code","6e4f0f3f":"code","6db767d5":"code","3a08b0cb":"code","fb0086dc":"code","c8ceec77":"markdown","9b189949":"markdown"},"source":{"c1a50f14":"import pandas as pd\nimport numpy as np\nfrom glob import glob\nimport random\nimport os\nimport time\nimport torch\nimport torchaudio\nimport librosa","4c4ed22a":"BASE_TEST_DIR = '..\/input\/birdsong-recognition' if os.path.exists('..\/input\/birdsong-recognition\/test_audio') else '..\/input\/birdcall-check'","fe541c4e":"df_test = pd.read_csv(f'{BASE_TEST_DIR}\/test.csv')\ndf_train = pd.read_csv('..\/input\/birdsong-recognition\/train.csv')\nall_birds = df_train['ebird_code'].unique()","1074a4e0":"def random_predict():\n    birds = random.choices(all_birds, k=random.randint(0,2)) or ['nocall']\n    return ' '.join(birds)","6e4f0f3f":"sub_test_12 = df_test[df_test.site.isin(['site_1', 'site_2'])]\nsub_test_3 = df_test[df_test.site.isin(['site_3'])]","6db767d5":"TEST_FOLDER = f'{BASE_TEST_DIR}\/test_audio'\n\ndef custom_read_audio(audio_path, sr=44100):\n    \"\"\"\n    author: @shonenkov \n    \n    Super fast method, without exceptions. \n    return waveform <torch.tensor>, sample_rate <number>\n    \"\"\"\n    try:\n        waveform, sample_rate = torchaudio.load(audio_path, normalization=True)\n        if sample_rate != sr:\n            waveform = torchaudio.transforms.Resample(sample_rate, sr)(waveform)\n            sample_rate = sr\n    except RuntimeError:\n        waveform, sample_rate = librosa.load(audio_path, sr=sr, mono=False)\n        waveform = torch.from_numpy(waveform)\n        if waveform.shape[0] not in [1, 2]:\n            waveform = waveform.unsqueeze(0)\n    return waveform, sample_rate","3a08b0cb":"submission = {'row_id': [], 'birds': []}\n\nfor audio_id, data in sub_test_12.groupby('audio_id'):\n    waveform, sample_rate = custom_read_audio(f'{TEST_FOLDER}\/{audio_id}.mp3')\n    submission['row_id'].extend(data['row_id'].values)\n    submission['birds'].extend([random_predict() for i in range(data.shape[0])])\n\nfor _, row in sub_test_3.iterrows():\n    row_id, audio_id = row['row_id'], row['audio_id']\n    waveform, sample_rate = custom_read_audio(f'{TEST_FOLDER}\/{audio_id}.mp3')\n    submission['row_id'].append(row_id)\n    submission['birds'].append(random_predict())\n\nsubmission = pd.DataFrame(submission)\nsubmission.head()","fb0086dc":"submission.to_csv('submission.csv', index=False)","c8ceec77":"# Sample Submission\n\nThis notebook without model. It will help for making submission without Exception (jump start)","9b189949":"# Custom Dataset for Check Phase\n\nI am feeling secondhand embarrassment for our competition hosts... I think they [forgot about how should work with hidden test in code competition](https:\/\/www.kaggle.com\/c\/birdsong-recognition\/discussion\/158987#892424). So, I have created [custom dataset](https:\/\/www.kaggle.com\/shonenkov\/birdcall-check) for making check phase. It is hardcode, but it will help you avoid many bugs without button \"submission\". \n\n"}}