{"cell_type":{"1458a738":"code","4a5678ce":"code","db6395be":"code","25cde2fc":"code","b421b761":"code","7f4a0bbe":"code","2780d6a8":"code","f33c0d7e":"code","b298f249":"code","fdc7daab":"code","5d286683":"code","b83b23ed":"code","bd8f3dab":"code","6cca42f4":"code","6f09e393":"code","5ebdb856":"code","e4bc5ed3":"code","7c5c795a":"code","f034f4e3":"code","3d96b6d9":"code","20c97daa":"code","cfc09cfd":"code","c5b13436":"code","40c8289b":"markdown","799f60fb":"markdown"},"source":{"1458a738":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2","4a5678ce":"os.chdir(\"..\/input\/brain-mri-images-for-brain-tumor-detection\/\")","db6395be":"yes=os.listdir('.\/brain_tumor_dataset\/yes')\nno=os.listdir('.\/brain_tumor_dataset\/no')","25cde2fc":"X_data =[]\nfor file in yes:\n    img = cv2.imread('.\/brain_tumor_dataset\/yes\/'+file)\n    face = cv2.resize(img, (224, 224) )\n    (b, g, r)=cv2.split(face) \n    img=cv2.merge([r,g,b])\n    X_data.append(img)\n\nfor file in no:\n    img = cv2.imread('.\/brain_tumor_dataset\/no\/'+file)\n    face = cv2.resize(img, (224, 224) )\n    (b, g, r)=cv2.split(face) \n    img=cv2.merge([r,g,b])\n    X_data.append(img)","b421b761":"X = np.squeeze(X_data)\nX.shape","7f4a0bbe":"#show one training sample\nfrom matplotlib import pyplot as plt\nplt.imshow(X[5], interpolation='nearest')\nplt.show()","2780d6a8":"# normalize data\nX = X.astype('float32')\nX \/= 255","f33c0d7e":"target_x=np.full(len(yes),1)\ntarget_y=np.full(len(no),0)\ndata_target=np.concatenate([target_x,target_y])\ndata_target","b298f249":"len(data_target)","fdc7daab":"#split data\nlenght = len(data_target)\nindex = np.arange(0,lenght,1)\nlen_train = round(lenght*0.7)\nlen_test = lenght - len_train\nprint (\"train size :\",len_train,\" test_size :\",len_test)","5d286683":"from random import sample\nX_train, y_train, X_test, y_test = [],[],[],[]\ntest_index = sample(set(index), len_test)\n\nfor i in range(lenght):\n    if i not in test_index:\n        X_train.append(X[i])\n        y_train.append(data_target[i])\n    else:\n        X_test.append(X[i])\n        y_test.append(data_target[i])\n\nX_train = np.squeeze(X_train)\ny_train = np.asarray(y_train)\n#y_train = np.squeeze(y_train)\nX_test = np.squeeze(X_test)\ny_test = np.asarray(y_test)\n#y_test = np.squeeze(y_test)\n\nprint(\"X_train :\",X_train.shape,\n      \"y_train :\",y_train.shape,\n     \"\\nX_test :\",X_test.shape,\n     \"y_test :\",y_test.shape)","b83b23ed":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Model\nfrom keras.optimizers import Adam\n\nfrom keras.applications.vgg16 import VGG16","bd8f3dab":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","6cca42f4":"y_train.shape","6f09e393":"model_vgg = VGG16(weights=None, include_top=False, input_shape = (224, 224, 3))#default imagenet\n\n#for layer in model.layers[:5]:\n#    layer.trainable = True\n\nx = model_vgg.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nfinal = Dense(2, activation=\"sigmoid\")(x)\nmodel_final = Model(input = model_vgg.input, output = final)\nmodel_vgg.summary()","5ebdb856":"model_final.compile(loss='categorical_crossentropy',\n             optimizer=Adam(),\n             metrics=['acc'])","e4bc5ed3":"hist = model_final.fit(X_train,y_train,\n         batch_size=32,\n         epochs=10,\n         validation_data=(X_test, y_test))","7c5c795a":"def draw_history(history,figsize=(10,5)):\n    ax,_ = plt.subplots(figsize=figsize)\n    plt.plot(history.history['acc'])\n    plt.plot(history.history['val_acc'])\n    plt.title('modelaccuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train','test'],loc='upperleft')\n    plt.show()\n    ax,_ = plt.subplots(figsize=figsize)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('modelloss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train','test'],loc='upperleft')\n    plt.show()\n    \ndraw_history(hist)","f034f4e3":"model_vgg = VGG16(weights=\"imagenet\", include_top=False, input_shape = (224, 224, 3))#default imagenet\n\n#for layer in model.layers[:5]:\n#    layer.trainable = True\n\nx = model_vgg.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.2)(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.2)(x)\nx = Dense(512, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nfinal = Dense(2, activation=\"sigmoid\")(x)\nmodel_final = Model(input = model_vgg.input, output = final)\nmodel_final.summary()","3d96b6d9":"model_vgg = VGG16(weights=\"imagenet\", include_top=False, input_shape = (224, 224, 3))#default imagenet\n\n#for layer in model.layers[:5]:\n#    layer.trainable = True\n\nx = model_vgg.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.2)(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.2)(x)\nx = Dense(512, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nfinal = Dense(2, activation=\"sigmoid\")(x)\nmodel_final = Model(input = model_vgg.input, output = final)\nmodel_final.summary()","20c97daa":"model_final.compile(loss='categorical_crossentropy',\n             optimizer=Adam(),\n             metrics=['acc'])","cfc09cfd":"hist = model_final.fit(X_train,y_train,\n         batch_size=32,\n         epochs=10,\n         validation_data=(X_test, y_test))","c5b13436":"def draw_history(history,figsize=(10,5)):\n    ax,_ = plt.subplots(figsize=figsize)\n    plt.plot(history.history['acc'])\n    plt.plot(history.history['val_acc'])\n    plt.title('modelaccuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train','test'],loc='upperleft')\n    plt.show()\n    ax,_ = plt.subplots(figsize=figsize)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('modelloss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train','test'],loc='upperleft')\n    plt.show()\n    \ndraw_history(hist)","40c8289b":"**VGG16 Transfer Learning **","799f60fb":"<h2>VGG 16<h2>"}}