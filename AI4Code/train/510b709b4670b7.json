{"cell_type":{"2423a386":"code","1b7c4b13":"code","f2cb3559":"code","49377165":"code","c45268d3":"code","3d278337":"code","f55e4e3c":"code","020440e5":"code","384219fc":"code","e5105fc1":"code","a319614b":"code","a12cad8d":"code","07ce451d":"code","1c8f13c0":"code","ea5f9742":"code","3779c903":"code","222b3671":"code","1c02cb4b":"code","2e9fe17e":"code","6f09e6ce":"code","36c435b7":"code","bbae17b2":"code","3bd89c51":"code","ce9c1928":"code","89ae6613":"code","644c0910":"code","7609c31e":"markdown","c48ab9aa":"markdown","778a6afb":"markdown","e278982c":"markdown","0b83619a":"markdown","f1498c95":"markdown","41c6085c":"markdown","4cecd5da":"markdown","dfdb8adf":"markdown","3bdc5b95":"markdown"},"source":{"2423a386":"import pandas as pd\nimport csv\nimport random\nimport math","1b7c4b13":"!ls ..\/input\npath = \"..\/input\/pimaindian\/pima-indians-diabetes.data.csv\"","f2cb3559":"def loadCsv(path):\n    lines = csv.reader(open(path))\n    dataset = list(lines)\n    for i in range(len(dataset)):\n        dataset[i] = [float(x) for x in dataset[i]]\n    return dataset","49377165":"dataset = loadCsv(path)","c45268d3":"def splitDataset(dataset, splitRatio):\n    trainSize = int(len(dataset) * splitRatio)\n    trainSet = []\n    copy = list(dataset)\n    while len(trainSet) < trainSize:\n        index = random.randrange(len(copy))\n        trainSet.append(copy.pop(index))\n    return [trainSet, copy]","3d278337":"dataset = [[1], [2], [3], [4], [5]]\nsplitRatio = 0.67 # (2\/1)\ntrain, test = splitDataset(dataset, splitRatio)\nprint('Split {0} rows into train with {1} and test with {2}'.format(len(dataset), train, test))","f55e4e3c":"# Label is the las value in the vector\n# Separated by label\ndef separateByClass(dataset):\n    separated = {}\n    for i in range(len(dataset)):\n        vector = dataset[i]\n        if (vector[-1] not in separated):\n            separated[vector[-1]] = []\n        separated[vector[-1]].append(vector)\n    return separated","020440e5":"dataset = [[1,20,1], [2,21,0], [3,22,1]]\nseparated = separateByClass(dataset)\nprint('Separated instances: {0}'.format(separated))","384219fc":"def mean(numbers):\n    return sum(numbers)\/float(len(numbers))\n\ndef stdev(numbers):\n    avg = mean(numbers)\n    variance = sum([pow(x-avg,2) for x in numbers])\/float(len(numbers)-1)\n    return math.sqrt(variance)","e5105fc1":"def summarize(dataset):\n    summaries = [(mean(attribute), stdev(attribute)) for attribute in zip(*dataset)]\n    del summaries[-1]\n    return summaries","a319614b":"def summarizeByClass(dataset):\n    separated = separateByClass(dataset)\n    summaries = {}\n    for classValue, instances in separated.items():\n        summaries[classValue] = summarize(instances)\n    return summaries","a12cad8d":"## Print out (mean, std) value for each class \ndataset = [[1,20,1], [2,21,0], [3,22,1], [4,22,0]]\nsummary = summarizeByClass(dataset)\nprint('Summary by class value: (class:\\n{0}'.format(summary))","07ce451d":"for a in zip(*dataset):\n    print(a)","1c8f13c0":"## Gaussian Probability Density Function\n# --- #\n# We can use a Gaussian function to estimate the probability of a given attribute value, \n# given the known mean and standard deviation for the attribute estimated from the training data\n# https:\/\/en.wikipedia.org\/wiki\/Gaussian_function\ndef calculateProbability(x, mean, stdev):\n    exponent = math.exp( ( - ((x - mean) ** 2 ) \/ ( 2 * (stdev ** 2) ) ) )\n    return (1 \/ (math.sqrt(2 * math.pi) * stdev)) * exponent","ea5f9742":"# Test the above function\nx = 71.5\nmea = 73\nstde = 6.2\nprobability = calculateProbability(x, mea, stde)\nprint('Probability of belonging to this class: {0}'.format(probability))","3779c903":"## Calculate class probability\n# --- #\ndef calculateClassProbabilities(summaries, inputVector):\n    probabilities = {}\n    for classValue, classSummaries in summaries.items():\n        probabilities[classValue] = 1\n        for i in range(len(classSummaries)):\n            mean, stdev = classSummaries[i]\n            x = inputVector[i]\n            probabilities[classValue] *= calculateProbability(x, mean, stdev)\n    return probabilities","222b3671":"# Test the above function\nsummaries = {0:[(1, 0.5)], 1:[(20, 5.0)]}\ninputVector = [1.1, \"?\"]\nprobabilities = calculateClassProbabilities(summaries, inputVector)\nprint(\"Probabilities for each class: {0}\".format(probabilities))","1c02cb4b":"print(probabilities)","2e9fe17e":"## Make the prediction\ndef predict(summaries, inputVector):\n    probabilities = calculateClassProbabilities(summaries, inputVector)\n    bestLabel, bestProb = None, -1\n    for classValue, probability in probabilities.items():\n        if bestLabel is None or probability > bestProb:\n            bestProb = probability\n            bestLabel = classValue\n    return bestLabel","6f09e6ce":"# Test the above function\nsummaries = {\"A\":[(1, 0.5)], \"B\":[(20, 5.0)]}\ninputVector = [1.1, \"?\"]\nresult = predict(summaries, inputVector)\nprint(\"Prediction: {0}\".format(result))","36c435b7":"## Run the preduction for the set\ndef getPredictions(summaries, testSet):\n    predictions = []\n    for i in range(len(testSet)):\n        result = predict(summaries, testSet[i])\n        predictions.append(result)\n    return predictions","bbae17b2":"summaries = {\"A\":[(1, 0.5)], \"B\":[(20, 5.0)]}\ntestSet = [[1.1, \"?\"], [19.1, \"?\"]]\npredictions = getPredictions(summaries, testSet)\nprint(\"Predictions: {0}\".format(predictions))","3bd89c51":"## Check the performance\ndef getAccuracy(testSet, predictions):\n    correct = 0\n    for x in range(len(testSet)):\n        if testSet[x][-1] == predictions[x]:\n            correct += 1\n    return (correct\/float(len(testSet))) * 100.0","ce9c1928":"testSet = [[1,1,1,'a'], [2,2,2,'a'], [3,3,3,'b']]\npredictions = ['a', 'a', 'a']\naccuracy = getAccuracy(testSet, predictions)\nprint('Accuracy: {0}'.format(accuracy))","89ae6613":"def main():\n    filename = \"..\/input\/pimaindian\/pima-indians-diabetes.data.csv\"\n    splitRatio = 0.67\n    dataset = loadCsv(filename)\n    trainingSet, testSet = splitDataset(dataset, splitRatio)\n    print(\"Split {0} rows into train={1} and test={2} rows\"\n          .format(len(dataset), len(trainingSet), len(testSet)))\n    # prepare model\n    summaries = summarizeByClass(trainingSet)\n    # test model\n    predictions = getPredictions(summaries, testSet)\n    accuracy = getAccuracy(testSet, predictions)\n    print(\"Accuracy: {0}%\".format(accuracy))","644c0910":"main()","7609c31e":"### 4. Test on the data","c48ab9aa":"1. Look at the big picture.\n2. Get the data.\n3. Discover and visualize the data to gain insights.\n4. Prepare the data for Machine Learning algorithms.\n5. Select a model and train it.\n6. Fine-tune your model.\n7. Present your solution.\n8. Launch, monitor, and maintain your system.","778a6afb":"#### Data Distribution for the Dataset","e278982c":"The first task is to separate the training dataset instances by class value so that we can calculate statistics for each class.","0b83619a":"### 3. Make prediction","f1498c95":"### 2. Summarize data","41c6085c":"### 1. Load data","4cecd5da":"1. Look at the big picture.\n2. Get the data.\n3. Discover and visualize the data to gain insights.\n4. Prepare the data for Machine Learning algorithms.\n5. Select a model and train it.\n6. Fine-tune your model.\n7. Present your solution.\n8. Launch, monitor, and maintain your system.","dfdb8adf":"We need to calculate the mean of each attribute for a class value. The mean is the central middle or central tendency of the data, and we will use it as the middle of our gaussian distribution when calculating probabilities.","3bdc5b95":"The first thing we need to do is load our data file"}}