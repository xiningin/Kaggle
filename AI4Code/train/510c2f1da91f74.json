{"cell_type":{"09b0f778":"code","d37967a1":"code","eabc2a50":"code","2b3752c0":"code","7edd2358":"code","678b2ca0":"code","884700b5":"code","f64208f4":"code","734c7f8e":"code","00fa6ac3":"code","0b018188":"code","59aef8ec":"code","4abdfe2f":"code","f9879b7f":"code","5b1e7b84":"code","f0efe5b3":"code","238df062":"code","6471cf57":"code","3eced8db":"code","71465bdd":"markdown","fd29c7ff":"markdown","f659aef6":"markdown","90acd463":"markdown"},"source":{"09b0f778":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom surprise import Reader\nfrom surprise import Dataset\nfrom surprise import SVD\nfrom surprise import KNNBasic\nfrom surprise.model_selection import cross_validate\nimport matplotlib.pyplot as plt","d37967a1":"reader = Reader(line_format='user item rating timestamp', sep=',', rating_scale=(0.5, 5.0), skip_lines=1)","eabc2a50":"ratings = Dataset.load_from_file(\"\/kaggle\/input\/the-movies-dataset\/ratings_small.csv\", reader=reader)","2b3752c0":"PMF = SVD(biased=False) # probabalistic matrix factorization\nUCF = KNNBasic(sim_options={'user_based': True}) # user-based collaborative filtering\nICF = KNNBasic(sim_options={'user_based': False}) # item-based collaborative filtering","7edd2358":"%%time\nPMF_results = cross_validate(PMF, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","678b2ca0":"%%time\nUCF_results = cross_validate(UCF, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","884700b5":"%%time\nICF_results = cross_validate(ICF, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","f64208f4":"data = [[np.mean(UCF_results['test_rmse']), np.mean(UCF_results['test_mae'])],\n        [np.mean(ICF_results['test_rmse']), np.mean(ICF_results['test_mae'])],\n        [np.mean(PMF_results['test_rmse']), np.mean(PMF_results['test_mae'])]]\n\ndf = pd.DataFrame(data, columns=['RMSE', 'MAE'], index=['UCF', 'ICF', 'PMF'])\n\nprint(df)\nfig = df.plot.bar(title='RMSE and MAE Comparison of UCF, ICF, and PMF', ylim=(0.5, 1.05));","734c7f8e":"UCF_cosine = KNNBasic(sim_options={'name': 'cosine', 'user_based': True}) # user-based collaborative filtering using cosine similarity\nUCF_msd = KNNBasic(sim_options={'name': 'MSD', 'user_based': True}) # user-based collaborative filtering using mean squared difference\nUCF_pearson = KNNBasic(sim_options={'name': 'pearson', 'user_based': True}) # user-based collaborative filtering using Pearson correlation coefficient\n\nICF_cosine = KNNBasic(sim_options={'name': 'cosine', 'user_based': False}) # item-based collaborative filtering using cosine similarity\nICF_msd = KNNBasic(sim_options={'name': 'MSD', 'user_based': False}) # item-based collaborative filtering using mean squared difference\nICF_pearson = KNNBasic(sim_options={'name': 'pearson', 'user_based': False}) # item-based collaborative filtering using Pearson correlation coefficient","00fa6ac3":"%%time\nUCF_cosine_results = cross_validate(UCF_cosine, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","0b018188":"%%time\nUCF_msd_results = cross_validate(UCF_msd, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","59aef8ec":"%%time\nUCF_pearson_results = cross_validate(UCF_pearson, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","4abdfe2f":"%%time\nICF_cosine_results = cross_validate(ICF_cosine, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","f9879b7f":"%%time\nICF_msd_results = cross_validate(ICF_msd, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","5b1e7b84":"%%time\nICF_pearson_results = cross_validate(ICF_pearson, ratings, measures=['RMSE', 'MAE'], cv=5, verbose=True)","f0efe5b3":"UCF_sim_data = [[np.mean(UCF_cosine_results['test_rmse']), np.mean(UCF_cosine_results['test_mae'])],\n                [np.mean(UCF_msd_results['test_rmse']), np.mean(UCF_msd_results['test_mae'])],\n                [np.mean(UCF_pearson_results['test_rmse']), np.mean(UCF_pearson_results['test_mae'])]]\n\nUCF_sim_df = pd.DataFrame(UCF_sim_data, columns=['RMSE', 'MAE'], index=['Cosine', 'MSD', 'Pearson'])\n\nICF_sim_data = [[np.mean(ICF_cosine_results['test_rmse']), np.mean(ICF_cosine_results['test_mae'])],\n                [np.mean(ICF_msd_results['test_rmse']), np.mean(ICF_msd_results['test_mae'])],\n                [np.mean(ICF_pearson_results['test_rmse']), np.mean(ICF_pearson_results['test_mae'])]]\n\nICF_sim_df = pd.DataFrame(ICF_sim_data, columns=['RMSE', 'MAE'], index=['Cosine', 'MSD', 'Pearson'])\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(12, 4))\nfig.suptitle('Similarity Measures Comparison')\n\nprint('UCF sim data\\n', UCF_sim_df, '\\n')\nUCF_sim_df.plot.bar(ax=ax1, ylim=(0.5, 1.05));\nax1.title.set_text('User-Based Collaborative Filtering');\n\nprint('ICF sim data\\n', ICF_sim_df, '\\n')\nICF_sim_df.plot.bar(ax=ax2, ylim=(0.5, 1.05));\nax2.title.set_text('Item-Based Collaborative Filtering');","238df062":"UCF_cosine = KNNBasic(sim_options={'name': 'cosine', 'user_based': True}) # user-based collaborative filtering using cosine similarity\nUCF_msd = KNNBasic(sim_options={'name': 'MSD', 'user_based': True}) # user-based collaborative filtering using mean squared difference\nUCF_pearson = KNNBasic(sim_options={'name': 'pearson', 'user_based': True}) # user-based collaborative filtering using Pearson correlation coefficient\n\nICF_cosine = KNNBasic(sim_options={'name': 'cosine', 'user_based': False}) # item-based collaborative filtering using cosine similarity\nICF_msd = KNNBasic(sim_options={'name': 'MSD', 'user_based': False}) # item-based collaborative filtering using mean squared difference\nICF_pearson = KNNBasic(sim_options={'name': 'pearson', 'user_based': False}) # item-based collaborative filtering using Pearson correlation coefficient","6471cf57":"%%capture\nUCF_k_results = []\n\nfor k in range(10, 101, 10):\n    UCF_k = KNNBasic(k=k, sim_options={'user_based': True})\n    result = cross_validate(UCF_k, ratings, measures=['RMSE', 'MAE'], cv=5)\n    UCF_k_results.append([np.mean(result['test_rmse']), np.mean(result['test_mae'])])\n    \nICF_k_results = []\n\nfor k in range(10, 101, 10):\n    ICF_k = KNNBasic(k=k, sim_options={'user_based': False})\n    result = cross_validate(ICF_k, ratings, measures=['RMSE', 'MAE'], cv=5)\n    ICF_k_results.append([np.mean(result['test_rmse']), np.mean(result['test_mae'])])","3eced8db":"UCF_k_df = pd.DataFrame(UCF_k_results, columns=['RMSE', 'MAE'], index=['10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\nICF_k_df = pd.DataFrame(ICF_k_results, columns=['RMSE', 'MAE'], index=['10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(20, 4))\nfig.suptitle('Number of Neighbors Comparison')\n\nprint('UCF k data\\n', UCF_k_df, '\\n')\nUCF_k_df.plot.bar(ax=ax1, ylim=(0.5, 1.05));\nax1.set_xlabel('number of neighbors')\nax1.title.set_text('User-Based Collaborative Filtering');\n\nprint('ICF k data\\n', ICF_k_df, '\\n')\nICF_k_df.plot.bar(ax=ax2, ylim=(0.5, 1.05));\nax2.set_xlabel('number of neighbors')\nax2.title.set_text('Item-Based Collaborative Filtering');","71465bdd":"### c. Compute the average MAE and RMSE of the Probabilistic Matrix Factorization (PMF), User based Collaborative Filtering, Item based Collaborative Filtering, under the 5-folds cross-validation\n\nFor the rest of the assignment I use the following abbreviations:\n* PMF - probabilistic matrix factorization\n* UCF - user-based collaborative filtering\n* ICF - item-based collaborative filtering\n\nThe KNNBasic algorithm from the surprise library is a basic collaborative filtering model which is used for the user-based collaborative filtering and item-based collaborative filtering.\n\n### d. Compare the average (mean) performances of User-based collaborative filtering, item-based collaborative filtering, PMF with respect to RMSE and MAE. Which ML model is the best in the movie rating data?\n\nBased on the RMSE and MAE results below, item-based collaborative filtering performs the best on the movie rating data.\n\n**NOTE:**\nAll plots have a y-axis which starts at 0.5 to make small differences viewable.\n","fd29c7ff":"### e. Examine how the cosine, MSD (Mean Squared Difference), and Pearson similarities impact the performances of User based Collaborative Filtering and Item based Collaborative Filtering. Plot your results. Is the impact of the three metrics on User based Collaborative Filtering consistent with the impact of the three metrics on Item based Collaborative Filtering?\n\nThe impact of the three metrics is consistent between user- and item-based collaborative filtering. In both cases, MSD performed the best, and cosine similarity and the Pearson correlation coefficient performed slightly worse than MSD, but very similarly to each other.","f659aef6":"### f. Examine how the number of neighbors impacts the performances of User based Collaborative Filtering and Item based Collaborative Filtering? Plot your results.\n\nBased on the results, user-based collaborative filtering performed better with relatively fewer neighbors (near 20), while item-based collaborative filtering performed better with relatively more neighbors (near 80).\n\n### g. Identify the best number of neighbor (denoted by K) for User\/Item based collaborative filtering in terms of RMSE. Is the best K of User based collaborative filtering the same with the best K of Item based collaborative filtering?\n\nThe best number of neighbors for user-based collaborative filtering was 20. For item-based collaborative filtering, the best number of neighbors was 80. They are not the same.","90acd463":"### a. Read data from \u201cratings.csv\u201d with line format: 'userID movieID rating timestamp'. "}}