{"cell_type":{"b2a91322":"code","1202974d":"code","bb840e5b":"code","cfa13cfc":"code","3455dda1":"code","6cadce25":"code","8cc3c348":"code","c0f8b02a":"markdown","1dd3292f":"markdown","7ca2948d":"markdown"},"source":{"b2a91322":"!find \/kaggle\/input\/rps-episode\/ -name '*.json' | wc -l ","1202974d":"# !apt install -qy moreutils \n!cat \/kaggle\/input\/rps-episode\/5847716.json | PYTHONUNBUFFERED=1 python -m json.tool | head -n 50\n!cat \/kaggle\/input\/rps-episode\/5847716.json | PYTHONUNBUFFERED=1 python -m json.tool | tail -n 10","bb840e5b":"import json\nimport glob\nfrom joblib import Parallel, delayed\nfrom collections import defaultdict\nfrom operator import itemgetter","cfa13cfc":"%%time\n\ndef extract_json(filename):\n    with open(filename) as file:\n        data   = json.load(file)\n        teams  = data['info']['TeamNames']\n        output = {\n            team: []\n            for team in teams\n        }\n        for step in data['steps']:\n            for p1, p2 in zip(teams, reversed(teams)):\n                if step[0]['observation'].get('step',0) == 0: continue\n                output[p1].append( step[0]['action'] )\n                output[p2].append( step[1]['action'] )                \n        return output\n        \nfilenames = glob.glob('\/kaggle\/input\/rps-episode\/*.json')\n# dataset   = [ extract_json(filename) for filename in filenames[:10] ]\ndataset   = Parallel(-1)([ delayed(extract_json)(filename) for filename in filenames ])","3455dda1":"{ f'{k:10s}':v[:10] for k,v in list(dataset[0].items())[:4] }","6cadce25":"# %%time\n\nfirst_move_frequency  = defaultdict(int)\nsecond_move_frequency = defaultdict(lambda: defaultdict(int))\nthird_move_frequency  = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))\n\nfor game in dataset:\n    teams = list(game.keys())\n    for p1, p2 in zip(teams, reversed(teams)):\n        try:\n            first_move_frequency[  game[p1][0] ] += 1\n            first_move_frequency[  game[p2][0] ] += 1\n            second_move_frequency[ game[p1][0] ][ game[p2][1] ] += 1\n            second_move_frequency[ game[p2][0] ][ game[p1][1] ] += 1\n            third_move_frequency[  game[p1][0] ][ game[p2][1] ][ game[p1][2] ] += 1\n            third_move_frequency[  game[p2][0] ][ game[p1][1] ][ game[p2][2] ] += 1\n        except: pass\n        \ndef dictify(obj):\n    if isinstance(obj, (dict, defaultdict)):\n        return { k: dictify(obj[k]) for k in [0,1,2] + list(obj.keys()) if k in obj }\n    else: return obj\n    \nprint('first_move_frequency  = ', dictify(first_move_frequency))\nprint('second_move_frequency = ', dictify(second_move_frequency))\nprint('third_move_frequency  = ', dictify(third_move_frequency))","8cc3c348":"first_move_by_team = defaultdict(lambda: defaultdict(int))\nfor game in dataset:\n    teams = list(game.keys())\n    for p1, p2 in zip(teams, reversed(teams)):\n        try:\n            first_move_by_team[p1][ game[p1][0] ] += 1\n            first_move_by_team[p2][ game[p2][0] ] += 1\n        except: pass\nfirst_move_by_team = { team: { move: round(count\/sum(counts.values()), 3) for move, count in counts.items() } for team, counts in first_move_by_team.items() }\nfor team, counts in sorted(first_move_by_team.items(), key=itemgetter(0)):\n    print(f'{team:>25s}', dictify(counts))\n# print('first_move_by_team  = ', dictify(first_move_by_team))","c0f8b02a":"# First Move Frequency By Team","1dd3292f":"# First and Second Move Response","7ca2948d":"# RPS Episode Archive Dataset - EDA\n\nThis notebook explores the [RPS Episode Archive Dataset](https:\/\/www.kaggle.com\/tonyrobinson\/rps-episode)"}}