{"cell_type":{"02a0afc5":"code","4837a812":"code","b86fd6d7":"code","47af4fb9":"code","c44dfab2":"code","3cf85c45":"code","d1570680":"code","a354ef72":"code","45b1282e":"code","dc254226":"code","9780f1a7":"code","5d86bad7":"code","d3f0b8ea":"code","45fe4afa":"code","89d2f403":"code","3dcc0e63":"code","81c43c1a":"code","64e327eb":"markdown","c9315fd4":"markdown","4b3333ea":"markdown","a678686a":"markdown","61ac2691":"markdown","4a1c4cfb":"markdown","109477f0":"markdown"},"source":{"02a0afc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nplt.style.use('ggplot')\nwarnings.filterwarnings(action = \"ignore\")\n%matplotlib inline\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4837a812":"# Load the Csv File\ndf=pd.read_csv('..\/input\/zomato.csv')\ndf.head()","b86fd6d7":"df.info()","47af4fb9":"#Check for null values\n100*(df.isnull() | df.isna()).sum() \/ len(df)","c44dfab2":"# Drop unnecessary columns\ndf.drop(['url','phone','location','dish_liked'],axis=1,inplace=True)","3cf85c45":"# Unique values in rate column\ndf.rate.unique()","d1570680":"#Remove null values from Rate Column\ndf.rate = df.rate.replace(('NEW','-'),np.nan)\ndf.rate = df.rate.astype('str')\ndf.rate = df.rate.apply(lambda x:x.replace('\/5','').strip())\ndf.rate = df.rate.astype('float')\ndf.dropna(subset = ['rate'], inplace = True)","a354ef72":"df['price']=df['approx_cost(for two people)']\ndf.drop(['approx_cost(for two people)'], axis=1)\n\n","45b1282e":"df.price.unique()\ndf.head()\ndf.drop(['approx_cost(for two people)'], axis=1, inplace = True)\n","dc254226":"# Conversion of price column\ndf.price = df.price.astype('str')\ndf.price = df.price.apply(lambda x:x.replace(',','').strip())\ndf.price = df.price.astype('float')\ndf.dropna(subset = ['price'], inplace = True)\n\n","9780f1a7":"df.shape","5d86bad7":"plt.rc('font', size=15)\ndf.rate.hist(bins=[0,3,3.5,4,4.5,5])\n\nplt.title('Rating Distribution\\n')\nplt.xlabel('Rating')\nplt.ylabel('Count');","d3f0b8ea":"\nsns.set_context('poster')\nplt.figure(figsize=(20,15))\nhotel = df['name'].value_counts()[:10]\nrating = df.rate[:10]\nsns.barplot(x = hotel, y = hotel.index, palette='deep')\nplt.title(\"Most Rated Hotel\")\nplt.xlabel(\"# of times Rated\")\nplt.ylabel(\"Hotel\")\nplt.show()","45fe4afa":"sns.set_context('notebook')\nplt.figure(figsize=(30,20))\nplt.xticks(fontsize = 20)\nax = df.groupby('rest_type')['name'].count().plot.bar()\nax.set_title(\"Restaurant type count\")\nax.set_xlabel(\"Restaurant Name\")\nax.set_ylabel(\"# of restaurant\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x()-0.3, p.get_height()+100))\n","89d2f403":"most_text = df.sort_values('votes', ascending = False).head(100).set_index('name')\nplt.figure(figsize=(25,15))\nsns.set_context('poster')\nax = sns.barplot(most_text['votes'], most_text.index, palette='magma')\nfor i in ax.patches:\n    ax.text(i.get_width()+2, i.get_y()+0.8,str(round(i.get_width())), fontsize=16,color='black')\nplt.show()\n","3dcc0e63":"sns.set_context('talk')\nmost_books = df.groupby('listed_in(city)')['name'].count().reset_index().sort_values('name', ascending=False).head(10).set_index('listed_in(city)')\nplt.figure(figsize=(15,10))\nax = sns.barplot(most_books['name'],most_books.index,palette = 'deep')\nax.set_title(\"Most Restaurant in City\")\nax.set_xlabel(\"# of Restaurant\")\nfor i in ax.patches:\n    ax.text(i.get_width()+.3, i.get_y()+0.5, str(round(i.get_width())), fontsize = 10, color = 'k')\n\n    ","81c43c1a":"cheap_rest = df[(df['rate']>=3) & ((40 <= df['price']) & (df['price'] < 200))].sort_values('price', ascending = True).head(30).set_index('name')\n\nplt.figure(figsize = (15,10))\nax= sns.barplot(x = cheap_rest['price'], y = cheap_rest.index, palette = 'rocket')\nax.set_title(\"Cheapest Restaurant\")\nax.set_xlabel(\"Price for 2 people\")\nax.set_ylabel(\"Restaurant name\")\n\nfor i in ax.patches:\n    ax.text(i.get_width()+.3, i.get_y()+0.5, str(round(i.get_width())), fontsize = 10, color = 'k')\n\n","64e327eb":"### Data Cleaning","c9315fd4":"### Rating Distribution","4b3333ea":"### Most Rated Restaurant\n","a678686a":"### Highest # of Votes\n","61ac2691":"### Cheapest Restaurant with rating above 3","4a1c4cfb":"### Most Restaurant in City","109477f0":"### Restaurant type count"}}