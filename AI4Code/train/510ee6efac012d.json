{"cell_type":{"892e37c3":"code","90c20cc4":"code","8d05b216":"code","7b5f965d":"code","0dd45e2b":"code","32bcc668":"code","bf491852":"code","6c876801":"code","17233c6d":"code","9eded11b":"code","2071929f":"code","78c1ad64":"code","6169338b":"code","39f17a90":"code","c659d4cf":"code","4cbd4dad":"code","009a2e65":"markdown"},"source":{"892e37c3":"from IPython.core.display import display, HTML\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport gc\n\nfrom joblib import Parallel, delayed\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import r2_score\nfrom sklearn.cluster import KMeans\nfrom hyperopt import hp, fmin, tpe, Trials\nfrom hyperopt.pyll.base import scope\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy.matlib\n\n\npath_submissions = '\/'\n\ntarget_name = 'target'\nscores_folds = {}","90c20cc4":"training = True\nopt= False","8d05b216":"# data directory\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'\n\n# Function to calculate first WAP\ndef calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n# Function to calculate second WAP\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\ndef calc_wap3(df):\n    wap = (df['bid_price1'] * df['bid_size1'] + df['ask_price1'] * df['ask_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\ndef calc_wap4(df):\n    wap = (df['bid_price2'] * df['bid_size2'] + df['ask_price2'] * df['ask_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\ndef encode_mean(column, df):\n    avg = df.groupby('time_id')[column].transform('mean')\n    return np.abs(df[column].sub(avg).div(avg))\n    \n# Function to calculate the log of the return\n# Remember that logb(x \/ y) = logb(x) - logb(y)\ndef log_return(series):\n    return np.log(series).diff()\n\n# Calculate the realized volatility\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\n# Function to count unique elements of a series\ndef count_unique(series):\n    return len(np.unique(series))\n\n# Function to read our base train and test set\ndef read_train_test():\n    train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    # Create a key to merge with book and trade data\n    train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    print(f'Our training set has {train.shape[0]} rows')\n    return train, test\n\n# Function to preprocess book data (for each stock id)\ndef book_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    # Calculate Wap\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    df['wap3'] = calc_wap3(df)\n    df['wap4'] = calc_wap4(df)\n    # Calculate log returns\n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    df['log_return3'] = df.groupby(['time_id'])['wap3'].apply(log_return)\n    df['log_return4'] = df.groupby(['time_id'])['wap4'].apply(log_return)\n    # Calculate wap balance\n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    # Calculate spread\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['price_spread2'] = (df['ask_price2'] - df['bid_price2']) \/ ((df['ask_price2'] + df['bid_price2']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df[\"bid_ask_spread\"] = abs(df['bid_spread'] - df['ask_spread'])\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'wap1': [np.sum, np.std],\n        'wap2': [np.sum, np.std],\n        'wap3': [np.sum, np.std],\n        'wap4': [np.sum, np.std],\n        'log_return1': [realized_volatility],\n        'log_return2': [realized_volatility],\n        'log_return3': [realized_volatility],\n        'log_return4': [realized_volatility],\n        'wap_balance': [np.sum, np.max],\n        'price_spread':[np.sum, np.max],\n        'price_spread2':[np.sum, np.max],\n        'bid_spread':[np.sum, np.max],\n        'ask_spread':[np.sum, np.max],\n        'total_volume':[np.sum, np.max],\n        'volume_imbalance':[np.sum, np.max],\n        \"bid_ask_spread\":[np.sum,  np.max],\n    }\n    create_feature_dict_time = {\n        'log_return1': [realized_volatility],\n        'log_return2': [realized_volatility],\n        'log_return3': [realized_volatility],\n        'log_return4': [realized_volatility],\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n\n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id__100'], axis = 1, inplace = True)\n    \n    \n    # Create row_id so we can merge\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to preprocess trade data (for each stock id)\ndef trade_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    df['amount']=df['price']*df['size']\n    # Dict for aggregations\n    create_feature_dict = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum, np.max, np.min],\n        'order_count':[np.sum,np.max],\n        'amount':[np.sum,np.max,np.min],\n    }\n    create_feature_dict_time = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.sum],\n    }\n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n\n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n    \n    def tendency(price, vol):    \n        df_diff = np.diff(price)\n        val = (df_diff\/price[1:])*100\n        power = np.sum(val*vol[1:])\n        return(power)\n    \n    lis = []\n    for n_time_id in df['time_id'].unique():\n        df_id = df[df['time_id'] == n_time_id]        \n        tendencyV = tendency(df_id['price'].values, df_id['size'].values)      \n        f_max = np.sum(df_id['price'].values > np.mean(df_id['price'].values))\n        f_min = np.sum(df_id['price'].values < np.mean(df_id['price'].values))\n        df_max =  np.sum(np.diff(df_id['price'].values) > 0)\n        df_min =  np.sum(np.diff(df_id['price'].values) < 0)\n        # new\n        abs_diff = np.median(np.abs( df_id['price'].values - np.mean(df_id['price'].values)))        \n        energy = np.mean(df_id['price'].values**2)\n        iqr_p = np.percentile(df_id['price'].values,75) - np.percentile(df_id['price'].values,25)\n        \n        # vol vars\n        \n        abs_diff_v = np.median(np.abs( df_id['size'].values - np.mean(df_id['size'].values)))        \n        energy_v = np.sum(df_id['size'].values**2)\n        iqr_p_v = np.percentile(df_id['size'].values,75) - np.percentile(df_id['size'].values,25)\n        \n        lis.append({'time_id':n_time_id,'tendency':tendencyV,'f_max':f_max,'f_min':f_min,'df_max':df_max,'df_min':df_min,\n                   'abs_diff':abs_diff,'energy':energy,'iqr_p':iqr_p,'abs_diff_v':abs_diff_v,'energy_v':energy_v,'iqr_p_v':iqr_p_v})\n    \n    df_lr = pd.DataFrame(lis)\n        \n   \n    df_feature = df_feature.merge(df_lr, how = 'left', left_on = 'time_id_', right_on = 'time_id')\n    \n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id','time_id__100'], axis = 1, inplace = True)\n    \n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to get group stats for the stock_id and time_id\ndef get_time_stock(df):\n    vol_cols = ['log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_400', 'log_return2_realized_volatility_400', \n                'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', 'log_return1_realized_volatility_200', 'log_return2_realized_volatility_200', \n                'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_400', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_200']\n\n\n    # Group by the stock id\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    # Group by the stock id\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    # Merge with original dataframe\n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n# Funtion to make preprocessing function in parallel (for each stock id)\ndef preprocessor(list_stock_ids, is_train = True):\n    \n    # Parrallel for loop\n    def for_joblib(stock_id):\n        # Train\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        # Test\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        # Preprocess book and trade data and merge them\n        df_tmp = pd.merge(book_preprocessor(file_path_book), trade_preprocessor(file_path_trade), on = 'row_id', how = 'left')\n        \n        # Return the merge dataframe\n        return df_tmp\n    \n    # Use parallel api to call paralle for loop\n    df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    # Concatenate all the dataframes that return from Parallel\n    df = pd.concat(df, ignore_index = True)\n    return df\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False","7b5f965d":"if training:\n    train, test = read_train_test()\n\n    # Get unique stock ids \n    train_stock_ids = train['stock_id'].unique()\n    # Preprocess them using Parallel and our single stock id functions\n    train_ = preprocessor(train_stock_ids, is_train = True)\n    train = train.merge(train_, on = ['row_id'], how = 'left')\n\n    # Get unique stock ids \n    test_stock_ids = test['stock_id'].unique()\n    # Preprocess them using Parallel and our single stock id functions\n    test_ = preprocessor(test_stock_ids, is_train = False)\n    test = test.merge(test_, on = ['row_id'], how = 'left')\n    \n    columns_to_encode = ['wap1_sum', 'wap2_sum', 'wap3_sum', 'wap4_sum', 'log_return1_realized_volatility', 'log_return2_realized_volatility',\n                         'log_return3_realized_volatility', 'log_return4_realized_volatility', 'wap_balance_sum', 'price_spread_sum',\n                         'price_spread2_sum', 'bid_spread_sum', 'ask_spread_sum', 'total_volume_sum', \n                         'volume_imbalance_sum',  'bid_ask_spread_sum', 'trade_log_return_realized_volatility',\n                         'trade_seconds_in_bucket_count_unique', 'trade_size_sum', 'trade_order_count_sum',\n                         'trade_amount_sum', 'trade_tendency', 'trade_f_max','trade_df_max', 'trade_abs_diff',\n                         'trade_energy', 'trade_iqr_p', 'trade_abs_diff_v', 'trade_energy_v', 'trade_iqr_p_v']\n    \n    df_aux = Parallel(n_jobs = -1, verbose = 1)(delayed(encode_mean)(column, train) for column in columns_to_encode)\n    # Get group stats of time_id and stock_id\n    train = pd.concat([train]+[x.rename(x.name + '_timeid_encoded') for x in df_aux], axis=1)\n    del(df_aux)\n    \n    df_aux = Parallel(n_jobs = -1, verbose = 1)(delayed(encode_mean)(column, test) for column in columns_to_encode)\n    # Get group stats of time_id and stock_id\n    test = pd.concat([test]+[x.rename(x.name + '_timeid_encoded') for x in df_aux], axis=1)\n    del(df_aux)\n    \n    train = get_time_stock(train)\n    test = get_time_stock(test)\n    train['size_tau'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique'] )\n    test['size_tau'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique'] )\n    train['size_tau_400'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_400'] )\n    test['size_tau_400'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_400'] )\n    train['size_tau_300'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_300'] )\n    test['size_tau_300'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_300'] )\n    train['size_tau_200'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_200'] )\n    test['size_tau_200'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_200'] )\n    train['size_tau2'] = np.sqrt( 1\/ train['trade_order_count_sum'] )\n    test['size_tau2'] = np.sqrt( 1\/ test['trade_order_count_sum'] )\n    train['size_tau2_400'] = np.sqrt( 0.33\/ train['trade_order_count_sum'] )\n    test['size_tau2_400'] = np.sqrt( 0.33\/ test['trade_order_count_sum'] )\n    train['size_tau2_300'] = np.sqrt( 0.5\/ train['trade_order_count_sum'] )\n    test['size_tau2_300'] = np.sqrt( 0.5\/ test['trade_order_count_sum'] )\n    train['size_tau2_200'] = np.sqrt( 0.66\/ train['trade_order_count_sum'] )\n    test['size_tau2_200'] = np.sqrt( 0.66\/ test['trade_order_count_sum'] )\n    train['size_tau2_d'] = train['size_tau2_400'] - train['size_tau2']\n    test['size_tau2_d'] = test['size_tau2_400'] - test['size_tau2']\n\n    \n    # making agg features\n\n    train_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\n    train_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\n    corr = train_p.corr(method='kendall')\n\n    ids = corr.index\n\n    kmeans = KMeans(n_clusters=5, random_state=0).fit(corr.values)\n    print(kmeans.labels_) \n\n    l = []\n    for n in range(5):\n        l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n\n    \n\n    mat = []\n    matTest = []\n\n    n = 0\n    for ind in l:\n        print(ind)\n        newDf = train.loc[train['stock_id'].isin(ind) ]\n        newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n        newDf.loc[:,'stock_id'] = str(n)+'c1'\n        mat.append ( newDf )\n\n        newDf = test.loc[test['stock_id'].isin(ind) ]    \n        newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n        newDf.loc[:,'stock_id'] = str(n)+'c1'\n        matTest.append ( newDf )\n\n        n+=1\n\n    mat1 = pd.concat(mat).reset_index()\n    mat1.drop(columns=['target'],inplace=True)\n    mat2 = pd.concat(matTest).reset_index()\n    mat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\n    mat1 = mat1.pivot(index='time_id', columns='stock_id')\n    mat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\n    mat1.reset_index(inplace=True)\n    mat2 = mat2.pivot(index='time_id', columns='stock_id')\n    mat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\n    mat2.reset_index(inplace=True)\n    nnn = ['time_id',\n         'log_return1_realized_volatility_0c1',\n         'log_return1_realized_volatility_1c1',     \n         'log_return1_realized_volatility_3c1',\n         'log_return1_realized_volatility_4c1',     \n         'log_return1_realized_volatility_2c1',\n         'total_volume_sum_0c1',\n         'total_volume_sum_1c1', \n         'total_volume_sum_3c1',\n         'total_volume_sum_4c1', \n         'total_volume_sum_2c1',\n         'trade_size_sum_0c1',\n         'trade_size_sum_1c1', \n         'trade_size_sum_3c1',\n         'trade_size_sum_4c1', \n         'trade_size_sum_2c1',\n         'trade_order_count_sum_0c1',\n         'trade_order_count_sum_1c1',\n         'trade_order_count_sum_3c1',\n         'trade_order_count_sum_4c1',\n         'trade_order_count_sum_2c1',      \n         'price_spread_sum_0c1',\n         'price_spread_sum_1c1',\n         'price_spread_sum_3c1',\n         'price_spread_sum_4c1',\n         'price_spread_sum_2c1',   \n         'bid_spread_sum_0c1',\n         'bid_spread_sum_1c1',\n         'bid_spread_sum_3c1',\n         'bid_spread_sum_4c1',\n         'bid_spread_sum_2c1',       \n         'ask_spread_sum_0c1',\n         'ask_spread_sum_1c1',\n         'ask_spread_sum_3c1',\n         'ask_spread_sum_4c1',\n         'ask_spread_sum_2c1',   \n         'volume_imbalance_sum_0c1',\n         'volume_imbalance_sum_1c1',\n         'volume_imbalance_sum_3c1',\n         'volume_imbalance_sum_4c1',\n         'volume_imbalance_sum_2c1',       \n         'bid_ask_spread_sum_0c1',\n         'bid_ask_spread_sum_1c1',\n         'bid_ask_spread_sum_3c1',\n         'bid_ask_spread_sum_4c1',\n         'bid_ask_spread_sum_2c1',\n         'size_tau2_0c1',\n         'size_tau2_1c1',\n         'size_tau2_3c1',\n         'size_tau2_4c1',\n         'size_tau2_2c1'] \n    train = pd.merge(train,mat1[nnn],how='left',on='time_id')\n    test = pd.merge(test,mat2[nnn],how='left',on='time_id')","0dd45e2b":"drop_columns = ['wap1_sum',\n 'wap2_sum',\n 'wap3_sum',\n 'wap4_sum',\n 'bid_spread_sum',\n 'ask_spread_sum',\n 'ask_spread_amax',\n 'total_volume_sum',\n 'total_volume_amax',\n 'volume_imbalance_sum',\n 'volume_imbalance_amax',\n 'bid_ask_spread_sum',\n 'trade_seconds_in_bucket_count_unique',\n 'trade_size_sum',\n 'trade_size_amax',\n 'trade_size_amin',\n 'trade_order_count_sum',\n 'trade_order_count_amax',\n 'trade_amount_sum',\n 'trade_amount_amax',\n 'trade_amount_amin',\n 'trade_tendency',\n 'trade_f_max',\n 'trade_f_min',\n 'trade_df_max',\n 'trade_df_min',\n 'trade_abs_diff',\n 'trade_energy',\n 'trade_iqr_p',\n 'trade_abs_diff_v',\n 'trade_energy_v',\n 'trade_iqr_p_v',\n 'trade_seconds_in_bucket_count_unique_500',\n 'trade_size_sum_500',\n 'trade_order_count_sum_500',\n 'trade_seconds_in_bucket_count_unique_400',\n 'trade_size_sum_400',\n 'trade_order_count_sum_400',\n 'trade_seconds_in_bucket_count_unique_300',\n 'trade_size_sum_300',\n 'trade_order_count_sum_300',\n 'trade_seconds_in_bucket_count_unique_200',\n 'trade_size_sum_200',\n 'trade_order_count_sum_200',\n 'trade_seconds_in_bucket_count_unique_100',\n 'trade_size_sum_100',\n 'trade_order_count_sum_100',\n 'wap1_sum_timeid_encoded',\n 'wap2_sum_timeid_encoded',\n 'wap3_sum_timeid_encoded',\n 'wap4_sum_timeid_encoded',\n 'log_return1_realized_volatility_timeid_encoded',\n 'log_return2_realized_volatility_timeid_encoded',\n 'log_return3_realized_volatility_timeid_encoded',\n 'log_return4_realized_volatility_timeid_encoded',\n 'wap_balance_sum_timeid_encoded',\n 'price_spread_sum_timeid_encoded',\n 'price_spread2_sum_timeid_encoded',\n 'bid_spread_sum_timeid_encoded',\n 'ask_spread_sum_timeid_encoded',\n 'total_volume_sum_timeid_encoded',\n 'volume_imbalance_sum_timeid_encoded',\n 'bid_ask_spread_sum_timeid_encoded',\n 'trade_log_return_realized_volatility_timeid_encoded',\n 'trade_seconds_in_bucket_count_unique_timeid_encoded',\n 'trade_size_sum_timeid_encoded',\n 'trade_order_count_sum_timeid_encoded',\n 'trade_amount_sum_timeid_encoded',\n 'trade_tendency_timeid_encoded',\n 'trade_f_max_timeid_encoded',\n 'trade_df_max_timeid_encoded',\n 'trade_abs_diff_timeid_encoded',\n 'trade_energy_timeid_encoded',\n 'trade_iqr_p_timeid_encoded',\n 'trade_abs_diff_v_timeid_encoded',\n 'trade_energy_v_timeid_encoded',\n 'trade_iqr_p_v_timeid_encoded',\n 'size_tau',\n 'size_tau_400',\n 'size_tau_300',\n 'size_tau_200',\n 'size_tau2',\n 'size_tau2_400',\n 'size_tau2_300',\n 'size_tau2_200',\n 'size_tau2_d']","32bcc668":"drop_columns =['wap1_sum',\n 'wap2_sum',\n 'wap2_std',\n 'wap3_sum',\n 'wap4_sum',\n 'bid_spread_sum',\n 'ask_spread_sum',\n 'ask_spread_amax',\n 'total_volume_sum',\n 'total_volume_amax',\n 'volume_imbalance_sum',\n 'volume_imbalance_amax',\n 'bid_ask_spread_sum',\n 'trade_seconds_in_bucket_count_unique',\n 'trade_size_sum',\n 'trade_size_amax',\n 'trade_size_amin',\n 'trade_order_count_sum',\n 'trade_order_count_amax',\n 'trade_amount_sum',\n 'trade_amount_amax',\n 'trade_amount_amin',\n 'trade_tendency',\n 'trade_f_max',\n 'trade_f_min',\n 'trade_df_max',\n 'trade_df_min',\n 'trade_abs_diff',\n 'trade_energy',\n 'trade_iqr_p',\n 'trade_abs_diff_v',\n 'trade_energy_v',\n 'trade_iqr_p_v',\n 'trade_seconds_in_bucket_count_unique_500',\n 'trade_size_sum_500',\n 'trade_order_count_sum_500',\n 'trade_seconds_in_bucket_count_unique_400',\n 'trade_size_sum_400',\n 'trade_order_count_sum_400',\n 'trade_seconds_in_bucket_count_unique_300',\n 'trade_size_sum_300',\n 'trade_order_count_sum_300',\n 'trade_seconds_in_bucket_count_unique_200',\n 'trade_size_sum_200',\n 'trade_order_count_sum_200',\n 'trade_seconds_in_bucket_count_unique_100',\n 'trade_size_sum_100',\n 'trade_order_count_sum_100',\n 'wap1_sum_timeid_encoded',\n 'wap2_sum_timeid_encoded',\n 'wap3_sum_timeid_encoded',\n 'wap4_sum_timeid_encoded',\n 'log_return1_realized_volatility_timeid_encoded',\n 'log_return2_realized_volatility_timeid_encoded',\n 'log_return3_realized_volatility_timeid_encoded',\n 'log_return4_realized_volatility_timeid_encoded',\n 'wap_balance_sum_timeid_encoded',\n 'price_spread_sum_timeid_encoded',\n 'price_spread2_sum_timeid_encoded',\n 'bid_spread_sum_timeid_encoded',\n 'ask_spread_sum_timeid_encoded',\n 'total_volume_sum_timeid_encoded',\n 'volume_imbalance_sum_timeid_encoded',\n 'bid_ask_spread_sum_timeid_encoded',\n 'trade_log_return_realized_volatility_timeid_encoded',\n 'trade_seconds_in_bucket_count_unique_timeid_encoded',\n 'trade_size_sum_timeid_encoded',\n 'trade_order_count_sum_timeid_encoded',\n 'trade_amount_sum_timeid_encoded',\n 'trade_tendency_timeid_encoded',\n 'trade_f_max_timeid_encoded',\n 'trade_df_max_timeid_encoded',\n 'trade_abs_diff_timeid_encoded',\n 'trade_energy_timeid_encoded',\n 'trade_iqr_p_timeid_encoded',\n 'trade_abs_diff_v_timeid_encoded',\n 'trade_energy_v_timeid_encoded',\n 'trade_iqr_p_v_timeid_encoded',\n 'trade_log_return_realized_volatility_400_min_stock',\n 'size_tau',\n 'size_tau_400',\n 'size_tau_300',\n 'size_tau_200',\n 'size_tau2',\n 'size_tau2_400',\n 'size_tau2_300',\n 'size_tau2_200',\n 'size_tau2_d',\n 'total_volume_sum_0c1',\n 'total_volume_sum_1c1',\n 'total_volume_sum_3c1',\n 'total_volume_sum_4c1',\n 'total_volume_sum_6c1',\n 'trade_size_sum_0c1',\n 'trade_size_sum_1c1',\n 'trade_order_count_sum_0c1',\n 'trade_order_count_sum_1c1',\n 'volume_imbalance_sum_0c1',\n 'volume_imbalance_sum_1c1',\n 'volume_imbalance_sum_3c1',\n 'volume_imbalance_sum_4c1',\n 'volume_imbalance_sum_6c1',\n 'size_tau2_0c1',\n 'size_tau2_1c1',\n 'size_tau2_4c1',\n 'size_tau2_6c1']","bf491852":"train.drop(drop_columns, axis=1, inplace=True, errors='ignore')\ntest.drop(drop_columns, axis=1, inplace=True, errors='ignore')","6c876801":"colNames = [col for col in list(train.columns)\n            if col not in {\"stock_id\", \"time_id\", \"target\", \"row_id\"}]","17233c6d":"from sklearn.model_selection import KFold\n\n\nX = train.drop(['row_id', 'target', 'time_id'], axis = 1)\ny = train['target']\n\nif training:\n    X_test=test.copy()\n    X_test.drop(['time_id','row_id'], axis=1,inplace=True)\n\n\nseed0=2021\n# params0 = {\n#     'objective': 'rmse',\n#     'boosting_type': 'gbdt',\n#     'max_depth': -1,\n#     'max_bin':100,\n#     'min_data_in_leaf':500,\n#     'learning_rate': 0.05,\n#     'subsample': 0.72,\n#     'subsample_freq': 4,\n#     'feature_fraction': 0.5,\n#     'lambda_l1': 0.5,\n#     'lambda_l2': 1.0,\n#     'categorical_column':[0],\n#     'seed':seed0,\n#     'feature_fraction_seed': seed0,\n#     'bagging_seed': seed0,\n#     'drop_seed': seed0,\n#     'data_random_seed': seed0,\n#     'n_jobs':-1,\n#     'verbose': -1}\n# seed1=42\n# params1 = {\n#         'learning_rate': 0.1,        \n#         'lambda_l1': 2,\n#         'lambda_l2': 7,\n#         'num_leaves': 800,\n#         'min_sum_hessian_in_leaf': 20,\n#         'feature_fraction': 0.8,\n#         'feature_fraction_bynode': 0.8,\n#         'bagging_fraction': 0.9,\n#         'bagging_freq': 42,\n#         'min_data_in_leaf': 700,\n#         'max_depth': 4,\n#         'categorical_column':[0],\n#         'seed': seed1,\n#         'feature_fraction_seed': seed1,\n#         'bagging_seed': seed1,\n#         'drop_seed': seed1,\n#         'data_random_seed': seed1,\n#         'objective': 'rmse',\n#         'boosting': 'gbdt',\n#         'verbosity': -1,\n#         'n_jobs':-1,\n#     }\n\n\nparams = {'feature_fraction': 0.5031513938037354,\n          'lambda_l1': 6.342730329515877, \n          'lambda_l2': 0.2008158055008158, \n          'learning_rate': 0.09837361881954568, \n          'max_bin': 100, \n          'max_depth': 4, \n          'min_data_in_leaf': 400, \n          'subsample': 0.8,\n          'num_leaves': 20,\n          'subsample_freq': 1,\n         'verbose':-1}","9eded11b":"for col in X.columns:\n    scaler = StandardScaler()\n    X[col] = scaler.fit_transform(X[col].values.reshape(-1, 1))\n    X_test[col] = scaler.transform(X_test[col].values.reshape(-1, 1))","2071929f":"l","78c1ad64":"# Function to early stop with root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\ndef train_and_optimize_lgb(p):\n    # Hyperparammeters (just basic)\n    print(p)\n    params = {\n        'objective': 'rmse',\n        'boosting_type': 'gbdt',\n        'max_depth': p['max_depth'],\n        'max_bin':p['max_bin'],\n        'min_data_in_leaf': p['min_data_in_leaf'],\n        'learning_rate': p['learning_rate'],\n        'subsample': p['subsample'],\n        'subsample_freq': p['subsample_freq'],\n        'feature_fraction': p['feature_fraction'],\n        'lambda_l1': p['lambda_l1'],\n        'lambda_l2': p['lambda_l2'],\n        'categorical_column':[0],\n        'seed':seed0,\n        'feature_fraction_seed': seed0,\n        'bagging_seed': seed0,\n        'drop_seed': seed0,\n        'data_random_seed': seed0,\n        'n_jobs':-1,\n        'verbose': -1}\n    features = [col for col in X.columns if col not in {\"time_id\", \"target\", \"row_id\", \"stock_id\"}]\n    stock_id = X.stock_id.unique()\n    # Create out of folds array\n    oof_predictions = np.zeros(X.shape[0])\n    time_ids_split = np.array_split(train.time_id.unique(),5)\n    #kfold = KFold(n_splits = , random_state = 2021, shuffle = True)\n    # Iterate through each fold\n    \n    for i in enumerate(time_ids_split):\n        fold = i[0]\n        print(f'Training fold {fold + 1}')\n        \n        trn_ind = ~train.time_id.isin(i[1])\n        val_ind = train.time_id.isin(i[1])\n        features = [col for col in X.columns if col not in {\"time_id\", \"target\", \"row_id\", \"stock_id\"}]\n        x_train, x_val = train.loc[trn_ind], train.loc[val_ind]\n        y_train, y_val = y.loc[trn_ind], y.loc[val_ind]\n                \n        # Root mean squared percentage error weights\n        train_weights = 1 \/ np.square(y_train)\n        val_weights = 1 \/ np.square(y_val)\n        train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n        val_dataset = lgb.Dataset(x_val[features], y_val, weight = val_weights)\n        \n        model = lgb.train(params = params,\n                          num_boost_round=1200,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 300,\n                          early_stopping_rounds=50,\n                          feval = feval_rmspe)\n        \n        # Add predictions to the out of folds array\n        oof_predictions[val_ind] = model.predict(x_val[features])\n        print(rmspe(y, oof_predictions))\n    return rmspe(y, oof_predictions)\n\n\ndef train_and_evaluate_lgb(train, test, params):\n\n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\", \"stock_id\"}]\n    stock_id = train.stock_id.unique()\n    time_ids_split = np.split(train.time_id.unique(),5)\n    \n    oof_predictions = np.zeros(train.shape[0])\n    test_predictions = np.zeros(test.shape[0])\n    j=1\n    \n    for i in l:\n        print(f'{i} stock')\n        X_test_stock = test[test.stock_id.isin(i)]\n        X_stock = train[train.stock_id.isin(i)]\n        stock_predictions = np.zeros(X_stock.shape[0])\n        for j in enumerate(time_ids_split):\n            trn_ind = ~X_stock.time_id.isin(j[1])\n            val_ind = X_stock.time_id.isin(j[1])\n            \n            x_train, x_val = X_stock.loc[trn_ind, features], X_stock.loc[val_ind, features]\n            y_train, y_val = X_stock.loc[trn_ind, 'target'], X_stock.loc[val_ind, 'target']\n            \n            # Root mean squared percentage error weights\n            train_weights = 1 \/ np.square(y_train)\n            val_weights = 1 \/ np.square(y_val)\n            train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n            val_dataset = lgb.Dataset(x_val[features], y_val, weight = val_weights)\n\n            model = lgb.train(params = params,\n                              num_boost_round=1200,\n                              train_set = train_dataset, \n                              valid_sets = [train_dataset, val_dataset], \n                              verbose_eval = 250,\n                              early_stopping_rounds=50,\n                              feval = feval_rmspe)\n\n            # Add predictions to the out of folds array\n            rmspe_fold = rmspe(y_val, model.predict(x_val[features]))\n            print(f'For fold {j[0]}, stock{i}: {rmspe_fold}')\n            if X_test_stock.empty:\n                pass\n            else:\n                test_predictions[test.stock_id.isin(i)] += model.predict(X_test_stock[features])\/len(time_ids_split)\n        \n        \n    \n    return test_predictions","6169338b":"a = [[1,2,3,4],[4,5,6,7,]]","39f17a90":"if opt:\n    param_space = {\n        'max_depth': scope.int(hp.uniform('max_depth', 4, 20)),\n        'max_bin': scope.int(hp.uniform('max_bin', 40, 400)),\n        'min_data_in_leaf': scope.int(hp.uniform('min_data_in_leaf', 100, 2000)),\n        'learning_rate': hp.uniform('learning_rate',0.01,0.1),\n        'subsample': hp.uniform('subsample', 0.3, 0.9),\n        'subsample_freq': scope.int(hp.uniform('subsample_freq',1,30)),\n        'feature_fraction': hp.uniform('feature_fraction',0.5, 0.9),\n        'lambda_l1': hp.uniform('lambda_l1',0.1,10),\n        'lambda_l2': hp.uniform('lambda_l2',0.1,10)\n    }\n    \n    trials = Trials()\n\n    hopt = fmin(fn = train_and_optimize_lgb, \n                space = param_space, \n                algo = tpe.suggest, \n                max_evals = 100, \n                trials = trials\n               )\n    print(hopt)","c659d4cf":"predictions_lgb= train_and_evaluate_lgb(train, test,params)","4cbd4dad":"target_name='target'\ntest[\"row_id\"] = test[\"stock_id\"].astype(str) + \"-\" + test[\"time_id\"].astype(str) \ntest[target_name] = predictions_lgb\n\n\ndisplay(test[['row_id', target_name]].head(3))\ntest[['row_id', target_name]].to_csv('submission.csv',index = False)","009a2e65":"## Stacked LGBM\n* KFold split scheme using time_id\n* hyperOPT example (however it's not running on this notebook )\n* Using different models for different clusters"}}