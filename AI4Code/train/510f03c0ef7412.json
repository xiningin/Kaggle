{"cell_type":{"41c92c90":"code","b94ee7d3":"code","4b6db597":"code","4d24f4da":"code","3d18977b":"code","c2e83558":"code","f6e3b51a":"code","f358c6fb":"code","9da173e0":"code","b6a49ae9":"code","c3201c84":"code","b70bad59":"code","9b444660":"code","fead1438":"code","662e0916":"code","ae8e804c":"code","836f8ac0":"code","1801323f":"code","fc88cb9f":"code","600c0d67":"code","779bf493":"code","1b399ab0":"code","9a934dd9":"code","6289d3cc":"code","6a1ec47b":"code","d53d5721":"code","7c5b9c75":"code","70ab263e":"code","4f61bfaa":"code","e6707802":"code","1822383d":"code","6f542f8d":"code","6480b2e4":"code","a470d5e5":"code","d1748c81":"code","fd068eb4":"code","f504d02c":"code","adf3fe54":"code","a318c235":"code","7ea560fa":"code","93ca8fa6":"code","40c60d3e":"code","7575f301":"code","2a298eb1":"code","0cc17a00":"markdown","9649cc09":"markdown","1893698e":"markdown","078171a4":"markdown","0bac7a75":"markdown","b324e0a6":"markdown","95e8728f":"markdown","be103427":"markdown","d0d3b934":"markdown","9d7274dd":"markdown"},"source":{"41c92c90":"import numpy as np \nimport pandas as pd \nfrom fbprophet import Prophet\n\n\nimport seaborn as sns\nimport datetime\n\n\nimport os\nimport pylab as pl\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 12, 8\nimport matplotlib.pyplot as pl\nimport seaborn as sns\ndata = pd.read_csv('..\/input\/avocado.csv')\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\nfrom plotly import tools\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"numpy.dtype size changed\")\n\n\n\n\n\n\n%matplotlib inline","b94ee7d3":"df = pd.read_csv(\"..\/input\/avocado.csv\")","4b6db597":"df.head()","4d24f4da":"df.groupby('type').groups","3d18977b":"PREDICTION_TYPE = 'conventional'\ndf = df[df.type == PREDICTION_TYPE]","c2e83558":"df['Date'] = pd.to_datetime(df['Date'])","f6e3b51a":"regions = df.groupby(df.region)\nprint(\"Total regions :\", len(regions))\nprint(\"-------------\")\nfor name, group in regions:\n    print(name, \" : \", len(group))","f358c6fb":"PREDICTING_FOR = \"TotalUS\"","9da173e0":"date_price = regions.get_group(PREDICTING_FOR)[['Date', 'AveragePrice']].reset_index(drop=True)","b6a49ae9":"date_price.plot(x='Date', y='AveragePrice', kind=\"line\")","c3201c84":"y = df['AveragePrice']\nX = df.drop(['Date', 'AveragePrice', 'Total Bags','Small Bags', 'Large Bags', 'XLarge Bags', 'type', 'year','region',], axis=1)","b70bad59":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train,y_train)","9b444660":"linearpredictions = lm.predict( X_test)\nprint(linearpredictions)","fead1438":"from sklearn import metrics\n\nprint('Score:', metrics.mean_absolute_error(y_test, linearpredictions))","662e0916":"plt.scatter(y_test,linearpredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","ae8e804c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn.linear_model import RidgeCV\nridge = RidgeCV(cv=5)\nridge.fit(X_train,y_train)","836f8ac0":"ridgepredictions = ridge.predict( X_test)\nprint(ridgepredictions)","1801323f":"from sklearn import metrics\n\nprint('Score:', metrics.mean_absolute_error(y_test, ridgepredictions))","fc88cb9f":"plt.scatter(y_test,ridgepredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","600c0d67":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn.ensemble import BaggingRegressor\nbagg = BaggingRegressor(n_estimators=10, random_state=0)\nbagg.fit(X_train,y_train)","779bf493":"baggpredictions = bagg.predict(X_test)\nprint(baggpredictions)","1b399ab0":"from sklearn import metrics\n\nprint('Score:', metrics.mean_absolute_error(y_test, baggpredictions))","9a934dd9":"plt.scatter(y_test,baggpredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","6289d3cc":"date_price = date_price.rename(columns={'Date':'ds', 'AveragePrice':'y'})","6a1ec47b":"m = Prophet()\nm.fit(date_price)","d53d5721":"future = m.make_future_dataframe(periods=1095)\nforecast = m.predict(future)","7c5b9c75":"forecast.tail()","70ab263e":"fig2 = m.plot_components(forecast)","4f61bfaa":"mask = data['type']=='organic'\ng = sns.factorplot('AveragePrice','region',data=data[mask],\n                   hue='year',\n                   size=13,\n                   aspect=0.8,\n                   palette='magma',\n                   join=False,\n              )","e6707802":"type_list=list(data.type.unique())\naverage_price2=[]\n\nfor i in type_list:\n    x=data[data.type==i]\n    average_price2.append(sum(x.AveragePrice)\/len(x))\ndf2=pd.DataFrame({'type_list':type_list,'average_price':average_price2})\n\nplt.figure(figsize=(15,10))\nax=sns.barplot(x=df2.type_list,y=df2.average_price,palette='vlag')\nplt.xlabel('Type of Avocado')\nplt.ylabel('Average Price')\nplt.title('Average Price of Avocado According to Types')","1822383d":"region_list=list(data.region.unique())\naverage_price=[]\n\nfor i in region_list:\n    x=data[data.region==i]\n    region_average=sum(x.AveragePrice)\/len(x)\n    average_price.append(region_average)\n\ndf1=pd.DataFrame({'region_list':region_list,'average_price':average_price})\nnew_index=df1.average_price.sort_values(ascending=False).index.values\nsorted_data=df1.reindex(new_index)\n\nplt.figure(figsize=(15,10))\nax=sns.barplot(x=sorted_data.region_list,y=sorted_data.average_price,palette='rocket')\n\nplt.xticks(rotation=90)\nplt.xlabel('Region')\nplt.ylabel('Average Price')\nplt.title('Average Price of Avocado According to Region')","6f542f8d":"small=[]\nlarge=[]\nxlarge=[]\n\nfor i in region_list:\n    x=data[data.region==i]\n    small.append(sum(x['Small Bags'])\/len(x))\n    large.append(sum(x['Large Bags'])\/len(x))\n    xlarge.append(sum(x['XLarge Bags'])\/len(x))\ndf5=pd.DataFrame({'region_list':region_list,'small':small,'large':large,'xlarge':xlarge})\n\nf,ax1=plt.subplots(figsize=(20,10))\nsns.pointplot(x=region_list,y=small,data=df5,color='brown',alpha=0.7)\nsns.pointplot(x=region_list,y=large,data=df5,color='green',alpha=0.7)\nsns.pointplot(x=region_list,y=xlarge,data=df5,color='yellow',alpha=0.7)\n\nplt.xticks(rotation=90)\nplt.text(1,650000,'small bags',color='brown',fontsize=14)\nplt.text(1,625000,'large bags',color='green',fontsize=14)\nplt.text(1,600000,'x large bags', color='yellow',fontsize=14)\n\nplt.xlabel('Region',color='blue',fontsize=14)\nplt.ylabel('Values',color='blue',fontsize=14)\nplt.title('Small Bags,Large Bags and X Large Bags of Each Region ',color='blue',fontsize=14)\nplt.grid()","6480b2e4":"filter1=data.region!='TotalUS'\ndata1=data[filter1]\n\nregion_list=list(data1.region.unique())\naverage_total_volume=[]\n\nfor i in region_list:\n    x=data1[data1.region==i]\n    average_total_volume.append(sum(x['Total Volume'])\/len(x))\ndf3=pd.DataFrame({'region_list':region_list,'average_total_volume':average_total_volume})\n\nnew_index=df3.average_total_volume.sort_values(ascending=False).index.values\nsorted_data1=df3.reindex(new_index)\n\nplt.figure(figsize=(15,10))\nax=sns.barplot(x=sorted_data1.region_list,y=sorted_data1.average_total_volume,palette='deep')\n\nplt.xticks(rotation=90)\nplt.xlabel('Region')\nplt.ylabel('Average of Total Volume')\nplt.title('Average of Total Volume According to Region')","a470d5e5":"sns.boxplot(y=\"type\", x=\"AveragePrice\", data=data, palette = 'pink')","d1748c81":"data = pd.read_csv('..\/input\/avocado.csv') #read to data\ndata = data.drop(['Unnamed: 0'], axis = 1) #drop the useless column\nnames = [\"date\", \"avprice\", \"totalvol\", \"small\",\"large\",\"xlarge\",\"totalbags\",\"smallbags\",\"largebags\",\"xlargebags\",\"type\",\"year\",\"region\"] #get new column names\ndata = data.rename(columns=dict(zip(data.columns, names))) #rename columns\ndata.head()","fd068eb4":"plt.figure(figsize=(12,20))\nsns.set_style('whitegrid')\nsns.pointplot(x='avprice',y='region',data=data, hue='type',join=False)\nplt.xticks(np.linspace(1,2,5))\nplt.xlabel('Region',{'fontsize' : 'large'})\nplt.ylabel('Average Price',{'fontsize':'large'})\nplt.title(\"Type Average Price in Each Region\",{'fontsize':20})","f504d02c":"dates = [datetime.datetime.strptime(ts, \"%Y-%m-%d\") for ts in data['date']]\ndates.sort()\nsorteddates = [datetime.datetime.strftime(ts, \"%Y-%m-%d\") for ts in dates]\ndata['date'] = pd.DataFrame({'date':sorteddates})\ndata['Year'], data['Month'],  data['Day'] = data['date'].str.split('-').str\ndata.head(10)","adf3fe54":"df = pd.read_csv('..\/input\/avocado.csv')\ndf.head(4)","a318c235":"df.shape","7ea560fa":"df.describe()","93ca8fa6":"df.dtypes","40c60d3e":"df['Year'], df['Month'],  df['Day'] = df['Date'].str.split('-').str","7575f301":"plt.figure(figsize=(18,10))\nsns.lineplot(x=\"Month\", y=\"AveragePrice\", hue='type', data=df)\nplt.show()","2a298eb1":"fig1 = m.plot(forecast)","0cc17a00":"Each one of the regions has exactly 169 entries. The next step is to choose a region, for which we would like to predict future prices.","9649cc09":"Rename dataframe for fbprophet lib.","1893698e":"> **PREDICTION:","078171a4":"Let's check how many distinct regions column region includes and how many entries each region has.","0bac7a75":"\u0404 \u0434\u0432\u0430 \u0442\u0438\u043f\u0438 \u0430\u0432\u043e\u043a\u0430\u0434\u043e - \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u0439 \u0442\u0430 \u043e\u0440\u0433\u0430\u043d\u0456\u0447\u043d\u0438\u0439. \u0412\u0438\u0431\u0438\u0440\u0430\u044e \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u0439 \u0442\u0438\u043f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f.\nWe got two types of avocados - conventional and organic, I have chosen the conventional ones to make predictions for. ","b324e0a6":"Thanks: https:\/\/www.kaggle.com\/samuelbelko\/predicting-prices-of-avocados\/comments; ","95e8728f":"Here we can see how components of the model affect our predictions. ","be103427":"After we have loaded our libraries and data, we shall continue by converting Date column of our DataFrame to pandas readable type.  ","d0d3b934":"\u041c\u0430\u0454\u043c\u043e \u0441\u0442\u043e\u0432\u0431\u0435\u0446\u044c, \u0449\u043e \u043e\u043f\u0438\u0441\u0443\u0454 \u0442\u0438\u043f\u0438. \u0414\u0456\u0437\u043d\u0430\u0454\u043c\u043e\u0441\u044c, \u0449\u043e \u0432\u043e\u043d\u0438 \u0441\u043e\u0431\u043e\u044e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u044c.\nAs we can see we have a column describing type of a avocado, what are these types?","9d7274dd":"Creating & fitting a model. All of the code here is further explained on prophet[ quick start page](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html)."}}