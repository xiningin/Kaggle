{"cell_type":{"e2c5a8c3":"code","7c4fe628":"code","9d75bfb7":"code","a520dd41":"code","886eac40":"code","2fe9226a":"code","143a1bae":"code","21ffa9e5":"code","4cf17f20":"code","fc9d81f3":"code","86e6a4ad":"code","e9d50d2a":"code","1c2f3421":"code","4f5bf9d2":"code","421f7a6e":"markdown"},"source":{"e2c5a8c3":"# Import semua library yang dibutuhkan\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualisation (2-D)\n%matplotlib inline\nimport seaborn as sns # data visualisation (3-D)\nplt.style.use('seaborn') # set style for graph\nfrom scipy import stats","7c4fe628":"# Import file dataset\nrawdata = pd.read_csv('..\/input\/whinequality\/winequality-white.csv')","9d75bfb7":"# Menampilkan data\ndisplay(rawdata.head(), rawdata.shape) ","a520dd41":"# Menampilkan informasi pada dataset\n# Seperti jumlah missing value, dan type field\nrawdata.info()","886eac40":"# Mendapatkan deskripsi dari dataset berupa count, mean, std, min, q1, q2, q3, dan max\n# pada masing-masing field\nrawdata.describe()","2fe9226a":"# Mengecek nilai kolerasi antar masing-masing field, untuk melihat pesebaran datanya\nrawdata.corr()","143a1bae":"fl = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\n\nfor f in fl:\n    print(stats.normaltest(rawdata[f]))","21ffa9e5":"outliers = []  # list data untuk menampung nilai ouliers\n\n# metode yang digunakan untuk mendeteksi outliers yaitu interquartile range \ndef detect_outliers(data): \n    quantile1, quantile3 = np.percentile(data, [25, 75])  # create two quantiles for 25% and 75%\n    iqr_val = quantile3 - quantile1                       # interquantilerange value\n    lower_bound_value = quantile1 - (1.5 * iqr_val)       # lower limit of the data, anything greater are not outliers\n    upper_bound_value = quantile3 + (1.5 * iqr_val)       # upper limit of the data, anything less are not outliers\n    \n    for i in data:\n        if lower_bound_value < i < upper_bound_value:     # if data[value] is greater than lbv and less than ubv than it is not considered as an outlier\n            pass\n        else:\n            outliers.append(i)\n            \n    return lower_bound_value, upper_bound_value        # return lower bound and upper bound value for the data\n\nfeature_list = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\n# #Delete outlier\nfor i in feature_list:\n    mean = rawdata[i].mean()\n    bawah, atas = detect_outliers(rawdata[i])\n    rawdata[i] = rawdata[i].mask(rawdata[i] > atas, mean)","4cf17f20":"rawdata.corr()","fc9d81f3":"bins = (3, 6, 9)\ngroup_names = ['bad','good']\nrawdata['quality'] = pd.cut(rawdata['quality'], bins = bins, labels = group_names)","86e6a4ad":"#Now lets assign a labels to our quality variable\nlabel_quality = LabelEncoder()","e9d50d2a":"rawdata['quality'].replace(['bad','good'],[0,1],inplace=True)\n\n#Bad becomes 0 and good becomes 1 \n# rawdata['quality'] = label_quality.fit_transform(rawdata['quality'])\nrawdata['quality'].value_counts()\n","1c2f3421":"rawdata.corr()","4f5bf9d2":"print(stats.normaltest(rawdata['fixed acidity']))","421f7a6e":"# White Wine Quality \nEng : Learning how to preprocessing, with data mining method.  \nInd : Belajar bagaimana untuk pra proses data dengan metode data mining.  \nData Mining Process :\n1. Replace Outliers with mean\n2. Classified the quality"}}