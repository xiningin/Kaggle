{"cell_type":{"6753133a":"code","56491c39":"code","92320e51":"code","6f5589d9":"code","ffa02b62":"code","8a53e531":"code","be2f042c":"code","6bb20e8d":"code","4a7c550c":"code","ffed5e47":"code","7c2c73c6":"code","7b7c66a1":"code","356167c6":"code","5c49e3a0":"code","75331ff0":"code","52f049ab":"code","d1ab26c5":"code","8cb95826":"code","81dac367":"code","e325dbae":"code","471dfc89":"code","dd27caee":"code","d3ad2081":"code","4183bf3c":"code","26d8cb0d":"markdown","d9da3956":"markdown","eff28678":"markdown","d49e2b3e":"markdown","4655533a":"markdown","35e8607b":"markdown","d766e10f":"markdown","8bc0f8eb":"markdown","fcfb1427":"markdown","6dbceec7":"markdown","43336656":"markdown","57b5999b":"markdown","a2d45b64":"markdown","d8dcdd04":"markdown","e4a95891":"markdown","acc057ee":"markdown","a17f79cb":"markdown","038d6d13":"markdown","81db54a7":"markdown","1ba539ee":"markdown","ac3a26aa":"markdown","9722a5c4":"markdown","51c9c19c":"markdown","bf2bb6e9":"markdown"},"source":{"6753133a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56491c39":"# data wrangling\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pdp\nfrom collections import Counter\nimport re\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import display\n\n# modeling\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_validate\n\n# evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","92320e51":"pd.set_option('display.max_columns', None)","6f5589d9":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\n# train \u306e Survived \u3092\u9664\u5916\uff08\u5b66\u7fd2\u7528\u306b\u4fdd\u6301\uff09\ny_train = train['Survived']\ntrain.drop('Survived', axis=1, inplace=True)\n\n# train, test \u5171\u306b PassengerId \u3092\u9664\u5916(test \u306f Submit \u7528\u306b\u4fdd\u6301)\npassengerid_for_submission = test['PassengerId']\ntrain.drop('PassengerId', axis=1, inplace=True)\ntest.drop('PassengerId', axis=1, inplace=True)\n\n# \u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u30e9\u30d9\u30eb\u3092\u3064\u3051\u3066 Stack\ntrain = train.assign(dataset='train')\ntest = test.assign(dataset='test')\ndataset = pd.concat([train, test]).reset_index(drop=True)\ndataset.head()","ffa02b62":"df = pd.DataFrame({'Sex': test['Sex'], 'Survived': gender_submission['Survived']})\ndf = df.groupby(['Sex', 'Survived']).size().reset_index(name='frequency')\ndf = df.pivot('Sex', 'Survived', 'frequency').fillna(0).astype(int)\nsns.heatmap(df, annot=True, fmt='d')\n# female -> 1 (Survived)\n# male   -> 0 (Dead)","8a53e531":"gender_submission.to_csv('gender_submission.csv', index=False)\n# \u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\uff08to_csv \u3057\u3066 \"Save Version\" \u304b\u3089 \"Save & Run All (Commit)\" \u3068\u3057\u306a\u3044\u3068 Output \u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u306a\u3044\uff09\n# Submit \u3059\u308b\u3068 Accuracy = 0.7655 \u3068\u306a\u308b","be2f042c":"from sklearn.svm import SVC\nmodel = SVC(kernel='linear', random_state=123, gamma=0.05, C=1.0)","6bb20e8d":"# pandas_profiling.ProfilingReport() \u3067\u8a73\u7d30\u306a\u30ec\u30dd\u30fc\u30c8\u3082\u51fa\u305b\u308b\u304c\uff0c\n# \u4eca\u56de\u306f\u7c21\u6613\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3060\u3051\u78ba\u8a8d\u3059\u308b\uff0e\n# \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u65b9\u91dd\u304c\u8003\u3048\u3089\u308c\u308b\n# - Age, Fare \u306f\u5e73\u5747\u5024\u3067\u88dc\u5b8c\n# - Embarked \uff08\u4e57\u8239\u3057\u305f\u6e2f\uff09 \u306f\u6700\u983b\u5024\u3067\u88dc\u5b8c\n# - Cabin \u306e\u6b20\u640d\u6709\u7121\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u751f\u6210\n\ndataset.drop('dataset', axis=1).isnull().groupby(dataset['dataset']).sum().astype(int)","4a7c550c":"dataset.head()","ffed5e47":"dataset.drop(['Ticket'], axis=1, inplace=True)\ndataset.head()","7c2c73c6":"# TODO: train \u306e\u5024\u3067 test \u3082\u57cb\u3081\u308b\u3079\u304d\n# train, test \u3054\u3068\u306e\u5404\u9805\u76ee\u306e\u5e73\u5747\ndisplay(dataset.groupby('dataset')[['Age', 'Fare']].mean())\n\n# \u5e73\u5747\u3067\u88dc\u5b8c\ndataset['Age'].fillna(dataset['Age'].mean(), inplace=True)\ndataset['Fare'].fillna(dataset['Fare'].mean(), inplace=True)\n\n# \u78ba\u8a8d\uff0eAge, Fare \u306e\u6b20\u640d\u304c\u306a\u304f\u306a\u3063\u3066\u3044\u308b\ndisplay(dataset.drop('dataset', axis=1).isnull().groupby(dataset['dataset']).sum())","7b7c66a1":"# \u3044\u305a\u308c\u3082 S\uff08Southampton\uff09\u304c\u591a\u3044\ndisplay(pd.crosstab(dataset['dataset'], dataset['Embarked']).style.background_gradient('Reds', axis=1))","356167c6":"# # Embarked \u3092\u6700\u983b\u5024\u3067\u88dc\u5b8c\ndataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)\n\n# \u78ba\u8a8d\uff1bEmbarked \u306e\u6b20\u640d\u304c\u89e3\u6d88\u3055\u308c\u3066\u3044\u308b\ndisplay(dataset.drop('dataset', axis=1).isnull().groupby(dataset['dataset']).sum())","5c49e3a0":"# dataset['Cabin'] = dataset['Cabin'].isnull().astype(int)\n# display(dataset.drop('dataset', axis=1).isnull().groupby(dataset['dataset']).sum())","75331ff0":"nglist = ['L.']\n# honorifics \u306e\u307f\u306b\u7d5e\u308a\uff0c\uff11\u8981\u7d20\u76ee\u3060\u3051\u6709\u52b9\u306a\u3082\u306e\u3068\u3057\u3066\u62bd\u51fa\ndataset.loc[:, 'Honorifics'] = dataset['Name'].apply(\n    lambda x: [h for h in re.findall(r' (\\S+?\\.)', x) if h not in nglist][0])\ndataset.drop('Name', axis=1, inplace=True)\n\ndisplay(dataset.head())\nprint(dataset['Honorifics'].value_counts())","52f049ab":"dataset['Cabin'] = dataset['Cabin'].fillna('').apply(lambda x: re.findall('([A-z])', x))\ndataset","d1ab26c5":"dataset.head()","8cb95826":"dataset['Sex'] = (dataset['Sex']=='female').astype(int) # female -> 1, male -> 0\ndisplay(dataset.head())","81dac367":"dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})\ndisplay(dataset.head())","e325dbae":"dataset = pd.concat([dataset.drop('Honorifics', axis=1), pd.get_dummies(dataset['Honorifics']).iloc[:, :-1]], axis=1)\ndataset.head()","471dfc89":"cabin_set = set(dataset['Cabin'].sum())\ncabin_dictline = dataset['Cabin'].apply(\n    lambda x: {c: x.count(c) for c in cabin_set}\n)\ncabin_dummy = pd.concat(\n    list(\n        cabin_dictline.apply(\n            lambda x: pd.DataFrame.from_dict(x, orient='index').T\n        )\n    )\n).reset_index(drop=True)\ndataset = pd.concat([dataset.drop('Cabin', axis=1), cabin_dummy], axis=1)\ndataset.head()","dd27caee":"X_train = dataset.query('dataset == \"train\"').drop('dataset', axis=1)\nX_test  = dataset.query('dataset == \"test\"').drop('dataset', axis=1)\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_std = scaler.transform(X_train)\nX_test_std = scaler.transform(X_test)","d3ad2081":"model = SVC(kernel='linear', random_state=123, gamma=0.05, C=1.0)\nmodel.fit(X_train_std, y_train)\ny_pred = model.predict(X_test_std)\n\nsubmission_scaled = pd.DataFrame({\n        \"PassengerId\": passengerid_for_submission,\n        \"Survived\": y_pred\n    })\ndisplay(submission_scaled.head())\nsubmission_scaled.to_csv('.\/submission_scaled.csv', index=False)","4183bf3c":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\n# gender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\ntrain.head()","26d8cb0d":"#### \u4ee3\u8868\u5024\uff08\u6700\u983b\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b","d9da3956":"# \u5bbf\u984c\n\n1. Name \u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u3066 Accuracy \u3092\u5411\u4e0a\u3055\u305b\u307e\u3057\u3087\u3046\uff0e\n2. \u672c\u306b\u8a18\u8f09\u306e\u307b\u304b\u306e\u7279\u5fb4\u91cf\u4f5c\u6210\u624b\u6cd5\u3092\u8a66\u3057\u3066\uff0cAccuracy \u3092\u5411\u4e0a\u3055\u305b\u307e\u3057\u3087\u3046\uff0e","eff28678":"# \u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306b\u3064\u3044\u3066\n\u7279\u5fb4\u91cf\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b9f\u6f14\u30fb\u5b9f\u7fd2\u3092\u4ea4\u3048\u305f\u8b1b\u7fa9\u306b\u4f7f\u7528\uff0e","d49e2b3e":"Accuracy \u306e\u7b97\u51fa\u65b9\u6cd5\n\n![image.png](attachment:image.png)\nhttps:\/\/lawtomated.com\/accuracy-precision-recall-and-f1-scores-for-lawyers\/","4655533a":"### \u6027\u80fd\u304c\u5411\u4e0a\u3059\u308b\u3088\u3046\u5909\u63db\u3059\u308b\n#### \u6a19\u6e96\u5316","35e8607b":"\u30c0\u30df\u30fc\u5909\u6570\u5316\uff08Cabin\uff09","d766e10f":"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5024\u306e\u610f\u5473\u3092\u62bd\u51fa\u3059\u308b\uff08Honorifics\uff09","8bc0f8eb":"\u30c0\u30df\u30fc\u5909\u6570\u5316\uff08Honorifics\uff09","fcfb1427":"# Libraries","6dbceec7":"# Data","43336656":"\u6b20\u640d\u5024\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308b","57b5999b":"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5024\u306e\u610f\u5473\u3092\u62bd\u51fa\u3059\u308b\uff08Cabin\uff09","a2d45b64":"# 1. \u30bf\u30b9\u30af\u3068\u8a55\u4fa1\u6307\u6a19\n\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u3067\u306f 0 (\u6b7b\u4ea1)\uff0f 1 \uff08\u751f\u5b58\uff09\u306e 2 \u5024\u5206\u985e\u3092\u884c\u3044\uff0cAccuracy \u304c\u8a55\u4fa1\u3055\u308c\u308b\uff0e  \nAccuracy \u3092\u6700\u5927\u5316\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\uff0e\n\n\u6df7\u540c\u884c\u5217\uff08\u5206\u985e\u30bf\u30b9\u30af\u3067\u7528\u3044\u3089\u308c\u308b\uff0c\u5b9f\u969b\u306e\u5024\u30fb\u4e88\u6e2c\u5024\u3054\u3068\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u306e\u8868\uff09\n![image.png](attachment:image.png)\nhttps:\/\/aiacademy.jp\/media\/?p=258","d8dcdd04":"## 2.3. \u7279\u5fb4\u91cf\u306e\u610f\u5473\u30fb\u6b20\u640d\u7b49\u3092\u78ba\u8a8d\n\u7279\u5fb4\u91cf\u306e\u610f\u5473\u30fb\u6b20\u640d\u7b49\u3092\u78ba\u8a8d\u3057\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u3092\u9078\u3076\uff0e  \n\u7279\u5fb4\u91cf\u306e\u610f\u5473\uff08https:\/\/www.kaggle.com\/c\/titanic\/data \uff09\n![image.png](attachment:image.png)","e4a95891":"### \u6b20\u640d\u5024\u306e\u88dc\u5b8c\n#### \u4ee3\u8868\u5024\uff08\u5e73\u5747\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b","acc057ee":"#### \u6570\u5024\u5316\uff08Embarked\uff09\n\u51fa\u73fe\u983b\u5ea6\u9806\u306b 0, 1, 2 \u3068\u3059\u308b","a17f79cb":"## 2.4. \u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n\n- \u4e0d\u8981\u5217\u3092\u524a\u9664\n- \u6b20\u640d\u5024\u306e\u88dc\u5b8c\n  - \u4ee3\u8868\u5024\uff08\u5e73\u5747\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\n  - \u4ee3\u8868\u5024\uff08\u6700\u983b\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\n  - \u6b20\u640d\u5024\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\n- \u30e2\u30c7\u30eb\u304c\u53d7\u3051\u4ed8\u3051\u308b\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3059\u308b\n  - \u6570\u5024\u5316\n- \u6027\u80fd\u304c\u5411\u4e0a\u3059\u308b\u3088\u3046\u5909\u63db\u3059\u308b\n  - \u6a19\u6e96\u5316","038d6d13":"## 2.2. \u524d\u63d0\u3068\u3059\u308b\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\n\u7279\u5fb4\u91cf\u304c 1-2 \u5909\u6570\u306e\u5834\u5408\u524d\u8ff0\u306e female -> alive \u306e\u3088\u3046\u306a\u6761\u4ef6\u5206\u5c90\u304c\u53ef\u80fd\u3060\u304c\uff0c\u3088\u308a\u591a\u304f\u306e\u7279\u5fb4\u91cf\u3068\u6a5f\u68b0\u5b66\u7fd2\u3092\u7528\u3044\u308b\u3053\u3068\u3067 Accuracy \u306e\u5411\u4e0a\u304c\u671b\u3081\u308b\uff0e\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u7279\u5fb4\u3092\u3082\u3064 SVC \u3092\u5229\u7528\u3059\u308b\uff1a\n\n- \u5165\u529b\u3068\u3057\u3066\u6570\u5024\u306e\u307f\u5229\u7528\u53ef\u80fd\n- \u5165\u529b\u3068\u3057\u3066\u5024\u306e\u6b20\u640d\u3092\u8a31\u3055\u306a\u3044\n\n\u4e0a\u8ff0\u306e\u901a\u308a SVC \u306f\u5229\u7528\u4e0a\u306e\u5236\u7d04\u304c\u591a\u304f\uff0c\u7279\u5fb4\u91cf\u751f\u6210\u306e\u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3\u3068\u3057\u3066\u3061\u3087\u3046\u3069\u826f\u3044\uff0e  \n\u5b9f\u969b\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u3067\u306f\u66f8\u7c4d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u6728\uff08Gradient Boosting Decision Tree; \u4ee5\u4e0b GBDT\uff09\u304c\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\uff0e  ","81db54a7":"### \u30e2\u30c7\u30eb\u304c\u53d7\u3051\u4ed8\u3051\u308b\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3059\u308b\n#### \u6570\u5024\u5316\uff08Sex\uff09","1ba539ee":"\u51e6\u7406\u7d50\u679c","ac3a26aa":"# 2. \u7279\u5fb4\u91cf\u4f5c\u6210\u306b\u3088\u308b\u7cbe\u5ea6\u5411\u4e0a\n\u7279\u5fb4\u91cf\uff08\u5165\u529b\u3068\u3059\u308b\u5024\uff09\u3092\u5909\u66f4\u30fb\u65b0\u898f\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u4e88\u6e2c\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u3092\u8003\u3048\u308b\uff0e","9722a5c4":"## 2.1. \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\ngender_submission.csv \u306f test.csv \u306e Sex \u5217\u306b\u3064\u3044\u3066 'male' -> 0 (dead), 'female' = 1 (alive) \u3068\u3057\u305f\u3082\u306e\uff0e  \n\u30b5\u30d6\u30df\u30c3\u30c8\u3059\u308b\u3068 Accuracy = 0.76555 \u3068\u306a\u308b\uff0e  \n\u3053\u308c\u3092\u8d85\u3048\u308b\u3053\u3068\u304c\u76ee\u6a19\u3068\u306a\u308b\uff0e","51c9c19c":"# Settings","bf2bb6e9":"### \u4e0d\u8981\u5217\u3092\u524a\u9664"}}