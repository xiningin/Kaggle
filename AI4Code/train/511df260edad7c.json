{"cell_type":{"71b376d9":"code","1914a520":"code","6e2e87b2":"code","1d5848aa":"code","ab8b9613":"code","5eded194":"code","1ef7bfde":"code","71e031c2":"code","cf676931":"code","9ac11462":"code","6e451d61":"code","425106a4":"code","2235b6cd":"code","5bb44940":"code","2f25ac1f":"code","771c59ae":"code","83f7c7e9":"code","eb05d1eb":"code","7a24cd95":"code","8ade7901":"code","e6ebf3c1":"code","92bedc95":"code","073ca537":"code","638f58a3":"code","0b66da05":"code","1c7c6f1b":"code","0a4aedff":"code","3db95cc6":"code","4dd51b85":"code","334fe993":"code","d9a68be4":"code","5931bfde":"code","36908d1d":"code","9b9016e8":"code","2fc87c73":"code","4c32328c":"code","ca46963b":"code","c51663a7":"code","b9d56f63":"code","fc89df78":"code","c8b7be4e":"code","ae197ef6":"code","6659cacb":"code","021948b0":"code","0c8b4c49":"code","8d9cef5a":"code","0376108b":"code","9471f297":"code","bb24b5d3":"code","9a3e6208":"code","0ffda533":"code","aa8199a9":"code","7c37cc55":"code","daeb2fd0":"code","2f5e604c":"code","33ee31dc":"code","de0e1eee":"code","4bd3f873":"code","934e68db":"code","5d7c851f":"code","3f905225":"code","f3ad6ff7":"code","5fa55e79":"code","49b697ad":"code","8dea9dd3":"code","b7630c02":"code","d3759784":"code","2eafffa8":"code","29cbc734":"code","3efc7b38":"code","1615f8be":"code","9a4421bf":"code","1033ff82":"code","8ab09a25":"code","cfc3fc18":"code","12034058":"code","900f8e79":"code","6959cfd2":"code","48ab7b93":"code","9f195d87":"code","8116c9fd":"code","f61f85d7":"code","ee698e67":"code","bbab50db":"code","61abf9f0":"code","92b23b26":"code","5cc9b981":"code","6a039cb1":"code","8d68372c":"code","d37317ee":"code","e73b10de":"code","0c9ebd32":"code","e6e93465":"code","1e720192":"code","83282750":"code","43bfa9dd":"code","1ef824ed":"code","d4fb8302":"code","43602731":"code","ea998f1b":"code","f46114b8":"code","92b196bf":"code","cacb76fd":"code","1102940b":"code","bf38143d":"code","638666f7":"code","cf8641f7":"code","c8e16179":"code","2a419b92":"code","c2c864d3":"code","724d2810":"code","aeb1a4e8":"code","4914e100":"code","749b8f74":"code","0a238303":"code","fba47c6b":"code","960c2ff1":"code","b5ed1535":"code","6662e997":"code","85b92c00":"code","b6b78746":"code","a40e2656":"code","afebd5bc":"code","3e371fc9":"code","803803c8":"code","e15a7852":"code","ae70377d":"code","380d721e":"code","73d46e49":"code","33bec2bc":"code","8e7e3bdc":"code","d22ecebb":"code","b90d2be0":"code","11451703":"code","ae969eaf":"code","951747c2":"code","3e96e87b":"code","bcb8df4f":"code","debb376f":"code","cc145b8b":"code","306119c2":"code","4c9eabfa":"code","6619bc0e":"code","3149f88c":"code","87528fb6":"code","b8e01b5f":"code","6180ac0e":"code","b6161a21":"code","836dd4ea":"code","7c89063f":"code","66d15bae":"code","16818eb2":"code","d3f7f6a9":"code","05165599":"code","f395efb9":"code","13f39cef":"code","89a9275c":"code","f75ad014":"code","a43bb4bd":"code","94e03e7d":"code","753d1197":"code","4dbe0606":"markdown","7df88498":"markdown","7e9d96c9":"markdown","0d3bdb04":"markdown","fce5f2bd":"markdown","753bbaae":"markdown","b373b645":"markdown","35fa9e6d":"markdown","2355517c":"markdown","1f28fd07":"markdown","031a6f87":"markdown","55ae466e":"markdown","9e2b9586":"markdown","251cb70e":"markdown","e3b93766":"markdown","814bcab6":"markdown","538e392a":"markdown","db6d8376":"markdown","064f3397":"markdown","b6c35a37":"markdown","930f41ef":"markdown","d3614be6":"markdown","bad0f7f3":"markdown","348a9628":"markdown","53098cbb":"markdown","80607764":"markdown","61f50e02":"markdown","8e903cf1":"markdown","4d436f8a":"markdown","3db60bae":"markdown","3b0ec653":"markdown","71e8f0fd":"markdown","47b8b8ba":"markdown","902bd9f7":"markdown","8c59a1c4":"markdown","4f2cd105":"markdown","db7c488c":"markdown","6df041dc":"markdown","29078331":"markdown","0da27dea":"markdown","1a341f99":"markdown","cff30357":"markdown","df8609d3":"markdown","e6cb9c9c":"markdown","15f182af":"markdown","03fb5a2e":"markdown","2bc32c42":"markdown","ff4644d7":"markdown","8b0351b6":"markdown","5c95fbb1":"markdown","90e39f79":"markdown","b00d8b0b":"markdown","5fe049f1":"markdown","50624306":"markdown","33883d4d":"markdown","cb33fdae":"markdown","1fdbf8a7":"markdown","a4c26125":"markdown","0d4d286c":"markdown","fd898a15":"markdown","45fbadef":"markdown","fd490029":"markdown","6b8d23ed":"markdown","066b4e8a":"markdown","342df4e4":"markdown","cd5f5b9c":"markdown","58c5c47c":"markdown","9afea1a6":"markdown","b13f6db1":"markdown","99483f7f":"markdown","9496a897":"markdown","e3311900":"markdown","0e15e631":"markdown","1b7214fe":"markdown","6c9cbf1f":"markdown","ed7ea951":"markdown","99b11184":"markdown","3f0e78d9":"markdown","e3835d73":"markdown","5d76cf65":"markdown","76d9ac07":"markdown"},"source":{"71b376d9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1914a520":"july = pd.read_csv('..\/input\/brazil-bank-account-spending-dataset\/july.csv',index_col=0)\naugust = pd.read_csv('..\/input\/brazil-bank-account-spending-dataset\/august.csv',index_col=0)\nseptember = pd.read_csv('..\/input\/brazil-bank-account-spending-dataset\/september.csv',index_col=0)\noctober = pd.read_csv('..\/input\/brazil-bank-account-spending-dataset\/october.csv',index_col=0)","6e2e87b2":"\n# ***********************************************************\n#                         July\n# ***********************************************************\n\n\n# -----------------------------------------------------------\n# The arrangement of the order of the columns\n# -----------------------------------------------------------\n'''\njuly.columns = ['eventId', 'originId', 'eventCreateDate', 'originSystem', 'operation',\n       'isChargeback', 'operationType', 'operationCode', 'originCreateDate',\n       'userId', 'accountId', 'accountType', 'receipt', 'accountId',\n       'accountType', 'cooperativeId', 'accountName', 'amount', 'installment',\n       'installmentAmount', 'originalCurrencyAmount', 'originalCurrency',\n       'description', 'category', 'customTransaction', 'flagIncomeTax',\n       'hashtag', 'costType', 'description.value', 'description.date',\n       'category.value', 'category.name', 'category.imageCode',\n       'category.date', 'hashtag.value', 'hashtag.date', 'originUserId',\n       'destinyUserId', 'storeName', 'cardMCC']\n'''\n\n# -----------------------------------------------------------\n# I convert negative amount values \u200b\u200bto positive values \u200b\u200band create a new column\n# -----------------------------------------------------------\n\njuly['new_amount'] = july['amount'].abs()\n\n\n# -----------------------------------------------------------\n# I convert the time column to DateTime format\n# -----------------------------------------------------------\n\njuly['eventCreateDate'] = pd.to_datetime(july['eventCreateDate']) ","1d5848aa":"# ***********************************************************\n#                         August\n# ***********************************************************\n\n\n# -----------------------------------------------------------\n# The arrangement of the order of the columns\n# -----------------------------------------------------------\n'''\naugust.columns = ['eventId', 'originId', 'eventCreateDate', 'originSystem', 'operation',\n       'isChargeback', 'operationType', 'operationCode', 'originCreateDate',\n       'userId', 'accountId', 'accountType', 'receipt', 'accountId',\n       'accountType', 'cooperativeId', 'accountName', 'amount', 'installment',\n       'installmentAmount', 'originalCurrencyAmount', 'originalCurrency',\n       'description', 'category', 'customTransaction', 'flagIncomeTax',\n       'hashtag', 'costType', 'description.value', 'description.date',\n       'category.value', 'category.name', 'category.imageCode',\n       'category.date', 'hashtag.value', 'hashtag.date', 'originUserId',\n       'destinyUserId', 'storeName', 'cardMCC']\n'''\n\n# -----------------------------------------------------------\n# I convert negative amount values \u200b\u200bto positive values \u200b\u200band create a new column\n# -----------------------------------------------------------\n\naugust['new_amount'] = august['amount'].abs()\n\n\n# -----------------------------------------------------------\n# I convert the time column to DateTime format\n# -----------------------------------------------------------\n\naugust['eventCreateDate'] = pd.to_datetime(august['eventCreateDate']) ","ab8b9613":"# ***********************************************************\n#                         September\n# ***********************************************************\n\n\n# -----------------------------------------------------------\n# The arrangement of the order of the columns\n# -----------------------------------------------------------\n'''\nseptember.columns = ['eventId', 'originId', 'eventCreateDate', 'originSystem', 'operation',\n       'isChargeback', 'operationType', 'operationCode', 'originCreateDate',\n       'userId', 'accountId', 'accountType', 'receipt', 'accountId',\n       'accountType', 'cooperativeId', 'accountName', 'amount', 'installment',\n       'installmentAmount', 'originalCurrencyAmount', 'originalCurrency',\n       'description', 'category', 'customTransaction', 'flagIncomeTax',\n       'hashtag', 'costType', 'description.value', 'description.date',\n       'category.value', 'category.name', 'category.imageCode',\n       'category.date', 'hashtag.value', 'hashtag.date', 'originUserId',\n       'destinyUserId', 'storeName', 'cardMCC']\n'''\n\n# -----------------------------------------------------------\n# I convert negative amount values \u200b\u200bto positive values \u200b\u200band create a new column\n# -----------------------------------------------------------                          \n\nseptember['new_amount'] = september['amount'].abs()\n\n\n# -----------------------------------------------------------\n# I convert the time column to DateTime format\n# -----------------------------------------------------------\n\nseptember['eventCreateDate'] = pd.to_datetime(september['eventCreateDate']) ","5eded194":"# ***********************************************************\n#                         October\n# ***********************************************************\n\n\n# -----------------------------------------------------------\n# The arrangement of the order of the columns\n# -----------------------------------------------------------\n'''\noctober.columns = ['eventId', 'originId', 'eventCreateDate', 'originSystem', 'operation',\n       'isChargeback', 'operationType', 'operationCode', 'originCreateDate',\n       'userId', 'accountId', 'accountType', 'receipt', 'accountId',\n       'accountType', 'cooperativeId', 'accountName', 'amount', 'installment',\n       'installmentAmount', 'originalCurrencyAmount', 'originalCurrency',\n       'description', 'category', 'customTransaction', 'flagIncomeTax',\n       'hashtag', 'costType', 'description.value', 'description.date',\n       'category.value', 'category.name', 'category.imageCode',\n       'category.date', 'hashtag.value', 'hashtag.date', 'originUserId',\n       'destinyUserId', 'storeName', 'cardMCC']\n'''\n\n# -----------------------------------------------------------\n# I convert negative amount values \u200b\u200bto positive values \u200b\u200band create a new column\n# -----------------------------------------------------------\n\noctober['new_amount'] = october['amount'].abs() \n\n\n# -----------------------------------------------------------\n# I convert the time column to DateTime format\n# -----------------------------------------------------------\n\noctober['eventCreateDate'] = pd.to_datetime(october['eventCreateDate']) ","1ef7bfde":"# -----------------------------------------------------------\n# Merging all data frames\n# -----------------------------------------------------------\n\ndf = pd.concat([july,august,september,october])\n\n\n# -----------------------------------------------------------\n# Deleting all empty columns\n# -----------------------------------------------------------\n\ndf.dropna(how='all',axis=1,inplace=True)","71e031c2":"'''\n\n\n# July\n\nexpenses_july = []\nfor i in range(len(july)):\n\n  if july.iloc[i]['operation'] == 'Debito':\n    expenses_july.append(1)\n\n  elif july.iloc[i]['operation'] == 'Credito' and july.iloc[i]['accountType'] == 'ContaCorrente':\n      expenses_july.append(1)\n  elif july.iloc[i]['operation'] == 'Credito' and july.iloc[i]['accountType'] == 'CartaoDeCredito':\n      expenses_july.append(1)\n  elif july.iloc[i]['operation'] == 'Credito' and july.iloc[i]['accountType'] == 'Poupanca':\n      expenses_july.append(0)\n  elif july.iloc[i]['operation'] == 'Credito' and july.iloc[i]['accountType'] == 'ContaCapital':\n      expenses_july.append(0)\n  elif july.iloc[i]['operation'] == 'Credito' and july.iloc[i]['accountType'] == 'ValeRefeicao':\n      expenses_july.append(1)\n\n  else:\n    expenses_july.append(0)\n\njuly['expenses'] = expenses_july\n\n\n'''","cf676931":"'''\n\n\n# August\n\nexpenses_august = []\nfor i in range(len(august)):\n\n  if august.iloc[i]['operation'] == 'Debito':\n    expenses_august.append(1)\n\n  elif august.iloc[i]['operation'] == 'Credito' and august.iloc[i]['accountType'] == 'ContaCorrente':\n      expenses_august.append(1)\n  elif august.iloc[i]['operation'] == 'Credito' and august.iloc[i]['accountType'] == 'CartaoDeCredito':\n      expenses_august.append(1)\n  elif august.iloc[i]['operation'] == 'Credito' and august.iloc[i]['accountType'] == 'Poupanca':\n      expenses_august.append(0)\n  elif august.iloc[i]['operation'] == 'Credito' and august.iloc[i]['accountType'] == 'ContaCapital':\n      expenses_august.append(0)\n  elif august.iloc[i]['operation'] == 'Credito' and august.iloc[i]['accountType'] == 'ValeRefeicao':\n      expenses_august.append(1)\n\n  else:\n    expenses_august.append(0)\n\naugust['expenses'] = expenses_august\n\n\n'''","9ac11462":"'''\n\n\n# September\n\nexpenses_september = []\nfor i in range(len(september)):\n\n  if september.iloc[i]['operation'] == 'Debito':\n    expenses_september.append(1)\n\n  elif september.iloc[i]['operation'] == 'Credito' and september.iloc[i]['accountType'] == 'ContaCorrente':\n      expenses_september.append(1)\n  elif september.iloc[i]['operation'] == 'Credito' and september.iloc[i]['accountType'] == 'CartaoDeCredito':\n      expenses_september.append(1)\n  elif september.iloc[i]['operation'] == 'Credito' and september.iloc[i]['accountType'] == 'Poupanca':\n      expenses_september.append(0)\n  elif september.iloc[i]['operation'] == 'Credito' and september.iloc[i]['accountType'] == 'ContaCapital':\n      expenses_september.append(0)\n  elif september.iloc[i]['operation'] == 'Credito' and september.iloc[i]['accountType'] == 'ValeRefeicao':\n      expenses_september.append(1)\n\n  else:\n    expenses_september.append(0)\n\nseptember['expenses'] = expenses_september\n\n\n'''","6e451d61":"'''\n\n\n# October\n\nexpenses_october = []\nfor i in range(len(october)):\n\n  if october.iloc[i]['operation'] == 'Debito':\n    expenses_october.append(1)\n\n  elif october.iloc[i]['operation'] == 'Credito' and october.iloc[i]['accountType'] == 'ContaCorrente':\n      expenses_october.append(1)\n  elif october.iloc[i]['operation'] == 'Credito' and october.iloc[i]['accountType'] == 'CartaoDeCredito':\n      expenses_october.append(1)\n  elif october.iloc[i]['operation'] == 'Credito' and october.iloc[i]['accountType'] == 'Poupanca':\n      expenses_october.append(0)\n  elif october.iloc[i]['operation'] == 'Credito' and october.iloc[i]['accountType'] == 'ContaCapital':\n      expenses_october.append(0)\n  elif october.iloc[i]['operation'] == 'Credito' and october.iloc[i]['accountType'] == 'ValeRefeicao':\n      expenses_october.append(1)\n\n  else:\n    expenses_october.append(0)\n\noctober['expenses'] = expenses_october\n\n\n'''","425106a4":"'''\n\n# July\n\njuly['july_expense_amount'] = 'nan'\n\n\nfor i in july[july['expenses'] == 1].groupby('userId').sum()[['new_amount']].index:\n  for k in range(len(july)):\n    if july.iloc[k]['userId'] == i:\n      july['july_expense_amount'].iloc[k] == july[july['expenses'] == 1].groupby('userId').sum()[['new_amount']].iloc[i].values[0]\n\n#August\n\naugust['august_expense_amount'] = 'nan'\n\n\nfor i in august[august['expenses'] == 1].groupby('userId').sum()[['new_amount']].index:\n  for k in range(len(august)):\n    if august.iloc[k]['userId'] == i:\n      august['august_expense_amount'].iloc[k] == august[august['expenses'] == 1].groupby('userId').sum()[['new_amount']].iloc[i].values[0]\n\n# September\n\nseptember['september_expense_amount'] = 'nan'\n\n\nfor i in september[september['expenses'] == 1].groupby('userId').sum()[['new_amount']].index:\n  for k in range(len(september)):\n    if september.iloc[k]['userId'] == i:\n      september['september_expense_amount'].iloc[k] == september[september['expenses'] == 1].groupby('userId').sum()[['new_amount']].iloc[i].values[0]\n\n# October\n\noctober['october_expense_amount'] = 'nan'\n\n\nfor i in october[october['expenses'] == 1].groupby('userId').sum()[['new_amount']].index:\n  for k in range(len(october)):\n    if october.iloc[k]['userId'] == i:\n      october['october_expense_amount'].iloc[k] == october[october['expenses'] == 1].groupby('userId').sum()[['new_amount']].iloc[i].values[0]\n\n\n'''","2235b6cd":"july.head(5)","5bb44940":"july.info()","2f25ac1f":"july.describe().T","771c59ae":"# Unique values \u200b\u200bof columns in the July dataset\n\nprint('====    JULY COLUMNS UNIQUE VALUES    ====\\n')\nfor i in july.columns:\n   print('Unique elements of',i,' - ',len(july[i].unique()))","83f7c7e9":"# We look at rows with the same values \u200b\u200bas 'new_amount', 'eventCreateDate', 'userId' (duplicate rows)\njuly[july.duplicated(['new_amount','eventCreateDate','userId'],keep=False)]","eb05d1eb":"# we remove one of the duplicate rows from our dataset. Because these are actually the same process \n# But they appear twice in our data set. this may mislead us when answering our question\n\ndrop_index = list(july[july.duplicated(['new_amount','eventCreateDate','userId'],keep='last')].index)\ndropped_july = july.drop(drop_index,axis=0).reset_index(drop=True)\ndropped_july.shape","7a24cd95":"print('There have been',len(dropped_july),'transactions in July.')","8ade7901":"print(len(pd.DataFrame(july.groupby('userId').count())),'customer made a transaction in July')","e6ebf3c1":"july_categ_freq = pd.DataFrame(dropped_july.groupby('category')['eventCreateDate'].count().sort_values(ascending=False).reset_index())\njuly_categ_freq.columns = ['category','freq']\njuly_categ_freq","92bedc95":"plt.figure(figsize=(20,15))\nax = sns.countplot(x=\"category\", data=dropped_july, palette=\"Blues_d\",order = july['category'].value_counts().index)\nplt.xlabel('Categories')\nplt.ylabel('Total Transaction')\nplt.title('Total Transactions By Category')\nplt.xticks(rotation= 90);","073ca537":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\njuly_categ_amount = dropped_july[(~dropped_july['category'].isin(not_expenses_categ)) & (dropped_july['operation'] == 'Debito')]\njuly_categ_amount = july_categ_amount.groupby('category')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\njuly_categ_amount.columns = ['category', 'total_amount']\njuly_categ_amount","638f58a3":"plt.figure(figsize=(20,15))\ng = sns.barplot(x=\"category\", y=\"total_amount\",data=july_categ_amount)\n\nplt.xlabel('Categories')\nplt.ylabel('Total Amount')\nplt.title('Total Amount by Categories')\nplt.xticks(rotation= 90);","0b66da05":"july_customer_freq = dropped_july.groupby('userId').count()[['eventCreateDate']].sort_values('eventCreateDate',ascending=False).reset_index()\njuly_customer_freq.columns = ['customer_id','customer_freq']\njuly_customer_freq","1c7c6f1b":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\njuly_customer_amount = dropped_july[(~dropped_july['category'].isin(not_expenses_categ)) & (dropped_july['operation'] == 'Debito')]\njuly_customer_amount = july_customer_amount.groupby('userId')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\njuly_customer_amount","0a4aedff":"dropped_july[dropped_july['userId'] == 71]","3db95cc6":"dropped_july[dropped_july['userId'] == 2389]","4dd51b85":"july_credit_debit = pd.DataFrame(july['operation'].value_counts()).reset_index()\njuly_credit_debit.columns = ['operation','freq']\njuly_credit_debit","334fe993":"plt.figure(figsize=(12,9))\nax = sns.countplot(x=\"operation\", data=july, palette=\"ch:2.5,-.2,dark=.3\")\nplt.xlabel('Operation Type')\nplt.ylabel('Total Transaction')\nplt.title('Comparison of Credito and Debito')","d9a68be4":"july_installment_freq = pd.DataFrame(july['installment'].value_counts()).reset_index()\njuly_installment_freq.columns = ['number_of_installments', 'freq']\njuly_installment_freq","5931bfde":"# Taken the logarithm of the number of installments in July\n\nplt.figure(figsize=(15,10))\ng = sns.barplot(x=\"number_of_installments\", y=\"freq\",data=july_installment_freq)\nplt.xlabel('Number of Installments')\nplt.ylabel('Total Installments Count')\nplt.title('Comparison of Installment Counts')\ng.set_yscale(\"log\")","36908d1d":"july[july['installment'] == 10]","9b9016e8":"july[july['installment'] == 12]","2fc87c73":"july[july['installment'] == 10]['storeName'].value_counts()","4c32328c":"july[july['installment'] == 12]['storeName'].value_counts()","ca46963b":"# Netflix transactions in July\n\ndropped_july[dropped_july['storeName'] == 'NETFLIX.COM']","c51663a7":"# Number of customers who made Netflix transactions in July\n\nprint(len(dropped_july[dropped_july['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()),'customers made netflix transaction in July')","b9d56f63":"# Total amount made to Netflix in July\nprint('A total of', dropped_july[dropped_july['storeName'] == 'NETFLIX.COM']['new_amount'].sum() ,'spent on Netflix in July')","fc89df78":"# UBER transactions in July\n\ndropped_july[dropped_july['storeName'] == 'Uber Do Brasil Tecnologia']","c8b7be4e":"# Number of customers who made UBER transactions in July\n\njuly_uber = dropped_july[dropped_july['storeName'] == 'Uber Do Brasil Tecnologia']\nprint(len(july_uber.groupby('userId')['eventCreateDate'].count()),'customers made UBER transaction in July')","ae197ef6":"# Total amount made to UBER in July\n\nprint('A total of',  july_uber['new_amount'].sum() ,'spent on UBER in July')","6659cacb":"july_eom = dropped_july[dropped_july['operationCode'] != 'TransferenciaEntreContas'].groupby('userId')[['amount']].agg(sum).sort_index(ascending=True)\njuly_eom.columns = ['eom_balance']\njuly_eom","021948b0":"august.head(5)","0c8b4c49":"august.info()","8d9cef5a":"august.describe().T","0376108b":"# Unique values \u200b\u200bof columns in the August dataset\n\nprint('====    AUGUST COLUMNS UNIQUE VALUES    ====\\n')\nfor i in august.columns:\n   print('Unique elements of',i,' - ',len(august[i].unique()))","9471f297":"# We look at rows with the same values \u200b\u200bas 'new_amount', 'eventCreateDate', 'userId' (duplicate rows)\naugust[august.duplicated(['new_amount','eventCreateDate','userId'],keep=False)]","bb24b5d3":"# we remove one of the duplicate rows from our dataset. Because these are actually the same process \n# But they appear twice in our data set. this may mislead us when answering our question\n\ndrop_index = list(august[august.duplicated(['new_amount', 'eventCreateDate','userId'],keep='last')].index)\ndropped_august = august.drop(drop_index,axis=0).reset_index(drop=True)\ndropped_august.shape","9a3e6208":"print('There have been',len(dropped_august),'transactions in August.')","0ffda533":"print(len(pd.DataFrame(august.groupby('userId').count())),'customer made a transaction in August')","aa8199a9":"august_categ_freq = pd.DataFrame(dropped_august.groupby('category')['eventCreateDate'].count().sort_values(ascending=False).reset_index())\naugust_categ_freq.columns = ['category','freq']\naugust_categ_freq","7c37cc55":"plt.figure(figsize=(20,15))\nax = sns.countplot(x=\"category\", data=dropped_august, palette=\"Blues_d\",order = august['category'].value_counts().index)\nplt.xlabel('Categories')\nplt.ylabel('Total Transaction')\nplt.title('Total Transactions By Category')\nplt.xticks(rotation= 90);","daeb2fd0":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\naugust_categ_amount = dropped_august[(~dropped_august['category'].isin(not_expenses_categ)) & (dropped_august['operation'] == 'Debito')]\naugust_categ_amount = august_categ_amount.groupby('category')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\naugust_categ_amount.columns = ['category', 'total_amount']\naugust_categ_amount","2f5e604c":"plt.figure(figsize=(20,15))\ng = sns.barplot(x=\"category\", y=\"total_amount\",data=august_categ_amount)\n\nplt.xlabel('Categories')\nplt.ylabel('Total Amount')\nplt.title('Total Amount by Categories')\nplt.xticks(rotation= 90);","33ee31dc":"august_customer_freq = dropped_august.groupby('userId').count()[['eventCreateDate']].sort_values('eventCreateDate',ascending=False).reset_index()\naugust_customer_freq.columns = ['customer_id','customer_freq']\naugust_customer_freq","de0e1eee":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\naugust_customer_amount = dropped_august[(~dropped_august['category'].isin(not_expenses_categ)) & (dropped_august['operation'] == 'Debito')]\naugust_customer_amount = august_customer_amount.groupby('userId')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\naugust_customer_amount","4bd3f873":"dropped_august[dropped_august['userId'] == 1101]","934e68db":"august_credit_debit = pd.DataFrame(august['operation'].value_counts()).reset_index()\naugust_credit_debit.columns = ['operation','freq']\naugust_credit_debit","5d7c851f":"plt.figure(figsize=(12,9))\nax = sns.countplot(x=\"operation\", data=august, palette=\"ch:2.5,-.2,dark=.3\")\nplt.xlabel('Operation Type')\nplt.ylabel('Total Transaction')\nplt.title('Comparison of Credito and Debito')","3f905225":"august_installment_freq = pd.DataFrame(august['installment'].value_counts()).reset_index()\naugust_installment_freq.columns = ['number_of_installments', 'freq']\naugust_installment_freq","f3ad6ff7":"# Taken the logarithm of the number of installments in August\n\nplt.figure(figsize=(15,10))\ng = sns.barplot(x=\"number_of_installments\", y=\"freq\",data=august_installment_freq)\nplt.xlabel('Number of Installments')\nplt.ylabel('Total Installments Count')\nplt.title('Comparison of Installment Counts')\ng.set_yscale(\"log\")","5fa55e79":"# Netflix transactions in July\n\ndropped_august[dropped_august['storeName'] == 'NETFLIX.COM']","49b697ad":"# Number of customers who made Netflix transactions in August\n\nprint(len(dropped_august[dropped_august['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()),'customers made netflix transaction in August')","8dea9dd3":"# Total amount made to Netflix in August\nprint('A total of', dropped_august[dropped_august['storeName'] == 'NETFLIX.COM']['new_amount'].sum() ,'spent on Netflix in August')","b7630c02":"# UBER transactions in August\n\ndropped_august[dropped_august['storeName'] == 'Uber Do Brasil Tecnologia']","d3759784":"# Number of customers who made UBER transactions in August\n\naugust_uber = dropped_august[dropped_august['storeName'] == 'Uber Do Brasil Tecnologia']\nprint(len(august_uber.groupby('userId')['eventCreateDate'].count()),'customers made UBER transaction in August')","2eafffa8":"# Total amount made to UBER in August\n\nprint('A total of',  august_uber['new_amount'].sum() ,'spent on UBER in August')","29cbc734":"august_eom = dropped_august[dropped_august['operationCode'] != 'TransferenciaEntreContas'].groupby('userId')[['amount']].agg(sum).sort_index(ascending=True)\naugust_eom.columns = ['eom_balance']\naugust_eom","3efc7b38":"september.head(5)","1615f8be":"september.info()","9a4421bf":"september.describe().T","1033ff82":"# Unique values \u200b\u200bof columns in the September dataset\n\nprint('====    SEPTEMBER COLUMNS UNIQUE VALUES    ====\\n')\nfor i in september.columns:\n   print('Unique elements of',i,' - ',len(september[i].unique()))","8ab09a25":"# We look at rows with the same values \u200b\u200bas 'new_amount', 'eventCreateDate', 'userId' (duplicate rows)\nseptember[september.duplicated(['new_amount', 'eventCreateDate','userId'],keep=False)]","cfc3fc18":"# we remove one of the duplicate rows from our dataset. Because these are actually the same process \n# But they appear twice in our data set. this may mislead us when answering our question\n\ndrop_index = list(september[september.duplicated(['new_amount', 'eventCreateDate','userId'],keep='last')].index)\ndropped_september = september.drop(drop_index,axis=0).reset_index(drop=True)\ndropped_september.shape","12034058":"print('There have been',len(dropped_september),'transactions in September.')","900f8e79":"print(len(pd.DataFrame(september.groupby('userId').count())),'customer made a transaction in September')","6959cfd2":"september_categ_freq = pd.DataFrame(dropped_september.groupby('category')['eventCreateDate'].count().sort_values(ascending=False).reset_index())\nseptember_categ_freq.columns = ['category','freq']\nseptember_categ_freq","48ab7b93":"plt.figure(figsize=(20,15))\nax = sns.countplot(x=\"category\", data=dropped_september, palette=\"Blues_d\",order = september['category'].value_counts().index)\nplt.xlabel('Categories')\nplt.ylabel('Total Transaction')\nplt.title('Total Transactions By Category')\nplt.xticks(rotation= 90);","9f195d87":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\nseptember_categ_amount = dropped_september[(~dropped_september['category'].isin(not_expenses_categ)) & (dropped_september['operation'] == 'Debito')]\nseptember_categ_amount = september_categ_amount.groupby('category')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\nseptember_categ_amount.columns = ['category', 'total_amount']\nseptember_categ_amount","8116c9fd":"plt.figure(figsize=(20,15))\ng = sns.barplot(x=\"category\", y=\"total_amount\",data=september_categ_amount)\n\nplt.xlabel('Categories')\nplt.ylabel('Total Amount')\nplt.title('Total Amount by Categories')\nplt.xticks(rotation= 90);","f61f85d7":"september_customer_freq = dropped_september.groupby('userId').count()[['eventCreateDate']].sort_values('eventCreateDate',ascending=False).reset_index()\nseptember_customer_freq.columns = ['customer_id','customer_freq']\nseptember_customer_freq","ee698e67":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\nseptember_customer_amount = dropped_september[(~dropped_september['category'].isin(not_expenses_categ)) & (dropped_september['operation'] == 'Debito')]\nseptember_customer_amount = september_customer_amount.groupby('userId')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\nseptember_customer_amount","bbab50db":"dropped_september[dropped_september['userId'] == 71]","61abf9f0":"september_credit_debit = pd.DataFrame(september['operation'].value_counts()).reset_index()\nseptember_credit_debit.columns = ['operation','freq']\nseptember_credit_debit","92b23b26":"plt.figure(figsize=(12,9))\nax = sns.countplot(x=\"operation\", data=september, palette=\"ch:2.5,-.2,dark=.3\")\nplt.xlabel('Operation Type')\nplt.ylabel('Total Transaction')\nplt.title('Comparison of Credito and Debito')","5cc9b981":"september_installment_freq = pd.DataFrame(september['installment'].value_counts()).reset_index()\nseptember_installment_freq.columns = ['number_of_installments', 'freq']\nseptember_installment_freq","6a039cb1":"# Taken the logarithm of the number of installments in September\n\nplt.figure(figsize=(15,10))\ng = sns.barplot(x=\"number_of_installments\", y=\"freq\",data=september_installment_freq)\nplt.xlabel('Number of Installments')\nplt.ylabel('Total Installments Count')\nplt.title('Comparison of Installment Counts')\ng.set_yscale(\"log\")","8d68372c":"# Netflix transactions in September\n\ndropped_september[dropped_september['storeName'] == 'NETFLIX.COM']","d37317ee":"# Number of customers who made Netflix transactions in September\n\nprint(len(dropped_september[dropped_september['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()),'customers made netflix transaction in September')","e73b10de":"# Total amount made to Netflix in September\nprint('A total of', dropped_september[dropped_september['storeName'] == 'NETFLIX.COM']['new_amount'].sum() ,'spent on Netflix in September')","0c9ebd32":"# UBER transactions in September\n\ndropped_september[dropped_september['storeName'] == 'Uber Do Brasil Tecnologia']","e6e93465":"# Number of customers who made UBER transactions in September\n\nseptember_uber = dropped_september[dropped_september['storeName'] == 'Uber Do Brasil Tecnologia']\nprint(len(september_uber.groupby('userId')['eventCreateDate'].count()),'customers made UBER transaction in September')","1e720192":"# Total amount made to UBER in September\n\nprint('A total of',  september_uber['new_amount'].sum() ,'spent on UBER in September')","83282750":"september_eom = dropped_september[dropped_september['operationCode'] != 'TransferenciaEntreContas'].groupby('userId')[['amount']].agg(sum).sort_index(ascending=True)\nseptember_eom.columns = ['eom_balance']\nseptember_eom","43bfa9dd":"october.head(5)","1ef824ed":"october.info()","d4fb8302":"october.describe().T","43602731":"# Unique values \u200b\u200bof columns in the October dataset \n\nprint('====    OCTOBER COLUMNS UNIQUE VALUES    ====\\n')\nfor i in october.columns:\n   print('Unique elements of',i,' - ',len(october[i].unique()))","ea998f1b":"# We look at rows with the same values \u200b\u200bas 'new_amount', 'eventCreateDate', 'userId' (duplicate rows)\noctober[october.duplicated(['new_amount', 'eventCreateDate','userId'],keep=False)]","f46114b8":"# we remove one of the duplicate rows from our dataset. Because these are actually the same process \n# But they appear twice in our data set. this may mislead us when answering our question\n\ndrop_index = list(october[october.duplicated(['new_amount', 'eventCreateDate','userId'],keep='last')].index)\ndropped_october = october.drop(drop_index,axis=0).reset_index(drop=True)\ndropped_october.shape","92b196bf":"print('There have been',len(dropped_october),'transactions in October.')","cacb76fd":"print(len(pd.DataFrame(october.groupby('userId').count())),'customer made a transaction in October')","1102940b":"october_categ_freq = pd.DataFrame(dropped_october.groupby('category')['eventCreateDate'].count().sort_values(ascending=False).reset_index())\noctober_categ_freq.columns = ['category','freq']\noctober_categ_freq","bf38143d":"plt.figure(figsize=(20,15))\nax = sns.countplot(x=\"category\", data=dropped_october, palette=\"Blues_d\",order = october['category'].value_counts().index)\nplt.xlabel('Categories')\nplt.ylabel('Total Transaction')\nplt.title('Total Transactions By Category')\nplt.xticks(rotation= 90);","638666f7":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\noctober_categ_amount = dropped_october[(~dropped_october['category'].isin(not_expenses_categ)) & (dropped_october['operation'] == 'Debito')]\noctober_categ_amount = october_categ_amount.groupby('category')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\noctober_categ_amount.columns = ['category', 'total_amount']\noctober_categ_amount","cf8641f7":"plt.figure(figsize=(20,15))\ng = sns.barplot(x=\"category\", y=\"total_amount\",data=october_categ_amount)\n\nplt.xlabel('Categories')\nplt.ylabel('Total Amount')\nplt.title('Total Amount by Categories')\nplt.xticks(rotation= 90);","c8e16179":"october_customer_freq = dropped_october.groupby('userId').count()[['eventCreateDate']].sort_values('eventCreateDate',ascending=False).reset_index()\noctober_customer_freq.columns = ['customer_id','customer_freq']\noctober_customer_freq","2a419b92":"# To calculate the spending amount, we remove the categories in the 'not_exspenses_categ' list from our data set. We also only look at transactions that are 'Debito'\n\nnot_expenses_categ = ['Aplicacao', 'ReceitasNegocio', 'Rendimentos', 'ContratacaoCredito', 'OutrosRenda', 'DepositoMesmoCpf','TransferenciaMesmoCpf','Resgate']\noctober_customer_amount = dropped_october[(~dropped_october['category'].isin(not_expenses_categ)) & (dropped_october['operation'] == 'Debito')]\noctober_customer_amount = october_customer_amount.groupby('userId')[['new_amount']].sum().sort_values('new_amount',ascending=False).reset_index()\noctober_customer_amount","c2c864d3":"dropped_october[dropped_october['userId'] == 71]","724d2810":"october_credit_debit = pd.DataFrame(october['operation'].value_counts()).reset_index()\noctober_credit_debit.columns = ['operation','freq']\noctober_credit_debit","aeb1a4e8":"plt.figure(figsize=(12,9))\nax = sns.countplot(x=\"operation\", data=october, palette=\"ch:2.5,-.2,dark=.3\")\nplt.xlabel('Operation Type')\nplt.ylabel('Total Transaction')\nplt.title('Comparison of Credito and Debito');","4914e100":"october_installment_freq = pd.DataFrame(october['installment'].value_counts()).reset_index()\noctober_installment_freq.columns = ['number_of_installments', 'freq']\noctober_installment_freq","749b8f74":"# Taken the logarithm of the number of installments in October\n\nplt.figure(figsize=(15,10))\ng = sns.barplot(x=\"number_of_installments\", y=\"freq\",data=october_installment_freq)\nplt.xlabel('Number of Installments')\nplt.ylabel('Total Installments Count')\nplt.title('Comparison of Installment Counts')\ng.set_yscale(\"log\")","0a238303":"# Netflix transactions in October\n\ndropped_october[dropped_october['storeName'] == 'NETFLIX.COM']","fba47c6b":"# Number of customers who made Netflix transactions in October\n\nprint(len(dropped_october[dropped_october['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()),'customers made netflix transaction in October')","960c2ff1":"# Total amount made to Netflix in October\nprint('A total of', dropped_october[dropped_october['storeName'] == 'NETFLIX.COM']['new_amount'].sum() ,'spent on Netflix in October')","b5ed1535":"# UBER transactions in October\n\ndropped_october[dropped_october['storeName'] == 'Uber Do Brasil Tecnologia']","6662e997":"# Number of customers who made UBER transactions in October\n\noctober_uber = dropped_october[dropped_october['storeName'] == 'Uber Do Brasil Tecnologia']\nprint(len(october_uber.groupby('userId')['eventCreateDate'].count()),'customers made UBER transaction in October')","85b92c00":"# Total amount made to UBER in October\n\nprint('A total of',  october_uber['new_amount'].sum() ,'spent on UBER in October')","b6b78746":"october_eom = dropped_october[dropped_october['operationCode'] != 'TransferenciaEntreContas'].groupby('userId')[['amount']].agg(sum).sort_index(ascending=True)\noctober_eom.columns = ['eom_balance']\noctober_eom","a40e2656":"compare_trans = pd.DataFrame([len(dropped_july),\n                              len(dropped_august),\n                              len(dropped_september),\n                              len(dropped_october)])\n\ncompare_trans.columns = ['transactions']\ncompare_trans.index = ['july','august','september','october']\n\nplt.figure(figsize=(12,9))\nsns.barplot(x=compare_trans.index, y='transactions',data=compare_trans);","afebd5bc":"compare_customer_trans = pd.DataFrame([len(pd.DataFrame(july.groupby('userId').count())),\n                                       len(pd.DataFrame(august.groupby('userId').count())),\n                                       len(pd.DataFrame(september.groupby('userId').count())),\n                                       len(pd.DataFrame(october.groupby('userId').count()))])\n\ncompare_customer_trans.columns = ['customer_trans']\ncompare_customer_trans.index = ['july','august','september','october']\n\nplt.figure(figsize=(12,9))\nsns.barplot(x=compare_customer_trans.index, y='customer_trans',data=compare_customer_trans,color=\"salmon\");","3e371fc9":"july_categ_freq = july_categ_freq.set_index('category')\naugust_categ_freq = august_categ_freq.set_index('category')\nseptember_categ_freq = september_categ_freq.set_index('category')\noctober_categ_freq = october_categ_freq.set_index('category')","803803c8":"compare_categ_freq = pd.concat([july_categ_freq, august_categ_freq,september_categ_freq,october_categ_freq],axis=1)\ncompare_categ_freq.columns = ['july','august','september','october']\ncompare_categ_freq","e15a7852":"compare_categ_freq.iloc[:10,:].plot(kind='bar',figsize=(15,12))","ae70377d":"july_categ_amount = july_categ_amount.set_index('category')\naugust_categ_amount = august_categ_amount.set_index('category')\nseptember_categ_amount = september_categ_amount.set_index('category')\noctober_categ_amount = october_categ_amount.set_index('category')","380d721e":"compare_categ_amount = pd.concat([july_categ_amount, august_categ_amount,september_categ_amount,october_categ_amount],axis=1)\ncompare_categ_amount.columns = ['july','august','september','october']\ncompare_categ_amount","73d46e49":"compare_categ_amount.iloc[:10,:].plot(kind='bar',figsize=(15,12));","33bec2bc":"compare_customer_freq = pd.concat([july_customer_freq.set_index('customer_id'), \n                                   august_customer_freq.set_index('customer_id'),\n                                   september_customer_freq.set_index('customer_id'),\n                                   october_customer_freq.set_index('customer_id')],axis=1)\ncompare_customer_freq.columns = ['july','august','september','october']\ncompare_customer_freq","8e7e3bdc":"compare_customer_freq.sort_index().iloc[:20,:].plot(kind='bar',figsize=(15,12));","d22ecebb":"compare_customer_amount = pd.concat([july_customer_amount.set_index('userId'), \n                                   august_customer_amount.set_index('userId'),\n                                   september_customer_amount.set_index('userId'),\n                                   october_customer_amount.set_index('userId')],axis=1)\ncompare_customer_amount.columns = ['july','august','september','october']\ncompare_customer_amount","b90d2be0":"compare_customer_amount.sort_index().iloc[:20,:].plot(kind='bar',figsize=(15,12));","11451703":"compare_installment_freq = pd.concat([ july_installment_freq.set_index('number_of_installments'), \n                                       august_installment_freq.set_index('number_of_installments'),\n                                       september_installment_freq.set_index('number_of_installments'),\n                                       october_installment_freq.set_index('number_of_installments')],\n                                       axis=1)\n\ncompare_installment_freq.columns = ['july','august','september','october']\ncompare_installment_freq","ae969eaf":"np.log(compare_installment_freq).plot(kind='bar',figsize=(15,12));","951747c2":"compare_netflix_count = pd.DataFrame([   len(dropped_july[dropped_july['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()), \n    len(dropped_august[dropped_august['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()),\n    len(dropped_september[dropped_september['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count()),\n    len(dropped_october[dropped_october['storeName'] == 'NETFLIX.COM'].groupby('userId')['eventCreateDate'].count())],columns=['freq'],index=['july','august','september','october'])\n\n\nplt.figure(figsize=(12,9))\nsns.barplot(x=compare_netflix_count.index, y='freq',data=compare_netflix_count)\nplt.ylabel('Number of Customers Transactions');","3e96e87b":"compare_netflix_amount = pd.DataFrame([dropped_july[dropped_july['storeName'] == 'NETFLIX.COM']['new_amount'].sum(), \n                                       dropped_august[dropped_august['storeName'] == 'NETFLIX.COM']['new_amount'].sum(),\n                                       dropped_september[dropped_september['storeName'] == 'NETFLIX.COM']['new_amount'].sum(),\n                                       dropped_october[dropped_october['storeName'] == 'NETFLIX.COM']['new_amount'].sum()],columns=['freq'],index=['july','august','september','october'])\n\nplt.figure(figsize=(12,9))\nsns.barplot(x=compare_netflix_amount.index, y='freq',data=compare_netflix_amount)\nplt.ylabel('Total Amount');","bcb8df4f":"compare_uber_count = pd.DataFrame([   len(dropped_july[dropped_july['storeName'] == 'Uber Do Brasil Tecnologia'].groupby('userId')['eventCreateDate'].count()), \n    len(dropped_august[dropped_august['storeName'] == 'Uber Do Brasil Tecnologia'].groupby('userId')['eventCreateDate'].count()),\n    len(dropped_september[dropped_september['storeName'] == 'Uber Do Brasil Tecnologia'].groupby('userId')['eventCreateDate'].count()),\n    len(dropped_october[dropped_october['storeName'] == 'Uber Do Brasil Tecnologia'].groupby('userId')['eventCreateDate'].count())],columns=['freq'],index=['july','august','september','october'])\n\n\nplt.figure(figsize=(12,9))\nsns.barplot(x=compare_uber_count.index, y='freq',data=compare_uber_count)\nplt.ylabel('Number of Customers Transactions');","debb376f":"compare_uber_amount = pd.DataFrame([dropped_july[dropped_july['storeName'] == 'Uber Do Brasil Tecnologia']['new_amount'].sum(), \n                                       dropped_august[dropped_august['storeName'] == 'Uber Do Brasil Tecnologia']['new_amount'].sum(),\n                                       dropped_september[dropped_september['storeName'] == 'Uber Do Brasil Tecnologia']['new_amount'].sum(),\n                                       dropped_october[dropped_october['storeName'] == 'Uber Do Brasil Tecnologia']['new_amount'].sum()],columns=['freq'],index=['july','august','september','october'])\n\n\nplt.figure(figsize=(12,9))\nsns.barplot(x=compare_uber_amount.index, y='freq',data=compare_uber_amount)\nplt.ylabel('Total Amount');","cc145b8b":"compare_eom = pd.concat([july_eom,august_eom,september_eom,october_eom],axis=1)\ncompare_eom.columns = ['july_eom','august_eom','september_eom','october_eom']\ncompare_eom","306119c2":"compare_eom.isna().sum()","4c9eabfa":"compare_eom.dropna().sort_index().iloc[:20,:].plot(kind='bar',figsize=(15,12))","6619bc0e":"# I am changing the date column as index. Because we can make transactions easier this way.\noctober.set_index('eventCreateDate',inplace=True)\n\n# I am deleting the data of november values in october dataset\nreal_october = october[october.index.month == 10]\n\n# I'm setting Netflix transactions in October to the variable 'october_netflix'\noctober_netflix = real_october[real_october['storeName'] == 'NETFLIX.COM'].sort_index()\n\n# I'm setting UBER transactions in October to the variable 'october_uber'\noctober_uber = real_october[real_october['storeName'] == 'Uber Do Brasil Tecnologia'].sort_index()","3149f88c":"october","87528fb6":"october_netflix.head()","b8e01b5f":"print(len(october_netflix.groupby('userId')['operation'].count()),'(eleven thirteen) customers made netflix transaction in October')","6180ac0e":"print('A total of',october_netflix['new_amount'].sum(),'(thirty-three thousand seven hundred and forty-nine) R$(Brazilian Real) spent on Netflix in October')","b6161a21":"# 1038 (one thousand thirty-eight) of the payments made to Netflix in October were made by credit card and 155 (one hundred fifty-five) by ContaCorrente\n\noctober_netflix['accountType'].value_counts()","836dd4ea":"october_netflix['accountType'].value_counts().plot(kind='bar',figsize=(10,9));","7c89063f":"# Here in October we see the customers who made more than 1 payment to Netflix\n\noctober_netflix_mlt = october_netflix.groupby('userId')[['operation']].count().sort_values('operation',ascending=False)\noctober_netflix_mlt = october_netflix_mlt[october_netflix_mlt['operation'] != 1]\noctober_netflix_mlt.columns = ['netflix_freq_october']\noctober_netflix_mlt","66d15bae":"october_netflix_mlt['netflix_freq_october'].value_counts().plot(kind='bar',figsize=(10,9));","16818eb2":"#July\n\n# I am changing the date column as index. Because we can make transactions easier this way.\njuly.set_index('eventCreateDate',inplace=True)\n\n# I am deleting the data of november values in july dataset\nreal_july = july[july.index.month == 7]\n\n# I'm setting Netflix transactions in July to the variable 'july_netflix'\njuly_netflix = real_july[real_july['storeName'] == 'NETFLIX.COM'].sort_index()\n\njuly_netflix_mlt = july_netflix.groupby('userId')[['operation']].count().sort_values('operation',ascending=False)\njuly_netflix_mlt = july_netflix_mlt[july_netflix_mlt['operation'] != 1]\njuly_netflix_mlt.columns = ['netflix_freq_july']\n\n\n\n\n\n# August\n\n# I am changing the date column as index. Because we can make transactions easier this way.\naugust.set_index('eventCreateDate',inplace=True)\n\n# I am deleting the data of november values in august dataset\nreal_august = august[august.index.month == 8]\n\n# I'm setting Netflix transactions in August to the variable 'august_netflix'\naugust_netflix = real_august[real_august['storeName'] == 'NETFLIX.COM'].sort_index()\n\naugust_netflix_mlt = august_netflix.groupby('userId')[['operation']].count().sort_values('operation',ascending=False)\naugust_netflix_mlt = august_netflix_mlt[august_netflix_mlt['operation'] != 1]\naugust_netflix_mlt.columns = ['netflix_freq_august']\n\n\n\n\n\n#September\n\n# I am changing the date column as index. Because we can make transactions easier this way.\nseptember.set_index('eventCreateDate',inplace=True)\n\n# I am deleting the data of november values in september dataset\nreal_september = september[september.index.month == 9]\n\n# I'm setting Netflix transactions in September to the variable 'september_netflix'\nseptember_netflix = real_september[real_september['storeName'] == 'NETFLIX.COM'].sort_index()\n\nseptember_netflix_mlt = september_netflix.groupby('userId')[['operation']].count().sort_values('operation',ascending=False)\nseptember_netflix_mlt = september_netflix_mlt[september_netflix_mlt['operation'] != 1]\nseptember_netflix_mlt.columns = ['netflix_freq_september']\n\n\nmlt = pd.concat([july_netflix_mlt,\n           august_netflix_mlt,\n           september_netflix_mlt,\n           october_netflix_mlt],axis=1)\n\nmlt.replace(np.nan,'nan',inplace=True)","d3f7f6a9":"mlt.iloc[[0]]['netflix_freq_july'] == 'nan'\n\nindex = []\nfor i in range(len(mlt)):\n  count = 0\n  if mlt.iloc[[i]]['netflix_freq_july'].values != 'nan':\n    count +=1\n  if mlt.iloc[[i]]['netflix_freq_august'].values != 'nan':\n    count +=1\n  if mlt.iloc[[i]]['netflix_freq_september'].values != 'nan':\n    count +=1\n  if mlt.iloc[[i]]['netflix_freq_october'].values != 'nan':\n    count +=1   \n            \n  if count >= 3:\n    index.append(mlt.iloc[[i]].index[0])","05165599":"# We see how many times users pay on Netflix in which months\n# Some customers paid 2 - 3 times to Netflix\nmlt[mlt.index.isin(index)]","f395efb9":"# We are looking at transactions since customer number 79 has paid more than 1 payment to Netflix in 3 months.\n\n\n# !== NETFLIX PRICES 2019 (two thousand nineteen) ==! \n\n# Plano B\u00e1sico - R$ 21,90 (twenty-one point nine)\n# Plano Padr\u00e3o - R$ 32,90 (thirty-two point nine)\n# Plano Premium - R$ 45,90 (forty-five point nine)","13f39cef":"df[df['storeName'] == 'NETFLIX.COM']['amount'].value_counts()","89a9275c":"july[(july['userId'] == 663) & (july['storeName'] == 'NETFLIX.COM')]","f75ad014":"august[(august['userId'] == 663) & (august['storeName'] == 'NETFLIX.COM')]","a43bb4bd":"september[(september['userId'] == 663) & (september['storeName'] == 'NETFLIX.COM')]","94e03e7d":"october[(october['userId'] == 663) & (october['storeName'] == 'NETFLIX.COM')]","753d1197":"july[july['userId'] == 663]","4dbe0606":"<a id=\"2.0\"><\/a> <br>\n\n## Columns Descriptions\n\n### **[*EN*]**\n* \u2018originId\u2019, A type of internal ID not necessary for the analysis we\u2019re doing **[we could discard this one]**\n\n* \u2018originSystem\u2019, which system the info is coming from, it will always be CORE  **[we could discard this one]**\n\n* \u2018operationType\u2019, type of account - it will always say \n  * \u2018principal\u2019 = main account since operations always happen in this account **[we could discard this one]**\n  \n  * Tarifa = fee (usually financial fees)\n  * IOF = Interest for financial operations (usually 3% of the transaction when it applies)\n\n* \u2018account.cooperativeId\u2019, this is also another type of internal ID **[we could discard this one]**\n\n* \u2018receipt\u2019, it\u2019s a receipt number **[we could discard this one]**\n\n* \u2018account.accountId\u2019, an internal ID **[we could discard this one]**\n\n* \u2018isChargeback\u2019, it shows whether the user is charged repeatedly (for example when it pays in installments)\n\n* \u2018operationCode\u2019, it\u2019s the umbrella for the categories - it\u2019s going to show if it\u2019s and income or a purchase.\n\n* \u2018accountType\u2019 \n  * conta corrente = checkings account \n  * poupan\u00e7a = savings account\n  * Contacorrente = checkings account\n\n* \u2018editable.category.imageCode\u2019, this is the category the user chooses when making an expense (apparently there is an image he\/she chooses) and it goes from savings to rent, tranfers, others, etc - these are given categories - it\u2019d be nice to see which are all of them.\n\n* \u2018editable.hashtag.value\u2019,  this is the user description if he wants to add more info on the transaction\n\n* \u2018movimentation.cardMCC\u2019, Merchant Category code, it\u2019s the range of categories businesses are separated in [airlines, services, restaurants, etc] we\u2019re going to explore a little bit more on this tomorrow bc although MCCs are standard, each financial institution has it\u2019s own type of category\n\n* \u2018storeName\u2019, the ID name for the establishment where the transaction is being made\n\n\n\n---\n\n\n\n### **[*TR*]**\n","7df88498":"<a id=\"2.2\"><\/a> <br>\n## August","7e9d96c9":"# Steps\n1. [Data Cleaning](#1)\n1. [Understanding The Data](#2)\n  1. [Columns Descriptions](#2.0)\n  1. [July](#2.1)\n    1. [How many transactions happened in July](#2.1.1)\n    1. [How many customers made transactions in July](#2.1.2)\n    1. [Which category were the most transactions in July](#2.1.3)\n    1. [Which category has the highest expenditure amount in July](#2.1.4)\n    1. [Who is the customer with the highest number of transactions in July](#2.1.5)\n    1. [Who is the customer with the highest transaction volume in July](#2.1.6)\n    1. [Credito and Debito comparison in July](#2.1.7)\n    1. [Comparison of installment transactions in July](#2.1.8)\n    1. [How many customer paid to Netflix in July](#2.1.9)\n    1. [In July, how many people used UBER and how much total payment was made to the UBER](#2.1.10)\n    1. [In July, End-of-month operating balances for each customer](#2.1.11)\n\n   1. [August](#2.2)\n    1. [How many transactions happened in August](#2.2.1)\n    1. [How many customers made transactions in August](#2.2.2)\n    1. [Which category were the most transactions in August](#2.2.3)\n    1. [Which category has the highest expenditure amount in August](#2.2.4)\n    1. [Who is the customer with the highest number of transactions in August](#2.2.5)\n    1. [Who is the customer with the highest transaction volume in August](#2.2.6)\n    1. [Credito and Debito comparison in August](#2.2.7)\n    1. [Comparison of installment transactions in August](#2.2.8)\n    1. [How many customer paid to Netflix in August](#2.2.9)\n    1. [In August, how many people used UBER and how much total payment was made to the UBER](#2.2.10)\n    1. [In August, End-of-month operating balances for each customer](#2.2.11)\n\n  1. [September](#2.3)\n    1. [How many transactions happened in September](#2.3.1)\n    1. [How many customers made transactions in September](#2.3.2)\n    1. [Which category were the most transactions in September](#2.3.3)\n    1. [Which category has the highest expenditure amount in September](#2.3.4)\n    1. [Who is the customer with the highest number of transactions in September](#2.3.5)\n    1. [Who is the customer with the highest transaction volume in September](#2.3.6)\n    1. [Credito and Debito comparison in September](#2.3.7)\n    1. [Comparison of installment transactions in September](#2.3.8)\n    1. [How many customer paid to Netflix in September](#2.3.9)\n    1. [In September, how many people used UBER and how much total payment was made to the UBER](#2.3.10)\n    1. [In September, End-of-month operating balances for each customer](#2.3.11)\n\n  1. [October](#2.4)\n    1. [How many transactions happened in October](#2.4.1)\n    1. [How many customers made transactions in October](#2.4.2)\n    1. [Which category were the most transactions in October](#2.4.3)\n    1. [Which category has the highest expenditure amount in October](#2.4.4)\n    1. [Who is the customer with the highest number of transactions in October](#2.4.5)\n    1. [Who is the customer with the highest transaction volume in October](#2.4.6)\n    1. [Credito and Debito comparison in October](#2.4.7)\n    1. [Comparison of installment transactions in October](#2.4.8)\n    1. [How many customer paid to Netflix in October](#2.4.9)\n    1. [In October, how many people used UBER and how much total payment was made to the UBER](#2.4.10)\n    1. [In October, End-of-month operating balances for each customer](#2.4.11)\n1. [Comparison of Data Sets](#3)\n  1. [Comparison of monthly transactions number](#3.1)\n  1. [How many customers made transactions each month](#3.2)\n  1. [Compare the category number of transactions](#3.3)\n  1. [Comparison of monthly transaction amounts by categories](#3.4)\n  1. [Comparison of customers transaction numbers](#3.5)\n  1. [Comparison of the customer with the highest transaction volume](#3.6)\n  1. [Comparison of installment transactions](#3.7)\n  1. [Comparison of Number of customers who made Netflix transactions](#3.8)\n  1. [Comparison of the total amounts spent on Netflix](#3.9)\n  1. [Comparison of Number of customers who made UBER transactions](#3.10)\n  1. [Comparison of the total amounts spent on UBER](#3.11)\n  1. [Comparison of customers month-end balance](#3.12)\n1. [Data Analysis](#4)\n  1. [Week 1](#4.1)\n    1. [Netflix](#4.1.1)\n        1. [How many customer paid to Netflix in October](#4.1.1.1)\n        1. [How much was paid on Netflix in October?](#4.1.1.2)\n        1. [Comparison of payment channels made to Netflix in October](#4.1.1.3)\n        1. [Customers paying multiple times to Netflix in October](#4.1.1.4)\n        1. [Comparing customers who made 2 or more payments to Netflix by months](#4.1.1.5)","0d3bdb04":"<a id=\"2.4.6\"><\/a> <br>\n### **QUESTION 6**\n### [*EN*]\n\n### Who is the customer with the highest transaction volume in October\n\n### [*TR*]\n### Ekim ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim","fce5f2bd":"<a id=\"2.3.6\"><\/a> <br>\n### **QUESTION 6**\n### [*EN*]\n\n### Who is the customer with the highest transaction volume in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim","753bbaae":"<a id=\"3.8\"><\/a> <br>\n### **Comparison 8**\n### [*EN*]\n\n### Comparison of Number of customers who made Netflix transactions\n\n### [*TR*]\n### Netflix i\u015flemi yapan m\u00fc\u015fteri say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","b373b645":"<a id=\"2.4\"><\/a> <br>\n## October","35fa9e6d":"<a id=\"2.4.8\"><\/a> <br>\n### **QUESTION 8**\n### [*EN*]\n\n### Comparison of installment transactions in October\n\n### [*TR*]\n### Ekim ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","2355517c":"<a id=\"2.3.10\"><\/a> <br>\n### **QUESTION 10**\n### [*EN*]\n\n### In September, how many people used UBER and how much total payment was made to the UBER\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131","1f28fd07":"<a id=\"3.11\"><\/a> <br>\n### **Comparison 11**\n### [*EN*]\n\n### Comparison of the total amounts spent on UBER \n\n### [*TR*]\n### UBER i\u00e7in harcanan toplam tutarlar\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","031a6f87":"<a id=\"1\"><\/a> <br>\n# Data Cleaning\n<font color='green'>\nAt this stage, I am editing the data to prepare it for visualization and understanding the data\n\n","55ae466e":"<a id=\"3.10\"><\/a> <br>\n### **Comparison 10**\n### [*EN*]\n\n### Comparison of Number of customers who made UBER transactions\n\n### [*TR*]\n### UBER i\u015flemi yapan m\u00fc\u015fteri say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","9e2b9586":"<a id=\"2.1.9\"><\/a> <br>\n### **QUESTION 9**\n### [*EN*]\n\n### How many customer paid to Netflix in July\n\n### [*TR*]\n### Temmuz ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n","251cb70e":"<a id=\"2.3.7\"><\/a> <br>\n### **QUESTION 7**\n### [*EN*]\n\n### Credito and Debito comparison in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","e3b93766":"\n\n### EN\n1. Comparison of monthly transactions number\n1. How many customers made transactions each month\n1. Compare the category number of transactions\n1. Comparison of monthly transaction amounts by categories\n1. Comparison of customers transaction numbers\n1. Comparison of the customer with the highest transaction volume\n1. Comparison of installment transactions\n1. Comparison of Number of customers who made Netflix transactions\n1. Comparison of the total amounts spent on Netflix\n1. Comparison of Number of customers who made UBER transactions\n1. Comparison of the total amounts spent on UBER\n1. Comparison of customers end-of-mounth balance\n\n\n\n---\n\n### TR\n1. Ayl\u0131k i\u015flem say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Ayl\u0131k i\u015flem yapan m\u00fc\u015fteri say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Kategorilere g\u00f6re ayl\u0131k i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Kategorilere g\u00f6re ayl\u0131k i\u015flem tutarlar\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. M\u00fc\u015fteri i\u015flem say\u0131lar\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131\n1. M\u00fc\u015fteri i\u015flem hacimleri kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Netflix i\u015flemi yapan m\u00fc\u015fteri say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Netflix i\u00e7in harcanan toplam tutarlar\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. UBER i\u015flemi yapan m\u00fc\u015fteri say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. UBER i\u00e7in harcanan toplam tutarlar\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. M\u00fc\u015fterilerin ay sonu bakiyesinin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n","814bcab6":"<a id=\"3\"><\/a> <br>\n# Comparison of Data\n\n<font color='green'>\nIn this section I compare the results I found for months","538e392a":"<a id=\"3.5\"><\/a> <br>\n### **Comparison 5**\n### [*EN*]\n\n### Comparison of customers transaction numbers\n\n### [*TR*]\n### M\u00fc\u015fteri i\u015flem say\u0131lar\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131","db6d8376":"<a id=\"3.6\"><\/a> <br>\n### **Comparison 6**\n### [*EN*]\n\n### Comparison of the customer with the highest transaction volume\n\n### [*TR*]\n### M\u00fc\u015fteri i\u015flem hacimleri kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","064f3397":"<a id=\"2.4.10\"><\/a> <br>\n### **QUESTION 10**\n### [*EN*]\n\n### In October, how many people used UBER and how much total payment was made to the UBER\n\n### [*TR*]\n### Ekim ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131","b6c35a37":"### EN\n1. How many transactions happened in October\n1. How many customers made transactions in October\n1. Which category were the most transactions in October\n1. Which category has the highest expenditure amount in October\n1. Who is the customer with the highest number of transactions in October\n1. Who is the customer with the highest transaction volume in October\n1. Credito and Debito comparison in October\n1. Comparison of installment transactions in October\n1. How many customer paid to Netflix in October\n1. In October, how many people used UBER and how much total payment was made to the UBER\n1. In October, End-of-month operating balances for each customer\n\n\n\n---\n\n### TR\n1. Ekim ay\u0131nda ka\u00e7 i\u015flem olmu\u015f\n1. Ekim ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f\n1. Ekim ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f\n1. Ekim ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir\n1. Ekim ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim\n1. Ekim ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim\n1. Ekim ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Ekim ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Ekim ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n1. Ekim ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131\n1. Ekim ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi\n\n","930f41ef":"### EN\n1. How many transactions happened in August\n1. How many customers made transactions in August\n1. Which category were the most transactions in August\n1. Which category has the highest expenditure amount in August\n1. Who is the customer with the highest number of transactions in August\n1. Who is the customer with the highest transaction volume in August\n1. Credito and Debito comparison in August\n1. Comparison of installment transactions in August\n1. How many customer paid to Netflix in August\n1. In August, how many people used UBER and how much total payment was made to the UBER\n1. In August, End-of-month operating balances for each customer\n\n\n\n---\n\n### TR\n1. A\u011fustos ay\u0131nda ka\u00e7 i\u015flem olmu\u015f\n1. A\u011fustos ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f\n1. A\u011fustos ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f\n1. A\u011fustos ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir\n1. A\u011fustos ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim\n1. A\u011fustos ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim\n1. A\u011fustos ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. A\u011fustos ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. A\u011fustos ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n1. A\u011fustos ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131\n1. A\u011fustos ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi\n\n","d3614be6":"<a id=\"2.1.8\"><\/a> <br>\n### **QUESTION 8**\n### [*EN*]\n\n### Comparison of installment transactions in July\n\n### [*TR*]\n### Temmuz ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","bad0f7f3":"<a id=\"4.1.1.4\"><\/a> <br>\n\n#### **QUESTION 4**\n### [*EN*]\n\n### Customers paying multiple times to Netflix in October\n\n### [*TR*]\n### Ekim ay\u0131nda Netflix'e birden fazla \u00f6deme yapan m\u00fc\u015fteriler","348a9628":"<a id=\"4.1.1.2\"><\/a> <br>\n\n#### **QUESTION 2**\n### [*EN*]\n\n### How much was paid on Netflix in October?\n\n### [*TR*]\n### Ekim ay\u0131nda Netflix'te ne kadar \u00f6dendi?","53098cbb":"<a id=\"2.4.3\"><\/a> <br>\n### **QUESTION 3**\n### [*EN*]\n\n### Which category were the most transactions in October\n\n### [*TR*]\n### Ekim ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f","80607764":"<a id=\"4.1.1.1\"><\/a> <br>\n\n#### **QUESTION 1**\n### [*EN*]\n\n### How many customer paid to Netflix in October\n\n### [*TR*]\n### Ekim ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n","61f50e02":"<a id=\"2.2.3\"><\/a> <br>\n### **QUESTION 3**\n### [*EN*]\n\n### Which category were the most transactions in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f","8e903cf1":"<a id=\"2\"><\/a> <br>\n# Understanding The Data\n\n<font color='green'>\nAt this stage, I find the answers to the questions I created to analyze the data","4d436f8a":"<a id=\"4.1\"><\/a> <br>\n\n## Week 1","3db60bae":"<a id=\"2.1.2\"><\/a> <br>\n### **QUESTION 2**\n### [*EN*]\n\n### How many customers made transactions in July\n\n### [*TR*]\n### Temmuz ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f","3b0ec653":"<a id=\"2.3.11\"><\/a> <br>\n### **QUESTION 11**\n### [*EN*]\n\n### In September, End-of-month operating balances for each customer\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi","71e8f0fd":"<a id=\"2.3.1\"><\/a> <br>\n### **QUESTION 1**\n### [*EN*]\n\n### How many transactions happened in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda ka\u00e7 i\u015flem olmu\u015f","47b8b8ba":"<a id=\"2.1.6\"><\/a> <br>\n### **QUESTION 6**\n### [*EN*]\n\n### Who is the customer with the highest transaction volume in July\n\n### [*TR*]\n### Temmuz ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim","902bd9f7":"* \u2018AplicativoTransporte\u2019 = transportation app like uber\n* \u2018TelefoneTvInternet\u2019 = telephone\/ tv \/ internet bills\n* \u2018EletronicosMoveis\u2019 = electronics and furniture, \n* \u2018Restaurantes\u2019 = restaurants\n* \u2018Outros\u2019 = other \n* \u2018Cinemas\u2019 = cinema \n* \u2018CafesPadarias\u2019 = coffee places\/bakeries\n* \u2018Conveniencia\u2019 = convenience store\n* \u2018Mercado\u2019 = supermarket \n* \u2018Saques\u2019 = withdrwals\n* \u2018OutrosTarifasTaxasFinanceiras\u2019 = other interest or financial fees you need to pay such as account maintenance \n* \u2018Assinaturas\u2019 = subscriptions \n* \u2018OutrosMoradia\u2019 = other housing expenses\n* \u2018Farmacia\u2019 = pharmacy \n* \u2018OutrosLazerDiversao\u2019 = other entertainment expenses\n* \u2018TransportePublico\u2019 = public transporation\n* \u2018MedicosDentistas\u2019 = doctors\/dentists\n* \u2018Hospedagem\u2019 = hotels \n* \u2018FaculdadePos\u2019 = university\n* \u2018CuidadosPessoais\u2019 = personal care\n* \u2018Manutencao\u2019 = maintenance \n* \u2018OutrosVestuario\u2019 = other apparel\/clothing\n* \u2018Aluguel\u2019 = rent\n* \u2018Cursos\u2019 = courses \n* \u2018Materiais\u2019 = materials \n* \u2018PagamentoCredito\u2019 = credit\/loan payment\n* \u2018Estacionamento\u2019 = parking\n* \u2018Tarifas\u2019 = fees \n* \u2018Luz\u2019 = electricity\n* \u2018RecargaCelular\u2019 = phone credit\/airtime\n* \u2018OutrosTransporte\u2019 = other transportation expenses\n* \u2018AguaCondominio\u2019 = water bill+building maintenance\n* \u2018OutrosEducacao\u2019 = other educational expenses \n* \u2018LivrosRevistas\u2019 = books\/magazines\n* \u2018Presentes\u2019 = gifts \n* \u2018Combustivel\u2019 = gasoline \n* \u2018Viagem\u2019=trips\n* \u2018Trocas\u2019 = \n* \u2018Acessorios\u2019=accesories\n\n\n---\n\n**These categories are not considered expenses**\n\n* \u2018Aplicacao\u2019 = savings \n* \u2018ReceitasNegocio\u2019 = income received for your business\n* \u2018Rendimentos\u2019 = interest gained from investments\/savings \n* \u2018ContratacaoCredito\u2019 = credit\/loan acquired\n* \u2018OutrosRenda\u2019 = other income\n* \u2018DepositoMesmoCpf\u2019 = transfers to this account from the same person (same iD number) but from a different bank account\n* \u2018TransferenciaMesmoCpf\u2019 = transfer to another account with the same ID number \n* \u2018Resgate\u2019 = money you transfer from your savings to your checkings account to use\n","8c59a1c4":"<a id=\"3.9\"><\/a> <br>\n### **Comparison 9**\n### [*EN*]\n\n### Comparison of the total amounts spent on Netflix \n\n### [*TR*]\n### Netflix i\u00e7in harcanan toplam tutarlar\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","4f2cd105":"<a id=\"2.3.9\"><\/a> <br>\n### **QUESTION 9**\n### [*EN*]\n\n### How many customer paid to Netflix in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n","db7c488c":"<a id=\"4.1.1.5\"><\/a> <br>\n\n#### **QUESTION 5**\n### [*EN*]\n\n### Comparing customers who made 2 or more payments to Netflix by months\n\n### [*TR*]\n### Netflix'e 2 veya daha fazla \u00f6deme yapan m\u00fc\u015fterileri aylara g\u00f6re kar\u015f\u0131la\u015ft\u0131rmas\u0131","6df041dc":"<a id=\"2.3.2\"><\/a> <br>\n### **QUESTION 2**\n### [*EN*]\n\n### How many customers made transactions in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f","29078331":"<a id=\"4.1.1.3\"><\/a> <br>\n\n#### **QUESTION 3**\n### [*EN*]\n\n### Comparison of payment channels made to Netflix in October\n\n### [*TR*]\n### Ekim ay\u0131nda Netflix'e yap\u0131lan \u00f6deme kanallar\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","0da27dea":"<a id=\"2.2.8\"><\/a> <br>\n### **QUESTION 8**\n### [*EN*]\n\n### Comparison of installment transactions in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","1a341f99":"<a id=\"3.7\"><\/a> <br>\n### **Comparison 7**\n### [*EN*]\n\n### Comparison of installment transactions\n\n### [*TR*]\n### Taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","cff30357":"<a id=\"2.2.4\"><\/a> <br>\n### **QUESTION 4**\n### [*EN*]\n\n### Which category has the highest expenditure amount in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir","df8609d3":"<a id=\"3.1\"><\/a> <br>\n### **Comparison 1**\n### [*EN*]\n\n### Comparison of monthly transactions number\n\n### [*TR*]\n### Ayl\u0131k i\u015flem say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","e6cb9c9c":"<a id=\"2.1.5\"><\/a> <br>\n### **QUESTION 5**\n### [*EN*]\n\n### Who is the customer with the highest number of transactions in July\n\n### [*TR*]\n### Temmuz ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim","15f182af":"<a id=\"2.4.7\"><\/a> <br>\n### **QUESTION 7**\n### [*EN*]\n\n### Credito and Debito comparison in October\n\n### [*TR*]\n### Ekim ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","03fb5a2e":"<a id=\"2.2.6\"><\/a> <br>\n### **QUESTION 6**\n### [*EN*]\n\n### Who is the customer with the highest transaction volume in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim","2bc32c42":"<a id=\"2.3.4\"><\/a> <br>\n### **QUESTION 4**\n### [*EN*]\n\n### Which category has the highest expenditure amount in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir","ff4644d7":"<a id=\"2.2.2\"><\/a> <br>\n### **QUESTION 2**\n### [*EN*]\n\n### How many customers made transactions in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f","8b0351b6":"<a id=\"2.2.5\"><\/a> <br>\n### **QUESTION 5**\n### [*EN*]\n\n### Who is the customer with the highest number of transactions in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim","5c95fbb1":"<a id=\"2.3.8\"><\/a> <br>\n### **QUESTION 8**\n### [*EN*]\n\n### Comparison of installment transactions in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","90e39f79":"<a id=\"4.1.1\"><\/a> <br>\n### Netflix","b00d8b0b":"<a id=\"2.2.11\"><\/a> <br>\n### **QUESTION 11**\n### [*EN*]\n\n### In August, End-of-month operating balances for each customer\n\n### [*TR*]\n### A\u011fustos ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi","5fe049f1":"<a id=\"4\"><\/a> <br>\n\n# Data Analysis\n","50624306":"TransferenciaEntreContas\n> Hesaplar Aras\u0131 Transfer [TR]\n\n> Transfer Between Accounts [EN]","33883d4d":"<a id=\"3.2\"><\/a> <br>\n### **Comparison 2**\n### [*EN*]\n\n### How many customers made transactions each month\n\n### [*TR*]\n### Ayl\u0131k i\u015flem yapan m\u00fc\u015fteri say\u0131s\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","cb33fdae":"### EN\n1. How many transactions happened in July\n1. How many customers made transactions in July\n1. Which category were the most transactions in July\n1. Which category has the highest expenditure amount in July\n1. Who is the customer with the highest number of transactions in July\n1. Who is the customer with the highest transaction volume in July\n1. Credito and Debito comparison in July\n1. Comparison of installment transactions in July\n1. How many customer paid to Netflix in July\n1. In July, how many people used UBER and how much total payment was made to the UBER\n1. In July, End-of-month operating balances for each customer\n\n\n\n---\n\n### TR\n1. Temmuz ay\u0131nda ka\u00e7 i\u015flem olmu\u015f\n1. Temmuz ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f\n1. Temmuz ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f\n1. Temmuz ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir\n1. Temmuz ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim\n1. Temmuz ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim\n1. Temmuz ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Temmuz ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Temmuz ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n1. Temmuz ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131\n1. Temmuz ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi\n\n","1fdbf8a7":"<a id=\"2.3\"><\/a> <br>\n## September","a4c26125":"<a id=\"3.12\"><\/a> <br>\n### **Comparison 12**\n### [*EN*]\n\n### Comparison of customers end-of-mounth balance\n\n### [*TR*]\n### M\u00fc\u015fterilerin ay sonu bakiyesinin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","0d4d286c":"<a id=\"2.1.3\"><\/a> <br>\n### **QUESTION 3**\n### [*EN*]\n\n### Which category were the most transactions in July\n\n### [*TR*]\n### Temmuz ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f","fd898a15":"<a id=\"2.4.1\"><\/a> <br>\n### **QUESTION 1**\n### [*EN*]\n\n### How many transactions happened in October\n\n### [*TR*]\n### Ekim ay\u0131nda ka\u00e7 i\u015flem olmu\u015f","45fbadef":"<a id=\"3.3\"><\/a> <br>\n### **Comparison 3**\n### [*EN*]\n\n### Compare the category number of transactions\n\n### [*TR*]\n### Kategorilere g\u00f6re ayl\u0131k i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","fd490029":"<a id=\"3.4\"><\/a> <br>\n### **Comparison 4**\n### [*EN*]\n\n### Comparison of monthly transaction amounts by categories\n\n### [*TR*]\n### Kategorilere g\u00f6re ayl\u0131k i\u015flem tutarlar\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","6b8d23ed":"<a id=\"2.1.4\"><\/a> <br>\n### **QUESTION 4**\n### [*EN*]\n\n### Which category has the highest expenditure amount in July\n\n### [*TR*]\n### Temmuz ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir","066b4e8a":"<a id=\"2.1\"><\/a> <br>\n## July","342df4e4":"<a id=\"2.4.5\"><\/a> <br>\n### **QUESTION 5**\n### [*EN*]\n\n### Who is the customer with the highest number of transactions in October\n\n### [*TR*]\n### Ekim ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim","cd5f5b9c":"<a id=\"2.3.3\"><\/a> <br>\n### **QUESTION 3**\n### [*EN*]\n\n### Which category were the most transactions in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f","58c5c47c":"* **Week 1** = *Analysis of 2 categories of expenses (Uber \/Netflix) in october and the relationship to end-of-month running balance*\n\n* **Week 2** = ","9afea1a6":"<a id=\"2.1.11\"><\/a> <br>\n### **QUESTION 11**\n### [*EN*]\n\n### In July, End-of-month operating balances for each customer\n\n### [*TR*]\n### Temmuz ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi","b13f6db1":"<a id=\"2.3.5\"><\/a> <br>\n### **QUESTION 5**\n### [*EN*]\n\n### Who is the customer with the highest number of transactions in September\n\n### [*TR*]\n### Eyl\u00fcl ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim","99483f7f":"<a id=\"2.4.2\"><\/a> <br>\n### **QUESTION 2**\n### [*EN*]\n\n### How many customers made transactions in October\n\n### [*TR*]\n### Ekim ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f","9496a897":"<a id=\"2.2.1\"><\/a> <br>\n### **QUESTION 1**\n### [*EN*]\n\n### How many transactions happened in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda ka\u00e7 i\u015flem olmu\u015f","e3311900":"<a id=\"2.2.7\"><\/a> <br>\n### **QUESTION 7**\n### [*EN*]\n\n### Credito and Debito comparison in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","0e15e631":"<a id=\"2.4.9\"><\/a> <br>\n### **QUESTION 9**\n### [*EN*]\n\n### How many customer paid to Netflix in October\n\n### [*TR*]\n### Ekim ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n","1b7214fe":"<a id=\"2.2.9\"><\/a> <br>\n### **QUESTION 9**\n### [*EN*]\n\n### How many customer paid to Netflix in August\n\n### [*TR*]\n### A\u011fustos ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n","6c9cbf1f":"<a id=\"2.1.1\"><\/a> <br>\n### **QUESTION 1**\n### [*EN*]\n\n### How many transactions happened in July\n\n### [*TR*]\n### Temmuz ay\u0131nda ka\u00e7 i\u015flem olmu\u015f","ed7ea951":"### EN\n1. How many transactions happened in September\n1. How many customers made transactions in September\n1. Which category were the most transactions in September\n1. Which category has the highest expenditure amount in September\n1. Who is the customer with the highest number of transactions in September\n1. Who is the customer with the highest transaction volume in September\n1. Credito and Debito comparison in September\n1. Comparison of installment transactions in September\n1. How many customer paid to Netflix in September\n1. In September, how many people used UBER and how much total payment was made to the UBER\n1. In September, End-of-month operating balances for each customer\n\n\n\n---\n\n### TR\n1. Eyl\u00fcl ay\u0131nda ka\u00e7 i\u015flem olmu\u015f\n1. Eyl\u00fcl ay\u0131nda ka\u00e7 m\u00fc\u015fteri i\u015flem yapm\u0131\u015f\n1. Eyl\u00fcl ay\u0131nda en fazla hangi kategoride i\u015flem olmu\u015f\n1. Eyl\u00fcl ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir\n1. Eyl\u00fcl ay\u0131nda toplamda en fazla i\u015flem adedi olan m\u00fc\u015fteri kim\n1. Eyl\u00fcl ay\u0131nda toplamda en fazla i\u015flem hacmi olan m\u00fc\u015fteri kim\n1. Eyl\u00fcl ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Eyl\u00fcl ay\u0131nda taksitli i\u015flemlerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n1. Eyl\u00fcl ay\u0131nda Netflix'e ka\u00e7 m\u00fc\u015fteri \u00f6deme yapt\u0131\n1. Eyl\u00fcl ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131\n1. Eyl\u00fcl ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi\n\n","99b11184":"<a id=\"2.4.11\"><\/a> <br>\n### **QUESTION 11**\n### [*EN*]\n\n### In October, End-of-month operating balances for each customer\n\n### [*TR*]\n### Ekim ay\u0131nda her m\u00fc\u015fterinin ay sonu bakiyesi","3f0e78d9":"<a id=\"2.1.7\"><\/a> <br>\n### **QUESTION 7**\n### [*EN*]\n\n### Credito and Debito comparison in July\n\n### [*TR*]\n### Temmuz ay\u0131nda Credito ve Debito kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","e3835d73":"<a id=\"2.4.4\"><\/a> <br>\n### **QUESTION 4**\n### [*EN*]\n\n### Which category has the highest expenditure amount in October\n\n### [*TR*]\n### Ekim ay\u0131nda hangi kategorinin harcama tutar\u0131 en y\u00fcksektir","5d76cf65":"<a id=\"2.2.10\"><\/a> <br>\n### **QUESTION 10**\n### [*EN*]\n\n### In August, how many people used UBER and how much total payment was made to the UBER\n\n### [*TR*]\n### A\u011fustos ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131","76d9ac07":"<a id=\"2.1.10\"><\/a> <br>\n### **QUESTION 10**\n### [*EN*]\n\n### In July, how many people used UBER and how much total payment was made to the UBER\n\n### [*TR*]\n### Temmuz ay\u0131nda ka\u00e7 ki\u015fi UBER kulland\u0131 ve UBER'e toplam ne kadar \u00f6deme yap\u0131ld\u0131"}}