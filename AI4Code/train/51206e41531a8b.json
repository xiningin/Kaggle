{"cell_type":{"256b8dd7":"code","edd4bcbc":"code","409c5c64":"code","632766d6":"code","04e22517":"code","ce70437d":"code","1e98d4da":"code","ff72db0d":"code","68d28e0d":"code","c5c3a0cf":"code","1ffdd293":"code","5149e07f":"code","e366dc0d":"code","f1767fd7":"code","4d029254":"code","c019e9bc":"code","c5d6e3ba":"code","56d78083":"markdown","b59ca145":"markdown","c429c0b1":"markdown","998257c0":"markdown","d0ca78de":"markdown","1e01e415":"markdown","7e7553fe":"markdown","e585d407":"markdown","2034b64a":"markdown","f02c17b0":"markdown","70ce87cc":"markdown","54e844d1":"markdown","06ed5fa7":"markdown"},"source":{"256b8dd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","edd4bcbc":"from mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules","409c5c64":"retail = pd.read_csv('..\/input\/onlineretail\/OnlineRetail.csv', encoding = 'unicode_escape')\nretail.head()","632766d6":"retail['Description'] = retail['Description'].str.strip()\nretail.dropna(axis=0, subset=['InvoiceNo'], inplace=True)\nretail['InvoiceNo'] = retail['InvoiceNo'].astype('str')\nretail = retail[~retail['InvoiceNo'].str.contains('C')]","04e22517":"basket = (retail[retail['Country'] ==\"France\"]\n          .groupby(['InvoiceNo', 'Description'])['Quantity']\n          .sum().unstack().reset_index().fillna(0)\n          .set_index('InvoiceNo'))","ce70437d":"basket.head()","1e98d4da":"def encode_units(x):\n    if x <= 0:\n        return 0\n    if x >= 1:\n        return 1\n\nbasket_sets = basket.applymap(encode_units)\nbasket_sets.drop('POSTAGE', inplace=True, axis=1)","ff72db0d":"frequent_itemsets = apriori(basket_sets, min_support=0.07, use_colnames=True)","68d28e0d":"rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\nrules.head()","c5c3a0cf":"# Import seaborn under its standard alias\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Generate scatterplot using support and confidence\nsns.scatterplot(x = \"support\", y = \"confidence\", \n                size = \"lift\", data = rules)\nplt.show()\n","1ffdd293":"rules[ (rules['lift'] >= 6) &\n       (rules['confidence'] >= 0.8) ]","5149e07f":"print(\"ALARM CLOCK BAKELIKE GREEN : \",basket['ALARM CLOCK BAKELIKE GREEN'].sum())\nprint(\"ALARM CLOCK BAKELIKE RED : \",basket['ALARM CLOCK BAKELIKE RED'].sum())","e366dc0d":"basket2 = (retail[retail['Country'] ==\"Germany\"]\n          .groupby(['InvoiceNo', 'Description'])['Quantity']\n          .sum().unstack().reset_index().fillna(0)\n          .set_index('InvoiceNo'))\n\n\nbasket2.head()","f1767fd7":"basket_sets2 = basket2.applymap(encode_units)\nbasket_sets2.drop('POSTAGE', inplace=True, axis=1)\nfrequent_itemsets2 = apriori(basket_sets2, min_support=0.05, use_colnames=True)\nrules2 = association_rules(frequent_itemsets2, metric=\"lift\", min_threshold=1)\n","4d029254":"# Import seaborn under its standard alias\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Generate scatterplot using support and confidence\nsns.scatterplot(x = \"support\", y = \"confidence\", \n                size = \"lift\", data = rules2)\nplt.show()\n","c019e9bc":"rules2[ (rules2['lift'] >= 4) &\n        (rules2['confidence'] >= 0.5)]","c5d6e3ba":"# Import seaborn under its standard alias\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Transform the DataFrame of rules into a matrix using the lift metric\n\npivot = rules2.pivot(index = 'consequents', columns = 'antecedents', values= 'lift')\n\n# Generate a heatmap with annotations on and the colorbar off\n\nsns.heatmap(pivot, annot = True, cbar=False)\nplt.yticks(rotation=0)\nplt.xticks(rotation=90)\nplt.show()\n","56d78083":"## Postprocessing","b59ca145":"## Visualizing Relationship between Support, Confidence and Support","c429c0b1":"## Popular Product Combinations by Country","998257c0":"## References\n\nhttps:\/\/pbpython.com\/market-basket-analysis.html","d0ca78de":"## Further Analysis\n \nYou may want to look at how much opportunity there is to use the popularity of one product to drive sales of another. For instance, we can see that we sell 340 Green Alarm clocks but only 316 Red Alarm Clocks so maybe we can drive more Red Alarm Clock sales through recommendations?","1e01e415":"## Load and Examine Data","7e7553fe":"## Consolidate Items into 1 Transaction Per Row\n\nAfter the cleanup, we need to consolidate the items into 1 transaction per row with each product 1 hot encoded. For the sake of keeping the data set small, I\u2019m only looking at sales for France. However, in additional code below, I will compare these results to sales from Germany. Further country comparisons would be interesting to investigate.","e585d407":"## Building Association Rules Using Frequent Itemset\n\nThe final step is to generate the rules with their corresponding support, confidence and lift:","2034b64a":"There are a lot of zeros in the data but we also need to make sure any positive values are converted to a 1 and anything less the 0 is set to 0. This step will complete the one hot encoding of the data and remove the postage column (since that charge is not one we wish to explore):","f02c17b0":"## Preprocessing\n\nThere is a little cleanup, we need to do. First, some of the descriptions have spaces that need to be removed. We\u2019ll also drop the rows that don\u2019t have invoice numbers and remove the credit transactions (those with invoice numbers containing C).","70ce87cc":"## Filtering Rules Dataframe\n\nNow, the tricky part is figuring out what this tells us. For instance, we can see that there are quite a few rules with a high lift value which means that it occurs more frequently than would be expected given the number of transaction and product combinations. We can also see several where the confidence is high as well. This part of the analysis is where the domain knowledge will come in handy.\n\nWe can filter the dataframe using standard pandas code. In this case, look for a large lift (6) and high confidence (.8):","54e844d1":"# Imports","06ed5fa7":"## Generate Frequent Itemsets\n\nNow that the data is structured properly, we can generate frequent item sets that have a support of at least 7% (this number was chosen so that I could get enough useful examples):"}}