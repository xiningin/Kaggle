{"cell_type":{"c6e5b487":"code","c640a676":"code","aa0c67d1":"code","c65f12e6":"code","26800b15":"code","62734867":"code","c19befec":"code","435849f5":"code","be0c808e":"code","1a2600b7":"code","5404a3cf":"code","cf08a964":"markdown"},"source":{"c6e5b487":"debug = False\nfast_submit = False","c640a676":"import numpy as np\n\nfrom matplotlib import pyplot as plt\nimport matplotlib as mpl\n\n\ndef show_sample(sample):\n    \"\"\"Shows the sample with tasks and answers\"\"\"\n    print(\"Train:\")\n    for i in range(len(sample[\"train\"])):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(121)\n        ax1.matshow(np.array(sample[\"train\"][i][\"input\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        ax2 = fig.add_subplot(122)\n        ax2.matshow(np.array(sample[\"train\"][i][\"output\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        plt.show()\n\n    print(\"Test:\")\n    for i in range(len(sample[\"test\"])):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(121)\n        ax1.matshow(np.array(sample[\"test\"][i][\"input\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        if \"output\" in sample[\"test\"][i]:\n            ax2 = fig.add_subplot(122)\n            ax2.matshow(np.array(sample[\"test\"][i][\"output\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        plt.show()\n\n\ndef matrix2answer(array):\n    s = \"|\"\n    for i in range(array.shape[0]):\n        for j in range(array.shape[1]):\n            s = s + str(int(array[i, j]))\n        s = s + \"|\"\n    return str(s)","aa0c67d1":"import json\nimport time\n\nimport numpy as np\n\nfrom scipy import ndimage\nfrom scipy.stats import mode\n\n\ndef find_grid(image, frame=False, possible_colors=None):\n    \"\"\"Looks for the grid in image and returns color and size\"\"\"\n    grid_color = -1\n    size = [1, 1]\n\n    if possible_colors is None:\n        possible_colors = list(range(10))\n\n    for color in possible_colors:\n        for i in range(size[0] + 1, image.shape[0] \/\/ 2 + 1):\n            if (image.shape[0] + 1) % i == 0:\n                step = (image.shape[0] + 1) \/\/ i\n                if (image[(step - 1) :: step] == color).all():\n                    size[0] = i\n                    grid_color = color\n        for i in range(size[1] + 1, image.shape[1] \/\/ 2 + 1):\n            if (image.shape[1] + 1) % i == 0:\n                step = (image.shape[1] + 1) \/\/ i\n                if (image[:, (step - 1) :: step] == color).all():\n                    size[1] = i\n                    grid_color = color\n\n    if grid_color == -1 and not frame:\n        color_candidate = image[0, 0]\n        if (\n            (image[0] == color_candidate).all()\n            and (image[-1] == color_candidate).all()\n            and (image[:, -1] == color_candidate).all()\n            and (image[:, 0] == color_candidate).all()\n        ):\n            grid_color, size, _ = find_grid(\n                image[1 : image.shape[0] - 1, 1 : image.shape[1] - 1], frame=True, possible_colors=[color_candidate]\n            )\n            return grid_color, size, frame\n        else:\n            return grid_color, size, frame\n\n    return grid_color, size, frame\n\n\ndef find_color_boundaries(array, color):\n    \"\"\"Looks for the boundaries of any color and returns them\"\"\"\n    if (array == color).any() == False:\n        return None\n    ind_0 = np.arange(array.shape[0])\n    ind_1 = np.arange(array.shape[1])\n\n    temp_0 = ind_0[(array == color).max(axis=1)]  # axis 0\n    min_0, max_0 = temp_0.min(), temp_0.max()\n\n    temp_1 = ind_1[(array == color).max(axis=0)]  # axis 1\n    min_1, max_1 = temp_1.min(), temp_1.max()\n\n    return min_0, max_0, min_1, max_1\n\n\ndef get_color_max(image, color):\n    \"\"\"Returns the part of the image inside the color boundaries\"\"\"\n    boundaries = find_color_boundaries(image, color)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_pixel(image, i, j):\n    \"\"\"Returns the pixel by coordinates\"\"\"\n    if i >= image.shape[0] or j >= image.shape[1]:\n        return 1, None\n    return 0, image[i : i + 1, j : j + 1]\n\n\ndef get_pixel_fixed(image, i):\n    return 0, np.array([[i]])\n\n\ndef get_grid(image, grid_size, cell, frame=False):\n    \"\"\" returns the particular cell form the image with grid\"\"\"\n    if frame:\n        return get_grid(image[1 : image.shape[0] - 1, 1 : image.shape[1] - 1], grid_size, cell, frame=False)\n    if cell[0] >= grid_size[0] or cell[1] >= grid_size[1]:\n        return 1, None\n    steps = ((image.shape[0] + 1) \/\/ grid_size[0], (image.shape[1] + 1) \/\/ grid_size[1])\n    block = image[steps[0] * cell[0] : steps[0] * (cell[0] + 1) - 1, steps[1] * cell[1] : steps[1] * (cell[1] + 1) - 1]\n    return 0, block\n\n\ndef get_half(image, side):\n    \"\"\" returns the half of the image\"\"\"\n    if side not in [\"l\", \"r\", \"t\", \"b\", \"long1\", \"long2\"]:\n        return 1, None\n    if side == \"l\":\n        return 0, image[:, : (image.shape[1]) \/\/ 2]\n    elif side == \"r\":\n        return 0, image[:, -((image.shape[1]) \/\/ 2) :]\n    elif side == \"b\":\n        return 0, image[-((image.shape[0]) \/\/ 2) :, :]\n    elif side == \"t\":\n        return 0, image[: (image.shape[0]) \/\/ 2, :]\n    elif side == \"long1\":\n        if image.shape[0] >= image.shape[1]:\n            return get_half(image, \"t\")\n        else:\n            return get_half(image, \"l\")\n    elif side == \"long2\":\n        if image.shape[0] >= image.shape[1]:\n            return get_half(image, \"b\")\n        else:\n            return get_half(image, \"r\")\n\n\ndef get_corner(image, side):\n    \"\"\" returns the half of the image\"\"\"\n    if side not in [\"tl\", \"tr\", \"bl\", \"br\"]:\n        return 1, None\n    size = (image.shape[0]) \/\/ 2, (image.shape[1]) \/\/ 2\n    if side == \"tl\":\n        return 0, image[size[0] :, -size[1] :]\n    if side == \"tr\":\n        return 0, image[size[0] :, : size[1]]\n    if side == \"bl\":\n        return 0, image[: -size[0], : size[1]]\n    if side == \"br\":\n        return 0, image[: -size[0], -size[1] :]\n\n\ndef get_k_part(image, num, k):\n    if image.shape[0] > image.shape[1]:\n        max_axis = 0\n        max_shape = image.shape[0]\n    else:\n        max_axis = 1\n        max_shape = image.shape[1]\n\n    if max_shape % num != 0:\n        return 1, None\n    size = max_shape \/\/ num\n\n    if max_axis == 0:\n        return 0, image[k * size : (k + 1) * size]\n    else:\n        return 0, image[:, k * size : (k + 1) * size]\n\n\ndef get_rotation(image, k):\n    return 0, np.rot90(image, k)\n\n\ndef get_transpose(image):\n    return 0, np.transpose(image)\n\n\ndef get_roll(image, shift, axis):\n    return 0, np.roll(image, shift=shift, axis=axis)\n\n\ndef get_cut_edge(image, l, r, t, b):\n    \"\"\"deletes pixels from some sided of an image\"\"\"\n    return 0, image[t : image.shape[0] - b, l : image.shape[1] - r]\n\n\ndef get_resize(image, scale):\n    \"\"\" resizes image according to scale\"\"\"\n    if isinstance(scale, int):\n        if image.shape[0] % scale != 0 or image.shape[1] % scale != 0:\n            return 1, None\n        if image.shape[0] < scale or image.shape[1] < scale:\n            return 2, None\n\n        arrays = []\n        size = image.shape[0] \/\/ scale, image.shape[1] \/\/ scale\n        for i in range(scale):\n            for j in range(scale):\n                arrays.append(image[i::scale, j::scale])\n\n        result = mode(np.stack(arrays), axis=0).mode[0]\n    else:\n        size = int(image.shape[0] \/ scale), int(image.shape[1] \/ scale)\n        result = []\n        for i in range(size[0]):\n            result.append([])\n            for j in range(size[1]):\n                result[-1].append(image[int(i * scale), int(j * scale)])\n\n        result = np.uint8(result)\n\n    return 0, result\n\n\ndef get_resize_to(image, size_x, size_y):\n    \"\"\" resizes image according to scale\"\"\"\n    scale_x = image.shape[0] \/\/ size_x\n    scale_y = image.shape[1] \/\/ size_y\n    if scale_x == 0 or scale_y == 0:\n        return 3, None\n    if image.shape[0] % scale_x != 0 or image.shape[1] % scale_y != 0:\n        return 1, None\n    if image.shape[0] < scale_x or image.shape[1] < scale_y:\n        return 2, None\n\n    arrays = []\n    for i in range(scale_x):\n        for j in range(scale_y):\n            arrays.append(image[i::scale_x, j::scale_y])\n\n    result = mode(np.stack(arrays), axis=0).mode[0]\n    if result.max() > 10:\n        print(1)\n\n    return 0, result\n\n\ndef get_reflect(image, side):\n    \"\"\" returns images generated by reflections of the input\"\"\"\n    if side not in [\"r\", \"l\", \"t\", \"b\", \"rt\", \"rb\", \"lt\", \"lb\"]:\n        return 1, None\n    try:\n        if side == \"r\":\n            result = np.zeros((image.shape[0], image.shape[1] * 2 - 1))\n            result[:, : image.shape[1]] = image\n            result[:, -image.shape[1] :] = image[:, ::-1]\n        elif side == \"l\":\n            result = np.zeros((image.shape[0], image.shape[1] * 2 - 1))\n            result[:, : image.shape[1]] = image[:, ::-1]\n            result[:, -image.shape[1] :] = image\n        elif side == \"b\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1]))\n            result[: image.shape[0], :] = image\n            result[-image.shape[0] :, :] = image[::-1]\n        elif side == \"t\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1]))\n            result[: image.shape[0], :] = image[::-1]\n            result[-image.shape[0] :, :] = image\n\n        elif side == \"rb\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image\n            result[: image.shape[0], -image.shape[1] :] = image[:, ::-1]\n            result[-image.shape[0] :, : image.shape[1]] = image[::-1, :]\n            result[-image.shape[0] :, -image.shape[1] :] = image[::-1, ::-1]\n\n        elif side == \"rt\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image[::-1, :]\n            result[: image.shape[0], -image.shape[1] :] = image[::-1, ::-1]\n            result[-image.shape[0] :, : image.shape[1]] = image\n            result[-image.shape[0] :, -image.shape[1] :] = image[:, ::-1]\n\n        elif side == \"lt\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image[::-1, ::-1]\n            result[: image.shape[0], -image.shape[1] :] = image[::-1, :]\n            result[-image.shape[0] :, : image.shape[1]] = image[:, ::-1]\n            result[-image.shape[0] :, -image.shape[1] :] = image\n\n        elif side == \"lb\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image[:, ::-1]\n            result[: image.shape[0], -image.shape[1] :] = image\n            result[-image.shape[0] :, : image.shape[1]] = image[::-1, ::-1]\n            result[-image.shape[0] :, -image.shape[1] :] = image[::-1, :]\n    except:\n        return 2, None\n\n    return 0, result\n\n\ndef get_color_swap(image, color_1, color_2):\n    \"\"\"swapping two colors\"\"\"\n    if not (image == color_1).any() and not (image == color_2).any():\n        return 1, None\n    result = image.copy()\n    result[image == color_1] = color_2\n    result[image == color_2] = color_1\n    return 0, result\n\n\ndef get_cut(image, x1, y1, x2, y2):\n    if x1 >= x2 or y1 >= y2:\n        return 1, None\n    else:\n        return 0, image[x1:x2, y1:y2]\n\n\ndef get_min_block(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    min_n = np.argmin(sizes) + 1\n\n    boundaries = find_color_boundaries(masks, min_n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_min_block_mask(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    min_n = np.argmin(sizes) + 1\n    return 0, masks == min_n\n\n\ndef get_max_block_mask(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    min_n = np.argmax(sizes) + 1\n    return 0, masks == min_n\n\n\ndef get_max_block(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    max_n = np.argmax(sizes) + 1\n\n    boundaries = find_color_boundaries(masks, max_n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_block_with_side_colors(image, block_type=\"min\", structure=0):\n    if structure == 0:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n\n    if n_masks == 0:\n        return 2, None\n\n    unique_nums = []\n    for i in range(1, n_masks + 1):\n        unique = np.unique(image[masks == i])\n        unique_nums.append(len(unique))\n\n    if block_type == \"min\":\n        n = np.argmin(unique_nums) + 1\n    else:\n        n = np.argmax(unique_nums) + 1\n\n    boundaries = find_color_boundaries(masks, n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_block_with_side_colors_count(image, block_type=\"min\", structure=0):\n    if structure == 0:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    if n_masks == 0:\n        return 2, None\n\n    unique_nums = []\n    for i in range(1, n_masks + 1):\n        unique, counts = np.unique(image[masks == i], return_counts=True)\n        unique_nums.append(min(counts))\n\n    if block_type == \"min\":\n        n = np.argmin(unique_nums) + 1\n    else:\n        n = np.argmax(unique_nums) + 1\n\n    boundaries = find_color_boundaries(masks, n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_color(color_dict, colors):\n    \"\"\" retrive the absolute number corresponding a color set by color_dict\"\"\"\n    for i, color in enumerate(colors):\n        for data in color:\n            equal = True\n            for k, v in data.items():\n                if k not in color_dict or v != color_dict[k]:\n                    equal = False\n                    break\n            if equal:\n                return i\n    return -1\n\n\ndef get_mask_from_block(image, color):\n    if color in np.unique(image, return_counts=False):\n        return 0, image == color\n    else:\n        return 1, None\n\n\ndef get_background(image, color):\n    return 0, np.uint8(np.ones_like(image) * color)\n\n\ndef get_mask_from_max_color_coverage(image, color):\n    if color in np.unique(image, return_counts=False):\n        boundaries = find_color_boundaries(image, color)\n        result = (image.copy() * 0).astype(bool)\n        result[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1] = True\n        return 0, image == color\n    else:\n        return 1, None\n\n\ndef add_unique_colors(image, result, colors=None):\n    \"\"\"adds information about colors unique for some parts of the image\"\"\"\n    if colors is None:\n        colors = np.unique(image)\n\n    unique_side = [False for i in range(10)]\n    unique_corner = [False for i in range(10)]\n\n    half_size = (((image.shape[0] + 1) \/\/ 2), ((image.shape[1] + 1) \/\/ 2))\n    for (image_part, side, unique_list) in [\n        (image[: half_size[0]], \"bottom\", unique_side),\n        (image[-half_size[0] :], \"top\", unique_side),\n        (image[:, : half_size[1]], \"right\", unique_side),\n        (image[:, -half_size[1] :], \"left\", unique_side),\n        (image[-half_size[0] :, -half_size[1] :], \"tl\", unique_corner),\n        (image[-half_size[0] :, : half_size[1]], \"tr\", unique_corner),\n        (image[: half_size[0], : half_size[1]], \"br\", unique_corner),\n        (image[: half_size[0], -half_size[1] :], \"left\", unique_corner),\n    ]:\n        unique = np.uint8(np.unique(image_part))\n        if len(unique) == len(colors) - 1:\n            color = [x for x in colors if x not in unique][0]\n            unique_list[color] = True\n            result[\"colors\"][color].append({\"type\": \"unique\", \"side\": side})\n\n    for i in range(10):\n        if unique_corner[i]:\n            result[\"colors\"][i].append({\"type\": \"unique\", \"side\": \"corner\"})\n        if unique_side[i]:\n            result[\"colors\"][i].append({\"type\": \"unique\", \"side\": \"side\"})\n        if unique_side[i] or unique_corner[i]:\n            result[\"colors\"][i].append({\"type\": \"unique\", \"side\": \"any\"})\n\n    return\n\n\ndef add_center_color(image, result, colors=None):\n    i = image.shape[0] \/\/ 4\n    j = image.shape[1] \/\/ 4\n    center = image[i : image.shape[0] - i, j : image.shape[1] - j]\n    values, counts = np.unique(center, return_counts=True)\n    if len(counts) > 0:\n        ind = np.argmax(counts)\n        color = values[ind]\n        result[\"colors\"][color].append({\"type\": \"center\"})\n\n\ndef get_color_scheme(image, target_image=None, params=None):\n    \"\"\"processes original image and returns dict color scheme\"\"\"\n    result = {\n        \"grid_color\": -1,\n        \"colors\": [[], [], [], [], [], [], [], [], [], []],\n        \"colors_sorted\": [],\n        \"grid_size\": [1, 1],\n    }\n\n    if params is None:\n        params = [\"coverage\", \"unique\", \"corners\", \"top\", \"grid\"]\n\n    # preparing colors info\n\n    unique, counts = np.unique(image, return_counts=True)\n    colors = [unique[i] for i in np.argsort(counts)]\n\n    result[\"colors_sorted\"] = colors\n    result[\"colors_num\"] = len(colors)\n\n    for color in range(10):\n        # use abs color value - same for any image\n        result[\"colors\"][color].append({\"type\": \"abs\", \"k\": color})\n\n    if len(colors) == 2 and 0 in colors:\n        result[\"colors\"][[x for x in colors if x != 0][0]].append({\"type\": \"non_zero\"})\n\n    if \"coverage\" in params:\n        for k, color in enumerate(colors):\n            # use k-th colour (sorted by presence on image)\n            result[\"colors\"][color].append({\"type\": \"min\", \"k\": k})\n            # use k-th colour (sorted by presence on image)\n            result[\"colors\"][color].append({\"type\": \"max\", \"k\": len(colors) - k - 1})\n\n    if \"unique\" in params:\n        add_unique_colors(image, result, colors=None)\n        add_center_color(image, result)\n\n    if \"corners\" in params:\n        # colors in the corners of images\n        result[\"colors\"][image[0, 0]].append({\"type\": \"corner\", \"side\": \"tl\"})\n        result[\"colors\"][image[0, -1]].append({\"type\": \"corner\", \"side\": \"tr\"})\n        result[\"colors\"][image[-1, 0]].append({\"type\": \"corner\", \"side\": \"bl\"})\n        result[\"colors\"][image[-1, -1]].append({\"type\": \"corner\", \"side\": \"br\"})\n\n    if \"top\" in params:\n        # colors that are on top of other and have full vertical on horizontal line\n        for k in range(10):\n            mask = image == k\n            is_on_top0 = mask.min(axis=0).any()\n            is_on_top1 = mask.min(axis=1).any()\n            if is_on_top0:\n                result[\"colors\"][k].append({\"type\": \"on_top\", \"side\": \"0\"})\n            if is_on_top1:\n                result[\"colors\"][k].append({\"type\": \"on_top\", \"side\": \"1\"})\n            if is_on_top1 or is_on_top0:\n                result[\"colors\"][k].append({\"type\": \"on_top\", \"side\": \"any\"})\n\n    if \"grid\" in params:\n        grid_color, grid_size, frame = find_grid(image)\n        if grid_color >= 0:\n            result[\"grid_color\"] = grid_color\n            result[\"grid_size\"] = grid_size\n            result[\"grid_frame\"] = frame\n            result[\"colors\"][grid_color].append({\"type\": \"grid\"})\n\n    return result\n\n\ndef add_block(target_dict, image, params_list):\n    array_hash = hash(matrix2answer(image))\n    if array_hash not in target_dict[\"arrays\"]:\n        target_dict[\"arrays\"][array_hash] = {\"array\": image, \"params\": []}\n\n    for params in params_list:\n        params_hash = get_dict_hash(params)\n        target_dict[\"arrays\"][array_hash][\"params\"].append(params)\n        target_dict[\"params\"][params_hash] = array_hash\n\n\ndef get_original(image):\n    return 0, image\n\n\ndef get_inversed_colors(image):\n    unique = np.unique(image)\n    if len(unique) != 2:\n        return 1, None\n    result = image.copy()\n    result[image == unique[0]] = unique[1]\n    result[image == unique[1]] = unique[0]\n    return 0, result\n\n\ndef generate_blocks(image, result, max_time=600, max_blocks=200000, max_masks=200000, target_image=None, params=None):\n    all_params = [\n        \"initial\",\n        \"background\",\n        \"min_max_blocks\",\n        \"block_with_side_colors\",\n        \"max_area_covered\",\n        \"grid_cells\",\n        \"halves\",\n        \"corners\",\n        \"rotate\",\n        \"transpose\",\n        \"cut_edges\",\n        \"resize\",\n        \"reflect\",\n        \"cut_parts\",\n        \"swap_colors\",\n        \"k_part\",\n    ]\n\n    if not params:\n        params = all_params\n\n    start_time = time.time()\n\n    result[\"blocks\"] = {\"arrays\": {}, \"params\": {}}\n\n    if \"initial\" in params:\n        # starting with the original image\n        add_block(result[\"blocks\"], image, [[{\"type\": \"original\"}]])\n\n        # inverse colors\n        status, block = get_inversed_colors(image)\n        if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n            add_block(result[\"blocks\"], block, [[{\"type\": \"inversed_colors\"}]])\n\n    # adding min and max blocks\n    if (\n        (\"min_max_blocks\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        # print(\"min_max_blocks\")\n        for full in [True, False]:\n            status, block = get_max_block(image, full)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"max_block\", \"full\": full}]])\n\n    if (\n        (\"block_with_side_colors\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        # print(\"min_max_blocks\")\n        for block_type in [\"min\", \"max\"]:\n            for structure in [0, 1]:\n                status, block = get_block_with_side_colors(image, block_type, structure)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(\n                        result[\"blocks\"],\n                        block,\n                        [[{\"type\": \"block_with_side_colors\", \"block_type\": block_type, \"structure\": structure}]],\n                    )\n        for block_type in [\"min\", \"max\"]:\n            for structure in [0, 1]:\n                status, block = get_block_with_side_colors_count(image, block_type, structure)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(\n                        result[\"blocks\"],\n                        block,\n                        [[{\"type\": \"block_with_side_colors_count\", \"block_type\": block_type, \"structure\": structure}]],\n                    )\n    # print(sum([len(x['params']) for x in result['blocks']['arrays'].values()]))\n    # adding background\n    if (\"background\" in params) and (time.time() - start_time < max_time):\n        # print(\"background\")\n        for color in range(10):\n            status, block = get_background(image, color)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                params_list = []\n                for color_dict in result[\"colors\"][color].copy():\n                    params_list.append([{\"type\": \"background\", \"color\": color_dict}])\n                add_block(result[\"blocks\"], block, params_list)\n\n    # adding the max area covered by each color\n    if (\"max_area_covered\" in params) and (time.time() - start_time < max_time):\n        # print(\"max_area_covered\")\n        for color in result[\"colors_sorted\"]:\n            status, block = get_color_max(image, color)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                params_list = []\n                for color_dict in result[\"colors\"][color].copy():\n                    params_list.append([{\"type\": \"color_max\", \"color\": color_dict}])\n                add_block(result[\"blocks\"], block, params_list)\n\n    # adding grid cells\n    if (\n        (\"grid_cells\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        if result[\"grid_color\"] > 0:\n            for i in range(result[\"grid_size\"][0]):\n                for j in range(result[\"grid_size\"][1]):\n                    status, block = get_grid(image, result[\"grid_size\"], (i, j), frame=result[\"grid_frame\"])\n                    if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                        add_block(\n                            result[\"blocks\"],\n                            block,\n                            [\n                                [\n                                    {\n                                        \"type\": \"grid\",\n                                        \"grid_size\": result[\"grid_size\"],\n                                        \"cell\": [i, j],\n                                        \"frame\": result[\"grid_frame\"],\n                                    }\n                                ]\n                            ],\n                        )\n\n    # adding halves of the images\n    if (\"halves\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        for side in [\"l\", \"r\", \"t\", \"b\", \"long1\", \"long2\"]:\n            status, block = get_half(image, side=side)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"half\", \"side\": side}]])\n\n    # extracting pixels from image\n    if (\"pixels\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        for i in range(image.shape[0]):\n            for j in range(image.shape[1]):\n                status, block = get_pixel(image, i=i, j=j)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(result[\"blocks\"], block, [[{\"type\": \"pixel\", \"i\": i, \"j\": j}]])\n\n    # extracting pixels from image\n    if (\n        (\"pixel_fixed\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        for i in range(10):\n            status, block = get_pixel_fixed(image, i=i)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"pixel_fixed\", \"i\": i}]])\n\n    # adding halves of the images\n    if (\"k_part\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        for num in [3, 4]:\n            for k in range(num):\n                status, block = get_k_part(image, num=num, k=k)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(result[\"blocks\"], block, [[{\"type\": \"k_part\", \"num\": num, \"k\": k}]])\n\n    # adding corners of the images\n    if (\n        (\"corners\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        for side in [\"tl\", \"tr\", \"bl\", \"br\"]:\n            status, block = get_corner(image, side=side)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"corner\", \"side\": side}]])\n\n    main_blocks_num = len(result[\"blocks\"])\n\n    # rotate all blocks\n    if (\"rotate\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for k in range(1, 4):\n            for key, data in current_blocks.items():\n                status, block = get_rotation(data[\"array\"], k=k)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    params_list = [i + [{\"type\": \"rotation\", \"k\": k}] for i in data[\"params\"]]\n                    add_block(result[\"blocks\"], block, params_list)\n\n    # transpose all blocks\n    if (\n        (\"transpose\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for key, data in current_blocks.items():\n            status, block = get_transpose(data[\"array\"])\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                params_list = [i + [{\"type\": \"transpose\"}] for i in data[\"params\"]]\n                add_block(result[\"blocks\"], block, params_list)\n\n    # cut edges for all blocks\n    if (\n        (\"cut_edges\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for l, r, t, b in [\n            (1, 1, 1, 1),\n            (1, 0, 0, 0),\n            (0, 1, 0, 0),\n            (0, 0, 1, 0),\n            (0, 0, 0, 1),\n            (1, 1, 0, 0),\n            (1, 0, 0, 1),\n            (0, 0, 1, 1),\n            (0, 1, 1, 0),\n        ]:\n            if time.time() - start_time < max_time:\n                for key, data in current_blocks.items():\n                    status, block = get_cut_edge(data[\"array\"], l=l, r=r, t=t, b=b)\n                    if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                        params_list = [\n                            i + [{\"type\": \"cut_edge\", \"l\": l, \"r\": r, \"t\": t, \"b\": b}] for i in data[\"params\"]\n                        ]\n                        add_block(result[\"blocks\"], block, params_list)\n\n    # resize all blocks\n    if (\"resize\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for scale in [2, 3, 1 \/ 2, 1 \/ 3]:\n            for key, data in current_blocks.items():\n                status, block = get_resize(data[\"array\"], scale)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    params_list = [i + [{\"type\": \"resize\", \"scale\": scale}] for i in data[\"params\"]]\n                    add_block(result[\"blocks\"], block, params_list)\n\n        for size_x, size_y in [(2, 2), (3, 3)]:\n            for key, data in current_blocks.items():\n                status, block = get_resize_to(data[\"array\"], size_x, size_y)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    params_list = [\n                        i + [{\"type\": \"resize_to\", \"size_x\": size_x, \"size_y\": size_y}] for i in data[\"params\"]\n                    ]\n                    add_block(result[\"blocks\"], block, params_list)\n\n    # reflect all blocks\n    if (\n        (\"reflect\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for side in [\"r\", \"l\", \"t\", \"b\", \"rt\", \"rb\", \"lt\", \"lb\"]:\n            if time.time() - start_time < max_time:\n                for key, data in current_blocks.items():\n                    status, block = get_reflect(data[\"array\"], side)\n                    if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                        params_list = [i + [{\"type\": \"reflect\", \"side\": side}] for i in data[\"params\"]]\n                        add_block(result[\"blocks\"], block, params_list)\n\n    # cut some parts of images\n    if (\n        (\"cut_parts\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        max_x = image.shape[0]\n        max_y = image.shape[1]\n        min_block_size = 2\n        for x1 in range(0, max_x - min_block_size):\n            if time.time() - start_time < max_time:\n                if max_x - x1 <= min_block_size:\n                    continue\n                for x2 in range(x1 + min_block_size, max_x):\n                    for y1 in range(0, max_y - min_block_size):\n                        if max_y - y1 <= min_block_size:\n                            continue\n                        for y2 in range(y1 + min_block_size, max_y):\n                            status, block = get_cut(image, x1, y1, x2, y2)\n                            if status == 0:\n                                add_block(\n                                    result[\"blocks\"], block, [[{\"type\": \"cut\", \"x1\": x1, \"x2\": x2, \"y1\": y1, \"y2\": y2}]]\n                                )\n\n    list_param_list = []\n    list_blocks = []\n\n    # swap some colors\n    if (\n        (\"swap_colors\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for color_1 in range(9):\n            if time.time() - start_time < max_time:\n                for color_2 in range(color_1 + 1, 10):\n                    for key, data in current_blocks.items():\n                        status, block = get_color_swap(data[\"array\"], color_1, color_2)\n                        if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                            for color_dict_1 in result[\"colors\"][color_1].copy():\n                                for color_dict_2 in result[\"colors\"][color_2].copy():\n                                    list_param_list.append(\n                                        [\n                                            j\n                                            + [{\"type\": \"color_swap\", \"color_1\": color_dict_1, \"color_2\": color_dict_2}]\n                                            for j in data[\"params\"]\n                                        ]\n                                    )\n                                    list_blocks.append(block)\n\n    for block, params_list in zip(list_blocks, list_param_list):\n        add_block(result[\"blocks\"], block, params_list)\n\n    if time.time() - start_time > max_time:\n        print(\"Time is over\")\n    if len(result[\"blocks\"][\"arrays\"]) >= max_blocks:\n        print(\"Max number of blocks exceeded\")\n    return result\n\n\ndef generate_masks(image, result, max_time=600, max_blocks=200000, max_masks=200000, target_image=None, params=None):\n    start_time = time.time()\n\n    all_params = [\"initial_masks\", \"additional_masks\", \"coverage_masks\", \"min_max_masks\"]\n\n    if not params:\n        params = all_params\n\n    result[\"masks\"] = {\"arrays\": {}, \"params\": {}}\n\n    # making one mask for each generated block\n    current_blocks = result[\"blocks\"][\"arrays\"].copy()\n    if (\"initial_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for key, data in current_blocks.items():\n            for color in result[\"colors_sorted\"]:\n                status, mask = get_mask_from_block(data[\"array\"], color)\n                if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n                    params_list = [\n                        {\"operation\": \"none\", \"params\": {\"block\": i, \"color\": color_dict}}\n                        for i in data[\"params\"]\n                        for color_dict in result[\"colors\"][color]\n                    ]\n                    add_block(result[\"masks\"], mask, params_list)\n\n    initial_masks = result[\"masks\"][\"arrays\"].copy()\n    if (\"initial_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for key, mask in initial_masks.items():\n            add_block(\n                result[\"masks\"],\n                np.logical_not(mask[\"array\"]),\n                [{\"operation\": \"not\", \"params\": param[\"params\"]} for param in mask[\"params\"]],\n            )\n\n    initial_masks = result[\"masks\"][\"arrays\"].copy()\n    masks_to_add = []\n    processed = []\n    if (\"additional_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for key1, mask1 in initial_masks.items():\n            processed.append(key1)\n            if time.time() - start_time < max_time * 2 and (\n                target_image is None\n                or (target_image.shape == mask1[\"array\"].shape)\n                or (target_image.shape == mask1[\"array\"].T.shape)\n            ):\n                for key2, mask2 in initial_masks.items():\n                    if key2 in processed:\n                        continue\n                    if (mask1[\"array\"].shape[0] == mask2[\"array\"].shape[0]) and (\n                        mask1[\"array\"].shape[1] == mask2[\"array\"].shape[1]\n                    ):\n                        params_list_and = []\n                        params_list_or = []\n                        params_list_xor = []\n                        for param1 in mask1[\"params\"]:\n                            for param2 in mask2[\"params\"]:\n                                params_list_and.append(\n                                    {\"operation\": \"and\", \"params\": {\"mask1\": param1, \"mask2\": param2}}\n                                )\n                                params_list_or.append({\"operation\": \"or\", \"params\": {\"mask1\": param1, \"mask2\": param2}})\n                                params_list_xor.append(\n                                    {\"operation\": \"xor\", \"params\": {\"mask1\": param1, \"mask2\": param2}}\n                                )\n                        masks_to_add.append(\n                            (result[\"masks\"], np.logical_and(mask1[\"array\"], mask2[\"array\"]), params_list_and)\n                        )\n                        masks_to_add.append(\n                            (result[\"masks\"], np.logical_or(mask1[\"array\"], mask2[\"array\"]), params_list_or)\n                        )\n                        masks_to_add.append(\n                            (result[\"masks\"], np.logical_xor(mask1[\"array\"], mask2[\"array\"]), params_list_xor)\n                        )\n\n    for path, array, params_list in masks_to_add:\n        add_block(path, array, params_list)\n    # coverage_masks\n    if (\"coverage_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for color in result[\"colors_sorted\"][1:]:\n            status, mask = get_mask_from_max_color_coverage(image, color)\n            if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n                params_list = [\n                    {\"operation\": \"coverage\", \"params\": {\"color\": color_dict}}\n                    for color_dict in result[\"colors\"][color].copy()\n                ]\n                add_block(result[\"masks\"], mask, params_list)\n    # coverage_masks\n    if (\"min_max_masks\" in params) and (time.time() - start_time < max_time * 2):\n        status, mask = get_min_block_mask(image)\n        if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n            params_list = [{\"operation\": \"min_block\"}]\n            add_block(result[\"masks\"], mask, params_list)\n        status, mask = get_max_block_mask(image)\n        if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n            params_list = [{\"operation\": \"max_block\"}]\n            add_block(result[\"masks\"], mask, params_list)\n    if time.time() - start_time > max_time:\n        print(\"Time is over\")\n    if len(result[\"blocks\"][\"arrays\"]) >= max_masks:\n        print(\"Max number of masks exceeded\")\n    return result\n\n\ndef process_image(\n    image, max_time=600, max_blocks=200000, max_masks=200000, target_image=None, params=None, color_params=None\n):\n    \"\"\"processes the original image and returns dict with structured image blocks\"\"\"\n\n    result = get_color_scheme(image, target_image=target_image, params=color_params)\n    result = generate_blocks(image, result, max_time, max_blocks, max_masks, target_image, params, color_params)\n    result = generate_masks(image, result, max_time, max_blocks, max_masks, target_image, params, color_params)\n\n    return result\n\n\ndef get_mask_from_block_params(image, params, block_cache=None, mask_cache=None, color_scheme=None):\n    if mask_cache is None:\n        mask_cache = {{\"arrays\": {}, \"params\": {}}}\n    dict_hash = get_dict_hash(params)\n    if dict_hash in mask_cache:\n        mask = mask_cache[\"arrays\"][mask_cache[\"params\"][dict_hash]][\"array\"]\n        if len(mask) == 0:\n            return 1, None\n        else:\n            return 0, mask\n\n    if params[\"operation\"] == \"none\":\n        status, block = get_predict(image, params[\"params\"][\"block\"], block_cache, color_scheme)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 1, None\n        if not color_scheme:\n            color_scheme = get_color_scheme(image)\n        color_num = get_color(params[\"params\"][\"color\"], color_scheme[\"colors\"])\n        if color_num < 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 2, None\n        status, mask = get_mask_from_block(block, color_num)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"not\":\n        new_params = params.copy()\n        new_params[\"operation\"] = \"none\"\n        status, mask = get_mask_from_block_params(\n            image, new_params, block_cache=block_cache, color_scheme=color_scheme, mask_cache=mask_cache\n        )\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 3, None\n        mask = np.logical_not(mask)\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] in [\"and\", \"or\", \"xor\"]:\n        new_params = params[\"params\"][\"mask1\"]\n        status, mask1 = get_mask_from_block_params(\n            image, new_params, block_cache=block_cache, color_scheme=color_scheme, mask_cache=mask_cache\n        )\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 4, None\n        new_params = params[\"params\"][\"mask2\"]\n        status, mask2 = get_mask_from_block_params(\n            image, new_params, block_cache=block_cache, color_scheme=color_scheme, mask_cache=mask_cache\n        )\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 5, None\n        if mask1.shape[0] != mask2.shape[0] or mask1.shape[1] != mask2.shape[1]:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        if params[\"operation\"] == \"and\":\n            mask = np.logical_and(mask1, mask2)\n        elif params[\"operation\"] == \"or\":\n            mask = np.logical_or(mask1, mask2)\n        elif params[\"operation\"] == \"xor\":\n            mask = np.logical_xor(mask1, mask2)\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"coverage\":\n        if not color_scheme:\n            color_scheme = get_color_scheme(image)\n        color_num = get_color(params[\"params\"][\"color\"], color_scheme[\"colors\"])\n        if color_num < 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 2, None\n        status, mask = get_mask_from_max_color_coverage(image, color_num)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"min_block\":\n        status, mask = get_min_block_mask(image)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"max_block\":\n        status, mask = get_max_block_mask(image)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n\n\ndef get_dict_hash(d):\n    return hash(json.dumps(d, sort_keys=True))\n\n\ndef get_predict(image, transforms, block_cache=None, color_scheme=None):\n    \"\"\" applies the list of transforms to the image\"\"\"\n    params_hash = get_dict_hash(transforms)\n    if params_hash in block_cache[\"params\"]:\n        if block_cache[\"params\"][params_hash] is None:\n            return 1, None\n        else:\n            return 0, block_cache[\"arrays\"][block_cache[\"params\"][params_hash]][\"array\"]\n\n    if not color_scheme:\n        color_scheme = get_color_scheme(image)\n\n    if len(transforms) > 1:\n        status, previous_image = get_predict(image, transforms[:-1], block_cache=block_cache, color_scheme=color_scheme)\n        if status != 0:\n            return status, None\n    else:\n        previous_image = image\n\n    transform = transforms[-1]\n    function = globals()[\"get_\" + transform[\"type\"]]\n    params = transform.copy()\n    params.pop(\"type\")\n    for color_name in [\"color\", \"color_1\", \"color_2\"]:\n        if color_name in params:\n            params[color_name] = get_color(params[color_name], color_scheme[\"colors\"])\n            if params[color_name] < 0:\n                return 2, None\n    status, result = function(previous_image, **params)\n\n    if status != 0 or len(result) == 0 or len(result[0]) == 0:\n        block_cache[\"params\"][params_hash] = None\n        return 1, None\n\n    add_block(block_cache, result, [transforms])\n    return 0, result\n\n\ndef filter_colors(sample):\n    # filtering colors, that are not present in at least one of the images\n    all_colors = []\n    for color_scheme1 in sample[\"train\"]:\n        list_of_colors = [get_dict_hash(color_dict) for i in range(10) for color_dict in color_scheme1[\"colors\"][i]]\n        all_colors.append(list_of_colors)\n    for j in range(1, len(sample[\"train\"])):\n        all_colors[0] = [x for x in all_colors[0] if x in all_colors[j]]\n    keep_colors = set(all_colors[0])\n\n    for color_scheme1 in sample[\"train\"]:\n        for i in range(10):\n            j = 0\n            while j < len(color_scheme1[\"colors\"][i]):\n                if get_dict_hash(color_scheme1[\"colors\"][i][j]) in keep_colors:\n                    j += 1\n                else:\n                    del color_scheme1[\"colors\"][i][j]\n\n    delete_colors = []\n    color_scheme0 = sample[\"train\"][0]\n    for i in range(10):\n        if len(color_scheme0[\"colors\"][i]) > 1:\n            for j, color_dict1 in enumerate(color_scheme0[\"colors\"][i][::-1][:-1]):\n                hash1 = get_dict_hash(color_dict1)\n                delete = True\n                for color_dict2 in color_scheme0[\"colors\"][i][::-1][j + 1 :]:\n                    hash2 = get_dict_hash(color_dict2)\n                    for color_scheme1 in list(sample[\"train\"][1:]) + list(sample[\"test\"]):\n                        found = False\n                        for k in range(10):\n                            hash_array = [get_dict_hash(color_dict) for color_dict in color_scheme1[\"colors\"][k]]\n                            if hash1 in hash_array and hash2 in hash_array:\n                                found = True\n                                break\n                        if not found:\n                            delete = False\n                            break\n                    if delete:\n                        delete_colors.append(hash1)\n                        break\n\n    for color_scheme1 in sample[\"train\"]:\n        for i in range(10):\n            j = 0\n            while j < len(color_scheme1[\"colors\"][i]):\n                if get_dict_hash(color_scheme1[\"colors\"][i][j]) in delete_colors:\n                    del color_scheme1[\"colors\"][i][j]\n                else:\n                    j += 1\n    return\n\n\ndef filter_blocks(sample, arrays_type=\"blocks\"):\n    delete_blocks = []\n    list_of_lists_of_sets = []\n    for arrays_list in [x[arrays_type][\"arrays\"].values() for x in sample[\"train\"][1:]] + [\n        x[arrays_type][\"arrays\"].values() for x in sample[\"test\"]\n    ]:\n        list_of_lists_of_sets.append([])\n        for array in arrays_list:\n            list_of_lists_of_sets[-1].append({get_dict_hash(params_dict) for params_dict in array[\"params\"]})\n\n    for initial_array in sample[\"train\"][0][arrays_type][\"arrays\"].values():\n        if len(initial_array[\"params\"]) > 1:\n            for j, params_dict1 in enumerate(initial_array[\"params\"][::-1][:-1]):\n                hash1 = get_dict_hash(params_dict1)\n                delete = True\n                for params_dict1 in initial_array[\"params\"][::-1][j + 1 :]:\n                    hash2 = get_dict_hash(params_dict1)\n                    for lists_of_sets in list_of_lists_of_sets:\n                        found = False\n                        for hash_set in lists_of_sets:\n                            if hash1 in hash_set and hash2 in hash_set:\n                                found = True\n                                break\n                        if not found:\n                            delete = False\n                            break\n                    if delete:\n                        delete_blocks.append(hash1)\n                        break\n\n    for arrays_list in [x[arrays_type][\"arrays\"].values() for x in sample[\"train\"]] + [\n        x[arrays_type][\"arrays\"].values() for x in sample[\"test\"]\n    ]:\n        for array in arrays_list:\n            params_list = array[\"params\"]\n            j = 0\n            while j < len(params_list):\n                if get_dict_hash(params_list[j]) in delete_blocks:\n                    del params_list[j]\n                else:\n                    j += 1\n    return\n\n\ndef extract_target_blocks(sample, color_params=None):\n    target_blocks_cache = []\n    params = [\"initial\", \"block_with_side_colors\", \"min_max_blocks\", \"max_area_covered\", \"cut_parts\"]\n    for n in range(len(sample[\"train\"])):\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        target_blocks_cache.append(get_color_scheme(target_image, params=color_params))\n        target_blocks_cache[-1].update(generate_blocks(target_image, target_blocks_cache[-1], params=params))\n    final_arrays = list(\n        set.intersection(\n            *[set(target_blocks_cache[n][\"blocks\"][\"arrays\"].keys()) for n in range(len(target_blocks_cache))]\n        )\n    )\n    for i, key in enumerate(final_arrays):\n        for n in range(len(sample[\"train\"])):\n            params_list = [[{\"type\": \"target\", \"k\": i}]]\n            add_block(\n                sample[\"train\"][n][\"blocks\"], target_blocks_cache[0][\"blocks\"][\"arrays\"][key][\"array\"], params_list\n            )\n        for n in range(len(sample[\"test\"])):\n            params_list = [[{\"type\": \"target\", \"k\": i}]]\n            add_block(sample[\"test\"][n][\"blocks\"], target_blocks_cache[0][\"blocks\"][\"arrays\"][key][\"array\"], params_list)\n\n\ndef preprocess_sample(sample, params=None, color_params=None, process_whole_ds=False):\n    \"\"\" make the whole preprocessing for particular sample\"\"\"\n\n    for n, image in enumerate(sample[\"train\"]):\n        original_image = np.uint8(image[\"input\"])\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        sample[\"train\"][n].update(get_color_scheme(original_image, target_image=target_image, params=color_params))\n    for n, image in enumerate(sample[\"test\"]):\n        original_image = np.uint8(image[\"input\"])\n        sample[\"test\"][n].update(get_color_scheme(original_image, params=color_params))\n\n    filter_colors(sample)\n\n    for n, image in enumerate(sample[\"train\"]):\n        original_image = np.uint8(image[\"input\"])\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        sample[\"train\"][n].update(\n            generate_blocks(original_image, sample[\"train\"][n], target_image=target_image, params=params)\n        )\n    for n, image in enumerate(sample[\"test\"]):\n        original_image = np.uint8(image[\"input\"])\n        sample[\"test\"][n].update(generate_blocks(original_image, sample[\"test\"][n], params=params))\n\n    if \"target\" in params:\n        extract_target_blocks(sample, color_params)\n    filter_blocks(sample)\n\n    for n, image in enumerate(sample[\"train\"]):\n        original_image = np.uint8(image[\"input\"])\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        sample[\"train\"][n].update(\n            generate_masks(original_image, sample[\"train\"][n], target_image=target_image, params=params)\n        )\n    for n, image in enumerate(sample[\"test\"]):\n        original_image = np.uint8(image[\"input\"])\n        sample[\"test\"][n].update(generate_masks(original_image, sample[\"test\"][n], params=params))\n\n    return sample\n","c65f12e6":"import numpy as np\n\n\ndef filter_list_of_dicts(list1, list2):\n    \"\"\"Returns the intersection of two lists of dicts\"\"\"\n    set_of_hashes = {get_dict_hash(item1) for item1 in list1}\n    final_list = []\n    for item2 in list2:\n        if get_dict_hash(item2) in set_of_hashes:\n            final_list.append(item2)\n    return final_list\n\n\ndef swap_two_colors(image):\n    \"\"\"sawaps two colors\"\"\"\n    unique = np.unique(image)\n    if len(unique) != 2:\n        return 1, None\n    result = image.copy()\n    result[image == unique[0]] = unique[1]\n    result[image == unique[1]] = unique[0]\n    return 0, result\n\n\ndef combine_two_lists(list1, list2):\n    result = list1.copy()\n    for item2 in list2:\n        exist = False\n        for item1 in list1:\n            if (item2 == item1).all():\n                exist = True\n                break\n        if not exist:\n            result.append(item2)\n    return result\n\n\ndef intersect_two_lists(list1, list2):\n    \"\"\" intersects two lists of np.arrays\"\"\"\n    result = []\n    for item2 in list2:\n        for item1 in list1:\n            if (item2.shape == item1.shape) and (item2 == item1).all():\n                result.append(item2)\n                break\n    return result","26800b15":"import itertools\nimport random\n\nimport numpy as np\n\nfrom scipy import ndimage\nfrom scipy.stats import mode\n\nclass Predictor:\n    def __init__(self, params=None, preprocess_params=None):\n        if params is None:\n            self.params = {}\n        else:\n            self.params = params\n        self.preprocess_params = preprocess_params\n        self.solution_candidates = []\n        if \"rrr_input\" in self.params:\n            self.rrr_input = params[\"rrr_input\"]\n        else:\n            self.rrr_input = True\n        if \"mosaic_target\" not in self.params:\n            self.params[\"mosaic_target\"] = False\n\n    def retrive_params_values(self, params, color_scheme):\n        new_params = {}\n        for k, v in params.items():\n            if k[-5:] == \"color\":\n                new_params[k] = get_color(v, color_scheme[\"colors\"])\n                if new_params[k] < 0:\n                    return 1, None\n            else:\n                new_params[k] = v\n        return 0, new_params\n\n    def reflect_rotate_roll(self, image, inverse=False):\n        if self.params is not None and \"reflect\" in self.params:\n            reflect = self.params[\"reflect\"]\n        else:\n            reflect = (False, False)\n        if self.params is not None and \"rotate\" in self.params:\n            rotate = self.params[\"rotate\"]\n        else:\n            rotate = 0\n        if self.params is not None and \"roll\" in self.params:\n            roll = self.params[\"roll\"]\n        else:\n            roll = (0, 0)\n\n        result = image.copy()\n\n        if inverse:\n            if reflect[0]:\n                result = result[::-1]\n            if reflect[1]:\n                result = result[:, ::-1]\n            result = np.rot90(result, -rotate)\n            result = np.roll(result, -roll[1], axis=1)\n            result = np.roll(result, -roll[0], axis=0)\n        else:\n            result = np.roll(result, roll[0], axis=0)\n            result = np.roll(result, roll[1], axis=1)\n            result = np.rot90(result, rotate)\n            if reflect[1]:\n                result = result[:, ::-1]\n            if reflect[0]:\n                result = result[::-1]\n\n        return result\n\n    def get_images(self, k, train=True, return_target=True):\n        if not train:\n            return_target = False\n\n        if train:\n            if self.rrr_input:\n                original_image = self.reflect_rotate_roll(np.uint8(self.sample[\"train\"][k][\"input\"]))\n            else:\n                original_image = np.uint8(self.sample[\"train\"][k][\"input\"])\n            if return_target:\n                if self.params[\"mosaic_target\"]:\n                    target_image = np.uint8(self.sample[\"train\"][k][\"mosaic_output\"])\n                else:\n                    target_image = np.uint8(self.sample[\"train\"][k][\"output\"])\n                target_image = self.reflect_rotate_roll(target_image)\n                return original_image, target_image\n            else:\n                return original_image\n        else:\n            if self.rrr_input:\n                original_image = self.reflect_rotate_roll(np.uint8(self.sample[\"test\"][k][\"input\"]))\n            else:\n                original_image = np.uint8(self.sample[\"test\"][k][\"input\"])\n            return original_image\n\n    def initiate_mosaic(self):\n        same_size = True\n        same_size_rotated = True\n        fixed_size = True\n        color_num_size = True\n        block_shape_size = True\n\n        shapes = []\n        sizes = []\n        for k, data in enumerate(self.sample[\"train\"]):\n            target_image = np.uint8(data[\"output\"])\n            original_image = self.get_images(k, train=True, return_target=False)\n            status, block = find_mosaic_block(target_image, self.params)\n            if status != 0:\n                return False\n            self.sample[\"train\"][k][\"mosaic_output\"] = block\n            same_size = same_size and target_image.shape == original_image.shape\n            same_size_rotated = same_size_rotated and target_image.shape == original_image.T.shape\n            if target_image.shape[0] % block.shape[0] == 0 and target_image.shape[1] % block.shape[1] == 0:\n                sizes.append([target_image.shape[0] \/\/ block.shape[0], target_image.shape[1] \/\/ block.shape[1]])\n                color_num_size = (\n                    color_num_size\n                    and sizes[-1][0] == len(data[\"colors_sorted\"])\n                    and sizes[-1][1] == len(data[\"colors_sorted\"])\n                )\n                block_shape_size = block_shape_size and sizes[-1][0] == block.shape[0] and sizes[-1][1] == block.shape[1]\n            else:\n                fixed_size = False\n                color_num_size = False\n                block_shape_size\n            shapes.append(target_image.shape)\n\n        params = {}\n\n        if len([1 for x in shapes[1:] if x != shapes[0]]) == 0:\n            params[\"mosaic_size_type\"] = \"fixed\"\n            params[\"mosaic_shape\"] = shapes[0]\n        elif fixed_size and len([1 for x in sizes[1:] if x != sizes[0]]) == 0:\n            params[\"mosaic_size_type\"] = \"size\"\n            params[\"mosaic_size\"] = sizes[0]\n        elif same_size:\n            params[\"mosaic_size_type\"] = \"same\"\n        elif same_size_rotated:\n            params[\"mosaic_size_type\"] = \"same_rotated\"\n        elif color_num_size:\n            params[\"mosaic_size_type\"] = \"color_num\"\n        elif color_num_size:\n            params[\"mosaic_size_type\"] = \"block_shape_size\"\n        else:\n            return False\n\n        self.params[\"mosaic_params\"] = params\n        return True\n\n    def process_prediction(self, image, original_image=None):\n        result = self.reflect_rotate_roll(image, inverse=True)\n        if self.params[\"mosaic_target\"]:\n            result = reconstruct_mosaic_from_block(result, self.params[\"mosaic_params\"], original_image=original_image)\n        return result\n\n    def predict_output(self, image, params):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        return 1, None\n\n    def filter_colors(self):\n        # filtering colors, that are not present in at least one of the images\n        all_colors = []\n        for color_scheme1 in self.sample[\"train\"]:\n            list_of_colors = [get_dict_hash(color_dict) for i in range(10) for color_dict in color_scheme1[\"colors\"][i]]\n            all_colors.append(list_of_colors)\n        for j in range(1, len(self.sample[\"train\"])):\n            all_colors[0] = [x for x in all_colors[0] if x in all_colors[j]]\n        keep_colors = set(all_colors[0])\n\n        for color_scheme1 in self.sample[\"train\"]:\n            for i in range(10):\n                j = 0\n                while j < len(color_scheme1[\"colors\"][i]):\n                    if get_dict_hash(color_scheme1[\"colors\"][i][j]) in keep_colors:\n                        j += 1\n                    else:\n                        del color_scheme1[\"colors\"][i][j]\n\n        delete_colors = []\n        color_scheme0 = self.sample[\"train\"][0]\n        for i in range(10):\n            if len(color_scheme0[\"colors\"][i]) > 1:\n                for j, color_dict1 in enumerate(color_scheme0[\"colors\"][i][::-1][:-1]):\n                    hash1 = get_dict_hash(color_dict1)\n                    delete = True\n                    for color_dict2 in color_scheme0[\"colors\"][i][::-1][j + 1 :]:\n                        hash2 = get_dict_hash(color_dict2)\n                        for color_scheme1 in list(self.sample[\"train\"][1:]) + list(self.sample[\"test\"]):\n                            found = False\n                            for k in range(10):\n                                hash_array = [get_dict_hash(color_dict) for color_dict in color_scheme1[\"colors\"][k]]\n                                if hash1 in hash_array and hash2 in hash_array:\n                                    found = True\n                                    break\n                            if not found:\n                                delete = False\n                                break\n                        if delete:\n                            delete_colors.append(hash1)\n                            break\n\n        for color_scheme1 in self.sample[\"train\"]:\n            for i in range(10):\n                j = 0\n                while j < len(color_scheme1[\"colors\"][i]):\n                    if get_dict_hash(color_scheme1[\"colors\"][i][j]) in delete_colors:\n                        del color_scheme1[\"colors\"][i][j]\n                    else:\n                        j += 1\n        return\n\n    def filter_sizes(self):\n        if \"max_size\" not in self.params:\n            return True\n        else:\n            max_size = self.params[\"max_size\"]\n        for n in range(len(self.sample[\"train\"])):\n            original_image = np.array(self.sample[\"train\"][n][\"input\"])\n            target_image = np.array(self.sample[\"train\"][n][\"output\"])\n            if (\n                original_image.shape[0] > max_size\n                or original_image.shape[1] > max_size\n                or target_image.shape[0] > max_size\n                or target_image.shape[1] > max_size\n            ):\n                return False\n        return True\n\n    def init_call(self):\n        if not self.filter_sizes():\n            return False\n        self.filter_colors()\n        if self.params[\"mosaic_target\"]:\n            if self.initiate_mosaic():\n                return True\n            else:\n                return False\n        return True\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n        return 0\n\n    def process_full_train(self):\n        for k in range(len(self.sample[\"train\"])):\n            status = self.process_one_sample(k, initial=(k == 0))\n            if status != 0:\n                return 1\n\n        if len(self.solution_candidates) == 0:\n            return 2\n\n        return 0\n\n    def add_candidates_list(self, image, target_image, color_scheme, params):\n        old_params = params.copy()\n        params = params.copy()\n        params[\"color_scheme\"] = color_scheme\n        params[\"block_cache\"] = color_scheme[\"blocks\"]\n        params[\"mask_cache\"] = color_scheme[\"masks\"]\n\n        if \"elim_background\" in self.params and self.params[\"elim_background\"]:\n            structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n            if \"all_background_color\" in params:\n                color_iter_list = [params[\"all_background_color\"]]\n            else:\n                color_iter_list = color_scheme[\"colors_sorted\"]\n            for all_background_color in color_iter_list:\n                final_prediction = image.copy()\n                solved = True\n                masks, n_masks = ndimage.label(image != all_background_color, structure=structure)\n                new_image_masks = [(masks == i) for i in range(1, n_masks + 1)]\n                for image_mask in new_image_masks:\n                    boundaries = find_color_boundaries(image_mask, True)\n                    new_image = image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1]\n                    new_target = target_image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1]\n                    if \"block\" in params:\n                        status, prediction = self.predict_output(new_image, params, block=new_image)\n                    else:\n                        status, prediction = self.predict_output(new_image, params)\n                    if status != 0 or prediction.shape != new_target.shape or not (prediction == new_target).all():\n                        solved = False\n                        break\n                    final_prediction[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1] = prediction\n                if solved and final_prediction.shape == target_image.shape and (final_prediction == target_image).all():\n                    params[\"all_background_color\"] = all_background_color\n                    break\n                else:\n                    solved = False\n            if not solved:\n                return []\n\n        else:\n            status, prediction = self.predict_output(image, params)\n            if status != 0 or prediction.shape != target_image.shape or not (prediction == target_image).all():\n                return []\n\n        result = [old_params.copy()]\n        for k, v in params.copy().items():\n            if k[-5:] == \"color\":\n                temp_result = result.copy()\n                result = []\n                for dict in temp_result:\n                    for color_dict in color_scheme[\"colors\"][v]:\n                        temp_dict = dict.copy()\n                        temp_dict[k] = color_dict\n                        result.append(temp_dict)\n\n        return result\n\n    def update_solution_candidates(self, local_candidates, initial):\n        if initial:\n            self.solution_candidates = local_candidates\n        else:\n            self.solution_candidates = filter_list_of_dicts(local_candidates, self.solution_candidates)\n        if len(self.solution_candidates) == 0:\n            return 4\n        else:\n            return 0\n\n    def __call__(self, sample):\n        \"\"\" works like fit_predict\"\"\"\n        self.sample = sample\n\n        self.initial_train = list(sample[\"train\"]).copy()\n\n        if self.params is not None and \"skip_train\" in self.params:\n            skip_train = min(len(sample[\"train\"]) - 2, self.params[\"skip_train\"])\n            train_len = len(self.initial_train) - skip_train\n        else:\n            train_len = len(self.initial_train)\n\n        answers = []\n        for _ in self.sample[\"test\"]:\n            answers.append([])\n        result_generated = False\n\n        all_subsets = list(itertools.combinations(self.initial_train, train_len))\n        for subset in all_subsets:\n            self.sample[\"train\"] = subset\n            if not self.init_call():\n                continue\n            status = self.process_full_train()\n            if status != 0:\n                continue\n\n            for test_n, test_data in enumerate(self.sample[\"test\"]):\n                original_image = self.get_images(test_n, train=False)\n                color_scheme = self.sample[\"test\"][test_n]\n                for params_dict in self.solution_candidates:\n                    status, params = self.retrive_params_values(params_dict, color_scheme)\n                    if status != 0:\n                        continue\n                    params[\"block_cache\"] = self.sample[\"test\"][test_n][\"blocks\"]\n                    params[\"mask_cache\"] = self.sample[\"test\"][test_n][\"masks\"]\n                    params[\"color_scheme\"] = self.sample[\"test\"][test_n]\n                    status, prediction = self.predict_output(original_image, params)\n                    if status != 0:\n                        continue\n\n                    if \"elim_background\" in self.params and self.params[\"elim_background\"]:\n                        result = original_image.copy()\n                        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n                        all_background_color = params[\"all_background_color\"]\n                        solved = True\n                        masks, n_masks = ndimage.label(original_image != all_background_color, structure=structure)\n                        new_image_masks = [(masks == i) for i in range(1, n_masks + 1)]\n                        for image_mask in new_image_masks:\n                            boundaries = find_color_boundaries(image_mask, True)\n                            new_image = original_image[\n                                boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1\n                            ]\n                            if \"block\" in params:\n                                status, prediction = self.predict_output(new_image, params, block=new_image)\n                            else:\n                                status, prediction = self.predict_output(new_image, params)\n                            if status != 0 or prediction.shape != new_image.shape:\n                                solved = False\n                                break\n                            result[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1] = prediction\n                        if not solved:\n                            continue\n                        prediction = result\n\n                    else:\n                        status, prediction = self.predict_output(original_image, params)\n                        if status != 0:\n                            continue\n\n                    answers[test_n].append(self.process_prediction(prediction, original_image=original_image))\n                    result_generated = True\n\n        self.sample[\"train\"] = self.initial_train\n        if result_generated:\n            return 0, answers\n        else:\n            return 3, None\n        \nclass Puzzle(Predictor):\n    \"\"\"Stack different blocks together to get the output\"\"\"\n\n    def __init__(self, params=None, preprocess_params=None):\n        super().__init__(params, preprocess_params)\n        self.intersection = params[\"intersection\"]\n\n    def initiate_factors(self, target_image):\n        t_n, t_m = target_image.shape\n        factors = []\n        grid_color_list = []\n        if self.intersection < 0:\n            grid_color, grid_size, frame = find_grid(target_image)\n            if grid_color < 0:\n                return factors, []\n            factors = [grid_size]\n            grid_color_list = self.sample[\"train\"][0][\"colors\"][grid_color]\n            self.frame = frame\n        else:\n            for i in range(1, t_n + 1):\n                for j in range(1, t_m + 1):\n                    if (t_n - self.intersection) % i == 0 and (t_m - self.intersection) % j == 0:\n                        factors.append([i, j])\n        return factors, grid_color_list\n\n    def predict_output(self, image, color_scheme, factor, params, block_cache):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        skip = False\n        for i in range(factor[0]):\n            for j in range(factor[1]):\n                status, array = get_predict(image, params[i][j][0], block_cache, color_scheme)\n                if status != 0:\n                    skip = True\n                    break\n\n                if i == 0 and j == 0:\n                    n, m = array.shape\n                    predict = np.uint8(\n                        np.zeros(\n                            (\n                                (n - self.intersection) * factor[0] + self.intersection,\n                                (m - self.intersection) * factor[1] + self.intersection,\n                            )\n                        )\n                    )\n                    if self.intersection < 0:\n                        new_grid_color = get_color(self.grid_color_list[0], color_scheme[\"colors\"])\n                        if new_grid_color < 0:\n                            return 2, None\n                        predict += new_grid_color\n                else:\n                    if n != array.shape[0] or m != array.shape[1]:\n                        skip = True\n                        break\n\n                predict[\n                    i * (n - self.intersection) : i * (n - self.intersection) + n,\n                    j * (m - self.intersection) : j * (m - self.intersection) + m,\n                ] = array\n\n            if skip:\n                return 1, None\n\n        if self.intersection < 0 and self.frame:\n            final_predict = predict = (\n                np.uint8(\n                    np.zeros(\n                        (\n                            (n - self.intersection) * factor[0] + self.intersection + 2,\n                            (m - self.intersection) * factor[1] + self.intersection + 2,\n                        )\n                    )\n                )\n                + new_grid_color\n            )\n            final_predict[1 : final_predict.shape[0] - 1, 1 : final_predict.shape[1] - 1] = predict\n            preict = final_predict\n\n        return 0, predict\n\n    def initiate_candidates_list(self, initial_values=None):\n        \"\"\"creates an empty candidates list corresponding to factors\n        for each (m,n) factor it is m x n matrix of lists\"\"\"\n        candidates = []\n        if not initial_values:\n            initial_values = []\n        for n_factor, factor in enumerate(self.factors):\n            candidates.append([])\n            for i in range(factor[0]):\n                candidates[n_factor].append([])\n                for j in range(factor[1]):\n                    candidates[n_factor][i].append(initial_values.copy())\n        return candidates\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n\n        original_image, target_image = self.get_images(k)\n\n        candidates_num = 0\n        t_n, t_m = target_image.shape\n        color_scheme = self.sample[\"train\"][k]\n        new_candidates = self.initiate_candidates_list()\n        for n_factor, factor in enumerate(self.factors.copy()):\n            for i in range(factor[0]):\n                for j in range(factor[1]):\n                    if initial:\n                        local_candidates = self.sample[\"train\"][k][\"blocks\"][\"arrays\"].keys()\n                    else:\n                        local_candidates = self.solution_candidates[n_factor][i][j]\n\n                    for data in local_candidates:\n                        if initial:\n                            array = self.sample[\"train\"][k][\"blocks\"][\"arrays\"][data][\"array\"]\n                            params = self.sample[\"train\"][k][\"blocks\"][\"arrays\"][data][\"params\"]\n                        else:\n                            params = [data]\n                            status, array = get_predict(\n                                original_image, data, self.sample[\"train\"][k][\"blocks\"], color_scheme\n                            )\n                            if status != 0:\n                                continue\n\n                        n, m = array.shape\n                        # work with valid candidates only\n                        if n <= 0 or m <= 0:\n                            continue\n                        if (\n                            n - self.intersection != (t_n - self.intersection) \/ factor[0]\n                            or m - self.intersection != (t_m - self.intersection) \/ factor[1]\n                        ):\n                            continue\n\n                        start_n = i * (n - self.intersection)\n                        start_m = j * (m - self.intersection)\n\n                        if not (\n                            (n == target_image[start_n : start_n + n, start_m : start_m + m].shape[0])\n                            and (m == target_image[start_n : start_n + n, start_m : start_m + m].shape[1])\n                        ):\n                            continue\n\n                        # adding the candidate to the candidates list\n                        if (array == target_image[start_n : start_n + n, start_m : start_m + m]).all():\n                            new_candidates[n_factor][i][j].extend(params)\n                            candidates_num += 1\n                    # if there is no candidates for one of the cells the whole factor is invalid\n                    if len(new_candidates[n_factor][i][j]) == 0:\n                        self.factors[n_factor] = [0, 0]\n                        break\n                if self.factors[n_factor][0] == 0:\n                    break\n\n        self.solution_candidates = new_candidates\n\n        if candidates_num > 0:\n            return 0\n        else:\n            return 1\n\n    def filter_factors(self, local_factors):\n        for factor in self.factors:\n            found = False\n            for new_factor in local_factors:\n                if factor == new_factor:\n                    found = True\n                    break\n            if not found:\n                factor = [0, 0]\n\n        return\n\n    def process_full_train(self):\n\n        for k in range(len(self.sample[\"train\"])):\n            original_image, target_image = self.get_images(k)\n            if k == 0:\n                self.factors, self.grid_color_list = self.initiate_factors(target_image)\n            else:\n                local_factors, grid_color_list = self.initiate_factors(target_image)\n                self.filter_factors(local_factors)\n                self.grid_color_list = filter_list_of_dicts(grid_color_list, self.grid_color_list)\n\n            status = self.process_one_sample(k, initial=(k == 0))\n            if status != 0:\n                return 1\n\n        if len(self.solution_candidates) == 0:\n            return 2\n\n        return 0\n\n    def __call__(self, sample):\n        \"\"\" works like fit_predict\"\"\"\n        self.sample = sample\n        if not self.init_call():\n            return 5, None\n        status = self.process_full_train()\n        if status != 0:\n            return status, None\n\n        answers = []\n        for _ in self.sample[\"test\"]:\n            answers.append([])\n\n        result_generated = False\n        for test_n, test_data in enumerate(self.sample[\"test\"]):\n            original_image = self.get_images(test_n, train=False)\n            color_scheme = self.sample[\"test\"][test_n]\n            for n_factor, factor in enumerate(self.factors):\n                if factor[0] > 0 and factor[1] > 0:\n                    status, prediction = self.predict_output(\n                        original_image,\n                        color_scheme,\n                        factor,\n                        self.solution_candidates[n_factor],\n                        self.sample[\"test\"][test_n][\"blocks\"],\n                    )\n                    if status == 0:\n                        answers[test_n].append(self.process_prediction(prediction, original_image=original_image))\n                        result_generated = True\n\n        if result_generated:\n            if \"mode\" in self.params and self.params[\"mode\"]:\n                for i in range(len(answers)):\n                    answer = mode(np.stack(answers[i]), axis=0).mode[0]\n                    answers[i] = [answer]\n            return 0, answers\n        else:\n            return 3, None\n        \n        \nclass ReconstructMosaic(Predictor):\n    \"\"\"reconstruct mosaic\"\"\"\n\n    def __init__(self, params=None, preprocess_params=None):\n        super().__init__(params, preprocess_params)\n        if \"simple_mode\" not in self.params:\n            self.params[\"simple_mode\"] = True\n\n    def check_surface(self, image, i, j, block, color, bg, rotate):\n        b = (image.shape[0] - i) \/\/ block.shape[0] + int(((image.shape[0] - i) % block.shape[0]) > 0)\n        r = (image.shape[1] - j) \/\/ block.shape[1] + int(((image.shape[1] - j) % block.shape[1]) > 0)\n        t = (i) \/\/ block.shape[0] + int((i) % block.shape[0] > 0)\n        l = (j) \/\/ block.shape[1] + int((j) % block.shape[1] > 0)\n\n        full_image = np.ones(((b + t) * block.shape[0], (r + l) * block.shape[1])) * color\n        start_i = (block.shape[0] - i) % block.shape[0]\n        start_j = (block.shape[1] - j) % block.shape[1]\n\n        full_image[start_i : start_i + image.shape[0], start_j : start_j + image.shape[1]] = image\n\n        for k in range(b + t):\n            for n in range(r + l):\n                new_block = full_image[\n                    k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                ]\n                if (new_block == color).sum() < (block == color).sum():\n                    block = new_block.copy()\n\n        blocks = []\n        for k in range(b + t):\n            for n in range(r + l):\n                new_block = full_image[\n                    k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                ]\n                mask = np.logical_and(new_block != color, block != color)\n                if (new_block == block)[mask].all():\n                    blocks.append(new_block)\n                else:\n                    if rotate:\n                        success = False\n                        if new_block.shape[0] != new_block.shape[1]:\n                            rotations = [0, 2]\n                        else:\n                            rotations = [0, 1, 2, 3]\n                        for rotation in rotations:\n                            for transpose in [True, False]:\n                                rotated_block = np.rot90(new_block.copy(), rotation)\n                                if transpose:\n                                    rotated_block = rotated_block[::-1]\n                                mask = np.logical_and(block != color, rotated_block != color)\n                                if (block == rotated_block)[mask].all():\n                                    blocks.append(rotated_block)\n                                    success = True\n                                    break\n                            if success:\n                                break\n                        if not success:\n                            return 1, None\n                    else:\n                        return 1, None\n\n        new_block = block.copy()\n        for curr_block in blocks:\n            mask = np.logical_and(new_block != color, curr_block != color)\n            if (new_block == curr_block)[mask].all():\n                new_block[new_block == color] = curr_block[new_block == color]\n            else:\n                return 2, None\n\n        if (new_block == color).any() and not bg:\n            temp_array = np.concatenate([new_block, new_block], 0)\n            temp_array = np.concatenate([temp_array, temp_array], 1)\n            for k in range(new_block.shape[0]):\n                for n in range(new_block.shape[1]):\n                    current_array = temp_array[k : k + new_block.shape[0], n : n + new_block.shape[1]]\n                    mask = np.logical_and(new_block != color, current_array != color)\n                    if (new_block == current_array)[mask].all():\n                        new_block[new_block == color] = current_array[new_block == color]\n        if (new_block == color).any() and not bg:\n            return 3, None\n\n        for k in range(b + t):\n            for n in range(r + l):\n                if rotate:\n                    current_array = full_image[\n                        k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                    ]\n                    if rotate:\n                        success = False\n                        if current_array.shape[0] != current_array.shape[1]:\n                            rotations = [0, 2]\n                        else:\n                            rotations = [0, 1, 2, 3]\n                    for rotation in rotations:\n                        for transpose in [True, False]:\n                            rotated_block = np.rot90(new_block.copy(), rotation)\n                            if transpose:\n                                rotated_block = rotated_block[::-1]\n                            mask = np.logical_and(rotated_block != color, current_array != color)\n                            if (rotated_block == current_array)[mask].all():\n                                full_image[\n                                    k * block.shape[0] : (k + 1) * block.shape[0],\n                                    n * block.shape[1] : (n + 1) * block.shape[1],\n                                ] = rotated_block\n                                success = True\n                                break\n                        if success:\n                            break\n                else:\n                    full_image[\n                        k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                    ] = new_block\n\n        result = full_image[start_i : start_i + image.shape[0], start_j : start_j + image.shape[1]]\n        return 0, result\n\n    def predict_output(self, image, params):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        k = 0\n        itteration_list1 = list(range(2, sum(image.shape)))\n        if params[\"big_first\"]:\n            itteration_list1 = list(\n                range(2, (image != params[\"color\"]).max(1).sum() + (image != params[\"color\"]).max(0).sum() + 1)\n            )\n            itteration_list1 = itteration_list1[::-1]\n        if params[\"largest_non_bg\"]:\n            itteration_list1 = [(image != params[\"color\"]).max(1).sum() + (image != params[\"color\"]).max(0).sum()]\n        for size in itteration_list1:\n            if params[\"direction\"] == \"all\":\n                itteration_list = list(range(1, size))\n            elif params[\"direction\"] == \"vert\":\n                itteration_list = [image.shape[0]]\n            else:\n                itteration_list = [size - image.shape[1]]\n            if params[\"largest_non_bg\"]:\n                itteration_list = [(image != params[\"color\"]).max(1).sum()]\n            for i_size in itteration_list:\n                j_size = size - i_size\n                if j_size < 1 or i_size < 1:\n                    continue\n                block = image[0 : 0 + i_size, 0 : 0 + j_size]\n                status, predict = self.check_surface(\n                    image, 0, 0, block, params[\"color\"], params[\"have_bg\"], params[\"rotate_block\"]\n                )\n                if status != 0:\n                    continue\n                if k == params[\"k_th_block\"]:\n                    return 0, predict\n                else:\n                    k += 1\n                    continue\n\n        return 1, None\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n        local_candidates = []\n        original_image, target_image = self.get_images(k)\n        if original_image.shape != target_image.shape:\n            return 1, None\n\n        if initial:\n            directions = [\"all\", \"vert\", \"hor\"]\n            big_first_options = [True, False]\n            largest_non_bg_options = [True, False]\n            have_bg_options = [True, False]\n            if self.params[\"simple_mode\"]:\n                rotate_block_options = [False]\n                k_th_block_options = [0]\n            else:\n                rotate_block_options = [True, False]\n                k_th_block_options = list(range(10))\n        else:\n            directions = list({params[\"direction\"] for params in self.solution_candidates})\n            big_first_options = list({params[\"big_first\"] for params in self.solution_candidates})\n            largest_non_bg_options = list({params[\"largest_non_bg\"] for params in self.solution_candidates})\n            have_bg_options = list({params[\"have_bg\"] for params in self.solution_candidates})\n            rotate_block_options = list({params[\"rotate_block\"] for params in self.solution_candidates})\n            k_th_block_options = list({params[\"k_th_block\"] for params in self.solution_candidates})\n\n        for largest_non_bg in largest_non_bg_options:\n            for color in self.sample[\"train\"][k][\"colors_sorted\"]:\n                for direction in directions:\n                    for big_first in big_first_options:\n                        if largest_non_bg and not big_first:\n                            continue\n                        for have_bg in have_bg_options:\n                            if largest_non_bg and not have_bg:\n                                continue\n                            if (target_image == color).any() and not have_bg:\n                                continue\n                            for rotate_block in rotate_block_options:\n                                for k_th_block in k_th_block_options:\n                                    params = {\n                                        \"color\": color,\n                                        \"direction\": direction,\n                                        \"big_first\": big_first,\n                                        \"have_bg\": have_bg,\n                                        \"rotate_block\": rotate_block,\n                                        \"k_th_block\": k_th_block,\n                                        \"largest_non_bg\": largest_non_bg,\n                                    }\n\n                                    local_candidates = local_candidates + self.add_candidates_list(\n                                        original_image, target_image, self.sample[\"train\"][k], params\n                                    )\n        return self.update_solution_candidates(local_candidates, initial)\n\n\nclass ReconstructMosaicExtract(ReconstructMosaic):\n    \"\"\"returns the reconstructed part of the mosaic\"\"\"\n\n    def __init__(self, params=None, preprocess_params=None):\n        super().__init__(params, preprocess_params)\n        if \"simple_mode\" not in self.params:\n            self.params[\"simple_mode\"] = True\n\n    def predict_output(self, image, params):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        k = 0\n        mask = image == params[\"color\"]\n        sum0 = mask.sum(0)\n        sum1 = mask.sum(1)\n        indices0 = np.arange(len(sum1))[sum1 > 0]\n        indices1 = np.arange(len(sum0))[sum0 > 0]\n\n        itteration_list1 = list(range(2, sum(image.shape)))\n        if params[\"big_first\"]:\n            itteration_list1 = list(\n                range(2, (image != params[\"color\"]).max(1).sum() + (image != params[\"color\"]).max(0).sum() + 1)\n            )\n            itteration_list1 = itteration_list1[::-1]\n        for size in itteration_list1:\n            if params[\"direction\"] == \"all\":\n                itteration_list = list(range(1, size))\n            elif params[\"direction\"] == \"vert\":\n                itteration_list = [image.shape[0]]\n            else:\n                itteration_list = [size - image.shape[1]]\n            for i_size in itteration_list:\n                j_size = size - i_size\n                if j_size < 1 or i_size < 1:\n                    continue\n                block = image[0 : 0 + i_size, 0 : 0 + j_size]\n                status, predict = self.check_surface(\n                    image, 0, 0, block, params[\"color\"], params[\"have_bg\"], params[\"rotate_block\"]\n                )\n                if status != 0:\n                    continue\n                if k == params[\"k_th_block\"]:\n                    predict = predict[indices0.min() : indices0.max() + 1, indices1.min() : indices1.max() + 1]\n                    return 0, predict\n                else:\n                    k += 1\n                    continue\n\n        return 1, None\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n        local_candidates = []\n        original_image, target_image = self.get_images(k)\n\n        if initial:\n            directions = [\"vert\", \"hor\", \"all\"]\n            big_first_options = [True, False]\n            largest_non_bg_options = [True, False]\n            have_bg_options = [True, False]\n            if self.params[\"simple_mode\"]:\n                rotate_block_options = [False]\n                k_th_block_options = [0]\n            else:\n                rotate_block_options = [True, False]\n                k_th_block_options = list(range(10))\n        else:\n            directions = list({params[\"direction\"] for params in self.solution_candidates})\n            big_first_options = list({params[\"big_first\"] for params in self.solution_candidates})\n            have_bg_options = list({params[\"have_bg\"] for params in self.solution_candidates})\n            largest_non_bg_options = list({params[\"largest_non_bg\"] for params in self.solution_candidates})\n            rotate_block_options = list({params[\"rotate_block\"] for params in self.solution_candidates})\n            k_th_block_options = list({params[\"k_th_block\"] for params in self.solution_candidates})\n\n        for largest_non_bg in largest_non_bg_options:\n            for color in self.sample[\"train\"][k][\"colors_sorted\"]:\n                mask = original_image == color\n                sum0 = mask.sum(0)\n                sum1 = mask.sum(1)\n\n                if len(np.unique(sum0)) != 2 or len(np.unique(sum1)) != 2:\n                    continue\n                if target_image.shape[0] != max(sum0) or target_image.shape[1] != max(sum1):\n                    continue\n                for direction in directions:\n                    for big_first in big_first_options:\n                        if largest_non_bg and not big_first:\n                            continue\n                        for have_bg in have_bg_options:\n                            if largest_non_bg and not have_bg:\n                                continue\n                            if (target_image == color).any() and not have_bg:\n                                continue\n                            for rotate_block in rotate_block_options:\n                                for k_th_block in k_th_block_options:\n                                    params = {\n                                        \"color\": color,\n                                        \"direction\": direction,\n                                        \"big_first\": big_first,\n                                        \"have_bg\": have_bg,\n                                        \"rotate_block\": rotate_block,\n                                        \"k_th_block\": k_th_block,\n                                    }\n\n                                    local_candidates = local_candidates + self.add_candidates_list(\n                                        original_image, target_image, self.sample[\"train\"][k], params\n                                    )\n        return self.update_solution_candidates(local_candidates, initial)","62734867":"import json\nimport multiprocessing\nimport os\nimport time\nimport pandas as pd\n\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\n\nfrom tqdm.notebook import tqdm\nfrom functools import partial\n\nimport signal\nimport sys\nimport psutil\n\n\ndef sigterm_handler(_signo, _stack_frame):\n    sys.exit(0)\n\n\ndef process_file(\n    file_path,\n    PATH,\n    predictors,\n    preprocess_params=None,\n    color_params=None,\n    show_results=True,\n    break_after_answer=False,\n    queue=None,\n    process_whole_ds=False,\n):\n    with open(os.path.join(PATH, file_path), \"r\") as file:\n        sample = json.load(file)\n\n    submission_list = []\n    sample = preprocess_sample(\n        sample, params=preprocess_params, color_params=color_params, process_whole_ds=process_whole_ds\n    )\n\n    signal.signal(signal.SIGTERM, sigterm_handler)\n\n    for predictor in predictors:\n        try:\n            submission_list = []\n            result, answer = predictor(sample)\n            if result == 0:\n                if show_results:\n                    show_sample(sample)\n\n                for j in range(len(answer)):\n                    answers = set([])\n                    for k in range(len(answer[j])):\n                        str_answer = matrix2answer(answer[j][k])\n                        if str_answer not in answers:\n                            if show_results and k < 3:\n                                plt.matshow(answer[j][k], cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n                                plt.show()\n                                print(file_path, str_answer)\n                            answers.add(str_answer)\n                            submission_list.append({\"output_id\": file_path[:-5] + \"_\" + str(j), \"output\": str_answer})\n            if queue is not None:\n                queue.put(submission_list)\n            if break_after_answer:\n                break\n        except SystemExit:\n            break\n    time.sleep(1)\n    return\n\n\ndef run_parallel(\n    files_list,\n    PATH,\n    predictors,\n    preprocess_params=None,\n    color_params=None,\n    show_results=True,\n    break_after_answer=False,\n    processes=20,\n    timeout=300,\n    max_memory_by_process=1.4e10,\n    process_whole_ds=False,\n):\n    process_list = []\n    timing_list = []\n\n    queue = multiprocessing.Queue(10000)\n    func = partial(\n        process_file,\n        PATH=PATH,\n        predictors=predictors,\n        preprocess_params=preprocess_params,\n        color_params=color_params,\n        show_results=show_results,\n        break_after_answer=break_after_answer,\n        queue=queue,\n        process_whole_ds=process_whole_ds,\n    )\n\n    result = []\n    with tqdm(total=len(files_list)) as pbar:\n        num_finished_previous = 0\n        try:\n            while True:\n\n                num_finished = 0\n                for process, start_time in zip(process_list, timing_list):\n                    if process.is_alive():\n                        if time.time() - start_time > timeout:\n                            process.terminate()\n                            while not queue.empty():\n                                result = result + queue.get()\n                            process.join(10)\n                            print(\"Time out. The process is killed.\")\n                            num_finished += 1\n                        else:\n                            process_data = psutil.Process(process.pid)\n                            if process_data.memory_info().rss > max_memory_by_process:\n                                process.terminate()\n                                while not queue.empty():\n                                    result = result + queue.get()\n                                process.join(10)\n                                print(\"Memory limit is exceeded. The process is killed.\")\n                                num_finished += 1\n\n                    else:\n                        num_finished += 1\n\n                if num_finished == len(files_list):\n                    pbar.update(len(files_list) - num_finished_previous)\n                    time.sleep(0.1)\n                    break\n                elif len(process_list) - num_finished < processes and len(process_list) < len(files_list):\n                    p = multiprocessing.Process(target=func, args=(files_list[len(process_list)],))\n                    process_list.append(p)\n                    timing_list.append(time.time())\n                    p.start()\n                pbar.update(num_finished - num_finished_previous)\n                num_finished_previous = num_finished\n                # print(f\"num_finished: {num_finished}, total_num: {len(process_list)}\")\n                while not queue.empty():\n                    result = result + queue.get()\n                time.sleep(0.1)\n        except KeyboardInterrupt:\n            for process in process_list:\n                process.terminate()\n                process.join(5)\n            print(\"Got Ctrl+C\")\n        except Exception as error:\n            for process in process_list:\n                process.terminate()\n                process.join(5)\n            print(f\"Function raised {error}\")\n\n    return result\n\n\ndef generate_submission(predictions_list, sample_submission_path=\"data\/sample_submission.csv\"):\n    submission = pd.read_csv(sample_submission_path).to_dict(\"records\")\n\n    initial_ids = set([data[\"output_id\"] for data in submission])\n    new_submission = []\n\n    ids = set([data[\"output_id\"] for data in predictions_list])\n    for output_id in ids:\n        predicts = list(set([data[\"output\"] for data in predictions_list if data[\"output_id\"] == output_id]))\n        output = \" \".join(predicts[:3])\n        new_submission.append({\"output_id\": output_id, \"output\": output})\n\n    for output_id in initial_ids:\n        if not output_id in ids:\n            new_submission.append({\"output_id\": output_id, \"output\": \"\"})\n\n    return pd.DataFrame(new_submission)\n\n\ndef combine_submission_files(list_of_dfs, sample_submission_path=\"data\/sample_submission.csv\"):\n    submission = pd.read_csv(sample_submission_path)\n\n    list_of_outputs = []\n    for df in list_of_dfs:\n        list_of_outputs.append(df.sort_values(by=\"output_id\")[\"output\"].astype(str).values)\n\n    merge_output = []\n    for i in range(len(list_of_outputs[0])):\n        list_of_answ = [\n            [x.strip() for x in output[i].strip().split(\" \") if x.strip() != \"\"] for output in list_of_outputs\n        ]\n        list_of_answ = [x for x in list_of_answ if len(x) != 0]\n        total_len = len(list(set([item for sublist in list_of_answ for item in sublist])))\n#         print(total_len)\n        while total_len > 3:\n            for j in range(1, len(list_of_answ) + 1):\n                if len(list_of_answ[-j]) > (j > len(list_of_answ) - 3):\n                    list_of_answ[-j] = list_of_answ[-j][:-1]\n                    break\n            total_len = len(list(set([item for sublist in list_of_answ for item in sublist])))\n\n        o = list(set([item for sublist in list_of_answ for item in sublist]))\n        answer = \" \".join(o[:3]).strip()\n        while answer.find(\"  \") > 0:\n            answer = answer.replace(\"  \", \" \")\n        merge_output.append(answer)\n    submission[\"output\"] = merge_output\n    submission[\"output\"] = submission[\"output\"].astype(str)\n    return submission","c19befec":"TEST_PATH = '\/kaggle\/input\/abstraction-and-reasoning-challenge\/test'\nif debug:\n    test_files = [x for x in os.listdir(TEST_PATH) if x[-3:]=='son'][:2]\nelse:\n    test_files = [x for x in os.listdir(TEST_PATH) if x[-3:]=='son']\n    \nif fast_submit and \"00576224.json\" in test_files:\n    test_files = test_files[:2]","435849f5":"params = {\"skip_train\": 1}\npredictors= [\n    ReconstructMosaic(params),\n    ReconstructMosaicExtract(params),\n]\n\npreprocess_params = [\"initial\"]\n\ncolor_params = [\"coverage\", \"unique\", \"corners\", \"top\", \"grid\"]\n\nsubmission_list = run_parallel(\n    test_files, \n    TEST_PATH, \n    predictors, \n    preprocess_params, \n    color_params, \n    timeout = 300, \n    processes = 2,\n    max_memory_by_process = 0.5e+10,\n    show_results = True\n)\n\nsub_df1 = generate_submission(submission_list, '\/kaggle\/input\/abstraction-and-reasoning-challenge\/sample_submission.csv')\nsub_df1.head()","be0c808e":"predictors= [Puzzle({\"intersection\": 0})]\n                    \npreprocess_params = [\n    \"initial\",\n    \"block_with_side_colors\",\n    \"min_max_blocks\",\n    \"max_area_covered\",\n]\n\ncolor_params = [\"coverage\", \"unique\", \"corners\", \"top\", \"grid\"]\n\nsubmission_list = run_parallel(\n    test_files, \n    TEST_PATH, \n    predictors, \n    preprocess_params, \n    color_params, \n    timeout = 300, \n    processes = 2,\n    max_memory_by_process = 0.5e+10,\n    show_results = True,\n    process_whole_ds = True\n)\n\nsub_df2 = generate_submission(submission_list, '\/kaggle\/input\/abstraction-and-reasoning-challenge\/sample_submission.csv')\nsub_df2.head()","1a2600b7":"final_submission = combine_submission_files([sub_df1,sub_df2],'\/kaggle\/input\/abstraction-and-reasoning-challenge\/sample_submission.csv')\nfinal_submission.to_csv(\"submission.csv\", index=False)","5404a3cf":"final_submission.head()","cf08a964":"In this notebook I demonstrate my solution solving 5 tasks from the test set. I have described my approach here: https:\/\/github.com\/IliaLarchenko\/abstract_reasoning and in discussions https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/154409"}}