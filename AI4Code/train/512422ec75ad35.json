{"cell_type":{"0662ba33":"code","4e389b0e":"code","97fcce2c":"code","4e595e1d":"code","00ff649a":"code","d1d597e4":"code","5e3cdaea":"code","6a4121a1":"code","5893a742":"code","f780d964":"code","ea7a0255":"code","fbca65d2":"code","d87730b1":"code","049343b2":"code","ca183a6a":"code","8aee494d":"code","48580a16":"code","5ac4fc0b":"code","4f96c87c":"code","63fd80fc":"code","63866293":"markdown","d779b78f":"markdown","a9b4dcca":"markdown","26848c32":"markdown","0dc29907":"markdown","60a7fa86":"markdown","b6ebdd2d":"markdown","0f44dbff":"markdown","95b16619":"markdown","4fe2d2f2":"markdown","5510acca":"markdown","4748cfd5":"markdown","a037f0c2":"markdown","9b40ba76":"markdown","4260dd21":"markdown","37418ca9":"markdown","e8986bbe":"markdown","43f5c751":"markdown","add717a6":"markdown","efe50c57":"markdown","316c322a":"markdown","ba0b1135":"markdown"},"source":{"0662ba33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4e389b0e":"#current working directory\nprint(os.getcwd())","97fcce2c":"Code = pd.read_csv(\"..\/input\/crimes-in-boston\/offense_codes.csv\", encoding = 'ISO-8859-1')\nprint(Code.shape, Code, sep = '\\n')","4e595e1d":"len(Code[\"CODE\"].unique()) == len(Code[\"CODE\"])","00ff649a":"# But False, that means One code contains several crimes\nprint(len(Code[\"CODE\"].unique()), len(Code[\"CODE\"]))","d1d597e4":"Crime = pd.read_csv(\"..\/input\/crimes-in-boston\/crime.csv\", encoding = 'ISO-8859-1')\nprint(Crime.shape, Crime, sep = '\\n')","5e3cdaea":"Crime.info()\n# from [RangeIndex: 319073 entries, 0 to 319072] we can find total 319073 values.\n# There are several missing values in [DISTRICT, SHOOTING, UCR_PART, STREET, Lat, Long] columns.","6a4121a1":"import missingno as msno\nmsno.matrix(Crime)\n#If the dataset is heavy, you can choose a sample and give it as input.\n# like this -> msno.matrix(Crime.sample(500))","5893a742":"msno.bar(Crime)\n#We also can use log scale --> msno.bar(Crime, log = True)","f780d964":"msno.heatmap(Crime)","ea7a0255":"msno.dendrogram(Crime)","fbca65d2":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfigure = plt.figure(figsize = (15, 8))\nsns.heatmap(Crime.isnull(), yticklabels = '', cbar = True)","d87730b1":"Crime = Crime.drop(columns = \"SHOOTING\")\n# We will not use SHOOTING column because it has many missing values.\nCrime = Crime.dropna(axis = 0)\n# Remove data that contains missing values.","049343b2":"plt.figure(figsize = (13, 7))\nsns.countplot(x = Crime.HOUR)\n\nplt.figure(figsize = (13, 7))\nsns.countplot(x = Crime.DAY_OF_WEEK)\n# plt.show()","ca183a6a":"plt.figure(figsize = (10, 10))\n\nMonths = \"Janurary\", \"Fabuary\", \"March\", \"April\", \"May\", \"Jun\", \"July\", \"August\", \"September\", \\\n          \"October\", \"November\", \"December\"\nMonthCount = []\n\nfor x in range(len(Months)):\n    x += 1\n    MonthCount.append(len(Crime[Crime['MONTH'] == x]))\n    \n# Use Comprehension!    \nExplode = [0.3 if x == MonthCount.index(max(MonthCount)) else 0 for x in range(12)]\n    \nplt.pie(MonthCount, labels = Months, autopct = '%1.1f%%', shadow = True,\\\n        startangle = 90, counterclock= False, explode = Explode)\nplt.axis('equal')","8aee494d":"plt.figure(figsize = (13, 7))\nsns.countplot(x = Crime.DISTRICT, order = Crime['DISTRICT'].value_counts().index)","48580a16":"from wordcloud import WordCloud\ntext = []\n\nfor i in Crime.OFFENSE_CODE_GROUP:\n    text.append(i)\n    \ntext = ''.join(text)\n\nCLOUD = WordCloud(width = 1600, height = 1200, max_font_size = 300, background_color = 'black')\\\n.generate(text)\nplt.figure(figsize = (20, 10))\nplt.imshow(CLOUD, interpolation = 'bicubic')\nplt.axis(\"off\")\nplt.show()","5ac4fc0b":"# Replace -1 values in Lat\/Long with Nan\nCrime.Lat.replace(-1, None, inplace=True)\nCrime.Long.replace(-1, None, inplace=True)\n\nsns.scatterplot(data = Crime, x = 'Lat', y = 'Long', hue = 'DISTRICT', alpha = 0.1)\nplt.legend(bbox_to_anchor = (1.05, 1), loc = 2)\nplt.figure(figsize = (20, 10))","4f96c87c":"import folium\nfrom folium.plugins import HeatMap\nCrime_map = folium.Map(location = [42.35843, -71.05977], tiles = \"Stamen Toner\", \n                zoom_start = 11)\n# Latitude \/ Longitude of Boston : [42.35843, -71.05977]\n# There are several type of tiles : Stamen Terrain, Stamen Toner, Mapbox Bright,\n#                                   Open Street Map(default), ...\nCrime_map","63fd80fc":"data = Crime[Crime.YEAR == 2017]\ndata = data[[\"Lat\", \"Long\"]]\n\n# If the program is heavy, scale the data with samples.\ndata = data.sample(30000)\n\ndata = [[row['Lat'], row['Long']] for index, row in data.iterrows()]\n\nHeatMap(data, radius = 10).add_to(Crime_map)\nCrime_map","63866293":"* The seaborn heatmap is similar to the matrix in missingno.","d779b78f":"### 1) missingno - Matrix","a9b4dcca":"### 5) seaborn - Heatmap","26848c32":"# ","0dc29907":"# 2. Find missing value\n 1. Seaborn\n 2. Missingno","60a7fa86":"### 3) missingno - Heatmap (Correlation)","b6ebdd2d":"* But False, that means One code contains several crimes","0f44dbff":"* We can find the number of \"CODE column's records\".\n\n* If all records are unique, the result will be True.","95b16619":"### 2) missingno - Bar","4fe2d2f2":"# 4. Conclusion\n\n1. Crimes are most likely to occur at 17:00 and tends to peak at 05:00.\n2. Crimes are most likely to occur on Friday and least likely to occur on Sunday.\n3. Crimes tends to occur mainly between August and October.\n4. ETC..","5510acca":"### 4) missingno - Dendrogram","4748cfd5":"# 1. Road Data\n * ### Note that Encode type!","a037f0c2":"2. Month of Year\n\n-> In summer, when the [discomfort index] is high, be careful not to make people angry.\n\n* For this plot, we have to create new column for 1 ~ 12 month.","9b40ba76":"### Where am I? find working dir.","4260dd21":"* Visualize it\n1. 4 missingno method","37418ca9":"### Crime Statistics by Year, Month, Day, and Hour\n1. Hour of Day, Day of Week\n\n-> The graph shows the number of crimes over time","e8986bbe":"###","43f5c751":"* In the district column, there are very few missing values.\n* In the case of the shooting column, most of them are missing values.\n* And there are some missing values in the STREET, Lat, and Long columns.","add717a6":"* Each bar represents the total amount of values excluding missing values.","efe50c57":"* Variables that have no missing or empty values are automatically removed because they do not have a meaningful correlation. (White space in the heatmap)\n* If the correlation is 1 as above [Lat ~ Long], it can be seen that the same data(Long, Lat ==> Longitude and Latitude).\n* This is because longitude and latitude always exist in bundles.\n\n* And the value of STREET has some correlation with Lat(Long). (<- Is an obvious result!)","316c322a":"* Dendrograms are tree diagrams that show groups formed by clustering observations at each stage and their level of similarity.","ba0b1135":"# 3. Get Insight from each columns' relationship"}}