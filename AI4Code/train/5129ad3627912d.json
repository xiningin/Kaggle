{"cell_type":{"44fb34b7":"code","ca60d671":"code","c49b1244":"code","e0541ed9":"code","b8da5e2e":"code","9f1902a7":"code","023bf1d9":"code","043ba49d":"code","c3c0c3de":"code","b8ed1b84":"code","aa853159":"code","92647303":"code","0ae498f3":"code","6ef561ea":"code","467a0a6f":"code","fad9ebdd":"code","1f652eeb":"code","fb4fd824":"code","d31a03da":"code","fe3e40d1":"code","6ac4db8a":"code","53385a4f":"code","33d592cf":"code","a21c49f7":"code","1d479cf1":"code","38f41efd":"code","ee2604ae":"code","88249a91":"code","2e8b9d98":"code","fffb443a":"code","0c9aeeb2":"code","4e6fc0ce":"code","cf1305b9":"code","66abf872":"code","0890207d":"code","7f5ab357":"code","48252dc1":"code","4aba63ed":"code","17d38c9b":"code","b0045762":"code","9be60c76":"code","116b9f5f":"code","7e84a203":"code","2f2567d0":"code","4a8245cd":"code","1f325c95":"code","92819dd4":"code","8be713a9":"code","c1249c62":"code","6ba7846f":"code","b638eb5f":"code","4a940fa9":"code","646ab331":"code","97d764c8":"code","1cb02c1a":"code","2365debb":"code","a5bf831e":"code","7204b48b":"code","d3775e73":"code","4fa1437a":"code","92b59ed4":"code","7ae453c7":"code","a797992e":"code","2f8674c5":"code","696eefe5":"code","4032b6bb":"code","802155b0":"code","daf5ab5d":"code","f9dd9c35":"code","92979b19":"code","86ebf4b1":"code","426d41c5":"code","04f3c5fc":"code","0e6b64f8":"code","17d6c0f0":"code","ecb00979":"code","9df78357":"markdown","25e3da4e":"markdown","dda8f9c0":"markdown","15c2357f":"markdown","b280a8a6":"markdown","83c10c4d":"markdown","1f0b2607":"markdown","352af284":"markdown","a56bf55f":"markdown","87ea9aca":"markdown","cf1405ef":"markdown","1951ba2b":"markdown","64abd8e3":"markdown","ad44c594":"markdown","c09faa9b":"markdown","318794c0":"markdown","ce801d38":"markdown","149994ea":"markdown"},"source":{"44fb34b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca60d671":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submision=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntrain.head()","c49b1244":"train.shape,test.shape","e0541ed9":"gender_submision.head()","b8da5e2e":"train.info()","9f1902a7":"train.describe(exclude='number')#Name,Tciket,Cabin having high number of unique values,need some feature engineering","023bf1d9":"train.Name.head()","043ba49d":"train['titlelst']=train.Name.str.split(' ').apply(lambda x:x[-1])\ntest['titlelst']=test.Name.str.split(' ').apply(lambda x:x[-1])\n\ntrain['title1st']=train.Name.str.split(',').apply(lambda x:x[1]).str.split('.').apply(lambda x:x[0])\ntest['title1st']=test.Name.str.split(',').apply(lambda x:x[1]).str.split('.').apply(lambda x:x[0])","c3c0c3de":"dict(test.title1st.value_counts())# we can further reduce this by setting 'Rare' value to some title.","b8ed1b84":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.countplot(x='title1st',data=train,hue='Survived')\nplt.xticks(rotation=60)","aa853159":"#Rather than assigning a string 'Rare' values i have encoded them dirrectly ,'Rare' got 4\ntrain.title1st=train.title1st.apply(lambda x:1 if x==' Mr' else 2 if x==' Mrs' else 3 if x==' Miss' else 4)\ntest.title1st=test.title1st.apply(lambda x:1 if x==' Mr' else 2 if x==' Mrs' else 3 if x==' Miss' else 4)","92647303":"print(train.titlelst.value_counts())#Still have many unique values, not so important\ndroplist=['titlelst']","0ae498f3":"droplist.append('Name')","6ef561ea":"print(train.Ticket.str.isnumeric().value_counts())\ntrain.Ticket[train.Ticket.str.isnumeric().apply(lambda x:not x)]","467a0a6f":"train.Ticket=train.Ticket.apply(lambda x:'num' if x.isnumeric() else x)\ntrain.Ticket=train.Ticket.str.split('\/').apply(lambda x:x[0]).str.split(' ').apply(lambda x:x[0]).str.split('.').apply(lambda x:x[0])","fad9ebdd":"test.Ticket=test.Ticket.apply(lambda x:'num' if x.isnumeric() else x)\ntest.Ticket=test.Ticket.str.split('\/').apply(lambda x:x[0]).str.split(' ').apply(lambda x:x[0]).str.split('.').apply(lambda x:x[0])","1f652eeb":"train.Ticket.value_counts()","fb4fd824":"train.Ticket.replace(dict(zip(['WE','P','SW','Fa','F4','SO','SCO'],['Rare']*7)),inplace=True)\ntest.Ticket.replace(dict(zip(['WE','P','SW','Fa','F4','SO','SCO','LP','AQ'],['Rare']*9)),inplace=True)","d31a03da":"sns.countplot('Ticket',data=train,hue='Survived')","fe3e40d1":"train['family_size']=train.SibSp+train.Parch+1# for himself\ntrain['issingle']=train.family_size.apply(lambda x:1 if x==1 else 0)\ntrain['smallfamily']=train.family_size.apply(lambda x:1 if x<=3 and x>1 else 0)\ntrain['middfamily']=train.family_size.apply(lambda x:1 if x<=8 and x>3 else 0)\ntrain['largefamily']=train.family_size.apply(lambda x:1 if x>8 else 0)","6ac4db8a":"test['family_size']=test.SibSp+test.Parch+1\ntest['issingle']=test.family_size.apply(lambda x:1 if x==1 else 0)\ntest['smallfamily']=test.family_size.apply(lambda x:1 if x<=3 and x>1 else 0)\ntest['middfamily']=test.family_size.apply(lambda x:1 if x<=8 and x>3 else 0)\ntest['largefamily']=test.family_size.apply(lambda x:1 if x>8 else 0)","53385a4f":"sns.countplot('family_size',data=train,hue='Survived')","33d592cf":"train.isnull().sum()","a21c49f7":"train.title1st.value_counts()","1d479cf1":"for _ in range(1,5):\n    g=sns.distplot(train.loc[train.title1st==_,'Age'],label=_)\n    g.axvline(train.loc[train.title1st==_,'Age'].mean())\n\nplt.legend()","38f41efd":"train.Age.fillna(28,inplace=True)\ntest.Age.fillna(28,inplace=True)","ee2604ae":"train.Age=train.Age.apply(lambda x:1 if x<=10 else 2 if x<=25 else 3 if x<=45 else 4 if x<=60 else 5)\ntest.Age=test.Age.apply(lambda x:1 if x<=10 else 2 if x<=25 else 3 if x<=45 else 4 if x<=60 else 5)","88249a91":"train.head()","2e8b9d98":"_,ax=plt.subplots(nrows=2,ncols=2,figsize=(10,10))\nax=ax.flatten()\nsns.distplot(train.Fare,ax=ax[0])\nsns.boxplot(x='Pclass',y='Fare',data=train,ax=ax[1])\nsns.boxplot(x='Age',data=train,y='Fare',ax=ax[2])\nsns.boxplot(x='title1st',data=train,y='Fare',ax=ax[3])","fffb443a":"train=train.loc[train.Fare<300]","0c9aeeb2":"train.Cabin.value_counts()#we can convert it into floor rather than specifying each room on the floor.","4e6fc0ce":"train['Cabin']=train.Cabin.map(str).apply(lambda x:x[0])\ntest['Cabin']=test.Cabin.map(str).apply(lambda x:x[0])","cf1305b9":"test.head(1)","66abf872":"train.Cabin.replace({'n':np.nan},inplace=True)\ntest.Cabin.replace({'n':np.nan},inplace=True)","0890207d":"train.Cabin.replace({\"T\":'U'},inplace=True)","7f5ab357":"train.Cabin.value_counts()","48252dc1":"test.isnull().sum()","4aba63ed":"train.Cabin.fillna('U',inplace=True)\n#test.Cabin.fillna('U',inplace=True)","17d38c9b":"df=train[['Fare','Age','Cabin']].dropna()\ndf.head()","b0045762":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(df[['Fare','Age']],df.Cabin)\nknn=KNeighborsClassifier(n_neighbors=3).fit(X_train,y_train)\nknn.score(X_test,y_test)","9be60c76":"test.Fare=test.Fare.fillna(train.Fare.median())","116b9f5f":"_=test[['Fare','Age','Cabin']]\n_=_.loc[_.isnull().Cabin==True,['Fare','Age']]","7e84a203":"y_pred=knn.predict(_)","2f2567d0":"test.isnull().sum()","4a8245cd":"_=test.copy()\n_=_.loc[_.isnull().Cabin==True]\n_.head()","1f325c95":"_.Cabin=y_pred\n_.head()","92819dd4":"test.dropna(inplace=True)\ntest=pd.concat((test,_),axis=0)","8be713a9":"test.sort_index(inplace=True)","c1249c62":"test.shape","6ba7846f":"train.drop(droplist,axis=1,inplace=True)\ntest.drop(droplist,axis=1,inplace=True)","b638eb5f":"cat_features=train.columns[train.dtypes==object]\ncat_features","4a940fa9":"train.describe(exclude='number')","646ab331":"train.dropna(inplace=True)","97d764c8":"train.head()","1cb02c1a":"test.head()","2365debb":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor col in cat_features:\n    le.fit(train[col])\n    test[col]=le.transform(test[col].map(str))\n    train[col]=le.transform(train[col].map(str))","a5bf831e":"test.drop('PassengerId',axis=1,inplace=True)\ntrain.drop('PassengerId',axis=1,inplace=True)","7204b48b":"test.head()","d3775e73":"feature=train.drop(['Survived'],axis=1)\nlabel=train.Survived\nfeature.head()","4fa1437a":"import xgboost as xgb\ndmatrix=xgb.DMatrix(feature,label)\nparams={'objective':'binary:logistic','max_depth':5,'colsample_bytree':.6,'eta':.1,'alpha':1}\nresult=xgb.cv(params,dmatrix,early_stopping_rounds=10,as_pandas=True,num_boost_round=100,nfold=5,metrics='error')\nresult","92b59ed4":"xgb_cl=xgb.train(params,dmatrix,num_boost_round=19)\nxgb.plot_importance(xgb_cl)","7ae453c7":"feature.index=list(range(len(feature)))\nlabel.index=list(range(len(label)))","a797992e":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\nskf=StratifiedKFold(n_splits=5,shuffle=True,random_state=123)\ndef validate(estimator,feature,label):\n    score=[]\n    for trainind,testind in skf.split(feature,label):\n        X_train,y_train=feature.loc[trainind],label[trainind]\n        X_test,y_test=feature.loc[testind],label[testind]\n        estimator.fit(X_train,y_train)\n        score.append(accuracy_score(y_test,estimator.predict(X_test)))\n    return score    ","2f8674c5":"xgb_cl=xgb.XGBClassifier(max_depth=10,colsample_bytree=.6,learning_rate=.01,alpha=1,)\nvalidate(xgb_cl,feature,label)","696eefe5":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(max_depth=3,n_estimators=500)\nvalidate(rf,feature,label)","4032b6bb":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\nvalidate(knn,feature,label)","802155b0":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nvalidate(lr,feature,label)","daf5ab5d":"from sklearn.svm import SVC\nsvm=SVC(C=15)\nvalidate(svm,feature,label)","f9dd9c35":"from lightgbm import LGBMClassifier\nlgb=LGBMClassifier(max_depth=5,colsample_bytree=.6,num_leaves=30,subsample_for_bin=800)\nvalidate(lgb,feature,label)","92979b19":"from sklearn.ensemble import VotingClassifier\nmodels=(['xgboost',xgb_cl],['lgb',lgb],['lr',lr])\nvc=VotingClassifier(estimators=models)\nvalidate(vc,feature,label)","86ebf4b1":"xgb_cl.fit(feature,label)","426d41c5":"y_pred=xgb_cl.predict(test)","04f3c5fc":"t=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission=t[['PassengerId']]\nsubmission['Survived']=y_pred","0e6b64f8":"submission.head(10)","17d6c0f0":"submission.to_csv('submission_new_features_lgb.csv',index=False)","ecb00979":"submission.Survived.value_counts(),label.value_counts()","9df78357":"# Exploring cabin","25e3da4e":"# If you found this as a worthy notebook please upvote.","dda8f9c0":"# Loading datasets","15c2357f":"vc.fit(feature,label)","b280a8a6":"# Outlier detection","83c10c4d":"# A function for validation (StratifiedKfold)","1f0b2607":"# Modling","352af284":"# Making a voting classifier with top 3 performing model.","a56bf55f":"# Imputing missing value of test data by KNN.","87ea9aca":"# Missing values","cf1405ef":"# If you found this as a worthy notebook please upvote.\nFinaly i chose xgboost as final model,its performance is better than the votting classifier.","1951ba2b":"y_pred=vc.predict(test)","64abd8e3":"# Feature engineering on Name","ad44c594":"# Prediction","c09faa9b":"# Simple EDA and feature engineering.","318794c0":"# Final model training.","ce801d38":"# Exploring ticket","149994ea":"# Feature engineering on Sibsp,Parch"}}