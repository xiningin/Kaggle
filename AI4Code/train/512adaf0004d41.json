{"cell_type":{"4a00d097":"code","4c18db72":"code","43e3b556":"code","83333c63":"code","c6f8f503":"code","f307dc14":"code","f6f30380":"code","056e3879":"code","abf79a2c":"code","46824e73":"code","01a040c7":"code","50a651b4":"code","61fcac12":"code","124c84a6":"code","71ece8bc":"code","d016bbee":"code","2334cbfb":"code","1abc94e7":"code","c1e6c9a6":"markdown"},"source":{"4a00d097":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c18db72":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","43e3b556":"import tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","83333c63":"x = np.array(train.drop('label', axis=1))\/255\ny = np.array(train['label'])","c6f8f503":"x=x.reshape((-1,28,28,1))","f307dc14":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)","f6f30380":"data_gen = ImageDataGenerator(\n            rotation_range=12,\n            width_shift_range=0.12,\n            height_shift_range=0.12,\n            shear_range=0.12,\n            validation_split=0.2,)","056e3879":"training_generator = data_gen.flow(x_train,y_train,batch_size=32,subset='training')\nvalidation_generator = data_gen.flow(x_test,y_test,batch_size=32,subset='validation')","abf79a2c":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,5))\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    for x,y in training_generator:\n        plt.imshow((x[0]\/255).reshape(28,28),cmap='gray')\n        plt.title('y={}'.format(y[0]))\n        plt.axis('off')\n        break\nplt.tight_layout()\nplt.show()","46824e73":"cnn = tf.keras.Sequential([\n    \n    layers.Conv2D(32,(3,3),input_shape=(28,28,1),padding='same',activation='relu'),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(2,2),\n    layers.Dropout(0.3),\n    \n    layers.Conv2D(64,(3,3),activation='relu',padding='same'),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(2,2),\n    layers.Dropout(0.3),\n    \n    layers.Conv2D(128,(3,3),activation='relu',padding='same'),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(2,2),\n    layers.Dropout(0.3),\n    \n    layers.Conv2D(256,(3,3),activation='relu',padding='same'),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(2,2),\n    layers.Dropout(0.5),\n    \n    layers.Flatten(),\n    layers.Dense(256,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(10,activation='softmax')\n])","01a040c7":"cnn.compile(optimizer='adam',\n            loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n            metrics=['accuracy']\n           )","50a651b4":"early_stopping = tf.keras.callbacks.EarlyStopping(patience=10)\n\nhistory_cnn = cnn.fit_generator(training_generator,epochs=100,validation_data=validation_generator,callbacks=[early_stopping])","61fcac12":"plt.plot(history_cnn.history['accuracy'])\nplt.plot(history_cnn.history['val_accuracy'])","124c84a6":"plt.plot(history_cnn.history['loss'])\nplt.plot(history_cnn.history['val_loss'])","71ece8bc":"cnn.evaluate( x_test, y_test)","d016bbee":"pred_test_data = np.array(test).reshape((-1,28,28,1))","2334cbfb":"predictions_cnn = cnn.predict_classes(pred_test_data)","1abc94e7":"submit_cnn = pd.DataFrame({'ImageId':range(1,len(predictions_cnn)+1),'Label':predictions_cnn})\n\nsubmit_cnn.to_csv('submission_cnn.csv',index=False)\n","c1e6c9a6":"# Convolutional Neural Network"}}