{"cell_type":{"adbbfdc2":"code","fd2abf35":"code","2898f471":"code","10bec3b0":"code","5c85d839":"code","67693739":"code","49e2d917":"code","d0ccebb1":"code","e6af9fee":"code","477ec675":"markdown","5efe9f3c":"markdown","3e76b4ee":"markdown","a9720679":"markdown","655712d5":"markdown","03f9bbf0":"markdown"},"source":{"adbbfdc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd2abf35":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import XGBClassifier","2898f471":"import warnings\nwarnings.filterwarnings('ignore')","10bec3b0":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","5c85d839":"train = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)\n\nimport gc\ngc.collect()\n\nx_data = train.drop(['id', 'target'], axis=1)\nx_test = test.drop(['id'], axis=1)\n\ny_data = train.target","67693739":"x_train, x_val, y_train, y_val = train_test_split(x_data, y_data)","49e2d917":"model = XGBClassifier(tree_method='gpu_hist', predictor='gpu_predictor')\nmodel.fit(x_train, y_train)\ny_pred = model.predict_proba(x_val)[:,1]\n\nacc = roc_auc_score(y_val, y_pred)\nprint(f'validation roc auc score {acc}')\nprint(f'train roc auc score {roc_auc_score(y_train, model.predict_proba(x_train)[:, 1])}')","d0ccebb1":"y_test = model.predict_proba(x_test)[:, 1]","e6af9fee":"submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsubmission.target = y_test\nsubmission.to_csv('submission.csv', index=False)","477ec675":"### Import library","5efe9f3c":"### Read data","3e76b4ee":"### Save prediction and submission","a9720679":"### Train model","655712d5":"### Split train and val data","03f9bbf0":"### Predict test label"}}