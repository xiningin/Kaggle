{"cell_type":{"5495b4bb":"code","15042da4":"code","370fc213":"code","91f8f318":"code","4b9d2697":"code","d20dad74":"code","0ef9aeac":"code","1fa5066f":"code","10be2025":"code","d8733b7c":"code","90c917e3":"code","6250eb8c":"code","96f8968a":"code","81c2b594":"code","7d73bb64":"code","ef264e85":"code","b1793ae1":"code","fa7740e8":"code","69868366":"code","4b6948d4":"code","9d58fcef":"code","a62cdeb3":"code","db3e3a7d":"code","23db0f9f":"code","b2f4d223":"code","555938e4":"code","1c8e963f":"code","30205ea3":"code","5681e5c4":"code","9a6105b3":"code","f4203008":"code","d551f9ba":"code","80d7df41":"code","c474f6b0":"code","f0beafd2":"code","838b2f73":"code","b03c111e":"code","b9627109":"code","dac60897":"code","75d9fc05":"code","9d5d5a64":"code","06921aea":"code","49ca99a5":"code","726d46a5":"code","1247979b":"code","977569b7":"markdown","a5f23309":"markdown","456b3e99":"markdown","9c86a657":"markdown","20ceeed3":"markdown","1aa7797e":"markdown","4fa48dbc":"markdown","62d15a23":"markdown","9d2019f7":"markdown","18414f37":"markdown","11b4d79c":"markdown","5a0b13ab":"markdown","b38e4173":"markdown","c17216ab":"markdown","2255fb7f":"markdown","6da1adb2":"markdown","79452316":"markdown","a50237ed":"markdown","f8183299":"markdown","674a3f32":"markdown","f211aceb":"markdown","392a06ff":"markdown","b21607f8":"markdown","a1bad873":"markdown","66d2a24c":"markdown","fe35c01e":"markdown","3f35beef":"markdown","4c2a8fdc":"markdown","549928c1":"markdown","1f0ece55":"markdown","9b5e51c4":"markdown","4fae3047":"markdown","6a2a630e":"markdown","dbd19347":"markdown"},"source":{"5495b4bb":"import numpy as np\nimport os\nimport glob\nnp.random.seed(1111)","15042da4":"def create_random_csv_files(fault_classes, number_of_files_in_each_class):\n    os.mkdir(\".\/random_data\/\")  # Make a directory to save created files.\n    for fault_class in fault_classes:\n        for i in range(number_of_files_in_each_class):\n            data = np.random.rand(1024,)\n            file_name = \".\/random_data\/\" + eval(\"fault_class\") + \"_\" + \"{0:03}\".format(i+1) + \".csv\" # This creates file_name\n            np.savetxt(eval(\"file_name\"), data, delimiter = \",\", header = \"V1\", comments = \"\")\n        print(str(eval(\"number_of_files_in_each_class\")) + \" \" + eval(\"fault_class\") + \" files\"  + \" created.\")","370fc213":"create_random_csv_files([\"Fault_1\", \"Fault_2\", \"Fault_3\", \"Fault_4\", \"Fault_5\"], number_of_files_in_each_class = 100)","91f8f318":"files = np.sort(glob.glob(\".\/random_data\/*\"))\nprint(\"Total number of files: \", len(files))\nprint(\"Showing first 10 files...\")\nfiles[:10]","4b9d2697":"print(files[0])","d20dad74":"print(files[0][14:21])","0ef9aeac":"import pandas as pd\nimport re            # To match regular expression for extracting labels","1fa5066f":"def data_generator(file_list, batch_size = 20):\n    i = 0\n    while True:\n        if i*batch_size >= len(file_list):  # This loop is used to run the generator indefinitely.\n            i = 0\n            np.random.shuffle(file_list)\n        else:\n            file_chunk = file_list[i*batch_size:(i+1)*batch_size] \n            data = []\n            labels = []\n            label_classes = [\"Fault_1\", \"Fault_2\", \"Fault_3\", \"Fault_4\", \"Fault_5\"]\n            for file in file_chunk:\n                temp = pd.read_csv(open(file,'r')) # Change this line to read any other type of file\n                data.append(temp.values.reshape(32,32,1)) # Convert column data to matrix like data with one channel\n                pattern = \"^\" + eval(\"file[14:21]\")      # Pattern extracted from file_name\n                for j in range(len(label_classes)):\n                    if re.match(pattern, label_classes[j]): # Pattern is matched against different label_classes\n                        labels.append(j)  \n            data = np.asarray(data).reshape(-1,32,32,1)\n            labels = np.asarray(labels)\n            yield data, labels\n            i = i + 1","10be2025":"generated_data = data_generator(files, batch_size = 10)","d8733b7c":"num = 0\nfor data, labels in generated_data:\n    print(data.shape, labels.shape)\n    print(labels, \"<--Labels\")  # Just to see the lables\n    print()\n    num = num + 1\n    if num > 5: break","90c917e3":"import tensorflow as tf","6250eb8c":"def tf_data_generator(file_list, batch_size = 20):\n    i = 0\n    while True:\n        if i*batch_size >= len(file_list):  \n            i = 0\n            np.random.shuffle(file_list)\n        else:\n            file_chunk = file_list[i*batch_size:(i+1)*batch_size] \n            data = []\n            labels = []\n            label_classes = tf.constant([\"Fault_1\", \"Fault_2\", \"Fault_3\", \"Fault_4\", \"Fault_5\"]) # This line has changed.\n            for file in file_chunk:\n                temp = pd.read_csv(open(file,'r'))\n                data.append(temp.values.reshape(32,32,1)) \n                pattern = tf.constant(eval(\"file[14:21]\"))  # This line has changed\n                for j in range(len(label_classes)):\n                    if re.match(pattern.numpy(), label_classes[j].numpy()):  # This line has changed.\n                        labels.append(j)\n            data = np.asarray(data).reshape(-1,32,32,1)\n            labels = np.asarray(labels)\n            yield data, labels\n            i = i + 1","96f8968a":"check_data = tf_data_generator(files, batch_size = 10)","81c2b594":"num = 0\nfor data, labels in check_data:\n    print(data.shape, labels.shape)\n    print(labels, \"<--Labels\")\n    print()\n    num = num + 1\n    if num > 5: break","7d73bb64":"batch_size = 15\ndataset = tf.data.Dataset.from_generator(tf_data_generator,args= [files, batch_size],output_types = (tf.float32, tf.float32),\n                                                output_shapes = ((None,32,32,1),(None,)))","ef264e85":"num = 0\nfor data, labels in dataset:\n    print(data.shape, labels.shape)\n    print(labels)\n    print()\n    num = num + 1\n    if num > 7: break","b1793ae1":"import shutil","fa7740e8":"fault_folders = [\"Fault_1\", \"Fault_2\", \"Fault_3\", \"Fault_4\", \"Fault_5\"]\nfor folder_name in fault_folders:\n    os.mkdir(os.path.join(\".\/random_data\", folder_name))","69868366":"for file in files:\n    pattern = \"^\" + eval(\"file[14:21]\")\n    for j in range(len(fault_folders)):\n        if re.match(pattern, fault_folders[j]):\n            dest = os.path.join(\".\/random_data\/\",eval(\"fault_folders[j]\"))\n            shutil.move(file, dest)","4b6948d4":"glob.glob(\".\/random_data\/*\")","9d58fcef":"glob.glob(\".\/random_data\/Fault_1\/*\")[:10] # Showing first 10 files of Fault_1 folder","a62cdeb3":"glob.glob(\".\/random_data\/Fault_3\/*\")[:10] # Showing first 10 files of Falut_3 folder","db3e3a7d":"fault_1_files = glob.glob(\".\/random_data\/Fault_1\/*\")\nfault_2_files = glob.glob(\".\/random_data\/Fault_2\/*\")\nfault_3_files = glob.glob(\".\/random_data\/Fault_3\/*\")\nfault_4_files = glob.glob(\".\/random_data\/Fault_4\/*\")\nfault_5_files = glob.glob(\".\/random_data\/Fault_5\/*\")","23db0f9f":"from sklearn.model_selection import train_test_split","b2f4d223":"fault_1_train, fault_1_test = train_test_split(fault_1_files, test_size = 20, random_state = 5)\nfault_2_train, fault_2_test = train_test_split(fault_2_files, test_size = 20, random_state = 54)\nfault_3_train, fault_3_test = train_test_split(fault_3_files, test_size = 20, random_state = 543)\nfault_4_train, fault_4_test = train_test_split(fault_4_files, test_size = 20, random_state = 5432)\nfault_5_train, fault_5_test = train_test_split(fault_5_files, test_size = 20, random_state = 54321)","555938e4":"fault_1_train, fault_1_val = train_test_split(fault_1_train, test_size = 10, random_state = 1)\nfault_2_train, fault_2_val = train_test_split(fault_2_train, test_size = 10, random_state = 12)\nfault_3_train, fault_3_val = train_test_split(fault_3_train, test_size = 10, random_state = 123)\nfault_4_train, fault_4_val = train_test_split(fault_4_train, test_size = 10, random_state = 1234)\nfault_5_train, fault_5_val = train_test_split(fault_5_train, test_size = 10, random_state = 12345)","1c8e963f":"train_file_names = fault_1_train + fault_2_train + fault_3_train + fault_4_train + fault_5_train\nvalidation_file_names = fault_1_val + fault_2_val + fault_3_val + fault_4_val + fault_5_val\ntest_file_names = fault_1_test + fault_2_test + fault_3_test + fault_4_test + fault_5_test","30205ea3":"print(\"Number of train_files:\" ,len(train_file_names))\nprint(\"Number of validation_files:\" ,len(validation_file_names))\nprint(\"Number of test_files:\" ,len(test_file_names))","5681e5c4":"batch_size = 10\ntrain_dataset = tf.data.Dataset.from_generator(tf_data_generator, args = [train_file_names, batch_size], \n                                              output_shapes = ((None,32,32,1),(None,)),\n                                              output_types = (tf.float32, tf.float32))\n\nvalidation_dataset = tf.data.Dataset.from_generator(tf_data_generator, args = [validation_file_names, batch_size],\n                                                   output_shapes = ((None,32,32,1),(None,)),\n                                                   output_types = (tf.float32, tf.float32))\n\ntest_dataset = tf.data.Dataset.from_generator(tf_data_generator, args = [test_file_names, batch_size],\n                                             output_shapes = ((None,32,32,1),(None,)),\n                                             output_types = (tf.float32, tf.float32))","9a6105b3":"from tensorflow.keras import layers","f4203008":"model = tf.keras.Sequential([\n    layers.Conv2D(16, 3, activation = \"relu\", input_shape = (32,32,1)),\n    layers.MaxPool2D(2),\n    layers.Conv2D(32, 3, activation = \"relu\"),\n    layers.MaxPool2D(2),\n    layers.Flatten(),\n    layers.Dense(16, activation = \"relu\"),\n    layers.Dense(5, activation = \"softmax\")\n])\nmodel.summary()","d551f9ba":"model.compile(loss = \"sparse_categorical_crossentropy\", optimizer = \"adam\", metrics = [\"accuracy\"])","80d7df41":"steps_per_epoch = np.int(np.ceil(len(train_file_names)\/batch_size))\nvalidation_steps = np.int(np.ceil(len(validation_file_names)\/batch_size))\nsteps = np.int(np.ceil(len(test_file_names)\/batch_size))\nprint(\"steps_per_epoch = \", steps_per_epoch)\nprint(\"validation_steps = \", validation_steps)\nprint(\"steps = \", steps)","c474f6b0":"model.fit(train_dataset, validation_data = validation_dataset, steps_per_epoch = steps_per_epoch,\n         validation_steps = validation_steps, epochs = 10)","f0beafd2":"test_loss, test_accuracy = model.evaluate(test_dataset, steps = 10)","838b2f73":"print(\"Test loss: \", test_loss)\nprint(\"Test accuracy:\", test_accuracy)","b03c111e":"def create_prediction_set(num_files = 20):\n    os.mkdir(\".\/random_data\/prediction_set\")\n    for i in range(num_files):\n        data = np.random.randn(1024,)\n        file_name = \".\/random_data\/prediction_set\/\"  + \"file_\" + \"{0:03}\".format(i+1) + \".csv\" # This creates file_name\n        np.savetxt(eval(\"file_name\"), data, delimiter = \",\", header = \"V1\", comments = \"\")\n    print(str(eval(\"num_files\")) + \" \"+ \" files created in prediction set.\")","b9627109":"create_prediction_set(num_files = 55)","dac60897":"prediction_files = np.sort(glob.glob(\".\/random_data\/prediction_set\/*\"))\nprint(\"Total number of files: \", len(prediction_files))\nprint(\"Showing first 10 files...\")\nprediction_files[:10]","75d9fc05":"def generator_for_prediction(file_list, batch_size = 20):\n    i = 0\n    while i <= (len(file_list)\/batch_size):\n        if i == np.floor(len(file_list)\/batch_size):\n            file_chunk = file_list[i*batch_size:len(file_list)]\n            if len(file_chunk)==0:\n                break\n        else:\n            file_chunk = file_list[i*batch_size:(i+1)*batch_size] \n        data = []\n        for file in file_chunk:\n            temp = pd.read_csv(open(file,'r'))\n            data.append(temp.values.reshape(32,32,1)) \n        data = np.asarray(data).reshape(-1,32,32,1)\n        yield data\n        i = i + 1","9d5d5a64":"pred_gen = generator_for_prediction(prediction_files,  batch_size = 10)\nfor data in pred_gen:\n    print(data.shape)","06921aea":"batch_size = 10\nprediction_dataset = tf.data.Dataset.from_generator(generator_for_prediction,args=[prediction_files, batch_size],\n                                                 output_shapes=(None,32,32,1), output_types=(tf.float32))","49ca99a5":"steps = np.int(np.ceil(len(prediction_files)\/batch_size))\npredictions = model.predict(prediction_dataset,steps = steps)","726d46a5":"print(\"Shape of prediction array: \", predictions.shape)\npredictions","1247979b":"np.argmax(predictions, axis = 1)","977569b7":"Create five different folders.","a5f23309":"There are 350 files in training set. Batch_size is 10. So if the generator runs 35 times, it will correspond to one epoch. Therefor, we should set `steps_per_epoch` to 35. Similarly, `validation_steps = 5` and in `model.evaluate()`, `steps = 10`.","456b3e99":"Now that data have been created, we will go to the next step. That is, define a generator, preprocess the time series like data into a matrix like shape such that a 2-D CNN can ingest it. \n\n## 2. Write a generator that reads data in chunks and preprocesses it\nGenerator are similar to functions with one important difference. While functions produce all their outputs at once, generators produce their outputs one by one and that too when asked. `yield` keyword converts a function into a generator. Generators can run for a fixed number of times or indefinitely depending on the loop structure used inside it. For our application, we will use a generator that runs indefinitely.","9c86a657":"To read any other file format, inside the generator change the line that reads files. This will enable us to read different file formats, be it `.txt` or `.npz` or any other. Preprocessing of data, different from what we have done in this blog, can be done within the generator loop.\n\nNow we will check whether the generator works as intended or not. We will set `batch_size` to 10. This means that files in chunks of 10 will be read and processed. The list of files from which 10 are chosen can be an ordered file list or shuffled list. In case, the files are not shuffled, use `np.random.shuffle(file_list)` to shuffle files. \n\nIn the demonstration, we will read files from an ordered list. This will help us check any errors in the code. ","20ceeed3":"Check whether `dataset` works or not.","1aa7797e":"Outsputs of prediction are 5 dimensional vector. This is so because we have used 5 neurons in the output layer and our activation function is softmax. The 5 dimensional output vector for an input add to 1. So it can be interpreted as probability. Thus we should classify the input to a class, for which prediction probability is maximum. To get the class corresponding to maximum probability, we can use `np.argmax()` command.","4fa48dbc":"The following generator takes a list of file names as first argument. The second argument is `batch_size`. `batch_size` determines how many files we will process at one go. This is determined by how much memory do we have. If all data can be loaded into memory, there is no need for generators. In case our data size is huge, we can process chunks of it.  \n\nAs we will be solving a classification problem, we have to assign labels to each raw data. We will use following labels for convenience.\n\n|Class| Label|\n|-----|------|\n|Fault_1| 0|\n|Fault_2| 1|\n|Fault_3| 2|\n|Fault_4| 3|\n|Fault_5| 4|\n\nThe generator will `yield` both data and labels.","62d15a23":"This brings us to the end of the blog. As we had planned in the beginning, we have created random data files, a generator, and trained a model using that generator. The above code can be tweaked slightly to read any type of files other than `.csv`. And now we can train our model without worrying about the data size. Whether the data size is 10GB or 750GB, our approach will work for both.\n\nAs a final note, I want to stress that, this is not the only approach to do the task. As I have mentioned previously, in `Tensorflow`, you can do the same thing in several different ways. The approach I have chosen seemed natural to me. I have neither strived for efficiency nor elegance. If readers have any better idea, I would be happy to know of it.\n\nI hope, this blog will be of help to readers. Please bring any errors or omissions to my notice.\n\n**Update**: If along with reading, one has to perform complex transformations on extracted data (say, doing spectrogram on each segment of data, etc.), the naive approach presented in this blog may turn out to be slow. But there are ways to make these computations faster. The author himself achieved 10x speedup as compared to naive implementation in one application. If you run into this problem and are unable to solve it, contact the author. A blog discussing this speedup technique will be posted later.","9d2019f7":"Before we fit the model, we have to do one important calculation. Remember that our generators are infinite loops. So if no stopping criteria is given, it will run indefinitely. But we want our model to run for, say, 10 epochs. So our generator should loop over the data files just 10 times and no more. This is achieved by setting the arguments `steps_per_epoch` and `validation_steps` to desired numbers in `model.fit()`. Similarly while evaluating model, we need to set the argument `steps` to a desired number in `model.evaluate()`.","18414f37":"To extract labels from file name, extract the part of the file name that corresponds to fault type. ","11b4d79c":"Create some files for prediction set.","5a0b13ab":"Before building the data pipeline, we will first move files corresponding to each fault class into different folders. This will make it convenient to split data into training, validation, and test set, keeping the balanced nature of the dataset intact.","b38e4173":"Move files into those folders.","c17216ab":"Note that the new generator created by using a few `tensorflow` commands works just fine as our previous generator. This new generator can now be integrated with a `tensorflow dataset`.","2255fb7f":"As expected, model performs terribly. ","6da1adb2":"Now, we will create a generator to read these files in chunks. This generator will be slightly different from our previous generator. Firstly, we don't want the generator to run indefinitely. Secondly, we don't have any labels. So this generator should only `yield` data. This is how we achieve that.","79452316":"Check whether the generator works or not.","a50237ed":"Run the above cell multiple times to observe different labels. Label 1 appears only when all the files corresponding to \"Fault_1\" have been read. There are 100 files for \"Fault_1\" and we have set batch_size to 10. In the above cell we are iterating over the generator only 6 times. When number of iterations become greater than 10, we see label 1 and subsequently other labels. This will happen only if our initial file list is not shuffled. If the original list is shuffled, we will get random labels.","f8183299":"In this post, we will read multiple `.csv` files into Tensorflow using generators. But the method we will discuss is general enough to work for other file formats as well. We will demonstrate the procedure using 500 `.csv` files. These files have been created using random numbers. Each file contains only 1024 numbers in one column. This method can easily be extended to huge datasets involving thousands of `.csv` files. As the number of files becomes large, we can't load the whole data into memory. So we have to work with chunks of it. Generators help us do just that conveniently. In this post, we will read multiple files using a custom generator.\n \nThis post is self-sufficient in the sense that readers don't have to download any data from anywhere. Just run the following codes sequentially. First, a folder named \"random_data\" will be created in current working directory and `.csv` files will be saved in it. Subsequently files will be read from that folder and processed. Just make sure that your current working directory doesn't have an old folder named \"random_data\". Then run the following codes. Jupyter notebook of this post can be found [here](https:\/\/github.com\/biswajitsahoo1111\/cbm_codes_open\/blob\/master\/notebooks\/Reading_multiple_files_in_Tensorflow_2.ipynb).","674a3f32":"Test whether modified generator works or not.","f211aceb":"Create a `tensorflow dataset`.","392a06ff":"Compile the model.","b21607f8":"Prepare that data for training set, validation set, and test_set. For each fault type, we will keep 70 files for training, 10 files for validation and 20 files for testing.","a1bad873":"## How to make predictions?\nUntil now, we have evaluated our model on a kept out test set. For our test set, both data and labels were known. So we evaluated its performance. But often times, for test set, we don't have access to true labels. Rather we have to make predictions on the data available. This is the case in online competitions where we have to submit our predictions on a test set for which don't know the labels. We will call this set (without any labels) the prediction set. This naming convention is arbitray but we will stick with it.\n\nIf the whole of our prediction set fits into memory, we can just call `model.predict()` on this data and then use `np.argmax()` to obtain predicted class labels. Otherwise, we can read files in prediction set in chunks, make predictions on the chunks and finally append our result.\n\nYet another pedantic way of doing this is to write a generator to read files from the prediciton set in chunks and make predictions on it. We will show how this approach works. As we don't have a prediction set yet, we will first create some files and save it to the prediction set.","66d2a24c":"Now create the model.","fe35c01e":"## 1. Create 500 `.csv` files of random data\n\nAs we intend to train a CNN model for classification using our data, we will generate data for 5 different classes. Following is the process that we will follow.\n* Each `.csv` file will have one column of data with 1024 entries.\n* Each file will be saved using one of the following names (Fault_1, Fault_2, Fault_3, Fault_4, Fault_5). The dataset is balanced, meaning, for each category, we have approximately same number of observations. Data files in \"Fault_1\" \ncategory will have names as \"Fault_1_001.csv\", \"Fault_1_002.csv\", \"Fault_1_003.csv\", ..., \"Fault_1_100.csv\". Similarly for other classes.","3f35beef":"# Outline:\n1. Create 500 `\".csv\"` files and save it in the folder \"random_data\" in current directory.\n2. Write a generator that reads data from the folder in chunks and preprocesses it.\n3. Feed the chunks of data to a CNN model and train it for several epochs.","4c2a8fdc":"Now we will create a `tensorflow dataset` using the generator. `Tensorflow` datasets can conveniently be used to train `tensorflow` models.","549928c1":"This also works fine. Now, we will train a full CNN model using the generator. As is done in every model, we will first shuffle data files. Split the files into train, validation, and test set. Using the `tf_data_generator` create three tensorflow datasets corresponding to train, validation, and test data respectively. Finally, we will create a simple CNN model. Train it using train dataset, see its performance on validation dataset, and obtain prediction using test dataset. Keep in mind that our aim is not to improve performance of the model. As the data are random, don't expect to see good performance. The aim is only to create a pipeline. \n\n## 3. Building data pipeline and training CNN model","1f0ece55":"First create a function that will generate random files. ","9b5e51c4":"A `tensorflow dataset` can be created form numpy arrays or from generators.Here, we will create it using a generator. Use of the previously created generator as it is in `tensorflow datasets` doesn't work (Readers can verify this). This happens because of the inability of regular expression to compare a \"string\" with a \"byte string\". \"byte strings\" are generated by default in tensorflow. As a way around, we will make modifications to the earlier generator and use it with tensorflow datasets. Note that we will only modified three lines. Modified lines are accompanied by commented texts beside it.","4fae3047":"We will use `Tensorflow 2` to run our deep learning model. `Tensorflow` is very flexible. A given task can be done in different ways in it. The method we will use is not the only one. Readers are encouraged to explore other ways of doing the same. Below is an outline of three different tasks considered in this post.","6a2a630e":"The data are randomly generated. So we should not be surprised by this result. Also note that the for each new data, softmax outputs are close to each other. This means that the network is not very sure about the classification result. ","dbd19347":"Now use the function to create 100 files each for five fault types. "}}