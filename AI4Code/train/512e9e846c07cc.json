{"cell_type":{"b11dd268":"code","c51bca81":"code","4c3eeed2":"code","e89c5d57":"code","67e4bf0e":"code","dc81c96a":"code","3277b386":"code","d8e4c6ee":"code","4b4bcb8b":"code","20115195":"code","c885858a":"code","14ff5071":"code","d6be991f":"code","564a1a90":"code","502ac00b":"code","cd55b53a":"code","3abbb8ab":"code","cded6877":"code","ec6c6505":"code","368619bb":"code","0a9c59e5":"code","cf307c75":"code","6fd87d38":"markdown","2a8af24b":"markdown","8897f2e8":"markdown","ba7d0a8d":"markdown","b56ea543":"markdown","19aab355":"markdown","075e0ce9":"markdown","50499ea2":"markdown"},"source":{"b11dd268":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as ply\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport folium \nfrom folium import plugins\nimport warnings\nwarnings.filterwarnings('ignore')","c51bca81":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#Importing the 2019,2018,2017 Datasets\ndf_2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\n\ndf_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\n\ndf_2017=pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',encoding='ISO-8859-1')\n","4c3eeed2":" #df_2017.head()\n# df_2018.head()\ndf_2019.head()","e89c5d57":"df_2019.columns =df_2019.iloc[0]\ndf_2019.drop([0], inplace =True)\n\ndf_2018.columns =df_2018.iloc[0]\ndf_2018.drop([0], inplace =True)\n\n","67e4bf0e":"def return_count(data,question_part):\n    \"\"\"Counts occurences of each value in a given column\"\"\"\n    counts_df = data[question_part].value_counts().to_frame()\n    return counts_df\n\ndef return_percentage(data,question_part):\n    \"\"\"Calculates percent of each value in a given column\"\"\"\n    total = data[question_part].count()\n    counts_df= data[question_part].value_counts().to_frame()\n    percentage_df = (counts_df*100)\/total\n    return percentage_df\n\n\n    \ndef plot_graph(data,question,title,x_axis_title,y_axis_title):\n    \"\"\" plots a percentage bar graph\"\"\"\n    df = return_percentage(data,question)\n    \n    trace1 = go.Bar(\n                    x = df.index,\n                    y = df[question],\n                    #orientation='h',\n                    marker = dict(color='dodgerblue',\n                                 line=dict(color='black',width=1)),\n                    text = df.index)\n    data = [trace1]\n    layout = go.Layout(barmode = \"group\",title=title,width=800, height=500,\n                       xaxis=dict(type='category',categoryorder='array',categoryarray=salary_order,title=y_axis_title),\n                       yaxis= dict(title=x_axis_title))\n                       \n    fig = go.Figure(data = data, layout = layout)\n    iplot(fig) ","dc81c96a":"df_all_surveys = pd.DataFrame(data = [len(df_2017),len(df_2018),len(df_2019)],\n                          columns = ['Number of responses'], index = ['2017','2018','2019'])\ndf_all_surveys.index.names = ['Year of Survey']\n\n\nx = df_all_surveys['Number of responses'].index\ny = df_all_surveys['Number of responses'].values\n\n\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(\n            x=['Year 2017','Year 2018','Year 2019'],\n            y=y,\n            text=y,\n            width=0.5,\n            textposition='auto',\n            marker=dict(color='orangered')\n )])\n\nfig.data[0].marker.line.width = 1\nfig.data[0].marker.line.color = \"black\"\nfig.update_layout(yaxis=dict(title='Number of Participants'),width=700,height=500,\n                  title='Total number of respondents over last 3 years',\n                  xaxis=dict(title='Year'))\nfig.show()","3277b386":"def plot_graph(data,question,title,x_axis_title):\n    df = return_percentage(data,question)\n    \n    trace1 = go.Bar(\n                    y = df.index,\n                    x = df[question][0:20],\n                    orientation='h',\n                    marker = dict(color='lawngreen',line=dict(color='black',width=1)),\n                    text = df.index)\n    data = [trace1]\n    layout = go.Layout(barmode = \"group\",title=title,width=800, height=500, \n                       xaxis= dict(title=x_axis_title),\n                       yaxis=dict(autorange=\"reversed\"),\n                       showlegend=False)\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()\n     \nresponse_count = df_2019['In which country do you currently reside?'].count()\nplot_graph(df_2019,'In which country do you currently reside?','Top 20 countries of respondents in 2019','Percentage of Respondents')","d8e4c6ee":"plot_graph(df_2018,'In which country do you currently reside?','Top 20 countries of respondents in 2018','Percentage of Respondents')","4b4bcb8b":"plot_graph(df_2017,'Country','Top 20 countries of respondents','Percentage of Respondents')","20115195":"country_dist=df_2019.iloc[:,4].value_counts()\nfig = px.choropleth(country_dist.values, locations=country_dist.index,\n                    locationmode='country names',\n                    color=country_dist.values,\n                    color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title=\"Countrywise Distribution of data science Participatens in 2019\")\nfig.show()","c885858a":"country_dist=df_2018.iloc[:,4].value_counts()\nfig = px.choropleth(country_dist.values, locations=country_dist.index,\n                    locationmode='country names',\n                    color=country_dist.values,\n                    color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title=\"Countrywise Distribution of data science Participatens in 2018\")\nfig.show()","14ff5071":"country_dist=df_2017.iloc[:,1].value_counts()\nfig = px.choropleth(country_dist.values, locations=country_dist.index,\n                    locationmode='country names',\n                    color=country_dist.values,\n                    color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title=\"Countrywise Distribution of data science Participatens in 2017\")\nfig.show()","d6be991f":"df_2019['In which country do you currently reside?'].replace(\n                                                   {'United States of America':'United States',\n                                                    'Viet Nam':'Vietnam',\n                                                    \"People 's Republic of China\":'China',\n                                                    \"United Kingdom of Great Britain and Northern Ireland\":'United Kingdom',\n                                                    \"Hong Kong (S.A.R.)\":\"Hong Kong\"},inplace=True)\n\n\ndf_2018['In which country do you currently reside?'].replace(\n                                                   {'United States of America':'United States',\n                                                    'Viet Nam':'Vietnam',\n                                                    \"People 's Republic of China\":'China',\n                                                    \"United Kingdom of Great Britain and Northern Ireland\":'United Kingdom',\n                                                    \"Hong Kong (S.A.R.)\":\"Hong Kong\"},inplace=True)\ndf_2018['In which country do you currently reside?'].replace(\n                                                   {'United States of America':'United States',\n                                                    'Viet Nam':'Vietnam',\n                                                    \"People 's Republic of China\":'China',\n                                                    \"United Kingdom of Great Britain and Northern Ireland\":'United Kingdom',\n                                                    \"Hong Kong (S.A.R.)\":\"Hong Kong\"},inplace=True)\n\n\n\n# Splitting all the datasets genderwise\nmale_2019 = df_2019[df_2019['What is your gender? - Selected Choice']=='Male']\nfemale_2019 = df_2019[df_2019['What is your gender? - Selected Choice']=='Female']\n\nmale_2018 = df_2018[df_2018['What is your gender? - Selected Choice']=='Male']\nfemale_2018 = df_2018[df_2018['What is your gender? - Selected Choice']=='Female']\n\nmale_2017 = df_2017[df_2017['GenderSelect']=='Male']\nfemale_2017 = df_2017[df_2017['GenderSelect']=='Female']\n\n\n# Top-10 Countries with Respondents in 2019\ntopn = 10\ncount_male = male_2019['In which country do you currently reside?'].value_counts()[:topn].reset_index()\ncount_female = female_2019['In which country do you currently reside?'].value_counts()[:topn].reset_index()\n\npie_men = go.Pie(labels=count_male['index'],values=count_male['In which country do you currently reside?'],name=\"Men\",hole=0.4,domain={'x': [0,0.46]})\npie_women = go.Pie(labels=count_female['index'],values=count_female['In which country do you currently reside?'],name=\"Women\",hole=0.5,domain={'x': [0.52,1]})\n\nlayout = dict(title = 'Top-10 Countries with Respondents in 2019', font=dict(size=10), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.2, y=0.5, text='Men', showarrow=False, font=dict(size=20)),\n                             dict(x=0.8, y=0.5, text='Women', showarrow=False, font=dict(size=20)) ])\n\nfig = dict(data=[pie_men, pie_women], layout=layout)\npy.iplot(fig)","564a1a90":"def get_name(code):\n    '''\n    Translate code to name of the country\n    '''\n    try:\n        name = pycountry.countries.get(alpha_3=code).name\n    except:\n        name=code\n    return name\n\ncountry_number = pd.DataFrame(female_2019['In which country do you currently reside?'].value_counts())\ncountry_number['country'] = country_number.index\ncountry_number.columns = ['number', 'country']\ncountry_number.reset_index().drop(columns=['index'], inplace=True)\ncountry_number['country'] = country_number['country'].apply(lambda c: get_name(c))\ncountry_number.head(5)\n\n\n\nworldmap = [dict(type = 'choropleth', locations = country_number['country'], locationmode = 'country names',\n                 z = country_number['number'], colorscale = \"Blues\", reversescale = True, \n                 marker = dict(line = dict( width = 0.5)), \n                 colorbar = dict(autotick = False, title = 'Number of respondents'))]\n\nlayout = dict(title = 'The Nationality of Female Respondents in 2019', geo = dict(showframe = False, showcoastlines = True, \n                                                                projection = dict(type = 'Mercator')))\n\nfig = dict(data=worldmap, layout=layout)\npy.iplot(fig, validate=False)","502ac00b":"colors1 = ['dodgerblue', 'plum', '#F0A30A','#8c564b'] \ncounts = df_2019['What is your gender? - Selected Choice'].value_counts(sort=True)\nlabels = counts.index\nvalues = counts.values\n\npie = go.Pie(labels=labels, values=values, marker=dict(colors=colors1,line=dict(color='#000000', width=1)))\nlayout = go.Layout(title='Gender Distribution in 2019')\n\nfig = go.Figure(data=[pie], layout=layout)\npy.iplot(fig)","cd55b53a":"colors2 = ['dodgerblue', 'plum', '#F0A30A','#8c564b'] \ngender_count_2019 = df_2019['What is your gender? - Selected Choice'].value_counts(sort=True)\ngender_count_2018 = df_2018['What is your gender? - Selected Choice'].value_counts(sort=True)\ngender_count_2017 = df_2017['GenderSelect'].value_counts(sort=True)\n\n\nlabels = [\"Male \", \"Female\", \"Prefer not to say \", \"Prefer to self-describe\"]\nlabels1 = [\"Male \", \"Female\",\"A different identity\", \"Non-binary\",\"genderqueer, or gender non-conforming\"]\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'},{'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels1, values=gender_count_2017.values, name=\"2017\",marker=dict(colors=colors2)),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=gender_count_2018.values, name=\"2018\",marker=dict(colors=colors2)),\n              1, 2)\nfig.add_trace(go.Pie(labels=labels, values=gender_count_2019.values, name=\"2019\",marker=dict(colors=colors2)),\n              1, 3)\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.5, hoverinfo=\"label+percent+name\")\n\nfig.data[0].marker.line.width = 1\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 1\nfig.data[1].marker.line.color = \"black\"\nfig.data[2].marker.line.width = 1\nfig.data[2].marker.line.color = \"black\"\n\nfig.update_layout(\n    title_text=\"Gender Distribution over the years\",font=dict(size=12), legend=dict(orientation=\"h\"),\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='2017', x=0.11, y=0.5, font_size=20, showarrow=False),\n                 dict(text='2018', x=0.5, y=0.5, font_size=20, showarrow=False),\n                 dict(text='2019', x=0.88, y=0.5, font_size=20, showarrow=False)])\nfig.show()","3abbb8ab":"female_country_2019 = female_2019['In which country do you currently reside?']\nfemale_country_2018 = female_2018['In which country do you currently reside?']\nfemale_country_2017 = female_2017['Country']\n                                                                  \nf_2019 = female_country_2019[(female_country_2019 == 'India') | (female_country_2019 == 'United States')].value_counts()\nf_2018 = female_country_2018[(female_country_2018 == 'India') | (female_country_2018 == 'United States')].value_counts()\nf_2017 = female_country_2017[(female_country_2017 == 'India') | (female_country_2017 == 'United States')].value_counts()                                                                  \n                                         \nfemale_country_count = pd.DataFrame(data = [f_2017,f_2018,f_2019],index = ['2017','2018','2019'])    \n\nfemale_country_count['total'] = [len(female_2017),len(female_2018),len(female_2019)]\nfemale_country_count['US%'] = female_country_count['United States']\/female_country_count['total']*100\nfemale_country_count['India%'] = female_country_count['India']\/female_country_count['total']*100\n\nfemale_country_count[['India%','US%']].plot(kind='bar',color=['dodgerblue','skyblue'],linewidth=1,edgecolor='k')\nplt.gcf().set_size_inches(10,8)\nplt.title('Pattern of US and Indian Female respondents over the years', fontsize = 15)\nplt.xticks(rotation=0,fontsize='10', horizontalalignment='right')\nplt.xlabel('Year of Survey',fontsize=15)\nplt.ylabel('Percentage of Respondents',fontsize=15)\nplt.legend(fontsize=15,bbox_to_anchor=(1.04,0.5), loc=\"center left\",labels=['India','US'])\nplt.show()","cded6877":"df_2017['Age in years'] = pd.cut(x=df_2017['Age'], bins=[18,21,25,29,34,39,44,49,54,59,69,79], \n                                                        labels=['18-21',\n                                                                '22-24',\n                                                                '25-29',\n                                                                '30-34',\n                                                                '35-39',\n                                                                '40-44',\n                                                                '45-49',\n                                                                '50-54',\n                                                                '55-59',\n                                                                '60-69',\n                                                                '70+'])\n                                                                                                  \n\n\nx = df_2017['Age in years'].value_counts()\ny = df_2018['What is your age (# years)?'].value_counts()\nz = df_2019['What is your age (# years)?'].value_counts()\n\n\nw = pd.DataFrame(data = [x,y,z],index = ['2017','2018','2019'])\nw.fillna(0,inplace=True)\n\nw.loc['2017'] = w.loc['2017']\/len(df_2017)*100\nw.loc['2018'] = w.loc['2018']\/len(df_2018)*100\nw.loc['2019'] = w.loc['2019']\/len(df_2019)*100\n\nw.T[['2019']].plot(subplots=True, layout=(1,1),kind='bar',color='dodgerblue',linewidth=1,edgecolor='k',legend=False)\nplt.gcf().set_size_inches(10,8)\nplt.title('Age wise Distribution of  Respondents in 2019',fontsize=15)\nplt.xticks(rotation=45,fontsize='10', horizontalalignment='right')\nplt.yticks( fontsize=10)\nplt.xlabel('Age in years',fontsize=15)\nplt.ylabel('Percentage of  Respondents',fontsize=15)\nplt.show()","ec6c6505":"w.T[['2018']].plot(subplots=True,layout=(1,2),color='dodgerblue',kind='bar',linewidth=1,edgecolor='k',legend=False)\nplt.gcf().set_size_inches(15,6)\n#plt.title('Age wise Distribution of Female Respondents in 2019',fontsize=15)\n#plt.xticks(rotation=0,fontsize='10', horizontalalignment='right')\nplt.yticks( fontsize=10)\n#plt.xlabel('Age in years',fontsize=15)\nplt.ylabel('Percentage of  Respondents',fontsize=15)\nplt.show()","368619bb":"w.T[['2017']].plot(subplots=True,layout=(1,2),color='dodgerblue',kind='bar',linewidth=1,edgecolor='k',legend=False)\nplt.gcf().set_size_inches(15,6)\n#plt.title('Age wise Distribution of Female Respondents in 2019',fontsize=15)\n#plt.xticks(rotation=0,fontsize='10', horizontalalignment='right')\nplt.yticks( fontsize=10)\n#plt.xlabel('Age in years',fontsize=15)\nplt.ylabel('Percentage of  Respondents',fontsize=15)\nplt.show()","0a9c59e5":"female_2017['Age in years'] = pd.cut(x=female_2017['Age'], bins=[18,21,25,29,34,39,44,49,54,59,69,79], \n                                                        labels=['18-21',\n                                                                '22-24',\n                                                                '25-29',\n                                                                '30-34',\n                                                                '35-39',\n                                                                '40-44',\n                                                                '45-49',\n                                                                '50-54',\n                                                                '55-59',\n                                                                '60-69',\n                                                                '70+'])\n                                                                                                  \n\n\nx = female_2017['Age in years'].value_counts()\ny = female_2018['What is your age (# years)?'].value_counts()\nz = female_2019['What is your age (# years)?'].value_counts()\n\n\nw = pd.DataFrame(data = [x,y,z],index = ['2017','2018','2019'])\nw.fillna(0,inplace=True)\n\nw.loc['2017'] = w.loc['2017']\/len(female_2017)*100\nw.loc['2018'] = w.loc['2018']\/len(female_2018)*100\nw.loc['2019'] = w.loc['2019']\/len(female_2019)*100\n\nw.T[['2019']].plot(subplots=True, layout=(1,1),kind='bar',color='dodgerblue',linewidth=1,edgecolor='k',legend=False)\nplt.gcf().set_size_inches(10,8)\nplt.title('Age wise Distribution of Female Respondents in 2019',fontsize=15)\nplt.xticks(rotation=45,fontsize='10', horizontalalignment='right')\nplt.yticks( fontsize=10)\nplt.xlabel('Age in years',fontsize=15)\nplt.ylabel('Percentage of Female Respondents',fontsize=15)\nplt.show()","cf307c75":"w.T[['2017','2018']].plot(subplots=True,layout=(1,2),color='dodgerblue',kind='bar',linewidth=1,edgecolor='k',legend=False)\nplt.gcf().set_size_inches(15,6)\n#plt.title('Age wise Distribution of Female Respondents in 2019',fontsize=15)\n#plt.xticks(rotation=0,fontsize='10', horizontalalignment='right')\nplt.yticks( fontsize=10)\n#plt.xlabel('Age in years',fontsize=15)\nplt.ylabel('Percentage of Female Respondents',fontsize=15)\nplt.show()","6fd87d38":"**DATA SCIENCE the most hearing word around the World..     \n**    ..it is rated as the Sexiest Job of Century!!!\n    ..\n    ","2a8af24b":"****Gender Responses****","8897f2e8":"****Age Distribution","ba7d0a8d":"**** Top 2 Countries Female Response Over years****","b56ea543":"****Total No of  Pariticipats in Compition 2019,2018,2017","19aab355":"**** WORK IN PROGRESS********","075e0ce9":"****Age Distribution over Female********","50499ea2":"****Countrywise Distribution of Participents****"}}