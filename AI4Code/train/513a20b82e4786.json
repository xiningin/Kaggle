{"cell_type":{"c51b6db5":"code","f33ffa63":"code","38d1295a":"code","e04d30ed":"code","6509e058":"code","f66f824b":"code","5d3ea356":"code","0950af6d":"code","aba0a78a":"code","85ec2475":"code","9393ce0d":"code","7214509f":"code","2330aca7":"code","342a9ca7":"code","9bbea4d5":"code","f07ed8b8":"code","338c4dd3":"code","f78cdb3b":"code","4e7241bd":"code","be9d605b":"code","9e4ae1f7":"code","df2a7614":"code","243c54f3":"code","7476498e":"code","8930439e":"code","8d1b6342":"code","f115fe6d":"code","6ffdbaf0":"code","ed555654":"code","56817c56":"code","d96734f3":"code","b968739a":"code","4e932435":"code","d42a6fa0":"code","2c109372":"markdown","02207346":"markdown","e569eb25":"markdown","f4b2b710":"markdown","832b94ac":"markdown","d282dd3d":"markdown","c9ef9eff":"markdown","c5e854d4":"markdown","e53c63db":"markdown","53b3df55":"markdown","284d26d1":"markdown","4f2f68c6":"markdown","38612e78":"markdown"},"source":{"c51b6db5":"# Import the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport plotly.express as px\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, StratifiedKFold, train_test_split\nfrom sklearn.metrics import log_loss\n\nfrom lightgbm import LGBMClassifier\nimport lightgbm as lgbm\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\nimport warnings\nwarnings.filterwarnings('ignore')","f33ffa63":"# Import the data\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")","38d1295a":"train.head()","e04d30ed":"train.info()","6509e058":"train.describe()","f66f824b":"fig = px.histogram(train['target'], height=400, width=700, template='plotly_dark+presentation')\nfig.show()","5d3ea356":"features = list(train.columns[1:-1])","0950af6d":"def visualize_features(features, seaborn_plot, num_rows, num_cols, fig_size, **kwargs):\n    \"\"\"\n    Visualize features in train and test data\n    \"\"\"\n    plt.figure(figsize=fig_size)\n    c = 1\n    for feat in features:\n        plt.subplot(num_rows, num_cols, c)\n        seaborn_plot(x=train[feat], **kwargs)\n        #seaborn_plot(x=test[feat], **kwargs, color='yellow')\n        c = c + 1\n    \n    plt.show()","aba0a78a":"visualize_features(features, sns.kdeplot, 10, 5, (20, 35), hue=train['target'])","85ec2475":"umap_df = train.drop(['id', 'target'], axis=1)","9393ce0d":"from umap import UMAP","7214509f":"umap_2d = UMAP(n_components=2, init='random')\nprojections = umap_2d.fit_transform(umap_df)","2330aca7":"# Visualize UMAP\nfig = px.scatter(projections, \n                 x=0, \n                 y=1, \n                 color=train.target, \n                 labels={'color':'Target', '0':'x_component', '1':'y_component'}\n                )\nfig.show()","342a9ca7":"def preprocess(df):\n    \n    le = LabelEncoder()\n    df['target'] = le.fit_transform(df['target'])\n    \n    return df","9bbea4d5":"train = preprocess(train)","f07ed8b8":"X = train.drop(['target', 'id'], axis=1)\ny = train['target']","338c4dd3":"def cross_validate(X, y, model, params, folds=5):\n\n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=42)\n    for fold, (tr_idx, ts_idx) in enumerate(skf.split(X, y)):\n        print(f\"Fold: {fold}\")\n        x_tr, y_tr = X.iloc[tr_idx], y.iloc[tr_idx]\n        x_ts, y_ts = X.iloc[ts_idx], y.iloc[ts_idx]\n\n        clf = model(**params)\n        clf.fit(x_tr, y_tr,\n                eval_set=[(x_ts, y_ts)],\n                early_stopping_rounds=100,\n                verbose=False)\n\n        pred = clf.predict_proba(x_ts)\n        loss = log_loss(y_ts, pred)\n        print(f\" Log loss: {loss}\")\n        print(\"-\"*50)\n    \n    return clf","f78cdb3b":"lgbm_params = {\n    'learning_rate': 0.05,\n    'max_depth': 10,\n    'num_leaves' : 63,\n    'objective': 'multiclass',\n    'metric': 'multi_logloss',\n    'bagging_seed': 42,\n    'boosting_type': 'gbdt',\n    'is_unbalance': True\n}","4e7241bd":"lgbm_model = cross_validate(X, y, LGBMClassifier, lgbm_params)","be9d605b":"lgbm.plot_importance(lgbm_model, figsize=(10, 10))","9e4ae1f7":"xgb_params = {\n     \"seed\":42,\n    \"n_estimators\":10000,\n    \"verbosity\":1,\n    \"eval_metric\":\"mlogloss\",\n    \"alpha\":7.105038963844129,\n    \"colsample_bytree\":0.25505629740052566,\n    \"gamma\":0.4999381950212869,\n    \"reg_lambda\":1.7256912198205319,\n    \"learning_rate\":0.011823142071967673,\n    \"max_bin\":338,\n    \"max_depth\":8,\n    \"min_child_weight\":2.286836198630466,\n    \"subsample\":0.618417952155855,\n    'tree_method':'gpu_hist',\n    'gpu_id':0\n}","df2a7614":"xgb_model = cross_validate(X, y, XGBClassifier, xgb_params)","243c54f3":"xgb.plot_importance(xgb_model, max_num_features=25)","7476498e":"from catboost import CatBoostClassifier","8930439e":"cb_params = {\n    \"verbose\":0,\n    \"eval_metric\":\"MultiClass\",\n    \"random_state\":2021,\n    \"num_boost_round\":20000,\n    \"task_type\":\"GPU\",\n    \"devices\":\"0\",\n}","8d1b6342":"cb_model = cross_validate(X, y, CatBoostClassifier, cb_params)","f115fe6d":"from sklearn.calibration import CalibratedClassifierCV","6ffdbaf0":"# Calibrating XGB\nbase_xgb = XGBClassifier(**xgb_params)\ncalibrated_xgb = CalibratedClassifierCV(base_estimator=base_xgb, cv=5)\ncalibrated_xgb.fit(X, y)","ed555654":"# Calibrating LGBM\nbase_lgbm = LGBMClassifier(**lgbm_params)\ncalibrated_lgbm = CalibratedClassifierCV(base_estimator=base_lgbm, cv=5)\ncalibrated_lgbm.fit(X, y)","56817c56":"xgb_param_fe = xgb_params.copy()","d96734f3":"xgb_param_fe['interaction_constraints'] = '[[38, 14], [34, 14, 31], [15, 19]]'","b968739a":"model_xgb1 = cross_validate(X, y, XGBClassifier, xgb_param_fe)","4e932435":"# pred_lgbm = lgbm_model.predict_proba(test[X.columns])\n# pred_xgb = xgb_model.predict_proba(test[X.columns])\n# pred_xgb1 = model_xgb1.predict_proba(test[X.columns])\n# pred_cb = cb_model.predict_proba(test[X.columns])\n\n# Calibration predictions\npred_lgbm_cal = calibrated_lgbm.predict_proba(test[X.columns])\npred_xgb_cal = calibrated_xgb.predict_proba(test[X.columns])","d42a6fa0":"# LGBM\nsubmission.iloc[:, 1:] = pred_lgbm_cal\nsubmission.to_csv(\"LGBM(Calibration).csv\", index=False)\n\n# XGB\nsubmission.iloc[:, 1:] = pred_xgb_cal\nsubmission.to_csv(\"XGB(Calibration).csv\", index=False)\n\n# XGb 1\n# submission.iloc[:, 1:] = pred_xgb1\n# submission.to_csv(\"XGB_FE.csv\", index=False)\n\n# CatBoost\n# submission.iloc[:, 1:] = pred_cb\n# submission.to_csv(\"CatBoost.csv\", index=False)","2c109372":"* Most of the features are zero\n* Class 2 is the most frequent class in target.","02207346":"## Data Visualization","e569eb25":"# Preprocessing","f4b2b710":"## XGB with feature interaction","832b94ac":"## XGBClassifier","d282dd3d":"## Submission","c9ef9eff":"## Umap visualization","c5e854d4":"# TPS March EDA ","e53c63db":"## Build Model","53b3df55":"## Calibration","284d26d1":"* XGBoost documentation for feature interaction constraints:\nhttps:\/\/xgboost.readthedocs.io\/en\/latest\/tutorials\/feature_interaction_constraint.html","4f2f68c6":"## Catboost","38612e78":"## LGBMClassifier"}}