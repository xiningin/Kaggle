{"cell_type":{"bea94e08":"code","72cfe7d0":"code","afc79e19":"code","40e98f28":"code","cd3c1646":"code","d8cf6986":"code","26f78fbb":"code","2780ab3d":"code","07018067":"code","588c3905":"code","f44f3fec":"code","9fb27fe7":"code","d6216a39":"code","a0ae01af":"code","1f266087":"code","251ed99a":"code","7b71fcc3":"code","847405ec":"code","7ba48cf0":"code","28ec9fdd":"code","f1e23bce":"code","684891fb":"code","df58d2bb":"code","c4f0c222":"code","b0c49197":"code","3cc2d39e":"code","336bf7bf":"code","ddf16ac8":"code","fa2d8ca2":"code","e9dd5a5a":"code","b5545755":"code","02b0f5c7":"code","a3f1e270":"code","7810008d":"code","678cc22b":"code","43fafe3a":"code","a55fbd3a":"code","743f7d24":"code","808d7087":"code","bc1b663f":"code","04da21b6":"code","ad5c4a9b":"code","f5db79f5":"code","2d06dc55":"code","fcf3387e":"markdown","b3345340":"markdown","07ef9511":"markdown","3c45dc46":"markdown","9da8b586":"markdown","7031ce9a":"markdown","6e9db14c":"markdown","685be673":"markdown","86a6a756":"markdown"},"source":{"bea94e08":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nimport string\npd.set_option('display.max_rows', None)#\npd.set_option('display.max_columns', None)#\n","72cfe7d0":"data = pd.read_csv('..\/input\/insurance-reviews-france\/Comments.csv')\ndata.head()","afc79e19":"data.isna().sum() #Nan","40e98f28":"data = data.dropna()","cd3c1646":"data.isna().sum()","d8cf6986":"data = data.drop(['Unnamed: 0' , 'Name' , 'Month' , 'Year'] , axis=1)","26f78fbb":"def clean_text(text):\n    text = re.sub(r'@ [A-Za-z0-9]+','',text) #Removed mentions\n    text = re.sub(r'#','',text) #remove the #symbol\n    text = re.sub(r'RT[\\s]+' , '' , text) # remove RT\n    text = re.sub(r'https?:\\\/\\\/\\S+' , '' , text) #Removed hyperlink\n    text = \"\" .join([ch for ch in text if ch not in string.punctuation]) #Remove punctuation\n    text = text.replace(\"  \" , \" \")\n    text = \" \".join([x for x in text.split(\" \") if not x.isdigit()]) # Removed Numbers\n    text = text.lower() # lower text\n    \n   \n    return text","2780ab3d":"data['Comment'] = data.Comment.apply(str) # convert Column to string before apply function clean_text","07018067":"data['Comment'] = data['Comment'].apply(lambda x: clean_text(x))","588c3905":"data.head()","f44f3fec":"!pip install spacy","9fb27fe7":"import spacy\nfrom spacy.lang.fr.stop_words import STOP_WORDS as fr_stop\nfrom spacy.lang.fr.examples import sentences #example","d6216a39":"import spacy.cli\nspacy.cli.download(\"fr_core_news_sm\")","a0ae01af":"nlp = spacy.load('fr_core_news_sm')","1f266087":"def tokenizer(text):\n    result = re.split('\\W+' , text)\n    return result","251ed99a":"def remove_stopwords(text):\n    result = [word for word in text if word not in fr_stop]\n    return result","7b71fcc3":"data['Comment'] = data['Comment'].apply(lambda x: tokenizer(x))","847405ec":"data['Comment'] = data['Comment'].apply(lambda x: remove_stopwords(x))","7ba48cf0":"data.head()","28ec9fdd":"data['Comment'] = data['Comment'].apply(', '.join)","f1e23bce":"data['reviews'] = data['Comment'].apply(lambda x: \" \".join([x.lemma_ for x in nlp(x)]))","684891fb":"data.head()","df58d2bb":"data = data.drop('Comment' , axis=1)","c4f0c222":"!pip install vaderSentiment-fr==1.2","b0c49197":"from vaderSentiment_fr.vaderSentiment import SentimentIntensityAnalyzer","3cc2d39e":"analyzer_fr = SentimentIntensityAnalyzer()\n#phrase = \"vilain\"\n#vs = analyzer_fr.polarity_scores(phrase)\n#print(\"{:-<50} {}\".format(phrase, str(vs)))","336bf7bf":"data['scores'] = data['reviews'].apply(lambda x: analyzer_fr.polarity_scores(x))","ddf16ac8":"data.head()","fa2d8ca2":"data['compound'] = data['scores'].apply(lambda x: x['compound'])\ndata['sentiment_vader']=''\ndata.loc[data.compound>0,'sentiment_vader']='POSITIVE'\ndata.loc[data.compound==0,'sentiment_vader']='NEUTRAL'\ndata.loc[data.compound<0,'sentiment_vader']='NEGATIVE'","e9dd5a5a":"data.head()","b5545755":"data = data.drop(['scores' , 'compound'] , axis=1)","02b0f5c7":"data.head()","a3f1e270":"colors = ['green','red','blue']","7810008d":"data.sentiment_vader.value_counts().plot(kind='bar',title=\"sentiment analysis\" , figsize=(20,10) , color= colors)","678cc22b":"print((data.sentiment_vader.value_counts() \/ data.shape[0])*100)","43fafe3a":"pip install textblob-fr","a55fbd3a":"from textblob import Blobber\nfrom textblob_fr import PatternTagger, PatternAnalyzer\ntb = Blobber(pos_tagger=PatternTagger(), analyzer=PatternAnalyzer())","743f7d24":"sentiment_blob = []\nfor blob in data['reviews']:\n    sb = tb(blob).sentiment[0]\n    if (sb > 0):\n        sentiment_blob.append('POSITIVE')\n    elif (sb < 0):\n        sentiment_blob.append('NEGATIVE')\n    else:\n        sentiment_blob.append('NEUTRAL')\n        \ndata['sentiment_blob'] = sentiment_blob","808d7087":"data.head()","bc1b663f":"data.sentiment_blob.value_counts().plot(kind='bar',title=\"sentiment analysis\" , figsize=(20,10) , color= colors)","04da21b6":"print((data.sentiment_blob.value_counts() \/ data.shape[0])*100)","ad5c4a9b":"vader_blob_positive = data[(data['sentiment_vader'] == 'POSITIVE') & (data['sentiment_blob'] == 'POSITIVE')]\nvader_blob_negative = data[(data['sentiment_vader'] == 'NEGATIVE') & (data['sentiment_blob'] == 'NEGATIVE')]\nvader_blob_neutral = data[(data['sentiment_vader'] == 'NEUTRAL') & (data['sentiment_blob'] == 'NEUTRAL')]","f5db79f5":"pos = vader_blob_positive.shape[0]\nneg = vader_blob_negative.shape[0]\nneu = vader_blob_neutral.shape[0]","2d06dc55":"similar_vader_blob = (pos + neg + neu)\/data.shape[0]\nsimilar_vader_blob","fcf3387e":"**CLEAN TEXT**","b3345340":"We will do a global sentiment analysis without the company, the month and the year","07ef9511":"**Vader sentiment**","3c45dc46":"**REMOVE STOP WORDS**","9da8b586":"TextBlob and Vader are 60% similar on this dataset.\n\nwe also see that Vader and textblob have roughly the same rate of negative sentiment (Vader=30.51% & Textblob=30.84%)\n\nThe difference is therefore at the level where Vader considers a neutral sentiment while TextBlob considers it positive and vice versa.\n\n","7031ce9a":"**Difference between TextBlob et Vader**","6e9db14c":"**Test Vader Sentiment & TextBlob**","685be673":"**Lemmatization**","86a6a756":"**TextBlob**"}}