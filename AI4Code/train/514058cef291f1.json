{"cell_type":{"19b95a0b":"code","25ae6f5a":"code","e39981a7":"code","c774b756":"code","6a475233":"code","96bb0e4a":"code","9403ce6f":"code","2663bf61":"code","86bdd400":"code","4b3f537f":"code","cfc29f05":"code","3a7e2061":"code","126b3026":"code","40af9432":"code","e181d9ca":"code","9c9065e7":"code","56fc72f6":"code","5693aa95":"code","03601425":"markdown","68d9952a":"markdown","5b0c136e":"markdown","d7ccfd95":"markdown","bcc85611":"markdown","3f1f8e8a":"markdown","15564cba":"markdown","ee136775":"markdown","0604337a":"markdown","22a6f05f":"markdown","25e8963f":"markdown"},"source":{"19b95a0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nimport sklearn.preprocessing as preprocessing\nimport numpy as np\nfrom datetime import datetime\nfrom sklearn.neighbors import KNeighborsRegressor\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","25ae6f5a":"dataset = pd.read_csv('..\/input\/train.csv')\ndataset.head()","e39981a7":"print (\"Rows     : \" ,dataset.shape[0])\nprint (\"Columns  : \" ,dataset.shape[1])\nprint (\"\\nFeatures : \\n\" ,dataset.columns.tolist())\nprint (\"\\nMissing values :  \", dataset.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",dataset.nunique())","c774b756":"def limparDataset(dataset):\n    \n    #convertendo espa\u00e7os para null\n    dataset['TotalCharges'] = dataset[\"TotalCharges\"].replace(\" \",np.nan)\n    #Dropando valores vazios do totalCharges\n    dataset = dataset[dataset[\"TotalCharges\"].notnull()]\n    dataset = dataset.reset_index()[dataset.columns]\n\n    #convert para float type\n    dataset[\"TotalCharges\"] = dataset[\"TotalCharges\"].astype(float)\n\n    #substituindo os valores 'no internet service e no phone service para 'no'.\n    replace_cols = [ 'MultipleLines', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n                    'TechSupport','StreamingTV', 'StreamingMovies']\n    for i in replace_cols : \n        dataset[i]  = dataset[i].replace({'No internet service' : 'No'})\n        dataset[i]  = dataset[i].replace({'No phone service' : 'No'})\n        \n    return dataset","6a475233":"dataset.head()","96bb0e4a":"fig, (ax1, ax2, ax3) = plt.subplots(3)\nsns.kdeplot(dataset[\"tenure\"], shade=True, color=\"b\",ax = ax1)\nsns.kdeplot(dataset[\"MonthlyCharges\"], shade=True, color=\"r\", ax = ax2)\nsns.kdeplot(dataset[\"TotalCharges\"], shade=True, color=\"g\", ax = ax3)\nfig.tight_layout()\nplt.show(fig)","9403ce6f":"ax = sns.kdeplot(dataset.MonthlyCharges[(dataset[\"Churn\"] == 0) ],\n                color=\"Red\", shade = True)\nax = sns.kdeplot(dataset.MonthlyCharges[(dataset[\"Churn\"] == 1) ],\n                ax =ax, color=\"Blue\", shade= True)\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')\nax.set_ylabel('Density')\nax.set_xlabel('Monthly Charges')\nax.set_title('Distribui\u00e7\u00e3o das mensalidades por Churn')","2663bf61":"sns.set(style=\"ticks\", color_codes=True)\n\nfig, axes = plt.subplots(nrows = 3,ncols = 5,figsize = (25,15))\nsns.countplot(x = \"gender\", data = dataset, ax=axes[0][0])\nsns.countplot(x = \"Partner\", data = dataset, ax=axes[0][1])\nsns.countplot(x = \"Dependents\", data = dataset, ax=axes[0][2])\nsns.countplot(x = \"PhoneService\", data = dataset, ax=axes[0][3])\nsns.countplot(x = \"MultipleLines\", data = dataset, ax=axes[0][4])\nsns.countplot(x = \"InternetService\", data = dataset, ax=axes[1][0])\nsns.countplot(x = \"OnlineSecurity\", data = dataset, ax=axes[1][1])\nsns.countplot(x = \"OnlineBackup\", data = dataset, ax=axes[1][2])\nsns.countplot(x = \"DeviceProtection\", data = dataset, ax=axes[1][3])\nsns.countplot(x = \"TechSupport\", data = dataset, ax=axes[1][4])\nsns.countplot(x = \"StreamingTV\", data = dataset, ax=axes[2][0])\nsns.countplot(x = \"StreamingMovies\", data = dataset, ax=axes[2][1])\nsns.countplot(x = \"Contract\", data = dataset, ax=axes[2][2])\nsns.countplot(x = \"PaperlessBilling\", data = dataset, ax=axes[2][3])\nax = sns.countplot(x = \"PaymentMethod\", data = dataset, ax=axes[2][4])\nax.set_xticklabels(ax.get_xticklabels(),rotation=90)\nplt.show(fig)","86bdd400":"sns.boxplot(x = dataset.Churn, y = dataset.tenure)\n","4b3f537f":"\ndef tratarDummies(dataset):\n    #MediaService \u00e9 criado abaixo\n    colunas_numericas = ['MonthlyCharges', 'TotalCharges', 'tenure', 'MediaServico']\n    servicos = ['OnlineSecurity','OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']\n\n    dataset['gender'] = dataset['gender'].apply(lambda x: 1 if x=='Male' else 0)\n    dataset['Partner'] = dataset['Partner'].apply(lambda x: 1 if x == 'Yes' else 0)\n    dataset['Dependents'] = dataset['Dependents'].apply(lambda x :1 if x == 'Yes' else 0)\n    dataset['PhoneService'] = dataset['PhoneService'].apply(lambda x :1 if x == 'Yes' else 0)\n    dataset['PaperlessBilling'] = dataset['PaperlessBilling'].apply(lambda x: 1 if x == 'Yes' else 0)\n    \n    # N\u00e3o alterado pois n\u00e3o \u00e9 somente sim e n\u00e3o\n    dataset = pd.get_dummies(dataset, columns=['MultipleLines'])\n    dataset = pd.get_dummies(dataset, columns=['InternetService'])\n    dataset = pd.get_dummies(dataset, columns=['PaymentMethod'])\n    dataset = pd.get_dummies(dataset, columns=['Contract'])\n    \n    dataset = pd.get_dummies(dataset, columns=servicos)\n\n    #Cliente n\u00e3o possui nenhum servi\u00e7o    \n    dataset['NoService'] = dataset['OnlineSecurity_No'] * dataset['OnlineBackup_No'] * \\\n    dataset['DeviceProtection_No'] * dataset['TechSupport_No'] * dataset['StreamingTV_No'] * dataset['StreamingMovies_No']\n    \n    #quantidade de servi\u00e7os\n    dataset['qntServices'] = dataset['OnlineSecurity_Yes'] + dataset['OnlineBackup_Yes'] + \\\n    dataset['DeviceProtection_Yes'] + dataset['TechSupport_Yes'] + dataset['StreamingTV_Yes'] + dataset['StreamingMovies_Yes']\n\n    #Cliente n\u00e3o possui nenhum servi\u00e7o e tem contrato mes a mes, que \u00e9 o tipo de contrato com mais churn\n    dataset['NoServiceAndMonthToMonth'] = dataset['NoService'] * dataset['Contract_Month-to-month']\n    \n    #SeniorCitizen e Valor mensal maior que 60\n    dataset['SCitizenMonthlyCharges'] = (dataset['MonthlyCharges'] >= 60) * dataset['SeniorCitizen']\n    \n    #Poucos servi\u00e7os e Valor mensal maior que 60\n    dataset['FewServices'] = (dataset['MonthlyCharges'] >= 60)* (dataset['qntServices'] < 3)\n    \n    #tenure baixo e sem servi\u00e7o\n    dataset['TernureBaixoSemServico'] = dataset['NoService'] * (dataset['tenure'] <= 30 )\n    \n    dataset['MediaServico'] = dataset['qntServices'] * dataset['TotalCharges'] \/ dataset['tenure']\n    \n    \n    #Padronizando variaveis continuas\n    std = StandardScaler()\n    scaled = std.fit_transform(dataset[colunas_numericas])\n    scaled = pd.DataFrame(scaled,columns=colunas_numericas)\n\n    #drop nos valores das colunas numericas originais e substituindo pelos 'escalados'\n    dataset = dataset.drop(columns = colunas_numericas,axis = 1)\n    dataset = dataset.merge(scaled,left_index=True,right_index=True,how = \"left\")\n    return dataset","cfc29f05":"dataset.head()","3a7e2061":"dataset = limparDataset(dataset)\ndataset = tratarDummies(dataset)","126b3026":"dataset.head()","40af9432":"corr = dataset.corr()\nplt.figure(figsize = (16,16))\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","e181d9ca":"X = dataset.drop(columns=[\"Churn\"])\n#Target\ny = dataset[\"Churn\"]\n\nX_train, X_test, \\\n     y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=50)","9c9065e7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\nlogmodel = LogisticRegression(solver='newton-cg',max_iter=150)\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\nprint(classification_report(y_test,predictions))","56fc72f6":"df_valid = pd.read_csv('..\/input\/test.csv')\n\ndf_valid = limparDataset(df_valid)\ndf_valid = tratarDummies(df_valid)\n\ndf_valid.head()","5693aa95":"preds = logmodel.predict(df_valid)\ndf_final = df_valid[['UserID']]\ndf_final['Churn'] = preds\ndf_final.to_csv('logreg_novo6.csv', index=False)","03601425":"## Cria\u00e7\u00e3o de features","68d9952a":"## rodando em base teste","5b0c136e":"## An\u00e1lises gr\u00e1ficas","d7ccfd95":"### Clientes que j\u00e1 est\u00e3o a muito tempo na empresa tendem a ficar.","bcc85611":"## Gr\u00e1fico Monthly Charges por Churn","3f1f8e8a":"## Regresss\u00e3o logistica","15564cba":"### Se monthly charges estiver entre 60 e 110 +\/- a probabilidade de churn \u00e9 maior","ee136775":"## Gr\u00e1fico de Tenure por Churn","0604337a":"## Salvar dados","22a6f05f":"   ## Limpeza dos dados","25e8963f":"## separando dados em treino e teste"}}