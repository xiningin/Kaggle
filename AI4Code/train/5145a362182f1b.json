{"cell_type":{"95f3f8da":"code","f137a31e":"code","ace3fca1":"code","8d55c73c":"code","4ce45ad5":"code","2227a216":"code","843af486":"code","3940bc1d":"code","39f0b356":"code","62741396":"code","a78fc64e":"code","3e6a2957":"code","8e35fe8e":"code","3927e6c3":"code","2e1a8e64":"code","bcd32dc9":"code","60996d41":"code","fbc8aff4":"markdown","6bdf843e":"markdown","49e5741e":"markdown","8d2a1a7d":"markdown","b7032dc4":"markdown","922ad168":"markdown","702f2190":"markdown","3781bb2e":"markdown","50f211a3":"markdown","eebec814":"markdown","5afd24db":"markdown","16dc5225":"markdown","31eedd21":"markdown","999a07bc":"markdown","be247f47":"markdown","49eed57e":"markdown"},"source":{"95f3f8da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport json\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\n\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f137a31e":"train_df = pd.read_csv(\"\/kaggle\/input\/google-quest-challenge\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/google-quest-challenge\/test.csv\")\nprint(\"Train shape : \", train_df.shape)\nprint(\"Test shape : \", test_df.shape)","ace3fca1":"train_df.head().T","8d55c73c":"test_df.head()","4ce45ad5":"from wordcloud import WordCloud, STOPWORDS\n\n# Thanks : https:\/\/www.kaggle.com\/aashita\/word-clouds-of-various-shapes ##\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='black',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nplot_wordcloud(train_df[\"question_title\"], title=\"Word Cloud for question title\")","2227a216":"from collections import defaultdict\n\n\n## custom function for ngram generation ##\ndef generate_ngrams(text, n_gram=1):\n    token = [token for token in text.lower().split(\" \") if token != \"\" if token not in STOPWORDS]\n    ngrams = zip(*[token[i:] for i in range(n_gram)])\n    return [\" \".join(ngram) for ngram in ngrams]\n\n## custom function for horizontal bar chart ##\ndef horizontal_bar_chart(df, color):\n    trace = go.Bar(\n        y=df[\"word\"].values[::-1],\n        x=df[\"wordcount\"].values[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\nfreq_dict = defaultdict(int)\nfor sent in train_df[\"question_title\"]:\n    for word in generate_ngrams(sent):\n        freq_dict[word] += 1\nfd_sorted = pd.DataFrame(sorted(freq_dict.items(), key=lambda x: x[1])[::-1])\nfd_sorted.columns = [\"word\", \"wordcount\"]\ntrace = horizontal_bar_chart(fd_sorted.head(50), 'blue')\n\nfig = go.Figure(data=[trace])\n\nfig['layout'].update(height=1200, width=900, paper_bgcolor='rgb(233,233,233)', title=\"Word Count Plots\")\npy.iplot(fig, filename='word-plots')","843af486":"plot_wordcloud(train_df[\"question_body\"], title=\"Word Cloud for question body\")","3940bc1d":"freq_dict = defaultdict(int)\nfor sent in train_df[\"question_body\"]:\n    for word in generate_ngrams(sent):\n        freq_dict[word] += 1\nfd_sorted = pd.DataFrame(sorted(freq_dict.items(), key=lambda x: x[1])[::-1])\nfd_sorted.columns = [\"word\", \"wordcount\"]\ntrace = horizontal_bar_chart(fd_sorted.head(50), 'blue')\n\nfig = go.Figure(data=[trace])\n\nfig['layout'].update(height=1200, width=900, paper_bgcolor='rgb(233,233,233)', title=\"Word Count Plots\")\npy.iplot(fig, filename='word-plots')","39f0b356":"fig = go.Figure(data=[go.Histogram(x=train_df['question_user_name'].value_counts())])\nfig.show()","62741396":"fig = go.Figure(data=[go.Histogram(x=train_df['host'])])\nfig.show()","a78fc64e":"fig = go.Figure(data=[go.Histogram(x=train_df['category'])])\nfig.show()","3e6a2957":"train_df['answer_user_name'].value_counts()","8e35fe8e":"fig = go.Figure(data=[go.Histogram(x=train_df['answer_user_name'].value_counts())])\nfig.show()","3927e6c3":"plot_wordcloud(train_df[\"answer\"], title=\"Word Cloud for answer\")","2e1a8e64":"freq_dict = defaultdict(int)\nfor sent in train_df[\"answer\"]:\n    for word in generate_ngrams(sent):\n        freq_dict[word] += 1\nfd_sorted = pd.DataFrame(sorted(freq_dict.items(), key=lambda x: x[1])[::-1])\nfd_sorted.columns = [\"word\", \"wordcount\"]\ntrace = horizontal_bar_chart(fd_sorted.head(50), 'blue')\n\nfig = go.Figure(data=[trace])\n\nfig['layout'].update(height=1200, width=900, paper_bgcolor='rgb(233,233,233)', title=\"Word Count Plots\")\npy.iplot(fig, filename='word-plots')","bcd32dc9":"target_cols=['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible', 'answer_relevance',\n       'answer_satisfaction', 'answer_type_instructions',\n       'answer_type_procedure', 'answer_type_reason_explanation',\n       'answer_well_written']","60996d41":"fig = subplots.make_subplots(rows=6, cols=5, vertical_spacing=0.06,\n                          subplot_titles=target_cols)\nfor ind,col  in enumerate(target_cols):\n    dist_dict = pd.DataFrame(sorted(train_df[col].value_counts().to_dict().items(), key=lambda x: x[1])[::-1])\n    trace = go.Bar(\n        y=dist_dict[0],\n        x=dist_dict[1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color='blue',\n        )\n    )  \n    fig.append_trace(trace, ind\/\/5 + 1 , ind%5 + 1) \nfig['layout'].update(height=1200, width=1700, paper_bgcolor='rgb(233,233,233)', title=\"target dist plot\")\npy.iplot(fig, filename='target-plots')","fbc8aff4":"Word like sql, java, android related to tech are been used frequently in title as most of questions are from stack exchange","6bdf843e":"# Objective\n\nThe main objective of this notebook is to find some useful insights in the given data. I have taken the help of some good kaggle kernels. Hope you find useful.\n\n\n\nPlease upvote if you find this notebook helpful","49e5741e":"Most of the questions fall under technology category","8d2a1a7d":"20 is the maximum answers from user scott. we can observe same skew in range of 0-3 for individual. **We have to find the users common in test data. A valid assumption can be user reputation can play significant role in determing the targets.**","b7032dc4":"# References\nhttps:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-qiqc\n\nhttps:\/\/plot.ly\/\n\nUpvote if you find helpful","922ad168":"**Bivariate analysis on targets and question , targets and answer, targets and users might give some insights** To be continued","702f2190":"Most of the questions are from stackoverflow.com ","3781bb2e":"# host and category","50f211a3":"# answer","eebec814":"# question_body","5afd24db":"# question_user_name","16dc5225":"# Few target distributions are unbalanced careful handling is required as evaluation is mean of everything.","31eedd21":"One useful assumption we can make by looking at words like **{, }, return , +, - there can be a java code present in the question**, problem sounds tough and challenging because it is difficult to validate the right code for given question","999a07bc":"# question_title word distributions","be247f47":"# answer_user_name","49eed57e":"Most of the users skewed in 0 to 3 questions range"}}