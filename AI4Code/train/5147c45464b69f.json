{"cell_type":{"93a05301":"code","53830cd3":"code","8a37c211":"code","001d6017":"code","0ecef7ee":"code","3c2ce2a4":"code","c6b5e15a":"code","7c3039c8":"code","bf6034a9":"code","a916b02a":"code","bf0c5eb8":"code","c634ea5b":"code","450e51ac":"code","594426fd":"code","1e3fea61":"code","eae81417":"code","87048378":"code","425105fb":"code","b9a06d49":"code","df171a16":"code","98076f61":"code","a911367e":"code","7358e41d":"code","15ef9d6f":"code","ea6f06cd":"code","6de8b72e":"code","1b95693e":"code","2b142f06":"code","110d886b":"code","d975d030":"code","61ffad87":"code","238e350e":"code","87e45d7e":"code","2150b7a1":"code","5be705b7":"code","16726ee6":"code","085be88d":"code","50f9d263":"code","7de7a169":"code","a7dec32d":"code","eee82a9a":"code","417849f4":"code","08d21923":"code","830106e5":"code","5fbedce3":"markdown","fbfe98be":"markdown"},"source":{"93a05301":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import pylab\nimport seaborn as sns\nimport datetime as dt\nsns.set_style(\"whitegrid\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","53830cd3":"data = pd.read_csv('\/kaggle\/input\/noshowappointments\/KaggleV2-May-2016.csv')\ndata.head()\n#Leia o dataset, e atribua-o a uma variavel","8a37c211":"data.info()\n#Nenhuma coluna tem valores nulos","001d6017":"data.isnull().any()","0ecef7ee":"data.columns = ['patient_id',\n                 'appointment_id',\n                 'gender','schedule_day',\n                 'appointment_day',\n                 'age',\n                 'neighborhood',\n                 'scholarship',\n                 'hypertension',\n                 'diabetes',\n                 'alcoholism',\n                 'handicap',\n                 'sms_received',\n                 'no_show']\ndata.info()","3c2ce2a4":"sum(data.duplicated())\n#Nenhum valor duplicado","c6b5e15a":"data['gender'].value_counts()","7c3039c8":"data['no_show'].value_counts()","bf6034a9":"data.describe()","a916b02a":"#Existe algum registro com idade -1!!!\ndata[data['age']< 0]","bf0c5eb8":"data = data.drop(data[data['age']< 0].index)","c634ea5b":"#E o handicap?\ndata.handicap.value_counts()","450e51ac":"#O que seria handicap acima de 1?? Como n\u00e3o h\u00e1 uma explicacao clara, e o n\u00famero de registros \u00e9 pequeno,\n#vamos eliminar esses registros\ndata = data.drop(data[data['handicap'] > 1].index)","594426fd":"print(type(data['schedule_day'][0]))\nprint(type(data['appointment_day'][0]))","1e3fea61":"data['waitdays'] = pd.to_datetime(data['appointment_day'])- pd.to_datetime(data['schedule_day'])\ndata.head()","eae81417":"data['waitdays'] = data['waitdays'].apply(lambda x: x.days)\ndata['waitdays'].describe()","87048378":"# Vamos eliminar valores menores que -1\ndata.drop(data[data.waitdays < -1].index, inplace=True)","425105fb":"#Vamos eliminar as variaveis que n\u00e3o vamos utilizar\n#Ids n\u00e3o s\u00e3o relevantes para nossas an\u00e1lises (patient_id e appointment_id)\ndata.drop(['patient_id', 'appointment_id'], axis = 1, inplace = True)","b9a06d49":"#Vamos transformar as datas em tipo data, e extrair o dia da semana\ndata['appointment_day'] = data['appointment_day'].apply(lambda x : x.replace('T00:00:00Z', ''))\ndata['appointment_day'] = pd.to_datetime(data['appointment_day'])\n\ndata['appointment_weekday'] = data['appointment_day'].apply(lambda x : dt.datetime.strftime(x, '%A'))\ndata['appointment_month'] = data['appointment_day'].apply(lambda x : dt.datetime.strftime(x, '%B'))","df171a16":"#Vamos acertar agora os valores da coluna no_show\n#Vamos substituir os valores texto (Yes, No) por n\u00fameros (1, 0)\ndata['no_show_str'] = data['no_show']\ndata['no_show'] = data['no_show'].replace({'Yes' : 1, 'No' : 0})\ndata.no_show.value_counts()","98076f61":"#propor\u00e7\u00e3o de no show\ndata['no_show'].value_counts(normalize = True)","a911367e":"#n\u00famero de pacientes que n\u00e3o apareceram\nlen(data[data['no_show'] == 1].index)","7358e41d":"sns.countplot(x = 'no_show', data = data)","15ef9d6f":"data.hist(figsize=(15, 8))","ea6f06cd":"gender_noshow = data.groupby('gender').sum()['no_show']\ngender_noshow.plot.pie(figsize=(5,5),title = 'No show por g\u00eanero')","6de8b72e":"#Idade por no show\nage_noshow = data.groupby('age').sum()['no_show']","1b95693e":"age_noshow.plot()","2b142f06":"age_percentage = age_noshow\/data['age'].value_counts()","110d886b":"age_percentage.plot()","d975d030":"age_percentage = age_percentage[0:90]\nage_percentage.plot()","61ffad87":"data.groupby('no_show')['age'].mean()","238e350e":"fig = sns.FacetGrid(data, hue ='no_show', aspect = 4)\nfig.map(sns.kdeplot, 'age', shade = True)\nfig.add_legend()","87e45d7e":"def show_no_show_trend(dataset, attribute, fit_reg = True):\n    '''Prints a chart with no_show_rate explanation\n    Syntax: show_no_show_trend(dataframe, attribute), where:\n        attribute = the string representing the attribute;\n        dataframe = the current dataframe;\n    '''\n    return sns.lmplot(data = dataset, x = attribute, y = 'no_show_rate', fit_reg = fit_reg, legend = True, height=8, aspect=2)    \n\ndef show_attribute_statistics(attribute, dataframe, scale = 0.06, sorter = False, verticalLabel = False):\n    '''Prints basic statistics from the attribute also plotting the basic chart. \n    Syntax: show_attribute_statistics(dataframe, attribute), where:\n        attribute = the string representing the attribute;\n        dataframe = the current dataframe;\n        scale = what's the scale you want to converto;\n        sorter = array representing the sort reindex;\n    '''\n    \n    # grouping by the patients by attribute and see if there is any interesting data related to their no showing\n    # also stripping unwanted attributes with crosstab - https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.crosstab.html\n    dataset = pd.crosstab(index = dataframe[attribute], columns = dataframe.no_show_str).reindex(sorter).reset_index() if sorter else pd.crosstab(index = dataframe[attribute], columns = dataframe.no_show_str).reset_index()\n    \n    # replacing all none values with zero, since it's the count of patients on that categorie\n    dataset['No'].fillna(value=0, inplace=True)\n    dataset['Yes'].fillna(value=0, inplace=True)\n\n    # let's also record the rate of no-showing base on the attribute\n    dataset[\"no_show_rate\"] = dataset['Yes'] \/ (dataset['No'] + dataset['Yes'])\n    dataset.no_show_rate.fillna(value=0.0, inplace=True)\n\n    dataset[\"no_show_rate_value\"] = dataset[\"no_show_rate\"] * 100 \n    dataset.no_show_rate_value.fillna(value=0.0, inplace=True)\n    \n    # plotting our data\n    plt.figure(figsize=(30, 10))\n\n    # scale data if needed\n    dataset['No'] = dataset['No'] * scale\n    dataset['Yes'] = dataset['Yes'] * scale\n\n    # line chart\n    plt.plot(dataset.no_show_rate_value.values, color=\"r\")\n\n    # bar chart\n    plt.bar(dataset[attribute].unique(), dataset['No'].values, bottom = dataset['Yes'].values)\n    plt.bar(dataset[attribute].unique(), dataset['Yes'].values)\n\n    # configs\n    if (verticalLabel):\n        plt.xticks(rotation='vertical')\n        \n    plt.subplots_adjust(bottom=0.15)\n    plt.xlabel(attribute, fontsize=16)\n    plt.ylabel(f\"amount of patients (scaled 1 to {scale * 100}%)\", fontsize=16)\n    plt.legend([\"not attended rate\", \"attended\", \"not attended\"], fontsize=14)\n\n    plt.title(\"amount of patient by no show appointment groupped by %s\" % attribute)\n\n    plt.show();\n    \n    return dataset","2150b7a1":"age_dataset = show_attribute_statistics(\"age\", data);\nshow_no_show_trend(age_dataset, \"age\");","5be705b7":"wait_noshow = data.groupby('waitdays').sum()['no_show']\nwait_noshow.plot()","16726ee6":"wait_percentage = wait_noshow\/data['waitdays'].value_counts()\nwait_percentage.plot()","085be88d":"wait_percentage = wait_percentage[0:40]\nwait_percentage.plot()","50f9d263":"appointment_waiting_days_dataset = show_attribute_statistics(\"waitdays\", data)\nshow_no_show_trend(appointment_waiting_days_dataset, \"waitdays\")","7de7a169":"#Melhor criar categorias para facilitar a visualiza\u00e7\u00e3o\ncategories = pd.Series(['same day: 0', 'week: 1-7', 'month: 8-30', 'quarter: 31-90', 'semester: 91-180', 'a lot of time: >180'])\ndata['waitdays_cat'] = pd.cut(data.waitdays, bins = [-1, 0, 7, 30, 90, 180, 500], labels=categories)\nwaiting_days_categories_dataset = show_attribute_statistics(\"waitdays_cat\", data, 0.005)\nshow_no_show_trend(waiting_days_categories_dataset, \"waitdays_cat\", False)","a7dec32d":"#No show e diabetes\nsns.countplot(x='no_show', hue='diabetes', data=data)","eee82a9a":"fig, ax =plt.subplots(2,2, figsize=(15,10))\nsns.countplot(x='no_show', hue='scholarship', data=data, ax=ax[0][0]).set_title('No-show vs Scholarship')\nsns.countplot(x='no_show', hue='handicap', data=data, ax=ax[0][1]).set_title('No-show vs Handicap')\nsns.countplot(x='no_show', hue='hypertension', data=data, ax=ax[1][0]).set_title('No-show vs Hipertension')\nsns.countplot(x='no_show', hue='alcoholism', data=data, ax=ax[1][1]).set_title('No-show vs Alcoholism')","417849f4":"received_sms_dataset = show_attribute_statistics(\"sms_received\", data, 0.005)\nshow_no_show_trend(received_sms_dataset, \"sms_received\")","08d21923":"#Qual a frequ\u00eancia de consultas por dia da semana\nsns.countplot(x='appointment_weekday', data=data)\nplt.xticks(rotation=15)","830106e5":"appointment_week_day_dataset = show_attribute_statistics(\"appointment_weekday\", data, 0.005, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])\nshow_no_show_trend(appointment_week_day_dataset, \"appointment_weekday\", False)","5fbedce3":"Vamos adicionar uma coluna que mostrar\u00e1 quantos dias houveram entre a data em que foi feito o agendamento, e a consulta em si.\nPara isso, antes, precisamos tratar os campos de data, porque eles est\u00e3o como strings","fbfe98be":"A nova variavel est\u00e1 com um formato de data, mas para n\u00f3s \u00e9 importante apenas o n\u00famero de dias.\nEnt\u00e3o vamos ignorar hora e unidades menores, e transformar em n\u00famero\nValor -1 \u00e9 igual a 'hoje'; 0 significa 'amanh\u00e3'."}}