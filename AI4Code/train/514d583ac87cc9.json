{"cell_type":{"bfbc0c7b":"code","01ef5802":"code","34667d6b":"code","e3727bcb":"code","9a0f0792":"code","7476ec53":"code","f1693687":"code","2772ec5a":"code","4ca0ec98":"code","0defd7f8":"code","9789b47a":"code","d98c3950":"code","dfe6dbb9":"code","1c2eaefb":"code","260ccdb6":"markdown","33ccec69":"markdown"},"source":{"bfbc0c7b":"#libraries\nimport numpy as np \nimport pandas as pd \nimport random\n\n# folder\nimport os\nimport glob\n\n# image\nfrom PIL import Image\n\n# visu\nimport matplotlib.pyplot as plt\nplt.rc('image', cmap='gray')\n\n# sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n#tensorflow and keras\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator","01ef5802":"train_path = '..\/input\/chest-xray-pneumonia\/chest_xray\/train'\nvalid_path = '..\/input\/chest-xray-pneumonia\/chest_xray\/val'\ntest_path = '..\/input\/chest-xray-pneumonia\/chest_xray\/test'","34667d6b":"train_datagen = ImageDataGenerator(rotation_range = 20, width_shift_range = 0.3,\n                                   validation_split = 0.1)\n\ntrain_generator = train_datagen.flow_from_directory(train_path, target_size = (224,224), class_mode = 'sparse',\n                                                    subset = 'training', shuffle = True)\n\nval_generator = train_datagen.flow_from_directory(train_path, target_size = (224,224), class_mode = 'sparse',\n                                                  subset = 'validation', shuffle = True)","e3727bcb":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntest_data = test_datagen.flow_from_directory(test_path, target_size = (224, 224), class_mode = 'sparse')","9a0f0792":"from tensorflow.keras.applications.mobilenet import MobileNet\nbase_model = MobileNet(input_shape = (224, 224, 3), include_top = False, weights = 'imagenet')","7476ec53":"base_model.trainable = True","f1693687":"global_avarage_pooling = tf.keras.layers.GlobalAveragePooling2D()(base_model.output)\n\nfully_connected_layer = tf.keras.layers.Dense(units = 1024, activation = 'relu')(global_avarage_pooling)\nfully_connected_layer = tf.keras.layers.Dropout(0.5)(fully_connected_layer)\n\nfully_connected_layer = tf.keras.layers.Dense(units = 1024, activation = 'relu')(fully_connected_layer)\nfully_connected_layer = tf.keras.layers.Dropout(0.5)(fully_connected_layer)\n\nprediction_layer = tf.keras.layers.Dense(units = 2, activation = 'softmax')(fully_connected_layer)","2772ec5a":"clasifier = tf.keras.models.Model(inputs = base_model.input, outputs = prediction_layer)","4ca0ec98":"clasifier.summary()","0defd7f8":"clasifier.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = 0.0001), loss = 'sparse_categorical_crossentropy',\n                  metrics = ['accuracy'])","9789b47a":"#early stopping\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\ncheckpoint = ModelCheckpoint('model\/pneumonia.h5', monitor = 'val_loss', save_best_only = True,\n                             mode = 'min', verbose = 1)\nearlystop = EarlyStopping(monitor = 'val_loss', patience = 7, mode = 'min', verbose = 1, restore_best_weights = True,\n                          min_delta = 0.001)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.003, patience = 3, verbose = 1, mode = 'min',\n                              min_delta = 0.0001)\ncallback = [checkpoint, reduce_lr, earlystop]","d98c3950":"epochs_history = clasifier.fit(x = train_generator, validation_data = val_generator, epochs = 50, callbacks = callback,\n                               batch_size = 8)","dfe6dbb9":"acc = clasifier.history.history['accuracy']\nval_acc = clasifier.history.history['val_accuracy']\nloss = clasifier.history.history['loss']\nval_loss = clasifier.history.history['val_loss']\n\nepochs_range = clasifier.history.epoch\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","1c2eaefb":"_, accuracy = clasifier.evaluate(test_data)\nprint('accuracy in test_set: %.2f' %(accuracy*100),'%')","260ccdb6":"## <b>2. Loading data<\/b>\n#### <b>There are two categories in three sets:<b>","33ccec69":"## <b>5. Convolutionnal neural network<b>"}}