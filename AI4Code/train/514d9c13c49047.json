{"cell_type":{"048dcfc3":"code","67ec1cf7":"code","c01c9609":"code","3a10808e":"markdown","69d22c7a":"markdown","8d64d75e":"markdown"},"source":{"048dcfc3":"%%writefile main.cpp\n#include <array>\n#include <cassert>\n#include <algorithm>\n#include <cmath>\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <random>\nusing namespace std;\n#include <chrono>\nusing namespace std::chrono;\n\nconstexpr array<uint8_t, 12> DISTRIBUTION{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5}; \/\/ You can setup how many families you need for swaps and what best choice use for each family\n\/\/ {2, 5} it's mean the first random family will brute force for choices 1-2 and the second random family will brute force for choices 1-5\n\nconstexpr int MAX_OCCUPANCY = 300;\nconstexpr int MIN_OCCUPANCY = 125;\nconstexpr int NUMBER_FAMILIES = 6000;\nconstexpr int NUMBER_DAYS = 100;\nconstexpr int BEST_N = 10;\narray<uint8_t, NUMBER_FAMILIES> n_people;\narray<array<uint8_t, 10>, NUMBER_FAMILIES> choices;\narray<array<uint16_t, 10>, NUMBER_FAMILIES> PCOSTM;\narray<array<array<double, 5>, 176>, 176> ACOSTM;\n\nvoid init_data() {\n    ifstream in(\"..\/input\/santa-2019-revenge-of-the-accountants\/family_data.csv\");\n    \n    assert(in && \"family_data.csv\");\n    string header;\n    int n,x;\n    char comma;\n    getline(in, header);\n    for (int j = 0; j < choices.size(); ++j) {\n        in >> x >> comma;\n        for (int i = 0; i < 10; ++i) {\n            in >> x >> comma;\n            choices[j][i] = x-1;\n        }\n        in >> n;\n        n_people[j] = n;\n    }\n    array<int, 10> pc{0, 50, 50, 100, 200, 200, 300, 300, 400, 500};\n    array<int, 10> pn{0,  0,  9,   9,   9,  18,  18,  36,  36, 235};\n    for (int j = 0; j < PCOSTM.size(); ++j)\n        for (int i = 0; i < 10; ++i)\n            PCOSTM[j][i] = pc[i] + pn[i] * n_people[j];\n    \n    for (int i = 0; i < 176; ++i)\n        for (int j = 0; j < 176; ++j)\n            for (int k = 1; k <= 5; ++k)\n                ACOSTM[i][j][k-1] = i * pow(i+MIN_OCCUPANCY, 0.5 + abs(i-j) \/ 50.0) \/ 400.0 \/ k \/ k;\n}\n\narray<uint8_t, NUMBER_FAMILIES> read_submission(string filename) {\n    ifstream in(filename);\n    assert(in && \"submission.csv\");\n    array<uint8_t, NUMBER_FAMILIES> assigned_day{};\n    string header;\n    int id, x;\n    char comma;\n    getline(in, header);\n    for (int j = 0; j < choices.size(); ++j) {\n        in >> id >> comma >> x;\n        assigned_day[j] = x-1;\n        auto it = find(begin(choices[j]), end(choices[j]), assigned_day[j]);\n        if (it != end(choices[j]))\n            assigned_day[j] = distance(begin(choices[j]), it);\n    }\n    return assigned_day;\n}\nstruct Index {\n    Index(array<uint8_t, NUMBER_FAMILIES> assigned_days_) : assigned_days(assigned_days_)  {\n        setup();\n    }\n    array<uint8_t, NUMBER_FAMILIES> assigned_days;\n    array<uint16_t, NUMBER_DAYS> daily_occupancy_{};\n    int preference_cost_ = 0;\n    void setup() {\n        preference_cost_ = 0;\n        daily_occupancy_.fill(0);\n        for (int j = 0; j < assigned_days.size(); ++j) {\n            daily_occupancy_[choices[j][assigned_days[j]]] += n_people[j];\n            preference_cost_ += PCOSTM[j][assigned_days[j]];\n        }\n    }\n    double calc(const array<uint16_t, NUMBER_FAMILIES>& indices, const array<uint8_t, DISTRIBUTION.size()>& change) {\n        double accounting_penalty = 0.0;\n        auto daily_occupancy = daily_occupancy_;\n        int preference_cost = preference_cost_;\n        for (int i = 0; i < DISTRIBUTION.size(); ++i) {\n            int j = indices[i];\n            daily_occupancy[choices[j][assigned_days[j]]] -= n_people[j];\n            daily_occupancy[choices[j][       change[i]]] += n_people[j];\n            \n            preference_cost += PCOSTM[j][change[i]] - PCOSTM[j][assigned_days[j]];\n        }\n\n        for (auto occupancy : daily_occupancy)\n            if (occupancy < MIN_OCCUPANCY)\n                return 1e12*(MIN_OCCUPANCY-occupancy);\n            else if (occupancy > MAX_OCCUPANCY)\n                return 1e12*(occupancy - MAX_OCCUPANCY);\n\n        for (int day = 0; day < NUMBER_DAYS; ++day)\n            for (int j = 0; j < 5; ++j)\n                accounting_penalty += ACOSTM[daily_occupancy[day]-MIN_OCCUPANCY][daily_occupancy[min(NUMBER_DAYS-1, day+j+1)]-MIN_OCCUPANCY][j];\n\n        return preference_cost + accounting_penalty;\n    }\n    void reindex(const array<uint16_t, DISTRIBUTION.size()>& indices, const array<uint8_t, DISTRIBUTION.size()>& change) {\n        for (int i = 0; i < DISTRIBUTION.size(); ++i) {\n            assigned_days[indices[i]] = change[i];\n        }\n        setup();\n    }\n};\n\ndouble calc(const array<uint8_t, NUMBER_FAMILIES>& assigned_days, bool print=false) {\n    int preference_cost = 0;\n    double accounting_penalty = 0.0;\n    array<uint16_t, NUMBER_DAYS> daily_occupancy{};\n    for (int j = 0; j < assigned_days.size(); ++j) {\n        preference_cost += PCOSTM[j][assigned_days[j]];\n        daily_occupancy[choices[j][assigned_days[j]]] += n_people[j];\n    }\n    for (auto occupancy : daily_occupancy)\n        if (occupancy < MIN_OCCUPANCY)\n            return 1e12*(MIN_OCCUPANCY-occupancy);\n        else if (occupancy > MAX_OCCUPANCY)\n            return 1e12*(occupancy - MAX_OCCUPANCY);\n\n    for (int day = 0; day < NUMBER_DAYS; ++day)\n        for (int j = 0; j < 5; ++j)\n            accounting_penalty += ACOSTM[daily_occupancy[day]-MIN_OCCUPANCY][daily_occupancy[min(99, day+j+1)]-MIN_OCCUPANCY][j];\n\n    if (print) {\n        cout << preference_cost << \" \" << accounting_penalty << \" \" << preference_cost+accounting_penalty << endl;\n    }\n    return preference_cost + accounting_penalty;\n}\n\nvoid save_sub(const array<uint8_t, NUMBER_FAMILIES>& assigned_day) {\n    ofstream out(\"submission.csv\");\n    out << \"family_id,assigned_day\" << endl;\n    for (int i = 0; i < assigned_day.size(); ++i)\n        out << i << \",\" << choices[i][assigned_day[i]]+1 << endl;\n}\n        \nconst vector<array<uint8_t, DISTRIBUTION.size()>> changes = []() {\n    vector<array<uint8_t, DISTRIBUTION.size()>> arr;\n    array<uint8_t, DISTRIBUTION.size()> tmp{};\n    for (int i = 0; true; ++i) {\n        arr.push_back(tmp);\n        tmp[0] += 1;\n        for (int j = 0; j < DISTRIBUTION.size(); ++j)\n            if (tmp[j] >= DISTRIBUTION[j]) {\n                if (j >= DISTRIBUTION.size()-1)\n                    return arr;\n                tmp[j] = 0;\n                ++tmp[j+1];\n            }\n    }\n    return arr;\n}();\n\ntemplate<class ExitFunction>\nvoid stochastic_product_search(Index index, ExitFunction fn) {\n    double best_local_score = calc(index.assigned_days);\n    thread_local std::mt19937 gen(std::random_device{}());\n    uniform_int_distribution<> dis(0, NUMBER_FAMILIES-1);\n    array<uint16_t, NUMBER_FAMILIES> indices;\n    iota(begin(indices), end(indices), 0);\n    array<uint16_t, DISTRIBUTION.size()> best_indices{};\n    array<uint8_t, DISTRIBUTION.size()> best_change{};\n    bool need_save = false;\n    for (; fn();) {\n        bool found_better = false;\n        for (int k = 0; k < BEST_N; ++k) {\n            for (int i = 0; i < DISTRIBUTION.size(); ++i) \/\/random swap\n                swap(indices[i], indices[dis(gen)]);\n            for (const auto& change : changes) {\n                auto score = index.calc(indices, change);\n                if (score < best_local_score) {\n                    found_better = true;\n                    best_local_score = score;\n                    best_change = change;\n                    copy_n(begin(indices), DISTRIBUTION.size(), begin(best_indices));\n                }\n            }\n        }\n        if (found_better) { \/\/ reindex from N best if found better\n            need_save = true;\n            index.reindex(best_indices, best_change);\n\/\/            save_sub(index.assigned_days);\n            calc(index.assigned_days, true);\n        }\n    }\n    if (need_save)\n        save_sub(index.assigned_days);\n}\n\nint main() {\n    init_data();\n    auto assigned_day = read_submission(\"..\/input\/mip-optimization-preference-cost-santa2019revenge\/submission.csv\");\n\n    Index index(assigned_day);\n    calc(index.assigned_days, true);\n\/\/    auto forever = []() { return true; };\n\/\/    auto count_exit = [start = 0]() mutable { return (++start <= 1000); };\n    auto time_exit = [start = high_resolution_clock::now()]() {\n        return duration_cast<minutes>(high_resolution_clock::now()-start).count() < 355; \/\/5h55\n    };\n    \n    stochastic_product_search(index, time_exit);\n    return 0;\n}","67ec1cf7":"!g++ -pthread -lpthread -O3 -std=c++17 -o main main.cpp","c01c9609":"!.\/main","3a10808e":"**Run:**","69d22c7a":"**Compile:**","8d64d75e":"**C++ code:**"}}