{"cell_type":{"96fb3b2c":"code","d3639458":"code","576cc087":"code","346fa2d7":"code","13451bd5":"code","92963813":"code","700bc250":"code","4f18a4fc":"code","70761d38":"code","5a3b9d87":"code","c6a01329":"code","cfd32913":"code","6bf1656a":"code","2c233677":"code","4525d457":"code","ce128d92":"code","31349452":"code","6d2d7b4b":"code","d0523ff4":"code","ac52ef6d":"code","355e70cb":"code","3c85a1f9":"code","2c6fca61":"code","8e09a1f9":"code","4c8b9e76":"code","cb8b9fe5":"code","e1fe4ca2":"code","fcdc8815":"code","e7fdff7e":"code","cde78da4":"code","0f103848":"code","46887213":"code","39257883":"code","cbe5b87b":"code","7c928b3b":"code","5acee3bd":"code","9a9178c3":"code","441c87ab":"code","3777c121":"code","431c7cb8":"code","3580613c":"code","7b8d09ce":"code","716781c4":"code","d2a24a43":"code","4ea1631b":"code","4add4ac6":"code","3dbaebec":"code","697841b7":"code","9babfd76":"code","f617af59":"code","9c930f2e":"code","559757f8":"code","94e9b550":"code","1346ca48":"markdown","30a6eaf4":"markdown","adc65299":"markdown","10d674a2":"markdown","a0b2ee58":"markdown","2f8db3c7":"markdown","67e4a634":"markdown","2615be0e":"markdown","e4d0dc56":"markdown","132ad4f1":"markdown","f8124a00":"markdown","4c56f3a5":"markdown","870e77ed":"markdown","32ddfe79":"markdown","370ded1a":"markdown","79752cbb":"markdown","b52f23c1":"markdown","39a495d4":"markdown"},"source":{"96fb3b2c":"\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport networkx as nx\nimport nltk, string\nimport matplotlib.pyplot as plt\nimport re,glob\nimport time\nimport os\nimport random\nfrom nltk.corpus import stopwords \nfrom nltk.stem import WordNetLemmatizer\n\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nw_tokenizer = nltk.tokenize.WhitespaceTokenizer()\nlemmatizer = nltk.stem.WordNetLemmatizer()\n\nstop_words = set(stopwords.words('english'))\nstop_words.update(['gives'])\n\n\n'''remove punctuation, lowercase, stem'''\npunct = '-'\nremove_punctuation_map = dict((ord(char), ' ') for char in punct)    \ndef normalize(text):\n    return nltk.word_tokenize(text.lower().translate(remove_punctuation_map))\n\ndef clean_text(text):\n    text = text.lower().translate(remove_punctuation_map)\n    \n    return ' '.join(lemmatizer.lemmatize(w) for w in w_tokenizer.tokenize(text))\n\nnumwords={}\nnumbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\"nine\", \"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\"]\nfor idx, word in enumerate(numbers):    numwords[word] = (idx)\n\n","d3639458":"path = '..\/input\/cityofla\/CityofLA\/Additional data\/'\nfilename ='sample job class export template.csv'\nwith open(path + \"\/\" + filename, 'r', errors='ignore') as f:\n        c_h = f.readline()\n        #column_heads = [\"FILE_NAME\",\"JOB_CLASS_NO\"]\nc_h = c_h.replace(\"\\n\",\"\")\ncol_heads = {}\ncolumn_heads = []\n\nfor i, word in enumerate(c_h.split(',')): \n    column_heads.append(word)\nfor i, word in enumerate (column_heads): col_heads[word] = (i)\nprint (column_heads)","576cc087":"path = '..\/input\/cityofla\/CityofLA\/Additional data\/'\nfilename ='job_titles.csv'\nwith open(path + \"\/\" + filename, 'r', errors='ignore') as f:\n        j_t = f.readlines()\nlen_j_t = len(j_t)\nfor i in range(len_j_t):\n        j_t[i] = j_t[i].replace(\"\\n\",\"\")\n        if j_t[i]  ==  'Vocational Worker  DEPARTMENT OF PUBLIC':\n            j_t[i] = 'VOCATIONAL WORKER'\n\nj_t.append('SEASONAL POOL MANAGER')\nj_t.append('OPEN WATER LIFEGUARD')\nj_t.append('ELECTRICAL ENGINEER')\nj_t.append('WASTEWATER TREATMENT MECHANIC')\nj_t.append('TELECOMMUNICATIONS PLANNER')\nj_t.append('CONSTRUCTION EQUIPMENT SERVICE SUPERVISOR')\nj_t.append('COMPUTER OPERATOR')\nj_t.append('SPECIAL PROGRAM ASSISTANT')\nj_t.append('FIRE PROTECTION ENGINEER')\nj_t.append('PRINT SHOP TRAINEE')\nj_t.append('IMPROVEMENT ASSESSOR')\nj_t.append('ENGINEERING ASSOCIATE')\nj_t.append('SAFETY ENGINEER PRESSURE VESSELS')\nj_t.append('SENIOR ROOFER')\nj_t.append('SENIOR CLERK TYPIST')\nj_t.append('SENIOR STREET SERVICES INVESTIGATOR')\nj_t.append('LIBRARY CLERICAL ASSISTANT')\nj_t.append('WASTEWATER TREATMENT ELECTRICIAN')\nj_t.append('PERFORMING ARTS PROGRAM COORDINATOR')\nj_t.append('PROCUREMENT AIDE')\nj_t.append('LOAD DISPATCHER')\nj_t.append('ASSOCIATE ZOO CURATOR')\n\n\n\n#Executive, Senior, Coordinating or Web Content Producer.?\n\n\n#sort the list so that longest by number of words is first\n#this allows us to remove a match and so duplicates are avoided\nj_t.sort(key=lambda x: len(x.split()), reverse=True)\n\n#print (j_t)","346fa2d7":"# path = '..\/input\/cityofla\/CityofLA\/Additional data\/'\n# sample_job_class = pd.read_csv(path + 'sample job class export template.csv')\n# df_job_class = sample_job_class.copy()\n# sample_job_class.head()","13451bd5":"def find_experience(line,job):\n    len_j_t = len(j_t)\n    max_pos = 0\n    exp = ''\n    last_exp = ''\n    line = line.upper()\n    full_line = line\n    job = job.upper()\n    \n    assist_pattern =  '(.*)'+ 'ASSISTING' + '(.*)'\n    if re.search(assist_pattern, line):\n        line = re.search(assist_pattern, line).group(1)\n    assist_pattern =  '(.*)'+ 'SUBSTITUT' + '(.*)'\n    if re.search(assist_pattern, line):\n        line = re.search(assist_pattern, line).group(1)\n    assist_pattern =  '(.*)'+ 'YEARS OF WHICH' + '(.*)'\n    if re.search(assist_pattern, line):\n        line = re.search(assist_pattern, line).group(1)\n    assist_pattern =  '(.*)'+ 'INCLUDING'+ ('.*?')+ ('YEARS') + '(.*)'\n    if re.search(assist_pattern, line):\n        line = re.search(assist_pattern, line).group(1)\n\n    #print ('find',line)\n    for i in range(len_j_t):\n        #print (j_t[i])\n        #print (job)\n#        pattern =  j_t[i]+ '( I{0,3} )|(\" \")'\n        pattern =  j_t[i]+ '( I{0,3} )'\n        pattern =  j_t[i]+ '( I{0,3}[ |\\.|;|,])'\n        pattern2 =  j_t[i] + '( |\\.|;|,)'\n        \n        special = 'FIREFIGHTER'\n        special_ex = 'ENDORSEMENT'\n        special2 = 'ARCHITECT'\n        special2_ex = 'LICENSE'\n        \n        if job == j_t[i] and re.search(pattern2, line):\n            #remove instances of the job title in the requirements section\n            #print ('job', job)\n            src = re.search(pattern2, line)\n            line =line.replace(src.group(0),'')\n                           \n        \n        if re.search(pattern2, line) and job!= j_t[i] and job != ('ASSISTANT '+ j_t[i]):\n            if not(j_t[i] == special and  re.search(special + \" \" +special_ex, line)):\n                 if not(j_t[i] == special2 and  re.search(special2 + \" \" +special2_ex, line)):\n                    src = re.search(pattern2, line)\n                    #print ('1', src.group(0))\n                    #print ('1a line',line)\n                    matches = re.findall(pattern, line) \n                    if matches:\n                        for match in matches:\n                            exp = exp + j_t[i]  + match +', '\n                            #print ('exp in matches',exp)\n                    else:\n                        exp = exp + j_t[i] +', '\n                    line =line.replace(src.group(0),'')\n                    #print ('exp',exp)\n                    #print ('line after replace', line)\n                    src = re.search(j_t[i], full_line)\n                    #print ('2', src.group(0))\n                    if src.start(0) > max_pos:\n                        #print ('start, title',src.start(1),j_t[i])\n                        max_pos = src.start(0)\n                        last_exp = j_t[i]\n    exp = exp.rstrip(', ')\n    #print (exp)\n    #print(last_exp)\n    return exp, last_exp\n\n# TEST CODE\n# line = \"1. Two years of full-time paid experience as a Safety Engineer Pressure Vessels with the City of Los Angeles; and\"\n# job = 'Senior Safety Engineer Pressure Vessels'\n\n# find_experience(line,job)","92963813":"def examination_type(line, level):\n    #print ('line, level',line, level)\n    if (level == 0):\n        exam_type_pattern = '(THIS EXAM)(.*?)( IS TO BE GIVEN)(.*)'   \n        exam_type_pattern2 = 'FOR EXEMPT EMPLOYEES SEEKING TO BECOME(.*)'   \n        if re.search(exam_type_pattern,line):\n            #print (re.search(exam_type_pattern,line).group(4))\n            row[col_heads['EXAM_TYPE']]  = re.search(exam_type_pattern,line).group(4)\n            level = 1\n        if  re.search(exam_type_pattern2,line):\n            row[col_heads['EXAM_TYPE']]  = line\n            level = 1            \n    else:\n#         #print (line)\n#         row[col_heads['EXAM_TYPE']]  = row[col_heads['EXAM_TYPE']] + ' ' + line\n        level = 0\n        exam_type_pattern3 = 'The City of'   \n        \n        if not re.search(exam_type_pattern3,line):\n            exam_type = row[col_heads['EXAM_TYPE']] + ' ' + line  \n            exam_type = exam_type.replace ('AN AN','AN')\n            exam_type = exam_type.replace ('AND OPEN','AND AN OPEN')\n            exam_type = exam_type.replace ('AND OPEN','AND AN INTERDEPARTMENTAL')\n            exam_type = exam_type.replace ('BOTH ON','ON')\n            exam_type = exam_type.replace ('ON BOTH','ON')\n            exam_type = exam_type.replace ('ON A ','ON AN ') \n            exam_type = exam_type.replace ('AND ON AN','AND AN')  \n            exam_type = exam_type.replace ('AND ON AN','AND AN')  \n            exam_type = exam_type.replace ('TO ON','ON')  \n            exam_type = exam_type.replace ('ONLY ON A','ON A')  \n            exam_type = exam_type.replace ('BASIS ONLY','BASIS')  \n       \n            exam_type = exam_type.replace ('INTERDEPARMENTAL','INTERDEPARTMENTAL')  \n            exam_type = exam_type.replace ('BASIS   NVVC','BASIS')  \n   \n        \n            exam_type = exam_type.replace ('AND INTERDEPARTMENTAL','AND AN INTERDEPARTMENTAL')  \n       \n            exam_type = exam_type.replace ('COMPETITVE','COMPETITIVE')\n            exam_type = exam_type.replace ('ON AN OPEN COMPETITIVE AND AN INTERDEPARTMENTAL PROMOTIONAL BASIS','ON AN INTERDEPARTMENTAL PROMOTIONAL AND AN OPEN COMPETITIVE BASIS')\n            \n            row[col_heads['EXAM_TYPE']]  = exam_type\n        else:\n            row[col_heads['EXAM_TYPE']] = row[col_heads['EXAM_TYPE']].replace ('ONLY ON A','ON A') \n        \n   \n    return level","700bc250":"def driver_licence(line):\n# cases to consider:\n# a valid california driver's license is required.\n# a valid california driver's license may be required.\n# for positions requiring a valid class b driver's license\n# a valid unrestricted california commercial class a or class b driver's license and valid medical certificate approved\n# a valid california commercial class b driver's license \n#Some positions may require a valid California Class C and\/or Class B driver's license.\n# \n\n    line = line.lower()\n#     if ('driver'  in line):\n#         if ('some positions may require' not in line):\n#             if (\"a valid california driver's license is required\" not in line):\n#                 print (line)\n            \n    driver_lic_pattern = '(driver)(.*)(required)'  \n    driver_lic_may_pattern = '(driver)(.*)(may)(.*)(required|approved)'   \n    \n    #driver_lic_class_pattern = '(.*)(class)(.*)(driver)(.*)(required|approved)'   \n    driver_lic_class_pattern = '(.*?)(class)(?!\\..*?)(driver)(.*?)(;|\\.|:|,|\\r|\\n)'   \n    driver_lic_may_class_pattern = 'positions(.*) (requir)(.*?)(class)(.*)(driver)'   \n    \n    driver_lic_endorse_pattern = '(license with )(.*)(endorsement.)'   \n    \n    if re.search(driver_lic_may_pattern,line):\n#            print ('dlp', ' P')\n            row[col_heads['DRIVERS_LICENSE_REQ']]  = 'P'\n    elif re.search(driver_lic_pattern,line):\n#            print ('dlp', ' R')\n            row[col_heads['DRIVERS_LICENSE_REQ']]  = 'R'\n    if re.search(driver_lic_class_pattern,line):\n            may = re.search(driver_lic_class_pattern,line).group(1)\n #           print ('may', may)\n #           print (\"re.search('may',may)\",re.search('may',may))\n            if re.search('may',may) == None:\n                lclass = re.search(driver_lic_class_pattern,line).group(3)\n #               print ('dlpc', lclass)\n                lclass = lclass.rstrip(\" \").lstrip(\" \")\n                lclass = lclass.rstrip(\"\\'\").lstrip(\"\\'\").upper()\n #               print ('dlpcs', lclass)\n                if row[col_heads['DRIV_LIC_TYPE']] == '':\n                    row[col_heads['DRIV_LIC_TYPE']]  =  lclass.upper() + \" \"\n                else:\n                    row[col_heads['DRIV_LIC_TYPE']]  = row[col_heads['DRIV_LIC_TYPE']] + lclass + \" \"\n\n                if row[col_heads['DRIVERS_LICENSE_REQ']] != 'R':\n                    row[col_heads['DRIVERS_LICENSE_REQ']]  = 'R'\n#                 print ('R')\n\n    if re.search(driver_lic_may_class_pattern,line):\n  #              print(\"row[col_heads['DRIVERS_LICENSE_REQ']]\",row[col_heads['DRIVERS_LICENSE_REQ']])\n                lclass = re.search(driver_lic_may_class_pattern,line).group(5)\n                if row[col_heads['DRIVERS_LICENSE_REQ']] == '':\n                    row[col_heads['DRIV_LIC_TYPE']]  = lclass.upper()\n                    row[col_heads['DRIVERS_LICENSE_REQ']]  = 'P'\n  #                  print ('dlmpc', 'P',lclass.upper)\n                \n    if re.search(driver_lic_endorse_pattern,line):\n            lclass = re.search(driver_lic_endorse_pattern,line).group(2) + re.search(driver_lic_endorse_pattern,line).group(3)\n   #         print ('endorse', lclass)\n            row[col_heads['ADDTL_LIC']]  = lclass.upper()\n    \n    return    ","4f18a4fc":"\ndef entry_salaries (body,row):\n    \n    line = body.replace (',','')\n    line = body.replace ('*','')\n    line = line.lower()\n    line = line.replace(' to ','-')\n    \n    #print (\"sal line\", line)\n    salary_flat_pattern = '(\\$|\\$ )(\\d{4,8})(.*)(flat)(.*?)(rated)'\n    salary_range_pattern = '(\\$|\\$ )(\\d{4,8})(-)(\\$|'')(\\d{4,8})'\n    \n\n    salary_pattern = '(.*)(department of water and power)(.*)'  \n    if re.search(salary_pattern,line):\n        part1 = re.search(salary_pattern,line).group(1)\n        part2 = re.search(salary_pattern,line).group(3)\n    else:\n        part1 = line\n        part2 = ''\n\n    part1s = ''\n    part2s = ''\n\n    #salary_flat_pattern = '(\\$)(.*)(flat-rated\\))'\n    if re.search(salary_flat_pattern,part1):\n        part1s = re.search(salary_flat_pattern,part1).group(1) + re.search(salary_flat_pattern,part1).group(2)  +'(flat-rated)' \n    if re.search(salary_flat_pattern,part2):\n        part2s = re.search(salary_flat_pattern,part2).group(1) + re.search(salary_flat_pattern,part2).group(2)  +'(flat-rated)'\n        \n    if re.search(salary_range_pattern,part1):\n        part1s = re.search(salary_range_pattern,part1).group(0) \n    if re.search(salary_range_pattern,part2):\n        part2s = re.search(salary_range_pattern,part2).group(0) \n    if (part1s != ''):\n        row[col_heads['ENTRY_SALARY_GEN']]  = \"\\\\\" + part1s\n    if (part2s != ''):\n        row[col_heads['ENTRY_SALARY_DWP']]  = \"\\\\\" + part2s\n    if re.search('scale pending',part1):\n         row[col_heads['ENTRY_SALARY_GEN']]  = part1\n    if re.search('scale pending',part2):\n         row[col_heads['ENTRY_SALARY_GEN']]  = part2\n       \n    \n    #print (line)\n    #print (part1s)\n    #print (part2s)\n\n    return row\n","70761d38":"def req_clr (row):\n\n    row[col_heads['EDUCATION_YEARS']] = ''\n    row[col_heads['SCHOOL_TYPE']] = ''\n    row[col_heads['EDUCATION_MAJOR']] = ''\n    row[col_heads['EXPERIENCE_LENGTH']] = ''\n    row[col_heads['FULL_TIME_PART_TIME']] = ''\n    row[col_heads['COURSE_LENGTH']] = ''\n    row[col_heads['COURSE_COUNT']] = ''\n    row[col_heads['COURSE_SUBJECT']] = ''\n    row[col_heads['MISC_COURSE_DETAILS']] = ''\n    row[col_heads['EXP_JOB_CLASS_FUNCTION']] = ''\n    row[col_heads['EXP_JOB_CLASS_ALT_RESP']] = ''\n    row[col_heads['EXP_JOB_CLASS_TITLE']] = ''\n    row[col_heads['REQUIREMENT_SET_ID']] = ''\n    row[col_heads['REQUIREMENT_SUBSET_ID']] = ''\n\n    return (row)","5a3b9d87":"def fill_row(title,content):\n    #print ('content', content)\n    #print ('row[col_heads[title]] ', row[col_heads[title]] )\n    row[col_heads[title]] = content\n    return True\n\ndef clr_and_fill_row(title,content):\n    row[col_heads[title]] = content\n    return \n ","c6a01329":"#modify some text to make searches work\n\ndef clean_txt (line):\n    line = line.replace ('health and safety',' health & safety')\n    line = line.replace ('Sr.','Senior')\n    line = line.replace ('Pre-','Pre')\n    line = line.replace ('Construction Maintenance Superintendent','Construction and Maintenance Superintendent')\n    return line\n\ndef  convert_words_to_number (line):\n# convert word numbers to numbers as strings\n            \n    oldline = line.replace ('-',' ')\n    line =\"\"\n    for i, word in enumerate(oldline.split()):\n        #print (word)\n        word_l = word.lower()\n        if word_l in numwords:\n            #print ('numwords[word_l]',numwords[word_l])\n            word = str (numwords[word_l])\n        line = line + \" \" + word\n    #print ('oldline',oldline)\n    #print ('line',line)\n    return line\n\nnum_index_pattern = '^(.|'')(\\d)(\\.)(.*)'\nchar_index_pattern = '(?i)^(.|''|.\\()([a-z])(\\.|\\))(.*)'\nedpattern = '(high school, university, college, trade or technical school|trade school or college|college or trade school|college or university or trade school|college or university|college|university|American Bar Association accredited law school)'\n\n\ndef requirement_and_sub(line, row):\n    #print ('set line', line)\n    if  re.search(num_index_pattern,line):\n        curr_req = re.search(num_index_pattern,line).group(2)\n        #row[col_heads['REQUIREMENT_SET_ID']] = int(curr_req)\n        row[col_heads['REQUIREMENT_SET_ID']] = curr_req\n#        row[col_heads['REQUIREMENT_SUBSET_ID']] = \"A\"\n    elif  re.search(char_index_pattern,line):\n        curr_reqsub = re.search(char_index_pattern,line).group(2)\n        row[col_heads['REQUIREMENT_SUBSET_ID']] = curr_reqsub.upper()\n    else:   \n        row[col_heads['REQUIREMENT_SET_ID']] = ''\n        row[col_heads['REQUIREMENT_SUBSET_ID']] = ''\n        \n        \n    return row\n\ndef education(line, row):\n    semester_pattern ='(\\d{1,3})(.)(semester)'\n    qtr_pattern ='(\\d{1,3})(.)(quarter units)(.*?)( from|in|with|of|at)(.*)(;|\\.)'\n    courses_pattern = '(?i)(completion of )(\\d{1,3})(.)(course)'\n    pattern2 = 'college|university'\n    major_pattern = '(?i)(major in|degree in|college in)(.*?)(;|including|and |from|\\.)'\n    pattern3 = 'high school or G.E.D. equivalent'\n    course_len = ''\n    exp_found = False\n    if (re.search(major_pattern, line) and not re.search('may be substituted', line)):\n        exp_found = fill_row('EDUCATION_MAJOR',(re.search(major_pattern, line).group(2).replace(\", \", \"|\").replace(\" or \", \"|\")))\n    if (re.search(edpattern, line)):\n        clr_and_fill_row('SCHOOL_TYPE', re.search(edpattern, line).group(0))\n        course_len_pattern ='(\\d{1,3})(.)(year)(.{1,5})(college or university or trade school|college or university|college|university)'\n        if (re.search(course_len_pattern, line)):\n            #exp_found = fill_row('EDUCATION_YEARS',int(re.search(course_len_pattern, line).group(1)))\n            exp_found = fill_row('EDUCATION_YEARS',(re.search(course_len_pattern, line).group(1)))\n\n    if (re.search(semester_pattern, line)):\n        course_len = re.search(semester_pattern, line).group(1)+ 'S'\n    if (re.search(qtr_pattern, line)):\n        course_len = course_len + re.search(qtr_pattern, line).group(1)+ 'Q'\n        exp_found = fill_row('COURSE_SUBJECT',re.search(qtr_pattern, line).group(6))\n        exp_found = fill_row('COURSE_LENGTH', course_len)\n    if (re.search(courses_pattern, line)):\n        exp_found = fill_row('COURSE_COUNT',re.search(courses_pattern, line).group(2))\n#school                    \n    if (re.search(pattern3, line)):\n        exp_found = fill_row('SCHOOL_TYPE', pattern3)\n    return row,exp_found\n\ndef cert_and_completion(line, row):\n#certification\n    exp_found = False\n    cert_pattern ='(?i)(possession)(.*?)(certificate)(.*)(;|\\.)'\n    if (re.search(cert_pattern, line)):\n        exp_found = fill_row('MISC_COURSE_DETAILS', (re.search(cert_pattern, line)).group(0))\n    cert_pattern ='(?i)(certification)(.*?)(;|\\.)'\n    if (re.search(cert_pattern, line)):\n        exp_found = fill_row('MISC_COURSE_DETAILS', (re.search(cert_pattern, line)).group(0))\n    cert_pattern ='(?i)(.*?)(certificate)(.*?)(;|\\.)'\n    if (re.search(cert_pattern, line)):\n        exp_found = fill_row('MISC_COURSE_DETAILS', re.search(cert_pattern, line).group(2) +\\\n                                                    re.search(cert_pattern, line).group(3) + \\\n                                                    re.search(cert_pattern, line).group(4))\n\n        #completion of misc course requirement\n    comp_pattern ='(?i)(completion|attainment)(.*?)(in |of )(.*?)(;|\\.)'\n    if (re.search(comp_pattern, line))  and not re.search(edpattern, line): \n        exp_found = fill_row('MISC_COURSE_DETAILS', (re.search(comp_pattern, line)).group(0))\n    if (re.search(comp_pattern, line))  and  re.search('high school, university, college, trade or technical school|community college or trade school', line):\n        exp_found = fill_row('MISC_COURSE_DETAILS', (re.search(comp_pattern, line)).group(0))\n  \n    return row,exp_found\n\ndef experience_len(line, row):\n    exp_found = False\n\n    pattern ='(full.time|part.time|years as a|\\d{2,6} hours)(.*)(|;|\\.)'\n    if (re.search(pattern, line)):\n        if re.search(pattern, line).group(1) != 'years as a':\n            row[col_heads['FULL_TIME_PART_TIME']] = re.search(pattern, line).group(1).upper()\n        month_pattern = '(\\d{1,3})(.)(month)'\n        year_pattern = '(\\d{1,3})(.)(year)(.{1,5})(full.time|part.time|as a)'\n        if (re.search(month_pattern, line)):\n            fract_yr = (int(re.search(month_pattern, line).group(1)))\/12\n            fract_yr = str(fract_yr)\n            exp_found = fill_row('EXPERIENCE_LENGTH', fract_yr)\n            exp_found = fill_row('EXP_JOB_CLASS_FUNCTION', re.search(pattern, line).group(2))\n        if (re.search(year_pattern, line)):\n            #yr = (int(re.search(year_pattern, line).group(1)))\n            yr = str(re.search(year_pattern, line).group(1))\n            #print ('yr exp A',yr,re.search(pattern, line).group(1))\n            exp_found = fill_row('EXPERIENCE_LENGTH', yr)\n            exp_found = fill_row('EXP_JOB_CLASS_FUNCTION',  re.search(pattern, line).group(2))\n    year_pattern2 ='(\\d{1,3})(.)(years of experience)(.*)(|;|\\.|and|,)'\n    if (re.search(year_pattern2, line)):\n        #yr = (int(re.search(year_pattern2, line).group(1)))\n        yr = str(re.search(year_pattern2, line).group(1))\n        #print ('yr exp B',yr,re.search(year_pattern2, line).group(1))\n        #print ('yr exp lne',line)\n        exp_found = fill_row('EXPERIENCE_LENGTH', yr)\n        exp_found = fill_row('EXP_JOB_CLASS_FUNCTION',  re.search(year_pattern2, line).group(3) + re.search(year_pattern2, line).group(4)  )\n\n    return row,exp_found\n\ndef catch_all (line,row):\n#strip the req id and then print without mod\n    if  re.search(num_index_pattern,line):\n            line = re.search(num_index_pattern,line).group(4)\n    if  re.search(char_index_pattern,line):\n            line = re.search(char_index_pattern,line).group(4)\n    exp_found = fill_row('EXP_JOB_CLASS_FUNCTION', line)\n    return row\n\ndef experience(line, row,exp,last_exp):              \n    row[col_heads['EXP_JOB_CLASS_TITLE']] = exp\n    job_pattern =last_exp.lower()+'(.*)'+'(;|\\.|:|,|\\r|\\n)'\n    #print('exp',line)\n    if (re.search(job_pattern, line.lower())):\n        alt = re.search(job_pattern, line.lower()).group(1)\n        or_pattern = '(.{1,2})(or.)'\n        if (re.match(or_pattern, alt)):\n            #print('exp2',line)\n            exp_found = fill_row('EXP_JOB_CLASS_ALT_RESP', re.search(job_pattern, line.lower()).group(1))\n            exp_found = clr_and_fill_row('EXP_JOB_CLASS_FUNCTION', '')\n        else:\n            class_pattern = '(.*)(in a class|at the level|performing the duties|paid experience as)(.*)(;|\\.|:|,|\\r|\\n)'\n            if re.search(class_pattern,line.lower()):\n                #print('exp3',line)\n\n                exp_found = clr_and_fill_row('EXP_JOB_CLASS_FUNCTION', '')\n                alt_class = \"or \" + re.search(class_pattern, line.lower()).group(2) +re.search(class_pattern, line.lower()).group(3)+ re.search(class_pattern, line.lower()).group(4)\n                exp_found = fill_row('EXP_JOB_CLASS_ALT_RESP', alt_class)\n            else:\n                job_pattern2 ='(experience)(.*)' +last_exp.lower()+'(.*)'+'(;|\\.|:|,|\\r|\\n)'\n                #print('exp4',line)\n\n                if re.search(job_pattern2, line.lower()):\n                    #see water t sup\n                    exp_found = fill_row('EXP_JOB_CLASS_FUNCTION', re.search(job_pattern2, line.lower()).group(0))\n                else:\n                    exp_found = fill_row('EXP_JOB_CLASS_FUNCTION', re.search(job_pattern, line.lower()).group(1))\n    return row\n\n","cfd32913":"def process_state (state,body,line,row,job,data_list):\n    global eda_row\n    if state == 'duties':\n        body += line\n        row[col_heads['JOB_DUTIES']] = body.replace('\\n','')\n    if state == 'annualsalary':\n        line = line.replace (',','').replace(' to ','-')\n        body += line\n        entry_salaries (body,row)\n    if state == 'requirements':\n        exp_found = False\n        line = clean_txt (line)       \n        if (line !=''):\n            sub_pattern = 'substitut'\n            if (re.search(sub_pattern, line)):\n                    exp_found = fill_row('EXP_JOB_CLASS_FUNCTION', line)\n            else:\n                line = convert_words_to_number (line)\n                row = requirement_and_sub(line, row)\n                row,exp_found =  education(line, row)\n                row,exp_found = cert_and_completion(line, row)\n                row,exp_found = experience_len(line, row)\n                exp,last_exp = find_experience (line,job)\n                if exp == '' and not exp_found:\n                    catch_all (line,row)\n                else:\n                    if (exp):\n                        row = experience(line, row,exp,last_exp)\n                    #Specials where job = class mentioned\n                    #print('zoo?',line)\n                    if re.search('Zoo Registrar',line):\n                        exp_found = fill_row('EXP_JOB_CLASS_ALT_RESP','performing the duties of a Zoo Registrar')\n                        exp_found = clr_and_fill_row('EXP_JOB_CLASS_FUNCTION', '')\n   \n                        \n            save_row = row.copy()\n            data_list.append(save_row)\n\n            len_row = len(row)\n            for i in range(len_row):\n                if eda_row[i] == '':\n                     eda_row[i] = row[i]\n                elif  row[i] not in eda_row[i]:\n                    eda_row[i] = eda_row[i] + ' ' + row[i]\n            row = req_clr (row)\n    return row, body,data_list","6bf1656a":"\ndef backfill (data_list, start_job_index, row):\n    \n    save_row = eda_row.copy()\n    eda_data_list.append(save_row)\n    \n    last_job_index = len(data_list)\n    for i in range ( start_job_index,last_job_index):\n        data_list[i][col_heads['EXAM_TYPE']] = row[col_heads['EXAM_TYPE']]\n        data_list[i][col_heads['DRIVERS_LICENSE_REQ']] = row[col_heads['DRIVERS_LICENSE_REQ']]\n        data_list[i][col_heads['DRIV_LIC_TYPE']] = row[col_heads['DRIV_LIC_TYPE']]\n        data_list[i][col_heads['ADDTL_LIC']] = row[col_heads['ADDTL_LIC']]\n    return last_job_index","2c233677":" def line_interp (line, title_line, row, state, body,level,job,data_list):\n    #print ('newline',line)\n    #print ('data_list',data_list)\n    class_pattern ='(Code:.*)(\\d{4})(.*)'\n    sub_pattern = 'substitut'\n    if line != '' and title_line:\n        job= line.replace('\\n','').lower().title()\n        #in some cases the first line of the file is not the job title\n        #better to check against filename tha this test\n        if job.upper() != 'CAMPUS INTERVIEWS ONLY':\n            row[col_heads['JOB_CLASS_TITLE']] = job\n            title_line = False\n    if (re.search(class_pattern, line)):\n        if row[col_heads['JOB_CLASS_NO']]  =='':\n            #SENIOR ELECTRIC SERVICE REPRESENTATIVE has wrong code at btm of file\n            row[col_heads['JOB_CLASS_NO']] = re.search(class_pattern, line).group(2)\n    elif \"Open Date:\" in line:\n        row[col_heads['OPEN_DATE']]  = line.split(\"Open Date:\")[1].split(\"(\")[0].strip().replace ('-','\/')\n    elif (line.isupper()and not \"$\" in line):\n        state = ''\n        body =''\n    if state != '':\n        row, body,data_list = process_state (state,body,line,row,job,data_list)\n    elif re.search('DUTIES',line):\n        state = 'duties'\n    elif re.search('REQUIREMENT',line):\n        state = 'requirements'\n    elif re.search('(ANNUAL SALARY)|(ANNUALSALARY)',line):\n        state = 'annualsalary'\n    driver_licence(line)\n    level = examination_type(line,level)\n    return line, title_line, row, state, body,level, job,data_list","4525d457":"def chk_file_valid(filename):\n    #this function could be refactored so that further invalid bulletin are excluded automatically\n    file_valid = True\n    if filename == 'ANIMAL CARE TECHNICIAN SUPERVISOR 4313 122118.txt':\n        #excluded because bulliten text is wrong\n        file_valid = False\n    if filename == 'WASTEWATER COLLECTION SUPERVISOR 4113 121616.txt':\n        #excluded because bulliten text is wrong\n        file_valid = False\n    if filename == 'SENIOR EXAMINER OF QUESTIONED DOCUMENTS 3231 072216 REVISED 072716.txt':\n        #excluded because bulliten text is wrong\n        file_valid = False\n    if filename == 'SENIOR UTILITY SERVICES SPECIALIST 3753 121815 (1).txt':\n        #excluded because a newer bulliten exists\n        file_valid = False\n    if filename == 'CHIEF CLERK POLICE 1219 061215.txt':\n        #excluded because a newer bulliten exists\n        file_valid = False\n       \n    if file_valid == False:\n        print ()\n        print ('invalid', filename)\n        print()\n    return file_valid\n    ","ce128d92":"bulletin_dir = \"..\/input\/cityofla\/CityofLA\/Job Bulletins\"\ndata_list = []\neda_data_list = []\nbody = ''\nstate = ''\njob = ''\nlevel = 0\ncnt = 0\nstart_job_index = 0\nglobal eda_row\n\nfor filename in os.listdir(bulletin_dir):\n #    if cnt >280 and cnt <299:\n        row = [''] * 25\n        eda_row= [''] * 25\n        with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n            row[col_heads['FILE_NAME']] = filename\n            #print (filename)\n            print ('. ',end=\"\")\n            title_line = True\n            file_valid = chk_file_valid(filename)\n            if (file_valid):\n                for index,line in enumerate(f.readlines()):\n                    line = line.rstrip().lstrip()\n                    if (line !='' and line != \"OR\"):\n                        #                    pattern = '(.*?)(; or|; and)(.*)' \n                        pattern = '(.*?)(; or)(.*)' \n                        #sometimes a significant alternative is included within a requirement\n                        if re.search(pattern, line) and(len(re.search(pattern, line).group(3))) > 40:\n                            _, title_line, row, state, body,level,job,data_list = \\\n                                    line_interp (re.search(pattern, line).group(1) + re.search(pattern, line).group(2), title_line, row, state, body,level,job,data_list)\n                            _, title_line, row, state, body,level,job,data_list = \\\n                                    line_interp (re.search(pattern, line).group(3), title_line, row, state, body,level,job,data_list)\n                        else:\n                            line, title_line, row, state, body,level,job,data_list = \\\n                                line_interp (line, title_line, row, state, body,level,job,data_list)             \n                start_job_index = backfill(data_list,start_job_index,row)\n        #    cnt += 1\n\ndf_job_class = pd.DataFrame(data_list)\ndf_job_class.columns = column_heads\ndf_eda_exam = pd.DataFrame(eda_data_list)\ndf_eda_exam.columns = column_heads\n","31349452":"df_eda_exam.describe()","6d2d7b4b":"#types not right yet\n#df_job_class[\"REQUIREMENT_SET_ID\"] = df_job_class[\"REQUIREMENT_SET_ID\"].astype('int16')\n#df_job_class[\"EXPERIENCE_LENGTH\"] = df_job_class[\"EXPERIENCE_LENGTH\"].astype('float')\n\ndf_job_class[\"OPEN_DATE\"] = df_job_class[\"OPEN_DATE\"].astype('datetime64[ns]')\ndf_job_class.head(20)","d0523ff4":"#to print out the full file\npd.options.display.max_colwidth = 200\nwith pd.option_context(\"display.max_rows\", 2000): display (df_job_class)","ac52ef6d":"df_job_class.to_csv(\"competition_output.csv\")\ndf_job_class.describe()","355e70cb":"df_job_class.head()","3c85a1f9":"workingpath = ('..\/working')\n\ndf_job_class.to_csv(workingpath + 'job_class.csv')","2c6fca61":"\ndf_saved_job_class = pd.read_csv(workingpath + 'job_class.csv')\ndf_saved_job_class.head()\ndf_saved_job_class.describe()","8e09a1f9":"df_saved_job_class.head()","4c8b9e76":"with pd.option_context(\"display.max_rows\", 2000): display (df_job_class)","cb8b9fe5":"#to print out the full file\npd.options.display.max_colwidth = 200\nwith pd.option_context(\"display.max_rows\", 2000): display (df_eda_exam)","e1fe4ca2":"df_exam_group = df_eda_exam.groupby('EXAM_TYPE').count()\n\ndf_exam_group.head(20)","fcdc8815":"df_eda_type = df_eda_exam.sort_values('EXAM_TYPE')\ndf_eda_type.describe()","e7fdff7e":"df_eda_job = df_eda_exam.sort_values('JOB_CLASS_NO')\nwith pd.option_context(\"display.max_rows\", 2000): display (df_eda_job)\n","cde78da4":"#Used for cleaning data\n#find duplicates class titles\n#no duplicates now\n\n# df_eda_exam_len = len(df_eda_exam)\n# print (df_eda_exam_len)\n# index = 0\n# while index < df_eda_exam_len:\n#     index2 = 0\n#     #print (index)\n#     var = df_eda_exam.iloc[index]['JOB_CLASS_TITLE']\n#     while index2 < df_eda_exam_len:\n#         if df_eda_exam.iloc[index]['FILE_NAME'] != df_eda_exam.iloc[index2]['FILE_NAME']:\n     \n#             if var == df_eda_exam.iloc[index2]['JOB_CLASS_TITLE']:\n#                 print (df_eda_exam.iloc[index]['FILE_NAME'], df_eda_exam.iloc[index2]['FILE_NAME'])\n#         index2 += 1\n#     index += 1\n\n","0f103848":"# #Used for cleaning data\n# #find duplicates class codes\n\n# df_eda_exam_len = len(df_eda_exam)\n# print (df_eda_exam_len)\n# index = 0\n# while index < df_eda_exam_len:\n#     index2 = 0\n#     #print (index)\n#     var = df_eda_exam.iloc[index]['JOB_CLASS_NO']\n#     while index2 < df_eda_exam_len:\n#         if df_eda_exam.iloc[index]['FILE_NAME'] != df_eda_exam.iloc[index2]['FILE_NAME']:\n     \n#             if var == df_eda_exam.iloc[index2]['JOB_CLASS_NO']:\n#                 print (df_eda_exam.iloc[index]['FILE_NAME'], df_eda_exam.iloc[index2]['FILE_NAME'])\n#         index2 += 1\n#     index += 1\n\n","46887213":"# #find number of open jobs where internal explicit candidates has been identified\n\n# df_job_class_len = len(df_job_class)\n# print (df_job_class_len)\n# index = 0\n# jobs_found = 0\n# jobs_not_found = 0\n# job_no_sub = 0\n# job_chk = 0\n# while index < df_job_class_len:\n#     if df_job_class.iloc[index]['EXP_JOB_CLASS_TITLE'] != '':\n#         job_chk +=1\n#         print (df_job_class.iloc[index]['EXAM_TYPE'])\n#         if re.search('ON AN INTERDEPARTMENTAL PROMOTIONAL AND AN OPEN COMPETITIVE BASIS',df_job_class.iloc[index]['EXAM_TYPE'] ) or re.search('ON AN OPEN COMPETITIVE BASIS',df_job_class.iloc[index]['EXAM_TYPE']) :\n#             print (df_job_class.iloc[index]['FILE_NAME'], df_job_class.iloc[index]['EXAM_TYPE'])\n#             jobs_found += 1\n            \n            \n#             print (\"exp\", df_job_class.iloc[index]['FILE_NAME'],df_job_class.iloc[index]['EXP_JOB_CLASS_TITLE'])\n#         elif re.search('ON AN DEPARTMENTAL PROMOTIONAL BASIS',df_job_class.iloc[index]['EXAM_TYPE']) \\\n#                 or re.search('ON AN INTERDEPARTMENTAL PROMOTIONAL BASIS',df_job_class.iloc[index]['EXAM_TYPE']):\n#             jobs_not_found += 1\n#     else:\n#         job_no_sub += 1\n#     index += 1\n# print ('jobs_found',jobs_found)\n# print ('jobs_not_found',jobs_not_found)\n# print ('jos_no_sub',job_no_sub)\n\n# print ('job_chk',job_chk)\n\n","39257883":"\ndf_eda_exam = df_eda_exam.sort_values('ENTRY_SALARY_GEN')\n\ndf_eda_exam['entry_salary'] = 99\ndf_eda_exam['final_salary'] = 99\ndf_eda_exam['pc_range'] = 99\n\n#with pd.option_context(\"display.max_rows\", 2000): display (df_eda_exam)\n","cbe5b87b":"salary_flat_pattern = '(\\d{4,6})(.*)(flat-rated)'\nsalary_range_pattern = '(\\d{4,6})(.*?)(\\d{4,6})'\n\n#df_salary_eda['entry_salary'] = df_salary_eda['ENTRY_SALARY_GEN']\n\nfor i, row in df_eda_exam.iterrows():\n    salary_range =  ''\n    if row['ENTRY_SALARY_GEN'] != '':\n        salary_range = row['ENTRY_SALARY_GEN']\n    else:\n        salary_range = row['ENTRY_SALARY_DWP']\n    #print ('FILE_NAME', row['FILE_NAME'])\n    #print ('salary_range',salary_range)\n      \n    entry_salary = -1\n    final_salary = -1\n\n    if re.search(salary_flat_pattern,salary_range):\n        #print ('re.search(salary_flat_pattern,salary_range).group(1)',re.search(salary_flat_pattern,salary_range).group(1))\n        entry_salary = int(re.search(salary_flat_pattern,salary_range).group(1))\n        final_salary = 0\n    if re.search(salary_range_pattern,salary_range):\n        #print ('re.search(salary_range_pattern,salary_range).group(1)',re.search(salary_range_pattern,salary_range).group(1))\n        entry_salary = int(re.search(salary_range_pattern,salary_range).group(1))\n        final_salary = int(re.search(salary_range_pattern,salary_range).group(3))\n    #print ('entry_salary',entry_salary)\n    #print ('final_salary',final_salary)\n    if final_salary != 0:\n        pc_range = 100* (final_salary - entry_salary)\/entry_salary\n    else:\n        pc_range = 0\n    df_eda_exam.loc[i,'entry_salary'] = entry_salary\n    df_eda_exam.loc[i,'final_salary'] = final_salary\n    df_eda_exam.loc[i,'pc_range'] = pc_range\n                                  \n","7c928b3b":"df_eda_exam = df_eda_exam.sort_values('entry_salary')\nwith pd.option_context(\"display.max_rows\", 2000): display (df_eda_exam)\n","5acee3bd":"df_eda_exam = df_eda_exam.sort_values('JOB_CLASS_TITLE')\nwith pd.option_context(\"display.max_rows\", 2000): display (df_eda_exam)\n","9a9178c3":"df_explicit = pd.DataFrame()\ndata_list = []\n\ndf_job_class_len = len(df_job_class)\nindex = 0\nwhile index < df_job_class_len:\n    job = df_job_class.iloc[index]['JOB_CLASS_TITLE']\n    reqs = df_job_class.iloc[index]['EXP_JOB_CLASS_TITLE']\n    exp_len = df_job_class.iloc[index]['EXPERIENCE_LENGTH']\n    \n    #print ('job',job)                                \n    for i, word in enumerate(reqs.split(',')): \n        word = word.rstrip(' ').lstrip(' ')\n        #print (word)\n        data_list_len = len(data_list)\n        copy_found  = False\n        j = 0\n        while copy_found == False and j < data_list_len:\n            list_job = data_list[j][0].upper()\n            list_word = data_list[j][1].upper()\n            if list_job == job and list_word == word:\n                #print ('list_job',list_job)\n                copy_found = True\n            j += 1\n        if word != '' and copy_found == False:\n            data_list.append([job.upper(), word,exp_len])\n    index += 1\ndf_explicit = pd.DataFrame(data_list)\ndf_explicit.columns = [\"JOB\", \"REQUIREMENT\", \"EXPERIENCE_LENGTH\"]\ndf_explicit.head()\n","441c87ab":"#with pd.option_context(\"display.max_rows\", 2000): display (df_explicit)##\n","3777c121":"df_explicit_g = df_explicit.groupby('JOB').count()\n\ndf_explicit_s_g = df_explicit_g.sort_values('REQUIREMENT',ascending = False)\ndf_explicit_s_g.head()","431c7cb8":"\nG = nx.Graph()\n\njob = 'WATER UTILITY SUPERINTENDENT'\n#G.add_node(job)\ndf_explicit_len = len(df_explicit)\nindex = 0\nedges={}\n\nwhile index < df_explicit_len:\n    if df_explicit.iloc[index]['JOB'] == job:\n        #print (job, \":   \",df_explicit.iloc[index]['REQUIREMENT'] )\n        G.add_edge(job,df_explicit.iloc[index]['REQUIREMENT'])\n        edges[job,df_explicit.iloc[index]['REQUIREMENT']] = '2yr'\n        \n    index +=1\nplt.figure(figsize=(15, 15)) \nplt.axis('off')\npos = nx.circular_layout(G)\n\nnx.draw_networkx_edge_labels(G,pos,edge_labels=edges\n,font_color='red')\n\nnx.draw_networkx(G, pos,with_labels=True, node_color='red', font_size=12, node_size=20000, arrows = True, width = 2)\nplt.show()\n#print (edges)\n","3580613c":"\ndef findsubsrecurse (job, edges, depth ):\n    G.add_node(job)\n    df_explicit_len = len(df_explicit)\n    index = 0\n    #print ('depth', depth)\n    \n    while index < df_explicit_len:\n        #print ('index',index)\n        \n        if  (df_explicit.iloc[index]['JOB'] == job or\\\n             df_explicit.iloc[index]['JOB'] == job +' I' or\\\n             df_explicit.iloc[index]['JOB'] == job + \" II\" or\\\n             df_explicit.iloc[index]['JOB'] == job + \" III\") and depth<10:\n            #print ('link found')\n            #print ('job,req', job,df_explicit.iloc[index]['REQUIREMENT'] )\n            G.add_edge(df_explicit.iloc[index]['REQUIREMENT'],job)\n            edges[df_explicit.iloc[index]['REQUIREMENT'],job] = \\\n            str(df_explicit.iloc[index]['EXPERIENCE_LENGTH'])+'yr'\n            depth += 1\n            #print ('depth in loop1',depth)\n            edges, depth  = findsubsrecurse (df_explicit.iloc[index]['REQUIREMENT'], edges, depth )\n            \n        index +=1\n    return edges, depth\n\ndef findsubs (job):\n    edges={}\n    job= job.upper()\n    depth = 0\n    edges, depth  = findsubsrecurse (job,edges, depth )\n    plt.figure(figsize=(15, 15)) \n    plt.axis('off')\n    pos = nx.circular_layout(G)\n    nx.draw_networkx_edge_labels(G,pos,edge_labels=edges,font_color='red')\n\n    nx.draw_networkx(G, pos,with_labels=True, node_color='red', \n                     font_size=12, node_size=2000, arrows = True, width = 2)\n    plt.show()\n\n    \n    #print (edges)\n    return","7b8d09ce":"G = nx.DiGraph()\nfindsubs ('SENIOR SYSTEMS ANALYST')","716781c4":"G = nx.DiGraph()\nfindsubs ('WATER UTILITY SUPERINTENDENT')","d2a24a43":"G = nx.DiGraph()\nfindsubs ('CHIEF INSPECTOR')","4ea1631b":"G = nx.DiGraph()\nfindsubs ('ELECTRICAL SERVICES MANAGER')\n","4add4ac6":"G = nx.DiGraph()\nfindsubs ('UTILITY SERVICES MANAGER')","3dbaebec":"G = nx.DiGraph()\n# no subs findsubs ('Applications Programmer') education plus paid experience performing systems or programming tasks in a professional IT environment\n# no subs findsubs ('Accountant') graduation required  not work experience required\n# no subs findsubs ('Accounting Clerk') but paid clerical acconting work is required\n# no subs findsubs ('Assistant Street Lighting Electrician') experience working in the construction, maintenance, and repair of street lighting circuitry\n# findsubs ('Building Mechanical Inspector')  #ASSISTANT INSPECTOR\n#findsubs ('Detention Officer') #PARK RANGER\n# no subs findsubs (' Equipment Mechanic')\n# no subs findsubs (' Field Engineering Aide')\n# no subs findsubs ('Housing Inspector')#ASSISTANT INSPECTOR\n# no subs findsubs ('Housing Investigator')\n# no subs findsubs ('Librarian')\n#findsubs ('Security Officer')  #PARK RANGER\n# no subs findsubs ('Senior Administrative Clerk')\n# no subs findsubs ('Senior Custodian')\nfindsubs ('Senior Equipment Mechanic') #HEAVY DUTY EQUIPMENT MECHANIC Auto Electrician\n#findsubs ('Tree Surgeon') # Tree Surgeon assistant\n\n","697841b7":"\ndef findsuprecurse (experience, edges):\n    G.add_node(experience)\n    df_explicit_len = len(df_explicit)\n    index = 0\n    while index < df_explicit_len:\n        if  (df_explicit.iloc[index]['REQUIREMENT'] == experience or\\\n             df_explicit.iloc[index]['REQUIREMENT'] == experience +' I' or\\\n             df_explicit.iloc[index]['REQUIREMENT'] == experience + \" II\" or\\\n             df_explicit.iloc[index]['REQUIREMENT'] == experience + \" III\"):\n             \n            G.add_edge(experience,df_explicit.iloc[index]['JOB'])\n            edges[experience, df_explicit.iloc[index]['JOB'] ]= \\\n                 str(df_explicit.iloc[index]['EXPERIENCE_LENGTH'])+'yr'\n            findsuprecurse (df_explicit.iloc[index]['JOB'], edges)\n        index +=1\n    return edges\ndef findsup (job):\n    edges={}\n   \n    edges = findsuprecurse (job, edges)\n    plt.figure(figsize=(15, 15)) \n    plt.axis('off')\n    pos = nx.circular_layout(G)\n    nx.draw_networkx_edge_labels(G,pos,edge_labels=edges,font_color='red')\n\n    nx.draw_networkx(G, pos,with_labels=True, node_color='red', \n                     font_size=12, node_size=2000, arrows = True, width = 2)\n    plt.show()\n    #print (edges)\n    return\n","9babfd76":"G = nx.DiGraph()\nfindsup ('SYSTEMS ANALYST')","f617af59":"G = nx.DiGraph()\nfindsup('SECRETARY')","9c930f2e":"G = nx.DiGraph()\nfindsup('PUBLIC RELATIONS SPECIALIST')","559757f8":"G = nx.DiGraph()\nfindsup('WELDER')","94e9b550":"G = nx.DiGraph()\nfindsup('ELECTRICAL CRAFT HELPER')","1346ca48":"### Most of the difficult to full roles are open to everyone not just LA City employees.<a id='difficult'><\/a>\n\n\n\nThe following 17 job classes can be challenging to fill with qualified candidates:\n\n    Accountant\n    Accounting Clerk\n    Applications Programmer\n    Assistant Street Lighting Electrician\n    Building Mechanical Inspector\n    Detention Officer\n    Electrical Mechanic\n    Equipment Mechanic\n    Field Engineering Aide\n    Housing Inspector\n    Housing Investigator\n    Librarian\n    Security Officer\n    Senior Administrative Clerk\n    Senior Custodian\n    Senior Equipment Mechanic\n    Tree Surgeon\n\nIn the future, our Personnel Department expects to find it challenging to fill the following classes:\n\n    IT-related classes (e.g., Applications Programmer)\n    Wastewater classes\n    Inspector classes\n    Journey-level classes\n","30a6eaf4":"# Finding Explicit Links","adc65299":"## Getting the headings from the Sample Template","10d674a2":"# Loading in the Job Classes and adding missing one","a0b2ee58":"# Data Science for Good: City of Los Angeles\n\n\n### Introduction\n\nThis kernal produces  [here](#sdf) a structured data file in the format required by the competition.\n\nI am happy for people who want to focus on the recommendation part of the task to use the file.\n\nI have then used the data to produce some diagrams which explore the [explicit links](#el)  between job classes.\n\n#### Explicit links \n\nThe first set of plots show the [subordinate](#el) positions to a role, ie who could be promoted.\n\nThe second set of plots show the subordinate positions to one of the [difficult](#difficult) to fill roles report by the hosts.\n\nThe third set of plots show what [promotions](#promotional) are available to a role. There are some amazing routes...\n\n","2f8db3c7":"## Data\n\n#### 683 bulletins were provided. Of these 2 were duplicate job classes and only the latest bulletin has been included:\n\nCHIEF CLERK POLICE 1249 083118.txt\n\nSENIOR UTILITY SERVICES SPECIALIST 3573 113018.txt\n\n#### In 3 cases the body text does not match the file name and so these bulletins have also been excluded:\n\nANIMAL CARE TECHNICIAN SUPERVISOR 4313 122118.txt\n\nWASTEWATER COLLECTION SUPERVISOR 4113 121616.txt\n\nSENIOR EXAMINER OF QUESTIONED DOCUMENTS 3231 072216 REVISED 072716.txt\n\n#### In one case a class code is not provided:\n\nVocational Worker DEPARTMENT OF PUBLIC WORKS.txt\n\nThe structured data file therefore contains 678 jobs with 677 class codes.\n\n","67e4a634":"# Cell that produces the structured data file","2615be0e":"# Output for competition\n","e4d0dc56":"## Network diagrams to show explicit links between job classes<a id='el'><\/a>","132ad4f1":"# Structured Data File<a id='sdf'><\/a>","f8124a00":"Now find the total career paths all the way back to an entry job...","4c56f3a5":"# Displaying the Sample Template","870e77ed":"## Saving and reloading the structured data file locally","32ddfe79":"#\u00a0EDA\n\nThe df_eda_exam dataframe has one row for each job class and is useful for analysis\n","370ded1a":"# Functions called by the cell that produces the structured data file","79752cbb":"## Looking for subordinates, ie who could apply","b52f23c1":"## Finding promotion routes<a id='promotional'><\/a>","39a495d4":"## Job classes with the most first level subordinates"}}