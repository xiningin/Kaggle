{"cell_type":{"869204bb":"code","d59d20d4":"code","1764962b":"code","c47eadec":"code","8e892497":"code","7b28b733":"code","93f0b41f":"code","d245a345":"code","834370ea":"code","a08b3059":"code","7aeede16":"code","2fe004da":"code","1a4e5c68":"code","86f9ec1e":"code","f1dc8a75":"code","91d22c81":"code","dc130fc2":"code","49f88bcc":"code","cadd6d61":"code","fa4877c3":"code","156336ff":"code","90a8bb87":"code","28b2a085":"code","fb78ee83":"code","5b500db2":"code","52ec8099":"code","b6c486ee":"code","696049f1":"code","42e03413":"code","412215e1":"code","c3155f70":"code","e0cba5a3":"code","6d62f7fd":"code","9affebd4":"code","242c0963":"code","68e6e7b2":"code","4e3c8069":"markdown","7a1c5554":"markdown","2750bf05":"markdown","07f3b3a1":"markdown","f9b2aab7":"markdown","4660849c":"markdown","773a6701":"markdown","7fa86bad":"markdown","8c99ac24":"markdown"},"source":{"869204bb":"import pandas as pd\nimport pandas.plotting\nfrom pandas.plotting import scatter_matrix\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d59d20d4":"pd.set_option('display.max_row',111)\npd.set_option('display.max_column',111)","1764962b":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","c47eadec":"df_train = train.copy()\ndf_test = test.copy()\n\ndf_train.head()","8e892497":"df_test.head()","7b28b733":"variables_drop = ['PassengerId','Ticket', 'SibSp', 'Parch']\n\ndf_train = df_train.drop(variables_drop, axis=1)\ndf_test = df_test.drop(variables_drop, axis=1)\n\ndf_train.head()","93f0b41f":"X_train= df_train.drop('Survived', axis=1)\ny_train = df_train['Survived']\nX_train.head()","d245a345":"y_train.head()","834370ea":"X_test = df_test\nX_test.head()","a08b3059":"gender_submission\ny_test=gender_submission['Survived']\ny_test.head()","7aeede16":"X_train['Title'] = X_train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)# tout stringaccompagn\u00e9 de point(.)\nX_test['Title'] = X_test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)# tout stringaccompagn\u00e9 de point(.)\nX_train.drop('Name', axis=1, inplace=True)\nX_test.drop('Name', axis=1, inplace=True)\nX_train['Title'].value_counts()","2fe004da":"def extratCabin(df):\n    df['Cabin'] = df['Cabin'].str[:1]\n    return df.head()\n\nextratCabin(X_train)","1a4e5c68":"extratCabin(X_test)","86f9ec1e":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,PolynomialFeatures\nfrom sklearn.compose import make_column_selector as selector\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nimport numpy as np","f1dc8a75":"numerical_features = ['Pclass', 'Age','Fare' ]\ncategorical_features = ['Sex', 'Cabin','Embarked','Title']","91d22c81":"numeric_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='median')),('scaler', StandardScaler())])\n","dc130fc2":"categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent', fill_value='missing')),('onehot', OneHotEncoder(handle_unknown='ignore'))])","49f88bcc":"preprocessor = ColumnTransformer(transformers=[('num', numeric_transformer, numerical_features),('cat', categorical_transformer, categorical_features)])","cadd6d61":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import f1_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import learning_curve","fa4877c3":"model = Pipeline(steps=[('preprocessor', preprocessor),('SGDClassif', SGDClassifier())])\nmodel","156336ff":"model.fit(X_train, y_train)\nmodel.score(X_test, y_test)","90a8bb87":"preprocessorS = ColumnTransformer(transformers=[('num', numeric_transformer, selector(dtype_exclude=\"object\")),\n                                                ('cat', categorical_transformer, selector(dtype_include=\"object\"))])\n\nmodelS = Pipeline(steps=[('preprocessor', preprocessorS),('SGDClassif', SGDClassifier())])\n\n\nmodelS.fit(X_train, y_train)\nprint(\"model score: %.3f\" % modelS.score(X_test, y_test))","28b2a085":"KNN = Pipeline(steps=[('preprocessor', preprocessor),('KNN', KNeighborsClassifier(n_neighbors = 13))])\nTreeDecision =Pipeline(steps=[('preprocessor', preprocessor),('Decision', DecisionTreeClassifier())])\nRandomForest = Pipeline(steps=[('preprocessor', preprocessor),('RandomForest', RandomForestClassifier(n_estimators=13,random_state=0))]) \nSVCmodel = Pipeline(steps=[('preprocessor', preprocessor),('SVC', SVC())])\nSGDClassif =Pipeline(steps=[('preprocessor', preprocessor),('SGDClassif', SGDClassifier())])\n#GaussienBayes = Pipeline(steps=[('preprocessor', preprocessor),('NB', GaussianNB())])","fb78ee83":"dict_of_models = {'RandomForest': RandomForest,\n                  'TreeDecision' : TreeDecision,\n                  'KNN': KNN,\n                  'SGDClassif':SGDClassif,\n                  'SVCmodel':SVCmodel,\n                  #'GaussienBayes':GaussienBayes\n                  \n                 }","5b500db2":"from sklearn.metrics import f1_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import learning_curve","52ec8099":"def evaluation(model):\n    \n    model.fit(X_train, y_train)\n    ypred = model.predict(X_test)\n    \n    print(confusion_matrix(y_test, ypred))\n    print(classification_report(y_test, ypred))\n    print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n    \n    N, train_score, val_score = learning_curve(model, X_train, y_train,\n                                              cv=4, scoring='f1',\n                                               train_sizes=np.linspace(0.1, 1, 10))\n    \n    \n    plt.figure(figsize=(12, 8))\n    plt.plot(N, train_score.mean(axis=1), label='train score')\n    plt.plot(N, val_score.mean(axis=1), label='validation score')\n    plt.legend()\n    \n    ","b6c486ee":"for name, model in dict_of_models.items():\n    print(name)\n    evaluation(model)","696049f1":"KNN","42e03413":"param_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'KNN__n_neighbors': [10, 12, 15,28,48, 100],\n}\n","412215e1":"grid_search = GridSearchCV(KNN, param_grid, cv=10)\ngrid_search.fit(X_train, y_train)\n\nprint((\"best logistic regression from grid search: %.3f\"\n       % grid_search.score(X_test, y_test)))","c3155f70":"print(grid_search.best_params_)","e0cba5a3":"y_pred = grid_search.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","6d62f7fd":"evaluation(grid_search.best_estimator_)","9affebd4":"cm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (8, 8)\nsns.heatmap(cm, annot = True, cmap = 'Greens')\nplt.title('Confusion Matrix for SVC', fontweight = 30, fontsize = 20)\nplt.show()","242c0963":"y_pred","68e6e7b2":"resultat1 = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred\n    })\n\nresultat1.head()","4e3c8069":"-**Encodage** des facteurs (varaibles qualitatives) en numerique (0 ou 1)\n\n-**Normalisation** pour rendre les donn\u00e9es \u00e0 la m\u00eame echelle**\n\n-**Imputation** pour remplacer les donn\u00e9es manquantes NAN par la moyenne ou la mediane pourles variables quantitatives et       par la modalit\u00e9 la plus fr\u00e9quente pour les variables qualitatives\n\n-**Selection** permet d'utiliser les tests inf\u00e9rentielles pour choisir les variables les plus significatives pour                 l'intepretationdu mod\u00e8le\n\n-**Extration** permet de generer de nouvelles variables pour explorer les informations cach\u00e9es dans le dataset","7a1c5554":"#### Extraction sur les variables qualitatives","2750bf05":"## Selector","07f3b3a1":"### ==========================================================\n### Les modules de travail\n### ==========================================================","f9b2aab7":"#### Chaine de transfromation et mod\u00e8le","4660849c":"# PRE-PROCESSING","773a6701":"## Modellisation","7fa86bad":"### Pipeline  de transformation ","8c99ac24":"### ===============================================================\n### importation des  donn\u00e9es \n### ==============================================================="}}