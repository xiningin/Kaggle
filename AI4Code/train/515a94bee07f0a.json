{"cell_type":{"6b83b5ba":"code","79556013":"code","ebea1274":"code","cdc81483":"code","4aa90ea5":"code","e420514a":"code","fa7cfe0e":"code","fce30493":"code","49006877":"code","2d78992f":"code","89494e2f":"code","423c36d8":"code","b9c56597":"code","da78c878":"code","3fa41566":"code","7ce41535":"code","67b3ba05":"code","2d38f307":"code","1d69df63":"code","888c5c84":"code","0b7a5938":"code","a8948f43":"code","33425af6":"code","31c3dae3":"code","e9c320b3":"code","02734ae2":"code","984035c6":"code","90fb7253":"code","690a4b67":"code","abdcc4c8":"code","0bec5850":"code","0b8b1f3a":"code","60437e8e":"code","b3edf680":"code","6bae96e1":"code","fd9eccd6":"code","84c46396":"code","e5e5c7cc":"code","164eb791":"code","32bf2104":"code","514961b7":"code","df64e37b":"code","89e2da8f":"code","b6deefe9":"code","e62baa6a":"markdown","caf918ed":"markdown","8c4cd013":"markdown","b611a9ba":"markdown","204dcc1a":"markdown","7660527a":"markdown","d24ae05a":"markdown","f295f816":"markdown","c5d334fd":"markdown","20f4367d":"markdown","2e701745":"markdown","28acf828":"markdown","4bc35104":"markdown","61191f68":"markdown","30efc51e":"markdown","a95d4ba5":"markdown","7821e51d":"markdown","23e84370":"markdown","1b127d7c":"markdown","d575d8bc":"markdown","1d98420e":"markdown","34fee74b":"markdown","8c1801c7":"markdown"},"source":{"6b83b5ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","79556013":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ebea1274":"# Local\n# df = pd.read_csv('data.csv')\n\n# Kaggle\ndf = pd.read_csv('\/kaggle\/input\/entrepreneurial-competency-in-university-students\/data.csv')\ndf.head()","cdc81483":"df","4aa90ea5":"df.info()","e420514a":"df.isnull().sum()","fa7cfe0e":"df['ReasonsForLack'].unique()","fce30493":"df['ReasonsForLack'] = df['ReasonsForLack'].fillna('No Reason')","49006877":"df.isnull().sum()","2d78992f":"df['ReasonsForLack'] = df['ReasonsForLack'].str.replace('Just not interested! (Want to work in the corporate sector, or for the government or pursue research or something else)',\n                                 'Just not interested, ',regex=False)","89494e2f":"df['ReasonsForLack'].unique()","423c36d8":"df['ReasonsForLack'] = df['ReasonsForLack'].str.replace(',,',\n                                 ',',regex=False)\ndf['ReasonsForLack'] = df['ReasonsForLack'].str.replace('interested, ',\n                                                       'interested')","b9c56597":"df['ReasonsForLack'].unique()","da78c878":"df['ReasonsForLack'].str.split(', ', expand=True)[0].unique()","3fa41566":"df['No Reason'] = df['ReasonsForLack'].str.contains('No Reason')\ndf['Just not interested'] = df['ReasonsForLack'].str.contains('Just not interested')\ndf['waiting for future relocation'] = df['ReasonsForLack'].str.contains('waiting for future relocation')\ndf['Financial Risk'] = df['ReasonsForLack'].str.contains('Not able to take a Financial Risk')\ndf['Academic Pressure'] = df['ReasonsForLack'].str.contains('Academic Pressure')\ndf['Lack of Knowledge'] = df['ReasonsForLack'].str.contains('Lack of Knowledge')\ndf['Unwillingness to take risk'] = df['ReasonsForLack'].str.contains('Unwillingness to take risk')\ndf['Parental Pressure'] = df['ReasonsForLack'].str.contains('Parental Pressure')\ndf['Mental Block'] = df['ReasonsForLack'].str.contains('Mental Block')","7ce41535":"df = df.drop('ReasonsForLack', axis=1)","67b3ba05":"df","2d38f307":"df.info()","1d69df63":"plt.figure(figsize=(20,10))\nplt.title('Count of labels')\nsns.countplot(data=df, x='y');","888c5c84":"X = df.drop('y', axis=1)\ny = df['y']\nX = pd.get_dummies(X, drop_first=True)","0b7a5938":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","a8948f43":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","33425af6":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","31c3dae3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier","e9c320b3":"from warnings import filterwarnings\nfilterwarnings('ignore')","02734ae2":"from sklearn.metrics import classification_report,precision_score, recall_score,f1_score","984035c6":"def fit_and_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_scores = {}\n    model_recall = {}\n    model_f1 = {}\n    model_precision = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        y_preds = model.predict(X_test)\n        print(name)\n        print(classification_report(y_test, y_preds))\n        print('\\n')\n        model_scores[name] = model.score(X_test,y_test)\n        model_recall[name] = recall_score(y_test, y_preds)\n        model_f1[name] = f1_score(y_test, y_preds)\n        model_precision[name] = precision_score(y_test, y_preds)\n\n    model_scores = pd.DataFrame(model_scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score')\n    model_recall = pd.DataFrame(model_recall, index=['Recall']).transpose()\n    model_recall = model_recall.sort_values('Recall')\n    model_f1 = pd.DataFrame(model_f1, index=['F1']).transpose()\n    model_f1 = model_f1.sort_values('F1')\n    model_precision = pd.DataFrame(model_precision, index=['Precision']).transpose()\n    model_precision = model_precision.sort_values('Precision')\n        \n    return model_scores, model_recall, model_f1, model_precision","90fb7253":"models = {'LogisticRegression': LogisticRegression(max_iter=10000),\n          'KNeighborsClassifier': KNeighborsClassifier(),\n          'SVC': SVC(),\n          'DecisionTreeClassifier': DecisionTreeClassifier(),\n          'RandomForestClassifier': RandomForestClassifier(),\n          'AdaBoostClassifier': AdaBoostClassifier(),\n          'GradientBoostingClassifier': GradientBoostingClassifier(),\n          'XGBClassifier': XGBClassifier(objective='binary:logistic',eval_metric=['logloss']),\n          'XGBRFClassifier': XGBRFClassifier(objective='binary:logistic',eval_metric=['logloss']),\n          'LGBMClassifier':LGBMClassifier(),\n         'CatBoostClassifier': CatBoostClassifier(verbose=0)}","690a4b67":"model_scores, model_recall, model_f1, model_precision = fit_and_score(models, X_train, X_test, y_train, y_test)","abdcc4c8":"model_scores","0bec5850":"from sklearn.model_selection import cross_val_score","0b8b1f3a":"def get_baseline_cv_scores(model, X, y, cv=5):\n    \n    model_scores = {}\n    model_recall = {}\n    model_f1 = {}\n    model_precision = {}\n    \n    for name, model in models.items():\n        \n        print(name)\n        cv_accuracy = cross_val_score(model,X,y,cv=cv,\n                             scoring='accuracy')\n        print(f'Cross Validaion accuracy Scores: {cv_accuracy}')\n        print(f'Cross Validation accuracy Mean Score: {cv_accuracy.mean()}')\n\n        cv_precision = cross_val_score(model,X,y,cv=cv,\n                             scoring='precision')\n        print(f'Cross Validaion precision Scores: {cv_precision}')\n        print(f'Cross Validation precision Mean Score: {cv_precision.mean()}')\n\n        cv_recall = cross_val_score(model,X,y,cv=cv,\n                             scoring='recall')\n        print(f'Cross Validaion recall Scores: {cv_recall}')\n        print(f'Cross Validation recall Mean Score: {cv_recall.mean()}')\n\n        cv_f1 = cross_val_score(model,X,y,cv=cv,\n                             scoring='f1')\n        print(f'Cross Validaion f1 Scores: {cv_f1}')\n        print(f'Cross Validation f1 Mean Score: {cv_f1.mean()}') \n        print('\\n')\n\n        model_scores[name] = cv_accuracy.mean()\n        model_recall[name] = cv_precision.mean()\n        model_f1[name] = cv_recall.mean()\n        model_precision[name] = cv_f1.mean()\n    \n    return model_scores, model_recall, model_f1, model_precision","60437e8e":"model_scores, model_recall, model_f1, model_precision = get_baseline_cv_scores(models, X_train, y_train, cv=5)","b3edf680":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve","6bae96e1":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_preds = model.predict(X_test)","fd9eccd6":"print(classification_report(y_test, y_preds))","84c46396":"plot_confusion_matrix(model,X_test,y_test)","e5e5c7cc":"plot_roc_curve(model,X_test,y_test)","164eb791":"model.coef_","32bf2104":"feat_importances = pd.DataFrame(model.coef_[0], index=X.columns)","514961b7":"plt.figure(figsize=(20,10))\nplt.title('Features Importance')\nplt.xticks(rotation=90)\nsns.barplot(data=feat_importances.sort_values(0).T);","df64e37b":"def get_cv_score(model, X, y, cv=5):\n    \n    \n    cv_accuracy = cross_val_score(model,X,y,cv=cv,\n                         scoring='accuracy')\n    print(f'Cross Validaion accuracy Scores: {cv_accuracy}')\n    print(f'Cross Validation accuracy Mean Score: {cv_accuracy.mean()}')\n    \n    cv_precision = cross_val_score(model,X,y,cv=cv,\n                         scoring='precision')\n    print(f'Cross Validaion precision Scores: {cv_precision}')\n    print(f'Cross Validation precision Mean Score: {cv_precision.mean()}')\n    \n    cv_recall = cross_val_score(model,X,y,cv=cv,\n                         scoring='recall')\n    print(f'Cross Validaion recall Scores: {cv_recall}')\n    print(f'Cross Validation recall Mean Score: {cv_recall.mean()}')\n    \n    cv_f1 = cross_val_score(model,X,y,cv=cv,\n                         scoring='f1')\n    print(f'Cross Validaion f1 Scores: {cv_f1}')\n    print(f'Cross Validation f1 Mean Score: {cv_f1.mean()}')   \n    \n    cv_merics = pd.DataFrame({'Accuracy': cv_accuracy.mean(),\n                         'Precision': cv_precision.mean(),\n                         'Recall': cv_recall.mean(),\n                         'f1': cv_recall.mean()},index=[0])\n    \n    return cv_merics","89e2da8f":"cv_merics = get_cv_score(model, X_train, y_train, cv=10)","b6deefe9":"cv_merics","e62baa6a":"Since most of the model perform well, we will use the LogisticRegression for the final model, as it's faster and simpler model","caf918ed":"Going to take the following approach:\n\n1. Problem definition\n2. Data\n3. Evaluation\n4. Features\n5. Modelling\n6. Model Evaluation\n7. Experimentation \/ Improvements","8c4cd013":"# 2. Data\n\n## Context\n\nThe dataset was collected in 2019 by Naman Manchanda and skhiearth. The dataset was collected for research purposes. We worked with the data and published a research paper titled Predicting Entrepreneurial competency in university students using Machine Learning algorithms at IEEE. The research paper can be found here: https:\/\/ieeexplore.ieee.org\/abstract\/document\/9058292\n\n## Content\n\nThe dataset comprises 16 features collected from university students in India. The target variable consists whether the student is likely to become an entrepreneur or not.","b611a9ba":"## Data Exporation","204dcc1a":"## ROC curve","7660527a":"## Reading the dataset","d24ae05a":"we will fill the nan values as no reason","f295f816":"## Confusion Matrix","c5d334fd":"## Classification Report","20f4367d":"## Standard Imports","2e701745":"# 3. Evaluation\n\nAs this is a classification problem, we will use the classification metics for evauluting the model","28acf828":"# 6. Model Evalution","4bc35104":"# 1. Problem Definition\n\nHow we can use various python based Machine Learning Model and the given parameters to predict the Entrepreneurial Competency in University Students?","61191f68":"# Entrepreneurial Competency in University Students Classification","30efc51e":"Labels are balanced and we will use the accuracy and F1 scores for the evaluation","a95d4ba5":"## Baseline Evalution Using Cross-validation","7821e51d":"## Model imports","23e84370":"## Baseline Model Scores","1b127d7c":"# 4. Features\n\n## Inputs \/ Features\n\n    EducationSector - Engineering background or not\n    IndividualProject - If the student builds personal project\n    Age - Age of student\n    Gender - Sex of student\n    City - If the student stays in a city\n    Influenced - If the student is influenced by someone\n    Perseverance - Rating of a student based upon perseverance\n    DesireToTakeInitiative - Rating of a student based upon desire to take initiative - Competitiveness\n    Competitive rating - SelfRelianceSelf reliance rating\n    SelfReliance - Self reliance rating\n    StrongNeedToAchieve - Strong need to achieve a goal rating\n    SelfConfidence - Self confidence rating\n    GoodPhysicalHealth - Good physical health rating\n    MentalDisorder - If there is any mental disorder\n    KeyTraits - Key traits of the student\n    ReasonsForLack - Reason for lack of entrepreneurship culture\n\n## Output \/ Label\n    y - Whether the student seems to become a entrepreneur or not","d575d8bc":"## Features importance","1d98420e":"Model is performing really well!\n\nwith the 10 CV scores:\n\n    Accuracy: 100%\n    Precision: 100%\n    Recall: 100%\n    F1: 100%","34fee74b":"# 5. Modelling","8c1801c7":"## Evalution using Cross-Validation"}}