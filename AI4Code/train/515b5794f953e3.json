{"cell_type":{"ab8e589a":"code","00ccebb1":"code","fcd419c0":"code","042ed278":"code","4a7a5068":"code","4d292a98":"code","f03fa62c":"code","0fdfa460":"code","1bef5507":"code","66dafc5d":"code","bbc0230b":"code","36df1284":"code","4eca04a7":"code","6673925c":"code","ec56a9cf":"code","5be29a3a":"code","65aa152f":"code","a22f723f":"code","acce1a63":"code","a6d9e10c":"code","d65aa02c":"code","6f4b01cb":"code","07ff972c":"markdown","ee039e4f":"markdown","b9942a50":"markdown"},"source":{"ab8e589a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# \n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00ccebb1":"sample_solution_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\ntrain_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")","fcd419c0":"sample_solution_df","042ed278":"train_df.head()","4a7a5068":"test_df.head()","4d292a98":"#shape Check\nprint(\"train\/test:{}\/{}\".format(train_df.shape,test_df.shape))","f03fa62c":"train_df.dtypes.unique()\ntest_df.dtypes.unique()","0fdfa460":"#train, test\u3068\u3082\u306b\ntrain_col_l = set(train_df.columns)\ntest_col_l = set(test_df.columns)\ncol_diff = train_col_l ^ test_col_l\ncol_diff","1bef5507":"# train_df.isnull\ntrain_df.isnull().sum().sort_values(ascending=False).plot.bar()","66dafc5d":"test_df.isnull().sum().sort_values(ascending=False).plot.bar()","bbc0230b":"# train_X = train_df[~train_df[\"claim\"]]\ntrain_X = train_df.drop(\"claim\", axis=1).reset_index(drop=True)\ntrain_y = train_df[\"claim\"].reset_index(drop=True)\ntest_X = test_df.reset_index(drop=True)\ntrain_y","36df1284":"train_df[\"claim\"]","4eca04a7":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score","6673925c":"folds=3\nkf = KFold(n_splits=folds)\n\nlgb_params = {\"objective\":\"binary\",\"random_seed\":1234}\n#adjust the hyper parameters\n# lgb_params = {\"objective\":\"binary\", \"max_bin\":331, \"num_leaves\":20, \"min_data_in_leaf\":57, \"random_seed\":1234}","ec56a9cf":"train_y.unique()","5be29a3a":"models=[]\nfor train_index, valid_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    y_train = train_y.iloc[train_index]\n    X_valid = train_X.iloc[valid_index]\n    y_valid = train_y.iloc[valid_index]\n#     print(len(X_train.columns),len(y_train.columns),len(X_valid.columns),len(y_valid.columns))\n    \n    lgb_train= lgb.Dataset(X_train, y_train)\n    lgb_valid = lgb.Dataset(X_valid, y_valid, reference=lgb_train)\n    \n    model_lgb = lgb.train(lgb_params, lgb_train, valid_sets=lgb_valid, num_boost_round=100, early_stopping_rounds=20, verbose_eval=10)\n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    print(accuracy_score(np.round(y_pred), y_valid))\n    \n    models.append(model_lgb)","65aa152f":"for model in models:\n    lgb.plot_importance(model, importance_type=\"gain\", max_num_features=15)","a22f723f":"preds=[]\nfor model in models:\n    pred = model_lgb.predict(test_X)\n    preds.append(pred)","acce1a63":"preds_array = np.array(preds)\npreds_mean = np.mean(preds_array, axis=0)","a6d9e10c":"preds_int = (preds_mean > 0.5).astype(int)","d65aa02c":"solution_df = sample_solution_df.copy()\nsolution_df[\"claim\"]= preds_int","6f4b01cb":"# os.mkdir(\"..\/submit\")\n# solution_df.to_csv(\".\/TabularPlayGroundSeries_Sep2021_rev00.csv\", index=False)","07ff972c":"# 1. Data Import","ee039e4f":"# 3.Check Base line as Light GBM","b9942a50":"# 2. Check NAN in the data frame"}}