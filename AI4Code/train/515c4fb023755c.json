{"cell_type":{"19843573":"code","b0c96dc6":"code","935f1827":"code","6a6272c7":"code","91267eba":"code","79f7fea3":"code","6bdb2339":"code","a2d83416":"code","60d59577":"code","e613a07f":"code","96c21658":"code","47167a55":"code","2edae753":"code","aa9047bc":"code","a95e10d5":"code","8daf1046":"code","a84449e9":"code","6a46f60f":"code","3bd4fb67":"markdown","e5fe4d63":"markdown","b6dcbe44":"markdown","67a085d0":"markdown","57ab9fd4":"markdown","79cb7c15":"markdown","12fb9e58":"markdown","34480d07":"markdown","cd74fbbf":"markdown","9dd562d8":"markdown","9f75321b":"markdown","8ee92d2a":"markdown","4dea5cc2":"markdown","56c9f464":"markdown"},"source":{"19843573":"%%capture\n!git clone https:\/\/github.com\/ultralytics\/yolov5 \/kaggle\/yolov5\/\n!pip install -qr \/kaggle\/yolov5\/requirements.txt\n!pip install scipy==1.5.2","b0c96dc6":"import os\nimport numpy as np\nfrom pathlib import Path\nfrom xml.dom.minidom import parse\nfrom shutil import copyfile\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nfrom IPython.display import Video\nimport io\nimport base64\nfrom IPython.display import HTML\nimport cv2","935f1827":"!mkdir -p \/kaggle\/datasets\/labels\n!mkdir -p \/kaggle\/masks\/datasets\/images\n\n!mkdir -p \/kaggle\/datasets\/labels\/train\n!mkdir -p \/kaggle\/datasets\/labels\/validation\n!mkdir -p \/kaggle\/datasets\/labels\/test\n!mkdir -p \/kaggle\/datasets\/images\/train\n!mkdir -p \/kaggle\/datasets\/images\/validation\n!mkdir -p \/kaggle\/datasets\/images\/test","6a6272c7":"classes = [\"with_mask\",\"without_mask\", \"mask_weared_incorrect\"]","91267eba":"def generate_txt_from_xml(file_path, file_name, save_to_path):\n    img_path = file_path + file_name\n    \n    #start parsing xml file\n    dom = parse(img_path)\n    root = dom.documentElement\n    \n    #get image name\n    image_name = root.getElementsByTagName(\"filename\")[0].childNodes[0].data[:-4]\n    \n    #get size of image\n    img_size_node = root.getElementsByTagName(\"size\")[0]\n    img_size_width = int(img_size_node.getElementsByTagName(\"width\")[0].childNodes[0].data)\n    img_size_height = int(img_size_node.getElementsByTagName(\"height\")[0].childNodes[0].data)\n    \n    #get root node of objects\n    objects = root.getElementsByTagName(\"object\")\n    \n    \n    #generate file\n    filename = save_to_path+image_name+\".txt\"\n    file_path = open(filename, \"a+\")\n    \n    #for all objetc get box identifiers and classname\n    for box in objects:\n        #get classname\n        class_name = classes.index(box.getElementsByTagName(\"name\")[0].childNodes[0].data)\n        \n        #get values from xml file for box\n        xmin = int(box.getElementsByTagName(\"xmin\")[0].childNodes[0].data)\n        ymin = int(box.getElementsByTagName(\"ymin\")[0].childNodes[0].data)\n        xmax = int(box.getElementsByTagName(\"xmax\")[0].childNodes[0].data)\n        ymax = int(box.getElementsByTagName(\"ymax\")[0].childNodes[0].data)\n        \n        #get width and height of box\n        width = (xmax - xmin)\/img_size_width\n        height = (ymax - ymin)\/img_size_height\n        \n        #get center coordinates of box\n        x_center = (xmax + xmin)\/(2*img_size_width)\n        y_center = (ymax + ymin)\/(2*img_size_height)\n        \n        #round values\n        width = round(width,6) \n        height = round(height,6)\n        x_center = round(x_center,6) \n        y_center = round(y_center,6) \n        \n        #generate single line for txt file\n        output_string = f\"{class_name} {x_center} {y_center} {width} {height}\\n\"\n        \n        #write to file\n        file_path.write(output_string)\n\n             \n    #flush and close file\n    file_path.flush()\n    file_path.close()","79f7fea3":"path = \"\/kaggle\/input\/face-mask-detection\/annotations\/\"\nsave_to_path = \"\/kaggle\/datasets\/labels\/\"\n\nfor filename in os.listdir(path):\n    generate_txt_from_xml(path, filename, save_to_path)","6bdb2339":"images_folder_path = \"\/kaggle\/input\/face-mask-detection\/images\/\"\nlabels_folder_path = \"\/kaggle\/datasets\/labels\/\"\n\n#generate splitting\nimage_list = os.listdir(images_folder_path)\ntrain_list, test_list = train_test_split(image_list, test_size=0.2, random_state=7)\nval_list, test_list = train_test_split(test_list, test_size=0.5, random_state=8)\n\n#copy files in correct folders\nfor filename in image_list:\n    name = filename[:-3]+\"txt\"\n    if filename in train_list:\n        copyfile(labels_folder_path+name, \"\/kaggle\/datasets\/labels\/train\/\"+name)\n        copyfile(images_folder_path+filename, \"\/kaggle\/datasets\/images\/train\/\"+filename)\n    if filename in val_list:\n        copyfile(labels_folder_path+name, \"\/kaggle\/datasets\/labels\/validation\/\"+name)\n        copyfile(images_folder_path+filename, \"\/kaggle\/datasets\/images\/validation\/\"+filename)\n    if filename in test_list:\n        copyfile(labels_folder_path+name, \"\/kaggle\/datasets\/labels\/test\/\"+name)\n        copyfile(images_folder_path+filename, \"\/kaggle\/datasets\/images\/test\/\"+filename)","a2d83416":"filename = \"\/kaggle\/yolov5\/data\/masks.yaml\"\nfile_path = open(filename, \"a+\")\n    \nfile_path.write(\"path: ..\/datasets\/\\n\")\nfile_path.write(\"train: images\/train\\n\")\nfile_path.write(\"val: images\/validation\\n\")\nfile_path.write(\"test: images\/test\\n\")\nfile_path.write(\"nc: 3\\n\")\nfile_path.write(\"names: ['with_mask','without_mask', 'mask_weared_incorrect']\\n\")\n\n#flush and close file\nfile_path.flush()\nfile_path.close()","60d59577":"#%%capture\n!python \/kaggle\/yolov5\/train.py --img 640 --batch 8 --epochs 40 --data masks.yaml --weights yolov5l.pt","e613a07f":"!cp \/kaggle\/yolov5\/runs\/train\/exp\/weights\/best.pt \/kaggle\/working\/","96c21658":"!python \/kaggle\/yolov5\/detect.py --source \"\/kaggle\/input\/face-mask-detection\/images\/maksssksksss459.png\" --img-size 320 --conf 0.4 --weights \/kaggle\/yolov5\/runs\/train\/exp\/weights\/best.pt","47167a55":"img = plt.imread(\"\/kaggle\/yolov5\/runs\/detect\/exp\/maksssksksss459.png\") \nplt.imshow(img)    \nplt.show","2edae753":"!python \/kaggle\/yolov5\/detect.py --source \"\/kaggle\/input\/face-mask-detection\/images\/maksssksksss121.png\" --img-size 320 --conf 0.4 --weights \/kaggle\/yolov5\/runs\/train\/exp\/weights\/best.pt","aa9047bc":"img = plt.imread(\"\/kaggle\/yolov5\/runs\/detect\/exp2\/maksssksksss121.png\") \nplt.imshow(img)    \nplt.show","a95e10d5":"Image('\/kaggle\/yolov5\/runs\/train\/exp\/val_batch0_pred.jpg')","8daf1046":"%%capture\n!python \/kaggle\/yolov5\/detect.py --source \"\/kaggle\/input\/facemask-videos-for-testing\/vid1.mp4\" --img-size 320 --conf 0.4 --weights \/kaggle\/yolov5\/runs\/train\/exp\/weights\/best.pt\n!python \/kaggle\/yolov5\/detect.py --source \"\/kaggle\/input\/facemask-videos-for-testing\/vid2.mp4\" --img-size 320 --conf 0.4 --weights \/kaggle\/yolov5\/runs\/train\/exp\/weights\/best.pt\n\n!cp \/kaggle\/yolov5\/runs\/detect\/exp3\/vid1.mp4 \/kaggle\/working\/\n!cp \/kaggle\/yolov5\/runs\/detect\/exp4\/vid2.mp4 \/kaggle\/working\/","a84449e9":"vidcap1 = cv2.VideoCapture('\/kaggle\/yolov5\/runs\/detect\/exp3\/vid1.mp4')\nsuccess1,image1 = vidcap1.read()\ncv2.imwrite(\"\/kaggle\/working\/frame1.jpg\", image1)\nImage(\"\/kaggle\/working\/frame1.jpg\")","6a46f60f":"vidcap2 = cv2.VideoCapture('\/kaggle\/yolov5\/runs\/detect\/exp4\/vid2.mp4')\nsuccess2,image2 = vidcap2.read()\ncv2.imwrite(\"\/kaggle\/working\/frame2.jpg\", image2)\nImage(\"\/kaggle\/working\/frame2.jpg\")","3bd4fb67":"generate configuration file for the yolov5 model","e5fe4d63":"generate txt files for each image","b6dcbe44":"split dataset into train, test, validation set and copy images to correct folders","67a085d0":"# generate yaml file","57ab9fd4":"# splitting datasets","79cb7c15":"# Training","12fb9e58":"# definde function to change annotation format","34480d07":"# imports","cd74fbbf":"train yolov5l model with pretrained weights and masks.yaml configuration file","9dd562d8":"extract bounding boxes from xml file and write it into a txt file with correct format","9f75321b":"copy to output folder","8ee92d2a":"clone yolov5 repository and install required packages","4dea5cc2":"# Testing","56c9f464":"# generate folders"}}