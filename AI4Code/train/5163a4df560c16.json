{"cell_type":{"ee625648":"code","f9be9083":"code","3f387a6f":"code","201209f8":"code","ebb6c50d":"code","0f8a7d22":"code","6e89e870":"code","affaca91":"code","5487adbc":"code","730c446d":"code","61642a28":"code","a9d7834d":"code","5f64bd60":"code","7a5c8e80":"code","a4c1367c":"code","69bd3952":"code","dab39114":"code","28f86fee":"code","4be70b87":"code","24e05fd6":"code","4974ab88":"code","759d0815":"code","d72e335e":"code","89aac626":"code","1f7bc739":"code","a0b0c1a6":"code","0a2b61bd":"code","34ac9557":"code","69d18a37":"code","bb174b08":"code","a7819d43":"code","5782835e":"code","6c25784a":"code","3c261bdb":"code","c6cceedb":"code","36ab5c85":"code","3a0ce135":"code","3d5b746d":"code","e38dfbbd":"code","afead1c4":"code","40b0f7ab":"code","0ced6d90":"code","4d839b41":"code","0ec25edd":"code","3784c7b9":"code","a4815f24":"code","45dc0814":"code","d1bd8aea":"code","42fe2d72":"code","dfeaa8fe":"code","5fb18a77":"code","1a73c11f":"code","a2e62bca":"code","31195b3b":"code","85d41990":"code","59e6bb70":"code","69e3d33f":"code","0d59aad8":"code","27811e63":"code","feec9f3d":"code","2af13da4":"code","774dcb7f":"code","1bedfa69":"code","35e749a1":"code","a20d0fd1":"code","28ceed99":"code","9b954dcf":"code","46f95e8c":"code","a569c6a4":"code","a915ed95":"code","8543209d":"code","f3bfa6f3":"code","7951ee37":"code","5e2a04f9":"code","4a174a83":"code","2ce66b41":"code","f6e7aaea":"code","50749943":"code","d0c01049":"code","7216d97a":"code","a8b07273":"code","732bd36c":"code","ff9eca5b":"code","058f7aa5":"code","1377da2f":"code","d4b0a931":"code","e3c6ff1d":"code","804de36c":"code","e9f78469":"code","881c0c93":"code","0a62d99a":"code","24b90923":"code","8b14486c":"code","c94aeac0":"code","5ecf4b36":"code","d6d128b6":"code","f3973a5e":"code","fc02ee0f":"code","5f09dcd9":"code","12ef0e46":"code","38e10a42":"code","99572579":"code","53b4498d":"code","0e36ef77":"markdown","fcafaa45":"markdown","9ae2bef4":"markdown","31b777ea":"markdown","d0ba0e8d":"markdown","af42e76c":"markdown","a5277787":"markdown","384deea6":"markdown","92a8f838":"markdown","af70631b":"markdown","1f7b7f48":"markdown","ea611497":"markdown","cc88c009":"markdown","f7bb772b":"markdown","f77cf836":"markdown","fc10e136":"markdown","aedcb9bf":"markdown","48474f6d":"markdown","12b127f0":"markdown","c9385595":"markdown","ce54532d":"markdown","641759c3":"markdown","454ee7e1":"markdown","f63b6f95":"markdown","10a7e17d":"markdown","f7e34b5e":"markdown"},"source":{"ee625648":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)","f9be9083":"df = pd.read_csv(\"..\/input\/glassdoor-data\/glassdoor_jobs.csv\")","3f387a6f":"df.shape","201209f8":"df.columns","ebb6c50d":"df.dtypes","0f8a7d22":"df.head()","6e89e870":"df.info()","affaca91":"df.describe().T","5487adbc":"# Removing unwanted column\nprint('Shape before removing: {}'.format(df.shape))\ndf.drop(labels=['Unnamed: 0'], axis='columns', inplace=True)\nprint('Shape after removing: {}'.format(df.shape))","730c446d":"# Importing visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","61642a28":"# Visualising Rating column\nplt.figure(figsize=(6,6))\ng = sns.distplot(a=df['Rating'])\np = plt.title('Before handling -1 value')","a9d7834d":"# Handling -1 values in Rating column\ndf['Rating'] = df['Rating'].apply(lambda x: np.NaN if x==-1 else x)\ndf['Rating'] = df['Rating'].fillna(df['Rating'].mean())\n\nplt.figure(figsize=(6,6))\ng = sns.distplot(a=df['Rating'])\np = plt.title('After handling -1 value')","5f64bd60":"# Outliers in Rating\nplt.figure(figsize=(5,5))\nsns.boxplot(y='Rating', data=df, orient='v', palette='Set1')\np = plt.title('Boxplot for Rating')\np = plt.ylabel('Rating')","7a5c8e80":"# Visualising Founded column\nplt.figure(figsize=(6,6))\ng = sns.distplot(a=df['Founded'])\np = plt.title('Before handling -1 value')","a4c1367c":"# Handling -1 values in Founded column\ndf['Founded'] = df['Founded'].apply(lambda x: np.NaN if x==-1 else x)\ndf['Founded'] = df['Founded'].fillna(int(df['Founded'].median()))\ndf['Founded'] = df['Founded'].astype('int')\n\nplt.figure(figsize=(6,6))\ng = sns.distplot(a=df['Founded'])\np = plt.title('After handling -1 value')","69bd3952":"# Outliers in Founded\nplt.figure(figsize=(5,5))\nsns.boxplot(y='Founded', data=df, orient='v', palette='Set1')\np = plt.title('Boxplot for Founded')\np = plt.ylabel('Founded year')","dab39114":"# Cleaning Job Title column\ndf['Job Title'].value_counts().nlargest(20)","28f86fee":"def title_cleaner(title):\n    if 'data scientist' in title.lower() or 'scientist' in title.lower():\n        return 'data scientist'\n    elif 'data engineer' in title.lower():\n        return 'data engineer'\n    elif 'data analyst' in title.lower():\n        return 'data analyst'\n    elif 'machine learning' in title.lower():\n        return 'mle'\n    elif 'manager' in title.lower():\n        return 'manager'\n    elif 'director' in title.lower():\n        return 'director'\n    else:\n        return 'other'\n\ndf['job_title'] = df['Job Title'].apply(title_cleaner)\ndf['job_title'].value_counts()","4be70b87":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='job_title', data=df, order = df['job_title'].value_counts().index)\np = plt.title('Count plot for Job Title')\np = plt.xlabel('Job Title')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","24e05fd6":"def title_seniority(title):\n    if 'sr.' in title.lower() or 'senior' in title.lower() or 'lead' in title.lower() or 'principal' in title.lower():\n            return 'sr'\n    elif 'junior' in title.lower() or 'jr.' in title.lower():\n        return 'jr'\n    else:\n        return 'other'\n\ndf['job_seniority'] = df['Job Title'].apply(title_seniority)\ndf['job_seniority'].value_counts()","4974ab88":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='job_seniority', data=df, order = df['job_seniority'].value_counts().index)\np = plt.title('Count plot for Job Seniority')\np = plt.xlabel('Job Seniority')\np = plt.ylabel('Count')","759d0815":"# Removing Job Title column\ndf.drop(labels=['Job Title'], axis=1, inplace=True)","d72e335e":"# Cleaning Salary Estimate column\nsalary = df['Salary Estimate'].apply(lambda x: x.split(\"(\")[0])\nsalary","89aac626":"salary.value_counts()","1f7bc739":"salary = salary.apply(lambda x: np.NaN if x=='-1' else x)\nsalary","a0b0c1a6":"# Removing '$' and 'K' from 'Salary Estimate' column\nsalary = salary.apply(lambda x: x if type(x)== type(3.5) else x.replace('$','').replace('K',''))\nsalary","0a2b61bd":"# Finding any inconsistencies in the salary\nprint(\"Length of Salary: \",len(salary.unique()))\nsalary.unique()[380:]","34ac9557":"# Removing the string employer provided salary from salary array\nsalary = salary.apply(lambda x: x if type(x)==type(3.5) else x.lower().replace(\"employer provided salary:\", \"\"))\nsalary.unique()[380:]","69d18a37":"# Converting per hour salaries to per year salaries\ndef hourly_to_yearly(minlimit, maxlimit):\n  x = minlimit.strip()\n  y = maxlimit.strip()\n  x = int(int(minlimit)*45*52\/1000)\n  y = int(int(maxlimit)*45*52\/1000)\n  return '{}-{}'.format(x,y)\n\nsalary = salary.apply(lambda x: x if type(x)==type(3.5) else (hourly_to_yearly(x.lower().replace(\"per hour\", \"\").split('-')[0], x.lower().replace(\"per hour\", \"\").split('-')[1]) if \"per hour\" in x.lower() else x))\nsalary.unique()[380:]","bb174b08":"# Creating column for salary i.e. average of the range\ndf['Salary'] = salary.apply(lambda x:  x if type(x)==type(3.5) else (int(x.split(\"-\")[0]) + int(x.split(\"-\")[1].strip()))\/2)\n\nplt.figure(figsize=(6,6))\ng = sns.distplot(a=df['Salary'])\np = plt.title('Before handling NaN values')","a7819d43":"# Handling NaN values in Salary column\ndf['Salary'] = df['Salary'].fillna(df['Salary'].median())\n\nplt.figure(figsize=(6,6))\ng = sns.distplot(a=df['Salary'])\np = plt.title('After handling NaN value')","5782835e":"# Outliers in Salary\nplt.figure(figsize=(5,5))\ng = sns.boxplot(y='Salary', data=df, orient='v', palette='Set1')\np = plt.title('Boxplot for Salary')\np = plt.ylabel('Salary')","6c25784a":"# Cleaning Company Name column\ndf[\"Company Name\"] = df['Company Name'].apply(lambda x: x.split(\"\\n\")[0])","3c261bdb":"plt.figure(figsize=(8,8))\ng = df[\"Company Name\"].value_counts().nlargest(15).plot(kind='barh')\np = plt.title('Top 15 Company Names')\np = plt.xlabel('Count')","c6cceedb":"# Creating a column 'job_state'\ndf['job_location'] = df['Location'].apply(lambda x: x if ',' not in x else x.split(',')[1].strip())\nprint('Total number of unique locations: {}'.format(len(df['job_location'].unique())))","36ab5c85":"plt.figure(figsize=(8,8))\ng = df[\"job_location\"].value_counts().nlargest(15).plot(kind='barh')\np = plt.title('Top 15 Job Locations')\np = plt.xlabel('Count')","3a0ce135":"df['Size'].value_counts()","3d5b746d":"# Cleaning 'Size' column\ndef size_simplifier(text):\n  if '-1' in text.lower():\n    return 'Unknown'\n  else:\n    return text\n\ndf['Size'] = df['Size'].apply(size_simplifier)","e38dfbbd":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Size', data=df, order = df['Size'].value_counts().index)\np = plt.title('Count plot for Company Size')\np = plt.xlabel('Company Size')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","afead1c4":"# Cleaning 'Type of Ownership' column\ndf['Type of ownership'].value_counts()","40b0f7ab":"def ownership_simplifier(text):\n    if 'private' in text.lower():\n      return 'Private'\n    elif 'public' in text.lower():\n      return 'Public'\n    elif ('-1' in text.lower()) or ('unknown' in text.lower()) or ('school \/ school district' in text.lower()) or ('private practice \/ firm' in text.lower()) or ('contract' in text.lower()) :\n      return 'Other Organization'\n    else:\n      return text\n\ndf['Type of ownership'] = df['Type of ownership'].apply(ownership_simplifier)","0ced6d90":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Type of ownership', data=df, order = df['Type of ownership'].value_counts().index)\np = plt.title('Count plot for Type of ownership')\np = plt.xlabel('Type of ownership')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","4d839b41":"# Cleaning 'Industry' column\ndf['Industry'].value_counts()","0ec25edd":"df['Industry'] = df['Industry'].apply(lambda x: 'Others' if x=='-1' else x)","3784c7b9":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Industry', data=df, order = df['Industry'].value_counts()[:20].index)\np = plt.title('Count plot for Industry (Top 20)')\np = plt.xlabel('Industry')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","a4815f24":"# Cleaning 'Sector' column\ndf['Sector'].value_counts()","45dc0814":"df['Sector'] = df['Sector'].apply(lambda x: 'Others' if x=='-1' else x)","d1bd8aea":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Sector', data=df, order = df['Sector'].value_counts()[:20].index)\np = plt.title('Count plot for Sector (Top 20)')\np = plt.xlabel('Sector')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","42fe2d72":"# Cleaning 'Revenue' column\ndf['Revenue'].value_counts()","dfeaa8fe":"def revenue_simplifier(text):\n  if '-1' in text.lower():\n    return 'Unknown \/ Non-Applicable'\n  else:\n    return text\n\ndf['Revenue'] = df['Revenue'].apply(revenue_simplifier)","5fb18a77":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Revenue', data=df, order = df['Revenue'].value_counts().index)\np = plt.title('Count plot for Revenue')\np = plt.xlabel('Revenue')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","1a73c11f":"# Cleaning 'Competitors' column\ndf['Competitors']","a2e62bca":"df['Competitors'] = df['Competitors'].apply(lambda x: len(x.split(',')) if x != '-1' else 0)","31195b3b":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Competitors', data=df, order = df['Competitors'].value_counts().index)\np = plt.title('Count plot for Competitors')\np = plt.xlabel(\"Competitor's count\")\np = plt.ylabel('Count')","85d41990":"# Dataset till now\ndf.tail()","59e6bb70":"# Finding and plotting the correlation between numerical features\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nplt.figure(figsize=(8,8))\ncorr = df[['Rating','Founded','Salary']].corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\ng = sns.heatmap(corr, mask=mask, vmax=0.3, center=0, cmap=cmap, square=True, annot=True, linewidths=0.05, cbar_kws={\"shrink\": .5})\np = plt.title('Correlation matrix for Rating, Founded, and Salary columns')","69e3d33f":"# Creating column of 'job_in_headquarters'\ndf['job_in_headquarters'] = df.apply(lambda x: 1 if x['Location'] == x['Headquarters'] else 0, axis=1)","0d59aad8":"plt.figure(figsize=(5,5))\ng = sns.countplot(x='job_in_headquarters', data=df)\np = plt.title('Count plot for Job_in_headquarters')\np = plt.xlabel(\"Is Job_in_headquarters?\")\np = plt.ylabel('Count')","27811e63":"df.drop(labels=['Location'], axis=1, inplace=True)","feec9f3d":"# Creating columns of 'python, excel, sql, tableau' jobs\ndf['python_job'] = df['Job Description'].apply(lambda x: 1 if 'python' in x.lower() else 0)\ndf['excel_job'] = df['Job Description'].apply(lambda x: 1 if 'excel' in x.lower() else 0)\ndf['sql_job'] = df['Job Description'].apply(lambda x: 1 if 'sql' in x.lower() else 0)\ndf['tableau_job'] = df['Job Description'].apply(lambda x: 1 if 'tableau' in x.lower() else 0)","2af13da4":"plt.figure(figsize=(5,5))\ng = sns.countplot(x='python_job', data=df)\np = plt.title('Count plot for Python jobs')\np = plt.xlabel(\"Is Python job?\")\np = plt.ylabel('Count')","774dcb7f":"plt.figure(figsize=(5,5))\ng = sns.countplot(x='excel_job', data=df)\np = plt.title('Count plot for Excel jobs')\np = plt.xlabel(\"Is Excel job?\")\np = plt.ylabel('Count')","1bedfa69":"plt.figure(figsize=(5,5))\ng = sns.countplot(x='sql_job', data=df)\np = plt.title('Count plot for SQL jobs')\np = plt.xlabel(\"Is SQL job?\")\np = plt.ylabel('Count')","35e749a1":"plt.figure(figsize=(5,5))\ng = sns.countplot(x='tableau_job', data=df)\np = plt.title('Count plot for Tableau jobs')\np = plt.xlabel(\"Is Tableau job?\")\np = plt.ylabel('Count')","a20d0fd1":"df.drop(labels=['Job Description'], axis=1, inplace=True)","28ceed99":"# Trimming the 'Sector' column\n\n# Taking top 9 Sector and replacing remaining by 'Others'\nsector_list = list(df['Sector'].value_counts()[:10].index)\n\ndef sector_simplifier(text):\n  if text not in sector_list:\n    return 'Others'\n  else:\n    return text\n\ndf['Sector'] = df['Sector'].apply(sector_simplifier)","9b954dcf":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='Sector', data=df, order = df['Sector'].value_counts().index)\np = plt.title('Final countplot for Sector')\np = plt.xlabel('Sector')\np = plt.ylabel('Count')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","46f95e8c":"# Trimming the 'job_location' column\n\n# Taking top 9 States and replacing others by 'Others'\njob_location_list = list(df['job_location'].value_counts()[:9].index)\n\ndef job_location_simplifier(text):\n  if text not in job_location_list:\n    return 'Others'\n  else:\n    return text\n\ndf['job_location'] = df['job_location'].apply(job_location_simplifier)","a569c6a4":"plt.figure(figsize=(8,8))\ng = sns.countplot(x='job_location', data=df, order = df['job_location'].value_counts().index)\np = plt.title('Final countplot for Job Location')\np = plt.xlabel('Job Location')\np = plt.ylabel('Count')","a915ed95":"df.drop(labels=['Salary Estimate', 'Company Name', 'Headquarters', 'Industry', 'job_location'], axis=1, inplace=True)","8543209d":"df.columns","f3bfa6f3":"# Renaming columns\ndf.rename(columns={'Rating':'company_rating', 'Size':'company_size', 'Founded':'company_founded', 'Type of ownership':'type_of_ownership',\n                   'Sector':'sector', 'Revenue':'revenue', 'Competitors':'competitors', 'Salary': 'salary'}, inplace=True)","7951ee37":"# Mapping ranks to 'company_size' column\nsize_map = {'Unknown': 0, '1 to 50 employees': 1, '51 to 200 employees': 2, '201 to 500 employees': 3,\n            '501 to 1000 employees': 4, '1001 to 5000 employees': 5, '5001 to 10000 employees': 6, '10000+ employees': 7}\n\ndf['company_size'] = df['company_size'].map(size_map)","5e2a04f9":"# Mapping ranks to 'revenue\t' column\nrevenue_map = {'Unknown \/ Non-Applicable': 0, 'Less than $1 million (USD)': 1, '$1 to $5 million (USD)': 2, '$5 to $10 million (USD)': 3,\n            '$10 to $25 million (USD)': 4, '$25 to $50 million (USD)': 5, '$50 to $100 million (USD)': 6, '$100 to $500 million (USD)': 7,\n            '$500 million to $1 billion (USD)': 8, '$1 to $2 billion (USD)': 9, '$2 to $5 billion (USD)':10, '$5 to $10 billion (USD)':11,\n            '$10+ billion (USD)':12}\n\ndf['revenue'] = df['revenue'].map(revenue_map)","4a174a83":"# Mapping ranks to 'job_seniority\t' column\njob_seniority_map = {'other': 0, 'jr': 1, 'sr': 2}\n\ndf['job_seniority'] = df['job_seniority'].map(job_seniority_map)","2ce66b41":"# Removing 'type_of_ownership' column using get_dummies()\nprint('Before: {}'.format(df.shape))\ndf = pd.get_dummies(columns=['type_of_ownership'], data=df, prefix='ownership')\nprint('After: {}'.format(df.shape))","f6e7aaea":"# Removing 'sector' column using get_dummies()\nprint('Before: {}'.format(df.shape))\ndf = pd.get_dummies(columns=['sector'], data=df)\nprint('After: {}'.format(df.shape))","50749943":"# Removing 'job_title' column using get_dummies()\nprint('Before: {}'.format(df.shape))\ndf = pd.get_dummies(columns=['job_title'], data=df)\nprint('After: {}'.format(df.shape))","d0c01049":"# Removing 'others' column to reduce dimentionality and avoid dummy variable trap\ndf.drop(labels=['ownership_Other Organization', 'sector_Others', 'job_title_other'], axis=1, inplace=True)","7216d97a":"X = df.drop('salary', axis=1)\ny = df['salary']","a8b07273":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import mutual_info_regression","732bd36c":"fs = SelectKBest(score_func=mutual_info_regression, k='all')\nfs.fit(X, y)","ff9eca5b":"plt.figure(figsize=(10,10))\ng = sns.barplot(x=X.columns, y=fs.scores_)\np = plt.title('Mutual Information Gain plot')\np = plt.xlabel('Feature name')\np = plt.ylabel('Information Gain')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","058f7aa5":"feature_imp = pd.DataFrame(fs.scores_, columns=['Score'], index=X.columns)\ntop20_feature = feature_imp.nlargest(n=20, columns=['Score'])\n\nplt.figure(figsize=(8,8))\ng = sns.barplot(x=top20_feature.index, y=top20_feature['Score'])\np = plt.title('Top 20 Features with mutual information gain')\np = plt.xlabel('Feature name')\np = plt.ylabel('Information Gain')\np = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')","1377da2f":"# Finding and plotting the correlation matrix for top20 features\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nplt.figure(figsize=(15, 15))\ncorr = X[top20_feature.index].corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\ng = sns.heatmap(corr, annot=True, mask=mask, vmax=0.3, center=0, cmap=cmap, square=True, linewidths=0.05)\np = plt.title('Correlation matrix')","d4b0a931":"X = X[top20_feature.index]\nX.drop(labels=['ownership_Public', 'company_size', 'revenue', 'job_title_data engineer'], axis=1, inplace=True)","e3c6ff1d":"# Finding and plotting the correlation matrix for top 18 features\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nplt.figure(figsize=(15, 15))\ncorr = X.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\ng = sns.heatmap(corr, annot=True, mask=mask, vmax=0.3, center=0, cmap=cmap, square=True, linewidths=0.05)\np = plt.title('Correlation matrix after removing highly correlated features')","804de36c":"X.columns","e9f78469":"# Rearranging the columns\n\nX = X[['company_rating', 'company_founded', 'competitors',\n       'sector_Health Care', 'sector_Business Services', 'sector_Information Technology',\n       'ownership_Private', 'sector_Biotech & Pharmaceuticals',\n       'job_title_data scientist', 'job_title_data analyst', 'job_seniority', 'job_in_headquarters',\n       'excel_job', 'python_job', 'tableau_job', 'sql_job',]]","881c0c93":"X.head()","0a62d99a":"from sklearn.preprocessing import StandardScaler\nX_prev = X.copy()\n\nsc_rating = StandardScaler()\nX['company_rating'] = sc_rating.fit_transform(X[['company_rating']])\n\nsc_founded = StandardScaler()\nX['company_founded'] = sc_founded.fit_transform(X[['company_founded']])","24b90923":"# Plotting company_rating before & after feature scaling\nplt.figure(figsize=(8, 4))\n\n# 1-row, 2-column, go to the first subplot\nplt.subplot(1, 2, 1)\ng = sns.distplot(a=X_prev['company_rating'])\np = plt.title('Before Feature Scaling')\n\n# 1-row, 2-column, go to the second subplot\nplt.subplot(1, 2, 2)\ng = sns.distplot(a=X['company_rating'])\np = plt.title('After Feature Scaling')\n\nplt.tight_layout()\nplt.show()","8b14486c":"X.head()","c94aeac0":"from sklearn.model_selection import cross_val_score","5ecf4b36":"# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\ncv = cross_val_score(lr, X, y, cv=10, scoring='neg_root_mean_squared_error')\nprint('--- Average NRMSE: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","d6d128b6":"# Fitting Lasso Regression to the Training set\nfrom sklearn.linear_model import Lasso\nlasso = Lasso()\ncv = cross_val_score(lasso, X, y, cv=10, scoring='neg_root_mean_squared_error')\nprint('--- Average NRMSE: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","f3973a5e":"# Fitting Random Forest to the Training set\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\ncv = cross_val_score(rf, X, y, cv=10, scoring='neg_root_mean_squared_error')\nprint('--- Average NRMSE: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","fc02ee0f":"# Fitting Gradient Boosting to the Training set\nfrom sklearn.ensemble import GradientBoostingRegressor\ngb = GradientBoostingRegressor()\ncv = cross_val_score(gb, X, y, cv=10, scoring='neg_root_mean_squared_error')\nprint('--- Average NRMSE: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","5f09dcd9":"# Fitting Random Forest and Gradient Boosting to Voting Regressor\nfrom sklearn.ensemble import VotingRegressor\nvr = VotingRegressor([('random_forest', rf), ('gradient_boosting', gb)], weights=[2,1])\ncv = cross_val_score(vr, X, y, cv=10, scoring='neg_root_mean_squared_error')\nprint('--- Average NRMSE: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","12ef0e46":"rf = RandomForestRegressor()\nrf.fit(X, y)","38e10a42":"def predict_salary(rating, founded, competitors, sector, ownership, job_title, job_in_headquarters, job_seniority, job_skills):\n\n  prediction_input = list()\n\n  prediction_input.append(sc_rating.transform(np.array(rating).reshape(1, -1)))\n  prediction_input.append(sc_founded.transform(np.array(founded).reshape(1, -1)))\n  prediction_input.append(competitors)\n  \n\n  sector_columns = ['sector_Biotech & Pharmaceuticals', 'sector_Health Care',\n                    'sector_Business Services','sector_Information Technology']\n  temp = list(map(int, np.zeros(shape=(1, len(sector_columns)))[0]))\n  for index in range(0, len(sector_columns)):\n    if sector_columns[index] == 'sector_' + sector:\n      temp[index] = 1\n      break\n  prediction_input = prediction_input + temp\n\n\n  if ownership == 'Private':\n    prediction_input.append(1)\n  else:\n    prediction_input.append(0)\n  \n\n  job_title_columns = ['job_title_data scientist', 'job_title_data analyst']\n  temp = list(map(int, np.zeros(shape=(1, len(job_title_columns)))[0]))\n  for index in range(0, len(job_title_columns)):\n    if job_title_columns[index] == 'job_title_' + job_title:\n      temp[index] = 1\n      break\n  prediction_input = prediction_input + temp\n\n\n  prediction_input.append(job_in_headquarters)\n\n\n  job_seniority_map = {'other': 0, 'jr': 1, 'sr': 2}\n  prediction_input.append(job_seniority_map[job_seniority])\n\n\n  temp = list(map(int, np.zeros(shape=(1, 4))[0]))\n  if 'excel' in job_skills:\n    temp[0] = 1\n  if 'python' in job_skills:\n    temp[1] = 1\n  if 'tableau' in job_skills:\n    temp[2] = 1\n  if 'sql' in job_skills:\n    temp[3] = 1\n  prediction_input = prediction_input + temp\n\n\n  return rf.predict([prediction_input])[0]","99572579":"# Prediction 1\n# Input sequence: 'company_rating', 'company_founded', 'competitors_count',\n#                 'company_sector', 'company_ownership', 'job_title', 'job_in_headquarters',\n#                 'job_seniority', 'job_skills'\n\nsalary = predict_salary(4.5, 1969, 3, 'Information Technology', 'Private', 'data scientist', 1, 'sr', ['python', 'sql', 'tableau'])\nprint('Estimated salary (range): {}(USD) to {}(USD) per annum.'.format(int(salary*1000)-9000, int(salary*1000)+9000))","53b4498d":"# Prediction 2\n# Input sequence: 'company_rating', 'company_founded', 'competitors_count',\n#                 'company_sector', 'company_ownership', 'job_title', 'job_in_headquarters',\n#                 'job_seniority', 'job_skills'\n\nsalary = predict_salary(3.0, 2000, 1, 'Health Care', 'Public', 'data analyst', 0, 'jr', ['python', 'tableau'])\nprint('Estimated salary (range): {}(USD) to {}(USD) per annum.'.format(int(salary*1000)-9000, int(salary*1000)+9000))","0e36ef77":"# **Feature Engineering**\n* ## Creating new features from existing features\n* ## Trimming Columns\n* ## Handling ordinal and nominal categorical features\n* ## Feature Selection\n","fcafaa45":"## **\u2022 Handling ordinal categorical features**<br\/>\n### _Ordinal features are **categorical variables that have some order associated with them** (e.g. size, rating, remark, etc.)_","9ae2bef4":"# **Loading the dataset**","31b777ea":"# **Importing libraries**","d0ba0e8d":"# **EDA**","af42e76c":"### _**Note: Since the Rating feature follows the Gaussian\/Normal Distribution**, we'll replace -1 values with mean of the distribution._","a5277787":"### _**Insight: Feature Scaling doesnot change the distribution of the data**, it only reduces the scale of that particular feature._","384deea6":"# Data Scientist's \ud83d\udcb2 Salary Prediction","92a8f838":"### _**Insight:** From feature importance chart, it is evident that there are **atleast 20 features that impact the target variable.**_","af70631b":"### _**Note:** Voting algorithm too did not perform well as compared to Random Forest algorithm, hence **Random Forest algorithm is selected for predicting the results of this problem statement.**_","1f7b7f48":"## _Range of correlation are as follows:_\n* ## **Strong correlation: X > 0.7**\n* ## **Moderate correlation: 0.5 < X < 0.7**\n* ## **Weak correlation: X < 0.5**\n<br\/><br\/>\n\n### **Insight:** From the correlation matrix, it is evident that features **(ownership_Public, ownership_Private), (company_size, company_founded), (job_title_data engineer, job_title_data scientist) and (company_founded, revenue) are moderately correlated.** Hence, dropping 'Revenue', 'ownership_Public', 'job_title_data engineer' and 'company_size' features.","ea611497":"# **Exploratory Data Analysis & Data Cleaning**\n* ## Plotting bargraphs and countplots for numerical and categorical features respectively.\n* ## Removing unwanted columns\n* ## Handling NaN\/missing values\n* ## Removing unwanted alphabet\/special characters from the features","cc88c009":"### _**Note: Since the Rating feature follows the Gaussian\/Normal Distribution**, but since there are few outlies, we'll replace -1 values with median of the distribution._","f7bb772b":"### _**Note: Random Forest & Gradient Boosting algorithms are selected amongst all the other algorithms** because they have the highest value for Negative Root Mean Squared Error (NRMSE) i.e. lowest value for Root Mean Squared Error (RMSE) metric. And **fed to Voting algorithm** to reduce the error!_","f77cf836":"## **Creating new features from existing features**\n* ### Adding column of _job_in_headquarters_\n*  ### Adding columns of _python, excel, sql, tableau jobs_\n\n\n\n","fc10e136":"### _**Note:** **Converting per hour salaries to per year salaries** (assuming 45 work hours per week and 52 working weeks), and removing **employer_provided_salary** from the salary array._","aedcb9bf":"### _**Note:** NaN values are replace by -1 in numeric features._","48474f6d":"## **\u2022 Trimming Columns**<br\/>\n### _Features having more than 10 categories are trimmed so as to **reduce the dimensionality.**_","12b127f0":"## **Feature Scaling**<br\/>\n### Scaling features using **StandardScaler library**","c9385595":"## **\u2022 Feature Selection**<br\/>\n### _Selecting features based on **information gain (mutual_info_regression) and correlation matrix**_","ce54532d":"# **Model Building & Evaluation**\n## _Metric: Negative Root Mean Squared Error (NRMSE)_\n\n* ## Multiple Linear Regression: -27.523 NRMSE\n* ## Lasso Regression (L1 Regularization): -27.993 NRMSE\n* ## **Random Forest (Ensemble): -17.637 NRMSE**\n* ## Gradient Boosting: -24.429 NRMSE\n* ## Voting (Random Forest + Gradient Boosting): -19.136 NRMSE\n","641759c3":"# **Making Predictions**","454ee7e1":"### _**Note:** No feature has NaN values, but there may be the case where the NaN values are replaced by some other value(s) like -1, 0, etc._","f63b6f95":"## **\u2022 Handling nominal categorical features**<br\/>\n### _Nominal features are **categorical variables that have no numerical importance** (e.g. occupation, name, etc.)_","10a7e17d":"### _**Note: Since Founded feature does not follow Gaussian\/Normal distribution but is Right-Skewed graph**, we'll replacing the -1 values with median of the distribution._","f7e34b5e":"### _**Insight:** Rating-Founded columns have **positive correlation**, whereas Salary-Founded columns have **negative correlation**. Also since the correlation is not high amongst all these numerical features, there is **no case of multicolliniearity.**_"}}