{"cell_type":{"b874e3e0":"code","7612b2ff":"code","c77b4f2f":"code","9b6a62dd":"code","51b31d5f":"code","3f3705e7":"code","9e8a21f9":"code","054a2522":"code","0f4d97d1":"code","2e1e4bb7":"code","5d21dbb5":"code","8cc67715":"code","fa01bed7":"code","7fa607c0":"code","fdc6b711":"code","90fc9e4b":"code","76f9fd73":"code","00b8ea0c":"code","dcf54599":"code","3aa44ff5":"code","7b0c7b53":"code","31ee7e78":"code","cf956165":"code","30676f1f":"code","84b823bc":"code","3a6d03b5":"code","e1661bed":"code","b4b42148":"code","ef7e18f0":"code","2f2ce3e3":"code","6c821b57":"code","e65af207":"code","07bfbc99":"code","820c1774":"code","bac4d9aa":"code","55be0d14":"code","ee948267":"code","2fed3d01":"code","f19e6741":"code","5a4b92e0":"code","b1a554b6":"code","d6f62592":"code","4b2e369e":"code","0c32f396":"code","59bd2467":"code","97cb620e":"code","8a06b656":"code","faf5cb03":"code","b3807f72":"code","f74813aa":"code","a56c7042":"code","346a594c":"code","c19c0c2d":"code","8eb15b80":"code","ac73ef8c":"markdown","e495e8bb":"markdown","799f591c":"markdown","84add101":"markdown","4283346c":"markdown","1e714b73":"markdown","c724e17b":"markdown","7de16b13":"markdown","5264d1be":"markdown","30794f5c":"markdown","f9ccd07d":"markdown","3260f3be":"markdown","59e8b025":"markdown","f152d643":"markdown","b55fffbe":"markdown","edb0be13":"markdown","2c1304b7":"markdown","0d3f319f":"markdown","ee8b530b":"markdown","f7e9c8f2":"markdown","0f8cede5":"markdown","bf33c4ea":"markdown","018da3ac":"markdown"},"source":{"b874e3e0":"import numpy as np\nimport pandas as pd\n\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff","7612b2ff":"iris_data = pd.read_csv('..\/input\/iris-dataset\/iris.csv')\ntitanic_data = pd.read_csv('..\/input\/c310pandas\/titanic.csv')\nflights_data = pd.read_csv('..\/input\/flights\/flights.csv')","c77b4f2f":"iris_data.head()","9b6a62dd":"titanic_data.head()","51b31d5f":"flights_data.head()","3f3705e7":"# Create a trace\ntrace = go.Scatter(\n    x = iris_data['sepal_length'] ,\n    y = iris_data['petal_length'] ,\n    mode = 'markers'\n)\n\ntmp = [trace]\n\n# Plot and embed in ipython notebook!\npy.offline.iplot(tmp)","9e8a21f9":"# Style Scatter Plots\ntrace0 = go.Scatter(\n    x = iris_data['sepal_length'],\n    y = iris_data['petal_length'],\n    name = 'length',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(152, 0, 0, .8)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)'\n        )\n    )\n)\n\ntrace1 = go.Scatter(\n    x = iris_data['sepal_width'],\n    y = iris_data['petal_width'],\n    name = 'width',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2,\n        )\n    )\n)\n\ntmp = [trace0, trace1]\n\nlayout = dict(title = 'Styled Scatter',\n              yaxis = dict(zeroline = False),\n              xaxis = dict(zeroline = False)\n             )\n\nfig = dict(data=tmp, layout=layout)\npy.offline.iplot(fig)","054a2522":"# Simple Line Plot\n\n# Create a trace\ntrace1 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'January']['year'],\n    y = flights_data[flights_data['month'] == 'January']['passengers'],\n    name='January'\n)\n\ntrace2 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'February']['year'],\n    y = flights_data[flights_data['month'] == 'February']['passengers'],\n    name='February'\n)\n\ntrace3 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'March']['year'],\n    y = flights_data[flights_data['month'] == 'March']['passengers'],\n    name='March'\n)\n\ntrace4 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'April']['year'],\n    y = flights_data[flights_data['month'] == 'April']['passengers'],\n    name='April'\n)\n\ntrace5 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'May']['year'],\n    y = flights_data[flights_data['month'] == 'May']['passengers'],\n    name='May'\n)\n\ntmp = [trace1,trace2,trace3,trace4,trace5]\n\npy.offline.iplot(tmp)","0f4d97d1":"trace1 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'January']['year'],\n    y = flights_data[flights_data['month'] == 'January']['passengers'],\n    name='January',\n    fill='tozeroy'\n)\n\ntrace2 = go.Scatter(\n    x = flights_data[flights_data['month'] == 'February']['year'],\n    y = flights_data[flights_data['month'] == 'February']['passengers'],\n    name='February',\n    fill='tonexty'\n)\n\n\ntmp = [trace1,trace2]\n\npy.offline.iplot(tmp)","2e1e4bb7":"# Basic\ntmp = [go.Bar(\n            x=flights_data[flights_data['month'] == 'January']['year'],\n            y=flights_data[flights_data['month'] == 'January']['passengers'],\n            name='January'\n    )]\npy.offline.iplot(tmp)","5d21dbb5":"# Grouped Bar Chart\ntrace1 = go.Bar(\n    x=flights_data[flights_data['month'] == 'January']['year'],\n    y=flights_data[flights_data['month'] == 'January']['passengers'],\n    name='January'\n)\ntrace2 = go.Bar(\n    x=flights_data[flights_data['month'] == 'February']['year'],\n    y=flights_data[flights_data['month'] == 'February']['passengers'],\n    name='February'\n)\n\ntmp = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group'\n)\n\nfig = go.Figure(data=tmp, layout=layout)\npy.offline.iplot(fig)","8cc67715":"# Stacked Bar Chart\ntrace1 = go.Bar(\n    x=flights_data[flights_data['month'] == 'January']['year'],\n    y=flights_data[flights_data['month'] == 'January']['passengers'],\n    name='January'\n)\ntrace2 = go.Bar(\n    x=flights_data[flights_data['month'] == 'February']['year'],\n    y=flights_data[flights_data['month'] == 'February']['passengers'],\n    name='February'\n)\n\ntmp = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=tmp, layout=layout)\npy.offline.iplot(fig)","fa01bed7":"# Horizontal Bar Chart\ntrace1 = go.Bar(\n    y=flights_data[flights_data['month'] == 'January']['year'],\n    x=flights_data[flights_data['month'] == 'January']['passengers'],\n    name='January',\n    orientation = 'h',\n)\ntrace2 = go.Bar(\n    y=flights_data[flights_data['month'] == 'February']['year'],\n    x=flights_data[flights_data['month'] == 'February']['passengers'],\n    name='February',\n    orientation = 'h',\n)\n\ntmp = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=tmp, layout=layout)\npy.offline.iplot(fig)","7fa607c0":"# Basic\nlabels=['setosa','versicolor','virginica']\nvalues=[len(iris_data[iris_data['species']=='setosa']),\n        len(iris_data[iris_data['species']=='versicolor']),\n        len(iris_data[iris_data['species']=='virginica'])]\n\ntrace=go.Pie(labels=labels, values=values)\n\npy.offline.iplot([trace])","fdc6b711":"# Donut Chart\nfig = {\n  \"data\": [\n    {\n      \"values\": [len(iris_data[iris_data['species']=='setosa']),\n        len(iris_data[iris_data['species']=='versicolor']),\n        len(iris_data[iris_data['species']=='virginica'])],\n      \"labels\": ['setosa','versicolor','virginica'],\n      \"domain\": {\"column\": 0},\n      \"name\": \"species\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"species\",\n        \"grid\": {\"rows\": 1, \"columns\": 1},\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"species\",\n                \"x\": 0.5,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\npy.offline.iplot(fig)","90fc9e4b":"# Basic\nx = iris_data['sepal_length'] \nhist_data = [x]\ngroup_labels = ['sepal_length']\n\nfig = ff.create_distplot(hist_data, group_labels,bin_size=.2)\npy.offline.iplot(fig)","76f9fd73":"# Add histogram data\nx1 = iris_data['sepal_length'] \nx2 = iris_data['sepal_width']  \nx3 = iris_data['petal_length'] \nx4 = iris_data['petal_width'] \n\n# Group data together\nhist_data = [x1, x2, x3, x4]\n\ngroup_labels = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\n\n# Plot!\npy.offline.iplot(fig)","00b8ea0c":"# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=[.1, .25, .5, 1])\n\n# Plot!\npy.offline.iplot(fig)","dcf54599":"# many customized\nrug_text_one = ['a', 'b', 'c', 'd', 'e',\n                'f', 'g', 'h', 'i', 'j', \n                'k', 'l', 'm', 'n', 'o',\n                'p', 'q', 'r', 's', 't', \n                'u', 'v', 'w', 'x', 'y', 'z'] \n\nrug_text_two = ['aa', 'bb', 'cc', 'dd', 'ee',\n                'ff', 'gg', 'hh', 'ii', 'jj', \n                'kk', 'll', 'mm', 'nn', 'oo',\n                'pp', 'qq', 'rr', 'ss', 'tt', \n                'uu', 'vv', 'ww', 'xx', 'yy', 'zz'] \n\nrug_text_three = ['aaa', 'bbb', 'ccc', 'ddd', 'eee',\n                'fff', 'ggg', 'hhh', 'iii', 'jjj', \n                'kkk', 'lll', 'mmm', 'nnn', 'ooo',\n                'ppp', 'qqq', 'rrr', 'sss', 'ttt', \n                'uuu', 'vvv', 'www', 'xxx', 'yyy', 'zzz'] \n\nrug_text_four = ['aaaa', 'bbbb', 'cccc', 'dddd', 'eeee',\n                'ffff', 'gggg', 'hhhh', 'iiii', 'jjjj', \n                'kkkk', 'llll', 'mmmm', 'nnnn', 'oooo',\n                'pppp', 'qqqq', 'rrrr', 'ssss', 'tttt', \n                'uuuu', 'vvvv', 'wwww', 'xxxx', 'yyyy', 'zzzz'] \n\nrug_text = [rug_text_one, rug_text_two,rug_text_three,rug_text_four]\n\ncolors = ['rgb(0, 0, 100)', 'rgb(0, 100, 100)','rgb(100, 100, 100)','rgb(100, 100, 200)']\n\nfig = ff.create_distplot(\n    hist_data, group_labels, bin_size=.2,\n    rug_text=rug_text, colors=colors)\n\nfig['layout'].update(title='Customized Distplot')\n\n# Plot!\npy.offline.iplot(fig)","3aa44ff5":"# Basic\ntrace0 = go.Box(\n    y=iris_data['sepal_length'],\n    name='sepal_length'\n)\ntrace1 = go.Box(\n    y=iris_data['sepal_width'],\n    name='sepal_width'\n)\ntmp = [trace0, trace1]\npy.offline.iplot(tmp)","7b0c7b53":"# Horizontal\ntrace0 = go.Box(\n    x=iris_data['sepal_length'],\n    name='sepal_length'\n)\ntrace1 = go.Box(\n    x=iris_data['sepal_width'],\n    name='sepal_width'\n)\ntmp = [trace0, trace1]\npy.offline.iplot(tmp)","31ee7e78":"# With the Underlying Data\ntrace0 = go.Box(\n    y=iris_data['sepal_length'],\n    name='sepal_length',\n    boxpoints='all', \n    jitter=0.3,\n    pointpos=-1.8\n)\ntmp = [trace0]\npy.offline.iplot(tmp)","cf956165":"# color\ntrace0 = go.Box(\n    y=iris_data['sepal_length'],\n    name='sepal_length',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=iris_data['sepal_width'],\n    name='sepal_width',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\ntmp = [trace0, trace1]\npy.offline.iplot(tmp)","30676f1f":"# Styling Mean & Standard Deviation\ntrace0 = go.Box(\n    y=iris_data['sepal_length'],\n    name='sepal_length',\n    boxmean=True\n)\ntrace1 = go.Box(\n    y=iris_data['sepal_width'],\n    name='sepal_width',\n    boxmean='sd'\n)\ntmp = [trace0, trace1]\npy.offline.iplot(tmp)","84b823bc":"# Grouped\ntrace0 = go.Box(\n    y=iris_data['sepal_length'],\n    name='sepal_length',\n    x=iris_data['species']\n)\ntrace1 = go.Box(\n    y=iris_data['sepal_width'],\n    name='sepal_width',\n    x=iris_data['species']\n)\ntmp = [trace0, trace1]\nlayout = go.Layout(\n    boxmode='group'\n)\nfig = go.Figure(data=tmp, layout=layout)\npy.offline.iplot(fig)","3a6d03b5":"# many customized\nx_data = ['sepal_length', 'sepal_width',\n          'petal_length', 'petal_width']\ny0 = iris_data['sepal_length']\ny1 = iris_data['sepal_width']\ny2 = iris_data['petal_length']\ny3 = iris_data['petal_width']\n\ny_data = [y0,y1,y2,y3]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)']\n\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Iris',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)","e1661bed":"# Basic\nx = iris_data['sepal_length']\ntmp = [go.Histogram(x=x)]\n\npy.offline.iplot(tmp)","b4b42148":"# Normalized\ntmp = [go.Histogram(x=x,histnorm='probability')]\n\npy.offline.iplot(tmp)","ef7e18f0":"# Horizontal\ntmp = [go.Histogram(y=x)]\n\npy.offline.iplot(tmp)","2f2ce3e3":"# Overlaid\nx0 = iris_data['sepal_length']\nx1 = iris_data['petal_length']\n\ntrace1 = go.Histogram(\n    x=x0,\n    opacity=0.75,\n    name='sepal_length'\n)\ntrace2 = go.Histogram(\n    x=x1,\n    opacity=0.75,\n    name='petal_length'\n)\n\ntmp = [trace1, trace2]\nlayout = go.Layout(barmode='overlay')\nfig = go.Figure(data=tmp, layout=layout)\n\npy.offline.iplot(fig)","6c821b57":"# Stacked\nlayout = go.Layout(barmode='stack')\nfig = go.Figure(data=tmp, layout=layout)\n\npy.offline.iplot(fig)","e65af207":"# Styled Histogram\nx0 = iris_data['sepal_length']\nx1 = iris_data['petal_length']\n\ntrace1 = go.Histogram(\n    x=x0,\n    histnorm='percent',\n    name='sepal_length',\n    xbins=dict(\n        start=3.0,\n        end=8.0,\n        size=0.5\n    ),\n    marker=dict(\n        color='#FFD7E9',\n    ),\n    opacity=0.75\n)\ntrace2 = go.Histogram(\n    x=x1,\n    name='petal_length',\n    xbins=dict(\n        start=3.0,\n        end=8.0,\n        size=0.5\n    ),\n    marker=dict(\n        color='#EB89B5'\n    ),\n    opacity=0.75\n)\ntmp = [trace1, trace2]\n\nlayout = go.Layout(\n    title='Sampled Results',\n    xaxis=dict(\n        title='Value'\n    ),\n    yaxis=dict(\n        title='Count'\n    ),\n    bargap=0.2,\n    bargroupgap=0.1\n)\nfig = go.Figure(data=tmp, layout=layout)\npy.offline.iplot(fig)","07bfbc99":"# Specify Binning Function\nx = iris_data['species']\ny = iris_data['sepal_length']\n\ntmp = [\n  go.Histogram(\n    histfunc = \"count\",\n    y = y,\n    x = x,\n    name = \"count\"\n  ),\n  go.Histogram(\n    histfunc = \"sum\",\n    y = y,\n    x = x,\n    name = \"sum\"\n  )\n]\n\npy.offline.iplot(tmp)","820c1774":"# 2D Histogram of a Bivariate Normal Distribution\nx = iris_data['sepal_length']\ny = iris_data['petal_length']\n\ntmp = [\n    go.Histogram2d(\n        x=x,\n        y=y\n    )\n]\npy.offline.iplot(tmp)","bac4d9aa":"# 2D Histogram Binning and Styling Options\nx = iris_data['sepal_length']\ny = iris_data['petal_length']\n\ntmp = [\n    go.Histogram2d(x=x, y=y, histnorm='probability',\n        autobinx=False,\n        xbins=dict(start=4, end=8, size=0.1),\n        autobiny=False,\n        ybins=dict(start=0, end=8, size=0.1),\n        colorscale=[[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']]\n    )\n]\npy.offline.iplot(tmp)","55be0d14":"# 2D Histogram Overlaid with a Scatter Chart\nx0 = iris_data['sepal_length']\ny0 = iris_data['petal_length']\nx1 = iris_data['sepal_width']\ny1 = iris_data['petal_width']\n\nx = np.concatenate([x0, x1])\ny = np.concatenate([y0, y1])\n\ntrace1 = go.Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    showlegend=False,\n    marker=dict(\n        symbol='x',\n        opacity=0.7,\n        color='white',\n        size=8,\n        line=dict(width=1),\n    )\n)\ntrace2 = go.Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    showlegend=False,\n    marker=dict(\n        symbol='circle',\n        opacity=0.7,\n        color='white',\n        size=8,\n        line=dict(width=1),\n    )\n)\ntrace3 = go.Histogram2d(\n    x=x,\n    y=y,\n    colorscale='YlGnBu',\n    zmax=10,\n    nbinsx=14,\n    nbinsy=14,\n    zauto=False,\n)\n\nlayout = go.Layout(\n    xaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),\n    yaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),\n    autosize=False,\n    height=550,\n    width=550,\n    hovermode='closest',\n\n)\ntmp = [trace1, trace2, trace3]\nfig = go.Figure(data=tmp, layout=layout)\n\npy.offline.iplot(fig)","ee948267":"# 2D Histogram Contour Plot with Histogram Subplots\nt = np.linspace(-1, 1.2, 2000)\nx = iris_data['sepal_length']\ny = iris_data['petal_length']\n\ncolorscale = ['#7A4579', '#D56073', 'rgb(236,158,105)', (1, 1, 0.2), (0.98,0.98,0.98)]\n\nfig = ff.create_2d_density(\n    x, y, colorscale=colorscale,\n    hist_color='rgb(255, 237, 222)', point_size=3\n)\n\npy.offline.iplot(fig)","2fed3d01":"# Facet by Column\nfig = ff.create_facet_grid(\n    iris_data,\n    x='sepal_length',\n    y='petal_length',\n    facet_col='species',\n)\n\npy.offline.iplot(fig)","f19e6741":"# Facet by Row\nfig = ff.create_facet_grid(\n    iris_data,\n    x='sepal_length',\n    y='petal_length',\n    facet_row='species',\n)\n\npy.offline.iplot(fig)","5a4b92e0":"# Facet by Row and Column\n\nfig = ff.create_facet_grid(\n    titanic_data,\n    x='fare',\n    y='age',\n    facet_row='sex',\n    facet_col='alive',\n    color_name='class',\n    color_is_cat=True,\n)\n\npy.offline.iplot(fig)","b1a554b6":"# Custom Colormap\nfig = ff.create_facet_grid(\n    titanic_data,\n    x='fare',\n    y='age',\n    color_name='sex',\n    show_boxes=False,\n    marker={'size': 10, 'opacity': 1.0},\n    colormap={'male': 'rgb(165, 242, 242)', 'female': 'rgb(253, 174, 216)'}\n)\npy.offline.iplot(fig)","d6f62592":"# Plot with Histogram Traces\nfig = ff.create_facet_grid(\n    titanic_data,\n    x='fare',\n    y='age',\n    facet_row='sex',\n    facet_col='alive',\n    trace_type='histogram',\n)\n\npy.offline.iplot(fig)","4b2e369e":"# Plot with BoxPlot Traces\nfig = ff.create_facet_grid(\n    titanic_data,\n    y='age',\n    facet_row='sex',\n    facet_col='alive',\n    trace_type='box',\n)\n\npy.offline.iplot(fig)","0c32f396":"classes=np.unique(iris_data['species'].values).tolist()\nclass_code={classes[k]: k for k in range(3)}\ncolor_vals=[class_code[cl] for cl in iris_data['species']]\ntext=[iris_data.loc[ k, 'species'] for k in range(len(iris_data))]\n\npl_colorscale=[[0.0, '#19d3f3'],\n               [0.333, '#19d3f3'],\n               [0.333, '#e763fa'],\n               [0.666, '#e763fa'],\n               [0.666, '#636efa'],\n               [1, '#636efa']]\n\ntrace1 = go.Splom(dimensions=[dict(label='sepal_length',\n                                 values=iris_data['sepal_length']),\n                            dict(label='sepal_width',\n                                 values=iris_data['sepal_width']),\n                            dict(label='petal_length',\n                                 values=iris_data['petal_length']),\n                            dict(label='petal_width',\n                                 values=iris_data['petal_width'])],\n                text=text,\n                marker=dict(color=color_vals,\n                            size=7,\n                            colorscale=pl_colorscale,\n                            showscale=False,\n                            line=dict(width=0.5,\n                                      color='rgb(230,230,230)'))\n                )\n\naxis = dict(showline=True,\n          zeroline=False,\n          gridcolor='#fff',\n          ticklen=4)\n\nlayout = go.Layout(\n    title='Iris Data set',\n    dragmode='select',\n    width=600,\n    height=600,\n    autosize=False,\n    hovermode='closest',\n    plot_bgcolor='rgba(240,240,240, 0.95)',\n    xaxis1=dict(axis),\n    xaxis2=dict(axis),\n    xaxis3=dict(axis),\n    xaxis4=dict(axis),\n    yaxis1=dict(axis),\n    yaxis2=dict(axis),\n    yaxis3=dict(axis),\n    yaxis4=dict(axis)\n)\n\nfig1 = dict(data=[trace1], layout=layout)\npy.offline.iplot(fig1)","59bd2467":"# Basic Violin Plot\nfig = {\n    \"data\": [{\n        \"type\": 'violin',\n        \"y\": iris_data['sepal_length'],\n        \"box\": {\n            \"visible\": True\n        },\n        \"line\": {\n            \"color\": 'black'\n        },\n        \"meanline\": {\n            \"visible\": True\n        },\n        \"fillcolor\": '#8dd3c7',\n        \"opacity\": 0.6,\n        \"x0\": 'sepal_length'\n    }],\n    \"layout\" : {\n        \"title\": \"\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\n\npy.offline.iplot(fig)","97cb620e":"# Multiple Traces\ntmp = []\nfor i in range(0,len(pd.unique(iris_data['species']))):\n    trace = {\n            \"type\": 'violin',\n            \"x\": iris_data['species'][iris_data['species'] == pd.unique(iris_data['species'])[i]],\n            \"y\": iris_data['sepal_length'][iris_data['species'] == pd.unique(iris_data['species'])[i]],\n            \"name\": pd.unique(iris_data['species'])[i],\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            }\n        }\n    tmp.append(trace)\n\n        \nfig = {\n    \"data\": tmp,\n    \"layout\" : {\n        \"title\": \"\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\n\npy.offline.iplot(fig)","8a06b656":"# Grouped Violin Plot\nfig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": titanic_data['class'][ titanic_data['sex'] == 'male' ],\n            \"y\": titanic_data['age'] [ titanic_data['sex'] == 'male' ],\n            \"legendgroup\": 'male',\n            \"scalegroup\": 'male',\n            \"name\": 'male',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": titanic_data['class'][ titanic_data['sex'] == 'female' ],\n            \"y\": titanic_data['age'] [ titanic_data['sex'] == 'female' ],\n            \"legendgroup\": 'female',\n            \"scalegroup\": 'female',\n            \"name\": 'female',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'pink'\n            }\n        }\n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violinmode\": \"group\"\n    }\n}\n\n\npy.offline.iplot(fig)","faf5cb03":"# Split Violin Plot\nfig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": titanic_data['class'][ titanic_data['sex'] == 'male' ],\n            \"y\": titanic_data['age'] [ titanic_data['sex'] == 'male' ],\n            \"legendgroup\": 'male',\n            \"scalegroup\": 'male',\n            \"name\": 'male',\n            \"side\": 'negative',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": titanic_data['class'][ titanic_data['sex'] == 'female' ],\n            \"y\": titanic_data['age'] [ titanic_data['sex'] == 'female' ],\n            \"legendgroup\": 'female',\n            \"scalegroup\": 'female',\n            \"name\": 'female',\n            \"side\": 'positive',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'pink'\n            }\n        }\n    ],\n     \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.offline.iplot(fig)","b3807f72":"# Basic\ntrace = go.Heatmap(z=[[1, 20, 30],\n                      [20, 1, 60],\n                      [30, 60, 1]])\ndata=[trace]\npy.offline.iplot(data)","f74813aa":"# Heatmap with Categorical Axis Labels\ndata = pd.pivot_table(data=flights_data, values='passengers', columns='year', index='month', aggfunc=np.mean)\ndata","a56c7042":"trace = go.Heatmap(z=data.values,\n                   x=data.columns,\n                   y=data.index)\ndata=[trace]\npy.offline.iplot(data)","346a594c":"pivot_data = pd.pivot_table(data=flights_data, values='passengers', columns='year', index='month', aggfunc=np.mean)\ndata = [\n    go.Surface(\n        x=pivot_data.columns,\n        y=pivot_data.index,\n        z=pivot_data.values\n    )\n]\nlayout = go.Layout(\n    title='flights',\n    autosize=False,\n    width=500,\n    height=500,\n    margin=dict(\n        l=65,\n        r=50,\n        b=65,\n        t=90\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","c19c0c2d":"pivot_data = pd.pivot_table(data=flights_data, values='passengers', columns='year', index='month', aggfunc=np.mean)\ndata = [\n    go.Surface(\n        x=pivot_data.columns,\n        y=pivot_data.index,\n        z=pivot_data.values\n    )\n]\nlayout = go.Layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230, 230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict(x=1, y=1, z=0.7),\n        aspectmode = 'manual'\n    )\n)\n\nupdatemenus=list([\n    dict(\n        buttons=list([   \n            dict(\n                args=['type', 'surface'],\n                label='3D Surface',\n                method='restyle'\n            ),\n            dict(\n                args=['type', 'heatmap'],\n                label='Heatmap',\n                method='restyle'\n            )             \n        ]),\n        direction = 'left',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        type = 'buttons',\n        x = 0.1,\n        xanchor = 'left',\n        y = 1.1,\n        yanchor = 'top' \n    ),\n])\n\nannotations = list([\n    dict(text='Trace type:', x=1949, y=1.085, yref='paper', align='left', showarrow=False)\n])\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig)","8eb15b80":"trace1 = go.Scatter3d(\n    x=iris_data['sepal_length'],\n    y=iris_data['petal_length'],\n    z=iris_data['sepal_width'],\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=iris_data['sepal_width'],                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","ac73ef8c":"# How to use Plotly","e495e8bb":"## Histgram","799f591c":"## 2D Density Plot","84add101":"## Distplot","4283346c":"## Heat Map","1e714b73":"## Scatterplot Matrix","c724e17b":"## Restyle Button","7de16b13":"## Pie Chart","5264d1be":"## 3D Scatter","30794f5c":"## Violin Plot","f9ccd07d":"## Line Chart","3260f3be":"# Data Load","59e8b025":"# Notebook Outline\n\n1.  [**Data Load**](#Data-Load)   \n2. [**How to use Plotly**](#How-to-use-Plotly)  \n    2-1 [**Scatter Plot**](#Scatter-Plot)  \n    2-2 [**Line Chart**](#Line-Chart)  \n    2-3 [**Filled Area Plot**](#Filled-Area-Plot)  \n    2-4 [**Bar Chart**](#Bar-Chart)  \n    2-5 [**Pie Chart**](#Pie-Chart)  \n    2-6 [**Distplot**](#Distplot)  \n    2-7 [**Boxplot**](#Boxplot)  \n    2-8 [**Histgram**](#Histgram)  \n    2-9 [**2D Histogram**](#2D-Histogram)  \n    2-10 [**2D Density Plot**](#2D-Density-Plot)  \n    2-11 [**Facet and Trellis Plot**](#Facet-and-Trellis-Plot)  \n    2-12 [**Scatterplot Matrix**](#Scatterplot-Matrix)  \n    2-13 [**Violin Plot**](#Violin-Plot)  \n    2-14 [**Heat Map**](#Heat-Map)  \n    2-15 [**3D Surface**](#3D-Surface)  \n    2-16 [**Restyle Button**](#Restyle-Button)  \n    2-17 [**3D Scatter**](#3D-Scatter)  \n3. [**Conclusion**](#Conclusion)  ","f152d643":"## Boxplot","b55fffbe":"## Scatter Plot","edb0be13":"## 2D Histogram","2c1304b7":"## Bar Chart","0d3f319f":"## Facet and Trellis Plot","ee8b530b":"# Conclusion","f7e9c8f2":"# Introduction\nI summarized how to use Plotly that I would like to use with kaggle.  \nI referred to the official page of Plotly.  \nhttps:\/\/plot.ly\/python\/  \n\nThe data used are the following three samples of Seaborn.  \n\u30fbiris  \n\u30fbtitanic  \n\u30fbflights  \n","0f8cede5":"## Filled Area Plot","bf33c4ea":"Plotly can draw beautiful figures, but on the other hand coding tends to be complicated.  \nTherefore, it is necessary to pay attention to miscoding.  ","018da3ac":"## 3D Surface"}}