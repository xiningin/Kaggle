{"cell_type":{"0eb053c1":"code","5721c01f":"code","20b54eea":"code","4a158408":"code","af8641ec":"code","1dde51e8":"code","d20c844d":"code","55483c7d":"code","521a8fd6":"code","3c36b4d0":"code","795e567e":"markdown","ca8a5c6b":"markdown","7930b638":"markdown","f28f67fa":"markdown","6b63ac8e":"markdown","99c6ad25":"markdown","c2633450":"markdown","e68c1e59":"markdown","8df86e9b":"markdown"},"source":{"0eb053c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5721c01f":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n\nSEED = 170299\n\nprint(tf.__version__)","20b54eea":"digits_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndigits_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\nprint(digits_train.head())","4a158408":"# Feature columns\ncols = [\"pixel\" + str(x) for x in range(28 * 28)]\n\nX, y = digits_train[cols], digits_train[\"label\"]\n\nX_train, X_dev, y_train, y_dev = train_test_split(X, y, test_size = 0.1, random_state = SEED)\n\nX_test = digits_test[cols]\n\nprint(X_train.head())","af8641ec":"# Preprocessing function\ndef preprocess(features):\n    features = tf.reshape(tf.constant(features, dtype=tf.float16), [-1, 28, 28, 1])\n    features \/= 255 # pixel color intensity is within range [0, 255], inclusive\n    return features\n\nX_train = preprocess(X_train)\nX_dev = preprocess(X_dev)\nX_test = preprocess(X_test)\n\nprint(X_train.shape, y_train.shape)\nprint(X_dev.shape, y_dev.shape)","1dde51e8":"train_datagen = ImageDataGenerator( \n    rotation_range=10,  \n    zoom_range = 0.1, \n    width_shift_range=0.1,  \n    height_shift_range=0.1,\n    shear_range = 0.1,\n    horizontal_flip=False,  \n    vertical_flip=False\n)\ntrain_datagen.fit(X_train)","d20c844d":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n#     tf.keras.layers.Dropout(0.25),\n\n    tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n#     tf.keras.layers.Dropout(0.25),\n\n    tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n#     tf.keras.layers.Dropout(0.25),\n\n    tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n#     tf.keras.layers.Dropout(0.25),\n\n    tf.keras.layers.Flatten(),\n\n    tf.keras.layers.Dense(512, activation='relu'),\n#     tf.keras.layers.Dropout(0.5),\n\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='rmsprop',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nprint(model.summary())","55483c7d":"history = model.fit(\n    train_datagen.flow(X_train, y_train, batch_size = 64), \n    batch_size = 64, epochs = 5,\n    validation_data=(X_dev, y_dev),\n)","521a8fd6":"y_test = np.argmax(model.predict(X_test), axis=1)\n\nprint(y_test)","3c36b4d0":"samples = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\n\nindex = samples.ImageId\ndata = {'ImageId' : index,'Label': y_test}\ndf = pd.DataFrame(data)\ndf.to_csv('output.csv', index=False)","795e567e":"# Fit the model into the train set","ca8a5c6b":"# Read data files","7930b638":"# Construct model","f28f67fa":"# Predict label for test set","6b63ac8e":"# Preprocess features","99c6ad25":"# Output .csv file for submission","c2633450":"# Data augmentation, using Tensorflow's ImageDataGenerator","e68c1e59":"# Import necessary libraries","8df86e9b":"# Prepare features and labels, split train\/dev\/test set"}}