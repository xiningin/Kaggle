{"cell_type":{"3958dce3":"code","10d3278c":"code","a905b6a9":"code","b5cfaf86":"code","f8a719fb":"code","d6158f47":"code","3958faa3":"code","622ba015":"code","e93d3f90":"code","988d8d14":"code","bcc23195":"code","972b7dbb":"code","048e37c8":"code","f9ba1e2a":"code","996a15ea":"code","0bae8bcb":"code","86f9d07e":"code","235dacfe":"code","9f7f3ad9":"code","0fd3183d":"code","79b8904d":"code","5b540f6d":"code","ec72999b":"code","ff4a1b46":"code","5a31c822":"code","cc0b32b8":"code","9d64ce32":"code","10f41d0f":"code","6d9795ca":"code","b30a5dba":"code","649a38f7":"code","25652148":"code","a09dd48d":"code","d4e78ca0":"code","38ccb5de":"code","33d85a75":"code","b0559917":"code","956dba1c":"markdown","b6559bd8":"markdown","b0c37d7f":"markdown","1ccb3b3a":"markdown","0f496bd5":"markdown","a9d72c42":"markdown","f62bd225":"markdown","ff085d57":"markdown","bd0683e7":"markdown","743ad4ae":"markdown","6df508f4":"markdown"},"source":{"3958dce3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","10d3278c":"dataset = pd.read_csv('..\/input\/insurance\/insurance.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","a905b6a9":"dataset.head()","b5cfaf86":"dataset.info()","f8a719fb":"dataset.describe()","d6158f47":"dataset['region'].value_counts()","3958faa3":"sns.pairplot(dataset)","622ba015":"dataset.corr()","e93d3f90":"sns.heatmap(data=dataset.corr(), cmap='coolwarm')","988d8d14":"sns.boxplot(x='children', y='charges', data=dataset)","bcc23195":"sns.boxplot(x='smoker', y='charges', data=dataset)","972b7dbb":"sns.boxplot(x='sex', y='charges', data=dataset)","048e37c8":"sns.boxplot(x='region', y='charges', data=dataset)","f9ba1e2a":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder","996a15ea":"ct = ColumnTransformer(transformers=[('encodes', OneHotEncoder(), [1, 4, 5])], remainder='passthrough')","0bae8bcb":"X = np.array(ct.fit_transform(X))","86f9d07e":"X","235dacfe":"from sklearn.model_selection import train_test_split","9f7f3ad9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","0fd3183d":"from sklearn.linear_model import LinearRegression","79b8904d":"lin_regressor = LinearRegression()","5b540f6d":"lin_regressor.fit(X_train, y_train)","ec72999b":"y_pred_lr = lin_regressor.predict(X_test)","ff4a1b46":"from sklearn.preprocessing import StandardScaler","5a31c822":"scx = StandardScaler()\nscy = StandardScaler()\nX_train_svr = scx.fit_transform(X_train)\ny_train_svr = scy.fit_transform(y_train.reshape(len(y_train), 1))","cc0b32b8":"from sklearn.svm import SVR","9d64ce32":"svr_regressor = SVR(kernel='rbf')","10f41d0f":"svr_regressor.fit(X_train_svr, y_train_svr)","6d9795ca":"y_pred_svr = scy.inverse_transform(svr_regressor.predict(scx.transform(X_test)))","b30a5dba":"from sklearn.ensemble import RandomForestRegressor","649a38f7":"rf_regressor = RandomForestRegressor(n_estimators=10, random_state=0)","25652148":"rf_regressor.fit(X_train, y_train)","a09dd48d":"y_pred_rf = rf_regressor.predict(X_test)","d4e78ca0":"model_1 = RandomForestRegressor(n_estimators=50, random_state=0)\nmodel_2 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel_3 = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=0)\nmodel_4 = RandomForestRegressor(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_5 = RandomForestRegressor(n_estimators=100, max_depth=7, random_state=0)\n\nmodels = [model_1, model_2, model_3, model_4, model_5]","38ccb5de":"from sklearn.metrics import r2_score\ndef rf_models(model,X_tr=X_train,X_v=X_test,y_tr=y_train,y_v=y_test):\n    model.fit(X_tr,y_tr)\n    mod_preds=model.predict(X_v)\n    return r2_score(y_v,mod_preds)","33d85a75":"from sklearn.metrics import r2_score\nprint('Linear Regression', r2_score(y_test, y_pred_lr))\nprint('Support Vector Regression', r2_score(y_test, y_pred_svr))\nprint('Random Forest Regression', r2_score(y_test, y_pred_rf))\nprint(\"\")\n\n#Printing the scores generated from the multiple Random Forest models\nfor i in range(len(models)):\n    print(\"Random Forest model {}:{}\".format(i+1,rf_models(models[i])))","b0559917":"model_dict={\"Random Forest model {}\".format(i+1): rf_models(models[i]) for i in range(len(models))}\nmodel_dict['Linear Regression']=r2_score(y_test, y_pred_lr)\nmodel_dict['Support Vector Regression']=r2_score(y_test, y_pred_svr)\nmodel_dict['Random Forest Regression']=r2_score(y_test, y_pred_rf)\nprint(\"The Worst Model so far is:\",min(model_dict,key=model_dict.get))\nprint(\"The Best Model so far is:\",max(model_dict,key=model_dict.get))","956dba1c":"# Multiple Random Forest Models","b6559bd8":"## Model Evaluation","b0c37d7f":" ## importing dataset","1ccb3b3a":"# Medical Insurance Cost Perdiction","0f496bd5":"## Importing Libraries","a9d72c42":"## Support Vector Regression","f62bd225":"## Spliting Data into Training and Testing Set","ff085d57":"## EDA","bd0683e7":"## Linear Regression","743ad4ae":"## Random Forest Regressor","6df508f4":"## Data Preprocessing"}}