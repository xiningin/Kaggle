{"cell_type":{"5fc0b6f8":"code","e601d6f1":"code","f5062b49":"code","f22e02dd":"code","a019639f":"code","43bcd4c7":"code","8aea0b00":"code","8c65c134":"code","7bab93f9":"code","198b4fdc":"code","5a79a1e7":"code","7f920aa2":"code","6fc70482":"code","cf388084":"code","51393ac4":"code","4b70f379":"code","bd486452":"code","25e1266e":"code","7f00f28d":"code","c4b70cc7":"code","a3e6c542":"code","4ea0462f":"code","83056eb8":"code","c3ebea78":"code","8d45fb20":"code","7fb6c06b":"code","66a66f48":"code","d8ce99ae":"code","de7acc2d":"code","e8d4eabd":"code","1b8ebaed":"code","04bc1b8d":"code","eb8c4d83":"code","f963cdc2":"code","a3d6899e":"code","fac40698":"code","4cfa14dd":"code","c9ac4963":"code","e1125940":"code","63671248":"code","19e72616":"code","6cda4874":"code","4ceacfb3":"code","2d0e7689":"code","f6028830":"code","ec955c9d":"code","60587ea7":"code","3bfe478c":"code","8984ea88":"code","9212deb8":"code","bee51fe1":"code","84fb5ac1":"code","7a99256a":"code","0cc5e37f":"code","89964449":"code","45c7c56b":"code","8c4b502d":"code","70a8bd5c":"code","f2388c3f":"code","0907eede":"code","a3e269cc":"code","d6f654bb":"code","67d9351a":"code","0dd6028c":"code","cefab351":"code","02523e07":"code","62ba32dc":"code","4c6c42f0":"code","518a613f":"code","99a75427":"code","42cbc0c9":"code","4b6101d7":"code","aaa37716":"code","8f6f5289":"code","bd1596c4":"code","c1e00596":"code","c8d73a69":"code","f4fed5e9":"code","a81839c1":"code","dbd808c7":"code","9065dda9":"code","8164523e":"code","46ac0176":"code","9eacac72":"code","3e6a1fdd":"code","b02b538a":"code","b458fa6a":"code","698ea7b3":"code","f8cb7f56":"code","a952d9df":"code","232cf7e0":"code","2dc881ae":"code","4cb15b23":"code","1a20186c":"code","af03e406":"code","1c1e3002":"code","58a71bc9":"code","7330ac67":"code","e386c792":"code","ca9f2e40":"code","e082e64b":"markdown","32abde42":"markdown","090ea784":"markdown","2d2ad5a2":"markdown","3db16b06":"markdown","8d9f842e":"markdown","804a94f8":"markdown","cba2af3b":"markdown","332c62d3":"markdown","af3965ca":"markdown","5879c5b3":"markdown","7c0ac1a9":"markdown","78050c3d":"markdown","69d28d42":"markdown","faf4007a":"markdown","105e99cd":"markdown","41b21438":"markdown","1fda2376":"markdown","1ccb8283":"markdown","1ab236b4":"markdown","c258cecc":"markdown","c25e441f":"markdown","c30955ea":"markdown","9beb9393":"markdown","70567d4b":"markdown","54a366ee":"markdown","67fe2083":"markdown","32e3a716":"markdown","7d4ad886":"markdown"},"source":{"5fc0b6f8":"# loading requred packages for setting up the python Environment  \nimport numpy as np\nimport pandas as pd\nimport math # For mathematical calculations\nimport warnings       # To ignore any warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn import preprocessing  #requred packages for preprocessing","e601d6f1":"# loading requred packages for Ploting\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\nimport plotly.offline as pyoff\nimport plotly.figure_factory as ff","f5062b49":"dftrain = pd.read_csv(\"..\/input\/Train.csv\") #loading the data sets \ndftest = pd.read_csv(\"..\/input\/Test.csv\")","f22e02dd":"dftest.shape","a019639f":"dftrain.shape","43bcd4c7":"dftest.head()","8aea0b00":"dftrain.head()","8c65c134":"dftrain.describe()","7bab93f9":"dftest.describe()","198b4fdc":"dftrain.info() ","5a79a1e7":"dftest.info()","7f920aa2":"oneunitSalesValue = dftrain['TotalSalesValue']\/dftrain['Quantity']\ndftrain[\"OneUnitSalesValue\"]=oneunitSalesValue\ndftrain.head()","6fc70482":"oneunitSalesValue = dftest['TotalSalesValue']\/dftrain['Quantity']\ndftest[\"OneUnitSalesValue\"]=oneunitSalesValue\ndftest.head()","cf388084":"dftrain.groupby(['Suspicious'])[['OneUnitSalesValue']].mean().plot.bar(color = \"#b53838\")","51393ac4":"#dftrain.drop(dftrain['AvgUnitSales'],axis = 1)","4b70f379":"df1=dftrain.groupby(['SalesPersonID','ProductID']).mean()['TotalSalesValue']\ndf1 = (pd.DataFrame(df1))\ndf1 = df1.reset_index()\ndf1.columns","bd486452":"dftrain=pd.merge(dftrain,df1,on=['SalesPersonID','ProductID'],how='left')\ndftrain = dftrain.rename(index = str,columns ={'TotalSalesValue_x':'TotalSalesValue','TotalSalesValue_y':'AvgSelingPrice'})\ndftrain.head()","25e1266e":"tdf1=dftest.groupby(['SalesPersonID','ProductID']).mean()['TotalSalesValue']\ntdf1 = (pd.DataFrame(tdf1))\ntdf1 = tdf1.reset_index()\ntdf1.columns","7f00f28d":"dftest=pd.merge(dftest,tdf1,on=['SalesPersonID','ProductID'],how='left')\ndftest = dftest.rename(index = str,columns ={'TotalSalesValue_x':'TotalSalesValue','TotalSalesValue_y':'AvgSelingPrice'})\ndftest.head()","c4b70cc7":"dftrain.groupby(['Suspicious'])[['AvgSelingPrice']].mean().plot.bar(color = \"#b53838\")","a3e6c542":"df1=dftrain.groupby(['SalesPersonID','ProductID']).mean()['Quantity']\ndf1 = (pd.DataFrame(df1))\ndf1 = df1.reset_index()\ndf1.columns","4ea0462f":"dftrain=pd.merge(dftrain,df1,on=['SalesPersonID','ProductID'],how='left')\ndftrain = dftrain.rename(index = str,columns ={'TotalSalesValue_x':'TotalSalesValue','Quantity_x':'Quantity','Quantity_y':'AvgQuantity'})\n#dftrain.drop(dftrain['TotalSalesValue_y'],axis = 1)\ndftrain.head()","83056eb8":"tdf1=dftest.groupby(['SalesPersonID','ProductID']).mean()['Quantity']\ntdf1 = (pd.DataFrame(tdf1))\ntdf1 = tdf1.reset_index()\ntdf1.columns","c3ebea78":"dftest=pd.merge(dftest,tdf1,on=['SalesPersonID','ProductID'],how='left')\ndftest = dftest.rename(index = str,columns ={'TotalSalesValue_x':'TotalSalesValue','Quantity_x':'Quantity','Quantity_y':'AvgQuantity'})\n#dftrain.drop(dftrain['AvgQuantity'],axis = 1)\ndftest.head()","8d45fb20":"dftrain.groupby(['Suspicious'])[['AvgQuantity']].mean().plot.bar(color = \"#b53838\")","7fb6c06b":"AvgQuantityperguy=dftrain.groupby(['SalesPersonID']).mean()['AvgQuantity']\nAvgQuantityperguy=pd.DataFrame(AvgQuantityperguy)\n#AvgQuantityperguy.head()","66a66f48":"dftrain=pd.merge(dftrain,AvgQuantityperguy,on=['SalesPersonID'],how='left')\ndftrain=dftrain.rename(index=str, columns={\"AvgQuantity_y\": \"AvgQuantityperguy\"})\ndftrain.head()","d8ce99ae":"AvgQuantityperguy=dftest.groupby(['SalesPersonID']).mean()['AvgQuantity']\nAvgQuantityperguy=pd.DataFrame(AvgQuantityperguy)\n#AvgQuantityperguy.head()","de7acc2d":"dftest=pd.merge(dftest,AvgQuantityperguy,on=['SalesPersonID'],how='left')\ndftest=dftest.rename(index=str, columns={\"AvgQuantity_y\": \"AvgQuantityperguy\"})\n\ndftest.head()","e8d4eabd":"AvgQuantityperProduct=dftrain.groupby(['ProductID']).mean()['Quantity']\nAvgQuantityperProduct=pd.DataFrame(AvgQuantityperProduct)\n#AvgQuantityperguy.head()","1b8ebaed":"dftrain=pd.merge(dftrain,AvgQuantityperProduct,on=['ProductID'],how='left')\ndftrain=dftrain.rename(index=str, columns={\"Quantity_y\": \"AvgQuantityperProduct\"})\ndftrain.head()","04bc1b8d":"dftest=pd.merge(dftest,AvgQuantityperProduct,on=['ProductID'],how='left')\ndftest=dftest.rename(index=str, columns={\"Quantity_y\": \"AvgQuantityperProduct\"})\n\ndftest.head()","eb8c4d83":"dftrain.groupby(['Suspicious'])[['AvgQuantityperProduct']].mean().plot.bar(color = \"#b53838\")","f963cdc2":"AvgSalesValueperProduct=dftrain.groupby(['ProductID']).mean()['TotalSalesValue']\nAvgSalesValueperProduct=pd.DataFrame(AvgSalesValueperProduct)\n#AvgSalesValueperProduct.head()","a3d6899e":"dftrain=pd.merge(dftrain,AvgSalesValueperProduct,on=['ProductID'],how='left')\ndftrain=dftrain.rename(index=str, columns={\"TotalSalesValue_y\": \"AvgSalesValueperProduct\",'TotalSalesValue_x':'TotalSalesValue','Quantity_x':'Quantity','AvgQuantity_x':'AvgQuantity'})\ndftrain.head()","fac40698":"AvgSalesValueperProduct=dftest.groupby(['ProductID']).mean()['TotalSalesValue']\nAvgSalesValueperProduct=pd.DataFrame(AvgSalesValueperProduct)\n#AvgSalesValueperProduct.head()","4cfa14dd":"dftest=pd.merge(dftest,AvgSalesValueperProduct,on=['ProductID'],how='left')\ndftest=dftest.rename(index=str, columns={\"TotalSalesValue_y\": \"AvgSalesValueperProduct\",'TotalSalesValue_x':'TotalSalesValue','Quantity_x':'Quantity','AvgQuantity_x':'AvgQuantity'})\ndftest.head()","c9ac4963":"dftrain.groupby(['Suspicious'])[['AvgSalesValueperProduct']].mean().plot.bar(color = \"#b53838\")","e1125940":"AvgTransactionsSalesPrice = dftrain.groupby(['SalesPersonID'])[['TotalSalesValue']].mean()\nAvgTransactionsSalesPrice = AvgTransactionsSalesPrice.rename(columns={'TotalSalesValue': 'AvgTransactionsSalesPrice'})\ndftrain = dftrain.join(AvgTransactionsSalesPrice,on = ['SalesPersonID'])\ndftrain.head()","63671248":"AvgTransactionsSalesPrice = dftest.groupby(['SalesPersonID'])[['TotalSalesValue']].mean()\nAvgTransactionsSalesPrice = AvgTransactionsSalesPrice.rename(columns={'TotalSalesValue': 'AvgTransactionsSalesPrice'})\ndftest = dftest.join(AvgTransactionsSalesPrice,on = ['SalesPersonID'])\ndftest.head()","19e72616":"dftrain.groupby(['Suspicious'])[['AvgTransactionsSalesPrice']].mean().plot.bar(color = \"#b53838\")","6cda4874":"dftrain['RatioOfQuantitySold'] = dftrain['Quantity']\/dftrain['AvgQuantityperProduct']","4ceacfb3":"dftest['RatioOfQuantitySold'] = dftest['Quantity']\/dftest['AvgQuantityperProduct']","2d0e7689":"dftrain.groupby(['Suspicious'])[['RatioOfQuantitySold']].mean().plot.bar(color = \"#b53838\")","f6028830":"df7 = dftrain.groupby(['SalesPersonID','ProductID'])[['Quantity']].sum()\ndf7 = df7.rename(columns={'Quantity': 'TotalProductperSalesPerson'})\ndftrain = dftrain.join(df7,on=['SalesPersonID','ProductID'])\ndftrain.head()","ec955c9d":"df7 = dftest.groupby(['SalesPersonID','ProductID'])[['Quantity']].sum()\ndf7 = df7.rename(columns={'Quantity': 'TotalProductperSalesPerson'})\ndftest = dftest.join(df7,on=['SalesPersonID','ProductID'])\ndftest.head()","60587ea7":"dftrain['RatioOfQuantiy'] = dftrain['Quantity']\/dftrain['AvgQuantity']","3bfe478c":"dftest['RatioOfQuantiy'] = dftest['Quantity']\/dftest['AvgQuantity']","8984ea88":"TransactionsPerProduct = dftrain.groupby(['ProductID'])[['SalesPersonID']].count()\nTransactionsPerProduct = TransactionsPerProduct.rename(columns={'SalesPersonID': 'TransactionsPerProduct'})\ndftrain = dftrain.join(TransactionsPerProduct,on=['ProductID'])","9212deb8":"TransactionsPerProduct = dftest.groupby(['ProductID'])[['SalesPersonID']].count()\nTransactionsPerProduct = TransactionsPerProduct.rename(columns={'SalesPersonID': 'TransactionsPerProduct'})\ndftest = dftest.join(TransactionsPerProduct,on=['ProductID'])","bee51fe1":"TransactionsPerPersom = dftrain.groupby(['SalesPersonID'])[['ProductID']].count()\nTransactionsPerPersom = TransactionsPerPersom.rename(columns={'ProductID': 'TransactionsPerPerson'})\ndftrain = dftrain.join(TransactionsPerPersom,on=['SalesPersonID'])","84fb5ac1":"TransactionsPerPersom = dftest.groupby(['SalesPersonID'])[['ProductID']].count()\nTransactionsPerPersom = TransactionsPerPersom.rename(columns={'ProductID': 'TransactionsPerPerson'})\ndftest = dftest.join(TransactionsPerPersom,on=['SalesPersonID'])","7a99256a":"dftrain.groupby(['Suspicious'])[['TransactionsPerProduct']].mean().plot.bar(color = \"#b53838\")","0cc5e37f":"TotalValueOfProductPerPerson = dftrain.groupby(['SalesPersonID','ProductID'])[['TotalSalesValue']].sum()\nTotalValueOfProductPerPerson=TotalValueOfProductPerPerson.rename(columns={'TotalSalesValue': 'TotalValueOfProductPerPerson'})\ndftrain = dftrain.join(TotalValueOfProductPerPerson,on=['SalesPersonID','ProductID'])","89964449":"TotalValueOfProductPerPerson = dftest.groupby(['SalesPersonID','ProductID'])[['TotalSalesValue']].sum()\nTotalValueOfProductPerPerson=TotalValueOfProductPerPerson.rename(columns={'TotalSalesValue': 'TotalValueOfProductPerPerson'})\ndftest = dftest.join(TotalValueOfProductPerPerson,on=['SalesPersonID','ProductID'])","45c7c56b":"AvgPricePerProduct = dftrain.groupby(['ProductID'])[['OneUnitSalesValue']].mean()\nAvgPricePerProduct = AvgPricePerProduct.rename(columns={'OneUnitSalesValue': 'AvgPricePerProduct'})\ndftrain = dftrain.join(AvgPricePerProduct,on ='ProductID')\ndftrain.head()","8c4b502d":"AvgPricePerProduct = dftest.groupby(['ProductID'])[['OneUnitSalesValue']].mean()\nAvgPricePerProduct = AvgPricePerProduct.rename(columns={'OneUnitSalesValue': 'AvgPricePerProduct'})\ndftest = dftest.join(AvgPricePerProduct,on ='ProductID')","70a8bd5c":"AvgSellingQuantitySalesPerson = dftrain.groupby(['SalesPersonID'])[['Quantity']].mean()\nAvgSellingQuantitySalesPerson = AvgSellingQuantitySalesPerson.rename(columns={'Quantity': 'AvgSellingQuantitySalesPerson'})\ndftrain = dftrain.join(AvgSellingQuantitySalesPerson,on=['SalesPersonID'])","f2388c3f":"AvgSellingQuantitySalesPerson = dftest.groupby(['SalesPersonID'])[['Quantity']].mean()\nAvgSellingQuantitySalesPerson = AvgSellingQuantitySalesPerson.rename(columns={'Quantity': 'AvgSellingQuantitySalesPerson'})\ndftest = dftest.join(AvgSellingQuantitySalesPerson,on=['SalesPersonID'])","0907eede":"dftrain.groupby(['Suspicious'])[['AvgPricePerProduct']].mean().plot.bar(color = \"#b53838\")","a3e269cc":"#just having a copy \ndata = dftrain ","d6f654bb":"# replacing the vaule in the traget attribute\nSuspicious_dict = {'Yes':1, 'No':2, 'indeterminate':3}\n\ndata['Suspicious'] = data['Suspicious'].replace(Suspicious_dict, regex=True)","67d9351a":"#just having a copy\ntestdata = dftest","0dd6028c":"testdata.shape","cefab351":"data = data.drop(['ReportID'],axis=1)\ndata=data.drop(axis=1,columns=['ProductID','SalesPersonID'])","02523e07":"testdata = testdata.drop(['ReportID'],axis=1)\ntestdata=testdata.drop(axis=1,columns=['ProductID','SalesPersonID'])","62ba32dc":"data.info()","4c6c42f0":"testdata.info()","518a613f":"data['OneUnitSalesValue']=data['OneUnitSalesValue'].astype('int64')\ndata['AvgSelingPrice']=data['AvgSelingPrice'].astype('int64')\ndata['AvgQuantity']=data['AvgQuantity'].astype('int64')\ndata['RatioOfQuantiy']=data['RatioOfQuantiy'].astype('int64')\ndata['TotalProductperSalesPerson']=data['TotalProductperSalesPerson'].astype('int64')\ndata['AvgQuantityperguy']=data['AvgQuantityperguy'].astype('int64')\ndata['AvgQuantityperProduct']=data['AvgQuantityperProduct'].astype('int64')\ndata['AvgSalesValueperProduct']=data['AvgSalesValueperProduct'].astype('int64')\ndata['RatioOfQuantitySold']=data['RatioOfQuantitySold'].astype('int64')\ndata['TransactionsPerProduct']=data['TransactionsPerProduct'].astype('int64')\ndata['TransactionsPerPerson']=data['TransactionsPerPerson'].astype('int64')\ndata['TotalValueOfProductPerPerson']=data['TotalValueOfProductPerPerson'].astype('int64')\ndata['AvgPricePerProduct']=data['AvgPricePerProduct'].astype('int64')\ndata['AvgSellingQuantitySalesPerson']=data['AvgSellingQuantitySalesPerson'].astype('int64')","99a75427":"testdata['OneUnitSalesValue']=testdata['OneUnitSalesValue'].astype('int64')\ntestdata['AvgSelingPrice']=testdata['AvgSelingPrice'].astype('int64')\ntestdata['AvgQuantity']=testdata['AvgQuantity'].astype('int64')\ntestdata['RatioOfQuantiy']=testdata['RatioOfQuantiy'].astype('int64')\ntestdata['AvgQuantityperguy']=testdata['AvgQuantityperguy'].astype('int64')\ntestdata['AvgQuantityperProduct']=testdata['AvgQuantityperProduct'].astype('int64')\ntestdata['AvgSalesValueperProduct']=testdata['AvgSalesValueperProduct'].astype('int64')\ntestdata['RatioOfQuantitySold']=testdata['RatioOfQuantitySold'].astype('int64')\ntestdata['TransactionsPerProduct']=testdata['TransactionsPerProduct'].astype('int64')\ntestdata['TransactionsPerPerson']=testdata['TransactionsPerPerson'].astype('int64')\ntestdata['TotalValueOfProductPerPerson']=testdata['TotalValueOfProductPerPerson'].astype('int64')\ntestdata['AvgPricePerProduct']=testdata['AvgPricePerProduct'].astype('int64')\ntestdata['AvgSellingQuantitySalesPerson']=testdata['AvgSellingQuantitySalesPerson'].astype('int64')","42cbc0c9":"data.columns","4b6101d7":"testdata.columns","aaa37716":"# loading the attributes to a feat_columns\nfeat_col = ['Quantity', 'TotalSalesValue',\n       'OneUnitSalesValue','AvgSelingPrice','RatioOfQuantitySold','AvgQuantity', 'AvgQuantityperguy', 'AvgQuantityperProduct',\n       'AvgSalesValueperProduct','AvgTransactionsSalesPrice','TotalProductperSalesPerson','RatioOfQuantiy', 'TransactionsPerProduct','TransactionsPerPerson','TotalValueOfProductPerPerson',\n           'AvgPricePerProduct','AvgSellingQuantitySalesPerson']","8f6f5289":"# numbers of rows and columns for the given \ndata.shape","bd1596c4":"testdata.shape","c1e00596":"data[feat_col].shape","c8d73a69":"from sklearn.model_selection import train_test_split #loading the requred packages for the split \nX=data[feat_col]\ny=data['Suspicious']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0,stratify=y)","f4fed5e9":"# Standardizing the data\nfrom sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\nX_train = std.fit_transform(X_train)\nX_test = std.fit_transform(X_test)","a81839c1":"# numbers of rows and columns for the given \nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","dbd808c7":"from sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import ShuffleSplit","9065dda9":"# loading the package for the KNNClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train) #fitting the model for the given data set(train set) this where the model learns ","8164523e":"#from the learnt model we are predicting for the unknowns\nknn_train_predictions_train=knn.predict(X_train)\nknn_test_predictions_test=knn.predict(X_test)","46ac0176":"# from sklearn.metrics with classification_report we can validate the model by recall in this multiclass classification\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_train, knn_train_predictions_train))\nprint(classification_report(y_test, knn_test_predictions_test))","9eacac72":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 10)):\n    \"\"\"Generate a simple plot of the test and training learning curve\"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","3e6a1fdd":"plot_learning_curve(knn, title=None,X=X_train, y=y_train)","b02b538a":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 400,max_depth = 5,criterion = 'entropy',class_weight = 'balanced',max_features = 3,random_state = 123)\nRandomForestClassifier(random_state= 42)","b458fa6a":"rf.fit(X_train,y_train)#fitting the model for the given data set(train set) this where the model learns ","698ea7b3":"#from the learnt model we are predicting for the unknowns \nrf_train_predictions_train=rf.predict(X_train)\nrf_test_predictions_test=rf.predict(X_test)","f8cb7f56":"# from sklearn metrics we create the confusion matrix to validate the given model\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test,rf_test_predictions_test)\ncnf_matrix","a952d9df":"print(\"Accuracy:\",metrics.accuracy_score(y_train, rf_train_predictions_train))\nprint(\"Precision:\",metrics.precision_score(y_train, rf_train_predictions_train,average='macro'))\nprint(\"Recall:\",metrics.recall_score(y_train, rf_train_predictions_train,average='macro'))\nprint(\"F1 score:\",metrics.f1_score(y_train,rf_train_predictions_train,average='macro'))","232cf7e0":"print(\"Accuracy:\",metrics.accuracy_score(y_test, rf_test_predictions_test))\nprint(\"Precision:\",metrics.precision_score(y_test, rf_test_predictions_test,average='macro'))\nprint(\"Recall:\",metrics.recall_score(y_test, rf_test_predictions_test,average='macro'))\nprint(\"F1 score:\",metrics.f1_score(y_test,rf_test_predictions_test,average='macro'))","2dc881ae":"# from sklearn.metrics with classification_report we can validate the model by recall in this multiclass classification\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, rf_test_predictions_test))\nprint(classification_report(y_train, rf_train_predictions_train))","4cb15b23":"# plotting the attribute contributing more form the given model(Random Forest)\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfeatures = feat_col\nimportances = rf.feature_importances_\nindices = np.argsort(importances)\n\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='y', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","1a20186c":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 10)):\n    \"\"\"Generate a simple plot of the test and training learning curve\"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","af03e406":"plot_learning_curve(rf, title=None,X=X_train, y=y_train)","1c1e3002":"from sklearn.tree import DecisionTreeClassifier, export_graphviz,DecisionTreeRegressor\nestimator = DecisionTreeClassifier(max_depth=5,random_state=123)\nestimator.fit(X_train, y_train) #fitting the model for the given data set(train set) this where the model learns ","58a71bc9":"#from the learnt model we are predicting for the unknowns \nestimator_train_predictions_train=estimator.predict(X_train)\nestimator_test_predictions_test=estimator.predict(X_test)","7330ac67":"# from sklearn.metrics with classification_report we can validate the model by recall in this multiclass classification\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, estimator_test_predictions_test))\nprint(classification_report(y_train, estimator_train_predictions_train))","e386c792":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 10)):\n    \"\"\"Generate a simple plot of the test and training learning curve\"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","ca9f2e40":"plot_learning_curve(estimator, title=None,X=X_train, y=y_train)","e082e64b":"### RatioOfQuantiy:\nQuantity by Average Quantity sold for a given product gives the ratio of the Quantity sold","32abde42":"## DecisionTreeClassifier","090ea784":"### TransactionsPerProduct\nNumber of Transactions per product per SalesPerson","2d2ad5a2":"### AvgSalesValueperProduct:\nAverage TotalSalesValue sold for a given ProductID","3db16b06":"### Plotting Learning Curves","8d9f842e":"## Birds eye view ","804a94f8":"### TotalProductperSalesPerson\nAverage TotalSalesValue sold for a given SalesPersonID","cba2af3b":"### AvgSelingPrice :\nAverage selling price for a given product, I got iy by taking the average of TotalSalesValue with respect by product ID","332c62d3":"### AvgPricePerProduct:\nAverage UnitSalesValue sold for a given ProductID","af3965ca":"### AvgQuantity:\nAverage Quantity sold for a given product","5879c5b3":"# Model building \n## Knn","7c0ac1a9":"### conveting attribute to integers ","78050c3d":"# Preprocessing \n","69d28d42":"### Lets see the what insites does this attribute give","faf4007a":"### Plotting Learning Curves","105e99cd":"### droping some attributes (Id's)","41b21438":"## Creating more attributes  \nIf new attributes can or help define the variables in the target attributes and the model will \nbe able to understand difference between the Yes No and indeterminate and predict better","1fda2376":"## RandomForestClassifier gave best results compared to the other models that I tryed\nlooking at the learing rate RandomForestClassifier is the closet to the test scores with given a better recall than the other models ","1ccb8283":"### oneunitSalesValue:\nPrice for a unit value ","1ab236b4":"## RandomForestClassifier","c258cecc":"## Split to Train and Validation","c25e441f":"### Lets see the what insites does this attribute give","c30955ea":"### TotalValueOfProductPerPerson:\nTotal value of product sold per SalesPerson","9beb9393":"### Lets see the what insites does this attribute give","70567d4b":"### AvgTransactionsSalesPrice:\nAverage TotalSalesValue sold for a given SalesPersonID","54a366ee":"### looking at where its contributing more ","67fe2083":"### AvgSellingQuantitySalesPerson:\nAverage Quantity sold for a given SalesPerson","32e3a716":"### AvgQuantityperguy:\nAverage Quantity sold for a given SalesPerson","7d4ad886":"### AvgQuantityperProduct:\nAverage Quantity sold for a given ProductID"}}