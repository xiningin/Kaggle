{"cell_type":{"a1914248":"code","9217a7a5":"code","7cb7faa4":"code","cd0ed88f":"code","6cd2be4a":"code","4da8fc76":"code","c095ef5e":"code","5d0185df":"code","a0978e6f":"code","46148b76":"code","51adf827":"code","7b6269ef":"code","27c5824e":"code","9539ea67":"code","bb81eb4e":"code","0652a36c":"code","56d6d8c8":"markdown","935f997f":"markdown","7c29fa5c":"markdown","e01f18c9":"markdown","33e3ee45":"markdown","b5ba22a1":"markdown","1435f128":"markdown","d5f08f8e":"markdown","f67db915":"markdown","a3cc882c":"markdown","29486aaf":"markdown","f7cc0844":"markdown"},"source":{"a1914248":"!pip install -q efficientnet_pytorch","9217a7a5":"import numpy as np \nimport pandas as pd \nfrom pathlib import Path\n\nfrom fastai.imports import *\nfrom fastai import *\nfrom fastai.vision import *\n\nfrom tqdm import tqdm_notebook as tqdm\n\nbase_path = Path('\/kaggle\/input\/plant-pathology-2020-fgvc7\/')","7cb7faa4":"def get_tag(row):\n    if row.healthy:\n        return \"healthy\"\n    if row.multiple_diseases:\n        return \"multiple_diseases\"\n    if row.rust:\n        return \"rust\"\n    if row.scab:\n        return \"scab\"","cd0ed88f":"def transform_data(train_labels):\n    train_labels.image_id = [image_id+'.jpg' for image_id in train_labels.image_id]\n    train_labels['tag'] = [get_tag(train_labels.iloc[idx]) for idx in train_labels.index]\n    train_labels.drop(columns=['healthy', 'multiple_diseases', 'rust', 'scab'], inplace=True)","6cd2be4a":"train_labels = pd.read_csv(base_path\/\"train.csv\")\npath = base_path\/\"images\"","4da8fc76":"transform_data(train_labels)\ntrain_labels = train_labels.set_index(\"image_id\")","c095ef5e":"train_labels.head()","5d0185df":"tfms = get_transforms(max_rotate=30.,flip_vert=True) # all default except for fliping images vertically since these images of leaves, they have no top or bottom","a0978e6f":"src = (ImageList.from_folder(path)\n      .filter_by_func(lambda fname: \"Train\" in fname.name) \n      .split_by_rand_pct()\n      .label_from_func(lambda o: train_labels.loc[o.name]['tag']))","46148b76":"def get_data(size, bs):\n    data = (src.transform(tfms, size=size)\n       .databunch(bs=bs) \n       .normalize())\n    return data","51adf827":"from efficientnet_pytorch import EfficientNet\n\ndef getModelEff(model_name = 'efficientnet-b4'):\n    model = EfficientNet.from_pretrained(model_name)\n    if model_name == 'efficientnet-b4':\n        model._fc = nn.Linear(1792,4)\n    elif model_name == 'efficientnet-b3':\n        model._fc = nn.Linear(1536,4)\n    return model","7b6269ef":"archs = {\n    \"resnet50\": {\n        \"model\": models.resnet50,\n        \"epochs_1\": 10,\n        \"epochs_2\": 10,\n        \"epochs_3\": 10,\n        \"epochs_4\": 10,\n        \"max_lr_s1\": 0.003,\n        \"max_lr_s2\": slice(1e-5, 3e-4),\n        \"max_lr_s1_448\": 0.003,\n        \"max_lr_s2_448\":slice(1e-5, 3e-4)\n    }, \n    \"dense121\": {\n        \"model\": models.densenet121,\n        \"epochs_1\": 6,\n        \"epochs_2\": 5,\n        \"epochs_3\": 6,\n        \"epochs_4\": 3,\n        \"max_lr_s1\": 0.003,\n        \"max_lr_s2\": slice(1e-5, 3e-4),\n        \"max_lr_s1_448\": 0.003,\n        \"max_lr_s2_448\":slice(1e-5, 1e-4)\n    }, \n    \"dense161\": { # it really underfits, so i need to try more epochs\/higher lr\n        \"model\": models.densenet161,\n        \"epochs_1\": 8,\n        \"epochs_2\": 5,\n        \"epochs_3\": 7,\n        \"epochs_4\": 4,\n        \"max_lr_s1\": 1e-3,\n        \"max_lr_s2\": slice(1e-5, 1e-4),\n        \"max_lr_s1_448\": 0.003,\n        \"max_lr_s2_448\":slice(1e-5, 3e-4)\n    },  \n    \"eff-b3\": {\n        \"model\": getModelEff('efficientnet-b3'),\n        \"epochs_1\": 7,\n        \"epochs_2\": 3,\n        \"epochs_3\": 5,\n        \"epochs_4\": 2,\n        \"max_lr_s1\": 1e-3,\n        \"max_lr_s2\": slice(1e-5, 1e-4),\n        \"max_lr_s1_448\": 1e-3,\n        \"max_lr_s2_448\":slice(1e-5, 3e-4)\n    },\n    \"eff-b4\": {\n        \"model\": getModelEff('efficientnet-b4'),\n        \"epochs_1\": 10,\n        \"epochs_2\": 5,\n        \"epochs_3\": 8,\n        \"epochs_4\": 5,\n        \"max_lr_s1\": 3e-3,\n        \"max_lr_s2\": slice(1e-5, 3e-4),\n        \"max_lr_s1_448\": 1e-3,\n        \"max_lr_s2_448\":slice(1e-5, 1e-4)\n    }\n}","27c5824e":"archs = {\n    \"resnet152\": {\n        \"model_name\": \"resnet152\",\n        \"model\": models.resnet152,\n        \"stages\": [{\n            \"name_s1\": \"stage-1_lr\",\n            \"epochs_s1\": 10,\n            \"max_lr_s1\": 1e-3,\n            \"name_s2\": \"stage-2_lr\",\n            \"epochs_s2\": 10,\n            \"max_lr_s2\": slice(1e-5, 1e-4),\n            \"size\": 224,\n            \"bs\": 20\n        },\n        {\n            \"name_s1\": \"stage-1_mr\",\n            \"epochs_s1\": 10,\n            \"max_lr_s1\": 1e-3,\n            \"name_s2\": \"stage-2_mr\",\n            \"epochs_s2\": 10,\n            \"max_lr_s2\": slice(1e-5, 1e-4),\n            \"size\": 448,\n            \"bs\": 10\n        },\n        {\n            \"name_s1\": \"stage-1_hr\",\n            \"epochs_s1\": 10,\n            \"max_lr_s1\": 1e-3,\n            \"name_s2\": \"stage-2_hr\",\n            \"epochs_s2\": 10,\n            \"max_lr_s2\": slice(1e-5, 1e-4),\n            \"size\": 896,\n            \"bs\": 5\n        }]\n    }\n}","9539ea67":"import gc\n\ndef train_model(arch): \n    model_name = arch[\"model_name\"]\n    \n    print(arch)\n    for i, stage in enumerate(arch[\"stages\"]):\n        print(f\"traing {model_name} on {stage['name_s1']}\")\n        data = get_data(size=stage[\"size\"], bs=stage[\"bs\"])\n        if model_name.startswith(\"eff\"):\n            learner = Learner(data, arch[\"model\"], metrics=error_rate).to_fp16() # if we create learner from pytorch model we can't use cnn_learner\n            learner.split( lambda m: (arch._conv_head,) ) # we need to tell fastai where to split model to use different lr (from slice)\n        else:\n            learner = cnn_learner(data, arch[\"model\"], metrics=error_rate).to_fp16()\n        learner.model_dir = \"\/kaggle\/working\"\n        if i != 0:\n            learner.load(f\"{arch['stages'][i-1]['name_s2']}_{model_name}\")\n                                             \n        print(f\"lr for {model_name} {stage['name_s1']}\")\n        learner.lr_find()\n        learner.recorder.plot(suggestion=True)\n\n        learner.fit_one_cycle(stage['epochs_s1'], max_lr=stage['max_lr_s1'])\n        learner.save(f\"{stage['name_s1']}_{model_name}\")\n                                             \n        print(f\"lr for {model_name} {stage['name_s2']}\")\n        learner.unfreeze()\n\n        learner.lr_find()\n        learner.recorder.plot(suggestion=True)\n\n        learner.fit_one_cycle(stage['epochs_s2'], max_lr=stage['max_lr_s2'])\n        learner.save(f\"{stage['name_s2']}_{model_name}\")\n        del data\n        gc.collect()\n        if i == len(arch[\"stages\"])-1:\n                return learner\n        learner.destroy()\n        torch.cuda.empty_cache()","bb81eb4e":"def create_results():\n    test_images = ImageList.from_folder(base_path\/\"images\")\n    test_images.filter_by_func(lambda x: x.name.startswith(\"Test\"))\n    \n    for model_name in archs:\n        arch = archs[model_name]\n        learner = train_model(arch)\n        \n        test_df = pd.read_csv(base_path\/\"test.csv\")\n        test_df['healthy'] = [0.0 for _ in test_df.index]\n        test_df['multiple_diseases'] = [0.0 for _ in test_df.index]\n        test_df['rust'] = [0.0 for _ in test_df.index]\n        test_df['scab'] = [0.0 for _ in test_df.index]\n        test_df = test_df.set_index('image_id')\n        \n        for item in tqdm(test_images.items):\n            name = item.name[:-4]\n            img = open_image(item)\n            preds = learner.predict(img)[2]\n\n            test_df.loc[name]['healthy'] = preds[0]\n            test_df.loc[name]['multiple_diseases'] = preds[1]\n            test_df.loc[name]['rust'] = preds[2]\n            test_df.loc[name]['scab'] = preds[3]\n            \n        test_df.to_csv(f\"\/kaggle\/working\/{model_name}_result.csv\")\n        \n        learner.destroy()\n        torch.cuda.empty_cache()","0652a36c":"create_results()","56d6d8c8":"I used progressive resizing and transfer-learning (ofc). My learning pipeline is very minimalistic: 1) create two databunches (with default transformations, except for flip_vert) one of size 224 and second of size 448, 2) train model on 224, then unfreeze and train a little bit more, then freeze and train on 448 and then unfreeze and fine tune. So the interesting part of my work was experementing with hyperparametrs, so here are my results\n\nHere i would just list training times on my best attempts\n\n* resnet50 public score 0.969 training time on gpu 3 hours \n* efficientnet-b3 public score 0.964 training time on gpu 1.18 hours (71 minutes)\n* densenet121 public score 0.958 training time on gpu 1.43 hours (86 minutes)\n* efficientnet-b4 public score 0.955 training time on gpu 1.93 hours (115 minutes)\n\nMy best ensemble solution got 0.970\n","935f997f":"I trained 4 models (densenet121, resnet50, efficientnet-b3, efficientnet-b4) and then combined results. Also i used half-precision floating-point format (learner.to_fp16), more info here https:\/\/www.quora.com\/What-is-the-difference-between-FP16-and-FP32-when-doing-deep-learning","7c29fa5c":"# Get tags from train.csv","e01f18c9":"# Training","33e3ee45":"I want first to train my models on small resolution images and then using transfer learning fine-tune them on high resolution images. This approach speeds up learning dramatically and reduces amount of data needet for training. ","b5ba22a1":" # Overview ","1435f128":"# Results","d5f08f8e":"# Create DataBunches ","f67db915":"Next two cells actually needs to become single function that takes size and bs as arguments. Since for different models we need different batchsizes","a3cc882c":"Here are hyperparamentrs that i found out work best, but you should read comments ","29486aaf":"create_results will train model with specified hyper-parametrs and save predictions in csv files, which you can combine how you like","f7cc0844":"# Ways to imporve my result \nCouple of ideas that you can implement:\n1. Create third databunch of size 768 and fine tune models on it\n2. densenet161 is really underfitted, so you might train it a few extra epochs and\/or increase lr\n3. Adding one more split in efficientnets will help them train better"}}