{"cell_type":{"4edf5f77":"code","cc2c7a64":"code","a2ce1b7b":"code","50158169":"code","27ab191c":"code","f5af6947":"code","6596cad0":"code","118130bc":"code","4813d142":"code","4f2aadca":"code","458399dc":"code","4a6961a5":"code","2b39e79f":"code","a2bb86b6":"code","78039c06":"code","7d6dd5fb":"code","80b20e15":"markdown","326a6f43":"markdown","4ad63cf4":"markdown","36d4b450":"markdown","f1a8fce3":"markdown","b8bc2dc3":"markdown","7364901a":"markdown","b94d59e7":"markdown","502501ac":"markdown","c611022d":"markdown","f22c6193":"markdown","1ecb419a":"markdown","00aecdf4":"markdown","37b7386c":"markdown","2d2adc38":"markdown"},"source":{"4edf5f77":"import numpy as np \nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,20)\npd.options.display.max_rows = None","cc2c7a64":"import my_utils as my\ndir(my)","a2ce1b7b":"train_raw = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_raw = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(train_raw.shape, test_raw.shape)","50158169":"X = train_raw.drop(['SalePrice','Id'], axis=1)\ny = train_raw['SalePrice']\nX_test = test_raw.drop('Id', axis=1)","27ab191c":"num_cols, obj_cols = my.col_types(X)\nprint('Numeric columns:', list(num_cols))\nprint('-  -  -')\nprint('Object columns:',obj_cols)","f5af6947":"Merged = pd.concat([X,X_test])\nprint(Merged.shape)","6596cad0":"for i in Merged[num_cols]:\n    Merged[i] = (Merged[i] - Merged[i].min()) \/ (Merged[i].max() - Merged[i].min())","118130bc":"for i in Merged[num_cols]:\n    Merged[i] = Merged[i].fillna(value = Merged[i].mean())\nMerged[num_cols].isna().sum().sum()","4813d142":"for i in Merged[obj_cols]:\n    Merged[i] = Merged[i].fillna(value = 'missed')\nMerged[obj_cols].isna().sum().sum()","4f2aadca":"from sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder(sparse = False)\nfitted = encoder.fit(Merged[obj_cols])\nencoded = pd.DataFrame(fitted.transform(Merged[obj_cols]))\nMerged = Merged.drop(obj_cols, axis=1)\nMerged = Merged.join(encoded)","458399dc":"X = Merged.iloc[:len(train_raw),:]\nX_test = Merged.iloc[len(train_raw):,:]\nprint(train_raw.shape, test_raw.shape)\nprint(X.shape, X_test.shape)","4a6961a5":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=17)\nprint(X_train.shape, y_train.shape, X_valid.shape, y_valid.shape)","2b39e79f":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.callbacks import EarlyStopping\ntf.random.set_seed(17)\n\nmodel = keras.Sequential([\n                        layers.Dense(512, activation = 'relu', input_shape = [X_train.shape[1]]),\n                        layers.Dropout(0.3),\n                        layers.Dense(512, activation = 'relu'),\n                        layers.Dropout(0.3),\n                        layers.Dense(512, activation = 'relu'),\n                        layers.Dropout(0.3),\n                        layers.Dense(512, activation = 'relu'),\n                        layers.Dense(1)\n                        ])\nmodel.compile(\n            optimizer='adam',\n            loss='mean_squared_logarithmic_error',\n            metrics=['mean_squared_logarithmic_error'],\n            )\n\nearly_stopping = keras.callbacks.EarlyStopping(\n    patience=5,\n    min_delta=0.01,\n    restore_best_weights=True,\n)\nhistory = model.fit(\n    X_train, y_train,\n    batch_size = 32,\n    epochs=20,\n    validation_data=(X_valid, y_valid),\n    callbacks=[early_stopping],\n)","a2bb86b6":"plt.rcParams[\"figure.figsize\"] = (8,8)\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"MSLE\")","78039c06":"pred_nn = pd.DataFrame(model.predict(X_test))\npred_nn.head()","7d6dd5fb":"sub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsub['SalePrice'] = pred_nn[0]\nsub.to_csv('submission_nn_example.csv', index = False)","80b20e15":"Configuring NN","326a6f43":"Fill NaN by mean for numerical columns","4ad63cf4":"By this function I get lists of object and numerical features","36d4b450":"Minmax scaling for numeric columns","f1a8fce3":"I use my utils script, you can find it [here](https:\/\/www.kaggle.com\/paveltrusov\/my-utils)","b8bc2dc3":"Split train train set for train \/ validation","7364901a":"Fill NaN with 'missed' text for object columns","b94d59e7":"#### Title\nIn this exercise I'm going to play with regression problem using simple neural network and keras.<br>\nI was not expected perfect result due to very small dataset size ... And finally I got what I expected ))<br>","502501ac":"In my case I got RMSLE **0.41864** after submission, that is very bad... actually as it was expected...<br>\nIn another notebook I have tried to use data augmentation and got better score<br>\nPlease note: results may vary from run to run ","c611022d":"Check metrics","f22c6193":"Then I merge train and split sata sets before scaling and encoding\nIn 'real life' it is not good as it creates leakage, but in the competition I want to use all oppportunities","1ecb419a":"Generate predictions","00aecdf4":"Generate and export submissions","37b7386c":"Encoding with OneHotEncoder for object columns","2d2adc38":"Split back merged set for train and test"}}