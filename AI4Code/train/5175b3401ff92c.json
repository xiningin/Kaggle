{"cell_type":{"8076cfbc":"code","f0c4a386":"code","54e70995":"code","e4fab8ad":"code","f158c7c4":"code","fe714690":"code","601b7465":"code","b76263c8":"code","eff62eea":"code","2395a083":"code","a4b3dc45":"markdown"},"source":{"8076cfbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0c4a386":"import pandas as pd\n\nx_train = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/X_train.csv')\nx_test = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/X_test.csv')\ny_train = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/y_train.csv')\n\nprint(x_train.shape, y_train.shape, x_test.shape)\nx_train.head()","54e70995":"for col in x_train.select_dtypes(include=object).columns :\n    target = x_train[col]\n    print('\\n#####################')\n    print('col_name:', col)\n    print('unique:', target.nunique())\n    print(target.value_counts())\n    \n    \nprint(x_train.info())\nprint(x_train.describe())\ny_train.head()","e4fab8ad":"# drop ID \ud53c\ucc98\n# Customer_care_calls \ud53c\ucc98\uc758 $\ud45c\uc2dc \uc0ad\uc81c \ubc0f \ud615\ubcc0\ud658 (object > int)\n# x_train_org = x_train.copy()\n# x_train_org.head()\ndef preprocess_data(df) :\n    df = df.drop('ID', axis=1) # drop ID\n    df['Customer_care_calls'] = df['Customer_care_calls'].map(lambda x : x.replace('$', '')).astype('int64')\n    df = pd.get_dummies(df)\n    return df\n\n\ndata = preprocess_data(x_train)\nlabel = y_train['Reached.on.Time_Y.N']\nprint(data.info())\nprint(data.describe())\ndata.head()","f158c7c4":"from sklearn.model_selection import train_test_split\nx_train_sp, x_valid_sp, y_train_sp, y_valid_sp = \\\n            train_test_split(data, label, test_size=0.3, stratify=label, random_state=123)\n\nprint(x_train_sp.shape, y_train_sp.shape, x_valid_sp.shape, y_valid_sp.shape)","fe714690":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(random_state=123)\nrf.fit(x_train_sp, y_train_sp)\npred = rf.predict(x_valid_sp)\npred_proba = rf.predict_proba(x_valid_sp)[:, 1]\nprint(pred_proba)","601b7465":"from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix\n\ndef get_score(y_test, predict=None, predict_proba=None) :\n    print('Confusion Matrix\\n')\n    print(confusion_matrix(y_test, predict))\n    print('\\n\\nAccuracy:', accuracy_score(y_test, predict), \\\n         '\\nPrecision:', precision_score(y_test, predict), \\\n         '\\nRecall:', recall_score(y_test, predict), \\\n         '\\nF1 :', f1_score(y_test, predict), \\\n          '\\nAUC:', roc_auc_score(y_test, predict_proba))\n    \nget_score(y_valid_sp, pred, pred_proba)","b76263c8":"x_id = x_test['ID']\nx_data = preprocess_data(x_test)\npred_proba = rf.predict_proba(x_data)[:, 1]","eff62eea":"TEST_NUM = '1234.csv'\nsub = pd.DataFrame({'ID': x_id, 'Reached.on.Time_Y.N': pred_proba})\nsub.to_csv(TEST_NUM, index=False)\nsub.head()","2395a083":"y_test = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv')\ny_test.head()\nprint('test roc_auc:', roc_auc_score(y_test.iloc[:, 1], sub.iloc[:, 1]))","a4b3dc45":"### Check test label AUC score"}}