{"cell_type":{"e35b7f63":"code","efe95c46":"code","eb4486d4":"code","04ad6f87":"code","e0a53cfc":"code","432bb999":"code","7f635bb0":"code","b2f19dae":"code","d8f21727":"code","3c0f2ea0":"code","83f985f8":"code","a3754ff3":"code","f1ec9dfe":"code","22f0c5a2":"code","7f0fe974":"code","05f25170":"code","3a52d11b":"code","daf26233":"code","a9094fc4":"code","dde5a640":"code","4e9a5a11":"code","168f785e":"code","2131c317":"code","19a4b331":"code","66179924":"code","d7ec1975":"code","46a69f7a":"code","537b4118":"code","c071d022":"code","9371da84":"code","d3ebe1b2":"code","2bc0bcef":"code","822b7372":"code","e71d3008":"code","85ee3ce2":"code","f54c1240":"code","b3efd512":"code","62df9158":"code","05898ed4":"markdown","4dbfe3a2":"markdown","90579140":"markdown","462e9f7c":"markdown","28d71996":"markdown","90783470":"markdown","1f8e56f5":"markdown","09ca0462":"markdown","ed589375":"markdown","992d35a5":"markdown","111ccbe3":"markdown"},"source":{"e35b7f63":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline","efe95c46":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter","eb4486d4":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","04ad6f87":"def plot_roc_curve(est,X_test,y_test) :\n    probas = est.predict_proba(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    plt.figure(figsize=(8,8))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\n    plt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\n    plt.xlim([-0.05,1.2])\n    plt.ylim([-0.05,1.2])\n    plt.ylabel('Taux de vrais positifs')\n    plt.xlabel('Taux de faux positifs')\n    plt.show","e0a53cfc":"df = pd.read_csv('..\/input\/fashion-mnist\/fashion-mnist_train.csv')","432bb999":"df.columns","7f635bb0":"df.head()","b2f19dae":"labels = [\"T-shirt\/top\",\"Trouser\",\"Pullover\",\"Dress\",\"Coat\",\"Sandal\",\"Shirt\",\n          \"Sneaker\",\"Bag\",\"Ankle boot\"]","d8f21727":"print(labels[df.label[0]])","3c0f2ea0":"print(df.label[1])","83f985f8":"y = df['label']","a3754ff3":"y","f1ec9dfe":"X = df.drop(['label'], axis=1)","22f0c5a2":"X","7f0fe974":"X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state=1)","05f25170":"X1 = np.array(X)","3a52d11b":"print(X1[0])","daf26233":"len(X1[0])","a9094fc4":"image = X1[0].reshape(28,28)\nprint(image)","dde5a640":"plt.imshow(image)","4e9a5a11":"plt.imshow(image, cmap=\"gray_r\")\nplt.axis('off')\nplt.title(y[0])","168f785e":"n_samples = len(df.index)\nimages = X1.reshape(n_samples,28,28)","2131c317":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(y[i])","19a4b331":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","66179924":"plot_learning_curve(rf, X, y)","d7ec1975":"print(classification_report(y_test, y_rf))","46a69f7a":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","537b4118":"import xgboost as XGB\nxgb  = XGB.XGBClassifier()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\ncm = confusion_matrix(y_test, y_xgb)\nprint(cm)\nprint(classification_report(y_test, y_xgb))","c071d022":"X_train= X_train.values\ny_train=y_train.values","9371da84":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","d3ebe1b2":"model = Sequential()\nmodel.add(Dense(100,activation = 'relu'))\nmodel.add(Dense(200, activation = 'relu'))\nmodel.add(Dense(50, activation = 'softmax'))","2bc0bcef":"model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","822b7372":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=100, verbose=1)","e71d3008":"y_ann = model.predict_classes(X_test).flatten()","85ee3ce2":"y_ann","f54c1240":"accuracy_score(y_test, y_ann)","b3efd512":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","62df9158":"plot_scores(train)","05898ed4":"## Zalando Fashion MNIST","4dbfe3a2":"Le dataset a \u00e9t\u00e9 constitu\u00e9 par Zalando :  \nhttps:\/\/github.com\/zalandoresearch\/fashion-mnist  \n  \nOn a un ensemble d'apprentissage de 60 000 images 28x28 pixels en niveaux de gris, et 10 classes de v\u00eatements : jupes, pantalons, baskets, ...","90579140":"## Librairies et fonctions utiles","462e9f7c":"**Afficher les 50 premiers \u00e9l\u00e9ments du dataset avec leur label**  \n","28d71996":"La premi\u00e8re image du dataset est un pull :","90783470":"Fonction pour tracer la courbe ROC :","1f8e56f5":"**Appliquer des m\u00e9thodes de machine learning \u00e0 la reconnaissance des objets (for\u00eats al\u00e9atoires, xgboost, ...)**  ","09ca0462":"<img src=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\/blob\/master\/doc\/img\/fashion-mnist-sprite.png?raw=true\">","ed589375":"Fonction pour tracer les courbes d'apprentissage sur l'ensemble d'apprentissage et l'ensemble de validation :","992d35a5":"# Exercice : Zalando Fashion MNIST","111ccbe3":"R\u00e9seaux de neurones denses"}}