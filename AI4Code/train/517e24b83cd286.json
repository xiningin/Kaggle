{"cell_type":{"fc5bb90b":"code","8f43dfe5":"code","75ae5cfe":"code","acd32e1f":"code","e61ee17b":"code","c57d1be8":"code","55f06ae2":"code","19ae5431":"code","484e57c8":"code","442094e1":"code","7e9fb9b6":"code","cbec9650":"code","8231b57a":"code","9ee0314a":"code","2d9c7e45":"code","6623a75f":"code","804d6941":"code","07b246e1":"code","79209897":"code","05bc0eca":"code","6b651e76":"code","3353943d":"code","3b30dc92":"code","d943f091":"markdown","7b86fab1":"markdown","f1a1c935":"markdown"},"source":{"fc5bb90b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport json\nimport nltk\nimport re\nimport csv\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split","8f43dfe5":"x_train= pd.read_csv('..\/input\/radix-challenge\/train.csv')\nx_test=pd.read_csv('..\/input\/radix-challenge\/test.csv')","75ae5cfe":"x_train","acd32e1f":"len(pd.unique(x_train.genres))","e61ee17b":"# function for text cleaning \ndef clean_text(text):\n    # remove backslash-apostrophe \n    text = re.sub(\"\\'\", \"\", text) \n    # remove everything except alphabets \n    text = re.sub(\"[^a-zA-Z]\",\" \",text) \n    # remove whitespaces \n    text = ' '.join(text.split()) \n    # convert text to lowercase \n    text = text.lower() \n    \n    return text\n\nx_train['clean_plot'] = x_train['synopsis'].apply(lambda x: clean_text(x))\nx_test['clean_plot'] = x_test['synopsis'].apply(lambda x: clean_text(x))\n","c57d1be8":"#function to remove all the stopwords that may affects the prestation of the model\nnltk.download('stopwords')\n\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n\n\ndef remove_stopwords(text):\n    no_stopword_text = [w for w in text.split() if not w in stop_words]\n    return ' '.join(no_stopword_text)\n\nx_train['clean_plot'] = x_train['clean_plot'].apply(lambda x: remove_stopwords(x))","55f06ae2":"#estrapolate the genres vector from the train dataset\n\n\n#multilabel\ngen = [x.split(' ') for x in list (x_train['genres'])]    \n    #multiclass\n#gen1 = [[x] for x in list(x_train['genres'])]#","19ae5431":"gen","484e57c8":"set(x for l in gen for x in l)\n#there are in total 19 different categories","442094e1":"#apply the onehot transformation for the genres vector\n\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmultilabel_binarizer = MultiLabelBinarizer()\ny=multilabel_binarizer.fit_transform(gen)\n","7e9fb9b6":"y.shape\n#this is perfect, cause it takes number of rows x number of different categories","cbec9650":"#using the 10k most frequent words in the synopsis through the Tf-idf features \n\ntfidf_vectorizer = TfidfVectorizer(max_df=0.8, max_features=10000)","8231b57a":"# applying TF-IDF features to the synopsis\nxtrain_tfidf = tfidf_vectorizer.fit_transform(x_train['clean_plot'])","9ee0314a":"from sklearn.linear_model import LogisticRegression\n\n# Binary Relevance\nfrom sklearn.multiclass import OneVsRestClassifier\n\n# Performance metric\nfrom sklearn.metrics import f1_score","2d9c7e45":"lr = LogisticRegression()\nclf = OneVsRestClassifier(lr)","6623a75f":"# fit model on train data\nclf.fit(xtrain_tfidf,y)","804d6941":"y_pred = clf.predict(tfidf_vectorizer.transform(x_test['clean_plot']))","07b246e1":"y_pred.shape","79209897":"print(len(multilabel_binarizer.inverse_transform(y_pred)))\npred_gen = multilabel_binarizer.inverse_transform(y_pred)","05bc0eca":"submission = pd.DataFrame(data= {'movie_id':x_test.movie_id,'predicted_genres':pred_gen})","6b651e76":"for i in range(0,len(submission.predicted_genres)):\n   submission.predicted_genres[i] =(','.join((submission.predicted_genres[i])))","3353943d":"for i in range(0,len(submission.predicted_genres)):\n    submission.predicted_genres[i] = submission.predicted_genres[i].replace(\",\",\" \")","3b30dc92":"submission.to_csv('submission.csv',index=False)","d943f091":"## THE MODEL","7b86fab1":"## DATA PREPARATION ","f1a1c935":"the model does not predict the genres for all the movies, maybe should be a good idea implement a multiclass model instead of multilabel, another option could be change the model, using something else instead of Onevstherest classifier."}}