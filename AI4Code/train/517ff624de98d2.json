{"cell_type":{"78051827":"code","a2461402":"code","6ba2207f":"code","6ac269bb":"code","01c300a4":"code","a5d13378":"code","53fc3a22":"code","467e0202":"code","e590d11f":"code","5c83a382":"code","e667e409":"code","4aa8bbea":"code","702ab7c6":"code","00b61268":"code","f3e93a07":"code","d6eec560":"code","779578c6":"code","e7769536":"code","de6ad252":"code","b0e9ad57":"code","2749340e":"code","9e364a66":"code","d7869269":"code","7381903a":"code","7d6045a4":"code","c06dabfb":"code","6b24db11":"code","880b734a":"code","682e6323":"code","e670c7a9":"code","9681f46a":"code","0a0ac388":"code","dbd34727":"code","1edb2f4a":"code","bec6e079":"code","fb62b74b":"code","1617fc12":"code","0ee66066":"code","d1f76d63":"code","c316f464":"code","7883b4a7":"code","53dc208d":"code","d3127fe0":"code","164f25c9":"code","bac1507d":"code","01c49bf9":"code","f668ac61":"code","60f948d2":"code","342832cc":"code","0c395aa3":"code","b6558312":"code","a3328548":"code","4b997738":"code","176e7ad3":"code","6665963b":"code","eeca61bc":"code","e295dd28":"code","4b08ae6a":"code","d4f2f681":"code","877fce3b":"code","17241297":"code","dd95b386":"code","5532bfd3":"code","b6ead6f2":"code","f7882499":"code","6114bb76":"code","216cb231":"code","937c2e51":"markdown","034f8d31":"markdown","f8f6391f":"markdown","17deacd1":"markdown","6c2776b1":"markdown","081c6ae1":"markdown","af84b6be":"markdown","1fad69ad":"markdown","11efcaaf":"markdown"},"source":{"78051827":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a2461402":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n","6ba2207f":"train.head()\n","6ac269bb":"test.head()","01c300a4":"train.info()","a5d13378":"# %Null values in Train set\ntrain.isnull().sum()\/len(train)","53fc3a22":"train['Age'].value_counts()","467e0202":"# Feature Name,Ticket & Cabin does not add any value to the dataset. So we will drop these features.\ntrain.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)","e590d11f":"train['Age'].describe()","5c83a382":"train.drop(['Age'],axis=1,inplace=True)","e667e409":"train['Embarked'].value_counts()","4aa8bbea":"train['Embarked'].fillna('S',inplace=True)","702ab7c6":"# %Null values in Train set\ntrain.isnull().sum()\/len(train)","00b61268":"train.info()","f3e93a07":"sns.set_style('whitegrid')","d6eec560":"sns.countplot(data= train, x= 'Survived',hue= 'Sex')","779578c6":"sns.countplot(train['Pclass'])","e7769536":"sns.countplot(train['SibSp'])","de6ad252":"sns.countplot(train['Parch'])","b0e9ad57":"train['n_family_member'] = train['SibSp'] + train['Parch']","2749340e":"sns.countplot(data= train,x='n_family_member',hue = 'Sex')","9e364a66":"train.drop(['SibSp','Parch'],axis=1,inplace=True)","d7869269":"train.info()","7381903a":"train['Sex_male'] = pd.get_dummies(data=train['Sex'],drop_first=True)","7d6045a4":"train.head()","c06dabfb":"train = pd.get_dummies(train, columns=['Embarked'],drop_first=True, prefix='Embarked')","6b24db11":"train.info()","880b734a":"train.head()","682e6323":"sns.distplot(train['Fare'])","e670c7a9":"train['Fare'] = train['Fare'].astype('int')","9681f46a":"train.info()","0a0ac388":"train.head()","dbd34727":"train.columns","1edb2f4a":"X = train[['Pclass', 'Fare', 'n_family_member','Sex_male', 'Embarked_Q', 'Embarked_S']]\ny = train['Survived']","bec6e079":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","fb62b74b":"X_train,X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, stratify = y)","1617fc12":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","0ee66066":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint(accuracy_score(y_test,y_pred))","d1f76d63":"from sklearn.tree import DecisionTreeClassifier","c316f464":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint(accuracy_score(y_test,y_pred))","7883b4a7":"from sklearn.svm import SVC","53dc208d":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nprint(accuracy_score(y_test,y_pred))","d3127fe0":"from sklearn.neighbors import KNeighborsClassifier as KNN","164f25c9":"knn = KNN(n_neighbors=2)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(accuracy_score(y_test,y_pred))","bac1507d":"SEED = 101\nlr = LogisticRegression(random_state=SEED)\nknn = KNN()\ndt = DecisionTreeClassifier(random_state=SEED)\n\nclassifiers = [('Logistic Regression', lr),\n('K Nearest Neighbours', knn),\n('Classification Tree', dt)]\n\nfor clf_name, clf in classifiers:\n   \n    clf.fit(X_train, y_train)\n  \n    y_pred = clf.predict(X_test)\n  \n    print('{:s} : {:.3f}'.format(clf_name, accuracy_score(y_test, y_pred)))","01c49bf9":"from sklearn.ensemble import VotingClassifier","f668ac61":"vc = VotingClassifier(estimators=classifiers)\n\nvc.fit(X_train, y_train)\n\ny_pred = vc.predict(X_test)\n\nprint('Voting Classifier: {:.3f}'.format(accuracy_score(y_test, y_pred)))","60f948d2":"from sklearn.tree import DecisionTreeClassifier","342832cc":"dt = DecisionTreeClassifier(random_state=SEED)\nfrom sklearn.model_selection import GridSearchCV\n\nparams_dt = {\n'max_depth': [3, 4,5, 6],\n'min_samples_leaf': [0.04, 0.06, 0.08],\n'max_features': [0.2, 0.4,0.6, 0.8]\n}\n\ngrid_dt = GridSearchCV(estimator=dt,\nparam_grid=params_dt,\nscoring='accuracy',\ncv=5,\nn_jobs=-1)\n# Fit 'grid_dt' to the training data\ngrid_dt.fit(X_train, y_train)","0c395aa3":"best_hyperparams = grid_dt.best_params_\nprint('Best hyerparameters:\\n', best_hyperparams)","b6558312":"best_CV_score = grid_dt.best_score_\nprint('Best CV accuracy: {:.3f}'.format(best_CV_score))","a3328548":"best_model = grid_dt.best_estimator_\n\ntest_acc = best_model.score(X_test,y_test)\n\nprint(\"Test set accuracy of best model: {:.3f}\".format(test_acc))","4b997738":"import xgboost as xgb","176e7ad3":"xg_cl = xgb.XGBClassifier(objective='binary:logistic',\nn_estimators=10, seed=101)\nxg_cl.fit(X_train, y_train)\npreds = xg_cl.predict(X_test)\naccuracy = float(np.sum(preds==y_test))\/y_test.shape[0]\nprint(\"accuracy: %f\" % (accuracy))","6665963b":"# As XGBoost Model shows better Accuracy lets test it on test set.\n# Lets Transform test set","eeca61bc":"train.head()","e295dd28":"test.head()","4b08ae6a":"test.drop(['Name','Ticket','Cabin','Age'],axis=1,inplace=True)","d4f2f681":"test.info()","877fce3b":"test['n_family_member'] = test['SibSp'] + test['Parch']","17241297":"test.drop(['SibSp','Parch'],axis=1,inplace=True)","dd95b386":"test = pd.get_dummies(test, columns=['Sex'],drop_first=True)\ntest = pd.get_dummies(test, columns=['Embarked'],drop_first=True, prefix='Embarked')","5532bfd3":"test['Fare'] = test['Fare'].fillna(0)","b6ead6f2":"test['Fare'] = test['Fare'].astype('int')","f7882499":"X_test_test = test[['Pclass', 'Fare', 'n_family_member','Sex_male', 'Embarked_Q', 'Embarked_S']]","6114bb76":"preds = xg_cl.predict(X_test_test)","216cb231":"submission = pd.DataFrame({'PassengerId':test.PassengerId,'Survived':preds})\nsubmission.Survived = submission.Survived.astype(int)\nprint(submission.shape)\nfilename = 'Titanic Predictions.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","937c2e51":"**5. Voting Classifier**","034f8d31":"**Model Building Phase**","f8f6391f":"**6. Hyperparameter Tuning using Random Forest**","17deacd1":"**1. Logistic Regression Model**","6c2776b1":"**3. Support vector Classifier**","081c6ae1":"****Feature Engineering:****","af84b6be":"**4. KNN**","1fad69ad":"**7. Grid search: XGBoost**","11efcaaf":"**2. Decision Tree Classifier**"}}