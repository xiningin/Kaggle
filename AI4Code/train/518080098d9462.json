{"cell_type":{"244e3235":"code","969c0917":"code","2c1a3d55":"code","25ef41e7":"code","61edc487":"code","5eed2727":"code","6c79b65e":"code","fca5c9fb":"code","166fca23":"code","4329ecf8":"code","b7c51c2f":"code","ddb01a80":"code","2e72ad43":"code","3df04e66":"code","34e2e62c":"code","7fd23f0d":"code","91e6794b":"code","2662d965":"code","29a3394a":"code","72caa039":"code","0b433bc5":"code","aa7d0a37":"code","73beb34b":"code","8068d71b":"code","3dd4b078":"code","f79ec8fb":"code","9daf5866":"code","1f02f574":"markdown","aa5581d5":"markdown","369830db":"markdown","6d52c645":"markdown","73a0e7c7":"markdown","76152f45":"markdown","02272e48":"markdown","15e71398":"markdown","ad100e2e":"markdown","e9ff2381":"markdown","e71826a1":"markdown","2a29f3c3":"markdown","e5600583":"markdown","9cef6012":"markdown","8dcffe45":"markdown","5101e5cf":"markdown","745e0fe1":"markdown","07db8d8d":"markdown","d023316a":"markdown","dab1518b":"markdown","0176a1ce":"markdown","bd30aa8a":"markdown","0e700bf7":"markdown","5025c2a9":"markdown","8dbcc287":"markdown","6d5cd84a":"markdown","e5728e47":"markdown","22ef5aef":"markdown","ec94eff5":"markdown","e976f60c":"markdown","00bd2b58":"markdown"},"source":{"244e3235":"import pandas as pd \nimport numpy as np\nimport os\n\npath = '\/kaggle\/input\/ntt-data-global-ai-challenge-06-2020\/'\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#sns.set()\n\n%matplotlib inline\n\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML, Image\nrc('animation', html='html5')\n\n!pip install bar_chart_race\nimport bar_chart_race as bcr","969c0917":"# Load Crude Oil data\ndata_1 = pd.read_csv(path+\"Crude_oil_trend_From1986-10-16_To2020-03-31.csv\")\nprint('Number of data points : ', data_1.shape[0])\nprint('Number of features : ', data_1.shape[1])\nprint('Features : ', data_1.columns.values)\ndata_1.head() # to print first 5 rows","2c1a3d55":"# Converting Date format\ndata_1['Date'] = pd.to_datetime(data_1['Date'])\ndata_1['Date'].dtype\n# Year wise data\n# mean price \ndata_1_year = data_1.groupby(data_1.Date.dt.year)['Price'].agg('mean').reset_index()\ndata_1_year.head()","25ef41e7":"# First set up the figure, the axis, and the plot element we want to animate\nfig, ax = plt.subplots(figsize=(8,6))\nax.set_xlim((1986, 2020))\nax.set_ylim(np.min(data_1_year.Price), np.max(data_1_year.Price)+1)\nax.set_xlabel('Year',fontsize = 14)\nax.set_ylabel('Price',fontsize = 14)\nax.set_title('Crude Oil Price Over the Years',fontsize = 18)\nax.xaxis.grid()\nax.yaxis.grid()\nax.set_facecolor('#000000') \nline, = ax.plot([], [], lw=4,color='green')\n\n# initialization function: plot the background of each frame\ndef init():\n    line.set_data([], [])\n    return (line,)\n\n\n# animation function. This is called sequentially\ndef animate(i):\n    d = data_1_year.iloc[:int(i+1)] #select data range\n    x = d.Date\n    y = d.Price\n    line.set_data(x, y)\n    return (line,)\n\nanim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=40, repeat=True)","61edc487":"anim","5eed2727":"# Week wise data 2020 Jan to April\nmask = (data_1['Date'] > '2019-12-31') & (data_1['Date'] <= '2020-03-31')\ndata_2020 = data_1[mask]\n# mean price \ndata_2020_weekly = data_2020.set_index('Date').resample('W').mean().reset_index()\ndata_2020_weekly.head()","6c79b65e":"# First set up the figure, the axis, and the plot element we want to animate\nimport datetime\nfig, ax = plt.subplots(figsize=(8,6))\n\nax.set_xlim([datetime.date(2020, 1, 2), datetime.date(2020, 3, 31)])\nax.set_ylim(np.min(data_2020_weekly.Price), np.max(data_2020_weekly.Price)+1)\nax.set_xlabel('Date',fontsize = 14)\nax.set_ylabel('Price',fontsize = 14)\nax.set_title('Crude Oil Price Per Week 2020 Jan - Mar',fontsize = 18)\nax.xaxis.grid()\nax.yaxis.grid()\nax.set_facecolor('#000000') \nline, = ax.plot([], [], lw=4,color='green')\n\n# initialization function: plot the background of each frame\ndef init():\n    line.set_data([], [])\n    return (line,)\n\n\n# animation function. This is called sequentially\ndef animate(i):\n    d = data_2020_weekly.iloc[:int(i+1)] #select data range\n    x = d.Date\n    y = d.Price\n    line.set_data(x, y)\n    return (line,)\n\nanim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=14, repeat=True)","fca5c9fb":"anim","166fca23":"# Load dataset\ndata_2 = pd.read_csv(path+\"COVID-19_train.csv\")\nprint('Number of data points : ', data_2.shape[0])\nprint('Number of features : ', data_2.shape[1])\ndata_2.head()","4329ecf8":"# Lets take only few countries\ncols = ['Date','China_total_deaths','Germany_total_deaths','Spain_total_deaths',\n        'France_total_deaths','UnitedKingdom_total_deaths','India_total_deaths',\n       'Italy_total_deaths','SouthKorea_total_deaths','UnitedStates_total_deaths','Russia_total_deaths']\ndata_deaths = data_2[cols]\ndata_deaths.set_index(\"Date\", inplace = True) \ndata_deaths.head()","b7c51c2f":"bcr.bar_chart_race(df=data_deaths, filename=None, figsize = (3.5,3),title='COVID-19 Deaths by Country')","ddb01a80":"# Modifying data\ndata_total_cases = data_2.filter(regex=\"total_cases|Date|Price\")\n# Drop countries with 0 cases\ndata_total_cases = data_total_cases.loc[:, (data_total_cases != data_total_cases.iloc[0]).any()] \n# countries = data_total_cases.columns.values[1:-1]\n# countries = list(set([i.split('_')[0] for i in countries]))\ndata_total_cases.head()","2e72ad43":"# data transformation\ndates = []\ncountries_ls = []\ntotal_cases = []\nprices = []\nfor index, row in data_total_cases.iterrows():\n    df = pd.DataFrame(row).T\n    c_ls = (df.iloc[:,1:-2].apply(lambda x: x.index[x.astype(bool)].tolist(), 1)[index])\n    dates.extend([[df['Date'][index]]*len(c_ls)][0])\n    prices.extend([[df['Price'][index]]*len(c_ls)][0])\n    countries_ls.extend([col.split('_')[0] for col in c_ls])\n    total_cases.extend([df[col][index] for col in c_ls])\n    \ndata_2_mod = pd.DataFrame({'Date':dates,'Country':countries_ls,'Total_Cases':total_cases,'Price':prices})\ndata_2_mod.head()","3df04e66":"from IPython.display import Image\nsns.set(style=\"darkgrid\", palette=\"pastel\", color_codes=True)\nsns.set_context(\"paper\")\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"seaborn\"\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot,plot\ninit_notebook_mode(connected=True)\n\nfig = px.choropleth(\n    data_2_mod, #Data\n    locations= 'Country', #To get Lat and Lon of each country\n    locationmode= 'country names', \n    color= 'Total_Cases', #color scales\n    hover_name= 'Country', #Label while hovering\n    hover_data= ['Country','Price'], #Data while hovering\n    animation_frame= 'Date', #animate for each day\n    color_continuous_scale=px.colors.sequential.Reds\n)\n\nfig.update_layout(\n    title_text = \"<b>COVID-19 Spread in the World up to Mar 31, 2020<\/b>\",\n    title_x = 0.5,\n    geo= dict(\n        bgcolor = 'black',\n        showframe= False,\n        showcoastlines= False,\n        projection_type = 'equirectangular'\n        \n        \n    )\n)\niplot(fig)\n","34e2e62c":"\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=data_2.Date, y=data_2.Price, name=\"Price\"),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=data_2.Date, y=data_2.World_total_cases, name=\"World Total Cases\",line = dict(color = 'orangered')),\n    secondary_y=True,\n)\n\n# Add figure title\nfig.update_layout(\n#     title_text=\"Total cases vs Price\"\n    title='<b>Total cases vs Price<\/b>',\n    plot_bgcolor='linen',\n#     paper_bgcolor = 'grey',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=2,\n                     label='2m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"<b>Date<\/b>\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>Price<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>World Total Cases<\/b>\", secondary_y=True)\n\niplot(fig)\n","7fd23f0d":"# Top countries impacted as of Mar 31, 2020.\ncols = ['World_total_cases','World_total_deaths','China_total_cases','Italy_total_cases','Germany_total_cases',\n        'Spain_total_cases','Iran_total_cases','France_total_cases','Price']\n\ncordata = pd.DataFrame(data_2[cols].corr(method ='pearson'))\n\nfig = go.Figure(data=go.Heatmap(z=cordata,x=cols,y=cols,colorscale='burgyl'))\n\niplot(fig)","91e6794b":"cordata","2662d965":"data_2 = data_2.set_index(data_2['Date'])\ntrain = data_2[:'2020-03-19']\ncv = data_2['2020-03-20':]\ntrain.tail()","29a3394a":"features = ['World_total_cases','World_total_deaths','China_total_cases','Italy_total_cases','Germany_total_cases',\n        'Spain_total_cases','Iran_total_cases','France_total_cases'] # columns to be used for training\ny_train = train['Price'].values # target column\nX_train = train[features] # Let's only consider few columns.\nprint('Number of X_train data points : ', X_train.shape[0])\nprint('Number of features train: ', X_train.shape[1])\nprint('Features : ', X_train.columns.values)\nX_train = X_train.values","72caa039":"y_cv = cv['Price'].values\nX_cv = cv[features]\nprint('Number of X_cv data points : ', X_cv.shape[0])\nprint('Number of features cv: ', X_cv.shape[1])\nprint('Features : ', X_cv.columns.values)\nX_cv = X_cv.values","0b433bc5":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.linear_model import LinearRegression\nfrom matplotlib.legend_handler import HandlerLine2D\nfrom tqdm import tqdm\n\n\nlr = LinearRegression()\nlr.fit(X_train,y_train)\n\ny_train_hat = lr.predict(X_train)\ny_train_rmse = sqrt(mean_squared_error(y_train,y_train_hat))\n\ny_cv_hat = lr.predict(X_cv)\ny_cv_rmse = sqrt(mean_squared_error(y_cv,y_cv_hat))\nprint('Linear Regression Model trained!')","aa7d0a37":"# train predictions\nline1, = plt.plot(y_train, color=\"r\", label=\"Actual Price\")\nline2, = plt.plot(y_train_hat, color=\"g\", label=\"Predicted Price\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.title('Train: Actual Vs Predicted Price')\nplt.xlabel('Number of rows')\nplt.ylabel('Price')\n","73beb34b":"# cv predictions\nline1, = plt.plot(y_cv, color=\"r\", label=\"Actual Price\")\nline2, = plt.plot(y_cv_hat, color=\"g\", label=\"Predicted Price\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.title('CV: Actual Vs Predicted Price')\nplt.xlabel('Number of rows')\nplt.ylabel('Price')","8068d71b":"test = pd.read_csv(path+'COVID-19_test.csv')\nX_test = test[features]\nprint('Number of X_train data points : ', X_test.shape[0])\nprint('Number of features : ', X_test.shape[1])\ntest.head()","3dd4b078":"y_test_hat = lr.predict(X_test)\n#print(\"Predicted Price from April 01 - May 22, 2020: \\n\")\n# Predicted Price - First week of april\nprint(\"Predicted - First week of april \\n\")\nfor i in range(0,7):\n    print(\"Date: {}, Predicted Price: {}\".format(test['Date'][i],y_test_hat[i]))","f79ec8fb":"submission_df = pd.DataFrame({'Date':test.Date,'Price':y_test_hat})\n#submission_df.to_csv(path+'Submission.csv',index = False)","9daf5866":"from IPython.display import Image\nImage(filename='\/kaggle\/input\/realitycovid19\/Reality-covid.PNG') ","1f02f574":"## Reality Though!","aa5581d5":"## Load Data - Crude Oil Trend","369830db":"The graph shows us how fast and when exactly the death counts in Italy and Spain took over its precedor China. ","6d52c645":"## Train & Cross Validation Split\n\nWe will split the available data into train and cv based on date.\n\nCV data range: 20 Mar - 31 Mar","73a0e7c7":"The column wise information is changed into rows.","76152f45":"## Submission","02272e48":"# Exploratory Data Analysis - EDA\n\nLet's explore the data given.","15e71398":"**Stay inside! Stay safe!**","ad100e2e":"The plot shows how Covid-19 was spreading across the world for the first 3 months of 2020. \n\nWe can observe that initial spread was in the neighbourhood of China and then suddenly into Europe and other parts of the world.\n\nThe crucial dates were from Jan 24 - Feb 03. In a span of 10 days many countries started reporting its positive cases.\n\nAlso, come March 31 Italy, Spain, Germany, Iran, China, France were the countries with most number of Covid-19 cases.","e9ff2381":"## Crude Oil Price Per Week: (Jan - Mar, 2020)","e71826a1":"## Loss of Life\n\nTotal deaths across the world.","2a29f3c3":"## Transmission of Covid-19","e5600583":"The above animated graph shows how the Crude oil prices had gone up over the year. But for our interest (Covid-19 situation), we are more interested in what's happening in 2020. \n\n*Note: #!conda install -c conda-forge ffmpeg # run this if the above plot shows RuntimeError: Requested MovieWriter (ffmpeg) not available*","9cef6012":"### Import Packages","8dcffe45":"## Traditional Corr Plot?","5101e5cf":"## Load data - Covid-19 Train","745e0fe1":"Note: The model and prediction is only for basic undertanding. Not appropriate!","07db8d8d":"# Introduction\n\n**\"Ultimately, the greatest lesson that COVID-19 can teach humanity is that we are all in this together.\"-**[Kiran Mazumdar-Shaw](https:\/\/en.wikipedia.org\/wiki\/Kiran_Mazumdar-Shaw)\n\nWelcome to the Global AI Challenge 2020!. In this year's challenge we will be estimating the economic impact of COVID-19 across the globe. Participants are asked to predict the crude oil price given the COVID-19 cases. The challenge here is to utilize various kinds of datasets given in order to predict the Price. \n\nLockdown measures put in place to contain the spread of COVID-19 represent an unprecedented shock to global oil demand. The International Energy Agency (IEA) forecasts that the drop in global demand in April will be as much as 29 million barrels\/day year-on-year (around 30% of demand), followed by another significant year-on-year fall of 26 million barrels\/day in May. The world has returned to oil demand levels last seen in the 1990s.\n**Source: [Bruegel.org](https:\/\/www.bruegel.org\/2020\/04\/covid-19-is-causing-the-collapse-of-oil-markets-when-will-they-recover\/)**\n\n\n\n\nIn this notebook we will use the Crude Oil Trend and Covid-19 train dataset to understand and visualize the impact of Covid-19. Additionally, we will train a simple Machine Learning model to predict the price such that people who are new to Machine learning can also participate and get encouraged.\n\n","d023316a":"We have a time series data. We will understand how the Crude Oil Price fluctuates historically. The data given is from 1986-10-16 to 2020-03-31.  \n\nThe data given is on day to day basis. We will first see how the price fluctuates on yearly basis.","dab1518b":"The gif shows how the price is impacted from the first week of Jan, 2020 till the last week of Mar, 2020. We will explore deep regarding the negative correlation of price and Covid-19.","0176a1ce":"# Simple Machine Learning for Beginners\n\n\n\nThe core idea behind any Machine Learning Model is to identify a function that can take independent features (x's) as input and return the target\/dependent variable. i.e, f(x) = y.\n\nLets train a simple yet powerful Linear regressor to predict price.\n\nLearn more about Linear regression [here](https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f).\n\nNote: We are not including the process of feature engineering in this kernel. ","bd30aa8a":"## Price drop in 2020\nWeekly analysis","0e700bf7":"## Crude Oil Price over the years","5025c2a9":"# Authors\n\nThis notebook is a collaborated work of **[Aravind](http:\/\/linkedin.com\/in\/imaravindr\/)** and **[Shebin](https:\/\/www.linkedin.com\/in\/shebin-xp\/)**. \n\n*Our objective here is to show the power of visualizations and motivate fellow employees to participate in this challenge.* \n\n\"In vain have you acquired knowledge if you have not imparted it to others.\" - [Deuteronomy Rabbah](https:\/\/en.wikipedia.org\/wiki\/Deuteronomy_Rabbah)\n\n**Please vote if you feel this kernel to be useful.!**","8dbcc287":"Since the model is very basic [without any feature engineering done](https:\/\/en.wikipedia.org\/wiki\/Feature_engineering#:~:text=Feature%20engineering%20is%20the%20process,as%20applied%20machine%20learning%20itself.) the performance of the model is quiet low (Cases of Overfitting). \n\n\nHowever, for understanding the submission process, we will use this model to predict the test data given.","6d5cd84a":"### Train and CV predictions","e5728e47":"## Price Vs Covid-19\n\nLet's get back to our target variable price. Let's visualize the price drop and total cases together","22ef5aef":"The correlation data shows which country affects the target (price) variable the most. \n\nWorld total cases is highly correlated with Price column (-0.89)\n\nAmong countries, Iran contributes the most with a negative correlation of -0.897 followed by Italy (-0.858) and China (-0.841) and then the others.\n\nNote - The countries themselves are multicorrelated therefore, while training a ML model remove independent features that are correlated among themselves. Learn more about multicolinearity in data science [here](https:\/\/towardsdatascience.com\/multicollinearity-in-data-science-c5f6c0fe6edf).\n","ec94eff5":"We can see the direct relationship between World total cases and price. There is a steep decrease in price from Mid-Jan 2020 to Mar 2020. The steepness of the price curve indicates us that it will continue to fall down further in the following months. ","e976f60c":"This data contains the information about Covid-19 across the world.","00bd2b58":"## Test data - Submission"}}