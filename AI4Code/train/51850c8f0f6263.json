{"cell_type":{"01b424f4":"code","d9c765fd":"code","cc8d1dac":"code","e895171f":"code","bf345f5b":"code","dc81aee0":"code","0fcaa1a8":"code","5c5e508f":"code","5a9b7b95":"code","e8897df0":"code","de8116d2":"code","8d28c676":"code","ebd9fcdc":"code","fab326b4":"code","8ff82061":"code","da328947":"code","67b9690b":"markdown","b75fd65d":"markdown"},"source":{"01b424f4":"# OCR using easyocr\n\n!pip install easyocr","d9c765fd":"import torch\nimport easyocr\nimport os","cc8d1dac":"# In case you do not have GPU or your GPU has low memory, \n# you can run it in CPU mode by adding gpu = False\n\n# reader = easyocr.Reader(['en', 'en'], gpu=False)\n\nreader = easyocr.Reader(['en', 'en'])","e895171f":"# Image to text using easyocr\n# Output will be in list format, each item represents bounding box, text and confident level, respectively.\n\nimg_text = reader.readtext('..\/input\/hackerearthimage\/Test1161.jpg')\nfinal_text = \"\"\n\nfor _, text, __ in img_text: # _ = bounding box, text = text and __ = confident level\n    final_text += \" \"\n    final_text += text\nfinal_text","bf345f5b":"# Function to Traverse the folder\n\ndef traverse(directory):\n    path, directory, files = next(os.walk(directory))\n    return files","dc81aee0":"# Image directory and list of files\n\ndirectory = '..\/input\/hackerearthimage'\nfiles_list = traverse(directory)","0fcaa1a8":"files_list[:4]","5c5e508f":"# Doing OCR using GPU\n# save the images text to dict\n\nimages_text = {}\nfor files in files_list:\n    img_text = reader.readtext(directory + '\/' +  files)\n    final_text = \"\"\n    for _, text, __ in img_text:\n        final_text += \" \"\n        final_text += text\n    images_text[files] = final_text","5a9b7b95":"# For sorting the image file name\n\nkeys = list(images_text.keys())\nnew_keys = [int(k[4:-4]) for k in keys]\nnew_keys.sort()","e8897df0":"# Saving the Text file with image name ascending order\n\nimport csv\n\nwith open('image_easy_ocr.csv', 'w') as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Filename\", \"Text\"])\n    \n    for n in new_keys:\n        writer.writerow(['Test' + str(n) + '.jpg', images_text['Test' + str(n) + '.jpg']])","de8116d2":"# OCR using pytesseract\n\nimport cv2\nimport pytesseract\nfrom pytesseract import Output\nimport pytesseract\nfrom PIL import Image, ImageEnhance, ImageFilter","8d28c676":"# Grayscale, Gaussian blur, Otsu's threshold\nimage = cv2.imread(\"..\/input\/hackerearthimage\/Test1161.jpg\")\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nblur = cv2.GaussianBlur(gray, (3,3), 0)\nthresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]\n\n\n# Morph open to remove noise and invert image\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))\nopening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=1)\ninvert = 255 - opening\n\n\n# Perform text extraction\ndata = pytesseract.image_to_string(invert, lang='eng', config='--psm 6')\nprint(data)","ebd9fcdc":"def text_extraction(file_path):\n    # Grayscale, Gaussian blur, Otsu's threshold\n    image = cv2.imread(file_path)\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    blur = cv2.GaussianBlur(gray, (3,3), 0)\n    thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]\n\n\n    # Morph open to remove noise and invert image\n    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))\n    opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=1)\n    invert = 255 - opening\n\n\n    # Perform text extraction\n    data = pytesseract.image_to_string(invert, lang='eng', config='--psm 6')\n    return data","fab326b4":"# Doing OCR using pytesseract\n# save the images text to dict\n\nimages_text = {}\nfor files in files_list:\n    img_text = text_extraction(directory + '\/' +  files)\n    final_text = \"\"\n    for text in img_text:\n        final_text += text\n    images_text[files] = final_text","8ff82061":"# For sorting the image file name\n\nkeys = list(images_text.keys())\nnew_keys = [int(k[4:-4]) for k in keys]\nnew_keys.sort()","da328947":"# Saving the Text file with image name ascending order\n\nimport csv\n\nwith open('image_pytesseract_ocr.csv', 'w') as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Filename\", \"Text\"])\n    \n    for n in new_keys:\n        writer.writerow(['Test' + str(n) + '.jpg', images_text['Test' + str(n) + '.jpg']])","67b9690b":"## What is Optical Character Recognition (OCR)?\n\nOCR, or Optical Character Recognition, is a process of recognizing text inside images and converting it into an electronic form. These images could be of handwritten text, printed text like documents, receipts, name cards, etc., or even a natural scene photograph.\n\nOCR has two parts to it. The first part is text detection where the textual part within the image is determined. This localization of text within the image is important for the second part of OCR, text recognition, where the text is extracted from the image. Using these techniques together is how you can extract text from any image.\n\n## Tutorial that I follow\n1. https:\/\/nanonets.com\/blog\/ocr-with-tesseract\/#:~:text=Tesseract%20is%20an%20open%20source,a%20wide%20variety%20of%20languages.\n2. https:\/\/medium.com\/@jaafarbenabderrazak.info\/ocr-with-tesseract-opencv-and-python-d2c4ec097866\n3. https:\/\/pypi.org\/project\/tesserocr\/\n4. https:\/\/github.com\/JaidedAI\/EasyOCR","b75fd65d":"## Output will be in list format, each item represents bounding box, text and confident level, respectively.\n\n```\n[([[189, 75], [469, 75], [469, 165], [189, 165]], '\u611a\u56ed\u8def', 0.3754989504814148),\n ([[86, 80], [134, 80], [134, 128], [86, 128]], '\u897f', 0.40452659130096436),\n ([[517, 81], [565, 81], [565, 123], [517, 123]], '\u4e1c', 0.9989598989486694),\n ([[78, 126], [136, 126], [136, 156], [78, 156]], '315', 0.8125889301300049),\n ([[514, 126], [574, 126], [574, 156], [514, 156]], '309', 0.4971577227115631),\n ([[226, 170], [414, 170], [414, 220], [226, 220]], 'Yuyuan Rd.', 0.8261902332305908),\n ([[79, 173], [125, 173], [125, 213], [79, 213]], 'W', 0.9848111271858215),\n ([[529, 173], [569, 173], [569, 213], [529, 213]], 'E', 0.8405593633651733)]\n```"}}