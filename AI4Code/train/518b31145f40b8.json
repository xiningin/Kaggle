{"cell_type":{"ba190cde":"code","2fc4ad4a":"code","27ca9bfb":"code","aefe7f54":"code","cdb67462":"code","c9b04079":"code","45a3c58a":"code","7f85f56f":"code","fad0c838":"code","5c74aa4b":"code","b16cb6c1":"code","b0451502":"code","27c99089":"code","b101fa0a":"code","55a5cf57":"code","a4655a7f":"code","612492d1":"code","77e624ed":"code","fa4b0775":"markdown"},"source":{"ba190cde":"import re  \nimport nltk  \nimport string\nimport heapq  ","2fc4ad4a":"nltk.download('punkt')","27ca9bfb":"nltk.download('stopwords')","aefe7f54":"original_text = '..\/input\/game-of-thrones-books\/001ssb.txt'","cdb67462":"original_text = open(original_text, 'rb').read().decode(encoding = 'utf-8')","c9b04079":"original_text = re.sub(r'\\s+', ' ', original_text)","45a3c58a":"stopwords = nltk.corpus.stopwords.words('english')\nprint(stopwords)","7f85f56f":"stopwords.append('to be')\nstopwords.append('away')","fad0c838":"print(stopwords)","5c74aa4b":"def preprocessing(text):\n  formatted_text = text.lower()\n  tokens = []\n  for token in nltk.word_tokenize(formatted_text):\n    tokens.append(token)\n\n  tokens = [word for word in tokens if word not in stopwords and word not in string.punctuation]\n  formatted_text = ' '.join([str(element) for element in tokens if not element.isdigit()])\n\n  return formatted_text","b16cb6c1":"def calculate_sentence_score(sentences, important_words, distance):\n  notes = []\n  indice_sentence = 0\n\n  for sentence in [nltk.word_tokenize(sentence.lower()) for sentence in sentences]:\n\n    indice_word = []\n    for word in important_words:\n\n      try:\n        indice_word.append(sentence.index(word))\n      except ValueError:\n        pass\n    \n    indice_word.sort()\n\n\n    if len(indice_word) == 0:\n      continue\n\n\n    list_groups = []\n    group = [indice_word[0]]\n    i = 1\n    while i < len(indice_word):\n      if indice_word[i] - indice_word[i - 1] < distance:\n        group.append(indice_word[i])\n\n      else:\n        list_groups.append(group[:])\n        group = [indice_word[i]]\n\n      i += 1\n    list_groups.append(group)\n\n\n    high_grade_group = 0\n    for g in list_groups:\n\n      important_words_in_the_group = len(g)\n      total_word_in_group = g[-1] - g[0] + 1\n\n      note = 1.0 * important_words_in_the_group**2 \/ total_word_in_group\n\n\n      if note > high_grade_group:\n        high_grade_group = note\n\n    notes.append((high_grade_group, indice_sentence))\n    indice_sentence += 1\n\n  return notes","b0451502":"def summarize(text, top_n_words, distance, number_sentences):\n  original_sentences = [sentence for sentence in nltk.sent_tokenize(text)]\n \n  formatted_sentences = [preprocessing(original_sentence) for original_sentence in original_sentences]\n\n  words = [word for sentence in formatted_sentences for word in nltk.word_tokenize(sentence)]\n \n  frequence = nltk.FreqDist(words)\n\n  top_n_words = [word[0] for word in frequence.most_common(top_n_words)]\n \n  notes_sentences = calculate_sentence_score(formatted_sentences, top_n_words, distance)\n \n  best_sentences = heapq.nlargest(number_sentences, notes_sentences)\n\n  best_sentences = [original_sentences[i] for (note, i) in best_sentences]\n\n  return original_sentences, best_sentences, notes_sentences","27c99089":"original_sentences, best_sentences, notes_sentences = summarize(original_text, 5, 3, 3)","b101fa0a":"original_sentences","55a5cf57":"best_sentences","a4655a7f":"notes_sentences","612492d1":"def view_summary(title, list_sentences, best_sentences):\n  from IPython.core.display import HTML\n  text = ''\n\n  display(HTML(f'<h1>Text summary - {title}<\/h1>'))\n  for i in list_sentences:\n    if i in best_sentences:\n      text += str(i).replace(i, f\"<mark>{i}<\/mark>\")\n    else:\n      text += i\n  display(HTML(f\"\"\" {text} \"\"\"))","77e624ed":"view_summary('Test', original_sentences, best_sentences)","fa4b0775":"# **If you find this notebook useful, support with an upvote** \ud83d\udc4d"}}