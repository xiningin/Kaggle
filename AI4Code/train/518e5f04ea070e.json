{"cell_type":{"46cf422b":"code","798cbaf4":"code","329a448e":"code","94afa1c7":"code","34b2084b":"code","d92355a4":"code","c7d13b33":"code","3e7debdb":"code","19cb0fcd":"code","943ceffb":"code","42e5b629":"code","35d6014b":"code","afda884f":"code","627b625c":"code","9f6d71f0":"code","550b40f0":"code","0315e4b5":"code","671c42a3":"code","bd04aa46":"code","e7947fb6":"code","39fcedd5":"code","31514b88":"code","57ecedc7":"code","1c6ca680":"code","8125b427":"code","300a2840":"code","719754ba":"code","dc677746":"code","b637633a":"markdown","b58355d7":"markdown","e1c23d68":"markdown","99e1b5ea":"markdown","13cdbda8":"markdown","fc1a60f6":"markdown","74c7923d":"markdown","10b89cad":"markdown","fa5057a8":"markdown","662952f6":"markdown"},"source":{"46cf422b":"import os, glob, pandas as pd","798cbaf4":"# Paths\n\ninput_dir = os.path.abspath('\/kaggle\/input\/')\narticles_dir = input_dir + '\/cord19csv\/'","329a448e":"%%time\n\nli_df = []\n\nfor jt in ['pdf','pmc']:\n    path = f'{articles_dir}\/{jt}*.csv'\n    files = glob.glob(path)\n    \n    for file in files:\n        if jt == \"pdf\":            \n            df_pdf = pd.read_csv(file, index_col=None, header=0)\n            li_df.append(df_pdf)\n        else:\n            df_pmc = pd.read_csv(file, index_col=None, header=0)        \n            li_df.append(df_pmc)\n\n# Combine all papers dataframes in one\ndf = pd.concat(li_df, axis=0, ignore_index=True, sort=False)","94afa1c7":"df.shape","34b2084b":"df.head()","d92355a4":"# Drop duplicated documents by paper_id\ndf.drop_duplicates(subset=\"paper_id\", keep='first', inplace=True)","c7d13b33":"# Drop duplicated documents by text\ndf.drop_duplicates(subset=\"doc_text\", keep='first', inplace=True)\ndf.shape","3e7debdb":"# Create the lists of key terms\n\nterms_group_id = \"non_pharmaceutical\"\n\nterms1 = [\n    'effectiveness of non-pharmaceutical interventions',\n    'non-pharmaceutical interventions','npis','non-pharmaceutical',\n    'equity and barriers to compliance','equity','barriers',\n    'equity to compliance','barriers to compliance',    \n    'ways to scale up npis','funding','infrastructure','authorities',\n    'qualified participants','collaboration','consensus',\n    'mobilize resources','critical shortfalls',\n    'respond to an increase in cases'\n]\n\nterms2 = [\n    'rapid design and execution of experiments',\n    'rapid execution of experiments','rapid design of experiments',\n    'experiments','dhs centers for excellence','dhs'\n]\n\nterms3 = [\n    'rapid assessment','efficacy of school closures',\n    'travel bans','bans on mass gatherings','mass gatherings',\n    'social distancing'\n]\n\nterms4 = [\n    'control the spread',\n    'different populations'\n]\n\nterms5 = [\n    'models of potential interventions',\n    'predict costs','predict benefits','race','income','disability',\n    'age','geographic location','immigration status',\n    'housing status','employment status','health insurance status'\n]\n\nterms6 = [\n    'policy changes'\n]\n\nterms7 = [\n    'research','fail','financial costs'\n]\n\nterms8 = [\n    'research on the economic impact','programmatic alternatives',\n    'identifying policy','identifiying programmatic alternatives',\n    'lessen\/mitigate risks','lessen risks','mitigate risks',\n    'food distribution','supplies','access to household supplies',\n    'household supplies','access to critical household supplies',\n    'access to health diagnoses','health diagnoses',\n    'access to treatment','needed care','treatment',\n    'access to needed care'\n]\n\nterms = terms1 + terms2 + terms3 + terms4 + terms5 \nterms += terms6 + terms7 + terms8","19cb0fcd":"import spacy\n\n# Perform NLP operations on GPU, if available.\nspacy.prefer_gpu()\n\n# Load Spacy english model\nnlp = spacy.load('en', disable=['parser', 'ner', 'textcat'])\nnlp.max_length = 5000000","943ceffb":"# Create matcher and patterns\n\nfrom spacy.matcher import PhraseMatcher\n\n# Create a Matcher to case insensitive text matching\nmatcher = PhraseMatcher(nlp.vocab, attr='LEMMA')    \n\n# Create patterns from terms\npatterns = [nlp(d) for d in terms]\nmatcher.add(terms_group_id, None, *patterns)","42e5b629":"# Defines the matcher\n\ndef cord_19_matcher(sample_pct):   \n    # variables to test: test_limt is the total of docs to test; \n    # 0 = test off\n    \n    test_limit = 0\n    counter = 0\n\n    docs = df.sample(frac = sample_pct\/100) if sample_pct < 100 else df\n    tdocs = str(len(docs))\n\n    print(f\"{tdocs} documents to proccess...\")\n        \n    # Maximun allowed length of string text document\n    max_tlen = 100000\n\n    # initialize array and total found variables\n    findings_arr = []\n\n    # loop all articles to match terms\n    for idx, row in docs.iterrows():\n        try:\n            paper_id = row['paper_id']\n            doc_text = row[\"doc_text\"]            \n            \n            doc = nlp(doc_text)\n\n            # get the matches\n            matches = matcher(doc)\n\n            # process all matches found in text\n            if matches:\n                for m in matches:\n                    m_id, start, end = m[0],m[1],m[2]\n                    term_group = nlp.vocab.strings[m_id]\n                    term = doc[start:end].text\n\n                    # put finding into json object\n                    finding = {\n                        \"paper_id\": paper_id,\n                        \"term_group\": term_group,\n                        \"term\": term\n                    }\n\n                    # append finding to findings array\n                    findings_arr.append(finding)                \n\n            counter += 1\n            if counter % 100 == 0:\n                print(f\"{counter} documents proccessed\")\n\n            # breake loop if test control present\n            if test_limit > 0:            \n                if counter == test_limit:\n                    print(test_limit, \"sample count reached\")\n                    break\n\n        except BaseException as e:\n            print(\"Oops!  Error occurred in document loop.\")\n            print(str(e))\n            print(\"Continuing...\")\n            continue\n    \n    return findings_arr","35d6014b":"%%time\n\n# Set sample parameter = % of papers to proccess\nsample_pct = 100\n#sample_pct = 1.2\n#sample_pct = 10\n\nfindings_arr = cord_19_matcher(sample_pct)\n\ntfound = len(findings_arr)\nprint(tfound, \"matches found\\n\")","afda884f":"# Put findings array into a dataframe\n\nfindings = pd.DataFrame(findings_arr)\n\n# exclude the following terms originally taken in account\n#exc = ['term1','term2','term3']\n#findings.where(~findings.term.isin(exc), inplace = True)","627b625c":"findings.info()","9f6d71f0":"findings.head()","550b40f0":"# Capitalize each term in findings\nfindings[\"term\"] = findings[\"term\"].str.capitalize()","0315e4b5":"findings['count'] = ''\ncnt = findings.groupby('term').count()[['count']]\ncnt_s = cnt.sort_values(by='count', ascending=False).copy()","671c42a3":"# Show the bar chart\n\nax = cnt_s.plot(kind='barh', figsize=(12,40), \n                legend=False, color=\"coral\", \n                fontsize=16)\nax.set_alpha(0.8)\nax.set_title(\"What do we know about non-pharmaceutical interventions?\",\n             fontsize=18)\nax.set_xlabel(\"Term Appearances\", fontsize=16);\nax.set_ylabel(\"Terms\", fontsize=14);\nax.set_xticks([0,500,1000,1500,2000,2500,3000,\n               3500,4000,4500,5000,5500,6000])\n\n# Create a list to collect the plt.patches data\ntotals = []\n\n# Fill totals list\nfor i in ax.patches:\n    totals.append(i.get_width())\n\ntotal = sum(totals)\n\n# Set bar labels using the list\nfor i in ax.patches:\n    c = i.get_width()\n    cnt = f'{c:,} '\n    pct = str(round((c\/total)*100, 2)) + '%'\n    pct_f = \"(\" + pct + \")\"\n    ax.text(c+.3, i.get_y()+.4, cnt + pct_f, \n            fontsize=14, color='dimgrey')\n\n# Invert graph \nax.invert_yaxis()","bd04aa46":"from wordcloud import WordCloud, ImageColorGenerator\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fill the list of words to show\nterm_values = \"\"\nfor term in findings['term']:\n    term_val = str(term).title()\n    term_val = term_val.replace(' ','_')\n    term_val = term_val.replace('-','_')\n    term_values += term_val + ' '\n\n# Generates the wordcloud object\nwordcloud = WordCloud(background_color=\"white\",\n                      collocations=False).generate(term_values)\n\n# Display the generated image\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(figsize=((10,8)))\nplt.show()","e7947fb6":"findings_sta = findings.groupby([\"term\", \"paper_id\"]).size().reset_index(name=\"count\")\nfindings_sta = findings_sta.sort_values(by=['term','count'], ascending=False)","39fcedd5":"# Helper\n\ndef get_doc_text(paper_id):\n    doc = df.loc[df[\"paper_id\"]==paper_id].iloc[0]\n    return doc[\"doc_text\"]","31514b88":"answers = []\n\nfor term in terms:    \n    term = term.capitalize()\n    try:\n        f = findings_sta[findings_sta[\"term\"]==term]\n        f = f.sort_values(\"count\",ascending=False)\n        for fc in f.iterrows():           \n            paper_id = fc[1][\"paper_id\"]                        \n            doc_text = get_doc_text(paper_id)\n            \n            answer = {\n                \"aspect\": terms_group_id,\n                \"factor\": term,\n                \"paper_id\": paper_id,\n                \"doc_text\": str(doc_text)\n            }\n\n            answers.append(answer)\n            \n            break\n        \n    except BaseException as e:\n        print(str(e))\n        continue\n\nlen(answers)","57ecedc7":"import ipywidgets as widgets\nfrom ipywidgets import Layout, Button, Box, FloatText, Textarea, Dropdown, Label, IntSlider","1c6ca680":"item_layout = Layout(\n    display='flex',\n    flex_flow='row',\n    justify_content='space-between',\n    width= '100%',\n    height= '200px'\n)","8125b427":"# Helpers\n\ndef get_text_area(text):\n    ta = widgets.Textarea(\n        value=str(text),\n        placeholder='',\n        description='',\n        layout=item_layout,\n        disabled=True\n    )\n    return ta\n\nimport json\n\ndef get_answer_text(factor):\n    try:\n        factor = factor.capitalize()\n        ans = next(x for x in answers if x[\"factor\"] == factor)\n        ans = json.dumps(ans[\"doc_text\"]).strip(\"'\").strip('\"')\n        ans = ans.replace('\\\\n', '\\n\\n')\n        return ans\n    except BaseException:\n        return \"\"\n    \ndef get_question_answer(t_params):\n    full_text = ''\n    for t_param in t_params:\n        try:\n            doc_text = get_answer_text(t_param)\n            if not doc_text in full_text:\n                if len(full_text) > 0:\n                    full_text += \"\\n\\n\"                \n                full_text += doc_text\n        except BaseException:\n            continue\n    \n    return full_text","300a2840":"td1 = 'Guidance on ways to scale up NPIs in a more coordinated way (e.g., establish funding, infrastructure and authorities to support real time, authoritative (qualified participants) collaboration with all states to gain consensus on consistent guidance and to mobilize resources to geographic areas where critical shortfalls are identified) to give us time to enhance our health care delivery system capacity to respond to an increase in cases.'\ntext = get_question_answer(terms1)\nta1 = get_text_area(text)\n\ntd2 = 'Rapid design and execution of experiments to examine and compare NPIs currently being implemented. DHS Centers for Excellence could potentially be leveraged to conduct these experiments.'\ntext = get_question_answer(terms2)\nta2 = get_text_area(text)\n\ntd3 = 'Rapid assessment of the likely efficacy of school closures, travel bans, bans on mass gatherings of various sizes, and other social distancing approaches.'\ntext = get_question_answer(terms3)\nta3 = get_text_area(text)\n\ntd4 = 'Methods to control the spread in communities, barriers to compliance and how these vary among different populations.'\ntext = get_question_answer(terms4)\nta4 = get_text_area(text)\n\ntd5 = 'Models of potential interventions to predict costs and benefits that take account of such factors as race, income, disability, age, geographic location, immigration status, housing status, employment status, and health insurance status.'\ntext = get_question_answer(terms5)\nta5 = get_text_area(text)\n\ntd6 = 'Policy changes necessary to enable the compliance of individuals with limited resources and the underserved with NPIs.'\ntext = get_question_answer(terms6)\nta6 = get_text_area(text)\n\ntd7 = 'Research on why people fail to comply with public health advice, even if they want to do so (e.g., social or financial costs may be too high).'\ntext = get_question_answer(terms7)\nta7 = get_text_area(text)\n\ntd8 = 'Research on the economic impact of this or any pandemic. This would include identifying policy and programmatic alternatives that lessen\/mitigate risks to critical government services, food distribution and supplies, access to critical household supplies, and access to health diagnoses, treatment, and needed care, regardless of ability to pay.'\ntext = get_question_answer(terms8)\nta8 = get_text_area(text)","719754ba":"ac1_tas = [ta1,ta2,ta3,ta4,ta5,ta6,ta7,ta8]\nac1 = widgets.Accordion(children=ac1_tas)\nac1.set_title(0, td1)\nac1.set_title(1, td2)\nac1.set_title(2, td3)\nac1.set_title(3, td4)\nac1.set_title(4, td5)\nac1.set_title(5, td6)\nac1.set_title(6, td7)\nac1.set_title(7, td8)","dc677746":"ac1","b637633a":"Display a bar graph and a word cloud with the totals of findings  by key term.","b58355d7":" # What do we know about non-pharmaceutical interventions?\n \nThe answer to this question is distributed in each of the aspects listed at the beginning of this notebook.","e1c23d68":"Group findings by key term and sort by key term and count. The first document in each group will be part of the response to the task question.","99e1b5ea":"## Get what the literature reports on the task topic","13cdbda8":"## Pattern Matching\nObjective: classify all articles according to key terms.","fc1a60f6":"# **INTRODUCTION**\n\nThis work is to help the medical community answer the posted question in Kaggle: [What do we know about non-pharmaceutical interventions?](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge\/tasks) The resulting model enables to understand and keep up with the large amount of literature contained in the provided dataset, specifically:\n\n1. Guidance on ways to scale up NPIs in a more coordinated way (e.g., establish funding, infrastructure and authorities to support real time, authoritative (qualified participants) collaboration with all states to gain consensus on consistent guidance and to mobilize resources to geographic areas where critical shortfalls are identified) to give us time to enhance our health care delivery system capacity to respond to an increase in cases.\n2. Rapid design and execution of experiments to examine and compare NPIs currently being implemented. DHS Centers for Excellence could potentially be leveraged to conduct these experiments.\n3. Rapid assessment of the likely efficacy of school closures, travel bans, bans on mass gatherings of various sizes, and other social distancing approaches.\n4. Methods to control the spread in communities, barriers to compliance and how these vary among different populations..\n5. Models of potential interventions to predict costs and benefits that take account of such factors as race, income, disability, age, geographic location, immigration status, housing status, employment status, and health insurance status.\n6. Policy changes necessary to enable the compliance of individuals with limited resources and the underserved with NPIs.\n7. Research on why people fail to comply with public health advice, even if they want to do so (e.g., social or financial costs may be too high).\n8. Research on the economic impact of this or any pandemic. This would include identifying policy and programmatic alternatives that lessen\/mitigate risks to critical government services, food distribution and supplies, access to critical household supplies, and access to health diagnoses, treatment, and needed care, regardless of ability to pay.\n\nAt the end of this notebook, the question asked is answered by means of each of the aspects listed above. In each case, the original content of the article that most represents the processed aspect is shown.\n\nTo accomplish the goal, the selected approach was to perform text mining on input data, by applying the latest advances in natural language processing (NLP). This was realized by the following steps:\n\n    1. Obtain input data and pre-process it to facilitate analysis.\n    2. Extract the key terms from the task description.\n    3. Match key terms with text contents.\n    4. Group and quantify the findings.\n    5. Show the documents that answer the task questions.\n        \nThe advantage of using NLP to abord this problem is that it is based on language-specific models, saving time and resources for text analysis.\n\nThe key terms was extracted from the task description in the step 2, resulting in a set of rule-based patterns.\n\nThe matching of key terms (step 3) was applied through topic  classification with Spacy library. This work through large sets of the unstructured data to match the patterns obtained in step 2. It is a very fast and scalable process that preferably uses the GPU resource.\n\nThis approach presents the limitation of synonymy, where multiple words and phrases have the same or similar meaning. To counter this, great care was taken in selecting keywords to make up the vocabulary of terms (e.g. COVID-19, SARS-CoV-2, 2019-nCov, SARS Coronavirus 2, or 2019 Novel Coronavirus).\n\nIn other hand, since the [original input data](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) it is stored in JSON single files, whose structure is likely too complex to directly perform the analysis, this notebook uses the pre-processed data from the dataset [CORD-19-CSV](https:\/\/www.kaggle.com\/huascarmendez1\/cord19csv), also of same authorship of this.\n\nThe preprocessing of the data further consisted of filtering the documents that specifically talk about the covid-19 disease and its other names, as well as that they dealt with related risk factors, among other general data review, counting and cleaning activities.\n\nFinally, as it is clear that the results presented here are not final, it is recommended to assume them as a starting point for a complete understanding of each of the aspects that it tries to address.","74c7923d":"## Load Data","10b89cad":"Quantify documents by key terms","fa5057a8":"Pre-process input data","662952f6":"Run the matcher"}}