{"cell_type":{"71a3590e":"code","c0b23ffb":"code","b63d35b4":"code","59aa4ba2":"code","f41ff9ad":"code","04f565d5":"code","90824d32":"code","74e25d74":"code","1f1ee805":"code","109e5914":"code","931e95e3":"code","60ad8526":"code","4163a246":"markdown","634abfc2":"markdown"},"source":{"71a3590e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport cartopy.crs as ccrs\nimport cartopy.crs as ccrs\nimport cartopy.io.shapereader as shpreader\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.animation\nimport io\nimport base64\nimport codecs\nfrom IPython.display import HTML,display\nfrom mpl_toolkits.basemap import Basemap\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport os\nimport threading","c0b23ffb":"def color_from_int(num,max_value):\n    red = num\/max_value\n    blue = 1.0 - (num\/max_value)\n    green = 1.0 - (num\/max_value)\n    return (red, green, blue)\n","b63d35b4":"#Reading data\n#consider following columns from whole database\ncolumns = [\"eventid\",\"iyear\",\"imonth\",\"iday\",\"approxdate\",\"extended\",\"resolution\",\"country\",\"country_txt\",\"region\",\"region_txt\",\"provstate\",\"city\",\"latitude\",\"longitude\",\"specificity\",\"summary\",\"doubtterr\",\"alternative\",\"multiple\",\"related\",\"success\",\"suicide\",\"attacktype1_txt\",\"natlty1_txt\",\"natlty1_txt\",\"weaptype1_txt\",\"nkill\",\"nwound\",\"nkillter\",\"nwoundte\",\"property\",\"propextent\",\"propextent_txt\"]\ndf_main = pd.read_csv(\"..\/input\/globalterrorismdb_0617dist.csv\",encoding = \"ISO-8859-1\",usecols=columns,low_memory=False) #,index_col=[\"eventid\"]\ndf_main[\"victim_casualties\"] = (df_main[\"nkill\"] - df_main[\"nkillter\"]) + (df_main[\"nwound\"] - df_main[\"nwoundte\"])\ndf_main[\"terrorist_casualties\"] = df_main[\"nkillter\"] + df_main[\"nwoundte\"]\nprint(\"Total number of events records = \",df_main.shape[0])\ndisplay(df_main.sample(5))","59aa4ba2":"#Basic data analysis\nprint(\"Number of events with no recorded country = \",len(df_main[np.isnan(df_main[\"country\"])])) #0\nprint(df_main.isnull().sum())\ndf_temp = df_main[~np.isnan(df_main[\"victim_casualties\"]) & ~np.isnan(df_main[\"terrorist_casualties\"])]\n#df_temp = df_temp[df_temp[\"terrorist_casualties\"]!=0]\npd.options.mode.chained_assignment = None\ndf_temp[\"terrorist_casualties\"] = df_temp[\"terrorist_casualties\"].replace(to_replace=0,value=1) #to avoid division by zero \nprint(\"Victim casualty to Terrorist casualty ratio for {0} events with available casualty records is {1}\".format(df_temp.shape[0],np.round(df_temp[\"victim_casualties\"]\/df_temp[\"terrorist_casualties\"]).mean()))\npd.options.mode.chained_assignment = 'warn'","f41ff9ad":"#Countries with highest terrorist attacks \n#print(df_main[\"country\"].max(),df_main[\"country\"].min(),len(df_main[\"country\"].unique())) #1004,4,205\ndf_temp = df_main.groupby([\"country_txt\"])[\"eventid\"].count().reset_index(name=\"attack_count\").sort_values(\"attack_count\",ascending=False)\n#display(df_temp.head())\nmin_val = df_temp.loc[0:15][\"attack_count\"].min()\nmax_val = df_temp.loc[0:15][\"attack_count\"].max()\nplt.figure(figsize=(10,10))\nplt.title(\"Countries with highest attack counts\")\nplt.bar(x=df_temp[0:15][\"country_txt\"],height=df_temp[0:15][\"attack_count\"],align='center',color=df_temp.loc[0:15][\"attack_count\"].apply(lambda x, max_val=max_val: color_from_int(x,max_val)))\nplt.xticks(rotation='vertical')\nplt.show()","04f565d5":"#Year wise global terrorist attacks\nprint(\"We have data for years {0} to {1}\".format(df_main[\"iyear\"].min(),df_main[\"iyear\"].max()))\ndf_temp = df_main.groupby(\"iyear\")[\"eventid\"].count().reset_index(name=\"attacks\")#.sort_values(\"attacks\",ascending=False)\n#max_val = df_temp[\"attacks\"].max()\n#display(df_temp)\nplt.figure(figsize=(10,10))\nplt.title(\"Year wise attack counts\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of attacks\")\nplt.plot(df_temp[\"iyear\"],df_temp[\"attacks\"])\n#plt.bar(x=df_temp[\"iyear\"],height=df_temp[\"attacks\"],align='center',color=df_temp[\"attacks\"].apply(lambda x,max_val=max_val : color_from_int(x,max_val)))\n#plt.xticks(rotation='vertical')\nplt.show()","90824d32":"#30 years of terrorism on world map\nfig = plt.figure(figsize=(12,50))\nax = fig.add_axes([0,0,1,1]) #figure size in 0-1 bottom-left to width-height\nm = Basemap(projection='cyl',llcrnrlat=-90,llcrnrlon=-180,urcrnrlon=180,urcrnrlat=90,resolution=None)\nm.shadedrelief()\n#m.etopo()\nlats_lons = df_main[~np.isnan(df_main[\"latitude\"]) & ~np.isnan(df_main[\"longitude\"])]\nm.scatter(lats_lons[\"longitude\"],lats_lons[\"latitude\"],marker='o',c='r',s=10,latlon=True,alpha=0.5)\nplt.title(\"Global terrorism (30 years) - Attacks\")\nplt.show(block=False)","74e25d74":"#Property damage due to attacks\n#1-catastophic, 2-major, 3-minor, 4-unknown\nfig = plt.figure(figsize=(20,15))\nax = fig.add_axes([0,0,1,1])\nlats_lons = lats_lons[(lats_lons[\"property\"]==1) & (lats_lons[\"propextent\"].notnull())]\n\nlats_lons_minor = lats_lons[lats_lons[\"propextent\"] == 3.0]\nlats_lons_major = lats_lons[lats_lons[\"propextent\"] == 2.0]\nlats_lons_catas = lats_lons[lats_lons[\"propextent\"] == 1.0]\n\ncount = 0\n#line, = ax.plot([],[], '-')\n#line.set_xdata(x[:i])\nlabel_dict = {0:\"Minor\",1:\"Minor\",2:\"Major\",3:\"Catastrophic\"}\ncolor_dict = {0:'yellow',1:'yellow',2:'darkorange',3:'red'}\nsize_dict = {0:15,1:15,2:20,3:30}\n\ndef plot_loop(lats_lons):\n    global count\n    global label_dict\n    global color_dict\n    global size_dict\n    \n    #t = count%3\n    #print(\"called:\",count,len(lats_lons))\n    ax.clear()\n    label = \"\"\n    ax.set_title(\"Global terrorism Property Damage - {0}\".format(label_dict[count]))\n    m = Basemap(projection='cyl',llcrnrlat=-90,llcrnrlon=-180,urcrnrlon=180,urcrnrlat=90,resolution=None)\n    m.shadedrelief()\n    m.scatter(lats_lons[\"longitude\"],lats_lons[\"latitude\"],marker='o',c=color_dict[count],s=size_dict[count],latlon=True)\n    count = count + 1\n\nani = mpl.animation.FuncAnimation(fig, plot_loop,frames=[lats_lons_minor,lats_lons_major,lats_lons_catas],interval=2000)\nani.save('animation.gif', writer='imagemagick', fps=1)\nplt.close('all')\nfilename = 'animation.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\ndisplay(HTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii'))))\n#http:\/\/bagrow.com\/dsv\/heatmap_basemap.html","1f1ee805":"#Types of weapons used in attacks\ndf_temp = df_main.groupby(\"weaptype1_txt\")[\"eventid\"].count().reset_index(name=\"attacks\").sort_values(\"attacks\",ascending=False)\ndf_temp[\"weaptype1_txt\"].replace(\"Vehicle [\\(\\)\\.].*\",\"Vehicle\",regex=True,inplace=True)\nmax_val = df_temp[\"attacks\"].max()\ndisplay(df_temp)\nplt.figure(figsize=(10,10))\nplt.title(\"Frequency of weapons used in attacks\")\nplt.bar(x=df_temp[\"weaptype1_txt\"],height=df_temp[\"attacks\"],align='center',color=df_temp[\"attacks\"].apply(lambda x,max_val=max_val : color_from_int(x,max_val)))\nplt.xticks(rotation='vertical')\nplt.show()","109e5914":"#Which weapons have caused most damage (people and property)\ndf_temp = df_main.copy()\ndf_temp = df_temp[df_temp[\"nkill\"] != 0]\ndf_temp = df_temp[(~df_temp[\"weaptype1_txt\"].isna())]\n#df_temp = df_temp[~df_temp[\"propextent\"].isna()]\ndf_temp[\"weaptype1_txt\"].replace(\"Vehicle [\\(\\)\\.].*\",\"Vehicle\",regex=True,inplace=True)\ndf_temp = df_temp.groupby(\"weaptype1_txt\").agg({\"nkill\":np.sum,\"nwound\":np.sum})\ndf_temp[\"casualty\"] = df_temp[\"nkill\"]+df_temp[\"nwound\"]\nmax_val = df_temp[\"casualty\"].max()\ndisplay(df_temp)\nplt.figure(figsize=(10,10))\nplt.title(\"Damage done by weapons (Human)\")\nplt.bar(x=df_temp.index,height=df_temp[\"casualty\"],align='center',color=df_temp[\"casualty\"].apply(lambda x,max_val=max_val : color_from_int(x,max_val)))\nplt.xticks(rotation='vertical')\nplt.show()","931e95e3":"df_temp = df_main.copy()\ndf_temp = df_temp[(~df_temp[\"weaptype1_txt\"].isna() & (df_temp[\"property\"]==1) & (~df_temp[\"propextent\"].isna()))]\ndf_temp[\"propextent\"].replace(to_replace=[1,2,3,4],value=[1e9,1e6,1e5,0],inplace=True) \ndf_temp[\"weaptype1_txt\"].replace(\"Vehicle [\\(\\)\\.].*\",\"Vehicle\",regex=True,inplace=True)\ndf_temp = df_temp.groupby(\"weaptype1_txt\").agg({\"propextent\":np.sum})\nmax_val = df_temp[\"propextent\"].max()\nplt.figure(figsize=(10,10))\nplt.title(\"Damage done by weapons (property)\")\nplt.bar(x=df_temp.index,height=df_temp[\"propextent\"],align='center',color=df_temp[\"propextent\"].apply(lambda x,max_val=max_val : color_from_int(x,max_val)))\nplt.xticks(rotation='vertical')\nplt.show()","60ad8526":"#People of what nationality are targeted the most?\ndf_temp = df_main.copy()\ndf_temp = df_temp[~df_temp[\"natlty1_txt\"].isna()]\ndf_temp = df_temp.groupby(\"natlty1_txt\")[\"eventid\"].count().reset_index(name=\"attacks\").sort_values(\"attacks\",ascending=False)\nmax_val = df_temp[\"attacks\"].max()\nplt.figure(figsize=(10,10))\nplt.title(\"Most affected nationality\")\nplt.bar(x=df_temp[0:15][\"natlty1_txt\"],height=df_temp[0:15][\"attacks\"],align='center',color=df_temp[0:15][\"attacks\"].apply(lambda x,max_val=max_val : color_from_int(x,max_val)))\nplt.xticks(rotation='vertical')\nplt.show()\n\n#Various orgs analysis\n#Analysis of terrorist events in India coming soon ...","4163a246":"This method is used to convert an integer to RGB component based on maximum value of the feature\/field it belongs to. Need to tweak it a  bit, though it does a decent job.","634abfc2":"This kernel will take you through various insights from the data. Let us first import the necessary packages. You may find some unused packages imported as well. These are either the ones I am planning to use in future for further analysis or some packages that I didn't know about but are useful (added so that I don't forget to try them out)."}}