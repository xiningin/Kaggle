{"cell_type":{"039d43d1":"code","18c4eefe":"code","ba971543":"code","df8174be":"code","4e878cc4":"code","cf76ce3f":"code","2d7f3528":"code","bd9db8c2":"code","ef621556":"code","820c93a5":"code","cd48d06e":"code","0305f121":"code","601d328f":"code","98a17f56":"code","b85374d9":"code","18ed37e7":"code","8810fb04":"code","3ba75726":"code","7fc0824d":"code","00a3ed15":"code","408c8a90":"code","465539b9":"markdown","8932fe35":"markdown","fe530eff":"markdown","a08d293d":"markdown","c4636dd2":"markdown","56545e0c":"markdown","179cd2a5":"markdown","1da00337":"markdown","6c5d8fba":"markdown"},"source":{"039d43d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18c4eefe":"import seaborn as sns\nfrom matplotlib import pyplot as plt","ba971543":"df = pd.read_csv(\"..\/input\/kerala-covid19\/kerala_covid19.csv\")\ndf.head()","df8174be":"df.tail(10)","4e878cc4":"df.dtypes","cf76ce3f":" df[['Date','Cases']].set_index('Date').plot()","2d7f3528":" df[['Date','Deaths']].set_index('Date').plot()","bd9db8c2":"fig, ax = plt.subplots(figsize = (30,20))\nax = sns.barplot(x=\"Date\", y=\"Deaths\", data=df, errwidth = 20)","ef621556":"fig, ax = plt.subplots(figsize = (30,8))\nax = sns.barplot(x=\"Date\", y=\"Cases\",orient= \"v\",data=df) ","820c93a5":"df1 = df.iloc[1:115] #30 January 2020  to  30 June 2020 \ndf2 = df.iloc[116:299] #1 July 2020  to  31 December 2020 \ndf3 = df.iloc[299:480]#1 January  2021  to  30 June 2021 \ndf4 = df.iloc[480:] # 1 July 2021 to 31 October 2021","cd48d06e":"#Cases\nfig, ax = plt.subplots(figsize = (100,12))\nax = sns.barplot(x=\"Date\", y=\"Cases\",orient= \"v\",data=df1) ","0305f121":"#Deaths\nfig, ax = plt.subplots(figsize = (100,12))\nax = sns.barplot(x=\"Date\", y=\"Deaths\",orient= \"v\",data=df1) ","601d328f":"#Cases\nfig, ax = plt.subplots(figsize = (100,12))\nax = sns.barplot(x=\"Date\", y=\"Cases\",orient= \"v\",data=df2) ","98a17f56":"#Deaths\nfig, ax = plt.subplots(figsize = (80,12))\nax = sns.barplot(x=\"Date\", y=\"Deaths\",orient= \"v\",data=df2) ","b85374d9":"#cases\nfig, ax = plt.subplots(figsize = (100,20))\nax = sns.barplot(x=\"Date\", y=\"Cases\",orient= \"v\",data=df3) ","18ed37e7":"\nfig, ax = plt.subplots(figsize = (100,20))\nax = sns.barplot(x=\"Date\", y=\"Deaths\",orient= \"v\",data=df3) ","8810fb04":"#cases\nfig, ax = plt.subplots(figsize = (100,20))\nax = sns.barplot(x=\"Date\", y=\"Cases\",orient= \"v\",data=df4) ","3ba75726":"\nfig, ax = plt.subplots(figsize = (100,20))\nax = sns.barplot(x=\"Date\", y=\"Deaths\",orient= \"v\",data=df4) ","7fc0824d":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Create some mock data\nfig, ax1 = plt.subplots(figsize=(15,6))\n\ncolor = 'tab:red'\nax1.set_xlabel('Date')\n\nax1.set_ylabel('Total Cases', color=color)\nax1.plot(df[\"Date\"].to_numpy(), df[\"Cases\"].to_numpy(), color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\n\nax2.set_ylabel('Total Deaths', color=color)  # we already handled the x-label with ax1\nax2.plot(df[\"Date\"].to_numpy(),df[\"Deaths\"].to_numpy(), color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\n\n\nplt.show()","00a3ed15":"df5 = df[(df['Date'] == '2020-01-30') | (df['Date'] == '2020-03-31') | (df['Date'] == '2020-04-30') | (df['Date'] == '2020-05-30') | (df['Date'] == '2020-06-30') | (df['Date'] == '2020-07-31') \n| (df['Date'] == '2020-08-31') | (df['Date'] == '2020-09-30') | (df['Date'] == '2020-10-31') | (df['Date'] == '2020-11-30') | (df['Date'] == '2020-12-31') | (df['Date'] == '2021-01-31') | (df['Date'] == '2021-02-28') | (df['Date'] == '2021-03-31') | (df['Date'] == '2021-04-30') | (df['Date'] == '2021-05-31') | (df['Date'] == '2020-06-30') | (df['Date'] == '2021-07-31') | (df['Date'] == '2021-08-31') | (df['Date'] == '2021-09-30') | (df['Date'] == '2021-10-31') ]","408c8a90":"fig, ax1 = plt.subplots(figsize=(19,6))\n\ncolor = 'tab:red'\nax1.set_xlabel('Date')\n\nax1.set_ylabel('Total Cases', color=color)\nax1.plot(df5[\"Date\"].to_numpy(), df5[\"Cases\"].to_numpy(), color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\n\nax2.set_ylabel('Total Deaths', color=color)  # we already handled the x-label with ax1\nax2.plot(df5[\"Date\"].to_numpy(),df5[\"Deaths\"].to_numpy(), color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\n\n\nplt.show()","465539b9":"### 30 January 2020  to  30 June 2020 \n\n**cases** [0 to 4500 ] approx.\n**Deaths** [0 to 24]  approx.","8932fe35":"### 1 July 2020  to  31 December 2020 \n\n**cases** [2500 to 7,500 ] approx.\n**Deaths** [24 to 3042] ","fe530eff":"The problem with the above plot is that Date Description in the chart is not visible ;\nSo we will take only the ending day of the month and make a cummilative table out of it","a08d293d":"### For better vizualization of Cases and Deaths , [link text](https:\/\/)lets divide the 2 year data into 6 months each\n","c4636dd2":"# Create Combo Chart ( Two Y Axes with Different Scales)","56545e0c":"We can Infer that as the number of cumilative cases were increasing the in the same pattern Death RATES WERE ALSO INCREASING.The most spike in the number of cases as well as Deaths is being seen during April Ending (During the 2nd Wave Hit India).","179cd2a5":"### 1 July 2021 to 31 October 2021\ncases [29lakhs to 48Lakhs] approx.\n\nDeaths [13,235 TO 31,681 ]","1da00337":"### 1 January  2021  to  30 June 2021 \n\n**cases** [7,500 to 7.6 Lakh ] approx.\n**Deaths** [3,072 to 13235] ","6c5d8fba":"### Overview of Deaths and Cases from Jan 2020 to October 2021"}}