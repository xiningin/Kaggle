{"cell_type":{"eff9f211":"code","be961de7":"code","8240eea9":"code","172edefb":"code","74f55141":"code","ccbf4e4f":"code","51aa51d4":"code","bc01b979":"code","2b0dfa4e":"code","471869d3":"code","4017c1c1":"code","81a1c6c2":"code","d8c0cec6":"code","08204bbd":"code","18945982":"code","2b7dde1d":"code","52b8d138":"code","d0067f1a":"code","ad75da59":"code","7521944d":"code","51886b93":"code","0016a1dd":"code","6e47c32a":"code","df8996d8":"code","e8b2cdb7":"code","71f50c68":"code","fba364df":"code","0ccbd06c":"code","e49de46b":"code","5b65765e":"code","76a4f457":"code","3e7f613a":"code","6ffda374":"code","41ae474a":"code","ef69d3a9":"code","f7315226":"code","695377e7":"code","a7eea1f4":"code","5c87d664":"code","0ac225dc":"code","66040734":"code","ac7f297e":"code","4c590c97":"markdown","dafeb850":"markdown","a90e7b98":"markdown","f7c40b07":"markdown","1be3e0fa":"markdown","1f5b2112":"markdown","56905a4e":"markdown","8ff637db":"markdown","90935061":"markdown","62b56197":"markdown","0526b481":"markdown","a83787b0":"markdown","b751c824":"markdown","fdfbd2a2":"markdown","07d24299":"markdown","6ffbd88e":"markdown","398311af":"markdown","b0bc4fbe":"markdown","3bf96e34":"markdown","c2d25ece":"markdown","0294b51d":"markdown","2779eb74":"markdown","9bdc55ef":"markdown","2955fe5d":"markdown"},"source":{"eff9f211":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","be961de7":"#nRowsRead = 1000 # specify 'None' if want to read whole file\n# innercity.csv has 21613 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/credit-score-prediction\/CreditScore_train.csv') \ndf2 = pd.read_csv('\/kaggle\/input\/credit-score-prediction\/CreditScore_test.csv') \ndf1.dataframeName = 'CreditScore_train.csv'\ndf2.dataframeName = 'CreditScore_test.csv'\n#df_concat.dataframeName='concat_df'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","8240eea9":"df1[\"source\"] = \"train\"\ndf2[\"source\"] = \"test\"\n\ndf_concat = pd.concat([df1,df2])","172edefb":"df_concat.shape","74f55141":"df_concat.head(5)","ccbf4e4f":"df_concat.info()","51aa51d4":"df_concat.columns","bc01b979":"df_concat.dtypes","2b0dfa4e":"df_concat.isnull().any()","471869d3":"df_concat.isna().sum()","4017c1c1":"df_concat.duplicated().sum()","81a1c6c2":"df_concat.describe(include='all').T","d8c0cec6":"df_concat.count()","08204bbd":"#missing data\n#total = df1.isnull().sum().sort_values(ascending=False)\n#percent = (df1.isnull().sum()\/df1.isnull().count()).sort_values(ascending=False)\n#missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n#missing_data.head(20)\n\n#missing data\ntotal = df_concat.count()\nsumcol=df_concat.isnull().sum()\ncountcol=df_concat.isnull().count()\n\npercent = (df_concat.isnull().sum()\/countcol*100).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent,sumcol,countcol], axis=1, keys=['Total', 'Percent','Sumcol','countcol'])\n#missing_data.head(20)\nmiss_perc=missing_data.sort_values(['Percent'], axis=0, ascending=False)\nm_per = miss_perc[miss_perc.Percent > 60]\nprint(m_per)\n\n\n","18945982":"drop_cols=m_per.index\nprint(drop_cols)\n#[cols.append(i) for i in drop_cols if df[i].isnull().sum()\/row*100 > 60 ]\n#count=0\nfilt_concat_df=df_concat.drop(columns=drop_cols,axis=1)\n\n#for i in drop_cols:\n #   print(i)\n#    count=count+1\n#filt_concat_df=df_concat.drop(columns=[i],axis=1)\nprint(filt_concat_df.shape)","2b7dde1d":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","52b8d138":"#filt_concat_df.corr(\"y\")\ncorrmat=filt_concat_df.corr()\nplt.figure(figsize=(22,19))\nsns.heatmap(corrmat,vmax=0.8,square=True)\nplt.show()","d0067f1a":"#corr=filt_concat_df.corr()['y'].abs()\n\n#Using Pearson Correlation\nplt.figure(figsize=(12,10))\ncor = filt_concat_df.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","ad75da59":"#Correlation with output variable\ncor_target = abs(filt_concat_df.corr()[\"y\"])\n#Selecting highly correlated features\nrelevant_features = cor_target[cor_target<0.3]\nrelevant_features","7521944d":"type(relevant_features)\nrelevant_features.item","51886b93":"lst_key=[]\nnull_key=[]","0016a1dd":"filt_concat_df.shape","6e47c32a":"for i,j in relevant_features.items():\n    lst_key.append(i)\n#print(lst_key.count())\nfinal_df=filt_concat_df.drop(columns=lst_key,axis=1)\nprint(final_df.shape)","df8996d8":"a=final_df.isnull().any()==True","e8b2cdb7":"type(a)","71f50c68":"\nfor i,j in a.items():\n    if j==True:\n        null_key.append(i)\nprint(null_key)\n#final_df=filt_concat_df.drop(columns=lst_key,axis=1)f\n\n","fba364df":"for i in null_key:\n    final_df[i].fillna(final_df[i].mean(),inplace=True)\nfinal_df.shape    ","0ccbd06c":"train_final = final_df[final_df.source==\"train\"]\ntest_final = final_df[final_df.source==\"test\"]\nprint(train_final.shape)\nprint(test_final.shape)\ntrain_final.drop(columns=\"source\",inplace=True)\ntest_final.drop(columns=\"source\",inplace=True)","e49de46b":"%matplotlib inline\nsns.boxplot(data=train_final)","5b65765e":"%matplotlib inline\nplt.figure(figsize = (28,8))\nsns.boxplot(data=train_final)","76a4f457":"plotPerColumnDistribution(train_final, 10, 5)","3e7f613a":"print(pd.isnull(train_final).any())","6ffda374":"train_final.head()","41ae474a":"X = train_final.drop(\"y\", axis=1)\nY = train_final[\"y\"]\nprint(X.shape)\nprint(Y.shape)","ef69d3a9":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nscaler = MinMaxScaler().fit(X)\nscaled_X = scaler.transform(X)","f7315226":"from sklearn.model_selection import train_test_split\n\nseed      = 42\ntest_size = 0.20\n\nX_train, X_test, Y_train, Y_test = train_test_split(scaled_X, Y, test_size = test_size, random_state = seed)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","695377e7":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\n# user variables to tune\nfolds   = 10\nmetric  = \"neg_mean_absolute_error\"\n\n# hold different regression models in a single dictionary\nmodels = {}\nmodels[\"Linear\"]        = LinearRegression()\nmodels[\"Lasso\"]         = Lasso()\nmodels[\"Ridge\"]         = Ridge()\nmodels[\"ElasticNet\"]    = ElasticNet()\nmodels[\"DecisionTree\"]  = DecisionTreeRegressor()\nmodels[\"KNN\"]           = KNeighborsRegressor()\nmodels[\"RandomForest\"]  = RandomForestRegressor()\nmodels[\"AdaBoost\"]      = AdaBoostRegressor()\nmodels[\"GradientBoost\"] = GradientBoostingRegressor()\nmodels[\"XGBoost\"] = XGBRegressor()\n\n# 10-fold cross validation for each model\nmodel_results = []\nmodel_names   = []\nfor model_name in models:\n\tmodel   = models[model_name]\n\tk_fold  = KFold(n_splits=folds, random_state=seed)\n\tresults = cross_val_score(model, X_train, Y_train, cv=k_fold, scoring=metric)\n\t\n\tmodel_results.append(results)\n\tmodel_names.append(model_name)\n\tprint(\"{}: {}, {}\".format(model_name, round(results.mean(), 3), round(results.std(), 3)))\n\n# box-whisker plot to compare regression models\nfigure = plt.figure(figsize = (20,8))\n\nfigure.suptitle('Regression models comparison')\naxis = figure.add_subplot(111)\nplt.boxplot(model_results)\naxis.set_xticklabels(model_names, rotation = 45, ha=\"right\")\naxis.set_ylabel(\"Mean Absolute Error (MAE)\")\nplt.margins(0.05, 0.1)\n","a7eea1f4":"model = GradientBoostingRegressor()\nmodel.fit(X_train,Y_train)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\nerror_percent = np.mean(np.abs((Y_train - train_predict) \/ Y_train)) * 100\nprint(\"MAPE - Mean Absolute Percentage Error (TRAIN DATA): \",error_percent )\nY_train, train_predict = np.array(Y_train), np.array(train_predict)","5c87d664":"model = RandomForestRegressor()\nmodel.fit(X_train,Y_train)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\nerror_percent = np.mean(np.abs((Y_train - train_predict) \/ Y_train)) * 100\nprint(\"MAPE - Mean Absolute Percentage Error (TRAIN DATA): \",error_percent )\nY_train, train_predict = np.array(Y_train), np.array(train_predict)","0ac225dc":"model = RandomForestRegressor()\nmodel.fit(X_test,Y_test)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\n    \nerror_percent = np.mean(np.abs((Y_test - test_predict) \/ Y_test)) * 100\nprint(\"MAPE - Mean Absolute Percentage Error (TEST DATA): \",error_percent )\nY_test, test_predict = np.array(Y_test), np.array(test_predict)\n\n#print(\"Mape - Train:\" , np.mean(np.abs((Y_train,train_predict))))\n#print(\"Mape - Test:\" ,np.mean(np.abs((Y_test,test_predict))))\n","66040734":"model = GradientBoostingRegressor()\nmodel.fit(X_test,Y_test)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\n    \nerror_percent = np.mean(np.abs((Y_test - test_predict) \/ Y_test)) * 100\nprint(\"MAPE - Mean Absolute Percentage Error (TEST DATA): \",error_percent )\nY_test, test_predict = np.array(Y_test), np.array(test_predict)\n\n#print(\"Mape - Train:\" , np.mean(np.abs((Y_train,train_predict))))\n#print(\"Mape - Test:\" ,np.mean(np.abs((Y_test,test_predict))))\n","ac7f297e":"# plot between predictions and Y_test\nx_axis = np.array(range(0, test_predict.shape[0]))\nplt.figure(figsize=(20,10))\nplt.plot(x_axis, test_predict, linestyle=\"--\", marker=\"o\", alpha=0.7, color='r', label=\"predictions\")\nplt.plot(x_axis, Y_test, linestyle=\"--\", marker=\"o\", alpha=0.7, color='g', label=\"Y_test\")\nplt.xlabel('Row number')\nplt.ylabel('PRICE')\nplt.title('Predictions vs Y_test')\nplt.legend(loc='lower right')","4c590c97":"We can check the datatype of each column using dtypes to make sure every column has numeric datatype. If a column has different datatype such as string or character, we need to map that column to a numeric datatype such as integer or float. For this dataset, luckily there is no such column.","dafeb850":"## Descriptive Analysis\n\nLet's check the file: ..\/input\/\n\nIt is an important first step for conducting statistical analysis. It gives an idea of the distribution of the data, helps us to detect outliers and typos, and identify associations among variables, thus preparing you for conducting further statistical analyses","a90e7b98":"We will use pandas and scikit-learn to load and explore the dataset. The dataset can easily be loaded from scikit-learn\u2019s datasets module using read_csv function.","f7c40b07":"We could still tune different regression models used in this example using scikit-learn\u2019s GridSearchCV() function. By tuning, we mean trying out different hyper-parameters for each model.","1be3e0fa":"Now, we will split the data into train and test set. We can easily do this using scikit-learn\u2019s train_test_split() function using a test_size parameter.","1f5b2112":"We can visualize the predictions made by our best model and the original targets Y_test using the below code.","56905a4e":"View the above Box plot clearly by adding figsize","8ff637db":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made.","90935061":"## Density plot\n\nDensity plot is another univariate plot that draws a histogram of the data distribution and fits a Kernel Density Estimate (KDE).\n\nA histogram is a graphical representation of a frequency distribution where data points are organized as bins, plotted with values along the x-axis and the count of data points in each bin along the y-axis.\n\n## Scatter plot\n\nScatter plot is used to understand relationship between two different attributes in the dataset. Below we have compared PRICE (target) vs each of the attribute in the dataset.","62b56197":"## Training Regression Model\n\nBy looking at the dataset, we simply can\u2019t suggest the best Regression Model for this problem. So, we will try out different Regression models available in scikit-learn with a k-fold cross validation method.\n\nlet's assume k = 10 (k-fold cross validation)\n\nIt means we split the training data into train and test data using a test_size parameter for 10-folds. Each fold will have different samples that are not present in other folds. By this way, we can throughly train our model on different samples in the dataset.\n\nBefore doing anything, we will split our dataframe df into features X and target Y.","0526b481":"There is 1 csv file in the current version of the dataset:","a83787b0":"Distribution graphs (histogram\/bar graph) of sampled columns:","b751c824":"Wow, there is no null values in the given Dataset. \ud83d\ude1c","fdfbd2a2":"## Visualize the dataset\n\nNow you're ready to read in the data and use the plotting functions to visualize the data.\n\nWe will use two types of visualization strategy namely univariate plots and bivariate plots. As the name suggests, univariate plot is used to visualize a single column or an attribute whereas bivariate plot is used to visualize two columns or two attributes.\n\n## Box plot\n\nA box-whisker plot is a univariate plot used to visualize a data distribution.\n\n* * The ends of whiskers are the maximum and minimum range of data distribution.\n* The central line in the box is the median of the entire data distribution.\n* The right and left edges in the box are the medians of data distribution to the right and left from the central median, respectively.\n","07d24299":"Now, we will understand the statistical summary of the dataset using the describe() function. Using this function, we can understand the count, min, max, mean and standard deviation for each attribute (column) in the dataset. \n\nEach of these can also be displayed individually using df.count(), df.min(), df.max(), df.median() and df.quantile(q).","6ffbd88e":"## Correlation\n\nFinding correlation between attributes is a highly useful way to check for patterns in the dataset. Pandas offers three different ways to find correlation between attributes (columns). The output of each of these correlation functions fall within the range [-1, 1].\n\n    1 - Positively correlated\n    -1 - Negatively correlated.\n    0 - Not correlated.\n    \nWe will use df.corr() function to compute the correlation between attributes\n","398311af":"## Choosing the best model\n\nBased on the above comparison, we can see that RandamForest and  Gradient Boosting Regression model outperforms all the other regression models. So, we will choose it as the best Regression Model for this problem.","b0bc4fbe":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","3bf96e34":"Find the dimension of given data\n","c2d25ece":"We can easily convert the dataset into a pandas dataframe to perform exploratory data analysis. Simply pass in the dataset.data as an argument to pd.DataFrame(). We can view the first 5 rows in the dataset using head() function.","0294b51d":"## Missing data\nImportant questions when thinking about missing data:\n\n* How prevalent is the missing data?\n* Is missing data random or does it have a pattern?\n\nThe answer to these questions is important for practical reasons because missing data can imply a reduction of the sample size. This can prevent us from proceeding with the analysis. Moreover, from a substantive perspective, we need to ensure that the missing data process is not biased and hidding an inconvenient truth.\n\nSometimes, in a dataset we will have missing values such as NaN or empty string in a cell. We need to take care of these missing values so that our machine learning model doesn\u2019t break. To handle missing values, there are three approaches followed.\n\n    Replace the missing value with a large negative number (e.g. -999).\n    Replace the missing value with mean of the column.\n    Replace the missing value with median of the column.\n\nTo find if a column in our dataset has missing values, you can use pd.isnull(df).any() which returns a boolean for each column in the dataset that tells if the column contains any missing value. In this dataset, there are no missing values!","2779eb74":"Let\u2019s dive into Regression. We will use different Regression models offered by scikit-learn to produce a baseline accuracy for this problem. \n\nWe will use the MAE (Mean Absolute Error) as the performance metric for the regression models.","9bdc55ef":"Let's take a quick look at what the data looks like:","2955fe5d":"As we see different data distributions, we will standardize the dataset using StandardScaler function in scikit-learn. This is a useful technique where the attributes are transformed to a standard gaussian distribution with a mean of 0 and a standard deviation of 1."}}