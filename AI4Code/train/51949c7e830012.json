{"cell_type":{"8812512a":"code","b1347f31":"code","b488e995":"code","1369b057":"code","b4b71450":"code","4d7dc3b5":"code","9d35a54d":"code","5cf41a09":"code","5ccdbd64":"code","c6847c8a":"code","4433b41d":"code","741b7b6a":"code","f861991e":"code","34a9f65c":"code","8049b107":"code","cf307088":"code","142de1d0":"code","4e699cd5":"code","97ee5910":"code","8ecb9bf8":"code","f9cbd09a":"code","28ed7e75":"markdown","b2c374c2":"markdown","da7466ef":"markdown","f096f213":"markdown","e9e5c02d":"markdown","65678c96":"markdown","f9051c90":"markdown","c7dd6c98":"markdown","0cb95db6":"markdown","83804bd0":"markdown","e8c38117":"markdown"},"source":{"8812512a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1347f31":"with open('..\/input\/titanic\/train.csv', 'r', encoding='utf-8') as f:\n    train = pd.read_csv(f)\n    train.name = 'Train'\n    \nwith open('..\/input\/titanic\/test.csv', 'r', encoding='utf-8') as f:\n    test = pd.read_csv(f)\n    test.name = 'Test'\n    \ntrain.head(10) # train set","b488e995":"test.head(10) # test set","1369b057":"train.info()","b4b71450":"train.describe(include='all')","4d7dc3b5":"train[['Pclass', 'Survived']].groupby('Pclass').mean().sort_values(by='Survived', ascending=False) # with Pclass","9d35a54d":"train[['Sex', 'Survived']].groupby('Sex').mean().sort_values(by='Survived', ascending=False) # with gender","5cf41a09":"train[['Parch', 'Survived']].groupby('Parch').mean().sort_values(by='Survived', ascending=False) # with parents or children","5ccdbd64":"train[['SibSp', 'Survived']].groupby('SibSp').mean().sort_values(by='Survived', ascending=False) # with siblings or spouses","c6847c8a":"\n\ntrain[['Embarked', 'Survived']].groupby('Embarked').mean().sort_values(by='Survived', ascending=False) # with embarked location\n\n","4433b41d":"import seaborn as sb\nsb.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","741b7b6a":"sb.factorplot(x='Survived',col='Sex',kind='count',data=train)","f861991e":"sb.countplot(x='Survived',hue='Pclass',data=train)","34a9f65c":"sb.countplot(x='SibSp',data=train)","8049b107":"sb.countplot(x='Age',data=train)","cf307088":"sb.boxplot(x='Pclass',y='Age',data=train,palette='winter')","142de1d0":"sb.violinplot(x='Sex',y='Age',hue='Survived',data=train,split=True)","4e699cd5":"def impute(cols):\n    Age = cols[0]\n    Pclass=cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 38\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n        \n    else:\n        return Age","97ee5910":"train['Age']=train[['Age','Pclass']].apply(impute,axis=1)","8ecb9bf8":"train.drop('Cabin',axis=1,inplace=True)","f9cbd09a":"sb.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","28ed7e75":"As we can see from the diagram the column \u2018**Age**\u2019 and \u2018**Cabin**\u2019 have got null values. While \u2018Cabin\u2019 has huge amount null values, \u2018Age\u2019 has moderate amount of null values.","b2c374c2":"**Pclass 3 were more likely to be survived. It was meant for the richer people while Pclass 1 were the most likely victims which was relatively cheaper than class 3.**","da7466ef":"**This graph shows the mean age for each of the Pclass. We can impute the same for missing \u2018Age\u2019 values.**","f096f213":"**Data**\n* survival \tSurvival \t    0 = No, 1 = Yes\n* pclass \t    Ticket class \t1 = 1st, 2 = 2nd, 3 = 3rd\n* embarked \tPort of Embarkation \tC = Cherbourg, Q = Queenstown, S = Southampton\n* sibsp \t    # of siblings \/ spouses aboard the Titanic\n* parch \t# of parents \/ children aboard the Titanic\n* ticket \tTicket number\n* fare \tPassenger fare\n* cabin \tCabin number","e9e5c02d":"**pclass** - Ticket class : 1 = 1st, 2 = 2nd, 3 = 3rd","65678c96":"Most of the passengers who survived tend to have had less family members, there is a disparity between the genders of the passengers who survived, and a steady difference in the survival rate of the passengers as compared to the classes.","f9051c90":"**embarked** - Port of Embarkation : C = Cherbourg, Q = Queenstown, S = Southampton","c7dd6c98":"**females were given priority while saving passengers**","0cb95db6":"**sibsp** - # of siblings \/ spouses aboard the Titanic","83804bd0":"# Exploratory Data Analysis in Titanic Data Set","e8c38117":"**parch** - # of parents \/ children aboard the Titanic"}}