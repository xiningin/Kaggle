{"cell_type":{"26e59090":"code","74528254":"code","030783d1":"code","96dfe41b":"code","d3f685ba":"code","c5060f91":"code","482d3b18":"code","e7d72fe8":"code","d8971998":"code","e2c48151":"code","a250ef17":"code","4304eda1":"code","8c8a993b":"code","0f91663d":"code","df033d7e":"code","edec131f":"code","f2e6eaef":"code","23e56631":"code","a2b25c92":"code","9a99ad31":"code","07079132":"code","42ba3a79":"code","30339580":"code","ab1605ba":"code","99cbb7d4":"code","9ae0f36d":"code","7d341427":"code","2f37a1cd":"code","20250629":"code","d52db5f7":"code","97790e37":"markdown","2b29fe61":"markdown","f85cc728":"markdown","e62972ec":"markdown","a6524899":"markdown","bd2205cf":"markdown","072d295a":"markdown","ba6a1da8":"markdown","4c17a454":"markdown","7ba93bd6":"markdown","a98cb635":"markdown","df850c82":"markdown","ff2f32b2":"markdown","ce4e55a5":"markdown"},"source":{"26e59090":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set_style('darkgrid')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74528254":"df= pd.read_csv('\/kaggle\/input\/ccdata\/CC GENERAL.csv')\ndf.head()","030783d1":"df.info()","96dfe41b":"df.drop('CUST_ID', axis=1, inplace=True)","d3f685ba":"df.isna().sum()","c5060f91":"df.dropna(subset= ['CREDIT_LIMIT'], inplace=True)","482d3b18":"df.isna().sum()","e7d72fe8":"df.info()","d8971998":"df['MINIMUM_PAYMENTS'].fillna(df['MINIMUM_PAYMENTS'].median(), inplace=True)","e2c48151":"df.isna().sum()","a250ef17":"i=1\nplt.figure(figsize= (20,40))\nfor col in df.columns:\n    plt.subplot(9,2,i)\n        \n    sns.distplot(df[col])\n    \n    i=i+1\nplt.show()","4304eda1":"for col in df.columns:\n    print(col)\n    print({df[col].skew()})","8c8a993b":"i=1\nplt.figure(figsize=(20,40))\nfor col in df.columns:\n    plt.subplot(9,2,i)\n    df[col]= np.sqrt(df[col])\n    sns.distplot(df[col])\n    i=i+1\n    \nplt.show()","0f91663d":"df","df033d7e":"plt.figure(figsize=(12,12))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')","edec131f":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nss= StandardScaler()\ndf= ss.fit_transform(df)\n\npca= PCA()\npca.fit(df)\n","f2e6eaef":"plt.plot(pca.explained_variance_ratio_.cumsum())","23e56631":"pca= PCA(n_components=6)\nX= pca.fit_transform(df)","a2b25c92":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nplt.figure(figsize=(15,10))\ndistortions=[]\nsil_scores=[]\nfor i in range(2,30):\n    kmeans= KMeans(n_clusters=i, n_init=10, init= 'k-means++', algorithm='full', max_iter=300)\n    kmeans.fit(X)\n    distortions.append(kmeans.inertia_)\n    label= kmeans.labels_\n    sil_scores.append(silhouette_score(X, label))\nplt.plot(np.arange(2,30,1), distortions, alpha=0.5)\nplt.plot(np.arange(2,30,1), distortions,'o' ,alpha=0.5)\nplt.show()","9a99ad31":"plt.figure(figsize=(15,10))\nplt.plot(np.arange(2,30,1), sil_scores)\nplt.show()","07079132":"df","42ba3a79":"kmeans= KMeans(n_clusters=5, n_init=10, init= 'k-means++', algorithm='full', max_iter=300)\nkmeans.fit(X)\nlabels= kmeans.labels_","30339580":"df","ab1605ba":"pca= PCA(n_components=2)\nX2= pca.fit_transform(df)","99cbb7d4":"pca_df = pd.DataFrame(data=X2, columns=['pca1','pca2'])\npca_df['labels']= labels\npca_df.head()","9ae0f36d":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x='pca1', y='pca2', hue='labels', data=pca_df, palette='bright')","7d341427":"kmeans= KMeans(n_clusters=3, n_init=10, init= 'k-means++', algorithm='full', max_iter=300)\nkmeans.fit(X)\nlabels= kmeans.labels_","2f37a1cd":"pca= PCA(n_components=2)\nX2= pca.fit_transform(df)","20250629":"pca_df = pd.DataFrame(data=X2, columns=['pca1','pca2'])\npca_df['labels']= labels\npca_df.head()","d52db5f7":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x='pca1', y='pca2', hue='labels', data=pca_df, palette='bright')","97790e37":"**We use PCA again so that we can reduce the data to 2 components, in order to visualize our clusters better**","2b29fe61":"**It seems that our data is skewed**\n\nTo deal with the skewness, we will transform it using square root method","f85cc728":"**We can group them using 3 or 5 clusters depending upon our use. Both can serve different purposes**","e62972ec":"# KMeans Clustering","a6524899":"**There is still skewness, but it is better than before**","bd2205cf":"# Load Data","072d295a":"**5 clusters look good. Let's try using 3 clusters also**","ba6a1da8":"**Plotting correlation heatmap to see if there are many co=related features**","4c17a454":"# Missing Values","7ba93bd6":"# Exploratory Data Analysis","a98cb635":"# Upvote and Comment if you liked my notebook :)","df850c82":"**There are many co-related features**","ff2f32b2":"# Dimensionality Reduction","ce4e55a5":"**5 looks like the right number of clusters for this problem**"}}