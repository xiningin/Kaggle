{"cell_type":{"8398058e":"code","f45d5cc5":"code","403c59c3":"code","7a584e28":"code","426076bb":"code","74a46b6e":"code","dff3ef77":"code","b0ce082a":"code","48c816b6":"code","5e905c57":"code","4effb9fd":"code","debe398f":"code","9798ee36":"code","d5611c95":"code","6956e885":"code","7cb7f151":"code","965af9f2":"code","4167a6af":"code","7ff9a00f":"code","0877b35f":"code","a446ae9d":"code","750eb3c0":"code","adbeaf35":"code","74a57714":"code","cc69323d":"code","d03f6d56":"code","d48b0aa3":"code","8b65d56a":"markdown","3508893b":"markdown","e50797d3":"markdown","5ffff14d":"markdown","f8105ba7":"markdown","7d241075":"markdown","cabfa8af":"markdown","cddee99d":"markdown","16d497f9":"markdown","a6340899":"markdown","b21de3c3":"markdown","d4adac1a":"markdown","40756273":"markdown","792c95e8":"markdown","8407fbcd":"markdown","b56dc6fd":"markdown","97ab8bd6":"markdown","1db0c6ac":"markdown"},"source":{"8398058e":"# python general\nimport pandas as pd\nimport numpy as np\nfrom collections import OrderedDict\n\n#scikit learn\n\nimport sklearn\nfrom sklearn.base import clone\n\n# model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\n# ML models\nfrom sklearn.ensemble import RandomForestRegressor\n\n# error metrics\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, median_absolute_error\n","f45d5cc5":"def mape(y_true, y_pred):\n    y_val = np.maximum(np.array(y_true), 1e-8)\n    return (np.abs(y_true -y_pred)\/y_val).mean()","403c59c3":"metrics_dict_res = OrderedDict([ ('mean abs perc error', mape) ])","7a584e28":"def regression_metrics_yin(y_train, y_train_pred, y_test, y_test_pred,\n                           metrics_dict, format_digits=None):\n    df_results = pd.DataFrame()\n    for metric, v in metrics_dict.items():\n        df_results.at[metric, 'train'] = v(y_train, y_train_pred)\n        df_results.at[metric, 'test'] = v(y_test, y_test_pred)\n\n    if format_digits is not None:\n        df_results = df_results.applymap(('{:,.%df}' % format_digits).format)\n\n    return df_results","426076bb":"numeric_features = ['Curb_Weight','year']\n\nall_numeric_features = list(numeric_features)\n\ntarget = ['Price_USD']\n\ntarget_name = 'Price_USD'","74a46b6e":" ml_model_type = 'Random Forest'\n\nregression_metric = 'mean abs perc error'\n\ndo_grid_search_cv = False\nscoring_greater_is_better = False  # THIS NEEDS TO BE SET CORRECTLY FOR CV GRID SEARCH\n\ndo_retrain_total = True\nwrite_predictions_file = False\n\n# relative size of test set\ntest_size = 0.3\nrandom_state = 33","dff3ef77":"df = pd.read_csv('\/kaggle\/input\/ihsm-sample\/train_sample.csv', index_col='vehicle_id')\n","b0ce082a":"df.head(5)","48c816b6":"df_oos = pd.read_csv('\/kaggle\/input\/ihsm-sample\/oos_sample.csv', index_col='vehicle_id')","5e905c57":"df_oos.head()","4effb9fd":"# summary statistics\ndf[numeric_features + target].describe()","debe398f":"features = numeric_features\nmodel_columns = features + [target_name]\nlen(model_columns)","9798ee36":"#dataframe for further processing\ndf_proc = df[model_columns].copy()\ndf_proc.shape","d5611c95":"X_train, X_test, y_train, y_test = train_test_split(df_proc[features], df_proc[target_name], \n                                                    test_size=test_size, random_state=random_state)\n\nprint(X_train.shape)\nprint(X_test.shape)","6956e885":"   \nif ml_model_type == 'Random Forest':\n\n    model_hyper_parameters_dict = OrderedDict(n_estimators=10, \n                                              max_depth=4, \n                                              min_samples_split=2, \n                                              max_features='sqrt',\n                                              min_samples_leaf=1, \n                                              random_state=random_state, \n                                              n_jobs=4)\n   \n    regressor = RandomForestRegressor(**model_hyper_parameters_dict)\n        \nbase_regressor = clone(regressor)    \n","7cb7f151":"regressor.fit(X_train, y_train)","965af9f2":"y_train_pred = regressor.predict(X_train)\ny_test_pred = regressor.predict(X_test)","4167a6af":"y_train_pred","7ff9a00f":"df_regression_metrics = regression_metrics_yin(y_train, y_train_pred, y_test, y_test_pred,\n                                               metrics_dict_res, format_digits=3)\n\ndf_output = df_regression_metrics.copy()\ndf_output.loc['Counts','train'] = len(y_train)\ndf_output.loc['Counts','test'] = len(y_test)\ndf_output","0877b35f":"df_oos.head()","a446ae9d":"df_proc_oos = df_oos[features].copy()\n#df_proc_oos[target_name] = 1","750eb3c0":"y_oos_pred = regressor.predict(df_proc_oos)","adbeaf35":"df_proc_oos.head()","74a57714":"id_col = 'vehicle_id'\ndf_out = (pd.DataFrame(y_oos_pred, columns=[target_name], index=df_proc_oos.index)\n            .reset_index()\n            .rename({'index': id_col}, axis=1))","cc69323d":"df_out.head()","d03f6d56":"df_out.shape","d48b0aa3":"df_out.to_csv('submission.csv', index=False)","8b65d56a":"##  Model definition","3508893b":"## ML model training","e50797d3":"## Define features","5ffff14d":"# Load  data\n","f8105ba7":"## Training data","7d241075":"# Import libraries","cabfa8af":"## Metrics","cddee99d":"# Global options","16d497f9":"## Apply model and produce output","a6340899":"# Model evaluation","b21de3c3":"## Out of sample data (to predict)","d4adac1a":"## Subset to relevant columns","40756273":"#  ML data preparation","792c95e8":"# Apply model to OOS data","8407fbcd":"## Numerical features","b56dc6fd":"## Train test split","97ab8bd6":"# Feature exploration","1db0c6ac":"## Train, test predictions"}}