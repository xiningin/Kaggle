{"cell_type":{"51fe2143":"code","4f10b518":"code","a80603e0":"code","ea2744c7":"code","ae940834":"code","54d2b5fa":"code","bc68ebe8":"code","7ec03e77":"code","a3124a1a":"code","2ab840cc":"code","ef1d9856":"code","2930a8bc":"code","696fc658":"code","9dea34c9":"code","63586461":"code","9f60f693":"code","124af48c":"code","76a3a100":"code","360b7c0d":"code","53c9b858":"code","95fe68d6":"code","58eeb19f":"code","95871c2b":"code","41e8e016":"code","d3bf96c3":"code","a4d17611":"code","e9e43ce7":"code","45ebadb1":"code","d28f4c6d":"code","6bed85f7":"code","92c19227":"code","64381e5c":"code","5e48c91c":"code","3457a71d":"code","a1bf089b":"code","f49cf714":"code","3ef3f172":"code","88f9dedd":"code","6db06441":"code","b7fbe44d":"code","d5cf3135":"code","4a6672cd":"code","5ff61366":"code","06d6e3a4":"code","2232bec9":"code","49aa43ac":"code","cfaab8e0":"code","5f61313d":"code","d124cad8":"code","8e2d9164":"code","360de099":"code","339e4990":"code","023e660e":"code","fb594f32":"code","1da03bd7":"code","c454e44e":"code","0928497e":"code","feef3b63":"code","06cf7aaf":"code","8243a485":"code","2212e15d":"code","9ea104b3":"code","723f68c7":"code","5077a895":"code","57e92faf":"code","be37705b":"code","5b2c57f6":"code","982b08a7":"code","0a4dd623":"code","20e0e788":"code","4abd748c":"code","dd437a48":"code","17d6f86e":"code","ff0c53e7":"code","52a26902":"code","042bc688":"code","832ba689":"code","500f214d":"code","86245f50":"code","faf01d9b":"code","53493b60":"code","965b8fb8":"code","19211ab0":"code","87badcac":"code","4e016091":"code","85e6ab9d":"code","da21e88a":"code","27316337":"code","00a6a52e":"markdown","66d93d5b":"markdown","58321453":"markdown","ceef1d3c":"markdown","9fe67909":"markdown","e3a1fb66":"markdown","0825a84a":"markdown","72877ee9":"markdown","6c0f2b7a":"markdown","9b9f33de":"markdown","ad31cf1f":"markdown","1addf305":"markdown","6abf13ae":"markdown","1de04252":"markdown","71f97dd9":"markdown","3fbcefed":"markdown","44cfe69f":"markdown","198a394d":"markdown","3a1e1476":"markdown","6beadf69":"markdown","58e72026":"markdown","4662ccdb":"markdown","0eea32e6":"markdown","3ed5f9bc":"markdown","425f37d3":"markdown","170f17b0":"markdown","e6d23df4":"markdown","92059605":"markdown","a66a8285":"markdown","dc81549a":"markdown","4cabd7d0":"markdown","13a8d968":"markdown","39870373":"markdown","35100edd":"markdown","1d6bbece":"markdown","303fa880":"markdown","18a9e714":"markdown","dbc79f1e":"markdown","8dbfc4f2":"markdown","1222c225":"markdown","57f46155":"markdown","c2e70f73":"markdown","212bab4b":"markdown","45a39b0a":"markdown","2ce93a57":"markdown","8918366b":"markdown","15721d63":"markdown","e90816a5":"markdown","bf66c805":"markdown","3c367227":"markdown","d4106946":"markdown","1b1427ed":"markdown","b3fa896a":"markdown","5b28b49d":"markdown","f9ccc527":"markdown","da9910ec":"markdown","77b4817f":"markdown","b18dbc52":"markdown","c3baee51":"markdown","ebc976c1":"markdown","25176414":"markdown","0be5a1cd":"markdown","f47cb759":"markdown","01f12dd3":"markdown","12c4c89c":"markdown"},"source":{"51fe2143":"#linear algebra\nimport numpy as np \nimport math\n\n#data tools\nfrom copy import copy\nimport pandas as pd\nfrom scipy.stats import boxcox\nfrom scipy.special import boxcox1p\nfrom scipy.special import inv_boxcox\nfrom sklearn.preprocessing import PowerTransformer, RobustScaler\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom IPython.display import Image\n\n#plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#models\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor \n\n#model interpretation modules\nimport lime\nimport lime.lime_tabular\nimport shap\nimport eli5\n\n#metrics\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n#awesome interactive map library\nimport folium\nfrom folium.plugins import HeatMap\nfrom folium.plugins import FastMarkerCluster\n\n#statistics\nfrom scipy import stats\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")","4f10b518":"Image('..\/input\/new-york-city-airbnb-png\/New York City Airbnb.png')","a80603e0":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","ea2744c7":"print(\"Dataset contains {} samples of {} features.\".format(data.shape[0],data.shape[1]))","ae940834":"data.dtypes","54d2b5fa":"data.head()","bc68ebe8":"print('Number of quantitative features: {}'.format(len([d for d in data.columns if data.dtypes[d] != 'object'])))\nprint('Number of qualitative features: {}'.format(len([d for d in data.columns if data.dtypes[d] == 'object'])))","7ec03e77":"data.drop('id', axis=1, inplace=True)\ndata.drop('host_id', axis=1, inplace=True)\ndata.drop('name', axis=1, inplace=True)\ndata.drop('host_name', axis=1, inplace=True)","a3124a1a":"top = 8\ncorr = data[['latitude', 'longitude', 'price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count','neighbourhood', 'neighbourhood_group', 'room_type', 'availability_365']].corr(method='spearman')\ntop8 = abs(corr.nlargest(top,'price')['price']).index\ncorr_top8 = data[top8].corr(method='spearman')\nplt.figure(figsize=(15,8))\nax = sns.heatmap(corr_top8, annot=True, linewidths=0.1, fmt='.2f', cmap='Reds', annot_kws={'size':12})\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.savefig('corr.png')","2ab840cc":"fig = plt.figure(figsize=(16,6))\n\nax1 = fig.add_subplot(121)\n# ax1.boxplot(data['price'])\nsns.boxplot(y = data['price'], ax=ax1, color='yellow')\ndescribe = data['price'].describe().to_frame().round(2)\n\nax2 = fig.add_subplot(122)\nax2.axis('off')\nfont_size = 16\nbbox = [0, 0, 1, 1]\ntable = ax2.table(cellText = describe.values, rowLabels = describe.index, bbox=bbox, colLabels=describe.columns)\ntable.set_fontsize(font_size)\nfig.suptitle('Distribution of prices (with outliers)', fontsize=16)\nplt.show()","ef1d9856":"fig = plt.figure(figsize=(20,5))\nsns.distplot(data['price'],color='orange')\nplt.show()","2930a8bc":"print('Skewness: {}'.format(data['price'].skew()))\n#Skewness - measure of symmetry\/assymetry of distribution. If the distribution is perfectly symmetrical, \n#the value of skewness is equal to 0. If skewness > 0 : positive, if skewness < 0 : negative\nprint('Kurtosis: {}'.format(data['price'].kurt()))\n#Kurtosis - measure of flattening distribution of a feature. ","696fc658":"sns.pairplot(data)\nplt.show()","9dea34c9":"missing_values = data.isnull().sum().sort_values(ascending=False)\npercentage_missing_values = round((data.isnull().sum()\/data.isnull().sum().sum()).sort_values(ascending=False),3)\nnull_in_data = pd.concat([missing_values, percentage_missing_values],keys=['Missing values','Percentage'],axis=1)\nnull_in_data.head(2)","63586461":"plt.figure(figsize=(10,5))\nmissing_plot = sns.barplot(x=missing_values.index[0:2],y=missing_values[0:2],palette='bright')\nmissing_plot.set_xticklabels(missing_plot.get_xticklabels(),rotation=90)\nplt.title('Missing values in dataset.')\nplt.show()","9f60f693":"data['last_review'].head()","124af48c":"data['reviews_per_month'].head()","76a3a100":"data['reviews_per_month'].fillna(value=0, inplace=True)\ndata.drop('last_review',axis=1,inplace=True)","360b7c0d":"data.isnull().sum().sum()","53c9b858":"def tukey_outliers(df, column):\n  Q1 = np.percentile(df[column], 25)\n  Q3 = np.percentile(df[column], 75)\n  IQR = Q3 - Q1\n  outlier_step = 1.5 * IQR\n  outliers_index = df[(df[column] < Q1 - outlier_step) | (df[column] > Q3 + outlier_step)].index\n  return outliers_index","95fe68d6":"outliers_index = tukey_outliers(data,'price')\ndata.drop(outliers_index, inplace=True)\ndata.reset_index(drop=True, inplace=True)","58eeb19f":"data[data['price']==0].head()","95871c2b":"print('Together we have {} listings with price equal to 0.'.format(len(data[data['price']==0])))","41e8e016":"data[data['price']==0].index","d3bf96c3":"data.drop(data[data['price']==0].index, inplace=True)","a4d17611":"data.reset_index(drop=True, inplace=True)","e9e43ce7":"NY_map = folium.Map([40.730610,-73.935242],zoom_start=10)\nHeatMap(data[['latitude','longitude']],radius=10).add_to(NY_map)\ndisplay(NY_map)","45ebadb1":"cluster_map = folium.Map([40.730610,-73.935242],zoom_start=10)\nFastMarkerCluster(data[['latitude','longitude']],radius=10).add_to(cluster_map)\ncluster_map","d28f4c6d":"listings = data['neighbourhood_group'].value_counts()\nprint(listings)","6bed85f7":"plt.figure(figsize=(12,6))\nlistings1plot=sns.countplot(data['neighbourhood_group'],order=data['neighbourhood_group'].value_counts().index)\nplt.title('Share of neighbourhoods.',size=20,pad=10)\nplt.tight_layout()","92c19227":"plt.figure(figsize=(24,10))\nlistings2plot = sns.countplot(data['neighbourhood'],order=data['neighbourhood'].value_counts().index[0:25],palette='bright')\nlistings2plot.set_xticklabels(listings2plot.get_xticklabels(),rotation=90, size=18)\nplt.title('Top 25 most popular neighborhoods from advertisements.',size=20,pad=10)\nplt.savefig('popular_neighbourhoods.png',bbox_inches='tight')\nplt.show()","64381e5c":"data[data.neighbourhood=='Williamsburg'].head(1)","5e48c91c":"data[data.neighbourhood=='Bedford-Stuyvesant'].head(1)","3457a71d":"data[data.neighbourhood=='Harlem'].head(1)","a1bf089b":"data['price'].describe()","f49cf714":"import urllib\n\ni=urllib.request.urlopen('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Neighbourhoods_New_York_City_Map.PNG')\nnyc_img=plt.imread(i)\nfig,(ax1, ax2) = plt.subplots(1,2,figsize=(32,8))\n\nax1.imshow(nyc_img, extent=[-74.258, -73.7, 40.49, 40.92])\nax2.imshow(nyc_img, extent=[-74.258, -73.7, 40.49, 40.92])\nplot1 = ax1.scatter(data['longitude'][data['price']<119], data['latitude'][data['price']<119], c=data['price'][data['price']<119], cmap='viridis', linewidth=1, alpha=0.6)\nplot2 = ax2.scatter(data['longitude'][data['price']>119], data['latitude'][data['price']>119], c=data['price'][data['price']>119], cmap='viridis', linewidth=1, alpha=0.6)\ncbar1 = fig.colorbar(plot1,ax=ax1)\ncbar2 = fig.colorbar(plot2,ax=ax2)\ncbar1.set_label('Price in USD',size=20)\ncbar2.set_label('Price in USD',size=20)\n\nax1.set_title('Listings with price below mean.', size=20, pad=10)\nax2.set_title('Listings with price above mean.', size=20, pad=10)\nplt.show()","3ef3f172":"plt.figure(figsize=(12,6))\nsns.boxplot(data=data[data.price <2000], x='neighbourhood_group', y='price', palette='bright')\nplt.title('Distribution of prices through districts limited to 2000 USD', fontsize=20)\nplt.xlabel('Neighbourhood group')\nplt.ylabel(\"Price\")\nplt.show()","88f9dedd":"data.groupby([\"neighbourhood_group\"])['price'].mean()","6db06441":"neighbourhood_mean_prices = data.groupby('neighbourhood').agg({'price': 'mean'}).sort_values('price',ascending=False).reset_index()\nfig, ax = plt.subplots(2,1,figsize=(24,16))\nneighbourhood_prices_max=sns.barplot(x=neighbourhood_mean_prices['neighbourhood'][0:25], y=neighbourhood_mean_prices['price'],palette='bright',ax=ax[0])\nneighbourhood_prices_max.set_xticklabels(neighbourhood_prices_max.get_xticklabels(),rotation=90)\nneighbourhood_prices_max.set_title(\"Top 25 most expensive neighbourhoods.\",size=20,pad=10)\nneighbourhood_prices_min=sns.barplot(x=neighbourhood_mean_prices['neighbourhood'][-25:], y=neighbourhood_mean_prices['price'],palette='bright',ax=ax[1])\nneighbourhood_prices_min.set_xticklabels(neighbourhood_prices_min.get_xticklabels(),rotation=90)\nneighbourhood_prices_min.set_title(\"Top 25 cheapest neighbourhoods.\",size=20,pad=10)\nfig.tight_layout(pad=5.0)\nplt.show()","b7fbe44d":"plt.figure(figsize = (12,6))\nsns.distplot(data[(data['minimum_nights'] <= 50) & (data['minimum_nights'] > 0)]['minimum_nights'], bins=30, color='orange')\nplt.ioff()","d5cf3135":"plt.figure(figsize=(10,6))\nsns.set_style(\"whitegrid\")\nsns.violinplot(data=data, x='room_type', y='price')\nplt.show()","4a6672cd":"fig = plt.figure(figsize=(16,6))\n\nax1 = fig.add_subplot(121)\nsns.boxplot(y = data['price'], ax=ax1, color='yellow')\ndescribe = data['price'].describe().to_frame().round(2)\n\nax2 = fig.add_subplot(122)\nax2.axis('off')\nfont_size = 16\nbbox = [0, 0, 1, 1]\ntable = ax2.table(cellText = describe.values, rowLabels = describe.index, bbox=bbox, colLabels=describe.columns)\ntable.set_fontsize(font_size)\nfig.suptitle('Distribution of price (after Tukey test)', fontsize=16)\nplt.show()","5ff61366":"dists = data[['price','latitude', 'longitude', 'minimum_nights',\n       'number_of_reviews', 'reviews_per_month',\n       'calculated_host_listings_count', 'availability_365']]\n\nfig, ax = plt.subplots(8,2,figsize=(20,40))\nbbox = [0, 0, 1, 1]\nfontsize = 15\ncolors = ['gold','blue','lawngreen','deeppink','red','orange','darkcyan','yellow']\n\nfor i in range(len(dists.columns)):\n    describe = data[dists.columns[i]].describe().to_frame().round(2)\n    sns.boxplot(y=data[dists.columns[i]],ax=ax[i][0], color=colors[i])\n    table = ax[i][1].table(cellText = describe.values, rowLabels = describe.index, bbox=bbox, colLabels=describe.columns)\n    table.set_fontsize(font_size)\n    ax[i][1].axis('off')\n    ax[i][0].title.set_text('Boxplot of {} feature'.format(dists.columns[i]))\n\n\n\nplt.show()","06d6e3a4":"dists = data[['price', 'minimum_nights',\n       'calculated_host_listings_count','number_of_reviews','reviews_per_month','availability_365']]\n\nskewed_features = []\nfor column in dists:\n    skew = abs(data[column].skew())\n    print('{:15}'.format(column), \n          'Skewness: {:05.2f}'.format(skew),'Min value: {}'.format(data[column].min()))","2232bec9":"#Yeo-Johnson transformation\npt = PowerTransformer(method='yeo-johnson')","49aa43ac":"data['price'],price_lambda = boxcox(data['price'])\nprint('\"price lambda\": {}'.format(price_lambda))","cfaab8e0":"data['minimum_nights'],lam = boxcox(data['minimum_nights'])\nprint('\"minimum_nights lambda\": {}'.format(lam))","5f61313d":"data['calculated_host_listings_count'],lam = boxcox(data['calculated_host_listings_count'])\nprint('calculated_host_listings_count: {}'.format(lam))","d124cad8":"values = data['number_of_reviews'].values\ndata1 = pd.DataFrame({'x':values})\npt.fit(data1)\nprint(pt.lambdas_)","8e2d9164":"data['number_of_reviews']= boxcox1p(data['number_of_reviews'],pt.lambdas_)\nprint('\"number_of_reviews lambda: {}\"'.format(pt.lambdas_))","360de099":"values = data['reviews_per_month'].values\ndata2 = pd.DataFrame({'x':values})\npt.fit(data2)\nprint(pt.lambdas_)","339e4990":"data['reviews_per_month']= boxcox1p(data['reviews_per_month'],pt.lambdas_)\nprint('\"reviews_per_month lambda: {}\"'.format(pt.lambdas_))","023e660e":"values = data['availability_365'].values\ndata3 = pd.DataFrame({'x':values})\npt.fit(data3)\nprint(pt.lambdas_)","fb594f32":"data['availability_365']= boxcox1p(data['availability_365'],-1.84047863)\nprint('\"availability_365 lambda: {}\"'.format(pt.lambdas_))","1da03bd7":"dists = data[['price', 'minimum_nights',\n       'calculated_host_listings_count','number_of_reviews','reviews_per_month','availability_365']]\n\nfig, ax = plt.subplots(6,2,figsize=(20,40))\nbbox = [0, 0, 1, 1]\nfontsize = 15\ncolors = ['gold','blue','lawngreen','deeppink','red','orange','darkcyan','yellow']\n\nfor i in range(len(dists.columns)):\n    describe = data[dists.columns[i]].describe().to_frame().round(2)\n    sns.boxplot(y=data[dists.columns[i]],ax=ax[i][0], color=colors[i])\n    table = ax[i][1].table(cellText = describe.values, rowLabels = describe.index, bbox=bbox, colLabels=describe.columns)\n    table.set_fontsize(font_size)\n    ax[i][1].axis('off')\n    ax[i][0].title.set_text('Boxplot of {} feature'.format(dists.columns[i]))\n\n\n\nplt.show()","c454e44e":"labelencoder = LabelEncoder()\ndata['neighbourhood'] = labelencoder.fit_transform(data['neighbourhood'])\ndata['neighbourhood_group'] = labelencoder.fit_transform(data['neighbourhood_group'])","0928497e":"data = pd.get_dummies(data)","feef3b63":"data.head()","06cf7aaf":"top = 8\ncorr = data[['latitude', 'longitude', 'price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count','neighbourhood', 'neighbourhood_group', 'room_type_Entire home\/apt', 'room_type_Private room', 'room_type_Shared room', 'availability_365']].corr(method='spearman')\ntop8 = abs(corr.nlargest(top,'price')['price']).index\ncorr_top8 = data[top8].corr(method='spearman')\nplt.figure(figsize=(15,8))\nax = sns.heatmap(corr_top8, annot=True, linewidths=0.1, fmt='.2f', cmap='Reds', annot_kws={'size':12})\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.savefig('corr_processed.png')","8243a485":"target = data['price']","2212e15d":"data.drop('price', axis=1, inplace=True)","9ea104b3":"X_train, X_test, y_train, y_test = train_test_split(data, target, test_size = .2, random_state=42)","723f68c7":"print('Dimensions of the training feature matrix: {}'.format(X_train.shape))\nprint('Dimensions of the training target vector: {}'.format(y_train.shape))\nprint('Dimensions of the test feature matrix: {}'.format(X_test.shape))\nprint('Dimensions of the test target vector: {}'.format(y_test.shape))","5077a895":"n_folds = 5\n\ndef rmse_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state = 64).get_n_splits(data)\n    return cross_val_score(model, X_train, y_train, scoring='neg_mean_squared_error', cv=kf)","57e92faf":"for LinearModel in [LinearRegression, RandomForestRegressor, XGBRegressor]:\n    if LinearModel == XGBRegressor: \n        reg = rmse_cv(XGBRegressor(objective='reg:squarederror'))\n    else: \n        reg = rmse_cv(LinearModel())\n    print('{}: {:.3f} +\/- {:.3f}'.format(LinearModel.__name__, -reg.mean(), reg.std()))","be37705b":"def rmse(actual,predicted):\n    return(np.sqrt(mean_squared_error(actual, predicted)))","5b2c57f6":"def model_scores(model, cv_model, y_train, y_test, pred_train, pred_test):\n    mse = mean_squared_error(y_test, lin_reg_pred_test)\n    results = pd.DataFrame({'Model':['{}'.format(type(model).__name__)],\n                'CV error': '{:.3f}'.format(cv_model.mean()), \n                'CV std': '{:.3f}'.format(cv_model.std()),\n                'RMSE train': [rmse(y_train, pred_train)],\n                'RMSE test': [rmse(y_test, pred_test)],\n                'R2 train': [r2_score(y_train, pred_train)],\n                'R2 test': [r2_score(y_test, pred_test)]})\n    results = results.round(decimals=4)\n\n    return results","982b08a7":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","0a4dd623":"explainer = lime.lime_tabular.LimeTabularExplainer(X_train, feature_names=data.columns, class_names=['price'], verbose=True, mode='regression')\ni = 500","20e0e788":"lin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\n\nlin_reg_cv = -rmse_cv(LinearRegression())\nlin_reg_pred_train = lin_reg.predict(X_train)\nlin_reg_pred_test = lin_reg.predict(X_test)\n\nlin_reg_results = model_scores(lin_reg, lin_reg_cv, y_train, y_test, lin_reg_pred_train, lin_reg_pred_test)\n\nlin_reg_results.style.hide_index()","4abd748c":"lin_reg.coef_","dd437a48":"eli5.show_weights(lin_reg, feature_names=list(data.columns))","17d6f86e":"exp = explainer.explain_instance(X_test[i], lin_reg.predict, num_features=5)","ff0c53e7":"exp.show_in_notebook(show_table=True)","52a26902":"rfr_reg = RandomForestRegressor(random_state=42)\nrfr_reg.fit(X_train, y_train) \n\nrfr_reg_cv = -rmse_cv(RandomForestRegressor())\nrfr_pred_train = rfr_reg.predict(X_train)\nrfr_pred_test = rfr_reg.predict(X_test)\n\nrfr_reg_results = model_scores(rfr_reg, rfr_reg_cv, y_train, y_test, rfr_pred_train, rfr_pred_test)\n\nrfr_reg_results.style.hide_index()","042bc688":"eli5.show_weights(rfr_reg, feature_names=list(data.columns))","832ba689":"exp = explainer.explain_instance(X_test[i], rfr_reg.predict, num_features=5)","500f214d":"exp.show_in_notebook(show_table=True)","86245f50":"xgb_reg = XGBRegressor(n_estimators=1000)\nxgb_reg.fit(X_train, y_train, early_stopping_rounds=5, \n             eval_set=[(X_test, y_test)], verbose=False)","faf01d9b":"xgb_reg = XGBRegressor(learning_rate=0.3,\n                      n_estimators=1000,\n                      max_depth=6, min_child_weight=1)\n\nxgb_reg_cv = -rmse_cv(xgb_reg)\n\nxgb_reg.fit(X_train, y_train)\nxgb_pred_train = xgb_reg.predict(X_train)\nxgb_pred_test = xgb_reg.predict(X_test)\n\nxgb_reg_results = model_scores(xgb_reg, xgb_reg_cv, y_train, y_test, xgb_pred_train, xgb_pred_test)\n\nxgb_reg_results.style.hide_index()","53493b60":"eli5.show_weights(xgb_reg, feature_names=list(data.columns))","965b8fb8":"exp = explainer.explain_instance(X_test[i], xgb_reg.predict, num_features=5)","19211ab0":"exp.show_in_notebook(show_table=True)","87badcac":"#Actual\ny_test = inv_boxcox(y_test, price_lambda)\ny_train = inv_boxcox(y_train, price_lambda)","4e016091":"#Predicted\nrfr_pred_train = inv_boxcox(rfr_pred_train, price_lambda)\nrfr_pred_test = inv_boxcox(rfr_pred_test, price_lambda)","85e6ab9d":"results = pd.DataFrame({\n                'MSE train': [mean_squared_error(y_train, rfr_pred_train)],\n                'MSE test': [mean_squared_error(y_test, rfr_pred_test)],\n                'RMSE train': [np.sqrt(mean_squared_error(y_train, rfr_pred_train))],\n                'RMSE test': [np.sqrt(mean_squared_error(y_test, rfr_pred_test))],\n                'R2 train': [r2_score(y_train, rfr_pred_train)],\n                'R2 test': [r2_score(y_test, rfr_pred_test)]})\nresults = results.round(decimals=4)\nresults","da21e88a":"error = pd.DataFrame({'Real Values': np.array(y_test).flatten(), 'Predicted Values': rfr_pred_test.flatten()})\nerror.head(10)","27316337":"plt.figure(figsize=(15,7))\nsns.regplot(y=rfr_pred_test, x=y_test, line_kws={\"color\": \"red\"}, color='springgreen')\nplt.title('Evaluated predictions', fontsize=15)\nplt.xlabel('Predicted values')\nplt.ylabel('Real values')\nplt.show()","00a6a52e":"### Visualization 5: Prices through neighbourhoods.","66d93d5b":"# Outliers\nTo detect ouliers in target - 'price', Tukey test will be implemented, which defines an interquartile range comprised between the 1st and 3rd quartile of the distribution values (IQR). Outliers are rows whose values are outside IQR.","58321453":"Airbnb is an online marketplace for renting and booking private accomodations. The company was conceived in 2008 after its founders rented out an air mattress in their living room, effectively turning their apartment into a bed and breakfast, to offset the high cost of rent in San Francisco. Airbnb is a shortened version of its original name, AirBedandBreakfast.com. Currently on Airbnb there are 2.9 million advertisements in around 81.000 cities and 191 countries. Airbnb is very sucessful mainly by solving following problems:\n* ****Saved money****\nHotel prices for some for us are sometimes quite high and we don\u2019t have the money to stay there. By opening up the possibility of private accommodation, the prices of accommodation costs have been reduced. Having several \u201caccomodation\u201d providers, competing for the customer, the price will always decrease. Furthermore, platform like Airbnb can concentrate thousands of places to stay in a single city. More offer, more options.\n* ****Unused space****\nMany people have unused space at home. Airbnb has made it possible to find additional income in way that we hadn't even thought about before. For a short stay, even a small sleeping space can be useful. \n* ****Genuine human touch**** \nUnlike hotels, most of Airbnb objects provide accommodation where you feel like in your own home.\n\nThanks to the enormous popularity of portal, more than 260 million guests have booked and stayed in Airbnb properties across the world.","ceef1d3c":"Dropping unecessary features.","9fe67909":"Analysing the missing values, the following conclusions can be ejected:\n - 'reviews_per_month' : fill NaN values with 0\n - 'host_name': fill NaN name with None\n - 'name' : fill NaN listing name with None\n - 'last_reviews': feature to drop","e3a1fb66":"#### Conclusion\nMore detailed boxplot confirms that the highest prices are in Brooklyn and Manhattan. \n","0825a84a":"# Convert 'object' features into quantative ones\nThere are many different districts in the dataset, so to keep them in order label encoder has been used.","72877ee9":"### Visualization 6: Room type vs price","6c0f2b7a":"### Scores sumary","9b9f33de":"## Random Forest","ad31cf1f":"### Visualization 5: Minimun nights\nBased on the heat map, we can see that the second most important feature in terms of correlation with 'price' is 'minimun nights'","1addf305":"#### Conclusion\nTwo of the three most popular districts are in Brooklyn and remaining one is in Manhattan.","6abf13ae":"#### Conclusion\nThe highest average prices of accommodation can be found in Willowbrook and the cheapest accommodations are in Bull's head.","1de04252":"## Linear Regression","71f97dd9":"# Box-Cox transformation on quantitative features\nLet's start by checking how skewed quantitative characteristics are. \n\n**Note**: We will not carry out transformations on longitude and latitude because it does not make sense. ","3fbcefed":"# Actual vs predicted values","44cfe69f":"# Distribution of price (after Tukey test) and without price equal to 0","198a394d":"Now the dataset is free of missing values.","3a1e1476":"### Preview of missing features","6beadf69":"#### Conclusion\nManhattan and Brooklyn have the highest share of accomodations.","58e72026":"### Visualization 1: Share of neighbourhoods.\nNumber of listings in particural neighbourhoods.","4662ccdb":"Distribution of rental price is:\n- Deviating from normal distribution. \n- Having appreciable positive skewness.\n- Showing peakdness.\n    \nand also:","0eea32e6":"### 'price' feature","3ed5f9bc":"### Visualization 2: Top 25 most popular neighborhoods from advertisements.","425f37d3":"### 'number_of_reviews' feature ","170f17b0":"# About Airbnb","e6d23df4":"# Zero values in 'price' \nAssuming that, you cannot rent a room for free. 0 values in target price may have a negative impact on the estimator. A good solution is to remove from the data samples whose price is 0. ","92059605":"# Overview\n\nDataset overall shape.","a66a8285":"To transform skewed features we need to use two types of Box-Cox transformation.Becouse some of features have got samples with values are near 0, this causes an error in boxcox transformation from SciPy package. It is possible to bypass this error by using boxcox1p transformation but for this type of transformation we must calculate lambda coefficient manually.","dc81549a":"Now it's cleat to see that distribution of target - 'price' looks way better. ","4cabd7d0":"For the remaining feature - 'room_type' get_dummies method will by applied on dataset.","13a8d968":"# Data cleaning\nNull values in dataset.","39870373":"## Train test split ","35100edd":"#### Conclusion\nPrivate rooms are most priced, we can conclude that most people are able to pay more for their privacy.","1d6bbece":"# Conclusions\n* Poor data quality and in particular uneven distributions of features made it difficult to build a good predictive model.\n\n* Multiple operations performed on given dataset did not bring any significant improvement in the obtained predictions of prices.\n\n* Deeper dive into given problem and extending dataset with more valuable features manifesting better correlation with target could result in obtaining better predictions.","303fa880":"## XGBoost regressor","18a9e714":"## Simple model scoring by cross validation","dbc79f1e":"# Model interpretations\nModel interpretations will be performed for the 500th data sample.\nLimeTabularExplainer prefer np.arrays as input.","8dbfc4f2":"#### Conclusion\nBased on these two plots we can see that the accommodation with the highest price can be found in Brooklyn and Manhattan. ","1222c225":"### Box-cox inversion\nTo read actual and predicted prices in dollars, price inversion is requiured. To present predicted values, Random Forest Regressor will be used. Apart from the fact of noticeable overfitting, this model achieved the best result for the test set RMSE ~ 0.51.","57f46155":"# Boxplots of particular features\nBoxplots of particular quantitative features in dataset.","c2e70f73":"### Final visualization: Evaluated predictions ","212bab4b":"### 'minimum_nights' feature","45a39b0a":"### Visualization 4: Distribution of prices in particular districts.","2ce93a57":"## Metrics for models","8918366b":"# Target - 'price'\nThe main objective of this dataset is to predict 'price' of a particular advertisement. \nSo let us take a quick preview of our target variable - 'price'.","15721d63":"# Entry visualizations\nDistribution of accomodations through heatmaps.","e90816a5":"### Visualization 3: Prices through districts.\nPrice for whole city:\n","bf66c805":"With the following transformation we are able to calculate the lambda coefficient for samples with values which are close to zero.","3c367227":"### 'reviews_per_month' feature","d4106946":" # Corrplot after all data transformations","1b1427ed":"### MSE","b3fa896a":"The mean price of an advertisement will allow to better representation of advertisements locations by scattered plots.","5b28b49d":"Many of features in dataset are really skewed. Proposed solution below.","f9ccc527":"### 'calculated_host_listings_count' feature","da9910ec":"Preview of final dataset.","77b4817f":"#### Conclusion\nBased on distplot w can see that advertisements are booked mainly for 1 to 5 days but some part of advertisements are also booked for 30 days.","b18dbc52":"As we can see from the graphs. Despite efforts, the transformation of the box cox has brought only minor improvements in case of distributions.","c3baee51":"### 'availability_365' feature","ebc976c1":"The most densely spaced advertisements are marked in red and less dense green.","25176414":"# Predictive models","0be5a1cd":"# Pairplot","f47cb759":"## Preview of features after transformations.","01f12dd3":"Corrplot clearly shows that the transformations carried out did not result in higher correlations between features and target. However, we can observe quite high correlation (considering this particular nasty data set) between room_type_Entire home\/apt and target. ","12c4c89c":"Correlations between price and most important features."}}