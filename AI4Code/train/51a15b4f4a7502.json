{"cell_type":{"3143ff89":"code","50ef625a":"code","2cfcafc6":"code","8c367d3f":"code","96da8d60":"code","75a87d9e":"code","3b103e07":"code","bf59aa7a":"code","5c72065a":"code","79376046":"markdown","2b72ff6d":"markdown","16410be1":"markdown"},"source":{"3143ff89":"# Install mljar\n!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","50ef625a":"import pandas as pd\nimport numpy as np\nfrom supervised.automl import AutoML\n\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 5)","2cfcafc6":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv', index_col=0)\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv', index_col=0)\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","8c367d3f":"def initial_prep(x):\n\n    x['CabinNumber'] = x.Cabin.str.extract(r'(\\d+)').astype('float64', copy=False).replace(r'^\\s*$', np.nan, regex=True)\n    x['CabinClass'] = x.Cabin.str.replace(r'(\\d+)', '', regex=True).str.replace(' ', '', regex=True).replace(r'^\\s*$', np.nan, regex=True)\n    x['CabinClass'] = x['CabinClass'].astype('category')\n    x['TicketNumber'] = x.Ticket.str.extract(r'(\\d+)').astype('float64', copy=False).replace(r'^\\s*$', np.nan, regex=True)\n    x['TicketPrefix'] = x.Ticket.str.replace('\\.','', regex=True).str.replace('(\\d+)', '', regex=True).str.replace(' ', '', regex=True).replace(r'^\\s*$', np.nan, regex=True)\n    x['TicketPrefix'] = x['TicketPrefix'].astype('category')\n    x['Sex'] = np.where(x['Sex'] == 'male', 1, 0)\n\n    x['Embarked'] = x['Embarked'].astype('category')\n    # conditions = [\n    #     (x[\"Embarked\"].eq(\"C\")),\n    #     (x[\"Embarked\"].eq(\"Q\")),\n    #     (x[\"Embarked\"].eq(\"S\"))\n    # ]\n    # choices = [2, 3, 1]\n    # x[\"Embarked\"] = np.select(conditions, choices)\n\n    x['NameLen'] = x.loc[:,'Name'].str.len() - 2\n    \n    x['Name2'] = [x[1] for x in x.loc[:,'Name'].str.split(',', 1)]\n    \n    x['Name2'] = x.loc[:,'Name2'].astype('category')\n    \n    x['FamilySize'] = x['SibSp'] + x['Parch'] + 1\n\n    x['IsAlone'] = np.where(x['FamilySize'] == 1, 1, 0)\n\n    x['AnyMissing'] = np.where(x.isnull().any(axis=1) == True, 1, 0)\n    \n    x['Age_Pclass'] = x['Age'] * x['Pclass']\n    \n    x = x.drop(['Ticket', 'Name', 'Cabin', 'SibSp', 'Parch'], axis = 1)\n    \n    return x","96da8d60":"train = train.pipe(initial_prep)\ntest = test.pipe(initial_prep)","75a87d9e":"X = train.drop('Survived', axis=1)\ny = train['Survived']","3b103e07":"# Reference: https:\/\/supervised.mljar.com\/features\/modes\/\nautoml  = AutoML(\n    mode=\"Compete\", \n    eval_metric=\"accuracy\",\n    total_time_limit=60*60*7,\n    algorithms=[\"Xgboost\",\"LightGBM\",\"CatBoost\"], # Boosting \n    features_selection=True,\n    validation_strategy={\n        \"validation_type\": \"kfold\",\n        \"k_folds\": 8,\n        \"shuffle\": True,\n        \"stratify\": True,\n    }\n)\nautoml.fit(X, y)","bf59aa7a":"automl.report()","5c72065a":"submission.loc[:, 'Survived'] = automl.predict(test)\nsubmission.to_csv('submission.csv', index = False)","79376046":"# MLJAR Automated Machine Learning for Humans\n\nsee: [https:\/\/github.com\/mljar\/mljar-supervised](https:\/\/github.com\/mljar\/mljar-supervised)","2b72ff6d":"# Dependencies","16410be1":"# Problem definition\n\nThe dataset is used for this competition is synthetic but based on a real dataset (in this case, the actual Titanic data!) and generated using a CTGAN.\n\nData description: \n\n| Variable        | Definition           | Key  |\n|---------------|:-------------|------:|\n|survival |\tSurvival | 0 = No, 1 = Yes |\n|pclass |\tTicket class | 1 = 1st, 2 = 2nd, 3 = 3rd |\n|sex |\tSex\t ||\n|Age |\tAge in years\t ||\n|sibsp |\t# of siblings \/ spouses aboard the Titanic\t ||\n|parch |\t# of parents \/ children aboard the Titanic\t ||\n|ticket |\tTicket number\t ||\n|fare |\tPassenger fare\t ||\n|cabin |\tCabin number\t| |\n|embarked |\tPort of Embarkation\t| C = Cherbourg, Q = Queenstown, S = Southampton |\n\n<br>\n\nWhere `survival` will be our target variable! \ud83c\udfaf\n\n<br>\n\nCheck out these notebooks:\n\n- Tuning of a Lightgbm with Bayesian Optimization using the `tidymodels` framework in R: \n    - [https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-r-eda-lightgbm-bayesopt\/](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-r-eda-lightgbm-bayesopt\/)\n- Tuning of a Lightgbm with Bayesian Optimization using the `Optuna` framework in Python: \n    - [https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-lightgbm-optuna-pipelineopt](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-lightgbm-optuna-pipelineopt)\n\n<br>\n\n<p align=\"right\"><span style=\"color:firebrick\">Dont forget the upvote if you liked the notebook! <i class=\"fas fa-hand-peace\"><\/i><\/span> <\/p>"}}