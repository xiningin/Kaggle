{"cell_type":{"8a940fdb":"code","e6e1f7dc":"code","f6c7b347":"code","876396b0":"code","533e9c7f":"code","da845ba7":"code","e0f31718":"code","9b6ac825":"code","68ad44cc":"code","2817ad98":"code","11a0d207":"code","a761e495":"code","e03bbe4a":"code","82a0708f":"code","c8b5f3c0":"code","85bda1ed":"code","a518a9c6":"code","4e32924a":"code","569df3c5":"code","f7d3e593":"code","19012b6e":"code","36a4fdf6":"code","324a0435":"code","8e6c9893":"code","5b94418e":"code","d1d2eabd":"code","d599f410":"code","fea5785a":"code","78edea78":"code","afc08ad7":"markdown","34d352a5":"markdown","ebb0539d":"markdown","847a0b95":"markdown","1b298c1c":"markdown","5b4c08bf":"markdown","1b5e9f5f":"markdown","bec2445e":"markdown","8719c830":"markdown","8ad52735":"markdown","d6a74113":"markdown","94016970":"markdown","8626daf4":"markdown","c31926f0":"markdown","e08f4b40":"markdown","3721bdaf":"markdown","104b62ef":"markdown","214bab76":"markdown","9d471b51":"markdown","9667e5ca":"markdown","cf4b1212":"markdown","f45ec637":"markdown","6e4317b9":"markdown","a2678fbb":"markdown","56cbb1ad":"markdown"},"source":{"8a940fdb":"import warnings\nwarnings.filterwarnings(\"ignore\")","e6e1f7dc":"import os\nimport json\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm.notebook import tqdm","f6c7b347":"DATA_PATH = \"..\/input\/om-ml2-21-timeseries\"\nSUBMIT_PATH = \"..\/output\/\"","876396b0":"def get_timeseries(pairs):\n    timestamps = [p[0] for p in pairs]\n    values = [p[1] for p in pairs]\n#     return pd.Series(data=values, index=timestamps)\n    return pd.Series(data=values, index=pd.RangeIndex(start=100-len(values), stop=100))\n\n\ndef get_timeseries_interpolated(pairs):\n    timestamps = [p[0] for p in pairs]\n    values = [p[1] for p in pairs]\n    res = pd.Series(index=pd.RangeIndex(start=min(timestamps), stop=100))\n    res.loc[timestamps] = values\n    return res.interpolate()","533e9c7f":"with open(os.path.join(DATA_PATH, \"time_series_train.json\")) as json_file:\n    data = json.load(json_file)","da845ba7":"timeseries_arr = np.asarray([get_timeseries(d) for d in tqdm(data)])","e0f31718":"ts_lengths = [len(ts) for ts in timeseries_arr]","9b6ac825":"DELIM_1, DELIM_2, DELIM_3 = 10, 20, 50\n\nfig, ax = plt.subplots(figsize=(12,7))\nsns.distplot(ts_lengths, ax=ax, bins=100)\n\nax.vlines([6, 17, 50], 0, 0.1, colors=['y', 'orange', 'r'], linestyles='dashed')\nax.fill_between(np.arange(2, DELIM_1+1), 0, 0.1, alpha=0.25, color=\"green\")\nax.fill_between(np.arange(DELIM_1, DELIM_2+1), 0, 0.1, alpha=0.25, color=\"yellow\")\nax.fill_between(np.arange(DELIM_2, DELIM_3+1), 0, 0.1, alpha=0.25, color=\"orange\")\nax.fill_between(np.arange(DELIM_3, 101), 0, 0.1, alpha=0.25, color=\"red\")","68ad44cc":"TwoPointTS_inds = np.argwhere([len(ts) == 2 for ts in timeseries_arr]).ravel()\nMinTS_inds = np.argwhere([2 < len(ts) <= DELIM_1 for ts in timeseries_arr]).ravel()\nLowTS_inds = np.argwhere([DELIM_1 < len(ts) <= DELIM_2 for ts in timeseries_arr]).ravel()\nMidTS_inds = np.argwhere([DELIM_2 < len(ts) <= DELIM_3 for ts in timeseries_arr]).ravel()\nHighTS_inds = np.argwhere([DELIM_3 < len(ts) for ts in timeseries_arr]).ravel()","2817ad98":"!pip install sktime pmdarima","11a0d207":"from scipy.signal import medfilt\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV, TimeSeriesSplit\nfrom sklearn.metrics import mean_absolute_error, make_scorer\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\n\nfrom sktime.performance_metrics.forecasting import  make_forecasting_scorer\nfrom sktime.forecasting.model_selection import temporal_train_test_split, ForecastingGridSearchCV, SlidingWindowSplitter, ExpandingWindowSplitter, ForecastingRandomizedSearchCV\nfrom sktime.performance_metrics.forecasting import mase_loss\nfrom sktime.performance_metrics.forecasting._classes import MetricFunctionWrapper\n\nfrom sktime.forecasting.naive import NaiveForecaster\nfrom sktime.forecasting.all import ReducedForecaster, Detrender, PolynomialTrendForecaster, TransformedTargetForecaster","a761e495":"TwoPointForecaster = NaiveForecaster(strategy=\"drift\", window_length=2)","e03bbe4a":"MinForecaster = NaiveForecaster(strategy=\"mean\", window_length=3)","82a0708f":"model = Pipeline(steps=[\n    ('polyfeatures', PolynomialFeatures(degree=1)),\n    ('scaler', StandardScaler()),\n#     ('regressor', Ridge()),\n    ('regressor', KNeighborsRegressor(n_neighbors=2, p=1)),\n#     ('regressor', RandomForestRegressor()),\n])\n\nLowForecaster = ReducedForecaster(model, scitype=\"regressor\", strategy='direct', window_length=3)\n\n\n#=============================#\n# Grid Search best forecaster #\n#=============================#\n\n\ndef get_LowForecasterGSCV(y_train):\n    \n    \n    windows = [6, 6, 8, 8, 10, 10, 12, 12, 14, 14]\n    windows_map = dict(zip(range(11, 21), windows))\n    \n    cv = SlidingWindowSplitter(\n        initial_window=windows_map[len(y_train)],\n        start_with_window=True,\n    )\n    # cv = SlidingWindowSplitter(fh = 3, window_length=3, initial_window=3)\n    # cv = ExpandingWindowSplitter(fh = 1, window_length=5, initial_window=2, start_with_window=True)\n\n    param_grid = {\n        \"window_length\": [2, 3, 4],\n        \"regressor__polyfeatures__degree\": [1, 2],\n#         \"regressor__regressor__n_estimators\": [5, 10, 15, 20],\n        \"regressor__regressor__n_neighbors\": [1, 2]\n    }\n\n    LowForecasterGSCV = ForecastingGridSearchCV(LowForecaster, cv=cv, param_grid=param_grid, scoring=MetricFunctionWrapper(mean_absolute_error))\n    \n    return LowForecasterGSCV","c8b5f3c0":"regressor = Pipeline(steps=[\n#             ('polyfeatures', PolynomialFeatures(degree=2)),\n            ('scaler', StandardScaler()),\n#             ('regressor', RandomForestRegressor()),\n#             ('regressor', Ridge())\n            ('regressor', KNeighborsRegressor(n_neighbors=4, p=1)),\n#             ('regressor', GradientBoostingRegressor())\n])\n\nMidForecaster = TransformedTargetForecaster(\n    [\n        (\"detrend\", Detrender(forecaster=PolynomialTrendForecaster(degree=1))),\n        (\n            \"forecast\",\n            ReducedForecaster(\n                regressor=regressor, scitype='regressor', window_length=3, strategy=\"recursive\"\n            ),\n        ),\n    ]\n)\n\n#=============================#\n# Grid Search best forecaster #\n#=============================#\n\n\ndef get_MidForecasterGSCV(y_train):\n\n    cv = SlidingWindowSplitter(\n        initial_window=int(len(y_train) * 0.5),\n        start_with_window=True,\n    )\n    # cv = SlidingWindowSplitter(fh = 3, window_length=3, initial_window=3)\n    # cv = ExpandingWindowSplitter(fh = 1, window_length=5, initial_window=2, start_with_window=True)\n    \n    param_grid = {\n        \"detrend__forecaster__degree\": [1, 2],\n        \"forecast__window_length\": [3, 4, 5, 6],\n#         \"forecast__regressor__regressor__n_estimators\": [10, 20, 30],\n        \"forecast__regressor__regressor__n_neighbors\": [2, 3, 4],\n    }\n\n    MidForecasterGSCV = ForecastingGridSearchCV(MidForecaster, cv=cv, param_grid=param_grid, scoring=MetricFunctionWrapper(mean_absolute_error))\n    \n    return MidForecasterGSCV","85bda1ed":"regressor = Pipeline(steps=[\n#             ('polyfeatures', PolynomialFeatures(degree=2)),\n            ('scaler', StandardScaler()),\n#             ('regressor', KNeighborsRegressor(n_neighbors=6, p=1)),\n#             ('regressor', Ridge()),\n            ('regressor', RandomForestRegressor())\n])\n\nHighForecaster = TransformedTargetForecaster(\n    [\n        (\"detrend\", Detrender(forecaster=PolynomialTrendForecaster(degree=1))),\n        (\n            \"forecast\",\n            ReducedForecaster(\n                regressor=regressor, scitype='regressor', window_length=10, strategy=\"direct\"\n            ),\n        ),\n    ]\n)\n\n#=============================#\n# Grid Search best forecaster #\n#=============================#\n\n\ndef get_HighForecasterGSCV(y_train):\n\n    cv = SlidingWindowSplitter(\n        initial_window=int(len(y_train) * 0.8),\n        start_with_window=True,\n    )\n    # cv = SlidingWindowSplitter(fh = 3, window_length=3, initial_window=3)\n    # cv = ExpandingWindowSplitter(fh = 1, window_length=5, initial_window=2, start_with_window=True)\n    \n    param_grid = {\n        \"forecast__window_length\": [10, 15, 20, 25],\n        \"forecast__regressor__regressor__n_estimators\": [20, 30, 50],\n#         \"forecast__regressor__regressor__n_neighbors\": [2, 4, 6, 8, 10],\n        \"detrend__forecaster__degree\": [1, 2]\n    }\n\n\n    HighForecasterGSCV = ForecastingGridSearchCV(HighForecaster, cv=cv, param_grid=param_grid, scoring=MetricFunctionWrapper(mean_absolute_error))\n    \n    return HighForecasterGSCV","a518a9c6":"def forecast(y_train, fh=np.arange(1,4)):\n#     fh = 1  # forecasting horizon\n    ts_length = len(y_train)\n    \n    if ts_length == 2:\n        try:\n            forecaster = TwoPointForecaster\n            forecaster.fit(y_train, fh=fh)\n        except:\n            print(\"TwoPointForecaster error\")\n    \n    elif 2 < ts_length <= DELIM_1:\n        try:\n            forecaster = MinForecaster\n            forecaster.fit(y_train, fh=fh)\n        except:\n            print(\"MinForecaster error\")\n         \n    elif DELIM_1 < ts_length <= DELIM_2:\n        try:\n#             y_train = pd.Series(medfilt(y_train, kernel_size=3), index=y_train.index)\n            forecaster = get_LowForecasterGSCV(y_train)\n            forecaster.fit(y_train, fh=fh)\n        except:\n#             print(\"LowForecaster error\")\n            forecaster = LowForecaster\n            forecaster.fit(y_train, fh=fh)\n        \n    elif DELIM_2 < ts_length <= DELIM_3:\n        try:\n            y_train = pd.Series(medfilt(y_train, kernel_size=3), index=y_train.index)\n            forecaster = get_MidForecasterGSCV(y_train)\n            forecaster.fit(y_train, fh=fh)\n        except:\n            print(\"MidForecaster error\")\n            forecaster = MidForecaster\n            forecaster.fit(y_train, fh=fh)\n        \n    elif DELIM_3 < ts_length:\n        try:\n            y_train = pd.Series(medfilt(y_train, kernel_size=3), index=y_train.index)\n            forecaster = get_HighForecasterGSCV(y_train)\n            forecaster.fit(y_train, fh=fh)\n        except:\n            print(\"HighForecaster error\")\n            forecaster = HighForecaster\n            forecaster.fit(y_train, fh=fh)\n    \n    \n    forecaster.fit(y_train, fh=fh)\n    y_pred = forecaster.predict(fh)\n    \n    y_pred[y_pred < 0] = 0\n    \n    return y_pred.round().astype(int)\n\n\ndef show_forecast(y_train, y_pred, ax):\n    y = pd.concat([y_train, y_pred])\n    ax.plot(y_train.index, y_train.values, '.-', label=f\"Train: {len(y_train)} obs\")\n    ax.plot(y[-4:].index, y[-4:].values, '.-', label=\"Predicted\")\n    ax.legend()","4e32924a":"# \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \"timeseries_arr[LowTS_inds\\MidTS_inds\\HighTS_inds]\" \u0432\u043c\u0435\u0441\u0442\u043e \"timeseries_arr\"\n# \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0438\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n\nfig, axes = plt.subplots(3,3,figsize=(15,15))\nfor i in range(1, 10):\n    y_train = timeseries_arr[LowTS_inds][0 + i] # \u0412\u043e\u0442 \u0442\u0443\u0442\n    y_pred = forecast(y_train)\n    show_forecast(y_train, y_pred, axes[(i-1)\/\/3, (i-1)%3])\n","569df3c5":"def val_metrics(ts):\n    if len(ts) <= 6:\n        return None\n        #y_train, y_test = temporal_train_test_split(y) \n    else:\n        y_train, y_test = temporal_train_test_split(ts[:-1], test_size=1) \n    y_pred = forecast(y_train, fh=1)\n    \n    return mase_loss(y_test, y_pred, y_train)","f7d3e593":"from concurrent.futures import ProcessPoolExecutor\n\nwith ProcessPoolExecutor(max_workers=16) as executor:\n    res_val_MASE = executor.map(val_metrics, timeseries_arr)","19012b6e":"res_val_MASE = np.asarray(list(res_val_MASE))","36a4fdf6":"MASE_series = pd.Series(res_val_MASE).dropna()","324a0435":"MASE_series.astype(float).describe()","8e6c9893":"fig, ax = plt.subplots(1,1,figsize=(12,7))\nax.set(xscale=\"log\")\n# ax.vlines(MASE_series.median(), 0, 3)\n# ax.vlines(MASE_series.mean(), 0, 3)\nsns.distplot(MASE_series.sort_values().astype(float).iloc[-1000:], ax=ax)","5b94418e":"submit = pd.read_csv(os.path.join(SUBMIT_PATH, \"sample_submission.csv\"))","d1d2eabd":"from concurrent.futures import ProcessPoolExecutor\n\nwith ProcessPoolExecutor(max_workers=16) as executor:\n    result = executor.map(forecast, timeseries_arr)","d599f410":"Preds = list(result)","fea5785a":"for i, vals in enumerate(Preds):\n    submit.iloc[i*3:i*3+3, 1] = vals.values","78edea78":"submit.to_csv(os.path.join(SUBMIT_PATH, \"GSCV_fh1_KNN_imputed.csv\"), index=0)","afc08ad7":"# Import data","34d352a5":"---","ebb0539d":"## Min Forecaster : $2 < l \\leq 10$","847a0b95":"---","1b298c1c":"## Train Test Split","5b4c08bf":"## High Forecaster : $50 < l$","1b5e9f5f":"> \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0432\u0443\u0445 \u0433\u0440\u0443\u043f\u043f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0430\u0438\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:\n* \u0414\u043b\u044f \u0434\u0432\u0443\u0445\u0442\u043e\u0447\u0435\u0447\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u0430\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0447\u043a\u0430\u043c\u0438 \n* \u0414\u043b\u044f __Min__ \u0440\u044f\u0434\u043e\u0432 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u043a\u043d\u043e\u043c \u0448\u0438\u0440\u0438\u043d\u043e\u0439 3\n* \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 k-\u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441 detrend'\u043e\u043c \u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u044f\u0434\u0430","bec2445e":"# Make Submission","8719c830":"> \u041d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 MASE \u043e\u0442\u044f\u0433\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u043c \u0445\u0432\u043e\u0441\u0442\u043e\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u0440\u044f\u0434\u0430\u043c\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b","8ad52735":"---","d6a74113":"# Pipeline","94016970":"---","8626daf4":"# Make Prediction","c31926f0":"## Low Forecaster : $10 < l \\leq 20$","e08f4b40":"---","3721bdaf":"# Explore Data","104b62ef":"> \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u043e\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f 3, \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430","214bab76":"---","9d471b51":"---","9667e5ca":"# Evaluate","cf4b1212":"---","f45ec637":"## Mid Forecaster : $20 < l \\leq 50$","6e4317b9":"## 2-Point Forecaster : $l = 2$","a2678fbb":"__\u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0440\u044f\u0434\u043e\u0432 \u043d\u0430 \u043f\u044f\u0442\u044c \u043f\u043e\u0434\u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u0432\u043e\u0435\u0433\u043e \u0442\u0438\u043f\u0430:__\n\n> <span style=\"color:gray\"> __Two Point__ <\/span>: \u0440\u044f\u0434\u044b \u0434\u043b\u0438\u043d\u043e\u0439 $l = 2$, $N = 608$\n\n> <span style=\"color:green\"> __Min__ <\/span>: \u0440\u044f\u0434\u044b \u0434\u043b\u0438\u043d\u043e\u0439 $2 < l \\leq 10$, $N = 4256$\n\n> <span style=\"color:yellow\"> __Low__ <\/span>: \u0440\u044f\u0434\u044b \u0434\u043b\u0438\u043d\u043e\u0439 $10 < l \\leq 20$, $N = 7431$\n\n> <span style=\"color:orange\"> __Mid__ <\/span>: \u0440\u044f\u0434\u044b \u0434\u043b\u0438\u043d\u043e\u0439 $20 < l \\leq 50$, $N = 11496$\n\n> <span style=\"color:red\"> __High__ <\/span>: \u0440\u044f\u0434\u044b \u0434\u043b\u0438\u043d\u043e\u0439 $50 < l$, $N = 6069$","56cbb1ad":"## Forecast"}}