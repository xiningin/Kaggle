{"cell_type":{"486a149c":"code","a3951b33":"code","e955f629":"code","4eca8ba1":"code","184dc1bb":"code","92ab496f":"code","f3fe9051":"code","1e96d5c6":"code","60c26de1":"code","bdc910e9":"code","5e588b3a":"code","55eb787e":"code","c4435847":"code","d5411454":"code","25f219dc":"code","454a7c0e":"code","1b91c6e4":"code","89190342":"code","e99e3a8e":"markdown","ee631155":"markdown","2fe839cf":"markdown","accdab03":"markdown","a2d430b8":"markdown","9bf57e25":"markdown","ff717973":"markdown","ac05a4f7":"markdown","a8c44acb":"markdown"},"source":{"486a149c":"import numpy as np # linear algebra\nimport pandas as pd\nimport os\nimport seaborn as sns\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a3951b33":"from IPython.display import clear_output\n!pip install dtale\n!pip install autoviz\nclear_output()","e955f629":"import dtale\nimport dtale.app as dtale_app","4eca8ba1":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","184dc1bb":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv')","92ab496f":"train_df.head()","f3fe9051":"train_df.describe()","1e96d5c6":"dtale_app.USE_NGROK = True\nd=dtale.show(train_df)\nd.main_url()","60c26de1":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\n\n# train = X.join(y)\n\nfilename = \"\"\nsep = \",\"\ndft = AV.AutoViz(\n    filename,\n    sep=\",\",\n    depVar=\"target\",\n    dfte=train_df,\n    header=0,\n    verbose=0,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=30,\n)","bdc910e9":"from sklearn.model_selection import train_test_split\nX = train_df.drop(columns = ['id', 'target'])\ny = train_df['target']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size = 0.85, random_state = 42)","5e588b3a":"import h2o\nfrom h2o.automl import H2OAutoML\n\nh2o.init()\n\nh2o_train = h2o.H2OFrame(train_df)","55eb787e":"train_df","c4435847":"h2o_train","d5411454":"h2o_train['target'] = h2o.H2OFrame(y.tolist()).asfactor()","25f219dc":"feature_columns = [x for x in h2o_train.columns if x != 'target']\ntarget_column = 'target'","454a7c0e":"aml = H2OAutoML(\n    max_models = 50,\n    seed = 2021, \n    max_runtime_secs = 8*3600,\n    nfolds = 5,\n    #exclude_algos = ['GBM']\n)\n\naml.train(\n    x = feature_columns, \n    y = target_column, \n    training_frame = h2o_train)","1b91c6e4":"aml.leaderboard","89190342":"# model_ids = list(aml.leaderboard['model_id'].as_data_frame().iloc[:, 0])\n# se = h2o.get_model(model_ids[0])\n# metalearner = h2o.get_model(se.metalearner()['name'])\n# metalearner.std_coef_plot()\n\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv')\nh2o_test = h2o.H2OFrame(test)\npreds = aml.predict(h2o.H2OFrame(test[feature_columns]))\npreds_df = h2o.as_list(preds)\npreds_df['id'] = test['id']\npreds_df = preds_df.rename(columns = {'p1': 'target'}).filter(items = ['target', 'id'])\npreds_df.to_csv('claim_prediction.csv', index = False)","e99e3a8e":" I will keep udating my notebook this month with everything new that I see and learn in this competion","ee631155":"# Modelling","2fe839cf":"# References\n\nHuge Shoutout to the owners of these notebooks !! Helped me learn a lot<br>\nDo check them out \n\nDtale : [blue7red](https:\/\/www.kaggle.com\/rhythmcam\/automatic-eda-tool-d-tale-tab-nov-2021)<br>\nH2O_AutoMl : [Suharkov](https:\/\/www.kaggle.com\/suharkov\/tps-2021-11-eda-h2o)<br>\nAutoViz : [Ankit Kalaun](https:\/\/www.kaggle.com\/ankitkalauni\/tps-nov-21-logistic-regression-autoviz\/notebook)<br>","accdab03":"## Outputs from the above website : \n![image.png](attachment:41506bc0-17c0-40be-80a5-a37662bc589e.png)\n![image.png](attachment:b168dc88-239b-4a85-9222-4c5294e56bfc.png)\n![image.png](attachment:2a013c71-478f-494a-89e1-f0a04011c376.png)\n![image.png](attachment:8dee0c5c-0094-49a7-aa12-a792610ab3ab.png)","a2d430b8":"# Helper Functions","9bf57e25":"# Importing Dependancies","ff717973":"Do upvote guys if you love the work!! It keeps me motivated and want to work harder :) \n","ac05a4f7":"# DataFrame","a8c44acb":"# EDA"}}