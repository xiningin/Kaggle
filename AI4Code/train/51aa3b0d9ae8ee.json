{"cell_type":{"a1d78e8e":"code","72b9dd5e":"code","d17e3abd":"code","72998b0d":"code","ab74bf14":"code","b45a98dc":"code","1b4ca663":"code","559e7b39":"code","c2c36238":"code","56018ea3":"code","b782fbf2":"code","c2afc54b":"code","a3e35707":"code","f3281217":"code","195e07de":"code","cbddda60":"code","6280c57d":"code","65ee4617":"code","c502421b":"code","996278bf":"code","ccd63bfb":"code","51931f45":"code","73653fa8":"code","92d2d1c9":"code","4fcf0067":"code","da693a6b":"markdown","db954c26":"markdown","a5578cf8":"markdown","0075a98e":"markdown","98a84947":"markdown"},"source":{"a1d78e8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72b9dd5e":"import matplotlib.pyplot as plt\nimport seaborn as sns","d17e3abd":"iris=pd.read_csv('..\/input\/iris\/Iris.csv')","72998b0d":"df=iris[['SepalLengthCm','PetalLengthCm','Species']]","ab74bf14":"df.rename(columns={'SepalLengthCm':'SL','PetalLengthCm':'PL'},inplace=True)","b45a98dc":"df['Species'].replace('Iris-virginica','2',inplace=True)\ndf['Species'].replace('Iris-setosa','0',inplace=True)\ndf['Species'].replace('Iris-versicolor','1',inplace=True)","1b4ca663":"df","559e7b39":"X=df.iloc[:,0:2].values\ny=df.iloc[:,-1].values","c2c36238":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","56018ea3":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()","b782fbf2":"X_train=scaler.fit_transform(X_train)\nX_test=scaler.fit_transform(X_test)","c2afc54b":"a=np.arange(start=X_train[:,0].min()-1, stop=X_train[:,0].max()+1, step=0.01)\nb=np.arange(start=X_train[:,1].min()-1, stop=X_train[:,1].max()+1, step=0.01)","a3e35707":"print(a.shape)\nprint(b.shape)","f3281217":"XX,YY=np.meshgrid(a,b)","195e07de":"print(XX.shape)\nprint(YY.shape)","cbddda60":"525*643","6280c57d":"from sklearn.tree import DecisionTreeClassifier\nclassifier=DecisionTreeClassifier()","65ee4617":"classifier.fit(X_train,y_train)","c502421b":"input_array=np.array([XX.ravel(),YY.ravel()]).T\n\nlabel=classifier.predict(input_array)","996278bf":"label","ccd63bfb":"label.shape","51931f45":"plt.contourf(XX,YY,label.reshape(XX.shape))","73653fa8":"y_train","92d2d1c9":"my_dict = { '0' : 'violet' , '1' : 'green', '2' : 'yellow'}\ny_train = [my_dict[zi] for zi in y_train]","4fcf0067":"plt.figure(figsize=(10, 6), dpi=80)\nplt.contourf(XX,YY,label.reshape(XX.shape), alpha=0.50)\nplt.scatter(x=X_train[:,0],y=X_train[:,1], c=y_train, marker='*')\nplt.xlabel(\"Sepal Length (Cm)\")\nplt.ylabel(\"Petal Length (Cm)\")\nplt.title('Decision Boundary')\nplt.show()","da693a6b":"# creating a meshgrid","db954c26":"# Decision boundary","a5578cf8":"# Plotting all the training data on the plot","0075a98e":"### Classifying every point on the meshgrid","98a84947":"# Plotting the array as an image"}}