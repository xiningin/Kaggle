{"cell_type":{"4844d086":"code","23c3bb51":"code","ca31e841":"code","c2b8ce08":"code","2269a8bf":"code","7da74fb3":"code","f63fff7f":"code","4a66a50a":"code","8f42c57e":"code","32171d58":"code","e69ad398":"code","1e2b16a9":"markdown","9b9af687":"markdown","6bdb82ef":"markdown"},"source":{"4844d086":"%%html\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css?family=Ewert|Roboto&effect=3d|ice|');\nspan {font-family:'Roboto'; color:black; text-shadow:5px 5px 5px #aaa;}  \ndiv.output_area pre{font-family:'Roboto'; font-size:110%; color:steelblue;}      \n<\/style>","23c3bb51":"import numpy as np,pandas as pd\nimport os,ast,cv2,h5py,warnings\nimport tensorflow as tf,pylab as pl\nfrom IPython.display import display,HTML\nfrom IPython.core.magic import register_line_magic\nwarnings.filterwarnings('ignore')\npl.style.use('seaborn-whitegrid')\nstyle_dict={'background-color':'gainsboro','color':'steelblue', \n            'border-color':'white','font-family':'Roboto'}\nfpath='..\/input\/quickdraw-doodle-recognition\/train_simplified\/'\nos.listdir(\"..\/input\")","ca31e841":"I=96 # image size in pixels\nS=1 # current number of the label set {1,...,34} -> {1-10,...,331-340}\nT=10 # number of labels in one set \nN=10000 # number of images with the same label in the training set\nfiles=sorted(os.listdir(fpath))\nlabels=[el.replace(\" \",\"_\")[:-4] for el in files]\nprint(labels)","c2b8ce08":"def display_drawing(data,n,S):\n    for k in range(n):  \n        pl.figure(figsize=(10,2))\n        pl.suptitle(files[(S-1)*T+k])\n        for i in range(5):\n            picture=ast.literal_eval(data[labels[(S-1)*T+k]].values[i])\n            for x,y in picture:\n                pl.subplot(1,5,i+1)\n                pl.plot(x,y,'-o',markersize=1,color='slategray')\n                pl.xticks([]); pl.yticks([])\n            pl.gca().invert_yaxis(); pl.axis('equal');\ndef get_image(data,lw=7,time_color=True):\n    data=ast.literal_eval(data)\n    image=np.zeros((280,280),np.uint8)\n    for t,s in enumerate(data):\n        for i in range(len(s[0])-1):\n            color=255-min(t,10)*15 if time_color else 255\n            _=cv2.line(image,(s[0][i]+10,s[1][i]+10),\n                       (s[0][i+1]+10,s[1][i+1]+10),color,lw) \n    return cv2.resize(image,(I,I))","2269a8bf":"nn=np.random.randint(0,T*N,3)\nnn","7da74fb3":"@register_line_magic\ndef data_compression(s):\n    S=int(s)\n    data=pd.DataFrame(index=range(N),\n                      columns=labels[(S-1)*T:S*T])\n    for i in range((S-1)*T,S*T):\n        data[labels[i]]=\\\n        pd.read_csv(fpath+files[i],\n                    index_col='key_id').drawing.values[:N]\n    display(data.head(3).T.style.set_properties(**style_dict))\n    display_drawing(data,5,S)\n    images=[]\n    for label in labels[(S-1)*T:S*T]:\n        images.extend([get_image(data[label].iloc[i]) \n                       for i in range(N)])\n    images=np.array(images,dtype=np.uint8)\n    targets=np.array([[]+N*[k] for k in range((S-1)*T,S*T)],\n                     dtype=np.int32).reshape(N*T)\n    nn=np.random.randint(0,T*N,3)\n    ll=labels[targets[nn[0]]]+', '+labels[targets[nn[1]]]+\\\n   ', '+labels[targets[nn[2]]]\n    pl.figure(figsize=(10,2))\n    pl.subplot(1,3,1); pl.imshow(images[nn[0]])\n    pl.subplot(1,3,2); pl.imshow(images[nn[1]])\n    pl.subplot(1,3,3); pl.imshow(images[nn[2]])\n    pl.suptitle('Key Points to Lines: %s'%ll)\n    pl.show()\n    h5f='QuickDrawImages%d.h5'%S\n    with h5py.File(h5f,'w') as f:\n        f.create_dataset('images',data=images)\n        f.create_dataset('targets',data=targets)\n        f.close()\n    del data,images,targets","f63fff7f":"%data_compression 1","4a66a50a":"%data_compression 2","8f42c57e":"%data_compression 3","32171d58":"%data_compression 4","e69ad398":"%data_compression 5","1e2b16a9":"<h1 style=\"color:steelblue; font-family:Ewert; font-size:150%;\" class=\"font-effect-3d\">Data Exploration<\/h1>","9b9af687":"<h1 style=\"color:steelblue; font-family:Ewert; font-size:150%;\" class=\"font-effect-3d\">Code Library, Style, and Links<\/h1>","6bdb82ef":"<h1 style=\"color:steelblue; font-family:Ewert; font-size:150%;\" class=\"font-effect-3d\">Data Compression<\/h1>"}}