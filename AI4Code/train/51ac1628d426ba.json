{"cell_type":{"c01f22ae":"code","8029737e":"code","44849b4b":"code","913d66af":"code","3e720577":"code","84f284b5":"code","522747c0":"code","8f1633d0":"code","276ea9c2":"code","be8e3809":"code","dfdc75e6":"code","05b6d5a9":"code","f8a2d2ba":"code","b69e8fc0":"code","436565f5":"code","05883f06":"code","f5a3c859":"code","e8ea33c6":"code","dd8e0012":"code","ca89d319":"code","50bef789":"code","99ea5887":"code","fe196eaa":"code","37d9b840":"code","70a16e89":"code","f71a9955":"code","9322f4f8":"code","f578b018":"code","ad0d8012":"code","52d7ae05":"code","d94451e7":"code","3ff3636c":"code","529bbbbf":"code","94f1c778":"code","0a1aefd5":"code","0acac531":"code","6b298dfb":"markdown","d8288a49":"markdown","1c996c9b":"markdown","cf40c382":"markdown","4ef5b613":"markdown","0a59aae8":"markdown","6bdf3ea6":"markdown"},"source":{"c01f22ae":"import pandas as pd\nimport datetime\nimport math as m","8029737e":"import numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","44849b4b":"train = pd.read_csv('..\/input\/train.csv')","913d66af":"test = pd.read_csv('..\/input\/test.csv')","3e720577":"pd.set_option('display.max_columns', 500)","84f284b5":"train","522747c0":"train.isnull().sum()","8f1633d0":"len(train)","276ea9c2":"test.isnull().sum()","be8e3809":"len(test)","dfdc75e6":"test.columns","05b6d5a9":"train.columns","f8a2d2ba":"train.nunique()","b69e8fc0":"test.nunique()","436565f5":"train['test'] = 0\ntest['test'] = 1","05883f06":"all_t = pd.concat([train, test], axis=0, join='outer', join_axes=None, ignore_index=False,\n          keys=None, levels=None, names=None, verify_integrity=False,\n          copy=True)","f5a3c859":"all_t = all_t.reset_index()\nall_t.drop('index',axis =1 , inplace= True)","e8ea33c6":"all_t['day'] = pd.DatetimeIndex(all_t['start_time']).day","dd8e0012":"all_t['month'] = pd.DatetimeIndex(all_t['start_time']).month","ca89d319":"all_t['seconds'] = ( pd.DatetimeIndex(all_t['start_time']).hour * 60) +  (pd.DatetimeIndex(all_t['start_time']).minute * 60)","50bef789":"all_t.drop('start_time', axis = 1 , inplace = True)","99ea5887":"all_t.isnull().sum()","fe196eaa":"all_t.dist_VT","37d9b840":"all_t['dist'] = all_t.dist.fillna(all_t.dist_VT)","70a16e89":"def impute_column(dataset, column):\n    dataset = dataset.copy()\n    day_month = pd.DataFrame(dataset.groupby(['day','month'])[column].mean())\n    month = pd.DataFrame(dataset.groupby('month')[column].mean())\n    mean = dataset[column].mean()\n\n    def firstNonNan(listfloats):\n        for item in listfloats:\n            try: \n                if m.isnan(item) == False:\n                    return item\n            except:\n                i = 0\n\n    def impute(row):\n        if m.isnan(row[column]) == True:\n            day_month_lat = day_month.loc[row[['day','month']]][column]\n            month_lat = month.loc[row['month']][column]\n\n            row[column] = firstNonNan([day_month_lat,month_lat, mean])\n            assert(m.isnan(row[column]) == False)\n        return row\n    dataset = dataset.apply(impute, axis=1)\n    print(\"{} imputed with mean\".format(column))\n    return dataset","f71a9955":"for i in ['w_temp','w_visibility','w_windspeed','w_pressure','w_precipitation','w_humidity','w_dptemp']:\n    print('i')\n    all_t = impute_column(all_t,i)","9322f4f8":"all_t['log_distance'] = np.log(all_t['dist'] + 1)","f578b018":"def label_encoder(df):\n    def numerical_features(df):\n        columns = df.columns\n        return df._get_numeric_data().columns\n\n    def categorical_features(df):\n        numerical_columns = numerical_features(df)\n        return(list(set(df.columns) - set(numerical_columns)))\n    \n    categorical = categorical_features(df)\n    # Creating the label encoder object\n    le =  LabelEncoder()\n    \n    # Iterating over the \"object\" variables to transform the categories into numbers \n    for col in categorical:\n        df[col] = le.fit_transform(df[col].astype(str))\n    return df","ad0d8012":"all_t['speed'] = all_t[all_t['test'] == 0]['delivery_time']\/all_t[all_t['test'] == 0]['dist']\nspeed_model = all_t[all_t['test'] == 0][['speed','van_model','delivery_time']].groupby('van_model').agg(['mean'])\nall_t = all_t.join(speed_model, on ='van_model')\nspeed_package = all_t[all_t['test'] == 0][['speed','packages','delivery_time']].groupby('packages').agg(['mean'])\nall_t = all_t.join(speed_package, on ='packages' , rsuffix = 'pack')","52d7ae05":"all_t['new_param'] = all_t['bearing'] * all_t['dist']","d94451e7":"all_t_e = label_encoder(all_t)","3ff3636c":"import lightgbm as lgb","529bbbbf":"def rmsle(y_true, y_pred):\n    assert len(y_true) == len(y_pred)\n    return np.sqrt(np.mean(np.power(np.log1p(y_true + 1) - np.log1p(y_pred + 1), 2)))","94f1c778":"X = np.array(all_t_e[all_t_e['test'] == 0].drop(['id', 'delivery_time','speed'], axis=1))\ny = np.log(all_t_e[all_t_e['test'] == 0]['delivery_time'].values)\nmedian_trip_duration = np.median(all_t_e[all_t_e['test'] == 0]['delivery_time'].values)\n\nprint('X.shape = ' + str(X.shape))\nprint('y.shape = ' + str(y.shape))\n\nX_test = np.array(all_t_e[all_t_e['test'] == 1].drop(['id','speed','delivery_time'], axis=1))\n\nprint('X_test.shape = ' + str(X_test.shape))\n\nprint('Training and making predictions')\nparams = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': 'rmsle',\n    'max_depth': 6, \n    'learning_rate': 0.1,\n    'verbose': 0}\nn_estimators = 600\n\nn_iters = 5\npreds_buf = []\nerr_buf = []\nfor i in range(n_iters): \n    x_train, x_valid, y_train, y_valid = train_test_split(X, y, test_size=0.10, random_state=i)\n    d_train = lgb.Dataset(x_train, label=y_train)\n    d_valid = lgb.Dataset(x_valid, label=y_valid)\n    watchlist = [d_valid]\n\n    model = lgb.train(params, d_train, n_estimators, watchlist, verbose_eval=0  )\n\n    preds = model.predict(x_valid)\n    preds = np.exp(preds)\n    preds[preds < 0] = median_trip_duration\n    err = rmsle(np.exp(y_valid), preds)\n    err_buf.append(err)\n    print('RMSLE = ' + str(err))\n    \n    preds = model.predict(X_test)\n    preds = np.exp(preds)\n    preds[preds < 0] = median_trip_duration\n    preds_buf.append(preds)\n\nprint('Mean RMSLE = ' + str(np.mean(err_buf)) + ' +\/- ' + str(np.std(err_buf)))\n# Average predictions\n","0a1aefd5":"preds = np.mean(preds_buf, axis=0)","0acac531":"subm = pd.DataFrame()\nsubm['id'] = all_t[all_t['test']==1].id.values\nsubm['delivery_time'] = preds\nsubm.to_csv('submission_lgbm_600.csv', index=False)","6b298dfb":"Bearing times distance","d8288a49":"The impute_column function imputes the missing value by :\n1st case : if value exist for same day and month replace by mean of this day and month\n2nd case : ifelse value exist for the same month replaceby mean of this month\n3rd case : else replace by general mean","1c996c9b":"> mean speed and time per each van model and each package","cf40c382":"separating start time into month day and seconds since midnight","4ef5b613":"Log of the distance as feature","0a59aae8":"Light gbm cross validated , take the avg of the 5 predictions at each fold for the test","6bdf3ea6":"Here it was applied on 'w_temp','w_visibility','w_windspeed','w_pressure','w_precipitation','w_humidity','w_dptemp' columns"}}