{"cell_type":{"96d79fec":"code","ed97dae0":"code","728a59f7":"code","22f07896":"code","e781ba5a":"code","1eaa1f63":"code","ff6d6708":"code","e1601684":"code","bc55cf07":"code","41f34ae5":"code","182ba2a8":"code","3cb68e7e":"code","19452e54":"code","42b0b1d5":"code","2b915111":"code","9647e996":"code","e0fbc567":"code","ff191ccb":"code","0852324d":"code","f381ce97":"code","da23211e":"code","00dee4eb":"code","adfc24da":"code","59e1612b":"code","1657504b":"code","5be4f6b3":"code","1212bac1":"code","8f4e65d7":"code","ade29b4c":"code","59cc6eb6":"code","58b581e0":"code","4417eb7b":"code","ed76faa4":"code","773da946":"code","9c9a7de4":"code","bec69c5f":"code","1d1f1940":"markdown","38387570":"markdown","295b5f88":"markdown","8e947b05":"markdown","8bb574e5":"markdown","ab5a5546":"markdown","1159d083":"markdown","5e460749":"markdown","25bea827":"markdown","5664e546":"markdown","ef3a40c5":"markdown","01319da0":"markdown","1efeb101":"markdown","34b94306":"markdown","503995e0":"markdown"},"source":{"96d79fec":"import numpy as np  # linear algebra\nimport pandas as pd  #\nfrom datetime import datetime\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV,Ridge,Lasso,ElasticNet\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor,RandomForestClassifier\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.svm import SVR, LinearSVC\nfrom sklearn.pipeline import make_pipeline,Pipeline\nfrom sklearn.preprocessing import RobustScaler, LabelEncoder\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nimport lightgbm as lgb\nimport os\nimport re\nimport shap\nimport pandas_profiling as ppf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport re\nfrom collections import Counter\nfrom operator import itemgetter\nimport time\nfrom itertools import product\nimport datetime as dt\nimport calendar\nimport gc\n\nRANDOM_SEED = 42","ed97dae0":"PATH = '..\/input\/competitive-data-science-predict-future-sales'\nitems = pd.read_csv(PATH + '\/items.csv')\nshops = pd.read_csv(PATH + '\/shops.csv')\ncats = pd.read_csv(PATH + '\/item_categories.csv')\ntrain = pd.read_csv(PATH + '\/sales_train.csv')\n# set index to ID to avoid droping it later\ntest  = pd.read_csv(PATH + '\/test.csv').set_index('ID')","728a59f7":"# train.date = pd.to_datetime(train.date.index)\ntrain","22f07896":"def summary_stats_table(data):\n    '''\n    a functino to summerize all types of data\n    '''\n    # count of nulls\n    missing_counts = pd.DataFrame(data.isnull().sum())\n    missing_counts.columns = ['count_null']\n\n    # numeric column stats\n    num_stats = data.select_dtypes(include=['int64','float64']).describe().loc[['count','min','max']].transpose()\n    num_stats['dtype'] = data.select_dtypes(include=['int64','float64']).dtypes.tolist()\n\n    # non-numeric value stats\n    non_num_stats = data.select_dtypes(exclude=['int64','float64']).describe().transpose()\n    non_num_stats['dtype'] = data.select_dtypes(exclude=['int64','float64']).dtypes.tolist()\n    non_num_stats = non_num_stats.rename(columns={\"first\": \"min\", \"last\": \"max\"})\n\n    # merge all \n    stats_merge = pd.concat([num_stats, non_num_stats], axis=0, join='outer', ignore_index=False, keys=None,\n              levels=None, names=None, verify_integrity=False, copy=True).fillna(\"\").sort_values('dtype')\n\n    column_order = ['dtype', 'count', 'count_null','unique','min','max','top','freq']\n    summary_stats = pd.merge(stats_merge, missing_counts, left_index=True, right_index=True)[column_order]\n    return(summary_stats)","e781ba5a":"print(train.head())\nprint(test.head())\n\n# print(items.head())\n# print(shops.head())\n# print(cats.head())\n","1eaa1f63":"summary_stats_table(train)","ff6d6708":"## Drop item_price and item_cnt_day too high\ntrain = train[train.item_price<100000] # drop 1\ntrain = train[train.item_cnt_day<1000] # drop 2\n\n## Drop negative price \ntrain = train[train.item_price > 0].reset_index(drop=True) # drop 1\n\n## The item has been returned \n# train.loc[train.item_cnt_day < -2, 'item_cnt_day'] = -3\ntrain.loc[train.item_cnt_day < 0, 'item_cnt_day'] = 0\n\n## Fuse some shop in train and test set\n# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 11, 'shop_id'] = 10\ntest.loc[test.shop_id == 11, 'shop_id'] = 10\n# \u0420\u043e\u0441\u0442\u043e\u0432\u041d\u0430\u0414\u043e\u043d\u0443 \u0422\u0420\u041a \"\u041c\u0435\u0433\u0430\u0446\u0435\u043d\u0442\u0440 \u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\" \u041e\u0441\u0442\u0440\u043e\u0432\u043d\u043e\u0439\ntrain.loc[train.shop_id == 40, 'shop_id'] = 39\ntest.loc[test.shop_id == 40, 'shop_id'] = 39\n\n","e1601684":"## Define shop city and category\nshops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\n\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops['category'] = shops['shop_name'].str.split(' ').map(lambda x:x[1]).astype(str)\n\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\n\n## Shop category\ncategory = ['\u0422\u0426', '\u0422\u0420\u041a', '\u0422\u0420\u0426', '\u0422\u041a']\nshops.category = shops.category.apply(lambda x: x if (x in category) else 'etc')\nshops.groupby(['category']).sum()\n\n## Shop city\nshops['shop_city'] = shops.city\nshops['shop_category'] = shops.category\n\nshops['shop_city'] = LabelEncoder().fit_transform(shops['shop_city'])\nshops['shop_category'] = LabelEncoder().fit_transform(shops['shop_category'])\n\nshops = shops[['shop_id','shop_city', 'shop_category']]\nshops.head()\n","bc55cf07":"## Fuse some item_category_name\ncats['type_code'] = cats.item_category_name.apply(lambda x: x.split(' ')[0]).astype(str)\ncats.loc[(cats.type_code == '\u0418\u0433\u0440\u043e\u0432\u044b\u0435') | (cats.type_code == '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b'), 'type_code'] = '\u0418\u0433\u0440\u044b'\ncats.loc[cats.type_code == 'PC', 'type_code'] = '\u041c\u0443\u0437\u044b\u043a\u0430'\n\n## Labelencoder item_category_name (main category) to type_code\ncategory = ['\u0418\u0433\u0440\u044b', '\u041a\u0430\u0440\u0442\u044b', '\u041a\u0438\u043d\u043e', '\u041a\u043d\u0438\u0433\u0438','\u041c\u0443\u0437\u044b\u043a\u0430', '\u041f\u043e\u0434\u0430\u0440\u043a\u0438', '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b', '\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435', '\u0427\u0438\u0441\u0442\u044b\u0435']\ncats['type_code'] = cats.type_code.apply(lambda x: x if (x in category) else 'etc')\ncats['type_code'] = LabelEncoder().fit_transform(cats['type_code'])\n\n## Labelencoder item_category_name (sub category) to subtype_code\ncats['split'] = cats.item_category_name.apply(lambda x: x.split('-'))\ncats['subtype'] = cats['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncats['subtype_code'] = LabelEncoder().fit_transform(cats['subtype'])\n\ncats = cats[['item_category_id','type_code', 'subtype_code']]\n","41f34ae5":"## Extract info in [] and ()\nitems['name_1'], items['name_2'] = items['item_name'].str.split('[', 1).str\nitems['name_1'], items['name_3'] = items['item_name'].str.split('(', 1).str\n\n## Replace symbol by ',])'... by ' ' \nitems['name_2'] = items['name_2'].str.replace('[^A-Za-z0-9\u0410-\u042f\u0430-\u044f]+', ' ').str.lower()\nitems['name_3'] = items['name_3'].str.replace('[^A-Za-z0-9\u0410-\u042f\u0430-\u044f]+', ' ').str.lower()\nitems = items.fillna('0')\n\n## Test\nresult_1 = Counter(' '.join(items['name_2'].values.tolist()).split(' ')).items()\nresult_1 = sorted(result_1, key=itemgetter(1))\nresult_1 = pd.DataFrame(result_1, columns=['feature', 'count'])\nresult_1 = result_1[(result_1['feature'].str.len() > 1) & (result_1['count'] > 200)]\n\nresult_2 = Counter(' '.join(items['name_3'].values.tolist()).split(\" \")).items()\nresult_2 = sorted(result_2, key=itemgetter(1))\nresult_2 = pd.DataFrame(result_2, columns=['feature', 'count'])\nresult_2 = result_2[(result_2['feature'].str.len() > 1) & (result_2['count'] > 200)]\n\nresult = pd.concat([result_1, result_2])\nresult = result.drop_duplicates(subset=['feature']).reset_index(drop=True)\n\nprint('Most common aditional features:', result)\n\n\n## Fuse some types\nitems['type'] = items.name_2.apply(lambda x: x[0:8] if x.split(' ')[0] == 'xbox' else x.split(' ')[0])\nitems.loc[(items.type == 'x360') | (items.type == 'xbox360'), 'type'] = 'xbox 360'\nitems.loc[items.type == '', 'type'] = 'mac'\nitems.type = items.type.apply(lambda x: x.replace(' ',''))\nitems.loc[(items.type == 'pc') | (items.type == 'p\u0441') | (items.type == '\u0440\u0441'), 'type'] = 'pc'\nitems.loc[(items.type == '\u0440s3'), 'type'] = 'ps3'\n\n## Find low frequence item type\n# group_count = items[['item_id', 'type']].groupby('type').count()\n# drop_list = group_count.loc[group_count.item_id < 10].index\ngroup_sum = items.groupby('type').sum()\ndrop_list = group_sum.loc[group_sum.item_category_id < 200].index\n\nprint('drop list:', drop_list)\n\n## Replece low frequence item type by etc in name_2\nitems.name_2 = items.type.apply(lambda x: 'etc' if x in drop_list else x)\nitems = items.drop(['type'], axis=1)\nprint(items.groupby('name_2').count()[['item_id']])\n\n## Labelencoder name_2, name_3\nitems['name_2'] = LabelEncoder().fit_transform(items['name_2']).astype(np.int8)\nitems['name_3'] = LabelEncoder().fit_transform(items['name_3']).astype(np.int16)\nitems.drop(['item_name', 'name_1'], axis=1, inplace=True)","182ba2a8":"## Prepare matrix for (shop_id\uff0citem_id) couple\nts = time.time()\nmatrix = []\ncols = ['date_block_num','shop_id','item_id']\nfor i in range(34):\n    sales = train[train.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n    \nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix.sort_values(cols,inplace=True)\nprint('Use time:', time.time() - ts)\n","3cb68e7e":"## revenue from one item on one day's sale\ntrain['revenue'] = train['item_price'] *  train['item_cnt_day']\n\n## Fill known month sale data in the matrix (all (shop_id\uff0citem_id) couple)\nts = time.time()\ngroup = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\n\ngroup.columns = ['item_cnt_month']\ngroup.reset_index(inplace=True)\nmatrix = pd.merge(matrix, group, on=cols, how='left')\nmatrix['item_cnt_month'] = (matrix['item_cnt_month']\n                                .fillna(0)#.astype(np.float16))\n                                .clip(0,20) # NB clip target here\n                                .astype(np.float16))\nprint('Use time:', time.time() - ts)\n\n","19452e54":"# Add test 34 month to matrix\ntest['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\n\nts = time.time()\nmatrix = pd.concat([matrix, test], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True) # 34 month\nprint('Use time:', time.time() - ts)\n","42b0b1d5":"## Attach shop, item, item_category information to the matrix\n\nts = time.time()\nmatrix = pd.merge(matrix, shops, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')\nmatrix['shop_city'] = matrix['shop_city'].astype(np.int8)\nmatrix['shop_category'] = matrix['shop_category'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['type_code'] = matrix['type_code'].astype(np.int8)\nmatrix['subtype_code'] = matrix['subtype_code'].astype(np.int8)\n\nprint('Use time:', time.time() - ts)\n","2b915111":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'-lag'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","9647e996":"## Lag 1,2,3 month\nts = time.time()\nmatrix = lag_feature(matrix, [1,2,3], 'item_cnt_month')\nprint('Use time:', time.time() - ts)\n","e0fbc567":"## Simplyfy feauture name dictionaries:\ndict_simple = {'date_block_num': 'date', 'item_id': 'item', 'shop_id': 'shop', \n               'item_category_id': 'itemcate', 'item_price':'price', \n               \n               'item_cnt_month': 'cnt', }\n\n## Functions for groupby and aggregate\ndef sum_names(name_list):\n    names = ''\n    for x in name_list:\n        names += x+'+'\n    return names\n    \ndef group_agg(matrix, groupby_feats, transform_feat, aggtype='mean'):\n    group = matrix.groupby(groupby_feats).agg({transform_feat: [aggtype]})\n    groupby_feats_simple = [dict_simple[x] if x in dict_simple.keys() else x\n                            for x in groupby_feats]\n    transform_feat_simple = dict_simple[transform_feat] \\\n                            if transform_feat in dict_simple.keys() else transform_feat\n    group_name = f'{sum_names(groupby_feats_simple)[:-1]}-{aggtype.upper()}-{transform_feat_simple}'\n    group.columns = [ group_name ]\n    group.reset_index(inplace=True)\n    return group, group_name\n    \ndef add_groupmean_lag(matrix, groupby_feats, transform_feat, lags):\n    group, group_name = group_agg(matrix, groupby_feats, transform_feat)\n    \n    matrix = pd.merge(matrix, group, on=groupby_feats, how='left')\n    matrix[group_name] = matrix[group_name].astype(np.float16)\n    if lags != []:\n        matrix = lag_feature(matrix, lags, group_name)\n        matrix.drop([group_name], axis=1, inplace=True)\n    return matrix\n    \n","ff191ccb":"ts = time.time()\n\n## Compute mean item_cnt_month (cnt) \ntransform_feat = 'item_cnt_month'\n\n\ngroupby_feats = ['date_block_num']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'item_id']\nlags = [1,2,3]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'shop_id']\nlags = [1,2,3]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'item_category_id']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'shop_id', 'item_category_id']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'shop_id', 'item_id']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'shop_id', 'subtype_code']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'shop_city']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\ngroupby_feats = ['date_block_num', 'item_id', 'shop_city']\nlags = [1]\nmatrix = add_groupmean_lag(matrix, groupby_feats, transform_feat, lags)\n\nprint('Use time:', time.time() - ts)\n","0852324d":"ts = time.time()\n\nfetures_to_drop = []\n\n## caculate mean price for every item\ntransform_feat = 'item_price'\ngroupby_feats = ['item_id']\ngroup, mean_price_col = group_agg(train, groupby_feats, \n                                  transform_feat, aggtype='mean')\nmatrix = pd.merge(matrix, group, on=groupby_feats, how='left')\nmatrix[mean_price_col] = matrix[mean_price_col].astype(np.float16)\n\n\n## caculate mean date (monthly) price for every item\ntransform_feat = 'item_price'\ngroupby_feats = ['date_block_num','item_id']\ngroup, mean_monthlyprice_col = group_agg(train, groupby_feats, \n                                         transform_feat, aggtype='mean')\nmatrix = pd.merge(matrix, group, on=groupby_feats, how='left')\nmatrix[mean_monthlyprice_col] = matrix[mean_monthlyprice_col].astype(np.float16)\n\n\n## create time lags for date date (monthly) price\nlags = [1,2,3]\nmatrix = lag_feature(matrix, lags, mean_monthlyprice_col)\n\n## delta between date (monthly) mean and mean price for every lag\nfor i in lags:\n    matrix['delta_price-lag'+str(i)] = \\\n    (matrix[f'{mean_monthlyprice_col}-lag'+str(i)] - matrix[mean_price_col])\\\n    \/ matrix[mean_price_col]\n\n\n############### Too slow ###############\n# def select_trend(row):\n#     for i in lags:\n#         if row['delta_price-lag'+str(i)]:\n#             return row['delta_price-lag'+str(i)]\n#     return 0\n# matrix['delta_price-lag'] = matrix.apply(select_trend, axis=1)\n\n############### 10 times faster ###############\nmatrix['delta_price-lag']=0\nbool_loc = np.ones(len(matrix))==1\nfor i in lags:   \n    matrix.loc[bool_loc, 'delta_price-lag'] = matrix.loc[bool_loc,'delta_price-lag'+str(i)]\n    bool_loc &= matrix['delta_price-lag'+str(i)]==0\nmatrix['delta_price-lag'] = matrix['delta_price-lag'].astype(np.float16)\nmatrix['delta_price-lag'].fillna(0, inplace=True)\n\n## Only keep 'delta_price_lag' feature\nfetures_to_drop.append(mean_price_col)\nfetures_to_drop.append(mean_monthlyprice_col)\nfor i in lags:\n    fetures_to_drop += [f'{mean_monthlyprice_col}-lag'+str(i)]\n    fetures_to_drop += ['delta_price-lag'+str(i)]\n\nmatrix.drop(fetures_to_drop, axis=1, inplace=True)\nprint('Use time:', time.time() - ts)\n","f381ce97":"ts = time.time()\n\n## Monthly shop revenue sum\ngroup = train.groupby(['date_block_num','shop_id']).agg({'revenue': ['sum']})\ngroup.columns = ['date_shop_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_revenue'] = matrix['date_shop_revenue'].astype(np.float32)\n\n\n## Shop mean revenue from Monthly shop revenue sum\ngroup = group.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\ngroup.columns = ['shop_avg_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['shop_id'], how='left')\nmatrix['shop_avg_revenue'] = matrix['shop_avg_revenue'].astype(np.float32)\n\n## delta between date (monthly) revenue and mean revenue\nmatrix['delta_revenue'] = (matrix['date_shop_revenue'] - matrix['shop_avg_revenue']) \/ matrix['shop_avg_revenue']\nmatrix['delta_revenue'] = matrix['delta_revenue'].astype(np.float16)\n\n## revenue lags\nmatrix = lag_feature(matrix, [1], 'delta_revenue')\n\n## Only keep lag 'delta_revenue' feature\nmatrix.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)\n\nprint('Use time:', time.time() - ts)\n\n","da23211e":"## Date information\ntotal_block_num = 35\ndate_block_num = np.arange(total_block_num)\ndate_block = [pd.Timestamp(2013, 1, 1)+pd.DateOffset(months=x) for x in date_block_num]\n\n\ndf_date = pd.DataFrame(date_block_num, columns=['date_block_num'])\ndf_date['date_block'] = date_block\ndf_date['year'] = df_date['date_block'].dt.year\ndf_date['month'] = df_date['date_block'].dt.month\n\nfor i in range(len(df_date)):\n    day_to_count = 0\n    calendar_matrix = calendar.monthcalendar(df_date['year'].iloc[i],df_date['month'].iloc[i])\n    for j in range(7): # 7 days a week\n        num_days = sum(1 for x in calendar_matrix if x[j] != 0)\n        df_date.loc[i, f'week{j}'] = num_days\ndf_date = df_date[['date_block_num', 'year','month','week0','week1',\n                   'week2','week3','week4','week5','week6']]  \ndf_date['days'] = df_date[['week0','week1','week2','week3','week4','week5','week6']].sum(axis=1)\ndf_date['year'] = df_date['year']-2012\ndf_date = df_date.astype(np.int8)\n\nmatrix = pd.merge(matrix, df_date, on=['date_block_num'], how='left')\n","00dee4eb":"## The first month when one item is on sale\nmatrix['item_shop_first_sale'] = \\\nmatrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\n\nmatrix['item_first_sale'] = \\\nmatrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')\n\n","adfc24da":"## Drop 3 first date (because of lag)\nmatrix = matrix[matrix.date_block_num > 3]\n\n","59e1612b":"############### ???????????? ###############\n\ndef fill_na(df):\n    for col in df.columns:\n        if ('-lag' in col) & (df[col].isnull().any()):\n            print(col)\n            if ('cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)","1657504b":"matrix.isna().sum()","5be4f6b3":"import pickle\nimport gc\n\ndel group\ndel items\ndel shops\ndel cats\ndel train\n# leave test for submission\ngc.collect();\n\nmatrix.to_pickle('..\/working\/data.pkl')\n\ndel matrix\ngc.collect();","1212bac1":"data = pd.read_pickle('..\/working\/data.pkl')\n# data = matrix\n# del matrix\n\ntest  = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv').set_index('ID')\n\nprint(len(data.columns))\ndata.columns","8f4e65d7":"# data = data[['date_block_num', 'shop_id', 'item_id', 'item_cnt_month', 'shop_city',\n#        'shop_category', 'item_category_id', 'name_2', 'name_3', 'type_code',\n#        'subtype_code', 'item_cnt_month-lag1', 'item_cnt_month-lag2',\n#        'item_cnt_month-lag3', 'date-MEAN-cnt-lag1',\n#        'date+item-MEAN-cnt-lag1', 'date+item-MEAN-cnt-lag2',\n#        'date+item-MEAN-cnt-lag3', 'date+shop-MEAN-cnt-lag1',\n#        'date+shop-MEAN-cnt-lag2', 'date+shop-MEAN-cnt-lag3',\n#        'date+itemcate-MEAN-cnt-lag1', 'date+shop+itemcate-MEAN-cnt-lag1',\n#        'date+shop+item-MEAN-cnt-lag1',\n#        'date+shop+subtype_code-MEAN-cnt-lag1',\n#        'date+shop_city-MEAN-cnt-lag1', 'date+item+shop_city-MEAN-cnt-lag1',\n#        'delta_price-lag',\n#        'delta_revenue-lag1', 'month', 'days', 'item_shop_first_sale',\n#        'item_first_sale']]","ade29b4c":"X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\n\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)\n\ndel data\ngc.collect();","59cc6eb6":"X_train.info()","58b581e0":"lgb_train = lgb.Dataset(X_train, Y_train)\nlgb_eval = lgb.Dataset(X_valid, Y_valid, reference=lgb_train)\n\ndel X_train\ngc.collect();","4417eb7b":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\n# params = {'num_leaves': 512, 'max_depth': 25, 'max_bin': 128, 'n_estimators': 3000, \n#           'bagging_freq': 7, 'bagging_fraction': 0.6, \n#           'feature_fraction': 0.2, 'min_data_in_leaf': 78, \n#           'learning_rate': 0.1, 'num_threads': 6, \n#           'min_sum_hessian_in_leaf': 6,\n\n#           'random_state' : RANDOM_SEED,\n#           'verbosity' : 1,\n#           'bagging_seed' : RANDOM_SEED,\n#           'boost_from_average' : 'true',\n#           'boost' : 'gbdt',\n#           'metric' : 'rmse',\n# }\n\nparams = {'num_leaves': 2000, 'max_depth': 19, 'max_bin': 107, 'n_estimators': 3747,\n          'bagging_freq': 1, 'bagging_fraction': 0.7135681370918421, \n          'feature_fraction': 0.49446461478601994, 'min_data_in_leaf': 88, \n          'learning_rate': 0.015980721586917768, 'num_threads': 3, \n          'min_sum_hessian_in_leaf': 6,\n         \n          'random_state' : RANDOM_SEED,\n          'verbosity' : 1,\n          'bagging_seed' : RANDOM_SEED,\n          'boost_from_average' : 'true',\n          'boost' : 'gbdt',\n          'metric' : 'rmse',}\n\nmodel = lgb.train(params,\n                lgb_train,\n                num_boost_round=20,\n                valid_sets=[lgb_train,lgb_eval],\n                early_stopping_rounds=20,\n                verbose_eval=1,\n                )\ny_pred = model.predict(X_valid)\nrmsle(Y_valid, y_pred)","ed76faa4":"Y_pred = model.predict(X_valid).clip(0, 20)\nY_test = model.predict(X_test).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('lgb_submission.csv', index=False)\n\n# save predictions for an ensemble\npickle.dump(Y_pred, open('lgb_train.pickle', 'wb'))\npickle.dump(Y_test, open('lgb_test.pickle', 'wb'))","773da946":"# from lightgbm import plot_importance\n# from xgboost import plot_importance\nfrom lightgbm import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nplot_features(model, (10,14))","9c9a7de4":"feat_importance = model.feature_importance()\ndf_importance = pd.DataFrame(feat_importance, columns=['importance'], index=X_test.columns)\ndf_importance = df_importance.sort_values(by='importance', ascending=False)\ndf_importance.index\n","bec69c5f":"df_importance","1d1f1940":"# Month sales treatment\n","38387570":"# Date info","295b5f88":"## Revenue trend","8e947b05":"# Trend Features\n## Price trend","8bb574e5":"# Test set preparation","ab5a5546":"# Categorize shops info\n","1159d083":"# Mean encoded features","5e460749":"# Train ","25bea827":"# Data clearn","5664e546":"# Traget lags","ef3a40c5":"## File\n* sales_train.csv - the training set. Daily historical data from January 2013 to October 2015.\n* test.csv - the test set. You need to forecast the sales for these shops and products for November 2015.\n* sample_submission.csv - a sample submission file in the correct format.\n* items.csv - supplemental information about the items\/products.\n* item_categories.csv  - supplemental information about the items categories.\n* shops.csv- supplemental information about the shops.\n\n## Columns\n\n* ID - an Id that represents a (Shop, Item) tuple within the test set\n* shop_id - unique identifier of a shop\n* item_id - unique identifier of a product\n* item_category_id - unique identifier of item category\n* item_cnt_day - number of products sold. You are predicting a monthly amount of this measure\n* item_price - current price of an item\n* date - date in format dd\/mm\/yyyy\n* date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n* item_name - name of item\n* shop_name - name of shop\n* item_category_name - name of item category","01319da0":"# items info","1efeb101":"# cats info","34b94306":"# Check data","503995e0":"# Shops\/Items\/Cats features"}}