{"cell_type":{"1c6f2243":"code","52e4c2dc":"code","467f22d3":"code","26d42507":"code","2ec97027":"code","97f7067f":"code","ff641fb3":"code","840c985a":"code","5bc1cc69":"code","ed2c9753":"code","64717902":"code","cab18e55":"code","dcfb06c0":"code","42da163a":"code","03ae719a":"code","aa9af935":"code","cc97371a":"code","fd938a0b":"code","f4c43cb3":"code","fccbd8ca":"code","ee2e74fe":"code","96d746ac":"code","fd1eedd8":"code","b6f17e60":"code","3bc747a5":"code","0f70e415":"code","9e4924ca":"code","43daa0cf":"code","bae8d634":"code","3f788474":"code","d25611a3":"code","db796938":"code","9c20baa0":"code","3ae02929":"code","b33838d4":"code","db176556":"code","a00c8715":"code","343f7872":"code","f4d7d57d":"code","451aceb7":"code","fdfe09e7":"code","52cc6ebc":"code","3237e949":"code","1833e331":"code","613b051c":"code","deb1f30b":"code","32c48686":"code","8bad9178":"code","a8d440f6":"markdown","7f85b02e":"markdown","0237783c":"markdown","c6dccde4":"markdown","d43c4224":"markdown","28a1e782":"markdown","1f460328":"markdown","4e246942":"markdown","0e028aa8":"markdown"},"source":{"1c6f2243":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\n\nsns.color_palette('bright')\nsns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\n%matplotlib inline\n\nprint(\"Ready,set,go....\")","52e4c2dc":"!pip install klib","467f22d3":"import klib","26d42507":"df = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","2ec97027":"df.head()","97f7067f":"df.info()","ff641fb3":"df.describe()","840c985a":"missing_values_count = df.isnull().sum()\ntotal_cells = np.product(df.shape)\ntotal_missing = missing_values_count.sum()\npercent_missing = (total_missing\/total_cells) * 100\nprint(\"Missing Data : {}\".format(percent_missing))","5bc1cc69":"klib.missingval_plot(df)","ed2c9753":"klib.corr_mat(df)","64717902":"plt.figure(figsize = (20, 12))\ncorr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nsns.set(style = 'whitegrid')\nsns.heatmap(corr, mask=mask, \n            cmap='coolwarm', \n            center=0,\n            square=True, \n            linewidths=.6)\nplt.title(\"Correlation of variables\")\nplt.show()","cab18e55":"klib.dist_plot(df)","dcfb06c0":"df['Class'].value_counts()","42da163a":"fig = px.bar(y = df['Class'].value_counts())\nfig.show()","03ae719a":"x = df.drop(['Time','Class'],axis = 1).values\ny = df['Class'].values","aa9af935":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 1\/3, random_state = 69)\nprint(\"X_training set shape{},X_testing set shape{}\".format(X_train.shape,X_test.shape))\nprint(\"y_training set shape{},y_testing set shape{}\".format(y_train.shape,y_test.shape))","cc97371a":"from sklearn.preprocessing import MinMaxScaler\nmi = MinMaxScaler()\nX_train = mi.fit_transform(X_train)\nX_test = mi.transform(X_test)","fd938a0b":"X_train[0]","f4c43cb3":"X_test[0]","fccbd8ca":"import sklearn","ee2e74fe":"pred_df = pd.DataFrame()","96d746ac":"def confusion_matrix_map(y_valid,pred_v):\n    y_test = y_valid\n    predicitions = pred_v\n    mat = sklearn.metrics.confusion_matrix(y_test, predicitions)\n    plt.figure(figsize=(12,8))\n    sns.heatmap(data=mat, \n                annot=True, \n                cmap=\"icefire\", \n                xticklabels=['positive', 'negative'],\n                yticklabels=['positive', 'negative'])\n    plt.xlabel('Predicted values')\n    plt.ylabel('Actual values')\n    plt.title('Confusion Matrix ')\n    plt.show()","fd1eedd8":"def scores(y_valid,pred_v):\n    y_test = y_valid\n    predicitions = pred_v\n    print(\"accuracy score : {}\".format(sklearn.metrics.accuracy_score(y_test,predicitions)))\n    print(\"precision score : {}\".format(sklearn.metrics.precision_score(y_test,predicitions)))\n    print(\"Recall score : {}\".format(sklearn.metrics.recall_score(y_test,predicitions)))\n    print(\"F1 score : {}\".format(sklearn.metrics.f1_score(y_test,predicitions)))","b6f17e60":"def precsion_plot_curve(pred_v,model):\n    predicitions = pred_v\n    disp = sklearn.metrics.plot_precision_recall_curve(model, X_test, y_test)\n    disp.ax_.set_title('2-class Precision-Recall curve')","3bc747a5":"lr = sklearn.linear_model.LogisticRegression()\nlr.fit(X_train,y_train)","0f70e415":"pred = lr.predict(X_test)\npred_df[\"logistic\"] = pred","9e4924ca":"scores(y_test,pred)","43daa0cf":"precsion_plot_curve(pred,lr)","bae8d634":"confusion_matrix_map(y_test,pred)","3f788474":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()","d25611a3":"rf.fit(X_train,y_train)","db796938":"pred = rf.predict(X_test)\npred_df[\"Rfc\"] = pred","9c20baa0":"scores(y_test,pred)","3ae02929":"precsion_plot_curve(pred,rf)","b33838d4":"confusion_matrix_map(y_test,pred)","db176556":"import xgboost","a00c8715":"xgb = xgboost.XGBRFClassifier()\nxgb.fit(X_train,y_train)","343f7872":"pred = xgb.predict(X_test)\npred_df['xgb'] = pred","f4d7d57d":"scores(y_test,pred)","451aceb7":"precsion_plot_curve(pred,xgb)","fdfe09e7":"confusion_matrix_map(y_test,pred)","52cc6ebc":"xgbr = xgboost.XGBRFClassifier(n_estimators=300,max_dept=5)\nxgbr.fit(X_train,y_train)","3237e949":"pred = xgbr.predict(X_test)\npred_df[\"xgbr\"] = pred","1833e331":"scores(y_test,pred)","613b051c":"precsion_plot_curve(pred,xgbr)","deb1f30b":"confusion_matrix_map(y_test,pred)","32c48686":"pred_df[\"orginal\"] = y_test\npred_df.to_csv('predictions.csv',index = False)\n","8bad9178":"pred_df","a8d440f6":"<h1> LogisticRegression<\/h1>","7f85b02e":"<h1>RandomForestClassifier<\/h1>","0237783c":"-target variable is skewed","c6dccde4":"<h1> DATA <\/h1>","d43c4224":"<h1> splitting the data <\/h1>","28a1e782":"<h1> xgb classifier <\/h1>","1f460328":"<h1> EDA <\/h1>","4e246942":"<h1> Models<\/h1>","0e028aa8":"<h1> Xgbrclassifier<\/h1>"}}