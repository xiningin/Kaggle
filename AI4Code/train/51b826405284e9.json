{"cell_type":{"d7a6c21a":"code","3cbd68fa":"code","87e62b88":"code","5964117f":"code","4f442eda":"code","4d2cf5d2":"code","839f3e1f":"code","df80e078":"code","b2afccfc":"code","ab3b737d":"code","5a114264":"code","fdc52401":"code","023ad99e":"code","a59aec89":"code","edfabfdf":"code","6904954a":"code","e7585c4a":"code","f8477024":"code","7b8ca9b9":"code","39dba66b":"code","572cbcd9":"code","71eff43c":"code","39edd130":"code","21a58403":"code","5c3874f5":"code","87453e05":"code","554d8046":"code","6ae4b83e":"markdown","aa165288":"markdown"},"source":{"d7a6c21a":"# System\nimport sys\nimport os\nimport operator\nimport argparse\nimport itertools\n\n# Time\nimport time\nimport datetime\nfrom datetime import datetime\nfrom time import gmtime, strftime\nfrom pytz import timezone\n\n# Numerical Data\nimport random\nimport numpy as np \nimport pandas as pd\n\n# Tools\nimport shutil\nfrom glob import glob\nfrom tqdm import tqdm\nimport gc\n\n# NLP\nimport re\n\n# Preprocessing\nfrom sklearn import preprocessing\nfrom sklearn.utils import class_weight as cw\nfrom sklearn.utils import shuffle\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n# Machine Learning Models\nfrom sklearn import svm\nfrom sklearn.svm import LinearSVC, SVC\n\n# Evaluation Metrics\nfrom sklearn import metrics \nfrom sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, confusion_matrix, classification_report, roc_auc_score\n\n\n\n# Deep Learning - Keras -  Preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Deep Learning - Keras - Model\nimport keras\nfrom keras import models\nfrom keras.models import Model\nfrom keras.models import load_model\nfrom keras.models import Sequential\n\n# Deep Learning - Keras - Layers\nfrom keras.layers import Convolution1D, concatenate, SpatialDropout1D, GlobalMaxPool1D, GlobalAvgPool1D, Embedding, \\\n    Conv2D, SeparableConv1D, Add, BatchNormalization, Activation, GlobalAveragePooling2D, LeakyReLU, Flatten\nfrom keras.layers import Dense, Input, Dropout, MaxPool2D, MaxPooling2D, Concatenate, GlobalMaxPooling2D, GlobalAveragePooling2D, \\\n    Lambda, Multiply, LSTM, Bidirectional, PReLU, MaxPooling1D\nfrom keras.layers.pooling import _GlobalPooling1D\n\nfrom keras.regularizers import l2\n\n# Deep Learning - Keras - Pretrained Models\nfrom keras.applications.xception import Xception\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2\nfrom keras.applications.densenet import DenseNet201\nfrom keras.applications.nasnet import NASNetMobile, NASNetLarge\n\nfrom keras.applications.nasnet import preprocess_input\n\n# Deep Learning - Keras - Model Parameters and Evaluation Metrics\nfrom keras import optimizers\nfrom keras.optimizers import Adam, SGD , RMSprop\nfrom keras.losses import mae, sparse_categorical_crossentropy, binary_crossentropy\n\n# Deep Learning - Keras - Visualisation\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard, ReduceLROnPlateau, LearningRateScheduler\n# from keras.wrappers.scikit_learn import KerasClassifier\nfrom keras import backend as K\n\n# Deep Learning - TensorFlow\nimport tensorflow as tf\n\n\n# Graph\/ Visualization\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport matplotlib.image as mpimg\n\nimport seaborn as sns\n\n# from mlxtend.plotting import plot_confusion_matrix\nimport plotly.express as px\nfrom mpl_toolkits.axes_grid.anchored_artists import AnchoredText\n# from wordcloud import WordCloud\n\n# Image\n# import cv2\nfrom PIL import Image\n\nfrom IPython.display import display\nfrom IPython.core.display import HTML\n\n\n# np.random.seed(42)\n\n%matplotlib inline\n\n# Input data\nprint(os.listdir(\"..\/input\/\"))\n\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3cbd68fa":"def print_time():\n    fmt = \"%a, %d %B %Y %H:%M:%S %Z%z\"\n    \n    pacific = timezone('US\/Pacific')\n    \n    loc_dt = datetime.now(pacific)\n    \n    time_str = loc_dt.strftime(fmt)\n    \n    print(\"Pacific Time\" + \" : \" + time_str)\n    \n    return time_str\n    \ndef get_cur_time():\n    fmt = \"%a, %d %B %Y %H:%M:%S %Z%z\"\n    \n    pacific = timezone('UTC')\n    \n    loc_dt = datetime.now(pacific)\n    \n    time_str = loc_dt.strftime(fmt)\n    \n    return time_str  ","87e62b88":"def format_date_columns(data_cols):\n    data_cols_new_format = []\n    data_cols_map = {}\n    \n    for d in data_cols:\n        new_d = datetime.strftime(datetime.strptime(d, '%m\/%d\/%y'),'%b %d')\n        data_cols_map[d] = new_d\n        data_cols_new_format.append(new_d)\n    \n    return data_cols_new_format, data_cols_map","5964117f":"cur_time_str = print_time()","4f442eda":"input_dir = \"..\/input\/corona-virus-time-series-dataset\/COVID-19\/csse_covid_19_data\/csse_covid_19_time_series\/\"\n# input_dir = \"..\/input\/novel-corona-virus-2019-dataset\/\"","4d2cf5d2":"os.listdir(input_dir)","839f3e1f":"current_dir = os.getcwd() + \"\\\\\"\n\noutput_dir = current_dir + \"output\\\\\"\noutput_csv_dir = output_dir + \"csv\\\\\"\n\noutput_visualization_dir = output_dir + \"visualization\\\\\"\n\noutput_visualization_dir_global = output_visualization_dir + \"global\\\\\"\noutput_visualization_dir_country = output_visualization_dir + \"country\\\\\"\n\ntry:\n    os.mkdir(output_dir)\nexcept:\n    print(\"Could not create \" + output_dir)\n\ntry:\n    os.mkdir(output_csv_dir)\nexcept:\n    print(\"Could not create \" + output_csv_dir)\n\ntry:\n    os.mkdir(output_visualization_dir)\nexcept:\n    print(\"Could not create \" + output_visualization_dir)\n\n\ntry:\n    os.mkdir(output_visualization_dir_global)\nexcept:\n    print(\"Could not create \" + output_visualization_dir_global)\n    \n    \ntry:\n    os.mkdir(output_visualization_dir_country)\nexcept:\n    print(\"Could not create \" + output_visualization_dir_country)","df80e078":"ts_confirmed_global = pd.read_csv(input_dir + \"time_series_covid19_confirmed_global.csv\")\nts_recovered_global = pd.read_csv(input_dir + \"time_series_covid19_recovered_global.csv\")\nts_deaths_global    = pd.read_csv(input_dir + \"time_series_covid19_deaths_global.csv\")\n\nts_confirmed_US = pd.read_csv(input_dir + \"time_series_covid19_confirmed_US.csv\")\nts_deaths_US    = pd.read_csv(input_dir + \"time_series_covid19_deaths_US.csv\")","b2afccfc":"for country in ts_confirmed_global[\"Country\/Region\"].unique().tolist():\n    c = re.sub(r'[^a-zA-Z0-9]', '', country)\n    try:\n        os.mkdir(output_visualization_dir_country + c)    \n    except:\n        print(\"Could not make \"+ country + \" folder\")","ab3b737d":"columns = ts_confirmed_global.columns.tolist()\nlocation_columns = ['Province\/State', 'Country\/Region', 'Lat', 'Long']\nlocation_long_lat_columns = ['Lat', 'Long']\nlocation_name_cols = ['Country\/Region', 'Province\/State']\n\ndata_cols = [c for c in columns if c not in location_columns]\n\ncount_days = len(data_cols)","5a114264":"data_cols_new_format, data_cols_map = format_date_columns(data_cols)\n\ndata_cols_new_format = data_cols\n\nlast_day = data_cols_new_format[-1]\nprev_day = data_cols_new_format[-2]\n\nnew_cols = location_name_cols + [last_day]\n\ncountries = ts_confirmed_global[\"Country\/Region\"].unique().tolist()\n\ncopyright_text = \"@Anjana Tiha \\n(anjana.tiha@gmail.com) \\n[\" + print_time() + \"]\"\ncopyright_text = \"@Anjana Tiha\"\ncopyright_text_size = 8","fdc52401":"df_confirmed_total = ts_confirmed_global[data_cols_new_format].sum()\ndf_recovered_total = ts_recovered_global[data_cols_new_format].sum()\ndf_death_total = ts_deaths_global[data_cols_new_format].sum()\n\ndf_confirmed_pct_1_total = df_confirmed_total.pct_change(periods=1)*100\ndf_recovered_pct_1_total = df_recovered_total.pct_change(periods=1)*100\ndf_death_pct_1_total = df_death_total.pct_change(periods=1)*100\n\ndf_closed_total = df_recovered_total + df_death_total\ndf_active_total = df_confirmed_total - df_closed_total\n\ndf_death_rate_closed_total = (df_death_total \/ df_closed_total) * 100\ndf_recovery_rate_closed_total = (df_recovered_total \/ df_closed_total) * 100\n\ndf_death_rate_total = (df_death_total \/ df_confirmed_total) * 100\ndf_recovery_rate_total = (df_recovered_total \/ df_confirmed_total) * 100\n","023ad99e":"df_confirmed_country = ts_confirmed_global.groupby([\"Country\/Region\"]).sum().reset_index()\ndf_recovered_country = ts_recovered_global.groupby([\"Country\/Region\"]).sum().reset_index()\ndf_death_country = ts_deaths_global.groupby([\"Country\/Region\"]).sum().reset_index()\n\n# df_confirmed_pct_1_country = df_confirmed_country.pct_change(periods=1)*100\n# df_recovered_pct_1_country = df_recovered_country.pct_change(periods=1)*100\n# df_death_pct_1_country = df_death_country.pct_change(periods=1)*100\n\n# df_closed_country = df_recovered_country + df_death_country\n# df_active_country = df_confirmed_country - df_closed_country\n\n# df_death_rate_closed_country  = (df_death_country \/ df_closed_country) * 100\n# df_recovery_rate_closed_country  = (df_recovered_country \/ df_closed_country) * 100\n\n# df_death_rate_country  = (df_death_country \/ df_confirmed_country) * 100\n# df_recovery_rate_country  = (df_recovered_country \/ df_confirmed_country) * 100\n","a59aec89":"df_country = pd.DataFrame()\ndf_country[\"Country\"] = ts_confirmed_global[\"Country\/Region\"].unique().tolist()\ndf_country[\"Comfirmed\"] = df_country[\"Country\"].apply(lambda x: df_confirmed_country[df_confirmed_country[\"Country\/Region\"]==x][last_day].values[0])\ndf_country[\"Recovered\"] = df_country[\"Country\"].apply(lambda x: df_recovered_country[df_recovered_country[\"Country\/Region\"]==x][last_day].values[0])\ndf_country[\"Death\"] = df_country[\"Country\"].apply(lambda x: df_death_country[df_death_country[\"Country\/Region\"]==x][last_day].values[0])\ndf_country[\"Closed\"] = df_country[\"Recovered\"] + df_country[\"Death\"]\ndf_country[\"Active\"] = df_country[\"Comfirmed\"] - df_country[\"Closed\"]\ndf_country[\"Death Rate (Closed)\"] = (df_country[\"Death\"] \/ df_country[\"Closed\"]) * 100\ndf_country[\"Recovery Rate (Closed)\"] = (df_country[\"Recovered\"] \/ df_country[\"Closed\"]) * 100\ndf_country[\"Death Rate \"] = (df_country[\"Death\"] \/ df_country[\"Comfirmed\"]) * 100\ndf_country[\"Recovery Rate \"] = (df_country[\"Recovered\"] \/ df_country[\"Comfirmed\"]) * 100\ndf_country.to_csv(output_csv_dir +\"country.csv\")","edfabfdf":"# !pip install itables\n# !pip install countryinfo\n\n\n# import itables.interactive\n# from itables import show\n\n# from countryinfo import CountryInfo","6904954a":"# show(df_country)","e7585c4a":"sns.set(style=\"whitegrid\")\n\nticksize = 10\ntitlesize = ticksize + 8\nlabelsize = ticksize + 5\n\nfigsize = (18, 6)\nparams = {'figure.figsize' : figsize,\n          'axes.labelsize' : labelsize,\n          'axes.titlesize' : titlesize,\n          'xtick.labelsize': ticksize,\n          'ytick.labelsize': ticksize + 4}\n\nplt.rcParams.update(params)\n\n\n\nfilename = output_visualization_dir_global + \"confirmed_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_confirmed_total)\nplt.title(\"Total Confirmed = \" + f'{df_confirmed_total[last_day]:,}' +\" (Global)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"recovered_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_recovered_total)\nplt.title(\"Total Recovered = \" + f'{df_recovered_total[last_day]:,}' +\" (Global)\"+ \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"death_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\n\nax = sns.barplot(x=data_cols_new_format, y=df_death_total)\nplt.title(\"Total Death = \" + f'{df_death_total[last_day]:,}' +\" (Global)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"active_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_active_total)\nplt.title(\"Total Active = \" + f'{df_active_total[last_day]:,}' +\" (Global)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"closed_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_closed_total)\nplt.title(\"Total Closed = \" + f'{df_closed_total[last_day]:,}' +\" (Global)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n","f8477024":"sns.set(style=\"whitegrid\")\n\nticksize = 10\ntitlesize = ticksize + 8\nlabelsize = ticksize + 5\n\nfigsize = (18, 6)\nparams = {'figure.figsize' : figsize,\n          'axes.labelsize' : labelsize,\n          'axes.titlesize' : titlesize,\n          'xtick.labelsize': ticksize,\n          'ytick.labelsize': ticksize + 4}\n\nplt.rcParams.update(params)\n\n\n\nfilename = output_visualization_dir_global + \"daily_new_confirmed_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_confirmed_total.diff())\nplt.title(\"Daily New Confirmed (Global, New Today = \" + f'{df_active_total.diff()[last_day].astype(int):,}'+\")\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"daily_new_recovered_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_recovered_total.diff())\nplt.title(\"Daily New Recovered (Global, New Today = \" + f'{df_active_total.diff()[last_day].astype(int):,}'+\")\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"daily_new_death_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\n\nax = sns.barplot(x=data_cols_new_format, y=df_death_total.diff())\nplt.title(\"Daily New Death (Global, New Today = \" + f'{df_active_total.diff()[last_day].astype(int):,}'+\")\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"daily_new_active_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_active_total.diff())\nplt.title(\"Daily New Active (Global, New Today = \" + f'{df_active_total.diff()[last_day].astype(int):,}'+\")\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"daily_new_closed_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nax = sns.barplot(x=data_cols_new_format, y=df_closed_total.diff())\nplt.title(\"Daily New Closed (Global, New Today = \" + f'{df_active_total.diff()[last_day].astype(int):,}'+\")\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n","7b8ca9b9":"sns.set(style=\"whitegrid\")\n\nticksize = 10\ntitlesize = ticksize + 8\nlabelsize = ticksize + 5\n\nfigsize = (18, 6)\nparams = {'figure.figsize' : figsize,\n          'axes.labelsize' : labelsize,\n          'axes.titlesize' : titlesize,\n          'xtick.labelsize': ticksize,\n          'ytick.labelsize': ticksize + 4}\n\nplt.rcParams.update(params)\n\n\n\nfilename = output_visualization_dir_global + \"all_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nplt.plot(data_cols_new_format, df_confirmed_total, label=\"confirmed\")\nplt.plot(data_cols_new_format, df_recovered_total, label=\"recovered\")\nplt.plot(data_cols_new_format, df_death_total, label=\"death\")\nplt.title(\"Confirmed vs. Recovered vs. Death (Global)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\nplt.legend()\n# text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n# ax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"recovered_death_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\nplt.plot(data_cols_new_format, df_recovered_total, label=\"recovered\")\nplt.plot(data_cols_new_format, df_death_total, label=\"death\")\nplt.title(\"Recovered vs. Death (Global)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\nplt.legend()\n# text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n# ax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()","39dba66b":"sns.set(style=\"whitegrid\")\n\nticksize = 10\ntitlesize = ticksize + 8\nlabelsize = ticksize + 5\n\nfigsize = (18, 6)\nparams = {'figure.figsize' : figsize,\n          'axes.labelsize' : labelsize,\n          'axes.titlesize' : titlesize,\n          'xtick.labelsize': ticksize,\n          'ytick.labelsize': ticksize + 4}\n\n\nfilename = output_visualization_dir_global + \"confirmed_pct_chng_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_confirmed_pct_1_total\nax = sns.barplot(x=data_cols_new_format, y=df)\nplt.title(\"Daily Confimed Count Change in Percentile (Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"%)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=1, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"recovered_pct_chng_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_recovered_pct_1_total\nax = sns.barplot(x=data_cols_new_format, y=df)\nplt.title(\"Daily Recovered Count Change in Percentile  (Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"%)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=1, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\n\nfilename = output_visualization_dir_global + \"death_pct_chng_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_death_pct_1_total\nax = sns.barplot(x=data_cols_new_format, y=df)\nplt.title(\"Daily Death Count Change in Percentile(Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"%)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=1, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\n\nfilename = output_visualization_dir_global + \"active_pct_chng_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_active_total.pct_change(periods=1)\nax = sns.barplot(x=data_cols_new_format, y=df)\nplt.title(\"Daily Active Count Change in Percentile (Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"%)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=1, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"closed_pct_chng_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_closed_total.pct_change(periods=1)\nax = sns.barplot(x=data_cols_new_format, y=df)\nplt.title(\"Daily Closed Count Change in Percentile (Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"%)\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=1, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n","572cbcd9":"sns.set(style=\"whitegrid\")\n\nticksize = 10\ntitlesize = ticksize + 8\nlabelsize = ticksize + 5\n\nfigsize = (18, 6)\nparams = {'figure.figsize' : figsize,\n          'axes.labelsize' : labelsize,\n          'axes.titlesize' : titlesize,\n          'xtick.labelsize': ticksize,\n          'ytick.labelsize': ticksize + 4}\n\n\n\nfilename = output_visualization_dir_global + \"recovery_rate_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n    \ndf = df_recovery_rate_closed_total\nax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format])\nplt.title(\"Recovery Rate (Global Closed, Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\nfilename = output_visualization_dir_global + \"death_rate_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_death_rate_closed_total\nax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format])\nplt.title(\"Death Rate (Global Closed, Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n","71eff43c":"sns.set(style=\"whitegrid\")\n\nticksize = 10\ntitlesize = ticksize + 8\nlabelsize = ticksize + 5\n\nfigsize = (18, 6)\nparams = {'figure.figsize' : figsize,\n          'axes.labelsize' : labelsize,\n          'axes.titlesize' : titlesize,\n          'xtick.labelsize': ticksize,\n          'ytick.labelsize': ticksize + 4}\n\n\n\nfilename = output_visualization_dir_global + \"cum_recovery_rate_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\ndf = df_recovery_rate_total\nax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format])\nplt.title(\"Recovery Rate (Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n\n\n\nfilename = output_visualization_dir_global + \"cum_death_rate_global.png\"    \n\nif os.path.exists(filename):\n    os.remove(filename)\n\n\ndf = df_death_rate_total\nax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format])\nplt.title(\"Death Rate (Global, Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\nplt.xticks(rotation=90)\ntext = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\nax.add_artist(text)\nplt.savefig(filename, bbox_inches=\"tight\")\nplt.show()\n","39edd130":"# sns.set(style=\"whitegrid\")\n\n# ticksize = 10\n# titlesize = ticksize + 8\n# labelsize = ticksize + 5\n\n# figsize = (18, 6)\n# params = {'figure.figsize' : figsize,\n#           'axes.labelsize' : labelsize,\n#           'axes.titlesize' : titlesize,\n#           'xtick.labelsize': ticksize,\n#           'ytick.labelsize': ticksize + 4}\n\n# plt.rcParams.update(params)\n\n\n# for country in countries:\n#     df = ts_confirmed_global[ts_confirmed_global[\"Country\/Region\"]==country]\n    \n#     current_dir = output_visualization_dir_country + re.sub(\"[^a-zA-Z]\", \"\", country) + \"\\\\\"\n#     filename = current_dir + \"confirmed.png\"   \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     ax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format].sum())\n#     plt.title(\"Total Confirmed = \" + f'{df[last_day].sum():,}' + \" (\" + country + \")\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n\n#     df = ts_recovered_global[ts_recovered_global[\"Country\/Region\"]==country]\n    \n#     filename = current_dir + \"recovered.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     ax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format].sum())\n#     plt.title(\"Total Recovered = \" + f'{df[last_day].sum():,}' + \" (\" + country + \")\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n\n    \n#     df = ts_deaths_global[ts_deaths_global[\"Country\/Region\"]==country]\n    \n#     filename = current_dir + \"death.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     ax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format].sum())\n#     plt.title(\"Total Death = \" + f'{df[last_day].sum():,}' + \" (\" + country + \")\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n","21a58403":"# sns.set(style=\"whitegrid\")\n\n# ticksize = 10\n# titlesize = ticksize + 8\n# labelsize = ticksize + 5\n\n# figsize = (18, 6)\n# params = {'figure.figsize' : figsize,\n#           'axes.labelsize' : labelsize,\n#           'axes.titlesize' : titlesize,\n#           'xtick.labelsize': ticksize,\n#           'ytick.labelsize': ticksize + 4}\n\n# plt.rcParams.update(params)\n\n\n# for country in countries:\n#     df = ts_confirmed_global[ts_confirmed_global[\"Country\/Region\"]==country]\n    \n#     current_dir = output_visualization_dir_country + re.sub(\"[^a-zA-Z]\", \"\", country) + \"\\\\\"\n#     filename = current_dir + \"confirmed_new.png\"   \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     ax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format].sum().diff())\n#     plt.title(\"Daily New Confirmed - \" + country + \" (New Today = \" + f'{df[data_cols_new_format].sum().diff()[last_day].astype(int):,}' + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n\n#     df = ts_recovered_global[ts_recovered_global[\"Country\/Region\"]==country]\n    \n#     filename = current_dir + \"recovered_new.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     ax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format].sum().diff())\n#     plt.title(\"Daily New Recovered - \" + country + \" (New Today = \" + f'{df[data_cols_new_format].sum().diff()[last_day].astype(int):,}' + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n\n    \n#     df = ts_deaths_global[ts_deaths_global[\"Country\/Region\"]==country]\n    \n#     filename = current_dir + \"death_new.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     ax = sns.barplot(x=data_cols_new_format, y=df[data_cols_new_format].sum().diff())\n#     plt.title(\"Daily New Death - \" + country + \" (New Today = \" + f'{df[data_cols_new_format].sum().diff()[last_day].astype(int):,}' + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n\n    \n\n","5c3874f5":"# sns.set(style=\"whitegrid\")\n\n# ticksize = 10\n# titlesize = ticksize + 8\n# labelsize = ticksize + 5\n\n# figsize = (18, 6)\n# params = {'figure.figsize' : figsize,\n#           'axes.labelsize' : labelsize,\n#           'axes.titlesize' : titlesize,\n#           'xtick.labelsize': ticksize,\n#           'ytick.labelsize': ticksize + 4}\n\n# plt.rcParams.update(params)\n\n\n# for country in countries:\n\n#     current_dir = output_visualization_dir_country + re.sub(\"[^a-zA-Z]\", \"\", country) + \"\\\\\"\n    \n#     filename = current_dir + \"all.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = ts_confirmed_global[ts_confirmed_global[\"Country\/Region\"]==country]\n#     plt.plot(data_cols_new_format, df[data_cols_new_format].sum(), label=\"confirmed\")\n    \n#     df = ts_recovered_global[ts_recovered_global[\"Country\/Region\"]==country]\n#     plt.plot(data_cols_new_format, df[data_cols_new_format].sum(), label=\"recovered\")\n    \n#     df = ts_deaths_global[ts_deaths_global[\"Country\/Region\"]==country]\n#     plt.plot(data_cols_new_format, df[data_cols_new_format].sum(), label=\"death\")\n    \n#     plt.title(\"Confirmed vs. Recovered vs. Death (\" + country + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.legend()\n# #     text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n# #     ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n\n\n#     filename = current_dir + \"recovered_death.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = ts_recovered_global[ts_recovered_global[\"Country\/Region\"]==country]\n#     plt.plot(data_cols_new_format, df[data_cols_new_format].sum(), label=\"recovered\")\n    \n#     df = ts_deaths_global[ts_deaths_global[\"Country\/Region\"]==country]\n#     plt.plot(data_cols_new_format, df[data_cols_new_format].sum(), label=\"death\")\n    \n#     plt.title(\"Recovered vs. Death (\" + country + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.legend()\n#     # text = AnchoredText(copyright_text, loc=4, prop={'size': copyright_text_size}, frameon=True)\n#     # ax.add_artist(text)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()","87453e05":"# sns.set(style=\"whitegrid\")\n\n# ticksize = 10\n# titlesize = ticksize + 8\n# labelsize = ticksize + 5\n\n# figsize = (18, 6)\n# params = {'figure.figsize' : figsize,\n#           'axes.labelsize' : labelsize,\n#           'axes.titlesize' : titlesize,\n#           'xtick.labelsize': ticksize,\n#           'ytick.labelsize': ticksize + 4}\n\n# plt.rcParams.update(params)\n\n\n# for country in countries:\n\n#     current_dir = output_visualization_dir_country + re.sub(\"[^a-zA-Z]\", \"\", country) + \"\\\\\"\n    \n    \n#     filename = current_dir + \"confirmed_pct_chng.png\"    \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = ts_confirmed_global[ts_confirmed_global[\"Country\/Region\"]==country]\n#     ax = plt.plot(data_cols_new_format, df[data_cols_new_format].sum().pct_change(periods=1)*100, label=\"confirmed\")\n#     plt.title(\"Daily Confirmed Count Change in Percentile (\" + country + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n    \n#     filename = current_dir + \"recovered_pct_chng.png\"\n#     if os.path.exists(filename):\n#         os.remove(filename)\n    \n#     df = ts_recovered_global[ts_recovered_global[\"Country\/Region\"]==country]\n#     ax = plt.plot(data_cols_new_format, df[data_cols_new_format].sum().pct_change(periods=1)*100, label=\"recovered\")\n#     plt.title(\"Daily Recovered Count Change in Percentile (\" + country + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n    \n#     filename = current_dir + \"death_pct_chng.png\"\n#     if os.path.exists(filename):\n#         os.remove(filename)\n        \n#     df = ts_deaths_global[ts_deaths_global[\"Country\/Region\"]==country]\n#     ax = plt.plot(data_cols_new_format, df[data_cols_new_format].sum().pct_change(periods=1)*100, label=\"death\")\n#     plt.title(\"Daily Death Count Change in Percentile (\" + country + \")\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()","554d8046":"# sns.set(style=\"whitegrid\")\n\n# ticksize = 10\n# titlesize = ticksize + 8\n# labelsize = ticksize + 5\n\n# figsize = (18, 6)\n# params = {'figure.figsize' : figsize,\n#           'axes.labelsize' : labelsize,\n#           'axes.titlesize' : titlesize,\n#           'xtick.labelsize': ticksize,\n#           'ytick.labelsize': ticksize + 4}\n\n# plt.rcParams.update(params)\n\n\n# for country in countries:\n\n#     current_dir = output_visualization_dir_country + re.sub(\"[^a-zA-Z]\", \"\", country) + \"\\\\\"\n    \n#     df_confirmed_country = ts_confirmed_global[ts_confirmed_global[\"Country\/Region\"]==country]\n#     df_recovered_country = ts_recovered_global[ts_recovered_global[\"Country\/Region\"]==country]\n#     df_death_country = ts_deaths_global[ts_deaths_global[\"Country\/Region\"]==country]\n    \n    \n#     filename = current_dir + \"death_rate_closed.png\"       \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = df_death_country[data_cols_new_format].sum()\/(df_recovered_country[data_cols_new_format].sum() + df_death_country[data_cols_new_format].sum())*100\n#     plt.plot(data_cols_new_format, df[data_cols_new_format])\n#     plt.title(\"Death Rate - \" + country + \" (Closed, Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n    \n#     filename = current_dir + \"recovery_rate_closed.png\" \n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = df_recovered_country[data_cols_new_format].sum()\/(df_recovered_country[data_cols_new_format].sum() + df_death_country[data_cols_new_format].sum())*100\n#     plt.plot(data_cols_new_format, df[data_cols_new_format])\n#     plt.title(\"Recovery Rate - \" + country + \" (Closed, Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n    \n#     filename = current_dir + \"death_rate.png\"       \n\n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = df_death_country[data_cols_new_format].sum()\/df_confirmed_country[data_cols_new_format].sum()*100\n#     plt.plot(data_cols_new_format, df[data_cols_new_format])\n#     plt.title(\"Death Rate - \" + country + \" (Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    \n    \n#     filename = current_dir + \"recovery_rate.png\" \n#     if os.path.exists(filename):\n#         os.remove(filename)\n\n#     df = df_recovered_country[data_cols_new_format].sum()\/df_confirmed_country[data_cols_new_format].sum()*100\n#     plt.plot(data_cols_new_format, df[data_cols_new_format])\n#     plt.title(\"Recovery Rate - \" + country + \" (Current = \" + \"{:.2f}\".format(df[last_day]) + \"% )\" + \"\\n[\" + get_cur_time() + \"]\")\n#     plt.xticks(rotation=90)\n#     plt.savefig(filename, bbox_inches=\"tight\")\n#     plt.show()\n    ","6ae4b83e":"![](https:\/\/cdn.cnn.com\/cnnnext\/dam\/assets\/200130165125-corona-virus-cdc-image-super-tease.jpg)","aa165288":"# Corona Virus Exploratory Analysis and Modeling "}}