{"cell_type":{"70ad901c":"code","f15d512e":"code","6e589a27":"code","aabf0a91":"code","151a472b":"code","cab17816":"code","f9733ee3":"code","98697267":"code","1d0687a0":"code","93535d98":"code","c1334ed4":"code","123bc528":"code","8535e8ac":"code","a9dfb20c":"code","7cd078a5":"code","a82e8e09":"code","3c5a6547":"code","6df12342":"code","2d252a40":"code","643e26d4":"code","141dbace":"code","81542f76":"code","de1e81f5":"code","b0057970":"markdown","d256bf8f":"markdown","11d75d84":"markdown","1402c030":"markdown","f1f53afe":"markdown","fc88b5b0":"markdown","44b7ca26":"markdown","0cd402e7":"markdown","c8281499":"markdown","166b656b":"markdown","23000988":"markdown"},"source":{"70ad901c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","f15d512e":"data = pd.read_csv(\"..\/input\/Year_wise_batting_stats_all_ODI_players(30-05-19).csv\")\ndata = data.fillna(0)\ndata.head()","6e589a27":"data.dtypes","aabf0a91":"data['HS'] = data['HS'].map(lambda x: int(str(x).rstrip('*')))","151a472b":"data.dtypes","cab17816":"op = data.loc[data['Year'] == 'Overall']\nop = op.drop(columns = \"Year\")","f9733ee3":"op[\"Outs\"] = op[\"Inns\"]-op[\"NO\"]","98697267":"op[\"O\/I\"] = op[\"Outs\"]\/op[\"Inns\"]","1d0687a0":"op.head()","93535d98":"hard_hitters = op.loc[(op[\"Inns\"]>30) & (op[\"S\/R\"]>80)].sort_values(by='S\/R', ascending=False)\nhard_hitters.head(10)","c1334ed4":"trace1 =go.Scatter(\n                    x = hard_hitters[\"Inns\"],\n                    y = hard_hitters[\"S\/R\"],\n                    mode = \"markers\",\n                    name = \"Name\",\n                    marker = dict(color=(\n            (hard_hitters[\"S\/R\"] > 110)            \n        ).astype('int'),\n        colorscale=[[0, 'yellow'], [1, 'red']]),\n                    text= hard_hitters[\"player_name\"])\n\ndata = [trace1]\nlayout = dict(title = 'The Hard Hitters of ODI Cricket',\n              xaxis= dict(title= 'Number of Matches',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Strike Rate',ticklen= 5,zeroline= False),\n              hovermode= 'closest',\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","123bc528":"consistent = op.loc[op[\"Inns\"]>30].sort_values(by='Avg', ascending=False)\nconsistent.head(10)","8535e8ac":"trace1 =go.Scatter(\n                    x = consistent[\"Runs\"],\n                    y = consistent[\"Avg\"],\n                    mode = \"markers\",\n                    name = \"Name\",\n                    marker = dict(color=(\n            ((consistent[\"Avg\"]-(consistent[\"Runs\"]\/1000)*1.641-37.5)>0)\n        ).astype('int'),\n        colorscale=[[0, 'yellow'], [1, 'red']]),\n                    text= consistent[\"player_name\"])\n\ndata = [trace1]\nlayout = dict(title = 'The Consistent Runmakers of ODI Cricket',\n              xaxis= dict(title= 'Runs Scored',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Average',ticklen= 5,zeroline= False),\n              hovermode= 'closest',\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","a9dfb20c":"h100 = op.sort_values(by='100s',ascending=False).head(30)\nh100.head(10)","7cd078a5":"h50 = op.sort_values(by='50s',ascending=False).head(30)\nh50.head(10)","a82e8e09":"trace2 = go.Bar(x = h100[\"player_name\"],\n                y = h100[\"100s\"],\n                name = \"ODI Centuries\",\n                marker = dict(color = 'red',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = h100.country)\ntrace1 = go.Bar(\n                x = h100[\"player_name\"],\n                y = h100[\"50s\"],\n                name = \"ODI 50s\",\n                marker = dict(color = 'blue',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = h50.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\",hovermode= 'closest', title = \"Top 30 ODI Century scorers\", yaxis= dict(title= 'Num 50 : Num 100',ticklen= 5,zeroline= False))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","3c5a6547":"trace2 = go.Bar(x = h50[\"player_name\"],\n                y = h50[\"100s\"],\n                name = \"ODI Centuries\",\n                marker = dict(color = 'red',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = h100.country)\ntrace1 = go.Bar(\n                x = h50[\"player_name\"],\n                y = h50[\"50s\"],\n                name = \"ODI 50s\",\n                marker = dict(color = 'blue',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = h50.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\",hovermode= 'closest', title = \"Top 30 ODI Half-Century scorers\", yaxis= dict(title= 'Num 50 : Num 100',ticklen= 5,zeroline= False))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","6df12342":"ducks = op.loc[(op[\"0s\"]>10)].sort_values(by='0s',ascending=False)\nducks.head(10)","2d252a40":"trace1 =go.Scatter(\n                    x = ducks[\"Inns\"],\n                    y = ducks[\"0s\"],\n                    mode = \"markers\",\n                    name = \"Name\",\n                    marker = dict(color=(\n            (((ducks[\"0s\"]\/ducks[\"Inns\"])-10\/100)>0)\n        ).astype('int'),\n        colorscale=[[0, 'red'], [1, 'yellow']]),\n                    text= ducks[\"player_name\"])\n\ndata = [trace1]\nlayout = dict(title = 'Getting Out at Nought',\n              xaxis= dict(title= 'Number of Innings Played',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Ducks',ticklen= 5,zeroline= False),\n              hovermode= 'closest',\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","643e26d4":"stay_play = op.loc[op[\"Inns\"]>100].sort_values(by='O\/I',ascending=True)\nstay_play.head(10)","141dbace":"trace1 =go.Scatter(\n                    x = stay_play[\"Runs\"],\n                    y = stay_play[\"O\/I\"],\n                    mode = \"markers\",\n                    name = \"Name\",\n                    marker = dict(color=(\n            ((stay_play[\"O\/I\"]<0.75)&(stay_play[\"Runs\"]>5000))\n        ).astype('int'),\n        colorscale=[[0, 'yellow'], [1, 'red']]),\n                    text= stay_play[\"player_name\"])\n\ndata = [trace1]\nlayout = dict(title = 'Batsmen who try and stay till the end',\n              xaxis= dict(title= 'Runs',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Outs\/Innings',ticklen= 5,zeroline= False),\n              hovermode= 'closest',\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","81542f76":"runs = op.loc[op[\"Runs\"]>1000]","de1e81f5":"trace1 =go.Scatter(\n                    x = runs[\"Runs\"],\n                    y = runs[\"Inns\"],\n                    mode = \"markers\",\n                    name = \"Name\",\n                    marker = dict(color=(\n            (((runs[\"Inns\"]*1000)\/(runs[\"Runs\"]))<27)\n        ).astype('int'),\n        colorscale=[[0, 'yellow'], [1, 'red']]),\n                    text= runs[\"player_name\"])\n\ndata = [trace1]\nlayout = dict(title = 'The Great Run Scorers of ODI Cricket',\n              xaxis= dict(title= 'Runs',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Innings',ticklen= 5,zeroline= False),\n              hovermode= 'closest',\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","b0057970":"<p>We can see that the highscore each year is an object. First thing's First. Let's convert that into an int64 dtype. Some of the highscores have an * (asterisk) next to them signifying that they were still not out when the innings got over. Let's remove all the asterisks as they are unimportant for our future needs. <\/p>","d256bf8f":"<h3>Highest ODI centuries<\/h3>\nLet's see who has got the most 100's in history","11d75d84":"<h3>Quack! Quack!<\/h3>\nLet's see who has got the most ducks in history","1402c030":"<h3>The Great Run Scorers of ODI Cricket<\/h3>\n\nWe are putting the number of ODI runs a batsman has scored against the number of innings he has taken to score it.","f1f53afe":"WORK CURRENTLY IN PROGRESS","fc88b5b0":"Outs is the number of times that player has gotten out in his career.","44b7ca26":"<h3> Overall Performance Dataframe <\/h3>\n<p> Let's make a separate dataframe for the overall performance of players <\/p>","0cd402e7":"<h3> Stay and Play Batsmen <\/h3>\nLet's figure out which batsmen have the mentality to stay and finish the game","c8281499":"\"O\/I\" is the ratio of the number of times the batsman has got out by the number of innings played","166b656b":"<h3>The Toppers in ODI half-centuries<\/h3>\nLet's see who has got the most 50's in history","23000988":"<h3> The hard-hitters <\/h3>\nLet's Find out the players who have played more than 30 innings in ODI matches who have a good strike rate."}}