{"cell_type":{"d768a1c6":"code","f61cbdcb":"code","0280be44":"code","e547491b":"code","7346073f":"code","d0cbd9d5":"code","84204319":"code","fa64af36":"code","23693639":"code","ce4a0d17":"code","9c629776":"code","b4acd7a0":"code","2a413c9d":"code","a4cb2584":"code","bc551cf8":"code","7485a06c":"code","1fab0423":"code","89dd9cfc":"code","718616e0":"code","45e687cb":"code","4b6bf5ec":"code","6f537983":"code","7fc75d04":"code","27a333b3":"code","2a7ba03f":"code","cd808c02":"code","30f5c421":"code","8066f812":"code","34066bf4":"code","d0091488":"code","e443d462":"code","b0083ce6":"code","b7cff5a3":"markdown","f52f3bb6":"markdown","ec576a1b":"markdown","f6a0faec":"markdown","a89ca713":"markdown"},"source":{"d768a1c6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f61cbdcb":"bottle_df = pd.read_csv(\"..\/input\/calcofi\/bottle.csv\")\ncast_df = pd.read_csv(\"..\/input\/calcofi\/cast.csv\")","0280be44":"bottle_df.info()","e547491b":"bottle_df.tail(5)","7346073f":"cast_df.info()","d0cbd9d5":"cast_df.tail(5)","84204319":"bottle_df.describe()","fa64af36":"bottle_df_cust = bottle_df[['Salnty','Depthm','T_degC']].copy()\n#bottle_df_cust = bottle_df.loc[1:1000,['Salnty','Depthm','T_degC']]","23693639":"bottle_df_cust.head()","ce4a0d17":"bottle_df_cust.isnull().sum()","9c629776":"from sklearn.impute import SimpleImputer\nsi = SimpleImputer()\nbottle_df_cust = pd.DataFrame(si.fit_transform(bottle_df_cust),columns = ['Salnty','Depthm','T_degC'])","b4acd7a0":"bottle_df_cust.isnull().sum()","2a413c9d":"import seaborn as sns\nsns.pairplot(bottle_df_cust,x_vars=['Salnty','Depthm'],y_vars=['T_degC'])\nplt.show()","a4cb2584":"sns.pairplot(bottle_df_cust,x_vars=['Salnty'],y_vars=['Depthm'])\nplt.show()","bc551cf8":"bottle_df_cust.describe()","7485a06c":"plt.figure(figsize=[24,6])\nplt.subplot(1,2,1)\nsns.boxplot(data = bottle_df_cust,y='Salnty')\nplt.subplot(1,2,2)\nsns.boxplot(data = bottle_df_cust,y='Depthm')\nplt.show()","1fab0423":"X = bottle_df_cust[['Salnty','Depthm']].copy()\nY = bottle_df_cust['T_degC'].copy()\n\nprint(X.shape,Y.shape)","89dd9cfc":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=39)\n\nprint(X_train.shape,y_train.shape)\nprint(X_test.shape,y_test.shape)","718616e0":"from sklearn import linear_model\nlm = linear_model.LinearRegression()\nlm.fit(X_train,y_train)","45e687cb":"print(\"Coefficients of the model :\",lm.coef_)\nprint(\"Intercept of the model :\",lm.intercept_)","4b6bf5ec":"y_pred = lm.predict(X_test)","6f537983":"from sklearn.metrics import r2_score\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - y_test)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_test) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(y_pred , y_test) )","7fc75d04":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 2)\nX_train_poly = poly_reg.fit_transform(X_train)","27a333b3":"lm.fit(X_train_poly,y_train)","2a7ba03f":"print(\"Coefficients of the model :\",lm.coef_)\nprint(\"Intercept of the model :\",lm.intercept_)","cd808c02":"X_test_poly = poly_reg.fit_transform(X_test)\ny_pred = lm.predict(X_test_poly)","30f5c421":"from sklearn.metrics import r2_score\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - y_test)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_test) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(y_pred , y_test) )","8066f812":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 50)\nrf.fit(X_train,y_train)","34066bf4":"y_pred = rf.predict(X_test)","d0091488":"from sklearn.metrics import r2_score\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - y_test)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_test) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(y_pred , y_test) )","e443d462":"rf.fit(X_train_poly,y_train)\ny_pred = rf.predict(X_test_poly)","b0083ce6":"from sklearn.metrics import r2_score\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - y_test)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_test) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(y_pred , y_test) )","b7cff5a3":"While predicting the temperature let's use only features Depth and Salinity","f52f3bb6":"The Depth vs Temparature graph shows that the as the depth increased the temparature has reduced. Whereas in the case of Salinity vs Temparature, there is no particular trend in the data.","ec576a1b":"My task is to predict the temperature of the water, all these details are available in bottle_df. Therefore, we shall be ignoring the cast_df for the rest of the notebook.\n","f6a0faec":"We can see that for the majority of the datapoints the Salinity of the water is close to 35 irrespective of the depth at which the sample was taken","a89ca713":"Building the Regression Models"}}