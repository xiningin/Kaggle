{"cell_type":{"6e8ba0ac":"code","ffe662b1":"code","55660298":"code","dedf627c":"code","22d349a9":"code","4dd95a5b":"code","b007ae15":"markdown","51edce58":"markdown","aa1ad5ea":"markdown","107e98d6":"markdown"},"source":{"6e8ba0ac":"from __future__ import division\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nfrom matplotlib import rcParams\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n","ffe662b1":"data= pd.read_csv('..\/input\/data-after-preprocessing\/Processed data.csv',\n                         parse_dates=['Date'])\n\ndata.head()\n","55660298":"#Color, Labels\ncolors = dict(zip(\n    ['North America', 'South America', 'Asia','Australia', 'Africa', 'Europe'],\n    ['#adb0ff', '#ffb3ff', '#90d595', '#e48381', '#aafbff', '#f7bb5f']))\n\ngroup_lk = data.set_index('country')['continent'].to_dict()\n#**********************************************************************************************************************\ndef draw_barchart(year):\n       dff = data[data['Date'].eq(year)].sort_values(by='Confirmed', ascending=True).tail(15)\n       ax.clear()\n       ax.barh(dff['country'], dff['Confirmed'], color=[colors[group_lk[x]] for x in dff['country']])\n       dx = dff['Confirmed'].max() \/ 200\n       for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['country'])):\n              ax.text(value - dx, i, name, size=10, weight=600, ha='right', va='bottom')\n              ax.text(value - dx, i - .25, group_lk[name], size=8, color='#444444', ha='right', va='baseline')\n              ax.text(value + dx, i, f'{value:,.0f}', size=10, ha='left', va='center')\n       # ... polished styles\n       ax.text(1, 0.4, year, transform=ax.transAxes, color='#777777', size=45, ha='right', weight=800)\n       ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n       ax.xaxis.set_ticks_position('top')\n       ax.tick_params(axis='x', colors='#777777', labelsize=12)\n       ax.set_yticks([])\n       ax.margins(0, 0.01)\n       ax.grid(which='major', axis='x', linestyle='-')\n       ax.set_axisbelow(True)\n       ax.text(0, 1.12, 'COVID_19 cases through time',\n       transform=ax.transAxes, size=12, weight=1000, ha='left')\n       plt.box(False)\n\n       \n      \n\n\n\nx=data[\"Date\"].dt.strftime('%Y-%m-%d').unique()\nfig, ax = plt.subplots(figsize=(15, 4))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=x)\nHTML(animator.to_html5_video())\n\n\n","dedf627c":"#********************************** Bubble plot *************************************\ndataset=data\nx_column = 'Active'\ny_column ='Recovered'\nbubble_column = 'country'\ntime_column = 'Date'\nsize_column = 'Deaths'\n#****************************************************************************************\n# make list of continents\ncontinents = []\nfor continent in dataset[\"continent\"]:\n    if continent not in continents:\n        continents.append(continent)\n#*****************************************************************************************\n# make figure\nfig_dict = {\n    \"data\": [],\n    \"layout\": {},\n    \"frames\": []\n}\n#******************************************************************************************\n# fill in most of layout\n# Get the max and min range of both axes\nxmin = min(np.log10(dataset[x_column]))*0.2\nxmax = max(np.log10(dataset[x_column]))*1.2\nymin = -40000\nymax = max(dataset[y_column])*1.5\n\n# Modify the layout\nfig_dict['layout']['xaxis'] = {'title': 'Number of Active cases','type': 'log',\n                            'range': [xmin, xmax]}\nfig_dict['layout']['yaxis'] = {'title': 'Number of recovered cases',\n                             'range': [ymin, ymax]}\nfig_dict['layout']['title'] = 'COVID_19 visualization'\nfig_dict['layout']['showlegend'] = True\nfig_dict['layout']['hovermode'] = 'closest'\nfig_dict[\"layout\"][\"updatemenus\"] = [\n    {\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": False},\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 300,\n                                                                    \"easing\": \"quadratic-in-out\"}}],\n                \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False},\n                                  \"mode\": \"immediate\",\n                                  \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"showactive\": False,\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0,\n        \"yanchor\": \"top\"\n    }\n]\n#**********************************************************************************************************************\nsliders_dict = {\n    \"active\": 0,\n    \"yanchor\": \"top\",\n    \"xanchor\": \"left\",\n    \"currentvalue\": {\n        \"font\": {\"size\": 20},\n        \"prefix\": \"day:\",\n        \"visible\": True,\n        \"xanchor\": \"right\"\n    },\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},\n    \"pad\": {\"b\": 10, \"t\": 50},\n    \"len\": 0.9,\n    \"x\": 0.1,\n    \"y\": 0,\n    \"steps\": []\n}\n#**********************************************************************************************************************\n# # make data\n# Get the days in the dataset\ndays = dataset[time_column].dt.strftime('%Y-%m-%d').unique()\n\nday = min(days)\nfor continent in continents:\n    dataset_by_year = dataset[dataset[\"Date\"] == day]\n    dataset_by_year_and_cont = dataset_by_year[\n        dataset_by_year[\"continent\"] == continent]\n\n    data_dict = {\n        \"x\": list(dataset_by_year_and_cont[\"Active\"]),\n        \"y\": list(dataset_by_year_and_cont[\"Recovered\"]),\n        \"mode\": \"markers\",\n        \"text\": list(dataset_by_year_and_cont[\"country\"]),\n        \"marker\": {\n            \"sizemode\": \"area\",\n            \"sizeref\": 100,\n            \"size\": list(dataset_by_year_and_cont[\"Deaths\"])\n        },\n        \"name\": continent\n    }\n    fig_dict[\"data\"].append(data_dict)\n#*********************************************************************************************************************\n# make frames\nfor day in days:\n    frame = {\"data\": [], \"name\": str(day)}\n    for continent in continents:\n        dataset_by_year = dataset[dataset[\"Date\"].dt.strftime('%Y-%m-%d')== str(day)]\n        dataset_by_year_and_cont = dataset_by_year[\n            dataset_by_year[\"continent\"] == continent]\n\n        data_dict = {\n            \"x\": list(dataset_by_year_and_cont[\"Active\"]),\n            \"y\": list(dataset_by_year_and_cont[\"Recovered\"]),\n            \"mode\": \"markers\",\n            \"text\": list(dataset_by_year_and_cont[\"country\"]),\n            \"marker\": {\n                \"sizemode\": \"area\",\n                \"sizeref\": 100,\n                \"size\": list(dataset_by_year_and_cont[\"Deaths\"])\n            },\n            \"name\": continent\n        }\n        frame[\"data\"].append(data_dict)\n#**********************************************************************************************************************\n\n    fig_dict[\"frames\"].append(frame)\n    slider_step = {\"args\":[\n        [day],\n        {\"frame\": {\"duration\": 300, \"redraw\": False},\n         \"mode\": \"immediate\",\n         \"transition\": {\"duration\": 300}}\n    ],\n        \"label\": str(day),\n        \"method\": \"animate\"}\n    sliders_dict[\"steps\"].append(slider_step)\n\nfig_dict[\"layout\"][\"sliders\"] = [sliders_dict]\n\nfig = go.Figure(fig_dict)\n\niplot(fig , config={'scrollzoom': True})\n","22d349a9":"import plotly.express as px\nfig = px.choropleth(data, locations=data['country'], locationmode='country names', color=np.log(data[\"Confirmed\"]),\n                    hover_name=data['country'], animation_frame=data[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.Oranges)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","4dd95a5b":"dataset=data\nx_column2 = 'Deaths'\ny_column2 ='Recovered'\nbubble_column2 = 'country'\ntime_column2 = 'Date'\nsize_column2 = 'Confirmed'\n#****************************************************************************************\n# make list of continents\ncontinents2 = []\nfor continent in dataset[\"continent\"]:\n    if continent not in continents2:\n        continents2.append(continent)\n#*****************************************************************************************\n# make figure\nfig_dict2 = {\n    \"data\": [],\n    \"layout\": {},\n    \"frames\": []\n}\n#******************************************************************************************\n# fill in most of layout\n# Get the max and min range of both axes\nxmin2 = min(np.log10(dataset[x_column2]))*0.2\nxmax2 = max(np.log10(dataset[x_column2]))*1.2\nymin2 = -40000\nymax2 = max(dataset[y_column2])*1.5\n\n# Modify the layout\nfig_dict2['layout']['xaxis'] = {'title': 'Number of Death','type': 'log',\n                            'range': [xmin2, xmax2]}\nfig_dict2['layout']['yaxis'] = {'title': 'Number of recovered',\n                             'range': [ymin2, ymax2]}\nfig_dict2['layout']['title'] = 'COVID_19 visualization'\nfig_dict2['layout']['showlegend'] = False\nfig_dict2['layout']['hovermode'] = 'closest'\nfig_dict2[\"layout\"][\"updatemenus\"] = [\n    {\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": False},\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 300,\n                                                                    \"easing\": \"quadratic-in-out\"}}],\n                \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False},\n                                  \"mode\": \"immediate\",\n                                  \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"showactive\": True,\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0,\n        \"yanchor\": \"top\"\n    }\n]\n#**********************************************************************************************************************\nsliders_dict2 = {\n    \"active\": 0,\n    \"yanchor\": \"top\",\n    \"xanchor\": \"left\",\n    \"currentvalue\": {\n        \"font\": {\"size\": 20},\n        \"prefix\": \"day:\",\n        \"visible\": True,\n        \"xanchor\": \"right\"\n    },\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},\n    \"pad\": {\"b\": 10, \"t\": 50},\n    \"len\": 0.9,\n    \"x\": 0.1,\n    \"y\": 0,\n    \"steps\": []\n}\n#**********************************************************************************************************************\n# # make data\n# Get the days in the dataset\ndays = dataset[time_column2].dt.strftime('%Y-%m-%d').unique()\n\nday = min(days)\nfor continent in continents2:\n    dataset_by_year = dataset[dataset[\"Date\"] == day]\n    dataset_by_year_and_cont = dataset_by_year[\n        dataset_by_year[\"continent\"] == continent]\n\n    data_dict2 = {\n        \"x\": list(dataset_by_year_and_cont[\"Deaths\"]),\n        \"y\": list(dataset_by_year_and_cont[\"Recovered\"]),\n        \"mode\": \"markers\",\n        \"text\": list(dataset_by_year_and_cont[\"country\"]),\n        \"marker\": {\n            \"sizemode\": \"area\",\n            \"sizeref\": 100,\n            \"size\": list(dataset_by_year_and_cont[\"Confirmed\"])\n        },\n        \"name\": continent\n    }\n    fig_dict2[\"data\"].append(data_dict2)\n#*********************************************************************************************************************\n# make frames\nfor day in days:\n    frame = {\"data\": [], \"name\": str(day)}\n    for continent in continents2:\n        dataset_by_year = dataset[dataset[\"Date\"].dt.strftime('%Y-%m-%d')== str(day)]\n        dataset_by_year_and_cont = dataset_by_year[\n            dataset_by_year[\"continent\"] == continent]\n\n        data_dict2 = {\n            \"x\": list(dataset_by_year_and_cont[\"Deaths\"]),\n            \"y\": list(dataset_by_year_and_cont[\"Recovered\"]),\n            \"mode\": \"markers\",\n            \"text\": list(dataset_by_year_and_cont[\"country\"]),\n            \"marker\": {\n                \"sizemode\": \"area\",\n                \"sizeref\": 500,\n                \"size\": list(dataset_by_year_and_cont[\"Confirmed\"])\n            },\n            \"name\": continent\n        }\n        frame[\"data\"].append(data_dict2)\n#**********************************************************************************************************************\n\n    fig_dict2[\"frames\"].append(frame)\n    slider_step = {\"args\":[\n        [day],\n        {\"frame\": {\"duration\": 300, \"redraw\": False},\n         \"mode\": \"immediate\",\n         \"transition\": {\"duration\": 300}}\n    ],\n        \"label\": str(day),\n        \"method\": \"animate\"}\n    sliders_dict2[\"steps\"].append(slider_step)\n\nfig_dict2[\"layout\"][\"sliders\"] = [sliders_dict2]\n\nfig2 = go.Figure(fig_dict2)\n\niplot(fig2 , config={'scrollzoom': True})\n","b007ae15":"# **A_Bubble plot**","51edce58":"# **B_Animated maps graph**","aa1ad5ea":"# **D_Animated Bubble plot**","107e98d6":"# **C_Animated Sorted chart** "}}