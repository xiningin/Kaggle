{"cell_type":{"bfbc5192":"code","4c044c42":"code","f3a271d1":"code","adf982c2":"code","8b5bd424":"code","6718bbb2":"code","7082fd02":"code","a92b9417":"code","9816db3d":"code","0881d3f6":"code","c0775ce4":"code","56f77fb6":"code","08999a79":"code","8c7980a8":"code","41d83e3d":"code","144abcaf":"code","d8050bc9":"code","87ca4e88":"code","d8b7914a":"code","e9742d1d":"code","095b7579":"code","0d75f5ad":"code","6f4e47b9":"code","010c6911":"code","de428d73":"code","215be03d":"code","f2173c82":"code","75b0676e":"code","2a81d309":"code","13631c39":"code","1320df03":"code","a0deea85":"code","638b5c0c":"code","334e8f20":"code","14cbeb3f":"code","0290b462":"code","daaf9142":"code","3e440b4c":"markdown"},"source":{"bfbc5192":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c044c42":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","f3a271d1":"test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")","adf982c2":"train.head()","8b5bd424":"train.dtypes","6718bbb2":"train.dtypes.value_counts()","7082fd02":"dtype_dict = train.dtypes.value_counts( ).to_dict()","a92b9417":"dtype_cols={}\nfor dtype , _ in dtype_dict.items():\n    dtype_cols[dtype]=[]\n    for col in train.columns:\n        if train.dtypes[col]==dtype:\n            dtype_cols[dtype].append(col)","9816db3d":"train[['LotFrontage','MasVnrArea','GarageYrBlt']].head()","0881d3f6":"train[['LotFrontage','MasVnrArea','GarageYrBlt','SalePrice']].corr()","c0775ce4":"plt.scatter(train.LotFrontage,train.SalePrice)","56f77fb6":"train.corr()","08999a79":"#\u70ed\u529b\u56fe\nplt.figure(figsize=(16,16))\nsns.heatmap(train.corr())","8c7980a8":"train.corr()['SalePrice']","41d83e3d":"train.corr()['SalePrice'].abs().sort_values(ascending=False)[:10]","144abcaf":"sns.displot(train.OverallQual)","d8050bc9":"sns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=train,\n            whis=[0, 100], width=.6, palette=\"vlag\")","87ca4e88":"f, ax = plt.subplots(figsize=(6, 6))\nsns.scatterplot(x=train.GrLivArea, y=train.SalePrice, s=5, color=\".15\")\nsns.histplot(x=train.GrLivArea, y=train.SalePrice, bins=50, pthresh=.1, cmap=\"mako\")\nsns.kdeplot(x=train.GrLivArea, y=train.SalePrice, levels=5, color=\"w\", linewidths=1)","d8b7914a":"pd.cut(train.GarageArea, 10)","e9742d1d":"pd.pivot_table(\n    train.groupby([\"OverallQual\", pd.cut(train.GrLivArea, 10)])[\"SalePrice\"].mean().reset_index(),\n    index=\"OverallQual\",\n    columns=\"GrLivArea\",\n    values=\"SalePrice\")","095b7579":"\n\nsns.heatmap(pd.pivot_table(\n    train.groupby([\"OverallQual\", pd.cut(train.GrLivArea, 10)])[\"SalePrice\"].mean().reset_index(),\n    index=\"OverallQual\",\n    columns=\"GrLivArea\",\n    values=\"SalePrice\"))","0d75f5ad":"for col in train.corr()[ \"SalePrice\" ].abs( ).sort_values(ascending=False)[1:11].index:\n    plt.figure(figsize=(6,6))\n    plt.scatter(x=train[col], y=train.SalePrice)\n    plt.title(col)\n    ","6f4e47b9":"sns.displot(train.SalePrice)","010c6911":"train.SalePrice.skew()","de428d73":"sns.displot(np.log(train.SalePrice))","215be03d":"np.log(train.SalePrice).skew()","f2173c82":"target = train.SalePrice\ntarget = np.log(target)\nmu, std = target.mean(), target.std()\ntarget = (target - mu) \/ std","75b0676e":"sns.displot(target)","2a81d309":"train.corr()[\"SalePrice\"].sort_values(ascending=False)[1:11].index.tolist()","13631c39":"from sklearn.linear_model import LinearRegression,Ridge\nfrom sklearn.metrics import mean_squared_log_error as msle\nfrom sklearn.model_selection import KFold","1320df03":"model =LinearRegression()\nmodel.fit(train[top10_cols],target)","a0deea85":"model.coef_","638b5c0c":"test_pred = np.exp(model.predict(test[top10_cols].fillna(0)) * std+ mu )","334e8f20":"sns.displot(test_pred)","14cbeb3f":"submission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","0290b462":"submission[\"SalePricea\"]=test_pred","daaf9142":"submission.to_csv(\"submission.csv\",index=False)","3e440b4c":"1.\u623f\u4ef7\u9884\u5904\u7406\n2.\u7b5b\u9009\u76f8\u5173\u6027\u6392\u5e8f\u524d10\u7684\u7279\u5f81\uff0c\u4f5c\u4e3a\u6211\u4eec\u7684\u81ea\u53d8\u91cf\n3.\u5efa\u7acb\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u9884\u6d4b\u6d4b\u8bd5\u96c6\u6570\u636e\n4."}}