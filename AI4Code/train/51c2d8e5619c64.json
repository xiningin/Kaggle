{"cell_type":{"c7301176":"code","2704bbbc":"code","74f40231":"code","cce2b3f9":"code","0fac170c":"code","7fb9421f":"code","da3a19e1":"code","77ebfdbe":"code","77e24e48":"code","9a36b25b":"code","5d359297":"code","038976e9":"code","2996a82a":"code","20664ad9":"code","17ccb61e":"code","6160a3bb":"code","8bf959c8":"code","b4f83761":"code","90b2deb8":"code","70621212":"code","61ada6bf":"code","1ecf6b3e":"code","cf35be35":"code","f6dc8070":"code","9da242b3":"code","2fac0786":"code","bc9e7091":"code","5c182885":"code","00a31a4a":"code","1a5e08f1":"code","0cd93879":"code","2e8be2e1":"code","cb38041a":"code","e2661db2":"code","951564d6":"code","90e13703":"code","402887fb":"code","c8425f0a":"code","3ab38609":"code","707fc900":"code","784d047a":"code","64203784":"code","be85f8e3":"code","1d2b064f":"code","7e4c3efe":"code","b65685ad":"code","a320896d":"code","e89a071a":"code","5041c8c7":"code","5c55889c":"code","e0753800":"code","1a714840":"code","bb86bfe3":"code","08cd7554":"code","59b75ee9":"code","7fd8e05a":"code","fffaa962":"code","67a1b1d6":"code","4535ab86":"code","e6f4e6b0":"code","08f3d703":"code","c13f6ebc":"code","d0ac1d42":"code","bf32f2a8":"code","4ca1abd3":"code","826dd701":"code","e7e6f1b6":"code","c3cc3c63":"code","c0548f76":"code","3b2423d5":"code","25c9cd27":"code","7c26feec":"code","99edd869":"code","b4ae5054":"code","5528702a":"code","7ae5a99d":"code","4798b085":"code","2482aade":"code","431d9ac1":"code","781a34ce":"code","6b2c85f7":"code","90e39a53":"code","67098d49":"code","99906b62":"code","cb088d36":"code","c7049b72":"code","0da00c20":"code","8cd31a12":"code","2a20a7d1":"code","338c3036":"code","3424e7a2":"code","8de6ff37":"code","2cfeb8e5":"code","17499518":"code","27692d1d":"code","fabb2a08":"code","218135f1":"code","6aedc7e2":"code","58b0ede4":"code","f74b4867":"code","9ee4167a":"code","4841f743":"code","b0c99c8b":"code","d725e5ab":"code","0cba573d":"code","9b828cd5":"code","fe3deb75":"code","46ae1dee":"code","35a06145":"code","a13164fb":"code","8c8c3e87":"code","876df048":"code","37662080":"code","b4a1bb5e":"code","7e242822":"code","1ef3cd9f":"code","cda491e4":"code","3c793076":"code","5c6bb834":"code","6e0517e1":"code","e8e8523b":"code","1bd7eee0":"code","4618e0ea":"code","c691a277":"code","43d5c65d":"code","ed67fd78":"code","57cc04f4":"code","c6c313c1":"code","528388f3":"code","d49fa8a1":"markdown","16f33bf9":"markdown","eb26d136":"markdown","9af953f6":"markdown","27f26831":"markdown","ffd766fa":"markdown","6b38675a":"markdown","8d58bd0d":"markdown","0813817e":"markdown","fa8e3003":"markdown","26b4cf63":"markdown"},"source":{"c7301176":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2704bbbc":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy as sp","74f40231":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","cce2b3f9":"plt.style.use('fivethirtyeight')","0fac170c":"train.head()","7fb9421f":"train.tail()","da3a19e1":"train.describe()","77ebfdbe":"train[train['Sex'] == 'male'].shape","77e24e48":"train[train['Sex'] == 'female'].shape","9a36b25b":"print(train[train['Survived'] == 1].shape[0]\/len(train))\nprint(train[train['Survived'] == 0].shape[0]\/len(train))","5d359297":"train.isna().sum()\/len(train)","038976e9":"test.isna().sum()","2996a82a":"Data_set = pd.concat([train, test])\nData_set.shape","20664ad9":"train.head(5)","17ccb61e":"sns.countplot('Survived', data=train)","6160a3bb":"sns.countplot('Embarked', data=train)\nplt.title('Embarked Train')","8bf959c8":"sns.countplot('Embarked', data=test)\nplt.title('Embarked Test')","b4f83761":"sns.countplot('Embarked',data=Data_set)","90b2deb8":"Data_set.groupby(['Sex','Survived'])['Survived'].count()","70621212":"f, ax = plt.subplots(1,2, figsize=(18,8))\nData_set[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=Data_set, ax=ax[1])\nax[1].set_title('Sex:Survived vs Dead')\nplt.show()","61ada6bf":"pd.crosstab(Data_set.Pclass, Data_set.Survived, margins=True).style.background_gradient(cmap='summer_r')","1ecf6b3e":"fig, ax = plt.subplots(1,2, figsize=(18,8))\nData_set['Pclass'].value_counts().plot.bar(ax=ax[0])\nax[0].set_title('Number Of Passengers By Pclass')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=Data_set, ax=ax[1])\nax[1].set_title('Pclass:Survived vs Dead')","cf35be35":"Data_set.groupby(['Pclass','Survived'])['Survived'].count()[3][0]\/(Data_set.groupby(['Pclass','Survived'])['Survived'].count()[3][0]+\\\n                                                                   Data_set.groupby(['Pclass','Survived'])['Survived'].count()[3][1])","f6dc8070":"pd.crosstab([Data_set.Sex, Data_set.Survived], Data_set.Pclass, margins=True).style.background_gradient('summer_r')","9da242b3":"sns.factorplot('Pclass','Survived', hue='Sex', data=Data_set)","2fac0786":"Data_set.Age.max()","bc9e7091":"Data_set.Age.min()","5c182885":"Data_set.Age.mean()","00a31a4a":"f, ax = plt.subplots(1,2, figsize = (18,8))\nsns.violinplot('Pclass','Age', hue = 'Survived', data = Data_set, split = True, ax = ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot('Sex','Age', hue = 'Survived', data=Data_set, split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\n","1a5e08f1":"Data_set['Initial'] = 0\nfor i in Data_set:\n    Data_set['Initial'] = Data_set.Name.str.extract('([A=-Za-z]+)\\.')","0cd93879":"train['Initial'] = 0\nfor i in train:\n    train['Initial'] = train.Name.str.extract('([A=-Za-z]+)\\.')","2e8be2e1":"pd.crosstab(Data_set.Initial, Data_set.Sex).T.style.background_gradient(cmap = 'summer_r')","cb38041a":"Data_set['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\\\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Mrs'],inplace=True)","e2661db2":"train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\\\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)","951564d6":"Data_set.groupby('Initial')['Age'].mean()\n","90e13703":"Data_set.loc[(Data_set.Age.isnull())&(Data_set.Initial == 'Mr'), 'Age'] = 33\nData_set.loc[(Data_set.Age.isnull())&(Data_set.Initial == 'Master'), 'Age'] = 5\nData_set.loc[(Data_set.Age.isnull())&(Data_set.Initial == 'Miss'), 'Age'] = 22\nData_set.loc[(Data_set.Age.isnull())&(Data_set.Initial == 'Mrs'), 'Age'] = 37\nData_set.loc[(Data_set.Age.isnull())&(Data_set.Initial == 'Ohter'), 'Age'] = 45\nData_set.loc[(Data_set.Age.isnull())&(Data_set.Initial == 'Dona'), 'Age'] = 39","402887fb":"Data_set.Age.isnull().any()","c8425f0a":"f, ax = plt.subplots(1,2, figsize = (20,10))\nData_set[Data_set['Survived']==0].Age.plot.hist(ax=ax[0], bins=20, edgecolor='black',color='red')\nax[0].set_title('Survived = 0')\nx1 = list(range(0,85,5))\nax[0].set_xticks(x1)\nData_set[Data_set['Survived']==1].Age.plot.hist(ax=ax[1], bins=20, edgecolor='black',color='green')\nax[1].set_title('Survived = 1')\nx2 = list(range(0,85,5))\nax[1].set_xticks(x2)","3ab38609":"sns.factorplot('Pclass', 'Survived', col='Initial', data=Data_set)","707fc900":"pd.crosstab([Data_set.Embarked, Data_set.Pclass], [Data_set.Sex, Data_set.Survived], \\\n            margins=True).style.background_gradient(cmap='summer_r')","784d047a":"sns.factorplot('Embarked','Survived', data = Data_set)\nfig = plt.gcf()\nfig.set_size_inches(5,3)\n","64203784":"f, ax = plt.subplots(2,2, figsize = (20,15))\nsns.countplot('Embarked',data=Data_set, ax= ax[0,0])\nax[0,0].set_title('# of Passengers Boarded')\nsns.countplot('Embarked', hue = 'Sex',data=Data_set, ax=ax[0,1])\nax[0,1].set_title('Male Female split for Embarked')\nsns.countplot('Embarked', hue = 'Survived', data=Data_set, ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=Data_set, ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)","be85f8e3":"sns.factorplot('Pclass','Survived', hue = 'Sex', col = 'Embarked', data=Data_set)","1d2b064f":"Data_set.Embarked.isna().sum()","7e4c3efe":"Data_set.Embarked.fillna('S', inplace=True)","b65685ad":"Data_set.Embarked.isnull().any()","a320896d":"pd.crosstab([Data_set.SibSp], Data_set.Survived).style.background_gradient(cmap='summer_r')","e89a071a":"f, ax = plt.subplots(1,2, figsize=(20,8))\nsns.barplot('SibSp','Survived', data=Data_set, ax= ax[0])\nax[0].set_title('SibSp vs Survived')\nsns.factorplot('SibSp', 'Survived', data=Data_set, ax=ax[1])\nax[1].set_title('SibSp vs Survived')\nplt.close(2)","5041c8c7":"pd.crosstab(Data_set.SibSp, Data_set.Pclass).style.background_gradient(cmap='summer_r')","5c55889c":"pd.crosstab(Data_set.Parch, Data_set.Pclass).style.background_gradient(cmap='summer_r')","e0753800":"f, ax = plt.subplots(1,2,figsize=(20,8))\nsns.barplot('Parch', 'Survived', data=Data_set, ax=ax[0])\nax[0].set_title('Parch vs Survived')\nsns.factorplot('Parch', 'Survived', data=Data_set, ax=ax[1])\nax[1].set_title('Parch vs Survived')\nplt.close(2)\n","1a714840":"print('Highest Fare was:',Data_set['Fare'].max())\nprint('Lowest Fare was:',Data_set['Fare'].min())\nprint('Average Fare was:',Data_set['Fare'].mean())","bb86bfe3":"Data_set.Fare.isna().sum()","08cd7554":"test[test.Fare.isna() == True]","59b75ee9":"train[(train.Embarked == 'S')&(train.Age > 58)&(train.Age < 64)].Fare.mean()","7fd8e05a":"Data_set.Fare.fillna(26, inplace=True)","fffaa962":"Data_set.isna().sum()","67a1b1d6":"f, ax = plt.subplots(1,3, figsize=(20,8))\nsns.distplot(Data_set[Data_set['Pclass']==1].Fare, ax=ax[0])\nax[0].set_title('Fares of Pclass 1')\nsns.distplot(Data_set[Data_set['Pclass']==2].Fare, ax=ax[1])\nax[1].set_title('Fares of Pclass 2')\nsns.distplot(Data_set[Data_set['Pclass']==3].Fare, ax=ax[2])\nax[2].set_title('Fares of Pclass 3')","4535ab86":"sns.heatmap(Data_set.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) #data.corr()-->correlation matrix\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","e6f4e6b0":"Data_set.head()","08f3d703":"Data_set.Age","c13f6ebc":"facet = sns.FacetGrid(Data_set, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.add_legend()","d0ac1d42":"pd.qcut(Data_set.Age, 5)","bf32f2a8":"Data_set['Age_band'] = 0\nData_set.loc[Data_set['Age']<= 21, 'Age_band'] = 0\nData_set.loc[(Data_set['Age']>21)&(Data_set['Age']<=26), 'Age_band'] = 1\nData_set.loc[(Data_set['Age']>26)&(Data_set['Age']<=33), 'Age_band'] = 2\nData_set.loc[(Data_set['Age']>33)&(Data_set['Age']<=39), 'Age_band'] = 3\nData_set.loc[(Data_set['Age']>39)&(Data_set['Age']<=50), 'Age_band'] = 4\nData_set.loc[Data_set['Age'] > 50, 'Age_band'] = 5","4ca1abd3":"Data_set['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')","826dd701":"sns.factorplot('Age_band', 'Survived', data=Data_set, col='Pclass')","e7e6f1b6":"Data_set['Family_size'] = 0\nData_set['Family_size'] = Data_set['Parch'] + Data_set['SibSp']\nData_set['Alone'] = 0\nData_set.loc[Data_set.Family_size ==0, 'Alone'] = 1","c3cc3c63":"f, ax = plt.subplots(1,2, figsize=(18,6))\nsns.factorplot('Family_size', 'Survived', data=Data_set, ax=ax[0])\nax[0].set_title('Family_Size vs Survived')\nsns.factorplot('Alone', 'Survived', data=Data_set, ax=ax[1])\nax[1].set_title('Alone vs Survived')\nplt.close(2)\nplt.close(3)","c0548f76":"sns.factorplot('Alone', 'Survived', data=Data_set, hue='Sex', col='Pclass')","3b2423d5":"Data_set['Fare_range'] = pd.qcut(Data_set['Fare'], 6)\nData_set.groupby(['Fare_range'])['Survived'].mean().to_frame().style.background_gradient('summer_r')","25c9cd27":"Data_set['Fare_cat'] = 0\nData_set.loc[Data_set['Fare']<= 7.775, 'Fare_cat'] = 0\nData_set.loc[(Data_set['Fare']>7.775)&(Data_set['Fare']<=8.662) ,'Fare_cat'] = 1\nData_set.loc[(Data_set['Fare']>8.662)&(Data_set['Fare']<=14.454),'Fare_cat'] = 2\nData_set.loc[(Data_set['Fare']>14.454)&(Data_set['Fare']<=26),'Fare_cat'] = 3\nData_set.loc[(Data_set['Fare']>26)&(Data_set['Fare']<=53.1),'Fare_cat'] = 4\nData_set.loc[Data_set['Fare']>53.1,'Fare_cat'] = 5","7c26feec":"sns.factorplot('Fare_cat', 'Survived', data=Data_set, hue='Sex')","99edd869":"Data_set.loc[414]","b4ae5054":"Data_set.loc[414,'Initial']","5528702a":"Data_set['Initial'].unique()","7ae5a99d":"Data_set['Sex'].replace(['male','female'], [0,1], inplace=True)\nData_set['Embarked'].replace(['S','C','Q'], [0,1,2], inplace=True)\nData_set['Initial'].replace(['Mr','Mrs','Miss','Master','Other'], [0,1,2,3,4],inplace=True)","4798b085":"Data_set.head(1)","2482aade":"Data_set.drop(['Name','Age','Ticket','Fare','Cabin','Fare_range'],axis=1,inplace=True)","431d9ac1":"sns.heatmap(Data_set.corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':20})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","781a34ce":"from sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix","6b2c85f7":"test_done = Data_set[(Data_set['Survived'] != 0)&(Data_set['Survived'] != 1)]","90e39a53":"del test_done['Survived']","67098d49":"train_done = Data_set[(Data_set['Survived'] == 0)|(Data_set['Survived'] == 1)]","99906b62":"train_done","cb088d36":"del train_done['PassengerId']","c7049b72":"target = train_done['Survived']","0da00c20":"split = StratifiedShuffleSplit(n_splits=5, test_size=0.3, random_state=42)\nfor trn_idx, tst_idx in split.split(train_done, target):\n    sampled_trn = train_done.loc[trn_idx]\n    sampled_tst = train_done.loc[tst_idx]","8cd31a12":"len(sampled_tst)","2a20a7d1":"lr_clf = LogisticRegression()\nrf_clf = RandomForestClassifier()","338c3036":"sampled_trn","3424e7a2":"smp_target = sampled_trn['Survived']\ndel sampled_trn['Survived']","8de6ff37":"lr_clf.fit(sampled_trn, smp_target)","2cfeb8e5":"tst_target = sampled_tst['Survived']\ndel sampled_tst['Survived'] ","17499518":"pred = lr_clf.predict(sampled_tst)","27692d1d":"print('Accuracy for Logistic Regression is',metrics.accuracy_score(pred,tst_target))","fabb2a08":"sampled_trn","218135f1":"Pid = test_done['PassengerId']\ndel test_done['PassengerId']","6aedc7e2":"ans = pd.Series(lr_clf.predict(test_done))","58b0ede4":"ans = ans.astype('int')","f74b4867":"submission = pd.concat([Pid, ans], axis=1)","9ee4167a":"submission.columns = [['PassengerId','Survived']]","4841f743":"submission.to_csv('submission_stratified.csv', index=False)","b0c99c8b":"pd.read_csv('submission_stratified.csv')","d725e5ab":"train, test = train_test_split(train_done, test_size = 0.2, random_state=42,\\\n                                                    stratify=train_done['Survived'])\ntrain_X=train[train.columns[1:]]\ntrain_Y=train[train.columns[:1]]\ntest_X=test[test.columns[1:]]\ntest_Y=test[test.columns[:1]]\nX=train_done[train_done.columns[1:]]\nY=train_done['Survived']","0cba573d":"Data_set.head()","9b828cd5":"test_set = Data_set[(Data_set.Survived != 0)&(Data_set.Survived != 1)]","fe3deb75":"Data_set.shape","46ae1dee":"test_set.shape","35a06145":"train_set = Data_set[(Data_set.Survived == 0)|(Data_set.Survived == 1)]","a13164fb":"train_set.shape","8c8c3e87":"target = train_set['Survived']\npid = test_set['PassengerId']","876df048":"target","37662080":"train_set.head()","b4a1bb5e":"del train_set['PassengerId']\ndel train_set['Survived']","7e242822":"x_train, x_test, y_train, y_test = train_test_split(train_set, target, test_size = 0.3, random_state = 42, stratify=target)","1ef3cd9f":"lr_clf.fit(x_train, y_train)","cda491e4":"pred = lr_clf.predict(x_test)","3c793076":"metrics.accuracy_score(pred, y_test)","5c6bb834":"x_train.head()","6e0517e1":"y_test","e8e8523b":"test_done.head().shape","1bd7eee0":"ans = pd.Series(lr_clf.predict(test_done))","4618e0ea":"ans = ans.astype('int')","c691a277":"submission = pd.DataFrame( {\n    'PassengerId' : test_set['PassengerId'],\n    'Survived' : ans,\n})","43d5c65d":"submission.to_csv('submission_trn_tst_split.csv', index=False)","ed67fd78":"pd.read_csv('submission_trn_tst_split.csv')","57cc04f4":"submiss.head()","c6c313c1":"submiss.to_csv('submission_test.csv')","528388f3":"pd.read_csv('submission_test.csv')","d49fa8a1":"### Embarked","16f33bf9":"### Train test Split \uacb0\uacfc","eb26d136":"## SibSip\n- Sibling = bro, sis, stepbro, stepsis\n- Spouse = husband, wife\n","9af953f6":"There is Nan Data in test set, so we need to preprocess train and also test data.  \nLet's join the data, but do EDA only in train data.\n","27f26831":"There is a lot of 'S' Class in test set","ffd766fa":"Women from Pclass1 is about 95-96%","6b38675a":"## Parch","8d58bd0d":"### Stratified Sampling \uacb0\uacfc","0813817e":"## Get_dummies\uc640\n## Label Encoding\ube44\uad50?","fa8e3003":"## Fare, continous Feature","26b4cf63":"[(0.169, 21.0] < (21.0, 26.0] < (26.0, 33.0] < (33.0, 39.0] < (39.0, 80.0]]m"}}