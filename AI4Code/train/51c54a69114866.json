{"cell_type":{"e32a400d":"code","14d5b150":"code","8830a820":"code","3f0b54ff":"code","b55f3b29":"code","4f0c4b8d":"code","bdd6ddf3":"code","298d887c":"code","b017b078":"code","bc103d97":"code","6f20c3d0":"code","cae93aef":"code","9ab1affa":"code","505fd74f":"code","39b40e1f":"code","70272269":"code","b30fdab4":"code","ac93a390":"code","e496f255":"code","f089f352":"code","a6df41a7":"code","7f8518c2":"code","6ca4bef9":"code","393f2283":"code","9367acd7":"code","79b35005":"code","c7fa8eb7":"code","1de16af7":"code","000bea62":"code","e2cbcfdb":"code","b98c82b6":"code","8486a803":"code","242d333d":"code","024aa85a":"code","cc546b22":"code","69c39540":"code","2c1e7606":"code","18b6ab3f":"code","1abab34e":"code","c74de175":"code","a1f99210":"code","15a2ef37":"code","4a2f4b26":"code","642eafca":"code","5f018440":"code","b02e090f":"code","dcb5d2ae":"code","1479ba2b":"code","da75ed65":"code","888dcd39":"code","44ea5669":"markdown","d2db0698":"markdown","c408a23a":"markdown","dd372a53":"markdown","807e03a6":"markdown"},"source":{"e32a400d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","14d5b150":"train_df = pd.read_csv('\/kaggle\/input\/cte-ml-hack-2019\/train_real.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/cte-ml-hack-2019\/test_real.csv')","8830a820":"train_df.head()","3f0b54ff":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df['label'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('label')\nax[0].set_ylabel('')\nsns.countplot('label',data=train_df,ax=ax[1])\nax[1].set_title('label')\nplt.show()'''","b55f3b29":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['Altitude','label']].groupby(['Altitude']).mean().plot.bar(ax=ax[0])\nax[0].set_title('altitude vs label')\nsns.countplot('Altitude',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('Altitude vs label')\nplt.show()","4f0c4b8d":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['Azimuthal_angle','label']].groupby(['Azimuthal_angle']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Azimuthal_angle vs label')\nsns.countplot('Azimuthal_angle',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('Azimuthal_angle vs label')\nplt.show()","bdd6ddf3":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['Incline','label']].groupby(['Incline']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Incline vs label')\nsns.countplot('Incline',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('Incline vs label')\nplt.show()","298d887c":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['H_dist_Hydro','label']].groupby(['H_dist_Hydro']).mean().plot.bar(ax=ax[0])\nax[0].set_title('H_dist_Hydro vs label')\nsns.countplot('H_dist_Hydro',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('H_dist_Hydro vs label')\nplt.show()","b017b078":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['V_dist_Hydro','label']].groupby(['V_dist_Hydro']).mean().plot.bar(ax=ax[0])\nax[0].set_title('V_dist_Hydro vs label')\nsns.countplot('V_dist_Hydro',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('V_dist_Hydro vs label')\nplt.show()","bc103d97":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['V_dist_Hydro','label']].groupby(['V_dist_Hydro']).mean().plot.bar(ax=ax[0])\nax[0].set_title('V_dist_Hydro vs label')\nsns.countplot('V_dist_Hydro',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('V_dist_Hydro vs label')\nplt.show()","6f20c3d0":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['H_dist_Road','label']].groupby(['H_dist_Road']).mean().plot.bar(ax=ax[0])\nax[0].set_title('H_dist_Road vs label')\nsns.countplot('H_dist_Road',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('H_dist_Road vs label')\nplt.show()","cae93aef":"''''f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['Hillshade_9am','label']].groupby(['Hillshade_9am']).mean().plot.bar(ax=ax[0])\nax[0].set_title('H_dist_Road vs label')\nsns.countplot('Hillshade_9am',hue='label',data=train_df,ax=ax[1])\nax[1].set_title('Hillshade_9am vs label')\nplt.show()","9ab1affa":"sns.heatmap(train_df.corr(),annot=True,cmap='RdYlGn',linewidths=0.5) #data.corr()-->correlation matrix\nfig=plt.gcf()\nfig.set_size_inches(20,16)\nplt.show()","505fd74f":"#train_df.dtypes","39b40e1f":"X_train = train_df.drop(['Id', 'label', 'Soil'], axis=1)\nY_train = train_df['label']","70272269":"#X_train.head()","b30fdab4":"#Y_train.head()","ac93a390":"X_test = test_df.drop(['Id' ,'Soil'], axis=1)\nX_test.head()","e496f255":"from sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn import svm #support vector Machine\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix","f089f352":"train,test=train_test_split(train_df,test_size=0.3,random_state=0,stratify=train_df['label'])\n","a6df41a7":"train[train.columns[1:15]]","7f8518c2":"train_X=train[train.columns[1:15]]\ntrain_Y=train[train.columns[16]]\ntest_X=test[test.columns[1:15]]\ntest_Y=test[test.columns[16]]\nX=train_df[test_df.columns[1:15]]\nY=train_df['label']","6ca4bef9":"train_X = train.drop(['Id', 'label', 'Soil'], axis=1)\ntest_X=test.drop(['Id', 'Soil','label'], axis=1)","393f2283":"\n'''from sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.metrics import roc_auc_score\n\nclf=LogisticRegressionCV(cv=5, max_iter = 1000).fit(train_X,train_Y)","9367acd7":"''''train_res=clf.predict(train_X)\ntrain_res","79b35005":"'''''print('The accuracy of the Logistic Regression is',metrics.roc_auc_score(train_res,train_Y))\n","c7fa8eb7":"''''model=svm.SVC(C=0.05, cache_size=200, class_weight=None, coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma=0.1, kernel='rbf',\n    max_iter=-1, probability=False, random_state=None, shrinking=True,\n    tol=0.001, verbose=False)\nmodel.fit(train_X,train_Y)\nprediction1=model.predict(test_X)\n","1de16af7":"''''model=svm.SVC(kernel='linear',C=0.1,gamma=0.1)\nmodel.fit(train_X,train_Y)\nprediction2=model.predict(test_X)\nprint('Accuracy for linear SVM is',metrics.roc_auc_score(prediction2,test_Y))","000bea62":"''''model=DecisionTreeClassifier()\nmodel.fit(train_X,train_Y)\nprediction4=model.predict(test_X)\nprint('The accuracy of the Decision Tree is',metrics.roc_auc_score(prediction4,test_Y))","e2cbcfdb":"''''model=GaussianNB()\nmodel.fit(train_X,train_Y)\nprediction6=model.predict(test_X)\nprint('The accuracy of the NaiveBayes is',metrics.roc_auc_score(prediction6,test_Y))","b98c82b6":"model=RandomForestClassifier(bootstrap=True, class_weight= None, criterion='gini',                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=159,\n                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n                       warm_start=False)\nmodel.fit(train_X,train_Y)\nprediction7=model.predict(test_X)\nprint('The accuracy of the Random Forests is',metrics.roc_auc_score(prediction7,test_Y))","8486a803":"from progressbar import ProgressBar\npbar = ProgressBar()","242d333d":"''''from sklearn.model_selection import KFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nkfold = KFold(n_splits=10, random_state=22) # k=10, split the data into 10 equal parts\nxyz=[]\naccuracy=[]\nstd=[]\nclassifiers=['Logistic Regression','KNN','Random Forest']\nmodels=[LogisticRegression(),KNeighborsClassifier(n_neighbors=9),RandomForestClassifier(bootstrap=True, class_weight='balanced', criterion='gini',                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=159,\n                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n                       warm_start=False)]\nfor i in pbar(models):\n    model = i\n    cv_result = cross_val_score(model,X,Y, cv = kfold,scoring = \"accuracy\")\n    cv_result=cv_result\n    xyz.append(cv_result.mean())\n    std.append(cv_result.std())\n    accuracy.append(cv_result)\nnew_models_dataframe2=pd.DataFrame({'CV Mean':xyz,'Std':std},index=classifiers)       \nnew_models_dataframe2","024aa85a":"''''plt.subplots(figsize=(12,6))\nbox=pd.DataFrame(accuracy,index=[classifiers])\nbox.T.boxplot()","cc546b22":"from sklearn.datasets import make_classification\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n# Build a classification task using 3 informative features\nX, y = make_classification(n_samples=100,\n                           n_features=10,\n                           n_informative=3,\n                           n_redundant=0,\n                           n_repeated=0,\n                           n_classes=2,\n                           random_state=0,\n                           shuffle=False)\n\n# Build a forest and compute the feature importances\nforest = ExtraTreesClassifier(n_estimators=160,\n                              random_state=0)\n\nforest.fit(X, y)\nimportances = forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in forest.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\n\n# Print the feature ranking\nprint(\"Feature ranking:\")\n\nfor f in range(X.shape[1]):\n    print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n\n# Plot the feature importances of the forest\nplt.figure()\nplt.title(\"Feature importances\")\nplt.bar(range(X.shape[1]), importances[indices],\n       color=\"r\", yerr=std[indices], align=\"center\")\nplt.xticks(range(X.shape[1]), indices)\nplt.xlim([-1, X.shape[1]])\nplt.show()","69c39540":"''''#With Hyper Parameters Tuning\n#2-3,SVM\n#importing modules\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\n#making the instance\nmodel=svm.SVC()\n#Hyper Parameters Set\nparams = {'C': [6,7,8,9,10], \n          'kernel': ['linear','rbf']}\n#Making models with hyper parameters sets\nmodel1 = GridSearchCV(model, param_grid=params, n_jobs=-1)\n#Learning\nmodel1.fit(train_X,train_Y)\n#The best hyper parameters set\nprint(\"Best Hyper Parameters:\\n\",model1.best_params_)\n#Prediction\nprediction=model1.predict(test_X)\n#importing the metrics module\nfrom sklearn import metrics\n#evaluation(Accuracy)\nprint(\"Accuracy:\",metrics.accuracy_score(prediction,test_Y))\n#evaluation(Confusion Metrix)\nprint(\"Confusion Metrix:\\n\",metrics.confusion_matrix(prediction,test_Y))","2c1e7606":"''''#With Hyper Parameters Tuning\n#2-2,Randomforest\n#importing modules\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n#making the instance\nmodel=RandomForestClassifier()\n#hyper parameters set\nparams = {'criterion':['gini','entropy'],\n          'n_estimators':range(155,165,1),\n          'min_samples_leaf':[1,2,3],\n          'min_samples_split':[3,4,5,6,7], \n          'random_state':[123],\n          'n_jobs':[-1]}\n#Making models with hyper parameters sets\nmodel1 = GridSearchCV(model, param_grid=params, n_jobs=-1)\n#learning\nmodel1.fit(train_X,train_Y)\n#The best hyper parameters set\nprint(\"Best Hyper Parameters:\\n\",model1.best_params_)\n#Prediction\nprediction=model1.predict(test_X)\n#importing the metrics module\nfrom sklearn import metrics\n#evaluation(Accuracy)\nprint(\"Accuracy:\",metrics.accuracy_score(prediction,test_Y))\n#evaluation(Confusion Metrix)\nprint(\"Confusion Metrix:\\n\",metrics.confusion_matrix(prediction,test_Y))","18b6ab3f":"''''model=RandomForestClassifier(bootstrap=True, class_weight= None, criterion='entropy',max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=7,\n                       min_weight_fraction_leaf=0.0, n_estimators=160,\n                       n_jobs=-1, oob_score=False, random_state=123, verbose=0,\n                       warm_start=False)\nmodel.fit(train_X,train_Y)\nprediction7=model.predict(test_X)\nprint('The accuracy of the Random Forests is',metrics.roc_auc_score(prediction7,test_Y))","1abab34e":"''''model=KNeighborsClassifier('algorithm': 'auto', 'leaf_size': 1, 'n_jobs': -1, 'n_neighbors': 10, 'weights': 'distance')\nmodel.fit(train_X,train_Y)\nprediction5=model.predict(test_X)\nprint('The accuracy of the KNN is',metrics.roc_auc_score(prediction5,test_Y))","c74de175":"''''from sklearn.model_selection import GridSearchCV\nC=[0.05,0.1,0.2,0.3,0.25]\ngamma=[0.1,0.2,0.3,0.4]\nkernel=['rbf']\nhyper={'kernel':kernel,'C':C,'gamma':gamma}\ngd=GridSearchCV(estimator=svm.SVC(),param_grid=hyper,verbose=True)\ngd.fit(X,Y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","a1f99210":"''''from sklearn.model_selection import GridSearchCV\nn_estimators=range(150,170,1)\nhyper={'n_estimators':n_estimators}\ngd=GridSearchCV(estimator=RandomForestClassifier(random_state=0),param_grid=hyper,verbose=True)\ngd.fit(X,Y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","15a2ef37":"''''from sklearn.ensemble import VotingClassifier\nensemble_lin_rbf=VotingClassifier(estimators=[('KNN',KNeighborsClassifier(n_neighbors=9)),\n                                              ('RFor',RandomForestClassifier(n_estimators=150,random_state=0)),\n                                              ('LR',LogisticRegression(C=0.05))\n                                                             \n                                             ], \n                       voting='soft').fit(train_X,train_Y)\nprint('The accuracy for ensembled model is:',ensemble_lin_rbf.score(test_X,test_Y))","4a2f4b26":"''''from sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nfrom sklearn.ensemble import AdaBoostClassifier\nada=AdaBoostClassifier(n_estimators=200,random_state=0,learning_rate=0.1)\nada.fit(train_X,train_Y)\nresult=cross_val_score(ada,X,Y,cv=10,scoring='accuracy')\nprint('The cross validated score for AdaBoost is:',result.mean())","642eafca":"''''train_res=ada.predict(X_train)\ntrain_res","5f018440":"test_res =model.predict(X_test)\ntest_res","b02e090f":"submission_df = pd.DataFrame()\nsubmission_df['Id'] = test_df['Id']","dcb5d2ae":"submission_df['Predicted'] = test_res.tolist()","1479ba2b":"submission_df.tail()","da75ed65":"submission_df.to_csv('timepass.csv',index=False)","888dcd39":"!ls","44ea5669":"Dropping 'Soil' column for convenience. You should try to think of ways to generate features from these columns. Try seeing kernels from other Kaggle (Tabular data) competitions for inspirations for Feature Engineering.","d2db0698":"# Train-Test split\n\nYou are also expected to split train_df into train and validation dataframes (or else choose a cross validation scheme)\n","c408a23a":"# Basic Binary Logistic regression\n\nYou should obviously see the limitations of a model and familiarise yourselves with other models in sci-kit learn.","dd372a53":"# Make a submission\n","807e03a6":"Your EDA (Exploratory Data Analysis) goes here. Get a good feel of the data, look out for stuff that might help later."}}