{"cell_type":{"4b2342e5":"code","4272effc":"code","12390ac8":"code","c7b9d904":"code","9a532b87":"code","5c152ac7":"code","006537d5":"code","61a091d3":"code","c3b7d03b":"code","2404cbc9":"code","47dfd9e3":"code","050002be":"code","f6689e33":"code","8c6e2f21":"code","d950a724":"code","8443d8fb":"code","2d865bd5":"code","d5436208":"code","758ca0d9":"code","34435905":"code","ee789de0":"code","535dd2d1":"code","ad82ce21":"code","26580b89":"code","2431ab5a":"code","1570283e":"code","ae9f1b24":"code","e0451231":"code","db410913":"code","eb9e17a0":"code","ad6dc9b6":"code","07836192":"code","d8654e8e":"code","6a781919":"code","d77b7a42":"code","0341116d":"code","acd34ef0":"code","22d512a1":"code","f7463818":"code","e2252651":"code","d857c9cd":"code","62d4f410":"code","fa4e96ba":"code","0d2ec062":"code","39708021":"code","e049c58e":"code","ce699bcb":"code","4e003069":"code","6fc68a3d":"code","117cf194":"code","7e998a73":"code","efb574ee":"code","63b8d0ea":"code","f15e4859":"code","04780c2e":"code","e7125bb9":"code","1f3030f9":"code","f6aa396c":"code","6cff506a":"code","416d3e01":"code","3b49d33b":"code","0f80cffd":"code","f9e50e4d":"code","889f5a4b":"code","06c85740":"code","48313761":"code","0a7e45bf":"code","95e3c602":"code","6ced6e82":"code","f9ea00c2":"code","b4a8f8c4":"markdown","cb17ae3b":"markdown","371e25b7":"markdown","3cfc6955":"markdown","4142881d":"markdown","2dabd058":"markdown","89815952":"markdown","c1990a0e":"markdown","7fceabdf":"markdown","9cfdd845":"markdown","d5fe8931":"markdown","828647a0":"markdown","e46d298c":"markdown","498195b0":"markdown","f2e85b2c":"markdown","a7c1131a":"markdown","b7036e30":"markdown","cbf1cdc2":"markdown","528f9fb3":"markdown","b6cf8046":"markdown","adf839a9":"markdown","6d23fc3e":"markdown","68b5104a":"markdown","81c91336":"markdown","775d3afa":"markdown","42651e0a":"markdown","1582e846":"markdown","be6ee582":"markdown"},"source":{"4b2342e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4272effc":"# example\njson_string = \"\"\"\n[\n  {\n    \"name\": \"Sabine\",\n    \"age\": 36,\n    \"favorite_foods\": [\"Pumpkin\", \"Oatmeal\"]\n  },\n  {\n    \"name\": \"Zoe\",\n    \"age\": 40,\n    \"favorite_foods\": [\"Chicken\", \"Pizza\", \"Chocolate\"]\n  },\n  {\n    \"name\": \"Heidi\",\n    \"age\": 40,\n    \"favorite_foods\": [\"Caesar Salad\"]\n  }\n]\n\"\"\"\nimport json\njson_obj = json.loads(json_string)\nprint(type(json_obj))","12390ac8":"print(json_obj)","c7b9d904":"world_cup_str = \"\"\"\n[\n    {\n        \"team_1\": \"France\",\n        \"team_2\": \"Croatia\",\n        \"game_type\": \"Final\",\n        \"score\" : [4, 2]\n    },\n    {\n        \"team_1\": \"Belgium\",\n        \"team_2\": \"England\",\n        \"game_type\": \"3rd\/4th Playoff\",\n        \"score\" : [2, 0]\n    }\n]\n\"\"\"\nimport json\nworld_cup_obj=json.loads(world_cup_str)\nworld_cup_obj","9a532b87":"!git clone https:\/\/github.com\/srinivasanprashant\/Hacker-News-Data-Analysis.git","5c152ac7":"cd  Hacker-News-Data-Analysis","006537d5":"import json\nfile = open(\"hn_2014.json\")\nhn = json.load(file)\n\nprint(type(hn))","61a091d3":"print(len(hn))\nprint(type(hn[0]))","c3b7d03b":"print(hn[0].keys())","2404cbc9":"hn[1][\"title\"]","47dfd9e3":"import json\nfile = open(\"hn_2014.json\")\nhn = json.load(file)\nhn[10]","050002be":"def jprint(obj):\n    text = json.dumps(obj,sort_keys = True,indent = 4)\n    print(text)\nfirst_story = hn[0]\njprint(first_story)","f6689e33":"d = {'a': 1, 'b': 2, 'c': 3}\ndel d['a']\nprint(d)","8c6e2f21":"def del_key(dict_, key):\n    # create a copy so we don't\n    # modify the original dict\n    modified_dict = dict_.copy()\n    del modified_dict[key]\n    return modified_dict\n","d950a724":"first_story = del_key(first_story, 'createdAtI')\njprint(first_story)","8443d8fb":"def del_key(dict_, key):\n    # create a copy so we don't\n    # modify the original dict\n    modified_dict = dict_.copy()\n    del modified_dict[key]\n    return modified_dict\n\nhn_clean = []\nfor h in hn:\n    d = del_key(h,'createdAtI')\n    hn_clean.append(d)","2d865bd5":"hn_clean[10]","d5436208":"# examples \nints = [1, 2, 3, 4]\n\nplus_one = []\nfor i in ints:\n    plus_one.append(i + 1)\n\nprint(plus_one)","758ca0d9":"plus_one = [i+1 for i in ints]\nplus_one","34435905":"times_ten = []\nfor i in ints:\n    times_ten.append(i * 10)\n\nprint(times_ten)","ee789de0":"times_ten = [i*10 for i in ints]\ntimes_ten","535dd2d1":"floats = [2.1, 8.7, 4.2, 8.9]\n\nrounded = []\nfor f in floats:\n    rounded.append(round(f))\n\nprint(rounded)","ad82ce21":"rounded = [round(f)for f in floats ]\nrounded ","26580b89":"letters = ['a', 'b', 'c', 'd']\n\ncaps = []\nfor l in letters:\n    caps.append(l.upper())\nprint(caps)","2431ab5a":"caps = [l.upper() for l in letters]\ncaps","1570283e":"hn_clean = [del_key(h,'createdAtI') for h in hn]\nhn_clean[10]","ae9f1b24":"- List comprehensions can be used for many different things. Three common applications are:\n\nTransforming a list\nCreating a new list\nReducing a list","e0451231":"squares = [1,4,5,6,7,8]\nsqr_rt = []\nfor r in squares:\n    sqr_rt.append(r ** (1\/2))\nsqr_rt","db410913":"sqr_rt = [r ** (1\/2)for r in squares]\nsqr_rt ","eb9e17a0":"cols = []\nfor i in range(1,5):\n    cols.append(\"col_{}\".format(i))\n\ncols","ad6dc9b6":"cols = [\"col_{}\".format(i)for i in range(1,5)]\ncols","07836192":"import numpy as np\ndata = np.zeros((4,4))\ndf = pd.DataFrame(data,columns=cols)\ndf","d8654e8e":"urls = [d['url'] for d in hn_clean]\nurls[:10]","6a781919":"ints = [25,14,13, 84,43,6,77,56]\n\nbig_ints = []\nfor i in ints:\n    if i >= 50:\n        big_ints.append(i)\nprint(big_ints)","d77b7a42":"big_ints = [i for i in ints if i >= 50]\nprint(big_ints)","0341116d":"hn_clean[:2]","acd34ef0":"has_comments = []\n\nfor d in hn_clean:\n    if d['numComments'] > 0:\n        has_comments.append(d)\n\nnum_comments = len(has_comments)\nprint(num_comments)","22d512a1":"has_comments = [d for d in hn_clean if d['numComments'] > 0]\nhas_comments[:2]","f7463818":"thousand_points = [d for d in hn_clean if d['points'] > 1000]\nnum_thousand_points = len(thousand_points)\nnum_thousand_points","e2252651":"jprint(json_obj)","d857c9cd":"min(json_obj)","62d4f410":"def get_age(json_dict):\n    return json_dict['age']\nyoungest = min(json_obj, key=get_age)\njprint(youngest)","fa4e96ba":"def get_age(json_dict):\n    return json_dict['favorite_foods']\nyoungest = min(json_obj, key=get_age)\njprint(youngest)","0d2ec062":"def get_num_comments(story):\n    return story['numComments']\nmost_comments = max(hn_clean,key= get_num_comments)\njprint(most_comments)","39708021":"def get_num_comments(story):\n    return story['numComments']\nmost_comments = min(hn_clean,key= get_num_comments)\njprint(most_comments)","e049c58e":"def unchanged(x):\n    return x\n#unchanged = function_name\n#x = paramenter \n#return x = transformation\n","ce699bcb":"unchanged = lambda x : x\n","4e003069":"#2nd example \ndef plus_one(X):\n    return x + 1","6fc68a3d":"plus_one = lambda X: 1 + x\nprint(plus_one)","117cf194":"print(plus_one)","7e998a73":"# complex function\ndef extract_and_increment(string):\n    digits = re.search(r\"\\d+\", string).group()\n    incremented = int(digits) + 1\n    return incremented","efb574ee":"extract_and_increment = lambda string: int(re.search(r\"\\d+\", string).group() + 1)\nextract_and_increment","63b8d0ea":"def add(x,y):\n    return x + y","f15e4859":"add = lambda x,y : x + y\nadd","04780c2e":"jprint(json_obj)","e7125bb9":"sorted(json_obj,key= lambda d:d['name'])","1f3030f9":"min(json_obj,key= lambda d:d['name'])","f6aa396c":"max(json_obj,key= lambda d:d['name'])","6cff506a":"hn_sorted_points = sorted(hn_clean, key=lambda d: d['points'], reverse=True)\ntop_5_titles = [d['title'] for d in hn_sorted_points[:5]]\ntop_5_titles","416d3e01":"json_df = pd.DataFrame(json_obj)\nprint(json_df)","3b49d33b":"hn_df = pd.DataFrame(hn_clean)\ntags = hn_df['tags']\nprint(tags.dtype)","0f80cffd":"hn_df","f9e50e4d":"tags_types = tags.apply(type)\ntype_counts = tags_types.value_counts(dropna=False)\nprint(type_counts)","889f5a4b":"tags_types = tags.apply(len)\ntype_lengths = tags_types.value_counts(dropna=False)\nprint(type_lengths)","06c85740":"tags = hn_df['tags']\nhas_four_tags = tags.apply(len) == 4\nfour_tags = tags[has_four_tags]\n\nfour_tags","48313761":"print(four_tags.head())","0a7e45bf":"def extract_tag(l):\n    if len(l) == 4:\n        returnl[-1]\n    else:\n        return None","95e3c602":"extract_tag(l)","6ced6e82":"cleaned_tags = tags.apply(lambda l: l[-1] if len(l) == 4 else None)\nhn_df['tags'] = cleaned_tags\n\n\n","f9ea00c2":"tags","b4a8f8c4":"-msecond example \n","cb17ae3b":"- Reducing a list. https:\/\/s3.amazonaws.com\/dq-content\/355\/lc_application_3_1.svg","371e25b7":"- There are keys representing the title, URL, points, number of comments, and date, as well as some others ","3cfc6955":"- Series.apply() to check the length of each of those lists - len","4142881d":"- using type() function","2dabd058":"- Let's finish by creating a lambda function version of this function and using apply to extract the tags.","89815952":"- Let's use this technique to find the story that has the greatest number of comments.","c1990a0e":"- One of the places where the JSON format is commonly used is in the results returned by an API  Application programming interface https:\/\/en.wikipedia.org\/wiki\/Application_programming_interface \n- APIs are interfaces that can be used to send and transmit data between different computer systems.","7fceabdf":"- Let's look at how this works in common usage with min(), max(), and sorted()","9cfdd845":"- Let's use this function to delete the createdAtI key from first_story:","d5fe8931":"- 2. Creating a new list","828647a0":"- min(), max(), and sorted(). function, Python doesn't have any way to tell whether one dictionary object is \"greater\" than another.\n- There is a way we can actually tell functions like min(), max(), and sorted() how to sort complex objects like dictionaries and lists of lists using the optional key argument","e46d298c":"- instead of looping we can simplify the the process by using List Comprehensions\n- https:\/\/s3.amazonaws.com\/dq-content\/355\/loop_components.svg","498195b0":"- To delete a key from a dictionary we use del function\n","f2e85b2c":"- Let's use a loop and the del_key() function to remove the createdAtI key from every story in our Hacker News data set:","a7c1131a":"- Question Let's use list comprehension to create a new list containing just the URLs from each story.","b7036e30":"- to understand the format ","cbf1cdc2":"- To include an if statement in a list comprehension, we include it at the very end","528f9fb3":"- Creating list comprehensions to replace loops with a single line of code.\n- Creating single use functions called lambda functions.\n- we will be using json format https:\/\/www.json.org\/\n- https:\/\/s3.amazonaws.com\/dq-content\/355\/json.svg JSON above is a list, where each element in the list is a dictionary. Each of the dictionaries have the same keys, and one of the values of each dictionary is itself a list.\n- we use use json.loads() method to convert JSON data contained in a string to the equivalent set of Python objects:\n\n","b6cf8046":"Question - list comprehension to count how many stories have more than 1,000 points.","adf839a9":"- transforming a list is as shown above ","6d23fc3e":"- we create a function for delete using del that will return a copy of our dictionary with the key removed:","68b5104a":"- Let's look at the first dictionary in full. To make it easier to understand, we're going to create a function which will print a JSON object with formatting to make it easier to read.(The function will use the json.dumps() function (\"dump string\") which does the opposite of the json.loads() function \u2014 it takes a JSON object and returns a string version of it. )","81c91336":"- The data set from this mission \u2014 hn_2014.json \u2014 was downloaded from the Hacker News API","775d3afa":"- To transform this structure into a list comprehension\n- target variable- plus_one, transformation - i+1, for_statement - for i in ints","42651e0a":"List comprehensions can be used for many different things. Three common applications are:\n\n- Transforming a list\n- Creating a new list\n- Reducing a list","1582e846":"- lambda functions, the same functions can be written in a single line ","be6ee582":"- Question start by reading our Hacker News JSON file:"}}