{"cell_type":{"f9d76ac2":"code","adb1adab":"code","d0cd310f":"code","5602c43b":"code","189f3d55":"code","188c550f":"code","a03cc16c":"code","fc672657":"code","72f6abb0":"code","bd8bacd6":"code","09ad46ee":"code","61dd4bea":"code","ef3058c7":"code","41b2e9cf":"code","1f71af85":"code","a03aaa75":"code","14aeb8cf":"code","a8b77889":"code","376b4fe6":"code","c816443e":"code","f1cc0d4d":"code","fac026a3":"code","644f3e5d":"code","24fef341":"code","74e3146e":"code","7d4a622a":"code","f2406aef":"code","28412578":"code","ec283d63":"code","9a41a6c8":"code","9f754b03":"code","e695e494":"code","5e7d97ca":"code","facaae35":"code","81020756":"code","c46f13a2":"code","627f0287":"code","4252c05f":"code","9790ccdd":"code","2e4f6ee0":"code","b360c163":"code","eeb8591f":"code","d12eb25a":"code","8998522d":"code","83127d79":"code","07dfa39f":"code","a22cfd2a":"code","db1c46ef":"code","27e7cac0":"code","1da49314":"code","730b92d3":"code","954a7221":"code","d754177b":"code","0e40f769":"code","8609ef9c":"code","599dd11a":"code","c08c7ad3":"code","745c046e":"code","ca2574f9":"code","da4959f6":"code","d323f9b2":"code","b0cc83b3":"code","c3ff047c":"code","706eaab6":"code","4c70b7ec":"code","d569ec01":"code","92e0e8b3":"code","ba8efa1b":"code","e9353b0f":"code","9e4a6e01":"code","4feaeec3":"code","48fe2449":"code","c96f691f":"code","337cfc95":"code","0b208859":"code","2411e68d":"code","a083ed3f":"code","e79909cc":"code","c3feab1d":"code","3c5a4873":"code","3af459d5":"code","e39981fe":"code","459d185e":"code","0dbc4cfa":"code","3ff5271f":"code","ac99fb4c":"code","85d846af":"code","55a40ff7":"code","e12823ec":"code","a18ceefb":"code","3a405754":"code","47a47af1":"code","bf3e8935":"code","11c3a39b":"code","e0b26860":"code","3ae0526e":"code","922395e2":"code","019dc265":"code","bc275c19":"code","592c215a":"code","b59c02f5":"code","533f5d44":"code","b5d47f63":"code","5a8a5b1e":"code","e989acd8":"code","70befef4":"code","fc17ae1f":"code","2f38f1ea":"markdown","46cfc99c":"markdown","910ba7e2":"markdown","fec9b4a7":"markdown","34f7a02d":"markdown","eeac1f41":"markdown","6db5d011":"markdown","fa49839d":"markdown","763d1ef8":"markdown","a1c2498a":"markdown","0d4d47d0":"markdown","bb8c8fa5":"markdown","af08d41a":"markdown","4e53aa9a":"markdown","68b240ce":"markdown","56ca23c5":"markdown","beef2fb9":"markdown","d2a40e48":"markdown","1e007576":"markdown","007a7ba1":"markdown","74aaa053":"markdown","946d45a7":"markdown","9d158f33":"markdown","6b885fb7":"markdown","8bbed3ea":"markdown","ed198b54":"markdown","79f0a0c3":"markdown","7ecb6ff6":"markdown","68fe03e0":"markdown","687519bb":"markdown","c30f2e5f":"markdown","054ff33a":"markdown","38f7d3a3":"markdown","305dcfd1":"markdown","7f24ecd7":"markdown","218b9730":"markdown","4ad0a58b":"markdown","43d53fcd":"markdown","6a104a18":"markdown","e65d5a6a":"markdown","fed0a372":"markdown","878100ab":"markdown","d13dcf02":"markdown","143f1c72":"markdown","017204e1":"markdown","faae0203":"markdown","d3cf9d7b":"markdown","c0939fba":"markdown","39287667":"markdown","f5be2cc5":"markdown","8e7a9ab2":"markdown","bc968228":"markdown","260f613f":"markdown","e5eceee3":"markdown","eacd34e9":"markdown","fb893669":"markdown","f991a71d":"markdown","82c6c866":"markdown","0de5ce98":"markdown","c8cb131c":"markdown","9a70cf3a":"markdown","0bdc4803":"markdown","87a04a2f":"markdown","d5fc2555":"markdown","31d6b78c":"markdown","b7984bec":"markdown","98fc08b1":"markdown","3aa8fdbe":"markdown","04985bcf":"markdown"},"source":{"f9d76ac2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\nimport math\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.api import types\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV, GridSearchCV\n\nfrom sklearn.feature_selection import RFECV\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nglobal dividing_line\ndividing_line = '\\n=========================================================\\n'","adb1adab":"%matplotlib inline","d0cd310f":"df_train_orig = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test_orig = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndf_train_orig.info()\ndf_train_orig.sample(10)","5602c43b":"df_train = df_train_orig.copy()\ndf_train['Count'] = 1\n\ndf_test = df_test_orig.copy()\n\n# Encode feature Sex\ndf_train['Sex_Code'] = df_train['Sex'].map({'female' : 1, 'male' : 0})\ndf_test['Sex_Code'] = df_test['Sex'].map({'female' : 1, 'male' : 0})\n\nprint(df_train[['Sex', 'Sex_Code']])\n\ndf_all = pd.concat([df_train, df_test])","189f3d55":"# Check the whole dataset\nprint(df_all.drop(columns = ['PassengerId', 'Survived', 'Count'], axis = 1).describe())\n\nprint(dividing_line)\n\n# Check only training data\nprint(df_train.drop(columns = ['PassengerId', 'Count'], axis = 1).describe())","188c550f":"print('Missing values counts and rates in training data:')\nprint(df_train.isnull().sum())\nprint()\nprint(df_train.isnull().sum() * 100 \/ len(df_train))\n\nprint(dividing_line)\n\nprint('Missing values counts and rates in testing data:')\nprint(df_test.isnull().sum())\nprint()\nprint(df_test.isnull().sum() * 100 \/ len(df_test))","a03cc16c":"df_train_corr = df_train.drop(['PassengerId', 'Sex', 'Count'], axis = 1).corr(method = 'pearson') \ndf_train_corr","fc672657":"sns.set(context = 'notebook', style = 'white', font = 'monospace')\nfig, ax = plt.subplots(figsize = (10, 6))\n\nsns.heatmap(df_train_corr, ax = ax, square = True, annot = True)\nax.set_xticklabels(df_train_corr.columns)\nax.set_yticklabels(df_train_corr.index)","72f6abb0":"df_train_survival_accroding_sex_count = df_train[['Survived', 'Sex', 'Count']]\ndf_train_survival_accroding_sex_count = df_train_survival_accroding_sex_count.groupby(['Survived', 'Sex']).count()\ndf_train_survival_accroding_sex_count","bd8bacd6":"survival_accroding_sex =  df_all[~df_all['Survived'].isnull()][['Survived', 'Sex']].groupby(['Sex'], as_index = False).mean()\nsurvival_accroding_sex","09ad46ee":"def createLabelsForBar(chart):\n    for item in chart:\n        height = item.get_height()\n        \n        plt.text(\n            item.get_x() + item.get_width() \/ 2., \n            height * 1.05, \n            '{}'.format(round(float(height), 2)),\n            ha = \"center\",\n            va = \"bottom\",\n        )","61dd4bea":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.violinplot(x = 'Sex'\n               , y = 'Age'\n               , hue = 'Survived'\n               , data = df_train\n               , cut = 0\n               , ax = ax \n               , split = True\n               , palette = {0 : 'r', 1 : 'g'})\n\nax.set_title('Survival Distribution For Age')","ef3058c7":"bar_chart_idx = np.arange(2)\nbar_width = 0.4\n\nsurvived_bar_chart = plt.bar(bar_chart_idx\n                             , df_train_survival_accroding_sex_count.loc[1]['Count']\n                             , bar_width\n                             , color = 'g'\n                             , label = 'Survived')\n\nnot_survived_bar_chart = plt.bar(bar_chart_idx + 0.4\n                                 , df_train_survival_accroding_sex_count.loc[0]['Count']\n                                 , bar_width\n                                 , color = 'r'\n                                 , label = 'Not Survived')\n\ncreateLabelsForBar(survived_bar_chart)\ncreateLabelsForBar(not_survived_bar_chart)\n\nplt.xticks(bar_chart_idx + 0.4 \/ 2 ,('Female', 'Male'))\nplt.legend() \nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.show()","41b2e9cf":"df_train[['Survived', 'Pclass']].groupby(['Pclass'], as_index = False).mean().round(3)","1f71af85":"df_train_survival_count_pclass = df_train[['Pclass','Survived', 'Count']].groupby(['Pclass','Survived'], as_index = False).sum().round(3)\ndf_train_survival_count_pclass","a03aaa75":"bar_chart_idx_pclass = np.arange(3)\n\nsurvived_pclass_bar_chart = plt.bar(bar_chart_idx_pclass\n                                    , df_train_survival_count_pclass.loc[1::2]['Count']\n                                    , bar_width, color = 'g'\n                                    , label = 'Survived')\n\nnot_survived_pclass_bar_chart = plt.bar(bar_chart_idx_pclass + 0.4\n                                        , df_train_survival_count_pclass.loc[::2]['Count']\n                                        , bar_width\n                                        , color = 'r'\n                                        , label = 'Not Survived')\n\ncreateLabelsForBar(survived_pclass_bar_chart)\ncreateLabelsForBar(not_survived_pclass_bar_chart)\n\nplt.xticks(bar_chart_idx_pclass + 0.4 \/ 2 ,('Class 1', 'Class 2', 'Class 3'))\nplt.legend() \nplt.xlabel('PClass')\nplt.ylabel('Count')\nplt.show()","14aeb8cf":"df_train[['Sex', 'Pclass', 'Survived']].groupby(['Pclass', 'Sex'], as_index = False).agg(['count', 'mean']).round(3)","a8b77889":"df_all.Embarked.unique()","376b4fe6":"print(df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).agg(['count', 'mean']).round(3))\nprint(dividing_line)\n\nprint(df_train[['Embarked', 'Pclass', 'Survived']].groupby(['Embarked', 'Pclass'], as_index = False).agg(['count', 'mean']).round(3))\nprint(dividing_line)\n\nprint(df_train[['Embarked', 'Pclass', 'Sex', 'Survived']].groupby(['Embarked', 'Pclass', 'Sex'], as_index = False).agg(['count', 'mean']).round(3))","c816443e":"facetgrid = sns.FacetGrid(data = df_train, row = 'Embarked', aspect = 2)\n\n# if on axe-x the data point is less than the data point on axe-y, aggregate wiil conduct, such as mean \nfacetgrid.map(sns.pointplot\n              , 'Pclass'\n              , 'Survived'\n              , 'Sex'\n              , hue_order = ['female', 'male']\n              , order = [1, 2, 3]\n              , palette = {'female' : 'r', 'male' : 'b'})\n\nfacetgrid.add_legend()\n\nfig, ax = plt.subplots(1)\nax.set_title('Survival Chance for Different Gender in Each Pclass')\nsns.pointplot('Pclass', 'Survived', 'Sex', data = df_all[~df_all['Survived'].isnull()], ax = ax)","f1cc0d4d":"print(df_all[df_all['Embarked'].isnull()])","fac026a3":"df_train_cabin_notNan = df_train[~(df_train['Cabin'].isnull()) \n                                 & (df_train['Sex_Code'] == 1)\n                                 & (~(df_train['Embarked'].isnull())) \n                                 & (df_train['Pclass'] == 1)]\n\ndf_train_cabin_notNan = df_train_cabin_notNan[df_train_cabin_notNan['Cabin'].str.match('B')]\n\ndf_train_cabin_notNan","644f3e5d":"df_train_cabin_notNan[['Cabin', 'Embarked']].groupby(['Embarked'], axis = 0).count()","24fef341":"df_train_embarked_notNan = df_train[(df_train['Sex_Code'] == 1) \n                                 & (~(df_train['Embarked'].isnull()))\n                                 & (df_train['Pclass'] == 1)]\n\ndf_train_embarked_notNan","74e3146e":"df_train_embarked_notNan[['Count', 'Embarked']].groupby(['Embarked'], axis = 0).count()","7d4a622a":"df_train['Embarked'] = df_train['Embarked'].fillna('S')\n\ndf_train.isnull().sum(axis = 0)","f2406aef":"fig, ax = plt.subplots(figsize = (18, 6))\n\nax.set_xlabel('Fare')\nax.set_ylabel('Distribution Density')\nax.set_title('Fare Distribution For Training\/Testing dataset')\nsns.kdeplot(df_train.Fare, ax = ax, color = 'b', label = 'Training data', shade = True)\nsns.kdeplot(df_test.Fare, ax = ax, color = 'r', label = 'Testing data')\n\nfig.legend()","28412578":"# Explore the density and variety of fare feature\ndf_train_survival_count_fare = df_train[['Fare', 'Count']]\ndf_train_survival_count_fare = df_train_survival_count_fare.groupby(['Fare'], as_index = False).count()\ndf_train_survival_count_fare","ec283d63":"df_train['Log_Fare'] = (df_train['Fare']).map(lambda x : np.log10(x + 1))\ndf_all['Log_Fare'] = (df_all['Fare']).map(lambda x : np.log10(x + 1))\n\nfig, ax = plt.subplots(figsize = (10, 6))\n\nax.set_xlabel('Log_Fare')\nax.set_ylabel('Distribution Density')\nax.set_title('Log_Fare Distribution For Whole dataset')\n\nsns.kdeplot(df_train['Log_Fare'], ax = ax)","9a41a6c8":"plt.figure(figsize = (10, 6))\n\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Fare'], color = 'g', shade = True)\n\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Fare'], color = 'r')\n\nplt.legend(['Survived', 'Not Survived'])","9f754b03":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Log_Fare']\n            , color = 'g'\n            , ax = ax\n            , shade = True)\n\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Log_Fare']\n            ,ax = ax\n            , color = 'r')\n\nplt.legend(['Survived', 'Not Survived'])","e695e494":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.boxplot(x = 'Log_Fare', y = 'Pclass', hue = 'Survived'\n               , data = df_all\n               , orient = 'h'\n               , ax = ax)","5e7d97ca":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.violinplot(x = 'Pclass'\n               , y = 'Log_Fare'\n               , hue = 'Survived'\n               , data = df_all\n               , cut = 0\n               , ax = ax \n               , split = True\n               , palette = {0 : 'r', 1 : 'g'})","facaae35":"df_all[df_all['Fare'] == 0].drop(['PassengerId', 'Sex_Code', 'Log_Fare'], axis = 1)","81020756":"df_all[df_all['Fare'].isnull()]","c46f13a2":"single_males_inPclass3 = df_train[(df_train['Pclass'] == 3) \n         & (df_train['Sex_Code'] == 0)\n         & (df_train['Embarked'] == 'S')\n         & (df_train['SibSp'] == 0)\n         & (df_train['Parch'] == 0)].copy()\n\nsingle_males_inPclass3","627f0287":"print(single_males_inPclass3['Fare'].describe())\n\nprint(dividing_line)\n\nprint(single_males_inPclass3['Fare'].median())","4252c05f":"df_test_fare = df_test['Fare'].copy()\ndf_test['Fare'] = df_test_fare.fillna(single_males_inPclass3['Fare'].median())\ndf_test['Log_Fare'] = df_test_fare.map(lambda x : np.log10(x + 1))\n\ndf_test.isnull().sum(axis = 0)","9790ccdd":"for idx in range(4, 14):\n    df_train['Fare_' + str(idx) +'Bins'] = pd.qcut(df_train['Fare'], idx)\n    df_test['Fare_' + str(idx) +'Bins'] = pd.qcut(df_test['Fare'], idx)","2e4f6ee0":"# M stands for Missing\ndf_all['Deck'] = df_all['Cabin'].apply(lambda ele : ele[0] if pd.notnull(ele) else 'M')\ndf_train['Deck'] = df_train['Cabin'].apply(lambda ele : ele[0] if pd.notnull(ele) else 'M')\ndf_test['Deck'] = df_test['Cabin'].apply(lambda ele : ele[0] if pd.notnull(ele) else 'M')\n\nprint(df_all['Deck'])","b360c163":"df_all['Deck'].unique()","eeb8591f":"df_all_deck = df_all[['Deck', 'Pclass', 'Count']].groupby(['Deck', 'Pclass']).count()\ndf_all_deck.T.columns.levels","d12eb25a":"def get_pclass_dist(df):\n    \n    # Creating a dictionary for every passenger class count in every deck\n    deck_counts = {'A': {}, 'B': {}, 'C': {}, 'D': {}, 'E': {}, 'F': {}, 'G': {}, 'M': {}, 'T': {}}\n    decks = df.columns.levels[0]    \n    \n    for deck in decks:\n        for pclass in range(1, 4):\n            try:\n                count = df[deck][pclass][0]\n                deck_counts[deck][pclass] = count \n            except KeyError:\n                deck_counts[deck][pclass] = 0\n                \n    df_decks = pd.DataFrame(deck_counts)    \n    deck_percentages = {}\n\n    # Creating a dictionary for every passenger class percentage in every deck\n    for col in df_decks.columns:\n        deck_percentages[col] = [(count \/ df_decks[col].sum()) * 100 for count in df_decks[col]]\n        \n    return deck_counts, deck_percentages\n\ndef display_pclass_dist(percentages):\n    \n    df_percentages = pd.DataFrame(percentages).transpose()\n    deck_names = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'M', 'T')\n    bar_count = np.arange(len(deck_names))  \n    bar_width = 0.85\n    \n    pclass1 = df_percentages[0]\n    pclass2 = df_percentages[1]\n    pclass3 = df_percentages[2]\n    \n    plt.figure(figsize = (20, 10))\n    \n    plt.bar(bar_count\n            , pclass1\n            , color = '#b5ffb9'\n            , edgecolor = 'white'\n            , width = bar_width\n            , label = 'Passenger Class 1')\n    \n    plt.bar(bar_count\n            , pclass2\n            , bottom = pclass1\n            , color = '#f9bc86'\n            , edgecolor = 'white'\n            , width = bar_width\n            , label = 'Passenger Class 2')\n    \n    plt.bar(bar_count, pclass3\n            , bottom = pclass1 + pclass2\n            , color = '#a3acff'\n            , edgecolor = 'white'\n            , width = bar_width\n            , label = 'Passenger Class 3')\n\n    plt.xlabel('Deck', size = 15, labelpad = 20)\n    plt.ylabel('Passenger Class Percentage', size = 15, labelpad = 20)\n    plt.xticks(bar_count, deck_names)    \n    plt.tick_params(axis = 'x', labelsize = 15)\n    plt.tick_params(axis = 'y', labelsize = 15)\n    \n    plt.legend(loc = 'upper left', bbox_to_anchor = (1, 1), prop = {'size': 15})\n    plt.title('Passenger Class Distribution in Decks', size = 18, y = 1.05)   \n    \n    plt.show()    ","8998522d":"import pprint\n\nall_deck_count, all_deck_percentage = get_pclass_dist(df_all_deck.T)\ndisplay_pclass_dist(all_deck_percentage)\n\nprint(df_all_deck)\n\nprint(dividing_line)\n\npprint.pprint(all_deck_percentage)","83127d79":"df_all[df_all['Deck'] == 'T']","07dfa39f":"def get_survived_dist(df):\n    \n    # Creating a dictionary for every survival count in every deck\n    surv_counts = {'A':{}, 'B':{}, 'C':{}, 'D':{}, 'E':{}, 'F':{}, 'G':{}, 'M':{}, 'T':{}}\n    decks = df.columns.levels[0]    \n\n    for deck in decks:\n        for survive in range(0, 2):\n            try:\n                surv_counts[deck][survive] = df[deck][survive][0]\n            except KeyError:\n                surv_counts[deck][survive] = 0\n            \n    df_surv = pd.DataFrame(surv_counts)\n    surv_percentages = {}\n\n    for col in df_surv.columns:\n        surv_percentages[col] = [(count \/ df_surv[col].sum()) * 100 for count in df_surv[col]]\n        \n    return surv_counts, surv_percentages\n\ndef display_surv_dist(percentages):\n    \n    df_survived_percentages = pd.DataFrame(percentages).transpose()\n    deck_names = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'M', 'T')\n    bar_count = np.arange(len(deck_names))  \n    bar_width = 0.85    \n\n    not_survived = df_survived_percentages[0]\n    survived = df_survived_percentages[1]\n    \n    plt.figure(figsize=(20, 10))\n    \n    plt.bar(bar_count\n            , survived\n            , color = '#b5ffb9'\n            , edgecolor = 'white'\n            , width = bar_width\n            , label = 'Survived')\n    plt.bar(bar_count\n            , not_survived\n            , bottom = survived\n            , color = '#f9bc86'\n            , edgecolor = 'white'\n            , width = bar_width\n            , label = 'Not Survived')\n \n    plt.xlabel('Deck', size = 15, labelpad = 20)\n    plt.ylabel('Survival Percentage', size = 15, labelpad = 20)\n    plt.xticks(bar_count, deck_names)    \n    plt.tick_params(axis = 'x', labelsize = 15)\n    plt.tick_params(axis = 'y', labelsize = 15)\n    \n    plt.legend(loc = 'upper left', bbox_to_anchor = (1, 1), prop = {'size': 15})\n    plt.title('Survival Percentage in Decks', size = 18, y = 1.05)\n    \n    plt.show()","a22cfd2a":"df_deck_survived = df_all[['Deck', 'Count', 'Survived']].groupby(['Deck', 'Survived']).count()\n\nall_surv_count, all_surv_percentage = get_survived_dist(df_deck_survived.T)\ndisplay_surv_dist(all_surv_percentage)\n\npprint.pprint(all_surv_percentage)","db1c46ef":"df_all['Deck'] = df_all['Deck'].replace(['A', 'B', 'C', 'T'], 'ABCT')\ndf_all['Deck'] = df_all['Deck'].replace(['D', 'E'], 'DE')\ndf_all['Deck'] = df_all['Deck'].replace(['F', 'G'], 'FG')\n\ndf_train['Deck'] = df_train['Deck'].replace(['A', 'B', 'C', 'T'], 'ABCT')\ndf_train['Deck'] = df_train['Deck'].replace(['D', 'E'], 'DE')\ndf_train['Deck'] = df_train['Deck'].replace(['F', 'G'], 'FG')\n\ndf_test['Deck'] = df_test['Deck'].replace(['A', 'B', 'C', 'T'], 'ABCT')\ndf_test['Deck'] = df_test['Deck'].replace(['D', 'E'], 'DE')\ndf_test['Deck'] = df_test['Deck'].replace(['F', 'G'], 'FG')\n\ndf_all['Deck'].value_counts()","27e7cac0":"plt.figure(figsize = (10, 6)), \n\nsns.kdeplot(df_train['Age'], color = 'red')\n\nplt.title('Overall Age Distribution For Training', size = 18)\nplt.xlabel('Age', size = 15)\nplt.ylabel('Distribution Density', size = 15)","1da49314":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.kdeplot(df_train[df_train['Sex_Code'] == 0]['Age']\n            , ax = ax\n            , color = 'b'\n            , label = 'Male')\n\nsns.kdeplot(df_train[df_train['Sex_Code'] == 1]['Age']\n            , ax = ax\n            , shade = True\n            , color = 'r'\n            , label = 'Female')\n\nax.set_title('Age Distribution For Sex')\nax.set_xlabel('Age')\nax.set_ylabel('Distribution Density')","730b92d3":"df_train['Has_Age'] = df_train['Age'].isnull().map(lambda x : 0 if x else 1)","954a7221":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.kdeplot(df_train.loc[df_train['Has_Age'] == 1 & (df_train['Survived'] == 0)]['Age']\n            , label = 'Not Survived'\n            , color = 'r'\n            , ax = ax)\n\nsns.kdeplot(df_train.loc[(df_train['Has_Age'] == 1) & (df_train['Survived'] == 1)]['Age']\n            , label = 'Survived'\n            , color = 'g'\n            , ax = ax)\n\nax.legend()\nax.set_title('Age Distribution For Survived Or Not')\nax.set_xlabel('Age')\nax.set_xlabel('Distribution Density')","d754177b":"fig, ax = plt.subplots(figsize = (10, 6))\n\nsns.violinplot(x = 'Pclass'\n               , y = 'Age'\n               , hue = 'Survived'\n               , data = df_train\n               , ax = ax \n               , split = True\n               , palette = {0 : 'r', 1 : 'g'})\n\nax.legend()\nax.set_title('Age Distribution For Survived Or Not According to Pclass')\nax.set_xlabel('Age')\nax.set_xlabel('Distribution Density')","0e40f769":"# For people over 60\nnum_of_cls1_survivors_above60 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] > 59) \n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls1_elders_above60 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] > 59)])\n\nnum_of_cls2_survivors_above60 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] > 59) \n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls2_elders_above60 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] > 59)])\n\nnum_of_cls3_survivors_above60 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] > 59) \n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls3_elders_above60 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] > 59)])\n\n# For people between 20 and 30\nnum_of_cls1_survivors_20to30 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)\n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls1_adults_20to30 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)])\n\nnum_of_cls2_survivors_20to30 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)\n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls2_adults_20to30 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)])\n\nnum_of_cls3_survivors_20to30 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)\n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls3_adults_20to30 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)])\n\n# For people under 20\nnum_of_cls1_survivors_under20 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] <= 19)\n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls1_childs_under20 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] <= 19)])\n\nnum_of_cls2_survivors_under20 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] <= 19)\n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls2_childs_under20 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] <= 19)])\n\nnum_of_cls3_survivors_under20 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] <= 19)\n                                    & (df_train['Survived'] == 1)])\n\nnum_of_cls3_childs_under20 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] <= 19)])","8609ef9c":"# For people over 60\nprint('Pclass 1 survivors above Age 60:'\n      , round((num_of_cls1_survivors_above60 \/ num_of_cls1_elders_above60) * 100, 1)\n      , '%')\n\nprint('Pclass 2 survivors above Age 60:'\n      , round((num_of_cls2_survivors_above60 \/ num_of_cls2_elders_above60) * 100, 1)\n      , '%')\n\nprint('Pclass 3 survivors above Age 60:'\n      , round((num_of_cls3_survivors_above60 \/ num_of_cls3_elders_above60) * 100, 1)\n      , '%')\nprint(dividing_line)\n\n# For people between 20 and 30\nprint('Pclass 1 survivors between 20 and 30:'\n      , round((num_of_cls1_survivors_20to30 \/ num_of_cls1_adults_20to30) * 100, 1)\n      , '%')\n\nprint('Pclass 2 survivors between 20 and 30:'\n      , round((num_of_cls2_survivors_20to30 \/ num_of_cls2_adults_20to30) * 100, 1)\n      , '%')\n\nprint('Pclass 3 survivors between 20 and 30:'\n      , round((num_of_cls3_survivors_20to30 \/ num_of_cls3_adults_20to30) * 100, 1)\n      , '%')\nprint(dividing_line)\n\n# For people under 19\nprint('Pclass 1 survivors under 20:'\n      , round((num_of_cls1_survivors_under20 \/ num_of_cls1_childs_under20) * 100, 1)\n      , '%')\n\nprint('Pclass 2 survivors under 20:'\n      , round((num_of_cls2_survivors_under20 \/ num_of_cls2_childs_under20) * 100, 1)\n      , '%')\n\nprint('Pclass 3 survivors under 20:'\n      , round((num_of_cls3_survivors_under20 \/ num_of_cls3_childs_under20) * 100, 1)\n      , '%')","599dd11a":"# For people above 60\nnum_of_cls1_females_above60 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] > 59) \n                                    & (df_train['Sex_Code'] == 1)])\n\nnum_of_cls2_females_above60 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] > 59) \n                                    & (df_train['Sex_Code'] == 1)])\n\nnum_of_cls3_females_above60 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] > 59) \n                                    & (df_train['Sex_Code'] == 1)])\n\n# For people between 20 and 30\nnum_of_cls1_females_20to30 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)\n                                    & (df_train['Sex_Code'] == 1)])\n\nnum_of_cls2_females_20to30 = len(df_train[(df_train['Pclass'] == 2) \n                                   & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)\n                                    & (df_train['Sex_Code'] == 1)])\n\nnum_of_cls3_females_20to30 = len(df_train[(df_train['Pclass'] == 3) \n                                    & (df_train['Age'] > 19) \n                                    & (df_train['Age'] <= 30)\n                                    & (df_train['Sex_Code'] == 1)])\n\n# For people under 20\nnum_of_cls1_females_under20 = len(df_train[(df_train['Pclass'] == 1) \n                                    & (df_train['Age'] <= 10)\n                                    & (df_train['Sex_Code'] == 1)])\n\nnum_of_cls2_females_under20 = len(df_train[(df_train['Pclass'] == 2) \n                                    & (df_train['Age'] <= 10)\n                                    & (df_train['Sex_Code'] == 1)])\n\nnum_of_cls3_females_under20 = len(df_train[(df_train['Pclass'] == 3)  \n                                    & (df_train['Age'] <= 10)\n                                    & (df_train['Sex_Code'] == 1)])","c08c7ad3":"# For people above 60\nprint('Pclass 1 females ratio above Age 60:'\n      , round((num_of_cls1_females_above60 \/ num_of_cls1_elders_above60) * 100, 1)\n      , '%')\n\nprint('Pclass 2 females ratio above Age 60:'\n      , round((num_of_cls2_females_above60 \/ num_of_cls1_elders_above60) * 100, 1)\n      , '%')\n\nprint('Pclass 3 females ratio above Age 60:'\n      , round((num_of_cls3_females_above60 \/ num_of_cls1_elders_above60) * 100, 1)\n      , '%')\nprint(dividing_line)\n\n# For people between 20 and 30\nprint('Pclass 1 females ratio between 20 and 30:'\n      , round((num_of_cls1_females_20to30 \/ num_of_cls1_adults_20to30) * 100, 1)\n      , '%')\n\nprint('Pclass 2 females ratio between 20 and 30:'\n      , round((num_of_cls2_females_20to30 \/ num_of_cls2_adults_20to30) * 100, 1)\n      , '%')\n\nprint('Pclass 3 females ratio between 20 and 30:'\n      , round((num_of_cls3_females_20to30 \/ num_of_cls3_adults_20to30) * 100, 1)\n      , '%')\nprint(dividing_line)\n\n# For people under 20\nprint('Pclass 1 females ratio under 20:'\n      , round((num_of_cls1_females_under20 \/ num_of_cls1_childs_under20) * 100, 1)\n      , '%')\n\nprint('Pclass 2 females ratio under 20:'\n      , round((num_of_cls2_females_under20 \/ num_of_cls2_childs_under20) * 100, 1)\n      , '%')\n\nprint('Pclass 3 females ratio under 20:'\n      , round((num_of_cls3_females_under20 \/ num_of_cls3_childs_under20) * 100, 1)\n      , '%')\n","745c046e":"# For people over 60\nprint('Pclass 1 people above Age 60:', num_of_cls1_elders_above60)\n\nprint('Pclass 2 people above Age 60:', num_of_cls2_elders_above60)\n\nprint('Pclass 3 people above Age 60:', num_of_cls3_elders_above60)\nprint(dividing_line)\n\n# For people between 20 and 30\nprint('Pclass 1 people between 20 and 30:', num_of_cls1_adults_20to30)\n\nprint('Pclass 2 people between 20 and 30:', num_of_cls2_adults_20to30)\n\nprint('Pclass 3 people between 20 and 30:', num_of_cls3_adults_20to30)\nprint(dividing_line)\n\n# For people under 20\nprint('Pclass 1 people under 20 :', num_of_cls1_childs_under20)\n\nprint('Pclass 2 people under 20 :', num_of_cls2_childs_under20)\n\nprint('Pclass 3 people under 20 :', num_of_cls3_childs_under20)","ca2574f9":"df_train['Pclass_Sex'] = df_train['Pclass'].astype(str) + '_' + df_train['Sex']","da4959f6":"plt.figure(figsize = (10, 6))\n\nsns.violinplot(x = 'Pclass_Sex'\n               , y = 'Age'\n               , hue = 'Survived'\n               , data = df_train\n               , cut = 0\n               , order = ['1_male', '2_male', '3_male', '1_female', '2_female', '3_female']\n               , split = True\n               , palette = {0 : 'r', 1 : 'g'})","d323f9b2":"df_train_survival_count_age = df_train[['Survived', 'Age', 'Count']]","b0cc83b3":"survived_without_age = df_train_survival_count_age.loc[(df_train_survival_count_age['Survived'] == 1) & df_train_survival_count_age['Age'].isna()]\nsurvived_wit_age = df_train_survival_count_age.loc[(df_train_survival_count_age['Survived'] == 1) & (~df_train_survival_count_age['Age'].isna())]\n\nnot_survived_without_age = df_train_survival_count_age.loc[(df_train_survival_count_age['Survived'] == 0) & df_train_survival_count_age['Age'].isna()]\nnot_survived_with_age = df_train_survival_count_age.loc[(df_train_survival_count_age['Survived'] == 0) & (~df_train_survival_count_age['Age'].isna())]","c3ff047c":"bar_chart_idx = np.arange(2)\n\nsurvived_bar_chart = plt.bar(bar_chart_idx\n                                    , [survived_wit_age['Count'].sum(), survived_without_age['Count'].sum()]\n                                    , bar_width, color = 'b'\n                                    , label = 'Survived')\n\nnot_survived_bar_chart = plt.bar(bar_chart_idx + 0.4\n                                        , [not_survived_with_age['Count'].sum(), not_survived_without_age['Count'].sum()]\n                                        , bar_width\n                                        , color = 'r'\n                                        , label = 'Not Survived')\n\ncreateLabelsForBar(survived_bar_chart)\ncreateLabelsForBar(not_survived_bar_chart)\n\nplt.xticks(bar_chart_idx + 0.4 \/ 2 ,('With Age','Age Unknown'))\nplt.legend() \nplt.xlabel('With\/Without Age')\nplt.ylabel('Count')\nplt.show()","706eaab6":"with_age_count = df_train_survival_count_age.loc[~df_train_survival_count_age['Age'].isna()]['Count'].sum()\nwithout_age_count = df_train_survival_count_age['Count'].sum() - with_age_count\n\nsurvived_bar_chart_percent = plt.bar(bar_chart_idx\n                                    , [survived_wit_age['Count'].sum() \/ with_age_count, survived_without_age['Count'].sum() \/ without_age_count]\n                                    , bar_width, color = 'b'\n                                    , label = 'Survived')\n\nnot_survived_bar_chart_percent = plt.bar(bar_chart_idx + 0.4\n                                        , [not_survived_with_age['Count'].sum() \/ with_age_count, not_survived_without_age['Count'].sum() \/ without_age_count]\n                                        , bar_width\n                                        , color = 'r'\n                                        , label = 'Not Survived')\n\ncreateLabelsForBar(survived_bar_chart_percent)\ncreateLabelsForBar(not_survived_bar_chart_percent)\n\nplt.xticks(bar_chart_idx + 0.4 \/ 2 ,('With Age','Age Unknown'))\nplt.legend() \nplt.xlabel('With\/Without Age')\nplt.ylabel('Percentage')\nplt.show()","4c70b7ec":"fig, [ax1, ax2] = plt.subplots(1, 2, figsize = (10, 5))\n\nsns.countplot(x = 'Pclass'\n              , hue = 'Has_Age'\n              , data = df_train\n              , ax = ax1)\n\nsns.countplot(x = 'Sex'\n              , hue = 'Has_Age'\n              , data = df_train\n              , ax = ax2)","d569ec01":"df_train[['Pclass', 'Has_Age']].groupby(['Pclass']).mean().round(3)","92e0e8b3":"df_all_name = df_all['Name'].copy()\ndf_all['Title'] = df_all_name.str.extract('([A-Za-z]+)\\.', expand = False)\ndf_train['Title'] = df_all[~df_all['Survived'].isnull()]['Title'].copy()\ndf_test['Title'] = df_all[df_all['Survived'].isnull()]['Title'].copy()\n\ndf_all['Title'].unique()","ba8efa1b":"print(df_all[df_all['Age'].isnull()]['Title'].unique())\nprint(df_all[~df_all['Age'].isnull()]['Title'].unique())","e9353b0f":"df_train[['Title', 'Pclass', 'Age']].groupby(['Title', 'Pclass'], axis = 0).agg(['count', 'mean', 'median'])","9e4a6e01":"title_dict = {'Capt' : 'Others', 'Col' : 'Others'\n             , 'Don' : 'Others', 'Major' : 'Others', 'Lady' : 'Mrs'\n             , 'Sir' : 'Others', 'Rev' : 'Others', 'Countess' : 'Others'\n             , 'Dr' : 'Others', 'Dona' : 'Others', 'Jonkheer' : 'Others'\n             , 'Mme' : 'Miss', 'Mlle' : 'Miss', 'Ms' : 'Miss', 'Master' : 'Master', 'Mr' : 'Mr', 'Mrs' : 'Mrs'\n             , 'Miss' : 'Miss'}","4feaeec3":"df_train['Title'], df_test['Title'] = [df.Title.map(title_dict).copy() for df in [df_train, df_test]]\n\n##Let us now reprint the groups\nimputing_mapping = df_train[['Title', 'Pclass', 'Age']].groupby(['Title', 'Pclass'], axis = 0).agg(['count', 'mean', 'median', 'max', 'min'])\nimputing_mapping","48fe2449":"df_train['Age_Imputed'] = df_train['Age'].copy()\ndf_test['Age_Imputed'] = df_test['Age'].copy()","c96f691f":"df_train[df_train['Age_Imputed'].isnull() & (df_train['Title'] == 'Master')]","337cfc95":"# All the children are in Pclass 3\ndf_train.loc[df_train['Age_Imputed'].isnull() & (df_train['Title'] == 'Master'), 'Age_Imputed'] = int(imputing_mapping.loc['Master', 2][2])","0b208859":"df_test[df_test['Age_Imputed'].isnull() & (df_test['Title'] == 'Master')]","2411e68d":"df_all[df_all['Ticket'] == '2622']","a083ed3f":"# Still, all the children are in Pclass 3\ndf_test.loc[df_test['Age_Imputed'].isnull() \n            & (df_test['Title'] == 'Master')\n            & (df_test['Parch'] == 0), 'Age_Imputed'] = int(imputing_mapping.loc['Master', 3][3])\n\ndf_test.loc[df_test['Age_Imputed'].isnull() \n            & (df_test['Title'] == 'Master')\n            & (df_test['Parch'] != 0), 'Age_Imputed'] = int(imputing_mapping.loc['Master', 3][2])","e79909cc":"df_train[(df_train['Title'] == 'Miss') & (df_train['Parch'] != 0)]['Age'].describe()","c3feab1d":"print (\"Median age of 'Miss' Title\", int(df_train[df_train['Title'] == 'Miss']['Age'].median()))\n\nprint (\"Median age of 'Miss' Title travelling without Parents\", int(df_train[(df_train['Title'] == 'Miss') \n                                                                             & (df_train['Parch'] == 0)]['Age'].median()))\n\nprint (\"Median age of 'Miss' Title travelling with Parents\", int(df_train[(df_train['Title'] == 'Miss') \n                                                                          & (df_train['Parch'] != 0)]['Age'].median()))","3c5a4873":"median_age_miss_with_parents = int(df_train[(df_train['Title'] == 'Miss') & (df_train['Parch'] != 0)]['Age'].median())\n\ndf_train.loc[df_train['Age_Imputed'].isnull() \n             & (df_train['Title'] == 'Miss') \n             & (df_train['Parch'] != 0), 'Age_Imputed'] = median_age_miss_with_parents\n\ndf_test.loc[df_test['Age_Imputed'].isnull() \n            & (df_test['Title'] == 'Miss') \n            & (df_test['Parch'] != 0), 'Age_Imputed'] = median_age_miss_with_parents","3af459d5":"title_list = ('Miss', 'Mr', 'Mrs', 'Others')\n\nfor title in title_list:\n    for idx in range(1, 4):\n        if not ((idx == 3) and (title == 'Others')):\n            df_train.loc[(df_train['Age_Imputed'].isnull())\n                     & (df_train['Title'] == title) \n                     & (df_train['Pclass'] == idx), 'Age_Imputed'] = int(imputing_mapping.loc[title, idx][2])\n            \n            df_test.loc[(df_test['Age_Imputed'].isnull())\n                     & (df_test['Title'] == title) \n                     & (df_test['Pclass'] == idx), 'Age_Imputed'] = int(imputing_mapping.loc[title, idx][2])\n","e39981fe":"df_train[['Title', 'Survived']].groupby(['Title'], as_index = False).mean()","459d185e":"df_all = pd.concat([df_train, df_test])","0dbc4cfa":"plt.figure(figsize = (20, 6))\n\ndf_train['Age_Int'] = df_train[~df_train['Age'].isnull()]['Age'].astype(int)\nsurvive_prob_per_age_bin = df_train[['Age_Int', 'Survived']].groupby(['Age_Int'], as_index = False).mean()\nsurvive_prob_per_age_bin['Age_Int'] = survive_prob_per_age_bin['Age_Int'].astype(int).copy()\nsns.barplot(x = 'Age_Int', y = 'Survived', data = survive_prob_per_age_bin)","3ff5271f":"b3 = [0, 13, 65, 100]\ndf_train['Age_3Bins'] = pd.cut(df_train['Age_Imputed'], b3)\ndf_test['Age_3Bins'] = pd.cut(df_test['Age_Imputed'], b3)\n\ndf_train.groupby('Age_3Bins')['Survived'].mean()","ac99fb4c":"b2 = [0, 13, 100]\ndf_train['Age_2Bins'] = pd.cut(df_train['Age_Imputed'], b2)\ndf_test['Age_2Bins'] = pd.cut(df_test['Age_Imputed'], b2)\n\ndf_train.groupby('Age_2Bins')['Survived'].mean()","85d846af":"labelEncoder = LabelEncoder()\n\nfor idx in range(4, 14):\n    df_train['Fare_' + str(idx) + 'Bins_Code'] = labelEncoder.fit_transform(df_train['Fare_' + str(idx) + 'Bins'])\n    df_test['Fare_' + str(idx) + 'Bins_Code'] = labelEncoder.fit_transform(df_test['Fare_' + str(idx) + 'Bins'])\n\nfor idx in range(2, 4):\n    df_train['Age_' + str(idx) + 'Bins_Code'] = labelEncoder.fit_transform(df_train['Age_' + str(idx) + 'Bins'])\n    df_test['Age_' + str(idx) + 'Bins_Code'] = labelEncoder.fit_transform(df_test['Age_' + str(idx) + 'Bins'])\n","55a40ff7":"df_train['Embarked_Code'] = df_train['Embarked'].map({'Q' : 1, 'C' : 2, 'S' : 3})\ndf_test['Embarked_Code'] = df_test['Embarked'].map({'Q' : 1, 'C' : 2, 'S' : 3})\n\ndf_train['Deck_Code'] = df_train['Deck'].map({'ABCT' : 1, 'DE' : 2, 'FG' : 3 , 'M' : 4})\ndf_test['Deck_Code'] = df_test['Deck'].map({'ABCT' : 1, 'DE' : 2, 'FG' : 3 , 'M' : 4})","e12823ec":"df_train['Family_Size'] = df_train['Parch'] + df_train['SibSp'] + 1\ndf_test['Family_Size'] = df_test['Parch'] + df_test['SibSp'] + 1\ndf_all['Family_Size'] = df_all['Parch'] + df_all['SibSp'] + 1","a18ceefb":"plt.figure(figsize = (10, 6))\n\nsurvival_per_family_size = df_train[['Family_Size', 'Survived']].groupby(['Family_Size'], as_index = False)\n\nprint(survival_per_family_size.agg(['count', 'mean']))\n\nsns.barplot(x = 'Family_Size', y = 'Survived', data = survival_per_family_size.mean())","3a405754":"df_train['Ticket'].describe()","47a47af1":"duplicate_tickets_info = []\n\nfor ticket in df_train['Ticket'].unique():\n    ticket_count = df_train.loc[df_train['Ticket'] == ticket]\n    \n    if len(ticket_count) > 1:\n        duplicate_tickets_info.append(df_train.loc[df_train['Ticket'] == ticket\n                                                   , ['Name', 'Ticket', 'Fare', 'Age_Imputed', 'Family_Size', 'Survived']])\n\nduplicate_tickets_info = pd.concat(duplicate_tickets_info)\nduplicate_tickets_info.head(15)","bf3e8935":"duplicate_tickets_info.loc[duplicate_tickets_info['Ticket'] == '113505']","11c3a39b":"# Check whether the same tickets all paid with the same fare\nticket_fare_diff = duplicate_tickets_info[['Fare', 'Ticket']].groupby(['Ticket']).max() - duplicate_tickets_info[['Fare', 'Ticket']].groupby(['Ticket']).min()\nticket_fare_diff[ticket_fare_diff['Fare'] != 0]","e0b26860":"df_train[df_train['Ticket'] == '7534']","3ae0526e":"not_all_survived_or_die_groups = duplicate_tickets_info[['Survived', 'Ticket']].groupby(['Ticket']).mean()\nnot_all_survived_or_die_groups = not_all_survived_or_die_groups[(not_all_survived_or_die_groups['Survived'] != 1) \n                                                                & (not_all_survived_or_die_groups['Survived'] != 0)]\n\nprint(\"Number of groups that members didn't survive or die all together: \", len(not_all_survived_or_die_groups))","922395e2":"# Title mapping = {'Mr' : 0, 'Others' : 1, 'Master' : 2, 'Miss' : 3, 'Mrs' : 4}\nfor idx in not_all_survived_or_die_groups.head(20).index:\n    print(df_train.loc[df_train['Ticket'] == str(idx), ['Title', 'Sex', 'Age_Imputed', 'Ticket', 'Survived']])\n    print(dividing_line)","019dc265":"df_all['Connected_Survival'] = 0\n\nfor grp, grp_df in df_all.groupby(['Ticket']):\n    if (len(grp_df) != 1):\n\n        for ind, row in grp_df.iterrows():\n            passID = row['PassengerId']\n\n            if df_all[(df_all['Ticket'] == grp) & ((df_all['Sex'] == 'female') | (df_all['Title'] == 'Master'))]['Survived'].mean() == 1.0:\n                df_all.loc[df_all['PassengerId'] == passID, 'Connected_Survival'] = 1","bc275c19":"df_all[~df_all['Survived'].isnull()].groupby('Connected_Survival')['Survived'].agg(['count', 'mean'])","592c215a":"df_train['Connected_Survival'] = df_all[~df_all['Survived'].isnull()]['Connected_Survival']\ndf_test['Connected_Survival'] = df_all[df_all['Survived'].isnull()]['Connected_Survival']","b59c02f5":"compare_feature = ['Sex_Code', 'Pclass', 'Age_2Bins_Code', 'Age_3Bins_Code', 'Fare_5Bins_Code']\n\n\nselector = RFECV(RandomForestClassifier(n_estimators = 250, min_samples_split = 20), cv = 5, n_jobs = -1)\nselector.fit(df_train[compare_feature], df_train['Survived'])\nprint(selector.n_features_)\nprint(selector.support_)\nprint(selector.ranking_)\nprint(selector.grid_scores_)","533f5d44":"# age_b2, age_b3, age_b4, = [], [], []\n\n# seeds = 20\n\n# for seed in range(seeds):\n#     diff_cv = StratifiedKFold(n_splits = 10, shuffle = True, random_state = seed)\n#     selector = RFECV(RandomForestClassifier(n_estimators = 250, min_samples_split = 20)\n#                      , cv = diff_cv\n#                      , n_jobs = -1)\n#     selector.fit(df_train[compare_feature], df_train['Survived'])\n    \n#     age_b2.append(selector.grid_scores_[2])\n#     age_b3.append(selector.grid_scores_[3])\n#     age_b4.append(selector.grid_scores_[4])","b5d47f63":"# score_list = [age_b2, age_b3, age_b4]  \n\n# for idx in range(len(score_list)):\n#     score_list[idx] = np.array(score_list[idx]) * 100\n    \n# fig, ax = plt.subplots(figsize = (18, 7))\n\n# ax.plot(range(seeds), score_list[0], '-oc', label = 'Age_b2')\n# ax.plot(range(seeds), score_list[1], '-og', label = 'Age_b3')\n# ax.plot(range(seeds), score_list[2], '-or', label = 'Age_b4')\n\n# plt.legend()","5a8a5b1e":"selected_feautures = ['Sex_Code', 'Pclass', 'Connected_Survival', 'Age_3Bins_Code', 'Fare_5Bins_Code']","e989acd8":"# # Hyperparameters Tuning\n# min_samples_split = [idx for idx in range(1, 51)]\n# min_samples_split.append(None)\n\n# parameters = {'n_estimators' : np.arange(10, 5000, 50)\n#              , 'max_depth' : min_samples_split\n#              , 'min_samples_split' : np.arange(2, 50, 2)\n#              , \"min_samples_leaf\": np.arange(1, 50, 2)}\n\n# model_tuning = RandomizedSearchCV(RandomForestClassifier(oob_score = True)\n#                     , param_distributions = parameters\n#                     , cv = 10\n#                     , n_iter = 40\n#                     , verbose = True)\n\n# model_tuning.fit(df_train[selected_feautures], df_train['Survived'])\n\n# print(model_tuning.best_score_)\n# print(model_tuning.best_params_)","70befef4":"model = RandomForestClassifier(n_estimators = 2060\n                               , min_samples_split = 40\n                               , min_samples_leaf = 11\n                               , max_depth = 37\n                               , oob_score = True)\n\nmodel.fit(df_train[selected_feautures], df_train['Survived'])\n\nprint('Training Out-of-Bag score:', model.oob_score_)\nprint('Training Out-of-Bag score:', model.feature_importances_)","fc17ae1f":"predict_Y = model.predict(df_test[selected_feautures])\nsubmission = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': predict_Y.astype(int)})\nsubmission.to_csv('submission_Connected_Survival.csv', index = False)","2f38f1ea":"Encode the sex feature","46cfc99c":"1. #### *We can see that the distribution of Age of testing dataset is smoother, which menas that our model may not be able to generalize to test set because of this reason.*","910ba7e2":"#### 1. Seems that Family_Size with 2 to 4 get the highest survival rate","fec9b4a7":"#### Let's take cross validation method and random_state into consideration","34f7a02d":"1. #### *Females in Pclass 1 & 2 have chance over 90% to survive*\n2. #### *Males in Pclass 2 & 3 have chance less than 16% to survive*","eeac1f41":"1. #### *In Pclass=1, there is 2.5 times more survival chance if you are between 20-30 as compared to 60 and above. However, people above 60 nearly have the same surviving chance among three classes*\n2. #### *Surviving chances for people under 20 in class 1 & 2 are close, which are twice the one in class 3*\n### Beblow we'll explore this two phenomenon","6db5d011":"# Testing","fa49839d":"#### There is a kid with Age unknown without any family member or friend, so I decide to assing the max value for it","763d1ef8":"#### 1. Miss -> unmarried young females\n#### 2. Mrs. -> married women\n#### 3. Ms. -> women over the age of 18\n#### 4. Mr. -> men over 18\n#### 5. Master -> boys under the age of 18","a1c2498a":"### Missing Value in Feature Fare(Testing Dataset)","0d4d47d0":"#### Graph Below shows that age is unknown tend to not survive","bb8c8fa5":"#### 1. Seems that we can put Mme, Mlle and Ms into group of Miss\n#### 2. Dr, Major, Capt, Col, Lady, Sir, Rev, Countess, Don, Dona and Jonkheer belong to Officer or Royalty","af08d41a":"## Age\n### Note: 20% of feature Age are lost(Training dataset)","4e53aa9a":"1. #### *Seems that the standard deviation in feature Fare is quite large*\n2. #### *Min of feature Fare is 'zero'*\n3. #### *Overall survival rate is 38.3% which means a baseline accruracy 61.7% should be achived by just guessing all the passengers were dead*","68b240ce":"1. #### *Males above 15 or so in Pclass 2 has worse survival chance than males in Pclass 3*\n2. #### *Males under 18 in Pclass 1 all survived, all males under 16 survived in Pclass 2*\n3. #### *In Pclass 1, there were only one female under 20, it's insignificant, so we ignore the graph trend of 2_female*","56ca23c5":"#### We can see that the title of passengers with age unknown are only ['Mr' 'Mrs' 'Miss' 'Master' 'Dr' 'Ms']\n\nBeblow we can see the number of Nan age passengers in different group","beef2fb9":"1. #### *Females with Embarked = 'Q' and Pclass = 3 has 23% more than overall surviving chance of females with Pclass = 3 which is 50%*\n2. #### *Females with Embarked = 'S'* and Pclass =3 has 12% less thab overall surviving chance of females with Pclass = 3\n3. #### *Males and females with Embarked = 'C' have higher surviving chance in all classes than the ones for overall surviving chance *\n\nSo it's possible feature Embarked is a potential factor correlated with Survival(?)  --> need more observation to prove","d2a40e48":"#### *Seems that we can Not use Cabin to estimate Embarked*","1e007576":"1. #### *we can observe that in same groups , passengers with title Mr were barely survived, and ladies and children tends to survive when all the females and children were all alive .*","007a7ba1":"#### Because there are outlers such as 56.495 in feature Fare, so I choose median to impute the missing value","74aaa053":"1. #### *Seems that Embarked is not a good feature for training*\n2. #### *Feature Fare is not selected, probably it'll cause our training model overfitting*\n3. #### *Family_Size, Title and Deck_Code is not helpful*","946d45a7":"### Check Title Affects Survival or Not","9d158f33":"1. #### *If you are male your chance of survival is good upto 15 years of age else it is not good.*\n2. #### *In case of female there is a decent chance of survival across all ages*","6b885fb7":"#### *Overall, people with age below 16 has high survival possibility*","8bbed3ea":"### Imputing Age","ed198b54":"### We can tell if a male is a children or not by check his name consist Master or not, but how can we tell if a female is a children from the title Miss group?  -> By Feature Parch\n\nLet's check the distribution of age of Miss-titled females that don't have parents along","79f0a0c3":"## Embarked","7ecb6ff6":"### Missing values","68fe03e0":"1. #### *There is a peak for Log_Fare nearly 1.0* ","687519bb":"1. #### *Seems that in each Pclass people paid higher for ticket tend to have higher chance to survive than people who paid less*\n2. #### *In Pclass 1, people whose Log_Fare less than 1.4 were all dead, in Pclass 2 whose Log_Fare less than near 1.1 were all dead*\n3. #### *Previously, we found that there is a overall high expiry chance for Log_Fare near 1.0, we can observed that it's skewed by that data in Pclass 3*\n4. #### *People have 0 Fare in each Pclass were all dead*","c30f2e5f":"### Age Distribution Related with Pclass and Gender","054ff33a":"#### *Seems that we found a lot of data that got similiar conditions with the passenger having missing feature Fare*","38f7d3a3":"### Extract Feature Title From Name","305dcfd1":"#### Let's check the passenager' info whose paid fare 0 for tickets","7f24ecd7":"### Fare Bining\n#### Fare with logrithm didn't solve our overfitting problem","218b9730":"### Dealing with Missing Values in Feature Age","4ad0a58b":"1. #### *Pclass 2 and 3 have a very sharp peak of expiry near the 20-30 age range*\n2. #### *Pclass 1 has far more survivors across all age levels except between 0 to 10, and after 55 or so. After 60, there is a sharp jump in expiry*","43d53fcd":"1. #### *Deck **B**, **D** and **E** have the highest survival rates*\n2. #### *M has the lowest survival rate which is mostly occupied by 2nd and 3rd class passengers.*\n\n    * #### *A, B, C, T decks are labeled as ABCT because all of them have only 1st class passengers*\n    * #### *D and E decks are labeled as DE because both of them have similar passenger class distribution and same survival rate*\n    * #### *F and G decks are labeled as FG because of the same reason above ?????*\n    * #### *M deck doesn't need to be grouped with other decks because it is very different from others and has the lowest survival rate.*","6a104a18":"#### *These two passengers were female, got the same Fare and Ticket. And they got no family, which means that they were together, so they boarded from the same port*","e65d5a6a":"#### People in ticket 7534 group are two males, and they are in same Pclass, so we assume they are friend, and assume that people have the same ticket paid the same fare\n\nLet's check that if the passengers in same group didn't survive or die all together, which kind of passengers will survive","fed0a372":"## Fare","878100ab":"#### 1. In training dataset, the strategy of check whether the groups of females and children were all alive split the data well. So it seems to be a good factor with survival","d13dcf02":"### Check Fare Distribution For Survived Or Not","143f1c72":"#### Violin Chart For Age Distribution ","017204e1":"#### *49 is quite a big number of groups that passenger didn't survive or die together*","faae0203":"#### *It's still hard to estimate Embarked with these information, so we simply just use Pclass = 1\u3001Sex to choose to impute with Embarked = 'S'*","d3cf9d7b":"## Cabin\n### Note: In training dataset, 80% of the feature Cabin are lost","c0939fba":"### mean and media of the age for all titles considering Pclass","39287667":"1. #### *Between 0-12? age survival rate is higher (green is fatter than red in this age range)* ","f5be2cc5":"### Feature Survival Possibility accroding to Sex in three Pclass","8e7a9ab2":"1. #### *Passengers in Deck A, B, C, T are all in Pclass 1, but passenger with Deck T is just one, it's possible is wrong value*\n2. #### *Deck D has 87% 1st class and 13% 2nd class passengers*\n3. #### *Deck E has 83% 1st class , 10% 2nd class passengers and 7% 3rd class passengers*\n4. #### *Deck F has 62% 2nd class passengers, and 38% 3rd class passengers*\n5. #### *Passengers in Deck G are also all in 3rd class*","bc968228":"1. #### *Feature Pclass has weak negative linear relation with Survived*\n2. #### *Feature Sex_code has strong positive linear relation with Survived*\n3. #### *Feature Fare has weak positive linear relation with Survived*\n4. #### *Feature Fare has strong negative linear relation with Pclass*","260f613f":"### Check Age Distribution","e5eceee3":"### Draw the correlation Map for features with surviving","eacd34e9":"### Missing Values in Feautre Embarked(Training Dataset)","fb893669":"### Age Bining\n#### Note: I found that bining with quantile is not helpful but noisy","f991a71d":"### Categorical Feature Encoding","82c6c866":"## Pclass\n### At first glance, passengers with smaller Pclass were more likely to survive","0de5ce98":"1. #### Seems that there are people travel together with the same tickets","c8cb131c":"## Family Size","9a70cf3a":"## 1.1 Sex\n### **At first glance, we observe that female were more likely to survive than male** ","0bdc4803":"### Feature Selection based on Training data\n#### Note: Model trained with the features selected recommended beblow may not be able to generalize to test set.","87a04a2f":"# Training\n### *Training Log:*\n1. #### *Training with feature ['Sex_Code', 'Pclass', 'Deck_Code', 'Log_Fare', 'Embarked_Code'] only get 74% public score, seems that overfitting is still a major problem, and usring logrithm of feature Fare didn't solve the problem*\n\n2. #### *Submit the model_b13 got score 76.8%, which means that 'Deck_Code' and 'Embarked_Code' are not helpful for our model, they are quite noisy.*\n\n3. #### *Added Age feature and trained with ['Sex_Code', 'Pclass', 'Age_4Bins_Code', 'Fare_13Bins_Code'] and ['Sex_Code', 'Pclass', 'Age_4Bins_Code', 'Fare_9Bins_Code'] got scores 77.5 % and 75.1%. Seems that bining of age is still noisy or age are not helpful.*\n\n4. #### *Title is not helpful*\n\n5. #### *The new feature Connect_Surival boost our public score around 2.39 %, so it's a very important feature*\n\n6. #### *It's strange that after I added the feautre Connect_Surival then I put the feature Age_XBins back again, I got better public score around 81.3 ~ 81.6 %, it's possible that Age_XBins feature is useful before, but I trusted the public score and overfitted it*","d5fc2555":"### Feature Engineering - Variable Transformation: Logarithm\n#### With big variance and right skewed in feature fare, it's easy to cause our model overfitting","31d6b78c":"### Group people together with Ticket\n#### Note: People having same tickets are family or friends. This kind of feature engineering use both training and testing dataset, which is kind of 'Cheating'(?)\n#### Also, the whole same groups tend to survive or die together","b7984bec":"### **New Feautre Connected_Survival Rules:**\n#### 1. if passenger is children or female and the group he\/she in all the females and childrens survived --> 1.0\n#### 2. The rest : 0.0","98fc08b1":"1. #### *The numbers of people above 60 in class 2 & 3 are insignificant, but siginificant in class 1 which is 17. So, we can observe that the female ratio of people between 20-30 is quite higher than the one of people above 60 causes that the disparity(72.5% vs 29.4%).*\n2. #### *The numbers of people under 20 among three classes are all significant. In Pclass = 1, only one female were under 20 and nearly 80 % of the people under 20 in Pclass 2 are males, previously we observed that in class 1 male survival chance is 37% and the one for females is 96.8, so given the female ratio is 5%, the theoretical probability for kids under 20 in Pclass 1 is 0.05 * 0.968 + 0.95 * 0.37 = 40% which is very lower than 81%, so we can tell that feature Age is an important factor related to survival*","3aa8fdbe":"1. #### Seems in training dataset, people with the same tickets tend to survive or die together with the group they are in\n2. #### But the family size of the people having ticket 349909 does not match the count of the members me made above, seems that there is a passenger having ticket 349909 in testing dataset\n3. #### However in ticket 113803, the female survived but her husband were dead --> (Lady First?)","04985bcf":"# 1. Exploratory Data Analysis\n### Note: we can't just extract information from test dataset, these will cause 'information leakage', a general way to impute missing value is to estimate from training data and apply the estimation from training data to testing data"}}