{"cell_type":{"ff4c150e":"code","c3f21cfe":"code","9011cb38":"code","c372f89a":"code","6e5830d5":"code","a9dca2df":"code","232e6c5d":"code","c522f48f":"code","60986d05":"code","e961c631":"code","1240edb1":"code","2e7356e7":"code","d98ee485":"code","a9bc40e6":"code","65c17a9d":"code","5b4c88d6":"code","2999b819":"code","d59c846c":"code","d621e26d":"code","00eac48a":"code","92cb5f40":"code","7cb70e9e":"code","6e7f4f72":"code","97dc4be0":"code","1af0f73b":"code","6833e29e":"code","fcc7b84f":"code","ee313236":"code","c60a9d2d":"code","0562d789":"code","588046e4":"code","e6f9a6c1":"code","286a983b":"code","c01dba62":"code","63677dd1":"code","bedc1629":"code","be5ac0e5":"code","46b327d4":"code","1c1e8176":"code","8d1c2269":"code","caccac17":"code","28b574d9":"code","ab8b54dc":"code","21ef0c63":"code","a55e9bb8":"code","99590cc1":"code","2a5620d4":"code","22ddc83a":"code","d88e8f42":"code","ea0ac00d":"code","0528ea47":"code","21647af8":"code","816c8c1b":"code","f9a6a891":"code","2dbd1d0b":"code","d328cebe":"code","7f541eec":"code","b8430ff7":"code","5642de4d":"code","7a57374f":"code","e2b283e8":"code","ee28495a":"code","b3f9db87":"code","353c47d5":"code","8447fc04":"code","b912f7bd":"code","faa35f7e":"code","baaff831":"code","2723f2cb":"code","219162d2":"code","48d5e3a3":"code","c5a1c898":"code","19934deb":"code","7ea04cbc":"code","50d54dd5":"code","4392c521":"code","83f7132e":"code","0ef6f5b5":"code","52c9914a":"code","4b611542":"code","bcaeefab":"code","d5cf18d8":"code","e2e81365":"code","ee5c3412":"code","ddcbd340":"code","edfca27d":"code","1a691c96":"code","d4529fc3":"code","7726caf3":"code","733a0297":"code","0b54424b":"code","9a21882d":"code","d99ad2e0":"code","273cbc7d":"code","00b6f0c2":"code","12202060":"code","97ea378f":"code","4f78f2c4":"code","4f1823eb":"code","5d0fa5d7":"code","b4c12a6a":"code","1397a916":"code","0094ed98":"code","1f791073":"code","1ee0d839":"code","02e0ea62":"code","f2b84d7a":"code","f38c77c5":"code","49f9bcd5":"code","d3ad1903":"code","02e7fe6d":"code","0059867f":"code","5ddae1d1":"code","5083d055":"markdown","692ce408":"markdown","faebf599":"markdown","e7452f48":"markdown","91b61480":"markdown","7a1bdead":"markdown","c75ecef2":"markdown","204abe6f":"markdown","90ed459b":"markdown","a56c035e":"markdown","3fdca1f7":"markdown","4b3abed1":"markdown","6c2908bc":"markdown","429997d6":"markdown","0ca214b2":"markdown","a94354d8":"markdown","91b6cd97":"markdown","87f864ea":"markdown","9935d0a2":"markdown","36008178":"markdown","6c51254a":"markdown","da8b1835":"markdown","da12c1dc":"markdown","69901e89":"markdown","b953f2f8":"markdown","f1703aa4":"markdown","4e041f1c":"markdown","34e4677e":"markdown","7348a9b0":"markdown","c9886d90":"markdown","2751404f":"markdown","96b9cdd8":"markdown","ce8559ac":"markdown","39056573":"markdown","5e298fb9":"markdown","ec7d9b82":"markdown","a6c99ac7":"markdown","c9451211":"markdown","a83f67f1":"markdown","f642834b":"markdown","34065787":"markdown","d525327e":"markdown","508170ae":"markdown","8437f8ea":"markdown","dfc6f696":"markdown","0fcd1e22":"markdown","b4a09370":"markdown","8e1c9430":"markdown","a74f16a5":"markdown","5f4c018b":"markdown","d17e9293":"markdown","5e54eb01":"markdown","e39005c5":"markdown","8c285510":"markdown","cec02481":"markdown","e22537f3":"markdown","a57106fd":"markdown","49553e3d":"markdown","fef06e18":"markdown","024d96d6":"markdown","10fbba2e":"markdown","ef2dc7de":"markdown","2bf28a23":"markdown","c2603f0e":"markdown","a0f863c7":"markdown","9a6081a1":"markdown","17a89639":"markdown","47dc2b98":"markdown","c99338e8":"markdown","0c775b1f":"markdown","a3944866":"markdown","af883fd8":"markdown","6815f848":"markdown","348e27be":"markdown","2e887963":"markdown","c6f2c51d":"markdown","66dbb656":"markdown","e0e861fa":"markdown","d90f3424":"markdown","b79a0870":"markdown","004b4380":"markdown","bdb60c01":"markdown","9b60eb30":"markdown","5a957e9f":"markdown","986806ad":"markdown","6829550f":"markdown","290127bb":"markdown","c55ceff4":"markdown","0892c9a5":"markdown","4c87cf3e":"markdown","59fe5e04":"markdown","fa4f5765":"markdown","f76b893d":"markdown","89efa9d6":"markdown","0bc1f934":"markdown","5eca0465":"markdown","ad3fca0f":"markdown","efdbed80":"markdown","9061326c":"markdown","5666663f":"markdown","74e60aa3":"markdown","824865d2":"markdown","2117460a":"markdown","ff157de1":"markdown","d5e991ea":"markdown","1f4b51a2":"markdown"},"source":{"ff4c150e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport seaborn as sns\nimport re\n\n# set the graphs to show in the jupyter notebook\n%matplotlib inline\n\n# set seabor graphs to a better style\nsns.set(style=\"ticks\")","c3f21cfe":"raw_data = {\"name\": ['Bulbasaur', 'Charmander','Squirtle','Caterpie'],\n            \"evolution\": ['Ivysaur','Charmeleon','Wartortle','Metapod'],\n            \"type\": ['grass', 'fire', 'water', 'bug'],\n            \"hp\": [45, 39, 44, 45],\n            \"pokedex\": ['yes', 'no','yes','no']                        \n            }","9011cb38":"pokemon = pd.DataFrame(data = raw_data)","c372f89a":"pokemon","6e5830d5":"pokemon = pokemon[['name','type','hp','evolution','pokedex']]\npokemon","a9dca2df":"place = ['lakes','parks','hills','forest']\npokemon['places'] = place\npokemon","232e6c5d":"pokemon.dtypes","c522f48f":"pokemon.info()","60986d05":"wine_loc = '..\/input\/basic-data-manipulation-using-pandas-and-numpy\/wine.txt'\nwine = pd.read_csv(wine_loc, header = None)\nwine","e961c631":"wine.drop([0,3,6,8,10,12,13] , axis = 1, inplace = True)","1240edb1":"headers = ['alcohol','malic_acid','alcalinity_of_ash','magnesium','flavanoids','proanthocyanins','hue']\nwine.columns = headers\nwine.head()\n","2e7356e7":"wine.alcohol.iloc[0:3] = np.nan","d98ee485":"wine.magnesium.loc[[3,4]] = np.nan\nwine.head()","a9bc40e6":"wine.alcohol.fillna(10, inplace = True)\nwine.magnesium.fillna(100, inplace = True)\nwine.head()","65c17a9d":"wine.isnull().sum()","5b4c88d6":"ran_arr = np.random.randint(0,11,10)\nran_arr","2999b819":"wine.alcohol.loc[ran_arr] = np.nan","d59c846c":"wine.isnull().sum()","d621e26d":"wine.alcohol[wine.alcohol.notnull()]","00eac48a":"wine.dropna(inplace = True)\nwine","92cb5f40":"wine.reset_index(inplace = True)\nwine.head()","7cb70e9e":"url = 'https:\/\/raw.githubusercontent.com\/justmarkham\/DAT8\/master\/data\/chipotle.tsv'\nchipo = pd.read_table(url)\nchipo","6e7f4f72":"chipo.item_price = chipo.item_price.str.replace('$','')\nchipo.item_price = chipo.item_price.astype(np.float64)\n","97dc4be0":"chipo.item_price[chipo.item_price > 10].count()","1af0f73b":"#chipo DataFrame\npd.set_option('display.max_rows',None,'max_colwidth',None)\nchipo\n","6833e29e":"#Info about chipo DataFrame\nchipo.info()","fcc7b84f":"price_chipo = chipo.groupby(by ='item_name')[['item_price']].min().sort_values('item_price', ascending = False).reset_index()\nprice_chipo","ee313236":"price_chipo.sort_values(by = ['item_name'])","c60a9d2d":"exp_chipo = np.where(chipo.item_price == chipo.item_price.max(),chipo.quantity,0)\nfor i in exp_chipo:\n    if i!=0:\n        print('Quantity of the most expensive item ordered is : ',i)","0562d789":"np.count_nonzero(chipo.item_name == 'Veggie Salad Bowl')","588046e4":"np.count_nonzero((chipo.item_name == 'Canned Soda') & (chipo.quantity > 1) )","e6f9a6c1":"users = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/occupation.csv', sep ='|')\nusers.head()","286a983b":"users.groupby(['occupation'],as_index=False)['age'].mean()","c01dba62":"users['is_male'] = np.where(users.gender == 'M',True,False)\n(users.groupby('occupation').is_male.sum()\/users.groupby('occupation').gender.count()).sort_values(ascending = False)","63677dd1":"users.groupby(['occupation'])['age'].agg(['min','max'])","bedc1629":"users.groupby(['occupation','gender'],as_index=False)['age'].mean()","be5ac0e5":"occ_gender = users.groupby(['occupation','gender']).agg({'age':'count'})\/users.groupby(['occupation']).count()\nocc_gender.loc[:,'age']","46b327d4":"sm = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/student-mat.csv')\nsp = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/student-por.csv')\ndf = pd.concat([sm,sp]).reset_index(drop = True)\ndf.head()","1c1e8176":"df.loc[:,:'guardian']","8d1c2269":"def cap():\n    return lambda x: x.capitalize()","caccac17":"df.Mjob.apply(cap())\n\n","28b574d9":"df.Fjob.apply(cap())","ab8b54dc":"df.tail(1)","21ef0c63":"df.Mjob = df.Mjob.apply(cap())\ndf.Fjob = df.Fjob.apply(cap())\ndf.head()","a55e9bb8":"def majority(x):\n    if x == 1:\n        return True\n    else:\n        return False\ndf[\"legal_drinker\"] = [majority(1) if x>=18 else majority(0) for x in df[\"age\"]]\n\ndf.head()","99590cc1":"df.apply(lambda x: x*10 if x.name in ['Medu', 'Fedu'] else x)","2a5620d4":"cars1 = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/cars1.csv')\ncars2 = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/cars2.csv')\n","22ddc83a":"type(cars1)\n\n","d88e8f42":"cars1.head()","ea0ac00d":"cars1.tail()","0528ea47":"cars1.columns","21647af8":"cars1.info()","816c8c1b":"cars1.dtypes","f9a6a891":"cars1.index","2dbd1d0b":"cars1.shape","d328cebe":"cars1.count()","7f541eec":"cars1.size","b8430ff7":"cars1.ndim","5642de4d":"cars1.axes","7a57374f":"cars1.describe()","e2b283e8":"cars1.memory_usage()","ee28495a":"cars1.sort_values('mpg').reset_index(drop = True)","b3f9db87":"cars1.value_counts()","353c47d5":"from pandas_profiling import ProfileReport\nProfileReport(cars1)","8447fc04":"cars1.drop(['Unnamed: 9','Unnamed: 10','Unnamed: 11','Unnamed: 12','Unnamed: 13'],axis = 1,inplace= True)\ncars1.head()","b912f7bd":"print('number of observations in cars1:', len(cars1))","faa35f7e":"print('number of observations in cars2:', len(cars2))","baaff831":"cars = pd.concat([cars1,cars2],axis = 0).reset_index(drop = True)\ncars","2723f2cb":"owners = np.random.randint(15000,73001,size = (len(cars),1))","219162d2":"cars['owners'] = owners\ncars.head()","48d5e3a3":"# a. Current date and time\n\nx = dt.datetime.now()\nd1 = x.strftime('%d-%B-%Y  %H:%M:%S')\nprint(\"a. Todays date time : \",d1)\nprint(\"b. Current year : \",x.year)\nprint(\"c. Month of year : \",x.month)\nprint(\"d. Week number of the year : \",x.isocalendar()[1])\nprint(\"e. Weekday of the week : \",x.strftime(\"%A\"))\nprint(\"f. Day of year : \",x.timetuple().tm_yday)\nprint(\"g. Day of the month : \",x.day)\nprint(\"h. Day of week : \",x.isocalendar()[2])","c5a1c898":"x = dt.datetime.strptime('Jul 1 2014  2:43PM', '%b %d %Y %I:%M%p')\nprint('Expected Output :',x)\n","19934deb":"x = dt.date(2015,6,22)\nx1 = x - dt.timedelta(5)\nprint('5 days before Current Date : ',x1)","7ea04cbc":"x = int(\"1284105682\")\n\nprint(dt.datetime.utcfromtimestamp(x).strftime('%Y-%m-%d %H:%M:%S'))","50d54dd5":"DoB = pd.Series([\"07Sep59\",\"01Jan55\",\"15Dec47\",\"11Jul42\"])\ndob = DoB.apply(lambda x: dt.datetime.strptime(x,\"%d%b%y\"))\ndob = dob - pd.offsets.DateOffset(years=100)\nprint(dob)","4392c521":"date1 = dt.date(2021, 2, 25)\ndate2 = dt.date(2020, 8, 25)\ndiffrnce = date1 - date2\nprint(diffrnce.days)","83f7132e":"result = dt.datetime.strptime('15Dec1989','%d%b%Y')\nresult1 = dt.datetime.strftime(result,'%A, %d %b %y')\nprint(result1)","0ef6f5b5":"data = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/wind.data')\ndata['Date'] = pd.to_datetime(data[['Yr','Mo','Dy']].astype(str).agg('-'.join,axis = 1 ))\ndata.drop(['Yr','Mo','Dy'],axis = 1,inplace = True)\ndata.head()","52c9914a":"data[\"Date\"] = np.where(pd.DatetimeIndex(data[\"Date\"]).year < 2070,data.Date,data.Date - pd.offsets.DateOffset(years=100))\ndata.head()","4b611542":"data = data.set_index(\"Date\")\ndata.index.astype(\"datetime64[ns]\")","bcaeefab":"print(data.isnull().values.ravel().sum())","d5cf18d8":"x = data.count()\nprint('Total non missing values : ',x.sum())","e2e81365":"y = data.mean()\ny.mean()\n","ee5c3412":"def stats(x):\n    x = pd.Series(x)\n    Min = x.min()\n    Max = x.max()\n    Mean = x.mean()\n    Std = x.std()\n    res = [Min,Max,Mean,Std]\n    indx = [\"Min\",\"Max\",\"Mean\",\"Std\"]\n    res = pd.Series(res,index=indx)\n    return res\nloc_stats = data.apply(stats)\nloc_stats","ddcbd340":"day_stats = data.apply(stats,axis=1)\nday_stats.head()","edfca27d":"january_data = data[data.index.month == 1]\nprint (\"January windspeeds:\")\nprint (january_data.mean())","1a691c96":"newdata = data.groupby(lambda d: (d.month, d.year))\nprint (\"Mean wind speed for each month in each location\")\nprint (newdata.mean())","d4529fc3":"first_year = data[data.index.year == 1961]\nstats1 = data.resample('W').mean().apply(lambda x: x.describe())\nprint (stats1)","7726caf3":"apple = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/appl_1980_2014.csv')\n","733a0297":"apple.head()","0b54424b":"apple.dtypes","9a21882d":"apple.Date = apple.Date.astype(np.datetime64)","d99ad2e0":"apple1 = apple.set_index('Date')\napple1.head()","273cbc7d":"apple1.index.duplicated().sum()","00b6f0c2":"apple1.index = apple1.index.sort_values()\napple1.head()","12202060":"apple[\"month\"] = pd.DatetimeIndex(apple.Date).month\napple[\"Date_wo\"] = pd.DatetimeIndex(apple.Date).day\napple.groupby(by=\"month\")[[\"Date_wo\"]].max().reset_index()","97ea378f":"apple.index[-1] - apple.index[0]","4f78f2c4":"months_data = apple[\"month\"].count()\nmonths_data","4f1823eb":"plt.figure(figsize=(13.5, 9))\napple['Adj Close'].plot.hist()","5d0fa5d7":"online_rt = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/Online_Retail.csv', encoding = 'unicode_escape')\nonline_rt.head(10)","b4c12a6a":"top_country = online_rt.groupby(['Country'])['Quantity'].sum().sort_values(ascending = False)\ntop10_excpt_uk = top_country[top_country.index != 'United Kingdom'].head(10)\n\nplt.figure(figsize=(12, 5))\ntop10_excpt_uk.plot.bar()\nplt.xticks(rotation=25)\nplt.show()","1397a916":"online_rt1 = online_rt[online_rt.Quantity > 0].reset_index(drop = True)\n","0094ed98":"customers = online_rt1.groupby(['CustomerID','Country']).sum()\n# get the value of the index and put in the column Country\ncustomers['Country'] = customers.index.get_level_values(1)\n# top three countries\ntop_countries =  ['Netherlands', 'EIRE', 'Germany']\n\n# filter the dataframe to just select ones in the top_countries\ncustomers = customers[customers['Country'].isin(top_countries)]\n\ng = sns.FacetGrid(customers, col=\"Country\")\ng.map(plt.scatter, \"Quantity\", \"UnitPrice\", alpha=1)\ng.add_legend()\n","1f791073":"company_data = pd.read_csv('..\/input\/basic-data-manipulation-using-pandas-and-numpy\/FMCG_Company_Data_2019.csv')\ncompany_data.head()","1ee0d839":"company_data[['Month','Total_Revenue']].plot(kind = 'line',legend = False)\nplt.xlabel('Month')\nplt.ylabel('Total Revenue')\nplt.show()\n","02e0ea62":"plt.figure(figsize=(30,30))\nt1 = company_data[['Month','Total_Units']]\nt1.plot(kind = 'line',linestyle = 'dotted',color = 'red')\nplt.xlabel('Month')\nplt.ylabel('Total Units')\nplt.legend(loc = 'lower right')\nplt.show()\n","f2b84d7a":"total_sales = company_data[['Month','FaceCream','FaceWash','ToothPaste','Soap','Shampo','Moisturizer']]\nfig.set_figwidth(15)\nfig.set_figheight(5)\ntotal_sales.plot(kind = 'line',x='Month')\nplt.show()","f38c77c5":"s1 = company_data[['Month','Soap']].plot(kind = 'bar')\nplt.xlabel('Month')\nplt.ylabel('Soap')\nplt.savefig('soap_bar.png')\nplt.show()","49f9bcd5":"company_data[['Month','Soap', 'Shampo', 'ToothPaste']].plot(kind = 'bar',stacked = True)","d3ad1903":"plt.figure(figsize=(10,8))\ncompany_data.Total_Revenue.plot(kind = 'hist')","02e7fe6d":"#total_sales.drop('Month',axis=1,inplace=True)\nt_2019 = ((total_sales.sum()*100)\/company_data.Total_Units.sum())\nplt.figure(figsize=(8,8))\nt_2019.plot(kind='pie',autopct = '%.2f%%')\nplt.ylabel('')\nplt.show()","0059867f":"fig, ax = plt.subplots()\nfig.set_figwidth(15)\nfig.set_figheight(5)\nax.plot(company_data.Month, company_data.Soap,company_data.FaceWash)\nax.set_title('Line plots for Soap & Facewash of all months in a single plot using Subplot')\nplt.xlabel('Month')\nplt.ylabel('Total Sales')\nplt.show()","5ddae1d1":"company_data.Total_Profit.plot(kind = 'box')","5083d055":"### 6. Display the data type of each column","692ce408":"### 65. Calculate the mean windspeed for each month in the dataset.  \n#### Treat January 1961 and January 1962 as *different* months.\n#### (hint: first find a  way to create an identifier unique for each month.)","faebf599":"### 5. Add another column called place, and insert places (lakes, parks, hills, forest etc) of your choice.","e7452f48":"### 22. Print the Chipo Dataframe & info about data frame","91b61480":"### 56. Import the dataset wind.data and assign it to a variable called data and replace the first 3 columns by a proper date time index","7a1bdead":"## Section-7: The purpose of the below exercises is to understand how to perform date time operations","c75ecef2":"## Section-4: The purpose of the below exercises is to understand how to perform aggregations of data frame\n## The below exercises (28-33) required to use occupation.csv","204abe6f":"### 59. Compute how many values are missing for each location over the entire record.  \n#### They should be ignored in all calculations below. ","90ed459b":"### 3. Assign it to a object called pokemon and it should be a pandas DataFrame","a56c035e":"### 86. Create Stacked Bar Chart for Soap, Shampo, ToothPaste for each month\nThe bar chart should display the number of units sold per month for each product. Add a separate bar for each product in the same chart.","3fdca1f7":"### 48. Add the column owners to cars","4b3abed1":"### 75.  How many months in the data we have?","6c2908bc":"### 40. Create a function called majority that return a boolean value to a new column called legal_drinker","429997d6":"### 67. Import the file appl_1980_2014.csv and assign it to a variable called 'apple'","0ca214b2":"### 39. Did you notice the original dataframe is still lowercase? Why is that? Fix it and captalize Mjob and Fjob.","a94354d8":"### 38. Print the last elements of the data set. (Last few records)","91b6cd97":"### 17.  How many missing values do we have now?","87f864ea":"### 81. Import the dataset FMCG_Company_Data_2019.csv and assign it to a variable called company_data","9935d0a2":"### 16.  Set the rows corresponding to the random numbers to NaN in the column *alcohol*","36008178":"### 10. Assign the columns as below:\n\nThe attributes are (dontated by Riccardo Leardi, riclea '@' anchem.unige.it):  \n1) alcohol  \n2) malic_acid  \n3) alcalinity_of_ash  \n4) magnesium  \n5) flavanoids  \n6) proanthocyanins  \n7) hue ","6c51254a":"### 9. Delete the first, fourth, seventh, nineth, eleventh, thirteenth and fourteenth columns","da8b1835":"### 53. Convert the below Series to pandas datetime : \n\nDoB = pd.Series([\"07Sep59\",\"01Jan55\",\"15Dec47\",\"11Jul42\"])\n\nMake sure that the year is 19XX not 20XX","da12c1dc":"### 8. Import the dataset *wine.txt* from the folder and assign it to a object called wine\n\nPlease note that the original data text file doesn't contain any header. Please ensure that when you import the data, you should use a suitable argument so as to avoid data getting imported as header.","69901e89":"### 7. Display the info of dataframe","b953f2f8":"### 80. Create a scatterplot with the Quantity per UnitPrice by CustomerID for the top 3 Countries\nHint: First we need to find top-3 countries based on revenue, then create scater plot between Quantity and Unitprice for each country separately\n","f1703aa4":"### 24. Sort by the name of the item","4e041f1c":"### 68.  Check out the type of the columns","34e4677e":"### 61. Calculate the mean windspeeds over all the locations and all the times.\n#### A single number for the entire dataset.","7348a9b0":"### 55. Convert the below date to datetime and then change its display format using the .dt module\n\nDate = \"15Dec1989\"\n\nResult : \"Friday, 15 Dec 98\"","c9886d90":"### 47. There is a column missing, called owners. Create a random number Series from 15,000 to 73,000.","2751404f":"### 73. Get the last business day of each month","96b9cdd8":"### 72.  The index is from the most recent date. Sort the data so that the first entry is the oldest date.","ce8559ac":"### 57. Year 2061 is seemingly imporoper. Convert every year which are < 70 to 19XX instead of 20XX.","39056573":"### 26. How many times were a Veggie Salad Bowl ordered?","5e298fb9":"### 60. Compute how many non-missing values there are in total.","ec7d9b82":"###  28. Import the dataset occupation.csv and assign object as users","a6c99ac7":"\"\"\"\nYr Mo Dy   RPT   VAL   ROS   KIL   SHA   BIR   DUB   CLA   MUL   CLO   BEL   MAL\n61  1  1 15.04 14.96 13.17  9.29   NaN  9.87 13.67 10.25 10.83 12.58 18.50 15.04\n61  1  2 14.71   NaN 10.83  6.50 12.62  7.67 11.50 10.04  9.79  9.67 17.54 13.83\n61  1  3 18.50 16.88 12.33 10.13 11.17  6.17 11.25   NaN  8.50  7.67 12.75 12.71\n\"\"\"\nThe first three columns are year, month and day.  The remaining 12 columns are average windspeeds in knots at 12 locations in Ireland on that day. ","c9451211":"## The below exercises (77-80) required to use Online_Retail.csv file","a83f67f1":"### 77. Import the dataset from this Online_Retail.csv and assign it to a variable called online_rt","f642834b":"### 42. Import the datasets cars1.csv and cars2.csv and assign names as cars1 and cars2","34065787":"## The below exercises (67-70) required to use appl_1980_2014.csv  file","d525327e":"### 13. Fill the value of NaN with the number 10 in alcohol and 100 in magnesium","508170ae":"### 71.  Is there any duplicate dates?","8437f8ea":"## Section-8: The purpose of the below exercises is to understand how to create basic graphs","dfc6f696":"### 36. Create a lambda function that captalize strings (example: if we give at_home as input function and should give At_home as output.","0fcd1e22":"### 41. Multiply every number of the dataset by 10. ","b4a09370":"### 30. Discover the Male ratio per occupation and sort it from the most to the least.\n\nUse numpy.where() to encode gender column.","8e1c9430":"### 90. Create Box Plot for Total Profit variable","a74f16a5":"### 31. For each occupation, calculate the minimum and maximum ages","5f4c018b":"### 88. Calculate total sales data (quantity) for 2019 for each product and show it using a Pie chart. Understand percentage contribution from each product","d17e9293":"### 50. Write a Python program to convert a string to datetime.\nSample String : Jul 1 2014 2:43PM \n\nExpected Output : 2014-07-01 14:43:00","5e54eb01":"### 45. What is the number of observations in each dataset?","e39005c5":"### 21. How many products cost more than $10.00? \n\nUse `str` attribute to remove the $ sign and convert the column to proper numeric type data before filtering.\n","8c285510":"### 29. Discover what is the mean age per occupation","cec02481":"### 52. Write a Python program to convert unix timestamp string to readable date.\n\nSample Unix timestamp string : 1284105682\n    \nExpected Output : 2010-09-10 13:31:22","e22537f3":"### 76. Plot the 'Adj Close' value. Set the size of the figure to 13.5 x 9 inches","a57106fd":"   ### 43. Print the information to cars1 by applying below functions \n   hint: Use different functions\/methods like type(), head(), tail(), columns(), info(), dtypes(), index(), shape(), count(), size(), ndim(), axes(), describe(), memory_usage(), sort_values(), value_counts()\n   Also create profile report using pandas_profiling.Profile_Report","49553e3d":"### 46. Join cars1 and cars2 into a single DataFrame called cars","fef06e18":"### 82. Create line chart for Total Revenue of all months with following properties\n- X label name = Month\n- Y label name = Total Revenue","024d96d6":"### 34. Import the datasets *student-mat* and *student-por* and append them and assigned object as df","10fbba2e":"### 85. Create Bar Chart for soap of all months and Save the chart in folder","ef2dc7de":"### 27. How many times people orderd more than one Canned Soda?","2bf28a23":"### 11. Set the values of the first 3 values from alcohol column as NaN","c2603f0e":"### 58. Set the right dates as the index. Pay attention at the data type, it should be datetime64[ns].","a0f863c7":"### 18. Print only the non-null values in alcohol","9a6081a1":"### 33.  For each occupation present the percentage of women and men","17a89639":"## Section-6: The purpose of the below exercises is to understand how to perform simple joins\n## The below exercises (42-48) required to use cars1.csv and cars2.csv files ","47dc2b98":"### 32. For each combination of occupation and gender, calculate the mean age","c99338e8":"### 19. Delete the rows that contain missing values","0c775b1f":"## Section-2: The pupose of the below exercise (8-20) is to understand deleting data with pandas.\n## The below exercises required to use wine.data","a3944866":"### 63. Create a DataFrame called day_stats and calculate the min, max and mean windspeed and standard deviations of the windspeeds across all the locations at each day.\n\n#### A different set of numbers for each day.","af883fd8":"### 49. Write a Python script to display the\n- a. Current date and time\n- b. Current year\n- c. Month of year\n- d. Week number of the year\n- e. Weekday of the week\n- f. Day of year\n- g. Day of the month\n- h. Day of week","6815f848":"# Basic Exercises on Data Importing - Understanding - Manipulating - Analysis - Visualization","348e27be":"## The below exercises (81-90) required to use FMCG_Company_Data_2019.csv file","2e887963":"### 83. Create line chart for Total Units of all months with following properties\n- X label name = Month\n- Y label name = Total Units\n- Line Style dotted and Line-color should be red\n- Show legend at the lower right location.","c6f2c51d":"## Section-6: The purpose of the below exercises is to understand how to use lambda-apply-functions\n## The below exercises (34-41) required to use student-mat.csv and student-por.csv files ","66dbb656":"### 66. Calculate the min, max and mean windspeeds and standard deviations of the windspeeds across all locations for each week (assume that the first week starts on January 2 1961) for the first 52 weeks.","e0e861fa":"### 2. Run the below line of code to create a dictionary and this will be used for below exercises","d90f3424":"### 37. Capitalize both Mjob and Fjob variables using above lamdba function","b79a0870":"### 20.  Reset the index, so it starts with 0 again","004b4380":"### 87. Create Histogram for Total Revenue","bdb60c01":"### 1. Import the necessary libraries (pandas, numpy, datetime, re etc)","9b60eb30":"### 78. Create a barchart with the 10 countries that have the most 'Quantity' ordered except UK","5a957e9f":"### 23. What is the price of each item? \n- Delete the duplicates in item_name and quantity\n- Print a data frame with only two columns `item_name` and `item_price`\n- Sort the values from the most to less expensive","986806ad":"### 12. Now set the value of the rows 3 and 4 of magnesium as NaN","6829550f":"This time we are going to pull data directly from the internet.  \nImport the dataset directly from this link (https:\/\/raw.githubusercontent.com\/justmarkham\/DAT8\/master\/data\/chipotle.tsv) and create dataframe called chipo","290127bb":"### 25. What was the quantity of the most expensive item ordered?","c55ceff4":"### 62. Create a DataFrame called loc_stats and calculate the min, max and mean windspeeds and standard deviations of the windspeeds at each location over all the days \n\n#### A different set of numbers for each location.","0892c9a5":"### 35. For the purpose of this exercise slice the dataframe from 'school' until the 'guardian' column","4c87cf3e":"### 84. Read all product sales data (Facecream, FaceWash, Toothpaste, Soap, Shampo, Moisturizer) and show it  using a multiline plot\n- Display the number of units sold per month for each product using multiline plots. (i.e., Separate Plotline for each product ).","59fe5e04":"### 44. It seems our first dataset has some unnamed blank columns, fix cars1","fa4f5765":"### About wind.data:\n\nThe data have been modified to contain some missing values, identified by NaN.  \n\n1. The data in 'wind.data' has the following format:","f76b893d":"### 64. Find the average windspeed in January for each location.  \n#### Treat January 1961 and January 1962 both as January.","89efa9d6":"### 79.  Exclude negative Quatity entries","0bc1f934":"### 70.  Set the date as the index","5eca0465":"## The below exercises (56-66) required to use wind.data file ","ad3fca0f":"### 54. Write a Python program to get days between two dates. ","efdbed80":"### 69. Transform the Date column as a datetime type","9061326c":"### 51. Write a Python program to subtract five days from current date.\n\nCurrent Date : 2015-06-22\n\n5 days before Current Date : 2015-06-17","5666663f":"## Section-3: The pupose of the below exercise (21-27) is to understand ***filtering & sorting*** data from dataframe.\n## The below exercises required to use chipotle.tsv","74e60aa3":"### 4. If the DataFrame columns are in alphabetical order, change the order of the columns as name, type, hp, evolution, pokedex","824865d2":"### 89. Create line plots for Soap & Facewash of all months in a single plot using Subplot","2117460a":"### 15.  Create an array of 10 random numbers up until 10 and save it.","ff157de1":"### 14. Count the number of missing values in all columns.","d5e991ea":"### 74.  What is the difference in days between the first day and the oldest","1f4b51a2":"## Section-1: The pupose of the below exercises (1-7) is to create dictionary and convert into dataframes, how to diplay etc...\n## The below exercises required to create data "}}