{"cell_type":{"0232026f":"code","f5e3e4b9":"code","5ff17c5b":"code","b858ce3e":"code","7cdd4b9c":"code","f756ff7a":"code","ddbb7efc":"code","16546b53":"code","d4036619":"code","fe08250f":"code","6335fd73":"code","0dbf2385":"code","3b00514d":"code","07b92ae1":"code","db7bd5d7":"markdown","0f4e0144":"markdown","fe0d0421":"markdown","280332ec":"markdown"},"source":{"0232026f":"import covid19_tools as cv19\nimport pandas as pd\nimport re\nfrom IPython.core.display import display, HTML\n\nMETADATA_FILE = '..\/input\/CORD-19-research-challenge\/metadata.csv'\n\n# Load metadata\nmeta = cv19.load_metadata(METADATA_FILE)\n# Add tags\nmeta, covid19_counts = cv19.add_tag_covid19(meta)\nmeta, transmission_counts = cv19.count_and_tag(meta,\n                                               cv19.TRANSMISSION_SYNONYMS,\n                                               'transmission_generic')\nmeta, repr_counts = cv19.count_and_tag(meta,\n                                       cv19.REPR_SYNONYMS,\n                                       'transmission_repr')\nmeta, incubation_counts = cv19.count_and_tag(meta,\n                                             cv19.INCUBATION_SYNONYMS,\n                                             'transmission_incub')\nmeta, persistence_counts = cv19.count_and_tag(meta,\n                                              cv19.PERSISTENCE_SYNONYMS,\n                                              'transmission_persist')\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)","f5e3e4b9":"print('Loading full text for tag_disease_covid19')\nfull_text_repr = cv19.load_full_text(meta[meta.tag_disease_covid19 &\n                                          meta.tag_transmission_repr],\n                                     '..\/input\/CORD-19-research-challenge')","5ff17c5b":"table_repr = []\nrepr_strings = [r'\\br0\\b', r'$r_0$', r'\\br 0\\b',\n                'reproduction number', 'reproduction rate',\n                'reproductive number', 'rate of reproduction']\n\nfor i, record in enumerate(full_text_repr):\n    sha = record['paper_id']\n    meta_row = meta[meta.sha == sha]\n    temp_dict = {\n        'publication_date': meta_row.publish_time.values[0],\n        'authors': meta_row.authors_short.values[0],\n        'doi': meta_row.doi.values[0],\n        'title': meta_row.title.values[0],\n        'journal': meta_row.journal.values[0],\n        'key_passages': []\n    }\n\n    for item in record['body_text']:\n        if 'value of' in item['text'].lower() or 'estimated' in item['text'].lower():\n            sentences = item['text'].split('. ')\n            for s in sentences:\n                if len(re.findall('|'.join(repr_strings), s.lower())) > 0:\n                    if len(re.findall(r'\\d+\\.\\d+', s)) > 0:\n                        temp_dict['key_passages'].append(s)\n    if len(temp_dict['key_passages']) == 0:\n        temp_dict['key_passages'] = ['<i>Failed to extract figures - check manually.<\/i>']\n    table_repr.append(temp_dict)\n    \ntable_repr = pd.DataFrame(table_repr)\n\ntable_repr['key_passages'] = (table_repr\n                              .key_passages\n                              .apply(lambda x: '<br><br>'.join(x)))\ntable_repr['title_link'] = table_repr.apply(lambda x: f'<a href=\"{x.doi}\">{x.title}<\/a> ({x.journal})',\n                                                 axis=1)\n# table_repr.drop(['title', 'doi'], axis=1, inplace=True)","b858ce3e":"cv19.display_dataframe(table_repr[['publication_date',\n                                   'authors',\n                                   'title_link',\n                                   'key_passages']],\n                       'Table of Reproduction Rates (<i>R<\/i> \/ <i>R<sub>0<\/sub><\/i>)')","7cdd4b9c":"print('Loading full text for tag_transmission_incub')\nfull_text_incub = cv19.load_full_text(meta[meta.tag_disease_covid19 &\n                                           meta.tag_transmission_incub],\n                                      '..\/input\/CORD-19-research-challenge')","f756ff7a":"table_incub = []\ntime_strings = []\nfor unit in ['day', 'hour', 'hr']:\n    time_strings += [f'\\\\d+ {unit}', f'\\\\d+\\\\.\\\\d+ {unit}', f'{unit} \\\\d']\n\nfor i, record in enumerate(full_text_incub):\n    sha = record['paper_id']\n    meta_row = meta[meta.sha == sha]\n    temp_dict = {\n        'publication_date': meta_row.publish_time.values[0],\n        'authors': meta_row.authors_short.values[0],\n        'doi': meta_row.doi.values[0],\n        'title': meta_row.title.values[0],\n        'journal': meta_row.journal.values[0],\n        'key_passages': []\n    }\n\n    for item in record['body_text']:\n        if 'value of' in item['text'].lower() or 'estimated' in item['text'].lower():\n            sentences = item['text'].split('. ')\n            for s in sentences:\n                if len(re.findall('|'.join(cv19.INCUBATION_SYNONYMS), s.lower())) > 0:\n                    if len(re.findall('|'.join(time_strings), s.lower())) > 0:\n                        temp_dict['key_passages'].append(s)\n    if len(temp_dict['key_passages']) == 0:\n        temp_dict['key_passages'] = ['<i>Failed to extract figures - check manually.<\/i>']\n    table_incub.append(temp_dict)\n    \ntable_incub = pd.DataFrame(table_incub)\n\ntable_incub['key_passages'] = (table_incub\n                                 .key_passages\n                                 .apply(lambda x: '<br><br>'.join(x)))\ntable_incub['title_link'] = table_incub.apply(lambda x: f'<a href=\"{x.doi}\">{x.title}<\/a> ({x.journal})',\n                                                    axis=1)\n# table_incub.drop(['title', 'doi'], axis=1, inplace=True)","ddbb7efc":"cv19.display_dataframe(table_incub[['publication_date',\n                                    'authors',\n                                    'title_link',\n                                    'key_passages']],\n                       'Table of Incubation Periods')","16546b53":"print('Loading full text for tag_transmission_persist')\nfull_text_persist = cv19.load_full_text(meta[meta.tag_disease_covid19 &\n                                             meta.tag_transmission_persist],\n                                             '..\/input\/CORD-19-research-challenge')","d4036619":"table_persist = []\ntime_strings = []\nfor unit in ['day', 'minute', 'min', 'hour', 'hr', 'second', 'sec']:\n    time_strings += [f'\\\\d+ {unit}', f'\\\\d+\\\\.\\\\d+ {unit}', f'{unit} \\\\d']\n\nfor i, record in enumerate(full_text_persist):\n    sha = record['paper_id']\n    meta_row = meta[meta.sha == sha]\n    temp_dict = {\n        'publication_date': meta_row.publish_time.values[0],\n        'authors': meta_row.authors_short.values[0],\n        'doi': meta_row.doi.values[0],\n        'title': meta_row.title.values[0],\n        'journal': meta_row.journal.values[0],\n        'key_passages': []\n    }\n\n    for item in record['body_text']:\n        sentences = item['text'].split('. ')\n        for s in sentences:\n            if len(re.findall('|'.join(cv19.PERSISTENCE_SYNONYMS), s.lower())) > 0:\n#                 if len(re.findall('|'.join(time_strings), s.lower())) > 0:\n                temp_dict['key_passages'].append(s)\n    if len(temp_dict['key_passages']) == 0:\n        temp_dict['key_passages'] = ['<i>Failed to extract figures - check manually.<\/i>']\n    table_persist.append(temp_dict)\n    \ntable_persist = pd.DataFrame(table_persist)\n\ntable_persist['key_passages'] = (table_persist\n                                 .key_passages\n                                 .apply(lambda x: '<br><br>'.join(x)))\ntable_persist['title_link'] = table_persist.apply(lambda x: f'<a href=\"{x.doi}\">{x.title}<\/a> ({x.journal})',\n                                                    axis=1)\n# table_persist.drop(['title', 'doi'], axis=1, inplace=True)","fe08250f":"cv19.display_dataframe(table_persist.loc[table_persist.key_passages\n                                         != '<i>Failed to extract figures - check manually.<\/i>',\n                                     ['publication_date',\n                                      'authors',\n                                      'title_link',\n                                      'key_passages']],\n                       'Table of Persistence Findings')","6335fd73":"meta.to_csv('augmented_metadata_full.csv', index=False)","0dbf2385":"table_repr.to_csv('reproduction_table.csv', index=False)","3b00514d":"table_incub.to_csv('incubation_table.csv', index=False)","07b92ae1":"table_persist.to_csv('persistence_table.csv', index=False)","db7bd5d7":"# Reproduction","0f4e0144":"# Persistence","fe0d0421":"# COVID-19 Transmission, incubation & environmental stability\n\nThis is a summary Notebook of key findings for this Task. It builds upon the Notebook [Thematic tagging with Regular Expressions](https:\/\/www.kaggle.com\/ajrwhite\/covid-19-thematic-tagging-with-regular-expressions\/) and `covid19_tools` utility script.\n\n### Contents\n\n- [Reproduction rate ($R$ \/ $R_0$)](#Reproduction)\n- [Incubation period](#Incubation)\n- [Persistence \/ Environmental stability](#Persistence)","280332ec":"# Incubation"}}