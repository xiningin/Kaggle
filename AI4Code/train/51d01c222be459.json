{"cell_type":{"796f5bac":"code","af023d44":"code","674017db":"code","07b8aa7a":"code","d22492b7":"code","85a58dea":"code","3821818d":"code","6b717896":"code","0c30af37":"code","ae5fb33f":"code","50f17ab8":"code","28088f69":"code","cf8ba87f":"code","70cef8f3":"code","eccb6cf4":"code","643269f1":"code","017d9637":"code","e3af429d":"code","ab6f6cdf":"code","4c75724f":"code","e8706f34":"code","7d0dc014":"code","d21e8e80":"markdown","438a3295":"markdown","b42fbec9":"markdown","c76d6794":"markdown","316e5aba":"markdown","df887ab5":"markdown","83224ebf":"markdown","39f6a33b":"markdown","9a1a028b":"markdown","46441e88":"markdown","dfe59be0":"markdown","aa9a7f04":"markdown","8cab19b4":"markdown","3603dba5":"markdown","c0643808":"markdown"},"source":{"796f5bac":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score,GridSearchCV,RepeatedStratifiedKFold\nfrom sklearn.feature_selection import SelectKBest, f_classif","af023d44":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = train.append(test)","674017db":"df.head()","07b8aa7a":"print(train.shape)\nprint(test.shape)","d22492b7":"print(train.isnull().sum())\nprint()\nprint(test.isnull().sum())","85a58dea":"#0=Male; 1=Female\ndf['Sex'] = pd.get_dummies(df['Sex'])","3821818d":"df['Family_Size'] = df['Parch'] + df['SibSp']","6b717896":"#Finding Passenger's Title\ndf['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","0c30af37":"df['Title'] = df['Title'].replace(['Mlle', 'Ms'], 'Miss')\ndf['Title'] = df['Title'].replace(['Mme',\"Countess\",\"Lady\",\"Dona\"], 'Mrs')    \ndf['Title'] = df['Title'].replace(['Capt',\"Col\",\"Don\",\"Jonkheer\",\"Major\", \"Rev\",\"Sir\", \"Master\"],\"Other\")\n\ndf.loc[((df.Title == \"Dr\") & (df.Sex==1)), 'Title'] = \"Mrs\"\ndf.loc[((df.Title == \"Dr\") & (df.Sex==0)), 'Title'] = \"Mr\"\n\ntitles = list(df.Title.unique())\nfor title in titles:\n    age = df.groupby('Title')['Age'].median().loc[title]\n    df.loc[(df.Age.isnull()) & (df.Title == title),'Age'] = age","ae5fb33f":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \n                 \"Mrs\": 2, \"Other\":3}\n\ndf.replace({'Title': title_mapping}, inplace=True)","50f17ab8":"df[\"Age\"].fillna(df.Age.median(), inplace=True)\ndf['Fare'].fillna(value = df[df.Pclass==3]['Fare'].median(), inplace = True)","28088f69":"# Quantile-based discretization function\ndf['Fare_Bin'] = pd.qcut(df['Fare'], 5, labels=False)\ndf['Age_Bin'] = pd.qcut(df['Age'], 4, labels=False)","cf8ba87f":"# This feature is inspired by https:\/\/www.kaggle.com\/shunjiangxu\/blood-is-thicker-than-water-friendship-forever\ndf['Last_Name'] = df['Name'].apply(lambda x: str.split(x, \",\")[0])\ndf['Fare'].fillna(df['Fare'].mean(), inplace=True)\n\nDEFAULT_SURVIVAL_VALUE = 0.5\ndf['Family_Survival'] = DEFAULT_SURVIVAL_VALUE\n\nfor grp, grp_df in df[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId',\n                           'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):\n    \n    if (len(grp_df) != 1):\n        # A Family group is found.\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            if (smax == 1.0):\n                df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 0\n\nprint(\"Number of passengers with family survival information:\", \n      df.loc[df['Family_Survival']!=0.5].shape[0])","70cef8f3":"for _, grp_df in df.groupby('Ticket'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 0\n                        \nprint(\"Number of passenger with family\/group survival information: \" \n      +str(df[df['Family_Survival']!=0.5].shape[0]))\n\n# # Family_Survival in TRAIN_DF and TEST_DF:\ntrain['Family_Survival'] = df['Family_Survival'][:891]\ntest['Family_Survival'] = df['Family_Survival'][891:]","eccb6cf4":"features = ['Survived','Title', 'Pclass','Sex','Family_Size','Family_Survival','Fare_Bin','Age_Bin']\ndf = df[features]","643269f1":"train = df[:len(train)]\n\nx_train = train.drop('Survived', axis=1)\ny_train = train['Survived'].astype(int)\n\nx_test = df[len(train):].drop('Survived', axis=1)","017d9637":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nx_train = pd.DataFrame(scaler.fit_transform(x_train))\nx_test = pd.DataFrame(scaler.fit_transform(x_test))","e3af429d":"# Model\nmodel = KNeighborsClassifier()\n\n# KFold\nkfold = RepeatedStratifiedKFold(n_splits=10,n_repeats=3,random_state=420)","ab6f6cdf":"# GSCV\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    \"n_neighbors\":np.arange(2,20,2),\n    \"weights\":[\"uniform\",\"distance\"],\n    \"leaf_size\":np.arange(1,50,5)\n}\n\ngscv = GridSearchCV(model, cv=kfold, param_grid=param_grid, scoring='accuracy')\ngscv_result = gscv.fit(x_train,y_train)","4c75724f":"# GSCV Result\nbest_acc_score=gscv_result.best_score_\nbest_params=gscv_result.best_params_\n\nprint(\"Accuracy: {:6f}\".format(best_acc_score))\nprint(\"Params: {}\".format(best_params))","e8706f34":"# Model training and prediction\nresult = gscv.predict(x_test)","7d0dc014":"# Exporting result\ntest_new = pd.read_csv('..\/input\/titanic\/test.csv')\n\nsubmission = pd.DataFrame({'PassengerId': test_new['PassengerId'], 'Survived': result})\nsubmission.to_csv('submission.csv', index = False)\nsubmission.head()","d21e8e80":"<strong>Sex<\/strong>","438a3295":"## Importing Libraries","b42fbec9":"# \ud83d\udea2 Titanic : Feature Engineering & KNN [6%]\n\n- Feature Engineering\n- Handling Missing Value\n- Scaling\n- Modeling\n- Hyperparameter Tuning\n- Prediction","c76d6794":"## Feature Selection","316e5aba":"## Modeling","df887ab5":"**Fare & Age Binning**","83224ebf":"## Hyperparameter Tuning","39f6a33b":"## Making Prediction","9a1a028b":"**Title**","46441e88":"## Feature Engineering","dfe59be0":"There are some <strong>missing values<\/strong> in the train and test datasets","aa9a7f04":"**Family Size**","8cab19b4":"**Splitting Data Back into Train and Test**","3603dba5":"## Scaling","c0643808":"**Family Survival**"}}