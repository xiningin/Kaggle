{"cell_type":{"da89329c":"code","f5124b98":"code","f774b5f5":"code","b0d9878a":"code","d88e5231":"code","1a9e494e":"code","2033d421":"code","65e65dcc":"code","2fdde1b2":"code","97ab0b06":"code","af49c6a1":"code","848468b4":"code","3fe08829":"code","c39acad3":"code","0164e087":"code","53860809":"code","fab8f994":"code","13e0453e":"code","24f4329a":"code","be0cba50":"code","b85992c9":"code","e909b7b4":"code","a919f103":"code","15c00d17":"code","e5d6dea3":"code","a5c2a16d":"code","bf9234a4":"code","aa525ce7":"code","2f9d8a10":"code","c0a9746f":"code","768f2b16":"code","362214c7":"code","db05f9be":"code","9b79c4a0":"code","b4f7b6a5":"code","171a0c92":"code","7c325bda":"code","7d08d0ee":"code","fa0816d0":"code","b1a6d97a":"code","8296d52c":"code","6b65f60f":"code","6d0562dc":"code","d02c3d9e":"code","29e0cb43":"code","1c621257":"code","0ee1347f":"code","deb74e4a":"code","4faeb575":"code","9640c2a9":"code","68c636f5":"code","e6d71659":"code","43f0e67c":"code","b86d6196":"code","6703d596":"code","e5c45eea":"code","0502ccc7":"markdown","0bc0f0f1":"markdown","7b2b2fb2":"markdown","1c9b7a60":"markdown","ef65783d":"markdown","8161df84":"markdown","034efaa1":"markdown","fc1375e6":"markdown","3c95f6ff":"markdown","f1564350":"markdown","45bd237d":"markdown","6d7ee427":"markdown","7978ae47":"markdown","a5f6b84a":"markdown","f984d4ed":"markdown","fc4bcafd":"markdown","6510bcda":"markdown","bb7cfdd4":"markdown","4cb91323":"markdown","adf9df17":"markdown","2ebd015d":"markdown","3a1df9e3":"markdown","a475fb96":"markdown","a9a3bec1":"markdown","99a7ace2":"markdown","0090d1f7":"markdown","4adb149e":"markdown","2950f2cc":"markdown","fb481b82":"markdown","2f7a2ab5":"markdown","83c37b8a":"markdown","8995699c":"markdown","07d597ac":"markdown","a802dbce":"markdown","1e55ace8":"markdown","f55c5048":"markdown"},"source":{"da89329c":"import os\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.dates as mdates \nxformatter = mdates.DateFormatter('%H:%M') # for time axis plots\n\n# import plotly.offline as py\n# py.init_notebook_mode(connected=True)\n\n\nimport sklearn\nfrom scipy.optimize import curve_fit\n\nimport warnings\nwarnings.filterwarnings('ignore')","f5124b98":"# Import all available data \ndf_gen1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\ndf_gen2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\n\ndf_weather1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\ndf_weather2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")","f774b5f5":"df_gen1.info()","b0d9878a":"df_weather1.info()","d88e5231":"# quick stat overview of datasets\ndf_gen1.describe()","1a9e494e":"df_weather1.describe()","2033d421":"# Check missing values\ndf_gen1.isnull().sum().sort_values(ascending=False)\n","65e65dcc":"# Check missing values\ndf_gen1.isnull().sum().sort_values(ascending=False)","2fdde1b2":"df_gen1['PLANT_ID'].nunique()","97ab0b06":"df_weather1['PLANT_ID'].nunique()","af49c6a1":"df_gen1.SOURCE_KEY.value_counts()","848468b4":"df_gen1.SOURCE_KEY.value_counts().sum()","3fe08829":"print('There are {} different inverters. Number of measurements per inverter range from {} to {}.' .format(df_gen1.SOURCE_KEY.nunique(),df_gen1.SOURCE_KEY.value_counts().min(), df_gen1.SOURCE_KEY.value_counts().max() ))","c39acad3":"# adjust datetime format\ndf_gen1['DATE_TIME'] = pd.to_datetime(df_gen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_weather1['DATE_TIME'] = pd.to_datetime(df_weather1['DATE_TIME'],format = '%Y-%m-%d %H:%M:%S')\n\n# drop unnecessary columns and merge both dataframes along DATE_TIME\ndf_plant1 = pd.merge(df_gen1.drop(columns = ['PLANT_ID']), df_weather1.drop(columns = ['PLANT_ID', 'SOURCE_KEY']), on='DATE_TIME')","0164e087":"# add inverter number column to dataframe\nsensorkeys = df_plant1.SOURCE_KEY.unique().tolist() # unique sensor keys\nsensornumbers = list(range(1,len(sensorkeys)+1)) # sensor number\ndict_sensor = dict(zip(sensorkeys, sensornumbers)) # dictionary of sensor numbers and corresponding keys\n\n# add column\ndf_plant1['SENSOR_NUM'] = 0\nfor i in range(df_gen1.shape[0]):\n    df_plant1['SENSOR_NUM'][i] = dict_sensor[df_gen1[\"SOURCE_KEY\"][i]]\n\n# add Sensor Number as string\ndf_plant1[\"SENSOR_NAME\"] = df_plant1[\"SENSOR_NUM\"].apply(str) # add string column of sensor name","53860809":"# adding separate time and date columns\ndf_plant1[\"DATE\"] = pd.to_datetime(df_plant1[\"DATE_TIME\"]).dt.date # add new column with date\ndf_plant1[\"TIME\"] = pd.to_datetime(df_plant1[\"DATE_TIME\"]).dt.time # add new column with time\n\n# add hours and minutes for ml models\ndf_plant1['HOURS'] = pd.to_datetime(df_plant1['TIME'],format='%H:%M:%S').dt.hour\ndf_plant1['MINUTES'] = pd.to_datetime(df_plant1['TIME'],format='%H:%M:%S').dt.minute\ndf_plant1['MINUTES_PASS'] = df_plant1['MINUTES'] + df_plant1['HOURS']*60\n\n# add date as string column\ndf_plant1[\"DATE_STR\"] = df_plant1[\"DATE\"].astype(str) # add column with date as string","fab8f994":"df_plant1.head()","13e0453e":"cols_corr = [\"DC_POWER\", \"AC_POWER\", \"DAILY_YIELD\", \"TOTAL_YIELD\", \"AMBIENT_TEMPERATURE\", \"MODULE_TEMPERATURE\", \"IRRADIATION\", \"SENSOR_NUM\", \"HOURS\", \"MINUTES\", \"MINUTES_PASS\"]\ncorrMatrix = df_plant1[cols_corr].corr()\nplt.figure(figsize=(15,5))\nfig_corr = sns.heatmap(corrMatrix,cmap=\"YlGnBu\", annot=True)\nplt.show()","24f4329a":"sns.set(style='whitegrid', palette=\"deep\", font_scale=1.1, rc={\"figure.figsize\": [15, 5]})\ncols_pair = [\"DC_POWER\", \"AC_POWER\", \"DAILY_YIELD\", \"TOTAL_YIELD\", \"AMBIENT_TEMPERATURE\", \"MODULE_TEMPERATURE\", \"IRRADIATION\", \"SENSOR_NUM\", \"MINUTES_PASS\"]\nfig_pair = sns.pairplot(df_plant1[cols_pair])\nplt.show()","be0cba50":"cols_out = [\"DC_POWER\", \"AC_POWER\", \"IRRADIATION\", \"SOURCE_KEY\"]\nsns.pairplot(df_plant1[cols_out], hue=\"SOURCE_KEY\", diag_kind=\"hist\", palette=\"tab10\")\nplt.show()","b85992c9":"plt.figure(figsize=(10,5))\nfig_power = sns.scatterplot(data=df_plant1, x=\"DC_POWER\", y=\"AC_POWER\", hue=\"SOURCE_KEY\", palette=\"tab10\")\nfig_power.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=1)\nplt.show()","e909b7b4":"plt.figure(figsize=(10,5))\nfig_temp = sns.scatterplot(data=df_plant1, x=\"MODULE_TEMPERATURE\", y=\"DC_POWER\", hue=\"SOURCE_KEY\", palette=\"tab10\")\nfig_temp.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=1)\nplt.show()","a919f103":"plt.figure(figsize=(10,5))\nfig_irr = sns.scatterplot(data=df_plant1, x=\"IRRADIATION\", y=\"DC_POWER\", hue=\"SOURCE_KEY\", palette=\"tab10\")\nfig_irr.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=1)\nplt.show()","15c00d17":"fig = px.scatter(df_plant1, x=\"TIME\", y=\"DC_POWER\", title=\"DC Power: Daily Distribution\", color = \"DATE_STR\")\nfig.update_traces(marker=dict(size=5, opacity=0.7), selector=dict(mode='markers'))\nfig.show()","e5d6dea3":"fig = px.scatter(df_plant1, x=\"TIME\", y=\"IRRADIATION\", title=\"Irradiation: Daily Distribution\", color = \"DATE_STR\")\nfig.update_traces(marker=dict(size=5, opacity=0.7), selector=dict(mode='markers'))\nfig.show()","a5c2a16d":"df_plant1.MODULE_TEMPERATURE.describe()","bf9234a4":"df_plant1.AMBIENT_TEMPERATURE.describe()","aa525ce7":"date=[\"2020-05-16\"]\nplt.plot(df_plant1[df_plant1[\"DATE_STR\"].isin(date)].DATE_TIME, df_plant1[df_plant1[\"DATE_STR\"].isin(date)].MODULE_TEMPERATURE, label=\"Module\")\nplt.plot(df_plant1[df_plant1[\"DATE_STR\"].isin(date)].DATE_TIME, df_plant1[df_plant1[\"DATE_STR\"].isin(date)].AMBIENT_TEMPERATURE, label=\"Ambient\")\nplt.gcf().axes[0].xaxis.set_major_formatter(xformatter) # set xaxis format\nplt.legend()\nplt.title(\"Daily Module and Ambient Temperature: {}\" .format(date[0]))\nplt.xlabel(\"Time\")\nplt.ylabel(\"Temperature (C\u00b0)\")\nplt.show()","2f9d8a10":"plt.plot(df_plant1.DATE_TIME, df_plant1.MODULE_TEMPERATURE, label=\"Module\")\nplt.plot(df_plant1.DATE_TIME, df_plant1.AMBIENT_TEMPERATURE, label=\"Ambient\")\nplt.title(\"Long-term Module and Ambient Temperature:\")\nplt.legend()\nplt.xlabel(\"Time\")\nplt.ylabel(\"Temperature (C\u00b0)\")\nplt.show()","c0a9746f":"# Function to check if time is during daytime operation\ndef time_in_range(start, end, x):\n    \"\"\"Return true if x is in the range [start, end]\"\"\"\n    if start <= end:\n        return start <= x <= end\n    else:\n        return start <= x or x <= end\n    \n# set normal daytime operation range\nstart=datetime.time(6,30,0) # sunrise\nend=datetime.time(17,30,0) # sunset\n\n# Create new column to check proper operation\n# Return \"Normal\" if operation is normal and \"Fault\" if operation is faulty\ndf_plant1[\"STATUS\"] = 0\nfor index in df_plant1.index:\n    if  time_in_range(start, end, df_plant1[\"TIME\"][index]) and df_plant1[\"DC_POWER\"][index] == 0:\n        df_plant1[\"STATUS\"][index] = \"Fault\"\n    else:\n        df_plant1[\"STATUS\"][index] = \"Normal\"","768f2b16":"fig = px.scatter(df_plant1, x=\"IRRADIATION\", y=\"DC_POWER\", title=\"Fault Identification\", color=\"STATUS\", labels={\"DC_POWER\":\"DC Power (kW)\", \"IRRADIATION\":\"Irradiation\"})\nfig.update_traces(marker=dict(size=3, opacity=0.7), selector=dict(mode='marker'))\nfig.show()","362214c7":"df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"DATE\"].value_counts()","db05f9be":"fig=px.bar(df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"DATE\"].value_counts(), title=\"Fault Events: Rule-based\", labels={\"value\":\"Faults\", \"index\":\"Date\", \"SENSOR_NAME\":\"Inverter\"})\nfig.update(layout_showlegend=False)","9b79c4a0":"# Date & Inverter Time series\n# fig10 = px.scatter(df_plant1, x=\"DATE_TIME\", y=\"STATUS\", title=\"Fault Identification: Events\", color=\"SOURCE_KEY\")\n# fig10.update_traces(marker=dict(size=3, opacity=0.7), selector=dict(mode='marker'))\n# fig10.show()","b4f7b6a5":"# uncomment to see faulty days\n# fig = px.scatter(df_plant1[df_plant1.DATE_STR==\"2020-06-07\"], x=\"DATE_TIME\", y=\"DC_POWER\", title=\"2020-06-07\", color=\"SENSOR_NAME\", labels={\"DC_POWER\":\"DC Power\", \"DATE_TIME\":\"Time\"})\n# fig.update_traces(marker=dict(size=3, opacity=0.7), selector=dict(mode='marker'))\n# fig.show()","171a0c92":"# fig = px.scatter(df_plant1[df_plant1.DATE_STR==\"2020-06-14\"], x=\"DATE_TIME\", y=\"DC_POWER\", title=\"2020-06-07\", color=\"SENSOR_NAME\", labels={\"DC_POWER\":\"DC Power\", \"DATE_TIME\":\"Time\"})\n# fig.update_traces(marker=dict(size=3, opacity=0.7), selector=dict(mode='marker'))\n# fig.show()","7c325bda":"df_plant1.STATUS.value_counts()","7d08d0ee":"print(\"There are {} records of faulty operation!\" .format(df_plant1.STATUS.value_counts().Fault))","fa0816d0":"df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts()","b1a6d97a":"fig=px.bar(df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts(), title=\"Inverter Faults: Rule-based\", labels={\"value\":\"Faults\", \"index\":\"Inverter\", \"SENSOR_NAME\":\"Inverter\"})\nfig.update(layout_showlegend=False)","8296d52c":"print(\"The most faults were recorded on {} and {}.\" .format(df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"DATE\"].value_counts().index[0], df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"DATE\"].value_counts().index[1]))\nprint(\"Inverter {} and {} had the most failures.\" .format(df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts().index[0],df_plant1[df_plant1[\"STATUS\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts().index[1]))","6b65f60f":"from sklearn.linear_model import LinearRegression\n\n# Model\nreg = LinearRegression()\n\n# choose training data\ntrain_dates = [\"2020-05-16\", \"2020-05-17\",\"2020-05-18\" ,\"2020-05-19\", \"2020-05-20\", \"2020-05-21\"]\ndf_train = df_plant1[df_plant1[\"DATE_STR\"].isin(train_dates)]\n\n#fit & predict\nreg.fit(df_train[[\"IRRADIATION\"]], df_train.DC_POWER)\nprediction = reg.predict(df_plant1[[\"IRRADIATION\"]])\n\n# save prediction, residual, and absolute residual\ndf_train[\"Prediction\"] = reg.predict(df_train[[\"IRRADIATION\"]])\ndf_train[\"Residual\"] = df_train[\"Prediction\"] - df_train[\"DC_POWER\"]\ndf_plant1[\"Prediction\"] = reg.predict(df_plant1[[\"IRRADIATION\"]])\ndf_plant1[\"Residual\"] = df_plant1[\"Prediction\"] - df_plant1[\"DC_POWER\"]\ndf_plant1[\"Residual_abs\"] = df_plant1[\"Residual\"].abs()","6d0562dc":"fig = px.scatter(df_plant1, x=\"DATE_TIME\", y=\"DC_POWER\", title=\"Fault Identification: Linear model (Zoomed in)\", color=\"Residual_abs\", labels={\"DC_POWER\":\"DC Power (kW)\", \"DATE_TIME\":\"Date Time\", \"Residual_abs\":\"Residual\"}, range_x=[datetime.date(2020, 6, 1), datetime.date(2020, 6, 17)])\nfig.update_traces(marker=dict(size=3, opacity=0.7), selector=dict(mode='marker'))\nfig.show()","d02c3d9e":"# choose data\nday = \"2020-06-07\"\ninverter1 = \"2\"\ninverter2 = \"22\"\ndf_pred = df_plant1[(df_plant1[\"DATE_STR\"] == day)].copy()\n\nfig, axes = plt.subplots(1, 2)\n\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter1].DC_POWER, label=\"Measured DC\", color=\"b\", ax=axes[0])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter1].Residual, label=\"Residual\", color=\"g\", ax=axes[0])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter1].Prediction, label=\"Predicted DC\", color=\"r\", ax=axes[0])\n\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter2].DC_POWER, label=\"Measured DC\", color=\"b\", ax=axes[1])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter2].Residual, label=\"Residual\", color=\"g\", ax=axes[1])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter2].Prediction, label=\"Predicted DC\", color=\"r\", ax=axes[1])\n\nplt.gcf().axes[0].xaxis.set_major_formatter(xformatter) # set xaxis format\nplt.gcf().axes[1].xaxis.set_major_formatter(xformatter) # set xaxis format\naxes[0].set_xlabel(\"Time\")\naxes[1].set_xlabel(\"Time\")\naxes[0].set_ylabel(\"DC Power (kW)\")\naxes[1].set_ylabel(\"\")\naxes[1].set_ylim(-2500, 14000)\naxes[0].set_title(\"Example: Normal Operation\")\naxes[1].set_title(\"Example: Fault Detected\")\nplt.show()","29e0cb43":"inverter2= \"22\"\ndf_pred2 = df_plant1[df_plant1[\"SENSOR_NAME\"]==inverter2].copy()\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.Prediction, label=\"Predicted DC\", color=\"r\")\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.DC_POWER, label=\"Measured DC\", color=\"b\")\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.Residual-5000, label=\"Residual (Offset)\", color=\"g\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Power (kW)\")\nplt.title(\"Fault Detection: Inverter 22\")\nplt.show()","1c621257":"def func(X, a, b, c, d):\n    '''Nonlinear function to predict DC power output from Irradiation and Temperature.'''\n    x,y = X\n    x=x*1000\n    y=y*1000\n    return a*x*(1-b*(y+x\/800*(c-20)-25)-d*np.log(x+1e-10))\n\n# fit function\np0 = [1.,0.,-1.e4,-1.e-1] # starting values\npopt, pcov = curve_fit(func, (df_train.IRRADIATION, df_train.MODULE_TEMPERATURE), df_train.DC_POWER, p0, maxfev=5000)\nsigma_abcd = np.sqrt(np.diagonal(pcov))\n\n# predict & save\ndf_train[\"Prediction_NL\"] = func((df_train.IRRADIATION, df_train.MODULE_TEMPERATURE), *popt)\ndf_train[\"Residual_NL\"] = df_train[\"Prediction_NL\"] - df_train[\"DC_POWER\"]\n\ndf_plant1[\"Prediction_NL\"] = func((df_plant1.IRRADIATION, df_plant1.MODULE_TEMPERATURE), *popt)\ndf_plant1[\"Residual_NL\"] = df_plant1[\"Prediction_NL\"] - df_plant1[\"DC_POWER\"]","0ee1347f":"plt.scatter(df_plant1.IRRADIATION, df_plant1.DC_POWER, label=\"Measured\")\nplt.scatter(df_plant1.IRRADIATION, df_plant1.Prediction_NL, color=\"r\", label=\"NL Prediction\")\nplt.legend()\nplt.xlabel(\"Irradiation (kW\/m\u00b2)\")\nplt.ylabel(\"DC Power (kW)\")\nplt.title(\"Nonlinear Model Prediction\")\nplt.show()","deb74e4a":"# choose data\nday = \"2020-06-07\"\ninverter1 = \"2\"\ninverter2 = \"22\"\ndf_pred = df_plant1[(df_plant1[\"DATE_STR\"] == day)].copy()\n\nfig, axes = plt.subplots(1, 2)\n\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter1].DC_POWER, label=\"Measured DC\", color=\"b\", ax=axes[0])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter1].Residual_NL, label=\"NL Residual\", color=\"g\", ax=axes[0])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter1].Prediction_NL, label=\"NL Predicted DC\", color=\"r\", ax=axes[0])\n\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter2].DC_POWER, label=\"Measured DC\", color=\"b\", ax=axes[1])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter2].Residual_NL, label=\"NL Residual\", color=\"g\", ax=axes[1])\nsns.lineplot(df_pred.DATE_TIME,df_pred[df_pred[\"SENSOR_NAME\"] == inverter2].Prediction_NL, label=\"NL Predicted DC\", color=\"r\", ax=axes[1])\n\nplt.gcf().axes[0].xaxis.set_major_formatter(xformatter) # set xaxis format\nplt.gcf().axes[1].xaxis.set_major_formatter(xformatter) # set xaxis format\naxes[0].set_xlabel(\"Time\")\naxes[1].set_xlabel(\"Time\")\naxes[0].set_ylabel(\"DC Power (kW)\")\naxes[1].set_ylabel(\"\")\naxes[0].set_ylim(-3000, 14000)\naxes[1].set_ylim(-3000, 14000)\naxes[0].set_title(\"Example: Normal Operation\")\naxes[1].set_title(\"Example: Fault Detected\")\nplt.show()","4faeb575":"inverter2= \"1\"\ndf_pred2 = df_plant1[df_plant1[\"SENSOR_NAME\"]==inverter2].copy()\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.Prediction_NL, label=\"NL Prediction\", color=\"r\")\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.DC_POWER, label=\"Measured DC\", color=\"b\")\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.Residual_NL-5000, label=\"NL Residual (Offset)\", color=\"g\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Power (kW)\")\nplt.title(\"Fault Detection Example: Inverter {}\".format(inverter2))\nplt.show()","9640c2a9":"inverter2= \"22\"\ndf_pred2 = df_plant1[df_plant1[\"SENSOR_NAME\"]==inverter2].copy()\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.Prediction_NL, label=\"NL Prediction\", color=\"r\")\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.DC_POWER, label=\"Measured DC\", color=\"b\")\nsns.lineplot(df_pred2.DATE_TIME,df_pred2.Residual_NL-5000, label=\"NL Residual (Offset)\", color=\"g\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Power (kW)\")\nplt.title(\"Fault Detection Example: Inverter {}\".format(inverter2))\nplt.show()","68c636f5":"# plot model comparison residual\nplt.figure(figsize=(5,5))\nsns.scatterplot(df_train.Prediction, df_train.Residual, color=\"b\", label=\"LI Residual\")\nsns.scatterplot(df_train.Prediction_NL, df_train.Residual_NL, color=\"r\", label=\"NL Residual\")\naxes = plt.gca()\nplt.ylabel(\"Residual\")\nplt.xlabel(\"Predicted DC Power\")\nplt.title(\"Model Comparison\")\nplt.show()","e6d71659":"# set confidence range for residual for fault\nlimit_fault=4000\n\n# Create new column to check proper operation\n# Return \"Normal\" if operation is normal and \"Fault\" if operation is faulty\ndf_plant1[\"STATUS_NL\"] = 0\nfor index in df_plant1.index:\n    if  df_plant1[\"Residual_NL\"][index] > limit_fault:\n        df_plant1[\"STATUS_NL\"][index] = \"Fault\"  \n    else:\n        df_plant1[\"STATUS_NL\"][index] = \"Normal\"","43f0e67c":"fig=px.bar(df_plant1[df_plant1[\"STATUS_NL\"]== \"Fault\"][\"DATE\"].value_counts(), title=\"Faults: Nonlinear Model\", labels={\"value\":\"Faults\", \"index\":\"Date\", \"SENSOR_NAME\":\"Inverter\"}, )\nfig.update(layout_showlegend=False)","b86d6196":"fig=px.bar(df_plant1[df_plant1[\"STATUS_NL\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts(), title=\"Underperformance & Faults: Nonlinear Model\", labels={\"value\":\"Faults\", \"index\":\"Inverter\", \"SENSOR_NAME\":\"Inverter\"})\nfig.update(layout_showlegend=False)","6703d596":"fig = px.scatter(df_plant1, x=\"DATE_TIME\", y=\"DC_POWER\", title=\"Underperformance & Faults: Nonlinear Model (Zoomed in)\", color=\"STATUS_NL\", labels={\"DC_POWER\":\"DC Power (kW)\", \"DATE_TIME\":\"Date Time\", \"STATUS_NL\":\"Status\"},range_x=[datetime.date(2020, 6, 1), datetime.date(2020, 6, 17)])\nfig.update_traces(marker=dict(size=3, opacity=0.7), selector=dict(mode='marker'))\nfig.show()","e5c45eea":"print(\"The most anomalies were recorded on {} and {}.\" .format(df_plant1[df_plant1[\"STATUS_NL\"]== \"Fault\"][\"DATE\"].value_counts().index[0], df_plant1[df_plant1[\"STATUS_NL\"]== \"Fault\"][\"DATE\"].value_counts().index[1]))\nprint(\"Inverter {} and {} had the most events of failure\/underperformance.\" .format(df_plant1[df_plant1[\"STATUS_NL\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts().index[0],df_plant1[df_plant1[\"STATUS_NL\"]== \"Fault\"][\"SOURCE_KEY\"].value_counts().index[1]))","0502ccc7":"The first figure shows multiple occasions where there was no power generated during daytime. The second figure shows that the irradiation level never dropped low enough during the day to explain this loss of power. This indicates equipment failure!\n\nFYI: These plot are interactive! To choose any specific days, double click on the day in the legend on the right.","0bc0f0f1":"## 3.1 Data Distribution and Correlations","7b2b2fb2":"## 3.4 Power vs Irradiation\nThis indicates how well our photovoltaic panel lines can convert sunlight to DC power. Any outliers in this solar energy to electricity coversion indicate malfunctioning photovoltaic panel lines.","1c9b7a60":"<img src=\"https:\/\/i.imgur.com\/6L1XKFq.jpeg\">\n<h1><center>Solar Power Plant - Interactive Exploratory Data Analysis & Condition Monitoring<center><h1>\n","ef65783d":"# 4.2.4 NL Fault Detection\n\nLet's now use the irradiance and temperature data to predict the expected DC power with the nonlinear model. This allows us to identify addtional anomalies by comparing the measured DC power with the prediction. The additional anomalies indicate equipment underperformance or need for maintenance.\n","8161df84":"## 3.5 Temperature","034efaa1":"### 4.1.2 Number of recorded faults","fc1375e6":"### 4.1.3 Inverters with faults","3c95f6ff":"## 2.2 Preprocess and merge datasets\n\nWe want to merge both datasets. To do this we adjust the DATE_TIME formats, drop unnecessary columns and merge along DATE_TIME. In addition, we are going to add separate date and time columns as well as name our inverters from 1 to 22.","f1564350":"## 4.2 Fault Detection with Regression Models\nWhile the simple rule-based approach in the previous chapter was already successful at detecting severe failure, finding less obvious anomalies and more subtle indicators for equipment failure (or cleaning\/maintenance need) require more effort.","45bd237d":"### 4.2.1 Nonlinear Model\n\nAccording to [Hooda et al. (2018)](https:\/\/www.researchgate.net\/publication\/309399733_PV_Power_Predictors_for_Condition_Monitoring) the generated power of a photovoltaic cell can be modeled by the nonlinear equation\n\\begin{equation}\n    P(t) = a E(t) \\left(1-b (T(t) + \\frac{E(t)}{800} (c-20) - 25) - d \\ln(E(t))\\right)\n\\end{equation}\nwith irradiance $E(t)$, Temperature $T(t)$ and coefficients $a,b,c,d$.","6d7ee427":"### 4.1.4 Summary","7978ae47":"Let's look at the column descriptions:\n- **DATE_TIME:** Date and time for each observation. Observations recorded at 15 minute intervals.\n- **PLANT_ID:**  this will be common for the entire file\n- **SOURCE_KEY:** Source key in this file stands for the inverter id.\n- **DC_POWER:** Amount of DC power generated by the inverter (source_key) in this 15 minute interval. Units - kW.\n- **AC_POWER:** Amount of AC power generated by the inverter (source_key) in this 15 minute interval. Units - kW.\n- **TOTAL_YIELD:** This is the total yield for the inverter till that point in time.","a5f6b84a":"Ambient temperatures range from 20 to 35\u00b0C, modules reach temperatures from 18 to 65 \u00b0C. Modules reach significantly higher temperatures than their ambient air during daytime. Ambient temperature is lagging behind daily module cooldown. This means the modules cool down quicker than their environment.","f984d4ed":"<a id=\"section-five\"><\/a>\n# 5. Summary\n\n* **EDA:** Noticed some potential issues with the data: DAILY_YIELD is decreasing on some days even though this should not be possible by definition. Inverters have different number of data points\n\n* **Challenge 1:** Even though this notebook did not focus on forecasting, the power-irradiance models may be helpful in combination with external data from local weather forecasts to predict the generated power for the next couple days.\n\n* **Challenge 2&3:** Successfully identified **events of equipment failure and underperformance** with a rule-based method and linear\/nonlinear modeling of the relationship between irradiance, temperature and DC power. This approach can be useful for real-time condition monitoring and fault detection.\n\n### Thank you for reading and please upvote this notebook if you found it useful!","fc4bcafd":"<a id=\"section-three\"><\/a>\n# 3. Data Exploration & Failure Detection\n\nNow that we have a merged dataset we can take a closer look at data distributions and correlations.","6510bcda":"As expected, we only have data from one plant in this database. How many inverters are in the database and how many measurements are there per inverter?","bb7cfdd4":"<a id=\"section-four\"><\/a>\n# 4. Condition Monitoring\n\nIn section 3 we found evidence that point towards equipment failure. Now we are going to build models to detect equipment failure automatically.","4cb91323":"<a id=\"section-one\"><\/a>\n# 1. Introduction & first ideas:\n\nThis notebook is going to focus on exploratory data analysis and condition monitoring\/fault detection (challenges 2&3). However, the employed methods may be useful in combination with data from local weather forecasts for accurate short-term forecasting of power generation (challenge 1).\n\n\n## 1.1 Solar Power Plants\n\nIn general, solar power plants convert energy from sunlight to electricity. The two most prominent technologies are\n- **concentrated solar power**, where focused sunlight is used to heat up an absorber which is then employed to power a steam engine, and \n- **photovoltaic cells**, where the photovoltaic effect (photon absorption leads to injection of excited electrons into the conduction band) is employed to generate direct current (DC) power which is then converted into alternating current (AC) power by the use of inverters.\n\nThe data seems to be from solar power plants that use potovoltaic cell technology.\n\n## 1.2 Dataset Description\nAccording to the dataset description, the data contains two sets of information about two solar power plants located in India, that were acquired over a period of 34 days:\n- power generation data  (measured at the inverter, each inverter corresponding to multiple lines of solar panels)\n- weather data (measured with a single line of sensors optimally placed at the plant)\n\n## 1.3 The challenges\n1. Can we **predict the power generation for next couple of days**? - this allows for better grid management\n2. Can we **identify the need for panel cleaning\/maintenance**?\n3. Can we **identify faulty or suboptimally performing equipment**?\n\n## 1.4 First thoughts and ideas\n- Challenge 1: This challenge belongs to the category of **TIME SERIES FORECASTING**. Three options come to mind:\n\n    1. Use available time series of AC or DC power data\n    2. Use available time series from weather sensors \n    3. Use local weather forecast (external data) and combine with power data\n    \n    Option 1 does not take weather data into account and Option 2 might have difficulties with predicting power drop due to cloud formations since the provided weather data is relatively limited. Option 3 might be more promising since weather forecast stations have more data available (e.g. cloud forecasting). Then the task shifts to predicting power output from forecasted sunlight duration and irradiance.\n- Challenge 2 & 3: These challenges belong the category of **CONDITION MONITORING**, **Anomaly Detection**, and **Fault Detection** and seem identical at first glance. However, performance drop due to need for cleaning\/maintenance may be slower and less severe compared with performance drop due to faulty equipment. Therefore, we should be able distinguish between the two.\n","adf9df17":"## 4.1 Rule-based Fault Detection\nDuring the data exploration we found a simple way to identify faulty equipment: If there is no power measured at the inverter during normal daytime operation, we can assume\/identify equipment failure. Let's create a new column (\"STATUS\") that identifies faulty operation:","2ebd015d":"## 3.2 AC Power vs DC Power\n\nThis indicates how well our inverter is converting DC power to AC Power. Any outliers in this power conversion process can be used to detect faulty inverters.","3a1df9e3":"Most of the outliers seem to come from a small group of inverters!","a475fb96":"It looks like we have no missing values. We can use the PLANT_ID column to check if our data only contains information of one power plant:","a9a3bec1":"From the last two figures we already can gain a lot of insight:\n\n* high correlation between DC Power and AC Power\n* high correlation between Power and Irradiation\n* correlation between DC Power, AC Power and Module Temperature and Ambient Temperature\n* correlation between Daily Yield and Ambient Temperature\n\nand that there seem to be outliers in\n\n* AC+DC Power - Irradiation\n* DC Power - AC Power (very few)\n\nWe can use these outliers for equipment fault and need for maintenance detection!\n\n* Outliers in Power-Irradiation indicate failure of the panel lines. If there is enough sunlight but no power is generated, this points to faulty photovoltaic cells.\n* Outliers in DC-AC conversion indicate failure at the inverter. If there is DC power delivered but less AC power generated than expected the inverter may be malfunctioning.\n\nIf we take a close look at TOTAL_YIELD vs SENSOR_NUM, we see that there are two groups of inverters. One group starts with a higher total yield than the other one. This is most likely because this group was installed earlier than the other group.\n\n\n**NOTE:** There are multiple entries where DAILY_YIELD decreased during a day, which should not be possible according to the definition of this column. **Since Daily_YIELD is calculated from measured DC_POWER, there seems to be an issue with how this data was generated.**","99a7ace2":"### 4.2.3 Model Comparison\n\nTo compare the two models we can take a look at their respective residuals. The nonlinear model seems to perform slightly better than the linear model, especially at times of high irradiance.","0090d1f7":"<a id=\"section-two\"><\/a>\n# 2. Import & Preprocessing\n\nLet's have a first look at the data. For the sake of simplicity we are only looking at data of plant 1 (power generation and weather). Data of power plant 2 can then be explored in a similar manner.","4adb149e":"DATE_TIME and PLANT_ID are identical with the description above. Other than that:\n- **SOURCE_KEY:** Stands for the sensor panel id. This will be common for the entire file because there's only one sensor panel for the plant.\n- **AMBIENT_TEMPERATURE:** This is the ambient temperature at the plant. *Note: After comparing this data with weather data in Gandikotta (Andhra), I assume the correct unit for this data is $\u00b0C$*\n- **MODULE_TEMPERATURE:** There's a module (solar panel) attached to the sensor panel. This is the temperature reading for that module. *Note: After comparing this data with other publications, I assume the correct unit for this data is $\u00b0C$*\n- **IRRADATION:** Amount of irradiation for the 15 minute interval. *Note: After comparing this data with other publications, I assume the correct unit for this data is $kW\/m^2$*","2950f2cc":"## 3.3 Power vs Temperature\n\nFrom our pairplots we can clearly see some outliers in the DC&AC Power vs Module Temperature. Other Temperatures do not show any obvious outliers.","fb481b82":"There are two days with significantly lower temperature (\"bad weather\") on. Such events may be difficult to forecast without access to more weather data (air pressure, wind, humidity, cloud formation etc.) and advanced weather forecasting models.","2f7a2ab5":"Our data clearly shows events where some inverters received no DC power even though there was more than enough sunlight to generate power. We clearly have some equipment malfunction in our data!\n\nTo illustrate this, we can take a closer look at the daily distribution of the generated power and the measured irradiation:","83c37b8a":"# Table of Contents\n* [1. Introduction](#section-one)\n* [2. Preprocessing](#section-two)\n* [3. Data Exploration](#section-three)\n* [4. Condition Monitoring](#section-four)\n* [5. Conclusion](#section-five)","8995699c":"Let's look a bit more closer at the pairplots where we identified outliers and see if these are spread out evenly across all inverters or if we can identify specific inverters.","07d597ac":"As we can see there are 22 different inverters with between 3104 and 3155 measurements. This difference may cause an issue with prediction models and should be taken into account. Since one entry corresponds to a 15 min measurement, the maximum difference of 51 entries corresponds to a difference of almost 13 hours.","a802dbce":"### 4.2.1 Linear Model\n\nA first attempt at predicting DC power from irradiance by assuming a linear relationship\n\n\\begin{equation}\n    P(t) = a + b \\cdot E(t)\n\\end{equation}\n\nwith the generated DC power $P(t)$, irradiance $E(t)$ and coefficients $a ,b$.\n\nNote: PV module panels can reach up to 65\u00b0C. The efficiency of PV cells is usually lower at high temperatures. This leads to a non-linear relationship between irradiance and generated DC power. We are going to model this nonlinearity in the next section.","1e55ace8":"### 4.1.1 Days with faults","f55c5048":"## 2.1 Check for issues"}}