{"cell_type":{"6e8bee74":"code","9035fe22":"code","ac69572f":"code","a09db6cf":"code","c7f18461":"code","e25b28a4":"code","f30645ec":"code","92f4e94a":"code","062cf3ee":"code","1a7bb2a4":"code","e9bdb8fd":"code","348664ca":"code","52f0d484":"code","d9fb30d4":"code","a7fdf823":"code","b5d9fde5":"code","26d98efb":"code","812a78c9":"code","23387ffe":"code","5b66ea74":"code","9d9a5b09":"code","d3737a66":"code","1029c667":"code","17130977":"code","327c344b":"code","afc23485":"code","ad262523":"code","c005f4fc":"code","7278bcd2":"code","deaedff6":"code","a281cbcd":"code","2c008879":"code","73a0184a":"code","a5259e4d":"code","6075e286":"markdown","0053a706":"markdown","4b80c7e0":"markdown","1b6add14":"markdown","fd4f0182":"markdown","2b6a8396":"markdown","e0d74218":"markdown","8d7d602d":"markdown","fa30e157":"markdown","5b6b0655":"markdown","ddb0a772":"markdown","71cf7bf7":"markdown","d0d3bda5":"markdown","d7bc384e":"markdown","bc90aba6":"markdown","dde17b85":"markdown","41ad03e5":"markdown","1b7bec64":"markdown","44140bee":"markdown","6f3b7f15":"markdown","3778f6d2":"markdown","334b484c":"markdown","8433c021":"markdown","954b5077":"markdown","e66f4306":"markdown","6de45cec":"markdown","a2677996":"markdown","ed180ac5":"markdown","91823e02":"markdown","26d000f0":"markdown","f61b3f4e":"markdown","c0ed3b79":"markdown","1a72e92f":"markdown","c4385feb":"markdown"},"source":{"6e8bee74":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport missingno as mn\n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","9035fe22":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ac69572f":"df = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')\ndf.head()","a09db6cf":"df.describe()","c7f18461":"mn.matrix(df)","e25b28a4":"games = df['Name'].value_counts()\npublisher = df['Publisher'].value_counts()\nplatforms = df['Platform'].value_counts()\ngenres = df['Genre'].value_counts()\nminyear = df['Year'].min()\nmaxyear = df['Year'].max()\n\nfig = go.Figure()\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = len(games),\n    title = {'text': \"Games\",'font': {'color': 'gold','size':20}},\n    number={'font':{'color': 'gold','size':40}},\n    domain = {'row': 0, 'column': 0}\n))\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = len(publisher),\n    title = {'text': \"Publishers\",'font': {'color': 'green','size':20}},\n    number={'font':{'color': 'green','size':40}},\n    domain = {'row': 0, 'column': 1}\n))\nfig.add_trace(go.Indicator(\n    mode = 'number',\n    value = len(platforms),\n    title = {'text':'Platforms', 'font':{'color':'blue','size':20}},\n    number = {'font':{'color':'green', 'size':40}},\n    domain = {'row':0, 'column': 2}\n))\nfig.add_trace(go.Indicator(\n    mode = 'number',\n    value = len(genres),\n    title = {'text':'Genres', 'font':{'color':'blue','size':20}},\n    number = {'font':{'color':'green', 'size':40}},\n    domain = {'row':0, 'column': 3}\n))\nfig.add_trace(go.Indicator(\n    mode = 'number',\n    value = 8920,\n    title = {'text':'Gobal Sales ($millions)', 'font':{'color':'blue','size':20}},\n    number = {'font':{'color':'green', 'size':40}},\n    domain = {'row':1, 'column': 0}\n))\nfig.add_trace(go.Indicator(\n    mode = 'number',\n    value = minyear,\n    title = {'text':'From Year', 'font':{'color':'blue','size':20}},\n    number = {'font':{'color':'green', 'size':40}},\n    domain = {'row':1, 'column': 1}\n))\nfig.add_trace(go.Indicator(\n    mode = 'number',\n    value = maxyear,\n    title = {'text':'To Year', 'font':{'color':'blue','size':20}},\n    number = {'font':{'color':'green', 'size':40}},\n    domain = {'row':1, 'column': 2}\n))\nfig.update_layout(\n    grid = {'rows': 2, 'columns': 4, 'pattern': \"independent\"})\nfig.show()","f30645ec":"x = np.arange(1980, 2019, 1)\n\ndfYearspivot = df.pivot_table(index=['Year'], aggfunc='count')\ny = dfYearspivot['Rank']\n\ndf_Yearsb = df.groupby(by=\"Year\").sum()\ny2 = df_Yearsb['Global_Sales']\n\nfig = plt.figure(figsize=(15,7))\nax11 = fig.add_subplot(111)\nax11.plot(x, y, label = 'Count')\n\nax12 = ax11.twinx()\nax12.plot(x, y2, '--', label = 'Sales')\n\nax11.legend(loc=2, fontsize = 14)\nax12.legend(loc=0, fontsize = 14)\nax11.grid()\nax11.set_xlabel(\"Year\", fontsize= 14)\nax11.set_ylabel(\"Count\", fontsize = 14)\nax12.set_ylabel('Sales ($millions)', fontsize = 14)\nax12.set_title('Games Count & Sales per Year', fontsize = 20)","92f4e94a":"Games_table = pd.pivot_table(df, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head()\nax12 = Games_table.plot(kind='barh', figsize=(15,8), fontsize=14)\nax12.set_title('Top 5 Game Sales ($millions)', fontdict={'fontsize':20})\nax12.set_xlabel('Sales ($millions)', fontsize=14)","062cf3ee":"df_Platform = df['Platform'].value_counts()\nplt.figure(figsize = (16,5))\nax20 = df_Platform.head(5).plot(kind='barh', fontsize=14)\nax20.set_ylabel('Platforms', fontsize=14)\nax20.set_xlabel('Frequency', fontsize=14)\nax20.set_title('Top 5 Platforms', fontsize=20)","1a7bb2a4":"df_Genre = df['Genre'].value_counts()\nplt.figure(figsize = (16,5))\nax21 = df_Genre.plot(kind='bar', fontsize=12, color='green')\nax21.set_ylabel('Frequency', fontsize=14)\nax21.set_xlabel('Genre', fontsize=14)\nax21.set_title('Genre Frequency', fontsize=20)","e9bdb8fd":"\npublisher_count= df.groupby(['Publisher'])['Name'].count().reset_index().sort_values(by = 'Name', ascending = False)\npublisher_count\n\nax22 = px.bar(publisher_count, x = publisher_count['Publisher'], y = publisher_count['Name'])\nax22.update_layout(title='Publishers Count',xaxis_title=\"Publisher\",yaxis_title=\"Game Count\")\nax22.update_xaxes(rangeslider_visible=True)\nax22.update_layout(\n    autosize=False,\n    width=2000,\n    height=700)\nax22.show()","348664ca":"df['Publisher'].value_counts()","52f0d484":"df_Publishers = pd.pivot_table(df, values='Global_Sales', index=['Publisher'], aggfunc = 'sum').sort_values(by = 'Global_Sales', ascending = False)\nfig = px.pie(df_Publishers, values='Global_Sales', names=df_Publishers.index, title='Publishers Global Market Share (%)')\nfig.update_traces(textposition='inside', textinfo='percent+label', textfont_size=20)\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=1000)","d9fb30d4":"df_Publisher_sorted = pd.pivot_table(df, values='Global_Sales', index=['Publisher'], aggfunc = 'sum').sort_values(by = 'Global_Sales', ascending = False)\nax2 = df_Publisher_sorted.head(10).plot.bar(y = 'Global_Sales', align='center', alpha=0.5, figsize = (15, 8), fontsize=14)\nax2.set_title('Global Sales for Top 10 Publishers ($millions)', fontsize=20)\nax2.set_ylabel('$millions', fontsize=14)\nax2.grid()","a7fdf823":"df_Publisher_sortedNA = pd.pivot_table(df, values='NA_Sales', index=['Publisher']).sort_values(by = 'NA_Sales', ascending = False).head(10)\ndf_Publisher_sortedJP = pd.pivot_table(df, values='JP_Sales', index=['Publisher']).sort_values(by = 'JP_Sales', ascending = False).head(10)\ndf_Publisher_sortedEU = pd.pivot_table(df, values='EU_Sales', index=['Publisher']).sort_values(by = 'EU_Sales', ascending = False).head(10)\ndf_Publisher_sortedOS = pd.pivot_table(df, values='Other_Sales', index=['Publisher']).sort_values(by = 'Other_Sales', ascending = False).head(10)\n# Initialize figure\nfig = make_subplots(\n    rows=2, cols=2, subplot_titles=(\"North America Sales (millions $)\", \"Europe Sales (millions $)\", \"Japan Sales (millions $)\",\"Other Sales (millions $)\"),\n    column_widths=[0.5, 0.5],\n    row_heights=[0.5, 0.5],\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [ {\"type\": \"bar\"}, {\"type\": \"bar\"}]])\n# Add Traces\n\nfig.add_trace(\n    go.Bar(y=df_Publisher_sortedNA['NA_Sales'],\n           x=df_Publisher_sortedNA.index,\n           name=\"North America\",\n          marker={'color': df_Publisher_sortedNA['NA_Sales'],'colorscale': 'Portland'})\n         ,row=1, col=1)\nfig.add_trace(\n    go.Bar(y=df_Publisher_sortedEU['EU_Sales'],\n           x=df_Publisher_sortedEU.index,\n           name=\"Europe\",\n           marker={'color': df_Publisher_sortedEU['EU_Sales'],'colorscale': 'Portland'},\n           ),row=1, col=2)\nfig.add_trace(\n    go.Bar(y=df_Publisher_sortedJP['JP_Sales'],\n           x=df_Publisher_sortedJP.index,\n           name=\"Japan\",\n           marker={'color': df_Publisher_sortedJP['JP_Sales'],'colorscale': 'Portland'},\n           ),row=2, col=1)\nfig.add_trace(\n    go.Bar(y=df_Publisher_sortedOS['Other_Sales'],\n           x=df_Publisher_sorted.index,\n           name=\"Other\",\n           marker={'color': df_Publisher_sortedOS['Other_Sales'],'colorscale': 'Portland'},\n           ),row=2, col=2)\nfig.update_layout(height=700, showlegend=False)\nfig.update_layout(title=\"Top 10 Publishers per Region\", title_font_size=20)\nfig.show()","b5d9fde5":"df_PublisherGenre2 = df.drop(['Rank', 'Year', 'EU_Sales', 'NA_Sales', 'JP_Sales', 'Other_Sales','Name', 'Platform'], axis=1)\n\n\ndf_PublisherGenre3 = df_PublisherGenre2.groupby(by=\"Publisher\").sum().sort_values(by = 'Global_Sales', ascending = False).head(10)\n\ndf_PublisherGenre4 = df_PublisherGenre2.loc[df_PublisherGenre2['Publisher'].isin(['Nintendo','Electronic Arts', 'Activision',\n                                                                                  'Sony Computer Entertainment', 'Ubisoft', 'Take-Two Interactive',\n                                                                                  'THQ', 'Konami Digital Entertainment', 'Sega', 'Namco Bandai Games'])]\n\ndf_PublisherGenre = pd.pivot_table(df_PublisherGenre4, values='Global_Sales', index=['Genre'], columns='Publisher', aggfunc='sum', fill_value=0)\ndf_PublisherGenre\nplt.figure(figsize = (16,5))\nax9 = sns.heatmap(df_PublisherGenre)\nax9.set_title('Sales by Genre and Publisher ($millions)', fontsize=20)","26d98efb":"df['Genre'].value_counts()","812a78c9":"df_GenreName= df.pivot_table(values='Name', columns='Genre', aggfunc='count')\ndf_GenreName_transposed = df_GenreName.T\ndf_GenreName_transposed\nax7 = df_GenreName_transposed.plot.pie(y = 'Name', labels = df_GenreName_transposed.index, autopct='%1.1f%%', figsize = (12,12),textprops={'fontsize': 14})\nax7.get_legend().remove()\nax7.set_title('Game Count per Genre (%)', fontsize=20)","23387ffe":"df_RegionGenre = pd.pivot_table(df, values=('NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'), index=['Genre'], aggfunc='sum').sort_values(by = 'NA_Sales', ascending = True)\nax6 = df_RegionGenre.plot.barh(stacked=True, figsize=(18, 7), fontsize=14)\nax6.set_title('Genre Sales per Region ($millions)', fontsize=20)\nax6.set_xlabel('Sales ($millions)', fontsize = 14)","5b66ea74":"df_PublisherGenre = pd.pivot_table(df_PublisherGenre4, values='Global_Sales', index=['Genre'], columns='Publisher', aggfunc='sum', fill_value=0)\ndf_PublisherGenre\nplt.figure(figsize = (16,5))\nax9 = sns.heatmap(df_PublisherGenre)\nax9.set_title('Sales by Genre and Publisher ($millions)', fontsize=20)","9d9a5b09":"df_PlatformGenre = pd.pivot_table(df, index='Platform', values='Global_Sales', columns = 'Genre', aggfunc='sum', fill_value=0)\nplt.figure(figsize = (20,10))\nax23 = sns.heatmap(df_PlatformGenre)\nax23.set_title('Sales by Platform and Genre ($millions)', fontsize=20)","d3737a66":"df_Action = df.loc[df['Genre'] == 'Action']\ndf_Sports = df.loc[df['Genre'] == 'Sports']\ndf_Misc = df.loc[df['Genre'] == 'Misc']\ndf_Shooter = df.loc[df['Genre'] == 'Shooter']\ndf_Adventure = df.loc[df['Genre'] == 'Adventure']\ndf_Racing = df.loc[df['Genre'] == 'Racing']\ndf_Platform = df.loc[df['Genre'] == 'Platform']\ndf_Simulation = df.loc[df['Genre'] == 'Simulation']\ndf_Fighting = df.loc[df['Genre'] == 'Fighting']\ndf_Strategy = df.loc[df['Genre'] == 'Strategy']\ndf_Puzzle = df.loc[df['Genre'] == 'Puzzle']\n\nAction_table = pd.pivot_table(df_Action, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nSports_table = pd.pivot_table(df_Sports, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nMisc_table = pd.pivot_table(df_Misc, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nShooter_table = pd.pivot_table(df_Shooter, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nAdventure_table = pd.pivot_table(df_Adventure, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nRacing_table = pd.pivot_table(df_Racing, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nPlatform_table = pd.pivot_table(df_Platform, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nSimulation_table = pd.pivot_table(df_Simulation, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nFighting_table = pd.pivot_table(df_Fighting, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nStrategy_table = pd.pivot_table(df_Strategy, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\nPuzzle_table = pd.pivot_table(df_Puzzle, values='Global_Sales', index=['Name']).sort_values(by = 'Global_Sales', ascending = False).head(5)\n# Initialize figure\nfig = make_subplots(\n    rows=4, cols=3, subplot_titles=('Action', 'Sports', 'Misc', 'Shooter', 'Adventure', 'Racing', 'Platform', 'Simulation', 'Fighting', 'Strategy', 'Puzzle'),\n    column_widths=[2, 2, 2],\n    row_heights=[2, 2, 2, 2],\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [ {\"type\": \"bar\"}, {\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [ {\"type\": \"bar\"}, {\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [ {\"type\": \"bar\"}, {\"type\": \"bar\"}, {\"type\": \"bar\"}]])\n# Add Traces\n\nfig.add_trace(\n    go.Bar(y=Action_table['Global_Sales'],\n           x=Action_table.index,\n           name=\"Action\",\n          marker={'color': Action_table['Global_Sales'],'colorscale': 'Portland'})\n         ,row=1, col=1)\nfig.add_trace(\n    go.Bar(y=Sports_table['Global_Sales'],\n           x=Sports_table.index,\n           name=\"Sports\",\n           marker={'color': Sports_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=1, col=2)\nfig.add_trace(\n    go.Bar(y=Misc_table['Global_Sales'],\n           x=Misc_table.index,\n           name=\"Misc\",\n           marker={'color': Misc_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=1, col=3)\nfig.add_trace(\n    go.Bar(y=Shooter_table['Global_Sales'],\n           x=Shooter_table.index,\n           name=\"Shooter\",\n           marker={'color': Shooter_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=2, col=1)\nfig.add_trace(\n    go.Bar(y=Adventure_table['Global_Sales'],\n           x=Adventure_table.index,\n           name=\"Adventure\",\n          marker={'color': Adventure_table['Global_Sales'],'colorscale': 'Portland'})\n         ,row=2, col=2)\nfig.add_trace(\n    go.Bar(y=Racing_table['Global_Sales'],\n           x=Racing_table.index,\n           name=\"Racing\",\n           marker={'color': Racing_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=2, col=3)\nfig.add_trace(\n    go.Bar(y=Platform_table['Global_Sales'],\n           x=Platform_table.index,\n           name=\"Platform\",\n           marker={'color': Platform_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=3, col=1)\nfig.add_trace(\n    go.Bar(y=Simulation_table['Global_Sales'],\n           x=Simulation_table.index,\n           name=\"Simulation\",\n           marker={'color': Simulation_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=3, col=2)\nfig.add_trace(\n    go.Bar(y=Fighting_table['Global_Sales'],\n           x=Fighting_table.index,\n           name=\"Fighting\",\n           marker={'color': Fighting_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=3, col=3)\nfig.add_trace(\n    go.Bar(y=Strategy_table['Global_Sales'],\n           x=Strategy_table.index,\n           name=\"Strategy\",\n           marker={'color': Strategy_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=4, col=1)\nfig.add_trace(\n    go.Bar(y=Puzzle_table['Global_Sales'],\n           x=Puzzle_table.index,\n           name=\"Puzzle\",\n           marker={'color': Puzzle_table['Global_Sales'],'colorscale': 'Portland'},\n           ),row=4, col=2)\nfig.update_layout(height=1500, showlegend=False)\nfig.update_layout(title=\"Top 5 Games per Genre ($millions)\", title_font_size=20)\n                  \nfig.show()","1029c667":"df['Platform'].value_counts()","17130977":"df_Platform = df.groupby(by=\"Platform\").sum()\ndf_Platform_sorted = df_Platform.sort_values(by = 'Global_Sales', ascending = False)\ndf_Platform_sorted\nfrom wordcloud import WordCloud, ImageColorGenerator\n\ntext = list(set(df['Platform']))\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size=50, \n                      max_words=100,\n                      background_color=\"black\").generate(str(text))\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.title('Top Platforms', fontsize=20)\nplt.axis(\"off\")\nplt.show()","327c344b":"df_Platform = df['Platform'].value_counts()\nax10 = df_Platform.plot(kind='pie', figsize=(17,10),  autopct='%1.1f%%', textprops={'fontsize': 12})\nax10.set_title('Game Count per Platform (%)', fontdict={'fontsize':20})","afc23485":"df_RegionPlatform = pd.pivot_table(df, values=('NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales'), index=['Platform'],aggfunc=np.sum).sort_values(by = 'NA_Sales', ascending = False).head(15)\nEU_normal = df_RegionPlatform['EU_Sales'] \/ df_RegionPlatform['Global_Sales'].max()\nJP_normal = df_RegionPlatform['JP_Sales'] \/ df_RegionPlatform['Global_Sales'].max()\nNA_normal = df_RegionPlatform['NA_Sales'] \/ df_RegionPlatform['Global_Sales'].max()\nOS_normal = df_RegionPlatform['Other_Sales'] \/ df_RegionPlatform['Global_Sales'].max()\nplt.figure(figsize=(15, 10))\n\nplt.scatter(df_RegionPlatform.index, df_RegionPlatform['EU_Sales'], \n                  color='darkblue', \n                 alpha=0.5,\n                 s = EU_normal * 5000)\nplt.scatter(df_RegionPlatform.index, df_RegionPlatform['JP_Sales'], \n                  color='red', \n                 alpha=0.5,\n                 s = JP_normal * 5000)\nplt.scatter(df_RegionPlatform.index, df_RegionPlatform['NA_Sales'], \n                  color='green', \n                 alpha=0.5,\n                 s = NA_normal * 5000)\nplt.scatter(df_RegionPlatform.index, df_RegionPlatform['Other_Sales'], \n                  color='orange', \n                 alpha=0.5,\n                 s = OS_normal * 5000)\nplt.xlabel(\"Platform\", size=14)\nplt.ylabel(\"Sales ($millions)\", size=14)\nplt.title('Platform Sales per Region ($millions)', fontsize= 20)\nplt.text(12, 600, 'Green - North America')\nplt.text(12, 550, 'Blue - Europe')\nplt.text(12, 500, 'Red - Japan')\nplt.text(12, 450, 'Orange - Other')\nplt.show","ad262523":"xaction=df[df.Genre==\"Action\"]\nxsports=df[df.Genre==\"Sports\"]\nxmisc=df[df.Genre==\"Misc\"]\nxrole=df[df.Genre==\"Role-Playing\"]\nxshooter=df[df.Genre==\"Shooter\"]\nxadventure=df[df.Genre==\"Adventure\"]\nxrace=df[df.Genre==\"Racing\"]\nxplatform=df[df.Genre==\"Platform\"]\nxsimulation=df[df.Genre==\"Simulation\"]\nxfight=df[df.Genre==\"Fighting\"]\nxstrategy=df[df.Genre==\"Strategy\"]\nxpuzzle=df[df.Genre=='Puzzle']\n\ntrace1 = go.Bar(x=xaction.groupby('Platform')['Global_Sales'].sum().index, y=xaction.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75,name='Action', marker=dict(color='green'))\ntrace2 = go.Bar(x=xsports.groupby('Platform')['Global_Sales'].sum().index, y=xsports.groupby('Platform')['Global_Sales'].sum().values,  opacity=0.5, name='Sports', marker=dict(color='blue'))\ntrace3 = go.Bar(x=xmisc.groupby('Platform')['Global_Sales'].sum().index, y=xmisc.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Misc', marker=dict(color='yellow'))\ntrace4 = go.Bar(x=xrole.groupby('Platform')['Global_Sales'].sum().index, y=xrole.groupby('Platform')['Global_Sales'].sum().values, opacity=0.6, name='Role-Playing', marker=dict(color='red'))\ntrace5 = go.Bar(x=xadventure.groupby('Platform')['Global_Sales'].sum().index, y=xadventure.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Adventure', marker=dict(color='white'))\ntrace6 = go.Bar(x=xrace.groupby('Platform')['Global_Sales'].sum().index, y=xrace.groupby('Platform')['Global_Sales'].sum().values, opacity=0.5, name='Racing', marker=dict(color='black'))\ntrace7 = go.Bar(x=xplatform.groupby('Platform')['Global_Sales'].sum().index, y=xplatform.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Platform', marker=dict(color='orange'))\ntrace8 = go.Bar(x=xsimulation.groupby('Platform')['Global_Sales'].sum().index, y=xsimulation.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Simulation', marker=dict(color='pink'))\ntrace9 = go.Bar(x=xfight.groupby('Platform')['Global_Sales'].sum().index, y=xfight.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Fight', marker=dict(color='purple'))\ntrace10 = go.Bar(x=xstrategy.groupby('Platform')['Global_Sales'].sum().index, y=xstrategy.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Strategy', marker=dict(color='grey'))\ntrace11 = go.Bar(x=xpuzzle.groupby('Platform')['Global_Sales'].sum().index, y=xpuzzle.groupby('Platform')['Global_Sales'].sum().values, opacity=0.75, name='Puzzle', marker=dict(color='rgb(119,172,238)'))\ntrace12 = go.Bar(x=xshooter.groupby('Platform')['Global_Sales'].sum().index, y=xshooter.groupby('Platform')['Global_Sales'].sum().values, opacity=0.5, name='Shooter', marker=dict(color='rgb(20,100,80)'))\n\n\ndata = [trace1, trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11, trace12]\nlayout = go.Layout(barmode='stack', title='Global Sales According to Platform and Genre', xaxis=dict(title='Platform'), yaxis=dict( title='Global Sales ($millions)'),paper_bgcolor='beige',plot_bgcolor='beige')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c005f4fc":"xDS=df[df.Platform==\"DS\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPS2=df[df.Platform==\"PS2\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPS3=df[df.Platform==\"PS3\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxWii=df[df.Platform==\"Wii\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxX360=df[df.Platform==\"X360\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPSP=df[df.Platform==\"PSP\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPS=df[df.Platform==\"PS\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPC=df[df.Platform==\"PC\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxXB=df[df.Platform==\"XB\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxGBA=df[df.Platform==\"GBA\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxGC=df[df.Platform==\"GC\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nx3DS=df[df.Platform==\"3DS\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPSV=df[df.Platform==\"PSV\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxPS4=df[df.Platform==\"PS4\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxN64=df[df.Platform==\"N64\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxSNES=df[df.Platform==\"SNES\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxXOne=df[df.Platform==\"XOne\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxSAT=df[df.Platform==\"SAT\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxWiiU=df[df.Platform==\"WiiU\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nx2600=df[df.Platform==\"2600\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxGB=df[df.Platform==\"GB\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxNES=df[df.Platform==\"NES\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxDC=df[df.Platform==\"DC\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxGEN=df[df.Platform==\"GEN\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxNG=df[df.Platform==\"NG\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\nxWS=df[df.Platform==\"WS\"].sort_values(by = 'Global_Sales', ascending = False).head(5)\n\ntrace1 = go.Scatter(x=xDS.Platform, y=xDS.Global_Sales, mode='markers', marker_size=xDS.Global_Sales, name='DS', text = xDS.Name)\ntrace2 = go.Scatter(x=xPS2.Platform, y=xPS2.Global_Sales, mode='markers',  marker_size=xPS2.Global_Sales, name='PS2', text = xPS2.Name)\ntrace3 = go.Scatter(x=xPS3.Platform, y=xPS3.Global_Sales, mode='markers',  marker_size=xPS3.Global_Sales, name='PS3', text = xPS3.Name)\ntrace4 = go.Scatter(x=xWii.Platform, y=xWii.Global_Sales, mode='markers',  marker_size=xWii.Global_Sales, name='Wii', text = xWii.Name)\ntrace5 = go.Scatter(x=xX360.Platform, y=xX360.Global_Sales, mode='markers', marker_size=xX360.Global_Sales,name='X360', text = xX360.Name)\ntrace6 = go.Scatter(x=xPSP.Platform, y=xPSP.Global_Sales, mode='markers', marker_size=xPSP.Global_Sales, name='PSP', text = xPSP.Name)\ntrace7 = go.Scatter(x=xPS.Platform, y=xPS.Global_Sales, mode='markers', marker_size=xPS.Global_Sales, name='PS', text = xPS.Name)\ntrace8 = go.Scatter(x=xPC.Platform, y=xPC.Global_Sales, mode='markers', marker_size=xPC.Global_Sales, name='PC', text = xPC.Name)\ntrace9 = go.Scatter(x=xXB.Platform, y=xXB.Global_Sales, mode='markers', marker_size=xXB.Global_Sales, name='xXB', text = xXB.Name)\ntrace10 = go.Scatter(x=xGBA.Platform, y=xGBA.Global_Sales, mode='markers', marker_size=xGBA.Global_Sales, name='GBA', text = xGBA.Name)\ntrace11 = go.Scatter(x=xGC.Platform, y=xGC.Global_Sales, mode='markers', marker_size=xGC.Global_Sales, name='GC', text = xGC.Name)\ntrace12 = go.Scatter(x=x3DS.Platform, y=x3DS.Global_Sales, mode='markers', marker_size=x3DS.Global_Sales, name='3DS', text = x3DS.Name)\ntrace13 = go.Scatter(x=xPSV.Platform, y=xPSV.Global_Sales, mode='markers', marker_size=xPSV.Global_Sales, name='PSV', text = xPSV.Name)\ntrace14 = go.Scatter(x=xPS4.Platform, y=xPS4.Global_Sales, mode='markers', marker_size=xPS4.Global_Sales, name='PS4', text = xPS4.Name)\ntrace15 = go.Scatter(x=xN64.Platform, y=xN64.Global_Sales, mode='markers', marker_size=xN64.Global_Sales, name='N64', text = xN64.Name)\ntrace16 = go.Scatter(x=xSNES.Platform, y=xSNES.Global_Sales, mode='markers', marker_size=xSNES.Global_Sales, name='SNES', text = xSNES.Name)\ntrace17 = go.Scatter(x=xXOne.Platform, y=xXOne.Global_Sales, mode='markers', marker_size=xXOne.Global_Sales, name='XOne', text = xXOne.Name)\ntrace18 = go.Scatter(x=xSAT.Platform, y=xSAT.Global_Sales, mode='markers', marker_size=xSAT.Global_Sales, name='SAT', text = xSAT.Name)\ntrace19 = go.Scatter(x=xWiiU.Platform, y=xWiiU.Global_Sales, mode='markers', marker_size=xWiiU.Global_Sales, name='WiiU', text = xWiiU.Name)\ntrace20 = go.Scatter(x=x2600.Platform, y=x2600.Global_Sales, mode='markers', marker_size=x2600.Global_Sales, name='2600', text = x2600.Name)\ntrace21 = go.Scatter(x=xGB.Platform, y=xGB.Global_Sales, mode='markers', marker_size=xGB.Global_Sales, name='GB', text = xGB.Name)\ntrace22 = go.Scatter(x=xNES.Platform, y=xNES.Global_Sales, mode='markers', marker_size=xNES.Global_Sales, name='NES', text = xNES.Name)\ntrace23 = go.Scatter(x=xDC.Platform, y=xDC.Global_Sales, mode='markers', marker_size=xDC.Global_Sales, name='DC', text = xDC.Name)\n\n\ndata= [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10, trace11, trace12, trace13, trace14, trace15, trace16, trace17, trace18, trace19, trace20]\nlayout = dict(title = 'Top 5 Game Sales per Platform', autosize=False, width=1500, height=750, xaxis= dict(title= 'Platform',ticklen= 5,zerolinewidth=1,gridcolor=\"white\"),\n              yaxis= dict(title= 'Global Sales ($millions)',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\",))\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)\n","7278bcd2":"df_Year = df.groupby(by=\"Year\").sum()\nax5 = df_Year.plot.bar(y = 'Global_Sales', align='center', alpha=0.5, figsize = (15, 5), fontsize = 12)\nax5.set_title('Global Sales per Year', fontsize=20)","deaedff6":"df_RegionSales = pd.pivot_table(df, values=('NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'), index=['Year'],aggfunc=np.sum).sort_values(by = 'Year', ascending = True)\nax8 = df_RegionSales.plot(kind='line', figsize=(15,8), fontsize=18)\nax8.set_title('Sales per Region over Time ($millions)', fontsize=20)\nax8.grid()\nax8.set_ylabel('Year', fontsize=16)\nax8.set_xlabel('Sales ($millions)', fontsize=16)","a281cbcd":"EU_Table = pd.pivot_table(df, values='EU_Sales', index=['Name']).sort_values(by = 'EU_Sales', ascending = False).head()\nNA_Table = pd.pivot_table(df, values='NA_Sales', index=['Name']).sort_values(by = 'NA_Sales', ascending = False).head()\nJP_Table = pd.pivot_table(df, values='JP_Sales', index=['Name']).sort_values(by = 'JP_Sales', ascending = False).head()\nOS_Table = pd.pivot_table(df, values='Other_Sales', index=['Name']).sort_values(by = 'Other_Sales', ascending = False).head()\nfig = make_subplots(\n    rows=2, cols=2, subplot_titles=('Europe', 'North America', 'Japan', 'Other Sales'),\n    column_widths=[2, 2],\n    row_heights=[2, 2],\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [ {\"type\": \"bar\"}, {\"type\": \"bar\"}]])\n# Add Traces\n\nfig.add_trace(\n    go.Bar(y=EU_Table['EU_Sales'],\n           x=EU_Table.index,\n           name=\"EU\",\n          marker={'color': EU_Table['EU_Sales'],'colorscale': 'Portland'})\n         ,row=1, col=1)\nfig.add_trace(\n    go.Bar(y=NA_Table['NA_Sales'],\n           x=NA_Table.index,\n           name=\"NA\",\n          marker={'color': NA_Table['NA_Sales'],'colorscale': 'Portland'})\n         ,row=1, col=2)\nfig.add_trace(\n    go.Bar(y=JP_Table['JP_Sales'],\n           x=JP_Table.index,\n           name=\"JP\",\n          marker={'color': JP_Table['JP_Sales'],'colorscale': 'Portland'})\n         ,row=2, col=1)\nfig.add_trace(\n    go.Bar(y=OS_Table['Other_Sales'],\n           x=OS_Table.index,\n           name=\"Other\",\n          marker={'color': OS_Table['Other_Sales'],'colorscale': 'Portland'})\n         ,row=2, col=2)\n\nfig.update_layout(height=500, width = 1500, showlegend=False)\nfig.update_layout(title=\"Top 5 Game Sales per Genre ($millions)\", title_font_size=20)\n                  \nfig.show()","2c008879":"g = sns.pairplot((df.drop(['Rank'], axis=1)), corner=True);\n\ng.fig.suptitle('Sales per Game Pairplot ($millions)', fontsize = 20)\n","73a0184a":"df_PlatformGenre2 = df.drop(['Rank', 'Year', 'Global_Sales'], axis=1)\ndf_PlatformGenre = df_PlatformGenre2.groupby(by=\"Genre\").sum()\ndf_PlatformGenre_T = df_PlatformGenre.T\nplt.figure(figsize = (16,5))\nax9 = sns.heatmap(df_PlatformGenre_T)\nax9.set_title('Sales by Genre and Region ($millions)', fontsize=20)","a5259e4d":"df_TopGames = df.sort_values(by = 'Global_Sales', ascending = False).head(100)\n\ntrace1 = go.Scatter(x=df.Rank, y=df_TopGames.NA_Sales,\n                    mode='markers',\n                    name='North America',\n                   text = df.Name)\ntrace2 = go.Scatter(x=df.Rank, y=df_TopGames.EU_Sales,\n                    mode='markers',\n                    name='Europe',\n                   text = df.Name)\ntrace3 = go.Scatter(x=df.Rank, y=df_TopGames.JP_Sales,\n                    mode='markers',\n                    name='Japan',\n                   text = df.Name)\ntrace4 = go.Scatter(x=df.Rank, y=df_TopGames.Other_Sales,\n                    mode='markers',\n                    name='other',\n                   text = df.Name)\ndata= [trace1, trace2, trace3, trace4]\nlayout = dict(title = 'Top 100 Video Game Sales per Region',\n              xaxis= dict(title= 'Rank',ticklen= 5,zerolinewidth=1,gridcolor=\"white\"),\n              yaxis= dict(title= 'Sales ($millions)',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\",))\nfig = dict(data = data, layout = layout)\niplot(fig)","6075e286":"## 1.6 Top Platforms","0053a706":"# 2. Publisher Wise Analysis","4b80c7e0":" ## 4.3 Platform Sales per Region","1b6add14":"## 4.1 Top Platforms Word Cloud","fd4f0182":"## 1.3 Data Count","2b6a8396":"## 3.3 Sales by Genre and Publisher","e0d74218":"# Load Data","8d7d602d":"# 3. Genre Wise Analyis","fa30e157":"## 1.7 Genre Frequency","5b6b0655":"## 1.1 Descriptive Statistics","ddb0a772":"# 5. Global & Regional Sales Wise Analysis","71cf7bf7":"## 5.5 Sales by Genre and Region","d0d3bda5":"## 3.2 Genre Sales per Region","d7bc384e":"## 3.5 Top Games per Genre","bc90aba6":"## 1.2 Null values","dde17b85":"## 5.2 Sales per Region","41ad03e5":"## 1.5 Top Games Sales","1b7bec64":"# Video Games Sales - Exploratory Data Analysis\n\n\n<b>CONTENTS:<\/b>\n   <li><b>1. Overall Statistics\n   <li><b>2. Year Wise Analysis<\/b>\n   <li><b>3. Publisher Wise Analysis<\/b>\n   <li><b>4. Platform Wise Analysis<\/b>\n   <li><b>5. Genre Wise Analysis<\/b>\n   <li><b>6. Global & Regional Wise Analysis<\/b>\n<p style=\"text-indent: 5px;\">  \n<p style=\"text-indent: 5px;\">\nThis dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of <a href= \"https:\/\/www.vgchartz.com\/gamedb\/\">vgchartz.com <\/a>\n    \n<p style=\"text-indent: 5px;\">          \n<\/p>\n        <li><b>Rank<\/b> - Ranking of overall sales<\/li>\n        <li><b>Name<\/b> - The games name<\/li>\n        <li><b>Platform<\/b> - Platform of the games release (i.e. PC,PS4, etc.)<\/li>\n        <li><b>Year<\/b> - Year of the game's release<\/li>\n        <li><b>Genre<\/b> - Genre of the game<\/li>\n        <li><b>Publisher<\/b> - Publisher of the game<\/li>\n        <li><b>NA_Sales<\/b> - Sales in North America (in millions)<\/li>\n        <li><b>EU_Sales<\/b> - Sales in Europe (in millions)<\/li>\n        <li><b>JP_Sales<\/b> - Sales in Japan (in millions)<\/li>\n        <li><b>Other_Sales<\/b> - Sales in the rest of the world (in millions)<\/li>\n        <li><b>Global_Sales<\/b> - Total worldwide sales.<\/li>\n    \n<\/span>","44140bee":"## 1.8 Publishers Game Count","6f3b7f15":"## 2.3 Top Publishers per Region","3778f6d2":"## 5.4 Regional and Global Sales","334b484c":"## 2.4 Sales by Publisher and Genre","8433c021":"## 5.6 Top Game Sales per Region","954b5077":"## 3.1 Game Count per Genre","e66f4306":"# 1. Overall Statistics","6de45cec":"## 5.1 Global Sales per Year","a2677996":"## 1.4 Games Count & Sales per Year","ed180ac5":"## 5.3 Game Sales per Genre","91823e02":"## 4.5 Top Games per Platform","26d000f0":"## 3.4 Sales by Genre and Platform","f61b3f4e":"## 4.4 Sales According to Platform and Region","c0ed3b79":"## 4.2 Game Count per Platform","1a72e92f":"## 2.1 Publishers Game Count ","c4385feb":"# 4. Platform Wise Analysis"}}