{"cell_type":{"5a96673c":"code","433c6da5":"code","159dbb99":"code","3974fe9d":"code","9ae24650":"code","b6ef1e41":"code","93008241":"code","021d078a":"code","b549230a":"code","e2c23d04":"code","f2eae270":"code","483002b7":"code","d03e3225":"code","c36ac0d5":"code","20f6d07f":"code","5d598459":"code","a82fb1c3":"code","959f80f0":"code","21c64c57":"code","c10b6049":"code","7144acd7":"code","b45f86f7":"code","cb70214e":"markdown","1f3b62f0":"markdown","6bc79c8e":"markdown","9847672f":"markdown","55f92dbf":"markdown","afa0035e":"markdown","f21aefb7":"markdown","84287258":"markdown","82ed7d06":"markdown","22b63359":"markdown","69ddc21a":"markdown","2cdcee0e":"markdown","8726e07b":"markdown"},"source":{"5a96673c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","433c6da5":"train = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_train.csv\")\ntest =  pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_test.csv\")","159dbb99":"train.head()","3974fe9d":"test.head()","9ae24650":"X_train = train.drop(labels=[\"label\"],axis=1)\nY_train = train[\"label\"]\nprint(\"X_train shape\",X_train.shape)\nprint(\"Y_train shape\",Y_train.shape)","b6ef1e41":"X_test = test.drop(labels=[\"label\"],axis=1)\nY_test = test.iloc[:,0]\nprint(\"X_test shape\",X_test.shape)\nprint(\"Y_test shape\",Y_test.shape)","93008241":"print(\"Label Value Counts\\n\",Y_train.value_counts())\nplt.figure(figsize =(15,10))\nsns.countplot(Y_train, palette = \"GnBu_d\")\nplt.title(\"Number of Digits Label Pixels\")","021d078a":"#plotting some of the samples  \nplt.subplot(2,2,1)\nimg1 = X_train.iloc[0].to_numpy().reshape((28,28))\nplt.imshow(img1,cmap='gray')\nplt.subplot(2,2,2)\nimg2 = X_train.iloc[1].to_numpy().reshape((28,28))\nplt.imshow(img2,cmap='gray')\nplt.subplot(2,2,3)\nimg3 = X_train.iloc[2].to_numpy().reshape((28,28))\nplt.imshow(img3,cmap='gray')\nplt.subplot(2,2,4)\nimg4 = X_train.iloc[3].to_numpy().reshape((28,28))\nplt.imshow(img4,cmap='gray')\nplt.show()","b549230a":"#Normalization\nX_train = X_train.astype(\"float32\")\/255.0\nX_test = X_test.astype(\"float32\")\/255.0\nprint(\"X_train shape is  >>> \",X_train.shape)\nprint(\"X_test shape  is  >>> \",X_test.shape)","e2c23d04":"#Reshape\n#When we want to reshape our data firstly we need to convert the data to Numpy by using .values method\nX_train = X_train.values.reshape(-1,28,28,1) #28x28 >> 784 px\nX_test = X_test.values.reshape(-1,28,28,1)\nprint(\"X_train shape : \",X_train.shape)\nprint(\"Test shape : \",X_test.shape)","f2eae270":"#Label Encoding \nfrom keras.utils.np_utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = 25 ) #We got 25 labels (0 to 24)\nY_test = to_categorical(Y_test, num_classes = 25 )","483002b7":"#Lets see all the pictures below\nf, ax = plt.subplots(4,6) \nf.set_size_inches(10, 10)\nk = 0\nfor i in range(4):\n    for j in range(6):\n        ax[i,j].imshow(X_train[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n        plt.axis(\"off\")\n        plt.savefig(\"graph.png\")\n    plt.tight_layout()    \n    ","d03e3225":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train,Y_train,test_size = 0.15, random_state = 42)\nprint(\"X_train shape\",X_train.shape)\nprint(\"X_val shape\",X_val.shape)\nprint(\"Y_train shape\",Y_train.shape)\nprint(\"Y_val shape\",Y_val.shape)","c36ac0d5":"from sklearn.metrics import confusion_matrix\nimport itertools \n\nfrom keras.utils.np_utils import to_categorical #Converting to one hot encoding \nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.callbacks import ReduceLROnPlateau\n\nepochs = 15 \nbatch_size = 150\nnum_classes = 25\n\nmodel = Sequential()\n#Convutional Layer 1 \nmodel.add(Conv2D(75, (3,3), strides = 1, padding = \"Same\",activation =\"relu\", input_shape =(28,28,1)))\nmodel.add(BatchNormalization())\n\n#Pooling Layer 1 \nmodel.add(MaxPool2D((2,2),strides = 2,padding =\"Same\"))\n\n#Convutional Layer 2\nmodel.add(Conv2D(50, (3,3), strides = 1, padding = \"Same\",activation =\"relu\", input_shape =(28,28,1)))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\n\n#Pooling Layer 2\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n\n#Convutional Layer 3\nmodel.add(Conv2D(25 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(BatchNormalization())\n\n#Pooling Layer 3\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n\n#Fully Connected Layer\nmodel.add(Flatten())\n    #Hidden Layer 1 \nmodel.add(Dense(units = 512 , activation = 'relu'))\nmodel.add(Dropout(0.3))\n    #Hidden Layer 2\nmodel.add(Dense(units = 25 , activation = 'softmax'))","20f6d07f":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.5, min_lr=0.00001)","5d598459":"#Compiler\nmodel.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\n","a82fb1c3":"#Model Summary\nmodel.summary()","959f80f0":"# With data augmentation to prevent overfitting\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=5,  # randomly rotate images in the range (degrees, 0 to 180 by 5 degrees)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","21c64c57":"history = model.fit(datagen.flow(X_train,Y_train,\n                                 batch_size = batch_size),\n                                 epochs = epochs, \n                                 validation_data =(X_val,Y_val),\n                                 steps_per_epoch = X_train.shape[0]\/\/batch_size,\n                                 callbacks = [learning_rate_reduction])","c10b6049":"score = model.evaluate(X_test,Y_test,verbose = 0)\nprint(\"Test Loss : \",score[0])\nprint(\"Test Accuracy : \",score[1])","7144acd7":"import matplotlib.pyplot as plt\n%matplotlib inline\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","b45f86f7":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Spectral\",linecolor=\"blue\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","cb70214e":"**DATA AUGMENTATION**","1f3b62f0":"### CNN Architecture - Implementing with Keras\n<a><img src=\"https:\/\/www.researchgate.net\/profile\/Haleem_Farman\/publication\/321787151\/figure\/fig3\/AS:673901872951307@1537682135746\/CNN-general-architecture.jpg\" alt=\"1\" border=\"0\"><\/a>\n- We are using CNN generally with Pictures.\n- There are many variations about our architecture, the classical architectures shown above but when we do some differences may increase our accuracy (also may decrease too) \n- In this model our **Architecture** is \n- Convutional Layer 1\n- Pooling Layer 1 \n- Convutional Layer 2 > Dropout \n- Pooling Layer 2 \n- Convutional Layer 3 \n- Fully Connected Layer > Flatten > Hidden Layer 1 > Last Layer (Softmax) ","6bc79c8e":"**Firstly we need to seperate labels from the datasets**","9847672f":"Some of the sources which I checked : \n- https:\/\/www.kaggle.com\/madz2000\/cnn-using-keras-100-accuracy\n- https:\/\/www.kaggle.com\/semihakmese\/cnn-with-keras-mnist-92-accuracy","55f92dbf":"**CALLBACK** - Learning Rate Optimizer","afa0035e":"**CREATE A MODEL**","f21aefb7":"**CONFUSION MATRIX**","84287258":"**VISUALIZATON OF TRAIN AND TEST ACCURACY**","82ed7d06":"**TEST DATA RESULTS**","22b63359":"**TRAIN TEST SPLIT**\n- % 85 Train \n- % 15 Validation \n- In this section we will seperate a validation data from train data to test our model \n- Also we are going to test our model with test data too","69ddc21a":"**COMPILER**","2cdcee0e":"**TRAIN THE MODEL**","8726e07b":"**Normalization - Reshape - Label Encoding**\n- Normalisation\n    - If we don't do normalisation \u0131t may cause problems also CNN algorithm will be faster\n- Reshape\n    - When we want to use Keras we need to reshape our data as 3d (28x28x1)\n- Label Encoding\n    - We got 10 labels (0,1,2,.....,9)\n    - 2 >> [0,0,1,0,0,0,0,0,0,0] #Second index is 1 others 0\n    - 4 >> [0,0,0,0,1,0,0,0,0,0] #Fourth index is 1 others 0"}}