{"cell_type":{"f62a0ab6":"code","4a3c2c58":"code","2954a6c1":"code","198ab0e0":"code","1e5c4f22":"code","5979d66b":"code","e5d35084":"code","062a1360":"code","4f108c85":"code","fd51ed0c":"code","58cd87a4":"code","76a6ce39":"code","24724260":"code","f749b45c":"code","2076ebd6":"code","c2f3a095":"code","18e76280":"code","9f9f7d56":"code","7c251cfc":"code","33fb49a4":"code","7a7fb158":"code","1a72fecb":"code","a7cc4d0e":"code","0b3f306e":"code","c040e999":"markdown","a0ca4631":"markdown","dd5e0d10":"markdown","1039e3b2":"markdown","45abaebd":"markdown","ec2b5f8e":"markdown","ea044ebe":"markdown","8af6c560":"markdown","d736c7dd":"markdown","c5f5c628":"markdown","e974194a":"markdown"},"source":{"f62a0ab6":"!pip install pdfminer.six","4a3c2c58":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport re\nimport os\nimport matplotlib.pyplot as plt\nimport pdfminer\nimport io\nfrom pdfminer.pdfinterp import PDFResourceManager,PDFPageInterpreter\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\nfrom pdfminer.pdfpage import PDFPage\nfrom io import BytesIO","2954a6c1":"name=list()\nb_date=list()\nout_a=np.empty(0)\nout_b=np.empty(0)\npdfFiles=[]","198ab0e0":"def pdf_to_text(path):\n    manager = PDFResourceManager()\n    retstr = io.StringIO()\n    layout = LAParams(all_texts=True)\n    device = TextConverter(manager, retstr)\n    filepath = open(path, 'rb')\n    interpreter = PDFPageInterpreter(manager, device)\n    for page in PDFPage.get_pages(filepath, caching=True,check_extractable=True):\n        #print(page[0])\n        interpreter.process_page(page)\n        text = retstr.getvalue()\n    filepath.close()\n    device.close()\n    retstr.close()\n    return text","1e5c4f22":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fn=os.path.join(dirname, filename)\n        print(fn)\n        if fn.endswith('.pdf'):\n           pdfFiles.append(fn)\n        ","5979d66b":"def rgx_pdf(ptr,out):\n    ptr=ptr+'\\W[0-9]+\\W*[0-9]*'\n    #print(ptr)\n    a=re.search(ptr,out)[0]\n    #print(a)\n    return re.search('[0-9]+\\W*[0-9]*',a)[0]\n    ","e5d35084":"b_date=list()\ncar=['WBC','RBC','Hgb','Hct','MCV','MCH','MCHC','RDW','PLTS']\ninfos=dict()\nfor i in np.arange(0,len(car),1):\n    infos[i]=list()\n\n\n\n\nfor filename in pdfFiles:\n  \n  pageO=pdf_to_text(filename)\n  \n  try:\n   out=str(pageO)\n   sname=re.findall('[A-Z]+\\s+[A-Z]+\\s',out)[0]\n   sdate=re.findall('[0-9]+-[0-9]+-[0-9]+',out)[0]\n   #print(sname)\n   #print(sdate)\n   name.append(sname)\n   b_date.append(sdate)\n   #infos[0].append(rgx_pdf('WBC',out))\n   i=0\n   for prop in car:\n        infos[i].append(rgx_pdf(prop,out))\n        #print(infos[i])\n        i=i+1\n  except (TypeError):\n   print(\"Cannot find nonetype\")\n# Any results you write to the current directory are saved as output.","062a1360":"df=pd.DataFrame({\"Nome Paziente\": name,\"Data Nascita\": b_date})\ndf2=pd.DataFrame({car[2]: infos[2]})\ni=0\ndf2=pd.DataFrame({car[i]: infos[i]})\ndf=pd.concat([df,df2],axis=1)","4f108c85":"i=0\nwhile(i<(len(car)-1)):\n    \n    i=i+1\n    print(car[i])\n    df2=pd.DataFrame({car[i]: infos[i]})\n    df=pd.concat([df,df2],axis=1)\n    del df2","fd51ed0c":"df=df.set_index(\"Nome Paziente\")","58cd87a4":"df_=df.iloc[:,1:]","76a6ce39":"df_=df_.applymap(lambda x: str(x).replace(\",\",\".\")).astype(\"float\")","24724260":"df_.info()","f749b45c":"df=pd.concat([df_,df[\"Data Nascita\"]],axis=1)\n","2076ebd6":"df.head()","c2f3a095":"df.info()","18e76280":"df.to_csv(\"Emocromo_dset.csv\")","9f9f7d56":"Hereafter I perform same basic analysis on the Dataset acquired:","7c251cfc":"df.describe(include='all')","33fb49a4":"sns.boxplot(data=df.iloc[:,:8],orient=\"v\")","7a7fb158":"sns.pairplot(df.iloc[:,:8],height=2.5)","1a72fecb":"cm=np.corrcoef(df.iloc[:,:9].values.T)","a7cc4d0e":"sns.set(font_scale=1.5)","0b3f306e":"hm=sns.heatmap(cm,cbar=True,annot=True,square=True,fmt='.1f',annot_kws={'size':10},yticklabels=df.iloc[:,:9].columns,xticklabels=df.iloc[:,:9].columns)","c040e999":"Hereafter I save Dataframe to csv file:","a0ca4631":"Hereafter I create the dataframe where all the information collected are saved:","dd5e0d10":"# <center>How to extract data from pdf files<\/center>\n## <center>By Using pdfminer and re modules<\/center>\n#### <center> 01 October 2019 <\/center> \n#####  <center> Alessandro P. <\/center> \n\n\n\n# Introduction \nIt can be interesting to extract data from pdf documents, for example if a company has collected an archive in pdf and want to migrate it to a database and perform analysis on these data.\nTo solve this problem I have used \"pdfminer\" and \"re\" modules. To check the method I've created a dataset of three pdf documents with hypotetical italian blood exams.","1039e3b2":"Then I have to import all modules needed:","45abaebd":"It has to be noted that name (named Nome Paziente) and its born date (named \"Data di nascita\") are collected, for each cycle, into \"sname\" and \"sdate\" variable","ec2b5f8e":"*Thank you for any feedback which is helpful to improve my work.*","ea044ebe":"This is the funciton that extract from \"pdf_to_text\" output the useful information by using regex","8af6c560":"This code save all pdf files path in the \"pdfFiles\" list.","d736c7dd":"This Function process each of the pdf document (path in input) and return a string (text):","c5f5c628":"First of all I have to install pdfminer module, which is not default in Kaggle:","e974194a":"Data collected shall be transformed from string type to float type:"}}