{"cell_type":{"d8a3f1f8":"code","96bb1e3c":"code","7cdb13c3":"code","bcd10881":"code","06057a19":"code","6408c935":"code","573b0835":"code","a8db428a":"code","a159121a":"markdown","306b55cb":"markdown","ecf59842":"markdown"},"source":{"d8a3f1f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96bb1e3c":"def librosa_(filenames):\n    \n    tempo_list = []\n    mfccs_mean_list = []\n    mfccs_var_list = []\n    speccen_mean_list = []\n    speccen_var_list = []\n    rms_mean_list = []\n    rms_var_list = []\n    chroma_mean_list = []\n    chroma_var_list = []\n    specroll_mean_list = []\n    specroll_var_list = []\n    zcr_mean_list = []\n    zcr_var_list = []\n    specflux_mean_list = []\n    specflux_var_list = []\n    pitches_mean_list = []\n    pitches_var_list = []\n\n    for f in filenames: #extract feature -> add to list #hi\u1ec7n t\u1ea1i \u0111ang c\u00f3 17 features\n        try:\n            y, sr = librosa.load(f)\n            audio_file, _ = librosa.effects.trim(y)\n            #tempo\n            tempo, beats = librosa.beat.beat_track(y=audio_file, sr = sr)\n            tempo_list.append(tempo)\n            #Mel-Frequency Cepstral Coefficients\n            mfccs = librosa.feature.mfcc(y=audio_file, sr=sr)\n            mfccs_mean_list.append(mfccs.mean())\n            mfccs_var_list.append(mfccs.var())\n            #Spectral Centroid\n            speccen = librosa.feature.spectral_centroid(y=audio_file, sr=sr)\n            speccen_mean_list.append(speccen.mean())\n            speccen_var_list.append(speccen.var())\n            #root mean square\n            rms = librosa.feature.rms(y=audio_file)\n            rms_mean_list.append(rms.mean())\n            rms_var_list.append(rms.var())\n            #chromagram\n            chroma = librosa.feature.chroma_stft(y=audio_file, sr=sr)\n            chroma_mean_list.append(chroma.mean())\n            chroma_var_list.append(chroma.var())\n            #spectral rolloff\n            specroll = librosa.feature.spectral_rolloff(y=audio_file, sr=sr)\n            specroll_mean_list.append(specroll.mean())\n            specroll_var_list.append(specroll.var())\n            #zero crossing rate\n            zcr = librosa.feature.zero_crossing_rate(y=audio_file)\n            zcr_mean_list.append(zcr.mean())\n            zcr_var_list.append(zcr.var())\n            #spectral flux\n            specflux = librosa.onset.onset_strength(y=audio_file, sr=sr)\n            specflux_mean_list.append(specflux.mean())\n            specflux_var_list.append(specflux.var())\n            #pitches\n            pitches, magnitudes = librosa.piptrack(y=audio_file, sr=sr)\n            pitches_mean_list.append(pitches.mean())\n            pitches_var_list.append(pitches.var())\n\n        except:\n            pass\n\n    df = pd.DataFrame()\n    df['tempo'] = tempo_list\n    df['mfccs_mean'] = mfccs_mean_list\n    df['mfccs_var'] = mfccs_var_list\n    df['speccen_mean'] = speccen_mean_list\n    df['speccen_var'] = speccen_var_list\n    df['rms_mean'] = rms_mean_list\n    df['rms_var'] = rms_var_list\n    df['chroma_mean'] = chroma_mean_list\n    df['chroma_var'] = chroma_var_list\n    df['specroll_mean'] = specroll_mean_list\n    df['specroll_var'] = specroll_var_list\n    df['zcr_mean'] = zcr_mean_list\n    df['zcr_var'] =  zcr_var_list \n    df['specflux_mean'] = specflux_mean_list\n    df['specflux_var'] = specflux_var_list\n    df['pitches_mean'] = pitches_mean_list\n    df['pitches_var'] = pitches_var_list\n    \n    return df\n","7cdb13c3":"def kmeans_mapping(df):\n\n    #normalization\n    cols = df.columns\n    min_max_scaler = preprocessing.MinMaxScaler()\n    np_scaled = min_max_scaler.fit_transform(df)\n    X = pd.DataFrame(np_scaled, columns = cols)\n\n    #PCA components\n    pca = PCA(n_components=2)\n    principalComponents = pca.fit_transform(X)\n    principalDf = pd.DataFrame(data = principalComponents, columns = ['principal component 1', 'principal component 2'])\n\n\n\n    kmeans = KMeans(n_clusters=3, random_state=0).fit(principalDf)\n\n    #graph\n    '''pred_label = kmeans.predict(principalDf)\n    kmeans_display(principalDf, pred_label)'''\n    plt.figure(figsize=(10, 5))\n    plt.scatter(principalDf.iloc[:,0], principalDf.iloc[:,1], c=kmeans.labels_.astype(float))\n\n    #centroids\n    centroids = kmeans.cluster_centers_\n    print(\"Centroids: \\n\"+str(centroids))\n    \n    \n    return principalDf, kmeans","bcd10881":"#t\u00ecm c\u00e1c b\u00e0i c\u00f9ng nh\u00f3m input\ndef similar_songs(principalDf, kmeans, _input, df):\n    principalDf['label'] = kmeans.predict(principalDf)\n    input_label = principalDf.loc[_input, 'label']\n    input_cluster = principalDf[principalDf['label']==input_label]\n    principalDf.drop(columns=['label'], inplace=True)\n    print('Songs that are in the same cluster as '+str(_input)+ ' are: ')\n    print(input_cluster.index)","06057a19":"import glob\nimport codecs\nfrom tinytag import TinyTag\nimport numpy as np\nimport pandas as pd\nimport librosa\nimport librosa.display\nfrom pydub import AudioSegment\nimport audioread\nfrom os import path\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\nimport seaborn as sns\nfrom scipy.spatial import distance\nimport pymongo\nfrom pymongo import MongoClient\nimport scipy.stats as ss\n\n\n\npath =r\"..\/input\/unlabelled-songs\/AUDIO-tam\/*\" \nfilenames = glob.glob(path + \"\/*.mp3\")\n","6408c935":"df = librosa_(filenames)","573b0835":"principalDf, kmeans = kmeans_mapping(df)","a8db428a":"input_ = 10\nsimilar_songs(principalDf, kmeans, input_, df)","a159121a":"Find songs that are in the same cluster as the input","306b55cb":"Extract 17 features for each song in the folder using librosa","ecf59842":"Use PCA to reduce 17 dimensions to 2 dimiensions. Then use kmeans to classify the datapoints into 3 different clusters"}}