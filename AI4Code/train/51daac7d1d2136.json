{"cell_type":{"76605d75":"code","57648e87":"code","f7e147b4":"code","439645bf":"code","b5ac0ce1":"code","ccbfc2ae":"code","b3382317":"code","ee5a3016":"code","76eb621c":"code","f5bfb8a7":"code","9e9e696f":"code","ddd943e1":"markdown","2862c52c":"markdown","f3929620":"markdown","23b26c45":"markdown","e4d3237b":"markdown","20e7c091":"markdown","c3b8d351":"markdown","0b2cacf7":"markdown","a617b51d":"markdown","d9e41874":"markdown"},"source":{"76605d75":"import numpy as np\nimport pandas as pd","57648e87":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","f7e147b4":"#check the first rows of train data set (to check if the import was Ok)\ntrain.tail()","439645bf":"#check the first rows of test data set (to check if the import was Ok)\ntest.tail()","b5ac0ce1":"# Train data set\ntrain.loc[train['Sex'] == 'male', 'Sex'] = 1\ntrain.loc[train['Sex'] == 'female', 'Sex'] = 0\ntrain.loc[train['Embarked'] == 'S', 'Embarked'] = 0\ntrain.loc[train['Embarked'] == 'C', 'Embarked'] = 0\ntrain.loc[train['Embarked'] == 'Q', 'Embarked'] = 0\n\n# Test data set\ntest.loc[test['Sex'] == 'male', 'Sex'] = 1\ntest.loc[test['Sex'] == 'female', 'Sex'] = 0\ntest.loc[test['Embarked'] == 'S', 'Embarked'] = 0\ntest.loc[test['Embarked'] == 'C', 'Embarked'] = 0\ntest.loc[test['Embarked'] == 'Q', 'Embarked'] = 0","ccbfc2ae":"# Train data set\ntrain['Age'] = train['Age'].fillna(train['Age'].median())\ntrain['Embarked'] = train['Embarked'].fillna(1)\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].mean())\n\n# Test data set\ntest['Age'] = test['Age'].fillna(train['Age'].median())\ntest['Embarked'] = test['Embarked'].fillna(1)\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())","b3382317":"predictors = [\"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]","ee5a3016":"from sklearn.tree import DecisionTreeRegressor\n\n# Define model. Specify a number for random_state to ensure same results each run\ndtree = DecisionTreeRegressor(random_state=1)\n\n# Fit model\ndtree.fit(train[predictors], train['Survived'])\npredictions = dtree.predict(test[predictors])\n\n# convert results to binary\nn = 0\nfor i in predictions:\n    if(i > 0.5):\n        predictions[n] = 1\n    else:\n        predictions[n] = 0\n    n += 1\n\n# change type of the predictions array to integer\npredictions = predictions.astype(int)\npredictions.dtype","76eb621c":"#Confusion matrix\n#from sklearn.metrics import confusion_matrix\n#confusion_matrix(predictions, train['Survived'])","f5bfb8a7":"# Accuracy\n#from sklearn.metrics import accuracy_score\n#accuracy = accuracy_score(train['Survived'], predictions)\n#accuracy","9e9e696f":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": predictions\n    })\nsubmission.to_csv(\"dtree_submit2.csv\", index=False)","ddd943e1":"***","2862c52c":"# Modeling\n\n### Decision Tree Regressor modeling\n\nBased on Kaggle\nhttps:\/\/www.kaggle.com\/dansbecker\/your-first-machine-learning-model","f3929620":"Fill the missing values with our assumptions","23b26c45":"We need to put our csv-file with the results into Kaggle \/input directory like so:\n\n(LB score: 0.69377)","e4d3237b":"# Submission","20e7c091":"Reclassify all the literal data (except Name; NaN - is not literal, it is Null-value) to numeric to use it in regression models:","c3b8d351":"## Kaggle API to submit\n\nAPI: https:\/\/github.com\/Kaggle\/kaggle-api\n\nCheck submissions:\n\n`kaggle competitions submissions`\n\nSubmit to competition:\n\n`kaggle competitions submit titanic -f Git\\kaggle-titanic\\src\\dtree_submit2.csv -m \"decision tree\"`","0b2cacf7":"# Decision Tree Regressor modeling\u00b6\n\nBased on Kaggle Tutorial: https:\/\/www.kaggle.com\/dansbecker\/your-first-machine-learning-model","a617b51d":"***","d9e41874":"***"}}