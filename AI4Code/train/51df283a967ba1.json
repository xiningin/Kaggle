{"cell_type":{"5c165b64":"code","65874edf":"code","e06477db":"code","8568c1d7":"code","1ebd5bb8":"code","62420845":"code","1b080964":"code","594a92c2":"code","491c42b0":"code","35e7c4a0":"code","4bf66149":"code","d0f6f750":"code","db77ff97":"code","5ef456b5":"code","39dbe786":"code","aed4e7e6":"code","35f05ca8":"code","cba0ae83":"code","ae1701da":"code","c6acdfc2":"code","c91a6f89":"code","109db269":"code","ccb1d425":"markdown","0d3ad256":"markdown","05676a17":"markdown","22925e85":"markdown","a12fa802":"markdown","37183220":"markdown","7377c43d":"markdown","3e2cb33d":"markdown","e016ef65":"markdown","4525be11":"markdown","ad39a72d":"markdown","6a4d9642":"markdown","3faf5a7b":"markdown","3eb61a20":"markdown","06f7c446":"markdown","455b8bd0":"markdown","e38829d7":"markdown","39a673c6":"markdown","14a429f7":"markdown"},"source":{"5c165b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","65874edf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# %matplotlib inline\nplt.style.use(\"ggplot\")\n\nimport sklearn\nfrom sklearn.decomposition import TruncatedSVD","e06477db":"df_ratings = pd.read_excel('\/kaggle\/input\/Ratings.xlsx', header=None)\ndf_ratings = df_ratings.dropna()\ndf_ratings.columns = [\"UserId\",\"ProductId\",\"Rating\",\"Timestamp\"]\ndf_ratings.head()","8568c1d7":"df_ratings['Rating'].hist()","1ebd5bb8":"print(\"Count of Unique Users is \"+str(len(df_ratings['UserId'].unique())))\nprint(\"Count of Unique Products is \"+str(len(df_ratings['ProductId'].unique())))","62420845":"from collections import Counter\n # equals to list(set(words))\nval = list(Counter(df_ratings['Rating']).values()) # counts the elements' frequency\nlabels = list(Counter(df_ratings['Rating']).keys())\nimport matplotlib.pyplot as plt\nmy_colors = ['lightblue','lightsteelblue','silver','darkblue','grey']\nplt.pie(val, labels=labels, autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=None)\nplt.title('Ratings')\nplt.axis('equal')\nplt.show()","1b080964":"df = df_ratings[df_ratings['Rating']==1]\ndf_withLowRating = pd.DataFrame(df.groupby('ProductId')['Rating'].count())\ndf_withLowRating = df_withLowRating.sort_values('Rating', ascending=False)\nProducts_with_Rating1 = df_withLowRating[df_withLowRating['Rating']>50]\nProducts_with_LowestRating = list(Products_with_Rating1.index)\nprint(\"There are \"+str(len(Products_with_LowestRating)) + \" products which got Rating 1 more than 50 times.\")\nProducts_with_LowestRating","594a92c2":"Regular_users = pd.DataFrame(df_ratings.groupby('UserId')['Rating'].count())\nRegular_users = Regular_users.sort_values('Rating', ascending=False)\nRegular_users_1 = Regular_users[Regular_users['Rating']>50]\nRegular_users_list = list(Regular_users_1.index)\nless_sparse_denser_df = df_ratings[df_ratings.UserId.isin(Regular_users_list)]\nless_sparse_denser_df = less_sparse_denser_df.reset_index(drop=True)\nless_sparse_denser_df.info()","491c42b0":"popular_products = pd.DataFrame(df_ratings.groupby('ProductId')['Rating'].count())\nmost_popular = popular_products.sort_values('Rating', ascending=False)\nmost_popular.head(10)","35e7c4a0":"most_popular.head(30).plot(kind = \"bar\")","4bf66149":"ratings_utility_matrix = less_sparse_denser_df.pivot_table(values='Rating', index='UserId', columns='ProductId', fill_value=0)\nratings_utility_matrix.head()","d0f6f750":"ratings_utility_matrix.shape","db77ff97":"X = ratings_utility_matrix.T\nX.head()","5ef456b5":"X.shape","39dbe786":"X1 = X","aed4e7e6":"SVD = TruncatedSVD(n_components=10)\ndecomposed_matrix = SVD.fit_transform(X)\ndecomposed_matrix.shape","35f05ca8":"correlation_matrix = np.corrcoef(decomposed_matrix)\ncorrelation_matrix.shape","cba0ae83":"X.index[99]","ae1701da":"i = 'B00003006R'\n\nproduct_names = list(X.index)\nproduct_ID = product_names.index(i)\nproduct_ID","c6acdfc2":"correlation_product_ID = correlation_matrix[product_ID]\ncorrelation_product_ID.shape","c91a6f89":"Recommend = list(X.index[correlation_product_ID > 0.90])\n# Removes the item already bought by the customer\nRecommend.remove(i) \nRecommend","109db269":"Recommend = list(X.index[correlation_product_ID > 0.90])\n# Removes the item already bought by the customer\nRecommend.remove(i) \nRecommend[0:5]","ccb1d425":"## Recommendation Systems Project\n### 1. Read and explore the given dataset.  (Rename column\/add headers, plot histograms, find data characteristics) ","0d3ad256":"### Isolating Product ID # B00003006R from the Correlation Matrix\n\nAssuming the customer buys Product ID # B00003006R (randomly chosen)","05676a17":"#### Loading the dataset","22925e85":"Unique products in subset of data","a12fa802":"### Recommending all highly correlated products in sequence ","37183220":"#### Importing libraries","7377c43d":"### 3. Build Popularity Recommender model","3e2cb33d":"**Product Id # **\nHere, the products to be displayed by the recommendation system to the above customer based on the purchase history of other customers in the website. ","e016ef65":"Correlation for all items with the item purchased by this customer based on items rated by other customers people who bought the same product","4525be11":"### Correlation Matrix","ad39a72d":"\n### 5. Build Collaborative Filtering model\n\n* Recommend items to users based on purchase history and similarity of ratings provided by other users who bought items to that of a particular customer.\n* A model based collaborative filtering technique is closen here as it helps in making predictinfg products for a particular user by identifying patterns based on preferences from multiple user data.","6a4d9642":"### 2. Take a subset of the dataset to make it less sparse\/ denser. ( For example, keep the users only who has given 50 or more number of ratings )  ","3faf5a7b":"Index # of product ID purchased by customer","3eb61a20":"As expected, the utility matrix obtaned above is sparce, I have filled up the unknown values wth 0.","06f7c446":"** Analysis:**\n\n* The above graph gives us the most popular products (arranged in descending order) sold by the business.\n\n* For eaxmple, product, ID # B0002L5R78 has sales of over 9487, the next most popular product, ID # B0001FTVEK has sales of  5345, etc.     ","455b8bd0":"## Products with bad rating more than 50 times.","e38829d7":"#These are the top 5 recommendations for above example","39a673c6":"### Decomposing the Matrix","14a429f7":"### 7. Get top - K ( K = 5) recommendations. Since our goal is to recommend new products for each user based on his\/her habits, we will recommend 5 new products"}}