{"cell_type":{"e6d9d9f9":"code","c6a00533":"code","b1ed4034":"code","24380533":"code","a2ddaa65":"code","295d06c7":"code","4f2659b7":"code","e1928da2":"code","a1067f57":"code","d4b275f0":"code","8438e993":"code","e84e55e1":"code","32844f2c":"code","2c675265":"code","c5987803":"code","3b955242":"code","f1662bd2":"code","e82225d2":"code","b603d593":"code","5c6a23ca":"code","3c16b66b":"code","2fc8c59e":"code","c10443d6":"code","0d568da7":"code","df6a4af5":"code","05c3042a":"code","f8bb3369":"code","045438d6":"code","6d0d1a9b":"code","55928c3e":"code","e823acfa":"code","f6d6db69":"code","552367b7":"code","022c61c9":"code","87fd6fbb":"code","732c9639":"code","70b8798a":"code","65a9cf55":"code","012a4d10":"code","4ec84efe":"code","bf5b8cd5":"code","e59f582e":"code","f81efc74":"code","09af222b":"code","9f27d474":"code","6de9d259":"code","25a28009":"code","b49a2267":"code","c4f52847":"code","8ba99141":"code","ca1d1322":"code","a78ab97d":"code","b0716555":"code","26ce624e":"code","bc160616":"code","93cf5b35":"code","63af02fe":"code","bbdc13c9":"code","fb1da8b8":"code","de600956":"code","ee75ed9f":"code","0cb795cc":"code","29886091":"code","243a9a95":"code","c880cfb3":"code","24580644":"code","93edf850":"code","2340f49a":"code","8ff8267c":"code","c6e73e35":"code","faa057ca":"code","a59e2db4":"code","8a65d683":"code","8a7681ae":"code","74e8d8c0":"code","58468fd9":"code","3abe8f72":"code","a557f4e4":"code","91c2830e":"code","790121f1":"code","1662e2bc":"code","fcc86547":"code","dde999e1":"code","4522ee55":"code","48634a63":"code","df7ccf46":"code","bea7524b":"code","2afa6f4a":"code","18e52499":"code","cdcc198b":"code","7c83bc50":"code","b9533022":"code","74411ac5":"code","2264b37d":"code","d8769627":"code","72b1b539":"code","6330a7c5":"code","adf396e5":"code","9f13da97":"code","72d9d5d6":"code","7ed25010":"code","ea62e726":"code","b5bf3d95":"code","872b4c92":"code","b954f962":"code","02f5d04b":"code","bd9aaf54":"code","028e638b":"code","9b30e27b":"code","3fb3f9bb":"code","ad7addc8":"code","cb3b549b":"code","3e6adc89":"code","a980101b":"code","f6f76320":"code","538a9872":"code","af6fb300":"code","62434f71":"code","1fa8e2af":"code","40d470a2":"code","dc67a729":"code","56b2c92e":"code","67a96cbd":"code","abcb2658":"code","e5aed5ea":"code","33f4d370":"code","b24a96fa":"code","f87a8280":"code","85a761ea":"code","a7829a9e":"code","84bd2374":"code","f711188f":"code","75dc78f3":"code","e0bb35ce":"code","17cbb989":"code","f60e91d8":"code","44b0c404":"code","f8b7d68c":"code","ffa70c14":"code","c4b1e002":"code","f7ec9f27":"code","6d13668a":"code","f6f294f2":"code","c59b9e15":"code","19831deb":"code","e05350a1":"code","174519a7":"code","ec7d8ed4":"code","324f8662":"code","73b44fdd":"code","a663b0e9":"code","53e9a1f5":"code","851e1690":"code","ef6f823b":"code","410793a0":"code","ec2a9166":"code","ee62c0d4":"code","f1f82b7f":"code","40f984f4":"code","553c316c":"code","484b1385":"code","c212f2fb":"code","bba049be":"code","215d51f5":"code","c6ea9517":"code","d1a6f5e7":"code","8feea065":"code","4e2ee406":"code","6bfe37cd":"code","6aa4470e":"code","abe149c4":"code","2982a0a1":"code","569191a4":"code","483bcdaa":"code","6bf5c6d9":"code","b4a816bc":"code","e21b0a54":"code","a8463c65":"code","e1405699":"code","aaec53cd":"code","7641a840":"code","1bd63938":"code","12b4da84":"code","f8e0d0ea":"code","98b0de6a":"code","766f96e3":"code","908c4792":"code","a75dd261":"code","6e8e5944":"code","2e6cb776":"code","83964540":"code","009ff920":"code","c3aa46ac":"code","a5852b45":"markdown","8a3dc7c1":"markdown","6fe0a137":"markdown","db6c50a2":"markdown","f99c80c3":"markdown","5f056948":"markdown","de9af9f7":"markdown","ebef5c7e":"markdown","d7c4ee2c":"markdown","50299adc":"markdown","0af7d265":"markdown","1fd320b2":"markdown","3a5f1cd1":"markdown","9ef65a77":"markdown","7dbfdb43":"markdown","708b0761":"markdown","1b78b654":"markdown","46f95320":"markdown","a5ef547c":"markdown","da477fff":"markdown","7dacb141":"markdown","2c128770":"markdown","375d6d57":"markdown","cc731812":"markdown","24bc1667":"markdown","cd6ac069":"markdown","d805829b":"markdown","edf94112":"markdown","75018e1a":"markdown","e5d4ea76":"markdown","fa1d7332":"markdown","77752fbb":"markdown","e9b98ef3":"markdown","2c26d7d4":"markdown","4ab67881":"markdown","1b158225":"markdown","15d5434e":"markdown","5b710a01":"markdown","40b1c88b":"markdown","85e90536":"markdown","f5d4ab4b":"markdown","4067e7f4":"markdown","3e7943d0":"markdown","a3e81bb3":"markdown","e9c4282a":"markdown","c3514431":"markdown","18ba4b69":"markdown","41903d01":"markdown","a890dc57":"markdown","0e5fa5b1":"markdown","c112391c":"markdown","69db6f12":"markdown","eeb7de42":"markdown","5f0c45b0":"markdown","fcce19f3":"markdown","d928a2be":"markdown","5c3f2f65":"markdown","0c7d470d":"markdown","cf9dde35":"markdown","c1fa5ad0":"markdown","72d6a5bf":"markdown"},"source":{"e6d9d9f9":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom matplotlib import pyplot as plt\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom pandas.api.types import CategoricalDtype\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.api import OLS\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n!pip install lightgbm\nfrom lightgbm import LGBMClassifier\n!pip install catboost\nfrom catboost import CatBoostClassifier","c6a00533":"train= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","b1ed4034":"test= pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","24380533":"test.head()","a2ddaa65":"train.head()","295d06c7":"train.info()","4f2659b7":"test.info()","e1928da2":"train[\"Sex\"]= pd.Categorical(train[\"Sex\"])\ntrain[\"Embarked\"]= pd.Categorical(train[\"Embarked\"])\ntrain.info()","a1067f57":"test[\"Sex\"]= pd.Categorical(test[\"Sex\"])\ntest[\"Embarked\"]= pd.Categorical(test[\"Embarked\"])","d4b275f0":"sns.barplot(x=train[\"Survived\"],y=train[\"Survived\"].value_counts())\nplt.figure(figsize=(5,5));","8438e993":"plt.figure(figsize=(5,5))\nsns.barplot(x=\"Pclass\",y=\"Fare\",hue=\"Survived\",data=train);","e84e55e1":"sns.lineplot(x=\"Pclass\",y=\"Fare\",data=test);","32844f2c":"sns.boxplot(x=\"Embarked\",y=\"Fare\",hue=\"Survived\",data=train);","2c675265":"sns.barplot(x=\"Pclass\",y=\"Fare\",hue=\"Embarked\",data=train);","c5987803":"sns.displot(x=train['Age'],hue=train['Survived'],kde=\"True\",bins=50)\nplt.show()","3b955242":"sns.catplot(x=\"Survived\",y=\"Age\",hue=\"Sex\",kind=\"violin\",data=train);","f1662bd2":"train.groupby([\"Pclass\",\"Sex\"])[[\"Survived\"]].mean()","e82225d2":"sns.heatmap(train.corr(method=\"spearman\"));","b603d593":"sns.heatmap(train.groupby([\"Ticket\"])[[\"Survived\"]].mean());","5c6a23ca":"sns.heatmap(train.groupby([\"Cabin\"])[[\"Survived\"]].mean());","3c16b66b":"female=train[train[\"Sex\"]==\"female\"]\nsns.scatterplot(x=female[\"Age\"],y=female[\"Age\"].value_counts(),hue=train[\"Pclass\"]);","2fc8c59e":"male=train[train[\"Sex\"]==\"male\"]\nsns.scatterplot(x=male[\"Age\"],y=male[\"Age\"].value_counts(),hue=train[\"Pclass\"]);","c10443d6":"train.groupby([\"Pclass\",\"Sex\"])[[\"Age\"]].mean()","0d568da7":"train.groupby(\"Sex\")[[\"Age\"]].mean()","df6a4af5":"train.head()","05c3042a":"train['Title']=train.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())","f8bb3369":"train.head()","045438d6":"train[\"Title\"].value_counts()","6d0d1a9b":"title={\"Capt\":       \"Officer\",\n       \"Col\":        \"Officer\",\n       \"Major\":      \"Officer\",\n       \"Jonkheer\":   \"Royalty\",\n       \"Don\":        \"Royalty\",\n       \"Sir\" :       \"Royalty\",\n       \"Dr\":         \"Officer\",\n       \"Rev\":        \"Officer\",\n       \"the Countess\":\"Royalty\",\n       \"Dona\":       \"Royalty\",\n       \"Mme\":        \"Mrs\",\n       \"Mlle\":       \"Miss\",\n       \"Ms\":         \"Mrs\",\n       \"Mr\" :        \"Mr\",\n       \"Mrs\" :       \"Mrs\",\n       \"Miss\" :      \"Miss\",\n       \"Master\" :    \"Master\",\n       \"Lady\" :      \"Royalty\"}","55928c3e":"train[\"Title\"]=train[\"Title\"].map(title)","e823acfa":"train.head()","f6d6db69":"train[\"Title\"].value_counts()","552367b7":"sns.barplot(x=\"Title\",y=\"Survived\",hue=\"Pclass\",data=train);","022c61c9":"train.drop(\"Name\",axis=1,inplace=True)","87fd6fbb":"train.info()","732c9639":"train[\"Title\"]= pd.Categorical(train[\"Title\"])","70b8798a":"male=train[train[\"Sex\"]==\"male\"]\nsns.scatterplot(x=male[\"Age\"],y=male[\"Age\"].value_counts(),hue=train[\"Title\"]);","65a9cf55":"male=train[train[\"Sex\"]==\"female\"]\nsns.scatterplot(x=male[\"Age\"],y=male[\"Age\"].value_counts(),hue=train[\"Title\"]);","012a4d10":"train.groupby([\"Title\",\"Sex\"])[[\"Age\"]].mean()","4ec84efe":"train[\"Cabin\"].isnull().sum()","bf5b8cd5":"len(train)","e59f582e":"train[\"Cabin\"].value_counts()","f81efc74":"train_notnull=train.dropna()\ncabins=[]\nfor i in np.arange(0,train_notnull.shape[0]):\n    variable=train_notnull.iloc[i,:]\n    cabin=variable[\"Cabin\"][0:1]\n    cabins.append(cabin)","09af222b":"train_notnull[\"Cabin\"]=cabins","9f27d474":"train[\"Cabin\"]=train_notnull[\"Cabin\"]","6de9d259":"train[\"Cabin\"].value_counts()","25a28009":"sns.scatterplot(x=\"Title\",y=\"Cabin\",data=train);","b49a2267":"train.info()","c4f52847":"train[\"Cabin\"]= pd.Categorical(train[\"Cabin\"])","8ba99141":"len(train[train[\"Cabin\"].isnull()==True])","ca1d1322":"train.drop(\"Cabin\",axis=1,inplace=True)","a78ab97d":"train[\"FamilySize\"]= train[\"Parch\"]+train[\"SibSp\"]+1\ntrain.head()","b0716555":"train[[\"FamilySize\",\"Parch\",\"SibSp\",\"Survived\"]].corr()","26ce624e":"train.drop([\"Parch\",\"SibSp\"],axis=1,inplace=True)","bc160616":"train.info()","93cf5b35":"train.drop(\"Ticket\",axis=1,inplace=True)","63af02fe":"nonsurvived=train.drop(\"Survived\",axis=1)\nsurvived= train[\"Survived\"]\ntrain= pd.concat([nonsurvived,survived],axis=1)\ntrain.head()","bbdc13c9":"train.drop(\"PassengerId\",axis=1,inplace=True)","fb1da8b8":"test['Title']=test.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())\ntest[\"Title\"]=test[\"Title\"].map(title)","de600956":"test.head()","ee75ed9f":"test.drop(\"Name\",axis=1,inplace=True)","0cb795cc":"test.info()","29886091":"test[\"Title\"]= pd.Categorical(test[\"Title\"])","243a9a95":"test[\"Cabin\"].isnull().sum()","c880cfb3":"test_notnull=test.dropna()\ncabins=[]\nfor i in np.arange(0,test_notnull.shape[0]):\n    variable=test_notnull.iloc[i,:]\n    cabin=variable[\"Cabin\"][0:1]\n    cabins.append(cabin)","24580644":"test_notnull[\"Cabin\"]=cabins","93edf850":"test[\"Cabin\"]=test_notnull[\"Cabin\"]","2340f49a":"test[\"Cabin\"].value_counts()","8ff8267c":"test.info()","c6e73e35":"test[\"Cabin\"]= pd.Categorical(test[\"Cabin\"])","faa057ca":"len(test[test[\"Cabin\"].isnull()==True])","a59e2db4":"test.drop(\"Cabin\",axis=1,inplace=True)","8a65d683":"test[\"FamilySize\"]= test[\"Parch\"]+test[\"SibSp\"]+1\ntest.head()","8a7681ae":"test.drop([\"Parch\",\"SibSp\"],axis=1,inplace=True)","74e8d8c0":"test.info()","58468fd9":"test.drop(\"Ticket\",axis=1,inplace=True)","3abe8f72":"test.head()","a557f4e4":"train.isnull().sum()","91c2830e":"train[train[\"Embarked\"].isnull()]","790121f1":"sns.distplot(train[\"Fare\"]);","1662e2bc":"train.groupby([\"Embarked\",\"Pclass\"])[[\"Fare\"]].median()","fcc86547":"train[\"Embarked\"].fillna(\"C\",inplace=True)","dde999e1":"train.isnull().sum()","4522ee55":"train.info()","48634a63":"sns.kdeplot(train[\"Age\"],shade=True);","df7ccf46":"train[\"Age\"].describe().T","bea7524b":"sns.scatterplot(x=train[\"Age\"],y=train[\"Age\"].value_counts(),hue=train[\"Sex\"]);","2afa6f4a":"train.groupby(\"Sex\")[[\"Age\"]].median()","18e52499":"sns.scatterplot(x=train[\"Age\"],y=train[\"Age\"].value_counts(),hue=train[\"Sex\"],size=train[\"Pclass\"]);","cdcc198b":"train.groupby([\"Pclass\",\"Sex\"])[[\"Age\"]].median()","7c83bc50":"sns.catplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train,kind=\"violin\");","b9533022":"sns.barplot(x=\"Pclass\",y=\"Age\",hue=\"Sex\",data=train);","74411ac5":"sns.barplot(x=\"Title\",y=\"Age\",data=train);","2264b37d":"train.groupby([\"Title\"])[[\"Age\"]].median()","d8769627":"average_pclass= train.groupby([\"Sex\",\"Pclass\"])[[\"Age\"]].median()\naverage_pclass=round(average_pclass)\naverage_pclass","72b1b539":"train.describe().T","6330a7c5":"sns.distplot(train[\"Age\"]);","adf396e5":"train.corr(method=\"spearman\")","9f13da97":"train[\"Age\"].median()","72d9d5d6":"errors_pclass= average_pclass-train[\"Age\"].median()\nerrors_pclass","7ed25010":"std_pclass=(100\/average_pclass)*errors_pclass\nstd_pclass","ea62e726":"std_pclass[\"Age\"].mean()","b5bf3d95":"sns.barplot(x=\"Title\",y=\"Age\",hue=\"Sex\",data=train);","872b4c92":"average_title= train.groupby([\"Title\",\"Sex\"])[[\"Age\"]].median()\naverage_title=round(average_title)\naverage_title","b954f962":"average_title.dropna(inplace=True)","02f5d04b":"average_title","bd9aaf54":"errors_title= average_title-train[\"Age\"].median()\nerrors_title","028e638b":"std_title=(100\/average_title)*errors_title\nstd_title","9b30e27b":"std_title[\"Age\"].mean()","3fb3f9bb":"sns.scatterplot(x=train[\"Age\"],y=train[\"Age\"].value_counts(),hue=train[\"Title\"],size=train[\"Sex\"]);","ad7addc8":"indexes_by_age= train[train[\"Age\"].isnull()==True].index","cb3b549b":"train.iloc[indexes_by_age]","3e6adc89":"train[\"Age\"].fillna(train.groupby([\"Sex\",\"Pclass\"])[\"Age\"].transform(\"median\"),inplace=True)","a980101b":"train.iloc[indexes_by_age]","f6f76320":"train[\"Age\"]= round(train[\"Age\"])","538a9872":"train.iloc[indexes_by_age]","af6fb300":"train.isnull().sum()","62434f71":"test[test[\"Fare\"].isnull()]","1fa8e2af":"sns.kdeplot(test[\"Fare\"],shade=True);","40d470a2":"test[\"Fare\"].fillna(test.groupby([\"Embarked\",\"Pclass\"])[\"Fare\"].transform(\"median\"),inplace=True)","dc67a729":"test.isnull().sum()","56b2c92e":"sns.kdeplot(test[\"Age\"],shade=True);","67a96cbd":"test.describe().T","abcb2658":"test[\"Age\"].median()","e5aed5ea":"test.groupby([\"Pclass\",\"Sex\"])[[\"Age\"]].median()","33f4d370":"average_pclass_test= test.groupby([\"Sex\",\"Pclass\"])[[\"Age\"]].median()\naverage_pclass_test= round(average_pclass_test)\naverage_pclass_test","b24a96fa":"errors_pclass_test= average_pclass_test - test[\"Age\"].median()\nerrors_pclass_test","f87a8280":"(100\/average_pclass_test)*errors_pclass_test","85a761ea":"test.groupby([\"Title\",\"Sex\"])[[\"Age\"]].median()","a7829a9e":"average_title_test= test.groupby([\"Sex\",\"Title\"])[[\"Age\"]].median()\naverage_title_test= round(average_title_test)\naverage_title_test","84bd2374":"average_title_test.dropna(inplace=True)","f711188f":"errors_title_test= average_title_test - test[\"Age\"].median()\nerrors_title_test","75dc78f3":"(100\/average_title_test)*errors_title_test","e0bb35ce":"indexes_by_age_test= test[test[\"Age\"].isnull()==True].index","17cbb989":"test[\"Age\"].fillna(test.groupby([\"Sex\",\"Pclass\"])[\"Age\"].transform(\"median\"),inplace=True)","f60e91d8":"test.iloc[indexes_by_age_test]","44b0c404":"test[\"Age\"]= round(test[\"Age\"])\ntest.iloc[indexes_by_age_test]","f8b7d68c":"test.isnull().sum()","ffa70c14":"train.head()","c4b1e002":"train.info()","f7ec9f27":"test.head()","6d13668a":"test.info()","f6f294f2":"sex= pd.get_dummies(train[\"Sex\"],drop_first=True)\nsex.columns=[\"Sex_male\"]\ntrain.drop(\"Sex\",axis=1,inplace=True)\nembarked= pd.get_dummies(train[\"Embarked\"],drop_first=True)\nembarked.columns=[\"Embarked_Q\",\"Embarked_S\"]\ntrain.drop(\"Embarked\",axis=1,inplace=True)\ntrain= pd.concat([train,sex,embarked],axis=1)\ntrain.head()","c59b9e15":"train[\"Title\"]=LabelEncoder().fit_transform(train[\"Title\"])","19831deb":"sex_test= pd.get_dummies(test[\"Sex\"],drop_first=True)\nsex_test.columns=[\"Sex_male\"]\ntest.drop(\"Sex\",axis=1,inplace=True)\nembarked_test= pd.get_dummies(test[\"Embarked\"],drop_first=True)\nembarked_test.columns=[\"Embarked_Q\",\"Embarked_S\"]\ntest.drop(\"Embarked\",axis=1,inplace=True)\ntest= pd.concat([test,sex_test,embarked_test],axis=1)\ntest[\"Title\"]=LabelEncoder().fit_transform(test[\"Title\"])","e05350a1":"train.info()","174519a7":"test.info()","ec7d8ed4":"X= train.drop(\"Survived\",axis=1)","324f8662":"y=train[[\"Survived\"]]","73b44fdd":"X_train,X_test,y_train,y_test= train_test_split(X,y,train_size=0.7,random_state=42)","a663b0e9":"X_train[\"Age\"]=StandardScaler().fit_transform(np.array(X_train[\"Age\"]).reshape(-1,1))","53e9a1f5":"X_train[\"Fare\"]=StandardScaler().fit_transform(np.array(X_train[\"Fare\"]).reshape(-1,1))","851e1690":"X_test[\"Age\"]=StandardScaler().fit_transform(np.array(X_test[\"Age\"]).reshape(-1,1))","ef6f823b":"X_test[\"Fare\"]=StandardScaler().fit_transform(np.array(X_test[\"Fare\"]).reshape(-1,1))","410793a0":"X_train.head()","ec2a9166":"X_test.head()","ee62c0d4":"test[\"Age\"]=StandardScaler().fit_transform(np.array(test[\"Age\"]).reshape(-1,1))","f1f82b7f":"test[\"Fare\"]=StandardScaler().fit_transform(np.array(test[\"Fare\"]).reshape(-1,1))","40f984f4":"test.head()","553c316c":"from sklearn.neighbors import KNeighborsClassifier","484b1385":"knc_params={\"n_neighbors\":[3,5,10,20,30],\n            \"weights\":[\"uniform\",\"distance\"]}\nknc_grid= GridSearchCV(KNeighborsClassifier(),knc_params,cv=10,n_jobs=-1,scoring=\"accuracy\").fit(X_train,y_train)","c212f2fb":"knc_grid.best_params_","bba049be":"knc_model= KNeighborsClassifier(n_neighbors=20,weights=\"uniform\").fit(X_train,y_train)","215d51f5":"y_pred= knc_model.predict(X_test)","c6ea9517":"accuracy_score(y_test,y_pred)","d1a6f5e7":"cross_val_score(knc_model,X,y,cv=10).mean()","8feea065":"svc_params={\"C\": [0.01,0.001,0.1,1],\n            \"kernel\": [\"linear\",\"rbf\"],\n            \"gamma\": [\"scale\",\"auto\"],\n            \"max_iter\": [10,50,100,200]}\nsvc_grid= GridSearchCV(SVC(),svc_params,cv=10,n_jobs=-1,scoring=\"accuracy\").fit(X_train,y_train)\nsvc_grid.best_params_","4e2ee406":"svc_model= SVC(kernel=\"rbf\",C=1,gamma=\"auto\",max_iter=200).fit(X_train,y_train)","6bfe37cd":"y_pred_svc= svc_model.predict(X_test)","6aa4470e":"accuracy_score(y_pred_svc,y_test)","abe149c4":"cross_val_score(svc_model,X,y,cv=10,scoring=\"accuracy\").mean()","2982a0a1":"rf_params={\"n_estimators\": [100,500,1000],\n           \"min_samples_split\": [3,5,10],\n           \"min_samples_leaf\": [3,5,10,15]}\nrf_cv= GridSearchCV(RandomForestClassifier(),rf_params,cv=10,n_jobs=-1,scoring=\"accuracy\").fit(X_train,y_train)\nrf_cv.best_params_","569191a4":"rf_tuned= RandomForestClassifier(min_samples_split=2,n_estimators=1500,min_samples_leaf=2).fit(X_train,y_train)\ny_pred_rf= rf_tuned.predict(X_test)\naccuracy_score(y_test,y_pred_rf)","483bcdaa":"cross_val_score(rf_tuned,X,y,cv=10,scoring=\"accuracy\").mean()","6bf5c6d9":"print(classification_report(y_test,y_pred_rf))","b4a816bc":"from sklearn.model_selection import GridSearchCV\ncart_params= {\"max_depth\": [3,5,10,15,20],\n              \"min_samples_split\": [1,3,5,10,20],\n              \"min_samples_leaf\": [1,3,5,10,20]}\ncart_cv= GridSearchCV(DecisionTreeClassifier(),cart_params,cv=10,n_jobs=-1,scoring=\"accuracy\").fit(X_train,y_train)\ncart_cv.best_params_","e21b0a54":"cart_model_tuned= DecisionTreeClassifier(max_depth=5,min_samples_split=10,min_samples_leaf=1).fit(X_train,y_train)\ny_tuned_cart= cart_model_tuned.predict(X_test)\naccuracy_score(y_test,y_tuned_cart)","a8463c65":"cross_val_score(cart_model_tuned,X,y,cv=10,scoring=\"accuracy\").mean()","e1405699":"gbm_params= {\"learning_rate\":[0.1,0.01,0.001],\n             \"n_estimators\": [500,1000,1500],\n             \"min_samples_split\": [2,4],\n             \"min_samples_leaf\": [2,4],\n             \"max_depth\": [3,6,15]}\ngbm_cv= GridSearchCV(GradientBoostingClassifier(),gbm_params,cv=10,n_jobs=-1,scoring=\"accuracy\").fit(X_train,y_train)\ngbm_cv.best_params_","aaec53cd":"gbm_tuned= GradientBoostingClassifier(learning_rate=0.01,max_depth=3,min_samples_leaf=2,\n                                      min_samples_split=2,n_estimators=1500).fit(X_train,y_train)\ny_tuned_gbm= gbm_tuned.predict(X_test)\naccuracy_score(y_test,y_tuned_gbm)","7641a840":"cross_val_score(gbm_tuned,X,y,cv=10,scoring=\"accuracy\").mean()","1bd63938":"print(classification_report(y_test,y_tuned_gbm))","12b4da84":"Importance_level = pd.DataFrame({\"Importance\":gbm_tuned.feature_importances_*100},\n                         index= X_train.columns)\nImportance_level.sort_values(by= \"Importance\",\n                             axis=0,\n                             ascending=True,inplace=True)\nfrom matplotlib import pyplot as plt\nImportance_level.plot(kind=\"barh\",color=\"red\")\nplt.xlabel(\"Significance levels of variables\")\nplt.title(\"Significance levels of Titanic data set variables\");","f8e0d0ea":"!pip install xgboost","98b0de6a":"from xgboost import XGBClassifier","766f96e3":"xgb_params= {\"learning_rate\":[0.1,0.01,0.001],\n             \"n_estimators\": [500,1000,1500],\n             \"gamma\":[3,5,10]}\nxgb_cv= GridSearchCV(XGBClassifier(),xgb_params,cv=10,n_jobs=-1,scoring=\"accuracy\").fit(X_train,y_train)\nxgb_cv.best_params_","908c4792":"xgb_tuned= XGBClassifier(learning_rate=0.1,n_estimators=2000,gamma=3).fit(X_train,y_train)\ny_tuned_xgb= xgb_tuned.predict(X_test)\naccuracy_score(y_test,y_tuned_xgb)","a75dd261":"cross_val_score(xgb_tuned,X,y,cv=10,scoring=\"accuracy\").mean()","6e8e5944":"lgbm_params= {\"n_estimators\": [100,1000,1500],\n              \"max_depth\": [4,5,-1],\n              \"learning_rate\": [0.1,0.001,0.01],\n              \"subsample\": [0.5,1],\n              \"min_child_samples\": [10,20]}\nfrom sklearn.model_selection import GridSearchCV\nlgbm_cv= GridSearchCV(LGBMClassifier(),lgbm_params,cv=10,n_jobs=-1).fit(X_train,y_train)\nlgbm_cv.best_params_","2e6cb776":"lgbm_tuned= LGBMClassifier(learning_rate=0.1,max_depth=4,\n                           n_estimators=1000,subsample=0.5,\n                           min_child_samples=5).fit(X_train,y_train)\ny_tuned_lgbm= lgbm_tuned.predict(X_test)\naccuracy_score(y_test,y_tuned_lgbm)","83964540":"cross_val_score(lgbm_tuned,X,y,cv=10).mean()","009ff920":"test.head()","c3aa46ac":"passid= test[\"PassengerId\"]\nprediction= gbm_tuned.predict(test.drop(\"PassengerId\",axis=1))\noutput = pd.DataFrame({ 'PassengerId' : passid, 'Survived': prediction })\noutput.to_csv('titanic_gradient_boosting.csv', index=False)","a5852b45":"### K NEIGHBORS CLASSIFIER","8a3dc7c1":"#### Fare varies by Embarked","6fe0a137":"#### it means most of the people are dead","db6c50a2":"#### TEST","f99c80c3":"#### FAMILY SIZE","5f056948":"### SVM","de9af9f7":"### FARE","ebef5c7e":"### Gradient Boosting Classifier","d7c4ee2c":"#### CABIN","50299adc":"## Let's fill in the missing values in Train Dataset","0af7d265":"##### The variables FamilySize and Parch and SibSp mean the same thing. So Parch and SibSp can be deleted","1fd320b2":"##### Median error value (%)","3a5f1cd1":"##### Check the missing value","9ef65a77":"## Machine Learning Methods ","7dbfdb43":"##### If the cabin names are simpler, the models will be more successful.","708b0761":"#### PASSENGERID","1b78b654":"# TITANIC DATASET MACHINE LEARNING PREDICTION","46f95320":"### One Hot Encoding","a5ef547c":"##### The total population of the family can be substituted for the Parch and SibSp variables.","da477fff":"##### The passengerid variable is not needed in the Train dataset\n","7dacb141":"![](http:\/\/rpmarchildon.com\/wp-content\/uploads\/2018\/06\/titanic_class_cabin_locations.png)","2c128770":"### Light Gradient Boosting Classifier","375d6d57":"## EDITING DATASETS","cc731812":"### TEST","24bc1667":"### Transform object to Categorical","cd6ac069":"##### Since the age variable does not have a normal distribution, the median is taken.","d805829b":"#### FAMILY SIZE","edf94112":"#### TRAIN","75018e1a":"### TRAIN","e5d4ea76":"#### Check the datasets","fa1d7332":"## Let's fill in the missing values in Test Dataset","77752fbb":"#### EMBARKED","e9b98ef3":"### Preparation for machine learning models","2c26d7d4":"#### TITLE","4ab67881":"##### It is deleted because there are too many missing values in the cabinet variable","1b158225":"#### TICKET","15d5434e":"### Decision Tree Classifier","5b710a01":"##### The ticket number varies a lot from person to person, so the ticket variable is deleted so that it does not adversely affect machine learning models.","40b1c88b":"### Feature Scaling","85e90536":"##### Some machine learning techniques do not work with data of type object.Datas need to be categorical type.","f5d4ab4b":"- Filling the age value in some groups with the general median age can be a problem. Therefore, age values will be filled by groups.","4067e7f4":"* The median age of the sexes is not much different. All missing age values can be filled in with the general median value of age.","3e7943d0":"##### If the missing age values are filled with the median value, the amount of error to be made:","a3e81bb3":"### Reading the data","e9c4282a":"## Let's visualize Train data set","c3514431":"### Random Forest Classifier","18ba4b69":"#### TICKET","41903d01":"##### Age by sex and pclass:","a890dc57":"### Import Libraries","0e5fa5b1":"![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/fd\/RMS_Titanic_3.jpg\/1200px-RMS_Titanic_3.jpg)","c112391c":"### ***XGBOOST***","69db6f12":"#### CABIN","eeb7de42":"#### Pclass are different each other","5f0c45b0":"#### AGE","fcce19f3":"### AGE","d928a2be":"##### I will fill in the missing data in the age variable with machine learning techniques","5c3f2f65":"##### Median error value (%)","0c7d470d":"#### Age value has not a normal distribution. Missing values can be filled with median values, \n#### but still need to be examined","cf9dde35":"##### Other variables in the row with missing Pclass values are examined","c1fa5ad0":"#### TITLE","72d6a5bf":"#### Age value has not normal distribution. Missing values can be filled with median values, but still need to be examined"}}