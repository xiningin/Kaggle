{"cell_type":{"fdeb1f8f":"code","9bc79e5d":"code","e129cde3":"code","f4bb953c":"code","2370eb0f":"code","9a183bc1":"code","e6cc91d3":"code","e61d227d":"code","5453ab31":"code","84810d91":"code","d57e5585":"code","bbc446d0":"code","8c5f66e8":"code","538c1c2b":"code","848a1d00":"code","dcd1a2a7":"code","f7e214dc":"code","dfea423b":"code","75404ff1":"code","f301e7c7":"code","8c5f15df":"code","d8cf2464":"code","4d2cd972":"code","88441a34":"code","84ae2234":"code","8f2a2742":"code","aea516f4":"code","bf1e87f8":"code","65b35d2d":"code","c1ea2abd":"code","505be1e3":"code","e5383bb0":"code","6c2af460":"code","fcf323ce":"code","e98694ba":"code","4037a9f1":"code","ce60c49b":"code","682889e9":"markdown","fc0dac45":"markdown","ac496f86":"markdown","0483c445":"markdown","d39ce6cd":"markdown","5cf40771":"markdown"},"source":{"fdeb1f8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bc79e5d":"# Import Pandas\nimport pandas as pd\n\n# Loading Data sets\nfull_url='\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv'\n\nfull_url1='\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv'\n\ncredits = pd.read_csv(full_url)\nmovies=pd.read_csv(full_url1)","e129cde3":"# Printing 1st 5 elements of credits dataset\ncredits.head()","f4bb953c":"# Printing 1st 5 elements of movies dataset\nmovies.head()","2370eb0f":"# Printing the shapes of both the datasets\nprint(\"Credits:\",credits.shape)\nprint(\"Movies:\",movies.shape)","9a183bc1":"# Renaming the column of credits data set\ncredits_renamed=credits.rename(index=str,columns={'movie_id':'id'})\ncredits_renamed.head()","e6cc91d3":"# Merging both data sets\nmerge=movies.merge(credits_renamed,on='id')\nmerge.head(2)","e61d227d":"# Dropping unnecessary columns \ncleaned=merge.drop(columns=['homepage','title_x','title_y','status','production_countries'])\ncleaned.head()","5453ab31":"cleaned['overview'].head()","84810d91":"cleaned['overview'].isnull().sum()","d57e5585":"cleaned['overview']=cleaned['overview'].fillna('')","bbc446d0":"#Import TfIdfVectorizer from scikit-learn\n## Refer : http:\/\/www.tfidf.com\/\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english',ngram_range=(1,3),min_df=3,analyzer='word')\n\n#Replace NaN with an empty string\ncleaned['overview'] = cleaned['overview'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(cleaned['overview'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","8c5f66e8":"from sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","538c1c2b":"print(cosine_sim.shape)\nprint(cosine_sim[1])","848a1d00":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(cleaned.index, index=cleaned['original_title']).drop_duplicates()\n","dcd1a2a7":"def get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return cleaned['original_title'].iloc[movie_indices]","f7e214dc":"# Getting the recommendation\nget_recommendations('Avatar')","dfea423b":"get_recommendations('Spectre')","75404ff1":"cleaned.columns","f301e7c7":"cleaned['crew'].values[0]","8c5f15df":"# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\n\nfor feature in features:\n    cleaned[feature] = cleaned[feature].apply(literal_eval)\n    \n## about literal_eval()    \n## https:\/\/stackoverflow.com\/questions\/15197673\/ ","d8cf2464":"cleaned['crew'].values[0]","4d2cd972":"##function to get directors name\ndef get_director(x):\n    for i in x:\n        if i['job']=='Director':\n            return i['name']\n    return np.nan","88441a34":"## a function that will return the top 3 elements or the entire list, whichever is more. \n## Here the list refers to the cast, keywords, and genres.\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n    \n    #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[ : 3]\n        return names\n\n    #Return empty list in case of missing\/malformed data\n    return []","84ae2234":"# Define new director, cast, genres and keywords features \n## that are in a suitable form.\ncleaned['director'] = cleaned['crew'].apply(get_director)\n\nfeatures = ['cast', 'keywords', 'genres']\n\nfor feature in features:\n    cleaned[feature] = cleaned[feature].apply(get_list)","8f2a2742":"# Print the new features of the first 3 films\ncleaned[['original_title', 'cast', 'director', 'keywords', 'genres']].head(3)","aea516f4":"cleaned['cast'].values[0]","bf1e87f8":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","65b35d2d":"# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    cleaned[feature] = cleaned[feature].apply(clean_data)","c1ea2abd":"def create_metadata(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\n# Create a new metadata feature\ncleaned['metadata'] = cleaned.apply(create_metadata, axis=1)","505be1e3":"cleaned[['metadata']].head(2)","e5383bb0":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\n\ncount_matrix = count.fit_transform(cleaned['metadata'])","6c2af460":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","fcf323ce":"# Reset index of your main DataFrame and construct reverse mapping as before\n\n## cleaned = cleaned.reset_index()\nindices = pd.Series(cleaned.index, index = cleaned['original_title'])\nindices[:2]","e98694ba":"## You can now reuse your get_recommendations() function \n## by passing in the new cosine_sim2 matrix as your second argument.\n\nget_recommendations('The Dark Knight Rises', cosine_sim2)","4037a9f1":"indices.head(10)","ce60c49b":"get_recommendations('Harry Potter and the Half-Blood Prince', cosine_sim2)","682889e9":"#  **Enchancements**","fc0dac45":"Recommender systems can be classified into Two types:\n\n> **Content-based recommenders**: suggest similar items based on a particular item. This system uses item metadata, such as genre, director, description, actors, etc. for movies, to make these recommendations. The general idea behind these recommender systems is that if a person likes a particular item, he or she will also like an item that is similar to it. And to recommend that, it will make use of the user's past item metadata. A good example could be YouTube, where based on your history, it suggests you new videos that you could potentially watch.\n\n> **Collaborative filtering engines**: these systems are widely used, and they try to predict the rating or preference that a user would give an item-based on past ratings and preferences of other users. Collaborative filters do not require item metadata like its content-based counterparts.","ac496f86":"Recommender systems are among the most popular applications of data science today. They are used to predict the \"rating\" or \"preference\" that a user would give to an item. Almost every major tech company has applied them in some form. Amazon uses it to suggest products to customers, YouTube uses it to decide which video to play next on autoplay, and Facebook uses it to recommend pages to like and people to follow.\n\nRecommender systems have also been developed to explore research articles and experts, collaborators, and financial services. ","0483c445":"Here we are going to implement **Content Based Filtering**","d39ce6cd":"I would like to humbly and sincerely thank my mentor [Rocky Jagtiani](https:\/\/www.linkedin.com\/today\/author\/rocky-jagtiani-3b390649\/). He is more of a friend to me then mentor. The Machine Learning course taught by him and various projects we did and are still doing is the best way to learn and skill in Data Science field. See https:\/\/datascience.suvenconsultants.com once for more.","5cf40771":" Myslef [Shivam Parab](https:\/\/www.linkedin.com\/in\/shivam-parab-715b19199\/) am creating an ML based Recommendation Engine in collaboration with [Mr. Rocky Jagtiani](https:\/\/www.linkedin.com\/today\/author\/rocky-jagtiani-3b390649\/)\n> This is a simple Data Science project on Movies Recommendation System which recommends you the movie based on the Review of previous movie.\n\n> Dataset: tmdb_5000_credits.csv,tmdb_5000_movies.csv from kaggle itself\n\n> Tech Stack used: pandas, Scikit-learn,Python\n\n> Recommended links : \n\n> https:\/\/datascience.suvenconsultants.com  ( For DS \/ AI \/ ML )\n\n> https:\/\/monster.suvenconsultants.com  ( For Web development )"}}