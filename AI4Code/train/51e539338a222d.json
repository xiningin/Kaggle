{"cell_type":{"9b54cab6":"code","5f0e4a26":"code","7c89ded2":"code","613c8831":"code","844108c5":"code","96c9ec68":"code","dbe66be1":"code","faa5adc5":"code","7d1a17df":"code","0337f108":"code","a00b4d0c":"code","c16396fc":"code","c83025e4":"code","e8eedd93":"code","6a3a3f77":"code","b0b6fa06":"code","69d3cebf":"code","df7a23a7":"code","b39f0bcc":"code","aca8b11e":"code","85737d39":"code","6b6038ad":"code","612342fa":"code","7789d62e":"code","7d88a34c":"code","c24ff4a1":"markdown","d17e933f":"markdown","b9506367":"markdown","9d01a42d":"markdown","980b5523":"markdown","9de66121":"markdown","e2d61d4d":"markdown","9fac868d":"markdown","a3eee828":"markdown","dee436ba":"markdown","ba27ee76":"markdown","cf03a96d":"markdown","576d394b":"markdown","bf731f0e":"markdown","af310eaf":"markdown"},"source":{"9b54cab6":"import pandas as pd\nimport numpy as np\nimport datetime\nfrom datetime import timedelta\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = (20,5)\n\ncombo = pd.read_csv('..\/input\/pjm-cleansing\/combo.csv')\nrolling = pd.read_csv('..\/input\/pjm-cleansing\/rolling.csv')\ncombo_temp = pd.read_csv('..\/input\/pjm-cleansing\/combo_temp.csv')","5f0e4a26":"combo_columns = combo.columns.values.tolist()\ncombo_columns = combo_columns[1:]\ncombo = combo.filter(items=combo_columns)\ncombo.head()","7c89ded2":"rolling_columns = rolling.columns.values.tolist()\nrolling_columns = rolling_columns[1:]\nrolling = rolling.filter(items=rolling_columns)\nrolling.head()","613c8831":"combo_temp.head()","844108c5":"combo.describe()","96c9ec68":"rolling.describe()","dbe66be1":"combo_temp.describe()","faa5adc5":"not_holiday = combo['Holiday_Variable'] == 0\ncombo[not_holiday].plot(kind='box', title = 'Electric Consumption, Not Holiday')\nplt.show()\ncombo[not_holiday].describe()","7d1a17df":"is_holiday = combo['Holiday_Variable'] == 1\ncombo[is_holiday].plot(kind='box', title = 'Electric Consumption, Holiday')\nplt.show()\ncombo[is_holiday].describe()","0337f108":"combo.plot(kind='line', x = \"Datetime\", y = 'Row_Total')\nplt.show()","a00b4d0c":"combo.plot(kind='line', x = \"Datetime\", y = ['AEP_MW', 'COMED_MW', 'DAYTON_MW', 'DEOK_MW', \n                                             'DOM_MW', 'DUQ_MW', 'EKPC_MW', 'FE_MW', 'NI_MW', 'PJME_MW', 'PJMW_MW', 'PJM_Load_MW' ])\nplt.show()","c16396fc":"combo = combo.set_index('Datetime')\nrolling = rolling.set_index('Datetime')\ncombo_temp = combo_temp.set_index('Datetime')","c83025e4":"three_years = combo.loc['2014-01-01':'2017-01-01']\nthree_years.plot(kind='line', y = 'Row_Total')\nplt.show()","e8eedd93":"var=['AEP_MW', 'COMED_MW', 'DAYTON_MW', 'DEOK_MW', 'DOM_MW', 'DUQ_MW', 'EKPC_MW', 'FE_MW', 'NI_MW', 'PJME_MW', 'PJMW_MW', 'PJM_Load_MW']\n\nfor index, item in enumerate(var):\n    plt.figure()\n    first_axis = combo_temp[item].plot(title=item)\n    first_axis.xaxis.set_major_locator(plt.MaxNLocator(10))\n    plt.show","6a3a3f77":"plt.figure()\nfirst_axis = combo_temp['Row_Total'].plot(title='Row_Total')\nfirst_axis.xaxis.set_major_locator(plt.MaxNLocator(10))\nplt.show","b0b6fa06":"ytwo = 'AvgTemperature'\nplt.figure()\nfirst_axis = combo['Row_Total'].plot(title='Row_Total and AvgTemperature')\nfirst_axis.xaxis.set_major_locator(plt.MaxNLocator(10))\nsecond_axis = first_axis.twinx()\nsecond_axis.plot(combo_temp[ytwo],color='teal')\nsecond_axis.xaxis.set_major_locator(plt.MaxNLocator(10))\nplt.show","69d3cebf":"p1 = combo_temp.index > '2014-01-01'\np2 = combo_temp.index < '2017-01-01'\ncombo_three = combo_temp[np.logical_and.reduce([p1, p2])]\n\nax1 = combo_three['Row_Total'].plot(title='Three Years of Row_Total and AvgTemperature')\nax2 = ax1.twinx()\nax2.spines['right'].set_position(('axes', 1.0))\ncombo_three['AvgTemperature'].plot(ax=ax2, color='red')\n","df7a23a7":"combo_three_total = combo_three['Row_Total']\ncombo_three_total_df = combo_three_total.to_frame()\ncombo_three_total_df.index = pd.to_datetime(combo_three_total_df.index)\ncombo_three_temp = combo_three['AvgTemperature']","b39f0bcc":"import itertools\nimport statsmodels\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ncombo_three_total_noon = combo_three_total_df[combo_three_total_df.index.hour==12]\n\np=d=q = range(0,2)\n\npdq = list(itertools.product(p, d, q))\nseasonalproduct = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p,d,q))]\n\naic_list = []\n\nfor prod1 in pdq:\n    for seasonalprod in seasonalproduct:\n        model = statsmodels.tsa.statespace.sarimax.SARIMAX(combo_three_total_noon, order=prod1, \n                                                   seasonal_order = seasonalprod, enforce_stationarity=False, \n                                                      enforce_invertibility = False)\n        results = model.fit()\n        aic_list.append([prod1, seasonalprod, results.aic])\n\n\naic_min = 1000000\nfor item in aic_list:\n    if item[2] < aic_min:\n        aic_min = item[2]\n        print('new min AIC value', item)","aca8b11e":"import statsmodels.api as api\n\nmodel = api.tsa.statespace.SARIMAX(combo_three_total_noon, order = (1,1,1), \n                                   seasonal_order = (0,0,1,12), \n                                   enforce_stationarity = False, enforce_invertibility = False)\n\nresults = model.fit()","85737d39":"results.plot_diagnostics()\nplt.show()","6b6038ad":"predict = results.get_prediction(start = pd.to_datetime('2014-10-01 12:00:00'), dynamic = False)\nconfidence = predict.conf_int()","612342fa":"ax = combo_three_total_noon['2014-01-01 12:00:00':].plot(label='Row_Total')\npredict.predicted_mean.plot(ax=ax, label='Forecast', alpha=.7, figsize=(14, 4))\n\nax.fill_between(confidence.index, confidence.iloc[:,0], confidence.iloc[:,1], color='k', alpha=.2)\n\nax1.set_xlabel(\"Datetime\")\nax1.set_ylabel(\"Electrical Consumption\")\nplt.legend()\nplt.show()","7789d62e":"from sklearn import metrics\nforecasted_mean = round(predict.predicted_mean,2)\n\ncombo.index = pd.to_datetime(combo.index)\nobs = combo[combo.index.hour==12]\nobs = obs['Row_Total']['2014-10-01 12:00:00':'2016-12-31 12:00:00']\nmse = metrics.mean_squared_error(obs, forecasted_mean)\nprint('Mean squared error', round(mse,2))\nprint('Square root of mean squared error', round(np.sqrt(mse),2))","7d88a34c":"fore = results.get_forecast(steps=12)\nconfidence_fore = fore.conf_int()\nax = obs.plot(label='observed', figsize=(14, 4))\nfore.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(confidence_fore.index,\n                confidence_fore.iloc[:, 0],\n                confidence_fore.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Datetime')\nax.set_ylabel('Electrical Consumption')\nplt.legend()\nplt.show()","c24ff4a1":"And we can narrow our timeframe to begin creating our seasonal model.","d17e933f":"The above model overlayed on our observed data shows that it is fantastic. We can also use get_forecast to try and create a forecast above and beyond what we already have.","b9506367":"# Descriptive Statistics","9d01a42d":"Neither the MSE or its square root are particularly close to zero. The closer to zero they are, the better the model is. We may need to rethink the model at some point.","980b5523":"# PJM Data Analysis\nBy Fiona Dean\n\nKaggle has kindly hosted a large data set including 20 years worth of electrical consumption from the PJM company. The data is presented by Business Unit and has a list of hourly consumption for the timeperiod the Business Unite existed. Since electrical consumption often correlates to temperature and working days, we can find further data sets as follows.\n\nThe PJM Data set can be downloaded here: \n    https:\/\/www.kaggle.com\/robikscube\/hourly-energy-consumption\nThe Daily Temperature of major cities can be downloaded here: \n    https:\/\/www.kaggle.com\/sudalairajkumar\/daily-temperature-of-major-cities\nThe major US holidays I have compiled from two sources: \n    https:\/\/www.public-holidays.us\/mobile_US_KF_1998_Federal%20holidays and https:\/\/www.timeanddate.com\/holidays\/us\/\nTo read more about the company, please follow the link: \n    https:\/\/www.pjm.com\/\n\n# To read more on how I cleansed the data:\nhttps:\/\/www.kaggle.com\/fionaeliza\/pjm-cleansing\n\n# Steps to be completed during Analysis:\n\n1. View descriptive statistics\n    Compare electricity usage on workdays vs holidays. View how holiday weekends affect electrical use. View how temperature and electricical consumption correlate.\n    \n2. Create a model for predicting electrical consumption and compare it to real data.\n\n\nTo set up the environment, we need to import the following libraries. We will also wish to include the datetime library with timedelta, so that we can quickly and accurately assess any cleansing issues in the data. Then, we can open the CSV Files with the cleansed data as a Pandas dataframe.","9de66121":"We can overlay the temperature data.","e2d61d4d":"We can see this seasonal trend across all business units of PJM.","9fac868d":"We can see that overall the average amount of electricity consumed is higher on non-holidays.","a3eee828":"We can make use of Seasonal Autoregressive Integrated Moving Average to model this non-linear seasonal data. SARIMA takes in seasonality, trend, and noise from the above data and then creates a model. First we need to decide some parameters so that we can find the best seasonality, trend, and noise points. Unfortunately, my small computer is unable to run this due to memory.\n\nFirst, we must find the most optimal AIC, which is the lowest AIC value.","dee436ba":"We can take a look at a three year section of data. This tells us that the consumption of electricity is very much affected by season.","ba27ee76":"In the above graph you can see that PJM began with only one business unit and then diversified by splitting into PJME and PJMW and adding the other business units. This accounts for the spike in 2004. Before we continue, lets make the datetime the index for each dataframe.","cf03a96d":"As you can see, we have a very large error margin and we may need to rethink this model.","576d394b":"Looking at the above timeseries graph of the total electrical consumption, we see a large spike right after 2004. We can further look into why this occurred by doing a breakdown of each column over time.","bf731f0e":"The lowest AIC value is found with the following paramters (1,1,1) and seasonal parameters (0,0,1,12).\n\n [(1, 1, 1), (0, 0, 1, 12), 22387.74112824487]\n\nNow we can adjust our model with these parameters.","af310eaf":"And the same for the row total."}}