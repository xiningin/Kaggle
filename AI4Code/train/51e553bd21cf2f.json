{"cell_type":{"08d9c5cf":"code","fc71416e":"code","03a0f548":"code","772708ff":"code","3515e799":"code","09a88ff9":"code","9a17966b":"code","365c6e12":"code","83aeed5c":"code","f6051145":"code","12f46b32":"code","1a673089":"code","d3a1f30c":"code","b62d4c96":"code","fa0ca760":"code","2f223851":"code","9c2199f6":"code","97eb8c2f":"markdown","7a6c09bb":"markdown","2b3d7dfa":"markdown","e7dd627d":"markdown","aa0fcfcb":"markdown","ff437d79":"markdown","78aee165":"markdown"},"source":{"08d9c5cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc71416e":"# \uae30\ubcf8\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# \uc804\ucc98\ub9ac\nfrom sklearn.preprocessing import MinMaxScaler\n\n# \uad50\ucc28\uac80\uc99d\nfrom sklearn.model_selection import cross_val_score\n\n# \ubaa8\ub378\nfrom sklearn.ensemble import GradientBoostingClassifier, BaggingClassifier\n\n# \ubaa8\ub378 \ud3c9\uac00\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, classification_report","03a0f548":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nX_test = pd.read_csv(\"..\/input\/churn-model-data-set-competition-form\/X_test.csv\", index_col=0)\nX_train = pd.read_csv(\"..\/input\/churn-model-data-set-competition-form\/X_train.csv\", index_col=0)\ny_train = pd.read_csv(\"..\/input\/churn-model-data-set-competition-form\/y_train.csv\", index_col=0)\ny_test = pd.read_csv(\"..\/input\/churn-model-data-set-competition-form\/test_label\/y_test.csv\", index_col=0)[\"Exited\"]","772708ff":"# \ub370\uc774\ud130 \uae30\ubcf8 \ud615\ud0dc \ud655\uc778\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\")\nprint(X_test.info())\nprint(\"\ud6c8\ub828 \ub370\uc774\ud130\")\nprint(X_train.info())\nprint(\"\ud6c8\ub828 \ub370\uc774\ud130 \ub77c\ubca8\")\nprint(y_train.info())","3515e799":"# \uacb0\uce21\uac12 \ud655\uc778\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\")\nprint(X_test.isna().sum())\nprint(\"\ud6c8\ub828 \ub370\uc774\ud130\")\nprint(X_train.isna().sum())","09a88ff9":"# \ud1b5\uacc4 \ud655\uc778 1\nX_test_desc = X_test.describe()\nX_train_desc = X_train.describe()\n\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\")\nprint(X_test_desc)\nprint(\"\ud6c8\ub828 \ub370\uc774\ud130\")\nprint(X_train_desc)","9a17966b":"#\uc774\uc0c1\uac12 \ud655\uc778\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc774\uc0c1\uac12 \ud655\uc778\")\nfor col in [\"Balance\",\"EstimatedSalary\"]:\n    Q1 = X_test.describe()[col][\"25%\"] # \ud639\uc740 X_test[col].quantile(.25)\n    Q3 = X_test.describe()[col][\"75%\"]\n    IQR = Q3-Q1\n    mask = (X_test[col]<Q1-IQR*1.5) | (X_test[col]>Q3+IQR*1.5)\n    print(X_test[mask])\n\nprint(\"\ud6c8\ub828 \ub370\uc774\ud130 \uc774\uc0c1\uac12 \ud655\uc778\")\nfor col in [\"Balance\",\"EstimatedSalary\"]:\n    Q1 = X_train.describe()[col][\"25%\"]\n    Q3 = X_train.describe()[col][\"75%\"]\n    IQR = Q3-Q1\n    mask = (X_train[col]<Q1-IQR*1.5) | (X_train[col]>Q3+IQR*1.5)\n    print(X_train[mask])","365c6e12":"# Boxplot\nplt.figure(figsize=(25,10), facecolor=\"#eee\")\nfor i, col in enumerate([\"CreditScore\", \"Age\", \"Tenure\", \"Balance\", \"NumOfProducts\", \"EstimatedSalary\"]):\n    plt.subplot(1,6, i+1)\n    plt.boxplot(X_train[col])\n    plt.title(col)\nplt.show()","83aeed5c":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778\nfor col in [\"Geography\", \"Gender\", \"HasCrCard\", \"IsActiveMember\"]:\n    print(X_test[col].value_counts(), \"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\")\n    print(X_train[col].value_counts(), \"\ud6c8\ub828 \ub370\uc774\ud130\")","f6051145":"# Name, Gender \uac12 \ucc98\ub9ac.\nX_train.drop(columns=\"Surname\", inplace=True)\nX_test.drop(columns=\"Surname\", inplace=True)\nX_train.Gender = X_train.Gender.apply(lambda x: 0 if x.lower().strip()==\"female\" else 1)\nX_test.Gender = X_test.Gender.apply(lambda x: 0 if x.lower().strip()==\"female\" else 1)","12f46b32":"# \uc6d0\ud56b \uc778\ucf54\ub529\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nX_train.head()","1a673089":"# \ub370\uc774\ud130 \uc815\uaddc\ud654\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","d3a1f30c":"# \ud1b5\uacc4 \ud655\uc778 2\nprint(pd.concat([X_train, y_train], axis=1).corr())","b62d4c96":"# \uc0b0\ud3ec\ub3c4\ud589\ub82c\nsm = pd.plotting.scatter_matrix(X_train, c=y_train[\"Exited\"], figsize=(30,30), diagonal=\"kde\")\nplt.show()","fa0ca760":"# \uadf8\ub808\ub514\uc5b8\ud2b8 \ubd80\uc2a4\ud305\ngrad = GradientBoostingClassifier(random_state=100)\nscores = cross_val_score(grad, X_train_scaled, y_train[\"Exited\"], scoring=\"roc_auc\")\nprint(\"\uadf8\ub798\ub514\uc5b8\ud2b8 \ubd80\uc2a4\ud305\")\nprint(f\"\ud6c8\ub828 \ub370\uc774\ud130 \uad50\ucc28 \uac80\uc99d(5-fold) AUC \uc810\uc218 \ud3c9\uade0 = {np.mean(scores):.3f}\")\n\n# # Bagging \n# bagging = BaggingClassifier()\n# scores = cross_val_score(bagging, X_train_scaled, y_train[\"Exited\"], scoring=\"roc_auc\")\n# print(\"\ubc30\uae45\")\n# print(f\"\ud6c8\ub828 \ub370\uc774\ud130 \uad50\ucc28 \uac80\uc99d(5-fold) AUC \uc810\uc218 \ud3c9\uade0 = {np.mean(scores):.3f}\")","2f223851":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ud655\uc778\ngrad.fit(X_train_scaled, y_train[\"Exited\"])\npred_test = grad.predict(X_test_scaled)\npred_proba_test = grad.predict_proba(X_test_scaled)\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ud63c\ub3d9\ud589\ub82c\")\nprint(confusion_matrix(y_test,pred_test))\nprint()\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubd84\ub958 \ub9ac\ud3ec\ud2b8\")\nprint(classification_report(y_test,pred_test))\nprint()\nprint(f\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 AUC={roc_auc_score(y_test, pred_proba_test[:,1]):.3f}\")","9c2199f6":"# \uacb0\uacfc \ub0b4\ubcf4\ub0b4\uae30 (probability\ub85c \ub0b4\ubcf4\ub0c4)\nresult = pd.DataFrame(pred_proba_test[:,1], index=y_test.index)\nresult.columns = [\"Exited\"]\nresult.to_csv(\"result.csv\")","97eb8c2f":"# **\uadf8\ub798\ub514\uc5b8\ud2b8 \ubd80\uc2a4\ud305\uc744 \uc774\uc6a9\ud55c \ubd84\uc11d**","7a6c09bb":"# **Result**","2b3d7dfa":"## \uacb0\uce21\uac12, \uc774\uc0c1\uac12 \ud655\uc778 \uacb0\uacfc\n1. \uacb0\uce21\uac12\uc740 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c\n2. \uc774\uc0c1\uac12 \ub610\ud55c \uc874\uc7ac\ud558\uc9c0 \uc54a\uc558\uc74c.","e7dd627d":"# **Modeling**","aa0fcfcb":"# **Libraries**","ff437d79":"# **Preprocessing & EDA**","78aee165":"## \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778 \uacb0\uacfc\n1. Gender\uc5d0\uc11c \ud45c\uae30\uac00 \ud1b5\uc77c\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uac00 \uc788\uc5b4 \uc218\uc815 \ud544\uc694\n2. Geography\ubcc0\uc218\ub97c \ub354\ubbf8\uc778\ucf54\ub529 \ud639\uc740 \uc815\uc218\uac12\uc73c\ub85c \uc778\ucf54\ub529 \ud544\uc694"}}