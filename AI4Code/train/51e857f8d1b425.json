{"cell_type":{"5675e230":"code","c97d8c3d":"code","93906863":"code","6d3261e6":"code","5482b743":"code","e52a63ae":"code","981702f9":"code","af625c9f":"markdown","052527c8":"markdown"},"source":{"5675e230":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@dev\n!pip install -q -U matplotlib==3.1.3 ","c97d8c3d":"import numpy as np\nimport pandas as pd\nfrom supervised.automl import AutoML # mljar-supervised\n","93906863":"train = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","6d3261e6":"x_cols = train.columns[1:-1]\ny_col = \"target\"","5482b743":"automl = AutoML(mode=\"Optuna\", \n                eval_metric=\"auc\",\n                algorithms=[\"LightGBM\", \"Xgboost\", \"Extra Trees\"],\n                optuna_time_budget=1800,   # tune each algorithm for 30 minutes\n                total_time_limit=48*3600,  # total time limit, set large enough to have time to compute all steps\n                features_selection=False)\nautoml.fit(train[x_cols], train[y_col])\npreds = automl.predict_proba(test[x_cols])","e52a63ae":"submission = pd.DataFrame({'id':test.id, 'target': preds[:,1]})\nsubmission.to_csv('1_submission.csv', index=False)","981702f9":"automl.report()","af625c9f":"# MLJAR AutoML \n\nMLJAR is an Automated Machine Learning framework. It is available as Python package with code at GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nThe MLJAR AutoML can work in several modes:\n- Explain - ideal for initial data exploration\n- Perform - perfect for production-level ML systems\n- Compete - mode for ML competitions under restricted time budget\n- Optuna - mode for ML competitiona without time budget for computations :)\n\nThe `Optuna` mode is experimental. It is available at `dev` branch (you need install package manually or directly from GitHub).\n\nIn the `Optuna` mode, each algorithm is tuned with `Optuna` hperparameters framework with selected time budget (controlled with `optuna_time_budget`). \n\n\nThe example useage of `Optuna` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Optuna\", \n                optuna_time_budget=1800, \n                optuna_init_params={}, \n                algorithms=[\"LightGBM\", \"Xgboost\", \"Extra Trees\"], \n                total_time_limit=24*3600)\nautoml.fit(X, y)\n```\n\nDescription of parameters:\n- `optuna_time_budget` - time budget for `Optuna` to tune each algorithm,\n- `optuna_init_params` - if you have precomputed parameters for `Optuna` they can be passed here, then for already optimized models `Optuna` will not be used.\n- `algorithms` - the algorithms that we will check,\n- `total_time_limit` - the total time limit for AutoML training.\n\nLet's try MLJAR with TPS March-21 data!\n\n---\n\nMLJAR GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nOptuna GitHub: https:\/\/github.com\/optuna\/optuna\n\n<img src=\"https:\/\/raw.githubusercontent.com\/mljar\/visual-identity\/main\/media\/mljar_AutomatedML.png\" style=\"width: 50%;\"\/>","052527c8":"### Thank you!\n\nYou can check MLJAR's code at GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nMLJAR's AutoML Documentation: https:\/\/supervised.mljar.com\/\n\nMLJAR's website: https:\/\/mljar.com\/\n\n"}}