{"cell_type":{"3889a3d5":"code","b620d063":"code","2e6c548e":"code","897db28a":"code","cdd837a7":"code","216a2b54":"code","81a42d17":"code","8b24ad30":"code","e51105c3":"code","97b02559":"code","a6fab46f":"code","0952507f":"code","72748011":"code","77d3b585":"code","32b4788b":"code","88ff25d5":"code","7858013b":"code","63eb3517":"code","89b572da":"code","0962c69b":"code","98d04672":"code","543c6c7e":"code","66f399fb":"code","937ee4de":"code","48ab9c3a":"code","a32ca373":"code","86fb47cb":"code","917bdecf":"code","e697c72f":"code","5a4ca434":"code","3f180340":"code","e34827cd":"code","8803f25c":"code","fc0145fa":"code","65f1aaed":"code","a9d8b8df":"code","7caaf125":"code","0a6c5e8e":"code","3d740bfb":"code","92688391":"code","596736bf":"code","6f210b7e":"code","859afa41":"code","b13e07f9":"code","9b5c6128":"code","41b1cd4d":"code","5df531f2":"code","8b423165":"code","394798a1":"code","a9cc1581":"code","f82c0e02":"code","49843f09":"code","20ca42f6":"code","87e44338":"code","9447de03":"code","869d9421":"code","a84f8ec9":"code","64e74461":"code","5b77e62f":"code","3645ae9e":"code","3b4ce6bc":"code","7f21c9bc":"code","d7b9b84b":"code","73a0bb8f":"code","8d7b3c1b":"code","f7e533cd":"code","15e4a8cc":"code","f464268d":"code","405ed589":"code","3a1a03bc":"code","85f4cba9":"code","3fed2704":"code","097ec2ff":"code","3a3f3fdd":"code","d52d7ecc":"markdown","ef51afd8":"markdown","11b15e50":"markdown","9b906292":"markdown","80673e48":"markdown","4de07dfe":"markdown","31a56fb3":"markdown","f77f436a":"markdown","0044feeb":"markdown","ba1286b7":"markdown","2eb25fa8":"markdown","4927a28c":"markdown","0279a759":"markdown","6de3679d":"markdown","b3dc2f37":"markdown","4052768c":"markdown","86536578":"markdown","d471ae9c":"markdown","29b85a1e":"markdown","88a15472":"markdown","f1b92257":"markdown","ea4ae107":"markdown","1f235165":"markdown","3154296c":"markdown","d9b3b20c":"markdown","bed72a95":"markdown","4d9693cc":"markdown","18faef1d":"markdown","4877c308":"markdown","be9d5dc2":"markdown","e919e16b":"markdown","7d02abe7":"markdown","ccdb5a64":"markdown","61481d5c":"markdown","5f2a1c8a":"markdown","4f598c70":"markdown","a9e2a539":"markdown","d3b9d687":"markdown","4d2b2c45":"markdown","8bb36000":"markdown","b409e984":"markdown","b9a9e1e8":"markdown","6c82477b":"markdown","69aa525b":"markdown","97c41da5":"markdown","c72c9f9a":"markdown","d01c8820":"markdown","1a0b768e":"markdown","d9fe8132":"markdown","d45fe01e":"markdown","7ca17465":"markdown","8181d7b6":"markdown","99992942":"markdown"},"source":{"3889a3d5":"import numpy as np \nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LassoCV\nfrom sklearn import metrics \nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nfrom mlxtend.regressor import StackingCVRegressor\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom scipy.stats import skew\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b620d063":"home = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv',index_col='Id')\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv',index_col='Id')","2e6c548e":"home.head()","897db28a":"test.head()","cdd837a7":"home.shape","216a2b54":"test.shape","81a42d17":"home.columns","8b24ad30":"home.info()","e51105c3":"home.describe()","97b02559":"test.columns","a6fab46f":"test.info()","0952507f":"test.describe()","72748011":"#missing values\nmissing = home.isnull().sum()\nmissing = missing[missing>0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","77d3b585":"numerical_features = home.select_dtypes(exclude=['object']).drop(['SalePrice'], axis=1).copy()\nprint(numerical_features.columns)","32b4788b":"categorical_features = home.select_dtypes(include=['object']).copy()\nprint(categorical_features.columns)","88ff25d5":"fig = plt.figure(figsize=(12,18))\nfor i in range(len(numerical_features.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.distplot(numerical_features.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_features.columns[i])\nplt.tight_layout()\nplt.show()","7858013b":"fig = plt.figure(figsize=(12,18))\nfor i in range(len(numerical_features.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.boxplot(y=numerical_features.iloc[:,i])\n\nplt.tight_layout()\nplt.show()","63eb3517":"fig = plt.figure(figsize=(12,18))\nfor i in range(len(numerical_features.columns)):\n    fig.add_subplot(9, 4, i+1)\n    sns.scatterplot(numerical_features.iloc[:, i],home['SalePrice'])\nplt.tight_layout()\nplt.show()","89b572da":"figure, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8), (ax9, ax10)) = plt.subplots(nrows=5, ncols=2)\nfigure.set_size_inches(16,28)\n_ = sns.regplot(home['LotFrontage'], home['SalePrice'], ax=ax1)\n_ = sns.regplot(home['LotArea'], home['SalePrice'], ax=ax2)\n_ = sns.regplot(home['MasVnrArea'], home['SalePrice'], ax=ax3)\n_ = sns.regplot(home['BsmtFinSF1'], home['SalePrice'], ax=ax4)\n_ = sns.regplot(home['TotalBsmtSF'], home['SalePrice'], ax=ax5)\n_ = sns.regplot(home['GrLivArea'], home['SalePrice'], ax=ax6)\n_ = sns.regplot(home['1stFlrSF'], home['SalePrice'], ax=ax7)\n_ = sns.regplot(home['EnclosedPorch'], home['SalePrice'], ax=ax8)\n_ = sns.regplot(home['MiscVal'], home['SalePrice'], ax=ax9)\n_ = sns.regplot(home['LowQualFinSF'], home['SalePrice'], ax=ax10)","0962c69b":"home.shape","98d04672":"home = home.drop(home[home['LotFrontage']>200].index)\nhome = home.drop(home[home['LotArea']>100000].index)\nhome = home.drop(home[home['MasVnrArea']>1200].index)\nhome = home.drop(home[home['BsmtFinSF1']>4000].index)\nhome = home.drop(home[home['TotalBsmtSF']>4000].index)\nhome = home.drop(home[(home['GrLivArea']>4000) & (home['SalePrice']<300000)].index)\nhome = home.drop(home[home['1stFlrSF']>4000].index)\nhome = home.drop(home[home['EnclosedPorch']>500].index)\nhome = home.drop(home[home['MiscVal']>5000].index)\nhome = home.drop(home[(home['LowQualFinSF']>600) & (home['SalePrice']>400000)].index)","543c6c7e":"num_correlation = home.select_dtypes(exclude='object').corr()\nplt.figure(figsize=(20,20))\nplt.title('High Correlation')\nsns.heatmap(num_correlation > 0.8, annot=True, square=True)","66f399fb":"corr = num_correlation.corr()\nprint(corr['SalePrice'].sort_values(ascending=False))","937ee4de":"home.drop(columns=['GarageArea','TotRmsAbvGrd','GarageYrBlt','1stFlrSF'],axis=1,inplace=True) \ntest.drop(columns=['GarageArea','TotRmsAbvGrd','GarageYrBlt','1stFlrSF'],axis=1,inplace=True)","48ab9c3a":"# Useless Columns...\nhome=home.drop(columns=['Street','Utilities']) \ntest=test.drop(columns=['Street','Utilities']) ","a32ca373":"home.isnull().mean().sort_values(ascending=False).head(3)","86fb47cb":"home.drop(columns=['Alley','MiscFeature','PoolQC','PoolArea'], axis=1, inplace=True)\ntest.drop(columns=['Alley','MiscFeature','PoolQC','PoolArea'], axis=1, inplace=True)","917bdecf":"test.isnull().mean().sort_values(ascending=False).head(3)","e697c72f":"# Checking Home and Test data missing value percentage\nnull = pd.DataFrame(data={'Home Null Percentage': home.isnull().sum()[home.isnull().sum() > 0], 'Test Null Percentage': test.isnull().sum()[test.isnull().sum() > 0]})\nnull = (null\/len(home)) * 100\n\nnull.index.name='Feature'\nnull","5a4ca434":"home.isnull().sum().sort_values(ascending=False)[:50]","3f180340":"home_num_features = home.select_dtypes(exclude='object').isnull().mean()\ntest_num_features = test.select_dtypes(exclude='object').isnull().mean()\n\nnum_null_features = pd.DataFrame(data={'Missing Num Home Percentage: ': home_num_features[home_num_features>0], 'Missing Num Test Percentage: ': test_num_features[test_num_features>0]})\nnum_null_features.index.name = 'Numerical Features'\nnum_null_features","e34827cd":"for df in [home, test]:\n    for col in ('GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', \n                'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotalBsmtSF',\n                'Fireplaces', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'MiscVal',\n                'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea'):\n                    df[col] = df[col].fillna(0)","8803f25c":"_=sns.regplot(home['LotFrontage'],home['SalePrice'])","fc0145fa":"home_num_features = home.select_dtypes(exclude='object').isnull().mean()\ntest_num_features = test.select_dtypes(exclude='object').isnull().mean()\n\nnum_null_features = pd.DataFrame(data={'Missing Num Home Percentage: ': home_num_features[home_num_features>0], 'Missing Num Test Percentage: ': test_num_features[test_num_features>0]})\nnum_null_features.index.name = 'Numerical Features'\nnum_null_features","65f1aaed":"cat_col = home.select_dtypes(include='object').columns\nprint(cat_col)","a9d8b8df":"home_cat_features = home.select_dtypes(include='object').isnull().mean()\ntest_cat_features = test.select_dtypes(include='object').isnull().mean()\n\ncat_null_features = pd.DataFrame(data={'Missing Cat Home Percentage: ': home_cat_features[home_cat_features>0], 'Missing Cat Test Percentage: ': test_cat_features[test_cat_features>0]})\ncat_null_features.index.name = 'Categorical Features'\ncat_null_features","7caaf125":"cat_col = home.select_dtypes(include='object').columns\n\ncolumns = len(cat_col)\/4+1\n\nfg, ax = plt.subplots(figsize=(20, 30))\n\nfor i, col in enumerate(cat_col):\n    fg.add_subplot(columns, 4, i+1)\n    sns.countplot(home[col])\n    plt.xlabel(col)\n    plt.xticks(rotation=90)\n\nplt.tight_layout()\nplt.show()","0a6c5e8e":"var = home['KitchenQual']\nf, ax = plt.subplots(figsize=(10,6))\nsns.boxplot(y=home.SalePrice, x=var)\nplt.show()","3d740bfb":"f, ax = plt.subplots(figsize=(12,8))\nsns.boxplot(y=home.SalePrice, x=home.Neighborhood)\nplt.xticks(rotation=45)\nplt.show()","92688391":"## Count of categories within Neighborhood attribute\nfig = plt.figure(figsize=(12.5,4))\nsns.countplot(x='Neighborhood', data=home)\nplt.xticks(rotation=90)\nplt.ylabel('Frequency')\nplt.show()","596736bf":"for df in [home, test]:\n    for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1',\n                  'BsmtFinType2', 'Neighborhood', 'BldgType', 'HouseStyle', 'MasVnrType', 'FireplaceQu', 'Fence'):\n        df[col] = df[col].fillna('None')","6f210b7e":"for df in [home, test]:\n    for col in ('LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Condition1', 'RoofStyle',\n                  'Electrical', 'Functional', 'KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType', 'ExterQual', 'ExterCond',\n                  'Foundation', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'PavedDrive', 'SaleType', 'SaleCondition'):\n        df[col] = df[col].fillna(df[col].mode()[0])","859afa41":"home_cat_features = home.select_dtypes(include='object').isnull().mean()\ntest_cat_features = test.select_dtypes(include='object').isnull().mean()\n\ncat_null_features = pd.DataFrame(data={'Missing Cat Home Percentage: ': home_cat_features[home_cat_features>0], 'Missing Cat Test Percentage: ': test_cat_features[test_cat_features>0]})\ncat_null_features.index.name = 'Categorical Features'\ncat_null_features","b13e07f9":"_=sns.regplot(home['LotFrontage'],home['SalePrice'])","9b5c6128":"home['LotFrontage'] = home.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))\ntest['LotFrontage'] = test.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))","41b1cd4d":"home.corr()['SalePrice'].sort_values(ascending=False)","5df531f2":"home.isnull().sum().sort_values(ascending=False)","8b423165":"test.isnull().sum().sort_values(ascending=False)","394798a1":"home['MSSubClass'] = home['MSSubClass'].apply(str)\ntest['MSSubClass'] = test['MSSubClass'].apply(str)\n\nhome['MoSold'] = home['MoSold'].apply(str)\ntest['MoSold'] = test['MoSold'].apply(str)\n\nhome['YrSold'] = home['MoSold'].apply(str)\ntest['YrSold'] = test['MoSold'].apply(str)","a9cc1581":"home['MSZoning'] = home.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\ntest['MSZoning'] = test.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","f82c0e02":"home.isnull().sum().sort_values(ascending=False)","49843f09":"test.isnull().sum().sort_values(ascending=False)","20ca42f6":"list(home.select_dtypes(exclude='object').columns)","87e44338":"figure, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3)\nfigure.set_size_inches(20,10)\n_ = sns.regplot(home['TotalBsmtSF'], home['SalePrice'], ax=ax1)\n_ = sns.regplot(home['2ndFlrSF'], home['SalePrice'], ax=ax2)\n_ = sns.regplot(home['TotalBsmtSF'] + home['2ndFlrSF'], home['SalePrice'], ax=ax3)","9447de03":"home['TotalSF']=home['TotalBsmtSF']  + home['2ndFlrSF']\ntest['TotalSF']=test['TotalBsmtSF']  + test['2ndFlrSF']","869d9421":"figure, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfigure.set_size_inches(14,10)\n_ = sns.barplot(home['BsmtFullBath'], home['SalePrice'], ax=ax1)\n_ = sns.barplot(home['FullBath'], home['SalePrice'], ax=ax2)\n_ = sns.barplot(home['BsmtHalfBath'], home['SalePrice'], ax=ax3)\n_ = sns.barplot(home['BsmtFullBath'] + home['FullBath'] + home['BsmtHalfBath'] + home['HalfBath'], home['SalePrice'], ax=ax4)","a84f8ec9":"home['TotalBath']=home['BsmtFullBath'] + home['FullBath'] + (0.5*home['BsmtHalfBath']) + (0.5*home['HalfBath'])\ntest['TotalBath']=test['BsmtFullBath'] + test['FullBath'] + test['BsmtHalfBath'] + test['HalfBath']","64e74461":"figure, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3)\nfigure.set_size_inches(18,8)\n_ = sns.regplot(home['YearBuilt'], home['SalePrice'], ax=ax1)\n_ = sns.regplot(home['YearRemodAdd'], home['SalePrice'], ax=ax2)\n_ = sns.regplot((home['YearBuilt']+home['YearRemodAdd'])\/2, home['SalePrice'], ax=ax3)","5b77e62f":"home['YrBltAndRemod']=home['YearBuilt']+(home['YearRemodAdd']\/2)\ntest['YrBltAndRemod']=test['YearBuilt']+(test['YearRemodAdd']\/2)","3645ae9e":"figure, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(nrows=2, ncols=3)\nfigure.set_size_inches(20,10)\n_ = sns.regplot(home['OpenPorchSF'], home['SalePrice'], ax=ax1)\n_ = sns.regplot(home['3SsnPorch'], home['SalePrice'], ax=ax2)\n_ = sns.regplot(home['EnclosedPorch'], home['SalePrice'], ax=ax3)\n_ = sns.regplot(home['ScreenPorch'], home['SalePrice'], ax=ax4)\n_ = sns.regplot(home['WoodDeckSF'], home['SalePrice'], ax=ax5)\n_ = sns.regplot((home['OpenPorchSF']+home['3SsnPorch']+home['EnclosedPorch']+home['ScreenPorch']+home['WoodDeckSF']), home['SalePrice'], ax=ax6)","3b4ce6bc":"home['Porch_SF'] = (home['OpenPorchSF'] + home['3SsnPorch'] + home['EnclosedPorch'] + home['ScreenPorch'] + home['WoodDeckSF'])\ntest['Porch_SF'] = (test['OpenPorchSF'] + test['3SsnPorch'] + test['EnclosedPorch'] + test['ScreenPorch'] + test['WoodDeckSF'])","7f21c9bc":"home['Has2ndfloor'] = home['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nhome['HasBsmt'] = home['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nhome['HasFirePlace'] = home['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\nhome['Has2ndFlr']=home['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nhome['HasBsmt']=home['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n\ntest['Has2ndfloor'] = test['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['HasBsmt'] = test['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['HasFirePlace'] = test['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntest['Has2ndFlr']=test['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['HasBsmt']=test['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)","d7b9b84b":"home['LotArea'] = home['LotArea'].astype(np.int64)\ntest['LotArea'] = test['LotArea'].astype(np.int64)\nhome['MasVnrArea'] = home['MasVnrArea'].astype(np.int64)\ntest['MasVnrArea'] = test['MasVnrArea'].astype(np.int64)","73a0bb8f":"fig = plt.figure(figsize=(11,11))\n\nprint (\"Skew of SalePrice:\", home.SalePrice.skew())\nplt.hist(home.SalePrice, normed=1, color='red')\nplt.show()","8d7b3c1b":"fig = plt.figure(figsize=(11,11))\n\nprint (\"Skew of Log-Transformed SalePrice:\", np.log1p(home.SalePrice).skew())\nplt.hist(np.log1p(home.SalePrice), color='green')\nplt.show()","f7e533cd":"X = home.drop(['SalePrice'], axis=1)\ny = np.log1p(home['SalePrice'])","15e4a8cc":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, train_size=0.8, random_state=2)","f464268d":"test.head()","405ed589":"categorical_cols = [cname for cname in X.columns if\n                    X[cname].nunique() <= 30 and\n                    X[cname].dtype == \"object\"] \n                \n\n\nnumerical_cols = [cname for cname in X.columns if\n                 X[cname].dtype in ['int64','float64']]\n\n\nmy_cols = numerical_cols + categorical_cols\n\nX_train = X_train[my_cols].copy()\nX_valid = X_valid[my_cols].copy()\nX_test = test[my_cols].copy()","3a1a03bc":"num_transformer = Pipeline(steps=[\n    ('num_imputer', SimpleImputer(strategy='constant'))\n    ])\n\ncat_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', num_transformer, numerical_cols),       \n        ('cat',cat_transformer,categorical_cols),\n        ])","85f4cba9":"# Reversing log-transform on y\ndef inv_y(transformed_y):\n    return np.exp(transformed_y)\n\nn_folds = 10\n\n# XGBoost\nmodel = XGBRegressor(learning_rate=0.01, n_estimators=3460, max_depth=3, min_child_weight=0,gamma=0, subsample=0.7,colsample_bytree=0.7,objective='reg:squarederror', nthread=-1,scale_pos_weight=1, seed=27, reg_alpha=0.00006)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('XGBoost: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n\n      \n# Lasso   \nmodel = LassoCV(max_iter=1e7,  random_state=14, cv=n_folds)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('Lasso: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n  \n      \n      \n# GradientBoosting   \nmodel = GradientBoostingRegressor(n_estimators=300, learning_rate=0.05, max_depth=4, random_state=5)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('Gradient: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n","3fed2704":"model = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                     max_depth=3, min_child_weight=0,\n                     gamma=0, subsample=0.7,\n                     colsample_bytree=0.7,\n                     objective='reg:squarederror', nthread=-1,\n                     scale_pos_weight=1, seed=27,\n                     reg_alpha=0.00006)\n\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\n\n\nscores = cross_val_score(clf, X, y, scoring='neg_mean_squared_error', \n                         cv=n_folds)\ngbr_mae_scores = -scores\n\nprint('Mean RMSE: ' + str(gbr_mae_scores.mean()))\nprint('Error std deviation: ' +str(gbr_mae_scores.std()))","097ec2ff":"model = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                     max_depth=3, min_child_weight=0,\n                     gamma=0, subsample=0.7,\n                     colsample_bytree=0.7,\n                     objective='reg:squarederror', nthread=-1,\n                     scale_pos_weight=1, seed=27,\n                     reg_alpha=0.00006)\n\nfinal_model = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\n\nfinal_model.fit(X_train, y_train)\n\nfinal_predictions = final_model.predict(X_test)","3a3f3fdd":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': inv_y(final_predictions)})\n\noutput.to_csv('submission.csv', index=False)","d52d7ecc":"- We will deal with 'LotFrontage' later because it is an important feature","ef51afd8":"Some features are the wrong type so we convert them to the right type","11b15e50":"Lets see which features have the most missing values...","9b906292":"### 5.3 Create 'YrBuiltAndRemod' feature","80673e48":"### 5.2 Create 'TotalBath' feature","4de07dfe":"### 5.6 SalePrice Distribution Visualization","31a56fb3":"### 6.3 Setting up Final Model for Submission","f77f436a":"We create extra features in order to categorize data with and without a feature\n\nFor example:\n- 'HasPool' is 1 if you have pool and 0 if you don't have a pool","0044feeb":"<a id=\"5\"><\/a> <br>\n<font color='black' size=\"+2.5\"><b>5 - Feature Engineering<\/b><\/font><br>\n\nIn this section:\n- 5.1 Create 'TotalSF' feature\n- 5.2 Create 'TotalBath' feature\n- 5.3 Create 'YrBuiltAndRemod' feature\n- 5.4 Create 'PorchSF' feature\n- 5.5 Creating extra features and changing types\n- 5.6 SalePrice Distribution Visualization","ba1286b7":"### 4.3 Filling Numerical Missing Values","2eb25fa8":"From these regplots we have confirmed there are outliers, so we decide to remove them.","4927a28c":"We changed the type of MSSubClass to string so we can impute the median based on MSSubClass in MSZoning in the next step. We also changed MoSold and YrSold because they should be strings not integers","0279a759":"### 3.1 Viewing Columns","6de3679d":"Notes on Outliers:\nAccording to the plots above, these are the features which appear to have outliers:\n- LotFrontage\n- LotArea\n- MasVnrArea\n- BsmtFinSF1\n- TotalBsmtSF\n- GrLivArea\n- 1stFlrSF\n- EnclosedPorch\n- MiscVal\n- LowQualFinSF\n\nLet's take a closer look at these features...","b3dc2f37":"### 6.1 Dealing with Data for Modelling","4052768c":"### 4.6 Filling Missing values in 'MSZoning' ","86536578":"As we can see the skew improved from approximately 1.88 to approximately 0.12 so we will log-transform SalePrice in the next section","d471ae9c":"### 5.5 Creating extra features and changing types","29b85a1e":"We test three models: 'XGBoost', 'Lasso', and 'Gradient' and see which one performs the best","88a15472":"<a id=\"4\"><\/a> <br>\n<font color='black' size=\"+2.5\"><b>4 - Data Processing<\/b><\/font><br>\n\nIn this section:\n- 4.1 Outliers\n- 4.2 Removing Certain Features\n- 4.3 Filling Numerical Missing Values\n- 4.4 Filling Categorical Missing Values\n- 4.5 Filling Missing Values in 'LotFrontage'\n- 4.6 Filling Missing Values in 'MSZoning'","f1b92257":"The graph shows that SalePrice is skewed to the right and must be modified","ea4ae107":"Highly-Correlated Features:\n- YearBuilt vs GarageYrBlt\n- 1stFlrSF vs TotalBsmtSF\n- GrLivArea vs TotRmsAbvGrd\n- GarageCars vs GarageArea","1f235165":"We select every numerical column from X and the categorical columns with unique values under 30","3154296c":"We also have useless features so we also decide to drop the features below","d9b3b20c":"<font size=\"+3.5\" color=\"black\"><b><center>\ud83c\udfe0 House Pricing: Ultimate Guide<\/center><\/b><\/font><br>\n![](https:\/\/images7.alphacoders.com\/436\/thumb-1920-436350.jpg?w=800)\n<hr>","bed72a95":"LotFrontage is correlated to Neighborhood, so we fill in the median based off of Neighborhood feature","4d9693cc":"### 5.4 Create 'PorchSF' feature","18faef1d":"<a id=\"3\"><\/a> <br>\n<font size=\"+2.5\"><b>3 - Data Visualization<\/b><\/font><br>\n\nIn this section:\n\n- 3.1 Viewing Columns\n\n- 3.2 Distribution of Data\n\n- 3.3 Univariate Analysis of Data\n\n- 3.4 Bivariate Analysis of Data","4877c308":"<a id=\"6\"><\/a> <br>\n<font color='black' size=\"+2.5\"><b>6 - Modelling<\/b><\/font><br>\n\nIn this section:\n\n- 6.1 Dealing with Data for Modelling\n- 6.2 Finding the Best Model\n- 6.3 Setting up Final Model for Submission","be9d5dc2":"### 2.2 Understanding the Data","e919e16b":"### 5.1 Create 'TotalSF' feature","7d02abe7":"- Find the highly-correlated (correlations higher than 0.8)","ccdb5a64":"### 3.2 Distribution of Data","61481d5c":"MSZoning means the general zoning classification:\nUnique values of MSZoning are:\n- 'A' for Agriculture\n- 'C' Commercial\n- 'FV' Floating Village Residential\n- 'I' Industrial\n- 'RH' Residential High Density\n- 'RL' Residential Low Density\n- 'RP' Residential Low Density Park\n- 'RM' Residential Medium Density\n\nClearly this feature is correlated to MSSubClass, which is the building class, so we fill in the median based on MSSubClass","5f2a1c8a":"Split X and y into train and valid data for model testing","4f598c70":"### 4.1 Outliers","a9e2a539":"<font color='black' size=\"+2.5\"><b>1 - Libraries<\/b><\/font><br><a id='1'><\/a>\n","d3b9d687":"### 3.3 Univariate Analysis","4d2b2c45":"<a id=\"2\"><\/a> <br>\n<font color='black' size=\"+2.5\"><b>2 - Reading Data<\/b><\/font><br>\n\nIn this section:\n- 2.1 Reading Data\n- 2.2 Understanding the Data\n- 2.3 Checking for missing values","8bb36000":"Test data doesn't have any features that have over 90% of missing values. So we don't drop any features.","b409e984":"### 3.4 Bivariate Analysis","b9a9e1e8":"### 2.1 Reading Data","6c82477b":"<font size=\"+2\" color=\"black\"><b>Table of Contents<\/b><\/font><br>\n* 1 - Importing Libraries\n* 2 - Reading Data \n* 3 - Data Visualization\n* 4 - Data Processing\n* 5 - Feature Engineering\n* 6 - Modelling\n* 7 - Submission","69aa525b":"### 4.5 Filling Missing Values in 'LotFrontage'","97c41da5":"### 4.4 Filling Categorical Missing Values","c72c9f9a":"### 4.2 Removing Certain Features","d01c8820":"Here we create a 'num_transformer' and a 'cat_transformer' for imputing and hot-encoding numerical and categorical values. We then store these transformers into a preprocessor column transformer","1a0b768e":"We can clearly see features 'Alley', 'MiscFeature' and 'PoolQC' are missing over 90% of their values. So we decide to remove them.\n'PoolArea' is pretty much a useless column because 99.6% of 'PoolQC' is missing so we also drop this feature. Street and Utilities are useless features so we drop them.","d9fe8132":"Our next step is setting up the final model","d45fe01e":"### 2.3 Checking for Missing Values","7ca17465":"### 6.2 Finding the Best Model","8181d7b6":"<a id=\"7\"><\/a> <br>\n<font color='black' size=\"+2.5\"><b>7 - Submission<\/b><\/font><br>\n","99992942":"As we can see XGBoost performed the best so we will be using this. Let us check the Mean RMSE and the standard deviation of this model.\n- I commented out because it takes too long and we know this is already the best model"}}