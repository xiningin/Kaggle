{"cell_type":{"ec0fc398":"code","7f2dafdf":"code","0f9d11c2":"code","ae0f0b86":"code","c7a16013":"code","cfc7e5f8":"code","882de8f2":"code","86e51b57":"code","c0966437":"code","d421d9df":"code","b7f5f90a":"code","d7c4e37c":"code","7f10227b":"code","d4d9e95a":"code","6787f34d":"code","85bd4ef4":"markdown","87a2ac11":"markdown"},"source":{"ec0fc398":"import numpy as np \nimport pandas as pd\nimport os\nfrom subprocess import check_output\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nfrom pandas.plotting import lag_plot\nimport datetime\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error","7f2dafdf":"warnings.filterwarnings('ignore')","0f9d11c2":"print(os.listdir(\"..\/input\"))\n\nprint(check_output([\"ls\", \"..\/input\/nifty50-stock-market-data\"]).decode(\"utf8\"))\n","ae0f0b86":"df = pd.read_csv(\"..\/input\/nifty50-stock-market-data\/ADANIPORTS.csv\")\ndf.head()","c7a16013":"print(df.head())\nprint(df.shape)\nprint(df.columns)","cfc7e5f8":"df[['Close']].plot()\nplt.title(\"ADANIPORTS\")\nplt.show()","882de8f2":"# Comulative Return\ndr = df.cumsum()\ndr.plot()\nplt.title('ADANI PORTS Cumulative Returns')","86e51b57":"plt.figure(figsize=(10,10))\nlag_plot(df['Open'], lag=5)\nplt.title('ADANI PORTS Autocorrelation plot')","c0966437":"df['Date']","d421d9df":"train_data, test_data = df[0:int(len(df)*0.8)], df[int(len(df)*0.8):]\nplt.figure(figsize=(12,7))\nplt.title(' Prices')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(df['Open'], 'blue', label='Training Data')\nplt.plot(test_data['Open'], 'green', label='Testing Data')\nplt.xticks(np.arange(0,3322, 1500), df['Date'][0:3322:1500])\nplt.legend()","b7f5f90a":"def smape_kun(y_true, y_pred):\n    return np.mean((np.abs(y_pred - y_true) * 200\/ (np.abs(y_pred) + np.abs(y_true))))","d7c4e37c":"# evaluate an ARIMA model for a given order (p,d,q)\ndef evaluate_arima_model(X, arima_order):\n    # prepare training dataset\n    train_size = int(len(X) * 0.66)\n    train, test = X[0:train_size], X[train_size:]\n    history = [x for x in train]\n    # make predictions\n    predictions = list()\n    for t in range(len(test)):\n        model = ARIMA(history, order=arima_order)\n        model_fit = model.fit()\n        yhat = model_fit.forecast()[0]\n        predictions.append(yhat)\n        history.append(test[t])\n    # calculate out of sample error\n    error = mean_squared_error(test, predictions)\n    return error","7f10227b":"train_ar = train_data['Open'].values\ntest_ar = test_data['Open'].values\n\n# https:\/\/machinelearningmastery.com\/arima-for-time-series-forecasting-with-python\/ \nhistory = [x for x in train_ar]\nprint(type(history))\npredictions = list()\nfor t in range(len(test_ar)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = test_ar[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test_ar, predictions)\nprint('Testing Mean Squared Error: %.3f' % error)\nerror2 = smape_kun(test_ar, predictions)\nprint('Symmetric mean absolute percentage error: %.3f' % error2)","d4d9e95a":"plt.figure(figsize=(12,7))\nplt.plot(df['Open'], 'green', color='blue', label='Training Data')\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='red', label='Actual Price')\nplt.title('Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(0,3322, 300), df['Date'][0:3322:300])\nplt.legend()","6787f34d":"plt.figure(figsize=(12,7))\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='red', label='Actual Price')\nplt.xticks(np.arange(3000,3322, 1000), df['Date'][3000:3322:1000])\nplt.title('Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.legend()","85bd4ef4":"# **Stock Market Analyis**","87a2ac11":"# ARIMA (AutoRegressive Integrated Moving Average)"}}