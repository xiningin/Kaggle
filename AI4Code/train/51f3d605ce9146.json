{"cell_type":{"1d183ab2":"code","9fe2530b":"code","5c1cd8a2":"code","9b3adf7f":"code","54dd42d0":"code","a33b39fc":"code","9c01d742":"code","faac31b0":"code","c3d95f6b":"code","618b69d3":"code","2a445f5c":"code","b0f4736e":"code","ce45b984":"code","aeea1846":"code","48adcc3f":"code","ded3bc32":"code","270850b0":"code","2d786df1":"code","b462604e":"code","121333b9":"code","e3a9c200":"code","03a6c32a":"code","c6a815ad":"code","dac8cc1d":"code","013ce6c0":"code","6fa28f51":"code","fa4f0fba":"code","88742dca":"code","7fcde673":"code","d7f31c94":"code","845b71b0":"code","e61ca569":"code","87460ad0":"code","16584e81":"code","dc85cbd8":"code","161b21ab":"code","7012f90f":"code","97eb1175":"code","e7df484e":"markdown","075a2c49":"markdown","92b19869":"markdown","2bbf6721":"markdown","53bb1f8d":"markdown","0c83cbe4":"markdown","105268b8":"markdown","2a98ee5a":"markdown","048fdfa7":"markdown","c3450847":"markdown","ffe5d043":"markdown","bd41834a":"markdown","fdfb6a91":"markdown","da5e478f":"markdown","c76d5392":"markdown","86935e1d":"markdown","e5101830":"markdown","32fa50f9":"markdown","3ed1d171":"markdown","42a623b2":"markdown","f2d9ca74":"markdown","ac240c02":"markdown","20fd720d":"markdown","390e4a1e":"markdown","c721e217":"markdown","adf8990e":"markdown","41c02e2e":"markdown","53abf344":"markdown","a2c0113d":"markdown","dccf6a79":"markdown","2297e457":"markdown","c16c9add":"markdown","59e83298":"markdown","aa9ad33b":"markdown","2b888d40":"markdown","a746c83e":"markdown","37193335":"markdown","67695920":"markdown","606ef862":"markdown","c76fab14":"markdown","5240ca8e":"markdown","f4ec7490":"markdown","70ac32d1":"markdown","bc866f6a":"markdown"},"source":{"1d183ab2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.patches as mpatches\nfrom plotly.subplots import make_subplots\nfrom wordcloud import WordCloud\nimport seaborn as sns  \nsns.set(color_codes = True)\nsns.set(style=\"whitegrid\")\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors","9fe2530b":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')","5c1cd8a2":"df.head()","9b3adf7f":"df.info()","54dd42d0":"df.isnull().sum()","a33b39fc":"df.fillna(value = 0, inplace = True)\ndf.total_vaccinations = df.total_vaccinations.astype(int)\ndf.people_vaccinated = df.people_vaccinated.astype(int)\ndf.people_fully_vaccinated = df.people_fully_vaccinated.astype(int)\n\ndf.daily_vaccinations_raw = df.daily_vaccinations_raw.astype(int)\ndf.daily_vaccinations = df.daily_vaccinations.astype(int)\ndf.total_vaccinations_per_hundred = df.total_vaccinations_per_hundred.astype(int)\n\ndf.people_fully_vaccinated_per_hundred = df.people_fully_vaccinated_per_hundred.astype(int)\ndf.daily_vaccinations_per_million = df.daily_vaccinations_per_million.astype(int)\ndf.people_vaccinated_per_hundred = df.people_vaccinated_per_hundred.astype(int)","9c01d742":"date = df.date.str.split('-', expand =True)\ndate ","faac31b0":"df['year'] = date[0]\ndf['month'] = date[1]\ndf['day'] = date[2]\n\ndf.year = pd.to_numeric(df.year)\ndf.month = pd.to_numeric(df.month)\ndf.day = pd.to_numeric(df.day)","c3d95f6b":"df.date = pd.to_datetime(df.date)\n\ndf.head()","618b69d3":"print('Data point starts from ',df.date.min(),'\\n')\nprint('Data point ends at ',df.date.max(),'\\n')\nprint('Total no of countries in the data set ',len(df.country.unique()),'\\n')\nprint('Total no of unique vaccines in the data set ',len(df.vaccines.unique()),'\\n')","2a445f5c":"df.info()","b0f4736e":"df.describe()","ce45b984":"df.country.unique()","aeea1846":"def size(m,n):\n    fig = plt.gcf();\n    fig.set_size_inches(m,n);","48adcc3f":"wordCloud = WordCloud(\n    background_color='white',\n    max_font_size = 50).generate(' '.join(df.country))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(wordCloud)\nplt.show()","ded3bc32":"country_wise_total_vaccinated = {}\n\nfor country in df.country.unique() : \n    vaccinated = 0\n\n    for i in range(len(df)) : \n        if df.country[i] == country : \n            vaccinated += df.daily_vaccinations[i]\n    \n    country_wise_total_vaccinated[country] = vaccinated \n#     made a seperate dict from the df \n    country_wise_total_vaccinated_df = pd.DataFrame.from_dict(country_wise_total_vaccinated,\n                                                         orient='index',\n                                                         columns = ['total_vaccinted_till_date'])\n#     converted dict to df \ncountry_wise_total_vaccinated_df.sort_values(by = 'total_vaccinted_till_date', ascending = False, inplace = True)\n\ncountry_wise_total_vaccinated_df","270850b0":"fig = px.bar(country_wise_total_vaccinated_df, \n             y = 'total_vaccinted_till_date',\n             x = country_wise_total_vaccinated_df.index,\n             color = 'total_vaccinted_till_date',\n             color_discrete_sequence= px.colors.sequential.Viridis_r\n            )\n\nfig.update_layout(\n    title={\n            'text' : \"Vaccination till date in various countries\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Total vaccinated\",\n    legend_title=\"Total vaccinated\"\n)\n\nfig.show()","2d786df1":"fig = px.line(df, x = 'date', y ='daily_vaccinations', color = 'country')\n\nfig.update_layout(\n    title={\n            'text' : \"Daily vaccination trend\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Date\",\n    yaxis_title=\"Daily Vaccinations\"\n)\n\nfig.show()","b462604e":"# helper function\ndef plot_till_date(value1, value2, title, color1, color2) : \n    \n    so_far_dict = {}\n    \n    for dates in df.date.unique() : \n        so_far_dict[dates], value1_count, value2_count = [], 0, 0\n    \n        for i in range(len(df)) : \n        \n            if df.date[i] == dates : \n                value1_count += df[value1][i]\n                value2_count += df[value2][i]\n#         if dates not in so_far_dict.keys() : \n        \n        so_far_dict[dates].append(value1_count) \n        so_far_dict[dates].append(value2_count)\n    \n    so_far_df = pd.DataFrame.from_dict(so_far_dict, orient = 'index', columns=[value1, value2])\n    so_far_df.reset_index(inplace = True)\n#     return so_far_df\n    \n    so_far_df.sort_values(by='index', inplace = True)\n    \n    plot = go.Figure(data=[go.Scatter( \n            x = so_far_df['index'], \n            y = so_far_df[value1], \n            stackgroup='one', \n            name = value1, \n            marker_color= color1), \n                               \n                           go.Scatter( \n            x = so_far_df['index'], \n            y = so_far_df[value2], \n            stackgroup='one',\n            name = value2, \n            marker_color= color2) \n        ]) \n    \n    plot.update_layout(\n    title={\n            'text' : title,\n            'y':0.95,\n            'x':0.5\n        },\n        xaxis_title=\"Date\"\n    )\n    \n    return plot.show()","121333b9":"plot_till_date('people_fully_vaccinated', 'people_vaccinated','People vaccinated vs Fully vaccinated till date', '#c4eb28', '#35eb28')","e3a9c200":"plot_till_date('people_fully_vaccinated_per_hundred', 'people_vaccinated_per_hundred', 'People vaccinated vs Fully vaccinated per hundred till date', '#0938e3','#7127cc')","03a6c32a":"def plot_pie(value, title, color) : \n    \n    new_dict = {}\n    \n    for v in df[value].unique() : \n        value_count = 0\n        \n        for i in range(len(df)) : \n            if df[value][i] == v : \n                value_count += 1 \n        \n        new_dict[v] = value_count \n        \n#     print(new_dict)\n\n\n    new_df = pd.DataFrame.from_dict(new_dict, orient = 'index', columns = ['Total'])\n    \n    if color == 'plasma' : \n        \n        fig = px.pie(new_df, values= 'Total',\n                     names = new_df.index,\n                     title = title,\n                     color_discrete_sequence=px.colors.sequential.Plasma)\n    \n    elif color == 'rainbow' : \n        \n        fig = px.pie(new_df, values= 'Total',\n                     names = new_df.index,\n                     title = title,\n                     color_discrete_sequence=px.colors.sequential.Rainbow)\n    \n    else :\n        \n        fig = px.pie(new_df, values= 'Total',\n                     names = new_df.index,\n                     title = title)\n    \n    fig.update_layout(\n        title={\n            'y':0.95,\n            'x':0.5\n        },\n        legend_title = value\n    )\n        \n    return fig.show()","c6a815ad":"df.vaccines.unique()","dac8cc1d":"print(len(df.vaccines.unique()))","013ce6c0":"plot_pie('vaccines', 'Various vaccines and their uses', 'plasma')","6fa28f51":"plot_pie('source_name', 'Sources', 'rainbow')","fa4f0fba":"wordCloud = WordCloud(\n    background_color='white',\n    max_font_size = 50).generate(' '.join(df.vaccines))\n\nplt.figure(figsize=(12,5))\nplt.axis('off')\nplt.imshow(wordCloud)\nplt.show()","88742dca":"fig = px.line(df, x = 'date', y ='daily_vaccinations_per_million', color = 'country')\n\nfig.update_layout(\n    title={\n            'text' : \"Daily vaccination trend per million\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Date\",\n    yaxis_title=\"Daily Vaccinations per million\"\n)\n\nfig.show()","7fcde673":"china_usa = [df[df.country == 'United States'], df[df.country == 'China']]\nresult = pd.concat(china_usa)\n\nfig = px.line(result, x = 'date', y ='total_vaccinations', color = 'country')\n\nfig.update_layout(\n    title={\n            'text' : \"Total vaccinated - China vs USA\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Date\",\n    yaxis_title=\"Total Vaccinations\"\n)\n\nfig.show()","d7f31c94":"# helper function\ndef plot_map(variable, title, color) : \n    \n    new_dict = {}\n    \n    for country in df.country.unique() : \n        \n        for i in range(len(df)) : \n            if df.country[i] == country : \n                new_dict[country] = df[variable][i]\n    \n    new_dict\n    \n    new_df = pd.DataFrame.from_dict(new_dict, orient='index', columns =[variable])\n    \n    if color == None : \n        \n        place_map = px.choropleth(new_df, locations =new_df.index,\n                                  locationmode = 'country names',\n                                  color=variable, \n                                  hover_name= new_df.index)\n    \n    else : \n        \n        place_map = px.choropleth(new_df, locations =new_df.index,\n                                  locationmode = 'country names',\n                                  color=variable, \n                                  hover_name= new_df.index,\n                                  color_continuous_scale= color)\n        \n    place_map.update_layout(\n        title_text = title,\n        title_x = 0.5,\n        geo=dict(showocean=True, oceancolor=\"#7af8ff\",\n                showland=True, landcolor=\"white\",\n                showframe = False))\n    \n    \n    return place_map.show()","845b71b0":"plot_map('total_vaccinations','Most vaccinated country', None)","e61ca569":"plot_map('vaccines','Vaccines Used in Different countries', None)","87460ad0":"plot_map('people_fully_vaccinated','People fully vaccinated in Different countries', 'haline')","16584e81":"def plot_animation(value, title, color) : \n    \n    new_df = df[df.year == 2021]\n    \n    new_df.sort_values(by='day', inplace = True)\n    \n    if color == None : \n        \n        place_map = px.choropleth(new_df, locations =\"country\",\n                                    locationmode = \"country names\", \n                                    color=value,\n                                    hover_name=\"country\",\n                                    animation_frame=\"day\")\n    \n    else : \n        \n        place_map = px.choropleth(new_df, locations =\"country\",\n                                locationmode = \"country names\", \n                                color=value,\n                                hover_name=\"country\",\n                                animation_frame=\"day\",\n                                color_continuous_scale= color)\n\n    place_map.update_layout(\n        title_text = title,\n        title_x = 0.5,\n        geo=dict(showocean=True, oceancolor=\"#7af8ff\",\n                showland=True, landcolor=\"white\",\n                showframe = False))\n    \n    return place_map.show()\n","dc85cbd8":"plot_animation('daily_vaccinations', 'Animation of daily vaccinations through January 2021 in different countries', None)","161b21ab":"plot_animation('daily_vaccinations_per_million', 'Animation of daily vaccinations per million through January 2021 in different countries', 'Plotly3')","7012f90f":"fig = px.scatter_3d(df, x='date', y='people_vaccinated', z='people_fully_vaccinated',\n                    color='country',\n                    hover_data=['country'],\n                    size = 'people_fully_vaccinated',\n                    opacity=0.9, \n                    symbol = 'country')\n\n\nfig.update_layout(title='Date vs People Vaccinated vs People Fully Vaccinated | 3D')\n\nfig.update_layout(\n        title={\n            'y':0.95,\n            'x':0.5\n        }\n    )\n\nfig.show()","97eb1175":"sns.heatmap(df.corr())\nplt.title('Corelation Heatmap')\nplt.yticks(rotation = 0);\nsize(10,7)","e7df484e":"# Country wise daily vaccination : <a class=\"anchor\" id=\"chapter7\"><\/a>","075a2c49":"From this visualization we can see that :\n\n1. **China** started **\"Mass Vaccination\"** first\n2. Though **USA** started second, in terms of daily vaccinations it stands at the top now.\n3. Following that we have **United Kingdom** and **England**\n4. And then **India** comes in the 5th position in terms of daily vaccination\n\n\n","92b19869":"# Data cleaning : <a class=\"anchor\" id=\"chapter2\"><\/a>","2bbf6721":"## Some features : <a class=\"anchor\" id=\"chapter3\"><\/a>","53bb1f8d":"# Date vs People Vaccinated vs People Fully Vaccinated | 3D: <a class=\"anchor\" id=\"chapter18\"><\/a>","0c83cbe4":"# Plot till date Function : <a class=\"anchor\" id=\"chapter23\"><\/a>","105268b8":"# Total vaccinated till date : <a class=\"anchor\" id=\"chapter6\"><\/a>","2a98ee5a":"# Corelation Heatmap: <a class=\"anchor\" id=\"chapter19\"><\/a>","048fdfa7":"Currently **Israel**, **Seychelles**, **Gibraltar**, **UAE** are leading the charge in Vaccination Rates","c3450847":"This is quite an eye opener to see that \n\n* Though the vaccination drive is going in full pace in most of the countries people are not fully vaccinated ","ffe5d043":"<h2 style='background: black; border:1; color: white'><center>Acknowledgement<\/center><\/h2>\n\nThis Notebook would not have been possible without the dataset provided by [@Gabriel Preda](https:\/\/www.kaggle.com\/gpreda). If you haven't already, I strongly encourage you to upvote his dataset on [Covid-19 world vaccination progress](https:\/\/www.kaggle.com\/gpreda\/covid-world-vaccination-progress).\n\n","bd41834a":"<h2 style='background: black; border:1; color: white'><center>Table of contents <\/center><\/h2>\n\n\n* [Import](#chapter1)\n* [Data Cleaning](#chapter2)\n    * [Some features](#chapter3)\n* [Data visualization](#chapter4)\n    * [Word Art of countries](#chapter5)\n* [Total vaccinated till date](#chapter6)\n* [Country wise daily vaccination](#chapter7)\n* [Plot till date Function](#chapter23)\n    * [People vaccinated vs people fully vaccinated in the world](#chapter24)\n    * [ People vaccinated vs people fully vaccinated per hundred in the world](#chapter25)\n* [Function for Pie-Plot](#chapter20)\n    * [Most used vaccine](#chapter8)\n    * [Most frequent Sources](#chapter9)\n    * [Word art of Vaccines](#chapter10)\n* [Daily vaccination trend per million](#chapter11)\n* [Total vaccinated - India vs USA](#chapter12)\n* [Function for Maps](#chapter21)\n    * [Most vaccinated country](#chapter13)\n    * [Vaccines Used in Different countries](#chapter14)\n    * [People fully vaccinated in Different countries](#chapter15)\n* [Function for Animation](#chapter22)\n    * [Animation of daily vaccinations through January 2021 in different countries](#chapter16)\n    * [Animation of daily vaccinations per million through January 2021 in different countries](#chapter17)\n* [Date vs People Vaccinated vs People Fully Vaccinated | 3D](#chapter18)\n* [Corelation Heatmap](#chapter19)","fdfb6a91":"# Function for Animation: <a class=\"anchor\" id=\"chapter22\"><\/a>","da5e478f":"## People vaccinated vs people fully vaccinated per hundred in the world : <a class=\"anchor\" id=\"chapter25\"><\/a>","c76d5392":"## Animation of daily vaccinations per million through January 2021 in different countries: <a class=\"anchor\" id=\"chapter17\"><\/a>","86935e1d":"# Most frequent Sources : <a class=\"anchor\" id=\"chapter9\"><\/a>\n","e5101830":"From the comparison between **China** and **USA** we can see that \n\n1. **USA** started the vaccination drive relative earlier.\n2. both are increasingly steadily at a similar rate","32fa50f9":"## Word Art of countries : <a class=\"anchor\" id=\"chapter5\"><\/a>","3ed1d171":"From the plot, some interesting facts are easily noticeable:\n\n1. The **United States**, despite all protests, has the highest number of vaccines.\n2. **China**, from where the virus started spreading, is at second.\n3. **UK**, where we have found a new variant strain of the virus, is right next.\n4. **India**, who has been supplying vaccines to the world is herself at 6th position.\n5. Following that, we have **Turkey**, **UAE**, **Germany** and others.","42a623b2":"# Function for Pie-Plot : <a class=\"anchor\" id=\"chapter20\"><\/a>","f2d9ca74":"## Vaccines Used in Different countries : <a class=\"anchor\" id=\"chapter14\"><\/a>","ac240c02":"## Animation of daily vaccinations through January 2021 in different countries: <a class=\"anchor\" id=\"chapter16\"><\/a>","20fd720d":"# Function for Maps : <a class=\"anchor\" id=\"chapter21\"><\/a>","390e4a1e":"# Data Visualization : <a class=\"anchor\" id=\"chapter4\"><\/a>","c721e217":"<h2 style='background: black; border:1; color: white'><center>Conclusion<\/center><\/h2>\n\nVaccination is well underway but globally, most are not vaccinated.\n","adf8990e":"This is a very useful sweet little **function** to resize the **Seaborn** plots","41c02e2e":"# Total vaccinated - China vs USA : <a class=\"anchor\" id=\"chapter12\"><\/a>","53abf344":"### Correction : \nInitially there were **36** sources. Now there is **40+** sources that's why the shares are getting devided.\n","a2c0113d":"## Most vaccinated country : <a class=\"anchor\" id=\"chapter13\"><\/a>","dccf6a79":"<h2 style='background: black; border:1; color: white'><center>Basic features of the data set<\/center><\/h2>\n\nThis is a basic exploratory data analysis of the Global Covid-19 vaccination drive. Hopefully, we can answer some interesting questions about how things are going and when we can expect things to return to \"normal\".\n\n* This data set starts on 2020-12-13, which means the vaccination according to it starts on this specific date and captures the data upto 2021-02-06.\n\n* Till date the vaccination drive is going around the world in 78 different countries with more than 10 types of vaccines are being used. \n\n","2297e457":"In this section we have done particularly few things : \n\n1. Filled the null values with 0 and assumed that nothing has happened* regarding that particular column.\n2. Converted all the numeric values* from object type to integer type.\n3. Added 3 new columns viz **'year'**, **'month'** and **'date'**. (Asking why? You will get that later on...)\n4. After adding them I turned them into integer type again and \n5. Converted the date column into datetime from object type.\n","c16c9add":"## Word art of Vaccines<a class=\"anchor\" id=\"chapter10\"><\/a>","59e83298":"**20 unique vaccines being distributed currently**","aa9ad33b":"As you can see, a lot of null values are present in the data. The probable reasons would be:\n\n1. The vaccination drive has just started. So, it hasn't quite taken pace all over the world.\n\n2. The sources are not enough to cover the vaccination daily everywhere.\n\nWhatever the reason might be, lets move ahead with cleaning the data and filling the missing values...","2b888d40":"### DataFrame is ready to get visualized ","a746c83e":"## Most used vaccine : <a class=\"anchor\" id=\"chapter8\"><\/a>\n","37193335":"# Daily vaccination trend per million : <a class=\"anchor\" id=\"chapter11\"><\/a>","67695920":"<h1 style='background: black; border:1; color: white'><center>Covid-19 Vaccination Drive<\/center><\/h1>","606ef862":"## People fully vaccinated in Different countries : <a class=\"anchor\" id=\"chapter15\"><\/a>","c76fab14":"From this plot you can see the use of vaccines around the world : \n\n1. Though **India** sent it's vaccine to **Brazil**, it seems that Brazil has used the **Oxford** vaccine so far. Maybe in future we will get to see more use of **Covaxine** in Brazil.\n2. In **North America** and **Europe**, **Pfizer** and **Moderna** are used widely.\n3. In **Asia, Africa** and **South America**, **\"Sputnik V\"** is being used mostly. ","5240ca8e":"# Import : <a class=\"anchor\" id=\"chapter1\"><\/a>","f4ec7490":"From this Pie chart we can see that : \n\n1. The most used vaccine around the world is **Pfizer\/BioNTech** which constitutes around **47.6%** of the totals vaccines used.\n2. And the second most used vaccine is **Moderna** \n3. Then comes **Oxford\/AstraZeneca, Sinovac** , **Pfizer\/BioNTech, Sinopharm** and **Sputnik V**\n4. **Indian** **Covaxin, Oxford\/AstraZeneca** comes at 10th with **0.933%** market share.","70ac32d1":"## People vaccinated vs people fully vaccinated in the world : <a class=\"anchor\" id=\"chapter24\"><\/a>","bc866f6a":"<h2 style='background: black; border:1; color: white'><center>Some Key observations<\/center><\/h2>\n\n2. In **North America** and **Europe Pfizer** and **Moderna** is widely used \n3. In **Asia, Africa** and **South America Sputnik V** is mostly used \n4. The most used vaccine around the world is **Pfizer\/ BioNTech**. Around **47.6%** of the total vaccines used \n\n"}}