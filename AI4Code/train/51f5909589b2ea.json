{"cell_type":{"4dfbe1a2":"code","c7379fba":"code","8bba4f97":"code","5d77dff4":"code","36a1666d":"code","adb37ad2":"code","e3c2a6e2":"code","7bd6bd15":"code","384eb30d":"code","dc6131e2":"code","31f945a3":"code","778ec928":"code","29cb8c1c":"code","ff09d914":"code","54d57ead":"code","5f4f72a5":"code","6ddec205":"code","023c69fd":"code","b31f3abc":"code","4589e371":"code","7ee711f0":"code","061eec80":"code","81fb8434":"code","143412ca":"code","54baf72c":"code","051d265a":"code","b4c47960":"code","b78c1c6a":"code","e1bf49a0":"code","91d80f6c":"code","57223002":"code","2570e5de":"code","31c971eb":"code","a5e7981f":"code","40f3a639":"code","50f09ced":"markdown","595c31c5":"markdown","89e37c6b":"markdown","458bfdd4":"markdown","2b62f5f0":"markdown","117362aa":"markdown","0dfb1686":"markdown","fc39e9cb":"markdown","5994bc68":"markdown","d20ad861":"markdown","71755e04":"markdown","001c74a5":"markdown","89a8f0e0":"markdown"},"source":{"4dfbe1a2":"# !pip3 install graphviz\n# !pip3 install dask\n# !pip install \"dask[complete]\" \n# !pip3 install toolz\n# !pip3 install cloudpickle\n# !pip3 install folium\n# !pip install gpxpy\n!pip3 install pyroomacoustics","c7379fba":"import os\nimport time\nimport math\nimport scipy\nimport pickle\nimport warnings\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport xgboost as xgb\nimport matplotlib.pylab as plt\n\n# This library helps to open street map\nimport folium \n\n# Similar to pandas, but helps in parallel computing\n# Below are some resources for getting familiar with Dask\n# https:\/\/www.youtube.com\/watch?v=ieW3G7ZzRZ0\n# https:\/\/github.com\/dask\/dask-tutorial\n# https:\/\/github.com\/dask\/dask-tutorial\/blob\/master\/07_dataframe.ipynb\nimport dask.dataframe as dd\n\n# This library is used while we calculate the straight line distance between two (lat, lon) pairs \n# in miles. Get the haversine distance\nimport gpxpy.geo \n\n# Used to determine the size of plots\nfrom matplotlib import rcParams \n\n# https:\/\/pyroomacoustics.readthedocs.io\/en\/pypi-release\/pyroomacoustics.doa.detect_peaks.html\n# Used for detection of peaks\nfrom pyroomacoustics.doa.detect_peaks import detect_peaks\n\n# Download migwin: https:\/\/mingw-w64.org\/doku.php\/download\/mingw-builds\n# Install it in your system and keep the path, migw_path ='installed path'\n# mingw_path = 'C:\\\\Program Files\\\\mingw-w64\\\\x86_64-5.3.0-posix-seh-rt_v4-rev0\\\\mingw64\\\\bin'\n# os.environ['PATH'] = mingw_path + ';' + os.environ['PATH']\n\nfrom sklearn.cluster import MiniBatchKMeans, KMeans\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression\n\nfrom prettytable import PrettyTable\nfrom datetime import datetime as dt\n\nmatplotlib.use('nbagg');\nwarnings.filterwarnings(\"ignore\");\n%matplotlib inline\n\n# To find the running time of the entire kernel\nglobalstart = dt.now()","8bba4f97":"month = dd.read_csv('..\/input\/nyc-yellow-taxi-trip-data\/yellow_tripdata_2015-01.csv')\nmonth.columns","5d77dff4":"month.visualize()","36a1666d":"month.fare_amount.sum().visualize()","adb37ad2":"#table below shows few datapoints along with all our features\nmonth = dd.read_csv('..\/input\/nyc-yellow-taxi-trip-data\/yellow_tripdata_2015-01.csv')\nprint(month.columns)","e3c2a6e2":"month.head()","7bd6bd15":"# Plotting pickup cordinates which are outside the bounding box of New-York \n# we will collect all the points outside the bounding box of newyork city to outlier_locations\noutlier_locations = month[((month.pickup_longitude <= -74.15) | (month.pickup_latitude <= 40.5774)| \\\n                   (month.pickup_longitude >= -73.7004) | (month.pickup_latitude >= 40.9176))]\n\n# creating a map with the a base location\n# read more about the folium here: http:\/\/folium.readthedocs.io\/en\/latest\/quickstart.html\n\n# note: you dont need to remember any of these, you dont need indeepth knowledge on these maps and plots\n\nmap_osm = folium.Map(location=[40.734695, -73.990372], tiles='Stamen Toner')\n\n# we will spot only first 100 outliers on the map, plotting all the outliers will take more time\nsample_locations = outlier_locations.head(10000)\nfor i,j in sample_locations.iterrows():\n    if int(j['pickup_latitude']) != 0:\n        folium.Marker(list((j['pickup_latitude'],j['pickup_longitude']))).add_to(map_osm)\nmap_osm","384eb30d":"# Plotting dropoff cordinates which are outside the bounding box of New-York \n# we will collect all the points outside the bounding box of newyork city to outlier_locations\noutlier_locations = month[((month.dropoff_longitude <= -74.15) | (month.dropoff_latitude <= 40.5774)| \\\n                   (month.dropoff_longitude >= -73.7004) | (month.dropoff_latitude >= 40.9176))]\n\n# creating a map with the a base location\n# read more about the folium here: http:\/\/folium.readthedocs.io\/en\/latest\/quickstart.html\n\n# note: you dont need to remember any of these, you dont need indeepth knowledge on these maps and plots\n\nmap_osm = folium.Map(location=[40.734695, -73.990372], tiles='Stamen Toner')\n\n# we will spot only first 100 outliers on the map, plotting all the outliers will take more time\nsample_locations = outlier_locations.head(10000)\nfor i,j in sample_locations.iterrows():\n    if int(j['pickup_latitude']) != 0:\n        folium.Marker(list((j['dropoff_latitude'],j['dropoff_longitude']))).add_to(map_osm)\nmap_osm","dc6131e2":"#The timestamps are converted to unix so as to get duration(trip-time) & speed also pickup-times in unix are used while binning \n\n# in out data we have time in the formate \"YYYY-MM-DD HH:MM:SS\" we convert thiss sting to python time formate and then into unix time stamp\n# https:\/\/stackoverflow.com\/a\/27914405\ndef convert_to_unix(s):\n    return time.mktime(datetime.datetime.strptime(s, \"%Y-%m-%d %H:%M:%S\").timetuple())\n\n\n# we return a data frame which contains the columns\n# 1.'passenger_count' : self explanatory\n# 2.'trip_distance' : self explanatory\n# 3.'pickup_longitude' : self explanatory\n# 4.'pickup_latitude' : self explanatory\n# 5.'dropoff_longitude' : self explanatory\n# 6.'dropoff_latitude' : self explanatory\n# 7.'total_amount' : total fair that was paid\n# 8.'trip_times' : duration of each trip\n# 9.'pickup_times : pickup time converted into unix time \n# 10.'Speed' : velocity of each trip\n\n\ndef return_with_trip_times(month):\n    duration = month[['tpep_pickup_datetime','tpep_dropoff_datetime']].compute()\n    #pickups and dropoffs to unix time\n    duration_pickup = [convert_to_unix(x) for x in duration['tpep_pickup_datetime'].values]\n    duration_drop = [convert_to_unix(x) for x in duration['tpep_dropoff_datetime'].values]\n    #calculate duration of trips\n    durations = (np.array(duration_drop) - np.array(duration_pickup))\/float(60)\n\n    #append durations of trips and speed in miles\/hr to a new dataframe\n    new_frame = month[['passenger_count','trip_distance','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','total_amount']].compute()\n    \n    new_frame['trip_times'] = durations\n    new_frame['pickup_times'] = duration_pickup\n    new_frame['Speed'] = 60*(new_frame['trip_distance']\/new_frame['trip_times'])\n    \n    return new_frame\n\nframe_with_durations = return_with_trip_times(month)","31f945a3":"frame_with_durations.head()","778ec928":"# the skewed box plot shows us the presence of outliers \nsns.boxplot(y=\"trip_times\", data =frame_with_durations)\nplt.show()","29cb8c1c":"#calculating 0-100th percentile to find a the correct percentile value for removal of outliers\nfor i in range(0,100,10):\n    var =frame_with_durations[\"trip_times\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint (\"100 percentile value is \",var[-1])","ff09d914":"#looking further from the 99th percecntile\nfor i in range(90,100):\n    var =frame_with_durations[\"trip_times\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint (\"100 percentile value is \",var[-1])","54d57ead":"#removing data based on our analysis and TLC regulations\nframe_with_durations_modified=frame_with_durations[(frame_with_durations.trip_times>1) & (frame_with_durations.trip_times<720)]","5f4f72a5":"#box-plot after removal of outliers\nsns.boxplot(y=\"trip_times\", data =frame_with_durations_modified)\nplt.show()","6ddec205":"#pdf of trip-times after removing the outliers\n# sns.FacetGrid(frame_with_durations_modified,size=6) \\\n#       .map(sns.kdeplot,\"trip_times\") \\\n#       .add_legend();\n# plt.show();","023c69fd":"#converting the values to log-values to chec for log-normal\nimport math\nframe_with_durations_modified['log_times']=[math.log(i) for i in frame_with_durations_modified['trip_times'].values]","b31f3abc":"#pdf of log-values\n# sns.FacetGrid(frame_with_durations_modified,size=6) \\\n#       .map(sns.kdeplot,\"log_times\") \\\n#       .add_legend();\n# plt.show();","4589e371":"#Q-Q plot for checking if trip-times is log-normal\nscipy.stats.probplot(frame_with_durations_modified['log_times'].values, plot=plt)\nplt.show()","7ee711f0":"# check for any outliers in the data after trip duration outliers removed\n# box-plot for speeds with outliers\nframe_with_durations_modified['Speed'] = 60*(frame_with_durations_modified['trip_distance']\/frame_with_durations_modified['trip_times'])\nsns.boxplot(y=\"Speed\", data =frame_with_durations_modified)\nplt.show()","061eec80":"#calculating speed values at each percntile 0,10,20,30,40,50,60,70,80,90,100 \nfor i in range(0,100,10):\n    var =frame_with_durations_modified[\"Speed\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","81fb8434":"#calculating speed values at each percntile 90,91,92,93,94,95,96,97,98,99,100\nfor i in range(90,100):\n    var =frame_with_durations_modified[\"Speed\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","143412ca":"#calculating speed values at each percntile 99.0,99.1,99.2,99.3,99.4,99.5,99.6,99.7,99.8,99.9,100\nfor i in np.arange(0.0, 1.0, 0.1):\n    var =frame_with_durations_modified[\"Speed\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(99+i,var[int(len(var)*(float(99+i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","54baf72c":"#removing further outliers based on the 99.9th percentile value\nframe_with_durations_modified=frame_with_durations[(frame_with_durations.Speed>0) & (frame_with_durations.Speed<45.31)]","051d265a":"#avg.speed of cabs in New-York\nsum(frame_with_durations_modified[\"Speed\"]) \/ float(len(frame_with_durations_modified[\"Speed\"]))","b4c47960":"# up to now we have removed the outliers based on trip durations and cab speeds\n# lets try if there are any outliers in trip distances\n# box-plot showing outliers in trip-distance values\nsns.boxplot(y=\"trip_distance\", data =frame_with_durations_modified)\nplt.show()","b78c1c6a":"#calculating trip distance values at each percntile 0,10,20,30,40,50,60,70,80,90,100 \nfor i in range(0,100,10):\n    var =frame_with_durations_modified[\"trip_distance\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","e1bf49a0":"#calculating trip distance values at each percntile 90,91,92,93,94,95,96,97,98,99,100\nfor i in range(90,100):\n    var =frame_with_durations_modified[\"trip_distance\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","91d80f6c":"#calculating trip distance values at each percntile 99.0,99.1,99.2,99.3,99.4,99.5,99.6,99.7,99.8,99.9,100\nfor i in np.arange(0.0, 1.0, 0.1):\n    var =frame_with_durations_modified[\"trip_distance\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(99+i,var[int(len(var)*(float(99+i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","57223002":"#removing further outliers based on the 99.9th percentile value\nframe_with_durations_modified=frame_with_durations[(frame_with_durations.trip_distance>0) & (frame_with_durations.trip_distance<23)]","2570e5de":"#box-plot after removal of outliers\nsns.boxplot(y=\"trip_distance\", data = frame_with_durations_modified)\nplt.show()","31c971eb":"# up to now we have removed the outliers based on trip durations, cab speeds, and trip distances\n# lets try if there are any outliers in based on the total_amount\n# box-plot showing outliers in fare\nsns.boxplot(y=\"total_amount\", data =frame_with_durations_modified)\nplt.show()","a5e7981f":"#calculating total fare amount values at each percntile 0,10,20,30,40,50,60,70,80,90,100 \nfor i in range(0,100,10):\n    var = frame_with_durations_modified[\"total_amount\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","40f3a639":"#calculating total fare amount values at each percntile 90,91,92,93,94,95,96,97,98,99,100\nfor i in range(90,100):\n    var = frame_with_durations_modified[\"total_amount\"].values\n    var = np.sort(var,axis = None)\n    print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\nprint(\"100 percentile value is \",var[-1])","50f09ced":"# Importing the dataset","595c31c5":"# Dataset Information\n<p>\nGe the data from : http:\/\/www.nyc.gov\/html\/tlc\/html\/about\/trip_record_data.shtml (2016 data)\nThe data used in the attached datasets were collected and provided to the NYC Taxi and Limousine Commission (TLC) \n<\/p>\n## Information on taxis:\n\n<h5> Yellow Taxi: Yellow Medallion Taxicabs<\/h5>\n<p> These are the famous NYC yellow taxis that provide transportation exclusively through street-hails. The number of taxicabs is limited by a finite number of medallions issued by the TLC. You access this mode of transportation by standing in the street and hailing an available taxi with your hand. The pickups are not pre-arranged.<\/p>\n\n<h5> For Hire Vehicles (FHVs) <\/h5>\n<p> FHV transportation is accessed by a pre-arrangement with a dispatcher or limo company. These FHVs are not permitted to pick up passengers via street hails, as those rides are not considered pre-arranged. <\/p>\n\n<h5> Green Taxi: Street Hail Livery (SHL) <\/h5>\n<p>  The SHL program will allow livery vehicle owners to license and outfit their vehicles with green borough taxi branding, meters, credit card machines, and ultimately the right to accept street hails in addition to pre-arranged rides. <\/p>\n\n\n## Footnote:\n**In the given notebook we are considering only the yellow taxis for the time period between Jan - Mar 2015 & Jan - Mar 2016****","89e37c6b":"# ML Problem Formulation\n<p><b> Time-series forecasting and Regression<\/b><\/p>\n<br>\n-<i> To find number of pickups, given location cordinates(latitude and longitude) and time, in the query reigion and surrounding regions.<\/i>\n<p> \nTo solve the above we would be using data collected in Jan - Mar 2015 to predict the pickups in Jan - Mar 2016.\n<\/p>\n\n# Performance metrics\n1. Mean Absolute percentage error.\n2. Mean Squared error.\n\n## Data Cleaning\n\nIn this section we will be doing univariate analysis and removing outlier\/illegitimate values which may be caused due to some error","458bfdd4":"# Dataset Features Description","2b62f5f0":"## 3. Trip Durations\nAccording to NYC Taxi &amp; Limousine Commision Regulations.\nThe maximum allowed trip duration in a 24 hour interval is 12 hours.","117362aa":"## 5. Trip Distance","0dfb1686":"## 2. Dropoff Latitude & Longitude\nIt is inferred from the source https:\/\/www.flickr.com\/places\/info\/2459115 that New York is bounded by the location cordinates(lat,long) - (40.5774, -74.15) & (40.9176,-73.7004) so hence any cordinates not within these cordinates are not considered by us as we are only concerned with dropoffs which are within New York.","fc39e9cb":"<b>Observation:-<\/b> The observations here are similar to those obtained while analysing pickup latitude and longitude","5994bc68":"## 6. Total Fare","d20ad861":"## 4. Speed","71755e04":"<b>Observation:-<\/b> As you can see above that there are some points just outside the boundary but there are a few that are in either South america, Mexico or Canada","001c74a5":"## 1. Pickup Latitude & Longitutde\nIt is inferred from the source https:\/\/www.flickr.com\/places\/info\/2459115 that New York is bounded by the location cordinates(lat,long) - (40.5774, -74.15) & (40.9176,-73.7004) so hence any cordinates not within these cordinates are not considered by us as we are only concerned with pickups which originate within New York.","89a8f0e0":"## Features in the dataset:\n<table border=\"1\">\n\t<tr>\n\t\t<th>Field Name<\/th>\n\t\t<th>Description<\/th>\n\t<\/tr>\n\t<tr>\n\t\t<td>VendorID<\/td>\n\t\t<td>\n\t\tA code indicating the TPEP provider that provided the record.\n\t\t<ol>\n\t\t\t<li>Creative Mobile Technologies<\/li>\n\t\t\t<li>VeriFone Inc.<\/li>\n\t\t<\/ol>\n\t\t<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>tpep_pickup_datetime<\/td>\n\t\t<td>The date and time when the meter was engaged.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>tpep_dropoff_datetime<\/td>\n\t\t<td>The date and time when the meter was disengaged.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Passenger_count<\/td>\n\t\t<td>The number of passengers in the vehicle. This is a driver-entered value.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Trip_distance<\/td>\n\t\t<td>The elapsed trip distance in miles reported by the taximeter.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Pickup_longitude<\/td>\n\t\t<td>Longitude where the meter was engaged.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Pickup_latitude<\/td>\n\t\t<td>Latitude where the meter was engaged.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>RateCodeID<\/td>\n\t\t<td>The final rate code in effect at the end of the trip.\n\t\t<ol>\n\t\t\t<li> Standard rate <\/li>\n\t\t\t<li> JFK <\/li>\n\t\t\t<li> Newark <\/li>\n\t\t\t<li> Nassau or Westchester<\/li>\n\t\t\t<li> Negotiated fare <\/li>\n\t\t\t<li> Group ride<\/li>\n\t\t<\/ol>\n\t\t<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Store_and_fwd_flag<\/td>\n\t\t<td>This flag indicates whether the trip record was held in vehicle memory before sending to the vendor,<br\\> aka \u201cstore and forward,\u201d because the vehicle did not have a connection to the server.\n\t\t<br\\>Y= store and forward trip\n\t\t<br\\>N= not a store and forward trip\n\t\t<\/td>\n\t<\/tr>\n\n\t<tr>\n\t\t<td>Dropoff_longitude<\/td>\n\t\t<td>Longitude where the meter was disengaged.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Dropoff_ latitude<\/td>\n\t\t<td>Latitude where the meter was disengaged.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Payment_type<\/td>\n\t\t<td>A numeric code signifying how the passenger paid for the trip.\n\t\t<ol>\n\t\t\t<li> Credit card <\/li>\n\t\t\t<li> Cash <\/li>\n\t\t\t<li> No charge <\/li>\n\t\t\t<li> Dispute<\/li>\n\t\t\t<li> Unknown <\/li>\n\t\t\t<li> Voided trip<\/li>\n\t\t<\/ol>\n\t\t<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Fare_amount<\/td>\n\t\t<td>The time-and-distance fare calculated by the meter.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Extra<\/td>\n\t\t<td>Miscellaneous extras and surcharges. Currently, this only includes. the $0.50 and $1 rush hour and overnight charges.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>MTA_tax<\/td>\n\t\t<td>0.50 MTA tax that is automatically triggered based on the metered rate in use.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Improvement_surcharge<\/td>\n\t\t<td>0.30 improvement surcharge assessed trips at the flag drop. the improvement surcharge began being levied in 2015.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Tip_amount<\/td>\n\t\t<td>Tip amount \u2013 This field is automatically populated for credit card tips.Cash tips are not included.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Tolls_amount<\/td>\n\t\t<td>Total amount of all tolls paid in trip.<\/td>\n\t<\/tr>\n\t<tr>\n\t\t<td>Total_amount<\/td>\n\t\t<td>The total amount charged to passengers. Does not include cash tips.<\/td>\n\t<\/tr>\n<\/table>"}}