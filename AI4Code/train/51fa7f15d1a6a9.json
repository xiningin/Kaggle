{"cell_type":{"2daf3230":"code","1e1fba98":"code","4bd16b46":"code","2590a99f":"code","72c2cbba":"code","5c90af5f":"code","fffaa940":"code","b4c215d7":"code","b122bc05":"code","41a56708":"code","158651bd":"code","bc86aca7":"code","7b1f3200":"markdown","7feab30f":"markdown"},"source":{"2daf3230":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1e1fba98":"!pip install h3","4bd16b46":"import pandas as pd\nimport numpy as np\n","2590a99f":"DATA_FOLDER = '\/kaggle\/input\/bigquery-geotab-intersection-congestion\/'","72c2cbba":"train_data = pd.read_csv(DATA_FOLDER + 'train.csv')\ntest_data = pd.read_csv(DATA_FOLDER + 'test.csv')\n\nprint(train_data.shape)\nprint(test_data.shape)","5c90af5f":"import folium\n\nfrom h3 import h3","fffaa940":"COLOR_MAP = {\n    1: 'orange',\n    2: 'red',\n    3: 'green'\n}\n\nCITY_2_GEO = {\n    'Atlanta': [33.759004, -84.389609],\n    'Philadelphia': [39.952778, -75.163611],\n    'Boston': [42.358056, -71.063611],\n    'Chicago': [41.881944, -87.627778]\n}\n\nHEX_ADDR_PRECISION = 7","b4c215d7":"def plot_on_map(train_df, test_df, city = 'Atlanta'):\n    curr_map = folium.Map(location=CITY_2_GEO[city], \n                   zoom_start=11, \n                   prefer_canvas=True, \n                   tiles='stamentoner')\n    \n    city_train_df = train_df[train_df['City'] == city]\n    city_test_df = test_df[test_df['City'] == city]\n    \n    city_train_df = city_train_df[['IntersectionId', 'Latitude', 'Longitude']].drop_duplicates()\n    city_train_df['Group'] = 1\n\n    city_test_df = city_test_df[['IntersectionId', 'Latitude', 'Longitude']].drop_duplicates()\n    city_test_df['Group'] = 2\n\n    df1 = city_train_df.append(city_test_df)\n\n    points = df1.groupby(['IntersectionId', 'Latitude', 'Longitude']).sum().reset_index()\n    for index, row in points.iterrows():\n        folium.CircleMarker([row['Latitude'], row['Longitude']],\n                            radius=5,\n                            popup=row['IntersectionId'],\n                            color=COLOR_MAP[row['Group']],\n                           ).add_to(curr_map)\n\n    # build hex from train dataset\n    geo_unique = city_train_df[['Latitude', 'Longitude']].drop_duplicates()\n    geo_unique['hex_addr'] = np.vectorize(lambda longitude, latitude: h3.geo_to_h3(latitude, longitude, HEX_ADDR_PRECISION))(geo_unique['Longitude'], geo_unique['Latitude'])\n    \n    for hex_addr in geo_unique['hex_addr'].unique():       \n        polygons = h3.h3_set_to_multi_polygon([hex_addr], geo_json=False)\n        outlines = [loop for polygon in polygons for loop in polygon]\n        polyline = [outline + [outline[0]] for outline in outlines][0]\n        \n        folium.PolyLine(locations=polyline,\n                        weight=8,\n                        color='yellow',\n                        opacity=0.15,\n                        fill_color='yellow',\n                        fill_opacity=0.05,\n                        fill=True).add_to(curr_map)\n    \n    return curr_map","b122bc05":"plot_on_map(train_data, test_data, 'Atlanta')","41a56708":"plot_on_map(train_data, test_data, 'Philadelphia')","158651bd":"plot_on_map(train_data, test_data, 'Boston')","bc86aca7":"plot_on_map(train_data, test_data, 'Chicago')","7b1f3200":"# Geohashing\n\nI want to share with you a trick I have used in the past to work with latitude\/longitude data in ML models: the idea is to take the raw values and discretize into tiles using a geohashing technique (google s2, uber h3, as well as the original geohash). Once a tileID is generated out of the raw latitude\/longitude, it can then be mapped into a OHE variable (it would be quite high cardinality though). \n\nLet me show you some maps to give you an idea...","7feab30f":"Dots indicates the intersections in the provided datasets, with:\n- Green: available in both datasets\n- Orange: available only in the *train* dataset\n- Red: available only in the *test* dataset"}}