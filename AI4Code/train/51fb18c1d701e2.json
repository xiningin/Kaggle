{"cell_type":{"51f4320c":"code","0a6f890f":"code","e46e2892":"code","1af24ad4":"code","7f61fd71":"code","9ed0e44c":"code","8654b01b":"code","84d2ae3e":"code","d472e678":"code","ef327e65":"code","87f27c4e":"code","56814d31":"code","c57cd045":"code","7ac955bd":"code","1e2293c7":"code","24a7a693":"code","54553d2b":"code","5bc0ccc8":"code","b07ebb7c":"code","2add7415":"code","54f43a13":"code","58a5b2a0":"code","de253ce4":"code","8e7676b6":"code","33141f82":"code","b9a442fd":"code","4f4bb5ba":"code","cd213dcf":"code","79276059":"code","c71b1a25":"code","89a06d77":"code","26a2e366":"code","dd68324e":"code","4949aa0a":"code","1c0808d8":"code","fe6e40b8":"code","af30ebdd":"code","b64bdb0b":"code","01d7074d":"code","64de5691":"markdown","013d2288":"markdown","f8e3aa7e":"markdown","1c27098b":"markdown","09d86775":"markdown","7ab036a5":"markdown","ab3e56de":"markdown","f732a793":"markdown","d7f7df17":"markdown","bc3b36b9":"markdown","97530f1c":"markdown","eec4dc07":"markdown","1852dc7a":"markdown","4fd87aae":"markdown","4c58fb15":"markdown","b2a71544":"markdown","deb0952b":"markdown","03b8f7f1":"markdown","d1a82d67":"markdown","f7502617":"markdown","4bbfe5dd":"markdown","179cdf96":"markdown","cb51e73d":"markdown","da0f5fc5":"markdown"},"source":{"51f4320c":"import pandas as pd\nimport numpy as np\n\nfrom datetime import timedelta, date\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\nfrom lightgbm import LGBMClassifier","0a6f890f":"import warnings\nwarnings.filterwarnings('ignore')","e46e2892":"train = pd.read_csv('\/kaggle\/input\/car-loan\/car_loan_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/car-loan\/car_loan_test.csv')\n\ntrain.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in train.columns]\ntest.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in test.columns]","1af24ad4":"train = train.fillna('other')\ntest = test.fillna('other')","7f61fd71":"train = train.replace({'PERFORM_CNS_SCORE_DESCRIPTION':{'C-Very Low Risk':'Low', 'A-Very Low Risk':'Low',\n                                                       'B-Very Low Risk':'Low', 'D-Very Low Risk':'Low',\n                                                       'F-Low Risk':'Low', 'E-Low Risk':'Low', 'G-Low Risk':'Low',\n                                                       'H-Medium Risk': 'Medium', 'I-Medium Risk': 'Medium',\n                                                       'J-High Risk':'High', 'K-High Risk':'High','L-Very High Risk':'High',\n                                                       'M-Very High Risk':'High','Not Scored: More than 50 active Accounts found':'Not Scored',\n                                                       'Not Scored: Only a Guarantor':'Not Scored','Not Scored: Not Enough Info available on the customer':'Not Scored',\n                                                        'Not Scored: No Activity seen on the customer (Inactive)':'Not Scored','Not Scored: No Updates available in last 36 months':'Not Scored',\n                                                       'Not Scored: Sufficient History Not Available':'Not Scored', 'No Bureau History Available':'Not Scored'\n                                                       }})\n\ntest = test.replace({'PERFORM_CNS_SCORE_DESCRIPTION':{'C-Very Low Risk':'Low', 'A-Very Low Risk':'Low',\n                                                       'B-Very Low Risk':'Low', 'D-Very Low Risk':'Low',\n                                                       'F-Low Risk':'Low', 'E-Low Risk':'Low', 'G-Low Risk':'Low',\n                                                       'H-Medium Risk': 'Medium', 'I-Medium Risk': 'Medium',\n                                                       'J-High Risk':'High', 'K-High Risk':'High','L-Very High Risk':'High',\n                                                       'M-Very High Risk':'High','Not Scored: More than 50 active Accounts found':'Not Scored',\n                                                       'Not Scored: Only a Guarantor':'Not Scored','Not Scored: Not Enough Info available on the customer':'Not Scored',\n                                                        'Not Scored: No Activity seen on the customer (Inactive)':'Not Scored','Not Scored: No Updates available in last 36 months':'Not Scored',\n                                                       'Not Scored: Sufficient History Not Available':'Not Scored', 'No Bureau History Available':'Not Scored'\n                                                       }})","9ed0e44c":"#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u0442\u044b\ntrain['Date_of_Birth'] = pd.to_datetime(train['Date_of_Birth'])\ntrain['DisbursalDate'] = pd.to_datetime(train['DisbursalDate'])\ntest['Date_of_Birth'] = pd.to_datetime(test['Date_of_Birth'])\ntest['DisbursalDate'] = pd.to_datetime(test['DisbursalDate'])\nnow = pd.Timestamp('now')\n\nfuture = train['Date_of_Birth'] > date(year=2050,month=1,day=1)\ntrain.loc[future, 'Date_of_Birth'] -= timedelta(days=365.25*100)\nfuture = test['Date_of_Birth'] > date(year=2050,month=1,day=1)\ntest.loc[future, 'Date_of_Birth'] -= timedelta(days=365.25*100)\n\ntrain['birth_year'] = train['Date_of_Birth'].apply(lambda ts: ts.year)\ntrain['birth_month'] = train['Date_of_Birth'].apply(lambda ts: ts.month)\ntrain['birth_day'] = train['Date_of_Birth'].apply(lambda ts: ts.day)\ntrain['birth_dayofweek'] = train['Date_of_Birth'].apply(lambda ts: ts.dayofweek)\ntrain['Disbursal_month'] = train['DisbursalDate'].apply(lambda ts: ts.month)\ntrain['Disbursal_day'] = train['DisbursalDate'].apply(lambda ts: ts.day)\ntrain['Disbursal_dayofweek'] = train['DisbursalDate'].apply(lambda ts: ts.dayofweek)\ntrain['Age'] = (now - train['Date_of_Birth']).dt.days\ntrain['DaysSinceDisbursal'] = (now - train['DisbursalDate']).dt.days\n\ntest['birth_year'] = test['Date_of_Birth'].apply(lambda ts: ts.year)\ntest['birth_month'] = test['Date_of_Birth'].apply(lambda ts: ts.month)\ntest['birth_day'] = test['Date_of_Birth'].apply(lambda ts: ts.day)\ntest['birth_dayofweek'] = test['Date_of_Birth'].apply(lambda ts: ts.dayofweek)\ntest['Disbursal_month'] = test['DisbursalDate'].apply(lambda ts: ts.month)\ntest['Disbursal_day'] = test['DisbursalDate'].apply(lambda ts: ts.day)\ntest['Disbursal_dayofweek'] = test['DisbursalDate'].apply(lambda ts: ts.dayofweek)\ntest['Age'] = (now - test['Date_of_Birth']).dt.days\ntest['DaysSinceDisbursal'] = (now - test['DisbursalDate']).dt.days\n\ntrain = train.drop(['Date_of_Birth', 'DisbursalDate'], axis=1)\ntest = test.drop(['Date_of_Birth', 'DisbursalDate'], axis=1)","8654b01b":"def get_nmbr(text):\n    return int(text[0:text.find('y')]) * 12 + int(text[text.find(' ')+1:text.find('m')])\n\ntrain['AVERAGE_ACCT_AGE'] = train['AVERAGE_ACCT_AGE'].apply(get_nmbr)\ntrain['CREDIT_HISTORY_LENGTH'] = train['CREDIT_HISTORY_LENGTH'].apply(get_nmbr)\n\ntest['AVERAGE_ACCT_AGE'] = test['AVERAGE_ACCT_AGE'].apply(get_nmbr)\ntest['CREDIT_HISTORY_LENGTH'] = test['CREDIT_HISTORY_LENGTH'].apply(get_nmbr)","84d2ae3e":"categ_cols = ['branch_id', 'manufacturer_id', 'Employment_Type', 'State_ID', 'PERFORM_CNS_SCORE_DESCRIPTION',\n             'Aadhar_flag', 'PAN_flag', 'VoterID_flag', 'Driving_flag', 'Passport_flag']","d472e678":"for col in ['supplier_id', 'Current_pincode_ID', 'Employee_code_ID']:\n    train.loc[train[col].value_counts()[train[col]].values < 2, col] = -9999\n    test.loc[test[col].value_counts()[test[col]].values < 2, col] = -9999","ef327e65":"train.head()","87f27c4e":"train.drop(\"UniqueID\", axis=1, inplace=True)\ntest.drop(\"UniqueID\", axis=1, inplace=True)","56814d31":"train.dtypes","c57cd045":"train = pd.get_dummies(train)\ntest = pd.get_dummies(test)","7ac955bd":"def prod_det(x):\n    for i in range(x.shape[1]):\n        max = np.max(x[:,i])\n        x[:,i] = x[:,i] \/ max\n    return abs(np.linalg.det(np.dot(x.T, x)))","1e2293c7":"train_cols = train.drop(['target', 'MobileNo_Avl_Flag'], axis=1).columns","24a7a693":"var_sets = dict()","54553d2b":"for num, col in enumerate(train_cols):\n    cols_list = [col]\n    i = 0\n    while i <= 20:\n        dict_det = dict()\n        for col_to_add in train_cols:\n            if col_to_add not in cols_list:\n                df_aux = np.array(train[cols_list])\n                dict_det[col_to_add] = prod_det(df_aux)\n        cols_list.append(sorted(dict_det.items(), key=lambda x: -x[1])[0][0])\n        i += 1\n    var_sets[num] = cols_list","5bc0ccc8":"var_set = dict()\n\nfor i in range(len(var_sets.items())):\n    var_set[i] = set(var_sets[i])\n    ","b07ebb7c":"list_of_sets = [i[1] for i in list(var_set.items())]","2add7415":"list_of_sets = np.unique(list_of_sets)","54f43a13":"def test_var_sets(train):\n    cat_cols = [i for i in train.columns if i in categ_cols]\n\n    hot = OneHotEncoder(handle_unknown='ignore')\n    train_tr = pd.DataFrame(hot.fit_transform(train[cat_cols]).toarray(), columns=hot.get_feature_names())\n    #test_tr = pd.DataFrame(hot.transform(test[categ_cols]).toarray(), columns=hot.get_feature_names())\n\n    train = pd.concat([train.drop(cat_cols, axis=1), train_tr], axis=1)\n    #test = pd.concat([test.drop(categ_cols, axis=1), test_tr], axis=1)\n\n    del(train_tr)\n    #, test_tr)\n\n    y = train['target']\n    train = train.drop(['target', 'MobileNo_Avl_Flag'], axis=1)\n    #test = test.drop(['MobileNo_Avl_Flag'], axis=1)\n    \n    X_train, X_valid, y_train, y_valid = train_test_split(train, y, test_size=0.3, random_state = 42)\n    \n    lgbt = LGBMClassifier(max_depth=4, learning_rate=0.03, n_estimators=1000, random_state=42)\n    lgbt.fit(X_train, y_train)\n    y_pred = lgbt.predict_proba(X_valid)[:, 1]\n    \n    return roc_auc_score(y_valid, y_pred)","58a5b2a0":"var_sets_auc = dict()","de253ce4":"for varset in list_of_sets:\n    trainset = train[list(varset) + ['target', 'MobileNo_Avl_Flag']]\n    auc = test_var_sets(trainset)\n    var_sets_auc[auc] = varset","8e7676b6":"best_set = sorted(var_sets_auc.items(), key=lambda x: -x[0])[0][1]","33141f82":"best_set","b9a442fd":"train_best = train[best_set]\ntest_best = test[best_set]\n\ncat_cols = [i for i in train_best.columns if i in categ_cols]","4f4bb5ba":"train_best.nunique()","cd213dcf":"hot = OneHotEncoder(handle_unknown='ignore')\ntrain_tr = pd.DataFrame(hot.fit_transform(train_best[cat_cols]).toarray(), columns=hot.get_feature_names())\ntest_tr = pd.DataFrame(hot.transform(test_best[cat_cols]).toarray(), columns=hot.get_feature_names())\n\ntrain_best = pd.concat([train_best.drop(cat_cols, axis=1), train_tr], axis=1)\ntest_best = pd.concat([test_best.drop(cat_cols, axis=1), test_tr], axis=1)\n\ndel(train_tr, test_tr)","79276059":"y = train['target']\n#train = train.drop(['target', 'MobileNo_Avl_Flag'], axis=1)\n#test = test.drop(['MobileNo_Avl_Flag'], axis=1)","c71b1a25":"X_train, X_valid, y_train, y_valid = train_test_split(train_best, y, test_size=0.3, random_state = 42)","89a06d77":"#%%time\nlgbm_params = {'max_depth': [3,5,7],\n              'learning_rate':[0.05, 0.01, 0.03],\n              'n_estimators':[1000, 1200, 1400]}\nlgbt = LGBMClassifier(random_state=42)\ncv = KFold(n_splits=5, shuffle=True, random_state=42)\nlgbm_grid = GridSearchCV(lgbt, lgbm_params, cv=cv, scoring='roc_auc', verbose=1, n_jobs=-1)\nlgbm_grid.fit(X_train, y_train)","26a2e366":"lgbm_grid.best_params_","dd68324e":"lgbt = LGBMClassifier(max_depth=3, learning_rate=0.05, n_estimators=1000, random_state=42)\nlgbt.fit(X_train, y_train)\ny_pred = lgbt.predict_proba(X_valid)[:, 1]\ny_pred = (y_pred - np.min(y_pred)) \/ (np.max(y_pred) - np.min(y_pred))\nroc_auc_score(y_valid, y_pred)","4949aa0a":"y = train['target']\ntrain = train.drop(['target', 'MobileNo_Avl_Flag'], axis=1)\ntest = test.drop(['MobileNo_Avl_Flag'], axis=1)\nX_train, X_valid, y_train, y_valid = train_test_split(train, y, test_size=0.3, random_state = 42)\n\nlgbm_params = {'max_depth': [4],\n              'learning_rate':np.arange(0.03, 0.06, 0.01),\n              'n_estimators':[500, 1000, 1500, 2000]}\nlgbt = LGBMClassifier(random_state=42)\ncv = KFold(n_splits=5, shuffle=True, random_state=42)\nlgbm_grid = GridSearchCV(lgbt, lgbm_params, cv=cv, scoring='roc_auc')\nlgbm_grid.fit(X_train, y_train)","1c0808d8":"lgbt = LGBMClassifier(max_depth=4, learning_rate=0.03, n_estimators=1000)\nlgbt.fit(X_train, y_train)\ny_pred = lgbt.predict_proba(X_valid)[:, 1]\nroc_auc_score(y_valid, y_pred)","fe6e40b8":"lgbt = LGBMClassifier(max_depth=4, learning_rate=0.03, n_estimators=1000)\nlgbt.fit(train, y)","af30ebdd":"answer_1 = lgbt.predict_proba(test)[:, 1]\nanswer_1","b64bdb0b":"answer1 = pd.DataFrame(columns=['ID', 'Predicted'])\nanswer1['ID'] = test.index\nanswer1['Predicted'] = answer_1","01d7074d":"answer1.to_csv('answer228.csv', index=None)","64de5691":"**\u041d\u0443 \u0438 \u0437\u0430\u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u043b\u0438 \u044d\u0442\u043e \u043f\u043e\u0442\u043e\u043c. \u041a\u043e\u043d\u0435\u0446**  \n~~\u0411\u043b\u0438\u043d, \u0442\u0430\u043a \u043d\u0435\u0441\u043c\u0435\u0448\u043d\u043e \u0436\u0435!~~","013d2288":"**\u0423 \u043d\u0430\u0441 \u043a\u0443\u0447\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0432 \u0441\u043c\u044b\u0441\u043b\u0435 \u0430-\u043b\u044f \u0434\u0435\u0439\u0442\u0442\u0430\u0439\u043c\u044b \u0432\u0441\u044f\u043a\u0438\u0435), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0449\u0430\u0441 \u043c\u044b \u0438\u0445 \u0431\u0443\u0434\u0435\u043c \u0441\u043c\u0430\u0447\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c:**","f8e3aa7e":"**\u0422\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u044d\u0442\u043e \u0443\u043c\u0435\u0441\u0442\u043d\u043e \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e:**","1c27098b":"**\u0431\u0435\u0441\u0442_\u043f\u0430\u0440\u0430\u043c\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438\u0441\u044c \u0442\u0430\u043a\u0438\u0435: {'learning_rate': 0.03, 'max_depth': 4, 'n_estimators': 1000}, \u043f\u043e\u044d\u0442\u043e\u043c\u0443:**","09d86775":"**\u041d\u0443 \u0438 \u0447\u0442\u043e-\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f:**","7ab036a5":"__\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b.__","ab3e56de":"__\u041d\u0430\u0439\u0434\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u0437 22 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 ROC-AUC \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.__","f732a793":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u0438 \u043e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","d7f7df17":"**\u041e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:**","bc3b36b9":"**\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435:**","97530f1c":"**\u0422\u0430\u043a, \u0442\u0443\u0442 \u0440\u0435\u0448\u0438\u043b\u0438 \u0432 \u043e\u0431\u0449\u0435\u043c \u0432\u0441\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e 1 \u0440\u0430\u0437\u0443 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0441\u043e\u0431\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c:**","eec4dc07":"**\u0412\u0441\u044f\u043a\u0438\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u044e\u0430\u043d\u0441\u044b:**","1852dc7a":"**\u041f\u0440\u043e\u0433\u043e\u043d\u044f\u0435\u043c \u043d\u0430\u0448 \u043b\u0433\u0431\u0442 \u043f\u043e \u0441\u0435\u0442\u043e\u0447\u043a\u0435 \u0441 cv:**","4fd87aae":"# \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f:","4c58fb15":"**\u0414\u0430\u043b\u044c\u0448\u0435 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0443 \u0438 \u043e\u0442\u0431\u043e\u0440 \u0444\u0438\u0447\u0435\u0439. \u041c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c**","b2a71544":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","deb0952b":"**\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u0444\u0438\u0447\u0443 \u0441 \u043a\u0443\u0447\u0435\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:**","03b8f7f1":"**\u041d\u0443 \u0438 \u0447\u0442\u043e-\u0442\u043e \u0448\u043b\u044f\u043f\u0430 \u043a\u0430\u043a\u0430\u044f \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c( \u0441\u0430\u0431\u043c\u0438\u0442 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0442\u043e\u0436\u0435 \u0442\u0430\u043a \u0441\u0435\u0431\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f, \u0442\u0430\u043a \u0447\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432\u0437\u044f\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u043a - \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043b\u0433\u0431\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0430\u0435\u0440 \u0431\u0435\u0437 \u043e\u0442\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \u0438 \u043f\u043e\u0442\u044e\u043d\u0438\u043b\u0438 \u0435\u0433\u043e \u043d\u0435\u043c\u043d\u043e\u0436\u043a\u043e:**","d1a82d67":"__\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430\u0439\u0434\u0435\u043c \u0442\u0430\u043a\u0438\u0435 21 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f 22 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0431\u0443\u0434\u0443\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435.__","f7502617":"\u0411\u043b\u0438\u043d, \u0437\u0430\u0431\u044b\u043b \u0430\u0439\u0434\u0438\u0448\u043d\u0438\u043a \u0434\u0440\u043e\u043f\u043d\u0443\u0442\u044c","4bbfe5dd":"__\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 $X$, \u0448\u043a\u0430\u043b\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 $U=X^T X$ \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b $U$: \u0447\u0435\u043c \u0434\u0430\u043b\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 0, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435.__","179cdf96":"**\u0412\u0441\u0435\u043c \u043f\u0440\u0438\u0432\u043a\u0438 \u0432 \u044d\u0442\u043e\u043c \u0447\u044f\u0442\u0438\u043a\u0435 :***  \n\u042d\u0442\u043e \u0442\u0435\u0442\u0440\u0430\u0434\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b **B**asic **D**ata **S**cience **M**ethods","cb51e73d":"**\u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0432\u0441\u0435 \u0442\u0430\u043a\u043e\u0435:**","da0f5fc5":"**\u041f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 employment_type, \u0442\u0430\u043a \u0448\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043a\u0438\u0434\u0430\u0435\u043c other \u0432\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438:**"}}