{"cell_type":{"56015ab6":"code","c1da4da1":"code","b71d6139":"code","f1e7afb2":"code","9b6fd8ec":"code","c55bdf07":"code","96011f83":"code","3f0f758c":"code","0f002621":"code","05037e47":"code","47850c89":"code","99b1a2da":"code","c1db0c84":"code","2e388911":"code","4a53fa2c":"code","59a2b86d":"code","871d4a77":"code","5b5b9621":"code","68cd016e":"code","e01a10c6":"code","e84fc8cc":"code","ea27e0e1":"code","e108acb6":"code","d7a61593":"code","fc5f239d":"code","113f6d28":"code","b2d4b793":"code","d15d35e0":"code","84b53d78":"code","6c2f8b40":"code","bfee983a":"code","e7080228":"code","c5c6240e":"code","59cd9099":"code","08f05ca2":"code","1e26c16e":"code","80d1104c":"code","690770ad":"code","7f579ab3":"code","5cb03025":"code","285bcc4d":"code","17c0c5b8":"code","c65f9e78":"code","e805149b":"code","e7ff9343":"code","ad3c151a":"code","1d3d231b":"markdown","7f38aba6":"markdown","095ac7c4":"markdown","033373da":"markdown","86846486":"markdown","984b0d31":"markdown","aa52e636":"markdown","dcab2ace":"markdown","de9c0aaa":"markdown","7b8a9f82":"markdown","726c6c99":"markdown","fc8db90d":"markdown","913f2d6b":"markdown","80a8a7bd":"markdown","f86115e3":"markdown","dbf0987d":"markdown","bd475491":"markdown","d6c11e43":"markdown","0eb8add7":"markdown","94f29329":"markdown","32677ccb":"markdown","20b9ef34":"markdown","6962a5bb":"markdown","ca38238e":"markdown","54c86d82":"markdown","2e5c7af6":"markdown","682e9f02":"markdown","11a9aee3":"markdown","3ca27a64":"markdown","0b9959d8":"markdown","2244ec5e":"markdown","83a6fd1d":"markdown","5ea408bb":"markdown","fac13232":"markdown","cb88bd02":"markdown","a1e42f8c":"markdown","65d28db7":"markdown"},"source":{"56015ab6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\n\n","c1da4da1":"import os\n#os.listdir('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt')","b71d6139":"tweet= pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest=pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntweet.head(3)","f1e7afb2":"print('There are {} rows and {} columns in train'.format(tweet.shape[0],tweet.shape[1]))\nprint('There are {} rows and {} columns in train'.format(test.shape[0],test.shape[1]))","9b6fd8ec":"x=tweet.target.value_counts()\nsns.barplot(x.index,x)\nplt.gca().set_ylabel('samples')","c55bdf07":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_len=tweet[tweet['target']==1]['text'].str.len()\nax1.hist(tweet_len,color='red')\nax1.set_title('disaster tweets')\ntweet_len=tweet[tweet['target']==0]['text'].str.len()\nax2.hist(tweet_len,color='green')\nax2.set_title('Not disaster tweets')\nfig.suptitle('Characters in tweets')\nplt.show()\n","96011f83":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_len=tweet[tweet['target']==1]['text'].str.split().map(lambda x: len(x))\nax1.hist(tweet_len,color='red')\nax1.set_title('disaster tweets')\ntweet_len=tweet[tweet['target']==0]['text'].str.split().map(lambda x: len(x))\nax2.hist(tweet_len,color='green')\nax2.set_title('Not disaster tweets')\nfig.suptitle('Words in a tweet')\nplt.show()\n","3f0f758c":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\nword=tweet[tweet['target']==1]['text'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax1,color='red')\nax1.set_title('disaster')\nword=tweet[tweet['target']==0]['text'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax2,color='green')\nax2.set_title('Not disaster')\nfig.suptitle('Average word length in each tweet')","0f002621":"def create_corpus(target):\n    corpus=[]\n    \n    for x in tweet[tweet['target']==target]['text'].str.split():\n        for i in x:\n            corpus.append(i)\n    return corpus","05037e47":"corpus=create_corpus(0)\n\ndic=defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        dic[word]+=1\n        \ntop=sorted(dic.items(), key=lambda x:x[1],reverse=True)[:10] \n","47850c89":"x,y=zip(*top)\nplt.bar(x,y)","99b1a2da":"corpus=create_corpus(1)\n\ndic=defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        dic[word]+=1\n\ntop=sorted(dic.items(), key=lambda x:x[1],reverse=True)[:10] \n    \n\n\nx,y=zip(*top)\nplt.bar(x,y)","c1db0c84":"plt.figure(figsize=(10,5))\ncorpus=create_corpus(1)\n\ndic=defaultdict(int)\nimport string\nspecial = string.punctuation\nfor i in (corpus):\n    if i in special:\n        dic[i]+=1\n        \nx,y=zip(*dic.items())\nplt.bar(x,y)","2e388911":"plt.figure(figsize=(10,5))\ncorpus=create_corpus(0)\n\ndic=defaultdict(int)\nimport string\nspecial = string.punctuation\nfor i in (corpus):\n    if i in special:\n        dic[i]+=1\n        \nx,y=zip(*dic.items())\nplt.bar(x,y,color='green')","4a53fa2c":"\ncounter=Counter(corpus)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:40]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)","59a2b86d":"sns.barplot(x=y,y=x)","871d4a77":"def get_top_tweet_bigrams(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]","5b5b9621":"plt.figure(figsize=(10,5))\ntop_tweet_bigrams=get_top_tweet_bigrams(tweet['text'])[:10]\nx,y=map(list,zip(*top_tweet_bigrams))\nsns.barplot(x=y,y=x)","68cd016e":"df=pd.concat([tweet,test])\ndf.shape","e01a10c6":"example=\"New competition launched :https:\/\/www.kaggle.com\/c\/nlp-getting-started\"","e84fc8cc":"def remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\nremove_URL(example)","ea27e0e1":"df['text']=df['text'].apply(lambda x : remove_URL(x))","e108acb6":"example = \"\"\"<div>\n<h1>Real or Fake<\/h1>\n<p>Kaggle <\/p>\n<a href=\"https:\/\/www.kaggle.com\/c\/nlp-getting-started\">getting started<\/a>\n<\/div>\"\"\"","d7a61593":"def remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\nprint(remove_html(example))","fc5f239d":"df['text']=df['text'].apply(lambda x : remove_html(x))","113f6d28":"# Reference : https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\nremove_emoji(\"Omg another Earthquake \ud83d\ude14\ud83d\ude14\")","b2d4b793":"df['text']=df['text'].apply(lambda x: remove_emoji(x))\n","d15d35e0":"def remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n\nexample=\"I am a #king\"\nprint(remove_punct(example))","84b53d78":"df['text']=df['text'].apply(lambda x : remove_punct(x))","6c2f8b40":"!pip install pyspellchecker","bfee983a":"from spellchecker import SpellChecker\n\nspell = SpellChecker()\ndef correct_spellings(text):\n    corrected_text = []\n    misspelled_words = spell.unknown(text.split())\n    for word in text.split():\n        if word in misspelled_words:\n            corrected_text.append(spell.correction(word))\n        else:\n            corrected_text.append(word)\n    return \" \".join(corrected_text)\n        \ntext = \"corect me plese\"\ncorrect_spellings(text)","e7080228":"#df['text']=df['text'].apply(lambda x : correct_spellings(x)#)","c5c6240e":"\ndef create_corpus(df):\n    corpus=[]\n    for tweet in tqdm(df['text']):\n        words=[word.lower() for word in word_tokenize(tweet) if((word.isalpha()==1) & (word not in stop))]\n        corpus.append(words)\n    return corpus\n        \n        ","59cd9099":"corpus=create_corpus(df)","08f05ca2":"embedding_dict={}\nwith open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt','r') as f:\n    for line in f:\n        values=line.split()\n        word=values[0]\n        vectors=np.asarray(values[1:],'float32')\n        embedding_dict[word]=vectors\nf.close()","1e26c16e":"MAX_LEN=50\ntokenizer_obj=Tokenizer()\ntokenizer_obj.fit_on_texts(corpus)\nsequences=tokenizer_obj.texts_to_sequences(corpus)\n\ntweet_pad=pad_sequences(sequences,maxlen=MAX_LEN,truncating='post',padding='post')","80d1104c":"word_index=tokenizer_obj.word_index\nprint('Number of unique words:',len(word_index))","690770ad":"num_words=len(word_index)+1\nembedding_matrix=np.zeros((num_words,100))\n\nfor word,i in tqdm(word_index.items()):\n    if i > num_words:\n        continue\n    \n    emb_vec=embedding_dict.get(word)\n    if emb_vec is not None:\n        embedding_matrix[i]=emb_vec\n            ","7f579ab3":"model=Sequential()\n\nembedding=Embedding(num_words,100,embeddings_initializer=Constant(embedding_matrix),\n                   input_length=MAX_LEN,trainable=False)\n\nmodel.add(embedding)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\n\noptimzer=Adam(learning_rate=1e-5)\n\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['accuracy'])\n\n","5cb03025":"model.summary()","285bcc4d":"train=tweet_pad[:tweet.shape[0]]\ntest=tweet_pad[tweet.shape[0]:]","17c0c5b8":"X_train,X_test,y_train,y_test=train_test_split(train,tweet['target'].values,test_size=0.15)\nprint('Shape of train',X_train.shape)\nprint(\"Shape of Validation \",X_test.shape)","c65f9e78":"history=model.fit(X_train,y_train,batch_size=4,epochs=15,validation_data=(X_test,y_test),verbose=2)","e805149b":"sample_sub=pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')","e7ff9343":"y_pre=model.predict(test)\ny_pre=np.round(y_pre).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pre})\nsub.to_csv('submission.csv',index=False)\n","ad3c151a":"sub.head()","1d3d231b":"###  Average word length in a tweet","7f38aba6":"In both of them,\"the\" dominates which is followed by \"a\" in class 0 and \"in\" in class 1.","095ac7c4":"### Removing punctuations","033373da":"First,we will do very basic analysis,that is character level,word level and sentence level analysis.","86846486":"## Baseline Model","984b0d31":"We will need lot of cleaning here..","aa52e636":"First let's check tweets indicating real disaster.","dcab2ace":"### Common words ?","de9c0aaa":"## Loading the data and getting basic idea ","7b8a9f82":"we will do a bigram (n=2) analysis over the tweets.Let's check the most common bigrams in tweets.","726c6c99":"ohh,as expected ! There is a class distribution.There are more tweets with class 0 ( No disaster) than class 1 ( disaster tweets)","fc8db90d":"## What's in this kernel?\n- Basic EDA\n- Data Cleaning\n- Baseline Model","913f2d6b":"Lot of cleaning needed !","80a8a7bd":"Before we begin with anything else,let's check the class distribution.There are only two classes 0 and 1.","f86115e3":"Now,we will analyze tweets with class 1.","dbf0987d":"### Analyzing punctuations.","bd475491":"### Number of characters in tweets","d6c11e43":"Now,we will move on to class 0.","0eb8add7":"First we  will analyze tweets with class 0.","94f29329":"### Number of words in a tweet","32677ccb":"## Exploratory Data Analysis of tweets","20b9ef34":"## Making our submission","6962a5bb":"<font size='5' color='red'>  if you like this kernel,please do an upvote.<\/font>","ca38238e":"## Data Cleaning\nAs we know,twitter tweets always have to be cleaned before we go onto modelling.So we will do some basic cleaning such as spelling correction,removing punctuations,removing html tags and emojis etc.So let's start.","54c86d82":"### Removing HTML tags","2e5c7af6":"## GloVe for Vectorization","682e9f02":"### Importing required Libraries.","11a9aee3":"### Common stopwords in tweets","3ca27a64":"### Basic Intro \n\nIn this competition, you\u2019re challenged to build a machine learning model that predicts which Tweets are about real disasters and which one\u2019s aren\u2019t.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTigQWzoYCNiDyrz1BN4WTf2X2k9OZ_yvW-FsmcIMsdS9fppNmh)","0b9959d8":"### Romoving Emojis","2244ec5e":"Here we will use GloVe pretrained corpus model to represent our words.It is available in 3 varieties :50D ,100D and 200 Dimentional.We will try 100 D here.","83a6fd1d":"### Spelling Correction\n","5ea408bb":"## Class distribution","fac13232":"### Removing urls","cb88bd02":"### Ngram analysis","a1e42f8c":"The distribution of both seems to be almost same.120 t0 140 characters in a tweet are the most common among both.","65d28db7":"Even if I'm not good at spelling I can correct it with python :) I will use `pyspellcheker` to do that."}}