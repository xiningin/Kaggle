{"cell_type":{"a61b70eb":"code","a5f95f87":"code","d61e6591":"code","164591aa":"code","abe5da60":"code","dcede3e5":"code","9830b83c":"markdown"},"source":{"a61b70eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5f95f87":"\n# import the satellite data\nX_train = pd.read_csv('\/kaggle\/input\/deepsat-sat4\/X_test_sat4.csv', header = None).values.reshape([100000,28,28,4])\nY_train = pd.read_csv('\/kaggle\/input\/deepsat-sat4\/y_test_sat4.csv', header = None)\n\n# normalise the training data\nX_train_norm = X_train\/X_train.max()","d61e6591":"# visualise the data \n\nY_name = Y_train.copy()\n\ndef convert_bool_df_to_value(df):\n    \n    df.loc[:,'Name'] = np.zeros(len(df))\n\n    df.loc[:,'Name'][df[0] == 1] = 'Barren_Land'\n    df.loc[:,'Name'][df[1] == 1] = 'Trees'\n    df.loc[:,'Name'][df[2] == 1] = 'Grassland'\n    df.loc[:,'Name'][df[3] == 1] = 'Other'\n\n\n    return df['Name']\n\nY_name = convert_bool_df_to_value(Y_name)","164591aa":"fig = plt.figure(figsize = (20,20))\n\nfor num, X, name in zip(np.arange(1,101), X_train, Y_name):\n    ax = fig.add_subplot(10,10,num)\n    ax.imshow(X[:,:,:3])\n    ax.axis('off')\n    ax.set_title(name)\nplt.tight_layout()","abe5da60":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential()\n\n# simple model consisting of 4 layers, focused on retrieving the most prominent features\nmodel.add(layers.Conv2D(32, (3,3), activation=\"relu\", input_shape = (28,28,4)))\nmodel.add(layers.MaxPooling2D(2,2))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(4, activation='softmax'))\n\n\n\nmodel.summary()","dcede3e5":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_norm,Y_train, batch_size=32, epochs=2, verbose=1, validation_split=0.05)","9830b83c":"lets take a look at the first 100 images in the dataset (assuming the dataset is randomly shuffled)"}}