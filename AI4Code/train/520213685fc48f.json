{"cell_type":{"6871896b":"code","f265a499":"code","87f478a2":"code","2548eaa6":"code","f1a961bb":"code","2572ecaa":"code","704cd866":"code","ccf37e74":"code","8c799501":"code","11509a9d":"code","bf61e79a":"code","6858c09c":"code","09ded690":"code","05148f79":"code","f5b1f575":"code","dfdb9c97":"code","6c1a2547":"code","15d22d6a":"code","bee7c80d":"code","a409d51c":"code","ced21587":"code","8f4d76d9":"code","a6d09a26":"code","c336c0a0":"code","77dd988a":"code","93533d36":"code","ead7e1ee":"code","3235bd9f":"code","d92032dd":"code","342b00a2":"code","cfcf2c5a":"code","b12e4457":"code","9b126768":"code","cef141fa":"code","078a8784":"code","043f917e":"code","61c4b5f0":"code","dd4c7721":"code","b8f6549e":"code","fb576856":"code","b137213d":"code","1380bf95":"code","da0d6803":"code","333420e6":"code","5ad5ef3c":"code","0dd9ba3b":"code","216f852d":"code","915ed9f6":"code","d6bedba0":"code","b8560ede":"code","e39762e9":"code","959c74cc":"code","1a658539":"code","72046c01":"code","743742dc":"code","91f6ea57":"code","a9ac1a39":"code","a9d061c1":"code","97024826":"code","788b3edb":"code","747640e2":"markdown","0e52d3bc":"markdown","1c89ecb4":"markdown","261a6200":"markdown","427a7d97":"markdown","9eacdf85":"markdown"},"source":{"6871896b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf","f265a499":"df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","87f478a2":"df.head()","2548eaa6":"df['Country\/Region'].unique()","f1a961bb":"data = df[df['Country\/Region'] == 'India'] # Picking data of India ","2572ecaa":"data.head()","704cd866":"data['Confirmed'].head(50)","ccf37e74":"#Plotting cumulative cases stored in the feature 'Confirmed'","8c799501":"plt.figure(figsize = (12,7))\nplt.plot(data['Confirmed'])\nplt.show()","11509a9d":"data.size","bf61e79a":"data.tail()","6858c09c":"# Taking data of West Bengal for analysis","09ded690":"data_west_bengal = data[data['Province\/State'] == 'West Bengal']","05148f79":"# Plotiing confirmed cases","f5b1f575":"plt.figure(figsize = (12,7))\nplt.plot(data_west_bengal['Confirmed'])\nplt.show()","dfdb9c97":"# Plotiing deaths","6c1a2547":"plt.figure(figsize = (12,7))\nplt.plot(data_west_bengal['Deaths'])\nplt.show()","15d22d6a":"# The function plots the deaths and cases per day of a state and returns the lists \n# of cases\/day and deaths\/day\ndef plot_deaths_cases(data_original,place,ret  = False):\n    data = data_original.reset_index()\n    deaths = [0]\n    j = 0\n    for i in data['Deaths']:\n        deaths.append(i-j)\n        j = i\n    deaths = deaths[2:]    \n    confirmed = [0]\n    j = 0\n    for i in data['Confirmed']:\n        confirmed.append(i-j)\n        j = i \n    confirmed = confirmed[2:]    \n    plt.subplot(2,1,1)    \n#     plt.figure(figsize = (12,7))\n    plt.plot(deaths[2:])\n    plt.title('No of Deaths in '+place+' each day')\n    plt.xlabel('Days')\n    plt.ylabel('Deaths')\n    plt.show()\n    plt.subplot(2,1,2)\n#     plt.figure(figsize = (12,7))\n    plt.plot(confirmed[2:])\n    plt.title('No of Cases in '+place+' each day')\n    plt.xlabel('Days')\n    plt.ylabel('Cases')\n    plt.show()\n    if ret:\n        return deaths,confirmed","bee7c80d":"# deaths = [0]\n# j = 0\n# for i in data_west_bengal['Deaths']:\n#     deaths.append(i-j)\n#     j = i","a409d51c":"# deaths = deaths[2:]","ced21587":"plot_deaths_cases(data_west_bengal,'West Bengal')","8f4d76d9":"data['Province\/State'].unique()","a6d09a26":"# Picking data of Delhi for visualization","c336c0a0":"data_delhi = data[data['Province\/State']=='Delhi']","77dd988a":"plot_deaths_cases(data_delhi,'Delhi')","93533d36":"data['Deaths'].tail(20)","ead7e1ee":"# Picking data of Uttar Pradesh for visualization","3235bd9f":"data_up = data[data['Province\/State']=='Uttar Pradesh']","d92032dd":"plot_deaths_cases(data_up,'Uttar Pradesh')","342b00a2":"# Picking data of Maharashtra for visualization","cfcf2c5a":"data_maha = data[data['Province\/State']=='Maharashtra']","b12e4457":"deaths_maha,cases_maha = plot_deaths_cases(data_maha,'Maharashtra',ret = True)","9b126768":"# Using Naive Prediction model","cef141fa":"deaths_naive = [0]\ncases_naive = [0]\nfor i in deaths_maha[1:]:\n    deaths_naive.append(i)\nfor i in cases_maha[1:]:\n    cases_naive.append(i)    ","078a8784":"plt.subplot(2,1,1)    \nplt.plot(deaths_maha,label = 'Actual Deaths')\nplt.plot(deaths_naive,label = 'Naive Forecast')\nplt.legend(loc = 'upper left')\nplt.title('Naive Deaths vs Actual Deaths')\nplt.xlabel('Days')\nplt.ylabel('Deaths')\nplt.show()\nplt.subplot(2,1,2)\nplt.plot(cases_maha,label = 'Actual Cases')\nplt.plot(cases_naive,label = 'Naive Forecast')\nplt.legend(loc = 'upper left')\nplt.title('Naive Cases vs Actual Cases')\nplt.xlabel('Days')\nplt.ylabel('Cases')\nplt.show()","043f917e":"# Naive forecast works better than complex models sometimes as can be inferred from the graphs","61c4b5f0":"mae = tf.keras.losses.MeanAbsoluteError()\nprint(mae(deaths_maha,deaths_naive).numpy())\nprint(mae(cases_maha,cases_naive).numpy())","dd4c7721":"# \/dataset = tf.data.Dataset.from_tensor_slices(\n#                [1,2,3,4,5,6,7,8,9])\n# print(list(dataset.as_numpy_iterator()))\n# dataset = dataset.window(2,shift=1,drop_remainder = True)\n# # dataset = dataset.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(x))\n# for i in dataset:\n#     print(list(i.as_numpy_iterator()))\n# dataset = dataset.flat_map(lambda w: w.batch(2))\n# print(list(dataset.as_numpy_iterator()))\n# dataset = dataset.map(lambda w: (w[:-1],w[-1]))\n# print(list(dataset.as_numpy_iterator()))\n# dataset = dataset.shuffle(len([1,2,3,4,5,6,7,8,9]))\n# print(list(dataset.as_numpy_iterator()))","b8f6549e":"# The function converts a list into a pair of 4 consecutive values and the 5th consecutive value \n# of the list, it then shuffles them, the first 4 values act as features and the 5th values as\n# target varaible like a machine learning regression problem\ndef window_dataset(series,window_size,batch_size = 32):\n  ds = tf.data.Dataset.from_tensor_slices(series)\n  ds = ds.window(window_size+1,shift=1,drop_remainder = True)\n  ds = ds.flat_map(lambda w: w.batch(window_size+1))\n  ds = ds.map(lambda w: (w[:-1],w[-1]))\n  ds = ds.shuffle(len(series))\n  return ds.batch(32).prefetch(1)","fb576856":"deaths_ds = window_dataset(deaths_maha,5)","b137213d":"# printing final dataset","1380bf95":"list(deaths_ds.as_numpy_iterator())","da0d6803":"# Splitiing deaths series into train and validation sets","333420e6":"split = 300\ndeaths_train = deaths_maha[0:split]\ndeaths_val = deaths_maha[split:]","5ad5ef3c":"window_size = 5\ntrain_set = window_dataset(deaths_train,window_size)\nvalid_set = window_dataset(deaths_val,window_size)\n\nmodel = tf.keras.models.Sequential([\n                                 tf.keras.layers.Dense(1,input_shape = [window_size,])\n])\noptimizer = tf.keras.optimizers.SGD(lr = 1e-5,momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer = optimizer,\n              metrics = ['mae']\n              )\nearly_stopping = tf.keras.callbacks.EarlyStopping(patience=10)\nmodel.fit(train_set,epochs = 500,validation_data = valid_set,callbacks = [early_stopping])","0dd9ba3b":"# THe function generates predictions from the model for a given series\ndef model_forecast(model,series,window_size):\n  ds = tf.data.Dataset.from_tensor_slices(series)\n  ds = ds.window(window_size,shift=1,drop_remainder = True)\n  ds = ds.flat_map(lambda w: w.batch(window_size+1))\n  ds = ds.batch(32).prefetch(1)\n  return model.predict(ds)","216f852d":"forecast =  model_forecast(model,deaths_maha[split-window_size:-1],window_size)\nforecast = forecast[:,0]","915ed9f6":"# Plotting forecasted and actual deaths","d6bedba0":"plt.figure(figsize = (12,7))\nplt.plot(forecast,label = 'Forecasted Deaths')\nplt.plot(deaths_maha[split:],label = 'Actual Deaths')\nplt.legend(loc = 'upper left')\nplt.legend()\nplt.xlabel('Days')\nplt.ylabel('Deaths\/day')\nplt.title('Predicted Deaths vs Actual deaths in Maharashtra')\nplt.show()","b8560ede":"mae_linear_model = mae(deaths_maha[split:],forecast)\nprint(mae_linear_model.numpy())","e39762e9":"# Eliminating missing values from the cases data which are equal to zero\ncases = []\nfor i in cases_maha:\n    if i!=0:\n        cases.append(i)","959c74cc":"len(cases)","1a658539":"split = 295\ncases_train = cases[0:split]\ncases_val = cases[split:]","72046c01":"# Training model for cases forecasting","743742dc":"window_size = 4\ntrain_set = window_dataset(cases_train,window_size)\nvalid_set = window_dataset(cases_val,window_size)\n\nmodel = tf.keras.models.Sequential([\n                                 tf.keras.layers.Dense(1,input_shape = [window_size,])\n])\noptimizer = tf.keras.optimizers.SGD(lr = 1e-6,momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer = optimizer,\n              metrics = ['mae']\n              )\nearly_stopping = tf.keras.callbacks.EarlyStopping(patience=20)\nmodel_check = tf.keras.callbacks.ModelCheckpoint('model.h5',save_best_only = True)\nmodel.fit(train_set,epochs = 500,validation_data = valid_set,callbacks = [early_stopping,model_check])","91f6ea57":"model = tf.keras.models.load_model('model.h5')","a9ac1a39":"forecast_cases =  model_forecast(model,cases[split-window_size:-1],window_size)\nforecast_cases = forecast_cases[:,0]","a9d061c1":"# Plotting forecasted and actual cases","97024826":"plt.figure(figsize = (12,7))\nplt.plot(forecast_cases,label = 'Forecasted Cases')\nplt.plot(cases[split:],label = 'Actual Cases')\nplt.legend(loc = 'upper left')\nplt.legend()\nplt.xlabel('Days')\nplt.ylabel('Cases\/day')\nplt.title('Predicted Cases\/day vs Actual Cases\/day in Maharashtra')\nplt.show()","788b3edb":"mae_linear_model = mae(cases[split:],forecast_cases)\nprint(mae_linear_model.numpy())","747640e2":"## Preparing data for Keras net training","0e52d3bc":"# Time series analysis of coronavirus in states of India with keras.\n<img src= 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBMRERcRFBERFxERFxEXFxERERERERERFxMYGRcXFxcaICwkGhwoIBcXJDolKC08Mj80GSI6PjgwPDkxMi8BCwsLDw4PHRERHS8oIik6MTIxMzExMTM8MTEvOjEvNzczMTEzMTExMjExMTExOjMxNzEzMTMyMTE6PDoxMzExMf\/AABEIAMQBAQMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAADAAIEBQYBBwj\/xABCEAACAgEDAgUCAggEBAMJAAABAgMRAAQSIQUxBhMiQVEyYXGBBxQjQlKRobGSwdLwM0NignLR4RUWF1NUY3OUov\/EABoBAQADAQEBAAAAAAAAAAAAAAABAgMFBAb\/xAAuEQACAgEEAAUCBAcAAAAAAAAAAQIRAwQSITETIkFRYZGhBXGB8RQyQlKxweH\/2gAMAwEAAhEDEQA\/AJ+i18FSx7XG30Nop4ipheyGVWBKtGf4e3uK7Gh0Q82YrM6xqzsVBFoJGNH0k3bWBYN8964yeOqiGRqhjbUxIoPnMTK6qACPNWt7AAD1KTwPbtl+q6vzZCyqAQd1ozAKwPBBo3xz\/ujlZ20lDtGv1i6X0t5iSSR0hWSmkG36SSe4Io3gYerTDUCRq8tVKKgDBQvIvj96+fzHPGYYTMrF2LWaLMexUdz27fb8\/c5sdA5khjliqNYwfMDSANqF+kncqkx7ftZN0a9zKqTd0WK6fSyM8cSsZNSUeZtzKsWxySQ12SSSK7c83VG1MMWi3W7EyGwpYSyt8KgA3MPx+e+ZXQo77xH63YEsI1oNwRuoduQeBx9uTUrw\/wBJ89rkJpDIZFW1ErWuwNXO36rHuaJvtllZTIlKPmfC5ZaJr49Q4082nljZixQMdwbat2WAG0kE8c\/S3Pa7xUoUBwP7ZXdO6Q0DswkPlKDtjXhQt8cdhQrKjU9bYPbJQUkWbBHpBYbe9GgQaH+WV31y0YPCskqg+F\/lmrCZ0R4HpMm+IEkmvdmDP3PeuPb5OTwuaJ2rPHODjJxfoACY7ZhwmOEeSUI\/l4vLyR5ed8vAIvl40x5L8vOFMAhmPOGPJZTGlMAiFMYUyaY8G0eAQmTGMmTGjxjJgEIrjSuS2jwTJgEVlwbLkplxjLgEUjOEYZlwbLgAyMYRhcaRgA8WdIzmAcrFncWAYeDpc03mtHvfyaZpC1ttayNxJ5NAn37HJvhydYd0zQxSSRtHtjJlkeXc5DAV6UCrbWwy+6t1V3UxeQIYQQZEgeJSJV5cHaCODY78175lpSjEbQSWurBqzX+E8nMV8nelGUldUi28TaWOaZniiSMP3AcU5o0xA4B5UcfI79jlQkkRYIzAULIau9jn4A+Tmi1MTx0HUjdfBsAAoRdcC+a79hfGSlXVRzK8bGOJ2Rt0DxBHiCbRZAt6Yker4PBN1Yx2X\/KUPQdU8c6nzJYwSeYW9ZNjj7i64+O95rXEmocLHJqAEkQvsbeJNz1+0jRUsdiWJ454POVut0mn\/WPNaYBWe3jQrFJRujRsEMb9gbPYZofDbuQJ9JDvhYDzIZZBHOLCsDGa2NwR3IHNWDzk0S3ti\/dA+p+ZpI7mZ5Xpdsn6xrRGjXRdkMjA9r2gfYd6x\/S9ENVI1w+UUJLbHNOrDaOdvpsAnaLABIPfJPibrSeSVTzFnX64ZY3SSNDxvNelgGK0Q1d6PBIn+Fy8ugJjIEhBClroMFAF2Sb45vm8ikym5xxbnw+i60ulEahB2HYew\/D4GSBHmN8XaifT6OON5T5sm5SULBtzBqYH32ge\/wCPtRqxHq5YIEaR5dgDfVT2RaOGZvUV3D4b0UT33WTPKtLKfms9IEeOCZmel9e\/VtMn60JC7C0UByzL24Mp3HnsDz2GWOl8U6WSbyN0iSXQ3xsELc8bhYHY8mh2+Rc2jGWCavgttmLZkry8WzJMSJszhTJnl40pgEMx40x5MKYwx4BDaPBlMnFMYyYBBKYxkyYyYNo8AgsmDZMmsuDdMAgOmCZMnOmBdMAhsuCZclOmCZcAisuNOGdcEwwAZGMwpGMIwBuLFiwCdrenq4SGNFAB3yUnaMCqJ4tmvgXfv2HOM03TVimWSaXy0eQ3EIpXk27zuRFAskkFfx+\/GXfiHpExkRzqJWhVlO3eVCsSu4uRXB2mh8t8ciVpTBrEWSKSWVwscRaVVMkQpiZDtUe5jBND6e\/OZNHXxT2xXN\/P5+pF8W+W8qKq1G8askhR0Bcs25K4AcDbakbvsMpZOnSRwmMvcW4SIavyZQfVXwCD\/MfchtZptMIXfTyeksp8luQAVVgrKa4oNt+a+3AiDojCeKdlLK8RpmNt5yw2GK0KO6\/bJ9DSE4pUyL0jR6fXxmWSKNnrd5vJV9jfgpIvk9u9HkcaHTdKj1Ee2J3ieJY0SSMnaI+eNlgUee1e355no05iJhVGaJ6ZVUxkRxFGHOwj3Xg13Zwb4Yz\/AAb1ZYp3hdwSxZUYs6hm7+oc+4I3EiiaHfJtFJpyg2nygnj2IQaeKESO8m2QAOd7uNpBLE2dtt9+wA5rIXROuvDp4kgIPrIk3IzUXNgRgcFEvbYNUrHsDmo8Q+HhrXUu23YQaqyKZWX7jsPxtrHahaHpOnSRIyFaWLahkohnVPZivBreTR96PxUbk+jOMk4bXyUvjCZ9W+nhKsqyqN4D0IyCGZgOLIK0LI71z7Lw\/K+q1Pl8bJHkYgW6eUCTuBJoH1AUQT2IoGgT9JX6vpoldU\/bTK0YNnZHEE5avpvsoB+eK9qnwZ1NoNLqdQFQKPLQO7qUQMXZ7Cmy11wtk7hdfVhO+S0X5Kj+hN8aa1ZNYApBj0gp6sBW2hkVTR5YluwugDh\/CXhddWpnlX0byRwQXYGyyt323V+xKki7LGi6fr9Oqs7rJJGzb2ZyVG40XkkCmt55ATsNjdz6s9G\/R5rzNowjPG5hJQPCmyNks7AAABYAo0K4FYStkZpSxY6RpY4goCjsoAHuaArvnduGrArOhYxh1LgWUsbgt1dd6vi80OXyxbcaUw+3OFcEACuNK5IK40rgACmDZMkFcaRgERkxjLkxkwTJgEN0wLJk5kwTpgEJ0yO6ZOdMA64BCdMjuuTXTAOuARHXAOuSnXAuuARsawwrjBnAGYsdiwCVqI49ZtQhgwI9Sm0DIQ1OAQRz7f3Bwer6dHokR0SiSA0o2q5kO0AhgKDGuBQBIHftg+hQQzyiXTuPLZRcB2mSF63cBu6eoH3I7CuMv+uxzNp2WBYzISoqU0oS\/Uf9\/lzWZxvm+zpSmoTUY9P7FNoelJqARciOSrCUFpYeDTr5dgx3QtL22OOBR0Wt1OngVYZpY97q4G8oHdSabapPb1Afyu+c8\/6hqn0MzvGxVVKgBTHt2\/XJR3Aj0puBO77L3OV8LSO51TxvK07hXmD79qMWEkQjW95XcarmxQsZDXqXlit8s2\/U3ii0sjRBWeRG2bRYJdSt2OSR6uPsLrPNo4JZ2O1CPMZvWC24sXcUT2IHqFA+9muK2Xh\/pLorD1iOThYpNgb9nYYqLqza1wvA5UVeG1OjMdgKoayK5O4kGwxo3uAAJrt8+1kq6ZeklSZb9LncRXLI37JdzMzG1QdywHcgAgjt7Wfeh6X1wNMXkBVZCWq9yiJ5WG6wtAKAPf8AuLg9V1DyRMoZPKJ21HyKYG2DLZbkgD6R6T3tS1KYNm87gZCNofYwdWdCVUNzwFY7mB9msg8iOLsJxjd+puutdNj1ZCs5aiRYa1pgRX4eo\/zOd6R0qPp2nlWQE6VxuKMBxd0q0BZJavnsMpoOoeUTW8so4jv11xuCDdVUynfu5PuKGROsdSm1sicsYquOP6U3MGXzC5sEAcg0eD3JBuX8BJSr2+5f+G+nxSx28IVJXvaD6o1amUGvcfUT\/EbHtW\/6boItPGI4lCoPYe5+SffMRH1EafaCNyggVfZ+x3EjgX3I57UPYVPU\/E+qnCwp+xWQ0pRwJdoB9Q3NdDuQt\/TwSKtymY5scsjq6Rd+M\/ExYjQ6Rg8z7vMdSCIkUGxdj1X\/AEVh3zGQdM1el8ypGSaRFRGEhWXa0gsoB9bek2xHG8AEHs3okUmr1H6roqRdty6pSNzJZ5Ru9A0u8KGNDtWeq+H\/AAxp9EgCjfLQ3TP6pHahZ57XWT2TLJjwxUF+5B8AT6ttKU1SvcTKElclnljKA2xIBJBJ5r3A5IJw3iLxONMfKhQSag+3PlxD5cj35HA5+a4u163rf1fTvKB6gABxdMzBQa9wCb\/LPHes9d8tWCGzs1VOTbF33Ekn3Ybu\/wD03nu0mnWS5S6RwtZqGpbYcN\/Ys5\/FfUJtrJOVV9+1YoYwpVWrcCQWqx84HR+ONfG9GVJVvlJokHA70yBSD9zf4ZRLrZJRDpYyqpp0BANetgR6mP7w3Hdt7YQQxqG\/aOzfvyUDbfF2OPsOM6qwY5KnBHMebJB3uZ6f4f8AHGl1bCF7h1DcCOUgpI3xG\/ZvwNN9s1DLnzbqGDWDX+eem\/o68ambbodU9zDiKZzzMB\/y3PvIPY+\/vz9XN1Wj8PzR6OngzufEuz0IjGFcMwxhGeA9QFlwLLkojBMuARXXAOuS3XAuuAQ3XIzLk11yNIuAQpFyOwyY4yM4wCKwwWSHGAbAG1izuLAJ2s8PafWgT6aWNZh6kn07qFJrjeAQfbv3\/qDMg1Wpi01akqJSewZXZEApdzL3c0SascffMZ1\/wqqR\/rmgmHlUWcLITtWxT0O6C2JB+eQfaN4c18sqxxmVnZ6oizRA+klW7gFfezzxfOZumzqwx327XyR+tRs2oMlsXYt7ilvaLJv+GqHv+fEnouqGnb9pIqDg8MY+CSaKjirBFD2X+d\/1TpW1AWWxXchhQJ9gpBHx+Hb7Y7WCRQFDAbgAvqLJ9mB9yV9IWu9cDkiOnaPRug+TZarrkckSzK5RgSy8+tWVuCCTW0gD7C6Iq8z+v8ZPOhjkWNJF23IDt3Bm2glewIJW93099pIAzNp1CWJCgdynBtyqgMXv6XI44Bo8drBByBAhUkszEbtlbjuWUkAduQOAOPVQPpNAiyZnklCKuP7Gok1oZdxXeUB9W2CRgC4SuWIeS+4WvqXt9Itlg2oZG2hEWmYB2WKNRZNE\/VTKefV2FHscbpJAD6gzNsQNtV29R4KsgJIUdiBQsgDaKvY6frw1EY0kUEbK4KyyyhvpLAPtHBs7iKNG2sA98rRnHzobH1ZJ4ZJNPpVeGHYC80siTTSMWtVVBx6Qxsc8j\/qyt0YiZ2khkYbge6u8qNup\/LsKWNmixs0QWoEZb6jw4unbdBLJGoAV442fzG20WAO9RR2sp3cftDzyagTyqsjC7eJSU2tIpfhkLMKuRvWOATRNg8lmlEtJBdfKzqyMdxfaaJo2XPmEeZwAoK8UeG2kVxld0aTbIS6DZImzc12FZaLbms0aQdz\/AE40\/Q9Auq9PMYABAMjb1suo3RnkdiebHcewznUvDM0Tjy0LpX1qyBO61w3Cj8\/b5NmU1ZMZJP5NB+jPRxJDIw5mWWRWcm22ttZR+FBR\/wBv2zXa7WpBGZHJAHYAWzGuyj3PB\/kT2zyeDrUfSpGkactPIhB08RR4jSkqZGFjcCeAp9zzzWc1\/U36lLGJTIo8syRqL8l42a2sbQDILjB5I+O1nfBCOTIoN0jna2E4RlkSuif4s8cieIxR6WULasJfNQSLIjWPQoZWHH8Xv9s80m1Hnk1v29jtiLMDVEbQaAo\/+maefpLySeTtJraX7+\/KqftWaBPD0cCK0rhEA4jUUzfbjtndWLHhW2L4+tnzv8RKT3ONy+lIxPTYALkIkBAK7XG2waN0RZ7DHama+B2y06tMjMRGgVB2oGz+OU7JnoXEaMb3S3MjMuAlUimBIZSCGBIIINggjscsPLwcsYrM5K+DeOSmew\/o\/wDFY6jB5chH63AAJBwPMXsJVH37H4PwCM1jDPnDp2qm0cy6mFtskZsXyrr+8jj3Ujgj+xo57R4a8baXXoo3rHqGoGCU0S9ciNjQkHBqufkDOLqdM8btLg6uLKpr5NGcawwjDGHPIbAHGBYZG6j13SwSCKSdVkaqSndue1hQav74wdXgbtJ\/NJB\/dcna\/Yi0EkXI8gx7ayM9pF\/nX98A2qj\/AI1\/mMUxaAuMiyDCyaqP+Nf55Fk1cf8AGuKYtDHGAfCNOh7MMEzj5\/vimLQ3FnN4\/wB3ixTFoovDXTJNKxk\/WlijkZyiGQhmr6PS1hjXfigKu+avh1WZGMixaKVgrktFGvm7dqmzVnmiP+0WR2xh8BxwzCfTsVjG8vE1tXoO3Ye\/1V3vvmP6pO0U5dKtCWBCktuoqeB7X\/Zh2GYuT6aO3HZNWuS51finVySeU8KKpkdAUB3bQGIIscjbzY\/h5HuMx1GZjtYgLvAcLSBlJvdbKa3ncnND\/i3RPew1\/V1kKEimFJacA+YtfutyKbcPuB3vKKJXkkGxC7s5VWCRv5npVdwHct3baO917HJZWca6CNEwZfMJJLcuzEBPSp3AsxUUSTZsk8ADAx6dgd1qHd2CMNm0RnglFIO6+xF\/usCQSc9C8L+F1BZNWkSgciJpELMhZmUyEcGiWIHttrnnLPxF4O08iEp+zdlIDN61bctMODwfj78WVNGL5MXtfF8nk0yEIWHpoD01xyQn73JU7KA5Fe5NgS+m9XbTjlNymwEtDVGwTYIF+shh39XFDDa3Toz+pWr1KoW97bhtYs63tHKnhTf0gHndXS6B7JohkClhyX7ML3fvhvY17kEiubExbj0aOXxQrqIjEQrh6oeYlgV+QBBBBB7A0MoW1Ya3WqDEBauQbm3UaqgVVrYMDxyR7xIV+sgoaJ9NEqSGoUoPF8d+w5xCJ3HBDF9wBAsGyAQCxHNqfbtzzkkuVk\/Q6uUvsSV0JKneLV1O1EYNyobsAbFkqPnnaafoymIPqptVKR6VhMrMpAo2ADW0gXdjt85gkXYyvfcg729bKKDXwAR9JNjvzyOb1uj1rshEkp2kMCHJRqYAUXPaQNxd9yD\/ANORtN4vbGkReu6zRxN5R6eNoB\/aRT1IAWNXaUwIXt+Iv5b0vXogTyxMRGCFM8xkKK1WqKBtjXjkDvxz2yu8RBmXeRXtyGvhuxvsa23wBd1i6f8AQv4Z0\/wzFGU5OS66ON+M5pxgop99m1j8QkM0qogdwgPHfaKv+2Vmu6g8zF3ayfvwPsMrN+DabOyscU7SPmLm1VhpMitiaW8YXyxMYtBVxFMYj4XdlaJdoBPCXoHhfcfb75D1EIY0BSL\/AFy2dbFfzwDxUMhpMvDI0c0GonUUmonUr\/DNKvHt2OWsPijqMHbVSMB7ShJr+xLgn+uVML7WHwQQfyIr+5yUwvKvDCS5S+geecZWmyt6z4jmkkaR0jLlt+9QUbdd33I449vbPYuiagTwJLQp0Vu3yAc8X63pxV56B4E1sj9OiVB9G9L\/APCxzl6rEoS4Opp8m+G42pjH2wLiMdyMrf1ec+5xy9Jkb6mOeWjayQ8kX2xqRRt2X+mFg6OB35ywj0qr2GRYoippV\/hGEGlH8I\/lklgfbBFWyLLDf1ZfgfyxY7y3xYB5R1bxH1LWsUSeABtw8rTSpuC2Kvabb8R8n5rM3GrA1ITZb1bwQS9C1Ym+SS18X+Pt6b4i65o9DAdLAkPmyKyeXEAFjBWiXK8+\/wA9\/fg1i9cm5SxBJWr9JNj4P86570PtnkZ9DhSlG6r2X\/CqmgN7gh7ON676Ykn1WB9gO3dj8Y3TzSiQvGhEnrCn6gbAACn5I3Lxz6vnPRehdDij6ek06kMwZ1YVapyVIIBobQWvtTD2usb1PTNCzBCQikjaN0gCg0jE3bIybKvkWNo5BBcme\/mizkkSLp4nXUV1BJFJjW\/MMzON5cGwOKogBSAosg7TO0uql1WhT9aneMqVKnzAHlhG3exo\/Ux8xQOPa\/k53zXHojYMFIG5okdlCLbE+YCRQ3EHgeoD3yTpZ3ad2ZwW3NsdG2GRVChV5AvfdX+6yGgCAMsiIxSJUyIq72U+WfWGPaSkCEWTZPpDb6PALDaoAaLqIUJZBUbLvtT\/AMFdg3htik7RWwHgUGprY3nFkcK1b0ULGx8ut7bz5hVyTRYh2JJIFlKHPHGiVlpEDboygKlVG5QwU2eC4YAcA8xqfvkk0P8ADXTknlaOVjGmxCN6oC20LGwO733A1GRXCjkcHW9U8EQCNpYzIJEFb5L3ALztFkFRTVwQK7Gu+R0PTYS7XM8DB1ehuREI9fYEhTV9z33V2rNxp\/FiwQsmqaGR+UjeM0k4AYEMvsR2IH8fF85V2Unjkopx\/U81l0jIQtUVIBVVDKqOzKQtEixZ96ofesldKiLTLGzbdxNswBYputTywJ3WPYk8juObubqWmcebJoliVg6JLBqDIAjybHdtxCum8sQVHs3I94CdCkl3PHMI4wrKJHk4YX6L2jkKLN3xuHvYy18Flb6H+Peifq0KSxnzIXIBlUCo5OPS1cC+9\/7NH09vQM0fRuvyaKIxl4JoXZlYSiZY3awWjDyJs7GyC1er2AvLiDQ9L1ALeU8BHJEMqrHtpjYDAqBxtAUckdvj2aLUxwybldM5f4jpsmZLbToyDvgHbND1jS6JY6hM4lALDzGVkdQ1UeB6iLI2+wv34zxGdrDnjmjuicLLpp4GlNdjbxA5wnOE5sZ0PDYRXyNedDZFhxJ6PjybGQg+dEuVoycB0y0R+P8AkR\/nj45iO+RZpbr8R\/cYWOfjkc5dCUXQDq72ueh\/oha+nuP4Z5B\/NUP+eea9TlG38jm5\/RXr1j0boe5mc\/8A8oP8s5mu5Ojo1UD0ys7kAa9fnCrqgffOdR7LJWLAiYY4SDBITFjPMGc8wYATFg\/NGLAsyGig6XDGo8mPaxoBkMzn0i29+KIs\/fLPSdP6bMfOiRHKsqhDQjMg7Whqz9j77eO2VnW\/C6GBNhkjMDM++wivGR+1Usbpiqkhgpoj4OZfoPSNUdRK0JVNNGXIUzBlB2OFTeAdwHmH1EdgDydueXl9nXXnTcZOvlmg8S9cSXdEZFWOQ8+hHldGUKNq2KB2kAkgEEkXwczX6pEsX7OYszMxYONoAcPShW4PJ3dxfzxz2DpyMXkWYPKSWPpZAbJNC6LUS3JIPsK7ZG12hcfQHJ5sIQDuNEGvb3s81Q745XR7ceKEYcgdW3p4Owqdx2orP9TbRRFD1We1kBSKNjG6NS7+htrsxPAR5EQsG+283uPp4skkAhqgpMJL9KkFn44NncCa5PNgfbn8MvOhIolTaw3syiwLu+Dt4uwWNXzx+eRuZEsdpuLCvoWiVgEbkM\/MdxJIFChVUqECHaUK7t1AHgcrW+cE3WdxjJpaj3RkKQwCj0owtqLbq5+rk56X1DpJETlJCTEh2F3eReFH1bmPN1wCDzzV84LW6II4qRnkIHBJKj94oHY0B7ccce4y0WYYvPbRTyajlijEbuwVgYwzUGZCSe+4L2\/IcVH3xyHZIjlTe0qRuWiBY\/dIJVhXzu5B+qU\/Snc2wegFBDBjR5L7wv2K1X8VckHB6PRiNxvBJZ9vlWlO\/q2oys1EtSkEjvfPFE2i0riXkcwl0cejlkaSCI2qeUiyKrMQilwzdjzwPYA8dwdY1TRx+UoA+ALC0tD0qTwO+ayDoMcaJIsMi2PqYqVbj6773V8t7fnnOq\/o91GpUSRzQqSAVVt\/Yj3IFe4Pb2y6pK0TuxwhdpWW\/gHpun1XRk08sauC03moe+9pGdTfcHay0R8Z5VGBpNRNpnUskUksdE042OVDqa4JAHtyD+BG48MaqfpE\/wCrauNkWT98euNwONwYfVz7AcbuQBeWXjbwONcTrdGVGpYW8RO1NQVWgVY8K9AC+x4uuTmunyQUqn0zkaiOSD3QfyjzyTVrs2LvYnkyTbGe\/faascCrvtYFAkGIZMh6l3hkMUsbxyL3jlQo4\/I\/3wfncg3w3b8fjO1heKEah0crM8mWW6fZNLZzdkUyV3wyEfObKaZi4UEvOjOEY4EVx3++TZRjsackabTTTqTHp532mt8UMkqX8bkUgH7HJS+G+osoYaDUU3a0Cn81Ygr+YGQ82OPbRKw5JdIqX7fmP7jOkkZbjwl1Jzt\/UZRW0ks0QWjdc7ue3t9ryZD4F6jJ\/wAhY695Johf4BST\/TKvPj73L6lvBn1RiOpS3mm8I7k0ysP3mc\/1r\/LKqHpSOd8rn\/8AGvpI+QxPN\/bN303QpHpo1raNoYD4DHcBz+Oc7PkU5Wj2QSUdpwa9\/nJMfVXGCKx5HllUdheYli4j6y2HXrX3zMESt9KH+WJelal\/kZFIWzTP4gUd2GRZfFSjsbyqTwzIfqbJKeHFHc4qJNsJ\/wC9n2P88WN\/9hJnceUjksNB1GXq48t0ZYl2+au4UzUDtBB4HA79qu\/mRr5jJWg0ahVoiSSMKI4otpFKSCLsAGwe54wfWIPPiEUU7QOrmqtY3NkbHC+xq+ftYN0TaTpT6XSukRBnemZ1XbuagOB+AoZ4fy6Oy3Hj09k\/f3LfpfQdPAOI1Zmvc7iyb7gA3Q4HHwB8ZjVTzZ3iSFq\/aFVYUVRaProEAgEd+QRRFjNP0eeWDTu84YsLIUkfur25NL2PvX4cnI+j0b+TJq5EqWa9osHbGS1AF1U2QE9r9K96ByHKy2Ocotpyu+DzLWdOfUakhVYSuQSoVkj2AbTtv6F4B9f3q+2aHovQhFOkmomCRQtG7EhTvdXL7VocC2PI7X7Ghlj0Pp76iZEDyCMiR5DuAJ4FdrVr3RkED3Js2coOodPl1UjICAIUZwzMDSbQ7Er9S1YXdx713vDSqj0JpRcU+T0XVdY0uu080OmmiM7xzIiq6Al9pFKeAeSOQf3lJq88w0XUkZmVgQYxyG233qiv1AWSCDx2uqoOm05cpJBG0AW0ecsHEklqw2AsShY7ifpvdz8DT9J6GJZo0aNdpLs53l0WStzsFPDgshHqo3ZqrIJUZY08UfgFpYiFDlKoCiwBA9I3fc8A+wu\/m7gdV1unYqCu6ZL2vGo3pdgm+x9xt\/l8jQ9a0s8WuiiaSHyJHSrChmUyIKo2S1bhxwDRqu2b650zypmePYSrAWsfmdmHFivZefVYu\/b0y6R6fEg48fubboEp1mmaJxKj1tJog0NpRxuFG12Hmu9fxVf+HdXJR006bZ4r\/wDBKl8SRn95eQD7g9wOLyes8QDS6OHURxbvMHltIwbbEwYsrMppgPVLQ\/L8KeDxrqhKA6xBeHWgQwR73HtVBhtBrncpvkboVpnhnilkulw+j1XqWgj1EZilQMjex7gjsynuGHcEc559J1DUdPY6Hy5pZC1RSBSzSxsKUgAbQV3Vzx6e9cZuPD+ufU6cTPG0e8nargqxQcBiCAQCbIsdqNC8tay7jZ5Yz2XFq0VK9ISeBY9XFDM4ssJI0dFc2aSxwBe0HvQyJrvBnTp41ifRQBEJK+UvkMCe9NHtPP485osWWtroxfLsxf8A8Mumf\/Km\/wD2Jv8AzwU\/6LunMu1f1iM\/xJOWP8pAw\/pm4JxpOX8bJ\/cyuyPsYvT\/AKNOnIm0idz\/ABvOwY\/ktL\/TLLQ+DOnQKAujhaje6VfPe\/ndJeX5ONZsPLN9t\/UKEV0hoAUBQAAOAAKAH2AxpOInGM2ZlhMcC7Z1mwLNgGM634Dh1EzTxytEZGLPHtDxs5NsRyCtmyfxPbBzeGtTf\/HhYD2Kuv8Aa82DvgHbLqckU2RMi3QNSP8A6c\/98n+jHx9OnX\/l6f8Axt\/pzRyPkdmyfEkPDRXr5y\/uQf43\/wBGOOpm\/hh\/xv8A6cM7YFzkeIxsQB9VP8Rf42\/05Feac+0X+Jv9OSXOMOT4jGxEXfqP\/tf4m\/8ALFkjFjxGNiK\/pJk86rbaGIO4neoG0AM22vci15v44zZtPtC+knmjRvadpI5PyaHP8QyGqJGLG1b2gbn8tC30qL7C+B2yp6jrgiyIWCWvpHDsVBBUhr47H5I9iLoeZLYjpzktTNNLhBOpeJbFxwFvIbdIJA20FQxDMB6VAFH1Edx2PaPofHZnDwyQshfftduVO4MAAKNChuJ9gTwRzkXS9WMj1GrLNta5GcyM\/ALUDyTx\/bLDRtA02\/yC0zbgIlVHSQVtO4sPSg4IA7VfzhU2a7IpddFp4RBWKWaw1ltjLQ3Ctxr25Y8faj75WdB0ax6TVyhSHmcxhmsSMicnkgE8lyD\/AFrta6\/qkWkgVZFEW8MBGg3oKoEAqPfctcXz2x2k08E2hCk7YgxYHuVZWs97s2Dfv37HLGKl\/U\/Vr7FJ0vwoms0wXz5kaNgVYbJB\/hI4AdXI5vn8Aui6HCyzK1WBwaU2nopSWPLAj3NEVVVWLpZh00Mi6ffLKqM\/ls5DSbBQVSAQovj0juSeTeUB8WuzoPJbab2jZIr7uQoQUxJoueAB6tvBByH6UJb5tr0NJ42QeUkoA3xsQGBplBUk0aPFqL47WfajK0\/S9Lq4hK8CF5UO6ydyF0Kvt59DUzCxR5OE6noP1uAI7PE52ta7WZGrlTdg9yP7HHdB6UNJF5fmu5Y7mdgFs\/AUdh\/Xnvlq5MN6WNJPlFJ4fhMETpKA6BnRvMC7XVGZd22qALLfA9\/fsuo6fo9PGpMMUSB\/q8qNE3FePVtHJHbM\/qvCnmalpv1mRY2YM0IUHm2JCsT6bLsbqxffgVpdNEsSLGgpEAAA9gMmKaIyzT6ZKvFeC3Yt2SYBN2NJxu7GlsAeTjS2ML4wtgD2bBk5wtg2fAHs2Bd8Yz4NnwBzNgHfOO+AZsA6zYF3zjvgHfAE7YB3zrvgGbAGscEzY52wLnAGk41s6cYTgCvFjcWAXjNQvcR25ADUL54IPH5Zl+rQIlSeWQ5ZSH3Aodp4CBQoCkbT7\/APzfRPJ5rBlAiA9LXyTndXpjKNpN9yvCgqfx9x39vc\/bKSW5HswTWOVSa5Mxq18yVPOcxvSAy0S4XZQNDue3++MsugQSD9mzuqozkSLv3AGrIvhUNEE9gRzkt9AHdZGPmHcjMZQQXCg+hd1UTsUc\/PveWOm0yKK2ULDgMRuR6Fji+OB2PsfaqiKN8mWEY8dh9Q8SxhZmSRGa18wK4PwRfHHyMb1XTefpfLhAAobFUbAFHYAcbRgup9NTUBQxI2Hgj+2WGmQRoqLdKABfJoZNN2n0eTxIxSknzd16FT4V6ZLC7O9heaUk97PNEH2I9778nthunanRfrhEcIExL\/ALS2rdVMVU8C6AsZcLJgNN06GOUzKgDt3Pt+Q9u+QotUkXeoUnJzu2uK\/wBl0r44PkNXx4fNDyEsNnd2RRJjhJgEnfi3ZH8zF5mAH3ZwtgDJjDJgEgvjGfAl8Gz4AVnwbPgmkwTPgBXfAs+MZ8E8mAPZ8C741nwLvgDmfAu+Nd8EzYB1mwbtnGbBM2AJ2wedJxpOAcJxpOdJxhwBYsWLALsHEDjMdeAEVseDgQc6GwCQHx6vkcNjgcAlrJjg+RA2OEmATA+PEmQxJjxJgEsS47zMhiTO7sAmeZi8zIe7FvwCUZM4Zci+ZnDJgEgyYxnwBkwZkwA7PjGkwJfBs+AFZ8Gz4JnwbPgD3fBM+NLYxmwBzNg2bGs2MZsA6zYwnOZwnAETjScROMOAI4sWLAFizmLALnFixYAs6MWLAHDHDOYsAcMcMWLAO53FiwDt4txzuLAObji3HO4sA5ecxYsAac4TixYAMnBtncWAMOMbFiwBhxhxYsAG2NxYsARxhxYsAac4cWLAFnDixYBzFixYB\/\/Z' alt =\"Titanic\" style='width: 900px;'>\n\n","1c89ecb4":"## Data visualization with data of India","261a6200":"# Creating and training the model","427a7d97":"## Importing dependencies","9eacdf85":"## Picking Maharashtra's Data for analysis"}}