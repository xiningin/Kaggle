{"cell_type":{"4a472c19":"code","c71c2133":"code","4df9ccdd":"code","352f66e6":"code","2e292f5b":"code","224e50e5":"code","422c6cfa":"code","e82f2719":"markdown","4b4f3ab9":"markdown","0f35146f":"markdown","ebf11129":"markdown"},"source":{"4a472c19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c71c2133":"countries = ['France', 'Italy', 'Germany', 'Spain' ] ## Countries in the analysis\nstart_date = pd.Timestamp('2020-02-28')","4df9ccdd":"# Read dataset\ndf = pd.read_csv('\/kaggle\/input\/coronavirus-2019ncov\/covid-19-all.csv', names=['Country', 'Province', 'Lat', 'Long', 'Confirmed', 'Recovered', 'Deaths', 'Date'], header=0)\n\n# Convert Date to datetime object\ndf['Date'] = df['Date'].apply(pd.Timestamp)\n# exclude irrelevant countries and dates \ndf = df.loc[(df['Country'].isin(countries)) & (df['Date'] >= start_date)].sort_values(['Country', 'Date'])\n# Sum all provinces\ndf_eur = df.groupby(['Country', 'Date']).sum().reset_index()\n","352f66e6":"# pd.set_option('display.max_rows', df.shape[0]+1)\n# df","2e292f5b":"# Add new confirmed cases\ndf_eur['NewConfirmed'] =  df_eur.groupby('Country')['Confirmed'].diff()\n# Add ratio\ndf_eur['ConfirmedRt'] = df_eur['Confirmed'].div(df_eur['Confirmed'].shift(1)).replace([np.inf, -np.inf], np.nan)\ndf_eur['NewRt'] = df_eur['NewConfirmed'].div((df_eur['NewConfirmed'].shift(1) + df_eur['NewConfirmed'].shift(2) + df_eur['NewConfirmed'].shift(3) + df_eur['NewConfirmed'].shift(4)) \/ 4).replace([np.inf, -np.inf], np.nan)\n# Exclude first date (divided by different country)\ndf_eur = df_eur.loc[df_eur['Date'] != start_date]\n# df_eur","224e50e5":"# pd.set_option('display.max_rows', df_eur.shape[0]+1) # Show all df in 1 print\n# df_eur.columns\n","422c6cfa":"\n\n## All countries together\n# Plot total cases Rt\nfig = px.line(df_eur.loc[df_eur['Date'] > start_date], x=\"Date\", y=\"ConfirmedRt\", color='Country', labels={'x': 'Date', 'y':'Ratio'}, title='The rate of *total* confirmed cases for each country')\nfig.update_xaxes(tick0=2)\nfig.show()\n# Plot new cases Rt\n# fig = px.line(df_eur.loc[df_eur['Date'] > start_date], x=\"Date\", y=\"NewRt\", color='Country', labels={'x': 'Date', 'y':'Ratio'}, title='The rate of *new* confirmed cases for each country')\n# fig.update_xaxes(tick0=2)\n# fig.show()\n## Each country seperatly\nfor country in countries:\n    fig = px.bar(df_eur.loc[df_eur['Country'] == country], x=\"Date\", y=\"NewConfirmed\", labels={'x': 'Date', 'y':'Ratio'}, title='%s: New confirmed cases'%country)\n    fig.show()\n","e82f2719":"Calculating new confirmed cases by applying diff() to total confirmed cases\n\nCalculating ratio between **total** confirmed cases in each day and the previous day\n\nCalculating ratio between **new** confirmed cases in each day and the **mean** of the 4 previous days","4b4f3ab9":"# **COVID-19 analysis in Europe countries: France, Italy, Germany and Spain**\n\n","0f35146f":"For every country display a graph of the total cases ratio vs date and the new cases ratio vs date","ebf11129":"Define the countries and the starting date of analysis (currently 28\/2\/2020)**"}}