{"cell_type":{"4a904945":"code","4d288ed9":"code","65c81e1a":"code","2752fbdc":"code","aff4f489":"code","90d4d054":"code","e06c599e":"code","98510f2b":"code","0246a4ac":"code","871c7c83":"code","f42190c7":"code","934dfda3":"code","612620bd":"code","16d8406f":"code","e5cf77f9":"code","6d6caf06":"code","06239bc2":"code","e7623690":"code","3644403d":"code","5588ac4a":"code","455ebcf0":"code","52c58cd6":"code","14fd1fd6":"code","7fad70fd":"code","08dafd11":"code","03fdb058":"code","3e95f23d":"code","178d96ab":"code","0ab5a12a":"code","938df0f4":"code","c4f61706":"code","53c2cc44":"code","d1279bc6":"code","3e1d9441":"code","b35ea046":"code","3c35648f":"code","77ad6ad5":"code","0469a5cf":"code","c68fcfb2":"code","60de4c64":"code","2057700e":"code","aa1f503e":"code","e6a09879":"code","3a0e3cc6":"code","ec3094fc":"code","e12554d1":"code","b5c59229":"code","d8a91672":"code","1c2eefc5":"code","11a2658b":"code","5c2ebf71":"code","e8d0e129":"code","dedd3b49":"code","72c85d61":"code","3c11bc66":"code","84c5ecbd":"code","fdf4c5a2":"code","21ed8106":"code","6f3b2436":"code","b205d16e":"code","95381cbc":"code","48bbcc50":"code","213db8cd":"code","cd9693ef":"code","fe578891":"code","6482a6e7":"code","6a2082ae":"code","36f5967f":"code","634348f5":"code","a9f0fdd7":"code","a343ea7d":"code","8347f7f4":"code","cf95beb2":"code","c8c28d11":"code","ebb35ecf":"code","2e04ef5f":"code","04a57cb5":"code","37027144":"code","5988cd9e":"code","ae610082":"code","228eb6ea":"code","43525191":"code","a083795e":"code","cdc36f57":"code","8fd31435":"code","c789ab39":"code","da747c99":"code","8cf3dbe9":"code","d1354f25":"code","a16f7645":"code","bc710eae":"code","f6312043":"code","8e7ae9e0":"code","303f0abf":"code","452b9c38":"code","b52c4ee2":"code","1aaf8d58":"code","1f23df47":"code","f3a96aa5":"code","45a9928a":"code","44220648":"code","5762c67e":"code","1aa211c1":"code","288d3859":"code","7ef49ad0":"code","5065579f":"code","199c9304":"code","8bc397e9":"code","bab7c402":"markdown","f46d1636":"markdown","dc12c655":"markdown","82e833d5":"markdown","54330607":"markdown","fb240161":"markdown","ab6b06df":"markdown","12b23eb6":"markdown","0ee333da":"markdown","9652dbd6":"markdown","42b777eb":"markdown","9549c494":"markdown","1e363f2f":"markdown","1c7cf4f0":"markdown","0d802e1a":"markdown","53b79406":"markdown","6b90a605":"markdown","deb27499":"markdown","b2de9437":"markdown","29bca988":"markdown","ec9ece71":"markdown","fa7e049f":"markdown","e599f4d7":"markdown","33ffd8e4":"markdown","637d9175":"markdown","292747b4":"markdown","cd6f7a88":"markdown","b92099e3":"markdown","bc750747":"markdown","84711841":"markdown","7ab0c186":"markdown","d2f31d6c":"markdown"},"source":{"4a904945":"import numpy as np","4d288ed9":"#1D Array\na = np.array([1,2,3])\nprint(a)","65c81e1a":"#2D Array\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)","2752fbdc":"a.ndim","aff4f489":"b.ndim","90d4d054":"a.shape","e06c599e":"b.shape","98510f2b":"#Type\nprint(a.dtype,b.dtype)\nprint(type(a),type(b))","0246a4ac":"#Item Size\nprint(a.itemsize,b.itemsize)\nprint(a.size,b.size)","871c7c83":"#Total Size (Size*Item Size)\nprint(a.nbytes,b.nbytes)","f42190c7":"a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])\nprint(a)","934dfda3":"#Get specific element by [row,column]. Here lets extract 13\na[1,5]","612620bd":"#We can even use negative index for the same task\na[1,-2]","16d8406f":"#Get a specific row. Here lets get the 1st row\na[0,:]","e5cf77f9":"#Get a specific column. here lets get the 5th column\na[:,4]","6d6caf06":"#Start, Stop and Step Size indexing. Heres lets get the data from 2 to 6 with 2 stepsize\na[0,1::2]","06239bc2":"#Changing element\na[1,5] = 20\nprint(a)","e7623690":"a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\nprint(a)","3644403d":"#Get 7 from this. Work your way from outside to inside\na[1,1,0]","5588ac4a":"#0 Array of 3 rows 2 columns of int type\na = np.zeros((3,2),dtype = 'int32')\nprint(a)","455ebcf0":"#One Array of 4 rows 2 columns of float type\nb = np.ones((4,2),dtype='float32')\nprint(b)","52c58cd6":"#Any other array where every element is equal. Here (4,3) is the size and 99 is the element\nc = np.full((4,3),99)\nprint(c)","14fd1fd6":"#Random Numbers. Note that in random numbers we shouldn't pass the size as a tuple\na = np.random.rand(4,3)\nprint(a)","7fad70fd":"#Random Integers within range 1 to 100 of size (4,3)\nb = np.random.randint(1,100,size=(4,3))\nprint(b)","08dafd11":"#Identity Matrix\nc = np.identity(3,dtype = 'int32')\nprint(c)","03fdb058":"#Multiplication\na = np.random.randint(1,10,size=(2,3))\nb = np.random.randint(1,5,size=(3,2))\nprint(a,'\\n\\n',b)","3e95f23d":"c = np.matmul(a,b)\nprint(c)\nd = a @ b #Another simple way for Matrix Multiplication\nprint(d)","178d96ab":"#Finding Determinent\nprint(np.linalg.det(c))","0ab5a12a":"a = np.array([[1,2,3],[4,5,6]])\nprint(a)","938df0f4":"#Finding the minimum of the array\nnp.min(a)","c4f61706":"#Finding the maximum of the array\nnp.max(a)","53c2cc44":"#Finding the minimum along x-axis \nnp.min(a,axis=0)","d1279bc6":"#Finding the minimum along y-axis\nnp.min(a,axis=1)","3e1d9441":"#Finding the maximum along x-axis\nnp.max(a,axis=0)","b35ea046":"#Finding the maximum along y-axis\nnp.max(a,axis=1)","3c35648f":"a = np.arange(1,11)\nprint(a,a.shape)","77ad6ad5":"b = a.reshape(2,5)\nprint(b,b.shape)","0469a5cf":"a = np.array([1,2,3])\nb = np.array([4,5,6])\n#Now, we want to stack a and b such that a comes first followed by b in vertical stacking\nc = np.vstack([a,b])\nprint(c)","c68fcfb2":"#Now, we want to stack a and b such that b comes first followed by a and again b followed by a again in vertical stacking\nc = np.vstack([b,a,b,a])\nprint(c)","60de4c64":"#Similarly for Horizontal Stack, we use np.hstack([a,b]) etc\nh = np.hstack([a,b])\nprint(h)","2057700e":"#For performing complex operations, we use vectorize functions rather than direct broadcasting\na = np.arange(1,16).reshape(3,5)\nprint(a)","aa1f503e":"#Lets perform an operation element^2+2*element+10. Here, we created a funciton using lambda and then applied on each element\nfunc = lambda i:pow(i,2)+(2*i)+10\nfm = np.vectorize(func)\nfm(a)","e6a09879":"#The usual way is as follows\nprint((pow(a,2)+(2*a)+10))","3a0e3cc6":"'''First lets find the mean, variance and Standard Deviation using numpy calculation\n\nMean :- The average weights of all the values\n\nVariance :- The degree or the amount of spreadness of the data points in a plane\n\nStandard Deviaiton :- The amount of deviation from the mean to the data points'''","ec3094fc":"a = np.array([1,5,6,5,8,0,2,8,5]).reshape(3,3)\nprint(a)","e12554d1":"np.mean(a)","b5c59229":"np.var(a)","d8a91672":"np.std(a)","1c2eefc5":"a = np.random.randint(1,11,size=(3,3))\nprint(a)","11a2658b":"a.T","5c2ebf71":"a = np.random.randint(1,11,size=(3,3))\nprint(a)","e8d0e129":"a.diagonal()","dedd3b49":"#Trace is the sum of all diagonal elements\na.trace()","72c85d61":"#This can also be done like this\na.diagonal().sum()\nnp.sum(a.diagonal())","3c11bc66":"a = np.random.randint(1,10,size=(2,3))\nb = np.random.randint(1,5,size=(3,2))\nprint(a,'\\n\\n',b)","84c5ecbd":"print(np.matmul(a,b))","fdf4c5a2":"#The other way is by using @ operator for multiplication\na @ b","21ed8106":"a = np.random.randint(1,11,size=(3,3))\nprint(a)","6f3b2436":"#Inverting a square matrix\nprint(np.linalg.inv(a))","b205d16e":"#By specifying the keyword ndmin=5 , we converted a 1D Array into a 5 dimensional array\n\n#This can be used in real-life scenarios wherein only data of specific dimension can be passed in in which, we can use this.\n\na = np.array([1,2,3],ndmin=5)\nprint(a,a.ndim)","95381cbc":"#By specifying datatype as complex, we can cast integer to a complex number\na = np.array([1,2,3],dtype='complex')\nprint(a)","48bbcc50":"a = np.array([1,2,3,4]).reshape(2,2)\nprint(type(a))\nb = np.mat(a)\nprint(type(b))","213db8cd":"#We can even convert strings into a matrix easily\na = np.mat('1 2;3 4')\nprint(a)","cd9693ef":"#Matrix is a subclass of Array while the converse if False\nissubclass(np.ndarray,np.matrix)\nissubclass(np.matrix,np.ndarray)","fe578891":"#There are two types of copying in general which are Deep Copy and Shallow Copyin Python. lets look at them by example","6482a6e7":"x = np.array([1,2,3,4])\ny = x","6a2082ae":"#Now, lets try to update any value in x and see if it is reflected in y as well\nx[0] = 1251\nprint(x,y)\n#We can clearly see that by updating the value of x, y changes too. This is called Shallow Copy wherein y doesnt create a\n# new space but it just points to the location of x so if x changes, y changes too. We can aslo verify it by 'is' operator.\n\nx is y","36f5967f":"z = np.copy(x)\nx[1] = 121\nprint(x,z)\n#As we can see here, even after changing the value of x, z doesnt change as it creates a new copy of values at different\n#location. This is called as Deep Copy\nx is z","634348f5":"#This function is basically used to create an array based on a certain function by iterating over coordinates","a9f0fdd7":"np.fromfunction(lambda i,j: i*j ,(3,3),dtype='int32')","a343ea7d":"#This function is basically used to create an array by using an iterable object","8347f7f4":"iterable = [pow(i,2) for i in range(1,6)]\niterable","cf95beb2":"#Fromiter takes 2 arguments, one is the iterable object and second is the datatype. Both are necessary to create an array\n\nnp.fromiter(iterable,int)","c8c28d11":"#We can create a 1D Array based on a string by using a seperator","ebb35ecf":"np.fromstring('123-234-456',sep='-')","2e04ef5f":"s = '123 123243 234342'\nnp.fromstring(s,sep=' ')","04a57cb5":"#The default range function in python cannot interpret floating point numbers as its starting point or end point\ntry:\n    print(list(range(1.1,51,3)))\nexcept:\n    print('Range Error. Cannot use floating point numbers as indexes')","37027144":"#This is why we can use arange function in numpy to avoid this shortcoming\nnp.arange(5.2,16,3.3)","5988cd9e":"#It can even be used for negative direction as well\nnp.arange(-1000,-100,100)","ae610082":"#Let us look at the parameters of arange. They are start index, stop index and step size. So, arange returns an array of\n#numbers from starrt index to stop index using step size\n\n\n#But linspace works in a different way. The parameters of linspace are start index, stop index and number of values. So\n# linspace returns an array with n equally spaced values between the start and stop index. Lets see an example\n","228eb6ea":"print(np.arange(1,10,5))\nprint(np.linspace(1,11,5))","43525191":"#Returns numbers spaced evenly on a log scale for any base","a083795e":"np.logspace(2,3,4,base=10)","cdc36f57":"#reshape of (1,-1) is a default way of telling that -1 implies the size of the array by default. Just like index of a list\na = np.arange(16).reshape((4,-1))\na","8fd31435":"#Heres another way for getting the diagonal\nnp.diag(a)\n#Here it has an optional parameter called k which can be an integer. Lets look the results based on that","c789ab39":"print(np.diag(a,k=1))\nprint(np.diag(a,k=2))\n#We can observe that as we change the value of k, it leaves k number of indexes and prints diagonal out of remaining","da747c99":"#If we call the diagonal function inside diagonal function, it reconstructs the matrix with elements as diagonals\nb = np.diag(a)\nprint(b)\nprint(np.diag(b))","8cf3dbe9":"#This function returns an array with ones at and below the diagonals and zeros elsewhere\nnp.tri(3,5,0,dtype=int)\n#Here 3 is number of rows, 5 is no of columns and 0 is value of k","d1354f25":"#This function when invoked, retains all the data present in the lower triangle of the array and keeps 0s in other places.\na = np.random.randint(1,11,(3,3))\na","a16f7645":"np.tril(a,0)\n#Here, 0 refers to the value of k and every data above the diagonal or the upper data is replaced by 0s","bc710eae":"np.tril(a,-1)\n#Here k is -1 so leaving aside the last column and first row, we get diagonal as 2,3 so eveeything above that is 0.","f6312043":"#This function when invoked, retains all the data present in the upper triangle of the array and keeps 0s in other places.\na = np.random.randint(1,11,(3,3))\na","8e7ae9e0":"np.triu(a,0)\n#Here, 0 refers to the value of k and every data above the diagonal or the upper data is replaced by 0s","303f0abf":"np.triu(a,-1)\n#Here k is -1 so leaving aside the last column and first row, we get diagonal as 5,3 so everything below that is 0.","452b9c38":"#randn function generates the data similar to rand function but it follows 'standard normal' distribution.\n#Standard Normal Distribution is the data in which mean =0 and standard deviation =1\na = np.random.randn(4,4)\nprint(a)","b52c4ee2":"#Write a NumPy program to generate five random numbers from the normal distribution.\n\nnp.random.randn(1,5)","1aaf8d58":"#Write a NumPy program to generate six random integers between 10 and 30\n\nnp.random.randint(10,30,(1,6))","1f23df47":"#Write a NumPy program to create a 3x3x3 array with random values\n\nnp.random.rand(3,3,3)","f3a96aa5":"#Write a NumPy program to create a 5x5 array with random values and find the minimum and maximum values.\n\na = np.random.rand(5,5)\nprint(f'The array is {a} \\n\\n  The minimum value is {np.min(a)} \\n\\n The maximum value is {np.max(a)}')","45a9928a":"#Write a NumPy program to create a random 10x4 array and extract the first five rows of the array and store them into a variable\n\na = np.random.rand(10,4)\nb = a[0:5,:]\nprint(f'{a} \\n\\n {b}')\n","44220648":"#Write a NumPy program to shuffle numbers between 0 and 10 (inclusive)\na = np.arange(1,11)\nprint(a,'\\n\\n',np.random.permutation(a))","5762c67e":"#Write a NumPy program to normalize a 3x3 random matrix\nnor = lambda i: (i-mini)\/(maxi-mini)\nvec = np.vectorize(nor)\na = np.random.rand(3,3)\nmini,maxi = np.min(a),np.max(a)\nprint(a,'\\n\\n',vec(a))","1aa211c1":"#Write a NumPy program to create a random vector of size 10 and sort it\n\na = np.random.rand(10)\nprint(a,'\\n\\n',np.sort(a))","288d3859":"#Print Range Between 1 To 15 and show 4 integers random numbers\n\nnp.random.randint(1,15,4)","7ef49ad0":"np.random.seed(21) # This guarantees the code will generate the same set of random numbers whenever executed\na = np.random.randint(1,high=500000, size=(20, 5))\na","5065579f":"#What is the average value of the second column \nprint(round(np.mean(a[:,1]),2))","199c9304":"#What is the average value of the first 5 rows of the third and fourth columns?\nprint(np.mean(a[0:4,3:5]))","8bc397e9":"#Iterate through each element in a 3x3 array\na = np.random.randint(1,11,(3,3))\nprint(a,'\\n\\n')\nfor i in a:\n    for j in i:\n        print(j)","bab7c402":"## Converting an Array into a Matrix","f46d1636":"### Triu Function","dc12c655":"## Vectorize Function","82e833d5":"## Tri Function","54330607":"## Mean, Variance and Standard Deviation","fb240161":"## Another Way for Matrix Multiplication","ab6b06df":"## Problems","12b23eb6":"## Copy Function","0ee333da":"## fromstring","9652dbd6":"## Complex Datatype","42b777eb":"## Vertical and Horizontal Stacking  ","9549c494":"## arange","1e363f2f":"## Getting Dimensions ","1c7cf4f0":"## logspace ","0d802e1a":"## Matrix Multiplication and Determinant Finding","53b79406":"## Calculating Diagonal of a Matrix and Trace","6b90a605":"## Changing the Dimensions of the Array ","deb27499":"## Another way for diagonals in numpy","b2de9437":"## Accessing, Changing rows columns and elements ","29bca988":"## Minimum, Maximum, SUm of an array along different axes","ec9ece71":"## fromiter","fa7e049f":"## Randn Function","e599f4d7":"## Initialising an array","33ffd8e4":"## Initialising different types of arrays\n","637d9175":"## Getting Shape, Type, Size, Total Size","292747b4":"## linspace","cd6f7a88":"## FromFunction in Numpy","b92099e3":"## 3-D Example","bc750747":"## Getting Transpose of a Matrix","84711841":"## Inverting a Square Matrix","7ab0c186":"### Tril Function","d2f31d6c":"## Re-shaping Arrays\n"}}