{"cell_type":{"7564c9ae":"code","465b1dad":"code","dd173ae4":"code","8eae1545":"code","06181c9f":"code","010fc05f":"code","d1ab37b1":"code","ac85b412":"code","c8a7ad95":"code","ed161b67":"code","c94b4087":"code","df532aed":"code","a43a1e1e":"code","77822bad":"code","6d2832b5":"code","c1505a2d":"code","42b0df25":"code","e6d77f45":"code","40803f5c":"code","a78a6ed5":"code","4411a942":"code","f6f615c1":"code","d2864489":"code","6afaf9c7":"code","26f5870f":"code","94bbda83":"code","a0bed296":"code","9a1e42e4":"code","fe6aa5bf":"code","53049a8d":"code","1d1a4a0d":"code","1eb0f848":"code","fc049d00":"code","938ef23b":"code","3c79914e":"code","7cb2de1d":"code","be122b65":"code","84e0939f":"code","5e3cc531":"code","0efe7b1e":"code","70f8141c":"code","5165df69":"code","5bea2588":"code","c424bf91":"code","be6da385":"code","cef62aca":"code","11b99048":"code","f32d93e6":"code","6a2256e7":"code","287ac040":"code","c16fe477":"code","3fab1acd":"code","7476b54f":"code","a84296e8":"code","11a9679a":"code","e916bd7d":"code","925062fb":"code","076ccd17":"code","df85071a":"code","88c541b8":"code","f196b7fc":"code","f5b5b065":"code","136d41b8":"code","64255b37":"code","c0fc5765":"code","eac05a0e":"code","bb1eed8a":"code","ebf05031":"code","b66e15f7":"code","2d655df1":"code","3b23914d":"code","f278d095":"code","4bdbe1e0":"code","ff181f7d":"code","192f33c3":"markdown","4a93af76":"markdown","4daa927a":"markdown","290df54a":"markdown","21f54368":"markdown","f12973c9":"markdown","95fd7dcf":"markdown","72d274eb":"markdown","b72c4bed":"markdown","c2458bfc":"markdown","86ebb065":"markdown","f877e0c9":"markdown","6fc74bf1":"markdown","07abb52c":"markdown","22a93b16":"markdown","eb5b217e":"markdown","bd0a309d":"markdown","d9ba3e04":"markdown","7fc348d3":"markdown","c4053e73":"markdown","6f9a2745":"markdown","2e1d3090":"markdown","0cff4b07":"markdown"},"source":{"7564c9ae":"%matplotlib inline","465b1dad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(\n            dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd173ae4":"buts = pd.read_csv('..\/input\/top-football-leagues-scorers\/Data.csv')","8eae1545":"t = pd.read_csv('..\/input\/soccer-players-values-and-their-statistics\/transfermarkt_fbref_201920.csv',sep=';')","06181c9f":"t.head()","010fc05f":"#for column in pd.read_csv('..\/input\/soccer-players-values-and-their-statistics\/transfermarkt_fbref_201920.csv',sep=';') :\n    #print(column)","d1ab37b1":"t = t[['player','value','nationality','position','squad','goals','goals_per_shot','passes_completed','assisted_shots','passes_blocked','tackles_won','dribbled_past','touches','age','height','assists','cards_yellow','games_starts','minutes']]","ac85b412":"#for column in t :\n    #print(column)","c8a7ad95":"t.head(10)","ed161b67":"t.shape","c94b4087":"joueur_v2 = [i for i in t['player']]","df532aed":"for indice_j,nom_j in enumerate(joueur_v2) :\n    tab_c = list(nom_j)\n    l = len(tab_c)\n    for indice_c,caractere in enumerate(tab_c) :\n        if caractere == '\u0102' :\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x81' :\n                    tab_c[indice_c] = 'A'\n                    del tab_c[indice_c + 1]\n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\xad' :\n                    tab_c[indice_c] = 'i'\n                    del tab_c[indice_c + 1]\n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x98' :\n                    tab_c[indice_c] = 'O'\n                    del tab_c[indice_c + 1]\n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00a9' :\n                    tab_c[indice_c] = 'e'\n                    del tab_c[indice_c + 1]\n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u02c7' :\n                    tab_c[indice_c + 1] = 'a'\n                    del tab_c[indice_c + 1]  \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2030' :\n                    tab_c[indice_c] = 'E'\n                    del tab_c[indice_c + 1]   \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u0142' :\n                    tab_c[indice_c] = 'o'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00ab' :\n                    tab_c[indice_c] = 'e'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u017b' :\n                    tab_c[indice_c] = 'i'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2021' :\n                    tab_c[indice_c] = 'c'\n                    del tab_c[indice_c + 1]  \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2013' :\n                    tab_c[indice_c] = 'O'\n                    del tab_c[indice_c + 1]    \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u201c' :\n                    tab_c[indice_c] = 'O'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b1' :\n                    tab_c[indice_c] = 'n'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '' :\n                    tab_c[indice_c] = 'A'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u013d' :\n                    tab_c[indice_c] = 'u'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b6' :\n                    tab_c[indice_c] = 'o'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b8' :\n                    tab_c[indice_c] = 'o'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u015e' :\n                    tab_c[indice_c] = 'e'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00a7' :\n                    tab_c[indice_c] = 'c'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u015f' :\n                    tab_c[indice_c] = 'u'\n                    del tab_c[indice_c + 1]\n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00a4' :\n                    tab_c[indice_c] = 'a'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b0' :\n                    tab_c[indice_c] = 'o'\n                    del tab_c[indice_c + 1] \n                    break\n                else :\n                    tab_c[indice_c] = 'a'\n                    break\n        if caractere == '\u0141':\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == 'o' :\n                    tab_c[indice_c] = 'o'\n                    del tab_c[indice_c + 1] \n                    break\n        if caractere == '\u0139' :\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u017a' :\n                    tab_c[indice_c] = 's'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x81' :\n                    tab_c[indice_c] = 'L'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\xa0' :\n                    tab_c[indice_c] = 'S'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u02c7' :\n                    tab_c[indice_c] = 's'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u013e' :\n                    tab_c[indice_c] = 'z'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00bb' :\n                    tab_c[indice_c] = 'Z'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u201e' :\n                    tab_c[indice_c] = 'n'\n                    del tab_c[indice_c + 1] \n                    break\n        if caractere == '\u00c4' :\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u203a' :\n                    tab_c[indice_c] = 'e'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u0164' :\n                    tab_c[indice_c] = 'c'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2026' :\n                    tab_c[indice_c] = 'a'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2122' :\n                    tab_c[indice_c] = 'e'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2021' :\n                    tab_c[indice_c] = 'c'\n                    del tab_c[indice_c + 1] \n                    break\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x83' :\n                    tab_c[indice_c] = 'a'\n                    del tab_c[indice_c + 1] \n                    break\n        if caractere == '\u010c' :\n                if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u203a' :\n                    tab_c[indice_c] = 't'\n                    del tab_c[indice_c + 1] \n                    break\n    joueur_v2[indice_j] = \"\".join(tab_c)","a43a1e1e":"t = t.drop(['player'], axis=1)","77822bad":"#t.head()","6d2832b5":"t.insert(0, 'player', joueur_v2)","c1505a2d":"#t.head()","42b0df25":"buts.head()","e6d77f45":"buts = buts.rename(columns = {'Player Names': 'player'})","40803f5c":"index = []\ni = 0\nwhile buts['Year'][i] < 2020 :\n    index += [i]\n    i += 1\nbuts.drop(index , inplace=True)","a78a6ed5":"buts = buts.drop(['Country','Club','Year','xG','Matches_Played','Goals'], axis = 1)","4411a942":"buts.head()","f6f615c1":"t.head()","d2864489":"t_final = pd.merge(buts, t)","6afaf9c7":"t_final.shape","26f5870f":"li = [i for i in t_final['League']]","94bbda83":"for i in range(57,72) :\n    li[i] = 'Ligue 1'","a0bed296":"t_final = t_final.drop(['League','cards_yellow','Mins','age','dribbled_past','tackles_won'], axis=1)\nt_final.insert(0, 'League', li)","9a1e42e4":"t_final.head(100).T","fe6aa5bf":"t_final.to_csv('t_final.csv')","53049a8d":"#t_final.plot(kind=\"scatter\", x=\"Mins\", y=\"Shots\", c=\"value\", cmap=\"rainbow\", s=3, figsize=(12,12))","1d1a4a0d":"tabcorr = t_final.corr() ","1eb0f848":"tabcorr","fc049d00":"plt.figure(figsize=(12,12))\nsns.heatmap(abs(tabcorr), cmap=\"coolwarm\")","938ef23b":"sns.clustermap(abs(tabcorr), cmap=\"coolwarm\")","3c79914e":"#from scipy.cluster import hierarchy as hc\n\n#corr = 1 - t_final.corr()\n#corr_condensed = hc.distance.squareform(corr)\n#link = hc.linkage(corr_condensed, method='ward')\n#plt.figure(figsize=(12,12))\n#den = hc.dendrogram(link, labels=t_final.columns, orientation='left', leaf_font_size=10)","7cb2de1d":"correlations = tabcorr.value\nprint(correlations)","be122b65":"correlations = correlations.drop(['value'],axis=0)","84e0939f":"print(abs(correlations).sort_values(ascending=False))","5e3cc531":"t_final.player.count()","0efe7b1e":"t_final.count()","70f8141c":"sns.distplot(t_final.passes_blocked, color='blue')","5165df69":"t_final['log_passes_blocked'] = np.log(t_final.passes_blocked+1)","5bea2588":"sns.kdeplot(t_final.log_passes_blocked, color='blue')","c424bf91":"t_final = t_final.drop(['passes_blocked'], axis=1)","be6da385":"sns.distplot(t_final.Shots, color='blue')","cef62aca":"t_final.columns","11b99048":"sns.kdeplot(t_final.log_passes_blocked, color='blue')\nsns.kdeplot(t_final.goals, color='red')","f32d93e6":"from sklearn import preprocessing","6a2256e7":"minmax = preprocessing.MinMaxScaler(feature_range=(0, 1))\nt_final[['log_passes_blocked', 'goals']] = minmax.fit_transform(t_final[['log_passes_blocked', 'goals']])","287ac040":"sns.distplot(t_final.log_passes_blocked, color='blue')\nsns.distplot(t_final.goals, color='red')","c16fe477":"scaler = preprocessing.StandardScaler()\nt_final[['log_passes_blocked', 'goals']] = scaler.fit_transform(t_final[['log_passes_blocked', 'goals']])","3fab1acd":"sns.kdeplot(t_final.log_passes_blocked, color='blue')\nsns.kdeplot(t_final.goals, color='red')","7476b54f":"t_final.info()","a84296e8":"t_final = pd.get_dummies(data=t_final, columns=['League', 'position'])","11a9679a":"t_final.head().T","e916bd7d":"#tabcorr = t_final.corr() ","925062fb":"#correlations = tabcorr.value\n#print(correlations)","076ccd17":"#correlations = correlations.drop(['value'],axis=0)","df85071a":"#print(abs(correlations).sort_values(ascending=False))","88c541b8":"t_final = t_final.drop(['squad', 'nationality', 'player'], axis=1)","f196b7fc":"X = t_final.drop(['value'], axis=1)\ny = t_final.value\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)","f5b5b065":"from sklearn.linear_model import LinearRegression","136d41b8":"lm = LinearRegression()\nlm.fit(X_train, y_train)            # apprentissage\ny_pred = lm.predict(X_test)         # pr\u00e9diction sur l'ensemble de test","64255b37":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Valeur\")\nplt.ylabel(\"Prediction de la valeur\")\nplt.title(\"valeur reelles vs predictions\")","c0fc5765":"sns.distplot(y_test-y_pred)","eac05a0e":"scoreR2 = r2_score(y_test, y_pred)\nprint(scoreR2)","bb1eed8a":"#t_final.std()","ebf05031":"X = t_final.drop(['value'], axis=1)\ny = t_final.value\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","b66e15f7":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","2d655df1":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Valeur\")\nplt.ylabel(\"Prediction de la valeur\")\nplt.title(\"Valeur reelles vs predictions\")","3b23914d":"sns.distplot(y_test-y_rf)","f278d095":"rf.score(X_test,y_test)","4bdbe1e0":"import xgboost as XGB\nxgb  = XGB.XGBRegressor()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\nprint(xgb.score(X_test,y_test))\n\nplt.figure(figsize=(12,12))\nplt.scatter(y_test, y_xgb)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","ff181f7d":"xgb.score(X_test,y_test)","192f33c3":"## D\u00e9s\u00e9quilibre des distributions","4a93af76":"# A EXECUTER 3 FOIS","4daa927a":"Colonnes qui vont poser probl\u00e8me : league, player, nationality, position, squad = ''object''\n","290df54a":"# R\u00e9gression lin\u00e9aire multiple","21f54368":"# Encodage binaire des donn\u00e9es qualitatives","f12973c9":"# Merge","95fd7dcf":"On utilise la fonction de r\u00e9gression lin\u00e9aire multiple de *sklearn* :","72d274eb":"# Exportation du dataframe en csv","b72c4bed":"# Transferts","c2458bfc":"Ci-dessus, normalisation de la distribution des buts puis on drop l'ancienne version. Faut-il faire cette manip pour chaque distribution qui le n\u00e9cessite (apr\u00e8s avoir fait une v\u00e9rification) ?","86ebb065":"# BUTS","f877e0c9":"On trace le nuage de points","6fc74bf1":"Et pour XGBoost (r\u00e9sultats encore moins bons):","07abb52c":"## Mise \u00e0 l'\u00e9chelle des donn\u00e9es quantitatives\n","22a93b16":"Ok pour les shots pas besoin de modifier","eb5b217e":"### Remplacement des caract\u00e8res corrompus","bd0a309d":"Faut-il le faire pour chaque colonne deux \u00e0 deux ?","d9ba3e04":"# R\u00e9gression par for\u00eats al\u00e9atoires","7fc348d3":"On utilise la fonction *get_dummies* de Pandas pour transformer les colonnes multimodales (par exemple 'League') en plusieurs colonnes binaires (par exemple 'La Liga' dont les valeurs sont 1 si le joueur joue dans La Liga et 0 sinon) :","c4053e73":"# Probleme ligues fran\u00e7aises","6f9a2745":"On peut refaire toute la recherche de corr\u00e9lations avec les donn\u00e9es transform\u00e9es mais ce n'est pas tr\u00e8s utile : peut-\u00eatre cela montre aussi que faire ces manipulations sur les distributions ne change pas grand chose au r\u00e9sultat final ?","2e1d3090":"# Recherche de corr\u00e9lation","0cff4b07":"Visualisation de la distribution de l'erreur"}}