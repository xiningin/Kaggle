{"cell_type":{"d7f17119":"code","53c94385":"code","296ea16e":"code","426458d6":"code","08efbcff":"code","2f3fb123":"code","b5a9f72c":"code","9c3aab98":"code","ad5f2604":"code","eeca4079":"code","3dfe6fc8":"code","56647e90":"code","93b4f8aa":"code","db287b2e":"code","a958d06b":"code","81ac5c86":"code","fa9b401a":"code","2780f4e8":"code","0ebd82cc":"code","8b08d157":"code","ff6c448d":"code","899124fe":"code","1a849840":"code","bc4ac1aa":"code","a01fdccb":"code","853788b3":"code","a741a8a5":"code","23704238":"code","7f9a4b6f":"code","e90f096c":"code","a935b359":"code","d6001d6d":"code","04e201b8":"code","70712882":"markdown","4227c44e":"markdown","c74c9d7c":"markdown","e5c5543c":"markdown","567cb610":"markdown","83ee7177":"markdown","e390a5c2":"markdown","dcb1225f":"markdown","c2a83be6":"markdown","fc0a10fe":"markdown","c49f1968":"markdown","ce447034":"markdown","79c96939":"markdown","f5b726c7":"markdown","1304dee8":"markdown","c2b927ed":"markdown","84b2b7a6":"markdown","e4ae63c5":"markdown","ef0ba1a1":"markdown","261f263b":"markdown","aa6dbe78":"markdown","3a6b30e9":"markdown","ebb43f7e":"markdown","d987702d":"markdown","75a82ace":"markdown","0d9b7dfd":"markdown","2200ce7a":"markdown","038065a8":"markdown","1333c398":"markdown","f28cd764":"markdown","d07e66b2":"markdown"},"source":{"d7f17119":"# Selective library imports\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Selectively import functions\nfrom math import sqrt\nfrom IPython.display import display\nfrom collections import OrderedDict\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import roc_auc_score, roc_curve, accuracy_score, classification_report, confusion_matrix","53c94385":"# Disable warnings. This is not a good practice generally, but for the sake of aesthetics we are disabling this :D\nwarnings.filterwarnings(\"ignore\")\n\n# Suppress scientific notation\npd.options.display.float_format = '{:20,.2f}'.format\n\n# Set plot sizes\nsns.set(rc={'figure.figsize':(11.7,8.27)})\n\n# Set plotting style\nplt.style.use('fivethirtyeight')","296ea16e":"def plot_dist(df, var, target, var_type='num'):\n    \n    '''Function helper to facet on target variable'''\n    \n    if var_type == 'num':\n        sns.distplot(df.query('target == 1')[var].tolist() , color=\"red\", label=\"{} for target == 1\".format(var))\n        sns.distplot(df.query('target == 0')[var].tolist() , color=\"skyblue\", label=\"{} for target == 0\".format(var))\n        plt.legend()\n        \n    else:\n        fig, ax = plt.subplots(1,2)\n        sns.countplot(data=df.query('target == 1') , color=\"salmon\", x=var, label=\"{} for target == 1\".format(var), ax=ax[0])\n        sns.countplot(data=df.query('target == 0') , color=\"skyblue\", x=var, label=\"{} for target == 0\".format(var), ax=ax[1])\n        fig.legend()\n        fig.show()","426458d6":"def process_data(df, test_size=0.3, random_state=1, scale=True, scaler=MinMaxScaler(), feature_selection=True, k=10):\n    \n    '''Function helper to generate train and test datasets and apply transformations if any'''\n    \n    \n    # Dummify columns\n    dummy_cols = ['cp', 'restecg', 'slope', 'ca', 'thal']\n    df = pd.get_dummies(df, columns=dummy_cols)\n    \n    \n    # All the columns\n    cols = df.columns.tolist()\n    \n    # X cols\n    cols = [col for col in cols if 'target' not in col] \n    \n    # Subset x and y\n    X = df[cols]\n    y = df['target']\n    \n    # Feature selection\n    if feature_selection == True:\n        \n        k_best = SelectKBest(score_func=chi2, k=k)\n        selector = k_best.fit(X, y)\n        selection_results = pd.DataFrame({'feature' : cols, 'selected' : selector.get_support()})\n        selected_features = list(selection_results.query('selected == True')['feature'])\n        X = X[selected_features]\n\n    # Train test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    \n    \n    # Make a copy to apply on. Else Set-copy warning will be displayed\n    X_train_copy = X_train.copy()\n    X_test_copy = X_test.copy()\n\n    # Scale columns if needed\n    if scale == True:\n        scale_cols = ['age', \n                      'trestbps', \n                      'chol', \n                      'thalach', \n                      'oldpeak']\n        \n        # If any features are dropped from feature selection we need to account for that\n        scale_cols = list(set(selected_features) & set(scale_cols))\n        \n        # Define scaler to use\n        scaler = scaler\n\n        # Apply scaling\n        X_train_copy.loc[:, scale_cols] = scaler.fit_transform(X_train[scale_cols])\n        X_test_copy.loc[:, scale_cols] = scaler.transform(X_test[scale_cols])\n      \n    # Return train and tests\n    return X_train_copy, X_test_copy, y_train, y_test","08efbcff":"def select_model(X_train, y_train, cv=3, nruns=3, scorer='recall'):\n    \n    '''Function helper to automate selection of best baseline model without hyperparameter tuning'''\n\n    record_scorer = []\n    iter_scorer = []\n    model_name = []\n    model_accuracy = []\n\n    # Specify estimators\n    estimators = [('logistic_regression' , LogisticRegression()), \n                  ('random_forest' , RandomForestClassifier(n_estimators=100)),\n                  ('lightgbm' , LGBMClassifier(n_estimators=100)), \n                  ('xgboost' , XGBClassifier(n_estimators=100))]\n\n\n    scorer = scorer\n    \n    # Iterate through the number of runs. Default is 3.\n    for run in range(nruns):\n        print('Running iteration %s with %s as scoring metric' % ((run + 1), scorer))\n\n        for name, estimator in estimators:\n\n            print('Fitting %s model' % name)\n\n            # Run cross validation\n            cv_results = cross_val_score(estimator, X_train, y_train, cv=cv, scoring=scorer)\n\n            # Append all results in list form which will be made into a dataframe at the end.\n            iter_scorer.append((run + 1))\n            record_scorer.append(scorer)\n            model_name.append(name)\n            model_accuracy.append(cv_results.mean())\n\n        print()\n\n    # Use ordered dictionary to set the dataframe in the exact order of columns declared.\n    results = pd.DataFrame(OrderedDict({'Iteration' : iter_scorer, \n                                        'Scoring Metric' : record_scorer, \n                                        'Model' : model_name, \n                                        'Model Accuracy' : model_accuracy}))\n    \n    # Pivot to view results in a more aesthetic form\n    results_pivot = results.pivot_table(index=['Iteration', 'Scoring Metric'], columns=['Model'])\n    \n    # Display the results\n    print('\\nFinal results : ')\n    display(results_pivot)\n\n    # Get the mean performance\n    performance = results_pivot.apply(np.mean, axis=0)\n    performance = performance.reset_index()\n    performance.columns = ['metric', 'model', 'performance']\n    \n    # Get the mean performance\n    performance = results_pivot.apply(np.mean, axis=0)\n    performance = performance.reset_index()\n    performance.columns = ['metric', 'model', 'performance']\n    best_model = performance.loc[performance['performance'].idxmax()]['model']\n\n    # Return the pivot \n    return results_pivot, best_model","2f3fb123":"def tune_model(X_train, X_test, y_train, y_test, best_model, scorer='recall'):\n    \n    # Define parameters for each model\n    grid = {'logistic_regression' : {'model' : LogisticRegression(class_weight='balanced', random_state=42), \n                                    'params' : {'C' : [0.01, 0.1, 1, 10, 100]}},\n\n            'random_forest' : {'model' : RandomForestClassifier(class_weight='balanced', random_state=42), \n                            'params' : {'n_estimators' : [100, 200, 300], \n                                        'max_depth' : [3, 5, 7], \n                                        'max_features' : ['log2', 5, 'sqrt']}},\n\n            'lightgbm' : {'model' : LGBMClassifier(class_weight='balanced', random_state=42), \n                        'params' : {'n_estimators' : [100, 200, 300], \n                                    'max_depth' : [3, 5, 7], \n                                    'boosting_type' : ['gbdt', 'dart', 'goss']}},\n\n            'xgboost' : {'model' : XGBClassifier(nthread=-1), \n                        'params' : {'n_estimators' : [100, 200, 300], \n                                    'max_depth' : [3, 5, 7], \n                                    'scale_pos_weight' : [5, 10, 20]}}                        \n                                \n        }\n\n    # Select the best model\n    model = grid[best_model]['model']\n\n    # Define the grid\n    params = grid[best_model]['params']\n\n    # 3 Fold Cross Validation\n    grid = GridSearchCV(model, cv=3, param_grid=params, scoring=scorer, n_jobs=-1, verbose=2)\n    grid.fit(X_train, y_train)\n    \n\n    return(grid)","b5a9f72c":"def model_performance(X_train, X_test, y_train, y_test, grid):\n      \n    # Select the model with the best paramters\n    model = grid.best_estimator_\n\n    # Fit the model on the data\n    model.fit(X_train, y_train)\n    \n\n    # Get the training predictions\n    train_predictions = model.predict(X_train)\n    test_predictions = model.predict(X_test) \n    \n    # Get the train and test probabilities\n    train_probabilities = model.predict_proba(X_train)[:, 1]\n    test_probabilities = model.predict_proba(X_test)[:, 1]\n\n    # Get the accuracy for train and test\n    print('Accuracy score for training is : %s' % accuracy_score(y_train, train_predictions))\n    print('Accuracy score for testing is : %s' % accuracy_score(y_test, test_predictions))\n    \n    # Get the classification report for train and test\n    print('\\nClassification report for training is : \\n%s' % classification_report(y_train, train_predictions))\n    print('Classification report for testing is : \\n%s' % classification_report(y_test, test_predictions))\n    \n    # Get the confusion matrix for train and test\n    print('\\nConfusion matrix for training is : \\n%s' % confusion_matrix(y_train, train_predictions))\n    print('Confusion matrix for testing is : \\n%s' % confusion_matrix(y_test, test_predictions))\n    \n    # Get the ROC AUC for train and test\n    print('\\nROC AUC score for training is : %s' % roc_auc_score(y_train, train_probabilities))\n    print('ROC AUC score for testing is : %s' % roc_auc_score(y_test, test_probabilities))","9c3aab98":"df = pd.read_csv('..\/input\/heart.csv')","ad5f2604":"df.shape","eeca4079":"# Summary statistic\ndf.describe()","3dfe6fc8":"# Data types of columns\ndf.dtypes","56647e90":"# Distribution of target\ndf['target'].value_counts([0])","93b4f8aa":"df.isnull().sum()","db287b2e":"# first few rows of data\ndf.head()","a958d06b":"plot_dist(df, 'age', 'target')","81ac5c86":"plot_dist(df, 'sex', 'target', 'cat')","fa9b401a":"plot_dist(df, 'cp', 'target', 'cat')","2780f4e8":"plot_dist(df, 'trestbps', 'target')","0ebd82cc":"plot_dist(df, 'chol', 'target')","8b08d157":"plot_dist(df, 'fbs', 'target', 'cat')","ff6c448d":"plot_dist(df, 'restecg', 'target', 'cat')","899124fe":"plot_dist(df, 'thalach', 'target')","1a849840":"plot_dist(df, 'exang', 'target', 'cat')","bc4ac1aa":"plot_dist(df, 'oldpeak', 'target')","a01fdccb":"plot_dist(df, 'slope', 'target', 'cat')","853788b3":"plot_dist(df, 'ca', 'target', 'cat')","a741a8a5":"plot_dist(df, 'thal', 'target', 'cat')","23704238":"# Get the train and test datasets\nX_train, X_test, y_train, y_test = process_data(df, test_size=0.3, random_state=100, scale=True, scaler=MinMaxScaler(), feature_selection=True, k=10)","7f9a4b6f":"# View the train dataset\nX_train.head()","e90f096c":"# View the test dataset\nX_test.head()","a935b359":"# Display results of each model\nresults_pivot, best_model = select_model(X_train, y_train, cv=5, nruns=10, scorer='balanced_accuracy')\nresults_pivot","d6001d6d":"# Print and tune the best model\nprint('Tuning model for {}'.format(best_model))\ngrid = tune_model(X_train, X_test, y_train, y_test, best_model, scorer='balanced_accuracy')\ngrid","04e201b8":"# Display model performance\nmodel_performance(X_train, X_test, y_train, y_test, grid)","70712882":"### 3. Import the required dataset\n\nIdeally I keep paths at the config section. This is an exception as I am dealing with a single file only here. Also, I always use relative paths as it becomes easier when distributing code. ","4227c44e":"#### 4.2 Statistics","c74c9d7c":"#### 5.5 Chol","e5c5543c":"### 7. Model Performance\n\nMy go-to metrics for evaluating classification models are:\n\n**Accuracy(unreliable in cases of skewed class proportions of target), classification report showing precision\/recall\/f1, confusion matrix and roc_auc_score.**\n\nYou may want to look at other metrics such as lift, kappa etc","567cb610":"#### 5.10 Oldpeak","83ee7177":"### 4. About the data : \n\nDepending on the type of data, you may want to see additional things other than shape, describe, dtypes, value_counts and missing values.","e390a5c2":"#### 5.12 Ca","dcb1225f":"#### 5.3 CP","c2a83be6":"#### 5.8 Thalach","fc0a10fe":"### Motivation\n\nBit late to the party but the COVID crisis has given me sufficient time to do the things I love to do :) That being said I have a few other ulterior motives as well releasing this kernel :D. What I have noticed in my career in Data Science, is that beginners or enthusiasts who want to step into this field are often mislead by bootcamp courses offering them to magically transform them into a competent data science in **X** days\/months (insert relevant term advertised by specific bootcamp company). Well this kernel aims to showcase two things on the Heart Disease Prediction dataset:\n\n1. A starter kernel showing basic steps in a classification problem. Although, even kaggle datasets do not really portray the true picture of messy datasets in the industry, but I have tried to depict my typical process approaching a classification problem.\n\n2. Coding conventions! Even some experienced coders not adhering to this. Typically, I would have even broken this kernel down to 3 different kernels - Data Prep, EDA, Modelling. But for the sake of posterity, I have made a single kernel. Comments have been inserted at relevant places to explain the logic, docstrings for functions have been added, markdowns to segment the code have all been done to show newcomers the importance of writing structured and clean code. Markdowns are your friend, especially if you use kernels\/notebooks!\n\nHopefully, this kernel helps someone! \n\n**PS : You can play around with the code and achieve a higher accuracy than the one in this kernel, but that was not the intent of this kernel**","c49f1968":"#### 5.6 Fbs","ce447034":"#### 5.13 Thal","79c96939":"#### 4.3 Types of Columns","f5b726c7":"### 5. Exploratory Data Analysis\n\nFor numerical columns, density\/histogram plots are used. For categorical columns, bar plots are used. You may want to see other kind of plots such as corelation plots, boxplots etc too.","1304dee8":"#### 5.9 Exang","c2b927ed":"#### 5.7 Restecg","84b2b7a6":"### 6. Model Building\n\nThis block specifies the training process which is quite simple. The pipeline is:\n**Split train\/test -> Find best baseline model -> Tune parameters of best baseline model -> Evaluate model performance.**\n\nAlmost all data pipelines are of similar structure. I haven't tried other techniques like stacking here. You may also want to look into that!","e4ae63c5":"#### 5.2 Sex","ef0ba1a1":"### 2. Set configurations\n\nYou would want to specify the settings for your kernel\/notebook at the top. Also specify the constants (if any) like paths to files. Here, since its only one file we are working with, this is not necessary.","261f263b":"#### 4.4 Target Proportion","aa6dbe78":"#### 4.5 Missing Values","3a6b30e9":"#### 6.1 Split into train and test","ebb43f7e":"### 1. Import required libraries\nKeep all your imports at the top! This clearly shows the reader which libraries you have used.","d987702d":"### 2. Write User-Defined Functions\n\nMy rule is, if I have to repeat a piece of code more than twice, I functionize them. Always include a docstring with your function. Here, all the data processing\/modelling related functions have a lot of parameters which enable the reader to experiment with a variety of settings. Need a different train\/test split? No problem, change the random_state in the function! Need a different scorer? Not to worry! Use the parameter scorer in the functions...","75a82ace":"#### 6.2 Best baseline model","0d9b7dfd":"#### 4.1 Shape","2200ce7a":"#### 5.11 Slope","038065a8":"#### 5.1 Age","1333c398":"#### 5.4 Trestbps","f28cd764":"#### 4.6 Display head","d07e66b2":"#### 6.3 Hyperparameter Tuning"}}