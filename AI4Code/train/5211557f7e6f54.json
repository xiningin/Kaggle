{"cell_type":{"38d82446":"code","26726461":"code","65233715":"code","38432efb":"code","d15e9857":"code","024d30a8":"code","84a38c39":"code","a861969a":"code","ee49670e":"code","afc7d456":"code","7e6e6893":"code","87a1ca8f":"code","fa363a5a":"code","5959f58d":"code","fe32ec86":"code","91028938":"code","ceb88adb":"code","5fca8957":"code","0b05f14b":"code","15045855":"code","70cbb64e":"code","26972183":"code","ea120632":"code","bc721b6a":"code","b68dc2ce":"code","044d6e81":"code","48e6f8fa":"code","d6c1cc34":"code","5661cf71":"code","0fc71e4f":"code","883ad351":"code","f61ce68e":"code","7caa4f3b":"code","3fe55bda":"code","d0e168bc":"code","6d475c1a":"code","2d6846c6":"code","fdd9fcae":"code","324b6f6c":"code","21433f23":"code","a7c0418b":"code","9792f044":"code","4093a07a":"code","e850ee4b":"code","d7a821ac":"code","badb417a":"code","82ecbb58":"code","728b91df":"code","a82a3218":"code","22a2574f":"code","93cbd1ec":"code","49c03267":"code","11dd1cf6":"markdown","9665d7b7":"markdown","314d4c42":"markdown","fbe8ed8a":"markdown","0c430581":"markdown","6b913936":"markdown","29908c68":"markdown","ffc4e36e":"markdown","149dd074":"markdown","4173ef38":"markdown","1b7d2da0":"markdown","0500561f":"markdown","67cb4c8e":"markdown"},"source":{"38d82446":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nsns.set_style(\"whitegrid\")\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26726461":"train = pd.read_csv('\/kaggle\/input\/adult-pmr3508\/train_data.csv', na_values = \"?\")\ntest = pd.read_csv('\/kaggle\/input\/adult-pmr3508\/test_data.csv', na_values = \"?\")","65233715":"# First five rows of dataframe\ntrain.head()","38432efb":"print(f'train shape: (rows, columns) -> {train.shape}')","d15e9857":"# types\ntrain.dtypes","024d30a8":"# describe\ntrain.describe()","84a38c39":"train.head()","a861969a":"def bar_chart(feature, stack=True):\n    less = train[train['income']== \"<=50K\"][feature].value_counts()\n    more = train[train['income']== \">50K\"][feature].value_counts()\n    da = pd.DataFrame([less, more])\n    da.index = [\"<=50K\", \">50K\"]\n    da.plot(kind = \"bar\", stacked = stack)\n    plt.xticks(rotation = 0)\n    return plt.show()","ee49670e":"train.head()","afc7d456":"bar_chart(\"workclass\")\n\n# most are private","7e6e6893":"bar_chart(\"education\")\n\n# most are HS-grad and Some-college","87a1ca8f":"bar_chart(\"marital.status\")\n\n# diff between <=50K and >50K: (i) Never-married ~= Married-civ-spouse; (ii) Married-civ-spouse much large than Never-married and Divorced","fa363a5a":"(train.groupby([\"income\", \"marital.status\"])\n      .size())","5959f58d":"bar_chart(\"occupation\")\n\n# distributed","fe32ec86":"bar_chart(\"relationship\")\n# >50K: Husband much more","91028938":"bar_chart(\"race\")\n\n# white > black in both cases, more data about white? yeah, more data, but in","ceb88adb":"# yeah, much more data about white people\n(train.groupby(\"race\")\n      .size())","5fca8957":"# and more data about >50K\n(train.groupby(\"income\")\n      .size())","0b05f14b":"# proportion - is the same!!! more black people in <=50K\n(train.groupby([\"income\", \"race\"])\n      .size()\n      .groupby(level = 0)\n      .apply(lambda x: 100 * x \/ float(x.sum())))","15045855":"bar_chart(\"sex\")\n# more distributed in <=50K, imbalanced in >50K, much more male than female","70cbb64e":"(train.groupby([\"income\", \"native.country\"])\n      .size()\n      .reset_index(name = \"count\")\n      .sort_values(\"count\", ascending = False))","26972183":"def dist_plot(feature):\n    less = train[train['income']== \"<=50K\"][feature]\n    more = train[train['income']== \">50K\"][feature]\n    da = pd.DataFrame({f\"<=50K {str(feature)}\": less, f\">50K {str(feature)}\": more})\n    da.plot(kind = \"kde\")\n    return plt.show()","ea120632":"dist_plot(\"capital.gain\")\n# difficult to compare","bc721b6a":"dist_plot(\"capital.loss\")","b68dc2ce":"dist_plot(\"hours.per.week\")\n# equivalent? ","044d6e81":"# numeric features\nsns.heatmap(train.corr(), cmap=plt.cm.Reds, annot= True)","48e6f8fa":"train.head()","d6c1cc34":"# % of NaN by column\n(train.isna().sum() \/ train.shape[0]) * 100","5661cf71":"train.age.describe()","0fc71e4f":"train[[\"age\"]].plot(kind = \"hist\", title = \"Distribution of Age - all dataset\")","883ad351":"train.query(\"income == '<=50K'\")[\"age\"].plot(kind = \"hist\", title = \"Distribution of Age - <=50K\")","f61ce68e":"train.query(\"income == '>50K'\")[\"age\"].plot(kind = \"hist\", title = \"Distribution of Age - >50K\")","7caa4f3b":"train[\"education.num\"].describe()","3fe55bda":"def boxplot(feature, x = None):\n    \n    ax = sns.boxplot(x = x, y = feature, data = train)\n    \n    return ax","d0e168bc":"boxplot(\"fnlwgt\", \"income\")\n\n# a lot of outliers","6d475c1a":"boxplot(\"education.num\", \"income\")\n\n# very diff between income","2d6846c6":"boxplot(\"age\", \"income\")","fdd9fcae":"boxplot(\"hours.per.week\", \"income\")\n\n# basically only outliers......","324b6f6c":"boxplot(\"capital.gain\", \"income\")","21433f23":"boxplot(\"capital.loss\", \"income\")","a7c0418b":"def get_categ(idade):\n    if idade <= 21:\n        return 0\n    elif idade <= 31:\n        return 1\n    elif idade <= 41:\n        return 2\n    elif idade <= 60:\n        return 3\n    else: \n        return 4\n\ndef dataprep(df, t_df):\n    \n    # dummies for `sex` column\n    sexcols = pd.get_dummies(df.sex, prefix = \"sex\")\n    df = pd.concat([df, sexcols], axis = 1)\n   \n    if t_df == \"train\":\n        # mapping income\n        income_map = {\"<=50K\": 0, \">50K\": 1}\n        df[\"income\"] = df[\"income\"].map(income_map)\n        df = df.dropna()\n        \n    # new column\n    df[\"capital.diff\"] = df[\"capital.gain\"].values - df[\"capital.loss\"].values\n    \n    # transform `age` column in intervals\n    df['age'] = df['age'].apply(get_categ)\n    \n    # drop useless cols\n    df = df.drop(columns = [\"capital.gain\", \"capital.loss\", \"education\", \"sex\", \"native.country\"])\n    \n    # label encoding for categorical features\n    not_categ = [\"id\", \"age\", \"fnlwgt\", \"capital.diff\", \"education.num\", \"hours.per.week\", \"income\"]\n    categorical = set(df.columns) - set(not_categ)\n         \n    if t_df == \"test\":\n        df = df.replace(np.nan, \"NaN\")\n        \n    label_encoder = LabelEncoder()\n\n    for feature in categorical:\n        df[feature] = label_encoder.fit_transform(df[feature])\n\n    # normalization for numerical features\n    scaler = StandardScaler()\n    feat = [\"fnlwgt\", \"capital.diff\", \"hours.per.week\", \"age\", \"education.num\"]\n    df[feat] = scaler.fit_transform(df[feat])\n    \n    # change . to _ on feature names\n    df.columns = [col.replace(\".\", \"_\") for col in df.columns.to_list()]\n    return df","9792f044":"da = dataprep(train, \"train\")\nda.head()","4093a07a":"target = da.income.values\ndata = da.drop(columns = [\"Id\", \"income\"])","e850ee4b":"parameters = {\"n_neighbors\": range(10, 30),\n             \"weights\": [\"uniform\", \"distance\"],\n             \"metric\": [\"euclidean\", \"manhattan\"]}\n\ngridsearch = GridSearchCV(KNeighborsClassifier(), parameters, cv = 5, n_jobs = -1)\ngridsearch.fit(data.values, target)","d7a821ac":"metric, n_neighbors, weights = gridsearch.best_params_['metric'], gridsearch.best_params_['n_neighbors'], gridsearch.best_params_['weights']","badb417a":"gridsearch.best_score_","82ecbb58":"knn = KNeighborsClassifier(n_neighbors= n_neighbors, weights = weights, metric = metric)\nscores = cross_val_score(knn, data.values, target)\nscores.mean()","728b91df":"X_train, X_test, y_train, y_test = train_test_split(data.values, target, test_size = .33, random_state = 119)","a82a3218":"# train metrics\nknn.fit(X_train, y_train)\ntrain_pred = knn.predict(X_train)\nrmse_train = np.sqrt(mean_squared_error(y_train, train_pred))\nrmse_train","22a2574f":"# test metrics\ntest_pred = knn.predict(X_test)\nrmse_test = np.sqrt(mean_squared_error(y_test, test_pred))\nrmse_test","93cbd1ec":"def submission():\n    da_test = dataprep(test, \"test\").set_index(\"Id\")\n    \n    ypred = knn.predict(da_test)\n    \n    submi = pd.DataFrame(data= {\"Id\":da_test.index,\"income\": pd.Series(ypred)})\n    \n    submi[\"income\"] = submi[\"income\"].map({0: \"<=50K\", 1: \">50K\"})\n    \n    submi.to_csv(\"predictions.csv\",index = False)","49c03267":"submission()","11dd1cf6":"## Outliers","9665d7b7":"### Estudando intervalo para a feature `age`\n","314d4c42":"### Density curve based on income","fbe8ed8a":"## Aplicando o melhor numero de vizinhos achado no KNN","0c430581":"# An\u00e1lise da rela\u00e7\u00e3o entre as features\n\n### Bar chart divide by income (target)","6b913936":"# Predi\u00e7\u00e3o e Submiss\u00e3o ","29908c68":"# KNN Model","ffc4e36e":"### Correlation","149dd074":"### Missing data\n\nless than 10% of missing data on three columns only, I'll drop it","4173ef38":"## Aplica\u00e7\u00f5es de Dataprep","1b7d2da0":"# Leitura e dados b\u00e1sicos sobre o `train_data.csv`","0500561f":"#### GridSearch","67cb4c8e":"# Dataprep"}}