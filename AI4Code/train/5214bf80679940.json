{"cell_type":{"f66f2437":"code","c67a51dd":"code","c9bb901c":"code","d9387268":"code","a2fe2e3e":"code","6417c302":"code","3617166e":"code","38a54842":"code","450f7b58":"code","aa5edfe0":"code","85c7520d":"code","f85f6517":"code","2abfbf99":"code","5d73f0fa":"code","81b56c08":"code","609eebeb":"code","2d729e7e":"code","afbdb5de":"code","007a39df":"code","50be6535":"code","a12a8a4e":"code","0241f538":"code","959c5334":"code","b4ff6243":"code","ac200cb7":"code","d39de12d":"code","5dc148e9":"code","a1a2f304":"code","6bc0ca22":"code","9ab5a85d":"code","1ba87e55":"code","898ec0f3":"code","f41bf552":"code","8d4e5073":"code","9bbc735f":"code","9b4cf7a4":"code","bae1c184":"code","61e46573":"code","4a427b24":"code","de42bd5e":"markdown","2eb6bb94":"markdown","e0ead1f3":"markdown","2c0f80fe":"markdown","f525ab14":"markdown","15580228":"markdown","9781cdca":"markdown","71628ad0":"markdown","dbccc011":"markdown","7c1f83ae":"markdown","9c707347":"markdown","cb4f9a2b":"markdown","45613f89":"markdown","5f7c9866":"markdown"},"source":{"f66f2437":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c67a51dd":"import matplotlib.pyplot as plt # display images\nimport cv2 # read and resize the images\nfrom sklearn.utils import shuffle # clutter up the images\nfrom sklearn.model_selection import train_test_split # create test and train sets\n\n# Model\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications.vgg16 import VGG16 # pretrained model\n\n# Evaluation\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","c9bb901c":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","d9387268":"directory = '\/kaggle\/input\/doom-crossing\/'\n\nos.listdir(directory)","a2fe2e3e":"folders = ['doom', 'animal_crossing']","6417c302":"doom_images = []\n\nfor image_file in os.listdir(directory+folders[0]):\n    image = cv2.imread(directory+folders[0]+'\/'+image_file)\n    doom_images.append(image)","3617166e":"plt.imshow(doom_images[4])\nplt.title('image with ' + str(doom_images[4].shape) + ' pixels')","38a54842":"plt.imshow(doom_images[8])\nplt.title('image with ' + str(doom_images[8].shape) + ' pixels')","450f7b58":"shapes = []\n\nfor image in doom_images:\n    shapes.append((image.shape[0], image.shape[1]))\n\ndf_sizes = pd.DataFrame(shapes, columns=['height','width'])\ndf_sizes.describe()","aa5edfe0":"plt.imshow(doom_images[8])\nplt.title('pre-reshape')\nplt.show()\n\nresize = cv2.resize(doom_images[8],(150,200))\nplt.imshow(resize)\nplt.title('new shape')\nplt.show()","85c7520d":"del doom_images\ndel shapes\ndel df_sizes","f85f6517":"def get_images(directory, folders):\n    \n    Images = []\n    Labels = []\n    \n    for label in folders:\n        \n        target = [0,0]\n        \n        if label == 'doom':\n            target[0]=1\n        else:\n            target[1]=1\n        \n        for image_file in os.listdir(directory + label):\n            image = cv2.imread(directory+ label + '\/' + image_file)\n            image = cv2.resize(image,(224,224))\n            Images.append(image)\n            Labels.append(target)\n        \n       \n    return shuffle(Images,Labels,random_state=817328462)\n        ","2abfbf99":"Images, Labels = get_images(directory, folders)","5d73f0fa":"Labels[:5]","81b56c08":"Images = np.array(Images)\nLabels = np.array(Labels)","609eebeb":"# transform values\nImages = Images\/255","2d729e7e":"Images[0]","afbdb5de":"plt.imshow(Images[0])\nplt.title(Labels[0])\nplt.show()","007a39df":"print('Images shape: ',Images.shape)\nprint('Labels shape: ',Labels.shape)","50be6535":"Images[0].shape","a12a8a4e":"X_train, X_test, y_train, y_test = train_test_split(Images, Labels, test_size=0.20, random_state=42)","0241f538":"print('Train data shape: ',X_train.shape)\nprint('Train target shape: ',y_train.shape)","959c5334":"print('Test data shape: ',X_test.shape)\nprint('Test target shape: ',y_test.shape)","b4ff6243":"base_model = VGG16(weights='imagenet', include_top=False) # remove the top of the model\n\nbase_model.trainable = False","ac200cb7":"base_model.summary()","d39de12d":"model = keras.Sequential([\n    base_model,\n    layers.GlobalAveragePooling2D(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(2, activation='softmax')\n])","5dc148e9":"opt_adam = keras.optimizers.Adam(epsilon=0.001)\nopt_sgd = tf.keras.optimizers.SGD(learning_rate=0.001)\nmodel.compile(\n    optimizer=opt_adam,\n    loss='categorical_crossentropy',\n    metrics=['categorical_accuracy'],\n)","a1a2f304":"early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)","6bc0ca22":"history = model.fit(\n    X_train,\n    y_train,\n    epochs=200,\n    validation_split=0.15,\n    callbacks=[early_stopping]\n)","9ab5a85d":"plt.plot(history.history['categorical_accuracy'])\nplt.plot(history.history['val_categorical_accuracy'])\nplt.title('model categorical_accuracy')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show","1ba87e55":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show","898ec0f3":"predicts_matrix = model.predict(X_test)\npredicts_matrix[0]","f41bf552":"np.argmax(predicts_matrix[0])","8d4e5073":"def calculate_max(predicts_softmax):\n    predicts = []\n\n    for predict in predicts_softmax:\n        max_position = np.argmax(predict)\n    \n        if max_position == 0:\n            predicts.append([1,0])\n        else:\n            predicts.append([0,1])\n    \n    return predicts\n\npredicts = calculate_max(predicts_matrix)\npredicts[0]","9bbc735f":"# preciReport\nprint(classification_report(y_test, predicts, target_names=['doom', 'animal_crossing']))","9b4cf7a4":"print('Accuracy model: ', accuracy_score(y_test, predicts))","bae1c184":"def show_prediction(image, prediction):\n    \n    max_position = np.argmax(prediction)\n    \n    if max_position == 0:\n        label = 'Doom'\n    else:\n        label = 'Animal Crossing'\n        \n        \n    plt.imshow(image)\n    plt.title(label)\n    plt.show()","61e46573":"show_prediction(X_test[6], predicts[6])","4a427b24":"model.save('model_doom_crossing_v4.h5')","de42bd5e":"# Model","2eb6bb94":"# Testing","e0ead1f3":"Transform the images with np","2c0f80fe":"# Create two set to train and test","f525ab14":"## Resizing the images","15580228":"## Looking how search image in kaggle","9781cdca":"# Loading all the data\n\nFunction based in https:\/\/www.kaggle.com\/uzairrj\/beg-tut-intel-image-classification-93-76-accur\/notebook","71628ad0":"## Looking how the images look like","dbccc011":"# Looking the data","7c1f83ae":"All the images have different sizes, So you need reshape all the images\n\n* For doom images min shape are (177, 230)\n\n* For animal_crossing iamges min shape are (194, 263)\n","9c707347":"# Save Model","cb4f9a2b":"# Evaluation","45613f89":"# Use TPU acceleration","5f7c9866":"# Pre-trained model"}}