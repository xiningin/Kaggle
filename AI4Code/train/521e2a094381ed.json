{"cell_type":{"dd0e74f2":"code","5677d09f":"code","72938223":"code","4e71a221":"code","9a3521e3":"code","981fa3a9":"code","99d1edb6":"code","4161c581":"code","0755dbf7":"code","c7bebefc":"code","f0ad7e53":"code","05540299":"code","e222f981":"code","6d976098":"code","1e4c6a8e":"code","d69190bb":"code","3a3b9eb9":"code","3bc590f3":"code","dc88c76c":"code","2214b4fe":"code","4581f29d":"code","5e384436":"code","275d9d1c":"code","1f0a403c":"code","85c05fd9":"code","778a90eb":"code","102e9f95":"code","fef0dad4":"code","bf3d4cb6":"code","dc7c296b":"code","49e3ac09":"code","578942cd":"code","79b49399":"code","58fba711":"code","c512dbe7":"code","cc2c822a":"code","2afbbe6f":"code","76b2cd12":"code","8680795d":"code","1b1013cb":"code","33c49ab9":"code","c42d0bcb":"code","a1e95635":"code","a2325c1d":"code","e95ba96e":"code","15e61d4e":"code","c56bf37d":"code","fbd30b46":"code","fd8e1669":"code","ad8cbcca":"code","9b8536ad":"markdown","d910a209":"markdown","116836eb":"markdown","2defd501":"markdown","f8fee5f1":"markdown","c012b8de":"markdown"},"source":{"dd0e74f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5677d09f":"insurance_df = pd.read_csv('..\/input\/insurance.csv')","72938223":"insurance_df.head(5)","4e71a221":"insurance_df.shape","9a3521e3":"insurance_df.info()","981fa3a9":"insurance_df.describe()","99d1edb6":"insurance_df.isna().sum()","4161c581":"list(insurance_df)","0755dbf7":"insurance_df[insurance_df.duplicated()]","c7bebefc":"insurance_df=insurance_df.drop_duplicates()","f0ad7e53":"import seaborn as sns","05540299":"ax = sns.boxplot(x=insurance_df[\"bmi\"])","e222f981":"ax = sns.boxplot(x=insurance_df[\"expenses\"])","6d976098":">>> ax = sns.boxplot(data=insurance_df)","1e4c6a8e":"lower_bnd = lambda x: x.quantile(0.25) - 1.5 * ( x.quantile(0.75) - x.quantile(0.25) )","d69190bb":"upper_bnd = lambda x: x.quantile(0.75) + 1.5 * ( x.quantile(0.75) - x.quantile(0.25) )","3a3b9eb9":"insurance_df = insurance_df[(insurance_df['expenses'] >= lower_bnd(insurance_df['expenses'])) & (insurance_df['expenses'] <= upper_bnd(insurance_df['expenses'])) ] ","3bc590f3":"insurance_df.shape","dc88c76c":"insurance_df = insurance_df[(insurance_df['bmi'] >= lower_bnd(insurance_df['bmi'])) & (insurance_df['bmi'] <= upper_bnd(insurance_df['bmi'])) ] ","2214b4fe":"insurance_df.shape","4581f29d":"insurance_df.corr()","5e384436":"sns.pairplot(insurance_df)","275d9d1c":"sns.scatterplot(x=insurance_df['bmi'],y=insurance_df['expenses'],hue=insurance_df['smoker'])","1f0a403c":"insurance_df['region'].unique()","85c05fd9":"sns.pairplot(insurance_df,hue = 'smoker')","778a90eb":"sns.pairplot(data=insurance_df,hue = 'sex')","102e9f95":"sns.pairplot(data=insurance_df,hue = 'region')","fef0dad4":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ninsurance_df.iloc[:, 1] = labelencoder.fit_transform(insurance_df.iloc[:, 1])\ninsurance_df.iloc[:, 4] = labelencoder.fit_transform(insurance_df.iloc[:, 4])\ninsurance_df.iloc[:, 5] = labelencoder.fit_transform(insurance_df.iloc[:, 5])","bf3d4cb6":"insurance_df.corr()","dc7c296b":"from sklearn.linear_model import LinearRegression  \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error, r2_score","49e3ac09":"insurance_df.head(5)","578942cd":"modelinput = insurance_df.drop(columns=['expenses','region'],axis=1)\nmodeloutput = insurance_df['expenses']","79b49399":"from sklearn import preprocessing\nmodelinput = preprocessing.StandardScaler().fit(modelinput).transform(modelinput.astype(float))","58fba711":"X_train,X_test,Y_train, Y_test = train_test_split(modelinput,modeloutput,test_size=0.3,random_state=123)","c512dbe7":"lm = LinearRegression()","cc2c822a":"lm.fit(X_train,Y_train)","2afbbe6f":"print(\"Intercept value:\", lm.intercept_)\nprint(\"Coefficient values:\", lm.coef_)","76b2cd12":"Y_train_predict = lm.predict(X_train)\nY_test_predict = lm.predict(X_test)","8680795d":"print(\"MSE Train:\",mean_squared_error(Y_train, Y_train_predict))\nprint(\"MSE Test:\",mean_squared_error(Y_test, Y_test_predict))","1b1013cb":"print(\"RMSE Train:\",np.sqrt(mean_squared_error(Y_train, Y_train_predict)))\nprint(\"RMSE Test:\",np.sqrt(mean_squared_error(Y_test, Y_test_predict)))","33c49ab9":"print('MAE Train', mean_absolute_error(Y_train, Y_train_predict))\nprint('MAE Test', mean_absolute_error(Y_test, Y_test_predict))","c42d0bcb":"print('R2 Train',r2_score(Y_train, Y_train_predict))\nprint('R2 Test',r2_score(Y_test, Y_test_predict))","a1e95635":"from sklearn.preprocessing import Imputer\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import accuracy_score","a2325c1d":"accuracy_dict = {}\naccuracy_list = []\nfor K in range(50):\n    K_value = K + 1\n    neigh = KNeighborsRegressor(n_neighbors=K_value,weights='uniform',algorithm='auto')\n    neigh.fit(X_train, Y_train)\n    y_pred=neigh.predict(X_test)\n    accuracy = r2_score(Y_test, y_pred)\n    accuracy_dict.update({K_value:accuracy})\n    accuracy_list.append(accuracy)\n    print(\"Accuracy is\",r2_score(Y_test, y_pred)*100,\"% for K-Value\",K_value)","e95ba96e":"key_max = max(accuracy_dict.keys(), key=(lambda k: accuracy_dict[k]))\n\nprint( \"The Accuracy value is \",accuracy_dict[key_max], \"with k= \", key_max)","15e61d4e":"elbow_curve = pd.DataFrame(accuracy_list,columns = ['accuracy'])\nelbow_curve.plot()\n\n","c56bf37d":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\ndt = DecisionTreeRegressor(max_depth=4) \ndt.fit(X_train, Y_train)\ny_pred = dt.predict(X_test)\nprint(r2_score(Y_test, y_pred)*100)","fbd30b46":"for i in range(1, 20):\n    print('Accuracy score using max_depth =', i, end = ': ')\n    dt = DecisionTreeRegressor(max_depth=i)\n    dt.fit(X_train, Y_train)\n    y_pred = dt.predict(X_test)\n    print(r2_score(Y_test, y_pred)*100)","fd8e1669":"for i in ['auto','sqrt','log2',0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]:\n    print('Accuracy score using max_features =', i, end = ': ')\n    dt = DecisionTreeRegressor(max_depth=4,max_features=i)\n    dt.fit(X_train, Y_train)\n    y_pred = dt.predict(X_test)\n    print(r2_score(Y_test, y_pred)*100)","ad8cbcca":"for i in range(2, 10):\n    print('Accuracy score using min_samples_split =', i, end = ': ')\n    dt = DecisionTreeRegressor(max_depth=4,max_features=0.8,min_samples_split=i)\n    dt.fit(X_train, Y_train)\n    y_pred = dt.predict(X_test)\n    print(r2_score(Y_test, y_pred)*100)","9b8536ad":"Features","d910a209":"min_samples_split","116836eb":"# Removing bmi outliers","2defd501":"# Above plots shows only expenses and bmi have outliers","f8fee5f1":"# Removing expenses outliers","c012b8de":"Depth"}}