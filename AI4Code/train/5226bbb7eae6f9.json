{"cell_type":{"a6ffc585":"code","32b3a417":"code","78f9a4ed":"code","03ff793c":"code","109a00c1":"code","45df5cdd":"code","4aafbe78":"code","02fb88c5":"code","4256ac29":"code","e8e550c9":"code","9807a9a8":"code","b3ec61ea":"code","2ad76ee5":"code","5e5d1a0d":"code","a0c90c81":"code","bbadb6af":"code","34beac99":"code","8e1c9eb8":"code","56472bef":"code","dd58b02a":"code","72bc40d3":"markdown","b80e551b":"markdown","09861339":"markdown","9f76f46f":"markdown","bab76193":"markdown","0523d19d":"markdown","c1cf882c":"markdown","582aec72":"markdown","a85ea0bd":"markdown","c7c58f9e":"markdown","f2f0e546":"markdown","687cf7ec":"markdown","5c63ffc1":"markdown","a21a7247":"markdown","7dded4b7":"markdown","2fc65c3b":"markdown","bce11164":"markdown","2ac3081c":"markdown","153508f7":"markdown","6f64f6aa":"markdown","7729b8e6":"markdown","037eb4c9":"markdown","7d02509b":"markdown","fea76417":"markdown","e5e82718":"markdown","9e5b909c":"markdown","f7bd2542":"markdown"},"source":{"a6ffc585":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32b3a417":"import matplotlib.pyplot as plt\nimport seaborn as sns","78f9a4ed":"# Reading the data\ndf = pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')\ndf.head()","03ff793c":"# Relevant info about all the attributes\ndf.info()","109a00c1":"# Information about the numeric attributes\ndf.describe()","45df5cdd":"# Number of unique values of each attribute\nprint(df.nunique())","4aafbe78":"# Unique values\nprint(df['diet'].unique())\nprint(df['flavor_profile'].unique())\nprint(df['course'].unique())\nprint(df['region'].unique())\nprint(df['state'].unique())","02fb88c5":"# Turning the ingredients entry into list instead of a single string\ningredients = []\n\nfor row in range(len(df)):\n    ing = df['ingredients'][row].replace(\" \", \"\").split(',')\n    ingredients.append(ing)\n    \ndf['ingredients'] = ingredients\ndf.head()","4256ac29":"# Identifying the null value\ndf[df['region'].isnull()]","e8e550c9":"df[df['state'] == 'Uttar Pradesh']","9807a9a8":"# # Correcting the entry and checking if it worked\ndf['region'] = df['region'].replace(np.nan, 'North')\ndf[df['state'].isnull()]","b3ec61ea":"# Replacing weird entries with values that makes more sense\ndf['prep_time'] = df['prep_time'].replace(-1, 0)\ndf['cook_time'] = df['cook_time'].replace(-1, 0)\ndf['flavor_profile'] = df['flavor_profile'].replace('-1', 'others')\ndf['region'] = df['region'].replace('-1', 'Others')\ndf['state'] = df['state'].replace('-1', 'Others')\n\nprint(df['flavor_profile'].unique())\nprint(df['region'].unique())\nprint(df['state'].unique())\nprint(df.describe())","2ad76ee5":"# Lists that will be filled with each ingredient value, repeated or not\nEast = []\nWest = []\nNorth = []\nOthers = []\nNorthEast = []\nSouth = []\nCentral = []\n\n# Filling the lists\nfor row in range(len(df)):\n    if df['region'][row] == 'East':\n        East.extend(df['ingredients'][row])\n    if df['region'][row] == 'West':\n        West.extend(df['ingredients'][row])\n    if df['region'][row] == 'North':\n        North.extend(df['ingredients'][row])\n    if df['region'][row] == 'North East':\n        NorthEast.extend(df['ingredients'][row])\n    if df['region'][row] == 'South':\n        South.extend(df['ingredients'][row])\n    if df['region'][row] == 'Central':\n        Central.extend(df['ingredients'][row])\n    if df['region'][row] == 'Others':\n        Others.extend(df['ingredients'][row])\n\n# Series witch include each unique ingredient value\nall_ing = pd.Series(East+West+North+Others+NorthEast+South+Central).unique()\n\n# Lists that will store the number of times each ingredient appears\nEastC = []\nWestC = []\nNorthC = []\nOthersC = []\nNorthEC = []\nSouthC = []\nCentralC = []\n\n# Filling the lists\nfor ingredient in all_ing:\n    EastC.append(East.count(ingredient))\n    WestC.append(West.count(ingredient))\n    NorthC.append(North.count(ingredient))\n    OthersC.append(Others.count(ingredient))\n    NorthEC.append(NorthEast.count(ingredient))\n    SouthC.append(South.count(ingredient))\n    CentralC.append(Central.count(ingredient))\n\n# Creating the dataset with the values collected\ning_per_region = pd.DataFrame({'East': EastC, 'West': WestC, 'North': NorthC, 'Others': OthersC, 'North East': NorthEC,\n                               'South': SouthC, 'Central': CentralC}, index=all_ing) \n\n# Adding a column with the sum of all the other columns\ning_per_region['Sum'] = (ing_per_region['East'] + ing_per_region['West'] + ing_per_region['North'] + ing_per_region['Others'] \n                        + ing_per_region['North East'] + ing_per_region['South'] + ing_per_region['Central'])\n\ning_per_region.head()","5e5d1a0d":"# Plotting the frequency of appearence graphs\nplt.figure(figsize=(12,16))\n\nfor n, region in enumerate(ing_per_region.columns):\n    ordered = ing_per_region.sort_values([region], ascending=False)[0:10]\n    plt.subplot(4, 2, n+1)\n    sns.barplot(x=ordered[region], y=ordered.index, orient='h')\n    plt.xlabel('Count')\n    plt.title(f'{region} Ingredient Frequency')\n    \nplt.tight_layout()\nplt.show()","a0c90c81":"plt.figure(figsize=(12,8))\n\nfor n, region in enumerate(ing_per_region.columns):\n    if region == 'Sum':\n        plt.subplot(2, 4, n+1)\n        sns.histplot(df['course'])\n        plt.title(f'{region} Course Distribution')\n        plt.xticks(rotation=45)\n    else:\n        plt.subplot(2, 4, n+1)\n        sns.histplot(df[df['region'] == region]['course'])\n        plt.title(f'{region} Course Distribution')\n        plt.xticks(rotation=45)\n    \nplt.tight_layout()\nplt.show()","bbadb6af":"df['Time'] = df['prep_time'] + df['cook_time']\ndf.head()","34beac99":"snack = df.loc[(df['Time'] != 0) & (df['course'] == 'snack')]\ndessert = df.loc[(df['Time'] != 0) & (df['course'] == 'dessert')]\nmain = df.loc[(df['Time'] != 0) & (df['course'] == 'main course')]\nstarter = df.loc[(df['Time'] != 0) & (df['course'] == 'starter')]\n\nfast_snacks = snack.sort_values(['Time'], ascending=True)[0:10]\nfast_desserts = dessert.sort_values(['Time'], ascending=True)[0:10]\nfast_main = main.sort_values(['Time'], ascending=True)[0:10]\nfast_starter = starter.sort_values(['Time'], ascending=True)[0:10]\n\nplt.figure(figsize=(12,8))\n\nplt.subplot(2,2,1)\nsns.barplot(x=fast_snacks['Time'], y=fast_snacks['name'], orient='h')\nplt.title('Top 10 Fastest Snacks')\n\nplt.subplot(2,2,2)\nsns.barplot(x=fast_starter['Time'], y=fast_starter['name'], orient='h')\nplt.title('Top 10 Fastest Starters')\n\nplt.subplot(2,2,3)\nsns.barplot(x=fast_main['Time'], y=fast_main['name'], orient='h')\nplt.title('Top 10 Fastest Main Courses')\n\nplt.subplot(2,2,4)\nsns.barplot(x=fast_desserts['Time'], y=fast_desserts['name'], orient='h')\nplt.title('Top 10 Fastest Desserts')\n\nplt.tight_layout()\nplt.show()","8e1c9eb8":"plt.figure(figsize=(12,4))\nsns.histplot(df['flavor_profile'])\nplt.title('Flavor Profile Distribution')\n\nplt.show()","56472bef":"Sweet = []\nSpicy = []\nBitter = []\nOthers = []\nSour = []\n\nfor row in range(len(df)):\n    if df['flavor_profile'][row] == 'sweet':\n        Sweet.extend(df['ingredients'][row])\n    if df['flavor_profile'][row] == 'spicy':\n        Spicy.extend(df['ingredients'][row])\n    if df['flavor_profile'][row] == 'bitter':\n        Bitter.extend(df['ingredients'][row])\n    if df['flavor_profile'][row] == 'others':\n        Others.extend(df['ingredients'][row])\n    if df['flavor_profile'][row] == 'sour':\n        Sour.extend(df['ingredients'][row])\n    \nall_ing = pd.Series(Sweet+Spicy+Bitter+Others+Sour).unique()\n\nSweetC = []\nSpicyC = []\nBitterC = []\nOthersC = []\nSourC = []\n\nfor ingredient in all_ing:\n    SweetC.append(Sweet.count(ingredient))\n    SpicyC.append(Spicy.count(ingredient))\n    BitterC.append(Bitter.count(ingredient))\n    OthersC.append(Others.count(ingredient))\n    SourC.append(Sour.count(ingredient))\n    \ning_per_flavor = pd.DataFrame({'Sweet': SweetC, 'Spicy': SpicyC, 'Bitter': BitterC, 'Others': OthersC, 'Sour': SourC},\n                              index=all_ing)\n\ning_per_flavor.head()","dd58b02a":"plt.figure(figsize=(12,12))\n\nfor n, flavor in enumerate(ing_per_flavor.columns):\n    ordered = ing_per_flavor.sort_values([flavor], ascending=False)[0:10]\n    plt.subplot(4, 2, n+1)\n    sns.barplot(x=ordered[flavor], y=ordered.index, orient='h')\n    plt.xlabel('Count')\n    plt.title(f'{flavor} Ingredient Frequency')\n    \nplt.tight_layout()\nplt.show()","72bc40d3":"# Initial Data Exploration <a id=\"IDE\"><\/a>","b80e551b":"**For the -1 values, I'll just do simple replaces.** ","09861339":"Now let's check what we get in the plots.","9f76f46f":"With the dataset created it's time for the plots.","bab76193":"For this analysis I'll be adding a new column to our first dataset that will give us the sum of preparation time and cooking time.","0523d19d":"There are plenty other information that could be extracted from this dataset, but I selected only what I thought would be most interesting to know. So for this analysis this is it! ","c1cf882c":"As mentioned before the amount of starter courses in the dataset is really low, it seems that there are only two starters in our whole dataset...\n\nBesides that, all the other course categories presented a nice range of short timed options!\n\nI did some research and here is a little list of what I plan to be cooking myself:\n* Snacks: Papadum (similar to tortillas) and Pani puri (fried bun filled with vegetables).\n* Main Courses: Koshimbir (salad), Galho (found it as Naga Galho, a juicy rice vegetable mix) and Shukto (vegetable curry).\n* Desserts: Modak (coconut filled bun), Sukhdi (biscuit).\n\nMy choices were based on how easy it would be to get the ingredients and how tasty it looked to me, so you may want to check the options by yourself and choose what suits you best.\n","582aec72":"By looking at the distribution of dishes through the flavor profiles, it gets evident that our analysis will be more fruitful if it's focused on the sweet and spicy flavors, since those are the ones that appear the most in the dataset.\n\nThis information by itself indicates that the indian cuisine is mostly filled with spicy and sweet dishes, or that our dataset misrepresents the amount of bitter and sour dishes. Indian food is commonly known for how hot it can get, so my bets are in the former proposition. \n\nSince it would be really easy to, I'll be including the rest of the flavors in the analysis just in case there are any insights I may miss. \n\nNow let's create our ingredients per flavor dataset.","a85ea0bd":"Our null value is from the Uttar Pradesh state, let's verify if there are any other meals from this state so we can check their region.","c7c58f9e":"Looking at the basic information, it seems that the data needs some formatting: \n* The ingredients column in specific could use some changes, I'll be switching it from a single string to a list of strings in order to navigate it better. \n* There's a null value in the 'region' column, but since there aren't any null values for state, I believe I'll be able to fill this entry out based on the other data. \n* Both the flavor profile, region and state columns present a -1 value, I'll change it to 'others' for now since I don't know what might be the correct entry.\n* There are also -1 values in the preparation time and cooking time columns, I'll switch them to 0s so they are easier to handle. \n\nWith that taken out of the way I'll start the analysis, the topics of analysis will be:\n* [Checking what ingredients are most used in each region.](#IPR)\n* [Analysing preparation + cooking time for each course group.](#T10S)\n* [Identifying what are the ingredients that define each flavor profile.](#WIDFP)","f2f0e546":"Everything looking good! With that taken out of the way let's start the analysis.","687cf7ec":"**Now let's fix our only null value.**","5c63ffc1":"In this last part of the analysis I'll be using the same coding structure as for the ingredients per region section. The only thing I'll change is that I'll be looking at the distribution of flavor profiles before I create our new dataset, to see what we can extract from it prior to our main focus in the analysis.  ","a21a7247":"As I thought these regions have a lot of dessert recipes related to it, causing the count of sugar in it to be really high. This doesn't necessarily mean these regions use more sugar in their recipes, since of the course distribution. A conclusion we can take from it though is that most indian desserts have sugar in it. \n\nAnother hipothesis we can formulate from our graphs is that the ingredient, garammasala, is most used in the North region. With this same logic we could infer the North East region uses more mustardoil and the South uses a lot of curry leaves.\n\nUnfornatelly the amount of plates in the central region was to little for the analysis to make sense...\n\nAnother important thing these graphs show us is that our dataset have a really small amount of starter courses, this will probably show up in our next analysis topic.","7dded4b7":"For this analysis I'll create a new dataset allowing me to check the frequency with witch the ingredients appears in each region.","2fc65c3b":"# First Thoughts <a id=\"FT\"><\/a>","bce11164":"First of all it's important to remember that this dataset doesn't include information about the frequency each of these dishes are consumed in India. Therefore, this analysis will be based solely in the frequency that the ingredients show throughout the recipes for each region, and may be biased depending on how well this dataset represent the indian diet.\n\nWith that in mind, our graphs can be pretty telling, the East, West and Other regions show a high count of sugar. This may be related to the amount of desserts in there. Let's check it out by observing the course distributions through each region.","2ac3081c":"# Index\n* [Initial Data Exploration](#IDE)\n* [First Thoughts](#FT)\n* [Data Preparation](#DP)\n* [Ingredients per Region](#IPR)\n* [Top 10 Shortest Meals per Course](#T10S)\n* [What Ingredients Define the Flavor Profile](#WIDFP)","153508f7":"# Top 10 Shortest Overall Time Meal per Course <a id=\"T10S\"><\/a>","6f64f6aa":"# Imports","7729b8e6":"With this dataset created, we can now easily plot the graphs that will show us what we are seeking.","037eb4c9":"# Data Preparation <a id=\"DP\"><\/a>","7d02509b":"# Ingredients per Region <a id=\"IPR\"><\/a>","fea76417":"# What Ingredients Define the Flavor Profile <a id=\"WIDFP\"><\/a>","e5e82718":"As I thought, the **bitter** and **sour** flavor profiles don't tell us much, mostly because of the frequency that they appear in the dataset.\n\nIn the other hand the **sweet** and **spicy** flavors show us some interesting patterns!\n\nThe **sweet** profile is, *not surprisingly*, lead by sugar and the third place is a sugar concentrate. In the second position there is ghee, a clarified butter. This three ingredients on the top of our list allow us to imply that if we try an indian dessert it have a high chance of being a buttery sweet dish. \n\nThe **spicy** profile is, *surprisingly*, lead by ginger, an ingredient that is not spicy on it's own. Just like the ghee in the sweet profile, that is not sweet, these ingredients tell us about the composition of the dishes instead of what actually grant them that flavor profile. The second and third positions though, are held by garam masala and curry leaves, ingredients that will surely make the dish hotter. I will also mention urad dal, beans, and tomato as they are the first two non-spice ingredients. From this information, we could expect our average spicy indian dish to be a hot tomato sauce filled with flavor and beans.   ","9e5b909c":"All the meals from Uttar Pradesh are from the North region, I'll fill the null entry with North.","f7bd2542":"**I'll first deal with the ingredients column.**"}}