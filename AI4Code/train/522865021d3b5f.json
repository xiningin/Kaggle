{"cell_type":{"b0a32590":"code","d14a3e78":"code","c272e094":"code","8bf68d93":"code","81ecdb1d":"code","a53ffed1":"code","d55f9b65":"code","255a98a9":"code","690c60bd":"code","f6f145af":"code","084db1b0":"code","35986088":"markdown"},"source":{"b0a32590":"import os\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras import layers","d14a3e78":"class CustomDataset(tf.keras.utils.Sequence):\n    def __init__(self, df, directory, batch_size=32, random_state=42, shuffle=True, target=True, ext='.npy'):\n        np.random.seed(random_state)\n        \n        self.directory = directory\n        self.df = df\n        self.shuffle = shuffle\n        self.target = target\n        self.batch_size = batch_size\n        self.ext = ext\n        \n        self.on_epoch_end()\n    \n    def __len__(self):\n        return np.ceil(self.df.shape[0] \/ self.batch_size).astype(int)\n    \n    def __getitem__(self, idx):\n        start_idx = idx * self.batch_size\n        batch = self.df[start_idx: start_idx + self.batch_size]\n        \n        signals = []\n\n        for fname in batch.id:\n            path = os.path.join(self.directory, fname + self.ext)\n            data = np.load(path)\n            signals.append(data)\n        \n        signals = np.stack(signals).astype('float32')\n        \n        if self.target:\n            return signals, batch.target.values\n        else:\n            return signals\n    \n    def on_epoch_end(self):\n        if self.shuffle:\n            self.df = self.df.sample(frac=1).reset_index(drop=True)","c272e094":"def build_model():\n    inputs = layers.Input(shape=(27, 128))\n\n    gru1 = layers.Bidirectional(layers.GRU(128, return_sequences=True), name='gru_1')\n    gru2 = layers.Bidirectional(layers.GRU(128, return_sequences=True), name='gru_2')\n    pool1 = layers.GlobalAveragePooling1D(name='avg_pool')\n    pool2 = layers.GlobalMaxPooling1D(name='max_pool')\n\n    x = gru1(inputs)\n    x = gru2(x)\n    x = tf.keras.layers.Concatenate()([pool1(x), pool2(x)])\n    \n    x = layers.Dense(256, activation=\"relu\")(x)\n    x = layers.Dense(128, activation=\"relu\")(x)\n    x = layers.Dense(1, activation=\"sigmoid\", name=\"sigmoid\")(x)\n\n    model = tf.keras.Model(inputs=inputs, outputs=x)\n    \n    return model","8bf68d93":"train = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\nsub = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')\ntrain.head()","81ecdb1d":"sample_df = train.sample(frac=1).reset_index(drop=True)\n\nsplit = int(sample_df.shape[0] * 0.8)\ntrain_df = sample_df[:split]\nvalid_df = sample_df[split:]","a53ffed1":"train_dset = CustomDataset(\n    train_df, '..\/input\/g2net-n-mels-128-train-images', batch_size=64)\n\nvalid_dset = CustomDataset(\n    valid_df, '..\/input\/g2net-n-mels-128-train-images', batch_size=64, shuffle=False)\n\ntest_dset = CustomDataset(\n    sub, \"..\/input\/g2net-n-mels-128-test-images\", batch_size=64, target=False, shuffle=False)","d55f9b65":"model = build_model()\nmodel.compile(\"adam\", loss=\"binary_crossentropy\", metrics=[tf.keras.metrics.AUC()])\nmodel.summary()","255a98a9":"ckpt = tf.keras.callbacks.ModelCheckpoint(\n    \"model_weights.h5\", save_best_only=True, save_weights_only=True,\n)\n\ntrain_history = model.fit(\n    train_dset, \n    use_multiprocessing=True, \n    workers=4, \n    epochs=10,\n    validation_data=valid_dset,\n    callbacks=[ckpt],\n)","690c60bd":"model.load_weights('model_weights.h5')","f6f145af":"y_pred = model.predict(\n    test_dset, use_multiprocessing=True, workers=4, verbose=1\n)","084db1b0":"sub['target'] = y_pred\nsub.to_csv('submission.csv', index=False)","35986088":"Training Notebook for the G2Net competition. This implements a Bi-directional GRU using Keras, using preprocessed spectrogram.\n\nThis uses Yasufumi Nakama's spectrogram preprocessing notebooks and datasets:\n* Train: [Notebook](https:\/\/www.kaggle.com\/yasufuminakama\/g2net-spectrogram-generation-train), [Dataset](https:\/\/www.kaggle.com\/yasufuminakama\/g2net-n-mels-128-train-images)\n* Test: [Notebook](https:\/\/www.kaggle.com\/yasufuminakama\/g2net-spectrogram-generation-test), [Dataset](https:\/\/www.kaggle.com\/yasufuminakama\/g2net-n-mels-128-test-images)"}}