{"cell_type":{"72369e86":"code","099a4f6c":"code","4fdf4ff1":"code","71de672c":"code","405630fd":"code","927b0250":"code","5569dfa7":"code","2cb0def6":"code","4bc40b4e":"code","7d39b5ee":"code","30887d19":"code","e9157bbe":"code","9cf8da55":"code","b91d16d0":"code","4406a5e6":"code","0fd2d74d":"code","07a1d0e7":"code","8ca073fa":"code","b3c34ed3":"code","18ad65eb":"code","bc577b7e":"code","127179bd":"code","df352d03":"code","bb4edfa3":"code","4d24a1ec":"code","bfd607f0":"code","c5fc6d4b":"code","8ef45837":"code","f7f752a9":"code","777633c8":"code","bc36ee4e":"markdown","6bbc42a1":"markdown","441b6bd3":"markdown","b94a5950":"markdown","2d4b1913":"markdown","fd55902b":"markdown","297778d3":"markdown","fe5b8174":"markdown","a0cf97d8":"markdown","808eaf43":"markdown","276c02d6":"markdown","d2c29498":"markdown","b796d3c6":"markdown","ef12708d":"markdown","bb54fa7c":"markdown","6372280d":"markdown","3edfae7c":"markdown"},"source":{"72369e86":"# Importa as libs e conecta com o json\n\nimport requests\nimport pandas as pd\nfrom pandas.io.json import json_normalize\n\n# A API tem pagina\u00e7\u00e3o a cada 1.000 registros, portando \u00e9 necess\u00e1rio percorrer a pagina\u00e7\u00e3o.\n\nincremento = []\n\nurl = 'https:\/\/brasil.io\/api\/dataset\/covid19\/caso\/data?format=json'\n\nwhile url:\n    response = requests.get(url)\n    data = response.json()\n    url = data['next']\n    incremento += data['results']\n\n# Normaliza os dados  \ndados = json_normalize(incremento)","099a4f6c":"dados.shape","4fdf4ff1":"dados.head(10)","71de672c":"dados.dtypes","405630fd":"dados = dados.set_index('date')","927b0250":"dados.head()","5569dfa7":"dados.index","2cb0def6":"# Utiliza\u00e7\u00e3o da fun\u00e7\u00e3o loc para filtrar\n# cidades diferentes de Nulo\n# Permanece o datafame dados com todas as datas.\n\ndados = dados.loc[dados.city.notnull()]","4bc40b4e":"# Utiliza\u00e7\u00e3o da fun\u00e7\u00e3o loc para filtrar\n# is_last for Verdadeiro.\n\ndados_cidades = dados.loc[dados.is_last == True]","7d39b5ee":"dados_cidades","30887d19":"dados_cidades.sort_values(by=['confirmed'], ascending=False)","e9157bbe":"# Armazena a \u00faltima data\n\n# Com a utiliza\u00e7\u00e3o do is_last = True essa vari\u00e1vel n\u00e3o est\u00e1 sendo utilizada agora. Continuo mantendo no documento para uma posterior utiliza\u00e7\u00e3o.\n\nmax_date = dados_cidades.index.max()","9cf8da55":"# Somamos o total de casos confirmados.\n\ndados_cidades.confirmed.sum()","b91d16d0":"# Somamos o total de \u00f3bitos.\n\ndados_cidades.deaths.sum()","4406a5e6":"por_estado = dados_cidades.groupby(['state'])['confirmed', 'deaths'].max().sort_values(by=['confirmed'], ascending=False)","0fd2d74d":"por_estado","07a1d0e7":"# Optamos por listar as 10 cidades com maior n\u00famero de casos.\n\npor_cidade_confirmados = dados_cidades.groupby(['city'])['confirmed', 'deaths'].max().sort_values(by=['confirmed'], ascending=False).head(10)","8ca073fa":"# Para a listagem de \u00f3bitos, estamos listados todas as cidades com ocorr\u00eancias.\n\npor_cidade_obitos = dados_cidades.where(dados_cidades.deaths > 0).groupby(['city'])['confirmed', 'deaths'].max().sort_values(by=['deaths'], ascending=False)","b3c34ed3":"por_cidade_obitos","18ad65eb":"# Utiliza\u00e7\u00e3o do dataframe dados que cont\u00eam todas as datas.\n\npor_data = dados.groupby(['date'])['confirmed', 'deaths'].sum().reset_index()","bc577b7e":"por_data.sort_values(by=['date'], ascending=False)","127179bd":"import matplotlib.pyplot as plt\n# Display figures inline in Jupyter notebook\n\nimport matplotlib.dates as mdates","df352d03":"# Dados Confirmados por Estado.\n\nax = por_estado['confirmed'].plot.bar(color='C0')\nax.set_ylabel('Casos')\n#ax.set_ylim(0, 0.3)\nax.set_title('Casos Confirmados por Estado')\n\n\nplt.xticks(rotation=0);","bb4edfa3":"# \u00d3bitos por Estado.\n\nax = por_estado['deaths'].plot.bar(color='C0')\nax.set_ylabel('Mortes')\n#ax.set_ylim(0, 0.3)\nax.set_title('\u00d3bitos por Estado')\nplt.xticks(rotation=0);","4d24a1ec":"# Dados Confirmados por cidade.\n\nax = por_cidade_confirmados['confirmed'].plot.barh(color='C0')\nax.set_ylabel('Cidade')\nax.invert_yaxis()\nax.set_title('Casos Confirmados por Cidade')\nax.set_xlabel(\"N\u00ba Casos\");\n\n# Esse c\u00f3digo precisa de refatora\u00e7\u00e3o.\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.1, i.get_y()+.31, \\\n            str(round((i.get_width()), 2)), color='dimgrey')\n\nplt.xticks(rotation=0);\n","bfd607f0":"# \u00d3bitos por cidade.\n\nax = por_cidade_obitos['deaths'].plot.barh(color='C0')\nax.set_ylabel('Cidade')\nax.invert_yaxis()\nax.set_title('\u00d3bitos por Cidade')\nax.set_xlabel(\"N\u00ba \u00d3bitos\");\n\n# Esse c\u00f3digo precisa de refatora\u00e7\u00e3o.\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.1, i.get_y()+.31, \\\n            str(round((i.get_width()), 2)), color='dimgrey')\n\nplt.xticks(rotation=0);","c5fc6d4b":"# Por data\n\nax = por_data['confirmed'].plot.line(color='C0')\nax.set_ylabel('Casos')\nax.set_title('Linha do tempo - Casos Confirmados')\n\nplt.xticks(rotation=0);","8ef45837":"import plotly.graph_objects as go\n\n# Plotly Express\nimport plotly.express as px","f7f752a9":"fig = px.line(por_data, x=\"date\", y=\"confirmed\",\n              labels={'y':'N\u00ba Confirmados'},\n              title='Casos Confirmados')\n\nfig.show()","777633c8":"fig = px.line(por_data, x=\"date\", y=\"deaths\",\n              labels={'y':'N\u00ba Confirmados'},\n              title='\u00d3bitos')\nfig.show()","bc36ee4e":"# Gr\u00e1ficos em Matplotlib","6bbc42a1":"Ordena o dataset pelo campo `confirmed` do maior para o menor.","441b6bd3":"Total de \u00d3bitos.","b94a5950":"Uitliza\u00e7\u00e3o dos dados consolidados e disponibilizados pelo coletivo [Brasil.io](https:\/\/brasil.io\/dataset\/covid19\/caso)\n\nOs dados cont\u00eam os Boletins Informativos de casos do coronav\u00edrus por munic\u00edpio e por dia.","2d4b1913":"Listagem de casos Confirmados por **Cidade** *em ordem decrescente*.","fd55902b":"Agora podemos visualizar o `DateTimeIndex` como um array.","297778d3":"Visualiza\u00e7\u00e3o dos 5 primeiros registros.","fe5b8174":"Listagem de casos Confirmados por **Estado** *em ordem decrescente*.","a0cf97d8":"Total de casos Confirmados.","808eaf43":"Lista os registros em que o campo `city` n\u00e3o \u00e9 Nulo (NaN).","276c02d6":"# Gr\u00e1ficos em Plotly","d2c29498":"**Organiza\u00e7\u00e3o e tratamento dos dados para que eles fiquem dispon\u00edveis para as An\u00e1lises.**","b796d3c6":"# **Observat\u00f3rio COVID-19 Brasil**","ef12708d":"Transfora o campo `data` no Index do dataset.","bb54fa7c":"# An\u00e1lise Explorat\u00f3ria dos Dados","6372280d":"Listagem dos dados sem os registros em que o campo **city** \u00e9 `Nulo`.","3edfae7c":"Para conhecer mais sobre essa iniciativa clique aqui https:\/\/github.com\/turicas\/covid19-br\n\nA licen\u00e7a do c\u00f3digo \u00e9 [LGPL3](https:\/\/www.gnu.org\/licenses\/lgpl-3.0.en.html) e dos dados convertidos [Creative Commons Attribution ShareAlike](https:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/).\n\nFonte: Secretarias de Sa\u00fade das Unidades Federativas, dados tratados por \u00c1lvaro Justen\/[Brasil.IO](https:\/\/brasil.io\/)."}}