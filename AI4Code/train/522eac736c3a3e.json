{"cell_type":{"8d6fbd90":"code","7061692a":"code","16d130b8":"code","1e8ffdae":"code","6c5d3db9":"code","729cf428":"code","1aa52cfb":"code","e95956cf":"code","bc3621f5":"code","b68fc888":"code","b1001609":"code","835d96a8":"code","32d57377":"markdown","753c04ec":"markdown"},"source":{"8d6fbd90":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import  tqdm\nprint(os.listdir(\"..\/input\"))\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten,GlobalAvgPool2D\nfrom keras.layers import Conv2D, MaxPooling2D\nimport keras\nfrom keras.preprocessing import image\nfrom keras.applications.vgg19 import VGG19\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications import xception\nfrom keras.applications import inception_v3\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import log_loss, accuracy_score","7061692a":"df = pd.read_csv(\"..\/input\/labels.csv\")\ndf.info()","16d130b8":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncat = le.fit_transform(df.breed)\nfrom keras.utils.np_utils import to_categorical\nmat = to_categorical(cat)","1e8ffdae":"import cv2\ndef readImgResize(name,path):\n    img = cv2.imread(path+name)\n    img = cv2.resize(img,(150,150))\n    return image.img_to_array(img)","6c5d3db9":"training_data = np.zeros(shape=(len(df.id),150,150,3))\nfor i,j in tqdm(enumerate(df.id)):\n    training_data[i]=readImgResize(j+\".jpg\",path=\"..\/input\/train\/\")\n    \n    ","729cf428":"X_train, X_test, y_train, y_test = train_test_split( training_data, mat, test_size=0.05, random_state=11)","1aa52cfb":"del training_data, mat","e95956cf":"from keras.applications import InceptionV3\nfrom keras.models import Model\nfrom keras.optimizers import adam\nnum_class = 120\nim_size = 150\nbase_model = VGG19(weights='imagenet', include_top=False, input_shape=(im_size, im_size, 3))\n\n# Add a new top layer\nx = base_model.output\nx = Flatten()(x)\npredictions = Dense(num_class, activation='softmax')(x)\n\n# This is the model we wi`l train\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# First: train only the top layers (which were randomly initialized)\nfor layer in base_model.layers:\n    layer.trainable = False\n\nmodel.compile(adam(lr=0.00001),loss='categorical_crossentropy', \n              metrics=[\"accuracy\"])\n\ncallbacks_list = [keras.callbacks.EarlyStopping(monitor='val_acc', patience=3, verbose=1)]\nmodel.summary()","bc3621f5":"model.fit(X_train\/255, y_train, epochs=25, validation_data=(X_test\/255, y_test), verbose=1)\nmodel.save(\"breed_vgg19.h5\")","b68fc888":"from keras.models import load_model\ndel X_train,X_test\nte = os.listdir(\"..\/input\/test\/\")\nte_in = np.zeros((len(te),150,150,3))\nfor num , i in enumerate(te):\n    img = readImgResize(i,path=\"..\/input\/test\/\")\/255\n    te_in[num]=img\n    \npred = model.predict(te_in)\n","b1001609":"submission = pd.DataFrame(pred , columns =le.classes_.tolist())\nsubmission[\"id\"]=[i.split(\".\")[0] for i in os.listdir(\"..\/input\/test\/\")]\nsubmission = submission[[\"id\"]+submission.columns[:-1].tolist()]","835d96a8":"submission.sort_values(by=['id'])\nsubmission.to_csv(\"submission.csv\",index = False)","32d57377":"As the loss of training and validation doesn't differ much, the model is underfit and required more epochs. ","753c04ec":"In this notebook I am going to use VGG19 to generate features and train a softmax layer for classification of dog breeds."}}