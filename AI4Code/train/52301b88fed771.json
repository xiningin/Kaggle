{"cell_type":{"fb6793f2":"code","4b577726":"code","c83e50ea":"code","fe149b18":"code","767a09cc":"code","b35bf400":"code","aaaefebb":"code","c7639a62":"code","a0bb2f7b":"code","65746793":"code","8fc1a2bb":"code","65a61da8":"code","2c124f8a":"code","9ce62f83":"code","707951c2":"code","c65a6038":"code","5b23f440":"code","6d695987":"code","80f7fef5":"code","0e468e78":"code","a8025f49":"code","7edbc20c":"code","a0794eb4":"code","085fff1c":"code","3d8beb30":"code","e85cd5bf":"code","a91be534":"code","227580e6":"code","324477bf":"code","c4d20a79":"code","83692c0f":"code","23b6a029":"code","1f4b46b8":"code","21711f0b":"code","b0784b6c":"code","06c62eaa":"code","95801458":"code","78719be3":"code","9251c9ad":"code","2b1aaffc":"code","13114d40":"code","ef5e7914":"code","db466d7e":"code","51537e11":"code","0c039bb3":"code","1efe1e1c":"code","80872a25":"code","a6676824":"code","7ae3220c":"code","8548cc3c":"code","aa5c9a4f":"code","78b2107a":"code","8187a35c":"code","92f82081":"code","ca87a0c7":"code","9b4914a8":"code","ae6ff357":"code","47209ae7":"code","2d18ec87":"markdown","ce815832":"markdown","0ac24cbb":"markdown","467d3e91":"markdown","7a9a13c0":"markdown","79cee204":"markdown"},"source":{"fb6793f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b577726":"test=pd.read_csv('\/kaggle\/input\/demo-int257-ca2\/test.csv',na_values=\"?\")\ntrain=pd.read_csv('\/kaggle\/input\/demo-int257-ca2\/train.csv',na_values=\"?\")\ntrain.head()","c83e50ea":"test.head()","fe149b18":"train.isnull().sum()","767a09cc":"test.isnull().sum()","b35bf400":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","aaaefebb":"train['carnames']=le.fit_transform(train['carnames'])\ntest['carnames']=le.fit_transform(test['carnames'])","c7639a62":"test.head(1)","a0bb2f7b":"test.dtypes","65746793":"from sklearn.impute import SimpleImputer\nsi=SimpleImputer(strategy='most_frequent')\nsi2=SimpleImputer(strategy='mean')","8fc1a2bb":"train=si.fit_transform(train)\ntest=si.fit_transform(test)\ntrain1=si2.fit_transform(train)\ntest1=si2.fit_transform(test)","65a61da8":"train=pd.DataFrame(train)\ntest=pd.DataFrame(test)","2c124f8a":"train.isnull().sum()","9ce62f83":"test.head()","707951c2":"train.head()","c65a6038":"train.head()","5b23f440":"test.head()","6d695987":"tar_train=train[1]\ndata_train=train.drop(columns=[1])","80f7fef5":"train1=pd.DataFrame(train1)\ntest1=pd.DataFrame(test1)","0e468e78":"tar1_train=train1[1]\ndata1_train=train1.drop(columns=[1])","a8025f49":"tar_train.head()","7edbc20c":"data_train.head()","a0794eb4":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()","085fff1c":"#for train data\ndata_train=sc.fit_transform(data_train)\npd.DataFrame(data_train).head()","3d8beb30":"#for test data\ndata_test=test\ndata_test=sc.fit_transform(data_test)\n\n\npd.DataFrame(data_test).head()","e85cd5bf":"#target of test\ntar_test=pd.read_csv('\/kaggle\/input\/demo-int257-ca2\/sample_sol.csv',na_values=\"?\")\ntar_test=tar_test.drop(columns=['carid'])\ntar_test=np.array(tar_test)\ntar_test","a91be534":"tar_train.head()","227580e6":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()","324477bf":"#training\nlr.fit(data_train,tar_train)","c4d20a79":"from sklearn.metrics import mean_squared_error,r2_score","83692c0f":"pred_train_lr=lr.predict(data_train)\nprint(mean_squared_error(pred_train_lr,tar_train))\nprint(r2_score(pred_train_lr,tar_train))","23b6a029":"lr.fit(data1_train,tar_train)","1f4b46b8":"print(mean_squared_error(lr.predict(data1_train),tar_train))\nprint(r2_score(lr.predict(data1_train),tar_train))","21711f0b":"#testing","b0784b6c":"pred_test_lr=lr.predict(data_test)","06c62eaa":"print(mean_squared_error(pred_test_lr,tar_test))\nprint(r2_score(pred_test_lr,tar_test))","95801458":"from sklearn.preprocessing import PolynomialFeatures\npoly=PolynomialFeatures()","78719be3":"p_train_d=poly.fit_transform(data_train)\np_test_d=poly.fit_transform(data_test)","9251c9ad":"#Train\npl=LinearRegression()\npl.fit(p_train_d,tar_train)","2b1aaffc":"pred_train_pl=pl.predict(p_train_d)","13114d40":"print(mean_squared_error(pred_train_pl,tar_train))\nprint(r2_score(pred_train_pl,tar_train))","ef5e7914":"#Testing\npred_test_pl=pl.predict(p_test_d)","db466d7e":"print(mean_squared_error(pred_test_pl,tar_test))\nprint(r2_score(pred_test_pl,tar_test))","51537e11":"from sklearn.tree import DecisionTreeRegressor\ndt=DecisionTreeRegressor()","0c039bb3":"#train\ndt.fit(data_train,tar_train)","1efe1e1c":"pred_train_dt=dt.predict(data_train)","80872a25":"print(mean_squared_error(pred_train_dt,tar_train))\nprint(r2_score(pred_train_dt,tar_train))","a6676824":"#testing","7ae3220c":"pred_test_dt=dt.predict(data_test)\nprint(mean_squared_error(pred_test_dt,tar_test))\nprint(r2_score(pred_test_dt,tar_test))","8548cc3c":"from sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor()","aa5c9a4f":"#training\nrf.fit(data_train,tar_train)","78b2107a":"pred_train_rf=rf.predict(data_train)","8187a35c":"print(mean_squared_error(pred_train_rf,tar_train))\nprint(r2_score(pred_train_rf,tar_train))","92f82081":"#testing","ca87a0c7":"pred_test_rf=rf.predict(data_test)","9b4914a8":"print(mean_squared_error(pred_test_rf,tar_test))\nprint(r2_score(pred_test_rf,tar_test))","ae6ff357":"pd.DataFrame(pred_test_rf).to_csv('Final_another.csv')","47209ae7":"tar_test.shape","2d18ec87":"## Poly","ce815832":"## MEan one","0ac24cbb":"## Linear Regression ","467d3e91":"## Random Forest","7a9a13c0":"## to csv","79cee204":"## Decision tree regressor"}}