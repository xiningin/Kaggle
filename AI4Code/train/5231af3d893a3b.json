{"cell_type":{"fd6cffa4":"code","4fea17f2":"code","7ab46de0":"code","bf7a95e1":"code","73afbea4":"code","aaed5078":"code","60b6e962":"code","9cb3f4d3":"code","3044c6b3":"code","82409175":"code","dbcd703d":"code","5652e155":"code","44bf0f8d":"code","5a8ab776":"code","391ce8d2":"code","f07ad2a6":"markdown","43792dfd":"markdown","f49ab4e8":"markdown"},"source":{"fd6cffa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fea17f2":"# basic imports\nimport sklearn\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","7ab46de0":"filepath = r'\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/unclean focus.csv'\nfocus = pd.read_csv(filepath)\nfilepath = r'\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/unclean cclass.csv'\ncclass = pd.read_csv(filepath)","bf7a95e1":"# removing duplicate car adverts\n# also, there are duplicate columns because there were two possible locations where information could be for each car advert\n# will combine in next step\nfocus = focus.drop_duplicates()\nfocus","73afbea4":"# lots of missing data due to the way the website was layed out, had info in different places for each advert\n# work around was to scrape all possible data, and combine it to fill in the gaps\n\nfocus['mileage'] = focus['mileage'].fillna(focus['mileage2'])\nfocus['fuel type'] = focus['fuel type2'].fillna(focus['fuel type'])\nfocus['engine size'] = focus['engine size2'].fillna(focus['engine size'])\nfocus.head()","aaed5078":"focus = focus[['model','year','price','transmission','mileage', 'fuel type', 'engine size']]\nfocus = focus.rename(columns={\"fuel type\": \"fuelType\", \"engine size\": \"engineSize\"})\nfocus.head()","60b6e962":"# looking for empty data\nfocus.isnull().sum()","9cb3f4d3":"# removing rows with empty data\nfocus = focus.dropna().reset_index(drop=True)\n\n# remove 'Unknown' values in engine size and mileage categories\nfocus = focus[focus['engineSize'] != 'Unknown']\nfocus = focus[focus.mileage != 'Unknown']\n\n# removing CC in strings from engine size e.g. 2000 CC engine, which is equivalent to 2L engine.\nfocus['engineSize'] = focus.iloc[:,6].str.replace('CC', '')\nfocus['engineSize'] = focus.iloc[:,6].str.replace(' cc', '')\nfocus['engineSize'] = focus.iloc[:,6].str.replace('T', '')\nfocus['engineSize'] = focus.iloc[:,6].str.replace(',', '.')\n\n# removing commas from mileage\nfocus['mileage'] = focus.iloc[:,4].str.replace(',', '')\nfocus['price'] = focus.iloc[:,2].str.replace('\u00a3', '')\nfocus['price'] = focus.iloc[:,2].str.replace(',', '')\n\n# converting price, mileage, engine size, and year into integer\/float values\nfocus['price'] = focus.iloc[:,2].astype(int)\nfocus['mileage'] = focus.iloc[:,4].astype(int)\nfocus['engineSize'] = focus.iloc[:,6].astype(float)\nfocus.year = focus.year.astype(int)\n\n# engine sizes are in varying units, so converting the CC values into L e.g. 5000 CC ---> 5L\nfocus['engineSize'] = focus['engineSize'].apply(lambda x: x\/1000 if x > 20 else x)\nfocus['engineSize'] = focus['engineSize'].round(1)\n\nfocus","3044c6b3":"# checking values look as expected - and they do\nfocus.describe()","82409175":"cclass = cclass.drop_duplicates()\ncclass","dbcd703d":"cclass['mileage'] = cclass['mileage'].fillna(cclass['mileage2'])\ncclass['fuel type'] = cclass['fuel type2'].fillna(cclass['fuel type'])\ncclass['engine size'] = cclass['engine size2'].fillna(cclass['engine size'])\ncclass","5652e155":"cclass = cclass[['model','year','price','transmission','mileage', 'fuel type', 'engine size']]\ncclass = cclass.rename(columns={\"fuel type\": \"fuelType\", \"engine size\": \"engineSize\"})\ncclass.head()","44bf0f8d":"cclass.isnull().sum()","5a8ab776":"# removing rows with empty data\ncclass = cclass.dropna().reset_index(drop=True)\n\n# remove 'Unknown' values in engine size and mileage categories\ncclass = cclass[cclass['engineSize'] != 'Unknown']\ncclass = cclass[cclass.mileage != 'Unknown']\n\n# removing CC in strings from engine size e.g. 2000 CC engine, which is equivalent to 2L engine.\ncclass['engineSize'] = cclass.iloc[:,6].str.replace('CC', '')\n\n# removing commas from mileage\ncclass['mileage'] = cclass.iloc[:,4].str.replace(',', '')\ncclass['price'] = cclass.iloc[:,2].str.replace('\u00a3', '')\ncclass['price'] = cclass.iloc[:,2].str.replace(',', '')\n\n# converting price, mileage, engine size, and year into integer\/float values\ncclass['price'] = cclass.iloc[:,2].astype(int)\ncclass['mileage'] = cclass.iloc[:,4].astype(int)\ncclass['engineSize'] = cclass.iloc[:,6].astype(float)\ncclass.year = cclass.year.astype(int)\n\n# converting the CC values into L e.g. 5000 CC ---> 5L\ncclass['engineSize'] = cclass['engineSize'].apply(lambda x: x\/1000 if x > 20 else x)\ncclass['engineSize'] = cclass['engineSize'].round(1)\n\ncclass","391ce8d2":"cclass.describe()","f07ad2a6":"![Image](https:\/\/www.clipartkey.com\/mpngs\/m\/89-893099_transparent-car-wash-png-transparent-background-car-wash.png)\n# Cleaning scraped used car info  \n\nScraped used car listings for Ford Focus and Mercedes C Class cars. Converting it into a clean format for data analysis and prediction models.","43792dfd":"# Cleaning Mercedes C Class data  \nsame process again","f49ab4e8":"# Will begin by sorting out Ford Focus data"}}