{"cell_type":{"44ed6b52":"code","df8cde58":"code","164bfc6b":"code","42889f5e":"code","8d1d1d60":"code","2d4ba100":"code","512d13e8":"code","38e82114":"code","3fe75aef":"code","028615ba":"code","b8a68ebe":"markdown","f6501f00":"markdown","01dd4c7f":"markdown","5bc91e22":"markdown"},"source":{"44ed6b52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df8cde58":"camera = cv2.imread('..\/input\/dataset-tutorial-pcd\/cameraman.png')\nplt.imshow(camera)\nplt.title('Original')\n\nplt.show()","164bfc6b":"gaussian_blur = cv2.GaussianBlur(camera, (3,3), 0, borderType=cv2.BORDER_CONSTANT)","42889f5e":"plt.imshow(gaussian_blur)\nplt.title('Blur - Gaussian Noise')\n\nplt.show()","8d1d1d60":"img = cv2.imread('..\/input\/dataset-tutorial-pcd\/pollen_low_contrast.jpg')\nplt.imshow(img)\nplt.title('Original')\n\nplt.show()","2d4ba100":"median = cv2.medianBlur(img,5)\nret,th = cv2.threshold(median, 110, 255, cv2.THRESH_BINARY)\n\n\n\nplt.imshow(th)\nplt.title('Using Filtering')\n\nplt.show()","512d13e8":"img = cv2.imread('..\/input\/dataset-tutorial-pcd\/dog_dark.jpg')\nplt.imshow(img)\nplt.title('Original')\n\nplt.show()","38e82114":"_, mask = cv2.threshold(img, 50, 255, cv2.THRESH_BINARY_INV)\nkernal = np.ones((2,2), np.uint8)\n\ndilation = cv2.dilate(mask, kernal, iterations=1)\n\nplt.imshow(dilation)\nplt.title('Using Transformation')\n\nplt.show()","3fe75aef":"img = cv2.imread(\"..\/input\/dataset-tutorial-pcd\/wdg3.png\")\nplt.imshow(img)","028615ba":"img = cv2.Canny(img,20,100)\nlines = cv2.HoughLines(img, 1, np.pi\/180,20,np.array([]))\n\n\nfor line in lines:\n    rho,theta = line[0]\n    a = np.cos(theta)\n    b = np.sin(theta)\n    \n    x0 = a*rho\n    y0 = b*rho\n    \n    x1 = int(x0+10*(-b))\n    y1 = int(y0+10*(a))\n    x2 = int(x0+10*(-b))\n    y2 = int(y0+10*(1))\n    \n    cv2.line(img, (x1,y1), (x2,y2), (0,0,255),2)\n    \nplt.imshow(img)\nplt.title('Line Detection')","b8a68ebe":"**1. Apply a noise using Gaussian Noise and use any filtering to improve its image quality**","f6501f00":"**Extra**","01dd4c7f":"**2. Apply a filter to improve its visibility**","5bc91e22":"**3. Transformation filter to tackle the darker area**"}}