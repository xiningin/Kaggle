{"cell_type":{"c3389e2c":"code","3a421aff":"code","05b041af":"code","b0c1d68c":"code","9616afbf":"code","06fa2b3f":"code","ac4012f1":"code","60d12512":"markdown","3af40fca":"markdown","4cd04f40":"markdown","20c5463d":"markdown","860efcc7":"markdown","bd12065a":"markdown","7ecff7fc":"markdown"},"source":{"c3389e2c":"import pandas as pd\nimport numpy as np\nimport datetime\nimport random\nimport glob\nimport cv2\nimport os\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Activation,Dropout,Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, Callback, ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\n# \u4e71\u6570\u30b7\u30fc\u30c9\u56fa\u5b9a\nseed_everything(888)","3a421aff":"train = pd.read_csv('..\/input\/4th-datarobot-ai-academy-deep-learning\/train.csv')\ndisplay(train.shape)\ndisplay(train.head())","05b041af":"def load_images(df,inputPath,size,roomType):\n    images = []\n    for i in df['id']:\n        basePath = os.path.sep.join([inputPath, \"{}_{}*\".format(i,roomType)])\n        housePaths = sorted(list(glob.glob(basePath)))\n        for housePath in housePaths:\n            image = cv2.imread(housePath)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image = cv2.resize(image, (size, size))\n        images.append(image)\n    return np.array(images) \/ 255.0\n\n# load train images\ninputPath = '..\/input\/4th-datarobot-ai-academy-deep-learning\/images\/train_images\/'\nsize = 64\nroomType = 'frontal'\ntrain_images = load_images(train,inputPath,size,roomType)\ndisplay(train_images.shape)\ndisplay(train_images[0][0][0])","b0c1d68c":"train_x, valid_x, train_images_x, valid_images_x = train_test_split(train, train_images, test_size=0.2)\ntrain_y = train_x['price'].values\nvalid_y = valid_x['price'].values\ndisplay(train_images_x.shape)\ndisplay(valid_images_x.shape)\ndisplay(train_y.shape)\ndisplay(valid_y.shape)","9616afbf":"def create_cnn(inputShape):\n    model = Sequential()\n\n    model.add(Conv2D(filters=32, kernel_size=(3, 3), strides=(1, 1), padding='same',\n                     activation='relu', kernel_initializer='he_normal', input_shape=inputShape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n\n    model.add(Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='same', \n                     activation='relu', kernel_initializer='he_normal'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n\n    \n    model.add(Flatten())\n    \n    model.add(Dense(units=512, activation='relu',kernel_initializer='he_normal'))      \n    model.add(Dense(units=256, activation='relu',kernel_initializer='he_normal'))  \n    model.add(Dense(units=32, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=1, activation='linear'))\n    \n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    return model","06fa2b3f":"# callback parameter\nfilepath = \"cnn_best_model.hdf5\" \nes = EarlyStopping(patience=5, mode='min', verbose=1) \ncheckpoint = ModelCheckpoint(monitor='val_loss', filepath=filepath, save_best_only=True, mode='auto') \nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss',  patience=5, verbose=1,  mode='min')\n\n# \u8a13\u7df4\u5b9f\u884c\ninputShape = (size, size, 3)\nmodel = create_cnn(inputShape)\nhistory = model.fit(train_images_x, train_y, validation_data=(valid_images_x, valid_y),epochs=30, batch_size=16,\n    callbacks=[es, checkpoint, reduce_lr_loss])\n","ac4012f1":"# load test csv\ninputPath = '..\/input\/4th-datarobot-ai-academy-deep-learning\/'\ntest = pd.read_csv(inputPath+'test.csv')\n\n# load test images\ninputPath = '..\/input\/4th-datarobot-ai-academy-deep-learning\/images\/test_images\/'\nsize = 64\nroomType = 'frontal'\ntest_images = load_images(test,inputPath,size,roomType)\ndisplay(test_images.shape)\ndisplay(test_images[0][0][0])\n\n# prediction\ntest_pred = model.predict(test_images, batch_size=32).reshape((-1,1))\ntest['price'] = test_pred\ntest[['id','price']].to_csv('submission.csv',index=False)\ndisplay(test.head())","60d12512":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c","3af40fca":"# \u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210","4cd04f40":"# \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f","20c5463d":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","860efcc7":"# CNN\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b","bd12065a":"# \u30e2\u30c7\u30eb\u8a13\u7df4","7ecff7fc":"# \u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f"}}