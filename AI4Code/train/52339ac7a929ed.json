{"cell_type":{"a7de4eae":"code","cb55c023":"code","b6dd3a73":"code","95ad0ae9":"code","c5961a8d":"code","b0c70144":"code","0bd878e0":"code","decef88e":"code","2b176cd0":"code","52520382":"code","6ff0470f":"code","cc888642":"code","0dbe9326":"code","e25c124b":"code","b671219d":"code","6b37c888":"code","d88a64b3":"code","f83dfd79":"code","4bd0ecaf":"code","889a6d52":"code","10a14505":"code","a00a431c":"code","45bda844":"code","0a085285":"code","78ee0c35":"code","33358e8c":"code","63837d69":"code","c87b2535":"code","6cbf0506":"code","d4a354c4":"code","957afa34":"code","7e7d846a":"code","dc3be99e":"code","cdc36534":"markdown","80e50c75":"markdown","f00130fc":"markdown","eece3f40":"markdown","aa56f7ec":"markdown","d075e15f":"markdown","b4f8ada7":"markdown","adb35d8d":"markdown","9f4a88d1":"markdown","29998f86":"markdown","2eb64997":"markdown","5ff42ea6":"markdown","b6402e23":"markdown","30d2955a":"markdown","45003cf4":"markdown","98a45062":"markdown","76a6ff26":"markdown","cf5016c6":"markdown","194fb52f":"markdown","8f1e74a0":"markdown","8c453c72":"markdown","b00bcf01":"markdown","8bd09b46":"markdown","001f3996":"markdown","b40e7823":"markdown","cbd3e87b":"markdown","fda6d110":"markdown","cabb000b":"markdown","cb6ae75f":"markdown","17419ed5":"markdown","339dcbbb":"markdown"},"source":{"a7de4eae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb55c023":"insults = pd.read_csv(\"..\/input\/all-trumps-twitter-insults-20152021\/trump_insult_tweets_2014_to_2021.csv\")\ntweets = pd.read_csv(\"..\/input\/trump-tweets-and-timeline\/trumptweets.csv\")","b6dd3a73":"insults_count = pd.to_datetime(insults.date).dt.date.value_counts().to_frame().reset_index()\ninsults_count.columns = ['date', 'insult_count']\ntweets_count = pd.to_datetime(tweets.date).dt.date.value_counts().to_frame().reset_index()\ntweets_count.columns = ['date', 'tweet_count']\ntweets_insults = tweets_count.merge(insults_count, on='date', how='left')\ntweets_insults","95ad0ae9":"approval = pd.read_csv(\"..\/input\/approval\/approval_topline.csv\")\napproval = approval[approval['subgroup'] == 'All polls']\napproval['date'] = pd.to_datetime(approval.modeldate).dt.date\napproval","c5961a8d":"full = approval.merge(tweets_insults, how = \"left\", on = \"date\")\nfull.insult_count = full.insult_count.fillna(0)\nfull.tweet_count = full.tweet_count.fillna(0)\nfull = full.sort_values(by = \"date\").reset_index()\nfull['insult_ratio'] = full.insult_count \/ full.tweet_count\nfull.insult_ratio = full.insult_ratio.fillna(0)","b0c70144":"full.head(10)","0bd878e0":"import matplotlib.pyplot as plt","decef88e":"plt.plot(full.tweet_count)\nplt.plot(full.insult_count)","2b176cd0":"print(\"Approval vs. Daily tweet Count:\", np.corrcoef(full.approve_estimate, full.tweet_count)[0][1])\nprint(\"Approval vs. Daily insult Count:\", np.corrcoef(full.approve_estimate, full.insult_count)[0][1])\nprint(\"Approval vs. Ratio of insults to tweets:\", np.corrcoef(full.approve_estimate, full.insult_ratio)[0][1])","52520382":"full['week'] = pd.to_datetime(full.date).dt.week\nfull['year'] = pd.to_datetime(full.date).dt.year\nfull['month'] = pd.to_datetime(full.date).dt.month","6ff0470f":"insults_by_week = full.groupby([\"week\", \"year\"]).agg({'insult_count':'sum', 'tweet_count': 'sum',\n                         'approve_estimate':'mean', 'date': \"min\"})\ninsults_by_week[\"insult_ratio\"] = insults_by_week.insult_count \/ insults_by_week.tweet_count\ninsults_by_week.insult_ratio = insults_by_week.insult_ratio.fillna(0)\ninsults_by_week = insults_by_week.sort_values(by=['year', 'week'])\ninsults_by_week","cc888642":"print(\"Approval vs. Daily tweet Count:\", np.corrcoef(insults_by_week.approve_estimate, insults_by_week.tweet_count)[0][1])\nprint(\"Approval vs. Daily insult Count:\", np.corrcoef(insults_by_week.approve_estimate, insults_by_week.insult_count)[0][1])\nprint(\"Approval vs. Ratio of insults to tweets:\", np.corrcoef(insults_by_week.approve_estimate, insults_by_week.insult_ratio)[0][1])","0dbe9326":"from textblob import TextBlob","e25c124b":"polarity = []\npositive_tweets = []\nnegative_tweets = []\nneutral_tweets = []\nfor tweet in tweets.text:\n    tweet_polarity = TextBlob(tweet).sentiment.polarity\n    polarity.append(tweet_polarity)\n    if tweet_polarity>0:\n        positive_tweets.append(1)\n        negative_tweets.append(0)\n        neutral_tweets.append(0)\n    if tweet_polarity == 0:\n        positive_tweets.append(0)\n        negative_tweets.append(0)\n        neutral_tweets.append(1)\n    if tweet_polarity <0:\n        positive_tweets.append(0)\n        negative_tweets.append(1)\n        neutral_tweets.append(0)\n","b671219d":"!pip install text2emotion\nimport text2emotion as te","6b37c888":"happy = []\nangry = []\nsurprise = []\nsad = []\nfear = []\nfor tweet in tweets.text:\n    emotions = te.get_emotion(tweet)\n    happy.append(emotions['Happy'])\n    angry.append(emotions['Angry'])\n    surprise.append(emotions['Surprise'])\n    sad.append(emotions['Sad'])\n    fear.append(emotions['Fear'])","d88a64b3":"tweets['polarity'] = polarity\ntweets['positive_tweets'] = positive_tweets\ntweets['negative_tweets'] = negative_tweets\ntweets['neutral_tweets'] = neutral_tweets\ntweets['happy'] = happy\ntweets['angry'] = angry\ntweets['surprise'] = surprise\ntweets['sad'] = sad\ntweets['fear'] = fear\ntweets","f83dfd79":"import string\n\ndef count_uppercase(a_str):\n    uc = 0\n    x = \"\".join(l for l in a_str if l not in string.punctuation)\n    for c in x.split():\n        if c.isupper() == True:\n            uc = uc + 1\n    return uc\n\ndef count_exclamation(a_str):\n    e = 0\n    for l in a_str:\n        if l == \"!\":\n            e = e + 1\n    return e\n\nuppers = []\nexclamations = []\nfor tweet in tweets.text:\n    uppers.append(count_uppercase(tweet))\n    exclamations.append(count_exclamation(tweet))\n    \ntweets['uppers'] = uppers\ntweets['exclamations'] = exclamations","4bd0ecaf":"tweets.date = pd.to_datetime(tweets.date).dt.date\ntweets['tweet_count'] = tweets.date\ntweets['count'] = tweets.positive_tweets + tweets.negative_tweets + tweets.neutral_tweets\ntweetscounts = tweets[[\"date\", \"polarity\", \"positive_tweets\", \"negative_tweets\", \"neutral_tweets\", \"happy\", \"angry\", \"surprise\", \"sad\", \"fear\", \"count\", 'uppers', 'exclamations']]\ntweetscounts = tweetscounts.groupby('date').sum().reset_index()\ntweetscounts.head(10)","889a6d52":"tweetsE_insults = tweetscounts.merge(insults_count, on='date', how='left')","10a14505":"full = approval.merge(tweetsE_insults, how = \"left\", on = \"date\")","a00a431c":"full.insult_count = full.insult_count.fillna(0)\nfull['count'] = full['count'].fillna(0)\nfull = full.sort_values(by = \"date\").reset_index()\nfull['insult_ratio'] = full.insult_count \/ full['count']\nfull.insult_ratio = full.insult_ratio.fillna(0)\nfull.positive_tweets = full.positive_tweets.fillna(0)\nfull.negative_tweets = full.negative_tweets.fillna(0)\nfull.neutral_tweets = full.neutral_tweets.fillna(0)\nfull.polarity = full.polarity.fillna(0)\nfull.happy = full.happy.fillna(0)\nfull.angry = full.angry.fillna(0)\nfull.sad = full.sad.fillna(0)\nfull.fear = full.fear.fillna(0)\nfull.surprise = full.surprise.fillna(0)\nfull.uppers = full.uppers.fillna(0)\nfull.exclamations = full.exclamations.fillna(0)\nfull['week'] = pd.to_datetime(full.date).dt.week\nfull['year'] = pd.to_datetime(full.date).dt.year\nfull['month'] = pd.to_datetime(full.date).dt.month\nfull","45bda844":"full['MoodIndex'] = 100 *((full.insult_count + full.negative_tweets + full.angry + full.sad + full.surprise + full.fear + (.25*(full.exclamations + full.uppers))))\/(4* full['count'])","0a085285":"plt.figure(figsize=(3,4))\nfull.plot(kind='line',x = 'date', y='MoodIndex', color='red')\nfull.plot(kind='line',y='approve_estimate', color='blue')","78ee0c35":"timeline = pd.read_csv(\"..\/input\/trump-tweets-and-timeline\/Trump_timeline.csv\")\ntimeline.date = pd.to_datetime(timeline.date).dt.date","33358e8c":"full = full.merge(timeline, how = 'left', on = 'date')","63837d69":"!pip install mplcursors","c87b2535":"import matplotlib.pyplot as plt\nimport numpy as np\nimport mplcursors\n%matplotlib inline\nplt.rcParams['figure.figsize'] = [10, 5]\n%matplotlib notebook\nx = full.date\ny = full.MoodIndex\nmarkers_on = pd.notnull(full.event)\nlabels = full.event[markers_on]\n\nfig,ax = plt.subplots()\nline, = plt.plot(x,y, markevery=markers_on)\nplt.plot(x[markers_on], y[markers_on], linestyle = \"\", marker = 'o')\ncursor = mplcursors.cursor(hover=True)\ncursor.connect(\n    \"add\", lambda sel: sel.annotation.set_text(labels[sel.target.index]))","6cbf0506":"insults_by_week = full.groupby([\"week\", \"year\"]).agg({'insult_count':'sum', 'count': 'sum',\n                         'approve_estimate':'mean', 'date': \"min\", \"happy\": \"sum\", \"angry\": \"sum\", \"sad\": \"sum\", \"surprise\": \"sum\", \"fear\": \"sum\", \"exclamations\": \"sum\", \"uppers\": \"sum\", \"positive_tweets\": \"sum\", \"negative_tweets\": \"sum\", \"neutral_tweets\": \"sum\", \"polarity\": \"sum\"})\ninsults_by_week[\"insult_ratio\"] = insults_by_week.insult_count \/ insults_by_week['count']\ninsults_by_week.insult_ratio = insults_by_week.insult_ratio.fillna(0)\ninsults_by_week","d4a354c4":"insults_by_week['MoodIndex'] = 100 *((insults_by_week.insult_count + insults_by_week.negative_tweets + insults_by_week.angry + insults_by_week.sad + insults_by_week.surprise + insults_by_week.fear + (.25*(insults_by_week.exclamations + insults_by_week.uppers))))\/(4* insults_by_week['count'])","957afa34":"insults_by_week = insults_by_week.sort_values(by=['year', 'week'])","7e7d846a":"timeline['week'] = pd.to_datetime(timeline.date).dt.week\ntimeline['year'] = pd.to_datetime(timeline.date).dt.year\ntimeline = timeline.sort_values(by=['year', 'week'])\ninsults_by_week = insults_by_week.merge(timeline, on= [\"week\", \"year\"], how = 'left')\ninsults_by_week","dc3be99e":"plt.rcParams['figure.figsize'] = [10, 5]\n%matplotlib inline\n%matplotlib notebook\nx = insults_by_week.date_x\ny = insults_by_week.MoodIndex\nmarkers_on = pd.notnull(insults_by_week.event)\nlabels = insults_by_week.event[markers_on]\n\nfig,ax = plt.subplots()\nmarkers_on = pd.notnull(insults_by_week.event)\nline, = plt.plot(x,y, markevery=markers_on)\nplt.plot(x[markers_on], y[markers_on], linestyle = \"\", marker = 'o')\ncursor = mplcursors.cursor(hover=True)\ncursor.connect(\n    \"add\", lambda sel: sel.annotation.set_text(labels[sel.target.index]))","cdc36534":"Calculating ratio of emotional words","80e50c75":"Importing packages","f00130fc":"Importing, cleaning, and merging timeline of key events of Trump presidency with rest of data","eece3f40":"Adding timeline events to weekly data","aa56f7ec":"# Data cleaning","d075e15f":"Calculating Mood Index","b4f8ada7":"# Data Used","adb35d8d":"# Daily","9f4a88d1":"Cleaning and merging data","29998f86":"# Plot of Twitter Mood Index by week\n\nMoseover the orange points to see which key event of the Trump presidency happened on that day","2eb64997":"Cleaning approval data","5ff42ea6":"Calculating Aggression Points","b6402e23":"Counting number of total tweets and insults per day","30d2955a":"MoodIndex and Approval rating by day of presidency","45003cf4":"# What can we learn from this?\n\nDefinitively? Not much. And I'm sure the metric I came up with can be vastly improved. But it does seem that there may be a pattern between Trump's seemingly eratic decisions, and his mood on Twitter. Many of his key events came right before a spike in his Twitter Mood Score, or happened at high points. But this may all be coincidence. We do know that there was a weak positive correlation between his approval rating and his number of tweets per day. But it's interesting to think, that perhaps Trump's erratic decisions could have been forseen by looking at how he had been tweeting that week. ","98a45062":"Importing data","76a6ff26":"Aggregating data by week","cf5016c6":"1. New York Times complete list of Trump's insults on Twitter: [https:\/\/www.nytimes.com\/interactive\/2021\/01\/19\/upshot\/trump-complete-insult-list.html](http:\/\/)\n2. Trump Twitter Archive full list of Trump's tweets during his presidency: [https:\/\/www.thetrumparchive.com\/](http:\/\/)\n3. Trump's approval rating as calculated by FiveThirtyEight's polling aggregation: [https:\/\/projects.fivethirtyeight.com\/trump-approval-ratings\/](http:\/\/)\n4. A hand generated list of key moments of the Trump presidency - This is, of course, subjective and may be missing events or include events that one may not feel to be a 'key' moment. Take this with a grain of salt.","194fb52f":"# Measuring Twitter Mood","8f1e74a0":"# Aggregating by week","8c453c72":"The metric use to calculate Trump's \"Twitter Mood Index\" is an average of:\n1. Ratio of insults to total tweets\n2. Ratio of \"negative\" tweets (by TextBlob polarity score) to total tweets\n3. Ratio of words tagged as Angry, Sad, Surpised, or Fearful to total emotional words (As determined by the tagger of the text2emotion package's tagger\n4. Number of aggression points per tweet, with aggression points calculated as .25 points per word in all capital letters or exclamation point. (example: The following Trump tweet would get .5 aggression points:\n\"The Caravan is largely broken up thanks to the strong immigration laws of Mexico and their willingness to use them so as not to cause a giant scene at our Border. Because of the Trump Administrations actions, Border crossings are at a still UNACCEPTABLE 46 year low. Stop drugs!\"\n\nDon't take this metric *too* seriously. While it is intended to be a measure of Trump's mood as represented in his social media posting, it has plenty of flaws. But hopefully it can be a representation of the magnitude of angry and aggressive online behavior on a daily or weekly basis by the president.","b00bcf01":"# Plot of Twitter Mood Index by day\n\nMoseover the orange points to see which key event of the Trump presidency happened on that day","8bd09b46":"Getting weekly Mood Index","001f3996":"Plotting insults and total tweets by day","b40e7823":"Calculating polarity score","cbd3e87b":"# Plotting Trump's Twitter behavior\n\nDid Trump's approval rating have a relationship with his Twitter bahavior? And did Trump's most erratic online behavior correspond to the dates of major events of his presidency?","fda6d110":"Cleaning fully merged data","cabb000b":"Correlation between tweet count per day, insult count per day, and ratio of insults to total tweets per day and approval rating","cb6ae75f":"Merging tweet counts, insult counts, and approval rating","17419ed5":"# Weekly","339dcbbb":"The following article by FiveThirtyEight (https:\/\/fivethirtyeight.com\/features\/never-tweet-mr-president\/) showed the possiblity of a relationship between Trumps approval rating and his anger on Twitter early in his presidency. In this analysis, I attempt to create a similar metric to measure Trump's Twitter anger, and determine if there is a correlation between Trump's anger online, and his approval rating. Finally, I will plot Trump's twitter anger by day and week of his presidency, and highlight key moments of his term to visualize any potential patterns. "}}