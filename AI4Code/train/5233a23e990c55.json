{"cell_type":{"074ed978":"code","e8e950ef":"code","348f6a6d":"code","2c04b44a":"code","e6dd8306":"code","38af2bd6":"code","f8799b9f":"code","f7749e77":"code","e7f04701":"code","bef6f4ca":"code","c74e77ed":"code","5896b6cb":"code","371e1ef8":"code","b3782b63":"code","09c3aeff":"code","6b6396b5":"code","667118a6":"code","c2ff0ae8":"code","390838ae":"code","bec17c79":"markdown","2406c4c0":"markdown","b65e3050":"markdown","ffa8ca36":"markdown","1a2c458a":"markdown","c2c11969":"markdown","0f06008e":"markdown","7b14d10d":"markdown","caf56218":"markdown","82f4c4ef":"markdown"},"source":{"074ed978":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8e950ef":"train=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","348f6a6d":"test=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","2c04b44a":"Y_train=train[\"label\"]\nX_train=train.drop(labels=[\"label\"],axis=1)","e6dd8306":"plt.figure(figsize=(15,7))\ng=sns.countplot(Y_train,palette=\"icefire\")\nplt.title(\"Number of Digit Classes\")\nY_train.value_counts()","38af2bd6":"#normalization\nX_train=X_train\/225.0\ntest=test\/225.0\n# The max value that colors can take mathematically is 255\nprint(\"x_train: \",X_train.shape)\nprint(\"test shape: \",test.shape)","f8799b9f":"#reshape\nX_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","f7749e77":"#label encoding\nfrom keras.utils.np_utils import to_categorical #one-hot\nY_train=to_categorical(Y_train,num_classes=10)","e7f04701":"Y_train","bef6f4ca":"from sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val=train_test_split(X_train,Y_train,test_size=0.1,random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","c74e77ed":"plt.imshow(X_train[2][:,:,0],cmap=\"gray\")\nplt.axis(\"off\")\nplt.show()","5896b6cb":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","371e1ef8":"optimizer=Adam(lr=0.001,beta_1=0.9,beta_2=0.999)","b3782b63":"model.compile(optimizer=optimizer,loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","09c3aeff":"epochs=10\nbatch_size=250","6b6396b5":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","667118a6":"history=model.fit_generator(datagen.flow(X_train,Y_train,batch_size=batch_size),epochs=epochs,validation_data=(X_val,Y_val),steps_per_epoch=X_train.shape[0]\/\/batch_size)","c2ff0ae8":"plt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","390838ae":"# confusion matrix\nimport seaborn as sns\nY_pred = model.predict(X_val) \nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(Y_val,axis = 1) \n\n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","bec17c79":"## Epochs and Batch Size","2406c4c0":"## Data Augmentation","b65e3050":"## Loading Data Set","ffa8ca36":"## Define Optimizer\nAdam optimizer","1a2c458a":"## Evaluate the Model","c2c11969":"## Normalization, Reshape and Label Encoding","0f06008e":"## Fit the Model","7b14d10d":"## Compile Model","caf56218":"# Convolutional Neural Network","82f4c4ef":"## Train Test Split"}}