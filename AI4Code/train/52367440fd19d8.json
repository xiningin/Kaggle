{"cell_type":{"9261e345":"code","43d4810f":"code","6f0b0608":"code","77155e2f":"code","6f5ce368":"code","3849062c":"code","04c71a4c":"code","10a63f94":"code","c21859e1":"code","889ba437":"code","80d8fe91":"code","7247ebdf":"code","0a77ad16":"code","51d982b7":"code","ab82477c":"code","9d0ffc17":"code","c39202c4":"code","f36e499f":"code","1d625fdd":"markdown","0c184a98":"markdown","5a2c7b16":"markdown"},"source":{"9261e345":"##Import packages\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","43d4810f":"#Import data\nimport pandas as pd\ntest = pd.read_csv(\"..\/input\/data-science-london-scikit-learn\/test.csv\", header=None)\ntrain = pd.read_csv(\"..\/input\/data-science-london-scikit-learn\/train.csv\", header=None)\ntrainLabels = pd.read_csv(\"..\/input\/data-science-london-scikit-learn\/trainLabels.csv\", header=None)\nprint(plt.style.available) # look at available plot styles\nplt.style.use('ggplot')","6f0b0608":"print('train shape:', train.shape)\nprint('test shape:', test.shape)\ntrainLabels = np.ravel(trainLabels)\nprint(trainLabels.shape)\ntrain.head()","77155e2f":"train.head(10)","6f5ce368":"train.info()","3849062c":"#find and replace missing value\ntrain.isna().sum(axis=0)","04c71a4c":"train.describe()","10a63f94":"X_train, X_test, Y_train, Y_test = train_test_split(train, trainLabels, test_size = 0.25, random_state = 0)\nprint(X_train.shape)","c21859e1":"log_reg = LogisticRegression(solver='lbfgs', penalty='none')#instatiate the model\nlog_reg.fit(X_train, Y_train)#fit the model with data\ny_pred = log_reg.predict(X_test) #predict using test data\nprint(\"Training score: \", log_reg.score(X_train, Y_train))\nprint(\"Testting score: \", log_reg.score(X_test, Y_test))","889ba437":"dec_tree = DecisionTreeClassifier(max_depth=7,random_state=1)\ndec_tree.fit(X_train,Y_train)\nprint(\"Training score: \", dec_tree.score(X_train, Y_train))\nprint(\"Testting score: \", dec_tree.score(X_test, Y_test))","80d8fe91":"##KNN ","7247ebdf":"n=np.arange(1,26)\nkfold=10\ntrain_accuracy=[]\ncrossval_accuracy=[]\nbestk=0\nbestacc = 0.0\nfor i,k in enumerate(n):\n    #create a model for each k\n    knn=KNeighborsClassifier(n_neighbors=k)\n    #fit the training data into knn\n    knn.fit(X_train,Y_train)\n    #claculate the score for train data an appen to the list.(train accuracy)\n    train_accuracy.append(knn.score(X_train,Y_train))\n    #calculate the crossvalidation score of train data(test accuracy)\n    #assign that to a variable\n    mean_val_accuracy=np.mean(cross_val_score(knn,train,trainLabels,cv=kfold))\n    #aapend it to a list\n    crossval_accuracy.append(mean_val_accuracy)\n    #compare the mean_val_acc and the current bast accuracy.\n    if mean_val_accuracy > bestacc:\n        bestk = k\n        bestacc = mean_val_accuracy\n        \nprint(\"best k value is: \", bestk)\nprint(\"best accuracy is: \", bestacc)","0a77ad16":"#Final Model","51d982b7":"final_model = KNeighborsClassifier(n_neighbors=bestk)\nfinal_model.fit(train,trainLabels)\nprint(\"Training final: \", final_model.score(train, trainLabels))","ab82477c":"final_test = final_model.predict(test)\nfinal_test.shape","9d0ffc17":"submission = pd.DataFrame(final_test)\nprint(submission.shape)\nsubmission.columns = ['Solution']\nsubmission['Id'] = np.arange(1,submission.shape[0]+1)\nsubmission = submission[['Id', 'Solution']]\nsubmission","c39202c4":"filename = 'Scikit-KNN.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","f36e499f":"print(check_output([\"ls\", \"..\/working\"]).decode(\"utf8\"))","1d625fdd":"Decision tree\n","0c184a98":"[> > Logistic Regression](http:\/\/)","5a2c7b16":"Split the data in to train and test"}}