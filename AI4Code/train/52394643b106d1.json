{"cell_type":{"0bab6969":"code","a89aa514":"code","cda119b3":"code","3d979c37":"code","4b202d59":"code","a707b6a1":"code","f57d37e8":"code","b5510c58":"code","56968cbe":"code","477d1b94":"code","003b594c":"code","a0361ca8":"code","fdc8af0f":"code","14ab791b":"code","4ba01ce8":"code","ac9caec7":"code","4a1d1ea3":"code","fb86712d":"code","3cec8af2":"code","f5a7489e":"code","e3e8f077":"code","a0797b69":"code","0df81f59":"code","c1b324a7":"code","1adf14cd":"code","0144369d":"code","54bbb2e8":"code","cd198d20":"code","610ced00":"code","31015216":"code","38d83e7d":"code","ffb6a88a":"code","037aef9a":"code","ea0427ad":"code","ba0144d5":"code","6e51ec77":"code","86101493":"code","814138f1":"code","8c436582":"code","a083bc86":"code","1abb8caa":"code","dd924f1d":"code","dfc8cc37":"code","f4c0c95e":"markdown","fa18fd7b":"markdown","db064c39":"markdown","8f12424f":"markdown","6fda386b":"markdown","3dbe3a37":"markdown","5544d348":"markdown","323d8d2d":"markdown","04e93a86":"markdown","f3cceb34":"markdown","d8f7711f":"markdown","39ca8257":"markdown","1610a5db":"markdown","0ad68c75":"markdown","785ce571":"markdown","ce6b6b54":"markdown","cf9d222b":"markdown"},"source":{"0bab6969":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom scipy import stats\nimport missingno as msno\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import  Lasso\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom catboost import CatBoostRegressor \nimport xgboost as xgb","a89aa514":"warnings.filterwarnings(\"ignore\")","cda119b3":"df_train = pd.read_csv(\"..\/input\/seoul-bike-rental-ai-pro-iti\/train.csv\",index_col=\"ID\")","3d979c37":"df_test = pd.read_csv(\"..\/input\/seoul-bike-rental-ai-pro-iti\/test.csv\",index_col=\"ID\")\n","4b202d59":"df_train.shape","a707b6a1":"df_train.head(3)","f57d37e8":"df_train.dtypes","b5510c58":"df_train.info()","56968cbe":"df_train.columns = [i.split(\"(\")[0].strip().title().replace(\" \",\"_\") for i in [*df_train.columns]]\ndf_test.columns = [i.split(\"(\")[0].strip().title().replace(\" \",\"_\") for i in [*df_test.columns]]\ndf_train.columns","477d1b94":"df_train.Date = pd.to_datetime(df_train.Date, format=\"%d\/%m\/%Y\")\ndf_test.Date = pd.to_datetime(df_test.Date, format=\"%d\/%m\/%Y\")\ndf_train.Date.dtype","003b594c":"df_train.insert(1,\"Day\", df_train.Date.dt.day)\ndf_train.insert(2, \"Month\", df_train.Date.dt.month)\ndf_train.insert(3, \"Year\", df_train.Date.dt.year)","a0361ca8":"df_test.insert(1,\"Day\", df_test.Date.dt.day)\ndf_test.insert(2, \"Month\", df_test.Date.dt.month)\ndf_test.insert(3, \"Year\", df_test.Date.dt.year)","fdc8af0f":"df_train.insert(3, 'WeekDay',df_train[\"Date\"].dt.day_name())\ndf_test.insert(3, 'WeekDay', df_test[\"Date\"].dt.day_name())","14ab791b":"df_train.Holiday.replace(['Holiday','No Holiday'], [0,1], inplace=True)\ndf_test.Holiday.replace(['Holiday','No Holiday'], [0,1], inplace=True)","4ba01ce8":"df_train.Functioning_Day = df_train.Functioning_Day.map({\"No\":0, \"Yes\":1})\ndf_test.Functioning_Day = df_test.Functioning_Day.map({\"No\":0, \"Yes\":1})","ac9caec7":"df_train.Year = df_train.Year.map({2017:0, 2018:1})\ndf_test.Year = df_test.Year.map({2017:0, 2018:1})","4a1d1ea3":"df_train.Seasons = df_train.Seasons.map({\"Winter\":1, 'Autumn':2, 'Spring':3, 'Summer':4})\ndf_test.Seasons = df_test.Seasons.map({\"Winter\":1, 'Autumn':2, 'Spring':3, 'Summer':4})","fb86712d":"df_train.insert(2, 'label_day_night', df_train['Hour'].apply(lambda x : 0 if (x<7) else( 1)))\ndf_test.insert(2, 'label_day_night', df_test['Hour'].apply(lambda x : 0 if (x<7) else( 1)))","3cec8af2":"df_train[\"Working_Day\"] = 1\ndf_train.loc[(df_train.WeekDay==\"Saturday\")|(df_train.WeekDay==\"Sunday\"), \"Working_Day\"] = 0\n\ndf_test[\"Working_Day\"] = 1\ndf_test.loc[(df_test.WeekDay==\"Saturday\")|(df_test.WeekDay==\"Sunday\"), \"Working_Day\"] = 0","f5a7489e":"df_train.Humidity[df_train.Humidity==0] = df_train.Humidity.mean()\ndf_test.Humidity[df_test.Humidity==0] = df_test.Humidity.mean()","e3e8f077":"categoryVariableList = [\"WeekDay\"]\nfor var in categoryVariableList:\n    df_train[var] = df_train[var].astype(\"category\")\n    df_test[var] = df_test[var].astype(\"category\")","a0797b69":"for col in categoryVariableList:\n    train_dummies_col = pd.get_dummies(df_train[col])\n    test_dummies_col = pd.get_dummies(df_test[col])\n    \n    df_train = pd.concat([df_train, train_dummies_col],axis=1)\n    df_test = pd.concat([df_test, test_dummies_col],axis=1)\n    \n    df_train.drop(col, axis=1, inplace=True)\n    df_test.drop(col, axis=1, inplace=True)","0df81f59":"df_train.columns","c1b324a7":"columns = df_train.columns.tolist()\ncolumns.append(columns.pop(5))\ndf_train = df_train[columns]","1adf14cd":"df_train.drop(\"Date\",axis=1, inplace=True)\ndf_test.drop(\"Date\",axis=1, inplace=True)","0144369d":"numerical_feature = [\"Temperature\",\"Humidity\",\"Rainfall\",\n                     \"Visibility\",\"Dew_Point_Temperature\",\n                     'Wind_Speed','Solar_Radiation',\"Snowfall\"]\n\nscale = StandardScaler()\ndf_train[numerical_feature] = scale.fit_transform(df_train[numerical_feature])\ndf_test[numerical_feature] = scale.transform(df_test[numerical_feature])","54bbb2e8":"lr = Lasso(alpha=0.1, normalize=True)\nlr.fit(df_train.drop(['Y'], axis=1), df_train.Y)\n[*zip(df_train.columns[:-1], lr.coef_)]","cd198d20":"useful_features = set(df_train.columns).difference([\"Day\",\"Snowfall\",\n                                                    \"Dew_Point_Temperature\",\n                                                    \"Monday\",\"Saturday\",\"Y\"])","610ced00":"# loss function\ndef RMSLE(y_acual, y_pred):\n    return np.sqrt(mean_squared_log_error(y_acual, y_pred))","31015216":"X_train, X_val, y_train, y_val = train_test_split(df_train[useful_features],\n                                                  df_train.Y,\n                                                  test_size=0.2,\n                                                  random_state=2)\n\nX_test = df_test[useful_features]","38d83e7d":"catBoost = CatBoostRegressor(objective='Poisson',\n                             loss_function=RMSLE,\n                             n_estimators=10000,\n                             random_state=0,\n                             learning_rate=0.03,\n                             subsample=0.75,\n                             max_depth=5,\n                             verbose=0)\n\ncatBoost.fit(X_train,y_train)\n\ny_pred = [int(i) for i in catBoost.predict(X_train)]\n\nrmsle_train = np.sqrt(mean_squared_log_error(y_train, y_pred))\nrmsle_val = np.sqrt(mean_squared_log_error(y_val, catBoost.predict(X_val)))\n\nprint(\"RMSLE Trian ====> \",round(rmsle_train,6))\nprint('='*30)\nprint(\"RMSLE Validation ====> \",round(rmsle_val,6))","ffb6a88a":"catBoost_pred = [int(i) for i in catBoost.predict(X_test)]","037aef9a":"xg_reg = xgb.XGBRegressor(objective='count:poisson',\n                          random_state=0,\n                          loss_function=RMSLE,\n                          colsample_bytree = 0.6, \n                          learning_rate = 0.02,\n                          gamma = 4,\n                          n_estimators = 10000,\n                          max_depth=4 ,\n                          subsample=0.75,\n                          min_child_weight=6)\n\nxg_reg = xg_reg.fit(X_train,y_train)\n\ny_pred = [int(i) for i in xg_reg.predict(X_train)]\n\nrmsle_train = np.sqrt(mean_squared_log_error(y_train, y_pred))\nrmsle_val = np.sqrt(mean_squared_log_error(y_val, xg_reg.predict(X_val)))\n\nprint(\"RMSLE Train =====> %f\" % (round(rmsle_train,6)))\nprint('='*30)\nprint(\"RMSLE Validation ====> %f\"%(round(rmsle_val,6)))","ea0427ad":"print(\"Train Score = \",round(r2_score(y_pred, y_train)*100,2),\"%\")","ba0144d5":"plt.style.use('seaborn')\ny_pred = xg_reg.predict(X_train)\nprint(\"R-squared for train data\",xg_reg.score(X_train, y_train))\nsns.scatterplot(y_train, y_pred)\nplt.title('Train count Vs Prediction')\nplt.xlabel(\"y_train\")\nplt.ylabel(\"y_pred\")\nplt.show()","6e51ec77":"xgb_pred = [int(i) for i in xg_reg.predict(X_test)]","86101493":"useful_features = set(df_train.columns).difference([\"Day\",\"Snowfall\",\n                                                    \"Dew_Point_Temperature\",\n                                                    \"Friday\",\"Summer\",\"Y\"])","814138f1":"X_train, X_val, y_train, y_val = train_test_split(df_train[useful_features],\n                                                  df_train.Y,\n                                                  test_size=0.2,\n                                                  random_state=53)\n\nX_test = df_test[useful_features]\ny_train_log = np.log1p(y_train)","8c436582":"params = {'n_estimators': 240,\n          'max_depth': 4,\n          'random_state': 41,\n          'min_samples_leaf': 6,\n          'learning_rate': 0.1,\n          'subsample': 0.75,\n          'loss': 'ls'}\n\nreg = GradientBoostingRegressor(**params)\nreg.fit(X_train, y_train_log)\nval_pred = np.sqrt(mean_squared_log_error(y_val, np.exp(reg.predict(X_val))))\nprint(\"RMSLE Validation ====> \", val_pred)","a083bc86":"gboost_pred = [int(i) for i in np.exp(reg.predict(X_test))]","1abb8caa":"y_avg =(0.85*np.array(gboost_pred)+np.array(catBoost_pred)+np.array(xgb_pred))\/3","dd924f1d":"url = '..\/input\/seoul-bike-rental-ai-pro-iti\/sample_submission.csv'\nsample_submission = pd.read_csv(url,index_col='ID')\nsample_submission.y = [int(i) for i in y_avg]\nsample_submission.to_csv('submission.csv')","dfc8cc37":"y_tung =(0.9*np.array(gboost_pred)+np.array(catBoost_pred))\/2\nsample_submission.y = [int(i) for i in y_tung]\nsample_submission.to_csv('submission_temp.csv')","f4c0c95e":"## CatBoost","fa18fd7b":"## Data Feature\n\n- **Date** : datetime(day\/month\/year).\n- **y** : target feature.\n- **Hour** : hour of datetime.\n- **Temperature(\u00b0C)** : temperature in Celsius.\n- **Humidity(%)** : relative humidity.\n- **Wind speed (m\/s)** : wind speed.\n- **Visibility (10m)** : visibility range.\n- **Dew point temperature(\ufffdC)** : temperature of the air (at constant pressure).\n- **Solar Radiation (MJ\/m2)** : the total solar energy for a day.\n- **Rainfall(mm)** : represents the total depth of rainwater (mm), during 24 hours.\n- **Snowfall (cm)** : the amount of snow that falls in a given area or period of time.\n- **Seasons** : (Winter,Spring, Autumn, Summer).\n- **Holiday** : that day is holiday or not.\n- **Functioning Day** : working day or close.","db064c39":"## Data Summary","8f12424f":"**Train Validation Split**","6fda386b":"## Feature Selection","3dbe3a37":"**Save Prediction**","5544d348":"## XGBoost","323d8d2d":"**Import Needed Libraries**","04e93a86":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<span style='padding: 10px; font-family:Helvetica; font-size:30px' > Modeling <\/span>\n<\/div>","f3cceb34":"**This notebook explains how we can go about explore and prepare data for model building.**\n\n*The notebook is structured in the following way:*\n\n- About Dataset.\n- Data Summary.\n- Feature Engineering.\n- Model:\n    - CatBoost Model.\n    - XGBoost Model.\n    - Grediant Boost Model.","d8f7711f":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<span style='padding: 10px; font-family:Helvetica; font-size:30px' > Data Preparation <\/span>\n<\/div>","39ca8257":"## GBoost","1610a5db":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<span style='padding: 10px; font-family:Helvetica; font-size:30px' > About Dataset <\/span>\n<\/div>","0ad68c75":"![](https:\/\/raw.githubusercontent.com\/MhmdSyd\/needed_image\/main\/iti-kaggle.jpg)","785ce571":"### Seoul Bike \ud83d\udeb4\ud83c\udfff\u200d\u2640\ufe0f | Feature Engineering & Regression Model","ce6b6b54":"## Thanks For Read My NoteBook :)","cf9d222b":"## Feature Engineering"}}