{"cell_type":{"0fee2263":"code","b2777bd0":"code","f8e7d278":"code","b4227b6a":"code","4e215452":"code","82267aff":"code","94b6e489":"code","36155353":"code","aaa14a09":"code","d051d8d0":"code","11bc38fd":"code","ad2b1ba5":"code","12ba2a8f":"code","b9279fbd":"code","c6038573":"code","1035fd87":"code","ef882725":"code","37813b10":"code","66722063":"code","46c2e4c6":"code","87f61ded":"code","7bdbe963":"code","e331c39e":"code","ef277978":"code","67d8ffef":"code","7c2fb981":"code","06978fc7":"code","69b3269c":"code","1f6c2a70":"code","9019aa23":"markdown","4ef74088":"markdown","a3cfbcbe":"markdown","423925a1":"markdown","9eaf6ffe":"markdown","d8ca3ebf":"markdown","4288815c":"markdown","f59b243e":"markdown","1d8ffbc6":"markdown","e0d48e17":"markdown","7153dce5":"markdown"},"source":{"0fee2263":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2777bd0":"dataset = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","f8e7d278":"dataset.head()","b4227b6a":"dataset.info()","4e215452":"dataset = dataset.drop([\"id\"], axis = 1)","82267aff":"dataset = dataset.drop([\"Unnamed: 32\"], axis = 1)","94b6e489":"dataset.head(3)","36155353":"M = dataset[dataset.diagnosis == \"M\"]","aaa14a09":"M.head(5)","d051d8d0":"B = dataset[dataset.diagnosis == \"B\"]","11bc38fd":"B.head(5)","ad2b1ba5":"plt.title(\"Malignant vs Benign Tumor\")\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.scatter(M.radius_mean, M.texture_mean, color = \"red\", label = \"Malignant\", alpha = 0.3)\nplt.scatter(B.radius_mean, B.texture_mean, color = \"lime\", label = \"Benign\", alpha = 0.3)\nplt.legend()\nplt.show()","12ba2a8f":"dataset.diagnosis = [1 if i == \"M\" else 0 for i in dataset.diagnosis]","b9279fbd":"x = dataset.drop([\"diagnosis\"], axis = 1)\ny = dataset.diagnosis.values","c6038573":"# Normalization:\nx = (x - np.min(x)) \/ (np.max(x) - np.min(x))","1035fd87":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)","ef882725":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)","37813b10":"print(\"Naive Bayes score: \",nb.score(x_test, y_test))","66722063":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import linear_model\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import linear_model\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.cluster import KMeans\nfrom lightgbm import LGBMClassifier\nfrom sklearn import tree\nfrom sklearn.metrics import roc_auc_score","46c2e4c6":"knn = KNeighborsClassifier(n_neighbors=15)\nclf = knn.fit(x_train, y_train)\ny_pred = clf.predict(x_test)\nacc_knb_model=roc_auc_score(y_test, y_pred)*100\nacc_knb_model","87f61ded":"lr = LogisticRegression(C = 0.2)\nclf1 = lr.fit(x_train, y_train)\ny_pred1 = clf1.predict(x_test)\nacc_log_reg=roc_auc_score(y_test, y_pred1)*100\nacc_log_reg","7bdbe963":"clf3 = tree.DecisionTreeClassifier().fit(x_train, y_train)\ny_pred3 = clf3.predict(x_test)\nacc_dt=roc_auc_score(y_test, y_pred3)*100\nacc_dt","e331c39e":"clf4 = RandomForestClassifier(max_depth=5, random_state=0).fit(x_train, y_train)\ny_pred4 = clf4.predict(x_test)\nacc_rmf_model=roc_auc_score(y_test, y_pred4)*100\nacc_rmf_model","ef277978":"clf5 = SVC(gamma='auto').fit(x_train, y_train)\ny_pred5 = clf5.predict(x_test)\nacc_svm_model=roc_auc_score(y_test, y_pred5)*100\nacc_svm_model","67d8ffef":"sgd_model=SGDClassifier()\nsgd_model.fit(x_train,y_train)\nsgd_pred=sgd_model.predict(x_test)\nacc_sgd=round(sgd_model.score(x_train,y_train)*100,10)\nacc_sgd","7c2fb981":"xgb_model=XGBClassifier()\nxgb_model.fit(x_train,y_train)\nxgb_pred=xgb_model.predict(x_test)\nacc_xgb=round(xgb_model.score(x_train,y_train)*100,10)\nacc_xgb","06978fc7":"lgbm = LGBMClassifier()\nlgbm.fit(x_train,y_train)\nlgbm_pred=lgbm.predict(x_test)\nacc_lgbm=round(lgbm.score(x_train,y_train)*100,10)\nacc_lgbm","69b3269c":"regr = linear_model.LinearRegression()\nregr.fit(x_train,y_train)\nregr_pred=regr.predict(x_test)\nacc_regr=round(regr.score(x_train,y_train)*100,10)\nacc_regr","1f6c2a70":"results = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest','Stochastic Gradient Decent','Linear Regression','Naive Bayes','XGBoost','LightGBM','Decision Tree'],\n    'Score': [acc_svm_model, acc_knb_model, acc_log_reg, \n              acc_rmf_model,acc_sgd,acc_regr,nb.score(x_test,y_test)*100,acc_xgb,acc_lgbm,acc_dt]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df","9019aa23":"<a id = \"5\"><\/a>\n# 5. KNN with Sklearn","4ef74088":"Dataset information:\n\n* Dataset Characteristics: Multivariate\n* Attribute Characteristics: Real\n* Attribute Characteristics: Classification\n* Number of Instances: 569\n* Number of Attributes: 32\n* Missing Values: No","a3cfbcbe":"![](https:\/\/www.intelkit.com\/wp-content\/uploads\/2020\/04\/Naive-bayes-1.png)","423925a1":"> <a id = \"2\"><\/a>\n# 2. Getting Info About Dataset","9eaf6ffe":"<a id = \"4\"><\/a>\n# 4. Meaning Of Naive Bayes Algorithm","d8ca3ebf":"Now, let's get rid of \"id\" and \"Unnamed: 32\" features because we don't need to use them while diagnosing whether the patient has a cancer or not. ","4288815c":"# Naive Bayes Algorithm Implementation on Cancer Dataset","f59b243e":"<a id = \"1\"><\/a>\n\n## 1. Importing Dataset:","1d8ffbc6":"Column names and meanings:\n* id: ID number\n* diagnosis: The diagnosis of breast tissues (M = malignant, B = benign)\n* radius_mean: mean of distances from center to points on the perimeter\n* texture_mean: standard deviation of gray-scale values\n* perimeter_mean: mean size of the core tumor\n* area_mean: area of the tumor\n* smoothness_mean: mean of local variation in radius lengths\n* compactness_mean: mean of perimeter^2 \/ area - 1.0\n* concavity_mean: mean of severity of concave portions of the contour\n* concave_points_mean: mean for number of concave portions of the contour\n* symmetry_mean\n* fractal_dimension_mean: mean for \"coastline approximation\" - 1\n* radius_se: standard error for the mean of distances from center to points on the perimeter\n* texture_se: standard error for standard deviation of gray-scale values\n* perimeter_se\n* area_se\n* smoothness_se: standard error for local variation in radius lengths\n* compactness_se: standard error for perimeter^2 \/ area - 1.0\n* concavity_se: standard error for severity of concave portions of the contour\n* concave_points_se: standard error for number of concave portions of the contour\n* symmetry_se\n* fractal_dimension_se: standard error for \"coastline approximation\" - 1\n* radius_worst: \"worst\" or largest mean value for mean of distances from center to points on the perimeter\n* texture_worst: \"worst\" or largest mean value for standard deviation of gray-scale values\n* perimeter_worst\n* area_worst\n* smoothness_worst: \"worst\" or largest mean value for local variation in radius lengths\n* compactness_worst: \"worst\" or largest mean value for perimeter^2 \/ area - 1.0\n* concavity_worst: \"worst\" or largest mean value for severity of concave portions of the contour\n* concave_points_worst: \"worst\" or largest mean value for number of concave portions of the contour\n* symmetry_worst\n* fractal_dimension_worst: \"worst\" or largest mean value for \"coastline approximation\" - 1","e0d48e17":"## Content:\n\n1. [Importing Dataset](#1)\n1. [Getting Info About Dataset](#2)\n1. [Dataset Visualization](#3)\n1. [Meaning Of Naive Bayes Algorithm](#4)\n1. [Naive Bayes with Sklearn](#5)","7153dce5":"<a id = \"3\"><\/a>\n# 3. Dataset Visualization "}}