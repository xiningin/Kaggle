{"cell_type":{"d8c3e277":"code","1f817170":"code","5f2e1e7d":"code","fe673b3b":"code","b4ea1796":"code","51194cf7":"code","d7e074b0":"code","082b618b":"code","1eef6aea":"code","50c13775":"code","fb59f3e1":"code","4353084b":"code","d42e7910":"code","03a264bb":"code","e9c256e4":"code","b04bd96e":"code","5286570a":"code","5ac3d05b":"code","5e08eabe":"code","31f5afc7":"code","ae30078e":"code","cf730c48":"code","d5ffab02":"code","b77fd238":"markdown","506f0512":"markdown","3e6a01a0":"markdown","44a97bc9":"markdown","5cc540a2":"markdown","1550c8fa":"markdown","bfc9019a":"markdown","8cd2f3e4":"markdown","40986811":"markdown","6233ef90":"markdown","1d0b363f":"markdown","0e9c79e4":"markdown","c4f60a86":"markdown","758008d3":"markdown","e96fd68f":"markdown"},"source":{"d8c3e277":"#imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go","1f817170":"df= pd.read_csv('\/kaggle\/input\/dogecoin-historical-data20172021\/Dogecoin Historical Data.csv')","5f2e1e7d":"#basic information\ndf.info()","fe673b3b":"#EDA\ndf.describe()","b4ea1796":"#graph the data\ntemp= df.sort_index(ascending=False)\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Price'],\n                    name='Price'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['High'],\n                    name='High'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Low'],\n                    name='Low'))\n\nfig.update_layout(\n    title=\"DogeCoin\",\n    xaxis_title=\"days\",\n    yaxis_title=\"Value in USD\",\n    \n    )\n\nfig.show()","51194cf7":"#convert the object type columns to numerical type\ndf","d7e074b0":"#change the value from - to 0.0, then convert all string to float\ndf.loc[1396, 'Vol.']='0.0'\ndf['Volx1M']=df['Vol.'].apply(lambda x : float(x[:-1]) if x[-1] == 'M' else float(x[:-1])*1000 )\ndf['Change %']=df['Change %'].apply(lambda x : float(x.replace(',','')[:-1]))","082b618b":"#graph the data\n\ntemp= df.sort_index(ascending=False)\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=(temp['Change %'] - temp['Change %'].min()) \/ (temp['Change %'].max() - temp['Change %'].min()),\n                    name='Change'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=(temp['Volx1M'] - temp['Volx1M'].min()) \/ (temp['Volx1M'].max() - temp['Volx1M'].min()),\n                    name='Volume'))\nfig.add_trace(go.Scatter(x=temp['Date'], y=(temp['Open'] - temp['Open'].min()) \/ (temp['Open'].max() - temp['Open'].min()),\n                    name='open'))\n\nfig.update_layout(\n    title=\"DogeCoin\",\n    xaxis_title=\"Days\",\n    yaxis_title=\"\",\n    \n    )\n\nfig.show()","1eef6aea":"df.describe()","50c13775":"df= df.sort_index(ascending=False).reset_index() #sort data from 2017 to 2021\ndf.drop(['index','Date', 'Vol.'], axis=1, inplace=True) #drop unimportant columns\ndf['target']= df['Price'].shift(-1) #create target column by shifting the price column by 1\n#save the last point may,7,2021 then drop it\nlast_point= df.loc[1434]\ndf.drop(1434, inplace=True)","fb59f3e1":"df.corr()['Price'].plot(kind='bar')#graph the corrleation","4353084b":"df.drop(['Open', 'Low', 'High'], axis=1, inplace=True) #drop the unimportant columns","d42e7910":"#method 1\nfrom sklearn.model_selection import train_test_split\nx=df.drop('target', axis=1)\ny=df['target']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","03a264bb":"#data normalization\nfrom sklearn.preprocessing import MinMaxScaler\nscaler= MinMaxScaler()\nx_train= scaler.fit_transform(x_train)\nx_test= scaler.transform(x_test)","e9c256e4":"#reshape data to [samples, timestep, features]\nx_train=np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))\nx_test=np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))","b04bd96e":"#build the model\nimport tensorflow.keras as keras\nmodel= keras.Sequential()\nmodel.add(keras.layers.LSTM(3, input_shape=(x_train.shape[1], x_train.shape[2]), return_sequences=True))\nmodel.add(keras.layers.LSTM(16, return_sequences=True))\nmodel.add(keras.layers.LSTM(32))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')","5286570a":"model.fit(x_train, y_train, epochs=100, validation_data=(x_test, y_test))","5ac3d05b":"fig = go.Figure()\nfig.add_trace(go.Scatter( y=model.history.history['loss'],\n                    name='loss'))\nfig.add_trace(go.Scatter( y=model.history.history['val_loss'],\n                    name='val_loss'))\n\nfig.update_layout(\n    title=\"Loss vs Val_Loss\",\n    xaxis_title=\"epochs\",\n    yaxis_title=\"loss_value\",\n    \n    )","5e08eabe":"pred = model.predict(x_test)\nfig = go.Figure()\nfig.add_trace(go.Scatter( y=y_test,\n                    name='actual_data'))\nfig.add_trace(go.Scatter( y=pred.reshape(pred.shape[0]),\n                    name='pred_data'))\nfig.update_layout(\n    title=\"Price of Dogecoin (Test Data)\",\n    xaxis_title=\"index\",\n    yaxis_title=\"Price in USD\",\n    \n    )","31f5afc7":"test= df[round(len(df)*0.8):]\nx_test=test.drop('target', axis=1)\ny_test=test['target']\nx_test= scaler.transform(x_test)\nx_test=np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))\npred= model.predict(x_test)","ae30078e":"fig = go.Figure()\nfig.add_trace(go.Scatter( y=y_test,\n                    name='actual_data'))\nfig.add_trace(go.Scatter( y=pred.reshape(pred.shape[0]),\n                    name='pred_data'))\n\nfig.update_layout(\n    title=\"Price of Dogecoin (Last 20%)\",\n    xaxis_title=\"index\",\n    yaxis_title=\"Price in USD\",\n    \n    )\n","cf730c48":"x=df.drop('target', axis=1)\ny=df['target']\n\nx=scaler.transform(x)\nx= x.reshape(x.shape[0], 1, x.shape[1])\npred= model.predict(x)","d5ffab02":"fig = go.Figure()\nfig.add_trace(go.Scatter( y=y,\n                    name='actual_data'))\nfig.add_trace(go.Scatter( y=pred.reshape(pred.shape[0]),\n                    name='pred_data'))\n\nfig.update_layout(\n    title=\"Price of Dogecoin (Full Data)\",\n    xaxis_title=\"index\",\n    yaxis_title=\"Price in USD\",\n    \n    )","b77fd238":"There is little to no devation in data.","506f0512":"# RNN Model","3e6a01a0":"# Splitting data  \n","44a97bc9":"# Graphing Model predictions","5cc540a2":"Note: model could not predict the abnormal increase in price at index 955","1550c8fa":"# Conclusion  \nGiven the sudden changes in the data especially in the last 20% the model performed quite well.  \nIn the future i could use transformers instead of LSTM and see how it affects performance.","bfc9019a":"# Goal of the notebook.  \nMy aim is to analyze the trends in doge coin market prices. And to build a deeplearning network to predict the future price of DogeCoin.  \nMy [Github](https:\/\/github.com\/FancyWhale69\/DogeCoin_Analasys_And_Deeplearning).  \n\nNote: you need to run the cells to view the graphs.","8cd2f3e4":"After converting Vol. and Change % to numircal values, we can observe that they have high devation which is also supported by graph above","40986811":"As shwon in the EDA above the data follows the same line with little or no deviation at all.","6233ef90":"# Evaluation  \nSince accuracy can't be used, instead squared_mean_error will be used. And since we difined our loss function as squared_mean_error we can use the Val_loss as our metric (the lower the better)","1d0b363f":"# Explotary Data Analysis","0e9c79e4":"The graph shows that the open, low, and high attributes do not add any usefull information in predicting the price therefore dropping them will not affect the model's performance.","c4f60a86":"## Terms meaning:  \nPrice  :the current value for investors to buy\/sell.  \nOpen   :Opening price for the day.  \nHigh   :Highest price during the day.  \nLow    :Lowest price during the day.  \nVol.   :total number of shares traded in a security over a period(day).  \nChange :Change in Price from day to day.","758008d3":"graph shows that no over fitting occured during training","e96fd68f":"## Data-set  \nData set is provided by Tarandeep Singh on [Kaggle](https:\/\/www.kaggle.com\/tarandeep97\/dogecoin-historical-data20172021)"}}