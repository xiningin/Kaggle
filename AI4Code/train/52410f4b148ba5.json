{"cell_type":{"8a534a94":"code","7276c1f7":"code","e24c8c76":"code","1cd7218f":"code","a488840f":"code","9016fd3e":"code","eefeb779":"code","87bd8a74":"markdown","ed42b45a":"markdown","f05beac4":"markdown","5dbefffd":"markdown","1453bdd7":"markdown"},"source":{"8a534a94":"import numpy as np\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport tqdm\nimport cv2","7276c1f7":"data = pd.read_csv('..\/input\/sartorius-cell-instance-segmentation\/train.csv')","e24c8c76":"data.head()","1cd7218f":"file_names = data['id'].unique()","a488840f":"def rle_decode(mask_rle, shape, color=1):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0] * shape[1], dtype=np.float32)\n    for lo, hi in zip(starts, ends):\n        img[lo : hi] = color\n    return img.reshape(shape)","9016fd3e":"sum = 0\nfor file in tqdm.tqdm(file_names):\n    main_image = np.zeros(520*704, dtype=np.float32)\n    main_image = main_image.reshape((520,704))\n    #main_image = np.zeros([520,704])\n    get_all_codes = data[data['id'] == file]\n    get_all_codes = get_all_codes.reset_index()\n    for d in range(len(get_all_codes)):\n        #print(get_all_codes.loc[d]['id'])\n        location = '.\/'\n        try:\n            im = rle_decode(get_all_codes.loc[d]['annotation'],(get_all_codes.loc[d]['height'],get_all_codes.loc[d]['width']))\n            main_image = cv2.bitwise_or(main_image,im)\n        except Exception as e:\n            sum+=1\n    # save masks as png image\n    cv2.imwrite(location+file+'.png',main_image)\nprint(sum)","eefeb779":"image = cv2.imread('.\/0a6ecc5fe78a.png',0)\nplt.imshow(image,'gray')","87bd8a74":"#### Decoding\nEven decoding the output is quite straightforward. Whenever you encounter a number, add the character preceeding it that many number of times in your final string.\nFor example, A3D5G7 gets decoded to AAADDDDDGGGGGGG.","ed42b45a":"#### Understanding the Algorithm\nLet's take the input string as \"wwwwbbbwwwwwbbbbb\". At each step we identify the next character, count it's subsequent occurences and append the character followed by it's number of occurances to the code.\n","f05beac4":"#### Decoding Masks for this competition","5dbefffd":"#### Psuedo Code\n1. Start with an empty string for the code, and start traversing the string.\n2. Pick the first character and append it to the code.\n3. Now count the number of subsequent occurances of the currently chosen character and append it to the code.\n4. When you encounter a different character, repeat the above steps.\n5. In a similar manner, traverse the entire string and generate the code.","1453bdd7":"Images are among the most common and popular representations of data. Digital images are used for professional and personal use ranging from official documents to social media. Thus, any Organization or individual needs to store and share a large number of images. One of the most common issues associated with using images is the potentially large file-size of the image. Advancements in image acquisition technology and an increase in the popularity of digital content means that images now have very high resolutions and high quality, inevitably leading to an increase in size. Image compression has become one of the most important parts of image processing these days due to this. The goal is to achieve the least size possible for an image while not compromising on the quality of the image, that gives us the perfect balance."}}