{"cell_type":{"bf88ac1c":"code","204f1ade":"code","51897eb9":"code","05992c9c":"code","c8944350":"code","a3d9c2fd":"code","0e05d1f6":"code","80c3a908":"code","3c070811":"code","62579a5e":"code","52f46127":"code","286ea6a9":"code","31d62cfc":"code","5cebf234":"code","f36af801":"code","d3e3f8bf":"code","62e8ffd7":"code","e70c18aa":"code","94bf45c5":"code","d7437f7a":"code","440fde35":"code","87ad89ef":"code","a951bbe2":"code","bd31f1f0":"code","88e0fb2c":"code","e3bd808d":"code","6783b767":"code","3a12d974":"code","f41284c8":"code","49862e0a":"code","41ed4be8":"code","384e6e04":"code","f8b15438":"code","e5963aae":"code","8cbd84b2":"code","16db5bc6":"code","0d271fd0":"code","9438e03f":"code","af108e97":"code","bf28b24d":"code","455d2e6a":"code","3ebfe983":"code","a5dfd466":"code","d5ade26f":"markdown","2aeeedd3":"markdown","3b861603":"markdown","28fca450":"markdown","2724a696":"markdown","1cd4d8f0":"markdown","cb637e44":"markdown","46b4ac2d":"markdown","3cd4150e":"markdown","6d37c841":"markdown","bd901a4e":"markdown","3f73da29":"markdown","63351338":"markdown","364b0a63":"markdown","9e7581f2":"markdown","f558c122":"markdown","b8e40415":"markdown","10a3218d":"markdown","9609f556":"markdown","4e366aca":"markdown","e739af45":"markdown","7b786497":"markdown"},"source":{"bf88ac1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","204f1ade":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","51897eb9":"dataset = pd.read_csv('..\/input\/insurance.csv')","05992c9c":"dataset.shape","c8944350":"dataset.columns","a3d9c2fd":"dataset.info()","0e05d1f6":"dataset.describe()","80c3a908":"dataset.describe(include = ['O'])","3c070811":"dataset['region'].unique()","62579a5e":"dataset['sex'].unique()","52f46127":"dataset['smoker'].unique()","286ea6a9":"#you can do it by mapping\ndataset['sex'] = dataset['sex'].map({'male':1,'female':0})\n\n#you can do by looping\ndataset.smoker = [1 if each=='yes' else 0 for each in dataset.smoker]","31d62cfc":"dataset.head(10)","5cebf234":"dataset.describe()","f36af801":"dataset_normal = dataset.copy()\ndataset_normal['bmi'] = (dataset_normal['bmi'] - np.min(dataset_normal['bmi']))\/(np.max(dataset_normal['bmi']) - np.min(dataset_normal['bmi']))\ndataset_normal['charges'] = (dataset_normal['charges'] - np.min(dataset_normal['charges']))\/(np.max(dataset_normal['charges']) - np.min(dataset_normal['charges']))","d3e3f8bf":"dataset_normal.head(10)","62e8ffd7":"dummy = pd.get_dummies(dataset_normal['region'],drop_first = True)","e70c18aa":"dataset_normal = pd.concat([dataset_normal,dummy],axis=1)","94bf45c5":"dataset_normal.drop('region',axis=1,inplace = True)","d7437f7a":"dataset_normal.head(15)","440fde35":"x = dataset_normal.copy()\nx.drop('charges',axis=1,inplace=True)","87ad89ef":"y = dataset_normal.iloc[:,5:6]","a951bbe2":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=0,test_size=0.3)","bd31f1f0":"from sklearn.linear_model import LinearRegression\nlr_mlr = LinearRegression()\nlr_mlr.fit(x_train,y_train)","88e0fb2c":"y_pred_lr = lr_mlr.predict(x_test)\nplt.figure(figsize=(10,7))\nc = [i for i in range(402)]\nplt.plot(c,y_test-y_pred_lr,'-')\nplt.show()","e3bd808d":"from sklearn.metrics import mean_squared_error,r2_score\nmse = mean_squared_error(y_test,y_pred_lr)\nr2 = r2_score(y_test,y_pred_lr)\nprint(mse)\nprint(r2)","6783b767":"import statsmodels.api as sm\nx_train_sm = sm.add_constant(x_train)\nlr_sm_1 = sm.OLS(y_train,x_train_sm).fit()\nprint(lr_sm_1.summary())","3a12d974":"x_train_sm.drop('sex',axis=1,inplace=True)\nimport statsmodels.api as sm\nlr_sm_2 = sm.OLS(y_train,x_train_sm).fit()\nprint(lr_sm_2.summary())","f41284c8":"x_train_sm.drop('northwest',axis=1,inplace=True)\nimport statsmodels.api as sm\nlr_sm_3 = sm.OLS(y_train,x_train_sm).fit()\nprint(lr_sm_3.summary())","49862e0a":"x_train_sm.drop(['southeast','southwest'],axis=1,inplace=True)\nimport statsmodels.api as sm\nlr_sm_4 = sm.OLS(y_train,x_train_sm).fit()\nprint(lr_sm_4.summary())","41ed4be8":"from sklearn.preprocessing import PolynomialFeatures\nlr_pr = PolynomialFeatures(degree=3)\nx_train_poly = lr_pr.fit_transform(x_train)\nx_test_poly = lr_pr.fit_transform(x_test)\nlr_pr1 = LinearRegression()\nlr_pr1.fit(x_train_poly,y_train)","384e6e04":"y_pred_poly = lr_pr1.predict(x_test_poly)","f8b15438":"c = [i for i in range(402)]\nplt.figure(figsize=(10,7))\nplt.plot(c,y_test-y_pred_poly,'-')\nplt.show()","e5963aae":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_poly)\nr2 = r2_score(y_test,y_pred_poly)\nprint(mse)\nprint(r2)","8cbd84b2":"from sklearn.svm import SVR\nlr_svr = SVR(kernel='linear')\nlr_svr.fit(x_train,y_train)","16db5bc6":"y_pred_svr = lr_svr.predict(x_test)","0d271fd0":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_svr)\nr2 = r2_score(y_test,y_pred_svr)\nprint(mse)\nprint(r2)","9438e03f":"from sklearn.tree import DecisionTreeRegressor\nlr_dtr = DecisionTreeRegressor(random_state=0)\nlr_dtr.fit(x_train,y_train)","af108e97":"y_pred_dtr = lr_dtr.predict(x_test)\nplt.figure(figsize=(10,7))\nplt.plot(c,y_test,'-')\nplt.plot(c,y_pred_dtr,'-o')\nplt.show()","bf28b24d":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_dtr)\nr2 = r2_score(y_test,y_pred_dtr)\nprint(mse)\nprint(r2)","455d2e6a":"from sklearn.ensemble import RandomForestRegressor\nlr_rfr = RandomForestRegressor(n_estimators=100,max_depth=7,random_state=100)\nlr_rfr.fit(x_train,y_train)","3ebfe983":"y_pred_rfr = lr_rfr.predict(x_test)\nplt.figure(figsize=(10,7))\nplt.plot(c,y_test,'-')\nplt.plot(c,y_pred_rfr,'-o')\nplt.show()","a5dfd466":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_rfr)\nr2 = r2_score(y_test,y_pred_rfr)\nprint(mse)\nprint(r2)","d5ade26f":"77% accuracy...","2aeeedd3":"71% accurate...","3b861603":"Getting ready the test and train data:","28fca450":"removing southwest and southeast column","2724a696":"All values are available. No NaN values.","1cd4d8f0":"Random Forest Regression","cb637e44":"**Heading further to plynomial Regression-->**","46b4ac2d":"**multiple linear regression**","3cd4150e":"85% accuracy . Gorgeous...","6d37c841":"**Importing Libraries**","bd901a4e":"87% accurate.","3f73da29":"> **Upvote if you like this regression**","63351338":"Things to do :\n    1. normalise charges columns\n    2. normalise bmi column\n    3. Label encode the region column\n    4. Visualise children column","364b0a63":"Support Vector Regression","9e7581f2":"We need to encode these categorize variables...","f558c122":"Removing northwest column","b8e40415":"Decision Tree Regression","10a3218d":"Lets check our data first, so to see what we can do further. Keep in mind that region column is still categorical...","9609f556":"**Importing dataset**","4e366aca":"79% accurate model. Now,lets check with OLS mothod","e739af45":"Removing sex column","7b786497":"**Getting some information from the dataset : **"}}