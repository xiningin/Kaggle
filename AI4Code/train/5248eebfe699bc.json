{"cell_type":{"14a61230":"code","461d1714":"code","5273f89d":"markdown"},"source":{"14a61230":"#! \/bin\/env python3\n\nimport json\nimport os\nimport pprint\nfrom dataclasses import dataclass\nfrom typing import List\nfrom enum import Enum\n\n\nclass EntityType(Enum):\n    CELL_LINE = 'CellLine'\n    MUTATION = 'Mutation'\n    SPECIES = 'Species'\n    GENUS = 'Genus'\n    STRAIN = 'Strain'\n    GENE = 'Gene'\n    DOMAIN_MOTIF = 'DomainMotif'\n    CHEMICAL = 'Chemical'\n    DISEASE = 'Disease'\n\nclass SectionType(Enum):\n    TITLE = 'title'\n    ABSTRACT = 'abstract'\n    INTRODUCTION = 'introduction'\n    METHODS = 'methods'\n    CONCLUSION = 'conclusion'\n    RESULTS = 'results'\n    DISCUSSION = 'discussion'\n    REFERENCES = 'references'\n    OTHER = 'other'\n\n@dataclass\nclass Location:\n    offset: int\n    length: int\n\n@dataclass\nclass Entity:\n    type: EntityType\n    text: str\n    location: List[Location]\n    source: SectionType\n\n@dataclass\nclass Section:\n    text: str\n    section_type: SectionType\n\n@dataclass\nclass Paper:\n    id: str\n    _id: str\n    entities: List[Entity]\n    sections: List[Section]\n    \n\ndef resolveSectionType(section_str: str) -> SectionType:\n    for st in SectionType:\n        if section_str.lower().find(st.value):\n            return st\n    return SectionType.OTHER\n\n        \npaper_limit = 3000#float(\"inf\")\ncurrent_index = 0\n\nprocessed_papers:List[Paper] = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/cord19-named-entities\/entities\/pmcid'):\n    for filename in filenames:\n        current_index += 1\n        if current_index > paper_limit:\n            break\n        with open(os.path.join(dirname, filename), 'r') as f:\n            data = json.load(f)\n            title = abstract = None\n            entities = []\n            sections = []\n            for passages in data['passages']:\n                section_type = resolveSectionType(passages['infons']['section'])\n                sections.append(\n                    Section(\n                        section_type,\n                        passages['text']\n                    )\n                )\n                for extracted_entity in passages['annotations']:\n                    entities.append(\n                        Entity(\n                            EntityType(extracted_entity['infons']['type']),\n                            extracted_entity['text'],\n                            [Location(l['offset'], l['length']) for l in extracted_entity['locations']],\n                            section_type,\n                        )\n                    )\n            processed_papers.append(\n                Paper(\n                    data['id'],\n                    data['_id'],\n                    entities,\n                    sections,\n                )\n            )\n\nprint('--data loaded--')\nprint('# of papers: ', len(processed_papers))\nentity_number = sum([\n    len(paper.entities)\n    for paper in processed_papers\n])\nprint('# of entities: ', entity_number)","461d1714":"import csv\n\ninterested_entities = [\n    ('species', [EntityType.SPECIES]),\n    ('chemicals', [EntityType.CHEMICAL]),\n    ('diseases_strains', [EntityType.DISEASE, EntityType.STRAIN]),\n    (\n        'mutations_genes_cellLines',\n        [EntityType.MUTATION, EntityType.GENE, EntityType.CELL_LINE]\n    ),\n]\n\nfor entity_names, entity_types in interested_entities:\n    entities_by_paper = [\n        set([(e.text, e.type) for e in entities])\n        for entities in [\n            paper.entities\n            for paper in processed_papers\n        ]\n    ]\n    entities = [\n        entity[0]\n        for entity_set in entities_by_paper \n        for entity in entity_set\n        if entity[1] in entity_types\n    ]\n    counts = [\n        (entity, entities.count(entity))\n        for entity in set(entities)\n    ]\n    # Take the top 1K\n    most_common = sorted(\n        counts, \n        key=lambda s: s[1], \n        reverse=True\n    )[:1000]\n    \n    with open(entity_names + '.tsv', 'w') as tsvfile:\n        writer = csv.writer(tsvfile, delimiter='\\t')\n        writer.writerow([\"Type\", \"Count\"])\n        for row in most_common:\n            writer.writerow(row)\n\n    print('Total of', len(entities), 'tallied  for', entity_names)","5273f89d":"Simple script to tally the 1K most commonly extracted:\n * species\n * chemicals\n * diseases\/strains\n * mutations\/genes\/cellLines\n\nThe CORD-19 KG contains edges between chemicals\/genes, genes\/diseases, chemicals\/diseases.\nAnd can be used for a lot more than just this simple tally."}}