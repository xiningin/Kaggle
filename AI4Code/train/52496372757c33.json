{"cell_type":{"8fad63ec":"code","86c5d979":"code","cf1ce135":"code","be34842e":"code","ec71ef95":"code","9f760f53":"code","880f0c43":"code","d9c08fd5":"code","31f170e9":"code","5dbbed29":"code","5262df33":"code","6a5fd389":"code","4fdecbd9":"code","def3ebbc":"code","84d27460":"code","3e4794ef":"code","23129a2b":"code","79a8266f":"code","56359861":"markdown","611bc305":"markdown"},"source":{"8fad63ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86c5d979":"df_train=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv',parse_dates=['Date'])\ndf_test=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv',parse_dates=['Date'])","cf1ce135":"# \u5c55\u793a\u8bad\u7ec3\u6837\u672c\nprint(df_train.shape)\ndf_train.head()","be34842e":"# \u6d4b\u8bd5\u6570\u636e\nprint(df_test.shape)\ndf_test.head()","ec71ef95":"# \u5408\u5e76\u6d4b\u8bd5\u4e0e\u8bad\u7ec3\u6570\u636e\u96c6\ndf_test.rename(columns={'ForecastId':'Id'}, inplace=True)\ndf_test['Id'] = df_test['Id'].astype('str')+'a'\ndf = pd.concat([df_train, df_test], axis =0).copy()\ndf","9f760f53":"df.Date = pd.to_datetime(df.Date)\ndf['Day']=df['Date'].dt.day\ndf['Month']=df['Date'].dt.month\ndf['Day of the week']=df['Date'].dt.dayofweek\ndf['isweekend']=np.where(df['Day of the week'].isin([5,6]),1,0)","880f0c43":"df","d9c08fd5":"# \u5c06\u6807\u7b7e\u8fdb\u884c\u8f6c\u6362\u62100-1\u53d8\u91cf\nfrom sklearn.preprocessing import LabelEncoder\nTarget_label_encoder=LabelEncoder()\ndf['Target_label']=Target_label_encoder.fit_transform(df.Target)","31f170e9":"df[df['Id'].str.contains('a').isnull()]","5dbbed29":"X=df[df['Id'].str.contains('a').isnull()][['Population', 'Weight', 'Day', 'Month', 'Day of the week', 'isweekend', 'Target_label']]\nX","5262df33":"y=df[df['Id'].str.contains('a').isnull()]['TargetValue']\ny","6a5fd389":"# \u7f29\u5c0f\u5c06y<0\u7684\u503c\u5220\u6389\nX=X.loc[y[y>=0].index]\ny=y[y>=0]","4fdecbd9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","def3ebbc":"from sklearn.tree import DecisionTreeClassifier #Decision Tree\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)\nprint(model.score(X_train,y_train))\nprint(model.score(X_test,y_test))\n\n","84d27460":"# \u9884\u6d4b\uff0c\u7ed3\u679c\u4e3aop\ndf_test_fin=df[df['Id'].str.contains('a').notnull()][['Population', 'Weight', 'Day', 'Month', 'Day of the week', 'isweekend', 'Target_label']]\nop = model.predict(df_test_fin)\ndf_sub=pd.DataFrame(df_test.index+1,columns=['Id'])\ndf_sub['TargetValue'] = op","3e4794ef":"a=df_sub.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=df_sub.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=df_sub.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()\n\n\na.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)","23129a2b":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.head()","79a8266f":"sub.to_csv(\"submission.csv\",index=False)","56359861":"### Feature Generation","611bc305":"### Modeling"}}