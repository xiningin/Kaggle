{"cell_type":{"2185f71c":"code","855d6e12":"code","fba964c5":"code","12ed1413":"code","178ae74c":"code","9ecb907e":"markdown","7cbda782":"markdown","35e02edc":"markdown","ebd816da":"markdown","41c7b3f1":"markdown","85230b3a":"markdown","0773649d":"markdown","07658031":"markdown"},"source":{"2185f71c":"import time\nimport warnings\nimport numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom tensorflow.random import set_seed\nfrom keras.layers.core import Dense, Flatten\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\n\nwarnings.simplefilter(\"ignore\")\n\nrandom_state = 1\n\nnp.random.seed(random_state)\nset_seed(random_state)","855d6e12":"path = '\/kaggle\/input\/forest-cover-type-dataset\/covtype.csv'\n\nclass covertype():\n\n    df = pd.read_csv(path)\n    X = df.drop('Cover_Type', axis=1)\n    y = df['Cover_Type']\n\n    def train(self, random_state):\n        x_train, x_test, y_train, y_test = train_test_split(\n            self.X, self.y, test_size=0.3, random_state=random_state)\n\n        ytrain = to_categorical(y_train.astype(int).to_numpy())\n        ytest = to_categorical(y_test.astype(int).to_numpy())\n\n        return x_train, x_test, ytrain, ytest","fba964c5":"x_train = covertype().train(random_state)[0]\nx_test = covertype().train(random_state)[1]\ny_train = covertype().train(random_state)[2]\ny_test = covertype().train(random_state)[3]","12ed1413":"class dnn():\n\n    def fit(self,\n            x_train,\n            y_train,\n            x_test,\n            y_test,\n            n_classes,\n            input_dim,\n            title):\n\n        model = Sequential()\n        model.add(Dense(100, input_dim=input_dim, activation='relu'))\n        model.add(Dense(100, activation='relu'))\n        D = Dense(100, activation='relu')\n        model.add(D)\n        model.add(Flatten())\n        E = Dense(n_classes, activation='sigmoid')\n        model.add(E)\n\n        model.compile(loss='categorical_crossentropy',\n                      optimizer='adam', metrics=['accuracy'])\n\n        print(model.summary())\n\n        t0 = time.time()\n        model.fit(x_train, y_train,\n                  batch_size=128,\n                  epochs=100,\n                  verbose=0,\n                  validation_data=(x_test, y_test))\n        t1 = time.time()\n\n        score = model.evaluate(x_test,\n                               y_test,\n                               verbose=0)\n        print('Test score:', score[0])\n        print('Test accuracy:', score[1])\n        print('Training time:', t1-t0)","178ae74c":"if __name__ == \"__main__\":\n    dnn().fit(x_train,\n              y_train,\n              x_test,\n              y_test,\n              8,\n              x_train.shape[1],\n              'cover_type')","9ecb907e":"# Importing packages","7cbda782":"### Author: [Seyedsaman Emami](https:\/\/github.com\/samanemami)\n\nIf you want to have this method or use the outputs of the notebook, you can fork the Notebook as following (copy and Edit Kernel).\n\n<img src=\"https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1101107%2F8187a9b84c9dde4921900f794c6c6ff9%2FScreenshot%202020-06-28%20at%201.51.53%20AM.png?generation=1593289404499991&alt=media\" alt=\"Copyandedit\" width=\"300\" height=\"300\" class=\"center\">\n\nI tried to keep everything as simple as possible, if you have any doubts or questions, please feel free to ask in the comments.","35e02edc":"# Reading in files","ebd816da":"# Running the deep-model\n\nEpoch 100 for the training","41c7b3f1":"# Defining the variables","85230b3a":"# About this Script\n\n## Author: Seyedsaman Emami\n\nIn the following notebook, I considered the cover type dataset which is a multi-class classification problem. \nFor the modeling, I defined three-layer deep neural networks and trained them with the dataset.\nThe hyperparameters of the model are as follows;\n```Python\n{batch_size=128, epochs=100, optimizer='adam'}\n```\nThe model consists of three hidden layers and 100 neurons with the relu as its activation function.\n\nPlease find the model performance at the end in terms of the training time and model accuracy.\n\n<hr>\n\n## You can find some of my developments [here](https:\/\/github.com\/samanemami?tab=repositories).\n\n<hr>","0773649d":"<h3 >The Sequential model from the Keras lib with three dense layers and an output layer with a size of 8<\/h3>","07658031":"# Model implementation"}}