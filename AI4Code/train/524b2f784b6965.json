{"cell_type":{"26bef0e0":"code","f7f1c7d1":"code","fd94afa4":"code","380901ec":"code","cd065a81":"code","c91d262d":"code","15ffeec9":"code","3f011589":"code","379695a5":"code","b09beca1":"code","496773ee":"code","c3346177":"code","c569cd7c":"code","e231e0d6":"code","cb35709b":"code","0e6c9c92":"code","dc59a9b7":"code","545d4d81":"code","a4a116c2":"code","a224d6e5":"code","9c78d777":"code","70a79fd5":"code","0a053050":"code","5c3ac5f4":"code","2eb9e30a":"code","ad52edc2":"code","e45f995e":"markdown","30b952b3":"markdown","0c668f63":"markdown","80381222":"markdown","efc9bf96":"markdown","0860f734":"markdown","a4c24525":"markdown","a2e2e613":"markdown","064a69ae":"markdown","c4d8ce11":"markdown","7f504fc8":"markdown","ef7ba58c":"markdown","b43808de":"markdown"},"source":{"26bef0e0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Conv2D,MaxPool2D,Dropout,Dense,Flatten,Activation,BatchNormalization\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.losses import categorical_crossentropy\nfrom keras.callbacks import LearningRateScheduler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom IPython.display import clear_output,FileLink\n\nclear_output()","f7f1c7d1":"from keras.backend import tensorflow_backend\ntensorflow_backend._get_available_gpus()","fd94afa4":"train=pd.read_csv(r'..\/input\/train.csv')\ntest=pd.read_csv(r'..\/input\/test.csv')","380901ec":"data=train.iloc[:,1:].values\ndata=data.reshape(-1,28,28,1)\/255","cd065a81":"labels=pd.get_dummies(train.iloc[:,0]).values","c91d262d":"fig,ax=plt.subplots(5,10)\nfor i in range(5):\n    for j in range(10):\n        ax[i][j].imshow(data[np.random.randint(0,data.shape[0]),:,:,0],cmap=plt.cm.binary)\n        ax[i][j].axis('off')\nplt.subplots_adjust(wspace=0, hspace=0)        \nfig.set_figwidth(15)\nfig.set_figheight(7)\nfig.show()","15ffeec9":"X_train,X_val,y_train,y_val=train_test_split(data,labels,test_size=0.33,random_state=42)","3f011589":"aug_data=ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)","379695a5":"fig,ax=plt.subplots(3,10)\nidx=np.random.randint(0,data.shape[0])\nfor i in range(3):\n    for j in range(10):\n        ax[i][j].axis('off')\n        X,y=aug_data.flow(data[idx].reshape(-1,28,28,1),labels[idx].reshape(1,10)).next()\n        ax[i][j].imshow(X.reshape(28,28),cmap=plt.cm.binary)\nfig.set_figheight(5)\nfig.set_figwidth(15)\nfig.show()","b09beca1":"generator=aug_data.flow(X_train,y_train,batch_size=64)","496773ee":"def create_model():\n    model=Sequential()\n\n    model.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32,(5,5),strides=(2,2),padding='same',activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(64,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64,(5,5),strides=(2,2),padding='same',activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(128,(4,4),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Flatten())\n    model.add(Dense(128,activation='relu'))\n\n    model.add(Dropout(0.4))\n    model.add(Dense(10,activation='softmax'))\n\n    model.compile(optimizer='adam',loss=categorical_crossentropy,metrics=['accuracy'])\n    \n    return model","c3346177":"model=create_model()","c569cd7c":"history=model.fit_generator(generator,epochs=50,validation_data=(X_val,y_val),steps_per_epoch=data.shape[0]\/\/64)","e231e0d6":"fig,(acc,loss)=plt.subplots(2,1)\n\n\nacc.set_title('Accuracy vs Epochs')\nacc.plot(np.arange(1,len(history.history['accuracy'])+1),history.history['accuracy'],label='Training Accuracy')\nacc.plot(np.arange(1,len(history.history['val_accuracy'])+1),history.history['val_accuracy'],label='Validation Accuracy')\nacc.set_xlabel('Epochs')\nacc.set_ylabel('Accuracy')\nacc.set_xticks(np.arange(1,len(history.history['accuracy'])+1))\nacc.legend(loc='best')\n\nloss.set_title('Loss vs Epochs')\nloss.plot(np.arange(1,len(history.history['loss'])+1),history.history['loss'],label='Training loss')\nloss.plot(np.arange(1,len(history.history['val_loss'])+1),history.history['val_loss'],label='Validation loss')\nloss.set_xlabel('Epochs')\nloss.set_ylabel('Loss')\nloss.set_xticks(np.arange(1,len(history.history['loss'])+1))\nloss.legend(loc='best')\n\nfig.set_figheight(20)\nfig.set_figwidth(20)\nfig.show()","cb35709b":"generator=aug_data.flow(data,labels,batch_size=64)","0e6c9c92":"model=create_model()","dc59a9b7":"history=model.fit_generator(generator,epochs=50,validation_data=(X_val,y_val),steps_per_epoch=data.shape[0]\/\/64)","545d4d81":"fig,(acc,loss)=plt.subplots(2,1)\n\n\nacc.set_title('Accuracy vs Epochs')\nacc.plot(np.arange(1,len(history.history['accuracy'])+1),history.history['accuracy'],label='Training Accuracy')\nacc.plot(np.arange(1,len(history.history['val_accuracy'])+1),history.history['val_accuracy'],label='Validation Accuracy')\nacc.set_xlabel('Epochs')\nacc.set_ylabel('Accuracy')\nacc.set_xticks(np.arange(1,len(history.history['accuracy'])+1))\nacc.legend(loc='best')\n\nloss.set_title('Loss vs Epochs')\nloss.plot(np.arange(1,len(history.history['loss'])+1),history.history['loss'],label='Training loss')\nloss.plot(np.arange(1,len(history.history['val_loss'])+1),history.history['val_loss'],label='Validation loss')\nloss.set_xlabel('Epochs')\nloss.set_ylabel('Loss')\nloss.set_xticks(np.arange(1,len(history.history['loss'])+1))\nloss.legend(loc='best')\n\nfig.set_figheight(20)\nfig.set_figwidth(20)\nfig.show()","a4a116c2":"x_test=test.values.reshape(-1,28,28,1)\/255","a224d6e5":"pred=np.argmax(model.predict(x=x_test),1)","9c78d777":"output=np.concatenate((np.arange(1,test.shape[0]+1).reshape(-1,1),pred.reshape(-1,1)),axis=1)","70a79fd5":"submission=pd.DataFrame(output,columns=['ImageId','Label'])","0a053050":"submission.to_csv('Submission.csv',index=False)","5c3ac5f4":"from IPython.display import FileLink","2eb9e30a":"model.save('model.h5')","ad52edc2":"FileLink('model.h5')","e45f995e":"## Example:","30b952b3":"# Fitting model on Training data","0c668f63":"# Model Creation","80381222":"# Data Augmentation:","efc9bf96":"# Model Performance","0860f734":"# Creating Submission file","a4c24525":"# Splitting data into Training & Validation Sets","a2e2e613":"# Fitting Model on Total data","064a69ae":"# Generating predictions for Test set","c4d8ce11":"# Data Acquisition","7f504fc8":"# Data Visualization:","ef7ba58c":"# Visualizing Performance of the model:","b43808de":"# Pre-Trained Model Link"}}