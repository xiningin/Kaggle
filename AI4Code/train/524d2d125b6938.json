{"cell_type":{"9ab0ce39":"code","81d481ac":"code","4e50bb01":"code","da1d2922":"code","0c8516aa":"code","351ce8b6":"code","87a8cc1c":"code","84a3dc7b":"code","567118cd":"code","870f3d36":"code","2398f092":"code","289ba877":"code","ece0dbe8":"code","f7474e35":"code","ec0f48f5":"code","a2ac207a":"code","c240d97b":"code","04632584":"code","ae2f93a6":"code","01209720":"code","ab52e6aa":"code","aa834002":"code","003b298f":"code","881f544e":"code","cd15dc22":"code","eba06a61":"code","e1f21bd7":"code","0918fbc0":"code","92f731cb":"code","8d3cf97d":"code","a35ed480":"code","60d67f8e":"code","6622f3d4":"code","045a5e8d":"markdown","9abd9411":"markdown","7aff51a4":"markdown","3260dc74":"markdown","5ae1bc7e":"markdown","a816b5a1":"markdown","b47539b7":"markdown","1d6f04d9":"markdown","144edf1d":"markdown","ecd7de6a":"markdown","332e0ff8":"markdown"},"source":{"9ab0ce39":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom timm import create_model","81d481ac":"from fastai.vision.all import *","4e50bb01":"set_seed(365, reproducible=True)\nBATCH_SIZE = 64","da1d2922":"dataset_path = Path('..\/input\/petfinder-pawpularity-score\/')\ndataset_path.ls()","0c8516aa":"train_df = pd.read_csv(dataset_path\/'train.csv')\ntrain_df.head()","351ce8b6":"train_df['path'] = train_df['Id'].map(lambda x:str(dataset_path\/'train'\/x)+'.jpg')\ntrain_df = train_df.drop(columns=['Id'])\ntrain_df = train_df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\ntrain_df.head()","87a8cc1c":"len_df = len(train_df)\nprint(f\"There are {len_df} images\")","84a3dc7b":"train_df['Pawpularity'].hist(figsize = (10, 5))\nprint(f\"The mean Pawpularity score is {train_df['Pawpularity'].mean()}\")\nprint(f\"The median Pawpularity score is {train_df['Pawpularity'].median()}\")\nprint(f\"The standard deviation of the Pawpularity score is {train_df['Pawpularity'].std()}\")","567118cd":"print(f\"There are {len(train_df['Pawpularity'].unique())} unique values of Pawpularity score\")","870f3d36":"train_df['norm_score'] = train_df['Pawpularity']\/100\ntrain_df['norm_score']","2398f092":"im = Image.open(train_df['path'][1])\nwidth, height = im.size\nprint(width,height)","289ba877":"im","ece0dbe8":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n    os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/swin-transformer\/swin_large_patch4_window7_224_22kto1k.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/swin_large_patch4_window7_224_22kto1k.pth'","f7474e35":"seed=365\nset_seed(seed, reproducible=True)\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.backends.cudnn.deterministic = True\ntorch.use_deterministic_algorithms = True","ec0f48f5":"import math\n#Rice rule\nnum_bins = int(np.ceil(2*((len(train_df))**(1.\/3))))\nnum_bins","a2ac207a":"train_df['bins'] = pd.cut(train_df['norm_score'], bins=num_bins, labels=False)\ntrain_df['bins'].hist()","c240d97b":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\n\ntrain_df['fold'] = -1\n\n\nN_FOLDS = 10\nstrat_kfold = StratifiedKFold(n_splits=N_FOLDS, random_state=seed, shuffle=True)\nfor i, (_, train_index) in enumerate(strat_kfold.split(train_df.index, train_df['bins'])):\n    train_df.iloc[train_index, -1] = i\n    \ntrain_df['fold'] = train_df['fold'].astype('int')\n\ntrain_df.fold.value_counts().plot.bar()","04632584":"train_df[train_df['fold']==0].head()","ae2f93a6":"train_df[train_df['fold']==0]['bins'].value_counts()","01209720":"train_df[train_df['fold']==1]['bins'].value_counts()","ab52e6aa":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(F.sigmoid(input.flatten()), target))","aa834002":"def get_data(fold):\n#     train_df_no_val = train_df.query(f'fold != {fold}')\n#     train_df_val = train_df.query(f'fold == {fold}')\n    \n#     train_df_bal = pd.concat([train_df_no_val,train_df_val.sample(frac=1).reset_index(drop=True)])\n    train_df_f = train_df.copy()\n    # add is_valid for validation fold\n    train_df_f['is_valid'] = (train_df_f['fold'] == fold)\n    \n    dls = ImageDataLoaders.from_df(train_df_f, #pass in train DataFrame\n#                                valid_pct=0.2, #80-20 train-validation random split\n                               valid_col='is_valid', #\n                               seed=365, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=4,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n    \n    return dls","003b298f":"#Valid Kfolder size\nthe_data = get_data(0)\nassert (len(the_data.train) + len(the_data.valid)) == (len(train_df)\/\/BATCH_SIZE)","881f544e":"def get_learner(fold_num):\n    data = get_data(fold_num)\n    \n    model = create_model('swin_large_patch4_window7_224', pretrained=True, num_classes=data.c)\n\n    learn = Learner(data, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp16()\n    \n    return learn","cd15dc22":"test_df = pd.read_csv(dataset_path\/'test.csv')\ntest_df.head()","eba06a61":"test_df['Pawpularity'] = [1]*len(test_df)\ntest_df['path'] = test_df['Id'].map(lambda x:str(dataset_path\/'test'\/x)+'.jpg')\ntest_df = test_df.drop(columns=['Id'])\ntrain_df['norm_score'] = train_df['Pawpularity']\/100","e1f21bd7":"lr = get_learner(fold_num=0).lr_find()","0918fbc0":"import gc","92f731cb":"all_preds = []\n\nfor i in range(N_FOLDS):\n\n    print(f'Fold {i} results')\n    \n    learn = get_learner(fold_num=i)\n\n    learn.fit_one_cycle(10, lr, cbs=[SaveModelCallback(), EarlyStoppingCallback(monitor='petfinder_rmse', comp=np.less, patience=5)]) \n    \n    learn.recorder.plot_loss()\n\n    #learn = learn.to_fp32()\n    \n    #learn.export(f'model_fold_{i}.pkl')\n    #learn.save(f'model_fold_{i}.pkl')\n    \n    dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n                               valid_pct=0.2, #80-20 train-validation random split\n                               seed=365, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=4,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) \n    \n    test_dl = dls.test_dl(test_df)\n    \n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    \n    all_preds.append(preds)\n    \n    del learn\n\n    torch.cuda.empty_cache()\n\n    gc.collect()","8d3cf97d":"all_preds","a35ed480":"np.mean(np.stack(all_preds*100))","60d67f8e":"sample_df = pd.read_csv(dataset_path\/'sample_submission.csv')\npreds = np.mean(np.stack(all_preds), axis=0)\nsample_df['Pawpularity'] = preds*100\nsample_df.to_csv('submission.csv',index=False)","6622f3d4":"pd.read_csv('submission.csv').head()","045a5e8d":"# Import","9abd9411":"### source for optimal bins formula [click here](https:\/\/www.statology.org\/sturges-rule\/)","7aff51a4":"#### You can criticize my work or give your suggestion, your comment is a treasure of knowledge for me\n##### P.S. sorry for a poor grammar","3260dc74":"# Model","5ae1bc7e":"# **Reference**\n###  [Petfinder Pawpularity EDA & fastai starter \ud83d\udc31\ud83d\udc36](https:\/\/www.kaggle.com\/tanlikesmath\/petfinder-pawpularity-eda-fastai-starter)\n###  [Petfinder& fastai with DataAugmentation KFold 10](https:\/\/www.kaggle.com\/bobber\/petfinder-fastai-with-dataaugmentation-kfold-10)","a816b5a1":"# Datasets","b47539b7":"# Constants","1d6f04d9":"# Find optimal number of bins","144edf1d":"# **About author: I'm a beginner in this field trying to learn and discovering the enjoyment of Data Science.**\n### Note1: This notebook is a copy version plus some editing and experimenting for my own understanding and learning.\n### Note2: If this notebook is useful for you in anyway, please give an upvote or commenting your gratitude on the notebook in the reference section. ","ecd7de6a":"# Data loading","332e0ff8":"### Swin-Transformer document [click here](https:\/\/github.com\/microsoft\/Swin-Transformer)"}}