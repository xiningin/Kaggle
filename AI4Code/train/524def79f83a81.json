{"cell_type":{"7de76645":"code","c0b26bff":"code","ee73ef73":"code","699aaa43":"code","083dbfa7":"code","eaac088d":"code","e98eb687":"code","57a32b9c":"code","2202ccca":"code","51062adf":"code","db5ed260":"code","5f5fc812":"code","d5b1314e":"code","f2e597d1":"code","1630efc7":"code","bbde2c9b":"code","7d36ba2b":"code","ea919a90":"code","e72ef797":"code","371482cd":"code","8be79d9b":"code","e8982e3f":"code","3a015858":"code","e8bd5aaa":"code","748c3904":"code","fe555041":"code","acf76041":"code","c7e8fc42":"code","8bed1d04":"code","2916f750":"code","65b94012":"code","f92c2fd4":"code","8fb417f4":"code","c21e32ad":"code","57a16556":"code","d6022e4b":"code","1641006c":"code","e497e767":"code","3730f816":"code","b07bd732":"code","40366637":"code","12919468":"code","5ccccb58":"code","5d05c30e":"code","ae5a0b1f":"code","d2b0a075":"code","3dfca1e5":"code","c68cc009":"code","afcfc543":"code","8531c64a":"code","cd33070d":"code","76495dc6":"code","620c9c98":"code","82b9c826":"code","1546adf2":"code","476a5cf7":"code","9f795856":"code","78847d67":"code","6c38408e":"code","8bee7e6b":"code","19505ee4":"code","0708a073":"code","f845374f":"code","72aee8f4":"code","d9c742ba":"code","91911fd8":"code","530b5e02":"code","364c0032":"code","fabf6812":"code","28666523":"code","6741299d":"code","2ef3f69b":"code","976d6f9b":"code","7d86f832":"code","b58a9519":"code","7490f1f5":"code","1407163f":"code","c36bc5ae":"code","cfdf94c5":"code","f2aae241":"code","96affc3b":"code","50f945b0":"code","9aae0082":"code","ee6221ca":"code","36bafe27":"code","c317aa74":"code","7da96d06":"code","e3bb352c":"code","50e2aa2e":"code","cb44e0d9":"code","c78ce50d":"code","12a5e072":"code","342d7ea6":"code","fca59728":"markdown","9432c439":"markdown","f04ae764":"markdown","2ee8e251":"markdown","af074778":"markdown","087a968c":"markdown","b25be081":"markdown","615e702d":"markdown","905dcd2c":"markdown","4573a5ef":"markdown","359cd6e7":"markdown","1ea02c03":"markdown","7654ee34":"markdown","8d18cb55":"markdown","5626662f":"markdown","e64420af":"markdown","aaf27f55":"markdown","2e4095b4":"markdown","52d50306":"markdown","15a90413":"markdown","e1292c92":"markdown","9d2462b4":"markdown","42eec760":"markdown","c142f78a":"markdown","ebc9030c":"markdown","1c1b5823":"markdown","4a21a520":"markdown","253ea0ac":"markdown","62aef321":"markdown","f1e00799":"markdown","367c97ce":"markdown","1625fc2c":"markdown","35ab13fe":"markdown","87ee9798":"markdown","0ba6abbb":"markdown","1b059a12":"markdown","cf464a4c":"markdown","4587b70e":"markdown","b58ca5e5":"markdown","903a22df":"markdown","0784f96e":"markdown","965758c3":"markdown","26f54350":"markdown","979ee9ef":"markdown","67510176":"markdown","ee9da5fe":"markdown","715e6a01":"markdown","c275d81b":"markdown","7873ea55":"markdown","090c581e":"markdown","3fdd083d":"markdown"},"source":{"7de76645":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0b26bff":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]\n","ee73ef73":"train_df.columns","699aaa43":"train_df.head()","083dbfa7":"train_df.describe()","eaac088d":"train_df.info()","e98eb687":"train_df.columns","57a32b9c":"def baR_plot(variable):\n    \n    var = train_df[variable]\n    varValue = var.value_counts()\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} \\n {}\".format(variable,varValue))","2202ccca":"categoricVar = [\"Survived\", \"Pclass\",\"Name\", \"Sex\" ,\"SibSp\", \"Parch\", \"Ticket\"]\nfor cat in categoricVar:\n    baR_plot(cat)","51062adf":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=800)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram\".format(variable))\n    plt.show","db5ed260":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor num in numericVar:\n    plot_hist(num)","5f5fc812":"# Pclass versus Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","d5b1314e":"# Sex versus Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","f2e597d1":"# SibSp versus Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","1630efc7":"# Parch versus Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","bbde2c9b":"def detectOutlier(df,features):\n    \n    outlier_indeces = list()\n    for out in features:\n        \n        # 1st Quartile\n        Q1 = np.percentile(df[out],25)\n        # 3rd Quartile\n        Q3 = np.percentile(df[out],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Outlier Detection and Indices\n        outlier_list_col = df[(df[out] < Q1 - outlier_step) | (df[out] > Q3 + outlier_step)].index\n        # Store Inedces\n        outlier_indeces.extend(outlier_list_col)\n    \n    outlier_indeces = Counter(outlier_indeces)\n    multiple_outliers = list(i for i,v in outlier_indeces.items() if v>2)\n    \n    return multiple_outliers","7d36ba2b":"train_df.loc[detectOutlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","ea919a90":"# Drop Outliers\ntrain_df.drop(detectOutlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0,inplace=True)","e72ef797":"train_df_len = len(train_df)\ndf = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)\ndf.tail()","371482cd":"df.columns[df.isnull().any()]","8be79d9b":"df.isnull().sum()","e8982e3f":"df[df[\"Embarked\"].isnull()]","3a015858":"df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","e8bd5aaa":"# B class Cabin\n\ndf[(df[\"Cabin\"].str.startswith(\"B\",na=False))]","748c3904":"# Fare of Cabines with error of 20 unit money\n\ndf[df[\"Fare\"].between(60,100,inclusive=False)]","fe555041":"# Fare of B class Cabins with error of 20 unit money\n\ndf[(df[\"Cabin\"].str.startswith(\"B\",na=False)) & (df[\"Fare\"].between(60,100,inclusive=False))]","acf76041":"# So, we can conclude that we can fill nan values with  Cherbourg\n\ndf[\"Embarked\"].fillna(\"C\",inplace=True)\ndf[df[\"Embarked\"].isnull()]","c7e8fc42":"df[df[\"Fare\"].isnull()]","8bed1d04":"df[(df[\"Pclass\"] == 3) & (df[\"Embarked\"] == \"S\")][\"Fare\"]","2916f750":"df[\"Fare\"].fillna(np.mean(df[(df[\"Pclass\"] == 3) & (df[\"Embarked\"] == \"S\")][\"Fare\"]),inplace=True)","65b94012":"df[df[\"Fare\"].isnull()]","f92c2fd4":"feature_list = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nplt.figure(figsize=(10,8))\nsns.heatmap(df[feature_list].corr(),\n           annot = True,\n           fmt = \".2f\"\n           )\nplt.show()","8fb417f4":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\",\n                   data = df,\n                   kind = \"bar\",\n                   size = 6\n                   )\ng.set_ylabels(\"Survived Probability\")\nplt.show()","c21e32ad":"g = sns.factorplot(x = \"Parch\", y = \"Survived\",\n                kind = \"bar\",\n                data = df,\n                size = 6\n                )\ng.set_ylabels(\"Survived Probability\")\nplt.show()","57a16556":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\",\n                  data = df,\n                  kind = \"bar\",size = 6\n                  )\ng.set_ylabels(\"Survived Probability\")\nplt.show()","d6022e4b":"g = sns.FacetGrid(df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","1641006c":"g = sns.FacetGrid(df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","e497e767":"g = sns.FacetGrid(df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","3730f816":"g = sns.FacetGrid(df, row = \"Embarked\", col = \"Survived\", size = 2)\ng.map(sns.barplot, \"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","b07bd732":"df[df[\"Age\"].isnull()]","40366637":"sns.factorplot(x = \"Sex\", y = \"Age\",\n               data = df,\n               kind = \"box\"\n              )\nplt.show()","12919468":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",\n              data = df,\n              kind = \"box\"\n              )\nplt.show()","5ccccb58":"sns.factorplot(x = \"Parch\", y = \"Age\",\n              data = df, \n              kind = \"box\"\n              )\nsns.factorplot(x = \"SibSp\", y = \"Age\",\n              data = df,\n              kind = \"box\"\n             )\nplt.show()","5d05c30e":"# Values of the Sex are in type of string. So we have to make it binary values to see the correlation with other features\n\ndf[\"Sex\"] = [1 if i == \"male\" else 0 for i in df[\"Sex\"]]\ndf.head()","ae5a0b1f":"sns.heatmap(df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","d2b0a075":"index_nan_age = list(df[\"Age\"][df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = df[\"Age\"][((df[\"SibSp\"] == df.iloc[i][\"SibSp\"]) &\n                         (df[\"Parch\"] == df.iloc[i][\"Parch\"]) &\n                         (df[\"Pclass\"] == df.iloc[i][\"Pclass\"]))].median()\n    age_med = df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        df[\"Age\"].iloc[i] = age_pred\n    else:\n        df[\"Age\"].iloc[i] = age_med","3dfca1e5":"df[df[\"Age\"].isnull()]","c68cc009":"df[\"Name\"].head(10)","afcfc543":"name = df[\"Name\"]\ndf[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","8531c64a":"df[\"Title\"].head(10)","cd33070d":"sns.countplot(x = \"Title\", data= df)\nplt.xticks(rotation = 60)\nplt.show()","76495dc6":"# Convert to Categorical\n\ndf[\"Title\"] = df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonk\",\"Jonkheer\",\"Dona\"],\"Other\")\ndf[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in df[\"Title\"]]","620c9c98":"g = sns.factorplot(x = \"Title\", y = \"Survived\",\n                  data = df,\n                  kind = \"bar\"\n                  )\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","82b9c826":"df.drop(labels=[\"Name\"], axis = 1, inplace = True)","1546adf2":"df.head()","476a5cf7":"df = pd.get_dummies(df, columns = [\"Title\"])\ndf.head()","9f795856":"df.head()","78847d67":"df[\"FSize\"] = df[\"SibSp\"] + df[\"Parch\"] + 1","6c38408e":"df.head()","8bee7e6b":"g = sns.factorplot(x = \"FSize\", y = \"Survived\",\n                  data = df,\n                  kind = \"bar\"\n                  )\ng.set_ylabels(\"Survival Probability\")\nplt.show()","19505ee4":"df[\"Family_Size\"] = [1 if i < 5 else 0 for i in df[\"FSize\"]]","0708a073":"df.head(10)","f845374f":"sns.countplot(x = \"Family_Size\", data = df)\nplt.show()","72aee8f4":"g = sns.factorplot(x = \"Family_Size\", y = \"Survived\",\n                  data = df,\n                  kind = \"bar\"\n                  )\ng.set_ylabels(\"Survival Probability\")\nplt.show()","d9c742ba":"df = pd.get_dummies(df,columns = [\"Family_Size\"])\ndf.head()","91911fd8":"df[\"Embarked\"]","530b5e02":"sns.countplot(x = \"Embarked\", data = df)\nplt.show()","364c0032":"df = pd.get_dummies(df, columns = [\"Embarked\"])","fabf6812":"df.head()","28666523":"df[\"Ticket\"].head(20)","6741299d":"a = \"W.\/C. 14258\/\/\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split()[0]","2ef3f69b":"tickets = list()\nfor i in list(df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\", \"\").replace(\"\/\", \"\").strip().split()[0])\n    else:\n        tickets.append(\"x\")\ndf[\"Ticket\"] = tickets","976d6f9b":"df.Ticket.head(20)","7d86f832":"df.head(10)","b58a9519":"df = pd.get_dummies(df, columns=[\"Ticket\"], prefix = \"T\")","7490f1f5":"df.head(10)","1407163f":"sns.countplot(x = \"Pclass\", data = df)\nplt.show()","c36bc5ae":"df[\"Pclass\"] = df[\"Pclass\"].astype(\"category\")","cfdf94c5":"df = pd.get_dummies(df,columns = [\"Pclass\"])\ndf.head(20)","f2aae241":"df[\"Sex\"] = df[\"Sex\"].astype(\"category\")\ndf = pd.get_dummies(df, columns = [\"Sex\"])\ndf.head()","96affc3b":"df.drop(labels = [\"PassengerId\",\"Cabin\"],axis = 1, inplace=True)","50f945b0":"df.columns","9aae0082":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression","ee6221ca":"train_df_len","36bafe27":"test = df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","c317aa74":"test.head()","7da96d06":"train = df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","e3bb352c":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_logreg_train = round(logreg.score(X_train,y_train)*100,2)\nacc_logreg_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy : {} %\".format(acc_logreg_train))\nprint(\"Testing Accuracy : {} %\".format(acc_logreg_test))","50e2aa2e":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\" : range(1,20,2)\n                }\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\" : [0.001, 0.01, 0.1, 1],\n                 \"C\" : [1, 10, 50, 100, 200, 300, 1000]\n                 }\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]\n                }\nlogreg_param_grid = {\"C\" : np.logspace(-3,3,7),\n                    \"penalty\" : [\"l1\",\"l2\"]\n                    }\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]\n                 }\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid\n                   ]\n","cb44e0d9":"cv_result = list()\nbest_estimator = list()\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid = classifier_param[i], cv= StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1, verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimator.append(clf.best_estimator_)\n    print(cv_result[i])","c78ce50d":"cv_results = pd.DataFrame({\"Cross Validation Means\": cv_result,\n                           \"ML Models\": [\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\", \"LogisticRegression\", \"KNeighborsClassifier\"]\n                          })\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","12a5e072":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimator[0]),\n                                         (\"rf\",best_estimator[2]),\n                                         (\"lr\",best_estimator[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","342d7ea6":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresult = pd.concat([test_PassengerId, test_survived], axis = 1)\nresult.to_csv(\"titanic.csv\",index=False)","fca59728":"<a id = \"26\"><\/a><br>\n## 7.5. Pclass","9432c439":"<a id = \"32\"><\/a><br>\n## 8.3. HyperParameter Tunning -- GridSearch -- CrossValidation\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","f04ae764":"<a id = \"23\"><\/a><br>\n## 7.2. Family Size\n\n* FSize : Family Size = SibSp + Parch + 1","2ee8e251":"* Having 3 or more SibSp have less chance to survive\n* So, we can consider a new feature describing these categories","af074778":"<a id = \"17\"><\/a><br>\n## 6.6. Pclass versus Survived versus Age","087a968c":"* Our Threshold is 4.5 now.","b25be081":"# Introduction\n*   RMS Titanic was an Olympic-class transatlantic cruise ship owned by White Star Line. It is produced in Harland and Wolff (Belfast, Ireland) shipyards. On the night of April 15, 1912, he first hit an iceberg and was buried in the ice waters of the North Atlantic in about two hours and forty minutes. It was the world's largest steam cruise ship when its construction was completed in 1912. Its sinking resulted in the death of 1,514 people and went down in history as one of the biggest sea disasters.\n\n*   The great loss of life caused by the fall of Titanic was attributed to many reasons, but the fact that became prominent over time was that the ship did not carry enough lifeboats for everyone. Although Titanic's full capacity was 3,547 people, the total capacity of the lifeboats on the ship was 1,178 people. In addition, the number of men who died in total was very disproportionate because women and children were given priority during the accident.\n\n*    The most advanced technologies available at the time were used in Titanic. It was believed by many people to be a \"buoyant ship,\" and this belief was defined and launched in this way before sinking. Despite this highly advanced and trained crew, its sinking shocked many people. The media continued to bring up Titanic's famous victims and legends about the sunset. The result of these discussions was the change of the shipping law.\n\n![1_Q59ONUgBl159KgMJvghShA.jpeg](attachment:1_Q59ONUgBl159KgMJvghShA.jpeg)","615e702d":"* The labels of Fare and Survival Rate is propotional.\n* So, Fare can be used for categorical training.\n* Can anyone tell me why Passangers embarked from Queenstown are much tolorated?","905dcd2c":"<a id = \"19\"><\/a><br>\n## 6.8. Embarked versus Sex versus Fare versus Survived","4573a5ef":"* Sex is not informative for Age Predition, Age Distribution seems to be same.","359cd6e7":"* As you can see in graph above, Sex is strongly relative to Survive. (Male and Female one:))\n* The males have better survival rate where Pclass is 3 in Cherbourg.\n* Embarked and Sex will be used in training.","1ea02c03":"<a id = \"16\"><\/a><br>\n## 6.5. Age versus Survived","7654ee34":"* Here, we can see that there passenger most probably embarked from Cherbourg according to plot.\n* But we have to check other Cabins especially B class and Fares of the corresponding Cabins.\n* So we can compare the Port with respect to Cabin and Fare together","8d18cb55":"<a id = \"13\"><\/a><br>\n## 6.2. SibSp versus Survived","5626662f":"<a id = \"3\"><\/a><br>\n# 2.1. Univaried Variable Analysis\n   \n   * Categorical Analysis : Survived, Pclass, Name, Sex ,SibSp, Parch, Ticket\n   \n   * Numerical Analysis : PassengerId, Age, Fare","e64420af":"### Filling Missing values of Fare","aaf27f55":"<a id = \"21\"><\/a><br>\n# 7. Feature Engineering\n\n* Name -- Title","2e4095b4":"<a id = \"18\"><\/a><br>\n## 6.7. Embarked versus Sex versus Pclass versus Survived","52d50306":"<a id = \"24\"><\/a><br>\n## 7.3. Embarked","15a90413":"<a id = \"30\"><\/a><br>\n## 8.1. Train - Test Split","e1292c92":"<a id = \"9\"><\/a><br>\n## 5.1. Find Missing Value","9d2462b4":"<a id = \"29\"><\/a><br>\n# 8. Modeling","42eec760":"<a id = \"8\"><\/a><br>\n# 5. Missing Value\n* Find Missing Value\n* Fill Missing Value","c142f78a":"* Right after a first look, we can comment that this Fare value is depends on Class and Embarked values.\n* My option will be filling NaN value with mean of the Fare which of Pclass is 3 and where transatlantic cruise ship is departed from Southampton ","ebc9030c":"<a id = \"20\"><\/a><br>\n## 6.9. Fill Missing : Age Feature","1c1b5823":"* For Age is lower than ten is higher survival rate.\n* Oldest passenger having ageof nearly 80 survived.\n* Large number of 20 years did not survived.\n* Most passengers are between 15 and 35.\n* And most importantly we can fill NaN values of Age by using this distribution","4a21a520":"<a id = \"11\"><\/a><br>\n# 6. Visualization\n\n* Corelation Matrix","253ea0ac":"* Age is not corralated with Sex but it is with Parch, SibSp, Pclass","62aef321":"<a id = \"7\"><\/a><br>\n# 4. Outlier Detection","f1e00799":"<a id = \"31\"><\/a><br>\n## 8.2. Simple Logistic Regression","367c97ce":"<a id = \"1\"><\/a><br>\n# 1. Load and Check Data","1625fc2c":"<a id = \"4\"><\/a><br>\n## 2.1.1. Categorical Variable","35ab13fe":"<a id = \"25\"><\/a><br>\n## 7.4. Ticket","87ee9798":"* Fare feature seems to have corrolation with Survive","0ba6abbb":"### Kernal Content\n\n1. [Load and Check Data](#1)\n2. [Variavle Description](#2)\n    * [Univaried Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6) \n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Matrix](#12)\n    * [SibSp -- Survival](#13)\n    * [Parch -- Survival](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing : Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n8. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [HyperParameter Tunning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","1b059a12":"<a id = \"14\"><\/a><br>\n## 6.3. Parch versus Survived","cf464a4c":"<a id = \"27\"><\/a><br>\n## 7.6. Sex","4587b70e":"<a id = \"34\"><\/a><br>\n## 8.5. Prediction and Submission","b58ca5e5":"<a id = \"15\"><\/a><br>\n## 6.4. Pclass versus Survived","903a22df":"<a id = \"33\"><\/a><br>\n## 8.4. Ensemble Modeling","0784f96e":"* First class passengers are older than second class and second class passengers are older than third class.\n","965758c3":"<a id = \"22\"><\/a><br>\n## 7.1. Name -- Title","26f54350":"### Filling Missing Values of Embarked","979ee9ef":"<a id = \"28\"><\/a><br>\n## 7.7. Drop PassengerId and Cabin","67510176":"* We can say that Pclass is important for model training","ee9da5fe":"<a id = \"12\"><\/a><br>\n## 6.1. Correlation Matrix\n\n* Correlation between SibSp -- Parch -- Age -- Fare -- Survived","715e6a01":"<a id = \"10\"><\/a><br>\n## 5.2. Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 missing value","c275d81b":"<a id = \"6\"><\/a><br>\n# 3. Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","7873ea55":"<a id = \"2\"><\/><br>\n# 2. Variable Description\n\n* 'PassengerId' : Unique ID number to each passenger\n* 'Survived'    : Passenger Survived(1) or Died(0)\n* 'Pclass'      : Passenger Class\n* 'Name'        : Name\n* 'Sex'         : Gender of Passenger\n* 'Age'         : Ager of Passenger\n* 'SibSp'       : Number of Siblins or Spouses   \n* 'Parch'       : Number of Parent or Childerem\n* 'Ticket'      : Ticket Number\n* 'Fare'        : Amount of Money Spent on Ticket\n* 'Cabin'       : Cabin Category\n* 'Embarked'    : Pors where Passengers Embarked (C : Cherbourg, Q : Queenstown, S : Southampton)","090c581e":"* SibSp and Parch can be used for new feature extraction with threshold value of 3\n* There is a standart deviasion in survival of passengers with Parch = 3","3fdd083d":"<a id = \"5\"><\/a><br>\n## 2.1.2 Numerical Variable"}}