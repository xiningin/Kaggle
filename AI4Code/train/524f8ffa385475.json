{"cell_type":{"351ec68e":"code","a87a2d60":"code","cd9b9190":"code","fdf5332c":"code","b1676b78":"code","642c3eac":"code","ba3ba09c":"code","d13da304":"code","c6b7d5d1":"code","ca56f19a":"code","6aadf0e2":"code","e2a9e46b":"code","27acfa20":"code","58ba4153":"code","b75752f2":"code","14a92974":"code","cee48f4a":"code","887ad62b":"code","c144a226":"code","b1485dc5":"code","b7b3bd46":"code","18d9a317":"code","5c07561e":"code","c8920dc5":"code","cc57c65e":"code","9d321ff7":"code","7f3c9a72":"code","84df25b8":"code","ad56b5af":"code","26830e2e":"code","ca61a457":"code","036921e4":"code","8f69ec7d":"code","716d0d79":"code","2ae55532":"code","edd570c1":"markdown","52932a7d":"markdown","d22fb853":"markdown","a44d7181":"markdown","fd2b06ad":"markdown","c9218f22":"markdown","56cb3e43":"markdown","03a5c0d7":"markdown","db5a07de":"markdown","d5bea795":"markdown","62f2ddb2":"markdown","d86d861b":"markdown","f2836d77":"markdown","3c2e86ef":"markdown","288da489":"markdown","79f3854b":"markdown","dc56d056":"markdown","a7a056c4":"markdown","038965a1":"markdown","605b858f":"markdown","28015aae":"markdown","4b25189a":"markdown","43cf5c47":"markdown","ec2b4a08":"markdown","a49c0633":"markdown"},"source":{"351ec68e":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np","a87a2d60":"import os\nprint(os.listdir(\"..\/input\"))","cd9b9190":"# about the dataset\n# Goto: https:\/\/www.kaggle.com\/baiazid\/coursera-machine-learning-su-ex1\n\ndf = pd.read_csv('..\/input\/week_1-ex_1.txt',header=None,names=('polpulation\/1000','profit\/1000'))\n# The first column represents city population (* 10,000 to get the real value) \n# The second column represents profit of a food truck (* 10,000 to get the real value)\n\n# First some context on the problem statement. Here we will implement linear regression with one variable \n# to predict profits for a food truck. Suppose you are the CEO of a restaurant franchise and are considering\n# different cities for opening a new outlet. The chain already has trucks in various cities and you have data\n# for profits and populations from the cities. The file ex1data1.txt (available under week 2's assignment material)\n# contains the dataset for our linear regression exercise. The first column is the population of a city and the \n# second column is the profit of a food truck in that city. A negative value for profit indicates a loss.","fdf5332c":"print(df.head())\nprint(df.shape)\nm=df.shape[0]","b1676b78":"X = df.iloc[:,0]\ny = df.iloc[:,1]","642c3eac":"import matplotlib.pyplot as plt\nplt.scatter(X,y)\nplt.xlabel('Population of City in 10,000s')\nplt.ylabel('Profit in $10,000s')\nplt.show()","ba3ba09c":"# How to display images in ipython notebook\n# Goto: https:\/\/stackoverflow.com\/questions\/11854847\/how-can-i-display-an-image-from-a-file-in-jupyter-notebook\nfrom IPython.display import Image, display\n\n#listOfImageNames = ['C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-1var-hypothesis.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-1var-cost_function.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-1var-gradient_descent.PNG']\n\n#for imageName in listOfImageNames:\n#    display(Image(filename=imageName))","d13da304":"# In the following lines, we add another dimension to our data to accommodate the intercept term \n# (the reason for doing this is explained in the videos). We also initialize the initial parameters\n# theta to 0 and the learning rate alpha to 0.01.","c6b7d5d1":"# newaxis is used to increase the dimension of the existing array by one more dimension, when used once. Thus,\n# 1D array will become 2D array\n# 2D array will become 3D array\n# 3D array will become 4D array\n# and so on.\n\n# Goto: https:\/\/stackoverflow.com\/questions\/29241056\/how-does-numpy-newaxis-work-and-when-to-use-it","ca56f19a":"import numpy as np\nX = X[:,np.newaxis]\ny = y[:,np.newaxis]\ntheta = np.zeros([2,1])\niterations = 1500\nalpha = 0.01\n# hstach - Stack arrays in sequence horizontally (column wise)\n# for more info on hstack\n# Goto: https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.hstack.html\nX = np.hstack((np.ones((m,1)), X))","6aadf0e2":"# New shape of X,y \nprint(X.shape)\nprint(X[0:5,:])\nprint(\"***--***\")\nprint(y.shape)\nprint(y[0:5,:])","e2a9e46b":"# for more info on np.dot\n# Goto: https:\/\/docs.scipy.org\/doc\/numpy-1.15.0\/reference\/generated\/numpy.dot.html\n\n# for more info on numpy.square\n# Goto: https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.square.html\n\n# for more info on numpy.sum\n# Goto: https:\/\/docs.scipy.org\/doc\/numpy-1.15.1\/reference\/generated\/numpy.sum.html#numpy.sum\n\ndef computeCost(X, y, theta):\n    temp = np.dot(X,theta) - y\n    return np.sum(np.square(temp))\/(2*m)\nJ = computeCost(X,y,theta)\nprint(J)","27acfa20":"# Initial value of theta :\nprint(theta)","58ba4153":"# more about ' - ' : Goto: https:\/\/hackernoon.com\/understanding-the-underscore-of-python-309d1a029edc\ndef gradientDescent(theta, X, y, aplha, iterations):    \n    \n    # theta_vals, J_vals stores the intermediate values of theta and J during optimiztion usng gradient descent\n    theta_vals=np.full([1,2],0)\n    J_vals = np.full([1],computeCost(X,y,theta))\n    \n    for _ in range(iterations):\n        theta = theta - (aplha\/m)*np.dot(X.T,(np.dot(X, theta) - y))        \n        theta_vals = np.vstack((theta_vals,theta.T))\n        J_vals = np.vstack((J_vals,computeCost(X, y, theta)))\n    return [theta_vals,J_vals]\n\n\n(theta_vals,J_vals) = gradientDescent(theta, X, y, alpha, iterations)\ntheta = np.reshape(theta_vals[-1],[2,1])\n# theta after optimizing\nprint(\"Theta: \",theta)","b75752f2":"print(theta)\n# After finding optimum value of theta, find the new cost\nJ = computeCost(X,y,theta)\nprint(J)","14a92974":"plt.scatter(X[:,1], y) # plt.scatter plots only the points\nplt.plot(X[:,1], np.dot(X, theta),'r') # plt.plot draws a line\nplt.xlabel('Population of City in 10,000s')\nplt.ylabel('Profit in $10,000s')\nplt.show()","cee48f4a":"# Plotly - one stop for all plots, visualizations, animations etc\n# Goto: https:\/\/plot.ly\/python\/\n\nimport plotly\nplotly.tools.set_credentials_file(username='enter_your_details_here', api_key='8tUzNDbRW7G2wlH4js1P')\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx_val = theta_vals[:,0]\ny_val = theta_vals[:,1]  \nz_val = J_vals[:,0]                 \n\nline = go.Scatter3d(x=x_val, y=y_val, z=z_val, marker=dict(\n        size=4,\n        color=z_val,\n        colorscale='Viridis',\n    ),\n    line=dict(\n        color='#1f77b4',\n        width=1\n    ))\ndata = [line]\n\n\nlayout = go.Layout(\n    title='Theta values vs Cost values',\n    scene=dict(\n        xaxis=dict(\n            title = 'theta 0',\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            title = 'theta 1',\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            title = 'Cost',\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='jupyter-parametric_plot')","887ad62b":"# Problem context: Suppose you are selling your house and you want to know what a good market price would be. \n# One way to do this is to first collect information on recent houses sold and make a model of housing prices. \n# Your job is to predict housing prices based on other variables.\n\n#The file ex1data2.txt((available under week 2\u2019s assignment material)) contains a training set of housing prices\n# in Portland, Oregon. The first column is the size of the house (in square feet), the second column is the number \n# of bedrooms, and the third column is the price of the house.\n\n# You already have the necessary infrastructure which we built in our previous section that can be easily \n# applied to this section as well. Here we will just use the equations which we made in the above section.","c144a226":"df = pd.read_csv('..\/input\/week_2-ex_1.txt',header=None,names=('size','bedrooms','price(in $)'))","b1485dc5":"print(df.head())\nprint(df.shape)\nm=df.shape[0]\nn=df.shape[1]","b7b3bd46":"X = df.iloc[:,0:2]\ny = df.iloc[:,2]","18d9a317":"# Plotly - one stop for all plots, visualizations, animations etc\n# Goto: https:\/\/plot.ly\/python\/\n\nimport plotly\nplotly.tools.set_credentials_file(username='enter_your_details_here', api_key='8tUzNDbRW7G2wlH4js1P')\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx_val = X['size']\ny_val = X['bedrooms']\nz_val = y[:]                 \n\nline = go.Scatter3d(x=x_val, y=y_val, z=z_val, mode='markers',\n    marker=dict(\n        size=12,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5\n        ),\n        opacity=0.8\n    ))\ndata = [line]\n\n\nlayout = go.Layout(\n    title='Theta values vs Cost values',\n    scene=dict(\n        xaxis=dict(\n            title = 'size',\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            title = 'bedrooms',\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            title = 'price',\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='jupyter-parametric_plot')","5c07561e":"# How to display images in ipython notebook\n# Goto: https:\/\/stackoverflow.com\/questions\/11854847\/how-can-i-display-an-image-from-a-file-in-jupyter-notebook\nfrom IPython.display import Image, display\n\n#listOfImageNames = ['C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-basics.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-hypothesis.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-cost_function.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-gradient_descent.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-feature_scaling_and_normalization.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-normal_equation.PNG',\n#                    'C:\/Users\/saxenapriyansh\/Desktop\/linear_reg-multivar-comparision_btw_gradient_descent_and_normal_eqation.PNG',]\n\n#for imageName in listOfImageNames:\n#    display(Image(filename=imageName))\n#    print(\"--\") ","c8920dc5":"X = (X - np.mean(X))\/np.std(X)\n\nX = np.column_stack((X['size'],X['bedrooms']))\nX = np.hstack((np.full([m,1],1), X))\nprint(X.shape)\nprint(X[:5,:])\n\ny = y[:,np.newaxis]\nprint(y.shape)\nprint(y[:5,])","cc57c65e":"theta = np.full([n,1],0)\nalpha = 0.01\niterations = 50000","9d321ff7":"def computeCost(X, y, theta):\n    temp = np.dot(X,theta) - y\n    return np.sum(np.square(temp))\/(2*m)\nJ = computeCost(X,y,theta)\nprint(J)","7f3c9a72":"# more about ' - ' : Goto: https:\/\/hackernoon.com\/understanding-the-underscore-of-python-309d1a029edc\ndef gradientDescent(theta, X, y, aplha, iterations):        \n    # theta_vals, J_vals stores the intermediate values of theta and J during optimiztion usng gradient descent\n    theta_vals=np.full([1,n],0)\n    J_vals = np.full([1],computeCost(X,y,theta))\n    \n    for i in range(iterations):\n        theta = theta - (aplha\/m)*np.dot(X.T,(np.dot(X, theta) - y))    \n        theta_vals = np.vstack((theta_vals,theta.T))\n        J_vals = np.vstack((J_vals,computeCost(X, y, theta)))\n    return [theta_vals,J_vals]\n(theta_vals,J_vals) = gradientDescent(theta, X, y, alpha, iterations)\ntheta = np.reshape(theta_vals[-1],[n,1])\n# theta after optimizing\nprint(\"Theta: \",theta)","84df25b8":"J = computeCost(X, y, theta)\nprint(J)","ad56b5af":"import plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Create a trace\ntrace = go.Scatter(\n    x = np.arange(1,50002,1),\n    y = J_vals[:,0]\n)\ndata = [trace]\npy.iplot(data, filename='basic-line')","26830e2e":"theta.shape","ca61a457":"# Goto: https:\/\/youtu.be\/N4d_9GQ9QFc\n# https:\/\/eli.thegreenplace.net\/2014\/derivation-of-the-normal-equation-for-linear-regression\n\ntheta_n = np.dot(np.linalg.inv(np.dot(X.T,X)),np.dot(X.T,y))\nprint(theta_n)","036921e4":"J = computeCost(X ,y,theta_n)\nJ","8f69ec7d":"df = pd.read_csv('..\/input\/week_2-ex_1.txt',header=None,names=('size','bedrooms','price(in $)'))\nX = df.iloc[:,0:2]\ny = df.iloc[:,2]\nm=df.shape[0]  # number of examples\nn=df.shape[1]  # number of features","716d0d79":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(X,y)\nprint(reg.score(X,y))\nprint(reg.get_params())","2ae55532":"# finding the cost\ny_pred = reg.predict(X)\ndef computeCost(y_pred, y_true):\n    return np.sum(np.square(y_pred - y_true))\/(2*m)\n    \nJ = computeCost(y_pred, y)\nprint(J)","edd570c1":"### 2.1 Working with data","52932a7d":"#### 1.3.a Adding intercept term","d22fb853":"#### 2.3.a Adding intercept term","a44d7181":"#### 2.1.b Analize the data","fd2b06ad":"### 1.3 Algorithm","c9218f22":"### 2.2 Crux of Linear Regression in multiple variable","56cb3e43":"####  Import header files","03a5c0d7":"#### 1.1.a Read\/Import data","db5a07de":"# Linear regression","d5bea795":"#### 1.1.c Plot the data","62f2ddb2":"#### 2.1.a Read\/Import data","d86d861b":"#### 1.3.b Computing the cost","f2836d77":"### 1.2 Crux of Linear Regression in 1 variable","3c2e86ef":"## 2. Linear Regression with multiple variables (aka Multivariate linear regression)","288da489":"### 3 Normal Equation","79f3854b":"#### 2.1.c Plot the data","dc56d056":"#### 1.3.d Plot the best fit line","a7a056c4":"#### 1.1.b Analize the data","038965a1":"## 4 Sklearn","605b858f":"## 1. Linear regression with 1 variable","28015aae":"#### 2.3.c Compute gradient descent","4b25189a":"#### 1.3.c Gradient Descent - finding optimal parameters","43cf5c47":"#### 2.3.b Computing the cost","ec2b4a08":"### 1.1 Working with data","a49c0633":"### 2.3 Algorithm"}}