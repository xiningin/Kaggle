{"cell_type":{"1e843334":"code","755ff3da":"code","24f7de6d":"code","97a2f4ba":"code","264ba92a":"code","914355b7":"code","a2946084":"code","0c184de1":"code","0f542a11":"code","7f84c9fe":"code","8f222d4f":"code","5a1c5730":"code","8fe3cabc":"code","c3bc7ed1":"code","b2758ee3":"code","5c2e7347":"code","e7d9c1ad":"code","379a5947":"code","1602dd25":"code","c2a35e13":"code","b80821cb":"code","a09ecac7":"code","5c73b146":"code","723b7927":"code","cb9d54b2":"markdown","565cc151":"markdown","ded7db0c":"markdown","fc67ff5b":"markdown","26c5e576":"markdown","3149d11c":"markdown","4cadce43":"markdown","8a05b8ab":"markdown","a5cef407":"markdown","64d4c2ae":"markdown","2d683943":"markdown"},"source":{"1e843334":"import numpy as np\nimport pandas as pd\nfrom skimage import io,exposure\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plot\nimport os\nfrom random import randint\nfrom skimage.color import rgb2gray\nfrom skimage.transform import resize\nimport matplotlib.gridspec as gridspec\nfrom skimage.morphology import disk\nfrom skimage.filters import rank\nfrom skimage.util import img_as_ubyte\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nimport tensorflow.keras.utils as Utils\nimport tensorflow as tf\nimport keras\nfrom keras import models\nfrom keras.layers import Dense, Dropout, Flatten,Conv2D, MaxPooling2D, BatchNormalization\nfrom keras import regularizers\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing","755ff3da":"image_list=[]\nlabels=[]\npath = '\/kaggle\/input\/natural-images\/natural_images'\n\nfor subdir, dirs, files in os.walk(path):\n    for file in files:\n        image=io.imread(os.path.join(subdir, file))\n        grayscale = rgb2gray(image)\n        resized=resize(grayscale, (200, 200))\n        image_list.append(resized)\n        labels.append(subdir.split('\/')[-1])\n\nimage_list,labels=shuffle(image_list,labels)","24f7de6d":"plot_images=image_list[:25]\nplot_labels=labels[:25]","97a2f4ba":"fig = plot.figure(figsize=(30, 30))\nouter = gridspec.GridSpec(5, 5, wspace=0.2, hspace=0.2)\ns=0\nfor i,k in zip(plot_images,plot_labels):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 1,subplot_spec=outer[s], wspace=0.1, hspace=0.1)\n    s+=1\n    for j in range(2):\n        if (j%2) == 0:\n            ax = plot.Subplot(fig, inner[j])\n            ax.imshow(i,cmap='gray')\n            ax.set_title(k)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            fig.add_subplot(ax)\n        else:\n            ax = plot.Subplot(fig, inner[j])\n            ax.hist(i[0],bins=256,histtype='bar')\n            fig.add_subplot(ax)         \nfig.show()","264ba92a":"random_index = randint(0,len(image_list))\n\n\ncomparison_list = []\ncomparison_lable = []\n\n#orignal\ncomparison_list.append(image_list[random_index])\ncomparison_lable.append(\"Orignal\")\n\n# Contrast stretching\np2, p98 = np.percentile(image_list[random_index], (2, 98))\ncomparison_list.append(exposure.rescale_intensity(image_list[random_index], in_range=(p2, p98)))\ncomparison_lable.append(\"Contrast stretching\")\n\n\n#Global Equalization\ncomparison_list.append(exposure.equalize_hist(image_list[random_index]))\ncomparison_lable.append(\"Equalization\")\n\n#local Equalization\nselem = disk(60)\ncomparison_list.append(rank.equalize(img_as_ubyte(image_list[random_index]), selem=selem))\ncomparison_lable.append(\"Local Equalization\")\n\n# Adaptive Equalization\ncomparison_list.append(exposure.equalize_adapthist(image_list[random_index], clip_limit=0.3))\ncomparison_lable.append(\"Adaptive Equalization\")\n\n","914355b7":"fig = plot.figure(figsize=(30, 30))\nouter = gridspec.GridSpec(2, 3, wspace=0.2, hspace=0.2)\ns=0\nfor i,k in zip(comparison_list,comparison_lable):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 1,subplot_spec=outer[s], wspace=0.1, hspace=0.1)\n    s+=1\n    for j in range(2):\n        if (j%2) == 0:\n            ax = plot.Subplot(fig, inner[j])\n            ax.imshow(i,cmap='gray')\n            ax.set_title(k)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            fig.add_subplot(ax)\n        else:\n            ax = plot.Subplot(fig, inner[j])\n            ax.hist(i[0],bins=256,histtype='bar')\n            fig.add_subplot(ax)\nfig.show()","a2946084":"#Enhancement Cell\nfor i in range(0,len(image_list)):\n    image_list[i] = exposure.equalize_hist(image_list[i])","0c184de1":"plot_images=image_list[:25]\nplot_labels=labels[:25]","0f542a11":"plot_images[0].shape","7f84c9fe":"fig = plot.figure(figsize=(30, 30))\nouter = gridspec.GridSpec(5, 5, wspace=0.2, hspace=0.2)\ns=0\nfor i,k in zip(plot_images,plot_labels):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 1,subplot_spec=outer[s], wspace=0.1, hspace=0.1)\n    s+=1\n    for j in range(2):\n        if (j%2) == 0:\n            ax = plot.Subplot(fig, inner[j])\n            ax.imshow(i,cmap='gray')\n            ax.set_title(k)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            fig.add_subplot(ax)\n        else:\n            ax = plot.Subplot(fig, inner[j])\n            ax.hist(i[0],bins=256,histtype='bar')\n            fig.add_subplot(ax)\n            \n\nfig.show()","8f222d4f":"image_list = np.array(image_list)\nlabels = np.array(labels)","5a1c5730":"image_list = image_list.reshape(image_list.shape[0],image_list.shape[1],image_list.shape[2],1)","8fe3cabc":"le = preprocessing.LabelEncoder()\n\nle.fit(labels)\n\nencoded_label = le.transform(labels)","c3bc7ed1":"X_train, X_test, y_train, y_test = train_test_split(image_list, encoded_label, test_size=0.33, random_state=213213)","b2758ee3":"input_shape = (image_list[0].shape[0],image_list[0].shape[1],1)","5c2e7347":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","e7d9c1ad":"Model = models.Sequential()\nModel.add(Conv2D(8,(5,5),activation = 'relu',input_shape=input_shape))\nModel.add(BatchNormalization())\nModel.add(Conv2D(16,(5,5),activation = 'relu'))\nModel.add(MaxPooling2D(5,5))\nModel.add(Conv2D(24,(3,3),activation = 'relu'))\nModel.add(Conv2D(32,(3,3),activation = 'relu'))\nModel.add(MaxPooling2D(3,3))\nModel.add(Flatten())\nModel.add(Dense(32, activation='relu'))\nModel.add(Dropout(0.3))\nModel.add(Dense(32, activation='relu'))\nModel.add(Dense(16, activation='relu'))\nModel.add(Dense(16, activation='relu'))\nModel.add(Dense(8,activation='softmax'))","379a5947":"Model.compile(loss=keras.losses.categorical_crossentropy,optimizer=keras.optimizers.Adam(learning_rate=0.001),metrics=['accuracy'])","1602dd25":"from keras.callbacks import ModelCheckpoint,ReduceLROnPlateau,EarlyStopping\n#callbacks\n#Best Save Callback\nfilepath=\"weights.best.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\n#Stop Model training in case of no Improvement\nearly_stop=EarlyStopping(monitor='val_accuracy', min_delta=0, patience=5, verbose=1, mode='auto', baseline=None, restore_best_weights=False)\n# Reduce learning rate when a metric has stopped improving.\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=3, min_lr=0.0001)\ncallbacks_list = [checkpoint,early_stop,reduce_lr]\n","c2a35e13":"trained = Model.fit(X_train, y_train,epochs=50,verbose=1,validation_split=0.30,callbacks=callbacks_list)","b80821cb":"Model.summary()\nSVG(model_to_dot(Model).create(prog='dot', format='svg'))\nUtils.plot_model(Model,to_file='model.png',show_shapes=True)","a09ecac7":"plot.plot(trained.history['accuracy'])\nplot.plot(trained.history['val_accuracy'])\nplot.title('Model accuracy')\nplot.ylabel('Accuracy')\nplot.xlabel('Epoch')\nplot.legend(['Train', 'Test'], loc='upper left')\nplot.show()\n\nplot.plot(trained.history['loss'])\nplot.plot(trained.history['val_loss'])\nplot.title('Model loss')\nplot.ylabel('Loss')\nplot.xlabel('Epoch')\nplot.legend(['Train', 'Test'], loc='upper left')\nplot.show()","5c73b146":"evaluation = Model.evaluate(X_test,y_test, verbose=1)\n\nprint(\"Testing Accuracy: {0}\\nTesting Loss: {1}\".format(evaluation[0],evaluation))","723b7927":"fig = plot.figure(figsize=(30, 30))\nouter = gridspec.GridSpec(5, 5, wspace=0.2, hspace=0.2)\n\nfor i in range(25):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 1,subplot_spec=outer[i], wspace=0.1, hspace=0.1)\n    rnd_number = randint(0,len(X_test))\n    pred_image = np.array([X_test[rnd_number]]) \n    pred_class = le.inverse_transform([Model.predict_classes(pred_image)[0]])\n    pred_prob = Model.predict(pred_image).reshape(8)\n    for j in range(2):\n        if (j%2) == 0:\n            ax = plot.Subplot(fig, inner[j])\n            ax.imshow(pred_image[0].reshape(200,200),cmap='gray')\n            ax.set_title(pred_class)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            fig.add_subplot(ax)\n        else:\n            ax = plot.Subplot(fig, inner[j])\n            ax.bar([0,1,2,3,4,5,6,7],pred_prob)\n            fig.add_subplot(ax)\n\nfig.show()","cb9d54b2":"**Processing the data:**","565cc151":"**Predictions**","ded7db0c":"**Plotting the data:**","fc67ff5b":"**Train Test Split:**","26c5e576":"**Training the model:**","3149d11c":"**Evaluation:**","4cadce43":"**Call Back Functions:**","8a05b8ab":"**Image Enhancement:**","a5cef407":"**Model Creation:**","64d4c2ae":"**Reading the data:**","2d683943":"**Label Encoder:**"}}