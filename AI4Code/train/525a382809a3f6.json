{"cell_type":{"b824c8fd":"code","be3a0d54":"code","f574e61a":"code","688324ee":"code","0cc66304":"code","103daa38":"code","9a9d86c2":"code","68c49a55":"code","7c3f7cc2":"code","db5e94df":"code","ad8e02f8":"code","9e7636e3":"code","14ac2b3d":"code","c5e5802d":"code","9732afea":"code","c8993d43":"code","6535033a":"code","ce2c9c7b":"code","5e092713":"code","3c7c44d1":"code","fbcdcf5e":"code","63979989":"code","183a6050":"code","734fa378":"code","3629ddd6":"code","a53e06f9":"code","0e55b686":"code","e7a05d04":"code","874f7dde":"code","85c7167a":"code","86415aad":"code","b006ab0b":"code","1073a574":"code","19243809":"code","f66d7dd8":"code","1903c3bd":"code","093d14a2":"code","63861036":"code","7cda309f":"code","1f650e09":"code","a0cefdb0":"code","15a60a4a":"code","989cb7fa":"code","d70c968a":"code","5d2bfb2f":"code","5fd40c3b":"code","962aab03":"code","289b95b2":"code","5a74ed51":"code","d85881f1":"code","54fdf06e":"code","97f1c703":"code","5e4180f2":"code","67b01d34":"code","170ffddc":"code","7f0f4309":"code","253d8351":"code","bdf926eb":"code","b7b2066f":"code","54493709":"code","49a19821":"markdown","4e59e8ee":"markdown","326db83c":"markdown","53425bb0":"markdown","b992ab60":"markdown","67ea55b1":"markdown","83be068b":"markdown","91c23874":"markdown","bbdef04a":"markdown","2d50c207":"markdown","a87f2366":"markdown","f7568d62":"markdown","f18b454e":"markdown","3e528379":"markdown","0e5b5c6e":"markdown","47b31364":"markdown","8b9665be":"markdown","ff60d106":"markdown","4f350172":"markdown","019630a9":"markdown","c6960e30":"markdown","668081a8":"markdown","89ab26ab":"markdown","da963eba":"markdown","d905c78f":"markdown","c8ef83ef":"markdown","95e9243d":"markdown","a40a4c1e":"markdown","b79c8de2":"markdown","a469a5b5":"markdown","1d7b2c1d":"markdown","4ecf1e60":"markdown"},"source":{"b824c8fd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport scipy as sp\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n","be3a0d54":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv') \n\n","f574e61a":"data.head()  #displaying the head of dataset\n","688324ee":"data.describe()      #description of dataset \n","0cc66304":"data.info()","103daa38":"data.shape    #768 rows and 9 columns","9a9d86c2":"data.value_counts()","68c49a55":"data.dtypes","7c3f7cc2":"data.columns","db5e94df":"data.isnull().sum()","ad8e02f8":"data.isnull().any()","9e7636e3":"data.isnull().all()","14ac2b3d":"data.corr()","c5e5802d":"plt.figure(figsize = (12,10))\n\nsns.heatmap(data.corr(), annot =True)\n\n","9732afea":"data.hist(figsize=(18,12))\nplt.show()\n\n","c8993d43":"\nplt.figure(figsize=(14,10))\nsns.set_style(style='whitegrid')\nplt.subplot(2,3,1)\nsns.boxplot(x='Glucose',data=data)\nplt.subplot(2,3,2)\nsns.boxplot(x='BloodPressure',data=data)\nplt.subplot(2,3,3)\nsns.boxplot(x='Insulin',data=data)\nplt.subplot(2,3,4)\nsns.boxplot(x='BMI',data=data)\nplt.subplot(2,3,5)\nsns.boxplot(x='Age',data=data)\nplt.subplot(2,3,6)\nsns.boxplot(x='SkinThickness',data=data)\n\n\n\n\n\n","6535033a":" \nmean_col = ['Glucose','BloodPressure','Insulin','Age','Outcome','BMI']\n\nsns.pairplot(data[mean_col],palette='Accent')\n","ce2c9c7b":"sns.boxplot(x='Outcome',y='Insulin',data=data)\n\n","5e092713":"sns.regplot(x='BMI', y= 'Glucose', data=data)","3c7c44d1":"sns.relplot(x='BMI', y= 'Glucose', data=data)","fbcdcf5e":"sns.scatterplot(x='Glucose', y= 'Insulin', data=data)","63979989":"sns.jointplot(x='SkinThickness', y= 'Insulin', data=data)","183a6050":"sns.pairplot(data,hue='Outcome')\n","734fa378":"sns.lineplot(x='Glucose', y= 'Insulin', data=data)","3629ddd6":"sns.swarmplot(x='Glucose', y= 'Insulin', data=data)","a53e06f9":"sns.barplot(x=\"SkinThickness\", y=\"Insulin\", data=data[170:180])\nplt.title(\"SkinThickness vs Insulin\",fontsize=15)\nplt.xlabel(\"SkinThickness\")\nplt.ylabel(\"Insulin\")\nplt.show()\nplt.style.use(\"ggplot\")\n","0e55b686":"plt.style.use(\"default\")\nplt.figure(figsize=(5,5))\nsns.barplot(x=\"Glucose\", y=\"Insulin\", data=data[170:180])\nplt.title(\"Glucose vs Insulin\",fontsize=15)\nplt.xlabel(\"Glucose\")\nplt.ylabel(\"Insulin\")\nplt.show()\n","e7a05d04":"#train_test_splitting of the dataset\n\nx = data.drop(columns = 'Outcome')\n\n# Getting Predicting Value\ny = data['Outcome']\n\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","874f7dde":"print(len(x_train))\nprint(len(x_test))\nprint(len(y_train))\nprint(len(y_test))\n","85c7167a":"from sklearn.linear_model import LogisticRegression\nreg = LogisticRegression()\nreg.fit(x_train,y_train)                         ","86415aad":"y_pred=reg.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",reg.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))\n","b006ab0b":"print(accuracy_score(y_test,y_pred)*100)","1073a574":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(x_train,y_train)\n","19243809":"y_pred=knn.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",knn.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))","f66d7dd8":"print(accuracy_score(y_test,y_pred)*100)\n\n","1903c3bd":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\n","093d14a2":"y_pred=svc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",svc.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))\n","63861036":"\n\nprint(accuracy_score(y_test,y_pred)*100)\n","7cda309f":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train,y_train)\n","1f650e09":"y_pred=gnb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",gnb.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))\n","a0cefdb0":"print(\"Accuracy Score:\\n\",gnb.score(x_train,y_train)*100)","15a60a4a":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123,criterion='entropy')\n\ndtree.fit(x_train,y_train)\n","989cb7fa":"y_pred=dtree.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",dtree.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))","d70c968a":"print(accuracy_score(y_test,y_pred)*100)\n\n","5d2bfb2f":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\n","5fd40c3b":"y_pred=rfc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",rfc.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))\n","962aab03":"print(accuracy_score(y_test,y_pred)*100)","289b95b2":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(x_train,y_train)\n\n\n","5a74ed51":"y_pred=adb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",adb.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))\n","d85881f1":"print(accuracy_score(y_test,y_pred)*100)","54fdf06e":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)\n","97f1c703":"y_pred=gbc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",gbc.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))","5e4180f2":"print(accuracy_score(y_test,y_pred)*100)","67b01d34":"from xgboost import XGBClassifier\n\nxgb =XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)\n\nxgb.fit(x_train, y_train)\n","170ffddc":"y_pred=xgb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",xgb.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))","7f0f4309":"xbg_accuracy=print(accuracy_score(y_test,y_pred)*100)","253d8351":"from sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier(n_estimators=100, random_state=0)\netc.fit(x_train,y_train)","bdf926eb":"y_pred=etc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",etc.score(x_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(\"R2 score is:\\n\",r2_score(y_test,y_pred))","b7b2066f":"print(accuracy_score(y_test,y_pred)*100)","54493709":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata\n","49a19821":"***Checking Null Values***","4e59e8ee":"**So we get accuracy score of 73.37 % using DecisionTreeClassifier**","326db83c":"**So we get a accuracy score of 75.97 % using KNeighborsClassifier**","53425bb0":"# LOADING THE DATASET","b992ab60":"# 2. KNeighborsClassifier","67ea55b1":"# 6.  RandomForestClassifier","83be068b":"**TASK : Predict the onset of diabetes based on diagnostic measures**","91c23874":"**So we get a accuracy score of 81.18 % using RandomForestClassifier**","bbdef04a":"**So we get a accuracy score of 82.46 % using Logistic Regression**","2d50c207":"# TRAINING AND TESTING DATA","a87f2366":"# 3. SVC","f7568d62":"![](http:\/\/www.diabeteshealth.com\/wp-content\/uploads\/2016\/12\/diabetes.jpg)","f18b454e":"***Diabetes is a disease that occurs when your blood glucose, also called blood sugar, is too high. Blood glucose is your main source of energy and comes from the food you eat. Insulin, a hormone made by the pancreas, helps glucose from food get into your cells to be used for energy.***\n\n**Early Signs of Diabetes**\n\n* Hunger and fatigue. Your body converts the food you eat into glucose that your cells use for energy*\n* Peeing more often and being thirstier\n* Dry mouth and itchy skin\n* Blurred vision\n","3e528379":"# Pima Indians Diabetes Database","0e5b5c6e":"# 7. AdaBoostClassifier","47b31364":"# 8. Gradient Boosting Classifier","8b9665be":"**So we get a accuracy score of 78.57 % using XGBClassifier**","ff60d106":"# **If you liked this notebook, please UPVOTE it.**","4f350172":"**So we get a accuracy score of 81.81 % using GradientBoostingClassifier**","019630a9":"**So we get a accuracy score of 77.92 % using AdaBoostClassifier**","c6960e30":"# Exploratory Data Analysis","668081a8":"# 5. DECISION TREE CLASSIFIER","89ab26ab":"***So now we conclude the accuracy of different models:***\n\n* Logistic Regression= 82.46 %\n* KNeighbors Classifier= 75.97 %\n* SVC= 79.22 %\n* Naiye Bayes= 75.73 %\n* Decision Tree Classifier= 73.37%\n* Random Forest Classifier= 81.57%\n* Ada Boost Classifier= 77.92%\n* Gradient Boosting Classifier= 81.81%\n* XGB Classifier= 78.57%\n* Extra Trees Classifier= 80.51%\n\n\n\n","da963eba":"# 10. ExtraTreesClassifier","d905c78f":"**So we get a accuracy score of 79.22 % using SVC**","c8ef83ef":"# 1. Logistic Regression","95e9243d":"# IMPORTING THE LIBRARIES","a40a4c1e":"# 4. Naive Bayes","b79c8de2":" **So we get a accuracy score of 80.51 % using ExtraTreesClassifier**","a469a5b5":"# MODELS","1d7b2c1d":"**So we get a accuracy score of 75.73 % using Naiye Bayes**","4ecf1e60":"# 9. XGBClassifier"}}