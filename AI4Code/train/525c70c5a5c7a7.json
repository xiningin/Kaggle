{"cell_type":{"91902a97":"code","65aad6b2":"code","2ebcc1be":"code","995a7ed7":"code","21a4025b":"code","01c6603e":"code","85b08bbc":"code","77572dec":"code","defde97e":"code","87cb4504":"code","71ffadde":"code","eb1563b1":"code","aa6ee990":"code","fb7a9d5c":"code","1b12045d":"code","8bb4bdab":"code","db2f5017":"code","19d4b9af":"code","80880d02":"code","5e75ee36":"code","a737f25d":"code","d77da08f":"code","70ecfea6":"code","2ac6d8fa":"code","7b67d6c8":"code","74d9958f":"code","597e72e0":"code","4167fda4":"code","59db1eb2":"code","d295ab04":"code","6934f7ec":"code","5ddb7dee":"code","8681f949":"code","ff35484d":"code","52306616":"code","60d2b7e3":"code","fa784155":"code","13942d41":"code","f2ee5e2d":"code","f04ea50b":"code","ccd059f3":"code","e7024803":"code","4b1a5ba5":"code","6be226e1":"code","ada5a779":"code","cec9af54":"code","f936af97":"code","824c6cc1":"code","be40b39a":"code","229f6fcc":"code","734d52ec":"code","29391473":"code","6e2d5cc2":"code","804ef186":"code","c6e24cf0":"code","8b15fab8":"code","f5069bc3":"code","bb6f7159":"code","12ba3172":"code","9ee859d1":"code","fba23eba":"code","5dbe67cb":"code","fda3aaee":"code","a3f2bc16":"code","931f2049":"code","fd08411e":"code","302e2cf9":"code","2d532d7a":"code","29c52e34":"code","848de3bd":"code","7b6c410b":"code","5cd5b9c7":"code","b6024b76":"code","3ef540ed":"code","d767aa8c":"code","101df47a":"code","c55d05f6":"code","09df883c":"code","03aad0b8":"code","6732225a":"code","9784834d":"code","2f6f04be":"code","897c5bd7":"code","7541c7d8":"code","d6debe09":"code","79267348":"code","46b5ea59":"code","77e2b01b":"code","17347969":"code","f717007c":"code","da251332":"markdown","26d913cc":"markdown","d4e40c3f":"markdown","b3a21126":"markdown","c5f4e75f":"markdown","9f7db998":"markdown","0c14ebe8":"markdown","f153a151":"markdown","b14d0f06":"markdown","8488c2d0":"markdown","0e3a367b":"markdown","cb6a8427":"markdown","a05d8e65":"markdown","06b1015b":"markdown","28b5b358":"markdown","9d572857":"markdown","bd5a559f":"markdown","fd5bb799":"markdown","9bb59b56":"markdown","ffb96827":"markdown","a7dd97f3":"markdown","6045aeb1":"markdown","86427336":"markdown","5251cbd6":"markdown","9cf3f102":"markdown","082a058d":"markdown","65e04d79":"markdown","c8208f60":"markdown"},"source":{"91902a97":"import numpy as np \nimport pandas as pd \nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.cm as cm\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()\n\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\n\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\n\nfrom mlxtend.frequent_patterns import fpgrowth\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","65aad6b2":"df = pd.read_csv('..\/input\/ecommerce-data\/data.csv')\ndf.head()","2ebcc1be":"df.describe()","995a7ed7":"df.InvoiceDate = pd.to_datetime(df.InvoiceDate)\ndf.InvoiceDate.max() - df.InvoiceDate.min()","21a4025b":"format(df.InvoiceDate.min())","01c6603e":"format(df.InvoiceDate.max())","85b08bbc":"plt.figure(figsize=(18,6))\nplt.scatter(df.InvoiceDate, df.Quantity)","77572dec":"plt.figure(figsize=(18,6))\nplt.scatter(df.InvoiceDate, df.UnitPrice)","defde97e":"df.isnull().sum()","87cb4504":"df.isnull().sum() \/ df.shape[0] * 100","71ffadde":"df[df.Description.isnull()].head(5)","eb1563b1":"df[df.Description.isnull()].CustomerID.isnull().value_counts()","aa6ee990":"df[df.Description.isnull()].UnitPrice.value_counts()","fb7a9d5c":"df[df.CustomerID.isnull()].head()","1b12045d":"df = df.loc[(df.CustomerID.isnull()==False)].copy()\ndf.isnull().sum()","8bb4bdab":"df[\"C\"]=np.where(df.InvoiceNo.apply(lambda l: l[0]==\"C\"), True, False)\ndf.C.value_counts() \/ df.shape[0] * 100","db2f5017":"df.loc[df[\"C\"]].describe()","19d4b9af":"df = df.loc[df.C==False].copy()\ndf = df.drop(\"C\", axis=1)","80880d02":"plt.figure(figsize=(15,6))\nTopStocks = df['StockCode'].value_counts().sort_values(ascending=False).iloc[0:10]\nsns.barplot(TopStocks.index, TopStocks.values)","5e75ee36":"def CountChars(l):\n    return sum(1 for c in l if c.isdigit())\n\ndf[\"LengthOfStockCode\"] = df.StockCode.apply(lambda l: len(l))\ndf[\"NumbersInStockCode\"] = df.StockCode.apply(lambda l: CountChars(l))","a737f25d":"ax=sns.countplot(df[\"LengthOfStockCode\"])\nax.set_yscale(\"log\")","d77da08f":"ax=sns.countplot(df[\"NumbersInStockCode\"])\nax.set_yscale(\"log\")","70ecfea6":"df.loc[df.NumbersInStockCode < 5].Description.value_counts()","2ac6d8fa":"df = df.loc[(df.NumbersInStockCode == 5) & (df.LengthOfStockCode==5)].copy()","7b67d6c8":"df.groupby(\"StockCode\").Description.nunique().sort_values(ascending=False).head(10)","74d9958f":"df.loc[df.StockCode == \"23236\"].Description.value_counts()","597e72e0":"def LowChars(l):\n    return sum(1 for c in l if c.islower())","4167fda4":"df[\"LengthOfDescription\"] = df.Description.apply(lambda l: len(l))\ndf[\"DescriptionLowChars\"] = df.Description.apply(lambda l: LowChars(l))","59db1eb2":"fig, ax = plt.subplots(figsize=(15,7))\nsns.countplot(df.LengthOfDescription)\nax.set_yscale(\"log\")","d295ab04":"fig, ax = plt.subplots(figsize=(15,7))\nsns.countplot(df.DescriptionLowChars)\nax.set_yscale(\"log\")","6934f7ec":"df.loc[df.DescriptionLowChars > 0].Description.value_counts()","5ddb7dee":"df.loc[df.DescriptionLowChars > 2].Description.value_counts()","8681f949":"df = df.loc[df.DescriptionLowChars < 3].copy()","ff35484d":"df = df.drop([\"LengthOfStockCode\",\"NumbersInStockCode\",\"LengthOfDescription\",\"DescriptionLowChars\"], axis=1)","52306616":"df.UnitPrice.describe()","60d2b7e3":"df.loc[df.UnitPrice == 0].sort_values(by=\"Quantity\", ascending=False).head()","fa784155":"df = df.loc[df.UnitPrice > 0].copy()","13942d41":"df.UnitPrice.describe()","f2ee5e2d":"plt.figure(figsize=(18,6))\nplt.scatter(df.InvoiceDate, df.UnitPrice)","f04ea50b":"fig, ax = plt.subplots(figsize=(20,7))\nsns.distplot(np.log(df.UnitPrice),bins=20,kde=False)\nax.set_xlabel(\"Log Unit-Price\");","ccd059f3":"np.exp(-2)","e7024803":"np.exp(3)","4b1a5ba5":"np.quantile(df.UnitPrice, 0.95)","6be226e1":"df = df.loc[(df.UnitPrice > 0.1) & (df.UnitPrice < 20)].copy()","ada5a779":"plt.figure(figsize=(18,6))\nplt.scatter(df.InvoiceDate, df.UnitPrice)","cec9af54":"fig, ax = plt.subplots(figsize=(20,7))\nsns.distplot(np.log(df.UnitPrice),bins=20,kde=False)\nax.set_xlabel(\"Log Unit-Price\");","f936af97":"df.Quantity.describe()","824c6cc1":"plt.figure(figsize=(18,6))\nplt.scatter(df.InvoiceDate, df.Quantity)","be40b39a":"fig, ax = plt.subplots(figsize=(20,7))\nsns.distplot(np.log(df.Quantity),bins=20,kde=False)\nax.set_xlabel(\"Log Quantity\");","229f6fcc":"np.exp(4)","734d52ec":"np.quantile(df.Quantity, 0.95)","29391473":"df = df.loc[df.Quantity < 55].copy()","6e2d5cc2":"plt.figure(figsize=(18,6))\nplt.scatter(df.InvoiceDate, df.Quantity)","804ef186":"fig, ax = plt.subplots(figsize=(20,7))\nsns.distplot(np.log(df.Quantity),bins=20,kde=False)\nax.set_xlabel(\"Log Quantity\");","c6e24cf0":"countries = df.Country.value_counts().sort_values(ascending=False).iloc[0:20]\nplt.figure(figsize=(15,5))\nsns.barplot(countries.index, countries.values, palette=\"Purples_r\")\nplt.xticks(rotation=90);\nplt.yscale(\"log\")","8b15fab8":"df.loc[df.Country==\"United Kingdom\"].shape[0] \/ df.shape[0] * 100","f5069bc3":"data = dict(type='choropleth',\nlocations = countries.index,\nlocationmode = 'country names', z = countries,\ntext = countries.index, colorbar = {'title':'Count.'},\ncolorscale=[[0, 'rgb(224,255,255)'],\n            [0.01, 'rgb(166,206,227)'], [0.02, 'rgb(31,120,180)'],\n            [0.03, 'rgb(178,223,138)'], [0.05, 'rgb(51,160,44)'],\n            [0.10, 'rgb(251,154,153)'], [0.20, 'rgb(255,255,0)'],\n            [1, 'rgb(227,26,28)']],    \nreversescale = False)\nlayout = dict(title='Map',\ngeo = dict(showframe = True, projection={'type':'equirectangular'}))\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap, validate=False)","bb6f7159":"df['Sales']=df['Quantity']*df['UnitPrice']","12ba3172":"periods=['year','month','day','dayofweek','dayofyear','weekofyear','quarter']\ndf=df.join(pd.concat((getattr(df['InvoiceDate'].dt,i).rename(i) for i in periods),axis=1))\ndf.insert(loc=2,column='year_month',value=df['InvoiceDate'].map(lambda x: 100*x.year + x.month))\ndf.insert(loc=5,column='hour',value=df.InvoiceDate.dt.hour)","9ee859d1":"ax=df.groupby('InvoiceNo')['year_month'].unique().value_counts().sort_index().plot(kind='bar',figsize=(15,6))\nax.set_xticklabels(('Dec','Jan','Feb','Mar','Apr','May','Jun','July','Aug','Sep','Oct','Nov','Dec'));","fba23eba":"ax=df.groupby('InvoiceNo')['quarter'].unique().value_counts().sort_index().plot(kind='bar',figsize=(20,6))","5dbe67cb":"ax=df.groupby('InvoiceNo')['weekofyear'].unique().value_counts().sort_index().plot(kind='bar',figsize=(20,6))","fda3aaee":"ax=df.groupby('InvoiceNo')['day'].unique().value_counts().sort_index().plot(kind='bar',figsize=(20,6))","a3f2bc16":"df['Description'].value_counts().sort_values(ascending=False).head(10)","931f2049":"fig, ax=plt.subplots(figsize=(10,5))\ndf['Description'].value_counts().sort_values(ascending=False).head(10).plot(kind='barh')","fd08411e":"df2 = df.pivot_table(index='hour',columns='Description', aggfunc={'Description':'count'}).fillna(0)\ndf2['Max']=df2.idxmax(axis=1)\ndf2['Max']","302e2cf9":"import datetime as dt \nnow = dt.date(2011,12,9)\ndf['date'] = pd.DatetimeIndex(df.InvoiceDate).date","2d532d7a":"df['CustomerID']=df['CustomerID'].astype('int64')","29c52e34":"recency_df = df.groupby(['CustomerID'],as_index=False)['date'].max()\nrecency_df.columns = ['CustomerID','LastPurchaseDate']\nrecency_df['Recency'] = recency_df.LastPurchaseDate.apply(lambda x : (now - x).days)\nrecency_df.drop(columns=['LastPurchaseDate'],inplace=True)\nrecency_df.head()","848de3bd":"frequency_df = df.copy()\nfrequency_df.drop_duplicates(subset=['CustomerID','InvoiceNo'], keep=\"first\", inplace=True) \nfrequency_df = frequency_df.groupby('CustomerID',as_index=False)['InvoiceNo'].count()\nfrequency_df.columns = ['CustomerID','Frequency']\nfrequency_df.head()","7b6c410b":"monetary_df=df.groupby('CustomerID',as_index=False)['Sales'].sum()\nmonetary_df.columns = ['CustomerID','Monetary']\nmonetary_df.head()","5cd5b9c7":"rf = recency_df.merge(frequency_df,left_on='CustomerID',right_on='CustomerID')\nrfm = rf.merge(monetary_df,left_on='CustomerID',right_on='CustomerID')\nrfm.set_index('CustomerID',inplace=True)\nrfm.head()","b6024b76":"(now - dt.date(2011,1,18)).days == 325","3ef540ed":"rfm_segmentation = rfm.copy()","d767aa8c":"Nc = range(1, 20)\nkmeans = [KMeans(n_clusters=i) for i in Nc]\nscore = [kmeans[i].fit(rfm_segmentation).score(rfm_segmentation) for i in range(len(kmeans))]\nplt.plot(Nc,score)\nplt.title('Elbow Curve')\nplt.show()","101df47a":"kmeans = KMeans(n_clusters=3, random_state=0).fit(rfm_segmentation)\nrfm_segmentation['cluster'] = kmeans.labels_\nrfm_segmentation[rfm_segmentation.cluster == 0].head(10)","c55d05f6":"sns.boxplot(rfm_segmentation.cluster,rfm_segmentation.Recency)","09df883c":"sns.boxplot(rfm_segmentation.cluster,rfm_segmentation.Frequency)","03aad0b8":"sns.boxplot(rfm_segmentation.cluster,rfm_segmentation.Monetary)","6732225a":"def RScore(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4\n\ndef FMScore(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1","9784834d":"quantile = rfm.quantile(q=[0.25,0.5,0.75])\nquantile","2f6f04be":"rfm_segmentation['R'] = rfm_segmentation['Recency'].apply(RScore,args=('Recency',quantile))\nrfm_segmentation['F'] = rfm_segmentation['Frequency'].apply(FMScore, args=('Frequency',quantile))\nrfm_segmentation['M'] = rfm_segmentation['Monetary'].apply(FMScore, args=('Monetary',quantile))","897c5bd7":"quantile.to_dict()","7541c7d8":"rfm_segmentation['RFM'] = rfm_segmentation.R.map(str) \\\n                            + rfm_segmentation.F.map(str) \\\n                            + rfm_segmentation.M.map(str)","d6debe09":"print(\"Best: \",len(rfm_segmentation[rfm_segmentation['RFM']=='111']))\nprint('Loyal: ',len(rfm_segmentation[rfm_segmentation['F']==1]))\nprint(\"Spenders: \",len(rfm_segmentation[rfm_segmentation['M']==1]))\nprint('Almost lost: ', len(rfm_segmentation[rfm_segmentation['RFM']=='134']))\nprint('Lost: ',len(rfm_segmentation[rfm_segmentation['RFM']=='344']))\nprint('Lost but not spenders: ',len(rfm_segmentation[rfm_segmentation['RFM']=='444']))","79267348":"rfm_segmentation[rfm_segmentation['RFM'] == '111'].sort_values('Monetary', ascending=False).head(3)","46b5ea59":"df[\"Description\"].nunique()\ndata_apriori = df.copy()\ndata_apr = data_apriori.groupby(['InvoiceNo', 'Description'])['Quantity'].sum().unstack().reset_index().fillna(0).set_index('InvoiceNo')\ndata_apr.head()","77e2b01b":"def num(x):\n    if x <= 0:\n        return 0\n    if x >= 1:\n        return 1\n\nbasket_new = data_apr.applymap(num)\nbasket_new.head()","17347969":"items = apriori(basket_new, min_support=0.02, use_colnames=True)\nitems.head()","f717007c":"rule = association_rules(items, metric=\"lift\", min_threshold=1)\nrule.sort_values(by=['confidence'],ascending=False).head(10)","da251332":"Missing data %","26d913cc":"# **RFM**","d4e40c3f":"373 days - 2010-12-01 - 2011-12-09","b3a21126":"Free?","c5f4e75f":"**Duplicates in StockCodes**","9f7db998":"**Missing data**","0c14ebe8":"POST","f153a151":"**StockCodes - Bad Values**","b14d0f06":"Description = NaN, Unitprice = 0, CustomerID = NaN ?","8488c2d0":"**Additional columns**","0e3a367b":"**Descriptions - Low Chars**","cb6a8427":"**Missing Descriptions**","a05d8e65":"**Quantity**","06b1015b":"Data gapes 2011-01, 2011-05 \n\nA lot of outliners, negative values","28b5b358":"Quantity","9d572857":"Price","bd5a559f":"A lot of Outliners, NaN's in CustomerID, negative values","fd5bb799":"25% missing data - CustomerID\n0,3% - Description","9bb59b56":"**Missing Customer ID and UnitPrice**","ffb96827":"# Segmentation","a7dd97f3":"# End of Cleaning the Data","6045aeb1":"**Outliners**","86427336":"**Invoices - Deleting 'C'**","5251cbd6":"**Period of data**","9cf3f102":"# Bucket Association Rules Apriori","082a058d":"The same products","65e04d79":"**Unit Prices**","c8208f60":"**Countries**"}}