{"cell_type":{"aeb03648":"code","6a7bb6a4":"code","8f771400":"code","f8290b66":"code","3f56fde2":"code","b5cac823":"code","81ef8ed7":"code","ad839849":"code","9844dc95":"code","5825b70b":"code","95d703aa":"code","89a4aaed":"code","291fc566":"code","83ef06c2":"code","730446e2":"code","754f9274":"code","456d7916":"code","d979058b":"code","decd9ff5":"code","622fd64b":"code","67331e9b":"code","e031e46d":"code","3eb524cc":"code","f988210a":"code","fc2e5865":"code","cd43a89b":"code","52ff36fc":"markdown"},"source":{"aeb03648":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6a7bb6a4":"#Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","8f771400":"#Importing dataset\ntrain = pd.read_csv('\/kaggle\/input\/train_1.csv.zip').fillna(0)\npage = train['Page']\ntrain.head()","f8290b66":"#Dropping Page Column\ntrain = train.drop('Page',axis = 1)\ntrain.head()","3f56fde2":"#Using Data From Random Row for Training and Testing\n\nrow = train.iloc[90000,:].values\nX = row[0:549]\ny = row[1:550]\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = np.reshape(X_train,(-1,1))\ny_train = np.reshape(y_train,(-1,1))\nX_train = sc.fit_transform(X_train)\ny_train = sc.fit_transform(y_train)","b5cac823":"X_train.shape, X_test.shape","81ef8ed7":"#Training LSTM\n\n#Reshaping Array\nX_train = np.reshape(X_train, (384,1,1))\n\n\n# Importing the Keras libraries and packages for LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layerand the LSTM layer\nregressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))\n\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 10, epochs = 100, verbose = 0)","ad839849":"regressor.summary()","9844dc95":"# Getting the predicted Web View\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (165, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)","5825b70b":"#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","95d703aa":"#As you can see the prediction is quite accurate for a test set. Now repeat this for some other rows","89a4aaed":"row = train.iloc[0,:].values\nX = row[0:549]\ny = row[1:550]\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = np.reshape(X_train,(-1,1))\ny_train = np.reshape(y_train,(-1,1))\nX_train = sc.fit_transform(X_train)\ny_train = sc.fit_transform(y_train)\n\n#Training LSTM\n\n#Reshaping Array\nX_train = np.reshape(X_train, (384,1,1))\n\n\n# Importing the Keras libraries and packages for LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layerand the LSTM layer\nregressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))\n\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 10, epochs = 100, verbose = 0)\n\n# Getting the predicted Web View\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (165, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","291fc566":"row = train.iloc[10,:].values\nX = row[0:549]\ny = row[1:550]\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = np.reshape(X_train,(-1,1))\ny_train = np.reshape(y_train,(-1,1))\nX_train = sc.fit_transform(X_train)\ny_train = sc.fit_transform(y_train)\n\n#Training LSTM\n\n#Reshaping Array\nX_train = np.reshape(X_train, (384,1,1))\n\n\n# Importing the Keras libraries and packages for LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layerand the LSTM layer\nregressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))\n\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 10, epochs = 100, verbose = 0)\n\n# Getting the predicted Web View\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (165, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","83ef06c2":"row = train.iloc[100,:].values\nX = row[0:549]\ny = row[1:550]\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = np.reshape(X_train,(-1,1))\ny_train = np.reshape(y_train,(-1,1))\nX_train = sc.fit_transform(X_train)\ny_train = sc.fit_transform(y_train)\n\n#Training LSTM\n\n#Reshaping Array\nX_train = np.reshape(X_train, (384,1,1))\n\n\n# Importing the Keras libraries and packages for LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layerand the LSTM layer\nregressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))\n\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 10, epochs = 100, verbose = 0)\n\n# Getting the predicted Web View\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (165, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","730446e2":"row = train.iloc[1000,:].values\nX = row[0:549]\ny = row[1:550]\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = np.reshape(X_train,(-1,1))\ny_train = np.reshape(y_train,(-1,1))\nX_train = sc.fit_transform(X_train)\ny_train = sc.fit_transform(y_train)\n\n#Training LSTM\n\n#Reshaping Array\nX_train = np.reshape(X_train, (384,1,1))\n\n\n# Importing the Keras libraries and packages for LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layerand the LSTM layer\nregressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))\n\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 10, epochs = 100, verbose = 0)\n\n# Getting the predicted Web View\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (165, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","754f9274":"#Now lets train on one page and test on another page\ntrain_row = train.iloc[90000,:].values\nX = train_row[0:549]\ny = train_row[1:550]\n\n\n# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = np.reshape(X,(-1,1))\ny_train = np.reshape(y,(-1,1))\nX_train = sc.fit_transform(X_train)\ny_train = sc.fit_transform(y_train)\n\n#Training LSTM\n\n#Reshaping Array\nX_train = np.reshape(X_train, (549,1,1))\n\n\n# Importing the Keras libraries and packages for LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layerand the LSTM layer\nregressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))\n\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 10, epochs = 100, verbose = 0)\n\n# Getting the predicted Web View\ntest_row = train.iloc[10000,:].values\nX_test = test_row[0:549]\ny_test = test_row[1:550]\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (549, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","456d7916":"#Repeating on another page\n# Getting the predicted Web View\ntest_row = train.iloc[5000,:].values\nX_test = test_row[0:549]\ny_test = test_row[1:550]\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (549, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","d979058b":"# Getting the predicted Web View\nimport random\nX_value = random.randint(0,train.shape[0])\ntest_row = train.iloc[X_value,:].values\nX_test = test_row[0:549]\ny_test = test_row[1:550]\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (549, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting for')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","decd9ff5":"# Getting the predicted Web View\nimport random\nX_value = random.randint(0,train.shape[0])\ntest_row = train.iloc[X_value,:].values\nX_test = test_row[0:549]\ny_test = test_row[1:550]\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (549, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting for')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","622fd64b":"# Getting the predicted Web View\nimport random\nX_value = random.randint(0,train.shape[0])\ntest_row = train.iloc[X_value,:].values\nX_test = test_row[0:549]\ny_test = test_row[1:550]\ninputs = X_test\ninputs = np.reshape(inputs,(-1,1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (549, 1, 1))\ny_pred = regressor.predict(inputs)\ny_pred = sc.inverse_transform(y_pred)\n\n#Visualising Result\nplt.figure\nplt.plot(y_test, color = 'red', label = 'Real Web View')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Web View')\nplt.title('Web View Forecasting for')\nplt.xlabel('Number of Days from Start')\nplt.ylabel('Web View')\nplt.legend()\nplt.show()","67331e9b":"# Getting the Mean Web View - 1000 Pages\ny_test_mean = []\ny_pred_mean = []\nfor X_value in range(0,1000):\n    test_row = train.iloc[X_value,:].values\n    X_test = test_row[0:549]\n    y_test = test_row[1:550]\n    y_test_mean.append(np.mean(y_test))\n    inputs = X_test\n    inputs = np.reshape(inputs,(-1,1))\n    inputs = sc.transform(inputs)\n    inputs = np.reshape(inputs, (549, 1, 1))\n    y_pred = regressor.predict(inputs)\n    y_pred = sc.inverse_transform(y_pred)\n    y_pred_mean.append(np.mean(y_pred))","e031e46d":"#Visualising mean\nplt.figure\nplt.plot(y_test_mean, color = 'red', label = 'Mean Real Web View')\nplt.plot(y_pred_mean, color = 'blue', label = 'Mean Predicted Web View')\nplt.title('Mean Web View Forecasting')\nplt.xlabel('Index of Page')\nplt.ylabel('Mean Web View')\nplt.legend()\nplt.show()","3eb524cc":"# Getting the Mean Web View - 100 Pages\ny_test_mean = []\ny_pred_mean = []\nfor X_value in range(0,100):\n    test_row = train.iloc[X_value,:].values\n    X_test = test_row[0:549]\n    y_test = test_row[1:550]\n    y_test_mean.append(np.mean(y_test))\n    inputs = X_test\n    inputs = np.reshape(inputs,(-1,1))\n    inputs = sc.transform(inputs)\n    inputs = np.reshape(inputs, (549, 1, 1))\n    y_pred = regressor.predict(inputs)\n    y_pred = sc.inverse_transform(y_pred)\n    y_pred_mean.append(np.mean(y_pred))\n    \n#Visualising mean\nplt.figure\nplt.plot(y_test_mean, color = 'red', label = 'Mean Real Web View')\nplt.plot(y_pred_mean, color = 'blue', label = 'Mean Predicted Web View')\nplt.title('Mean Web View Forecasting')\nplt.xlabel('Index of Page')\nplt.ylabel('Mean Web View')\nplt.legend()\nplt.show()","f988210a":"# Getting the Mean Web View - random 100 Pages in between\npages = np.random.randint(0,train.shape[0],100)\ny_test_mean = []\ny_pred_mean = []\nfor X_value in pages:\n    test_row = train.iloc[X_value,:].values\n    X_test = test_row[0:549]\n    y_test = test_row[1:550]\n    y_test_mean.append(np.mean(y_test))\n    inputs = X_test\n    inputs = np.reshape(inputs,(-1,1))\n    inputs = sc.transform(inputs)\n    inputs = np.reshape(inputs, (549, 1, 1))\n    y_pred = regressor.predict(inputs)\n    y_pred = sc.inverse_transform(y_pred)\n    y_pred_mean.append(np.mean(y_pred))\n    \n#Visualising mean\nplt.figure\nplt.plot(y_test_mean, color = 'red', label = 'Mean Real Web View')\nplt.plot(y_pred_mean, color = 'blue', label = 'Mean Predicted Web View')\nplt.title('Mean Web View Forecasting')\nplt.ylabel('Mean Web View')\nplt.legend()\nplt.show()","fc2e5865":"# Getting the Mean Web View - random 100 Pages in between\npages = np.random.randint(0,train.shape[0],100)\ny_test_mean = []\ny_pred_mean = []\nfor X_value in pages:\n    test_row = train.iloc[X_value,:].values\n    X_test = test_row[0:549]\n    y_test = test_row[1:550]\n    y_test_mean.append(np.mean(y_test))\n    inputs = X_test\n    inputs = np.reshape(inputs,(-1,1))\n    inputs = sc.transform(inputs)\n    inputs = np.reshape(inputs, (549, 1, 1))\n    y_pred = regressor.predict(inputs)\n    y_pred = sc.inverse_transform(y_pred)\n    y_pred_mean.append(np.mean(y_pred))\n    \n#Visualising mean\nplt.figure\nplt.plot(y_test_mean, color = 'red', label = 'Mean Real Web View')\nplt.plot(y_pred_mean, color = 'blue', label = 'Mean Predicted Web View')\nplt.title('Mean Web View Forecasting')\nplt.ylabel('Mean Web View')\nplt.legend()\nplt.show()","cd43a89b":"train","52ff36fc":"# Thank You"}}