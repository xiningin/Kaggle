{"cell_type":{"65c6d326":"code","4410a517":"code","bbcd5135":"code","ca9447b5":"code","25943f35":"code","dd7045ed":"code","bee2ff67":"code","591daecb":"code","8927d063":"code","4592531d":"code","134b0273":"code","acda8fb4":"code","0edfdce1":"code","58027667":"code","aebacd4f":"code","cdbbf378":"code","cccaee25":"code","1f5a24d5":"code","01a74dae":"code","4d8479cf":"code","ae03ead9":"code","4895f5af":"code","40507627":"code","4aa711bb":"code","66523061":"code","1a06efc8":"code","e9a18953":"code","4071d27a":"code","5b276b02":"code","144de67d":"code","d9c74f7e":"markdown"},"source":{"65c6d326":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.model_selection import train_test_split","4410a517":"File=[]\nfor dirname, _, filenames in os.walk('..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN'):\n    for filename in filenames:\n        File+=[os.path.join(dirname, filename)]\n        \nFile2=[]\nfor file in File:\n    if file[-5:]=='.jpeg':\n        File2+=[file]\n        \nTrain_img=File2","bbcd5135":"File=[]\nfor dirname, _, filenames in os.walk('..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST'):\n    for filename in filenames:\n        File+=[os.path.join(dirname, filename)]\n        \nFile2=[]\nfor file in File:\n    if file[-5:]=='.jpeg':\n        File2+=[file]\n        \nTest_img=File2","ca9447b5":"Name0=[]\nfor dirname, _, filenames in os.walk('..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images'):\n    Name0+=[dirname]\n\nName1=[]\nfor item in Name0:\n    Name1+=[item[60:]]\n\nName2=[]\nfor item in Name1:\n    for i in range(len(item)):\n        if (item[i]=='\/'):\n            name=item[i+1:]\n            if name not in Name2:\n                Name2+=[name]\n                \nName3=sorted(Name2)\n\nprint(Name3)","25943f35":"dir0='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\/EOSINOPHIL'\ndir1='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\/LYMPHOCYTE'\ndir2='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\/MONOCYTE'\ndir3='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\/NEUTROPHIL'\n\ndir4='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/EOSINOPHIL'\ndir5='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/LYMPHOCYTE'\ndir6='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/MONOCYTE'\ndir7='..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/NEUTROPHIL'","dd7045ed":"Dirs=[dir0,dir1,dir2,dir3]\nDirs2=[dir4,dir5,dir6,dir7]\nmapping={ Name3[0]:0,Name3[1]:1,Name3[2]:2,Name3[3]:3 }","bee2ff67":"dataset=[]\ncount=0\nfor dirs in Dirs:\n    for file in Train_img:\n        if dirs in file:\n            image=load_img(file, grayscale=False, color_mode='rgb', target_size=(120,120))\n            image=img_to_array(image)\n            image=image\/255\n            dataset.append([image,count])\n    count=count+1","591daecb":"data0,labels0=zip(*dataset)","8927d063":"labels1=to_categorical(labels0)\n\ndata=np.array(data0)\nlabels=np.array(labels1)\n\nprint(data.shape)\nprint(labels.shape)","4592531d":"dataset2=[]\ncount=0\nfor dirs in Dirs2:\n    for file in Test_img:\n        if dirs in file:\n            image=load_img(file, grayscale=False, color_mode='rgb', target_size=(120,120))\n            image=img_to_array(image)\n            image=image\/255\n            dataset2.append([image,count])\n    count=count+1","134b0273":"tdata0,tlabels0=zip(*dataset2)","acda8fb4":"tlabels1=to_categorical(tlabels0)\n\ntdata=np.array(tdata0)\ntlabels=np.array(tlabels1)\n\nprint(tdata.shape)\nprint(tlabels.shape)","0edfdce1":"trainx,testx,trainy,testy=train_test_split(data,labels,test_size=0.2,random_state=44)","58027667":"print(trainx.shape)\nprint(testx.shape)\nprint(trainy.shape)\nprint(testy.shape)","aebacd4f":"datagen = ImageDataGenerator(horizontal_flip=True,vertical_flip=True,rotation_range=20,zoom_range=0.2,\n                        width_shift_range=0.2,height_shift_range=0.2,shear_range=0.1,fill_mode=\"nearest\")","cdbbf378":"pretrained_model0 = tf.keras.applications.ResNet50(input_shape=(120,120,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model1 = tf.keras.applications.ResNet152V2(input_shape=(120,120,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model2 = tf.keras.applications.DenseNet121(input_shape=(120,120,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model3 = tf.keras.applications.DenseNet201(input_shape=(120,120,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model4 = tf.keras.applications.EfficientNetB0(input_shape=(120,120,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model5 = tf.keras.applications.EfficientNetB7(input_shape=(120,120,3),include_top=False,weights='imagenet',pooling='avg')\n\npretrained_model0.trainable = False\npretrained_model1.trainable = False\npretrained_model2.trainable = False\npretrained_model3.trainable = False\npretrained_model4.trainable = False\npretrained_model5.trainable = False","cccaee25":"inputs0 = pretrained_model0.input\ninputs1 = pretrained_model1.input\ninputs2 = pretrained_model2.input\ninputs3 = pretrained_model3.input\ninputs4 = pretrained_model4.input\ninputs5 = pretrained_model5.input\n\nx0 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model0.output)\noutputs0 = tf.keras.layers.Dense(4, activation='softmax')(x0)\nx1 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model1.output)\noutputs1 = tf.keras.layers.Dense(4, activation='softmax')(x1)\nx2 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model2.output)\noutputs2 = tf.keras.layers.Dense(4, activation='softmax')(x2)\nx3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)\noutputs3 = tf.keras.layers.Dense(4, activation='softmax')(x3)\nx4 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model4.output)\noutputs4 = tf.keras.layers.Dense(4, activation='softmax')(x4)\nx5 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model5.output)\noutputs5 = tf.keras.layers.Dense(4, activation='softmax')(x5)\n\nmodel0 = tf.keras.Model(inputs=inputs0, outputs=outputs0)\nmodel1 = tf.keras.Model(inputs=inputs1, outputs=outputs1)\nmodel2 = tf.keras.Model(inputs=inputs2, outputs=outputs2)\nmodel3 = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel4 = tf.keras.Model(inputs=inputs4, outputs=outputs4)\nmodel5 = tf.keras.Model(inputs=inputs5, outputs=outputs5)","1f5a24d5":"#model0.summary()\n#model1.summary()\n#model2.summary()\n#model3.summary()\n#model4.summary()\n#model5.summary()","01a74dae":"model0.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel1.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel2.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel3.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel4.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel5.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nhis0=model0.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=10)\nhis1=model1.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=10)\nhis2=model2.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=10)\nhis3=model3.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=10)\nhis4=model4.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=10)\nhis5=model5.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=10)","4d8479cf":"y_pred0=model0.predict(testx)\ny_pred1=model1.predict(testx)\ny_pred2=model2.predict(testx)\ny_pred3=model3.predict(testx)\ny_pred4=model4.predict(testx)\ny_pred5=model5.predict(testx)\n\npred0=np.argmax(y_pred0,axis=1)\npred1=np.argmax(y_pred1,axis=1)\npred2=np.argmax(y_pred2,axis=1)\npred3=np.argmax(y_pred3,axis=1)\npred4=np.argmax(y_pred4,axis=1)\npred5=np.argmax(y_pred5,axis=1)\n\nground = np.argmax(testy,axis=1)\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(ground,pred0))\nprint(classification_report(ground,pred1))\nprint(classification_report(ground,pred2))\nprint(classification_report(ground,pred3))\nprint(classification_report(ground,pred4))\nprint(classification_report(ground,pred5))","ae03ead9":"get_acc0 = his0.history['accuracy']\nget_acc1 = his1.history['accuracy']\nget_acc2 = his2.history['accuracy']\nget_acc3 = his3.history['accuracy']\nget_acc4 = his4.history['accuracy']\nget_acc5 = his5.history['accuracy']\n\nepochs = range(len(get_acc0))\n\nplt.plot(epochs, get_acc0, 'r', label='ResNet50')\nplt.plot(epochs, get_acc1, 'b', label='ResNet152V2')\nplt.plot(epochs, get_acc2, 'g', label='DenseNet121')\nplt.plot(epochs, get_acc3, 'y', label='DenseNet201')\nplt.plot(epochs, get_acc4, 'm', label='EfficientNetB0')\nplt.plot(epochs, get_acc5, 'c', label='EfficientNetB7')\n\nplt.title('Accuracy comparison')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","4895f5af":"get_loss0 = his0.history['loss']\nget_loss1 = his1.history['loss']\nget_loss2 = his2.history['loss']\nget_loss3 = his3.history['loss']\nget_loss4 = his4.history['loss']\nget_loss5 = his5.history['loss']\n\nepochs = range(len(get_loss0))\n\nplt.plot(epochs, get_loss0, 'r', label='ResNet50')\nplt.plot(epochs, get_loss1, 'b', label='ResNet152V2')\nplt.plot(epochs, get_loss2, 'g', label='DenseNet121')\nplt.plot(epochs, get_loss3, 'y', label='DenseNet201')\nplt.plot(epochs, get_loss4, 'm', label='EfficientNetB0')\nplt.plot(epochs, get_loss5, 'c', label='EfficientNetB7')\n\nplt.title('Loss comparison')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","40507627":"value_acc0 = his0.history['val_accuracy']\nvalue_acc1 = his1.history['val_accuracy']\nvalue_acc2 = his2.history['val_accuracy']\nvalue_acc3 = his3.history['val_accuracy']\nvalue_acc4 = his4.history['val_accuracy']\nvalue_acc5 = his5.history['val_accuracy']\n\nepochs = range(len(get_acc0))\n\nplt.plot(epochs, value_acc0, 'r', label='ResNet50')\nplt.plot(epochs, value_acc1, 'b', label='ResNet152V2')\nplt.plot(epochs, value_acc2, 'g', label='DenseNet121')\nplt.plot(epochs, value_acc3, 'y', label='DenseNet201')\nplt.plot(epochs, value_acc4, 'm', label='EfficientNetB0')\nplt.plot(epochs, value_acc5, 'c', label='EfficientNetB7')\n\nplt.title('Validation accuracy comparison')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","4aa711bb":"val_loss0 = his0.history['val_loss']\nval_loss1 = his1.history['val_loss']\nval_loss2 = his2.history['val_loss']\nval_loss3 = his3.history['val_loss']\nval_loss4 = his4.history['val_loss']\nval_loss5 = his5.history['val_loss']\n\nepochs = range(len(val_loss0))\n\nplt.plot(epochs, val_loss0, 'r', label='ResNet50')\nplt.plot(epochs, val_loss1, 'b', label='ResNet152V2')\nplt.plot(epochs, val_loss2, 'g', label='DenseNet121')\nplt.plot(epochs, val_loss3, 'y', label='DenseNet201')\nplt.plot(epochs, val_loss4, 'm', label='EfficientNetB0')\nplt.plot(epochs, val_loss5, 'c', label='EfficientNetB7')\n\nplt.title('Validation loss comparison')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","66523061":"load_img(\"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/LYMPHOCYTE\/_0_1022.jpeg\",target_size=(120,120))","1a06efc8":"image=load_img(\"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/LYMPHOCYTE\/_0_1022.jpeg\",target_size=(120,120))\n\nimage=img_to_array(image) \nimage=image\/255\nprediction_image=np.array(image)\nprediction_image=np.expand_dims(image, axis=0)","e9a18953":"reverse_mapping={ 0:Name3[0],1:Name3[1],2:Name3[2],3:Name3[3] }\n\ndef mapper(value):\n    return reverse_mapping[value]\n\npred0=model0.predict(prediction_image)\nvalue0=np.argmax(pred0)\nmove_name=mapper(value0)\n\nprint(\"Prediction is {}.\".format(move_name))","4071d27a":"print(tdata.shape)\npred20=model0.predict(tdata)\npred21=model1.predict(tdata)\npred22=model2.predict(tdata)\npred23=model3.predict(tdata)\npred24=model4.predict(tdata)\npred25=model5.predict(tdata)\nprint(pred20.shape)\n\nPRED0=[]\nfor item in pred20:\n    value2=np.argmax(item)      \n    PRED0+=[value2]\n\nPRED1=[]\nfor item in pred21:\n    value2=np.argmax(item)      \n    PRED1+=[value2]\n    \nPRED2=[]\nfor item in pred22:\n    value2=np.argmax(item)      \n    PRED2+=[value2]\n    \nPRED3=[]\nfor item in pred23:\n    value2=np.argmax(item)      \n    PRED3+=[value2]\n\nPRED4=[]\nfor item in pred24:\n    value2=np.argmax(item)      \n    PRED4+=[value2]\n    \nPRED5=[]\nfor item in pred25:\n    value2=np.argmax(item)      \n    PRED5+=[value2]","5b276b02":"ANS=tlabels0","144de67d":"accuracy0=accuracy_score(ANS,PRED0)\naccuracy1=accuracy_score(ANS,PRED1)\naccuracy2=accuracy_score(ANS,PRED2)\naccuracy3=accuracy_score(ANS,PRED3)\naccuracy4=accuracy_score(ANS,PRED4)\naccuracy5=accuracy_score(ANS,PRED5)\n\nprint(accuracy0)\nprint(accuracy1)\nprint(accuracy2)\nprint(accuracy3)\nprint(accuracy4)\nprint(accuracy5)","d9c74f7e":"# Blood Cell Keras Applications Comparison\n### among ResNet50, Resnet152V2, DenseNet121, DenseNet201, EfficientNetB0 and EfficientNetB7"}}