{"cell_type":{"108acfa6":"code","41d4e040":"code","cc025dd1":"code","e97ee0fc":"code","f8d768ec":"code","8fef920e":"code","79016c4b":"markdown","50c5fad9":"markdown","0bc982cf":"markdown","f0a17ac6":"markdown","932ef4a8":"markdown","4cb02599":"markdown"},"source":{"108acfa6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n!pip install ktrain\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41d4e040":"import pandas\nimport ktrain\nimport re\nfrom ktrain import text\n\ndataset_real = pandas.read_csv('..\/input\/fake-and-real-news-dataset\/True.csv')\ndataset_fake = pandas.read_csv('..\/input\/fake-and-real-news-dataset\/Fake.csv')\n\ndataset_real['category'] = 1\ndataset_fake['category'] = 0\n\ndataset = pandas.concat([dataset_real, dataset_fake])\ndataset.text = dataset.text.apply(lambda x: re.sub('[^a-zA-Z]', ' ', x))\ndataset.text = dataset.text.apply(lambda x: re.sub('  ', ' ', x))\n\nprint(dataset.info())","cc025dd1":"(xtrain, ytrain), (xtest, ytest), preprocess = text.texts_from_df(dataset, text_column='title', label_columns=['category'], maxlen=128, preprocess_mode='bert')","e97ee0fc":"model = text.text_classifier(name='bert', train_data=(xtrain, ytrain), preproc=preprocess)","f8d768ec":"learner = ktrain.get_learner(model=model, train_data=(xtrain, ytrain), val_data=(xtest, ytest), batch_size=32)","8fef920e":"learner.fit_onecycle(lr=2e-5, epochs=1)","79016c4b":"#  Step 5: Train the model\n\nNow train the model by passing learning rate and epochs... its that simple and we are done\nI just didnt have patience to wait till it completes so just terminated it, hope you got the jist though\n\n**Note: Since BERT model is very powerful and already comes with huge preloaded data; in single epoch, you'd get accuracy above 90%**\n**Only downside to it is takes lot of time as the model is heavy, you can try its lite version distilbert **\n\nTo test the prediction, you can use predict method","50c5fad9":"# Step 3: Create a model\n\nCreate a model of your choice, note that the name parameter passed here should match the preprocess_mode set above","0bc982cf":"# Step 4: Create a Learner instance\n\nThis step creates a learner instance, which is to be trained in the next step\nValidation is passed so that the model can validate its prediction on validation set and re-adjusts its feature weights","f0a17ac6":"# Step 1: Import libraries, dataset and some basic code cleaning\n\nWe'll clean the dataset for special characters and punctuations","932ef4a8":"# Simplest code for NLP - Sentiment analysis\nWe'll look out the most basic code block for **sentiment analysis** problem in **5 easy steps**\n\nFor this we are going to rely on **ktrain library** and the **Google's infamous NLP model: BERT**\n\n**As this is the basic guide, please don't expect multiple analysis steps or graphs**","4cb02599":"# Step 2: Preprocess data, split dataset for training and test\n\nWe can use any of the ktrain library's below functions based on our needs:\n* texts_from_df - to read data from dataframe\n* texts_from_folder - to read data from a directory\n* texts_from_csv - to read data from a csv file\n\n**Arguments passed:**\n* text_column - independent variable\/input data which is to be processed\n* label_columns - list of dependent variable\/output result\n* preprocess_mode - preprocess the data to suit which model (takes in 3 params: standard, bert or distilbert)\n* maxlen - max features to be set for the model (need to be careful as it utilizes huge resource power)"}}