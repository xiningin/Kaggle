{"cell_type":{"7caf51fd":"code","08a3bd6b":"code","c5c83278":"code","8ac2eebe":"code","9d2dd22e":"code","6aedb654":"code","1b4e12a8":"code","1e6032c1":"code","51a3c725":"code","835088f3":"code","2bc9a2b5":"code","b7021f77":"code","e599de65":"code","67842309":"markdown","777296bb":"markdown","5a1cd9ae":"markdown","4845bdc7":"markdown"},"source":{"7caf51fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.correlation import plot_corr #correlation graph\nfrom sklearn.model_selection import train_test_split #train and test split\nfrom sklearn import preprocessing #label encoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.linear_model import LogisticRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n","08a3bd6b":"#Import Data\ndata=pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","c5c83278":"print(data.head())","8ac2eebe":"#What is the distribution of the Species (y)\ndata.groupby('Species').size()","9d2dd22e":"#Check for NULLs\ndata.isnull().sum().sum()\n\n#there are no Nulls","6aedb654":"# Use the 'hue' argument to provide a factor variable\nsns.lmplot( x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=data, fit_reg=False, hue='Species', legend=False)\n \n# Move the legend to an empty part of the plot\nplt.legend(loc='lower right')\n\nplt.title(\"Iris Sepal Length vs Sepal Width\")\n","1b4e12a8":"#1) Correlation Matrix\ncorr = data[:-1].corr()\ncorr","1e6032c1":"#1) Correlation Matrix Heat Map\nfig=plot_corr(corr,xnames=corr.columns)","51a3c725":"#2) Another type of correlation matrix\nsns.heatmap(data[data.columns[:-1]].corr(),annot=True)\nfig=plt.gcf()\nfig.set_size_inches(5,5)\nplt.show()","835088f3":"#First convert species to a number\nle = preprocessing.LabelEncoder()\n\nfor i in range(0,data.shape[1]):\n    if data.dtypes[i]=='object':\n        data[data.columns[i]] = le.fit_transform(data[data.columns[i]])\nprint(data.head(10))\n\ndata.groupby('Species').size()","2bc9a2b5":"X = data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\ny = data['Species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\nprint(X.head())\nprint(y.head())","b7021f77":"#k-NN Model\n# Instantiate learning model (k = 2)\nclf = KNeighborsClassifier(2)\n\n# Fitting the model\nclf.fit(X_train,y_train)\n\n# Predicting the Test set results\ny_pred = clf.predict(X_test) \n\nprint(confusion_matrix(y_test, y_pred))  \nprint(classification_report(y_test,y_pred))\nprint('k-NN Model Accuracy Score:', accuracy_score(y_test, y_pred))","e599de65":"#Log Model\n\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\n\n# Command that outputs acccuracy\nscore = classifier.score(X_test, y_test)\nprint('Log Model Accuracy Score:', score)","67842309":"**2)Split the data into train and test**","777296bb":"**3) Model**","5a1cd9ae":"**Part 1) Data Exploration**","4845bdc7":"This is very nice clean data so it makes it easy to model."}}