{"cell_type":{"6f658b02":"code","b1e8b084":"code","e1e8486f":"code","101fbde8":"code","fdc435a3":"code","006da974":"code","64860760":"code","680f2a29":"code","eea87d37":"code","7aba6dbf":"code","9d69bc66":"code","c04f10d6":"code","c6b192e8":"code","00f065ea":"code","3f7a7567":"code","9ec3b708":"code","6e08c074":"code","03cdd0d0":"code","612ee76c":"code","62a40119":"code","dcb598be":"code","6f8cafae":"code","54456e98":"code","64bae453":"markdown","39cd6444":"markdown","4b8de7c4":"markdown"},"source":{"6f658b02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1e8b084":"import pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndf = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')\ndf.head()","e1e8486f":"df = df.drop(['Serial No.'], axis=1)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","101fbde8":"fig = sns.regplot(x=\"GRE Score\", y=\"TOEFL Score\", data=df)\nplt.title(\"GRE Score vs TOEFL Score\")\nplt.show()","fdc435a3":"fig = sns.regplot(x=\"GRE Score\", y=\"CGPA\", data=df)\nplt.title(\"GRE Score vs CGPA\")\nplt.show()","006da974":"fig = sns.regplot(y=\"LOR \", x=\"CGPA\", data=df)\nplt.title(\"LOR vs CGPA\")\nplt.show()","64860760":"fig = sns.lmplot(x=\"CGPA\", y=\"LOR \", data=df, hue=\"Research\")\nplt.title(\"LOR vs CGPA\")\nplt.show()","680f2a29":"fig = sns.regplot(y=\"LOR \", x=\"GRE Score\", data=df)\nplt.title(\"LOR vs GRE Score\")\nplt.show()","eea87d37":"fig = sns.lmplot(x=\"GRE Score\", y=\"LOR \", data=df, hue=\"Research\")\nplt.title(\"LOR vs GRE Score\")\nplt.show()","7aba6dbf":"fig = sns.regplot(x=\"CGPA\", y=\"SOP\", data=df)\nplt.title(\"CGPA vs SOP\")\nplt.show()","9d69bc66":"fig = sns.regplot(x=\"GRE Score\", y=\"SOP\", data=df)\nplt.title(\"SOP vs GRE Score\")\nplt.show()","c04f10d6":"fig = sns.regplot(x=\"TOEFL Score\", y=\"SOP\", data=df)\nplt.title(\"SOP vs TOEFL scores\")\nplt.show()","c6b192e8":"import numpy as np\ncorr = df.corr()\nfig, ax = plt.subplots(figsize=(8, 8))\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\ndropSelf = np.zeros_like(corr)\ndropSelf[np.triu_indices_from(dropSelf)] = True\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, cmap=colormap, linewidths=.5, annot=True, fmt=\".2f\", mask=dropSelf)\nplt.show()","00f065ea":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(9, 7))\n    ax = sns.heatmap(corr,mask=mask,square=True,annot=True,fmt='0.2f',linewidths=.8,cmap=\"hsv\")","3f7a7567":"plt.figure(figsize=(6,6))\nplt.subplot(2, 1, 1)\nsns.distplot(df['GRE Score'],bins=34,color='Blue',  kde_kws={\"color\": \"r\", \"lw\": 3, \"label\": \"KDE\"},hist_kws={\"linewidth\": 2,\"alpha\": 0.3 })\nplt.subplot(2, 1, 2)\nsns.distplot(df['TOEFL Score'],bins=12,color='Green' ,kde_kws={\"color\": \"k\", \"lw\": 3, \"label\": \"KDE\"},hist_kws={\"linewidth\": 7,\"alpha\": 0.3 })","9ec3b708":"sns.scatterplot(x='University Rating',y='CGPA',data=df,color='Blue', s=100)","6e08c074":"co_gre=df[df[\"GRE Score\"]>=300]\nco_toefel=df[df[\"TOEFL Score\"]>=100]\nfig, ax = plt.subplots(figsize=(15,8))\nsns.barplot(x='GRE Score',y='Chance of Admit ',data=co_gre)\nplt.show()","03cdd0d0":"fig, ax = plt.subplots(figsize=(15,8))\nsns.barplot(x='TOEFL Score',y='Chance of Admit ',data=co_toefel)\nplt.show()","612ee76c":"print(\"Average GRE Score :{0:.2f} out of 340\".format(df['GRE Score'].mean()))\nprint('Average TOEFL Score:{0:.2f} out of 120'.format(df['TOEFL Score'].mean()))\nprint('Average CGPA:{0:.2f} out of 10'.format(df['CGPA'].mean()))\nprint('Average Chance of getting admitted:{0:.2f}%'.format(df['Chance of Admit '].mean()*100))","62a40119":"# Chi - square test, GRE vs TOEFL scores\nfrom scipy.stats import chi2_contingency\nstat, p, dof, expected = chi2_contingency(df[\"GRE Score\"], df[\"TOEFL Score\"])\nprint(\"p value is \" + str(p))\n# alpha = 0.05\n# if p <= alpha:\n#     print('Dependent (reject H0)')\n# else:\n#     print('Independent (H0 holds true)')","dcb598be":"# Uni - Rating vs chances of admit chi-square test\nstat, p, dof, expected = chi2_contingency(df[\"University Rating\"], df[\"Chance of Admit \"])\nprint(\"p value is \" + str(p))","6f8cafae":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\n# creating trace1\ndata =go.Scatter(\n                    x = df['CGPA'],\n                    y = df['Chance of Admit '],\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = df['GRE Score'], showscale = True),\n                    text = df['GRE Score']\n                    )\n\n\n\nlayout = dict(title = 'GRE is Highlighted',\n              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),\n              xaxis= dict(title= 'CGPA',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\npyoff.iplot(fig)","54456e98":"x=0\nfor i in cols:\n    plot_data = [\n        go.Scatter(\n            x=df[i],\n            y=df['Chance of Admit '],\n            mode = \"markers\",\n            name=i,\n            marker = dict(color = color[x])\n\n            ),\n        go.Scatter(\n            x=query1[i],\n            y=query1['Chance of Admit '],\n            mode = \"markers\",\n            name='> 75% Chance',\n            marker = dict(color = 'Red')\n\n            ),\n\n    ]\n    plot_layout = go.Layout(\n            #title=i,\n            yaxis_title='Chance of Admit ',\n            xaxis_title=i\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)\n    x+=1\n","64bae453":"**1. Correlating different columns (mutual relationships)**","39cd6444":"Hence, higher the Scores better the chance of admit","4b8de7c4":"Here we can see that the chance of admit is highly correlated with CGPA. GRE and TOEFEL scores are also correlated."}}