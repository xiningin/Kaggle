{"cell_type":{"ab24e0b5":"code","28f2807d":"code","9f1bdf90":"code","b48adf7c":"code","4a9975ba":"code","6b587e93":"code","d6c9d1b7":"code","080203c3":"code","4cd5e958":"code","d3416352":"code","12484683":"code","647630f5":"code","9052c416":"code","8192a407":"code","ebbdbbb5":"code","c768b0da":"code","8fd16734":"code","8f0e2a47":"code","961054fc":"code","10ce9e16":"code","f9b5331c":"code","ec5df2b5":"code","9a14eb95":"code","7c778a9f":"code","4e7f946f":"code","359e9874":"code","bcb9061f":"code","672a4b27":"code","3ab4e245":"code","b7daf3b4":"code","d1ce646b":"code","f21dbf07":"code","3a2440e8":"code","76a4003d":"code","3dc6a0cc":"code","1f67475c":"code","84fa4262":"code","b00781d3":"code","73300d8c":"code","f73c17dc":"code","163f3cb7":"code","cfd221ec":"code","2395f93f":"code","d659f5b6":"code","e28123fc":"code","a1f11aaa":"code","6750edb8":"code","46d6acfe":"code","82b42820":"code","a5bedd2a":"code","073c2aa5":"markdown","15474c1f":"markdown","96b2951b":"markdown","e0cd446c":"markdown","301a8e14":"markdown","225d71da":"markdown","af0dc5bb":"markdown"},"source":{"ab24e0b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nfrom datetime import datetime\nimport statsmodels.api as sm\nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28f2807d":"series=pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv\")","9f1bdf90":"cases = pd.read_csv('\/kaggle\/input\/corona-virus-report\/day_wise.csv')","b48adf7c":"cases.head()","4a9975ba":"cases['New recovered'].plot()","6b587e93":"cases.head()","d6c9d1b7":"import matplotlib.pyplot as plt","080203c3":"cases.isnull().sum()","4cd5e958":"cases.shape","d3416352":"recovered = cases[['Date','New recovered']]","12484683":"recovered['Date'].min(),series['Date'].max()","647630f5":"recov=recovered.loc[(recovered['Date']>'2020-05-16' )& (recovered['Date'] < '2020-07-15')].copy()","9052c416":"recov=recov.groupby('Date')['New recovered'].sum().reset_index()","8192a407":"recov.head()","ebbdbbb5":"rtoll = recov.copy()","c768b0da":"rtoll.head()","8fd16734":"rtoll.set_index('Date',inplace=True)","8f0e2a47":"rtoll.index = pd.to_datetime(rtoll.index)","961054fc":"rtoll.head()","10ce9e16":"from pylab import rcParams\nrcParams['figure.figsize'] =5,5\nrtoll.plot()","f9b5331c":"from statsmodels.tsa.stattools import adfuller","ec5df2b5":"test_results = adfuller(rtoll['New recovered'])","9a14eb95":"#Ho: It is Not Stattionary\n#HA : It is Stationary\n\ndef adfuller_test (deaths):\n    result = adfuller(deaths)\n    labels=['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n    for value,label in zip(result,labels):\n        print(label+':'+ str(value))\n    if(result[1]<=0.05):\n        print(\"Stationary\")\n    else:\n        print(\"Not Stationary\")","7c778a9f":"adfuller_test(rtoll['New recovered'])","4e7f946f":"plt.figure(figsize=(40,8))\nplt.plot(np.log(rtoll['New recovered']))","359e9874":"rtoll['New recovered Diff'] = rtoll['New recovered']-rtoll['New recovered'].shift(1)","bcb9061f":"adfuller_test(rtoll['New recovered Diff'].dropna())","672a4b27":"rtoll.isnull().sum()","3ab4e245":"rtoll.drop(['New recovered'],axis=1,inplace=True)","b7daf3b4":"from pylab import rcParams \nrcParams['figure.figsize'] =18,8\ndecomposition = sm.tsa.seasonal_decompose(rtoll.dropna(),model='additive')\nfig = decomposition.plot()\nplt.show()","d1ce646b":"rtoll.head()","f21dbf07":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","3a2440e8":"fig = plt.figure(figsize=(12,8))\nax1=fig.add_subplot(211)\nfig=sm.graphics.tsa.plot_acf(rtoll['New recovered Diff'].iloc[1:],lags=40,ax=ax1)\nax2=fig.add_subplot(212)\nfig=sm.graphics.tsa.plot_pacf(rtoll['New recovered Diff'].iloc[1:],lags=40,ax=ax2)","76a4003d":"from statsmodels.tsa.arima_model import ARIMA","3dc6a0cc":"p = q = d = range(0,2)\npdq = list(itertools.product(p,d,q))","1f67475c":"for param in pdq:\n        try:\n            model=ARIMA(rtoll['New recovered Diff'].dropna(),order=param)\n            results=model.fit()\n            print('ARIMA{}- AIC:{}'.format(param,results.aic))\n        except:\n            continue","84fa4262":"model = ARIMA(rtoll['New recovered Diff'].dropna(),order=(0,0,1))","b00781d3":"results=model.fit()","73300d8c":"results.summary().tables[1]","f73c17dc":"rtoll['Forecast']=results.predict(start=pd.to_datetime('2020-07-01'),dynamic=False)","163f3cb7":"rtoll['Forecast'].tail(5)","cfd221ec":"ax=rtoll['New recovered Diff'].plot(label='Observed')\nrtoll['Forecast'].plot(ax=ax,label='Predicted',alpha=.7,figsize=(14,7))\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.show()","2395f93f":"rtoll.index[-1]","d659f5b6":"#Getting the forecasted value for the next seven days\nforecast = results.forecast(steps=7)[0]","e28123fc":"forecast","a1f11aaa":"from pandas.tseries.offsets import DateOffset\nfuture_dates = [rtoll.index[-1]+ DateOffset(days=x)for x in range(0,7)]","6750edb8":"future_dates_df = pd.DataFrame(index=future_dates[1:],columns=rtoll.columns)","46d6acfe":"future_df = pd.concat([rtoll,future_dates_df])","82b42820":"future_df.tail(6)","a5bedd2a":"future_df['Forecast'] = results.predict(start='2020-07-01',end='2020-07-20',dynamic=False)\nfuture_df[['New recovered Diff','Forecast']].plot()","073c2aa5":"******As you can see that the data has become stationary after differencing**","15474c1f":"Using the dicky fuller method for testing stationarity of the data","96b2951b":"Forecasting the Covid-19 Situation around the World (Generalised Model Globally)","e0cd446c":"As we can see that the p value greater them 0.05 and thus data is Not Stationary... Accept Null Hypothesis","301a8e14":"# **ARIMA MODEL FOR TIME SERIES FORECASTING OF RECOVERED CASES**","225d71da":"Differencing Used To Make Data Stationary","af0dc5bb":"From the Above Graph we can see that p value is 1 , as it shuts of in that position , q=0 because the exponential characteristics is unseen"}}