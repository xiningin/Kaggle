{"cell_type":{"b78cd49a":"code","5e63b7f2":"code","84d6cc10":"code","ab4d4437":"code","6b1c2384":"code","538bda48":"code","ca6b65fb":"code","845cf197":"code","9aa3f66a":"code","cc370cd0":"code","9a13757d":"code","f5d8be8e":"code","312d683c":"code","40019296":"code","963d18cd":"code","2ebd30aa":"code","0133ea6b":"code","3c07b341":"code","8917e777":"code","c4c4f642":"markdown","409bdca5":"markdown","513f41b4":"markdown","3b18d097":"markdown","adcf42dc":"markdown","082d7752":"markdown","c0fb5419":"markdown","689fcb0b":"markdown"},"source":{"b78cd49a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e63b7f2":"from sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm import tqdm\ntqdm.pandas()\nimport seaborn as sns\nimport matplotlib.pyplot as plt","84d6cc10":"sample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\ntrain_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv')","ab4d4437":"train_df.head()","6b1c2384":"train_df.shape","538bda48":"test_df.shape","ca6b65fb":"train_df.isna().sum()","845cf197":"cont_cols = [x for x in train_df.columns if 'cont' in x]\ncat_cols = [x for x in train_df.columns if 'cat' in x]","9aa3f66a":"train_df[cont_cols].hist(color='k', alpha=0.5, bins=25, figsize=(20, 10))","cc370cd0":"for i,var in enumerate(cont_cols):\n    sns.displot(train_df, x=var, hue=\"target\", kind=\"kde\", ax=[axs[i\/\/3],axs[i%3]])\n    sns.displot(test_df, x=var, kind=\"kde\")","9a13757d":"train_df[cat_cols].describe()","f5d8be8e":"train_df['target'].value_counts()","312d683c":"for col in cat_cols:\n    le = preprocessing.LabelEncoder()\n    full = train_df[col].append(test_df[col])\n    le.fit(full)\n    train_df[col] = le.transform(train_df[col])\n    test_df[col] = le.transform(test_df[col])","40019296":"train_df.head()","963d18cd":"test_df.head()","2ebd30aa":"X = train_df.drop(['id', 'target'], axis=1)\ny = train_df['target']\nX_test = test_df.drop(['id'], axis=1)","0133ea6b":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=137)\ntrain_score_dict = {}\ntest_preds = 0\n\npred = []\n\nfor i, (train_ind, val_ind) in tqdm(enumerate(kf.split(X, y))):\n        print(f'Index {i}')\n        train_df, val_df = X.iloc[train_ind], X.iloc[val_ind]\n        train_target, val_target = y.iloc[train_ind], y.iloc[val_ind]\n        \n        \n        clf = RandomForestClassifier()\n        clf =  clf.fit(train_df, train_target)\n        temp_oof = clf.predict_proba(val_df)[:,1]\n        temp_test = clf.predict_proba(X_test)[:,1]\n\n        train_score_dict[i] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        pred.append(temp_test)\n        \n        print(roc_auc_score(val_target, temp_oof))","3c07b341":"final_pred = []\nfor i in range(len(pred[0])):\n    final_pred.append(mean(pred[0][i],pred[1][i],pred[2][i],pred[3][i],pred[4][i]))","8917e777":"sample_submission['target'] = final_pred\nsample_submission.to_csv('submission_as.csv', index=False)","c4c4f642":"Some columns have large number of unique values,  maybe we can try some bucketing later on.","409bdca5":"As per the data description, cat0-cat18 are categorical columns and cont0-cont10 are numerical columns.","513f41b4":"### Let us try some modelling.","3b18d097":"1. Looks like for some columns like cont3 and cont4, we can convert to categorical values by bucketing.  \n2. Also need to take a look at the right \"tails\" of cont0, cont10. \n","adcf42dc":"So, this is a imbalanced calssification problem.","082d7752":"### Check for Null values.","c0fb5419":"Distribution betweeen train and test group seem to match.","689fcb0b":"Preprocessing first"}}