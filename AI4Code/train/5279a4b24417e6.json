{"cell_type":{"967dba8d":"code","8aaa7d69":"code","b9949aa7":"code","ee42335d":"code","c4afb267":"code","1afd0045":"code","5f9fefa9":"code","523dcbc0":"code","f5eab992":"code","048b917c":"code","a0be3f93":"code","56e21338":"code","b1231711":"code","a9912df4":"code","4f6e6683":"code","ce65a0c6":"markdown","6e056317":"markdown","9dfc2369":"markdown","f8b61ac5":"markdown","2ac4c65e":"markdown","9ca43d7f":"markdown","26d7afef":"markdown","b2e54083":"markdown","a9e77fbf":"markdown","e8b419a7":"markdown","c92066b6":"markdown"},"source":{"967dba8d":"import numpy as np \nimport pandas as pd \nimport time\nimport os","8aaa7d69":"df = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col = 'family_id')\nsubmission = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv', index_col = 'family_id')","b9949aa7":"family_size_dict = df[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = df[cols].to_dict()","ee42335d":"N_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\ndays = list(range(N_DAYS, 0, -1))","c4afb267":"def cost_function(prediction):\n    \n    penalty = 0\n    daily_occupancy_cost = {k: 0 for k in days}\n    \n    for f, d in enumerate(prediction):\n        \n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n        \n        daily_occupancy_cost[d] += n\n        \n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n            \n    for _, v in daily_occupancy_cost.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    accounting_cost = (daily_occupancy_cost[days[0]] - 125.0) \/ 400.0 * daily_occupancy_cost[days[0]]**(0.5)\n    accounting_cost = max(0, accounting_cost)\n\n    yesterday_count = daily_occupancy_cost[days[0]]\n\n    for day in days[1:]:\n        today_count = daily_occupancy_cost[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy_cost[day] - 125.0) \/ 400.0 * daily_occupancy_cost[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n    penalty += accounting_cost\n\n    return penalty\n            ","1afd0045":"def calc_family_penalty(f, d, daily_occupancy_fn):\n    penalty = 0\n    \n    n = family_size_dict[f]\n    choice_0 = choice_dict['choice_0'][f]\n    choice_1 = choice_dict['choice_1'][f]\n    choice_2 = choice_dict['choice_2'][f]\n    choice_3 = choice_dict['choice_3'][f]\n    choice_4 = choice_dict['choice_4'][f]\n    choice_5 = choice_dict['choice_5'][f]\n    choice_6 = choice_dict['choice_6'][f]\n    choice_7 = choice_dict['choice_7'][f]\n    choice_8 = choice_dict['choice_8'][f]\n    choice_9 = choice_dict['choice_9'][f]\n\n    if d == choice_0:\n        penalty += 0\n    elif d == choice_1:\n        penalty += 50\n    elif d == choice_2:\n        penalty += 50 + 9 * n\n    elif d == choice_3:\n        penalty += 100 + 9 * n\n    elif d == choice_4:\n        penalty += 200 + 9 * n\n    elif d == choice_5:\n        penalty += 200 + 18 * n\n    elif d == choice_6:\n        penalty += 300 + 18 * n\n    elif d == choice_7:\n        penalty += 300 + 36 * n\n    elif d == choice_8:\n        penalty += 400 + 36 * n\n    elif d == choice_9:\n        penalty += 500 + 36 * n + 199 * n\n    else:\n        penalty += 500 + 36 * n + 398 * n\n            \n    for _, v in daily_occupancy_fn.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n            \n    return penalty","5f9fefa9":"def accounting_day(day, daily_occupancy_2):\n    if(day != 100):\n        diff = abs(daily_occupancy_2[day + 1] - daily_occupancy_2[day])\n        return max(0, (daily_occupancy_2[day] - 125.0) \/ 400.0 * daily_occupancy_2[day]**(0.5 + diff \/ 50.0))\n    else:\n        return (daily_occupancy_2[day] - 125.0) \/ 400.0 * daily_occupancy_2[day]**(0.5)\n    ","523dcbc0":"best = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\nprint(start_score)\nnew = best.copy()\n'''\nfor fam_id, _ in enumerate(best):\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day\n        new_cost = cost_function(temp)\n        if(new_cost < start_score):\n            new = temp.copy()\n            start_score = new_cost\n'''","f5eab992":"daily_occupancy = {k: 0 for k in days}\n\nfor f, d in enumerate(new):   \n        n = family_size_dict[f]\n        daily_occupancy[d] += n","048b917c":"def change_family_days():\n    \n    global daily_occupancy\n    \n    for fam_id in range(5000):\n            \n            # try moving them to every day\n            for i in range(1, 101):\n                \n                fam1_day = new[fam_id]\n                \n                # accounting cost for the family's current day, before switching them\n                accounting_current_before_1 = accounting_day(fam1_day, daily_occupancy)\n                \n                # accounting cost for the day before the family's current day, before switching them\n                if((fam1_day != 1) & (i != fam1_day - 1)):\n                    accounting_current_before_2 = accounting_day(fam1_day - 1, daily_occupancy)\n                else: \n                    accounting_current_before_2 = 0\n                    \n                # accounting cost for the day we're going to try to move the family to, before switching them\n                accounting_future_before_1 = accounting_day(i, daily_occupancy)\n                \n                # accounting cost for the day before the day we're going to try to move the family to, before switching them\n                if((i != 1) & (fam1_day != i - 1)):\n                    accounting_future_before_2 = accounting_day(i - 1, daily_occupancy)\n                else: \n                    accounting_future_before_2 = 0\n                    \n                # the penalty based on the family's choices, before moving them\n                fam1_penalty_before = calc_family_penalty(fam_id, fam1_day, daily_occupancy)\n                \n                # the total cost of the things that will change after we move the family\n                before = accounting_current_before_1 + accounting_current_before_2 + fam1_penalty_before + accounting_future_before_1 + accounting_future_before_2\n\n                # move the family by updating the daily occupancy\n                daily_occupancy_temp = daily_occupancy.copy()\n                daily_occupancy_temp[fam1_day] = daily_occupancy_temp[fam1_day] - family_size_dict[fam_id]\n                daily_occupancy_temp[i] = daily_occupancy_temp[i] + family_size_dict[fam_id]\n\n                # accounting cost for the day the family is moving to, after we've moved them\n                accounting_future_after_1 = accounting_day(i, daily_occupancy_temp)\n                \n                # accounting cost for the day before the one the family is moving to, after we've moved them\n                if((i != 1) & (fam1_day != i - 1)):\n                    accounting_future_after_2 = accounting_day(i - 1, daily_occupancy_temp)\n                else: \n                    accounting_future_after_2 = 0\n                \n                # accounting cost for the day the family started on, after we've moved them\n                accounting_day_current_after_1 = accounting_day(fam1_day, daily_occupancy_temp)\n                \n                # accounting cost for the day before the one the family started on, after we've moved them\n                if((fam1_day != 1) & (i != fam1_day - 1)):\n                    accounting_current_after_2 = accounting_day(fam1_day - 1, daily_occupancy_temp)\n                else: \n                    accounting_current_after_2 = 0\n                \n                # the penalty based on the family's choices, after moving them\n                fam1_penalty_post = calc_family_penalty(fam_id, i, daily_occupancy_temp)\n                \n                # the total cost of the things that will change after we've moved the family\n                after = accounting_future_after_1 + accounting_future_after_2 + fam1_penalty_post + accounting_day_current_after_1 + accounting_current_after_2\n\n                # if the overall cost has decreased, move them\n                if(before > after):\n                    print(f'Switching {fam_id} from day {fam1_day} to day {i}')\n                    new[fam_id] = i \n                    daily_occupancy = daily_occupancy_temp.copy()","a0be3f93":"def swap_families():\n    \n    global daily_occupancy\n    \n    for fam_id in range(5000):\n        for fam_id2 in range(5000):\n            if fam_id2 == fam_id:\n                continue\n  \n            fam1_day = new[fam_id]\n            fam2_day = new[fam_id2]\n            \n            accounting_fam1_before_1 = accounting_day(fam1_day, daily_occupancy)\n            \n            if((fam1_day != 1) & (fam1_day - 1 != fam2_day)):\n                accounting_fam1_before_2 = accounting_day(fam1_day - 1, daily_occupancy)\n            else: \n                accounting_fam1_before_2 = 0\n                \n            accounting_fam2_before_1 = accounting_day(fam2_day, daily_occupancy)\n            \n            if((fam2_day != 1) & (fam2_day - 1 != fam1_day)):\n                accounting_fam2_before_2 = accounting_day(fam2_day - 1, daily_occupancy)\n            else:\n                accounting_fam2_before_2 = 0\n                \n            fam1_penalty_pre = calc_family_penalty(fam_id, fam1_day, daily_occupancy)\n            fam2_penalty_pre = calc_family_penalty(fam_id2, fam2_day, daily_occupancy)\n            \n            # The cost of everything that will change, before the families are switched\n            before = accounting_fam1_before_1 + accounting_fam1_before_2 + accounting_fam2_before_1 + accounting_fam2_before_2 + fam1_penalty_pre + fam2_penalty_pre\n\n            # Switch the families by updating the daily occupancy\n            daily_occupancy_temp = daily_occupancy.copy()\n            daily_occupancy_temp[fam1_day] = daily_occupancy_temp[fam1_day] - family_size_dict[fam_id] + family_size_dict[fam_id2]\n            daily_occupancy_temp[fam2_day] = daily_occupancy_temp[fam2_day] - family_size_dict[fam_id2] + family_size_dict[fam_id]\n\n            accounting_fam1_after_1 = accounting_day(fam1_day, daily_occupancy_temp)\n            \n            if((fam1_day != 1) & (fam1_day - 1 != fam2_day)):\n                accounting_fam1_after_2 = accounting_day(fam1_day - 1, daily_occupancy_temp)\n            else:\n                accounting_fam1_after_2 = 0\n                \n            accounting_fam2_after_1 = accounting_day(fam2_day, daily_occupancy_temp)\n            \n            if((fam2_day != 1) & (fam2_day - 1 != fam1_day)):\n                accounting_fam2_after_2 = accounting_day(fam2_day - 1, daily_occupancy_temp)\n            else:\n                accounting_fam2_after_2 = 0\n                \n            fam1_penalty_post = calc_family_penalty(fam_id, fam2_day, daily_occupancy_temp)\n            fam2_penalty_post = calc_family_penalty(fam_id2, fam1_day, daily_occupancy_temp)\n            \n            # The cost of everything that will change, after the families are switched\n            after = accounting_fam1_after_1 + accounting_fam1_after_2 + accounting_fam2_after_1 + accounting_fam2_after_2 + fam1_penalty_post + fam2_penalty_post\n\n            # If the cost decreases, swap them\n            if(before > after):\n                daily_occupancy = daily_occupancy_temp.copy()\n                new[fam_id] = fam2_day\n                new[fam_id2] = fam1_day","56e21338":"import random","b1231711":"cost = cost_function(new)\ni = 0\nb = 0\nprint('Working on minimizing cost')\nprint(f'current cost: {cost}')\nwhile(True):\n    i = i + 1\n    change_family_days()\n    new_cost = cost_function(new)\n    if(new_cost < cost):\n        print(f'Round {i}: Changed family days.  New cost: {new_cost}')\n        cost = new_cost\n        continue\n    swap_families()\n    new_cost = cost_function(new)\n    if(new_cost < cost):\n        print(f'Round {i}: Swapped families.  New cost: {new_cost}')\n        cost = new_cost\n        continue\n    else:\n        break","a9912df4":"print('making submission')\nsubmission['assigned_day'] = new","4f6e6683":"submission.to_csv('submission.csv')","ce65a0c6":"Initialize a global variable to track the daily occupancy for each day, which we can pass to the accounting_day and calc_family_penalty functions.","6e056317":"Define a function that calculates the accounting penalty for a specific day.","9dfc2369":"A method that tries to switch each family with each other family, and keeps them there if the cost decreases.  Note that the total cost isn't calculated each time (it would take too long).  Instead, only the parts of the total cost that *change* are calculated, before and after the move.","f8b61ac5":"Define a function that will calculate the total cost, given a prediction.  Again, this is borrowed from the starter notebook.","2ac4c65e":"Read in data and initialize some variables that will be useful later on.  Most of this code was borrowed from the starter notebook.","9ca43d7f":"This is starter code again.  We start by using the 'cost_function' and try to move each family to a day on their list.","26d7afef":"A method that tries to move every family to every other day, and keeps them there if the cost decreases.  Note that the total cost isn't calculated each time (it would take too long).  Instead, only the parts of the total cost that *change* are calculated, before and after the move.","b2e54083":"Define a function that calculates the penalty for a family based on the day that they're assigned to.  We'll also use this function to run through the daily occupancy and add a heavy penalty if the number of people on any day isn't between 125 and 300, as required.","a9e77fbf":"Import libraries","e8b419a7":"Now, we basically just alternate calling these functions until we've reached a point where neither of them can do anything to make the cost smaller.","c92066b6":"The main idea of this notebook is that you can try to move families to different days, or switch them with other families, and evaluate the decision bases on calculating only the elements of the cost function that would change due to the move, rather than calculating the entire cost each time."}}