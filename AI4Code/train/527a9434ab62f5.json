{"cell_type":{"3fca7093":"code","8868c983":"code","28bf62fd":"code","0f177c9c":"code","a639b179":"code","b1ade588":"code","1ace5b79":"code","a4aba081":"code","d910f53d":"code","ea955585":"code","7fbdc463":"code","feacd234":"code","bed54f50":"code","8e2565df":"code","b8558ceb":"code","c2515201":"code","b4c8925a":"code","bb591e5a":"code","6ae6910a":"code","22eb7bc9":"code","911e6e13":"code","82ca96b2":"code","f0308a7b":"code","684846df":"code","f2803c24":"code","5ff3cb00":"code","23e9a526":"code","1dcd46aa":"code","3604a30e":"code","2ca3b678":"code","29a52a06":"code","30c6c0dd":"code","a3cc22a0":"code","c2c25278":"code","7249063e":"code","5d7a917d":"code","7d0932e8":"code","03220171":"code","a0788980":"code","3d97d33e":"code","e3608c77":"code","209f6b93":"code","4cd9c1e7":"code","1a90164e":"code","a5fc0ee9":"code","161dd688":"code","c7cd7d30":"code","862fef7b":"code","386defae":"code","634ca346":"code","13ef3183":"code","64c417e2":"code","6f01937b":"code","38f77be3":"code","58a83074":"code","4b0320d9":"code","45b59165":"code","62e0e5b1":"code","23213d11":"code","3d668507":"code","d5c20c95":"code","40ce00be":"code","c789e161":"markdown","43f4107a":"markdown","5f665126":"markdown","49250d96":"markdown","85c2042a":"markdown","b9af355f":"markdown","584456c9":"markdown","c5f77b48":"markdown","312333e3":"markdown","d6fc08c9":"markdown","8978ba1e":"markdown","9c071e1b":"markdown","a452885d":"markdown","5ad88f4d":"markdown","ca788590":"markdown","43b3cdd6":"markdown","d48fe728":"markdown","029818f8":"markdown","e6d5e259":"markdown","ccb3364b":"markdown","b3a40183":"markdown","799eb321":"markdown","6b544141":"markdown","a308374a":"markdown","b6a5aac2":"markdown","6ecd9b7f":"markdown","c273310e":"markdown","994aa301":"markdown","33114e29":"markdown","fb63bb49":"markdown","521198d7":"markdown","bbef8d97":"markdown","f90c2a0c":"markdown","206b8efb":"markdown","bdb6be53":"markdown","4160933d":"markdown","71d61498":"markdown","17cd9240":"markdown","a9e4c20e":"markdown","16f2daea":"markdown","2fac4de0":"markdown"},"source":{"3fca7093":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8868c983":"df_sing = pd.read_csv('\/kaggle\/input\/evolution-of-rubiks-cube-solve-times\/best_singles.csv')","28bf62fd":"df_sing.head(6)","0f177c9c":"df_sing.shape","a639b179":"df_sing.describe()","b1ade588":"df_sing.isna().sum()","1ace5b79":"print(df_sing['country'].unique())\nprint(df_sing['country'].nunique())","a4aba081":"unique_comp = []\nfor x in df_sing['competition']:\n    l = len(x)\n    unique_comp.append(x[2:l-6])\n    \ndf_sing['unique competition'] = unique_comp","d910f53d":"year = []\nfor x in df_sing['competition']:\n    #l = len(x)\n    year.append(x[-5:])\n\n#print(year)\ndf_sing['year'] = year","ea955585":"df_sing.head(10)","7fbdc463":"print(df_sing['year'].unique())\nprint(df_sing['year'].nunique())","feacd234":"print(df_sing['unique competition'].unique())\nprint(df_sing['unique competition'].nunique())","bed54f50":"print(df_sing['time'].unique())\nprint(df_sing['time'].nunique())","8e2565df":"print(df_sing['rank'].unique())\nprint(df_sing['rank'].nunique())","b8558ceb":"points = []\nfor x in range(1000):\n    points.append(1)\n\ndf_sing['points'] = points","c2515201":"df_sing.head()","b4c8925a":"points = []\n\nfor x in df_sing['country'].unique():\n    points.append(df_sing['country'].tolist().count(x))\n#print(points)\nunique_country = [list(x) for x in zip(df_sing['country'].unique(), points)]\n#print(unique_country)\ndf_sing_country = pd.DataFrame(unique_country, columns = ['Country', 'Points'])\ndf_sing_country","bb591e5a":"points2 = []\n\nfor x in df_sing['unique competition'].unique():\n    points2.append(df_sing['unique competition'].tolist().count(x))\n#print(points)\nunique_competitions = [list(x) for x in zip(df_sing['unique competition'].unique(), points2)]\n#print(unique_country)\ndf_sing_competition = pd.DataFrame(unique_competitions, columns = ['Competition', 'Points'])\ndf_sing_competition","6ae6910a":"points3 = []\n\nfor x in df_sing['year'].unique():\n    points3.append(df_sing['year'].tolist().count(x))\n#print(points)\nyear = [list(x) for x in zip(df_sing['year'].unique(), points3)]\n#print(unique_country)\ndf_sing_year = pd.DataFrame(year, columns = ['Year', 'Points'])\ndf_sing_year","22eb7bc9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","911e6e13":"df_sing_country.loc[df_sing_country['Points'] < 10, 'Country'] = 'Other countries' # Represent only large countries\nfig = px.pie(df_sing_country, values='Points', names='Country', title='Country Percentages')\nfig.show()","82ca96b2":"fig = px.pie(df_sing_year, values='Points', names='Year', title='Yearly Percentages')\nfig.show()","f0308a7b":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(df_sing['rank'], df_sing['time'], color='Red')\nax.xaxis.set_major_locator(plt.MaxNLocator(50))\nax.set_xlabel('Rank', fontsize='15')\nax.set_ylabel('Time', fontsize='15')\nplt.title('Time Vs. Rank Graph', fontsize='20')\nplt.grid()\nplt.show()","684846df":"df_sing_country.sort_values(by=['Points'], ascending=False). head(5)","f2803c24":"df_sing_competition.sort_values(by=['Points'], ascending=False). head(6)","5ff3cb00":"df_sing_year.sort_values(by=['Points'], ascending=False). head(5)","23e9a526":"df_avg = pd.read_csv('\/kaggle\/input\/evolution-of-rubiks-cube-solve-times\/best_averages.csv')","1dcd46aa":"df_avg.head(10)","3604a30e":"df_avg.shape","2ca3b678":"df_avg.describe()","29a52a06":"df_avg.isna().sum()","30c6c0dd":"print(df_avg['country'].unique())\nprint(df_avg['country'].nunique())","a3cc22a0":"unique_comp = []\nfor x in df_avg['competition']:\n    l = len(x)\n    unique_comp.append(x[2:l-6])\n    \ndf_avg['unique competition'] = unique_comp","c2c25278":"year = []\nfor x in df_avg['competition']:\n    #l = len(x)\n    year.append(x[-5:])\n\n#print(year)\ndf_avg['year'] = year","7249063e":"df_avg.head(10)","5d7a917d":"print(df_avg['year'].unique())\nprint(df_avg['year'].nunique())","7d0932e8":"print(df_avg['unique competition'].unique())\nprint(df_avg['unique competition'].nunique())","03220171":"print(df_avg['rank'].unique())\nprint(df_avg['rank'].nunique())","a0788980":"print(df_avg['time'].unique())\nprint(df_avg['time'].nunique())","3d97d33e":"points = []\nfor x in range(1000):\n    points.append(1)\n\ndf_avg['points'] = points","e3608c77":"df_avg.head()","209f6b93":"pointsA = []\n\nfor x in df_avg['country'].unique():\n    pointsA.append(df_avg['country'].tolist().count(x))\n#print(points)\nunique_countryA = [list(x) for x in zip(df_avg['country'].unique(), pointsA)]\n#print(unique_country)\ndf_avg_country = pd.DataFrame(unique_countryA, columns = ['Country', 'Points'])\ndf_avg_country","4cd9c1e7":"pointsB = []\n\nfor x in df_avg['unique competition'].unique():\n    pointsB.append(df_avg['unique competition'].tolist().count(x))\n#print(points)\nunique_competitionsB = [list(x) for x in zip(df_avg['unique competition'].unique(), pointsB)]\n#print(unique_country)\ndf_avg_competition = pd.DataFrame(unique_competitionsB, columns = ['Competition', 'Points'])\ndf_avg_competition","1a90164e":"pointsC = []\n\nfor x in df_avg['year'].unique():\n    pointsC.append(df_avg['year'].tolist().count(x))\n#print(points)\nyearC = [list(x) for x in zip(df_avg['year'].unique(), pointsC)]\n#print(unique_country)\ndf_avg_year = pd.DataFrame(yearC, columns = ['Year', 'Points'])\ndf_avg_year","a5fc0ee9":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(df_avg['rank'], df_avg['time'], color='orange')\nax.xaxis.set_major_locator(plt.MaxNLocator(50))\nax.set_xlabel('Rank', fontsize='15')\nax.set_ylabel('Time', fontsize='15')\nplt.title('Time Vs. Rank Graph', fontsize='20')\nplt.grid()\nplt.show()","161dd688":"df_avg_country.loc[df_avg_country['Points'] < 10, 'Country'] = 'Other countries' # Represent only large countries\nfig = px.pie(df_avg_country, values='Points', names='Country', title='Country Percentages')\nfig.show()","c7cd7d30":"fig = px.pie(df_avg_year, values='Points', names='Year', title='Yearly Percentages')\nfig.show()","862fef7b":"df_avg_country.sort_values(by=['Points'], ascending=False).head(5)","386defae":"df_avg_competition.sort_values(by=['Points'], ascending=False).head(26)","634ca346":"df_avg_year.sort_values(by=['Points'], ascending=False).head(5)","13ef3183":"df_comp = pd.read_csv('..\/input\/evolution-of-rubiks-cube-solve-times\/all_comp.csv')","64c417e2":"df_comp.head(10)","6f01937b":"df_comp = df_comp.drop(columns=['Unnamed: 0'])","38f77be3":"df_comp.head(10)","58a83074":"df_comp.tail()","4b0320d9":"df_comp.shape","45b59165":"points_final = []\nfor x in range(7094):\n    points_final.append(1)\ndf_comp['points'] = points_final","62e0e5b1":"df_comp.head(10)","23213d11":"comp_year = []\nfor x in df_comp['date']:\n    comp_year.append(x[-4:])\n\ndf_comp['year'] = comp_year\n#print(comp_year)","3d668507":"df_comp.head()","d5c20c95":"print(df_comp['year'].unique())\nprint(df_comp['year'].nunique())","40ce00be":"fig = px.pie(df_comp, values='points', names='year', title='Yearly Percentage of Competition')\nfig.show()","c789e161":"In the following steps, we will do the same operations as we did in the best singles.","43f4107a":"### Rank Vs. Time Graph\nWith this graph we will see how the the solving time changes with the increase of ranking. We have used the `df_sing` dataframe here.","5f665126":"Here, we see that there are similar competitions but with different years. So we add another field where there would be competitions without the year. We name this field as `unique competition`.","49250d96":"### Pie Chart to see the Yearly Percentages in the Leaderboard\n\nTo see year has the most ranks, we plot a pie chart using the `df_avg_year dataframe`.\n","85c2042a":"## Summary & Conclusion: All Competitions\nHere we see that the highest numbers of competitons were held in the year 2019 (18.7%) then comes 2018 (16.3%), 2017 (13%) and so on. 2021 places 12th with 1.69%. Its because of Covid-19 pandemic.","b9af355f":"# 2. Best Averages\nIn this part we will do the necessary analysis for the best averages.","584456c9":"We will see the unique countries in the dataset.","c5f77b48":"# 3. All Competitions\nHere we will do the necessary analysis for all the competition datasets.","312333e3":"### Pie Chart to see the Percentage of Countries in the Leaderboard\n\nTo see which countries are present in what percentage in the leaderboard, we plot a pie chart using the `df_avg_country` dataframe.\n","d6fc08c9":"## Data Preparation:\nWe will prepare our data for analysis and visualization in this section.","8978ba1e":"### Rank Vs. Time Graph\n\nWith this graph we will see how the the solving time changes with the increase of ranking. We have used the `df_avg` dataframe here.","9c071e1b":"Now, we will find the unique values of the following fields:\n- `year`\n- `unique competition`\n- `time`\n- `rank`","a452885d":"# 1. Best Singles\nIn this part we will do the necessary analysis for the best singles.","5ad88f4d":"The above steps are just as same as we did during preparing and cleaning the dataset for best singles.\n\nLet's do some visualization!","ca788590":"## Data Analysis & Visualization\nWe will do our required analysis and visualizations here.","43b3cdd6":"We dopped the `Unnamed: 0` column.","d48fe728":"In order to easily visualize the data from the dataset, we will create a field called `points`, where each value will be one. We will get the benifit of the column in the next cells.","029818f8":"Seems like no missing values!","e6d5e259":"### Pie Chart to see the Percentage of Countries in the Leaderboard\nTo see which countries are present in what percentage in the leaderboard, we plot a pie chart using the `df_sing_country` dataframe.","ccb3364b":"We see that there are also total 1000 values.","b3a40183":"### Top five: Country, Competition, Year\n\nWe will rank the country, competition and year from the three dataframes that we created.\n\n**NOTE:** We have not make visualizations of the `df_avg_competition` as that the point differences are quite less.\n","799eb321":"## Summary and Conclusion: Best Averages\nFrom the above analysis we can come to the following **key conclusions**:\n1. Solving time changes in the highest pace between Rank-1 to Rank-25 (5.5 seconds to <6.5 seconds). The graph is almost straight at that range.\n2. Thoughout the graph there's a rise like that of $\\sqrt{x}$.\n3. 23% percentages of the top 1000 cubers (avg.) are from USA, the comes China (12%) and after that comes Poland (4.1%).\n4. The golden year for the cubers for best averages was 2019 as it holds 41.7% of all the ranks. Then it comes 2021(18.6%), and 2020(14.8%)\n5. Top competitions in this part is held in mostly China (top), Korea and then USA (See the sorted values of `df_avg_competition`)","6b544141":"There are data of total 64 unique countries among the 1000 entries. One country less.","a308374a":"### Pie Chart to see the Yearly percentage of Competition\nWe see in this pie chart in which year how many competitions were held and its percentages.","b6a5aac2":"### Pie Chart to see the Yearly Percentages in the Leaderboard\nTo see year has the most ranks, we plot a pie chart using the `df_sing_year` dataframe.","6ecd9b7f":"Now our `df_sing` dataframe looks quite good. We will now create three seperate dataframes. These are:\n- `df_sing_country`\n- `df_sing_competition`\n- `df_sing_year`\n\nEach of the three dataframes has one particular field as common. This is `Points`. On the right hand field we put all the unique values and in the `Points` field, we add the corresponding point from the main dataframe.","c273310e":"No missing values!","994aa301":"## Data Analysis and Visualization\nThere's nothing much to do here for now. I'll make more analysis upon your feedback.","33114e29":"After adding both the fields, we get a new `df_sing` dataframe.","fb63bb49":"## Summary and Conclusion: Best Singles\nFrom the above analysis we can come to the following **key conclusions**:\n1. Solving time changes rapidly between Rank-1 to Rank-25 (3.5 seconds to <5 seconds). The graph is almost straight at that range.\n2. We see a rise like $\\sqrt{x}$ after Rank-25.\n3. 24.2% percentages of the top 1000 cubers are from USA, the comes China (11.5%) and after that comes Poland (4.8%).\n4. The golden year for the cubers were 2019 as it holds 41.4% of all the ranks. Then it comes 2018(19.3%), and 2021(11.1%).\n5. Although Republic of Korea holds the 6th position with 3.2% of the rankers, Korean Championship holds the 2nd position in among the competitions worldwide after CubingUSA Nationals.","521198d7":"We see that there are total 1000 values.","bbef8d97":"## Data Analysis & Visualization\n\nWe will do our required analysis and visualizations here.","f90c2a0c":"Moreover, we will also make a `year` field from the `competition` field to know that exact date of the competitions.","206b8efb":"## Data Preparation:\nWe will prepare our data for analysis and visualization in this section.","bdb6be53":"## Data Preparation & Cleaning\nHere we have cleaned our data and modified it for our use.","4160933d":"### Top five: Country, Competition, Year\nWe will rank the country, competition and year from the three dataframes that we created.\n\n**NOTE:** We have not make visualizations of the `df_sing_competition` as that the point differences are quite less.","71d61498":"# Introduction\nThe Rubik's Cube is a 3-D combination puzzle invented in 1974 by Hungarian sculptor and professor of architecture Ern\u0151 Rubik. Originally called the Magic Cube, the puzzle was licensed by Rubik to be sold by Ideal Toy Corp. in 1980 via businessman Tibor Laczi and Seven Towns founder Tom Kremer.\n\nI personally started solving Rubik's cube when I was a high school student. Solving a Rubik's cube has always been very satisfying. I also love to watch people solving Rubik's cube in certain competitions. The way the solve the cube within seconds is just amazing!\n\n<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/www.picgifs.com\/graphics\/r\/rubiks-cube\/animaatjes-rubiks-cube-7217468.gif\" alt=\"Heat beating\" style=\"height:300px;margin-top:3rem;\"> <\/div>","17cd9240":"There are data of total 65 unique countries among the 1000 entries.","a9e4c20e":"We think we are ready for our analysis and visualization!","16f2daea":"In this analysis, we will mainly do the analysis  for the **Best Singles** and the **Best Averages**. If needed, we will do the analysis of the **Competitions**.","2fac4de0":"Thank you so much everyone if you have read so far! For now it's  all I have analysed. I tried my best to keep the notebook as descriptive as possible. If a get any scope in the future, I will work on this for sure.\n\n<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com\/f\/98dc23a3-cbd4-4aee-b0b8-30bcb510541b\/d60l0qa-8b81ff18-30c3-47cd-b67c-9f9a2e011231.gif?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzk4ZGMyM2EzLWNiZDQtNGFlZS1iMGI4LTMwYmNiNTEwNTQxYlwvZDYwbDBxYS04YjgxZmYxOC0zMGMzLTQ3Y2QtYjY3Yy05ZjlhMmUwMTEyMzEuZ2lmIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.h5eUT6l0LMkVIM8iL_9LFqbwvkuQrtqHlKKlPRz84H4\" alt=\"Heat beating\" style=\"height:300px;margin-top:3rem;\"> <\/div>"}}