{"cell_type":{"faeb31d8":"code","71972b69":"code","d711e197":"code","d67f4399":"code","17d47e81":"code","5e4527d4":"code","92cd71a2":"code","eac29928":"code","a00c50e1":"code","efce62ce":"code","1a05ed1b":"code","10845156":"code","02d838cc":"code","3b3af47d":"code","f55b0118":"code","f25c604c":"code","6d6dfcd4":"code","f21d826e":"markdown"},"source":{"faeb31d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71972b69":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler","d711e197":"train_df = pd.read_csv(\"\/kaggle\/input\/dare-in-reality-hackathon-2021-machine-hack\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/dare-in-reality-hackathon-2021-machine-hack\/test.csv\")\ntrain_df_weather = pd.read_csv(\"\/kaggle\/input\/dare-in-reality-hackathon-2021-machine-hack\/train_weather.csv\")\ntest_df_weather = pd.read_csv(\"\/kaggle\/input\/dare-in-reality-hackathon-2021-machine-hack\/test_weather.csv\")\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/dare-in-reality-hackathon-2021-machine-hack\/submission.csv\")","d67f4399":"print('Size of Train Data : {} \\r\\nSize of Train Weather Data : {} '.format(train_df.shape,train_df_weather.shape))\nprint(\"--------------------------------------------------------------------------\")\nprint('Size of Test Data : {} \\r\\nSize of Test Weather Data : {} '.format(test_df.shape,test_df_weather.shape))","17d47e81":"train_df.columns = train_df.columns.str.replace(' ','')\ntrain_df_weather.columns = train_df_weather.columns.str.replace(' ','')\ntest_df.columns = test_df.columns.str.replace(' ','')\ntest_df_weather.columns = test_df_weather.columns.str.replace(' ','')","5e4527d4":"df_train = train_df\ndf_test = test_df","92cd71a2":"df_train.isnull().sum()","eac29928":"def time2seconds(time):\n  if type(time) != str:\n    return time\n  parts = [float(p) for p in time.split(':')]\n  parts = [p * (60 ** i) for i, p in enumerate(reversed(parts))]\n  return sum(parts)","a00c50e1":"time_cols = ['ELAPSED', 'S1', 'S2', 'S3', 'S1_LARGE', 'S2_LARGE', 'S3_LARGE', 'HOUR','PIT_TIME']\nfor col in time_cols:\n  df_train[col] = df_train[col].apply(time2seconds)\n  df_test[col] = df_test[col].apply(time2seconds)\n\ndf_train.drop(['CROSSING_FINISH_LINE_IN_PIT','GROUP'],axis=1,inplace=True)\ndf_test.drop(['CROSSING_FINISH_LINE_IN_PIT','GROUP','LAP_TIME'],axis=1,inplace=True)","efce62ce":"missing_val_cols = list()\ndef miss_val_col(all_cols):\n  missing_val = list()\n  for col in all_cols:\n    if df_train[col].isnull().sum() > 0:\n      missing_val.append(col)\n    else:\n      continue\n  if len(missing_val) == 0:\n    return f\"No missing values found\"\n  else:\n    for i in missing_val:\n      df_train[i] = df_train[i].fillna(method='bfill')\n      df_train[i] = df_train[i].fillna(method='ffill')\n    for i in missing_val:\n      df_test[i] = df_test[i].fillna(method='ffill')\n      df_test[i] = df_test[i].fillna(method='bfill')\n    return missing_val\nprint(miss_val_col(df_train.columns))\nprint(miss_val_col(df_test.columns))","1a05ed1b":"x = []\nfor i in df_test.select_dtypes(include='O').columns.values:\n  x.append(i)\nlbl_encoder = LabelEncoder()\nfor col in x:\n  df_train[col] = lbl_encoder.fit_transform(df_train[col])\n  df_test[col] = lbl_encoder.transform(df_test[col])","10845156":"target = df_train['LAP_TIME']\ndf_train.drop(['LAP_TIME'],axis=1,inplace=True)","02d838cc":"X_train, X_test, y_train, y_test = train_test_split(df_train,target,test_size=0.25)","3b3af47d":"minmax = MinMaxScaler()\nfor te_col in df_test.columns:\n  df_train[te_col] = minmax.fit_transform(df_train[[te_col]])\n  df_test[te_col] = minmax.transform(df_test[[te_col]])","f55b0118":"model = LinearRegression()\nmodel. fit(X_train,y_train)\npred = model.predict(X_test)","f25c604c":"np.sqrt(mean_squared_log_error(y_test, pred)) # with min max scalar","6d6dfcd4":"prediction = model.predict(df_test)\nprediction = pd.DataFrame(prediction, columns=['LAP_TIME'])\nprediction.to_csv('submission_file_scale.csv', index=False)","f21d826e":"**Run the Below Code two times.**"}}