{"cell_type":{"d7c1f0de":"code","41eacf39":"code","9b1eaa56":"code","034ed508":"code","9ebc2664":"code","f4ed4158":"code","821086b6":"code","49aca9ef":"code","73acf1c1":"code","419b88e7":"code","1a0c4b25":"code","6313e5c7":"code","cc1ad3a8":"code","311638e5":"code","56033ca4":"code","21c6b76c":"code","e73020c5":"code","a07bb7d0":"code","8ee646c1":"code","68c81a50":"code","596594b1":"code","f5063894":"code","e5e8683c":"code","7e3c857e":"code","40e36eeb":"code","0b9e9a92":"code","79c9aa3f":"code","e8e5b701":"code","269d714e":"code","effb79b8":"code","c12a79c8":"code","da5264be":"code","f0715b96":"code","fbadc95f":"code","04aca517":"code","04606c12":"code","9ae11a3b":"code","d8383057":"code","166b088a":"code","7230e574":"code","8e38399b":"code","ceab23f3":"code","243a5422":"code","c05e9088":"code","8d7182d7":"code","9df25614":"code","c2da0091":"code","a8a27100":"markdown","a2c4df71":"markdown","d86907d2":"markdown","691769c3":"markdown","1cd18b1e":"markdown","ef78a760":"markdown","0c4c7ca6":"markdown","065324b4":"markdown","36ad443d":"markdown","a73f2507":"markdown","fce482d2":"markdown","2bcc754c":"markdown","0d1a4d6d":"markdown","348f981c":"markdown","1512a92b":"markdown","c22473b8":"markdown","9411d093":"markdown","764ddae7":"markdown","eb412a4b":"markdown","f2852964":"markdown","734c864c":"markdown","5370f1d6":"markdown","1cbeaf1c":"markdown","e1d4abd1":"markdown","9d2e825a":"markdown","5252265e":"markdown","f4aa405c":"markdown","d1539107":"markdown","22506b6f":"markdown","49e73024":"markdown","0fddbb44":"markdown","53ffbca1":"markdown","13954214":"markdown","ca0280f2":"markdown","eed30d69":"markdown","85c6c6b9":"markdown","4148c017":"markdown","21aef7ef":"markdown","651a8bcc":"markdown","c9e94b01":"markdown","cf6ec08d":"markdown","2ec5bfa1":"markdown","a6e7cda6":"markdown","0dfbf5ad":"markdown","d5f7b5a3":"markdown","21672b1b":"markdown","af1dc3c5":"markdown","b09f2705":"markdown","cb34459f":"markdown","5dfba524":"markdown","6fae41da":"markdown","b2ca4697":"markdown","b4510e6b":"markdown","2896bcf1":"markdown","d80abab2":"markdown","9e98069b":"markdown","2be5cca6":"markdown","6b0768bd":"markdown"},"source":{"d7c1f0de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","41eacf39":"import math\nimport seaborn as sns\nimport plotly.express as px\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge","9b1eaa56":"#Reading the training file\ndf_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_train.describe()","034ed508":"df_train.head()","9ebc2664":"for i in df_train.columns:\n    print( i+\" \\t: \" +str(df_train[i].isnull().sum()))","f4ed4158":"max_replacements = ['MSZoning','Utilities','Exterior1st','Exterior2nd','KitchenQual',\n                    'Functional','Electrical','SaleType']\n\nzero_replacements = ['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF',\n                     'BsmtFullBath','BsmtHalfBath','GarageCars','GarageArea',\n                     'MasVnrArea']\n\nmedian_replacements=['LotFrontage']\n\nna_replacements = ['Alley','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n                   'BsmtFinType2','FireplaceQu','GarageType','GarageFinish',\n                   'GarageQual','GarageCond','PoolQC','Fence','MiscFeature',\n                   'MasVnrType']\n\nmean_replacements = ['GarageYrBlt']","821086b6":"for i in max_replacements:\n    value = df_train[i].value_counts().idxmax()\n    df_train[i] = df_train[i].fillna(value)\n    \nfor i in median_replacements:\n    value = df_train[i].median()\n    df_train[i] = df_train[i].fillna(value)\n    \nfor i in na_replacements:\n    value = 'NA'\n    df_train[i] = df_train[i].fillna(value)\n    \nfor i in mean_replacements:\n    value = df_train[i].mean()\n    df_train[i] = df_train[i].fillna(value)\n\nfor i in zero_replacements:\n    value = 0\n    df_train[i] = df_train[i].fillna(value)","49aca9ef":"print('Total no. of null values now are : '+ str(df_train[i].isnull().sum().sum()))","73acf1c1":"list_cat = ['MSSubClass','MSZoning','Street','Alley', 'LotShape', 'LandContour',\n            'Utilities', 'LotConfig','LandSlope', 'Neighborhood','Condition1', \n            'Condition2','BldgType','HouseStyle', 'OverallQual','OverallCond',\n            'RoofStyle', 'RoofMatl', 'Exterior1st','Exterior2nd', 'MasVnrType',\n            'ExterQual','ExterCond', 'Foundation', 'BsmtQual','BsmtCond',\n            'BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC', \n            'CentralAir', 'Electrical','BsmtFullBath','BsmtHalfBath','FullBath',\n            'HalfBath','BedroomAbvGr', 'KitchenAbvGr','KitchenQual',\n            'TotRmsAbvGrd','Functional','Fireplaces','FireplaceQu','GarageType',\n            'GarageFinish','GarageCars','GarageQual','GarageCond', 'PavedDrive',\n            'PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\n\nlist_cont = ['LotFrontage', 'LotArea', 'YearBuilt', 'YearRemodAdd','MasVnrArea',\n             'BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF',\n             '2ndFlrSF', 'LowQualFinSF', 'GrLivArea','GarageYrBlt','GarageArea',\n             'WoodDeckSF', 'OpenPorchSF','EnclosedPorch', '3SsnPorch', \n             'ScreenPorch', 'PoolArea','MiscVal', 'MoSold', 'YrSold',]\n\nprint('No. of columns with categorical data values are : '+str(len(list_cat)))\n\nprint('No. of columns with continuous data values are : '+str(len(list_cont)))","419b88e7":"df_train.head(10)","1a0c4b25":"column = 'Id'\nname = 'ID'\na= []\nfor i in df_train.index:\n    a.append(name +' : '+ str(df_train[column][i]))\ndf_train[column+'_visual'] = a","6313e5c7":"fig = px.box(data_frame = df_train.reset_index(),hover_name = 'Id_visual',\n             y = 'SalePrice',hover_data = ['MoSold', 'YrSold'],height = 500,\n             width = 400,labels = {'SalePrice':'Sale Price in \"$\"'},\n             title = 'Box plot of the sale price(Hover for details)')\nfig.show()","cc1ad3a8":"removed = 0\nthreshold = 450000\nfor i in df_train.index:\n    if df_train['SalePrice'][i]>threshold:\n        df_train = df_train.drop(i)\n        removed+=1\nprint('Total data points removed till now are: '+str(removed))","311638e5":"display_order = {}\nfor i in list_cat :\n    a = []\n    for j in df_train.groupby(i).mean().index:\n        a.append(j)\n    display_order[i] = a\ndisplay_order['Alley'] = ['Grvl','Pave','NA']\ndisplay_order['LandContour'] = ['Lvl','Bnk', 'HLS', 'Low']\ndisplay_order['LotConfig'] = ['Inside','Corner', 'CulDSac', 'FR2', 'FR3']\ndisplay_order['ExterQual'] = ['Ex', 'Gd', 'TA', 'Fa']\ndisplay_order['ExterCond'] = ['Ex','Gd', 'TA','Fa','Po']\ndisplay_order['BsmtQual'] = ['Ex', 'Gd', 'TA', 'Fa','NA']\ndisplay_order['BsmtCond'] = ['Gd', 'TA', 'Fa','Po','NA']\ndisplay_order['BsmtExposure'] = ['Gd','Av', 'Mn', 'No','NA']\ndisplay_order['BsmtFinType1'] = ['GLQ','ALQ', 'BLQ','Rec', 'LwQ', 'Unf','NA']\ndisplay_order['BsmtFinType2'] = ['GLQ','ALQ', 'BLQ','Rec', 'LwQ', 'Unf','NA']\ndisplay_order['HeatingQC'] = ['Ex','Gd', 'TA','Fa','Po']\ndisplay_order['Electrical'] = ['SBrkr','FuseA', 'FuseF', 'FuseP', 'Mix']\ndisplay_order['KitchenQual'] = ['Ex','Gd', 'TA','Fa']\ndisplay_order['Functional']=['Typ','Min1', 'Min2','Mod','Maj1', 'Maj2','Sev']\ndisplay_order['FireplaceQu'] = ['Ex','Gd', 'TA','Fa','Po','NA']\ndisplay_order['GarageQual'] =['Ex','Gd', 'TA','Fa','Po','NA']\ndisplay_order['GarageCond'] =['Ex','Gd', 'TA','Fa','Po','NA']\ndisplay_order['GarageFinish'] = ['Fin','RFn','Unf','NA']\ndisplay_order['PoolQC'] = ['Ex','Gd','Fa','NA']\ndisplay_order['Fence'] = ['GdPrv','MnPrv','GdWo', 'MnWw','NA']\ndisplay_order['SaleType'] = ['WD','CWD','New','COD','Con','ConLw','ConLI','ConLD','Oth']\ndisplay_order['SaleCondition'] = ['Normal','Abnorml','AdjLand','Alloca','Family',\n                                  'Partial']","56033ca4":"y = 'SalePrice'\nn = 3\ns= 20\nf,axes = plt.subplots(19,n,figsize = (s,6*s))\ncounter = 0\nfor i in list_cat:\n    sns.barplot(x = i , y = y , data  = df_train,order= display_order[i],\n                ax = axes[counter\/\/n][counter%n],saturation = 1)\n    counter+=1","21c6b76c":"z = 1.960 #using confidence level of 95% (for 99% use 3.291)\nx = 'Neighborhood'\ndf_temp = df_train.groupby(x).mean()\nconfidences = []\nsale_visual = []\ncount = []\nfor i in df_temp.index:\n    a = []\n    counter = 0\n    for j in df_train.index:\n        if df_train[x][j] == i:\n            a.append(df_train['SalePrice'][j]-df_temp['SalePrice'][i])\n            counter+=1\n    count.append(counter)\n    std = np.std(a)\n    confidence = std\/(math.sqrt(counter))\n    confidences.append((z*confidence)\/\/1)\n    sale_visual.append('Sale Price : ' + str(df_temp['SalePrice'][i]\/\/1))\ndf_temp ['Confidence'] = confidences\ndf_temp ['sale_visual'] = sale_visual\ndf_temp ['Total Count'] = count\ncount_per = []\nfor i in df_temp.index:\n    per = df_temp['Total Count'][i]\/np.sum(count)\n    per = (per*10000)\/\/1\n    per= per\/\/100\n    count_per.append(str(per)+'%')\ndf_temp['Count Percentage'] = count_per\n\nfig = px.bar(data_frame = df_temp.reset_index(),y='SalePrice', color = x ,\n             x = x,category_orders = display_order,error_y = 'Confidence',\n             hover_name = sale_visual,opacity= 1,\n             hover_data = ['Total Count','Count Percentage'],\n             labels = {y : 'Sale Price in \"$\"', 'Grvl':'Gravel','Pave':'Paved',\n                       'NA':'Not Paved'})\nfig.show()","e73020c5":"#List of features on which to apply one hot encoding before applying regression:\nlist_pure_categorical = ['MSSubClass','MSZoning','LotShape','LandContour', 'LotConfig',\n                         'Neighborhood','Condition1', 'Condition2', 'BldgType',\n                         'HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd',\n                         'Foundation','Heating','GarageType','SaleType',\n                         'SaleCondition','MiscFeature','MasVnrType']\n\n#List of categorical features that we can directly apply regression on:\ncategorical_ordered = ['Street','Alley','Utilities','LandSlope','OverallQual',\n                       'OverallCond','ExterQual', 'ExterCond','BsmtQual','BsmtCond',\n                       'BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC',\n                       'CentralAir','Electrical','KitchenQual','BsmtFullBath', \n                       'BsmtHalfBath', 'FullBath','HalfBath','BedroomAbvGr', \n                       'KitchenAbvGr','TotRmsAbvGrd','Functional','Fireplaces',\n                       'FireplaceQu','GarageFinish', 'GarageCars','GarageQual',\n                       'GarageCond', 'PavedDrive','PoolQC','Fence']\n\n#List of continuous variables:\nlist_continuous = ['LotFrontage', 'LotArea', 'YearBuilt', 'YearRemodAdd','MasVnrArea',\n                   'BsmtFinSF1','BsmtFinSF2','TotalBsmtSF','1stFlrSF','GarageYrBlt', \n                   'GarageArea','WoodDeckSF', 'OpenPorchSF','EnclosedPorch', \n                   '3SsnPorch', 'ScreenPorch', 'PoolArea','MiscVal','MoSold', 'YrSold',\n                   'LowQualFinSF', 'GrLivArea','2ndFlrSF']","a07bb7d0":"for i in categorical_ordered:\n    a = []\n    for j in df_train.index:\n        for k in range(len(display_order[i])):\n            if df_train[i][j] ==display_order[i][k]:\n                a.append(k+1)\n    df_train[i] = a\ndf_train","8ee646c1":"n = 3\ns= 20\nf,axes = plt.subplots(3*n-1,n,figsize = (s,3*s))\ncounter = 0\nfor i in list_cont:\n    sns.boxplot( y = i,data  = df_train, ax = axes[counter\/\/n][counter%n])\n    counter+=1","68c81a50":"outlier ={'LotFrontage':150, 'LotArea':100000,'MasVnrArea':900,'BsmtFinSF1':2000,\n          'TotalBsmtSF':2500,'1stFlrSF':2500, 'GarageArea':1130,'WoodDeckSF':600, \n          'OpenPorchSF':310,'EnclosedPorch':310,'3SsnPorch':350,'MiscVal':6000,\n          'GrLivArea':3500, 'BsmtFullBath':2.5,'2ndFlrSF':1750}\nfor j in outlier:\n    for i in df_train.index:\n        if df_train[j][i]>outlier[j]:\n            df_train = df_train.drop(i)\n            removed+=1\n    #print(j + ' : '+ str(removed))\nfor i in df_train.index:\n    if df_train['YearBuilt'][i]<1880:\n        df_train = df_train.drop(i)\n        removed+=1\n#print('YearBuilt' + ' : '+ str(removed))\nprint('Total data points removed till now are: '+str(removed))","596594b1":"y = 'SalePrice'\nn = 3\ns= 20\nf,axes = plt.subplots(8,n,figsize = (s,3*s),sharey=True)\ncounter = 0\nfor i in list_continuous:\n    sns.lineplot(x = i , y = y , data  = df_train, ax = axes[counter\/\/n][counter%n])\n    counter+=1","f5063894":"corr  = df_train[categorical_ordered+list_continuous + ['SalePrice']].corr()\nlabel = {'x':\"Column\", 'y': 'Row', 'color':'Correlation'}\ncolumns =categorical_ordered+list_continuous + ['SalePrice']\nfig = px.imshow(img = corr, x = columns,y = columns,labels = label,\n                color_continuous_scale = [[0,'white'],[0.33,'yellow'],\n                                          [0.66,'red'],[1.0,'black']],\n                height = 1100,width = 1100,color_continuous_midpoint = 0,\n                title = 'Correlation matrix for continuous and ordered categorical data fields.')\nfig.show()","e5e8683c":"columns = categorical_ordered+list_continuous + ['SalePrice']\nuseful = []\nfor i in columns:\n    if (corr[i]['SalePrice'])>=.15 or (corr[i]['SalePrice'])<=-.15:\n        useful.append(i)","7e3c857e":"useful_category = []\nfor j in list_pure_categorical:\n    for i in df_train.groupby(j).count().index:\n        s = j+str(i)\n        a=[]\n        for k in df_train.index:\n            if df_train[j][k]==i:\n                a.append(1)\n            else:\n                a.append(0)\n        df_train[s]=a\n        useful_category.append(s)\nlen (useful_category)","40e36eeb":"corr  = df_train[useful_category + ['SalePrice']].corr()\nlabel = {'x':\"Column\", 'y': 'Row', 'color':'Correlation'}\ncolumns =useful_category + ['SalePrice']\nfig = px.imshow(img = corr, x = columns,y = columns,labels = label,\n                color_continuous_scale = [[0,'white'],[0.42,'yellow'],\n                                          [0.58,'red'],[1.0,'black']],\n                height = 1100,width = 1100,color_continuous_midpoint = 0,\n                title = 'Correlation matrix for one hot encoded categorical data fields.')\nfig.show()","0b9e9a92":"columns = useful_category + ['SalePrice']\nfinal_useful = []\nfor i in columns:\n    if (corr[i]['SalePrice'])>=.15 or (corr[i]['SalePrice'])<=-.15:\n        final_useful.append(i)","79c9aa3f":"useful = useful+final_useful\nuseful","e8e5b701":"df_train_x = df_train[useful].drop(['SalePrice'],axis = 1)\ndf_train_x.describe()","269d714e":"df_train_y = df_train[['SalePrice']]\ndf_train_y.describe()","effb79b8":"x_train,x_test,y_train,y_test = train_test_split(df_train_x, df_train_y,test_size=0.15,\n                                                 random_state=42)","c12a79c8":"poly = PolynomialFeatures(degree=2)\npoly_x_train = poly.fit_transform(x_train)\npoly_x_test = poly.fit_transform(x_test)","da5264be":"models = ['Normal Linear Regression: ','Polynomial Linear Regression: ']\npredict = []\nreg = LinearRegression().fit(x_train, y_train)\npre_reg = reg.predict(x_test)\n\nreg_poly = LinearRegression().fit(poly_x_train, y_train)\npre_reg_poly = reg_poly.predict(poly_x_test)\n\npredict.append(pre_reg)\npredict.append(pre_reg_poly)\n\n\n\nfor prediction in range(len(predict)):\n    pre = []\n    for p in predict[prediction]:\n        if p < 0:\n            pre.append(0)\n        else:\n            pre.append(p)\n    print(models[prediction]+str(np.sqrt(mean_squared_log_error( y_test, pre ))))","f0715b96":"reg = LinearRegression().fit(df_train_x, df_train_y)","fbadc95f":"predicted_train = reg.predict(df_train_x)\ndf_train['SalePricePredicted'] = predicted_train","04aca517":"df_train['Residuals'] = (df_train['SalePrice'] - df_train['SalePricePredicted'])\/\/1\ndf_train['mod_Residuals'] = abs(df_train['Residuals'])","04606c12":"dic_residuals = {'SalePricePredicted':'Value predicted by the model',\n                 'Residuals':'Residual value','mod_Residuals':'Divergence'}\nfig = px.scatter(data_frame = df_train,x = 'SalePricePredicted',y = 'Residuals',\n                 hover_name ='Id_visual',hover_data = ['SalePrice'],opacity = 1,\n                 trendline = 'ols',trendline_color_override = 'darkred',\n                 range_y = [-150000,150000],color= 'mod_Residuals',\n                 marginal_y ='box',labels = dic_residuals,\n                 title = 'Residual value plot when using Linear Regression',\n                 color_continuous_midpoint = None)\nfig.show()","9ae11a3b":"df_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test.describe()","d8383057":"for i in df_test.columns:\n    print( i+\" \\t: \" +str(df_test[i].isnull().sum()))","166b088a":"for i in max_replacements:\n    value = df_test[i].value_counts().idxmax()\n    df_test[i] = df_test[i].fillna(value)\n    \nfor i in median_replacements:\n    value = df_test[i].median()\n    df_test[i] = df_test[i].fillna(value)\n    \nfor i in na_replacements:\n    value = 'NA'\n    df_test[i] = df_test[i].fillna(value)\n    \nfor i in mean_replacements:\n    value = df_test[i].mean()\n    df_test[i] = df_test[i].fillna(value)\n    \nfor i in zero_replacements:\n    value = 0\n    df_test[i] = df_test[i].fillna(value)","7230e574":"print('Total no. of null values now are : '+ str(df_test[i].isnull().sum().sum()))","8e38399b":"useful_category = []\nfor j in list_pure_categorical:\n    for i in df_train.groupby(j).count().index:\n        s = j+str(i)\n        a=[]\n        for k in df_test.index:\n            if df_test[j][k]==i:\n                a.append(1)\n            else:\n                a.append(0)\n        df_test[s]=a\n        useful_category.append(s)\nlen (useful_category)","ceab23f3":"encode_list = ['Street','Alley','Utilities','LandSlope','ExterQual','ExterCond',\n               'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n               'HeatingQC','CentralAir','Electrical','KitchenQual','Functional',\n               'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive',\n               'PoolQC','Fence']","243a5422":"for i in encode_list:\n    a = []\n    for j in df_test.index:\n        for k in range(len(display_order[i])):\n            if df_test[i][j] == display_order[i][k]:\n                a.append(k+1)\n    df_test[i] = a","c05e9088":"useful1 = []\nfor i in useful:\n    if i != 'SalePrice':\n        useful1.append(i)","8d7182d7":"pre = reg.predict(df_test[useful1])\ndf_test ['SalePrice'] = pre","9df25614":"df_test.describe()","c2da0091":"df_test[['Id','SalePrice']].to_csv('submission.csv',index=False)","a8a27100":"# Data Preprocessing:","a2c4df71":"Since the distribution of points is mainly randomly around the trendline, Therefore the Linear Regression machine learning model is appropriate on this data set.","d86907d2":"## 1. Training set","691769c3":"## Categorical data fields:","1cd18b1e":"### Checking for null values ","ef78a760":"## Separating categorical and continuous data fields","0c4c7ca6":"### Converting ordered categorical fields to numbers","065324b4":"## Plotting the residual plot for the model","36ad443d":"## Plotting a correlation matrix for all ordered categorical and continuous data fields vs Sale Price.","a73f2507":"As we can see that the MSE error in case of Normal Linear regression is significantly lower therefore we select this model.","fce482d2":"### Removing outliers from continuous data fields","2bcc754c":"# Prepaing training and testing sets","0d1a4d6d":"## Splitting data into train test sets","348f981c":"### One hot encoding of all purely categorical columns ","1512a92b":"### Converting ordered categorical fields to numbers","c22473b8":"### Removing of outliers in Sale Price","9411d093":"## Retraining the model over the whole dataset. ","764ddae7":"### Plotting the correlational matrix.","eb412a4b":"### Defining what to replace with.","f2852964":"### Applying the replacements. ","734c864c":"**If you like my notebook, please upvote my work!**\n\n**If you use parts of this notebook in your scripts\/notebooks, giving some kind of credit for instance link back to this notebook would be very much appreciated. Thanks in advance!** :) \n\n**P.S:**\n1. The scripts in lines 22 and 25 show errors when run on kaggle but will run perfectly fine after downloading and running the script on local machine.\n\n2. Please make sure that you have plotly installed on your local machine.\n\nLastly if anyone knows how to fix any of the above problems please let me know. Thankyou! :)\nHope you like my work!\n","5370f1d6":"## Plotting a correlational matrix for all purely categorical fields.","1cbeaf1c":"Here in order to make the machine learning model, I have taken the threshold to be 0.15. Thus we will take any columns that have a correlation of greater than 0.15 and discard the rest.","e1d4abd1":"As we can see all the ordered categorical data fields in the data set have been converted into numbers. ","9d2e825a":"### Box Plot of the sale price over the whole dataset.","5252265e":"### One hot encoding of all purely categorical data columns","f4aa405c":"Here in order to make the machine learning model, I have taken the threshold to be 0.15. Thus we will take any columns that have a correlation of greater than 0.15 and discard the rest.","d1539107":"### Removal of null values ","22506b6f":"# Predicting output over the testset.","49e73024":"# Importing important libraries","0fddbb44":"## Trying different models to see which one works best for the given data. ","53ffbca1":"## Checking and removal of null values","13954214":"# Loading the training dataset","ca0280f2":"## Continuous data fields","eed30d69":"### Box plot of all continuous data fields","85c6c6b9":"In order to view the detailed plot of any just replace x with the column of choice in the line 2 of box below.","4148c017":"list_pure_categorical: This is the list of data fields which do not have any linear pattern and thus we cannot apply regression on these varibles directly in any manner and therefore these variables will go under one hot encoding.\n\ncategorical_ordered: It is the list of categorical data fields which have some king of order to it and therefore we can directly apply regression on them by converting these into numbers and do not need to apply one hot encoding on these.\n\nlist_continuous: It is the list of continuous data fields in the dataset.(except SalePrice)","21aef7ef":"## Exporting output to csv","651a8bcc":"## Sale Price","c9e94b01":"As we can see from the box plot there are a lot of outliers so we set a threshold for the price. Here I have taken it to be $450000","cf6ec08d":"# Data Visualisation and removing of outliers: ","2ec5bfa1":"# Machine Learning model","a6e7cda6":"List_cate: It is the list of all the categorical data fields in the dataset.\n\nList_cont: It is the list of all the continuous data fields in the dataset.(except SalePrice)","0dfbf5ad":"As we can see there are a lot of null values so we need to replace these null values.","d5f7b5a3":"## Predicting over test set","21672b1b":"In this we have added an extra visual column for the box plot.","af1dc3c5":"### Verifying if all null values are removed. ","b09f2705":"## Using polynomial on the dataset","cb34459f":"## Line Plots for all continuous data fields ","5dfba524":"## Reading test file","6fae41da":"## 2. Testing set","b2ca4697":"Since non-numerical categorical data in a dataset will be displayed in an alphabetical order in the graphs, we need to provide a dictionay with orders in order to ovveride the default order.","b4510e6b":"### Bar Plot of all categorical data fields","2896bcf1":"Since we  do not want to remove too many data ponts, we will keep a track of how many data points have been removed up till any step.","d80abab2":"## Checking and removal for null values","9e98069b":"## Processing of test set","2be5cca6":"columns = categorical_ordered+list_continuous + ['SalePrice']\nfig = px.imshow(corr,x = columns,y = columns)\nfig.show()","6b0768bd":"Max: It is for all the categorical data where we are replacing the null with most common occuring data in that column.\n\nZero: We are replacing by zero because the value of all fields related to basement and garage have similar null counts which indicates that it is plausibe that in these houses there is no basement\/garage so we should replace it by zero.\n\nMedian: It is for all the rest of the fields where the data is numeric and has some sort of order to it but also is either categorical or has some outliers.(Although we could have used mean here, the mean is affected by alot by outliers (For decinding this, the box plots have been drawn later.))\n\nNA: It is for those data fields where NA is a separate category as mentioned in the data_description file and hence we have to consider it as an individual field.\n\nMean: It is for numeric fields that do not have many outliers. \n\nP.S: We have only defined replacements for the fields with missing values in either test or train sets."}}