{"cell_type":{"780223fa":"code","e4a1fdbf":"code","c662fa9f":"code","ad9c461d":"code","84f1cde8":"code","9ffe8b73":"code","e864f624":"code","91d0617a":"code","05773452":"code","a7fd2b23":"code","587b8006":"code","9c5637d1":"code","61d0bc8a":"code","7b7db14a":"code","013d0d1a":"code","c04ac8e3":"code","a43ee6f8":"code","35eb8773":"code","0c8ab131":"code","6bb9e0f6":"code","9e03bf46":"code","ea33e8e4":"code","37fe06d8":"code","b4a0d5db":"code","17444bdb":"code","22d80f2b":"code","8f8c5ae6":"code","d51e7838":"code","e452be72":"code","fe99cd89":"code","ddf5361b":"code","8ea62796":"code","3db037b7":"code","6898fab8":"code","971d6a99":"code","ab676a73":"code","67684ec4":"markdown","5f7219b7":"markdown","32729dbd":"markdown","3c0fb916":"markdown","caa8b9fc":"markdown","7bf0f0db":"markdown","c90c9eee":"markdown","782a120f":"markdown","9ea5a33b":"markdown","757aae79":"markdown","3c40a84a":"markdown","6993e509":"markdown","76c8511a":"markdown","424815a4":"markdown","c02e3f83":"markdown","69033f06":"markdown","32080149":"markdown","3593e92c":"markdown","6c53b02d":"markdown","f0e4831e":"markdown","d16c3883":"markdown","e813c4ea":"markdown","21970e6a":"markdown","2ada5def":"markdown","6c4bed07":"markdown","1de71d49":"markdown","7ce41880":"markdown","55ed7a59":"markdown"},"source":{"780223fa":"%matplotlib inline\n# Import dependencies\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.figure_factory as ff\nfrom plotly import subplots\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nfrom datetime import date\nfrom fbprophet import Prophet\nimport math\nimport pandas_profiling","e4a1fdbf":"# Import dataset\ncovid = pd.read_csv(\"..\/input\/updates2\/time-series-19-covid-combined.csv\")\ncovid.columns = ['DATE', 'COUNTRY', 'STATE','LAT','LONG','CONFIRMED', 'RECOVERED', 'DEATH',]","c662fa9f":"pandas_profiling.ProfileReport(covid)","ad9c461d":"# Produce quick summary with total numbers\nsummary_all = covid.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\nsummary = summary_all.sort_values('DATE', ascending=False)\nct_sum = covid['COUNTRY'].unique().tolist()\nprint(\"As of now there is\" +\" \" + str(len(ct_sum)) +\" \" + \"countries to which virus has spread.\")\nsummary.head(1).style.background_gradient(cmap='OrRd')\n","84f1cde8":"# Spread, death and recovered over the time outside of MainLand China\n#covid_all =  covid[(covid['COUNTRY'] == 'Mainland China')]\n#covid_all = covid_all.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\ncovid_all = summary_all[summary_all['DATE'] > '2020-01-22']\n\nfig = make_subplots(rows=1, cols=3, subplot_titles=(f\"{int(covid_all.CONFIRMED.max()):,d}\" +' ' + \"CONFIRMED\",\n                                                    f\"{int(covid_all.DEATH.max()):,d}\" +' ' + \"DEATHS\",\n                                                    f\"{int(covid_all.RECOVERED.max()):,d}\" +' ' + \"RECOVERED\"))\n\ntrace1 = go.Scatter(\n                x=covid_all['DATE'],\n                y=covid_all['CONFIRMED'],\n                name=\"CONFIRMED\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=covid_all['DATE'],\n                y=covid_all['DEATH'],\n                name=\"DEATH\",\n                line_color='dimgray',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=covid_all['DATE'],\n                y=covid_all['RECOVERED'],\n                name=\"RECOVERED\",\n                line_color='deepskyblue',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\",title_text = '<b>Spread Vs. Death Vs Recovered around the world <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=False)\nfig.show()","9ffe8b73":"# Bar plot for spread, death and recovered over the time around the world\ncovid_all = covid.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\ncovid_all= covid_all[covid_all['DATE'] > '2020-01-22']\n\n# Plotting Values for Confirmed, deaths and reocvered cases\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"colspan\": 2}, None],[{}, {}]],\n    subplot_titles=(f\"{int(covid_all.CONFIRMED.max()):,d}\" +' ' + \"CONFIRMED\",\n                    f\"{int(covid_all.RECOVERED.max()):,d}\" +' ' +\"RECOVERED\",\n                    f\"{int(covid_all.DEATH.max()):,d}\" +' ' +\"DEATHS\"))\n\nfig.add_trace(go.Bar(x=covid_all['DATE'], y=covid_all['CONFIRMED'], text = covid_all['CONFIRMED'],\n                     marker_color='Orange'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=covid_all['DATE'], y=covid_all['RECOVERED'], marker_color='Green'), row=2, col=1)\n\nfig.add_trace(go.Bar(x=covid_all['DATE'], y=covid_all['DEATH'], marker_color='Red'), row=2, col=2)\n\nfig.update_traces(marker_line_color='rgb(8,48,107)',marker_line_width=1.5, opacity=0.8,\n                  texttemplate='%{text:.2s}', textposition='outside')\n\nfig['layout']['yaxis1'].update(title='Count', range=[0, covid_all['CONFIRMED'].max() + 15000])\nfig['layout']['yaxis2'].update(title='Count', range=[0, covid_all['RECOVERED'].max() + 10000])\nfig['layout']['yaxis3'].update(title='Count', range=[0, covid_all['DEATH'].max() + 1000])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n\nfig.update_layout(template=\"ggplot2\",title_text = '<b>CurrentConfirmed Vs. Death Vs Recovered Around The World <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=False)\nfig.show()","e864f624":"# Isolating the max values based on last date for china\nooc_df = covid[covid['DATE'] == covid['DATE'].max()]\nooc_df = ooc_df.groupby('COUNTRY')['CONFIRMED','DEATH','RECOVERED'].sum().reset_index()\n\n# breakdown by state with heat map\nimport plotly.express as px\nooc_pl = ooc_df.sort_values(by='CONFIRMED', ascending=True).reset_index(drop=True)\nfig = px.bar(ooc_pl, x='COUNTRY', y='CONFIRMED',\n             hover_data=['COUNTRY', 'CONFIRMED'], color='CONFIRMED',text = ooc_pl.CONFIRMED,\n             labels={'pop':'Confirmed Cases in US'}, height=600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='hide')\nfig.show()","91d0617a":"# Producing daily data difference for Confirmed, Death, Recovered\nsum_d = covid.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\nsum_d = sum_d.sort_values('DATE', ascending=True)\nsum_d = pd.DataFrame(sum_d.set_index('DATE').diff()).reset_index()\nsum_d = sum_d[sum_d['DATE'] > '2020-01-22']\nsum_d.head()","05773452":"# Describing daily data set\nsum_d.describe()","a7fd2b23":"# Ploting daily updtes for \nfig_d = go.Figure()\nfig_d.add_trace(go.Scatter(x=sum_d.DATE, y=sum_d.CONFIRMED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_d.CONFIRMED.max()):,d}\" + ' ' + \"CONFIRMED\",line_color='Orange'))\nfig_d.add_trace(go.Scatter(x=sum_d.DATE, y=sum_d.RECOVERED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_d.RECOVERED.max()):,d}\" + ' ' + \"RECOVERED\",line_color='deepskyblue'))\nfig_d.add_trace(go.Scatter(x=sum_d.DATE, y=sum_d.DEATH, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_d.DEATH.max()):,d}\" + ' ' + \"DEATHS\",line_color='dimgray'))\nfig_d.update_layout(template=\"ggplot2\",title_text = '<b>Daily numbers for Confirmed, Death and Recovered <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=True)\nfig_d.update_layout(\n    legend=dict(\n        x=0.01,\n        y=.98,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"dimgray\",\n        borderwidth=2\n    ))\nfig_d.show()","587b8006":"# Death rate analysis on global level\nD_vs_R = covid.copy()\nD_vs_R['REC'] = 'REC'\nD_vs_R['DTH'] = 'DTH'\nrecovered = pd.pivot_table(D_vs_R.dropna(subset=['RECOVERED']), index='DATE', \n                         columns='REC', values='RECOVERED', aggfunc=np.sum).fillna(method='ffill').reset_index()\n\ndeath = pd.pivot_table(D_vs_R.dropna(subset=['DEATH']), index='DATE', \n                         columns='DTH', values='DEATH', aggfunc=np.sum).fillna(method='ffill').reset_index()\n\nD_vs_R_df = pd.merge(recovered,death,on='DATE')\nD_vs_R_df['RATIO'] = round(D_vs_R_df['DTH'] \/ (D_vs_R_df['DTH'] + D_vs_R_df['REC'])*100)\n\n# ploting Current Deat Rate around the world\ncur_ratio = D_vs_R_df[D_vs_R_df['DATE'] == D_vs_R_df['DATE'].max()]\nfig_dr = go.Figure()\nfig_dr.add_trace(go.Scatter(x=D_vs_R_df.DATE, y=D_vs_R_df.RATIO, mode=\"lines+markers\", line_color='Red', name = 'Current Death Rate' + ' ' + f\"{int(cur_ratio['RATIO']):,d}%\"))\nfig_dr.update_layout(template=\"ggplot2\",title_text = '<b>Death Rate % Around The World <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\", color='black'), showlegend=True) \nfig_dr.update_layout(\n    legend=dict(\n        x=.65,\n        y=0.95,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Red\",\n        borderwidth=2\n    ))\nfig_dr.show()\n\n","9c5637d1":"#Runing fbprophet algorythm on confirmed cases outside of MainLand China. Forecasting 7 days.\ncovid_nc =  covid.copy()\nall_df = covid.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\nall_df = all_df[all_df['DATE'] > '2020-01-22']\n\ndf_prophet = all_df.loc[:,[\"DATE\", 'CONFIRMED']]\ndf_prophet.columns = ['ds','y']\nm_d = Prophet(\n    yearly_seasonality= True,\n    weekly_seasonality = True,\n    daily_seasonality = True,\n    seasonality_mode = 'additive')\nm_d.fit(df_prophet)\nfuture_d = m_d.make_future_dataframe(periods=14)\nfcst_daily = m_d.predict(future_d)\nfcst_daily[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","61d0bc8a":"# Plotting the predictions\nfig_prpht = go.Figure()\ntrace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\",\n  \"marker_size\": 10,\n  \"name\": \"Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": df_prophet.ds, \n  \"y\": df_prophet.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"red\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"dimgray\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"blue\"}, \n  \"mode\": \"lines+markers\",\n  \"marker_size\": 4,\n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed Cases Time Series\", \n  \"xaxis\": {\n      \"title\": \"Dates\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 4, \n    \"zerolinewidth\": 2\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed Cases\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig_prpht = go.Figure(data=data, layout=layout)\nfig_prpht.update_layout(template=\"ggplot2\",title_text = '<b>Forecastng of spread around the world <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=True)\nfig_prpht.update_layout(\n    legend=dict(\n        x=0.01,\n        y=.99,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Orange\",\n        borderwidth=2\n    ))\nfig_prpht.show()","7b7db14a":"# Ploting cases on world map\nimport folium\n#covid_geo = covid.dropna()\nworld_curr = covid[covid['DATE'] == covid['DATE'].max()]\nmap = folium.Map(location=[30, 30], tiles = \"CartoDB dark_matter\", zoom_start=2.2)\nfor i in range(0,len(world_curr)):\n    folium.Circle(location=[world_curr.iloc[i]['LAT'],\n                            world_curr.iloc[i]['LONG']],\n                            radius=(math.sqrt(world_curr.iloc[i]['CONFIRMED'])*4000 ),\n                            color='crimson',\n                            fill=True,\n                            fill_color='crimson').add_to(map)\nmap","013d0d1a":"# Produce quick summary for China with total numbers\ncovid_ch =  covid[(covid['COUNTRY'] == 'China')]\nch_df = covid_ch.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\n\nsummary_ch = ch_df.sort_values('DATE', ascending=False)\nsummary_ch.head(1).style.background_gradient(cmap='OrRd')","c04ac8e3":"# Spread, death and recovered over the time outside of MainLand China\n\nch_df = ch_df[ch_df['DATE'] > '2020-01-22']\n\nfig = make_subplots(rows=1, cols=3, subplot_titles=(f\"{int(ch_df.CONFIRMED.max()):,d}\" +' ' + \"CONFIRMED\",\n                                                    f\"{int(ch_df.DEATH.max()):,d}\" +' ' + \"DEATHS\",\n                                                    f\"{int(ch_df.RECOVERED.max()):,d}\" +' ' + \"RECOVERED\"))\n\ntrace1 = go.Scatter(\n                x=ch_df['DATE'],\n                y=ch_df['CONFIRMED'],\n                name=\"CONFIRMED\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=ch_df['DATE'],\n                y=ch_df['DEATH'],\n                name=\"DEATH\",\n                line_color='dimgray',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=ch_df['DATE'],\n                y=ch_df['RECOVERED'],\n                name=\"RECOVERED\",\n                line_color='deepskyblue',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\",title_text = '<b>Spread Vs. Death Vs Recovered within Mainland China <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=False)\nfig.show()","a43ee6f8":"# Producing daily data difference for Confirmed, Death, Recovered\nsum_cd = covid[(covid['COUNTRY'] == 'China')]\nsum_cd = sum_cd.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\nsum_cd = sum_cd.sort_values('DATE', ascending=True)\nsum_cd = pd.DataFrame(sum_cd.set_index('DATE').diff()).reset_index()\n#sum_d = pd.DataFrame(round(sum_d.set_index('DATE').pct_change()*100)).reset_index()\nsum_cd = sum_cd[sum_cd['DATE'] > '2020-01-22']\nsum_cd.tail()","35eb8773":"# Ploting daily updtes for \nfig_d = go.Figure()\nfig_d.add_trace(go.Scatter(x=sum_cd.DATE, y=sum_cd.CONFIRMED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_cd.CONFIRMED.max()):,d}\" + ' ' + \"CONFIRMED\",line_color='Orange'))\nfig_d.add_trace(go.Scatter(x=sum_cd.DATE, y=sum_cd.RECOVERED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_cd.RECOVERED.max()):,d}\" + ' ' + \"RECOVERED\",line_color='deepskyblue'))\nfig_d.add_trace(go.Scatter(x=sum_cd.DATE, y=sum_cd.DEATH, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_cd.DEATH.max()):,d}\" + ' ' + \"DEATHS\",line_color='dimgray'))\nfig_d.update_layout(template=\"ggplot2\",title_text = '<b>Daily numbers for Confirmed, Death and Recovered <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=True)\nfig_d.update_layout(\n    legend=dict(\n        x=0.01,\n        y=.98,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"dimgray\",\n        borderwidth=2\n    ))\nfig_d.show()","0c8ab131":"# Death rate analysis on global level\nchina_drr = covid[(covid['COUNTRY'] == 'China')]\nchina_drr['REC'] = 'REC'\nchina_drr['DTH'] = 'DTH'\nch_recovered = pd.pivot_table(china_drr.dropna(subset=['RECOVERED']), index='DATE', \n                         columns='REC', values='RECOVERED', aggfunc=np.sum).fillna(method='ffill').reset_index()\n\nch_death = pd.pivot_table(china_drr.dropna(subset=['DEATH']), index='DATE', \n                         columns='DTH', values='DEATH', aggfunc=np.sum).fillna(method='ffill').reset_index()\nchina_drr_df = pd.merge(ch_recovered,ch_death,on='DATE')\nchina_drr_df['RATIO'] = round(china_drr_df['DTH'] \/ (china_drr_df['DTH'] + china_drr_df['REC'])*100)\nchina_drr_df.head()\n\ncur_ch_ratio = china_drr_df[china_drr_df['DATE'] == china_drr_df['DATE'].max()]\n# ploting Current Deat Rate around the world\nfig_dr = go.Figure()\nfig_dr.add_trace(go.Scatter(x=china_drr_df.DATE, y=china_drr_df.RATIO, mode=\"lines+markers\", line_color='Red', name = 'Current Death Rate' + ' ' + f\"{int(cur_ch_ratio['RATIO']):,d}%\"))\nfig_dr.update_layout(template=\"ggplot2\",title_text = '<b>Death Rate % In Mainland China <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\", color='black'), showlegend=True) \nfig_dr.update_layout(\n    legend=dict(\n        x=.65,\n        y=0.95,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Red\",\n        borderwidth=2\n    ))\nfig_dr.show()","6bb9e0f6":"# Isolating the max values based on last date for china\nchina_cur  = covid[(covid['COUNTRY'] == 'China')]\nchina_cur_st = china_cur[china_cur['DATE'] == china_cur['DATE'].max()]\nchina_cur_st = china_cur_st.groupby('STATE')['CONFIRMED','DEATH','RECOVERED'].sum().reset_index()\nchina_cur_st.head()\n\n# Ploting distribution between provinces in China\nfig = px.treemap(china_cur_st.sort_values(by='CONFIRMED', ascending=False).reset_index(drop=True), \n                 path=[\"STATE\"], values=\"CONFIRMED\", \n                 title='Number of Confirmed Cases in US Cities',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.update_layout(template=\"ggplot2\",title_text = '<b>Current confirmed cases within China`s Provincies <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=True)\nfig.show()\n","9e03bf46":"# Ploting Cases in China\nmap = folium.Map(location=[30, 100], tiles = \"CartoDB dark_matter\", zoom_start=3.5)\nfor i in range(0,len(china_drr)):\n    folium.Circle(location=[china_drr.iloc[i]['LAT'],\n                            china_drr.iloc[i]['LONG']],\n                            radius=(math.sqrt(china_drr.iloc[i]['CONFIRMED'])*1000),\n                           color='crimson',\n                            fill=True,\n                            fill_color='crimson').add_to(map)\nmap","ea33e8e4":"# Breaking up by state\nus_cur = covid[(covid['COUNTRY'] == 'US')]\nus_cur_st = us_cur[us_cur['DATE'] == us_cur['DATE'].max()]\n\n# Produce quick summary for China with total numbers\ncovid_us =  covid[(covid['COUNTRY'] == 'US')]\ncovid_us = covid_us.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\n\ncovid_us = covid_us.sort_values('DATE', ascending=False)\ncovid_us.head(1).style.background_gradient(cmap='OrRd')","37fe06d8":"# Spread, death and recovered over the time for US\nus_cur = us_cur.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\n\nfig = make_subplots(rows=1, cols=3, subplot_titles=(f\"{int(us_cur.CONFIRMED.max()):,d}\" +' ' + \"CONFIRMED\",\n                                                    f\"{int(us_cur.DEATH.max()):,d}\" +' ' + \"DEATHS\",\n                                                    f\"{int(us_cur.RECOVERED.max()):,d}\" +' ' + \"RECOVERED\"))\n\ntrace1 = go.Scatter(\n                x=us_cur['DATE'],\n                y=us_cur['CONFIRMED'],\n                name=\"CONFIRMED\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=us_cur['DATE'],\n                y=us_cur['DEATH'],\n                name=\"DEATH\",\n                line_color='dimgray',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=us_cur['DATE'],\n                y=us_cur['RECOVERED'],\n                name=\"RECOVERED\",\n                line_color='deepskyblue',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\",title_text = '<b>Spread Vs. Death Vs Recovered in US <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=False)\nfig.show()","b4a0d5db":"# Producing daily data difference for Confirmed, Death, Recovered\n\nsum_us = covid_us.sort_values('DATE', ascending=True)\nsum_us = pd.DataFrame(sum_us.set_index('DATE').diff()).reset_index()\n#sum_d = pd.DataFrame(round(sum_d.set_index('DATE').pct_change()*100)).reset_index()\nsum_us = sum_us[sum_us['DATE'] > '2020-01-22']\nsum_us.head()","17444bdb":"# Ploting daily updtes for \nfig_d = go.Figure()\nfig_d.add_trace(go.Scatter(x=sum_us.DATE, y=sum_us.CONFIRMED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_us.CONFIRMED.max()):,d}\" + ' ' + \"CONFIRMED\",line_color='Orange'))\nfig_d.add_trace(go.Scatter(x=sum_us.DATE, y=sum_us.RECOVERED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_us.RECOVERED.max()):,d}\" + ' ' + \"RECOVERED\",line_color='deepskyblue'))\nfig_d.add_trace(go.Scatter(x=sum_us.DATE, y=sum_us.DEATH, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_us.DEATH.max()):,d}\" + ' ' + \"DEATHS\",line_color='dimgray'))\nfig_d.update_layout(template=\"ggplot2\",title_text = '<b>Daily numbers for Confirmed, Death and Recovered in US <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=True)\nfig_d.update_layout(\n    legend=dict(\n        x=0.01,\n        y=.98,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"dimgray\",\n        borderwidth=2\n    ))\nfig_d.show()","22d80f2b":"# Death rate analysis on global level\nus_drr = covid[(covid['COUNTRY'] == 'US')]\nus_drr['REC'] = 'REC'\nus_drr['DTH'] = 'DTH'\nus_recovered = pd.pivot_table(us_drr.dropna(subset=['RECOVERED']), index='DATE', \n                         columns='REC', values='RECOVERED', aggfunc=np.sum).fillna(method='ffill').reset_index()\n\nus_death = pd.pivot_table(us_drr.dropna(subset=['DEATH']), index='DATE', \n                         columns='DTH', values='DEATH', aggfunc=np.sum).fillna(method='ffill').reset_index()\nus_drr_df = pd.merge(us_recovered,us_death,on='DATE')\nus_drr_df['RATIO'] = round(us_drr_df['DTH'] \/ (us_drr_df['DTH'] + us_drr_df['REC'])*100)\n\nus_ratio = us_drr_df[us_drr_df['DATE'] == us_drr_df['DATE'].max()]\n# ploting Current Deat Rate around the world\nfig_us = go.Figure()\nfig_us.add_trace(go.Scatter(x=us_drr_df.DATE, y=us_drr_df.RATIO, mode=\"lines+markers\", line_color='Red', name = 'Current Death Rate' + ' ' + f\"{int(us_ratio['RATIO']):,d}%\"))\nfig_us.update_layout(template=\"ggplot2\",title_text = '<b>Death Rate % in US<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\", color='black'), showlegend=True) \nfig_us.update_layout(\n    legend=dict(\n        x=.02,\n        y=0.95,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Red\",\n        borderwidth=2\n    ))\nfig_us.show()","8f8c5ae6":"# Plotting US data on map\n\nmap = folium.Map(location=[35, -100], tiles = \"CartoDB dark_matter\", zoom_start=4.4)\nfor i in range(0,len(us_drr)):\n    folium.Circle(location=[us_drr.iloc[i]['LAT'],\n                            us_drr.iloc[i]['LONG']],\n                            radius=(math.sqrt(us_drr.iloc[i]['CONFIRMED'])*200),\n                            color='crimson',\n                            fill=True,\n                            fill_color='crimson').add_to(map)\nfolium.LayerControl().add_to(map)\nmap","d51e7838":"us_drr","e452be72":"# Analyzing US\n# Breaking up by state\n\n#us_cur = covid[(covid['COUNTRY'] == 'US')]\n#us_cur_st = us_cur[us_cur['DATE'] == us_cur['DATE'].max()]\n#us_cur_st['STATE_'] = us_cur_st['STATE'].str.rsplit(',').str[-1] \n#us_cur_st = us_cur_st.groupby('STATE_')['CONFIRMED','DEATH','RECOVERED'].sum().reset_index()\n\n\n#us_cur_st = us_cur_st.sort_values(by='CONFIRMED', ascending=False).reset_index(drop=True)\n#fig = px.bar(us_cur_st, x='STATE_', y='CONFIRMED',\n#             hover_data=['STATE_', 'CONFIRMED'], color='CONFIRMED',text = us_cur_st.CONFIRMED,\n#             labels={'pop':'Confirmed Cases in US'}, height=600)\n#fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n#fig.update_layout(uniformtext_minsize=5, uniformtext_mode='hide')\n#fig.show()","fe99cd89":"#Runing fbprophet algorythm on confirmed cases outside of MainLand China. Forecasting 7 days.\n# Analyzing US\n# Breaking up by state\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nfrom fbprophet.plot import plot_plotly\n\n# restrict to one country\ndf_us = covid[covid['COUNTRY']=='US']\ntotal_us = df_us.groupby(['DATE']).sum().loc[:,['CONFIRMED','DEATH','RECOVERED']].reset_index()\n#total_us = total_us[total_us['DATE'] > '2020-03-8']\n\nus_prophet= total_us.rename(columns={'DATE': 'ds', 'CONFIRMED': 'y'})\n# Make a future dataframe for X days\nm_us = Prophet(\n    changepoint_prior_scale=20,\n    seasonality_prior_scale=20,\n    n_changepoints=19,\n    changepoint_range=0.9,\n    yearly_seasonality=False,\n    weekly_seasonality = False,\n    daily_seasonality = True,\n    seasonality_mode = 'additive')\n# Add seasonlity\n#m_us.add_seasonality(name='yearly', period=365, fourier_order=5)\nm_us.fit(us_prophet)\n\n# Make predictions\nfuture_us = m_us.make_future_dataframe(periods=7)\n\nforecast_us = m_us.predict(future_us)","ddf5361b":"trace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\", \n  \"name\": \"actual no. of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": us_prophet.ds, \n  \"y\": us_prophet.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": forecast_us.ds, \n  \"y\": forecast_us.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": forecast_us.ds, \n  \"y\": forecast_us.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\", \n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": forecast_us.ds, \n  \"y\": forecast_us.yhat\n}\n\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed - Time Series Forecast - Daily Trend\", \n  \"xaxis\": {\n    \"title\": \"\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed nCov - US\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8ea62796":"# Runing data for summary on Italy as of now\nitaly_cur = covid[(covid['COUNTRY'] == 'Italy')]\nitaly_cur = italy_cur.groupby('DATE')['CONFIRMED', 'DEATH', 'RECOVERED'].sum().reset_index()\nsummary_it = italy_cur.sort_values('DATE', ascending=False)\nsummary_it.head(1).style.background_gradient(cmap='OrRd')","3db037b7":"# Spread, death and recovered over the time for Italy\nfig = make_subplots(rows=1, cols=3, subplot_titles=(f\"{int(italy_cur.CONFIRMED.max()):,d}\" +' ' + \"CONFIRMED\",\n                                                    f\"{int(italy_cur.DEATH.max()):,d}\" +' ' + \"DEATHS\",\n                                                    f\"{int(italy_cur.RECOVERED.max()):,d}\" +' ' + \"RECOVERED\"))\n\ntrace1 = go.Scatter(\n                x=italy_cur['DATE'],\n                y=italy_cur['CONFIRMED'],\n                name=\"CONFIRMED\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=italy_cur['DATE'],\n                y=italy_cur['DEATH'],\n                name=\"DEATH\",\n                line_color='dimgray',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=italy_cur['DATE'],\n                y=italy_cur['RECOVERED'],\n                name=\"RECOVERED\",\n                line_color='deepskyblue',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\",title_text = '<b>Spread Vs. Death Vs Recovered in Italy <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=False)\nfig.show()","6898fab8":"# Producing daily data difference for Confirmed, Death, Recovered\n\nsum_it = italy_cur.sort_values('DATE', ascending=True)\nsum_it = pd.DataFrame(sum_it.set_index('DATE').diff()).reset_index()\nsum_it = sum_it[sum_it['DATE'] > '2020-01-22']\nsum_it.head()","971d6a99":"# Ploting daily updtes for \nfig_it = go.Figure()\nfig_it.add_trace(go.Scatter(x=sum_it.DATE, y=sum_it.CONFIRMED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_it.CONFIRMED.max()):,d}\" + ' ' + \"CONFIRMED\",line_color='Orange'))\nfig_it.add_trace(go.Scatter(x=sum_it.DATE, y=sum_it.RECOVERED, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_it.RECOVERED.max()):,d}\" + ' ' + \"RECOVERED\",line_color='deepskyblue'))\nfig_it.add_trace(go.Scatter(x=sum_it.DATE, y=sum_it.DEATH, mode=\"lines+markers\", name=f\"MAX. OF {int(sum_it.DEATH.max()):,d}\" + ' ' + \"DEATHS\",line_color='dimgray'))\nfig_it.update_layout(template=\"ggplot2\",title_text = '<b>Daily numbers for Confirmed, Death and Recovered In Itally <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'), showlegend=True)\nfig_it.update_layout(\n    legend=dict(\n        x=0.01,\n        y=.98,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"dimgray\",\n        borderwidth=2\n    ))\nfig_it.show()","ab676a73":"# Death rate analysis on global level\nit_drr = covid[(covid['COUNTRY'] == 'Italy')]\nit_drr['REC'] = 'REC'\nit_drr['DTH'] = 'DTH'\nit_recovered = pd.pivot_table(it_drr.dropna(subset=['RECOVERED']), index='DATE', \n                         columns='REC', values='RECOVERED', aggfunc=np.sum).fillna(method='ffill').reset_index()\n\nit_death = pd.pivot_table(it_drr.dropna(subset=['DEATH']), index='DATE', \n                         columns='DTH', values='DEATH', aggfunc=np.sum).fillna(method='ffill').reset_index()\nit_drr_df = pd.merge(it_recovered,it_death,on='DATE')\nit_drr_df['RATIO'] = round(it_drr_df['DTH'] \/ (it_drr_df['DTH'] + it_drr_df['REC'])*100)\n\nit_ratio = it_drr_df[it_drr_df['DATE'] == it_drr_df['DATE'].max()]\n# ploting Current Deat Rate around the world\nfig_it = go.Figure()\nfig_it.add_trace(go.Scatter(x=it_drr_df.DATE, y=it_drr_df.RATIO, mode=\"lines+markers\", line_color='Red', name = 'Current Death Rate' + ' ' + f\"{int(it_ratio['RATIO']):,d}%\"))\nfig_it.update_layout(template=\"ggplot2\",title_text = '<b>Death Rate % In Italy <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\", color='black'), showlegend=True) \nfig_it.update_layout(\n    legend=dict(\n        x=.02,\n        y=0.95,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"Black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Red\",\n        borderwidth=2\n    ))\nfig_it.show()","67684ec4":"#### Summary As Of Today for US","5f7219b7":"#### Confirmed Vs. Recovered Vs Death case around the world","32729dbd":"#### Death Pecent In US","3c0fb916":"# <center>COVID 19 ANALYSIS<center>","caa8b9fc":"#### Summary As Of Today For Italy","7bf0f0db":"### INTRODUCTION\n+ In Janary of 2020 initial report came about posible outbreak within China provincy of Hubei. Since then outbreak has developed through other Chinas provenices and now through most of the continents. While dataset we have is considered as underestimed in terms of numbers, these analysis will present the best guess in effort to describe spread and of the virus and its rates. ","c90c9eee":"#### Percent of infection based on population - Analysis in progress","782a120f":"#### Distribution of cases in Chinas provincies","9ea5a33b":"#### Death Percent For Italy","757aae79":"## ANALYSIS ON CHINA\n+ This analysis is conducted on subset od observations that comes from China\n","3c40a84a":"#### Daily Reported Numbers By Italy","6993e509":"#### Outbreak Forecasting with fbProphete\n+ Using fbProphet algorythm we will atempt to predict total number of cases around the world in next 7 days. We see that upper limit is around 116k where lower end is at 103k.\n","76c8511a":"#### Confirmed Vs. Recovered Vs. Death in US","424815a4":"#### Daily Reported Number By US","c02e3f83":"### Checking Data Integrity with pandas_profiling library\n+ Pandas Profiling provides quick way to understand data set we are workign with.","69033f06":"#### Summary As Of Today","32080149":"#### Summary as of today","3593e92c":"## ANALYSIS ON US","6c53b02d":"#### Overall Death Percent\n+ In order to calculate true death rate, we have to work only with cases that are conlcuded ether recovered or passed away. Deviding number of dead with total onfirmed cases is not accruate since we do not know the outcome of all cases that are still in process. Instead, this would make more sense: death\/(death+recovered).\n+ Based on these analysis we see that initailly deathrate reached out up to 57% which is most likely due to quicker fatality than recovery rate since individuals in critical condition could pass away within first 7 days while it take several week to recover.","f0e4831e":"![](https:\/\/i.imgur.com\/9uXdpfl.jpg)","d16c3883":"#### Ploting locations of confirmed cases on map","e813c4ea":"## WORLD WIDE ANALYSIS\n+ In this section we will perform analysis on entire data set across all countries and all periods of time for confirmed, death and recovered cases.","21970e6a":"## Daily reported numbers\n+ Based on analysis below we see that numbers reported on daily basis fluctuate from day with few extremes. \n+ The highest number of infected cases reported in one day is 75,112, where on average we have ~6,732. \n+ The highest number of death reported in single day is 4,525 where on average is reported ~610 per day. ","2ada5def":"#### Plotting Cases On Map","6c4bed07":"#### Death Rate in China\n+ Based on analysis below, we can see that China drives the percent of death rate due to amouth of cases reported from that region of the world. ","1de71d49":"#### Daily reported numbers in China","7ce41880":"#### Confirmed Vs. Recovered Vs Death in Mainland China","55ed7a59":"## ANALYSIS ON ITALY"}}