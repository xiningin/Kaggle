{"cell_type":{"23e186bb":"code","d008f5c6":"code","db67f304":"code","5bfb55d6":"code","0731717c":"code","4a2b1988":"markdown","b78a4d64":"markdown","4c2ff546":"markdown","1cad3de1":"markdown"},"source":{"23e186bb":"import warnings;warnings.filterwarnings(\"ignore\")","d008f5c6":"import numpy as np\nimport matplotlib.pyplot as plt\n\nrnd = np.random.RandomState(3)  # \u4e3a\u4e86\u6f14\u793a\uff0c\u91c7\u7528\u56fa\u5b9a\u7684\u968f\u673a\n\n'''\n\u5355\u53d8\u91cf\u7ebf\u6027\u56de\u5f52\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u77e9\u9635\u5b9e\u73b0\uff1a\u77e9\u9635\u5b9e\u73b0\u7684\u4f18\u52bf\u5728\u4e8enumpy\u672c\u8eab\u652f\u6301\u4f2a\u9006\uff1b\n\u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e\u8bef\u5dee\u5e73\u65b9\u548c\u7684\u77e9\u9635\u5f62\u5f0f\u5bf9\u4e8eW\u6c42\u5bfc\u5e76\u4ee4\u5176\u4e3a0\uff0c\u5f97\u5230w_hat = (X^T*X)^-1*X^T*Y\uff0c\u5176\u4e2d(X^T*X)^-1*X^T\u79f0\u4e3a\u4f2a\u9006\uff08pseudo inverse\uff0c\u5373\u51fd\u6570pinv\uff09\n\u56e0\u6b64\u53ef\u4ee5\u7701\u7565\u4e2d\u95f4\u5927\u91cf\u7684\u6784\u9020\u7ecf\u9a8c\u8bef\u5dee\u3001\u89e3\u504f\u5bfc\u65b9\u7a0b\u7ec4\u7b49\u6b65\u9aa4\uff1b\n'''\n\nclass LinearRegression(object):\n    def __init__(self,X,y):\n        ones = np.ones(X.shape[0]).reshape(-1,1) # 1\u7528\u4e8e\u8ba1\u7b97b\n        self.X = np.hstack((ones,X))\n        self.y = y\n\n    def train(self):\n        # \u6ce8\u610f\uff0c\u867d\u7136\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0b\u9762\u4e8c\u8005\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u662f\u5728\u77e9\u9635\u65e0\u6cd5\u6c42\u9006\u6216\u67d0\u4e9b\u5176\u4ed6\u60c5\u51b5\u4e0b\u65f6\uff0c\u4e8c\u8005\u5e76\u4e0d\u76f8\u7b49\n        # \u76f8\u5bf9\u800c\u8a00\u4f2a\u9006\u5b9a\u4e49\u66f4\u52a0\u5bbd\u6cdb\uff0c\u7528\u5904\u66f4\u5e7f\uff0c\u56e0\u6b64\u53ef\u4ee5\u7684\u60c5\u51b5\u4e0b\u5efa\u8bae\u4f7f\u7528\u4f2a\u9006\n        # self.w = np.linalg.inv(self.X.T @ self.X) @ self.X.T @ self.y\n        self.w = np.linalg.pinv(self.X) @ self.y\n        self.w = self.w.reshape(-1)\n        self.w,self.b = self.w[1:],self.w[0]\n        return self.w,self.b\n\n    def predict(self,x):\n        return self.w.dot(x)+self.b\n\n    def get(self):\n        return self.X,self.y,self.w,self.b","db67f304":"import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(18,4))\n\ndef pain(pos=141,xlabel='x',ylabel='y',title='',x=[],y=[],line_x=[],line_y=[]):\n    plt.subplot(pos)\n    plt.title(title)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.scatter(x,y)\n    plt.plot(line_x,line_y)\n\nrnd = np.random.RandomState(3)  # \u4e3a\u4e86\u6f14\u793a\uff0c\u91c7\u7528\u56fa\u5b9a\u7684\u968f\u673a\n\nX = np.array([-1+(1-(-1))*(i\/10) for i in range(10)]).reshape(-1,1)\ny = (X**2)+rnd.normal(scale=.1,size=X.shape)\nmodel = LinearRegression(X=X,y=y)\nw,b = model.train()\nprint(w,b)\nline_x = [min(X[:,0]),max(X[:,0])]\nline_y = [model.predict(np.array([min(X[:,0])])),model.predict(np.array([max(X[:,0])]))]\npain(131,'x','y','degress=1',X[:,0],y[:,0],line_x,line_y)\n\nX2 = X**2\nmodel = LinearRegression(X=X2,y=y)\nw,b = model.train()\nprint(w,b)\nline_x = [min(X2[:,0]),max(X2[:,0])]\nline_y = [model.predict(np.array([x**2])) for x in line_x]\npain(132,'x^2','y','translate coord & degress=2',X2[:,0],y[:,0],line_x,line_y)\n\nx_min,x_max = min(X[:,0]),max(X[:,0])\nline_x = [x_min+(x_max-x_min)*(i\/100) for i in range(100)]\nline_y = [model.predict(np.array([x**2])) for x in line_x]\npain(133,'x','y','degress=2',X[:,0],y[:,0],line_x,line_y)\n\nplt.show()","5bfb55d6":"import numpy as np\nimport matplotlib.pyplot as plt\n\n'''\n\u611f\u77e5\u673a\u53e3\u888b\u7b97\u6cd5\uff1a\u4e0e\u66b4\u529b\u6cd5\u4e0d\u540c\uff0c\u53e3\u888b\u7b97\u6cd5\u63d0\u4f9b\u4e86\u4e24\u9879\u6539\u52a8\uff0c\u9996\u5148\u901a\u8fc7epochs\u63a7\u5236\u5b8c\u6574\u7684\u6570\u636e\u8bad\u7ec3\u6b21\u6570\uff0c\u5176\u6b21\u540c\u6b65\u4fdd\u5b58\u76ee\u524d\u7684\u6700\u4f18w\u548cb\uff0c\u8fd9\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u6709\u9650\u6b21\u6570\u5185\u5904\u7406\u53ef\u5206\u548c\u4e0d\u53ef\u5206\u60c5\u51b5\uff1b\n'''\n\nclass Perceptron(object):\n    # \u521d\u59cb\u5316 w \u548c b\uff0cnp.array \u76f8\u5f53\u4e8e\u5b9a\u4e49\u5411\u91cf\n    def __init__(self,X,y,w=np.array([0,0]),b=0,epochs=10):\n        self.w,self.b = w,b\n        self.X,self.y = X,y\n        self.epochs = epochs\n\n    # \u5b9a\u4e49\u70b9\u79ef\u51fd\u6570\n    def dot(self,x,w,b):\n        return np.dot(w,x)+b # np.dot \u662f\u5411\u91cf\u7684\u70b9\u79ef\n    \n    # \u5b9a\u4e49\u7b26\u53f7\u51fd\u6570\n    def sign(self,y):\n        return 1 if y>=0 else -1\n    \n    # \u5b9a\u4e49\u8bef\u5dee\u8bc4\u5206\u51fd\u6570\n    def score(self,X,y,w,b):\n        return sum([yi*self.sign(self.dot(xi,w,b)) for xi,yi in zip(X,y)])\n\n    def train(self):\n        self.best_w,self.best_b,self.best_score = self.w,self.b,self.score(self.X,self.y,self.w,self.b)\n        for _ in range(self.epochs):\n            for xi,yi in zip(self.X,self.y):\n                if yi*self.dot(xi,self.w,self.b)<=0:\n                    self.w,self.b = self.w+yi*xi,yi+self.b\n                    score_ = self.score(self.X,self.y,self.w,self.b)\n                    if score_ > self.best_score:\n                        self.best_w,self.best_b = self.w,self.b\n                        self.best_score = score_\n                    break\n        return self.best_w,self.best_b\n\n    def predict(self,x):\n        return self.sign(self.dot(x,self.w,self.b))\n\n    def get(self):\n        return self.X,self.y,self.w,self.b,self.best_w,self.best_b","0731717c":"import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(18,6))\n\n'''\n\u901a\u8fc7\u5750\u6807\u8f6c\u6362\/\u7279\u5f81\u8f6c\u6362\u5c06\u975e\u7ebf\u6027\u95ee\u9898\u8f6c\u4e3a\u7ebf\u6027\u95ee\u9898\uff0c\u518d\u4f7f\u7528\u7ebf\u6027\u6a21\u578b\u89e3\u51b3\uff1b\n'''\n\ndef trans_z(X):\n    return X**2\n\ndef trans_z2(X):\n    return np.array([[x[0]**2,x[1]**2,x[0]*x[1],x[0],x[1]] for x in X])\n\ndef pain(pos=121,title='',xlabel='',ylabel='',resolution=0.05,model=None,X=[],y=[],line_x=[],line_y=[],transform=None):\n    plt.subplot(pos)\n    plt.title(title)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n\n    xy_min = min(min([x[0] for x in X]),min([x[1] for x in X]))\n    xy_max = max(max([x[0] for x in X]),max([x[1] for x in X]))\n    xx1, xx2 = np.mgrid[xy_min-1:xy_max+1.1:resolution, xy_min-1:xy_max+1.1:resolution]\n    grid = np.c_[xx1.ravel(), xx2.ravel()]\n    if transform:\n        grid = transform(grid)\n    y_pred = np.array([model.predict(np.array(x)) for x in grid]).reshape(xx1.shape)\n    plt.contourf(xx1, xx2, y_pred, 25, cmap=\"coolwarm\", vmin=0, vmax=1, alpha=0.8)\n\n    plt.scatter([xi[0] for xi,yi in zip(X,y) if yi==1],[xi[1] for xi,yi in zip(X,y) if yi==1],c='black',marker='o')\n    plt.scatter([xi[0] for xi,yi in zip(X,y) if yi==-1],[xi[1] for xi,yi in zip(X,y) if yi==-1],c='black',marker='x')\n    # plt.plot(line_x,line_y,color='black')\n\n## \u4e0d\u53ef\u5206\nX = np.array([[-1.8,0.6],[0.48,-1.36],[3.68,-3.64],[1.44,0.52],[3.42,3.5],[-4.18,1.68]])\ny = np.array([1,1,-1,1,-1,-1])\nmodel = Perceptron(X=X,y=y,epochs=100)\nw,b = model.train()\n# \u6ce8\u610f\u7ed8\u5236\u5206\u5272\u76f4\u7ebf\u516c\u5f0f\u4e3a\uff1awx+b=0\uff0c\u56e0\u6b64\u7ed9\u5b9ax[0]\uff0c\u8ba1\u7b97\u5bf9\u5e94\u7684x[1]\u5373\u53ef\u753b\u56fe\n# w[0]*x[0]+w[1]*x[1]+b=0 => x[1]=(-b-w[0]*x[0])\/w[1]\nline_x = [min([x[0] for x in X])-3,max([x[0] for x in X])+3]\nline_y = [(-b-w[0]*line_x[0])\/w[1],(-b-w[0]*line_x[1])\/w[1]]\npain(141,'Before coordinate translate','x1','x2',model=model,X=X,y=y)\n\n## \u8f6c\u6362\u5750\u6807\u4e3a\u53ef\u5206\nZ = X**2 # z1=x1^2,z2=x2^2\uff0c\u76f8\u5f53\u4e8e\u5bf9\u539f\u6570\u636e\u7a7a\u95f4\u505a\u5750\u6807\u7cfb\u8f6c\u6362\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u7279\u5f81\u8f6c\u6362\nmodel = Perceptron(X=Z,y=y,epochs=100)\nw,b = model.train()\nline_x = [min([x[0] for x in Z])-3,max([x[0] for x in Z])+3]\nline_y = [(-b-w[0]*line_x[0])\/w[1],(-b-w[0]*line_x[1])\/w[1]]\npain(142,'After coordinate translate','z1=x1^2','z2=x2^2',model=model,X=Z,y=y)\n\n## \u8f6c\u6362\u56de\u539f\u5750\u6807\u7ed8\u5236\u5206\u5272\u7ebf\uff0c\u6b64\u65f6\u4e3a\u66f2\u7ebf\nline_x = [(line_x[0]+(line_x[1]-line_x[0])*(i\/100))**.5 for i in range(0,100)]\nline_y = [((-b-w[0]*(x**2))\/w[1])**.5 for x in line_x]\npain(143,'Back to original coordinate','x1','x2',model=model,X=X,y=y,transform=trans_z)\n\n## \u4f7f\u7528\u4efb\u610f\u4e8c\u6b21\u66f2\u7ebf\u8f6c\u6362\u5750\u6807\uff1a\u6240\u6709\u53ef\u80fd\u7684\u4e8c\u5143\u4e8c\u6b21\u65b9\u7a0b\nZ2 = np.array([[x[0]**2,x[1]**2,x[0]*x[1],x[0],x[1]] for x in X])\nmodel = Perceptron(X=Z2,y=y,w=np.array([0,0,0,0,0]),epochs=100)\nw,b = model.train()\n# w0*x0^2+w1*x1^2+w2*x0*x1+w3*x0+w4*x1+b=0 => x1=-b-w3*x0-w0*x0^2\n# line_x = [(line_x[0]+(line_x[1]-line_x[0])*(i\/100))**.5 for i in range(0,100)]\n# line_y = [((-b-w[0]*(x**2))\/w[1])**.5 for x in line_x]\npain(144,'Back to original coordinate','x1','x2',model=model,X=X,y=y,transform=trans_z2)\n\nplt.show()","4a2b1988":"\u7cfb\u5217\u6587\u7ae0\u76ee\u5f55\uff1a\n- [\u611f\u77e5\u673a](https:\/\/www.cnblogs.com\/helongBlog\/p\/14874578.html)\n- [\u7ebf\u6027\u56de\u5f52](https:\/\/www.cnblogs.com\/helongBlog\/p\/14875327.html)\n- [\u975e\u7ebf\u6027\u95ee\u9898](https:\/\/www.cnblogs.com\/helongBlog\/p\/14875344.html)\n- [\u591a\u9879\u5f0f\u56de\u5f52](https:\/\/www.cnblogs.com\/helongBlog\/p\/14892200.html)\n- [\u5cad\u56de\u5f52](https:\/\/www.cnblogs.com\/helongBlog\/p\/14885713.html)\n\n## \u7b97\u6cd5\u4ecb\u7ecd\n\u524d\u9762\u4e24\u7bc7\u5206\u522b\u4ecb\u7ecd\u4e86**\u5206\u7c7b**\u4e0e**\u56de\u5f52**\u95ee\u9898\u4e2d\u5404\u81ea\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u6709\u4e00\u70b9\u76f8\u540c\u7684\u662f\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7684\uff0c\u800c\u5b9e\u9645\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u57fa\u672c\u90fd\u662f\u975e\u7ebf\u6027\u95ee\u9898\uff0c\u800c\u80fd\u591f\u5904\u7406\u975e\u7ebf\u6027\u95ee\u9898\u662f\u673a\u5668\u5b66\u4e60\u6709\u5b9e\u7528\u4ef7\u503c\u7684\u57fa\u7840\uff1b\n\u9996\u5148\uff0c**\u975e\u7ebf\u6027\u95ee\u9898**\u5728\u5206\u7c7b\u4e0e\u56de\u5f52\u4e2d\u7684\u8868\u73b0\u662f\u4e0d\u540c\u7684\uff0c\u5728\u56de\u5f52\u95ee\u9898\u4e2d\uff0c\u901a\u5e38\u6307\u7684\u662f\u65e0\u6cd5\u901a\u8fc7\u7ebf\u6027\u6a21\u578b\u5f88\u597d\u7684\u62df\u5408\uff0c\u800c\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u975e\u7ebf\u6027\u95ee\u9898\u6307\u7684\u662f\u65e0\u6cd5\u901a\u8fc7\u8d85\u5e73\u9762\u8fdb\u884c\u6b63\u786e\u7684\u5206\u7c7b\uff1b\n\n\u5bf9\u4e8e\u975e\u7ebf\u6027\u95ee\u9898\u7684\u5904\u7406\u65b9\u6cd5\uff1a\n1. \u4ece**\u6570\u636e**\u51fa\u53d1\uff1a\u7531\u4e8e\u975e\u7ebf\u6027\u662f\u57fa\u4e8e\u5f53\u524d\u7684\u7279\u5f81\u7a7a\u95f4\uff0c\u56e0\u6b64\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u7279\u5f81\u8f6c\u6362\u3001\u5347\u7ef4\u7b49\u65b9\u5f0f\u4f7f\u5f97\u95ee\u9898\u5728\u65b0\u7684\u7279\u5f81\u7a7a\u95f4\u4e2d\u8f6c\u4e3a\u7ebf\u6027\uff08\u53ef\u4ee5\u63a8\u5bfc\u53ea\u8981\u7ef4\u5ea6\u8db3\u591f\u591a\uff0c\u6570\u636e\u603b\u662f\u7ebf\u6027\u7684\uff09\uff1b\n2. \u4ece**\u6a21\u578b**\u51fa\u53d1\uff1a\u4f7f\u7528\u80fd\u5904\u7406\u975e\u7ebf\u6027\u7684\u6a21\u578b\u6765\u5904\u7406\u95ee\u9898\uff0c\u6bd4\u5982\u51b3\u7b56\u6811\u3001\u795e\u7ecf\u7f51\u7edc\u7b49\uff1b\n\n\u672c\u7bc7\u4e3b\u8981\u4ece**\u6570\u636e**\u6216\u8005\u8bf4**\u7279\u5f81**\u7684\u89d2\u5ea6\u6765\u770b\u5982\u4f55\u5904\u7406\u5206\u7c7b\u548c\u56de\u5f52\u7684\u975e\u7ebf\u6027\u95ee\u9898\uff0c\u8fd9\u4e00\u7c7b\u5904\u7406\u624b\u6bb5\u4e0e\u5177\u4f53\u7684\u7b97\u6cd5\u65e0\u5173\uff0c\u56e0\u6b64\u6709\u66f4\u5927\u7684\u666e\u9002\u6027\uff0c\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u4e5f\u88ab\u5e7f\u6cdb\u7684\u4f7f\u7528\uff1b\n\nPS\uff1a\u6ce8\u610f\u4ee3\u7801\u4e2d\u7528\u5230\u7684\u7ebf\u6027\u56de\u5f52\u3001\u611f\u77e5\u673a\u7b49\u6a21\u578b\u90fd\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u54c8\uff0c\u4e0d\u662fsklearn\u7684\uff0c\u6240\u4ee5\u53ef\u80fd\u53c2\u6570\u3001\u7528\u6cd5\u3001\u7ed3\u679c\u5e76\u4e0d\u5b8c\u5168\u4e00\u81f4\uff1b\n\n## \u975e\u7ebf\u6027\u56de\u5f52\u95ee\u9898\n\u5178\u578b\u7684\u975e\u7ebf\u6027\u56de\u5f52\u95ee\u9898\u6570\u636e\u5206\u5e03\u60c5\u51b5\u5982\u4e0b\u56fe\uff0c\u6ce8\u610f**x**\u4e3a\u8f93\u5165\u7279\u5f81\uff0c**y**\u4e3a\u8f93\u51fa\u76ee\u6807\uff1a\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615143157250-1229044499.png)\n\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u6570\u636e\u96c6\u65e0\u6cd5\u7528\u4e00\u6761\u76f4\u7ebf\u6765\u8f83\u597d\u7684\u62df\u5408\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u4e00\u6761\u66f2\u7ebf\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u4f7f\u5f97\u53ea\u80fd\u62df\u5408\u76f4\u7ebf\u7684**\u7ebf\u6027\u56de\u5f52**\u80fd\u591f\u62df\u5408\u51fa\u4e00\u6761\u5408\u9002\u7684\u66f2\u7ebf\uff1b\n### \u89e3\u51b3\u601d\u8def\n\u7531\u4e8e\u7ebf\u6027\u56de\u5f52\u53ea\u80fd\u62df\u5408\u76f4\u7ebf\uff0c\u800c\u5f53\u524d\u6570\u636e\u96c6\u53ef\u89c6\u5316\u540e\u660e\u663e\u4e0d\u662f\u76f4\u7ebf\uff0c\u56e0\u6b64\u89e3\u51b3\u601d\u8def\u53ea\u80fd\u4ece\u6570\u636e\u4e0a\u5165\u624b\uff0c\u5373\u901a\u8fc7\u4fee\u6539\u5750\u6807\u7cfb\uff08\u6216\u8005\u53eb\u7279\u5f81\u8f6c\u6362\uff09\u6765\u6539\u53d8\u6570\u636e\u7684\u5206\u5e03\u6392\u5217\u60c5\u51b5\uff0c\u4f7f\u5f97\u5176\u66f4\u63a5\u8fd1\u4e8e\u7ebf\u6027\uff1b\n\u9488\u5bf9\u6b64\u5904\u7684\u6570\u636e\u96c6\uff0c\u901a\u8fc7\u89c2\u5bdf\u5176\u5206\u5e03\u60c5\u51b5\uff0c\u8003\u8651\u5c06$x$\u8f6c\u6362\u4e3a$x^2$\uff0c\u5f53\u7136\uff0c\u5b9e\u9645\u5de5\u4f5c\u4e2d\u4e0d\u4ec5\u9700\u8981\u8fdb\u884c\u6570\u636e\u63a2\u7d22\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u5927\u91cf\u7684\u5c1d\u8bd5\u624d\u80fd\u627e\u5230\u6700\u5408\u9002\u7684\u7279\u5f81\u8f6c\u6362\u65b9\u6cd5\uff1b\n### \u4ee3\u7801\u5b9e\u73b0\n#### \u6784\u5efa\u975e\u7ebf\u6027\u6570\u636e\u96c6\n```python\nX = np.array([-1+(1-(-1))*(i\/10) for i in range(10)]).reshape(-1,1)\ny = (X**2)+rnd.normal(scale=.1,size=X.shape)\n```\n#### \u76f4\u63a5\u8dd1\u7ebf\u6027\u56de\u5f52\u6a21\u578b\n```python\nmodel = LR(X=X,y=y)\nw,b = model.train()\nprint(w,b)\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615144936080-1681527097.png)\n#### \u901a\u8fc7\u7279\u5f81\u8f6c\u6362\u6765\u6539\u53d8\u6570\u636e\u5206\u5e03\u60c5\u51b5\n```python\nX2 = X**2\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615145112591-618242499.png)\n#### \u5728\u8f6c\u6362\u540e\u7684\u6570\u636e\u96c6\u4e0a\u8fd0\u884c\u7ebf\u6027\u56de\u5f52\n```python\nmodel = LR(X=X2,y=y)\nw,b = model.train()\nprint(w,b)\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615145258265-369532293.png)\n#### \u5728\u539f\u59cb\u5750\u6807\u7cfb\u4e0b\u7ed8\u5236\u7ebf\u6027\u56de\u5f52\u7684\u62df\u5408\u7ebf\n```python\nx_min,x_max = min(X[:,0]),max(X[:,0])\nline_x = [x_min+(x_max-x_min)*(i\/100) for i in range(100)]\nline_y = [model.predict(np.array([x**2])) for x in line_x]\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615145406091-563391750.png)\n### \u5b8c\u6574\u4ee3\u7801","b78a4d64":"<h2 style = 'font-size:50px; font-family:Garamond;font-weight: normal; background-color:#191970; color:#F0FFF3;text-align: center;border-radius:5px; padding: 5px'>\ud83e\udd16\ud83e\udd16PLEASE UPVOTE!!!\ud83e\udd16\ud83e\udd16<\/h2>","4c2ff546":"## \u6700\u540e\n\u5bf9\u4e8e\u7279\u5f81\u8f6c\u6362\uff0c\u53ef\u4ee5\u5e94\u7528\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u672c\u7bc7\u4e3b\u8981\u662f\u4ee5\u6700\u7b80\u5355\u7684\u4e8c\u6b21\u591a\u9879\u5f0f\u8fdb\u884c\u8f6c\u6362\uff0c\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6570\u636e\uff0c\u9700\u8981\u8fdb\u884c\u66f4\u9ad8\u9636\u7684\u8f6c\u6362\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u4e1a\u52a1\u8fdb\u884c\u7279\u5f81\u8f6c\u6362\u7b49\u7b49\uff0c\u901a\u5e38\u8fd9\u4e5f\u662fML\u4e2d\u975e\u5e38\u6d88\u8017\u65f6\u95f4\u6210\u672c\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u4e5f\u662f\u5bf9\u4e8e\u6700\u7ec8\u7ed3\u679c\u5f71\u54cd\u6700\u5927\u7684\u4e00\u6b65\uff1b","1cad3de1":"## \u975e\u7ebf\u6027\u5206\u7c7b\u95ee\u9898\n\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\u6bd4\u6bd4\u7686\u662f\uff0c\u7b80\u5355\u7684\u4e0d\u53ef\u5206\u60c5\u51b5\u5982\u4e0b\uff1a\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615145902261-1907735474.png)\n\u867d\u7136\u95ee\u9898\u7c7b\u578b\u4e0d\u540c\uff0c\u4f46\u662f\u6211\u4eec\u7684\u89e3\u51b3\u601d\u8def\u662f\u4e00\u81f4\u7684\uff0c\u5373\u901a\u8fc7\u7279\u5f81\u8f6c\u6362\u5c06\u7ebf\u6027\u4e0d\u53ef\u5206\u95ee\u9898\u8f6c\u4e3a\u7ebf\u6027\u53ef\u5206\uff1b\n\u9488\u5bf9\u4e0a\u8ff0\u6570\u636e\u5206\u5e03\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u70b9\u8ddd\u79bb\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\u5dee\u5f02\u5f88\u660e\u663e\uff0c\u5706\u70b9\u8ddd\u79bb\u4e2d\u5fc3\u7684\u8ddd\u79bb\u5f88\u8fd1\uff0c\u800c\u53c9\u53c9\u8ddd\u79bb\u4e2d\u5fc3\u7684\u8ddd\u79bb\u5f88\u8fdc\uff0c\u5982\u679c\u80fd\u591f\u6784\u5efa\u4e00\u4e2a\u8868\u793a\u8be5\u8ddd\u79bb\u7684\u7279\u5f81\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u57fa\u4e8e\u8be5\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\uff1b\n\u57fa\u4e8e\u4e0a\u8ff0\u5206\u6790\uff0c\u901a\u8fc7**\u6b27\u6c0f\u8ddd\u79bb**\u516c\u5f0f\u8ba1\u7b97\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\u6709\uff1a$\\sqrt{(x1-0)^2+(x2-0)^2}$\uff0c\u7531\u4e8e\u6211\u4eec\u53ea\u662f\u671f\u671b\u83b7\u5f97\u4e00\u4e2a\u5e7f\u4e49\u4e0a\u7684\u8ddd\u79bb\uff0c\u5e76\u4e0d\u4e25\u683c\u8981\u6c42\u662f\u6b27\u6c0f\u8ddd\u79bb\uff0c\u56e0\u6b64\u5c06\u516c\u5f0f\u4e2d\u7684\u6839\u53f7\u53bb\u6389\u4e5f\u4e0d\u5f71\u54cd\u5bf9\u6570\u636e\u5206\u5e03\u7684\u6539\u53d8\uff0c\u6700\u540e\u7279\u5f81\u8f6c\u6362\u4e3a\u5c06$x_1$\u8f6c\u6362\u4e3a$x_1^2$\uff0c\u540c\u6837\u7684\u5c06$x_2$\u8f6c\u6362\u4e3a$x_2^2$\uff0c\u8f6c\u6362\u540e\u7684\u6a2a\u7eb5\u5750\u6807\u503c\u4e4b\u548c\u5c31\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u6211\u4eec\u671f\u671b\u7684\u8ddd\u79bb\uff1b\n### \u4ee3\u7801\u5b9e\u73b0\n#### \u6784\u5efa\u7ebf\u6027\u4e0d\u53ef\u5206\u6570\u636e\u96c6\n```python\nX = np.array([[-1.8,0.6],[0.48,-1.36],[3.68,-3.64],[1.44,0.52],[3.42,3.5],[-4.18,1.68]])\ny = np.array([1,1,-1,1,-1,-1])\n```\n#### \u76f4\u63a5\u8fd0\u884c\u611f\u77e5\u673a\u6a21\u578b\n```python\nmodel = Perceptron(X=X,y=y,epochs=100)\nw,b = model.train()\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615151013385-1905268357.png)\n#### \u7279\u5f81\u8f6c\u6362\u53ca\u8f6c\u6362\u540e\u7684\u7279\u5f81\u5206\u5e03\n```python\nZ = X**2 # z1=x1^2,z2=x2^2\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615151140451-2047067873.png)\n#### \u5728\u8f6c\u6362\u540e\u7684\u6570\u636e\u96c6\u4e0a\u8fd0\u884c\u611f\u77e5\u673a\n```python\nmodel = Perceptron(X=Z,y=y,epochs=100)\nw,b = model.train()\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615151231659-742575756.png)\n#### \u5728\u539f\u59cb\u5750\u6807\u7cfb\u4e0b\u770b\u611f\u77e5\u673a\u62df\u5408\u7684\u8d85\u5e73\u9762\n```python\nline_x = [(line_x[0]+(line_x[1]-line_x[0])*(i\/100))**.5 for i in range(0,100)]\nline_y = [((-b-w[0]*(x**2))\/w[1])**.5 for x in line_x]\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615151317952-1047414880.png)\n#### \u901a\u8fc7\u589e\u52a0\u4efb\u610f\u4e8c\u9636\u4ee5\u53ca\u5c0f\u4e8e\u4e8c\u9636\u7279\u5f81\u6765\u62df\u5408\u4efb\u610f\u4e8c\u6b21\u66f2\u7ebf\n```python\nZ2 = np.array([[x[0]**2,x[1]**2,x[0]*x[1],x[0],x[1]] for x in X])\nmodel = Perceptron(X=Z2,y=y,w=np.array([0,0,0,0,0]),epochs=100)\nw,b = model.train()\n```\n![](https:\/\/img2020.cnblogs.com\/blog\/666842\/202106\/666842-20210615151545700-688372247.png)\n### \u5b8c\u6574\u4ee3\u7801"}}