{"cell_type":{"73398d40":"code","1dc70640":"code","ba104433":"code","730fe3f0":"code","c4f3731a":"code","dfcaaf96":"code","9361b294":"code","5391f090":"code","e32c5751":"code","8c1ebd89":"code","9e4634a9":"code","94ef84f1":"code","20c5e9dd":"code","567e937c":"code","bb981a8a":"code","42a5dfc4":"code","39ab7d77":"markdown","294fa5e2":"markdown","fbf123e9":"markdown","4f9f5e25":"markdown","17342b6f":"markdown","fc9bc345":"markdown"},"source":{"73398d40":"%%time\n\nimport os\nimport logging\nimport sys\nimport time\nfrom datetime import timedelta\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport gc\ngc.enable()\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB","1dc70640":"%%time\n\n# Refer to https:\/\/www.kaggle.com\/bextuychiev\/how-to-work-w-million-row-datasets-like-a-pro\n\ndef reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max):\n                    df[col] = df[col].astype(np.float16)\n                elif (c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\". \n              format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","ba104433":"%%time\n\ndata_dir = \"..\/input\/tabular-playground-series-oct-2021\/\"\n\ntrain  = reduce_memory_usage(pd.read_csv(data_dir  + \"train.csv\"))\ntest = reduce_memory_usage(pd.read_csv(data_dir + \"test.csv\"))\nsubmission = reduce_memory_usage(pd.read_csv(data_dir + \"sample_submission.csv\"))","730fe3f0":"%%time\n\nprint(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape, end=\"\\n\\n\")","c4f3731a":"%%time\n\npreds_dir = \"..\/input\/tps-october-2021-predictions\/\"\n\npreds_test_files = [\n    \"cb1_test.csv\",\n    \"hgb1_test.csv\",\n    \"lgb1_test.csv\",\n    \"xgb1_test.csv\",\n    \"vote1_test.csv\",\n    \n    \"cb2_test.csv\",\n    \"hgb2_test.csv\",\n    \"lgb2_test.csv\",\n    \"xgb2_test.csv\",\n]\n\npreds_train_files = [\n    \"cb1_train.csv\",\n    \"hgb1_train.csv\",\n    \"lgb1_train.csv\",\n    \"xgb1_train.csv\",\n    \"vote1_train.csv\",\n    \n    \"cb2_train.csv\",\n    \"hgb2_train.csv\",\n    \"lgb2_train.csv\",\n    \"xgb2_train.csv\",\n]\n\nTARGET = \"target\"\n\nfeatures = [\n    \"cb1\",\n    \"hgb1\",\n    \"lgb1\",\n    \"xgb1\",\n    \"vote1\",\n    \n    \"cb2\",\n    \"hgb2\",\n    \"lgb2\",\n    \"xgb2\",\n]\n\ndef merge_preds_df(df, preds_files):\n    for preds_file in preds_files:\n        df_tmp = pd.read_csv(preds_dir + preds_file)\n        df = df.merge(df_tmp, on=\"id\", how=\"left\")\n    return df\n\ntrain = merge_preds_df(train, preds_train_files)\ntest = merge_preds_df(test, preds_test_files)","dfcaaf96":"train[features].head()","9361b294":"test[features].head()","5391f090":"%%time\n\ndef load_vis_data(preds_files):\n    # Read test preds files\n    df_list = []\n    for preds_file in preds_files:\n        df_tmp = pd.read_csv(f\"{preds_dir}\/{preds_file}\")\n        # rename preds column \n        df_tmp.columns = [\"id\", TARGET]\n        df_list.append((preds_file, df_tmp))\n        \n    hist_data = []\n    for i in range(len(df_list)):\n        _, df = df_list[i]\n        hist_data.append(df[TARGET])\n        \n    return hist_data","e32c5751":"%%time\n\nvis_data = load_vis_data(preds_test_files)","8c1ebd89":"%%time\n\nfig1= ff.create_distplot(vis_data, preds_test_files, bin_size=0.3, show_hist=False, show_rug=False)\nfig1.show()","9e4634a9":"%%time\n\nfig2 = px.imshow(np.corrcoef(vis_data), x=preds_test_files, y=preds_test_files)\nfig2.show()","94ef84f1":"%%time\n\ny = train.pop(TARGET)\nX = train[[\"id\"] + features].copy()\nX_test = test[features].copy()\n\ndel train\ndel test","20c5e9dd":"%%time\n\nlr1_params = {\n    \"random_state\": 42, \n    \"solver\": \"saga\"\n}\n\nlr2_params = {\n    \"fit_intercept\": True, \n    \"random_state\": 42, \n    \"solver\": \"sag\", \n}\n\ngnb1_params = {}\n\n# Model name must be unique\nmodels = [\n    (\"lr1\", LogisticRegression(**lr1_params)),\n    (\"lr2\", LogisticRegression(**lr2_params)),\n    (\"gnb1\", GaussianNB(**gnb1_params)),\n]","567e937c":"%%time\n\ndef predict_with_model(model, simple_fit=False, splits=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    for fold, (idx_train, idx_valid) in enumerate(skf.split(X, y)):\n        start_time = time.monotonic()\n        \n        X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n        X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n        \n        valid_ids = X_valid.id.values.tolist()\n\n        X_train = X_train[features]\n        X_valid = X_valid[features]\n\n        if simple_fit:\n            model.fit(X_train, y_train)\n        else:\n            model.fit(\n                X_train, y_train,\n                eval_set=[(X_valid, y_valid)],\n                early_stopping_rounds=180,\n                verbose=1000\n            )\n        \n        valid_pred = model.predict_proba(X_valid)[:, 1]\n        test_pred = model.predict_proba(X_test)[:, 1]\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = roc_auc_score(y_valid, valid_pred)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Fold {fold} | AUC: {score} | Took: {dur}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","bb981a8a":"%%time\n\ndef predict_with_models(models):\n    print(f\"Predicting with {len(models)} models...\", end=\"\\n\\n\")\n    for model_name, model in models:\n        start_time = time.monotonic()\n        \n        print(\"-\" * 50)\n        print(f\"Using {model_name} model...\")\n        test_preds, valid_preds, scores = predict_with_model(model, simple_fit=True)\n        print(f\"Score: {np.mean(scores)}, Std: {np.std(scores)}\", end=\"\\n\\n\")\n\n        print(\"Saving predictions...\")\n        valid_preds.columns = [\"id\", model_name]\n        valid_preds.to_csv(f\"{model_name}_train.csv\", index=False)\n\n        test_preds_df = pd.DataFrame({\"id\": submission.id, model_name: test_preds})\n        test_preds_df.to_csv(f\"{model_name}_test.csv\", index=False)\n\n        sub = pd.DataFrame({\"id\": submission.id, TARGET: test_preds})\n        sub.to_csv(f\"{model_name}_submission.csv\", index=False)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Took: {dur}\")","42a5dfc4":"%%time\n\npredict_with_models(models)","39ab7d77":"## Merge predictions to main data frames","294fa5e2":"## Predict","fbf123e9":"## Import libraries","4f9f5e25":"## Load datasets","17342b6f":"## TPS Oct. 2021 - Blending LGBM\/XGB\/CB\/HGB\/Vote","fc9bc345":"## Visualize correlations"}}