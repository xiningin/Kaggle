{"cell_type":{"21af1d57":"code","a8b9e6be":"code","b8711799":"code","5cc8daf4":"code","5472db0c":"code","293e8c1e":"code","cc2c8cbe":"code","8c50c6e6":"code","98e2f4f0":"code","dc217be4":"code","bc84431b":"code","b9a2313e":"code","b9a8ee7a":"code","7be79f59":"code","89b1bd1c":"code","21ddd38e":"code","31ffbe0f":"code","e4d9024a":"code","5a9ade2d":"code","f47e77dc":"code","6658cc6f":"code","9d26bfb6":"code","d13f1af5":"code","13da1d5e":"code","b4179e19":"code","7dc430b1":"code","8b7a07fb":"code","91a9dda0":"code","03331ae1":"code","9caea306":"code","20ec8393":"code","2ba73411":"code","65c66e57":"code","a31132b6":"code","684639b9":"code","321cb739":"code","96b58e55":"code","367999af":"code","d6f1bf5f":"code","026cde8b":"code","2d9985de":"code","b4be1499":"code","6c215508":"code","7c03b10c":"code","cdf87571":"code","e2f91343":"code","40c11ea2":"code","c1b3e14a":"code","4021595d":"code","b0a16dc1":"code","67794330":"code","c5c17e0a":"code","12b148a2":"code","3e19350e":"code","8ff41d20":"code","024bc057":"code","012ae694":"code","23bbd9c8":"code","bce8c7b6":"code","e07be244":"code","e1b232ee":"code","2dc3a3d8":"code","24cc3714":"code","226c7bc9":"code","cd0c14f7":"code","f16a32ee":"code","e65e4237":"code","8f9f7cd6":"code","7f2fc964":"code","b41a769d":"code","fd760b25":"code","1f9589a9":"code","69f08d41":"code","402341ad":"code","6a7a8974":"code","f54ec152":"code","4c37f6a4":"code","90c673d6":"code","3cde07d4":"code","75a8474a":"code","3de877d4":"code","69fd6eaa":"code","7d6a7581":"code","6ee999e8":"code","6c051163":"code","a57d3317":"code","bb943810":"code","8e7669b8":"code","adace79f":"code","8cc68d84":"code","5f46dd27":"code","86accd07":"code","2f9def54":"code","1f167f85":"code","ab1701ea":"code","9f05a5cb":"code","4bf2734e":"code","9e5918fc":"markdown","f9c897a5":"markdown","86f336e4":"markdown","83555255":"markdown","598d6de5":"markdown","811024dd":"markdown","b672c66d":"markdown","24578ef2":"markdown","35f8d4a1":"markdown","02c75ef0":"markdown","6e6564c8":"markdown","cea854a3":"markdown","c10d8177":"markdown","9889b99c":"markdown","3c9b3bda":"markdown","3baebb4d":"markdown","9e71cd80":"markdown","f8d1dc18":"markdown","3303abb0":"markdown","41173259":"markdown","b3aae7dc":"markdown","56ee3e3d":"markdown","41368210":"markdown","ce1fba3d":"markdown","ae3c932f":"markdown","dd0a8c4f":"markdown","99624445":"markdown","b0cc9576":"markdown","c5714886":"markdown","d31387cb":"markdown","c3523cd5":"markdown","63315113":"markdown","aa2146b8":"markdown","4c78795b":"markdown","1549212c":"markdown","44c8be26":"markdown","71f38642":"markdown","50fc190f":"markdown","3be35e55":"markdown","95d2f164":"markdown","a122482c":"markdown","65d5aa29":"markdown","e75be05d":"markdown","2d45a9aa":"markdown","dfe9bb4f":"markdown","1ceda5ad":"markdown"},"source":{"21af1d57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n\n# Any results you write to the current directory are saved as output.","a8b9e6be":"data=pd.read_csv('..\/input\/world-happiness\/2019.csv')","b8711799":"data.info()","5cc8daf4":"data.head(10)","5472db0c":"data.tail(10)","293e8c1e":"data.corr()","cc2c8cbe":"#Correlation Map\nf,ax = plt.subplots(figsize=(14,14))\nsns.heatmap(data.corr(), annot =True , linewidth=.5, fmt='.2f',ax=ax)\nplt.show()","8c50c6e6":"data.columns","98e2f4f0":"# Line Plot\ndata.rename(columns={\"GDP per capita\":\"GDPPerCapita\",\"Healthy life expectancy\":\"HealthyLifeExpectancy\",\"Social support\":\"SocialSupport\"},inplace=True)\n\ndata.GDPPerCapita.plot(kind = 'line', color = 'blue',label = 'GDPPerCapita',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.SocialSupport.plot(color = 'purple',label = 'SocialSupport',linewidth=1, alpha = 0.8,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel=('x axis')              # label = name of label\nplt.ylabel=('y axis')\nplt.title=('Line Plot')            # title = title of plot\nplt.show()\n","dc217be4":"# Scatter Plot\ndata.plot(kind='scatter',x='GDPPerCapita', y='HealthyLifeExpectancy',alpha=0.5,color='blue',title='Scatter Plot')\nplt.xlabel=('GDP per capita')\nplt.ylabel=('Healthy life expectancy')\n","bc84431b":"#Histogram Plot\ndata.GDPPerCapita.plot(kind='hist', bins=45,figsize=(15,15),title='GDP per capita Histogram Plot')\nplt.show()","b9a2313e":"#Comparison Operator\nprint (3<2)\nprint (3!=5)\nprint (3==3)\nprint (5>4)\nprint (3<=1)\nprint (9>=6)\n\n#Boolean Operator\nprint (True and False)\nprint (True and True)\nprint (True or False)\nprint (True or True)\nprint (False or False)","b9a8ee7a":"# Filtering Pandas Data Frame\na = data['Score']>7.000     # There are only 16 Country or region who have higher Score value than 7.000\ndata[a]","7be79f59":"data['Score']>7.000","89b1bd1c":"# Filtering pandas with logical_and\n# There are only 3 Country or region who have higher Score value than 7.000 and higher SocialSupport value than 1.580\ndata[np.logical_and(data['Score']>7.000, data['SocialSupport']>1.580)]","21ddd38e":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Score']>7.000) & (data['SocialSupport']>1.580)]","31ffbe0f":"# Stay in loop if condition( i is not equal 7) is true\ni = 0\nwhile i !=7:\n    print(\"i is : \",i)\n    i+=1\nprint(i,\" is equal to 7\")","e4d9024a":"# Stay in loop if condition( i is not equal 9) is true\nlis = [11,24,38,49,52,66,78,81,93]\nfor i in lis:\n    print(\"i is: \",i)\nprint(\"\")\n","5a9ade2d":"# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8, 8:9\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint(\"\")\n","f47e77dc":"# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'Turkey':'Ankara', 'Uganda':'Kampala','Somalia':'Mogadishu','Romania':'Bucharest'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint(\"\")\n","6658cc6f":"# For pandas we can achieve index and value\nfor index,values in data [['Country or region']][0:2].iterrows():\n    print(index,\" : \",values)","9d26bfb6":"# example of what we learn above\ndef tuple_example1():\n    x=(1,2,3,4)\n    return x\na,b,c,d=tuple_example1() #eleman say\u0131s\u0131 kadar de\u011fere atama yapmak zorunday\u0131z.\nprint(a,b,c,d)\n    ","d13f1af5":"# example of what we learn above\ndef tuple_example2():\n    a=(54,98,82,46,73,37)\n    return a\na,b,c,d,e,f = tuple_example2()\nprint(a,b,c,d,e,f)","13da1d5e":"# example of what we learn above\ndef tuple_example3():\n    notlar=(65,98,7,45,25,14)\n    return notlar\na,b,c,d,e,f = tuple_example3()\nprint(a,b) # De\u011ferlerin hepsini yazd\u0131rmak zorunda de\u011fliz. Sadece istedi\u011fimiz de\u011fereri yazd\u0131rma \u015fans\u0131m\u0131z var.","b4179e19":"# example of what we learn above\ndef tuple_example4():\n    sayilar =(11,12,13)\n    return sayilar\na,_,_= tuple_example4()  #e\u011fer 3 say\u0131ya da atama yapmak istemiyor isek di\u011ferlerinin yerine alt cizgi koyabiliriz. Ba\u015fka yerlerde g\u00f6r\u00fcr iseniz \u015fa\u015f\u0131rmay\u0131n..\nprint(a)","7dc430b1":"# guess print what\ndegisken = 1\ndef fonksiyon():\n    degisken = 5\n    return degisken\nprint(degisken) # degisken = 1 global scope\nprint(fonksiyon()) # degisken = 5 local scope\n","8b7a07fb":"# What if there is no local scope\ndegisken = 6\ndef fonksiyon():\n    sonuc = degisken * 5  # there is no local scope degisken\n    return sonuc\nprint(fonksiyon())  # it uses global scope degisken\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","91a9dda0":"# Example2\nx = 5\ndef islem():\n    sonuclar = x + 9\n    return sonuclar\nprint(islem())","03331ae1":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","9caea306":"#nested function\ndef fonksiyon():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        a = 4\n        b = 5\n        sonuc= a + b\n        return sonuc\n    \n    return add()**2\n\nprint(fonksiyon())\n","20ec8393":"# default arguments\ndef elemanlar(x,y=5,z=3):\n    sonuc= x + y + z\n    return sonuc\nprint(elemanlar(9))\n# what if we want to change default arguments\nprint(elemanlar(4,5,6))\n","2ba73411":"### Flexible Arguments *args\ndef fonksiyon(*args):\n    for i in args:\n        print(i)\nfonksiyon(2)\n\nprint(\"----------------------\")\n\n# Flexible arguments *args example 2\ndef fonksiyon2(*args):\n    for i in args:\n        print (i)\nfonksiyon2(1,2,3,4,5,6)\n","65c66e57":"# Flexible arguments **kwargs that is dictionary \ndef fonksiyon(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key,value in kwargs.items():   # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key,\" : \",value)\nfonksiyon(country = 'Turkey',capital = 'Ankara')\nfonksiyon(country = 'England', capital = 'France')\n        \n        ","a31132b6":"# Lambda function\nhesapla = lambda x: x**2\nprint(hesapla(5))\n\nprint(\"---------------\")\n\nhesapla2 = lambda a,b,c : a + b + c\nprint(hesapla2(4,5,6))","684639b9":"numara_listesi = [15,20,25,30,35]\nfonksiyon = map(lambda x:x**2,numara_listesi)\nprint(list(fonksiyon))","321cb739":"# iteration example\nisim = \"HELLO\"\nhecele = iter(isim)\nprint(next(hecele))\nprint(\"-----\")\nprint(*hecele)\nprint(\"-----\")\n\n# iteration example2\nisim2 = \"THATS ALL :D\"\nhecele2 = iter(isim2)\nprint(*hecele2)","96b58e55":"# zip example\nliste1 = [1,2,3,4,5,6]\nliste2 = [10,11,12,13,14,15]\nzipli_liste = zip(liste1,liste2)\nprint(zipli_liste)\nzipi_cevir = list(zipli_liste)\nprint(zipi_cevir)","367999af":"# unzip example\nzipi_kald\u0131r = zip(*zipi_cevir)\nzipli_liste1,zipli_liste2 = list(zipi_kald\u0131r)  # unzip returns tuble\nprint(zipli_liste1)\nprint(zipli_liste2)\nprint(type(zipli_liste1))\nprint(type(list(zipli_liste1)))\nprint(type(list(zipli_liste2)))","d6f1bf5f":"# Example of list comprehension\nliste1 = [1,2,3,4]\nliste2 = [i+1 for i in liste1]\nprint (liste2)\nprint(\"-------------------------------\")\nd\u00f6ng\u00fc_listesi = [2,3,4,5,6,7,8,9]\nislem_listesi = [i+5\/2 for i in d\u00f6ng\u00fc_listesi]\nprint (islem_listesi)","026cde8b":"# Conditionals on iterable\nliste1 = [5,10,15,6,8,4,9]\nliste2 = [i**2 if i==10 else i-5 if i<7 else i+7 for i in liste1]\nprint(liste2)","2d9985de":"data = pd.read_csv('..\/input\/world-happiness\/2019.csv')\ndata.head(10)  # head shows first 10 rows","b4be1499":"data.tail(3)","6c215508":"# columns gives column names of features\ndata.columns","7c03b10c":"# shape gives number of rows and columns in a tuble\ndata.shape","cdf87571":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","e2f91343":"# For example lets look frequency of happy types\nprint(data[\"Country or region\"].value_counts(dropna=False))  #example 1\nprint(data[\"GDP per capita\"].value_counts(dropna = False))  # example 2\nprint(data[\"Healthy life expectancy\"].value_counts(dropna = False)) # example 3","40c11ea2":"# For example max HP is 255 or min defense is 5\ndata.describe()","c1b3e14a":"data.Score.describe()","4021595d":"data[\"GDP per capita\"].describe()","b0a16dc1":"data.info()","67794330":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Healthy life expectancy',by='Social support')\nplt.show()","c5c17e0a":"# Firstly I create new data from pokemons data to explain melt nore easily.\nnew_data = data.head(6)\nnew_data","12b148a2":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted= pd.melt(frame=new_data,id_vars='Country or region',value_vars=['Score','Healthy life expectancy'])\nmelted\n","3e19350e":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index='Country or region',columns='variable',values='value')","8ff41d20":"# Firstly lets create 2 data frame\ndata1 = data.head(3)\ndata2 = data.tail(3)\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True) # # axis = 0 : adds dataframes in row\nconc_data_row\n\n# data_birlestir = pd.concat([data1,data2],axis=1,ignore_index=True)\n# data_birlestir\n\n\n","024bc057":"data1=data['Score'].head()\ndata2=data['Healthy life expectancy'].head()\ndata_concat=pd.concat([data1,data2],axis=0)\ndata_concat\n","012ae694":"data.dtypes","23bbd9c8":"# lets convert object(str) to categorical and int to float.\ndata['Country or region'] = data['Country or region'].astype('category')\ndata['GDP per capita'] = data['GDP per capita'].astype('object')","bce8c7b6":"# As you can see Country or region is converted from object to categorical\n# And GDP per capita ,s converted from int to object\ndata.dtypes","e07be244":"data.info()","e1b232ee":"# Lets chech Type 2\ndata['Country or region'].value_counts(dropna=False)","2dc3a3d8":"data['Generosity'].value_counts(dropna=False)","24cc3714":"data['Perceptions of corruption'].value_counts(dropna=False)","226c7bc9":"data['Social support'].value_counts(dropna=False)","cd0c14f7":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","f16a32ee":"# assert 25==100  ----> false\nassert 25==25   # -----> True","e65e4237":"assert data['Social support'].notnull().all()   # returns nothing because we drop nan values","8f9f7cd6":"assert data ['Perceptions of corruption'].notnull().all()","7f2fc964":"data['Perceptions of corruption'].fillna('empty',inplace=True)","b41a769d":"assert data ['Perceptions of corruption'].notnull().all()  # returns nothing because we do not have nan values","fd760b25":"data.head(10)","1f9589a9":"# assert data.columns[1]=='Country or region'\n# assert data.columns[0]=='Overall rank'\n# assert data.columns[2]=='Score'\n# assert data.columns[3]=='GDP per capita'\n# assert data.columns[4]=='Social support'\n# assert data.columns[5]=='Healthy life expectancy'\n# assert data.columns[6]=='Freedom to make life choices'\n","69f08d41":"# data frames from dictionary\ncountry = [\"\u0130spanya\",\"Fransa\",\"T\u00fcrkiye\",\"Somali\",\"Afrika\"]\npopulation = [\"11\",\"12\",\"10\",\"15\",\"11\"]\nlist_label = [\"country\",\"population\"]\nlist_column = [country,population]\nzipped = list(zip(list_label,list_column))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","402341ad":"# Add new columns\ndf[\"capital\"]=[\"madrid\",\"paris\",\"ankara\",\"mogadi\u015fu\",\"cape Town\"]\ndf","6a7a8974":"# Broadcasting\ndf[\"income\"]=0         #Broadcasting entire column\ndf\n","f54ec152":"data.head()","4c37f6a4":"data.info()","90c673d6":"# Plotting all data \ndata1 = data.loc[:,[\"Score\",\"Social support\",\"Freedom to make life choices\"]]\ndata1.plot()\nplt.show()","3cde07d4":"# subplots\ndata1.plot(subplots = True)\nplt.show()","75a8474a":"# scatter plot\ndata1.plot(kind=\"scatter\",x = \"Social support\",y=\"Freedom to make life choices\")\nplt.show()","3de877d4":"# hist plot\ndata1.plot(kind=\"hist\",y=\"Social support\",bins=15,range=(0,1),normed=True)\nplt.show()","69fd6eaa":"# histogram subplot with non cumulative and cumulative\nfig,axes=plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind=\"hist\" , y=\"Social support\" , bins=20 , range=(0,1) , normed=True , ax=axes [0])\ndata1.plot(kind=\"hist\" , y=\"Social support\" , bins=20 , range=(0,1) , normed=True , ax=axes[1], cumulative=True)\nplt.savefig('graph.png')\nplt\nplt.show()","7d6a7581":"data.describe()","6ee999e8":"time_list=[\"2020-01-02\",\"2020-01-03\",\"2020-01-04\"]\nprint(type(time_list[1]))       # As you can see date is string\n# however we want it to be datetime object\ndate_time_object=pd.to_datetime(time_list)\nprint(type(date_time_object))","6c051163":"# In order to practice lets take head of happy data and add it a time list\ndata2=data.head()\ndate_list=[\"2020-01-01\",\"2020-01-02\",\"2020-01-03\",\"2020-01-04\",\"2020-01-05\"]\ndate_object=pd.to_datetime(date_list)\ndata2[\"date\"] = date_object\n# lets make date as index\ndata2=data2.set_index(\"date\")\ndata2","a57d3317":"# Now we can select according to our date index\nprint(data2.loc[\"2020-01-05\"])\nprint(data2.loc[\"2020-01-01\":\"2020-01-05\"])\n","bb943810":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","8e7669b8":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","adace79f":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","8cc68d84":"data=pd.read_csv('..\/input\/world-happiness\/2019.csv')\n","5f46dd27":"data.head()","86accd07":"data.info()","2f9def54":"data.index.names=['#']\ndata.head()","1f167f85":"# indexing using square brackets\nprint(data[\"Country or region\"][1])\nprint(data[\"Country or region\"][23])","ab1701ea":"# using column attribute and row label\ndata.Score[1]","9f05a5cb":"# using loc accessor\ndata.loc[1,[\"Score\"]]","4bf2734e":"# Selecting only some columns\ndata[[\"Score\",\"GDP per capita\"]]","9e5918fc":"**4. PANDAS FOUNDATION**\n<br>","f9c897a5":"**STATISTICAL EXPLORATORY DATA ANALYSIS**\n> I already explained it at previous parts. However lets look at one more time.\n   * count: number of entries\n   * mean: average of entries\n   * std: standart deviation\n   * min: minimum entry\n   * 25%: first quantile\n   * 50%: median or second quantile\n   * 75%: third quantile\n   * max: maximum entry","86f336e4":"Lets make some basic example2","83555255":"**PIVOTING DATA**\n> <br>Reverse of melting.","598d6de5":"Lets make some basic example3","811024dd":"> **BUILDING DATA FRAMES FROM SCRATCH**<br>\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries \n  * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","b672c66d":"**DATA HAKKINDA GENEL B\u0130R B\u0130LG\u0130YE SAH\u0130P OLMAK**\n* Datam\u0131z ile ilgili \u00f6nizleme yapmak, genel bir bilgi edinmek i\u00e7in \n> data.info()  ->  komutu kullan\u0131labilir.\n\n","24578ef2":"**ANONYMOUS FUNCT\u0130ON**<br><br>\n> Like lambda function but it can take more than one arguments.<br>\n* map(func,seq) : applies a function to all the items in a list\n","35f8d4a1":"**DEFAULT and FLEXIBLE ARGUMENTS**<br><br>\n* Default argument example:<br>\n   def f(a, b=1):<br><br>\n> \"\"\" b = 1 is default argument\"\"\"  <br><br>\n* Flexible argument example:<br><br>\n>   def f(*args):<br><br>\n>   \"\"\" *args can be one or more\"\"\" <br><br>\n>    def f(** kwargs)<br><br>\n\"\"\" **kwargs is a dictionary\"\"\"","02c75ef0":"**DIAGNOSE DATA for CLEANING**<br>\n> We need to diagnose and clean data before exploring.<br>\nUnclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language<br><br>\n> We will use head, tail, columns, shape and info methods to diagnose data","6e6564c8":"**1)DATAYI IMPORT ETMEK**\n* Burada data ad\u0131nda bir de\u011fi\u015fken tan\u0131mlay\u0131p pandas k\u00fct\u00fcphanesinin read_csv komutu ile datam\u0131z\u0131 import ediyoruz.\n* Bundan sonra bu veri seti ile bir i\u015flem yapmak istedi\u011fimizde data de\u011fi\u015fkenini kullanarak csv dosyam\u0131za eri\u015fece\u011fiz","cea854a3":"> **SLICING DATA FRAME**<br>\n* Difference between selecting columns\n   * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end   ","c10d8177":"**CONCATENATING DATA**\n> <br> We can concatenate two dataframe ","9889b99c":"**ITERATORS**\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method<br>\n> example: list, strings and dictionaries\n* iterator: produces next value with next() method","3c9b3bda":"* Comparison operator : A comparison operator in python, also called python relational operator, compares the values of two operands, and returns True or False based on whether the condition is met.\n* Boolean Operator : A boolean expression (or logical expression) evaluates to one of two states true or false. Python provides the boolean type that can be either set to False or True. Many functions and operations returns boolean objects.\n* Series : A Series is a one-dimensional object that can hold any data type such as integers, floats and strings.\n* DataFrame : A DataFrame is a two dimensional object that can have columns with potential different types. Different kind of inputs include dictionaries, lists, series, and even another DataFrame.It is the most commonly used pandas object.","3baebb4d":"> In this part, you learn:\n* Diagnose data for cleaning\n* Exploratory data analysis\n* Visual exploratory data analysis\n* Tidy data\n* Pivoting data\n* Concatenating data\n* Data types\n* Missing data and testing with assert\n\n","9e71cd80":"Lets make some basic example","f8d1dc18":"**REV\u0130EW of PANDAS**<br>\n> As you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy<br>","3303abb0":"**In this part, you learn:**\n\n* how to import csv file\n* plotting line,scatter and histogram\n* basic dictionary features\n* basic pandas features like filtering that is actually something always used and main for being data scientist\n* While and for loops","41173259":"**SCOPE**<br>\nWhat we need to know about scope:<br>\n* Global: defined main body in script\n* Local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n","b3aae7dc":"> lets write some code to practice","56ee3e3d":"**3) PANDAS**","41368210":"**DATA TYPES**\n<br>\n> There are 5 basic data types: object(string),booleab, integer, float and categorical.\nWe can make conversion data types like from str to categorical or from int to float\nWhy is category important:<br>\n* make dataframe smaller in memory\n* can be utilized for anlaysis especially for sklear(we will learn later)","ce1fba3d":"> **VISUAL EXPLORATORY DATA ANALYSIS**<br>\n* Plot\n* Subplot\n* Histogram:\n  * bins: number of bins\n  * range(tuble): min and max values of bins\n  * normed(boolean): normalize or not\n  * cumulative(boolean): compute cumulative distribution","ae3c932f":"**zip(): zip lists**","dd0a8c4f":"**VER\u0130N\u0130N SON DE\u011eER\u0130NE BAKMAK**\n* E\u011fer elimizdeki datan\u0131n son de\u011ferine bakmak istiyor isek\n> data.tail()  ->  komutundan faydalan\u0131yoruz.\n* data.tail() yazd\u0131\u011f\u0131m\u0131z zaman bize dafeault olarak son 5 de\u011feri getirecektir. E\u011fer biz \u00f6rnek olarak 10 de\u011fer istiyor isek, parantez i\u00e7ine 10 yazmam\u0131z gerekecektir.\n> data.tail(10)  -> komutundan faydalan\u0131yoruz.","99624445":"Lets make some basic example1","b0cc9576":"**INDEXING PANDAS TIME SERIES**<br>\n* > datetime = object\n* >  parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","c5714886":"> **What is quantile?**\n<br>\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in middle of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","d31387cb":"** LAMBDA FUNCTION ** <br><br>\n> Faster way of writing function","c3523cd5":"**4) WHILE and FOR LOOPS**  <br>\n> We will learn most basic while and for loops\n","63315113":"**VER\u0130N\u0130N \u0130LK \u00d6N\u0130ZLEMES\u0130N\u0130 YAPMAK**\n* Veri hakk\u0131nda bilgi sahibi olmak i\u00e7in, (tercih olarak) veri setimizin ilk 10 de\u011ferini g\u00f6rmek istiyorum.\n> Bunun i\u00e7in data.head  -> komutunu kullanaca\u011f\u0131z.\n* Fakat data.head dedi\u011fimiz zaman bize ilk 5 de\u011feri getirecektir. Biz ise ilk 10 de\u011feri istiyoruz.\n> Bunun i\u00e7in data.head(10) -> komutunu kullanaca\u011f\u0131z.\n* \u0130lk ka\u00e7 de\u011feri g\u00f6stermek istiyor isek, bunun say\u0131s\u0131n\u0131 parantez i\u00e7indeki b\u00f6l\u00fcme girebiliriz.\n> \u00d6rnek olarak data.head(7) -> komutunu kullanabiliriz.","aa2146b8":"### **MANIPULATING DATA FRAMES WITH PANDAS**<br>\n> * Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","4c78795b":"**VISUAL EXPLORATORY DATA ANALYSIS**\n<br>\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","1549212c":"**2) MATPLOTLIB** <br>\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.\n\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle","44c8be26":" **DATA KOLONLARINI (S\u00dcTUNLARINI) G\u00d6RMEK**  <br>\nData s\u00fctunlar\u0131n\u0131 g\u00f6rmek i\u00e7in \n> data.columns  -> komutu kullan\u0131l\u0131r.","71f38642":"**3.CLEANING DATA**","50fc190f":"**MISSING DATA and TESTING WITH ASSERT**\n<br>\n> If we encounter with missing data, what we can do:\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n<br>\nAssert statement: check that you can turn on or turn off when you are done with your testing of the program","3be35e55":"**NESTED FUNCTION**<br>\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","95d2f164":"**EXPLORATORY DATA ANALYSIS**","a122482c":"> **RESAMPLING PANDAS TIME SERIES**<br>\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019\n","65d5aa29":"> value_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1.\n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n* We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","e75be05d":"**LIST COMPREHENS\u0130ON**<br>\n<strong>**One of the most important topic of this kernel**<br><\/strong>\n> We use list comprehension for data analysis often.<br>\n> list comprehension: collapse for loops for building lists into a single line<br>\n> Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long.<br>\n> We can make it one line code that is list comprehension.\n","2d45a9aa":"**USER DEFINED FUNCTION**<br>\n> What we need to know about functions <br>\n* docstrings: documentation for functions. Example: <br>\n for f(): <br>\n \"\"\"This is docstring for documentation of function f\"\"\" <br>\n* tuble: sequence of immutable python objects.<br>\ncant modify values <br>\ntuble uses paranthesis like tuble = (1,2,3) <br>\nunpack tuble into several variables like a,b,c = tuble\n","dfe9bb4f":"Lets make some basic example4","1ceda5ad":"**TIDY DATA**\n<br>\n> We tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it."}}