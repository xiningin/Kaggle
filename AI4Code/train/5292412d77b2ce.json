{"cell_type":{"f1d45ed1":"code","d9f919fe":"code","8c0cc411":"code","0e208081":"code","60a5527c":"code","b398426f":"code","40caba9f":"code","e3de093c":"code","34dc6a02":"code","dcb5acd0":"code","98672f55":"code","b6dae9e2":"code","bc204244":"code","2d8f4b43":"code","053e2bf0":"code","58294d73":"code","ad0acb85":"code","7537454d":"code","93442850":"code","6d015e7f":"markdown","fbe8c81a":"markdown","3c4e200e":"markdown","20093187":"markdown","c699c1bb":"markdown","1523e53b":"markdown","321f2b8e":"markdown"},"source":{"f1d45ed1":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","d9f919fe":"import pandas as pd","8c0cc411":"X_train.shape, X_test.shape, y_train.shape, y_test.shape #","0e208081":"pd.set_option(\"display.max_columns\", 100)\ndisplay(X_train.head(3))\ndisplay(X_test.head(3))","60a5527c":"print(y_train['SalePrice'].hist())","b398426f":"y_test['SalePrice'].hist()","40caba9f":"#X_train.isnull().sum().sort_values(ascending=False)[:20] #\ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uacb0\uce21\uac12 20\uac1c\uc815\ub82c\nX_train.isnull().sum().sort_values(ascending=False).head(20)","e3de093c":"X_test.isnull().sum().sort_values(ascending=False)[:20] #\ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uacb0\uce21\uac12 20\uac1c\uc815\ub82c","34dc6a02":"X_train.info()","dcb5acd0":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","98672f55":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)","b6dae9e2":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","bc204244":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)","2d8f4b43":"from sklearn.metrics import mean_squared_error\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\nprint(\"rmsle : \" + str(rmsle(y_val, pred)))","053e2bf0":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"rmsle : \" + str(rmsle(y_val, pred)))","58294d73":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor(n_estimators=200, max_depth=4, colsample_bytree=0.9)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"rmsle : \" + str(rmsle(y_val, pred)))","ad0acb85":"pred = model.predict(X_test)\noutput = pd.DataFrame({'Id': y_test['Id'], 'SalePrice': pred})\noutput.head()","7537454d":"output.to_csv(\"003001881.csv\", index=False)","93442850":"pred = model.predict(X_test)\nprint(\"rmsle : \" + str(rmsle(y_test['SalePrice'], pred)))","6d015e7f":"# \uacb0\uacfc \uccb4\uc810","fbe8c81a":"## Simple Tuning","3c4e200e":"# Model","20093187":"# Data Load & Simple EDA","c699c1bb":"# Simple Preprocessing","1523e53b":"# Predict & to CSV","321f2b8e":"# Preprocessing"}}