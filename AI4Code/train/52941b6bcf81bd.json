{"cell_type":{"bcf2f6c1":"code","5b1c2782":"code","265ad921":"code","6e35de9e":"code","331b67e7":"code","db2618d8":"code","b3e2bbc5":"code","d78f8271":"code","3c7a1ec6":"code","7e7ccd50":"code","67c1e011":"code","9b315b6e":"code","b0494f01":"code","721251da":"code","aaa15cb7":"code","53fc9b94":"code","2cbf1264":"code","7d4a36ac":"code","3487fa0a":"code","fd14c71a":"code","35d1bcdc":"code","02b0a862":"code","5be29381":"code","77ddb1c4":"code","eceb0e6b":"code","becdace2":"code","820c9d34":"code","6e3c280a":"code","10dd9145":"markdown","04fa2786":"markdown","c283200c":"markdown","b86fcc0c":"markdown","25ce2ea8":"markdown"},"source":{"bcf2f6c1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom  xgboost import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","5b1c2782":"df = pd.read_csv('..\/input\/thyroid-disease-data-set\/hypothyroid.csv')\ndf","265ad921":"df.dtypes","6e35de9e":"df.duplicated().sum()","331b67e7":"df.drop_duplicates(keep = False, inplace = True)","db2618d8":"df=df.replace({\"?\":np.NAN})","b3e2bbc5":"df.isnull().sum()","d78f8271":"df.shape","3c7a1ec6":"del df[\"TBG\"]","7e7ccd50":"df=df.replace({\"t\":1,\"f\":0})","67c1e011":"df[\"binaryClass\"].value_counts()","9b315b6e":"df[\"binaryClass\"] = df[\"binaryClass\"].replace({\"P\":1,\"N\":0})","b0494f01":"df = pd.get_dummies(df, columns=['referral source'])","721251da":"df","aaa15cb7":"df[\"sex\"].value_counts()","53fc9b94":"df['sex']=df['sex'].replace({\"F\":1,\"M\":0})","2cbf1264":"df.dtypes","7d4a36ac":"df[\"age\"].value_counts()","3487fa0a":"cols = df.columns[df.dtypes.eq('object')]\ndf[cols] = df[cols].apply(pd.to_numeric, errors='coerce')\ndf.dtypes","fd14c71a":"df.isna().sum()","35d1bcdc":"df.dropna(axis = 0, thresh = 20, inplace = True)\ndf.isna().sum()","02b0a862":"#Building heatmap to checking correlations\nsns.heatmap(round(df.corr(), 1),annot=True,cmap='viridis')\nsns.set(rc={'figure.figsize':(20,20)})\nplt.title('Heatmap of co-relation',fontsize=15)\nplt.show()","5be29381":"df = df.interpolate(method = 'spline', order = 3)\ndf.isna().sum()","77ddb1c4":"X_train, X_test, y_train, y_test = train_test_split(df.drop(columns = 'binaryClass'), df['binaryClass'], test_size=0.30, random_state=42) ","eceb0e6b":"model = XGBClassifier(learning_rate=0.01).fit(X_train, y_train)\ny_pred = model.predict(X_test)","becdace2":"plt.rcParams[\"figure.figsize\"] = (6,3)\nax = plt.axes()\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap=\"Blues\")\nplt.show()","820c9d34":"pr, rc, fs, sup = metrics.precision_recall_fscore_support(y_test, y_pred, average='macro')\nres = {\"Accuracy\": round(metrics.accuracy_score(y_test, y_pred), 4),\n                              \"Precision\": round(pr, 4), \"Recall\":round(rc, 4), \"FScore\":round(fs, 4)}\nres","6e3c280a":"y_prob = model.predict_proba(X_test)\nns_probs = [0 for _ in range(len(y_test))]\n# keep probabilities for the positive outcome only\ny_prob = y_prob[:, 1]\n# calculate scores\nns_auc = roc_auc_score(y_test, ns_probs)\nlr_auc = roc_auc_score(y_test, y_prob)\n# summarize scores\nprint('No Skill: ROC AUC=%.3f' % (ns_auc))\nprint('XGBClassifier: ROC AUC=%.3f' % (lr_auc))\n# calculate roc curves\nns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\nlr_fpr, lr_tpr, _ = roc_curve(y_test, y_prob)\n# plot the roc curve for the model\nplt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\nplt.plot(lr_fpr, lr_tpr, marker='.', label='XGBClassifier')\n# axis labels\nplt.rcParams[\"figure.figsize\"] = (16,9)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# show the legend\nplt.legend()\n# show the plot\nplt.show()","10dd9145":"# ROC AUC","04fa2786":"# Confusion matrix","c283200c":"# Model definition","b86fcc0c":"# Metrics","25ce2ea8":"# EDA"}}