{"cell_type":{"d5968d03":"code","0b02164d":"code","28721af4":"code","2c0777bb":"code","8d10b24f":"code","0a75466f":"code","72607563":"code","273fa793":"code","7829ccc7":"code","9d0b7e4d":"code","25c628c6":"code","9f9c59dc":"code","500e89d7":"code","836c3430":"code","9f91327c":"code","03c247d4":"code","f7be7d92":"code","7cfe8891":"code","3323e448":"code","9fb03517":"code","137cb87b":"code","2ef07bbb":"code","192dc449":"code","2c79a445":"code","c13655b2":"code","0764ac4b":"code","fe83663f":"code","4cd6fe74":"code","68c4862d":"code","d7ec95ab":"markdown","a5876467":"markdown","fb1f28f9":"markdown","2ecfd498":"markdown"},"source":{"d5968d03":"%cd ..\/\n!mkdir \/kaggle\/tmp\n!mkdir \/kaggle\/tmp\/mask\n!mkdir \/kaggle\/tmp\/train\n!mkdir \/kaggle\/tmp\/test\n%cd tmp","0b02164d":"!tar -zxf \/kaggle\/input\/siiim-covid-stratified-k-fold-and-create-mask\/mask.tar.gz -C \/kaggle\/tmp\/mask\n!tar -zxf \/kaggle\/input\/siiim-covid-stratified-k-fold-and-create-mask\/train.tar.gz -C \/kaggle\/tmp\/train\n!tar -zxf \/kaggle\/input\/siiim-covid-stratified-k-fold-and-create-mask\/test.tar.gz -C \/kaggle\/tmp\/test","28721af4":"# Download YOLOv5\n!git clone https:\/\/github.com\/ultralytics\/yolov5  # clone repo\n%cd yolov5\n# Install dependencies\n%pip install -qr requirements.txt  # install dependencies","2c0777bb":"%cd ..\/","8d10b24f":"# Install W&B \n#!pip install -q --upgrade wandb\n# Login \n#import wandb\n#wandb.login()","0a75466f":"import torch\nimport os\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom shutil import copyfile\nimport matplotlib.pyplot as plt\n\nimport csv","72607563":"study_df = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv\")\nimage_df = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_image_level.csv\")\nmeta_df = pd.read_csv(\"\/kaggle\/input\/siiim-covid-stratified-k-fold-and-create-mask\/meta.csv\")\nfold_df = pd.read_csv(\"\/kaggle\/input\/siiim-covid-stratified-k-fold-and-create-mask\/updated_iamge_level.csv\")","273fa793":"_duplicateList_path = '\/kaggle\/input\/siiim-covid-stratified-k-fold-and-create-mask\/dublicate.txt'","7829ccc7":"_duplicateList = []\nwith open(_duplicateList_path, newline='') as csvfile:\n    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n    for row in spamreader:\n        _duplicateList += row\n\n_duplicateList[:5]","9d0b7e4d":"TRAIN_PATH = '\/kaggle\/tmp\/train\/'\nIMG_SIZE = 512\nBATCH_SIZE = 24\nEPOCHS = 30","25c628c6":"# Modify values in the id column\ndf = fold_df.copy()\n\ndf['id'] = df.apply(lambda row: row.id.split('_')[0], axis=1)\n# Add absolute path\ndf['path'] = df.apply(lambda row: TRAIN_PATH+row.id+'.png', axis=1)\n# Get image level labels\ndf['image_level'] = df.apply(lambda row: row.label.split(' ')[0], axis=1)\n\ndf.head(5)","9f9c59dc":"meta_df.head()","500e89d7":"df = df.merge(meta_df, left_on='id', right_on=\"image_id\")\ndf.head(2)","836c3430":"print(\"before drop duplicate\", len(df))\ndf = df[~df['id'].isin(_duplicateList)]\nprint(\"after drop duplicate\", len(df))","9f91327c":"os.makedirs('tmp\/covid\/images\/train', exist_ok=True)\nos.makedirs('tmp\/covid\/images\/valid', exist_ok=True)\n\nos.makedirs('tmp\/covid\/labels\/train', exist_ok=True)\nos.makedirs('tmp\/covid\/labels\/valid', exist_ok=True)","03c247d4":"df.head()","f7be7d92":"# Move the images to relevant split folder.\n# 5 fold\nfor _fold in range(5):\n    os.makedirs(f'\/kaggle\/tmp\/covid\/images\/train\/fold{_fold}', exist_ok=True)\n    os.makedirs(f'\/kaggle\/tmp\/covid\/images\/valid\/fold{_fold}', exist_ok=True)\n\n    for i in tqdm(range(len(df))):\n        row = df.iloc[i]\n        if row.fold != _fold:\n            copyfile(row.path, f'\/kaggle\/tmp\/covid\/images\/train\/fold{_fold}\/{row.id}.png')\n        else:\n            copyfile(row.path, f'\/kaggle\/tmp\/covid\/images\/valid\/fold{_fold}\/{row.id}.png')","7cfe8891":"!ls \/kaggle\/tmp\/covid\/images\/train\/fold0\/ | wc -l","3323e448":"# Get the raw bounding box by parsing the row value of the label column.\n# Ref: https:\/\/www.kaggle.com\/yujiariyasu\/plot-3positive-classes\ndef get_bbox(row):\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row.label.split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l))\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []  \n            \n    return bboxes\n\n# Scale the bounding boxes according to the size of the resized image. \ndef scale_bbox(row, bboxes):\n    # Get scaling factor\n    scale_x = IMG_SIZE\/row.dim1\n    scale_y = IMG_SIZE\/row.dim0\n    \n    scaled_bboxes = []\n    for bbox in bboxes:\n        x = int(np.round(bbox[0]*scale_x, 4))\n        y = int(np.round(bbox[1]*scale_y, 4))\n        x1 = int(np.round(bbox[2]*(scale_x), 4))\n        y1= int(np.round(bbox[3]*scale_y, 4))\n\n        scaled_bboxes.append([x, y, x1, y1]) # xmin, ymin, xmax, ymax\n        \n    return scaled_bboxes\n\n# Convert the bounding boxes in YOLO format.\ndef get_yolo_format_bbox(img_w, img_h, bboxes):\n    yolo_boxes = []\n    for bbox in bboxes:\n        w = bbox[2] - bbox[0] # xmax - xmin\n        h = bbox[3] - bbox[1] # ymax - ymin\n        xc = bbox[0] + int(np.round(w\/2)) # xmin + width\/2\n        yc = bbox[1] + int(np.round(h\/2)) # ymin + height\/2\n        \n        yolo_boxes.append([xc\/img_w, yc\/img_h, w\/img_w, h\/img_h]) # x_center y_center width height\n    \n    return yolo_boxes","9fb03517":"# Prepare the txt files for bounding box\nfor _fold in range(5):\n    os.makedirs(f'\/kaggle\/tmp\/covid\/labels\/train\/fold{_fold}', exist_ok=True)\n    os.makedirs(f'\/kaggle\/tmp\/covid\/labels\/valid\/fold{_fold}', exist_ok=True)\n    \n    for i in tqdm(range(len(df))):\n        row = df.iloc[i]\n        # Get image id\n        img_id = row.id\n        # Get split\n        split = row.split\n        # Get image-level label\n        label = row.image_level\n\n        if row.fold != _fold:\n            file_name = f'\/kaggle\/tmp\/covid\/labels\/train\/fold{_fold}\/{row.id}.txt'\n        else:\n            file_name = f'\/kaggle\/tmp\/covid\/labels\/valid\/fold{_fold}\/{row.id}.txt'\n        \n        if label=='opacity':\n            # Get bboxes\n            bboxes = get_bbox(row)\n            # Scale bounding boxes\n            scale_bboxes = scale_bbox(row, bboxes)\n            # Format for YOLOv5\n            yolo_bboxes = get_yolo_format_bbox(IMG_SIZE, IMG_SIZE, scale_bboxes)\n\n            with open(file_name, 'w') as f:\n                for bbox in yolo_bboxes:\n                    bbox = [1]+bbox\n                    bbox = [str(i) for i in bbox]\n                    bbox = ' '.join(bbox)\n                    f.write(bbox)\n                    f.write('\\n')","137cb87b":"!cat \/kaggle\/tmp\/covid\/labels\/valid\/fold0\/0012ff7358bc.txt","2ef07bbb":"!ls \/kaggle\/tmp\/covid\/labels\/valid\/fold1 | wc -l","192dc449":"%cd yolov5","2c79a445":"# Create .yaml file \nimport yaml\nfor _fold in range(5):\n    data_yaml = dict(\n        train = f'..\/covid\/images\/train\/fold{_fold}',\n        val = f'..\/covid\/images\/valid\/fold{_fold}',\n        nc = 2,\n        names = ['none', 'opacity']\n    )\n\n    # Note that I am creating the file in the yolov5\/data\/ directory.\n    with open(f'data\/data-fold{_fold}.yaml', 'w') as outfile:\n        yaml.dump(data_yaml, outfile, default_flow_style=True)\n    \n%cat data\/data-fold0.yaml\n%cat data\/data-fold1.yaml\n%cat data\/data-fold2.yaml\n%cat data\/data-fold3.yaml\n%cat data\/data-fold4.yaml","c13655b2":"!ls \/kaggle\/tmp\/covid\/labels\/valid\/fold0 | wc -l","0764ac4b":"\"\"\"\n lr0: 0.01  # initial learning rate (SGD=1E-2, Adam=1E-3) \n lrf: 0.2  # final OneCycleLR learning rate (lr0 * lrf) \n momentum: 0.937  # SGD momentum\/Adam beta1 \n weight_decay: 0.0005  # optimizer weight decay 5e-4 \n warmup_epochs: 3.0  # warmup epochs (fractions ok) \n warmup_momentum: 0.8  # warmup initial momentum \n warmup_bias_lr: 0.1  # warmup initial bias lr \n box: 0.05  # box loss gain \n cls: 0.5  # cls loss gain \n cls_pw: 1.0  # cls BCELoss positive_weight \n obj: 1.0  # obj loss gain (scale with pixels) \n obj_pw: 1.0  # obj BCELoss positive_weight \n iou_t: 0.20  # IoU training threshold \n anchor_t: 4.0  # anchor-multiple threshold \n # anchors: 3  # anchors per output layer (0 to ignore) \n fl_gamma: 0.0  # focal loss gamma (efficientDet default gamma=1.5) \n hsv_h: 0.015  # image HSV-Hue augmentation (fraction) \n hsv_s: 0.7  # image HSV-Saturation augmentation (fraction) \n hsv_v: 0.4  # image HSV-Value augmentation (fraction) \n degrees: 0.0  # image rotation (+\/- deg) \n translate: 0.1  # image translation (+\/- fraction) \n scale: 0.5  # image scale (+\/- gain) \n shear: 0.0  # image shear (+\/- deg) \n perspective: 0.0  # image perspective (+\/- fraction), range 0-0.001 \n flipud: 0.0  # image flip up-down (probability) \n fliplr: 0.5  # image flip left-right (probability) \n mosaic: 1.0  # image mosaic (probability) \n mixup: 0.0  # image mixup (probability) \n copy_paste: 0.0  # segment copy-paste (probability) \n\"\"\"\n\nhyps_yaml = dict(\n    lr0= 0.01,\n    lrf= 0.2,\n    momentum= 0.937,\n    weight_decay= 0.0005,\n    warmup_epochs= 3.0,\n    warmup_momentum= 0.8,\n    warmup_bias_lr= 0.1,\n    box= 0.05,\n    cls= 0.5,\n    cls_pw= 1,\n    obj= 1,\n    obj_pw= 1,\n    iou_t= 0.2,\n    anchor_t= 4,\n    # anchors: 3.63,\n    fl_gamma= 0.0,\n    hsv_h= 0.015,\n    hsv_s= 0.7,\n    hsv_v= 0.4,\n    degrees= 0.3,\n    translate= 0.1,\n    scale= 0.6,\n    shear= 0.1,\n    perspective= 0.0,\n    flipud= 0,\n    fliplr= 0.5,\n    mosaic= 1,\n    mixup= 0,\n    copy_paste= 0.0\n)\n\n# Note that I am creating the file in the yolov5\/data\/ directory.\nwith open(f'data\/hyps-custom.yaml', 'w') as outfile:\n    yaml.dump(hyps_yaml, outfile, default_flow_style=True)","fe83663f":"!wandb offline","4cd6fe74":"!python train.py --img {IMG_SIZE} \\\n                 --batch {BATCH_SIZE} \\\n                 --epochs {EPOCHS} \\\n                 --data data-fold0.yaml \\\n                 --weights yolov5x.pt \\\n                 --save_period 1\\\n                 --hyp \/kaggle\/tmp\/yolov5\/data\/hyps-custom.yaml \\\n                 --project \/kaggle\/working\/kaggle-siim-covid","68c4862d":"!ls \/kaggle\/working\/kaggle-siim-covid","d7ec95ab":"# Hyperparams","a5876467":"# Split train valid and create 5fold ","fb1f28f9":"# Approach\n\n1. Drop duplicate Image  and create stratify k-fold (I shall group same patients in one fold for avoid leaky)\n2. IN VERSION 2 I just try Yolov4 with Default hyperparams I try s m l x for 10 epochs and choose yolom as the best one \n   \n   score: (0.4947 + 0.5103 + 0.4848 +0.4692 +0.5198)\/5 avg 0.49575   LB: 0.142\n\n3. IN VERSIOn 3 I just add more data augment and try yolox in 30 \n   \n   score: (0.481 + 0.488 + 0.525 + 0.525 + 0.488)\n   \n\n# Refference\n\n1. yolov5 github repo: source code, practice tips , TTA, training evolve https:\/\/github.com\/ultralytics\/yolov5\/wiki\/Tips-for-Best-Training-Results\n2. yolo hyperparams from VinBigData 15th https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/229649\n3. yolo hyperparam  from VinBigData 4th  https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/229786 \n\n# Furthur Improvments\n\n1. yolov5 p6 \n\n2. larger image size equal yolov5 default image size","2ecfd498":"# Download and Zip files \nin case kaggle dataset is slow with too much small files"}}