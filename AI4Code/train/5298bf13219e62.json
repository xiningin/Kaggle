{"cell_type":{"06a0f609":"code","74790800":"code","7603772e":"code","dac548da":"code","bd01fc29":"code","dd206a3a":"code","17ab83d4":"code","27d4f586":"code","0c985f18":"code","a2370391":"code","8a690399":"code","71a7fc30":"code","ac1aae8e":"code","4005d48b":"code","11caa9ae":"code","55d94716":"code","1f0cdedb":"code","2b5f24a3":"code","db21480a":"code","64bfdd10":"code","684c1ed8":"code","36128175":"code","71424193":"code","784225a1":"code","37ebd96d":"code","ec72e0bc":"code","eda2f59d":"code","fcef54d8":"code","f1ffd708":"code","bfb5fd46":"code","34ecaf66":"markdown","f27cc993":"markdown","f2055512":"markdown","1a0dd63a":"markdown","81fbbbe5":"markdown","68f3841b":"markdown","eb1e50c9":"markdown","b837af9b":"markdown","3209ad60":"markdown","6c500292":"markdown","2c74bedf":"markdown","5b015181":"markdown","10b4e599":"markdown","30981253":"markdown","b948275d":"markdown","16a721c4":"markdown","e4ad4385":"markdown","1f645133":"markdown","0b11c148":"markdown","f4435dc1":"markdown","dfc91cb3":"markdown","eb975deb":"markdown","2dfd71ad":"markdown","cffc5e15":"markdown","c22f296f":"markdown","75141bff":"markdown","8c3e2274":"markdown"},"source":{"06a0f609":"%matplotlib inline","74790800":"from pylab import *","7603772e":"import matplotlib\nimport matplotlib.pyplot as plt","dac548da":"import numpy as np","bd01fc29":"from pylab import *","dd206a3a":"x = np.linspace(0, 5, 10)\ny = x ** 2","17ab83d4":"figure()\nplot(x, y, 'r')\nxlabel('x')\nylabel('y')\ntitle('title')\nshow()","27d4f586":"subplot(1, 2, 1)\nplot(x, y, 'r--')\nsubplot(1, 2, 2)\nplot(y, x, 'g*-');","0c985f18":"fig = plt.figure()\n\naxes = fig.add_axes([0.1, 0.1, 0.8, 0.8])# left, bottom, width, height (range 0 to 1)\n\naxes.plot(x, y, 'r')\n\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","a2370391":"fig = plt.figure()\n\naxes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) #main axes\naxes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) #inset axes\n\n# main figure\naxes1.plot(x, y, 'r')\naxes1.set_xlabel('x')\naxes1.set_ylabel('y')\naxes1.set_title('insert title');\n\n# insert\naxes2.plot(y, x, 'g')\naxes2.set_xlabel('y')\naxes2.set_ylabel('x')\naxes2.set_title('insert title');","8a690399":"fig, axes = plt.subplots()\n\naxes.plot(x, y, 'r')\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","71a7fc30":"fig, axes = plt.subplots(nrows=1, ncols=2)\n\nfor ax in axes:\n    ax.plot(x, y, 'r')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')","ac1aae8e":"fig, axes = plt.subplots(nrows=1, ncols=2)\n\nfor ax in axes:\n    ax.plot(x, y, 'r')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')\n    \nfig.tight_layout()","4005d48b":"fig = plt.figure(figsize=(8, 4), dpi=100)","11caa9ae":"fig, axes = plt.subplots(figsize=(12,3))\n\naxes.plot(x, y, 'r')\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","55d94716":"fig.savefig(\"filename.png\")","1f0cdedb":"fig.savefig(\"filename.png\", dpi=200)","2b5f24a3":"ax.set_title(\"title\");","db21480a":"ax.set_xlabel(\"x\")\nax.set_ylabel(\"y\");","64bfdd10":"ax.legend([\"curve1\", \"curve2\", \"curve3\"])","684c1ed8":"ax.plot(x, x**2, label=\"curve1\")\nax.plot(x, x**3, label=\"curve2\")\nax.legend();","36128175":"ax.legend(loc=0) # let matplotlib decide the optimal location\nax.legend(loc=1) # upper right corner\nax.legend(loc=2) # upper left corner\nax.legend(loc=3) # lower left corner\nax.legend(loc=4) # lower right corner\n# .. many more options are available","71424193":"fig, ax = plt.subplots()\n\nax.plot(x, x**2, label=\"y = x**2\")\nax.plot(x, x**3, label=\"y = x**3\")\nax.legend(loc=2); # upper left corner\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('title');","784225a1":"fig, ax = plt.subplots()\n\nax.plot(x, x**2, label=r\"$y = \\alpha^2$\")\nax.plot(x, x**3, label=r\"$y = \\alpha^3$\")\nax.legend(loc=2) # upper left corner\nax.set_xlabel(r'$\\alpha$', fontsize=18)\nax.set_ylabel(r'$y$', fontsize=18)\nax.set_title('title');","37ebd96d":"# update the matplotlib configuration parameters:\nmatplotlib.rcParams.update({'font.size':18, 'font.family':'serif'})","ec72e0bc":"fig, ax = plt.subplots()\n\nax.plot(x, x**2, label=r\"$y = \\alpha^2$\")\nax.plot(x, x**3, label=r\"$y = \\alpha^3$\")\nax.legend(loc=2) # upper left corner\nax.set_xlabel(r'$\\alpha$')\nax.set_ylabel(r'$y$')\nax.set_title('title');","eda2f59d":"# Update the matplotlib configuration parameters:\nmatplotlib.rcParams.update({'font.size': 18, 'font.family': 'STIXGeneral', 'mathtext.fontset': 'stix'})","fcef54d8":"fig, ax = plt.subplots()\n\nax.plot(x, x**2, label=r\"$y = \\alpha^2$\")\nax.plot(x, x**3, label=r\"$y = \\alpha^3$\")\nax.legend(loc=2) # upper left corner\nax.set_xlabel(r'$\\alpha$')\nax.set_ylabel(r'$y$')\nax.set_title('title');","f1ffd708":"matplotlib.rcParams.update({'font.size': 18, 'text.usetex':True})","bfb5fd46":"fig, ax = plt.subplots()\n\nax.plot(x, x**2, label=r\"$y = \\alpha^2$\")\nax.plot(x, x**3, label=r\"$y = \\alpha^3$\")\nax.legend(loc=2) # upper left corner\nax.set_xlabel(r'$\\alpha$')\nax.set_ylabel(r'$y$')\nax.set_title('title');","34ecaf66":"# **The matplotlib object-oriented API**\n\nThe main idea with object-oriented programming is to have objects that one can apply functions and actions on, and no object or program states should be global (such as the MATLAB-like API). The real advantage of this approach becomes apparent when more than one figure is created, or when a figure contains more than one subplot.\n\nTo use the object-oriented API we start out very much like in the previous example, but instead of creating a new global figure instance we store a reference to the newly created figure instance in the fig variable, and from it we create a new axis instance axes using the add_axes method in the Figure class instance fig:","f27cc993":"**What formats ae available and which one should be used for best quality?**\n\nMatplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF. For scientific papers, I recommend using PDF henever possible. (LaTeX documents compiled with pdflatex can include PDFs using the includegraphics command). In some cases, PGF can also be good alternative.","f2055512":"# **Saving figures**\n\nTo save a figure to a fil we can use the savefig method in the Figure class:","1a0dd63a":"The method described above follows the MATLAB API. It is somewhat prone to errors and unflexible if curves are added to or removed from the figure(resulting in a wongly laelled curve).\n\nA better method is to use the label=\"label text\" keyword argument when plots or other bjects are added to the figure, and then using the legend method without arguments to add the legend to figure:\n","81fbbbe5":"# **Legends, Labels and Titles**\n\nNow that we have covered the basics of how ti create a figure cancvas ad add axes instances to the canvas, lets look at how decorate a figure with titles, axis labels and legends.\n\n\n**Figure titles**\nA title can be added to each axis instance in a figure. To set the title, use the set_title method in th axes instance:","68f3841b":"# **Formatting text: LaTeX, fontsize, font family**\n\nThe gigure above is functional, but it does not(yet) satisfy the criteria for a figure used in a publication. First and foremost, we need to have LaTeX formatted text, and second, we need to be able to able to adjust the font size to appear right in a publication.\n\nMatplotlib has a grat support for LaTeX. All we need to do is to use dollar signs encapsulate LaTeX in any text(legend, title, label, etc.). For example, \"$y=x^3$\".\n\nBut here we can run into a slightly subtle problem with LaTeX code and Python text string. In LaTeX, we frequently use the backlash in commands, for example \\alpha to produce the symbol \u03b1. But the backslash already has a meaning in Python strings (the escape code character). To avoid Python messing up our latex code, we need to use \"raw\" text strings. Raw text strings are prepended with an 'r', like r\"\\alpha\" or r'\\alpha' instead of \"\\alpha\" or '\\alpha':","eb1e50c9":"**Legends**\n\nLegends for curves in a figure can be added in two ways. One method is to use the legend method of the axis object and pass a list\/tuple of legend texts for the previously defined curves:","b837af9b":"**Matplotlib - 2D and 3D ploting**\n\nJ.R. Johansson (jrjohansson at gmail.com) \n\nFind the latest version of this [IPython notebook](https:\/\/ipython.org\/notebook.html) lecture available [Here](https:\/\/github.com\/jrjohansson\/scientific-python-lectures)\n\nThe other notebooks in this lecture series are indexed [Here](https:\/\/jrjohansson.github.io\/)\n","3209ad60":"# **MATLAB-like API**\n\nThe easiest way to get started with plotting using matplotlib is often to use the MATPLAB-like API provided by matplotlib.\n\nIt s designed to be compatible with MATLAB's plotting functions, so it is easy to get started with if you are farmiliar with MATLAB.\n\nTo use this API from matplotlib, we need to include the smbols in the *pylab* module:","6c500292":"The following figure shows how to use the figure title, axis abels and legends described above:","2c74bedf":"if we don't care about being explicit about where our plots axes placed in the figure canvas, then we can use one of the many axis layout managers in matplotlib. My favorite is *subplots*, which can be used like this:","5b015181":"Or, alternatively , we can request that matplotlib uses LaTeX to render the text elements in the figure:","10b4e599":"Although a little bit more code is involved, the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure:","30981253":"**Example**\n\nA simple figure with MATLAB-like plotting API:","b948275d":"The good thing about the pylab MATLAB-style API is that it is easy to get started with if you are familiar with MATLAB, and it has a minumum of coding overhead for simple plots.\n\nHowever, I'd encourrage not using the MATLAB compatible API for anything but the simplest figures.\n\nInstead, I recommend learning and using matplotlib's object-oriented plotting API. It is remarkably powerful. For advanced figures with subplots, insets and other components it is very nice to work with.","16a721c4":"That was easy, but isn't so pretty with overlapping figure axes and labels, right?\n\nWe can deal with that by just using the fig.tight+layout method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content:","e4ad4385":"# **A great matplotlib tutorial, part of the fantastic Lectures on Scientific Computing with Python by J.R. Johansson.**","1f645133":"Most of the plotting related functions in MATLAB are covered by the* pylab* module. For example, subplot and color\/symbol selection:","0b11c148":"A good choice of global fonts are the STIX fonts:","f4435dc1":"We can also change the global font size and font family, which applies to all text elements in a figure(tick labels, axis labels and title, legends, etc):","dfc91cb3":"**Introduction**\n\n Matplotlib is an excellent 2D and 3D graphics library for generating scientific figures. Some of the many advantages of this library include:\n* Easy to get started\n* Support LATEX formatted labels and texts\n* Great control of every element in a figure, including figure size and DPI\n* High-quality output in many formats, including PNG, PDF, SVG, EPS, and PGF\n* GUI for interactively exploring figures and support for headless genertion of figure files(useful for batch jobs)\n\nOne of the key features of matplotli that I would ie to emphasize, and that I think make matplotlib highly suitable for generating figures for scientific publications is that all aspecs of the figure can b contriolled pogrammatically. This is important for reproductibility anf convenient when on needs to regenerate the figure with updated data or change its appearance.\n\nMore information at the Matlotlib web page [Here](https:\/\/matplotlib.org\/)\n\n\nTo get started using Matplotlib in a Python program, either include the symbols from the *pylab* module(the easy way):","eb975deb":"The advantage with this method is that if curves are added or removed from the figure, the legend is automatically updated accordingly.\n\nThe legend function takes an optional keyword argument loc that can be used to specify where in the figure the legend is to be drawn. The allowed values of loc are numerical codes for the various places the legend can be drawn. See [HERE](http:\/\/matplotlib.org\/users\/legend_guide.html#legend-location) for details. Some of the most common loc values are:","2dfd71ad":"The same arguments can also be passed to layout managers , such as the subplots function:","cffc5e15":"**Axis Labels**\n\nSimilarly, with methods set_xlabel and set_ylabel, we can set the labels of the X and Y axes:","c22f296f":"or import the matplotlib.pyplot module under the name plt (the tidy way):","75141bff":"**Figure size, aspect ratio and DPI**\n\nMatplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure oject is created, using the figsize and dpi keyword arguments. figize is a tuple of the width and height of the figue in inches, and dpi is the dots-per-inch(pixel per inch). To create an 800x400 pixel, 100 dots-per-inch figure, we can do:","8c3e2274":"Here we can also optionally specify the DPI and choose between different output formats:"}}