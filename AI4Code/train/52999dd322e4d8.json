{"cell_type":{"dde773bb":"code","16210109":"code","36083751":"code","7e1f5710":"code","f4c15493":"code","eca0df2f":"code","43458076":"code","470b32fe":"code","24218426":"code","94d32ed0":"code","34a4696e":"code","af995c35":"code","a0c76e7d":"code","9dddb9e0":"code","69f33217":"code","530279bf":"code","4374d273":"code","50d44c59":"code","93940947":"code","d8ffc68e":"code","7deb7f71":"code","88b6a994":"code","489327cc":"code","b865aaf2":"code","ef5ac92a":"markdown","8f546e1d":"markdown","5e464bda":"markdown","5674ea99":"markdown","d8561950":"markdown"},"source":{"dde773bb":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport tensorflow as tf","16210109":"image_dir = Path('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')\nfilepaths = list(image_dir.glob(r'**\/*.png'))\n#print(filepaths)\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\n# Concatenate filepaths and labels\ndf = pd.concat([filepaths, labels], axis=1)\n\n# Drop GT images\ndf = df[df['Label'].apply(lambda x: x[-2:] != 'GT')]","36083751":"df.head(3)","7e1f5710":"import seaborn as sns\nsns.countplot(df[\"Label\"])","f4c15493":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(df['Label'])\ndf['Label'] = le.transform(df['Label'])\nprint(le.classes_)","eca0df2f":"df.head()","43458076":"dataset = tf.data.Dataset.from_tensor_slices((df[\"Filepath\"],df[\"Label\"]))","470b32fe":"def get_train_val_test_split(ds,shuffle=True,shuffle_size=10000):\n    ds_size=len(ds)\n    if shuffle:\n        ds = ds.shuffle(shuffle_size, seed = 12)\n    train_size=int(ds_size*0.8)\n    val_size=int(ds_size*0.1)\n    train_ds=ds.take(train_size)\n    val_ds=ds.skip(train_size).take(val_size)\n    test_ds=ds.skip(train_size).skip(val_size)\n    \n    return train_ds,val_ds,test_ds","24218426":"train_ds,val_ds,test_ds = get_train_val_test_split(dataset)","94d32ed0":"print(len(train_ds))\nprint(len(val_ds))\nprint(len(test_ds))","34a4696e":"def load_images(filename, label):\n    image = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image,(224,224))\n    return image, label\ndef augment(image, label): \n    image = tf.image.random_brightness(image, max_delta=0.2)\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.rot90(image)\n    image = tf.image.stateless_random_jpeg_quality(image, min_jpeg_quality=90, max_jpeg_quality=100, seed=(np.random.randint(100),np.random.randint(100)))\n    return image, label","af995c35":"BATCH_SIZE=32\ntrain_ds = (train_ds\n    .shuffle(len(train_ds)*100,seed=42)\n    .map(load_images)\n    .map(augment, num_parallel_calls=tf.data.AUTOTUNE)\n    .cache()\n    .batch(BATCH_SIZE)\n    .prefetch(tf.data.AUTOTUNE)\n)\nbatch = next(iter(train_ds))","a0c76e7d":"test_ds =(test_ds\n         .shuffle(len(test_ds)*100)\n         .map(load_images)\n         .cache()\n         .batch(BATCH_SIZE)\n         .prefetch(tf.data.AUTOTUNE))\nval_ds =(val_ds\n         .shuffle(len(test_ds)*100)\n         .map(load_images)\n         .cache()\n         .batch(BATCH_SIZE)\n         .prefetch(tf.data.AUTOTUNE))","9dddb9e0":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 20))\n\n# loop over the batch size\nfor i in range(0, BATCH_SIZE):\n\t# grab the image and label from the batch\n\t(image, label) = (batch[0][i], batch[1][i])\n\t# create a subplot and plot the image and label\n\tax = plt.subplot(8, 4, i + 1)\n\tplt.imshow(image)\n\tplt.title(label.numpy())\n\tplt.axis(\"off\")\n# show the plot\nplt.tight_layout()\nplt.show()","69f33217":"from tensorflow import keras\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Input,Dense, Dropout, Activation, Flatten,Conv2D,MaxPooling2D, BatchNormalization","530279bf":"pretrained_model = tf.keras.applications.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","4374d273":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(32, activation='relu')(pretrained_model.output)\nx = Dropout(0.3)(x)\noutputs = tf.keras.layers.Dense(9, activation='softmax')(x)\n\nmodel =Model(inputs=inputs, outputs=outputs)\n\n","50d44c59":"model.summary()","93940947":"model.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)","d8ffc68e":"history = model.fit(\n    train_ds,\n    validation_data=val_ds,\n    epochs=15,\n    callbacks=[tf.keras.callbacks.EarlyStopping(\n    monitor='val_accuracy', min_delta=0.001, patience=2,restore_best_weights=True)\n    ]\n  )","7deb7f71":"model.evaluate(test_ds)","88b6a994":"train_acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\n\n\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.plot(train_acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(train_loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()\n","489327cc":"plt.figure(figsize=(15,15))\ny_true=[]\ny_pred=[]\nfor img, label in test_ds:\n    prediction=model.predict(img)\n    label=label.numpy()\n    for i in range(len(label)):\n        y_true.append(label[i])\n    for i in range(len(prediction)):\n        label_predicted=np.argmax(prediction[i])        \n        y_pred.append(label_predicted)\n    \n    \n   ","b865aaf2":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(le.inverse_transform(y_true), le.inverse_transform(y_pred))\nplt.figure(figsize = (10,7))\nsns.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","ef5ac92a":"# 2.Create Tensorflow input pipeline ","8f546e1d":"# 5.Evaluate","5e464bda":"# **1. Load and transform the dataset**\n","5674ea99":"# 3.Visiualize augmented image","d8561950":"# 4. Build model "}}