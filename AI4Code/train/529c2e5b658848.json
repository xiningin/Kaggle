{"cell_type":{"167f4dce":"code","50099416":"code","468e8efb":"code","604c650d":"code","60c049d6":"code","66663418":"code","27475e21":"code","39bd2ab5":"code","ffac7658":"code","912cddc2":"code","797bee66":"code","f5667e3b":"code","57bf4d16":"code","c65ca2ac":"code","bd0926d4":"code","723646ea":"code","9f08cf54":"code","b3330fdb":"code","ed9bcd60":"code","8c3af465":"code","ed45b743":"code","ddf36fcf":"code","acaea109":"code","d351fa1e":"code","3da5e1ce":"code","7adb5bab":"code","dd0f511c":"code","9a368698":"code","5eebbb38":"code","4b5ad081":"code","e01df61e":"code","bf37a711":"markdown","40a50fca":"markdown","d5ba421a":"markdown","9a6ce835":"markdown","3f2af215":"markdown","b571bbfe":"markdown","b1333456":"markdown","2830cea9":"markdown","d1704c14":"markdown","cf55fd7d":"markdown","f3acdaf0":"markdown","ce456908":"markdown","82f405dd":"markdown"},"source":{"167f4dce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50099416":"df = pd.read_csv('..\/input\/advertising\/advertising.csv')\ndf.head()","468e8efb":"#Lets see the columns below to make it understood\nprint(df['Country'].unique())\nprint(df['Ad Topic Line'].unique())","604c650d":"df.drop(['Country','Ad Topic Line','Timestamp','City'], axis=1, inplace=True)","60c049d6":"df.head()","66663418":"#check the columns type\ndf.info()","27475e21":"df.shape","39bd2ab5":"#now lets see if there is any null value\ndf.isnull().sum()","ffac7658":"#Lets see if there is any na value\ndf.isna().sum()","912cddc2":"#Lets draw Heatmap for missing value\n\nplt.figure(figsize=(12,8))\nplt.style.use('fivethirtyeight')\nsns.heatmap(df.isnull(), yticklabels=False, cmap='RdBu', cbar=False)\nplt.title('Missing Value')","797bee66":"#Lets draw the heatmap of correlation matrix\n\nplt.figure(figsize=(12,8))\nplt.style.use('fivethirtyeight')\nsns.heatmap(df.corr(), annot=True, cmap='RdBu')\nplt.title('Correlation Matrix')","f5667e3b":"#Lets plot the Countplot\n\nplt.figure(figsize=(12,8))\nplt.style.use('fivethirtyeight')\nsns.countplot(df['Male'])","57bf4d16":"#Lets draw the pairplot\nplt.figure(figsize=(12,8))\nplt.style.use('fivethirtyeight')\nsns.pairplot(df, hue='Clicked on Ad')","c65ca2ac":"df.head()","bd0926d4":"X = df.drop('Clicked on Ad', axis=1)\ny = df.iloc[:,-1]","723646ea":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=32)","9f08cf54":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\naccuracy_score(y_test,y_pred)","b3330fdb":"#now do some cross validation with the knn model\n\nfrom sklearn.model_selection import cross_val_score\n\nscore = cross_val_score(knn, X, y, cv=10, scoring='accuracy').mean()\nscore","ed9bcd60":"k_range = range(1,31)\nscore = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, X, y, cv=10, scoring='accuracy').mean()\n    score.append(scores)","8c3af465":"plt.figure(figsize=(12,8))\nplt.style.use('fivethirtyeight')\nplt.plot(k_range, score)\nplt.xlabel('Value of K')\nplt.ylabel('Scores')\nplt.show()","ed45b743":"#Now apply GridSearchCV for KNN. this will take a range of k for the model\n\nfrom sklearn.model_selection import GridSearchCV\nk_range = range(1,31)\nweight_options = ['uniform','distance']\nparam_grid = dict(n_neighbors=k_range, weights=weight_options)\ngrid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy', n_jobs=-1)\ngrid.fit(X,y)\nprint(grid.best_score_)\nprint('\\n')\nprint(grid.cv_results_)\nprint('\\n')\nprint(grid.best_params_)\nprint('\\n')\nprint(grid.best_estimator_)","ddf36fcf":"knn = KNeighborsClassifier(n_neighbors=1, weights='uniform')\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\naccuracy_score(y_test,y_pred)","acaea109":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmax_depth = [2,4,6]\nmin_samples_split = [4,8,12,16]\nmin_samples_leaf = [4,8,12,16]\nmax_leaf_nodes = [15,20,25,30]\ncriterion = ['gini', 'entropy', 'chi2']\n\nparam_grid = dict(max_depth=max_depth,\n                  min_samples_split=min_samples_split,\n                  min_samples_leaf=min_samples_leaf,\n                  max_leaf_nodes=max_leaf_nodes,\n                  criterion=criterion\n                 )\n\ngrid = GridSearchCV(model, param_grid, cv=5, n_jobs=-1, scoring='accuracy')\ngrid.fit(X_train,y_train)","d351fa1e":"grid.best_params_","3da5e1ce":"grid.best_score_","7adb5bab":"#Now apply these parameters for out decision tress\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=6, max_leaf_nodes=15, min_samples_leaf=4, min_samples_split=4, random_state=12)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\naccuracy_score(y_test,y_pred)\n\n#Now our model is very much accurate compared to the KNN","dd0f511c":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmax_depth = [6]\nn_estimators = [100,200,300]\nmin_samples_split = [4]\nmin_samples_leaf = [4]\nmax_leaf_nodes = [15]\ncriterion = ['gini']\nmax_features = [.3,.4,.5]\nmax_samples = [.1,.2,.3]\n\nparam_grid = dict(max_depth=max_depth,\n                  n_estimators=n_estimators,\n                  min_samples_split=min_samples_split,\n                  min_samples_leaf=min_samples_leaf,\n                  max_leaf_nodes=max_leaf_nodes,\n                  max_features=max_features,\n                 )\n\ngrid = GridSearchCV(model, param_grid, cv=5, n_jobs=-1, scoring='accuracy')\ngrid.fit(X_train,y_train)","9a368698":"grid.best_params_","5eebbb38":"grid.best_score_","4b5ad081":"grid.best_estimator_","e01df61e":"model = RandomForestClassifier(max_depth=6, max_features=0.3, max_leaf_nodes=15,\n                       min_samples_leaf=4, min_samples_split=4)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\naccuracy_score(y_test, y_pred)","bf37a711":"## Now lets see the graphical evaluation of our model for different k value","40a50fca":"We can see the above two columns are useless for the classification problem because there are too many different category. so better we should drop the columns from the dataset. Further we might drop the \"City\" and \"Timestamp\" columns too","d5ba421a":"Our data doesn't have any na value","9a6ce835":"**Now aplly RandomForestClassifier with GridSearchCV**","3f2af215":"## KNN Method with X_train, y_train","b571bbfe":"### A little bit improvement for our model","b1333456":"**We can improve accuracy by 1% compared to DecisionTree using RandomForestClassification**","2830cea9":"## Lets Visualize the data\n","d1704c14":"# Decision Tree Method","cf55fd7d":"## Split the dataset first","f3acdaf0":"## Random Forest Classification","ce456908":"Our Data is not null","82f405dd":"Here We can see that There is no way to draw a straight line to seperate the data from one another. So we should not apply Logistic Regression rather we must go for KNN or other Algorithms. "}}