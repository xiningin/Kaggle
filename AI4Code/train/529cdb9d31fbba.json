{"cell_type":{"6ec5ef47":"code","b51eee20":"code","96890875":"code","90685334":"code","2b35d7fa":"code","4598cc5f":"code","a2cbd192":"code","7d50bd41":"code","943909ef":"code","3e52b677":"code","3b74b9b9":"code","15eb5aae":"code","24449d00":"code","ab0cf268":"code","fe495b15":"code","12fee3be":"code","ee0aeebd":"code","e138ef96":"code","d5341acd":"code","d73cc005":"code","f760b017":"code","e99cc49f":"code","b07080d6":"code","34582e6a":"code","28c2f473":"code","d8043232":"code","7e2bae99":"code","12fcb632":"code","326415a1":"code","cf67c7e9":"code","ba0142aa":"code","4156bfa4":"code","7a409055":"code","52e1ecbe":"code","00eab1e2":"code","42b07617":"code","13701b4d":"code","587786d3":"code","859c988f":"code","f1dcd6be":"code","b117ebab":"code","0c2530d8":"code","081507b9":"code","172136f5":"code","3ea69f7f":"code","3aeb9cdd":"code","2483150b":"code","740bc40c":"code","fda7dcb9":"code","ea0a7a96":"code","003c07ee":"code","0c69b22e":"code","68424a8c":"code","826a1f37":"code","4e8059f1":"code","df06a76d":"code","a50ad8ff":"code","c521198b":"code","52af07ac":"code","a8801ec5":"code","96a28869":"code","0c37f4d3":"code","6d35647e":"code","2381e5fd":"code","624dc7e8":"code","03c333d9":"code","aa63aed1":"code","019b3762":"code","86ff6be8":"code","a380576e":"code","513721ae":"code","45c411fa":"code","e5058720":"code","026dfd04":"code","fe9b3006":"code","63c2f537":"code","143ae493":"code","71a9687b":"code","af46c9a5":"code","ac5cdebf":"code","1ce7a02f":"code","875d57c9":"code","53534d36":"code","98c31657":"code","6a651dd2":"code","e1a63423":"code","a5e31883":"code","ae6118ac":"code","636bcee6":"code","01f60f24":"code","a7fd6e14":"code","58eedd7a":"code","8eca865a":"code","f202b4fe":"code","91029317":"code","f9251468":"code","6cab442e":"code","d72445f6":"code","b9f7a7d1":"code","d9edd795":"code","d7dfd51e":"code","d38470cb":"markdown","3d052984":"markdown","5d2f7a53":"markdown","b32411ab":"markdown","4992bc8a":"markdown","1d53ba4b":"markdown","a2bf5578":"markdown","9d97d2ea":"markdown","c7be696e":"markdown","22847bd2":"markdown","dd34a43b":"markdown","5546cc48":"markdown","a62c378d":"markdown","62bc4b74":"markdown","066a7969":"markdown","7f21945c":"markdown","724cdc6e":"markdown","1f653568":"markdown","1be3b485":"markdown","1b3290fe":"markdown","ea2c805e":"markdown"},"source":{"6ec5ef47":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sys\n\n#tools for preparing data and evaluation models\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score\nfrom sklearn.metrics import confusion_matrix, classification_report, r2_score, mean_squared_error, mean_absolute_error, precision_score, recall_score, f1_score,roc_curve, auc, balanced_accuracy_score,precision_recall_curve,roc_auc_score\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\n#for models\nimport xgboost as xgb\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom imblearn.ensemble import EasyEnsembleClassifier","b51eee20":"import warnings\nwarnings.filterwarnings(\"ignore\")","96890875":"pd.set_option(\"display.max_columns\", None)\nnp.set_printoptions(threshold=sys.maxsize)\nnp.set_printoptions(suppress=True)","90685334":"df = pd.read_csv('\/kaggle\/input\/prudential-life-insurance-assessment\/train.csv.zip')\ndf.head(10)","2b35d7fa":"df.info()","4598cc5f":"df.describe()","a2cbd192":"fig_size = (20, 20)\nfig, ax = plt.subplots(figsize=fig_size)\nsns.heatmap(df.corr(), cmap=\"Blues\")","7d50bd41":"threshold = 0.1\ncorr_matrix = df.corr()\ncolumns = []\nfor i in range(len(corr_matrix.columns)):\n    if (abs(corr_matrix.iloc[i, 126]) >= threshold):\n        columns.append(df.columns[i + 1])\n        print(df.columns[i + 1], corr_matrix.iloc[i, 126])","943909ef":"norm_corr = df[columns]","3e52b677":"fig_size = (9, 7)\nfig, ax = plt.subplots(figsize=fig_size)\nsns.heatmap(norm_corr.corr())","3b74b9b9":"print (df.corr()[\"Response\"].sort_values(ascending=False))","15eb5aae":"fig, ax = plt.subplots(figsize=(9, 7))\ndf['Response'].hist(grid=False, bins=8)","24449d00":"df['Response'].value_counts()","ab0cf268":"fig, ax = plt.subplots(figsize=(20,8))  \nsns.heatmap(df.isnull(), cbar=False)","fe495b15":"missing_val_count_by_column = (df.isnull().sum()\/len(df))\nprint(missing_val_count_by_column[missing_val_count_by_column>0.3].sort_values(ascending=False))","12fee3be":"# #normalize Employment_Info_2\n# min_max_scaler = preprocessing.MinMaxScaler()\n# Employment_Info_2_scaled = min_max_scaler.fit_transform(df[\"Employment_Info_2\"].values.reshape(-1, 1))\n# df[\"Employment_Info_2\"] = Employment_Info_2_scaled\n\n# #normalize Employment_Info_3\n# df[\"Employment_Info_3\"] = df[\"Employment_Info_3\"] * 0.5 - 0.5\n# df[\"Employment_Info_3\"] = df[\"Employment_Info_3\"].astype(int)\n\n# #normalize Employment_Info_5\n# df[\"Employment_Info_5\"] = df[\"Employment_Info_5\"] - 2","ee0aeebd":"#Convert Product_Info_2 into dummy variables\nProduct_Info_2_dummies = pd.get_dummies(df.Product_Info_2)\ndf = df.drop('Product_Info_2',axis = 1)\ndf = df.join(Product_Info_2_dummies)","e138ef96":"#new features\nmed_keyword_columns = df.columns[df.columns.str.startswith('Medical_Keyword_')]\ndf['Med_Keywords_Count'] = df[med_keyword_columns].sum(axis=1)\n\n#sum of all Medical_Keyword columns\n# med_keyword_columns = copy_df.columns[copy_df.columns.str.startswith('Medical_Keyword_')]\n# copy_df['Med_Keywords_Count'] = copy_df[med_keyword_columns].sum(axis=1)\n# copy_df['BMI_Age'] = copy_df['BMI'] * copy_df['Ins_Age']","d5341acd":"#Handle missing columns\ncopy_df = df.copy()\nimputer = SimpleImputer()\ncopy_df = pd.DataFrame(imputer.fit_transform(copy_df))\ncopy_df.columns = df.columns","d73cc005":"copy_df.head()","f760b017":"#split DataFrame into input data and target\nX = copy_df.drop(['Id', 'Response'], axis=1)\ny = copy_df.Response.values.astype('int')","e99cc49f":"#split into train\/valid sets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=17)","b07080d6":"cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)","34582e6a":"#define model\nrf_model = RandomForestClassifier(n_estimators=100, n_jobs=4, random_state=42)","28c2f473":"#get cross-validation score\nrf_cv_score = cross_val_score(rf_model, X_train, y_train, cv=cv)\nprint (rf_cv_score)","d8043232":"#train model\nrf_model.fit(X_train, y_train)\n\n#predictiion for validation set\ny_pred = rf_model.predict(X_valid)\n\n#confusion matrix\nprint(pd.crosstab(y_valid, y_pred, rownames=['Actual Species'], colnames=['Predicted Species']), '\\n')\n\n#classification report\nprint (classification_report(y_valid, y_pred))","7e2bae99":"xgb_model = xgb.XGBClassifier(max_depth=10, objective='multi:softmax', num_class=8)","12fcb632":"xgb_cv_score = cross_val_score(xgb_model, X_train, y_train, cv=cv)\nprint (xgb_cv_score)","326415a1":"#train model\nxgb_model.fit(X_train, y_train)\n\n#predict\ny_pred = xgb_model.predict(X_test)","cf67c7e9":"#confusion matrix\nprint(pd.crosstab(y_valid.astype('int'), y_pred.astype('int'), rownames=['Actual'], colnames=['Predicted']))","ba0142aa":"#classification report\nprint (classification_report(y_valid, y_pred.astype('int')))","4156bfa4":"#define model\nnn = Sequential()\nnn.add(Dense(128, activation='relu'))\nnn.add(Dense(64, activation='relu'))\nnn.add(Dense(8, activation='softmax'))\nnn.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","7a409055":"y_train_one_hot = to_categorical(y_train-1, num_classes=8, dtype='float32')","52e1ecbe":"nn_cv_score = []\n\nfor i, (train_index, val_index) in enumerate(cv.split(X_train.values, y_train_one_hot.argmax(1))):\n    print ('Fold %i' %i)\n    x_train_cv, x_val_cv = X_train.values[train_index], X_train.values[val_index]\n    y_train_cv, y_val_cv = y_train_one_hot[train_index], y_train_one_hot[val_index]\n    hist = nn.fit(x_train_cv, y_train_cv, epochs=20, verbose=0, validation_data=(x_val_cv, y_val_cv))\n    nn_cv_score.append(hist.history['accuracy'][-1])\n\nprint (nn_cv_score)","00eab1e2":"#train model\nnn.fit(X_train, y_train_one_hot, epochs=50)","42b07617":"y_pred = nn.predict(X_valid)\ny_pred = np.argmax(y_pred, axis=1) + 1 #decoding","13701b4d":"#confusion matrix\nprint(pd.crosstab(y_valid.astype('int'), y_pred.astype('int'), rownames=['Actual Species'], colnames=['Predicted Species']))","587786d3":"#classification report\nprint (classification_report(y_valid, y_pred.astype('int')))","859c988f":"new_df = copy_df.copy()\nfor i in range(1, 8):\n    new_df['x > %d' %i] = copy_df.Response.apply(lambda x: 1 if x > i else 0)\nnew_df.head()","f1dcd6be":"prob_cols = pd.DataFrame()\ntestprob_cols = pd.DataFrame()\nX_i = new_df.drop(['Id', 'Response', 'x > 1', 'x > 2', 'x > 3', 'x > 4', 'x > 5', 'x > 6', 'x > 7'], axis=1)\ntestX_i = testcopy_df.drop(['Id'], axis=1)\nfor i in range(1, 8):\n    y_i = new_df['x > %d' %i]\n    xgbmodel = xgb.XGBClassifier()\n    xgbmodel.fit(X_i, y_i)\n    yi_pred = xgbmodel.predict_proba(X_i)[:,1]\n    yi_test = xgbmodel.predict_proba(testX_i)[:,1]\n    prob_cols['x > %d' %i] = yi_pred\n    testprob_cols['x > %d' %i] = yi_test\n\nprob_cols['prob_sum'] = prob_cols.sum(axis=1)\ntestprob_cols['prob_sum'] = testprob_cols.sum(axis=1)\nprob_cols.head(5)\ntestprob_cols.head()","b117ebab":"testprob_cols.shape","0c2530d8":"prob_cols","081507b9":"new_df[prob_cols.columns] = prob_cols","172136f5":"cv = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\nnewX = new_df.drop(['Id', 'Response'], axis=1)\nnewY = new_df.Response.values.astype('int')\nnewX_train, newX_valid, newY_train, newY_valid = train_test_split(newX, newY, test_size=0.2, random_state=17)","3ea69f7f":"valid_cv_results = pd.DataFrame()\nvalid_cv_results['Real'] = newY_valid\n\ni = 0\nfor train_index, test_index in cv.split(newX_train, newY_train):\n    valid_cv_results['cv_'+str(i)] = 0\n    print (i)\n#     print(i, \"TRAIN:\", train_index, \"TEST:\", test_index)\n    trainX, testX = newX.iloc[train_index], newX.iloc[test_index]\n    trainY, testY = newY[train_index], newY[test_index]\n    \n    xgb_model = xgb.XGBClassifier(max_depth=10, objective='multi:softmax', num_class=8)\n    xgb_model.fit(trainX, trainY)\n#     y_pred = xgb_model.predict(newX_valid)\n    valid_cv_results['cv_'+str(i)] = xgb_model.predict(newX_valid)\n    i += 1\n\nvalid_cv_results['median'] = valid_cv_results[valid_cv_results.columns[1:]].median(axis=1).astype('int')","3aeb9cdd":"valid_cv_results","2483150b":"#confusion matrix\nprint(pd.crosstab(valid_cv_results['Real'], valid_cv_results['median'], rownames=['Actual'], colnames=['Predicted']))","740bc40c":"print (classification_report(valid_cv_results['Real'], valid_cv_results['median']))","fda7dcb9":"confusion_matrix(valid_cv_results['Real'], valid_cv_results['median'])","ea0a7a96":"#Generate cost of life insurance\ndef generate_cost(x):\n    if x['Ins_Age'] < 0.25:\n        cost = 25\n    elif x['Ins_Age'] < 0.35:\n        cost = 30\n    elif x['Ins_Age'] < 0.45:\n        cost = 40\n    elif x['Ins_Age'] < 0.35:\n        cost = 30\n    elif x['Ins_Age'] < 0.55:\n        cost = 40\n    elif x['Ins_Age'] < 0.7:\n        cost = 80\n    elif x['Ins_Age'] < 0.9:\n        cost = 200\n    else:\n        return 600\n    cost += cost * abs(x['BMI'] - 0.5)\n    cost += np.random.normal(0, cost \/ 10)\n    return cost\n\ncopy_df['Cost'] = copy_df.apply(generate_cost, axis=1)","003c07ee":"copy_df['Cost'].hist(grid=False, bins=100, figsize=(20, 6))","0c69b22e":"copy_df['Cost'].hist(by=copy_df['Response'], figsize=(20, 10));","68424a8c":"X2 = copy_df.drop(['Id', 'Cost', 'Response'], axis=1)\ny2 = copy_df.Cost.values.astype('int')\n\n#split into train\/valid sets\nX2_train, X2_valid, y2_train, y2_valid = train_test_split(X2, y2, test_size=0.2, random_state=17)","826a1f37":"#define model\nlr_cost = LinearRegression()","4e8059f1":"#cross-validation score\nlr_cv_score = cross_val_score(lr_cost, X2_train, y2_train, cv=cv)\nprint (lr_cv_score)","df06a76d":"#fit model\nlr_cost.fit(X2_train,y2_train)","a50ad8ff":"#predictiion for validation set\ny2_pred = lr_cost.predict(X2_valid)","c521198b":"#scores\nprint ('R2 score:',lr_cost.score(X2_valid,y2_valid))\nprint('Mean Absolute Error:', mean_absolute_error(y2_valid, y2_pred))  \nprint('Mean Squared Error:', mean_squared_error(y2_valid, y2_pred))  \nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y2_valid, y2_pred)))","52af07ac":"#define model\nrf_cost = RandomForestRegressor(n_estimators = 100,\n                              criterion = 'mse',\n                              random_state = 1,\n                              n_jobs = -1)","a8801ec5":"#cross-validation score\nrf_cost_cv_score = cross_val_score(rf_cost, X2_train, y2_train, cv=cv)\nprint (rf_cost_cv_score)","96a28869":"#fit model\nrf_cost.fit(X2_train, y2_train)","0c37f4d3":"#predictiion for validation set\ny2_pred = rf_cost.predict(X2_valid)","6d35647e":"#scores\nprint ('R2 score:',rf_cost.score(X2_valid,y2_valid))\nprint('Mean Absolute Error:', mean_absolute_error(y2_valid, y2_pred))  \nprint('Mean Squared Error:', mean_squared_error(y2_valid, y2_pred))  \nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y2_valid, y2_pred)))","2381e5fd":"#define model\nxgb_cost = xgb.XGBRegressor()\n\n#cross-validation score\n# xgb_cost_cv_score = cross_val_score(xgb_cost, X2_train, y2_train, cv=cv)\n# print (xgb_cost_cv_score)\n\n#fit model\nxgb_cost.fit(X2_train, y2_train)\n\n#predictiion for validation set\ny2_pred = xgb_cost.predict(X2_valid)\n\n#scores\nprint ('R2 score:',xgb_cost.score(X2_valid,y2_valid))\nprint('Mean Absolute Error:', mean_absolute_error(y2_valid, y2_pred))  \nprint('Mean Squared Error:', mean_squared_error(y2_valid, y2_pred))  \nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y2_valid, y2_pred)))","624dc7e8":"losses = abs((y2_valid - y2_pred).sum())\nprint (\"Losses because of error model: \", losses)\n\navoid_losses = (y2_valid - y2_pred + round(losses \/ len(y2_valid), 2)).sum()\nprint (\"Losses because of error model, when add price for error: \", avoid_losses)","03c333d9":"appr_df = copy_df.copy()\n\ndef approve(x):\n    if (x['Response'] > 2):\n        val=1\n    else:\n        val=0\n    return val\n\n# copy_df = df.copy()\nappr_df['Approve'] = appr_df.apply(approve, axis=1)","aa63aed1":"appr_df['Approve'].value_counts(normalize=True)","019b3762":"sns.countplot(x=appr_df.Approve).set_title('Distribution of rows by response categories')","86ff6be8":"#split DataFrame into input data and target\nX3 = appr_df.drop(['Id', 'Response', 'Approve'], axis=1)\ny3 = appr_df.Approve\n#split into train\/valid sets\nX3_train, X3_valid, y3_train, y3_valid = train_test_split(X3, y3, test_size=0.2, random_state=42)","a380576e":"#define model\nrf_appr = RandomForestClassifier(n_estimators=100, n_jobs=4, random_state=42)","513721ae":"#get cross-validation score\nrf_appr_cv_score = cross_val_score(rf_appr, X3_train, y3_train, cv=cv)\nprint (rf_appr_cv_score)","45c411fa":"#train model\nrf_appr.fit(X3_train, y3_train)","e5058720":"#predictiion for validation set\ny3_pred = rf_appr.predict(X3_valid)","026dfd04":"#confusion matrix\nprint(pd.crosstab(y3_valid, y3_pred, rownames=['Actual class'], colnames=['Predicted class']))","fe9b3006":"y3_pred = rf_appr.predict_proba(X3_valid)[:,1]","63c2f537":"#classification report\nprint (classification_report(y3_valid, y3_pred.astype('int')))","143ae493":"#define model\nnn_appr = Sequential()\nnn_appr.add(Dense(128, activation='relu'))\nnn_appr.add(Dense(64, activation='relu'))\nnn_appr.add(Dense(2, activation='softmax'))\nnn_appr.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","71a9687b":"y_train_one_hot = to_categorical(y3_train, num_classes=2, dtype='float32')","af46c9a5":"nn_appr_cv_score = []\n\nfor i, (train_index, val_index) in enumerate(cv.split(X3_train.values, y_train_one_hot.argmax(1))):\n    print ('Fold %i' %i)\n    x_train_cv, x_val_cv = X3_train.values[train_index], X3_train.values[val_index]\n    y_train_cv, y_val_cv = y_train_one_hot[train_index], y_train_one_hot[val_index]\n    hist = nn_appr.fit(x_train_cv, y_train_cv, epochs=20, verbose=0, validation_data=(x_val_cv, y_val_cv))\n    nn_appr_cv_score.append(hist.history['accuracy'][-1])\n\nprint (nn_appr_cv_score)","ac5cdebf":"#train model\nnn_appr.fit(X3_train, y_train_one_hot, epochs=50)","1ce7a02f":"y3_pred = nn_appr.predict(X3_valid)\ny3_pred = np.argmax(y3_pred, axis=1) #decoding","875d57c9":"#confusion matrix\nprint(pd.crosstab(y3_valid, y3_pred, rownames=['Actual class'], colnames=['Predicted class']))","53534d36":"#classification report\nprint (classification_report(y3_valid, y3_pred.astype('int')))","98c31657":"xgb_appr = xgb.XGBClassifier()","6a651dd2":"xgb_cv_score = cross_val_score(xgb_appr, X3_train, y3_train, cv=cv)\nprint (xgb_cv_score)","e1a63423":"#train model\nxgb_appr.fit(X3_train, y3_train)","a5e31883":"y3_pred = xgb_appr.predict(X3_valid)","ae6118ac":"#confusion matrix\nprint(pd.crosstab(y3_valid, y3_pred, rownames=['Actual class'], colnames=['Predicted class']))","636bcee6":"#classification report\nprint (classification_report(y3_valid, y3_pred.astype('int')))","01f60f24":"cv = StratifiedKFold(n_splits=20, random_state=42, shuffle=True)","a7fd6e14":"y3_train = y3_train.reset_index(drop=True)","58eedd7a":"rf_valid_cv_appr_results = pd.DataFrame()\nrf_valid_cv_appr_results['Real'] = y3_valid\n\ni = 0\nfor train_index, test_index in cv.split(X3_train, y3_train):\n    rf_valid_cv_appr_results['cv_'+str(i)] = 0\n    print(i, \"TRAIN:\", train_index, \"TEST:\", test_index)\n    trainX, testX = X3_train.iloc[train_index], X3_train.iloc[test_index]\n    trainY, testY = y3_train[train_index], y3_train[test_index]\n    eec = EasyEnsembleClassifier(random_state=42)\n    eec.fit(trainX, trainY)\n    y3_pred = eec.predict_proba(X3_valid)[:,1]\n    rf_valid_cv_appr_results['cv_'+str(i)] = y3_pred\n    i += 1","8eca865a":"rf_valid_cv_appr_results['avg'] = rf_valid_cv_appr_results[rf_valid_cv_appr_results.columns[1:]].median(axis=1).round()","f202b4fe":"print(pd.crosstab(rf_valid_cv_appr_results['Real'], rf_valid_cv_appr_results['avg'], rownames=['Actual class'], colnames=['Predicted class']))","91029317":"print (classification_report(rf_valid_cv_appr_results['Real'], rf_valid_cv_appr_results['avg']))","f9251468":"precisions, recalls, thresholds = precision_recall_curve(y3_valid, y3_pred)\n\nplt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\", linewidth=2)\nplt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\", linewidth=2)\nplt.legend(loc=\"lower right\", fontsize=16)\nplt.xlabel(\"Threshold\", fontsize=16)\nplt.grid(True)\nplt.show()\n\nplt.plot(recalls, precisions, \"b-\", linewidth=2)\nplt.xlabel(\"Recall\", fontsize=16)\nplt.ylabel(\"Precision\", fontsize=16)\nplt.grid(True)\nplt.show()\n\nfpr, tpr, thresholds = roc_curve(y3_valid, y3_pred)\nplt.plot(fpr, tpr, linewidth=2)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False Positive Rate (Fall-Out)', fontsize=16)\nplt.ylabel('True Positive Rate (Recall)', fontsize=16)\nplt.grid(True)\nplt.show()\n\nroc_auc_score = roc_auc_score(y3_valid, y3_pred.round())\nprint (roc_auc_score)","6cab442e":"res = [1 if x > 0.49655 else 0 for x in y3_pred]","d72445f6":"len(res)","b9f7a7d1":"print (classification_report(rf_valid_cv_appr_results['Real'], res))","d9edd795":"confusion_matrix(rf_valid_cv_appr_results['Real'], res)","d7dfd51e":"print(pd.crosstab(rf_valid_cv_appr_results['Real'], res, rownames=['Actual class'], colnames=['Predicted class']))","d38470cb":"Random Forest","3d052984":"Correlation matrix","5d2f7a53":"# 3. Decision about policy approval","b32411ab":"Model improvement","4992bc8a":"Target distribution","1d53ba4b":"XGB regressor","a2bf5578":"Prepare data and feature engineering","9d97d2ea":"Neural network","c7be696e":"Neural network","22847bd2":"Random Forest","dd34a43b":"Random forest model","5546cc48":"# **1. Predict group of risk for applicant**","a62c378d":"Linear regression","62bc4b74":"XGB Classifier","066a7969":"# **2. Predict cost of Life Insurance**","7f21945c":"Restricted correlation matrix (by threshold 0.2)","724cdc6e":"7 xgbclassifier models (x > i, i=1..7)","1f653568":" XGBClassifier\n","1be3b485":"Cross validation","1b3290fe":"Model improvement","ea2c805e":"Missed data"}}