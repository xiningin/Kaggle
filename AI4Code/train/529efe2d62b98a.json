{"cell_type":{"cb94abfc":"code","4d574be1":"code","5bc8c713":"code","eb830907":"code","dcc7f50c":"code","97c2e082":"code","6124daa6":"code","5a5258ae":"code","25f37a88":"code","1d5b5c8c":"code","b9c94b38":"code","f0a6a651":"code","cf3440cc":"code","205b0863":"code","678d2db6":"code","cf4a7e28":"code","968a6099":"code","5e4369a2":"markdown","69ccd66f":"markdown","b23a9964":"markdown","d8029bfe":"markdown","088c684c":"markdown","0fdeb0ea":"markdown","27db6560":"markdown","b78f0ffc":"markdown","44a16332":"markdown","3d8fc74c":"markdown","8c76bcf9":"markdown","3fc64925":"markdown","2608fe64":"markdown","d0519374":"markdown","750ebc2c":"markdown"},"source":{"cb94abfc":"# Basic Imports\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom glob import glob\nfrom PIL import Image\n\n# Imports for Building CNN\nfrom keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, load_model\n\n# Ignore Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","4d574be1":"# re-size all the images to this\nIMAGE_SIZE = [224, 224]\n\ncategories = [\"NORMAL\", \"PNEUMONIA\"]\n\n# File Path to all Required Folders\ntrain_path = '..\/input\/chest-xray-pneumonia\/chest_xray\/train'\ntest_path = '..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nval_path = '..\/input\/chest-xray-pneumonia\/chest_xray\/val'","5bc8c713":"train_normal_images = glob(train_path+\"\/NORMAL\/*\")\ntrain_pneumonia_images = glob(train_path+\"\/PNEUMONIA\/*\")\n\nplt.figure(figsize=(10, 8), dpi=80)\ninit_subplot = 230\nfor i in range(1, 7):\n    plt.subplot(init_subplot + i)\n    \n    if i < 4:\n        img = Image.open(np.random.choice(train_normal_images)).resize((244, 244))\n        plt.title(\"Normal Image\")\n    else:\n        img = Image.open(np.random.choice(train_pneumonia_images)).resize((244, 244))\n        plt.title(\"Pneumonia Image\")\n        \n    img = np.asarray(img)\n    plt.axis('off')\n    plt.imshow(img)","eb830907":"# add preprocessing layer to the front of VGG\nvgg = VGG16(input_shape = IMAGE_SIZE + [3],\n            weights = 'imagenet',\n            include_top=False)\n\n# don't train existing weights\nfor layer in vgg.layers:\n  layer.trainable = False","dcc7f50c":"x = Flatten()(vgg.output)\nx = Dense(1000, activation='relu')(x)\n\n# This is the Last Layer with softmax activation for binary outputs\nprediction = Dense(len(categories), activation='softmax')(x)","97c2e082":"# create a model object\nmodel = Model(inputs=vgg.input, outputs=prediction)\n\n# view the structure of the model\nmodel.summary()","6124daa6":"# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","5a5258ae":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","25f37a88":"training_set = train_datagen.flow_from_directory(train_path,\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory(test_path,\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","1d5b5c8c":"# fit the model\nr = model.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=5,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set)\n)","b9c94b38":"fig, ax = plt.subplots(figsize=(20, 4), nrows=1, ncols=2)\n\nax[0].plot(r.history['loss'], color='b', label=\"Training Loss\")\nax[0].plot(r.history['val_loss'], color='r', label=\"Testing Loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(r.history['accuracy'], color='b', label=\"Training Accuracy\")\nax[1].plot(r.history['val_accuracy'], color='r',label=\"Testing Accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","f0a6a651":"model.save('vgg16_model.h5')","cf3440cc":"model = load_model('vgg16_model.h5')","205b0863":"normal_images_list = glob(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\/*\")\ninfected_images_list = glob(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/*\")","678d2db6":"def predict_image(image_path):\n    img = image.load_img(image_path, target_size=(224, 224))\n\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n\n    img_data = preprocess_input(x)\n    classes = model.predict(img_data)\n    \n    pred_class = classes[0]\n    \n    if pred_class[0] > pred_class[1]:\n        print(\"Normal Xray\")\n    else:\n        print(\"Pneumonia XRay\")","cf4a7e28":"ramdom_noraml_img = normal_images_list[np.random.randint(len(normal_images_list))]\npredict_image(ramdom_noraml_img)","968a6099":"ramdom_infected_img = normal_images_list[np.random.randint(len(infected_images_list))]\npredict_image(ramdom_infected_img)","5e4369a2":"# Imports","69ccd66f":"## Compiling the Model","b23a9964":"# Preparing Images for Model","d8029bfe":"# Plots\n\n - Training Loss vs Testing Loss\n - Training Accuracy vs Testing Accuracy","088c684c":"# Data Preprocessing","0fdeb0ea":"## Adding Some More Layers in Our VGG16 Model","27db6560":"## Getting the Images in Batches and Scaling them","b78f0ffc":"# Testing the Model with New Images","44a16332":"## VGG16 Kersas Model for Image Classification","3d8fc74c":"# Loading The Saved Model and Making Predictions","8c76bcf9":"## Code that Predicts the Class to which the Image Belongs","3fc64925":"# Saving the Trained Model for Futher Use","2608fe64":"## Viewing Some Random Images","d0519374":"# Training our VGG16 - CNN Model","750ebc2c":"## Gettting Random Images and Testing"}}