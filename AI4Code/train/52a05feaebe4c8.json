{"cell_type":{"1279e207":"code","d52fea76":"code","53f9073f":"code","57351713":"code","de44964f":"code","bc3decd8":"code","9e1ff572":"code","c5ef1c79":"code","b982935c":"code","53e95aad":"code","d75a147d":"code","1a53a273":"code","1c328f62":"code","965e7e82":"code","8416257f":"code","93d365c1":"code","67d3b931":"code","6ee6d3d3":"code","86024dc3":"code","f2592b6c":"code","47fb69e2":"code","b7192bb8":"code","2180aea2":"code","48cf3e78":"code","38f213c2":"code","8f8b86a5":"code","f3cc856a":"markdown","a221b411":"markdown"},"source":{"1279e207":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Conv2D,MaxPooling2D,Dropout\nfrom keras import optimizers\n\nfrom kaggle_datasets import KaggleDatasets\n\nAUTO = tf.data.experimental.AUTOTUNE\nimport re\n\nfrom keras.applications import VGG16\n\nimport math","d52fea76":"print(\"Tensorflow version \" + tf.__version__)","53f9073f":"# TPU detection  \ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\nexcept ValueError:\n    tpu = None\n\n# TPUStrategy for distributed training\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse: # default strategy that works on CPU and single GPU\n    strategy = tf.distribute.get_strategy()\n\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)","57351713":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102\n","de44964f":"# Train TFRecords are saved in the folder isic2019-256x256\nGCS_DS_PATH = KaggleDatasets().get_gcs_path(\"tpu-getting-started\")\n\n# creating the exact path for train and test tfrecords (note the usage of wild card character *)\nGCS_PATTERN_TRAIN = GCS_DS_PATH + \"\/tfrecords-jpeg-192x192\/train\/*.tfrec\"\nGCS_PATTERN_VAL   = GCS_DS_PATH + \"\/tfrecords-jpeg-192x192\/val\/*.tfrec\"\nGCS_PATTERN_TEST  = GCS_DS_PATH + \"\/tfrecords-jpeg-192x192\/test\/*.tfrec\"","bc3decd8":"# tf.io.gfile.glob will read all the file names present at the PATHs we have just formed above\ntraining_filenames     = tf.io.gfile.glob(GCS_PATTERN_TRAIN)\nvalidation_filenames   = tf.io.gfile.glob(GCS_PATTERN_VAL)\ntesting_filenames      = tf.io.gfile.glob(GCS_PATTERN_TEST)","9e1ff572":"BATCH_SIZE = 16*strategy.num_replicas_in_sync  # A TPU has 8 cores so this will be 128\n\nEPOCHS = 100\n\nIMAGE_SIZE = [192,192]","c5ef1c79":"# helper function to read tfrecords\ndef read_tfrecord(example):\n    # In the declaration, you can access any named field as a fixed length list or a variable length list\n    features = {\n        'image'                   : tf.io.FixedLenFeature([], tf.string),\n        'class'                   : tf.io.FixedLenFeature([], tf.int64)\n        }\n    \n    #tf.parse example to parse the whole batch at once. \n    # Apply this function to each item in the dataset using the tf.data.Dataset.map method:    \n    example = tf.io.parse_single_example(example, features)\n    \n    image = tf.image.decode_jpeg(example['image'], channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size will be needed for TPU\n    \n    class_label = tf.cast(example['class'], tf.int32)\n    \n    return image, class_label","b982935c":"def data_augment(image, label):\n    # Thanks to the dataset.prefetch(AUTO)\n    # statement in the next function (below), this happens essentially\n    # for free on TPU. Data pipeline code is executed on the \"CPU\"\n    # part of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   ","53e95aad":"# function to read data from multiple TFRecords\ndef load_dataset(filenames):   \n    #For optimal performance, it is recommended to use the following code to read from multiple TFRecord files at once. \n    # This code will read from N files in parallel and disregard data order in favor of reading speed.\n    \n    option_no_order = tf.data.Options()\n    option_no_order.experimental_deterministic = False\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # actual TFRecord is read here\n    dataset = dataset.with_options(option_no_order)\n    dataset = dataset.map(read_tfrecord, num_parallel_calls=AUTO) # read_tfrecord function applied on the whole dataset\n    return dataset","d75a147d":"def get_batched_dataset(filenames, train=False):\n    dataset = load_dataset(filenames)\n    dataset = dataset.cache() # This dataset fits in RAM\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    if train:\n        # Best practices for Keras:\n        # Training dataset: repeat then batch\n        # Evaluation dataset: do not repeat\n        dataset = dataset.repeat()        \n        dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n        # should shuffle too but this dataset was well shuffled on disk already\n    return dataset\n        # source: Dataset performance guide: https:\/\/www.tensorflow.org\/guide\/performance\/datasets\n\n# instantiate the datasets\ntraining_dataset = get_batched_dataset(training_filenames, train=True)\nvalidation_dataset = get_batched_dataset(validation_filenames, train=False)","1a53a273":"def count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec\n    # files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","1c328f62":"NUM_TRAINING_IMAGES = count_data_items(training_filenames)\nNUM_VALIDATION_IMAGES = count_data_items(validation_filenames)\nNUM_TEST_IMAGES = count_data_items(testing_filenames)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","965e7e82":"steps_per_epoch = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nvalidation_steps = NUM_VALIDATION_IMAGES \/\/BATCH_SIZE","8416257f":"#  Adding a densely connected classifier on top of the convolutional base\nwith strategy.scope():\n    conv_base = VGG16(weights='imagenet',include_top=False,input_shape=[*IMAGE_SIZE, 3])\n    \n    \n    # freezing the layers of pre-trained model\n    conv_base.trainable = False\n    \n    #conv_base.trainable = True\n    set_trainable = False\n\n    for layer in conv_base.layers:\n        if layer.name == 'block5_conv1' or 'block5_conv2' or 'block5_conv3':\n            set_trainable = True\n\n        if set_trainable:\n            layer.trainable = True\n        else:\n            layer.trainable = False\n            \n        \n    model = Sequential()\n    model.add(conv_base) # adding pre-trained conv base model\n    model.add(Flatten())\n    model.add(Dense(512, activation='relu'))\n    model.add(Dense(104, activation='softmax'))    \n    \n    \n    model.compile(\n    optimizer=optimizers.RMSprop(),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy'])\n\n    model.summary()","93d365c1":"history = model.fit(training_dataset, validation_data=validation_dataset,steps_per_epoch=steps_per_epoch, epochs=EPOCHS)","67d3b931":"# plotting the results\nacc = history.history['sparse_categorical_accuracy']\nval_acc = history.history['val_sparse_categorical_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","6ee6d3d3":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","86024dc3":"cmdataset = validation_dataset\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\n\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\ncm_probabilities = model.predict(images_ds)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\n\nlabels = range(len(CLASSES))\ncmat = confusion_matrix(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n)\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalize","f2592b6c":"score = f1_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nprecision = precision_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nrecall = recall_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\ndisplay_confusion_matrix(cmat, score, precision, recall)","47fb69e2":"from matplotlib import pyplot as plt\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case,\n                                     # these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is\n    # the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square\n    # or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\n\ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","b7192bb8":"dataset = validation_dataset\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","2180aea2":"images, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","48cf3e78":"def read_test_tfrecord(example):\n    # In the declaration, you can access any named field as a fixed length list or a variable length list\n    features = {\n        'image'                : tf.io.FixedLenFeature([], tf.string),\n        'id'                   : tf.io.FixedLenFeature([], tf.string),\n    }\n    \n    example = tf.io.parse_single_example(example, features)\n    \n    image = tf.image.decode_jpeg(example['image'], channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size will be needed for TPU\n    idnum = example['id']\n    return image,idnum\n\ndef load_test_dataset(filenames):    \n    #For optimal performance, it is recommended to use the following code to read from multiple TFRecord files at once. \n    # This code will read from N files in parallel and disregard data order in favor of reading speed.\n    \n    option_no_order = tf.data.Options()\n    option_no_order.experimental_deterministic = False\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO)\n    dataset = dataset.with_options(option_no_order)\n    dataset = dataset.map(read_test_tfrecord, num_parallel_calls=AUTO)\n    return dataset\n\n\ndef get_test_dataset(filenames):\n    dataset = load_test_dataset(filenames)\n    dataset = dataset.cache() # This dataset fits in RAM\n    #dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ntest_dataset =  get_test_dataset(testing_filenames)","38f213c2":"test_ds = test_dataset\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","8f8b86a5":"print('Generating submission.csv file...')\n\n# Get image ids from test set and convert to unicode\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n# Write the submission file\nnp.savetxt(\n    'submission.csv',\n    np.rec.fromarrays([test_ids, predictions]),\n    fmt=['%s', '%d'],\n    delimiter=',',\n    header='id,label',\n    comments='',\n)\n\n# Look at the first few predictions\n!head submission.csv","f3cc856a":"# Confusion Matrix","a221b411":"# Predictions on test dataset"}}