{"cell_type":{"bf161784":"code","bdca76b5":"code","a78f0d9d":"code","94e4bd22":"code","99da29d3":"code","e3699b56":"code","b16c63b3":"code","896d1e28":"code","7e54e42e":"code","57541fb1":"code","681e830f":"code","2fcfe226":"code","d0c8df48":"code","54c3cb11":"markdown","5ae9b7ac":"markdown","5a152e30":"markdown","fb38315a":"markdown","6ac583f3":"markdown","7d7cf900":"markdown","3c995e64":"markdown","4a8cfdde":"markdown","81e75cd3":"markdown","49ce87c9":"markdown","ccd79785":"markdown","066fe2d6":"markdown","84839577":"markdown","3dd03ae6":"markdown","a31bf504":"markdown","2ac9d2ff":"markdown","b25b4877":"markdown","bce7a8f2":"markdown","ad51003c":"markdown","82ef6409":"markdown","1e6f21e7":"markdown","9704f45b":"markdown","891b8b1c":"markdown"},"source":{"bf161784":"!pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n!pip install fastai==2.0.9","bdca76b5":"import random, os\nimport numpy as np\nimport torch\nfrom fastai.vision.all import *","a78f0d9d":"def seed_everything(seed=0):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything()\npath = Path('\/kaggle\/input\/lego-minifigures-classification\/')\nlego_data = pd.read_csv(path\/'index.csv', index_col=0);lego_data.head()\nlego_metadata = pd.read_csv(path\/'metadata.csv', index_col=0); lego_metadata.head()\ndf_lego = pd.merge(lego_data, lego_metadata[['class_id', 'minifigure_name']], on='class_id')\ndf_lego['labels'] = df_lego['minifigure_name'].apply(lambda x: x.lower())\ndf_lego['is_valid'] = df_lego['train-valid'].apply(lambda x:x=='train')\ndf_lego['fname'] = df_lego['path']; df_lego.head()","94e4bd22":"data = ImageDataLoaders.from_df(df_lego, path, valid_pct=0.10,\n                                   item_tfms=Resize(412),\n                                   bs=10, num_workers=4, valid_col='is_valid', label_col=\"labels\")","99da29d3":"data.show_batch()\n","e3699b56":"data","b16c63b3":"learn = cnn_learner(data, resnet152, metrics=[error_rate, accuracy], model_dir = Path('..\/kaggle\/working'),path = Path(\".\"))","896d1e28":"learn.lr_find()","7e54e42e":"lr1 = 1e-3\nlr2 = 1e-1\nlearn.fit_one_cycle(100,slice(lr1,lr2),cbs=EarlyStoppingCallback(patience=2))","57541fb1":"# lr1 = 1e-3\nlr = 1e-1\nlearn.fit_one_cycle(200,slice(lr),cbs=EarlyStoppingCallback(patience=2))","681e830f":"learn.unfreeze()\nlearn.lr_find()\nlearn.fit_one_cycle(100,slice(1e-1),cbs=EarlyStoppingCallback(patience=3))","2fcfe226":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","d0c8df48":"learn.export()\nlearn.model_dir = \"\/kaggle\/working\"\nlearn.save(\"stage-1\")","54c3cb11":"<a id=\"9\"><\/a>\n<font color=\"blue\" size=+2.5><b>3.4 Print Classes present in the data<\/b><\/font>\n<br\/>\n\n* data.c \u2014 How many classes are there in our dataset?\n* len(data.train_ds) \u2014 What is the size of our training dataset?\n* len(data.valid_ds) \u2014 What is the size of our validation dataset?","5ae9b7ac":"<a id=\"2\"><\/a>\n<font color=\"blue\" size=+2.5><b>1.2  What is CNN ?<\/b><\/font>\n<br\/>\n<br\/>\n![image.png](attachment:image.png)\n**CNN stands for Convolutional Neural Network which is a specialized neural network for processing data that has an input shape like a 2D matrix like images. CNN's are typically used for image detection and classification.**","5a152e30":"<font size=\"+3\" color=blue><b> <center><u>LEGO - Minifigures Classification For Beginner<\/u><\/center><\/b><\/font>","fb38315a":"<a id=\"16\"><\/a>\n<font color=\"blue\" size=+2.5><b>5.3 Save and Load Model<\/b><\/font>\n<br\/>\n","6ac583f3":"![image.png](attachment:image.png)","7d7cf900":"<a id=\"14\"><\/a>\n<font color=\"blue\" size=+2.5><b>5.1 Interpret the results<\/b><\/font>\n<br\/>","3c995e64":"<a id=\"17\"><\/a>\n<font color=\"blue\" size=+2.5><b>5.4 Sources<\/b><\/font>\n<br\/>\n* [Fastai MOOC](https:\/\/course.fast.ai\/)\n* [Fastai library](https:\/\/docs.fast.ai\/)","4a8cfdde":"# Objective\n\nThe aim of this kernel is to provide all the tips and tricks required to LEGO CLASSIFICATION model on Given image dataset in a single page.This kernel will hold almost all steps and steps required to implement image classification algorithm using SOTA such as ResNET on given Dataset.It could be a great time saver for you.Just utilize it anytime when you are working on Image Classification.\n\nI have learned them from [FastAI](https:\/\/docs.fast.ai\/)","81e75cd3":"<a id=\"4\"><\/a>\n<font color=\"blue\" size=+2.5><b>2.1 Installation<\/b><\/font>\n* Numpy\n* Pandas\n* Matplotlib\n* Fastai","49ce87c9":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of content<\/h3>\n\n<font color=\"blue\" size=+1><b>Introduction<\/b><\/font>\n* [1. What is CNN ?](#2)\n* [2. What is Transfer Learning ?](#3)    \n\n<font color=\"blue\" size=+1><b>Library<\/b><\/font>\n* [1. Installation](#4)\n* [2. Import Libraries ](#5)\n    \n<font color=\"blue\" size=+1><b> Load and view your data <\/b><\/font>\n* [1. Setting up path for training data ](#6)\n* [2. Data Loading For training ](#7)\n* [3. Data Explorations ](#8)\n* [4. Print Classes present in the data ](#9)\n\n<font color=\"blue\" size=+1><b> Create and train a model <\/b><\/font>\n* [1. Create Models ](#10)\n* [2. Train Model ](#11)\n* [3. Finding LR ](#12)\n* [4. Finetuning HyperParameter](#13)\n\n<font color=\"blue\" size=+1><b> Others <\/b><\/font>\n* [1. Interpret the results](#14)\n* [2. Prediction Using Trained Model](#15)\n* [3. Save and Load Model](#16)\n* [4. Sources](#17)","ccd79785":"<a id=\"3\"><\/a>\n<font color=\"blue\" size=+2.5><b>1.3  What is Transfer Learning ?<\/b><\/font>\n<br\/>\n<br\/>\n![image.png](attachment:image.png)\n**Transfer learning is a machine learning technique where a model trained on one task is re-purposed on a second related task.**","066fe2d6":"<a id=\"13\"><\/a>\n<font color=\"blue\" size=+2.5><b>4.4 Hyper Parameter Tuning<\/b><\/font>\n<br\/>","84839577":"<font size=\"+1\" color=red ><b>Please Upvote my kernel and keep it in your favourite section if you think it is helpful.<\/b><\/font>","3dd03ae6":"<a id=\"5\"><\/a>\n\n\n<font color=\"blue\" size=+2.5><b>2. Library<\/b><\/font>","a31bf504":"<a id=\"8\"><\/a>\n<font color=\"blue\" size=+2.5><b>3.3 Data Explorations<\/b><\/font>\n<br\/>\n\n*Our image dataset is stored as .jpg files in 2 different folders, with each folder bearing the name of model of the images contained in the folder. We use the ImageDataBunch.from_folder() function to load the images and assign labels the images based on the name of the folder they\u2019re read from.*","2ac9d2ff":"<a id=\"6\"><\/a>\n<font color=\"blue\" size=+2.5><b>3.1 Setting up path for training data<\/b><\/font>\n\n**Point to be Noted: Number of elements in a list of path is same as number of classes you have**","b25b4877":"<a id=\"18\"><\/a>\n<font color=\"blue\" size=+2.5><b>Feedback and Support<\/b><\/font>\n<br\/>\n* Your feedback is much appreciated\n* Please UPVOTE if you LIKE this notebook\n* Comment if you have any doubts or you found any errors in the notebook","bce7a8f2":"<a id=\"11\"><\/a>\n<font color=\"blue\" size=+2.5><b>4.2 Finding LR<\/b><\/font>\n<br\/>","ad51003c":"<a id=\"12\"><\/a>\n<font color=\"blue\" size=+2.5><b>4.3 Train Model<\/b><\/font>\n<br\/>","82ef6409":"<a id=\"10\"><\/a>\n<font color=\"blue\" size=+2.5><b>4.1 Create Model<\/b><\/font>\n<br\/>\n* We now use a pre-trained ResNet50 Convolutional Neural Net model, and use transfer learning to learn weights of only the last layer of the network.\n* Why Transfer learning? Because with transfer learning, you begin with an existing (trained) neural network used for image recognition \u2014 and then tweak it a bit (or more) here and there to train a model for your particular use case. And why do we do that? Training a reasonable neural network would mean needing approximately 300,000 image samples, and to achieve really good performance, we\u2019re going to need at least a million images.\n* In our case, we have approximately 4000+ images in our training set \u2014 you have one guess to decide if that would have been enough if were to train a neural net from scratch.\n* We use the create_cnn() function for loading a pre-trained ResNet18 network, that was trained on around a million images from the ImageNet database.","1e6f21e7":"<a id=\"5\"><\/a>\n<font color=\"blue\" size=+2.5><b>2.2 Library Import<\/b><\/font>","9704f45b":"<a id=\"7\"><\/a>\n<font color=\"blue\" size=+2.5><b>3.2 Data Loading For training<\/b><\/font>\n<br\/>\n\n**Things to be remember:**\n* Decide validation percentage ( 0.2 => 20% )\n* Provide path for training data\n* [Decide augmentations criteria (optional)](https:\/\/www.kaggle.com\/init27\/introduction-to-image-augmentation-using-fastai\/)\n* Decide image size (which is 224 in my case)\n* Test data can also be added but it's optional","891b8b1c":"<a id=\"1\"><\/a>\n<font color=\"blue\" size=+2.5><b>Introduction<\/b><\/font>\n"}}