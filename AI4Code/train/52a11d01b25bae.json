{"cell_type":{"4b557873":"code","dfdc2555":"code","a115b6bc":"code","6c2fce1b":"code","6d42aea3":"code","88f03b57":"code","fc02d79e":"code","7700930e":"code","5d5a3fc8":"code","6fd37f35":"code","b675065b":"markdown","7247aa81":"markdown","bda44ac6":"markdown","9c669ad1":"markdown","d6585ff3":"markdown","cc6f0033":"markdown","17a734f3":"markdown"},"source":{"4b557873":"import numpy as np\nimport pandas as pd\n\nphishing_data = pd.read_csv('..\/input\/Website Phishing.csv')\nprint(phishing_data.columns)\nphishing_data.head()\n","dfdc2555":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\na=len(phishing_data[phishing_data.Result==0])\nb=len(phishing_data[phishing_data.Result==-1])\nc=len(phishing_data[phishing_data.Result==1])\nprint(a,\"times suspecious(0) repeated in Result\")\nprint(b,\"times phishy(-1) repeated in Result\")\nprint(c,\"times legitimate(1) repeated in Result\")\nsns.countplot(phishing_data['Result'])\n","a115b6bc":"sns.heatmap(phishing_data.corr(),annot=True)\n","6c2fce1b":"phishing_data.info()\nphishing_data.describe()\n","6d42aea3":"x = phishing_data.drop('Result',axis=1).values \ny = phishing_data['Result'].values\n\n","88f03b57":"#splitting data holdout method\n\nfrom sklearn.model_selection import train_test_split\n#splitting data\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=300)\n","fc02d79e":"#multiple class clasification one-vs-one\nfrom sklearn.svm import SVC\nfrom sklearn.multiclass import OneVsOneClassifier\nfrom sklearn.model_selection import cross_val_score,cross_val_predict\n\nsvm_model_oneVSone = OneVsOneClassifier(SVC(kernel='linear', C=1, gamma=0.1))\nsvm_model_oneVSone.fit(x_train, y_train)\ny_pred1 = cross_val_predict(svm_model_oneVSone,x_train,y_train,cv=10)\ny_pred1 = svm_model_oneVSone.predict(x_test)\n\n# accuracy and confusion matric\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix ,f1_score\n\ncm = confusion_matrix(y_test, y_pred1) \nprint(\"confusion_matrix: \")\nprint(cm)\nscore = f1_score(y_test , y_pred1,average=None)\nprint(\"f1_score: \",score)\ncross_val_score1 = cross_val_score(svm_model_oneVSone,x_train,y_train,cv=10)\nprint(\"cross validation mean : \",cross_val_score1.mean())\n","7700930e":"#multiple class clasification one-vs-Rest\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import LinearSVC\n\nsvm_model_oneVSall = OneVsRestClassifier(LinearSVC(random_state=300))\n#svm_model_oneVSall = LinearSVC(random_state=300)\nsvm_model_oneVSall.fit(x_train, y_train)\ny_pred_multiclass = svm_model_oneVSall.predict(x_test)\n\n# accuracy and confusion matric\nfrom sklearn.metrics import confusion_matrix ,f1_score\n\ncm = confusion_matrix(y_test, y_pred_multiclass) \nprint(\"confusion_matrix: \")\nprint(cm)\nscore = f1_score(y_test , y_pred_multiclass,average=None)\nprint(\"f1_score: \",score)\ncross_val_score2 = cross_val_score(svm_model_oneVSall,x_train,y_train,cv=10)\nprint(\"cross validation mean : \",cross_val_score2.mean())\n","5d5a3fc8":"from sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import GridSearchCV\n\n# Create the parameter grid based on the results of random search \nparams_grid = [{'kernel': ['rbf'], 'gamma': [0.001, 0.01, 0.1,0.7],'C': [0.1, 1, 10,100]},\n               {'kernel': ['linear'], 'gamma': [0.001, 0.01, 0.1, 0.7,1,10],'C': [0.1, 1, 10,100]},\n               {'kernel': ['poly'],'gamma': [0.001, 0.01, 0.1,0.7, 1,10],'C': [0.1, 1, 10,100]}]\n\n\n# Performing CV to tune parameters for best SVM fit \nsvm_model = GridSearchCV(SVC(), params_grid, cv= 5)\nsvm_model.fit(x_train, y_train)\n\n# View the accuracy score\nprint('Best score for training data:', svm_model.best_score_,\"\\n\") \n\n# View the best parameters for the model found using grid search\nprint('Best C:',svm_model.best_estimator_.C,\"\\n\") \nprint('Best Kernel:',svm_model.best_estimator_.kernel,\"\\n\")\nprint('Best Gamma:',svm_model.best_estimator_.gamma,\"\\n\")\n\nfinal_model = svm_model.best_estimator_\ny_pred_best = final_model.predict(x_test)\ny_pred_label = list(y_pred)\n\n","6fd37f35":"# accuracy and confusion matric\nfrom sklearn.metrics import confusion_matrix ,f1_score\n\ncm = confusion_matrix(y_test, y_pred_best) \nprint(\"confusion_matrix: \")\nprint(cm)\nscore = f1_score(y_test , y_pred_best,average=None)\nprint(\"f1_score: \",score)\ncross_val_score3 = cross_val_score(final_model,x_train,y_train,cv=10)\nprint(\"cross validation mean : \",cross_val_score3.mean())\n","b675065b":"# STEP #2: Explore \/Visualze Data set","7247aa81":"# STEP #5: Model one-vs-rest Training","bda44ac6":"# STEP #6: Model hyperparameter tuning using GridSearch and Cross Validation","9c669ad1":"  # Introduction\nMulticlass Website Phishing dataset problem. Fitting SVMs algorithm and creating accuracy score and confusion matrix of predicted values and real values. I was able to get 88 % accuracy.\n","d6585ff3":"# STEP #3: Loading data","cc6f0033":"# STEP #4: Model one-vs-one Training","17a734f3":"# STEP #1: Import Dataset"}}