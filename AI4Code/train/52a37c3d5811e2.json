{"cell_type":{"98cf7045":"code","5f542a04":"code","6abb4b8d":"code","61484bfb":"code","83f2bf3a":"code","c5a19529":"code","95726952":"code","6b493c17":"code","96ad094a":"code","ef016aa7":"code","d7da1095":"code","bd808f8c":"code","03eebeb5":"code","4f6ae475":"code","db1f79ca":"code","6f51aa88":"code","b60a9a5d":"code","a53daac6":"code","856a59ce":"code","b7f235a8":"code","18dbb0c0":"code","26dd34b1":"code","2a5c58a7":"code","717a0b4a":"code","bdb9b427":"code","c5d8da72":"code","b354a696":"code","48420f7b":"code","46a9faee":"code","467adb4c":"code","faec4447":"code","15351d6d":"code","392f8df1":"code","e5d0c67d":"code","726fb152":"markdown","8c8f76b1":"markdown","6e0bcc7a":"markdown","ab4afff7":"markdown","62f80faa":"markdown","569e0830":"markdown","581ed6c4":"markdown","3b811dfd":"markdown","7173060a":"markdown","d6129f84":"markdown","c024f0ff":"markdown","1779dcb4":"markdown","fefb7853":"markdown","d6cc61b2":"markdown","bd46b33c":"markdown","6df8297a":"markdown","d5c14896":"markdown","178c3c2f":"markdown","566802e8":"markdown","00eb6c0b":"markdown","f5e425dc":"markdown","19018e9e":"markdown","b0cb0e75":"markdown","9f19b675":"markdown","13b8f61b":"markdown","3425852c":"markdown","c27e4b74":"markdown","9bcf65c4":"markdown","51cbb7bf":"markdown","02ba4dca":"markdown","5172c1e3":"markdown","91284fa7":"markdown"},"source":{"98cf7045":"# import libraries used in the project:\nimport csv\nimport datetime as dt\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport string\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n","5f542a04":"# open the hacker_news.csv file\nf = open('..\/input\/HN_posts_year_to_Sep_26_2016.csv')\n\n#parse the data from the file\nreader = csv.reader(f)\n\n# convert data into a list of lists format\nhn = list(reader)","6abb4b8d":"# check length of dataset:\nlen(hn)","61484bfb":"# extract header from data and assign it to variable headers:\nheaders = hn[0]\nprint(\"Headers:\", headers)","83f2bf3a":"# remove headers from hn:\nhn = hn[1:]\n\n#print first and last 5 rows of dataset:\nprint(\"HN first row\", hn[1:5])","c5a19529":"#create empty list of dates\ndates =[]\n\n# itterate over dataset and convert each create_at into 'datetime.datetime' class.\nfor row in hn:\n    d = dt.datetime.strptime(row[6],\"%m\/%d\/%Y %H:%M\" )\n    #append each create_at to dates list:\n    dates.append(d)\n\n# sort dates using sorted():\nsorted_dates = sorted(dates)","95726952":"# find how many days are in dataset:\ndays = (sorted_dates[-1].date()- sorted_dates[0].date()).days\nprint(\"Days:\", days)\n# find how many weeks are in dataset:\nweeks = days\/7\nprint(\"Weeks:\", weeks)\n","6b493c17":"# calculate dateand time that is exactly 385 days away from last date in dataset, and name it as last_datetime:\nlast_datetime = sorted_dates[-1] -  dt.timedelta(days=385)\nprint(last_datetime)","96ad094a":"# create new dataset hn_new that only contains posts older than last_datetime:\nhn_new = []\n\nfor row in hn:\n    d = dt.datetime.strptime(row[6],\"%m\/%d\/%Y %H:%M\" )\n    if d >= last_datetime:\n        hn_new.append(row)      ","ef016aa7":"# check current oldest date of initial dataset:\nprint(\"Initial dataset\")\nprint(\"first row of dataset:\", hn[0] )\nprint(\"last row of dataset:\", hn[-1] )\nprint(\"-------------------------------\")\nprint(\"Current dataset\")\n# check if last date of new dataset: \nprint(\"first row of dataset:\", hn_new[0] )\nprint(\"last row of dataset:\", hn_new[-1])","d7da1095":"# clean titles and split them in separate words:\n#-------------------------------------------------------\n# create empty list of words:\nwords= []\n\n# for each row in dataset:\nfor row in hn_new:\n    #assign the title in each post to variable called title:\n    title = row[1]\n    #remove punctuations and split title into separate words:\n    for c in string.punctuation:\n        title = title.replace(c,\" \")\n        splited_title = title.split(\" \")\n        \n    #convert all words into lower case and append to list words:    \n    for word in splited_title:\n        word = word.lower()\n        words.append(word)       \n            ","bd808f8c":"# create dictionary that will show how many times each word is mentioned in posts:\n#-----------------------------------------------------------------------------------\n#create empty dictionary:\ncount_dictionary = {}\n\n# for each word in words list:\nfor word in words:\n    # check if word already in dictionary, and if yes, append 1 to count:\n    if word in count_dictionary.keys():\n        #add points to the word in count_dictionary:\n        count_dictionary[word] +=1\n    # if not, add this word in discionary with count =1:    \n    else:\n        count_dictionary[word] = 1\n   ","03eebeb5":"# sort dictionary by counts and display top 50 words in count_dictionary:\nsorted(count_dictionary.items(), reverse = True, key = lambda x: x[1] )[:50]\n","4f6ae475":"# separate posts with Ask HN and Show HN types from other posts:\n#-----------------------------------------------------------------\n# create empty lists to store ask, show and other posts:\nask_posts = []\nshow_posts = []\nother_posts = []\n\n# for each row in dataset:\nfor row in hn_new:\n    #assign the title in each post to variable called title:\n    title = row[1]\n    \n    #if title has 'Ask HN' phrase in it, add it to ask_posts list:\n    if 'Ask HN' in title:\n        ask_posts.append(row)\n    #if title has 'Show HN' phrase in it, add it to show_posts list:    \n    elif 'Show HN' in title:\n        show_posts.append(row)   \n    #else add post to other_posts list:    \n    else:\n        other_posts.append(row)\n    ","db1f79ca":"print(\"Number of Ask HN posts:\", len(ask_posts))\nprint(\"Number of Show HN posts:\",len(show_posts))\nprint(\"Number of other posts:\",len(other_posts))  ","6f51aa88":"#check how often users are talking about topics related to data, science and data science:\n#-------------------------------------------------------------------------------------------\n\n#create empty lists to store posts about data, science and data_science :\ndata_posts=[]\ndata_science_posts=[]\ndata_science_list = ['data', 'scien']\nscience_posts = []\ngoogle_posts = []\nstartup_posts = []\n\n#for each row in dataset:\nfor row in hn_new:\n    #assign the title in each post to variable called title:\n    title = row[1]\n    #clean title to easier distinguish identify words:\n    for c in string.punctuation:\n        words= []\n        title = title.replace(c,\" \")\n        splited_title = title.split(\" \")  \n        for word in splited_title:\n            word = word.lower()\n            words.append(word)\n            \n    # join clean words from title back together:         \n    words = ' '.join(words)        \n    \n    #if there are both 'data' and 'scien' in the title, append it to data_scince posts list:\n    if all(word in words for word in data_science_list):\n        data_science_posts.append(row)      \n    #if there is word 'data' in title, append it to data_posts list:    \n    if 'data' in words:\n        data_posts.append(row)\n    #if there is root 'scien' in title, append it to science_posts list:       \n    if 'scien' in words:\n        science_posts.append(row)\n    #if there is word 'google' in title, append it to google_posts lists:\n    if 'google' in words:\n        google_posts.append(row)\n","b60a9a5d":"print(\"Total amount of posts:\", len(hn_new))\nprint(\"Number of posts about data:\",len(data_posts))\nprint(\"Number of posts about data science:\",len(data_science_posts))\nprint(\"Number of posts about science:\",len(science_posts))\n","a53daac6":"print(\"Number of posts about Google:\",len(google_posts))\n","856a59ce":"# create dictionary that contains points received for this specific title:\n# --------------------------------------------------------------------------------------------------------\n# create empty dictionary:\npoints_dictionary ={}\n\n\n#for each row in dataset:\nfor row in hn_new:\n    #assign the title in each post to variable called title:\n    words = []\n    title = row[1]\n    for c in string.punctuation:\n        title = title.replace(c,\" \")\n        splited_title = title.split(\" \")\n        \n        #convert all words into lower case and append to list words:    \n    for word in splited_title:\n        word = word.lower()\n        words.append(word)  \n        \n    for word in words:\n            # check if word already in dictionary, and if yes, append 1 to count:\n        if word in points_dictionary.keys():\n            #add points to the word in count_dictionary:\n            points_dictionary[word] += int(row[3])\n        # if not, add this word in discionary with count =1:    \n        else:\n            points_dictionary[word] = int(row[3])","b7f235a8":"# sort dictionary by counts and display top 50 words in point_dictionary:\nsorted(points_dictionary.items(), reverse = True, key = lambda x: x[1] )[:50]\n","18dbb0c0":"#Find the total number of points in ask and show posts:\n#--------------------------------------------------------\n#initialize variables:\ntotal_ask_points = 0\ntotal_show_points = 0\ntotal_data_points = 0\nall_points=0\ntotal_google_points = 0\ntotal_startup_points = 0\n\n## add comments for each ask_post together\nfor row in ask_posts:\n    total_ask_points += int(row[3])\n    \n## add comments for each show_post together:\nfor row in show_posts:\n    total_show_points += int(row[3])\n    \n## add comments for each data_science_post together:\nfor row in data_posts:\n    total_data_points += int(row[3])  \n    \n## add all comments for all posts together:\nfor row in hn_new:\n    all_points += int(row[3])\n    \n## add all comments for google posts together:    \nfor row in google_posts:\n    total_google_points += int(row[3])    \n    \n    \n#calculate and print average amount of posts for posts:\n#----------------------------------------------------------\navg_ask_points = total_ask_points\/len(ask_posts)\navg_show_points = total_show_points\/len(show_posts)\navg_data_points = total_data_points\/len(data_posts)\navg_all_points = all_points\/len(hn_new)\navg_google_points = total_google_points\/len(google_posts)\n\nprint('%s: %.2f'% (\"Average amount of points for all posts\",avg_all_points))\nprint('%s: %.2f'% (\"Average amount of points for Ask HN posts\",avg_ask_points))\nprint('%s: %.2f'% (\"Average amount of points for Show HN posts\",avg_show_points))\nprint('%s: %.2f'% (\"Average amount of points for posts about data\",avg_data_points))\nprint('%s: %.2f'% (\"Average amount of points for google posts\",avg_google_points))","26dd34b1":"top_point_dictionary = {}\n\nfor key in points_dictionary.keys():\n    if count_dictionary[key] > 100:\n        top_point_dictionary[key] = points_dictionary[key]\/count_dictionary[key]\n        ","2a5c58a7":"# sort dictionary by counts and display top 50 words in point_dictionary:\nsorted(top_point_dictionary.items(), reverse = True, key = lambda x: x[1] )[:50]","717a0b4a":"#Find the total number of comments in ask and show posts:\n#--------------------------------------------------------\n#initialize variables:\ntotal_ask_comments = 0\ntotal_show_comments = 0\ntotal_data_comments = 0\ntotal_google_comments = 0\nall_comments=0\n\n## add comments for each ask_post together\nfor row in ask_posts:\n    total_ask_comments += int(row[4])\n    \n## add comments for each show_post together:\nfor row in show_posts:\n    total_show_comments += int(row[4])\n    \n## add comments for each data_science_post together:\nfor row in data_posts:\n    total_data_comments += int(row[4])  \n    \n## add all comments for google posts together:    \nfor row in google_posts:\n    total_google_comments += int(row[4])          \n    \n## add all comments for all posts together:\nfor row in hn_new:\n    all_comments += int(row[4])      \n    \n#calculate and print average amount of posts for posts:\n#----------------------------------------------------------\navg_ask_comments = total_ask_comments\/len(ask_posts)\navg_show_comments = total_show_comments\/len(show_posts)\navg_data_comments = total_data_comments\/len(data_posts)\navg_google_comments = total_google_comments\/len(google_posts)\navg_all_comments = all_comments\/len(hn)\n\nprint(\"Average amount of comments for all posts:\",avg_all_comments)\nprint(\"Average amount of comments for Ask posts:\",avg_ask_comments)\nprint(\"Average amount of comments for Show posts:\",avg_show_comments)\nprint(\"Average amount of comments for posts about data science:\",avg_data_comments)\nprint(\"Average amount of comments for google posts:\",avg_google_comments)\n","bdb9b427":"# create dictionary that contains total comments received for each word in titles:\n# --------------------------------------------------------------------------\n# create empty dictionary:\ncomments_dictionary ={}\n\n\n#for each row in dataset:\nfor row in hn_new:\n    #assign the title in each post to variable called title:\n    words = []\n    title = row[1]\n    for c in string.punctuation:\n        title = title.replace(c,\" \")\n        splited_title = title.split(\" \")\n        \n        #convert all words into lower case and append to list words:    \n    for word in splited_title:\n        word = word.lower()\n        words.append(word)  \n        \n    for word in words:\n            # check if word already in dictionary, and if yes, append 1 to count:\n        if word in comments_dictionary.keys():\n            #add points to the word in count_dictionary:\n            comments_dictionary[word] += int(row[4])\n        # if not, add this word in discionary with count =1:    \n        else:\n            comments_dictionary[word] = int(row[4])","c5d8da72":"# create dictionary that contains average amount of comments received for each word in titles:\ntop_comments_dictionary = {}\n\nfor key in comments_dictionary.keys():\n    if count_dictionary[key] > 100:\n        top_comments_dictionary[key] = comments_dictionary[key]\/count_dictionary[key]\n        ","b354a696":"# sort dictionary by counts and display top 50 words in point_dictionary:\nsorted(top_comments_dictionary.items(), reverse = True, key = lambda x: x[1] )[:50]","48420f7b":"# Create function that takes list of posts as input and calculates average amount of comments for this posts by hour:\n#--------------------------------------------------------------------------------------------------------------------\n\ndef average_by(posts):\n    \n    #create an empty list :\n    result_list=[]\n\n    # for each row in ask_posts creare a list containing create_date and number of comments:\n    for row in posts:\n        result_list.append([row[6], int(row[4]), int(row[3])])\n    \n    \n    #create empty dictionaries to store how may posts and comments vs hour posted:    \n    counts_by_hour = {}\n    comments_by_hour = {}\n    points_by_hour = {}\n    counts_by_day = {}\n    comments_by_day = {}\n    points_by_day = {}\n\n    # for each row in result_list count how many comments and posts are posted and add them into created dictionaries:\n    for row in result_list:\n        d = dt.datetime.strptime(row[0],\"%m\/%d\/%Y %H:%M\" )\n        h = d.hour\n        w = d.isoweekday()\n\n        if str(h) in counts_by_hour.keys():\n            counts_by_hour[str(h)] +=1\n            comments_by_hour[str(h)] += row[1]\n            points_by_hour[str(h)] += row[2]\n        else:\n            counts_by_hour[str(h)] = 1\n            comments_by_hour[str(h)] = row[1]\n            points_by_hour[str(h)] = row[2]\n            \n        if str(w) in counts_by_day.keys():\n            counts_by_day[str(w)] +=1\n            comments_by_day[str(w)] += row[1]\n            points_by_day[str(w)] += row[2]\n        else:\n            counts_by_day[str(w)] = 1\n            comments_by_day[str(w)] = row[1]    \n            points_by_day[str(w)] = row[2]\n            \n    return counts_by_hour , comments_by_hour, counts_by_day, comments_by_day, points_by_hour, points_by_day","46a9faee":"# calculate average number of comments per post:\ndef avg_by(counts_by, comments_by):  \n    \n    avg_by = []\n\n    for key in comments_by:\n    \n        avg_by.append([key, comments_by[key]\/counts_by[key]]) \n        \n    return avg_by   ","467adb4c":"# apply average_by_hour() and sorted_swap() functions on ask, data and all posts:\n\nask_counts_by_hour , ask_comments_by_hour, ask_counts_by_day, ask_comments_by_day,\\\n    ask_points_by_hour, ask_points_by_day = average_by(ask_posts)\navg_comments_by_hour_ask = avg_by(ask_counts_by_hour , ask_comments_by_hour)\navg_comments_by_day_ask = avg_by(ask_counts_by_day , ask_comments_by_day)\navg_points_by_hour_ask = avg_by(ask_counts_by_hour , ask_points_by_hour)\navg_points_by_day_ask = avg_by(ask_counts_by_day , ask_points_by_day)\n\ndata_counts_by_hour , data_comments_by_hour, data_counts_by_day, data_comments_by_day,\\\n    data_points_by_hour, data_points_by_day = average_by(data_posts)\navg_comments_by_hour_data = avg_by(data_counts_by_hour , data_comments_by_hour)\navg_comments_by_day_data = avg_by(data_counts_by_day , data_comments_by_day)\navg_points_by_hour_data = avg_by(data_counts_by_hour , data_points_by_hour)\navg_points_by_day_data = avg_by(data_counts_by_day , data_points_by_day)\n\ngoogle_counts_by_hour , google_comments_by_hour, google_counts_by_day, google_comments_by_day,\\\n    google_points_by_hour, google_points_by_day = average_by(google_posts)\navg_comments_by_hour_google = avg_by(google_counts_by_hour , google_comments_by_hour)\navg_comments_by_day_google = avg_by(google_counts_by_day , google_comments_by_day)\navg_points_by_hour_google = avg_by(google_counts_by_hour , google_points_by_hour)\navg_points_by_day_google = avg_by(google_counts_by_day , google_points_by_day)\n\nall_counts_by_hour , all_comments_by_hour, all_counts_by_day, all_comments_by_day,\\\n    all_points_by_hour, all_points_by_day = average_by(hn_new)\navg_comments_by_hour_all = avg_by(all_counts_by_hour , all_comments_by_hour)\navg_comments_by_day_all = avg_by(all_counts_by_day , all_comments_by_day)\navg_points_by_hour_all = avg_by(all_counts_by_hour , all_points_by_hour)\navg_points_by_day_all = avg_by(all_counts_by_day , all_points_by_day)","faec4447":"# create function that takes list unsorted posts and sorts it by hour:\n#----------------------------------------------------------------------\ndef sorted_avg(avg_list):\n    \n    sorted_hour = pd.DataFrame(avg_list)\n    sorted_hour.iloc[:,0]=sorted_hour.iloc[:,0].astype(int)\n    sorted_hour= sorted_hour.sort_values(by= 0)   \n    \n    return sorted_hour","15351d6d":"# create function that takes dictionary of posts and returns it in form of the list, but sorted by hour:\n#--------------------------------------------------------------------------------------------------------\n\ndef sorted_count(dictionary):\n\n    list_key_value = [ [k,v] for k, v in dictionary.items()]\n\n    sorted_count = pd.DataFrame(list_key_value)\n    sorted_count.iloc[:,0]=sorted_count.iloc[:,0].astype(int)\n    sorted_count= sorted_count.sort_values(by= 0)  \n\n    return sorted_count","392f8df1":"# plot average amount of comments by hour:\n\n# convert sorted_hour to dataframe and sort by hour:\nsorted_comments_hour_ask = sorted_avg(avg_comments_by_hour_ask)\nsorted_comments_hour_data = sorted_avg(avg_comments_by_hour_data)\nsorted_comments_hour_google = sorted_avg(avg_comments_by_hour_google)\nsorted_comments_hour_all = sorted_avg(avg_comments_by_hour_all)\n\n\n#convert counts_by_hour to dataframe and sort by hour :\nsorted_count_hour_ask = sorted_count(ask_counts_by_hour)\nsorted_count_hour_all = sorted_count(all_counts_by_hour)\nsorted_count_hour_data = sorted_count(data_counts_by_hour)\nsorted_count_hour_google = sorted_count(google_counts_by_hour)\n\n#convert points by hour to dataframe and sort by hour:\nsorted_points_hour_ask = sorted_avg(avg_points_by_hour_ask)\nsorted_points_hour_all = sorted_avg(avg_points_by_hour_all)\nsorted_points_hour_data = sorted_avg(avg_points_by_hour_data)\nsorted_points_hour_google = sorted_avg(avg_points_by_hour_google)\n\n\n#plot sorted by hour average amount comments for Ask HN posts\nfig, ax = plt.subplots(3,4)\nfig.set_size_inches(18, 9)\n\nax[0,0].bar(sorted_comments_hour_ask.iloc[:,0], sorted_comments_hour_ask.iloc[:,1], color = 'skyblue')\nax[0,0].set_title(\"Ask Posts\")\nax[0,0].set_ylabel(\"Average amount of\\n comments per Post\\n per hour\")\nax[0,1].bar(sorted_comments_hour_google.iloc[:,0], sorted_comments_hour_google.iloc[:,1], color = 'orange')\nax[0,1].set_title(\"Google Posts\")\nax[0,2].bar(sorted_comments_hour_data.iloc[:,0], sorted_comments_hour_data.iloc[:,1],  color ='green')\nax[0,2].set_title(\"Posts about Data\")\nax[0,3].bar(sorted_comments_hour_all.iloc[:,0], sorted_comments_hour_all.iloc[:,1], color = 'brown')\nax[0,3].set_title(\"All Posts\")\n\nax[1,0].bar(sorted_points_hour_ask.iloc[:,0], sorted_points_hour_ask.iloc[:,1]\/weeks, color = 'skyblue')\nax[1,0].set_ylabel(\"Average amount of\\n points per hour\")\nax[1,1].bar(sorted_points_hour_google.iloc[:,0], sorted_points_hour_google.iloc[:,1]\/weeks, color = 'orange')\nax[1,2].bar(sorted_points_hour_data.iloc[:,0], sorted_points_hour_data.iloc[:,1]\/weeks, color ='green')\nax[1,3].bar(sorted_points_hour_all.iloc[:,0], sorted_points_hour_all.iloc[:,1]\/weeks, color = 'brown')\n\nax[2,0].bar(sorted_count_hour_ask.iloc[:,0], sorted_count_hour_ask.iloc[:,1]\/weeks, color = 'skyblue')\nax[2,0].set_ylabel(\"Average amount of\\n posts per hour\")\nax[2,1].bar(sorted_count_hour_google.iloc[:,0], sorted_count_hour_google.iloc[:,1]\/weeks, color = 'orange')\nax[2,2].bar(sorted_count_hour_data.iloc[:,0], sorted_count_hour_data.iloc[:,1]\/weeks, color ='green')\nax[2,3].bar(sorted_count_hour_all.iloc[:,0], sorted_count_hour_all.iloc[:,1]\/weeks, color = 'brown')\n","e5d0c67d":"# plot average amount of comments by hour:\n\n# convert sorted_day to dataframe and sort by day:\nsorted_comments_day_ask = sorted_avg(avg_comments_by_day_ask)\nsorted_comments_day_data = sorted_avg(avg_comments_by_day_all)\nsorted_comments_day_all = sorted_avg(avg_comments_by_day_data)\nsorted_comments_day_google = sorted_avg(avg_comments_by_day_google)\n\n#convert counts_by_day to dataframe and sort by day :\nsorted_count_day_ask = sorted_count(ask_counts_by_day)\nsorted_count_day_all = sorted_count(all_counts_by_day)\nsorted_count_day_data = sorted_count(data_counts_by_day)\nsorted_count_day_google = sorted_count(google_counts_by_day)\n\n#convert points by day to dataframe and sort by day:\nsorted_points_day_ask = sorted_avg(avg_points_by_day_ask)\nsorted_points_day_all = sorted_avg(avg_points_by_day_all)\nsorted_points_day_data = sorted_avg(avg_points_by_day_data)\nsorted_points_day_google = sorted_avg(avg_points_by_day_google)\n\n#plot sorted by day average amount comments for Ask HN posts\nfig, ax = plt.subplots(3, 4)\nfig.set_size_inches(18, 9)\n\nax[0,0].bar(sorted_comments_day_ask.iloc[:,0], sorted_comments_day_ask.iloc[:,1], color = 'skyblue')\nax[0,0].set_title(\"Ask Posts\")\nax[0,0].set_ylabel(\"Average amount of\\n comments per Post\\n per week\")\nax[0,1].bar(sorted_comments_day_google.iloc[:,0], sorted_comments_day_google.iloc[:,1], color = 'orange')\nax[0,1].set_title(\"Google Posts\")\nax[0,2].bar(sorted_comments_day_data.iloc[:,0], sorted_comments_day_data.iloc[:,1],  color ='green')\nax[0,2].set_title(\"Posts about Data\")\nax[0,3].bar(sorted_comments_day_all.iloc[:,0], sorted_comments_day_all.iloc[:,1], color = 'brown')\nax[0,3].set_title(\"All Posts\")\n\nax[1,0].bar(sorted_points_day_ask.iloc[:,0], sorted_points_day_ask.iloc[:,1]\/weeks, color = 'skyblue')\nax[1,0].set_ylabel(\"Average amount of\\n points per week\")\nax[1,1].bar(sorted_points_day_google.iloc[:,0], sorted_points_day_google.iloc[:,1]\/weeks, color = 'orange')\nax[1,2].bar(sorted_points_day_data.iloc[:,0], sorted_points_day_data.iloc[:,1]\/weeks, color ='green')\nax[1,3].bar(sorted_points_day_all.iloc[:,0], sorted_points_day_all.iloc[:,1]\/weeks, color = 'brown')\n\n\nax[2,0].bar(sorted_count_day_ask.iloc[:,0], sorted_count_day_ask.iloc[:,1]\/weeks, color = 'skyblue')\nax[2,0].set_ylabel(\"Average amount of\\n posts per week\")\nax[2,1].bar(sorted_count_day_google.iloc[:,0], sorted_count_day_google.iloc[:,1]\/weeks, color = 'orange')\nax[2,2].bar(sorted_count_day_data.iloc[:,0], sorted_count_day_data.iloc[:,1]\/weeks, color ='green')\nax[2,3].bar(sorted_count_day_all.iloc[:,0], sorted_count_day_all.iloc[:,1]\/weeks, color = 'brown')\n","726fb152":"## What are the most common topics on Hacker News about?","8c8f76b1":"#### Conclusions about amount of Data posts on Hacker News:\n\n1. From 3749 posts about science, 795 posts are about data science (around 21 % of all posts about science)   \n2. From 292724 total posts on Hacker News 8374 are talking about data (around 2.9%). Also data is mentined in created dictionary among top 50 words (26th place) suggesting that it is very hot topic.\n3. According to dictionary calculation 'data' word was mentioned 6874 times in post titles, and 8374 posts have 'data' as root-word in them. ","6e0bcc7a":"#### top 50 words in points_dictionary:","ab4afff7":"## What are the most popular posts on Hacker News about?","62f80faa":"To understand what about are the most popular topics, lets create separate dictionary by average points.\nThere is no need to look into words that are only mentioned rarely in the dictionary, as sample will not be representative. Let's check only words that are mentioned in post titles more than 100 times:","569e0830":"To identify the most popular topics in Hacker News posts lets look at words that are used in titles and create a dictionary that will have 'words' as keys and points for each word as items:","581ed6c4":"#### Conclusions on average amount of comments for most frequent posts:\n\n1. Aks HN posts and posts about Google are commented more often than all posts in general: 10,4 and 8,5 vs 6,5 comments per post.\n2. Show HN posts and posts about Data are commented less often that all posts in general: 4,9 and 3,6 vs 6,5 comments per post\n","3b811dfd":"#### Conclusion about most commented of topics on Hacker News:\n\nFrom top_comments_dictionary can be concluded that most popular topics (topics that have significant amount of posts to judge and have highest amount of points on average) are:\n\n- Income, Lee, Hired, Poverty, Hiring, Decline, AlphaGo, etc. \n\nIt is interesting to mention that none of top counts is in this list. ","7173060a":"## What are the most commented posts on Hacker News about?","d6129f84":"## What users are talking about at Hacker News? ","c024f0ff":"#### Conclusions about comments and points vs hour of the day:   \n\nIn general users are more active in commenting and liking posts created on weekends and beginning of a week.\n \n#### Conclusions about average amount of posts vs hour of the day:  \nIn general posting activity increases by middle of the week and drops by the end of the week. On the weekends for all types of posts activity is very low.\n\n#### General conclusion: \n\nEven though users tend to post more in the middle of a week, according to statistics, posts created during weekends tend to recieve more comments. It is not surprising: as users are very active during middle of a week, posts created during weekends have more chances to be checked and commented than posts created in the middle of the week.\n","1779dcb4":"#### Conclusion about popularity of most common topics on Hacker News: \n\nEven though most common topics on Hacker News are Ask HN, Show HN, Data and Google, only posts about Google recieved on average more points that all posts in general on Hacker News.  \n","fefb7853":"#### top 50 words in top_comments_dictionary:","d6cc61b2":"To identify the most common topics in Hacker News posts lets look at words that are used in titles and create a dictionary that will have 'words' as keys and counts as items:","bd46b33c":"According to documentation: this data set is Hacker News posts from the last 12 months (up to September 26 2016).  \nLets check the exact amount of days, weeks and hours in dataset:","6df8297a":"#### Conclusion about popularity of topics on Hacker News:\n\nFrom top_point_dictionary can be concluded that most popular topics (topics that have significant amount of posts to judge and have highest amount of points on average) are:\n\n- Died, Lee, GitLab, AlphaGo, Sorced, Rust, Arrested, etc. \n\nIt is interesting to mention that none of top counts is in this list. ","d5c14896":"#### top 50 words in count_dictionary:","178c3c2f":"### Total amount of posts in Hacker News dataset for most frequent topics","566802e8":"## Summary and Conclusions :\n\nDuring the project it was discovered that:\n1. Most common topics on Hacker News are:\n    - 'Ask HN' and 'Show HN' posts\n    - Posts about topics related to words: 'Data', 'Google', 'new', 'app', 'US', etc.\n2. Most popular posts on Hacker News about topics related to words:\n    - 'Died', 'Lee', 'GitLab', 'AlphaGo', 'Sorced', 'Rust', 'Arrested', etc.\n3. Most commented posts on Hacker News about topics related to words:\n     - 'Income' , 'Lee' , 'Hired' , 'Poverty', 'Hiring', 'Decline', 'AlphaGo', etc.\n4. There is no difference in terms of average amount of comments and points for posts vs time of the day\n5. Posting activity of users for all types of posts is increasing starting from 10:00 in the morning until \napproximatelly 17:00. Then it tends to go down. Pick posting activity is between 15:00 and 17:00.\n6. In general users are more active in commenting and liking posts created on weekends and beginning of a week.\n7. In general posting activity increases by middle of the week and drops by the end of the week. On the weekends \nfor all types of posts activity is relatively low.","00eb6c0b":"The objective of this projects is to look into Hacker News posts titles to identify the most common topics that users are posting, liking and talking about. \n\nThere are four questions answered in this notebook:  \n- What are the most common topics on Hacker News about?\n- What are the most popular posts on Hacker News about?\n- What are the most commented posts on Hacker News about?\n- Is there difference in average amount of comments and points for posts created at different time of a day and day of a week? And is this difference the same for all types of posts? \n\n","f5e425dc":"the dataset contains 386 days of data, that is more than 55 fuul weeks. To have unbiased data while looking into data by week and hour, lets cut out one day from dataset, so that only 385 and full 55 weeks of data remains in dataset:","19018e9e":"#### Conclusions about amount of Google posts on Hacker News:\nAbout 2,2% of dataset is Ask HN posts (6435 out of 292724)\n","b0cb0e75":"It can be concluded that most common significant words in count_dictionary are: hn - abbreviation for Haker News, show, new, ask, data, google, app, us (probably most mean - US rather than us (can be investigated further, but not a topic for this project), web, startup. \n\n#### Posts' topics chosen for further research:\n1. Ask HN and Show HN posts:\nIt is not surprising that HN, Ask and Show words appear as most common.   \nAsk HN and Show HN posts are standard posts for Haker News in which users ask the Hacker News community a specific question or share some projects, product or in general some information. \n2. Post about Data.    \nIt is also interesting to investigate how many posts are about data science.\n3. Posts about Google \n","9f19b675":"## Is there difference in average amount of comments and points for posts created at different time of a day and day of a week? And is this difference the same for all types of posts? ","13b8f61b":"#### Conclusions about comments vs hour of the day:   \nIn general it is clear that for all posts fluctuations for average comments vs hours of a day are low. However, if to look separatelly by topics- fluctuations are bigger. It is difficult to say why exactly it happens, but most probably it is due to less datapoints for specific topics. \n\n#### Conclusions about points vs hour of the day:   \nGraphs are very similar to graphs for average amount of comments, with slight difference. It is natural as users commenting and liking behaviour is similar. If one person have seen a post that he\/she likes it is more probable that he\/she will comment this post rather than the post that he\/she didn't like, and vice versa.\n\n\n#### Conclusions about average amount of posts vs hour of the day:  \nPosting activity of users for all types of posts is increasing starting from 10:00 in the morning until approximatelly 17:00. Then it tends to go down. Pick posting activity is between 15:00 and 17:00.\n","3425852c":"#### Conclusions about amount of Ask HN and Show HN posts on Hacker News:\n1. Number of Ask HN and Show HN posts is 9111 and 10148. In dictionary above \"ask\" word had 9575 recordings and \"show\" word - 10750. It is not surprising as \"ask\" and \"show\" words are common in English language and can be used also for other purposes rather than Ask HN and Show HN posts.\n2. About 3,1% of dataset is Ask HN posts (9111 out of 292724)\n3. About 3,5% of dataset is Show HN posts (10148 out of 292724)\n","c27e4b74":"#### top 50 words in top_point_dictionary:","9bcf65c4":"As can be seen above current dataset contains exactly 385 full days.","51cbb7bf":"Average amount of comments for Count top posts: 'Ask HN', 'Show HN', 'Data' and \"Google':","02ba4dca":"\nSignificant words are in top 50 points_list are :  \n- hn, show, new, google, ask, open, data, code, web, apple.  \n\nThis list looks very similar to count_dictionary top 50 list that is not surprising, as the more posts related to ptopic is posted, the more total points this topic will get. \n\n\nBut the question is: Did this topics recieve so many points because of quantity of posts or due to popularity among users? In order to understand the answer, average amount of points per post is calculated:","5172c1e3":"To understand what about are the most commented posts' topics, lets create separate dictionary by average comments. There is no need to look into words that are only mentioned rarely in the dictionary, as sample will not be representative. Let's check only words that are mentioned in post titles more than 100 times:","91284fa7":"## Open and explore dataset"}}