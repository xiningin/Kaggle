{"cell_type":{"e3a56de6":"code","68ad7d5e":"code","45d97ef5":"code","33583a47":"code","eda2bf38":"code","4f9547d1":"code","a6c40e99":"code","f259e4d5":"code","eaa536c0":"code","dce65994":"code","3ab9da40":"code","de40cccb":"code","2637967c":"code","24f4a806":"code","bbc6d645":"code","eb1f0380":"code","02314297":"code","069d5824":"code","a40cb95b":"code","b20cfaa3":"code","0f0c60cf":"code","91fadd6f":"code","b0ec52b5":"code","4c919b93":"code","47191240":"code","de623090":"code","0eb4df31":"code","5055e712":"code","7521f97e":"code","0da26b84":"code","56578aec":"code","71ed44ea":"code","603fffca":"code","217f8777":"code","ae507ef9":"code","bc47d982":"code","fdac75ea":"code","4c4353c1":"code","8bd87243":"code","fe4207cc":"code","524a0a7d":"code","ac101acb":"code","a1aef66e":"code","6f034676":"code","66875d1d":"code","1a5e52da":"code","c4c0a553":"code","687fe75a":"code","dc4e9902":"code","ccf461c1":"code","a36648ec":"code","1c7f2c14":"code","48b600fb":"code","254ab3d9":"code","a4922c0d":"code","77be21ef":"code","102dcbd8":"code","e4df64ce":"code","b961a399":"code","f759141d":"code","8f3541e7":"code","b57cf616":"code","1b2baebf":"code","df4e2145":"code","773f0dd4":"code","8fd1d6a7":"code","4c2fb111":"code","b7ed76f2":"code","dfde4e16":"code","31e1a0c2":"code","e5ed713c":"markdown","eb7b4c38":"markdown","46dbcf3b":"markdown","5e59d867":"markdown","78e8274f":"markdown","88b4e6c0":"markdown","051e2407":"markdown","089fbe59":"markdown","282f2c0b":"markdown","09b6cbdc":"markdown","be093cd6":"markdown","f86c2971":"markdown","0e7da4b4":"markdown","75718e97":"markdown","b8d37055":"markdown","c580e1e6":"markdown"},"source":{"e3a56de6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","68ad7d5e":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\nboth = [train_df, test_df]","45d97ef5":"train_df.info()","33583a47":"train_df.head()","eda2bf38":"print(str(len(train_df.index)))","4f9547d1":"sns.countplot(x=\"Survived\", data=train_df)","a6c40e99":"sns.countplot(x=\"Survived\", hue=\"Sex\", data=train_df)\n# As shown in plot Females are more than the Males who survived!","f259e4d5":"sns.countplot(x=\"Survived\", hue=\"Pclass\", data=train_df)\n# first class pessanger has the better surviving rate","eaa536c0":"train_df.hist(column=\"Age\")","dce65994":"train_df.info()","3ab9da40":"sns.countplot(x='SibSp', data=train_df)","de40cccb":"sns.countplot(x='Parch', data=train_df)","2637967c":"train_df.isnull().sum()","24f4a806":"test_df.isnull().sum()","bbc6d645":"sns.heatmap(data=test_df.isnull() )","eb1f0380":"\nsns.heatmap(data=train_df.isnull(), cmap='viridis', yticklabels=False)","02314297":"sns.boxplot(x='Pclass', y='Age', data=train_df)\n","069d5824":"def processing_age(cols):\n    Age= cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        if Pclass ==2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age\ntrain_df['Age'] = train_df[['Age', 'Pclass']].apply(processing_age, axis=1)","a40cb95b":"# from sklearn.preprocessing import Imputera","b20cfaa3":"# imputer = Imputer(missing_values=\"NaN\", strategy ='mean', axis=0)","0f0c60cf":"train_df.head(6)","91fadd6f":"train_df.drop('Cabin', axis=1, inplace=True)","b0ec52b5":"# meanage = train_df[\"Age\"].mean()","4c919b93":"# \/meanage","47191240":"# medianage = train_df['Age'].median()\n# medianage","de623090":"# train_df['Age'].fillna(value=medianage, axis=0, inplace=True)\n# train_df['Age'].fillna(method = \"bfill\", axis=0, inplace=True)","0eb4df31":"# imputer = imputer.fit(train_df.iloc[:, 5:11])","5055e712":"\n# train_df.dropna(inplace=True)\nsns.heatmap(train_df.isnull(), cbar=False, cmap='viridis')","7521f97e":"# meanagetest = test_df[\"Age\"].mean()","0da26b84":"# medianagetest = test_df['Age'].median()\n# medianagetest","56578aec":"test_df.isnull().sum()","71ed44ea":"test_df['Age'] = test_df[['Age', 'Pclass']].apply(processing_age, axis=1)","603fffca":"# test_df['Age'].fillna(value=medianagetest, axis=0, inplace=True)\n# test_df['Age'].fillna(method = \"bfill\", axis=0, inplace=True)","217f8777":"test_df.drop('Cabin', axis=1, inplace=True)\n# test_df.dropna(inplace=True)\nfinal = test_df\n","ae507ef9":"sns.heatmap(test_df.isnull(), cbar=False)","bc47d982":"train_df.isnull().sum()\ntest_df.isnull().sum()","fdac75ea":"pclass = pd.get_dummies(train_df['Pclass'], drop_first=True)","4c4353c1":"sex = pd.get_dummies(train_df['Sex'], drop_first=True)","8bd87243":"embark =  pd.get_dummies(train_df['Embarked'], drop_first=True)","fe4207cc":"embark.head()","524a0a7d":"train_df=pd.concat([train_df, embark, sex, pclass], axis=1)","ac101acb":"train_df.info()","a1aef66e":"train_df.head()","6f034676":"pclass = pd.get_dummies(test_df['Pclass'], drop_first=True)\nsex = pd.get_dummies(test_df['Sex'], drop_first=True)\nembark =  pd.get_dummies(test_df['Embarked'], drop_first=True)\ntest_df=pd.concat([test_df, embark, sex, pclass], axis=1)\ntest_df.head()","66875d1d":"train_df.drop(['Pclass', 'Embarked', 'PassengerId','Ticket', 'Name', 'Sex', 'Fare'], axis=1, inplace=True)","1a5e52da":"train_df.to_csv(\"titanic_cleaned_data.csv\", index=False)","c4c0a553":"# train_df.drop('Ticket', axis=1, inplace=True)\ntrain_df.head()","687fe75a":"test_df.drop(['Pclass', 'Embarked', 'PassengerId', 'Ticket','Name', 'Sex', 'Fare'], axis=1, inplace=True)\ntest_df.to_csv(\"cleaned_test_df.csv\")\n","dc4e9902":"# test_df.drop('Ticket', axis=1, inplace=True)\n# test_df.head()","ccf461c1":"test_df.head()","a36648ec":"X = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]","1c7f2c14":"from sklearn.model_selection import train_test_split","48b600fb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)","254ab3d9":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\nrandomfpredictor = clf.predict(X_test)\nsc0=accuracy_score(y_true=y_test, y_pred=randomfpredictor)\nprint(\"Accuracy Score: \", accuracy_score(y_true=y_test, y_pred=randomfpredictor))","a4922c0d":"rfprediction = clf.predict(test_df)\nprint(confusion_matrix(y_test, randomfpredictor))\nprint(classification_report(y_test, randomfpredictor))","77be21ef":"from sklearn.linear_model import LogisticRegression\nreg = LogisticRegression()\nreg.fit(X_train, y_train)\nsurvived = reg.predict(X_test)\nsc1=accuracy_score(y_true=y_test, y_pred=survived)\nprint(\"Accuracy Score: \", accuracy_score(y_true=y_test, y_pred=survived))","102dcbd8":"prediction = reg.predict(test_df)\nprint(confusion_matrix(y_test, survived))\nprint(classification_report(y_test, survived))","e4df64ce":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\nsurvivedknn = knn.predict(X_test)\nsc2=accuracy_score(y_true=y_test, y_pred=survivedknn)\nprint(\"Accuracy Score: \", accuracy_score(y_true=y_test, y_pred=survivedknn))","b961a399":"predictionknn = knn.predict(test_df)\nprint(confusion_matrix(y_test, survivedknn))\nprint(classification_report(y_test, survivedknn))","f759141d":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)\nsurvivedsvc = knn.predict(X_test)\nsc3=accuracy_score(y_true=y_test, y_pred=survivedsvc)\nprint(\"Accuracy Score: \", accuracy_score(y_true=y_test, y_pred=survivedsvc))","8f3541e7":"predsvc = knn.predict(test_df)\nprint(confusion_matrix(y_test, survivedsvc))\nprint(classification_report(y_test, survivedsvc))","b57cf616":"from sklearn.model_selection import GridSearchCV\nparam_grid={'C':[0.1, 1, 10, 100], 'gamma':[ 1,0.1, 0.001, 0.0001]}\ngrid = GridSearchCV(SVC(), param_grid, verbose=2)\ngrid.fit(X_train, y_train)","1b2baebf":"print(grid.best_params_)\n# print(grid.best_estimator_)\nsc4=grid.best_score_\nprint(grid.best_score_)\ngridpred = grid.predict(X_test)\nprint(confusion_matrix(y_test, gridpred))\nprint(classification_report(y_test, gridpred))","df4e2145":"dict1 = {'Logistic Regression':sc1, 'Random Forest':sc0, 'Support vector classifier':sc2, 'KNearestNeighbours':sc3}","773f0dd4":"models=pd.DataFrame({\"Models\":['Logistic Regression', 'Random Forest', 'Support vector classifier', 'KNearest Neighbours'], \n             'Score':[sc1,sc0, sc4, sc3]\n             })\n\nmodels.sort_values(by='Score', ascending=False)\n","8fd1d6a7":"final.drop(['Pclass', 'Name', 'Sex','Age', 'SibSp', 'Ticket', 'Fare', 'Embarked', 'Parch'], axis=1, inplace=True)\n","4c2fb111":"randomFinal = final\nsvcfinal  = final\nrandomFinal[\"Survived\"] = rfprediction\nrandomFinal.to_csv('randomForestResult.csv', index=False)","b7ed76f2":"final['Survived'] = prediction\nfinal.to_csv('Subbmission.csv', index=False)","dfde4e16":"svcfinal['Survived'] = prediction\nfinal.to_csv('svcsurvived.csv', index=False)","31e1a0c2":"# final.head()","e5ed713c":"# Creating Dummy Varibles for categorical data","eb7b4c38":"# preparing Data","46dbcf3b":"# Processing NaNs","5e59d867":"# Training data","78e8274f":"# Support vector classifier\n","88b4e6c0":"# K Nearest Neighbours","051e2407":"# processing Age column\n**showing boxplot to find median ages according to Pessanger class**","089fbe59":"# Logistic regression","282f2c0b":"**Tuning the parameters for SVC**","09b6cbdc":"# Random Forest","be093cd6":"# Data Wrangling","f86c2971":"# filling ","0e7da4b4":"# Eploratory data analysis\n** in this section you will see the way to get important information from the data with the help of visualiztions.**","75718e97":"# Visualizing NaNs\n**using Heatmaps**","b8d37055":"# dropping Cabin column\n** theres nothing important in cabin column so we are gonna drop it**","c580e1e6":"# Filling\n"}}