{"cell_type":{"8abb5861":"code","7724b79e":"code","f5932b7f":"code","18f0400b":"code","97030dd1":"code","b9481f51":"code","c0b488b5":"code","6b84d77e":"code","0cc2727c":"code","8ea2ca0a":"code","bc748c80":"code","07a2858a":"code","aaaeab2e":"code","c77b5e09":"code","4fe9e901":"code","67055d43":"code","badfab51":"code","28fd4ad6":"code","855cbb48":"code","28014c75":"markdown","424dde41":"markdown","6f8f0a3f":"markdown","c6acf9d8":"markdown","0c8858c4":"markdown","7880c122":"markdown","d601c46d":"markdown","506ffca3":"markdown","d5cd89d3":"markdown","224595e5":"markdown","2f3fcaa5":"markdown","2cf62871":"markdown","dc9ee524":"markdown"},"source":{"8abb5861":"pip install torch-lr-finder","7724b79e":"import sys\nsys.path.append(\"..\/input\/timmmaster\/\")","f5932b7f":"import os\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport random\nimport timm\nimport time\nimport matplotlib.pyplot as plt\n\nimport torch\nfrom torch import nn\nfrom torch import optim\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\nfrom torchvision.io import read_image\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts\n\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfrom torch_lr_finder import LRFinder","18f0400b":"class CONFIG:\n    seed = 0\n    image_size = 384\n    model_name = \"swin_large_patch4_window12_384\"\n    head_units = 32\n    num_epochs = 9\n    patience = 2\n    batch_size = 8\n    learning_rate = 1e-7\n    weight_decay = 1e-4\n    dropout = 0.6\n    T_0 = 3\n    n_splits = 5\n    run_folds = [0,1,2,3,4]","97030dd1":"def set_seed(seed):\n    '''\n    Sets the seed of the entire notebook for reproducibility.\n    '''\n    np.random.seed(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # when running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    # set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(CONFIG.seed)","b9481f51":"INPUT_DIR = \"..\/input\/petfinder-pawpularity-score\/\"\nTRAIN_DIR = INPUT_DIR + \"train\/\"\nTEST_DIR = INPUT_DIR + \"test\/\"\ntrain_df = pd.read_csv(INPUT_DIR + \"train.csv\")\ntrain_df.shape","c0b488b5":"train_df.head()","6b84d77e":"remove_train_ids = [\n'13d215b4c71c3dc603cd13fc3ec80181',\n'5ef7ba98fc97917aec56ded5d5c2b099',\n'1feb99c2a4cac3f3c4f8a4510421d6f5',\n'5a642ecc14e9c57a05b8e010414011f2',\n'0422cd506773b78a6f19416c98952407',\n'9b3267c1652691240d78b7b3d072baf3',\n'1059231cf2948216fcc2ac6afb4f8db8',\n'8ffde3ae7ab3726cff7ca28697687a42',\n'78a02b3cb6ed38b2772215c0c0a7f78e',\n'bf8501acaeeedc2a421bac3d9af58bb7',\n'fe47539e989df047507eaa60a16bc3fd',\n'dd042410dc7f02e648162d7764b50900',\n'988b31dd48a1bc867dbc9e14d21b05f6',\n'e359704524fa26d6a3dcd8bfeeaedd2e',\n'6ae42b731c00756ddd291fa615c822a1',\n'9a0238499efb15551f06ad583a6fa951',\n'a9513f7f0c93e179b87c01be847b3e4c',\n'38426ba3cbf5484555f2b5e9504a6b03',\n'cd909abf8f425d7e646eebe4d3bf4769',\n'9f5a457ce7e22eecd0992f4ea17b6107',\n'b148cbea87c3dcc65a05b15f78910715',\n'3877f2981e502fe1812af38d4f511fd2',\n'94c823294d542af6e660423f0348bf31',\n'2b737750362ef6b31068c4a4194909ed',\n'01430d6ae02e79774b651175edd40842',\n'72b33c9c368d86648b756143ab19baeb',\n'dbc47155644aeb3edd1bd39dba9b6953',\n'b49ad3aac4296376d7520445a27726de',\n'54563ff51aa70ea8c6a9325c15f55399',\n'87c6a8f85af93b84594a36f8ffd5d6b8']\nlen(remove_train_ids)","0cc2727c":"train_df = train_df.loc[~train_df['Id'].isin(remove_train_ids),:].reset_index(drop=True)\ntrain_df.shape","8ea2ca0a":"def create_folds(df, n_splits, seed):\n    '''\n    Assigns fold index to each image in df according to K-fold CV.\n    '''\n    df['fold'] = -1\n    num_bins = int(np.floor(1 + np.log2(len(df))))\n    df['bin'] = pd.cut(df['Pawpularity'], bins=num_bins, labels=False)\n    \n    skf = StratifiedKFold(n_splits = n_splits, shuffle=True, random_state=seed)\n    for fold_idx, (trn_idx, val_idx) in enumerate(skf.split(X=df, y=df['bin'])):\n        df.loc[val_idx,'fold'] = fold_idx\n    \n    df = df.drop('bin', axis=1)\n    return df","bc748c80":"train_df = create_folds(train_df, CONFIG.n_splits, CONFIG.seed)\ntrain_df.head()","07a2858a":"class PetfinderDataset(Dataset):\n    def __init__(self, train_df, img_dir, transform=None, target_transform=None):\n        self.train_df = train_df\n        self.img_dir = img_dir\n        self.transform = transform\n        self.target_transform = target_transform\n        \n    def __len__(self):\n        return(len(self.train_df))\n    \n    def __getitem__(self, idx):\n        img_path = self.img_dir + self.train_df.loc[idx,'Id'] + \".jpg\"\n        image = cv2.imread(img_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        label = self.train_df.loc[idx,'Pawpularity']\n        if self.transform is not None:\n            image = self.transform(image=image)[\"image\"]\n        if self.target_transform is not None:\n            label = self.target_transform(label)\n        return image, label","aaaeab2e":"data_transforms = {\n    \"train\": A.Compose([\n        A.Resize(CONFIG.image_size, CONFIG.image_size),\n        A.HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.2),\n        A.Normalize(\n                mean=[0.485, 0.456, 0.406], \n                std=[0.229, 0.224, 0.225], \n                max_pixel_value=255.0, \n                p=1.0\n            ),\n        ToTensorV2()], p=1.),\n    \n    \"valid\": A.Compose([\n        A.Resize(CONFIG.image_size, CONFIG.image_size),\n        A.Normalize(\n                mean=[0.485, 0.456, 0.406], \n                std=[0.229, 0.224, 0.225], \n                max_pixel_value=255.0, \n                p=1.0\n            ),\n        ToTensorV2()], p=1.)\n}\n\ntarget_transform = lambda x: x\/100","c77b5e09":"# check whether GPU is available\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nprint('Using {} device'.format(device))","4fe9e901":"class PetfinderModel(nn.Module):\n    def __init__(self, pretrained=False):\n        super(PetfinderModel, self).__init__()\n        self.model = timm.create_model(CONFIG.model_name, pretrained=pretrained, in_chans=3)\n        self.model.head = nn.Linear(self.model.head.in_features, out_features=CONFIG.head_units)\n        self.dropout = nn.Dropout(CONFIG.dropout)\n        self.fc = nn.Linear(CONFIG.head_units, 1)\n        self.out = nn.Sigmoid()\n        \n    def forward(self, image):\n        x = self.model(image)\n        x = self.dropout(x)\n        x = self.fc(x)\n        x = self.out(x)\n        return x","67055d43":"def loss_fn(yhat, y):\n    criterion = nn.BCELoss(reduction='mean')\n    return criterion(yhat.view(-1).float(), y.view(-1).float())","badfab51":"def create_loaders_one_fold(df: pd.DataFrame, img_dir: str, fold: int):\n    '''\n    Creates training and validation data loaders for one fold in K-fold CV.\n    '''\n    df_train = df[df['fold'] != fold].reset_index(drop=True)\n    df_tst = df[df['fold'] == fold].reset_index(drop=True)\n    \n    # validation set for ES\n    num_bins = int(np.floor(1 + np.log2(len(df_train))))\n    df_train['bin'] = pd.cut(df_train['Pawpularity'], bins=num_bins, labels=False)\n    df_trn, df_val = train_test_split(df_train, test_size=0.1, stratify=df_train['bin'])\n    df_trn = df_trn.drop('bin', axis=1).reset_index(drop=True)\n    df_val = df_val.drop('bin', axis=1).reset_index(drop=True)\n    \n    # create Dataset objects\n    trn_dataset = PetfinderDataset(df_trn, img_dir, transform=data_transforms['train'], target_transform=target_transform)\n    val_dataset = PetfinderDataset(df_val, img_dir, transform=data_transforms['valid'], target_transform=target_transform)\n    tst_dataset = PetfinderDataset(df_tst, img_dir, transform=data_transforms['valid'], target_transform=target_transform)\n    \n    # create Dataloader objects\n    trn_loader = DataLoader(trn_dataset, CONFIG.batch_size, num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n    val_loader = DataLoader(val_dataset, CONFIG.batch_size*2, num_workers=2, shuffle=False, pin_memory=True, drop_last=False)\n    tst_loader = DataLoader(tst_dataset, CONFIG.batch_size*2, num_workers=2, shuffle=False, pin_memory=True, drop_last=False)\n    \n    return trn_loader, val_loader, tst_loader","28fd4ad6":"def lr_finder_one_fold(fold:int):\n    # create loaders\n    trn_loader, val_loader, tst_loader = create_loaders_one_fold(train_df, TRAIN_DIR, fold)\n    # create model\n    model = PetfinderModel(pretrained=True)\n    # move the model to the GPU\n    model.to(device)\n    criterion = nn.BCELoss()\n    optimizer = optim.Adam(model.parameters(), lr=CONFIG.learning_rate, weight_decay=1e-2)\n    lr_finder = LRFinder(model, optimizer, loss_fn, device=device)\n    lr_finder.range_test(trn_loader, end_lr=1e-1, num_iter=100)\n    lr_finder.plot()\n    lr_finder.reset()","855cbb48":"lr_finder_one_fold(0)","28014c75":"## Create data loaders for CV","424dde41":"## Remove duplicate images","6f8f0a3f":"## Create folds","c6acf9d8":"## Datasets","0c8858c4":"## Config","7880c122":"## Transforms","d601c46d":"## LR finder","506ffca3":"* https:\/\/www.jeremyjordan.me\/nn-learning-rate\/\n* https:\/\/github.com\/davidtvs\/pytorch-lr-finder\/blob\/master\/examples\/lrfinder_mnist.ipynb","d5cd89d3":"## Loss and score functions","224595e5":"## Setting the seed","2f3fcaa5":"## Dataset class","2cf62871":"## Model","dc9ee524":"## Libraries"}}