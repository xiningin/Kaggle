{"cell_type":{"32f58692":"code","ea574c93":"code","b1a95bd7":"code","a08182ee":"code","67c90c95":"code","929ce487":"code","ae379685":"code","e78b5027":"code","75a72628":"code","3d5ea294":"code","1a7bb202":"code","62cacabb":"code","a4719842":"code","e706d2c7":"code","729bcb7e":"code","3099127f":"code","48f568f5":"code","133632d3":"code","4b1aae13":"code","88e3d149":"code","864f08ab":"code","d022cfea":"code","9626ac34":"code","f0f12688":"code","7ee1941a":"code","2b9b65a5":"code","c291b6b7":"code","ae9396f6":"code","110eaebb":"code","53b226cf":"code","ccb1f1e7":"code","9482a77b":"code","9abc038b":"code","5986c225":"markdown","e65dc4c2":"markdown","d34f9ae5":"markdown","2d6a35bc":"markdown","0e56d31f":"markdown","e51187a2":"markdown","7415624e":"markdown","1561b55e":"markdown","eedf2c8f":"markdown","a4a9d010":"markdown"},"source":{"32f58692":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nimport warnings\n\npd.set_option('display.float_format', lambda x: '%.2f' % x)","ea574c93":"df = pd.read_csv(\"..\/input\/online-retail-listing\/online_retail_listing.csv\",delimiter=';',encoding=\"latin-1\")","b1a95bd7":"df.head()","a08182ee":"df.shape","67c90c95":"df.info()","929ce487":"#What is the number of unique products? \ndf[\"Description\"].nunique()","ae379685":"#How many of each product? \ndf[\"Description\"].value_counts().head()","e78b5027":"#What is the most ordered product? \ndf.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).head()","75a72628":"#How many invoices were issued in total? \ndf[\"Invoice\"].nunique()","3d5ea294":"#How much was paid per invoice?\n# First we must return Price to float\ndf[\"Price\"] = df[\"Price\"].apply(lambda x: float(str(x.replace(',','.'))))\ndf[\"TotalPrice\"] = df[\"Quantity\"]*df[\"Price\"]\ndf.head()","1a7bb202":"df.groupby(\"Invoice\").agg({\"TotalPrice\":\"sum\"}).head()","62cacabb":"#What are the most expensive products? \ndf.groupby(\"Description\").agg({\"Price\":\"max\"}).sort_values(\"Price\", ascending = False).head()","a4719842":"#How many orders came from which country?\ndf[\"Country\"].value_counts().head()","e706d2c7":"#What is the most returned product? \nreturned = df[df[\"Invoice\"].str.contains(\"C\",na=False)]\nreturned.sort_values(\"Quantity\", ascending = True).head()","729bcb7e":"df.isnull().sum()","3099127f":"df.dropna(inplace = True)\ndf.isnull().sum()","48f568f5":"for feature in [\"Quantity\",\"Price\",\"TotalPrice\"]:\n\n    Q1 = df[feature].quantile(0.01)\n    Q3 = df[feature].quantile(0.99)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df[(df[feature] > upper) | (df[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","133632d3":"df = df[~df[\"Invoice\"].str.contains(\"C\", na = False)]\ndf[\"Customer ID\"] = df[\"Customer ID\"].astype(int)","4b1aae13":"print(\"Min Date\", df[\"InvoiceDate\"].min(), \"Max Date\", df[\"InvoiceDate\"].max())","88e3d149":"df[\"InvoiceDate\"] = pd.to_datetime(df[\"InvoiceDate\"])\nrecency = (dt.datetime(2012, 1, 1) - df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).rename(columns = {\"InvoiceDate\":\"Recency\"})\nrecency[\"Recency\"] = recency[\"Recency\"].apply(lambda x: x.days)\nrecency.head()","864f08ab":"freq = df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"nunique\"}).rename(columns={\"InvoiceDate\": \"Frequency\"})\nfreq.head()","d022cfea":"monetary = df.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"}).rename(columns={\"TotalPrice\":\"Monetary\"})\nmonetary.head()","9626ac34":"rfm = pd.concat([recency, freq, monetary],  axis=1)\nrfm.head()","f0f12688":"rfm[\"RecencyScore\"]  = pd.qcut(rfm[\"Recency\"], 5, labels = [5, 4 , 3, 2, 1])\nrfm[\"FrequencyScore\"]= pd.qcut(rfm[\"Frequency\"].rank(method=\"first\"),5, labels=[1,2,3,4,5])\nrfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])\nrfm.head()","7ee1941a":"# RFM Scores: Category\nrfm[\"RFM_SCORE\"] = (rfm['RecencyScore'].astype(str) + \n                    rfm['FrequencyScore'].astype(str) + \n                    rfm['MonetaryScore'].astype(str))\nrfm.head()","2b9b65a5":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}\n\nrfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\nrfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\nrfm.head()","c291b6b7":"rfmStats = rfm[[\"Segment\",\"Recency\",\"Frequency\", \"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"median\",\"count\", \"std\"])\nrfmStats.columns = rfmStats.columns.map('_'.join).str.strip('|')\nrfmStats","ae9396f6":"rfm_kmeans = rfm.loc[:,\"Recency\":\"Monetary\"]\nrfm_kmeans.head()","110eaebb":"##########################################\n###     CLUSTRING WITH THE K-MEANS     ###\n##########################################\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler((0,1))\ndataframe = sc.fit_transform(rfm_kmeans)\nkmeans = KMeans(n_clusters = 10)\nk_fit = kmeans.fit(dataframe)\nk_fit.labels_","53b226cf":"kmeans = KMeans(n_clusters = 10)\nk_fit = kmeans.fit(dataframe)\nssd = []\n\nK = range(1,30)\n\nfor k in K:\n    kmeans = KMeans(n_clusters = k).fit(dataframe)\n    ssd.append(kmeans.inertia_)\n\nplt.plot(K, ssd, \"bx-\")\nplt.xlabel(\"Distance Residual Sums Versus Different k Values\")\nplt.title(\"Elbow method for Optimum number of clusters\")","ccb1f1e7":"from yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nvisu = KElbowVisualizer(kmeans, k = (2,20))\nvisu.fit(dataframe)\nvisu.poof();","9482a77b":"kmeans = KMeans(n_clusters = 6).fit(dataframe)\ncluster = kmeans.labels_\npd.DataFrame({\"Customer ID\": rfm.index, \"Cluster\": cluster})\nrfm_kmeans[\"cluster_no\"] = cluster\nrfm_kmeans[\"cluster_no\"] = rfm_kmeans[\"cluster_no\"] + 1\nrfm_kmeans.head()","9abc038b":"import plotly.express as px\nfig = px.scatter_3d(rfm_kmeans, x=rfm_kmeans[\"Recency\"], y=rfm_kmeans[\"Frequency\"], z=rfm_kmeans[\"Monetary\"], color=rfm_kmeans[\"cluster_no\"])\nfig.show()","5986c225":"<a id='4'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Recency - R<br><\/h1>","e65dc4c2":"<a id='3'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Outlier Value Analysis<br><\/h1>","d34f9ae5":"<a id='5'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Frequency - F<br><\/h1>","2d6a35bc":"<a id='8'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Summary Statistics<br><\/h1>","0e56d31f":"<!---------------------------------------------->\n<!-----------------ANA BA\u015eLIK------------------->\n<!---------------------------------------------->\n<center> <h1 style=\"background-color:orange; color:white\"><br>RFM Analysis<br><\/h1><\/center>\n\n\n<!---------------------------------------------->\n<!------------------A\u00c7IKLAMA-------------------->\n<!---------------------------------------------->\n<br>\nRFM is a method used for analyzing customer value. It is commonly used in database marketing and direct marketing and has received particular attention in retail and professional services industries. <br \/><br \/>\n\nRFM stands for the three dimensions:<br \/><br \/>\n\n<b>- R<\/b>ecency \u2013 How recently did the customer purchase?<br \/>\n<b>- F<\/b>requency \u2013 How often do they purchase?<br \/>\n<b>- M<\/b>onetary Value \u2013 How much do they spend?<br \/>\n<br \/>\nCustomer purchases may be represented by a table with columns for the customer name, date of purchase and purchase value. One approach to RFM is to assign a score for each dimension on a scale from 1 to 10. The maximum score represents the preferred behavior and a formula could be used to calculate the three scores for each customer. For example, a service-based business could use these calculations:\n<br \/><br \/>\n<b>- Recency :<\/b>the maximum of \"10 \u2013 the number of months that have passed since the customer last purchased\" and 1<br \/>\n<b>- Frequency :<\/b>the maximum of \"the number of purchases by the customer in the last 12 months (with a limit of 10)\" and 1<br \/>\n<b>- Monetary: <\/b>the highest value of all purchases by the customer expressed as a multiple of some benchmark value<br \/>\n<br \/>\nAlternatively, categories can be defined for each attribute. For instance, Recency might be broken into three categories: customers with purchases within the last 90 days; between 91 and 365 days; and longer than 365 days. Such categories may be derived from business rules or using data mining techniques to find meaningful breaks.<br \/><br \/>\n\nOnc each of the attributes has appropriate categories defined, segments are created from the intersection of the values. If there were three categories for each attribute, then the resulting matrix would have twenty-seven possible combinations (one well-known commercial approach uses five bins per attributes, which yields 125 segments). Companies may also decide to collapse certain subsegments, if the gradations appear too small to be useful. The resulting segments can be ordered from most valuable (highest recency, frequency, and value) to least valuable (lowest recency, frequency, and value). Identifying the most valuable RFM segments can capitalize on chance relationships in the data used for this analysis. For this reason, it is highly recommended that another set of data be used to validate the results of the RFM segmentation process. Advocates of this technique point out that it has the virtue of simplicity: no specialized statistical software is required, and the results are readily understood by business people. In the absence of other targeting techniques, it can provide a lift in response rates for promotions.\n<br \/><\/br>\n\n\n<!---------------------------------------------->\n<!------------VER\u0130 SET\u0130 HAKKINDA B\u0130LG\u0130---------->\n<!---------------------------------------------->\n\n<center> <h1 style=\"background-color:orange; color:white\" ><br>Details about the dataset<br><\/h1><\/center>\n<br>\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments. To this end, we will define the behavior of customers and create groups according to clusters in these behaviors. In other words, we will include those who exhibit common behaviors in the same groups and we will try to develop special sales and marketing techniques for these groups. \n<br><br>\n\n\n<!---------------------------------------------->\n<!-----VER\u0130 SET\u0130 DE\u011e\u0130\u015eKENLER\u0130 HAKKINDA B\u0130LG\u0130---->\n<!---------------------------------------------->\n\n<p>\n- <b>InvoiceNo:<\/b> Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.<br \/>\n- <b>StockCode:<\/b> Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.<br \/>\n- <b>Description:<\/b> Product (item) name. Nominal.<br \/>\n- <b>Quantity:<\/b> The quantities of each product (item) per transaction. Numeric.<br \/>\n- <b>InvoiceDate:<\/b> Invice date and time. Numeric. The day and time when a transaction was generated.<br \/>\n- <b>UnitPrice:<\/b> Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).<br \/>\n- <b>CustomerID:<\/b> Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.<br \/>\n- <b>Country:<\/b> Country name. Nominal. The name of the country where a customer resides.<br \/>\n<\/p>\n\n<!---------------------------------------------->\n<!------------------G\u00d6RSEL---------------------->\n<!---------------------------------------------->\n\n<center><img src=\"https:\/\/miro.medium.com\/max\/644\/1*TjJt4rUiBtXLAF84--V-Cg.png\" style=\"width:30%;height:10%;\"><\/center>\n   \n\n<!---------------------------------------------->\n<!-------------------TABLO---------------------->\n<!---------------------------------------------->\n<br>    \n<center>    \n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action\" style=\"background-color:orange; color:white\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\"><br>Notebook Content!<br><\/h3>  \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\" style=\"color:orange\">Exploratory Data Analysis<span        class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">1<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"profile\" style=\"color:orange\">Missing Value Analysis<span        class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">2<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#3\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Outlier Value Analysis<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">3<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#4\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Recency - R<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">4<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#5\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Frequency - F<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">5<\/span><\/a> \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#6\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Monetary - M<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">6<\/span><\/a>\n\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#7\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Create RFM Score<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">7<\/span><\/a> \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#8\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Summary Statistics<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">8<\/span><\/a>\n\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#9\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">K-Means<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">9<\/span><\/a><\/center>","e51187a2":"<a id='7'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Create RFM Score<br><\/h1>","7415624e":"<a id='6'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Monetary - M<br><\/h1>","1561b55e":"<a id='2'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Missing Value Analysis<br><\/h1>","eedf2c8f":"<a id='9'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>K-Means<br><\/h1>","a4a9d010":"<a id='1'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Exploratory Data Analysis<br><\/h1>"}}