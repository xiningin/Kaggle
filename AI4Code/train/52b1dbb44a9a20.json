{"cell_type":{"cadcbfc4":"code","f2fcdbc4":"code","22360620":"code","1086c424":"code","4a6e7805":"code","5fcf1f90":"code","142a91b0":"code","f2b74041":"code","be627f6f":"code","7a2ca929":"code","cbc0434e":"code","efea8678":"code","74b3fa6b":"code","d8026d87":"code","d8b5b661":"code","7528d562":"code","0adab03c":"code","6b76e8cf":"code","1239ade6":"code","b4bd5858":"code","96844100":"code","d81fd9c1":"code","d8e18b24":"code","7b19bc87":"code","efe83e7b":"code","355f46eb":"code","f982d351":"code","052f5a1c":"code","7807a3a4":"code","b76a5453":"code","8a100bb5":"code","ea4c076d":"code","9f25f97d":"code","251198d9":"code","8fc5ba32":"code","76a13aae":"code","90650b11":"code","01fa4d79":"code","1c0a9c44":"code","4e60340b":"code","ac6df6f2":"code","3e0ef588":"code","c1b939a4":"code","365c4c3a":"code","e8031976":"code","af6907f0":"code","0ec9c985":"code","a1ba2d16":"code","06742f43":"code","cfdb5483":"code","8c58c135":"code","3352aeb3":"code","de9ad323":"code","edb53e62":"code","edd2ad50":"code","fd459617":"code","fc98ec58":"code","ba57db19":"code","3c6d9a11":"code","b6f47726":"code","ffc98243":"code","54fe8e04":"code","30169f8e":"code","94b778f5":"code","54489ded":"code","f38e72db":"code","b5a18d5f":"code","6b4f9cb0":"markdown","eb33de65":"markdown","49aeaaa3":"markdown","66f66f34":"markdown"},"source":{"cadcbfc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","f2fcdbc4":"data=pd.read_csv('..\/input\/world-happiness\/2015.csv')","22360620":"data.info()","1086c424":"data.corr()","4a6e7805":"data.head(10)","5fcf1f90":"data.columns","142a91b0":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Freedom.plot(kind='line',color='r',label='FREEDOM',linewidth=1,alpha=0.8,grid= True,linestyle=':')\ndata.Family.plot(color = 'r',label = 'Family',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\nplt.show()","f2b74041":"# Scatter Plot \n# x = Freedom, y = Family\ndata.plot(kind='scatter', x='Freedom', y='Family',alpha = 0.5,color = 'blue')\nplt.xlabel('Freedom')              # label = name of label\nplt.ylabel('Family')\nplt.title('Freedom Family Scatter Plot')            # title = title of plot\nplt.show()\n","be627f6f":"# Histogram\n# bins = number of bar in figure\ndata.Family.plot(kind = 'hist',bins = 50,figsize = (18,18))\nplt.show()","7a2ca929":"#create dictionary and look its keys and values\ndictionary = {'Turkey' : 'Peace','Syria' : 'Terrorism'}\nprint(dictionary.keys())\nprint(dictionary.values())\n","cbc0434e":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['Turkey']='tranquility'\nprint(dictionary)\ndictionary['persia']='nuclear'\nprint(dictionary)\ndel dictionary['Syria']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","efea8678":"series = data['Family']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Family']]  # data[['Defense']] = data frame\nprint(type(data_frame))","74b3fa6b":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","d8026d87":"# 1 - Filtering Pandas data frame\nx = data['Happiness Score']>7.406    # There are only 5 country that have higher happiness value than 7.406\ndata[x]","d8b5b661":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 2oo and higher attack value than 100\ndata[np.logical_and(data['Happiness Score']>7.406, data['Freedom']>0.63 )]","7528d562":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","0adab03c":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n\n","6b76e8cf":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","1239ade6":"# guess print what\nx = 6\ndef f():\n    x = 8\n    return x\nprint(x)      # x = 6 global scope\nprint(f())    # x = 8 local scope","b4bd5858":"# What if there is no local scope\nx = 4\ndef f():\n    x=12\n    y = 2*x        # there is local scope x\n    return (y)\nprint(f())         # it uses global scope x\nprint(x)\n\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","96844100":"import builtins\ndir(builtins)","d81fd9c1":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 5\n        z = x + y\n        return z\n    return add()**3\nprint(square())\n","d8e18b24":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","7b19bc87":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","efe83e7b":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","355f46eb":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","f982d351":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","052f5a1c":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","7807a3a4":"# Example of list comprehension\nnum1 = [5,3,9]\nnum2 = [i + 5 for i in num1 ]\nprint(num2)","b76a5453":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**3 if i == 10 else i-5 if i < 6 else i+5 for i in num1]\nprint(num2)","8a100bb5":"# lets return Happiness Range csv and make one more list comprehension example\n# lets classify countries whether they have high or low happiness. Our threshold is average happiness.\nthreshold = sum(data.Freedom)\/len(data.Freedom)\ndata[\"Freedom\"] = [\"high\" if i > threshold else \"low\" for i in data.Freedom]\ndata.loc[:10,[\"Freedom\",\"score\"]] # we will learn loc more detailed later","ea4c076d":"data = pd.read_csv('..\/input\/world-happiness\/2015.csv')\ndata.head()  # head shows first 5 rows","9f25f97d":"data.tail()\n\n","251198d9":"data.columns","8fc5ba32":"data.shape","76a13aae":"data.info()","90650b11":"data.boxplot(column='Family',by = 'Freedom')","01fa4d79":"data_fon=data.head()\ndata_fon","1c0a9c44":"melted = pd.melt(frame=data_fon,id_vars = 'Region', value_vars= ['Family','Freedom'])\nmelted","4e60340b":"melted.pivot(index = 'Region', columns = 'variable',values='value')","ac6df6f2":"data1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","3e0ef588":"data1 = data['Family'].head()\ndata2= data['Freedom'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","c1b939a4":"data.dtypes","365c4c3a":"# lets convert object(str) to categorical and int to float.\ndata['Happiness Rank'] = data['Happiness Rank'].astype('category')\ndata['Generosity '] = data['Generosity'].astype('float')","e8031976":"data.dtypes","af6907f0":"# Lets look at does happiness data have nan value\n# As you can see there are 158 entries. However this sample has 158 non-null object so it has not a null value\ndata.info()","0ec9c985":"# data frames from dictionary\ncountry = [\"Syria\",\"Morocco\"]\npopulation = [\"18\",\"28\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","a1ba2d16":"df[\"capital\"] = [\"sam\",\"rabat\"]\ndf","06742f43":"df[\"income\"] = 0 #Broadcasting entire column\ndf","cfdb5483":"data.head()","8c58c135":"data1 = data.loc[:,[\"Freedom\",\"Family\",\"Happiness Score\"]]\ndata1.plot()\nplt.show()","3352aeb3":"data1.plot(subplots=True)\nplt.show()","de9ad323":"data1.plot(kind = \"scatter\",x=\"Family\",y = \"Freedom\")\nplt.show()","edb53e62":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Family\",bins = 50,range= (0,250),normed = True)\nplt.show()","edd2ad50":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Family\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Family\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt\nplt.show()","fd459617":"data.describe()","fc98ec58":"time_list = [\"1995-03-08\",\"1996-04-10\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","ba57db19":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","3c6d9a11":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","b6f47726":"data2.resample(\"A\").mean()","ffc98243":"data2.resample(\"M\").mean()","54fe8e04":"# MANIPULATING DATA FRAMES WITH PANDAS","30169f8e":"data[\"Freedom\"][1]","94b778f5":"print(type(data[\"Freedom\"]))     # series\nprint(type(data[[\"Family\"]]))   # data frames","54489ded":"data.loc[1:10,\"Family\":\"Freedom\"]   # 10 and \"Defense\" are inclusive","f38e72db":"### TRANSFORMING DATA\n\n# Plain python functions\ndef div(n):\n    return n\/2\ndata.Freedom.apply(div)","b5a18d5f":"### INDEX OBJECTS AND LABELED DATA\n\n# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","6b4f9cb0":"# PANDAS FOUNDATION ","eb33de65":"DIAGNOSE DATA for CLEANING","49aeaaa3":"### VISUAL EXPLORATORY DATA ANALYSIS","66f66f34":"### STATISTICAL EXPLORATORY DATA ANALYSIS"}}