{"cell_type":{"7b702ea9":"code","8acfce06":"code","ecf97e9a":"code","03fb5962":"code","bd58c240":"code","7f5d4eab":"code","9cdf7470":"code","75ccca7c":"code","725607a9":"code","13740e1c":"code","08a1ab0d":"code","8dd808b8":"code","a81ec684":"code","b759197b":"code","adcc4e24":"code","cab60102":"code","5ea31d19":"code","50cae9f4":"code","ff803fa5":"code","4e293fb1":"code","126a5ae0":"code","ed4f2362":"code","15aedc77":"code","627eb22f":"code","07ec01c8":"code","7a84ac1d":"code","725e28d5":"code","442e6a02":"code","1a44f075":"code","3837faa3":"markdown","d0369005":"markdown","6dd5ef8c":"markdown","80c6e0ed":"markdown","99ebd83c":"markdown"},"source":{"7b702ea9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport plotly.express as px\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8acfce06":"netflix = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","ecf97e9a":"netflix.head()","03fb5962":"#first look at date_added\nnetflix['date_added'].value_counts()","bd58c240":"#first look at duration\nnetflix['duration'].value_counts()","7f5d4eab":"def find_month(entry):\n    ''' Function that extract the month'''\n    return \" \".join(re.findall(\"[a-zA-Z]+\", str(entry)))","9cdf7470":"def find_day(entry):\n    ''' Function that extract the day'''\n    match = re.match(r'.*(\\d[0-9]{1},)', str(entry))\n    if match is not None:\n        return match.group(1).replace(',','')","75ccca7c":"def find_year(entry):\n    ''' Function that extract the year'''\n    match = re.match(r'.*([1-3][0-9]{3})', str(entry))\n    if match is not None:\n        return match.group(1)","725607a9":"# applying functions\nnetflix['month_added'] = netflix['date_added'].apply(find_month)\nnetflix['month_added'] = netflix['month_added'].apply(lambda x: str(x).replace('nan','Not available'))\nnetflix['day_added'] = netflix['date_added'].apply(find_day)\nnetflix['year_added'] = netflix['date_added'].apply(find_year)","13740e1c":"netflix.head()","08a1ab0d":"def extract_min(entry):\n    match = re.match(r'.*([\\d]+ min)', str(entry))\n    if match is not None:\n        return int(match.group(0).split(' ')[0])\n    \n","8dd808b8":"def extract_season(entry):\n    match = re.match(r'.*([0-9]{1,2} Season)', str(entry))\n    if match is not None:\n        return int(match.group(0).split(' ')[0])","a81ec684":"netflix['duration_min'] = netflix['duration'].apply(extract_min)\nnetflix['seasons'] = netflix['duration'].apply(extract_season)","b759197b":"netflix.info()","adcc4e24":"netflix.isnull().sum()","cab60102":"df_aux_movie_day_adeed = pd.DataFrame(netflix.loc[netflix['type']=='Movie'].day_added.value_counts())\ndf_aux_movie_day_adeed = df_aux_movie_day_adeed.reset_index()\ndf_aux_movie_day_adeed.columns = ['day','count']\ndf_aux_movie_day_adeed.sort_values('day',inplace=True)\n\ndf_aux_tvshow_day_adeed = pd.DataFrame(netflix.loc[netflix['type']=='TV Show'].day_added.value_counts())\ndf_aux_tvshow_day_adeed = df_aux_tvshow_day_adeed.reset_index()\ndf_aux_tvshow_day_adeed.columns = ['day','count']\ndf_aux_tvshow_day_adeed.sort_values('day',inplace=True)\n\ntrace_movie_day_adeed = go.Bar(\n                    x=df_aux_movie_day_adeed['day'], \n                    y=df_aux_movie_day_adeed[\"count\"], \n                    name=\"Movies\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace_tvshow_day_adeed = go.Bar(\n                    x=df_aux_tvshow_day_adeed['day'], \n                    y=df_aux_tvshow_day_adeed[\"count\"], \n                    name=\"TV Show\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Content day added' , xaxis = dict(title = 'day'), yaxis = dict(title = 'Count'),template= \"presentation\")\nfig = go.Figure(data = [trace_movie_day_adeed, trace_tvshow_day_adeed], layout=layout)\nfig.show()","5ea31d19":"keys = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n\"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]\nvalues = [i for i in range(1,13)]","50cae9f4":"dictionary_month = dict(zip(keys, values))","ff803fa5":"df_aux_movie_month_added = pd.DataFrame(netflix.loc[netflix['type']=='Movie'].month_added.value_counts())\ndf_aux_movie_month_added = df_aux_movie_month_added.reset_index()\ndf_aux_movie_month_added.columns = ['month','count']\ndf_aux_movie_month_added['num_month'] = df_aux_movie_month_added['month'].map(dictionary_month)\ndf_aux_movie_month_added.dropna(axis=0,inplace=True)\ndf_aux_movie_month_added.sort_values('num_month',inplace=True)\n\ndf_aux_tvshow_month_added = pd.DataFrame(netflix.loc[netflix['type']=='TV Show'].month_added.value_counts())\ndf_aux_tvshow_month_added = df_aux_tvshow_month_added.reset_index()\ndf_aux_tvshow_month_added.columns = ['month','count']\ndf_aux_tvshow_month_added['num_month'] = df_aux_tvshow_month_added['month'].map(dictionary_month)\ndf_aux_tvshow_month_added.dropna(axis=0,inplace=True)\ndf_aux_tvshow_month_added.sort_values('num_month',inplace=True)\n\ntrace_movie_month_added = go.Bar(\n                    x=df_aux_movie_month_added['month'], \n                    y=df_aux_movie_month_added[\"count\"], \n                    name=\"Movies\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace_tvshow_month_added = go.Bar(\n                    x=df_aux_tvshow_month_added['month'], \n                    y=df_aux_tvshow_month_added[\"count\"], \n                    name=\"TV Show\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Content month added' , xaxis = dict(title = 'Month'), yaxis = dict(title = 'Count'),template= \"presentation\")\nfig = go.Figure(data = [trace_movie_month_added, trace_tvshow_month_added], layout=layout)\nfig.show()","4e293fb1":"df_aux_movie_release = pd.DataFrame(netflix.loc[netflix['type']=='Movie'].release_year.value_counts())\ndf_aux_movie_release = df_aux_movie_release.reset_index()\ndf_aux_movie_release.columns = ['year','count']\ndf_aux_movie_release.sort_values('year',inplace=True)\n\ndf_aux_tvshow_release = pd.DataFrame(netflix.loc[netflix['type']=='TV Show'].release_year.value_counts())\ndf_aux_tvshow_release = df_aux_tvshow_release.reset_index()\ndf_aux_tvshow_release.columns = ['year','count']\ndf_aux_tvshow_release.sort_values('year',inplace=True)\n\ntrace_movie_release = go.Bar(\n                    x=df_aux_movie_release['year'], \n                    y=df_aux_movie_release[\"count\"], \n                    name=\"Movies\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace_tvshow_release = go.Bar(\n                    x=df_aux_tvshow_release['year'], \n                    y=df_aux_tvshow_release[\"count\"], \n                    name=\"TV Show\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Content Release Year' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'),template= \"presentation\")\nfig = go.Figure(data = [trace_movie_release, trace_tvshow_release], layout=layout)\nfig.show()","126a5ae0":"df_aux_movie_added = pd.DataFrame(netflix.loc[netflix['type']=='Movie'].year_added.value_counts())\ndf_aux_movie_added = df_aux_movie_added.reset_index()\ndf_aux_movie_added.columns = ['year','count']\ndf_aux_movie_added.sort_values('year',inplace=True)\n\ndf_aux_tvshow_added = pd.DataFrame(netflix.loc[netflix['type']=='TV Show'].year_added.value_counts())\ndf_aux_tvshow_added = df_aux_tvshow_added.reset_index()\ndf_aux_tvshow_added.columns = ['year','count']\ndf_aux_tvshow_added.sort_values('year',inplace=True)\n\ntrace_movie_added = go.Bar(\n                    x=df_aux_movie_added['year'], \n                    y=df_aux_movie_added[\"count\"], \n                    name=\"Movies\", \n                    marker=dict(color = 'rgb(255, 30, 30)',\n                             line=dict(width=2)))\n\ntrace_tvshow_added = go.Bar(\n                    x=df_aux_tvshow_added['year'], \n                    y=df_aux_tvshow_added[\"count\"], \n                    name=\"TV Show\", \n                    marker= dict(color = 'rgb(30, 30, 255)', line=dict(width=2)))\nlayout = go.Layout(hovermode= 'closest', title = 'Year added' ,\n                   xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'),\n                   template= \"presentation\")\n\nfig = go.Figure(data = [trace_movie_added, trace_tvshow_added], layout=layout)\nfig.show()","ed4f2362":"labels = list(netflix.type.value_counts().index)\nvalues = list(netflix.type.value_counts().values)\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_layout(\n    title_text=\"Type distribution\")\nfig.show()","15aedc77":"plt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'white', width = 1000,\n                      height = 1000, max_words = 150).generate(' '.join(netflix['title']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Frequent Words in Title',fontsize = 30)\nplt.show()","627eb22f":"plt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'white',\n                      width = 1000,  height = 1000, max_words = 150).generate(' '.join(netflix['description']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Frequent Words in Description',fontsize = 30)\nplt.show()","07ec01c8":"netflix.head()","7a84ac1d":"netflix[netflix.duration_min.notnull()]['type'].value_counts()","725e28d5":"data = [\n    go.Bar(\n        x=netflix['duration_min'].value_counts().index,\n        y=netflix['duration_min'].value_counts(),\n        orientation='v',\n        text=\"Duration in minutes, Occurrences \",\n    )]\n\n\nlayout = go.Layout(\n    height=500,\n    title='Duration in minutes - histogram - MOVIES',\n    hovermode='closest',\n    xaxis=dict(title='Duration in minutes', ticklen=1, zeroline=True, gridwidth=1),\n    yaxis=dict(title='Count', ticklen=1,zeroline=True, gridwidth=1),\n    showlegend=False,template= \"plotly_dark\"\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()","442e6a02":"data = [\n    go.Bar(\n        x=netflix['seasons'].value_counts().index,\n        y=netflix['seasons'].value_counts(),\n        orientation='v',\n        text=\"N\u00ba Season(s), Occurrences \",\n    )]\n\n\nlayout = go.Layout(\n    height=500,\n    title='Duration in N\u00ba Season(s) - Histogram - TV SHOW',\n    hovermode='closest',\n    xaxis=dict(title='N\u00ba Season(s)', ticklen=1, zeroline=True, gridwidth=1),\n    yaxis=dict(title='Count', ticklen=1,zeroline=True, gridwidth=1),\n    showlegend=False,template= \"plotly_dark\"\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()","1a44f075":"df_aux_movie_rating = pd.DataFrame(netflix.loc[netflix['type']=='Movie'].rating.value_counts()).reset_index()\ndf_aux_movie_rating.columns = ['rating','count']\n\ndf_aux_tvshow_rating = pd.DataFrame(netflix.loc[netflix['type']=='TV Show'].rating.value_counts()).reset_index()\ndf_aux_tvshow_rating.columns = ['rating','count']\n\n# create trace1\ntrace1 = go.Bar(\n                y = df_aux_movie_rating['count'],\n                x = df_aux_movie_rating['rating'],\n                name=\"TV Shows\",\n                marker = dict(color = 'rgb(30, 30, 255)',\n                             line=dict(width=3)))\n# create trace2 \ntrace2 = go.Bar(\n                y = df_aux_tvshow_rating['count'],\n                x = df_aux_tvshow_rating['rating'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(255, 30, 30)',\n                              line=dict(width=3)))\n\n\nlayout = go.Layout(template= \"presentation\",title = 'Content type by rate!' ,\n                   xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\n\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","3837faa3":"# hmm...Okay, we should create new columns to extract the correct datetime and the duration","d0369005":"[Inspiration & Credits](https:\/\/www.kaggle.com\/vikassingh1996\/netflix-movies-and-shows-plotly-recommender-sys)","6dd5ef8c":"## Okay, the first thing that we need to deal is date_added and duration!","80c6e0ed":"# Please note that 2020 it's not over yet - so...less data avaliable","99ebd83c":"# Work in progress!"}}