{"cell_type":{"7b68f3d7":"code","122b7da9":"code","8ed0fd73":"code","06661c05":"code","3cbc6d35":"code","d4ae2ff5":"code","f2d2233d":"code","809791ae":"code","535576c3":"code","caecc21e":"code","8ddab541":"code","57905105":"code","5d11bd61":"code","2b5e5faf":"code","090edeb2":"code","dcf04c57":"code","daeac7c9":"code","4e3f65ec":"code","c79b41f3":"code","2ada76f8":"code","1382e421":"code","99ff909b":"code","e7664dad":"code","9f14e459":"code","33997719":"code","0c1bba4e":"code","48dcd671":"code","5bb628a4":"code","ab828e67":"code","de4ce796":"code","dfd648f8":"code","973fb63a":"code","d14f5648":"code","d69ecf20":"code","006cc7ca":"code","f50efe4c":"markdown","85aea092":"markdown","5229fc4d":"markdown","ec206f0f":"markdown","e17588f2":"markdown","9cad78a7":"markdown","15c09fed":"markdown","17f844d8":"markdown","842973a4":"markdown"},"source":{"7b68f3d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","122b7da9":"#Utils\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, roc_auc_score, make_scorer, accuracy_score, roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC \nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nfrom kmodes.kmodes import KModes\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport lightgbm\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_uniform\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.metrics.pairwise import pairwise_kernels\nfrom sklearn.metrics.pairwise  import cosine_similarity\nfrom sklearn.metrics.pairwise import chi2_kernel\nfrom catboost import CatBoostClassifier\nimport seaborn as sns\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\nfrom sklearn.manifold import TSNE\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import KBinsDiscretizer\nimport category_encoders as ce\nfrom tpot import TPOTClassifier\nimport timeit\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom tpot.builtins import ZeroCount\nfrom sklearn.preprocessing import RobustScaler","8ed0fd73":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","06661c05":"import warnings\nwarnings.filterwarnings(\"ignore\")","3cbc6d35":"sub = pd.read_csv('\/kaggle\/input\/submission\/submission (3).csv', sep=',')","d4ae2ff5":"sub.to_csv('sub.csv')","f2d2233d":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv', sep=',')\ntrain = train.set_index('id')","809791ae":"test= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv', sep=',')\ntest = test.set_index('id')","535576c3":"# df for psudo-labeling LB 1.08631\npseudo_df = pd.read_csv('\/kaggle\/input\/pseudo-df\/submission (7).csv', sep=',')\npseudo_df = pseudo_df.set_index('id')","caecc21e":"fig = px.histogram(train, x=\"target\",\n                   width=600, \n                   height=400,\n                   histnorm='percent',\n                   template=\"simple_white\"\n                   )\nfig.update_layout(title=\"Target Description\", \n                  font_family=\"San Serif\",\n                  titlefont={'size': 20},\n                  showlegend=True,\n                  legend=dict(\n                      orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.0, \n                      xanchor=\"right\"\n                  )                \n                 ).update_xaxes(categoryorder='total descending')#\nfig.update_traces( \n                  marker_line_width=1.5, opacity=0.99)\nfig.show()","8ddab541":"cols = train.columns[:-1]\ntarget = train['target']\ntrain = train[cols]","57905105":"!pip install -q -U matplotlib==3.1.3","5d11bd61":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","2b5e5faf":"from supervised.automl import AutoML","090edeb2":"automl = AutoML(\n    mode = \"Compete\",\n    algorithms=[\"CatBoost\", \"Xgboost\"],\n    total_time_limit=4*3600,\n    start_random_models=10,\n    hill_climbing_steps=4,\n    top_models_to_improve=3,\n    golden_features=False,\n    features_selection=False,\n    stack_models=True,\n    train_ensemble=True,\n    explain_level=0,\n    ml_task = 'multiclass_classification',\n    eval_metric='logloss',\n    validation_strategy={\n        \"validation_type\": \"kfold\",\n        \"k_folds\": 10,\n        \"shuffle\": False,\n        \"stratify\": True,\n    }\n)","dcf04c57":"automl.fit(train, target)","daeac7c9":"automl.report()","4e3f65ec":"sub_sample = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/sample_submission.csv', sep=',')\nsub_sample = sub_sample.set_index('id')","c79b41f3":"predictions = automl.predict_all(test)","2ada76f8":"oof_predictions = automl.predict_all(train)","1382e421":"test= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv', sep=',')\ntest = test.set_index('id')","99ff909b":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv', sep=',')\ntrain = train.set_index('id')","e7664dad":"pred= predictions.set_index(test.index)","9f14e459":"oof = oof_predictions.set_index(train.index)","33997719":"oof = oof.reset_index()","0c1bba4e":"pred.head()","48dcd671":"p = pred['label']","5bb628a4":"p = p.reset_index()","ab828e67":"p.to_csv('p.csv',index=False)","de4ce796":"oof.to_csv('oof.csv', index=False)","dfd648f8":"sub_sample['Class_1'] = np.clip(pred['prediction_Class_1'],0.02, 0.98)\nsub_sample['Class_2'] = np.clip(pred['prediction_Class_2'],0.02, 0.98)\nsub_sample['Class_3'] = np.clip(pred['prediction_Class_3'],0.02, 0.98)\nsub_sample['Class_4'] = np.clip(pred['prediction_Class_4'],0.02, 0.98)","973fb63a":"pred['prediction_Class_1'].head()","d14f5648":"sub_sample.head()","d69ecf20":"sub_sample = sub_sample.reset_index()","006cc7ca":"sub_sample.to_csv('submission.csv',index=False)","f50efe4c":"#### Model Definition","85aea092":"Given the good results obtained with Three based model, I'll use a custom model suggested in the documentation\nfrom: documentation https:\/\/supervised.mljar.com\/features\/modes\/\n","5229fc4d":"### MLJAR multiclass Classifier","ec206f0f":"### Simple Report with Training output","e17588f2":"### Load Submission Sample ","9cad78a7":"## Load Data","15c09fed":"##### Install and Import","17f844d8":"### Training ","842973a4":"### Predictions"}}