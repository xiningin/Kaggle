{"cell_type":{"6ce5011a":"code","36cb5f74":"code","312cf4ec":"code","8f8c5986":"code","b96b9630":"code","eed90452":"code","f58f7749":"code","a54f6dc5":"markdown","dbd39b23":"markdown","056ce109":"markdown","1b09085d":"markdown","c57a2708":"markdown","9d18fe37":"markdown"},"source":{"6ce5011a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pprint import pprint as pp\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport sys\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","36cb5f74":"# please set your email adress.\nADRESS = ''\n\nROBOT_NAME = 'Kaggle yu-gi-oh Crawler ({})'\nCRAWRING_INTERVAL = 0.1\nSAVE_EXT = '.jpg'","312cf4ec":"cards_data_csv = os.path.join('..\/input', 'card_data.csv')\ndf = pd.read_csv(cards_data_csv, index_col=0)\ncols = df.columns.values\ncard_names = df.index.values\ncard_type_dir = {}\nfor col in cols:\n    if col == 'ATK' or col == 'DEF':\n        continue\n    if not col in card_type_dir:\n        card_type_dir[col] = []\n    for status in df[col]:\n        if not status in card_type_dir[col] and not pd.isnull(status):\n            card_type_dir[col].append(status)\n\n\npp(cols)\npp(card_type_dir)\nfor param in card_type_dir.keys():\n    print('{} has {} elements.'.format(param, str(len(card_type_dir[param]))))","8f8c5986":"aim_target = {\n    'Type': [\n        'Normal Monster',\n        'Effect Monster'\n    ]\n}","b96b9630":"target_card_names = []\nif len(aim_target) != 0:\n    for param in aim_target.keys():\n        for element in aim_target[param]:\n            target_card_names.append(df[(df[param] == element)].index.values)\n    target_card_names = list(set([flat for inner in target_card_names for flat in inner]))\nelse:\n    target_card_names = card_names\nprint('crawling card num :{}'.format(len(target_card_names)))\n\ndel card_names","eed90452":"from bs4 import BeautifulSoup\nfrom urllib.request import Request, urlopen\nfrom urllib.parse import quote\nfrom mimetypes import guess_extension\nfrom time import sleep\nfrom tqdm import tqdm_notebook\n\nos.makedirs(os.path.join('..\/extend_input', 'card_images'), exist_ok=True)\n# print(os.listdir('..'))\n# print(quote('\u305f\u306e\u3057\u3044 \u30d4\u30af\u30cb\u30c3\u30af'))\nurl = 'https:\/\/www.bing.com\/images\/search?q='\nimg_link = []\nheader = {\n    'User-Agent': ROBOT_NAME.format(ADRESS) +' Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/74.0.3729.169 Safari\/537.36' \n}\nfor cname in tqdm_notebook(target_card_names):\n    url_with_query = url + quote(cname) + \"&FORM=HDRSC2\"\n    req = Request(url_with_query, headers=header)\n    try:\n        with urlopen(req, timeout=3) as p:\n            content = p.read()\n            mime = p.getheader('Content-Type')\n            if not mime or not content:\n                continue\n    except:\n        sys.stderr.write('Error in fetching :'+ format(url_with_query) + \"\\n\")\n        continue\n    soup = BeautifulSoup(content, 'html.parser')\n    img_elem = soup.find_all('div', attrs={'class': 'hoff'})[0].find('img' , attrs={'class': 'mimg'}).get('src').split('&')[0]\n#     ext = guess_extension(mime.split(';')[0])\n#     if ext in ('.jpeg', '.jpg', '.png', '.jpe'):\n    ext = SAVE_EXT\n    try:\n        with open(os.path.join('..\/extend_input', 'card_images', cname + ext), 'wb') as f:\n            f.write(urlopen(img_elem).read())\n    except:\n        sys.stderr.write('Error in Saving :'+ format(cname) + \"\\n\")\n        continue\n        sys.exit(0)\n    print('\/saved. {}\/'.format(cname + ext), end='')\n    sleep(CRAWRING_INTERVAL)","f58f7749":"# url = 'https:\/\/www.bing.com\/images\/search?q='+quote('Gravekeepers Watcher')+\"&FORM=HDRSC2\"\n# req = Request(url, headers=header)\n# try:\n#     with urlopen(req, timeout=3) as p:\n#         content = p.read()\n#         mime = p.getheader('Content-Type')\n#         if not mime or not content:\n#             pass\n# except:\n#     sys.stderr.write('Error in fetching :'+ format(url) + \"\\n\")\n# soup = BeautifulSoup(content, 'lxml')\n# img_elem = soup.find_all('div', attrs={'class': ['img_cont', 'hoff']})[0].find('img' , attrs={'class': 'mimg'})\n# print(img_elem.get('src').split('&')[0])","a54f6dc5":"# \u904a\u622f\u738b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u30ab\u30fc\u30c9\u753b\u50cf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n# Yu-Gi-Oh Data Set Extender\n\n\u30ab\u30fc\u30c9\u306b\u7d10\u3065\u3051\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u5897\u3084\u3057\u307e\u3059  \n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f```..\/extend_input\/```\u4e0b\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\n\n\u73fe\u72b6\n* \u30ab\u30e9\u30e0\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u753b\u50cf\u3092```..\/extend_input\/card_images\/```\u306b\u914d\u7f6e\u3057\u307e\u3059\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u62e1\u5f35\u5b50\u3092\u9664\u3044\u3066\u30ab\u30fc\u30c9\u540d\u3068\u540c\u4e00\u3067\u3059\n* ~~\u30ab\u30fc\u30c9\u52b9\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059~~\n\n\n\nIncrease the data linked to the card  \nThe directory is placed under ```..\/ extend_input \/```\n\n\nCurrent status\n* Set the column and parameters and place the image in ```..\/ extend_input \/ card_images \/```, the file name is the same as the card name except for the extension\n* ~~Get card effects~~","dbd39b23":"## \u30c7\u30fc\u30bf\u3092\u62e1\u5f35\u3057\u307e\u3059\n## Expand the data","056ce109":"## \u4e0a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u4e00\u89a7\u304b\u3089\u6b32\u3057\u3044\u7269\u3092aim_target\u306b\u5165\u308c\u308b\n## Add the desired item from the above parameter list to aim_target","1b09085d":"## aim_target\u306b\u57fa\u3065\u3044\u3066\u30be\u30fc\u30cb\u30f3\u30b0\n\u4eca\u56de\u306f\u30c6\u30b9\u30c8\u3067\u3059\n```\n'Type': [\n        'Normal Monster',\n        'Effect Monster'\n    ]\n```\n\u3092\u53ce\u96c6\u3057\u3066\u3044\u307e\u3059  \n## Zoning based on aim_target\nThis time is a test\n```\n'Type': [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Normal Monster',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Effect Monster'\n\u00a0\u00a0\u00a0\u00a0 ]\n```\nCollecting","c57a2708":"## \u30ab\u30fc\u30c9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8f9e\u66f8\u578b\u3067\u5168\u53d6\u5f97(atk, def\u4ee5\u5916)\n## Get all card parameters in dictionary type (except atk and def)","9d18fe37":"I will continue to enhance the functions.  \nThanks a lot \ud83d\ude06"}}