{"cell_type":{"17c87a60":"code","0ff2139f":"code","52bb76aa":"code","d7e57c33":"code","b6b90c81":"code","04a572cc":"code","655ea71e":"code","13314260":"code","570f26b8":"code","516ce6d8":"code","62da1318":"code","ba8255b1":"code","8aa46d48":"code","5dc80df9":"code","f38fcc81":"code","62af5edd":"code","98948731":"code","e3e99ae7":"code","c9564ab2":"code","68bf38c9":"code","f0acc7d3":"code","e3164ed0":"code","c9ee4d9b":"code","67706856":"code","e90f9ad4":"code","523f4b31":"code","c75ec833":"code","121bf232":"code","340df20b":"code","97111ed2":"code","a09ebc52":"markdown","3f1c0a9f":"markdown","401ea805":"markdown","14afdb6b":"markdown","95eaeb58":"markdown","82575530":"markdown","be50498e":"markdown","fa2123f2":"markdown","d0e0b672":"markdown","2634458c":"markdown","458bf0ae":"markdown","53394e2a":"markdown","15a8d61f":"markdown","a1a675ba":"markdown","3def3d6d":"markdown","7babf57f":"markdown"},"source":{"17c87a60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ff2139f":"# Import standard packages and dataset\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\ndata = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","52bb76aa":"data.describe()","d7e57c33":"data.head()","b6b90c81":"data.shape","04a572cc":"data.isnull().sum()","655ea71e":"# How many % of missing data are there for each feature?\ndef isnull(data):\n    total_rows = data.shape[0]\n    missing_val_dict = {}\n    for col in data.columns:\n        missing_val_dict[col] = [data[col].isnull().sum(), (data[col].isnull().sum() \/ total_rows)]\n    return missing_val_dict\n\nnull_dict = isnull(data)\n\ndata_miss = pd.DataFrame.from_dict(null_dict, orient=\"index\", columns=['missing', 'miss_percent'])\ndata_miss","13314260":"# Plot the graph\ngraph = sns.countplot(data.Potability)\ngraph.set_xticklabels(graph.get_xticklabels(),rotation=90)\n\n# Display count inside the data\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,height ,ha=\"center\")","570f26b8":"# create correlation heat map with final score\ncorr = data.corr()\nfig, ax = plt.subplots(figsize=(8,8)) # sample figsize in inches \nsns.heatmap(corr, annot=True);","516ce6d8":"data.isnull().sum()","62da1318":"sns.distplot(data['ph'])","ba8255b1":"sns.distplot(data['Trihalomethanes'])","8aa46d48":"sns.distplot(data['Sulfate'])","5dc80df9":"# Replace NA values for Trihalomethanes with median value of sulfate\ndata['Trihalomethanes'].fillna(data['Trihalomethanes'].median(), inplace=True)\ndata['Sulfate'].fillna(data['Sulfate'].median(), inplace=True)\ndata['ph'].fillna(data['ph'].median(), inplace=True)\ndata.isnull().sum()","f38fcc81":"sns.boxplot(y='ph', x='Potability',data=data)","62af5edd":"sns.boxplot(y='Hardness', x='Potability',data=data)","98948731":"sns.boxplot(y='Solids', x='Potability',data=data)","e3e99ae7":"sns.boxplot(y='Sulfate', x='Potability',data=data)","c9564ab2":"sns.boxplot(y='Conductivity', x='Potability',data=data)","68bf38c9":"sns.boxplot(y='Organic_carbon', x='Potability',data=data)","f0acc7d3":"sns.boxplot(y='Trihalomethanes', x='Potability',data=data)","e3164ed0":"sns.boxplot(y='Turbidity', x='Potability',data=data)","c9ee4d9b":"# Import standard packages\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import precision_score\n\nscaler = StandardScaler()\nmodel_svm = svm.SVC()\nmodel_clf = RandomForestClassifier()\nmodel_tree = DecisionTreeClassifier(random_state=0)\nmodel_knn = KNeighborsClassifier()","67706856":"# Spilt training and testing dataset\nX = data.drop(['Potability'], axis=1)\ny = data['Potability']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","e90f9ad4":"# Standard scale the data\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","523f4b31":"# Predictions using SVM\nmodel_svm.fit(X_train, y_train)\npredictions_svm = model_svm.predict(X_test)\nscore_svm = accuracy_score(y_test, predictions_svm)\nprint(score_svm)\n\npred_svm = precision_score(y_test, predictions_svm, average='micro')\npred_svm","c75ec833":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\nmodel_clf = RandomForestClassifier()\n\nmodel_clf.fit(X_train, y_train)\npredictions_clf = model_clf.predict(X_test)\nscore_clf = accuracy_score(y_test, predictions_clf)\nprint(score_clf)\n\npred_clf = precision_score(y_test, predictions_clf, average='micro')\npred_clf","121bf232":"model_knn.fit(X_train, y_train)\npredictions_knn = model_knn.predict(X_test)\nscore_knn = accuracy_score(y_test, predictions_knn)\nprint(score_knn)\n\npred_knn = precision_score(y_test, predictions_knn, average='micro')\npred_knn","340df20b":"from sklearn.tree import DecisionTreeClassifier\nmodel_tree = DecisionTreeClassifier(random_state=0)\n\nmodel_tree.fit(X_train, y_train)\npredictions_tree = model_tree.predict(X_test)\nscore_tree = accuracy_score(y_test, predictions_tree)\nprint(score_tree)\n\npred_tree = precision_score(y_test, predictions_tree, average='micro')\npred_tree","97111ed2":"print(\"SVM: \", score_svm)\nprint(\"Random forest classifer:\" , score_clf)\nprint(\"Decision tree: \", score_tree)\nprint(\"KNN: \", score_knn)","a09ebc52":"#### Check for any missing values","3f1c0a9f":"Based on the different models tested, it seems that Support vector machine model can produce the highest prediction score.","401ea805":"# Please give me feedback on how to improve!","14afdb6b":"#### Random Forest Classifier","95eaeb58":"In the dataset, there are 1998 non-potable water for human consumption.","82575530":"#### Predictions using KNN","be50498e":"# Import packages and dataset","fa2123f2":"#### Prediction using SVM","d0e0b672":"# First look at the data","2634458c":"From the data, it seems that most of the features has similar correlation with the Potability of the water.","458bf0ae":"#### Predictions using Decision tree","53394e2a":"# Create a dataframe for missing values","15a8d61f":"#### Let's see if there's any correlation in the potability of the water againist the different features.","a1a675ba":"There are quite some missing data. \n\n- Ph: 491 (~15%)\n- Sulfate: 781 (~24%)\n- Trihalomethanes: 162 (~0.5%)","3def3d6d":"# Data cleaning","7babf57f":"# Model training"}}