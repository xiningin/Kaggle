{"cell_type":{"fcef3b15":"code","39064fd4":"code","a415e933":"code","1f22f7da":"code","ebdeb4e5":"code","663af276":"code","b6c9bee8":"code","46acee73":"code","0d8d3528":"code","627294ca":"code","2af0eac6":"code","fa7c55db":"code","0a27e034":"code","caa59678":"code","ed534125":"markdown","76e15c0a":"markdown","2c21757c":"markdown","055e7056":"markdown","28ed6cda":"markdown","6cf7550a":"markdown","1214e67c":"markdown","a01c19ee":"markdown","bd7e6c23":"markdown","82ae1b75":"markdown","94ee8750":"markdown","02d46c6a":"markdown","db1fbf45":"markdown","1066352a":"markdown","3b2336d1":"markdown","fde0504f":"markdown","63432fd7":"markdown","15d0da1b":"markdown"},"source":{"fcef3b15":"!ls ..\/input\nimport sys\nsys.path.append('..\/input\/resnet32-classifier-v5')\nfrom resnet32_classifier import run_submit","39064fd4":"img_folder = '\/kaggle\/input\/severstal-steel-defect-detection\/test_images'\nrun_submit('\/kaggle\/working', img_folder)","a415e933":"import pandas as pd\ndf_label = pd.read_csv('.\/resnet34-cls-tta-0.50_test.csv').fillna('')\ndf_label[:16]\nprint(len(df_label))\n!ls -la \/kaggle\/input\/severstal-steel-defect-detection\/test_images | wc\n(1804-3)*4","1f22f7da":"! ls ..\/input\/severstalmodels","ebdeb4e5":"! python ..\/input\/mlcomp\/mlcomp\/mlcomp\/setup.py","663af276":"import warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport cv2\nimport albumentations as A\nfrom tqdm import tqdm_notebook\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom torch.jit import load\n\nfrom mlcomp.contrib.transform.albumentations import ChannelTranspose\nfrom mlcomp.contrib.dataset.classify import ImageDataset\nfrom mlcomp.contrib.transform.rle import rle2mask, mask2rle\nfrom mlcomp.contrib.transform.tta import TtaWrap","b6c9bee8":"unet_se_resnext50_32x4d = \\\n    load('\/kaggle\/input\/severstalmodels\/unet_se_resnext50_32x4d.pth').cuda()\nunet_mobilenet2 = load('\/kaggle\/input\/severstalmodels\/unet_mobilenet2.pth').cuda()\nunet_resnet34 = load('\/kaggle\/input\/severstalmodels\/unet_resnet34.pth').cuda()","46acee73":"class Model:\n    def __init__(self, models):\n        self.models = models\n    \n    def __call__(self, x):\n        res = []\n        x = x.cuda()\n        with torch.no_grad():\n            for m in self.models:\n                res.append(m(x))\n        res = torch.stack(res)\n        return torch.mean(res, dim=0)\n\nmodel = Model([unet_se_resnext50_32x4d, unet_mobilenet2, unet_resnet34])","0d8d3528":"def create_transforms(additional):\n    res = list(additional)\n    # add necessary transformations\n    res.extend([\n        A.Normalize(\n            mean=(0.485, 0.456, 0.406), std=(0.230, 0.225, 0.223)\n        ),\n        ChannelTranspose()\n    ])\n    res = A.Compose(res)\n    return res\n\nimg_folder = '\/kaggle\/input\/severstal-steel-defect-detection\/test_images'\nbatch_size = 2\nnum_workers = 0\n\n# Different transforms for TTA wrapper\ntransforms = [\n    [],\n    [A.HorizontalFlip(p=1)]\n]\n\ntransforms = [create_transforms(t) for t in transforms]\ndatasets = [TtaWrap(ImageDataset(img_folder=img_folder, transforms=t), tfms=t) for t in transforms]\nloaders = [DataLoader(d, num_workers=num_workers, batch_size=batch_size, shuffle=False) for d in datasets]","627294ca":"thresholds = [0.5, 0.5, 0.5, 0.5]\nmin_area = [600, 600, 1000, 2000]\n\nres = []\n# Iterate over all TTA loaders\ntotal = len(datasets[0])\/\/batch_size\nfor loaders_batch in tqdm_notebook(zip(*loaders), total=total):\n    preds = []\n    image_file = []\n    for i, batch in enumerate(loaders_batch):\n        features = batch['features'].cuda()\n        p = torch.sigmoid(model(features))\n        # inverse operations for TTA\n        p = datasets[i].inverse(p)\n        preds.append(p)\n        image_file = batch['image_file']\n    \n    # TTA mean\n    preds = torch.stack(preds)\n    preds = torch.mean(preds, dim=0)\n    preds = preds.detach().cpu().numpy()\n    \n    # Batch post processing\n    for p, file in zip(preds, image_file):\n        file = os.path.basename(file)\n        # Image postprocessing\n        for i in range(4):\n            p_channel = p[i]\n            imageid_classid = file+'_'+str(i+1)\n            p_channel = (p_channel>thresholds[i]).astype(np.uint8)\n            \n            if p_channel.sum() < min_area[i]:\n                p_channel = np.zeros(p_channel.shape, dtype=p_channel.dtype)\n            res.append({\n                'ImageId_ClassId': imageid_classid,\n                'EncodedPixels': mask2rle(p_channel)\n            })","2af0eac6":"! ls ..\/input\/classification-results","fa7c55db":"df_mask = pd.DataFrame(res)\ndf_mask = df_mask.fillna('')\n\ndf_label_1 = pd.read_csv('.\/resnet34-cls-tta-0.50_test.csv').fillna('').sort_values(by=['ImageId_ClassId'])\n#df_label_2 = pd.read_csv('..\/input\/classification-results\/resnet34-cls-tta-0.50.csv').fillna('').sort_values(by=['ImageId_ClassId'])\n\nfp1 = list(df_label_1['EncodedPixels']=='')\n#fp2 = list(df_label_2['EncodedPixels']=='')\n\nassert(np.all(df_mask['ImageId_ClassId'].values == df_label_1['ImageId_ClassId'].values))\n\nprint(\"How many predictions in the segementation result will be removed?\")\nprint((df_mask.loc[fp1,'EncodedPixels'] != '').sum() )\nprint(\"How many postive predictions in the segementation?\")\nprint((df_mask['EncodedPixels'] != '').sum() )\nprint(\"How many postive predictions in the classification?\")\nprint((df_label_1['EncodedPixels'] != '').sum() )\n\ndf_mask.loc[fp1,'EncodedPixels']=''\ndf_mask.to_csv('submission.csv', index=False)\n\ndf = df_mask","0a27e034":"df['Image'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[0])\ndf['Class'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[1])\ndf['empty'] = df['EncodedPixels'].map(lambda x: not x)\ndf[df['empty'] == False]['Class'].value_counts()","caa59678":"%matplotlib inline\n\ndf = pd.read_csv('submission.csv')[:40]\ndf['Image'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[0])\ndf['Class'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[1])\n\nfor row in df.itertuples():\n    img_path = os.path.join(img_folder, row.Image)\n    img = cv2.imread(img_path)\n    mask = rle2mask(row.EncodedPixels, (1600, 256)) \\\n        if isinstance(row.EncodedPixels, str) else np.zeros((256, 1600))\n    if mask.sum() == 0:\n        continue\n    \n    fig, axes = plt.subplots(1, 2, figsize=(20, 60))\n    axes[0].imshow(img\/255)\n    axes[1].imshow(mask*60)\n    axes[0].set_title(row.Image)\n    axes[1].set_title(row.Class)\n    plt.show()","ed534125":"### Loaders' mean aggregator","76e15c0a":"About the libraries:\n\n1. [MLComp](https:\/\/github.com\/catalyst-team\/mlcomp) is a distributed DAG  (Directed acyclic graph)  framework for machine learning with UI. It helps to train, manipulate, and visualize. All models in this kernel were trained offline via MLComp + Catalyst libraries. \n\nYou can control an execution process via Web-site\n\nDags\n![Dags](https:\/\/github.com\/catalyst-team\/mlcomp\/blob\/master\/docs\/imgs\/dags.png?raw=true)\n\nComputers\n![Computers](https:\/\/github.com\/catalyst-team\/mlcomp\/blob\/master\/docs\/imgs\/computers.png?raw=true)\n\nReports\n![Reports](https:\/\/github.com\/catalyst-team\/mlcomp\/blob\/master\/docs\/imgs\/reports.png?raw=true)\n\nCode\n![Code](https:\/\/github.com\/catalyst-team\/mlcomp\/blob\/master\/docs\/imgs\/code.png?raw=true)\n\nPlease follow [the web site](https:\/\/github.com\/catalyst-team\/mlcomp) to get the details.\n\nhttps:\/\/github.com\/catalyst-team\/mlcomp\n\n2. Catalys: High-level utils for PyTorch DL & RL research. It was developed with a focus on reproducibility, fast experimentation and code\/ideas reusing. Being able to research\/develop something new, rather then write another regular train loop. Break the cycle - use the Catalyst!\n\nhttps:\/\/github.com\/catalyst-team\/catalyst\n\nDocs and examples\n- Detailed [classification tutorial](https:\/\/github.com\/catalyst-team\/catalyst\/blob\/master\/examples\/notebooks\/classification-tutorial.ipynb) [![Open In Colab](https:\/\/colab.research.google.com\/assets\/colab-badge.svg)](https:\/\/colab.research.google.com\/github\/catalyst-team\/catalyst\/blob\/master\/examples\/notebooks\/classification-tutorial.ipynb)\n- Comprehensive [classification pipeline](https:\/\/github.com\/catalyst-team\/classification).\n\nAPI documentation and an overview of the library can be found here\n[![Docs](https:\/\/img.shields.io\/badge\/dynamic\/json.svg?label=docs&url=https%3A%2F%2Fpypi.org%2Fpypi%2Fcatalyst%2Fjson&query=%24.info.version&colorB=brightgreen&prefix=v)](https:\/\/catalyst-team.github.io\/catalyst\/index.html)","2c21757c":"# Save predictions\n\n## Also, ensemble segmentation results with classification results","055e7056":"### Models' mean aggregator","28ed6cda":"As the competition does not allow commit with the kernel that uses internet connection, we use offline installation","6cf7550a":"### Install MLComp library(offline version):","1214e67c":"Histogram of predictions","a01c19ee":"### Load models","bd7e6c23":"# Classification","82ae1b75":"This is another option to enhance the score on public test dataset - due to a small change of the normalization parameters in the inference kernel (score increased from 0.90672 to 0.90726). It can be considered as an opportunity to increase variability in the choice of two final submissions (who knows...) or as a way to improve mood up to the final deadline at least. :-)","94ee8750":"![MLComp](https:\/\/raw.githubusercontent.com\/catalyst-team\/catalyst-pics\/master\/pics\/MLcomp.png)\n![Catalyst](https:\/\/raw.githubusercontent.com\/catalyst-team\/catalyst-pics\/master\/pics\/catalyst_logo.png)","02d46c6a":"### Create TTA transforms, datasets, loaders","db1fbf45":"Catalyst allows to trace models. That is an extremely useful features in Pytorch since 1.0 version: \n\nhttps:\/\/pytorch.org\/docs\/stable\/jit.html\n\nNow we can load models without re-defining them","1066352a":"Approach descripton:\n\n1. Segmentation via 3 Unet networks. The predictions are being averaged. \n\n2. Thresholding and removeing small areas. This method gives 0.90672 on public LB.\n\n**Improving**:\n\n1. As many participations have seen, that is the key to remove false positives from your predictions.\n\n2. To cope with that, a classification network may be used. \n\n3. Heng CherKeng posted a classifier here: https:\/\/www.kaggle.com\/c\/severstal-steel-defect-detection\/discussion\/106462#latest-634450 resent34_cls_01, **if you remove false positives with it you should get 0.9117 on LB**","3b2336d1":"### Import required libraries","fde0504f":"This kernel demonstrates:\n\n1. Results of training models with [the training kernel](https:\/\/www.kaggle.com\/lightforever\/severstal-mlcomp-catalyst-train-0-90672-offline) and achieves 0.90672 score on public LB\n\n2. Useful code in MLComp library: TtaWrapp, ImageDataset, ChannelTranspose, rle utilities\n\n3. Output statistics and basic visualization","63432fd7":"## This is the fork from  https:\/\/www.kaggle.com\/lightforever\/severstal-mlcomp-catalyst-infer-0-90672","15d0da1b":"### Visualization"}}