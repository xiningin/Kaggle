{"cell_type":{"0e7a59c4":"code","7f554371":"code","44fa64f0":"code","2b1a3f78":"code","9c3dae54":"code","a7b041e9":"code","f47d3029":"code","3312251a":"code","0ff35659":"code","24e24b0f":"markdown","b8b86930":"markdown","2ada8d96":"markdown","096d9601":"markdown","4c86dad0":"markdown","f21dbdd7":"markdown"},"source":{"0e7a59c4":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ninputData = pd.read_csv(r\"..\/input\/eeg_clean.csv\");\n","7f554371":"print(inputData.dtypes)\nprint(inputData.columns)\nprint(\"Data shape:\",inputData.shape)\nprint(inputData.head())\nprint(inputData.describe())\nprint(inputData.info())\n# Check for any nulls\nprint(inputData.isnull().sum())","44fa64f0":"plt.figure( figsize=(10,10))\ninputData['eye'].value_counts().plot.pie(autopct=\"%1.1f%%\")\nplt.title(\"Data division on eye state (open\/closed)\",fontsize=10)\nplt.show()","2b1a3f78":"length  = len(inputData.columns)-1\ncolors  = ['xkcd:cloudy blue', 'xkcd:dark pastel green', 'xkcd:dust', 'xkcd:electric lime', 'xkcd:fresh green', 'xkcd:light eggplant', 'xkcd:nasty green', 'xkcd:really light blue', 'xkcd:tea', 'xkcd:warm purple', 'xkcd:yellowish tan', 'xkcd:cement', 'xkcd:dark grass green', 'xkcd:dusty teal'] \n\nprint (\"***************************************\")\nprint (\"DISTIBUTION OF VARIABLES IN DATA SET\")\nprint (\"***************************************\")\ndropped = inputData.drop([\"eye\"],axis=1)\nplt.figure(figsize=(15,30))\n# Leavout the last column of Outcome\nfor i,j,k in itertools.zip_longest(dropped.columns[:],range(length),colors):\n    plt.subplot(length\/2,length\/4,j+1)\n    sns.distplot(dropped[i],color=k)\n    plt.title(i)\n    plt.subplots_adjust(hspace = .3)\n    plt.axvline(dropped[i].mean(),color = \"k\",linestyle=\"dashed\",label=\"MEAN\")\n    plt.axvline(dropped[i].std(),color = \"b\",linestyle=\"dotted\",label=\"STANDARD DEVIATION\")\n    plt.legend(loc=\"upper right\")\nplt.show()    \n","9c3dae54":"fig = plt.figure(figsize = (10,10))\nax = fig.gca()\nsns.heatmap(inputData.corr(), annot=True, fmt=\".2f\")\nplt.title(\"Correlation\",fontsize=5)\nplt.show()\n","a7b041e9":"# Lets take a few samples and plot. Taking whole data plot is too much a wait\neyeOpen = inputData.loc[inputData[\"eye\"]==\"Open\"].sample(frac=0.01)\neyeClose = inputData.loc[inputData[\"eye\"]==\"Closed\"].sample(frac = 0.01)\nv = pd.concat([eyeOpen,eyeClose])\n\n\nsns.pairplot(data=v,hue=\"eye\")\nplt.title(\"Skewness\",fontsize =10)\nplt.show()\n\nfig = plt.figure(figsize = (10,10))\nax = fig.gca()\nsns.scatterplot(x=\"O1\", y=\"O2\", hue=\"eye\",data=v)\nplt.title(\"O1 vs O2 on eye\",fontsize =10)\nplt.show()\n\nfig = plt.figure(figsize=(10,10))\nax = fig.gca()\nv.hist(ax=ax)\nplt.xlabel('Probes',fontsize=10)\nplt.ylabel('Counts',fontsize=10)\nax.tick_params(labelsize=10)\nplt.title('Recording probes count',fontsize=10)\nplt.grid()\nplt.ioff()\nplt.show()","f47d3029":"# Lets normalize the data via l2 unit norm (row-wise) to see what happens\nprint (\"******************************************\")\nprint (\"ROWISE UNIT NORM NORMALIZATION OF DATA AND\")\nprint (\"******************************************\")\nfrom sklearn import preprocessing\nv2 = v.copy()\nv3 = v2.loc[:, v.columns != 'eye']\nv3 = preprocessing.normalize(v3, norm='l2',axis =1)\nv2.loc[:, v2.columns != 'eye'] = v3;\n\nsns.pairplot(data=v,hue=\"eye\")\nplt.title(\"Skewness\",fontsize =10)\nplt.show()\n\nfig = plt.figure(figsize = (10,10))\nax = fig.gca()\nsns.scatterplot(x=\"O1\", y=\"O2\", hue=\"eye\",data=v2)\nplt.title(\"O1 vs O2 on eye\",fontsize =10)\nplt.show()\n\nfig = plt.figure(figsize=(10,10))\nax = fig.gca()\nv2.hist(ax=ax)\nplt.xlabel('Probes',fontsize=10)\nplt.ylabel('Counts',fontsize=10)\nax.tick_params(labelsize=10)\nplt.title('Recording probes count',fontsize=10)\nplt.grid()\nplt.ioff()\nplt.show()","3312251a":"# Row-wise MinMax normalization","0ff35659":"print (\"****************************\")\nprint (\"MINMAX NORMALIZATION OF DATA\")\nprint (\"****************************\")\nv2 = v.copy()\nv3 = v2.loc[:, v.columns != 'eye']\nv3 = v3.apply(lambda x:(x.astype(float) - min(x))\/(max(x)-min(x)), axis = 1)\nv2.loc[:, v.columns != 'eye'] = v3;\n\nsns.pairplot(data=v,hue=\"eye\")\nplt.title(\"Skewness\",fontsize =10)\nplt.show()\n\nfig = plt.figure(figsize = (10,10))\nax = fig.gca()\nsns.scatterplot(x=\"O1\", y=\"O2\", hue=\"eye\",data=v2)\nplt.title(\"O1 vs O2 on eye\",fontsize =10)\nplt.show()\n\nfig = plt.figure(figsize=(10,10))\nax = fig.gca()\nv2.hist(ax=ax)\nplt.xlabel('Probes',fontsize=10)\nplt.ylabel('Counts',fontsize=10)\nax.tick_params(labelsize=10)\nplt.title('Recording probes count',fontsize=10)\nplt.grid()\nplt.ioff()\nplt.show()","24e24b0f":"# Lets find mean and standard deviation\n<a id='mean_sd'><\/a>","b8b86930":"# Precentage of data that is split into open and closed eyes \n<a id='Data_Precentage'><\/a>","2ada8d96":"A simple anaylsis of the data is perform on the data. <br>\n <a href='#Data_Precentage'>Data split percentage<\/a><br>\n <a href='#mean_sd'>Means and Standard Deviations<\/a><br>\n <a href='#corr_hist_norms'>Correlations, Histograms and Normalizations<\/a>","096d9601":"# The EEG data is for the events of recording eye or eyes (not sure) in open or closed positions","4c86dad0":"# Correlations, histograms, pair plots - With tests on normalizations\n<a id='corr_hist_norms'><\/a>","f21dbdd7":"# Row-wise unit norm normalization "}}