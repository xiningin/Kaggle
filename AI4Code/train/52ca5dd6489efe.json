{"cell_type":{"af9af0dd":"code","1bc2025b":"code","28bbfb0f":"code","c1567189":"code","9e80dac8":"code","ddff320d":"code","c7c0d145":"code","d6fbc37c":"code","62e77672":"code","81c612aa":"code","fefebf60":"code","4fdabb3d":"code","39101568":"code","d5d1dc79":"code","a0d082c4":"code","a10f475e":"code","c9526509":"code","e49eba06":"markdown","a0d2b866":"markdown","135e39b3":"markdown","0036ce65":"markdown","167b11c0":"markdown","f5aa462f":"markdown","beeb2f61":"markdown","8d7c0848":"markdown","be9beb5a":"markdown","4eaf552c":"markdown","8cee29e7":"markdown","07717fa3":"markdown","cc1e8bc0":"markdown","77709f18":"markdown"},"source":{"af9af0dd":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport plotly.express as px","1bc2025b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","28bbfb0f":"def dateFirstCase(data):\n    _tmp = pd.DataFrame(data.groupby('region').apply(lambda dr: dr[dr['evolution_cumcount']>0]['confirmed_date'].min())).reset_index().rename(columns={0:'date'})\n    _dict = {}\n    for row in _tmp.itertuples():\n        _dict[row[1]] = row[2]\n    return _dict","c1567189":"def growthRate(data):\n    pass","9e80dac8":"def evolutionRegion(data):\n    # TODO -- Improve on hardcoding 'France' in columns mapping because we only have one country.\n    res = data.groupby(['confirmed_date', 'region'])['country'].value_counts().unstack().rename(columns={'France': 'evolution_count'}).reset_index() \n    full_data = []\n    for date, _res in res.groupby(['confirmed_date']):\n        missing_regions = list(set(lRegions)- set(_res['region'].tolist()))\n        for region in missing_regions:\n            dd = {'region': region, 'evolution_count': 0, 'confirmed_date': date}\n            _res = _res.append(dd, True)\n        full_data.append(_res)\n    res_full = pd.concat(full_data)\n    # TODO -- Somehow, `res` has a name equal to 'country'. Can't get rid of that\n    res_full['date_of_confirmed_infection'] = res_full['confirmed_date'].apply(lambda row: row.strftime(\"%d-%b-%Y\"))\n    res_full['evolution_cumcount'] = res_full.groupby('region')['evolution_count'].transform(pd.Series.cumsum)\n    \n    map_first_day_region = dateFirstCase(res_full)\n    \n    res_full['date_of_first_confirmed_infection'] = res_full['region'].map(map_first_day_region) \n\n    return res_full","ddff320d":"def plotEvolutionCurve(evolution_data):\n    region_names = [i for i in evolution_data.region.unique()]\n    region_names.sort()\n    max_pop = evolution_data['evolution_cumcount'].max() + 25\n\n    fig = px.scatter(evolution_data, x='date_of_confirmed_infection', y='evolution_cumcount', color='region',\n                     category_orders={'region': region_names},\n                     opacity=0.7,\n                     hover_name='region',hover_data=[],\n                     title='Evolution of the number of person infected, per region',\n                     labels={'evolution_cumcount': 'Nb of confirmed cases, to date', 'date_of_confirmed_infection': 'Date of confirmed infection'},\n                     range_y=[-1,max_pop],\n                     template='plotly_white')\n    fig.update_traces(mode='lines')\n    fig.show()","c7c0d145":"def plotInfectionCurve(evolution_data):\n    region_names = [i for i in evolution_data.region.unique()]\n    region_names.sort()\n    max_pop = evolution_data['evolution_cumcount'].max() + 25\n\n    fig = px.scatter(evolution_data, x='Days_since_1st_case', y='evolution_cumcount', color='region',\n                     category_orders={'region': region_names},\n                     opacity=0.7,\n                     #hover_name='region',hover_data=[],\n                     title='Infection curve, per region',\n                     labels={'evolution_cumcount': 'Nb of confirmed cases', 'Days_since_1st_case': 'Days since 1st confirmed infection'},\n                     range_y=[-1,max_pop],\n                     template='plotly_white',\n                     trendline=\"lowess\")\n    #fig.update_traces(mode='markers+lines')\n    fig.update_traces(\n     line=dict(dash=\"dot\", width=2),\n     selector=dict(type=\"scatter\", mode=\"lines\"))\n    fig.show()","d6fbc37c":"def plotTimelapseRegion(data):\n    region_names = [i for i in data.region.unique()]\n    region_names.sort()\n    max_pop = data['evolution_cumcount'].max() + 25\n    max_date = data['date_of_confirmed_infection'].max()\n    min_date = data['date_of_confirmed_infection'].min()\n    \n    fig = px.scatter(data, x='evolution_cumcount', y='date_of_first_confirmed_infection', color='region',\n                     category_orders={'region': region_names},\n                     hover_name='region',hover_data=[],\n                     text='region',\n                     animation_frame='date_of_confirmed_infection', animation_group='region',\n                     title='Timelapse of Coronavirus Cases by Region (ordered by date of first registered case)',\n                     labels={'evolution_cumcount': 'Nb of confirmed cases', 'date_of_first_confirmed_infection': 'Date of first confirmed infection'},\n                     range_x=[-1, max_pop], range_y=[max_date, min_date],\n                     template='plotly_white')\n    fig.update_traces(textposition='top center')\n    fig.show()","62e77672":"# Loading data\ndf = pd.read_csv('\/kaggle\/input\/patient.csv', delimiter=',')\ndf.dataframeName = 'patient.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns.')","81c612aa":"nRegions = df['region'].nunique()\nlRegions = sorted(df['region'].unique().tolist())\nprint(f'Currently, there are {nRegions} regions in the dataset:\\n{lRegions}.')","fefebf60":"df.head(5)","4fdabb3d":"# Cleaning Date columns\ndf['confirmed_date'] = pd.to_datetime(df['confirmed_date'])","39101568":"df_evolution = evolutionRegion(df)\n\ndf_evolution.reset_index(inplace=True)\ndel df_evolution['index']","d5d1dc79":"def days_since(df_sub):\n    df_sub['Days_since_1st_case'] = df_sub['confirmed_date'] - df_sub['date_of_first_confirmed_infection']\n    df_sub['Days_since_1st_case'] = df_sub['Days_since_1st_case'].dt.days\n    return df_sub\n\ndf_evolution = df_evolution.groupby('region').apply(days_since)","a0d082c4":"plotEvolutionCurve(df_evolution)","a10f475e":"plotTimelapseRegion(df_evolution)","c9526509":"plotInfectionCurve(df_evolution)","e49eba06":"### Note\n> Add more EDA in future versions.","a0d2b866":"## Conclusion\nThis is just a start. Feel free to copy and improve that notebook!","135e39b3":"## Exploratory Data Analysis","0036ce65":"#### Evolution of the number of confirmed cases (per region) over time","167b11c0":"Let's take a quick look at what the data looks like:","f5aa462f":"## Introduction\nThe purpose of this notebook is to examine the evolution of total population infected with Coronavirus for each region of France.","beeb2f61":"---","8d7c0848":"## Investigating the evolution of infected population","be9beb5a":"---\n\n### Custum functions","4eaf552c":"---","8cee29e7":"There is 1 csv file in the current version of the dataset:\n","07717fa3":"#### Evolution of the number of person infected (per region) over time","cc1e8bc0":"## Setting up the environment\nTo begin the investigation, first import libraries and define helping functions, before loading the data.","77709f18":"#### Timelapse of Coronavirus Cases by Region (ordered by date of first registered case)\n>Inspired by this work: https:\/\/www.reddit.com\/r\/dataisbeautiful\/comments\/feupf0\/oc_timelapse_of_coronavirus_cases_by_country\/"}}