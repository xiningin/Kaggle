{"cell_type":{"7ea52e5c":"code","b23a61a3":"code","f3d3f28b":"code","2520d8ef":"code","d72ef3d3":"code","6d6c3fd3":"code","146f74ff":"code","a345db14":"code","34cb998c":"code","806bb2f3":"code","7ef6c61c":"code","6ea8e007":"code","2d4a984b":"code","4ddfdd46":"code","18afa022":"code","9103ad3a":"code","5345a583":"code","2c6c1c05":"code","8549b9ac":"code","88a97b47":"code","8a838374":"code","0cbbd6ae":"code","94876ff8":"code","b8b11140":"code","f9d3a47e":"code","2c909322":"code","70adf590":"code","85aed052":"code","62aca3d1":"code","6578c695":"markdown","af0a88a1":"markdown","ae193f4a":"markdown","333a74df":"markdown","374b27cf":"markdown","9cf7c977":"markdown","ffb30277":"markdown","29c577cd":"markdown","ccd895cb":"markdown","dcc2b9f5":"markdown","11f2f2db":"markdown","6b3eefc1":"markdown","77507ddd":"markdown"},"source":{"7ea52e5c":"import os\nfrom typing import List\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom gensim.models import Word2Vec\n\nfrom tqdm import tqdm\n\npd.set_option(\"display.max_columns\", 100)\npd.set_option(\"display.max_rows\", 300)\n\n#\u3053\u3053\u304b\u3089\u4e0b\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\n\n!pip install -U ppscore\nimport ppscore as pps","b23a61a3":"train = pd.read_csv('..\/input\/data-science-winter-osaka2\/train.csv')\ntest = pd.read_csv('..\/input\/data-science-winter-osaka2\/test.csv')","f3d3f28b":"train.head(2)","2520d8ef":"train.info()","d72ef3d3":"conditions = [(train['price'] == \"free\")]\nchoices = [0]\ntrain['price'] = np.select(conditions, choices, default = 9999)","6d6c3fd3":"train['price'] = train['price'].astype(float)","146f74ff":"X = train.copy().drop(columns='user_reviews')\ny = train['user_reviews']","a345db14":"y = y.map({'c0':0, 'c1':1, 'c2':2})","34cb998c":"train__ = pd.concat([X, y], axis=1)","806bb2f3":"train__.info()","7ef6c61c":"X_train_corr = train__.corr()[\"user_reviews\"].sort_values()\nX_train_corr","6ea8e007":"df_train_pps = pps.predictors(train__, y=\"user_reviews\")\ndf_train_pps = pd.DataFrame(df_train_pps)\ndf_train_pps","2d4a984b":"train['is_train'] = True\ntest['user_reviews'] = np.nan\ntest['is_train'] = False\n\ndf = pd.concat([train, test], axis=0)\ndf = df.reset_index(drop=True)","4ddfdd46":"def category_numeric_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    # \u30bf\u30b0\u306e\u6570\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df['popular_tags_len'] = df['popular_tags'].fillna(\"\").apply(len)\n    df['categories_len'] = df['categories'].fillna(\"\").apply(len)\n    \n    # \u5024\u6bb5\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df = price_preprocess(df)\n    \n    # developer\u3068publisher\u3092label encode\u3059\u308b\u3002\n    for column in ['developer', 'publisher']:\n        df = apply_label_encode(df, column)\n    \n    # \u5e74\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    # \u6b63\u898f\u8868\u73fe\u3067\u5e74\u3092\u62bd\u51fa\u3059\u308b\u3002\n    df['year'] = df['release_date'].str.extract(r'(\\d{4})')\n    df['year'] = df['year'].astype(float)\n    return df\n\ndef price_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    df['price'] = df['price'].replace({'free':0})\n    price_null_index = df[df['price']==''].index\n    df.loc[price_null_index, 'price'] = -1\n    df['price'] = df['price'].astype(float)\n    return df\n\ndef apply_label_encode(df:pd.DataFrame, column:str)-> pd.DataFrame:\n    label_df = df[~df[column].isnull()]\n    le = LabelEncoder()\n    le_data = le.fit_transform(label_df[column])\n    label_df_index = label_df.index\n    df.loc[label_df_index, f'{column}_label_encoding'] = le_data\n    return df","18afa022":"df = category_numeric_preprocess(df)","9103ad3a":"def tfidf_preprocess(df: pd.DataFrame, column: str, embedding_dim: int=20)-> pd.DataFrame:\n    # tfidf\u3067\u5909\u63db\u3057\u305f\u5f8c\u306b\u3001SVD\u3067\u6642\u9650\u524a\u6e1b\u3059\u308b\u3002\n    tfidf_vec = TfidfVectorizer(ngram_range=(1,2))\n    text_tfidf = tfidf_vec.fit_transform(df[column].fillna('').values.tolist())\n    svd = TruncatedSVD(n_components=embedding_dim, algorithm='arpack',random_state=9999)\n    return svd.fit_transform(text_tfidf)\n\nclass W2VSWEM(object):\n    def __init__(self, word_list: List[str], embedding_dim:int=20):\n        # word2vec\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u3001wrod2vec\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b\u3002\n        self.word_list = word_list\n        self.embedding_dim = embedding_dim\n        self.__validation_type()\n        self.__train_w2v()\n        \n    def __validation_type(self):\n        if isinstance(self.word_list, pd.Series):\n            self.word_list = self.word_list.tolist()\n        if not isinstance(self.word_list, list):\n            raise TypeError(f'you should use list object, however you are using {type(word_list)}.')\n        \n    def __train_w2v(self):\n        self.w2v_model = Word2Vec(self.word_list, vector_size=self.embedding_dim)\n        self.vocab = self.w2v_model.wv.key_to_index\n        \n    def _get_single_column_vec(self, words) -> np.array:\n        result = []\n        \n        for word in words:\n            if word in self.vocab:\n                \n                vector = self.w2v_model.wv[word]\n                result.append(vector)\n        result = np.array(result)\n        return result\n    \n    def get_result(self):\n        self.swem_result = np.zeros([len(self.word_list), self.embedding_dim])\n        for num, i in enumerate(self.word_list):\n            swem = self._get_single_column_vec(i)\n            if len(swem):\n                swem = np.mean(swem, axis=0)\n            else:\n                swem = np.zeros(self.embedding_dim)\n            self.swem_result[num, :] = swem    ","5345a583":"# word2vec\u3067tags\u3092encode\u3059\u308b\ntags_df = []\nfor column in ['categories', 'popular_tags']:\n    df[column] = df[column].fillna('')\n    w2v_swem = W2VSWEM(df[column].tolist())\n    w2v_swem.get_result()\n    result = w2v_swem.swem_result\n    _df = pd.DataFrame(result, columns=[f'w2v_{column}_{x}' for x in range(result.shape[1])])\n    tags_df.append(_df)\ntags_df = pd.concat(tags_df, axis=1)","2c6c1c05":"# \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u3092tfidf\u3067\u7279\u5fb4\u91cf\u306b\u3059\u308b\ntext_svd = tfidf_preprocess(df, 'description')\ntext_svd_df = pd.DataFrame(text_svd, columns=[f'text_svd_{x}' for x in range(text_svd.shape[1])])","8549b9ac":"nlp_df = pd.concat([tags_df, text_svd_df], axis=1)","88a97b47":"use_df = df.copy()\nuse_columns = ['name', 'price', 'popular_tags_len', 'categories_len', 'year', 'developer_label_encoding', 'publisher_label_encoding', 'user_reviews', 'is_train']\nuse_df = use_df[use_columns]\n","8a838374":"use_df = pd.concat([use_df, nlp_df], axis=1)","0cbbd6ae":"train = use_df[use_df['is_train']==True].reset_index(drop=True)\ntest =  use_df[use_df['is_train']!=True].reset_index(drop=True)","94876ff8":"train = train.drop(columns=['is_train'])\ntest = test.drop(columns=['is_train', 'user_reviews'])","b8b11140":"train.shape, test.shape","f9d3a47e":"X = train.copy().drop(columns='user_reviews')\ny = train['user_reviews']","2c909322":"y = y.map({'c0':0, 'c1':1, 'c2':2})","70adf590":"Xy = pd.concat([X, y], axis=1)","85aed052":"X_train_corr = Xy.corr()[\"user_reviews\"].sort_values()\nX_train_corr","62aca3d1":"df_train_pps = pps.predictors(Xy, y=\"user_reviews\")\ndf_train_pps = pd.DataFrame(df_train_pps)\ndf_train_pps","6578c695":"# user_reviews\u306e\u578b\u3092\u6570\u5024\u306b\u3057\u307e\u3057\u305f","af0a88a1":"# price\u304cFree\u306e\u3082\u306e\u3092\uff10\u306b\u3057\u307e\u3057\u305f","ae193f4a":"# PPScore\u3092\u6c42\u3081\u308b","333a74df":"# EDA\u5f8c\u306ePPScore\u3092\u8abf\u3079\u308b","374b27cf":"Target encodeing\u3092\u3057\u306a\u3044\u306e\u3067\u3001dataframe\u3092\u7d50\u5408\u3057\u3066\u524d\u51e6\u7406\u3092\u3057\u307e\u3059\u3002","9cf7c977":"# EDA\u5f8c\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u8abf\u3079\u308b","ffb30277":"# price\u306e\u578b\u3092float\u306b\u3057\u307e\u3057\u305f","29c577cd":"# \u5206\u3051\u305fX\u3068\uff59\u3092\u5408\u4f53\u3055\u305b\u307e\u3057\u305f","ccd895cb":"# \u524d\u51e6\u7406\u3092\u884c\u3046\uff08\u3053\u3053\u304b\u3089\u3057\u3070\u3089\u304f\u306fStrater\u306e\u307e\u307e\u3067\u3059\uff09\n## \u30ab\u30c6\u30b4\u30ea\u3001\u6570\u5024","dcc2b9f5":"# \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080","11f2f2db":"# \u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b","6b3eefc1":"# \u3046\u307e\u304f\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u4e00\u5ea6\u3001X\u3068\uff59\u306b\u5206\u3051\u307e\u3057\u305f","77507ddd":"## \u8a00\u8a9e\u7cfb\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u308b"}}