{"cell_type":{"e53edfde":"code","961e3729":"code","85f41c25":"code","c849a07c":"code","aa7d7846":"code","56469889":"code","17221059":"code","4de2a355":"code","9d344def":"code","8c2d83f7":"code","f6e602db":"code","217c88b5":"code","e4ec9c66":"code","e9feb2d8":"code","a984b648":"code","14685878":"code","4aac4312":"code","14fe70a8":"code","fcb1b880":"code","8188e261":"code","aeeb6a9b":"code","399ec45c":"code","1bd46f3c":"code","ca95a6f8":"code","45c61c02":"code","9e52f81e":"code","b0658d64":"code","f02083bb":"code","0bec4b0b":"code","8ca853f1":"code","77c4ee4b":"markdown"},"source":{"e53edfde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","961e3729":"#Dataset for train\ntrain = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\n\n#Dataset for test\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')","85f41c25":"pd.set_option(\"display.max_columns\",None)\ntrain.head()","c849a07c":"import seaborn as sns\ncorr = train.corr()\n#mask = np.triu(np.ones_like(corr, dtype=bool))\nimport matplotlib.pyplot as plt\nf, ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(corr)","aa7d7846":"import seaborn as sns \nsns.distplot(train[\"target\"])","56469889":"train.isna().sum().reset_index()","17221059":"train = pd.get_dummies(train, drop_first = True)\ntrain.head()","4de2a355":"y = train[\"target\"]\nx = train.drop([\"target\" , \"cat6_G\"], axis =1)","9d344def":"x.head()","8c2d83f7":"x.shape","f6e602db":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(x,y)","217c88b5":"feat_importances = pd.Series(model.feature_importances_, index=x.columns)","e4ec9c66":"feat_importances.nlargest(35).plot(kind='barh')","e9feb2d8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)","a984b648":"import xgboost as xgb\nregressor=xgb.XGBRegressor(n_estimators = 1100, learning_rate=0.05 , max_depth=30 ,subsample =0.8 , min_child_weight =3 )\nregressor.fit(X_train,y_train)","14685878":"print(\"Coefficient of determination R^2 <-- on train set: {}\".format(regressor.score(X_train, y_train)))","4aac4312":"'''from sklearn.model_selection import cross_val_score\nscore=cross_val_score(regressor,X,y,cv=5)\n'''","14fe70a8":"xg_pred=regressor.predict(X_test)","fcb1b880":"sns.distplot(y_test-xg_pred)","8188e261":"print(\"Coefficient of determination R^2 <-- on test set: {}\".format(regressor.score(X_test, xg_pred)))","aeeb6a9b":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, xg_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, xg_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, xg_pred)))","399ec45c":"test = pd.get_dummies(test , drop_first = True)","1bd46f3c":"arr1 = X_train.columns\narr2 = test.columns\nfor i in arr1:\n    if i not in arr2:\n        print(i)","ca95a6f8":"len(test.columns)","45c61c02":"len(X_train.columns)","9e52f81e":"target = regressor.predict(test)","b0658d64":"submissions = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv\")\nsubmissions.head()\n","f02083bb":"submissions.drop(\"target\" , axis =1,inplace =True)","0bec4b0b":"submissions[\"target\"] = target","8ca853f1":"submissions.to_csv('sub.csv', index=False)","77c4ee4b":"SUBMISSIONS"}}