{"cell_type":{"db1bac9d":"code","8a81911e":"code","266eada4":"code","5a7cb97e":"code","6541bedd":"code","35ce0939":"code","89d757ca":"code","a2bff270":"code","d4c6ca84":"code","f0bbf84a":"code","bc0adf3a":"code","d53c3655":"code","ebfafaa5":"code","50eed372":"code","48412188":"code","24b9f49a":"code","44456c94":"code","0477db5d":"code","5df712be":"code","4d1c830f":"code","db71f086":"code","f82a2864":"code","30a98f30":"markdown","c2ebf220":"markdown","93eb8fdf":"markdown","7f8127f3":"markdown","1ad8d990":"markdown","30310527":"markdown","25937ae3":"markdown","c0f052a6":"markdown","d42b0d8f":"markdown"},"source":{"db1bac9d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-darkgrid')","8a81911e":"# btc = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv')\n\nbtc = pd.read_csv('..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv')\n# Converting the Timestamp column from string to datetime\nbtc['Timestamp'] = [datetime.fromtimestamp(x) for x in btc['Timestamp']]\nbtc = btc.set_index('Timestamp')","266eada4":"btc_daily = btc.resample(\"24H\").mean() #daily resampling","5a7cb97e":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import kpss\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","6541bedd":"def fill_missing(df):\n    ### function to impute missing values using interpolation ###\n    df['Open'] = df['Open'].interpolate()\n    df['Close'] = df['Close'].interpolate()\n    df['Weighted_Price'] = df['Weighted_Price'].interpolate()\n    df['Volume_(BTC)'] = df['Volume_(BTC)'].interpolate()\n    df['Volume_(Currency)'] = df['Volume_(Currency)'].interpolate()\n    df['High'] = df['High'].interpolate()\n    df['Low'] = df['Low'].interpolate()\n    print(df.head())\n    print(df.isnull().sum())\n    \nfill_missing(btc_daily)","35ce0939":"\nplt.figure(figsize=(15,12))\nseries = btc_daily.Weighted_Price\nresult = seasonal_decompose(series, model='additive',period=1)\nresult.plot()","89d757ca":"# Renaming the column names accroding to Prophet's requirements\n\ndaily_data_fb = btc_daily.reset_index()[['Timestamp','Weighted_Price']].rename({'Timestamp':'ds','Weighted_Price':'y'}, axis=1)\ndaily_data_fb.head()","a2bff270":"test_length = 365\nsplit_date = \"2020-11-01\"\ntrain_filt = daily_data_fb['ds'] <= split_date\ntest_filt = daily_data_fb['ds'] > split_date\n\ntrain_fb = daily_data_fb[train_filt]\ntest_fb = daily_data_fb[test_filt]\n\nprint(\"train data shape :\", train_fb.shape[0] \/ daily_data_fb.shape[0] * 100)\nprint(\"test data shape :\", test_fb.shape[0] \/ daily_data_fb.shape[0] * 100)","d4c6ca84":"!pip install auto-ts\n# !pip install auto_ts --ignore-installed --no-cache-dir ","f0bbf84a":"\nfrom auto_ts import auto_timeseries \n","bc0adf3a":"train_fb = train_fb.reset_index()\ntrain_fb.head()","d53c3655":"test_fb = test_fb.reset_index()\ntest_fb.head()","ebfafaa5":"\nautoml_model = auto_timeseries(score_type='rmse',\n                time_interval='D', forecast_period=30,\n                non_seasonal_pdq=None, seasonality=False, seasonal_period=12,\n                model_type=['best'],\n                verbose=2)","50eed372":"ts_column = 'ds'\ntarget = 'y'\nsep = ','","48412188":"automl_model.fit(\n    traindata=train_fb,\n    ts_column=ts_column,\n    target=target,\n    cv=5,\n    sep=',')","24b9f49a":"y_pred = automl_model.predict(test_fb,model='best')\npredf = pd.DataFrame([test_fb[target].values, y_pred['yhat'].values]).T\npredf.columns = ['Actual','Predicted']\npredf.head()","44456c94":"from auto_ts import print_ts_model_stats\nprint_ts_model_stats(test_fb[target].values, y_pred['yhat'].values,'Best')","0477db5d":"# Using Best Model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb\n)  \nfuture_predictions","5df712be":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb,\n    model='auto_SARIMAX'\n)\nfuture_predictions","4d1c830f":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb,\n    model='Prophet',\n    simple=False\n\n)\nfuture_predictions","db71f086":"import copy\nsubm = test_fb[[target]]\nprint(subm.shape)\nsubm.head()","f82a2864":"subm['predictions'] = future_predictions['yhat'].values\nsubm[[target,'predictions']].plot(figsize=(15,8))","30a98f30":"Read data","c2ebf220":"#### Time resampling","93eb8fdf":"#### Time Series Decomposition & Statistical Tests","7f8127f3":"## This notebook is derived from this excellent notebook:\nhttps:\/\/www.kaggle.com\/caesarlupum\/simple-auto-ts-pipeline?scriptVersionId=52091467","1ad8d990":"#### Forecast Results","30310527":"# Please note that you must change the Settings tab on the right side and click \"Environment\" and change it to \"Use Latest Version\". Then only you will be able to install Auto_TS on Kaggle Notebooks.","25937ae3":"## Glipse Data","c0f052a6":"![](https:\/\/github.com\/AutoViML\/Auto_TS\/raw\/master\/logo.png)\n\n[Auto_TS: Auto_TimeSeries](https:\/\/github.com\/AutoViML\/Auto_TS)","d42b0d8f":"### Evaluate Results"}}