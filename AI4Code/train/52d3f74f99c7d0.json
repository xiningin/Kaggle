{"cell_type":{"9db7fae1":"code","68663e5f":"code","ad4f747b":"code","0396a743":"code","6aa77792":"code","897be90e":"code","ca1aaebf":"code","b57dbc84":"code","2e22aa19":"code","6592a141":"code","0567962b":"code","dbf1b2eb":"code","983d6773":"code","b11c1c9a":"code","d11edbbd":"code","b638e4b9":"code","eca482be":"code","e9d1948c":"code","e911c815":"code","923fd095":"code","8bcb94c0":"code","851bb441":"code","be656537":"code","68a760e1":"code","6c5d2f42":"code","191fb60f":"code","47e6379d":"code","2a888b4f":"code","d4b0dbbb":"code","ab1c000e":"code","2bf56428":"code","d18c408b":"code","07b65034":"code","4d6a585b":"code","80fe850a":"code","0ec46980":"code","a042a26f":"code","4c09b1d9":"code","a234df9f":"code","8b721619":"code","e0ed4e07":"code","b85fbe00":"code","a70f3386":"code","b160a944":"code","75e07798":"code","f0c78f4f":"code","b104e875":"code","a19c6ea7":"code","bb228efd":"code","8d627085":"markdown","ffa58d83":"markdown","c66adbad":"markdown","270b65d8":"markdown","e933b5f9":"markdown","ca956d42":"markdown","53ebce21":"markdown","c1976ccd":"markdown","08cbecd1":"markdown","a1d4efb4":"markdown","2ae715a5":"markdown","56998891":"markdown","85927235":"markdown","e6058a96":"markdown","61620c96":"markdown","717fb2f3":"markdown","ac9802a8":"markdown","1ed6691d":"markdown","cf3a7905":"markdown","e20feecb":"markdown","d923e755":"markdown","10f5ef05":"markdown","4342aaff":"markdown","45a80a2d":"markdown","cf134fb4":"markdown","dcf2da7d":"markdown","602ca943":"markdown","82ce9b60":"markdown","9ed11047":"markdown","e98f8712":"markdown","88f0952c":"markdown","38d00ed9":"markdown","c9017846":"markdown","ca150dc3":"markdown","18f6b9ba":"markdown","2c001bc7":"markdown","e6576fab":"markdown","2136ac35":"markdown","4781a7bf":"markdown"},"source":{"9db7fae1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Matplotlib\nimport matplotlib.pyplot as plt;\n# Seaborn\nimport seaborn as sns;\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68663e5f":"titanic = pd.read_csv(\"..\/input\/titanic\/train.csv\");\ntitanic.dropna(axis = 0, inplace = True);\ntitanic.head()","ad4f747b":"housePrices = pd.read_csv(\"..\/input\/houseprices\/train.csv\");\nhousePrices.head()","0396a743":"iris = sns.load_dataset(\"iris\");\niris.head()","6aa77792":"tips = sns.load_dataset(\"tips\")\ntips.head()","897be90e":"flights = sns.load_dataset(\"flights\")\nflights.head()","ca1aaebf":"penguins = sns.load_dataset(\"penguins\");\npenguins.dropna(axis = 0, inplace = True);\npenguins.head()","b57dbc84":"fig, axes = plt.subplots(1, 2, sharey=True, sharex = True, figsize=(10,5))\nfig.suptitle('Bigger 1 row x 2 columns axes with no data')\naxes[0].set_title('Title of the first chart')\naxes[1].set_title('Title of the second chart')","2e22aa19":"# Data for plotting\nt = np.arange(0.0, 2.0, 0.01)\ns = np.sin(2 * np.pi * t);\nc = np.cos(2 * np.pi * t);\n\nfig, ax = plt.subplots()\nax.plot(t, s, label = \"Sin Wave\")\nax.plot(t, c, label = \"Cos Wave\")\n\nax.set(xlabel='time (s)', ylabel='voltage (mV)',\n       title='About as simple as it gets, folks')\n\nax.grid()\nplt.legend()\nplt.show()","6592a141":"fig, axes = plt.subplots(1, 3, sharey=False, figsize=(20,5))\nfig.suptitle(\"Pie Plots\");\naxes[0].set_title('The percentage of Islands of Penguins')\naxes[1].set_title('Effects on Pie Plot')\naxes[2].set_title('')\n\nuniqueIslands = penguins[\"island\"].unique();\npercPerIslands = [len(penguins[penguins[\"island\"] == items]) \/ penguins.shape[0] for items in uniqueIslands];\naxes[0].pie(percPerIslands, labels = uniqueIslands);\n\nmycolors = [\"yellow\", \"hotpink\", \"#816137\"];\naxes[1].pie(percPerIslands, labels = uniqueIslands, explode = [0.2, 0, 0], shadow = True, colors = mycolors);\n\nmycolors = [\"yellow\", \"hotpink\", \"#816137\"];\naxes[2].pie(percPerIslands, labels = uniqueIslands, explode = [0.2, 0, 0], shadow = True, colors = mycolors, autopct='%.0f%%');\nplt.legend(title = \"Islands\");\n\nplt.show();","0567962b":"x = np.linspace(0.1, 2 * np.pi, 41)\ny = np.exp(np.sin(x))\n\nplt.stem(x, y, linefmt='grey', markerfmt='D', bottom = 0.0);\nplt.show()","dbf1b2eb":"sns.displot(x = titanic['Age'], bins = 30, kde = True);\nfig.suptitle('Density Plot');\nplt.show();","983d6773":"sns.displot(data=titanic, x = \"Age\", kind=\"ecdf\");","b11c1c9a":"sns.displot(data = housePrices, x = \"LotFrontage\", y = \"SalePrice\")","d11edbbd":"g = sns.displot(data=housePrices, x=\"LotFrontage\", y=\"SalePrice\", kind=\"kde\", rug=True);","b638e4b9":"sns.displot(data=titanic, x=\"Age\", hue=\"Survived\", kind=\"kde\")","eca482be":"sns.displot(data=titanic, x=\"Age\", hue=\"Survived\", multiple=\"stack\")","e9d1948c":"sns.displot(data=titanic, x=\"Age\", hue=\"Survived\", col=\"Sex\", kind=\"kde\")","e911c815":"fig, axes = plt.subplots(3, 3, sharey=False, figsize=(15,10))\nfig.suptitle(\"KDE Plot\");\naxes[0, 0].set_title('1')\naxes[0, 1].set_title('2')\naxes[0, 2].set_title('3')\naxes[1, 0].set_title('4')\naxes[1, 1].set_title('5')\naxes[1, 2].set_title('6')\naxes[2, 0].set_title('7')\naxes[2, 1].set_title('8')\naxes[2, 2].set_title('9')\n\nsns.kdeplot(data=tips, x=\"total_bill\", ax = axes[0, 0]);\nsns.kdeplot(data=tips, x=\"total_bill\", y = \"tip\", ax = axes[0, 1]);\nsns.kdeplot(data=iris, ax = axes[0, 2]) \nsns.kdeplot(data=iris, ax = axes[1, 0], bw_adjust=.2) # Use less smoothing:bw_adjust=.2\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"time\", ax = axes[1, 1])\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"time\", ax = axes[1, 2], multiple=\"stack\")\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"size\", ax = axes[2, 0])\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"size\", fill=True, common_norm=False, palette=\"crest\", alpha=.5, linewidth=0, ax = axes[2, 1])\nsns.kdeplot(data=iris, x=\"petal_length\", y=\"petal_width\", hue=\"species\", fill=True, alpha=.5, ax = axes[2, 2])","923fd095":"fig, axes = plt.subplots(1, 3, sharey=False, figsize=(20,5))\nfig.suptitle(\"Boxplots\");\naxes[0].set_title('Boxplot of all Numeric Variables In IRIS Data')\naxes[1].set_title('Boxplot of all Numeric Variables In Titanic Data')\naxes[2].set_title('Boxplot of all Numeric Variables In Age and Fare Params')\nsns.boxplot(data=iris, orient=\"v\", palette=\"Set2\", ax = axes[0]);\nsns.boxplot(data=titanic, orient=\"v\", palette=\"Set2\", ax = axes[1]);\nsns.boxplot(data=titanic.loc[:, [\"Age\", \"Fare\"]], orient=\"v\", palette=\"Set2\", ax = axes[2]);","8bcb94c0":"fig, axes = plt.subplots(1, 3, sharey=False, figsize=(20,5))\nfig.suptitle(\"Boxplots\");\naxes[0].set_title('Boxplot of a Age Parameter')\naxes[1].set_title('Boxplot of Age wrt Sex')\naxes[2].set_title('Boxplot of Age wrt Sex and Embarked')\nsns.boxplot(x=titanic[\"Age\"], ax = axes[0]);\nsns.boxplot(x=\"Sex\", y=\"Age\", data=titanic, ax = axes[1], order=[\"female\", \"male\"]);\nsns.boxplot(x=\"Sex\", y=\"Age\", hue=\"Embarked\", data=titanic, ax = axes[2], palette=\"Set2\", linewidth=2.5)","851bb441":"sns.boxplot(x=\"Sex\", y=\"Age\", data=titanic, order=[\"female\", \"male\"]);\nsns.swarmplot(x=\"Sex\", y=\"Age\", data=titanic, order=[\"female\", \"male\"], color = \".25\");","be656537":"sns.catplot(x=\"Embarked\", y=\"Fare\",\n            hue=\"Sex\", col=\"Survived\",\n            data=titanic, kind=\"box\",\n            height=5, aspect=1.0);\nplt.show();","68a760e1":"sns.lmplot(x=\"total_bill\", y=\"tip\", data=tips);","6c5d2f42":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips)","191fb60f":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips, markers=[\"o\", \"x\"])","47e6379d":"sns.lmplot(x=\"total_bill\", y=\"tip\", col=\"smoker\", data=tips)","2a888b4f":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue = \"smoker\", col=\"time\", data=tips)","d4b0dbbb":"sns.lmplot(x=\"total_bill\", y=\"tip\", row=\"sex\", col=\"time\", data=tips, height=3)","ab1c000e":"fig, axes = plt.subplots(2, 2, sharey=False, figsize=(20,10))\nfig.suptitle(\"Heatmaps\");\naxes[0, 0].set_title('Heatmap of Correlation of Titanic Numeric Variables')\naxes[0, 1].set_title('Heatmap of Correlation of HousePrices Numeric Variables')\n\ncorrMatrix = titanic.corr();\nsns.heatmap(corrMatrix, ax = axes[0, 0]);\n\ncorrMatrix = housePrices.corr();\nsns.heatmap(corrMatrix, ax = axes[0, 1]);\n\ncorrMatrix = titanic.corr();\nsns.heatmap(corrMatrix, ax = axes[1, 0], annot = True, linewidths = .5);\n\ncorrMatrix = housePrices.corr();\nsns.heatmap(corrMatrix, ax = axes[1, 1], cmap=\"YlGnBu\");","2bf56428":"fig, axes = plt.subplots(2, 3, sharey=False, figsize=(25,10))\nfig.suptitle(\"Violin Plots\");\naxes[0, 0].set_title('Violin Plot of Age')\naxes[0, 1].set_title('Age vs Survived')\naxes[0, 2].set_title('Age vs Survived & Sex')\naxes[1, 0].set_title('Age vs Survived & Sex (With Quartiles)')\naxes[1, 1].set_title('Age vs Survived & Sex (Scale the violin width by the number of observations)')\n\nsns.violinplot(x = titanic[\"Age\"], ax = axes[0, 0]);\nsns.violinplot(y = titanic[\"Age\"], x = titanic[\"Survived\"], ax = axes[0, 1]);\nsns.violinplot(y = \"Age\", x = \"Survived\", hue = \"Sex\", data = titanic, ax = axes[0, 2]);\nsns.violinplot(y = \"Age\", x = \"Survived\", hue = \"Sex\", data = titanic, ax = axes[1, 0], split = True, inner=\"quartile\");\nsns.violinplot(y = \"Age\", x = \"Survived\", hue = \"Sex\", data = titanic, ax = axes[1, 1], split = True, inner=\"quartile\", scale = \"count\");","d18c408b":"fig, axes = plt.subplots(2, 3, sharey=True, figsize=(15,10))\nfig.suptitle(\"Scatter Plot\");\naxes[0, 0].set_title('Tip vs Total Bill')\naxes[0, 1].set_title('Tip vs Total Bill & Time')\naxes[0, 2].set_title('Tip vs Total Bill & Day')\naxes[1, 0].set_title('Color Changes wrt Numeric Values')\naxes[1, 1].set_title('Size Changes wrt Numeric Values')\naxes[1, 2].set_title('Arbitrary Markers Can Be Set')\n\nsns.scatterplot(data=tips, x=\"tip\", y=\"total_bill\", ax = axes[0, 0]);\nsns.scatterplot(data=tips, x=\"tip\", y=\"total_bill\", hue = \"time\", ax = axes[0, 1]);\nsns.scatterplot(data=tips, x=\"tip\", y=\"total_bill\", hue = \"day\", style = \"time\", ax = axes[0, 2]);\n\n\n# If the variable assigned to hue is numeric, the semantic mapping will be quantitative and use a different default palette:\nsns.scatterplot(data=tips, x=\"tip\", y=\"total_bill\", hue = \"size\", ax = axes[1, 0]);\n\n# A numeric variable can also be assigned to size to apply a semantic mapping to the areas of the points:\n# set lengend=\"full\" to force every unique value to appear in the legend:\nsns.scatterplot(data=tips, x=\"tip\", y=\"total_bill\", hue=\"size\", size=\"size\", legend = \"full\", ax = axes[1, 1]);\n\nmarkers = {\"Lunch\": \"s\", \"Dinner\": \"X\"};\nsns.scatterplot(data=tips, x=\"tip\", y=\"total_bill\", style = \"time\", markers = markers, ax = axes[1,2]);","07b65034":"fig, axes = plt.subplots(2, 3, sharey=False, figsize=(15,10))\nfig.suptitle(\"Line Plot\");\naxes[0, 0].set_title('May Flights')\naxes[0, 1].set_title('Total Number of Passengers wrt Years')\naxes[0, 2].set_title('Total Number of Passengers wrt Months')\naxes[1, 0].set_title('Total Number of Passengers wrt Months')\naxes[1, 1].set_title('Total Number of Passengers wrt Seasons')\naxes[1, 2].set_title('Styling wrt Seasons')\n\nmayFlights = flights[flights[\"month\"] == \"May\"];\nsns.lineplot(data=mayFlights, x=\"year\", y=\"passengers\", ax = axes[0, 0]);\n\n# Passing the entire dataset in long-form mode will aggregate over repeated values (each year) to show the mean and 95% confidence interval:\nsns.lineplot(data=flights, x = \"year\", y = \"passengers\", ax = axes[0, 1]);\n\n# Assign a grouping semantic (hue, size, or style) to plot separate lines\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue=\"month\", ax = axes[0, 2]);\n\n# The same column can be assigned to multiple semantic variables, which can increase the accessibility of the plot:\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue=\"month\", style=\"month\", ax = axes[1, 0]);\n\nflights[\"Season\"] = [\"Winter\" if (item == \"Dec\" or item == \"Jan\" or item == \"Feb\") \n                else \"Spring\" if (item == \"Mar\" or item == \"Apr\" or item == \"May\") \n                else \"Summer\" if (item == \"Jun\" or item == \"Jul\" or item == \"Aug\")\n                else \"Autumn\" for item in flights[\"month\"] ];\n\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue = \"Season\", ax = axes[1, 1]);\n\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue = \"month\", style = \"Season\", size = \"Season\", ax = axes[1, 2])","4d6a585b":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\");","80fe850a":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\")","0ec46980":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", kind=\"kde\", size = 7)","a042a26f":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"reg\")","4c09b1d9":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"hist\")","a234df9f":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"hex\")","8b721619":"sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", height=5, ratio=2, marginal_ticks=True)","e0ed4e07":"g = sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot_joint(sns.kdeplot, color=\"r\", zorder = 0, levels = 12)\ng.plot_marginals(sns.rugplot, color=\"r\", height=-.15, clip_on=False)","b85fbe00":"fig, axes = plt.subplots(1, 3, sharey=False, figsize=(15,4))\nfig.suptitle(\"Bar Plot\");\n\nsns.barplot(x=\"day\", y=\"total_bill\", data=tips, ax = axes[0], order=[\"Sun\", \"Sat\", \"Fri\", \"Thur\"], capsize=.2);\n# Draw a set of horizontal bars: (Because the x axis is a numerical variable)\nsns.barplot(x=\"total_bill\", y=\"day\", data=tips, ax = axes[1], color=\"salmon\");\nsns.barplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, ax = axes[2]);\n\n# Use catplot() to combine a barplot() and a FacetGrid. This allows grouping within additional categorical variables. \n# Using catplot() is safer than using FacetGrid directly, as it ensures synchronization of variable order across facets:\n\nsns.catplot(x=\"sex\", y=\"total_bill\",\n            hue=\"smoker\", col=\"time\",\n            data=tips, kind=\"bar\",\n            height=4, aspect=.7);","a70f3386":"sns.pairplot(iris);","b160a944":"sns.pairplot(iris, hue = \"species\");","75e07798":"sns.pairplot(iris, hue=\"species\", diag_kind=\"hist\")","f0c78f4f":"sns.pairplot(iris, hue=\"species\", kind=\"kde\")","b104e875":"sns.pairplot(iris, hue = \"species\", kind=\"hist\")","a19c6ea7":"sns.pairplot(iris, hue=\"species\", markers=[\"o\", \"s\", \"D\"])","bb228efd":"sns.pairplot(\n    iris,\n    x_vars=[\"petal_width\", \"petal_length\", \"sepal_width\"],\n    y_vars=[\"sepal_length\", \"petal_width\"],\n    hue = \"species\"\n)","8d627085":"Alternatively, setting kind=\"hex\" will use matplotlib.axes.Axes.hexbin() to compute a bivariate histogram using hexagonal bins:","ffa58d83":"# Load Data","c66adbad":"# Violin plot","270b65d8":"Use swarmplot() to show the datapoints on top of the boxes:","e933b5f9":"# Scatter Plot","ca956d42":"## Stem Plot","53ebce21":"There are also two options for bin-based visualization of the joint distribution. The first, with kind=\"hist\", uses histplot() on all of the axes:","c1976ccd":"# Pair Plots","08cbecd1":"# Heatmap","a1d4efb4":"Several different approaches to plotting are available through the kind parameter. Setting kind=\"kde\" will draw both bivariate and univariate KDEs:","2ae715a5":"# Basics","56998891":"Draw a boxplot for each numeric variable in a DataFrame:","85927235":"Use different markers as well as colors so the plot will reproduce to black-and-white more easily:","e6058a96":"## Simple Plot","61620c96":"It\u2019s possible to force marginal histograms:","717fb2f3":"Plot the levels of the third variable across different columns:","ac9802a8":"Condition on a third variable and plot the levels in different colors:","1ed6691d":"## Pie Plot","cf3a7905":"Use vars or x_vars and y_vars to select the variables to plot:","e20feecb":"# Boxplot","d923e755":"The figure is constructed using a FacetGrid, meaning that you can also show subsets on distinct subplots, or \u201cfacets\u201d:","10f5ef05":"# Joint Plot","4342aaff":"# LM Plot","45a80a2d":"Assigning a hue variable adds a semantic mapping and changes the default marginal plot to a layered kernel density estimate (KDE):","cf134fb4":"To add more layers onto the plot, use the methods on the JointGrid object that jointplot() returns:","dcf2da7d":"Set kind=\"reg\" to add a linear regression fit (using regplot()) and univariate KDE curves:","602ca943":"# Seaborn Library","82ce9b60":"## KDE Plot","9ed11047":"The kind parameter determines both the diagonal and off-diagonal plotting style. Several options are available, including using kdeplot() to draw KDEs:","e98f8712":"Use JointGrid parameters to control the size and layout of the figure:","88f0952c":"Each kind of plot can be drawn separately for subsets of data using hue mapping:","38d00ed9":"## Displot\n\nThese plots help us to visualize the distribution of data. We can use these plots to understand the mean, median, range, variance, deviation, etc of the data.\n\nDisplot gives us the histogram of the selected continuous variable.\n\nIt is an example of a univariate analysis.\n\nWe can change the number of bins i.e. number of vertical bars in a histogram","c9017846":"You can also draw empirical cumulative distribution functions (ECDFs):","ca150dc3":"# Line Plot","18f6b9ba":"# Matplotlib Library","2c001bc7":"# Bar Plot","e6576fab":"Assigning a hue variable will add conditional colors to the scatterplot and draw separate density curves (using kdeplot()) on the marginal axes:","2136ac35":"Use catplot() to combine a boxplot() and a FacetGrid. This allows grouping within additional categorical variables. Using catplot() is safer than using FacetGrid directly, as it ensures synchronization of variable order across facets: (4 direction plot)","4781a7bf":"To draw a bivariate plot, assign both x and y:"}}