{"cell_type":{"5eaa8afd":"code","25cfb9b5":"code","b2b93335":"code","3678cf42":"code","c2b629c3":"code","2d1c2d26":"code","4972061a":"code","221c280e":"code","8db857d5":"code","d3d2a1fa":"code","7bc94ec7":"code","956f4ed6":"code","1730d9c8":"code","713256d3":"code","c9581d66":"code","5c5dfb37":"code","c7ffab42":"code","ba3bae4d":"code","e56c0526":"markdown","429681fa":"markdown","c0e4e9eb":"markdown","25425b0f":"markdown","943006a0":"markdown","0f3816a0":"markdown","630cbeda":"markdown"},"source":{"5eaa8afd":"import pandas as pd\nimport numpy as np\nimport scipy as sc\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")","25cfb9b5":"data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata.head()","b2b93335":"#Check size of data frame\ndata.shape","3678cf42":"#Check info of data frame\ndata.info()","c2b629c3":"sns.set_style(\"whitegrid\")","2d1c2d26":"plt.figure(figsize = (10, 5))\nsns.countplot(x = 'DEATH_EVENT', data = data,  palette = \"deep\")","4972061a":"cols = ['anaemia', 'diabetes', 'high_blood_pressure', 'sex', 'smoking']\n\nfig, axarr = plt.subplots(2, 3, figsize=(15, 10))\nfor i in cols:\n    index = cols.index(i)\n    plt.subplot(2, 3, index + 1)\n    sns.countplot(x = i, data = data, hue=\"DEATH_EVENT\", palette = \"deep\")","221c280e":"fig, axarr = plt.subplots(2, 3, figsize=(15, 10))\ncols = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']\nfor i in cols:\n    index = cols.index(i)\n    plt.subplot(2,3,index + 1)\n    sns.distplot(data[i])","8db857d5":"cols = list(data.columns)\n\nplt.figure(figsize = (10,10))\nchart = sns.heatmap(data[cols].corr(), annot = True, cmap = \"Blues\")\nbottom, top = chart.get_ylim()\nchart.set_ylim(bottom + 0.5, top - 0.5)","d3d2a1fa":"print(\"Find most important features relative to target\")\ncorr = abs(data.corr())\ncorr.sort_values(['DEATH_EVENT'], ascending=False, inplace=True)\ncorr.DEATH_EVENT","7bc94ec7":"X = data[['time', 'serum_creatinine', 'ejection_fraction', 'age', 'serum_sodium']]\nY = data['DEATH_EVENT']","956f4ed6":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","1730d9c8":"model1 = GaussianNB()\nmodel1.fit(x_train, y_train)\nprediksi_training1 = model1.predict(x_train)\nprediksi_testing1 = model1.predict(x_test)\n\nprint (\"Training: \", accuracy_score(y_train, prediksi_training1))\nprint (\"Testing: \", accuracy_score(y_test, prediksi_testing1))","713256d3":"model2 = RandomForestClassifier()\nmodel2.fit(x_train, y_train)\nprediksi_training2 = model2.predict(x_train)\nprediksi_testing2 = model2.predict(x_test)\n\nprint (\"Training: \", accuracy_score(y_train, prediksi_training2))\nprint (\"Testing: \", accuracy_score(y_test, prediksi_testing2))","c9581d66":"model3 = GradientBoostingClassifier()\nmodel3.fit(x_train, y_train)\nprediksi_training3 = model3.predict(x_train)\nprediksi_testing3 = model3.predict(x_test)\n\nprint (\"Training: \", accuracy_score(y_train, prediksi_training3))\nprint (\"Testing: \", accuracy_score(y_test, prediksi_testing3))","5c5dfb37":"model4 = LogisticRegression()\nmodel4.fit(x_train, y_train)\nprediksi_training4 = model4.predict(x_train)\nprediksi_testing4 = model4.predict(x_test)\n\nprint (\"Training: \", accuracy_score(y_train, prediksi_training4))\nprint (\"Testing: \", accuracy_score(y_test, prediksi_testing4))","c7ffab42":"training1 = accuracy_score(y_train, prediksi_training1)\ntraining2 = accuracy_score(y_train, prediksi_training2)\ntraining3 = accuracy_score(y_train, prediksi_training3)\ntraining4 = accuracy_score(y_train, prediksi_training4)\n\ntesting1 = accuracy_score(y_test, prediksi_testing1)\ntesting2 = accuracy_score(y_test, prediksi_testing2)\ntesting3 = accuracy_score(y_test, prediksi_testing3)\ntesting4 = accuracy_score(y_test, prediksi_testing4)\n\n\nHasil_Training = [training1, training2, training3, training4]\nHasil_Testing = [testing1, testing2, testing3, testing4];\n\ncolumns = ['Naive bayes', 'Random Forest', 'Gradient Boosting',  'Logistic Regresi']\nGabungan = {'Model': columns, 'Akurasi Training': Hasil_Training, 'Akurasi Testing': Hasil_Testing}\n\nHasil_prediksi = pd.DataFrame(data = Gabungan)","ba3bae4d":"Hasil_prediksi","e56c0526":"## Modelling","429681fa":"We will use the features that correlate with the target of more than 0.1 correlation value.","c0e4e9eb":"Based on the plot above, we know that the proportion of death events happened less than no happened.","25425b0f":"Based on the info above, we know that there is no missing value in data frame and the target of predictions is DEATH_EVENT. ","943006a0":"## Feature Engineering","0f3816a0":"## EDA","630cbeda":"## Data Extraction"}}