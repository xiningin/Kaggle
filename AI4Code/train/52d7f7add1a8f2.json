{"cell_type":{"1915d680":"code","de77248c":"code","92b19db1":"code","99534bd9":"code","709aa75f":"code","2ff22c43":"code","451ccbbe":"code","d2f2590d":"code","189036c5":"code","7dd0c317":"code","206b7f52":"code","90c18498":"code","3dac47df":"code","1af3afb8":"code","edce1d4e":"markdown"},"source":{"1915d680":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use('fivethirtyeight') ","de77248c":"pjme = pd.read_csv('..\/input\/PJME_hourly.csv', index_col=[0], parse_dates=[0]) # We set the index column and know it has dates","92b19db1":"split_date = '01-Jan-2015'\npjme_train = pjme.loc[pjme.index <= split_date].copy()\npjme_test = pjme.loc[pjme.index > split_date].copy()","99534bd9":"pjme_test \\\n    .rename(columns={'PJME_MW': 'TEST SET'}) \\\n    .join(pjme_train.rename(columns={'PJME_MW': 'TRAINING SET'}),\n          how='outer') \\\n    .plot(figsize=(15,5), title='PJM East', style='.')\nplt.show()","709aa75f":"model = Prophet()\nmodel.fit(pjme_train.reset_index() \\\n              .rename(columns={'Datetime':'ds',\n                               'PJME_MW':'y'}))","2ff22c43":"pjme_test_fcst = model.predict(df=pjme_test.reset_index() \\\n                                   .rename(columns={'Datetime':'ds'}))","451ccbbe":"pjme_test_fcst.head()","d2f2590d":"import datetime as dt\n# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nl = dt.datetime.strptime('01-01-2017', '%m-%d-%Y').date()\nu = dt.datetime.strptime('01-30-2017', '%m-%d-%Y').date()\nax.set_xbound(lower=l, upper=u)\nax.set_ylim(0, 60000)\nplot = plt.suptitle('Jan 2017  Forecast vs Actuals non-Holiday Model')","189036c5":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nl = dt.datetime.strptime('07-01-2015', '%m-%d-%Y').date()\nu = dt.datetime.strptime('07-07-2015', '%m-%d-%Y').date()\nax.set_xbound(lower=l, upper=u)\nax.set_ylim(0, 60000)\nplot = plt.suptitle('Week of July Forecast vs Actuals non-Holiday Model')","7dd0c317":"future=model.make_future_dataframe(50000, freq='H')","206b7f52":"forecast=model.predict(future)","90c18498":"forecast.tail()","3dac47df":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nfig = model.plot(forecast, ax=ax)\nl = dt.datetime.strptime('01-01-2019', '%m-%d-%Y').date()\nu = dt.datetime.strptime('02-01-2019', '%m-%d-%Y').date()\nax.set_xbound(lower=l, upper=u)\nax.set_ylim(0, 60000)\nplot = plt.suptitle('Jan 2019  Forecast')","1af3afb8":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","edce1d4e":"# To the existing fork i have added future forcasting"}}