{"cell_type":{"b5785fbb":"code","71d0b9b3":"code","3eaf76cd":"code","c2331418":"code","7b266bbd":"code","fc38ec16":"code","7eb10f1c":"code","25e39f6d":"code","df266dc6":"code","04e2c155":"code","04c83782":"code","eee62021":"code","d0fa7aed":"code","c32d0437":"code","04eeff5f":"code","53e1abd9":"code","93fb7556":"code","5b4cd432":"code","085833a7":"code","83aa15c3":"code","505e0b55":"code","1792c304":"code","09d86183":"code","2b2fbfb9":"code","b5239397":"code","0f65c663":"code","00b96dcf":"code","649d509f":"code","00aadc8e":"code","52e9ddfa":"code","517fa1fe":"code","37fdfcbe":"code","ed24e1bb":"code","1b501c56":"code","b4ff47e0":"code","5a2350f8":"code","4879c753":"code","7d2fb2df":"code","945903d7":"code","202247b2":"code","3804f674":"code","c0cac128":"markdown","fa10dd6f":"markdown","2d8f7d42":"markdown","e9b51bf5":"markdown","4e8becca":"markdown","c31a8851":"markdown","c3c93a1d":"markdown","b8bc27ec":"markdown","ab882be2":"markdown","35d8fd6a":"markdown","d2a4d25c":"markdown"},"source":{"b5785fbb":"# Import Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer \nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score, KFold\nsns.set(style=\"whitegrid\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n%matplotlib inline","71d0b9b3":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","3eaf76cd":"train.head()","c2331418":"correlations = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(correlations, vmax=.8, square=True);\ncorrelations = correlations[\"SalePrice\"].sort_values(ascending=False)\nfeatures = correlations.index[1:6]\ncorrelations","7b266bbd":"# Checking for only missing values in Training Data\ntraining_null = train.isnull().sum()[train.isnull().sum() != 0]\nprint('Missing Values in Training Data:\\n')\nprint(training_null)","fc38ec16":"# Checking for only missing values in Testing Data\ntesting_null =test.isnull().sum()[test.isnull().sum() != 0]\nprint('Missing Values in Testing Data :\\n')\nprint(testing_null)","7eb10f1c":"null = pd.concat([training_null, testing_null], axis=1, keys=[\"Training\", \"Testing\"])\nnull","25e39f6d":"# Showing the missing values in Training Data\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False)","df266dc6":"# Showing the missing values in Testing Data\nsns.heatmap(test.isnull(),yticklabels=False,cbar=False)","04e2c155":"null_many = null[null.sum(axis=1) > 200]  #a lot of missing values\nnull_few = null[(null.sum(axis=1) > 0) & (null.sum(axis=1) < 200)]  #not as much missing values","04c83782":"null_many","eee62021":"null_has_meaning_features = [\"Alley\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"FireplaceQu\", \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PoolQC\", \"Fence\", \"MiscFeature\"]","d0fa7aed":"for i in null_has_meaning_features:\n    train[i].fillna(\"None\", inplace=True)\n    test[i].fillna(\"None\", inplace=True)","c32d0437":"imputer = SimpleImputer(strategy=\"median\")","04eeff5f":"training_null = pd.isnull(train).sum()\ntesting_null = pd.isnull(test).sum()\n\nnull = pd.concat([training_null, testing_null], axis=1, keys=[\"Training\", \"Testing\"])","53e1abd9":"null_many = null[null.sum(axis=1) > 200]  #a lot of missing values\nnull_few = null[(null.sum(axis=1) > 0) & (null.sum(axis=1) < 200)]  #few missing values","93fb7556":"null_many","5b4cd432":"train.drop(\"LotFrontage\", axis=1, inplace=True)\ntest.drop(\"LotFrontage\", axis=1, inplace=True)","085833a7":"null_few","83aa15c3":"train[\"GarageYrBlt\"].fillna(train[\"GarageYrBlt\"].median(), inplace=True)\ntest[\"GarageYrBlt\"].fillna(test[\"GarageYrBlt\"].median(), inplace=True)\ntrain[\"MasVnrArea\"].fillna(train[\"MasVnrArea\"].median(), inplace=True)\ntest[\"MasVnrArea\"].fillna(test[\"MasVnrArea\"].median(), inplace=True)\ntrain[\"MasVnrType\"].fillna(\"None\", inplace=True)\ntest[\"MasVnrType\"].fillna(\"None\", inplace=True)","505e0b55":"numeric_features = train.select_dtypes(include=[np.number])\ncat_features = train.select_dtypes(include=[np.object])\ncat_features.columns","1792c304":"fill_num = []\n\nfor i in numeric_features:\n    if i in list(null_few.index):\n        fill_num.append(i)","09d86183":"print(fill_num)","2b2fbfb9":"for i in fill_num:\n    train[i].fillna(train[i].median(), inplace=True)\n    test[i].fillna(test[i].median(), inplace=True)","b5239397":"fill_cat = []\n\nfor i in cat_features:\n    if i in list(null_few.index):\n        fill_cat.append(i)","0f65c663":"print(fill_cat)","00b96dcf":"def most_common_term(lst):\n    lst = list(lst)\n    return max(set(lst), key=lst.count)\n#most_common_term finds the most common term in a series\n\nmost_common = [\"Electrical\", \"Exterior1st\", \"Exterior2nd\", \"Functional\", \"KitchenQual\", \"MSZoning\", \"SaleType\", \"Utilities\", \"MasVnrType\"]\n\ncounter = 0\nfor i in fill_cat:\n    most_common[counter] = most_common_term(train[i])\n    counter += 1","649d509f":"most_common_dictionary = {fill_cat[0]: [most_common[0]], fill_cat[1]: [most_common[1]], fill_cat[2]: [most_common[2]], fill_cat[3]: [most_common[3]],\n                          fill_cat[4]: [most_common[4]], fill_cat[5]: [most_common[5]], fill_cat[6]: [most_common[6]], fill_cat[7]: [most_common[7]],\n                          fill_cat[8]: [most_common[8]]}\nmost_common_dictionary","00aadc8e":"counter = 0\nfor i in fill_cat:  \n    train[i].fillna(most_common[counter], inplace=True)\n    test[i].fillna(most_common[counter], inplace=True)\n    counter += 1","52e9ddfa":"training_null = pd.isnull(train).sum()\ntesting_null = pd.isnull(test).sum()\n\nnull = pd.concat([training_null, testing_null], axis=1, keys=[\"Training\", \"Testing\"])\nnull[null.sum(axis=1) > 0]","517fa1fe":"sns.distplot(np.log(train[\"SalePrice\"]))","37fdfcbe":"train[\"TransformedPrice\"] = np.log(train[\"SalePrice\"])","ed24e1bb":"train = pd.get_dummies(train)","1b501c56":"X_train = train.drop([\"Id\", \"SalePrice\", \"TransformedPrice\"], axis=1).values\ny_train = train[\"TransformedPrice\"].values\nX_test = test.drop(\"Id\", axis=1).values","b4ff47e0":"X_training, X_valid, y_training, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=0) #X_valid and y_valid are the validation sets","5a2350f8":"reg = linear_model.LinearRegression()\nparameters_lin = {\"fit_intercept\" : [True, False], \"normalize\" : [True, False], \"copy_X\" : [True, False]}\ngrid_reg = GridSearchCV(reg, parameters_lin, verbose=1 , scoring = \"r2\")\ngrid_reg.fit(X_training, y_training)\n\nprint(\"Best LinReg Model: \" + str(grid_reg.best_estimator_))\nprint(\"Best Score: \" + str(grid_reg.best_score_))","4879c753":"reg = grid_reg.best_estimator_\nreg.fit(X_training, y_training)\nlin_pred = reg.predict(X_valid)\nr2_lin = r2_score(y_valid, lin_pred)\nrmse_lin = np.sqrt(mean_squared_error(y_valid, lin_pred))\nprint(\"R^2 Score: \" + str(r2_lin))\nprint(\"RMSE Score: \" + str(rmse_lin))","7d2fb2df":"scores_lin = cross_val_score(reg, X_training, y_training, cv=10, scoring=\"r2\")\nprint(\"Cross Validation Score: \" + str(np.mean(scores_lin)))","945903d7":"reg.fit(X_train, y_train)","202247b2":"sub_predict = np.exp(reg.predict(X_valid))\nsub_predict","3804f674":"submission = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"SalePrice\": sub_predict\n    })\nprint(submission.shape)","c0cac128":"# Cleaning Data","fa10dd6f":"# Defining & Splitting Training & Testing Data","2d8f7d42":"# Imputing Null Values","e9b51bf5":"# Fewer missing data","4e8becca":"# Import Libraries","c31a8851":"# Linear Regression Model","c3c93a1d":"# Submission using Linear Regression","b8bc27ec":"# Feature Engineering","ab882be2":"# Fill Null Values","35d8fd6a":"# Reading the training & testing data","d2a4d25c":"# Correlation Matrix"}}