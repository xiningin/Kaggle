{"cell_type":{"d8e4476b":"code","c29841cd":"code","dff1aa0a":"code","8c3d66b7":"code","84eff49d":"code","35058f8d":"code","322a34f6":"markdown","bbea8de9":"markdown","70019a0a":"markdown","58d613a5":"markdown","cc69eb6d":"markdown","ad068504":"markdown","01077cbd":"markdown"},"source":{"d8e4476b":"import numpy as np\nimport pandas as pd\nimport operator\nfrom os import listdir\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom numpy.linalg import *\nfrom scipy.stats.stats import pearsonr","c29841cd":"df = pd.read_csv('..\/input\/tipping\/tips.csv')\nfeatures = np.array(df.total_bill)\nlabels = np.array(df.tip)","dff1aa0a":"m = features.shape[0]\nmtip = np.mat(labels)\ndata = np.hstack((np.ones((m, 1)), np.mat(features).T))","8c3d66b7":"def kernel(data, point, xmat, k):\n    m,n = np.shape(xmat)\n    ws = np.mat(np.eye((m)))\n    for j in range(m):\n        diff = point - data[j]\n        ws[j,j] = np.exp(diff*diff.T\/(-2.0*k**2))\n    return ws\n \ndef local_weight(data, point, xmat, ymat, k):\n    wei = kernel(data, point, xmat, k)\n    return (data.T*(wei*data)).I*(data.T*(wei*ymat.T))\n     \ndef local_weight_regression(xmat, ymat, k):\n    m,n = np.shape(xmat)\n    ypred = np.zeros(m)\n    for i in range(m):\n        ypred[i] = xmat[i]*local_weight(xmat, xmat[i],xmat,ymat,k)\n    return ypred","84eff49d":"ypred = local_weight_regression(data, mtip, 0.5)\nindices = data[:,1].argsort(0)\nxsort = data[indices][:,0]","35058f8d":"fig = plt.figure()\nax = fig.add_subplot(1,1,1)\nax.scatter(features, labels, color='green')\nax.plot(xsort[:,1],ypred[indices], color = 'red', linewidth=5)\nplt.xlabel('Total bill')\nplt.ylabel('Tip')\nplt.show();","322a34f6":"![eq.gif](attachment:eq.gif)","bbea8de9":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:red; background:orange; border:0.5px dashed white;\" role=\"tab\" aria-controls=\"Dataset\"><center>Implementation<\/center><\/h3>","70019a0a":"Locally weighted regression (LWR) is a memory-based method that performs a regression around a point of interest using only training data that are ``local'' to that point. One recent study demonstrated that LWR was suitable for real-time control by constructing an LWR-based system that learned a difficult juggling task.","58d613a5":"<div>\n    <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/137031\/324803\/43d70bb0ea2397ef75dea3c9c827729c\/dataset-cover.jpg\"\/>\n<\/div>","cc69eb6d":"![lwl.gif](attachment:lwl.gif)","ad068504":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:red; background:orange; border:0.5px dashed white;\" role=\"tab\" aria-controls=\"Dataset\"><center>Definition<\/center><\/h3>","01077cbd":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:red; background:orange; border:0.5px dashed white;\" role=\"tab\" aria-controls=\"Dataset\"><center>Prepare Data<\/center><\/h3>"}}