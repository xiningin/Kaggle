{"cell_type":{"170eb12e":"code","93b82b77":"code","1d68ba60":"code","b4a353fc":"code","bbb123d7":"code","887263fa":"code","67e322b9":"code","3f7bf7d5":"code","f79e4a69":"code","a50dbaf3":"code","831a8dac":"code","881b30f0":"code","f173cf90":"code","2fa15d84":"code","f8ecbc62":"code","0a1618fa":"code","806a78fe":"code","c37847e8":"code","67cfad1d":"code","eb7f23b3":"code","ce0cfb79":"code","1614b693":"code","b9210149":"code","14210d37":"markdown","c64a0d49":"markdown","ce904d86":"markdown","47d29ad2":"markdown","59b9bfdf":"markdown","4e9a3fbd":"markdown","9768d0fe":"markdown","1f189bc3":"markdown","71cec2d4":"markdown","62181661":"markdown","06ec66b6":"markdown","5f57dff0":"markdown","377c7441":"markdown","0e3459c2":"markdown","08d4e28f":"markdown","f65d90a8":"markdown","38d382e4":"markdown","bbda9cf9":"markdown","bc0424a6":"markdown","6a1d6b96":"markdown","4cb4d7b9":"markdown","a4703e36":"markdown"},"source":{"170eb12e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93b82b77":"import missingno as msno\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1d68ba60":"%matplotlib inline","b4a353fc":"!pip install pycaret","bbb123d7":"from pycaret.classification import *","887263fa":"dataset=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndataset.head(5)","67e322b9":"dataset.isnull().sum()","3f7bf7d5":"sns.countplot(dataset.DEATH_EVENT,palette='rainbow', alpha=0.75)","f79e4a69":"data = dataset.sample(frac=0.95, random_state=786)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))","a50dbaf3":"clf1 = setup(data = data, target = 'DEATH_EVENT', session_id=55, silent=True,fix_imbalance = True)\n","831a8dac":"best_model = compare_models(include=['dt','knn','mlp','rf','et','xgboost'])","881b30f0":"print(best_model)","f173cf90":"models()","2fa15d84":"model = create_model('xgboost')","f8ecbc62":"#FIX: https:\/\/github.com\/pycaret\/pycaret\/issues\/377\nmybooster = model.get_booster()\nmodel_bytearray = mybooster.save_raw()[4:]\ndef myfun(self=None):return model_bytearray\n\nmybooster.save_raw = myfun\n\ninterpret_model(model)","0a1618fa":"interpret_model(model, plot = 'reason', observation = 10)","806a78fe":"tuned_model= tune_model(model)","c37847e8":"plot_model(tuned_model, plot = 'auc')","67cfad1d":"plot_model(tuned_model, plot = 'pr')","eb7f23b3":"plot_model(tuned_model, plot='feature')","ce0cfb79":"plot_model(tuned_model, plot = 'confusion_matrix')","1614b693":"evaluate_model(tuned_model)","b9210149":"predict_model(tuned_model)","14210d37":"# **Model Feature Importance**","c64a0d49":"# **Interpret Observations with SHAP**","ce904d86":"# **Missing Values**\n\nOutput shows we have no missing data","47d29ad2":"# **Create Model**\n\nBest model was XGBoost according the results and output of compare_models function","59b9bfdf":"# **Extra Libaries**","4e9a3fbd":"# **HyperParamter Tuning**\n\nAutomated tunning of selected model for better accuracy with tune_model function","9768d0fe":"# **Read Dataset**","1f189bc3":"# **Setup PyCaret Environment**\n\nWe set fix_imbalance to True. Also setting Silent parameter True top prevent pycaret setup function interactively waiting an input response from screen.","71cec2d4":"# **Compare All Models**\n\nJust included specific models to show most of the features of PyCaret in notebook","62181661":"# **Plot Model**","06ec66b6":"# **AUC Plot**","5f57dff0":"# **Beginner Notebook For PyCaret**\n\n[Link to PyCaret Website](http:\/\/https:\/\/pycaret.org\/)\n\n![](https:\/\/pycaret.org\/wp-content\/uploads\/2020\/03\/Divi93_43.png)\n\nWhat is PyCaret?\nPyCaret is an open source low-code machine learning library in Python that aims to reduce the hypothesis to insights cycle time in a ML experiment. It enables data scientists to perform end-to-end experiments quickly and efficiently. In comparison with the other open source machine learning libraries, PyCaret is an alternate low-code library that can be used to perform complex machine learning tasks with only few lines of code. PyCaret is simple and easy to use","377c7441":"There are 13 columns and 299 entries in dataset","0e3459c2":"# **Finally Predict Test Data**","08d4e28f":"# **Confusion Matrix**","f65d90a8":"# **Data Processing**","38d382e4":"evalute_model interactive UI for model analysis","bbda9cf9":"# **Precision Recall Curve**","bc0424a6":"# **Target Variable**\n\nWe have a imbalanced dataset.\nLabel 0 has 203 and 1 has 96 entries\n","6a1d6b96":"# **Evalute Model UI**","4cb4d7b9":"# **Import Libraries**","a4703e36":"# **Interpret Model**\n\nSee feature importance output with SHAP\n"}}