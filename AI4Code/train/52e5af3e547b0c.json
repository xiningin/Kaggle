{"cell_type":{"72365d74":"code","f2481b86":"code","ac28d11b":"code","265aeee2":"code","a78a57af":"code","cc4d12d6":"code","8a40cea6":"code","1d2b6650":"code","2654c243":"code","666f8503":"code","415dd042":"code","e8a63442":"code","e1b4d6e6":"code","33ae78c5":"code","f65a4efc":"code","d92629d6":"code","f5bb3cea":"code","5fa94829":"code","65fc1a32":"code","200da568":"code","2123d835":"code","17302561":"code","b910e358":"code","0b74ba47":"markdown","9187fb9b":"markdown","efb0318e":"markdown","745e5e00":"markdown","a257d1b8":"markdown","09ef39c4":"markdown","b2418b47":"markdown","f657a940":"markdown","53ba202e":"markdown","853ae400":"markdown","d30183be":"markdown","c12bc3fc":"markdown","b60311c1":"markdown","4bcd0481":"markdown","11e6cd70":"markdown","0363e5af":"markdown","230e7f04":"markdown"},"source":{"72365d74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nfrom kmodes.kmodes import KModes\nimport numpy as np\nfrom scipy.stats import chi2_contingency\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        data = pd.read_csv(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2481b86":"data.columns","ac28d11b":"data.dtypes","265aeee2":"print(\"Total number of rows are: {}\".format(data.__len__()))\nprint(\"Total unique Ids are: {}\".format(data[\"id\"].unique().__len__()))\nprint(\"Total unique names are: {}\".format(data[\"name\"].unique().__len__()))\nprint(\"Total unique dates are: {}\".format(data[\"date\"].unique().__len__()))\n\ndata.describe()","a78a57af":"data.head()","cc4d12d6":"#1. \"race\" and \"signs_of_mental_illness\"\n\ncrosstab1 = pd.crosstab(data[\"race\"], data[\"signs_of_mental_illness\"])\nprint(crosstab1.columns)\nprint(crosstab1.index)\nprint(\"\\n\")\nprint(crosstab1)\n\ncrosstab1.plot.bar(stacked=False)\nplt.legend(title='signs_of_mental_illness')\nplt.show()","8a40cea6":"#2. \"signs_of_mental_illness\" and \"threat_level\"\n\npd.crosstab(data[\"signs_of_mental_illness\"], data[\"threat_level\"])","1d2b6650":"#3. \"arms_category\" and \"race\"\n\npd.crosstab(data[\"arms_category\"], data[\"race\"])","2654c243":"#4. \"body_camera\" and \"race\"\n\npd.crosstab(data[\"body_camera\"], data[\"race\"])","666f8503":"#5. \"race\" and \"flee\"\n\npd.crosstab(data[\"race\"], data[\"flee\"])","415dd042":"data[\"manner_of_death\"].unique()\ndata['year'] = pd.DatetimeIndex(data['date']).year\ndata['month'] = pd.DatetimeIndex(data['date']).month\nprint(data[\"year\"].unique())\nprint(data[\"month\"].unique())\nprint(data.columns)\nprint(data.columns.__len__())","e8a63442":"print(data.groupby([\"month\"])[\"id\"].count())\nmonth_wise_values = data.groupby([\"month\"])[\"id\"].count().values.tolist()\nmonth_df = pd.DataFrame({\"month\":data.month.unique().tolist(), \"count\": month_wise_values})\n\nprint(month_wise_values)\nfig = px.pie(month_df, values=\"count\",  names='month')\nfig.show()","e1b4d6e6":"print(data.groupby([\"year\"])[\"id\"].count())\nyear_wise_values = data.groupby([\"year\"])[\"id\"].count().values.tolist()\nyear_df = pd.DataFrame({\"year\":data.year.unique().tolist(), \"count\": year_wise_values})\n\nprint(year_wise_values)\nfig = px.pie(year_df, values=\"count\",  names='year')\nfig.show()","33ae78c5":"pd.crosstab(data[\"year\"], data[\"month\"], margins=True)","f65a4efc":"process_data = data.copy()\ncolumns = ['manner_of_death', 'armed', 'age', 'gender',\n       'race', 'city', 'state', 'signs_of_mental_illness', 'threat_level',\n       'flee', 'body_camera', 'arms_category', 'year', 'month']\n\n#Here we are taking age<=73, the reason is explained in the next steps\n\nprocess_data = process_data[data[\"age\"]<=73]\n\nprocess_data['age_bin'] = pd.cut(process_data['age'], [0, 20, 40, 50, 60, 73], labels=['0-20', '20-40','40-50','50-60','60-73'])\nvariable_pairs = []\nfor i in range(len(columns)):\n    for j in range(i, len(columns)):\n        variable_pairs.append((columns[i], columns[j]))\n\ndependent_variables = []\nfor pair in variable_pairs:\n    column1 = pair[0]\n    column2 = pair[1]\n\n    obs = pd.crosstab(process_data[column1], process_data[column2])\n    if np.all(obs>5):\n        stat, p, dof, expected = chi2_contingency(obs)\n        if p<=0.005:\n            dependent_variables.append((column1, column2))\n            print(\"Processing columns: {} , {}\".format(column1, column2))\n            print(\"p-value: {}\".format(p))\n            print(obs)\n            print(\"\\n\")\n            print(\"\\n\")\nprint(dependent_variables)","d92629d6":"fig = px.box(data, y=\"age\")\nfig.show()","f5bb3cea":"cluster_data = data[data[\"age\"]<=73]\ncluster_data.columns","5fa94829":"fig = px.histogram(cluster_data, x=\"age\")\nfig.show()","65fc1a32":"cluster_data['age_bin'] = pd.cut(cluster_data['age'], [0, 20, 40, 50, 60, 73], labels=['0-20', '20-40','40-50','50-60','60-73'])\n\nfig = px.histogram(cluster_data, x=\"age_bin\")\nfig.show()","200da568":"cluster_data = cluster_data.drop(columns=[\"id\",\t\"name\",\t\"date\", \"age\",\"city\"], axis=1)\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ncluster_data = cluster_data.apply(le.fit_transform)\ncluster_data.head()","2123d835":"number_of_clusers = 10\ncost = []\nfor num_clusters in list(range(1,number_of_clusers)):\n    kmode = KModes(n_clusters=num_clusters, init = \"Cao\", n_init = 1, verbose=1)\n    kmode.fit_predict(cluster_data)\n    cost.append(kmode.cost_)\n\nx_axis = np.array([i for i in range(1,number_of_clusers,1)])\n\nfig = px.line(x=x_axis, y=cost)\nfig.show()","17302561":"#So lets take number of clusters 4\n\nnum_clusters = 4\nkmode = KModes(n_clusters=num_clusters, init = \"Cao\", n_init = 1, verbose=1)\narr = kmode.fit_predict(cluster_data)\ncluster_data[\"cluster\"] = arr\ncluster_data.columns","b910e358":"columns = ['manner_of_death', 'armed', 'gender', 'race', 'state',\n       'signs_of_mental_illness', 'threat_level', 'flee', 'body_camera',\n       'arms_category', 'year', 'month', 'age_bin']\n       \ntarget = \"cluster\"\n\ndependent_variables = []\nfor column in columns:\n\n    obs = pd.crosstab(cluster_data[column], cluster_data[target])\n    if np.all(obs>5):\n        stat, p, dof, expected = chi2_contingency(obs)\n        if p<=0.005:\n            dependent_variables.append(column)\n            print(\"Processing columns: {} , {}\".format(column, target))\n            print(\"p-value: {}\".format(p))\n            print(obs)\n            print(\"\\n\")\n            print(\"\\n\")\n\nprint(dependent_variables)","0b74ba47":"**crosstab between \"year\" and \"month\" to analyze the count of shot people every month in every year.**","9187fb9b":"Lets extract month and year from \"date\" variable and add two extra variable \"month\" and \"year\" to analyze the count of shot people monthly and yearly.\n\n\nmonth mapping: {\"1\": Jan, \"2\": Feb, \"3\": March, \"4\": April, \"5\": May, \"6\": June, \"7\": July, \"8\": August, \"9\": September, \"10\": October, \"11\": November, \"12\": December }","efb0318e":"b. After binning \"age\" distribution","745e5e00":"**Let's Analyze the association among some categorical variable pairs**","a257d1b8":"**Prepare data for clustering**","09ef39c4":"**Make pairs of cetgorical variables to check their pairwise dependence**\n\n\n>H0: Two variables in a pair are independent(No association)\n\n>Ha: Two variables in a pair are dependent(associated)\n\n1. if p<=0.005 then Dependent (reject H0)\n2. if p>0.005 then Independent(fail to reject H0)","b2418b47":"**Analyzing the \"age\" variable with box plot**\n\nfrom the box plot it can be seen that if age>73 then it can be considered as outliers and there are only 37 data points where age>73, so we can drop them","f657a940":"So it can be seen the variables ['manner_of_death', 'signs_of_mental_illness', 'threat_level', 'flee', 'body_camera', 'year', 'month', 'age_bin'] are the prominent features that are playing important role in pattern being captured in the clusters.","53ba202e":"**Data preparation for K-Mode clustering**","853ae400":"Let's analyze each variable against cluster label","d30183be":"**Analyzing the count of shot people yearly with pie chart**","c12bc3fc":"**Do binning on the age variable**","b60311c1":"Applying K-Modes clustering","4bcd0481":"**Analyzing the count of shot people monthly with pie chart**","11e6cd70":"a. Before binning the \"age\" distribution","0363e5af":"**Lets Analyze the pairwise dependence among the categorical variable using chi-square test**","230e7f04":"**As we can see from above result that the following pairs have some association(dependence) among them**\n\n[('manner_of_death', 'signs_of_mental_illness'), ('manner_of_death', 'flee'), ('manner_of_death', 'year'), ('manner_of_death', 'month'), ('gender', 'signs_of_mental_illness'), ('gender', 'flee'), ('race', 'signs_of_mental_illness'), ('race', 'body_camera'), ('signs_of_mental_illness', 'threat_level'), ('signs_of_mental_illness', 'flee'), ('signs_of_mental_illness', 'body_camera'), ('signs_of_mental_illness', 'year'), ('threat_level', 'flee'), ('threat_level', 'year'), ('threat_level', 'month'), ('flee', 'body_camera'), ('flee', 'year'), ('body_camera', 'year')]"}}