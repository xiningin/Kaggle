{"cell_type":{"bc722757":"code","074dc8c3":"code","4441df7b":"code","15f23d3f":"code","d3472158":"code","ec40a60c":"code","6b4fd054":"code","688ab10c":"code","e5bde707":"code","bf99f543":"code","d2d2300e":"code","6adbd5fb":"code","76036dc5":"code","d42767a6":"code","cb01c0b8":"code","08a2a30d":"code","a23ed214":"code","a1f048d0":"code","b01c82bc":"code","6b73f678":"code","5d3047f4":"code","5b9e52f4":"code","f8506ffe":"code","293215b8":"code","6e976723":"code","df076e05":"code","929f14d3":"code","52354472":"code","7957e9f4":"code","d33be090":"code","fb76d746":"code","9d4ca15b":"code","1d5b67db":"code","bdf90fa0":"code","c1ba24dd":"markdown","809d3f20":"markdown","d27ed72f":"markdown","c7a15ead":"markdown","da8a73af":"markdown","bfeaa5f7":"markdown","6f7bca40":"markdown","da680712":"markdown","e90d9400":"markdown"},"source":{"bc722757":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","074dc8c3":"import pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import r2_score, accuracy_score, auc, roc_curve, confusion_matrix\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nimport warnings\nwarnings.filterwarnings(\"ignore\")","4441df7b":"!ls ..\/input\/weather-dataset-rattle-package\/","15f23d3f":"data = pd.read_csv(\"..\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\ndata","d3472158":"data.shape","ec40a60c":"data.describe()","6b4fd054":"data.columns","688ab10c":"data.info()","e5bde707":"data.isnull().sum()\/len(data)*100","bf99f543":"data.fillna(data.mean(), inplace=True)","d2d2300e":"data.isnull().sum()\/len(data)*100","6adbd5fb":"data['WindGustDir'] = data['WindGustDir'].fillna(data['WindGustDir'].mode()[0])\ndata['WindDir9am'] = data['WindDir9am'].fillna(data['WindDir9am'].mode()[0])\ndata['WindDir3pm'] = data['WindDir3pm'].fillna(data['WindDir3pm'].mode()[0])\ndata['RainToday'] = data['RainToday'].fillna(data['RainToday'].mode()[0])\ndata['RainTomorrow'] = data['RainTomorrow'].fillna(data['RainTomorrow'].mode()[0])","76036dc5":"la = LabelEncoder()\nl = []\nfor i in data.columns:\n    if data.dtypes[i]=='O':\n        l.append(i)\nl","d42767a6":"for i in l:\n    print(i)\n    data[i] = la.fit_transform(data[i])","cb01c0b8":"data.info()","08a2a30d":"cor = data.corr()\nplt.figure(figsize = (20,12))\nsns.heatmap(cor, annot=True)","a23ed214":"related = cor['RainTomorrow'].sort_values(ascending = False)\nrelated","a1f048d0":"x = []\nfor i in range (len(related)):\n    if related[i]>0:\n        x.append(related.index[i])\nx","b01c82bc":"x = data[x]\nx.drop('RainTomorrow', inplace = True, axis = 1)\nx","6b73f678":"y = data['RainTomorrow']\ny","5d3047f4":"y.value_counts()","5b9e52f4":"bal = SMOTE()\nx, y = bal.fit_resample(x, y)","f8506ffe":"y.value_counts()","293215b8":"x.describe()","6e976723":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state = 42)","df076e05":"rr = RandomForestClassifier(n_estimators = 200)\nrr.fit(x_train, y_train)","929f14d3":"predicted = rr.predict(x_test)\nprint(\"Accuracy Using Random Forrest is {} %\".format(accuracy_score(predicted, y_test)*100))","52354472":"fpr, tpr, threshold= roc_curve(y_test, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","7957e9f4":"xgb = XGBClassifier()\nxgb.fit(x_train, y_train)","d33be090":"predicted = xgb.predict(x_test)\nprint(\"Accuracy Using XGBoost is {} %\".format(accuracy_score(predicted, y_test)*100))","fb76d746":"fpr, tpr, threshold= roc_curve(y_test, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","9d4ca15b":"gb = GaussianNB()\ngb.fit(x_train, y_train)","1d5b67db":"predicted = gb.predict(x_test)\nprint(\"Accuracy Using GaussianNB is {} %\".format(accuracy_score(predicted, y_test)*100))","bdf90fa0":"fpr, tpr, threshold= roc_curve(y_test, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","c1ba24dd":"# Seprating Related and Unrelated Columns ","809d3f20":"#  Reading Data","d27ed72f":"## GaussianNB","c7a15ead":"## Random Forest","da8a73af":"# Importing Libraries","bfeaa5f7":"## XGBoost","6f7bca40":"# Designing Model","da680712":"# Class Balancing","e90d9400":"# Preprocessing"}}