{"cell_type":{"3c2e5395":"code","a031d8e6":"code","d0a0c530":"code","11a22f1b":"code","af905e07":"code","c7d2e2fe":"code","69431cf4":"code","173e2899":"code","a1e4e65c":"code","8756ce7b":"code","efe8276b":"code","4377c008":"code","5399d843":"code","a7256398":"code","e7eb0563":"code","f4e59800":"code","c600257a":"code","9adec8e5":"code","731e5cbe":"code","eab87d2a":"code","fe4e2843":"code","85db52b8":"code","a1bd0e64":"code","91f0b743":"code","46d1874e":"code","15b38212":"code","91be3921":"code","3b1e3f9d":"code","32020775":"code","903a3227":"code","39068d8c":"code","bc20c0c9":"code","a471ad1d":"code","8dbde7bd":"code","e625a473":"code","49a2c645":"code","d2b4aa91":"code","5bd091f8":"code","771028c0":"code","6ea828da":"code","e81d8497":"code","124b240e":"code","7a879a38":"markdown","430117cf":"markdown","0f51c32f":"markdown","1682b49e":"markdown","b92b92bf":"markdown","1305ac75":"markdown","712d174d":"markdown","31daad3b":"markdown","c64b9154":"markdown","dd1c61cc":"markdown","d4c0c622":"markdown","7d50f215":"markdown","8f9c3175":"markdown","b1b73b50":"markdown","26622972":"markdown","b224b74f":"markdown","10c74dad":"markdown","1f095c4c":"markdown","ccd57677":"markdown","c599d1d8":"markdown","e43af940":"markdown","f2dfdaa7":"markdown","8e2b1395":"markdown","0fbf2c83":"markdown","df7d0299":"markdown","5a7b27f3":"markdown","953918ac":"markdown","2201e92e":"markdown","9a51ad2c":"markdown","c087cad6":"markdown"},"source":{"3c2e5395":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","a031d8e6":"df = pd.read_csv('..\/input\/loan-dataset\/loan.csv')\ndf.head()","d0a0c530":"df.drop('Unnamed: 0', axis=1, inplace=True)\ndf.drop('Unnamed: 0.1', axis=1, inplace=True)","11a22f1b":"df.head()","af905e07":"df.shape","c7d2e2fe":"df.info()","69431cf4":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","173e2899":"df['loan_status'].value_counts()","a1e4e65c":"df.columns","8756ce7b":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 7)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","efe8276b":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","4377c008":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()","5399d843":"df.columns","a7256398":"df['week'] = df['dayofweek'].apply(lambda  x:1 if(x>3) else 0)\ndf.head()","e7eb0563":"df.info()","f4e59800":"collection = df.groupby(['Gender'])['loan_status'].value_counts()\ncollection","c600257a":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n# df.drop('Unnamed: 0', axis=1, inplace=True)\n# df.drop('Unnamed: 0.1', axis=1, inplace=True)\ndf.head()","9adec8e5":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)*100","731e5cbe":"df[['Principal','terms','age','Gender','education']].head()","eab87d2a":"features = df[['Principal','terms','age','Gender','week']]\nfeatures = pd.concat([features, pd.get_dummies(df['education'])],axis=1)\nfeatures.drop(['Master or Above'], axis=1,inplace=True)\nfeatures.head()","fe4e2843":"X = features\nX[0:5]","85db52b8":"y = df['loan_status'].values\ny[0:5]","a1bd0e64":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","91f0b743":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing","46d1874e":"X_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.2, random_state=0)","15b38212":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)","91be3921":"y_pred = knn.predict(X_test)","3b1e3f9d":"print(\"The Score of the Prediction \",round(knn.score(X_train, y_train)*100 ,2), \"%\")","32020775":"from sklearn.tree import DecisionTreeClassifier","903a3227":"tree = DecisionTreeClassifier(random_state = 25)\ntree.fit(X_train, y_train)\ny_pred = tree.predict(X_test)\nprint(\"The Prediction Score are : \", round(tree.score(X_train, y_train)*100, 2), \"%\")","39068d8c":"from sklearn  import metrics\nprint(\"Train set Data Accuracy :\", metrics.accuracy_score(y_train, tree.predict(X_train)))\n# print(\"Test set data Accuracy :\", metrics.accuracy_score(y_test, y_pred))\nprint(\"Test set Accuracy\", metrics.accuracy_score(y_test, tree.predict(X_test)))","bc20c0c9":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","a471ad1d":"from sklearn import svm","8dbde7bd":"clf = svm.SVC(kernel='rbf')\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"The prediction score are : \", round(clf.score(X_train, y_train)*100, 2), \"%\")","e625a473":"from sklearn import metrics\nprint(\"Train set Accuracy\", metrics.accuracy_score(y_train, clf.predict(X_train)))\nprint(\"Test set Accuracy\", metrics.accuracy_score(y_test, y_pred))","49a2c645":"print(classification_report(y_test, y_pred))","d2b4aa91":"from sklearn.ensemble import RandomForestClassifier\nrm = RandomForestClassifier()\nrm.fit(X_train, y_train)\ny_pred = rm.predict(X_test)\nprint(\"The prediction score are : \", round(rm.score(X_train, y_train)*100, 2), \"%\")","5bd091f8":"from yellowbrick.classifier import ClassificationReport","771028c0":"visualizer = ClassificationReport(knn, classes=['PAIDOFF','COLLECTION'])\nvisualizer.fit(X_train, y_train) # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test) # Evaluate the model on the test data\ng = visualizer.poof() # Draw\/show\/poof the data","6ea828da":"visualizer = ClassificationReport(tree, classes=['PAIDOFF','COLLECTION'])\nvisualizer.fit(X_train, y_train) # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test) # Evaluate the model on the test data\ng = visualizer.poof() # Draw\/show\/poof the data","e81d8497":"visualizer = ClassificationReport(clf, classes=['PAIDOFF','COLLECTION'])\nvisualizer.fit(X_train, y_train) # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test) # Evaluate the model on the test data\ng = visualizer.poof() # Draw\/show\/poof the data","124b240e":"visualizer = ClassificationReport(rm, classes=['PAIDOFF','COLLECTION'])\nvisualizer.fit(X_train, y_train) # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test) # Evaluate the model on the test data\ng = visualizer.poof() # Draw\/show\/poof the data","7a879a38":"### Let's look at the day of the week people get the loan","430117cf":"86 % of female pay there loans while only 73 % of males pay there loan","0f51c32f":"### Shape of Data","1682b49e":"This dataset is about past loans. The **loan.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |","b92b92bf":"## Pre-processing: Feature selection\/extraction","1305ac75":"## Load DataFrame form CSV","712d174d":"### Conversion categorical into numerical\nLet's convert male to 0 and female to 1:","31daad3b":"Let's plot some columns to underestand data better:","c64b9154":"let's see Education column","dd1c61cc":"## DECISION TREE","d4c0c622":"## Convert to date time object\nAs the date and time colum are not in proper format, so convert to data time object.\n","7d50f215":"260 people have paid off the loan on time while 86 have gone into collection","8f9c3175":"### Required Libraries:","b1b73b50":"## Performance Comparision","26622972":"We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4","b224b74f":"lets look at gender column.\n","10c74dad":"Let\u2019s see how many of each class is in our data set","1f095c4c":"## Features selection","ccd57677":"## Convert Categorical features to numerical values","c599d1d8":"## Decision Tree","e43af940":"# Support Vector Machine","f2dfdaa7":"## Classification\nThe following Classification Algorithm will be use here.\n1. K Nearest Neighbor(KNN)\n2. Decision Tree\n3. Support Vector Machine\n4. Logistic Regression","8e2b1395":"## Features before One Hot Encoding","0fbf2c83":"## Support Vector Machine SVM","df7d0299":"## One Hot Encoding","5a7b27f3":"## Normalize Data\nData Standardization give data zero mean and unit variance (technically should be done after train test split)","953918ac":"## About Notebook\nIn this notebook we try to practice all the classification algorithms.\n\nWe load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.","2201e92e":"# K-NearestNeighbour","9a51ad2c":"## Data visualization and pre-processing","c087cad6":"# Random Forest "}}