{"cell_type":{"e26825f5":"code","8f696426":"code","c4e1121f":"code","01fcc9fa":"code","0d852f97":"code","34fde5e4":"code","90182b59":"code","bd147d3d":"code","0d082b25":"code","13cbe628":"code","870dacea":"code","dfbbcfdc":"code","84f4eadb":"code","d99cf7e0":"code","68086978":"code","eede4860":"code","3fc5029a":"markdown","fcca0f82":"markdown","d20f8df0":"markdown","f1d18c89":"markdown","60176949":"markdown","baa6ce70":"markdown","5217d61b":"markdown","e85b5bbb":"markdown","9b176dd5":"markdown","1cd8277b":"markdown","a98a39d1":"markdown","4cd32624":"markdown","2c20a05d":"markdown","749148c9":"markdown","8d67358e":"markdown","001c09f4":"markdown"},"source":{"e26825f5":"import sys\nimport pandas as pd\nimport numpy as np","8f696426":"data = pd.read_ csv(' \/home\/aistudio\/data\/data27964\/train.csv', encoding = 'big5' ) #\u8bfb\u53d6\u7ed3\u679c\u7684\u7ed3\u6784\u662fDataFrame","c4e1121f":"#panda\u91cc\u5229\u7528iloc\u9009\u53d6\u6570\u636e\uff0c\u4eceo\u5f00\u59cb\u3002iloc (\u884c\uff0c\u5217)\n#\u5f53\u524d\u9009\u53d6\u4ece\u7b2c\u4e09\u5217\u5f00\u59cb\u7684\u6240\u6709\u6570\u636e\ndata = data. iloc[:,3: ]\ndata[data=='NR'] = 0\ndata","01fcc9fa":"raw_data = np.array(data) # DataFrame\u8f6c\u6362\u6210numpy\u6570\u7ec4","0d852f97":"print(raw_data.shape)","34fde5e4":"month_data = {} # key: month value: data\nfor month in range(12): .\n    sample = np.empty([18, 480]) # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684[18\uff0c480] \u6570\u7ec4\n    for day in range(20):\n        sample[:,day*24:(day+1)*24]=raw_data[18*(20*month+day):18*(20*month+day+1)\uff0c:]\nmonth_data[month] = sample","90182b59":"#\u4ee5\u7b2c\u4e00\u4e2a\u6708\u4e3a\u4f8b\n#print(month_data[0])","bd147d3d":"x = np. empty([12 * 471, 18 * 9], dtype = float)\ny = np. empty([12 * 471, 1]\uff0cdtype = float)\nfor month in range(12):\n    for day in range(20):\n        for hour in range(24):\n            if day==19andhour>14:\n                continue\n            #reshape\u5c06\u77e9\u9635\u91cd\u6574\u4e3a\u65b0\u7684\u884c\u5217\u6570\uff0c\u53c2\u6570-1\u4ee3\u8868\u81ea\u52a8\u63a8\u65ad,\u8fd9\u91cc\u53bb\u6389\u4e8618*9\u7684\u4e8c\u7ef4\u5c5e\u6027\uff0c\n            #\u8f6c\u800c\u4ee5\u4e00\u7ef4\u5e8f\u5217\u4ee3\u66ff\uff0c\u4e00\u7ef4\u5e8f\u5217\u7684\u987a\u5e8f\u672c\u8eab\u53ef\u4ee5\u9690\u542b\u5176\u65f6\u5e8f\u4fe1\u606f\n            x[month * 471 + day * 24 + hour, :] = month_ data[month][:,day * 24 + hour : day * 24 + hour + 9].reshape(1, -1)\n            y[month * 471 + day * 24 + hour, 0] = month_ data[month][9, day * 24 + hour + 9] #value\nprint(x)\nprint(y)","0d082b25":"dim = x.shape[1] + 1\nW = np.zeros(shape = (dim, 1 )) #empty\u521b\u5efa\u7684\u6570\u7ec4\uff0c \u6570\u7ec4\u4e2d\u7684\u6570\u53d6\u51b3\u4e8e\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u5904\u7684\u503c\uff0c\u4e3ao\u7eaf\u5c5e\u5de7\u5408?\nx = np.concatenate( (np . ones((x.shape[0], 1 )), x) , axis = 1).astype(float)\n#\u521d\u59cb\u5316\u5b66\u4e60\u7387(163\u4e2a\u53c2\u6570\uff0c163\u4e2a200 )\u548cadagrad\nlearning_rate = np.array([[200]] * dim)\nadagrad_sum = np.zeros(shape = (dim, 1 ))\n#\u6ca1\u6709\u9690\u85cf\u5c42\u7684\u7f51\u7edc\nfor T in range(10001):\n    if(T%500==0):\n        print(\"T=\",T)\n        print(\"Loss:\" ,np. sum((x.dot(w) - y)**2)\/ x.shape[0] \/2) #\u6700\u5c0f\u4e8c\u4e58\u635f\u5931\n        print((x.dot(w) - y)**2)\n    gradient = 2 * np. transpose(x) . dot(x. dot(w)-y) #\u635f\u5931\u7684\u5bfc\u6570x*(yh-h)\n    adagrad_ sum += gradient ** 2\n    W = W- learning_ rate * gradient \/ (np. sqrt(adagrad_ sum) + 0.0005 )\nnp. save('weight.npy' ,w)","13cbe628":"x.shape()","870dacea":"#\u540c\u5904\u7406\u8bad\u7ec3\u96c6\u6570\u636e\u4e00\u6837\ntestdata = pd.read_csv(' \/home\/ aistudio\/data\/data27964\/test.csv, header = None, encoding = 'big5')\ntest_data = testdata.iloc[:, 2:]\ntest_data = test_ data.copy() #\u4e3a\u9632\u6b62pandas\u51fa\u9519: A value is trying to be set on a copy of a slice from a DataFrame.\n                       \n\ntest_data[test_ data == 'NR'] = 0","dfbbcfdc":"test_data = np.array(test_data)\n\ntest_data.shape","84f4eadb":"text_x.shape","d99cf7e0":"w.shape","68086978":"W = np. load( ' weight.npy ' )\nans_y = np.dot(test_x,w)","eede4860":"import csv .\nwith open( ' submit.csv', mode='w', newline='' ) as submit_ file:\n    csv_writer = csv.writer(submit_ file)\n    header = ['id', 'value']\n    print (header)\n    csv_writer. writerow( header )\n    for i in range(240):\n        row = ['id. ' + str(i), ans_ y[i][0]]\n        csv_writer. writerow(row)\n        print(row)","3fc5029a":"# \u4f7f\u7528\u6a21\u578b\u9884\u6d4b","fcca0f82":"- Pandas\u91cc\u4e3b\u8981\u6570\u636e\u7ed3\u6784\u5305\u542bDataFrame\uff08\u4e8c\u7ef4\u8868\uff09\uff0c\u5982\u4e0a\u6253\u5370\u7ed3\u679c\uff0c\u6709\u884c\u6709\u5217\u3002\u4f46\u6807\u51c6\u8bf4\u6cd5\u884c\uff08\u7d22\u5f15\uff09\uff0c\u5217\uff08\u6807\u7b7e\uff09","d20f8df0":"# \u4e00\u3001\u8bad\u7ec3\u96c6\u4ecb\u7ecd","f1d18c89":"# \uff082\uff09\u6269\u5145\u6570\u636e\u96c6\uff0c\u83b7\u53d6\u66f4\u597d\u7684\u8bad\u7ec3\u6548\u679c\n1. \u6839\u636e\u5b9e\u9a8c\u8981\u6c42\uff0c\u9700\u8981\u7528\u8fde\u7eed9\u4e2a\u65f6\u95f4\u70b9\u7684\u6570\u636e\u9884\u6d4b\u7b2c10\u4e2a\u65f6\u95f4\u70b9\u7684PM2.5\u3002 \u800c\u6bcf\u4e2a\u6708\u91c7\u53d6\u7684\u662f\u524d20\u5929\u8fde\u7eed\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u6269\u5c55\u6210480\u5c0f\u65f6\u7684\u8fde\u7eed\u6570\u636e\uff1b\n2. \u5177\u4f53\u505a\u6cd5\uff0c\u6bcf\u4e2a\u6708\u7684\u7b2c\u4e00\u5929\u76840-8\u65f6\u7684\u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u6570\u636e\uff0c9\u65f6\u7684\u6570\u636e\u4f5c\u6807\u7b7ey\uff1b9-17\u7684\u6570\u636e\u4f5c\u4e00\u4e2adata\uff0c18\u65f6\u7684\u6570\u636e\u4f5c\u6807\u7b7ey.....\u4ee5\u6b64\u63a8\uff0c\u6bcf\u4e2a\u6708480\u5c0f\u65f6\uff0c\u6709480-9= 471\u4e2adata\uff0c\u6545\u6b64\u65f6\u603b\u6570\u636e471 * 12 \u4e2a\uff1b\u800c\u6bcf\u4e2adata\u662f18*9","60176949":"\u4e3a\u4e86\u5728\u4e0d\u5f71\u54cd\u6a21\u578b\u6548\u679c\u7684\u524d\u63d0\u4e0b\u63d0\u9ad8\u5b66\u4e60\u901f\u5ea6\uff0c\u53ef\u4ee5\u5bf9\u5b66\u4e60\u7387\u8fdb\u884c\u5b9e\u65f6\u66f4\u65b0\uff1a\u5373\u8ba9\u5b66\u4e60\u7387\u7684\u503c\u5728\u5b66\u4e60\u521d\u671f\u8f83\u5927\uff0c\u4e4b\u540e\u9010\u6e10\u51cf\u5c0f\u3002\u8fd9\u91cc\u91c7\u7528\u6bd4\u8f83\u7ecf\u5178\u7684adagrad\u7b97\u6cd5\u6765\u66f4\u65b0\u5b66\u4e60\u7387\u3002","baa6ce70":"# \u4e09\u3001\u7279\u5f81\u63d0\u53d6","5217d61b":"# \uff081\uff09\u6309\u6708\u4efd\u6765\u5904\u7406\u6570\u636e\n- \u9488\u5bf9\u6bcf20\u5929\u6765\u8bf4\uff0c\u4fe1\u606f\u7ef4\u5ea6[18, 480] (18\u4e2afeature\uff0c20*24=480)\n- \u5c06\u539f\u59cb\u7684\u6570\u636e\u6309\u7167\u6bcf\u4e2a\u6708\u6765\u5212\u5206\uff0c\u91cd\u7ec4\u621012\u4e2a [18,480]","e85b5bbb":"print(raw_data)","9b176dd5":"W = np.load( 'weight.npy')\n\ntest_x = np.empty(shape = (240, 18 * 9),dtype = float)\n\nfor i in range(240):\n    test_x[i,:] = test_ data[18 * i : 18 * (i+1),:].reshape(1,-1)\n        for i in range(test_x. shape[0]):##Normalization\n        \nfor j in range(test_x.shape[1]):\n    if not std_x[j] == 0 :\n        test_x[i][j] = (test_x[i][j]- mean_ x[j]) \/ std_x[j]\n        \ntest_x = np. concatenate( (np. ones(shape = (test_x. shape[0],1)),test_x),axis = 1).astype(float)","1cd8277b":"# \u635f\u5931\u51fd\u6570\n- \u91c7\u7528\u9884\u6d4b\u503c\u4e0e\u6807\u7b7ey\u4e4b\u95f4\u7684\u5e73\u5747\u6b27\u65f6\u8ddd\u79bb\u6765\u8861\u91cf\u9884\u6d4b\u7684\u51c6\u786e\u7a0b\u5ea6\n- num = 471*12\uff0c \u4e58 1\/2 \u662f\u4e3a\u4e86\u5728\u540e\u7eed\u6c42\u68af\u5ea6\u8fc7\u7a0b\u4e2d\u4fdd\u8bc1\u68af\u5ea6\u7cfb\u6570\u4e3a1\uff0c\u65b9\u4fbf\u8ba1\u7b97","a98a39d1":"\u6d4f\u89c8\u6570\u636e\u53ef\u77e5\uff0c\u6570\u636e\u4e2d\u5b58\u5728\u4e00\u5b9a\u91cf\u7684\u7a7a\u6570\u636eNR\uff0c\u4e14\u591a\u5b58\u5728\u4e8eRAINFALL\u4e00\u9879\u3002RAINFALL\u8868\u793a\u5f53\u5929\u5bf9\u5e94\u65f6\u95f4\u70b9\u662f\u5426\u964d\u96e8\uff0c\u6709\u964d\u96e8\u503c\u4e3a1\uff0c\u65e0\u964d\u96e8\u503c\u4e3aNR\uff0c\u7c7b\u4f3c\u4e8e\u5e03\u5c14\u53d8\u91cf\u3002\u56e0\u6b64\u5c06\u7a7a\u6570\u636eNR\u5168\u90e8\u8865\u4e3a0\u5373\u53ef","4cd32624":"w.shape()","2c20a05d":"# \u5b66\u4e60\u7387\u66f4\u65b0","749148c9":"1. CSV\u6587\u4ef6\uff0c\u5305\u542b\u53f0\u6e7e\u4e30\u539f\u5730\u533a240\u5929\u7684\u6c14\u8c61\u89c2\u6d4b\u8d44\u6599\uff0c\u53d6\u6bcf\u4e2a\u6708\u524d20\u5929\u7684\u6570\u636e\u505a\u8bad\u7ec3\u96c6\uff0c\u6bcf\u6708\u540e10\u5929\u6570\u636e\u7528\u4e8e\u6d4b\u8bd5\uff1b\n2. \u6bcf\u5929\u7684\u76d1\u6d4b\u65f6\u95f4\u70b9\u4e3a0\u65f6\uff0c1\u65f6......\u523023\u65f6\uff0c\u517124\u4e2a\u65f6\u95f4\u8282\u70b9\uff1b\n3. \u6bcf\u5929\u7684\u68c0\u6d4b\u6307\u6807\u5305\u62ecCO\u3001NO\u3001PM2.5\u3001PM10\u7b49\u6c14\u4f53\u6d53\u5ea6\uff0c\u662f\u5426\u964d\u96e8\u3001\u522e\u98ce\u7b49\u6c14\u8c61\u4fe1\u606f\uff0c\u5171\u8ba118\u9879\uff1b","8d67358e":"mean_x = np. mean(x, axis = 0) #\u6c42\u5747\u503c\uff0caix=0\u8868\u793a\u6cbf\u6bcf\u5217\u8ba1\u7b97\nstd_x = np.std(x, axis = 0) #\u6807\u51c6\u5dee\nfor i in range(len(x)):\n    for j in range(1en(x[0])):\n        if std_x[j] != 0:\nx[i][j] = (x[i][j] - mean_x[j]) \/ std_x[j] #\u6240\u6709\u5c5e\u6027\u5f52\u4e00-\u5316\uff0c\u907f\u514d\u4f7f\u6570\u636e\u7684\u67d0\u4e9b\u7279\u5f81\u5f62\u6210\u4e3b\u5bfc\u4f5c\u7528","001c09f4":"# \u4e8c\u3001\u6570\u636e\u9884\u5904\u7406"}}