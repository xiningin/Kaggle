{"cell_type":{"63f70495":"code","89aaa45b":"code","f63c4c61":"code","1048c0c1":"code","b3dd782d":"code","ac78eec0":"code","824228cc":"code","185440db":"code","8afc4cd8":"code","b1d9dcd6":"code","d6b00560":"code","a1576a6d":"code","169ff70c":"code","6b27d9b1":"code","df71f9b1":"code","e87b7782":"code","55afe339":"code","fd71869d":"code","28361036":"code","5e98210f":"code","f08d0748":"code","7d7ff9bb":"code","0688cee9":"code","b87b6250":"code","400c9a7c":"code","391c8d74":"code","ecc6a7eb":"code","683e598a":"code","cc3052d0":"code","351195c3":"code","335677ea":"code","acd0213f":"code","583fe3b9":"code","1241b23a":"code","ddfd6961":"code","925f93b2":"code","1b3e6df1":"code","24d33ca8":"code","0fd6ee29":"code","12d945a8":"code","8c41202b":"code","36ee9187":"code","a3ac3504":"code","af37e426":"code","09467865":"code","bde71d80":"code","4d762cca":"code","cf45ec25":"code","94e6ed84":"code","12575def":"code","27616a2f":"code","07f7c9cc":"code","1a942a5c":"code","7a36c306":"code","b67dcac9":"code","2f0d1bc1":"code","10c2c041":"code","862ccb75":"code","43127c01":"code","be3cf301":"code","bda1e2ad":"code","629230a3":"code","14842145":"code","83f9c5d5":"code","3136f97f":"code","4a0e63db":"code","671e7dbe":"code","5ad0254d":"code","61cbbf1d":"code","bda3314e":"code","e86f4b8e":"code","30d11a21":"code","206f2198":"code","d2bef2fb":"code","868f0d73":"code","a24c05d4":"code","900d8f04":"code","67324914":"code","60e780fc":"code","4a2747af":"code","15a7c7ec":"code","ca66ebbf":"code","5442541e":"code","8927ae90":"code","e983be33":"code","ee9e7ec1":"code","b2aeb43e":"code","493a0834":"code","0dde3525":"code","8e10dbd6":"code","696644db":"code","4f048c0d":"code","425e0352":"code","1b0fcc25":"code","c8c7fe4b":"code","8ee3759d":"markdown","c9051254":"markdown","8e4cd3cc":"markdown","648381e1":"markdown","5e8d8f64":"markdown","25d9bdee":"markdown"},"source":{"63f70495":"%%capture\n!pip install pycaret","89aaa45b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nimport sklearn.utils\nimport warnings\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport xgboost as xgb\nimport warnings\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom pycaret.clustering import *\nfrom sklearn.decomposition import PCA\nfrom pycaret.classification import *\nfrom sklearn.metrics import *\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import *\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","f63c4c61":"!pip install xgboost","1048c0c1":"titanic = pd.read_csv('..\/input\/titanic\/train.csv')","b3dd782d":"titanic.head()","ac78eec0":"titanic.info()","824228cc":"titanic.describe()","185440db":"titanic.isnull().sum()","8afc4cd8":"titanic.Parch.unique()","b1d9dcd6":"len(titanic.Cabin.unique())","d6b00560":"titanic.Pclass.value_counts()","a1576a6d":"titanic.Embarked.value_counts(normalize = True)*100","169ff70c":"t_corr = titanic.corr()\nplt.figure(figsize = (10,10))\nsns.heatmap(t_corr, annot=True, annot_kws={'size':12}, cmap='Reds' )","6b27d9b1":"# Dropping useless features\ntitanic = titanic.drop(['Cabin','Name'],axis = 1)","df71f9b1":"titanic = titanic.drop(['PassengerId'],axis = 1)","e87b7782":"titanic = titanic.drop(['Ticket'],axis = 1)","55afe339":"# Resolving Null values\ntitanic[\"Age\"] = titanic['Age'].replace({np.nan:titanic['Age'].median()})","fd71869d":"titanic['Embarked'] = titanic['Embarked'].fillna(titanic['Embarked'].mode()[0])","28361036":"titanic = pd.get_dummies(titanic , columns = [\"Embarked\"])","5e98210f":"titanic = pd.get_dummies(titanic , columns = [\"Sex\"])","f08d0748":"titanic.head()","7d7ff9bb":"#titanic = titanic.drop([\"SibSp\",\"Parch\"],axis = 1)\ntitanic.head()","0688cee9":"titanic.isnull().sum()","b87b6250":"sns.catplot(x=\"Age\", y=\"Fare\", kind=\"point\", data=titanic, aspect = 5 , height = 5)","400c9a7c":"sns.displot(titanic, x=\"Fare\", kind=\"kde\" , hue=\"Sex_male\")","391c8d74":"sns.catplot(x=\"Survived\", y=\"Parch\", kind=\"swarm\" , data=titanic)","ecc6a7eb":"sns.regplot(x=\"Fare\", y=\"Survived\", data=titanic)","683e598a":"sns.regplot(x=\"Age\", y=\"Survived\", color=\"red\", data=titanic)","cc3052d0":"sns.regplot(x=\"SibSp\", y=\"Survived\", color=\"black\", data=titanic)","351195c3":"sns.regplot(x=\"Parch\", y=\"Survived\", color=\"orange\", data=titanic)","335677ea":"sns.regplot(x=\"Pclass\", y=\"Survived\", color=\"green\", data=titanic)","acd0213f":"titanic[\"SibSp + Age\"] = titanic[\"SibSp\"]+titanic[\"Age\"]","583fe3b9":"titanic = titanic.drop(['Age','SibSp'],axis=1)\ntitanic.head()","1241b23a":"sns.regplot(x=\"SibSp + Age\", y=\"Survived\", color=\"purple\", data=titanic)","ddfd6961":"#MX = MinMaxScaler()","925f93b2":"titanic.head()","1b3e6df1":"X = titanic.drop([\"Survived\"],axis = 1)\nX.head()","24d33ca8":"y = titanic[\"Survived\"]\ny = pd.DataFrame(data=y,columns=[\"Survived\"])\ny.head()","0fd6ee29":"#X = MX.fit_transform(X)\nX['Parch']=X['Parch'].map({0:'class0',1:'class1',2:'class2',3:'class3',4:'class4',5:'class5',6:'class6'})","12d945a8":"#X = pd.DataFrame(data=X,columns=[\"Pclass\",\"Parch\",\"Fare\",\"Embarked_C\",\"Embarked_Q\",\"Embarked_S\",\"Sex_female\",\"Sex_male\"])#,\"SibSp + Age\"])\nX","8c41202b":"X = pd.get_dummies(X)\nX.head()","36ee9187":"X = X.drop([\"Pclass\"],axis=1)\nX.head()","a3ac3504":"X.shape","af37e426":"test = pd.concat([X,y],axis=1)\ntest.head()","09467865":"t_corr = test.corr()\nplt.figure(figsize = (18,18))\nsns.heatmap(t_corr, annot=True, annot_kws={'size':12}, cmap='Reds' )","bde71d80":"X.isnull().sum()","4d762cca":"#Data Splitt\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)","cf45ec25":"#model= GradientBoostingClassifier(random_state=0)","94e6ed84":"#model.fit(X_train, y_train)","12575def":"#y_pred = model.predict(X_test)","27616a2f":"#r2_score(y_pred,y_test)","07f7c9cc":"#accuracy_score(y_pred,y_test)","1a942a5c":"#from sklearn.linear_model import LogisticRegression\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n#model_2 = LogisticRegression(random_state = 0).fit(X,y)","7a36c306":"#y_pred_2 = model_2.predict(X_test)","b67dcac9":"#r2_score(y_pred_2,y_test)","2f0d1bc1":"#accuracy_score(y_pred_2,y_test)","10c2c041":"from sklearn.ensemble import RandomForestClassifier","862ccb75":"#model_3 = RandomForestClassifier(random_state=0).fit(X_train,y_train)","43127c01":"#parameters = [{'n_estimators':[100], 'criterion':['gini','entropy'],'min_samples_split':[2,3,4],'min_samples_leaf':[1,2,3],'n_jobs':[-1],'random_state':[1],'max_depth':[1,2,3]}]","be3cf301":"#grid_search = GridSearchCV(estimator = model_3,\n                           #param_grid = parameters,\n                           #scoring = 'accuracy',\n                           #cv = 10,\n                           #n_jobs = -1)","bda1e2ad":"#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","629230a3":"#grid_search.fit(X_train,y_train)","14842145":"#best_accuracy = grid_search.best_score_\n#print(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))","83f9c5d5":"#best_parameters = grid_search.best_params_\n#print(\"Best Parameters:\", best_parameters)","3136f97f":"model_3 = RandomForestClassifier(criterion= 'gini', max_depth=3, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs= -1, random_state=1).fit(X,y)","4a0e63db":"X","671e7dbe":"X_te = pd.read_csv(\"..\/input\/titanic\/test.csv\")","5ad0254d":"X_te.isnull().sum()","61cbbf1d":"X_te[\"Age\"] = X_te[\"Age\"].replace({np.nan:X_te[\"Age\"].median()})","bda3314e":"X_te[\"SibSp\"] = X_te[\"SibSp\"].replace({np.nan:X_te[\"SibSp\"].median()})","e86f4b8e":"X_te['Parch']=X_te['Parch'].map({0:'class0',1:'class1',2:'class2',3:'class3',4:'class4',5:'class5',6:'class6'})","30d11a21":"X_te.head()","206f2198":"#X_te[\"SibSp + Age\"] = X_te[\"SibSp\"]+X_te[\"Age\"]\nX_te = X_te.drop(['Age','SibSp'],axis=1)\nX_te.head()","d2bef2fb":"X_te['Embarked'] = X_te['Embarked'].fillna(X_te['Embarked'].mode()[0])","868f0d73":"X_te[\"Fare\"] = X_te[\"Fare\"].replace({np.nan:X_te[\"Fare\"].mean()})","a24c05d4":"X_Ids = X_te[\"PassengerId\"]\nX_Ids = pd.DataFrame(data=X_Ids,columns=[\"PassengerId\"])\nX_Ids.head()","900d8f04":"# Dropping useless features\nX_te = X_te.drop(['Cabin','Ticket','Name',\"PassengerId\"],axis = 1)","67324914":"#X_te['Embarked']=X_te['Embarked'].map({'S':0,'C':1,'Q':2})\n#X_te['Sex']=X_te['Sex'].map({'male':0,'female':1})\nX_te = pd.get_dummies(X_te)","60e780fc":"X_te.head()","4a2747af":"X_te = pd.DataFrame(data=X_te,columns = ['Pclass','Fare','Sex_female','Sex_male','Parch_class0','Parch_class1','Parch_class2','Parch_class3','Parch_class4','Parch_class5','Parch_class6','Embarked_C','Embarked_Q','Embarked_S'])#,'SibSp + Age'])","15a7c7ec":"X_te.head()","ca66ebbf":"X_te.isnull().sum()","5442541e":"#X_te = MX.fit_transform(X_te)","8927ae90":"X_te","e983be33":"X_te.shape","ee9e7ec1":"y_pre = model_3.predict(X_te)","b2aeb43e":"y_pre = pd.DataFrame(data=y_pre,columns=[\"Survived\"])\ny_pre","493a0834":"New_one = pd.read_csv(\"..\/input\/titanic\/test.csv\")","0dde3525":"New_one","8e10dbd6":"ids = New_one['PassengerId']\nids","696644db":"ids = pd.DataFrame(data=ids,columns=['PassengerId'])","4f048c0d":"ids","425e0352":"result = pd.concat([ids , y_pre] , axis = 1)\nresult","1b0fcc25":"result.shape ","c8c7fe4b":"result.to_csv('MyResult.csv',index=False)","8ee3759d":"# Model Training","c9051254":"# Test Data Preprocess","8e4cd3cc":"@author : M.Hossein.Hashemi","648381e1":"# EDA","5e8d8f64":"# Visualization","25d9bdee":"# Data preprocessing"}}