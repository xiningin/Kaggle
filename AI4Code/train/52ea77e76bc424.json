{"cell_type":{"1b87823f":"code","10164b64":"code","e4273a10":"code","9ffc38c0":"code","533d1b91":"code","96fecabb":"code","7cd9a17d":"code","b5d9117e":"code","5a6c2128":"code","07323b32":"code","00b2bc30":"code","fd978cd1":"code","3dfecaa6":"code","be5765c0":"code","89ad1c73":"code","b5961e93":"code","73fa90dc":"code","fb1364b9":"code","23b98543":"code","ae4d1751":"code","75fff726":"code","be883605":"code","24dcda7b":"code","e862e8de":"code","075580fb":"code","74d68d31":"code","528f1506":"code","e1eb1667":"code","ed11ac7d":"code","a52cc136":"code","636517dd":"code","fdd43952":"code","4449b732":"code","16228397":"code","07d2a8e3":"code","e08f4615":"code","b6d9bb91":"code","4e01bb6a":"code","4d71608e":"code","363880bd":"code","20a61c4d":"code","69eb2ef4":"code","44d28437":"code","6b21f767":"markdown","26282802":"markdown","cf17d4f2":"markdown","e1568e59":"markdown","23af3a9f":"markdown","4117ac9e":"markdown","1a7793be":"markdown","ad9527db":"markdown","754edec6":"markdown","c8424b8d":"markdown","51c78256":"markdown","8d0fde35":"markdown","7ff2e927":"markdown","a2234552":"markdown","9e2b870b":"markdown","a122b3af":"markdown","7c6e4386":"markdown","1a33859e":"markdown","54df1354":"markdown","ec9e10bc":"markdown","f5bc1ffc":"markdown","2f823c9c":"markdown","1b8c77c7":"markdown","d8ff2322":"markdown","0a42ddc6":"markdown","33ff48e7":"markdown","5d6abb0d":"markdown","ec262957":"markdown","c090444c":"markdown","d53d70f0":"markdown","86689054":"markdown","0f3a821b":"markdown","26d5ae83":"markdown","513c8a43":"markdown","ccabff30":"markdown","f4b4c1a4":"markdown","6361a0f2":"markdown","00d74df6":"markdown"},"source":{"1b87823f":"import numpy as np \nimport pandas as pd \n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nfrom torchvision.datasets import MNIST\nimport torchvision.transforms as transforms\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import random_split, DataLoader\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom shutil import copyfile\n\n","10164b64":"# download MNIST data\ndataset = MNIST(root='data\/', download=True)","e4273a10":"# Get the train and test set\n\ndataset = MNIST(root='data\/', train=True, transform=transforms.ToTensor())\n\ntest_dataset = MNIST(root='data\/', train=False, transform=transforms.ToTensor())\nprint(len(dataset), len(test_dataset))","9ffc38c0":"# shape of the images\n\nimg_tensor, label = dataset[0]\nprint(img_tensor.shape, label)","533d1b91":"# plot image\n\nplt.imshow(img_tensor[0,:,:], cmap='gray')\nprint('Label:', label)","96fecabb":"train_ds, val_ds = random_split(dataset, [50000, 10000])\nlen(train_ds), len(val_ds)","7cd9a17d":"batch_size = 128\n\n# shuffle so that batches in each epoch are different, and this randomization helps generalize and speed up training\ntrain_loader = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\n# val is only used for evaluating the model, so no need to shuffle\nval_loader = DataLoader(val_ds, batch_size*2, num_workers=4, pin_memory=True)","b5d9117e":"for images, _ in train_loader:\n    print('images.shape:', images.shape)\n    plt.figure(figsize=(16,8))\n    plt.axis('off')\n    plt.imshow(make_grid(images, nrow=16).permute((1, 2, 0)))\n    break","5a6c2128":"input_size = 28*28 # 784 weights to train, 1 for each pixel\nnum_classes = 10 # 10 outputs, 10 biases\n\n# Logistic regression model\nmodel = nn.Linear(input_size, num_classes)","07323b32":"print(model.weight.shape)\nmodel.weight","00b2bc30":"print(model.bias.shape)\nmodel.bias","fd978cd1":"class MnistModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(input_size, num_classes)\n    \n    # reshape\/flatten input tensor when it is passed to model\n    def forward(self, xb):\n        xb = xb.reshape(-1, 784) # -1 so that it will work for different batch sizes\n        out = self.linear(xb)\n        return out\n\nmodel = MnistModel()","3dfecaa6":"print(model.linear.weight.shape, model.linear.bias.shape)\nlist(model.parameters())","be5765c0":"# check that model class works\n\nfor images, labels in train_loader:\n    print('images.shape:', images.shape)\n    outputs = model(images)\n    break\n    \nprint('outputs.shape:', outputs.shape)\nprint('Sample outputs:\\n', outputs[:2].data)","89ad1c73":"prob = torch.exp(outputs[0])\/torch.sum(torch.exp(outputs[0]))\nprob","b5961e93":"torch.sum(prob)","73fa90dc":"probs = F.softmax(outputs, dim=1) # output shape is (128, 10), apply softmax to 10 class dim\n\n# Look at sample probabilities\nprint('Sample probabilities:\\n', probs[:2].data)\n\n# Add up the probabilities of an output row\nprint('Sum:', torch.sum(probs[0]).item())","fb1364b9":"max_probs, preds = torch.max(probs, dim=1) # probs shape is (128, 10), apply max to 10 class dim; max returns largest element and index of it\nprint(preds)\nprint(max_probs)","23b98543":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1) # probs shape is (128, 10), apply max to 10 class dim; max returns largest element and index of it\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds)), preds","ae4d1751":"loss_fn = F.cross_entropy","75fff726":"# Loss of current batch of data\n\nloss = loss_fn(outputs, labels) # pass outputs instead of preds as cross_entropy will apply softmax, labels will be converted to one-hot encoded vectors\nprint(loss)\n","be883605":"class MnistModel(nn.Module):\n    # this is the constructor, which creates an object of class MnistModel when called\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(input_size, num_classes)\n    \n    # reshape\/flatten input tensor when it is passed to model\n    def forward(self, xb):\n        xb = xb.reshape(-1, 784) # -1 so that it will work for different batch sizes\n        out = self.linear(xb)\n        return out\n    \n    # this is for loading the batch of train image and outputting its loss, accuracy & predictions\n    def training_step(self, batch):\n        images,labels = batch\n        out = self(images)                            # generate predictions\n        loss = F.cross_entropy(out, labels)           # compute loss\n        acc,preds = accuracy(out, labels)             # calculate accuracy\n        return {'train_loss': loss, 'train_acc':acc}\n       \n    # this is for computing the train average loss and acc for each epoch\n    def train_epoch_end(self, outputs):\n        batch_losses = [x['train_loss'] for x in outputs]   # get all the batches loss\n        epoch_loss = torch.stack(batch_losses).mean()       # combine losses\n        batch_accs = [x['train_acc'] for x in outputs]      # get all the batches acc\n        epoch_acc = torch.stack(batch_accs).mean()          # combine accuracies\n        return {'train_loss': epoch_loss.item(), 'train_acc': epoch_acc.item()}\n    \n    # this is for loading the batch of val\/test image and outputting its loss, accuracy, predictions & labels\n    def validation_step(self, batch):\n        images,labels = batch\n        out = self(images)                       # generate predictions\n        loss = F.cross_entropy(out, labels)      # compute loss\n        acc,preds = accuracy(out, labels)        # calculate accuracy and get predictions\n        return {'val_loss': loss, 'val_acc':acc, 'preds':preds, 'labels':labels}\n    \n    # this is for computing the validation average loss and acc for each epoch\n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]     # get all the batches loss\n        epoch_loss = torch.stack(batch_losses).mean()       # combine losses\n        batch_accs = [x['val_acc'] for x in outputs]        # get all the batches acc\n        epoch_acc = torch.stack(batch_accs).mean()          # combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n\n    # this is for printing out the results after each epoch\n    def epoch_end(self, epoch, train_result, val_result):\n        print('Epoch [{}], train_loss: {:.4f}, train_acc: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}'.format(epoch+1, train_result['train_loss'], train_result['train_acc'], val_result['val_loss'], val_result['val_acc']))\n    \n    # this is for using on the test set, it outputs the average loss and acc, and outputs the predictions\n    def test_prediction(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()                           # combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()                              # combine accuracies\n        batch_preds = [pred for x in outputs for pred in x['preds'].tolist()]   # combine predictions\n        batch_labels = [lab for x in outputs for lab in x['labels'].tolist()]   # combine labels\n        return {'test_loss': epoch_loss.item(), 'test_acc': epoch_acc.item(), 'test_preds': batch_preds, 'test_labels': batch_labels}       \n        ","24dcda7b":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader] # perform val for each batch\n    return model.validation_epoch_end(outputs)                       # get the results for each epoch \n\ndef fit(model, train_loader, val_loader, epochs, lr, opt_func=torch.optim.SGD):\n    history = {}\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        \n        # Training phase\n        train_outputs = []\n        for batch in train_loader:\n            outputs = model.training_step(batch)              # compute loss and accuracy\n            loss = outputs['train_loss']                      # get loss\n            train_outputs.append(outputs)\n            loss.backward()                                   # compute gradients\n            optimizer.step()                                  # update weights \n            optimizer.zero_grad()                             # reset gradients to zero\n        train_results = model.train_epoch_end(train_outputs)  # get the train average loss and acc for each epoch\n            \n        # Validation phase\n        val_results = evaluate(model, val_loader)\n        \n        # print results\n        model.epoch_end(epoch, train_results, val_results)\n                \n        # save results to dictionary\n        to_add = {'train_loss': train_results['train_loss'], 'train_acc': train_results['train_acc'],\n                 'val_loss': val_results['val_loss'], 'val_acc': val_results['val_acc']}\n        for key,val in to_add.items():\n            if key in history:\n                history[key].append(val)\n            else:\n                history[key] = [val]\n                \n    return history\n\n\ndef test_predict(model, test_loader):\n    outputs = [model.validation_step(batch) for batch in test_loader] # perform testing for each batch\n    results = model.test_prediction(outputs)                          # get the results\n    print('test_loss: {:.4f}, test_acc: {:.4f}'.format(results['test_loss'], results['test_acc']))\n    return results['test_preds'], results['test_labels']","e862e8de":"# Hyperparameters\nlr = 0.001\nnum_epochs = 10\n\nmodel = MnistModel()  \nhistory = fit(model, train_loader, val_loader, num_epochs, lr)","075580fb":"# Plot Accuracy and Loss \nepochs=10\n\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\nt = f.suptitle('Performance', fontsize=12)\nf.subplots_adjust(top=0.85, wspace=0.3)\n\nepoch_list = list(range(1,epochs+1))\nax1.plot(epoch_list, history['train_acc'], label='Train Accuracy')\nax1.plot(epoch_list, history['val_acc'], label='Validation Accuracy')\nax1.set_xticks(np.arange(0, epochs+1, 5))\nax1.set_ylabel('Accuracy Value')\nax1.set_xlabel('Epoch')\nax1.set_title('Accuracy')\nl1 = ax1.legend(loc=\"best\")\n\nax2.plot(epoch_list, history['train_loss'], label='Train Loss')\nax2.plot(epoch_list, history['val_loss'], label='Validation Loss')\nax2.set_xticks(np.arange(0, epochs+1, 5))\nax2.set_ylabel('Loss Value')\nax2.set_xlabel('Epoch')\nax2.set_title('Loss')\nl2 = ax2.legend(loc=\"best\")","74d68d31":"test_loader = DataLoader(test_dataset, batch_size=256)\npreds,labels = test_predict(model, test_loader)","528f1506":"img_num = 100\nimg_tensor, label = test_dataset[img_num]\nplt.imshow(img_tensor[0,:,:], cmap='gray')\nprint('Label:', label, 'Prediction:', preds[img_num])","e1eb1667":"# Evaluate Model Performance\n\n# copy .py file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/model-evaluation-utils\/model_evaluation_utils.py\", dst = \"..\/working\/model_evaluation_utils.py\")\n\nfrom model_evaluation_utils import get_metrics\n\nget_metrics(true_labels=labels,\n            predicted_labels=preds)","ed11ac7d":"idxs = torch.randint(0, len(test_dataset)+1, (10,)).data # select random test images indices\n\nfig, ax = plt.subplots(nrows=2, ncols=5, figsize=(30,12))\nfor c,i in enumerate(idxs):\n    img_tensor, label = test_dataset[i]\n    ax[c\/\/5][c%5].imshow(img_tensor[0,:,:], cmap='gray')\n    ax[c\/\/5][c%5].set_title('Label: {}, Prediction: {}'.format(label, preds[i]), fontsize=25)\n    ax[c\/\/5][c%5].axis('off')\n","a52cc136":"class MnistModel_NN(nn.Module):\n    # this is the constructor, which creates an object of class MnistModel_NN when called\n    def __init__(self, input_size, hidden_size, num_classes):\n        super().__init__()\n        # hidden layer\n        self.linear1 = nn.Linear(input_size, hidden_size)\n        # output layer\n        self.linear2 = nn.Linear(hidden_size, num_classes)\n    \n    # reshape\/flatten input tensor when it is passed to model\n    def forward(self, xb):\n        xb = xb.reshape(-1, 784) # -1 so that it will work for different batch sizes\n        # Get intermediate outputs using hidden layer\n        out = self.linear1(xb)\n        # Apply activation function\n        out = F.relu(out)\n        # Get predictions using output layer\n        out = self.linear2(out)\n        return out\n    \n    # this is for loading the batch of train image and outputting its loss, accuracy & predictions\n    def training_step(self, batch):\n        images,labels = batch\n        out = self(images)                            # generate predictions\n        loss = F.cross_entropy(out, labels)           # compute loss\n        acc,preds = accuracy(out, labels)             # calculate accuracy\n        return {'train_loss': loss, 'train_acc':acc}\n       \n    # this is for computing the train average loss and acc for each epoch\n    def train_epoch_end(self, outputs):\n        batch_losses = [x['train_loss'] for x in outputs]   # get all the batches loss\n        epoch_loss = torch.stack(batch_losses).mean()       # combine losses\n        batch_accs = [x['train_acc'] for x in outputs]      # get all the batches acc\n        epoch_acc = torch.stack(batch_accs).mean()          # combine accuracies\n        return {'train_loss': epoch_loss.item(), 'train_acc': epoch_acc.item()}\n    \n    # this is for loading the batch of val\/test image and outputting its loss, accuracy, predictions & labels\n    def validation_step(self, batch):\n        images,labels = batch\n        out = self(images)                       # generate predictions\n        loss = F.cross_entropy(out, labels)      # compute loss\n        acc,preds = accuracy(out, labels)        # calculate accuracy and get predictions\n        return {'val_loss': loss.detach(), 'val_acc':acc, 'preds':preds, 'labels':labels} # detach extracts only the needed number, or other numbers will crowd memory\n    \n    # this is for computing the validation average loss and acc for each epoch\n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]     # get all the batches loss\n        epoch_loss = torch.stack(batch_losses).mean()       # combine losses\n        batch_accs = [x['val_acc'] for x in outputs]        # get all the batches acc\n        epoch_acc = torch.stack(batch_accs).mean()          # combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n\n    # this is for printing out the results after each epoch\n    def epoch_end(self, epoch, train_result, val_result):\n        print('Epoch [{}], train_loss: {:.4f}, train_acc: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}'.format(epoch+1, train_result['train_loss'], train_result['train_acc'], val_result['val_loss'], val_result['val_acc']))\n    \n    # this is for using on the test set, it outputs the average loss and acc, and outputs the predictions\n    def test_prediction(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()                           # combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()                              # combine accuracies\n        batch_preds = [pred for x in outputs for pred in x['preds'].tolist()]   # combine predictions\n        batch_labels = [lab for x in outputs for lab in x['labels'].tolist()]   # combine labels\n        return {'test_loss': epoch_loss.item(), 'test_acc': epoch_acc.item(), 'test_preds': batch_preds, 'test_labels': batch_labels}       \n        ","636517dd":"torch.cuda.is_available()","fdd43952":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndevice = get_default_device()\ndevice","4449b732":"def to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)","16228397":"for images, labels in train_loader:\n    print(images.shape)\n    images = to_device(images, device)\n    print(images.device)\n    break","07d2a8e3":"class DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device) # yield will stop here, perform other steps, and the resumes to the next loop\/batch\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","e08f4615":"train_loader = DeviceDataLoader(train_loader, device)\nval_loader = DeviceDataLoader(val_loader, device)","b6d9bb91":"for xb, yb in val_loader:\n    print('xb.device:', xb.device)\n    print('yb:', yb)\n    break","4e01bb6a":"# Hyperparameters\ninput_size = img_tensor.shape[1] * img_tensor.shape[2] #728\nhidden_size = 128\nlr = 0.1\nnum_epochs = 10\n\nmodelNN = MnistModel_NN(input_size, hidden_size, num_classes=10)  \nto_device(modelNN, device) # move model parameters to the same device\n","4d71608e":"history = fit(modelNN, train_loader, val_loader, num_epochs, lr)","363880bd":"# Plot Accuracy and Loss \nepochs=10\n\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\nt = f.suptitle('Performance', fontsize=12)\nf.subplots_adjust(top=0.85, wspace=0.3)\n\nepoch_list = list(range(1,epochs+1))\nax1.plot(epoch_list, history['train_acc'], label='Train Accuracy')\nax1.plot(epoch_list, history['val_acc'], label='Validation Accuracy')\nax1.set_xticks(np.arange(0, epochs+1, 5))\nax1.set_ylabel('Accuracy Value')\nax1.set_xlabel('Epoch')\nax1.set_title('Accuracy')\nl1 = ax1.legend(loc=\"best\")\n\nax2.plot(epoch_list, history['train_loss'], label='Train Loss')\nax2.plot(epoch_list, history['val_loss'], label='Validation Loss')\nax2.set_xticks(np.arange(0, epochs+1, 5))\nax2.set_ylabel('Loss Value')\nax2.set_xlabel('Epoch')\nax2.set_title('Loss')\nl2 = ax2.legend(loc=\"best\")","20a61c4d":"test_loader = DeviceDataLoader(test_loader, device)\npreds,labels = test_predict(modelNN, test_loader)","69eb2ef4":"# Evaluate Model Performance\n\nget_metrics(true_labels=labels,\n            predicted_labels=preds)","44d28437":"fig, ax = plt.subplots(nrows=2, ncols=5, figsize=(30,12))\nfor c,i in enumerate(idxs):\n    img_tensor, label = test_dataset[i]\n    ax[c\/\/5][c%5].imshow(img_tensor[0,:,:], cmap='gray')\n    ax[c\/\/5][c%5].set_title('Label: {}, Prediction: {}'.format(label, preds[i]), fontsize=25)\n    ax[c\/\/5][c%5].axis('off')","6b21f767":"The softmax function is included in the `torch.nn.functional` package, and requires us to specify a dimension along which the softmax must be applied.","26282802":"Let's look at the weights and biases. These are random initialized values.","cf17d4f2":"# Logistic Regression\n\n<a id='Model'><\/a>\n## **3. Model** ##\n\nNow that we have prepared our data loaders, we can define our model.\n\nA logistic regression model is almost identical to a linear regression model i.e. there are weights and bias matrices, and the output is obtained using simple matrix operations (pred = x @ w.t() + b).\n\nWe can use nn.Linear to create the model instead of defining and initializing the matrices manually.\n\nSince nn.Linear expects the each training example to be a vector, each 1x28x28 image tensor needs to be flattened out into a vector of size 784 (28*28), before being passed into the model.\n\nThe output for each image is vector of size 10, with each element of the vector signifying the probability a particular target label (i.e. 0 to 9). The predicted label for an image is simply the one with the highest probability.","e1568e59":"We can see that the model outperforms simple logistic regression by more than 10%, showing the power of neural networks.","23af3a9f":"That's a great result! With just 10 epochs of training, our model has reached an accuracy of over 80% on the validation set.","4117ac9e":"<a id='Predict_test'><\/a>\n## **8. Predicting on Test Set** ##\n\nIt's time to test our model on the test set and see how well it performs on data that **it has not seen before**.","1a7793be":"Inside the __init__ constructor method, we instantiate the weights and biases using nn.Linear. And inside the forward method, which is invoked when we pass a batch of inputs to the model, we flatten out the input tensor, and then pass it into self.linear.\n\nxb.reshape(-1, 28*28) indicates to PyTorch that we want a view of the xb tensor with two dimensions, where the length along the 2nd dimension is 28*28 (i.e. 784). One argument to .reshape can be set to -1 (in this case the first dimension), to let PyTorch figure it out automatically based on the shape of the original tensor.\n\nNote that the model no longer has .weight and .bias attributes (as they are now inside the .linear attribute), but it does have a .parameters method which returns a list containing the weights and bias, and can be used by a PyTorch optimizer.","ad9527db":"<a id='Evaluation_metrics'><\/a>\n## **9. Model Evaluation Metrics** ##\n\nNext, we get a measure of how well our model is performing by evaluating several metrics of the predictions against the actual target_labels. It seems to have a good balance between precision and recall.","754edec6":"Note that `validation_step` is used for both val and test.\n\nNext, we will define an `evaluate` function, which will perform the validation phase, a `fit` function which will perform the entire training process, and a `test_predict` function, which will use the trained model weights to evaluate the test set and return the predictions, acc, and loss.","c8424b8d":"<a id='ModelClass'><\/a>\n## **5. Creating Model Class** ##\n\nSome parts of the training loop are specific to the specific problem we're solving (e.g. loss function, metrics etc.) whereas others are generic and can be applied to any deep learning problem. Let's impelment the problem-specific parts within our `MnistModel` class:","51c78256":"We see that it performs about the same as the validation set. We expect this to be similar to the accuracy\/loss on the validation set. If not, we might need a better validation set that has similar data and distribution as the test set (which often comes from real world data).\n\nNext, we can output individual sample prediction and its associated label:","8d0fde35":"<a id='Train_model'><\/a>\n## **6. Train and Evaluate Model** ##\n\nIt's time to train and evaluate our model on the entire train and validation sets.\n\nConfigurations like `batch size`, `learning rate` etc. need to picked in advance while training machine learning models, and are called **hyperparameters**. Picking the right hyperparameters is critical for training an accurate model within a reasonable amount of time, and is an active area of research and experimentation. Feel free to try different learning rates and see how it affects the training process.","7ff2e927":"<a id='GPU'><\/a>\n## **12. Set Up GPU** ##","a2234552":"<a id='Loss'><\/a>\n## **4. Evaluation Metric and Loss Function** ##\n\nHere we define a function to calculate the accuracy of our predictions.","9e2b870b":"Let's test if our model works by inputting the first batch of data.","a122b3af":"Finally, we can determine the predicted label for each image by simply choosing the index of the element with the highest probability in each output row. This is done using `torch.max`, which returns the largest element and the index of the largest element along a particular dimension of a tensor.","7c6e4386":"It's quite clear from the above picture that the model probably won't cross the accuracy threshold of 90% even after training for a very long time. One possible reason for this is that the learning rate might be too high. It's possible that the model's paramaters are \"bouncing\" around the optimal set of parameters that have the lowest loss. We can try reducing the learning rate and training for a few more epochs to see if it helps.\n\nThe more likely reason is that **the model just isn't powerful enough**. If you remember our initial hypothesis, we have assumed that the output (in this case the class probabilities) is a **linear function** of the input (pixel intensities), obtained by perfoming a matrix multiplication with the weights matrix and adding the bias. This is a fairly weak assumption, as there may not actually exist a linear relationship between the pixel intensities in an image and the digit it represents. While it works reasonably well for a simple dataset like MNIST (getting us to >80% accuracy), we need more sophisticated models (e.g., **Neural Networks**) that can capture non-linear relationships between image pixels and labels for complex tasks like recognizing everyday objects, animals etc. \n","1a33859e":"## Softmax Function\n\nHere we see that by applying the softmax function, the probabilities of all 10 classes now adds up to 1. Although it seems daunting at first, the softmax is actually quite easy to understand and implement.","54df1354":"Let's visualize a batch of data in a grid using the make_grid function from torchvision. We'll also use the .permute method on the tensor to move the channels to the last dimension, as expected by matplotlib.","ec9e10bc":"Tensors that have been moved to the GPU's RAM have a device property which includes the word cuda. Let's verify this by looking at a batch of data from valid_dl.","f5bc1ffc":"<a id='Predict_testNN'><\/a>\n## **15. Predicting on Test Set** ##","2f823c9c":"# Neural Network\n\n<a id='ModelClassNN'><\/a>\n## **11. Creating Model Class** ##\n\nTo improve upon [logistic regression](https:\/\/jvn.io\/aakashns\/a1b40b04f5174a18bd05b17e3dffb0f0), we'll create a **neural network** with one **hidden layer**. Here's what this means:\n\n* Instead of using a single `nn.Linear` object to transform a batch of inputs (pixel intensities) into a batch of outputs (class probabilities), we'll use two `nn.Linear` objects. Each of these is called a layer in the network. \n\n* The first layer (also known as the hidden layer) will transform the input matrix of shape `batch_size x 784` into an intermediate output matrix of shape `batch_size x hidden_size`, where `hidden_size` is a preconfigured parameter (e.g. 32 or 64).\n\n* The intermediate outputs are then passed into a non-linear *activation function*, which operates on individual elements of the output matrix.\n\n* The result of the activation function, which is also of size `batch_size x hidden_size`, is passed into the second layer (also knowns as the output layer), which transforms it into a matrix of size `batch_size x 10`, identical to the output of the logistic regression model.\n\nIntroducing a hidden layer and an activation function allows the model to learn more complex, multi-layered and non-linear relationships between the inputs and the targets. Here's what it looks like visually:\n\n![](https:\/\/i.imgur.com\/vDOGEkG.png)\n\nThe activation function we'll use here is called a **Rectified Linear Unit** or **ReLU**, and it has a really simple formula: `relu(x) = max(0,x)` i.e. if an element is negative, we replace it by 0, otherwise we leave it unchanged.\n\n<img src = 'https:\/\/i.ytimg.com\/vi\/DDBk3ZFNtJc\/maxresdefault.jpg' width=\"600\">\n\n<br><br>\nTo define the model, we extend the `nn.Module` class, just as we did with logistic regression.","1b8c77c7":"# **Neural Network MNIST Using Pytorch** <br>\nTeYang, Lau<br>\nCreated: 12\/7\/2020<br>\nLast update: 12\/7\/2020<br>\n\n<img src = 'https:\/\/miro.medium.com\/max\/6400\/1*LLVL8xUiUOBE8WHgzAuY-Q.png' width=\"900\">\n<br>\n\nThis kernel was created by following the 2nd week of the Pytorch course [here](https:\/\/www.youtube.com\/watch?v=4ZZrP68yXCI&t=6728s) by JovianML and freeCodeCamp.<br>\n\nThis is my first intro to **Pytorch** and here I will be applying it onto the MNIST dataset using **Logistic Regression** and **Neural Network**.\nPyTorch is python native, and integrates easily with other python packages, which makes this a simple choice for researchers. Many researchers use Pytorch because the API is intuitive and easier to learn, and get into experimentation quickly, rather than reading through documentation.\n\n\n\nThe process is as follows:\n1. [Data Loading and Structure](#Data_loading_structure)\n2. [Preparing Train, Validation & Test Data](#Preparing_data)<br><br>\n**Logistic Regression**\n3. [Model](#Model)\n4. [Evaluation Metric and Loss Function](#Loss)\n5. [Creating Model Class](#ModelClass)\n6. [Train and Evaluate Model](#Train_model)    \n7. [Accuracy and Loss Plots](#Accuracy_loss_plots)\n8. [Predicting on Test Set](#Predict_test)\n9. [Model Evaluation Metrics](#Evaluation_metrics)\n10. [Plot Predictions against Actual Labels](#Plot_predictions)<br><br>\n**Neural Network**\n11. [Creating Model Class](#ModelClassNN)\n12. [Set Up GPU](#GPU)\n13. [Train and Evaluate Model](#Train_modelNN) \n14. [Accuracy and Loss Plots](#Accuracy_loss_plotsNN)\n15. [Predicting on Test Set](#Predict_testNN)","d8ff2322":"Before we train the model, we need to ensure that the data and the model's parameters (weights and biases) are on the same device (CPU or GPU). We can reuse the to_device function to move the model's parameters to the right device.","0a42ddc6":"Here we create a class to initialize a model, and to rescale\/flatten the input image as our image is not of shape (1, 28, 28), and we need it to be a flat vector.","33ff48e7":"Here, we define a `DeviceDataLoader` class to wrap our existing data loaders and move data to the selected device, as batches are accessed. Interestingly, we don't need to extend an existing class to create a PyTorch dataloader. All we need is an `__iter__` method to retrieve batches of data, and an `__len__` method to get the number of batches.","5d6abb0d":"First batch of output has 128 (the batch size) * 10 (10 classes) shape. However, each of the 10 values are not probabilities that sum to 1. To do that, we will need to use the softmax function. Softmax = exp(`yi`)\/sum(exp(`e^yi`))","ec262957":"Here we can see that the train set consists of 60k images, and the test set 10k. The images are also of size 28x28 pixels, with only 1 channel (greyscale). Let's plot an example!","c090444c":"<a id='Plot_predictions'><\/a>\n## **10. Plot Predictions against Actual Labels** ##\n\nHere, we plot out a random subset of the test dataset and see how well it performs on them. Accuracy is pretty good, with some occasional mistakes on nubmers that look similar. These are expected from a linear model.","d53d70f0":"<a id='Preparing_data'><\/a>\n## **2. Preparing Train, Validation & Test Data** ##\n\nNow it's time to prepare our training, validation and testing dataset. We do this using the *random_split* function in torch. Here we split the train dataset into 50k train and 10k validation. The train dataset will be used for training the logistic regression model while the validation dataset will be used to evaluate its performance. Hyperparameters can be tuned to improve the performance on the validation set.\n\n1. **Training set** - used to train the model i.e. compute the loss and adjust the weights of the model using gradient descent.\n2. **Validation set** - used to evaluate the model while training, adjust hyperparameters (learning rate etc.) and pick the best version of the model.\n3. **Test set** - used to compare different models, or different types of modeling approaches, and report the final accuracy of the model.","86689054":"<a id='Data_loading_structure'><\/a>\n## **1. Data Loading and Structure** ##\n\nWe start by loading the dependencies and data, and exploring the dataset to look at its structure. We the print some images to get a hang of it.","0f3a821b":"<img src = 'https:\/\/i.imgur.com\/EAh9jLN.png' width=\"400\">","26d5ae83":"While the accuracy is a great way for us (humans) to evaluate the model, it can't be used as a loss function for optimizing our model using gradient descent, for the following reasons:\n\n1. It's not a differentiable function. `torch.max` and `==` are both non-continuous and non-differentiable operations, so we can't use the accuracy for computing gradients w.r.t the weights and biases.\n\n2. It doesn't take into account the actual probabilities predicted by the model, so it can't provide sufficient feedback for incremental improvements. \n\nDue to these reasons, accuracy is a great **evaluation metric** for classification, but not a good loss function. A commonly used loss function for classification problems is the **cross entropy**, which has the following formula:\n\n![cross-entropy](https:\/\/i.imgur.com\/VDRDl1D.png)\n\nWhile it looks complicated, it's actually quite simple:\n\n* For each output row, pick the predicted probability for the correct label. E.g. if the predicted probabilities for an image are `[0.1, 0.3, 0.2, ...]` and the correct label is `1`, we pick the corresponding element `0.3` and ignore the rest.\n\n* Then, take the [logarithm](https:\/\/en.wikipedia.org\/wiki\/Logarithm) of the picked probability. If the probability is high i.e. close to 1, then its logarithm is a very small negative value, close to 0. And if the probability is low (close to 0), then the logarithm is a very large negative value. We also multiply the result by -1, which results is a large postive value of the loss for poor predictions.\n\n* Finally, take the average of the cross entropy across all the output rows to get the overall loss for a batch of data.\n\nUnlike accuracy, cross-entropy is a continuous and differentiable function that also provides good feedback for incremental improvements in the model (a slightly higher probability for the correct label leads to a lower loss). This makes it a good choice for the loss function. \n\nAs you might expect, PyTorch provides an efficient and tensor-friendly implementation of cross entropy as part of the `torch.nn.functional` package. Moreover, it also performs softmax internally, so we can directly pass in the outputs of the model without converting them into probabilities.","513c8a43":"<a id='Accuracy_loss_plotsNN'><\/a>\n## **14. Accuracy and Loss Plots** ##","ccabff30":"Our model now performs better on the test set!","f4b4c1a4":"Here we select a batch size of 128 to perform mini_batch gradient descent. This is a hyperparameter that can be tuned. The batch size means that the 50k train images will be divided into batches of 128 images and gradient descent will be performed on each of this 128 images in one epoch (1 runthrough of the whole data).","6361a0f2":"PyTorch datasets allow us to specify one or more transformation functions which are applied to the images as they are loaded. torchvision.transforms contains many such predefined functions, and we'll use the ToTensor transform to convert images into PyTorch tensors.","00d74df6":"<a id='Accuracy_loss_plots'><\/a>\n## **7. Accuracy and Loss Plots** ##"}}