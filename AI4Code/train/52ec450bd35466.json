{"cell_type":{"902d51ad":"code","51117ea0":"code","f1f2636b":"code","fbbf578e":"code","213e5802":"code","114dce7a":"code","4ea869f9":"code","4f15c27e":"code","236f0635":"code","4c43f0e9":"code","16bcf68c":"code","daeae07d":"code","b944564d":"code","981b6b19":"code","64179f33":"markdown","7938f573":"markdown","c6aea0e8":"markdown","91869123":"markdown","d2d9ac7d":"markdown","b1792c2c":"markdown","92c9a0ef":"markdown","49e3a82c":"markdown","d24ecb34":"markdown","9419a611":"markdown","f8f46ae7":"markdown","9f819e0d":"markdown"},"source":{"902d51ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51117ea0":"def load_stock(ticker,since=None ):\n    ETF_DIRECTORY = '\/kaggle\/input\/price-volume-data-for-all-us-stocks-etfs\/Data\/Stocks\/'\n\n    df = pd.read_csv(os.path.join(ETF_DIRECTORY, ticker.lower() + '.us.txt'), sep=',')\n    df['Date'] = pd.to_datetime(df['Date'])\n    if since != None:\n        df = df[(df['Date'].dt.year >= since)].copy()\n    df.index = range(len(df))\n    return df\n\n\ndf = load_stock('AAPL', 2017)\ndf.head()","f1f2636b":"def rsi(values):\n    '''\n    Relative Strength Index\n    '''\n    up = values[values>0].mean()\n    down = -1*values[values<0].mean()\n    return 100 * up \/ (up + down)\n\n\ndef compute_rsi(df, window=14):\n    '''\n    With Momentum_1D = P(t) - P(t-1)\n    '''\n    df['Momentum_1D'] = (df['Close'] - df['Close'].shift(1)).fillna(0).copy()\n    return df['Momentum_1D'].rolling(center=False, window=window).apply(rsi).fillna(0)\n\n\n# df['RSI_14'] = compute_rsi(df, 14)\n# df['RSI_7'] = compute_rsi(df, 7)\n\n# df.head()","fbbf578e":"def bbands(price, length=30, numsd=2):\n    \"\"\" \n    returns average, upper band, and lower band\n    \"\"\"\n    #ave = pd.stats.moments.rolling_mean(price,length)\n    ave = price.rolling(window = length, center = False).mean()\n    #sd = pd.stats.moments.rolling_std(price,length)\n    sd = price.rolling(window = length, center = False).std()\n    upband = ave + (sd*numsd)\n    dnband = ave - (sd*numsd)\n    return np.round(ave,3), np.round(upband,3), np.round(dnband,3)\n\n\ndef compute_BB(df):\n  '''\n  '''\n  df['BB_Middle_Band'], df['BB_Upper_Band'], df['BB_Lower_Band'] = bbands(df['Close'], length=20, numsd=1)\n  df['BB_Middle_Band'] = df['BB_Middle_Band'].fillna(0)\n  df['BB_Upper_Band'] = df['BB_Upper_Band'].fillna(0)\n  df['BB_Lower_Band'] = df['BB_Lower_Band'].fillna(0)\n  return df\n\n\n# df = compute_BB(df)\n# df.tail()","213e5802":"def MACD(df):\n  df['EMA_26'] = df['Close'].ewm(span=26,min_periods=0,adjust=True,ignore_na=False).mean()\n  df['EMA_12'] = df['Close'].ewm(span=12,min_periods=0,adjust=True,ignore_na=False).mean()\n  df['MACD'] = df['EMA_12'] - df['EMA_26']\n  df = df.fillna(0)\n  return df \n\n# ser = MACD(df)\n# ser.tail(5)","114dce7a":"def compute_stochastic(df, n):\n    df['ST_K'] = ((df['Close'] - df['Low'].rolling(window=n, center=False).mean()) \/ (df['High'].rolling(window=n, center=False).max() - df['Low'].rolling(window=n, center=False).min())) * 100\n    df['ST_D'] = df['ST_K'].rolling(window = 3, center=False).mean()\n    return df.fillna(0)\n    \n    \n# df = compute_stochastic(df, 4)\n# df.tail()","4ea869f9":"def compute_ema_and_tema(df):\n  df['EMA_3'] = df['Close'].ewm(span=3, min_periods=0, adjust=True, ignore_na=False).mean()\n  df['EMA_9'] = df['Close'].ewm(span=9, min_periods=0, adjust=True, ignore_na=False).mean()\n  df['diff_EMA'] = df['EMA_3'] - df['EMA_9']\n  df['TEMA'] = (3 * df['EMA_3'] - 3 * df['EMA_3'] * df['EMA_3']) + (df['EMA_3']*df['EMA_3']*df['EMA_3'])\n  return df\n\n# df = compute_ema_and_tema(df)\n# df.tail(5)","4f15c27e":"def moving_average(df, window=5):\n    return df['Close'].rolling(window).mean().shift()","236f0635":"def get_indicator(ser):\n    ser['SMA_5'] = moving_average(ser, 5)\n    ser['SMA_12'] = moving_average(ser, 12)\n    ser['RSI_7'] = compute_rsi(ser, 7)\n    ser['RSI_14'] = compute_rsi(ser, 14)\n    ser = compute_stochastic(ser, 4)\n    ser = compute_BB(ser)\n    ser = compute_ema_and_tema(ser)\n    ser = MACD(ser)\n    return ser\n\ndf = get_indicator(df)\ndf = df.set_index('Date')\ndf.tail(5)","4c43f0e9":"# Chart drawing\nimport plotly as py\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n# Show charts when running kernel\ninit_notebook_mode(connected=True)\n\n# Change default background color for all visualizations\n#fig.update_yaxes()\nlayout=go.Layout(paper_bgcolor='rgba(255,255,2555,0.5)', plot_bgcolor='rgba(250,250,250,0.8)', autosize=True)\nfig = go.Figure(layout=layout)\ntemplated_fig = pio.to_templated(fig)\npio.templates['my_template'] = templated_fig.layout.template\npio.templates.default = 'my_template'\n\n\nimport plotly.io as pio\n\n#pio.renderers.default = 'colab'","16bcf68c":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df.index, y=df.Close, name='price',  marker_color='rgb(152, 0, 0)'))\n\nfig.add_trace(go.Scatter(x=df.index, y=df.BB_Middle_Band, name='BB_mid' , marker_color='rgb(0, 150, 0)'))\nfig.add_trace(go.Scatter(x=df.index, y=df.BB_Lower_Band, mode='lines', name='BB_lower', marker_color='rgb(205, 188, 199)')) \nfig.add_trace(go.Scatter(x=df.index, y=df.BB_Upper_Band, fill='tonexty', name='BB_upper', marker_color='rgb(205, 188, 199)') )\n\nfig.show()","daeae07d":"fig = go.Figure()\n\n\n\nfig.add_trace(go.Candlestick(x=df.index,\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close']))\n\n\n\nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_12'], name='SMA 12', marker_color='rgb(205, 188, 199)')) \nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_5'], name='SMA 5', marker_color='rgb(100, 199, 188)') )\n\n\nfig.show()","b944564d":"\n# fig = go.Figure()\nfig = make_subplots(rows=3, cols=1)\nfig.add_trace(go.Scatter(x=df.index, y=df.Close, name='price',  marker_color='rgb(152, 0, 0)'))\n\nfig.add_trace(go.Scatter(x=df.index, y=df['EMA_12'], name='EMA 12', marker_color='rgb(205, 188, 199)')) \nfig.add_trace(go.Scatter(x=df.index, y=df['EMA_26'], name='EMA 26', marker_color='rgb(100, 199, 188)') )\n\nfig.add_trace(go.Scatter(x=df.index, y=df.MACD, name='MACD' , marker_color='rgb(0, 150, 0)'), row=2, col=1)\n\nfig.add_trace(go.Scatter(x=df.index, y=df.RSI_7, name='RSI_7',  marker_color='rgb(152, 0, 0)'), row=3, col=1)\nfig.add_trace(go.Scatter(x=df.index, y=df.RSI_14, name='RSI_14',  marker_color='rgb(0,152,0)'), row=3, col=1)\nfig.show()","981b6b19":"# fig = go.Figure()\nfig = make_subplots(rows=2, cols=1)\nfig.add_trace(go.Scatter(x=df.index, y=df.Close, name='price',  marker_color='rgb(152, 0, 0)'))\n\nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_12'], name='SMA 12', marker_color='rgb(50, 188, 199)')) \nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_5'], name='SMA 5', marker_color='rgb(80, 0, 188)') )\n\n\nfig.add_trace(go.Scatter(x=df.index, y=df['ST_K'], name='%K', marker_color='rgb(240, 188, 199)'),row=2, col=1) \nfig.add_trace(go.Scatter(x=df.index, y=df['ST_D'], name='%D', marker_color='rgb(100, 199, 188)'), row=2, col=1 )\n\nfig.show()","64179f33":"# Visualization","7938f573":"## Calculation of Triple Exponential Moving Average\u00b6","c6aea0e8":"## RSI","91869123":"# Technical Indicators","d2d9ac7d":"## Bollinger bands\n\nOnce price cross Upper bands (close > Upper bands), a bull trend could be happenning. and vice versa","b1792c2c":"## Bolliger Bands","92c9a0ef":"# Data Loading ","49e3a82c":"## RSI, MACD, and EMAs\n\nThis is a simple way to find futur trends. when the EMA cross themselves, the RSIs > 50.","d24ecb34":"## Stochastic","9419a611":"## Stochastic (%K and %D)","f8f46ae7":"## moving averages","9f819e0d":"## MACD"}}