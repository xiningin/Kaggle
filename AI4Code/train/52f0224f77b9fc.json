{"cell_type":{"d10f2eae":"code","49ed495b":"code","f6cb22e3":"code","26fbce3d":"code","d8671dbb":"code","47accc51":"code","899a86af":"code","789749e9":"code","3ddb6e6c":"code","d8150bf1":"code","0afba6e4":"code","3621c92e":"code","ec319ea0":"code","ea44d080":"code","7ba2140a":"code","f818d7af":"code","1fdc37d1":"code","11c2fa3a":"code","0e369add":"code","6088e752":"code","ef846142":"code","6ed72fcf":"code","d8530e44":"code","1da41a49":"code","f54a0cdc":"code","7d5bf369":"code","ec7f074b":"code","59500d51":"code","bb51e464":"code","04cefa10":"code","15adf8c5":"code","734e20ca":"code","88abc71e":"code","938980aa":"code","919a768a":"code","61b083f4":"markdown","6fe20457":"markdown","2378d3a7":"markdown","fa92c1ac":"markdown","ef12cbb2":"markdown","f8b9c64f":"markdown","2b81a977":"markdown","9d24ad45":"markdown","6382b2cc":"markdown","de0eb86f":"markdown","e4a9eaa7":"markdown","c8f8ab0a":"markdown","8a0b3a3d":"markdown"},"source":{"d10f2eae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import defaultdict\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier","49ed495b":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nsubmission = test[[\"PassengerId\"]]","f6cb22e3":"train","26fbce3d":"train = train.drop_duplicates()","d8671dbb":"print(\"______TRAIN_______\")\nprint(train.info())\nprint(\"______TEST________\")\nprint(test.info())","47accc51":"def clean1(df):\n    \n    Title = []\n    for name in df[\"Name\"]:\n        if \"Mr.\" in name:\n            Title.append(\"Mr\")\n        elif \"Mrs.\" in name:\n            Title.append(\"Mrs\")\n        elif \"Miss.\" in name:\n            Title.append(\"Miss\")\n        elif \"Master.\" in name:\n            Title.append(\"Master\")\n        elif \"Rev.\" in name:\n            Title.append(\"Rev\")\n        elif \"Don.\" in name:\n            Title.append(\"Don\")\n        elif \"Dr.\" in name:\n            Title.append(\"Dr\")\n        elif \"Mme.\" in name:\n            Title.append(\"Miss\")\n        elif \"Ms.\" in name:\n            Title.append(\"Mrs\")\n        elif \"Major.\" in name:\n            Title.append(\"Major\")\n        elif \"Mrs\" in name:\n            Title.append(\"Mrs\")\n        elif \"Mr\" in name:\n            Title.append(\"Mr\")\n        elif \"Mlle.\" in name:\n            Title.append(\"Miss\")\n        elif \"Col.\" in name:\n            Title.append(\"Col\")\n        elif \"Capt.\" in name:\n            Title.append(\"Capt\")\n        elif \"Countess.\" in name:\n            Title.append(\"Countess\")\n        elif \"Jonkheer.\" in name:\n            Title.append(\"Jonkheer\")\n        else:\n            Title.append(\"Other\")\n            \n    df[\"Title\"] = Title\n    \n    df = df.astype({\n        \"Pclass\" : str,\n    })\n\n    df[\"Age\"] = round(df[\"Age\"])\n    \n    df = df.drop(columns = [\"PassengerId\", \"Name\", \"Cabin\"])\n    \n    return df","899a86af":"train = clean1(train)\ntest = clean1(test)","789749e9":"print(\"______TRAIN_______\")\nprint(train.isnull().sum())\nprint(\"______TEST________\")\nprint(test.isnull().sum())","3ddb6e6c":"train[train[\"Embarked\"].isnull()]\n# pd.crosstab(train[\"Embarked\"], train[\"Survived\"])\n# pd.crosstab(train[\"Embarked\"], train[\"Pclass\"])\n# pd.crosstab(train[\"Embarked\"], train[\"Title\"])","d8150bf1":"ind = train[train[\"Embarked\"].isnull()].index\ntrain.loc[ind, \"Embarked\"] = \"S\"","0afba6e4":"test[test[\"Fare\"].isnull()]","3621c92e":"sns.catplot(x = \"Fare\", y = \"Age\", hue = \"Pclass\", data = train)","ec319ea0":"sns.catplot(x = \"Fare\", y = \"Age\", hue = \"Sex\", data = train)","ea44d080":"sns.catplot(x = \"Fare\", y = \"Age\", hue = \"Embarked\", data = train)","7ba2140a":"fare = np.nanmean(train[\"Fare\"][\n    (train[\"Age\"] > 45) & (train[\"Age\"] < 75) & \n    (train[\"Sex\"] == \"male\") & \n    (train[\"Pclass\"] == \"3\") &\n    (train[\"Embarked\"] == \"S\")\n])\nind = test[test[\"Fare\"].isnull()].index\ntest.loc[ind, \"Fare\"] = fare","f818d7af":"sns.catplot(x = \"Embarked\", y = \"Age\", hue = \"Pclass\", kind = \"box\", data = train)","1fdc37d1":"sns.catplot(x = \"Embarked\", y = \"Age\", hue = \"Sex\", kind = \"box\", data = train)","11c2fa3a":"def clean2(df, train):\n    ind = df[df[\"Age\"].isnull()].index\n    for i in ind:\n        emb = df.loc[i][\"Embarked\"]\n        pc = df.loc[i][\"Pclass\"]\n        sex = df.loc[i][\"Sex\"]\n        \n        age = np.nanmedian(train[\"Age\"][(train[\"Embarked\"] == emb) & (train[\"Pclass\"] == pc) & (train[\"Sex\"] == sex)])\n        df.loc[i, \"Age\"] = age\n\n    return(df)","0e369add":"train = clean2(train, train)\ntest = clean2(test, train)","6088e752":"cols = [\"Sex\", \"Embarked\", \"Pclass\"]\n    \ntrain_temp = train[cols]\ntrain_ind = train_temp.index\n    \ntest_temp = test[cols]\ntest_ind = test_temp.index\n    \nenc = OneHotEncoder(drop = \"first\")\n# To avoid multi-collinearlty (dummy variable trap) due to one-hot-encoding, use drop = \"first\"\nenc.fit(train_temp)\n        \ntrain_hot = enc.transform(train_temp).toarray()\ntrain_hot = pd.DataFrame(train_hot, columns = enc.get_feature_names(cols), index = train_ind)\ntrain = train.drop(columns = [\"Sex\"])\ntrain = pd.concat([train, train_hot], axis = 1)\n    \ntest_hot = enc.transform(test_temp).toarray()\ntest_hot = pd.DataFrame(test_hot, columns = enc.get_feature_names(cols), index = test_ind)\ntest = test.drop(columns = [\"Sex\"])\ntest = pd.concat([test, test_hot], axis = 1)","ef846142":"def GetFreqMap(train_data):\n    cols = [\"Embarked\", \"Ticket\", \"Title\", \"Pclass\"]\n    MyMap = {}\n    for col in cols:\n        temp = {}\n        temp = train_data[col].value_counts()\/train_data.shape[0]\n        temp = defaultdict(lambda : 0, temp)\n        MyMap[col] = temp\n    \n    return MyMap ","6ed72fcf":"def GetMeanMap(train_data):\n    cols = [\"Embarked\", \"Ticket\", \"Title\", \"Pclass\"]\n    MyMap = {}\n    for col in cols:\n        temp = {}\n        categories = train_data[col].value_counts().keys()\n        for cat in categories:\n            n1 = train_data[col][(train_data[col] == cat) & (train_data[\"Survived\"] == 1)].shape[0]\n            n2 = train_data[col][(train_data[col] == cat)].shape[0]\n            temp[cat] = n1\/n2\n        \n        temp = defaultdict(lambda : 0, temp)\n        MyMap[col] = temp\n        \n    return MyMap","d8530e44":"def MapMe(df, FM, MM):\n    temp_freq = pd.DataFrame()\n    temp_mean = pd.DataFrame()\n    \n    cols = [\"Embarked\", \"Ticket\", \"Title\", \"Pclass\"]\n    for col in cols:\n        temp_freq[col + \"_freq\"] = df[col].map(FM[col])\n        temp_mean[col + \"_mean\"] = df[col].map(MM[col])\n        \n    df = pd.concat([df, temp_freq, temp_mean], axis = 1)\n    df = df.drop(columns = [\"Embarked\", \"Ticket\", \"Title\", \"Pclass\"])\n    \n    return df","1da41a49":"FM = GetFreqMap(train)\nMM = GetMeanMap(train)\ntrain = MapMe(train, FM, MM)\ntest = MapMe(test, FM, MM)","f54a0cdc":"train_data = train.loc[:, train.columns != \"Survived\"]\ntrain_labels = train[[\"Survived\"]]\ntest_data = test\n\n# scaler = MinMaxScaler()\n# scaler.fit(train_data)\n# cols = train_data.columns\n\n# train_ind = train_data.index\n# train_data = scaler.transform(train_data)\n# train_data = pd.DataFrame(train_data, columns = cols, index = train_ind)\n\n# test_ind = test_data.index\n# test_data = scaler.transform(test_data)\n# test_data = pd.DataFrame(test_data, columns = cols, index = test_ind) ","7d5bf369":"plt.figure(figsize = (15, 15))\nsns.heatmap(train_data.corr(), cmap = \"YlGnBu\", annot = True)","ec7f074b":"train_data = train_data.drop(columns = [\"Pclass_3\", \"Embarked_S\"])\ntest_data = test_data.drop(columns = [\"Pclass_3\", \"Embarked_S\"])","59500d51":"def ModelAccuracy(model, train_data, train_labels):\n    train_data, test_data, train_labels, test_labels = train_test_split(\n        train_data, \n        train_labels, \n        test_size = 0.2,\n    )\n    \n    if model == \"RandomForest\":\n        classifier = RandomForestClassifier(n_estimators = 100)\n    elif model == \"DecisionTree\":\n        classifier = DecisionTreeClassifier()\n    elif model == \"XGBoost\":\n        classifier = XGBClassifier()\n    elif model == \"Logistic\":\n        classifier = LogisticRegression(solver = \"lbfgs\") \n    elif model == \"SVM\":\n        classifier = SVC(gamma = \"scale\")\n    elif model == \"GradientBoost\":\n        classifier = GradientBoostingClassifier()\n    elif model == \"AdaBoost\":\n        classifier = AdaBoostClassifier()\n    elif model == \"LDA\":\n        classifier = LinearDiscriminantAnalysis()\n    elif model == \"QDA\":\n        classifier = QuadraticDiscriminantAnalysis()\n    elif model == \"CatBoost\":\n        classifier = CatBoostClassifier()\n\n    classifier.fit(train_data, train_labels.values.ravel())\n    prediction = classifier.predict(test_data)\n\n    accuracy = metrics.accuracy_score(test_labels, prediction)\n    return accuracy","bb51e464":"models = [\"RandomForest\", \"DecisionTree\", \"XGBoost\", \"Logistic\", \"SVM\", \"GradientBoost\", \n          \"AdaBoost\", \"LDA\", \"QDA\", \"CatBoost\"]\n\nperformance_table = []\nfor i in range(1):\n    scores = []\n    for model in models:\n        accuracy = ModelAccuracy(model, train_data, train_labels)\n        scores.append(accuracy)\n    performance_table.append(scores)\n\nperformance_table = pd.DataFrame(performance_table, columns = models)","04cefa10":"performance_table","15adf8c5":"plt.style.use('ggplot')\nplt.style.use('seaborn-white')\n\npalette = plt.get_cmap(\"Set1\")\n\nfor i, column in enumerate(performance_table):\n    plt.plot(performance_table[column], color = palette(i), label = column)\n\nplt.legend(loc = 2, ncol = 2, bbox_to_anchor = (0,1.5))\nplt.title(\"Line Plot\")\nplt.xlabel(\"Run\")\nplt.ylabel(\"Accuracy\")","734e20ca":"performance_table.describe()","88abc71e":"df = performance_table.describe()\nmean_list = list(df.loc[\"mean\", :])\n\npalette = plt.get_cmap(\"Set1\")\n\nfor i, mean in enumerate(mean_list):\n    plt.axhline(y = mean, color = palette(i), label = models[i], linewidth = 2)\n    \nplt.legend(loc = 2, ncol = 2, bbox_to_anchor = (0,1.5))\nplt.xticks([])\nplt.ylim(min(mean_list) - 0.01, max(mean_list) + 0.01)\nplt.ylabel(\"Accuracy\")    ","938980aa":"classifier = CatBoostClassifier()\nclassifier.fit(train_data, train_labels.values.ravel())\nprediction = classifier.predict(test_data)","919a768a":"submit = pd.DataFrame(list(zip(submission[\"PassengerId\"], prediction)), columns = [\"PassengerId\", \"Survived\"])\nsubmit[\"Survived\"] = submit[\"Survived\"].map({\n    1.0 : 1,\n    0.0 : 0,\n})\nsubmit.to_csv(\"submit.csv\", index = False)","61b083f4":"Clean Data\n* Check for collinearity","6fe20457":"Embarked is likely \"S\" for both","2378d3a7":"We may take Fare = average Fare of passengers with:\n1. 45<Age<75\n2. Sex = male\n3. Pclass = 3\n4. Embarked = S","fa92c1ac":"Cleaning Data\n* Age, Embarked and Fair may be filled using some patterns","ef12cbb2":"We may take Age = median Age of passengers with same:\n1. Embarked\n2. Pclass\n3. Sex","f8b9c64f":"# Beginner's Approach to Titanic Dataset Analysis. Upvote if you like it! ","2b81a977":"Cleaning Data \n* PassengerID may be dropped.\n* Pclass may be made string.\n* Title may be extracted from Name and then Name may be dropped.\n* Age may be rounded.\n* Cabin may be dropped.","9d24ad45":"Reading","6382b2cc":"Libraries","de0eb86f":"Modeling","e4a9eaa7":"Clean Data\n* Sex may be one-hot encoded.\n* Embarked may be one-hot & frequency encoded.\n* Ticket may be frequency encoded.\n* Title may be frequency encoded.\n* Pclass may be one-hot & frequency encoded.","c8f8ab0a":"Removing Pclass_3 and Embarked_S","8a0b3a3d":"Exploring"}}