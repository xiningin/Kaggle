{"cell_type":{"02565339":"code","b4549bc3":"code","f5f2628c":"code","398a85c7":"code","fc218280":"code","fe352224":"code","787039ba":"code","3f022da2":"code","2691f1a6":"code","f523874d":"markdown","40cbebb3":"markdown","34636bb5":"markdown","e6536e01":"markdown","1f08d34d":"markdown","159f487c":"markdown","21252de6":"markdown","3d6585d1":"markdown","4e7a2ad8":"markdown","130404e7":"markdown","4e547d1e":"markdown"},"source":{"02565339":"import numpy as np # \u6570\u7ec4\u5e38\u7528\u5e93\nimport pandas as pd # \u8bfb\u5165csv\u5e38\u7528\u5e93\nimport matplotlib.pyplot as plt # \u753b\u56fe\u5e38\u7528\u5e93","b4549bc3":"data_dir = \"..\/input\/\"\n# a function to load data and show some information of data\ndef load_data(data_dir, data_rows):\n    data = pd.read_csv(data_dir + \"train.csv\", header = 0, sep = ',')\n    print(data.head())\n    print(data.shape)\n    x_train = data.values[0:data_rows, 1:]\n    y_train = data.values[0:data_rows, 0]\n    x_test = pd.read_csv(data_dir + \"test.csv\", header = 0, sep = ',').values\n    print(x_test.shape)\n    return x_train, y_train, x_test\n\ndata_rows = 5000\norigin_x_train, origin_y_train, origin_x_test = load_data(data_dir, data_rows)\n\n# for origin test data, we just take first 300 rows\ntest_rows = 300\norigin_x_test = origin_x_test[0: test_rows]\nprint(origin_x_train.shape, origin_y_train.shape, origin_x_test.shape)","f5f2628c":"# given index, show the number picture\npic_index = 222\nprint(\"label = {}\".format(origin_y_train[pic_index]))\nplt.imshow(origin_x_train[pic_index].reshape((28, 28)))\nplt.axis(\"off\")\nplt.show()\n\n# now we show more pics in rows \nrows = 6\nlabels = [str(i) for i in range(10)]\nprint(labels)\nfor index, label in enumerate(labels):\n    indices = np.nonzero([i == index for i in origin_y_train])[0]\n    indices = np.random.choice(indices, rows)\n    for i, v in enumerate(indices):\n        id = i * len(labels) + index + 1\n        plt.subplot(rows, len(labels), id)\n        plt.imshow(origin_x_train[v].reshape((28, 28)))\n        plt.axis(\"off\")\n        if i == 0:\n            plt.title(label)\n\nplt.show()","398a85c7":"from sklearn.model_selection import train_test_split\nx_train, x_vali, y_train, y_vali = train_test_split(origin_x_train, origin_y_train, test_size = 0.2, random_state = 0)\nprint(x_train.shape, x_vali.shape, y_train.shape, y_vali.shape)","fc218280":"import time\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# we run test on k from 1 to 8\nk_range = range(1, 9)\nscores = list()\nfor k in k_range:\n    start = time.time()\n    print(\"k = {} now start...\".format(k))\n    \n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(x_train, y_train)\n    y_pred = knn.predict(x_vali)\n    \n    accuracy = accuracy_score(y_vali, y_pred)\n    scores.append(accuracy)\n    print(confusion_matrix(y_vali, y_pred))\n    print(classification_report(y_vali, y_pred))\n    \n    end = time.time()\n    print(\"k = {} now end, time spent = {}\".format(k, end - start))\n\nprint(scores)","fe352224":"plt.title(\"Accuracy on k\")\nplt.plot(k_range, scores)\nplt.xlabel(\"k\")\nplt.ylabel(\"accuracy\")\nplt.show()\n\nsorted_scores_indices = np.array(scores).argsort()\nbest_accuracy = scores[sorted_scores_indices[-1]]\nbest_k = sorted_scores_indices[-1] + 1\nprint(\"best accuracy = {}, best k = {}\".format(best_accuracy, best_k))","787039ba":"start = time.time()\nknn = KNeighborsClassifier(n_neighbors = best_k)\nknn.fit(origin_x_train, origin_y_train)\nfinal_y_pred = knn.predict(origin_x_test)\nend = time.time()\nprint(\"calculations finished, time spent = {}\".format(end - start))\nprint(final_y_pred)","3f022da2":"# pick an index within 300, and see the picture\nindex = 66\nprint(\"prediction = {}\".format(final_y_pred[index]))\nplt.imshow(origin_x_test[index].reshape((28, 28)))\nplt.axis(\"off\")\nplt.show()","2691f1a6":"df = pd.DataFrame({\"ImageId\": range(1, len(final_y_pred) + 1), \"Label\":final_y_pred})\nprint(df.head())\ndf.to_csv(\"Digit_Recognizer_Result.csv\", header = True, index = False)","f523874d":"\n\u4e0b\u9762\u8fdb\u884cKNN\u6a21\u578b\u8bad\u7ec3\n\u5982\u679c\u662f\u5927\u6570\u636e\uff0c\u9700\u89811.5\u5c0f\u65f6\u8dd1\u5b8c","40cbebb3":"# \u9a8c\u8bc1\u4e00\u4e0b\u7ed3\u679c","34636bb5":"\n\u5c55\u793a\u90e8\u5206\u6570\u636e\u770b\u770b\u56fe\u7247\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002\uff08\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u770b\uff09","e6536e01":"\u628a\u539f\u672c\u7684\u8bad\u7ec3\u6570\u636e\u62c6\u5206\u6210\u4e3a20%\u6d4b\u8bd5\u96c6\uff088400\u4e2a\uff09\uff0c80%\u8bad\u7ec3\u96c6\uff0833600\u4e2a\uff09\n\n\u600e\u4e48\u68372\/8\u5206","1f08d34d":"# \u4e5d\u7ae0 KNN \u6559\u7a0b \n\nhttps:\/\/www.kaggle.com\/c\/digit-recognizer","159f487c":"\u4ece `..\/train.csv` and `..\/test.csv` \u6587\u4ef6\u91cc\u9762\u8bfb\u5165 numpy arrays.\n\n\u5bfc\u5165\u6570\u636e\u540e\u6253\u5370shape\u67e5\u770b\u662f\u5426\u6570\u636e\u662f\u5426\u5b8c\u6574\n\n\u5bfc\u5165\u6570\u636e\u5dee\u4e0d\u591a10\u79d2","21252de6":"# \u7528\u56fe\u50cf\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6","3d6585d1":"# \u901a\u8fc7\u8bad\u7ec3\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u597d\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u6253\u5370\u51faAccuracy\u7684\u56fe","4e7a2ad8":"# \u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u7ed3\u679c\n","130404e7":"# \u5bfc\u5165\u6570\u636e","4e547d1e":"# \u9884\u6d4b\u4e4b\u540e\uff0c\u6211\u4eec\u628a\u9884\u6d4b\u597d\u7684\u6570\u636e\u6253\u5370\u5230\u6587\u4ef6Digit_Recogniser_Result.csv\u91cc\u9762\u3002\n# \u6253\u5370\u7684\u683c\u5f0f\u662f\u5982\u4e0b\n\n* ImageId\tLabel\n* 1\t2\n* 2\t0\n* 3\t9\n* 4\t9"}}