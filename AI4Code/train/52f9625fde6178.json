{"cell_type":{"2aa468f6":"code","c6cff73f":"code","2c4a63b1":"code","ae69d994":"code","b5890cac":"code","173c47d1":"code","4020497d":"code","8e8acf82":"code","786f23d7":"code","00e64b52":"code","f6178194":"code","c600c8d3":"code","287f7a7a":"code","9e4bada4":"code","6553889e":"code","3bc05f41":"code","cf098ec2":"code","225e1380":"code","261a1882":"code","d205012b":"code","7a2537c1":"code","77502fb9":"code","4174af04":"code","383b15e6":"code","849fc4e0":"code","cc5015c8":"code","3cda4ab9":"code","089110fd":"code","9a55bf6d":"code","bec854e5":"code","d124c2be":"code","71efcfad":"markdown","2cbedd22":"markdown","316ad9cc":"markdown","ef53cc2d":"markdown"},"source":{"2aa468f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6cff73f":"import zipfile\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",\"r\") as z:\n    z.extractall(\".\")\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\",'r') as z:\n    z.extractall(\".\")","2c4a63b1":"import os\ntrain_path = '\/kaggle\/working\/train'\nfilenames = os.listdir(train_path)\ncategories = []\nfor f in filenames:\n    category = f.split(\".\")[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\nprint(len(categories))","ae69d994":"import pandas as pd\ndf = pd.DataFrame({'file':filenames,'category':categories})\ndf.head()","b5890cac":"df['category'].value_counts()","173c47d1":"from keras.preprocessing import image\nimport matplotlib.pyplot as plt\nfor i in range(5):\n    plt.figure(figsize=(10, 10))\n    plt.subplot(2, 3, i+1)\n    img_path = os.path.join(train_path, filenames[i])\n    img = image.load_img(img_path)\n    plt.imshow(img)\nplt.tight_layout()    \nplt.show()","4020497d":"from keras.applications import VGG16\nconv = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\nconv.trainable = False\nconv.summary()","8e8acf82":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Activation, Flatten\nfrom keras.regularizers import l2\nmodel = Sequential()\nmodel.add(conv)\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\nmodel.summary()","786f23d7":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n        rescale=1.\/255,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.5,\n        rotation_range=40,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest'\n)\nval_datagen = ImageDataGenerator(rescale=1.\/255)","00e64b52":"df['category'] = df['category'].map({1:'dog',0:'cat'})\nfrom sklearn.model_selection import train_test_split\ntrain, validate = train_test_split(df, train_size=0.8)","f6178194":"train_generator = datagen.flow_from_dataframe(train,\n                                              directory=train_path,\n                                              x_col='file',\n                                              y_col='category',\n                                              target_size=(224, 224),\n                                              batch_size=32,\n                                              class_mode='binary')\nvalidation_generator = val_datagen.flow_from_dataframe(validate,\n                                        directory=train_path,\n                                        x_col='file',\n                                        y_col='category',\n                                        target_size=(224, 224),\n                                        batch_size=32,\n                                        class_mode='binary')","c600c8d3":"sample = df.sample(n=1)\nsample_generator = datagen.flow_from_dataframe(sample,\n                                               directory=train_path,\n                                               x_col='file',\n                                               y_col='category',\n                                               target_size=(224,224),\n                                               class_mode='categorical')\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    for i,l in sample_generator:\n        plt.imshow(i[0])\n        break\nplt.show()      ","287f7a7a":"history = model.fit(train_generator, validation_data=validation_generator, batch_size=32, epochs=10, verbose=1)","9e4bada4":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc)+1)\nplt.figure()\nplt.plot(epochs, acc,'r-', label='Training Accuracy')\nplt.plot(epochs, val_accuracy, 'b-', label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Train-Validation-Accuracy-Curve')\nplt.ylim([0,1])\nplt.legend()\nplt.figure()\nplt.plot(epochs,loss, 'r-', label='Training Loss')\nplt.plot(epochs, val_loss,'b-', label='Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Train-Validation-loss-Curve')\nplt.legend()\nplt.ylim([0,1])\nplt.show()","6553889e":"train_layer = False\nfor i in conv.layers:\n    if i.name == 'block5_conv1':\n        train_layer = True\n    if train_layer == True:\n        i.trainable = True\n        print(i,' :yes')\n    else:\n        print(i,' :no')","3bc05f41":"from keras import optimizers\nmodel.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(lr=1e-4), metrics=['accuracy'])","cf098ec2":"history_fine = model.fit(train_generator, validation_data=validation_generator, batch_size=32, epochs=10, verbose=1)","225e1380":"import matplotlib.pyplot as plt\nacc = history_fine.history['accuracy']\nval_accuracy = history_fine.history['val_accuracy']\nloss = history_fine.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc)+1)\nplt.figure()\nplt.plot(epochs, acc,'r-', label='Training Accuracy')\nplt.plot(epochs, val_accuracy, 'b-', label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Train-Validation-Accuracy-Curve')\nplt.ylim([0,1])\nplt.legend()\nplt.figure()\nplt.plot(epochs,loss, 'r-', label='Training Loss')\nplt.plot(epochs, val_loss,'b-', label='Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Train-Validation-loss-Curve')\nplt.legend()\nplt.ylim([0,1])\nplt.show()","261a1882":"test_path='\/kaggle\/working\/test1'\ntest_file=os.listdir('\/kaggle\/working\/test1')","d205012b":"test_df=pd.DataFrame({'file':test_file})\ntest_df.head()","7a2537c1":"test_generator = val_datagen.flow_from_dataframe(test_df,directory=test_path,\n                                                 x_col='file',\n                                                 y_col=None,\n                                                 class_mode=None,\n                                                 target_size=(224,224),\n                                                 batch_size=32,\n                                                 shuffle=False)","77502fb9":"predict=model.predict(test_generator)","4174af04":"sub = np.around(predict).astype(int)","383b15e6":"img = image.load_img(os.path.join(test_path,test_file[0]))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(str(predict[0]))\nplt.subplot(1, 2, 2)\nimg = image.load_img(os.path.join(test_path,test_file[1]))\nplt.imshow(img)\nplt.title(str(predict[1]))\nplt.show()","849fc4e0":"submission = test_df.copy()\nsubmission['id'] = submission['file'].str.split(\".\").str[0]\nsubmission['label'] = sub\nsubmission.drop(['file'], axis=1, inplace=True)\nsubmission['id'] = submission['id'].astype('int')\nsubmission = submission.sort_values(by=['id'])\nsubmission.to_csv('submission.csv', index=False)","cc5015c8":"submission.head()","3cda4ab9":"print(\"Your submission was successfully saved!\")","089110fd":"!rm -rf train","9a55bf6d":"!rm -rf test1","bec854e5":"ls -a","d124c2be":"model.save_weights(\"model.h5\")","71efcfad":"# Visualisation","2cbedd22":"# Pre-processing data","316ad9cc":"# Pre-train model","ef53cc2d":"!rm -rf \"\/kaggle\/working\/train\""}}