{"cell_type":{"f3dd2a23":"code","4d782ef5":"code","77936997":"code","ec720dc4":"code","04e1988e":"code","f82c163d":"code","e282f1f6":"code","a82ccd97":"code","2b694608":"code","c50371b0":"code","7c4690ff":"code","c0989366":"code","aec347d4":"code","6858e60f":"code","1b09fcd8":"code","9023da17":"code","d6a685e7":"code","a24fd72f":"code","7de02581":"code","5fcd1e0e":"markdown","def82671":"markdown","26006351":"markdown","39d49e55":"markdown","d3c30c0b":"markdown","cc8a2ecc":"markdown","fbdc689d":"markdown","65487033":"markdown"},"source":{"f3dd2a23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","4d782ef5":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file_path = os.path.join(dirname, filename)\n        if file_path.endswith('.csv'):\n            df = pd.read_csv(file_path)\n            if 'state' in df.columns and 'county' in df.columns:\n                print(file_path)\n                print(df.columns)\n\n# Any results you write to the current directory are saved as output.os.path.join(dirname, filename)","77936997":"input_dir = '\/kaggle\/input'","ec720dc4":"file_path = input_dir + '\/uncover\/UNCOVER\/New_York_Times\/covid-19-county-level-data.csv'\ncovid_19_county_level_data = pd.read_csv(file_path)\nmn_data = covid_19_county_level_data[covid_19_county_level_data.loc[:, 'state'] == 'Minnesota']\nmn_data.loc[:, 'date'] = pd.to_datetime(mn_data['date'])","04e1988e":"recent_date = mn_data['date'].max()\nrecent_date_rows = mn_data[\"date\"] == recent_date\nmn_recent_data = mn_data.loc[recent_date_rows]\nmn_recent_data = mn_recent_data.dropna(subset=['fips'])\nmn_recent_data.loc[:, 'fips'] = mn_recent_data['fips'].astype(int)","f82c163d":"recent_date","e282f1f6":"from IPython.display import display, HTML\nprint(\"Minnesota data by county:\")\ndisplay(mn_recent_data)","a82ccd97":"date_agg_df = mn_data.groupby(['date']).agg({'cases': 'sum','deaths': 'sum'}).reset_index()","2b694608":"plt.plot(date_agg_df['date'], date_agg_df['cases'], 'y', label='cases')\nplt.plot(date_agg_df['date'], date_agg_df['deaths'], 'r', label='deaths')\nplt.xlabel('date')\nplt.ylabel('number')\nplt.xticks(rotation=70)\nplt.legend(loc='upper left');","c50371b0":"cdcs_file_path = input_dir + '\/uncover\/UNCOVER\/esri_covid-19\/esri_covid-19\/cdcs-social-vulnerability-index-svi-2016-overall-svi-county-level.csv'\ncdcs_social_vulnerability_index = pd.read_csv(cdcs_file_path)\nmn_cdcs_social_vulnerability_index = cdcs_social_vulnerability_index[cdcs_social_vulnerability_index['state'] == 'MINNESOTA']\nmn_cdcs_social_vulnerability_index.head","7c4690ff":"print(\"CDCS social vulnerability data by county:\")\ndisplay(mn_cdcs_social_vulnerability_index[['county', 'fips', 'area_sqmi', 'e_totpop']])","c0989366":"merged_inner = pd.merge(left=mn_recent_data, right=mn_cdcs_social_vulnerability_index, left_on='fips', right_on='fips')","aec347d4":"merged_inner = merged_inner.drop(['county_y'], axis=1)\nmerged_inner = merged_inner.rename(columns={\"county_x\": \"county\"})\nfor col in merged_inner.columns: \n    print(col) ","6858e60f":"print(\"Data by county:\")\nmerged_inner['cases per capita'] = merged_inner['cases']\/merged_inner['e_totpop']\nmerged_inner['deaths per ten thousand'] = 10000 * merged_inner['deaths'] \/ merged_inner['e_totpop']\ndisplay(merged_inner[['county', 'cases', 'cases per capita', 'deaths', 'deaths per ten thousand', 'area_sqmi', 'e_totpop']])","1b09fcd8":"import geopandas as gpd","9023da17":"world = gpd.read_file(cdcs_file_path)","d6a685e7":"df['date'] = pd.to_datetime(df['date'], format='%Y%m%d', errors='ignore')\ndf.head()","a24fd72f":"plt.plot(df['date'], df['positive'], 'y', label='positive')\nplt.plot(df['date'], df['negative'], 'r', label='negative')\nplt.xlabel('date')\nplt.ylabel('number')\nplt.xticks(rotation=70)\nplt.legend(loc='upper left');","7de02581":"plt.plot(df['date'], df['hospitalizedCurrently'], 'r', label='hospitalizedCurrently')\nplt.xlabel('date')\nplt.ylabel('number')\nplt.xticks(rotation=70)\nplt.legend(loc='upper left');","5fcd1e0e":"\nDate of most recent data:\n","def82671":"cdcs-social-vulnerability-index-svi-2016-overall-svi-county-level\n-----------------------------------------------------------------","26006351":"\n\nimport requests\n\nr = requests.get('https:\/\/covidtracking.com\/api\/v1\/states\/MN\/daily.json')\nx = r.json()\ndf = pd.DataFrame(x)","39d49e55":"Which populations are at risk of contracting COVID-19?\n======================================================","d3c30c0b":"#### MN Historical Data","cc8a2ecc":"### From the [COVID Tracking Project Data API](https:\/\/covidtracking.com\/api)","fbdc689d":"Data from [CDC SVI 2016 Documentation](https:\/\/svi.cdc.gov\/Documents\/Data\/2016_SVI_Data\/SVI2016Documentation.pdf)","65487033":"covid-19-county-level-data\n--------------------------"}}