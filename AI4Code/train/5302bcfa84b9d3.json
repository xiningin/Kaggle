{"cell_type":{"1e76cef3":"code","8ed0e63d":"code","50e77812":"code","ac9573a3":"code","7a211187":"code","1c8b9798":"code","1333f759":"code","c9a0f8a0":"code","0fb4f324":"code","d2a42a73":"code","22de2767":"code","89038c8e":"code","1ea4fe69":"code","fa143ca2":"code","fa05757d":"code","522f20ff":"code","a3a9edec":"code","f8ac285f":"markdown"},"source":{"1e76cef3":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.utils import to_categorical, plot_model","8ed0e63d":"from tensorflow.keras.datasets import cifar10\n\n(X_train, y_train), (X_test, y_test) = cifar10.load_data()","50e77812":"X_train.shape","ac9573a3":"labels = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']\nnum_classes = 10","7a211187":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X_test[i])\n    plt.title(labels[int(y_test[i])])","1c8b9798":"X_train = X_train \/ 255\nX_test = X_test \/ 255","1333f759":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3), activation='relu'))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","c9a0f8a0":"model.summary()","0fb4f324":"plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True, rankdir='TB', expand_nested=True)","d2a42a73":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=250, verbose=1)","22de2767":"model.evaluate(X_test, y_test, verbose=0)","89038c8e":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","1ea4fe69":"plot_scores(train)","fa143ca2":"y_cnn = model.predict_classes(X_test)","fa05757d":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (i<51):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = y_cnn[j].argmax(axis=-1)\n        plt.title('Guess: %s \\n Correct: %s' % (labels[int(y_cnn[j])], labels[int(y_test[j])]))\n        i+=1","522f20ff":"model.save('mnist_cnn.h5')\nnew_model = load_model('mnist_cnn.h5')\nnew_model.summary()","a3a9edec":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","f8ac285f":"Il y a 50000 images, chacune 32x32x3, alors 3072 donn\u00e9s d'input par image"}}