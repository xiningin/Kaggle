{"cell_type":{"a8d19ae4":"code","9d736c88":"code","ca813373":"code","5a56848a":"code","2afd207c":"code","c66e0127":"code","27032c87":"code","129fa2e7":"code","88751680":"code","74494d8e":"code","127e0b2c":"code","b77791b6":"code","05eeae77":"code","94a9c00b":"code","0580cbb4":"code","395dc970":"code","a7600a0d":"code","2610ce23":"code","6e7612c3":"code","2ca1031e":"code","92bd9dbe":"code","4c449721":"code","283a791b":"code","b6781930":"code","bfa06108":"code","fb19e135":"code","37fead64":"code","d13ba7b6":"code","698e6b3c":"code","a7edec1d":"code","39754d5a":"markdown","73502b40":"markdown","b9a8a99c":"markdown","b9181251":"markdown","2107e766":"markdown","053711ae":"markdown","29951aff":"markdown","a7685d05":"markdown","12dbc084":"markdown","89794dcb":"markdown","8d314e40":"markdown","2c817b47":"markdown","9291e84b":"markdown"},"source":{"a8d19ae4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d736c88":"import nltk\nfrom os import getcwd\n\nnltk.download('twitter_samples')\nnltk.download('stopwords')","ca813373":"filePath = f\"{getcwd()}\/..\/tmp2\/\"\nnltk.data.path.append(filePath)","5a56848a":"from nltk.corpus import twitter_samples \n\n# from utils import process_tweet, build_freqs","2afd207c":"import re\nimport string\nimport numpy as np","c66e0127":"from nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import TweetTokenizer","27032c87":"def process_tweet(tweet):\n    \"\"\"Process tweet function.\n    Input:\n        tweet: a string containing a tweet\n    Output:\n        tweets_clean: a list of words containing the processed tweet\n\n    \"\"\"\n    stemmer = PorterStemmer()\n    stopwords_english = stopwords.words('english')\n    # remove stock market tickers like $GE\n    tweet = re.sub(r'\\$\\w*', '', tweet)\n    # remove old style retweet text \"RT\"\n    tweet = re.sub(r'^RT[\\s]+', '', tweet)\n    # remove hyperlinks    \n    tweet = re.sub(r'https?:\/\/[^\\s\\n\\r]+', '', tweet)\n    # remove hashtags\n    # only removing the hash # sign from the word\n    tweet = re.sub(r'#', '', tweet)\n    # tokenize tweets\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n    tweet_tokens = tokenizer.tokenize(tweet)\n\n    tweets_clean = []\n    for word in tweet_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n                word not in string.punctuation):  # remove punctuation\n            # tweets_clean.append(word)\n            stem_word = stemmer.stem(word)  # stemming word\n            tweets_clean.append(stem_word)\n\n    return tweets_clean\n\ndef build_freqs(tweets, ys):\n    \"\"\"Build frequencies.\n    Input:\n        tweets: a list of tweets\n        ys: an m x 1 array with the sentiment label of each tweet\n            (either 0 or 1)\n    Output:\n        freqs: a dictionary mapping each (word, sentiment) pair to its\n        frequency\n    \"\"\"\n    # Convert np array to list since zip needs an iterable.\n    # The squeeze is necessary or the list ends up with one element.\n    # Also note that this is just a NOP if ys is already a list.\n    yslist = np.squeeze(ys).tolist()\n\n    # Start with an empty dictionary and populate it by looping over all tweets\n    # and over all processed words in each tweet.\n    freqs = {}\n    for y, tweet in zip(yslist, tweets):\n        for word in process_tweet(tweet):\n            pair = (word, y)\n            if pair in freqs:\n                freqs[pair] += 1\n            else:\n                freqs[pair] = 1\n\n    return freqs","129fa2e7":"# select the set of positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')","88751680":"print(len(all_positive_tweets))\nlen(all_negative_tweets)","74494d8e":"train_pos = all_positive_tweets[:4000]\ntest_pos = all_positive_tweets[4000:]\ntrain_neg = all_negative_tweets[:4000]\ntest_neg = all_negative_tweets[4000:]\n\ntrain_x = train_pos + train_neg \ntest_x = test_pos + test_neg","127e0b2c":"train_y = np.append(np.ones((len(train_pos), 1)), np.zeros((len(train_neg), 1)), axis=0)\ntest_y = np.append(np.ones((len(test_pos), 1)), np.zeros((len(test_neg), 1)), axis=0)","b77791b6":"# Print the shape train and test sets\nprint(\"train_y.shape = \" + str(train_y.shape))\nprint(\"test_y.shape = \" + str(test_y.shape))","05eeae77":"# create frequency dictionary\nfreqs = build_freqs(train_x, train_y)\n\n# check the output\nprint(\"type(freqs) = \" + str(type(freqs)))\nprint(\"len(freqs) = \" + str(len(freqs.keys())))","94a9c00b":"# test the function below\nprint('This is an example of a positive tweet: \\n', train_x[0])\nprint('\\nThis is an example of the processed version of the tweet: \\n', process_tweet(train_x[0]))","0580cbb4":"def sigmoid(z): \n    '''\n    Input:\n        z: is the input (can be a scalar or an array)\n    Output:\n        h: the sigmoid of z\n    '''\n    # calculate the sigmoid of z\n    h = 1\/(1+np.exp(-z))\n    \n    return h","395dc970":"# Testing function \nif (sigmoid(0) == 0.5):\n    print('SUCCESS!')\nelse:\n    print('Oops!')\n\nif (sigmoid(4.92) == 0.9927537604041685):\n    print('CORRECT!')\nelse:\n    print('Oops again!')","a7600a0d":"# verify that when the model predicts close to 1, but the actual label is 0, the loss is a large positive value\n-1 * (1 - 0) * np.log(1 - 0.9999) # loss is about 9.2","2610ce23":"# verify that when the model predicts close to 0 but the actual label is 1, the loss is a large positive value\n-1 * np.log(0.0001) # loss is about 9.2","6e7612c3":"def gradientDescent(x, y, theta, alpha, num_iters):\n    '''\n    Input:\n        x: matrix of features which is (m,n+1)\n        y: corresponding labels of the input matrix x, dimensions (m,1)\n        theta: weight vector of dimension (n+1,1)\n        alpha: learning rate\n        num_iters: number of iterations you want to train your model for\n    Output:\n        J: the final cost\n        theta: your final weight vector\n    Hint: you might want to print the cost to make sure that it is going down.\n    '''\n    # get 'm', the number of rows in matrix x\n    m = len(x)\n    \n    for i in range(0, num_iters):\n        \n        # get z, the dot product of x and theta\n        z = np.dot(x,theta)\n        \n        # get the sigmoid of z\n        h = 1\/(1+np.exp(-z))\n        \n        # calculate the cost function\n        J = -(1\/m)*(np.dot(y.T,np.log(h))+np.dot((1-y).T,np.log(1-h)))\n\n        # update the weights theta\n        theta = theta - ((alpha\/m)*np.dot(x.T,(h-y)))\n        \n    J = float(J)\n    return J, theta","2ca1031e":"# Check the function\n# Construct a synthetic test case using numpy PRNG functions\nnp.random.seed(1)\n# X input is 10 x 3 with ones for the bias terms\ntmp_X = np.append(np.ones((10, 1)), np.random.rand(10, 2) * 2000, axis=1)\n# Y Labels are 10 x 1\ntmp_Y = (np.random.rand(10, 1) > 0.35).astype(float)\n\n# Apply gradient descent\ntmp_J, tmp_theta = gradientDescent(tmp_X, tmp_Y, np.zeros((3, 1)), 1e-8, 700)\nprint(f\"The cost after training is {tmp_J:.8f}.\")\nprint(f\"The resulting vector of weights is {[round(t, 8) for t in np.squeeze(tmp_theta)]}\")","92bd9dbe":"def extract_features(tweet, freqs, process_tweet=process_tweet):\n    '''\n    Input: \n        tweet: a list of words for one tweet\n        freqs: a dictionary corresponding to the frequencies of each tuple (word, label)\n    Output: \n        x: a feature vector of dimension (1,3)\n    '''\n    # process_tweet tokenizes, stems, and removes stopwords\n    word_l = process_tweet(tweet)\n    \n    # 3 elements in the form of a 1 x 3 vector\n    x = np.zeros((1, 3)) \n    \n    #bias term is set to 1\n    x[0,0] = 1 \n    \n    # loop through each word in the list of words\n    for word in word_l:\n        \n        # increment the word count for the positive label 1\n        x[0,1] += freqs.get((word, 1.0),0)\n        \n        # increment the word count for the negative label 0\n        x[0,2] += freqs.get((word, 0.0),0)\n    assert(x.shape == (1, 3))\n    return x","4c449721":"tmp1 = extract_features(train_x[0], freqs)\nprint(tmp1)","283a791b":"# collect the features 'x' and stack them into a matrix 'X'\nX = np.zeros((len(train_x), 3))\nfor i in range(len(train_x)):\n    X[i, :]= extract_features(train_x[i], freqs)\n\n# training labels corresponding to X\nY = train_y\n\n# Apply gradient descent\nJ, theta = gradientDescent(X, Y, np.zeros((3, 1)), 1e-9, 1500)\nprint(f\"The cost after training is {J:.8f}.\")\nprint(f\"The resulting vector of weights is {[round(t, 8) for t in np.squeeze(theta)]}\")","b6781930":"def predict_tweet(tweet, freqs, theta):\n    '''\n    Input: \n        tweet: a string\n        freqs: a dictionary corresponding to the frequencies of each tuple (word, label)\n        theta: (3,1) vector of weights\n    Output: \n        y_pred: the probability of a tweet being positive or negative\n    '''\n    # extract the features of the tweet and store it into x\n    x = extract_features(tweet,freqs)\n    \n    # make the prediction using x and theta\n    y_pred = sigmoid(np.dot(x,theta))\n    \n    return y_pred","bfa06108":"for tweet in ['I am happy', 'I am bad', 'this movie should have been great.', 'great', 'great great', 'great great great', 'great great great great']:\n    print( '%s -> %f' % (tweet, predict_tweet(tweet, freqs, theta))) ","fb19e135":"# Feel free to check the sentiment of your own tweet below\nmy_tweet = 'I am learning :)'\npredict_tweet(my_tweet, freqs, theta)","37fead64":"def test_logistic_regression(test_x, test_y, freqs, theta, predict_tweet=predict_tweet):\n    \"\"\"\n    Input: \n        test_x: a list of tweets\n        test_y: (m, 1) vector with the corresponding labels for the list of tweets\n        freqs: a dictionary with the frequency of each pair (or tuple)\n        theta: weight vector of dimension (3, 1)\n    Output: \n        accuracy: (# of tweets classified correctly) \/ (total # of tweets)\n    \"\"\"\n    # the list for storing predictions\n    y_hat = []\n    \n    for tweet in test_x:\n        # get the label prediction for the tweet\n        y_pred = predict_tweet(tweet, freqs, theta)\n        \n        if y_pred > 0.5:\n            # append 1.0 to the list\n            y_hat.append(1.0)\n        else:\n            # append 0 to the list\n            y_hat.append(0.0)\n\n    # With the above implementation, y_hat is a list, but test_y is (m,1) array\n    # convert both to one-dimensional arrays in order to compare them using the '==' operator\n    accuracy = (y_hat==np.squeeze(test_y)).sum()\/len(test_x)\n    \n    return accuracy","d13ba7b6":"tmp_accuracy = test_logistic_regression(test_x, test_y, freqs, theta)\nprint(f\"Logistic regression model's accuracy = {tmp_accuracy:.4f}\")","698e6b3c":"# Some error analysis done for you\nprint('Label Predicted Tweet')\nfor x,y in zip(test_x,test_y):\n    y_hat = predict_tweet(x, freqs, theta)\n\n    if np.abs(y - (y_hat > 0.5)) > 0:\n        print('THE TWEET IS:', x)\n        print('THE PROCESSED TWEET IS:', process_tweet(x))\n        print('%d\\t%0.8f\\t%s' % (y, y_hat, ' '.join(process_tweet(x)).encode('ascii', 'ignore')))","a7edec1d":"# Feel free to change the tweet below\nmy_tweet = 'This is a ridiculously bright movie. The plot was terrible and I was sad until the ending!'\nprint(process_tweet(my_tweet))\ny_hat = predict_tweet(my_tweet, freqs, theta)\nprint(y_hat)\nif y_hat > 0.5:\n    print('Positive sentiment')\nelse: \n    print('Negative sentiment')","39754d5a":"# Predict with own tweet","73502b40":"- splitting data into 80 - 20 split","b9a8a99c":"## Process tweet","b9181251":"# 5. Error Analysis","2107e766":"## Preparing the data","053711ae":"### For tweet processing","29951aff":"# 2. Extracting features","a7685d05":"## Update weights","12dbc084":"# 1. Logistic Regression","89794dcb":"# Checking performance with test-set","8d314e40":"# 3. Training model","2c817b47":"# 4. Testing Logistic regression","9291e84b":"## Import functions and data"}}