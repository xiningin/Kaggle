{"cell_type":{"e0c2b6ba":"code","6a0bdf9e":"code","304d3c18":"code","297f0750":"code","2258a43f":"code","1267430a":"code","80568a94":"code","56b1efaa":"code","806ad19e":"code","ac4cdf35":"code","c672daa7":"code","fbba45bf":"code","6ac5573f":"code","9f991ccc":"code","08b1cb8a":"code","68de864e":"code","d2fdd161":"code","63905eee":"code","1098b332":"code","0fca4ac4":"code","2d624a64":"code","41dd1ff7":"code","dd77996f":"code","f64dc582":"code","d97af78a":"code","73890219":"code","b8d38db8":"code","ab2b9ce0":"code","2c63e884":"code","66cec62b":"code","6e86c2c8":"code","c425406b":"code","ab7ced69":"code","c03cb84d":"code","e62f99a8":"code","8a812bec":"code","5578eac8":"code","5719d406":"code","6cdd9500":"code","9d5751be":"code","8d04652e":"code","b64bd80a":"code","e4d3c7e5":"code","2f52b2c8":"markdown","2d18497d":"markdown","6cfdb74f":"markdown","cce4bfb6":"markdown","df5da514":"markdown","0840632c":"markdown"},"source":{"e0c2b6ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a0bdf9e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","304d3c18":"#loading data\ndata = pd.read_csv('..\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv')\ndata","297f0750":"data.shape","2258a43f":"data.columns","1267430a":"data.describe()","80568a94":"#cleaning the data\ndata.isnull().sum()","56b1efaa":"cor = data.corr()\ncor","806ad19e":"sns.heatmap(cor, xticklabels = cor.columns, yticklabels = cor.columns, annot = True)","ac4cdf35":"sns.pairplot(data)","c672daa7":"sns.relplot(x = 'Total Cases', y ='Deaths', hue = 'State\/UTs', data = data)","fbba45bf":"sns.relplot(x = 'Total Cases', y ='Active',hue = 'State\/UTs', data = data)","6ac5573f":"sns.relplot(x = 'Total Cases', y ='Discharged',hue = 'State\/UTs', data = data)","9f991ccc":"from geopy.geocoders import Nominatim\n","08b1cb8a":"locations = pd.DataFrame()","68de864e":"locations =  data\nlocations.head()","d2fdd161":"locations =  locations.rename(columns = {\"State\/UTs\":\"State\"})\nlocations.head()","63905eee":"lat_lon=[]\ngeolocator=Nominatim(user_agent=\"app\")\nfor location in locations['State']:\n    location = geolocator.geocode(location)\n    if location is None:\n        lat_lon.append(np.nan)\n    else:    \n        geo=(location.latitude,location.longitude)\n        lat_lon.append(geo)","1098b332":"locations['geo_loc']=lat_lon\n","0fca4ac4":"locations.head()","2d624a64":"State_locations=pd.DataFrame(data['State\/UTs'].value_counts().reset_index())","41dd1ff7":"State_locations.columns=['State','count']\nState_locations.head()","dd77996f":"locations.head()","f64dc582":"locations.shape","d97af78a":"STS_locations=State_locations.merge(locations,on='State',how=\"left\").dropna()\nSTS_locations.head()","73890219":"STS_locations.shape","b8d38db8":"type(STS_locations['geo_loc'][0])","ab2b9ce0":"def generateBaseMap(default_location=[20.59,78.96], default_zoom_start=5):\n    base_map = folium.Map(location=default_location, zoom_start=default_zoom_start)\n    return base_map","2c63e884":"import folium\nfrom folium.plugins import HeatMap\nbasemap=generateBaseMap()","66cec62b":"basemap","6e86c2c8":"STS_locations['geo_loc'][0][0]","c425406b":"STS_locations['geo_loc'][0][1]","ab7ced69":"np.array(STS_locations['geo_loc'])","c03cb84d":"lat,lon=zip(*np.array(STS_locations['geo_loc']))","e62f99a8":"STS_locations['lat']=lat\nSTS_locations['lon']=lon","8a812bec":"STS_locations.head()","5578eac8":"STS_locations[['lat','lon','Active']].values.tolist()","5719d406":"HeatMap(STS_locations[['lat','lon','Active']].values.tolist(),zoom=20,radius=15,cmap=\"Greens\").add_to(basemap)","6cdd9500":"basemap","9d5751be":"HeatMap(STS_locations[['lat','lon','Deaths']].values.tolist(),zoom=20,radius=15,cmap=\"Greens\").add_to(basemap)","8d04652e":"basemap","b64bd80a":"HeatMap(STS_locations[['lat','lon','Discharged']].values.tolist(),zoom=20,radius=15,cmap=\"Greens\").add_to(basemap)","e4d3c7e5":"basemap","2f52b2c8":"### We have found out latitude and longitude of each location listed in the dataset using geopy\n### This is used to plot maps.","2d18497d":"## relationship analysis","6cfdb74f":"## Geographical Analysis For Discharge Cases:","cce4bfb6":"### now combine both the dataframes","df5da514":"## Geographical Analysis For Active Cases:","0840632c":"## Geographical Analysis For Death Cases:"}}