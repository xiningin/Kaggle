{"cell_type":{"804edda9":"code","252b1992":"code","2e01e86b":"code","5b2b579c":"code","a05508f2":"code","b99cd24d":"code","3c916212":"code","e567a5db":"code","f3feda14":"code","f786a121":"code","e61e02a1":"code","2edbcad8":"code","912d61c2":"code","d5582874":"code","9c57d4cf":"code","5d16916c":"code","588378d9":"code","e48c3978":"code","dbc516c3":"code","22a15239":"code","6fe38e87":"code","7023e3a7":"code","192d4c68":"code","6b93efb6":"code","6e1082f2":"code","bef90d20":"code","4e07199e":"markdown","ea285aa2":"markdown","6743fe8b":"markdown","bf669226":"markdown","0760c400":"markdown","c64ba5a5":"markdown","a68b2d45":"markdown","4ab9ec3a":"markdown","1dd84009":"markdown","940235d7":"markdown","a6cb7880":"markdown","b3ce1db7":"markdown"},"source":{"804edda9":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport os\nimport zipfile\nimport random\nimport tensorflow as tf\n\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, BatchNormalization, Flatten, Dense, BatchNormalization, Dropout\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom shutil import copyfile\nfrom sklearn.metrics import accuracy_score, classification_report","252b1992":"np.random.seed(0)\nrandom.seed(0)\ntf.random.set_seed(0)","2e01e86b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5b2b579c":"plt.figure(figsize = (16,16))\nimg = plt.imread('\/kaggle\/input\/sign-language-mnist\/amer_sign2.png')\n_ = plt.imshow(img)","a05508f2":"df_train = pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv')\ndf_train.head()","b99cd24d":"df_train.shape","3c916212":"df_train['label'].nunique()","e567a5db":"df_test = pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv')\ndf_test.head()","f3feda14":"df_test.shape","f786a121":"X_train = df_train.drop(['label'], axis = 1).values\nX_test = df_test.drop(['label'], axis = 1).values\n\ny_train = df_train['label']\ny_test = df_test['label']\n","e61e02a1":"X_train","2edbcad8":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)","912d61c2":"X_train","d5582874":"from sklearn.preprocessing import LabelBinarizer\nlabel_binarizer = LabelBinarizer()\ny_train = label_binarizer.fit_transform(y_train)\ny_test = label_binarizer.transform(y_test)","9c57d4cf":"y_test[:5]","5d16916c":"X_train = X_train \/ 255\nX_test = X_test \/ 255","588378d9":"plt.figure(figsize=(9,7))\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    plt.imshow(X_train[i],cmap='gray')\n    plt.xlabel(np.argmax(y_train[i]))\n    \nplt.show()","e48c3978":"train_datagen = ImageDataGenerator(rotation_range=10, width_shift_range=0.1, height_shift_range=0.1,\n                                   shear_range=0.1,zoom_range=0.1)\n\ntrain_datagen.fit(X_train)\ntrain_generator = train_datagen.flow(X_train, y_train, batch_size= 128)","dbc516c3":"early_stopping = EarlyStopping( monitor = 'val-accuracy', min_delta=0.001, # minimium amount of change to count as an improvement\n                                patience=10, # how many epochs to wait before stopping\n                                restore_best_weights=True\n                              )\n\nstrategy = tf.distribute.MirroredStrategy()\n\nwith strategy.scope():\n    model = Sequential([ Conv2D(128 , (3,3)  , padding = 'same' , activation = 'relu' , input_shape = (28,28,1)),\n                         #BatchNormalization(),\n                         MaxPool2D(2,2),\n                         Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'),\n                         Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'),\n                         MaxPool2D(2,2),\n                         Conv2D(25 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'),\n                         #BatchNormalization(),\n                         MaxPool2D(2,2),\n                         \n                         Flatten(),\n                         Dense(units = 512 , activation = 'relu'),\n                         Dropout(0.2),\n                         Dense(units = 24 , activation = 'softmax')\n                       ])\n    \n    model.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\n                        \nmodel.summary()","22a15239":"history = model.fit(train_generator, validation_data = (X_test, y_test), epochs=50, callbacks = [early_stopping])","6fe38e87":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:,['loss','val_loss']].plot()\nhistory_df.loc[:,['accuracy','val_accuracy']].plot()","7023e3a7":"model.evaluate(X_test, y_test)","192d4c68":"y_pred = np.argmax(model.predict(X_test),axis = 1) \ny_pred\n","6b93efb6":"y_true = np.argmax(y_test, axis =1)\ny_true","6e1082f2":"print ( 'Model Accuracy = ', np.round(accuracy_score(y_true, y_pred), 2)*100)","bef90d20":"print(classification_report(y_true, y_pred))","4e07199e":"# Model Evaluation","ea285aa2":"# Show first 6 images","6743fe8b":"# Model Building ","bf669226":"# Encoding the label","0760c400":"# Image Augmentation","c64ba5a5":"# Splitting Features and Labels","a68b2d45":"# Accuracy Measurement","4ab9ec3a":"# Reading and Checking Data","1dd84009":"# Import Libraries","940235d7":"# Reshaping the images into 28 x 28 pixels\n","a6cb7880":"# Check Input Files","b3ce1db7":"# Set Seed (to get reproducible results)"}}