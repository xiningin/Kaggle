{"cell_type":{"1e75587b":"code","b058be88":"code","baea7719":"code","ed2e42b1":"code","8163d873":"code","e55841c2":"code","a3f22c93":"code","469add20":"code","08540d85":"code","adbbc1d0":"code","b69f9a7d":"code","0c3fbe54":"code","17a38d6a":"code","02a100c4":"code","a0dac815":"code","de3bc759":"code","69f3684e":"code","31eb4e9a":"code","45acda1c":"code","86ced749":"code","df0b3576":"code","c3331d50":"code","2073b07d":"code","35a3fd3c":"code","81ba7a8e":"code","80e63a15":"code","7d032462":"code","d109255e":"code","8cd9e014":"code","e78ba025":"code","d8404c6d":"code","3b076e50":"code","db67c81f":"code","25812bd3":"code","a8378a93":"code","265828cd":"code","6207d245":"code","fbee0be2":"code","84a3363e":"code","2612c1aa":"code","2787bd8b":"markdown","20f1fe03":"markdown","4ada08e1":"markdown","25f31bcd":"markdown","cb0c3aa8":"markdown"},"source":{"1e75587b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","b058be88":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","baea7719":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","ed2e42b1":"train.info()","8163d873":"test.info()","e55841c2":"all = pd.concat([train, test], sort = False)\nall.info()","a3f22c93":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","469add20":"all.info()","08540d85":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","adbbc1d0":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","b69f9a7d":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","0c3fbe54":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","17a38d6a":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","02a100c4":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","a0dac815":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","de3bc759":"all.info()","69f3684e":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","31eb4e9a":"all.info()","45acda1c":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","86ced749":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","df0b3576":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","c3331d50":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","2073b07d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","35a3fd3c":"from sklearn.ensemble import RandomForestClassifier","81ba7a8e":"RF_Model = RandomForestClassifier()","80e63a15":"#from sklearn.model_selection import GridSearchCV","7d032462":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","d109255e":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","8cd9e014":"#RF_grid_model = RF_grid.fit(X_train, y_train)","e78ba025":"#RF_grid_model.best_estimator_","d8404c6d":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","3b076e50":"RF_Model.fit(X_train, y_train)","db67c81f":"predictions = RF_Model.predict(X_test)\npredictions","25812bd3":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","a8378a93":"all_test.head()","265828cd":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","6207d245":"t_pred = RF_Model.predict(TestForPred).astype(int)","fbee0be2":"PassengerId = all_test['PassengerId']","84a3363e":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","2612c1aa":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","2787bd8b":"### Build Random Forest","20f1fe03":"****Extra Features:","4ada08e1":"****Check Accuracy","25f31bcd":"****Train\/Test Split","cb0c3aa8":"****Final Predictions"}}