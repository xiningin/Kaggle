{"cell_type":{"fba5981c":"code","d58dac52":"code","fed6e5a2":"code","3045181c":"code","eed320ff":"code","d5b52152":"code","19f503ce":"code","f38cee33":"code","2a1b6ccd":"code","1beed757":"code","6420bdc6":"code","18d43afe":"code","b8e6644e":"code","aecc0529":"code","cb22e5a9":"code","791d934e":"code","0cacedd0":"code","a421a314":"code","2c518229":"code","61616c5a":"code","e9ebd360":"code","458cf28f":"code","6376c7b2":"code","c57aaaa9":"code","c88869c8":"code","ece21aba":"code","63b6122b":"code","7cf0e6eb":"code","266849f3":"code","3bc62a1c":"code","1f6600c4":"code","9777c22c":"code","6226f84e":"code","b214b051":"code","904842ca":"code","18e2f598":"code","9fa65139":"code","04f4ba77":"code","7e57cdfd":"code","509ddb57":"code","7e9784b9":"code","707d61c0":"code","a2789ea6":"code","da7da869":"code","7df3968c":"code","510dc2c5":"markdown","da28f120":"markdown","a7925dfa":"markdown","00648a89":"markdown","5b2f7fe1":"markdown","090775bf":"markdown","d527bf15":"markdown","cec864a9":"markdown","e8e3c9f2":"markdown","ef18c54f":"markdown","f7f9400d":"markdown","2edfdc17":"markdown","b75c799f":"markdown","47d55c28":"markdown","c83679f2":"markdown","482e7b6c":"markdown","01297fdf":"markdown","ba5d392f":"markdown","d8057a22":"markdown","08ce2b1b":"markdown","f56aaaae":"markdown"},"source":{"fba5981c":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d58dac52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# Import important libraries \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom PIL import Image\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.utils import shuffle\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten\nfrom keras.optimizers import Adam\nfrom keras.losses import binary_crossentropy\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.metrics import *\n\n\nACCURACY_LIST = []\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.models import Model\n\n\n!pip install efficientnet\nfrom efficientnet.keras import EfficientNetB4\nfrom keras import backend as K\n\n\n# Get reproducible results\nfrom numpy.random import seed\nseed(1)\nimport tensorflow as tf\ntf.random.set_seed(1)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fed6e5a2":"train_df = pd.read_csv('..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv')\nvalid_df = pd.read_csv('..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_dataset_Summary.csv')\n\ntrain_df.sample(10)","3045181c":"print(f'There are {train_df.shape[0]} rows and {train_df.shape[1]} columns in the train data frame')\ntrain_df.head()","eed320ff":"print(f'There are {valid_df.shape[0]} rows and {valid_df.shape[1]} columns in the validation data frame')\nvalid_df.head()","d5b52152":"missing_vals = train_df.isnull().sum()\nmissing_vals.plot(kind = 'barh')","19f503ce":"train_data = train_df[train_df['Dataset_type'] == 'TRAIN']\ntest_data = train_df[train_df['Dataset_type'] == 'TEST']\nassert train_data.shape[0] + test_data.shape[0] == train_df.shape[0]\nprint(f\"Shape of train data : {train_data.shape}\")\nprint(f\"Shape of test data : {test_data.shape}\")\ntest_data.sample(10)","f38cee33":"train_df.info()","2a1b6ccd":"columns = train_df.keys()\ncolumns = list(columns)\nprint(columns)","1beed757":"train_fill = train_data.fillna('unknown')\ntest_fill = test_data.fillna('unknown')\ndisplay(train_fill.head(5))","6420bdc6":"# Count plot for 3 attributes with unknown variable addition\ntargets = ['Label', 'Label_2_Virus_category', 'Label_1_Virus_category']\nfig, ax = plt.subplots(2, 2, figsize=(20, 10))\nsns.countplot(x=targets[0], data=train_fill, ax=ax[0, 0])\nsns.countplot(x=targets[1], data=train_fill, ax=ax[0, 1])\nsns.countplot(x=targets[2], data=train_fill, ax=ax[1, 0])\nplt.show()","18d43afe":"# Count plot for 3 target variables without filling unknown variable\nfig, ax = plt.subplots(2, 2, figsize=(20, 10))\nsns.countplot(x=targets[0], data=train_df, ax=ax[0, 0])\nsns.countplot(x=targets[1], data=train_df, ax=ax[0, 1])\nsns.countplot(x=targets[2], data=train_df, ax=ax[1, 0])\nplt.show()","b8e6644e":"print(f\"Label = Normal Cases : {train_df[train_df['Label'] == 'Normal'].shape[0]}\")\nprint(f\"\"\"Label = Pnemonia + Label_2_Virus_category = COVID-19 cases : {train_df[(train_df['Label'] == 'Pnemonia')\n      & (train_data['Label_2_Virus_category'] == 'COVID-19')].shape[0]}\"\"\")\nprint(f\"\"\"Label = Normal + Label_2_Virus_category = COVID-19 cases : {train_df[(train_df['Label'] == 'Normal')\n      & (train_df['Label_2_Virus_category'] == 'COVID-19')].shape[0]}\"\"\")","aecc0529":"# Pie chart representation of Label_2_Virus_category values\n\ncolors = ['#ff5733', '#33ff57']\nexplode = [0.02, 0.02]\n\nvalues = ['unknown', 'other']\npercentages = [100 * (train_fill[train_fill[targets[1]] == 'unknown'].shape[0]) \/ train_fill.shape[0],\n              100 * (train_fill[train_fill[targets[1]] != 'unknown'].shape[0]) \/ train_fill.shape[0]]\n\nfig1, ax1 = plt.subplots(figsize=(7, 7))\n\nplt.pie(percentages, colors=colors, labels=values,\n        autopct='%1.1f%%', startangle=0, explode=explode)\nfig = plt.gcf()\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\nax1.axis('equal')\nplt.tight_layout()\nplt.title('Percentage of \"unknown\" values present in Label_2_Virus_category')\nplt.show()","cb22e5a9":"test_img_dir = '\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test'\ntrain_img_dir = '\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train'\n\nassert os.path.isdir(test_img_dir) == True\nassert os.path.isdir(train_img_dir) == True\n\nsample_train_images = list(os.walk(train_img_dir))[0][2][:8]\nsample_train_images = list(map(lambda x: os.path.join(train_img_dir, x), sample_train_images))\n\nsample_test_images = list(os.walk(test_img_dir))[0][2][:8]\nsample_test_images = list(map(lambda x: os.path.join(test_img_dir, x), sample_test_images))","791d934e":"from PIL import Image\nplt.figure(figsize = (17,17))\nfor iterator, filename in enumerate(sample_train_images):\n    image = Image.open(filename)\n    plt.subplot(4,2,iterator+1)\n    plt.imshow(image, cmap='YlOrBr')\n\nplt.tight_layout()","0cacedd0":"#Displaying test images\nplt.figure(figsize = (17,17))\nfor iterator, filename in enumerate(sample_test_images):\n    image = Image.open(filename)\n    plt.subplot(4,2,iterator+1)\n    plt.imshow(image, cmap='YlOrBr')\n\nplt.tight_layout()","a421a314":"# Get the first image that was listed in the train_df dataframe\nsample_img = train_df.X_ray_image_name[0]\nraw_image = plt.imread(os.path.join(train_img_dir, sample_img))\nplt.imshow(raw_image, cmap='gray')\nplt.colorbar()\nplt.title('Raw Chest X Ray Image')\nprint(f\"The dimensions of the image are {raw_image.shape[0]} pixels width and {raw_image.shape[1]} pixels height, one single color channel\")\nprint(f\"The maximum pixel value is {raw_image.max():.4f} and the minimum is {raw_image.min():.4f}\")\nprint(f\"The mean value of the pixels is {raw_image.mean():.4f} and the standard deviation is {raw_image.std():.4f}\")","2c518229":"# Plot a histogram of the distribution of the pixels\nsns.distplot(raw_image.ravel(), \n             label=f'Pixel Mean {np.mean(raw_image):.4f} & Standard Deviation {np.std(raw_image):.4f}', kde=False)\nplt.legend(loc='upper center')\nplt.title('Distribution of Pixel Intensities in the Image')\nplt.xlabel('Pixel Intensity')\nplt.ylabel('# Pixels in Image')","61616c5a":"fig, ax = plt.subplots(4, 2, figsize=(17, 17))\n\n\ncovid_path = train_data[train_data['Label_2_Virus_category']=='COVID-19']['X_ray_image_name'].values\n\nsample_covid_path = covid_path[:4]\nsample_covid_path = list(map(lambda x: os.path.join(train_img_dir, x), sample_covid_path))\n\nfor row, file in enumerate(sample_covid_path):\n    image = plt.imread(file)\n    ax[row, 0].imshow(image)\n    ax[row, 1].hist(image.ravel(), 256, [0,256])\n    ax[row, 0].axis('off')\n    if row == 0:\n        ax[row, 0].set_title('Images')\n        ax[row, 1].set_title('Histograms')\nfig.suptitle('Label 2 Virus Category = COVID-19', size=16)\nplt.show()","e9ebd360":"fig, ax = plt.subplots(4, 2, figsize=(17, 17))\n\n\nnormal_path = train_data[train_data['Label']=='Normal']['X_ray_image_name'].values\n\nsample_normal_path = normal_path[:4]\nsample_normal_path = list(map(lambda x: os.path.join(train_img_dir, x), sample_normal_path))\n\nfor row, file in enumerate(sample_normal_path):\n    image = plt.imread(file)\n    ax[row, 0].imshow(image)\n    ax[row, 1].hist(image.ravel(), 256, [0,256])\n    ax[row, 0].axis('off')\n    if row == 0:\n        ax[row, 0].set_title('Images')\n        ax[row, 1].set_title('Histograms')\nfig.suptitle('Label = NORMAL', size=16)\nplt.show()","458cf28f":"# Generate the final train data from original train data with conditions refered from EDA inference\nfinal_train_data = train_data[(train_data['Label'] == 'Normal') | \n                              ((train_data['Label'] == 'Pnemonia') & (train_data['Label_2_Virus_category'] == 'COVID-19'))]\n\n\n# Create a target attribute where value = positive if 'Pnemonia + COVID-19' or value = negative if 'Normal'\nfinal_train_data['target'] = ['negative' if holder == 'Normal' else 'positive' for holder in final_train_data['Label']]\n\nfinal_train_data = shuffle(final_train_data, random_state=1)\n\nfinal_validation_data = final_train_data.iloc[1000:, :]\nfinal_train_data = final_train_data.iloc[:1000, :]\n\nprint(f\"Final train data shape : {final_train_data.shape}\")\nfinal_train_data.sample(10)","6376c7b2":"train_image_generator = ImageDataGenerator(\n    rescale=1.\/255,\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=90,\n    width_shift_range=0.15,\n    height_shift_range=0.15,\n    horizontal_flip=True,\n    zoom_range=[0.9, 1.25],\n    brightness_range=[0.5, 1.5]\n)\n\ntest_image_generator = ImageDataGenerator(\n    rescale=1.\/255\n)\n\ntrain_generator = train_image_generator.flow_from_dataframe(\n    dataframe=final_train_data,\n    directory=train_img_dir,\n    x_col='X_ray_image_name',\n    y_col='target',\n    target_size=(224, 224),\n    batch_size=8,\n    seed=2020,\n    shuffle=True,\n    class_mode='binary'\n)\n\nvalidation_generator = train_image_generator.flow_from_dataframe(\n    dataframe=final_validation_data,\n    directory=train_img_dir,\n    x_col='X_ray_image_name',\n    y_col='target',\n    target_size=(224, 224),\n    batch_size=8,\n    seed=2020,\n    shuffle=True,\n    class_mode='binary'\n)\n\ntest_generator = test_image_generator.flow_from_dataframe(\n    dataframe=test_data,\n    directory=test_img_dir,\n    x_col='X_ray_image_name',\n    target_size=(224, 224),\n    shuffle=False,\n    batch_size=16,\n    class_mode=None\n)","c57aaaa9":"def scheduler(epoch):\n    if epoch < 5:\n        return 0.0001\n    else:\n        print(f\"Learning rate reduced to {0.0001 * np.exp(0.5 * (5 - epoch))}\")\n        return 0.0001 * np.exp(0.5 * (5 - epoch))\n    \ncustom_callback = tf.keras.callbacks.LearningRateScheduler(scheduler)\n\nMETRICS = [\n      TruePositives(name='tp'),\n      FalsePositives(name='fp'),\n      TrueNegatives(name='tn'),\n      FalseNegatives(name='fn'), \n      BinaryAccuracy(name='accuracy'),\n      Precision(name='precision'),\n      Recall(name='recall'),\n      AUC(name='auc'),\n]","c88869c8":"model = Sequential([\n    Conv2D(64, (3, 3), input_shape=(224, 224, 3), activation='relu'),\n    MaxPooling2D((3, 3)),\n    Conv2D(32, (3, 3), activation='relu'),\n    MaxPooling2D((3, 3)),\n    Conv2D(32, (3, 3), activation='relu'),\n    MaxPooling2D((3, 3)),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.4),\n    Dense(32, activation='relu'),\n    Dropout(0.4),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer=Adam(), loss=binary_crossentropy,\n             metrics=METRICS)","ece21aba":"model.summary()","63b6122b":"history = model.fit_generator(train_generator,\n                   validation_data=validation_generator,\n                   epochs=20,\n                   callbacks=[custom_callback])","7cf0e6eb":"model.save('covid_19_CNN_model.h5')\nACCURACY_LIST.append(['Base CNN Model', history])","266849f3":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2, 2, figsize=(10, 10))\nsns.lineplot(x=np.arange(1, 21), y=history.history.get('loss'), ax=ax[0, 0])\nsns.lineplot(x=np.arange(1, 21), y=history.history.get('auc'), ax=ax[0, 1])\nsns.lineplot(x=np.arange(1, 21), y=history.history.get('val_loss'), ax=ax[1, 0])\nsns.lineplot(x=np.arange(1, 21), y=history.history.get('val_auc'), ax=ax[1, 1])\nax[0, 0].set_title('Training Loss vs Epochs')\nax[0, 1].set_title('Training AUC vs Epochs')\nax[1, 0].set_title('Validation Loss vs Epochs')\nax[1, 1].set_title('Validation AUC vs Epochs')\nfig.suptitle('C-19 CNN model', size=16)\nplt.show()","3bc62a1c":"balanced_data = train_data[(train_data['Label'] == 'Normal') | \n                              ((train_data['Label'] == 'Pnemonia') & (train_data['Label_2_Virus_category'] == 'COVID-19'))]\n\nbalanced_data['target'] = ['negative' if holder == 'Normal' else 'positive' for holder in balanced_data['Label']]\n\nbalanced_data_subset_normal = balanced_data[balanced_data['target'] == 'negative']\nbalanced_data_subset_covid = balanced_data[balanced_data['target'] == 'positive']\nbalanced_data_frac_normal = balanced_data_subset_normal.sample(frac=(1\/5))\n\nbalanced_data_concat = pd.concat([balanced_data_frac_normal, balanced_data_subset_covid], axis=0)\nbalanced_data_concat = shuffle(balanced_data_concat, random_state=0)\nbalanced_data_train = balanced_data_concat[:240]\nbalanced_data_validation = balanced_data_concat[240:]\n\nprint(f\"Balanced train data shape {balanced_data_train.shape}\")\nprint(f\"Balanced validation data shape {balanced_data_validation.shape}\")","1f6600c4":"balanced_train_generator = train_image_generator.flow_from_dataframe(\n    dataframe=balanced_data_train,\n    directory=train_img_dir,\n    x_col='X_ray_image_name',\n    y_col='target',\n    target_size=(224, 224),\n    batch_size=64,\n    class_mode='binary'\n)\n\nbalanced_validation_generator = train_image_generator.flow_from_dataframe(\n    dataframe=balanced_data_validation,\n    directory=train_img_dir,\n    x_col='X_ray_image_name',\n    y_col='target',\n    target_size=(224, 224),\n    batch_size=64,\n    class_mode='binary'\n)","9777c22c":"METRICS = [\n      TruePositives(name='tp'),\n      FalsePositives(name='fp'),\n      TrueNegatives(name='tn'),\n      FalseNegatives(name='fn'), \n      BinaryAccuracy(name='accuracy'),\n      Precision(name='precision'),\n      Recall(name='recall'),\n      AUC(name='auc'),\n]\n\nbalanced_model = Sequential([\n    Conv2D(64, (3, 3), input_shape=(224, 224, 3), activation='relu'),\n    MaxPooling2D((3, 3)),\n    Conv2D(32, (3, 3), activation='relu'),\n    MaxPooling2D((3, 3)),\n    Conv2D(32, (3, 3), activation='relu'),\n    MaxPooling2D((3, 3)),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.4),\n    Dense(32, activation='relu'),\n    Dropout(0.4),\n    Dense(1, activation='sigmoid')\n])\n\nbalanced_model.compile(optimizer=Adam(), loss=binary_crossentropy,\n             metrics=METRICS)","6226f84e":"balanced_model.summary()","b214b051":"balanced_history = balanced_model.fit_generator(balanced_train_generator,\n                                               epochs=30,\n                                               validation_data=balanced_validation_generator,\n                                               callbacks=[custom_callback])","904842ca":"balanced_model.save('covid19_CNN_model_balanced.h5')\nACCURACY_LIST.append(['Balanced Base Model', balanced_history])","18e2f598":"fig, ax = plt.subplots(2, 2, figsize=(10, 10))\nsns.lineplot(x=np.arange(1, 31), y=balanced_history.history.get('loss'), ax=ax[0, 0])\nsns.lineplot(x=np.arange(1, 31), y=balanced_history.history.get('auc'), ax=ax[0, 1])\nsns.lineplot(x=np.arange(1, 31), y=balanced_history.history.get('val_loss'), ax=ax[1, 0])\nsns.lineplot(x=np.arange(1, 31), y=balanced_history.history.get('val_auc'), ax=ax[1, 1])\nax[0, 0].set_title('Training Loss vs Epochs')\nax[0, 1].set_title('Training AUC vs Epochs')\nax[1, 0].set_title('Validation Loss vs Epochs')\nax[1, 1].set_title('Validation AUC vs Epochs')\nfig.suptitle('Balanced base CNN model', size=16)\nplt.show()","9fa65139":"METRICS = [\n      TruePositives(name='tp'),\n      FalsePositives(name='fp'),\n      TrueNegatives(name='tn'),\n      FalseNegatives(name='fn'), \n      BinaryAccuracy(name='accuracy'),\n      Precision(name='precision'),\n      Recall(name='recall'),\n      AUC(name='auc'),\n]\n\ndef output_custom_model(prebuilt_model):\n    print(f\"Processing {prebuilt_model}\")\n    prebuilt = prebuilt_model(include_top=False,\n                            input_shape=(224, 224, 3),\n                            weights='imagenet')\n    output = prebuilt.output\n    output = GlobalMaxPooling2D()(output)\n    output = Dense(128, activation='relu')(output)\n    output = Dropout(0.2)(output)\n    output = Dense(1, activation='sigmoid')(output)\n\n    model = Model(inputs=prebuilt.input, outputs=output)\n    model.compile(optimizer='sgd', loss=binary_crossentropy,\n                  metrics=METRICS)\n    return model","04f4ba77":"resnet_custom_model = output_custom_model(ResNet50)\nresnet_history = resnet_custom_model.fit_generator(train_generator,\n                                 epochs=20,\n                                 validation_data=validation_generator,\n                                 callbacks=[custom_callback])","7e57cdfd":"resnet_custom_model.save('covid19_xray_resnet_50.h5')\nACCURACY_LIST.append(['ResNet 50', resnet_history])","509ddb57":"fig, ax = plt.subplots(2, 2, figsize=(10, 10))\nsns.lineplot(x=np.arange(1, 21), y=resnet_history.history.get('loss'), ax=ax[0, 0])\nsns.lineplot(x=np.arange(1, 21), y=resnet_history.history.get('auc'), ax=ax[0, 1])\nsns.lineplot(x=np.arange(1, 21), y=resnet_history.history.get('val_loss'), ax=ax[1, 0])\nsns.lineplot(x=np.arange(1, 21), y=resnet_history.history.get('val_auc'), ax=ax[1, 1])\nax[0, 0].set_title('Training Loss vs Epochs')\nax[0, 1].set_title('Training AUC vs Epochs')\nax[1, 0].set_title('Validation Loss vs Epochs')\nax[1, 1].set_title('Validation AUC vs Epochs')\nfig.suptitle('ResNet 50 model', size=16)\nplt.show()","7e9784b9":"METRICS = [\n      TruePositives(name='tp'),\n      FalsePositives(name='fp'),\n      TrueNegatives(name='tn'),\n      FalseNegatives(name='fn'), \n      BinaryAccuracy(name='accuracy'),\n      Precision(name='precision'),\n      Recall(name='recall'),\n      AUC(name='auc'),\n]\n\nefficient_net_custom_model = output_custom_model(EfficientNetB4)\nefficient_net_history = efficient_net_custom_model.fit_generator(train_generator,\n                                 epochs=20,\n                                 validation_data=validation_generator,\n                                 callbacks=[custom_callback])","707d61c0":"efficient_net_custom_model.save('covid19_xray_efficient_net_B4.h5')\nACCURACY_LIST.append(['EfficientNet B4', efficient_net_history])","a2789ea6":"fig, ax = plt.subplots(2, 2, figsize=(10, 10))\nsns.lineplot(x=np.arange(1, 21), y=efficient_net_history.history.get('loss'), ax=ax[0, 0])\nsns.lineplot(x=np.arange(1, 21), y=efficient_net_history.history.get('auc'), ax=ax[0, 1])\nsns.lineplot(x=np.arange(1, 21), y=efficient_net_history.history.get('val_loss'), ax=ax[1, 0])\nsns.lineplot(x=np.arange(1, 21), y=efficient_net_history.history.get('val_auc'), ax=ax[1, 1])\nax[0, 0].set_title('Training Loss vs Epochs')\nax[0, 1].set_title('Training AUC vs Epochs')\nax[1, 0].set_title('Validation Loss vs Epochs')\nax[1, 1].set_title('Validation AUC vs Epochs')\nfig.suptitle('EfficientNet B4 model', size=16)\nplt.show()","da7da869":"ACCURACY_LIST = np.array(ACCURACY_LIST)\nmodel_names = ACCURACY_LIST[:, 0]\nhistories = ACCURACY_LIST[:, 1]\n\nfig, ax = plt.subplots(2, 2, figsize=(20, 20))\nsns.barplot(x=model_names, y=list(map(lambda x: x.history.get('auc')[-1], histories)), ax=ax[0, 0], palette='Spectral')\nsns.barplot(x=model_names, y=list(map(lambda x: x.history.get('val_auc')[-1], histories)), ax=ax[0, 1], palette='gist_yarg')\nsns.barplot(x=model_names, y=list(map(lambda x: x.history.get('accuracy')[-1], histories)), ax=ax[1, 0], palette='rocket')\nsns.barplot(x=model_names, y=list(map(lambda x: x.history.get('val_accuracy')[-1], histories)), ax=ax[1, 1], palette='ocean_r')\nax[0, 0].set_title('Model Training AUC scores')\nax[0, 1].set_title('Model Validation AUC scores')\nax[1, 0].set_title('Model Training Accuracies')\nax[1, 1].set_title('Model Validation Accuracies')\nfig.suptitle('Model Comparisions')\nplt.show()","7df3968c":"metric_dataframe = pd.DataFrame({\n    'Model Names': model_names,\n    'True Positives': list(map(lambda x: x.history.get('tp')[-1], histories)),\n    'False Positives': list(map(lambda x: x.history.get('fp')[-1], histories)),\n    'True Negatives': list(map(lambda x: x.history.get('tn')[-1], histories)),\n    'False Negatives': list(map(lambda x: x.history.get('fn')[-1], histories))\n})\nfig, ax = plt.subplots(2, 2, figsize=(20, 20))\nsns.barplot(x='Model Names', y='True Positives', data=metric_dataframe, ax=ax[0, 0], palette='BrBG')\nsns.barplot(x='Model Names', y='False Positives', data=metric_dataframe, ax=ax[0, 1], palette='icefire_r')\nsns.barplot(x='Model Names', y='True Negatives', data=metric_dataframe, ax=ax[1, 0], palette='PuBu_r')\nsns.barplot(x='Model Names', y='False Negatives', data=metric_dataframe, ax=ax[1, 1], palette='YlOrBr')\nax[0, 0].set_title('True Positives of Models')\nax[0, 1].set_title('False Positives of Models')\nax[1, 0].set_title('True Negatives of Models')\nax[1, 1].set_title('False Negatives of Models')\nfig.suptitle('Confusion Matrix comparision of Models', size=16)\nplt.show()","510dc2c5":"Inference\n* From the sample images, seperated according to Label 2 Virus Category into COVID-19 and Other, we can infer the difference in image histograms\n* The sample histograms of images having target as COVID-19 are mostly left-skewed histograms.\n* The sample histograms of images which have Label value as Normal are mostly right skewed histograms (with exception of image 4).","da28f120":"**CNN Architect**","a7925dfa":"Inference from count plots and Pie Chart\n* All COVID-19 patients are classified with attribute Label as Pnemonia. None of them is classified as normal.\n* In target \"Label_2_Virus_category\", \"unknown\" value is associated with majority of images\n* Unknown values consist of 98.7 % of total cases while COVID-19 value consist of less than 1.3 % of total cases.\n* Even if we train a model to classify Label_2_virus_category with 98.7 % accuracy, it will be highly inefficient in detecting true positive COVID-19 cases.\n* Thus we are going to construct a model which differentiates between (Normal) and (Pnemonia + COVID-19) Cases","00648a89":"**Inferences**\n\n*     Reducing imbalances results in reduced training images\n*     Accuracy reduced because of reduced training images\n*     Validation accuracy still remains stale even on reducing number of \"Normal\" labelled images\n*     A good measure for imbalanced dataset is Area Under the Curve(AUC)\n*     Comparision of models will be done based on AUC score","5b2f7fe1":"**Inference**\n\n    The effect of data imbalance is visible in validation accuracy measures\n    Training accuracy of ResNet 50 is almost equal to base CNN model\n    A good measure for imbalanced dataset is Area Under the Curve(AUC)\n    The metrics for the model changed\n    Comparision of models will be done based on AUC score","090775bf":"**ResNet50**","d527bf15":"**Base CNN model with lower imbalance in data**\n\n\n    In this subsection, we try to remove 95.86 % imbalance present in the data\n    We will remove 4 \/ 5 th of the Normal labelled images while keeping the count of COVID-19 labelled images same\n    1342 \/ 5 ~ 269; 269 \/ (269 + 58) ~ 82.26 %\n    To compensate for less number of training images, we increase the number of epochs","cec864a9":"3. **Expolarotory Data Analysis**","e8e3c9f2":"**EfficientNet B4**","ef18c54f":"Image histograms of Label type \"Normal\" patients","f7f9400d":"**Binary Accuracy and AUC score comparision**","2edfdc17":"4.**Model Development**\n\n    Base CNN Model Accuracy","b75c799f":"Let's deal with missing values","47d55c28":"2. **Missing Values**","c83679f2":"Histogram analysis of Images of COVID-19 Cases","482e7b6c":"**Inference from metric comparisions**\n\n*         ResNet 50 has the most AUC score out of all the models\n*         In our experiment, it is higly important for a model to correctly predict COVID-19 patient, \n            thus it should have high True Positive score and low False Negative score\n*         ResNet 50 has the highest True Positive score and lowest False Negative score\n*         From the metric comparisions, ResNet 50 model performs better than other models in the experiment","01297fdf":"1. **Load Datasets**","ba5d392f":"**TP, FP, TN, FN model comparisions**","d8057a22":"**Inference from base CNN model accuracy and AUC**\n \n     Base CNN model\n     Train data accuracy = 95.4 %\n     Validation data accuracy = 97 %\n     Possible reasons for stale accuracy on 20 epochs\n\n**Highly imbalance target variables**\n\n    COVID-19 target value = positive rows have count as 58\n    Normal target value = negative rows have count as 1342\n    100 * (1342 \/ 1400) ~ 95.86 %\n    Even if model classifies all the images as \"Normal\" label, it would achieve 95.86 % accuracy\n\n**Note**\n\n        A good measure for imbalanced dataset is Area Under the Curve(AUC)\n        Comparision of models will be done based on AUC score","08ce2b1b":"Visual Analytics","f56aaaae":"Analysis of image files"}}