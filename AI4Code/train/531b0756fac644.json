{"cell_type":{"c3ab11c9":"code","a6bc3076":"code","b942fd4c":"code","7bb43c5d":"code","b74e2f03":"code","a81eb71f":"code","c03f150e":"code","598bf83a":"code","3e863d48":"code","3cbe36d3":"code","cea3fbdf":"code","24e1eebc":"code","3da8128b":"code","1e4502b4":"code","79ade609":"code","523ee663":"code","1529604f":"code","e5a66383":"code","142f42e1":"code","4c9f881b":"code","62348d3e":"code","15f40808":"code","03cb9602":"code","1f336b0b":"code","f002ff41":"markdown","8232f142":"markdown","2bef6db7":"markdown","c452baaa":"markdown","08026a1c":"markdown","af3f3f56":"markdown","ab0370fd":"markdown","3550d271":"markdown","10bb9851":"markdown"},"source":{"c3ab11c9":"\nimport math\nimport pandas_datareader as web\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport math\n\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n","a6bc3076":"\n\nril_price= pd.read_csv(\"..\/input\/reliance-industries-ril-share-price-19962020\/Reliance Industries 1996 to 2020.csv\")\n#Show the data \nril_price","b942fd4c":"ril_price=ril_price.dropna()\nril_price","7bb43c5d":"ril_price.info()","b74e2f03":"ril_price[\"Date\"]=pd.to_datetime(ril_price[\"Date\"], format=\"%d-%m-%Y\")\n\n\nril_price[\"Date\"]\n\nril_price.set_index('Date', inplace=True)\nril_price.info()","a81eb71f":"ril_price.describe()","c03f150e":"#Visualize the closing price history\nplt.figure(figsize=(16,8))\nplt.title('Reliance Industries Close Price History')\nplt.plot(ril_price['Close'])\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Close Price INR',fontsize=18)\nplt.show()","598bf83a":"#Create a new dataframe with only the 'Close' column\ndata = ril_price.filter(['Close'])\n#Converting the dataframe to a numpy array\ndataset = data.values\n#Get \/Compute the number of rows to train the model on\ntraining_data_len = math.ceil( len(dataset) *.8) ","3e863d48":"#Scale the all of the data to be values between 0 and 1 \nscaler = MinMaxScaler(feature_range=(0, 1)) \nscaled_data = scaler.fit_transform(dataset)","3cbe36d3":"#Create the scaled training data set \ntrain_data = scaled_data[0:training_data_len  , : ]\n#Split the data into x_train and y_train data sets\nx_train=[]\ny_train = []\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])","cea3fbdf":"#Convert x_train and y_train to numpy arrays\nx_train, y_train = np.array(x_train), np.array(y_train)","24e1eebc":"#Reshape the data into the shape accepted by the LSTM\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))","3da8128b":"#Build the LSTM network model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True,input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=False))\nmodel.add(Dense(units=25))\nmodel.add(Dense(units=1))","1e4502b4":"#Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')","79ade609":"#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","523ee663":"#Test data set\ntest_data = scaled_data[training_data_len - 60: , : ]\n#Create the x_test and y_test data sets\nx_test = []\ny_test =  dataset[training_data_len : , : ] #Get all of the rows from index 1603 to the rest and all of the columns (in this case it's only column 'Close'), so 2003 - 1603 = 400 rows of data\nfor i in range(60,len(test_data)):\n    x_test.append(test_data[i-60:i,0])","1529604f":"#Convert x_test to a numpy array \nx_test = np.array(x_test)","e5a66383":"#Reshape the data into the shape accepted by the LSTM\nx_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))","142f42e1":"#Getting the models predicted price values\npredictions = model.predict(x_test) \npredictions = scaler.inverse_transform(predictions)#Undo scaling","4c9f881b":"#Calculate\/Get the value of RMSE\nrmse=np.sqrt(np.mean(((predictions- y_test)**2)))\nrmse","62348d3e":"#Plot\/Create the data for the graph\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n#Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('RIL Share Price Prediction Model using LSTM')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price INR', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()\n\n","15f40808":"#Show the valid and predicted prices\nvalid","03cb9602":"new_df = ril_price.filter(['Close'])","1f336b0b":"#Get the last 60 day closing price \nlast_60_days = new_df[-60:].values\n\n#Scale the data to be values between 0 and 1\nlast_60_days_scaled = scaler.transform(last_60_days)\n\n#Create an empty list\nX_test = []\n\n#Append teh past 60 days\nX_test.append(last_60_days_scaled)\n\n#Convert the X_test data set to a numpy array\nX_test = np.array(X_test)\n\n#Reshape the data\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n\n#Get the predicted scaled price\npred_price = model.predict(X_test)\n\n#undo the scaling \npred_price = scaler.inverse_transform(pred_price)\nprint(pred_price)\n","f002ff41":"# Create a Chart to visualize the data.","8232f142":"date is a string object not a date. lets fix this","2bef6db7":"Lots of rows have NaN value. lets delete those","c452baaa":"# RIL Stock Price Prediction using Long Short Term Memory (LSTM)\n\nThis program uses an artificial recurrent neural network called Long Short Term Memory (LSTM) to predict the closing stock price of a corporation (Reliance Industries Limited) using the past days stock price.","08026a1c":"Build the LSTM model to have two LSTM layers with 50 neurons and two Dense layers, one with 25 neurons and the other with 1 neuron.","af3f3f56":"# Import the libraries","ab0370fd":"Compile the model using the mean squared error (MSE) loss function and the adam optimizer.","3550d271":"Even after removing NaN values, we have 2200+ rows and 9+ years of data. good enough for the analysis","10bb9851":"# Read the data"}}