{"cell_type":{"de8beb80":"code","417402c0":"code","e42c8e7b":"code","9cfc95d6":"code","d64a280a":"code","7d32ef9f":"code","f551106d":"code","37d791ad":"code","17a182b6":"code","81396b26":"code","dfafc4b4":"markdown","ce81d47e":"markdown"},"source":{"de8beb80":"'''\n * @author Shyam Mittal - 17BIS0043\n * @email mittalshyam1007@gmail.com\n * @create date 2020-09-24 19:24:46\n * @modify date 2020-09-24 19:24:46\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https:\/\/colab.research.google.com\/drive\/1IJzCkuvplQarhv5xtIKBO8e6UOUDpzfj\n\n'''","417402c0":"import numpy as np\nimport pandas as pd\nfrom math import sqrt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","e42c8e7b":"data = pd.read_csv('..\/input\/salary-data-simple-linear-regression\/Salary_Data.csv')","9cfc95d6":"data.head()","d64a280a":"data.shape","7d32ef9f":"X, y = data.drop(\"Salary\",axis=1), data[\"Salary\"]","f551106d":"print(\"X\\n\",X.head())\nprint(\"\\ny\\n\",y.head())","37d791ad":"print(\"X's shape\",X.shape)\nprint(\"y's shape\",y.shape)\n","17a182b6":"def custom_mse(y_test, y_pred):\n  diff = y_test - y_pred\n  sqrs = diff**2\n  mse = sum(sqrs)\/len(sqrs)\n  return mse\n\ndef custom_rmse(mse):\n  return sqrt(mse)\n\ndef train_and_output(X, y, split_ratio):\n  X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=split_ratio)\n  model = LinearRegression()\n  model.fit(X_train, y_train)\n  y_pred = model.predict(X_test)\n\n  print(\"\\nSklearn's output:\")\n  print(\"Mean Squared Error :\", mean_squared_error(y_test,y_pred))\n  print(\"Root Mean Squared Error :\", sqrt(mean_squared_error(y_test,y_pred)))\n  print(\"\\nCustom Function's output:\")\n  mse = custom_mse(y_test,y_pred)\n  print(\"Mean Squared Error :\", mse)\n  print(\"Root Mean Squared Error :\", custom_rmse(mse))","81396b26":"# training-testing split ratios corresponding\n#  to 50%-50%, 70%-30%, 80%-20%\nsplit_ratios = [0.5,0.7,0.8]\n\nfor ratio in split_ratios:\n  print(\"\\n------------------------------------------\\nFor ratio = {0}.\".format(ratio))\n  train_and_output(X, y, ratio)\n\n\n","dfafc4b4":"> From the results we can verify that, we get the **same output for MSE** and **RMSE** (Mean Squared Error and Root Squared Mean Error) for both the custom function as well as that imported from sklearn.","ce81d47e":"#### Defining custom functions for MSE\/RMSE and Final Output"}}