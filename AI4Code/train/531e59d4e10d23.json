{"cell_type":{"d56cd791":"code","1660d596":"code","26e502ad":"code","bfcbc9a8":"code","6fecf640":"code","d9c43e71":"code","97b55f47":"code","a8e46625":"code","07e27cf5":"code","04240e67":"code","ce024fe9":"code","ca655fd9":"code","af505605":"code","a1d49a0e":"code","945652c5":"code","38230a14":"code","d7d66318":"code","f4644e57":"code","4b292659":"code","5dac1bb7":"code","f4f97f70":"code","5fe71108":"code","ba57942e":"code","d7f8b5af":"code","12b3c75a":"code","2e6f72ea":"markdown","18d4729e":"markdown","3b60eedc":"markdown","07294011":"markdown"},"source":{"d56cd791":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","1660d596":"train_set = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest_set = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')\ngdp = pd.read_csv('\/kaggle\/input\/tps-jan-2022-gdp-data-long-format\/gdp_long.csv')\nweather = pd.read_csv('\/kaggle\/input\/finland-norway-and-sweden-weather-data-20152019\/nordics_weather.csv')\nweather.date = pd.to_datetime(weather.date)\ntrain_set['type'] = 'Train'\ntest_set['type'] = 'Test'\ndf = train_set.append(test_set)\ndf = df.reset_index(drop = True)\ndf['num_sold'] = np.log(df['num_sold'])\ndf.head()","26e502ad":"# add feature\ndf.date = pd.to_datetime(df.date)\ndf['dateofweek'] = df['date'].dt.dayofweek\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['quarter'] = df['date'].dt.quarter\ndf['day_of_year'] = df['date'].dt.day_of_year\ndf['date_of_month'] = df['date'].dt.days_in_month\ndf = df.merge(gdp)\n# df = df.merge(weather)\ndf = df.sort_values(by = 'row_id')\ndf = df.reset_index()\n# df.drop(columns = 'index',inplace = True)","bfcbc9a8":"trend = df[df.type == 'Train'].groupby(['country', 'store', 'product', 'month','dateofweek'])['num_sold'].median().unstack(level='product')\ntrend['Hat\/Sticker'] = trend['Kaggle Hat'] \/ trend['Kaggle Sticker']\ntrend['Mug\/Sticker'] = trend['Kaggle Mug'] \/ trend['Kaggle Sticker']\ntrend","6fecf640":"def build_dummy(df,column):\n    temp = df[df.type == 'Train']\n    # temp['num_sold'] = np.exp(temp['num_sold'])\n    weight = temp.groupby([column])['num_sold'].agg({np.median})\n    weight = weight.iloc[:,0].tolist()\n    dummy = pd.get_dummies(df[column], prefix = column)\n    weight = np.log(weight)\n    return dummy * weight","d9c43e71":"# one-hot\ndf = pd.concat([\n    df,\n    build_dummy(df,'country'),\n    build_dummy(df,'store'),\n    build_dummy(df,'product'),\n    build_dummy(df,'dateofweek'),\n   # build_dummy(df,'date_of_month'),\n   # build_dummy(df,'month'),\n    build_dummy(df,'quarter')\n],axis=1)\ndf.shape","97b55f47":"# add seasonal effet and trend effet\nfor i in range(1,2):\n    df[f'dateofweek_sin{i}'] = np.sin(2* np.pi * df['date'].dt.dayofweek \/ 7 * i)\n    df[f'dateofweek_cos{i}'] = np.cos(2* np.pi * df['date'].dt.dayofweek \/ 7 * i)\n    df[f'month_sin{i}'] = np.sin(2* np.pi * df['date'].dt.month \/ 12 * i)\n    df[f'month_cos{i}'] = np.cos(2* np.pi * df['date'].dt.month \/ 12 * i)\n    \nfor i in range(1,5):\n    df[f'dayofyear_sin{i}'] = np.sin(2* np.pi * df['date'].dt.day_of_year \/ 365 * i)\n    df[f'dayofyear_cos{i}'] = np.cos(2* np.pi * df['date'].dt.day_of_year \/ 365 * i)","a8e46625":"df.shape","07e27cf5":"df","04240e67":"plt.figure(figsize=(20, 10), dpi=80)\ndf[df.type == 'Train'].groupby(['country','store','product'])['num_sold'].plot(legend = True)\nplt.show()","ce024fe9":"df_drop = df.drop(columns = ['row_id','date','country','store','product'])\ntrain_set = df_drop[df.type == 'Train']\ntest_set = df_drop[df.type == 'Test']\ntrain_set = train_set.drop(columns = 'type')\ntest_set = test_set.drop(columns = 'type')\nX = train_set.loc[:,train_set.columns!='num_sold']\ny = train_set['num_sold']\ntest_x = test_set.loc[:,test_set.columns!='num_sold']\ntest_y = test_set['num_sold']","ca655fd9":"params ={'lambda': 0.001,\n         'alpha': 3,\n         'eta': 0.01, \n         'colsample_bytree': .85, \n         'subsample': 0.6, \n         'learning_rate': 0.0025, \n         'n_estimators': 8000, \n         'max_depth': 18, \n         'min_child_weight': 3}\nxgb_reg = xgb.XGBRegressor(**params,tree_method = 'gpu_hist')","af505605":"X_train,X_val,y_train,y_val = train_test_split(X,y, test_size = .25, shuffle=False)","a1d49a0e":"# pd.options.display.max_rows = 10\n# X_train.describe().T","945652c5":"xgb_reg.fit(X_train, y_train,\n            eval_metric = ['mape'],\n            eval_set = [[X_train, y_train],[X_val, y_val]])","38230a14":"y_predT = xgb_reg.predict(X_train)\ny_predV = xgb_reg.predict(X_val)\nplt.figure(figsize=(12, 6), dpi=80)\nplt.plot(y_train,y_predT,'ro')\nplt.show()\n\nplt.figure(figsize=(12, 6), dpi=80)\nplt.plot(y_val,y_predV,'ro')\nplt.show()\n\nplt.figure(figsize=(12, 6), dpi=80)\n# plt.plot(y_predV,kind = 'density')\n# plt.plot(y_val,kind = 'density')\nsns.kdeplot(y_predV, color=\"green\", shade=True)\nsns.kdeplot(y_val, color=\"blue\", shade=True)\n\nresults = xgb_reg.evals_result()\nplt.figure(figsize=(10, 8))\nplt.plot(results['validation_0']['mape'], label='train')\nplt.plot(results['validation_1']['mape'], label='test')","d7d66318":"# temp = df[df.type == 'Train']\n# temp['pred_sold'] = np.append(y_predT,y_predV)\n# temp.groupby(['country','store','product'])['num_sold','pred_sold'].plot(legend = True)\n# plt.show()","f4644e57":"def mape(y, y_pred, **kwargs):\n    epsilon = np.finfo(np.float64).eps\n    mape = np.abs(y_pred - y) \/ np.maximum(np.abs(y), epsilon)\n    return np.mean(mape)\n","4b292659":"xgb_reg.fit(X, y)\npred_train = xgb_reg.predict(X)\npred_test = xgb_reg.predict(test_x)\ntrain_df = df[df.type == 'Train']\ntest_df = df[df.type == 'Test']\nprint('Mape: %.4f' % mape(train_df['num_sold'],pred_train))","5dac1bb7":"plt.figure(figsize=(12, 6), dpi=80)\nplt.plot(train_df['num_sold'],pred_train,'ro')\nplt.show()","f4f97f70":"plt.figure(figsize=(16, 8), dpi=80)\ndf[df.type == 'Train'].groupby(['country','store','product'])['num_sold'].plot(legend = True)\nplt.show()\ntrain_df['pred_sold'] = pred_train\nplt.figure(figsize=(16, 8), dpi=80)\ntrain_df.groupby(['country','store','product'])['pred_sold'].plot(legend = True)\nplt.show()\ntest_df['num_sold'] = pred_test\nplt.figure(figsize=(16, 8), dpi=80)\ntest_df.groupby(['country','store','product'])['num_sold'].plot(legend = True)\nplt.show()","5fe71108":"train_df.plot.scatter('num_sold','pred_sold')","ba57942e":"X","d7f8b5af":"output = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')\noutput['num_sold'] = np.exp(pred_test)\n\noutput.to_csv('submission.csv', index=False)","12b3c75a":"output.head()","2e6f72ea":"# Library","18d4729e":"# Data loading","3b60eedc":"# Visualization","07294011":"# Training XGBoost model"}}