{"cell_type":{"3170e768":"code","3fc80aba":"code","cd7a8ead":"code","b46846b6":"code","2c4bae4c":"code","2063c361":"code","9134826f":"code","f1818501":"code","cef74057":"code","9114305c":"code","92639f79":"code","37324758":"code","b5bc82ef":"code","5fe458f1":"code","87237737":"code","681f7d39":"code","04346eae":"code","bf70af05":"code","829a15cf":"code","88a27171":"code","a0e6690d":"code","f10426b8":"code","c0fe006a":"code","dc9138ce":"code","4a8e2715":"code","43700c74":"code","d3c8ce41":"code","03f6b7cf":"code","30dba3af":"code","a6a11728":"code","aeb9bb59":"markdown","24fc8290":"markdown","f9741589":"markdown","4d943b86":"markdown","b3947848":"markdown","a3f1e869":"markdown","d4231fef":"markdown","5fa3ee9e":"markdown","5d102deb":"markdown","bfbee0e7":"markdown","ee1bc496":"markdown","bba0ba86":"markdown","fe1473b3":"markdown","963ceb57":"markdown","4533c506":"markdown","8e48eeb8":"markdown","2a569991":"markdown","02d41a5c":"markdown","a079638d":"markdown","3c99a4fd":"markdown","fccc0050":"markdown","2b10b0f0":"markdown","225c3c08":"markdown","6310cba3":"markdown","b5035d88":"markdown","51d6a351":"markdown","8f2c73b0":"markdown","e0875d0f":"markdown","1bfe3c29":"markdown","fbd1dcbd":"markdown","c830f15e":"markdown","fe5bd465":"markdown","7504ce40":"markdown","dd3337f7":"markdown","1cf262cc":"markdown","60c93c06":"markdown","ea0c6527":"markdown","ce13636e":"markdown","ebfda0c0":"markdown"},"source":{"3170e768":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3fc80aba":"df = pd.read_csv(\"..\/input\/heart.csv\")\ndf.info()","cd7a8ead":"df.head()","b46846b6":"corr = df.corr()['target'].abs().sort_values()\ncorr","2c4bae4c":"# Helper function for plotting side by side\ndef sideplot(df, col, kind=\"bar\", title=None):\n    assert kind in [\"bar\", \"hist\"]\n    fig = plt.figure(figsize=(10, 6))\n    if kind == \"bar\":\n        ax1 = plt.subplot(2, 2, 1)\n        df[df.target == 1][['target', col]].groupby(col).count().plot(kind='bar', rot=0, legend=False, ax=ax1, color=\"#268bd2\")\n        ax2 = plt.subplot(2, 2, 2)\n        df[df.target == 0][['target', col]].groupby(col).count().plot(kind='bar', rot=0, legend=False, ax=ax2, color=\"#268bd2\")\n    else:\n        ax1 = plt.subplot(2, 2, 1)\n        plt.hist(df[df.target == 1][col], color=\"#268bd2\")\n        plt.xlabel(col)\n        ax2 = plt.subplot(2, 2, 2)\n        plt.hist(df[df.target == 0][col], color=\"#268bd2\")\n        plt.xlabel(col)\n    # Re-adjusting\n    ylim = (0, max(ax1.get_ylim()[1], ax2.get_ylim()[1]))\n    ax1.set_ylim(ylim)\n    ax2.set_ylim(ylim)\n    xlim = (min(ax1.get_xlim()[0], ax2.get_xlim()[0]), max(ax1.get_xlim()[1], ax2.get_xlim()[1]))\n    ax1.set_xlim(xlim)\n    ax2.set_xlim(xlim)\n    if title is not None:\n        fig.suptitle(title)\n    #plt.subplots_adjust(top=0.99)","2063c361":"sideplot(df, \"fbs\", kind=\"bar\", title=\"Comparison of fasting blood sugar\")","9134826f":"sideplot(df, \"chol\", kind=\"hist\", title=\"Comparison of serum cholestoral\")","f1818501":"sideplot(df, \"restecg\", kind=\"bar\", title=\"Comparison of resting ECG results\")","cef74057":"sideplot(df, \"trestbps\", kind=\"hist\", title=\"Comparison of resting blood pressure\")","9114305c":"sideplot(df, \"age\", kind=\"hist\", title=\"Comparison of age\")","92639f79":"sideplot(df, \"sex\", kind=\"bar\", title=\"Comparison of sex\")","37324758":"sideplot(df, \"thal\", kind=\"bar\", title=\"Comparison of (thal)\")","b5bc82ef":"sideplot(df, \"slope\", kind=\"bar\", title=\"Comparison of the slope of the peak exercise ST segment\")","5fe458f1":"sideplot(df, \"ca\", kind=\"bar\", title=\"Comparison of the number of major visible vessels under fluorosopy\")","87237737":"sideplot(df, \"thalach\", kind=\"hist\", title=\"Comparison of maximum heart rate achieved\")","681f7d39":"sideplot(df, \"oldpeak\", kind=\"hist\", title=\"Comparison of ST depression induced by exercise relative to rest\")","04346eae":"sideplot(df, \"cp\", kind=\"bar\", title=\"Comparison of chest pain type\")","bf70af05":"sideplot(df, \"exang\", kind=\"bar\", title=\"Comparison of exercise induced angina\")","829a15cf":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nclf = LDA(n_components=1)\n\ny = df[\"target\"].values\nX = clf.fit(df[df.columns[:-1]].values, y).transform(df[df.columns[:-1]].values)\nX = X[:, 0]\n\nsns.swarmplot(X[y == 0], color=\"b\", label=\"without HD\")\nsns.swarmplot(X[y == 1], color=\"r\", label=\"with HD\")\nplt.title(\"LDA analysis of heart disease classification\")\nplt.legend()","88a27171":"def onehot(ser, num_classes=None):\n    \"\"\"\n    One-hot encode the series.\n    Example: \n    >>> onehot([1, 0, 2], 3)\n    array([[0., 1., 0.],\n       [1., 0., 0.],\n       [0., 0., 1.]])\n    \"\"\"\n    if num_classes == None:\n        num_classes = len(np.unique(ser))\n    return np.identity(num_classes)[ser]\n\nnew_col_names = []\nneed_encode_col = [\"restecg\", \"thal\", \"slope\", \"cp\"]\nno_encode_col = [col for col in df.columns if col not in need_encode_col]\nnew_df = df[no_encode_col]\nfor col in need_encode_col:\n    num_classes = len(df[col].unique())\n    new_col_names = [f\"{col}_{i}\" for i in range(num_classes)]\n    encoded = pd.DataFrame(onehot(df[col], num_classes), columns=new_col_names, dtype=int)\n    new_df = pd.concat([new_df, encoded], axis=1)\nnew_df.head()","a0e6690d":"from sklearn.decomposition import PCA\nclf = PCA(n_components=2)\ndata_cols = [col for col in new_df.columns if col != \"target\"]\nX = new_df[data_cols]\ny = new_df[\"target\"]\nX_trans = clf.fit(X, y).transform(X)\nsns.scatterplot(X_trans[y == 0][:, 0], X_trans[y == 0][:, 1], color=\"b\", label=\"without HD\")\nsns.scatterplot(X_trans[y == 1][:, 0], X_trans[y == 1][:, 1], color=\"r\", label=\"with HD\")\nplt.title(\"PCA analysis of heart disease classification\")\nplt.legend()","f10426b8":"from sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nnew_df_shfl = shuffle(new_df, random_state=443)\nX = new_df_shfl[data_cols].values\ny = new_df_shfl[\"target\"].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=21)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=80)","c0fe006a":"num_epochs = 5000\nlog_inteval = 250\ntotal_losses = []\ntotal_val_losses = []\nlr = 1e-4\nlr_decay_inteval = 2500\nlr_decay_rate = 0.3","dc9138ce":"import torch\nfrom torch import nn, optim\nmodel = nn.Sequential(\n    nn.Linear(len(data_cols), 80),\n    nn.ReLU(),\n    nn.Dropout(0.3),\n    nn.Linear(80, 256),\n    nn.ReLU(),\n    nn.Dropout(0.6),\n    nn.Linear(256, 1),\n)\nloss_fn = torch.nn.BCELoss()\nopt = optim.Adam(model.parameters(), lr=lr)\n\ndef init_normal(m):\n    if type(m) == nn.Linear:\n        nn.init.xavier_normal_(m.weight, 0.06)\n\nmodel.apply(init_normal)","4a8e2715":"for epoch in range(1, num_epochs+1):\n    y_pred = model(torch.tensor(X_train, dtype=torch.float))\n    y_pred = torch.sigmoid(y_pred)\n    opt.zero_grad()\n    loss = loss_fn(y_pred[:, 0], torch.tensor(y_train, dtype=torch.float))\n    loss.backward()\n    opt.step()\n    total_losses.append(loss.item())\n    if epoch % log_inteval == 0: # Logging\n        epochs_ran = epoch\n        model.eval()\n        with torch.no_grad():\n            y_pred = model(torch.tensor(X_test, dtype=torch.float))\n            y_pred = torch.sigmoid(y_pred)\n            val_loss = loss_fn(y_pred[:, 0], torch.tensor(y_test, dtype=torch.float))\n            total_val_losses.append(val_loss.item())\n        model.train()\n        print(f\"total loss in epoch {epoch} = {'%.4f'%loss}, validation loss = {'%.4f'%val_loss}, lr = {'%.2e'%lr}\")\n        if len(total_val_losses) > 3 and val_loss.item() > total_val_losses[-2] and val_loss.item() > total_val_losses[-3]:\n            print(f\"Validation loss not improving for {log_inteval * 2} epochs, stopping...\")\n            break\n    if epoch % lr_decay_inteval == 0: # Learning rate decay\n        lr *= lr_decay_rate\n        for param_group in opt.param_groups:\n            param_group['lr'] = lr","43700c74":"plt.plot(total_losses, 'b', label=\"train\")\nplt.plot(np.array(range(epochs_ran \/\/ log_inteval)) * log_inteval + log_inteval, total_val_losses, 'r', label=\"valid\")\nplt.ylim([0, 1])\nplt.title(\"Learning curve\")\nplt.legend()","d3c8ce41":"from sklearn.metrics import confusion_matrix\nwith torch.no_grad():\n    model.eval()\n    y_pred = model(torch.tensor(X_test, dtype=torch.float))\n    y_pred_lbl = np.where(y_pred.numpy() > 0, 1, 0)\ncm = pd.DataFrame(confusion_matrix(y_test, y_pred_lbl), columns=[\"T\", \"F\"], index=[\"P\", \"N\"])\nprint(\"Accuracy = %.2f%%\" % ((cm.iloc[1, 1] + cm.iloc[0, 0]) \/ cm.values.sum() * 100))\ncm","03f6b7cf":"import lightgbm as lgb\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_valid = lgb.Dataset(X_valid, y_valid, reference=lgb_train)","30dba3af":"params = {\n    \"num_iterations\": 1000,\n    \"num_leaves\": 63,\n    \"max_depth\": 7,\n    \"max_bin\": 500,\n    \"learning_rate\": 0.001,\n    \"min_data_in_leaf\": 1,\n    \"objective\": \"binary\",\n    \"metric\": [\"binary\"],\n}\n\nbst = lgb.train(params, lgb_train, valid_sets=[lgb_valid], early_stopping_rounds=50, verbose_eval=100)","a6a11728":"y_pred = bst.predict(X_test)\ny_pred_lbl = np.where(y_pred > 0.5, 1, 0)\ncm = pd.DataFrame(confusion_matrix(y_test, y_pred_lbl), columns=[\"T\", \"F\"], index=[\"P\", \"N\"])\nprint(\"Accuracy = %.2f%%\" % ((cm.iloc[1, 1] + cm.iloc[0, 0]) \/ cm.values.sum() * 100))\ncm","aeb9bb59":"### the slope of the peak exercise ST segment (slope)\n*Adjusted from data description*\n- Value 0: upsloping\n- Value 1: flat\n- Value 2: downsloping","24fc8290":"First, let's encode the enum-like features.","f9741589":"Fasting blood sugar is an important feature for measuring diabetes.  \nThough it is not directly related to heart diseases, It is pointed out that people with diabetes have a higher epidemiological estimate lifetime risk (LTR) of chronical heart disease<sup>1<\/sup>.\n\nJin C<sup>2<\/sup> finds out that the trajectories of fasting blood sugar are significantly associated with the risk of myocardio infarction. Since we only have a single value instead of continuous data, it does not look quite useful here to analyse heart disease.\n\n<hr \/>\n\n1: Turin TC, Okamura T, Rumana N, Afzal AR, Watanabe M, Higashiyama A, Nakao YM, \nNakai M, Takegami M, Nishimura K, Kokubo Y, Okayama A, Miyamoto Y. Diabetes and\nlifetime risk of coronary heart disease. Prim Care Diabetes. 2017\nOct;11(5):461-466. doi: 10.1016\/j.pcd.2017.04.007. Epub 2017 May 22. PubMed PMID:\n28545843.\n\n2: Jin C, Chen S, Vaidya A, Wu Y, Wu Z, Hu FB, Kris-Etherton P, Wu S, Gao X.\nLongitudinal Change in Fasting Blood Glucose and Myocardial Infarction Risk in a \nPopulation Without Diabetes. Diabetes Care. 2017 Nov;40(11):1565-1572. doi:\n10.2337\/dc17-0610. Epub 2017 Sep 8. PubMed PMID: 28887409; PubMed Central PMCID: \nPMC5652588.","4d943b86":"We can see from the LDA graph above that the labelled data are approximately separable.  \nIt seems the model we are going to train will have a comparably good performance.","b3947848":"In exercise, the heart will consume more oxygen and nutrient, which can introduce shortage of blood transmitted to the heart by coronary arteries.\n\nAs we learned above, if myocardium lack blood for a long time, the cells in myocardium will be damaged, which can result in depression in ST segment. This feature will expose some not-easy-to-detect heart diseases.","a3f1e869":"### Neural network","d4231fef":"## Part I: Comparison between people with(left) and without(right) heart diseases\nIn this part, I will answer the following two questions with side-by-side plot of each feature:\n\n1. How these fields are related to heart disease?\n2. Why these fields can be used to diagnose heart disease?","5fa3ee9e":"# Clinical Data Explanation and Standard EDA","5d102deb":"People who have higher cholesterol in their blood (or hypercholesterolemia) are more likely to have their blood vessels narrowed with more cholesterol (mostly LDL cholesterol) precipited, which is known as atherosclerosis.\n\nCoronary heart disease, which is one of the most common heart diseases, comes from lack of blood supply for the heart because of atherosclerosis of coronary arteries.","bfbee0e7":"In ECG, all the three ST-T wave abnormality menstioned(T wave inversion; ST elevation; ST depression of greater than 0.05 mV) are possible signs of myo infarction.  \nT wave inversion is a sign of lacking blood in endocardium, while ST abnomality indicates there are some damage to the myocardium due to lack of blood for a relatively long period of time.","ee1bc496":"This is my first public kernel.  \nAs a student studying clinical medicine, I put the emphasis on clinical explanation of the data rather than the implementation of classification model.\n\nIf you think this kernel is useful, I would appreciate it if you give me a vote up.  \nIf you find some mistakes, contact me and I will correct them as soon as possible.  \n**Thanks for reading!**","bba0ba86":"First let's train a 3-layer neural network and see what it gave us.\n\nNeural networks are one of the most widely used models today.","fe1473b3":"### (thal)\nSorry, I don't know what `thal` means in the dataset. The description shows that it has 3 acceptable values:\n\n- 3 = normal\n- 6 = fixed defect\n- 7 = reversable defect\n\nBut the data here are labeled 0-4. Maybe we should contact the dataset provider.","963ceb57":"Before we train the classifier, we should generally:\n\n1. encode the enum-like features, as non-continuous values should not be considered as continuous ones, since they can have some bad effect on the final result.\n2. analyse & drop the outliers.\n3. normalize the features to be centered to 0, as some models will be badly affected by that.","4533c506":"### Resting electrocardiographic results (restecg)\n- Value 0: normal\n- Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n- Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria ","8e48eeb8":"Then we can look at if there are some outliers, for example, with principle component analysis (or PCA).  \nPCA will try to maximize the variance of data.","2a569991":"### Preprocessing\n**NOTE: PREPROCESSING IS CRITICAL TO IMPROVE ACCURACY!!!**","02d41a5c":"Present research <sup>1, 2<\/sup> shows that the number of patients with typical angina are not significantly different from that with atypical angina and non-anginal pain.\n\nIt seems that patients with atypical angina and non-anginal pain are more likely to have a heart disease here, which are contradict with the research results, may come from the following reasons:\n\n- The result may be true due to lack of data (we only have 306 records here).\n- Indeed atypical angina and non-anginal pain are more likely to have a heart disease.\n\n<hr \/>\n\n1: Bugaenko VV, Lomakovski\u012d AN. [Alterations in coronary arteries and frequency\nof episodes of transient myocardial ischemia in patients with ischemic heart\ndisease with typical and atypical angina pectoris]. Lik Sprava. 2002;(2):27-31.\nRussian. PubMed PMID: 12073253.\n\n\n2: Hermann LK, Weingart SD, Yoon YM, Genes NG, Nelson BP, Shearer PL, Duvall WL, \nHenzlova MJ. Comparison of frequency of inducible myocardial ischemia in patients\npresenting to emergency department with typical versus atypical or nonanginal\nchest pain. Am J Cardiol. 2010 Jun 1;105(11):1561-4. doi:\n10.1016\/j.amjcard.2010.01.014. Epub 2010 Apr 10. PubMed PMID: 20494662.\n","a079638d":"Let's use lightgbm to train the model.\n\nLightgbm instead use gradient boost to train a decision tree model.","3c99a4fd":"### Fasting blood sugar(FBS)\nPeople with FBS higher than 120 mg\/dl are marked as 1, else 0.","fccc0050":"### chest pain type (cp)\n- Value 0: asymptomatic\n- Value 1: typical angina\n- Value 2: atypical angina\n- Value 3: non-anginal pain","2b10b0f0":"Here is other fields' correlation with target.\nMost fields are highly correlated with heart disease.","225c3c08":"### exercise induced angina (exang)","6310cba3":"### Serum cholestoral(chol)","b5035d88":"### number of major vessels colored by fluorosopy (ca)\n*The data description says that the number of major vessels ranges from 0 to 3, but actually it ranges from 0 to 4*","51d6a351":"In this kernel, I'm going to explain the data with some related information about heart disease.\n\nThere are two parts in this kernel.  \nIn the first part, I will answer the following two questions:\n\n1. How these fields are related to heart disease?\n2. Why these fields can be used to diagnose heart disease?\n\nIn the second part, I will give a basic classification solution with 3-layer NN and lightgbm.\nThe best accuracy recorded is *95%* with lightgbm.\n\n**Note that the original data descriptions do not correspond to the data, thus I've manually modified them to make them look more realistic.**","8f2c73b0":"We can see a handful of outliers at about (320, -20) and maybe around (150, -10).  \nWe can use sklearn.covariance.EllipticEnvelope for example to drop the outliers if your model will be greatly affected by outliers.","e0875d0f":"Let's plot the differences between people with and without heart diseases side by side.\n\nFields that are more correlated with heart diseases are put at the bottom.","1bfe3c29":"There are two major coronary arteries providing nutrition for the heart. The left one has 3 major branches, and the right one has 5 major branches.\n\nUnder fluorosopy, only arteries that have a stable blood transmission can be shown clearly.  \nWhich means the less visible vessels, the worse the heart can receive adequate nutrient and oxygen, and the greater the possibility the patient will suffer a heart attack.","fbd1dcbd":"TODOS:\n\n1. I saw many kernels have [code\/hide] buttons on the upper right of the cell. How to do that?\n2. Fine-tune the model.","c830f15e":"### Age","fe5bd465":"### ST depression induced by exercise relative to rest (oldpeak)","7504ce40":"### maximum heart rate achieved(thalach)","dd3337f7":"### Gradient boost","1cf262cc":"## Part II: Basic classification solution\n\nIn this part, I am going to give a basic heart disease classification solution with pytorch.\n\nFirst, let's predict how well the classification model can perform by using linear discriminant analysis (or LDA)  \nThe LDA process similarly as PCA by reducing dimensions of the data, but it tends to make data with different labels most discriminable.","60c93c06":"First, we need to handle null values.  \nHopefully there are no null values in this dataset.","ea0c6527":"If not controlled, continuous status of high blood pressure can result in congestive heart failure.  \nIn most circumstances, people with high blood pressure also suffered from coronary heart diseases, as high blood pressure can contribute to atherosclerosis.","ce13636e":"### Resting blood pressure (trestbps)\nThe data seems to be systolic blood pressure.\n\nIn most countries, the normal blood pressure is around 120\/80. The 2019 standard of high blood pressure (or hypertension) is over 130\/80 in America.","ebfda0c0":"### Sex\n1 = male; 0 = female"}}