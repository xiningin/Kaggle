{"cell_type":{"d3825eeb":"code","89f22b0a":"code","0a236415":"code","57cdf582":"code","c1aa1451":"code","670c7a2d":"code","d8680472":"code","465ee28d":"code","a42b3bcb":"code","19910c21":"code","ec887c8d":"code","3e210259":"code","d1db0e49":"code","c188840f":"code","0fabb092":"code","24fdea16":"code","977492a2":"code","8f54587c":"code","0d6136cc":"code","21e1561f":"code","ea1572be":"code","85ed2021":"markdown","41090d85":"markdown","13f03119":"markdown","e1957ee5":"markdown","b3380ff6":"markdown","aae09c5b":"markdown","4d063ed4":"markdown","48e20cf4":"markdown","a76b9a2c":"markdown","25002cfc":"markdown","541515b1":"markdown","b312e529":"markdown","f3374979":"markdown"},"source":{"d3825eeb":"import os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom kaggle_datasets import KaggleDatasets\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom tqdm.notebook import tqdm\nfrom tokenizers import Tokenizer, models, pre_tokenizers, decoders, processors\nimport pickle\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline","89f22b0a":"def build_model(transformer, max_len=512):\n    \"\"\"\n    https:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-distilbert-with-huggingface-and-keras\n    \"\"\"\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(cls_token)\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    model.compile(Adam(lr=0.000009), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","0a236415":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","57cdf582":"AUTO = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nMAX_LEN = 192\nMODEL = '..\/input\/huggingface-bert-variants\/distilbert-base-uncased\/distilbert-base-uncased'","c1aa1451":"# First load the real tokenizer\ntokenizer = AutoTokenizer.from_pretrained(MODEL)","670c7a2d":"!ls \/kaggle\/input\/jigsawtpuxlmrobertacopypickledata","d8680472":"def regular_encode(texts, tokenizer, maxlen=512):\n    enc_di = tokenizer.batch_encode_plus(\n        texts, # text to tokenize\n        return_token_type_ids=False, # https:\/\/huggingface.co\/transformers\/glossary.html#token-type-ids\n        pad_to_max_length=True, # add padding\n        max_length=maxlen # set max length\n    )\n    \n    return np.array(enc_di['input_ids'])","465ee28d":"%%time\n\nds = 0.45 # the percentage amount of data to remove\n\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_train.pkl\"\nx_train = pickle.load(open(filename, 'rb')) # load data \nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_train.pkl\"\ny_train = pickle.load(open(filename, 'rb')) # load data \n# further downsample since we're running on GPU (which will take longer without multi-TPU processing)\nx_train, _, y_train, _ = train_test_split(x_train, y_train, test_size=ds, random_state=42) \n\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_trainOA.pkl\"\nx_trainOA = pickle.load(open(filename, 'rb')) # load data \nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_trainOA.pkl\"\ny_trainOA = pickle.load(open(filename, 'rb')) # load data \n# further downsample since we're running on GPU (which will take longer without multi-TPU processing)\nx_trainOA, _, y_trainOA, _ = train_test_split(x_trainOA, y_trainOA, test_size=ds, random_state=42) \n\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_trainA.pkl\"\nx_trainA = pickle.load(open(filename, 'rb')) # load data \nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_trainA.pkl\"\ny_trainA = pickle.load(open(filename, 'rb')) # load data \n# further downsample since we're running on GPU (which will take longer without multi-TPU processing)\nx_trainA, _, y_trainA, _ = train_test_split(x_trainA, y_trainA, test_size=ds, random_state=42) \n\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_valid.pkl\"\nx_valid = pickle.load(open(filename, 'rb')) # load data \nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_valid.pkl\"\ny_valid = pickle.load(open(filename, 'rb')) # load data \n# further downsample since we're running on GPU (which will take longer without multi-TPU processing)\nx_valid, _, y_valid, _ = train_test_split(x_valid, y_valid, test_size=ds, random_state=42) \n\nfilename = \"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\"\nx_test_df = pd.read_csv(filename) # load data \nx_test = regular_encode(x_test_df.text.values.tolist(), tokenizer, maxlen=MAX_LEN)","a42b3bcb":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat()\n    .shuffle(2048)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\ntrain_datasetOA = (\n    tf.data.Dataset\n    .from_tensor_slices((x_trainOA, y_trainOA))\n    .repeat()\n    .shuffle(x_trainOA.shape[0])\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\ntrain_datasetA = (\n    tf.data.Dataset\n    .from_tensor_slices((x_trainA, y_trainA))\n    .repeat()\n    .shuffle(x_trainOA.shape[0])\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_valid, y_valid))\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test)\n    .batch(BATCH_SIZE)\n)","19910c21":"%%time\nwith strategy.scope():\n    transformer_layer = TFAutoModel.from_pretrained(MODEL)\n    model = build_model(transformer_layer, max_len=MAX_LEN)\nmodel.summary()","ec887c8d":"n_steps = x_train.shape[0] \/\/ BATCH_SIZE\n\nmodel.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=1\n)","3e210259":"checkpointPredictions1 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions1[:10])","d1db0e49":"n_steps = x_trainA.shape[0] \/\/ BATCH_SIZE\n\nmodel.fit(\n    train_datasetA,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=1\n)","c188840f":"checkpointPredictions2 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions2[:10])","0fabb092":"n_steps = x_valid.shape[0] \/\/ BATCH_SIZE\n\nmodel.fit(\n    valid_dataset.repeat(),\n    steps_per_epoch=n_steps,\n    epochs=2\n)","24fdea16":"checkpointPredictions3 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions3[:10])","977492a2":"n_steps = x_trainOA.shape[0]  \/\/ BATCH_SIZE\n\nmodel.fit(\n    train_datasetOA,\n    steps_per_epoch=n_steps,\n    epochs=1\n)","8f54587c":"checkpointPredictions4 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions4[:10])","0d6136cc":"sub = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/sample_submission.csv')\nsub['score'] = (checkpointPredictions1*0.05)+(checkpointPredictions2*0.10)+(checkpointPredictions3*0.76)+(checkpointPredictions4*0.09)\nsub['score'] = sub['score'].rank(method='first')\nsub.to_csv('submission.csv', index=False)","21e1561f":"plt.hist(sub.score.values)\nplt.show()","ea1572be":"sub.head(30)","85ed2021":"# Tokenizer","41090d85":"#### Train on multilingual validation training data","13f03119":"# Submission","e1957ee5":"# Train","b3380ff6":"# Load Data","aae09c5b":"#### Train on augmented english data","4d063ed4":"#### Train on multilingual external data (created using SSL techniques)","48e20cf4":"# Configs","a76b9a2c":"#### Train on English training data","25002cfc":"# TF Datasets","541515b1":"# New Notes:\n\n- Forked https:\/\/www.kaggle.com\/yeayates21\/xlm-roberta-augmentation-ssl-0-9417-pub-lb\n- Added https:\/\/www.kaggle.com\/vecxoz\/jplu-tf-xlm-roberta-large so we can run without internet\n- Revised to score Jigsaw Severity test set\n- Running on DistilBERT to reduce memory usage for transition from TPU to GPU\n\n# Old Notes:\n\n**Kaggle Sources**\n - https:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-xlm-roberta\n     - forked this notebook\n - https:\/\/www.kaggle.com\/shonenkov\/tpu-training-super-fast-xlmroberta\n     - grabed external data from this notebook, i.e. https:\/\/www.kaggle.com\/shonenkov\/open-subtitles-toxic-pseudo-labeling\n     \n**External Sources and More Additions**\n - Used [eda_nlp](https:\/\/github.com\/jasonwei20\/eda_nlp) to create an augmented version of the unintended bias dataset, then downsampled this data to have balanced dataset.  More information can be found here (minus the downsampling):  https:\/\/www.kaggle.com\/yeayates21\/jigsaw-bias-toxicity-eda-nlp-aug16-alpha005\n - pickled encoded data for faster runtime\n - some light manual hyperparameter tuning\n - scored the test set with each \"model.fit\" run as \"checkpoint predictions\" and blended the checkpoint predictions (I didn't checkpoint the models, but that could be easily added).\n\n-----------------------------------------------------------------------\n\n#### Acknowledgements\n\n - [@alexshonenkov](https:\/\/www.kaggle.com\/shonenkov)\n - [@xhlulu](https:\/\/www.kaggle.com\/xhlulu)\n","b312e529":"# Helper Functions","f3374979":"# Load Model"}}