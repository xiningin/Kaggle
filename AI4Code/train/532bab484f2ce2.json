{"cell_type":{"e636a2ce":"code","a58dd144":"code","886c9b8f":"code","d9965b70":"code","4c4b84db":"code","d722da6a":"code","ca3cbca4":"code","1a550ec7":"code","7f42c176":"code","ea611e62":"code","b10a7de7":"code","a7d335b3":"code","023538d3":"code","ba8392e4":"code","8d6cf2c5":"code","92d1507b":"code","3f95d38d":"code","a7ab560e":"code","4fa5e508":"code","0e7f24c5":"code","d6582c31":"code","c569ca2d":"code","57ecb24f":"code","6495ec1a":"code","21de9399":"code","2524cbc0":"code","ae38c066":"code","fb357c18":"code","7134f791":"code","4659b205":"code","630dd277":"code","0d859b1f":"code","e010d680":"code","a92e3611":"code","316dd561":"code","1e8c3608":"code","56b49bba":"code","95b471a6":"code","441521f6":"code","dff9f90f":"code","8f2772db":"code","578ad796":"code","424f71d7":"markdown","ca08e4c6":"markdown","8e416c0b":"markdown","be408255":"markdown","d742ddf4":"markdown","aed32565":"markdown","52ce1443":"markdown","00256196":"markdown","0e8359c5":"markdown","11346832":"markdown","0b73af15":"markdown","fe90fda1":"markdown","032170d4":"markdown","8ffbf432":"markdown","b2921b2a":"markdown","bdcc0282":"markdown","efcd57ea":"markdown"},"source":{"e636a2ce":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\n\nfrom sklearn.metrics import roc_auc_score\n\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE","a58dd144":"train = pd.read_csv('..\/input\/anomaly-detection\/Participants_Data_WH18\/Train.csv')\ntrain.head()","886c9b8f":"test = pd.read_csv(\"..\/input\/anomaly-detection\/Participants_Data_WH18\/Test.csv\")\ntest.head(2)","d9965b70":"train[\"Class\"].value_counts()","4c4b84db":"plt.hist(train[\"Class\"])","d722da6a":"for i in train.columns[:3]:\n    plt.hist(train[i])\n    plt.title(i)\n    plt.show()","ca3cbca4":"Sm = SMOTE()\nX = train.drop(\"Class\", axis = 1)\ny = train[\"Class\"]","1a550ec7":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.1, stratify = y)\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","7f42c176":"x_train, y_train = Sm.fit_resample(X_train, y_train)\nx_train.shape, y_train.shape, y_train.value_counts()","ea611e62":"x_train_re, x_valid_re, y_train_re, y_valid_re = train_test_split(x_train, y_train, test_size = 0.1, stratify = y_train)","b10a7de7":"from sklearn.ensemble import RandomForestClassifier\nimport catboost\nfrom sklearn.metrics import auc, roc_curve","a7d335b3":"def metric(preds, target):\n    fpr, tpr, thresholds = roc_curve(target, preds)\n    return auc(fpr, tpr)","023538d3":"Rf = RandomForestClassifier()\nmodel_Rf = Rf.fit(x_train_re, y_train_re)\npreds = model_Rf.predict(x_valid_re)\nprint(metric(preds, y_valid_re))\n","ba8392e4":"pca = PCA(n_components=3, random_state=52)","8d6cf2c5":"pca_result = pca.fit_transform(X)","92d1507b":"print(pca.explained_variance_ratio_)","3f95d38d":"train_copy = train.copy()\ntrain_copy['pca-one'] = pca_result[:,0]\ntrain_copy['pca-two'] = pca_result[:,1] \ntrain_copy['pca-three'] = pca_result[:,2]","a7ab560e":"rndperm = np.random.permutation(train_copy.shape[0])\nplt.figure(figsize=(10,8))\nsns.scatterplot(\n    x=\"pca-one\", y=\"pca-two\",\n    hue=\"Class\",\n    palette=sns.color_palette(\"hls\", 2),\n    data= train_copy.loc[rndperm,:],\n    legend=\"full\",\n    alpha=0.3\n)","4fa5e508":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=train_copy.loc[rndperm,:][\"pca-one\"], \n    ys=train_copy.loc[rndperm,:][\"pca-two\"], \n    zs=train_copy.loc[rndperm,:][\"pca-three\"], \n    c=train_copy.loc[rndperm,:][\"Class\"], \n    cmap='tab10'\n)\nax.set_xlabel('pca-one')\nax.set_ylabel('pca-two')\nax.set_zlabel('pca-three')\nplt.show()","0e7f24c5":"import time\ntime_start = time.time()\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntsne_results = tsne.fit_transform(X)","d6582c31":"train_copy['tsne-2d-one'] = tsne_results[:,0]\ntrain_copy['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(10,8))\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    hue=\"Class\",\n    palette=sns.color_palette(\"hls\", 2),\n    data=train_copy,\n    legend=\"full\",\n    alpha=0.3\n)","c569ca2d":"pca_50 = PCA(n_components=50)\npca_result_50 = pca_50.fit_transform(X)\nprint('Cumulative explained variation for 50 principal components: {}'.format(np.sum(pca_50.explained_variance_ratio_)))","57ecb24f":"time_start = time.time()\ntsne = TSNE(n_components=2, verbose=0, perplexity=40, n_iter=1000)\ntsne_pca_results = tsne.fit_transform(pca_result_50)\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))","6495ec1a":"train_copy['tsne-pca50-one'] = tsne_pca_results[:,0]\ntrain_copy['tsne-pca50-two'] = tsne_pca_results[:,1]\nplt.figure(figsize=(16,4))\nax1 = plt.subplot(1, 3, 1)\nsns.scatterplot(\n    x=\"pca-one\", y=\"pca-two\",\n    hue=\"Class\",\n    palette=sns.color_palette(\"hls\", 2),\n    data=train_copy,\n    legend=\"full\",\n    alpha=0.3,\n    ax=ax1\n)\nax2 = plt.subplot(1, 3, 2)\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    hue=\"Class\",\n    palette=sns.color_palette(\"hls\", 2),\n    data=train_copy,\n    legend=\"full\",\n    alpha=0.3,\n    ax=ax2\n)\nax3 = plt.subplot(1, 3, 3)\nsns.scatterplot(\n    x=\"tsne-pca50-one\", y=\"tsne-pca50-two\",\n    hue=\"Class\",\n    palette=sns.color_palette(\"hls\", 2),\n    data=train_copy,\n    legend=\"full\",\n    alpha=0.3,\n    ax=ax3\n)","21de9399":"train = pd.read_csv('..\/input\/anomaly-detection\/Participants_Data_WH18\/Train.csv')\ntrain.head(2)","2524cbc0":"train = train.T.drop_duplicates().T","ae38c066":"train.shape","fb357c18":"plt.rcParams['figure.figsize'] = 20,6\nplt.subplot(131)\nsns.boxplot(train[\"Class\"], train[\"feature_1\"])\nplt.subplot(132)\nsns.boxplot(train[\"Class\"], train[\"feature_2\"])\nplt.subplot(133)\nsns.boxplot(train[\"Class\"], train[\"feature_3\"])\n","7134f791":"df = pd.DataFrame((train == 0).astype(int).sum(axis=0))","4659b205":"df","630dd277":"all_zero = df[df[0]>1761].index\n\ntrain.drop(all_zero,axis=1,inplace=True)","0d859b1f":"train.info()","e010d680":"X = train.drop(\"Class\", axis = 1)\ny = train[\"Class\"]\n\nX_train, X_valid , y_train, y_valid = train_test_split(X, y, test_size = 0.2, stratify = y)","a92e3611":"from xgboost import XGBClassifier","316dd561":"model = XGBClassifier(silent=True,\n                      booster = 'gbtree',\n                      scale_pos_weight=5,\n                      learning_rate=0.01,  \n                      colsample_bytree = 0.7,\n                      subsample = 0.5,\n                      max_delta_step = 3,\n                      reg_lambda = 2,\n                     objective='binary:logistic',\n                      \n                      n_estimators=818, \n                      max_depth=8,\n                     )","1e8c3608":"%%time\neval_set = [(X_valid, y_valid)]\neval_metric = [\"logloss\"]\nmodel.fit(X_train, y_train,early_stopping_rounds=50, eval_metric=eval_metric, eval_set=eval_set)","56b49bba":"predictions = model.predict_proba(X_valid)[:, -1]\n\nscore = roc_auc_score(y_valid, predictions)\nscore","95b471a6":"pca_3 = PCA(n_components=3)\npca_result_3 = pca_3.fit_transform(X)\nprint('Cumulative explained variation for 50 principal components: {}'.format(np.sum(pca_50.explained_variance_ratio_)))","441521f6":"df_3 = pd.DataFrame(pca_result_3, columns=[\"pca1\", 'pca2', 'pca3'])\n\ndf_3.head(2)","dff9f90f":"X_train, X_valid , y_train, y_valid = train_test_split(df_3, y, test_size = 0.2, stratify = y)","8f2772db":"%%time\neval_set = [(X_valid, y_valid)]\neval_metric = [\"logloss\"]\nmodel.fit(X_train, y_train,early_stopping_rounds=50, eval_metric=eval_metric, eval_set=eval_set)","578ad796":"predictions = model.predict_proba(X_valid)[:, -1]\n\nscore2 = roc_auc_score(y_valid, predictions)\nscore2","424f71d7":"# t-SNE","ca08e4c6":"# PCA for Dimensionality Reduction","8e416c0b":"Resampling the Training Dataset (oversampling is used) to create a balance in the train set.","be408255":"Using the PCA to remove some columns from the Dataset","d742ddf4":"Principal Component Analysis is that technique which is used to reduce the dimensionality of the Dataset. In short it is used to reduce the number of columns in a dataset. No we dont just throw away the columns directly but do this reduction in number of columns systematically using some Math behind it which is taking out the principal component axes using Eigen values and Eigen vectors. These axes which we get are actually very good at explaining the entire variance in the dataset by not loosing much of the dataset information. \n\nIn short these axes or principal components helps us to represent our high dimensional data with equivalent information on a lower dimension space. PCA is a very popular technique in Dimensionality reduction. We would try to use PCA on our Dataset and also try to use T-sne algorithm to visualize our reduced dataset.","aed32565":"3D version of the same plot:","52ce1443":"Evaluating the model","00256196":"Here in the first section we will try to visualize and explain what PCA is and how do we actually reduce the number of columns in a dataset known popularly as 'curse of dimensionality'. THen we will also visualize a high dimension dataset using t-SNE to visually see if the data is actually separable or not. And lastly will use PCA and then t-SNE to visualize the data.\n\nIn the second section we will use a normal approach and build a model using XGBoostClassifier.","0e8359c5":"Splitting the original Dataset to create a Test set","11346832":"Building the model","0b73af15":"For this we will use our original Dataset.","fe90fda1":"Training a simple Classifier using Random Forest and Catboost","032170d4":"Lets check if the number of unique values in the dataset is only 1 and if that is the case just delete it.","8ffbf432":"# Resampling the Data\n\nHere we will first remove a test set from our original Dataset and then  resample our train dataset using SMOTE. This will give us a Datset which is untouched and on which we can test our final model. We will also create a validation dataset from our training to use cross validation techniques.","b2921b2a":"# Normal Approach","bdcc0282":"lets check if there are any duplicate columns present in the Dataset","efcd57ea":"# Using PCA and t-SNE together\n\nWe will now use the reduced dimensions from the PCA to visualize the data using t-SNE."}}