{"cell_type":{"38cb17f3":"code","a6873919":"code","fb83f76b":"code","b31253a3":"code","f6fa62af":"code","62300a5d":"code","d05bc0a0":"code","48698472":"code","c970f105":"code","e37086e4":"code","fa658753":"code","b3f2690d":"code","b86a0020":"code","c37d3eb0":"code","bb97af91":"code","f506f4df":"code","c829ae18":"code","ecb276cf":"code","89ec5ae6":"code","c4e4a116":"code","d33c69ce":"code","0616f0c6":"code","4809139d":"code","e1e3f1da":"code","f2cab4c4":"code","d931b186":"code","fffc0d72":"code","1965550e":"code","8a6844eb":"code","6b165ba9":"code","31517609":"markdown","f4fa96bc":"markdown","e025c9cc":"markdown","09223b98":"markdown","ab7fc33d":"markdown","b2a3d905":"markdown","85fc2117":"markdown","f55a95e5":"markdown","7f89db9b":"markdown","f5555d63":"markdown","c662eab0":"markdown","61c26161":"markdown","87f1895c":"markdown","4054e238":"markdown","fd02987b":"markdown","8c8e5209":"markdown","31d1745a":"markdown","2145e477":"markdown","a83f693b":"markdown","dda3b840":"markdown","25d076f2":"markdown","ee762057":"markdown","01c85caf":"markdown","f41ed2bf":"markdown","0ec17054":"markdown","5f8466fd":"markdown","39cc7247":"markdown","40b1857b":"markdown"},"source":{"38cb17f3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nfrom PIL import Image, ImageOps\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nimport tensorflow as tf","a6873919":"images = []\nages = []\ngenders = []\n\nfor i in os.listdir('..\/input\/utkface-new\/crop_part1\/')[0:8000]:\n    split = i.split('_')\n    ages.append(int(split[0]))\n    genders.append(int(split[1]))\n    images.append(Image.open('..\/input\/utkface-new\/crop_part1\/' + i))","fb83f76b":"images = pd.Series(list(images), name = 'Images')\nages = pd.Series(list(ages), name = 'Ages')\ngenders = pd.Series(list(genders), name = 'Genders')\n\ndf = pd.concat([images, ages, genders], axis=1)\ndf","b31253a3":"display(df['Images'][0])\nprint(df['Ages'][0], df['Genders'][0])","f6fa62af":"display(df['Images'][1])\nprint(df['Ages'][1], df['Genders'][1])","62300a5d":"sns.set_theme()\nsns.distplot(df['Ages'],kde=True, bins=30)","d05bc0a0":"under4s = []\n\nfor i in range(len(df)):\n    if df['Ages'].iloc[i] <= 4:\n        under4s.append(df.iloc[i])\nunder4s = pd.DataFrame(under4s)\nunder4s = under4s.sample(frac=0.3)\n\ndf = df[df['Ages'] > 4]\n\ndf = pd.concat([df, under4s], ignore_index = True)","48698472":"sns.distplot(df['Ages'],kde=True, bins=30)","c970f105":"df = df[df['Ages'] < 80]","e37086e4":"sns.distplot(df['Ages'],kde=True, bins=20)","fa658753":"sns.countplot(df['Genders'])","b3f2690d":"df = df[df['Genders'] != 3]\nsns.countplot(df['Genders'])","b86a0020":"x = []\ny = []\n\nfor i in range(len(df)):\n    df['Images'].iloc[i] = df['Images'].iloc[i].resize((200,200), Image.ANTIALIAS)\n    ar = np.asarray(df['Images'].iloc[i])\n    x.append(ar)\n    agegen = [int(df['Ages'].iloc[i]), int(df['Genders'].iloc[i])]\n    y.append(agegen)\nx = np.array(x)","c37d3eb0":"y_age = df['Ages']\ny_gender = df['Genders']\n\nx_train_age, x_test_age, y_train_age, y_test_age = train_test_split(x, y_age, test_size=0.2, stratify=y_age)\nx_train_gender, x_test_gender, y_train_gender, y_test_gender = train_test_split(x, y_gender, test_size=0.2, stratify=y_gender)","bb97af91":"agemodel = Sequential()\nagemodel.add(Conv2D(32, (3,3), activation='relu', input_shape=(200, 200, 3)))\nagemodel.add(MaxPooling2D((2,2)))\nagemodel.add(Conv2D(64, (3,3), activation='relu'))\nagemodel.add(MaxPooling2D((2,2)))\nagemodel.add(Conv2D(128, (3,3), activation='relu'))\nagemodel.add(MaxPooling2D((2,2)))\nagemodel.add(Flatten())\nagemodel.add(Dense(64, activation='relu'))\nagemodel.add(Dropout(0.5))\nagemodel.add(Dense(1, activation='relu'))\n\nagemodel.compile(loss='mean_squared_error',\n             optimizer=optimizers.Adam(lr=0.0001))\n\ngenmodel = Sequential()\ngenmodel.add(Conv2D(32, (3,3), activation='relu', input_shape=(200, 200, 3)))\ngenmodel.add(MaxPooling2D((2,2)))\ngenmodel.add(Conv2D(64, (3,3), activation='relu'))\ngenmodel.add(MaxPooling2D((2,2)))\ngenmodel.add(Conv2D(128, (3,3), activation='relu'))\ngenmodel.add(MaxPooling2D((2,2)))\ngenmodel.add(Flatten())\ngenmodel.add(Dense(64, activation='relu'))\ngenmodel.add(Dropout(0.5))\ngenmodel.add(Dense(1, activation='sigmoid'))\n\ngenmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.Adam(lr=0.0001),\n             metrics=['accuracy'])","f506f4df":"datagen = ImageDataGenerator(\n      rescale=1.\/255., width_shift_range = 0.1, height_shift_range = 0.1, horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain1 = datagen.flow(x_train_age, y_train_age, batch_size=32)\n\ntest1 = test_datagen.flow(\n        x_test_age, y_test_age,\n        batch_size=32)\n\nhistory1 = agemodel.fit(train1, epochs=50, shuffle=True, validation_data=test1)","c829ae18":"datagen = ImageDataGenerator(\n      rescale=1.\/255., width_shift_range = 0.1, height_shift_range = 0.1, horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain2 = datagen.flow(x_train_gender, y_train_gender, batch_size=64)\n\ntest2 = test_datagen.flow(\n        x_test_gender, y_test_gender,\n        batch_size=64)\n\nhistory2 = genmodel.fit(train2, epochs=50, shuffle=True, validation_data=test2)","ecb276cf":"def process_and_predict(file):\n    im = Image.open(file)\n    width, height = im.size\n    if width == height:\n        im = im.resize((200,200), Image.ANTIALIAS)\n    else:\n        if width > height:\n            left = width\/2 - height\/2\n            right = width\/2 + height\/2\n            top = 0\n            bottom = height\n            im = im.crop((left,top,right,bottom))\n            im = im.resize((200,200), Image.ANTIALIAS)\n        else:\n            left = 0\n            right = width\n            top = 0\n            bottom = width\n            im = im.crop((left,top,right,bottom))\n            im = im.resize((200,200), Image.ANTIALIAS)\n            \n    ar = np.asarray(im)\n    ar = ar.astype('float32')\n    ar \/= 255.0\n    ar = ar.reshape(-1, 200, 200, 3)\n    \n    age = agemodel.predict(ar)\n    gender = np.round(genmodel.predict(ar))\n    if gender == 0:\n        gender = 'male'\n    elif gender == 1:\n        gender = 'female'\n        \n    print('Age:', int(age), '\\n Gender:', gender)\n    return im.resize((300,300), Image.ANTIALIAS)","89ec5ae6":"process_and_predict('..\/input\/celebrities2\/alyson.jpg')","c4e4a116":"process_and_predict('..\/input\/celebrities2\/david.jpg')","d33c69ce":"process_and_predict('..\/input\/celebrities2\/gaten.jpg')","0616f0c6":"process_and_predict('..\/input\/celebrities2\/jack.jpg')","4809139d":"process_and_predict('..\/input\/celebrities2\/jennifer.jpg')","e1e3f1da":"process_and_predict('..\/input\/celebrities2\/jenniferlaw.jpg')","f2cab4c4":"process_and_predict('..\/input\/celebrities2\/meryl.jpg')","d931b186":"process_and_predict('..\/input\/celebrities2\/millie.jpg')","fffc0d72":"process_and_predict('..\/input\/celebrities2\/morgan.jpg')","1965550e":"process_and_predict('..\/input\/celebrities2\/oprah.jpg')","8a6844eb":"process_and_predict('..\/input\/celebrities2\/tom.jpg')","6b165ba9":"process_and_predict('..\/input\/celebrities2\/winona.jpg')","31517609":"## <p style=\"font-size:20px; color:#D18358\"> Jack Dylan Grazer <\/p>","f4fa96bc":"![image.png](attachment:image.png)\n\n# <center>Age and Gender Prediction<\/center>\n\n\nThe <a href=\"https:\/\/susanqq.github.io\/UTKFace\/\" style=\"color:#D18358\"> UTKFace dataset <\/a> is a large-scale face dataset consisting of over 20,000 images. The images cover a wide range of ages and races and include both males and females. \n\nUsing this dataset, I will be attempting to create a model capable of predicting the age and gender of an individual. I will be using part one of the cropped variations of the images, of which there are almost 10,000. However, I will only be using the first 8000 of these images due to memory limitations.","e025c9cc":"So 0 corresponds to male, 1 corresponds to female.","09223b98":"## <p style=\"font-size:20px; color:#D18358\"> Meryl Streep <\/p>","ab7fc33d":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\" style=\"background-color:#D18358; border-color:#D18358\">Table of Contents<\/h3>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#imports\" role=\"tab\" aria-controls=\"profile\" style=\"color:#8F908E\">Imports<span class=\"badge badge-primary badge-pill\" style=\"background-color:#D18358; border-color:#D18358\">1<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#load\" role=\"tab\" aria-controls=\"messages\" style=\"color:#8F908E\">Loading Data<span class=\"badge badge-primary badge-pill\" style=\"background-color:#D18358; border-color:#D18358\">2<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#visual\" role=\"tab\" aria-controls=\"settings\" style=\"color:#8F908E\">Visualising Data<span class=\"badge badge-primary badge-pill\" style=\"background-color:#D18358; border-color:#D18358\">3<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#split\" role=\"tab\" aria-controls=\"settings\" style=\"color:#8F908E\">Train Test Split<span class=\"badge badge-primary badge-pill\" style=\"background-color:#D18358; border-color:#D18358\">4<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#model\" role=\"tab\" aria-controls=\"settings\" style=\"color:#8F908E\"> Creating the Model<span class=\"badge badge-primary badge-pill\" style=\"background-color:#D18358; border-color:#D18358\">5<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#train\" role=\"tab\" aria-controls=\"settings\" style=\"color:#8F908E\">Training the Models<span class=\"badge badge-primary badge-pill\"  style=\"background-color:#D18358; border-color:#D18358\">6<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#eval\" role=\"tab\" aria-controls=\"settings\" style=\"color:#8F908E\">Evaluating the Models<span class=\"badge badge-primary badge-pill\"  style=\"background-color:#D18358; border-color:#D18358\">7<\/span><\/a>  ","b2a3d905":"This looks much better! The dataframe is more representative of the population now. However, there aren't many images of people over 80, which would cause the model to not train well enough on those ages. It's best to just remove over 80s and only have a model that can predict the ages of people under 80.","85fc2117":"## <p style=\"font-size:20px; color:#D18358\"> Jennifer Lawrence <\/p>","f55a95e5":"## <p style=\"font-size:20px; color:#D18358\"> David Boreanaz <\/p>","7f89db9b":"Too many faces of people between 0 and 4 years old. The model would fit too well to these ages and not enough to the other ages. To resolve this I'm only going to include a third of the images between these ages.","f5555d63":"# <h1 id= 'eval'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">7. Evaluating the Models<\/span><\/h1>","c662eab0":"## <p style=\"font-size:20px; color:#D18358\"> Oprah Winfrey <\/p>","61c26161":"## <p style=\"font-size:20px; color:#D18358\"> Millie Bobby Brown <\/p>","87f1895c":"# <h1 id= 'load'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">2. Loading Data<\/span><\/h1>","4054e238":"# <h1 id= 'visual'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">3. Visualising and Preparing Data<\/span><\/h1>","fd02987b":"## <p style=\"font-size:20px; color:#D18358\"> Tom Hanks <\/p>","8c8e5209":"# <h1 id= 'imports'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">1. Imports<\/span><\/h1>","31d1745a":"# <h1 id= 'train'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">6. Training the Models<\/span><\/h1>","2145e477":"## <p style=\"font-size:20px; color:#D18358\"> Alyson Hannigan <\/p>","a83f693b":"Now to evaluate the models I am going to use some external images of celebrities. These celebrities are of a variety of ages and genders.","dda3b840":"Not sure what 3 corresponds to - both genders, no gender, unknown, or just an error in the data entry? To be safe, I am going to remove any rows where gender equals 3.","25d076f2":"# <h1 id= 'split'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">4. Train Test Split<\/span><\/h1>","ee762057":"I will create two individual models - one to predict age and one to predict gender. The age model should be capable of returning continuous values which I will round to the nearest integer, and the gender model should return a binary result.","01c85caf":"## <p style=\"font-size:20px; color:#D18358\"> Winona Ryder <\/p>","f41ed2bf":"## <p style=\"font-size:20px; color:#D18358\"> Jennifer Garner <\/p>","0ec17054":"You can decide for yourself if you think it worked, but for the most part I think it did quite well, especially for gender where it only got one celebrity incorrect! I hope you enjoyed and thank you for reading!\n\n<p> Special thanks to Marco Vasquez E for his <a style=\"color:#D18358\" href=\"https:\/\/www.kaggle.com\/marcovasquez\/useful-html-for-jupyter-notebook\"> notebook<\/a> on \nUseful HTML for Jupyter Notebook. Couldn't have done the beautiful table of contents without it! <\/p>","5f8466fd":"# <h1 id= 'model'><span class=\"label label-default\" style=\"background-color:#D18358; font-size:20px\">5. Creating the Models<\/span><\/h1>","39cc7247":"## <p style=\"font-size:20px; color:#D18358\"> Gaten Matarazzo <\/p>","40b1857b":"## <p style=\"font-size:20px; color:#D18358\"> Morgan Freeman <\/p>"}}