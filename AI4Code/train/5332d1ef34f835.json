{"cell_type":{"04ff12e0":"code","cd0e4d2a":"code","dc146e9e":"code","497a9c90":"code","eee81cbc":"code","f77dd8e9":"code","c45f1079":"code","c6e95997":"code","f5afdaea":"code","bd4a23fb":"code","61522017":"code","229eba58":"code","35ebe9b1":"code","014cbf18":"code","1b1b36d1":"code","760c6c2c":"code","7c109289":"code","9d57d165":"code","c0052459":"code","4507bbc9":"code","f304e2db":"code","a2e5a396":"code","4fcb6284":"code","64a21be7":"code","0e8393e1":"code","7d4616c5":"code","62c5e93c":"code","b77dffa0":"code","57f45b38":"code","ca465252":"code","fd4d1c89":"code","574e154f":"code","53c062b3":"code","ab97a3b6":"code","6a98c99c":"code","b4061861":"code","88313cb5":"code","f19cac09":"code","3091707a":"code","0eb24fdf":"code","10766e57":"code","3df23bec":"code","4bb779e3":"code","f883aa7e":"markdown","43287093":"markdown","9b135b87":"markdown","cf3bb612":"markdown","e0d02d18":"markdown","4033bc39":"markdown","5377ca03":"markdown","766ce470":"markdown","f5ee6c4e":"markdown","8e8b1c85":"markdown","743d88e5":"markdown","c7f09cd3":"markdown"},"source":{"04ff12e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd0e4d2a":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","dc146e9e":"train.head()","497a9c90":"train.shape","eee81cbc":"test.shape","f77dd8e9":"train.dtypes","c45f1079":"train.describe().T","c6e95997":"train = train.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)","f5afdaea":"train.isnull().sum()","bd4a23fb":"train['Age'] = train['Age'].fillna(train['Age'].median())\n\ntrain['Embarked'] = train['Embarked'].fillna('S')","61522017":"train.isnull().sum()","229eba58":"train.info()","35ebe9b1":"train = train.drop(['Name'], axis = 1)","014cbf18":"train.info()","1b1b36d1":"cat_columns=train.drop(train.select_dtypes(exclude=['object']), axis=1).columns\nprint(cat_columns)\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()\ntrain[cat_columns[0]] = labelencoder.fit_transform(train[cat_columns[0]].astype('str'))\nlabelencoder1=LabelEncoder()\ntrain[cat_columns[1]] = labelencoder.fit_transform(train[cat_columns[1]].astype('str'))","760c6c2c":"train.info()","7c109289":"train.head()","9d57d165":"import seaborn as sns\nimport matplotlib.pyplot as plt","c0052459":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'Embarked')","4507bbc9":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'Age')","f304e2db":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'Sex')","a2e5a396":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'Pclass')","4fcb6284":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'Parch')","64a21be7":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'SibSp')","0e8393e1":"sns.FacetGrid(train, col='Survived').map(plt.hist, 'Fare')","7d4616c5":"train = train.drop(['Fare'], axis = 1)","62c5e93c":"X = train.drop(['Survived'], axis=1)\ny = train['Survived']","b77dffa0":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n","57f45b38":"regressor=LogisticRegression()\nregressor.fit(X_train,y_train)","ca465252":"y_pred=regressor.predict(X_test)","fd4d1c89":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\nprint(cm)","574e154f":"plt.scatter([i for i in range(len(X_test[\"Sex\"]))], y_test, color='green')\nplt.plot([i for i in range(len(X_test[\"Sex\"]))], y_pred, color='blue')\n\nplt.ylabel('no of Survived')\nplt.xlabel('no of Passengers')\n\nplt.show()","53c062b3":"test.head()","ab97a3b6":"passenger_id=test['PassengerId']","6a98c99c":"test = test.drop(['PassengerId', 'Ticket', 'Cabin','Name','Fare'], axis = 1)","b4061861":"test.dtypes","88313cb5":"test['Age'] = test['Age'].fillna(train['Age'].median())\n\ntest['Embarked'] = test['Embarked'].fillna('S')","f19cac09":"test.info()","3091707a":"cat_columns1=test.drop(test.select_dtypes(exclude=['object']), axis=1).columns\nprint(cat_columns1)\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()\ntest[cat_columns1[0]] = labelencoder.fit_transform(test[cat_columns1[0]].astype('str'))\nlabelencoder1=LabelEncoder()\ntest[cat_columns1[1]] = labelencoder.fit_transform(test[cat_columns1[1]].astype('str'))","0eb24fdf":"test.head()","10766e57":"y_test_pred = regressor.predict(test)","3df23bec":"plt.scatter([i for i in range(len(test['Sex']))], y_test_pred, color='blue')\n\nplt.ylabel('no.of.Survived')\nplt.xlabel('no.of.Passenger')\n\nplt.show()","4bb779e3":"result = pd.DataFrame({\n        \"PassengerId\": passenger_id,\n        \"Survived\": y_test_pred\n    })\n\nresult.to_csv('.\/submission.csv', index=False)","f883aa7e":"now we will plot the graph between predicted and test data","43287093":"the above graph shows a good correlation with survived\n* most of  people who were travelling alone were not able to survive","9b135b87":"now we will do label encoding on the Sex and embarked features\n","cf3bb612":"from the above graph we infered that the Age feature is highly correlated to the Survived class\n* the graph also depict that people who were in the age of 25-30 were succumed\n* also the highest people who survived were from the age(25-35)\n* small kids are having high mortality in this graph","e0d02d18":"**** we can see that no of correct predictions ranges to 212 out of 268 values \n","4033bc39":"from the above graph we can see there is high skewness in the data so we would remove the Fare feature ","5377ca03":"now, prediction time!","766ce470":"The above graph depict a high correlation of the Sex feature with the survived class\n* majority of males were not able to survive\n* death of females are much less compared to males","f5ee6c4e":"from the above graph we can see that parch is highly co-related class with the survived \n* most of the people who were travelling alone without their parents died\n* most of the people who were travelling with single parent or children were able to survive","8e8b1c85":"the above graph says that PClass is highly co-related to Survived\n* people who were travelling in 3rd class were not able to survive\n* almost half of the 2nd class people survived \n* many of the people travelling through 1st class survived","743d88e5":"from the above graph we can infer that the Embarked feature is highly co-related with the Survived\nWe can see that people who belong to southampton were not able to survive much","c7f09cd3":"now we will predict the test data"}}