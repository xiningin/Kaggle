{"cell_type":{"a3de6b8a":"code","50eb07cd":"code","c06ee23a":"code","f844875f":"code","3f4839f6":"code","e9707be7":"code","56fddc15":"code","17cd233c":"code","dda62afb":"code","37d06210":"code","e806c599":"code","66b46947":"code","f1a39f76":"code","a9bc9713":"code","a5bfa7b4":"code","b5ae783c":"code","0dc6dc19":"code","74f9cf65":"code","817da875":"code","1f27af2d":"code","5c6603fa":"code","e6508297":"code","515d5b20":"code","22998a8e":"code","3c862c06":"code","8600fa4a":"code","6b3cdc10":"code","8b4276fb":"code","124b50bd":"code","0664c7fd":"code","4318bbcb":"code","50d70408":"markdown","7bb09822":"markdown","1d10737e":"markdown","bbb9b0da":"markdown","ea435b78":"markdown","9f42c8a9":"markdown","23927fc2":"markdown","9a614ffa":"markdown","f80440ff":"markdown"},"source":{"a3de6b8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50eb07cd":"data = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head()","c06ee23a":"data.describe()\ndata.info()","f844875f":"numerical = []\nfor var in data.columns:\n    if data[var].dtype != 'object':\n        numerical.append(var)\n\nprint('Numerical values {0}'.format(numerical))","3f4839f6":"categorical = []\nfor var in data.columns:\n    if data[var].dtype =='object':\n        categorical.append(var)\n\nprint('Categorical values: {0}'.format(categorical))","e9707be7":"discrete = []\nfor var in numerical:\n    if len(data[var].unique()) < 20:\n        discrete.append(var)\n\nprint(discrete)","56fddc15":"continuous = [x for x in numerical if x not in ['id','price'] and x not in discrete]\n","17cd233c":"continuous\n","dda62afb":"for var in data.columns:\n    if(data[var].isnull().sum() != 0):\n        print(var, data[var].isnull().sum(), data[var].dtype)","37d06210":"data['reviews_per_month'].describe()","e806c599":"for var in['reviews_per_month']:\n    data[var+' NA'] = np.where(data[var].isnull(),1,0)\n    data[var] = data[var].fillna(data[var].median())\n    ","66b46947":"data['reviews_per_month'].describe()","f1a39f76":"data.head()","a9bc9713":"data[['name','host_name','last_review']].head()","a5bfa7b4":"for var in ['host_name','name']:\n    data[var] = data[var].fillna('Missing')","b5ae783c":"data.isnull().sum()","0dc6dc19":"data['last_review'].fillna(method='ffill',inplace=True)","74f9cf65":"continuous","817da875":"for var in continuous:\n    plt.figure(figsize=(15,6))\n    plt.subplot(1,2,1)\n    fig = data.boxplot(column=var)\n    fig.set_ylabel(var)\n    \n    plt.subplot(1,2,2)\n    fig = data[var].hist(bins=20)\n    fig.set_xlabel(var)\n    #fig.set_ylabel('No of house')\n    \n    plt.show()\n    ","1f27af2d":"Handle the outliers laters","5c6603fa":"data[categorical].head()","e6508297":"for var in categorical:\n    print(var,len(data[var].unique()))","515d5b20":"for var in categorical:\n    print(data.groupby(var)[var].count()\/np.float(len(data)))","22998a8e":"temp = data.groupby('room_type')['room_type'].count()\/np.float(len(data))\nprint(data.loc[temp>0.03].index.values)\nprint(temp)","3c862c06":"def rare_imputation(variable):\n    temp = data.groupby([variable])[variable].count()\/np.float(len(data))\n    frequent_cat = [x for x in temp.loc[temp>0.03].index.values]\n    \n    data[variable] = np.where(data[variable].isin(frequent_cat), data[variable] ,'rare')\n    ","8600fa4a":"for col in categorical:\n    rare_imputation(col)","6b3cdc10":"data[categorical].dtypes","8b4276fb":"data[categorical]","124b50bd":"for var in categorical:\n    print(var, data[var].value_counts()\/np.float(len(data)))","0664c7fd":"cols_to_Drop =['name','host_name','last_review']\ndata.drop(cols_to_Drop,inplace=True, axis=1)","4318bbcb":"data.head()","50d70408":"**Discrete values**","7bb09822":"Name, host name, last review has most number of rare labels, so we can remove it else it will indroduce a noise in the data","1d10737e":"##### Outliers in data","bbb9b0da":"##### Outliers and missing value in continuous variable","ea435b78":"##### reviews_per_month is a continous variable with lots of missing value. To identify what are the observations we imputed, we create a new col and mark 1 =>null, 0=>Not null","9f42c8a9":"Encoding categorical data","23927fc2":"Rare values in categorical data","9a614ffa":"#### Name and host_name have less number of missing values and its categorical value","f80440ff":"**Variable identification**"}}