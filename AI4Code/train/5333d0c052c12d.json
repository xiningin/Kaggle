{"cell_type":{"526bdf2e":"code","92e89b52":"code","dca93b62":"code","59c462bc":"code","25413f98":"code","8ac3b69a":"code","8a555ced":"code","227c5959":"code","9ae8d442":"code","3d02a7d6":"code","933426b1":"code","8c6d27da":"code","a63cd13b":"code","d87255d5":"code","e73549cd":"code","7e217dee":"code","61fb1d4c":"code","474e82b8":"code","7d9ec69b":"code","a1c8f4c2":"code","af62ed08":"code","c365d740":"code","6ff95eb3":"code","402314ee":"code","3b2e0b18":"markdown"},"source":{"526bdf2e":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import plot_roc_curve\nimport warnings\nwarnings.filterwarnings(\"ignore\")","92e89b52":"plt.rcParams['axes.labelsize'] = 15.\nplt.rcParams['xtick.labelsize']= 15.\nplt.rcParams['ytick.labelsize'] = 15.\nplt.rcParams['figure.figsize'] =[15.,8.]\nplt.rcParams['legend.fontsize'] = 13.","dca93b62":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","59c462bc":"data.shape","25413f98":"data.describe()","8ac3b69a":"data.info()","8a555ced":"data['class'].value_counts()","227c5959":"#check for missing value\ndata.isna().sum()","9ae8d442":"# No missing value found","3d02a7d6":"sns.countplot(data=data, x='class', palette=\"magma\");","933426b1":"for i in data.columns[1:]:\n    \n    sns.countplot(data=data, x=i, palette=\"magma\")\n    plt.grid()\n    plt.show()","8c6d27da":"for i in data.columns[1:]:\n    plt.figure(figsize=(10,6))\n    sns.histplot(data=data, x=i,palette='magma');","a63cd13b":"data.head()","d87255d5":"sns.countplot(data=data, x=\"cap-shape\" ,hue=\"class\")","e73549cd":"sns.countplot(data=data, x=\"habitat\", hue=\"class\");","7e217dee":"label = LabelEncoder()\ndata = data.apply(LabelEncoder().fit_transform)","61fb1d4c":"data.head()","474e82b8":"data.info()","7d9ec69b":"data.isna().sum()","a1c8f4c2":"x = data.drop([\"class\"],axis=1)\ny = data[\"class\"]","af62ed08":"# Train & Test Split\nx_train,x_test, y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=42)","c365d740":"models = {\"Logistic Regression\":LogisticRegression(),\n         \"RandomForestClassifier\":RandomForestClassifier(),\n          \"KNN\":KNeighborsClassifier(),\n          \"Naive Bayes\": GaussianNB(),\n          \"Decision Tree\":DecisionTreeClassifier(),\n          \"SVM\": LinearSVC()\n         }\n\ndef fit_and_score(models,x_train,x_test,y_train,y_test):\n    model_scores = {}\n    accuracy_score = {}\n    \n    for name,model in models.items():\n        model.fit(x_train,y_train)\n        model_scores[name]= model.score(x_test,y_test)\n    return model_scores","6ff95eb3":"score = fit_and_score(models= models,\n                     x_train=x_train,\n                     x_test=x_test,\n                     y_train=y_train,\n                     y_test=y_test)\nscore","402314ee":"compare_score = pd.DataFrame(score, index=[\"accuracy\"])\ncompare_score.T.plot(kind=\"barh\")","3b2e0b18":"### Target value is approx distrubuted equally"}}