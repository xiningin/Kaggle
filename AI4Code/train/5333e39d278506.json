{"cell_type":{"62cd4fad":"code","163403da":"code","e6cb3223":"code","384d61e0":"code","8a4c0224":"code","30f5ac80":"code","dd3060ff":"code","514006a2":"code","cb3ceb64":"code","dc961337":"markdown","71ed2bce":"markdown","27d72618":"markdown","39e4546b":"markdown","25397f0f":"markdown","d3e8763e":"markdown","686e12fe":"markdown","1130c041":"markdown"},"source":{"62cd4fad":"import math","163403da":"def bearing(x1,y1,x2,y2):\n    dx= x2-x1 #calculate the difference in x\n    dy= y2-y1 #calculate the difference in y\n    \n    # NO - angle can be 90 or 270 when dy is zero (PMJ)\n    \n    if dy == 0: #both points are in the x-axis therefore dy=0 & angle will be either 90\/270\n        a=90\n    elif dx == 0: #both points are on the y-axis therefore dx=0 & angle will be either 360\/180\n        a=360\n    else:\n        a = math.degrees(math.atan (dy\/dx)) #calculate angle\n        \n    #the if\/elif\/else statement above deals with division by 0(which causes errors) by doing so bypasses the issue\n    \n    #The if\/else\/elif code below deals with each quadrants calculation\n    if dx>0 and dy<0: \n        a = a +180\n    elif dx<0 and dy<0:\n        a=a+180\n    elif dx<0 and dy>0:\n        a=a+360\n    else:\n        a=a\n    \n    #calculation of the back bearing\n    b= a+180 \n    if b>360:\n        b=b-360 #make sure the angle is not larger than 360\n    return a,b","e6cb3223":"#test x-axis\nbearing(0,0,1,0)","384d61e0":"bearing(10,0,1,0)","8a4c0224":"#test y-axis\nbearing(0,0,0,1)","30f5ac80":"#test First Quadrant\nbearing(0,0,2,2)","dd3060ff":"#test Second Quadrant\nbearing(0,0,2,-2)","514006a2":"#test Third Quadrant\nbearing(0,0,-2,-2)","cb3ceb64":"#test Fourth Quadrant\nbearing(0,0,-2,2)","dc961337":"## Not tested well enough as fails for bearings of eg 270.\n## It is fine to include embellishment like back bearings but need to ensure core fucntionality is correct\n## Better to present testing as summary table\n![image.png](attachment:dcd0dfd6-802a-4708-8882-641964a54aec.png)\n## Report needs a conclusion\n## You don't really make use of the markdown features of the notebook to create a data story. ","71ed2bce":"<font size='+2' color='ff0000'>\n \n* We would customarily also include a function description as below\n\n<font size='+1' color='ffffff'>\n<code>\n    def bearing(x1, y1, x2, y2):\n        \"\"\"\n        Summary: calculates whole circle bearings between 0 ansd 360 degrees\n        ------------------\n        arguments:\n        x1: x value of the from coordinate\n        y1: y value of the y coordinate\n        x2: x value to the to coordinate\n        y2: y value of the to coordinate\n        ------------------\n        returns:\n        bearing in decimal degrees\n        ------------------\n        notes:\n        coordinates with matching x and y returns a bearing of 0\n        \"\"\"\n\n        #code here\n    <\/code>","27d72618":"# Previous problems while making the code.\n1. unable to calculate x-axis\/parallel to x-axis points\n2. division by 0 error\n3. Small Mistakes left and right\n\n# Solutions:\n* create a seperate if\/else\/elif statement to bypass the equation entirely to avoid problem 1,2.\n* Read through the code thoroughly and fix mistakes","39e4546b":"## You should include an introduction to the problem- what it is, where it is used.\n\n<font size = '+2' color='ff0000'>It would be good to include a picture here to describe the problem eg.<\/font>\n\n![](https:\/\/th.bing.com\/th\/id\/R.f86f9b4fe437e6bdba699db5de318d60?rik=WISrEWj%2b6%2f%2bcuw&pid=ImgRaw&r=0)","25397f0f":"# This is a coursework. Write a code that is able to calculate the bearing between two points(x1,y1) to (x2,y2).","d3e8763e":"## Fails for 270! gives bearing of 90","686e12fe":"## You should include a textual description of how the function operates\n","1130c041":"# Testing:\n* 6 tests in total.\n    * 4 Quardants \n    * x-axis \n    * y-axis\n"}}