{"cell_type":{"57ab34d0":"code","0b63ca3b":"code","16b1d7f7":"code","e76a14f5":"code","ff892c40":"code","a39ad169":"code","5e2f0f33":"code","ba931a06":"code","c9ac8513":"code","efff421f":"code","93ef3bd1":"code","0803b6f5":"code","03d7d0c0":"code","dae5c918":"code","3711609a":"code","12d6cda6":"code","6ea6d433":"code","6f40c420":"code","c60b0750":"code","9307a082":"code","ac995122":"code","43a1d77b":"code","17d3d595":"code","6909cbb8":"code","15be36a1":"code","66e54374":"code","ceff58dc":"code","6e04ae9c":"code","5d593721":"code","d3b5c467":"code","b6a544aa":"code","9ea1df83":"code","744dc6b2":"code","7397a55e":"code","6f8701e3":"code","e3e9b950":"markdown","2bbfc780":"markdown","bd7356f5":"markdown","dbf1f826":"markdown","712d4a2f":"markdown","01488ef1":"markdown","ef621afa":"markdown","8e77e9d3":"markdown","84e10560":"markdown","27712a0a":"markdown","7bf5db30":"markdown","593c8089":"markdown","252cb7fa":"markdown","23062ec9":"markdown","ac88a4a2":"markdown","2e6abc21":"markdown","49d5c8b3":"markdown","970bc195":"markdown","3d022b87":"markdown","18813ecf":"markdown","aed01b8f":"markdown","4ad9090b":"markdown","a3171b56":"markdown","6e0e8aa8":"markdown","5ca6c53b":"markdown"},"source":{"57ab34d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b63ca3b":"data = pd.read_csv(\"\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv\")","16b1d7f7":"data.info()","e76a14f5":"data.head()","ff892c40":"data = data.drop(\"No\", axis = 1)","a39ad169":"import matplotlib.pyplot as plt\n\n#fig, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplot(3)\n\nplt.figure(figsize = (20,35))\nplt.subplot(6,2,1)\nplt.title(\"X1 transaction date vs Y\")\nplt.xlabel(\"X1 transaction date\")\nplt.ylabel(\"Y house price of unit area\")\nplt.scatter(data[\"X1 transaction date\"], data[\"Y house price of unit area\"])\nplt.plot()\n\nplt.subplot(6,2,2)\nplt.title(\"X2 house age vs Y\")\nplt.xlabel(\"X2 house age\")\nplt.ylabel(\"Y house price of unit area\")\nplt.scatter(data[\"X2 house age\"], data[\"Y house price of unit area\"])\nplt.plot()\n\nplt.subplot(6,2,3)\nplt.title(\"X3 distance to the nearest MRT station vs Y\")\nplt.xlabel(\"X3 distance to the nearest MRT station\")\nplt.ylabel(\"Y house price of unit area\")\nplt.scatter(data[\"X3 distance to the nearest MRT station\"], data[\"Y house price of unit area\"])\nplt.plot()\n\nplt.subplot(6,2,4)\nplt.title(\"X4 number of convenience stores vs Y\")\nplt.xlabel(\"X4 number of convenience stores\")\nplt.ylabel(\"Y house price of unit area\")\nplt.scatter(data[\"X4 number of convenience stores\"], data[\"Y house price of unit area\"])\nplt.plot()\n\nplt.subplot(6,2,5)\nplt.title(\"X5 latitude vs Y\")\nplt.xlabel(\"X5 latitude\")\nplt.ylabel(\"Y house price of unit area\")\nplt.scatter(data[\"X5 latitude\"], data[\"Y house price of unit area\"])\nplt.plot()\n\nplt.subplot(6,2,6)\nplt.title(\"X6 longitude vs Y\")\nplt.xlabel(\"X6 longitude\")\nplt.ylabel(\"Y house price of unit area\")\nplt.scatter(data[\"X6 longitude\"], data[\"Y house price of unit area\"])\nplt.plot()","5e2f0f33":"for indx,col in zip(range(0, len(data.columns)), data.columns):\n    plt.title(data.columns[indx])\n    plt.boxplot(data[col], vert = False)\n    plt.show()\n    ","ba931a06":"import seaborn as sb\n\nsb.pairplot(data, height = 4)","c9ac8513":"import seaborn as sb\ncorrMatrix = data.corr()\nsb.heatmap(corrMatrix, annot=True)","efff421f":"df_new = data.copy()","93ef3bd1":"clus = df_new[['X5 latitude', 'X6 longitude']]\nclus.dtypes","0803b6f5":"from sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k = (1, 18)) \nvisualizer.fit(clus)\nvisualizer.show()","03d7d0c0":"kmeans = KMeans(n_clusters = 4, random_state = 0) \nkmeans.fit(clus)","dae5c918":"centroids = kmeans.cluster_centers_\ncentroids","3711609a":"clocation = pd.DataFrame(centroids, columns = ['X5 latitude', 'X6 longitude'])","12d6cda6":"clocation","6ea6d433":"plt.scatter(clocation['X5 latitude'], clocation['X6 longitude'], marker = \"x\", color = 'R', s = 200)","6f40c420":"import folium\ncentroid = clocation.values.tolist()\n\nm = folium.Map(location = [24.968, 121.53], zoom_start = 13)\nfor point in range(0, len(centroid)):\n    folium.Marker(centroid[point], popup = centroid[point]).add_to(m)\n\nm","c60b0750":"label = kmeans.labels_\nlabel","9307a082":"df_new['Clusters'] = label\ndf_new","ac995122":"sb.factorplot(data = df_new, x = \"Clusters\", kind = \"count\", size = 7, aspect = 2)","43a1d77b":"sorted(df_new['Y house price of unit area'].unique())","17d3d595":"location=df_new[['X5 latitude','X6 longitude','Y house price of unit area']]\nlocation['color']=location['Y house price of unit area'].apply(lambda price:\"Black\" if price>=100 else\n                                         \"green\" if price>=90 and price<100 else\n                                         \"Orange\" if price>=80 and price<90 else\n                                         \"darkblue\" if price>=70 and price<80 else\n                                         \"red\" if price>=60 and price<70 else\n                                         \"lightblue\" if price>=50 and price<60 else\n                                         \"brown\" if price>=40 and price<50 else\n                                         \"grey\" if price>=30 and price<40 else\n                                         \"yellow\" if price>=20 and price<30 else\n                                         \"blue\" if price>=10 and price<20 else\n                                         \"white\")\nlocation['size']=location['Y house price of unit area'].apply(lambda price:19 if price>=100 else\n                                         17 if price>=90 and price<100 else\n                                         15 if price>=80 and price<90 else\n                                         13 if price>=70 and price<80 else\n                                         11 if price>=60 and price<70 else\n                                         9 if price>=50 and price<60 else\n                                         7 if price>=40 and price<50 else\n                                         5 if price>=30 and price<40 else\n                                         3 if price>=20 and price<30 else\n                                         1 if price>=10 and price<20 else\n                                         0.1)\nlocation","6909cbb8":"m_2 = folium.Map(location = [24.968, 121.53], zoom_start = 13)\n#location=location[0:2000]\nfor lat,lon,price,color,size in zip(location['X5 latitude'],location['X6 longitude'],location['Y house price of unit area'],location['color'],location['size']):\n     folium.CircleMarker([lat, lon],\n                            popup=price,\n                            radius=size,\n                            color='b',\n                            fill=True,\n                            fill_opacity=0.7,\n                            fill_color=color,\n                           ).add_to(m_2)\nm_2","15be36a1":"from folium import plugins\nlocation_data = location[['X5 latitude', 'X6 longitude']]\n\n# plot heatmap\nm_2.add_children(plugins.HeatMap(location_data, radius=15))","66e54374":"from scipy.stats import skew\n\nplt.hist(data[data.columns[2]])\nskew(data[data.columns[2]])","ceff58dc":"import math\n\ndf_new[df_new.columns[2]] = df_new[df_new.columns[2]].astype(float) \n\ndf_new[df_new.columns[2]] = np.log2(df_new[df_new.columns[2]])","6e04ae9c":"plt.hist(df_new[df_new.columns[2]])\nskew(df_new[df_new.columns[2]])","5d593721":"#x3 outliers\nx3_q1 = data[data.columns[2]].quantile(0.25)\nx3_q3 = data[data.columns[2]].quantile(0.75)\nIQR_x3 = x3_q3 - x3_q1\nup_out_x3 = x3_q3 + 1.5*IQR_x3\nlow_out_x3 = x3_q1 - 1.5*IQR_x3\n\n#x5 outliers\nx5_q1 = data[data.columns[4]].quantile(0.25)\nx5_q3 = data[data.columns[4]].quantile(0.75)\nIQR_x5 = x5_q3 - x5_q1\nup_out_x5 = x5_q3 + 1.5*IQR_x5\nlow_out_x5 = x5_q1 - 1.5*IQR_x5\n\n#x6 outliers\nx6_q1 = data[data.columns[5]].quantile(0.25)\nx6_q3 = data[data.columns[5]].quantile(0.75)\nIQR_x6 = x6_q3 - x6_q1\nup_out_x6 = x6_q3 + 1.5*IQR_x6\nlow_out_x6 = x6_q1 - 1.5*IQR_x6\n\n#y outliers\ny_q1 = data[data.columns[-1]].quantile(0.25)\ny_q3 = data[data.columns[-1]].quantile(0.75)\nIQR_y = y_q3 - y_q1\nup_out_y = y_q3 + 1.5*IQR_y\nlow_out_y = y_q1 - 1.5*IQR_y","d3b5c467":"df_new = df_new[df_new[data.columns[2]] <= up_out_x3]    #x3\n\n\ndf_new = df_new[df_new[data.columns[4]] <= up_out_x5]    #x5\ndf_new = df_new[df_new[data.columns[4]] >= low_out_x5]\n\ndf_new = df_new[df_new[data.columns[5]] <= up_out_x6]    #x6\ndf_new = df_new[df_new[data.columns[5]] >= low_out_x6]\n\ndf_new = df_new[df_new[data.columns[-1]] <= up_out_y]    #y\n\ndf_new","b6a544aa":"df_prep = df_new.copy()","9ea1df83":"df_prep = df_prep.drop(\"Clusters\", axis = 1)\nfor indx,col in zip(range(0, len(df_prep.columns)), df_prep.columns):\n    plt.title(df_prep.columns[indx])\n    plt.boxplot(df_prep[col], vert = False)\n    plt.show()\n    ","744dc6b2":"corrMatrix = df_prep.corr()\ncorrMatrix","7397a55e":"sb.heatmap(corrMatrix, annot=True)","6f8701e3":"df_new.to_csv('RealEstate.csv',index=False)","e3e9b950":"**Plot the data**","2bbfc780":"**Compare the skew of 'X3 distance to the nearest MRT station' vs log'X3 distance to the nearest MRT station'**","bd7356f5":"**Deal with outliers**","dbf1f826":"**Plot the number of cluster**","712d4a2f":"**Unique values of 'Y house price of unit area'**","01488ef1":"**X3, X5, X6, X7 need to process (find and take out the outliers)**","ef621afa":"**Visualize to map**","8e77e9d3":"**New Boxplot after transform and deal with outliers**","84e10560":"**Pair Plotting the dataset**","27712a0a":"**Assign number of cluster**","7bf5db30":"**New Clusters column**","593c8089":"**Compare the number of cluster**","252cb7fa":"**Visualize Centroids using map**","23062ec9":"**Plot the Box plot to see Outliers**","ac88a4a2":"**Correlation Matrix**","2e6abc21":"**Transform X3 to logarithm type**","49d5c8b3":"**Assign new values**","970bc195":"**Assign the values of 'Y house price of unit area' with color**","3d022b87":"**Storing the Centroids**","18813ecf":"**Drop the Number column which less important**","aed01b8f":"**Label of cluster**","4ad9090b":"**Correlation Matrix**","a3171b56":"**Save csv file**","6e0e8aa8":"**Heatmap**","5ca6c53b":"**Clustering X5 latitude and X6 longitude using K-means clustering**"}}