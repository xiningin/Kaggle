{"cell_type":{"0dc6c6ae":"code","c834430b":"code","5c24572b":"code","1bb69650":"code","39d6f956":"code","0d6e4819":"markdown"},"source":{"0dc6c6ae":"import os\nimport re\nimport json\n\nfrom tqdm import tqdm\n\ndata_path = \"..\/input\/CORD-19-research-challenge\/document_parses\/\"\n#data_path = \"document_parses\/\"\n\ndocs = []\n\nnum_files = 0\nnum_corrupted = 0\n\n\nfor d in [ data_path + \"pdf_json\/\", data_path + \"pmc_json\/\" ]:\n    print(f\"Importing files from {d}\")\n    files = os.listdir(d)\n    #files = files[:500]  # less data for testing\n    num_files += len(files)\n    for file in tqdm(files):\n        file_path = d + file\n\n        try:\n            j = json.load(open(file_path, \"rb\"))\n        except:\n            num_corrupted += 1\n            #print(f\"Erron: Could not open {file_path}\")\n\n        try:\n            title = j[\"metadata\"][\"title\"]\n        except:\n            title = \"\"\n\n        try:\n            abstract = j[\"abstract\"][0][\"text\"]\n        except:\n            abstract = \"\"\n\n        full_text = \"\"\n\n        for text in j[\"body_text\"]:\n            full_text += text[\"text\"] + \"\\n\\n\"\n\n        docs.append([title, abstract, full_text])\n\n\nif num_corrupted > 0:\n    print(f\"{num_corrupted} of {num_files} files are corrupted!\")","c834430b":"import pandas as pd\nimport nltk.data\nimport statistics\n\nsentence_detector = nltk.data.load('..\/input\/nltk-data\/nltk_data\/tokenizers\/punkt\/english.pickle')\n#sentence_detector = nltk.data.load('tokenizers\/punkt\/english.pickle')\n\n\ndf = pd.DataFrame(docs, columns=[\"title\", \"abstract\", \"full_text\"])\ndocs = \"\"  # free up space?\n\nincubation = df[df[\"full_text\"].str.contains(\"incubation\")]\n\ntexts = incubation[\"full_text\"].values\n\nincubation_times = []\n\n# Get incubation time from sentences like:\n# \"Furthermore, the mean incubation period for SARS-CoV-2 infection has been reported to be from 0 to 14 days.\"\nprint(\"Searching for incubation times in dataset.\")\nfor text in tqdm(texts):\n    for sentence in sentence_detector.tokenize(text):\n        if \"incubation\" in sentence:\n            time = re.findall(r\" (\\d{1,2}(?:\\.\\d{1,2})?)? ?(?:to|-) ?(\\d{1,2}(?:\\.\\d{1,2})?) day\", sentence)\n            if len(time) == 1:\n                if time[0][0] == \"\":\n                    time = float(time[0][1])\n                    if time <= 30:  # discard unrealistic data\n                        incubation_times.append(time)\n                else:\n                    # when time is given as range, add all possible values\n                    a = int(float(time[0][0]))  # first make float from str, then int\n                    b = int(float(time[0][1]))\n                    if b <= 30:  # discard unrealistic data\n                        incubation_times += [*range(a, b+1)]","5c24572b":"import csv\n\nwith open(\"incubation_time.csv\", \"w\", newline='') as f:\n    w = csv.writer(f, quoting=csv.QUOTE_MINIMAL)\n    w.writerow(incubation_times)","1bb69650":"print(f\"The mean projected incubation time is {statistics.mean(incubation_times):.2f} days.\")","39d6f956":"import matplotlib.pyplot as plt\n\nfrom matplotlib import style\n\nstyle.use(\"ggplot\")\n\n\nplt.hist(incubation_times, bins=30)\nplt.ylabel(\"bins count\")\nplt.xlabel(\"incubation time (days)\")\nplt.xlim(0, 30)\nplt.show()","0d6e4819":"# COVID-19 incubation time\n\nI was inspired by this video because he achieved good results with simple python.\n\nhttps:\/\/www.youtube.com\/watch?v=S6GVXk6kbcs\n\nI followed the video and improved the code.\n\nIt is quiet a naive approach, but the result should be somewhat accurate."}}