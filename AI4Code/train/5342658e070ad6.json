{"cell_type":{"d6ad90bd":"code","79ceee27":"code","aec11cbf":"code","cf806e16":"code","d14c9dd8":"code","0ba44b74":"code","11d99860":"code","f00b07a6":"code","c04c18bb":"code","eca4cc09":"code","d2ce4b5b":"code","bbccfe75":"code","50af1496":"code","3512eb7f":"code","f9da07a3":"code","a3fa54c4":"code","4b2d2948":"code","5a38369b":"code","699fb5df":"code","812e4c48":"code","b83fe68b":"code","7fe4461a":"code","332cd2d0":"markdown","b681817e":"markdown","80a95e44":"markdown"},"source":{"d6ad90bd":"import numpy as np\nimport pandas as pd\npd.set_option(\"display.max_columns\", 100)\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom category_encoders import CountEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold\n\nfrom tqdm.notebook import tqdm\nfrom xgboost import XGBRegressor\nimport cv2","79ceee27":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/train.csv', parse_dates=['latest_saledate'])\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/test.csv', parse_dates=['latest_saledate'])","aec11cbf":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.shape, df_test.shape","cf806e16":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n# \u3056\u3063\u3068\u307f\u305f\u3068\u3053\u308d\u3067\u306f\u3001\u6570\u5024\u3001\u30ab\u30c6\u30b4\u30ea\u3001\u65e5\u4ed8\u306e\u4ed6\u306b\u3001\u30c6\u30ad\u30b9\u30c8\uff08description\uff09\u3001\u5730\u7406\u7a7a\u9593\uff08latitude\/longitude\u306a\u3069\uff09\u3001\u753b\u50cf(homeImage)\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n# \u753b\u50cf\u306ffile path\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\ndf_train.head()","d14c9dd8":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","0ba44b74":"import pyproj","11d99860":"#\u3000\u7def\u5ea6\u3001\u7d4c\u5ea6\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308b\navglatitude_tr = df_train['latitude'].mean()\navglongitude_tr = df_train['longitude'].mean()\n\navglatitude_te = df_test['latitude'].mean()\navglongitude_te = df_test['longitude'].mean()","f00b07a6":"#\u3000\u57fa\u6e96\u304b\u3089\u306e\u65b9\u4f4d\u89d2\uff11\uff0c\uff12\u3068\u8ddd\u96e2\u3092\u8a08\u7b97\ndf_train['datumlatitude'] = avglatitude_tr\ndf_train['datumlongitude'] = avglongitude_tr\n\nhome_and_rating_points = df_train \\\n.loc[:, ['datumlongitude','datumlatitude','longitude','latitude']]\n\ng = pyproj.Geod(ellps=\"WGS84\")\n\nhome_to_traget = home_and_rating_points \\\n.apply(lambda x: g.inv(x[0], x[1], x[2], x[3]), axis=1)\n\n[x[0] for x in home_to_traget]\n\nhome_to_traget = home_to_traget.astype(str)\n\n#\u3000\u3053\u3053\u304b\u3089\u4e0b\u3092\u5909\u3048\u307e\u3057\u305f\ndf_train['Azimuth1_1'] = home_to_traget.str.split('(', expand=True)[0]\ndf_train['Azimuth1_2'] = home_to_traget.str.split('(', expand=True)[1]\ndf_train['Distance1'] = home_to_traget.str.split(' ', expand=True)[2]\n\ndf_train['Azimuth1_2'] = df_train['Azimuth1_2'].str.split(',', expand=True)[0]\ndf_train['Azimuth1_2'] = df_train['Azimuth1_2'].astype(float)\n\n#\u3000\u5168\u3066\u53f3\u56de\u308a\u89d2\u5ea6\u306b\u5909\u63db\u3059\u308b\nconditions = [df_train['Azimuth1_2'] < 0]\nchoices = [df_train['Azimuth1_2']+360]\ndf_train['Azimuth1_2'] = np.select(conditions, choices, default = df_train['Azimuth1_2'])\n\ndf_train = df_train.drop(['Azimuth1_1','Distance1','datumlatitude','datumlongitude'], axis=1)\ndf_train['Azimuth1_2']\n","c04c18bb":"#\u3000\u57fa\u6e96\u304b\u3089\u306e\u65b9\u4f4d\u89d2\uff11\uff0c\uff12\u3068\u8ddd\u96e2\u3092\u8a08\u7b97\ndf_test['datumlatitude'] = avglatitude_te\ndf_test['datumlongitude'] = avglongitude_te\n\nhome_and_rating_points2 = df_test \\\n.loc[:, ['datumlongitude','datumlatitude','longitude','latitude']]\n\ng = pyproj.Geod(ellps=\"WGS84\")\n\nhome_to_traget2 = home_and_rating_points2 \\\n.apply(lambda x: g.inv(x[0], x[1], x[2], x[3]), axis=1)\n\n[x[0] for x in home_to_traget2]\n\nhome_to_traget2 = home_to_traget2.astype(str)\n\n#\u3000\u3053\u3053\u304b\u3089\u4e0b\u3092\u5909\u3048\u307e\u3057\u305f\ndf_test['Azimuth1_1'] = home_to_traget2.str.split('(', expand=True)[0]\ndf_test['Azimuth1_2'] = home_to_traget2.str.split('(', expand=True)[1]\ndf_test['Distance1'] = home_to_traget2.str.split(' ', expand=True)[2]\n\ndf_test['Azimuth1_2'] = df_test['Azimuth1_2'].str.split(',', expand=True)[0]\ndf_test['Azimuth1_2'] = df_test['Azimuth1_2'].astype(float)\n\n#\u3000\u5168\u3066\u53f3\u56de\u308a\u89d2\u5ea6\u306b\u5909\u63db\u3059\u308b\nconditions = [df_test['Azimuth1_2'] < 0]\nchoices = [df_test['Azimuth1_2']+360]\ndf_test['Azimuth1_2'] = np.select(conditions, choices, default = df_test['Azimuth1_2'])\n\ndf_test = df_test.drop(['Azimuth1_1','Distance1','datumlatitude','datumlongitude'], axis=1)\ndf_test['Azimuth1_2']","eca4cc09":"img = cv2.imread('\/kaggle\/input\/data-science-autumn-2021\/train\/train\/0.jpg')","d2ce4b5b":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u753b\u50cf\u3092\u5148\u982d12\u679a\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u7dba\u9e97\u306a\u304a\u5bb6\u3067\u3059\u306d\u3002\u65e5\u672c\u3067\u306f\u306a\u304b\u306a\u304b\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nn=12\nfiles = df_train['homeImage'].values[:n]\n\nplt.figure(figsize=[30,30])\nfor i, file in enumerate(files):\n    plt.subplot(n\/\/3,3,i+1)\n    img = cv2.imread('\/kaggle\/input\/data-science-autumn-2021\/train\/%s'%file)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.title(file)\n    plt.imshow(img)\nplt.show()","bbccfe75":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\n# \u30c6\u30ad\u30b9\u30c8\u3068\u753b\u50cf\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u6271\u3044\u306b\u3064\u3044\u3066\u306f\u672c\u30b3\u30f3\u30da\u3092\u901a\u3058\u3066\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u65e5\u4ed8\u3082year\u3068month\u304c\u65e2\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u65e6\u4f7f\u308f\u306a\u3044\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\ny_train = df_train.latestPrice\nX_train = df_train.drop(['latestPrice', 'description', 'homeImage', 'latest_saledate'], axis=1)\nX_test = df_test.drop(['description', 'homeImage', 'latest_saledate'], axis=1)","50af1496":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# streetAddress\u304c\u30e6\u30cb\u30fc\u30af\u306b\u8fd1\u3044\u3067\u3059\u306d\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","3512eb7f":"# streetAddress\u3082\u3042\u3068\u3067\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n# 2\u5ea6\u3042\u308b\u3053\u3068\u306f3\u5ea6\u3042\u308b\u65b9\u5f0f\u3067\u5b66\u7fd2\u3059\u308b\u306e\u304c\u6a5f\u68b0\u5b66\u7fd2\u3067\u3059\u306e\u3067\u3001\u5168\u90e81\u56de\u3057\u304b\u89b3\u6e2c\u3055\u308c\u306a\u3044\u73fe\u72b6\u306e\u307e\u307e\u3067\u306f\u76f4\u63a5\u306f\u610f\u5473\u3092\u306a\u3055\u306a\u3044\u304b\u3089\u3067\u3059\u3002\nX_train = X_train.drop(['streetAddress'], axis=1)\nX_test = X_test.drop(['streetAddress'], axis=1)","f9da07a3":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","a3fa54c4":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u4e88\u6e2c\u30b9\u30b3\u30a2\u3092\u898b\u7a4d\u3082\u3063\u3066\u307f\u307e\u3057\u3087\u3046\nscores = []\n\ncv = KFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train.iloc[val_ix], y_train.iloc[val_ix]\n \n    model = XGBRegressor(n_estimators=9999, learning_rate=0.05, random_state=71)\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='mae', early_stopping_rounds=30)\n    y_pred = model.predict(X_val)\n    score = mean_absolute_error(y_val, y_pred)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))","4b2d2948":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nnp.array(scores).mean()","5a38369b":"# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\nbest_iter = model.best_iteration\nmodel = XGBRegressor(learning_rate=0.05, n_estimators=best_iter, random_state=71)\nmodel.fit(X_train, y_train)","699fb5df":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model.predict(X_test)\ny_pred_test","812e4c48":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/sample_submission.csv', index_col=0)\nsubmission.latestPrice = y_pred_test","b83fe68b":"submission","7fe4461a":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","332cd2d0":"\u57fa\u6e96\u5ea7\u6a19\u304b\u3089\u5404\u7def\u5ea6\u30fb\u7d4c\u5ea6\u307e\u3067\u306e\u65b9\u4f4d\u89d2\u3092\u8a08\u7b97\u3059\u308b\u3000x[0]\u304c\u57fa\u6e96\u304b\u3089\u306e\u65b9\u4f4d\u89d2\u3001x[1]\u304c\u5bfe\u8c61\u304b\u3089\u306e\u65b9\u4f4d\u89d2\u3001x[2]\u306f\u5ea7\u6a19\u9593\u306e\u8ddd\u96e2\nx[0]\u3068x[1]\u306f\u5730\u7403\u304c\u7403\u4f53\u306a\u306e\u3067\u5fae\u5999\u306b\u7570\u306a\u308b\u3089\u3057\u3044\u30fb\u30fb\u30fb\n\n\uff1c\u8ffd\u52a0\uff1e\nx[0]\u304c\u3046\u307e\u304f\u62bd\u51fa\u3067\u304d\u307e\u3057\u305f\u3002\u3042\u3068\u3001\u65b9\u4f4d\u89d2\u304c\u5de6\u56de\u308a\u3068\u53f3\u56de\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u5de6\u56de\u308a\u306b\u7d71\u4e00\u3082\u8ffd\u52a0\u3057\u307e\u3057\u305f\nx[0]\u306e\u62bd\u51fa\u306f\u529b\u3065\u304f\u3067\u3001\u5076\u7136\u3067\u3059\u3002\u306a\u305c\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3067\u62bd\u51fa\u3067\u304d\u308b\u306e\u304b\u306f\u4e0d\u660e\u3067\u3059","b681817e":"\u8ddd\u96e2\u3092\u6e2c\u5b9a\u3059\u308b\u57fa\u6e96\u5ea7\u6a19\u3092\u6c7a\u3081\u308b","80a95e44":"\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u308a\u8fbc\u3080"}}