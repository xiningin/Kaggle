{"cell_type":{"ab300983":"code","24dcf78f":"code","8784f5dc":"code","e2df5df0":"code","4b8e035a":"code","37a123c1":"markdown","e7a71d38":"markdown","82ce51d7":"markdown","75f5a0cc":"markdown","4cf3ce31":"markdown","8e785e5c":"markdown","7819401f":"markdown","73f71db2":"markdown","c26e925d":"markdown","71421c77":"markdown","cdc04178":"markdown"},"source":{"ab300983":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24dcf78f":"L1 = list(range(0,11))\nL2 = list(range(0,101))\nL3 = list(range(0,1001))\nL4 = list(range(0,10001))\nL5 = list(range(0,100001))","8784f5dc":"def solution1(nums,target):\n    i=-1\n    for num1 in nums:\n        i = i + 1\n        i2 = -1\n        for num2 in nums:\n            i2 = i2 + 1\n            if num1+num2 == target:\n                if i != i2:\n                    return([i,i2])\n    return \"no matches\"","e2df5df0":"def solution2(nums,target):\n    i=-1\n    loop = 0\n    negnums = nums[::-1]\n    for num1 in nums:\n        loop = loop + 1\n        if len(negnums) == 1:\n            return(\"no matches\")\n        i = i + 1\n        i2 = len(negnums)-1\n        del(negnums[i2])\n        for num2 in negnums:\n            i2 = i2 - 1\n            if num1 + num2 == target:\n                if i != i2+loop:\n                    i2 = i2 + loop\n                    return([i,i2])","4b8e035a":"def solution3(nums, target):\n    sumpair = {}\n    for i, num in enumerate(nums):\n        n = target - num\n        if n not in sumpair:\n            sumpair[num] = i\n        else:\n            return [sumpair[n], i]\n    return \"no matches\"","37a123c1":"Question:\n\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.","e7a71d38":"Solution1\n\n| list | target | wall time  | \n| ----- | ---- | --- | \n| L1 |  6 | 10 mc |\n| L1 |  12 | 18 mc | \n| L1 | 18 | 24 mc |\n| L2 | 60 | 89 mc | \n| L2 | 120 | 290 mc |\n| L2 | 180  | 1 ms| \n| L3 | 600 | 81 mc |\n| L3 | 1200 | 38 ms |\n| L3 | 1800  | 128 ms | \n| L4 | 6000 | 982 mc |\n| L4 | 12000 | 3s |\n| L4 | 18000  | 7.8s | \n\n\n","82ce51d7":"Solution3\n\n| list | target | wall time  | \n| ----- | ---- | --- | \n| L1 |  6 | 16 mc |\n| L1 |  12 | 14 mc | \n| L1 | 18 | 13.1 mc |\n| L2 | 60 | 19 mc | \n| L2 | 120 | 29 mc |\n| L2 | 180  | 34 mc | \n| L3 | 600 | 78 mc |\n| L3 | 1200 | 154 mc |\n| L3 | 1800  | 233 mc | \n| L4 | 6000 | 825 mc |\n| L4 | 12000 | 1.56 ms |\n| L4 | 18000  | 2.3 ms | ","75f5a0cc":"a solution that cuts iterating time by half:","4cf3ce31":"We'll create some lists for testing:","8e785e5c":"The simplest brute force solution:","7819401f":"Solution2\n\n| list | target | wall time  | \n| ----- | ---- | --- | \n| L1 |  6 | 13 mc |\n| L1 |  12 | 13 mc | \n| L1 | 18 | 21 mc |\n| L2 | 60 | 17 mc | \n| L2 | 120 | 217 mc |\n| L2 | 180  | 566 mc | \n| L3 | 600 | 73 mc |\n| L3 | 1200 | 27 ms |\n| L3 | 1800  | 64 ms | \n| L4 | 6000 | 977 mc |\n| L4 | 12000 | 2.4 s |\n| L4 | 18000  | 6.3 s | \n","73f71db2":"## lets start out by viewing some inputs and outputs\nInput: nums = [2,7,11,15], target = 9  \nOutput: [0,1]  \nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].","c26e925d":"# Loop Structures\nFor this notebook I will exhibit a solution to a simple problem by employing three different loop structures","71421c77":"lets look at computing speeds:","cdc04178":"a solution using a hashmap"}}