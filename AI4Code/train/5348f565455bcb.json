{"cell_type":{"559ac3cb":"code","6f34316b":"code","f297c06f":"code","e702a63a":"code","f5282142":"code","a9c91ed7":"code","08c6eb58":"code","26ba511d":"code","50410457":"code","095e09d9":"code","902642ea":"code","7f6c7a94":"code","6eee993f":"code","8fba65cb":"code","391f199b":"code","b58ed76e":"code","41095d33":"code","b81eb759":"code","43cd857b":"code","f8714293":"code","ab8db08e":"code","6c37f623":"code","61bb12a5":"code","0d31286f":"code","0e7cd716":"code","4d30514d":"code","1d2fd9a4":"code","b3b60259":"markdown"},"source":{"559ac3cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f34316b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","f297c06f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","e702a63a":"train.head()","f5282142":"train.dtypes","a9c91ed7":"sns.countplot(x='Survived', data=train)","08c6eb58":"train.describe()","26ba511d":"train.isnull().sum()","50410457":"sns.heatmap(train.isnull())","095e09d9":"train['Cabin'].fillna('no cabin', inplace=True)\ntrain['Age'].fillna('30', inplace=True)\ntrain['Embarked'].fillna('no data', inplace=True)","902642ea":"train.isnull().sum()","7f6c7a94":"df0=train.drop(columns=['Name','Ticket'])\ndf0.head(2)","6eee993f":"test.isnull().sum()","8fba65cb":"test['Age'].fillna('30',inplace=True)\ntest.isnull().sum()","391f199b":"df1 = pd.get_dummies(df0['Sex'])\ndf2 = pd.get_dummies(df0['Embarked'])\ndf3 = pd.concat([df0,df1,df2], axis=1).drop(columns=['Sex','Embarked','no data','Cabin'])\ndf3.head()","b58ed76e":"# Number of trees:\nn_estimators = [int(x) for x in np.linspace(start= 200, stop=2000, num=10)]\n# Number of features in every split\nmax_features = ['auto','sqrt']\n# Maximum number of level in a tree\nmax_depth = [int(x) for x in np.linspace(start=10, stop=120, num=12)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2,5,7]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1,3,5]\n# Split method\nbootstrap = [True, False]\n\ngrid = {'n_estimators':n_estimators,\n       'max_features':max_features,\n       'max_depth':max_depth,\n       'min_samples_split':min_samples_split,\n       'min_samples_leaf':min_samples_leaf,\n       'bootstrap':bootstrap}","41095d33":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\ntrn = df3.drop(columns='Survived')\ntst = df3['Survived']\n\nx_train,x_test,y_train,y_test = train_test_split(trn,tst,test_size=0.20,random_state=23)\n\nrf = RandomForestRegressor()\n\nrf_rand = RandomizedSearchCV(estimator=rf, param_distributions=grid, n_iter=100, cv=3, verbose = 2,\n                             n_jobs=-1)\nrf_rand.fit(x_train,y_train)","b81eb759":"rf_rand.best_params_","43cd857b":"rf1 = RandomForestRegressor(n_estimators=30,\n                            criterion='mse',\n                            min_samples_split=2,\n                            min_samples_leaf=1,\n                            max_features='auto',\n                            max_depth=10,\n                            bootstrap=True)\nrf1_fit = rf1.fit(x_train,y_train)\ny_pred=rf1.predict(x_test).astype(int)","f8714293":"from sklearn import metrics\n\nprint('Mean absolute error: ', metrics.mean_absolute_error(y_test,y_pred))\nprint('Mean squared error: ', metrics.mean_squared_error(y_test,y_pred))\nprint('Root mean absolute error: ', np.sqrt(metrics.mean_squared_error(y_test,y_pred)))\n\nprint('Accuracy score: ', metrics.accuracy_score(y_test,y_pred.round()))","ab8db08e":"df3.head(2)","6c37f623":"df_test1 = pd.get_dummies(test['Sex'])\ndf_test2 = pd.get_dummies(test['Embarked'])\ndf_test = pd.concat([test,df_test1,df_test2], axis=1).drop(columns=['Sex','Embarked','Name','Ticket','Cabin'])\ndf_test.head()","61bb12a5":"df_test.isnull().sum()","0d31286f":"df_test['Fare'].fillna('36',inplace=True)","0e7cd716":"y_pred1=rf1.predict(df_test).astype(int)","4d30514d":"submission= pd.DataFrame({ \n    'PassengerId': test['PassengerId'],\n    'Survived': y_pred1 })\nsubmission.to_csv(\"Submission.csv\", index=False)","1d2fd9a4":"dm = pd.read_csv('Submission.csv')\ndm.head()","b3b60259":"### Hyperparameter Tuning"}}