{"cell_type":{"e97fd3e1":"code","33d624c2":"code","c0c3e589":"code","e0838019":"code","bb421383":"code","00d7a267":"code","4f7d456b":"code","299e57d9":"code","6426c90b":"code","fe7ca97c":"code","5b64de19":"code","8ec269f6":"code","2d285f2c":"code","6184331f":"code","bfbb2426":"markdown","76ce9ba1":"markdown","57a932cc":"markdown","61d3f3e0":"markdown"},"source":{"e97fd3e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33d624c2":"# import numpy as np\n# import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report","c0c3e589":"# loading the dataset\n\ndata = pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')\ndata.head()","e0838019":"data.shape","bb421383":"for i in ['Sex', 'BP', 'Cholesterol', 'Drug']:\n    print(data[i].unique())","00d7a267":"data.info()","4f7d456b":"# spliting the dataset into independent and dependent features\n\nX, y = data.drop('Drug', axis=1), data['Drug']\nprint(X.shape, y.shape)","299e57d9":"# encoding the categorical values\n\nct = ColumnTransformer([('cat', OneHotEncoder(), ['Sex', 'BP', 'Cholesterol'])], remainder='passthrough')\nX = ct.fit_transform(X)","6426c90b":"# avoiding the dummy variable trap\n\nfor i in [6,4,1]:\n    X = np.delete(X, i, 1)","fe7ca97c":"X[:2]","5b64de19":"y = LabelEncoder().fit_transform(y)\ny[:10]","8ec269f6":"# splitting the data into training and testing data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nprint(y_train.shape, y_test.shape)","2d285f2c":"# applying the data to the model\n\nclf = DecisionTreeClassifier(max_depth=5).fit(X_train, y_train)\nprint('Training Score: {:.2f}'.format(clf.score(X_train, y_train)))\nprint('Testing Score: {:.2f}'.format(clf.score(X_test, y_test)))","6184331f":"# model evaluation\n\nprint(classification_report(y_test, clf.predict(X_test)))","bfbb2426":"# Model Evaluation","76ce9ba1":"# Data Preprocessing","57a932cc":"# Applying ML Algorithm","61d3f3e0":"# Loading the Dataset"}}