{"cell_type":{"f1a8d44c":"code","c961da8f":"code","55d3f1a6":"code","22c37b9d":"code","d9c4dad9":"code","1c5f7a39":"code","8a70b209":"code","6ac3564f":"code","fdf7812d":"code","c8b48111":"code","933e0b80":"code","b55154e6":"code","4b2fa261":"code","c5f103d1":"code","8267cfbf":"code","0689b0ef":"code","bd77d305":"code","291c61e3":"code","cd77b70e":"code","db47bead":"code","0da7a2c3":"code","7a00495b":"code","bf95c70c":"code","81e7ca7a":"code","18ddbc2d":"code","f5769c1a":"code","31e651ba":"code","1974c329":"code","c5cd95be":"code","672109e5":"code","2ea1abbf":"code","694d5af2":"code","3f02a092":"code","b985b057":"code","dd91e1dd":"code","79a792d1":"code","64127591":"code","2a90900f":"markdown","9d4b49c5":"markdown"},"source":{"f1a8d44c":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport eli5\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\n\nimport lightgbm as lgbm\nimport xgboost as xgb\n\nimport pandas_profiling as pp\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, RidgeClassifier\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, accuracy_score, r2_score\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, GradientBoostingClassifier, BaggingClassifier, AdaBoostClassifier, VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom datetime import date, timedelta, datetime\n\nfrom fbprophet import Prophet\n\n\nimport warnings\nwarnings.simplefilter('ignore')","c961da8f":"train_data =pd.read_excel('..\/input\/alterclad\/ALTCLAD.xlsx')\ntest_data =pd.read_excel('..\/input\/alterclad\/ALTCLAD.xlsx')","55d3f1a6":"train_data.head(3)","22c37b9d":"train_data.info()","d9c4dad9":"df= pd.DataFrame([train_data.CLAD,train_data.AAT,train_data.MAAT,train_data.MIAT,train_data.DPT,train_data.RH,train_data.PRE,train_data.AWS]).transpose()","1c5f7a39":"type(df)","8a70b209":"corr = df.corr()\nfig = plt.figure(figsize=(15,10))\nsns.heatmap(corr)","6ac3564f":"pp.ProfileReport(df)","fdf7812d":"y = df['CLAD']\ndel df['CLAD']\n\nX = df;","c8b48111":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","933e0b80":"y","b55154e6":"train_set = lgbm.Dataset(X_train, y_train, silent=False)\nvalid_set = lgbm.Dataset(X_valid, y_valid, silent=False)","4b2fa261":"params = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'num_leaves': 31,\n        'learning_rate': 0.05,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'bagging_fraction' : 1,\n        'max_bin' : 5000 ,\n        'bagging_freq': 20,\n        'colsample_bytree': 0.6,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10,\n        'scale_pos_weight':1,\n        'zero_as_missing': True,\n        'seed':0,        \n    }\n\nmodelL = lgbm.train(params, train_set = train_set, num_boost_round=1000,\n                   early_stopping_rounds=50,verbose_eval=10, valid_sets=valid_set)","c5f103d1":"fig =  plt.figure(figsize = (15,15))\naxes = fig.add_subplot(111)\nlgbm.plot_importance(modelL,ax = axes,height = 0.5)\nplt.show();plt.close()","8267cfbf":"feature_score = pd.DataFrame(X.columns, columns = ['feature']) \nfeature_score['score_lgb'] = modelL.feature_importance()","0689b0ef":"linreg = LinearRegression()\nlinreg.fit(X, y)\ncoeff_linreg = pd.DataFrame(X.columns)\ncoeff_linreg.columns = ['feature']\ncoeff_linreg[\"score_linreg\"] = pd.Series(linreg.coef_)\ncoeff_linreg.sort_values(by='score_linreg', ascending=False)","bd77d305":"eli5.show_weights(linreg)","291c61e3":"coeff_linreg[\"score_linreg\"] = coeff_linreg[\"score_linreg\"].abs()\nfeature_score = pd.merge(feature_score, coeff_linreg, on='feature')\nfeature_score = feature_score.fillna(0)\nfeature_score = feature_score.set_index('feature')\nfeature_score","cd77b70e":"feature_scorefeature_score = feature_score.set_index('feature')\nfeature_score","db47bead":"feature_score = pd.DataFrame(\n    preprocessing.MinMaxScaler().fit_transform(feature_score),\n    columns=feature_score.columns,\n    index=feature_score.index\n)\n\n# Create mean column\nfeature_score['mean'] = feature_score.mean(axis=1)\n\n# Plot the feature importances\nfeature_score.sort_values('mean', ascending=False).plot(kind='bar', figsize=(20, 10))","0da7a2c3":"feature_columns = ['AAT', 'MAAT', 'DPT', 'MIAT']\n\nX = X[feature_columns];\n\nX.head()","7a00495b":"df1= pd.DataFrame(train_data)","bf95c70c":"del(df1['ALTE']) ","81e7ca7a":"df1.rename(columns={\"Date\":\"ds\",\"CLAD\":\"y\"})","18ddbc2d":"tdf= pd.concat([train_data.Date, train_data.CLAD], axis=1)","f5769c1a":"tdf.columns=['ds','y']\ntdf.head(2)","31e651ba":"m = Prophet()\nm.fit(tdf)","1974c329":"future= m.make_future_dataframe(periods=300)\nfuture.tail(2)","c5cd95be":"forecast=m.predict(future)","672109e5":"fig1 =m.plot(forecast)","2ea1abbf":"fig1 = m.plot_components(forecast)","694d5af2":"from fbprophet.plot import add_changepoints_to_plot\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), m, forecast)","3f02a092":"m.changepoints","b985b057":"pro_change= Prophet(changepoint_range=0.9)\nforecast = pro_change.fit(tdf).predict(future)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","dd91e1dd":"pro_change= Prophet(n_changepoints=20, yearly_seasonality=True)\nforecast = pro_change.fit(tdf).predict(future)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","79a792d1":"pro_change= Prophet(n_changepoints=20, yearly_seasonality=True, changepoint_prior_scale=0.08)\nforecast = pro_change.fit(tdf).predict(future)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","64127591":"pro_change= Prophet(n_changepoints=20, yearly_seasonality=True, changepoint_prior_scale=0.001)\nforecast = pro_change.fit(tdf).predict(future)\nfig= pro_change.plot(forecast);\na = add_changepoints_to_plot(fig.gca(), pro_change, forecast)","2a90900f":"LOG REG","9d4b49c5":"LREG"}}