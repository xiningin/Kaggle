{"cell_type":{"0f8b23ff":"code","5cc6458f":"code","ad9d0e6d":"code","9213b46d":"code","48d096e8":"code","5290e21b":"code","62999602":"code","52aa6824":"code","82706412":"code","cbd74619":"code","1209e877":"code","ab1983ad":"code","73985ea6":"code","33ae0320":"code","ce04b67c":"code","ba571636":"code","5d84a2f2":"code","7b103f9f":"code","35ee555c":"code","bcd9612e":"code","f63285cd":"code","b6066802":"code","a6bf641c":"code","06ac9db8":"code","b37946c8":"code","b710089f":"code","d34967e8":"markdown","abfaa770":"markdown","793a74c0":"markdown","5e2c87f9":"markdown","638c8f31":"markdown","129cb952":"markdown","5f13ad81":"markdown","33a56df1":"markdown","c1e8271b":"markdown","d4e8c2f8":"markdown","3df83770":"markdown","d15173a4":"markdown","4835cc58":"markdown","2fef5680":"markdown","b8c95f84":"markdown","d16832e1":"markdown","ffb8f798":"markdown","1d36f4db":"markdown","d4dc9aed":"markdown","2c8025d9":"markdown","4a6f6c7d":"markdown","d49080f2":"markdown"},"source":{"0f8b23ff":"# Before we start, let's import the libraries that will be used in later of this tutorials.\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Don't worry if you don't know how to use numpy, pandas and seaborn, I will explain them in details in other notebooks.","5cc6458f":"# Before we start anything, let's create some sample data for our plotting.","ad9d0e6d":"# set random seed so that you could have the exactly same results as mine.\nnp.random.seed(0)\n\ndf = pd.DataFrame(data={'a':np.random.randint(0, 100, 30),\n                        'b':np.random.randint(0, 100, 30),\n                        'c':np.random.randint(0, 100, 30)})\ndf.head()","9213b46d":"# Let's create a figure and call it fig.\nfig = plt.figure()\n# This will return an empty figure.","48d096e8":"# Let's create a figure with figsize (15, 8) and also call it fig (thus overwriting the reference to the previous fig).\n# The 15x8 figsize is arbitrary, but I use it as a standard size to work with for visibility.\nfig = plt.figure(figsize=(15,8))","5290e21b":"fig = plt.figure(figsize=(15,8))\nax = plt.subplot(1,1,1) # (rows, columns, and location)\n                        # this would create a 1x1 grid of subplots\n                        # and choose axes #1","62999602":"fig = plt.figure(figsize=(15,8))\nax1 = plt.subplot(2,1,1) # this would create a 2x1 grid of subplots\n                         # and choose axes #1\nax2 = plt.subplot(2,1,2) # this would create a 2x1 grid of subplots\n                         # and choose axes #2","52aa6824":"fig, ax = plt.subplots(2, 1, figsize=(15,8)) # This creates a figure of size 15x8 with\n                                             # a 2x1 grid of subplots.","82706412":"fig, ax = plt.subplots(2, 1, figsize=(15,8)) # This creates a figure of size 15x8 with\n                                             # a 2x1 grid of subplots.\nax[0] # The top axes\nax[1] # The bottom axes","cbd74619":"fig, ax = plt.subplots(2, 2, figsize=(15,8)) # This creates a figure of size 15x8 with\n                                             # a 2x1 grid of subplots.\n\nax[0][0].plot(df.index.values, df['a']) # The top-left axes\nax[0][1].plot(df.index.values, df['b']) # The top-right axes\nax[1][0].plot(df.index.values, df['c']) # The bottom-left axes\nax[1][1].plot(df.index.values, range(len(df))) # The bottom-right axes","1209e877":"fig, ax = plt.subplots(1,1, figsize=(15,8))\n\nx = df.index.values # The index the dataframe we created up above. Equivalent to [0, 1, ..., 28, 29]\ny = df['a'] # Column 'a' from df.\n\nax.plot(x, y)","ab1983ad":"# The above plot can be generated without creating the variables\n# x and y by passing the values directly to the function.\n\nfig, ax = plt.subplots(2,1, figsize=(15,8))\n\nax[0].plot(df.index.values, df['a'])\nax[1].plot(df.index.values, df['b'])","73985ea6":"fig, ax = plt.subplots(1,1, figsize=(15,8))\n\nx = df.index.values # The index the dataframe we created up above. Equivalent to [0, 1, ..., 28, 29]\ny1 = df['a'] # Column 'a' from df.\ny2 = df['b'] # Column 'a' from df.\n\nax.plot(x, y1)\nax.plot(x, y2)","33ae0320":"sns.set_style('darkgrid') # setting the plotting style\n                          # we only need to call this once,\n                          # usually before we start plotting.\n\nfig, ax = plt.subplots(1,1, figsize=(15,8))\n\nax.plot(df.index.values, df['a'])\nax.plot(df.index.values, df['b'])","ce04b67c":"sns.set_style('darkgrid') # setting the plotting style\n\nfig, ax = plt.subplots(1,1, figsize=(15,8))\n\nax.plot(df.index.values, df['a'], color='red', ls='-.')\nax.plot(df.index.values, df['b'], color='orange', lw=10)\nax.plot(df.index.values, df['c'], color='yellow', lw=1, marker='o')","ba571636":"fig, ax = plt.subplots(1,1, figsize=(15,8))\n\nax.plot(df.index.values, df['a'], label='Line A') # add the label\nax.plot(df.index.values, df['b'], label='Line B') # kwarg to each\nax.plot(df.index.values, df['c'], label='Line C') # function\n\nax.legend(loc='best') # and now call the ax.legend() function\n            # it will read all of the labels from graphical\n            # objects under ax","5d84a2f2":"fig, ax = plt.subplots(3,1, figsize=(15,8))\n\nax[0].plot(df.index.values, df['a'], label='Line A') # Top\nax[1].plot(df.index.values, df['b'], label='Line B') # Middle\nax[2].plot(df.index.values, df['c'], label='Line C') # Bottom\n\nax[0].legend(loc=4) # This will create a legend for ax[0] in the bottom-right.\nax[1].legend(loc=6) # This will create a legend for ax[1] centre-left.\n\n# Also note that all lines will default to the first color in the default color cycle--blue.","7b103f9f":"# Start your answer from here","35ee555c":"# My Sample Answer\nfig, ax = plt.subplots(2, 1, figsize=(15,8))\n\nax[0].plot(df.index.values, df['a'], c='green')\nax[0].plot(df.index.values, df['b'], c='orange')\nax[0].legend(loc=9) # \"9\": upper center\n\nax[1].plot(df.index.values, df['c'], marker='o', lw=0) # set line width = 0, means no visuable line","bcd9612e":"fig, ax = plt.subplots(1, 1, figsize=(15,8))\n\nbar_kwargs = {'color':'tomato', 'alpha':0.5}\n\nax.bar(df.index.values, df['a'], label='a', **bar_kwargs)\nax.legend()","f63285cd":"# Start your answer from here","b6066802":"# My Sample Answer\nfig, ax = plt.subplots(3, 1, figsize=(15,18))\n\nax[0].bar(df.index.values, df['a'])\nfor i in range(df.shape[0]):\n    ax[0].text(i, df['a'][i]+1, df['a'][i], horizontalalignment='center')\nax[0].legend('a')\n    \nax[1].bar(df.index.values, df['b'])\nfor i in range(df.shape[0]):\n    ax[1].text(i, df['b'][i]+1, df['b'][i], horizontalalignment='center')\nax[1].legend('b')\n\nax[2].bar(df.index.values, df['a'])\nax[2].bar(df.index.values, df['b'], bottom=df['a'])\nfor i in range(df.shape[0]):\n    ax[2].text(i, df['a'][i]+df['b'][i]+1, df['a'][i]+df['b'][i], horizontalalignment='center')\nax[2].legend(['a','b'])","a6bf641c":"np.random.seed(0)\n\nfig, ax = plt.subplots(figsize=(15,7))\n\nax.plot(df.index.values, df['a'], marker='^')\nax.set_title('This is the Title')\nax.set_ylabel('This is the Y Axis')\nax.set_xlabel('This is the X Axis', fontsize=20)\n\nax.set_xticks(df.index.values)\nax.set_xticklabels(np.random.randint(1,30,30), fontsize=15, color='red')\n\nax.legend()\nfig.tight_layout()","06ac9db8":"# mock data\nnp.random.seed(0)\n\nturnover_data = pd.DataFrame({'boardid' : ['DAY', 'DAY_X', 'DAY_U', 'TSE'], \n                              'turnover' : np.random.randint(1e6, 1e9, 4)})\n\n# sort by turnover value\nturnover_data = turnover_data.sort_values(by='turnover').reset_index().drop('index', axis=1)\n\n# convert value to Million unit for easy-reading\nturnover_data['turnover_simplified'] = turnover_data['turnover'] \/\/ 1000000\n\n# market share\nturnover_data['market_share'] = round((turnover_data['turnover'] \/ sum(turnover_data['turnover'])*100), 1)\n\nturnover_data","b37946c8":"# Start your answer from here","b710089f":"# My Sample Answer\nfig, ax1 = plt.subplots(figsize=(15,10))\n\nax1.bar(turnover_data['boardid'], turnover_data['turnover'], width=0.5, color='lightgreen')\nfor i in range(turnover_data.shape[0]):\n    ax1.text(turnover_data['boardid'][i], turnover_data['turnover'][i]+1e7, str(turnover_data['turnover_simplified'][i])+'M', fontsize=15, horizontalalignment='center')\n\nax1.set_title('Turnover Data', fontsize=20)\nax1.set_xticklabels(turnover_data['boardid'], fontsize=15);\n\nax1.tick_params(labelsize=15, axis='y')\n\nax1.set_ylabel('Turnover Values(Million)', fontsize=20)\nax1.set_ylim(0, max(turnover_data['turnover']+1e8))\n\n# Format ax1 y axis - method 1\nvals = ax1.get_yticks()\nax1.set_yticklabels([str(x\/1000000)+'M' for x in vals])\n\n\nax2 = ax1.twinx()\nax2.plot(turnover_data['boardid'], turnover_data['market_share'], c='red', lw=4, marker='o')\nfor i in range(turnover_data.shape[0]):\n    ax2.text(turnover_data['boardid'][i], turnover_data['market_share'][i]+1, str(turnover_data['market_share'][i])+'%', fontsize=15, horizontalalignment='center', color='black')\n\nax2.set_ylabel('Market Shares(%)', fontsize=20)\nax2.tick_params(labelsize=15, axis='y', rotation=30)\n\n# Format ax2 y asix - method 1\n# ax2.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.0%}'.format(y\/100)))\n\n# Format ax2 y asix - method 2\nvals = ax2.get_yticks()\nax2.set_yticklabels([str(x)+'%' for x in vals]);","d34967e8":"<a id=\"2\"><\/a> <br>\n# 2. SUBPLOTS (AXES)\n\nAn empty figure is a bit boring. Now you can write directly to the figure using `matplotlib.pyplot` methods, but it's generally easier and safer to draw these inside individual subplots (axes) within the graph.","abfaa770":"Tips: If you want to check the sample answer, please check the following cell block.","793a74c0":"Tips: If you want to check the sample answer, please check the following cell block.","5e2c87f9":"### **Dataset for this tutorial**","638c8f31":"We can also create multiple lines on the same axes. To do this, you just call the `ax.plot()` function multiple times.","129cb952":"### **Content**\n1. [The Figure](#1)\n2. [Subplots](#2)\n3. [Line Plots](#3)\n    - [Exercise 1](#ex1)\n4. [Bar Plots](#4)\n    - [Exercise 2](#ex2)\n5. [Tick Labels and Axis Labels](#5)\n    - [Exercise 3](#ex3)","5f13ad81":"<a id=\"5\"><\/a> <br>\n# 5. TICK LABELS AND AXES LABELS\n\nAlthough matplotlib automatically assigns tick labels to your graph, it will not be enough to explain your results. <br>\nClarity of information is crucial in a graph and to do that we have options to modify tick labels and axes labels to how we see fit. <br>\n\n`ax.set_title()`, `ax.set_xlabel()`, `ax.set_ylabel()`, `ax.set_xticklabels()`, `ax.set_yticklabels()` are the main tools here.","33a56df1":"<a id=\"ex3\"><\/a> <br>\n### Exercise 3\nVisualize the mock data given below.<br>\nCreate bars to represent the turnover for each market.<br>\nKeep in mind that showing too much information on a graph can be overwhelming, so do it with discretion !<br>\nUse labels to make sure your audience understands the graph.<br>\n**Extra Challenge**:  On the opposite axis, draw a line to show each market share. (Hint: use `ax.twinx()`)","c1e8271b":"In order to call the individual subplots with the above method, use an indexer `ax[i]` or `ax[i][j]`","d4e8c2f8":"<a id=\"4\"><\/a> <br>\n# 4. BAR PLOTS\nThe other common type of graph you will create is a bar graph.<br>\nThese can be created with the axes method `ax.bar(x, height)`.<br>","3df83770":"<a id=\"3\"><\/a> <br>\n# 3. LINE PLOTS\n\nLine graphs can be called as a method of a subplot (pair of axes):<br>\n`ax.plot(x, y)`","d15173a4":"Let's begin with our first plot.","4835cc58":"#### Combining Subplots with Line Graphs\nTo to draw lines on separate axes, call the `ax.plot()` function as a method of the axes you want to draw the line on.","2fef5680":"<a id=\"ex2\"><\/a> <br>\n### Exercise 2\nCreate a figure with three subplots, aligned vertically.<br>\nCreate a bar graph for a and b on the first two, but at the last one draw both a and b, but put b on top of a! (Hint: use the bottom argument in the bar function)<br>\nMake sure the color for a and b are consistent in all the subplots!<br>\n**Extra Challenge**: Write the magnitude of each bar on top of it","b8c95f84":"<a id=\"1\"><\/a> <br>\n# 1. THE FIGURE\nThe figure acts as a container for the graph. It has properties such as size (`figsize`), and methods such as `Figure.show()` or `Figure.save_fig()`.\nEach time you call the `matplotlib.pyplot.figure` function, a new figure will be created.","d16832e1":"# CONCLUSION\n\nThank you for your votes and comments. \n\nIf you have any questions or suggests, please feel free to message me.","ffb8f798":"The `plot()` function has many *keyword arguments*, or *kwargs*. Some of the important ones include:\n- `color` sets line color\n- `linewidth` or `lw` sets line width\n- `linestyle` or `ls` sets line style. Possible values include `'-'` (solid line), `'-.'` (dot-dash), `'--'` (dashed).\n- `marker` creates points for each of the individual data points in the line graph. Possible values for `marker` include `'o'` (circles), `'s'` (squares), etc.\n\nLet's see some examples.","1d36f4db":"Tips: If you want to check the sample answer, please check the following cell block.","d4dc9aed":"At this point it's worth mentioning a convenient function that makes our plots much prettier without having to configure them. This function is `seaborn.set_style('darkgrid')` from the library seaborn.","2c8025d9":"#### Legends\nIt can be a bit hard to tell apart all of the lines, so let's add a legend.\nThe `ax.legend()` function reads the `label` arguments from previous function calls on a given axes, and automatically generates a legend.<br>\nNote that `ax.legend()` can take additional arguments.\n- `loc` will specify the location of the legend. If you do not specify this argument, matplotlib will automatically choose the best location.\n- `ncol` specifies the number of columns the legend will have.\n- You can also create a completely custom axes legend by passing *patches* and *labels*, but we'll discuss that later.","4a6f6c7d":"<a id=\"ex1\"><\/a> <br>\n### Exercise 1\nCreate a figure of size 15x8 with two subplots, top and bottom.<br>\nDraw two lines in the top axes, one green and one orange.<br>\nAdd a legend for the top plot, *Green* and *Orange*. Put this legend in the top-middle of graph.<br>\n**Extra Challenge**: In the bottom axes, create a graph of only the data points, marked by circles, but with no line connecting the points.","d49080f2":"In this tutorial, I will cover the basic plot types and parameters of Matplotlib so that you could use it as a powerful Tool for your own data analysis projects.\n\nAlso, there are a lot of other data visulization tools such as **seaborn**, **plotly**, **highcharts**, etc. which I will cover them one by one in the future."}}