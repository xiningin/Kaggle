{"cell_type":{"d6bf624e":"code","a5c199ee":"code","db708276":"code","83cb3eb4":"code","4b354254":"markdown","3a4b0534":"markdown","dfa1fd6e":"markdown","174f3bbc":"markdown","33cfa4f2":"markdown"},"source":{"d6bf624e":"import json\nfrom os import path\n\nimport attr\n\n\ndef full_dir_path(relative_path: str) -> str:\n    ret = path.abspath(path.expanduser(relative_path))\n    if not ret.endswith('\/'):\n        ret = ret + '\/'\n    return ret\n\n\n@attr.s\nclass Params(object):\n    # Test mode runs quickly and produces horrible results!\n    test_mode: float = attr.attrib(default=False)\n\n    families_val_split: float = attr.attrib(default=0.1)\n    input_data_dir: str = attr.attrib(default=full_dir_path('..\/input\/'))\n    output_data_dir: str = attr.attrib(default=full_dir_path('.\/'))\n    # 1 +ve sample, 1 -ve sample.\n    negative_sample_ratio: float = attr.attrib(default=0.5)\n    # Batches of 32 (16 +ve, 16 -ve)\n    batch_size: int = attr.attrib(default=32)\n    # initiate_config overrides this in test_mode\n    steps_per_epoch: int = attr.attrib(default=200)\n    # initiate_config overrides this in test_mode\n    validation_steps: int = attr.attrib(default=100)\n\n    def override_params(self, config_file_path: str, verbose: bool = False):\n        try:\n            with open(config_file_path, \"r\") as f:\n                config = json.load(f)\n                if verbose:\n                    print(\"Before initiate_config:\", self)\n                for k, v in config.items():\n                    if k not in self.__dict__:\n                        print(\"Ignoring invalid entry present in config. \"\n                              \"entry key:\", k)\n                        pass\n                    if k.endswith('_dir'):\n                        v = full_dir_path(v)\n                    self.__dict__[k] = v\n            if verbose:\n                print(\"After initiate_config:\", self)\n        except Exception as e:\n            print(\"Exception while loading config json. This is okay when \"\n                  \"running on kaggle. Error:\", e)\n        if self.test_mode:\n            self.validation_steps = min(self.validation_steps, 5)\n            self.steps_per_epoch = min(self.steps_per_epoch, 2)","a5c199ee":"params: Params = Params()\nprint(\"params:\", params)","db708276":"# Override params with a json config.\nparams.override_params('..\/input\/program-params-demo-config\/config.json')\nprint(\"The above override should succeed. Updated params: \", params)","83cb3eb4":"# Update the params with invalid config. The update fails, but does not crash.\nparams.override_params('invalid_path.json')\nprint(\"The above override should fail. params: \", params)","4b354254":"# Motivation\nI recently started doing kaggle and one common annoyance I face is that I can't test my code easily on my workstation. Given that most kaggle contests require usage of deep neural nets, it is almost impossible to train any model on my workstation. But I love my IDE and I want to do a trail run of my program on my workstation before committing to kaggle.\n\nA Params util class like the one I defined here makes this easier. The params class variables would default to what I want to run on kaggle. I will have an override function that takes a json config. This function fails on kaggle (butdoes not crash).","3a4b0534":"# Code","dfa1fd6e":"# Usage\n### Creating params object.","174f3bbc":"### Overriding params with invalid config ","33cfa4f2":"### Overriding the params"}}