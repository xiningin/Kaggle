{"cell_type":{"98c96177":"code","174317af":"code","38aae93c":"code","c0ea7a2b":"code","6011216a":"code","1187ae05":"code","0f9b693e":"code","31db8ef9":"code","5388dffd":"code","95e8cbe1":"code","4a52d538":"code","d35741f1":"code","c4390094":"code","11816f5f":"code","dff0f584":"code","76edc584":"code","4087ed9b":"code","2e9cacd6":"code","fb1c8aa6":"code","e4a9c8a4":"code","2f384edd":"code","bf99629e":"code","4d833090":"code","8111b884":"code","db5bd2ef":"code","83f4bfaf":"code","cbf2432f":"code","219e886c":"markdown"},"source":{"98c96177":"import pandas as pd\nimport cv2\nfrom tqdm import tqdm\nimport ast\nfrom sklearn import model_selection\nimport numpy as np\nimport os\nimport shutil","174317af":"!git clone https:\/\/github.com\/ultralytics\/yolov5\n!mv yolov5\/* .\/\n!pip install -r requirements.txt","38aae93c":"pip install wandb","c0ea7a2b":"!mkdir new_data","6011216a":"train_df = pd.read_csv('..\/input\/payment-detection\/train.csv')\nnew_imgs = []\nnew_boxes = []\ncards = {\n    'VI':0,\n    'MA':1,\n    'EX':2, \n    'PC':3, \n    'ST':4,\n    'UY':5\n        }\n\nfor _,row in tqdm(train_df.iterrows()):\n    label = cards[row['label']]\n    x = int(row['x1'] * (1280\/row['width']))\n    y = int(row['y1'] * (1280\/row['height']))\n    w = int(row['w'] * (1280\/row['width']))\n    h = int(row['h'] * (1280\/row['height']))\n    img_name = row['image']\n    temp_img = cv2.imread('..\/input\/payment-detection\/train\/train\/'+img_name)\n    #temp_img = cv2.cvtColor(temp_img, cv2.COLOR_BGR2RGB)\n    temp_img = cv2.resize(temp_img,(1280,1280))\n\n    cv2.imwrite('.\/new_data\/'+img_name,temp_img)\n    new_imgs.append(img_name)\n    new_boxes.append([label,x,y,w,h])","1187ae05":"!mkdir new_data_test\nTEST_PATH = '..\/input\/payment-detection\/test\/test\/'\nfor item in tqdm(os.listdir('..\/input\/payment-detection\/test\/test\/')):\n    temp_img = cv2.imread(TEST_PATH+item)\n    #temp_img = cv2.cvtColor(temp_img, cv2.COLOR_BGR2RGB)\n    temp_img = cv2.resize(temp_img,(1280,1280))\n    cv2.imwrite('new_data_test\/'+item,temp_img)","0f9b693e":"clean_train_df = pd.DataFrame(zip(new_imgs,new_boxes),columns = ['image_id','bbox'])\nclean_train_df['image_id'] = clean_train_df['image_id'].apply(lambda x: x.split('.')[0])\nclean_train_df","31db8ef9":"type(clean_train_df.iloc[1].bbox)","5388dffd":"#clean_train_df.bbox = clean_train_df.bbox.apply(ast.literal_eval)\ndf = clean_train_df.groupby('image_id')['bbox'].apply(list).reset_index(name='bboxes')\ndf_train,df_valid = model_selection.train_test_split(\n    df,\n    test_size = 0.1,\n    random_state = 42,\n    shuffle = True\n)\ndf_train = df_train.reset_index(drop=True)\ndf_valid = df_valid.reset_index(drop=True)","95e8cbe1":"!mkdir card_data\n!mkdir card_data\/images\n!mkdir card_data\/labels\n!mkdir card_data\/images\/train\n!mkdir card_data\/images\/validation\n!mkdir card_data\/labels\/train\n!mkdir card_data\/labels\/validation\n!tree card_data","4a52d538":"DATA_PATH = '.\/new_data\/'\nOUTPUT_PATH = '.\/card_data\/'\ndef process_data(data,data_type=\"train\"):\n    for _,row in tqdm(data.iterrows(),total=len(data)):\n        image_name = row['image_id']\n        bounding_boxes = row['bboxes']\n        yolo_data = []\n        for bbox in bounding_boxes:\n            x = bbox[1]\n            y = bbox[2]\n            w = bbox[3]\n            h = bbox[4]\n            label = bbox[0]\n            x_center = x + w \/ 2\n            y_center = y + h \/ 2\n            x_center \/= 1280.0\n            y_center \/= 1280.0\n            w \/= 1280.0\n            h \/= 1280.0\n            yolo_data.append([label, x_center, y_center, w, h])\n        yolo_data = np.array(yolo_data)\n        np.savetxt(\n            os.path.join(OUTPUT_PATH, f\"labels\/{data_type}\/{image_name}.txt\"),\n            yolo_data,\n            fmt=[\"%d\", \"%f\", \"%f\", \"%f\", \"%f\"]\n        )\n        shutil.copyfile(\n            os.path.join(DATA_PATH, f\"{image_name}.jpg\"),\n            os.path.join(OUTPUT_PATH, f\"images\/{data_type}\/{image_name}.jpg\")\n        )\n        \nprocess_data(df_train,data_type = \"train\")\nprocess_data(df_valid,data_type = \"validation\")","d35741f1":"#\u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u043d\u0444\u0438\u0433\nwith open('card.yaml','w+') as f:\n    f.write('train: .\/card_data\/images\/train\\n')\n    f.write('val : .\/card_data\/images\/validation\\n')\n    f.write('nc: 6\\n')\n    f.write('names: [\"VI\",\"MA\",\"EX\",\"PC\",\"ST\",\"UY\"]')","c4390094":"!cat 'card.yaml'","11816f5f":"ls models","dff0f584":"import wandb\n#from kaggle_secrets import UserSecretsClient\n#user_secrets = UserSecretsClient() \n\npersonal_key_for_api = '5f9c88df1464fae268d899182385bde5772a5365'\n\n! wandb login $personal_key_for_api","76edc584":"!python train.py --img 1280 --batch 4 --epochs 45 --data card.yaml --name may9x6 --weights yolov5x6.pt --cache --notest","4087ed9b":"import torch\nwith torch.no_grad():\n    torch.cuda.empty_cache()\n!nvidia-smi\n","2e9cacd6":"!du -sh","fb1c8aa6":"!ls .\/runs\/train","e4a9c8a4":"!python detect.py --source .\/new_data_test --weights runs\/train\/may9x6\/weights\/best.pt --img 1280 --save-txt --save-conf --conf-thres 0.45 --iou-thres 0.30 ","2f384edd":"!cat runs\/detect\/exp3\/labels\/00423e14be0f133c8770f8abd6934faf.txt","bf99629e":"#!ls runs\/detect\/exp\nfrom IPython.display import Image\nfiles = os.listdir('runs\/detect\/exp\/')\n\nprint(files[528])\n!cat runs\/detect\/exp\/labels\/ffefed2d2c1540298f537548f281bd0e.txt\nImage(\"runs\/detect\/exp\/\" + files[794])","4d833090":"labels = os.listdir('runs\/detect\/exp\/labels\/')\nimage = []\nlenght = []\nfor item in labels:\n    with open('runs\/detect\/exp\/labels\/' + item,'r') as f:\n        #print((f.readlines()))\n        image.append(item)\n        lenght.append(f.readlines())\nresult_pd = pd.DataFrame(zip(image,lenght), columns = ['image','labels'])\nresult_pd.to_csv('result.csv')","8111b884":"def c_sort(sub_li):\n        \"\"\"\n        \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0431\u043e\u043a\u0441\u043e\u0432 \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c. \u0421\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e \u0441\u0432\u0435\u0440\u0445\u0443 \u0432\u043d\u0438\u0437.\n        \"\"\"\n        sub_li.sort(key = lambda x: (x[1], x[2]))\n        return sub_li\ncards = {\n    0:'VI',\n    1:'MA',\n    2:'EX', \n    3:'PC', \n    4:'ST',\n    5:'UY'\n        }\n      ","db5bd2ef":"import re\n# \u0422\u0443\u0442 width, height = 640. \u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\nsubs_yolo = pd.read_csv('.\/result.csv').drop(columns='Unnamed: 0')\n!rm .\/result.csv\nboxes_yolo = {}\nfor ind,row in subs_yolo.iterrows():\n    im = row['image'].replace('.txt','.jpg')\n    width = 640\n    height = 640\n    boxes = row['labels'].replace('[','').replace(']','').replace('\\n','').replace(\"'\",'').replace('\\\\n','')\n    res_boxes = []\n    if ',' in boxes:\n        temp_boxes = boxes.split(',')\n        for box in temp_boxes:\n            if box[0] == ' ':\n                box = box[1:]\n            boxes = box.split(' ')\n            x_c = int(float(boxes[1])*float(width))\n            y_c = int(float(boxes[2]) * float(height))\n            xmin = int(int(x_c) - ((int(width)*float(boxes[3]))\/2))\n            ymin = int(int(y_c) - ((int(height)*float(boxes[4]))\/2))\n            xmax = int(int(x_c) + ((int(width)*float(boxes[3]))\/2))\n            ymax = int(int(y_c) + ((int(height)*float(boxes[4]))\/2))\n            label = cards[int(boxes[0])]\n            res_boxes.append([label,xmin,ymin,xmax,ymax])\n        \n    else:\n        temp_boxes = boxes.split(' ')\n        x_c = int(int(float(temp_boxes[1])*float(width)))\n        y_c = int(int(float(temp_boxes[2]) * float(height)))\n        xmin = int(int(x_c) - ((int(width)*float(temp_boxes[3]))\/2))\n        ymin = int(int(y_c) - ((int(height)*float(temp_boxes[4]))\/2))\n        xmax = int(int(x_c) + ((int(width)*float(temp_boxes[3]))\/2))\n        ymax = int(int(y_c) + ((int(height)*float(temp_boxes[4]))\/2))\n        label = cards[int(temp_boxes[0])]\n        res_boxes.append([label,xmin,ymin,xmax,ymax])\n    boxes_yolo[im] = c_sort(res_boxes)","83f4bfaf":"sub = pd.read_csv('..\/input\/payment-detection\/submission.csv')\nsubs = {}\nfor ind,row in sub.iterrows():\n  subs[row['image']] = row['payment']\n\nfor item in subs:\n  if boxes_yolo.get(item) != None and boxes_yolo[item] != 'err':\n    labels = []\n    for box in boxes_yolo[item]:\n      labels.append(box[0])\n    subs[item] = ' '.join(labels)\n  else:\n    subs[item] = 'VI'\n\ndf = pd.DataFrame(list(subs.items()),columns=['image','payment'])\ndf.to_csv('submission.csv',index=False)\n!rm -rf .\/utils .\/yolov5 .\/data .\/models .\/weights .\/new_data .\/new_data_test .\/card_data .\/test.py .\/LICENSE .\/card.yaml .\/detect.py .\/__init__.py .\/requirements.txt .\/README.md .\/hubconf.py .\/train.py .\/Dockerfile","cbf2432f":"from IPython.display import FileLink\nFileLink(r'submission.csv')","219e886c":"# \u0427\u0442\u043e \u043c\u043e\u0433\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n1. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e(\u043f\u043e\u043c\u0438\u043c\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0432 yolov5).\n2. \u0414\u043e\u0432\u0435\u0441\u0442\u0438 \u0434\u043e \u0443\u043c\u0430 PseudoLabeling(\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b, \u043d\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u044b\u043b \u043d\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439).\n3. \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b."}}