{"cell_type":{"2a7aeb49":"code","53e153da":"code","c3f9f85b":"code","c58ff051":"code","6cca40e0":"code","d2e1840c":"code","c409115b":"code","c464d2c3":"code","1828c9d8":"code","bbceb9ad":"code","1049115e":"code","b4e1a98c":"code","3d0ec8ee":"code","8de46748":"code","e903e45c":"code","66579ac9":"code","330e51df":"code","887c38fb":"code","580c3944":"code","f51bbcfb":"code","41f9581e":"code","ca8e8f69":"code","c9881067":"code","8b94358f":"code","316dca42":"code","f3676683":"code","dd9aff4d":"code","dfbcdf46":"code","85e05594":"code","9e9e585d":"code","3f1114e3":"code","3acb1f8c":"code","40eeb255":"markdown","66f27244":"markdown","17f95f99":"markdown","439c9bc5":"markdown","ad88fba2":"markdown","bc9f0e0b":"markdown","85ca0346":"markdown","e369b775":"markdown","d15db84b":"markdown","e5683460":"markdown","99b9d05d":"markdown","c1030412":"markdown","89440fe6":"markdown","90c622e0":"markdown","474d4c4d":"markdown","62c1e4b5":"markdown","d1fbec50":"markdown","227e0262":"markdown","0b0e36ad":"markdown"},"source":{"2a7aeb49":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('max_columns',100, 'max_rows',100)\nsns.set(context='notebook', style='whitegrid', palette='deep')\nfrom sklearn.impute import KNNImputer","53e153da":"from IPython.display import display_html\ndef disp_side(*args):\n    html_str='  '\n    for df in args:\n        html_str+=df.to_html()\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw=True)","c3f9f85b":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ndataset = pd.concat([train,test],axis = 0,ignore_index =True,sort=False)\n\ntrain.shape,test.shape,dataset.shape","c58ff051":"dataset.head()","6cca40e0":"nullcnt = dataset.isnull().sum().to_frame()\nnulldf = nullcnt[nullcnt[0]>0].sort_values(0,ascending=False)\nnulldf.drop('SalePrice',axis=0,inplace=True)\nprint('Number of columns containing null:',nulldf.shape[0])\nprint('Number of columns containing nulls in 1000s :',(nulldf[0]>1000).sum())\nprint('Number of columns containing nulls in 100s : ',((1000>nulldf[0])&(nulldf[0] >100)).sum())\nprint('Number of columns containing nulls in 10s :',((100>nulldf[0]) &(nulldf[0] >10)).sum())\nprint('Number of columns containing nulls less than 10 :',(nulldf[0]<10).sum())\ndisp_side(nulldf[:12],nulldf[12:24],nulldf[24:])","d2e1840c":"bsmcols =  [col for col in dataset.columns if 'Bsmt' in col]\ndataset[bsmcols].isnull().sum()","c409115b":"dataset[dataset['TotalBsmtSF'] == 0][bsmcols].head()","c464d2c3":"# if 'TotalBsmtSF' is 0 or not available then apply following strategy\nrows = (dataset['TotalBsmtSF'] == 0) | (dataset['TotalBsmtSF'].isnull())\ndataset.loc[rows,['BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtQual']] = 'NAv'\ndataset.loc[rows,['BsmtFinSF1','BsmtFinSF2','BsmtFullBath','BsmtHalfBath']] = 0\ndataset.loc[rows,['BsmtUnfSF','TotalBsmtSF']] = 0\ndataset[bsmcols].isnull().sum()            ","1828c9d8":"# Remaining nulls are in categorical or discrete columns. Let's replace it with mode\nremain = ['BsmtCond','BsmtExposure','BsmtFinType2','BsmtQual']\nmodes = dataset[remain].mode().values.tolist()[0]\nmapdict = dict(zip(remain,modes))\n\ndataset.fillna(mapdict,inplace=True)","bbceb9ad":"dataset[bsmcols].isnull().sum()","1049115e":"garcols =  [col for col in dataset.columns if 'Garage' in col]\ndataset[garcols].isnull().sum()","b4e1a98c":"garcat = ['GarageCond','GarageFinish','GarageQual','GarageType']\nrows = (dataset['GarageArea'] == 0) & (dataset['GarageCars'] == 0) & (dataset[garcat].isnull().all(axis=1))\ndataset.loc[rows,garcat] = 'NAv'\ndataset.loc[rows,'GarageYrBlt'] = 0\ndataset[garcols].isnull().sum()","3d0ec8ee":"dataset[dataset[garcols].isnull().any(axis=1)][garcols]","8de46748":"# calculating mode for categorical columns with GarageType 'Detached' \ndataset.loc[dataset['GarageType'] == 'Detchd',['GarageCond','GarageFinish','GarageQual']].mode()","e903e45c":"#  For index 2126 and 2576 we will replace null in following ways\n\n# 'GarageYrBlt' -> 'YearBuilt'\ndataset.loc[2126,'GarageYrBlt'] = dataset.loc[2126,'YearBuilt']\ndataset.loc[2576,'GarageYrBlt'] = dataset.loc[2576,'YearBuilt']\n\n# categorical and discrete columns -> mode calculated as above\ndataset.loc[[2126,2576],['GarageCond','GarageQual']] = 'TA'\ndataset.loc[[2126,2576],'GarageFinish'] = 'Unf'\ndataset.loc[2576,['GarageCars']] = dataset.loc[dataset['GarageType'] == 'Detchd','GarageCars'].mode().values\n\n# numeric col -> mean\ndataset.loc[2576,['GarageArea']] = dataset.loc[dataset['GarageType'] == 'Detchd','GarageArea'].mean()\n","66579ac9":"dataset[garcols].isnull().sum()","330e51df":"null_count = dataset.isnull().sum()\nnulldf = null_count[null_count>0]\nnulldf.drop('SalePrice',axis = 0)","887c38fb":"dataset.fillna({'Alley':'NAv','Fence':'NAv'},inplace = True)\ndataset.loc[dataset['MasVnrArea'] == 0,'MasVnrType'] = 'NAv'\ndataset.loc[dataset['Fireplaces'] == 0,'FireplaceQu'] = 'NAv'\ndataset.loc[dataset['MiscVal'] == 0,'MiscFeature'] = 'NAv'\ndataset.loc[dataset['PoolArea']==0,'PoolQC'] = 'NAv'","580c3944":"null_count = dataset.isnull().sum()\nnulldf = null_count[null_count>0]\nnulldf.drop('SalePrice',axis = 0)","f51bbcfb":"# Lets replace nulls in remainin categorical and discrete columns with mode value. \n# These column's null count are less than 5.\nremain_cols = ['Electrical','Exterior1st','Exterior2nd','Functional','KitchenQual','MiscFeature','PoolQC','SaleType','Utilities']\nmodes = dataset[remain_cols].mode()\nmapdict = dict(zip(remain_cols,modes))\ndataset.fillna(mapdict,inplace=True)","41f9581e":"dataset[dataset[['MasVnrArea','MasVnrType']].isnull().any(axis=1)][['MasVnrArea','MasVnrType']]","ca8e8f69":"rows = dataset[['MasVnrType','MasVnrArea']].isnull().all(axis=1)\ndataset.loc[rows,['MasVnrType','MasVnrArea']] = 0\n# row 2610 where MasVnr is present\ndataset.at[2610,'MasVnrType'] = dataset['MasVnrType'].mode()","c9881067":"pd.crosstab(dataset['MSZoning'],dataset['Neighborhood'])","8b94358f":"dataset[dataset['MSZoning'].isnull()][['MSZoning','Neighborhood']]","316dca42":"dataset.fillna({'MSZoning':'RM'},inplace=True)\ndataset.at[2904,'MSZoning'] = 'RL'","f3676683":"before = dataset['LotFrontage'].copy()\ncormat = dataset.corr()['LotFrontage']\n# cormat.drop(['SalePrice','LotFrontage'],axis = 0,inplace=True)\ncormat_before = cormat[cormat> 0.3].to_frame()\n\n\ncormat_before\n","dd9aff4d":"\nfeatures = dataset.select_dtypes(np.number).columns.drop('SalePrice')\n\nimputer = KNNImputer(n_neighbors=5,weights = 'uniform')\ndataset[features] = imputer.fit_transform(dataset[features])","dfbcdf46":"cormat = dataset.corr()['LotFrontage']\n# cormat.drop(['SalePrice','LotFrontage'],axis = 0,inplace=True)\ncormat_after = cormat[cormat> 0.3].to_frame()\n\nfig,(ax1,ax2) = plt.subplots(1,2,figsize=(15,5))\nsns.distplot(before,ax=ax1)\nsns.distplot(dataset['LotFrontage'],ax=ax2)\n\ndisp_side(cormat_before,cormat_after)","85e05594":"cleaned_train = dataset[:1460].copy()\ncleaned_test = dataset[1460:].copy()\ncleaned_test.drop('SalePrice',axis=1,inplace=True)","9e9e585d":"nulls = cleaned_train.isnull().sum()\nnulls[nulls>0]","3f1114e3":"nulls = cleaned_test.isnull().sum()\nnulls[nulls>0]","3acb1f8c":"# Storing for future use\ncleaned_train.to_csv('ctrain.csv',index = False)\ncleaned_test.to_csv('ctest.csv',index=False)","40eeb255":"## Data Cleaning\n\nThis dataset contains lots of missing values in many columns. we have applied different strategy for imputing based on data understanding.\n\nWe have observed 34 columns which contains null values. ","66f27244":"## Loading Data","17f95f99":"## Importing Libraries","439c9bc5":"In above list, TotalBsmtSF(Total Basement in square foot) is key column to impute other columns as well as it only has one missing value. we can set NaNs in categorical as NAv(Not available) and numeric columns to 0.","ad88fba2":"All above nulls are present in only two rows. Presence of some quantities indicates the availablity of garage in the property.Let's analyze it carefully and impute data accordingly.","bc9f0e0b":"Let's focus on following set of columns first\n\nAlley (Nominal): Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access\n       \nFence (Ordinal): Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n       \nFireplaceQu (Ordinal): Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n       \n Mas Vnr Type (Nominal): Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone\n       \n Misc Feature (Nominal): Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n       \n Pool QC (Ordinal): Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n       \n       \nFor above columns we have following strategy for filling nulls\n1. Alley and Fence are null as they are not available. Therefore impute it with NA(Not Available)\n2. MasVnrType, PoolQC,MiscFeature will be set to NA(Not Available) if fireplaces, PoolArea,MiscVal are 0 as it indicates no availability of that feature for that particular property","85ca0346":"### Imputing data in Basement related columns","e369b775":"## Introduction  \n  \n\n![image.png](attachment:image.png)\n\nAmes Housing Datset includes 80 potential features directly related to property sales. It focuses on the quality and quantity of many physical attributes of the property. Most of the variables are exactly the type of information that a typical home buyer would want to know about a potential property(e.g. When was it built? How big is the lot? etc..). \n\n\nIn this version,we are mainly focus on Data Cleaning. In this case, we are dealing with imputing data. Generally, we may tend to drop columns those are having more than 50 percent of data. But, if we would carefully read the document(http:\/\/jse.amstat.org\/v19n3\/decock\/DataDocumentation.txt) and get the proper insight of the data, we will find that it can be imputed with appropriate values. \n\nOur aim is to clean data but keeping the shape and size of whole dataset same.\n\nLet's take a look.","d15db84b":"GarageArea and GarageCars has only 1 missing value. Remaining categorical columns has missing value if these two columns are zero. It means Garage is not available fot that corresponding property. So, here is the strategy, If these two columns are zero and other columns are NaN then we put NAv(Not Available) in categorical columns and 0 in 'GarageYrBlt'","e5683460":"### Imputing data in Remaining Columns","99b9d05d":"Descriptions of columns:\n\n\nGarage Type (Nominal): Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\nGarage Yr Blt (Discrete): Year garage was built\n\t\t\nGarage Finish (Ordinal)\t: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\t\t\nGarage Cars (Discrete): Size of garage in car capacity\n\nGarage Area (Continuous): Size of garage in square feet\n\nGarage Qual (Ordinal): Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarage Cond (Ordinal): Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","c1030412":"### Seperating train and test data:","89440fe6":"### Imputing data in Garage related columns:","90c622e0":"We have succeded in imputing these large amount of data while maintained significant correlation matrix(corr>0.3) and the original distribution shape almost same as before.","474d4c4d":"### Dealing with nulls in LotFrontage:\nLotFrontage is numeric column contains 486 missing values. We must be extra careful to impute such large number of values. Setting up constant value may affect seriously on performance of our model. Removing rows may cause unnecessary reduction of our train data.\n\nWe have two choices: first,remove column and second, impute data with appropriate value still mainitaining the distribution shape same. We would not go with first choice as this column has considerable correlation with 'SalePrice'.Let's think of second choice. We will use KNN imputer which uses k nearest neighbors to impute missing value.","62c1e4b5":"In above list, most of the columns are related to Garage and Basement(i.e.Bsmt). We will analyse columns in each category together. Because some columns may help us to impute other columns.  ","d1fbec50":"\n### Dealing with nulls in MSZoning:\n\nMSZoning indicates the zone(commercial\/residential\/agriculture..etc) under which property comes. It could have relation with neighborhood.To understand this, we have generated pivot table in which columns are neighborhood values and indexes are MSzoning values. Each cell in this df indicates count(no. of properties) for corresponding zone and neighborhood. \n\nIf we will look at following df, each neighborhood column has particular MSZoning with very high frequency. Our current misssing MSzoning contains neighborhood 'IDOTRR' and 'Mitchel' so based on below df. We would replace corresponding MSZoning with 'RM' and 'RL' respectively.","227e0262":"'MasVnrType' and 'MasVnrArea' not yet imputed completely. Let's carefully look at its description.\n\nMas Vnr Type (Nominal): Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone\n\t\nMas Vnr Area (Continuous): Masonry veneer area in square feet\n\nIt could be possible that Masonary Veneer may not be present for particular propery if MasVnrType is None. Based on this knowledge we would replace null with NAv for MasVnrType and with 0 for MasVnrArea ","0b0e36ad":"This cleaned data will be used further for analysis and predictive modelling. In the next section we will focus on EDA and Feature Engineering"}}