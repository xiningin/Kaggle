{"cell_type":{"8d4b1b14":"code","73ee911d":"code","c53b2129":"code","3c12c16d":"code","0c4968c8":"code","4065cf99":"code","c9587130":"code","af6a117d":"code","a0c9cbde":"code","01097ac8":"code","42ef5cc8":"code","f3bf9751":"code","a3387a89":"code","63b575a2":"code","a01fd505":"code","5d52d3b8":"code","29796bfd":"markdown","13187299":"markdown"},"source":{"8d4b1b14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73ee911d":"import plotly.express as px\n\ndf = px.data.iris()\ndf","c53b2129":"fig = px.scatter(df,x=\"sepal_length\",y=\"sepal_width\",color=\"species\",marginal_y=\"violin\",marginal_x=\"box\")\nfig.update_layout(width=800,height=600)\nfig.show()","3c12c16d":"df = px.data.iris()\nfig = px.scatter_matrix(df,dimensions=[\"sepal_length\",\"sepal_width\",\"petal_width\",\"petal_length\"],color=\"species\")\nfig.update_layout(width=800,height=500)\nfig.show()","0c4968c8":"import plotly.express as px\ndf = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\", labels={\"species_id\": \"Species\",\n                  \"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n                  \"petal_width\": \"Petal Width\", \"petal_length\": \"Petal Length\", },\n                    color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=2)\nfig.update_layout(width=800,height=500)\nfig.show()","4065cf99":"tips_data = px.data.tips()\ntips_data","c9587130":"fig = px.parallel_categories(tips_data,color=\"size\",color_continuous_scale=px.colors.sequential.Inferno)\nfig.update_layout(width=800,height=500)\nfig.show()","af6a117d":"data2 = px.data.gapminder()\ndata2","a0c9cbde":"fig = px.scatter(data2.query(\"year==2007\"),x=\"gdpPercap\",y=\"lifeExp\",size=\"pop\",color=\"continent\",hover_name=\"country\",log_x=True,size_max=60)\nfig.update_layout(title=dict(text='<b>GDP vs lifeExpectation',\n                             font=dict(size=20,\n                                       color='grey'),\n                             xref='paper', # container or paper\n                             x=0.5,\n                             y=0.95,\n                             xanchor='center'),                            \n                   width=700,\n                   height=500,\n                   )\n\nfig.show()","01097ac8":"import plotly.express as px\ndf = px.data.gapminder()\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\", facet_col=\"continent\",\n           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])\nfig.show()","42ef5cc8":"import plotly.express as px\n\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'])\nfig.show()","f3bf9751":"import plotly.express as px\ndf = px.data.gapminder()\nfig = px.scatter_geo(df, locations=\"iso_alpha\", color=\"continent\", hover_name=\"country\", size=\"pop\",\n               animation_frame=\"year\", projection=\"natural earth\")\nfig.show()","a3387a89":"import plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.treemap(df, path=[px.Constant('world'), 'continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'])\nfig.show()","63b575a2":"import plotly.express as px\ndf = px.data.carshare()\ndf","a01fd505":"fig = px.scatter_mapbox(df, lat=\"centroid_lat\", lon=\"centroid_lon\", color=\"peak_hour\", size=\"car_hours\",\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=10,\n                  mapbox_style=\"carto-positron\")\nfig.show()","5d52d3b8":"import plotly.express as px\ndf = px.data.election()\nfig = px.scatter_3d(df, x=\"Joly\", y=\"Coderre\", z=\"Bergeron\", color=\"winner\", size=\"total\", hover_name=\"district\",\n                  symbol=\"result\", color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\":\"red\"})\nfig.update_layout(width=800,height=500)\nfig.show()","29796bfd":"# References\n### Plotly express in python : https:\/\/plotly.com\/python\/plotly-express\/","13187299":"# This is just for my training note book using plotly"}}