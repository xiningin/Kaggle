{"cell_type":{"ca45333b":"code","dcbfb039":"code","b21848e4":"code","f44d675d":"code","1279c7a0":"code","7e078a1c":"code","23b105d0":"code","6ca7e982":"code","8b36494f":"code","10b20c76":"code","23f98545":"code","6f380f28":"code","f47d6e83":"code","f21f8dd0":"code","1d4963a9":"code","27d10e4b":"code","84d73c42":"code","37e7152a":"code","605c3b32":"code","d30cab33":"code","7ab40f1d":"markdown","9da0e737":"markdown","010a58b8":"markdown","5e35cc95":"markdown","c06e8993":"markdown","098cfa66":"markdown","5b00e9b1":"markdown"},"source":{"ca45333b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","dcbfb039":"movies = pd.read_csv(r'..\/input\/movie-lens-small-latest-dataset\/movies.csv')\nratings = pd.read_csv(r'..\/input\/movie-lens-small-latest-dataset\/ratings.csv')","b21848e4":"movies.head()","f44d675d":"ratings.head()","1279c7a0":"data = pd.pivot(index = 'movieId',columns = 'userId', data = ratings,values ='rating')\ndata.head()","7e078a1c":"numberOf_user_voted_for_movie = pd.DataFrame(ratings.groupby('movieId')['rating'].agg('count'))\nnumberOf_user_voted_for_movie.reset_index(level = 0,inplace = True)\nnumberOf_user_voted_for_movie.head()","23b105d0":"data.shape","6ca7e982":"numberOf_movies_voted_by_user = pd.DataFrame(ratings.groupby('userId')['rating'].agg('count'))     \nnumberOf_movies_voted_by_user.reset_index(level = 0,inplace = True)\nnumberOf_movies_voted_by_user.head()","8b36494f":"data.fillna(0,inplace = True)\ndata.head()","10b20c76":"numberOf_user_voted_for_movie.describe()","23f98545":"numberOf_movies_voted_by_user.describe()","6f380f28":"plt.figure()\nax = sns.scatterplot(y = 'rating', x = 'movieId', data = numberOf_user_voted_for_movie)\nplt.axhline(y=10,color='r')\nplt.ylabel('Number Of Users Voted for Movie')","f47d6e83":"plt.figure()\nax = sns.scatterplot(y = 'rating', x = 'userId', data = numberOf_movies_voted_by_user)\nplt.axhline(y=60,color='r')\nplt.ylabel('Number Of Movies rated by user')","f21f8dd0":"data_final = data.loc[numberOf_user_voted_for_movie[numberOf_user_voted_for_movie['rating'] > 10]['movieId'],:]\ndata_final = data_final.loc[:,numberOf_movies_voted_by_user[numberOf_movies_voted_by_user['rating'] > 60]['userId']]\ndata_final.shape","1d4963a9":"data_final","27d10e4b":"from scipy.sparse import csr_matrix\ncsr_data = csr_matrix(data_final.values)\ndata_final.reset_index(inplace=True)","84d73c42":"data_final.head()","37e7152a":"# trying out methods to get recommended indices from knn output\n# from sklearn.neighbors import NearestNeighbors\n# knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20)\n# knn.fit(csr_data)\n# movie_list = movies[movies['title'].str.contains('Iron Man')]\n# movie_idx= movie_list.iloc[0]['movieId'] #movieId\n# movie_idx = data_final[data_final['movieId'] == movie_idx].index[0] #userId acc to movieId\n# distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=11) #returns distances from ref and indices(userId)\n# indices\n# indices.squeeze() to reduce dimension of array so that it can zipped with dimensions.squeeze()\n# sorted(list(zip(indices.squeeze(),distances.squeeze())),key = lambda x: x[1])[1::1]","605c3b32":"from sklearn.neighbors import NearestNeighbors\nknn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20)\nknn.fit(csr_data)\ndef get_movie_recommendation(movie_name):\n    n= 10\n    movie_list = movies[movies['title'].str.contains(movie_name)]  \n    if len(movie_list):        \n        movie_idx= movie_list.iloc[0]['movieId'] #movieId\n        movie_idx = data_final[data_final['movieId'] == movie_idx].index[0] #userId acc to movieId\n        distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=n+1)    \n        rec_movie_indices = sorted(list(zip(indices.squeeze(),distances.squeeze())),key=lambda x: x[1])[1::1]\n        recommend = []\n        recommend2 = []\n        for val in rec_movie_indices:\n            movie_idx = data_final.iloc[val[0]]['movieId']\n            idx = movies[movies['movieId'] == movie_idx].index\n            recommend.append(movies.iloc[idx]['title'].values[0])\n            recommend2.append(val[1])         \n        df1 = pd.DataFrame(recommend)\n        df2 = pd.DataFrame(recommend2)\n        df = pd.concat([df1,df2],axis = 'columns')\n        df.columns = ['Title','Distance']\n        df.set_index('Distance',inplace = True)\n        return df\n    else:\n        return \"No movies found. Please check your input\"\n","d30cab33":"# n = input()\n# get_movie_recommendation(n.title())\nget_movie_recommendation('Iron Man')","7ab40f1d":"## Test \/ Run the Recommendation System","9da0e737":"#### Item to item based collaborative filtering is the principle being applied. It involves finding similar movies based on inputs from multiple users in the form of ratings.","010a58b8":"### Visualizing Thresholds set to remove noise from data","5e35cc95":"### Dealing with sparsity ","c06e8993":"## Loading Datasets","098cfa66":"## The Magic","5b00e9b1":"## Importing Libraries"}}