{"cell_type":{"0a2da25f":"code","e80c2d06":"code","2b5e7ec6":"code","23916087":"code","82475fe4":"code","247b6c2e":"code","9fb52594":"code","59809a37":"code","1ab7c1f9":"code","05f70e2f":"code","8714ab65":"markdown"},"source":{"0a2da25f":"%matplotlib inline\nimport numpy as np # linear algebra\nnp.random.seed(2018)\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom glob import glob \nimport matplotlib.pyplot as plt\nimport os\nimport pandas as pd\nimport seaborn as sns\nfrom skimage.util.montage import montage2d\nfrom skimage.io import imread\nfrom tqdm import tqdm\nbase_dir = os.path.join('..', 'input') # 'pulmonary-chest-xray-abnormalities'\nall_xray_df = pd.read_csv(os.path.join(base_dir, 'Data_Entry_2017.csv'))\n\nall_image_paths = {os.path.basename(x): x for x in \n                   glob(os.path.join('..', 'input',  'images*', '*', '*.png'))}\nprint('Scans found:', len(all_image_paths), ', Total Headers', all_xray_df.shape[0])\nall_xray_df['path'] = all_xray_df['Image Index'].map(all_image_paths.get)\n\nwith open(os.path.join(base_dir, 'test_list.txt'), 'r') as f:\n    validated_files = [x.strip() for x in f.readlines()]\nall_xray_df['validated'] = all_xray_df['Image Index'].isin(validated_files)\nall_xray_df['Single Finding'] = all_xray_df['Finding Labels'].map(lambda x: '|' not in x)\nprint('Single Finding Scans:', all_xray_df['Single Finding'].sum())\nall_xray_df.sample(5)","e80c2d06":"all_xray_df[all_xray_df['Single Finding']].groupby(['Finding Labels'])\\\n    .size().reset_index(name='counts').sort_values('counts', ascending=False)","2b5e7ec6":"unnecessary_categories = ['Mass', 'Cardiomegaly', 'Hernia', \n                          'Nodule', 'Fibrosis']\nkeep_categories = ['Cardiomegaly', 'Pneumothorax', 'Infiltration', 'Effusion', 'No Finding']","23916087":"sf_validated_df = all_xray_df[\n    all_xray_df['Single Finding'] & \n    all_xray_df['validated'] &\n    all_xray_df['Finding Labels'].map(lambda x: x in keep_categories)\n]\nsf_validated_df.sample(3)","82475fe4":"import zipfile as zf\nfrom skimage.io import imread, imsave\nfrom skimage.transform import resize\nfrom tqdm import tqdm_notebook\nall_rows = []\nDS_SIZE = 512\nGROUP_SIZE = 20\nAGE_SPLITS = 5\nwith zf.ZipFile('high_res.zip', 'w') as hrz, zf.ZipFile('low_res.zip', 'w') as lrz:\n    for finding, rows_df in tqdm_notebook(sf_validated_df.groupby('Finding Labels')):\n        # only 1 per patient\n        clean_rows_df = rows_df.groupby('Patient ID').apply(lambda x: x.sample(1)).reset_index(drop=True)\n        # group by age and gender\n        clean_rows_df['age_group'] = pd.qcut(\n            clean_rows_df['Patient Age'], AGE_SPLITS)\n        ag_groups = clean_rows_df.groupby(['age_group', \n                                           'Patient Gender'])\n        \n        if len(ag_groups)<GROUP_SIZE:\n            # for some patients the count is very low\n            # and so we cant really stratify\n            out_rows = clean_rows_df.sample(GROUP_SIZE)\n        else:\n            # if we have enough stratify by age and gender\n            out_rows = ag_groups.apply(lambda x: \n                                       x.sample(GROUP_SIZE\/\/AGE_SPLITS)).reset_index(drop=True)\n        \n        print(finding, out_rows.shape[0],'\/',clean_rows_df.shape[0], 'cases')\n        arc_path = lambda x: os.path.basename(x)\n        for _, c_row in out_rows.iterrows():\n            hrz.write(c_row['path'],\n                arcname = arc_path(c_row['path']),\n                compress_type = zf.ZIP_STORED)\n            \n            full_image = imread(c_row['path'], as_grey=True)\n            rs_img = resize(full_image, (DS_SIZE, DS_SIZE))\n            rgb_rs = plt.cm.gray(rs_img)[:, :, :3]\n            imsave('test.png', rgb_rs)\n            lrz.write('test.png',\n                arcname = arc_path(c_row['path']),\n                compress_type = zf.ZIP_STORED)\n        all_rows += [out_rows]\n        ","247b6c2e":"dataset_df = pd.concat(all_rows)\ndataset_df.to_csv('dataset_overview.csv', index=False)\ndataset_df.sample(3)","9fb52594":"dataset_df.groupby('Finding Labels').size().reset_index(name='counts')","59809a37":"','.join(dataset_df.groupby('Finding Labels').size().reset_index(name='counts')['Finding Labels'].values)","1ab7c1f9":"sns.swarmplot(y='Finding Labels', \n               x = 'Patient Age', \n               hue = 'Patient Gender',\n               data = dataset_df)","05f70e2f":"sns.swarmplot(y='Finding Labels', \n               x = 'Patient Age', \n               hue = 'View Position',\n               data = dataset_df)","8714ab65":"# Create DataTurks Dataset\nHere we make a dataset for classifying on dataturks. The basic task is to extract examples of each type of image. \n\n## Next Steps\n### Additional task to think about for this would be\n\n* Stratifying across different ages, genders, view positions and other diseases\n* Making sure the same patient does not appear twice\n* Including patients with bounding boxes"}}