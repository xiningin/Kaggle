{"cell_type":{"8df6f3f3":"code","de442c66":"code","84584ed3":"code","2394f78e":"code","5e9d9238":"code","ce332a6c":"code","ea4bba3f":"code","ee079150":"code","60a1ecd3":"code","ff12fdc1":"code","5b7f3063":"code","1e172a7f":"code","e22c7dff":"code","a10ff607":"code","c6e11128":"code","9081946e":"code","9dbf68e2":"code","8aff5a5c":"code","b47a73ef":"code","49a3bd43":"code","09ed7102":"code","be1bf29c":"code","ec58d178":"markdown","51a7d44f":"markdown","0e9f3fd9":"markdown","783a967a":"markdown","a7390cd1":"markdown","f8f3828b":"markdown"},"source":{"8df6f3f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go #for visualisation\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de442c66":"data = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","84584ed3":"data.head()","2394f78e":"data.info()","5e9d9238":"data.drop([\"source_name\", \"source_website\", \"iso_code\", \"daily_vaccinations_raw\"], axis = 1, inplace = True)","ce332a6c":"data.date = pd.to_datetime(data.date)","ea4bba3f":"data.sort_values(['country', 'date'], \n              ascending = [True, True], inplace = True)","ee079150":"data.tail()","60a1ecd3":"countries_to_drop = []\nfor c in data.country.unique():\n    if len(data[data['country'] == c]) < 30:\n       countries_to_drop.append(c) ","ff12fdc1":"for c in countries_to_drop:\n    data = data.drop(data[data.country == c].index)","5b7f3063":"cols_last_val_imputation = [\"total_vaccinations\", \"people_vaccinated\", \"people_fully_vaccinated\", \"total_vaccinations_per_hundred\", \n                            \"people_vaccinated_per_hundred\", \"people_fully_vaccinated_per_hundred\", \"vaccines\"]","1e172a7f":"data.shape","e22c7dff":"for c in data.country.unique():\n    data.loc[data['country'] == c, cols_last_val_imputation] = data.loc[data['country'] == c, cols_last_val_imputation].fillna(method='ffill')","a10ff607":"data.head()","c6e11128":"data.fillna(0.0, inplace = True)","9081946e":"data.head()","9dbf68e2":"num_cols = [\"total_vaccinations\", \"people_vaccinated\", \"people_fully_vaccinated\", \"daily_vaccinations\",\n            \"total_vaccinations_per_hundred\", \"people_vaccinated_per_hundred\", \n            \"people_fully_vaccinated_per_hundred\", \"daily_vaccinations_per_million\"]","8aff5a5c":"global_data = data.groupby(['date'])[num_cols].mean().reset_index()","b47a73ef":"global_data.head()","49a3bd43":"def plot_feature(feature):\n    \n    countries = sorted(set(data[\"country\"]))\n\n    fig=go.Figure()\n\n    country_plot_names = []\n    buttons=[]\n\n    default_country = \"Ireland\"\n\n    for country in countries:\n        data_country = data[(data[\"country\"]==country)]\n        data_global = global_data\n\n        # We have two traces we're plotting per state: a boxplot of the submission quartiles, and a line with the current data to-date\n        fig.add_trace(go.Scatter(name = country, x=data_country[\"date\"], y=data_country[feature],line={}, visible=(country==default_country)))\n        fig.add_trace(go.Scatter(name = 'Global',x=data_global[\"date\"], y=data_global[feature], line={}))\n\n        country_plot_names.extend([country]*2)\n\n    for country in countries:\n        buttons.append(dict(method='update',\n                            label=country,\n                            args = [{'visible': [country==r for r in country_plot_names]}]))\n\n    # Add dropdown menus to the figure\n    fig.update_layout(showlegend=True, updatemenus=[{\"buttons\": buttons, \"direction\": \"down\", \"active\": countries.index(default_country), \"showactive\": True, \"x\": 0.5, \"y\": 1.15}])\n    fig.show()","09ed7102":"plot_feature('total_vaccinations')","be1bf29c":"plot_feature('total_vaccinations_per_hundred')","ec58d178":"## Prepading data for visualisation","51a7d44f":"### Droping countries with less than 30 days of data","0e9f3fd9":"We can now forward fill the below columns for each countires","783a967a":"## Comparing each infomation of countires with the Global mean","a7390cd1":"### removing irrelevant columns for the current scenario","f8f3828b":"Filling in the na values with 0 for the non forward filled columns"}}