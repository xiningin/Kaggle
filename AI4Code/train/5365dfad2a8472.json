{"cell_type":{"17d15f6d":"code","39bef0fa":"code","69d0310a":"code","c1400faf":"code","65b6ca7d":"code","3c143cd0":"code","010c3f24":"code","607286bb":"code","37b7fa06":"code","85b088c2":"code","518ca6f7":"code","25576cb6":"code","4a0e4246":"code","de824ea3":"code","279a4530":"code","f53d7e03":"code","b5fc5370":"code","7f815459":"code","a7e01734":"code","5c343407":"markdown","dba407e4":"markdown","af4f95ea":"markdown","2c84e706":"markdown"},"source":{"17d15f6d":"%%time\n#  \u3053\u306e\u30bb\u30eb\uff08jupyter \u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u5358\u4f4d\u3067\u3059\u3002\uff09\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u307f\u3001sqlite \u30c7\u30fc\u30bf\u3068\u63a5\u7d9a\u3057\u3066\u3001\u4e00\u6642\u7684\u306a\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n# pandas \u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n# \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u64cd\u4f5c\u306f\uff33\uff31\uff2c\u3092\u901a\u3058\u3066\u884c\u3046\u306e\u3067\u3001pandas \u306f\u3001\u30b0\u30e9\u30d5\u3092\u66f8\u304f\u305f\u3081\u306b\u4f7f\u3046\u306e\u304c\u4e3b\u3067\u3059\u3002\nimport pandas as pd\nimport numpy as np\nimport pandas.io.sql as psql\n\n# sqlite\u3092\u8aad\u307f\u8fbc\u3080\u30e9\u30a4\u30d6\u30e9\u30ea\nimport sqlite3\n\n# \u7dda\u5f62\u56de\u5e30\u3000\u4f7f\u3046\u983b\u5ea6\u306f\u3042\u307e\u308a\u306a\u3044\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u3044\u308c\u3066\u304a\u304d\u307e\u3059\u3002\nfrom sklearn import linear_model\nclf = linear_model.LinearRegression()\n\n\n\n# HTML\u3067\u8868\u793a\u3059\u308b\u3000\u30a8\u30af\u30bb\u30eb\u306b\u30b3\u30d4\u30da\u3059\u308b\u3068\u304d\u306b\u4fbf\u5229\nfrom IPython.display import display, HTML\n\n# markdown \u7528\nfrom tabulate import tabulate\n\n# \u65e5\u6642\u3092\u6271\u3046\nfrom datetime import datetime as dt\nimport time\n\n# \u30b0\u30e9\u30d5\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\n%matplotlib inline\n\n# system \u95a2\u4fc2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport sys\n# os \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\nimport os\n# \u6b63\u898f\u8868\u73fe\nimport re\n\n# json,yaml \u5f62\u5f0f\u3092\u6271\u3046\nimport json\nimport yaml\n\n# \u5909\u6570\u306e\u72b6\u614b\u3092\u8abf\u3079\u308b\nimport inspect\n\n# \u6587\u5b57\u30b3\u30fc\u30c9\nimport codecs\n\n# Web \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\nimport requests\n\n# \u8cbf\u6613\u7d71\u8a08\u306e\u30c7\u30fc\u30bf\n# http:\/\/www.customs.go.jp\/toukei\/info\/tsdl_e.htm\n# \u30b3\u30fc\u30c9\u3000\u8f38\u51fa\u306f\u65e5\u672c\u8a9e\u306e\u307f\n# https:\/\/www.customs.go.jp\/toukei\/sankou\/code\/code_e.htm \n\n# sqlite \u306b show tables \u304c\u306a\u3044\u306e\u3067\u88dc\u8db3\u3059\u308b\u3082\u306e\nshow_tables = \"select tbl_name from sqlite_master where type = 'table'\"\n# describe \u3082\u306a\u3044\u3067\u3001\u88dc\u5b8c\u3057\u307e\u3059\u3002\ndesc = \"PRAGMA table_info([{table}])\"\n# \u30e1\u30e2\u30ea\u3067\u3001sqlite \u3092\u4f7f\u3044\u307e\u3059\u3002kaggle \u306e\u30b9\u30af\u30ea\u30d7\u30c8\u4e0a\u3067\u306f\u3001\u30aa\u30f3\u30e1\u30e2\u30ea\u3067\u306a\u3044\u3068\u65b0\u898f\u30c6\u30fc\u30d6\u30eb\u304c\u3064\u304f\u308c\u307e\u305b\u3093\n# \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u884c\u304c\u9577\u3044\u3068\u304d\u306f\u3000\\\u3000\u3067\u6539\u884c\u3057\u307e\u3059\u3002\nconn = \\\n    sqlite3.connect(':memory:')\n\n# sql \u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3067\u3059\u3002\ncursor = conn.cursor()\n\n# 1997 \u5e74\u304b\u3089\u30012019 \u5e74\u307e\u3067\u306e\u5e74\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306f\u3001year_from_1997 \n# year_from_1997\nattach = 'attach \"..\/input\/japan-trade-statistics\/y_1997.db\" as y_1997'\ncursor.execute(attach)\n\n# 2018 \u5e74\u306e\u6708\u5225\u96c6\u8a08 \u30c6\u30fc\u30d6\u30eb\u540d\u3082 ym_2018 \nattach = 'attach \"..\/input\/japan-trade-statistics\/ym_2018.db\" as ym_2018'\ncursor.execute(attach)\n\n# 2019 \u5e74\u306e\u6708\u5225\u96c6\u8a08 \u30c6\u30fc\u30d6\u30eb\u540d\u3082 ym_2019\nattach = 'attach \"..\/input\/japan-trade-statistics\/ym_2019.db\" as ym_2019'\ncursor.execute(attach)\n\n# 2020 \u5e74\u306e\u6708\u5225\u96c6\u8a08 \u30c6\u30fc\u30d6\u30eb\u540d\u3082 ym_2020\nattach = 'attach \"..\/input\/japan-trade-statistics\/ym_2020.db\" as ym_2020'\ncursor.execute(attach)\n\n# hs code,country,HS\u30b3\u30fc\u30c9\u3067\u3059\u3002\u4f7f\u3044\u3084\u3059\u3044\u3088\u3046\u306b pandas\u3000\u306b\u5909\u66f4\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nattach = 'attach \"..\/input\/japan-trade-statistics\/codes.db\" as code'\ncursor.execute(attach)\n# import hs,country code as pandas\ntmpl = \"{hs}_{lang}_df =  pd.read_sql('select * from code.{hs}_{lang}',conn)\"\nfor hs in ['hs2','hs4','hs6','hs6','hs9']:\n    for lang in ['jpn','eng']:\n        exec(tmpl.format(hs=hs,lang=lang))        \n\n# \u56fd\u30b3\u30fc\u30c9\u3082 pandas \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n# country table: country_eng,country_jpn\ncountry_eng_df = pd.read_sql('select * from code.country_eng',conn)\ncountry_eng_df['Country']=country_eng_df['Country'].apply(str)\ncountry_jpn_df = pd.read_sql('select * from code.country_jpn',conn)\ncountry_jpn_df['Country']=country_jpn_df['Country'].apply(str)\n\n# custom  table: code.custom \u7a0e\u95a2\u5225\u306e\u30b3\u30fc\u30c9\u3067\u3059\ncustom_df = pd.read_sql('select * from code.custom',conn)\nattach = 'attach \"..\/input\/japan-trade-statistics\/custom_from_2012.db\" as custom_from'\ncursor.execute(attach)\nattach = 'attach \"..\/input\/custom-2016\/custom_2018.db\" as custom_2018'\ncursor.execute(attach)\nattach = 'attach \"..\/input\/custom-2016\/custom_2019.db\" as custom_2019'\ncursor.execute(attach)\n\nattach = 'attach \"..\/input\/japan-trade-statistics\/custom_2020.db\" as custom_2020'\ncursor.execute(attach)\n\n# \u8a08\u7b97\u6642\u9593\u3092\u7bc0\u7d04\u3059\u308b\u305f\u3081\u306b\u3001\u5e74\u306e\u30c7\u30fc\u30bf\u304b\u3089\u30012019 \u5e74\u3092\u5207\u308a\u51fa\u3057\u307e\u3059\u3002\n# \u6700\u521d\u306e\u306f\u30a8\u30e9\u30fc\u51e6\u7406\u3067\u3059\u3002y_2019 \u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u304c\u5b58\u5728\u3059\u308b\u3068\u3001\u65b0\u898f\u306b y_2019 \u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n# error \u306e\u5834\u5408\u306f\u3001\u4f55\u3082\u305b\u305a\u3001\u6b21\u306b\u3059\u3059\u307f\u307e\u3059\u3002\ntry:\n    cursor.execute('drop table y_2019')\nexcept:\n    pass\n\n# \u3053\u308c\u304b\u3089\u304c\u3001SQl \u306b\u306a\u308a\u307e\u3059\u3002\u8907\u6570\u884c\u3067\u66f8\u304f\u3053\u3068\u304c\u591a\u3044\u306e\u3067sql \u3068\u3044\u3046\u5909\u6570\u306b\u8907\u6570\u884c\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n# \u6700\u5f8c\u306e [1:-1] \u306f\u3001\u4e00\u884c\u76ee\uff08\u6539\u884c\u3067\u7a7a\u767d\uff09\u3068\u6700\u5f8c\u306e\u884c\uff08\u3053\u308c\u3082\u6539\u884c\u3060\u3051\u3067\u7a7a\u767d\uff09\u3092\u3068\u308a\u306e\u305e\u304f\u305f\u3081\u3067\u3059\u3002\n# 0 \u304b\u3089\u59cb\u307e\u308b\u306e\u3067\u30011 \u3060\u3068\u3001\uff12\u884c\u76ee\u304b\u3089\u6700\u5f8c\u306e\u884c\u306e\u3072\u3068\u3064\u624b\u524d\u307e\u3067\u3067\u3059\u3002\nsql = \"\"\"\ncreate table y_2019 \nas select * from year_from_1997\nwhere Year = 2019\n\"\"\"[1:-1]\n# \u4e0a\u8a18\u306e sql \u3092\u5b9f\u884c\u3057\u3057\u3066\u30012019 \u5e74\u306e\u30c7\u30fc\u30bf\u3092\u3064\u304f\u308a\u307e\u3059\u3002\ncursor.execute(sql)\nconn.commit()\n# sql \u306e\u8aac\u660e\u3067\u3059\u3002\n# create table \u30c6\u30fc\u30d6\u30eb\u540d : \u30c6\u30fc\u30d6\u30eb\u3092\u65b0\u898f\u4f5c\u6210\u3000\u3053\u3053\u3067\u306f\u3001y_2019 \n# as select * from  \u30c6\u30fc\u30d6\u30eb\u540d\u3000: \u30c6\u30fc\u30d6\u30eb\u540d(year_from_1997)\u304b\u3089\u3064\u304f\u308a\u307e\u3059\u3002\n# where Year = 2019 : 2019 \u5e74\u306e\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002Year \u306f\u3001\u6570\u5024\u306a\u306e\u3067\u30012019 \u3068\u66f8\u304d\u307e\u3059\u3002\n\n","39bef0fa":"# ym_2018,2019 \u306b ym_2020 \u3092\u52a0\u3048\u3066,ym_2018_2020 \u3092\u4f5c\u6210 \n# \u5e74\uff0b\u6708\u306e\u30ab\u30e9\u30e0(ym)\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n# \u5e74\u306f\u3001\u6574\u6570\u3001\u6708\u306f\u3001\u6587\u5b57\u5217\u306a\u306e\u3067\u3001\u578b\u5909\u63db\u3068\u6587\u5b57\u5217\u7d50\u5408\u3092\u884c\u3044\u307e\u3059\u3002\n# CAST(Year AS  str )||month as ym \u304c\u305d\u306e\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n# \u6587\u5b57\u5217\u7d50\u5408\u304c\u3001|| \u306a\u306e\u3067\u9055\u548c\u611f\u3042\u308a\u307e\u3059\u304c\u3001\u3057\u3087\u3046\u304c\u306a\u3044\u3067\u3059\u3002\n\ntry:\n    cursor.execute('drop table ym_2018_2020')\nexcept:\n    pass\n\nsql = \"\"\"\ncreate table ym_2018_2020\nas select CAST(Year AS  str )||month as ym,* from ym_2018\n\"\"\"[1:-1]\ncursor.execute(sql)\n\nsql = \"\"\"\ninsert into  ym_2018_2020\n select CAST(Year AS  str )||month as ym,* from ym_2019\n\"\"\"[1:-1]\ncursor.execute(sql)\n\n\nsql = \"\"\"\ninsert into  ym_2018_2020\n select CAST(Year AS  str )||month as ym,* from ym_2020\n\"\"\"[1:-1]\ncursor.execute(sql)\n\nconn.commit()\n","69d0310a":"# \u4fbf\u5229\u306a\u30af\u30e9\u30b9\uff08sql \u5b9f\u884c + \u30b0\u30e9\u30d5\uff09ut.\u95a2\u6570\u540d\u3067\u4f7f\u3044\u307e\u3059\u3002\nclass util():\n    def sql(self,sql):\n        return(pd.read_sql(sql,conn))\n \n    # \u30b0\u30e9\u30d5\u4f5c\u6210 \u4e00\u7cfb\u5217\u306e\u307f\n    def g1(self,df,x,y,color='b'):\n        plt.figure(figsize=(20, 10))\n\n        ax = sns.lineplot(x=x,y=y,data=df,linewidth=7.0,color=color)\n        # \u3053\u308c\u306f\u3001x\u8ef8\uff08\u6642\u7cfb\u5217\uff09\u306e\u5358\u4f4d\u304c\u7701\u7565\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u8a2d\u5b9a\n        # \u4f55\u3082\u3057\u306a\u3044\u3068\u30012000,2005,2010\u306e\u3088\u3046\u306b\u4e00\u5e74\u5206\u304c\u3068\u3070\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n        ax.xaxis.set_major_locator(ticker.MultipleLocator(1)) \n        \n    # \u30b0\u30e9\u30d5\u4f5c\u6210 2\u7cfb\u5217\u3000\u8f38\u51fa\u5165\u3000\u6bd4\u8f03\u306b\u3064\u304b\u3044\u307e\u3059\u3002\u8f38\u51fa\u304c\u9752\u3001\u8f38\u5165\u304c\u8d64\n    def g2(self,df,x,y,hue,palette={1: \"b\", 2: \"r\"}):\n        plt.figure(figsize=(20, 10))\n        ax  = sns.lineplot(x=x,y=y,hue=hue,linewidth = 7.0,\n             palette=palette,\n             data=df)\n        # \u51e1\u4f8b\u306e\u4f4d\u7f6e\u3000\uff12\u306f\u5de6\u4e0a\n        ax.legend_._loc = 2\n        ax.xaxis.set_major_locator(ticker.MultipleLocator(1))    \n        \n    # \u8907\u6570\u7cfb\u5217\u306e\u30b0\u30e9\u30d5\n    def gx(self,df,x,y,hue,palette={}):\n        plt.figure(figsize=(20, 10))\n        if palette == {}:\n            ax  = sns.lineplot(x=x,y=y,hue=hue,linewidth = 7.0,data=df)\n        else:\n            ax  = sns.lineplot(x=x,y=y,hue=hue,linewidth = 7.0,palette=palette,data=df)\n        # \u51e1\u4f8b\u306e\u4f4d\u7f6e\u3000\uff12\u306f\u5de6\u4e0a\n        ax.legend_._loc = 2\n        ax.xaxis.set_major_locator(ticker.MultipleLocator(1))    \n        \n    def bar(self,df,y,x,prefix='',color='b'):\n        # \u8272\u898b\u672c\n        #https:\/\/matplotlib.org\/examples\/color\/named_colors.html\n        # \u8272\u306e\u610f\u5473\u3000\u5408\u8a08: gold     \u8f38\u51fa: b (blue) \u8f38\u5165: r ( red )\u3000\u3092\u3064\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n        if len(prefix) > 0:\n            df[y] = df[y].map(lambda x: 'hs' + str(x))\n        ax = sns.barplot(y=y, x=x, data=df,color=color)\n        plt.show()\n        plt.close()\n\n\n    # \u8f38\u51fa\u5165\u30b3\u30fc\u30c9\u306eurl \u3092\u8868\u793a\u3059\u308b\n    # \u8f38\u5165 \n    def hs_url(self,hs_code,exp_imp=2,yyyy_mm='2020_4'):\n        # \u8f38\u51fa https:\/\/www.customs.go.jp\/yusyutu\/index.htm\n        # \u8f38\u5165 https:\/\/www.customs.go.jp\/tariff\/index.htm\n        hs = hs_code[0:2]\n    \n        if exp_imp == 1:\n            ex = 'yusyutu'\n        else:\n            ex = 'tariff'\n        \n        tmpl = 'https:\/\/www.customs.go.jp\/{ex}\/{yyyy_mm}\/data\/print_j_{hs}.htm'\n        print(tmpl.format(ex=ex,yyyy_mm=yyyy_mm,hs=hs))\n\n    # db \u3068\u306e\u63a5\u7d9a conn \u306f\u3001global \u5909\u6570\u3068\u3057\u3066\u4f7f\u3046 \n    def hs_table_create(self,hs_code,tables=['y_2019','year_from_1997','ym_2018_2020']):\n        \n        if len(hs_code) not in (2,4,6,9):\n            print(hs_code + ': \u6841\u6570\u304c\u304a\u304b\u3057\u3044\u3067\u3059\u3002')\n            return\n        \n        hs = 'hs' + str(len(hs_code))\n        \n        sql = \"\"\"\n        create table hs{hs_code}_{table}\n        as select * from {table}\n        where {hs} = '{hs_code}'\n        \"\"\"[1:-1]\n        \n        for table in tables:\n            tg = 'drop table hs{hs_code}_{table}'.format(hs_code=hs_code,table=table)\n            print(tg)\n            try:\n                cursor.execute(tg)\n            except:\n                pass\n            cursor.execute(sql.format(hs=hs,hs_code=hs_code,table=table))\n\n        conn.commit()\n        \n    def hs_name_get(self,hs_code):\n        hs = len(hs_code)\n        if hs not in (2,4,6,9):\n            print('HS \u30b3\u30fc\u30c9\u306e\u9577\u3055\u304c\u307e\u3061\u304c\u3063\u3066\u3044\u307e\u3059\u3002 ' + str(hs))\n        hs = str(hs)\n        print(hs_code)\n        text = 'hs' + hs + '_eng_df.query(' +\"'\"+ 'hs' + hs + '==\"' + hs_code + '\"' + \"')\"\n        df = eval(text)\n        print(df['hs' + hs + '_name'].values[0])\n        text = 'hs' + hs + '_jpn_df.query(' +\"'\"+ 'hs' + hs + '==\"' + hs_code + '\"' + \"')\"\n        df = eval(text)\n        print(df['hs' + hs + '_name'].values[0])\n\n            \n        \n\n    #  \u56fd\u30b3\u30fc\u30c9(\u8907\u6570) \u306e\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3000\u56fd\u30b3\u30fc\u30c9\u306f\u3001\u6587\u5b57\u5217\u306e\u306f\u305a\u3060\u304c\u3001\u3068\u304d\u3069\u304d\u306a\u308b\u6574\u6570\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n    def countries_table_create(self,countries=['105','304','103','106','601'],tables=['y_2019','year_from_1997','ym_2018_2020']):\n        clist = \"('\" + \"','\".join(countries) + \"')\" \n        sql = \"\"\"\n        create table countries_{table}\n        as select * from {table}\n        where Country in {clist}\n        \"\"\"[1:-1]\n        \n        for table in tables:\n            tg = 'drop table countries_{table}'.format(table=table)\n            print(tg)\n            try:\n                cursor.execute(tg)\n            except:\n                pass\n            cursor.execute(sql.format(clist=clist,table=table))\n\n        conn.commit()\n        \n    # \u56fd\u5225\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u3068\u304d\u306b\u3001\u56fd\u4e0e\u3048\u308b\u8272\u3067\u3059\u3002\n    def national_colors(self):\n        return ({'105': ['\u4e2d\u56fd', 'gold'],\n        '304': ['\u30a2\u30e1\u30ea\u30ab', 'red'],\n         '103': ['\u97d3\u56fd', 'blue'],\n         '106:': ['\u53f0\u6e7e', 'cyan'],\n         '601:': ['\u30aa\u30fc\u30b9\u30c8\u30e9\u30ea\u30a2', 'green'],\n         '111:': ['\u30bf\u30a4', 'violet'],\n         '213:': ['\u30c9\u30a4\u30c4', 'lightgrey'],\n         '110:': ['\u30d9\u30c8\u30ca\u30e0', 'crimson'],\n         '108:': ['\u9999\u6e2f', 'orangered'],\n         '112:': ['\u30b7\u30f3\u30ac\u30dd\u30fc\u30eb', 'aqua'],\n         '147:': ['\u30a2\u30e9\u30d6\u9996\u9577\u56fd\u9023\u90a6', 'black'],\n         '137:': ['\u30b5\u30a6\u30b8', 'darkgreen'],\n         '118:': ['\u30a4\u30f3\u30c9\u30cd\u30b7\u30a2', 'darkorange'],\n         '113:': ['\u30de\u30ec\u30fc\u30b7\u30a2', 'yellow'],\n         '205:': ['\u30a4\u30ae\u30ea\u30b9', 'darkblue'],\n         '224:': ['\u30ed\u30b7\u30a2', 'pink'],\n         '117:': ['\u30d5\u30a3\u30ea\u30d4\u30f3', 'olive'],\n         '302:': ['\u30ab\u30ca\u30c0', 'salmon'],\n         '210:': ['\u30d5\u30e9\u30f3\u30b9', 'indigo'],\n         '305:': ['\u30e1\u30ad\u30b7\u30b3', 'greenyellow']})\n    \n    # \u8679\u306e7\u8272\u3092\u5272\u308a\u5f53\u3066\u308b\n    def rank_color(self,xlist):\n        clist = ['red','ornage','yellow','green','blue','indigo','violet']\n        palette = {xlist[i]:clist[i] for i in range(len(xlist))}\n        return(palette)\n\n\nut = util()","c1400faf":"# \u4e2d\u56fd\u3068\u306e\u8f38\u51fa\u5165\u3092\nut.countries_table_create(['105'])","65b6ca7d":"# \u4e2d\u56fd\u3068\u306e\u8f38\u51fa\u5165\u306e\u6642\u7cfb\u5217\uff08\u5e74\uff09\u30b0\u30e9\u30d5\nsql = \"\"\"\nselect Year,exp_imp,sum(Value) as Value \nfrom countries_year_from_1997\ngroup by Year,exp_imp\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\nut.g2(df,'Year','Value','exp_imp')","3c143cd0":"# \u4e2d\u56fd\u3068\u306e\u8f38\u51fa\u5165\u306e\u6642\u7cfb\u5217\uff08\u5e74\uff09\u30b0\u30e9\u30d5\u3000HS \u30b3\u30fc\u30c9 300320 \u30da\u30cb\u30b7\u30ea\u30f3\u4ee5\u5916\u306e\u6297\u751f\u7269\u8cea\nsql = \"\"\"\nselect Year,exp_imp,sum(Value) as Value \nfrom countries_year_from_1997\nwhere hs6 = '300320'\ngroup by Year,exp_imp\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\nut.g2(df,'Year','Value','exp_imp')","010c3f24":"hs = 'hs6'\nsql = \"\"\"\nselect Year,{hs},sum(Value) as Value\nfrom countries_year_from_1997\nwhere hs4 = '3003' and exp_imp = 2 and Year = 2019\ngroup by Year,{hs}\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs),conn)\neval(\"pd.merge(df,\" + hs + \"_jpn_df,on=hs)\").head()","607286bb":"# \u4e2d\u56fd\u3068\u306e\u8f38\u51fa\u5165\u306e\u6642\u7cfb\u5217(\u5e74\u6708)\u30b0\u30e9\u30d5\nsql = \"\"\"\nselect Ym,exp_imp,sum(Value) as Value \nfrom countries_ym_2018_2020\ngroup by ym,exp_imp\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\nut.g2(df,'ym','Value','exp_imp')","37b7fa06":"# HS\u30b3\u30fc\u30c9\n# 2019\u5e74\u306e HS9 \u3067\u3001\u5408\u8a08\u3092\u96c6\u8a08\ntry:\n    cursor.execute('drop table tmp_1')\nexcept:\n    pass\nsql = \"\"\"\ncreate table tmp_1  as select exp_imp,hs9,sum(Value) as total \nfrom y_2019\ngroup by exp_imp,hs9\n\"\"\"[1:-1]\ncursor.execute(sql)\n\n# \u96c6\u8a08\u3092\ntry:\n    cursor.execute('drop table tmp_2')\nexcept:\n    pass\nsql = \"\"\"\ncreate table tmp_2  as \nselect y.exp_imp,y.hs9,y.Value,Country,total,\n(cast(Value as real)\/cast(total as real)) as proportion \nfrom y_2019 y, tmp_1 t\nwhere y.exp_imp = t.exp_imp and y.hs9 = t.hs9\n\"\"\"[1:-1]\ncursor.execute(sql)\n\nconn.commit()\n","85b088c2":"ut.hs_url('030199119')","518ca6f7":"# \u4e2d\u56fd\u3060\u3051\u304b\u3089\u8f38\u5165\u3057\u3066\u3044\u308b\u3082\u306e\nsql = \"\"\"\nselect exp_imp,t.hs9,hs9_name,Value,proportion\nfrom tmp_2 t,hs9_jpn h\nwhere exp_imp = 2 and\nproportion = 1.0 and\nCountry = '105' and\nt.hs9 = h.hs9\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\ndf.head(20)\n\n# 440799200","25576cb6":"# \u7573\u8868\u306e\u8f38\u5165\u306f\u843d\u3061\u3066\u3044\u307e\u3059\u3002\nhs_code = '460194911'\nsql = \"\"\"\nselect Year,sum(Value) as Value\nfrom countries_year_from_1997\nwhere hs9='{hs_code}' and exp_imp = 2\ngroup by Year\n\"\"\"[1:-1]\n\ndf = pd.read_sql(sql.format(hs_code = hs_code),conn)\n\nut.g1(df,'Year','Value')\n","4a0e4246":"# proportion > 0.5 \u91d1\u984d\u9806\nxlist =[['851712000', '1444374285', '0.858244', '\u643a\u5e2f'],\n ['847130000', '888214071', '0.990139', '\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3'],\n ['847150000', '310220976', '0.622216', '\u30d1\u30bd\u30b3\u30f3'],\n ['851762010', '228853618', '0.613082', '\u57fa\u5730\u5c40\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u6a5f\u5668\u53ca\u3073\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u6a5f\u5668'],\n ['854140020', '214239685', '0.706169', '\u592a\u967d\u96fb\u6c60'],\n ['950300000', '198281663', '0.792150', '\u4e09\u8f2a\u8eca\u3000\u304a\u3082\u3061\u3083'],\n ['847330019', '183741432', '0.764402', 'USB\u30e1\u30e2\u30ea\uff1f'],\n ['420292000', '173213507', '0.621258', '\u30d0\u30c3\u30b0'],\n ['851762090', '159939467', '0.515044', '\u57fa\u5730\u5c40'],\n ['950450000', '147717227', '0.988514', '\u30b2\u30fc\u30e0\u6a5f']]\n","de824ea3":"# \u643a\u5e2f\u3001\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u3001\u30d1\u30bd\u30b3\u30f3\n# gx(self,df,x,y,hue,palette={}):\n# palette={'red','ornage','yellow','green','blue','indigo','violet']\n\n \nhs_codes = \"('851712000','847130000','847150000')\"\nsql = \"\"\"\nselect Year,hs9,sum(Value) as Value\nfrom countries_year_from_1997\nwhere hs9 in {hs_codes} and exp_imp = 2\ngroup by Year,hs9\norder by hs9\n\"\"\"[1:-1]\n\ndf = pd.read_sql(sql.format(hs_codes = hs_codes),conn)\n# hue \u306f\u3001\u6587\u5b57\u5217\u3067\u3082\u6570\u5024\u306e\u5f62\u5f0f\u3060\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u6587\u5b57\u5217\u5316\u3057\u307e\u3059\u3002\n\ndf.loc[df['hs9']=='851712000','hs']='smart phone'\ndf.loc[df['hs9']=='847130000','hs']='note pc'\ndf.loc[df['hs9']=='847150000','hs']='pc'\n\n\nut.gx(df,'Year','Value','hs')\n","279a4530":"# \u643a\u5e2f\u3001\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u3001\u30d1\u30bd\u30b3\u30f3\n# gx(self,df,x,y,hue,palette={}):\n# palette={'red','ornage','yellow','green','blue','indigo','violet']\n\n \nhs_codes = \"('851712000','847130000','847150000')\"\nsql = \"\"\"\nselect ym,hs9,sum(Value) as Value\nfrom countries_ym_2018_2020\nwhere hs9 in {hs_codes} and exp_imp = 2\ngroup by ym,hs9\norder by hs9\n\"\"\"[1:-1]\n\ndf = pd.read_sql(sql.format(hs_codes = hs_codes),conn)\n# hue \u306f\u3001\u6587\u5b57\u5217\u3067\u3082\u6570\u5024\u306e\u5f62\u5f0f\u3060\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u6587\u5b57\u5217\u5316\u3057\u307e\u3059\u3002\n\ndf.loc[df['hs9']=='851712000','hs']='smart phone'\ndf.loc[df['hs9']=='847130000','hs']='note pc'\ndf.loc[df['hs9']=='847150000','hs']='pc'\n\n\nut.gx(df,'ym','Value','hs')\n","f53d7e03":"# proportion > 0.98\nxlist = [['847130000',\n  '\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3',\n  '888214071',\n  '0.990139'],\n ['950450000',\n  '\u30d3\u30c7\u30aa\u30b2\u30fc\u30e0',\n  '147717227',\n  '0.988514'],\n ['680293000', '\u82b1\u5d17\u5ca9', '49982807', '0.981197'],\n ['160417000', '\u3046\u306a\u304e', '34245026', '0.981321'],\n ['270400010', '\u30b3\u30fc\u30af\u30b9', '27870121', '0.988335'],\n ['281111000',\n  '\u30d5\u30c3\u5316\u6c34\u7d20',\n  '18458257',\n  '0.991021'],\n ['871200291',\n  '\u81ea\u8ee2\u8eca\uff08\u30de\u30de\u30c1\u30e3\u30ea\uff1f\uff09',\n  '15733512',\n  '0.995673'],\n ['200591900', '\u305f\u3051\u306e\u3053', '12384331', '0.982800'],\n ['121190939', '\u6f22\u65b9\u7528\u306e\u672c\u8349\uff08\u591a\u5206\uff09', '10965184', '0.981241'],\n ['851672000', '\u30c8\u30fc\u30b9\u30bf\u30fc', '9561109', '0.987392'],\n ['200811299', '\u843d\u82b1\u751f(\u305d\u306e\u4ed6)', '8670690', '0.999026'],\n ['070390010', '\u306d\u304e', '7093824', '0.999785'],\n ['282749100', '\u30aa\u30ad\u30b7\u5869\u5316\u30b8\u30eb\u30b3\u30cb\u30a6\u30e0', '6884186', '1.000000'],\n ['853950010', 'LED', '6802495', '0.990318'],\n ['871500000', '\u4e73\u6bcd\u8eca', '6584208', '0.993723'],\n ['441912100', '\u5272\u308a\u3070\u3057', '6202984', '0.981653'],\n ['911012000', '\u643a\u5e2f\u7528\u6642\u8a08\u30e0\u30fc\u30d6\u30e1\u30f3\u30c8', '6081379', '0.999540'],\n ['071440100', '\u30a2\u30e1\u30ea\u30ab\u3055\u3068\u3044\u3082(\u51b7\u51cd)', '6007910', '0.996259'],\n ['460194911', '\u7573\u8868', '5803243', '1.000000'],\n ['071239010', '\u3057\u3044\u305f\u3051', '5797111', '0.998598']]","b5fc5370":"# proportion > 0.90 <=0.98\nsql = \"\"\"\nselect exp_imp,t.hs9,hs9_name,Country,Value,proportion\nfrom tmp_2 t ,hs9_eng h\nwhere exp_imp = 2 and\nproportion <= 0.98 and\nproportion > 0.9 and\nCountry = '105' and\nt.hs9 = h.hs9\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\ndf.head(20)","7f815459":"# \u30d5\u30c3\u5316\u6c34\u7d20\u3000\u4e2d\u56fd\u4f9d\u5b58\u5ea6\n# \u4e2d\u56fd\u3060\u3051\u304b\u3089\u8f38\u5165\u3057\u3066\u3044\u308b\u3082\u306e\nsql = \"\"\"\nselect exp_imp,hs9,Country,Value,proportion\nfrom tmp_2\nwhere exp_imp = 2 and\nhs9 = '281111000'\ngroup by Country\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\ndf.head(3)\n","a7e01734":"# proportion > 0.85 <=0.9\nsql = \"\"\"\nselect exp_imp,t.hs9,hs9_name,Country,Value,proportion\nfrom tmp_2 t ,hs9_eng h\nwhere exp_imp = 2 and\nproportion <= 0.9 and\nproportion > 0.85 and\nCountry = '105' and\nt.hs9 = h.hs9\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql,conn)\ndf.head(20)","5c343407":"# \u4e00\u6642\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210 2018.1-2020\u5e74\u306e\u6708\u5225\u30c7\u30fc\u30bf","dba407e4":"# \u304a\u307e\u3051\u3067\u3059\u3002\u97d3\u56fd\u3078\u306e\u8f38\u51fa\u898f\u5236\u5f37\u5316\u3067\u6709\u540d\u306b\u306a\u3063\u305f\u30d5\u30c3\u5316\u6c34\u7d20\u3067\u3059\u3002\u65e5\u672c\u306f\u3001\u5b9f\u306f\u3001\u4e2d\u56fd\u304b\u3089\u8f38\u5165\u3057\u3066\u3044\u307e\u3059\u3002\u7d14\u5ea6\u306e\u4f4e\u3044\u3082\u306e\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u3082\u3068\u3082\u3068\u30d5\u30c3\u5316\u6c34\u7d20\u306e\u539f\u6599\u306e\u86cd\u77f3\u306f\u3001\u4e2d\u56fd\u3067\u3057\u304b\u3068\u308c\u307e\u305b\u3093\n\n# [\u30d5\u30c3\u5316\u6c34\u7d20\u30de\u30c6\u30ea\u30a2\u30eb\u30d5\u30ed\u30fc](http:\/\/mric.jogmec.go.jp\/wp-content\/uploads\/2019\/03\/material_flow2018_F.pdf)","af4f95ea":"### [282749100   \u30aa\u30ad\u30b7\u5869\u5316\u30b8\u30eb\u30b3\u30cb\u30a6\u30e0](http:\/\/mric.jogmec.go.jp\/wp-content\/old_uploads\/reports\/resources-report\/2015-11\/vol45_No4_02.pdf)\n### [460194911   \u7573\u8868](https:\/\/www.jstage.jst.go.jp\/article\/arfe1965\/42\/1\/42_1_207\/_article\/-char\/ja\/)\n### [300341000   \u30a8\u30d5\u30a7\u30c9\u30ea\u30f3\u53c8\u306f\u305d\u306e\u5869\u3092\u542b\u6709\u3059\u308b\u3082\u306e](http:\/\/www.nihonkanpoukyokai.com\/communication\/old\/tushin13-6.htm)\n\n\n\n\n","2c84e706":"# [\u8cbf\u6613\u7d71\u8a08\u3092\u5b66\u3073\u5408\u3046\u4f1a](https:\/\/scrapbox.io\/manabiai-lesson\/toc) \u7528\u6559\u6750\n# \uff08\u8ab2\u984c\uff09\u4e2d\u56fd\u8f38\u5165\u4f9d\u5b58\u5ea6\u3092\u8abf\u3079\u308b\u3000\n\n## \u8ab2\u984c \n- \u8f38\u5165\u91d1\u984d\u3000100\u5104\u5186\u4ee5\u4e0a\u306e\u54c1\u76ee\u306b\u306f\u3069\u3093\u306a\u3082\u306e\u304c\u3042\u308b\u304b\uff1f\n- \u30b3\u30ed\u30ca\u306e\u5f71\u97ff\u306b\u3088\u308b\u8f38\u5165\u306e\u5909\u5316\u306f\uff1f\u3000\u30de\u30b9\u30af\u306e\u8f38\u5165\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\uff1f\n- \u6700\u8fd1\u3001\u8f38\u5165\u4f9d\u5b58\u5ea6\u304c\u5897\u3048\u305f\u54c1\u76ee\u306f\u4f55\u304b\uff1f"}}