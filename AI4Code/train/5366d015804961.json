{"cell_type":{"9455e111":"code","62786752":"code","15d8baa1":"code","09eccc02":"code","0818fbd2":"code","e88d6d89":"code","03b316ea":"code","6d512f6a":"code","9f458b0b":"code","eae1d70e":"code","9f733333":"code","6c13c8bc":"code","e5df3e70":"code","13e143cc":"code","d755c06f":"code","e16ad8c4":"code","cb999db0":"code","363ae0bd":"code","bfbc6e0a":"code","f03dac2a":"code","78107d7b":"code","171e0d9b":"code","76ef9295":"code","e194bf59":"code","f6458198":"code","9b89d4ee":"code","f06059fc":"code","8d3f6938":"code","335204bd":"code","9d05b733":"code","6f4fcc0c":"code","5a347559":"code","be68c984":"code","30cd38dd":"code","152e2d0c":"code","e057675a":"code","381b5722":"code","a47d4471":"code","cb4ea537":"code","3ee76da1":"code","645e5fe8":"code","eca2e17a":"code","3e1613a3":"code","1f02637f":"code","33daa227":"code","f98107cc":"code","4f4619ba":"code","ebf1d9e7":"code","d41ed5d5":"code","ec5f9ce2":"code","670b9212":"code","bce16039":"code","bcb0f37d":"code","2e08c6f9":"code","e1c18914":"code","78ccbaa6":"code","7d0b02fc":"code","898f48d4":"code","e5635957":"code","9a02694a":"code","1941f89b":"code","74a142eb":"code","967efad3":"code","1bda542e":"code","a4c7791a":"code","1171c568":"code","dec3e3d1":"code","a16e0bf6":"code","4e6b04d1":"code","6578f312":"code","15524b9d":"code","59106813":"code","73b9514d":"code","aa32b913":"code","fe3d0bb1":"code","c9f8e37c":"code","e46aa9cc":"code","36a8e3fd":"code","ef71ba8f":"code","2590696d":"code","e8e60e1e":"code","52ce9d94":"code","a4860d98":"code","bdffba9d":"code","fc3c5490":"code","caf1ed57":"code","7c124793":"code","b4038859":"code","1c6c4b4e":"code","fdf6e2c2":"code","e9c63120":"code","b5dad44a":"code","9bcdef62":"code","2370fbf4":"code","0d6bfea0":"code","2463aaa7":"code","fb74874c":"markdown","176aff71":"markdown","ebeeac93":"markdown","2b628139":"markdown","f1e572c9":"markdown","f5437409":"markdown","2dff961e":"markdown","50c1c9e6":"markdown","b1c647d7":"markdown","97a9d7e3":"markdown","f3ffb035":"markdown","c1f37016":"markdown","66ad8176":"markdown","7fe99391":"markdown","1c08b77d":"markdown","a28b7dde":"markdown","e5e7f90e":"markdown","0df446ee":"markdown","491443d1":"markdown","d5ab974d":"markdown","4be28d6b":"markdown","d706f575":"markdown","2caabcf4":"markdown","1ec5a89e":"markdown","9b61b937":"markdown","a07c41bb":"markdown","70212693":"markdown","f70a9a59":"markdown","43ebcc50":"markdown","8a777845":"markdown","23cc7819":"markdown","bc926725":"markdown","bfb5d1cd":"markdown","35312e15":"markdown","c4bf7698":"markdown","0e014dd2":"markdown","4c7a73db":"markdown","4a100700":"markdown","cd599530":"markdown","169b17c7":"markdown"},"source":{"9455e111":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns # seaborn \ub610\ud55c matplot\uc774 \ubca0\uc774\uc2a4\n\n# ----\uac1c\uc778 \uc9c0\uc815----\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n# \uc0c8 \ucc3d\uc73c\ub85c matplot\uc774 \uc5f4\ub9ac\uc9c0 \uc54a\uac8c \n%matplotlib inline","62786752":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv') # df_test \ub77c\ub294 \uac1d\uccb4. head() \uba54\uc18c\ub4dc \uc788\uace0 \ub4f1\ub4f1 ","15d8baa1":"df_train.head()","09eccc02":"df_train.shape","0818fbd2":"df_train.describe() # \uac04\ub2e8\ud55c \ud1b5\uacc4\uc801 \uc218\uce58 ","e88d6d89":"df_test.describe()","03b316ea":"for col in df_train.columns:\n    msg = f'column: {col:>10}\\t Percent of NaN value: {100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]):.2f}%'\n    print(msg)","6d512f6a":"for col in df_test.columns:\n    msg = f'column: {col:>10}\\t Percent of NaN value: {100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]):.2f}%'\n    print(msg)","9f458b0b":"msno.matrix(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8, 0.5, 0.2))\n# \ube48 \uce78\uc774 null\n# \uc704\uce58, \ubd84\ud3ec \uc54c \uc218 \uc788\uc74c","eae1d70e":"msno.bar(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8, 0.5, 0.2))\n# \ud37c\uc13c\ud2b8 \uc54c \uc218 \uc788\uc74c","9f733333":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\n\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\nplt.show()","6c13c8bc":"df_train.head()","e5df3e70":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","13e143cc":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean()","d755c06f":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='cool')","e16ad8c4":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","cb999db0":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\n\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F31', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\n\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","363ae0bd":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n# \uc131\ubcc4\uc5d0 \ub530\ub978 \uc0dd\uc874 \ud655\ub960\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\n\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","bfbc6e0a":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","f03dac2a":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","78107d7b":"sns.factorplot('Sex', 'Survived', hue='Pclass', data=df_train, size=6, aspect=1.5)","171e0d9b":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \ub098\uc774 \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} years'.format(df_train['Age'].mean()))","76ef9295":"# kdeplt -> \ucee4\ub110\ubc00\ub3c4\ucd94\uc815. histogram\uc744 \uace1\uc120\ud654\ud568\nf, ax = plt.subplots(1, 1, figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","e194bf59":"# \uac19\uc740 \uacb0\uacfc\uc9c0\ub9cc \ub3c4\ud654\uc9c0 \uadf8\ub9ac\ub294 \ubc29\ubc95\uc774 \uc704\uc640 \ub2e4\ub984. \uc704\ub294 ax\uc744 \ubc18\ud658, \uc5ec\uae30\ub294 plt (\uadf8\ub798\ud504\uac00 \ud558\ub2c8\uc77c \ub54c \uc8fc\ub85c \uc0ac\uc6a9\ud568)  \n\n# \uc0dd\uc874\ud655\ub960\uacfc \uad00\uacc4\uc5c6\ub294 \ub2e8\uc21c\ud55c \ubd84\ud3ec\n# \ub098\uc774\uc778\ub370 \uc74c\uc218\uac00 \ub098\uc624\ub294 \uc774\uc720\ub294 \ubc00\ub3c4\ud568\uc218(\uadfc\uc0ac\uac12)\uc774\uae30 \ub54c\ubb38\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","f6458198":"# Pclass\ubcc4 Age\uc5d0 \ub530\ub978 \uc0dd\uc874\ud655\ub960\nplt.figure(figsize=(9, 5))\ndf_train['Age'][(df_train['Survived'] == 1) & (df_train['Pclass'] == 1)].plot(kind='kde')\ndf_train['Age'][(df_train['Survived'] == 0) & (df_train['Pclass'] == 1)].plot(kind='kde')\n\nplt.title('1st Class')\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","9b89d4ee":"plt.figure(figsize=(9, 5))\ndf_train['Age'][(df_train['Survived'] == 1) & (df_train['Pclass'] == 2)].plot(kind='kde')\ndf_train['Age'][(df_train['Survived'] == 0) & (df_train['Pclass'] == 2)].plot(kind='kde')\n\nplt.title('2nd Class')\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","f06059fc":"plt.figure(figsize=(9, 5))\ndf_train['Age'][(df_train['Survived'] == 1) & (df_train['Pclass'] == 3)].plot(kind='kde')\ndf_train['Age'][(df_train['Survived'] == 0) & (df_train['Pclass'] == 3)].plot(kind='kde')\n\nplt.title('3rd Class')\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","8d3f6938":"change_age_range_survived_ratio = []\n\nfor i in range(1, 80):\n    change_age_range_survived_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n                                           \nplt.figure(figsize=(7, 7))\nplt.plot(change_age_range_survived_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","335204bd":"# SKewness \uc65c\ub3c4. \uc5bc\ub9c8\ub098 \uc3e0\ub838\ub0d0. \ube44\ub300\uce6d\uc774\ub0d0. \uc591\uc218\uba74 \uc88c\uce21\uc73c\ub85c \uce58\uc6b0\uce68\nfig, ax = plt.subplots(1, 1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","9d05b733":"df_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i>0 else 0)","6f4fcc0c":"# log \ubcc0\ud658\ud55c \ud6c4 skewness\uac00 0\uc5d0 \uac00\uae4c\uc6cc\uc9d0 \nfig, ax = plt.subplots(1, 1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","5a347559":"df_train['Ticket'].value_counts()","be68c984":"# \uc815\uaddc \ud45c\ud604\uc2dd\ndf_train['Initial'] = df_train['Name'].str.extract('([A-Za-z]+)\\.')\ndf_test['Initial'] = df_test['Name'].str.extract('([A-Za-z]+)\\.')","30cd38dd":"df_train.head()","152e2d0c":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='cool')","e057675a":"# \uce58\ud658\ndf_train['Initial'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Mlle','Mme','Ms','Rev','Sir','Dona'],\n                           ['Mr','Other','Mrs','Mr','Mr','Other','Mrs','Mr','Miss','Miss','Miss','Other','Mr','Mr'], inplace=True)\n\ndf_test['Initial'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Mlle','Mme','Ms','Rev','Sir','Dona'],\n                           ['Mr','Other','Mrs','Mr','Mr','Other','Mrs','Mr','Miss','Miss','Miss','Other','Mr','Mr'], inplace=True)","381b5722":"df_train.groupby('Initial').mean()","a47d4471":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","cb4ea537":"df_all = pd.concat([df_train, df_test])","3ee76da1":"df_all.groupby('Initial').mean()","645e5fe8":"df_train.loc[(df_train['Age'].isnull()) & (df_train['Initial'] == 'Master'),'Age'] = 5\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['Initial'] == 'Miss'),'Age'] = 22\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['Initial'] == 'Mr'),'Age'] = 33\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['Initial'] == 'Mrs'),'Age'] = 37\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['Initial'] == 'Other'),'Age'] = 45\n\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Initial'] == 'Master'),'Age'] = 5\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Initial'] == 'Miss'),'Age'] = 22\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Initial'] == 'Mr'),'Age'] = 33\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Initial'] == 'Mrs'),'Age'] = 37\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Initial'] == 'Other'),'Age'] = 45","eca2e17a":"df_train['Embarked'].fillna('S', inplace=True)","3e1613a3":"df_train['Age_cat'] = 0","1f02637f":"df_train.head()","33daa227":"df_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7","f98107cc":"df_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","4f4619ba":"df_train.head()","ebf1d9e7":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7","d41ed5d5":"df_train['Age_cat_2'] = df_train['Age'].apply(category_age)","ec5f9ce2":"(df_train['Age_cat'] == df_train['Age_cat_2']).all()","670b9212":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","bce16039":"df_train.Initial.unique()","bcb0f37d":"# \uc218\uce58\ud654\ndf_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","2e08c6f9":"# df_train.Initial.unique()\ndf_train['Embarked'].value_counts()","e1c18914":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","78ccbaa6":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","7d0b02fc":"df_train.head()","898f48d4":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'SibSp', 'Initial', 'Age_cat']]","e5635957":"colormap = plt.cm.BuGn\nplt.figure(figsize=(12,10))\nplt.title('Pearson Correalation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=1, vmax=1,\n           square=True, cmap=colormap, linecolor='Blue', annot=True, annot_kws={'size':16}, fmt='.2f')","9a02694a":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","1941f89b":"df_train","74a142eb":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","967efad3":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name', 'SibSp', 'Ticket', 'Cabin'], axis=1, inplace=True)","1bda542e":"df_train.head()","a4c7791a":"# Fare null \ud3c9\uade0\uac12\ub300\uccb4\ndf_test.loc[df_test['Fare'].isnull(), 'Fare'] = df_train['Fare'].mean()","1171c568":"from sklearn.ensemble import RandomForestClassifier # \uc774\uc9c4\ubd84\ub958. \uc758\uc0ac\uacb0\uc815\ud2b8\ub9ac\ub97c \ub79c\ub364\ud654\ud558\uace0 \uc559\uc0c1\ube14 (averaging)\nfrom sklearn import metrics # \ubaa8\ub378 \ud3c9\uac00 \ud568\uc218\ub4e4\nfrom sklearn.model_selection import train_test_split # train set, Validation set \ub098\ub204\ub294 \uac70","dec3e3d1":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","a16e0bf6":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018) # 70% train, 30% Validation","4e6b04d1":"random_forest = RandomForestClassifier()\nrandom_forest.fit(X_tr, y_tr) # tr \ud559\uc2b5\uc2dc\ud0b4","6578f312":"prediction = random_forest.predict(X_vld)\nprediction # x vld \ub85c \uc608\uce21","15524b9d":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucd94\uc5c8\uc2b5\ub2c8\ub2e4.'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld))) # x vld(\uc608\uce21\uac12)\uacfc y vld(\uc2e4\uc81c\uac12) \ube44\uad50","59106813":"from sklearn.neighbors import KNeighborsClassifier","73b9514d":"## Cross Validation (K-fold) , CV\n# Validation set \uacfc\uc801\ud569\uc744 \ubc29\uc9c0\ud55c\ub2e4. \uad50\ucc28 \uac80\uc99d.\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","aa32b913":"knn = KNeighborsClassifier(n_neighbors=13)\nscoring = 'accuracy'\nscore = cross_val_score(knn, X_train, target_label, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","fe3d0bb1":"# kNN Score\nround(np.mean(score)*100, 2)","c9f8e37c":"from sklearn.tree import DecisionTreeClassifier","e46aa9cc":"DT = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(DT, X_train, target_label, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","36a8e3fd":"# decision tree Score\nround(np.mean(score)*100, 2)","ef71ba8f":"from sklearn.naive_bayes import GaussianNB","2590696d":"NB = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(NB, X_train, target_label, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e8e60e1e":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","52ce9d94":"from sklearn.svm import SVC","a4860d98":"svm = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(svm, X_train, target_label, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","bdffba9d":"# SVM score\nround(np.mean(score)*100, 2)","fc3c5490":"svm.fit(X_train, target_label)\nprediction_svm = svm.predict(X_test)\nprediction_svm","caf1ed57":"random_forest.feature_importances_","7c124793":"df_train.head()","b4038859":"from pandas import Series","1c6c4b4e":"feature_importance = random_forest.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","fdf6e2c2":"plt.figure(figsize=(8,8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","e9c63120":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","b5dad44a":"submission.head()","9bcdef62":"# prediction = model.predict(X_test)","2370fbf4":"# submission['Survived'] = prediction\nsubmission['Survived'] = prediction_svm","0d6bfea0":"submission","2463aaa7":"submission.to_csv('.\/submission.csv', index=False)","fb74874c":"age\ub294 null\uc778\ub4ef \ud558\ub2e4.","176aff71":"\uc77c\ub2e8 \uc81c\uc678","ebeeac93":"### 3.2 Embarked \uacb0\uce21\uce58 \ub300\uccb4 (\ucd5c\ube48\uac12)","2b628139":"## 2.4 Age ","f1e572c9":"### 3.8 Initial \uc6d0\ud56b\uc778\ucf54\ub529","f5437409":"feature \uac04\uc758 \uc0c1\uad00\uad00\uacc4\uac00 1\uc77c \uacbd\uc6b0, \ud558\ub098\ub294 \ubd88\ud544\uc694","2dff961e":"## 4.4 Naive Bayes","50c1c9e6":"\uc5b4\ub5a4 Feature\uac00 \uac00\uc7a5 \uc601\ud5a5\uc744 \ud06c\uac8c \uc8fc\ub294\uac00","b1c647d7":"# EDA\n\uc5b4\ub5a4 \uc5f4\uc774 \uc911\uc694\ud55c \uc9c0, \uc5f4 \uac04\uc758 \uc5b4\ub5a4 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub294 \uc9c0 \ud655\uc778. -> \uc2e4\uc81c \ubaa8\ub378\uc5d0 \uc5b4\ub5a4 \uc5f4\uc744 \uc4f0\uba74 \uc88b\uc744 \uc9c0 \uc911\uc694\ud55c \uc778\uc0ac\uc774\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\uc74c. ","97a9d7e3":"### 3.9 Embarked \uc6d0\ud56b\uc778\ucf54\ub529","f3ffb035":"### 3.1 Name\uc744 \uc774\uc6a9\ud574 Age \uacb0\uce21\uce58 \ub300\uccb4 (\ud3c9\uade0\uac12)","c1f37016":"## 2.1 Pclass","66ad8176":"\uc774\ub97c \ud1a0\ub300\ub85c \uac00\uc124\uc744 \uc138\uc6b8 \uc218 \uc788\uace0,\n \ubd88\ud544\uc694\ud55c feature\uc744 \uc81c\uac70\ud560 \uc218\ub3c4 \uc788\uc74c ","7fe99391":"### 3.10 Drop","1c08b77d":"# Feature engineering","a28b7dde":"- Lady first\n- Money brings survival?","e5e7f90e":"### 3.3 Age \ubc94\uc8fc\ud654","0df446ee":"## 4.5 SVM","491443d1":"### 3.7 \ud53c\uc5b4\uc2a8 \uc0c1\uad00\ubd84\uc11d","d5ab974d":"## 2.3 Both Sex and Pclass ","4be28d6b":"2. \ud568\uc218","d706f575":"## 2.5 Ticket","2caabcf4":"# Modeling","1ec5a89e":"\ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874\ud655\ub960\uc774 \ub192\uc544\uc9c4\ub2e4","9b61b937":"\ud074\ub798\uc2a4\uac00 \ub192\uc744 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\ub2e4","a07c41bb":"## 2.5 Fare","70212693":"# Feature importance","f70a9a59":"### 3.4 Initial \ub9e4\ud551","43ebcc50":"## 4.3 Decision Tree","8a777845":"## 2.2 Sex","23cc7819":"\uc9c0\ub3c4\ud559\uc2b5 - \ubaa9\uc801\uc774 \ub418\ub294 \ub808\uc774\ube14\uc744 \uc90c","bc926725":"### 3.6 Sex \ub9e4\ud551","bfb5d1cd":"1. \ud558\ub4dc\ucf54\ub529","35312e15":"---","c4bf7698":"### 3.5 Embarked \ub9e4\ud551","0e014dd2":"## 4.2 kNN","4c7a73db":"# Intro","4a100700":"1. Pclass = \uce74\ud14c\uace0\ub9ac(\ubd84\ub958) , ordinary(\uc21c\uc11c\uac00 \uc788\uc74c)\n2. Sex = \ubc14\uc774\ub108\ub9ac (\ub450\uac00\uc9c0)(\uc218\uce58\ud654\uc2dc\ucf1c\uc11c \ubc14\uafc0 \uac83)\n3. Age = continuous\n4. Fare = continuous \uc774\uc5b4\uc838\uc788\ub294 \uac70\n5. Embarked = S,C,Q \uce74\ud14c\uace0\ub9ac(\ubd84\ub958) , \uc21c\uc11c\uac00 \uc5c6\uc74c\n* \uce74\ud14c\uace0\ub9ac\ub294 \ub098\uc911\uc5d0 \uc6d0\ud56b\uc778\ucf54\ub529\ud574\uc11c \ub370\uc774\ud130 \ucc98\ub9ac\n* \ub370\uc774\ud130 \ud0c0\uc785\ub9c8\ub2e4 \ucc98\ub9ac\uac00 \ub2ec\ub77c\uc9c0\ubbc0\ub85c \uc8fc\uc758","cd599530":"\ub370\uc774\ud130 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 - \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \uc88b\uac8c\ud558\uae30 \uc704\ud574\uc11c \ub370\uc774\ud130\ub97c \ub9cc\uc9c0\uc791\uac70\ub9ac\ub294 \uac83\n* \ucf00\ube48\uc740 null\ub3c4 \ub9ce\uc544\uc11c \uba85\ud655\ud55c \uc815\ubcf4\ub97c \uc5bb\uae30 \ud798\ub4e4\uae30 \ub54c\ubb38\uc5d0 \uc81c\uc678\ud558\uaca0\ub2e4","169b17c7":"## 4.1 Randomforest"}}