{"cell_type":{"749f17a4":"code","ca834e96":"code","c92d3a49":"code","8a1aa876":"code","e9626fc3":"code","f129a336":"code","a8db0d77":"code","6fb3d8d2":"code","e29b9f09":"code","5959a77a":"code","0dd8eccf":"code","4556dc6a":"code","8d4a6175":"code","4ecd1fc2":"code","e6dfebfb":"markdown","bc998b28":"markdown","dd16619d":"markdown"},"source":{"749f17a4":"import functools\nimport inspect\nimport itertools\nimport json\nimport os\nimport random\n\nimport numpy as np\nimport pandas as pd\n\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom skimage import transform\nfrom skimage import util","ca834e96":"def read_all_tasks(path):\n    filenames = sorted(os.listdir(path))\n    all_tasks = {}\n    for task_file_name in filenames:\n        full_path = str(Path.joinpath(path, task_file_name))\n\n        with open(full_path, 'r') as file_obj:\n            all_tasks[task_file_name] = json.load(file_obj)\n\n    return all_tasks\n\ndata_path = Path(\"\/kaggle\/input\/abstraction-and-reasoning-challenge\/\")","c92d3a49":"@dataclass\nclass Transformation:\n    transform: object\n    argument_ranges: dict\n\n\n_grid_transformations = []\n\n\ndef grid_transformation(**argument_ranges):\n    def decorator(func):\n        _grid_transformations.append(\n            Transformation(transform=func, argument_ranges=argument_ranges)\n        )\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator    ","8a1aa876":"class Grid:\n    def __init__(self, pixels):\n        self.pixels = np.array(pixels)\n\n    @property\n    def shape(self):\n        return self.pixels.shape\n    \n    @property\n    def colors(self):\n        return np.unique(self.pixels)\n    \n    def to_sub_grids(self):\n        for color in self.colors:\n            if not color:\n                continue\n            for mask in generate_object_masks(self.pixels == color):\n                mask[mask > 0] = color\n                yield Grid(mask.astype(self.pixels.dtype))\n\n    def to_submission_output(self):\n        str_pred = str([row.tolist() for row in self.pixels])\n        str_pred = str_pred.replace(', ', '')\n        str_pred = str_pred.replace('[[', '|')\n        str_pred = str_pred.replace('][', '|')\n        str_pred = str_pred.replace(']]', '|')\n        return str_pred\n    \n    def __eq__(self, other):\n        if not isinstance(other, Grid):\n            return False\n        \n        return np.array_equal(self.pixels, other.pixels)\n\n    def copy(self):\n        return Grid(np.copy(self.pixels))\n\n    @grid_transformation(size=lambda grid, target_grid, **_: [target_grid.shape] if grid.shape != target_grid.shape else [])\n    def crop(self, *, size, **_):\n        cropped = self.pixels[0:size[0], 0:size[1]]\n        return Grid(cropped)\n\n    @grid_transformation(scale=lambda grid, target_grid, **_: [tuple(a\/b for a, b in zip(target_grid.shape, grid.shape))] if grid.shape != target_grid.shape else [])\n    def rescale(self, *, scale, **_):\n        scaled = transform.rescale(\n            self.pixels,\n            scale=scale,\n            order=0,\n            anti_aliasing=False,\n            preserve_range=True,\n        ).astype(self.pixels.dtype)\n        return Grid(scaled)\n\n    @grid_transformation(degrees=[90, 180, 270])\n    def rotate(self, *, degrees, **_):\n        rotated = transform.rotate(\n            self.pixels,\n            angle=degrees,\n            order=0,\n            resize=True,\n            preserve_range=True,\n        ).astype(self.pixels.dtype)\n        return Grid(rotated)\n\n    @grid_transformation(times=list(itertools.product((1, 2, 3), (1, 2, 3)))[1:])\n    def repeat(self, *, times, **_):\n        repeated = np.block([\n            [np.copy(self.pixels) for _ in range(times[0])]\n            for _ in range(times[1])\n        ])\n        return Grid(repeated)\n\n    @grid_transformation(\n        color_pair=lambda grid, target_grid, **_: list((c1, c2) for c1, c2 in itertools.product(grid.colors, target_grid.colors) if c1 != c2)\n    )\n    def change_color(self, *, color_pair, **_):\n        colored = self.copy()\n        colored.pixels[colored.pixels == color_pair[0]] = color_pair[1]\n        return colored\n        \n    @classmethod\n    def test(cls):\n        test_submission_output = cls([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).to_submission_output()\n        assert test_submission_output == \"|123|456|789|\", test_submission_output\n\n\nGrid.test()","e9626fc3":"@dataclass\nclass Recipe:\n    @dataclass\n    class RecipeItem:\n        transformation: Transformation\n        arguments: dict = None\n        skip: bool = False\n            \n    items: list\n\n    def cook(self, grid, target_grid=None):\n        for item in self.items:\n            if item.skip:\n                continue\n\n            if item.arguments is None:\n                assert target_grid is not None, \"Unable to estimate arguments without target grid\"\n                argument_ranges = {\n                    argument_name: (\n                        argument_range(grid=grid, target_grid=target_grid)\n                        if inspect.isfunction(argument_range)\n                        else argument_range\n                    )\n                    for argument_name, argument_range in item.transformation.argument_ranges.items()\n                }\n                \n                if all(len(argument_range) == 0 for argument_range in argument_ranges.values()):\n                    item.skip = True\n                    continue\n                \n                item.arguments = {\n                    argument_name: random.choice(argument_range)\n                    for argument_name, argument_range in argument_ranges.items()\n                }\n\n            grid = item.transformation.transform(grid, **item.arguments)\n        \n        return grid\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *_):\n        self.items = [item for item in self.items if not item.skip]\n\n\nclass CookBook:\n    def __init__(self):\n        self._recipes = []\n        self._best_recipe = None\n\n    @property\n    def latest_recipe(self):\n        assert self._recipes, \"No recipes created\"\n        return self._recipes[-1]\n\n    @property\n    def best_recipe(self):\n        assert self._best_recipe is not None, \"No recipe has been rated\"\n        return self._best_recipe[0]\n    \n    @property\n    def solving_count(self):\n        if self._best_recipe is None:\n            return -1\n        return self._best_recipe[1]\n\n    def rate_latest_recipe(self, solving_count, err):\n        is_the_new_best = (\n            self._best_recipe is None or\n            solving_count > self._best_recipe[1] or\n            (\n                solving_count == self._best_recipe[1] and err < self._best_recipe[2] or\n                solving_count == self._best_recipe[1] and err == self._best_recipe[2] and len(self.latest_recipe.items) < len(self.best_recipe.items)\n            )\n        )\n\n        if is_the_new_best:\n            self._best_recipe = (self.latest_recipe, solving_count, err)\n\n    def create_new_recipe(self):\n        recipe = Recipe(\n            items=[\n                Recipe.RecipeItem(transformation)\n                for transformation in random.choices(_grid_transformations, k=random.randint(1, len(_grid_transformations)))\n            ]\n        )\n\n        self._recipes.append(recipe)\n\n        return recipe","f129a336":"class Printer:\n    _last_printed_line = None\n\n    @classmethod\n    def print_without_repeat(cls, msg):\n        if msg == cls._last_printed_line:\n            return\n        print(msg)\n        cls._last_printed_line = msg\n\n    \ndef search_grid_transformations(tasks, max_iterations):\n    transformations = {}\n\n    for task_file_name, task in tasks.items():\n        iteration = 0\n        solved = False\n        book = CookBook()\n    \n        while book.solving_count < len(task[\"train\"]) and iteration < max_iterations:\n            iteration += 1\n            solving_count = 0\n            err = 0\n\n            with book.create_new_recipe() as recipe:\n                for train_data in task[\"train\"]:\n                    input_grid = Grid(train_data[\"input\"])\n                    output_grid = Grid(train_data[\"output\"])\n\n                    try:\n                        transformed_grid = recipe.cook(input_grid, output_grid)\n\n                    except Exception as exception:\n                        Printer.print_without_repeat(f\"{task_file_name}: {exception}\")\n                        solving_count = -1\n                        break\n\n                    if transformed_grid.shape != output_grid.shape:\n                        solving_count = -1\n                        break\n                    elif transformed_grid == output_grid:\n                        solving_count += 1\n                    else:\n                        err += np.sum(np.abs(transformed_grid.pixels - output_grid.pixels))\n\n            book.rate_latest_recipe(solving_count, err)\n            solved = solving_count == len(task[\"train\"])\n\n        transformations[task_file_name] = {\"recipe\": book.best_recipe, \"solved\": book.solving_count == len(task[\"train\"])}\n    \n    return transformations","a8db0d77":"def print_solved_problems(transformations):\n    solved_problems = [t for t in transformations.items() if t[1][\"solved\"]]\n\n    if not solved_problems:\n        print(\"No problem solved\")\n        return\n\n    for task_file_name, solver in solved_problems:\n        print(task_file_name)\n        for item in solver[\"recipe\"].items:\n            print(f\"\\t{item.transformation.transform.__name__} {item.arguments}\")","6fb3d8d2":"training_path = data_path \/ \"training\"\ntraining_tasks = read_all_tasks(training_path)","e29b9f09":"training_transformations = search_grid_transformations(training_tasks, max_iterations=1000)\nprint_solved_problems(training_transformations)","5959a77a":"def generate_test_predictions(tasks, transformations):\n    for task_file_name, task in tasks.items():\n        if task_file_name not in transformations:\n            print(f\"No grid transformation estimate for {task_file_name}\")\n            continue\n\n        transform = transformations[task_file_name]\n        \n        # There is no point to generate anything if even train data was not solved\n        if not transform[\"solved\"]:\n            continue\n        \n        recipe = transform[\"recipe\"]\n\n        for idx, test_data in enumerate(task[\"test\"]):\n            output_id = f\"{task_file_name.split('.')[0]}_{idx}\"\n            input_grid = Grid(test_data['input'])\n            transformed_grid = recipe.cook(input_grid)\n            yield output_id, transformed_grid.to_submission_output()","0dd8eccf":"list(generate_test_predictions(training_tasks, training_transformations))","4556dc6a":"test_path = data_path \/ \"test\"\ntest_tasks = read_all_tasks(test_path)\n\nsubmission = pd.read_csv(data_path \/ \"sample_submission.csv\", index_col=\"output_id\")","8d4a6175":"test_transformations = search_grid_transformations(test_tasks, max_iterations=1000)\nprint_solved_problems(test_transformations)","4ecd1fc2":"for output_id, pred in generate_test_predictions(test_tasks, test_transformations):\n    submission.loc[output_id, \"output\"] = pred\n\nsubmission.to_csv(\"submission.csv\")","e6dfebfb":"## Test data\n\nThis part does the training using test data, takes the sample submission and replaces its outputs with the best recipes found.","bc998b28":"# Abstraction and Reasoning Challenge: Grid cookbook\n\nThis notebook describes a simple approach for ARC which is able to solve few training samples but does not work at all with samples. More effective approach would most likely need to extract objects, have some concept of their identity to recognize them in both input and output images, and solve what transformations and mutations are needed object-wise to get the desired result.\n\nThe best part of this notebook is the easily extensible `Grid`: new transformation can be added there and it will be taken in use, without need to change anything else.\n\nBest way to manually check how good the recipes for the solved training problems are is by using ARC testing interface from https:\/\/github.com\/fchollet\/ARC\n\n## High-level look at the approach\n\nThis approach takes the arrays as is (in this notebook, these are referred as `Grid`s), tries different transformations with different arguments to them, and chooses the best one for each problem.\n\nThe selections process for transformations and arguments is guessing, i.e. random search over the whole candidate space.\n\nFor reasons unknown, I used some terms inspired by cooking. One combination of transformations with arguments is one `Recipe`, bunch of recipes make a `CookBook`.","dd16619d":"## Training tasks\n\nThis part applies above functions and mechanisms to traning data, to see that they work."}}