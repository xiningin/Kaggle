{"cell_type":{"5aca71c2":"code","b5f349f2":"code","589600d1":"code","ed10943c":"code","c0e500de":"code","fca08f48":"code","d2e31ee8":"code","c8f89e61":"code","0dcbc32f":"code","00217831":"code","5e578b71":"code","d0f22712":"code","25675331":"code","c944cbc2":"code","6e12c8a1":"code","aac74f58":"code","ef904d91":"code","78321554":"code","c797b7e9":"code","302d6e87":"code","70e40e6c":"code","78ed9d41":"code","c6829536":"code","6a1c6c6f":"code","49d24801":"code","d8031ec2":"code","912b0ce1":"code","7a71cca5":"code","44642ee1":"code","6c1bb3a4":"code","ac8966e4":"code","576e3fb4":"code","3ca5d0a4":"code","fe8cae22":"code","0d74d473":"code","467b4f5a":"code","47f5d9df":"code","18041568":"code","a027cc48":"code","50acd3c4":"code","a7d8af6b":"code","9be78182":"code","fa260949":"code","63ecbf6e":"code","d05ed7da":"code","478989ef":"code","9b2ac816":"code","b708554c":"code","ad0972c2":"code","eb56afad":"code","77f999f9":"code","f793534a":"code","528767b3":"code","4cc70c6a":"code","d611eacc":"code","43bb7caa":"code","004e2f3e":"code","5f20fe4a":"code","dfa3a496":"code","2113139d":"code","63f2a5fd":"code","9a8f660a":"code","9b86202f":"code","d3e88237":"code","f8ddd4b4":"code","f55daff6":"code","684dda0a":"code","251e0262":"code","4c5912a0":"code","e5ea5580":"code","b3123d01":"code","caac94e9":"code","0027b108":"code","d1902616":"code","e9d50ffb":"code","2b6ffda2":"code","68628fce":"code","43acaec0":"code","81001636":"code","054e914a":"code","1312b579":"code","54adc91d":"code","cfed9c3e":"markdown","65f63f71":"markdown","150a20cd":"markdown","3408aaf1":"markdown"},"source":{"5aca71c2":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm, notebook\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom datetime import datetime\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold,KFold\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nimport xgboost as xgb\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostClassifier\nimport catboost","b5f349f2":"xgb.XGBClassifier()","589600d1":"df_train = pd.read_csv('..\/input\/homework-for-students3\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/homework-for-students3\/test.csv', index_col=0)\nprint(len(df_test))\nprint(len(df_train))","ed10943c":"gdp=pd.read_csv('..\/input\/homework-for-students3\/US_GDP_by_State.csv')\nzipdata=pd.read_csv('..\/input\/homework-for-students3\/free-zipcode-database.csv')\ndrop_col = ['WorldRegion',\n       'Country', 'LocationText', 'Location', 'Decommisioned',\n       'TaxReturnsFiled', 'EstimatedPopulation', 'TotalWages', 'Notes']\nzipdata=zipdata.drop(drop_col,axis=1)\nstate=pd.read_csv('..\/input\/homework-for-students3\/statelatlong.csv')\nspi=pd.read_csv('..\/input\/homework-for-students3\/spi.csv')\nspi['date']=pd.to_datetime(spi['date'])\nspi= spi.set_index(\"date\")\nspi=spi.asfreq('d', method='ffill')\nspi = spi.reset_index()","c0e500de":"#\u306f\u305a\u308c\u5024Null\ndf_train[\"issue_d\"]=pd.to_datetime(df_train[\"issue_d\"])\ndf_test[\"issue_d\"]=pd.to_datetime(df_test[\"issue_d\"])\ndf_train = df_train[df_train.issue_d.dt.year >= 2015]\n#df_train[\"issue_d\"]=df_train[\"issue_d\"].astype(str)\ndf_train = df_train[df_train['annual_inc'] < df_train['annual_inc'].quantile(0.999)]\ndf_train['IDdami']=df_train.index\ndf_test['IDdami']=df_test.index","fca08f48":"#\u5143\u30c7\u30fc\u30bf\u304b\u3089\u7279\u5fb4\u91cf\u751f\u6210\ndf_train[\"earliest_cr_line\"]=pd.to_datetime(df_train[\"earliest_cr_line\"])\ndf_test[\"earliest_cr_line\"]=pd.to_datetime(df_test[\"earliest_cr_line\"])\n\ndf_train[\"issue_d_unix\"] = df_train[\"issue_d\"].view('int64') \/\/ 10**9\ndf_test[\"issue_d_unix\"] = df_test[\"issue_d\"].view('int64') \/\/ 10**9\ndf_train[\"earliest_cr_line_unix\"] = df_train[\"earliest_cr_line\"].view('int64') \/\/ 10**9\ndf_test[\"earliest_cr_line_unix\"] = df_test[\"earliest_cr_line\"].view('int64') \/\/ 10**9\n\ndf_train[\"period\"]=df_train[\"issue_d_unix\"]-df_train[\"earliest_cr_line_unix\"]\ndf_test[\"period\"]=df_test[\"issue_d_unix\"]-df_test[\"earliest_cr_line_unix\"]\n\ndf_train[\"period\"]=df_train[\"period\"].fillna(0)\ndf_test[\"period\"]=df_test[\"period\"].fillna(0) \n\n#\u30ed\u30fc\u30f3\u306e\u5408\u8a08\/\u6708\u3005\u306e\u652f\u6255\uff1d\u3069\u308c\u304f\u3089\u3044\u306e\u671f\u9593\u652f\u6255\u3046\u306e\u304b\ndf_train['aaa']=round(df_train['loan_amnt']\/df_train['installment'],5)\ndf_test['aaa']=round(df_test['loan_amnt']\/df_test['installment'],5)\n\n#\u5e74\u53ce\u306b\u5bfe\u3057\u3066\u3044\u304f\u3089\u304c\u30ed\u30fc\u30f3\u8fd4\u6e08\u306b\u56de\u3055\u308c\u308b\u306e\u304b\ndf_train['bbb']=round(df_train['loan_amnt']\/df_train['annual_inc'],5)\ndf_test['bbb']=round(df_test['loan_amnt']\/df_test['annual_inc'],5)\n#\u5e74\u53ce\u306e\u3046\u3061\u6708\u3005\u30ed\u30fc\u30f3\u8fd4\u6e08\u306b\u56de\u3055\u308c\u308b\u984d\n#df_train['ccc']=round(df_train['installment']\/df_train['annual_inc'],5)\n#df_test['ccc']=round(df_test['installment']\/df_test['annual_inc'],5)\n\n#\u4fe1\u7528\u67a0\u4ee5\u5185\u3067\u4f55\u56de\u501f\u308a\u305f\u304b\ndf_train['ddd']=round(df_train['revol_bal']\/df_train['revol_util'],5)\ndf_test['ddd']=round(df_test['revol_bal']\/df_test['revol_util'],5)\n#\u7dcf\u9810\u91d1\u306e\u3046\u3061\u3001\u4fe1\u7528\u67a0\u4ee5\u5185\u3067\u501f\u308a\u305f\u91d1\u984d\ndf_train['eee']=round(df_train['revol_bal']\/df_train['total_acc'],5)\ndf_test['eee']=round(df_test['revol_bal']\/df_test['total_acc'],5)\n\n#\u30b9\u30b3\u30a2\u51fa\u3066\u306a\u3044\u7cfb\ndf_train['fff']=round(df_train['revol_util']\/df_train['total_acc'],5)\ndf_test['fff']=round(df_test['revol_util']\/df_test['total_acc'],5)\n\n#\u30ed\u30fc\u30f3\u7dcf\u984d\/\u65b0\u3057\u3044\u8ca0\u50b5\u306e\u672c\u6570\ndf_train['aaa_open_acc']=round(df_train['loan_amnt']\/df_train['open_acc'],5)\ndf_test['aaa_open_acc']=round(df_test['loan_amnt']\/df_test['open_acc'],5)\n\n#\u7cbe\u5ea615\u4f4d\u3060\u3051\u3069\u611f\u899a\u7684\u306b\u7406\u89e3\u56f0\u96e3\n#df_train['annual_inc_open_acc']=round(df_train['annual_inc']\/df_train['open_acc'],5)\n#df_test['annual_inc_open_acc']=round(df_test['annual_inc']\/df_test['open_acc'],5)\n\n\n#df_train['remaining']=round(df_train['loan_amnt']\/df_train['tot_coll_amt'],5)\n#df_test['remaining']=round(df_test['loan_amnt']\/df_test['tot_coll_amt'],5)","d2e31ee8":"df_train.columns\nprint(len(df_test))\nprint(len(df_train))","c8f89e61":"#\u5143\u30c7\u30fc\u30bf\u3068statelatlong\u7d50\u5408\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\nkari_df_train=pd.merge(df_train, state, how='left',left_on='addr_state',right_on='State')\nkari_df_test=pd.merge(df_test, state, how='left',left_on='addr_state',right_on='State')\ndf_train = kari_df_train.set_index(\"ID\")\ndf_test =kari_df_test.set_index(\"ID\")\ndf_train=df_train.drop('State',axis=1)\ndf_test=df_test.drop('State',axis=1)","0dcbc32f":"print(len(df_test))\nprint(len(df_train))","00217831":"#\u5143\u30c7\u30fc\u30bf\u3068statelatlong\u3068gdp\u7d50\u5408\ndf_train['dami_year']=df_train.issue_d.dt.year\ndf_test['dami_year']=int(2015)\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\nkari_df_train=pd.merge(df_train, gdp, how='left',left_on=['City','dami_year'],right_on=['State','year'])\nkari_df_test=pd.merge(df_test, gdp, how='left',left_on=['City','dami_year'],right_on=['State','year'])\ndf_train = kari_df_train.set_index(\"ID\")\ndf_test =kari_df_test.set_index(\"ID\")\ndf_train=df_train.drop(['State','dami_year','year'],axis=1)\ndf_test=df_test.drop(['State','dami_year','year'],axis=1)","5e578b71":"#\u5143\u30c7\u30fc\u30bf\u3068statelatlong\u3068gdp\u3068spi\u7d50\u5408\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\nkari_df_train=pd.merge(df_train, spi, how='left',left_on=['issue_d'],right_on=['date'])\nkari_df_test=pd.merge(df_test, spi, how='left',left_on=['issue_d'],right_on=['date'])\ndf_train = kari_df_train.set_index(\"ID\")\ndf_test =kari_df_test.set_index(\"ID\")\ndf_train=df_train.drop(['date'],axis=1)\ndf_test=df_test.drop(['date'],axis=1)","d0f22712":"print(len(df_test))\nprint(len(df_train))\nzipdata.columns","25675331":"#zipdatagroupby\nzipdata[\"Zipcode\"]=zipdata[\"Zipcode\"].astype(str)\nzipdata[\"Zipcode\"]=zipdata[\"Zipcode\"].str[:3]\nzipdata=zipdata[['Zipcode','State','Xaxis', 'Yaxis', 'Zaxis']]\nzipdata=zipdata.groupby(['Zipcode','State'],as_index=False).mean()\n#zipdata = zipdata.reset_index()","c944cbc2":"#zipdatagroupby\ndf_train['zip_code']=df_train['zip_code'].str[:3]\ndf_test['zip_code']=df_test['zip_code'].str[:3]\ndf_train[\"zip_code\"]=df_train[\"zip_code\"].astype(str)\ndf_test[\"zip_code\"]=df_test[\"zip_code\"].astype(str)\n#df_train[\"City\"]=df_train[\"City\"].str.upper()\n#df_test[\"City\"]=df_test[\"City\"].str.upper()","6e12c8a1":"zipdata[zipdata.duplicated()]","aac74f58":"#\u5143\u30c7\u30fc\u30bf\u3068statelatlong\u3068gdp\u3068spi\u7d50\u5408\u3068zipcode\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\nkari_df_train=pd.merge(df_train, zipdata, how='left',left_on=['zip_code','addr_state'],right_on=['Zipcode','State'])\nkari_df_test=pd.merge(df_test, zipdata, how='left',left_on=['zip_code','addr_state'],right_on=['Zipcode','State'])\ndf_train = kari_df_train.set_index(\"ID\")\ndf_test =kari_df_test.set_index(\"ID\")\ndf_train=df_train.drop(['Zipcode','State'],axis=1)\ndf_test=df_test.drop(['Zipcode','State'],axis=1)","ef904d91":"#Label\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = OrdinalEncoder()\nenc_train = encoder.fit_transform(df_train['zip_code'].values)\nenc_test = encoder.transform(df_test['zip_code'].values)\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\ndf_train['zip_code_la']=enc_train.iloc[:,0]\ndf_test['zip_code_la']=enc_test.iloc[:,0]\ndf_train = df_train.set_index(\"ID\")\ndf_test =df_test.set_index(\"ID\")","78321554":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nzi_cal1='zip_code'\nzi_summary1 = df_train[zi_cal1].value_counts()\n# map\u3059\u308b\u3002\ndf_train['zip_code_co'] = df_train[zi_cal1].map(zi_summary1)\ndf_test['zip_code_co'] = df_test[zi_cal1].map(zi_summary1)","c797b7e9":"#Label\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = OrdinalEncoder()\nenc_train = encoder.fit_transform(df_train['addr_state'].values)\nenc_test = encoder.transform(df_test['addr_state'].values)\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\ndf_train['addr_state_la']=enc_train.iloc[:,0]\ndf_test['addr_state_la']=enc_test.iloc[:,0]\ndf_train = df_train.set_index(\"ID\")\ndf_test =df_test.set_index(\"ID\")","302d6e87":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nzi_cal2='addr_state'\nzi_summary2 = df_train[zi_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['addr_state_co'] = df_train[zi_cal2].map(zi_summary2)\ndf_test['addr_state_co'] = df_test[zi_cal2].map(zi_summary2)","70e40e6c":"df_train.columns","78ed9d41":"\"\"\"\ndf_train['Xaxis']=df_train['Xaxis'].replace([np.inf, -np.inf,np.nan], -9999)\ndf_test['Xaxis']=df_test['Xaxis'].replace([np.inf, -np.inf,np.nan], -9999)\ndf_train['Xaxis'].astype(str)\ndf_test['Xaxis'].astype(str)\n#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nzi_cal2='Xaxis'\nzi_summary2 = df_train[zi_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['Xaxis_co'] = df_train[zi_cal2].map(zi_summary2)\ndf_test['Xaxis_co'] = df_test[zi_cal2].map(zi_summary2)\ndf_train['Xaxis'].astype(int)\ndf_test['Xaxis'].astype(int)\n\"\"\"","c6829536":"\"\"\"\ndf_train['Yaxis']=df_train['Yaxis'].replace([np.inf, -np.inf,np.nan], -9999)\ndf_test['Yaxis']=df_test['Yaxis'].replace([np.inf, -np.inf,np.nan], -9999)\ndf_train['Yaxis'].astype(str)\ndf_test['Yaxis'].astype(str)\n#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nzi_cal2='Yaxis'\nzi_summary2 = df_train[zi_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['Yaxis_co'] = df_train[zi_cal2].map(zi_summary2)\ndf_test['Yaxis_co'] = df_test[zi_cal2].map(zi_summary2)\ndf_train['Yaxis'].astype(int)\ndf_test['Yaxis'].astype(int)\n\"\"\"","6a1c6c6f":"\"\"\"\ndf_train['Zaxis']=df_train['Zaxis'].replace([np.inf, -np.inf,np.nan], -9999)\ndf_test['Zaxis']=df_test['Zaxis'].replace([np.inf, -np.inf,np.nan], -9999)\ndf_train['Zaxis'].astype(str)\ndf_test['Zaxis'].astype(str)\n#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nzi_cal2='Zaxis'\nzi_summary2 = df_train[zi_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['Zaxis_co'] = df_train[zi_cal2].map(zi_summary2)\ndf_test['Zaxis_co'] = df_test[zi_cal2].map(zi_summary2)\ndf_train['Zaxis'].astype(int)\ndf_test['Zaxis'].astype(int)\n\"\"\"","49d24801":"#\u7279\u5fb4\u91cf\u306e\u9078\u629e\n#df_train=df_train.drop(['issue_d','earliest_cr_line','issue_d_unix','earliest_cr_line_unix'],axis=1)\n#df_test=df_test.drop(['issue_d','earliest_cr_line','issue_d_unix','earliest_cr_line_unix'],axis=1)\ndf_train=df_train.drop(['issue_d','earliest_cr_line'],axis=1)\ndf_test=df_test.drop(['issue_d','earliest_cr_line'],axis=1)\ndrop_col=['City','acc_now_delinq']\ndf_train=df_train.drop(drop_col,axis=1)\ndf_test=df_test.drop(drop_col,axis=1)","d8031ec2":"\"\"\"\ndf_train=df_train.replace({'initial_list_status':{'w':1,'f':2}})\ndf_test=df_test.replace({'initial_list_status':{'w':1,'f':2}})\ndf_train[\"initial_list_status\"]=df_train[\"initial_list_status\"].astype(int)\ndf_test[\"initial_list_status\"]=df_test[\"initial_list_status\"].astype(int)\n\"\"\"","912b0ce1":"\"\"\"\ndf_train=df_train.replace({'application_type':{'Individual':1,'Joint App':2}})\ndf_test=df_test.replace({'application_type':{'Individual':1,'Joint App':2}})\ndf_train[\"application_type\"]=df_train[\"application_type\"].astype(int)\ndf_test[\"application_type\"]=df_test[\"application_type\"].astype(int)\n\"\"\"","7a71cca5":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nce_cal2='initial_list_status'\nce_summary2 = df_train[ce_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['initial_list_status'] = df_train[ce_cal2].map(ce_summary2)\ndf_test['initial_list_status'] = df_test[ce_cal2].map(ce_summary2)","44642ee1":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nce_cal2='application_type'\nce_summary2 = df_train[ce_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['application_type'] = df_train[ce_cal2].map(ce_summary2)\ndf_test['application_type'] = df_test[ce_cal2].map(ce_summary2)","6c1bb3a4":"#\u30ab\u30c6\u30b4\u30ea\u30de\u30c3\u30d4\u30f3\u30b0\ndf_train['grade'].unique()\ndf_train=df_train.replace({'grade':{'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7}})\ndf_test=df_test.replace({'grade':{'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7}})\ndf_train[\"grade\"]=df_train[\"grade\"].astype(int)\ndf_test[\"grade\"]=df_test[\"grade\"].astype(int)","ac8966e4":"df_train=df_train.replace({'sub_grade':{'A1':1,'A2':2,'A3':3,'A4':4,'A5':5,\n                                    'B1':6,'B2':7,'B3':8,'B4':9,'B5':10,\n                                    'C1':11,'C2':12,'C3':13,'C4':14,'C5':15,\n                                    'D1':16,'D2':17,'D3':18,'D4':19,'D5':20,\n                                    'E1':21,'E2':22,'E3':23,'E4':24,'E5':25,\n                                    'F1':26,'F2':27,'F3':28,'F4':29,'F5':30,\n                                   'G1':31,'G2':32,'G3':33,'G4':34,'G5':35}})\ndf_test=df_test.replace({'sub_grade':{'A1':1,'A2':2,'A3':3,'A4':4,'A5':5,\n                                    'B1':6,'B2':7,'B3':8,'B4':9,'B5':10,\n                                    'C1':11,'C2':12,'C3':13,'C4':14,'C5':15,\n                                    'D1':16,'D2':17,'D3':18,'D4':19,'D5':20,\n                                    'E1':21,'E2':22,'E3':23,'E4':24,'E5':25,\n                                    'F1':26,'F2':27,'F3':28,'F4':29,'F5':30,\n                                   'G1':31,'G2':32,'G3':33,'G4':34,'G5':35}})\ndf_train[\"sub_grade\"]=df_train[\"sub_grade\"].astype(int)\ndf_test[\"sub_grade\"]=df_test[\"sub_grade\"].astype(int)","576e3fb4":"\nin_0=df_train[df_train.loan_condition==0].installment.median()\ndf_train['in_0_sa'] =df_train['installment']-in_0\ndf_test['in_0_sa'] =df_test['installment']-in_0\nlo_0=df_train[df_train.loan_condition==0].loan_amnt.median()\ndf_train['lo_0_sa'] =df_train['loan_amnt']-lo_0\ndf_test['lo_0_sa'] =df_test['loan_amnt']-lo_0\n\ndti_0=df_train[df_train.loan_condition==0].dti.median()\ndf_train['dti_0_sa'] =df_train['dti']-dti_0\ndf_test['dti_0_sa'] =df_test['dti']-dti_0\n\ntot_0=df_train[df_train.loan_condition==0].tot_cur_bal.median()\ndf_train['tot_0_sa'] =df_train['tot_cur_bal']-tot_0\ndf_test['tot_0_sa'] =df_test['tot_cur_bal']-tot_0\n\nrev_0=df_train[df_train.loan_condition==0].revol_bal.median()\ndf_train['rev_0_sa'] =df_train['revol_bal']-rev_0\ndf_test['rev_0_sa'] =df_test['revol_bal']-rev_0\n\npe_0=df_train[df_train.loan_condition==0].period.median()\ndf_train['pe_0_sa'] =df_train['period']-pe_0\ndf_test['pe_0_sa'] =df_test['period']-pe_0\n\n#sg_0=df_train[df_train.loan_condition==0].sub_grade.median()\n#df_train['sg_0_sa'] =df_train['sub_grade']-sg_0\n#df_test['sg_0_sa'] =df_test['sub_grade']-sg_0\n\nin_1=df_train[df_train.loan_condition==1].installment.median()\ndf_train['in_1_sa'] =df_train['installment']-in_1\ndf_test['in_1_sa'] =df_test['installment']-in_1\n\n\nlo_1=df_train[df_train.loan_condition==1].loan_amnt.median()\ndf_train['lo_1_sa'] =df_train['loan_amnt']-lo_1\ndf_test['lo_1_sa'] =df_test['loan_amnt']-lo_1\n\ndti_1=df_train[df_train.loan_condition==1].dti.median()\ndf_train['dti_1_sa'] =df_train['dti']-dti_1\ndf_test['dti_1_sa'] =df_test['dti']-dti_1\n\ntot_1=df_train[df_train.loan_condition==1].tot_cur_bal.median()\ndf_train['tot_1_sa'] =df_train['tot_cur_bal']-tot_1\ndf_test['tot_1_sa'] =df_test['tot_cur_bal']-tot_1\n\nrev_1=df_train[df_train.loan_condition==1].revol_bal.median()\ndf_train['rev_1_sa'] =df_train['revol_bal']-rev_1\ndf_test['rev_1_sa'] =df_test['revol_bal']-rev_1\n\npe_1=df_train[df_train.loan_condition==1].period.median()\ndf_train['pe_0_sa'] =df_train['period']-pe_1\ndf_test['pe_0_sa'] =df_test['period']-pe_1\n\n\n#sg_1=df_train[df_train.loan_condition==1].sub_grade.median()\n#df_train['sg_1_sa'] =df_train['sub_grade']-sg_1\n#df_test['sg_1_sa'] =df_test['sub_grade']-sg_1\n","3ca5d0a4":"df_train['home_ownership'].unique()\ndf_train=df_train.replace({'home_ownership':{'MORTGAGE':3,'RENT':2,'OWN':4,'ANY':1}})\ndf_test=df_test.replace({'home_ownership':{'MORTGAGE':3,'RENT':2,'OWN':4,'ANY':1}})\ndf_train[\"home_ownership\"]=df_train[\"home_ownership\"].astype(int)\ndf_test[\"home_ownership\"]=df_test[\"home_ownership\"].astype(int)\nprint(len(df_train.columns))\nprint(df_test.columns)","fe8cae22":"\"\"\"\ndf_train=df_train.replace({'purpose':{'debt_consolidation':1,'credit_card':2,'home_improvement':3,'other':4,\n                                     'major_purchase':5,'medical':6,'small_business':7,'car':8,\n                                     'moving':9,'vacation':10,'house':11,'renewable_energy':12,\n                                     'wedding':13,'educational':14}})\ndf_test=df_test.replace({'purpose':{'debt_consolidation':1,'credit_card':2,'home_improvement':3,'other':4,\n                                     'major_purchase':5,'medical':6,'small_business':7,'car':8,\n                                     'moving':9,'vacation':10,'house':11,'renewable_energy':12,\n                                     'wedding':13,'educational':14}})\ndf_train[\"purpose\"]=df_train[\"purpose\"].astype(int)\ndf_test[\"purpose\"]=df_test[\"purpose\"].astype(int)\nprint(len(df_test.columns))\nprint(df_test.columns)\n\"\"\"","0d74d473":"summary = df_train['purpose'].value_counts()\nsummary\ndf_train['purpose_co'] = df_train['purpose'].map(summary)\ndf_test['purpose_co'] = df_test['purpose'].map(summary)","467b4f5a":"df_train['purpose'].unique()","47f5d9df":"df_train=df_train.replace({'emp_length':{'< 1 year':0.5,'1 year':1,'2 years':2,'3 years':3,\n                                        '4 years':4,'5 years':5,'6 years':6,'7 years':7,\n                                        '8 years':8,'9 years':9,'10+ years':10}})  \ndf_test=df_test.replace({'emp_length':{'< 1 year':0.5,'1 year':1,'2 years':2,'3 years':3,\n                                        '4 years':4,'5 years':5,'6 years':6,'7 years':7,\n                                        '8 years':8,'9 years':9,'10+ years':10}})  \ndf_train[\"emp_length\"].head()","18041568":"#\u7279\u5fb4\u306e\u8ffd\u52a0\n#\n#df_train['emp_length_ggg']=round(df_train['loan_amnt']*df_train['emp_length'],5)\n#df_test['emp_length_ggg']=round(df_test['loan_amnt']*df_test['emp_length'],5)\n\n#df_train['emp_length_hhh']=round(df_train['installment']*df_train['emp_length'],5)\n#df_test['emp_length_hhh']=round(df_test['installment']*df_test['emp_length'],5)\n\ndf_train['emp_length_iii']=round(df_train['annual_inc']*df_train['emp_length'],5)\ndf_test['emp_length_iii']=round(df_test['annual_inc']*df_test['emp_length'],5)\n\n#df_train['emp_length_jjj']=round(df_train['dti']*df_train['emp_length'],5)\n#df_test['emp_length_jjj']=round(df_test['dti']*df_test['emp_length'],5)\n\n#df_train['emp_length_kkk']=round(df_train['open_acc']*df_train['emp_length'],5)\n#df_test['emp_length_kkk']=round(df_test['open_acc']*df_test['emp_length'],5)\n\n#df_train['emp_length_lll']=round(df_train['revol_bal']*df_train['emp_length'],5)\n#df_test['emp_length_lll']=round(df_test['revol_bal']*df_test['emp_length'],5)\n\n#df_train['emp_length_mmm']=round(df_train['revol_util']*df_train['emp_length'],5)\n#df_test['emp_length_mmm']=round(df_test['revol_util']*df_test['emp_length'],5)\n\n#df_train['emp_length_nnn']=round(df_train['total_acc']*df_train['emp_length'],5)\n#df_test['emp_length_nnn']=round(df_test['total_acc']*df_test['emp_length'],5)\n\n#df_train['emp_length_ooo']=round(df_train['tot_cur_bal']*df_train['emp_length'],5)\n#df_test['emp_length_ooo']=round(df_test['tot_cur_bal']*df_test['emp_length'],5)","a027cc48":"#\u7279\u5fb4\u306e\u8ffd\u52a0\n\"\"\"\ndf_train['grade_ggg']=round(df_train['loan_amnt']*df_train['grade'],5)\ndf_test['grade_ggg']=round(df_test['loan_amnt']*df_test['grade'],5)\n\ndf_train['grade_hhh']=round(df_train['installment']*df_train['grade'],5)\ndf_test['grade_hhh']=round(df_test['installment']*df_test['grade'],5)\n\ndf_train['grade_iii']=round(df_train['annual_inc']*df_train['grade'],5)\ndf_test['grade_iii']=round(df_test['annual_inc']*df_test['grade'],5)\n\ndf_train['grade_jjj']=round(df_train['dti']*df_train['grade'],5)\ndf_test['grade_jjj']=round(df_test['dti']*df_test['grade'],5)\n\ndf_train['grade_kkk']=round(df_train['open_acc']*df_train['grade'],5)\ndf_test['grade_kkk']=round(df_test['open_acc']*df_test['grade'],5)\n\ndf_train['grade_lll']=round(df_train['revol_bal']*df_train['grade'],5)\ndf_test['grade_lll']=round(df_test['revol_bal']*df_test['grade'],5)\n\ndf_train['grade_mmm']=round(df_train['revol_util']*df_train['grade'],5)\ndf_test['grade_mmm']=round(df_test['revol_util']*df_test['grade'],5)\n\ndf_train['grade_nnn']=round(df_train['total_acc']*df_train['grade'],5)\ndf_test['grade_nnn']=round(df_test['total_acc']*df_test['grade'],5)\n\ndf_train['grade_ooo']=round(df_train['tot_cur_bal']*df_train['grade'],5)\ndf_test['grade_ooo']=round(df_test['tot_cur_bal']*df_test['grade'],5)\n\"\"\"","50acd3c4":"#\u6700\u5f8c\u306b\u6ede\u7d0d\u3057\u3066\u304b\u3089\u306e\u5f71\u97ff\ndf_train['ggg_mths_since_last_delinq']=round(df_train['installment']*df_train['mths_since_last_delinq'],5)\ndf_test['ggg_mths_since_last_delinq']=round(df_test['installment']*df_test['mths_since_last_delinq'],5)","a7d8af6b":"#\u7279\u5fb4\u306e\u8ffd\u52a0\ndf_train['ggg']=round(df_train['loan_amnt']*df_train['sub_grade'],5)\ndf_test['ggg']=round(df_test['loan_amnt']*df_test['sub_grade'],5)\n\ndf_train['hhh']=round(df_train['installment']*df_train['sub_grade'],5)\ndf_test['hhh']=round(df_test['installment']*df_test['sub_grade'],5)\n\ndf_train['iii']=round(df_train['annual_inc']*df_train['sub_grade'],5)\ndf_test['iii']=round(df_test['annual_inc']*df_test['sub_grade'],5)\n\ndf_train['jjj']=round(df_train['dti']*df_train['sub_grade'],5)\ndf_test['jjj']=round(df_test['dti']*df_test['sub_grade'],5)\n\ndf_train['kkk']=round(df_train['open_acc']*df_train['sub_grade'],5)\ndf_test['kkk']=round(df_test['open_acc']*df_test['sub_grade'],5)\n\ndf_train['lll']=round(df_train['revol_bal']*df_train['sub_grade'],5)\ndf_test['lll']=round(df_test['revol_bal']*df_test['sub_grade'],5)\n\ndf_train['mmm']=round(df_train['revol_util']*df_train['sub_grade'],5)\ndf_test['mmm']=round(df_test['revol_util']*df_test['sub_grade'],5)\n\ndf_train['nnn']=round(df_train['total_acc']*df_train['sub_grade'],5)\ndf_test['nnn']=round(df_test['total_acc']*df_test['sub_grade'],5)\n\ndf_train['ooo']=round(df_train['tot_cur_bal']*df_train['sub_grade'],5)\ndf_test['ooo']=round(df_test['tot_cur_bal']*df_test['sub_grade'],5)","9be78182":"#\u7279\u5fb4\u8ffd\u52a0\n\"\"\"\ndf_train['home_ggg']=round(df_train['loan_amnt']*df_train['home_ownership'],5)\ndf_test['home_ggg']=round(df_test['loan_amnt']*df_test['home_ownership'],5)\n\ndf_train['home_hhh']=round(df_train['installment']*df_train['home_ownership'],5)\ndf_test['home_hhh']=round(df_test['installment']*df_test['home_ownership'],5)\n\ndf_train['home_iii']=round(df_train['annual_inc']*df_train['home_ownership'],5)\ndf_test['home_iii']=round(df_test['annual_inc']*df_test['home_ownership'],5)\n\ndf_train['home_jjj']=round(df_train['dti']*df_train['home_ownership'],5)\ndf_test['home_jjj']=round(df_test['dti']*df_test['home_ownership'],5)\n\ndf_train['home_kkk']=round(df_train['open_acc']*df_train['home_ownership'],5)\ndf_test['home_kkk']=round(df_test['open_acc']*df_test['home_ownership'],5)\n\ndf_train['home_lll']=round(df_train['revol_bal']*df_train['home_ownership'],5)\ndf_test['home_lll']=round(df_test['revol_bal']*df_test['home_ownership'],5)\n\ndf_train['home_mmm']=round(df_train['revol_util']*df_train['home_ownership'],5)\ndf_test['home_mmm']=round(df_test['revol_util']*df_test['home_ownership'],5)\n\ndf_train['home_nnn']=round(df_train['total_acc']*df_train['home_ownership'],5)\ndf_test['home_nnn']=round(df_test['total_acc']*df_test['home_ownership'],5)\n\ndf_train['home_ooo']=round(df_train['tot_cur_bal']*df_train['home_ownership'],5)\ndf_test['home_ooo']=round(df_test['tot_cur_bal']*df_test['home_ownership'],5)\n\"\"\"","fa260949":"#\u7279\u5fb4\u306e\u8ffd\u52a0\n\"\"\"\ndf_train['pub_rec_ggg']=round(df_train['loan_amnt']*df_train['pub_rec'],5)\ndf_test['pub_rec_ggg']=round(df_test['loan_amnt']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_hhh']=round(df_train['installment']*df_train['pub_rec'],5)\ndf_test['pub_rec_hhh']=round(df_test['installment']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_iii']=round(df_train['annual_inc']*df_train['pub_rec'],5)\ndf_test['pub_rec_iii']=round(df_test['annual_inc']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_jjj']=round(df_train['dti']*df_train['pub_rec'],5)\ndf_test['pub_rec_jjj']=round(df_test['dti']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_kkk']=round(df_train['open_acc']*df_train['pub_rec'],5)\ndf_test['pub_rec_kkk']=round(df_test['open_acc']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_lll']=round(df_train['revol_bal']*df_train['pub_rec'],5)\ndf_test['pub_rec_lll']=round(df_test['revol_bal']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_mmm']=round(df_train['revol_util']*df_train['pub_rec'],5)\ndf_test['pub_rec_mmm']=round(df_test['revol_util']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_nnn']=round(df_train['total_acc']*df_train['pub_rec'],5)\ndf_test['pub_rec_nnn']=round(df_test['total_acc']*df_test['pub_rec'],5)\n\ndf_train['pub_rec_ooo']=round(df_train['tot_cur_bal']*df_train['pub_rec'],5)\ndf_test['pub_rec_ooo']=round(df_test['tot_cur_bal']*df_test['pub_rec'],5)\n\"\"\"","63ecbf6e":"##\u7279\u5fb4\u306e\u8ffd\u52a0\n\"\"\"\ndf_train['emp_title_ggg']=round(df_train['loan_amnt']*df_train['emp_title'],5)\ndf_test['emp_title_ggg']=round(df_test['loan_amnt']*df_test['emp_title'],5)\n\ndf_train['emp_title_hhh']=round(df_train['installment']*df_train['emp_title'],5)\ndf_test['emp_title_hhh']=round(df_test['installment']*df_test['emp_title'],5)\n\ndf_train['emp_title_iii']=round(df_train['annual_inc']*df_train['emp_title'],5)\ndf_test['emp_title_iii']=round(df_test['annual_inc']*df_test['emp_title'],5)\n\ndf_train['emp_title_jjj']=round(df_train['dti']*df_train['emp_title'],5)\ndf_test['emp_title_jjj']=round(df_test['dti']*df_test['emp_title'],5)\n\ndf_train['emp_title_kkk']=round(df_train['open_acc']*df_train['emp_title'],5)\ndf_test['emp_title_kkk']=round(df_test['open_acc']*df_test['emp_title'],5)\n\ndf_train['emp_title_lll']=round(df_train['revol_bal']*df_train['emp_title'],5)\ndf_test['emp_title_lll']=round(df_test['revol_bal']*df_test['emp_title'],5)\n\ndf_train['emp_title_mmm']=round(df_train['revol_util']*df_train['emp_title'],5)\ndf_test['emp_title_mmm']=round(df_test['revol_util']*df_test['emp_title'],5)\n\ndf_train['emp_title_nnn']=round(df_train['total_acc']*df_train['emp_title'],5)\ndf_test['emp_title_nnn']=round(df_test['total_acc']*df_test['emp_title'],5)\n\ndf_train['emp_title_ooo']=round(df_train['tot_cur_bal']*df_train['emp_title'],5)\ndf_test['emp_title_ooo']=round(df_test['tot_cur_bal']*df_test['emp_title'],5)\n\"\"\"","d05ed7da":"df_train[df_train.grade==1].loan_amnt.mean() ","478989ef":"df_train[df_train.loan_condition==1].loan_amnt.mean() # \u8cb8\u3057\u5012\u308c\u305f\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d","9b2ac816":"df_train[df_train.grade==2]","b708554c":"df_train[df_train.loan_condition==0].loan_amnt.mean() # \u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d","ad0972c2":"df_train.describe()","eb56afad":"df_test.describe()","77f999f9":"f = 'purpose'\n\ndf_train[f].value_counts() \/ len(df_train)","f793534a":"df_test[f].value_counts() \/ len(df_test)","528767b3":"# dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ncats = []\nfor col in df_train.columns:\n    if df_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, df_train[col].nunique())\nprint(cats)","4cc70c6a":"print(df_train['title'].unique())\n#df_train['title'].value_counts() \/ len(df_train)\nprint(len(df_test.columns))\nprint(len(df_train.columns))","d611eacc":"\n#label\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = OrdinalEncoder()\nenc_train = encoder.fit_transform(df_train['emp_title'].values)\nenc_test = encoder.transform(df_test['emp_title'].values)\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\ndf_train['emp_title_lab']=enc_train.iloc[:,0]\ndf_test['emp_title_lab']=enc_test.iloc[:,0]\ndf_train = df_train.set_index(\"ID\")\ndf_test =df_test.set_index(\"ID\")","43bb7caa":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nce_cal1='emp_title'\nce_summary1 = df_train[ce_cal1].value_counts()\n# map\u3059\u308b\u3002\ndf_train['emp_title_co'] = df_train[ce_cal1].map(ce_summary1)\ndf_test['emp_title_co'] = df_test[ce_cal1].map(ce_summary1)","004e2f3e":"\n#Label\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = OrdinalEncoder()\nenc_train = encoder.fit_transform(df_train['title'].values)\nenc_test = encoder.transform(df_test['title'].values)\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\ndf_train['title_la']=enc_train.iloc[:,0]\ndf_test['title_la']=enc_test.iloc[:,0]\ndf_train = df_train.set_index(\"ID\")\ndf_test =df_test.set_index(\"ID\")\n","5f20fe4a":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nce_cal2='title'\nce_summary2 = df_train[ce_cal2].value_counts()\n# map\u3059\u308b\u3002\ndf_train['title_co'] = df_train[ce_cal2].map(ce_summary2)\ndf_test['title_co'] = df_test[ce_cal2].map(ce_summary2)","dfa3a496":"df_train['NaN']=df_train.isnull().sum(axis=1)\ndf_test['NaN']=df_test.isnull().sum(axis=1)\ndf_train['NaN']=df_train[\"NaN\"].fillna(0) \ndf_test['NaN']=df_test[\"NaN\"].fillna(0)\n#df_train['NaN_%']=df_train[\"NaN\"]\/(len(df_train.columns)-1)*100\n#df_test['NaN_%']=df_test[\"NaN\"]\/(len(df_train.columns)-1)*100\n#df_train['NaN_%']=df_train[\"NaN_%\"].replace([np.inf, -np.inf,np.nan], 0)\n#df_test['NaN_%']=df_test[\"NaN_%\"].replace([np.inf, -np.inf,np.nan], 0)","2113139d":"\"\"\"\nno_loan=df_train[df_train.loan_condition==0].loan_amnt.mean() # \u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d\ndf_train['no_loan']=df_train['loan_amnt']-no_loan\ndf_test['no_loan']=df_test['loan_amnt']-no_loan\n\nno_loan1=df_train[df_train.loan_condition==0].annual_inc.mean() \ndf_train['no_loan1']=df_train['annual_inc']-no_loan1\ndf_test['no_loan1']=df_test['annual_inc']-no_loan1\n\nno_loan2=df_train[df_train.loan_condition==0].dti.mean() \ndf_train['no_loan2']=df_train['dti']-no_loan2\ndf_test['no_loan2']=df_test['dti']-no_loan2\n\nno_loan3=df_train[df_train.loan_condition==0].dti.mean() \ndf_train['no_loan3']=df_train['dti']-no_loan3\ndf_test['no_loan3']=df_test['dti']-no_loan3\n\nno_loan4=df_train[df_train.loan_condition==0].installment.mean() \ndf_train['no_loan4']=df_train['installment']-no_loan4\ndf_test['no_loan4']=df_test['installment']-no_loan4\n\nyes_loan=df_train[df_train.loan_condition==1].loan_amnt.mean() # \u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d\ndf_train['yes_loan']=df_train['loan_amnt']-yes_loan\ndf_test['yes_loan']=df_test['loan_amnt']-yes_loan\n\nyes_loan2=df_train[df_train.loan_condition==1].annual_inc.mean() \ndf_train['yes_loan2']=df_train['annual_inc']-yes_loan2\ndf_test['yes_loan2']=df_test['annual_inc']-yes_loan2\n\nyes_loan3=df_train[df_train.loan_condition==1].dti.mean() \ndf_train['yes_loan3']=df_train['dti']-yes_loan3\ndf_test['yes_loan3']=df_test['dti']-yes_loan3\n\nyes_loan3=df_train[df_train.loan_condition==1].dti.mean() \ndf_train['yes_loan3']=df_train['dti']-yes_loan3\ndf_test['yes_loan3']=df_test['dti']-yes_loan3\n\nyes_loan4=df_train[df_train.loan_condition==1].installment.mean() \ndf_train['yes_loan4']=df_train['installment']-yes_loan4\ndf_test['yes_loan4']=df_test['installment']-yes_loan4\n\"\"\"","63f2a5fd":"#\u884c\u306e\u524a\u9664\n\"\"\"\ndf_train=df_train[df_train['title']<= 13]\ndf_test=df_test[df_test['title']<= 13]\ndf_train=df_train[df_train['inq_last_6mths']<= 5]\ndf_test=df_test[df_test['inq_last_6mths']<= 5]\ndf_train=df_train[df_train['eee']<= 100000]\ndf_test=df_test[df_test['eee']<= 100000]\n\n#df_train=df_train.drop('bbb',axis=1)\n#df_test=df_test.drop('bbb',axis=1)\n#df_train=df_train.drop('ccc',axis=1)\n#df_test=df_test.drop('ccc',axis=1)\n#df_train=df_train.drop('fff',axis=1)\n#df_test=df_test.drop('fff',axis=1)\n#df_train=df_train.drop('jjj',axis=1)\n#df_test=df_test.drop('jjj',axis=1)\n#df_train=df_train.drop('iii',axis=1)\n#df_test=df_test.drop('iii',axis=1)\n#df_train=df_train.drop('close',axis=1)\n#df_test=df_test.drop('close',axis=1)\n#df_train=df_train.drop('emp_length_iii',axis=1)\n#df_test=df_test.drop('emp_length_iii',axis=1)\n\nan_max=max(df_train['annual_inc'])\ndf_train.annual_inc.loc[(df_train['annual_inc']>an_max)]=an_max\ndf_test.annual_inc.loc[(df_test['annual_inc']>an_max)]=an_max\nlo_max=max(df_train['loan_amnt'])\ndf_train.loan_amnt.loc[(df_train['loan_amnt']>lo_max)]=lo_max\ndf_test.loan_amnt.loc[(df_test['loan_amnt']>lo_max)]=lo_max\nto_max=max(df_train['tot_coll_amt'])\ndf_train.tot_coll_amt.loc[(df_train['tot_coll_amt']>to_max)]=to_max\ndf_test.tot_coll_amt.loc[(df_test['tot_coll_amt']>to_max)]=to_max\ndf_train = df_train[df_train.revol_bal <= 1500000]\ndf_test = df_test[df_test.revol_bal <= 1500000]\ndf_train = df_train[df_train.lll <= 20000000]\ndf_test = df_test[df_test.lll <= 20000000]\n\"\"\"\n#lo_max=max(df_train['loan_amnt'])\n#df_train.loan_amnt.loc[(df_train['loan_amnt']>lo_max)]=lo_max\n#df_test.loan_amnt.loc[(df_test['loan_amnt']>lo_max)]=lo_max\ndf_train=df_train.drop(\"pub_rec\",axis=1)\ndf_test=df_test.drop(\"pub_rec\",axis=1)\ndf_train=df_train.drop(\"annual_inc\",axis=1)\ndf_test=df_test.drop(\"annual_inc\",axis=1)\n#drop_col=['lll','tot_coll_amt','Population (million)','purpose','no_loan2','delinq_2yrs','ooo','annual_inc',\n#         'no_loan4','installment','Gross State Product','ggg_mths_since_last_delinq','no_loan','nnn','eee',\n#         'title','mths_since_last_major_derog','open_acc']\n#drop_col=['no_loan2','delinq_2yrs','ooo','annual_inc',\n#         'no_loan4','installment','Gross State Product','ggg_mths_since_last_delinq','no_loan','nnn','eee',\n#         'title','mths_since_last_major_derog','open_acc']\n#df_train=df_train.drop(drop_col,axis=1)\n#df_test=df_test.drop(drop_col,axis=1)","9a8f660a":"\"\"\"\nkari_train = df_train.drop(['loan_condition'], axis=1)\nkari=pd.concat([kari_train,df_test],axis=0)\ngrade_1=kari[kari.grade==1].grade.sum()\ngrade_2=kari[kari.grade==2].grade.sum()\ngrade_3=kari[kari.grade==3].grade.sum()\ngrade_4=kari[kari.grade==4].grade.sum()\ngrade_5=kari[kari.grade==5].grade.sum()\ngrade_6=kari[kari.grade==6].grade.sum()\ngrade_7=kari[kari.grade==7].grade.sum()\ndf_train['grade_hi']=0\ndf_train.grade_hi[df_train.grade == 1] =grade_1\/len(kari)*100\ndf_train.grade_hi[df_train.grade == 2] =grade_2\/len(kari)*100\ndf_train.grade_hi[df_train.grade == 3] =grade_3\/len(kari)*100\ndf_train.grade_hi[df_train.grade == 4] =grade_4\/len(kari)*100\ndf_train.grade_hi[df_train.grade == 5] =grade_5\/len(kari)*100\ndf_train.grade_hi[df_train.grade == 6] =grade_6\/len(kari)*100\ndf_train.grade_hi[df_train.grade == 7] =grade_7\/len(kari)*100\n\ndf_test['grade_hi']=0\ndf_test.grade_hi[df_test.grade == 1] =grade_1\/len(kari)*100\ndf_test.grade_hi[df_test.grade == 2] =grade_2\/len(kari)*100\ndf_test.grade_hi[df_test.grade == 3] =grade_3\/len(kari)*100\ndf_test.grade_hi[df_test.grade == 4] =grade_4\/len(kari)*100\ndf_test.grade_hi[df_test.grade == 5] =grade_5\/len(kari)*100\ndf_test.grade_hi[df_test.grade == 6] =grade_6\/len(kari)*100\ndf_test.grade_hi[df_test.grade == 7] =grade_7\/len(kari)*100\n\"\"\"","9b86202f":"#\u7121\u9650\u5927\u3084NULL\u5024\u306e\u7f6e\u63db\n#df_train=df_train.replace([np.inf, -np.inf,np.nan], -9999)\n#df_test=df_test.replace([np.inf, -np.inf,np.nan], -9999)\n#X_train.fillna(X_train.median(), inplace=True)\n#X_test.fillna(X_train.median(), inplace=True)","d3e88237":"#df_train['annual_inc']","f8ddd4b4":"y_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\n\nX_test = df_test\n","f55daff6":"col='title'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['title']=enc_train\nX_test['title']=enc_test","684dda0a":"col='emp_title'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['emp_title']=enc_train\nX_test['emp_title']=enc_test","251e0262":"col='zip_code'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['zip_code']=enc_train\nX_test['zip_code']=enc_test","4c5912a0":"col='addr_state'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['addr_state']=enc_train\nX_test['addr_state']=enc_test","e5ea5580":"col='purpose'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['purpose']=enc_train\nX_test['purpose']=enc_test","b3123d01":"col='application_type'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['application_type_ta']=enc_train\nX_test['application_type_ta']=enc_test\n","caac94e9":"X_train['Yaxis'].isnull().sum()","0027b108":"X_train['Yaxis']=X_train['Yaxis'].replace([np.inf, -np.inf,np.nan], -9999)\nX_test['Yaxis']=X_test['Yaxis'].replace([np.inf, -np.inf,np.nan], -9999)\nX_train['Yaxis'].astype(str)\nX_test['Yaxis'].astype(str)\ncol='Yaxis'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\nX_train['Yaxis_ta']=enc_train\nX_test['Yaxis_ta']=enc_test\nX_train['Yaxis'].astype(int)\nX_test['Yaxis'].astype(int)","d1902616":"#\u7121\u9650\u5927\u3084NULL\u5024\u306e\u7f6e\u63db\nX_train=X_train.replace([np.inf, -np.inf,np.nan], -9999)\nX_test=X_test.replace([np.inf, -np.inf,np.nan], -9999)\n#X_train.fillna(X_train.median(), inplace=True)\n#X_test.fillna(X_train.median(), inplace=True)","e9d50ffb":"## CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nscores = []\ny_pred_test=np.zeros(len(X_test))\ndf = pd.DataFrame(index=[], columns=[])\ndf['feature']=X_train.columns\nn=5\nfor i in range(n):\n    X_train_,X_val,y_train_,y_val=train_test_split(X_train,y_train,test_size=0.3,random_state=i*10)   \n\n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1,\n              importance_type='split', learning_rate=0.05, max_depth=-1,\n               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n               n_estimators=100, n_jobs=-1, num_leaves=50, objective=None,\n               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    df[i]=Series(clf.booster_.feature_importance(importance_type='gain'))\n    y_pred_test+=clf.predict_proba(X_test)[:,1]\n\ndf['ave']=df.mean(axis=1)\ndf['std']=df.std(axis=1)\ndf=df.sort_values('ave',ascending=False)\nykai=y_pred_test\/n\n    ","2b6ffda2":"print(scores)\nprint(df)\nprint(ykai)","68628fce":"## CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nscores_xg=[]\ny_pred_test_xg=np.zeros(len(X_test))\ndf_xg = pd.DataFrame(index=[], columns=[])\ndf_xg['feature']=X_train.columns\nn=5\nfor i in range(n):\n    X_train_,X_val,y_train_,y_val=train_test_split(X_train,y_train,test_size=0.3,random_state=i*10)  \n\n    xg=xgb.XGBClassifier()\n    \n    xg.fit(X_train_, y_train_,early_stopping_rounds=100, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred_xg = xg.predict_proba(X_val)[:,1]\n    score_xg = roc_auc_score(y_val, y_pred_xg)\n    print(score_xg)\n    scores_xg.append(score_xg)\n    y_pred_test_xg+=xg.predict_proba(X_test)[:,1]\n\nykai_xg=y_pred_test_xg\/n","43acaec0":"## CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nscores_cb = []\ny_pred_test_cb=np.zeros(len(X_test))\ndf_cb = pd.DataFrame(index=[], columns=[])\ndf_cb['feature']=X_train.columns\nn=5\nfor i in range(n):\n    X_train_,X_val,y_train_,y_val=train_test_split(X_train,y_train,test_size=0.3,random_state=i*10)   \n\n    cb =  catboost.CatBoostClassifier(eval_metric='AUC')    \n    cb.fit(X_train_, y_train_, early_stopping_rounds=200,eval_set=[(X_val, y_val)])\n\n    y_pred_cb = cb.predict_proba(X_val)[:,1]\n    #score_cb = metrics.roc_auc_score(y_val, y_pred)\n    #scores_cb.append(score_cb)\n    y_pred_test_cb+=cb.predict_proba(X_test)[:,1]\n\nykai_cb=y_pred_test_cb\/n","81001636":"print(ykai)\nprint(ykai_xg)\nprint(ykai_cb)","054e914a":"#all=(ykai+ykai_xg+ykai_cb)\ny_pred=(ykai+ykai_xg+ykai_cb)\/3\n#y_pred","1312b579":"# \u3053\u3061\u3089\u3082\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b20\u5206\u306e\uff11\u306b\u9593\u5f15\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u756a\u3067\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u7528\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nsubmission = pd.read_csv('..\/input\/homework-for-students3\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","54adc91d":"submission.head()","cfed9c3e":"## \u57fa\u672c\u7d71\u8a08\u91cf\u3092train\/test\u3067\u6bd4\u8f03\u3057\u3066\u307f\u3088\u3046","65f63f71":"\u8272\u3005\u306a\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066\u53ef\u8996\u5316\u3084\u96c6\u8a08\u3092\u884c\u3044\u3001\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7406\u89e3\u3092\u6df1\u3081\u307e\u3057\u3087\u3046\u3002Kaggle\u306eKernel (notebook)\u306a\u3069\u3082\u6709\u7528\u3067\u3059\u3002\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3084\u30e2\u30c7\u30ea\u30f3\u30b0\u3060\u3051\u3067\u306a\u304f\u3001EDA\u306b\u7279\u5316\u3057\u305f\u3082\u306e\u3082\u591a\u304f\u3001\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002","150a20cd":"## X\u3068y\u306b\u5206\u5272\u3057\u307e\u3059","3408aaf1":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f"}}