{"cell_type":{"3bd2bd8a":"code","df26a8c1":"code","0cef6851":"code","f12713dd":"code","4a424e5f":"code","94cb96ea":"code","dca39e71":"code","a1451fe8":"code","849ef05e":"code","53cdc7ed":"code","ac293411":"code","0bbfafbf":"code","a9cb7999":"code","cdb0f809":"code","d4d06bf9":"code","bb2fd4b0":"code","2eb0fb4d":"markdown","92bf5d72":"markdown","55a50daa":"markdown","d0ac45f3":"markdown","10d80cf1":"markdown","520436a5":"markdown","25aa262a":"markdown","9e435ab9":"markdown","8c401d4d":"markdown","98a097dc":"markdown","135ccb4a":"markdown","9ba75dfe":"markdown"},"source":{"3bd2bd8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom glob import glob \nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df26a8c1":"print(os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\"))","0cef6851":"train = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\nval = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\ntest = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"","f12713dd":"plt.figure(1, figsize = (15 , 7))\nplt.subplot(1 , 2 , 1)\nimg = glob(train+\"\/PNEUMONIA\/*.jpeg\") #Getting an image in the PNEUMONIA folder\nimg = np.asarray(plt.imread(img[0]))\nplt.title('PNEUMONIA X-RAY')\nplt.imshow(img)\n\nplt.subplot(1 , 2 , 2)\nimg = glob(train+\"\/NORMAL\/*.jpeg\") #Getting an image in the NORMAL folder\nimg = np.asarray(plt.imread(img[0]))\nplt.title('NORMAL CHEST X-RAY')\nplt.imshow(img)\n\nplt.show()","4a424e5f":"train_datagen = ImageDataGenerator(rescale            = 1\/255,\n                                   shear_range        = 0.2,\n                                   zoom_range         = 0.2,\n                                   horizontal_flip    = True,\n                                   rotation_range     = 40,\n                                   width_shift_range  = 0.2,\n                                   height_shift_range = 0.2)\n","94cb96ea":"test_datagen = ImageDataGenerator(rescale = 1\/255)","dca39e71":"training_set = train_datagen.flow_from_directory(train,\n                                   target_size= (224, 224),\n                                   batch_size = 32,\n                                   class_mode = 'binary')\n\nval_set = test_datagen.flow_from_directory(val,\n                                   target_size=(224, 224),\n                                   batch_size = 32,\n                                   class_mode ='binary')\n\ntest_set = test_datagen.flow_from_directory(test,\n                                   target_size= (224, 224),\n                                   batch_size = 32,\n                                   class_mode = 'binary')","a1451fe8":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout","849ef05e":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3), padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation = 'sigmoid'))\n\n\nmodel.summary()","53cdc7ed":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","ac293411":"nb_train_samples = 5217\nnb_validation_samples = 17\nepochs = 20\nbatch_size = 16","0bbfafbf":"model_train = model.fit_generator(training_set,\n                         steps_per_epoch=nb_train_samples \/\/ batch_size,\n                         epochs=epochs,\n                         validation_data=val_set,\n                         validation_steps=nb_validation_samples \/\/ batch_size)","a9cb7999":"# model.evaluate_generator(generator=val_set,\n# steps=100)\n# evaluate the model\nscores = model.evaluate_generator(test_set)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","cdb0f809":"# Get the predictions on test set\npreds = model.predict(test_set)\npreds = np.squeeze((preds > 0.5).astype('int'))","d4d06bf9":"path_val_image = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/person1946_bacteria_4874.jpeg\" # copied path of the Pneumonia X-ray image\n","bb2fd4b0":"from keras.preprocessing import image\n\nimg = image.load_img(path_val_image, target_size=(224, 224))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nclasses = model.predict(x)\nprint(classes)\nif classes>0.5:\n    print(\" pneumonia\")\nelse:\n    print(\"normal\")","2eb0fb4d":"# Data Exploration","92bf5d72":"# Importing Library","55a50daa":"# Example to show how our model working","d0ac45f3":"os. listdir() method in python is used to get the list of all files and directories in the specified directory","10d80cf1":"# Model Formation","520436a5":"# Evaluate the Model\n","25aa262a":"# If you like my kernel... Please upvote...","9e435ab9":"In Python, the glob module is used to retrieve files\/path names matching a specified pattern.","8c401d4d":"# Data Augmentation","98a097dc":"# Visualization of x-ray image","135ccb4a":"This is called image preprocessing, or data augmentation. We will be using the ImageDataGenerator() class from Keras for our data augmentation. Data augmentation helps us to expand our training dataset. The more training data the better. With more training data, overfitting becomes less of a problem as our model has to generalize more.\n\n* The first step is to rescale our data. Rescaling images is a common practice because most images have RGB values ranging from 0-255. These values are too high for most models to handle, but by multiplying these values by 1\/255, we can condense each RGB value to a value between 0-1. This is much easier for our model to process.\n\n* Next we have shear_range which will randomly apply shear mapping, or shear transformations to the data. The value \"0.2\" is the shear intensity, or shear angle.\n\n* zoom_range is also set to \"0.2\". This is for randomly zooming in on the images.\n\n* horizontal_flip is set to \"True\" because we want to randomly flip half of the images in our dataset.\n\n* rotation_range is the value in degrees for which the image may be randomly rotated.\n* width_shift_range and height_shift_range are ranges for randomly translating images.","9ba75dfe":"# Prediction"}}