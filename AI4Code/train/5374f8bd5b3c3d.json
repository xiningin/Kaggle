{"cell_type":{"6a3e4e8a":"code","92d3655f":"code","e2b73e1b":"code","be72b107":"code","68b0e35e":"code","a3877fcf":"code","726b686f":"code","c689c3db":"code","b3d637e8":"code","7d79b8bc":"code","1923570d":"code","e47aae75":"code","052f6e9f":"markdown","62c19ac6":"markdown","9b8c14c5":"markdown","f4e797bf":"markdown","4314cc60":"markdown","1e55e157":"markdown","1281be32":"markdown","336fc324":"markdown","96a782ce":"markdown","39f0bb0c":"markdown","6e2a30d4":"markdown","ff7e6611":"markdown"},"source":{"6a3e4e8a":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing","92d3655f":"raw_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nraw_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e2b73e1b":"mean_age = int(raw_test[\"Age\"].sum() \/ (len(raw_test) - raw_test[\"Age\"].isnull().sum()))\nmean_age","be72b107":"raw_train = raw_train.drop([\"PassengerId\", \"Cabin\", \"Ticket\", \"Name\"], axis = 1)\nraw_train = raw_train.dropna (axis = 0).reset_index (drop = True)\n\nraw_test = raw_test.drop([\"Cabin\", \"Ticket\", \"Name\"], axis = 1)\nraw_test = raw_test.fillna (value = mean_age, axis = 0).reset_index (drop = True)\ntest_id = raw_test.filter([\"PassengerId\"], axis = 1)\nraw_test = raw_test.drop([\"PassengerId\"], axis = 1)","68b0e35e":"train = pd.get_dummies (data = raw_train, drop_first = True)\ntest = pd.get_dummies (data = raw_test, drop_first = True)","a3877fcf":"print(train[\"Survived\"].sum() \/ len(train))","726b686f":"l_0 = len(train)\nl_f = train[\"Survived\"].sum() * 2\nb_train = train.copy()\n\nfor i in range (l_0):\n    \n    if l_f < len(b_train):\n        \n        if b_train[\"Survived\"][i] == 0:\n            \n            b_train = b_train.drop(index = i, axis = 0)\n            \n    else:\n        break      \n        \nprint(\"Start: Length = {0}, Ones = {1}, Zeros = {2}\".format(l_0, l_f \/\/ 2, l_0 - (l_f \/\/ 2)))\nprint(\"End: Length = {0}, Ones = {1}, Zeros = {2}\".format(len(b_train), b_train[\"Survived\"].sum(), len(b_train) - b_train[\"Survived\"].sum()))","c689c3db":"b_train = b_train.sample(frac = 1).reset_index(drop = True)","b3d637e8":"raw_train_inputs = b_train.drop(\"Survived\", axis = 1)\ntrain_targets = b_train.filter([\"Survived\"], axis = 1)","7d79b8bc":"train_inputs = preprocessing.scale (raw_train_inputs) # preprocessing.scale automatically transforms pandas.DataFrame into numpy.ndarray\ntrain_targets = train_targets.to_numpy()\n\ntest_inputs = preprocessing.scale (test)","1923570d":"input_samples = train_inputs.copy()\ntarget_samples = train_targets.copy()\n\nn_train = int(0.8 * len(train_inputs))\n\ntrain_inputs = input_samples[:n_train]\ntrain_targets = target_samples[:n_train]\n\nvalidation_inputs = input_samples[n_train:]\nvalidation_targets = target_samples[n_train:]\n\nprint(len(train_inputs), len(train_targets), len(validation_inputs), len(validation_targets))","e47aae75":"np.savez (\"Titanic_Train\", inputs = train_inputs, targets = train_targets)\nnp.savez (\"Titanic_Validation\", inputs = validation_inputs, targets = validation_targets)\nnp.savez (\"Titanic_Test\", passengerId = test_id, inputs = test_inputs)","052f6e9f":"### Balancing dataset","62c19ac6":"### One-hot encoding","9b8c14c5":"### Feature selection and missing values","f4e797bf":"### Feature scaling","4314cc60":"# Titanic Notebook - Preprocessing","1e55e157":"## Data preprocessing","1281be32":"### Saving data in .npz","336fc324":"### Train & Validation","96a782ce":"### Inputs & targets","39f0bb0c":"### Shuffling dataset","6e2a30d4":"### Importing sets","ff7e6611":"## Libraries"}}