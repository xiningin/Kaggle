{"cell_type":{"ba0f9cd8":"code","3ee33a82":"code","a638d1d9":"code","fbf455a5":"code","1441ad79":"code","bb3402f1":"code","716ea421":"code","8c079de6":"code","0cf78f53":"code","9a1dc8a9":"code","73835c52":"code","8d55a41d":"code","b2a7ccdf":"markdown","01eaa9d5":"markdown","6fad11bf":"markdown"},"source":{"ba0f9cd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3ee33a82":"import matplotlib.pyplot as plt\nimport itertools\nimport statsmodels.api as sm\nfrom scipy import stats\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom matplotlib import rcParams\nrcParams['figure.figsize'] = 20,10","a638d1d9":"train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv\")","fbf455a5":"country_dict= dict()\nfor itr in range(len(train)):\n    if train.loc[itr]['Country_Region'] not in country_dict.keys():\n        country_dict[train.loc[itr]['Country_Region']]= []\n    else:\n        if len(country_dict[train.loc[itr]['Country_Region']])>=75:\n            continue\n    country_dict[train.loc[itr]['Country_Region']].append([[train.loc[itr]['Date']],[train.loc[itr]['ConfirmedCases']],[train.loc[itr]['Fatalities']]])    \n    \ntime_series_dict = dict()\nfor country in country_dict.keys():\n    for case in ['ConfirmedCases','Fatalities']:\n        tsz=train.loc[(train['Country_Region']==country)]\n        tsz=tsz[['Date',case]]\n        x = []\n        for itr in tsz.index:\n            x.append([pd.to_datetime(tsz.loc[itr]['Date']),tsz.loc[itr][case]])\n        tsz = pd.DataFrame(x,columns = ['Date',case])\n        tsz=tsz.set_index('Date')\n        tsz\n        if country not in time_series_dict.keys():\n            time_series_dict[country] = dict()\n        time_series_dict[country][case] = tsz","1441ad79":"rank_country = dict()\nfor country in country_dict.keys():\n    rank_country[country]=[max(time_series_dict[country]['ConfirmedCases']['ConfirmedCases']),max(time_series_dict[country]['Fatalities']['Fatalities'])]\nrank_country = sorted(rank_country.items(), key = lambda kv:(kv[1][0],kv[1][1], kv[0]),reverse = True)[:20]\n\nlabels = [y[0] for y in rank_country]\nConfirmedCases = [y[1][0] for y in rank_country]\nFatalities = [y[1][1] for y in rank_country]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, ConfirmedCases, width, label='ConfirmedCases',color = '#FFBF00')\nrects2 = ax.bar(x + width\/2, Fatalities, width, label='Fatalities',color = 'blue')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of Cases',fontsize=30, fontweight=20)\nax.set_title('COVID-19',fontsize=30, fontweight=20)\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nfig.tight_layout()\nplt.show()","bb3402f1":"color_pallete = ['#FFBF00','red']\nfor country in ['India','China','US','Italy','Spain']:\n    case_number = 1\n    for case in ['ConfirmedCases','Fatalities']:\n        plt.subplot(1,2,case_number)\n        plt.title(case, loc='center', fontsize=20, fontweight=10)\n        if case_number==2:\n            plt.ylim(bottom,top)\n        plt.plot(time_series_dict[country][case][:74], color=color_pallete[case_number-1], linewidth=3, alpha=1)\n        plt.xlabel('Date', fontsize=20)\n        plt.ylabel('Number of Cases', fontsize=20)\n        if case_number==1:\n            bottom,top = plt.ylim()\n        case_number = case_number + 1\n    plt.suptitle(country, fontsize=30, fontweight=20)\n    plt.show()","716ea421":"import xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","8c079de6":"train.Date = pd.to_datetime(train.Date)\ntest.Date = pd.to_datetime(test.Date)\ntrain['Date'] = train['Date'].dt.strftime(\"%d%m\").astype(int)\ntest['Date'] = test['Date'].dt.strftime(\"%d%m\").astype(int)","0cf78f53":"country_dict= dict()\nfor itr in range(len(train)):\n    if train.loc[itr]['Country_Region'] not in country_dict.keys():\n        country_dict[train.loc[itr]['Country_Region']]= dict()\n    if str(train.iloc[itr]['Province_State']) != 'nan':\n        if train.loc[itr]['Province_State'] not in country_dict[train.loc[itr]['Country_Region']].keys():\n            country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Province_State']] = dict()\n            country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Province_State']]['ConfirmedCases'] = []\n            country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Province_State']]['Fatalities'] = []\n        country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Province_State']]['ConfirmedCases'].append([train.loc[itr]['Date'],train.loc[itr]['ConfirmedCases']])\n        country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Province_State']]['Fatalities'].append([train.loc[itr]['Date'],train.loc[itr]['Fatalities']])\n        if str(train.loc[itr]['Province_State']) == 'nan':\n            if train.loc[itr]['Country_Region'] not in country_dict[train.loc[itr]['Country_Region']].keys():\n                country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Country_Region']] = dict()\n                country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Country_Region']]['ConfirmedCases'] = []\n                country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Country_Region']]['Fatalities'] = []\n                country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Country_Region']]['ConfirmedCases'].append([train.loc[itr]['Date'],train.loc[itr]['ConfirmedCases']])\n                country_dict[train.loc[itr]['Country_Region']][train.loc[itr]['Country_Region']]['Fatalities'].append([train.loc[itr]['Date'],train.loc[itr]['Fatalities']])","9a1dc8a9":"test_dates = []\nfor itr in range(len(test)):\n    if test.iloc[itr]['Country_Region'] == 'Afghanistan':\n        test_dates.append(test.iloc[itr]['Date'])\ntest_dates = np.array(test_dates)","73835c52":"pred_dict = dict()\nfor country in country_dict.keys():\n    pred_dict[country] = dict()\n    for province in country_dict[country].keys():\n        train_x_ConfirmedCases = train_x_Fatalities = pd.DataFrame(country_dict[country][province]['ConfirmedCases'])[0].values.reshape(-1,1)\n        train_y_ConfirmedCases = pd.DataFrame(country_dict[country][province]['ConfirmedCases'])[1].values\n        train_y_Fatalities = pd.DataFrame(country_dict[country][province]['Fatalities'])[1].values\n        test_x_ConfirmedCases = test_x_Fatalities = test_dates.reshape(-1,1)\n        pred_y_ConfirmedCases = xgb.XGBRegressor(n_estimators=500).fit(train_x_ConfirmedCases, train_y_ConfirmedCases).predict(test_x_ConfirmedCases)\n        pred_y_Fatalities = xgb.XGBRegressor(n_estimators=500).fit(train_x_Fatalities, train_y_Fatalities).predict(test_x_Fatalities)\n        pred_dict[country][province] = dict()\n        pred_dict[country][province]['ConfirmedCases'] = pred_y_ConfirmedCases\n        pred_dict[country][province]['Fatalities'] = pred_y_Fatalities","8d55a41d":"ForecastId = 1\nsubmission_out = []\nfor country in country_dict.keys():\n    for province in country_dict[country].keys():\n        for i in range(len(pred_dict[country][province]['ConfirmedCases'])):\n            submission_out.append([ForecastId,pred_dict[country][province]['ConfirmedCases'][i],pred_dict[country][province]['Fatalities'][i]])\n            ForecastId = ForecastId + 1\nsubmission_file = pd.DataFrame(submission_out,columns=['ForecastId','ConfirmedCases','Fatalities'])\nsubmission_file.to_csv('submission.csv',index = False)","b2a7ccdf":"BUILDING XGBOOST MODEL","01eaa9d5":"**LET'S VISUALIZE**","6fad11bf":"Load and Prepare the Dataset"}}