{"cell_type":{"755fd5c1":"code","257ae7ff":"code","0398d5fb":"code","93fd799a":"code","a0d301c0":"code","e8c8ec1f":"code","0c813ef1":"code","01581740":"code","050ef042":"code","b02fdeff":"code","b5a8f1b1":"code","c5924f40":"code","f4e8a476":"code","5923ca01":"code","3a3c0a14":"code","cf633d98":"code","a64a8d54":"code","f7f626c9":"code","1d9df4b4":"code","5854fb01":"code","c1b1b810":"code","fb33c224":"code","88f05c90":"code","142129ba":"markdown","296b17f9":"markdown"},"source":{"755fd5c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","257ae7ff":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')","0398d5fb":"df = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","93fd799a":"df.info()","a0d301c0":"# Check for Null Values\nis_null = df.isnull().sum()[df.isnull().sum() > 0]\nlen(is_null)","e8c8ec1f":"df.describe()","0c813ef1":"df.DEATH_EVENT.value_counts().to_frame()","01581740":"plt.figure(figsize=(15, 12))\n\nplt.subplot(2,3,1)\nsns.boxplot(x='DEATH_EVENT', y='age', data=df)\nplt.title('Distribution of Age')\n\nplt.subplot(2,3,2)\nsns.boxplot(x='DEATH_EVENT', y='creatinine_phosphokinase', data=df)\nplt.title('Distribution of creatinine_phosphokinase')\n\nplt.subplot(2,3,3)\nsns.boxplot(x='DEATH_EVENT', y='ejection_fraction', data=df)\nplt.title('Distribution of ejection_fraction')\n\nplt.subplot(2,3,4)\nsns.boxplot(x='DEATH_EVENT', y='platelets', data=df)\nplt.title('Distribution of platelets')\n\nplt.subplot(2,3,5)\nsns.boxplot(x='DEATH_EVENT', y='serum_creatinine', data=df)\nplt.title('Distribution of serum_creatinine')\n\nplt.subplot(2,3,6)\nsns.boxplot(x='DEATH_EVENT', y='serum_sodium', data=df)\nplt.title('Distribution of serum_sodium');","050ef042":"plt.figure(figsize=(15, 7))\n\nplt.subplot(2,2,1)\nsns.distplot(df[df['DEATH_EVENT'] == 1]['age'], label='DEATH_EVENT TRUE')\nsns.distplot(df[df['DEATH_EVENT'] == 0]['age'], label='DEATH_EVENT FALSE')\nplt.axvline(df[df['DEATH_EVENT'] == 1]['age'].mean(), 1, 0, color='black', label='Mean for TRUE')\nplt.axvline(df[df['DEATH_EVENT'] == 0]['age'].mean(), 1, 0, color='blue', label='Mean for FALSE')\nplt.ylim(0,0.04)\nplt.legend()\n\nplt.subplot(2,2,2)\nsns.distplot(df[df['DEATH_EVENT'] == 1]['time'], label='DEATH_EVENT TRUE')\nsns.distplot(df[df['DEATH_EVENT'] == 0]['time'], label='DEATH_EVENT FALSE')\nplt.axvline(df[df['DEATH_EVENT'] == 1]['time'].mean(), 1, 0, color='black', label='Mean for TRUE')\nplt.axvline(df[df['DEATH_EVENT'] == 0]['time'].mean(), 1, 0, color='blue', label='Mean for FALSE')\nplt.legend()\n\nplt.subplot(2,2,3)\nsns.distplot(df[df['sex'] == 1]['age'], label='Men')\nsns.distplot(df[df['sex'] == 0]['age'], label='Women')\nplt.axvline(df[df['sex'] == 1]['age'].mean(), 1, 0, color='black', label='Mean for Men')\nplt.axvline(df[df['sex'] == 0]['age'].mean(), 1, 0, color='blue', label='Mean for Women')\nplt.ylim(0,0.04)\nplt.legend()\n\nplt.subplot(2,2,4)\nsns.distplot(df[df['DEATH_EVENT'] == 1]['ejection_fraction'], label='SMOKER TRUE')\nsns.distplot(df[df['DEATH_EVENT'] == 0]['ejection_fraction'], label='SMOKER FALSE')\nplt.axvline(df[df['DEATH_EVENT'] == 1]['ejection_fraction'].mean(), 1, 0, color='black', label='Mean for TRUE')\nplt.axvline(df[df['DEATH_EVENT'] == 0]['ejection_fraction'].mean(), 1, 0, color='blue', label='Mean for FALSE')\nplt.legend();","b02fdeff":"from scipy import stats\ndef welch_test(a, b):\n    t_value, p_value = stats.ttest_ind(a, b, equal_var=False)\n    if p_value > 0.05:\n        print('Null-Hypotheses cannot be rejected - both groups are equal')\n    else:\n        print('Null-Hypotheses can be rejected - significant difference between the two groups')\n    return (t_value, p_value)","b5a8f1b1":"t, p = welch_test(df[df['sex'] == 0]['age'], df[df['sex'] == 1]['age'])\nprint(f'T-Value: {t}, P-Value: {p}')","c5924f40":"t, p = welch_test(df[df['DEATH_EVENT'] == 0]['ejection_fraction'], df[df['smoking'] == 1]['ejection_fraction'])\nprint(f'T-Value: {t}, P-Value: {p}')","f4e8a476":"plt.figure(figsize=(16, 6))\nheatmap = sns.heatmap(df.corr(), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);","5923ca01":"contigency = pd.crosstab(df['sex'], df['smoking'])\nsns.heatmap(contigency, annot=True, cmap=\"YlGnBu\");\ncontigency","3a3c0a14":"contigency = pd.crosstab(df['DEATH_EVENT'], df['smoking'])\nsns.heatmap(contigency, annot=True, cmap=\"YlGnBu\");\ncontigency","cf633d98":"from sklearn import preprocessing\nX_data = df.drop(['DEATH_EVENT'], axis=1).values\ny_data = df['DEATH_EVENT'].values\nX_data = preprocessing.StandardScaler().fit(X_data).transform(X_data)\nX_data[0:2]","a64a8d54":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.3, random_state=4)\nprint('Train set:', X_train.shape,  y_train.shape)\nprint('Test set:', X_test.shape,  y_test.shape)","f7f626c9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nC_values = np.arange(0.1, 10, 0.1)\naccuracy = np.zeros(len(C_values))\nclassification_reports = []\nconfusion_matrixes = []\n\nfor i, c in enumerate(C_values):\n    LR = LogisticRegression(C=c, solver='liblinear').fit(X_train, y_train)\n    yhat = LR.predict(X_test)\n    accuracy[i] = metrics.accuracy_score(yhat, y_test)\n    classification_reports.append(metrics.classification_report(y_test, yhat))\n    confusion_matrixes.append(metrics.confusion_matrix(y_test, yhat))\n\nprint('Maximum Accuracy achieved:', round(accuracy.max(), 4), 'with', C_values[accuracy.argmax()])\nprint(f'\\nClassification Report:\\n{classification_reports[accuracy.argmax()]}')\nprint(f'Accuracies: {accuracy[:3]}...')","1d9df4b4":"sns.heatmap(confusion_matrixes[accuracy.argmax()], annot=True);","5854fb01":"plt.plot(C_values, accuracy)\nplt.title('Accuracy for each K-Nearest-Neighbour')\nplt.xlabel('No. of nearest Neighbours')\nplt.ylabel('Accuracy');","c1b1b810":"# Create K-Nearest Neighbour and calculate accuracy for different 'Ks'\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\nKs = 25\naccuracy = np.zeros((Ks-1))\nclassification_reports = []\nconfusion_matrixes = []\n\nfor n in range(1, Ks):\n    # Train Model and Predict\n    clm = KNeighborsClassifier(n_neighbors=n).fit(X_train, y_train)\n    yhat = clm.predict(X_test)\n    accuracy[n-1] = metrics.accuracy_score(y_test, yhat)\n    classification_reports.append(metrics.classification_report(y_test, yhat))\n    confusion_matrixes.append(metrics.confusion_matrix(y_test, yhat))\n\nbest_K = accuracy.argmax()+1\nprint('Maximum Accuracy achieved:', round(accuracy.max(), 4), 'with', best_K)\nprint(f'\\nClassification Report:\\n{classification_reports[best_K-1]}')\nprint(f'Accuracies: {accuracy}')","fb33c224":"sns.heatmap(confusion_matrixes[best_K-1], annot=True);","88f05c90":"plt.plot(range(1, Ks), accuracy)\nplt.title('Accuracy for each K-Nearest-Neighbour')\nplt.xlabel('No. of nearest Neighbours')\nplt.ylabel('Accuracy');","142129ba":"# K-Nearest-Neighbor","296b17f9":"# Logistic Regression"}}