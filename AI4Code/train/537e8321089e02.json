{"cell_type":{"eecb44cd":"code","47f0b4dc":"code","c038cde4":"code","fcbd4c4d":"code","1c99c391":"code","33c9a47f":"code","2378a0fb":"code","5aa38cc8":"code","1803c5fd":"code","4e5e1d33":"code","408118c1":"code","62846d6a":"code","dd96d444":"code","e8b665af":"code","adccea99":"code","ce881ecc":"code","8bc9d3fe":"code","4d39816d":"code","680296f4":"code","235f7570":"code","bd7659c6":"code","46c7d04c":"code","39842769":"code","85abd5de":"code","679e3979":"code","a54454a3":"code","4524fc05":"code","7ccfcf54":"code","d0c10adf":"code","4402290a":"code","73fafe17":"code","ac983277":"code","d1ab463d":"code","e7aec81b":"code","0d539692":"code","47392978":"code","de4c38b2":"code","2e6e8f55":"code","00191f76":"code","4e1390fb":"code","15ed7734":"markdown","20546cf6":"markdown","14e0cb6f":"markdown","fc880d34":"markdown","d2ab1fd0":"markdown","83bdedc6":"markdown","aa7b7c2d":"markdown","6244ae3b":"markdown","d6cbb96e":"markdown"},"source":{"eecb44cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47f0b4dc":"#import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns","c038cde4":"#reading data\ntraining_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntesting_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ncombined_data1 = [training_data, testing_data]\n\nfor data in combined_data1:\n    print('\\n',data.info())","fcbd4c4d":"#checking data\ndef show_me_data(combined_data):\n    dt = ['Train Data','Test Data']\n    for name,data in zip(dt,combined_data):\n        print(name)\n        display(data.head())\n\nshow_me_data(combined_data1)","1c99c391":"training_data.corr()['Survived'].sort_values(ascending = False)","33c9a47f":"#feature extracting from Name column\nfor data in combined_data1:\n    data['title'] = data['Name'].apply(lambda x: x[x.find(',')+2:x.find('.')])\n    print(data['title'].value_counts())\n    print('\\n','='*50)","2378a0fb":"#just converting rarely occuring titles to other\ndef converttitle(x):\n    if x not in ['Mr','Miss','Mrs','Master']:\n        return 'other'\n    else:\n        return x\n\nfor data in combined_data1:\n    data['title'] = data['title'].apply(converttitle)\n    print(data['title'].value_counts())\n    print('\\n','='*50)\n    ","5aa38cc8":"#checking whether passenger is travelling alone or not\nfor data in combined_data1:\n    data['family_members'] = data['SibSp'] + data['Parch']\n    \n    data['aboard_alone'] = data['family_members'].apply(lambda x: 'yes' if x == 0 else 'no')\n    \n    print(data.aboard_alone.value_counts())","1803c5fd":"def pclass(x):\n        if x==1:\n            return 'Upper'\n        elif x==2:\n            return 'Middle'\n        else:\n            return 'Lower'\n\nfor data in combined_data1:\n    data['Pclass'] = data['Pclass'].apply(pclass)\n    print(data.Pclass.value_counts(),'\\n')","4e5e1d33":"show_me_data(combined_data1)","408118c1":"train_data = training_data[['Survived','Pclass','Sex','Age','Fare','title','Embarked','aboard_alone']]\ntest_data = testing_data[['Pclass','Sex','Age','Fare','title','Embarked','aboard_alone']]\ncombined_data = [train_data, test_data]\n\nfor data in combined_data:\n    print(data.isnull().sum(),'\\n')","62846d6a":"#for age\ntrain_data.Age.fillna(train_data['Age'].median(), inplace =True)\ntest_data.Age.fillna(test_data['Age'].median(), inplace =True)\n\n#for embarked\ntrain_data.Embarked.fillna('S', inplace =True)\n\n#for Fare\ntest_data.Fare.fillna(test_data['Fare'].mean(), inplace =True)\n\nfor data in combined_data:\n    print(data.isnull().sum(),'\\n')","dd96d444":"sns.set(style=\"darkgrid\")\nfig, ax = plt.subplots(2,2, figsize= (10,10))\n\nsns.boxplot(y= 'Age', data= train_data, ax =ax[0,0])\nax[0,0].set_title('Training Age')\n\nsns.distplot(train_data['Age'], bins= 10, ax =ax[0,1])\nax[0,1].set_xticks(range(0,100,10))\n\nsns.boxplot(y= 'Age', data= test_data, ax =ax[1,0])\nax[1,1].set_title('Testing Age')\n\nsns.distplot(train_data['Age'],bins= 10, ax =ax[1,1])\nax[1,1].set_xticks(range(0,100,10))\n\nplt.show()","e8b665af":"for data in combined_data:\n    data['Age'] = pd.cut(data['Age'], bins = [0,20,40,60,100], labels = ['child','young','adult','old'])\n    print(data.Age.value_counts(),'\\n')","adccea99":"fig, ax = plt.subplots(2,2, figsize= (10,10))\n\nsns.boxplot(y= 'Fare', data= train_data, ax =ax[0,0])\nax[0,0].set_title('Training Fare')\n\nsns.distplot(train_data['Fare'], ax =ax[0,1])\n\nsns.boxplot(y= 'Fare', data= test_data, ax =ax[1,0])\nax[1,0].set_title('Testing Fare')\n\nsns.distplot(test_data['Fare'], ax =ax[1,1])\n\nplt.show()","ce881ecc":"def fare(x):\n        if x>300:\n            return mean\n        else:\n            return x\n\nfor data in combined_data:\n    \n    mean = data.drop(data[data['Fare']>300].index)['Fare'].mean()\n    data['Fare'] = data['Fare'].apply(fare)","8bc9d3fe":"fig, ax = plt.subplots(2,2, figsize= (10,10))\n\nsns.boxplot(y= 'Fare', data= train_data, ax =ax[0,0])\nax[0,0].set_title('Training Fare')\nax[0,0].set_yticks(range(0,275,25))\n\nsns.distplot(train_data['Fare'], ax =ax[0,1])\nax[0,1].set_xticks(range(0,275,25))\n\nsns.boxplot(y= 'Fare', data= test_data, ax =ax[1,0])\nax[1,0].set_title('Testing Fare')\nax[1,0].set_yticks(range(0,275,25))\n\nsns.distplot(test_data['Fare'], ax =ax[1,1])\nax[1,1].set_xticks(range(0,275,25))\n\nplt.show()","4d39816d":"for data in combined_data:\n    \n    data['Fare'] = pd.cut(data['Fare'], bins = [0,20,50,100,300], labels = ['Eco','business','prime','Deluxe'])\n    print(data.Fare.value_counts())","680296f4":"show_me_data(combined_data)","235f7570":"final_train = pd.get_dummies(train_data, drop_first= True)\ndisplay('Train',final_train)\nfinal_test = pd.get_dummies(test_data, drop_first= True)\ndisplay('Test',final_test)","bd7659c6":"final_train.corr()['Survived'].sort_values(ascending = False)","46c7d04c":"#import Machine Learning libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nimport sklearn.metrics as sm","39842769":"x = final_train.drop('Survived', axis = 1)\ny = final_train['Survived']","85abd5de":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0, stratify = y)","679e3979":"lr_model = LogisticRegression()\nlr_model.fit(x_train,y_train)\nlr_predict = lr_model.predict(x_test)\n\nprint(lr_predict[:5])\nprint(y_test.head())\n","a54454a3":"sm.r2_score(y_test,lr_predict)","4524fc05":"print(sm.classification_report(y_test,lr_predict))","7ccfcf54":"sns.heatmap(sm.confusion_matrix(y_test,lr_predict), annot=True, cmap=\"YlGnBu\")\nplt.show()","d0c10adf":"dt_model = DecisionTreeClassifier(random_state = 0)\nclf = GridSearchCV(dt_model, param_grid = {'criterion':('gini', 'entropy'),\n                                           'max_depth':[2,3,4,5,6]},\n                   cv=5)\nclf.fit(x_train,y_train)\nprint(clf.best_params_)\nprint(clf.best_score_)\n\n#dt_model.fit(x_train,y_train)\ndt_predict = clf.predict(x_test)\n\n#print(dt_predict[:5])\n#print(y_test.head())","4402290a":"sm.r2_score(y_test,dt_predict)","73fafe17":"print(sm.classification_report(y_test,dt_predict))","ac983277":"sns.heatmap(sm.confusion_matrix(y_test,dt_predict), annot=True, cmap=\"YlGnBu\")\nplt.show()","d1ab463d":"rf_model = RandomForestClassifier(random_state=0)\nrf_clf = GridSearchCV(rf_model, param_grid = {'n_estimators': [200, 300,400,500],\n                                              'max_depth' : [3,4,5,6,7],\n                                              'criterion' :['gini', 'entropy']},\n                     cv=3)\nrf_clf.fit(x_train,y_train)\nprint(rf_clf.best_params_)\nprint(rf_clf.best_score_)\n\nrf_predict = rf_clf.predict(x_test)\n#rf_model.fit(x_train,y_train)\n#rf_predict = rf_model.predict(x_test)\n\n#print(rf_predict[:5])\n#print(y_test.head())","e7aec81b":"print(sm.classification_report(y_test,rf_predict))","0d539692":"sm.r2_score(y_test,rf_predict)","47392978":"sns.heatmap(sm.confusion_matrix(y_test,rf_predict), annot=True, cmap=\"YlGnBu\")\nplt.show()","de4c38b2":"model = RandomForestClassifier(random_state=0,\n                               max_depth = 6,\n                               n_estimators = 200)\nmodel.fit(x,y)\npred = (model.predict(final_test))","2e6e8f55":"submission = pd.DataFrame({\n                            'PassengerId': testing_data['PassengerId'],\n                            'Survived': pred\n})","00191f76":"submission","4e1390fb":"submission.to_csv('Submission.csv', index=False)","15ed7734":"## Step 4 - Train Data","20546cf6":"# Decision Tree","14e0cb6f":"## Data Dictionary:\n\n* survival --->\tSurvival \n* pclass --->\tTicket class \n* sex --->\tSex\n* Age --->\tAge in years\n* sibsp --->\t# of siblings \/ spouses aboard the Titanic\t\n* parch --->\t# of parents \/ children aboard the Titanic\t\n* ticket --->\tTicket number\t\n* fare --->\tPassenger fare\t\n* cabin --->\tCabin number\t\n* embarked --->\tPort of Embarkation\n\n\n\n## Variable Notes:\n\n**pclass:**  A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\n**age:**  Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n**sibsp:**  The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n**parch:**  The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n","fc880d34":"## Random Forest","d2ab1fd0":"### Have to remove outlier and make categorial because this is not normalised.","83bdedc6":"# Logistic Regression","aa7b7c2d":"## Step 2 - Analyzing Data","6244ae3b":"# Full train data training","d6cbb96e":"## Step 1 - Collecting Data"}}