{"cell_type":{"d37a6912":"code","689546b6":"code","f901dba7":"code","13dd0532":"code","f582fff5":"code","842cb4da":"code","445d7100":"code","10723302":"code","c554fd14":"code","b8f8ebd8":"code","2bf22b7f":"code","17f0c496":"code","aada8e80":"code","482c45e1":"code","8958b556":"code","be0ffcbc":"code","9f2097f2":"code","d280f4a0":"code","8a48222e":"code","e8da8ad8":"code","5d8a4e50":"code","dc99d148":"markdown","a5cc17fb":"markdown","3412589f":"markdown"},"source":{"d37a6912":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","689546b6":"#Load pokemon data\npokemon = pd.read_csv(\"..\/input\/pokemon-challenge\/pokemon.csv\")\ncolumns = pokemon.columns\nrename_dict = {}\n\nfor col in columns:\n    rep = col\n    rep = rep.replace(\" \", \"_\")\n    rep = rep.replace(\".\", \"\")\n    rename_dict[col] = rep\n\npokemon.rename(columns=rename_dict, inplace=True)\npokemon[\"mix_type\"] = pokemon[\"Type_1\"] + \"-\" + pokemon[\"Type_2\"]","f901dba7":"#Load combats data\ncombats = pd.read_csv(\"..\/input\/pokemon-challenge\/combats.csv\")\ncombats[\"Winner\"] = (combats[\"Winner\"] == combats[\"First_pokemon\"])","13dd0532":"m1 = combats.merge(pokemon, left_on=\"First_pokemon\", right_on=\"#\", how=\"left\")\nm2 = m1.merge(pokemon, left_on=\"Second_pokemon\", right_on=\"#\", how=\"left\", suffixes=(\"_f\", \"_s\"))","f582fff5":"#Check pokemon null value\nlength = pokemon.shape[0] * 1.0\n\nprint(\"Column\\t null(%)\")\nfor col in pokemon.columns:\n    print(\"%s\\t%6.3f\" % (col, pokemon[col].isnull().sum() \/ length))","842cb4da":"attribute = [\"HP\", \"Attack\", \"Defense\", \"Sp_Atk\", \"Sp_Def\", \"Speed\"]","445d7100":"#Attribute to Type_1 and Type_2 boxplot\nfor i in [1, 2]:\n    tp = \"Type_\" + str(i)\n    for col in attribute:\n        plt.figure(figsize=(20, 5))\n        ax = sns.boxplot(x=tp, y=col, data=pokemon)\n        ax.set_title(\"Boxplot for %s - %s\" % (col, tp))\n        plt.show()","10723302":"#Attribute to mix_type boxplot\nfor col in attribute:\n    plt.figure(figsize=(20, 20))\n    ax = sns.boxplot(y=\"mix_type\", x=col, data=pokemon)\n    ax.set_title(\"Boxplot for %s - (Type_1-Type_2)\" %col)\n    plt.show()","c554fd14":"#Attribute to Legendary boxplot\nfor col in attribute:\n    plt.figure(figsize=(20, 5))\n    ax = sns.boxplot(x=\"Legendary\", y=col, data=pokemon)\n    ax.set_title(\"Boxplot for %s - Legendary\" % (col))\n    plt.show()","b8f8ebd8":"#Attribute to Generation boxplot\nfor col in attribute:\n    plt.figure(figsize=(20, 5))\n    ax = sns.boxplot(x=\"Generation\", y=col, data=pokemon)\n    ax.set_title(\"Boxplot for %s - Generation\" % (col))\n    plt.show()","2bf22b7f":"#Distribution of Legendary pokemon in each Generation\nplt.figure(figsize=(20, 5))\nsns.countplot(x=\"Generation\", hue=\"Legendary\", data=pokemon)\nplt.show()","17f0c496":"#Type_1 winrate distribution\nindex = pokemon[\"Type_1\"].unique()\ndf = pd.DataFrame(0, index=index, columns=[\"win_count\", \"fight_count\", \"win_rate\"])\n\nfor idx, row in m2.iterrows():\n    type1_f = row[\"Type_1_f\"]\n    type1_s = row[\"Type_1_s\"]\n\n    if(row[\"Winner\"]):\n        df.loc[type1_f, \"win_count\"] += 1\n        df.loc[type1_f, \"fight_count\"] += 1\n        df.loc[type1_s, \"fight_count\"] += 1\n    else:\n        df.loc[type1_s, \"win_count\"] += 1\n        df.loc[type1_s, \"fight_count\"] += 1\n        df.loc[type1_f, \"fight_count\"] += 1\ndf[\"win_rate\"] = 100.0 * df[\"win_count\"] \/ df[\"fight_count\"]\n\nplt.figure(figsize=(20, 5))\nax = sns.barplot(x=df.index, y=df.win_rate, order=df.sort_values(by=[\"win_rate\"]).index)\nax.set_title(\"Winrate of each category in Type_1\")\nplt.show()","aada8e80":"#Type_2 winrate distribution\nindex = pokemon[\"Type_2\"].unique()\ndf = pd.DataFrame(0, index=index, columns=[\"win_count\", \"fight_count\", \"win_rate\"])\n\nfor idx, row in m2.iterrows():\n    type2_f = row[\"Type_2_f\"]\n    type2_s = row[\"Type_2_s\"]\n\n    if(row[\"Winner\"]):\n        df.loc[type2_f, \"win_count\"] += 1\n        df.loc[type2_f, \"fight_count\"] += 1\n        df.loc[type2_s, \"fight_count\"] += 1\n    else:\n        df.loc[type2_s, \"win_count\"] += 1\n        df.loc[type2_s, \"fight_count\"] += 1\n        df.loc[type2_f, \"fight_count\"] += 1\ndf[\"win_rate\"] = 100.0 * df[\"win_count\"] \/ df[\"fight_count\"]\n\nplt.figure(figsize=(20, 5))\nax = sns.barplot(x=df.index, y=df.win_rate, order=df.sort_values(by=[\"win_rate\"]).index)\nax.set_title(\"Winrate of each category in Type_2\")\nplt.show()","482c45e1":"#mix_type winrate distribution\nindex = pokemon[\"mix_type\"].unique()\ndf = pd.DataFrame(0, index=index, columns=[\"win_count\", \"fight_count\", \"win_rate\"])\n\nfor idx, row in m2.iterrows():\n    mix_type_f = row[\"mix_type_f\"]\n    mix_type_s = row[\"mix_type_s\"]\n\n    if(row[\"Winner\"]):\n        df.loc[mix_type_f, \"win_count\"] += 1\n        df.loc[mix_type_f, \"fight_count\"] += 1\n        df.loc[mix_type_s, \"fight_count\"] += 1\n    else:\n        df.loc[mix_type_s, \"win_count\"] += 1\n        df.loc[mix_type_s, \"fight_count\"] += 1\n        df.loc[mix_type_f, \"fight_count\"] += 1\ndf[\"win_rate\"] = 100.0 * df[\"win_count\"] \/ df[\"fight_count\"]\n\nplt.figure(figsize=(20, 20))\nax = sns.barplot(x=df.win_rate, y=df.index, order=df.sort_values(by=[\"win_rate\"]).index)\nax.set_title(\"Winrate of each category in mix_type\")\nplt.show()","8958b556":"#Generation winrate distribution\nindex = pokemon[\"Generation\"].unique()\ndf = pd.DataFrame(0, index=index, columns=[\"win_count\", \"fight_count\", \"win_rate\"])\n\nfor idx, row in m2.iterrows():\n    generation_f = row[\"Generation_f\"]\n    generation_s = row[\"Generation_s\"]\n\n    if(row[\"Winner\"]):\n        df.loc[generation_f, \"win_count\"] += 1\n        df.loc[generation_f, \"fight_count\"] += 1\n        df.loc[generation_s, \"fight_count\"] += 1\n    else:\n        df.loc[generation_s, \"win_count\"] += 1\n        df.loc[generation_s, \"fight_count\"] += 1\n        df.loc[generation_f, \"fight_count\"] += 1\ndf[\"win_rate\"] = 100.0 * df[\"win_count\"] \/ df[\"fight_count\"]\n\nax = sns.barplot(x=df.index, y=df.win_rate, order=df.sort_values(by=[\"win_rate\"]).index)\nax.set_title(\"Winrate of each category in Generation\")\nplt.show()","be0ffcbc":"#Attribute - Winner scatterplot\nfor col in attribute:\n    x = col + \"_f\"\n    y = col + \"_s\"\n\n    plt.figure(figsize=(10, 10))\n    ax = sns.scatterplot(x=x, y=y, hue=\"Winner\", data=m2)\n    ax.set_title(\"%s - Winner scatterplot\" % col)\n    plt.show()","9f2097f2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb","d280f4a0":"def target_encoding(combats, col):\n    replace_dict = {}\n\n    res = combats.groupby([col])[\"Winner\"].sum() \/ combats.groupby([col]).size()\n    for idx, val in res.items():\n        replace_dict[idx] = val\n\n    combats[col].replace(replace_dict, inplace=True)\n\ndef label_encoding(pokemon, col):\n    le = LabelEncoder()\n    pokemon[col] = le.fit_transform(pokemon[col])\n    \ndef run_cv_lgb(x, y):\n    params = {\n            \"objective\": \"binary\",\n            \"num_leaves\": 31,\n            \"bagging_freq\": 1,\n            \"bagging_fraction\": 0.1,\n            \"feature_fraction\": 0.1\n            }\n    train_data = lgb.Dataset(x, label=y)\n    eval_hist = lgb.cv(params=params, train_set=train_data, metrics=\"auc\")\n    print(\"Lightgbm best accuracy: %f\" % max(eval_hist[\"auc-mean\"]))\n\ndef run_cv_lr(x, y):\n    n_splits = 5\n    skf = StratifiedKFold(n_splits=n_splits)\n    mean = 0.0\n\n    for train_idx, test_idx in skf.split(x, y):\n        x_train, x_test = x.iloc[train_idx], x.iloc[test_idx]\n        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n\n        lr = LogisticRegression(solver=\"lbfgs\", max_iter=1000)\n        lr.fit(x_train, y_train)\n\n        score = lr.score(x_test, y_test)\n        mean += score\n        print(score)\n\n    print(\"Logistic Regression mean accuracy: %f\" % (mean \/ n_splits))\n\ndef run_cv_dtc(x, y):\n    n_splits = 5\n    skf = StratifiedKFold(n_splits=n_splits)\n    mean = 0.0\n\n    for train_idx, test_idx in skf.split(x, y):\n        x_train, x_test = x.iloc[train_idx], x.iloc[test_idx]\n        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n\n        dtc = DecisionTreeClassifier()\n        dtc.fit(x_train, y_train)\n\n        score = dtc.score(x_test, y_test)\n        mean += score\n        print(score)\n\n    print(\"Decision Tree mean accuracy: %f\" % (mean \/ n_splits))","8a48222e":"pokemon.drop(columns=[\"Name\"], axis=1, inplace=True)\npokemon.fillna(\"nan\", inplace=True)\n\nlabel_encoding(pokemon, \"Type_1\")\nlabel_encoding(pokemon, \"Type_2\")\nlabel_encoding(pokemon, \"mix_type\")\n\nm1 = combats.merge(pokemon, left_on=\"First_pokemon\", right_on=\"#\", how=\"left\")\nm2 = m1.merge(pokemon, left_on=\"Second_pokemon\", right_on=\"#\", how=\"left\", suffixes=(\"_f\", \"_s\"))\nm2[\"Speed_diff\"] = m2[\"Speed_f\"] - m2[\"Speed_s\"]\n\ny = m2[\"Winner\"]\nm2.drop(columns=[\"Winner\",\"#_f\", \"#_s\"], inplace=True, axis=1)","e8da8ad8":"#Predict with the whole data\nrun_cv_lr(m2, y)\nrun_cv_dtc(m2, y)\nrun_cv_lgb(m2, y)","5d8a4e50":"#Predict with only \"Speed_diff\" column\nrun_cv_lr(m2[[\"Speed_diff\"]], y)\nrun_cv_dtc(m2[[\"Speed_diff\"]], y)\nrun_cv_lgb(m2[[\"Speed_diff\"]], y)","dc99d148":"# Pokemon EDA and combats prediction\n\n## PART I: EDA ","a5cc17fb":"## PART II: Combats Prediction\n\nI'm trying to train with two settings:\n- whole data\n- only with created feature: \"Speed_diff\"","3412589f":"There's a linear relationship between Speed and Winner.\n> **There is no martial art is indefectible, while the fastest speed is the only way for long success.**\n\n![](https:\/\/pic.pimg.tw\/feichih\/1444961608-2886274451.jpg)"}}