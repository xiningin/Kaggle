{"cell_type":{"dc58b9dd":"code","d87ce2d9":"code","5e9f65e2":"code","48d6e08a":"code","31ceb287":"code","03619be4":"code","0eb66d37":"code","553fd1c3":"code","e89f64e6":"code","1e3d74af":"code","16f81b41":"code","de67a3e3":"code","b6594559":"code","209384f5":"code","65dc88c0":"code","f353c8e3":"code","83d5c18a":"code","b44ee285":"code","cb2a54c9":"code","48329640":"code","c52d81ae":"code","7ce5ef48":"code","9b5ad8f8":"code","f7b9fd3f":"code","ee0fec4f":"code","00b2bbe4":"code","76a92bc2":"code","ae117a55":"code","1425ad03":"code","ff5d250d":"code","f6416f18":"code","87131007":"code","b43ab665":"code","72a06856":"code","10376f95":"code","56056b67":"code","a27f7dbd":"code","8193db9c":"code","d9da5c80":"markdown","3c820578":"markdown","b2a2e8e7":"markdown","a0abeb55":"markdown","9a63e038":"markdown","34405c31":"markdown","4899c02d":"markdown","82fafc9a":"markdown","bd513e8d":"markdown","d89d2605":"markdown","774685ed":"markdown","f4fdbf4e":"markdown","00a7305f":"markdown","bbd13d66":"markdown","c86496c5":"markdown","48d14c88":"markdown","57c9d763":"markdown","11cb1edd":"markdown","ff645552":"markdown","11712d89":"markdown"},"source":{"dc58b9dd":"import numpy as np \nimport pandas as pd\n\nimport plotly.plotly as py\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d87ce2d9":"deliveries = pd.read_csv('..\/input\/deliveries.csv')\nmatches = pd.read_csv('..\/input\/matches.csv')","5e9f65e2":"s_man_of_match = (matches.groupby(matches.player_of_match).player_of_match.count().\n                  sort_values(ascending=False).head(15))\n\ndf_man_of_match =(s_man_of_match.to_frame().rename\n                  (columns = {\"player_of_match\": \"times\"}).reset_index())\n\ncen = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ncen = cen[cen['batsman_runs']>=100]\ncen = cen.groupby(['batsman']).agg({'count'})\ncen.columns = cen.columns.droplevel()\ncen = cen.sort_values(by='count',ascending=False).reset_index()\n\nhalf_cen = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\nhalf_cen = half_cen[half_cen['batsman_runs']>=50]\nhalf_cen = half_cen[half_cen['batsman_runs']<100]\nhalf_cen = half_cen.groupby(['batsman']).agg({'count'})\nhalf_cen.columns = half_cen.columns.droplevel()\nhalf_cen = half_cen.sort_values(by='count',ascending=False).reset_index()\n\ndf_big = pd.merge(cen,half_cen, on='batsman',how='right')\ndf_big = df_big.fillna(0)\n\ndf_strike_rate = deliveries.groupby(['batsman']).agg({'ball':'count','batsman_runs':'mean'}).sort_values(by='batsman_runs',ascending=False)\ndf_strike_rate.rename(columns ={'batsman_runs' : 'strike rate'}, inplace=True)\n\ndf_runs_per_match = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ndf_total_runs = df_runs_per_match.groupby(['batsman']).agg({'sum' ,'mean','count'})\ndf_total_runs.rename(columns ={'sum' : 'batsman run','count' : 'match count','mean' :'average score'}, inplace=True)\ndf_total_runs.columns = df_total_runs.columns.droplevel()\n\ndf_sixes = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==6].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_four = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==4].groupby(['batsman']).agg({'batsman_runs':'count'})\n\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(df_strike_rate,df_total_runs, left_index=True, right_index=True),\n                                    df_sixes, left_index=True, right_index=True),df_four, left_index=True, right_index=True)\n\ndf_batsman_stat.rename(columns = {'ball' : 'Ball', 'strike rate':'Strike Rate','batsman run' : 'Batsman Run','match count' : 'Match Count',\n                                  'average score' : 'Average score' ,'batsman_runs_x' :'Six','batsman_runs_y':'Four'},inplace=True)\ndf_batsman_stat['Strike Rate'] = df_batsman_stat['Strike Rate']*100\ndf_batsman_stat = df_batsman_stat.sort_values(by='Batsman Run',ascending=False).reset_index()\n\nbatsman_stats = pd.merge(df_batsman_stat,df_big, on='batsman',how='left').fillna(0)\nbatsman_stats.rename(columns = {'count_x' : '100s', 'count_y' : '50s'},inplace=True)","48d6e08a":"condition_catch = (deliveries.dismissal_kind == 'caught')\ncondition_run= (deliveries.dismissal_kind == 'run out')\ncondition_stump= (deliveries.dismissal_kind == 'stumped')\ncondition_caught_bowled = (deliveries.dismissal_kind == 'caught and bowled')\n\ns_catch = deliveries.loc[condition_catch,:].groupby(deliveries.fielder).dismissal_kind.count().sort_values(ascending=False)\ns_run = deliveries.loc[condition_run,:].groupby(deliveries.fielder).dismissal_kind.count().sort_values(ascending=False)\ns_stump = deliveries.loc[condition_stump,:].groupby(deliveries.fielder).dismissal_kind.count().sort_values(ascending=False)\ns_caught_bowled = deliveries.loc[condition_caught_bowled,:].groupby(deliveries.bowler).dismissal_kind.count().sort_values(ascending=False)\n\ndf_catch= s_catch.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'catch'})\ndf_run= s_run.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'run_out'})\ndf_stump= s_stump.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'stump'})\ndf_caught_bowled = s_caught_bowled.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'caught and bowled'})                                                                                                                           \n                                                                                                                           \ndf_field = pd.merge(pd.merge(df_catch,df_run,on='fielder', how='outer'),df_stump,on='fielder',how='outer')\nfield_stats = df_field[~df_field['fielder'].str.contains(\"(sub)\")].reset_index().drop(['index'],axis=1).fillna(0)","31ceb287":"condition = ((deliveries.dismissal_kind.notnull()) &(deliveries.dismissal_kind != 'run out')&\n            (deliveries.dismissal_kind != 'retired hurt' )&(deliveries.dismissal_kind != 'hit wicket') \n            &(deliveries.dismissal_kind != 'obstructing the field')&(deliveries.dismissal_kind != 'caught and bowled'))\n        \ndf_bowlers = deliveries.loc[condition,:].groupby(deliveries.bowler).dismissal_kind.count().sort_values(ascending=False).reset_index()\ndf_bowlers = pd.merge(df_bowlers,df_caught_bowled , on='bowler',how='left').fillna(0)\n\nhigh=deliveries.groupby(['match_id', 'bowler']).agg({'total_runs':'sum'}).reset_index()\n\nover_count=deliveries.groupby(['match_id', 'bowler','over']).agg({'total_runs':'sum'}).reset_index()\novers = over_count.groupby(['match_id','bowler']).agg({'over':'count'}).reset_index()\novers = overs[overs['over']>=2]\n\nbowlers = pd.merge(high,overs,on=['match_id', 'bowler'], how='right')\nbowlers['economy'] = bowlers['total_runs']\/bowlers['over']\nbowlers['eco_range'] = pd.cut(bowlers['economy'], [0, 4, 5, 6, 9, 10, 11, 30], labels=['below4', '4-5', '5-6', '6-9','9-10','10-11','above11'])\n\nbowlers = pd.concat([bowlers,pd.get_dummies(bowlers['eco_range'], prefix='eco')],axis=1)\neconomy_rates=bowlers.groupby(['bowler']).agg({'eco_below4':'sum','eco_4-5':'sum','eco_5-6':'sum','eco_6-9':'sum','eco_9-10':'sum','eco_10-11':'sum','eco_above11':'sum'}).reset_index()\n\nmaiden_over = over_count[over_count['total_runs']==0]\nmaidens = maiden_over['bowler'].value_counts().to_frame().reset_index().rename({'index':'bowler','bowler':'maiden_overs'},axis=1)\n\nhauls=deliveries.groupby(['match_id', 'bowler']).agg({'player_dismissed':'count'}).reset_index()\nhauls = hauls[hauls['player_dismissed']>=4]\nhauls['haul'] = pd.cut(hauls['player_dismissed'], [0,4,8], labels=['4', '5'])\nhauls = pd.concat([hauls,pd.get_dummies(hauls['haul'], prefix='haul')],axis=1)\nhauls.drop(['player_dismissed','haul'],inplace=True,axis=1)\nhauls=hauls.groupby(['bowler']).agg({'haul_4':'sum','haul_5':'sum'}).reset_index()\n\nbowlers_stats = pd.merge(pd.merge(pd.merge(economy_rates,maidens,on='bowler', how='left'),df_bowlers,on='bowler',how='left'),hauls,on='bowler',how='right').fillna(0)\nbowlers_stats.rename(columns ={'dismissal_kind' : 'wickets'},inplace=True)","03619be4":"data = [go.Bar(x=df_man_of_match['player_of_match'], \n               y=df_man_of_match[\"times\"], \n               marker=dict(color='#EB89B5'),opacity=0.75)]\n\nlayout = go.Layout(title='Man of the Matches ',\n                   xaxis=dict(title='Player',tickmode='linear'),\n                   yaxis=dict(title='Count'),bargap=0.2)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0eb66d37":"centuries = batsman_stats.sort_values(by='100s').tail(15)\nhalf_centuries = batsman_stats.sort_values(by='50s').tail(15)","553fd1c3":"fig = {\"data\" : [{\"x\" : centuries[\"batsman\"],\"y\" : centuries[\"100s\"],\n                  \"name\" : \"100s\",\"marker\" : {\"color\" : \"lightblue\",\"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\",\"mode\" : \"lines+markers\" ,\n                  \"xaxis\" : \"x1\",\"yaxis\" : \"y1\"},\n        \n                 {\"x\" : half_centuries[\"batsman\"],\"y\" : half_centuries[\"50s\"],\n                  \"name\" : \"50s\",\"marker\" : {\"color\" : \"brown\",\"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3},\"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\"}],\n       \n        \"layout\" : {\"title\": \"Total centuries and half-centuries by top batsman\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : True},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"50s\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear',\"title\": \"Batsman\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"anchor\" : \"x2\",\"title\": \"100s\"}}}\n\niplot(fig)","e89f64e6":"cen = batsman_stats[['100s','50s','batsman']]\ncen['points'] = (cen['100s']*8) + (cen['50s']*4)\ncen.sort_values(by='points',inplace=True,ascending=False)","1e3d74af":"trace = go.Table(\n    domain=dict(x=[0, 0.55],\n                y=[0, 1.0]),\n    header=dict(values=[\"Batsman\",\"Points\",\"100s\",\"50s\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[cen['batsman'].head(10), cen['points'].head(10), cen['100s'].head(10), cen['50s'].head(10)],\n               fill = dict(color = ['#25FEFD', 'white']),\n               align = ['center']))\n\ntrace1 = go.Bar(x=cen['batsman'].head(10),\n                y=cen[\"points\"].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='brown'),opacity=0.60)\n\nlayout = dict(\n    width=830,\n    height=415,\n    autosize=False,\n    title='Batsman with highest points by centuries and half centuries',\n    margin = dict(t=100),\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.65, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\n\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","16f81b41":"fours = batsman_stats.sort_values(by='Four').tail(15)\nsixes = batsman_stats.sort_values(by='Six').tail(15)\nruns = batsman_stats.sort_values(by='Batsman Run').tail(15)","de67a3e3":"trace1 = go.Scatter(x=sixes.batsman,y =sixes.Six,name='6\"s',marker =dict(color= \"blue\",size = 9),line=dict(width=2,dash='dash'),showlegend=True)\ntrace2 = go.Scatter(x=fours.batsman,y = fours.Four,name='4\"s',marker =dict(color= \"green\",size = 9),line=dict(width=2,dash='longdash'))\ntrace3 = go.Scatter(x=runs.batsman,y = runs['Batsman Run'],name='2\"s',marker =dict(color= \"red\",size = 9),line=dict(width=2,dash='dashdot'))\n\nfig = tools.make_subplots(rows=3, cols=1, subplot_titles=('Top 6\"s Scorer','Top 4\"s Scorer',\"Highest total runs\"), print_grid=False)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\n\nfig['layout'].update(height=700, width=820,title='Top Scorer in Boundaries and Total Runs',showlegend=False)\niplot(fig)","b6594559":"runs = batsman_stats[['Six','Four','Batsman Run','batsman']]\nruns['point'] = (runs['Six']*1) + (runs['Four']*0.5) + (runs['Batsman Run']*0.5)\nruns.sort_values(by='point',inplace=True,ascending=False)","209384f5":"trace = go.Table(\n    domain=dict(x=[0, 0.55],\n                y=[0, 1.0]),\n    header=dict(values=[\"Batsman\",\"Points\",\"Sixes\",\"Fours\"],\n                fill = dict(color='#d562be'),\n                font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[runs['batsman'].head(10), runs['point'].head(10), runs['Six'].head(10), runs['Four'].head(10)],\n               fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']),\n               align = ['center']))\n\ntrace1 = go.Bar(x=runs['batsman'].head(10),\n                y=runs[\"point\"].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='gold'),opacity=0.60)\n\nlayout = dict(\n    width=830,\n    height=415,\n    autosize=False,\n    title='Batsman with highest points by runs and boundaries',\n    margin = dict(t=100),\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.61, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\n\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","65dc88c0":"final = pd.merge(cen,runs,on='batsman', how='inner')\nfinal['total_points']=final['points']+final['point']\nfinal['max'] = final['100s']+final['50s']\n\nfinal.sort_values(by='total_points',ascending=False,inplace=True)\nbest_batsman = final[['batsman','total_points']]","f353c8e3":"final['Batsman Run'] = (final['Batsman Run'])\/(final['Batsman Run'].max()\/100)\nfinal['Six'] = (final['Six'])\/(final['Six'].max()\/100)\nfinal['Four'] = (final['Four'])\/(final['Four'].max()\/100)\nfinal['max'] = (final['max'])\/(final['max'].max()\/100)\nfinal['total_points'] = (final['total_points'])\/(final['total_points'].max()\/100)","83d5c18a":"x = final[final[\"batsman\"] == \"V Kohli\"]\ny = final[final[\"batsman\"] == \"CH Gayle\"]\nz = final[final[\"batsman\"] == \"S Dhawan\"]\n\ndata = [go.Scatterpolar(\n  r = [x['Four'].values[0],x['Six'].values[0],x['Batsman Run'].values[0],x['max'].values[0],x['total_points'].values[0]],\n  theta = ['Four','Six','Runs','Centuries','Points'],\n  fill = 'toself', opacity = 0.8,\n  name = \"V Kohli\"),\n        \n    go.Scatterpolar(\n  r = [y['Four'].values[0],y['Six'].values[0],y['Batsman Run'].values[0],y['max'].values[0],y['total_points'].values[0]],\n  theta = ['Four','Six','Runs','Centuries','Points'],\n  fill = 'toself',subplot = \"polar2\",\n    name = \"CH Gayle\"),\n       \n    go.Scatterpolar(\n  r = [z['Four'].values[0],z['Six'].values[0],z['Batsman Run'].values[0],z['max'].values[0],z['total_points'].values[0]],\n  theta = ['Four','Six','Runs','Centuries','Points'],\n  fill = 'toself',subplot = \"polar3\",\n    name = \"S Dhawan\")]\n\nlayout = go.Layout(title = \"Comparison Between V Kohli, CH Gayle, S Dhawan\",\n                   \n                   polar = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0, 0.25],y = [0, 1])),\n                  \n                   polar2 = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0.35, 0.65],y = [0, 1])),\n                  \n                   polar3 = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0.75, 1.0],y = [0, 1])),)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b44ee285":"trace1 = go.Bar(x=field_stats.fielder.head(15),y=field_stats.catch,\n                name='Caught',opacity=0.4)\n\ntrace2 = go.Bar(x=field_stats.fielder.head(15),y=field_stats.run_out,name='Run out',\n                marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=field_stats.fielder.head(15),y=field_stats.stump,name='Stump out',\n                marker=dict(color='lime'),opacity=0.4)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Best fielders',\n                   xaxis=dict(title='Player',tickmode='linear'),\n                   yaxis=dict(title='Dismissals'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cb2a54c9":"field = field_stats[['fielder','stump','catch','run_out']]\n\n\nfield1 = field[(field['stump'] > 0)]\nfield2 = field[~(field['stump'] > 0)]\n\nfield1['points'] = (field1['catch']*4) + (field1['stump']*6) + (field1['run_out']*2)\nfield2['points'] = (field2['catch']*4) + (field2['stump']*6) + (field2['run_out']*6)","48329640":"field = pd.concat([field1, field2])\nfield.sort_values(by='points',ascending=False,inplace=True)\n\nfield1.sort_values(by='points',ascending=False,inplace=True)\nfield2.sort_values(by='points',ascending=False,inplace=True)\n\nbest_fielder = field[['fielder','points']]","c52d81ae":"trace = go.Table(\n    domain=dict(x=[0, 0.65],\n                y=[0, 1.0]),\n    header=dict(values=[\"Fielder\",\"Stump\",\"Catch\",\"Run out\",\"Points\"],\n                fill = dict(color = 'grey'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[field['fielder'].head(10),field['stump'].head(10),field['catch'].head(10),field['run_out'].head(10),field['points'].head(10)],\n               fill = dict(color = ['lightgrey', 'white']),\n               align = ['center']))\n\ntrace1 = go.Bar(x=field['fielder'].head(10),\n                y=field[\"points\"].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='hotpink'),opacity=0.60)\n\nlayout = dict(\n    width=850,\n    height=440,\n    autosize=False,\n    title='Fielder with maximum Points',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.7, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\n\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","7ce5ef48":"trace0 = go.Scatter(\n    x=field1['points'].head(5),\n    y=field1['fielder'],\n    name = 'Wicketkeeper',\n    mode='markers',\n    marker=dict(\n        color='rgba(156, 165, 196, 0.95)',\n        line=dict(color='rgba(156, 165, 196, 1.0)',width=1),\n        symbol='circle',\n        size=16,\n    ))\ntrace1 = go.Scatter(\n    x=field2['points'].head(5),\n    y=field2['fielder'],\n    name='Fielder',\n    mode='markers',\n    marker=dict(\n        color='rgba(204, 204, 204, 0.95)',\n        line=dict(color='rgba(217, 217, 217, 1.0)',width=1),\n        symbol='circle',\n        size=16,\n    ))\n\ndata = [trace0,trace1]\nlayout = go.Layout(\n    title=\"Ten best Fielders and Wicketkeepers for Fantasy League \",\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        titlefont=dict(color='rgb(204, 204, 204)'),\n        tickfont=dict(color='rgb(102, 102, 102)',),\n        showticklabels=True,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=140,r=40,b=50,t=80),\n    legend=dict(\n        font=dict(size=10,),\n        yanchor='middle',\n        xanchor='right',\n    ),\n    hovermode='closest',\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9b5ad8f8":"haul5 = bowlers_stats.sort_values(by='haul_5',ascending=False).head(10)\nhaul4 = bowlers_stats.sort_values(by='haul_4',ascending=False).head(10)","f7b9fd3f":"trace1 = go.Scatter(x=haul5['bowler'],y=haul5['haul_5'],name='5 Wickets Haul',marker =dict(color= \"gold\",size = 13),line=dict(width=3,dash='longdashdot'))\ntrace2 = go.Scatter(x=haul4['bowler'],y=haul4['haul_4'],name='4 Wickets Haul',marker =dict(color= \"lightgrey\",size = 13),line=dict(width=3))\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Five Wickets','Four Wickets'), print_grid=False)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\niplot(fig)","ee0fec4f":"wicket = bowlers_stats.sort_values(by='wickets',ascending=False).head(10)\ncaught_bowled = bowlers_stats.sort_values(by='caught and bowled',ascending=False).head(10)","00b2bbe4":"dismissals = bowlers_stats[['bowler','wickets','caught and bowled']]\ndismissals['dismissals'] = dismissals['wickets']+dismissals['caught and bowled']\n\ndismissals['points'] = (dismissals['wickets']*10) + (dismissals['caught and bowled']*14)\ndismissals.sort_values(by='points',ascending=False,inplace=True)","76a92bc2":"trace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"Bowler\",\"Dismissals\",\"Points\"],\n                fill = dict(color = 'red'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[dismissals['bowler'].head(10),dismissals['dismissals'].head(10),dismissals['points'].head(10)],\n               fill = dict(color = ['lightsalmon', 'white']),\n               align = ['center']))\n\ntrace1 = go.Bar(x=dismissals['bowler'].head(10),\n                y=dismissals[\"points\"].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='lightblue'),opacity=0.60)\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='Bowlers with maximum dismissal points',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\n\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","ae117a55":"e1 = bowlers_stats.sort_values(by='eco_below4',ascending=False).head(10)\ne2 = bowlers_stats.sort_values(by='eco_4-5',ascending=False).head(10)\ne3 = bowlers_stats.sort_values(by='eco_5-6',ascending=False).head(10)\ne4 = bowlers_stats.sort_values(by='eco_6-9',ascending=False).head(10)\ne5 = bowlers_stats.sort_values(by='eco_9-10',ascending=False).head(10)\ne6 = bowlers_stats.sort_values(by='eco_10-11',ascending=False).head(10)\ne7 = bowlers_stats.sort_values(by='eco_above11',ascending=False).head(10)\nm = bowlers_stats.sort_values(by='maiden_overs',ascending=False).head(10)","1425ad03":"trace1 = go.Scatter(x=e1['bowler'],y = e1['eco_below4'],name='below 4')\ntrace2 = go.Scatter(x=e2['bowler'],y = e2['eco_4-5'],name='between 4-5')\ntrace3 = go.Scatter(x=e3['bowler'],y = e3['eco_5-6'],name='between 5-6')\ntrace4 = go.Scatter(x=e4['bowler'],y = e4['eco_6-9'],name='between 6-9')\ntrace5 = go.Scatter(x=e5['bowler'],y = e5['eco_9-10'],name='between 9-10')\ntrace6 = go.Scatter(x=e6['bowler'],y = e6['eco_10-11'],name='between 10-11')\ntrace7 = go.Scatter(x=e7['bowler'],y = e7['eco_above11'],name='above 11')\ntrace8 = go.Scatter(x=m['bowler'],y = m['maiden_overs'],name='Maiden overs')\n\nfig = tools.make_subplots(rows=4, cols=2,print_grid=False,\n                          subplot_titles=('Economy below 4','Economy between 4-5','Economy between 5-6',\n                                          'Economy between 6-9','Economy between 9-10','Economy between 10-11',\n                                          'Economy above 11','Maiden Overs'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\nfig.append_trace(trace7, 4, 1)\nfig.append_trace(trace8, 4, 2)\n\n\nfig['layout'].update(height=950, width=850,title='Economy and maiden Overs analysis',showlegend=False)\niplot(fig)","ff5d250d":"eco = bowlers_stats[['bowler','maiden_overs','eco_below4','eco_4-5','eco_5-6','eco_9-10','eco_10-11','eco_above11']]\n\neco['points'] = ((eco['eco_below4']*3)+(eco['eco_4-5']*2)+(eco['eco_5-6']*1)+\n                 (eco['eco_9-10']*(-1))+(eco['eco_10-11']*(-2))+(eco['eco_above11']*(-3))+(eco['maiden_overs']*4))\n\neco.sort_values(by='points',ascending=False,inplace=True)","f6416f18":"trace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"Bowler\",\"Maiden Overs\",\"Points\"],\n                fill = dict(color = 'green'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[eco['bowler'].head(10),eco['maiden_overs'].head(10),eco['points'].head(10)],\n               fill = dict(color = ['lightgreen', 'white']),\n               align = ['center']))\n\ntrace1 = go.Bar(x=eco['bowler'].head(10),\n                y=eco[\"points\"].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='gray'),opacity=0.60,name='bowler')\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='Bowlers with maximum economy and maiden points',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.56, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\n\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","87131007":"final = bowlers_stats\nfinal['points_x'] = ((final['eco_below4']*3)+(final['eco_4-5']*2)+(final['eco_5-6']*1)+(final['eco_9-10']*(-1))+\n                   (final['eco_10-11']*(-2))+(final['eco_above11']*(-3))+(final['maiden_overs']*4))\n\nfinal['points_y'] = (final['wickets']*10) + (final['caught and bowled']*14)\nfinal['points_z'] = (final['haul_4']*4) + (final['haul_5']*8)\n\nfinal['points'] = final['points_x']+final['points_y']+final['points_z']\nfinal['dismissals'] = final['wickets']+final['caught and bowled']\n\nfinal.sort_values(by='points',ascending=False,inplace=True)\nfinal_bowl = final.head(10)\n\nbest_bowler = final[['bowler','points']]","b43ab665":"trace = go.Scatter(y = final_bowl['points'],x = final_bowl['bowler'],mode='markers',\n                   marker=dict(size= final_bowl['dismissals'].values,\n                               color = final_bowl['maiden_overs'].values,\n                               colorscale='Viridis',\n                               showscale=True,\n                               colorbar = dict(title = 'Economy')),\n                   text = final_bowl['dismissals'].values)\n\ndata = [(trace)]\n\nlayout= go.Layout(autosize= True,\n                  title= 'Top Bowlers with maximum points',\n                  hovermode= 'closest',\n                  xaxis=dict(showgrid=False,zeroline=False,\n                             showline=False),\n                  yaxis=dict(title= 'Best Bowlers',ticklen= 5,\n                             gridwidth= 2,showgrid=False,\n                             zeroline=False,showline=False),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","72a06856":"final['points_x'] = (final['points_x'])\/(final['points_x'].max()\/100)\nfinal['points_y'] = (final['points_y'])\/(final['points_y'].max()\/100)\nfinal['points_z'] = (final['points_z'])\/(final['points_z'].max()\/100)\nfinal['points'] = (final['points'])\/(final['points'].max()\/100)","10376f95":"x = final[final[\"bowler\"] == \"Harbhajan Singh\"]\ny = final[final[\"bowler\"] == \"SP Narine\"]\nz = final[final[\"bowler\"] == \"R Ashwin\"]\nw = final[final[\"bowler\"] == \"B Kumar\"]\n\ndata = [go.Scatterpolar(\n  r = [x['points_x'].values[0],x['points_y'].values[0],x['points_z'].values[0],x['points'].values[0]],\n  theta = ['Economy rating','Wicket Haul rating','Wickets rating','Total rating'],\n  fill = 'toself', opacity = 0.8,\n  name = \"Harbhajan Singh\"),\n        \n    go.Scatterpolar(\n  r = [y['points_x'].values[0],y['points_y'].values[0],y['points_z'].values[0],y['points'].values[0]],\n  theta = ['Economy rating','Wicket Haul rating','Wickets rating','Total rating'],\n  fill = 'toself',subplot = \"polar2\",\n    name = \"SP Narine\"),\n       \n    go.Scatterpolar(\n  r = [z['points_x'].values[0],z['points_y'].values[0],z['points_z'].values[0],z['points'].values[0]],\n  theta = ['Economy rating','Wicket Haul rating','Wickets rating','Total rating'],\n  fill = 'toself',subplot = \"polar3\",\n    name = \"R Ashwin\"),\n       \n    go.Scatterpolar(\n  r = [w['points_x'].values[0],w['points_y'].values[0],w['points_z'].values[0],w['points'].values[0]],\n  theta = ['Economy rating','Wicket Haul rating','Wickets rating','Total rating'],\n  fill = 'toself',subplot = \"polar4\",\n    name = \"B Kumar\")]\n\nlayout = go.Layout(title = \"Comparison Between Harbhajan Singh, SP Narine, R Ashwin, B Kumar\",\n                   \n                   polar = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0, 0.40],y = [0, 0.40])),\n                  \n                   polar2 = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0.60, 1],y = [0, 0.40])),\n                  \n                   polar3 = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0, 0.40],y = [0.60, 1])),\n                  \n                   polar4 = dict(radialaxis = dict(visible = True,range = [0, 100]),\n                   domain = dict(x = [0.60, 1.0],y = [0.60, 1])))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","56056b67":"best_batsman = best_batsman.rename(columns={\"batsman\": \"player\"})\nbest_bowler = best_bowler.rename(columns={\"bowler\": \"player\"})\nbest_fielder = best_fielder.rename(columns={\"fielder\": \"player\"})","a27f7dbd":"best_player = pd.merge(pd.merge(best_batsman,best_bowler,on='player',how='outer'),best_fielder,on='player',how='outer')\n\nbest_player = best_player.fillna(0)\nbest_player['points'] = best_player['total_points']+best_player['points_x']+best_player['points_y']\nbest_player.sort_values(by='points',ascending=False,inplace=True)\nbest_player=best_player.reset_index().drop(['index'],axis=1)\n\nbest_player = best_player.head(20)","8193db9c":"trace1 = go.Bar(\n    x=best_player['player'],\n    y=best_player['total_points'],\n    name='Batting points',opacity=0.8,\n    marker=dict(color='lightblue'))\n\ntrace2 = go.Bar(\n    x=best_player['player'],\n    y=best_player['points_x'],\n    name='Bowling points',opacity=0.7,\n    marker=dict(color='gold'))\n\ntrace3 = go.Bar(\n    x=best_player['player'],\n    y=best_player['points_y'],\n    name='Fielding points',opacity=0.7,\n    marker=dict(color='lightgreen'))\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title=\"Points Distribution of Top Players\",barmode='stack',xaxis = dict(tickmode='linear'),\n                                    yaxis = dict(title= \"Points Distribution\"))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d9da5c80":"**If you like the notebook, Please Upvote as it will keep me motivated in doing great things ahead. Thanks!!**<p>\n\n<ul><li>Check Part 1 : <a href=\"https:\/\/www.kaggle.com\/dude431\/ipl-complete-analysis-part-1****\">IPL Complete Analysis part 1 <\/a><li>\nPoint system based on <a href=\"https:\/\/www.dream11.com\/games\/fantasy-cricket\/point-system\">Dream11 <\/a><li>\n    I have used the only Plotly in visualisations, So all maps\/charts are INTERACTIVE<li>\n    Strike rate criteria not included in this analysis because of non-availability of type of player\n    ","3c820578":"### Wicket hauls analysis","b2a2e8e7":"### Comparison Between Bowlers","a0abeb55":"### Bowlers with maximum points analysis","9a63e038":"### Bowlers with maximum dismissals analysis","34405c31":"Thank You For Having A Look At This Notebook<br>\nPlease **Upvote** if you find this Helpful\n\nIst part : <a href=\"https:\/\/www.kaggle.com\/dude431\/ipl-complete-analysis-part-1****\">IPL Complete Analysis part 1 <\/a>","4899c02d":"# Fielder Analysis","82fafc9a":"### Centuries and half centuries analysis","bd513e8d":"# Batsman Analysis","d89d2605":"# Best Players for Fantasy Team","774685ed":"### Fielder with maximum catches","f4fdbf4e":"### Fielders and Wicketkeepers with maximum points ","00a7305f":"### Man of the matches","bbd13d66":"### Fielder with maximum points","c86496c5":"### Best bowlers in each economy range","48d14c88":"### Boundaries and total runs analysis ","57c9d763":"### Comparison between Batsman","11cb1edd":"# Bowler Analysis","ff645552":"### Bowlers with maximum economy and maiden points","11712d89":"![](https:\/\/cdn.dnaindia.com\/sites\/default\/files\/styles\/full\/public\/2020\/08\/19\/919939-dream-xi.jpg)"}}