{"cell_type":{"be7d8034":"code","35502c3f":"code","81b4d49e":"code","1f3ca2c2":"code","9ff8a90a":"code","d364cb2a":"code","3b0311ad":"code","cafa1360":"code","ffb86792":"code","29ddee00":"code","a662ec43":"code","c7508296":"code","8108028b":"code","4b9b6934":"code","a298a061":"code","6da04468":"code","e83c4c23":"code","60918dfb":"code","10d740fd":"code","d7932418":"code","79cb2032":"code","76b9a119":"code","ec6ba823":"code","b09cb01c":"code","52373ddf":"code","23c60b2b":"code","cf633475":"code","79a7d336":"code","d138af16":"code","502ad64e":"code","3f59f718":"code","2e28d685":"code","1fe13d5a":"code","07a59a23":"code","605f27ac":"code","47fe0312":"code","d02063f8":"code","c87103c4":"code","8e483bc5":"markdown","02077886":"markdown","d15c98e9":"markdown","32a5ad99":"markdown","e13f682d":"markdown","f97df085":"markdown"},"source":{"be7d8034":"import numpy as np\nimport os\nimport pandas as pd\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFE, RFECV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.base import TransformerMixin, BaseEstimator\nfrom sklearn.pipeline import make_pipeline, FeatureUnion, Pipeline\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, cross_validate\nfrom sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score \nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, roc_auc_score, auc, log_loss\nfrom sklearn.compose import ColumnTransformer\nimport matplotlib.pyplot as plt","35502c3f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","81b4d49e":"train.head()","1f3ca2c2":"train.shape","9ff8a90a":"train.isnull().sum()","d364cb2a":"train.info()","3b0311ad":"# Drop identity and target columns\nvariables = train.drop(\"Survived\", axis=1)\nvar_resp = train[\"Survived\"].copy()","cafa1360":"# Split into train and test set\nx_train, x_test, y_train, y_test = train_test_split(variables, var_resp, test_size=0.2, random_state=2)","ffb86792":"x_train.info()","29ddee00":"x_test.info()","a662ec43":"# Drop columns with high missings rate\ncolumns = [\"Cabin\", \"PassengerId\", \"Ticket\", \"Name\"]\n\nx_train.drop(columns, axis = 1, inplace = True)\nx_test.drop(columns, axis = 1, inplace = True)","c7508296":"x_train.info()","8108028b":"x_test.info()","4b9b6934":"y_train.unique()","a298a061":"num_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"median\")),\n        ('std_scaler', StandardScaler()),\n    ])\n\ncat_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"most_frequent\")),\n        ('oneHot', OneHotEncoder()),\n    ])","6da04468":"num_attribs = x_train.select_dtypes(include=np.number).columns.tolist()\ncat_attribs = x_train.select_dtypes(include='object').columns.tolist()","e83c4c23":"cat_attribs","60918dfb":"num_attribs","10d740fd":"full_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attribs),\n        (\"cat\", cat_pipeline, cat_attribs),\n    ])","d7932418":"train_prepared = full_pipeline.fit_transform(x_train)","79cb2032":"train_prepared.shape","76b9a119":"test_prepared = full_pipeline.transform(x_test)","ec6ba823":"def plot_roc_curve(fpr, tpr):\n    plt.figure()\n    plt.plot(fpr, tpr, linewidth=2, label='ROC curve (area = %0.3f)' % auc(fpr, tpr))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('Taxa de falsos positivos', fontsize=16)\n    plt.ylabel('Taxa de verdadeiros positivos', fontsize=16)\n    plt.legend(loc=\"lower right\")\n    plt.show()","b09cb01c":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 4)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 100, num = 4)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\nparam_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n\nrfc = RandomForestClassifier()\ngrid_search = GridSearchCV(rfc, param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, return_train_score=True, n_jobs=-1)\ngrid_search = grid_search.fit(train_prepared, y_train)","52373ddf":"grid_search.best_params_","23c60b2b":"grid_search.best_estimator_","cf633475":"y_predicted = grid_search.predict_proba(test_prepared)[:, 1]","79a7d336":"fpr, tpr, thresholds = roc_curve(y_test, y_predicted)","d138af16":"plot_roc_curve(fpr, tpr)","502ad64e":"final_test = full_pipeline.transform(test)","3f59f718":"final_test","2e28d685":"final_test.shape","1fe13d5a":"y_predicted_test = grid_search.predict(final_test)","07a59a23":"y_predicted_test.shape","605f27ac":"test_passengerID = test['PassengerId'].copy()","47fe0312":"dataset = pd.DataFrame({'PassengerId': test_passengerID, 'Survived': y_predicted_test})","d02063f8":"dataset.head()","c87103c4":"dataset.to_csv('rf_output.csv', sep=\",\", index=False)","8e483bc5":"# Evaluate the model","02077886":"# Loading the data","d15c98e9":"# Preprocessing","32a5ad99":"# Modeling with hyperparameter tuning","e13f682d":"# Imports","f97df085":"# Make submission file"}}