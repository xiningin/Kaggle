{"cell_type":{"9c5093a1":"code","4327cd65":"code","ce5c6e5e":"code","be531a86":"code","c863d100":"code","6ce05bd1":"code","05324f8b":"code","e4401f7e":"code","8d709538":"code","19d2ff15":"code","01fe9309":"code","bcd81371":"code","93dc9383":"code","215ab05d":"code","2e4947f2":"code","def7d5fe":"code","4dbb2734":"code","9d70578f":"code","cf454e14":"code","ed63b81b":"code","77a8f5d3":"code","73afa5d6":"code","4b7c8feb":"code","40f6b43f":"code","f9b34316":"markdown","a97b4c9d":"markdown","1f45e322":"markdown","666e6d98":"markdown","714a975e":"markdown","62100077":"markdown","c0a95ff7":"markdown","b39386a7":"markdown","574d3694":"markdown","4739aefc":"markdown","f314866f":"markdown","6131c72d":"markdown","fa4a90df":"markdown"},"source":{"9c5093a1":"# You may need to install below packages.\n# !pip install pyspark findspark","4327cd65":"# It wil set spark environment variable\nimport findspark\nfindspark.init()","ce5c6e5e":"import os\nimport pyspark\n\nimport pyspark.sql.types as ptypes\nimport pyspark.sql.functions as funcs","be531a86":"ss = pyspark.sql.SparkSession.builder.master('local[*]').appName('Sales').getOrCreate()","c863d100":"%matplotlib inline\n%config InlineBackend.rc = {'figure.figsize': (16, 8)}","6ce05bd1":"sales_path = f'{os.path.abspath(os.path.pardir)}\/input\/sales-analysis\/SalesAnalysis.csv'\nsales_data = ss.read.csv(sales_path, inferSchema=True, header=True)","05324f8b":"sales_data_dropna = sales_data.dropna()","e4401f7e":"sales_data_dropna = (sales_data_dropna.\n                     withColumn('Order Date', funcs.from_unixtime(funcs.unix_timestamp('Order Date', 'MM\/dd\/yy HH:mm'))))","8d709538":"sales_data_dropna = (sales_data_dropna\n                     .withColumn('hour', funcs.date_format(sales_data_dropna['Order Date'], 'HH').cast(ptypes.IntegerType()))\n                     .withColumn('minute', funcs.date_format(sales_data_dropna['Order Date'], 'mm').cast(ptypes.IntegerType()))\n                     .withColumn('full_weekday', funcs.date_format(sales_data_dropna['Order Date'], 'EEEE'))\n                     .withColumn('month_ordered', funcs.date_format(sales_data_dropna['Order Date'], 'MMM')))","19d2ff15":"%matplotlib inline\n%config InlineBackend.rc = {'figure.figsize': (16, 8)}","01fe9309":"(sales_data_dropna.groupby('month_ordered')\n .agg(\n     funcs.count(funcs.col('Quantity Ordered')).alias('Quantity Ordered')\n ).toPandas().plot(kind='bar', x='month_ordered', xlabel=\"Month\", ylabel='Quantity')\n)","bcd81371":"sales_data_dropna = sales_data_dropna.withColumn('total_pay', (funcs.col('Price Each') * funcs.col('Quantity Ordered')))\nmonthly_highest_sales = sales_data_dropna.groupby('month_ordered').sum('total_pay').alias('monthly_total')\nmonthly_highest_sales = monthly_highest_sales.withColumnRenamed('sum(total_pay)', 'monthly_total')","93dc9383":"(monthly_highest_sales.toPandas()\n .plot(kind='bar', x='month_ordered', xlabel='Month', ylabel='Sales in USD ($)'))","215ab05d":"(sales_data_dropna.groupby('Product')\n .agg({'Quantity Ordered': 'sum'})\n .toPandas().plot(kind='bar', x='Product', xlabel='Products', ylabel='Quantity Ordered'))","2e4947f2":"def clean_addresss(address):\n    city = address.split(',')[1].strip()\n    state = address.split(',')[2].split(' ')[1].strip()\n    return f'{city} ({state})'\n\nclean_addresss_udf = funcs.udf(lambda addrs: clean_addresss(addrs))","def7d5fe":"# Cleaning address\nsales_data_dropna = sales_data_dropna.withColumn('city', clean_addresss_udf('Purchase Address'))","4dbb2734":"(sales_data_dropna.groupBy('city').sum('total_pay')\n .withColumnRenamed('sum(total_pay)', 'total_sales_per_city')\n .toPandas().plot(kind='bar', x='city', xlabel='City', ylabel='Sales in USD ($)'))","9d70578f":"(sales_data_dropna.groupby('hour')\n .sum('total_pay').withColumnRenamed('sum(total_pay)', 'total_sales_per_hour')\n .sort('hour').toPandas().plot(x='hour', xlabel='Hour', ylabel='Sales in USD ($)')\n .grid())","cf454e14":"(sales_data_dropna.groupby('full_weekday').sum('total_pay')\n .withColumnRenamed('sum(total_pay)', 'total_sales_in_weekdays')\n .toPandas().plot(x='full_weekday', xlabel='Week Days', ylabel='Sales in USD ($)')\n .grid())","ed63b81b":"colmns = ['full_weekday']\n(sales_data_dropna.groupby('Product').agg(\n    funcs.sum(funcs.col('Quantity Ordered')).alias('total_no_of_items_orderd_in_year'),\n    *[funcs.first(cl).alias(cl) for cl in colmns]\n).where(funcs.col('full_weekday') == 'Tuesday')\n .select('Product', 'total_no_of_items_orderd_in_year')\n .sort('total_no_of_items_orderd_in_year', ascending=False).show())","77a8f5d3":"multiple_item_id_order = (sales_data_dropna.groupby('Order ID').count().where(funcs.col('count') > 1)\n                          .sort('count', ascending=False).withColumnRenamed('count', 'total_item_in_order'))\nmultiple_item_id_order.count()","73afa5d6":"sales_data_dropna_tmp = sales_data_dropna\nmultiple_item_order_data = multiple_item_id_order.join(sales_data_dropna_tmp, ['Order ID'], 'leftouter')\nmultiple_item_order_data.count()","4b7c8feb":"multiple_item_order_data_grouped = (multiple_item_order_data.groupby('Order ID')\n .agg(\n     funcs.concat_ws(\", \", funcs.collect_list(funcs.col('Product'))).alias('items_in_a_order'),\n     *[funcs.first(cl).alias(cl) for cl in multiple_item_order_data.columns if not cl == 'Order ID']\n )\n)","40f6b43f":"multiple_item_order_data_grouped.groupby('items_in_a_order').count().sort('count', ascending=False).show(5)","f9b34316":"### Check the records which has duplicates Ordered ID's","a97b4c9d":"### Cleaning `Order Date` column","1f45e322":"### Find the day of week for entire year which has max product selling.","666e6d98":"### What are the products sold togather?","714a975e":"### Product sold per month","62100077":"### Total number of products sold per month","c0a95ff7":"### Defining `UDF` function to clean address","b39386a7":"### Dropping null rows","574d3694":"### Max sales during specific hour","4739aefc":"### Total Sales per city","f314866f":"### What are the products sold in large amount?","6131c72d":"### What are the product sold on `Tuesday`? and How many of each product sold on `Tuesday`?","fa4a90df":"### Updating matpotlib configuration to change figure size"}}