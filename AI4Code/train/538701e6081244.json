{"cell_type":{"11c2efe5":"code","5b59096d":"code","855336be":"code","96eb0f8f":"code","be82dd43":"code","27fa28fe":"code","c4a9e7db":"code","8479af50":"code","96b50a1b":"code","14a2da0c":"code","4bf081bc":"code","5f02e5ad":"code","d7bfbc03":"code","1479c232":"code","26a9410d":"code","a8d1e217":"code","ebf14e98":"code","35d686cd":"code","b55d2c49":"code","9ce001d8":"code","25d14773":"code","06a39c6f":"code","3306a823":"code","f53e20d4":"code","e0ac3d18":"code","2690b39d":"code","7cf834e5":"code","a48f172d":"code","3a8c56f9":"code","72aff5f0":"code","ae4c846f":"code","d859890d":"code","347ae3cb":"markdown","7246686a":"markdown","699d50f4":"markdown"},"source":{"11c2efe5":"\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5b59096d":"trainDf = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/train.csv')\nprint('train data set has got {} rows and {} columns'.format(trainDf.shape[0],trainDf.shape[1]))","855336be":"trainDf.info()","96eb0f8f":"for col in trainDf.columns:\n    if (col != 'id' and col != 'target'):\n        print(col + \": \", trainDf[col].unique())","be82dd43":"for col in trainDf.columns:\n    if trainDf[col].dtype == 'object':\n        trainDf[col] = trainDf[col].apply(lambda x: x.strip().replace(' ', ''))","27fa28fe":"trainDf['nom_3'].unique()","c4a9e7db":"trainDf['ord_2'].unique()","8479af50":"for col in trainDf.columns:\n    print(col + \": \", trainDf[col].isna().sum())","96b50a1b":"# separate target from array\n\ntargets = trainDf['target'].values\ntrainDf = trainDf.drop(['nom_8', 'nom_9', 'target'], axis = 1)","14a2da0c":"samples = []\n\nfor col in trainDf.columns:\n    if trainDf[col].dtype == 'object':\n        for val in trainDf[col].unique():\n            samples.append(val)","4bf081bc":"tokenizer = text.Tokenizer(num_words=len(samples))\ntokenizer.fit_on_texts(samples)\nsequences = tokenizer.texts_to_sequences(samples)\n\none_hot_results = tokenizer.texts_to_matrix(samples, mode='binary')\nword_index = tokenizer.word_index\n\nprint(\"Found %s unique tokens.\" % len(word_index))\n\n","5f02e5ad":"def myFunc(row):\n    if row.lower() in word_index:\n        return word_index[row.lower()]\n    else:\n        print(\"Value not found in word index: \", row)\n\nfor col in trainDf.columns:\n    if trainDf[col].dtype == object:\n        series = trainDf[col].apply(lambda x: myFunc(x))\n        trainDf[col] = series","d7bfbc03":"for col in trainDf.columns:\n    print(col + \": \", trainDf[col].isna().sum())","1479c232":"trainArray = trainDf.values\ntrainTargets = targets\n\nprint(trainArray.shape)\nprint(trainTargets.shape)","26a9410d":"seed = 7\nnp.random.seed(seed)\n\nxTrain, xTest, yTrain, yTest = train_test_split(trainArray, trainTargets, test_size=0.33, random_state=seed)","a8d1e217":"model = models.Sequential()\nmodel.add(layers.Dense(16, activation='relu', input_shape=(xTrain.shape[1], )))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","ebf14e98":"partial_x_train = xTrain[:120000]\npartial_y_train = yTrain[:120000]","35d686cd":"x_val = xTrain[120000:]\ny_val = yTrain[120000:]","b55d2c49":"np.isnan(partial_x_train).any()","9ce001d8":"history = model.fit(partial_x_train, partial_y_train, epochs=20, batch_size=1000,\n                    validation_data=(x_val, y_val))#","25d14773":"import matplotlib.pyplot as plt\n\nhistory_dict = history.history","06a39c6f":"history_dict","3306a823":"testDf = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/test.csv')\n\ntestDf = testDf.drop(['nom_8', 'nom_9'], axis = 1)\n\nfor col in testDf.columns:\n    if testDf[col].dtype == 'object':\n        testDf[col] = testDf[col].apply(lambda x: x.strip().replace(' ', ''))\n\ntestSamples = []\n\nfor col in testDf.columns:\n    if testDf[col].dtype == 'object':\n        for val in testDf[col].unique():\n            testSamples.append(val)","f53e20d4":"def testEncode(row):\n    if row.lower() in word_index:\n        return word_index[row.lower()]\n    else:\n        print(\"Value not found in word index: \", row)\n\nfor col in testDf.columns:\n    if testDf[col].dtype == object:\n        print(col)\n        series = testDf[col].apply(lambda x: testEncode(x))\n        testDf[col] = series\n        \ntestArray = testDf.values","e0ac3d18":"testArray.shape","2690b39d":"np.isnan(testArray).any()","7cf834e5":"target = model.predict(testArray, verbose=1)","a48f172d":"target","3a8c56f9":"testDf['target'] = target","72aff5f0":"submission = testDf[['id', 'target']]","ae4c846f":"submission","d859890d":"submission.to_csv('submission20191009.csv', index=False)","347ae3cb":"Since we have replaced values, we should look for any nulls again","7246686a":"Plot metrics later","699d50f4":"Oct 6, 2019: Looking back at our unique values for nom_3 and ord_2, there are some values that include spaces which may be messing up our encoding. "}}