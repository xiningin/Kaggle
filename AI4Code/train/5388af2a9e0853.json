{"cell_type":{"d1f632a0":"code","12836000":"code","6f50a3ab":"code","79b50545":"code","bab36249":"code","100c6a99":"code","ca400b43":"code","b2823bae":"code","017bba1f":"code","7b0378ca":"code","986e88c4":"code","295a27fa":"code","f1bb0f05":"markdown"},"source":{"d1f632a0":"# Python version of:\n# https:\/\/www.kaggle.com\/brandenkmurray\/randomly-shuffled-data-also-works\n\nimport os\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm import tqdm\nimport catboost\n\nprint(os.listdir(\"..\/input\"))","12836000":"df_train = pd.read_csv('..\/input\/train.csv', index_col='ID_code')\ndf_test = pd.read_csv('..\/input\/test.csv', index_col='ID_code')","6f50a3ab":"# split the train data by the target\ntarget0 = df_train[df_train.target == 0]\ntarget1 = df_train[df_train.target == 1]","79b50545":"((target0.shape, target1.shape))","bab36249":"# shuffle each feature\nfor c in tqdm(df_test.columns):\n    target0.loc[:, c] = target0[c].sample(frac=1).values\n    target1.loc[:, c] = target1[c].sample(frac=1).values","100c6a99":"# verify shuffled","ca400b43":"df_train.head(3)","b2823bae":"df_train_shuffled = pd.concat([target0, target1], axis=0)\ndf_train_shuffled.head(3)","017bba1f":"# Train a model\n\ndel df_train, target0, target1\n\nXy_train, Xy_valid = train_test_split(df_train_shuffled, test_size=.2, random_state=0, stratify=df_train_shuffled.target)\ndel df_train_shuffled\n\nxtr = Xy_train.drop('target', axis=1)\nytr = Xy_train.target\nxvalid = Xy_valid.drop('target', axis=1)\nyvalid = Xy_valid.target\n\ndef make_model():\n    return catboost.CatBoostClassifier(\n        early_stopping_rounds=100,\n        iterations=2000,\n        random_seed=0,\n        task_type=\"GPU\",\n\n        depth=8,\n        eval_metric='Logloss',\n        learning_rate=3e-2,\n        loss_function='Logloss',\n        metric_period=50,   # maintain training speed\n        od_pval=1e-6,\n        od_type='IncToDec',\n        use_best_model=True,\n        verbose=200,        # set the logging period\n    )\n\ndef train(clf, xtr, ytr, xte, yte):\n  clf.fit(\n      X=xtr,\n      y=ytr,\n      eval_set=(xte, yte),\n      use_best_model=True)\n  \ndef validate(clf, xvalid, yvalid):\n  y_pred = clf.predict_proba(xvalid)[:, 1]\n  score = roc_auc_score(yvalid, y_pred)\n  return score","7b0378ca":"model = make_model()\ntrain(model, xtr, ytr, xvalid, yvalid)\nscore = validate(model, xvalid, yvalid)\n\nprint('Validation score: {}'.format(score))","986e88c4":"# Predict on the test set.\ny_pred = model.predict_proba(df_test)[:, 1]","295a27fa":"df_submit = pd.DataFrame(dict(target=y_pred), index=df_test.index)\ndf_submit.to_csv('randomly_shuffled.csv')  # => Public 0.892","f1bb0f05":"Randomly shuffle features and got ~0.9 public score."}}