{"cell_type":{"383f9d6d":"code","9e640d18":"code","96174c17":"code","f0c9ad62":"code","83236d42":"code","9dde561b":"code","75e01b86":"code","c1e46fe8":"code","f02060d4":"code","c9394136":"code","15c78f84":"markdown","e78bd7ad":"markdown","04dacb52":"markdown","41a10d56":"markdown","fcad5f2f":"markdown","977c9e38":"markdown","0d570af7":"markdown","5311d45d":"markdown","a16047ba":"markdown","49b40e60":"markdown","5b76732f":"markdown","25738d39":"markdown","92159e4b":"markdown","d26b9b81":"markdown","62532f4b":"markdown","ff79e3a5":"markdown"},"source":{"383f9d6d":"import pandas as pd\nimport plotnine as pn #To avoid universal import\ndata = pd.read_csv(\"..\/input\/Pokemon.csv\", index_col=0)\ndata.Generation = data.Generation.astype(\"object\")\ndata.head()","9e640d18":"(pn.ggplot(data)\n + pn.aes(x=\"Attack\", y=\"Defense\",)\n + pn.geom_point(size=0.9,\n                  color=\"darkslateblue\"\n                 )\n + pn.scale_x_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n  + pn.scale_y_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n + pn.ggtitle(\"Attack and Defense by Generation\")\n + pn.theme(panel_background=pn.element_rect(fill=\"white\"),\n            panel_grid=pn.element_line(color=\"black\",\n                                       size=0.25\n                                      )\n           )\n)","96174c17":"(pn.ggplot(data)\n + pn.aes(x=\"Attack\", y=\"Defense\", color=\"Generation\")\n + pn.geom_jitter(size=0.9)\n + pn.scale_x_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n  + pn.scale_y_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n + pn.ggtitle(\"Attack and Defense by Generation\")\n + pn.theme(panel_background=pn.element_rect(fill=\"black\"),\n            panel_grid=pn.element_line(color=\"white\",\n                                       size=0.25\n                                      ),\n            figure_size=(8,8)\n           )\n)","f0c9ad62":"(pn.ggplot(data[data.Generation == 1]) #Downsampling\n + pn.aes(x=\"Attack\", y=\"Defense\", color=\"Type 1\", label=\"Name\")\n + pn.geom_text(size=8,\n                #check_overlap=True\n               )\n + pn.scale_x_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n  + pn.scale_y_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n + pn.ggtitle(\"Attack and Defense by Generation\")\n + pn.theme(panel_background=pn.element_rect(fill=\"black\"),\n            panel_grid=pn.element_line(color=\"white\",\n                                       size=0.25\n                                      ),\n            figure_size=(8,8)\n           )\n)","83236d42":"(pn.ggplot(data)\n + pn.aes(x=\"Attack\", y=\"Defense\", color=\"Generation\")\n + pn.geom_jitter(size=0.9)\n + pn.geom_smooth(fullrange=False,\n                  se=False, #hides confidence interval\n                  method=\"lm\" #to force linear fitting\n                 )\n + pn.geom_rug(sides=\"tr\")\n + pn.scale_x_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n  + pn.scale_y_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 50),\n                         expand=(0, 0)\n                        )\n + pn.ggtitle(\"Attack and Defense by Generation\")\n + pn.theme(panel_background=pn.element_rect(fill=\"black\"),\n            panel_grid=pn.element_line(color=\"white\",\n                                       size=0.25\n                                      ),\n            figure_size=(8,8)\n           )\n)","9dde561b":"(pn.ggplot(data)\n + pn.aes(x=\"Attack\", y=\"Defense\")\n + pn.geom_bin2d(binwidth=10,\n                 drop=False #to fill in all grey background\n                )\n + pn.ggtitle(\"Attack and Defense by Generation\")\n + pn.scale_x_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 20),\n                         expand=(0, 0)\n                        )\n + pn.scale_y_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 20),\n                         expand=(0, 0)\n                        )\n + pn.theme(panel_background=pn.element_rect(fill=\"white\"),\n             panel_grid=pn.element_line(color=\"black\",\n                                       size=0.25\n                                      ),\n             figure_size=(8,8)\n            )\n + pn.coord_fixed(ratio=1) #ensures square boxes\n)","75e01b86":"(pn.ggplot(data.dropna()) #removes pokemon of only 1 type\n + pn.aes(x=\"Type 1\", y=\"Type 2\")\n + pn.geom_bin2d()\n + pn.ggtitle(\"Attack and Defense by Generation\")\n + pn.theme(figure_size=(8,8),\n            \n           )\n + pn.theme(panel_background=pn.element_rect(fill=\"black\"),\n            panel_grid=pn.element_line(color=\"white\",\n                                       size=0.25\n                                      ),\n            figure_size=(8,8),\n            axis_text=pn.element_text(rotation=45)\n           )\n + pn.coord_fixed(ratio=1) #ensures square boxes\n + pn.scale_fill_cmap(\"RdPu\")\n + pn.xlab(\"Primary Type\")\n + pn.ylab(\"Secondary Type\")\n)","c1e46fe8":"(pn.ggplot(data)\n + pn.aes(x=\"Attack\", y=\"Defense\")\n + pn.geom_jitter(size=1)\n + pn.geom_density_2d(color=\"darkslateblue\",\n                      size=1\n                     )\n + pn.scale_x_continuous(limits=(0, 201),\n                         breaks=range(0, 201, 20),\n                         expand=(0, 0)\n                        )\n + pn.scale_y_continuous(limits=(0, 251),\n                         breaks=range(0, 251, 20),\n                         expand=(0, 0)\n                        )\n + pn.theme(panel_background=pn.element_rect(fill=\"white\"),\n             panel_grid=pn.element_line(color=\"black\",\n                                       size=0.25\n                                      ),\n             figure_size=(8,8)\n            )\n + pn.ggtitle(\"Attack and Defense Density Estimates\")\n)\n","f02060d4":"(pn.ggplot(pd.melt(data.groupby([\"Generation\"]).mean().reset_index(),\n                   id_vars=[\"Generation\"], value_vars=[\"HP\", \"Attack\", \"Defense\", \"Sp. Atk\", \"Sp. Def\", \"Speed\"]\n                  )\n          )\n + pn.aes(x=\"Generation\", y=\"value\", color=\"variable\")\n + pn.geom_line()\n + pn.scale_x_discrete(limits=(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                       expand=(0,0))\n + pn.scale_y_continuous(limits=(60, 86),\n                         breaks=range(60, 86, 5),\n                         expand=(0, 0)\n                        )\n + pn.labs(y=\"Base Stat Value\",\n           color=\"Stat\"\n          )\n + pn.ggtitle(\"Average Base Stats Across Generations\")\n + pn.theme(panel_background=pn.element_rect(fill=\"black\"),\n            panel_grid=pn.element_line(color=\"white\",\n                                       size=0.25\n                                      ),\n            figure_size=(8,8),\n           )\n)","c9394136":"pd.melt(data.groupby([\"Generation\"]).mean().reset_index(),\n        id_vars=[\"Generation\"], value_vars=[\"HP\", \"Attack\", \"Defense\", \"Sp. Atk\", \"Sp. Def\", \"Speed\"]\n       )","15c78f84":"These can also be used for categorical data. Let's look at the type breakdown...","e78bd7ad":"It converted the data to \"long form.\" Effectively, after averaging agross generation, all the column heads were turned into variables along the same column. This allows us to plot them as different groups in the same layer! Neat, huh?","04dacb52":"For more information on `Plotnine`, check out their API at https:\/\/plotnine.readthedocs.io\/en\/stable\/api.html\n\nAs it's (essentially) a direct port of `ggplot2`, you can also check out the ggplot2 API at https:\/\/ggplot2.tidyverse.org\/reference\/index.html","41a10d56":"A final nifty trick is the known as a `pn.geom_rug`. This feature adds tick marks to the ouside to give a sense of the 1D distributions and the 2D relations. Though these can get a little hard to read, so it's often better to either down sample or use them only on sparse sets.","fcad5f2f":"Another use feature of scatter plots is the the ability to add lines of best fit! In `Plotnine` this simply means add another `geom`.","977c9e38":"You probably noticed the data handling in the `pn.ggplot()`. Here's what that does...","0d570af7":"That's a bit better! But what if we wanted to label the points?","5311d45d":"Let's move on to 2D binning, sometimes known as a heat map. This helps to counter overplotting by counting the number of occurences, rather than plotting each one. Let's look at the same data this way.","a16047ba":"Let's start with a simple scatter plot. We will look at Attack and Defense.","49b40e60":"Another type of 2D plot is a line plot. These are particularly useful for plotting time dependent data! Let's see if the mean value for each stat has changed from generation to generation.","5b76732f":"Well that's it for this section! Join me next time as we explore 3D plotting and a few other nifty bits.","25738d39":"The mature `ggplot2` library in `R` also contains a `geom_hex` that produces a hexplot. Unfortunately, `Plotnine` does not currently support this (to the best of my knowledge), though `Seaborn` definitely does.","92159e4b":"Larning about `Plotnine` (a Python 3 implementation of R's `ggplot2`) has been alot of fun! Though there are several good guides, I though I'd put a series of my own together  to walk through the different plot types available. This is section 2 on 2D plotting, and it covers scatter plots, 2D binning, and line plots.","d26b9b81":"Another option to counter overplotting for 2D data is known as a 2D density, or countour, plot. It takes continuous variables on both axes, then calcultaes the density (number of occurences) at each point. The closer together the contours, the more closey clustered the data.\n\nWARNING: Kaggle's notebook environment does not currently support the most recent version of `Plotnine` required for `pn.geom_density_2d`, so the following code will return an error. I'll update this text when Kaggle switches to `Plotnine` v0.4.0.","62532f4b":"Not a bad first go. It's quite dense in the center - a major issue with using scatter plots on dense data sets is overplotting. This can be partly resolved by using a `pn.geom_jitter` plot. This moves the points a little when they overlap to try to prevent overplotting. ","ff79e3a5":"Perhaps not the best because of how hard it is to read (NB: `ggplot geom_text` has a `check_overlap=True` parameter that won't plot overlapping text. This feature does not seem to work in `Plotnine` currently)."}}