{"cell_type":{"8e99c90f":"code","30946fff":"code","2572e0ab":"code","724a5432":"code","346d2189":"code","7b654525":"code","ee1d42b6":"code","e097b1e6":"code","e47b87b0":"code","cd7469b8":"code","3a8746a8":"code","a3f1739b":"code","87242af2":"code","e028c591":"code","c21fa8c0":"code","87c59413":"code","7377f6c0":"code","b151d607":"code","0d951a4a":"code","7e45242c":"code","30bdd925":"code","c1b00ea7":"code","3281435e":"code","fe970c31":"code","ff1d527a":"code","090db13c":"code","f69b8ed1":"code","b2214f47":"code","c5e619d3":"code","4fe74285":"code","69015fb1":"code","ddaa8ca0":"code","b0d37a9f":"code","06ec74d4":"code","1358a917":"code","cc1b4617":"code","7851aacd":"code","1a0c77ee":"code","90321849":"code","ec1118bb":"code","a4ed5cd4":"code","4db77474":"code","baea1439":"code","4389d6a7":"code","3d654ef6":"code","a264bb63":"code","d2ab3e5a":"code","ff430bca":"code","69a3eb82":"code","5e58a801":"code","57e2a765":"code","79758192":"code","536b373b":"code","ab82c43f":"code","d93fcf28":"code","c7e37c24":"code","d323ac70":"code","6d59ef81":"code","77bb1a3e":"code","4f29b721":"code","9f26b2b8":"code","cf340d87":"code","f33b8961":"code","d7ed3b43":"code","5397a861":"code","4f8c5597":"code","cfcfaab9":"code","03dbaf58":"code","5d6c7f9e":"code","e85ece8c":"code","9d5f8dd5":"code","7471bb45":"code","d5f444b1":"code","00127813":"code","43e061a1":"code","e79a0106":"code","fe30ceb6":"code","bd6620fb":"code","8b09219a":"code","ad3884f4":"code","fe1f7702":"code","91bbfc7a":"code","8d5c21a5":"code","62270c6d":"code","3ebc3548":"markdown","3578ddaf":"markdown","39a33d38":"markdown","2a02f51f":"markdown","49d65d85":"markdown","6886000b":"markdown","89445e3f":"markdown","5f3e4cbf":"markdown","7d16ad88":"markdown","ac4430b0":"markdown","b199cc89":"markdown","8ee067c0":"markdown","6bff9f1a":"markdown","475c5000":"markdown","44201d6d":"markdown","cec1e95f":"markdown","2bd30695":"markdown","97c7b793":"markdown","848833dc":"markdown","4e0c1160":"markdown","ae578151":"markdown","6b94db1e":"markdown","433b63e2":"markdown","d8bb9b58":"markdown","ffbecd08":"markdown","d86e7f02":"markdown","1485322c":"markdown"},"source":{"8e99c90f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","30946fff":"gender_data=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntrain_data=pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data=pd.read_csv('..\/input\/titanic\/test.csv')","2572e0ab":"train_data.head()","724a5432":"train_data.shape","346d2189":"train_data.columns","7b654525":"train_data[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","ee1d42b6":"sns.countplot(x='Survived', hue = 'Sex',data=train_data)","e097b1e6":"train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","e47b87b0":"sns.countplot(x='Survived', hue = 'Pclass',data=train_data)","cd7469b8":"age_data= sns.FacetGrid(train_data, col='Survived')\nage_data.map(plt.hist, 'Age', bins=50)\nage_data.add_legend()","3a8746a8":"train_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()","a3f1739b":"embarked_data = sns.FacetGrid(train_data, col='Embarked', size=3, aspect=1.5)\nembarked_data.map(sns.lineplot, 'Pclass', 'Survived', 'Sex')\nembarked_data.add_legend()","87242af2":"train_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()","e028c591":"train_data[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()","c21fa8c0":"train_data['Family'] =train_data['Parch']+train_data['SibSp']","87c59413":"train_data[['Family', 'Survived']].groupby(['Family'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7377f6c0":"train_data.head()","b151d607":"train_data.isnull().sum()","0d951a4a":"train_data.head()","7e45242c":"train_data.isnull().sum()","30bdd925":"new_train_data = train_data.drop(['PassengerId','Ticket','Cabin','Name'], axis=1)\nnew_train_data.head()","c1b00ea7":"new_train_data['Sex'].replace('female',1 ,inplace=True)\nnew_train_data['Sex'].replace('male',0, inplace=True)","3281435e":"new_train_data.head()","fe970c31":"new_train_data['Embarked'].replace('S',0 ,inplace=True)\nnew_train_data['Embarked'].replace('C',1, inplace=True)\nnew_train_data['Embarked'].replace('Q',2, inplace=True)","ff1d527a":"new_train_data.head()","090db13c":"new_train_data.isnull().sum()","f69b8ed1":"new_train_data.fillna(new_train_data['Age'].median(),inplace=True)","b2214f47":"new_train_data.isnull().sum()","c5e619d3":"test_data.head()","4fe74285":"test_data.shape","69015fb1":"test_data.isnull().sum()","ddaa8ca0":"new_test_data = test_data.drop(['Ticket','Cabin','Name'], axis=1)","b0d37a9f":"new_test_data['Sex'].replace('female',1 ,inplace=True)\nnew_test_data['Sex'].replace('male',0, inplace=True)","06ec74d4":"new_test_data['Embarked'].replace('S',0 ,inplace=True)\nnew_test_data['Embarked'].replace('C',1, inplace=True)\nnew_test_data['Embarked'].replace('Q',2, inplace=True)","1358a917":"new_test_data['Family'] =new_test_data['Parch']+new_test_data['SibSp']","cc1b4617":"new_test_data.head()","7851aacd":"new_test_data.isnull().sum()","1a0c77ee":"new_test_data.fillna(new_test_data['Age'].mean(), inplace=True)","90321849":"new_test_data.isnull().sum()","ec1118bb":"X_train = new_train_data.drop(\"Survived\", axis=1)\nY_train = new_train_data[\"Survived\"]\nX_test  = new_test_data.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","a4ed5cd4":"X_test.head()","4db77474":"X_train.head()","baea1439":"from sklearn.linear_model import LinearRegression","4389d6a7":"model_lin = LinearRegression()\nmodel_lin.fit(X_train,Y_train)","3d654ef6":"pred_lin=model_lin.predict(X_test)\nlin_score =model_lin.score(X_train,Y_train)\nlin_pred_score =round(lin_score*100,2)\nlin_pred_score","a264bb63":"from sklearn.svm import LinearSVC","d2ab3e5a":"model_scv = LinearSVC()\nmodel_scv.fit(X_train,Y_train)","ff430bca":"pred_scv=model_scv.predict(X_test)\nscv_score =model_scv.score(X_train,Y_train)\nscv_pred_score =round(scv_score*100,2)\nscv_pred_score","69a3eb82":"from sklearn.linear_model import LogisticRegression","5e58a801":"model_log = LogisticRegression()\nmodel_log.fit(X_train,Y_train)","57e2a765":"pred_log=model_log.predict(X_test)\nlog_score =model_log.score(X_train,Y_train)\nlog_pred_score =round(log_score*100,2)\nlog_pred_score","79758192":"from sklearn.ensemble import RandomForestClassifier","536b373b":"model_rfc = RandomForestClassifier(max_depth=2, random_state=0)\nmodel_rfc.fit(X_train,Y_train)","ab82c43f":"pred_rfc=model_rfc.predict(X_test)\nrfc_score =model_rfc.score(X_train,Y_train)\nrfc_pred_score =round(rfc_score*100,2)\nrfc_pred_score","d93fcf28":"from sklearn.linear_model import RidgeCV","c7e37c24":"model_ridge = RidgeCV()\nmodel_ridge.fit(X_train,Y_train)","d323ac70":"pred_ridge=model_ridge.predict(X_test)\nridge_score =model_ridge.score(X_train,Y_train)\nridge_pred_score =round(ridge_score*100,2)\nridge_pred_score","6d59ef81":"from sklearn import linear_model","77bb1a3e":"model_lasso=linear_model.Lasso(alpha=0.005)\nmodel_lasso.fit(X_train,Y_train)","4f29b721":"pred_lasso=model_lasso.predict(X_test)\nlasso_score =model_lasso.score(X_train,Y_train)\nlasso_pred_score =round(lasso_score*100,2)\nlasso_pred_score","9f26b2b8":"from sklearn.linear_model import BayesianRidge","cf340d87":"model_bayesian = BayesianRidge()\nmodel_bayesian.fit(X_train,Y_train)","f33b8961":"pred_bayesian=model_bayesian.predict(X_test)\nbayesian_score =model_bayesian.score(X_train,Y_train)\nbayesian_pred_score =round(bayesian_score*100,2)\nbayesian_pred_score","d7ed3b43":"from sklearn.tree import DecisionTreeClassifier","5397a861":"model_decision=DecisionTreeClassifier()\nmodel_decision.fit(X_train,Y_train)","4f8c5597":"pred_decision=model_decision.predict(X_test)\ndecision_score =model_decision.score(X_train,Y_train)\ndecision_pred_score =round(decision_score*100,2)\ndecision_pred_score","cfcfaab9":"from sklearn.naive_bayes import GaussianNB","03dbaf58":"model_gaussian=GaussianNB()\nmodel_gaussian.fit(X_train,Y_train)","5d6c7f9e":"pred_gaussian=model_gaussian.predict(X_test)\ngaussian_score =model_gaussian.score(X_train,Y_train)\ngaussian_pred_score =round(gaussian_score*100,2)\ngaussian_pred_score","e85ece8c":"from sklearn.pipeline import make_pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler","9d5f8dd5":"model_svc = make_pipeline(StandardScaler(), SVC(gamma='auto'))\nmodel_svc.fit(X_train,Y_train)","7471bb45":"pred_svc=model_svc.predict(X_test)\nsvc_score =model_svc.score(X_train,Y_train)\nsvc_pred_score =round(svc_score*100,2)\nsvc_pred_score","d5f444b1":"from sklearn.neighbors import KNeighborsRegressor","00127813":"model_knn_reg = KNeighborsRegressor(n_neighbors=3)\nmodel_knn_reg.fit(X_train,Y_train)","43e061a1":"pred_knn_reg=model_knn_reg.predict(X_test)\nknn_reg_score =model_knn_reg.score(X_train,Y_train)\nknn_reg_pred_score =round(knn_reg_score*100,2)\nknn_reg_pred_score","e79a0106":"from sklearn.neighbors import KNeighborsClassifier","fe30ceb6":"model_knn_class = KNeighborsClassifier(n_neighbors=3)\nmodel_knn_class.fit(X_train,Y_train)","bd6620fb":"pred_knn_class=model_knn_class.predict(X_test)\nknn_class_score =model_knn_class.score(X_train,Y_train)\nknn_class_pred_score =round(knn_class_score*100,2)\nknn_class_pred_score","8b09219a":"model_data={\n    'Model':['Linear Regression', 'Linear Support Vector Classification','Logistic Regression','Random forest classifier',\n            'Ridge regression with built-in cross-validation','Lasso Regression','Bayesian Ridge Regression',\n            'Decision Tree Classifier','Gaussian Naive Bayes (GaussianNB)','C-Support Vector Classification',\n            'Regression based on k-nearest neighbors','Classifier implementing the k-nearest neighbors vote'],\n    'score':[lin_pred_score,scv_pred_score,log_pred_score,rfc_pred_score, ridge_pred_score,lasso_pred_score,\n            bayesian_pred_score,decision_pred_score,gaussian_pred_score,svc_pred_score,knn_reg_pred_score,knn_class_pred_score]\n}","ad3884f4":"model_score_dataset=pd.DataFrame(model_data)\nmodel_score_dataset.sort_values(by='score', ascending=False)","fe1f7702":"result = pd.DataFrame({\n       \"PassengerId\": new_test_data[\"PassengerId\"],\n       \"Survived\": pred_svc\n   })","91bbfc7a":"result.to_csv('result.csv', index = False)","8d5c21a5":"result_csv=pd.read_csv('result.csv')\nresult.shape","62270c6d":"count=0\nfor i in range(0, len(gender_data['Survived'])-1):\n    if result['Survived'][i] ==gender_data['Survived'][i]:\n        count+=1\nprint(count)\nprint(count\/(len(gender_data['Survived'])-1))","3ebc3548":"Compare scores for different types of ML models","3578ddaf":"### Count Survived based on Sibling and Parents","39a33d38":"### Clean Data","2a02f51f":"## Gaussian Naive Bayes (GaussianNB)","49d65d85":"### Train Data","6886000b":"## Bayesian Ridge Regression","89445e3f":"Replace female to 1, male to 0","5f3e4cbf":"### Count Survived based on Emarked","7d16ad88":"## Lasso Regression","ac4430b0":"## Linear Regression","b199cc89":"## Classifier implementing the k-nearest neighbors vote.","8ee067c0":"Compare result.csv and gender submission.csv before submission","6bff9f1a":"### Count Survived based on Pclass","475c5000":"## Ridge regression with built-in cross-validation.","44201d6d":"### Test Data","cec1e95f":"## Linear Support Vector Classification","2bd30695":"## Logistic Regression","97c7b793":"Replace S to 0, C to 1, Q to 2","848833dc":"## Decision Tree Classifier","4e0c1160":"## Regression based on k-nearest neighbors.","ae578151":"Data Dictionary \n-----------------------\n\nVariable    |  Definition                                | Key\n----------- | ------------------------------------------ | -------------\nsurvival    |  Survival                                  | \t0 = No, 1 = Yes\npclass      |  Ticket Class                              | \t1 = 1st, 2 = 2nd, 3 = 3rd\nsex         |  Sex                                       |\nAge         |  Age of years                              |\nsibsp       | # of siblings \/ spouses aboard the Titanic |\nparch       | # of parents \/ children aboard the Titanic |\nticket      | \tTicket number                            |\nfare        | \tPassenger fare                           |\ncabin       | \tCabin number                             |\nembarked    | \tPort of Embarkation                      | \tC = Cherbourg, Q = Queenstown, S = Southampton","6b94db1e":"### Count Survived based on Sex","433b63e2":"Survived count between male and female","d8bb9b58":"## C-Support Vector Classification.","ffbecd08":"Just like train data, do same thing for test. (remove name, cabin, null value)","d86e7f02":"## Random forest classifier","1485322c":"### Count Survived based on Age"}}