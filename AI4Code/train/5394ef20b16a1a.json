{"cell_type":{"45d0607d":"code","04ed1793":"code","9040f1df":"code","ad1ba103":"code","de5b366a":"code","9b4e5a5b":"code","cb7630c2":"code","89c8a97c":"code","3d7db42f":"code","e5648038":"code","6a9b90e8":"code","c4dc166b":"code","9392cd0d":"code","6a1748f4":"code","56af83e5":"code","65cbd6d0":"code","3b2ec738":"code","cd3a11ba":"code","4cfa5702":"code","2fcb6b95":"code","afe68fe0":"code","c0777ebf":"code","f5eb03c1":"code","b261eaae":"code","5f61d391":"code","241ddfbe":"code","aac842db":"code","fcb2fe16":"code","69c560b8":"code","76b22125":"code","55ba56b4":"code","91e9b9a1":"code","591937e8":"code","211b1141":"code","a5a15539":"markdown","01bc7d12":"markdown","76e1188a":"markdown","76afc149":"markdown","bfc4ce48":"markdown","c55886b1":"markdown","80ab0a5f":"markdown","2a297e48":"markdown","9c5fd7ea":"markdown","d21cd895":"markdown","016586eb":"markdown","c166b5d8":"markdown","141b95bb":"markdown","b18577aa":"markdown","38eacae4":"markdown","27cdfacf":"markdown","ca7a5aa4":"markdown","8aea6157":"markdown","b56cf282":"markdown","60099056":"markdown","7766a8f1":"markdown","1249a5d4":"markdown","9471eeb5":"markdown","bf2ff206":"markdown","d15476c7":"markdown","e229822a":"markdown","5d566404":"markdown","f77c0767":"markdown","4c0f18d1":"markdown","680a80e3":"markdown","3cd48684":"markdown","bfad4bd3":"markdown","84806e0b":"markdown","29e24361":"markdown","f1adbe86":"markdown","5d8874a2":"markdown","e77d317c":"markdown","6fdc0371":"markdown","974ae0ef":"markdown","72d5a84a":"markdown","86876d6e":"markdown","68dd779f":"markdown"},"source":{"45d0607d":"# Imports\nimport math\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\n\nprint(os.listdir(\"..\/input\"))\n\n","04ed1793":"#Create pandas dataframe from csv file making first column as index\ndf = pd.read_csv('..\/input\/messidor_data.csv',index_col=['image_id']);\n\n#Lets summarize data\nprint('\\n\\n--- DESCRIBE ---\\n')\ndf.describe()\n\n","9040f1df":"#Lets peek into data\nprint('\\n\\n--- HEAD ---\\n')\ndf.head()","ad1ba103":"df1 = df.loc[df['adjudicated_gradable'].isin([0])]\ndf1","de5b366a":"print('\\n\\n--- SHAPE ---\\n')\ndf.shape","9b4e5a5b":"print('\\n\\n--- INFO ---\\n')\ndf.info()\n","cb7630c2":"print()\nmy_df = pd.DataFrame(np.array([[1, 2, 3 ], [np.nan, 5, 6], [7, 8, 9]]),\n                   columns=['a', 'b', 'c'],\n                    index=[1,2,3])\n\nprint(\"A DataFrame\")\nprint(my_df)\n\nprint()\nprint(\"Count on DataFrame\")\nprint(my_df.count())\n\nprint()\nprint(\"A column of DataFrame is a Series\")\nprint(my_df['a'])\nprint()\n\nmy_series = pd.Series([3, 1, 2, 3, 4, np.nan])\nprint(\"A Series\")\nprint(my_series)\n","89c8a97c":"# One way is maintaining key, value pairs of values and their counts.\n\nmy_list = [1,2,1,1,2]\n\nfrequency_dict = {}\n\nfor i in my_list:\n    frequency_dict[i] = frequency_dict.get(i,0) + 1 #Add 1 to current value of count in dictionary (0 for first time)\n\nprint (frequency_dict)    \n\n#The Output is dictionary mapping values to their frequencies.","3d7db42f":"# Another way is Counter class in collections module.\n\nfrom collections import Counter\ncounter = Counter(my_list)\n\ncounter","e5648038":"# But pandas provides us value_counts method on Series for the same.\n# From Pandas documentation \n\n# Series.value_counts(normalize=False, sort=True, ascending=False, bins=None, dropna=True)[source]\n# Return a Series containing counts of unique values.\n\n# The resulting object will be in descending order so that the first element is the most frequently-occurring element. \n# Excludes NA values by default.\nmy_series = pd.Series([3, 1, 2, 3, 4, np.nan])\n\nprint(\"my_series\",my_series)\nprint()\nprint(\"value_counts() - NaN excluded\")\nprint(my_series.value_counts())\nprint()\nprint(\"value_counts() - NaN included\")\nprint(my_series.value_counts(dropna=False))\n","6a9b90e8":"# Create a data frame of adjudicated_dr_grade counts \ngradable_counts = df['adjudicated_gradable'].value_counts()\nprint(gradable_counts)\n\n# Plot a bar chart\ngradable_counts.plot(kind='bar', title=\"adjudicated_gradable Counts\")\n\nplt.xlabel('adjudicated_gradable')\nplt.ylabel('Number of Images')\n\nplt.show()","c4dc166b":"# Create a data frame of adjudicated_dr_grade counts\ndr_grade_counts = df['adjudicated_dr_grade'].value_counts()\n\n# Plot a bar chart\ndr_grade_counts.plot(kind='bar', title='adjudicated_dr_grade Counts')\n\nplt.xlabel('adjudicated_dr_grade')\nplt.ylabel('Number of Images')\n\nplt.show()","9392cd0d":"# Create a data frame of adjudicated_dr_grade counts\ndr_grade_counts = df['adjudicated_dr_grade'].value_counts().sort_index()\nprint(dr_grade_counts)\n# Plot a bar chart\ndr_grade_counts.plot(kind='bar', title='adjudicated_dr_grade Counts')\n\nplt.xlabel('adjudicated_dr_grade')\nplt.ylabel('Number of Images')\n\nplt.show()","6a1748f4":"#Create dataframe with dme counts\ndme_counts = df['adjudicated_dme'].value_counts().sort_index()\nprint(dme_counts)\n#Plot a bar chart\ndme_counts.plot(kind='bar', title='adjudicated_dme Counts')\nplt.xlabel('adjudicated_dme')\nplt.ylabel('Number of Images')\n\nplt.show()","56af83e5":"# Create a data frame of adjudicated_gradable counts \ngradable_counts = df['adjudicated_gradable'].value_counts()\nprint(gradable_counts)\n\n# Plot a pie chart\n\ngradable_counts.plot(kind='pie', title='adjudicated_gradable Counts', figsize=(6,6)) \n\nplt.legend()\nplt.show()","65cbd6d0":"# Create a data frame of adjudicated_dr_grade counts\ndr_grade_counts = df['adjudicated_dr_grade'].value_counts().sort_index()\nprint(dr_grade_counts)\n# Plot a pie chart\ndr_grade_counts.plot(kind='pie', title='adjudicated_dr_grade Counts',figsize=(6,6))\n\nplt.legend()\nplt.show()","3b2ec738":"# Create a data frame of adjudicated_dme counts\nadjudicated_dme_counts = df['adjudicated_dme'].value_counts().sort_index()\nprint(adjudicated_dme_counts)\n# Plot a pie chart\nadjudicated_dme_counts.plot(kind='pie', title='adjudicated_dme Counts',figsize=(6,6))\n\nplt.legend()\nplt.show()","cd3a11ba":"# Checking available styles\nplt.style.available","4cfa5702":"# Using a particular style\nplt.style.use('seaborn-darkgrid')","2fcb6b95":"\n# Example\n# Create a data frame of adjudicated_dr_grade counts\ndr_grade_counts = df['adjudicated_dr_grade'].value_counts().sort_index()\nprint(dr_grade_counts)\n# Plot a pie chart\ndr_grade_counts.plot(kind='pie', title='adjudicated_dr_grade Counts',figsize=(6,6))\n\nplt.legend()\nplt.show()","afe68fe0":"# Choosing ggplot style\nplt.style.use('seaborn-whitegrid')\n\n# Get the figure and the axes (or subplots)\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=1, ncols=3, figsize=(15, 4))\n\n\n# Prepare data for ax0  \nprint(gradable_counts)\nprint()\nx = gradable_counts.index.values\nheight = gradable_counts.values\n\n# Axes.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)\nax0.bar(x, height, width=0.5, align='center')\nax0.set(title = 'adjudicated_gradable Counts', xlabel='adjudicated_gradable' , ylabel = 'Number of Images')\nax0.set_xticks([0, 1])\n\n\n\n# Prepare data for ax1  \nprint(dr_grade_counts)\nprint()\nx = dr_grade_counts.index.values\nheight = dr_grade_counts.values\n\n# Axes.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)\nax1.bar(x, height, width=0.5, align='center')\nax1.set(title = 'adjudicated_dr_grade Counts', xlabel='adjudicated_dr_grade' , ylabel = 'Number of Images')\n\n\n\n# Prepare data for ax2  \nprint(dme_counts)\nprint()\nx = dme_counts.index.values\nheight = dme_counts.values\n\n# Axes.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)\nax2.bar(x, height, width=0.5, align='center')\nax2.set(title = 'adjudicated_dme Counts', xlabel='adjudicated_dme' , ylabel = 'Number of Images')\nax2.set_xticks([0, 1])\n\n# Title the figure\nfig.suptitle('Frequency Counts', fontsize=14, fontweight='bold');\n\n","c0777ebf":"plt.style.use('seaborn-whitegrid')\n\nprint(gradable_counts.index.values)\nprint(gradable_counts.values)\n\n# Get the figure and the axes (or subplots)\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=1, ncols=3, sharey=True,figsize=(15, 5))\n\ngradable_counts.plot(kind='bar', ax= ax0)\nax0.set(title = 'adjudicated_gradable Counts', xlabel='adjudicated_gradable' , ylabel = 'Number of Images')\n\ndr_grade_counts.plot(kind='bar', ax= ax1);\nax1.set(title = 'adjudicated_dr_grade Counts', xlabel='adjudicated_dr_grade' , ylabel = 'Number of Images')\n\ndme_counts.plot(kind='bar', ax= ax2);\nax2.set(title = 'adjudicated_dme Counts', xlabel='adjudicated_dme' , ylabel = 'Number of Images')\n\n# Title the figure\nfig.suptitle('Frequency Counts', fontsize=14, fontweight='bold');\n","f5eb03c1":"#Create List from numpy array using List comprehension\ntypes = [x   for x in (dr_grade_counts.index.values) ]\nvalues = [x   for x in (dr_grade_counts.values) ]\nprint(types)\nprint(values)","b261eaae":"\n# Create a Figure and get its axes using subplots\nfig, ax = plt.subplots(figsize=(15, 7), subplot_kw=dict(aspect=\"equal\"))\n\n\n# Prepare data\ntypes = [x   for x in (dr_grade_counts.index.values) ]\nvalues = [x   for x in (dr_grade_counts.values) ]\n\n# Lambda function\ndef func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\\n({:d} )\".format(pct, absolute)\n\n# ax.pie\nwedges, texts, autotexts = ax.pie(values, autopct=lambda pct: func(pct, values),textprops=dict(color=\"w\"))\n\nax.legend(wedges, types,\n          title=\"Grade types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n\nax.set_title(\"A Labelled Pie Chart\")\n\n\n\nplt.setp(autotexts, size=12, weight=\"bold\")\n\nplt.show()\n","5f61d391":"#Quick Recipe for Pie  \n#https:\/\/www.kaggle.com\/shuan3\/melboune-real-estate-market-comprehensive-analysis#Melboune-house-project-Layout\nplt.pie(values,labels=types,autopct='%.1f %%')\nplt.title('Pie chart')\nplt.show()","241ddfbe":"#Imagine we want to do - groupby on dr_grade and dme\n\ngrouped_by_drgrade_and_dme = df.groupby(['adjudicated_dr_grade', 'adjudicated_dme'])  \n\ngrouped_by_drgrade_and_dme.describe()","aac842db":"#Suppose we would like to get keys of all the groups\nkey_list_with_nan = grouped_by_drgrade_and_dme.groups.keys()\nkey_list_with_nan","fcb2fe16":"df1 = df.loc[df['adjudicated_gradable'].isin([0])]\ndf1","69c560b8":"#Now we want keylist without nan\n\n\n#List comprehension will check if any of the items in a tuple is NaN. \n#First check the type and then with math.isnan as it wont work for other types\n\n#Read below code line from end - 3 instructions\n# for each number in tuple \n# if  not a nan \n# add tuple to key_list\n\nkey_list = [t for t in key_list_with_nan     if not any(isinstance(n, float) and math.isnan(n)     for n in t)]\n#key_list = [t  for t in key_list_with_nan    for n in t   if not math.isnan(n)]\nprint('\\n--- key_list ---\\n')\nprint(key_list)\n","76b22125":"#Inorder to display above things in donut ring , we will need key_list and their corresponding value list\n\n\ngrade_types_dict = {0.0: 'None', 1.0: 'Mild DR', 2.0 :'Moderate DR', 3.0:'Severe DR', 4.0:'PDR'} \n\ndme_types_dict = {0.0: 'No Referable DME', 1.0: 'Referable DME'}\n\n\n#In outer ring, we want to show - dr_grade with 5 different colors for 5 levels - 0.0, 1.0, 2.0, 3.0, 4.0\n#In inner ring, we want to show - For each level of dr_grade, dme with 2 different colors or - 0.0 and 1.0\n#Nested for loop using List comprehension\n\n[ (i,j)    for i in grade_types_dict.keys()    for j in dme_types_dict.keys()] ","55ba56b4":"#Next we are interested in getting count values \n\nprint('\\n\\n--- grouped.count() ---\\n\\n')\nprint(grouped_by_drgrade_and_dme.count())\n\nprint('\\n\\n--- count value for a specific group ---\\n\\n')\nprint(grouped_by_drgrade_and_dme.get_group((4.0, 0.0)).count())\n\nprint('\\n\\n--- just the count value alone ---\\n\\n')\nprint((grouped_by_drgrade_and_dme.get_group((4.0, 0.0)).count())[0])","91e9b9a1":"#Creating a 2-dim array to store counts\n#One row or each dr_grade levels (5 rows)\n#Two columns for each dme (0 and 1)\narr = np.zeros(shape=(5,2))\n\nfor i in grade_types_dict.keys():\n    for j in dme_types_dict.keys():\n        if (i,j) in key_list:\n            arr[int(i)][int(j)] = ((grouped_by_drgrade_and_dme.get_group((i, j)).count())[0]);\n\n\narr","591937e8":"#For outer ring we need sum\nprint(arr.sum(axis=1))\n\n#For inner ring we need individual values\nprint(arr.flatten())","211b1141":"#Pie plot with ax.pie\n\nfig, ax = plt.subplots()\nsize = .5\nsize = 1\n\n\ncmap_inner = plt.get_cmap('tab10')\ncmap_outer = plt.get_cmap('tab20')\ninner_colors = cmap_inner(np.arange(5)*1)\nouter_colors = cmap_outer(np.arange(10)*1)\n\n\nax.pie(arr.sum(axis=1), radius=1.5, colors=inner_colors,\n       wedgeprops=dict(width=.5, edgecolor='w', linewidth=2),labels = ('1017',  '270',  '347',   '75',   '35'),labeldistance=0.75)\n\nax.pie(arr.flatten(), radius=2, colors=outer_colors,\n       wedgeprops=dict(width=.5, edgecolor='w' ,linewidth=2),labels = ('1017', '', '262',    '8',  '261 ',   '86',   '33',   '42',   '20',   '15'),labeldistance=0.90)\n\nax.set(aspect=\"equal\")\n\n#plt.title(label=' Labelled Nested Donut')\nplt.legend(('grade_0',  'grade_1',  'grade_2',   'grade_3',   'grade_4'),loc='upper right', bbox_to_anchor=(1.5, 1.5))\n\nplt.show()","a5a15539":"# **Introduction**\n\nAs goes the well known saying, \"*A picture is worth a thousand words*\". \n\nTo understand the data contained in this table we will visualize it with various Matplotlib's charts like Bar, Pie charts and finally Donut charts using both State based and Object oriented interface. \n\nThis notebook has 8 sections seen below. \n\n1. Introduction\n2. Section 1 - Matplotlib Basic Bar Charts and Pie Charts\n3. Section 2 - Matplotlib Multiple graphs in a Figure\n4. Section 3 - Matplotlib Labelled Pie Charts\n4. Section 4 - Matplotlib Nested Donut Chart\n6. Conclusion\n7. Appendix\n8. References","01bc7d12":"# Conclusion\n\n\nThus, we started with simple plots of Bar Charts and Pie Charts analyzing one column at a time.\n\nThen, we gained insight into two interfaces of Matplotlib and used it to plot that Multiple graphs in same figure.\n\nIn the end, we analyzed multiple columns at a time and ended with Nested donut chart.\n","76e1188a":"# 3 Matplotlib Labelled piechart\n\nIn this section we will plot a labelled pie chart.\n\nFirst, in Data Preparation step, we Create List from numpy array using List comprehension one for type of wedges and other for size of those wedges.\n\nNext, in Graph Plot step we use axes.pie() to plot labelled pie chart using data from step 1.","76afc149":"# Summary 3\n\nWe prepared data and then plotted it as labelled pie chart.\n\nFirst, for **data preparation**, \n    We used **List comprehension** twice to obtain two numpy arrays,one for different types of wedges and other for wedge sizes.\n    And then, we used a **lambda funtion** for calculating and printing percentage of wedge sizes with respect to total.\n\nNext, for the **graph plot** we used an object oriented based interface of Matplotlib\n    We used **axes.pie()** which returned wedges, texts and autotexts.\n    And then, we used **axes.legend()** to which we passed wedges and types and used bbox_to_anchor to specify the position of the legend.\n    We used **axes.set_title()** to print title.\n\nFinally, **plt.setp()** to set properties on autotexts and **plt.show()** to show the image.\n","bfc4ce48":"## **Pandas**\n\nPandas Library is built on **NumPy**. It is used for data analysis and data manipulation. For that it provides 2 data structures namely **Series**(1-dimensional labelled array) and **DataFrame** (2-dimensional data structure). \n\nEach column of DataFrame can be thought of as a Series with index being Column name and data being list of all values present in that column. \n\nWe access *columns* of a DataFrame with *Python's Dictionary like Syntax* (array subscript). \n\nWe access *rows* of Dataframe with *loc* command.","c55886b1":"From above we can observe that,\n\nEach groups key is in form of a tuple(dr_grade,dme) and there are 4 groups with values (nan,nan) when gradable is 0.\n\nWe will remove nan tuple from our key_list. But before that Lets peek into data","80ab0a5f":"# Data Preparation Using GroupBy\n\nNow we want to do analysis using multiple columns at a time.","2a297e48":"1. subplots\nCreate a figure and a set of subplots.\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.subplots.html#matplotlib.pyplot.subplots\n\n2. subplot\nAdd a subplot to the current figure.\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.subplot.html\n\n3. matplotlib.axes\nhttps:\/\/matplotlib.org\/3.1.1\/api\/axes_api.html#matplotlib.axes.Axes\n\n4. matplotlib.axes.Axes.pie\nPlot a pie chart\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.axes.Axes.pie.html#matplotlib.axes.Axes.pie\n\n5. matplotlib.axes.Axes.bar\nPlot a bar chart\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.axes.Axes.pie.html#matplotlib.axes.Axes.pie\n\n6. matplotlib.figure\nmatplotlib.figure\nThe figure module provides the top-level Artist, the Figure, which contains all the plot elements.\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.figure.Figure.html#matplotlib.figure.Figure\n","9c5fd7ea":"# 1 Matplotlib Bar Charts and Pie Charts\nIn this section, first, we describe the data in this table, next, we understand a little bit of Pandas and after that we visualize with Matplotlib's Bar and Pie charts.","d21cd895":"# Graph Plotting","016586eb":"From above we can notice that, there is no row for (dr_grade =0.0, dme = 1.0 )\n\nWe have to remember that for (dr_grade =0.0, dme = 1.0 ) count is 0","c166b5d8":"From above result we can see that,\n\nFor category drgrade =0.0, there are 0 images with dme = 1.0, all images have dme = 0.0\n\nFor category drgrade =1.0, there are 8 images with dme = 1.0, 262 images with dme = 0.0\n\nFor category drgrade =2.0, there are 86 images with dme = 1.0, 261 images with dme = 0.0\n\nFor category drgrade =3.0, there are 42 images with dme = 1.0, 33 images with dme = 0.0\n\nFor category drgrade =4.0, there are 15 images with dme = 1.0, 20 images with dme = 0.0\n\n","141b95bb":"# **Data Visualization**\n\nLet us Visualize data inorder to get insights from it, analysing **one column at a time**, for all three columns.\n\nIn Data Description section we saw, names of different features of this dataset and what different values appear in the dataset. Now our task is to calculate **frequency** of each column i.e. how many times each value appears in dataset and present it graphically.\n\n","b18577aa":"Dataframe.shape and Dataframe.info() confirm the same.","38eacae4":"# 2 Matplotlib - Multiple Graphs in one figure\nIn this section we want to do two things.\n1. Use different color styles, this is the easy part and mainly for aesthetic reasons.\n2. Print multiple graphs in one figure so we need to understand how Matplotlib's Pyplot's subplot, Figure and Axes work. This part requires more effort and as you'll see doing effort will enlighten us about Matplotlib.\nSo let's start.\n","27cdfacf":"\nThus we used a style of our liking and plotted multiple graphs in same figure in object oriented way.\n\nFor style,\n    First, find the list of available styles with *plt.styles.available()*.\n    Next, choose any style with *plt.style.use('ggplot')*.\n\n\nFor multple graphs,\n    First, get multiple axes and figures using **subplots()**.\n        fig, (ax0, ax1, ax2) = plt.subplots(nrows=1, ncols=3, figsize=(15, 4))\n    Second, Prepare data for axes\n        x = gradable_counts.index.values\n        height = gradable_counts.values\n   Finally, plot bar graph or set titles and labels using method call on **axes**.\n        ax0.bar(x, height, width=0.5, align='center')\n        ax0.set(title = 'adjudicated_gradable Counts', xlabel='adjudicated_gradable' , ylabel = 'Number of Images')\n","ca7a5aa4":"# Appendix\n\nThis section contains links to Matplotlib's documentation on subplots, subplot, axes, axes.bar, axes.pie and figure.","8aea6157":"row 2 indicates, dr_grade = 1.0, no of images with dme=0 is 262 and no of images with dme=1 is 86","b56cf282":"# Summary 4\n\n\nWe used **GroupBy** to make groups based on certain columns and then did aggregate operation like count of those values within a group.\n\nWe used two **axes.pie()** to plot a nested Donut graph.","60099056":"Hope you enjoyed reading it. If you like it ,kindly upvote.\n\nHave a good day and thanks a lot.","7766a8f1":"## ** Matplotlib Bar Charts**\n\nA bar chart is used to compare *numeric quantities or counts* across *categories*. For instance, we may wish to compare the number of Ungradable or Gradable images.\n\nLet us create a bar chart showing the number Ungradable or Gradable images.","1249a5d4":"Suppose, instead of *sorting on frequency* ( **default behaviour** of Series.value_counts() ), we want to *sort by index*, we use sort_index().","9471eeb5":"Kindly UPVOTE to show appreciation if you find the work useful","bf2ff206":"# Summary 2\n\n","d15476c7":"# **Data Description**\n\nOne way of understanding data is describing for each of its columns ( features, attributes or variables), what values are present in dataset and how many times each value is present.This is known as *distribution* of that column.\n\n## **Column descriptions**\n\nDetails about different columns of this table are as follows, namely their *names* and different *values* they can take.\n\n1. **image_id**: Filename as provided in the Messidor 2 dataset.\n2. **adjudicated_dr_grade**: 5 point ICDR grade -      0=None;    1=Mild DR;    2=Moderate DR;    3=Severe DR;    4=PDR\n3. **adjudicated_dme**: Referable DME defined by Hard exudates within 1DD -     0=No Referable DME;    1=Referable DME\n4. **adjudicated_gradable**: Image quality grade -    0=Ungradable- no DR or DME grade is provided,    1=Gradable- both DR and DME were graded.\n\n## **Type of data**\n\nFrom above and also after looking at top 5 rows of the table, we see that this dataset contains ***Qualitative*** data i.e. columns\/features describe characteristics or quality of image. Even though values in columns are numerical, they are not any kind of measurement and thus any numerical operations cannot be applied to them.\n\nThree columns namely *image_id, adjudicated_dme* and *adjudicated_gradable* are ***Nominal*** data. Their values do not mean a bigger or smaller value  They are just named values for some property of the image quality.\n\nadjudicated_dr_grade is ***Ordinal*** data. Here the value is not itself a quantity or measurement, but it shows some kind of inherent order or heirarchy.\n\n","e229822a":"# Matplotlib Styles","5d566404":"The same can be done for *adjudicated_dr_grade* and *adjudicated_dme* as well.\n\n","f77c0767":"# Multiple Graphs in same Figure - State-based interface  \nWe specify nrows and ncols in pyplot's subplots method to get multiple axes for same figure.\nBesides, Y-axis has been shared using sharey=True.","4c0f18d1":"There are 1744 images which are Graded i.e where adjudicated_gradable is 1 and 4 images which are Ungraded i.e where adjudicated_gradable is 0\n\nThe same can be done for adjudicated_dr_grade and adjudicated_dme as well.\n","680a80e3":"# Data Preparation","3cd48684":"# References\nThis section contains links to code used from other peopls kernels.\n\n1. Quick Recipe for Pie  \nIt is taken from following kernel\nhttps:\/\/www.kaggle.com\/shuan3\/melboune-real-estate-market-comprehensive-analysis#Melboune-house-project-Layout\n\n","bfad4bd3":"# Plotting Donut Using axes.pie()\n\nNow we want to plot nested Donust using two axes.pie() .","84806e0b":"#### *Using value_counts (Pandas)*","29e24361":"\n## **Python describe command**\n\ndataframe.describe() command tells us about following \n\n*count* - Count number of non-NA\/null observations for that column; \n*mean* - Mean of the values of that column; \n*min* - Minimum of the values in the object;  \n*max* - Maximum of the values in the object and \n*25%, 50% and 75%* which returns the 25th, 50th, and 75th percentiles.\n\nSince this is *Qualitative* data, only **count** makes sense for us. Other quantitative values don't make sense for this particular dataset, though one could argue that percentiles could provide some insight for us. But first let's focus on *count* .\n\n\n\nDataframe.shape tells us about no of rows and columns.\n\n\n\nDataframe.info() tells us about data types of info in columns.\n\n\nFrom *count* for three columns we find that, *adjudicated_gradable* column has value 1748 rows while *adjudicated_dr_grade* and *adjudicated_dme* columns have value of 1744 rows. \n\n**Why is it so? Let us explore more !!!**\n\nValue returned by DataFrame.count is **Count of non-NA cells** for each column or row. \nThis means that there are (1748 - 1744 =) 4 rows where *adjudicated_dr_grade* and *adjudicated_dme* have NaN (Missing value marker in Pandas) values.\nFrom Column descriptions we know that for those rows corresponding value in *adjudicated_gradable* column should be 0.\n\n\n\nLet us peek into data to confirm it.","f1adbe86":"#### *Using collections (Python)*","5d8874a2":"# Multiple Graphs in same Figure - Object-oriented  \nWe specify nrows and ncols in pyplot's subplots method to get multiple axes for same figure.","e77d317c":"# 4 Matplotlib Nested Donut Chart\n\nIn this section we will analyze multiple columns at a time. \n\nFirst, in Data Preparation step, we use dataframe.groupby to group data in the table by 2 columns namely adjudicated_dr_grade and adjudicated_dme.\n\nNext, in Graph Plot step we use axes.pie() to plot Donut graph using data from step 1.","6fdc0371":"# Matplotlib\n\nMatplotlib has **two interfaces** namely **object-oriented interface** and **state-based interface**.\n**Till now** we had used **state-based interface** which is based on **MATLAB** and is encapsulated in the **pyplot module**.\nWith **object-oriented (OO) interface**, we use an **instance of Axes** to render **visualizations** on an **instance of Figure**. \n**In general, we should use the object-oriented interface over the pyplot interface**.\n\nFor Object Oriented interface, **main thing** to remember is that:\n1. Matplotlib's pyplot's **subplot method** returns the Figure and the Axes.\n2. The **Figure** is the final image that may contain 1 or more Axes.\n3. The **Axes** represents an individual plot (don't confuse this with the word \"axis\", which refers to the x\/y axis of a plot).\n4. We call methods that do the **plotting** directly from the **Axes**, which gives us much more **flexibility and power** in customizing our plot.\n","974ae0ef":"## **Counting values**\n\n*Using dictionary (Python)*","72d5a84a":"There are 1593 images for which adjudicated_dme is 0 and 151 images where adjudicated_dme is 1.","86876d6e":"# Summary1\n\nThus we plotted Bar charts and Pie charts in 2 simple steps.\n\nFirst, use value_counts() on dataframe[column_name] and then sort index using sort_index() .\n\nNext, use plot() on above obtained counts dictionary, specifying kind either bar or pie.","68dd779f":"\n## ** Matplotlib Pie Charts**\n\nWhat if, we want to show *what percentage of images* are Gradable, or what if, we are interested in knowing *percentages of different types* of adjudicated_dr_grades or adjudicated_dmes. In those situations pie charts come in handy.\n\nPie charts help us to compare *relative quantities of categories* especially when we few categories, they show the quantities as a fraction of the whole set of data.\n\nSo let us create pie charts for each of the columns, one column at a time."}}