{"cell_type":{"32cd7d05":"code","0cd7e4b7":"code","9913e180":"code","5596be46":"code","e36d3a72":"code","47f224e2":"code","84134018":"code","dcee8a3a":"code","8cbf49ad":"code","00df5c0d":"code","e3f67667":"code","ac57eb9a":"code","d138658c":"code","bc0a39eb":"markdown","5fd7cab6":"markdown","b1fd3e81":"markdown"},"source":{"32cd7d05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0cd7e4b7":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","9913e180":"# get imagefile \nimage = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\n\n# create the sharpen kernel\nsharpen_kernel = np.array([[0,-1,0], \n                           [-1, 7,-1],\n                           [0,-1,0]])\n#apply the sharpen kernel\nsharpened = cv2.filter2D(image, -1, sharpen_kernel)\n","5596be46":"plt.figure(figsize=(8,8))\nplt.imshow(image)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.imshow(sharpened)\nplt.title('Sharpen Image'), plt.xticks([]), plt.yticks([])","e36d3a72":"i = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nig = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ni = i.sum(axis=-1)","47f224e2":"def blur(i):\n    for x in range(1,i.shape[0]-1):\n        for y in range(1,i.shape[1]-1):\n            i[x,y] = (10*i[x,y] + i[x-1,y] + i[x+1,y] + i[x,y-1] + i[x,y+1])\/5.0\n    return i","84134018":"%timeit blur(i)","dcee8a3a":"plt.figure(figsize=(8,6))\nplt.imshow(ig, cmap=\"gray\")\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nblur(i)\nblur(i)\nblur(i)\nplt.figure(figsize=(8,6))\nplt.imshow(i, cmap=\"gray\")\nplt.title('Blur Image'), plt.xticks([]), plt.yticks([])","8cbf49ad":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","00df5c0d":"edge_Canny = cv2.Canny(img_gray,100,200)","e3f67667":"sobel_x = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=5)\nsobel_y = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=5)","ac57eb9a":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    q = int((m-1)\/2)\n    r, s = src.shape[0], src.shape[1]\n\n    app = np.zeros((r, s))\n\n    for y in range(q, r - q):\n        for x in range(q, s - q):\n           \n            app[y][x] = np.sum(src[y-q:y+q+1, x-q:x+q+1]*kernel)\n\n    return app\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 1,  1]])\n\napp = filter2d(gray, kernel)","d138658c":"plt.figure(figsize=(8,8))\nplt.subplot(2,2,1),plt.imshow(edge_Canny,cmap = 'gray')\nplt.title('Canny Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.subplot(2,2,2),plt.imshow(sobel_x,cmap = 'gray')\nplt.title('Sobel X Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.subplot(2,2,1),plt.imshow(sobel_y,cmap = 'gray')\nplt.title('Sobel Y Image'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(8,8))\nplt.subplot(2,2,4),plt.imshow(app,cmap = 'gray')\nplt.title('Laplacian Image'), plt.xticks([]), plt.yticks([])\n\nplt.show()","bc0a39eb":"========= IMAGE EDGE DETECTION ==========","5fd7cab6":"========= IMAGE SHARPENING ==========","b1fd3e81":"========= IMAGE BLURRING =========="}}