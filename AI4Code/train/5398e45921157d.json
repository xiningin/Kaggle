{"cell_type":{"32d7fdaa":"code","7982d6de":"code","201bd4c6":"code","cca7f2da":"code","11d3c763":"code","a4fc8af7":"code","543f64a0":"code","e61b78cd":"code","c313f158":"code","99db2366":"code","b94eb2ee":"code","d7b59399":"code","f0976b41":"code","5ff04a46":"code","43d3f2ff":"code","e3a7b3c8":"code","12b40eb8":"code","f4446e2b":"code","58004d14":"code","df845bf5":"code","b11ef025":"code","86ce76f1":"code","19b8ae02":"code","306becbb":"code","5ded0a06":"code","a2bd7275":"code","26ff964c":"code","d2e06b22":"markdown","f7139777":"markdown","47296daa":"markdown","91670061":"markdown","e332f768":"markdown","b35ed454":"markdown","baea0ce5":"markdown","980e8af5":"markdown","b323690c":"markdown","695a8032":"markdown","845d397d":"markdown","139a99e1":"markdown","04ec0902":"markdown","da400a11":"markdown","7776daf4":"markdown","537d8640":"markdown","6e4fbf91":"markdown","398ddf6a":"markdown","bca3a481":"markdown","c12ef6e7":"markdown","cbdda621":"markdown","162895ad":"markdown","44ccee8a":"markdown","7ab8731b":"markdown","7b4a69c2":"markdown","8f69e0e4":"markdown","9774abe6":"markdown","fb599a3f":"markdown","ba319660":"markdown","415a76e0":"markdown","46537e04":"markdown"},"source":{"32d7fdaa":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport folium\nimport seaborn as sns","7982d6de":"df = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndf.head()","201bd4c6":"df = df.dropna()","cca7f2da":"df = df.replace({'Telangana':'Telengana'})","11d3c763":"df['Date'] = pd.to_datetime(df.Date,dayfirst=True).dt.strftime('%Y-%m-%d')\ndf['Time'] = pd.to_datetime(df['Time']).dt.strftime('%H:%M:%S')\ndf.tail()","a4fc8af7":"df.info()","543f64a0":"df = df.loc[df['State\/UnionTerritory'] != 'Unassigned']\ndf = df.loc[df['State\/UnionTerritory'] != 'Cases being reassigned to states']","e61b78cd":"df_train = df[['ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths','Confirmed']]\nsns.pairplot(df_train)","c313f158":"df_u = df['State\/UnionTerritory'].unique()\ndf3 = pd.DataFrame()\nfor s in (df_u):\n                l = df.loc[df['State\/UnionTerritory'] == s]\n                l1= l['Sno'].idxmax(axis=1)\n                l2 = l.loc[l.index == l1]\n                df3 = df3.append([l2])\ndf3.head()                                            \n                                           \n                                                                ","99db2366":"df3 = df3.reset_index()\ndf3 = df3.drop(columns=['index','Sno'])\ndf3 = df3[['State\/UnionTerritory','Confirmed','Deaths','Cured']]\ndf3 = df3.loc[df3['State\/UnionTerritory'] != 'Unassigned']\ndf3 = df3.loc[df3['State\/UnionTerritory'] != 'Cases being reassigned to states']\ndf3.head()","b94eb2ee":"df3['Total Cases'] = (df3['Confirmed'] + df3['Deaths'] + df3['Cured']).astype(int)\ndf3.head()\n","d7b59399":"cols = df3[['State\/UnionTerritory','Total Cases']]\nstates = np.asarray(df3['State\/UnionTerritory'])\nplt.figure(figsize=(15,10))\np = sns.barplot(x=df3['State\/UnionTerritory'],y=df3['Total Cases'])\np.set_xticklabels(labels=states,rotation=90)\nplt.title('Total Cases in India');","f0976b41":"import matplotlib.ticker as ticker\nfig =plt.figure(figsize=(20,20));\nfor i,j in zip(df_u,range(1,len(df_u))):\n                                                                        g = df.loc[df['State\/UnionTerritory']==i]\n                                                                        x = g['Date']\n                                                                        y = g['Confirmed']\n                                                                        ax = plt.subplot(9,4,j)\n                                                                        ax.plot(x,y)\n                                                                        plt.xticks(rotation=90)\n                                                                        plt.title(i)\n                                                                        fig.tight_layout(pad=3.0)\n                                                                        ax.xaxis.set_major_locator(ticker.MultipleLocator(10))\n                                                                        ","5ff04a46":"df_testing = pd.read_csv('\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\ndf_testing = df_testing.fillna(0)\ndf_testing['Date'] = pd.to_datetime(df_testing['Date']).dt.strftime('%Y-%m-%d')\ndf_testing.head()","43d3f2ff":"fig =plt.figure(figsize=(20,20))\n\nfor i,j in zip(df_u,range(1,len(df_u))):        \n                                                                        g = df_testing.loc[df_testing['State']==i]\n                                                                        x = g['Date']\n                                                                        y = g['TotalSamples']\n                                                                        ax = plt.subplot(9,4,j)\n                                                                        ax.plot(x,y,color='green')\n                                                                        plt.xticks(rotation=90)\n                                                                        plt.title(i)\n                                                                        fig.tight_layout(pad=3.0)\n                                                                        ax.xaxis.set_major_locator(ticker.MultipleLocator(10))\n                                                                        \n                                                                        ","e3a7b3c8":"fig =plt.figure(figsize=(20,20))\n\nfor i,j in zip(df_u,range(1,len(df_u))):        \n                                                                        g = df_testing.loc[df_testing['State']==i]\n                                                                        x = g['Date']\n                                                                        y = g['Positive']\n                                                                        ax = plt.subplot(9,4,j)\n                                                                        ax.plot(x,y,color='red')\n                                                                        plt.xticks(rotation=90)\n                                                                        plt.title(i)\n                                                                        fig.tight_layout(pad=3.0)\n                                                                        ax.xaxis.set_major_locator(ticker.MultipleLocator(10))\n                                                                        ","12b40eb8":"df4 = pd.DataFrame(columns=[])\nfor i in df_u:\n            state = df.loc[df['State\/UnionTerritory'] == i]\n            state1 = df_testing.loc[df_testing['State'] == i]\n            \n            for j in state['Date']:\n                                        t = state1.loc[state1['Date'] == j]\n                                        t1 = state.loc[state['Date'] == j]\n                                        df4 = df4.append(t1.merge(t,how='outer',on=['Date']))\n\n                                       \n                             ","f4446e2b":"df4 = df4.drop(columns=['Time','ConfirmedIndianNational','ConfirmedForeignNational','State'],axis=1)\ndf4 = df4.fillna(0)\ndf4 = df4.reset_index()\ndf4 = df4.drop(columns = ['index','Sno'],axis=1)\ndf4","58004d14":"coff = df4.corr()\ncoff[['Confirmed']]","df845bf5":"from sklearn.utils import shuffle\ndf5 = shuffle(df4)\ndf5 = df5.reset_index()\ndf5= df5.drop(columns=['index'],axis=1)\ndf5 = df5.sort_values(by='Date')\ndf5","b11ef025":"import ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual\n@interact\ndef forecast_model(State = df_u,days = 5):\n                                df6 = df5.loc[df5['State\/UnionTerritory'] == State]\n                                df6 = df6[['Date','Confirmed','TotalSamples','Positive']]\n                                df6.index = df6['Date']\n                                df6 = df6.drop(columns=['Date'])\n                                df6_upd = df6.loc[df6.index != df6.index.max()]\n                                \n                        # Fit the exisiting data trends to the forecast model\n                                from statsmodels.tsa.vector_ar.vecm import coint_johansen\n                                jtest = coint_johansen(df6_upd,1,1);\n                                from statsmodels.tsa.vector_ar.var_model import VAR\n                                m = VAR(df6_upd);\n                                model = m.fit();\n                            #    ax = model.plot();\n                             #   ax.tight_layout(pad=3.0)\n                       # predict the model         \n                                valid_pred = model.forecast(model.y,steps=days);\n                             #   ax = model.plot_forecast(days);\n                            #    ax.tight_layout(pad=3.0)\n                                df7 = pd.DataFrame(valid_pred.round(0),columns=[['Confirmed','TotalSamples','Positive']])\n                                df7.index = pd.date_range(df6.index.max(),periods=days);\n                                \n                       #plot predictions         \n                                plt.figure(figsize=(10,5))\n\n                                plt.subplot(1,2,1)\n                                plt.plot(df7[['Confirmed']],color='red')\n                                plt.xticks(df7.index,rotation=90)\n                                plt.tight_layout(pad=7.0)\n                                plt.title('Confirmed cases')\n                                plt.subplot(1,2,2)\n                                plt.plot(df7[['TotalSamples']])\n                                plt.xticks(df7.index,rotation=90)\n                                plt.title('Total Samples to be tested')\n                                return df7\n                                ","86ce76f1":"df8 = pd.DataFrame(columns=[['State','Confirmed','TotalSamples','Positive']])\ndf10 = pd.DataFrame()\ndf_f = pd.DataFrame()\nfor i in df_u:\n                                df9 = df5.loc[df5['State\/UnionTerritory'] == i]\n                                df9 = df9[['Date','Confirmed','TotalSamples','Positive']]\n                                df9.index = df9['Date']\n                                df9 = df9.drop(columns=['Date'])\n                                df9_upd = df9.loc[df9.index != df9.index.max()]\n                                \n                        # Fit the exisiting data trends to the forecast model\n                                if i != 'Daman & Diu':\n                                                                                \n                                                                                    from statsmodels.tsa.vector_ar.var_model import VAR\n                                                                                    m = VAR(df9_upd) \n                                                                                    model = m.fit()\n                                                                               # predict the model         \n                                                                                    valid_pred = model.forecast(model.y,steps=10);\n                                                                                    df8 = pd.DataFrame(valid_pred.round(0))\n                                                                                    df8.index = pd.date_range(df9.index.max(),periods=10);\n                                                                                    for j in range(len(df8)):\n                                                                                                                df10 = df10.append([i])\n                                                                                    df10.index = pd.date_range(df9.index.max(),periods=10);\n                                                                                    df_f = df_f.append(df10.merge(df8,how='outer',on=df10.index))\n                                                                                    df10 = pd.DataFrame()\n                                                        \n                                ","19b8ae02":"df_forecast = df_f\ndf_forecast.columns=[['Date','State','Confirmed','TotalSamples','Positive']]\ndf_forecast = df_forecast.reset_index()\ndf_forecast = df_forecast.drop(columns=['index'],axis=1);\ndf_forecast","306becbb":"df_forecast.to_csv('\/kaggle\/working\/forecast.csv')\nout = pd.read_csv('\/kaggle\/working\/forecast.csv')\nout.head()","5ded0a06":"fig =plt.figure(figsize=(20,20))\n\nfor i,j in zip(df_u,range(1,len(df_u))):        \n                                                                        g = out.loc[out['State']==i]\n                                                                        x = g['Date']\n                                                                        y = g['Confirmed']\n                                                                        ax = plt.subplot(9,4,j)\n                                                                        ax.plot(x,y,color='red')\n                                                                        plt.xticks(rotation=90)\n                                                                        plt.title(i)\n                                                                        fig.tight_layout(pad=3.0)\n                                                                        ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n                                                                        ","a2bd7275":"df2 = pd.read_csv('\/kaggle\/input\/states\/states.csv')\ndf2.head()","26ff964c":"import folium\nind_map = folium.Map(location=(20,78),zoom_state=2)\n@interact\ndef map_view(Date=out['Date']):\n                    for i in df2['State']:\n                                            d = out.loc[out['State'] == i]\n                                            d1 = df2.loc[df2['State'] == i]\n                                            d2 = d.loc[d['Date'] == Date]\n\n                                            label = folium.Popup('Date:'+ str(Date) + ',' + str(d2[['Confirmed']]) + ','+ str(d2[['Positive']]), parse_html=True)\n                                         \n                                            folium.Marker(\n                                                    [d1['Latitude'],d1['Longitude']],\n                                                    radius=10,\n                                                    popup=label,\n                                                    fill=True,\n                                                    fill_opacity=0.7).add_to(ind_map)\n                    return ind_map\n\n\n","d2e06b22":"## Total cases in each state in India","f7139777":"This merging is done to build a model that will predict the covid 19 cases based on the samples tested and positive\/ negative cases observed everyday.","47296daa":"From the graph, Delhi,TN,Maharashtra and Gujarat are having more than 1L cases till date. While other states have minimal cases.","91670061":"## Rate of increase in confirmed cases based on Date","e332f768":"For every state, the number of samples tested provides a considerable percentage of positive cases. For example, in case of TN, out of 6lakh samples, 5% of the samples were positive. On the other hand, some states have a constant positive case rate which means there were no positive cases for few days.\n\nAn inference from the above observations is that testing samples on a daily basis has certainly helped in detecting a considerable amount of positive cases. ","b35ed454":"The above graph is a time-series graph depicting the confirmed cases until date. Most of the states have a steady \/ exponential increase in the number of confirmed cases. ","baea0ce5":"Most of the states have a steady increase in the cases for this particular week. With better testing rates, the confirmed cases are identified more easily.","980e8af5":"## Model Development","b323690c":"Since the recent count of the cases is recorded on the current date. The last record of each dataset is considered for visualisation","695a8032":"## Prediction using VAR Model","845d397d":"## Inference","139a99e1":"Calculation of the total cases in each state","04ec0902":"## Positive cases tested everyday in each state","da400a11":"## Samples Tested","7776daf4":"Date and time conversion to make the dataset as a time-series data","537d8640":"# CoVid 19 - Prediction using VAR model","6e4fbf91":"****The objective of this notebook is to generate a time series model using VAR to predict the confirmed ,samples tested and positive cases for each state for the upcoming days.****","398ddf6a":"Since the dataset is a time-series data, Vector Auto Regression (VAR) is used for future forecasting. VAR model is used due to multiple features that needs to be predicted such as Confirmed,Total samples tested, positive and negative cases.","bca3a481":"Before training the model, johansen test is performed to inspect the stationarity of the dataset.After the test, all the eigen values for the respective features are less than 1. Hence, the dataset is stationary and no further differncing\/intergration is required.\n\nFurther, the VAR model is trained with the data of a single state and the same is used to predict the cases for the upcoming days.\n\nThe below model is an interactive one where the user can provide the state and number of days of prediction required. Though, the model can predict for n number of days, it is hard to represent the large data in the graph. Hence, a maximum of 10 to 20 days can be sent as input for a better visualisation.\n\n***Note***: Telengana,Daman&Diu,Dadar and Nagar Haveli has no testing sample data. Hence, forecast is not predicted for these states alone. Also, for few states, the number of samples tested is zero. Hence, the Johansen test will fail and predictions cant be made.","c12ef6e7":"## Merging testing details with the main covid-19 dataset","cbdda621":"## Total samples collected everyday in each state","162895ad":"Based on the correlation coefficient, it is best to use Total samples, Positive and Negative features as independant variables. While cured and death feature provides the perfect correlation coefficient, it can't be used in predicting the confirmed cases since those two features are dependent on the latter.","44ccee8a":"The sample collection rate in most of the states on an every day basis is increasing exponentially. However, this feature will be suitable for prediction only if 87% of the samples get tested and are categorised as 'positive' or 'negative'. For some states, the sample collection rate is less and hence, it would be difficult to predict the testing rate using the ML model.","7ab8731b":"The interact mode works only when Kernal is active. The purpose is to view different count for each of the dates for which the forecast has been done.","7b4a69c2":"## Correlation between the numerical parameters","8f69e0e4":"**The interactive model will run only when Kernal is active**","9774abe6":"## Interactive Map Viz using Folium","fb599a3f":"Based on the graph, the rate of curing a person will be more when compared to the rate of deaths caused in a state. Likewise, the rate of confirmed cases will be increasing more than the rate at which the persons are cured.","ba319660":"From the forecast model, it is understood that in the forthcoming week, most of the states have a steady increase in confirmed cases. While few states such as Karnataka shows a steep decline in the cases. Gujarat shows a decrease in initial days but it increases steadily after 2 days.","415a76e0":"## Data Wrangling","46537e04":"## Numerical variable dependency"}}