{"cell_type":{"a43b4d66":"code","635ae0b4":"code","fc093c1a":"code","032658f5":"code","1ed0350c":"code","67d0b495":"code","e74c9933":"code","f319f768":"code","06de8a01":"code","17767841":"code","55d1213e":"code","ccb081ae":"code","72a2d079":"code","52f5b55d":"code","2e67c13d":"code","300cef71":"code","02616f43":"code","2149884c":"code","72d0e9de":"code","5562226f":"code","2c604069":"code","8d7f8932":"code","a3ed1dd5":"code","6aa6092f":"code","e4c55a68":"code","df318860":"code","11a28242":"code","6079ae04":"code","d6302634":"code","dca4796d":"code","506dd9af":"code","161ca2ca":"code","f347f663":"code","d79743b9":"code","0209ba8a":"code","13da60c5":"code","2e9526aa":"code","5cd1b51e":"code","9433d2ae":"code","40c4f06a":"code","a5be0cac":"code","7be96e21":"code","273921fb":"code","30637783":"code","4a4e1495":"code","20c2341e":"code","c7609ed1":"code","b1ec2fe4":"code","60b51d2b":"code","457d1859":"code","dcfd2669":"code","afb732ad":"code","b80592ca":"code","9077c2b3":"code","ab5ed2d9":"code","544fa497":"code","cd2f6eab":"code","5ae51f92":"code","b048be37":"code","b463701b":"code","94a02b66":"code","1960c04a":"code","98c96658":"code","f3a112bf":"code","451b18f6":"code","b22a2073":"code","8901be57":"code","c4b00dda":"code","2099a046":"code","9e183450":"code","808b9bac":"code","1f6ac5ef":"code","dc2d2ddf":"code","caec3468":"markdown","8f98b9bf":"markdown","8f8e9e3f":"markdown","f0ab6564":"markdown","d6830c5a":"markdown","bafe1b07":"markdown","da2e1a6b":"markdown","e86d1c2a":"markdown","a91a1a57":"markdown","28252160":"markdown","76ff50a3":"markdown","bf01cd85":"markdown","e2962f9e":"markdown","4cfff1bb":"markdown","d4061dcc":"markdown","123cc7d9":"markdown","ffe3153e":"markdown","f0a2ff8a":"markdown"},"source":{"a43b4d66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","635ae0b4":"titanic_train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntitanic_train_data.head()","fc093c1a":"titanic_test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntitanic_test_data.head()","032658f5":"women = pd.DataFrame(columns= ['Survived'])\nfor i in range(len(titanic_train_data.Sex)):\n    if (titanic_train_data.Sex[i] == 'female'):\n        women.Survived.loc[i] = titanic_train_data.Survived[i]\n        ","1ed0350c":"test = titanic_train_data.iloc[(titanic_train_data.Sex == 'female').values]['Survived']\n\ntest","67d0b495":"sum(women.Survived)\/len(women.Survived)","e74c9933":"# women = titanic_train_data.loc[titanic_train_data.Sex == 'female'][\"Survived\"]\n# #rate_women = sum(women)\/len(women)\n# sum(women)","f319f768":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nfeature_set = ['Pclass','Parch','SibSp','Sex']\n\nX = pd.get_dummies(titanic_train_data[feature_set])\ntest_X =  pd.get_dummies(titanic_test_data[feature_set])\ny = titanic_train_data['Survived']\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5,random_state=1)\nmodel.fit(X,y)\nyhat = model.predict(test_X)\n\noutput = pd.DataFrame({'PassengerId': titanic_test_data.PassengerId, 'Survived': yhat}).to_csv(\"my_submission.csv\", index=False)\nprint(\"Your submission was successfully saved!\")","06de8a01":"from sklearn.linear_model import LogisticRegression","17767841":"titanic_train_data.isna().sum()","55d1213e":"dummy = pd.get_dummies(titanic_train_data.Sex)\nX = titanic_train_data\nX = pd.concat([X, dummy], axis=1)\nX","ccb081ae":"X.drop(['female','Sex'], axis =1, inplace=True)\n#Removing categorical Sex & Female column and changing Male column name to Sex","72a2d079":"X.rename(columns = {'male':'Sex'},inplace = True)\nX","52f5b55d":"# Countinous variables Decribe:\nX.describe(include='O')","2e67c13d":"#Let's do correlation: - First check with Pclass:\n\nX[['Pclass', 'Survived']].groupby('Pclass').mean()","300cef71":"X[['Sex', 'Survived']].groupby('Sex').mean()","02616f43":"X[['SibSp', 'Survived']].groupby('SibSp').mean()","2149884c":"X[['Parch', 'Survived']].groupby('Parch').mean().sort_values(by = 'Survived', ascending = False)","72d0e9de":"X.drop(['PassengerId','Ticket' ], axis =1, inplace=True)\nX","5562226f":"X.isna().sum()","2c604069":"#sb.countplot(X.Survived)","8d7f8932":"X.Embarked.value_counts()","a3ed1dd5":"X.Embarked.mode()[0]","6aa6092f":"X.Embarked.fillna(X.Embarked.mode()[0], inplace=True)\nX.Embarked.value_counts()","e4c55a68":"X.Name[30]","df318860":"temp = X.Name.str.split('.',expand = True)[0]\ntemp[0:50]","11a28242":"X['Salutation'] = temp.str.split(',',expand = True)[1]","6079ae04":"X.Salutation = X.Salutation.str.lstrip()","d6302634":"X = X[['Salutation','Name', 'Age','Sex','Pclass','SibSp','Parch','Fare','Cabin','Embarked','Survived']]\nX.head(30)","dca4796d":"X.Salutation.unique()","506dd9af":"#sb.boxplot(x=X.Salutation, y= X.Age)\n#sb.countplot(X.Salutation)\nX.Salutation.groupby(X.Salutation).count().sort_values(ascending=False)","161ca2ca":"Mr = 0\nMiss = 0\nMrs=0\nMaster  = 0\nDr = 0\nRev= 0\nCol= 0        \nMlle = 0    \nMajor = 0\n\n\nfor i in range(len(X.Age)):\n    if X.Age.isnull()[i]:\n        if X.Salutation[i] == 'Mr':\n            Mr = Mr +1\n        elif X.Salutation[i] == 'Miss':\n            Miss = Miss +1\n        elif X.Salutation[i] == 'Mrs':\n            Mrs = Mrs +1\n        elif X.Salutation[i] == 'Master':\n            Master = Master +1\n        elif X.Salutation[i] == 'Dr':\n            Dr = Dr +1\n        elif X.Salutation[i] == 'Rev':\n            Rev = Rev +1\n        elif X.Salutation[i] == 'Col':\n            Col = Col +1\n        elif X.Salutation[i] == 'Mlle':\n            Mlle = Mlle +1\n        elif X.Salutation[i] == 'Major':\n            Major = Major +1\n\nprint(\"Total Mr's = \", Mr)\nprint(\"Total Miss = \", Miss)\nprint(\"Total Mrs = \", Mrs)\nprint(\"Total Master = \", Master)\nprint(\"Total Dr = \", Dr)\nprint(\"Total Rev = \", Rev)\nprint(\"Total Col = \", Col)\nprint(\"Total Mlle = \", Mlle)\nprint(\"Total Major = \", Major)","f347f663":"np.mean(X.loc[X.Salutation == 'Mr']['Age'])","d79743b9":"X.loc[X.Salutation == 'Mr']['Age'].median()","0209ba8a":"X.Age.groupby(X.Salutation=='Mr').mean()","13da60c5":"X.Age.groupby(X.Salutation=='Mr').median()","2e9526aa":"round(np.mean(X.loc[X.Salutation == 'Mr']['Age']),2)","5cd1b51e":"for i in range(len(X.Age)):\n    if X.Age.isnull()[i]:\n        if X.Salutation[i] == 'Mr':\n            X.Age[i] = round(np.mean(X.loc[X.Salutation == 'Mr']['Age']),2)\n        elif X.Salutation[i] == 'Miss':\n             X.Age[i] = round(np.mean(X.loc[X.Salutation == 'Miss']['Age']),2)\n        elif X.Salutation[i] == 'Mrs':\n              X.Age[i] = round(np.mean(X.loc[X.Salutation == 'Mrs']['Age']),2)\n        elif X.Salutation[i] == 'Master':\n            X.Age[i] = round(np.mean(X.loc[X.Salutation == 'Master']['Age']),2)\n        elif X.Salutation[i] == 'Dr':\n            X.Age[i] = round(np.mean(X.loc[X.Salutation == 'Dr']['Age']),2)","9433d2ae":"Mr = 0\nMiss = 0\nMrs=0\nMaster  = 0\nDr = 0\nRev= 0\nCol= 0        \nMlle = 0    \nMajor = 0\n\n\nfor i in range(len(X.Age)):\n    if X.Age.isnull()[i]:\n        if X.Salutation[i] == 'Mr':\n            Mr = Mr +1\n        elif X.Salutation[i] == 'Miss':\n            Miss = Miss +1\n        elif X.Salutation[i] == 'Mrs':\n            Mrs = Mrs +1\n        elif X.Salutation[i] == 'Master':\n            Master = Master +1\n        elif X.Salutation[i] == 'Dr':\n            Dr = Dr +1\n        elif X.Salutation[i] == 'Rev':\n            Rev = Rev +1\n        elif X.Salutation[i] == 'Col':\n            Col = Col +1\n        elif X.Salutation[i] == 'Mlle':\n            Mlle = Mlle +1\n        elif X.Salutation[i] == 'Major':\n            Major = Major +1\n\nprint(\"Total Mr's = \", Mr)\nprint(\"Total Miss = \", Miss)\nprint(\"Total Mrs = \", Mrs)\nprint(\"Total Master = \", Master)\nprint(\"Total Dr = \", Dr)\nprint(\"Total Rev = \", Rev)\nprint(\"Total Col = \", Col)\nprint(\"Total Mlle = \", Mlle)\nprint(\"Total Major = \", Major)","40c4f06a":"X.head(30)","a5be0cac":"X.isna().sum()","7be96e21":"X.drop('Cabin', axis=1, inplace=True)","273921fb":"X.isna().sum()","30637783":"print(X.to_string())","4a4e1495":"X.Embarked.unique()","20c2341e":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nX.Embarked = label_encoder.fit_transform(X.Embarked)\n#Embarked is multi-nomial variable and has to be changed in BINARY - Using PD.Dummy","c7609ed1":"dummy_embarked = pd.get_dummies(X.Embarked)\ndummy_embarked.rename(columns={0:'C',1:'Q',2:'S'}, inplace=True)\ndummy_embarked","b1ec2fe4":"X = pd.concat([X,dummy_embarked],axis=1)\nX","60b51d2b":"X.drop('Embarked', inplace=True, axis = 1)","457d1859":"X.info()","dcfd2669":"X_test = titanic_test_data\n ","afb732ad":"X_test.isna().sum()\n#titanic_test_data.isna().sum()","b80592ca":"temp_test = X_test.Name.str.split('.',expand = True)[0]\ntemp_test.head(2)","9077c2b3":"X_test['Salutation'] = temp_test.str.split(',', expand = True,)[1]","ab5ed2d9":"X_test.Salutation = X_test.Salutation.str.lstrip()\nX_test.Salutation.values","544fa497":"for i in range(len(X_test.Age)):\n    if X_test.Age.isnull()[i]:\n        if X_test.Salutation[i] == 'Mr':\n            X_test.Age[i] = round(np.mean(X_test.loc[X_test.Salutation == 'Mr']['Age']),2)\n        elif X_test.Salutation[i] == 'Miss':\n             X_test.Age[i] = round(np.mean(X_test.loc[X_test.Salutation == 'Miss']['Age']),2)\n        elif X_test.Salutation[i] == 'Mrs':\n              X_test.Age[i] = round(np.mean(X_test.loc[X_test.Salutation == 'Mrs']['Age']),2)\n        elif X_test.Salutation[i] == 'Master':\n            X_test.Age[i] = round(np.mean(X_test.loc[X_test.Salutation == 'Master']['Age']),2)\n        elif X_test.Salutation[i] == 'Dr':\n            X_test.Age[i] = round(np.mean(X_test.loc[X_test.Salutation == 'Dr']['Age']),2)\n        elif X_test.Salutation[i] == 'Ms':\n            X_test.Age[i] = round(np.mean(X.loc[X.Salutation == 'Ms']['Age']),2)\n            ","cd2f6eab":"X_test.isna().sum()","5ae51f92":"Mr = 0\nMiss = 0\nMrs=0\nMaster  = 0\nDr = 0\nRev= 0\nCol= 0        \nMlle = 0    \nMajor = 0\nMs = 0\n\n\nfor i in range(len(X_test.Age)):\n    if X_test.Age.isnull()[i]:\n        if X_test.Salutation[i] == 'Mr':\n            Mr = Mr +1\n        elif X_test.Salutation[i] == 'Miss':\n            Miss = Miss +1\n        elif X_test.Salutation[i] == 'Mrs':\n            Mrs = Mrs +1\n        elif X_test.Salutation[i] == 'Master':\n            Master = Master +1\n        elif X_test.Salutation[i] == 'Dr':\n            Dr = Dr +1\n        elif X_test.Salutation[i] == 'Rev':\n            Rev = Rev +1\n        elif X_test.Salutation[i] == 'Col':\n            Col = Col +1\n        elif X_test.Salutation[i] == 'Mlle':\n            Mlle = Mlle +1\n        elif X_test.Salutation[i] == 'Major':\n            Major = Major +1\n        elif X_test.Salutation[i] == 'Ms':\n            Ms = Ms +1\n\nprint(\"Total Mr's = \", Mr)\nprint(\"Total Miss = \", Miss)\nprint(\"Total Mrs = \", Mrs)\nprint(\"Total Master = \", Master)\nprint(\"Total Dr = \", Dr)\nprint(\"Total Rev = \", Rev)\nprint(\"Total Col = \", Col)\nprint(\"Total Mlle = \", Mlle)\nprint(\"Total Major = \", Major)\nprint(\"Total Ms = \", Ms)","b048be37":"#X_test.Embarked = label_encoder.fit_transform(X_test.Embarked)\nX_test","b463701b":"dummy_embarked_test = pd.get_dummies(X_test.Embarked)","94a02b66":"dummy_embarked_test.rename(columns={0:'C',1:'Q',2:'S'}, inplace=True)\ndummy_embarked_test","1960c04a":"X_test = pd.concat([X_test,dummy_embarked_test], axis=1)\n# X_test","98c96658":"X_test.drop(['Embarked','Name', 'Ticket', 'Fare', 'Cabin'], axis =1, inplace=True)","f3a112bf":"input_feature_set = ['Age','Sex','Pclass','SibSp','Parch','C','Q','S']\noutput_feature_set = ['Survived']","451b18f6":"X_test","b22a2073":"gender = pd.get_dummies(X_test.Sex)","8901be57":"X_test = pd.concat([X_test, gender], axis=1)","c4b00dda":"X_test.drop(['Sex', 'female'],axis =1, inplace=True)","2099a046":"X_test.rename(columns={'male':'Sex'}, inplace=True)","9e183450":"X_test","808b9bac":"from sklearn.linear_model import LogisticRegression\nLR_Model = LogisticRegression(solver='liblinear')\nLR_Model.fit(X[input_feature_set], X[output_feature_set].values.ravel())","1f6ac5ef":"LR_yhat = LR_Model.predict(X_test[input_feature_set])","dc2d2ddf":"output = pd.DataFrame({'PassengerId': titanic_test_data.PassengerId, 'Survived': LR_yhat}).to_csv(\"my_Logistics_regression_submission_1.csv\", index=False)\nprint(\"Your submission was successfully saved!\")","caec3468":"Another Simple way to accomplish","8f98b9bf":"Using - Logistics Regression","8f8e9e3f":"Since Mean is 32 for Mr that looks more promising, impute the values repectively","f0ab6564":"Converting Categorical varibales to Numerical -> Embarked","d6830c5a":"Let's Drop Cabin - Since Majority of data is NULL","bafe1b07":"Removing extra space on Left side","da2e1a6b":"Imputing missing values in TEST Data Set","e86d1c2a":"Test Data set -> Converting Embarked into BINARY","a91a1a57":"Since most of the boarding happened from S in Embarked, we will impute the mode value @ NaN values","28252160":"Imputing missing values - of AGE on the basis of of the one's parents & children\n","76ff50a3":"1st Way","bf01cd85":"Removing categorical Sex & Female column and changing Male column name to Sex","e2962f9e":"2nd Way","4cfff1bb":"Accoring to their Salutation -> Imputing the missing values on the Median\/Mean =>Let's take Mean","d4061dcc":"One way to accomplish - How many Females survived.","123cc7d9":"Drop Embarked now.","ffe3153e":"Imputing the empty AGE data with the help of Title given in NAME","f0a2ff8a":"Dropping Name, ticket number, and passenger ID number"}}