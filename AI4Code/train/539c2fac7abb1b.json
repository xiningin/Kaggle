{"cell_type":{"070703d5":"code","e5fb6667":"code","f0c28a68":"code","bfe401c7":"code","2b2809b7":"code","b29da958":"code","7c7c97f0":"code","745b9ffa":"code","b98a354e":"code","c4c9bc09":"code","85bf6119":"code","0100bf5b":"code","5eafe869":"code","8b824041":"code","3f8d8bdb":"code","322c3544":"code","7091e28d":"code","9f36077d":"code","f1dfc863":"code","a90f4664":"code","1798f25e":"code","f1164791":"code","fe603f4b":"code","cbf25e4d":"code","ecfd2087":"markdown","24a31139":"markdown","359cba51":"markdown","24b9a1d6":"markdown","d59a4033":"markdown","efec6c8b":"markdown","88d7612f":"markdown","c01bf7a1":"markdown","def80334":"markdown","9a1020ef":"markdown","d0c629e3":"markdown","2a7ec310":"markdown","bed484d8":"markdown","dafe9904":"markdown"},"source":{"070703d5":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n%matplotlib inline","e5fb6667":"df = pd.read_csv('..\/input\/nutrition-facts\/menu.csv')\ndf.head(1)","f0c28a68":"df.isnull().any()","bfe401c7":"df.shape ","2b2809b7":"df.info()","b29da958":"df.describe()","7c7c97f0":"df.isnull().sum()","745b9ffa":"sns.set(font_scale=2)\nplt.figure(figsize=(15, 10))\nsns.countplot(y='Category', data=df)","b98a354e":"df.hist (bins=10,figsize=(35,25))\nplt.show ()","c4c9bc09":"df.plot(kind='hist',figsize=(20,8))","85bf6119":"sns.set(font_scale=1.5)\nplt.figure(figsize=(22,8))\ncorr = (df.corr())\nsns.heatmap(corr, xticklabels=corr.columns.values, yticklabels=corr.columns.values,cmap=\"YlGnBu\",annot=True,linewidths=.5, fmt=\".2f\")\nplt.title(\"Pearson Correlation of all Nutrient Elements\")","0100bf5b":"df.corr()","5eafe869":"f,ax=plt.subplots(2,2,figsize=(25,15))\nv1= sns.violinplot(x=\"Category\", y=\"Calories\",data=df, palette=\"muted\",ax=ax[0][0])\nax[0][0].set_xticklabels(ax[0][0].get_xticklabels(), rotation=45,horizontalalignment='right')\nv1= sns.violinplot(x=\"Category\", y=\"Carbohydrates\",data=df, palette=\"muted\",ax=ax[0][1])\nax[0][1].set_xticklabels(ax[0][1].get_xticklabels(), rotation=45,horizontalalignment='right')\nv1= sns.violinplot(x=\"Category\", y=\"Dietary Fiber\",data=df, palette=\"muted\",ax=ax[1][0])\nax[1][0].set_xticklabels(ax[1][0].get_xticklabels(), rotation=45,horizontalalignment='right')\nv1= sns.violinplot(x=\"Category\", y=\"Protein\",data=df, palette=\"muted\",ax=ax[1][1])\nax[1][1].set_xticklabels(ax[1][1].get_xticklabels(), rotation=45,horizontalalignment='right')","8b824041":"f,axes=plt.subplots (1,1,figsize=(15,4))\nsns.distplot(df['Calories'],kde=True,hist=True,color=\"g\")","3f8d8bdb":"f,axes=plt.subplots (1,1,figsize=(15,4))\ndf['Category'].replace([0], 'Beef & Pork', inplace=True) \ndf['Category'].replace([1], 'Beverages', inplace=True) \ndf['Category'].replace([2], 'Breakfast', inplace=True) \nsns.kdeplot(df.loc[(df['Category']=='Breakfast'), 'Calories'], color='b', shade=True, Label='Breakfast')\nsns.kdeplot(df.loc[(df['Category']=='Coffee & Tea'), 'Calories'], color='g', shade=True, Label='Coffee & Tea')\nsns.kdeplot(df.loc[(df['Category']=='Smoothies & Shakes'), 'Calories'], color='r', shade=True, Label='Smoothies & Shakes')\nplt.xlabel('Calories') \nplt.ylabel('Probability Density') ","322c3544":"f,axes = plt.subplots(1,1,figsize=(10,5),sharex = True,sharey =True)\ns=np.linspace(0,3,10)\ncmap = sns.cubehelix_palette(start=0.0, light=1, as_cmap=True)\nx = df['Cholesterol (% Daily Value)'].values\ny = df['Sodium (% Daily Value)'].values\nsns.kdeplot(x,y,cmap=cmap,shade=True,cut = 5)","7091e28d":"f,ax=plt.subplots(1,3,figsize=(25,5))\nbox1=sns.boxplot(data=df[\"Dietary Fiber (% Daily Value)\"],ax=ax[0])\nax[0].set_xlabel('Dietary Fiber (% Daily Value)')\nbox1=sns.boxplot(data=df[\"Calcium (% Daily Value)\"],ax=ax[1])\nax[1].set_xlabel('Calcium (% Daily Value)')\nbox1=sns.boxplot(data=df[\"Iron (% Daily Value)\"],ax=ax[2])\nax[2].set_xlabel('Iron (% Daily Value)')","9f36077d":"ax = sns.scatterplot(x=\"Carbohydrates (% Daily Value)\", y=\"Category\",color = \"orange\",data=df)\nax = sns.scatterplot(x=\"Calcium (% Daily Value)\", y=\"Category\",color = \"blue\",data=df)\nax = sns.scatterplot(x=\"Iron (% Daily Value)\", y=\"Category\",color = \"green\",data=df)","f1dfc863":"df.head(1)\ndf1=df.drop(['Sodium','Sodium (% Daily Value)','Carbohydrates','Carbohydrates (% Daily Value)','Dietary Fiber','Dietary Fiber (% Daily Value)','Iron (% Daily Value)','Calcium (% Daily Value)','Vitamin C (% Daily Value)','Vitamin A (% Daily Value)','Protein','Sugars'],axis=1)","a90f4664":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(df1)","1798f25e":"# Prepare Data\ndf1= df.groupby('Category').size()\n# Make the plot with pandas\ndf1.plot(kind='pie', subplots=True, figsize=(8, 8))\nplt.title(\"Pie Chart of Various Category\")\nplt.ylabel(\"\")\nplt.show()","f1164791":"from wordcloud import WordCloud ","fe603f4b":"df1=df['Item'].to_string()","cbf25e4d":"# Start with one review:\ntext = df1\n# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n# Display the generated image:\nf,ax=plt.subplots(1,1,figsize=(25,5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ecfd2087":"# Histogram ","24a31139":"**Wordcloud**","359cba51":"**Table of content:-**\n\n1.Importing Dataset\n\n2.Data Visualization\n\n*   1.Countplot\n  \n    2.Histogram\n  \n    3.Scatterplot\n  \n    4.Boxplot\n  \n    5.KDE \n  \n    6.Violinplot\n  \n    7.Pairplot\n    \n    8.Heatmap\n    \n    9.Distplot","24b9a1d6":"**Scatterplot**","d59a4033":"# Heatmap ","efec6c8b":"**PieChart**","88d7612f":"# Kde plot","c01bf7a1":"# Boxplot","def80334":"**Importing CSV file**","9a1020ef":"# Violin plot","d0c629e3":"**Countplot**","2a7ec310":"# Distplot","bed484d8":"**Pairplot**","dafe9904":"**Histogram**"}}