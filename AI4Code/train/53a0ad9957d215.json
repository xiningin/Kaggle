{"cell_type":{"1b8d0bb3":"code","6c8f0fbb":"code","3b37c4c0":"code","e8ec6478":"code","02b4381f":"code","12fdd892":"code","cd0791b0":"code","202b8683":"code","4681f7d9":"code","bf62e091":"code","a0cde66f":"code","50e402ab":"code","bd61fba1":"code","7360ab22":"code","6d5961ea":"code","e349ae9f":"code","a7bb3619":"code","8bc63daa":"code","57c37079":"code","a9922ad1":"code","a56b4b93":"code","616cc816":"code","388c505f":"code","babb0948":"code","f5a0e792":"code","78aaea90":"code","17e5e595":"code","e9ce9ecb":"code","7a0a2440":"code","588ff8e3":"code","17596776":"markdown"},"source":{"1b8d0bb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c8f0fbb":"training_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#gender_submission_data = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","3b37c4c0":"training_data.head()\n","e8ec6478":"training_data.info()","02b4381f":"test_df.head()","12fdd892":"test_df.info()","cd0791b0":"from plotnine import *\n%matplotlib inline\n\n(ggplot(training_data) +\n      aes(x = 'Sex', fill = \"factor(Survived)\")+ \n     geom_bar(size=20)+ \n     scale_fill_discrete(name = \"Survivals\", labels = [\"NO\", \"Yes\"])+\n     coord_flip()+\n    ggtitle(\"Survivors Gender count in the Titanic Ship\")+\n xlab(\"Gender\")+\n ylab(\"Number of the People\"))","202b8683":"(ggplot(training_data)+\naes(x=\"Pclass\", fill = \"factor(Survived)\")+ \n geom_bar(size=20)+ \n scale_x_continuous(breaks = [1,2,3],labels = [\"First Class\", \"Second Class\", \"Third Class\"]) +\n scale_fill_discrete(name = \"Survivals\", labels = [\"NO\", \"Yes\"])+\n coord_flip()+\n ggtitle(\" Ticket Class Survivors\")+\n xlab(\"Socio-economic status (SES)\")+\n ylab(\"Number of the People\"))","4681f7d9":"(ggplot(training_data)+\naes(x=\"SibSp\",  fill = \"factor(Survived)\")+ \n geom_bar(size=20)+ \n scale_fill_discrete(name = \"Survivals\", labels = [\"NO\", \"Yes\"])+\n coord_flip()+\n ggtitle(\"Number of Siblings and Spouses Survivors abroad the Titanic\")+\n xlab(\"Number of siblings \/ spouses aboard the Titanic\")+   \n ylab(\"Number of the People\"))","bf62e091":"(ggplot(training_data)+\naes(x=\"Parch\",  fill = \"factor(Survived)\")+ \n geom_bar(size=20)+ \n scale_fill_discrete(name = \"Survivals\", labels = [\"NO\", \"Yes\"])+\n coord_flip()+\n ggtitle(\"Number of Parents and Children Survivors abroad the Titanic\")+\n xlab(\"Number of Parents and Children  aboard the Titanic\")+  \n ylab(\"Number of the People\"))","a0cde66f":"(ggplot(training_data)+\naes(x= \"Embarked\",  fill = \"factor(Survived)\")+ \n geom_bar(size=20)+ \n scale_fill_discrete(name = \"Survivals\", labels = [\"NO\", \"Yes\"])+\n scale_x_discrete(labels = [\"Cherbourg\", \"Queenstown\", \"Southampton\", \"Not Given\"]) +\n coord_flip()+\n ggtitle(\"Port of Embarkation and Survivors abroad the Titanic\")+\n xlab(\"Port of Embarkation\")+  \n ylab(\"Number of the People\"))","50e402ab":"training_data.nunique()","bd61fba1":"training_data.describe()","7360ab22":"training_data['Cabin'] = training_data['Cabin'].replace(np.nan, 'N')\ntraining_data","6d5961ea":"training_data[\"Embarked\"].fillna('S', inplace =True)\ntraining_data.tail()","e349ae9f":"training_data['Fare'] = training_data['Fare'].replace(np.nan,training_data['Fare'].mean() )","a7bb3619":"training_data['Age'] = training_data['Age'].replace(np.nan, training_data['Age'].mean())","8bc63daa":"training_data.info()","57c37079":"training_data['Salutations']=training_data[\"Name\"].apply(lambda x: x.split(',')[1].split('.')[0].strip())\nprint(training_data['Salutations'].value_counts())","a9922ad1":"training_data['Salutations']=training_data['Salutations'].apply({\n    'Mr': 'Mr',\n    \"Miss\" :\"Miss\",\n    \"Mrs\": \"Mrs\", \n    \"Master\": \"Master\",\n    \"Dr\": \"Dr\",\n    \"Rev\" : \"Rev\",\n    \"Major\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Sir\": \"Mr\",\n    \"Lady\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Jonkheer\" : \"Mr\",\n    \"Capt\": \"Officer\",\n    \"Ms\": \"Miss\",\n    \"the Countess\" :\"Royalty\",\n    \"Mlle\": \"Miss\",\n    \n}.get)\ntraining_data['Salutations'].value_counts()","a56b4b93":"Y = training_data[\"Survived\"]\nX = training_data.drop(['Survived', 'PassengerId'], axis=1)\n#X_test = test_data.drop(['PassengerId'], axis=1)\n\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nobjList = X.select_dtypes(include = \"object\").columns\n                        \nfor feat in objList:\n    X[feat] = le.fit_transform(X[feat].astype(str))\n\n#objListT = X_test.select_dtypes(include = \"object\").columns\n                        \n#for feat in objListT:\n   # X_test[feat] = le.fit_transform(X_test[feat].astype(str))\nY = le.fit_transform(Y)\n\nX.info()","616cc816":"#from sklearn.model_selection import train_test_split\n#X_train, X_test, y_train, y_test = train_test_split(\n   # X, Y, test_size=0.33, random_state=42)","388c505f":"from sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nmodels = []\nmodels.append(('LGR', LogisticRegression(solver='liblinear')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\n\n","babb0948":"results = []\nnames = []\nscoring = 'accuracy'\nseed = 10\nfor name, model in models:\n\tkfold = model_selection.KFold(n_splits=11, random_state=seed)\n\tcv_results = model_selection.cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n\tresults.append(cv_results)\n\tnames.append(name)\n\tmsg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n\tprint(msg)\n    \n    ","f5a0e792":"# boxplot algorithm comparison\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","78aaea90":"modelresult = pd.DataFrame({'names' :names, 'results':results})\n\nfor m in range(len(modelresult)):\n     modelresult[\"results\"][m] = modelresult[\"results\"][m].mean()\nmodelresult.head()\n","17e5e595":"test = test_df.drop(['PassengerId'], axis=1)\ntest[\"Embarked\"].fillna('S', inplace =True)\ntest['Fare'] = test['Fare'].replace(np.nan,test['Fare'].mean() )\ntest['Age'] = test['Age'].replace(np.nan, test['Age'].mean())\ntest['Cabin'] = test['Cabin'].replace(np.nan, 'N')\ntest['Salutations']=test[\"Name\"].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntest['Salutations']=test['Salutations'].apply({\n    'Mr': 'Mr',\n    \"Miss\" :\"Miss\",\n    \"Mrs\": \"Mrs\", \n    \"Master\": \"Master\",\n    \"Dr\": \"Dr\",\n    \"Rev\" : \"Rev\",\n    \"Major\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Sir\": \"Mr\",\n    \"Lady\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Jonkheer\" : \"Mr\",\n    \"Capt\": \"Officer\",\n    \"Ms\": \"Miss\",\n    \"the Countess\" :\"Royalty\",\n    \"Mlle\": \"Miss\",\n    \n}.get)\n\ntest.info()","e9ce9ecb":"objListT = test.select_dtypes(include = \"object\").columns\n                        \nfor feat in objListT:\n      test[feat] = le.fit_transform(test[feat].astype(str))\ntest.info()        \n","7a0a2440":"model = models[np.argmax(modelresult[\"results\"])][1]\nmodel.fit(X, Y)\n#best = modelresult.loc[modelresult[\"results\"]==modelresult[\"results\"].max()][\"names\"]\nsurvived = model.predict(test)\n","588ff8e3":"passengerID = test_df['PassengerId']\ndf_final = pd.DataFrame({\"PassengerId\":passengerID , \"Survived\": survived })\ndf_final.to_csv(\"submission.csv\", index = False)","17596776":"**DATA EXPLORATION**"}}