{"cell_type":{"0e84ea9e":"code","4a03d409":"code","d2974d56":"code","70b7b555":"code","723f9959":"code","91dd7441":"code","c59baaea":"code","0e66b6a4":"code","8ef60ff9":"code","1c22b04d":"code","29610499":"code","10a22a9f":"code","e5ececa9":"code","57c94536":"code","740c27e3":"code","16bc44f5":"code","79c79d88":"code","949611b8":"markdown","26d3ce1c":"markdown","c5e27183":"markdown","500e3ecf":"markdown","7f1bb845":"markdown","8f7e76e4":"markdown","065e8740":"markdown","536f9bb1":"markdown","043653c9":"markdown"},"source":{"0e84ea9e":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\n\nfrom trackml.dataset import load_event, load_dataset\nfrom trackml.score import score_event","4a03d409":"# Change this according to your directory preferred setting\npath_to_train = \"..\/input\/train_1\"\n\n# This event is in Train_1\nevent_prefix = \"event000001000\"","d2974d56":"hits, cells, particles, truth = load_event(os.path.join(path_to_train, event_prefix))","70b7b555":"hits.head()","723f9959":"def get_training_sample(path_to_data, event_names):\n\n    events = []\n    track_id = 0\n\n    for name in event_names:\n\n        # Read an event\n        hits, cells, particles, truth = load_event(os.path.join(path_to_data, name))\n\n        # Generate new vector of particle id\n        particle_ids = truth.particle_id.values\n        particle2track = {}\n        for pid in np.unique(particle_ids):\n            particle2track[pid] = track_id\n            track_id += 1\n        hits['particle_id'] = [particle2track[pid] for pid in particle_ids]\n\n        # Collect hits\n        events.append(hits)\n\n    # Put all hits into one sample with unique tracj ids\n    data = pd.concat(events, axis=0)\n\n    return data","91dd7441":"start_event_id = 1000\nn_train_samples = 5\ntrain_event_names = [\"event0000{:05d}\".format(i) for i in range(start_event_id, start_event_id+n_train_samples)]\ntrain_data = get_training_sample(path_to_train, train_event_names)","c59baaea":"train_data.head()","0e66b6a4":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclass Clusterer(object):\n    \n    def __init__(self):\n        self.classifier = None\n        \n    \n    def _preprocess(self, hits):\n        \n        x = hits.x.values\n        y = hits.y.values\n        z = hits.z.values\n\n        r = np.sqrt(x**2 + y**2 + z**2)\n        hits['x2'] = x\/r\n        hits['y2'] = y\/r\n        hits['z2'] = z\/r\n\n        ss = StandardScaler()\n        X = ss.fit_transform(hits[['x2', 'y2', 'z2']].values)\n        \n        return X\n    \n    def fit(self, hits):\n        \n        X = self._preprocess(hits)\n        y = hits.particle_id.values\n        \n        self.classifier = KNeighborsClassifier(n_neighbors=1, n_jobs=-1)\n        self.classifier.fit(X, y)\n    \n    \n    def predict(self, hits):\n        \n        X = self._preprocess(hits)\n        labels = self.classifier.predict(X)\n        \n        return labels","8ef60ff9":"model = Clusterer()\nmodel.fit(train_data)","1c22b04d":"path_to_event = os.path.join(path_to_train, \"event0000{:05d}\".format(start_event_id + n_train_samples + 1))\nhits, cells, particles, truth = load_event(path_to_event)","29610499":"%%time\n# Warning: it takes about 30s per one event\nlabels = model.predict(hits)","10a22a9f":"labels","e5ececa9":"def create_one_event_submission(event_id, hits, labels):\n    sub_data = np.column_stack(([event_id]*len(hits), hits.hit_id.values, labels))\n    submission = pd.DataFrame(data=sub_data, columns=[\"event_id\", \"hit_id\", \"track_id\"]).astype(int)\n    return submission","57c94536":"submission = create_one_event_submission(0, hits, labels)\nscore = score_event(truth, submission)","740c27e3":"print(\"Your score: \", score)","16bc44f5":"dataset_submissions = []\ndataset_scores = []\n\nfor event_id, hits, cells, particles, truth in load_dataset(path_to_train, skip=1000, nevents=5):\n        \n    # Track pattern recognition\n    labels = model.predict(hits)\n        \n    # Prepare submission for an event\n    one_submission = create_one_event_submission(event_id, hits, labels)\n    dataset_submissions.append(one_submission)\n    \n    # Score for the event\n    score = score_event(truth, one_submission)\n    dataset_scores.append(score)\n    \n    print(\"Score for event %d: %.3f\" % (event_id, score))\n    \nprint('Mean score: %.3f' % (np.mean(dataset_scores)))","79c79d88":"path_to_test = \"..\/input\/test\"\ntest_dataset_submissions = []\n\ncreate_submission = False # True for submission \n\nif create_submission:\n    for event_id, hits, cells in load_dataset(path_to_test, parts=['hits', 'cells']):\n\n        # Track pattern recognition\n        labels = model.predict(hits)\n\n        # Prepare submission for an event\n        one_submission = create_one_event_submission(event_id, hits, labels)\n        test_dataset_submissions.append(one_submission)\n        \n        print('Event ID: ', event_id)\n\n    # Create submission file\n    submission = pd.concat(test_dataset_submissions, axis=0)\n    submission.to_csv('submission.csv.gz', index=False, compression='gzip')","949611b8":"Then, train the classifier using this sample. Notice that data preprocessing is included into the training procedure.","26d3ce1c":"# About\n\nThis notebook helps you to create your first solution and the first submisson file. Fill free to modify this notebook to create you own solution.","c5e27183":"### Test\n\nUse the trained classifier to predict labels of hits in a new event.","500e3ecf":"### Train\n\nLets combine several events into single sample to train the classifier.","7f1bb845":"# Reading single event","8f7e76e4":"# Recognize tracks in all events of a dataset\n\nIn this example, the dataset is the whole training set. This may take a very long time. To run on only a subset, use\n\n     load_dataset(path_to_train, skip=1000, nevents=5)\n\nIt will skip the first 1000 events, and select the next 5 ones.\n\n**Warning:** it takes about 30s per one event","065e8740":"# Submission\n\nCreate a submission file.\n\n**Warning:** it takes about 30s per one event","536f9bb1":"# Track pattern recognition\n\nIn this example the track pattern recognition is solved as a classification problem. In this case each track corresponds to one class. We train a kNN classifier to learn patterns of tracks in training events as it is shown in the following figure:\n\n![knn_train.png](attachment:knn_train.png)\n\nDifferent colors in the last figure correspond to different classes learnt by the classifier. This classifier is used to recognize tracks in other events that are not used for the training. All hits that fall into a class are considered as a recognized track. This idea is shown below:\n\n![knn_predict.png](attachment:knn_predict.png)\n\nOne classifier recognizes just few tracks. But combining several such classifiers can help to find more tracks. Fill free to modify this example.","043653c9":"# Score\n\nCalculate quality of the track pattern recognition for one event."}}