{"cell_type":{"b761934d":"code","87563865":"code","95f74b48":"code","d8e084b8":"code","16291d57":"code","7ee5e03d":"code","06efceb2":"code","380e469e":"code","0beb6430":"code","a80bd137":"code","5565cedd":"code","3e909072":"code","b29913a1":"code","c06ed73b":"code","9e797069":"code","1d3ad8f4":"code","ffad290e":"code","ae38eada":"code","e0dbce74":"code","76907ae3":"code","8ad209d4":"code","70766826":"code","f2cbdf29":"code","97b38d7e":"code","f202feb5":"code","f892f1a7":"code","789ad006":"code","1ed363e4":"code","8ca5e121":"code","b7331531":"code","7248dcf1":"code","b0dae411":"code","c7f267f6":"code","cb74bec4":"code","c567851f":"code","97a35b57":"code","2f5c6de3":"code","d490a4a9":"markdown","3e639915":"markdown","793b47ac":"markdown","0289a68a":"markdown","59b64d3b":"markdown"},"source":{"b761934d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87563865":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)\n","95f74b48":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\ndf.head()","d8e084b8":"df.shape","16291d57":"df.isnull().sum()","7ee5e03d":"df['Location'].value_counts()","06efceb2":"df_mel = df[df['Location'] == 'Melbourne']\ndf_mel.isnull().sum()","380e469e":"df_mel.info()","0beb6430":"df_mel","a80bd137":"def impute_random_nan(df_mel, feature):\n    df_mel[feature+\"_random\"] = df_mel[feature]\n    random_sample = df_mel[feature].dropna().sample(df_mel[feature].isnull().sum(), random_state = 0) # adding random values in null data\n    random_sample.index = df_mel[df_mel[feature].isnull()].index # to pick up all the indexes with null values in that particular feature\n    df_mel.loc[df[feature].isnull(), feature+'_random'] = random_sample  # replace null values with random sample\n","5565cedd":"impute_random_nan(df_mel, 'MinTemp')\n","3e909072":"impute_random_nan(df_mel, 'MaxTemp')\nimpute_random_nan(df_mel, 'Rainfall')\nimpute_random_nan(df_mel, 'Evaporation')\nimpute_random_nan(df_mel, 'Sunshine')\nimpute_random_nan(df_mel, 'Humidity9am')\nimpute_random_nan(df_mel, 'Humidity3pm')\nimpute_random_nan(df_mel, 'Pressure9am')\nimpute_random_nan(df_mel, 'Pressure3pm')\nimpute_random_nan(df_mel, 'Temp9am')\nimpute_random_nan(df_mel, 'Temp3pm')","b29913a1":"df_mel.isnull().sum()","c06ed73b":"df_mel.drop(['MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation', 'Sunshine', 'Humidity9am', 'Humidity3pm', 'Pressure9am', 'Pressure3pm', 'Temp9am', 'Temp3pm'], axis = 1, inplace = True)","9e797069":"df_mel.isnull().sum()","1d3ad8f4":"df_mel","ffad290e":"#Fill nulls with 0\n\ncols = ['WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm', 'WindSpeed9am']\nfor i in cols:\n    df_mel[i].fillna('Missing', inplace = True)\n\ndf_mel.head()\n","ae38eada":"df_mel.drop(['Cloud9am', 'Cloud3pm'], axis = 1, inplace = True)\ndf_mel.isnull().sum()","e0dbce74":"df_mel.shape","76907ae3":"df_mel = df_mel.dropna()","8ad209d4":"df_mel.shape","70766826":"df_mel.isnull().sum()","f2cbdf29":"df_mel","97b38d7e":"df_mel['RainToday'] = df_mel['RainToday'].map({'Yes' : 1, 'No' : 0})\ndf_mel['RainTomorrow'] = df_mel['RainTomorrow'].map({'Yes' : 1, 'No' : 0})","f202feb5":"df_mel","f892f1a7":"# To plot the correlation chart\n\ncorrelations = df_mel.corr()\nf,ax = plt.subplots(figsize=(20,20))\nsns.heatmap(correlations, annot = True)\n","789ad006":"#To plot pie chart\n\ncounts = df_mel['RainToday'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_mel['RainToday'].value_counts(), labels = df_mel['RainToday'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","1ed363e4":"#To plot pie chart\n\ncounts = df_mel['RainTomorrow'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_mel['RainTomorrow'].value_counts(), labels = df_mel['RainTomorrow'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","8ca5e121":"df_mel","b7331531":"from fbprophet import Prophet","7248dcf1":"#To get future prediction where Store = ref var and Sales = target var, periods = no. of periods for which prediction is desired\n\ndef pred(df_mel, periods):\n    df_mel1 = df_mel[['Date', 'RainToday']].rename(columns = {'Date': 'ds', 'RainToday': 'y'}) #x axis needs to be named ds, and y axis(target var) as y for fbprophet\n    df_mel1 = df_mel1.sort_values('ds')\n    return df_mel1\n","b0dae411":"#Convert prediction list to df\n\nlsp = pred(df_mel, 60)\ndp = pd.DataFrame(lsp)\ndp\n","c7f267f6":"#Plotting feature for preds\n\nplt.figure(figsize = (50,50))\n\ndef predplot(df_mel, periods):\n  df_mel = df_mel[['Date', 'RainToday']].rename(columns = {'Date': 'ds', 'RainToday': 'y'}) #x axis needs to be named ds, and y axis(target var) as y for fbprophet\n  df_mel = df_mel.sort_values('ds')\n  model = Prophet()\n  model.fit(df_mel)\n  future = model.make_future_dataframe(periods = periods)\n  forecast = model.predict(future)\n  figure = model.plot(forecast, xlabel = 'Date', ylabel = 'RainToday')\n  figure2 = model.plot_components(forecast)\n\n\npredplot(df_mel, 60)\n","cb74bec4":"#Plotting feature for preds\n\nplt.figure(figsize = (50,50))\n\ndef predplot(df_mel, periods):\n  df_mel = df_mel[['Date', 'MinTemp_random']].rename(columns = {'Date': 'ds', 'MinTemp_random': 'y'}) #x axis needs to be named ds, and y axis(target var) as y for fbprophet\n  df_mel = df_mel.sort_values('ds')\n  model = Prophet()\n  model.fit(df_mel)\n  future = model.make_future_dataframe(periods = periods)\n  forecast = model.predict(future)\n  figure = model.plot(forecast, xlabel = 'Date', ylabel = 'MinTemp_random')\n  figure2 = model.plot_components(forecast)\n\n\npredplot(df_mel, 60)\n","c567851f":"#Plotting feature for preds\n\nplt.figure(figsize = (50,50))\n\ndef predplot(df_mel, periods):\n  df_mel = df_mel[['Date', 'Rainfall_random']].rename(columns = {'Date': 'ds', 'Rainfall_random': 'y'}) #x axis needs to be named ds, and y axis(target var) as y for fbprophet\n  df_mel = df_mel.sort_values('ds')\n  model = Prophet()\n  model.fit(df_mel)\n  future = model.make_future_dataframe(periods = periods)\n  forecast = model.predict(future)\n  figure = model.plot(forecast, xlabel = 'Date', ylabel = 'Rainfall_random')\n  figure2 = model.plot_components(forecast)\n\n\npredplot(df_mel, 60)\n","97a35b57":"#Plotting feature for preds\n\nplt.figure(figsize = (50,50))\n\ndef predplot(df_mel, periods):\n  df_mel = df_mel[['Date', 'Humidity9am_random']].rename(columns = {'Date': 'ds', 'Humidity9am_random': 'y'}) #x axis needs to be named ds, and y axis(target var) as y for fbprophet\n  df_mel = df_mel.sort_values('ds')\n  model = Prophet()\n  model.fit(df_mel)\n  future = model.make_future_dataframe(periods = periods)\n  forecast = model.predict(future)\n  figure = model.plot(forecast, xlabel = 'Date', ylabel = 'Humidity9am_random')\n  figure2 = model.plot_components(forecast)\n\n\npredplot(df_mel, 60)\n","2f5c6de3":"#Plotting feature for preds\n\nplt.figure(figsize = (50,50))\n\ndef predplot(df_mel, periods):\n  df_mel = df_mel[['Date', 'Humidity3pm_random']].rename(columns = {'Date': 'ds', 'Humidity3pm_random': 'y'}) #x axis needs to be named ds, and y axis(target var) as y for fbprophet\n  df_mel = df_mel.sort_values('ds')\n  model = Prophet()\n  model.fit(df_mel)\n  future = model.make_future_dataframe(periods = periods)\n  forecast = model.predict(future)\n  figure = model.plot(forecast, xlabel = 'Date', ylabel = 'Humidity3pm_random')\n  figure2 = model.plot_components(forecast)\n\n\npredplot(df_mel, 60)\n","d490a4a9":"# Humidity3pm Trend","3e639915":"# Min Temp Trend","793b47ac":"# Rained or not Trend","0289a68a":"# Humidity9am Trend","59b64d3b":"# Rainfall Trend"}}