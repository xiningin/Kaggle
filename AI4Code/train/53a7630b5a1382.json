{"cell_type":{"0569fce1":"code","c9580ee8":"code","54278554":"code","59196669":"code","d8f38bd9":"code","408e50af":"code","844016c2":"code","a599f3e1":"code","2b44838c":"code","9a204941":"code","614d75b9":"code","91e19738":"code","46b6c749":"code","3ed570e2":"markdown","35f95c9c":"markdown","c94360a1":"markdown","8b0a4f91":"markdown","a2fdf5bb":"markdown","a42b85f2":"markdown","f0689d62":"markdown","bbfaa52f":"markdown","949e7d7f":"markdown","a587c7f1":"markdown"},"source":{"0569fce1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9580ee8":"import matplotlib.pyplot as plt\nimport seaborn as sns","54278554":"df = pd.read_csv('\/kaggle\/input\/50-startups\/50_Startups.csv')\ndf.head()","59196669":"X = df.iloc[:, :-1]    # independent varible\ny = df.iloc[:, -1]     # dependent variable\n\nX.head()","d8f38bd9":"df['State'].unique()","408e50af":"# Since we do not need all the 3 columns and can work with only 2 columns for classifying the states, we will drop one column\nstates = pd.get_dummies(X['State'], drop_first=True)\nstates.head()","844016c2":"X = X.drop('State', axis=1)\nX.head()","a599f3e1":"X = pd.concat([X, states], axis=1)\nX.head()","2b44838c":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)","9a204941":"y_pred = model.predict(X_test)\ny_pred","614d75b9":"y_test","91e19738":"from sklearn.metrics import r2_score\nscore = r2_score(y_test, y_pred)\nscore","46b6c749":"sns.distplot(y_pred - y_test)","3ed570e2":"Drop the states column from X dataset and replacing it with the one-hot encoded dataset","35f95c9c":"### Splitting the data into independent(X) and dependent(y) features\n\n* Here, dependent variable will be the Profit which we have to predict => Regression Problem\n* All other features(R&D, Administration, Marketing, State) will be independent variables (multiple independent features) which affect the profit values","c94360a1":"### 5 different coefficients \/ features will be there in the linear regression equation\n\n* Formula => B0 + B1 * x1 + B2 * x2 + B3 * x3 + B4 * x4 + B5 * x5\n* B0 = index, x1 = R&D Spend, x2 = Administration, x3 = Marketing Spend, x4 = Florida, x5 = New York","8b0a4f91":"### This is a very short and simple notebook for all the beginners out there who are just stepping into data science. I have explained as much as I can. Hope you will like it","a2fdf5bb":"### R2 score -> 0.93 which is very near to 1 thus showing that the model used is very good model","a42b85f2":"* (0, 1) => New York\n* (0, 0) => California\n* (1, 0) => Florida","f0689d62":"### Split data into Training and Testing data and perform linear Regression and get the predictions","bbfaa52f":"The State column in the independent variable is a categorical column with 3 unique categories - New York, California and Florida","949e7d7f":"### Convert the States into One Hot Encoding\n\n* New York   => (1, 0, 0)\n* California => (0, 1, 0)\n* Florida    => (0, 0, 1) \n\n### Dummy Variable Trap\n\n* New York   => (0, 0)\n* California => (1, 0)\n* Florida    => (0, 1)","a587c7f1":"### Compare the predicted values with the real values using the R-squared value\n\n* Formula for r-squared => 1 - (sum of residual \/ sum of mean)\n* Sum of residual = mean(sum(y_test - y_pred)^2))\n* Sum of mean = mean(sum(y_test - y_mean)^2))\n\n* (Sum of mean > Sum of residual) always if the model is very good\n\n* r2 value => range between 0.8 to 0.98\n* r2 value => the more nearer to 1 => the better the model"}}