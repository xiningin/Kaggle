{"cell_type":{"3827c721":"code","be777dfa":"code","d6817fcf":"code","579e6cc4":"code","0d81cf8c":"code","b117e0af":"code","cc337f8a":"code","f807bf6e":"code","5c964642":"code","ffe17ff6":"code","d3896af9":"code","1136f8da":"code","e93aa20a":"code","4ab9dec1":"code","ace07dfa":"code","f74f96d0":"code","725047b4":"code","a8bc0cf0":"code","1e837eaf":"code","53087df2":"code","6c799af0":"code","cc05a018":"code","d3c9ba9e":"code","318b3f76":"code","757a8946":"markdown","6c20482f":"markdown","b297e2dc":"markdown","555cf2d1":"markdown","708d6268":"markdown"},"source":{"3827c721":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","be777dfa":"df = pd.read_csv(\"..\/input\/world-happiness\/2019.csv\")\ndf.head()","d6817fcf":"df.tail()","579e6cc4":"df.columns","0d81cf8c":"df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ndf.columns","b117e0af":"df.shape","cc337f8a":"df.info()","f807bf6e":"# For example lets look frequency of pokemom types\n# print(df['country_of_region'].value_counts(dropna =False))  # if there are nan values that also be counted\n#in this dataset every columns has unique value. For this reason value_counts function doesn't do anything here.\n","5c964642":"df.describe()","ffe17ff6":"t = df.score.mean()\ndf[\"score_level\"] = [\"high\" if i > t else \"low\" for i in df.score]\ndf.boxplot(column='gdp_per_capita',by = 'score_level')","d3896af9":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = df.head()\ndata_new","1136f8da":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'country_or_region', value_vars= ['score','gdp_per_capita'])\nmelted","e93aa20a":"# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'country_or_region', columns = 'variable',values='value')","4ab9dec1":"# Firstly lets create 2 data frame\ndf1 = df.head()\ndf2= df.tail()\nconc_df_row = pd.concat([df1,df2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_df_row","ace07dfa":"df1 = df['score'].head()\ndf2= df['gdp_per_capita'].head()\nconc_df_col = pd.concat([df1,df2],axis =1) # axis = 0 : adds dataframes in row\nconc_df_col","f74f96d0":"df.dtypes","725047b4":"# lets convert object(str) to categorical and int to float.\ndf['score'] = df['score'].astype('category')\ndf['gdp_per_capita'] = df['overall_rank'].astype('float')\ndf.dtypes","a8bc0cf0":"# Lets look at does data have nan value\n# As you can see there are 156 entries. There is no null object.\ndf.info()","1e837eaf":"df[\"score\"].value_counts(dropna =False)","53087df2":"# droping nan values\ndf1=df   # also we will use data to fill missing value so I assign it to data1 variable\ndf1[\"score\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# If we have NaN values in this dataset this code will work.  ","6c799af0":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","cc05a018":"# In order to run all code, we need to make this line comment\nassert 1==2 # return error because it is false","d3c9ba9e":"assert  df['score'].notnull().all() # returns nothing because we don't have nan values","318b3f76":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","757a8946":"MISSING DATA and TESTING WITH ASSERT\nIf we encounter with missing data, what we can do:\n\nleave as is\ndrop them with dropna()\nfill missing value with fillna()\nfill missing values with test statistics like mean\nAssert statement: check that you can turn on or turn off when you are done with your testing of the program.","6c20482f":"\nDATA TYPES\nThere are 5 basic data types: object(string),booleab, integer, float and categorical.\nWe can make conversion data types like from str to categorical or from int to float\nWhy is category important:\n\nmake dataframe smaller in memory\ncan be utilized for anlaysis especially for sklearn.","b297e2dc":"PIVOTING DATA\nReverse of melting.","555cf2d1":"CONCATENATING DATA\nWe can concatenate two dataframe.","708d6268":"TIDY DATA\nWe tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it."}}