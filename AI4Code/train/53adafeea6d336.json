{"cell_type":{"f01916a2":"code","e4b0ca45":"code","92630ecc":"code","85517f0b":"code","880ae864":"code","e02374c5":"code","c83349b7":"code","c3cc41c6":"code","535f0afc":"code","9194d021":"code","e61c8413":"code","273f6b65":"code","a1cea9ff":"code","fc485864":"code","3b6643d9":"code","f81d9337":"code","1c2e62c4":"code","fc6a163c":"code","206a61dc":"code","5bf6c487":"code","5f3fd303":"code","8c3d8bcd":"code","52d5605f":"code","33e69f51":"code","1816b5c7":"code","7548ea9f":"code","6a571000":"code","bfcb6811":"code","c34a6132":"code","57260a10":"code","09e30541":"code","0a465e1a":"code","2ba29719":"code","feb0e55c":"code","2b0d9eb1":"code","685a429d":"code","b7ba0749":"code","2d04821c":"code","bf666983":"code","7dc68764":"code","e9998fe0":"code","9de3ba9d":"code","25f4e69a":"code","203dde48":"code","2c90ef03":"code","c18699ed":"code","e818613a":"code","64cc7b58":"code","236dbaa4":"code","01d351b8":"code","fe82002a":"code","2a65a951":"code","7a810bab":"code","5a0a38f5":"code","8733a6b4":"code","4763d3d3":"code","fa4eb7f1":"code","ed711d8f":"code","0e6879eb":"code","35ab551e":"code","c892cb7c":"code","df802b3d":"code","1adb0d49":"code","369fe3bc":"code","ec817dea":"code","c8442171":"code","45636a49":"code","43e6fdd7":"code","e76ddde6":"code","afb714f5":"code","25d0d7cb":"code","e21638aa":"code","11121e52":"code","e717af17":"code","7e60e91c":"code","77c500f3":"code","82f0857b":"code","77f582bf":"code","71862430":"code","f4bb617c":"code","1f2526d3":"code","69ca35cf":"code","f93446a4":"code","ee5436af":"code","3ffbc3f1":"code","3e43b672":"markdown","e0b319d7":"markdown","9663cc51":"markdown","d84b88ce":"markdown","0712aaf6":"markdown","9a62f394":"markdown","631b9518":"markdown","14e6e82e":"markdown","f9989e87":"markdown","ae34621e":"markdown","43f9ea1c":"markdown","6e452000":"markdown","7e9a0b1b":"markdown","83fdb4f0":"markdown","6b403147":"markdown","69ba6751":"markdown","0c900083":"markdown","604e5e49":"markdown","a5b7c78a":"markdown","b0f57aec":"markdown","a62cd347":"markdown","6fc8a2e5":"markdown","5cdc6584":"markdown","ac0820c2":"markdown","e012e1f1":"markdown","f2770e46":"markdown","e4f8a8b3":"markdown","29e9a495":"markdown","94c270a0":"markdown","ead8b42c":"markdown","7ac31230":"markdown","ae34d0e0":"markdown","71432908":"markdown","50162a19":"markdown","25780303":"markdown","7c5dc1c8":"markdown","58da69b7":"markdown","b07f410d":"markdown"},"source":{"f01916a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4b0ca45":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","92630ecc":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vauxhall.csv')","85517f0b":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","880ae864":"brand_data = brand_data_org.copy()","e02374c5":"brand_data.info()","c83349b7":"# no nulls with appropriate data types","c3cc41c6":"brand_data.describe(include='all')","535f0afc":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","9194d021":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","e61c8413":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","273f6b65":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","a1cea9ff":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","fc485864":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","3b6643d9":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","f81d9337":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","1c2e62c4":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","fc6a163c":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","206a61dc":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","5bf6c487":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","5f3fd303":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","8c3d8bcd":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","52d5605f":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","33e69f51":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","1816b5c7":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","7548ea9f":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","6a571000":"brand_notax=brand_data.drop(['tax'], axis=1)","bfcb6811":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","c34a6132":"brand_notaxmpg.head()","57260a10":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","09e30541":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","0a465e1a":"sns.histplot(brand_mile['mileage'])","2ba29719":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","feb0e55c":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","2b0d9eb1":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","685a429d":"sns.distplot(brand_mile['mileage'])","b7ba0749":"sns.histplot(brand_mile['year'])","2d04821c":"## we will try to remove the year outliers by keeping the records above 1% quartile","bf666983":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","7dc68764":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","e9998fe0":"sns.histplot(brand_year['year'])","9de3ba9d":"sns.histplot(brand_year['engineSize'])","25f4e69a":"brand_engsZ=brand_year.copy()","203dde48":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]","2c90ef03":"sns.histplot(brand_engsZ['engineSize'])","c18699ed":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Electric']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Hybrid']","e818613a":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","64cc7b58":"vis_ftyp.plot(kind='bar')\nplt.show()","236dbaa4":"brand_Trans=brand_fuel.copy()\nbrand_Trans = brand_Trans[brand_Trans.transmission != 'Other']","01d351b8":"vis_trans = brand_Trans.groupby(['transmission']).count()['price'].sort_values(ascending=False)","fe82002a":"vis_trans.plot(kind='bar')\nplt.show()","2a65a951":"brand_models=brand_Trans.copy()","7a810bab":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","5a0a38f5":"vis_models.plot(kind='bar')\nplt.show()","8733a6b4":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","4763d3d3":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","fa4eb7f1":"sns.histplot(brand_models['price'])","ed711d8f":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","0e6879eb":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","35ab551e":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","c892cb7c":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","df802b3d":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","1adb0d49":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","369fe3bc":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","ec817dea":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","c8442171":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","45636a49":"# Let us calculate the percentage of records removed out of the original dataset","43e6fdd7":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","e76ddde6":"# Data removed is a high but accepted","afb714f5":"Brand_preprocessed=models_prices.copy()","25d0d7cb":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","e21638aa":"Brand_preprocessed.info()","11121e52":"Brand_preprocessed.columns.values","e717af17":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","7e60e91c":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","77c500f3":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","82f0857b":"brand_arranged.describe(include='all')","77f582bf":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","71862430":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","f4bb617c":"## Generally, mileage is higher for older cars","1f2526d3":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","69ca35cf":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","f93446a4":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","ee5436af":"brand_final=brand_arranged.drop(['year'], axis=1)","3ffbc3f1":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","3e43b672":"### Year-Model vs Min Price","e0b319d7":"### Year-Model Vs Mean Mileage","9663cc51":"# Packages","d84b88ce":"## Additional Graphs after Processing Data","0712aaf6":"## Dropping Unwanted Fields","9a62f394":"### mileage vs mean price [grouped by year]","631b9518":"## Re-arranging Columns","14e6e82e":"### Price","f9989e87":"### Data Fields Distribution Graphs","ae34621e":"### mpg and transmission","43f9ea1c":"### Fuel Type and Mileage","6e452000":"## Data Exploration","7e9a0b1b":"### price and year ","83fdb4f0":"### Price","6b403147":"# Loading Data","69ba6751":"### Year-Model vs Max Price","0c900083":"### Price and model","604e5e49":"### Tax feature","a5b7c78a":"## Preprocessing","b0f57aec":"### Mean Price vs Other Features","a62cd347":"# Exploring Dataset","6fc8a2e5":"### Correlogram for additional visulatization of the relation between each two features ","5cdc6584":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","ac0820c2":"### Count of Features","e012e1f1":"## Finding Correlations","f2770e46":"### Fuel Type and mpg","e4f8a8b3":"### Engine Size feature","29e9a495":"### Model","94c270a0":"### Year Feature","ead8b42c":"### Preocessing Checkpoint","7ac31230":"### Mileage feature","ae34d0e0":"## Brand","71432908":"### mpg, fuel type and transmission","50162a19":"### Year-Model vs Mean Price","25780303":"### Transmission","7c5dc1c8":"### mpg and engine size","58da69b7":"### Fuel Type","b07f410d":"## Copying Datasets"}}