{"cell_type":{"6bf98aac":"code","0e0465f1":"code","14545fbc":"code","99060a86":"code","b5fa3dab":"code","cf4fb056":"code","2c7c2277":"code","37781c63":"code","855caa96":"code","263e9f91":"code","230ed2c5":"code","cae78945":"code","030c3f87":"code","3b219732":"code","d6554f5b":"code","1366512f":"code","34ab34fe":"code","194094e2":"code","149da400":"code","32e2a8cf":"code","a0780562":"code","83a81613":"code","a46612a4":"code","4e3ddf0a":"code","d48f581e":"code","137f43c6":"code","79f0dd2f":"code","49797947":"code","2d402a5a":"code","3dc35a19":"code","46595f65":"code","f77b6e87":"code","53f20304":"code","e9019126":"code","e6f7cf0d":"code","2567afba":"code","df3f5216":"markdown","b4b9117a":"markdown","be87d66f":"markdown","5b7d5b3f":"markdown","b6756001":"markdown"},"source":{"6bf98aac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0e0465f1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA","14545fbc":"df = pd.read_csv('..\/input\/magnme-mar-03-2010-jun-01-2021\/MAGN.ME.csv')\ndf.head()","99060a86":"len(df)","b5fa3dab":"# Convert index to pandas datetime\ndf.index = pd.to_datetime(df.index, format=\"%Y\/%m\/%d\")","cf4fb056":"df_final = df.drop(['Open','Close','High','Volume'], axis=1)","2c7c2277":"# Conver to Series to run Dickey-Fuller test\ndf_final = pd.Series(df_final['Low'])","37781c63":"type(df_final)","855caa96":"def check_stationarity(ts_data):\n    \n    # Rolling statistics\n    roll_mean = ts_data.rolling(30).mean()\n    roll_std = ts_data.rolling(5).std()\n    \n    # Plot rolling statistics\n    fig = plt.figure(figsize=(20,10))\n    plt.subplot(211)\n    plt.plot(ts_data, color='black', label='Original Data')\n    plt.plot(roll_mean, color='red', label='Rolling Mean(30 days)')\n    plt.legend()\n    plt.subplot(212)\n    plt.plot(roll_std, color='green', label='Rolling Std Dev(5 days)')\n    plt.legend()\n    \n    # Dickey-Fuller test\n    print('Dickey-Fuller test results\\n')\n    df_test = adfuller(ts_data, regresults=False)\n    test_result = pd.Series(df_test[0:4], index=['Test Statistic','p-value','# of lags','# of obs'])\n    print(test_result)\n    for k,v in df_test[4].items():\n        print('Critical value at %s: %1.5f' %(k,v))\n    ","263e9f91":"check_stationarity(df_final)","230ed2c5":"# Log transform time series\ndf_final_log = np.log(df_final)\ndf_final_log.head()","cae78945":"# Check stationarity\ndf_final_log.dropna(inplace=True)\ncheck_stationarity(df_final_log)","030c3f87":"# Log Differencing\ndf_final_log_diff = df_final_log - df_final_log.shift()","3b219732":"df_final_log_diff.dropna(inplace=True)\ncheck_stationarity(df_final_log_diff)","d6554f5b":"# Differencing\ndf_final_diff = df_final - df_final.shift()","1366512f":"df_final_diff.dropna(inplace=True)\ncheck_stationarity(df_final_diff)","34ab34fe":"from statsmodels.tsa.stattools import acf, pacf","194094e2":"df_acf = acf(df_final_diff)","149da400":"df_pacf = pacf(df_final_diff)","32e2a8cf":"import statsmodels.api as sm","a0780562":"fig1 = plt.figure(figsize=(20,10))\nax1 = fig1.add_subplot(211)\nfig1 = sm.graphics.tsa.plot_acf(df_acf, ax=ax1)\nax2 = fig1.add_subplot(212)\nfig1 = sm.graphics.tsa.plot_pacf(df_pacf, ax=ax2)","83a81613":"model = ARIMA(df_final_diff, (1,1,0))","a46612a4":"fit_model = model.fit(full_output=True)","4e3ddf0a":"predictions = model.predict(fit_model.params, start=1760, end=1769)","d48f581e":"fit_model.summary()","137f43c6":"predictions","79f0dd2f":"fit_model.predict(start=1760, end=1769)","49797947":"pred_model_diff = pd.Series(fit_model.fittedvalues, copy=True)\npred_model_diff.head()","2d402a5a":"# Calculate cummulative sum of the fitted values (cummulative sum of differences)\npred_model_diff_cumsum = pred_model_diff.cumsum()\npred_model_diff_cumsum.head()","3dc35a19":"# Element-wise addition back to original time series\ndf_final_trans = df_final.add(pred_model_diff_cumsum, fill_value=0)\n# Last 5 rows of fitted values\ndf_final_trans.tail()","46595f65":"# Last 5 rows of original time series\ndf_final.tail()","f77b6e87":"# Plot of orignal data and fitted values\nplt.figure(figsize=(20,10))\nplt.plot(df_final, color='black', label='Original data')\nplt.plot(df_final_trans, color='red', label='Fitted Values')\nplt.legend()","53f20304":"x = df_final.values\ny = df_final_trans.values","e9019126":"# Trend of error\nplt.figure(figsize=(20,8))\nplt.plot((x - y), color='red', label='Delta')\nplt.axhline((x-y).mean(), color='black', label='Delta avg line')\nplt.legend()","e6f7cf0d":"final_pred = []\nfor i in predictions:\n    t = df_final[-1] + i\n    final_pred.append(t)","2567afba":"final_pred = pd.Series(final_pred)\nfinal_pred","df3f5216":"### Simple Differencing Transformation","b4b9117a":"### Back-transform","be87d66f":"### Log Differencing Transformation","5b7d5b3f":"### Log Transformation","b6756001":"## Stationarity Check"}}