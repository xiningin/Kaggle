{"cell_type":{"c64d65da":"code","c0e9d22d":"code","83e0d477":"code","80145f46":"code","d48456b7":"code","a4b3525d":"code","1d7ae352":"code","7452c250":"code","6ef46dfa":"code","ec0699f2":"code","c48b8a4e":"code","ef1816ed":"code","097458f6":"code","bd5be06f":"code","5593e110":"code","42d302ba":"code","f574a9b2":"code","a8400edb":"code","bcd1d5d9":"code","32d3ef2c":"code","da784318":"code","42db9096":"code","b7e8220d":"code","ecf8b60f":"code","c7b2b985":"code","8cf7e2c5":"code","07dfb0c0":"code","1d27d9c3":"code","2244cd25":"code","121e6ee4":"code","105e6f10":"code","c52de8f3":"code","1f1f937a":"code","38aaf00b":"code","284c23d4":"code","b6ec5c84":"markdown","f3f7eba4":"markdown","b47ad6e7":"markdown","b603a6e6":"markdown","2bbee700":"markdown","dd12056c":"markdown","598e5391":"markdown","78c1db4a":"markdown","42001f98":"markdown","410c02f2":"markdown"},"source":{"c64d65da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\n%matplotlib inline","c0e9d22d":"! cd ..\/input ;ls","83e0d477":"df = pd.read_csv('..\/input\/charlotte-hot-chocolate-15k-2019\/Hot Chocolate 15K Results.csv')","80145f46":"df.head()","d48456b7":"df[df.duplicated(['BIB'],False)]","a4b3525d":"ax = df.AGE.value_counts().reindex(['0-14','15-19','20-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-64','65-69','70-100']).plot.bar()\nax.set_ylabel('Pariticpant Count');","1d7ae352":"df.GENDER.value_counts().plot.bar()","7452c250":"df.PACE.dtype, df.TIME.dtype","6ef46dfa":"df['PACE_SEC']= df.PACE.apply(lambda x: int(x.split(':')[0])*60+int(x.split(':')[1]))","ec0699f2":"df.head()","c48b8a4e":"time_split = lambda x: int(x.split(':')[0])*60 + int(x.split(':')[1]) if int(x.split(':')[0])>2 else int(x.split(':')[0])*3600 + int(x.split(':')[1])*60 + int(x.split(':')[2])","ef1816ed":"df['TIME_SEC']= df.TIME.apply(time_split)","097458f6":"df.head()","bd5be06f":"ax = plt.figure(figsize=(10,5))\nax = df.groupby(['HOMETOWN']).agg(np.mean)['PACE_SEC'].sort_values()[:15].plot.bar(color=plt.cm.Blues_r(np.arange(15)))\nax.set_ylabel('Mean Pace (Seconds)');\nax.set_title('Mean Pace of Participants Hometown');","5593e110":"ax = plt.figure(figsize=(10,5))\nax = df.groupby(['HOMETOWN']).agg(np.mean)['TIME_SEC'].sort_values()[:15].plot.bar(color=plt.cm.Blues_r(np.arange(15)))\nax.set_ylabel('Mean Time (Seconds)');","42d302ba":"ax = plt.figure(figsize=(10,5))\nax = df.groupby(['AGE']).agg(np.mean)['PACE_SEC'].sort_values()[:15].plot.bar(color=plt.cm.Blues_r(np.arange(15)))\nax.set_ylabel('Mean Pace (Seconds)');","f574a9b2":"ax = df.boxplot(column=['PACE_SEC'],by=['AGE'],figsize=(10,5));","a8400edb":"ax = plt.figure(figsize=(10,5))\nax = df.groupby(['GENDER']).agg(np.mean)['PACE_SEC'].sort_values()[:15].plot.bar(color=['b','r'])\nax.set_ylabel('Mean Pace (Seconds)');","bcd1d5d9":"ax = df.PACE_SEC.plot.hist(bins=5)\nax.set_xlabel('Pace (Seconds)');\nax.set_ylabel('Count');","32d3ef2c":"bins = list(np.histogram_bin_edges(df.PACE_SEC,bins=5,range=(df.PACE_SEC.min()-1,df.PACE_SEC.max()+1)))","da784318":"bin_labels = ['UltraFast','Fast','Medium','Slow','Turtle']","42db9096":"df['PACE_GROUP'] = pd.cut(df['PACE_SEC'],bins=bins,labels=bin_labels)","b7e8220d":"df.head(5)","ecf8b60f":"df['count'] = np.ones(len(df))","c7b2b985":"df.head()","8cf7e2c5":"gender = df.groupby(['PACE_GROUP','GENDER']).count()['count']","07dfb0c0":"ax = plt.figure(figsize=(10,5));\nax = gender.unstack(1).plot.bar(rot=0,subplots=False)\nax.set_ylabel('Count');","1d27d9c3":"age =  df.groupby(['PACE_GROUP','AGE']).count()['count']","2244cd25":"ax = plt.figure(figsize=(10,5));\nax = age.unstack(0).plot.bar(rot=90,subplots=False,stacked=True)\nax.set_xlabel('Count');\nax.set_ylabel('Age Group');","121e6ee4":"rank = df.groupby(['AGE']).agg(min)['RANK']","105e6f10":"ax = rank.reindex(['0-14','15-19','20-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-64','65-69','70-100']).plot.bar()\nax.set_ylabel('Min Rank')","c52de8f3":"pd.plotting.scatter_matrix(df[['RANK','PACE_SEC']],figsize=(10,10));","1f1f937a":"sns.jointplot(x=['RANK'], y=['PACE_SEC'], data=df,kind='kde');","38aaf00b":"pd.plotting.scatter_matrix(df[['RANK','BIB']],figsize=(10,10),diagonal='kde');","284c23d4":"sns.jointplot(x=['RANK'], y=['BIB'], data=df,kind='kde');","b6ec5c84":"#### Fastest Ages","f3f7eba4":"More will come with Discrete Joint Distributions of categorical columns...","b47ad6e7":"### Group Paces into a Categorical Variable in Terms of Speed","b603a6e6":"#### Fastest Cities","2bbee700":"## Visualising Correlation with Joint Distributions","dd12056c":"### Time Features (Pace and Finish Time)","598e5391":"## An EDAthon from a Fast Kaggler","78c1db4a":"#### Fastest Gender (Accidentally Sexist :\/)","42001f98":"So except \"UltraFast\" all speed groups are dominated by women. ","410c02f2":"### Distribution within some Categorical Features"}}