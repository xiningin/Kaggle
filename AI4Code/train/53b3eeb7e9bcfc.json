{"cell_type":{"566d4db8":"code","84feaba7":"code","e01bf6d6":"code","38cc689d":"code","fe93d888":"code","5811018d":"code","817ef550":"code","d0e830c1":"code","20de09d4":"code","20ef5998":"code","87e146c9":"code","35b64d84":"code","43bbae90":"markdown","697c625a":"markdown","cd9dcadc":"markdown","d13a1a49":"markdown","eeae9228":"markdown","a92655b8":"markdown","19155280":"markdown","5ed6652d":"markdown"},"source":{"566d4db8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn\nfrom math import pi\nfrom pandas.plotting import parallel_coordinates\nimport  plotly.graph_objs as go\n#import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode , iplot\ninit_notebook_mode(connected = True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","84feaba7":"# dictioanry ad\u0131nda bir tablo olu\u015fturuldu\ndictionary = {\"column1\" : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n              \"column2\" : [1,2,3,4,np.nan,6,7,8,9,np.nan,11,np.nan,13,14,15,16,np.nan,18,np.nan,20],\n              \"column3\" : [1,2,3,4,np.nan,6,7,8,9,10,11,12,13,np.nan,15,16,17,18,np.nan,20]}\n\n# tablomuzu dataframe \u00e7evirildi\ndata_missingno = pd.DataFrame(dictionary)  \n\nimport missingno as msno\nmsno.matrix(data_missingno)  # null de\u011ferlerin beyaz g\u00f6r\u00fcnmesi sa\u011fland\u0131\nplt.show()\n","e01bf6d6":"msno.bar(data_missingno) # numerik de\u011ferlerin bar plot ile g\u00f6sterimi\nplt.show()","38cc689d":"# load iris data\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\n\ndata = data.drop([\"Id\"],axis = 1) # Id kolonu i\u015fimize yaramad\u0131\u011f\u0131 i\u00e7in \u00e7\u0131kard\u0131k\n\n# make the plot\n\nplt.figure(figsize=(15,10))\nparallel_coordinates(data,\"Species\", colormap = plt.get_cmap(\"Set1\"))\n# \"Species\" => tablodaki kolon \u00e7a\u011f\u0131r\u0131ld\u0131 \n# colormap = plt.get_cmap(\"Set1\")  => renk paleti\n# t\u00fcrlere g\u00f6re \u00e7izim yap\u0131ld\u0131\nplt.title(\"Iris data class visualization according to features (setosa, versicolor, virginica)\")\n\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"cm\")\nplt.show()\n\n\n\n","fe93d888":"# verile aras\u0131 korelasyonu bulmak i\u00e7in kulland\u0131k\ncorr  = data.iloc[:,0:4].corr()\ncorr","5811018d":"import networkx as nx\n\nlinks  = corr.stack().reset_index()\nlinks.columns = [\"var1\",\"var2\",\"value\"]\n\n# correlation\nthreshold = -1\n\n# keep \nlinks_filtered = links.loc[ (links[\"value\"] >= threshold) & (links[\"var1\"] != links[\"var2\"])]\n\n# Build your graph\nG = nx.from_pandas_edgelist(links_filtered, \"var1\",\"var2\")\n\nnx.draw_circular(G, with_labels = True, node_color = \"orange\", node_size = 300, edge_color = \"red\", linewidths = 1, font_size = 10)","817ef550":"data.head()","d0e830c1":"# venn2\nfrom matplotlib_venn import venn2\nsepal_length = data.iloc[:,0] # sat\u0131r ayr\u0131ca al\u0131nd\u0131\nsepal_width = data.iloc[:,1]  # sat\u0131r ayr\u0131ca al\u0131nd\u0131\n#petal_length = data.iloc[:,2]\n#petal_width = data.iloc[:,3]\n\n#sepal_length de\u011ferinden 15 \u00e7\u0131kar\u0131ld\u0131 , sepal_width de\u011ferinden 15 \u00e7\u0131kar\u0131ld\u0131 \n# aralar\u0131ndaki kesi\u015fen b\u00f6l\u00fcm 15 olarak verildi\nvenn2(subsets = (len(sepal_length)-15, len(sepal_width)-15, 15), set_labels = (\"sepal_length\", \"sepal_width\"))\nplt.show()","20de09d4":"# donut plot\nfeature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(sepal_length),len(sepal_width),len(petal_length),len(petal_width)]\n\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.2,color=\"white\")  #olu\u015fturulan beyaz daire \nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"]) # renklendirdi\u011fiz b\u00f6l\u00fcm\np = plt.gcf()  # ortadaki beyaz k\u0131s\u0131m i\u00e7in kullan\u0131lan fonksiyonalar\np.gca().add_artist(circle) # ortadaki beyaz k\u0131s\u0131m i\u00e7in kullan\u0131lan fonksiyonalar\nplt.title(\"Number of Each Features\")\nplt.show()\n","20ef5998":"categories = list(data)[:4]\nN = len(categories)\nangles = [n\/float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize= (10,10))\nax = plt.subplot(111,polar=True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color=\"red\",size=7)\nplt.ylim(0,6)\n\nvalues = data.loc[0].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label=\"setaso\")\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = data.loc[1].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth=1,linestyle=\"solid\",label=\"versicolor\")\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc=\"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","87e146c9":"# cluster map (dendogram and tree)\n\ndf = data.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndf1 = data.Species\n\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\n    \ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12,12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size = 0)\nplt.show()","35b64d84":"trace1 = go.Scatter(\n    x = df.index,\n    y = df.SepalLengthCm,\n    mode = \"markers\",\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    name = \"SepalLengthCm\",\n    marker = dict(color = \"rgba(0,112,20,0.8)\"),\n)\ntrace2 = go.Histogram(\n    x = df.SepalLengthCm,\n    opacity = 0.75,\n    name = \"Sepal Length(Cm)\",\n    marker = dict(color = \"rgb(10,200,250,0.6)\"))\n\n\ndata = [trace1,trace2]\n\nlayout = go.Layout(\n    xaxis2 = dict(\n        domain = [0.7, 1],\n        anchor = \"y2\",\n    ),\n    yaxis2 = dict(\n        domain = [0.6,0.95],\n        anchor = \"x2\"\n    ),\n    title = \"Sepal Length(Cm) Histogram and Scatter Plot\"\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","43bbae90":"## Donut (Matplotlib)","697c625a":"## Inset Plots (Plotly)","cd9dcadc":"## Cluster Map (Seaborn)","d13a1a49":"## Matrix and Bar Plots (Missingno)\n","eeae9228":"## Venn (Matplotlib)","a92655b8":"## Spider Chart (Matplotlib)","19155280":"## Parallel Plots ","5ed6652d":"## Network Charts "}}