{"cell_type":{"ab0d4939":"code","2ad091da":"code","e02c2ff7":"code","e72e52d7":"code","38d3f018":"code","8a538ffa":"code","a7da8da1":"code","6cccef21":"code","59acba95":"code","18362c95":"code","0710d366":"code","4c67521e":"code","f1e0604b":"code","1cd3f715":"code","8d2412a8":"code","b9fd5d71":"code","a4cca629":"code","2ae59e70":"code","ec20546c":"code","d319a392":"code","744e387c":"code","232f1fb7":"code","493bae61":"code","21dfecd2":"code","01912ade":"code","a250033e":"code","9ab6a493":"markdown","08a12b39":"markdown","61dbadbc":"markdown","00955014":"markdown","9a187892":"markdown","f95c142a":"markdown","8b6c359e":"markdown","32325a7f":"markdown"},"source":{"ab0d4939":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nplt.style.use('ggplot')\n\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\n\nimport plotly\n# connected=True means it will download the latest version of plotly javascript library.\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","2ad091da":"# df = pd.read_csv('..\/input\/Admission_Predict.csv')\ndf = pd.read_csv(\"..\/input\/Admission_Predict_Ver1.1.csv\")","e02c2ff7":"df.head()","e72e52d7":"#Checking for null values\ndf.isna().sum()","38d3f018":"df.describe()","8a538ffa":"low = df['GRE Score'].min()-4\nhigh = df['GRE Score'].max()\ndata = [go.Histogram(\n        x = df['GRE Score'],\n        xbins = {'start': 286, 'size': 5, 'end' :high+1}\n)]\nprint('Average GRE score = ', np.mean(df['GRE Score']))\nplotly.offline.iplot(data, filename='overall_rating_distribution')\n","a7da8da1":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler()\n# Fit your data on the scaler object\nscaled_df = scaler.fit_transform(df)\nscaled_df = pd.DataFrame(scaled_df, columns= df.columns)\n# x_array = np.array(df['GRE Score'])\n# normalized_X = preprocessing.normalize([x_array])\n# df['normalized_GRE'] = normalized_X[0]\n# y_array = np.array(df['Chance of Admit '])\n# normalized_Y = preprocessing.normalize([y_array])\n# df['normalized_Chance'] = normalized_Y[0]\nsns.lmplot(x='GRE Score',y='Chance of Admit ', \n           data=scaled_df,fit_reg = True)\n# scaled_df","6cccef21":"df['ToeflCategories'] = pd.cut(df['TOEFL Score'], [90, 95 , 100, 105, 110, 115,121], labels=['90-95','95-100', '100-105','105-110','110-115','115-120'])\nnumber_of_students_in_category = df['ToeflCategories'].value_counts().sort_values(ascending=True)\ndata = [go.Pie(\n        labels = number_of_students_in_category.index,\n        values = number_of_students_in_category.values,\n        hoverinfo = 'label+value'\n    \n)]\nplotly.offline.iplot(data, filename='active_category')","59acba95":"df['ToeflCategories'] = pd.cut(df['TOEFL Score'], [90, 95 , 100, 105, 110, 115,121], labels=['90-95','95-100', '100-105','105-110','110-115','115-120'])\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"ToeflCategories\", y=\"GRE Score\", data=df)\nplt.title('GRE Score vs Toefl')\nplt.show()","18362c95":"sns.jointplot(x=\"GRE Score\", y=\"TOEFL Score\", data=df, height=10, ratio=3, color=\"r\")\nplt.show()","0710d366":"# sns.boxplot(x='University Rating', y ='GRE Score', data=df)\n# plt.show()\ndata = [go.Box(y=df['GRE Score'],x=df['University Rating'])]\nplotly.offline.iplot(data, filename='box\/multiple', validate = False,)","4c67521e":"data = []\ntrace = {\n            \"type\": 'violin',\n            \"x\": df['University Rating'],\n            \"y\": df['TOEFL Score'],\n            \"name\": pd.unique(df['University Rating']),\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            }\n        }\ndata.append(trace)\nfig = {\n    \"data\": data,\n    \"layout\" : {\n        \"title\": \"TOEFL Score vs University Ranking\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\nplotly.offline.iplot(fig, filename='violin\/multiple', validate = False)","f1e0604b":"temp = df.drop(['Serial No.'],axis=1)\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(temp.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","1cd3f715":"# Let's build a Regression model\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n","8d2412a8":"df_org = pd.read_csv(\"..\/input\/Admission_Predict_Ver1.1.csv\")","b9fd5d71":"# Preparing Data\ny= df_org.iloc[:,-1].values\nx = df_org.iloc[:,:-1]\nx = x.iloc[:,1:]\ny = pd.Series(y)","a4cca629":"xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size = 1\/3, random_state = 0)","2ae59e70":"linearRegressor = LinearRegression()\nlinearRegressor.fit(xTrain, yTrain)\nyPrediction = linearRegressor.predict(xTest)","ec20546c":"maxcoef = np.argsort(-np.abs(linearRegressor.coef_))\ncoef = linearRegressor.coef_[maxcoef]\nfor i in range(0, 7):\n    print(\"{:.<025} {:< 010.4e}\".format(x.columns[maxcoef[i]], coef[i]))","d319a392":"Ls = LassoCV()\n# Train the model using the training sets\nLs.fit(xTrain, yTrain)\nmaxcoef = np.argsort(-np.abs(Ls.coef_))\ncoef = Ls.coef_[maxcoef]\nprint(\"Importance of Parameters: \")\nfor i in range(0, 7):\n    print(\"{:.<025} {:< 010.4e}\".format(x.columns[maxcoef[i]], coef[i]))","744e387c":"Rr = RidgeCV()\nRr.fit(xTrain, yTrain)","232f1fb7":"maxcoef = np.argsort(-np.abs(Rr.coef_))\ncoef = Rr.coef_[maxcoef]\nprint(\"Importance of Parameters: \")\nfor i in range(0, 5):\n    print(\"{:.<025} {:< 010.4e}\".format(x.columns[maxcoef[i]], coef[i]))","493bae61":"EN = ElasticNetCV(l1_ratio=np.linspace(0.1, 1.0, 5)) # we are essentially smashing most of the Rr model here\n# Train the model using the training sets\ntrain_EN = EN.fit(xTrain, yTrain)","21dfecd2":"maxcoef = np.argsort(-np.abs(EN.coef_))\ncoef = EN.coef_[maxcoef]\nprint(\"Importance of Parameters: \")\nfor i in range(0, 5):\n    print(\"{:.<025} {:< 010.4e}\".format(x.columns[maxcoef[i]], coef[i]))","01912ade":"model = [linearRegressor,Ls, Rr, EN]\nmodel_name = ['Linear Regression','LassoCV','RidgeCV','ElasticNetCV']\nM = len(model)\nCV = 5\nscore = np.empty((M, CV))\nprint(\"Training Cross Validation Score:\")\nfor i in range(0, M):\n    score[i, :] = cross_val_score(model[i], xTrain, yTrain, cv=CV)\n    print(model_name[i],\":\",score.mean(axis=1)[i])\nprint(score.mean(axis=1))","a250033e":"model = [linearRegressor,Ls, Rr, EN]\nmodel_name = ['Linear Regression','LassoCV','RidgeCV','ElasticNetCV']\nM = len(model)\nCV = 5\nscore = np.empty((M, CV))\nprint(\"Testing Cross Validation Score:\")\nfor i in range(0, M):\n    score[i, :] = cross_val_score(model[i], xTest, yTest, cv=CV)\n    print(model_name[i],\":\",score.mean(axis=1)[i])\nprint(score.mean(axis=1))    ","9ab6a493":"**Inference**: Box plot shoes the range of GRE Score for given Toefl Category. It gives much clear understanding of students with different Scores","08a12b39":"## TOEFL Score","61dbadbc":"## Let's look closely into GRE Score","00955014":"**Inference**: GRE Score and Chance of admit have linear relationship","9a187892":"The above box plot gives an understanding of what kind of University is preferred by students with different GRE Scores.","f95c142a":"**Inference**:\nMaximum students have GRE Score between 321-325, followed by 311-315.","8b6c359e":"## Toefl score and University Ranking","32325a7f":"## Correlation Matrix"}}