{"cell_type":{"c9b689a6":"code","1ad37c6e":"code","2f930bd6":"code","3d0418c1":"code","e5cc7251":"code","a0c642a3":"code","48efef46":"code","0b2e7397":"code","fcbbbe97":"code","4bcff4b8":"code","964a84f1":"code","55af2e47":"code","c14e4e3a":"code","0a53057c":"code","c236bb16":"code","05a4b1e0":"code","09b1a039":"code","bf6f3d8c":"code","17ca7726":"code","046e65cf":"code","48b69347":"code","244414a9":"code","654642e1":"markdown"},"source":{"c9b689a6":"import os\n\nfrom PIL import Image\nimport pandas as pd\nfrom tqdm.auto import tqdm\nimport numpy as np\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut","1ad37c6e":"def get_xray(path):\n    dicom = pydicom.read_file(path)\n    return dicom\n\ndef xray_to_nparray(dicom,voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data\n\ndef nparray_to_img(array, size = None, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    if size == None:\n        return im\n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im\n\ndef xray_to_img(path,size = None,keep_ratio=False,voi_lut = True, fix_monochrome = True, resample=Image.LANCZOS):\n    dicom = get_xray(path)\n    data = xray_to_nparray(dicom,voi_lut=voi_lut,fix_monochrome=fix_monochrome)\n    img = nparray_to_img(data,size = size, keep_ratio=keep_ratio, resample=resample)\n    return img","2f930bd6":"# process csv\ndef split_train_csv(load_path,save_dir):\n    data = pd.read_csv(load_path)\n    #split train to each class\n    class_ids = data['class_id'].unique()\n    class_ids.sort()\n    os.makedirs(save_dir,exist_ok=True)\n    file_names = []\n    for class_id in tqdm(class_ids):\n        file_name = 'train_{:02d}.csv'.format(class_id)\n        file_names.append(file_name)\n        data[data['class_id']==class_id].reset_index().to_csv(os.path.join(save_dir,file_name))\n    return save_dir, file_names","3d0418c1":"# Process dicom\ndef get_raw_data_by_class(df,class_id,load_dir,save_dir = None):\n    file_names = df[df['class_id']==class_id]['image_id'].unique()    \n    data = []\n    for file_name in tqdm(file_names):\n        path_dicom = os.path.join(load_dir,file_name+'.dicom')\n        xray = get_xray(path_dicom).pixel_array\n        if save_dir is not None:\n            os.makedirs(save_dir,exist_ok=True)\n            path_npy = os.path.join(save_dir,file_name+'.npy')\n            if os.path.isfile(path_npy) is False:\n                np.save(path_npy,xray)\n        data.append([file_name,xray])        \n    return data\ndef get_png_by_class(df,class_id,load_dir,save_dir = None):\n    file_names = df[df['class_id']==class_id]['image_id'].unique()\n    data = []\n    for file_name in tqdm(file_names):\n        path_dicom = os.path.join(load_dir,file_name+'.dicom')\n        img = xray_to_img(path_dicom)\n        if save_dir is not None:\n            os.makedirs(save_dir,exist_ok=True)\n            path_png = os.path.join(save_dir,file_name+'.png')\n            if os.path.isfile(path_png) is False:\n                img.save(path_png)\n        data.append([file_name,img])        \n    return data","e5cc7251":"from shutil import copyfile\ndef copy_data_by_class(df,class_id,load_dir,save_dir):\n    file_names = df[df['class_id']==class_id]['image_id'].unique()\n    os.makedirs(save_dir,exist_ok=True)\n    for file_name in tqdm(file_names):\n        copy_dicom = os.path.join(load_dir,file_name+'.dicom')\n        paste_dicom = os.path.join(save_dir,file_name+'.dicom')\n        copyfile(copy_dicom,paste_dicom)","a0c642a3":"data_dir = f'..\/input\/vinbigdata-chest-xray-abnormalities-detection\/'\ntrain_csv_path = os.path.join(data_dir,'train.csv')\ntrain_folder_path = os.path.join(data_dir,'train')\nsplit_train_csv_path = '.\/train_csv'","48efef46":"csv_folder, csv_names= split_train_csv(train_csv_path,split_train_csv_path)","0b2e7397":"class_14 = pd.read_csv(os.path.join(csv_folder,csv_names[14]))\nclass_14.describe()","fcbbbe97":"class_12 = pd.read_csv(os.path.join(csv_folder,csv_names[12]))\nclass_12.describe()","4bcff4b8":"# get number image as class_12\ndf_class_14 = class_14[class_14['image_id'].isin(class_14['image_id'].unique()[:len(class_12['image_id'].unique())])]","964a84f1":"df_class_14.to_csv('.\/train_csv\/class_14_12')","55af2e47":"get_raw_data_by_class(df_class_14,14,train_folder_path,'.\/train\/npy_class_14_12')","c14e4e3a":"get_png_by_class(df_class_14,14,train_folder_path,'.\/train\/png_class_14_12')","0a53057c":"get_raw_data_by_class(class_12,12,train_folder_path,'.\/train\/npy_class_12')","c236bb16":"get_png_by_class(class_12,12,train_folder_path,'.\/train\/png_class_12')","05a4b1e0":"copy_data_by_class(class_12,12,train_folder_path,'.\/train_dicom_12')","09b1a039":"copy_data_by_class(df_class_14,14,train_folder_path,'.\/train_dicom_14')","bf6f3d8c":"%%time\n!zip -r train_csv.zip .\/train_csv","17ca7726":"!zip -r png_class_14_12.zip .\/train\/png_class_14_12","046e65cf":"!zip -r npy_class_14_12.zip .\/train\/npy_class_14_12","48b69347":"!zip -r dicom_class_12.zip .\/train_dicom_12","244414a9":"!zip -r dicom_class_14_12.zip .\/train_dicom_14","654642e1":"source: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image"}}