{"cell_type":{"e061e8ec":"code","1cca6bfe":"code","a94751f0":"code","f0e335df":"code","0c57cce9":"code","d470d51c":"code","451f2458":"code","92b2dba8":"code","b82f05c1":"code","f6ccf2bf":"code","f91c52c2":"code","b6588c47":"code","bed77d2d":"code","88914348":"code","4857539e":"code","7c2d6566":"code","4c7386bf":"code","e926162a":"code","abc23a46":"code","b0bb91d4":"code","470f4c4b":"code","173a19f5":"code","8e042eef":"code","60f6377c":"code","ec73e46d":"code","4fa22c1b":"code","c70244f2":"markdown","3edb3418":"markdown","f329fe49":"markdown","a1de260a":"markdown","754029d6":"markdown","b913fdcc":"markdown"},"source":{"e061e8ec":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nimport numpy as np","1cca6bfe":"m = nn.Conv1d(in_channels = 1, out_channels = 1, kernel_size = 1, stride=1)","a94751f0":"m.padding","f0e335df":"m.weight","0c57cce9":"m.bias","d470d51c":"input = torch.tensor([[[2.,3.,4.,]]])\nprint(input)","451f2458":"output = m(input)\nprint(output)","92b2dba8":"print(2 * m.weight + m.bias )\nprint(3 * m.weight + m.bias)\nprint(4 * m.weight + m.bias)","b82f05c1":"input = torch.tensor([\n    [[2.,3.,4.,]],\n    [[20.,30.,40.,]]\n])\nprint(input)","f6ccf2bf":"output = m(input)\nprint(output)","f91c52c2":"print(2 * m.weight + m.bias )\nprint(3 * m.weight + m.bias)\nprint(4 * m.weight + m.bias)\n\nprint(20 * m.weight + m.bias )\nprint(30 * m.weight + m.bias)\nprint(40 * m.weight + m.bias)","b6588c47":"input = torch.tensor([[[2.,3.,4.,]]])\nprint(input)","bed77d2d":"m = nn.Conv1d(in_channels = 1, out_channels = 1, kernel_size = 2, stride=1)","88914348":"m.weight , m.bias","4857539e":"m.weight[0][0][0] , m.weight[0][0][1] , m.bias","7c2d6566":"2 * m.weight[0][0][0] + 3* m.weight[0][0][1] +  m.bias ","4c7386bf":"3 * m.weight[0][0][0] + 4* m.weight[0][0][1] +  m.bias ","e926162a":"output = m(input)\nprint(output)","abc23a46":"m = nn.Conv1d(in_channels = 1, out_channels = 1, kernel_size = 2, stride=2)","b0bb91d4":"m.weight , m.bias","470f4c4b":"print(m(input))","173a19f5":"2 * m.weight[0][0][0] + 3* m.weight[0][0][1] +  m.bias ","8e042eef":"m = nn.Conv1d(in_channels = 1, out_channels = 1, kernel_size = 2, stride=2,padding = 1)","60f6377c":"m.weight , m.bias","ec73e46d":"print(m(input))","4fa22c1b":"print(0 * m.weight[0][0][0] + 2* m.weight[0][0][1] +  m.bias )\nprint(3 * m.weight[0][0][0] + 4 * m.weight[0][0][1] + m.bias )","c70244f2":"# Kernel Size = 2 , Stride = 2","3edb3418":"# Kernel Size = 1 , Input Sequence Length = 2","f329fe49":"# Kernel Size = 2 , Stride = 2 , Padding = 1","a1de260a":"# Kernel Size  = 1","754029d6":">  Zero-padding added to both sides of the input. Default: 0","b913fdcc":"# Kernel size = 2"}}