{"cell_type":{"e3174f8f":"code","fa82d924":"code","f4437985":"code","d75a454f":"code","d5c39e7e":"code","d4e93e45":"code","10ce2d66":"code","f986974b":"code","8d662522":"code","84bcf0fa":"code","5998f6da":"code","119121af":"code","3e4f624d":"code","aee6b1d7":"code","ca213b59":"code","fa934969":"code","1737492a":"code","fdb15941":"code","4fda8083":"code","ddaf8137":"code","bbf42d9c":"code","e28321a9":"code","0db418c5":"code","b7e3ac93":"code","c400d82c":"code","c0990332":"code","f44c0445":"code","4ce71e8c":"code","02ea9006":"markdown","6901ee1c":"markdown","dd4a8806":"markdown","733fe781":"markdown","abe1f02a":"markdown","140442a1":"markdown","3cc83086":"markdown","32396606":"markdown","f2bd9476":"markdown","b6ae26bc":"markdown","9d24c478":"markdown","dfab30ae":"markdown","76d496fc":"markdown","9cbc9997":"markdown","195eee70":"markdown","95aadbce":"markdown","a04d7e73":"markdown","05f718b4":"markdown","8659ee13":"markdown","9ee415a6":"markdown","556b4102":"markdown","2a402c17":"markdown","fd3f2535":"markdown","488f469b":"markdown","d86aaf25":"markdown","b7653733":"markdown","412ae3eb":"markdown","33f0ac9b":"markdown"},"source":{"e3174f8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa82d924":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n!cat \/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt","f4437985":"import seaborn as sns\nsns.distplot(train.SalePrice)","d75a454f":"train.columns","d5c39e7e":"import matplotlib.pyplot as plt\nplt.figure(figsize = (20,10))\nplt.title('Missing values')\nsns.heatmap(train.isna() == False, cbar = False)","d4e93e45":"plt.figure(figsize = (20,15))\nsns.barplot(y = train.corr().SalePrice.index, x = train.corr().SalePrice)\nplt.xlabel('Correlation')\nplt.show()","10ce2d66":"categories = list(train.select_dtypes(include = 'object').columns)\ncategories.append('YrSold')\nnumerical = list(train.select_dtypes(exclude = 'object').columns)\nnumerical.remove('YrSold')\nnumerical.remove('SalePrice')\nlen(categories)","f986974b":"outdoor = ['LotFrontage', 'LotArea', 'Street','Alley','LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Exterior1st', 'Exterior2nd', 'ExterQual','ExterCond' , 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal' ]\nindoor = ['BldgType','1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu']\nlocation = ['MSZoning', 'Neighborhood', 'Condition1','Condition2']\nmaterials = ['MSSubClass', 'Utilities', 'HouseStyle', 'OverallQual', 'OverallCond','YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'MasVnrType','MasVnrArea' , 'Foundation', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical' ]\notherindoor = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond']\nsale = ['MoSold', 'YrSold', 'SaleType',\n       'SaleCondition']","8d662522":"plt.figure(figsize = (20,10))\nplt.subplot(3,2,1)\ncols = outdoor\ncols.append('SalePrice')\nsns.barplot(y = train[cols ].corr().SalePrice.index, x = train[cols].corr().SalePrice)\nplt.subplot(3,2,2)\ncols = indoor\ncols.append('SalePrice')\nsns.barplot(y = train[cols ].corr().SalePrice.index, x = train[cols].corr().SalePrice)\nplt.subplot(3,2,3)\ncols = materials\ncols.append('SalePrice')\nsns.barplot(y = train[cols ].corr().SalePrice.index, x = train[cols].corr().SalePrice)\nplt.subplot(3,2,4)\ncols = otherindoor\ncols.append('SalePrice')\nsns.barplot(y = train[cols ].corr().SalePrice.index, x = train[cols].corr().SalePrice)","84bcf0fa":"print(train.YrSold.unique())\nsns.barplot(x = train.YrSold, y = train.SalePrice)","5998f6da":"plt.figure()\nsns.scatterplot(x = train['GrLivArea'], y = train.SalePrice)\nplt.figure()\nsns.scatterplot(x = train['LotArea'], y = train.SalePrice)","119121af":"plt.figure(figsize = (10,5))\nsns.barplot(x = train.groupby('Neighborhood').mean().SalePrice, y = train.groupby('Neighborhood').mean().index)","3e4f624d":"plt.figure(figsize = (10,5))\nsns.barplot(x = train.groupby('HouseStyle').mean().SalePrice, y = train.groupby('HouseStyle').mean().index)","aee6b1d7":"from sklearn.model_selection import train_test_split\nX = train.drop('SalePrice', axis = 1)\ny = train['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1)\nX_train","ca213b59":"from sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nnumerical_pipeline = make_pipeline(SimpleImputer(strategy = 'mean'), StandardScaler())\ncategorical_pipeline = make_pipeline(SimpleImputer(strategy = 'most_frequent'),OneHotEncoder(handle_unknown = 'ignore', sparse = False) )\nprepro = make_column_transformer((numerical_pipeline, numerical), (categorical_pipeline, categories), sparse_threshold = 0)\npipeline = make_pipeline(prepro,DecisionTreeRegressor() )\npipeline.fit(X_train, y_train)\nprepro.fit_transform(X_train, y_train)","fa934969":"from sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import learning_curve, cross_val_score\n\ndef FE_evaluation(prepro):\n    X_pre = prepro.fit_transform(X_train, y_train)\n    model = DecisionTreeRegressor()\n    train_sizes, train_scores, val_scores = learning_curve(model, X_pre, y_train, train_sizes = np.linspace(0.1,1,10) , shuffle = True, random_state = 0)\n    \n    \n   \n    return cross_val_score(model, X_pre, y_train, cv =3).mean(axis = 0)\nFE_evaluation(prepro)","1737492a":"def divide(features):\n    cat = list(train[features].select_dtypes(include = 'object').columns)\n    num = list(train[features].select_dtypes(exclude = 'object').columns)\n    \n    \n    return cat, num\ndef tryfeatures(features):\n    cat, num = divide(features)\n    prepro = make_column_transformer((numerical_pipeline, num), (categorical_pipeline, cat))\n    return FE_evaluation(prepro)\n","fdb15941":"missing_values = train.drop('SalePrice', axis = 1).isna().sum()\/train.shape[0]\nmissing_values.sort_values(ascending = False, inplace = True)\nfor tr in [0.01, 0.05, 0.1, 0.2, 0.3, 0.4,]:\n    new_columns = list(missing_values[missing_values < tr].index)\n    print (tryfeatures(new_columns))","4fda8083":"scores = []\ndef SelectBestCorr(threshold):\n    corr = train.corr()[train.corr().SalePrice > threshold]\n    corr_features = list(corr.SalePrice.index.drop('SalePrice'))\n    catcorr = train.drop(numerical, axis = 1).copy()\n    catcorr = pd.get_dummies(catcorr) \n    catcorr = catcorr.corr(method = 'pearson')\n    cat_threshold = catcorr[abs(catcorr.SalePrice) > threshold]\n    new_cats = list(set(list(cat_threshold.index.str.split('_').str[0])))\n    new_cats.remove('SalePrice')\n    return new_cats, corr_features\nSelectBestCorr(0.5)","ddaf8137":"num, cat = SelectBestCorr(0.5)\nmissing_values = train.drop('SalePrice', axis = 1).isna().sum()\/train.shape[0]\nmissing_values.sort_values(ascending = False, inplace = True)\nnew_columns = list(missing_values[missing_values < 0.05].index)\nfeatures = list(set(new_columns) & set( num + cat))\ntryfeatures(num+cat), tryfeatures(new_columns), tryfeatures(features)","bbf42d9c":"X_train, X_test, y_train, y_test = train_test_split(train[features], train['SalePrice'], random_state = 1)\nto_pred = test[features]\nto_pred","e28321a9":"from sklearn.preprocessing import PolynomialFeatures\ncat, num = divide(features)\nnumerical_pipeline = make_pipeline(SimpleImputer(strategy = 'mean'), StandardScaler() )\ncategorical_pipeline = make_pipeline(SimpleImputer(strategy = 'most_frequent'),OneHotEncoder(handle_unknown = 'ignore', sparse = False) )\nprepro = make_column_transformer((numerical_pipeline, num), (categorical_pipeline, cat), sparse_threshold = 0)\npipeline = make_pipeline(prepro,DecisionTreeRegressor() )\npipeline.fit(X_train, y_train)\npipeline","0db418c5":"def FE_evaluation2(prepro):\n    X_pre = prepro.fit_transform(X_train, y_train)\n    model = DecisionTreeRegressor()\n    return cross_val_score(model, X_pre, y_train, cv =3).mean(axis = 0)","b7e3ac93":"FE_evaluation2(prepro)","c400d82c":"\ndef evaluation(model):\n    #X_pre = prepro.fit_transform(X_train, y_train)\n    train_sizes, train_scores, val_scores = learning_curve(model, X_train, y_train, train_sizes = np.linspace(0.1,1,10) )\n    plt.figure()\n    plt.plot(train_sizes, train_scores.mean(axis = 1), label = 'train')\n    plt.plot(train_sizes, val_scores.mean(axis = 1), label = 'val')\n    return val_scores.mean(axis=1)[-1] \n\nevaluation(pipeline)","c0990332":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor\nfrom sklearn.linear_model import Ridge, Lasso\ncat, num = divide(features)\nnumerical_pipeline = make_pipeline(SimpleImputer(strategy = 'mean'), StandardScaler() )\ncategorical_pipeline = make_pipeline(SimpleImputer(strategy = 'most_frequent'),OneHotEncoder(handle_unknown = 'ignore', sparse = False) )\nprepro = make_column_transformer((numerical_pipeline, num), (categorical_pipeline, cat), sparse_threshold = 0)\npipeline1 = make_pipeline(prepro,RandomForestRegressor(n_estimators = 150) )\npipeline2 = make_pipeline(prepro,AdaBoostRegressor() )\npipeline3 = make_pipeline(prepro, LinearRegression())\npipeline4 = make_pipeline(prepro, PolynomialFeatures(2), LinearRegression())\npipeline5 = make_pipeline(prepro, Ridge())\npipeline6 = make_pipeline(prepro, Lasso())\nmodels = [pipeline1, pipeline5, pipeline6]\nfor model in models :\n    print (evaluation(model))\n","f44c0445":"from sklearn.model_selection import GridSearchCV\ngrid = GridSearchCV(RandomForestRegressor(), param_grid = {'n_estimators' : [50, 100, 150]})\ngrid.fit(prepro.fit_transform(X_train), y_train)\ngrid.best_params_","4ce71e8c":"pipeline1.fit(X_train, y_train)\npipeline1.score(X_test, y_test)\n\nsubmission = pd.Series(data =pipeline1.predict(to_pred), index = test['Id'] , name = 'SalePrice')\nsubmission.to_csv('\/kaggle\/working\/apparts.csv')\nsubmission","02ea9006":"Now let's try by selecting manually some features. ","6901ee1c":"So far filtering nan values and values with less than 50% correlation seems to be the best idea ! Yeah ! Should we try some feature engineering ? ","dd4a8806":"# EVALUATION\nNow we need a function that evaluates our feature engineering.","733fe781":"Indeed OverallQual and GrLivArea seems to be highly correlated with the price. But it is more surprising to see such correlation with GarageArea and SalePrice !","abe1f02a":"We need to get a list of all values of categorical features in both training and test set ... Because otherwise it makes it hard with OneHotEncoder. ","140442a1":"# Feature Engineering","3cc83086":"Removing features with more than 5% NAN values seems useful. How could we select the best features ? What if we tried a correlation threshold ?","32396606":"Let's divide our training set !","f2bd9476":"# Model Selection","b6ae26bc":"We have way too many features to see clear in all of this. Let's group these features by theme !","9d24c478":"What do our features look like ? ","dfab30ae":"Let's create a very simple pipeline that does the strict minimum : deal with missing values and encode strings, then apply a Decision Tree.","76d496fc":"Pour un mod\u00e8le \"tout b\u00eate\" sans feature selection et sans feature engineering, on arrive \u00e0 0.64. ","9cbc9997":"Let's have a look at our numerical values and how they are correlated to our target value !","195eee70":"Using decision tree coefs :","95aadbce":"Let's load our dataset and have a look at the info !","a04d7e73":"First, let's have a look at our target value. ","05f718b4":"Size is highly correlated to SalePrice.","8659ee13":"# PREPROCESSING : Imputation, Encoding","9ee415a6":"It looks like some values are too rare to be useful : that is the case of Alley, PoolQC, Fence, MiscFeature","556b4102":"My guess would be that most important features are : OverallQual, MsZoning, GrLivArea. But it's just a guess !","2a402c17":"0.5 seems like a good correlation threshold ! ","fd3f2535":"# Exploratory Data Analysis","488f469b":"Now let's study some features that look fascinating. We can start with plotting the date year and SalePrice. ","d86aaf25":"# FEATURE SELECTION","b7653733":"Strangely the crisis did not seem to have a huge impact on our average SalePrice. ","412ae3eb":"What about missing values ?","33f0ac9b":"# Feature selection with Nan Values"}}