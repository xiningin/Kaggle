{"cell_type":{"e129cc56":"code","099103d5":"code","e041d506":"code","00226f02":"code","8ea76e75":"code","588da032":"code","05d68e32":"code","91a1c0a5":"code","391941cb":"code","ee3d34e5":"code","9dfc3cc8":"code","224b9f30":"code","82e60e29":"code","46ca92ae":"code","67889b26":"code","b24f540e":"code","f8e76a9b":"code","6a358eed":"code","0fd0afeb":"code","eaaab89e":"code","907717cd":"code","be29c06c":"code","a94897e5":"code","1bed52ce":"code","825447bc":"code","1f221581":"code","e7bffb61":"markdown","3e906e64":"markdown","f5883066":"markdown","b3a514f5":"markdown"},"source":{"e129cc56":"import gc\n\nimport numpy as np\nimport pandas as pd\n\nfrom pprint import pprint\n\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.metrics import mean_absolute_error\n\nimport xgboost as xg\n","099103d5":"%%time\ntrain = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')","e041d506":"print('train shape:', train.shape)\nprint('test shape:', test.shape)","00226f02":"train.head()","8ea76e75":"test.head()","588da032":"train[\"u_in_cumsum\"] = (train['u_in']).groupby(train['breath_id']).cumsum()\ntest['u_in_cumsum'] = (test['u_in']).groupby(test['breath_id']).cumsum()","05d68e32":"train['u_in_lag'] = train.groupby('breath_id')['u_in'].shift(2)\ntrain = train.fillna(0)\ntest['u_in_lag'] = test.groupby('breath_id')['u_in'].shift(2)\ntest = test.fillna(0)\n","91a1c0a5":"y = train['pressure']\nX = train.drop(['id','breath_id', 'pressure'],axis=1)","391941cb":"del train\ngc.collect()","ee3d34e5":"transformer = Normalizer().fit(X)","9dfc3cc8":"transformer.transform(X)","224b9f30":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.33, random_state=42)","82e60e29":"xgbr = xg.XGBRegressor(seed = 42, n_jobs=-1)","46ca92ae":"n_estimators = [5, 10, 15]\nmax_depth = [3, 5, 7]\nmin_child_weight = [0.05, 0.10, 0.15]\n\n\nrandom_grid = {\n    'n_estimators' : n_estimators,\n    'max_depth' : max_depth,\n    'min_child_weight' : min_child_weight\n}\n\n\npprint(random_grid)","67889b26":"clf = RandomizedSearchCV(estimator = xgbr, param_distributions = random_grid, n_iter = 5, cv = 3, verbose = 2, random_state = 42, n_jobs = -1, scoring = 'neg_mean_squared_error')","b24f540e":"%%time\nclf.fit(X_train, y_train)","f8e76a9b":"del y,  X_train, y_train\ngc.collect()","6a358eed":"print('Best Score: ', clf.best_score_) \nprint('Best Params: ', clf.best_params_)","0fd0afeb":"y_pred = clf.predict(X_test)","eaaab89e":"mean_absolute_error(y_test, y_pred)","907717cd":"X = test.drop(['id','breath_id'], axis=1)","be29c06c":"del X_test, y_test\ngc.collect()","a94897e5":"y_predicted = clf.predict(X)","1bed52ce":"data = {'id' : test['id'], 'pressure' : y_predicted}\ndf = pd.DataFrame(data=data)\ndf.head()","825447bc":"df.to_csv('submission.csv', index=False)","1f221581":"del X, clf, y_pred, test, y_predicted \ngc.collect()","e7bffb61":"# Reading the dataset","3e906e64":"# Exporting predictions to appropriate submission format","f5883066":"# Applying XGBoost Regressor","b3a514f5":"# Data preprocessing"}}