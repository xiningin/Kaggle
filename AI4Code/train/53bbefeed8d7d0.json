{"cell_type":{"88e9c03b":"code","c99775e9":"code","53e3edb8":"code","60743c6e":"code","5f496803":"code","b6620a11":"code","b9ba4111":"code","6baaaf7b":"code","0b17cf62":"code","6a51791c":"code","67227450":"code","1e96c234":"code","bbbcb965":"code","4f499c41":"code","41fb518a":"code","93647efe":"code","d981402b":"code","87f5d530":"code","2bb076bf":"code","8e9084bc":"code","9696cc51":"code","31128d16":"markdown","583d4980":"markdown","21472e22":"markdown","b963dfcd":"markdown","19ac3e46":"markdown"},"source":{"88e9c03b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n#%matplotlib inline\n%matplotlib notebook\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/summerschool2020'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c99775e9":"#read_data.py\n\"\"\"\nExamplary code snippet for reading the data files provided\nfor the SFB Summerschool 2020 Robot Positioning Challenge.\n\"\"\"\nimport os\nimport pandas\n\n# Provide your path to the training data (same for test data)\n#train_data_dir = '\/kaggle\/input\/summerschool2020\/Robot_Data\/train'\ndata_dir = '\/kaggle\/input\/summerschool2020\/Robot_Data\/train'\n#os.path.join(dirname, train_data_dir)\n\"path\/to\/training\/data\"\n\ntrain = []\nfor file in os.listdir(data_dir):\n    # Read a single file as pandas DataFrame\n    df = pandas.read_csv(os.path.join(data_dir, file))\n    frames = []\n    # Generate a single frame for each row\n    for index, row in df.T.items():\n        # Create dictionary with constant values (i.e. labels and frame number)\n        frame = {col: row[col] for col in df.columns if col != 'data'}\n        # Create pandas.DataFrame from Json String located in the 'data' column\n        frame['data']  = pandas.read_json(row['data'])\n        frames.append(frame)\n    train.append(frames)\n","53e3edb8":"frame","60743c6e":"frames[0]","5f496803":"frame['data']","b6620a11":"#%matplotlib notebook\n\nplt.rcParams['figure.figsize'] = (6,4)\nplt.rcParams['figure.dpi'] =150\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')","b9ba4111":"x = df['vicon_x'].iloc[0] * 100\ny = df['vicon_y'].iloc[0] * 100\n(x, y)","6baaaf7b":"df = pandas.read_csv(os.path.join(data_dir, 'run1_diagonal.csv'))","0b17cf62":"from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,\n                               AutoMinorLocator)","6a51791c":"x = df['vicon_x'] * 100\ny = df['vicon_y'] * 100\nx = x + 1318.5\ny = y + 857.5\nz = 0\nfig = plt.figure()\nax = fig.add_subplot()\nax.plot(x, y)\n#ax.scatter(x, y)\nax.set_xlim([0, 2500])\nax.set_ylim([0, 1600])\n#cursor = Cursor(ax, useblit = True, color ='red',  \n#                linewidth = 2)\n\nax.xaxis.set_major_locator(MultipleLocator(500))\n\n# For the minor ticks, use no labels; default NullFormatter.\nax.xaxis.set_minor_locator(MultipleLocator(100))\nax.yaxis.set_minor_locator(MultipleLocator(100))\n\nax.grid()\nplt.show()","67227450":"# logit\n#plt.subplot(224)\nplt.plot(x, y)\nplt.xscale('logit')\nplt.yscale('logit')\nplt.title('logit')\nplt.grid(True)\nplt.show()","1e96c234":"frame.plot()","bbbcb965":"df1 = pd.DataFrame.from_dict(frame['data'])\ndf1","4f499c41":"df1.plot()","41fb518a":"#Do not run this cell\n#%matplotlib inline\n#fig = plt.figure()\n#ax = fig.add_subplot(111, projection='3d')\n\n# Grab some test data.\n#X, Y, Z = Axes3D.get_test_data(0.05)\n#X = 15\n#Y = 23\n#Z = 0\n\n# Plot a basic wireframe.\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n#plt.show()","93647efe":"dat = frames[7]\ndat","d981402b":"dat['data']","87f5d530":"#Ploting single frame data\nx = df1['strip_id']\ny = df1['node_id']\n#x = x + 1318.5\n#y = y + 1318.5\nz = 0\nfig = plt.figure()\nax = fig.add_subplot()\n#ax.plot(x, y)\nax.scatter(x, y)\nax.set_xlim([0, 25])\nax.set_ylim([0, 17])\n#cursor = Cursor(ax, useblit = True, color ='red',  \n#                linewidth = 2)\n\n#ax.xaxis.set_major_locator(MultipleLocator(500))\n\n# For the minor ticks, use no labels; default NullFormatter.\n#ax.xaxis.set_minor_locator(MultipleLocator(100))\n\nax.grid()\nplt.show()","2bb076bf":"x = df['vicon_x'] * 100\ny = df['vicon_y'] * 100\nx = x + 1318.5\ny = y + 857.5\nz = 0\nfig = plt.figure()\nax = fig.add_subplot()\nax.plot(x, y)\n#ax.scatter(x, y)\nax.set_xlim([0, 2500])\nax.set_ylim([0, 1600])\n#cursor = Cursor(ax, useblit = True, color ='red',  \n#                linewidth = 2)\n\nax.xaxis.set_major_locator(MultipleLocator(500))\n\n# For the minor ticks, use no labels; default NullFormatter.\nax.xaxis.set_minor_locator(MultipleLocator(100))\nax.yaxis.set_minor_locator(MultipleLocator(100))\n\nax.grid()\nplt.show()\n#----------------------------------------------------------\n\nX1 = (df['vicon_x'] * 100) + 1318.5\nY1 = (df['vicon_y'] * 100) + 857.5\nX2 = df1['strip_id']\nY2 = df1['node_id']\nfig = plt.figure()\nax = fig.add_subplot()\nax.plot(X1, Y1, 'r')\nax.plot(X2, Y2, 'b')\nax.set_xlim([0, 2500])\nax.set_ylim([0, 1600])\nax.xaxis.set_major_locator(MultipleLocator(500))\n# For the minor ticks, use no labels; default NullFormatter.\nax.xaxis.set_minor_locator(MultipleLocator(100))\nax.yaxis.set_minor_locator(MultipleLocator(100))\nax.grid()\nplt.show()\n\n#----------------------------------\n\n# Show the secret data\nplt.subplot(2,1,1)\nplt.plot(secret_data_X1,secret_data_Y1,'r')\nplt.plot(secret_data_X2,secret_data_Y2,'b')\n\n# Loop through the plots created and find the x,y values\nX,Y = [], []   \nfor lines in plt.gca().get_lines():\n    for x,y in lines.get_xydata():\n        X.append(x)\n        Y.append(y)\n\n# If you are doing a line plot, we don't know if the x values are\n# sequential, we sort based off the x-values\nidx = np.argsort(X)\nX = np.array(X)[idx]\nY = np.array(Y)[idx]\n\nplt.subplot(2,1,2)\nplt.plot(X,Y,'g')\nplt.show()","8e9084bc":"X1 = (df['vicon_x'] * 100) + 1318.5\nY1 = (df['vicon_y'] * 100) + 857.5\nX2 = df1['strip_id']\nY2 = df1['node_id']\nfig = plt.figure()\nax = fig.add_subplot()\nax.plot(X1, Y1, 'r')\nax.plot(X2, Y2, 'b')\nax.set_xlim([0, 2500])\nax.set_ylim([0, 1600])\nax.xaxis.set_major_locator(MultipleLocator(500))\n# For the minor ticks, use no labels; default NullFormatter.\nax.xaxis.set_minor_locator(MultipleLocator(100))\nax.yaxis.set_minor_locator(MultipleLocator(100))\n\nX,Y = [], []   \nfor lines in plt.gca().get_lines():\n    for x,y in lines.get_xydata():\n        X.append(x)\n        Y.append(y)\n\nax.grid()\nplt.show()\n","9696cc51":"import matplotlib.pyplot as plt\nmx = df1['mx']\nimg = df1.pivot(X2, Y2, mx)  \nplt.imshow(img)\nplt.annotate('Robot Position',  xy=(7.5 - vicon_y, vicon_x + 12.18))\nplt.show()","31128d16":"1. > First draw Grid\n2. than plot sensor data\n3. than subtract the vicon position 1318.5 c.m to mach the position on origin","583d4980":"Rough experiment","21472e22":"Vicon origin\nbetween (13,8) and (13,9) \n\n57,5 cm from node 8 and 42.5cm from node 9","b963dfcd":"**Visualizing robot Vicon Tracking data to understand**","19ac3e46":"Now I need to do following things:\n1. Plot sensor floor by strip_id\n2. Plot sensors data on the floor\n3. Analyze the sensor data\n4. Find way to compare vicon tracking data and  the sensor floor data\n5. Try to plot strips_ids, sensor floor, Sensors Data, and vicon tracking data over each other."}}