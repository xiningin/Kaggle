{"cell_type":{"e1f12dec":"code","a0429510":"code","6d691007":"code","04886b6a":"code","dc46e056":"code","98781589":"code","27dba1f7":"code","15629139":"code","72f2911f":"code","6ffe04cb":"code","23136ab2":"code","c329239b":"code","dbee9434":"code","69baf97a":"code","27ab015e":"code","7c890747":"code","af465dd0":"code","c4e0280c":"code","f6f86734":"code","11774ea8":"code","7108e8af":"code","e5ab3a1b":"code","3a5e0804":"code","839bd15a":"markdown","9ec8dc74":"markdown","c8b58eda":"markdown","25aac66c":"markdown"},"source":{"e1f12dec":"!pip install --user watermark\n!pip install nicaviz","a0429510":"%reload_ext autoreload\n%autoreload 2","6d691007":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport nicaviz\nimport seaborn as sns\nimport time\nimport matplotlib.pyplot as plt\n\nfrom sklearn import linear_model\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler, OneHotEncoder\n\nfrom sklearn.metrics import mean_absolute_error\nimport itertools\nimport seaborn as sns\nimport math\n\npd.options.display.max_rows = 999\npd.options.display.width = 500\npd.options.display.max_columns = 500\npd.options.display.max_colwidth = 5000\n\nsns.set_style(\"whitegrid\")\n\n%load_ext watermark\n%watermark \n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nnotebookstart = time.time()\n%watermark --iversions","04886b6a":"def ae(y_true, y_score):\n    return np.abs(y_true - y_score)\n\ndef breath_id_plotter(df, plotcols, rows):\n    plot_index = np.random.choice(df['breath_id'].unique(), rows*3)\n    f,ax = plt.subplots(rows,3, figsize = [16,rows*3.3])\n    for i, ax in zip(plot_index, ax.ravel()):\n        iti_df = df.loc[df['breath_id'] == i, :]\n        info = iti_df.loc[:, [\"R\",\"C\"]].iloc[0].to_dict()\n        iti_df.set_index(\"time_step\")\\\n            .loc[:, plotcols]\\\n            .plot(ax=ax, linewidth=2)\n        ax.set_title(f'Breath Id {i}\\n{info}')\n        ax.set_ylabel(\"Values\")\n        ax.set_xlabel(\"Time Step\")\n        ax.grid(True, lw=1, ls='--', c='.75')\n        ax.spines['top'].set_visible(False)\n        ax.spines['right'].set_visible(False)\n\n    plt.tight_layout(pad=1)\n    plt.show()\n\ndef feature_prep_cate_le(xtrain, xtest, categorical_columns):\n    categorical_dims = {}\n    for col in categorical_columns:\n        l_enc = LabelEncoder()\n        xtrain[col] = l_enc.fit_transform(xtrain[col].values)\n        xtest[col] = l_enc.transform(xtest[col].values)\n        categorical_dims[col] = len(l_enc.classes_)\n    return xtrain, xtest, categorical_dims\n\ndef feature_prep_cate_ohe(xtrain, xtest, categorical_columns):\n    ohe_train_all = pd.DataFrame()\n    ohe_test_all = pd.DataFrame()\n    for col in categorical_columns:\n        ohe = OneHotEncoder()\n        train_ohe = ohe.fit_transform(\n            xtrain[col].values.reshape(-1, 1)).todense()\n        test_ohe = ohe.transform(xtest[col].values.reshape(-1, 1)).todense()\n        colnames = ['{}_{}'.format(col, x) for x in ohe.categories_[0]]\n        ohe_train_all = pd.concat(\n            [ohe_train_all, pd.DataFrame(train_ohe, columns=colnames)], axis=1)\n        ohe_test_all = pd.concat(\n            [ohe_test_all, pd.DataFrame(test_ohe, columns=colnames)], axis=1)\n    return ohe_train_all, ohe_test_all\n\ndef feature_prep_numeric(xtrain, xtest,  numerical_columns):\n    for col in numerical_columns:\n        scaler = RS = RobustScaler()\n        xtrain[col] = scaler.fit_transform(xtrain[col].values.reshape(-1, 1))\n        xtest[col] = scaler.transform(xtest[col].values.reshape(-1, 1))\n    return xtrain, xtest","dc46e056":"test = pd.read_csv(\"\/kaggle\/input\/ventilator-pressure-prediction\/test.csv\")\ndf = pd.read_csv(\"\/kaggle\/input\/ventilator-pressure-prediction\/train.csv\")\ndf['pressure_uin_diff'] = df['pressure'] - df['u_in']\n\ndisplay(df.head())\ndisplay(df.nica.categorical_describe())","98781589":"categoricals = [\"R\", \"C\", \"u_out\"]\ncontinuous = ['u_in', 'pressure', \"pressure_uin_diff\"]\ntimevar = 'time_step'","27dba1f7":"df.nica.mass_plot(\n    plt_set = categoricals,\n    columns = 3,\n    plottype = \"countplot\")","15629139":"df.nica.mass_plot(\n    plt_set = continuous,\n    columns = 3,\n    plottype = \"distplot\")\n\nprint(\"['u_in', 'pressure'] Correlation: {}\".format(df[['u_in', 'pressure']].corr().iloc[0,1]))","72f2911f":"for cont in continuous:\n    df.nica.pivot_plots(categoricals, cont, np.mean)","6ffe04cb":"breath_id_plotter(df, ['u_in','u_out','pressure'], 2)","23136ab2":"categoricals = ['R', 'C', 'u_out']\ngroup_canditates = []\ngroup_canditates.extend([[x] for x in categoricals])\nfor r in range(2, len(categoricals)):\n    tmp = [list(x) for x in list(itertools.combinations(categoricals, r))]\n    group_canditates.extend(tmp)\ngroup_canditates.append(categoricals)\n\nresults = {}\nfor catcol in group_canditates:\n    catcolname = \"-\".join(catcol)\n    df[f'{catcolname}_mean_pressure'] = df.groupby(catcol)['pressure'].transform('mean')\n    df[f'{catcolname}_mean_pressure_ae'] = np.abs(df[f'{catcolname}_mean_pressure'].values - df['pressure'].values)\n    error = df.groupby(catcol)[f'{catcolname}_mean_pressure_ae'].mean().round(2)\n    full_error = np.mean(df[f'{catcolname}_mean_pressure_ae'])\n    results[catcolname] = (full_error, error)","c329239b":"n_plots = len(results)\n\ncols = 3\nrows = math.ceil(n_plots \/ cols)\n\nfig, ax = plt.subplots(rows, cols, figsize = [cols*4,rows*4])\nfor key, ax in zip(results, ax.ravel()):\n    sns.heatmap(results[key][1].to_frame(), cmap='Greens_r', ax=ax)\n    ax.set_title(\"MAE Pressure for\\n{}\".format(key))\n    ax.set_xlabel(\"\")\n    \nplt.tight_layout(pad=0)\nplt.show()","dbee9434":"results_pd = pd.DataFrame(results).T\nresults_pd.columns = [\"score\", \"groupby_experiments\"]\nresults_pd['groupby_experiments'] = results_pd['groupby_experiments'].apply(lambda x: x.to_dict())\nresults_pd.sort_values(by='score', ascending=True, inplace=True)\ndisplay(results_pd)","69baf97a":"breath_id_plotter(df.query(\"C == 50 & u_out == 1\"), ['u_in','u_out','pressure', 'C-u_out_mean_pressure'], 1)","27ab015e":"breath_id_plotter(df, ['u_in','u_out','pressure', 'R-C-u_out_mean_pressure'], 1)","7c890747":"cat_features = ['u_out','R','C']\ncont_features = ['time_step', 'u_in']\n\ntrain_ohe, test_ohe = feature_prep_cate_ohe(df, test, cat_features)\ntrain_cont, test_cont = feature_prep_numeric(df[cont_features].copy(), test[cont_features].copy(), cont_features)","af465dd0":"train_X, _ = nicaviz.reduce_mem_usage(pd.concat([train_ohe, train_cont], axis = 1))\ntrain_y = df['pressure'].values\ntest_X, _ = nicaviz.reduce_mem_usage(pd.concat([test_ohe, test_cont], axis = 1))","c4e0280c":"train_X.head()","f6f86734":"with nicaviz.timer(\"Build Model\"):\n    ## Linear Regression\n    # Create linear regression object\n    model = linear_model.LinearRegression()\n    score = cross_val_score(model, train_X, train_y, cv=5, scoring='neg_mean_absolute_error')\n    print(\"CV Mean: {:.3f} MAE +\/- {:.5f}\".format(abs(score.mean()), score.std()))\n    \nwith nicaviz.timer(\"OOF Pred\"):\n    pred = cross_val_predict(model, train_X, train_y, cv=5)\n    df['linear_model_oof'] = pred\n    \n# Coeficients\nmodel_full = linear_model.LinearRegression()\nmodel_full.fit(train_X, train_y)\ntest_pred = model_full.predict(test_X)\ntest['linear_model_pred'] = test_pred\nprint(\"Linear Model Coefficients\")\n[print(\"{}: {}\".format(name, coef)) for name, coef in zip(train_X.columns, model_full.coef_)];","11774ea8":"breath_id_plotter(df, ['u_in','u_out','pressure', 'linear_model_oof'], 2)","7108e8af":"# Submission as u_in\nsubmission = test[['id','u_in']].rename(columns = {\"u_in\": \"pressure\"})\nsubmission.to_csv(\"u_in_submission.csv\", index=False)\n!head u_in_submission.csv","e5ab3a1b":"submission = test[['id','linear_model_pred']].rename(columns = {\"linear_model_pred\": \"pressure\"})\nsubmission.to_csv(\"linear_regression_submission.csv\", index=False)\n!head linear_regression_submission.csv","3a5e0804":"print(\"Notebook Runtime: %0.2f Minutes\"%((time.time() - notebookstart)\/60))","839bd15a":"# Ventilator Pressure EDA & Simple Heuristics\n_By Nick Brooks, September 2021_\n\n**Resources**\n- https:\/\/github.com\/nicapotato\/nicaviz\n- https:\/\/github.com\/nicapotato\/nicaviz\/blob\/master\/notebooks\/Plot_Examples.ipynb","9ec8dc74":"**Data Dictionary:** <br>\n- **id** - globally-unique time step identifier across an entire file\n- **breath_id** - globally-unique time step for breaths\n- **R** - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n- **C** - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n- **time_step** - the actual time stamp.\n- **u_in** - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n- **u_out** - the control input for the exploratory solenoid valve. Either 0 or 1.\n- **pressure** - the airway pressure measured in the respiratory circuit, measured in cmH2O.","c8b58eda":"## Simple Heuristics","25aac66c":"## Submissions"}}