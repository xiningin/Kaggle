{"cell_type":{"c969fe20":"code","9d38d7bc":"code","346086c3":"code","6a556089":"code","5a5f6fc8":"code","9e896a30":"code","7a359373":"code","a5c56865":"code","fb86619c":"code","12123bd7":"code","ef3691fe":"code","0fc2347a":"code","a7cbac3a":"code","b216c2e6":"code","b7bee0d0":"code","945f5f6d":"code","b2f1cb25":"code","eff3589f":"code","0bae5bf2":"markdown","c3988989":"markdown","99661941":"markdown","b927c1cf":"markdown","385cb87e":"markdown","729b8ce0":"markdown"},"source":{"c969fe20":"import json\nimport os\nimport zipfile\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\n\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import preprocess_input\n\nfrom keras.layers import Input, Flatten, Dense\nfrom keras.models import Model\nimport numpy as np","9d38d7bc":"# Define some parameters and constants\nFOLDER_PATH = \"..\/input\/dogs-vs-cats\/train\/train\/\"\nIMAGE_SIZE = (224, 224)\nEPOCHS = 5","346086c3":"# Create DataFrame to analyze dataset\nfilenames = os.listdir(FOLDER_PATH)\nlabels = []\nfor name in filenames:\n    label = name.split('.')[0]\n    if label == 'dog':\n        labels.append(1)\n    else:\n        labels.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'label': labels\n})\n\ndf.head()","6a556089":"# Detect class balance for dataset\ndf['label'].value_counts().plot.bar()","5a5f6fc8":"# See sample images\nsample_train = df.head(12)\nsample_train.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_train.iterrows():\n    filename = row['filename']\n    category = row['label']\n    img = load_img(FOLDER_PATH+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","9e896a30":"from keras.applications import VGG16\n# Load the VGG model with trained on ImageNet\nvgg_imagenet = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Freeze the layers except last 4 layers\nfor layer in vgg_imagenet.layers[:-4]:\n    layer.trainable = False\n\n# Show a summary of the model. Check the number of trainable parameters\nvgg_imagenet.summary()","7a359373":"from keras import models\nfrom keras import layers\nfrom keras import optimizers\n\n# Create new model (VGG ImageNet (CNN) + fully-connected layers)\nmodel = models.Sequential()\n \n# Add the VGG ImageNet model\nmodel.add(vgg_imagenet)\n \n# Add new FC layers\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(2, activation='softmax'))\n \n# Show a summary of the model. Check the number of trainable parameters\nmodel.summary()","a5c56865":"# Split dataset to validation and train\ndf['label'] = df['label'].replace({0:'cat', 1:'dog'})\n\ntrain_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","fb86619c":"# Check train dataset\ntrain_df.shape","12123bd7":"# Check validation dataset\nvalidate_df.shape","ef3691fe":"train_datagen = ImageDataGenerator(\n      rescale=1.\/255,\n      rotation_range=20,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n \nvalidate_datagen = ImageDataGenerator(rescale=1.\/255)\n \n# Define the batchsize for train and validation datasets\ntrain_batchsize = 50\nvalidate_batchsize = 50\n\n\n# Create data generators\ntrain_generator = train_datagen.flow_from_dataframe(train_df, \n                                                    FOLDER_PATH, \n                                                    x_col = 'filename', \n                                                    y_col = 'label', \n                                                    batch_size=train_batchsize, \n                                                    class_mode='categorical', \n                                                    target_size=IMAGE_SIZE)\n\nvalidate_generator = validate_datagen.flow_from_dataframe(validate_df, \n                                                          FOLDER_PATH, \n                                                          x_col = 'filename', \n                                                          y_col = 'label', \n                                                          batch_size=validate_batchsize, \n                                                          class_mode='categorical', \n                                                          target_size=IMAGE_SIZE)","0fc2347a":"# Compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizers.RMSprop(lr=1e-4),\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit_generator(\n      train_generator,\n      steps_per_epoch=train_generator.samples\/train_generator.batch_size,\n      epochs=EPOCHS,\n      validation_data=validate_generator,\n      validation_steps=validate_generator.samples\/validate_generator.batch_size,\n      verbose=1)","a7cbac3a":"model.save_weights(\"vgg16_weights.h5\")","b216c2e6":"model.save('vgg16.h5')","b7bee0d0":"model_json = model.to_json()\nwith open(\"vgg16.json\", \"w\") as json_file:\n    json.dump(model_json, json_file)","945f5f6d":"# Let us see the loss and accuracy curves\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n \nepochs = range(len(acc))\n \nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n \nplt.figure()\n \nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n \nplt.show()","b2f1cb25":"submission = pd.read_csv(\"..\/input\/dogs-vs-cats\/sampleSubmission.csv\")\n\nprint(submission[\"label\"][0])\npd.options.mode.chained_assignment = None  # default='warn'\n\nfor e,i in enumerate(os.listdir(\"..\/input\/dogs-vs-cats\/test1\/test1\")):\n    print(i)\n    output=[]\n    img = image.load_img(os.path.join(\"..\/input\/dogs-vs-cats\/test1\/test1\",i), target_size=IMAGE_SIZE)\n    img = np.asarray(img)\n    img = np.expand_dims(img, axis=0)\n    output = model.predict(img)\n    if output[0][0] > output[0][1]:\n#         print(\"cat\")\n        submission[\"id\"][e]=i\n        submission[\"label\"][e]=\"cat\"\n    else:\n#         print('dog')\n        submission[\"id\"][e]=i\n        submission[\"label\"][e]=\"dog\"","eff3589f":"submission.to_csv(\"my_submission.csv\", index = False)","0bae5bf2":"## *Train model*","c3988989":"## *Exploratory Data Analysis*","99661941":"## *Submission* ","b927c1cf":"## *Build classifier model (VGG + TL from ImageNet)*","385cb87e":"## *Import libraries*","729b8ce0":"## *Create data generators*"}}