{"cell_type":{"c657293e":"code","57212f16":"code","df9e424c":"code","628fe792":"code","0659d09d":"code","f466a37a":"code","c35a4521":"code","6bd532be":"code","81939a85":"code","d02fe162":"code","5a0ad753":"code","08ca908f":"code","7a8dabd6":"code","dcb964dd":"code","d52698f5":"code","d4102247":"code","e6aa4e18":"code","f0556d4a":"code","9823b0bc":"code","cc2e07d0":"code","e5f25216":"code","ba436ed9":"code","8335ae90":"code","fbc7cc28":"code","e0569fd5":"code","075dad92":"markdown","cf6a525b":"markdown","54fa5894":"markdown","d684ea88":"markdown","e44aab02":"markdown","a02037ac":"markdown","88dd32ee":"markdown","d5db83be":"markdown","b79f6b30":"markdown","3dc6cb55":"markdown","33db43f4":"markdown","c67a22ec":"markdown","b01ed3fe":"markdown","a30545a9":"markdown","1184a62f":"markdown","5a4482e4":"markdown","09f2f55a":"markdown","f9da99ec":"markdown","c1d6f46d":"markdown","98543de7":"markdown","55fd6d76":"markdown","c15787f5":"markdown","a7f193a4":"markdown","02ba2825":"markdown","da5bc9c2":"markdown","aa39ff0a":"markdown","57585283":"markdown","1f0a9bed":"markdown"},"source":{"c657293e":"# Import torch and other required modules\nimport torch","57212f16":"project_name='01-pytorch basics-5 important functions'","df9e424c":"# Example 1 - working (change this)\ntens1=torch.tensor([[1, 2, 3], [4, 5, 6],[7, 8, 9]])","628fe792":"print(tens1)","0659d09d":"# Example 2 - working\ntens2=torch.tensor([[1, 0], [0, 1]])\nprint(tens2)","f466a37a":"# Example 3 - breaking (to illustrate when it breaks)\ntens3=torch.tensor([[1, 2], [3, 4, 5]])\nprint(tens3)","c35a4521":"# Example 1 - working\ntens1=torch.tensor([[1, 2, 3], [4, 5, 6],[7, 8, 9]])\ntens1.size()","6bd532be":"# Example 2 - working\ntorch.tensor([[1, 0, 0], [0, 1, 0]]).size()","81939a85":"# Example 3 - breaking (to illustrate when it breaks)\ntens3=torch.tensor([[1, 0, 0],[0, 1, 0],[0, 0, 1]])\ntens3.size()","d02fe162":"tens3.size(2)","5a0ad753":"# Example 1 - working\ntens1=torch.zeros(3, 3)\nprint(tens1)","08ca908f":"tens1.fill_diagonal_(1)","7a8dabd6":"# Example 2 - working\ntorch.tensor([[1, 2, 3],[4, 5, 6],[7, 8, 9]])","dcb964dd":"torch.tensor([[1, 2, 3],[4, 5, 6],[7, 8, 9]]).fill_diagonal_(0)","d52698f5":"# Example 3 - breaking (to illustrate when it breaks)\ntens2=torch.tensor([[[1, 2, 3, 4]],[[5, 6, 7, 8]]])\nprint(tens2)\ntens2.size()","d4102247":"tens2.fill_diagonal_(10)","e6aa4e18":"# Example 1 - working\ntens1=torch.tensor([1.7])\nprint(tens1)\ntens1.item()","f0556d4a":"# Example 2 - working\ntorch.tensor([2]).item()","9823b0bc":"# Example 3 - breaking (to illustrate when it breaks)\ntens2=torch.tensor([[1, 2, 3],[4, 5, 6]])\nprint(tens2)\ntens2.item()","cc2e07d0":"# Example 1 - working\ntens1=torch.tensor([[1.1, 1.2, 1.3],[1.4, 1.5, 1.6]])\nprint(tens1)\ntorch.chunk(tens1,2,1)","e5f25216":"# Example 2 - working\na,b,c=torch.chunk(torch.tensor([1, 2, 3, 4, 5, 6]),3,0)\na,b,c","ba436ed9":"# Example 3 - breaking (to illustrate when it breaks)\ntens2=torch.tensor([1, 2, 3, 4, 5, 6])\ntorch.chunk(tens2,3,1)","8335ae90":"! pip install jovian --upgrade --quiet","fbc7cc28":"import jovian","e0569fd5":"jovian.commit(project=project_name)","075dad92":"## Function 5 - torch.chunk()\n\nThis function can be used to divide a tensor into specified equal parts.","cf6a525b":"# Assignment-I Five Interesting Pytorch Functions\n\n### By Shagun Sharma\n\nAn short introduction about PyTorch and about the chosen functions. \n- function 1: torch.tensor()\n- function 2: torch.Tensor.size()\n- function 3: torch.Tensor.fill_diagonal_()\n- function 4: torch.Tensor.item()\n- function 5: torch.chunk()","54fa5894":"Function1 creates a 3X3 pytorch tensor stored in variable 'tens1' whose values are diaplayed in the above cell.","d684ea88":"Function 2 displays the size of the pytorch tensor stored in the variable 'tens1'.","e44aab02":"Function can be directly applied on the tensor or by using a variable as in previous example.","a02037ac":"This function can be used where we need to know the dimensions of the tensors in use for example: Multiplication of two Tensors.","88dd32ee":"This function can be used wherever a division of the tensor is to be made in the program.","d5db83be":"Function is directly called over a tensor containing a single value 2.","b79f6b30":"## Function 3 - torch.Tensor.fill_diagonal_()\n\nThis function is used to fill the diagonals of the the tensor with a particular value.","3dc6cb55":"## Conclusion\n\nWe discussed 5 different pytorch functions in this notebook which are seemingly relevant in many programming tasks that require some modification of the tensors since all the data in pytorch is computed using tensors. Hence these functions are few of the many functions that could be used to brush our hands up on pytorch","33db43f4":"## Function 4 - torch.Tensor.item()\n\nWe can use this function to get a number from a tensor containing a single value.","c67a22ec":"The function divides the tensor into 2 chunks based on the dimension specified(i.e. 1 here).","b01ed3fe":"## Function 1 - torch.tensor ()\n\nPytorch uses Tensors, which are Multi-dimensional matrices of a particular datatype. This function creates a pytorch tensor.","a30545a9":"This function fills in the value specified as its argument(i.e. 1) as the diagonal value of the tensor(tens1).","1184a62f":"Function 2 displays the dimensions of the tensor.","5a4482e4":"Closing comments about when to use this function","09f2f55a":"## Function 2 - torch.Tensor.size()\n\nThis function displays the size(dimensions) of the pytorch tensor.","f9da99ec":"The function breaks when an element is added to the tensor that does not satisfy the dimensions of the tensor\/matrix.","c1d6f46d":"Function 1 creates a 2X2 identity pytorch tensor stored in variable tens2","98543de7":"Function fails when the tensor is not a single valued tensor.","55fd6d76":"The matrix dimension does not satisfy the condition of the diagonal matrix to be imposed with a value.","c15787f5":"## Reference Links\nProvide links to your references and other interesting articles about tensors\n* Official documentation for `torch.Tensor`: https:\/\/pytorch.org\/docs\/stable\/tensors.html\n* ...","a7f193a4":"Function can be generally used to instantiate a single value wherever necessary.","02ba2825":"Function divides the tensor into specified chunks and also assigns the values into variables.","da5bc9c2":"This function can be used at any relevant place where a particular diagonal value is to be imposed in the tensor. Such applications might use the concept of upper and lower triangle matrices where this function proves to be helpful in visually segregating the same.","aa39ff0a":"Function breaks wherever the dimension of the tensor is specified incorrectly as the argument.","57585283":"Function is called on a tensor containing single value and stored in the variable tens1.","1f0a9bed":"The function breaks when the argument of the torch.Tensor.size() is not in accordance with the domain."}}