{"cell_type":{"1d998bcd":"code","55c56f21":"code","eaca0a97":"code","8358e354":"code","cc700010":"code","22cb2d03":"code","73eba7a9":"code","626d5868":"code","28bad7cb":"code","88c2a917":"code","af93876c":"code","b0f1a736":"code","80556486":"code","33c16423":"code","085335a1":"code","98cb1aee":"code","75bbbbf8":"code","72faf110":"code","375d79b9":"code","f916c600":"code","900d41d7":"code","0e08875a":"code","272b0b04":"code","fec6aef1":"code","16304336":"code","76f91c88":"code","8fc46fa5":"code","1e87ba5d":"code","ced8741d":"code","420f281e":"code","bf67601e":"code","ae728c78":"code","e9e22896":"code","9c36cb01":"code","4e20f34d":"code","68a45303":"code","16fe45fd":"code","a72dc156":"code","a59fc967":"code","079d755f":"code","37dd7d52":"markdown","ac63a965":"markdown","ac0f9633":"markdown","b89fed3b":"markdown","4fccad87":"markdown","e60ec7ea":"markdown","c4e43d14":"markdown","070f0efa":"markdown","99a22ef3":"markdown","41f1b1a9":"markdown","2b30777a":"markdown","b68b69c5":"markdown","c744197f":"markdown","cc8e2daa":"markdown","ac3ec316":"markdown"},"source":{"1d998bcd":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# ML tools\nimport h2o\nfrom h2o.estimators import H2OGradientBoostingEstimator","55c56f21":"# import data\ndf_train = pd.read_csv('..\/input\/DATACUP-ROUND1\/XENIA_DATACUP_R1_TRAIN.CSV')\ndf_test = pd.read_csv('..\/input\/DATACUP-ROUND1\/XENIA_DATACUP_R1_X_TEST.csv')\ndf_sub = pd.read_csv('..\/input\/DATACUP-ROUND1\/sample_submission.csv')","eaca0a97":"df_train.head()","8358e354":"df_train.info()","cc700010":"df_test.info()","22cb2d03":"df_train.card_owned.value_counts()","73eba7a9":"df_test.card_owned.value_counts()","626d5868":"df_train.ROI.describe()","28bad7cb":"df_test.ROI.describe()","88c2a917":"# basic stats\ntarget = 'y'\nprint(df_train[target].value_counts())\ndf_train[target].value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","af93876c":"features_num = ['age','balance','day',\n                'duration','campaign',\n                'pdays','previous'] # not using ROI","b0f1a736":"df_train[features_num].describe()","80556486":"# compare with test set\ndf_test[features_num].describe()","33c16423":"# plot distribution of numerical features\nfor f in features_num:\n    plt.figure(figsize=(8,4))\n    df_train[f].plot(kind='hist', bins=30)\n    plt.title(f)\n    plt.grid()\n    plt.show()","085335a1":"corr_pearson = df_train[features_num].corr(method='pearson')\ncorr_spearman = df_train[features_num].corr(method='spearman')\n\nfig = plt.figure(figsize = (9,7))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (9,7))\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","98cb1aee":"features_cat = ['schooling','marriage status','position',\n                'housing','default','loan',\n                'contact','month','poutcome'] # 'card_owned' not used!","75bbbbf8":"# plot distribution of categorical features\nfor f in features_cat:\n    plt.figure(figsize=(14,4))\n    df_train[f].value_counts().plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","72faf110":"# select predictors\npredictors = features_num + features_cat\nprint('Number of predictors: ', len(predictors))\nprint(predictors)","375d79b9":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","f916c600":"# upload data frame in H2O environment\ntrain_hex = h2o.H2OFrame(df_train)\ntest_hex = h2o.H2OFrame(df_test)\n\n# force categorical target\ntrain_hex[target] = train_hex[target].asfactor()","900d41d7":"# define Gradient Boosting model\nn_cv = 5\n\nfit_1 = H2OGradientBoostingEstimator(ntrees = 100,\n                                     max_depth=6,\n                                     min_rows=50,\n                                     learn_rate=0.1, # default: 0.1\n                                     sample_rate=1,\n                                     col_sample_rate=0.7,\n                                     nfolds=n_cv,\n                                     score_each_iteration=True,\n                                     stopping_metric='auc',\n                                     stopping_rounds=5,\n                                     stopping_tolerance=0.0001, # default 0.001\n                                     seed=999)\n\n# and train model\nt1 = time.time()\nfit_1.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","0e08875a":"# show cross validation metrics\nfit_1.cross_validation_metrics_summary()","272b0b04":"# show scoring history - training vs cross validations\nfor i in range(n_cv):\n    cv_model_temp = fit_1.cross_validation_models()[i]\n    df_cv_score_history = cv_model_temp.score_history()\n    my_title = 'CV ' + str(1+i) + ' - Scoring History [AUC]'\n    plt.scatter(df_cv_score_history.number_of_trees,\n                y=df_cv_score_history.training_auc, \n                c='blue', label='training')\n    plt.scatter(df_cv_score_history.number_of_trees,\n                y=df_cv_score_history.validation_auc, \n                c='darkorange', label='validation')\n    plt.title(my_title)\n    plt.xlabel('Number of Trees')\n    plt.ylabel('AUC')\n    plt.ylim(0.5,1)\n    plt.legend()\n    plt.grid()\n    plt.show()","fec6aef1":"# basic version\nfit_1.varimp_plot(-1)","16304336":"# variable importance using shap values => see direction as well as severity of feature impact\nt1 = time.time()\nfit_1.shap_summary_plot(train_hex);\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","76f91c88":"# training performance - AUC\nperf_train = fit_1.model_performance(train=True)\nperf_train.plot()","8fc46fa5":"# cross validation performance - AUC\nperf_cv = fit_1.model_performance(xval=True)\nperf_cv.plot()","1e87ba5d":"# confusion matrix with manual threshold - here we try to achieve a symmetric outcome\ntt = 0.334\nconf_train_man = fit_1.confusion_matrix(train=True, thresholds=tt)\nconf_train_man.show()","ced8741d":"# confusion matrix on cross validation\nconf_cv_man = fit_1.confusion_matrix(xval=True, thresholds=tt)\nconf_cv_man.show()","420f281e":"# predict on training data\npred_train = fit_1.predict(train_hex).as_data_frame()\npred_train_p = pred_train.yes","bf67601e":"# binary classification using manual threshold\npred_train['pred_manual_t'] = np.where(pred_train_p >= tt, 'yes', 'no')","ae728c78":"# check frequencies (of predictions)\npred_train.pred_manual_t.value_counts()","e9e22896":"# compare with ground truth\ndf_train.y.value_counts()","9c36cb01":"# confusion matrix on training data\npd.crosstab(pred_train.pred_manual_t, df_train.y)","4e20f34d":"# predict on test set\npred_test = fit_1.predict(test_hex).as_data_frame()\npred_test_p = pred_test.yes","68a45303":"# plot test set predictions (probabilities)\nplt.figure(figsize=(7,5))\nplt.hist(pred_test_p, bins=100)\nplt.title('Predictions on Test Set')\nplt.grid()\nplt.show()","16fe45fd":"# binary classification using manual threshold\npred_test['pred_manual_t'] = np.where(pred_test_p >= tt, 'yes', 'no')","a72dc156":"# check frequencies\npred_test.pred_manual_t.value_counts()","a59fc967":"# submission\ndf_sub.y = pred_test.pred_manual_t\ndf_sub.to_csv('submission_GBM.csv', index=False)","079d755f":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='duration');","37dd7d52":"### Numerical Features","ac63a965":"<a id='1'><\/a>\n# Data Cleaning","ac0f9633":"<a id='2'><\/a>\n# Target","b89fed3b":"# Table of Contents\n\n* [Data Cleaning](#1)\n* [Target](#2)\n* [Features](#3)\n* [Fit Model](#4)\n* [Partial Dependence Plots](#6)","4fccad87":"#### Same for ROI","e60ec7ea":"### Test Set much smaller than training set! No missing values in test set.","c4e43d14":"<a id='3'><\/a>\n# Features","070f0efa":"#### => We won't use it.","99a22ef3":"<a id='6'><\/a>\n# Partial Dependence Plots","41f1b1a9":"### Categorical Features","2b30777a":"#### card_owned is just dummies on the test set:","b68b69c5":"### Apply model on test set","c744197f":"#### => We won't use ROI either.","cc8e2daa":"#### Correlations","ac3ec316":"<a id='4'><\/a>\n# Fit Model"}}