{"cell_type":{"315dd814":"code","59028fa3":"code","06d8143d":"code","7d9a66eb":"code","a0418f67":"code","89e1e418":"code","6cb78601":"code","f2c5b94c":"code","b4219941":"code","b09c46f0":"code","a9a23d48":"code","68a82b06":"code","d22ceb1c":"code","ba878cc3":"code","d8dde577":"code","df1a3240":"code","62be5941":"code","65f89f9f":"code","01707677":"code","821d4548":"code","14530e8f":"markdown","260b91d0":"markdown","acb400b4":"markdown","8cbfb5f8":"markdown","227cac8e":"markdown","962cdb49":"markdown","d86bc67c":"markdown","197e6778":"markdown"},"source":{"315dd814":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport missingno as msno\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59028fa3":"df = pd.read_csv(os.path.join(dirname, filename))\ndf.head(10)","06d8143d":"df.info()","7d9a66eb":"df.describe().T","a0418f67":"msno.bar(df)","89e1e418":"def wind_encode(col):\n    if col == 'N':\n        return 1\n    elif col == 'S':\n        return 2\n    elif col == 'E':\n        return 3\n    elif col == 'W':\n        return 4\n    elif col == 'NE':\n        return 5\n    elif col == 'NW':\n        return 6\n    elif col == 'SE':\n        return 7\n    elif col == 'SW':\n        return 8\n    elif col == 'NNW':\n        return 9\n    elif col == 'NNE':\n        return 10\n    elif col == 'SSW':\n        return 11\n    elif col == 'SSE':\n        return 12\n    elif col == 'ESE':\n        return 13\n    elif col == 'ENE':\n        return 14\n    elif col == 'WSW':\n        return 15\n    elif col == 'WNW':\n        return 16","6cb78601":"df['WindGustDir'] = df['WindGustDir'].apply(wind_encode)\ndf['WindDir9am'] = df['WindDir9am'].apply(wind_encode)\ndf['WindDir3pm'] = df['WindDir3pm'].apply(wind_encode)","f2c5b94c":"df['RainTodayYes'] = pd.get_dummies(df['RainToday'],drop_first=True)\ndf['RainTomorrowYes'] = pd.get_dummies(df['RainTomorrow'],drop_first=True)","b4219941":"df","b09c46f0":"rain_df = df.drop(['Evaporation','Sunshine','Cloud3pm','Cloud9am','Date','Location','RainToday','RainTomorrow'],axis = 1)","a9a23d48":"rain_df[~((rain_df['WindGustDir'] >= 1.0) & (rain_df['WindGustDir'] <=16.0))]","68a82b06":"rain_df = rain_df.fillna(round(rain_df.mean()))","d22ceb1c":"X = rain_df.drop(['RainTomorrowYes'],axis = 1)\ny = rain_df['RainTomorrowYes']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=101)","ba878cc3":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nlogspred = logreg.predict(X_test)\n","d8dde577":"print(confusion_matrix(logspred,y_test))\nprint(classification_report(logspred,y_test))\nprint(logreg.score(X_test,y_test))","df1a3240":"rtree = RandomForestClassifier(n_estimators=100)\nrtree.fit(X_train,y_train)\nprediction = rtree.predict(X_test)","62be5941":"print(confusion_matrix(prediction,y_test))\nprint(classification_report(prediction,y_test))\nprint(rtree.score(X_train,y_train))","65f89f9f":"knn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)\nknn_predict = knn.predict(X_test)","01707677":"print(confusion_matrix(knn_predict,y_test))\nprint(classification_report(knn_predict,y_test))","821d4548":"print(knn.score(X_test,y_test))","14530e8f":"# Loading all necessary modules","260b91d0":"# Filter out Nan value rows for WindGustDir column","acb400b4":"# KNeighbors Classifier","8cbfb5f8":"# Logistic Regression","227cac8e":"# Random Forest Classifier","962cdb49":"# Number of missing\/Nan values in each column","d86bc67c":"# Converting the direction into a float value","197e6778":"# Fill the missing value with the mean of value in respective column"}}