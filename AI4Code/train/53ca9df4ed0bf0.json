{"cell_type":{"ec373050":"code","8fbe637e":"code","b94bb125":"code","c3691569":"code","bb6b2c49":"code","472d6411":"code","5507e5c2":"code","51130483":"code","12bf320c":"code","dcc3ddc3":"code","16f72c2a":"code","25b88e16":"code","c17a7187":"code","dd004053":"code","6b89054b":"code","36f4464e":"code","b3f314fc":"code","d2bebd85":"code","8b868723":"code","e154df67":"code","2dc4247d":"code","33ae8532":"code","0f3a5988":"code","8d3d2e62":"code","0cb3a328":"code","564b5240":"code","6a4d6966":"code","e62f43a5":"code","560778a9":"code","7db333a6":"code","8651b4ba":"code","be5e6409":"code","d0ede6d7":"markdown","90b3be1d":"markdown","5c9cfeba":"markdown","bd2ac0f2":"markdown","15a5b558":"markdown","84af4907":"markdown","7bf48fd5":"markdown","5ce6a58e":"markdown","37cbb893":"markdown","daf482d7":"markdown","9e2a219f":"markdown","100013f6":"markdown","669dd765":"markdown"},"source":{"ec373050":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\nfrom scipy.interpolate import Rbf, interp2d\nimport datetime\n\n# For import data\nimport os\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","8fbe637e":"indicator_name = 'PM2.5' # 'PM2.5' or 'PM10'","b94bb125":"#datetime_analysis = '2021-11-16 10:00:00'\n#datetime_analysis = '2021-11-12 18:00:00'\ndatetime_analysis = '2021-10-12 05:00:00'  # maximum value","c3691569":"# Import files with data from Kaggle dataset\ndataset_files = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        dataset_files.append(os.path.join(dirname, filename))\ndataset_files","bb6b2c49":"len(dataset_files)","472d6411":"# Data from SaveEcoBot\nstations_about = pd.read_csv('..\/input\/air-quality-monitoring\/Vinnytsia_region_about_stations_2021.csv', header=0, sep=';')\nstations_about","5507e5c2":"def get_data_for_indicator_of_station_from_saveeconot(stations_about, indicator_name, num):\n    # Get data for given indicator_name for station in num-th row in the dataframe saveecobot files\n    # with parameters about stations from the dataframe stations_about\n    \n    # Transform indicator to SaveEcoBot variants\n    if indicator_name=='PM2.5':\n        indicator_name = 'pm25'\n    elif indicator_name=='PM10':\n        indicator_name = 'pm10'\n    \n    id_station = int(stations_about.loc[num,'id'])\n    df = pd.read_csv(f\"..\/input\/air-quality-monitoring\/data_saveecobot_{id_station}.csv\")\n    df = df[df['indicator_code']==indicator_name]\n    df['ds'] = pd.to_datetime(df['datetime'], format='%Y-%m-%d %H:%M:%S', errors='ignore')\n    df = df[['ds', 'value']]\n    df.index = df['ds']\n    df = df.drop(columns=['ds'])\n    df = df.resample('H').mean()\n    df = df.reset_index(drop=False)\n    df = df.dropna().reset_index(drop=True)\n    df['network'] = str(stations_about.loc[num,'network'])\n    df['id_station_saveecobot'] = id_station\n    df['id_station_ecocity'] = np.nan\n    df['lat'] = float(stations_about.loc[num,'lat'])\n    df['lng'] = float(stations_about.loc[num,'lng'])\n    print(f\"Number of data for {num}th station #{id_station} is {len(df)}\")\n    #display(df)\n    return df","51130483":"%%time\ndf = pd.DataFrame()\nfor i in range(len(stations_about)):\n    df_i = get_data_for_indicator_of_station_from_saveeconot(stations_about, indicator_name, i)\n    if len(df) > 0:\n        df = pd.concat([df, df_i], ignore_index=True)\n    else: df = df_i\n\ndf","12bf320c":"# Data from SaveEcoBot\necocity_stations_about = pd.read_csv('..\/input\/air-quality-monitoring-from-ecocity\/ecocity_about_stations_2021.csv', header=0, sep=';')\necocity_stations_about","dcc3ddc3":"ecocity_stations_about_region = ecocity_stations_about[ecocity_stations_about['locality']=='Vinnytsia region'].reset_index(drop=True)\necocity_stations_about_region['id_saveecobot'] = ecocity_stations_about_region['id_saveecobot'].astype('int')\necocity_stations_about_region","16f72c2a":"def get_data_for_indicator_of_station_from_ecocity(stations_about, indicator_name, num):\n    # Get data for given indicator_name for station in num-th row in the dataframe saveecobot files\n    # with parameters about stations from the dataframe stations_about\n    \n    id_station_saveecobot = int(stations_about.loc[num,'id_saveecobot'])\n    id_station_ecocity = int(stations_about.loc[num,'id_ecocity'])\n    \n    # Find file name\n    for i in range(len(dataset_files)):\n        if dataset_files[i].find(str(id_station_ecocity))>0:\n            file_name = dataset_files[i]\n    \n    df = pd.read_csv(file_name)\n    #display(df)\n    df = df[df['indicator_name']==indicator_name]\n    df['ds'] = pd.to_datetime(df['datetime'], format='%Y-%m-%d %H:%M:%S', errors='ignore')\n    df = df[['ds', 'value']]\n    df.index = df['ds']\n    df = df.drop(columns=['ds'])\n    df = df.resample('H').mean()\n    df = df.reset_index(drop=False)\n    df = df.dropna().reset_index(drop=True)\n    df['network'] = str(stations_about.loc[num,'network'])\n    df['id_station_saveecobot'] = id_station_saveecobot\n    df['id_station_ecocity'] = id_station_ecocity\n    df['lat'] = float(stations_about.loc[num,'lat'])\n    df['lng'] = float(stations_about.loc[num,'lng'])\n    print(f\"Number of data for {num}th station #{id_station_saveecobot} in SaveEcoBot and #{id_station_ecocity} in EcoCity is {len(df)}\")\n    #display(df)\n    return df","25b88e16":"%%time\ndf2 = pd.DataFrame()\nfor i in range(len(ecocity_stations_about_region)):\n    df_i = get_data_for_indicator_of_station_from_ecocity(ecocity_stations_about_region, indicator_name, i)\n    if len(df2) > 0:\n        df2 = pd.concat([df2, df_i], ignore_index=True)\n    else: df2 = df_i\ndf2","c17a7187":"# Drop data on stations of the EcoCity network from SaveEcoBot \n# with datetime which equal datetime of data from EcoCity\nlen_before = len(df)\nfor id_station in df2['id_station_saveecobot'].unique().tolist():\n    ds_list = df2[df2['id_station_saveecobot']==id_station]['ds'].tolist()\n    df = df.drop(df[(df.id_station_saveecobot == id_station) & (df.ds.isin(ds_list))].index)\nlen_after = len(df)\nprint(f\"Number of data before the dropping duplicates - {len_before}, after - {len_after}\")","dd004053":"df = pd.concat([df, df2], ignore_index=True)\ndf","6b89054b":"# Selection data for interpolation\ndata = df[df['ds']==datetime.datetime.fromisoformat(datetime_analysis)].reset_index(drop=True)\nx = data.lng.values\ny = data.lat.values\nz = data.value.values\nfig = plt.figure()\nplt.scatter(x, y)\nplt.title(f'Stations in Vinnytsia region with data for {indicator_name} in {datetime_analysis}')\ndisplay(data)\nplt.show()","36f4464e":"# Selection stations for Vinnytsia region only\nstations_about_region_list = stations_about[stations_about['locality']=='Vinnytsia region']['id'].tolist() + \\\n                             ecocity_stations_about_region['id_saveecobot'].astype('int').tolist()\nprint(f\"Stations in Vinnytsia region only from SaveEcoBot: {stations_about_region_list}\")","b3f314fc":"df_vin_reg = df[df['id_station_saveecobot'].isin(stations_about_region_list)].reset_index(drop=True)\ndf_vin_reg.to_csv(f'df_vin_reg_{indicator_name}_{datetime_analysis}.csv', index=False)\ndf_vin_reg","d2bebd85":"df_vin_reg[['value']].describe()","8b868723":"df_vin_reg['value'].hist(bins=50)","e154df67":"# Danger level\nif indicator_name == 'PM2.5':\n    danger_level = 55\nelif indicator_name == 'PM10':\n    danger_level = 254\ndf_vin_reg[df_vin_reg['value'] >= danger_level]['value'].hist(bins=50)","2dc4247d":"# Very danger level\nif indicator_name == 'PM2.5':\n    very_danger_level = 150\nelif indicator_name == 'PM10':\n    very_danger_level = 354\ndf_vin_reg[df_vin_reg['value'] >= very_danger_level]['value'].hist(bins=50)","33ae8532":"# Very danger level\npd.set_option('max_rows',200)\ndf_vin_reg[df_vin_reg['value'] >= very_danger_level]","0f3a5988":"# Very danger level\nvery_danger_station = df_vin_reg[df_vin_reg['value'] >= very_danger_level]['id_station_saveecobot'].unique()\ndf_vin_reg[df_vin_reg['value'] >= very_danger_level]['id_station_saveecobot'].value_counts()","8d3d2e62":"def get_stations_list_from_df(stations_list, df, col):\n    if len(set(stations_list).intersection(set(df[col].tolist()))) > 0:\n        display(df[df[col].isin(stations_list)])","0cb3a328":"# Information about stations with very danger data\nget_stations_list_from_df(very_danger_station, ecocity_stations_about_region, 'id_saveecobot')\nget_stations_list_from_df(very_danger_station, stations_about, 'id')","564b5240":"pd.reset_option('all')","6a4d6966":"# Maximum value\nprint(f\"The maximum value is:\")\ndisplay(df_vin_reg.iloc[df_vin_reg['value'].argmax(),:])","e62f43a5":"# Data interpolation\nf = interp2d(x, y, z, kind='linear')  # \u2018linear\u2019, \u2018cubic\u2019, \u2018quintic\u2019\nf","560778a9":"# Calculation of values for a regular network of points\nX = np.linspace(data.lng.min()*0.995, data.lng.max()*1.005, 100)\nY = np.linspace(data.lat.min()*0.995, data.lat.max()*1.005, 100)\nZ = f(X, Y)\nZ[0]","7db333a6":"data","8651b4ba":"# Coordinates of stations - from EcoCity or no\nxseb = data[data['network']!=\"Eco-City\"]['lng'].values\nyseb = data[data['network']!=\"Eco-City\"]['lat'].values\nnumseb = data[data['network']!=\"Eco-City\"]['id_station_saveecobot'].astype('str').values\nxeco = data[data['network']==\"Eco-City\"]['lng'].values\nyeco = data[data['network']==\"Eco-City\"]['lat'].values\nnumeco = data[data['network']==\"Eco-City\"]['id_station_saveecobot'].astype('str').values","be5e6409":"# Visualization\nfig = plt.figure(figsize=(12,10))\nplt.contourf(X, Y, Z)\n\nplt.scatter(xseb, yseb, c='gray', s=100, label='SaveEcoBot')\nfor i in range(len(xseb)):\n    plt.annotate(\"  \"+numseb[i], xy=(xseb[i], yseb[i]), textcoords='data')\n    \nplt.scatter(xeco, yeco, c='k', s=100, label='EcoCity')\nfor i in range(len(xeco)):\n    #plt.annotate('(%s)' % xy, xy=xy, textcoords='data')\n    plt.annotate(\"  \"+numeco[i], xy=(xeco[i], yeco[i]), textcoords='data')\n    \nplt.axis()\nplt.title(f'Stations in Vinnytsia region with hourly average data for {indicator_name} in {datetime_analysis} (maximum value = {round(data.value.max(),2)})')\nplt.colorbar()\nplt.legend(loc='best')\nplt.grid()\nplt.show()","d0ede6d7":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","90b3be1d":"### 2.3 Selection data for interpolation<a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","5c9cfeba":"## Acknowledgements\n\n### Notebooks:\n* [Air Quality in City - 2D Analysis](https:\/\/www.kaggle.com\/vbmokin\/air-quality-in-city-2d-analysis)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [COVID in UA: Prophet with 4, Nd seasonality](https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality)","bd2ac0f2":"<a class=\"anchor\" id=\"0\"><\/a>\n# Air Quality Region - 2D Analysis - for Vinnytsia region (oblast)","15a5b558":"## 5. Result visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","84af4907":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","7bf48fd5":"# Datasets:\n* [Air Quality Monitoring from EcoCity](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring-from-ecocity)\n* [Air Quality Monitoring](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring)","5ce6a58e":"## 3. EDA for Vinnytsia region<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","37cbb893":"### 2.2 Download data from EcoCity<a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","daf482d7":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","9e2a219f":"## 4. Data interpolation<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","100013f6":"### 2.1 Download data from SaveEcoBot<a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","669dd765":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n   - [Download data from SaveEcoBot](#2.1)\n   - [Download data from EcoCity](#2.2)\n   - [Selection data for interpolation](#2.3)\n1. [EDA for Vinnytsia region](#3)\n1. [Data interpolation](#4)\n1. [Result visualization](#5)"}}