{"cell_type":{"7e049c36":"code","45af7277":"code","3c2f388c":"code","d877cc2b":"code","2bf998ab":"code","40b32912":"code","39a86544":"code","f762b8ef":"code","9fdc775b":"code","242cd5a2":"code","653789e8":"code","231fc366":"code","7e576b1d":"code","fa80798a":"code","e0957abb":"code","212cc513":"code","672b3909":"code","a03df932":"code","fc3a93a2":"code","821f217c":"code","04f2242b":"code","482972db":"code","6773c74b":"code","3a8e7b2e":"code","54e61a2f":"code","90a3be9d":"code","a77dda79":"code","c5575d46":"code","b4334f3e":"code","5848b3e1":"code","85166982":"code","ae98d204":"code","3ec5503e":"code","c3cd98b9":"code","532ff53c":"code","09720705":"code","35e84ad6":"code","ad3787dc":"code","5b7e9f72":"code","8f2fbc2a":"code","5ba3ec72":"code","d3a9b977":"code","d61f1e23":"code","ff15a455":"markdown","66009b9a":"markdown","632ebd0a":"markdown","8b2d8ab8":"markdown","50a1f6e9":"markdown","3ede9979":"markdown","afbdd9be":"markdown","44eb34c6":"markdown","f12f005a":"markdown","4c5b0d7d":"markdown","214a92a0":"markdown","5adbc549":"markdown","203bdf54":"markdown","0627f73e":"markdown","324bed3d":"markdown","8b5979b4":"markdown","5297bc9b":"markdown","26dcb232":"markdown","ca144133":"markdown","e9256697":"markdown","dd0b07fb":"markdown","6b79a0dd":"markdown","6c8459ec":"markdown"},"source":{"7e049c36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use(style = 'ggplot')\nimport seaborn as sns\nsns.set()\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))  \n        \n\n# Any results you write to the current directory are saved as output","45af7277":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\" )\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\" )\ntrain.head()","3c2f388c":"train.info()","d877cc2b":"train.isnull().sum()","2bf998ab":"train.describe(include=\"all\")","40b32912":"## To find out duplicates in the dataset:\n# There are 210 duplicate tickets and 57 cabins shared.\ntrain.describe(include=['O'])","39a86544":"train.drop (['PassengerId','Ticket', 'Fare','Cabin'],axis=1, inplace=True)\ntrain.head(5)","f762b8ef":"corr= train.corr()**2\ncorr.Survived.sort_values(ascending= False)","9fdc775b":"## heatmeap to see the correlation between features. \n# Generate a mask for the upper triangle (taken from seaborn example gallery)\nimport numpy as np\nmask = np.zeros_like(train.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.set_style('whitegrid')\nplt.subplots(figsize = (15,12))\nsns.heatmap(train.corr(), \n            annot=True,\n            mask = mask,\n            cmap = 'RdBu', ## in order to reverse the bar replace \"RdBu\" with \"RdBu_r\"\n            linewidths=.9, \n            linecolor='white',\n            fmt='.2g',\n            center = 0,\n            square=True)\nplt.title(\"Correlations Among Features\", y = 1.03,fontsize = 20, pad = 40);","242cd5a2":"for dataset in train:\n    age_avg = train['Age'].mean()\n    age_std = train['Age'].std()\n    age_null = train ['Age'].isnull().sum()\n    \n    random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null)\n    train['Age'][np.isnan(train['Age'])] = random_list\n    train['Age'] = train['Age'].astype(int)\n    ","653789e8":"age_cat = pd.cut(train.Age, bins = [0,2,13,17,60,99], labels= ['Infants','children','Young Adults','Adults', 'Elderly'])\n\nage_cat ","231fc366":"train.insert(5, \"AgeCat\", age_cat,)\ntrain.head()","7e576b1d":"# Southampton has higest entry. Therefore, using it's value \"S\" to fill in the gaps.\ntrain['Embarked'].fillna('S', inplace = True)","fa80798a":"# To verify that all null values are filled.\ntrain.Embarked.value_counts()","e0957abb":"## Name:\ntrain['Title'] = train.Name.str.extract('([A-Za-z]+)\\.')\n\nfor data in train:\n    train['Title'] = train['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Other')\n    train['Title'] = train['Title'].replace('Mlle','Miss')\n    train['Title'] = train['Title'].replace('Ms','Miss')\n    train['Title'] = train['Title'].replace('Mme','Mrs')\n    \nprint(pd.crosstab(train['Title'],train['Sex']))","212cc513":"train.head(100)","672b3909":"# First calculate number of survived Vs Dead\n\nSurvived = train[train['Survived']==1]\ndead = train[train['Survived']==0]\nprint(\"Survived:%i (%.1f%%)\"%(len(Survived), float(len(Survived))\/len(train)*100.0))\nprint(\"dead:%i (%.1f%%)\"%(len(dead), float(len(dead))\/len(train)*100.0))\nprint(\"Total:%i\"%len(train))","a03df932":"train.Pclass.value_counts()","fc3a93a2":"train.groupby('Pclass').Survived.value_counts()","821f217c":"mean_Pclass = train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean()\nprint(mean_Pclass)","04f2242b":"sns.barplot(x='Pclass', y='Survived', data=mean_Pclass)","482972db":"train.Sex.value_counts()","6773c74b":"train.groupby('Sex').Survived.value_counts()\n","3a8e7b2e":"mean_sex = train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()\nprint(mean_sex)","54e61a2f":"sns.barplot(x ='Sex', y ='Survived', data = train)","90a3be9d":"survived_gender = pd.crosstab(train['Survived'], train['Sex'])\nsurvived_gender","a77dda79":"# Percentage of passengers sirvived, female vs male\n\n(train[['Sex','Survived']].groupby(['Sex']).mean()*100).round(2)","c5575d46":"# Plotting the survival by gender\n\nsurvived_gender.plot(kind='bar', stacked=True, rot = 0, figsize=(10, 7));","b4334f3e":"train.AgeCat.value_counts()","5848b3e1":"train.groupby('AgeCat').Survived.value_counts()","85166982":"mean_agecat = train[['AgeCat', 'Survived']].groupby(['AgeCat'], as_index = False).mean()\nprint(mean_agecat)","ae98d204":"sns.barplot( x = 'AgeCat', y = 'Survived', data = train)","3ec5503e":"agecat_survived = train.pivot_table('Survived', columns = 'Sex', index = 'AgeCat', aggfunc=\"sum\")\nagecat_survived","c3cd98b9":"agecat_survived.plot(title = \" Total Survival by AgeCat and Sex\", figsize=(6,4));","532ff53c":"# to understand the relationship between passenger class, sex and survival rate.\n\nt_combined = pd.crosstab(train['Pclass'],train['Sex'])\nprint(t_combined)","09720705":"t_combined = sns.catplot(x=\"Sex\", y=\"Survived\", col=\"Pclass\",data=train, saturation=.5,\n                kind=\"bar\", ci=None, aspect=.6)\n(t_combined .set_axis_labels(\"\", \"Survival Rate\")\n  .set_xticklabels([\"Male\", \"Female\"])\n  .set_titles(\"{col_name} {col_var}\")\n  .set(ylim=(0, 1))\n  .despine(left=True)) ","35e84ad6":"train.Embarked.value_counts()","ad3787dc":"train.groupby('Embarked').Survived.value_counts()","5b7e9f72":"train[['Embarked','Survived']].groupby(['Embarked'], as_index = False).mean()","8f2fbc2a":"sns.barplot(x ='Embarked', y = 'Survived', data = train)","5ba3ec72":"p_combined = pd.crosstab(train['Pclass'],train['Embarked'])\nprint(p_combined)","d3a9b977":"p_combined = sns.catplot(x=\"Embarked\", y=\"Survived\", col=\"Pclass\",data=train, saturation=.5,\n                kind=\"bar\", ci=None, aspect=.6)\n(t_combined .set_axis_labels(\"\", \"Survival Rate\")\n  .set_xticklabels([\"C\", \"Q\", \"S\"])\n  .set_titles(\"{col_name} {col_var}\")\n  .set(ylim=(0, 1))\n  .despine(left=True)) ","d61f1e23":"all_combined = sns.catplot (x=\"Age\", y=\"Embarked\",\n                hue=\"Sex\", row=\"Pclass\",\n                data=train[train.Embarked.notnull()],\n                orient=\"h\", height=4, aspect=3, palette=\"Set2\",\n                kind=\"box\")","ff15a455":"# Question 1: \nWhat categories of passengers were most likely to survive the Titanic disaster?\nThe detailed explanation of the logic of the analysis.\n\n* There are 11 features (PassengerID,Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked) and one target variable (Survived). Overall, out of 891 passengers, 342 (38.4%) survived and 61.6% dead. Among survived, I would like to understand what categories of passengers had a higher probability of survival.\n\n* Dropped few variables (PassengerId, Ticket, Cabin) because it doesn't contribute to passenger survival rate. The following categories were selected to understand the question above: Pclass, Sex, Embarked. Also, it created additional columns for comparison.\n\n1) Pclass vs Survival rate: calculated the mean survival rate among classes and it resulted in such as : Pclass1 (63%), Pclass2(47%) & Pclass3(24%). It clearly shows that Pclass is contributing to passengers' chance of survival. Therefore, it shows that passengers boarded in Pclass 1 have higher survival chance than others.\n\n2) Sex vs Survival: Among total passengers boarded, 577 were male and 314 female. But, to understand who survived better, took mean values where results show that 74% females survived better than 18% male.\n\n3) Additionally, I created an extra column called \u201c AgeCat\u201d which group age by following categories (e.g. Infants, children, young adults. Adults & elderly) on survival rate. As you could see in the chart and graph (in the workbook) that females between young adults and adults have a better chance of survival than others. It could be the case where men among those age categories (Young adults to Adults) trying to save women and children first.\n\n4) It also included P-class, Sex, and survival rate. It shows that female passengers in Pclass1 & Pclass2 had a better survival chance. Therefore, the passenger class is directly proportional to the survival rate.\n\n5) Embarked vs Survival rate: It is evident from data that passengers boarded from Cherbourg port survived better than others. Also, compared Pclass with embarked port and it shows that passengers boarded from Cherbourg in Pclass 1 had higher survival rate. And, it is also somewhat true that passenger boarded from Queenstown in Pclass 2 had a better chance of survival too.\n\n6) As a final step, combined Pclass, sex, age & embarked port station. Passengers boarded from Cherbourg in the Pclass 1 between the ages on 20-45 years, regardless gender had better chance of survival. Also, it is somewhat true for passengers boarded from Southampton as well. Whereas, when compared to Queensland, the survival rate was significantly low. It is hard to conclude how the Embarked station has anything to do with the survival rate.\n\n\n","66009b9a":"## In total, 891 records in the dataset. The following columns have missing values:\n\n* Age - 177 values missing\n* Cabin - 687 values missing\n* Embarked - 2 values missing Attributes that are numerical: Survived, Pclass,Fare Categorical: Name, Sex, Tickets","632ebd0a":"**What categories of passengers were most likely to survive the Titanic disaster?**","8b2d8ab8":"# Data Analysis:","50a1f6e9":"## Data Cleaning and Data Processing\nFew features are dropped from dataset because it doesn't contribute to passenger's survival (e.g. PassengerId, Ticket,Fare,Cabin)","3ede9979":"# Out of 891 passengers, 342 (38.4%) survived and 61.6% dead.","afbdd9be":"# Import Datasets","44eb34c6":"# 2: Sex vs Survival","f12f005a":"## Attributes used in the analysis.\n1) Firstly, to understand the data, used descriptive analysis.\nThere are 11 features and one target variable (Survived)\n\nIn order to begin the analysis, data is cleaned using following methods:\nThe following feature columns (PassengerId, Cabin, Tickets) were dropped from DataFrame as it wasn\u2019t serving any purpose for analysis.\nThere were missing values in \u201cAge\u201d, \u201cEmbarked\u201d & \u201cCabin\u201d columns in the dataset.\nIn order to fill the missing values in the age, used (mean age \u2013 standard deviation age) and (mean age + standard deviation age).\nCreated new attributes such as \u201cAgeCat\u201d using bin (pd.cut) method. \u201cAgeCat\u201d categorizes passengers into following buckets ( Infants, children, young adults, adults, elderly)\nEmbarked columns had missing values as well. On average, most passengers boarded from Southampton station. Therefore, used that value to fill in the missing values.\nAlso, created new category called \u201cTitle\u201d from name and then narrow it down to the most common titles.","4c5b0d7d":"# Data Dictionary:\n\nsurvival = Survival\t0 = No, 1 = Yes\n\npclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n\nSex = M for Male, F for Female\t\n\nAge\tAge in years\t\n\nsibsp\t# of siblings \/ spouses aboard the Titanic\t\n\nparch\t# of parents \/ children aboard the Titanic\t\n\nticket\tTicket number\t\n\nfare\tPassenger fare\t\n\ncabin\tCabin number\t\n\nembarked\t\nPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton\n","214a92a0":"# 1: Pclass vs Survived","5adbc549":"# AgeCat, Sex vs Survived","203bdf54":"# Step 1: Understand \"Train Data\"","0627f73e":"# 4: Embarked vs Survival Rate","324bed3d":"# Created new catergory called \"Title\" from variable \"Name\". Then, further narrow it down to most common titles.","8b5979b4":"# 3: AgeCat vs Survival - ","5297bc9b":"# Fill in missing values for \"Embarked\" station","26dcb232":"# Results : Female passengers had better chance of survival compared to men","ca144133":"# Age - fill Null values: (mean age - standard deviation age) and (mean age + standard deviation age)\n\n# Then, created a new column called  \"AgeCat\" which categorizes passengers by age.","e9256697":"## Titanic Data\n","dd0b07fb":"## Correlation Matric and Heatmap","6b79a0dd":"# 5 : Combine Pclass, Sex, Age, Embarked","6c8459ec":"# Question 2: Attributes used in the analysis. \n\n1)  Firstly, to understand the data, used descriptive analysis.\n\n* In order to begin the analysis, data is cleaned using following methods:\n* The following feature columns (PassengerId, Cabin, Tickets) were dropped from DataFrame as it wasn\u2019t serving any purpose for analysis.\n* There were missing values in \u201cAge\u201d, \u201cEmbarked\u201d & \u201cCabin\u201d columns in the dataset.\n* In order to fill the missing values in the age, used (mean age \u2013 standard deviation age) and (mean age + standard deviation age).\n* Created new attributes such as \u201cAgeCat\u201d using bin (pd.cut) method. \u201cAgeCat\u201d categorizes passengers into following buckets ( Infants, children, young adults, adults, elderly)\n* Embarked columns had missing values as well. On average, most passengers boarded from Southampton station. Therefore, used that value to fill in the missing values.\n* Also, created new category called \u201cTitle\u201d from name and then narrow it down to the most common titles. \n\n"}}