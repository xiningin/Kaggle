{"cell_type":{"5916444d":"code","c4e5b56e":"code","363dae8e":"code","bf8bd294":"code","1eb55470":"code","8751782e":"code","db4fb53c":"code","1167ebd9":"code","825acebd":"code","305d6f53":"code","2f7e7034":"code","f0f51649":"code","c15b1bb6":"code","8e108f6d":"code","ad458154":"code","f172c1a8":"code","42e524a1":"code","7ab3aed4":"code","5a004931":"code","8f6b0693":"code","2aab7798":"code","b5d612fb":"code","38ea5c83":"markdown","3e1201d6":"markdown"},"source":{"5916444d":"import numpy as np \nimport pandas as pd \n\nfrom fastai import *\nfrom fastai.vision import *\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","c4e5b56e":"path=Path('..\/input\/train')","363dae8e":"img_f =path.ls()[0]\nimg_f","bf8bd294":"img= open_image(img_f)\nimg","1eb55470":"get_labels = lambda x: path.parent\/f'train_masks\/{x.stem}_mask.gif'\nmask=open_mask(get_labels(img_f), div=True)\nmask","8751782e":"plt.imshow(img.data.transpose(1,2).numpy().T)\nplt.imshow(mask.data[0])","db4fb53c":"class CaravanaSegmentationLabelList(SegmentationLabelList):\n    def open(self,fn): return open_mask(fn, div=True)\n    \nclass CaravanaSegmentationItemList(ImageList):\n    _label_cls= CaravanaSegmentationLabelList","1167ebd9":"src=(CaravanaSegmentationItemList.from_folder(path)\n     .split_by_rand_pct()\n     .label_from_func(get_labels, classes=['void','car']))","825acebd":"data = (src.transform(get_transforms(), size=(224,224), tfm_y=True)\n        .databunch(bs=16)\n        .normalize(imagenet_stats))","305d6f53":"data.show_batch(rows=3, alpha=0.6)","2f7e7034":"im,m=data.one_batch()\nim.shape, m.shape","f0f51649":"m[0,0].unique()","c15b1bb6":"def dice(input:Tensor, targs:Tensor, iou:bool=False)->Rank0Tensor:\n    \"Dice coefficient metric for binary target. If iou=True, returns iou metric, classic for segmentation problems.\"\n    n = targs.shape[0]\n    input = input.argmax(dim=1).view(n,-1)\n    targs = targs.view(n,-1)\n    intersect = (input*targs).sum().float()\n    union = (input+targs).sum().float()\n    if not iou: return 2. * intersect \/ union\n    else: return intersect \/ (union-intersect+1.0)\n    \n# def iou(outputs: torch.Tensor, labels: torch.Tensor):\n#     # You can comment out this line if you are passing tensors of equal shape\n#     # But if you are passing output from UNet or something it will most probably\n#     # be with the BATCH x 1 x H x W shape\n# #     outputs = outputs.squeeze(1)  # BATCH x 1 x H x W => BATCH x H x W\n    \n#     intersection = (outputs & labels).float().sum((1, 2))  # Will be zero if Truth=0 or Prediction=0\n#     union = (outputs | labels).float().sum((1, 2))         # Will be zzero if both are 0\n    \n#     iou = (intersection + SMOOTH) \/ (union + SMOOTH)  # We smooth our devision to avoid 0\/0\n    \n#     thresholded = torch.clamp(20 * (iou - 0.5), 0, 10).ceil() \/ 10  # This is equal to comparing with thresolds\n    \n#     return thresholded\ndef accuracy_carvana(input, target):\n    target=target.squeeze(1)\n    mask =target>0\n    return (input.argmax(dim=1)[mask]==target[mask]).float().mean()","8e108f6d":"learner= unet_learner(data, models.resnet34, metrics=[dice, accuracy_carvana], model_dir=\"\/tmp\/models\/\") ","ad458154":"# pred, target = learner.model(im.cuda()), m.cuda()\n# pred.shape, target.shape","f172c1a8":"learner.lr_find()\nlearner.recorder.plot()","42e524a1":"learner.fit_one_cycle(1, 1e-3)","7ab3aed4":"learner.save('stage-1')","5a004931":"learner.load('stage-1');","8f6b0693":"img,mk= learner.data.one_batch()","2aab7798":"def overlay(pred, mask):\n    plt.imshow(pred[0].transpose(1,2).numpy().T, cmap='gray')\n    plt.imshow(mask[0,0].numpy(),cmap='jet', alpha=0.5)","b5d612fb":"overlay(img,mk)","38ea5c83":"## Dynimic U-Net ","3e1201d6":"## Metrics"}}