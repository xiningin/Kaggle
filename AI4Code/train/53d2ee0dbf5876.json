{"cell_type":{"01c94afa":"code","44b60572":"code","cfec3795":"code","b353e616":"code","9408e8da":"code","2210a4d4":"code","ce3198c9":"code","5823ac71":"code","185b9ecb":"code","e0abb0d2":"code","ec4bf1af":"code","6957f02b":"code","c399dec8":"code","347c0479":"code","115f7224":"code","d2801c0e":"code","d6e3c17b":"code","acb7ac34":"code","f08dbac8":"code","9249ab54":"code","7abca18a":"code","983d04f3":"code","b47b9bd9":"code","a753e94e":"code","06f66663":"code","2cd2b5cf":"code","3c4f26e6":"code","b7b17035":"code","63466830":"code","1eb53394":"code","255fa28c":"code","b6f013a4":"code","d9b96fc2":"code","cae961b8":"code","5f34ed0a":"code","434ec99a":"code","a73a7d81":"code","0ecdce83":"code","1802f17c":"code","37202083":"code","5e9d5cee":"code","96b5e325":"code","89be9aac":"code","3c204d9e":"markdown","0a8cbabc":"markdown","20677027":"markdown","8b21c3f3":"markdown","bb635cf4":"markdown","025319dc":"markdown","db8a10dd":"markdown","685d2c3a":"markdown","8dac3bc2":"markdown","b21880a2":"markdown","accaac88":"markdown","aba692dc":"markdown","45be5a58":"markdown","3db535bd":"markdown","c0bd0d2b":"markdown","6505a106":"markdown","56c4e66f":"markdown","940dcc97":"markdown","48f33721":"markdown","820512e3":"markdown","a3ac2bcf":"markdown","79936de4":"markdown","c2d2c192":"markdown","1c2b289c":"markdown","481516de":"markdown","824ffa1f":"markdown","6ae40189":"markdown","237ab51d":"markdown","27e82d9b":"markdown","2d61ec14":"markdown","6623f380":"markdown","9d7035ef":"markdown","9405a1f5":"markdown","85205dee":"markdown","c84535f1":"markdown","9b8267f6":"markdown","297d565e":"markdown","9a419f43":"markdown","8dff8678":"markdown","df5fbeb3":"markdown","dae4be2e":"markdown","cf8a9213":"markdown"},"source":{"01c94afa":"import numpy as np","44b60572":"np.array([1,2,3,4])","cfec3795":"# We can specify the type of data inside the array:\nnp.array([1,2,3,4],dtype=np.float32)","b353e616":"np.array([1,2,3.0,4])","9408e8da":"a = np.array([[1,2,3,4],[5,6,7,8]])\na","2210a4d4":"np.zeros(5)","ce3198c9":"np.zeros((3,4))","5823ac71":"np.ones(5,dtype=np.int32)","185b9ecb":"# random \nnp.random.rand(2,3)","e0abb0d2":"# An array of the choice\nnp.full((2,3),5)","ec4bf1af":"np.arange(10).reshape(2,5)","6957f02b":"np.linspace(0,1,11)","c399dec8":"np.eye(3)","347c0479":"np.eye(3,k=1)","115f7224":"np.eye(3,k=-1)","d2801c0e":"a = np.array([[5,10,15],[20,25,20]])\nprint('Array:','\\n',a)\nprint('Dimension of the array:','\\n',a.ndim)","d6e3c17b":"a = np.arange(6).reshape(2,3)\nprint('Array:','\\n',a)\nprint('Shape of the array:','\\n',a.shape)\nprint('Number of rows = ',a.shape[0])\nprint('Number of columns = ',a.shape[1])\nprint('Size of array :',a.size)\nprint('Manual determination of size of array :',a.shape[0]*a.shape[1])","acb7ac34":"# reshape\na = np.array([3,6,9,12])\nnp.reshape(a,(2,2))","f08dbac8":"a = np.array([3,6,9,12,18,24])\nprint('Three rows :','\\n',np.reshape(a,(3,-1)))\nprint('Three columns :','\\n',np.reshape(a,(-1,3)))","9249ab54":"a = np.ones((2,2))\nb = a.flatten()\nc = a.ravel()\nprint('Original shape :', a.shape)\nprint('Array :','\\n', a)\nprint('Shape after flatten :',b.shape)\nprint('Array :','\\n', b)\nprint('Shape after ravel :',c.shape)\nprint('Array :','\\n', c)","7abca18a":"b[0] = 0\nprint(a)","983d04f3":"c[0] = 0\nprint(a)","b47b9bd9":"data = np.array([1,2])\nones = np.ones(2, dtype=int)","a753e94e":"#Addition\nadd = data+ones\nprint('Addition of two array','\\n',add)","06f66663":"#Subtraction:\nsub = data - ones\nprint('Subraction of two array:','\\n',sub)\n\n#Multiplication:\nmulti = data*data\nprint('Multiplication of two array','\\n',multi)\n\n#Division:\ndiv = data\/data\nprint('Division by a constant','\\n',div)","2cd2b5cf":"a = np.arange(5,15,2)\nprint('Mean :',np.mean(a))\nprint('Standard deviation :',np.std(a))\nprint('Median :',np.median(a))","3c4f26e6":"a = np.array([[1,6], [4,3]])\n# minimum along a column\nprint('Min :',np.min(a,axis=0))\n# maximum along a row\nprint('Max :',np.max(a,axis=1))","b7b17035":"a = np.array([[1,6,5],\n[4,3,7]])\n# minimum along a column\nprint('Min :',np.argmin(a,axis=0))\n# maximum along a row\nprint('Max :',np.argmax(a,axis=1))","63466830":"a = np.array([1,4,2,5,3,6,8,7,9])\nprint('Sorted array:','\\n',np.sort(a, kind='quicksort'))\n\nb = np.array([[5,6,7,4],\n              [9,2,3,7]])# sort along the column\nprint('Sort along column :','\\n',np.sort(b, kind='mergresort',axis=1))\n# sort along the row\nprint('Sort along row :','\\n',np.sort(b, kind='mergresort',axis=0))","1eb53394":"a = np.array([1,2,3,4,5,6])\nprint(a[1:5])","255fa28c":"print(a[:6:2])\nprint(a[1::2])\nprint(a[1:6:])","b6f013a4":"a = np.array([[1,2,3],[4,5,6]])\n# print first row values\nprint('First row values :','\\n',a[0:1,:])\n# with step-size for columns\nprint('Alternate values from first row:','\\n',a[0:1,::2])\n# \nprint('Second column values :','\\n',a[:,1::2])\nprint('Arbitrary values :','\\n',a[0:1,1:3])","d9b96fc2":"a = np.array([[[1,2],[3,4],[5,6]],# first axis array\n    [[7,8],[9,10],[11,12]],# second axis array\n    [[13,14],[15,16],[17,18]]])# third axis array\n# 3-D array\nprint(a)","cae961b8":"print('First array, first row, first column value :','\\n',a[0,0,0])\nprint('First array last column :','\\n',a[0,:,1])\nprint('First two rows for second and third arrays :','\\n',a[1:,0:2,0:2])","5f34ed0a":"print('Printing as a single array :','\\n',a[1:,0:2,0:2].flatten())","434ec99a":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import misc\nimport cv2\n\n# read image\nimg = cv2.imread('..\/input\/dog-images\/dog.jpg')\nimg","a73a7d81":"plt.imshow(img)\nprint(img.shape)","0ecdce83":"# flip\nplt.imshow(np.flip(img, axis=1))","1802f17c":"img_array = img \/ 255\nimg_array.max(), img_array.min()","37202083":"img_array.dtype","5e9d5cee":"img_gray = img_array @ [0.2126, 0.7152, 0.0722]","96b5e325":"img_gray.shape","89be9aac":"plt.imshow(img_gray,  cmap=\"gray\")","3c204d9e":"<h1 align='center'>The Shape and Reshaping of NumPy Arrays<\/h1>","0a8cbabc":"<font color='cadetblue' size='4'>Array of Ones<\/font>\n","20677027":"**In this case, the change made was not reflected in the original array.**","8b21c3f3":"<font color='cadetblue'>About:<\/font>\n---\nIn this kernel you will get to know about all the stuffs about `NumPy`. This kernel covers basic to advanced aspects of `NumPy`.\n\n<font color='red'>Hoping that you will like it.<\/font>\n---","bb635cf4":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_3.png)","025319dc":"<font color='cadetblue' size='4'>Min-Max values and their indexes<\/font>","db8a10dd":"<font color='cadetblue' size='4'>Slicing 1-D NumPy arrays<\/font>","685d2c3a":"**Another similar function is `np.linspace()`, but instead of step size, it takes in the number of samples that need to be retrieved from the interval. A point to note here is that the last number is included in the values returned unlike in the case of `np.arange()`.**","8dac3bc2":"## Creating a NumPy array","b21880a2":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_4.png)","accaac88":"<h1 align='center'>Sorting in NumPy arrays<\/h1>","aba692dc":"**But here, the changed value is also reflected in the original ndarray.**","45be5a58":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_1.png)","3db535bd":"**NumPy gives you the flexibility to change the diagonal along which the values have to be 1s. You can either move it above the main diagonal:**","c0bd0d2b":"<h1 align='center'>NumPy arrays and Images<\/h1>","6505a106":"<font size='4' font='italic'>Since NumPy arrays can contain only homogeneous datatypes, values will be upcast if the types do not match:<\/font>","56c4e66f":"<h1 align='center'>Indexing and Slicing of NumPy array<\/h1>","940dcc97":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_9.png)","48f33721":"What is happening here is that `flatten()` creates a ***Deep copy*** of the ndarray while `ravel()` creates a ***Shallow copy*** of the ndarray.\n\n> Deep copy means that a completely new ndarray is created in memory and the ndarray object returned by flatten() is now pointing to this memory location. Therefore, any changes made here will not be reflected in the original ndarray.\n\n> A Shallow copy, on the other hand, returns a reference to the original memory location. Meaning the object returned by ravel() is pointing to the same memory location as the original ndarray object. So, definitely, any changes made to this ndarray will also be reflected in the original ndarray too.","820512e3":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_8.png)","a3ac2bcf":"<font color='cadetblue' size='4'>Reshaping a NumPy array<\/font>","79936de4":"<font color='cadetblue' size='4'>Array of zeros<\/font>\n","c2d2c192":"<font color='cadetblue'>What is numpy?<\/font>\n---\n\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I\/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.\n\n---","1c2b289c":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_5.png)","481516de":"<font color='cadetblue' size='4'>Identity Matrix in NumPy<\/font>","824ffa1f":"<h1 align='center'> Basics<\/h1>\n\n*  NumPy\u2019s array class is called `ndarray`. It is also known by the alias `array`. Note that `numpy.array` is not the same as the Standard Python Library class `array.array`, which only handles one-dimensional arrays and offers less functionality. The more important attributes of an `ndarray` object are:\n    - `ndarray.ndim:` The number of axes(dimensions) of the array.\n    - `ndarray.shape:` The dimension of array.For a matrix with x rows and y columns, shape will be (x,y).\n    - `ndarray.size:` The total number of elements of the array or It is equal to the product of the elements of the `shape`.\n    - `ndarray.dtype:` The type of the elements in the array. Additionally NumPy provides types of its own like- numpy.int32, numpy.int16, and numpy.float64.\n    - `ndarray.itemsize:` The size in bytes of each element of the array. \n    - `ndarray.data:` The buffer containing the actual elements of the array. ","6ae40189":"<font color='cadetblue' size='4'>Mean, Median and Standard deviation<\/font>","237ab51d":"<font color='cadetblue' size='4'>Random number in array<\/font>","27e82d9b":"**Or move it below the main diagonal**","2d61ec14":"<h1 align='center'>Maths with NumPy arrays<h1>","6623f380":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_13.png)","9d7035ef":"<font color='cadetblue' size='4'>Flattening a NumPy array<\/font>","9405a1f5":"**NumPy arrays can be multi-dimensional too.**","85205dee":"<font color='cadetblue' size='4'>Slicing 2-D NumPy arrays<\/font>","c84535f1":"<font color='cadetblue' size='4'>Basic ndarray<\/font>\n","9b8267f6":"<font color='cadetblue' size='4'>Slicing 3-D NumPy arrays<\/font>\n\n**So far we haven\u2019t seen a 3-D array. Let\u2019s first visualize how a 3-D array looks like:**","297d565e":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_2.png)","9a419f43":"**If in case you wanted the values as a single dimension array, you can always use the flatten() method to do the job!**","8dff8678":"![](https:\/\/raw.githubusercontent.com\/divyanshugit\/Insights-of-Python-Libraries\/master\/src\/img_6.png)","df5fbeb3":"<font color='cadetblue' size='4'>Evenly spaced ndarray<\/font>","dae4be2e":"## References:\n\n> https:\/\/numpy.org\/doc\/\n\n> https:\/\/www.kaggle.com\/learn\/python","cf8a9213":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/31\/NumPy_logo_2020.svg\/1280px-NumPy_logo_2020.svg.png)"}}