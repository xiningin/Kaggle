{"cell_type":{"0554a1b2":"code","b2aeafc1":"code","585ccd24":"code","5e743744":"code","dc6c1e8c":"code","fdcc2f1d":"code","8e54532b":"code","4600b595":"code","68e939e0":"code","50d00d03":"code","d4ee3d8a":"code","26f39a84":"code","775b9d4b":"code","2dad6faf":"code","fecd254d":"code","389d8d2b":"code","ddb73bce":"code","4796381a":"code","b9c3fcf7":"code","a44210ba":"code","c123ff98":"code","6cfdf767":"markdown","d0c88180":"markdown","60be6d9e":"markdown","caa45907":"markdown","fe571729":"markdown","23e2db8f":"markdown","e3a89a16":"markdown"},"source":{"0554a1b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2aeafc1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import RandomizedSearchCV","585ccd24":"df=pd.read_csv('..\/input\/loan-data\/loan_data.csv')\ndf.head()","5e743744":"df.info()","dc6c1e8c":"df.describe()","fdcc2f1d":"plt.figure(figsize=(10,5))\ndf[df['credit.policy']==0]['fico'].hist(bins=30,alpha=0.5,label='0')\ndf[df['credit.policy']==1]['fico'].hist(bins=30,alpha=0.5,label='1')\nplt.legend()\nplt.xlabel('FICO')","8e54532b":"plt.figure(figsize=(10,5))\ndf[df['not.fully.paid']==0]['fico'].hist(bins=30,alpha=0.5,label='0')\ndf[df['not.fully.paid']==1]['fico'].hist(bins=30,alpha=0.5,label='1')\nplt.legend()\nplt.xlabel('FICO')","4600b595":"sns.countplot('purpose',data=df,hue='not.fully.paid')","68e939e0":"sns.jointplot('fico','int.rate',data=df)","50d00d03":"sns.lmplot('fico','int.rate',data=df,col='not.fully.paid',hue='credit.policy',palette='coolwarm')","d4ee3d8a":"sns.heatmap(df.corr())","26f39a84":"df2=pd.get_dummies(df,columns=['purpose'],drop_first=True)\ndf2","775b9d4b":"X=df2.drop('not.fully.paid', axis=1)\ny=df2['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","2dad6faf":"dt=DecisionTreeClassifier()\ndt.fit(X_train,y_train)\npreds1=dt.predict(X_test)","fecd254d":"print(classification_report(y_test,preds1))\nprint(confusion_matrix(y_test,preds1))","389d8d2b":"rf=RandomForestClassifier()\nrf.fit(X_train,y_train)\npreds2=rf.predict(X_test)","ddb73bce":"print(classification_report(y_test,preds2))\nprint(confusion_matrix(y_test,preds2))","4796381a":"n_estimators = [int(x) for x in np.linspace(start = 200, stop = 1000, num = 5)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(20, 100, num = 5)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n\nrf1 = RandomForestClassifier()\nrf2 = RandomizedSearchCV(estimator = rf1, param_distributions = random_grid, \n                              cv = 3, verbose=2,n_jobs = -1)\nrf2.fit(X_train,y_train)","b9c3fcf7":"rf2.best_params_","a44210ba":"rf3=RandomForestClassifier(n_estimators= 200,\n min_samples_split=2,\n min_samples_leaf=2,\n max_features='auto',\n max_depth=40,\n bootstrap=True)\nrf3.fit(X_train,y_train)\npreds3=rf3.predict(X_test)","c123ff98":"print(classification_report(y_test,preds3))\nprint(confusion_matrix(y_test,preds3))","6cfdf767":"# Random Forest","d0c88180":"# Visualizations","60be6d9e":"# Data Preprocessing","caa45907":"# Data Loading","fe571729":"# Decision Tree","23e2db8f":"# Overview\n\nIn the lending industry, investors provide loans to borrowers in exchange for the promise of repayment with interest. If the borrower repays the loan, then the lender would make profit from the interest. However, if the borrower fails to repay the loan, then the lender loses money. Therefore, lenders face the problem of predicting the risk of a borrower being unable to repay a loan. ","e3a89a16":"# Tuned RF"}}