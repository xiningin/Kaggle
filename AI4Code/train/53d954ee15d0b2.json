{"cell_type":{"553d1c55":"code","70172046":"code","7f3ab4ff":"code","bddbf99f":"code","0960ee57":"code","961b715a":"code","740e62a3":"code","cb060838":"code","412ca4e0":"code","a2e6f143":"code","df62f2f5":"code","7493b96a":"code","c2f85820":"code","08b6ac2f":"code","72822220":"code","81c21e90":"code","bf55e9de":"code","60c185d9":"code","988e9cdc":"code","a1d63cf2":"code","82419553":"code","c14459b6":"code","a43298db":"code","bd0fb95a":"code","d03bebe1":"code","c5ca3bac":"code","d65a2250":"code","1a4e898d":"markdown"},"source":{"553d1c55":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","70172046":"from pylab import rcParams\nrcParams['figure.figsize']=15,8","7f3ab4ff":"df = pd.read_csv('..\/input\/sunspots\/Sunspots.csv')\nprint(df.shape)\ndf.head()","bddbf99f":"df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')","0960ee57":"df1 = df.drop(['Unnamed: 0', 'Date'], axis=1)\ndf1.index = df.Date\ndf1.tail()","961b715a":"y = df1['Monthly Mean Total Sunspot Number']","740e62a3":"y.plot()\nplt.show()","cb060838":"import statsmodels.api as sm\n\ndecomposition = sm.tsa.seasonal_decompose(y,model='additive')\nfig = decomposition.plot()\nplt.show()","412ca4e0":"#plot for rolling statistic for testing stationarity\ndef test_stationarity(timeseries, title):\n    \n    #Determinig rolling statistics\n    rolmean = pd.Series(timeseries).rolling(window=12).mean()\n    rolstd = pd.Series(timeseries).rolling(window=12).std()\n    \n    fig, ax = plt.subplots(figsize=(15,8))\n    ax.plot(timeseries,label = title)\n    ax.plot(rolmean, label='rolling mean')\n    ax.plot(rolstd, label='rolling std(x10)')\n    ax.legend()","a2e6f143":"pd.options.display.float_format = '{:.8f}'.format\ntest_stationarity(y,'raw data')","df62f2f5":"#Augmented Dickey-Fuller Test(ADF)\nfrom statsmodels.tsa.stattools import adfuller\n\ndef ADF_test(timeseries,dataDesc):\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries,autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4],index=['Test Statistic','p-value','#Lags Used','NUmber of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value(%s)'%key]=value\n    print(dfoutput)\n    \nprint(ADF_test(y,'raw data'))","7493b96a":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nplot_acf(y)\nplt.show()\nplot_pacf(y)\nplt.show()","c2f85820":"#split train and test dataset\n\ny_to_train = y[:'2009-12-01']\ny_to_test = y['2010-01-01':]\npredict_date = len(y)-len(y[:'2010-01-01'])","08b6ac2f":"#ARIMA MODEL\n\nimport itertools\n\np = d = q  =range(0,2)\n\npdq = list(itertools.product(p,d,q))\n\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p,d,q))]","72822220":"# Creating an empty Dataframe with column names only\nARIMA_AIC = pd.DataFrame(columns=['param', 'AIC'])\nARIMA_AIC","81c21e90":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order= param,\n                                           seasonal_order=param_seasonal,\n                                           enforce_stationarity=False,\n                                           enforce_invertibility=False)\n            results = mod.fit()\n            \n            print('ARIMA{}x{}12 - AIC:{}'.format(param,param_seasonal,results.aic))\n            ARIMA_AIC = ARIMA_AIC.append({'param':param, 'AIC': results.aic}, ignore_index=True)\n        except:\n            continue","bf55e9de":"## Sort the above AIC values in the ascending order to get the parameters for the minimum AIC value\n\nARIMA_AIC.sort_values(by='AIC',ascending=True)","60c185d9":"mod = sm.tsa.statespace.SARIMAX(y,order=(1,1,1),\n                               seasonal_order=(1,1,1,12),\n                               enforce_stationary=False,\n                               enforce_invertibility=False)\n\nresults = mod.fit()\nprint(results.summary())","988e9cdc":"results.plot_diagnostics()\nplt.show()","a1d63cf2":"#validation Forecasts\npred = results.get_prediction(start = pd.to_datetime('2010-01-31'), dynamic = False)\npred_ci = pred.conf_int()","82419553":"ax = y['2005':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead forecast', alpha=.7)\n\nax.fill_between(pred_ci.index,\n               pred_ci.iloc[:,0],\n               pred_ci.iloc[:,1],color='k',alpha=.2)\n\nax.set_xlabel('Date')\nax.set_ylabel('Monthly Mean Total Sunspot Number')\nplt.grid()\nplt.show()","c14459b6":"y_forecasted = pred.predicted_mean\ny_truth = y['2010-01-31':]\n\nmse = ((y_forecasted-y_truth)**2).mean()\nprint(\"The mean squared error of forecast is {}\".format(round(mse,2)))\nprint(\"The root mean squared error of forecast is {}\".format(round(np.sqrt(mse),2)))","a43298db":"#validation Forecasts\npred = results.get_prediction(start = pd.to_datetime('2010-01-31'), dynamic = True, full_results = True)\npred_ci = pred.conf_int()","bd0fb95a":"ax = y['2005':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead forecast', alpha=.7)\n\nax.fill_between(pred_ci.index,\n               pred_ci.iloc[:,0],\n               pred_ci.iloc[:,1],color='k',alpha=.2)\n\nax.set_xlabel('Date')\nax.set_ylabel('Monthly Mean Total Sunspot Number')\nplt.grid()\nplt.show()","d03bebe1":"y_forecasted = pred.predicted_mean\ny_truth = y['2010-01-01':]\n\nmse = ((y_forecasted-y_truth)**2).mean()\nprint(\"The mean squared error of forecast is {}\".format(round(mse,2)))\nprint(\"The root mean squared error of forecast is {}\".format(round(np.sqrt(mse),2)))","c5ca3bac":"#forecasting\npred_uc = results.get_forecast(steps =109)\npred_ci = pred_uc.conf_int()","d65a2250":"ax = y_to_test.plot(label='observed',figsize=(20,15))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\n\nax.fill_between(pred_ci.index,\n               pred_ci.iloc[:, 0],\n               pred_ci.iloc[:, 1], color='k',alpha=.25)\n\nax.set_xlabel('Date')\nax.set_ylabel('Monthly Mean Total Sunspot Number')\n\nplt.grid()\nplt.show()","1a4e898d":"### ***** END*****"}}