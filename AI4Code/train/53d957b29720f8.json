{"cell_type":{"b77df468":"code","94f530e3":"code","5a7ceedf":"code","41ec6765":"code","e72b1fb8":"code","777d2457":"code","c3aabb85":"code","3829e674":"code","383d5c67":"code","00949b43":"code","2b7270d9":"code","4904e21e":"code","a5b9fc2e":"code","1b17e749":"code","c9d13edd":"code","e0a84b65":"code","eb1da792":"code","71895451":"code","2169fe60":"code","91d21e39":"code","afd2f880":"code","f17eacae":"code","aab45dfe":"code","1a40b31a":"code","02df937b":"code","ef1c11cb":"code","8f22f416":"code","ca7c595a":"code","6f9d54c6":"code","dd798823":"code","feebfbe8":"code","9e6045f6":"code","f77776bb":"code","b72d7d57":"code","0840523e":"code","4dc2a29f":"code","97d60ca7":"code","a9d2bcbd":"code","fac2311e":"code","c4d5b6cd":"markdown","c03de9cf":"markdown","1b817db5":"markdown","9fc891cd":"markdown","7fed898c":"markdown","673d826c":"markdown","7d5fe0ac":"markdown","a81c4229":"markdown","907a4d2d":"markdown"},"source":{"b77df468":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","94f530e3":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport datetime as dt\n\npd.set_option(\"display.max_columns\", 500) \npd.set_option(\"display.max_rows\", 200)\nplt.rcParams['figure.figsize'] = [15, 6]\nsns.set_style(\"darkgrid\")","5a7ceedf":"!pip install pandas-profiling","41ec6765":"# Load data to pandas\n\nonline_sales = pd.read_csv('\/kaggle\/input\/uisummerschool\/Online_sales.csv', sep=',')\nonline_sales.head()","e72b1fb8":"# Menampilkan beberapa kolom\nonline_sales [['Date', 'Product SKU', 'Quantity', 'Revenue', 'Tax']]","777d2457":"# Menyimpan data ke variabel baru\ntest = online_sales [['Date', 'Product SKU', 'Quantity', 'Revenue', 'Tax']]\n\n# Tidak menampilkan output\n","c3aabb85":"test","3829e674":"# Jika setelah disimpan divariabel lalu ingin ditampilkan \ntest.head(10)\n# head bagian atas, tail bagian bawah data (sesuai kolom di csv)","383d5c67":"# Melakukan filter berdasarkan nilai suatu kolom\n# Misal ambil data dengan Product SKU bernilai GGOENEBQ079099\n# Cara 1\ncondition1= online_sales['Product SKU'] == 'GGOENEBQ079099'\n\nonline_sales[ (condition1) ]\n# online_sales[online_sales['Product SKU'] == 'GGOENEBQ079099']\n\n\ncondition2= online_sales['Quantity'] > 2\nonline_sales[ (condition1) & (condition2)]","00949b43":"# Cara 2\n# Ingin mengambil data \nonline_sales.query('Quantity > 10').head(5)","2b7270d9":"test = online_sales [['Date', 'Product SKU', 'Quantity', 'Revenue', 'Tax', 'Delivery']]\n## Kolom baru\ntest['Net_Income'] = test['Revenue'] - test['Tax'] - test['Delivery']\ntest.head()","4904e21e":"## Update kolom yg ada berdasar kondisi\n\nkondisi = test['Tax'].isnull() \n# bisa juga menggunakan >, <, == nilai tertentu \n# kondisi= test['Quantity'] > 2\n\ntest.loc[kondisi, ['Tax']] = 1","a5b9fc2e":"# Group by untuk aggregasi\n\ntest = online_sales.groupby(['Date'])['Quantity'].sum().reset_index()\ntest.head()","1b17e749":"#Group by multiple kolom\ntest = online_sales.groupby(['Date', 'Product SKU'])['Quantity'].sum().reset_index()\ntest.head()","c9d13edd":"online_sales.head(3)","e0a84b65":"# Agregasi beberapa tipe\ntest = online_sales.groupby(['Date']).agg({'Quantity': 'sum',\n                                                      'Revenue': 'sum',\n                                                      'Tax': 'sum',\n                                                      'Product SKU': 'count',\n                                                      'Transaction ID': 'count',\n                                                     }).reset_index()\ntest.head()","eb1da792":"#Sort data berdasar quantity descending\nonline_sales.sort_values(by=['Quantity'], ascending = False).head(15)","71895451":"test.head(3)","2169fe60":"test.rename(index=str, columns={\"Quantity\": \"Total Quantity\", \"Revenue\": \"Total Revenue\"}, inplace = True)\n\ntest.drop(columns=['Product SKU', 'Transaction ID'], inplace = True)\ntest.head()","91d21e39":"## Tahap 1 Olah data hingga mendapat total revenue per hari\nonline_sales = online_sales = pd.read_csv('\/kaggle\/input\/uisummerschool\/Online_sales.csv')\nbackup = online_sales.copy() ##untuk debugging pengajar, tak usah dihiraukan\n\ndaily_online_revenue = online_sales.groupby(['Date'])['Revenue'].sum().reset_index()\ndaily_online_revenue.tail()","afd2f880":"## Plot\n\ng = sns.lineplot(data = daily_online_revenue, x= 'Date', y = 'Revenue')     ","f17eacae":"daily_online_revenue.info()","aab45dfe":"daily_online_revenue['Date'] = daily_online_revenue['Date'].astype(str)\ndaily_online_revenue['Date'] = pd.to_datetime(daily_online_revenue['Date'])\ng = sns.lineplot(data = daily_online_revenue, x= 'Date', y = 'Revenue')     ","1a40b31a":"## Tahap 2 Tambahkan data yang akan diprediksi\nadd_data = [['2017-12-01', 0], ['2017-12-02', 0], ['2017-12-03', 0],\n            ['2017-12-04', 0], ['2017-12-05', 0], ['2017-12-06', 0],\n            ['2017-12-07', 0], ['2017-12-08', 0], ['2017-12-09', 0],\n            ['2017-12-10', 0], ['2017-12-11', 0], ['2017-12-10', 0],\n            ['2017-12-13', 0], ['2017-12-14', 0]\n           ] \n  \n# Create the pandas DataFrame \nadd_data_df = pd.DataFrame(add_data, columns = ['Date', 'Revenue']) \nadd_data_df['Date'] = add_data_df['Date'].astype(str)\nadd_data_df['Date'] = pd.to_datetime(add_data_df['Date'])\n\n\ndaily_online_revenue = daily_online_revenue.append(add_data_df)\ndf_rev = daily_online_revenue.copy()  ##untuk evaluasi pemateri\n\ndaily_online_revenue.tail(20)","02df937b":"## 3 Persiapan data prediksi dan training\ndef preprocess (dataset):\n    processed_dataset = dataset.copy()\n    for i in range(1,6):\n        processed_dataset[\"d-\"+str(i)+\"_rev\"] = dataset.shift(i, axis=0)[\"Revenue\"]\n#     processed_dataset = processed_dataset.fillna(0)\n    processed_dataset = processed_dataset.dropna()\n\n    return processed_dataset\n\n## Add feature \ndaily_online_revenue = preprocess(daily_online_revenue).set_index('Date')","ef1c11cb":"daily_online_revenue","8f22f416":"\n# If you want to submit, please change the value to \"2017-11-30\" \"2017-11-16\"\nend_of_training_date = \"2017-11-30\" \n\ntrain_data = daily_online_revenue.loc[:end_of_training_date]\ntest_data = daily_online_revenue.loc[end_of_training_date:]\ntest_data = daily_online_revenue.iloc[1:]","ca7c595a":"train_data","6f9d54c6":"# Pisahkan kolom yang ingin diprediksi (biasa disebut label menjadi y), dan variabel lain menjadi x\nx_train = train_data [['d-1_rev','d-2_rev','d-3_rev','d-4_rev','d-5_rev']]\ny_train = train_data [['Revenue']]\n\nx_test = test_data [['d-1_rev','d-2_rev','d-3_rev','d-4_rev','d-5_rev']]\ny_test = test_data [['Revenue']]","dd798823":"## Split train and test\ndef split_train_test(dataset, end_of_training_date):\n    \n    # training_data =\n    training_data = dataset.loc[:end_of_training_date]\n    # testing_data = \n    testing_data = dataset.loc[end_of_training_date:]\n    testing_data = testing_data.iloc[1:]\n    return training_data, testing_data","feebfbe8":"## Split label and predictor\ndef split_label_and_predictor(train_or_test_data):\n    \n    # x_data =\n    x_data = train_or_test_data [['d-1_rev','d-2_rev','d-3_rev','d-4_rev','d-5_rev']]\n    # y_data = \n    y_data = train_or_test_data [['Revenue']]\n    return x_data, y_data","9e6045f6":"from sklearn.ensemble import RandomForestRegressor\n\ndef fit(x_train, y_train):\n    model = RandomForestRegressor(random_state=1)  #14045\n    model.fit(x_train, y_train)\n    return model\n\ndef predict(model, x_test):\n    y_pred = model.predict(x_test)\n    return y_pred\n\nmodel = fit(x_train, y_train)\n\n","f77776bb":"x_test = x_test.reset_index().drop(columns=['Date'])\nx_test","b72d7d57":"for i in y_pred[:5]:\n    print(i)","0840523e":"# Predict the model\ndf_rev2 = df_rev.copy()\nn_iteration = len(x_test)\nresult = []\nfor i in range(n_iteration):\n    y_pred = predict(model, pd.DataFrame(x_test.iloc[i]).transpose())\n    result.append(y_pred[0])\n    df_rev2.loc[df_rev2[\"Date\"]==x_test.index[i],\"Revenue\"] = y_pred\n    \n    # Repeat the whole process, except for model fitting\n    daily_online_revenue = preprocess(df_rev2).set_index('Date')\n    _, testing_data = split_train_test(daily_online_revenue,end_of_training_date)\n    x_test, _ = split_label_and_predictor(testing_data)\nresult","4dc2a29f":"y_test","97d60ca7":"y_test = y_test.tail(14)\nprint(len(y_test))","a9d2bcbd":"# THIS IS FOR VALIDATION PURPOSE\n# Prediction vs Actual\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\ncomparison = pd.DataFrame({\"Prediction\":result,\"Actual\":y_test['Revenue']})\ncomparison.index = y_test.index\nerror = sqrt(mean_squared_error(comparison[\"Actual\"], comparison[\"Prediction\"]))\nprint(\"Error Score (RMSE) = {}\".format(round(error,2)))\n\nhistorical = pd.DataFrame(y_train).rename(columns={\"Revenue\":\"Actual\"}).tail(14)\n\npd.concat([historical,comparison],sort=True).plot();","fac2311e":"# Save the result to CSV for submission\nformatted_result = pd.DataFrame(result).reset_index().rename(columns={\"index\":\"Id\",0:\"Revenue\"})\ndisplay(formatted_result)\n\n# Uncomment the code below if you want to save the result\nformatted_result[['Id', 'Revenue']].to_csv(\"result.csv\",index=False)","c4d5b6cd":"Kita memiliki data penjualan online hingga 30 november 2017, Pak Bos meminta untuk melakukan prediksi \nberapa penjualan kita untuk 2 minggu ke depan (1 Desember -14 Desember)\nDari data penjualan online :\n1. Olah data hingga mendapat total revenue per hari [sudah]\n2. Tambahkan data yang akan diprediksi [sudah]\n3. Persiapan data prediksi dan training\n4. Training dan testing (modelling)\n","c03de9cf":"### 1.4 Group by Data","1b817db5":"### 1.2 Filter and selection","9fc891cd":"### 1.5 Sorting Data","7fed898c":"### 1.1 Show and assigning value","673d826c":"### 1.6 Mengganti nama kolom atau mendelete kolom","7d5fe0ac":"### 1.3 Create or update colomn","a81c4229":"# 1. Basic Pandas","907a4d2d":"# 2. Our Challenge"}}