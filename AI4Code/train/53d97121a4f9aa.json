{"cell_type":{"fbe4d803":"code","a792051b":"code","f9b24cef":"code","fd2b9929":"code","7692447c":"code","4035a2bc":"code","ff5706c8":"code","689166de":"code","2d3e6ad0":"code","7737548b":"code","1f13f9a7":"code","23f1312e":"code","76a467c2":"code","052a3f7d":"code","9c303899":"code","725bedef":"code","eaa7a8a1":"code","ec1a5468":"code","93c725e1":"code","8d8e3d2e":"code","b4ce0778":"code","71163995":"code","b9b4ea13":"code","83cc7f36":"markdown","d40b55e5":"markdown","4fae581a":"markdown","aed4e228":"markdown","31ab1d94":"markdown","538b1651":"markdown","8dc1c4a9":"markdown","29df53a8":"markdown"},"source":{"fbe4d803":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report","a792051b":"data = pd.read_csv('..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv')","f9b24cef":"data","fd2b9929":"descriptions = pd.read_csv('..\/input\/app-store-apple-data-set-10k-apps\/appleStore_description.csv').loc[:, ['id', 'app_desc']]","7692447c":"descriptions","4035a2bc":"data = data.merge(descriptions, on='id')","ff5706c8":"data","689166de":"def get_versions(version):\n    \n    version = version.replace('iOV ', '')\n    version = version.replace('v', '')\n    version = version.replace('b', '')\n    version = version.replace('V', '')\n    version = version.replace('Update ', '')\n    version = '1.3.0' if version == '1.3.' else version\n    \n    try:\n        if version.count('.') == 2:\n            major_ver = np.int(re.search(r'^\\d+', version).group(0))\n            minor_ver = np.int(re.search(r'(?<=\\.)\\d+(?=\\.)', version).group(0))\n            patch_ver = np.int(re.search(r'\\d+$', version).group(0))\n        else:\n            major_ver = np.int(re.search(r'^\\d+', version).group(0))\n            minor_ver = np.int(re.search(r'\\d+$', version).group(0))\n            patch_ver = 0\n    except:\n        print(version)\n    \n    \n    return (major_ver, minor_ver, patch_ver)","2d3e6ad0":"def get_sequences(texts, vocab_length=30000):\n    tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=vocab_length)\n    tokenizer.fit_on_texts(texts)\n    \n    sequences = tokenizer.texts_to_sequences(texts)\n    \n    max_seq_length = np.max([len(sequence) for sequence in sequences])\n    \n    sequences = tf.keras.preprocessing.sequence.pad_sequences(sequences, maxlen=max_seq_length, padding='post')\n    \n    return sequences","7737548b":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop unnecessary columns\n    df = df.drop(['Unnamed: 0', 'id', 'track_name', 'currency'], axis=1)\n    \n    # Create version features\n    df['major_ver'] = df['ver'].apply(lambda x: get_versions(x)[0])\n    df['minor_ver'] = df['ver'].apply(lambda x: get_versions(x)[1])\n    df['patch_ver'] = df['ver'].apply(lambda x: get_versions(x)[2])\n    \n    df = df.drop('ver', axis=1)\n    \n    # Ordinal encode cont_rating column\n    cont_ordering = {'4+': 4, '9+': 9, '12+': 12, '17+': 17}\n    df['cont_rating'] = df['cont_rating'].replace(cont_ordering)\n    \n    # Get app_desc sequences\n    desc = get_sequences(df['app_desc'])\n    df = df.drop('app_desc', axis=1)\n    \n    # Encode labels\n    df['prime_genre'] = df['prime_genre'].apply(lambda x: 1 if x == 'Games' else 0)\n    \n    # Split df into X and y\n    y = df['prime_genre'].copy()\n    X = df.drop('prime_genre', axis=1).copy()\n    \n    return X, desc, y","1f13f9a7":"X, desc, y = preprocess_inputs(data)","23f1312e":"X","76a467c2":"desc","052a3f7d":"y","9c303899":"X_train, X_test, desc_train, desc_test, y_train, y_test = train_test_split(X, desc, y, train_size=0.7, random_state=123)","725bedef":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","eaa7a8a1":"X_inputs = tf.keras.Input(shape=(X_train.shape[1],), name='X_input')\ndesc_inputs = tf.keras.Input(shape=(desc_train.shape[1],), name='desc_input')\n\nX_dense1 = tf.keras.layers.Dense(64, activation='relu', name='X_dense1')(X_inputs)\nX_dense2 = tf.keras.layers.Dense(64, activation='relu', name='X_dense2')(X_dense1)\n\ndesc_embedding = tf.keras.layers.Embedding(\n    input_dim=30000,\n    output_dim=128,\n    input_length=desc_train.shape[1],\n    name='desc_embedding'\n)(desc_inputs)\ndesc_flatten = tf.keras.layers.Flatten(name='desc_flatten')(desc_embedding)\n\nconcat = tf.keras.layers.concatenate([X_dense2, desc_flatten], name='concatenate')\n\noutputs = tf.keras.layers.Dense(1, activation='sigmoid', name='output')(concat)\n\n\nmodel = tf.keras.Model(inputs=[X_inputs, desc_inputs], outputs=outputs)\n\nprint(model.summary())\ntf.keras.utils.plot_model(model)","ec1a5468":"model.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\n\nbatch_size = 32\nepochs = 50\n\nhistory = model.fit(\n    [X_train, desc_train],\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau(),\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","93c725e1":"model.evaluate([X_test, desc_test], y_test)","8d8e3d2e":"y_true = np.array(y_test)\n\ny_pred = np.squeeze(model.predict([X_test, desc_test]))\ny_pred = np.array(y_pred >= 0.5, dtype=np.int)","b4ce0778":"cm = confusion_matrix(y_true, y_pred)\nclr = classification_report(y_true, y_pred, target_names=[\"Other\", \"Games\"])","71163995":"plt.figure(figsize=(8, 8))\nsns.heatmap(cm, annot=True, vmin=0, fmt='g', cbar=False, cmap='Blues')\n\nplt.xticks(np.arange(2) + 0.5, [\"Other\", \"Games\"])\nplt.xlabel(\"Predicted\")\n\nplt.yticks(np.arange(2) + 0.5, [\"Other\", \"Games\"])\nplt.ylabel(\"Actual\")\n\nplt.title(\"Confusion Matrix\")\nplt.show()","b9b4ea13":"print(clr)","83cc7f36":"# Getting Started","d40b55e5":"# Merge DataFrames","4fae581a":"# Task for Today  \n\n***\n\n## App Store Genre Prediction  \n\nGiven *data about apps from the Apple App Store*, let's try to predict if a given app is a **game** or not.  \n  \nWe will use a multi-input TensorFlow neural network to make our predictions.","aed4e228":"# Modeling","31ab1d94":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/kDNb6n4HHsg","538b1651":"# Training","8dc1c4a9":"# Results","29df53a8":"# Preprocessing"}}