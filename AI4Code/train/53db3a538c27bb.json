{"cell_type":{"0490d3ef":"code","ed8688ae":"code","22d6cd6c":"code","d8bdf9e6":"code","a0c9f8cf":"code","cd07edac":"code","a92dac5b":"code","c69195ed":"code","ffada11f":"code","d253f1ae":"code","54c3f99b":"code","bcac50f0":"markdown","512cd997":"markdown","523b284e":"markdown","42333775":"markdown","729f0f51":"markdown","967fcdef":"markdown","f546a2e3":"markdown"},"source":{"0490d3ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed8688ae":"import cv2\nfrom glob import glob\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport math\nimport pandas as pd\n\nScaleTo = 70  # px to scale\nseed = 7  # fixing random\n\npath = '..\/input\/plant-seedlings-classification\/train\/*\/*.png' \nfiles = glob(path)\n\ntrainImg = []\ntrainLabel = []\nj = 1\nnum = len(files)\n\n# Obtain images and resizing, obtain labels\nfor img in files:\n    print(str(j) + \"\/\" + str(num), end=\"\\r\")\n    trainImg.append(cv2.resize(cv2.imread(img), (ScaleTo, ScaleTo)))  # Get image (with resizing)\n    trainLabel.append(img.split('\/')[-2])  # Get image label (folder name)\n    j += 1\n\ntrainImg = np.asarray(trainImg)  # Train images set\ntrainLabel = pd.DataFrame(trainLabel)  # Train labels set","22d6cd6c":"for i in range(8):\n    plt.subplot(2, 4, i + 1)\n    plt.imshow(trainImg[i])","d8bdf9e6":"clearTrainImg = []\nexamples = []; getEx = True\nfor img in trainImg:\n    # Use gaussian blur\n    blurImg = cv2.GaussianBlur(img, (5, 5), 0)   \n    \n    # Convert to HSV image\n    hsvImg = cv2.cvtColor(blurImg, cv2.COLOR_BGR2HSV)  \n    \n    # Create mask (parameters - green color range)\n    lower_green = (25, 40, 50)\n    upper_green = (75, 255, 255)\n    mask = cv2.inRange(hsvImg, lower_green, upper_green)  \n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11, 11))\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    # Create bool mask\n    bMask = mask > 0  \n    \n    # Apply the mask\n    clear = np.zeros_like(img, np.uint8)  # Create empty image\n    clear[bMask] = img[bMask]  # Apply boolean mask to the origin image\n    \n    clearTrainImg.append(clear)  # Append image without backgroung\n    \n    # Show examples\n    if getEx:\n        plt.subplot(2, 3, 1); plt.imshow(img)  # Show the original image\n        plt.subplot(2, 3, 2); plt.imshow(blurImg)  # Blur image\n        plt.subplot(2, 3, 3); plt.imshow(hsvImg)  # HSV image\n        plt.subplot(2, 3, 4); plt.imshow(mask)  # Mask\n        plt.subplot(2, 3, 5); plt.imshow(bMask)  # Boolean mask\n        plt.subplot(2, 3, 6); plt.imshow(clear)  # Image without background\n        getEx = False\n\nclearTrainImg = np.asarray(clearTrainImg)","a0c9f8cf":"for i in range(8):\n    plt.subplot(2, 4, i + 1)\n    plt.imshow(clearTrainImg[i])","cd07edac":"clearTrainImg = clearTrainImg \/ 255","a92dac5b":"from keras.utils import np_utils\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\n\n# Encode labels and create classes\nle = preprocessing.LabelEncoder()\nle.fit(trainLabel[0])\nprint(\"Classes: \" + str(le.classes_))\nencodeTrainLabels = le.transform(trainLabel[0])\n\n# Make labels categorical\nclearTrainLabel = np_utils.to_categorical(encodeTrainLabels)\nnum_clases = clearTrainLabel.shape[1]\nprint(\"Number of classes: \" + str(num_clases))\n\n# Plot of label types numbers\ntrainLabel[0].value_counts().plot(kind='bar')","c69195ed":"import numpy\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers import BatchNormalization\n\nnumpy.random.seed(seed)  # Fix seed\n\nmodel = Sequential()\nmodel.add(Conv2D(64, (5, 5), activation='relu', input_shape=(70, 70, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\n\n\n\nmodel.add(Dense(12, activation='softmax'))\n\nmodel.summary()\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","ffada11f":"from sklearn.model_selection import StratifiedKFold\nkfold = StratifiedKFold(n_splits=5, shuffle=False, random_state=seed)\ncvscores = []\nfor train, test in kfold.split(clearTrainImg, encodeTrainLabels):\n    model.fit(clearTrainImg[train], clearTrainLabel[train], epochs=10, batch_size=10, verbose=1)\n    scores = model.evaluate(clearTrainImg[test], clearTrainLabel[test], verbose=1)\n    print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n    cvscores.append(scores[1] * 100)\nprint(\"%.2f%% (+\/- %.2f%%)\" % (numpy.mean(cvscores), numpy.std(cvscores)))","d253f1ae":"from keras.applications import VGG19\nvgg19_model = VGG19(\n    include_top=True,\n    weights=None,\n    input_tensor=None,\n    input_shape=(70, 70, 3),\n    pooling=\"max\",\n    classes=12,\n    classifier_activation=\"softmax\",\n)\nvgg19_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","54c3f99b":"from sklearn.model_selection import StratifiedKFold\nkfold = StratifiedKFold(n_splits=5, shuffle=False, random_state=seed)\ncvscores = []\nfor train, test in kfold.split(clearTrainImg, encodeTrainLabels):\n    vgg19_model.fit(clearTrainImg[train], clearTrainLabel[train], epochs=2, batch_size=10, verbose=1)\n    scores = vgg19_model.evaluate(clearTrainImg[test], clearTrainLabel[test], verbose=1)\n    print(\"%s: %.2f%%\" % (vgg19_model.metrics_names[1], scores[1]*100))\n    cvscores.append(scores[1] * 100)\nprint(\"%.2f%% (+\/- %.2f%%)\" % (numpy.mean(cvscores), numpy.std(cvscores)))","bcac50f0":"# Categories Labels","512cd997":"# Get Data","523b284e":"# 5-fold cross validation","42333775":"# Model","729f0f51":"# Cleaning Data","967fcdef":"# VGG19 5-fold Cross Validation","f546a2e3":"# Normalize Input"}}