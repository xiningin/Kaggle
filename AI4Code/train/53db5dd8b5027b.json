{"cell_type":{"24f74a03":"code","3d882993":"code","faf61b8d":"code","c9b4efca":"code","073d983a":"code","c7edde76":"code","2625454e":"code","82d2bbf5":"code","2007a749":"code","72a7c370":"code","1529a40c":"code","ad7fe5d3":"code","93a5eb6b":"code","e9951dd4":"code","d3aa0b97":"code","2ad43037":"markdown","ff42b0cf":"markdown","48b2d284":"markdown","cb55ade6":"markdown","a0c211d2":"markdown","f8f551e3":"markdown","625896dd":"markdown","ef38d86b":"markdown","86b87f3e":"markdown","a06415bc":"markdown","ce3318b0":"markdown"},"source":{"24f74a03":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows',1000)\n\nimport missingno as msno\n\nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport io\n\nfrom plotly.offline import init_notebook_mode, plot,iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\nimport plotly.tools as tls#visualization\nimport plotly.figure_factory as ff#visualization","3d882993":"df=pd.read_csv(\"..\/input\/data.csv\")\ndf.head(10)","faf61b8d":"best_players_per_position=df.iloc[df.groupby(df['Position'])['Overall'].idxmax()][['Position','Name','Overall']]\nbest_players_per_position","c9b4efca":"forwards=['RF', 'ST', 'LW', 'LF', 'RS', 'LS', 'RM', 'LM','RW']\nmidfielders=['RCM','LCM','LDM','CAM','CDM','LAM','RDM','CM','RAM','CF']\ndefenders=['RCB','CB','LCB','LB','RB','RWB','LWB']\ngoalkeepers=['GK']\n\ndef pos2(position):\n    if position in forwards:\n        return 'Forward'\n    \n    elif position in midfielders:\n        return 'Midfielder'\n    \n    elif position in defenders:\n        return 'Defender'\n    \n    elif position in goalkeepers:\n        return 'GK'\n    \n    else:\n        return 'nan'\n\ndf[\"Position2\"]=df[\"Position\"].apply(lambda x: pos2(x))\n\ndf[\"Position2\"].value_counts()","073d983a":"n_sne=2000\ndf_sne=df.loc[:n_sne]\nskills_ratings = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing',\n                  'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing',\n                  'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions',\n                  'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n                  'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', \n                  'Composure', 'Marking', 'StandingTackle', 'SlidingTackle',\n                  'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\nX=df_sne[skills_ratings]","c7edde76":"from sklearn import (manifold, decomposition)\n\nimport time\n\ntime_start = time.time()\ntsne = manifold.TSNE(n_components=2, verbose=1,perplexity=30, n_iter=1000)\nX_tsne = tsne.fit_transform(X)\n\nprint ('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))","2625454e":"bool_striker= df_sne[\"Position2\"] == 'Forward'\nbool_midfielder= df_sne[\"Position2\"] == 'Midfielder'\nbool_defender= df_sne[\"Position2\"] == 'Defender'\nbool_gk= df_sne[\"Position2\"] == 'GK'\n\nbool_crack=df_sne[\"Overall\"] > 85\n\npalette=['navy','red','#A2D5F2','orange','green','pink']  \ndata=[]\n\nacp_striker =go.Scatter(x=X_tsne[bool_striker,0], y=X_tsne[bool_striker,1],name='Striker',\n                      text=df_sne.loc[bool_striker,'Name'],\n                      opacity=0.9,marker=dict(color=palette[2],size=5),mode='markers')\n\nacp_midfielder =go.Scatter(x=X_tsne[bool_midfielder,0], y=X_tsne[bool_midfielder,1],name='Midfielder',\n                      text=df_sne.loc[bool_midfielder,'Name'],\n                      opacity=0.6,marker=dict(color=palette[1],size=5),mode='markers')\n\nacp_defender =go.Scatter(x=X_tsne[bool_defender,0], y=X_tsne[bool_defender,1],name='Defender',\n                      text=df_sne.loc[bool_defender,'Name'],\n                      opacity=0.7,marker=dict(color=palette[3],size=5),mode='markers')\n\nacp_gk =go.Scatter(x=X_tsne[bool_gk,0], y=X_tsne[bool_gk,1],name='GK',\n                      text=df_sne.loc[bool_gk,'Name'],\n                      opacity=0.4,marker=dict(color=palette[4],size=5),mode='markers')\n\nacp_crack =go.Scatter(x=X_tsne[bool_crack,0], y=X_tsne[bool_crack,1],name='Top player',\n                      text=df_sne.loc[bool_crack,'Name'],textfont=dict(family='sans serif',color='black',size=16),\n                      opacity=0.9,mode='text')\n\ndata=[acp_striker,acp_midfielder,acp_defender,acp_gk,acp_crack]\n\nlayout = go.Layout(title=\"t-SNE - Fifa Players\",titlefont=dict(size=40),\n                autosize=False, width=1100,height=1100)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","82d2bbf5":"n_acp=18000\n\n# We exclude the GK and the weak players\n\ndf_acp=df.loc[:n_acp]\ndf_acp=df_acp[(df_acp[\"Position\"]!='GK')&(df['Overall']>70)]\n\nskills_ratings = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', \n                  'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', \n                  'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', \n                  'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', \n                  'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                  'Marking', 'StandingTackle', 'SlidingTackle']\n\n# We create the perfect player to see where it is located in our visualisation\n\nMachineGunDict={'Name':'MachineGun','Overall':99}\nfor skills in skills_ratings:\n    MachineGunDict[skills]=99\n    \ndf_acp=df_acp.append(MachineGunDict,ignore_index=True)\n\nX=df_acp[skills_ratings]","2007a749":"from sklearn import preprocessing\nstd_scale=preprocessing.StandardScaler().fit(X)\nX_scaled=std_scale.transform(X)\n\nfrom sklearn import decomposition\npca=decomposition.PCA(n_components=2)\npca.fit(X_scaled)\n\nprint (pca.explained_variance_ratio_)\nprint (pca.explained_variance_ratio_.cumsum())\n\nX_projected=pca.transform(X_scaled)\nprint (X_projected.shape)\n\npcs=pca.components_","72a7c370":"#Graph 1\ndata=[]\n\nfor i, (x,y) in enumerate(zip(pcs[0,:],pcs[1,:])):\n    graph=go.Scatter(x=[0,x],y=[0,y],text=X.columns[i],\n                     mode='lines+markers+text',textposition='top left',textfont=dict(family='sans serif',size=15))\n    data.append(graph)\n\nlayout = go.Layout(title=\"ACP - Fifa Skills\",titlefont=dict(size=40),\n            xaxis=dict(title='F1'),\n            yaxis=dict(title='F2'),\n            autosize=False, width=1000,height=1000,\n            showlegend=False)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)\n\n#Graph 2\n\n#Choose your player\nrecherche_joueur=df_acp[\"Name\"]=='M. Sakho'\n\nbool_crack=df_acp[\"Overall\"] > 85\nbool_no_crack=df_acp[\"Overall\"]<86\nbool_machinegun=df_acp[\"Name\"]=='MachineGun'\n\npalette=['navy','red','#A2D5F2','orange','green','pink']  \ndata=[]\n\nacp_crack =go.Scatter(x=X_projected[bool_crack,0], y=X_projected[bool_crack,1],name='Crack',\n                      text=df_acp.loc[bool_crack,'Name'],\n                      textfont=dict(family='sans serif',size=15,color='black'),\n                      opacity=0.9,marker=dict(color=palette[2],size=7),mode='markers+text')\n\nacp_no_crack =go.Scatter(x=X_projected[bool_no_crack,0], y=X_projected[bool_no_crack,1],name='Average player',\n                         text=df_acp.loc[bool_no_crack,'Name'],\n                         opacity=0.6,marker=dict(color=palette[1],size=3),mode='markers')\n\nacp_machinegun =go.Scatter(x=X_projected[bool_machinegun,0], y=X_projected[bool_machinegun,1],name='Perfect player',\n                           textfont=dict(family='sans serif',size=20,color='black'),\n                           opacity=0.6,marker=dict(color=palette[3],size=30),mode='markers+text')\n\n\njoueur_recherche =go.Scatter(x=X_projected[recherche_joueur,0], y=X_projected[recherche_joueur,1],name='Searched player',\n                           text=df_acp.loc[recherche_joueur,'Name'],\n                            textfont=dict(family='sans serif',size=20,color='black'),\n                           opacity=1,marker=dict(color=palette[4],size=40),mode='markers+text')\n\ndata=[acp_no_crack,acp_crack,acp_machinegun,joueur_recherche]\n\nlayout = go.Layout(title=\"ACP - Fifa Players\",titlefont=dict(size=40),\n                xaxis=dict(title='F1'),\n                yaxis=dict(title='F2'),\n                autosize=False, width=1000,height=1000)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","1529a40c":"club_avg_overall=df.groupby(\"Club\")[\"Overall\"].mean().reset_index().sort_values(\"Overall\",ascending=False)\nclub_avg_overall.head()","ad7fe5d3":"teamA='Paris Saint-Germain'\nteamB='Olympique de Marseille'\n\nbool_teamA=df_acp[\"Club\"]==teamA\nbool_teamB=df_acp[\"Club\"]==teamB\n\npalette=['navy','red','#A2D5F2','orange','green','pink','grey']  \ndata=[]\n\nacp_teamA =go.Scatter(x=X_projected[bool_teamA,0], y=X_projected[bool_teamA,1],name=teamA,\n                      text=df_acp.loc[bool_teamA,'Name'],\n                      textfont=dict(family='sans serif',size=20,color='black'),\n                      opacity=0.7,marker=dict(color=palette[0],size=10),mode='markers+text')\n\nacp_teamB =go.Scatter(x=X_projected[bool_teamB,0], y=X_projected[bool_teamB,1],name=teamB,\n                      text=df_acp.loc[bool_teamB,'Name'],\n                      textfont=dict(family='sans serif',size=20,color='black'),\n                      opacity=0.7,marker=dict(color=palette[2],size=10),mode='markers+text')\n\nacp_all =go.Scatter(x=X_projected[:,0], y=X_projected[:,1],name='All',\n                         text=df_acp.loc[:,'Name'],\n                         opacity=0.3,marker=dict(color=palette[6],size=3),mode='markers')\n\n\ndata=[acp_teamA,acp_teamB,acp_all]\n\nlayout = go.Layout(title=\"ACP - {} vs {}\".format(teamA,teamB),titlefont=dict(size=40),\n                xaxis=dict(title='F1'),\n                yaxis=dict(title='F2'),\n                autosize=False, width=1000,height=1000)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","93a5eb6b":"n_kmean=18000\n\n# On exclue les gardiens de but\n\ndf_kmean=df.loc[:n_kmean]\ndf_kmean=df_kmean[(df_kmean[\"Position\"]!='GK')&(df_kmean['Overall']>69)]\n\nskills_ratings = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle']\n\n# On cr\u00e9e le joueur parfait pour savoir o\u00f9 il se situe\n\nMachineGunDict={'Name':'MachineGun','Overall':99}\nfor skills in skills_ratings:\n    MachineGunDict[skills]=99\n    \ndf_kmean=df_kmean.append(MachineGunDict,ignore_index=True)\n\ndf_skills=df_kmean[skills_ratings]\nX=df_skills","e9951dd4":"from sklearn.cluster import KMeans\nfrom sklearn import decomposition\n\n# Nombre de clusters souhait\u00e9s\nn_clust = 5\n\nkm = KMeans(n_clusters=n_clust)\nkm.fit(X)\n\n# R\u00e9cup\u00e9ration des clusters attribu\u00e9s \u00e0 chaque individu\nclusters = km.labels_\n\n# Affichage du clustering par projection des individus sur le premier plan factoriel\npca = decomposition.PCA(n_components=2).fit(X)\nX_projected = pca.transform(X)","d3aa0b97":"data=[]\nbool_crack=df_kmean[\"Overall\"] > 85\nbool_no_crack=df_kmean[\"Overall\"]<86\n\nkmean_clusters = go.Scatter(x=X_projected[:,0], y=X_projected[:,1],\n                           mode='markers',\n                           marker=dict(\n                                size=5,\n                                color = clusters.astype(np.float), #set color equal to a variable\n                                colorscale='Portland',\n                                showscale=False)\n                           )\n\nacp_crack =go.Scatter(x=X_projected[bool_crack,0], y=X_projected[bool_crack,1],name='Top players',\n                      text=df_kmean.loc[bool_crack,'Name'],\n                      textfont=dict(family='sans serif',size=10,color='black'),\n                      opacity=0.9,mode='text')\n\ndata=[kmean_clusters,acp_crack]\n\nlayout = go.Layout(title=\"ACP + Clustering \",titlefont=dict(size=40),\n                xaxis=dict(title='F1'),\n                yaxis=dict(title='F2'),\n                autosize=False, width=1000,height=1000)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","2ad43037":"You can also compare two teams with the following command and see the profile of players they recruited","ff42b0cf":"# 1 - Data preparation","48b2d284":"# 3 - ACP (excluiding Goalkeepers)","cb55ade6":"In order to simplify the analysis, we create a new column with 4 categories of positions:","a0c211d2":"# 4 - Clustering with KMeans","f8f551e3":",,\n","625896dd":"Let's use a bit of Machine Learning to make this notebook look more intelligent.","ef38d86b":"As a conclusion, we see that it is really easy to separarte field players from goalkeepers (which is logical as the skills are utterly different). The visual clustering of the field players is not completely satisfying (the clusters are not compltely disconnected) but it is logical as we have ambivalent players that bridge the gap between defense,midfield & attack.","86b87f3e":"# 2 - t-SNE","a06415bc":"We display the best players per position.\nNB: the following command doesn't enable to display several players at the same position which have the same 'Overall' rating.","ce3318b0":"You can play with the following command by choosing your favorite player and displaying it.\nI personnaly chose Mamad' Sakho who has serious defending skills and a suspicious ball control, let's see where he is located:"}}