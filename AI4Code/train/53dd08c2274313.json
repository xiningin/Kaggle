{"cell_type":{"0c7bce6f":"code","b4da2d7b":"code","8bbb662a":"code","1f617f97":"code","a773aa4e":"code","69ef32f4":"code","248be82d":"code","2d81c566":"code","8be32039":"code","741e6449":"code","111a5c44":"code","abf9f09b":"code","c7d31b83":"code","4ca92889":"code","b2f89d0a":"code","9a92630a":"code","fbef2ec9":"code","a87af79c":"code","3c6ce2df":"code","ed030ef0":"code","5392f0c7":"code","95e8e8e1":"code","b260af5e":"code","d57b647a":"code","ad8579ab":"code","f0f476f4":"code","aea19364":"code","5311a45a":"code","2391f0c3":"code","f82a9ef8":"code","27c3b622":"code","d558bae7":"code","f80d3e11":"code","1b735cc8":"code","18306125":"code","1e1987a8":"code","16bc955f":"code","ce651741":"code","5d2fa607":"code","cc64db44":"code","8a359e03":"markdown","e12a0393":"markdown","ff73977d":"markdown","72c4051a":"markdown","a00a1d6e":"markdown","0943759f":"markdown","33705ee9":"markdown"},"source":{"0c7bce6f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b4da2d7b":"# models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","8bbb662a":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","1f617f97":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","a773aa4e":"print(train_data.shape)\nprint(test_data.shape)","69ef32f4":"train_data.info()","248be82d":"train_data.describe()","2d81c566":"train_data.describe(include=['O'])","8be32039":"test_data.describe()","741e6449":"test_data.describe(include=['O'])","111a5c44":"sns.barplot(x='Pclass', y='Survived', data=train_data, ci=None)\n# Pclass = 1 is more likely to survive","abf9f09b":"sns.barplot(x='Sex', y='Survived', data=train_data, ci=None)\n# Females are much more likely to survive","c7d31b83":"sns.countplot(x=train_data['Sex'], hue=train_data['Survived'])","4ca92889":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(f\"{round(rate_women*100, 1)}% of women survived.\")","b2f89d0a":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(f\"{round(rate_men*100, 1)}% of men survived.\")","9a92630a":"sns.catplot(x='Pclass', hue='Sex', col='Survived',\n                data=train_data, kind='count',\n                height=4, aspect=.7);","fbef2ec9":"sns.histplot(x='Age', hue='Survived', data=train_data, stat='percent', multiple='dodge', shrink=0.8)\n# infants (<= 4) had a high survival rate\n# oldest passengers (age ~ 80) survived\n# the largest number of 15-25 year olds did not survive","a87af79c":"sns.histplot(x='Age', hue='Survived', data=train_data, bins=[0, 10, 20, 30, 40, 65, 90],\n             stat='percent', multiple='dodge', shrink=0.8)","3c6ce2df":"sns.histplot(x=np.clip(train_data['Fare'], a_min = 0, a_max=60), hue=train_data['Survived'], \n                  stat='percent', multiple='dodge', shrink=.8)\n# high fares had better survival","ed030ef0":"sns.catplot(x='SibSp', hue='Sex', col='Survived',\n                data=train_data, kind='count',\n                height=4, aspect=.7);","5392f0c7":"sns.displot(train_data, x='SibSp', hue='Survived', multiple='dodge', discrete=True, shrink=0.8)\n# people who don't travel alone seem to have better survival rates","95e8e8e1":"sns.displot(train_data, x='Parch', hue='Survived', multiple='dodge', discrete=True, shrink=0.8)\n# people who don't travel alone seem to have better survival rates","b260af5e":"sns.barplot(x=train_data['Cabin'].notna(), y=train_data['Survived'], ci=None)\n# People with cabins are much more likely to survive","d57b647a":"sns.countplot(x='Embarked', data=train_data)","ad8579ab":"sns.barplot(x='Embarked', y='Survived', data=train_data, ci=None)\n# port of embarkation seems to correlate with survival rates","f0f476f4":"sns.catplot(x='Embarked', hue='Pclass', col='Survived',\n                data=train_data, kind='count',\n                height=4, aspect=.7);","aea19364":"X_train = train_data.drop(['Survived', 'PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin'], axis=1)\n\n# fill missing embarked values with the most common port\nX_train['Embarked'].fillna(X_train['Embarked'].mode().iloc[0], inplace=True)","5311a45a":"# we will fill NaN age and  values with the median age\nX_train['Age'] = train_data['Age'].fillna(train_data['Age'].median())\n\n# Binning Age\nbins = [0, 10, 20, 30, 40, 65, 80]\nX_train['Age'] = pd.cut(X_train['Age'], bins)","2391f0c3":"#Alone Status\nX_train['Alone'] = True\nfilt = (train_data['SibSp'] > 0) | (train_data['Parch'] > 0)\nX_train.loc[filt, 'Alone'] = False","f82a9ef8":"# we will fill NaN fare values with the median fare\nX_train['Fare'] = train_data['Fare'].fillna(train_data['Fare'].median())\n\n# Binning Fare\nbins = [-0.1, 7, 14, 31, 50, 520]\nX_train['Fare'] = pd.cut(X_train['Fare'], bins)","27c3b622":"#Cabin Status\nX_train['Cabin'] = False\nfilt = train_data['Cabin'].notna()\nX_train.loc[filt, 'Cabin'] = True","d558bae7":"X_train.info()","f80d3e11":"y_train = train_data[\"Survived\"]","1b735cc8":"X_test = test_data.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin'], axis=1)\nX_test['Embarked'].fillna(X_test['Embarked'].mode().iloc[0], inplace=True)\nbins = [0, 10, 20, 30, 65, 90]\nX_test['Age'] = pd.cut(test_data['Age'], bins)\nX_test['Alone'] = True\nfilt = (test_data['SibSp'] > 0) | (test_data['Parch'] > 0)\nX_test.loc[filt, 'Alone'] = False\nbins = [0, 10, 20, 30, 40, 50, 60]\nX_test['Fare'] = pd.cut(test_data['Fare'], bins)\nX_test['Cabin'] = False\nfilt = test_data['Cabin'].notna()\nX_test.loc[filt, 'Cabin'] = True\nX_test","18306125":"def feature_engineering(data, train=True):\n    \"\"\"Perform feature engineering in the dataset.\n    Returns: X, y\"\"\"\n    \n    X = data[['Pclass', 'Sex', 'Embarked']].copy()\n    \n    if train:\n        # fill missing embarked values with the most common port\n        X['Embarked'].fillna(X['Embarked'].mode().iloc[0], inplace=True)\n    \n    # Age\n    if train:\n        X['Age'] = data['Age'].fillna(data['Age'].median())  # fill missing values with median\n    else:\n        X['Age'] = data['Age']\n    X['Age'] = pd.cut(X['Age'], bins=[0, 10, 20, 30, 40, 65, 80])  # binning\n    \n    #Alone Status\n    X['Alone'] = True\n    filt = (data['SibSp'] > 0) | (data['Parch'] > 0)\n    X.loc[filt, 'Alone'] = False\n    \n    # Fare\n    if train:\n        # we will fill NaN fare values with the median fare\n        X['Fare'] = data['Fare'].fillna(data['Fare'].median())\n    else:\n        X['Fare'] = data['Fare']\n    X['Fare'] = pd.cut(X['Fare'], bins=[-0.1, 7, 14, 31, 50, 520])  # binning\n    \n    #Cabin Status\n    X['Cabin'] = False\n    filt = data['Cabin'].notna()\n    X.loc[filt, 'Cabin'] = True\n    \n    X = pd.get_dummies(X)\n    \n    return X","1e1987a8":"X_train = feature_engineering(train_data)\ny_train = train_data['Survived']","16bc955f":"X_test = feature_engineering(test_data, train=False)","ce651741":"model = RandomForestClassifier(n_estimators=100, max_depth=5)\nmodel.fit(X_train, y_train)","5d2fa607":"predictions = model.predict(X_test)","cc64db44":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8a359e03":"## Decision Tree Model","e12a0393":"## Import Libraries","ff73977d":"## Load the Dataset","72c4051a":"Finding out the relationship of predictor variables with the target variables:","a00a1d6e":"We'll be using the ticket class, the sex, (binned) age, alone status (if passenger travelled alone, obtained from \\\ncombining the sibsp and parch), the (binned) fare, if the passenger had a cabin and the embarkation port as features.","0943759f":"## Prepare the Data","33705ee9":"## Explore the Data"}}