{"cell_type":{"50b0b450":"code","6fd2711a":"code","2dc05950":"code","981d3103":"code","173d7ae4":"code","0c90d2e3":"code","c6e4b4b6":"code","8bc1a5bd":"code","78ef1cd6":"code","37c31e02":"code","a3e36859":"code","5b25f03d":"code","fef432c2":"code","8e2e7e16":"code","edb10f4c":"code","5622df0e":"code","9f64476d":"code","3488ac6b":"code","f02e121f":"code","a7bca781":"code","c71c456b":"code","902df2e6":"code","ab3ceb78":"code","9c18b988":"code","68707bd0":"code","24f057ea":"code","2c74561e":"code","6bfc0254":"code","36cdf580":"code","a3dda045":"code","1a4c3986":"code","881fac6a":"code","fb5272c7":"code","dcfd9c7b":"code","b4ae408a":"code","86f7035c":"code","4786469d":"code","22ca7d3b":"code","02b05d44":"code","1322c659":"code","cc68e9db":"code","181da5e6":"code","6d2bf019":"code","d0dffe7c":"code","d4d3f000":"code","448d0ad9":"code","a338e2f3":"code","a403513e":"code","6ea48f09":"code","725cbabd":"code","4ef3e907":"code","29d4ccd3":"markdown","46791144":"markdown","b7ed95b1":"markdown","814f039c":"markdown","869537b3":"markdown","2d7a3fa2":"markdown","7d581735":"markdown","080c1f04":"markdown","a83659e6":"markdown","dd6f542d":"markdown","afa9f5d2":"markdown","93bfb218":"markdown","13a81aa2":"markdown","4d91e042":"markdown","4bf81350":"markdown","5791187e":"markdown","0d85170a":"markdown","5defd39d":"markdown"},"source":{"50b0b450":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fd2711a":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import f1_score\n\nimport warnings\nwarnings.filterwarnings(action = 'ignore')","2dc05950":"train = pd.read_csv('..\/input\/predicting-employee-attrition\/train_MpHjUjU.csv')\ntest = pd.read_csv('..\/input\/predicting-employee-attrition\/test_hXY9mYw.csv')\nsample = pd.read_csv('..\/input\/predicting-employee-attrition\/sample_submission_znWiLZ4.csv')","981d3103":"train.head()","173d7ae4":"test.head()","0c90d2e3":"sample.head()","c6e4b4b6":"train.shape, test.shape","8bc1a5bd":"train.isnull().sum()","78ef1cd6":"train.info()","37c31e02":"new_train = train.drop_duplicates(subset='Emp_ID', keep='last', ignore_index=True)","a3e36859":"new_train.head()","5b25f03d":"test = pd.merge(test, new_train, how='left',on='Emp_ID')","fef432c2":"test.head()","8e2e7e16":"train['Target'] = np.where(train['LastWorkingDate'].isnull(), 0, 1)","edb10f4c":"train.head()","5622df0e":"test['Emp_ID'].unique()","9f64476d":"df = train[train['Emp_ID'].isin([394,  173, 1090,  840,  308, 1864, 1606,  954, 2422, 1841, 1484,\n       2727, 1031, 2137, 2568, 1745, 2668, 2617, 2070, 1446, 1043, 2561,\n        945, 2517, 1039, 2594,  115,  870,  329,  973, 1892, 2740, 1093,\n        693, 1817, 1753, 2420, 1655, 1573, 2365, 1623, 2625, 1335,  450,\n       2087, 2576, 2771, 1549, 1657, 1957, 1662, 1588, 2615, 2027, 2714,\n        556,  377,  605,  791, 1147,   68, 2784, 1181, 1782, 2299, 1238,\n        402, 1109,  990,  425,  569, 2454,  926,  391, 2110, 1875,  117,\n       1714, 1106,  422,  150, 2179, 2684,  762,  718, 1694, 1051, 2104,\n       1225,   63,  275, 1733, 2541,  140, 1037,  407, 1770,  946,  604,\n        893, 2200, 2114, 1243, 2076, 2597,   60,  662,  765,  199, 1526,\n       1486, 1179, 1161, 2259, 1191, 1811, 1510,  434, 1918,  753,   25,\n       1414, 1426,  716, 2283, 1840, 1678, 1859, 2381, 2008, 1050,  581,\n       2289,  713, 1924, 2257, 1504, 1670, 2551, 1874,   26, 2308, 1259,\n         77,  568, 1370,  704, 2494, 1077,  592, 2390,  832,  904, 2567,\n       1274, 2543,  296, 1374, 1852,  252,  888, 1234,  112, 2399, 1265,\n       2166,  320, 1968, 2690, 2228,   56,  723,  560,  580, 1679, 1783,\n        371, 2546, 2505, 2224, 1271,  213, 1936, 1642, 1213,   78,  368,\n        943, 1165, 1432, 2223, 2407, 1316, 1139,  789, 2552, 2670, 2028,\n         67, 2055, 2198, 2272, 2210, 2398,  272, 2754, 2473, 1327,  359,\n       2160, 1563, 1206, 1858,  516,   41, 1382, 1405, 2730,  772,   54,\n       1222,  697,  453, 1334,  992,  682,  766, 1283, 2148, 2729, 1668,\n       1290, 1013,  906, 2357,   87, 2533, 1532, 1977,  565, 1598,  400,\n       2109,  168,  956, 2417, 1276,  734,  550,  532, 2708, 2050,  358,\n       1177, 1267, 1982,  933,  538, 1057, 2453,  188, 2241,  552, 1119,\n       2382, 1284, 2480, 1658,  582, 2258,  444, 1633, 1958, 2334, 2633,\n        388,  537, 1579, 2193, 1263, 2318,  351,  835,  493,  341,  191,\n       1929,  991,  828,  234, 1869,  570, 2012,  323, 1249, 1989, 1830,\n       2496,  446, 1475, 1972,  639, 1888,  710, 2639, 2014,  848, 2781,\n       2199,  357,  494, 1178, 2611, 2728, 1149,  521,  375, 2763,  192,\n        658,  109, 2052, 1752, 2483, 2386, 2205, 2347, 2569,  644, 2449,\n       1230, 1652,  698, 1200, 1078, 1592,  210, 1144, 1980, 2096,  752,\n        258, 2610, 2217,  362,  619, 1527,  999,  431, 1793,  501,  483,\n       1605, 1836, 2464, 1914,  271, 1805, 2446, 1741, 2078,   45,  721,\n        265,  806,  587, 1884,  617, 1070, 2082,  137, 2788, 1447,  960,\n       2208,  865,  472,  441, 2699,  740, 1837,  782, 2715, 2344, 2169,\n        889,  233, 2497, 1495,  509,  981,  276,   31, 2511, 1801,  595,\n       2178,  324,   52, 1599, 1393,  643, 1505,  129, 1956, 2276, 1419,\n       2664, 1372,  785, 1097, 1831,  409,  289,  673,  225, 1776, 1345,\n       2322,  648, 1399, 2761, 1231,  571, 1962, 1594, 2705, 2498, 2090,\n          6, 1073, 1433, 2439, 1666, 1118, 1087, 1871,  345,  597, 1214,\n       2587, 1099,  959, 2672, 1676,  583, 1032, 1341, 2089, 1764, 1116,\n       1637, 1514, 2423,  458,  376, 1169, 2686, 2254, 1054,  524,  122,\n       2752,  988, 1015,  218, 2345,   39,  737, 2424, 2188, 1428, 2646,\n       2331,  642, 2135, 1198,  559,  875,  982, 1114,  243,  548, 1159,\n       1489, 2566, 2097,  678,  712,  681,  801, 1981,  273,  547, 1468,\n       1325, 1518,  902, 1712, 2311,  237, 1268, 2537, 2378,  104,  510,\n       1828, 2277, 2139, 1401,  620,  348, 2230,  531, 1707, 1696, 2565,\n        936, 1056, 2440, 1724, 1815, 2202, 1634, 2043, 1807, 2654,  135,\n       1066, 1586,  546,  594,  449,  415, 2058, 2418,  331, 2500, 2343,\n       1965,  114, 1416,  591, 2426, 1125, 1438, 1322, 1286, 1434,  867,\n       2645, 2640,  385, 1725,  427,  499, 1381, 1550, 1804,  543,   80,\n       1710, 1190, 1115,   97, 1019,  462, 1873, 2764, 2775, 2260,   47,\n       1014, 1622,  206, 1199,   85, 2018,  281,  263,  403, 2395, 1294,\n        134,  646,  885, 1462, 2153,   14,   72,  382, 2722,  754, 1766,\n        420,  294, 1839, 2032,  459,  963, 1775, 1999,  366,  793, 1515,\n       2191, 2538, 1723,  202, 1626, 1153, 1379,  769,  417,  498, 1802,\n        181, 2307, 1618,    2, 2279, 1351,  283, 2469,  650, 2627, 2348,\n       2515,  412,  751, 2678, 1201, 1529,  457, 1026,  814,  335, 1791,\n       1625, 1501,  763, 2635, 1107, 2411,  534,  952, 1412,   62, 2770,\n       2140, 2778, 2428, 2571, 1324, 2239, 1227, 1448, 2290, 1209, 2550,\n       1358,  540,  306,  810, 2631, 1740, 2030,  834, 1632, 2298,   11,\n       1521, 1650, 1273, 1619, 1157,  398, 1568,  148,  664,  310,  825,\n       1955, 1812, 1194, 1880,  599,  816,  508,  309, 1328, 1162,  733,\n       2039,  378, 2360,  824, 1708,  511, 2060,  802, 1925,  297,  715,\n       2233, 1195, 1145,  748, 1971, 1029,  288, 2521,  575, 2261,  561,\n        274,  913,  622,  205, 1210,  711, 2088, 2522, 1188, 1111, 2753,\n        638,  440, 2660, 2487, 2196, 2725, 2314,  819, 2189, 2251, 2134,\n       2255,  448, 1644,  624])==False]","3488ac6b":"df.shape, test.shape","f02e121f":"df['Target'].value_counts()","a7bca781":"df[df['LastWorkingDate'].isnull() == False]","c71c456b":"df['Gender'].loc[df['LastWorkingDate'].isnull() == False].value_counts()","902df2e6":"df['Education_Level'].loc[df['LastWorkingDate'].isnull() == False].value_counts()","ab3ceb78":"df['Quarterly Rating'].loc[df['LastWorkingDate'].isnull() == False].value_counts()","9c18b988":"df['Joining Designation'].loc[df['LastWorkingDate'].isnull() == False].value_counts()","68707bd0":"df['Designation'].loc[df['LastWorkingDate'].isnull() == False].value_counts()","24f057ea":"df['Total Business Value'].loc[df['LastWorkingDate'].isnull() == False].value_counts()","2c74561e":"df['MMM-YY'] = pd.to_datetime(df['MMM-YY']) \ndf['Dateofjoining'] = pd.to_datetime(df['Dateofjoining'])\n\ntest['MMM-YY'] = pd.to_datetime(test['MMM-YY']) \ntest['Dateofjoining'] = pd.to_datetime(test['Dateofjoining'])","6bfc0254":"df.info()","36cdf580":"df['experience'] = df['MMM-YY'] - df['Dateofjoining']\n\ntest['experience'] = test['MMM-YY'] - test['Dateofjoining']","a3dda045":"df.head()","1a4c3986":"df.info()","881fac6a":"df['experience'] = df['experience'].astype(str)\n\ntest['experience'] = test['experience'].astype(str)","fb5272c7":"df.info()","dcfd9c7b":"df['experience_in_days'] = df.experience.str.split(' ').apply(lambda x: x[0])\n\ntest['experience_in_days'] = test.experience.str.split(' ').apply(lambda x: x[0])","b4ae408a":"df.head()","86f7035c":"df.info()","4786469d":"df['experience_in_days'] = df['experience_in_days'].astype(int)\n\ntest['experience_in_days'] = test['experience_in_days'].astype(int)","22ca7d3b":"df.info()","02b05d44":"df.shape, test.shape","1322c659":"df.drop(columns = ['experience','LastWorkingDate','Dateofjoining','MMM-YY'], axis=1, inplace=True)\n\ntest.drop(columns = ['experience','LastWorkingDate','Dateofjoining','MMM-YY'], axis=1, inplace=True)","cc68e9db":"df.shape, test.shape","181da5e6":"df.select_dtypes(include='object').columns","6d2bf019":"test.select_dtypes(include='object').columns","d0dffe7c":"df = pd.get_dummies(df, columns=['Gender', 'City', 'Education_Level'])\ntest = pd.get_dummies(test, columns=['Gender', 'City', 'Education_Level'])","d4d3f000":"X = df.drop(columns = ['Target'], axis = 1)\ny = df['Target']","448d0ad9":"scaler = MinMaxScaler()\nX = scaler.fit_transform(X)\ntest = scaler.transform(test)","a338e2f3":"X_train, X_valid, y_train, y_valid = train_test_split(X,y, test_size=0.2, random_state=42, stratify=y)","a403513e":"model = LogisticRegression(class_weight='balanced')\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_train)\nscore_train= f1_score(y_train,y_pred)\n\n\ny_pred1 = model.predict(X_valid)\nscore_test= f1_score(y_valid,y_pred1)\n\n\nprint('Train F1 score:',score_train)\nprint('Valid F1 score:',score_test)","6ea48f09":"predictions = model.predict(test)\npredictions","725cbabd":"sample['Target'] = predictions","4ef3e907":"sample['Target'].value_counts()","29d4ccd3":"### Scaling","46791144":"Following things has been observed about the employee who has left the organisation:-\n* Total business value of the employee is 0.\n* Quarterly rating has been decreased to 1 or has been 1 from a long time.\n* Joining designation and designation at the time of leaving the company was same. That is employee hasn't got the promotion.\n* Mostly employee with designation 1 and 2 has left the organisation the most.\n* Male employees has more attrition level as compared to female employees.","b7ed95b1":"### Importing relevant libraries","814f039c":"### Understanding the data","869537b3":"### Dropping variables","2d7a3fa2":"### Reading the data","7d581735":"### Creating test dataset","080c1f04":"### Model Building","a83659e6":"### Assigning Target Variable","dd6f542d":"### Dropping rows of test data from training dataset","afa9f5d2":"## Rank : 51                                                        \n\n## Score : 0.7106616939","93bfb218":"### Feature Engineering","13a81aa2":"### Exploratory Data Analysis","4d91e042":"### Dummy Encoding","4bf81350":"### Prediction on test data","5791187e":"### Submission","0d85170a":"### Creating the target variable","5defd39d":"### Train test split"}}