{"cell_type":{"918d4e42":"code","3d8ff636":"code","9e817bce":"code","f6b57183":"code","c8593e21":"code","c32824b4":"code","3f191577":"code","ae77d835":"code","4ad2469d":"code","81413530":"code","cc0a9590":"code","356203c6":"code","7cc24098":"code","baf51a82":"code","ac8bee87":"code","7bd525be":"code","8306d85a":"code","b11381ee":"code","520f5edb":"code","415a0f14":"code","d12f4f22":"code","470480cf":"code","7e16a78d":"code","42b71e95":"code","b2673db6":"code","0d558881":"code","8b68841c":"code","8ce522a6":"code","e4386018":"code","357ba3c9":"code","5ca0d4c5":"code","51178dfc":"code","a40ec8ce":"markdown","70424e85":"markdown","9d685315":"markdown","60c9cb9d":"markdown","808d40dc":"markdown","f377322a":"markdown","7aa82b10":"markdown","35c7c504":"markdown","de7061b2":"markdown","afece476":"markdown","3b0215fd":"markdown"},"source":{"918d4e42":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3d8ff636":"!pip install catboost","9e817bce":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","f6b57183":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\ntest_ids = test.Id # Storing test Set ID for Final Submission File","c8593e21":"train.shape","c32824b4":"test.shape","3f191577":"train.head()","ae77d835":"# Merging The Data for uniform preprocessing\nall_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","4ad2469d":"all_null_columns = all_data.columns[all_data.isna().any()].tolist()\nall_categoric_cols = all_data.select_dtypes(include=['object']).columns.to_list()\nall_numeric_cols = all_data.select_dtypes(exclude=['object']).columns.to_list()\n\n# List of Numeric Columns with Null Values\nnull_numeric_columns = []\nfor col in all_numeric_cols:\n  if col in all_null_columns:\n    null_numeric_columns.append(col)\n\n# List of Categoric Columns with Null Values\nnull_categoric_columns = []\nfor col in all_categoric_cols:\n  if col in all_null_columns:\n    null_categoric_columns.append(col)","81413530":"def fill_null_values(cols, fill_type):\n  for col in cols:\n    if fill_type == \"mode\":\n      all_data[col].fillna(all_data[col].mode()[0], inplace=True)\n    elif fill_type == \"median\":\n      all_data[col].fillna(all_data[col].median(), inplace=True)\n    elif fill_type == \"mean\":\n      all_data[col].fillna(all_data[col].mean(), inplace=True)","cc0a9590":"all_data[null_numeric_columns].head()","356203c6":"all_data[null_numeric_columns].describe()","7cc24098":"all_data[null_numeric_columns].isnull().sum()","baf51a82":"# Fill Null values by mode of the respective column\nfill_null_values(\n    cols =[\"BsmtFullBath\", \"BsmtHalfBath\"],\n    fill_type = \"mode\"\n)\n\n# Fill Null values by median of the respective column\nfill_null_values(\n    cols =[\"GarageCars\"],\n    fill_type = \"median\"\n)\n\n# Fill Null values by mean of the respective column\nfill_null_values(\n    cols = [\"LotFrontage\", \"MasVnrArea\", \"BsmtFinSF1\", \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"GarageYrBlt\", \"GarageArea\"], \n    fill_type = \"mean\")","ac8bee87":"all_data[null_categoric_columns].head()","7bd525be":"categoric_null_data = all_data[null_categoric_columns].isnull().sum()\ncategoric_null_data","8306d85a":"all_data.drop(columns = categoric_null_data[categoric_null_data > 50].index, axis=1, inplace=True)","b11381ee":"# This Gives the List of Remaining Columns with Null Values -- DataType of the Remaining Columns is Object i.e. Categorical\nall_null_columns = all_data.columns[all_data.isna().any()].tolist()\nall_null_columns","520f5edb":"# Filling the null values in Categorical Values with the mode of the respective columns\nfill_null_values(\n    cols = all_null_columns,\n    fill_type = \"mode\"\n)","415a0f14":"# No Null Columns Left\nall_data.isna().any().sum()","d12f4f22":"all_data = pd.get_dummies(all_data) # One Hot Encoding Categorical Columns\nall_categoric_cols = all_data.select_dtypes(include = ['object']).columns.to_list() # Droping Original Columns after encoding","470480cf":"print(\"Number of Columns : \", len(all_data.columns))","7e16a78d":"X = all_data.iloc[:train.shape[0], :]\ny = train.iloc[:, -1].tolist()\n\ntest = all_data.iloc[train.shape[0]:, :]","42b71e95":"# Setup cross validation folds\nfrom sklearn.model_selection import KFold, cross_val_score\nkf = KFold(n_splits=12, random_state=42, shuffle=True)","b2673db6":"# Define error metrics\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)","0d558881":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","8b68841c":"from lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.metrics import r2_score\n\nMLA = [\n      # Light Gradient Boosting Regressor\n      LGBMRegressor(objective='regression'),\n\n      # XGBoost Regressor\n      XGBRegressor(objective='reg:squarederror'),\n\n      # Gradient Boosting Regressor\n      GradientBoostingRegressor(),\n\n      # Random Forest Regressor\n      RandomForestRegressor(),\n       \n      # CatBoost Regressor\n      CatBoostRegressor()\n]","8ce522a6":"row_index = 0\nMLA_compare = pd.DataFrame()\n\nfor classifier in MLA:\n  classifier.fit(X_train, y_train)\n  y_pred = classifier.predict(X_test)\n\n  k_fold_accuracy = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10, scoring=\"r2\").mean()*100\n\n  MLA_name = classifier.__class__.__name__\n  MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n  MLA_compare.loc[row_index, 'Normal R2 Score'] = r2_score(y_test, y_pred)\n  MLA_compare.loc[row_index, 'K-Fold R2 Score'] = k_fold_accuracy\n\n  row_index+=1","e4386018":"MLA_compare = MLA_compare.sort_values(\"K-Fold R2 Score\", ascending=False).reset_index(drop=True)\nMLA_compare","357ba3c9":"cbr = CatBoostRegressor()\ncbr.fit(X_train, y_train)\n\ny_pred = cbr.predict(X_test)\nr2_score(y_test, y_pred)","5ca0d4c5":"test_data_pred = cbr.predict(test)","51178dfc":"output = pd.DataFrame({'Id': test_ids, 'SalePrice': test_data_pred})\noutput.to_csv('submission.csv', index=False)","a40ec8ce":"## Handling Null Values in Categoric Columns","70424e85":"# Importing Libraries","9d685315":"# Getting Data Ready","60c9cb9d":"# Saving Prediction for Submission","808d40dc":"## Setup Models","f377322a":"## Encoding Categorical Columns","7aa82b10":"# Train the Model","35c7c504":"# Preparing Data for Model","de7061b2":"# Preprocessing","afece476":"# CatBoostRegressor Model","3b0215fd":"## Handling Null Values in Numeric Columns"}}