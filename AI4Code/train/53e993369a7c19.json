{"cell_type":{"314acf05":"code","917897f3":"code","69380a98":"code","2b015dbe":"code","fe2435e7":"code","e6273e1b":"code","9774faf0":"code","80de1d56":"code","3819f8f0":"code","70a5a3ba":"code","1f2d083c":"code","aa953968":"code","2cdd79f6":"code","f0d4bb65":"code","5ca1275c":"code","7693b45e":"code","89dbf8bc":"code","84c4795a":"code","1aaee257":"code","4f785f37":"code","51d17ace":"code","24638f81":"code","a9ef5749":"code","0c53a209":"code","16e0e430":"code","37868bc3":"code","c571833a":"code","7e6b9b36":"code","da2287dc":"code","9bbb0e38":"code","91f59954":"code","0d52995f":"code","a81289d8":"code","25c766a6":"code","c9db862f":"code","fdc6c4d7":"code","64c1d381":"code","aa4068e7":"code","6e47b94d":"code","a06e3008":"code","d6c5a2b8":"code","cf225d81":"code","10f391db":"code","b317a40e":"code","fd4284a5":"code","91d6b679":"code","de9de19a":"code","f254f7af":"code","7b373748":"code","eaaa3529":"code","c7d943da":"code","241330e5":"code","4e6564f4":"code","0a5f8e36":"code","1623aed4":"code","e04f55c4":"code","91b054fe":"code","24bd10a9":"code","75124509":"code","1d959daf":"code","aba29332":"code","c1e008fa":"code","06678ccc":"code","103e2611":"code","69dbfde8":"code","6313d6c0":"code","ff2183b7":"code","45e3a7d2":"code","0e84de4c":"code","dcabd41b":"code","260a5992":"code","5de67b5c":"code","3ff53085":"code","6ebfff35":"code","4737aa0f":"code","db6b25d2":"code","ddd5711f":"code","eb721a71":"code","b60066de":"code","5c686cb0":"code","3952db7f":"code","b415e161":"code","e861fe8c":"code","1015f97d":"code","8340593e":"code","7cb3d410":"code","d56f4f07":"code","997b736d":"code","c69a6bda":"code","722585a6":"code","9b56f68a":"code","6478db92":"code","5b4d945b":"code","34c45950":"code","0673cee6":"code","83be54d5":"code","e16e5e24":"code","548a3acb":"code","26bfd706":"code","62dc5555":"code","48574713":"code","cbd52fa2":"code","18d270ba":"code","804de6f8":"code","4fe36569":"code","9d6cf4fa":"code","4aafb2bc":"code","5197853d":"markdown","7dc9ce1c":"markdown","fe8cb97e":"markdown","de76fe56":"markdown","f27f991c":"markdown","cf71b538":"markdown","dfbb7fc0":"markdown","3daffbc4":"markdown","af376cd9":"markdown","a57d8626":"markdown","2dccea40":"markdown","7d1c4067":"markdown","1296d243":"markdown","75135740":"markdown","94908a11":"markdown","3c3768ad":"markdown","845c3912":"markdown","0ee812cd":"markdown","699389bb":"markdown","752bc519":"markdown","24685ff1":"markdown","213838b2":"markdown","a7709b12":"markdown","acbdd640":"markdown","a95bcb67":"markdown","f044914c":"markdown","4ec70235":"markdown","e66a8282":"markdown","e90cf4ca":"markdown","48e3658f":"markdown","2837e2bd":"markdown","67940256":"markdown","e651d0f0":"markdown","a7e2fcf7":"markdown","1af09869":"markdown","97cc29f5":"markdown","d579c66c":"markdown","9869d86c":"markdown"},"source":{"314acf05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","917897f3":"data=pd.read_csv(\"..\/input\/2017.csv\")","69380a98":"data.info()","2b015dbe":"data.describe()","fe2435e7":"data.corr()","e6273e1b":"f,ax=plt.subplots(figsize=(15,15))\nsb.heatmap(data.corr(),annot=True,linewidths=.5,fmt=\".2f\",ax=ax)\nplt.show()","9774faf0":"data.head(5)","80de1d56":"data.tail(10)","3819f8f0":"turkey=data[data.Country==\"Turkey\"]","70a5a3ba":"turkey","1f2d083c":"data.columns","aa953968":"data[\"Happiness.Score\"].plot(kind='line',label='Happiness.Score',color=\"Blue\",linewidth=1,grid=True,linestyle=\":\",alpha=1)\ndata.Generosity.plot(label=\"Generosity\",color=\"g\",linewidth=1,grid=True,linestyle=\"-.\",alpha=0.5)\nplt.legend(loc='upper right')     \nplt.xlabel('x axis')            \nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","2cdd79f6":"data.plot(kind=\"Scatter\",x=\"Happiness.Score\",y=\"Generosity\",alpha=1,grid=True,color=\"b\")\nplt.xlabel(\"Happiness.Score\")\nplt.ylabel(\"Generosity\")\nplt.title(\"Scatter Plot\")\nplt.show()","f0d4bb65":"data.Freedom.plot(kind=\"hist\",bins=50,figsize=(12,12))\nplt.show()","5ca1275c":"dictionary={'turkey':\"istnabul\",'spain':'madrid','usa':\"texas\"}\nprint(dictionary.keys())\nprint(dictionary.values())\nprint(dictionary.items())","7693b45e":"dictionary[\"turkey\"]=\"ankara\" #update \nprint(dictionary)\ndictionary[\"germany\"]=\"berlin\"\nprint(dictionary)\ndel dictionary[\"spain\"]\nprint(dictionary)\nprint('france' in dictionary) \ndictionary.clear()                 \nprint(dictionary)","89dbf8bc":"del dictionary\n\ntry:\n    print(dictionary)\nexcept:\n    pass","84c4795a":"series=data[\"Country\"]\nprint(type(series))\ndataframe=data[[\"Country\"]]\nprint(type(dataframe))","1aaee257":"print(3<2)\nprint(5!=6)\nprint(True and False)\nprint(True or False or False)","4f785f37":"x=data[\"Happiness.Rank\"] <=15\ndata[x]","51d17ace":"data[np.logical_and(data[\"Happiness.Rank\"]<16,data[\"Economy..GDP.per.Capita.\"]>1.5)]","24638f81":"data[(data[\"Happiness.Rank\"]<16) & (data[\"Economy..GDP.per.Capita.\"]>1.5)]","a9ef5749":"i=0\nwhile i<5:\n    print(i)\n    i+=1\nprint(i)\n","0c53a209":"lis=[1,3,2,3,4,5]\nfor i in lis:\n    print(\"i is :\",i)\nprint(\" \")\n#*******************************************\nfor index,value in enumerate(lis):\n    print(index,\":\",value)\nprint(\" \")\n#*******************************************\ndictionary={\"germany\":\"berlin\",\"turkey\":\"ankara\",\"spain\":\"madrid\"}\nfor key,value in dictionary.items():\n    print(key,\":\",value)\nprint(\" \")\n#*******************************************\nfor index,value in data[[\"Generosity\"]][0:1].iterrows():\n    print(index,\":\",value)\n\n#data[['Generosity']][0:2]\n#data.loc[0:2,\"Generosity\"]\n","16e0e430":"def tuble_ex():\n    \"\"\"return defined t tuble\"\"\"\n    t=(1,2,3)\n    return t\na,b,c=tuble_ex()\nprint(a)\nprint(b)\nprint(c)\n","37868bc3":"x=2\ndef f():\n    x=3\n    return x\nprint(x) #x=2 global scope\nprint(f()) #x=3 local scope\n\n","c571833a":"x=5\ndef f():\n    y=x**4     # there is no local scope x\n    return y\nprint(f())  # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","7e6b9b36":"import builtins\ndir(builtins)","da2287dc":"def square():\n    def add():\n        x=4\n        y=7\n        z=x+y\n        return z\n    return add()**2\nprint(square())","9bbb0e38":"def summ(a,b=1,c=2):\n    y=a+b+c\n    return y\nprint(summ(5))\n#********************\nprint(summ(5,7,6))","91f59954":"def f(*args):\n    for i in args:\n        print(i)\nf(1,2)\nprint(\" \")\nf(1,6,32)\n#**************************\nprint(\" \")\ndef f(**kwargs):\n    print(kwargs)\n    for key,value in kwargs.items():\n        print(key,\":\",value)\nf(country=\"spain\",capital=\"madrid\",population=12856)","0d52995f":"summ=lambda x,y=2: x+y\nprint(summ(4,5))\nprint(summ(5))\nsquare_root=lambda x:x**0.5\nprint(square_root(16))","a81289d8":"lis=[1,2,3]\ny=map(lambda x:x**2,lis)\nprint(y)\nprint(list(y))","25c766a6":"name=\"messi\"\nit=iter(name)\nprint(next(it))\nprint(next(it))\nprint((*it))\n","c9db862f":"list1=[\"a\",\"b\",\"c\",\"d\"]\nlist2=[1,2,3,4,5,6]\nlist3=[8,9,0]\nz=zip(list1,list2,list3)\nprint(z)\nz_list=list(z)\nprint(z_list)","fdc6c4d7":"un_zip=zip(*z_list)\nprint(un_zip)\nliss1,liss2,_=list(un_zip)\nprint(liss1)\nprint(liss2)\nprint(type(liss1))","64c1d381":"num1=[1,2,3,4]\nnum2=[i**2+1 for i in num1]\nprint(num2)","aa4068e7":"num1=[4,5,10,20]\nnum2=[i+1 if i<6 else i**2 if i<11 else i for i in num1]\nprint(num2)","6e47b94d":"avarage=sum(data[\"Economy..GDP.per.Capita.\"])\/len(data[\"Economy..GDP.per.Capita.\"])\n\ndata[\"level_of_gdp\"]=[\"High\"if i>avarage else \"Low\" for i in data[\"Economy..GDP.per.Capita.\"]]\ndata.loc[40:50,[\"level_of_gdp\",\"Economy..GDP.per.Capita.\"]]","a06e3008":"data.columns=[ i.replace(\".\",\"_\") if len(i.split(\".\"))>1 else i  for i in data.columns]\ndata.columns","d6c5a2b8":"data.info()","cf225d81":"data.shape","10f391db":"print(data.Country.value_counts(dropna=False))","b317a40e":"data.describe()","fd4284a5":"data.columns","91d6b679":"data.boxplot(column=\"Freedom\",by=\"level_of_gdp\")\nplt.show()","de9de19a":"data_new=data.head()\ndata_new","f254f7af":"melted=pd.melt(frame=data_new,id_vars=\"Country\",value_vars=[\"Freedom\",\"Generosity\"])\nmelted","7b373748":"melted.pivot(index=\"variable\",columns=\"Country\",values=\"value\")\n\n","eaaa3529":"data1=data.head()\ndata2=data.tail()\ncon_data_row=pd.concat([data1,data2],axis=0,ignore_index=True) #horizantal \ncon_data_row","c7d943da":"data1=data[\"Happiness_Rank\"].head()\ndata2=data[\"Happiness_Score\"].head()\nconcat_col= pd.concat([data1,data2],axis=1,ignore_index=False)\nconcat_col","241330e5":"data.dtypes","4e6564f4":"data.Happiness_Score=data.Happiness_Score.astype(\"object\")\ndata.Family=data.Family.astype(\"int\")\ndata.dtypes","0a5f8e36":"data.info()","1623aed4":"data.level_of_gdp.value_counts(dropna=True)","e04f55c4":" assert 1==1","91b054fe":"assert  data.level_of_gdp.notnull().all()","24bd10a9":"assert data.columns[0] == \"Country\"","75124509":"assert data.Happiness_Rank.dtypes == int","1d959daf":"country=[\"Turkey\",\"France\"]\npopulation=[100,200]\nlist_colum=[\"country\",\"population\"]\nlis1=[country,population]\nzipped=list(zip(list_colum,lis1))\ndic=dict(zipped)\ndf=pd.DataFrame(dic)\ndf","aba29332":"df[\"Capital\"]=[\"Ankara\",\"Paris\"]","c1e008fa":"df","06678ccc":"df[\"Time\"]=0 #entire column","103e2611":"df","69dbfde8":"data1=data.loc[:,['Dystopia_Residual',\"Whisker_high\",\"Happiness_Rank\"]]\ndata1.plot()\nplt.show()","6313d6c0":"data1.plot(subplots=True)\nplt.show()","ff2183b7":"#scatter\ndata.plot(kind=\"scatter\",x=\"Happiness_Rank\",y=\"Economy__GDP_per_Capita_\")\nplt.show()","45e3a7d2":"data.plot(kind=\"hist\",y=\"Dystopia_Residual\",bins=50,range=(0,4.0),normed=True)\nplt.show()","0e84de4c":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Dystopia_Residual\",bins = 50,normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Dystopia_Residual\",bins = 50,normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","dcabd41b":"data.describe()","260a5992":"time_list=[\"1999-09-17\",\"1999-10-17\"]\nprint(type(time_list[0]))\ndatatime_obj=pd.to_datetime(time_list)\nprint(type(datatime_obj))","5de67b5c":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2=data.head()\ndata_list=[\"1999-01-10\",\"1999-02-10\",\"1999-03-13\",\"2000-03-15\",\"2000-03-16\"]\ndatatime_obj=pd.to_datetime(data_list)\ndata2[\"date\"]= datatime_obj\n# lets make date as index\ndata2=data2.set_index(\"date\")\ndata2","3ff53085":"print(data2.loc[\"1999-01-10\"])\nprint(data2.loc[\"1999-01-10\":\"2000-03-15\"])","6ebfff35":"data2.resample(\"A\").mean()","4737aa0f":"data2.resample(\"M\").mean()","db6b25d2":"data2.resample(\"M\").first().interpolate(\"linear\")","ddd5711f":"data2.resample(\"M\").mean().interpolate(\"linear\")","eb721a71":"data_2015= pd.read_csv(\"..\/input\/2015.csv\")\ndata_2015=data_2015.set_index(\"Happiness Rank\")\ndata_2015.head()","b60066de":"data_2015[\"Country\"][1]","5c686cb0":"data_2015.Country[1]","3952db7f":"data_2015.loc[1,[\"Country\"]]","b415e161":"data_2015[[\"Region\",\"Happiness Score\"]]","e861fe8c":"print(type(data_2015[\"Country\"]))\nprint(type(data_2015[[\"Country\"]]))","1015f97d":"data_2015.loc[1:10,[\"Region\",\"Happiness Score\"]]","8340593e":"data_2015.loc[10:1:-1,[\"Region\",\"Happiness Score\"]]","7cb3d410":"data_2015.loc[1:10,\"Trust (Government Corruption)\":]","d56f4f07":"# Creating boolean series\nboolean=data_2015[\"Happiness Score\"]>7.3\nprint(boolean)\ndata_2015[boolean]","997b736d":"# Combining filters\nfirst_f=data_2015[\"Happiness Score\"]>7.3\nsecond_f=data_2015[\"Trust (Government Corruption)\"]>0.4\ndata_2015[first_f & second_f]","c69a6bda":"# Filtering column based others\ndata_2015[\"Country\"][data_2015[\"Trust (Government Corruption)\"]>0.4]","722585a6":"def mult(x):\n    return x*2\ndata.Generosity.apply(mult)","9b56f68a":"data_2015.Generosity=data.Generosity.apply(lambda x:x*2)\ndata_2015.head()","6478db92":"data_2015[\"New_State\"]=data_2015.Freedom + data_2015.Generosity \/2","5b4d945b":"data_2015.head()","34c45950":"print(data.index.name)\ndata.index.name=\"Index Name\"\ndata.head(9)","0673cee6":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\ndata.index=list(range(100,255))\ndata.head()","83be54d5":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/2017.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","e16e5e24":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Country\",\"Happiness.Score\"]) \ndata1.head(100)\ndata1.loc[\"Finland\"] # howw to use indexes","548a3acb":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","26bfd706":"df.pivot(index=\"gender\",columns = \"treatment\")","62dc5555":"df1=df.set_index([\"gender\",\"treatment\"])\ndf1","48574713":"df1.unstack(level=0)","cbd52fa2":"df1.unstack(level=1)","18d270ba":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","804de6f8":"df","4fe36569":"# we can only choose one of the feature\ndf.groupby(\"gender\").response.max()","9d6cf4fa":"df.groupby(\"gender\").mean()","4aafb2bc":"# Or we can choose multiple features\ndf.groupby(\"gender\")[\"age\",\"response\"].min()","5197853d":"# 2. PYTHON DATA SCIENCE TOOLBOX","7dc9ce1c":"**LAMBDA FUNCTION**","fe8cb97e":"<a id=\"35\"><\/a> <br>\n### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","de76fe56":"**EXPLORATORY DATA ANALYSIS**","f27f991c":"zip()","cf71b538":"### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","dfbb7fc0":"### WHILE and FOR LOOPS\nWe will learn most basic while and for loops","3daffbc4":"****STATISTICAL EXPLORATORY DATA ANALYSIS****\n","af376cd9":"**CLEAN\u0130NG DATA**","a57d8626":"**DATA TYPES**","2dccea40":"**ITERATORS**","7d1c4067":"\n****SCOPE****\n> What we need to know about scope:\n\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len \n\nLets make some basic examples","1296d243":"Before continue with pandas,   we need to learn **logic, control flow** and **filtering.**\n<br>Comparison operator:  ==, <, >, <=\n<br>Boolean operators: and, or ,not\n<br> Filtering pandas","75135740":"**TIDY DATA**","94908a11":"### USER DEFINED FUNCTION\nWhat we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. \n<br>cant modify values\n<br>tuble uses paranthesis like tuble = (1,2,3)\n<br>unpack tuble into several variables like a,b,c = tuble","3c3768ad":"**VISUAL EXPLORATORY DATA ANALYSIS**","845c3912":"### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle  ","0ee812cd":"<a id=\"38\"><\/a> <br>\n### HIERARCHICAL INDEXING\n* Setting indexing","699389bb":"****NESTED FUNCTION****\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","752bc519":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","24685ff1":"<a id=\"39\"><\/a> <br>\n### PIVOTING DATA FRAMES\n* pivoting: reshape tool","213838b2":"**MISSING DATA and TESTING WITH ASSERT**","a7709b12":"**PIVOTING DATA.**\n<br>Reverse of melting","acbdd640":"\n****ANONYMOUS FUNCT\u0130ON****\n<br>Like lambda function but it can take more than one arguments.\n\n* map(func,seq) : applies a function to all the items in a list","a95bcb67":"In this part, you learn:\n* how to import csv file\n* plotting line,scatter and histogram\n* basic dictionary features\n* basic pandas features like filtering that is actually something always used and main for being data scientist\n* While and for loops","f044914c":"**** PANDAS****","4ec70235":"\n****CONCATENATING DATA****\n<br>We can concatenate two dataframe","e66a8282":"<a id=\"31\"><\/a> <br>\n### RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 \n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html","e90cf4ca":"**VISUAL EXPLORATORY DATA ANALYSIS**","48e3658f":"<a id=\"34\"><\/a> <br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","2837e2bd":"\n***4. PANDAS FOUNDATION***","67940256":" **DICTIONARY**","e651d0f0":"<a id=\"30\"><\/a> <br>\n### INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","a7e2fcf7":"<a id=\"36\"><\/a> <br>\n### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","1af09869":"****LIST COMPREHENS\u0130ON****\n","97cc29f5":"<a id=\"40\"><\/a> <br>\n### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","d579c66c":"<a id=\"32\"><\/a> <br>\n# MANIPULATING DATA FRAMES WITH PANDAS","9869d86c":"<a id=\"37\"><\/a> <br>\n### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label\n"}}