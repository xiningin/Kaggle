{"cell_type":{"65df8778":"code","ca1d6a0a":"code","cf0548d0":"code","3db4570d":"code","8666a84e":"code","184d0097":"code","3807c3f4":"code","7ef1d97b":"code","f3955c22":"code","fb5f83c6":"code","db2fa644":"code","29329c8a":"code","49e7c587":"code","9c29d9ce":"code","54ab7f43":"code","6ee4d53f":"code","ce245b67":"code","5c1a0e16":"code","1aa92de6":"code","615d74ae":"code","cc5cecf4":"code","8111c415":"code","163a39ba":"code","408fc780":"code","bd39fbf4":"code","a1e980c8":"code","c79bac74":"code","6e893645":"code","25b29e5d":"code","7a91674b":"code","d549add8":"code","757a34e8":"code","d2f8d3d4":"code","66fe821e":"code","2ba39c77":"code","53ce1d15":"code","9c45a80a":"markdown","1f8f4dba":"markdown","3e638df2":"markdown","688b8e47":"markdown","f41b4253":"markdown","1cbbe13e":"markdown","cf156ac2":"markdown","7d639ab1":"markdown","8aba2a8f":"markdown","b0ce29fa":"markdown","dcd0a59d":"markdown","b18ec7da":"markdown","35b66664":"markdown","027ec3e2":"markdown","f7962006":"markdown","6451408d":"markdown","37e1499c":"markdown"},"source":{"65df8778":"import os\nimport math\nimport librosa\nimport statistics\nimport librosa.display\nimport pandas as pd\nimport numpy as np\nimport IPython.display as ipd\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier","ca1d6a0a":"# initializing constants\nFRAME_SIZE=1024\nHOP_LENGTH=512\naudio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nipd.Audio(audio_path)","cf0548d0":"Image(\"..\/input\/pictures\/time_domain_pipeline.PNG\")","3db4570d":"#function to calculate AE for each frame\ndef amp_env(signal,frame_size,hop_length):\n    return np.array([max(signal[i:i+frame_size]) for i in range(0,len(signal),hop_length)])","8666a84e":"Image(\"..\/input\/pictures\/amp_env.PNG\")","184d0097":"#function to calculate AE for each frame\ndef amp_env(signal,frame_size,hop_length):\n    return np.array([max(signal[i:i+frame_size]) for i in range(0,len(signal),hop_length)])","3807c3f4":"audio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nsignal , sr = librosa.load(audio_path)\nae_signal=amp_env(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(ae_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,ae_signal,color=\"r\")\nplt.show()","7ef1d97b":"Image(\"..\/input\/pictures\/rmse.PNG\")","f3955c22":"#function to calculate RMSE for each frame\ndef rmse(signal,frame_size,hop_length):\n    return np.array(librosa.feature.rms(signal,frame_length=frame_size,hop_length=hop_length)[0])","fb5f83c6":"audio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nsignal , sr = librosa.load(audio_path)\nrmse_signal=rmse(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(rmse_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,rmse_signal,color=\"g\")\nplt.show()","db2fa644":"Image(\"..\/input\/pictures\/zcr.PNG\")","29329c8a":"#function to calculate ZCR for each frame\ndef zcr(signal,frame_size,hop_length):\n    return np.array(librosa.feature.zero_crossing_rate(signal,frame_length=frame_size,hop_length=hop_length)[0])","49e7c587":"audio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nsignal , sr = librosa.load(audio_path)\nzcr_signal=zcr(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(zcr_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,zcr_signal,color=\"b\")\nplt.show()","9c29d9ce":"audio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nsignal , sr = librosa.load(audio_path)\nplt.figure(figsize=(15,30))\n# original signal\nori_signal=signal\nframes=range(len(ori_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nplt.subplot(4,1,1)\nlibrosa.display.waveplot(signal)\nplt.plot(t,ori_signal,color=\"black\")\nplt.title(\"Original Audio Signal\")\n        \n# plot AE for the signal\nplt.subplot(4,1,2)\nae_signal=amp_env(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(ae_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,ae_signal,color=\"r\")\nplt.title(\"AE Audio Signal\")\n        \n# plot RMSE for the signal\nplt.subplot(4,1,3)\nrmse_signal=rmse(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(rmse_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,rmse_signal,color=\"g\")\nplt.title(\"RMSE Audio Signal\")\n        \n# plot ZCR for the signal\nplt.subplot(4,1,4)\nzcr_signal=zcr(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(zcr_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,zcr_signal,color=\"b\")\nplt.title(\"ZCR Audio Signal\")\nplt.show()","54ab7f43":"Image(\"..\/input\/pictures\/frequency_domain_pipeline.PNG\")","6ee4d53f":"audio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nsignal , sr = librosa.load(audio_path)\n# Short Fourier Transform\nsignal_stft = librosa.stft(signal, n_fft=FRAME_SIZE, hop_length=HOP_LENGTH)","ce245b67":"Image(\"..\/input\/pictures\/ber.PNG\")","5c1a0e16":"def calculate_split_frequency_bin(split_frequency, sample_rate, num_frequency_bins):\n    #Infer the frequency bin associated to a given split frequency\n    frequency_range = sample_rate \/ 2\n    frequency_delta_per_bin = frequency_range \/ num_frequency_bins\n    split_frequency_bin = math.floor(split_frequency \/ frequency_delta_per_bin)\n    return int(split_frequency_bin)","1aa92de6":"split_frequency_bin = calculate_split_frequency_bin(2000, 22050, 1025)\nsplit_frequency_bin","615d74ae":"#function to calculate BER for each frame\ndef ber(spectrogram, split_frequency, sample_rate):\n    #Calculate band energy ratio with a given split frequency\n    split_frequency_bin = calculate_split_frequency_bin(split_frequency, sample_rate, len(spectrogram[0]))\n    band_energy_ratio = []\n    # calculate power spectrogram\n    power_spectrogram = np.abs(spectrogram) ** 2\n    power_spectrogram = power_spectrogram.T\n    # calculate BER value for each frame\n    for frame in power_spectrogram:\n        sum_power_low_frequencies = frame[:split_frequency_bin].sum()\n        sum_power_high_frequencies = frame[split_frequency_bin:].sum()\n        band_energy_ratio_current_frame = sum_power_low_frequencies \/ sum_power_high_frequencies\n        band_energy_ratio.append(band_energy_ratio_current_frame)\n    return np.array(band_energy_ratio)","cc5cecf4":"ber_signal= ber(signal_stft, 2000, sr)\nframes = range(len(ber_signal))\nt = librosa.frames_to_time(frames, hop_length=HOP_LENGTH)\nplt.plot(t, ber_signal, color=\"r\")\nplt.show()","8111c415":"Image(\"..\/input\/pictures\/sc.PNG\")","163a39ba":"#function to calculate SC for each frame\ndef sc(signal,framesize,hoplength):\n    return np.array(librosa.feature.spectral_centroid(y=signal, sr=sr, n_fft=framesize, hop_length=hoplength)[0])","408fc780":"sc_signal=sc(signal,FRAME_SIZE,HOP_LENGTH)\nframes = range(len(sc_signal))\nt = librosa.frames_to_time(frames, hop_length=HOP_LENGTH)\nplt.plot(t, sc_signal, color='g')\nplt.show()","bd39fbf4":"Image(\"..\/input\/pictures\/sb.PNG\")","a1e980c8":"#function to calculate SB for each frame\ndef sb(signal,framesize,hoplength):\n    return np.array(librosa.feature.spectral_bandwidth(y=signal, sr=sr, n_fft=framesize, hop_length=hoplength)[0])","c79bac74":"sb_signal=sb(signal,FRAME_SIZE,HOP_LENGTH)\nframes = range(len(sb_signal))\nt = librosa.frames_to_time(frames, hop_length=HOP_LENGTH)\nplt.plot(t, sb_signal, color='b')\nplt.show()","6e893645":"Image(\"..\/input\/pictures\/mfcc.PNG\")","25b29e5d":"#function to calculate MFCC for each frame\ndef mfcc(signal,sample_rate,hoplength):\n    return np.array(librosa.feature.mfcc(y=signal, n_mfcc=hoplength, sr=sample_rate))","7a91674b":"librosa.display.specshow(mfcc(signal,sr,HOP_LENGTH), x_axis=\"time\", sr=sr)\nplt.colorbar(format=\"%+2.f\")\nplt.show()","d549add8":"audio_path = '..\/input\/birdclef-2021\/train_short_audio\/acafly\/XC109605.ogg'\nsignal , sr = librosa.load(audio_path)\nplt.figure(figsize=(15,30))\n# original signal\nori_signal=signal\nframes=range(len(ori_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nplt.subplot(5,1,1)\nlibrosa.display.waveplot(signal)\nplt.plot(t,ori_signal,color=\"black\")\nplt.title(\"Original Audio Signal\")\n        \n# plot BER for the signal\nplt.subplot(5,1,2)\nber_signal= ber(signal_stft, 2000, sr)\nframes=range(len(ae_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,ber_signal,color=\"r\")\nplt.title(\"BER Audio Signal\")\n        \n# plot SC for the signal\nplt.subplot(5,1,3)\nsc_signal=sc(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(sc_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,sc_signal,color=\"g\")\nplt.title(\"SC Audio Signal\")\n        \n# plot SB for the signal\nplt.subplot(5,1,4)\nsb_signal=sb(signal,FRAME_SIZE,HOP_LENGTH)\nframes=range(len(zcr_signal))\nt=librosa.frames_to_time(frames,hop_length=HOP_LENGTH)\nlibrosa.display.waveplot(signal)\nplt.plot(t,sb_signal,color=\"b\")\nplt.title(\"SB Audio Signal\")\n\n# plot MFCC for the signal\nplt.subplot(5,1,5)\nlibrosa.display.specshow(mfcc(signal,sr,HOP_LENGTH), x_axis=\"time\", sr=sr)\nplt.colorbar(format=\"%+2.f\")\nplt.title(\"MFCC Audio Signal\")\nplt.show()","757a34e8":"df=pd.DataFrame()\ndf['filename']=''\ndf['AE']=''\ndf['RMSE']=''\ndf['ZCR']=''\ndf['BER']=''\ndf['SC']=''\ndf['SB']=''\ndf['MFCC']=''","d2f8d3d4":"'''directory= r'..\/input\/birdclef-2021\/train_short_audio'\nfor root, subdirectories, files in os.walk(directory):\n    for subdirectory in subdirectories:\n        folder=os.path.join(root, subdirectory)\n        print(folder)\n        parent_list = os.listdir(folder)\n        count =0\n        for child in parent_list:\n            if count < 5:\n                print(child+\" \"+str(count))\n                audio_path=folder+\"\/\"+child\n                signal , sr = librosa.load(audio_path)\n                signal_stft = librosa.stft(signal, n_fft=FRAME_SIZE, hop_length=HOP_LENGTH)\n                # AE for the signal\n                ae_signal=amp_env(signal,FRAME_SIZE,HOP_LENGTH)\n                # Feature Aggregation of AE\n                agg_ae=statistics.mean(ae_signal)\n                # RMSE for the signal\n                rmse_signal=rmse(signal,FRAME_SIZE,HOP_LENGTH)\n                # Feature Aggregation of RMSE\n                agg_rmse=statistics.mean(rmse_signal)\n                # ZCR for the signal\n                zcr_signal=zcr(signal,FRAME_SIZE,HOP_LENGTH)\n                # Feature Aggregation of ZCR\n                agg_zcr=statistics.mean(zcr_signal)\n                # BER for the signal\n                ber_signal=ber(signal_stft, 2000, sr)\n                # Feature Aggregation of BER\n                agg_ber=statistics.mean(ber_signal)\n                # SC for the signal\n                sc_signal=sc(signal,FRAME_SIZE,HOP_LENGTH)\n                # Feature Aggregation of SC\n                agg_sc=statistics.mean(sc_signal)\n                # SB for the signal\n                sb_signal=sb(signal,FRAME_SIZE,HOP_LENGTH)\n                # Feature Aggregation of SB\n                agg_sb=statistics.mean(sb_signal)\n                # MFCC for the signal\n                mfcc_signal=mfcc(signal,sr,HOP_LENGTH)[1]\n                # Feature Aggregation of MFCC\n                agg_mfcc=statistics.mean(mfcc_signal)\n                df2 = {'filename':filename, 'AE': agg_ae, 'RMSE': agg_rmse, 'ZCR': agg_zcr  , 'BER': agg_ber, 'SC': agg_sc, 'SB': agg_sb , 'MFCC': agg_mfcc}\n                df = df.append(df2, ignore_index = True)\n            else:\n                break\n            count = count+1'''","66fe821e":"df","2ba39c77":"metadata=pd.read_csv(\"..\/input\/birdclef-2021\/train_metadata.csv\")","53ce1d15":"metadata.head()","9c45a80a":"#  Visualization","1f8f4dba":"# Frequency Domain Features","3e638df2":"# Root Mean Square Energy","688b8e47":"# Time Domain Feature Extraction Pipeline","f41b4253":"# Importing Libraries","1cbbe13e":"# Mel Frequency Cepstral Coefficients","cf156ac2":"# Spectral Centroid","7d639ab1":"# Extract spectrograms","8aba2a8f":"# Band Energy Ratio","b0ce29fa":"# Spectral Bandwidth","dcd0a59d":"# Feature Extraction","b18ec7da":"# Final Feature Extraction from all Audio files","35b66664":"# Time Domain Features","027ec3e2":"# Zero Crossing Rate","f7962006":"# Amplitude Envelope","6451408d":"# Visualization","37e1499c":"# Frequency Domain Feature Extraction Pipeline"}}