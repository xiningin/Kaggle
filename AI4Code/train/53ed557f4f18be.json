{"cell_type":{"057d2409":"code","b0ca8f52":"code","b02037ba":"code","397e109c":"code","04905b87":"code","f2f55f53":"code","8f271866":"code","05b23905":"code","239c16d7":"code","964fc08c":"code","39d08e4f":"code","f51f5988":"code","45cb41ce":"code","a7f36190":"code","05c62540":"code","15de23b1":"code","911a6ba6":"code","96a03d5f":"code","55849ce2":"code","a7d6fa07":"code","a60f07ca":"code","c6d9db4a":"code","70d89324":"code","0dc28fd2":"code","8152bece":"code","879c9ce1":"code","7eae3f7d":"markdown","4a48f465":"markdown","80539a3e":"markdown","b16f4fe3":"markdown"},"source":{"057d2409":"from sklearn.datasets import load_digits\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","b0ca8f52":"data=pd.read_csv('..\/input\/covid19-symptoms-checker\/Cleaned-Data.csv')","b02037ba":"data.dropna(inplace=True)","397e109c":"data.drop_duplicates(inplace=True)\ndata","04905b87":"import seaborn as sns","f2f55f53":"# sns.pairplot(data)","8f271866":"data1=data.drop(['Severity_Mild','Severity_Moderate','Severity_None','Severity_Severe' ],axis=1) \ndata1.head()","05b23905":"data1=data1.drop(['Country'],axis=1)","239c16d7":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\ntrain_df_scaled=scaler.fit_transform(data1)","964fc08c":"pca = PCA(2)\npca\n","39d08e4f":"df = pca.fit_transform(train_df_scaled)\ndf = pd.DataFrame(df)\ndf.columns = ['P1', 'P2']\nprint(df.head())","f51f5988":"inertias = []\n\nfor i in range(1,15):\n    km=KMeans(n_clusters=i, random_state=2)\n    km.fit(train_df_scaled)\n    inertias.append(km.inertia_)","45cb41ce":"plt.figure(figsize=(10,6))\nplt.plot(range(1,15), inertias, color='blue', marker='o', markerfacecolor='red', markersize=10)\nplt.title('Inertias vs. number of clusters')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.show()\n","a7f36190":"from sklearn.metrics import davies_bouldin_score","05c62540":"bouldin_score=[]\n\nfor i in range(4,15):\n    km=KMeans(n_clusters=i, random_state=2)\n    labels=km.fit_predict(train_df_scaled)\n    bouldin_score.append(davies_bouldin_score(train_df_scaled, labels))","15de23b1":"\nplt.figure(figsize=(10,6))\nplt.plot(range(4,15), bouldin_score, color='blue', marker='o', markerfacecolor='red', markersize=10)\nplt.title('Davies Bouldin Score vs. number of clusters')\nplt.xlabel('Number of clusters')\nplt.ylabel('Davies Bouldin Score')\nplt.show()","911a6ba6":"#Import required module\nfrom sklearn.cluster import KMeans\n \n#Initialize the class object\nkmeans = KMeans(n_clusters= 7)\n \n#predict the labels of clusters.\nlabel = kmeans.fit_predict(df)\n \nprint(label)","96a03d5f":"import matplotlib.pyplot as plt\n \n#filter rows of original data\nfiltered_label0 = df[label == 0]\n \n#plotting the results\nplt.scatter(filtered_label0['P1'] , filtered_label0['P2'])\nplt.show()","55849ce2":"u_labels = np.unique(label)\n \n#plotting the results:\nfiltered_label0 = df[label == 0]\nfiltered_label1 = df[label == 1]\nfiltered_label2 = df[label == 2]\nfiltered_label3 = df[label == 3]\nfiltered_label4 = df[label == 4]\nfiltered_label5 = df[label == 5]\nfiltered_label6 = df[label == 6]\n\n\nplt.scatter(filtered_label0['P1'] , filtered_label0['P2'])\nplt.scatter(filtered_label1['P1'] , filtered_label1['P2'])\nplt.scatter(filtered_label2['P1'] , filtered_label2['P2'])\nplt.scatter(filtered_label3['P1'] , filtered_label3['P2'])\nplt.scatter(filtered_label4['P1'] , filtered_label4['P2'])\nplt.scatter(filtered_label5['P1'] , filtered_label5['P2'])\nplt.scatter(filtered_label6['P1'] , filtered_label6['P2'])\n\n\nplt.legend()\nplt.show()","a7d6fa07":"#Getting the Centroids\ncentroids = kmeans.cluster_centers_\nu_labels = np.unique(label)\n \n#plotting the results:\n\nfiltered_label0 = df[label == 0]\nfiltered_label1 = df[label == 1]\nfiltered_label2 = df[label == 2]\nfiltered_label3 = df[label == 3]\nfiltered_label4 = df[label == 4]\nfiltered_label5 = df[label == 5]\nfiltered_label6 = df[label == 6]\n\n\nplt.scatter(filtered_label0['P1'] , filtered_label0['P2'])\nplt.scatter(filtered_label1['P1'] , filtered_label1['P2'])\nplt.scatter(filtered_label2['P1'] , filtered_label2['P2'])\nplt.scatter(filtered_label3['P1'] , filtered_label3['P2'])\nplt.scatter(filtered_label4['P1'] , filtered_label4['P2'])\nplt.scatter(filtered_label5['P1'] , filtered_label5['P2'])\nplt.scatter(filtered_label6['P1'] , filtered_label6['P2'])\n\nplt.scatter(centroids[:,0] , centroids[:,1] , s = 50, color = 'k')\nplt.legend()\nplt.show()","a60f07ca":"from sklearn.cluster import Birch\nimport numpy as np\nimport matplotlib.pyplot as plt","c6d9db4a":"pca_birch = PCA(1)\npca_birch","70d89324":"df_birch = pca_birch.fit_transform(train_df_scaled)\n \ndf_birch.shape","0dc28fd2":"df_birch_1=df_birch[:25000,:]","8152bece":"x_range = range(len(df_birch_1))\nx = np.array(list(zip(x_range, df_birch_1))).reshape(len(x_range), 2)\n\nplt.scatter(x[:,0], x[:,1])\nplt.show()","879c9ce1":"bclust=Birch(branching_factor=100, threshold=.5).fit(x)\nprint(bclust)\n\nlabels = bclust.predict(x)\n\nplt.scatter(x[:,0], x[:,1], c=labels)\nplt.show()","7eae3f7d":"# Elbow Method","4a48f465":"\n# K-Means","80539a3e":"# Import","b16f4fe3":"# PCA"}}