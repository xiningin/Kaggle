{"cell_type":{"1da28d99":"code","9cb2071e":"code","b87b2426":"code","d5d898bc":"code","6da60ce7":"code","222a4325":"code","322a9289":"code","e90cb41d":"code","44d9de14":"code","658776da":"code","13ea6199":"code","e94620c4":"code","a45aed93":"code","3bb7e0a9":"code","ff209967":"code","ce35fc69":"code","15ffc0b3":"code","486c8ec8":"code","2db5c3c7":"code","3c38fafd":"code","72b64c75":"code","a2a8f876":"code","83ae3852":"code","99fdb8ec":"code","00f56ba5":"code","cc0302a3":"code","7060db2f":"code","46ead920":"code","fa64098e":"code","f20f4fa0":"code","eb9d9189":"code","ddd971ec":"code","25e4b50e":"code","31ce68cb":"code","be46cf51":"code","cda89a8e":"code","6a8b5cfe":"code","cbb4f455":"code","ae747454":"code","66a8761c":"code","c3adf750":"code","1b782df3":"code","b566e174":"code","4990c1e9":"code","20cf268a":"code","6a50abf4":"code","eae9132f":"code","8bc9fbab":"code","3903c4d9":"code","627f5cb4":"code","d22947b6":"markdown","4d425313":"markdown","1523d145":"markdown","f43cc2e9":"markdown","a96a9130":"markdown","d4acf1c4":"markdown","03f56f26":"markdown","0622ec6d":"markdown","5e5b5f32":"markdown","3b94194f":"markdown","bc72b32b":"markdown","fec3a1ac":"markdown","72ffed10":"markdown","7b121134":"markdown","52528aeb":"markdown","583a4c90":"markdown","71da72fd":"markdown","d5320f64":"markdown","d4ecb8b7":"markdown","129b0e43":"markdown","19d1b6a6":"markdown","bfbf0255":"markdown","019e34eb":"markdown","b71446a3":"markdown"},"source":{"1da28d99":"import pandas as pd\nimport numpy as np\nimport gc\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\n\nfrom sklearn.metrics.pairwise import cosine_similarity\n\npd.set_option('display.max_columns', 50)","9cb2071e":"meta = pd.read_csv(\"..\/input\/the-movies-dataset\/movies_metadata.csv\", low_memory = False)\n\ndisplay(meta.head())\nmeta.shape","b87b2426":"keywords = pd.read_csv(\"..\/input\/the-movies-dataset\/keywords.csv\")\n\ndisplay(keywords.head())\nkeywords.shape","d5d898bc":"credits = pd.read_csv(\"..\/input\/the-movies-dataset\/credits.csv\")\n\ndisplay(credits.head())\ncredits.shape","6da60ce7":"meta[\"id\"] = meta[\"id\"].apply(pd.to_numeric, errors = \"ignore\")\nkeywords[\"id\"] = keywords[\"id\"].apply(int)\ncredits[\"id\"] = credits[\"id\"].apply(int)","222a4325":"df = meta.merge(keywords, on = \"id\").merge(credits, on = \"id\")\ndf","322a9289":"df.isnull().sum()","e90cb41d":"df.adult.value_counts()","44d9de14":"df[df.duplicated(subset = [\"title\", \"id\"])].shape[0]","658776da":"df[df.duplicated(subset = [\"title\", \"id\"], keep = False)].sort_values(\"id\").head(4)","13ea6199":"df.drop_duplicates(subset = [\"title\", \"id\"], inplace = True)","e94620c4":"df = df[df.title.notnull()]\ndf.shape","a45aed93":"df = df[df.vote_count > 20]\ndf.shape","3bb7e0a9":"columns = [\"title\", \"genres\", \"original_language\", \"overview\", \"popularity\", \n           \"release_date\", \"imdb_id\", \"runtime\", \"tagline\", \n           \"vote_average\", \"vote_count\", \"keywords\", \"cast\", \"crew\"]\n\ndf = df[columns]","ff209967":"df = df[df[\"release_date\"].notnull()]\ndf = df[df[\"runtime\"].notnull()]","ce35fc69":"df[\"release_date\"] = pd.to_datetime(df['release_date'])\ndf[\"release_year\"] = df[\"release_date\"].dt.year\n\ndf.drop(\"release_date\", axis = 1, inplace = True)","15ffc0b3":"df[\"vote_average_bins\"] = pd.cut(df[\"vote_average\"].astype(float), 10, labels = range(1, 11))\ndf[\"release_year_bins\"] = pd.qcut(df[\"release_year\"].astype(float), q = 10, labels = range(1, 11))\n\nbinned_features = [\"vote_average_bins\", \"release_year_bins\"]","486c8ec8":"for col in binned_features:\n    scaler = MinMaxScaler()\n    \n    df[col] = df[col].astype(int)\n    df[col] = scaler.fit_transform(df[col].values.reshape(-1, 1))","2db5c3c7":"df.set_index(\"title\", inplace = True)","3c38fafd":"df.sample(5)","72b64c75":"languages = pd.get_dummies(df[\"original_language\"])\n\nlanguages","a2a8f876":"df['genres'] = df['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else \"\")\ndf[\"genres\"] = df[\"genres\"].astype(str)","83ae3852":"cv = CountVectorizer(lowercase = False)\n\ngenres = cv.fit_transform(df[\"genres\"])\ngenres_df = pd.DataFrame(genres.todense(), columns = cv.get_feature_names())\n\ngenres_df.set_index(df.index, inplace = True)\n\ngenres_df","99fdb8ec":"stop_words = stopwords.words('english')\n\ndef tokenizer(text):\n    \n    tokens = nltk.word_tokenize(text)\n    tokens = [token for token in tokens if token not in stop_words]\n    tokens = [token for token in tokens if token.isalpha()]\n    tokens = [token for token in tokens if len(token) > 1]\n    stems = []\n    \n    for token in tokens:\n        stemmer = PorterStemmer()\n        stems.append(stemmer.stem(token))\n    return stems","00f56ba5":"df['keywords'] = df['keywords'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else \"\")\ndf[\"keywords\"] = df[\"keywords\"].astype(str)","cc0302a3":"df[\"tagline\"].fillna(\"\", inplace = True)\ndf[\"overview\"].fillna(\"\", inplace = True)\ndf[\"keywords\"].fillna(\"\", inplace = True)\n\ndf[\"text\"] = df[\"overview\"] + df[\"tagline\"] + df[\"keywords\"]\n\ntfidf = TfidfVectorizer(min_df = 5, max_df = 0.8, tokenizer = tokenizer, ngram_range = (1, 2),\n                        binary = True, use_idf = False, norm = None)\n\ntfidf_matrix = tfidf.fit_transform(df[\"text\"])\ntfidf_df = pd.DataFrame(tfidf_matrix.todense(), columns = tfidf.get_feature_names())\n\ntfidf_df.set_index(df.index, inplace = True)\n\ntfidf_df","7060db2f":"df['cast'] = df['cast'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else \"\")","46ead920":"df[\"cast\"] = df[\"cast\"].apply(lambda x: [c.replace(\" \", \"\") for c in x])\ndf[\"cast\"] = df[\"cast\"].apply(lambda x: x[:15])\ndf[\"CC\"] = df[\"cast\"].astype(str)","fa64098e":"cv = CountVectorizer(lowercase = False, min_df = 4)\n\ncast = cv.fit_transform(df[\"CC\"])\ncast_df = pd.DataFrame(cast.todense(), columns = cv.get_feature_names())\n\ncast_df.set_index(df.index, inplace = True)\n\ncast_df","f20f4fa0":"def director(x):\n    for i in x:\n        if i[\"job\"] == \"Director\":\n            return i[\"name\"]\n    return \"\"\n\ndf[\"dir\"] = df[\"crew\"].apply(literal_eval).apply(director)","eb9d9189":"directors = pd.get_dummies(df[\"dir\"])\n\ndirectors","ddd971ec":"def writer_screenplay(x):\n    names = []\n    for i in x:\n        if (i[\"job\"] == \"Writer\") | (i[\"job\"] == \"Screenplay\") | (i[\"job\"] == \"Author\"):\n            name = i[\"name\"]\n            names.append(name)\n    return names\n\ndf[\"writer_screenplay\"] = df[\"crew\"].apply(literal_eval).apply(writer_screenplay)","25e4b50e":"df[\"writer_screenplay\"] = df[\"writer_screenplay\"].apply(lambda x: [c.replace(\" \", \"\") for c in x])\ndf[\"writer_screenplay\"] = df[\"writer_screenplay\"].apply(lambda x: x[:3])\ndf[\"writer_screenplay\"] = df[\"writer_screenplay\"].astype(str)","31ce68cb":"cv = CountVectorizer(lowercase = False, min_df = 2)\n\nwriting = cv.fit_transform(df[\"writer_screenplay\"])\nwriting_df = pd.DataFrame(writing.todense(), columns = cv.get_feature_names())\n\nwriting_df.set_index(df.index, inplace = True)\n\nwriting_df","be46cf51":"del meta, keywords, credits\n\ngc.collect()","cda89a8e":"train = pd.concat([languages, genres_df, cast_df, writing_df, tfidf_df], axis = 1)\n\ntrain = train.astype(np.int8)","6a8b5cfe":"train","cbb4f455":"cosine_sim = cosine_similarity(train)","ae747454":"indices = pd.Series(range(0, len(train.index)), index = train.index).drop_duplicates()","66a8761c":"def get_recommendations(title, cosine_sim = cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:16]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    recommendations = pd.DataFrame({\"Movies\": df.iloc[movie_indices].index.tolist(),\n                                    \"Id\": df.iloc[movie_indices].imdb_id.tolist(),\n                                    \"Similarity\": [sim[1] for sim in sim_scores]})\n    return recommendations","c3adf750":"get_recommendations(\"Star Wars: Episode I - The Phantom Menace\")","1b782df3":"get_recommendations(\"Madagascar\")","b566e174":"get_recommendations(\"The Godfather\")","4990c1e9":"get_recommendations(\"The Departed\")","20cf268a":"get_recommendations(\"Modern Times\")","6a50abf4":"get_recommendations(\"The Good, the Bad and the Ugly\")","eae9132f":"get_recommendations(\"The Dark Knight\")","8bc9fbab":"get_recommendations(\"2001: A Space Odyssey\")","3903c4d9":"get_recommendations(\"Heat\")","627f5cb4":"get_recommendations(\"Lock, Stock and Two Smoking Barrels\")","d22947b6":"We can remove duplicated movies:","4d425313":"We can see lots of western movies.","1523d145":"We can remove rows that have not title.","f43cc2e9":"Recommendations for **Star Wars Episode I**:\n\n- Other movies in its series or special episodes with related to this movie\n\n- Generally sci-fi movies","a96a9130":"# Genres","d4acf1c4":"# Languages","03f56f26":"Recommendations for **Madagascar**;\n\nOther movies in its series or special episodes with related to this movie\n\nGenerally animation movies","0622ec6d":"You can use features with scaling. If you don't scale them, probably that features will be most important.","5e5b5f32":"Movies with related to Batman and some revenge movies.","3b94194f":"We can see huge decrease. With limiting vote count to 20, we eliminate about 30000 movies.","bc72b32b":"# Loading Required Data","fec3a1ac":"Snatch is most similar movie for **Lock, Stock and Two Smoking Barrels**, this would be most succesful recommendation for this movie.","72ffed10":"This recommender system works well on film series because that movies have same genre, mostly similar cast, same director and writer. Also, their overviews are probably similar.","7b121134":"Recommendations for **Modern Times**:\n\n- Chaplin is lead actor, director and writer in his movies. So that, recommendations are generally Chaplin's movies.","52528aeb":"# Checking Features, Cleaning, & Reducing Size","583a4c90":"# Directors","71da72fd":"# Final - Putting All Together","d5320f64":"# Recommendations","d4ecb8b7":"Instead of using whole data, we can take movies that have more than 20 votes.","129b0e43":"The Departed is remake of Internal Affairs. Recommending Internal Affairs shows us the system works well.","19d1b6a6":"Generally heist and crime movies.","bfbf0255":"# Writers","019e34eb":"# Overview, Tagline, & Keywords","b71446a3":"# Cast"}}