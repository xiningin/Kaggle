{"cell_type":{"e2be8ae0":"code","425baf1f":"code","19b8d4c7":"code","f63db1fc":"code","88ea59c2":"code","1a236b10":"code","34a2ad0e":"code","6d36e656":"code","5d07cf60":"code","e08cd6f4":"code","7930a8e7":"code","cee88c9f":"code","aa05e9dc":"code","7927a033":"code","989c1ca1":"code","19cb3906":"code","85859488":"code","97cd7c7a":"code","619d0c4d":"code","56104885":"code","e4eb376d":"code","41a33174":"code","12003ead":"code","6cf18d22":"code","ad1d540f":"code","de4182b0":"code","ea12aa1e":"code","f5e24224":"markdown","a548134d":"markdown","405bf081":"markdown","b2fcb258":"markdown","4c197577":"markdown","b314c498":"markdown","a505f08f":"markdown","79b917bd":"markdown","4c7df4af":"markdown","bad037b9":"markdown","cca6aad6":"markdown","650a26d8":"markdown","1d8b71a4":"markdown","c3e154f3":"markdown","2831ed72":"markdown","612d088d":"markdown","9450e510":"markdown","bcfd7e68":"markdown","43ca8a60":"markdown","491ea716":"markdown","c7048e4f":"markdown","abd07d2a":"markdown","495f6be1":"markdown","18966643":"markdown","617cfb23":"markdown","df272c47":"markdown","ce3589d3":"markdown","d2aa64ef":"markdown","5eb97c8b":"markdown"},"source":{"e2be8ae0":"import pandas as pd\nimport numpy as np\nimport time #is this required?\nfrom re import sub\nfrom sklearn.preprocessing import LabelEncoder\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplaystore = pd.read_csv(\"..\/input\/googleplaystore.csv\")\nreviews = pd.read_csv(\"..\/input\/googleplaystore_user_reviews.csv\")\n","425baf1f":"playstore.head(2)","19b8d4c7":"reviews.head(2)","f63db1fc":"unique_values = playstore[\"Price\"].unique()\nunique_values.sort()\nunique_values","88ea59c2":"everyone = playstore[playstore['Price'] == 'Everyone']\nprint(everyone)","1a236b10":"broken = everyone.iloc[0]\napp_name = broken[\"App\"]\nfixed = broken.shift(1)\nfixed[\"App\"] = app_name\n#these value were found after finding the app on the live Playstore\nfixed[\"Category\"] = \"Lifestyle\"\nfixed[\"Genres\"] = \"Lifestyle\"\nplaystore.iloc[10472] = fixed\nplaystore.iloc[10472]","34a2ad0e":"playstore[(playstore[\"Price\"] == \"0\") & (playstore[\"Type\"] != \"Free\")]","6d36e656":"playstore.iloc[9148] = playstore.iloc[9148].set_value(\"Type\", \"Free\")","5d07cf60":"playstore[\"Price\"] = playstore[\"Price\"].apply(lambda x: float(sub(r'[^\\d\\-.]', '', x)))\nunique_values = playstore[\"Price\"].unique()\nunique_values.sort()\nprint(unique_values)","e08cd6f4":"unique_values = playstore[\"Rating\"].unique()\n#unique_values.sort()\nunique_values","7930a8e7":"nan_rating = playstore[playstore[\"Rating\"].isnull()]\nnan_rating.shape","cee88c9f":"nan_rating = playstore[(playstore[\"Rating\" ].isnull()) & (playstore[\"Reviews\"] != \"0\")]\nnan_rating.shape","aa05e9dc":"#create a loop that iterates through nan_rating and sets the viewed to 0 and pushes them back into playstore\nnan_rating_idx = list(nan_rating.index.values)\n\nfor idx  in nan_rating_idx:\n    playstore.iloc[idx] = playstore.iloc[idx].set_value(\"Rating\", 0)\n\nnan_rating = playstore[playstore[\"Rating\"].isnull()]\nprint(nan_rating.shape)\n\nplaystore[\"Rating\"] = playstore[\"Rating\"].astype(float)\nplaystore[\"Price\"] = playstore[\"Price\"].astype(float)\n","7927a033":"plt.figure()\nplt.scatter(playstore[\"Price\"], playstore[\"Rating\"])\nplt.xlabel(\"Price ($)\")\nplt.ylabel(\"Rating (Stars)\")\nplt.show()","989c1ca1":"average_price = playstore[\"Price\"].groupby(playstore[\"Rating\"]).mean()\nplt.figure()\nplt.scatter(average_price.index.values, average_price.values)\nplt.xlabel(\"Rating (Stars)\")\nplt.ylabel(\"Average Price ($)\")\nplt.show()","19cb3906":"average_price.head(5)","85859488":"average_price.tail(5)","97cd7c7a":"average_rating = playstore[\"Rating\"].groupby(playstore[\"Price\"]).mean()\naverage_rating = pd.DataFrame(data=average_rating)\naverage_rating = average_rating.reset_index()\naverage_rating.loc[(average_rating[\"Price\"] > 50) & (average_rating[\"Rating\"] > 3.5), \"Expensive_App_Highly_Rated\"] = 1\naverage_rating[\"Expensive_App_Highly_Rated\"].fillna(0, inplace=True)","619d0c4d":"plt.figure(figsize=(25,12))\n#sns.scatterplot(average_rating.index.values, average_rating.values, hue=\"Expensive_App_Highly_Rated\", data=df)\nsns.scatterplot(x=\"Price\", y=\"Rating\", hue=\"Expensive_App_Highly_Rated\", data=average_rating)\nplt.xlabel(\"Price Point ($)\", fontsize=18)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.ylabel(\"Average Rating (Stars)\", fontsize=18)\nplt.legend().remove()\nplt.show()","56104885":"expensive_apps = playstore[(playstore[\"Price\"] > 50) & (playstore[\"Rating\"] > 3.5)]\nexpensive_apps[[\"App\", \"Category\", \"Genres\", \"Price\", \"Rating\", \"Reviews\", \"Installs\"]].sort_values(\"Price\", ascending=False)","e4eb376d":"reviews.head(2)","41a33174":"for name, row in playstore.iterrows():\n    genres_list = row[\"Genres\"].split(\";\")\n    for genre in genres_list:\n        playstore.loc[name, str(\"gen_\" + genre)] = 1","12003ead":"genre_dummies = [col for col in playstore if col.startswith('gen_')]\ngenre_dummies.sort()\n\naggregate_figures_per_genre_data = {}\nfor genre_dummy in genre_dummies:\n    average_rating = playstore[playstore[genre_dummy] == 1][\"Rating\"].mean()\n    average_price = playstore[playstore[genre_dummy] == 1][\"Price\"].mean()\n    count = playstore[playstore[genre_dummy] == 1][\"Rating\"].count()\n    aggregate_figures_per_genre_data[genre_dummy] = {\n        \"average_rating\" : average_rating, \n        \"average_price\" : average_price, \n        \"count\" : count\n    }\naggregate_figures_per_genre = pd.DataFrame(index=list(aggregate_figures_per_genre_data.keys()),data=list(aggregate_figures_per_genre_data.values()))\naggregate_figures_per_genre.head(5)","6cf18d22":"rating_plot = plt.figure(figsize=(25,12))\nsns.barplot(x=aggregate_figures_per_genre.index.values, y=aggregate_figures_per_genre[\"average_rating\"])\nplt.xlabel(\"Genre\", fontsize=18)\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel(\"Average Rating (Stars)\", fontsize=18)\nplt.show()","ad1d540f":"rating_plot = plt.figure(figsize=(25,12))\nsns.barplot(x=aggregate_figures_per_genre.index.values, y=aggregate_figures_per_genre[\"average_price\"])\nplt.xlabel(\"Genre\", fontsize=18)\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel(\"Average Price ($)\", fontsize=18)\nplt.show()","de4182b0":"average_rating_by_category = playstore[\"Rating\"].groupby(playstore[\"Category\"]).mean()\nrating_plot = plt.figure(figsize=(25,12))\nsns.barplot(x=average_rating_by_category.index.values, y=average_rating_by_category.values)\nplt.xlabel(\"Price Point ($)\", fontsize=18)\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel(\"Average Rating (Stars)\", fontsize=18)\nplt.show()","ea12aa1e":"average_price_by_category = playstore[\"Price\"].groupby(playstore[\"Category\"]).mean()\nprice_plot = plt.figure(figsize=(25,12))\nsns.barplot(x=average_price_by_category.index.values, y=average_price_by_category.values)\nplt.ylabel(\"Price Point ($)\", fontsize=18)\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.xlabel(\"Category\", fontsize=18)\nplt.show()","f5e24224":"# Interesting questions\n\n* What factors might predict a higher rating?\n    * More reviews?\n    * More installs?\n    * Genre?\n    * Category?\n    * Price?\n    * Free \/ Paid?\n    * Review Sentiment_Polarity? (or some kind of measure balanced against subjectivity?)\n","a548134d":"## \"Price\" == \"Everyone\"\n\n### Investigation\n\nFirstly, I'll take a look at the rows that contain \"Everyone\" as the value for \"Price\"","405bf081":"# Import","b2fcb258":"I then created a separate dataframe with the aggregate figures for price and rating for each genre.","4c197577":"Index 10472 is looking much nicer.\n\n## \"Price\" == \"0\"\n### Investigation\nI have a strong hunch that this is the value given to free apps; I'll do a quick check here:","b314c498":"Alright, that's looking a lot more like currency.\n\nNow, to take a look at the Rating data.","a505f08f":"# Per Category Analysis\nFortunately, category didn't require much preparation to get it ready for analysis.\n## Visualisation\n### Average Price Per Category\nInterestingly, the \"Lifestyle\" *category* seems to suffer lower ratings than its *genre* counterpart. However, there appears to be a \"LIFESTYLE\" category that is doing a lot better. Does it make sense to merge these? I might do this in another version.\n\nApart from this, there is nothing particularly compelling about the display.","79b917bd":"This reveals some surprising insights:\n* the average price of a 0 star (unrated) app is almost \\$2 (maybe because they can't entice anyone to try it)\n* the average price of a 1 star (lowest rated) app is \\$0.28\n* the average price of a 5 star (highest rated) app is \\$0.37","4c7df4af":"I suspect this is the case when Reviews == 0. ","bad037b9":"### Conversion of \"Price\" values to float","cca6aad6":"And that has taken care of those 1,474 \"Ratings\" == NaN records.\n# Visualisations\n# Scatterplot of \"Price\" vs \"Rating\"","650a26d8":"## Visualisation\n\n### Average Ratings per Genre\nThe \"Trivia\" and \"Books & Reference\" genres are suffering low average ratings. Whether it is a particularly bad app or the genre underperforming as a whole might be worth further investigation for app developers wondering what genre they should target.","1d8b71a4":"### Cleaning\n\nIt looks like the scraper wasn't quite on target with this app. So I'll fix that here:","c3e154f3":"# Executive Summary\nThis Exploratory Data Analysis starts with some data cleaning and then visualisation of the playstore app data.\n\nImplications for potential [app development](http:\/\/localhost:8888\/notebooks\/projects\/google_play_store\/google_play_store.ipynb#Possible-Takeaways) and opportunities for [fraud detection](http:\/\/localhost:8888\/notebooks\/projects\/google_play_store\/google_play_store.ipynb#Fishiness?) were discussed. Specifically, some of the findings suggest there may be fake reviews or some other gaming of the system for some highly rated apps\n\nAs always, please provide candid and honest feedback :)","2831ed72":"# Quick Look Around\nI prefer printing the head of the dataframes as it gives me a better idea of the terrain. I might do a describe later.","612d088d":"#### Fishiness?\nScouting out one of these \"I Am Rich\" type apps, from the reviews, it seems like they introduce the app as initially free then pump up the price after they have got a certain number of downloads.\n\nIs there a way to classify the frauds from the legit apps? \n\nWould probably need some information on their price history.\n\nPerhaps the subjectivity might be able to say more about this.","9450e510":"It appears that we have a few unusual values over and above the expected \"$<dollar amount>\" format.\n* '0'\n* 'Everyone'","bcfd7e68":"# Possible Takeaways\n\nThese preliminary results suggest that a potential app developer might be able to maximise revenue by developing a finance, medical or lifestyle app.\n\nIf a developer is concerned with _revenue_ rather than net profit, this might provide a reasonable rule of thumb. However, some categories may have higher development costs; for example, developing a medical app might be more costly than developing an entertainment app.\n\nIn addition, some of the high performers in terms of price and rating in these categories seem dubious with some reviews pointing to practices that [might artifically inflate ratings](http:\/\/localhost:8888\/notebooks\/projects\/google_play_store\/google_play_store.ipynb#Fishiness?). Mining the review data might be a useful follow up to understand if there is actually a problem here.","43ca8a60":"All that tells me is that there are a lot of apps below the \\$30 mark\n\nWhat if I plotted the average price per rating?\n## Scatterplot of Ratings vs Average Price","491ea716":"## Scatterplot of Price vs Average Rating\nWhile snooping around on the data, I noticed that there were a bunch of apps that were priced above \\$50 and still rated reasonably high (above 3.5 stars). I have highlighted these in the figure below.","c7048e4f":"### Average Price per Category\nThis display tells a story similar to the per Genre analysis with the \"FINANCE\", \"LIFESTYLE\" and \"MEDICAL\" achieving a similar price performance to its genre counterparts.","abd07d2a":"Incorrect; there are _878_ instances of apps with a null rating but at least one review.\n\nWhat to do with these? I'm just going to set them (and other NaN ratings) to \"0\" (and later turn all the ratings into a float).","495f6be1":"### Average Price per Genre\n\nInterestingly, \"Medical\" is commanding a high price despite the relatively low average ratings seen above. Further investigation *might* reveal whether this is a genre that has a dissatisfied customer base that could be disrupted by a low cost entrant.","18966643":"### What are these really expensive apps?","617cfb23":"It looks like there is one (see above) exception to the rule. I'll fix that here\n\n(It also gives an important heads-up for another candidate for cleaning: apps with 0 reviews and, therefore, a rating of NaN)","df272c47":"# \"Rating\" == NaN\nBefore plotting commences, I want to deal with this funky data.   ","ce3589d3":"## Preparation\nThe first step is to separate the genres from each other and create dummy variables for easier querying. The dummy variables will be prefixed with \"gen_\".\n\nNot sure if iterrows is the right way to do this but I couldn't work out how to do it with apply.","d2aa64ef":"# Data Cleaning\nBefore creating a scatterplot, I can see that I need to convert the string values in the \"Price\" variable to float to better represent cash","5eb97c8b":"# Per Genre Analysis"}}