{"cell_type":{"2343dfe2":"code","0b0816cc":"code","e01689c7":"code","7924bc85":"code","aa7f5c77":"code","6e1da2cc":"code","1053507d":"code","eb85776a":"code","a4dca46d":"code","53c0d9f8":"code","ee70903f":"code","873d9251":"code","0ca5addd":"code","82edbc6a":"code","51bba2de":"code","3e468825":"code","0e020eaf":"code","77367752":"code","7f434b46":"code","221edec7":"code","2b8eb237":"code","730b5437":"code","f0338037":"code","64ab95f6":"code","e450fdd8":"code","608a7732":"code","3f4399f9":"code","cd2df0e1":"code","1ff288cf":"code","7c59e5f6":"code","ea7087ab":"code","5ff1c8cf":"code","282d07fc":"code","edeea68b":"markdown","6c86fd0c":"markdown","fef19e12":"markdown","05258cab":"markdown","1caeddfa":"markdown","5e207aaa":"markdown","ca079f5e":"markdown"},"source":{"2343dfe2":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0b0816cc":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.metrics import mean_squared_error\n\nfrom catboost import CatBoostRegressor, CatBoostClassifier, Pool\n\n%matplotlib inline","e01689c7":"dataset = pd.read_csv(\"\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv\")","7924bc85":"dataset.info()","aa7f5c77":"dataset.describe()","6e1da2cc":"list(dataset.columns)","1053507d":"dataset.nunique()","eb85776a":"dataset.isnull().sum()","a4dca46d":"def special_division(n, d):\n    return n \/ d if d else 0\n\ndataset['CPM'] = dataset.apply(lambda x: special_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)","53c0d9f8":"dataset.drop_duplicates(inplace=True)","ee70903f":"dataset.drop(\"revenue_share_percent\", axis=1, inplace=True)","873d9251":"dataset.drop(\"total_revenue\", axis=1, inplace=True)","0ca5addd":"dataset[\"date\"] = pd.to_datetime(dataset[\"date\"])","82edbc6a":"# Leave ~30% for test\ntrain = dataset.loc[dataset[\"date\"] <= pd.to_datetime(\"2019-06-21\")]\ntest = dataset.loc[dataset[\"date\"] > pd.to_datetime(\"2019-06-21\")]\ntest.shape[0], train.shape[0], test.shape[0] \/ (train.shape[0] + test.shape[0])","51bba2de":"# Excluding outliers\ntest = test[test.CPM >= 0]\ntest = test[test.CPM < test.CPM.quantile(.95)]\ntrain = train[train.CPM >= 0]\ntrain = train[train.CPM < train.CPM.quantile(.95)]","3e468825":"# train cpm mean\ntrain[\"CPM\"].mean()","0e020eaf":"# test cpm mean\ntest[\"CPM\"].mean()","77367752":"plt.figure(figsize=(12, 9))\nsns.countplot(pd.cut(train.loc[:, \"CPM\"], [-1, 0, 10, 100, 250, 500, 1000]))","7f434b46":"plt.figure(figsize=(12, 9))\nsns.countplot(pd.cut(test.loc[:, \"CPM\"], [-1, 0, 10, 100, 250, 500, 1000]))","221edec7":"plt.figure(figsize=(6, 6))\nsns.countplot(pd.cut(train.loc[:, \"CPM\"], [-1, 0, 1000]))","2b8eb237":"plt.figure(figsize=(12, 9))\nsns.countplot(pd.cut(test.loc[:, \"CPM\"], [0, 10, 100, 250, 500, 1000]))","730b5437":"train.columns","f0338037":"# Define categoracal features\ncats = [\"site_id\", \"ad_type_id\", \"geo_id\", \"device_category_id\",\n       \"advertiser_id\", \"order_id\", \"line_item_type_id\", \"os_id\",\n       \"monetization_channel_id\", \"ad_unit_id\"]","64ab95f6":"# Define target for classification\ntarget = train[\"CPM\"].apply(lambda x: 0 if x == 0 else 1)","e450fdd8":"train.drop(\"date\", axis=1, inplace=True)\ntest.drop(\"date\", axis=1, inplace=True)","608a7732":"params = {\n     \"loss_function\": \"Logloss\",\n     \"n_estimators\": 650,\n     \"eval_metric\": \"Accuracy\",\n     \"random_state\": 42,\n}","3f4399f9":"# Training classifier\nmodel_cat_clf = CatBoostClassifier(cat_features=cats, random_state=42, verbose=100)\nmodel_cat_clf.fit(train.drop(\"CPM\", axis=1), target)","cd2df0e1":"preds_0 = model_cat_clf.predict(data=test.drop(\"CPM\", axis=1))","1ff288cf":"# Separating 0 from other values\ntest_rest = test[preds_0 == 1]\ntrain_rest = train[train[\"CPM\"] != 0]","7c59e5f6":"# Training regression\nmodel_cat = CatBoostRegressor(cat_features=cats, random_state=42)\nmodel_cat.fit(train_rest.drop(\"CPM\", axis=1), train_rest[\"CPM\"], verbose=100)","ea7087ab":"preds = model_cat.predict(test_rest.drop(\"CPM\", axis=1))","5ff1c8cf":"# Uniting all predictions\ntest_rest[\"preds\"] = preds\ntest = test.join(test_rest[\"preds\"], how=\"left\")\ntest[\"preds\"].fillna(0, inplace=True)","282d07fc":"mean_squared_error(test[\"CPM\"].values, test[\"preds\"])","edeea68b":"### Modeling","6c86fd0c":"### Making target (CPM)","fef19e12":"### Preparing data for modeling","05258cab":"So, most of all CPMs is 0. We can use classification task for seperating 0 from other values and get better distribution","1caeddfa":"### Some EDA","5e207aaa":"### Loading data","ca079f5e":"#### MSE without outliers = 2835.566\n\nSo we can improve it by encoding categorical features and tuning models"}}