{"cell_type":{"3cacb3be":"code","4e8a0e9a":"code","5cca1aa5":"code","b2cef523":"code","dd2ad95d":"code","c745b98d":"code","40c3cc7a":"code","5a32d596":"code","c5aa321f":"code","e5d6ee0a":"code","8f35bbdc":"code","e8b7b4d9":"code","a00b8771":"code","98924da6":"code","a4c52a3b":"code","08df9966":"code","f74468b0":"code","243afed3":"code","ff826340":"code","7df9a9ee":"code","a5cf9411":"code","79c5f327":"code","451f6adc":"code","67d9ef7a":"code","99ea7052":"code","93aa92ab":"code","aeb67681":"code","2833fa62":"code","320692c4":"code","7e197947":"code","18edaafb":"code","aa855fea":"code","5440d65d":"code","fb565179":"code","03166cfa":"code","b14062ab":"code","3f074397":"code","ef0edd53":"code","9057c780":"code","c755c9dc":"code","b86cb073":"code","634c15e8":"code","bc4177c8":"code","9a475ab9":"code","b47ffa4b":"code","1deaa8a8":"code","bee6109b":"code","b9720d5b":"code","9debf6ea":"code","e9f41996":"code","83a257c2":"code","aceff454":"code","8f840721":"code","471284b4":"code","778ec8cd":"code","bb8b8393":"code","bf03076b":"code","f1b50121":"code","70f71b67":"code","90637e91":"code","eb6b8c4a":"markdown"},"source":{"3cacb3be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e8a0e9a":"import seaborn as sns\nimport matplotlib.pyplot as plt","5cca1aa5":"df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')","b2cef523":"sample = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","dd2ad95d":"df.head()","c745b98d":"sample.head()","40c3cc7a":"test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","5a32d596":"test.head()","c5aa321f":"df.shape","e5d6ee0a":"df['date_time'].head(30)","8f35bbdc":"df['date_time'][30:40]","e8b7b4d9":"(df['date_time'].shape[0]-6)\/24","a00b8771":"#data consists reading of each hour of around 296 days","98924da6":"df['date_time'].tail()","a4c52a3b":"sns.displot(df['target_benzene'])","08df9966":"plt.figure(figsize = (12,7))\nplt.subplot(1,2,1)\ntemp = plt.hist(df['target_carbon_monoxide'],bins = 100)\nplt.xlabel('target carbon monoxide')\nplt.ylabel('frequency')\nplt.subplot(1,2,2)\ntemp = plt.hist(df['target_nitrogen_oxides'],bins = 100)\nplt.xlabel('target nitrogen oxides')\nplt.ylabel('frequency')","f74468b0":"len(df['target_carbon_monoxide'].unique())","243afed3":"# Carbon monoxide can be considered a categorical variable","ff826340":"x = range(0,len(df['date_time']))\nplt.plot(x,df['target_benzene'])","7df9a9ee":"plt.figure(figsize = (12,10))\nplt.subplot(2,1,1)\nplt.plot(x,df['target_nitrogen_oxides'])\nplt.subplot(2,1,2)\nplt.plot(x,df['target_carbon_monoxide'])","a5cf9411":"# Data very irregular, time series prediction approach not possible.","79c5f327":"data = df.drop(columns = ['date_time'])","451f6adc":"print(data.columns)","67d9ef7a":"sns.displot(data['deg_C'])","99ea7052":"# Normal Distributed","93aa92ab":"plt.figure(figsize = (14,21))\nplt.subplot(4,2,1)\ntemp = plt.hist(data['sensor_1'],bins = 100)\nplt.xlabel('sensor 1 reading')\nplt.ylabel('frequency')\nplt.subplot(4,2,2)\ntemp = plt.hist(data['sensor_2'],bins = 100)\nplt.xlabel('sensor 2 reading')\nplt.ylabel('frequency')\nplt.subplot(4,2,3)\ntemp = plt.hist(data['sensor_3'],bins = 100)\nplt.xlabel('sensor 3 reading')\nplt.ylabel('frequency')\nplt.subplot(4,2,4)\ntemp = plt.hist(data['sensor_4'],bins = 100)\nplt.xlabel('sensor 4 reading')\nplt.ylabel('frequency')\nplt.subplot(4,2,5)\ntemp = plt.hist(data['sensor_5'],bins = 100)\nplt.xlabel('sensor 5 reading')\nplt.ylabel('frequency')\nplt.subplot(4,2,6)\ntemp = plt.hist(data['relative_humidity'],bins = 100)\nplt.xlabel('Relative Humidity')\nplt.ylabel('frequency')\nplt.subplot(4,2,7)\ntemp = plt.hist(data['absolute_humidity'],bins = 100)\nplt.xlabel('Absolute Humidity')\nplt.ylabel('frequency')\n","aeb67681":"labels = data[['target_benzene','target_carbon_monoxide','target_nitrogen_oxides']]","2833fa62":"data.drop(columns =['target_benzene','target_carbon_monoxide','target_nitrogen_oxides'],inplace = True )","320692c4":"from sklearn.preprocessing import Normalizer","7e197947":"n = Normalizer()","18edaafb":"n.fit(data)","aa855fea":"data_normal = n.transform(data)","5440d65d":"data_normal = pd.DataFrame(data_normal)","fb565179":"data_normal.columns = data.columns","03166cfa":"data_normal.head()","b14062ab":"import tensorflow.keras as keras","3f074397":"temp = data_normal\ntemp['target_carbon_monoxide'] = labels['target_carbon_monoxide']\ntemp['target_benzene'] = labels['target_benzene']\ntemp['target_nitrogen_oxides'] = labels['target_nitrogen_oxides']","ef0edd53":"data_normal.head()\n","9057c780":"from sklearn.model_selection import train_test_split\ntrain,val = train_test_split(temp,test_size = 0.2)","c755c9dc":"trainx = train[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]\ntrainy = train[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\nvalx = val[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]\nvaly = val[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]","b86cb073":"import tensorflow as tf\nimport math\nfrom keras import backend as K","634c15e8":"keras.backend.clear_session()\ndef scheduler(epoch, lr):\n#     if epoch < 10:\n#         return lr\n#     else:\n        return lr * tf.math.exp(-0.01)\ncallback = tf.keras.callbacks.LearningRateScheduler(scheduler)\nmodel = keras.models.Sequential([\n    keras.layers.Dense(6,input_dim = 8,activation= 'relu'),\n    keras.layers.Dense(4,activation= 'relu'),\n    keras.layers.Dense(3,activation= 'relu'),\n])\nmodel.compile(optimizer = tf.keras.optimizers.SGD(learning_rate = 10),loss  =tf.keras.losses.MeanSquaredLogarithmicError(),metrics = ['mse'])\nhistory = model.fit(trainx,trainy,callbacks = [callback],epochs = 500,verbose =0)","bc4177c8":"plt.semilogx(history.history['lr'],history.history['loss'])\n","9a475ab9":"keras.backend.clear_session()\nearly = keras.callbacks.EarlyStopping(patience = 20)\nmodel_check = keras.callbacks.ModelCheckpoint('model.h5',save_best_only = True)\nmodel = keras.models.Sequential([\n    keras.layers.Dense(6,input_dim = 8,activation= 'relu'),\n#     keras.layers.Dropout(0.5),\n    keras.layers.Dense(5,activation= 'relu'),\n#     keras.layers.Dropout(0.5),\n    keras.layers.Dense(3,activation= 'relu')\n])\nmodel.compile(loss  =tf.keras.losses.MeanSquaredLogarithmicError(),optimizer =  'adam',metrics = ['mse'])","b47ffa4b":"history = model.fit(trainx,trainy,callbacks = [model_check,early],verbose = 0,epochs = 500,validation_data = (valx,valy))","1deaa8a8":"plt.figure(figsize = (12,7))\nplt.subplot(2,1,1)\nplt.plot(range(1,501),history.history['loss'])\nplt.plot(range(1,501),history.history['val_loss'])\nplt.title('Validation and Train loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.subplot(2,1,2)\nplt.plot(range(1,501),history.history['mse'])\nplt.plot(range(1,501),history.history['val_mse'])\nplt.title('Validation and Train mse')\nplt.xlabel('epochs')\nplt.ylabel('mse')","bee6109b":"model = keras.models.load_model('model.h5')","b9720d5b":"test.head()","9debf6ea":"test = test.drop(columns = ['date_time'])","e9f41996":"test = n.transform(test)","83a257c2":"preditions = model.predict(test)","aceff454":"sample.head()","8f840721":"predictions= pd.DataFrame(preditions)","471284b4":"predictions.head()","778ec8cd":"sample['target_carbon_monoxide'] = predictions[0]","bb8b8393":"sample['target_benzene'] = predictions[1]","bf03076b":"sample['target_nitrogen_oxides'] = predictions[2]","f1b50121":"sample.to_csv('submit5.csv',index = False)","70f71b67":"test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","90637e91":"df.head()","eb6b8c4a":"# Work In Progress! Trying to improve from the score of 0.37. If you like my work please give your feedback! Upadate coming very soon."}}