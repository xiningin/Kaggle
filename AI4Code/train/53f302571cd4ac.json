{"cell_type":{"cad2b1bc":"code","7917e83d":"code","a6fbc980":"code","0040e4b7":"code","6ef56d5d":"code","7400e888":"code","8010c98a":"code","b8f660c7":"code","fe69d742":"code","621cfa69":"code","96216bbc":"code","65726ff4":"code","94ac67b2":"code","a333b774":"code","adbd7fbc":"markdown","3841bd28":"markdown","7f6d4081":"markdown","4dc1f877":"markdown","088ae3a4":"markdown","e32b0829":"markdown","8ba8cebd":"markdown"},"source":{"cad2b1bc":"class Calculator:\n    def __init__(self):\n        print(\"Hi, Ready to solve?\")","7917e83d":"cal_obj = Calculator()","a6fbc980":"class Sum(Calculator):\n    def sum(self,a,b):\n        return (a+b)    ","0040e4b7":"sum_obj = Sum()","6ef56d5d":"sum_obj.sum(2,3)","7400e888":"class Duck():\n    def fly(self):\n        print(\"Duck flying\")\n\nclass Sparrow:\n    def fly(self):\n        print(\"Sparrow flying\")","8010c98a":"duck = Duck()\nduck.fly()","b8f660c7":"sparrow = Sparrow()\nsparrow.fly()","fe69d742":"class Account:\n\n    def __init__(self,bank,ifsc):\n        self.Bank = bank                      \n        self.__IFSC = ifsc      # private variable\n    \n    def description(self):                \n        return (f\"{self.Bank},{self.__IFSC}\")\n    \n    \nobj = Account(\"PNB\",123986)\n\n\nprint(obj.description())     ","621cfa69":"print(obj.__IFSC) #accessing private variable directly gives error","96216bbc":"from abc import ABC, abstractmethod\nclass Atm(ABC) :\n    def __init__(self,name,acc_no):\n        self.holder = name\n        self.acc_no = acc_no\n    @abstractmethod\n    def validate(self,pin):\n        pass","65726ff4":"class user(Atm):\n    def validate(self,pin):\n        if pin == 13031999 :\n            return \"Correct\"\n        else :\n            return \"Try again with correct PIN\"","94ac67b2":"obj = user(\"Vishakha\",9852)\nobj.validate(67)","a333b774":"obj.validate(13031999)","adbd7fbc":"## Object-Oriented Programming:\nObject-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code:<br>\ndata in the form of fields (often known as attributes or properties) and, <br>\ncode in the form of procedures (often known as methods or behaviors ).","3841bd28":"## Object:\nAn object is a particular instance of a class.","7f6d4081":"## Encapsulation:\nEncapsulation refers to hiding variables or some implementation that may be changed so often in a class to prevent outsiders access it directly.<br>\nThey must access it via getter and setter methods.","4dc1f877":"## Class:\nA class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods).<br>\nUnlike the primitive data structures, Classes are the data structures that users define.","088ae3a4":"## Polymorphism:\nPolymorphism means having many forms i.e, one thing can take different forms.<br>\nIn OOP, it refers to the functions having the same names but carrying different functionalities.\n#### Ways of Implementing Polymorphism:\n- Duck Typing\n- Operator Overloading\n- Method Overloading\n- Method Overriding","e32b0829":"## Abstraction:\nAbstraction refers to hiding the internal details or implementations of a function and showing its functionalities only. <br>\nThis is similar to the way we know how to turn ON or OFF a light using a switch but we do not care about what is happening behind the socket.","8ba8cebd":"## Inheritance:\nInheritance is the procedure in which one class inherits the attributes and methods of another class.<br>\nThe class whose properties and methods are inherited is known as Parent(Super or Base) class .\nThe class that inherits the properties from the parent class is known as Child(Sub or Derived) class.<br>\nAlong with the inherited properties and methods, a child class can have its own properties and methods."}}