{"cell_type":{"72162ded":"code","59b8efc1":"code","051a305a":"code","ef8af4ae":"code","a3a9d5d1":"code","edd5c731":"code","10e028b0":"code","6405bf21":"code","afc7c335":"code","49c6453e":"code","d13b8705":"code","8c8d2f12":"code","3a37be56":"code","1c04277b":"code","fdb4aad3":"code","698c3294":"code","8a172626":"code","2c136168":"code","4772364b":"code","2a1e1c0c":"code","c656d313":"code","4c7d2e71":"code","59d729d1":"code","7bcc7552":"markdown","fafa4b25":"markdown","03cf4b1d":"markdown","e079ebc3":"markdown","b985b99b":"markdown","53ea14ed":"markdown","a7714f16":"markdown"},"source":{"72162ded":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59b8efc1":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport imblearn\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score","051a305a":"df=pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndf.head()","ef8af4ae":"sns.countplot(df.Class)","a3a9d5d1":"fig, ax = plt.subplots(1, 2, figsize=(16,5))\n\namount_val = df['Amount'].values\ntime_val = df['Time'].values\n\nsns.distplot(amount_val, ax=ax[0])\nax[0].set_title('Distribution of Transaction Amount', fontsize=12)\nax[0].set_xlim([min(amount_val), max(amount_val)])\n\nsns.distplot(time_val, ax=ax[1])\nax[1].set_title('Distribution of Transaction Time', fontsize=12)\nax[1].set_xlim([min(time_val), max(time_val)])\n\n\n\nplt.show()","edd5c731":"# Make sure we use the subsample in our correlation\n\nf, (ax1) = plt.subplots(1, 1, figsize=(24,20))\n\n# Entire DataFrame\ncorr = df.corr()\nsns.heatmap(corr, cmap='coolwarm_r', annot_kws={'size':20}, ax=ax1)\nax1.set_title(\"Imbalanced Correlation Matrix \\n (don't use for reference)\", fontsize=14)\n\n\n","10e028b0":"f, axes = plt.subplots(ncols=4, figsize=(20,4))\n\nsns.boxplot(x=\"Class\", y=\"V17\", data=df, palette='pastel', ax=axes[0])\naxes[0].set_title('V17 vs Class Negative Correlation')\n\nsns.boxplot(x=\"Class\", y=\"V14\", data=df, palette='pastel', ax=axes[1])\naxes[1].set_title('V14 vs Class Negative Correlation')\n\n\nsns.boxplot(x=\"Class\", y=\"V12\", data=df, palette='pastel', ax=axes[2])\naxes[2].set_title('V12 vs Class Negative Correlation')\n\n\nsns.boxplot(x=\"Class\", y=\"V10\", data=df, palette='pastel', ax=axes[3])\naxes[3].set_title('V10 vs Class Negative Correlation')\n\nplt.show()","6405bf21":"from scipy.stats import norm\n\nf, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(20, 6))\n\nv14_fraud_dist = df['V14'].loc[df['Class'] == 1].values\nsns.distplot(v14_fraud_dist,ax=ax1, fit=norm, color='#FB8861')\nax1.set_title('V14 Distribution \\n (Fraud Transactions)', fontsize=14)\n\nv12_fraud_dist = df['V12'].loc[df['Class'] == 1].values\nsns.distplot(v12_fraud_dist,ax=ax2, fit=norm, color='#56F9BB')\nax2.set_title('V12 Distribution \\n (Fraud Transactions)', fontsize=14)\n\n\nv10_fraud_dist = df['V10'].loc[df['Class'] == 1].values\nsns.distplot(v10_fraud_dist,ax=ax3, fit=norm, color='#C5B3F9')\nax3.set_title('V10 Distribution \\n (Fraud Transactions)', fontsize=14)\n\nplt.show()","afc7c335":"X=df.drop('Class', axis=1)\ny=df['Class']\noversample = SMOTE()\nX, y = oversample.fit_resample(X, y)\nsns.countplot(y)","49c6453e":"df1=pd.concat([X,y], axis=1)\nsns.distplot(df1['Time'])","d13b8705":"sns.distplot(df1['Amount'])","8c8d2f12":"sns.scatterplot(x='Time', y='Amount', hue='Class', data=df1)","3a37be56":"plt.figure(figsize=(20,18))\nsns.heatmap(df1.corr(),annot=True, cmap=\"Blues\")","1c04277b":"rob_scaler = RobustScaler()\ndf1['Amount'] = rob_scaler.fit_transform(df1['Amount'].values.reshape(-1, 1))\ndf1['Time'] = rob_scaler.fit_transform(df1['Time'].values.reshape(-1, 1))\n","fdb4aad3":"fig, ax = plt.subplots(1, 2, figsize=(16,5))\n\namount_val = df1['Amount'].values\ntime_val = df1['Time'].values\n\nsns.distplot(amount_val, ax=ax[0])\nax[0].set_title('Distribution of Transaction Amount', fontsize=12)\nax[0].set_xlim([min(amount_val), max(amount_val)])\n\nsns.distplot(time_val, ax=ax[1])\nax[1].set_title('Distribution of Transaction Time', fontsize=12)\nax[1].set_xlim([min(time_val), max(time_val)])\n\n\n\nplt.show()","698c3294":"df1.isnull().sum()","8a172626":"X=df1.drop('Class', axis=1)\ny=df1['Class']\nX_train,X_test, y_train, y_test= train_test_split(X,y, test_size=0.2)","2c136168":"def predict(model,X_train, X_test, y_train, y_test):\n    model.fit(X_train,y_train)\n    preds=model.predict(X_test)\n    print(confusion_matrix(y_test,preds))\n    print(classification_report(y_test,preds))\n    \n    return accuracy_score(y_test,preds)","4772364b":"models=['LR', 'XGB', 'CAT','RF']\nacc=[]","2a1e1c0c":"predict(LogisticRegression(), X_train, X_test, y_train, y_test)","c656d313":"predict(XGBClassifier(),X_train,X_test, y_train, y_test)","4c7d2e71":"predict(CatBoostClassifier(),X_train,X_test, y_train, y_test)","59d729d1":"predict(RandomForestClassifier(),X_train,X_test, y_train, y_test)","7bcc7552":"# Logistic Regression","fafa4b25":"# Data Loading","03cf4b1d":"# Cat boost","e079ebc3":"# Xgboost","b985b99b":"# MSMOTE to handle imbalanced data","53ea14ed":"# Credit card fraud\nITI Alex G1\n\n* Nouhrhan Elaraby\n* Lujain Kotb\n* Ibrahim Yaseen\n* Mohamed Abd Elrazik\n* Sondos Omar","a7714f16":"# RF"}}