{"cell_type":{"aaf8843d":"code","b8fedb54":"code","f79c9d20":"code","f7dd9400":"code","af9474ab":"code","256335fe":"code","4778b8dc":"code","2d90a0f6":"code","035e7647":"code","c7e3a88a":"code","2f0dd663":"code","34001208":"code","980046c8":"code","f41a05eb":"code","e872650b":"code","b8208035":"code","9a2f3854":"code","7b738c08":"code","d3f68d29":"code","0e9dea87":"code","4766b057":"code","6acb806e":"code","7519af3a":"code","61c5f3c4":"code","85787a2e":"code","f363a13d":"code","9610beff":"code","dc448f0e":"code","f1fd7ed1":"code","147ea17e":"code","e07101e8":"code","63b19e62":"code","00640d5a":"code","5721c5ff":"markdown","41a995c7":"markdown"},"source":{"aaf8843d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b8fedb54":"df_train = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat\/train.csv\")\ndf_train.head()","f79c9d20":"df_test = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat\/test.csv\")\ndf_test.head()","f7dd9400":"target = df_train[\"target\"]","af9474ab":"df_train.drop(\"target\", inplace=True, axis=1)","256335fe":"df_train[\"train_test\"] = 1\ndf_test[\"train_test\"] = 0","4778b8dc":"df_full = pd.concat([df_train, df_test], axis=0)\ndf_full.shape","2d90a0f6":"binaries = [col for col in df_full.columns if \"bin_\" in col]\nbinaries","035e7647":"nominals = [col for col in df_full.columns if \"nom_\" in col]\nnominals","c7e3a88a":"for nom_col in nominals:\n    unique_vals = df_full[nom_col].unique()\n    print(f\"nominal: {nom_col}, unique_vals={len(unique_vals)}\")","2f0dd663":"for nom_col in nominals:\n    unique_vals = df_full[nom_col].unique()\n    unique_vals.sort()\n    print(f\"nominal: {nom_col}, unique_vals={len(unique_vals)}\")\n    if len(unique_vals) < 100:\n        for val in unique_vals:\n            print(f'\"{val}\" ', end='')\n    print()\n    print()","34001208":"ordinals = [col for col in df_full.columns if \"ord_\" in col]\nordinals","980046c8":"for ord_col in ordinals:\n    unique_vals = df_full[ord_col].unique()\n    print(f\"ordinal: {ord_col}, unique_vals={len(unique_vals)}\")","f41a05eb":"for ord_col in ordinals:\n    unique_vals = df_full[ord_col].unique()\n    if ord_col == \"ord_5\":\n        unique_vals = sorted(unique_vals, key=str.swapcase)\n    else:\n        unique_vals.sort()\n    print(f\"ordinal: {ord_col}, unique_vals={len(unique_vals)}\")\n    for val in unique_vals:\n        print(f'\"{val}\" ', end='')\n    print()\n    print()\n","e872650b":"kaggle_level = {'Novice':1,'Contributor':2,'Expert':3,'Master':4,'Grandmaster':5}\ndf_full['ord_1'] = df_full['ord_1'].map(kaggle_level)","b8208035":"temperature = {'Freezing':1,'Cold':2,'Warm':3,'Hot':4,'Boiling Hot':5,'Lava Hot':6}\ndf_full['ord_2'] = df_full['ord_2'].map(temperature)","9a2f3854":"letter_cols = [\"ord_3\", \"ord_4\", \"ord_5\"]\nfor ord_col in letter_cols:\n    mapping = {}\n    unique_vals = df_full[ord_col].unique()\n    if ord_col == \"ord_5\":\n        continue\n#        unique_vals = sorted(unique_vals, key=str.swapcase)\n    else:\n        unique_vals.sort()\n    index = 0\n    for val in unique_vals:\n        mapping[val] = index\n        index += 1\n    df_full[ord_col] = df_full[ord_col].map(mapping)","7b738c08":"import string\n\nstring_chars = string.ascii_letters\nstring_chars","d3f68d29":"print(len(string_chars))\nchars = int(len(string_chars)\/2)\nprint(chars)","0e9dea87":"index = 1\nchar_map = {}\n#string_chars = string_chars[::-1]\nfor val in string_chars:\n    char_map[val] = index\n    index += 1\n\nfor k,v in char_map.items():\n    print(f'{k}={v} ', end='')\n","4766b057":"def calc_org5(o5_chars):\n    count_chars = len(char_map)\n    c1 = o5_chars[0]\n    c2 = o5_chars[1]\n    #print(c1)\n    val1 = char_map[c1]*count_chars\n    val1 += char_map[c2]\n    return val1\n\ndf_full[\"ord_5\"] = df_full[\"ord_5\"].map(lambda x: calc_org5(x))\ndf_full.head()","6acb806e":"cyclicals = [\"day\", \"month\"]\ncyclicals","7519af3a":"for cyc_col in cyclicals:\n    unique_vals = df_full[cyc_col].unique()\n    print(f\"cyclical: {cyc_col}, unique_vals={len(unique_vals)}\")\n#    print(df_train[nom_col].unique())","61c5f3c4":"from sklearn import preprocessing\n\nlabel_encoders = {}\nto_label_encode = nominals + [\"bin_3\", \"bin_4\"]","85787a2e":"for col in to_label_encode:\n    le = preprocessing.LabelEncoder()\n    le.fit(df_full[col])\n    df_full[col] = le.transform(df_full[col])\n    label_encoders[col] = le","f363a13d":"for col in [binaries + nominals + cyclicals]:\n    df_full[col] = df_full[col].astype(\"category\")","9610beff":"for col in ordinals:\n    print(col)\n    df_full[col] = df_full[col].astype(\"int16\")","dc448f0e":"df_train = df_full[df_full[\"train_test\"] == 1].copy()\ndf_test = df_full[df_full[\"train_test\"] == 0].copy()","f1fd7ed1":"df_train.drop(\"train_test\", axis=1, inplace=True)\ndf_train.columns","147ea17e":"df_test.drop(\"train_test\", axis=1, inplace=True)\ndf_test.columns","e07101e8":"df_train[\"target\"] = target.astype(np.uint8)\ndf_train.to_csv(\"df_train.csv\")\ndf_test.to_csv(\"df_test.csv\")","63b19e62":"df_train.dtypes","00640d5a":"import pickle\n\ndef pickle_dataframe(df, filename):\n    filehandler = open(f\"{filename}.pkl\",\"wb\")\n    pickle.dump(df,filehandler)\n    filehandler.close()\n\npickle_dataframe(df_train, \"df_train\")\npickle_dataframe(df_test, \"df_test\")","5721c5ff":"# Hello\n\nA very simple kernel to do basic preprocessing. To add the kernel output as input elsewhere later, and just run some classifiers or other processing on it.","41a995c7":"Ord 3-5 are sorted by string.ascii_letters, so turn them into numerical features in that order. For 3-4 the basic sort works, for 5th, need to sort a [a bit different](https:\/\/stackoverflow.com\/questions\/28136374\/python-sort-strings-alphabetically-lowercase-first) to take into account that string.ascii_letters has lower case before upper case."}}