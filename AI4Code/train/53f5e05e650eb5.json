{"cell_type":{"293f22be":"code","1678b65b":"code","5261d46d":"code","a26d539c":"code","56f2a600":"code","310e7f63":"code","6b429cac":"code","706ee37c":"code","2202a8c6":"code","ae5fdd58":"code","3000bf78":"code","4bf703ea":"code","de46d316":"code","5bd2c16c":"code","c387a284":"code","13554fef":"code","91b35da2":"code","d785a94b":"code","b3746231":"code","e79c4c54":"code","da6fd8e9":"code","3f8104a8":"code","b4e9404b":"code","5e105f05":"code","a2c1ee77":"code","44ceb8fe":"code","6dd48272":"code","6a5eb841":"code","bd81f9e9":"code","7243a6b3":"code","b3d00f2a":"code","3f7f32a0":"code","18f1503c":"code","37eb7f1f":"code","2d9d6204":"code","4770ca22":"code","8681a395":"code","0c82f3d0":"code","47f41dbc":"code","4779a359":"code","ab4df18e":"code","7360f4da":"code","8333a654":"code","f3a32cbb":"code","8135195d":"code","b0b3c484":"code","97d49885":"code","0bca2cb8":"code","7d0f6163":"code","3d0bce29":"code","c6982b20":"markdown","f1ddbf68":"markdown","2f18c541":"markdown","1a99a112":"markdown","1c3157c0":"markdown","920588f3":"markdown","773b61e7":"markdown","a8a00896":"markdown","e4d05a8f":"markdown","bc39c484":"markdown","68ebe865":"markdown","128f0316":"markdown","dd04789c":"markdown"},"source":{"293f22be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(style='darkgrid')\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","1678b65b":"df=pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')\ndf","5261d46d":"df.isnull().sum()","a26d539c":"df.info()","56f2a600":"df['GRE Score'].unique()","310e7f63":"df['TOEFL Score'].unique()","6b429cac":"df['University Rating'].value_counts()","706ee37c":"df['SOP'].unique()","2202a8c6":"df.columns","ae5fdd58":"df.rename(columns={'LOR ':'LOR','Chance of Admit ':'Chance of Admit'},inplace=True)","3000bf78":"df['LOR'].value_counts()","4bf703ea":"df['Research'].value_counts()","de46d316":"df.drop(columns=['Serial No.'],axis=1,inplace=True)","5bd2c16c":"for i in df.columns:\n    if i=='Research':\n        continue\n    else:\n        \n        plt.figure(figsize=(10,6))\n        sns.distplot(df[i])\n        plt.xlabel(i,fontsize=13)\n        plt.title('Distribution of {}'.format(i),fontsize=15)\n        plt.show()\n        print('\\n')\n","c387a284":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['TOEFL Score'])\nplt.xlabel('GRE Scores',fontsize=13)\nplt.ylabel('TOFEL Scores',fontsize=13)\nplt.title('Distribution of Gre and Tofel scores',fontsize=15)\nplt.show()","13554fef":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['University Rating'])\nplt.xlabel('GRE Scores',fontsize=13)\nplt.ylabel('University ratings',fontsize=13)\nplt.title('Distribution of Gre and University ratings',fontsize=15)\nplt.show()","91b35da2":"plt.figure(figsize=(15,6))\nsns.scatterplot(df['GRE Score'],df['Chance of Admit'],hue=df['Research'])\nplt.xlabel('GRE Scores',fontsize=13)\nplt.ylabel('Chance of Admit',fontsize=13)\nplt.title('GRE Scores VS Chance of Admit',fontsize=15)\nplt.show()","d785a94b":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['LOR'],hue=df['Research'])\nplt.xlabel('GRE Scores',fontsize=13)\nplt.ylabel('LOR',fontsize=13)\nplt.show()","b3746231":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['CGPA'])\nplt.xlabel('GRE score',fontsize=13)\nplt.ylabel('CGPA',fontsize=13)\nplt.show()","e79c4c54":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['CGPA'],hue=df['Research'])\nplt.xlabel('GRE score',fontsize=13)\nplt.ylabel('CGPA',fontsize=13)\nplt.show()","da6fd8e9":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['SOP'],hue=df['Research'])\nplt.xlabel('GRE score',fontsize=13)\nplt.ylabel('SOP',fontsize=13)\nplt.show()","3f8104a8":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['TOEFL Score'],df['CGPA'],hue=df['Research'])\nplt.xlabel('TOEFL score',fontsize=13)\nplt.ylabel('CGPA',fontsize=13)\nplt.title('TOEFL score VS CGPA',fontsize=15)\nplt.show()","b4e9404b":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['CGPA'],df['Chance of Admit'],hue=df['Research'])\nplt.xlabel('CGPA',fontsize=13)\nplt.ylabel('Chance of Admit',fontsize=13)\nplt.title('CGPA  VS Chance of Admit',fontsize=15)\nplt.show()","5e105f05":"plt.figure(figsize=(10,6))\nsns.scatterplot(df['GRE Score'],df['CGPA'])\nplt.xlabel('GRE Score',fontsize=13)\nplt.ylabel('CGPA',fontsize=13)\nplt.title('GRE Score  VS CGPA',fontsize=15)\nplt.show()","a2c1ee77":"df.describe()","44ceb8fe":"sns.pairplot(df)\nplt.show()","6dd48272":"plt.figure(figsize=(10,6))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","6a5eb841":"from sklearn.model_selection import train_test_split","bd81f9e9":"X=df.drop(columns=['Chance of Admit'])\nY=df['Chance of Admit']\nX.shape,Y.shape","7243a6b3":"X_train, X_test, y_train, y_test=train_test_split(X,Y,test_size=0.23,random_state=23)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","b3d00f2a":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train_sc=sc.fit_transform(X_train)\nX_test_sc=sc.transform(X_test)","3f7f32a0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\n\n#metrics evaluation\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import cross_val_score","18f1503c":"from sklearn.pipeline import Pipeline","37eb7f1f":"pipeline_lr=Pipeline([('lr_regression',LinearRegression())])\npipeline_ls=Pipeline([('lasso_regression',Lasso())])\npipeline_rd=Pipeline([('Ridge_regression',Ridge())])\npipeline_dt=Pipeline([('DecisionTree_regression',DecisionTreeRegressor())])\npipeline_knn=Pipeline([('KNN',KNeighborsRegressor())])\npipeline_rf=Pipeline([('RandomForestRegressor',RandomForestRegressor())])\npipeline_ad=Pipeline([('Adaboosting',AdaBoostRegressor())])\npipeline_gb=Pipeline([('GradientBoosting',GradientBoostingRegressor())])\npipeline_xg=Pipeline([('Xgboost',XGBRegressor())])\npipeline_svm=Pipeline([('SVM',SVR())])","2d9d6204":"pipelines=[pipeline_lr,pipeline_ls,pipeline_rd,pipeline_dt,pipeline_knn,pipeline_rf,pipeline_ad,\n          pipeline_gb,pipeline_xg,pipeline_svm]","4770ca22":"for pipe in pipelines:\n    pipe.fit(X_train,y_train)","8681a395":"pipe_dict={0:'Linear Regression',1: 'Lasso Regression', 2:'Ridge Regression',3:'DecisonTree',4: 'KNN',5:'RandomForestRegressor',6:'Adaboosting',7:'Gradientboosting',\n          8:'Xgboost',9:'SVM'}","0c82f3d0":"for i,model in enumerate(pipelines):\n    print(pipe_dict[i])\n    print('-'*20)\n    print('cross_val_score_{} : {}'.format(pipe_dict[i],\n                                           (cross_val_score(model,X_train,y_train,cv=5,scoring='explained_variance')).mean()))\n    \n    \n    print('Mean_squared_error_{} : {}'.format(pipe_dict[i],mean_squared_error(y_test,model.predict(X_test))))\n    \n    print('RMSE_{}: {}'.format(pipe_dict[i],np.sqrt(mean_squared_error(y_test,model.predict(X_test)))))\n    \n    print('R2square_{} : {}'.format(pipe_dict[i],r2_score(y_test,model.predict(X_test))))\n    print('\\n')","47f41dbc":"best_r2square=0.0\nbest_regressor=0\nbest_pipeline=''","4779a359":"for i,model in enumerate(pipelines):\n     if r2_score(y_test,model.predict(X_test))>best_r2square:\n            best_r2square=r2_score(y_test,model.predict(X_test))\n            \n            best_pipeline=model\n            best_regressor=i\nprint(\"Regressor with best r2square is {}\".format(pipe_dict[best_regressor]))","ab4df18e":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nimport time","7360f4da":"def gridrandomized(feature,clf,X,Y,parameters,scoring):\n    if feature=='Random':\n        search_obj=RandomizedSearchCV(estimator=clf,param_distributions=parameters,scoring=scoring,n_jobs=-1,cv=5)\n    elif feature=='Grid':\n        search_obj=GridSearchCV(estimator=clf,param_grid=parameters,scoring=scoring,n_jobs=-1,cv=5)\n    \n    start=time.time() \n    fit_obj=search_obj.fit(X,Y)\n    end=time.time()\n    print(\"The total time taken to execute {}\".format(end-start))\n    best_obj=fit_obj.best_estimator_\n    print((best_obj))\n    best_params=fit_obj.best_params_\n    print((best_params))\n    best_score=fit_obj.best_score_\n    print((best_score))\n    ","8333a654":"pipe=Pipeline([('regressor',RandomForestRegressor())])\ngrid_param=[\n            {\n             'regressor':[Lasso()],\n             'regressor__alpha':[x for x in [0.1,0.2,0.3,0.5,0.8,1,100]],\n             'regressor__normalize':[False,True],\n             'regressor__max_iter':[i for i in [1000,1300,1500,1800]]\n            },\n   \n            {\n             'regressor':[Ridge()],\n             'regressor__alpha':[x for x in [0.1,0.2,0.3,0.5,0.8,1,100]],\n             'regressor__normalize':[False,True],\n             'regressor__max_iter':[i for i in [1000,1300,1500]]\n             },\n    \n            {\n             'regressor':[KNeighborsRegressor()],\n             'regressor__n_neighbors':[x for x in range(5,40,3)],\n             'regressor__leaf_size':[30,35,40,45],\n             'regressor__weights':['uniform', 'distance'],\n             'regressor__algorithm':['auto', 'ball_tree','kd_tree','brute'],\n             'regressor__n_jobs':[-1]\n            },\n    \n            {\n             'regressor':[DecisionTreeRegressor()],\n             'regressor__max_depth':[x for x in range(2,40,3)],\n             'regressor__max_features':['auto', 'sqrt'],\n             'regressor__min_samples_split': [x for x in [2,3,4,5,6,7,8,9,10,11,12]], \n             'regressor__min_samples_leaf':[1,2,3,4,5,6,7,8,9,10,11]\n            },\n    \n            {\n             'regressor':[RandomForestRegressor()],\n             'regressor__criterion':['gini','entropy'],\n             'regressor__n_estimators':[10,15,20,25,30],\n             'regressor__min_samples_leaf':[1,2,3],\n             'regressor__min_samples_split':[3,4,5,6,7], \n             'regressor__n_jobs':[-1]\n            },\n    \n            {\n            'regressor':[AdaBoostRegressor()],\n            'regressor__n_estimators':[50,100],\n            'regressor__learning_rate':[0.01,0.05,0.1,0.3,1],\n            'regressor__loss':['linear', 'square', 'exponential']\n            },\n   \n            {\n             'regressor':[GradientBoostingRegressor()],\n             'regressor__learning_rate':[0.1,0.3,0.5,0.6],\n             'regressor__n_estimators':[100,150,200],\n             'regressor__min_samples_split':[2,3,4],\n             'regressor__max_depth':[3,5,7,10],\n             'regressor__max_features':['sqrt','auto'],\n             'regressor__alpha':[0.9]\n            },\n    \n            {\n             'regressor':[XGBRegressor()],\n             'regressor__max_depth':[3, 4, 5, 6, 8, 10, 12, 15],\n             'regressor__min_child_weight':[1, 3, 5, 7],\n             'regressor__gamma':[0.0, 0.1, 0.2 , 0.3, 0.4],\n             'regressor__colsample_bytree':[0.3, 0.4, 0.5 , 0.7]},\n    \n            {\n             'regressor':[SVR()],\n             'regressor__kernel':['linear','rbf'],\n             'regressor__C':[6,7,8,9,10,11,12]\n            }\n            ]\nscorings='neg_mean_squared_error'","f3a32cbb":"gridrandomized(feature='Grid',clf=pipe,X=X_train,Y=y_train,scoring=scorings,parameters=grid_param)","8135195d":"from sklearn.pipeline import make_pipeline","b0b3c484":"pipe=Pipeline([('regressor',Ridge())])\ngrid_param=[{\n    'regressor':[Ridge()],\n             'regressor__alpha':[x for x in [0.1,0.2,0.3,0.5,0.8,1,100]],\n             'regressor__normalize':[False,True],\n             'regressor__max_iter':[i for i in [1000,1300,1500]]\n}]\ngrid_search=GridSearchCV(pipe,grid_param,cv=5,n_jobs=-1,scoring='neg_mean_squared_error')\nbest_model=grid_search.fit(X_train,y_train)","97d49885":"best_model.best_estimator_","0bca2cb8":"rd=Ridge(alpha=0.5,max_iter=1000)\nmodel=rd.fit(X_train,y_train)\nprint(\"The mse is {}\".format(mean_squared_error(y_test,model.predict(X_test))))\nprint(\"The rmse is {}\".format(np.sqrt(mean_squared_error(y_test,model.predict(X_test)))))\nprint(\"The r2square is {}\".format(r2_score(y_test,model.predict(X_test))))","7d0f6163":"def ask():\n    GRE=int(input(\"Enter GRE score: \"))\n    if GRE > 340:\n        print(\"ERROR, Score should be less than 340\")\n        print(\"ENTER SCORES AGAIN\")\n        GRE=int(input(\"Enter GRE score again: \"))\n    else:\n         pass\n        \n    TOEFL=int(input('Enter TOEFL score: '))\n    if TOEFL>120:\n        print(\"ERROR, Score should be less than 120\")\n        print(\"ENTER SCORES AGAIN\")\n        TOEFL=int(input(\"Enter TOEFL score again: \"))\n    else:\n        pass\n        \n    University_Rating=float(input('Enter University_Rating'))\n    if University_Rating>5:\n        print(\"ERROR, Ratings should ranges from 0-5\")\n        print(\"ENTER RATINGS AGAIN\")\n        University_Rating=float(input(\"Enter ratings again: \"))\n    else:\n        pass\n        \n    SOP=float(input('Enter SOP rating'))\n    if SOP>5:\n        print(\"ERROR, Ratings should ranges from 0-5\")\n        print(\"ENTER RATINGS AGAIN\")\n        SOP=float(input(\"Enter ratings again: \"))\n    else:\n        pass\n        \n    LOR=float(input('Enter LOR rating'))\n    if LOR>5:\n        print(\"ERROR, Ratings should ranges from 0-5\")\n        print(\"ENTER RATINGS AGAIN\")\n        LOR=float(input(\"Enter ratings again: \"))\n    else:\n        pass\n        \n    CGPA=float(input('Enter CGPA points'))\n    if CGPA>10:\n        print(\"ERROR, CGPA Should ranges from 0-10\")\n        print(\"ENTER CGPA AGAIN\")\n        CGPA=float(input(\"Enter cgpa again: \"))\n    else:\n        pass\n    \n    Research=input('Yes or No: ')\n    if Research=='Yes':\n        Research=1\n    elif Research=='No':\n        Research=0\n    else:\n        print( 'enter correctly')\n        Research=input('Yes or No')\n    \n    final=model.predict([[GRE,TOEFL,University_Rating,SOP,LOR,CGPA,Research]])\n    return \"The chance of admit is {}\".format(final)","3d0bce29":"ask()","c6982b20":"- Students with highergre scores have higher cgpa ","f1ddbf68":"- Students with higher gre scores having the chances of admission is more.\n- with higher gre scores have opted for Research ","2f18c541":"- most of the students cgpa is in between 8.0 to 8.5.\n- with higher cgpa chance of admit is high .\n- research is opted more when cgpa is 9.0 and above.","1a99a112":"- From 8.0 to 9.0 cgpa,toefl scores are between 100 to 110 .\n","1c3157c0":"##### *TOFEL*\n- The TOEFL iBT test is scored on a scale of 0 to 120 points.\n- Each of the four sections (Reading, Listening, Speaking, and Writing) receives a scaled score from 0 to 30. The scaled scores from the four sections are added together to determine the total score.\n","920588f3":"- Cgpa and Gre scores have high impact on the chances of admit.","773b61e7":"- Students with higher gre scores (320 and above) have got admission in University ratings of 4 and 5.\n- and gre scores of 300 to 320 have got admission in university ratings of 2 and 3 most when compared to 4.","a8a00896":"- It is justified that people with higher gre scores have higher tofel scores.","e4d05a8f":"### Hyperparameter Tuning","bc39c484":"### Content\n- The dataset contains several parameters which are considered important during the application for Masters Programs.\n- The parameters included are :\n\n- 1.GRE Scores ( out of 340 )\n- 2.TOEFL Scores ( out of 120 )\n- 3.University Rating ( out of 5 )\n- 4.Statement of Purpose and Letter of Recommendation Strength ( out of 5 )\n- 5.Undergraduate GPA ( out of 10 )\n- 6.Research Experience ( either 0 or 1 )\n- 7.Chance of Admit ( ranging from 0 to 1 )","68ebe865":"- cgpa 9 and above all  students(max) have opted for research","128f0316":"##### *GRE*\n- The Graduate Record Examinations (GRE) is a standardized test that is an admissions requirement for many graduate       schools in the United States and Canada.The GRE is owned and administered by Educational Testing Service (ETS).\n- The test was established in 1936 by the Carnegie Foundation for the Advancement of Teaching.\n- GRE scores range from 130 to 170 per section. The GRE max score is 340 (combined scores range from 260-340). Another important fact when considering \u201cgood\u201d scores: The average GRE score is about 305, or 150 in Verbal and around 154 in Quant.\n","dd04789c":"- Students with ratings of (3.5 and above) LOR have opted for research."}}