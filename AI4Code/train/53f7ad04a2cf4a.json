{"cell_type":{"54d3c774":"code","1c77171f":"code","88a495b1":"code","d7ec5de4":"code","96245645":"code","1383204e":"code","3b905032":"code","7992e571":"code","ab9836f1":"code","a0089891":"code","559604da":"code","769f640c":"code","43a03714":"code","4c057950":"code","8e91f21f":"code","47596671":"code","106b996b":"code","c850d65e":"code","253f4cd6":"code","e3c46954":"markdown","a1d4ffd2":"markdown","a1133409":"markdown","6d22de63":"markdown"},"source":{"54d3c774":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nwarnings.filterwarnings('ignore')","1c77171f":"df_train = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/train.csv\")\ntrain_action = df_train.action_seq.unique()","88a495b1":"base_path = \"..\/input\/makedatayaw\/\"","d7ec5de4":"def add_describe_as_features(row):\n    file_path = row['file_path']\n    df = pd.read_csv(base_path + file_path)\n    s = df.describe().unstack(1)\n    return s.tolist()","96245645":"df = pd.read_csv('..\/input\/makedatayaw\/test\/test_0000.csv')\nlist_columns = ['_'.join(idx).strip() for idx in df.describe().unstack(1).index]","1383204e":"df.columns","3b905032":"df_train[list_columns] = df_train.apply(add_describe_as_features, axis=1, result_type='expand')\ndf_train","7992e571":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train['action_seq'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('action_seq')\nax[0].set_ylabel('')\nsns.countplot('action_seq',data=df_train,ax=ax[1])\nax[1].set_title('action_seq')\nplt.show()","ab9836f1":"df_train[\"length_time\"] = df_train[\"Time_max\"] - df_train[\"Time_min\"]\ndf_train[\"mean\"] = df_train.groupby(\"action_seq\")[\"length_time\"].transform(\"mean\")","a0089891":"temp = df_train.groupby(\"action_seq\")[[\"length_time\"]].mean().reset_index()","559604da":"temp","769f640c":"sns.barplot(x = \"length_time\", y=\"action_seq\", data = temp)","43a03714":"column_num = 3\nline = int(np.ceil(len(train_action)\/column_num))","4c057950":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,6000) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 10 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=\"row\")\n    plt.legend()     \nplt.show()","8e91f21f":"time_cut_file = df_train[df_train[\"length_time\"]>=6500].file_path\ntime_cut_file","47596671":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,6500) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 10 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            if file_path in list(time_cut_file):\n                df_temp = df_temp[df_temp.Time >= 3000].reset_index(drop=True)\n                df_temp.Time = df_temp.Time - 3000\n                \n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=\"row\")\n        else:\n            break\n    plt.legend()     \nplt.show()","106b996b":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,6500) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 5 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            Time_ = df_temp.pop(\"Time\")\n            # \u898b\u3084\u3059\u3044\u3088\u3046\u306bMinMaxScaler\u306b\u304b\u3051\u3066\u304a\u304d\u307e\u3059\n            scaler = MinMaxScaler()\n            df_temp.iloc[:] = scaler.fit_transform(df_temp)\n            df_temp[\"ratio\"] = (df_temp[\"ELBOW_L\"]+1) \/ (df_temp[\"ELBOW_R\"]+1)\n            df_temp[\"Time\"] = Time_\n            if file_path in list(time_cut_file):\n\n                df_temp = df_temp[df_temp.Time >= 3000].reset_index(drop=True)\n                df_temp.Time = df_temp.Time - 3000\n                \n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"ratio\"],label=\"row\")\n        else:\n            break\n    plt.legend()     \nplt.show()","c850d65e":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,6500) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 5 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            if file_path in list(time_cut_file):\n\n                df_temp = df_temp[df_temp.Time >= 3000].reset_index(drop=True)\n                df_temp.Time = df_temp.Time - 3000\n                \n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"GYRO_X\"],label=\"row\")\n        else:\n            break\n    plt.legend()     \nplt.show()","253f4cd6":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,3000) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 5 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            time_ = float(df_temp.Time[-1:].values)\n            df_temp = df_temp[df_temp.Time <= time_\/3].reset_index(drop=True)\n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=\"row\")\n        else:\n            break\n    plt.legend()     \nplt.show()","e3c46954":"\u6642\u9593\u3068\u52d5\u4f5c\u306e\u9577\u3055\u306b\u76f8\u95a2\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3057\u305f\u304c\uff0c\u305d\u3093\u306a\u306b\u7c21\u5358\u3067\u306f\u306a\u304b\u3063\u305f\uff0e","a1d4ffd2":"\u307e\u3060\uff0c\u3088\u304f\u308f\u304b\u3089\u3093\uff0cjab,upper\u306a\u3069\u306e\u69cb\u6210\u8981\u7d20\u306b\u5206\u3051\u3066\u5b66\u7fd2\u3092\u3057\u305f\u3044\uff0e\uff0e\uff0e\uff0e","a1133409":"model\u306e\u5909\u6570\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d\uff08https:\/\/www.kaggle.com\/mugentk\/model-mean-to-describe\uff09\n\u53c2\u8003\n","6d22de63":"\u3053\u308c\u3092\u3067\u304d\u308b\u3060\u3051\u5206\u6563\u304c\u5c11\u306a\u304f\u306a\u308b\u3088\u3046\u306b\u6642\u9593\u306e\u51e6\u7406\u3057\u3066\u307f\u308b"}}