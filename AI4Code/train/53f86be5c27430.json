{"cell_type":{"cb0107c2":"code","f73418b5":"code","cec1318d":"code","0b266e5f":"code","447bb1a3":"code","6ad27d1c":"code","67d5b251":"code","b82ee544":"code","0ddb9b78":"code","7856dd0a":"code","44306c4b":"code","7d1cc0a2":"code","3555586e":"code","1e7bcff3":"code","a1b7a512":"code","07affd40":"code","6ad17dc1":"code","0969227d":"code","190fcd95":"code","55a5d64c":"code","09837085":"code","22b26731":"code","b59c88dd":"code","65d8573c":"code","b3e9917d":"code","8ebeff2a":"code","ffd4f238":"code","79ff093c":"code","0af6d9f5":"code","7f5b2f23":"code","ad6e5940":"code","7621e4cf":"code","7ab93255":"code","205d9712":"code","8420a9ff":"code","218569ff":"code","7b8c1214":"code","d3ea0629":"code","4b09c241":"code","988b43ae":"code","000fd4d6":"code","806abc44":"code","c2aea4ef":"code","194129b5":"code","801afba7":"code","9ccf4ac6":"code","ea90ea78":"code","d81fbf4a":"code","165c4fc5":"code","2336af1c":"code","d74b8f82":"code","3a5aa335":"code","505aaf8b":"code","0efa41a7":"code","3576b916":"code","5105b478":"code","a39833ff":"code","ea9911c2":"code","a83efa11":"code","36af364b":"code","110bc1b1":"code","67366441":"code","5c5fe0e5":"code","f1de6fd2":"code","ccb419b7":"code","c078b2ac":"code","17f60674":"code","7bbb362d":"code","2689c1cb":"code","373b7d1c":"code","d151e2bd":"code","c2249950":"code","6635f17a":"code","c73c5408":"code","45c99dae":"code","7c08c0df":"code","5b28e48f":"code","77dfb05a":"code","9351399b":"code","ec819ada":"code","2ac67d0d":"code","e909bee7":"code","f42703de":"code","91d75525":"code","2967221a":"code","7db63681":"code","657a4923":"code","743a322b":"code","d2a2222a":"code","cef00c16":"code","04544024":"code","daed9f58":"code","a2666c42":"code","d7eb1803":"code","99eb24fe":"code","b6b9ad21":"code","59492c22":"code","fa0482d2":"code","1ae889e5":"code","ad49379b":"code","6027cea0":"code","280d89bb":"code","0241b2c4":"code","9fedde48":"code","6a01f257":"code","44f7aa9d":"code","96932d5f":"code","c122cda1":"code","167ba98c":"code","a58f2620":"markdown","ad4e94cc":"markdown","7b0d0a84":"markdown","e798c945":"markdown","beb4529d":"markdown","814c8fba":"markdown","70f6f6d2":"markdown","b0dd5bee":"markdown","1b844ed7":"markdown","e94a0923":"markdown","174186d2":"markdown","df7a2800":"markdown","35d1f651":"markdown","d0f1f1dd":"markdown","d7e1cbaa":"markdown","030dc079":"markdown","8a4c5449":"markdown","e6c66abf":"markdown","15ad9f62":"markdown","38f0edaf":"markdown","3d58a513":"markdown","41c16e4a":"markdown","cd8c5e06":"markdown","7b35c6fa":"markdown","55205789":"markdown","953f5200":"markdown","e69ba5ac":"markdown","b0141afc":"markdown","c935e544":"markdown","a13ca156":"markdown","c6f5b236":"markdown","547d0bb5":"markdown","1826b632":"markdown","b4828fe7":"markdown","f209ff3b":"markdown","742fdc65":"markdown","0a966c03":"markdown","db686d35":"markdown","19cb65e4":"markdown","10927b37":"markdown","ad5c4631":"markdown"},"source":{"cb0107c2":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport gc","f73418b5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cec1318d":"pd.options.display.float_format = '{:,.4f}'.format\npd.set_option('display.max_columns', 500)\npd.set_option('max_colwidth', 500)\npd.set_option('max_columns', 500)\npd.set_option('max_rows', 100)","0b266e5f":"# train = pd.read_csv('\/kaggle\/input\/microsoft-malware-prediction\/train.csv')\n# Reading data as usual causes memory error, so we will try to utilize the variables size.","447bb1a3":"# https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data\ndtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float32',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int16',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float64',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float32',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float32',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float64',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float64',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float64',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","6ad27d1c":"train_df = pd.read_csv('..\/input\/microsoft-malware-prediction\/train.csv', dtype=dtypes)","67d5b251":"# train_df = train_full_df.sample(2000000)","b82ee544":"train_viz = train_df.sample(1500000)","0ddb9b78":"train_df.info()","7856dd0a":"test_df = pd.read_csv('..\/input\/microsoft-malware-prediction\/test.csv', dtype=dtypes)","44306c4b":"test_df.info()","7d1cc0a2":"# https:\/\/www.kaggle.com\/faridsharaf\/ashrae-project\n# Function to reduce the DF size\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","3555586e":"train_df = reduce_mem_usage(train_df)","1e7bcff3":"train_viz = reduce_mem_usage(train_viz)","a1b7a512":"test_df = reduce_mem_usage(test_df)","07affd40":"train_df.shape","6ad17dc1":"test_df.shape","0969227d":"sns.catplot(x='HasDetections', kind=\"count\", palette=\"mako\", data=train_viz)","190fcd95":"train_df.HasDetections.value_counts()","55a5d64c":"train_viz.head(10)","09837085":"sns.catplot(x='IsBeta', kind=\"count\", palette=\"mako\", data=train_viz)","22b26731":"top_browsers = train_viz['DefaultBrowsersIdentifier'].value_counts().head(10).index\ntop_browsers\n# top_browsers = train_viz[train_viz['DefaultBrowsersIdentifier'].isin(top_browsers)]['DefaultBrowsersIdentifier'].value_counts()","b59c88dd":"sns.countplot(data=train_viz, x='DefaultBrowsersIdentifier', \n              order=train_viz.DefaultBrowsersIdentifier.value_counts().index[:10],\n             palette=\"mako\")","65d8573c":"sns.countplot(data=train_viz, x='SmartScreen', \n              order=train_viz.SmartScreen.value_counts().index[:5],\n              hue='HasDetections',\n             palette=\"mako\")","b3e9917d":"sns.countplot(data=train_viz, x='Census_OSBuildNumber', \n              order=train_viz.Census_OSBuildNumber.value_counts().index[:5],\n              hue='HasDetections',\n             palette=\"mako\")","8ebeff2a":"sns.countplot(data=train_viz, x='AVProductsInstalled', \n              order=train_viz.AVProductsInstalled.value_counts().index[:5],\n              hue='HasDetections',\n             palette=\"mako\")","ffd4f238":"sns.countplot(data=train_viz, x='AVProductsEnabled', \n              order=train_viz.AVProductsEnabled.value_counts().index[:5],\n              hue='HasDetections',\n             palette=\"mako\")","79ff093c":"(train_df.isnull().sum()*100\/train_df.shape[0]).sort_values(ascending=False)[:10] # to get %","0af6d9f5":"train_df.Census_ProcessorClass.value_counts()","7f5b2f23":"test_df.Census_ProcessorClass.isnull().sum()\/test_df.shape[0]","ad6e5940":"test_df.Census_ProcessorClass.value_counts()","7621e4cf":"test_df.PuaMode.isnull().sum()\/test_df.shape[0]","7ab93255":"test_df.Census_ProcessorClass.isnull().sum()\/test_df.shape[0]","205d9712":"dropped_features = []\ndropped_features.append('PuaMode')\ndropped_features.append('Census_ProcessorClass')\ndropped_features","8420a9ff":"train_df.DefaultBrowsersIdentifier.value_counts()","218569ff":"(train_df.isnull().sum()*100\/train_df.shape[0]).sort_values(ascending = False)[:10]","7b8c1214":"train_df.DefaultBrowsersIdentifier.value_counts().head(10)","d3ea0629":"train_df.DefaultBrowsersIdentifier.fillna(0, inplace=True)","4b09c241":"test_df.DefaultBrowsersIdentifier.fillna(0, inplace=True)","988b43ae":"train_df.Census_IsFlightingInternal.value_counts()","000fd4d6":"dropped_features.append('Census_IsFlightingInternal')","806abc44":"train_df.Census_InternalBatteryType.value_counts()","c2aea4ef":"train_df.Census_InternalBatteryType.isnull().sum()\/train_df.shape[0]","194129b5":"trans_dict = {\n    '\u001f\u02d9\u02d9\u02d9': 'unknown',\n    'unkn': 'unknown', \n    'l\u0006& ': 'unknown',\n    'li\u00ff\u00ff': 'unknown',\n    'li? ': 'unknown',\n    'd   ': 'unknown',\n    '\u00ed\u0003-i': 'unknown',\n    '\u00f7\u00ff\u00f3\u00f6': 'unknown',\n    '0ts0': 'unknown',\n    'li-l': 'unknown',\n    'li\u0090o': 'unknown',\n    '\u001f\u02d9\u02d9\u02d9': 'unknown',\n    'l\u0015  ': 'unknown',\n    '@i\uf8f5\uf8f5': 'unknown',\n    'l\u00ff\u00ff\u00ff': 'unknown',\n    np.nan: 'unknown'\n}\ntrain_df.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)","801afba7":"test_df.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)","9ccf4ac6":"train_df.Census_ThresholdOptIn.value_counts()   ","ea90ea78":"train_df.Census_IsWIMBootEnabled.value_counts()","d81fbf4a":"dropped_features.append('Census_ThresholdOptIn')\ndropped_features.append('Census_IsWIMBootEnabled')","165c4fc5":"train_df.SmartScreen.value_counts()","2336af1c":"trans_dict = {\n    'off': 'Off', \n    '&#x02;': '2', \n    '&#x01;': '1', \n    'on': 'On', \n    'requireadmin': 'RequireAdmin', \n    'OFF': 'Off', \n    'Promt': 'Prompt', \n    'requireAdmin': 'RequireAdmin', \n    'prompt': 'Prompt', \n    'warn': 'Warn', \n    '00000000': '0', \n    '&#x03;': '3', \n    np.nan: 'NoExist'\n}\ntrain_df.replace({'SmartScreen': trans_dict}, inplace=True)","d74b8f82":"test_df.replace({'SmartScreen': trans_dict}, inplace=True)","3a5aa335":"train_df.SmartScreen.value_counts()","505aaf8b":"train_df.OrganizationIdentifier.value_counts()","0efa41a7":"train_df.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)","3576b916":"test_df.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)","5105b478":"(train_df.isnull().sum()*100\/train_df.shape[0]).sort_values(ascending = False)[:20]","a39833ff":"dropped_features.append('MachineIdentifier')","ea9911c2":"sk_df = pd.DataFrame([{'column': c, 'uniq': train_df[c].nunique(), \n                       'skewness': train_df[c].value_counts(normalize=True).values[0] * 100} \n                      for c in train_df.columns])\nsk_df = sk_df.sort_values('skewness', ascending=False)\nsk_df","a83efa11":"train_df.Census_DeviceFamily.value_counts()","36af364b":"dropped_features.append('Census_DeviceFamily')","110bc1b1":"dropped_features.append('Census_IsFlightsDisabled')\ndropped_features.append('IsBeta')\ndropped_features.append('SMode')\ndropped_features.append('AutoSampleOptIn')\ndropped_features.append('Census_IsPortableOperatingSystem')\ndropped_features.append('Census_IsVirtualDevice')\ndropped_features.append('UacLuaenable')","67366441":"train_df.drop(dropped_features, axis = 1, inplace=True)\nprint(train_df.shape)","5c5fe0e5":"(train_df.isnull().sum()*100\/train_df.shape[0]).sort_values(ascending = False)[:20]","f1de6fd2":"train_df.Census_InternalBatteryType.fillna('unknown', inplace = True)","ccb419b7":"test_df.Census_InternalBatteryType.fillna('unknown', inplace = True)","c078b2ac":"train_df.dropna(inplace = True)\nprint(train_df.shape)","17f60674":"train_df['SmartScreen'] = train_df.SmartScreen.astype('category')\ntrain_df['Census_InternalBatteryType'] = train_df.Census_InternalBatteryType.astype('category')","7bbb362d":"cat_cols = train_df.select_dtypes(include='category').columns.tolist()","2689c1cb":"cols = train_df.select_dtypes(include=np.number).columns.tolist()\nlen(cols)","373b7d1c":"plt.figure(figsize=(15,15))\ncorr_cols = cols[:15]\ncorr_cols.append('HasDetections')\nsns.heatmap(train_df[corr_cols].corr(), cmap='Spectral', annot=True, center=0.0)\nplt.title('Correlation between 1 ~ 15th columns')\nplt.show()","d151e2bd":"# keep the variables that has more values variation and drop the others\ndropped_correlated = []","c2249950":"train_df.IsSxsPassiveMode.value_counts()","6635f17a":"train_df.RtpStateBitfield.value_counts()","c73c5408":"dropped_correlated.append('RtpStateBitfield')","45c99dae":"plt.figure(figsize=(15,15))\ncorr_cols = cols[15:30]\ncorr_cols.append('HasDetections')\nsns.heatmap(train_df[corr_cols].corr(), cmap='Spectral', annot=True, center=0.0)\nplt.title('Correlation between 15 ~ 30th columns')\nplt.show()","7c08c0df":"plt.figure(figsize=(15,15))\ncorr_cols = cols[30:]\nsns.heatmap(train_df[corr_cols].corr(), cmap='Spectral', annot=True, center=0.0)\nplt.title('Correlation between 15 ~ 30th columns')\nplt.show()","5b28e48f":"print('Census_OSUILocaleIdentifier: ', len(train_df.Census_OSUILocaleIdentifier.value_counts()))\nprint('Census_OSInstallLanguageIdentifier: ', len(train_df.Census_OSInstallLanguageIdentifier.value_counts()))","77dfb05a":"dropped_correlated.append('Census_OSUILocaleIdentifier')","9351399b":"corr = train_df[cols].corr()\nhigh_corr = ((corr >= 0.95) | (corr <= -0.95)).astype('uint8')\nplt.figure(figsize=(15,15))\nsns.heatmap(high_corr, cmap='Spectral', annot=True, center=0.0)\nplt.show()","ec819ada":"print('OsBuild: ', len(train_df.OsBuild.value_counts()))\nprint('Census_OSBuildNumber: ', len(train_df.Census_OSBuildNumber.value_counts()))","2ac67d0d":"dropped_correlated.append('Census_OSBuildNumber')","e909bee7":"dropped_correlated","f42703de":"train_df.drop(dropped_correlated, axis = 1, inplace = True)","91d75525":"gc.collect()","2967221a":"train_df.shape","7db63681":"final_cols = train_df.columns.to_list()\nfinal_cols.remove('HasDetections')\nfinal_cols","657a4923":"test_df = test_df[final_cols]\ntest_df.shape","743a322b":"(test_df.isnull().sum()*100\/test_df.shape[0]).sort_values(ascending=False)[:20] # to get %","d2a2222a":"test_df.dropna(inplace = True)","cef00c16":"test_df.shape","04544024":"train_df.head(10)","daed9f58":"train_df['OsBuildLab'] = train_df['OsBuildLab'].cat.add_categories(['0.0.0.0.0-0'])\ntrain_df['OsBuildLab'] = train_df['OsBuildLab'].fillna('0.0.0.0.0-0')\ntest_df['OsBuildLab'] = test_df['OsBuildLab'].cat.add_categories(['0.0.0.0.0-0'])\ntest_df['OsBuildLab'] = test_df['OsBuildLab'].fillna('0.0.0.0.0-0')","a2666c42":"# https:\/\/www.kaggle.com\/artgor\/is-this-malware-eda-fe-and-lgb-updated#Feature-engineering-and-transformation\ndef feature_engineering(df):\n    df['EngineVersion_2'] = df['EngineVersion'].apply(lambda x: x.split('.')[2]).astype('category')\n    df['EngineVersion_3'] = df['EngineVersion'].apply(lambda x: x.split('.')[3]).astype('category')\n\n    df['AppVersion_1'] = df['AppVersion'].apply(lambda x: x.split('.')[1]).astype('category')\n    df['AppVersion_2'] = df['AppVersion'].apply(lambda x: x.split('.')[2]).astype('category')\n    df['AppVersion_3'] = df['AppVersion'].apply(lambda x: x.split('.')[3]).astype('category')\n\n    df['AvSigVersion_0'] = df['AvSigVersion'].apply(lambda x: x.split('.')[0]).astype('category')\n    df['AvSigVersion_1'] = df['AvSigVersion'].apply(lambda x: x.split('.')[1]).astype('category')\n    df['AvSigVersion_2'] = df['AvSigVersion'].apply(lambda x: x.split('.')[2]).astype('category')\n\n    df['OsBuildLab_0'] = df['OsBuildLab'].apply(lambda x: x.split('.')[0]).astype('category')\n    df['OsBuildLab_1'] = df['OsBuildLab'].apply(lambda x: x.split('.')[1]).astype('category')\n    df['OsBuildLab_2'] = df['OsBuildLab'].apply(lambda x: x.split('.')[2]).astype('category')\n    df['OsBuildLab_3'] = df['OsBuildLab'].apply(lambda x: x.split('.')[3]).astype('category')\n    \n    df['Census_OSVersion_0'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[0]).astype('category')\n    df['Census_OSVersion_1'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[1]).astype('category')\n    df['Census_OSVersion_2'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[2]).astype('category')\n    df['Census_OSVersion_3'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[3]).astype('category')\n    \n    df['aspect_ratio'] = df['Census_InternalPrimaryDisplayResolutionHorizontal']\/ df['Census_InternalPrimaryDisplayResolutionVertical']\n    \n    df['Screen_Area'] = (df['aspect_ratio']* (df['Census_InternalPrimaryDiagonalDisplaySizeInInches']**2))\/(df['aspect_ratio']**2 + 1)\n\n    df['ram_per_processor'] = df['Census_TotalPhysicalRAM']\/ df['Census_ProcessorCoreCount']\n\n    df['new_num_0'] = df['Census_InternalPrimaryDiagonalDisplaySizeInInches'] \/ df['Census_ProcessorCoreCount']\n\n    df['new_num_1'] = df['Census_ProcessorCoreCount'] * df['Census_InternalPrimaryDiagonalDisplaySizeInInches']\n    \n    return df","d7eb1803":"train_df = feature_engineering(train_df)\ntest_df = feature_engineering(test_df)","99eb24fe":"train_df.head()","b6b9ad21":"import lightgbm as lgb\nimport xgboost as xgb\nimport time\nimport datetime\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom catboost import CatBoostClassifier\nfrom tqdm import tqdm_notebook\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport logging\n\nlogging.basicConfig(filename='log.txt',level=logging.DEBUG, format='%(asctime)s %(message)s')","59492c22":"cat_cols = [col for col in train_df.columns if col not in ['MachineIdentifier', 'Census_SystemVolumeTotalCapacity', 'HasDetections'] and str(train_df[col].dtype) == 'category']\nlen(cat_cols)","fa0482d2":"train = reduce_mem_usage(train_df)\ntest = reduce_mem_usage(test_df)\ngc.collect()\ndel train_df, test_df","1ae889e5":"def frequency_encoding(variable):\n    t = pd.concat([train[variable], test[variable]]).value_counts().reset_index()\n    t = t.reset_index()\n    t.loc[t[variable] == 1, 'level_0'] = np.nan\n    t.set_index('index', inplace=True)\n    max_label = t['level_0'].max() + 1\n    t.fillna(max_label, inplace=True)\n    return t.to_dict()['level_0']","ad49379b":"for col in tqdm_notebook(cat_cols):\n    freq_enc_dict = frequency_encoding(col)\n    train[col] = train[col].map(lambda x: freq_enc_dict.get(x, np.nan))\n    test[col] = test[col].map(lambda x: freq_enc_dict.get(x, np.nan))","6027cea0":"%%time\nindexer = {}\nfor col in cat_cols:\n    # print(col)\n    _, indexer[col] = pd.factorize(train[col].astype(str), sort=True)\n    \nfor col in tqdm_notebook(cat_cols):\n    # print(col)\n    train[col] = indexer[col].get_indexer(train[col].astype(str))\n    test[col] = indexer[col].get_indexer(test[col].astype(str))\n    \n    train = reduce_mem_usage(train, verbose=False)\n    test = reduce_mem_usage(test, verbose=False)","280d89bb":"del indexer","0241b2c4":"train = train.sample(2000000)","9fedde48":"y = train['HasDetections']\ntrain = train.drop('HasDetections', axis=1)\ngc.collect()","6a01f257":"n_fold = 5\nfolds = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=15)","44f7aa9d":"from numba import jit\n# fast roc_auc computation: https:\/\/www.kaggle.com\/c\/microsoft-malware-prediction\/discussion\/76013\n@jit\ndef fast_auc(y_true, y_prob):\n    y_true = np.asarray(y_true)\n    y_true = y_true[np.argsort(y_prob)]\n    nfalse = 0\n    auc = 0\n    n = len(y_true)\n    for i in range(n):\n        y_i = y_true[i]\n        nfalse += (1 - y_i)\n        auc += y_i * nfalse\n    auc \/= (nfalse * (n - nfalse))\n    return auc\n\ndef eval_auc(preds, dtrain):\n    labels = dtrain.get_label()\n    return 'auc', fast_auc(labels, preds), True\n\n# idea from this kernel: https:\/\/www.kaggle.com\/fabiendaniel\/detecting-malwares-with-lgbm\ndef predict_chunk(model, test):\n    initial_idx = 0\n    chunk_size = 1000000\n    current_pred = np.zeros(len(test))\n    while initial_idx < test.shape[0]:\n        final_idx = min(initial_idx + chunk_size, test.shape[0])\n        idx = range(initial_idx, final_idx)\n        current_pred[idx] = model.predict(test.iloc[idx], num_iteration=model.best_iteration)\n        initial_idx = final_idx\n    #predictions += current_pred \/ min(folds.n_splits, max_iter)\n    return current_pred\n\n\ndef train_model(X=train, X_test=test, y=y, params=None, folds=folds, model_type='lgb', plot_feature_importance=False, averaging='usual', make_oof=False):\n    result_dict = {}\n    if make_oof:\n        oof = np.zeros(len(X))\n    prediction = np.zeros(len(X_test))\n    scores = []\n    feature_importance = pd.DataFrame()\n    for fold_n, (train_index, valid_index) in enumerate(folds.split(X, y)):\n        gc.collect()\n        print('Fold', fold_n + 1, 'started at', time.ctime())\n        X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n        y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n        \n        \n        if model_type == 'lgb':\n            train_data = lgb.Dataset(X_train, label=y_train, categorical_feature = cat_cols, free_raw_data=False)\n            valid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature = cat_cols, free_raw_data=False)\n            \n            model = lgb.train(params,\n                    train_data,\n                    num_boost_round=2000,\n                    valid_sets = [train_data, valid_data],\n                    verbose_eval=500,\n                    early_stopping_rounds = 200,\n                    feval=eval_auc)\n\n            del train_data, valid_data\n            \n            y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n            del X_valid\n            gc.collect()\n            # print('predicting on test')\n            # y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n            y_pred = predict_chunk(model, X_test)\n            # print('predicted')\n            \n        if model_type == 'xgb':\n            train_data = xgb.DMatrix(data=X_train, label=y_train)\n            valid_data = xgb.DMatrix(data=X_valid, label=y_valid)\n\n            watchlist = [(train_data, 'train'), (valid_data, 'valid_data')]\n            model = xgb.train(dtrain=train_data, num_boost_round=20000, evals=watchlist, early_stopping_rounds=200, verbose_eval=500, params=params)\n            y_pred_valid = model.predict(xgb.DMatrix(X_valid), ntree_limit=model.best_ntree_limit)\n            #y_pred = model.predict(xgb.DMatrix(X_test), ntree_limit=model.best_ntree_limit)\n            y_pred = predict_chunk(model, xgb.DMatrix(X_test))\n            \n        if model_type == 'lcv':\n            model = LogisticRegressionCV(scoring='roc_auc', cv=3)\n            model.fit(X_train, y_train)\n\n            y_pred_valid = model.predict(X_valid)\n            # y_pred = model.predict(X_test)\n            y_pred = predict_chunk(model, X_test)\n            \n        if model_type == 'cat':\n            model = CatBoostRegressor(iterations=20000,  eval_metric='AUC', **params)\n            model.fit(X_train, y_train, eval_set=(X_valid, y_valid), cat_features=[], use_best_model=True, verbose=False)\n\n            y_pred_valid = model.predict(X_valid)\n            # y_pred = model.predict(X_test)\n            y_pred = predict_chunk(model, X_test)\n        \n        if make_oof:\n            oof[valid_index] = y_pred_valid.reshape(-1,)\n            \n        scores.append(fast_auc(y_valid, y_pred_valid))\n        print('Fold roc_auc:', roc_auc_score(y_valid, y_pred_valid))\n        print('')\n        \n        if averaging == 'usual':\n            prediction += y_pred\n        elif averaging == 'rank':\n            prediction += pd.Series(y_pred).rank().values\n        \n        if model_type == 'lgb':\n            # feature importance\n            fold_importance = pd.DataFrame()\n            fold_importance[\"feature\"] = X.columns\n            fold_importance[\"importance\"] = model.feature_importance()\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n\n    prediction \/= n_fold\n    \n    print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))\n    \n    if model_type == 'lgb':\n        \n        if plot_feature_importance:\n            feature_importance[\"importance\"] \/= n_fold\n            cols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n                by=\"importance\", ascending=False).index\n\n            best_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n            logging.info('Top features')\n            for f in best_features.sort_values(by=\"importance\", ascending=False)['feature'].values:\n                logging.info(f)\n\n            plt.figure(figsize=(16, 12));\n            sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\n            plt.title('LGB Features (avg over folds)');\n            \n            result_dict['feature_importance'] = feature_importance\n            \n    result_dict['prediction'] = prediction\n    if make_oof:\n        result_dict['oof'] = oof\n    \n    return result_dict","96932d5f":"# params from https:\/\/www.kaggle.com\/fabiendaniel\/detecting-malwares-with-lgbm\nparams = {'num_leaves': 256,\n         'min_data_in_leaf': 42,\n         'objective': 'binary',\n         'max_depth': 5,\n         'learning_rate': 0.05,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.8,\n         \"bagging_freq\": 5,\n         \"bagging_fraction\": 0.8,\n         \"bagging_seed\": 11,\n         \"lambda_l1\": 0.15,\n         \"lambda_l2\": 0.15,\n         \"random_state\": 42,          \n         \"verbosity\": -1}","c122cda1":"del freq_enc_dict","167ba98c":"result_dict1 = train_model(X=train, X_test=test, y=y, params=params, model_type='lgb', plot_feature_importance=True, averaging='rank')","a58f2620":"## Missing Data Imputation","ad4e94cc":"## IsBeta","7b0d0a84":"## AVProductsEnabled","e798c945":"Check correlation between variables and each other to lower the dimensions.  \nFor better visualizations, we will draw each 10 columns separated.","beb4529d":"## Census_OSBuildNumber","814c8fba":"# EDA","70f6f6d2":"now we will drop the null values and columns that we selected before.","b0dd5bee":"around 70% of the data is null, and some values are defected so we will fix them and impute missing to be one category called **unknown**.","1b844ed7":"### Census_ProcessorClass","e94a0923":"### SmartScreen","174186d2":"* Machine Identifier has no value here as it doesn't indicate anything about the malware and it is only one record per each machine.\n* The data description has nothing about ProductName, EngineVersion, AppVersion but we may extract some good info from them that indicates something about being hit by a malware.","df7a2800":"# Skewness Check","35d1f651":"# Correlation Test","d0f1f1dd":"### Census_IsFlightingInternal","d7e1cbaa":"values are not variant, so we will drop it.","030dc079":"### DefaultBrowsersIdentifier","8a4c5449":"### PuaMode","e6c66abf":"## AVProductsInstalled","15ad9f62":"### OrganizationIdentifier","38f0edaf":"# Data Exploration","3d58a513":"# Encoding","41c16e4a":"The two features that have 99% missing values are almost useless, so we will consider dropping them.  \nWe will check the 95% and 83% values using correlation or feature impotance later.","cd8c5e06":"Now lets check the correlation between all features","7b35c6fa":"## SmartScreen","55205789":"Next is to look for the missing values.","953f5200":"### Census_ThresholdOptIn","e69ba5ac":"# Missing Values","b0141afc":"so it also have 99% of values missing in test data, it will not be useful in train or test.","c935e544":"### DefaultBrowsersIdentifier","a13ca156":"## DefaultBrowsersIdentifier","c6f5b236":"in Default Browser variable, we may consider all the missing values to be one category and assign a number to it.","547d0bb5":"Census of flighting internal has almost one value so it is useless","1826b632":"To start working with the data, we might need to make feature selection, we have 82 feature with many data types which might contain some highly corrleated values, skewed or null values, making them useless.","b4828fe7":"We will load variables as following: \n* load objects as categories.\n* Binary values are switched to int8\n* Binary values with missing values are switched to float16 (int does not understand nan), it is possible to use category here as well.\n* 64 bits encoding are all switched to 32, or 16 of possible","f209ff3b":"RtpStateBitfield has more values, so we will remove it.","742fdc65":"# Target Variable Exploration","0a966c03":"# Model","db686d35":"### Census_IsWIMBootEnabled","19cb65e4":"# Feature Engineering","10927b37":"### Census_InternalBatteryType","ad5c4631":"Assume that the null values represent some category, so we will replace them with 0."}}