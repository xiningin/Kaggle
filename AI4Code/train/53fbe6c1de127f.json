{"cell_type":{"ee7906f8":"code","039adc05":"code","b733bfd5":"code","255bf552":"code","1d7a28bc":"code","345958d9":"code","26a39805":"code","ac98a5e8":"code","447dd497":"code","63a54315":"code","24162b46":"code","be08be70":"code","24d4dbe8":"code","64acc27f":"code","6de94239":"code","966b7cbc":"code","30e288e4":"code","7f4f1d8f":"code","476cb7cb":"code","21d77b5d":"code","2fdbd95f":"code","cc6ed9a5":"markdown","dcb7868c":"markdown","08c32a98":"markdown","14b36da0":"markdown","66868bf3":"markdown","f5ab23ee":"markdown","9dfba8b7":"markdown","d923a20a":"markdown","69e35fb9":"markdown","db8a69c6":"markdown","17b213c1":"markdown","fb8c4ea3":"markdown","43ad40cb":"markdown","aab1e5c7":"markdown","6f98663e":"markdown","9f451bbe":"markdown","44dad455":"markdown"},"source":{"ee7906f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","039adc05":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sn","b733bfd5":"dataset=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndataset.head()","255bf552":"dataset.shape #gives you the no. of rows and columns in dataset","1d7a28bc":"dataset.describe()#gives you the statistics across the variable","345958d9":"corr_relation=dataset.corr()\nsn.heatmap(corr_relation,annot=True,cmap=\"Blues\")\nplt.show()","26a39805":"grouped_sex=dataset[\"PassengerId\"].groupby([dataset[\"Survived\"],dataset[\"Sex\"]]).count()\ngrouped_sex","ac98a5e8":"grouped_pclass=dataset[\"PassengerId\"].groupby([dataset[\"Pclass\"],dataset[\"Survived\"]]).count()\ngrouped_pclass","447dd497":"# Splitting Data into X(independent) and y(dependent) variables\nx=dataset.drop(columns=['Name','Ticket'])\ny=dataset.iloc[:,1]","63a54315":"x.head()","24162b46":"#Finding the null values\nx.isnull().sum()","be08be70":"df=x\ndf[\"sexval\"]=np.where(df['Sex']==\"male\",1,0) # mapping Sex values\ndf[\"cabin_booked\"]=np.where(df['Cabin'].isnull(),0,1) #deriving new column\ndf[\"Embarked\"]=df[\"Embarked\"].replace({np.nan: \"S\"}) #replacing NaN with \"S\"","24d4dbe8":"#what to do when 20% data is missing. Imputing Age with mean \nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(df[['Age']])\ndf[['Age']] = imputer.transform(df[['Age']]).ravel()\n","64acc27f":"df=df.drop(columns=['Sex','Cabin','PassengerId','Survived'])\ndf.isnull().sum()","6de94239":"#Convert embarked into one hot encoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct= ColumnTransformer(transformers=[('encoder', OneHotEncoder(),[5])],remainder='passthrough')\ndf= np.array(ct.fit_transform(df))\n\n\ndf[0]","966b7cbc":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(df,y,test_size=0.2,random_state=0)","30e288e4":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nxtrain[:,3:]=sc.fit_transform(xtrain[:,3:])\nxtest[:,3:]=sc.transform(xtest[:,3:])","7f4f1d8f":"from sklearn.svm import SVC\nclassifier=SVC(C=0.5)\nclassifier.fit(xtrain,ytrain)","476cb7cb":"ypred=classifier.predict(xtest)","21d77b5d":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm=confusion_matrix(ytest,ypred)\nprint(cm)\naccuracy_score(ytest,ypred)\n\n# 96 correctly predicted True Values\n# 48 correctly predicted False Values","2fdbd95f":"from sklearn.metrics import roc_curve\nfpr,tpr,_=roc_curve(ytest,ypred)#Roc Curve defining False Positive Rate and True Positive Rate\nplt.plot(fpr,tpr)","cc6ed9a5":"Steps of Data Processing & Missing Value Treatment\n\n\n1 Convert cabin into 1 or 0 :- 1 for cabin booked 0 for no cabin \"NaN\"\n\n\n2 Convert embarked into dummy variable \n\n\n3 Age is missing for 177 i.e 20% data is missing not useful","dcb7868c":"Accuracy Model 80.44%","08c32a98":"Creating Embarked into Dummy Variable by using OneHotEncoder","14b36da0":"# Data Import","66868bf3":"Understanding & Analyzing Data","f5ab23ee":"Survived has highest positive impact from Fare. Higher the Fare high probability of Survival.\nAge is in negative propotion to Survival. higher the Age less chances of Survival.","9dfba8b7":"# Import Library","d923a20a":"# Feature Scaling","69e35fb9":"From Above stats Age is available for 714 records. All other records are completely updated.\nAverage Fare Price is 32.20","db8a69c6":"Please Share an upvote if you like my efforts as a ML Beginner. It will really boost my enthusiasm","17b213c1":"# Pre Processing","fb8c4ea3":"# Splitting Dataset","43ad40cb":"First 3 values are derived from the Embarked Dummy Variable. S= 0,0,1 ","aab1e5c7":"# Training Model Using SVM Classifier","6f98663e":"First Class Passenger Survival was the highest.","9f451bbe":"Above data displays Female Survival Rate was much higher than Male","44dad455":"# Predicting Results"}}