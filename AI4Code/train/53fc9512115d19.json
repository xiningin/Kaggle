{"cell_type":{"814d2483":"code","7d26f295":"code","8f1ba5bf":"code","8261a7ff":"code","b7cd54b1":"code","08cb9342":"code","ce88525e":"code","70495eab":"code","0839fbc2":"code","ec131a9c":"code","9e721f38":"code","9f536d88":"code","ee91f574":"code","f189bad2":"code","c5480221":"code","ea83e5fe":"code","51a384f8":"code","3234e8bd":"code","c387e191":"code","9887f43e":"code","e4a0cc52":"code","c6b98198":"code","0be7af36":"code","fd696002":"code","5ffe0529":"code","e5d45532":"code","0c7d91ae":"code","fa182832":"code","4d6f7aa6":"code","cc51782c":"code","b7c73f42":"code","0c00061c":"code","766d93f6":"markdown","1c853142":"markdown","e1b6c77f":"markdown","d81350ef":"markdown","13bbc8d5":"markdown","6e8b19c2":"markdown","3c6750c5":"markdown","3c4c3439":"markdown","27f4b170":"markdown","a7628120":"markdown","145ebf72":"markdown","2991f16f":"markdown","f02df919":"markdown","69aa674a":"markdown","a1c2fba5":"markdown","f5e91eb3":"markdown","b0e465c3":"markdown","a9a3c420":"markdown"},"source":{"814d2483":"!pip install yfinance\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nimport keras.backend as K","7d26f295":"# Download data\nDf = yf.download('GLD', end=\"2021-04-20\",  auto_adjust=True)\nDf.to_excel(\"data.xlsx\")\nDf.head()","8f1ba5bf":"split_date_begin = pd.Timestamp('01-01-2020')\nsplit_date_end = pd.Timestamp('31-12-2020')\nDf = Df.loc[split_date_begin:split_date_end, ['Close']]","8261a7ff":"!mkdir output\n# Only keep close columns\nDf = Df[['Close']]\n\n# Drop rows with missing values\nDf = Df.dropna()\n\n# Plot the closing price of GLD\nDf.Close.plot(figsize=(15, 7), color='g')\nimport datetime\nplt.xlim([datetime.date(2020, 1, 1), datetime.date(2020, 12, 31)])\nplt.ylabel(\"Gold ETF Prices\")\nplt.title(\"Gold ETF Price Series\")\nplt.savefig('output\/draw01.png')\nplt.show()","b7cd54b1":"Df['S_3'] = Df['Close'].rolling(window=3).mean()\nDf['S_9'] = Df['Close'].rolling(window=9).mean()\nDf['next_day_price'] = Df['Close'].shift(-1)\n\nDf = Df.dropna()\nX = Df[['S_3', 'S_9']]\nX.head(10)\n","08cb9342":"# Define dependent variable\ny = Df['next_day_price']\ny.head(10)","ce88525e":"t = .8\nt = int(t*len(Df))\n\n# Train dataset\nX_train = X[:t]\ny_train = y[:t]\n\n# Test dataset\nX_test = X[t:]\ny_test = y[t:]","70495eab":"linear = LinearRegression().fit(X_train, y_train)\nprint(\"Linear Regression model\")\nprint(\"Gold ETF Price (y) = %.2f * 3 Days Moving Average (x1) \\\n+ %.2f * 9 Days Moving Average (x2) \\\n+ %.2f (constant)\" % (linear.coef_[0], linear.coef_[1], linear.intercept_))","0839fbc2":"\npredicted_price = linear.predict(X_test)\npredicted_price = pd.DataFrame(predicted_price, index=y_test.index, columns=['price'])\npredicted_price.plot(figsize=(15, 10))\ny_test.plot()\nplt.legend(['predicted_price', 'actual_price'])\nplt.ylabel(\"Gold ETF Price\")\nplt.savefig('output\/draw02.png')\nplt.show()","ec131a9c":"r2_score = linear.score(X[t:], y[t:])*100\nfloat(\"{0:.2f}\".format(r2_score))","9e721f38":"y_pred = linear.predict(X_test)\ndelta = sum(np.absolute(y_pred - y_test))\nprint(delta)","9f536d88":"import math\nfrom sklearn.metrics import mean_squared_error\nsc = MinMaxScaler()\n\ny_train = sc.fit_transform(Df[['Close']][:t])\ny_test = y_test * sc.scale_\ny_pred = y_pred * sc.scale_\n\nrmse = 100 - 100 * math.sqrt(mean_squared_error(y_test, y_pred))\nprint(rmse)","ee91f574":"# Download data\nDf = yf.download('GLD', end=\"2021-04-20\", auto_adjust=True)\n\n# Only keep close columns\nDf = Df[['Close']]\n\n# Drop rows with missing values\nDf = Df.dropna()\n\ntrain, test = np.split(Df, [int(.8*len(Df))])\ntrain.shape","f189bad2":"sc = MinMaxScaler()\n\ntrain_sc = sc.fit_transform(train)\ntest_sc = sc.transform(test)","c5480221":"print(sc.scale_)","ea83e5fe":"X_train = train_sc[:-1]\ny_train = train_sc[1:]\n\nX_test = test_sc[:-1]\ny_test = test_sc[1:]","51a384f8":"X_train_t = X_train[:, None]\nX_test_t = X_test[:, None]","3234e8bd":"print(train.shape, test.shape)","c387e191":"def acr(y_train, y_pred):\n    return K.sqrt(K.mean(K.square(y_pred - y_train), axis=-1))","9887f43e":"K.clear_session()\nmodel = Sequential()\n\nmodel.add(LSTM(50, input_shape=(1, 1)))\n\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error')\nmodel.summary()","e4a0cc52":"%%time\nhistory = model.fit(X_train_t, y_train, epochs=50, verbose=0)","c6b98198":"%%time\ny_pred = model.predict(X_test_t)\n\ny_test_plot = pd.DataFrame(index=test.index)\ny_test_plot = y_test_plot.iloc[1:]\ny_test_plot['value'] = y_test \/ sc.scale_\n\ny_pred_plot = pd.DataFrame(index=test.index)\ny_pred_plot = y_pred_plot.iloc[1:]\ny_pred_plot['value'] = y_pred \/ sc.scale_\n\nplt.figure(figsize=(15, 10))\nplt.plot(y_test_plot)\nplt.plot(y_pred_plot)\nplt.legend(['real', 'predict'])\nplt.ylabel(\"Gold ETF Price\")\nplt.savefig('output\/draw03.png')\nplt.show()","0be7af36":"loss = history.history['loss']\n\nepochs = range(len(loss)) # Get number of epochs","fd696002":"plt.plot(epochs, loss, 'r')\nplt.title('Training loss and accuracy')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\", \"Accuracy\"])\nplt.savefig('output\/draw04.png')\nplt.figure(figsize=(15, 10))\nplt.show()","5ffe0529":"print(\"result predict: \", sc.inverse_transform(y_pred)[-1])","e5d45532":"score = model.evaluate(X_test_t, y_test, verbose=1)\nprint(score)","0c7d91ae":"score = sum(np.absolute(y_pred - y_test)) \/ sc.scale_\nprint(score)","fa182832":"delta = pd.DataFrame(index=test.index)\ndelta = delta.iloc[1:]\ndelta['value'] = np.absolute(y_pred - y_test) \/ sc.scale_\nplt.figure(figsize=(15, 10))\nplt.plot(delta)\nplt.legend(['delta'])\nplt.ylabel(\"Delta Price\")\nplt.savefig('output\/draw05.png')\nplt.show()","4d6f7aa6":"import sklearn\ndef rmse(y_test, y_pred):\n    return math.sqrt(mean_squared_error(y_test, y_pred))\nfrom sklearn.metrics import r2_score\nprint(\"mean absolute errors: \", sklearn.metrics.mean_absolute_error(y_test, y_pred), \", accuracy: \", 100 - 100 * sklearn.metrics.mean_absolute_error(y_test, y_pred))\nprint(\"mean squared errors: \", mean_squared_error(y_test, y_pred), \", accuracy: \", 100 - 100 * mean_squared_error(y_test, y_pred))\nprint(\"root mean squared error: \", rmse(y_test, y_pred), \", accuracy: \", 100 - 100 * rmse(y_test, y_pred))\nprint(\"r2 score: \", r2_score(y_test, y_pred) * 100)","cc51782c":"model.save_weights('my_model_weights.h5')","b7c73f42":"model.save('my_model')","0c00061c":"%%time\nresults = pd.DataFrame()\nepochs = [10]\nfor i in epochs:\n    error_scores = list()\n    for j in range(30):\n        history = model.fit(X_train_t, y_train, epochs=i, verbose=0)\n        y_pred = model.predict(X_test_t)\n        error_scores.append(rmse(y_test, y_pred))\n    \n    \n    results[str(i)] = error_scores\n\nprint(results.describe())\n# save boxplot\nresults.boxplot()\nplt.savefig('output\/draw06.png')\nplt.show()","766d93f6":"### 1. Install and import required library","1c853142":"### 5. Linear Regression","e1b6c77f":"#### 6.3 Train model","d81350ef":"#### 6.5 the goodness of the fit","13bbc8d5":"#### 6.6 Save model","6e8b19c2":"#### 6.4 Plot training and validation loss per epoch","3c6750c5":"Accuracy","3c4c3439":"#### 5.3 the goodness of the fit","27f4b170":"#### 6.2 Create Model","a7628120":"r2 score","145ebf72":"#### 6.1 Get dataset","2991f16f":"### 6. LSTM","f02df919":"### 3. Define explanatory variables","69aa674a":"#### 5.2 Predicting the Gold ETF prices","a1c2fba5":"### 6.7 Optimal","f5e91eb3":"#### 5.1 Create a linear regression model","b0e465c3":"### 2. Visualization","a9a3c420":"### 4. Split the data into train and test dataset"}}