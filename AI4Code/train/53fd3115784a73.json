{"cell_type":{"12170209":"code","775c85bd":"code","f8502249":"code","6817f3a7":"code","38ee8995":"code","432005ce":"code","c1e188f4":"code","3109dde9":"code","ace16d54":"code","0cc3e65a":"code","a7c79f94":"code","92ab312f":"code","a4f7bcfa":"code","ac04430b":"code","22c02301":"code","fc7e1e0a":"code","80ccc036":"code","0353925b":"code","090ed56a":"code","d2dce774":"code","d39af119":"code","00fbd0dc":"code","f5589c20":"code","2753d18b":"code","76d9147c":"code","6e597a70":"code","abcf62bc":"code","2c2f0a10":"code","7e0f3a7a":"code","8df37097":"code","035abd95":"code","3ff4e504":"code","e052edb6":"code","ad3f06e8":"code","86b8dfbd":"code","3759d00b":"code","7152f8a2":"code","9bcee97f":"code","2586ed25":"code","5dcbe535":"code","e8051eab":"code","9d138682":"code","7f752163":"markdown","8dd9300c":"markdown","39cf2a86":"markdown","f9372aa9":"markdown","f1c5a8b0":"markdown","a8251863":"markdown","da4059fd":"markdown","71df3150":"markdown","bd8798f1":"markdown","b8e05068":"markdown","60abd07a":"markdown","c498070b":"markdown","1d09a557":"markdown","ff647506":"markdown","3f17cd5b":"markdown","fe9663b5":"markdown","87d74ffb":"markdown","5873e75a":"markdown","a87800e9":"markdown"},"source":{"12170209":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","775c85bd":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadssurveillancecsv\/surveillance.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'surveillance.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","f8502249":"df.isnull().sum()","6817f3a7":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","38ee8995":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","432005ce":"df[categorical_nan].isna().sum()","c1e188f4":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","3109dde9":"df[numerical_nan].isna().sum()","ace16d54":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","0cc3e65a":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","a7c79f94":"df = pd.get_dummies(df)","92ab312f":"#Code by Puru Behl https:\/\/www.kaggle.com\/accountstatus\/mt-cars-data-analysis\n\nsns.distplot(df['tbhiv_surv_prev'])\nplt.axvline(df['tbhiv_surv_prev'].values.mean(), color='red', linestyle='dashed', linewidth=1)\nplt.title('TB & HIV Surveillance Prevalence Distribution')","a4f7bcfa":"#Code by Firat Gonen https:\/\/www.kaggle.com\/frtgnn\/elo-eda-lgbm\/notebook \n\nplt.figure(figsize=(10, 6))\nplt.title('TB & HIV Surveillance Prevalence Distribution')\nsns.despine()\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nsns.distplot(df['tbhiv_surv_prev'], hist=True, rug=False,norm_hist=True)","ac04430b":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","22c02301":"y_train = df.tbhiv_surv_prev.values","fc7e1e0a":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(df.values)\n    rmse= np.sqrt(-cross_val_score(model, df.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","80ccc036":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","0353925b":"#Elastic Net Regression : again made robust to outliers\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","090ed56a":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","d2dce774":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","d39af119":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","00fbd0dc":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","f5589c20":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","2753d18b":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","76d9147c":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","6e597a70":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","abcf62bc":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","2c2f0a10":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","7e0f3a7a":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)","8df37097":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","035abd95":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","3ff4e504":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","e052edb6":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","ad3f06e8":"stacked_averaged_models.fit(df.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(df.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(df.values))\nprint(rmsle(y_train, stacked_train_pred))","86b8dfbd":"model_xgb.fit(df, y_train)\nxgb_train_pred = model_xgb.predict(df)\nxgb_pred = np.expm1(model_xgb.predict(df))\nprint(rmsle(y_train, xgb_train_pred))","3759d00b":"pip install --upgrade 'lightgbm>=3.0.0'","7152f8a2":"import re\ndf = df.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))","9bcee97f":"model_lgb.fit(df, y_train)\nlgb_train_pred = model_lgb.predict(df)\nlgb_pred = np.expm1(model_lgb.predict(df.values))\nprint(rmsle(y_train, lgb_train_pred))","2586ed25":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","5dcbe535":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","e8051eab":"test_ID = df['tbhiv_surv_prev']","9d138682":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke was Here.' )","7f752163":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSLd7XlU6z9ornp1KchLi5__B0vc9rMbGfZhw&usqp=CAU)msfaccess.org","8dd9300c":"#VACCINE CHALLENGES\n\nUnlike the hit-and-run polio virus, which evokes long-term immunity after an infection, HIV is a \u201ccatch it and keep it\u201d virus\u2014if you are infected, the pathogen stays in your body until it destroys the immune system, leaving you undefended against even mild infections. Moreover, HIV continually evolves a shrewd opponent seeking ways to elude our immune responses. Although this does not mean a vaccine is impossible, it certainly meant developing one, especially when the virus hit in the 1980s, would not be easy. \u201cUnfortunately, no one can predict with certainty that an AIDS vaccine can ever be made,\u201d \u201cThat is not to say it is impossible to make such a vaccine, only that we are not certain of success.\u201d More than 30 years later there still is no effective vaccine to prevent HIV infection.\n\n#Covid-19 reinfection by the same Strain? Transient immune protection? \n\nFrom what we have seen of SARS-CoV-2, it interacts with our immune system in complex ways, resembling polio in some of its behavior and HIV in others. We know from nearly 60 years of observing coronaviruses that a body's immune system can clear them. That seems to be generally the case for SARS-CoV-2 as well. But the cold-causing coronaviruses, just like HIV, also have their tricks. Infection from one of them never seems to confer immunity to reinfection or symptoms by the same strain of virus\u2014that is why the same cold viruses return each season. \n\nThese coronaviruses are not a hit-and-run virus like polio or a catch-it-and-keep-it virus like HIV. I call them \u201cget it and forget it\u201d viruses\u2014once cleared, your body tends to forget it ever fought this foe. Early studies with SARS-CoV-2 suggest it might behave much like its cousins, raising transient immune protection.\n\nThe path to a SARS-CoV-2 vaccine may be filled with obstacles. Whereas some people with COVID-19 make neutralizing antibodies that can clear the virus, not everybody does. Whether a vaccine will stimulate such antibodies in everyone is still unknown. Moreover, we do not know how long those antibodies can protect someone from infection. It may be two or three years before we will have the data to tell us and any confidence in the outcome.\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","39cf2a86":"#Just as with AIDS and cancer, we will need a combination of medicines to treat this disease\n\nOf the nearly 38 million people currently living with HIV\/AIDS, 25 million are receiving full antiretroviral treatments that prevent disease and suppress the virus so well they are unlikely to pass it along. I would wager that another 25 million or more infections never happened, primarily in sub-Saharan Africa, because these treatments became available in most countries.\n\nFrom fighting this epic war against AIDS, doctors, virologists, epidemiologists and public health experts have learned crucial lessons that we can apply to the battle we are currently waging. For instance, we saw that vaccines are never a guarantee but that treatments can be our most important weapon. We discovered that human behavior plays a vital role in any disease-fighting effort and that we cannot overlook human nature. We have also seen how critical it is to build on knowledge and tools gained fighting earlier outbreaks\u2014a strategy only possible if we continue funding research in between pandemics.\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","f9372aa9":"#Ensembling StackedRegressor, XGBoost and LightGBM","f1c5a8b0":"#That snippet below fixed the issue with LGB (feature with Json that resulted in error)\n\nLightGBMError: Do not support non-ASCII (Json) characters in feature name.\n\nThe new version of LGBM didn't fix that.","a8251863":"#Averaged base models score","da4059fd":"#Final Training and Prediction StackedRegressor","71df3150":"#What story will be recounted about Covid-19 Pandemic?\n\nWe are just beginning to glimpse what the long-term toll of COVID-19 might be. This is a new virus, so we will not have a clearer idea until after a few years, but we know it will be very high. We have barely scratched the surface of coronavirus molecular biology. What story will our children and grandchildren recount about our successes as scientists and as a society, and our failures, to contain this pandemic\u2014the worst we have faced in 100 years?\n\nWe may be in for a protracted pandemic, or we may get lucky with effective treatments and vaccines soon. But we have been here before, facing an unknown viral enemy, and we can lean on lessons we have learned. This is not the first and will not be the last global epidemic.https:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","bd8798f1":"#Lessons from AIDS for the COVID-19 Pandemic, by William A. Haseltine \n\nThis article was originally published with the title \"What We Learned from AIDS\" in Scientific American 323, 4, 35-41 (October 2020)\n\ndoi:10.1038\/scientificamerican1020-35\n\nWE CAN LEARN FROM PARALLELS BETWEEN THE CORONAVIRUS AND HIV CRISES\n\nLike all viruses, coronaviruses are expert code crackers. SARS-CoV-2 has certainly cracked ours. Think of this virus as an intelligent biological machine continuously running DNA experiments to adapt to the ecological niche it inhabits. This virus has caused a pandemic in large part because it acted on three of our most human vulnerabilities.\n\n#Human issues: Our biological defenses, our clustering patterns of social behavior and our simmering political divides.\n\nSeveral lessons from the long battle with HIV, the human immunodeficiency virus that causes AIDS, suggest what may lie ahead. HIV\/AIDS is one of the worst scourges humans have encountered. As a code cracker, HIV is an expert. By the end of 2019 the global death toll from this virus was roughly 33 million people. In all, 76 million people have been infected, and scientists estimate another 1.7 million people acquire the virus every year.\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","b8e05068":"#FOCUS ON TREATMENTS - Resistance to Single Drugs\n\n\"Thirty thousand volunteers around the world participate in networks built by the National Institutes of Health for studies of new HIV vaccine candidates, and these networks are being tapped for initial testing of COVID-19 vaccines, too.\"\n\n\"The gold standard for AIDS treatment now is called antiretroviral therapy\u2014essentially patients take a cocktail of at least three different drugs that attack the HIV virus in different ways. The strategy is based on earlier success we had in fighting cancer.\" \n\n\"We already know resistance to single drugs will bedevil COVID-19 treatments. We have seen resistance to single, anti-SARS-CoV-2 drugs develop rapidly in early lab studies. Just as with AIDS and cancer, we need a combination of medicines to treat this disease. The goal of the biotechnology and pharmaceutical industries now is to develop an array of highly potent and specific drugs, each of which targets a different function of the virus. Decades of research on HIV has shown the way and gives us confidence in our eventual success.\"\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","60abd07a":"#HUMAN BEHAVIOR: Know your Risk, Take Necessary Precautions\n\nPeople were NOT ignorant of how to catch it; it is that they did not change their lifestyle accordingly.\n\nThere is likewise a sexual dynamic to COVID-19 that often goes unmentioned. It is part of what is driving people out of their homes and into bars and parties. Anyone with a craving for a beer can quench their thirst in the safety of their own home, but gratification comes less easily for other desires, especially when one is young, single and living alone. Our public health strategies should not ignore this fact.\n\nThe same lessons we learned in the midst of the HIV epidemic to help young people change their behaviors apply today to COVID-19: know your risk, know your partners and take necessary precautions. Many young people operate under the false assumption that even if they become infected, they will not become severely ill. Not only is this belief untrue, but even people with asymptomatic infections can suffer serious, lasting damage. But the more people understand the risk (younger people especially) the greater likelihood they will take the steps necessary to protect themselves and others. We saw this happen with AIDS.\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","c498070b":"#FUNDING\n\nGovernments and industry pulled the plug on coronavirus research funding in 2006 after the first SARS (severe acute respiratory syndrome) pandemic faded away and again in the years immediately following the MERS (Middle East respiratory syndrome, also caused by a coronavirus) outbreak when it seemed to be controllable.\n\nFunding agencies everywhere, not just in the U.S. but in China, Japan, Singapore, Hong Kong and the Middle East (countries affected by SARS and MERS) underestimated the threat of coronaviruses. Despite clear, persistent, highly vocal warnings from many of those who battled SARS and MERS up close, funding dried up. \n\nThe development of promising anti-SARS and MERS drugs, which might have been active against SARS-CoV-2 as well, was left unfinished for lack of money.\n\nWith 776,000 dead and 22 million infected globally as of mid-August, we have every motive to accelerate funding. The U.S. quickly opened the funding spigots last spring for research to hasten discoveries of vaccines and drugs. But will it be enough?\n\nIn Ronald Reagan first administration, funding for HIV research was scarce; few scientists were willing to stake their careers on deciphering the molecular biology. \n\nWhen the money flowed, outstanding scientists signed on. William A. Haseltine helped to design this first congressionally funded AIDS research program with Anthony Fauci, the doctor now leading United States fight against COVID-19. (And if there is one person in the world who has made the greatest contribution to the prevention and treatment of AIDS, that person is Fauci.)https:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","1d09a557":"#Columns Names\n\n\"tbhiv_sentin_cil\",\"Non-routine HIV surveillance\",,\"Lower limit (95% confidence interval) of prevalence (%) of HIV in TB patients estimated using sentinel sites\"\n\n\"tbhiv_sentin_ciu\",\"Non-routine HIV surveillance\",,\"Upper limit (95% confidence interval) of prevalence (%) of HIV in TB patients estimated using sentinel sites\"\n\n\"tbhiv_sentin_prev\",\"Non-routine HIV surveillance\",,\"Prevalence (%) of HIV in TB patients estimated using sentinel sites\"\n\n\"tbhiv_sentin_yr\",\"Non-routine HIV surveillance\",,\"Year in which prevalence of HIV in TB patients was estimated using sentinel sites\"\n\n\"tbhiv_surv_cil\",\"Non-routine HIV surveillance\",,\"Lower limit (95% confidence interval) of prevalence (%) of HIV in TB patients estimated using nationwide representative surveys\"\n\n\"tbhiv_surv_ciu\",\"Non-routine HIV surveillance\",,\"Upper limit (95% confidence interval) of prevalence (%) of HIV in TB patients estimated using nationwide representative surveys\"\n\n\"tbhiv_surv_prev\",\"Non-routine HIV surveillance\",,\"Prevalence (%) of HIV in TB patients estimated using nationwide representative surveys\"\n\n\"tbhiv_surv_yr\",\"Non-routine HIV surveillance\",,\"Year in which prevalence of HIV in TB patients was estimated using nationwide representative surveys\" https:\/\/gitlab.procc.fiocruz.br\/oswaldo\/DS_2017\/blob\/4e8f97ebbd15bdba60c2e3c0d91298a24801a2c5\/exemplos\/TB_data_dictionary_2017-10-23.csv","ff647506":"#Ensemble prediction","3f17cd5b":"#Base models scores","fe9663b5":"#Stacking Averaged models Score","87d74ffb":"#Never let down our guard when it comes to Funding Antivirus Research.\n\nOur tool set for virus and pharmaceutical research has improved enormously in the past 36 years since HIV was discovered. This is one reason to be confident that we will have effective antiviral drugs for treating COVID-19 infections by next year, if not sooner.\n\nWhat used to take us five or 10 years in the 1980s and 1990s in many cases now can be done in five or 10 months. We can rapidly identify and synthesize chemicals to predict which drugs will be effective.\n\nWe can do cryoelectron microscopy to probe virus structures and simulate molecule-by-molecule interactions in a matter of weeks\u2014something that used to take years. The lesson is to never let down our guard when it comes to funding antivirus research. We would have no hope of beating COVID-19 if it were not for the molecular biology gains we made during earlier virus battles. What we learn this time around will help us out during the next pandemic, but we must keep the money coming.\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","5873e75a":"#Vaccines Success: Will it work? Will it be safe? Will it be long lasting?\n\nAnother challenge is how this virus enters the body: through the nasal mucosal membranes. No COVID-19 vaccine currently in development has shown an ability to prevent infection through the nose. In nonhuman primates, some vaccines can prevent the disease from spreading efficiently to the lungs. But those studies do not tell us much about how the same drug will work in humans; the disease in our species is very different from what it is in monkeys, which do not become noticeably ill.\n\nWe learned with HIV that attempts to prevent virus entry altogether do not work well\u2014not for HIV and not for many other viruses, including influenza and even polio. Vaccines act more like fire alarms: rather than preventing fires from breaking out, they call the immune system for help once a fire has ignited.\n\nThe hopes of the world rest on a COVID-19 vaccine. It seems likely that scientists will announce a \u201csuccess\u201d sometime this year, but success is not as simple as it sounds. As I write, officials in Russia have reported approving a COVID-19 vaccine. Will it work? Will it be safe? Will it be long lasting? No one will be able to provide convincing answers to these questions for any forthcoming vaccine soon, perhaps not for at least several years.\nhttps:\/\/www.scientificamerican.com\/article\/lessons-from-aids-for-the-covid-19-pandemic\/","a87800e9":"![](https:\/\/www.unaids.org\/sites\/default\/files\/covid_hiv_cover_960_0.jpg)unaids.org"}}