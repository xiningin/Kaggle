{"cell_type":{"89849211":"code","c3ec8ea0":"code","0e097d02":"code","382e21aa":"code","cdbbecc3":"code","ba61874d":"code","264c6558":"code","4726df08":"code","094ff9a1":"code","a11879bf":"code","62403a41":"code","af91151c":"markdown","37489c7f":"markdown","b5db03f2":"markdown","3ee37852":"markdown","b943ea1b":"markdown","f48a915e":"markdown","2f4ccfe8":"markdown","58ada3c4":"markdown","a2b33821":"markdown"},"source":{"89849211":"from ortools.linear_solver import pywraplp\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nNUMBER_DAYS = 100\nNUMBER_FAMILIES = 5000\nMAX_BEST_CHOICE = 5\ndata = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/santas-workshop-tour-2019-optimal-solution\/preference_cost_43622.csv')\nassigned_days = submission['assigned_day'].values\ncolumns = data.columns[1:11]\nDESIRED = data[columns].values\nCOST_PER_FAMILY        = [0,50,50,100,200,200,300,300,400,500]\nCOST_PER_FAMILY_MEMBER = [0, 0, 9,  9,  9, 18, 18, 36, 36,235]\nN_PEOPLE = data['n_people'].values\n\ndef get_daily_occupancy(assigned_days):\n    daily_occupancy = np.zeros(100, int)\n    for fid, assigned_day in enumerate(assigned_days):\n        daily_occupancy[assigned_day-1] += N_PEOPLE[fid]\n    return daily_occupancy\n\ndef days_plot(assigned_days):\n    daily_occupancy = get_daily_occupancy(assigned_days)\n    best_choices = get_daily_occupancy(DESIRED[:,0])\n    plt.rcParams['figure.figsize'] = [20, 5]\n    plt.xticks(np.arange(1, 101, step=1), rotation=90)\n    plt.axhline(y=125, color='gray', linestyle=':')\n    plt.axhline(y=300, color='gray', linestyle=':')\n    mondays125     = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 == 1 and daily_occupancy[day] == 125])\n    other_mondays  = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 == 1 and daily_occupancy[day] != 125])\n    weekends       = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 in [2,3,4] or day == 0])\n    not_weekends   = np.array([(day+1, daily_occupancy[day]) for day in range(1, 100) if day % 7 in [0,5,6]])\n    plt.bar(*weekends.transpose()      , color = 'y', label = 'Weekends')\n    plt.bar(*not_weekends.transpose()  , color = 'b', label = 'Thu-Wed-Tue')\n    plt.bar(*other_mondays.transpose() , color = 'm', label = 'Mondays > 125')\n    plt.bar(*mondays125.transpose()    , color = 'g', label = 'Mondays = 125')\n    plt.plot(range(1,101), best_choices, color = 'k', label = 'Best choices')\n    plt.ylim(0, 500)\n    plt.xlim(0, 101)\n    plt.xlabel('Days before Christmas', fontsize=14)\n    plt.ylabel('Occupancy', fontsize=14)\n    plt.legend()\n    plt.show()\n\ndef days_plot2(assigned_days):\n    daily_occupancy = get_daily_occupancy(assigned_days)\n    best_choices = get_daily_occupancy(DESIRED[:,0])\n    plt.rcParams['figure.figsize'] = [20, 5]\n    plt.xticks(np.arange(1, 101, step=1), rotation=90)\n    plt.axhline(y=125, color='gray', linestyle=':')\n    plt.axhline(y=300, color='gray', linestyle=':')\n    mondays     = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 == 1])\n    weekends       = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 in [2,3,4] or day == 0])\n    not_weekends   = np.array([(day+1, daily_occupancy[day]) for day in range(1, 100) if day % 7 in [0,5,6]])\n    plt.bar(*weekends.transpose()      , color = 'y', label = 'Weekends')\n    plt.bar(*not_weekends.transpose()  , color = 'b', label = 'Thu-Wed-Tue')\n    plt.bar(*mondays.transpose() , color = 'm', label = 'Mondays')\n    plt.plot(range(1,101), best_choices, color = 'k', label = 'Best choices')\n    plt.ylim(0, 500)\n    plt.xlim(0, 101)\n    plt.xlabel('Days before Christmas', fontsize=14)\n    plt.ylabel('Occupancy', fontsize=14)\n    plt.legend()\n    plt.show()    \n    \ndef cost_function(prediction):\n    N_DAYS = 100\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    days = list(range(N_DAYS,0,-1))\n    tmp = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\n    family_size_dict = tmp[['n_people']].to_dict()['n_people']\n\n    cols = [f'choice_{i}' for i in range(10)]\n    choice_dict = tmp[cols].to_dict()\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if  (v < MIN_OCCUPANCY): #(v > MAX_OCCUPANCY) or\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_costs = [max(0, accounting_cost)]\n    diffs = [0]\n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_costs.append(max(0, (today_count-125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0)))\n        yesterday_count = today_count\n\n    return penalty, sum(accounting_costs), penalty + sum(accounting_costs)\ndef print_cost_function(prediction):\n    cfa = cost_function(prediction)\n    print(\"Preference cost: \",cfa[0])\n    print(\"Accounting penalty: \",cfa[1])\n    print(\"Score: \",cfa[2])\ndays_plot(assigned_days)","c3ec8ea0":"print_cost_function(assigned_days)","0e097d02":"submission = pd.read_csv('\/kaggle\/input\/santas-workshop-tour-2019-optimal-solution\/accounting_penalty_313.27.csv')\nassigned_days = submission['assigned_day'].values\ndays_plot2(assigned_days)","382e21aa":"print_cost_function(assigned_days)","cdbbecc3":"get_daily_occupancy(assigned_days)","ba61874d":"submission = pd.read_csv('\/kaggle\/input\/santas-workshop-tour-2019-optimal-solution\/submission_68888.04.csv')\nassigned_days = submission['assigned_day'].values\n","264c6558":"!pip install pulp","4726df08":"%%time\n\nfrom pulp import *\n\ndaily_occupancy = get_daily_occupancy(assigned_days)\n    \nlower_bounds = np.zeros(NUMBER_DAYS)\nupper_bounds = np.zeros(NUMBER_DAYS)\n# good seed described in discussion:\n# daily_occupancy = np.array([300, 287, 300, 300, 286, 262, 250, 250, 271, 296, 300, 300, 279, 264, 256, 273, 294, 282, 259, 228, 196, 164, 125, 300, 300, 295, 278, 263, 257, 253, 279, 276, 252, 219, 188, 156, 125, 283, 271, 248, 216, 184, 159, 125, 300, 282, 257, 226, 194, 161, 125, 286, 264, 236, 201, 168, 137, 125, 266, 241, 207, 166, 125, 125, 125, 253, 225, 190, 147, 125, 125, 125, 227, 207, 175, 129, 125, 125, 125, 235, 220, 189, 147, 125, 125, 125, 256, 234, 202, 161, 125, 125, 125, 234, 214, 181, 136, 125, 125, 125])\n# delta = 5\ndelta = 0\n\nfor fi in range(NUMBER_DAYS):\n    lower_bounds[fi] = max(daily_occupancy[fi]-delta,125)\n    upper_bounds[fi] = min(daily_occupancy[fi]+delta,300)\n        \n# Create the 'prob' variable to contain the problem data\nprob = LpProblem(\"Setup occupation of days\", LpMinimize)\nPCOSTM, B = {}, {} # cost matrix, boolean vars matrix\n    \nfor fid in range(NUMBER_FAMILIES):\n    for i in range(MAX_BEST_CHOICE):\n        B[fid, DESIRED[fid][i]-1] = LpVariable(f'b{fid, i}', 0, 1, LpInteger) # B[family, choice_day] = boolean variable\n        # setting up initial values\n        if assigned_days[fid] == DESIRED[fid][i]:\n            B[fid, DESIRED[fid][i]-1].setInitialValue(1)\n        else:\n            B[fid, DESIRED[fid][i]-1].setInitialValue(0)\n        PCOSTM[fid, DESIRED[fid][i]-1] = COST_PER_FAMILY[i] + N_PEOPLE[fid] * COST_PER_FAMILY_MEMBER[i]  \n\nD = {} # days occupancies variables matrix\nfor j in range(NUMBER_DAYS):\n    rj = range(int(lower_bounds[j]),int(upper_bounds[j])+1)\n    for i in rj:\n        if j<99:\n            rj1 = range(int(lower_bounds[j+1]),int(upper_bounds[j+1])+1)\n            for i1 in rj1:\n                D[j, i,i1] =  LpVariable(f'D{j, i,i1}', 0, 1, LpInteger) # day j occupancy = i and day j+1 occupancy = i1\n                # setting up initial values\n                if daily_occupancy[j] == i and daily_occupancy[j+1] == i1:\n                    D[j, i,i1].setInitialValue(1)\n                else:\n                    D[j, i,i1].setInitialValue(0)\n        else:\n            D[j,i,i] =  LpVariable(f'D{j, i,i}', 0, 1, LpInteger)\n            # setting up initial values\n            if daily_occupancy[j] == i:\n                D[j, i,i].setInitialValue(1)\n            else:\n                D[j, i,i].setInitialValue(0)\n\n# defining objective: preference cost + accounting penalty                \nprob += lpSum(PCOSTM[i, j] * B[i, j] for i, j in B) + lpSum(D[j,i,i1]*(int(i)-125.0)\/400.0*int(i)**(0.5+abs(i-i1)\/50.0) for j,i,i1 in D) \n    \nI = {}\n\nfor j in range(NUMBER_DAYS):\n    I[j] = LpVariable(f'I{j}', int(lower_bounds[j]), int(upper_bounds[j]), LpInteger)\n    I[j].setInitialValue(daily_occupancy[j])\n    prob += lpSum([N_PEOPLE[i] * B[i, j] for i in range(NUMBER_FAMILIES) if (i,j) in B]) == I[j]\n\nfor j in range(NUMBER_DAYS):\n    rj = range(int(lower_bounds[j]),int(upper_bounds[j])+1)\n    if j<99:\n        rj1 = range(int(lower_bounds[j+1]),int(upper_bounds[j+1])+1)\n        prob += lpSum([D[j, i,i1]*i for i in rj for i1 in rj1]) == I[j]\n        prob += lpSum([D[j, i,i1]*i1 for i in rj for i1 in rj1]) == I[j+1]\n    else:\n        prob += lpSum([D[j, i,i]*i for i in rj]) == I[j]\n\nfor i in range(NUMBER_FAMILIES):\n    prob += lpSum(B[i, j] for j in range(NUMBER_DAYS) if (i,j) in B) == 1          \n    \nprob.solve()\n\n## USING GUROBI:\n#prob.solve(GUROBI_CMD(msg =1, mip_start=1,options = [('MIPGap',0),('SolFiles','.\/solution\/mymodel')]))\n    \nprint(\"Status:\", LpStatus[prob.status])\nprint(\"Score = \", value(prob.objective))","094ff9a1":"days_plot(assigned_days)","a11879bf":"print_cost_function(assigned_days)","62403a41":"submission['assigned_day'] = assigned_days\nsubmission.to_csv('submission_68888.04.csv', index=False)","af91151c":"As pointed here: https:\/\/www.kaggle.com\/golubev\/manual-to-improve-submissions good seed-solutions have fixed some Mondays occupancy to 125. It was little bit suprising that Monday day 30 haven't occupancy 125, instead of Monday day 23!","37489c7f":"It's interesting that daily occupancies are slowly decreasing (however there are no tricks with occupancies equal to 125!):","b5db03f2":"## Referrences:\n* https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/126374 (daily occupancies)\n* https:\/\/www.kaggle.com\/golubev\/manual-to-improve-submissions (plots)\n* https:\/\/www.kaggle.com\/nagadomi\/mipcl-example-only-preference (preference cost solution)\n\n","3ee37852":"I have not found any solution or discussion about minimizing only accounting penalty. So I decided to solve it for an exercise. At first glance it looks little bit more complicated than the original problem (5000x10 + 176x176x100 binary variables). On the other hand, N_d approx  N_d+1 seems to be close to optimum. After testing few scenarios, Gurobi found and prove solution presented below:","b943ea1b":"Minimizing preference cost is an easy to solve problem (5000x10 variables), solved here:\nhttps:\/\/www.kaggle.com\/nagadomi\/mipcl-example-only-preference \nin about a 1 minute; discussed here: https:\/\/www.kaggle.com\/mihaild\/lower-bound-on-preference-cost#685643.\nAs you can see on the plot below, this solution completely *ignores* occupancies between adjacent days:","f48a915e":"## Accounting penalty","2f4ccfe8":"Greetings!","58ada3c4":" ## Preference cost","a2b33821":"## Score = preference cost + accounting penalty\nThere are many ways of obtaining optimal solution, described in discussions (I used first one):\n* https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/126374\n* https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/126225\n* https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/126185\n\nIn general, it's an art of using good MIP solvers. I'm presenting pulp solution (python API to LP and MIP solvers) which allows using GUROBI (just in one line if you have installed and licensed client). Do not forget to setting up MIPGap = 0 :)"}}