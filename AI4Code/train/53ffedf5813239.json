{"cell_type":{"6d7a890e":"code","bd0d48fa":"code","dbf73ff2":"code","09415713":"code","ed867bc4":"code","67efee68":"code","8320a3fb":"code","1730e46d":"code","d69b9b33":"code","bc0e8772":"code","980640fc":"code","3e2e2dd5":"code","3c69cbec":"code","279608c9":"code","9a7347a4":"markdown","9642cb8f":"markdown","d5355193":"markdown","221855f9":"markdown","7e26d825":"markdown"},"source":{"6d7a890e":"#You have to install torch 1.6, Fastai >=2.0.0 version.\n\n!pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n#Upgrade kornia and allennlp version since current version does not support torch 1.6\n\n!pip install --upgrade kornia\n!pip install allennlp==1.1.0.rc4\n\n#Install\/upgrade fastai package\n\n!pip install --upgrade fastai","bd0d48fa":"#Load the libraries and verify the versions\n\nimport torch\nprint(torch.__version__)\nprint(torch.cuda.is_available())\n\nimport fastai\nprint(fastai.__version__)\n\nfrom fastai.vision.all import *\nfrom fastai.vision.widgets import *","dbf73ff2":"path = Path ('..\/input')","09415713":"from PIL import Image\nimg = Image.open(path\/'covidxray\/03BF7561-A9BA-4C3C-B8A0-D3E585F73F3C.jpeg') \nprint(img.shape)\nimg.to_thumb(128,128)","ed867bc4":"tfms = aug_transforms(do_flip = True, flip_vert = False, mult=2.0)","67efee68":"data=ImageDataLoaders.from_folder(path, train = \"train\",valid_pct=0.2, item_tfms=Resize(128), batch_tfms=tfms, bs = 30, num_workers = 4) ","8320a3fb":"data.train.show_batch(max_n=2, nrows=1)","1730e46d":"learn = cnn_learner(data, resnet34, metrics=error_rate)\nlearn.fine_tune(4)","d69b9b33":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","bc0e8772":"interp.most_confused(min_val=2)","980640fc":"interp.plot_top_losses(5, nrows=2, figsize = (25,5))","3e2e2dd5":"btn_run = widgets.Button(description='Classify')\nbtn_upload = widgets.FileUpload()\nout_pl = widgets.Output()\nlbl_pred = widgets.Label()","3c69cbec":"def on_click_classify(change):\n    img = PILImage.create(btn_upload.data[-1])\n    out_pl.clear_output()\n    with out_pl: display(img.to_thumb(128,128))\n    pred,pred_idx,probs = learn.predict(img) #use learn_inf if the .pkl file is used\n    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'\n\nbtn_run.on_click(on_click_classify)","279608c9":"VBox([widgets.Label('Select a X-ray'),btn_upload, btn_run, out_pl, lbl_pred])","9a7347a4":"**Creating required widgets for using the model in an application**","9642cb8f":"Use the following code snippet to export your model and then deploy it. As Kaggle does not permit to save the pickled file in the input folder I am not executing this code:\n\nlearn.export()\nlearn_inf = load_learner(path\/'export.pkl') #create an inference object from the exported model.\nlearn_inf.predict(\"image path\") #use the inference to predict the output for a new image.\n","d5355193":"Fast.ai has released the latest 2020 version of its MOOC. I will be coming up with a series of notebooks covering each lesson in the fast.ai MOOC. This notebook will reflect my understanding and learnings of each module. I will also be experimenting the concepts thought with additional datasets and models. Here are links to the free fast.ai resources that everyone can benefit from:\n\nhttps:\/\/course.fast.ai\/\nhttps:\/\/github.com\/fastai\/fastbook\nhttps:\/\/forums.fast.ai\/\n\nLesson 2 - Building image classification model for production https:\/\/github.com\/fastai\/fastbook\/blob\/master\/02_production.ipynb\n\nHere are links for the earlier lessons:\n\nLesson 1 - https:\/\/www.kaggle.com\/krrai77\/fastai-2020-lesson-1\nLesson 2 - https:\/\/www.kaggle.com\/krrai77\/fastai-2020-lesson-2\n\nHappy Learning!**","221855f9":"**Creating a Notebook App from the Model**\nTo use our model in an application, we can simply treat the predict method as a regular function. Therefore, creating an app from the model can be done using any of the myriad of frameworks and techniques available to application developers.\n\nHowever, most data scientists are not familiar with the world of web application development. So let's try using something that you do, at this point, know: it turns out that we can create a complete working web application using nothing but Jupyter notebooks! The two things we need to make this happen are:\n\nIPython widgets (ipywidgets)\nVoil\u00e0\nIPython widgets are GUI components that bring together JavaScript and Python functionality in a web browser, and can be created and used within a Jupyter notebook. For instance, the image cleaner that we saw earlier in this chapter is entirely written with IPython widgets. However, we don't want to require users of our application to run Jupyter themselves.\n\nThat is why Voil\u00e0 exists. It is a system for making applications consisting of IPython widgets available to end users, without them having to use Jupyter at all. Voil\u00e0 is taking advantage of the fact that a notebook already is a kind of web application, just a rather complex one that depends on another web application: Jupyter itself. Essentially, it helps us automatically convert the complex web application we've already implicitly made (the notebook) into a simpler, easier-to-deploy web application, which functions like a normal web application rather than like a notebook.\n\nOnce the required widgets are ready, install Voil\u00e0 by copying these lines into a notebook cell and executing it:\n\n!pip install voila\n!jupyter serverextension enable voila --sys-prefix\n\nVoil\u00e0 runs Jupyter notebooks just like the Jupyter notebook server you are using now does, but it also does something very important: it removes all of the cell inputs, and only shows output (including ipywidgets), along with your markdown cells. So what's left is a web application! To view your notebook as a Voil\u00e0 web application, replace the word \"notebooks\" in your browser's URL with: \"voila\/render\". You will see the same content as your notebook, but without any of the code cells.\n\nOf course, you don't need to use Voil\u00e0 or ipywidgets. Your model is just a function you can call (pred,pred_idx,probs = learn.predict(img)), so you can use it with any framework, hosted on any platform. And you can take something you've prototyped in ipywidgets and Voil\u00e0 and later convert it into a regular web application. We're showing you this approach in the book because we think it's a great way for data scientists and other folks that aren't web development experts to create applications from their models.\n\nSource: https:\/\/github.com\/fastai\/fastbook\/blob\/master\/02_production.ipynb\n","7e26d825":"Lesson 3 is taking the learning from lesson 2 one step ahead. In this lesson, in continuation of what was learnt in lesson 2, I applied the same techniques on a set of X-ray images. The ideas was to create a classifier for Covid and Non-covid cases based on X-ray images. Later the lesson delves into developing a simple web application for this classifier that can be deployed for production. There are lot of variations that can be done through the learnings from all the three lessons combined together.\n\nI have not included the complete image set in this kernel. The code is also available in the github repo, https:\/\/github.com\/RajiRai\/FastAI\/blob\/master\/Covid19_prediction_using_X_ray.ipynb.\n\nThe credit for this image classification notebook goes to Christian Tutiv\u00e9n G\u00e1lvez, as the processed images were extracted by him from the original Chest X-ray data sources.\n"}}