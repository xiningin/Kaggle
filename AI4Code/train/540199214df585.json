{"cell_type":{"bfa0305c":"code","c9cbb582":"code","a1bd0a7d":"code","1bc7a50b":"code","5a70ff7b":"code","39c49f64":"code","c557b1d1":"code","7685b987":"code","eeb980e5":"code","5f7da4c0":"code","d74f4fb6":"code","f7742ffd":"code","67a12127":"code","016d1c84":"code","94f39337":"code","c0bd5619":"code","75a48a4c":"code","ce38f9cc":"code","d1f296fc":"code","23cd0fa7":"code","bfdc395f":"code","420c2f05":"code","38ab9a39":"code","89b8e48a":"code","bfb744e3":"code","986698ec":"markdown","c660d48d":"markdown","7ce432d4":"markdown","a44d3158":"markdown","f84db78c":"markdown","d0172cf6":"markdown","159fba4f":"markdown","f9ffe42d":"markdown"},"source":{"bfa0305c":"!pip install -q \"monai-weekly[gdown, nibabel, tqdm, itk]\"","c9cbb582":"import os\nimport shutil\nimport tempfile\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport torch\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import classification_report\n\nfrom monai.apps import download_and_extract\nfrom monai.config import print_config\nfrom monai.metrics import ROCAUCMetric\nfrom monai.networks.nets import DenseNet121\nfrom monai.transforms import *\nfrom monai.data import Dataset, DataLoader\nfrom monai.utils import set_determinism\n\n#print_config()","a1bd0a7d":"data_dir = '..\/input\/fashionmnist\/fashion-mnist_train.csv'\ntest_dir = '..\/input\/fashionmnist\/fashion-mnist_test.csv'\nclass_names = list(pd.Series(range(10)).astype(str))\nnum_class = len(class_names)\nprint(class_names)","1bc7a50b":"data=pd.read_csv(data_dir)\ntest=pd.read_csv(test_dir)","5a70ff7b":"image_label_list=data.iloc[:,0]\nimage_file_list=data.iloc[:,1:]\nt_image_label_list=test.iloc[:,0]\nt_image_file_list=test.iloc[:,1:]","39c49f64":"num_total = len(data)\nimage_width, image_height = 28,28\n\nprint('Total image count:', num_total)\nprint(\"Image dimensions:\", image_width, \"x\", image_height)\nprint(\"Label names:\", class_names)","c557b1d1":"plt.subplots(3,3, figsize=(8,8))\nfor i,k in enumerate(np.random.randint(num_total, size=9)):\n    im=image_file_list.iloc[k]\n    arr = np.array(im).reshape(28,28)\n    plt.subplot(3,3,i+1)\n    plt.xlabel(class_names[image_label_list[k]])\n    plt.imshow(arr, cmap='gray', vmin=0, vmax=255)\nplt.tight_layout()\nplt.show()","7685b987":"plt.subplots(3,3, figsize=(8,8))\nfor i,k in enumerate(np.random.randint(num_total, size=9)):\n    im=image_file_list.iloc[k]\n    arr = np.array(im).reshape(28,28).astype('uint8')\n    arr2 = cv2.resize(arr,dsize=(56,56),interpolation=cv2.INTER_LINEAR)\n    plt.subplot(3,3,i+1)\n    plt.xlabel(class_names[image_label_list[k]])\n    plt.imshow(arr2, cmap='gray', vmin=0, vmax=255)\nplt.tight_layout()\nplt.show()\n# use cv2.resize","eeb980e5":"plt.subplots(3,3, figsize=(8,8))\nfor i,k in enumerate(np.random.randint(num_total, size=9)):\n    im=image_file_list.iloc[k]\n    arr = np.array(im).reshape(28,28).astype('uint8')\n    arr2 = np.resize(arr,(56,56))\n    plt.subplot(3,3,i+1)\n    plt.xlabel(class_names[image_label_list[k]])\n    plt.imshow(arr2, cmap='gray', vmin=0, vmax=255)\nplt.tight_layout()\nplt.show()\n# do not use np.resize","5f7da4c0":"valid_frac = 0.2\ntrainX, trainY = [], []\nvalX, valY = [], []\n\nfor i in range(num_total):\n    rann = np.random.random()\n    if rann < valid_frac:\n        valX.append(image_file_list.iloc[i].tolist())\n        valY.append(image_label_list[i].tolist())\n    else:\n        trainX.append(image_file_list.iloc[i].tolist())\n        trainY.append(image_label_list[i].tolist())\n\ntestX=t_image_file_list        \ntestY=t_image_label_list\n\nprint(\"Training count =\",len(trainX),\", Validation count =\", len(valX), \", Test count =\",len(testX))","d74f4fb6":"trainX=np.array(trainX).reshape(-1,28,28).astype('uint8')\ntrainY=np.array(trainY)\n\nvalX=np.array(valX).reshape(-1,28,28).astype('uint8')\nvalY=np.array(valY)\n\ntestX=np.array(testX).reshape(-1,28,28).astype('uint8')\ntestY=np.array(testY)","f7742ffd":"class SumDimension(Transform):\n    def __init__(self, dim=1):\n        self.dim = dim\n\n    def __call__(self, inputs):\n        return inputs.sum(self.dim)","67a12127":"class MyResize(Transform):\n    def __init__(self, size=(56,56)):\n        self.size = size\n    def __call__(self, inputs):\n        image2=cv2.resize(inputs,dsize=(self.size[1],self.size[0]),interpolation=cv2.INTER_CUBIC)\n        return image2","016d1c84":"class Astype(Transform):\n    def __init__(self, type='uint8'):\n        self.type = type\n    def __call__(self, inputs):\n        return inputs.astype(self.type)","94f39337":"train_transforms = Compose([\n    #LoadImage(image_only=True),\n    ScaleIntensity(),\n    MyResize(),     #to use DenseNet121\n    AddChannel(),    \n    ToTensor()\n])\n\nval_transforms = Compose([\n    #LoadImage(image_only=True),    \n    ScaleIntensity(),\n    MyResize(),     #to use DenseNet121\n    AddChannel(),\n    ToTensor()\n])\n\nact = Activations(softmax=True)\nto_onehot = AsDiscrete(to_onehot=True, n_classes=num_class)","c0bd5619":"class MedNISTDataset(Dataset):\n\n    def __init__(self, image_files, labels, transforms):\n        self.image_files = image_files\n        self.labels = labels\n        self.transforms = transforms\n\n    def __len__(self):\n        return len(self.image_files)\n\n    def __getitem__(self, index):\n        return self.transforms(self.image_files[index]), self.labels[index]","75a48a4c":"train_ds = MedNISTDataset(trainX, trainY, train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=100, shuffle=True, num_workers=2)\n\nval_ds = MedNISTDataset(valX, valY, val_transforms)\nval_loader = DataLoader(val_ds, batch_size=100, num_workers=2)\n\ntest_ds = MedNISTDataset(testX, testY, val_transforms)\ntest_loader = DataLoader(test_ds, batch_size=100, num_workers=2)","ce38f9cc":"device = torch.device('cuda:0')     #\"cuda:0\",\"cpu\"\nmodel = DenseNet121(\n    spatial_dims=2,\n    in_channels=1,               \n    out_channels=num_class\n).to(device)\n\nloss_function = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), 1e-5)\nepoch_num = 20\nval_interval = 1","d1f296fc":"best_metric = -1\nbest_metric_epoch = -1\nepoch_loss_values = list()\nauc_metric = ROCAUCMetric()\nmetric_values = list()","23cd0fa7":"for epoch in range(epoch_num):\n    print('-' * 10)\n    print(f\"epoch {epoch + 1}\/{epoch_num}\")\n    model.train()\n    epoch_loss = 0\n    step = 0\n    \n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[0].to(device), batch_data[1].to(device)      \n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        epoch_loss += loss.item()\n        print(f\"{step}\/{len(train_ds) \/\/ train_loader.batch_size}, train_loss: {loss.item():.4f}\")\n        epoch_len = len(train_ds) \/\/ train_loader.batch_size\n        \n    epoch_loss \/= step\n    epoch_loss_values.append(epoch_loss)\n    print(f\"epoch {epoch + 1} average loss: {epoch_loss:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            y_pred = torch.tensor([], dtype=torch.float32, device=device)\n            y = torch.tensor([], dtype=torch.long, device=device)\n            for val_data in val_loader:\n                val_images, val_labels = val_data[0].to(device), val_data[1].to(device)\n                y_pred = torch.cat([y_pred, model(val_images)], dim=0)\n                y = torch.cat([y, val_labels], dim=0)\n            y_onehot = [to_onehot(i) for i in y]\n            y_pred_act = [act(i) for i in y_pred]\n            auc_metric(y_pred_act, y_onehot)\n            auc_result = auc_metric.aggregate()\n            auc_metric.reset()\n            del y_pred_act, y_onehot\n            metric_values.append(auc_result)\n            acc_value = torch.eq(y_pred.argmax(dim=1), y)\n            acc_metric = acc_value.sum().item() \/ len(acc_value)\n            if acc_metric > best_metric:\n                best_metric = acc_metric\n                best_metric_epoch = epoch + 1\n                torch.save(model.state_dict(), 'best_metric_model.pth')\n                print('saved new best metric model')\n                \n            print(f\"current epoch: {epoch + 1} current AUC: {auc_result:.4f}\"\n                  f\" current accuracy: {acc_metric:.4f} best AUC: {best_metric:.4f}\"\n                  f\" at epoch: {best_metric_epoch}\")\n            \nprint(f\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\")","bfdc395f":"plt.figure('train', (12, 6))\nplt.subplot(1, 2, 1)\nplt.title(\"Epoch Average Loss\")\nx = [i + 1 for i in range(len(epoch_loss_values))]\ny = epoch_loss_values\nplt.xlabel('epoch')\nplt.plot(x, y)\nplt.subplot(1, 2, 2)\nplt.title(\"Validation: Area under the ROC curve\")\nx = [val_interval * (i + 1) for i in range(len(metric_values))]\ny = metric_values\nplt.xlabel('epoch')\nplt.plot(x, y)\nplt.show()","420c2f05":"model.load_state_dict(torch.load('best_metric_model.pth'))\nmodel.eval()\n\ny_true = list()\ny_pred = list()\n\nwith torch.no_grad():\n    for test_data in test_loader:\n        test_images, test_labels = test_data[0].to(device), test_data[1].to(device)\n        pred = model(test_images).argmax(dim=1)\n        for i in range(len(pred)):\n            y_true.append(test_labels[i].item())\n            y_pred.append(pred[i].item())","38ab9a39":"print(y_true[0:5])\nprint(y_pred[0:5])","89b8e48a":"print(len(y_true))\nprint(len(y_pred))","bfb744e3":"print(classification_report(y_true, y_pred, target_names=class_names, digits=4))","986698ec":"## Plot the loss and metric","c660d48d":"## Evaluate the model on test dataset","7ce432d4":"## Define MONAI transforms, Dataset and Dataloader to pre-process data","a44d3158":"## Visualise some randomly picked examples from the dataset","f84db78c":"\n## Read datafile ","d0172cf6":"# Fashion MNIST Classify MONAI Pytorch\nThis notebook referred to MONAI's Image Classification Tutorial with the MedNIST Dataset\nhttps:\/\/colab.research.google.com\/drive\/1wy8XUSnNWlhDNazFdvGBHLfdkGvOHBKe","159fba4f":"## Install MONAI","f9ffe42d":"## Prepare training, validation and test data"}}