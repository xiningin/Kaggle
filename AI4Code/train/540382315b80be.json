{"cell_type":{"0ecc9821":"code","da3b9ada":"code","d734f3f0":"code","e3570e7e":"code","c06d2f39":"code","265c2566":"code","d685ab08":"code","e8d6b42c":"code","e5111d77":"code","2ea4ddc0":"code","271156d0":"code","eeaffdb6":"code","1908d5ae":"code","fb2b5916":"code","40759f9b":"code","1a14c4cd":"markdown"},"source":{"0ecc9821":"# Import all Dependencies\/Libraries\/Functions\/Classes\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax5.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')","da3b9ada":"# Relative path to each datasets\nhospital_admissions = \"..\/input\/hospital\/hospital-admissions-and-public-sector-outpatient-attendances-annual.csv\"\nadmissions_by_sectors = \"..\/input\/hospital\/hospital-admissions-by-sector-annual.csv\"\noutpatient_attendences = \"..\/input\/hospital\/outpatient-attendances-a-e-socs-polyclinics-dental.csv\"","d734f3f0":"# Import datasets\n\ndata1 = np.genfromtxt(\n    hospital_admissions, \n    dtype=[(\"year\", \"i8\"), (\"sector\", \"U50\"), (\"count\", \"i8\")],\n    delimiter=\",\",\n    skip_header=1)\n\ndata2 = np.genfromtxt(\n    admissions_by_sectors, \n    dtype=[(\"year\", \"i8\"), (\"hospital\", \"U50\"), (\"sector\", \"U10\"), (\"count\", \"i8\")],\n    delimiter=\",\",\n    skip_header=1)\n\ndata3 = np.genfromtxt(\n    outpatient_attendences,\n    dtype=[('year', 'i8'), ('type', 'U50'), ('count', 'i8')],\n    delimiter=',',\n    skip_header=1)","e3570e7e":"# Hospital Admissions and Public Sector Outpatient Attendances, Annual\n\n# datasets with only null data\nnull_data1 = data1[data1['count'] == -1]\n\n# subset information\nprint('Hospital Admissions And Public Sector Outpatient Attendances, Annual')\nprint(f\"\\nThere are {len(data1)} rows and {len(data1[0])} columns in this dataset\")\nprint(f\"\\nThe names of the columns are:\")\nprint(f\"- year\\t\\t{type(data1['year'][0])}\")\nprint(f\"- sector\\t{type(data1['sector'][0])}\\tisnumeric: {np.char.isnumeric(data1['sector'][0])}\")\nprint(f\"- count\\t\\t{type(data1['count'][0])}\")\nprint(f\"\\n{len(np.unique(data1['year']))} unique values in 'year' column\")\nprint(f\"{len(np.unique(data1['sector']))} unique values in 'sector' column\")\nprint(f\"{len(np.unique(data1['count']))} unique values in 'count' column\")\nprint(f\"\\n{len(null_data1)} rows have null values\")\nprint(\"Note: values with 'na' are replaced with -1\")\nprint(f\"\\nThe dataset ranges from year {data1['year'][0]} to year {data1['year'][len(data1['year']) - 1]}\")","c06d2f39":"# Hospital Admissions By Sector, Annual\n\n# datasets with only null data\nnull_data2 = data2[data2['count'] == -1]\n\n# prints out all the subset information\nprint('Hospital Admissions by Sector, Annual')\nprint(f\"\\nThere are {len(data2)} rows and {len(data2[0])} columns in this dataset\")\nprint(f\"\\nThe names of the columns are:\")\nprint(f\"- year\\t\\t{type(data2['year'][0])}\")\nprint(f\"- hospital\\t{type(data2['hospital'][0])}\\tisnumeric: {np.char.isnumeric(data2['hospital'][0])}\")\nprint(f\"- sector\\t{type(data2['sector'][0])}\\tisnumeric: {np.char.isnumeric(data2['sector'][0])}\")\nprint(f\"- count\\t\\t{type(data2['count'][0])}\")\nprint(f\"\\n{len(np.unique(data2['year']))} unique values in 'year' column\")\nprint(f\"{len(np.unique(data2['hospital']))} unique values in 'hospital' column\")\nprint(f\"{len(np.unique(data2['sector']))} unique values in 'sector' column\")\nprint(f\"{len(np.unique(data2['count']))} unique values in 'count' column\")\nprint(f\"\\n{len(null_data2)} rows have null values\")\nprint(\"Note: values with 'na' are replaced with -1\")\nprint(f\"\\nThe dataset ranges from year {data2['year'][0]} to year {data2['year'][len(data2['year']) - 1]}\")","265c2566":"# Outpatient Attendence for A&E, Specialist Outpatient Clinics, Polyclinics and Dental Clinics, Annual\n\n# datasets with only null data\nnull_data3 = data3[data3['count'] == -1]\n\n# prints out all the subset information\nprint('Outpatient Attendence for A&E, Specialist Outpatient Clinics, Polyclinics and Dental Clinics, Annual')\nprint(f'\\nThere are {len(data3)} rows and {len(data3[0])} columns in this dataset')\nprint('\\nThe names of the columns are:')\nprint(f\"- year\\t{type(data3['year'][0])}\")\nprint(f\"- type\\t{type(data3['type'][0])}\\tisnumeric: {np.char.isnumeric(data3['type'][0])}\")\nprint(f\"- count\\t{type(data3['count'][0])}\")\nprint(f\"\\n{len(np.unique(data3['year']))} unique values in 'year' column\")\nprint(f\"{len(np.unique(data3['type']))} unique values in 'type' column \")\nprint(f\"{len(np.unique(data3['count']))} unique values in 'count' column\")\nprint(f\"\\n{len(null_data3)} rows have null values\")\nprint(\"Note: values with 'na' are replaced with -1\")\nprint(f\"\\nThe dataset ranges from year {data3['year'][0]} to year {data3['year'][len(data3['year']) - 1]}\")","d685ab08":"# Data Wrangling\ndata1_original = data1\ndata2_original = data2\ndata3_original = data3\n\n# removing the records with null values\ndata1 = data1[data1['count'] != -1]\ndata2 = data2[data2['count'] != -1]\ndata3 = data3[data3['count'] != -1]","e8d6b42c":"# Histogram\n\nmu, sigma = np.mean(data1['count']), np.std(data1['count'])\n\n# Visualation\nfig6, ax6 = plt.subplots(1, 2, figsize = (15, 10), tight_layout=True)\nfig6.set_facecolor('lightblue')\nfig6.tight_layout(pad = 5)\n\n# Regular Distribtion\nax6[0].set_title('Distribution of Patient Admissions')\n\nn, bins, patches = ax6[0].hist(data1['count'], 50, density = True)\n# making regression line\ny = ((1 \/ (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * (1 \/ sigma * (bins - mu))**2))\nax6[0].plot(bins, y, '--', linewidth = 3, color='black')\n\nax6[0].ticklabel_format(axis = 'y', style = 'sci')\nax6[0].ticklabel_format(axis = 'x', style = 'plain')\n\n# probability distibution\n# creates 500 random values\nax6[1].set_title(f'Patient Admissions: $\\mu={mu:.2f}$, $\\sigma={sigma:.2f}$')\nx = mu + sigma * np.random.randn(len(data1))\nn, bins, patches = ax6[1].hist(x, 50, density = 1)\nax6[1].ticklabel_format(axis = 'y', style = 'sci')\nax6[1].ticklabel_format(axis = 'x', style = 'plain')\n# making polynomial regression line\ny = ((1 \/ (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * (1 \/ sigma * (bins - mu))**2))\nax6[1].plot(bins, y, '--', linewidth = 3, color='black')\nax6[1].set_ylim((0, 1.6 * (10 ** -6) ))\nax6[1].set_xlim(-4 * (10 ** 6), 7 * (10 ** 6))\nax6[0].set_xlim(-4 * (10 ** 6), 7 * (10 ** 6))\nfor ax in ax6:\n    ax.set_xlabel('Number of Admission')","e5111d77":"# Trend line on Hospital Admissions, Annual\n\n# remove any duplicates in data1['year']\nyear_data1 = list(dict.fromkeys(data1['year']))\n\n# create a list of sum of count according to year\nsum_data1 = []\nfor i in year_data1:\n    sum = 0\n    for j in data1:\n        if j['year'] == i:\n            sum += j['count']\n    sum_data1.append(sum)\n\n# Visualisation\nfig1, ax1 = plt.subplots(figsize=(15, 10))\n\nfig1.set_facecolor('lightblue')\nfig1.set_edgecolor('black')\nfig1.suptitle('Trend line on Hospital Admissions, Annual', fontsize = 16)\n\nax1.ticklabel_format(axis = 'y', style = 'sci', scilimits=(6, 6))\nax1.plot(year_data1, sum_data1, linewidth=2)\nax1.set_xlabel('Year')\nax1.set_ylabel('Number of patients (millions)')\nfig1.tight_layout()\n\n","2ea4ddc0":"# Pie chart of the various sectors\n\n# isolate and remove any duplicates from sector\nsector_data1 = list(dict.fromkeys(data1['sector']))\n\n# creating dictionary collection to store all the sector and patient count\nsector = {}\ntotal = 0\nfor i in sector_data1:\n    sum = 0\n    for j in data1:\n        if j['sector'] == i:\n            sum += j['count']\n            total += j['count']\n    sector[i] = sum\n\n# removing outliers which affects our visualisations\nrest = 0\nnew_sector = {}\nfor i in sector:\n    if sector[i] > (total * 0.05):\n        new_sector[i] = sector[i]\n    else:\n        rest += sector[i]\nnew_sector['The Rest'] = rest\n\n# visualisation\nfig2, ax2 = plt.subplots(figsize=(15, 10))\nfig2.suptitle('Proportion of Patient Admissions from various sectors', fontsize=16)\nax2.pie(new_sector.values(), labels = new_sector.keys(), autopct='%1.1f%%', shadow=True, explode=(0.1, 0.1, 0.1, 0.1, 0.1))\nax2.axis('equal')\nfig2.set_facecolor('lightblue')\nfig2.tight_layout()\n\n","271156d0":"# Patients Admissions in the Public Sector\n\n# records in the public sector\npublic = data2[data2['sector'] == 'Public']\n\n# create a list of all hospital_types\nhospital_types = list(dict.fromkeys(public['hospital']))\n\n# create an object to store all values according to hospital type\nhospital_dict = {}\nfor i in hospital_types:\n    hospital_dict[i] = []\n    for j in public:\n        if j['hospital'] == i:\n            hospital_dict[i].append(j['count'])\n\n# visualisation\nfig3, ax3 = plt.subplots(1, 2, figsize=(15, 10))\nfig3.suptitle('Patients Admissions in the Public Sector', fontsize=16)\nax3[0].ticklabel_format(axis = 'y', style = 'sci', scilimits=(3, 3))\nbp1 = ax3[0].boxplot(hospital_dict.values(), notch=False, showfliers=True, labels=[\n    'Acute Hospitals',\n    'Psychiatric Hospitals',\n    'Community Hospitals'\n], patch_artist=True)\nax3[0].set_title('All hospital')\n# ax3[0].tick_params(axis='x', labelrotation=75)\nax3[0].set_ylabel('Number of Admission (Thousands)')\n\nax3[1].set_title('Magnified')\nbp2 = ax3[1].boxplot([hospital_dict['Psychiatric Hospitals Admissions'], hospital_dict['Community Hospitals Admissions']], notch=False,showfliers=True, labels = [\n    'Psychiatric Hospitals',\n    'Community Hospitals'\n], patch_artist=True)\n# ax3[1].tick_params(axis='x', labelrotation=75)\nax3[1].ticklabel_format(axis = 'y', style = 'sci', scilimits=(3, 3))\nax3[1].set_ylabel('Number of Admission (Thousands)')\nfig3.set_facecolor('lightblue')\nfig3.tight_layout()\n\ncolors = ['pink', 'lightblue', 'lightgreen']\n\nfor patch, color in zip(bp1['boxes'], colors):\n    patch.set_facecolor(color)\nfor patch, color in zip(bp1['fliers'], colors):\n    patch.set_markeredgecolor(color)\nfor patch, color in zip(bp2['boxes'], colors[1:]):\n    patch.set_facecolor(color)\nfor patch, color in zip(bp2['fliers'], colors[1:]):\n    patch.set_markeredgecolor(color)","eeaffdb6":"# Patients Admissions in the Non-public Sector\n\n# records with non public \nnpublic = data2[data2['sector'] == 'Non-public']\n\n# create a list of all hospital_types\nhospital_types = list(dict.fromkeys(npublic['hospital']))\n\n# create an object to store all values according to hospital type\nhospital_dict = {}\nfor i in hospital_types:\n    hospital_dict[i] = []\n    for j in npublic:\n        if j['hospital'] == i:\n            hospital_dict[i].append(j['count'])\n\n# visualisation\nfig4, ax4 = plt.subplots(1, 2, figsize=(15, 10))\nfig4.suptitle('Patients Admissions in the Non-public Sector', fontsize=16)\nax4[0].ticklabel_format(axis = 'y', style = 'sci', scilimits=(3, 3))\nbp1 = ax4[0].boxplot(hospital_dict.values(), notch=False, showfliers=True, labels=[\n    'Acute Hospitals',\n    'Psychiatric Hospitals',\n    'Community Hospitals'\n], patch_artist=True)\nax4[0].set_title('All hospital')\n# ax4[0].tick_params(axis='x', labelrotation=75)\nax4[0].set_ylabel('Number of Admission (Thousands)')\n\nax4[1].set_title('Magnified')\nbp2 = ax4[1].boxplot([hospital_dict['Psychiatric Hospitals Admissions'], hospital_dict['Community Hospitals Admissions']], notch=False,showfliers=True, labels = [\n    'Psychiatric Hospitals',\n    'Community Hospitals'\n], patch_artist=True)\n# ax4[1].tick_params(axis='x', labelrotation=75)\nax4[1].ticklabel_format(axis = 'y', style = 'sci', scilimits=(3, 3))\nax4[1].set_ylabel('Number of Admission (Thousands)')\nfig4.set_facecolor('lightblue')\nfig4.tight_layout()\n\ncolors = ['pink', 'lightblue', 'lightgreen']\n\nfor patch, color in zip(bp1['boxes'], colors):\n    patch.set_facecolor(color)\nfor patch, color in zip(bp1['fliers'], colors):\n    patch.set_markeredgecolor(color)\nfor patch, color in zip(bp2['boxes'], colors[1:]):\n    patch.set_facecolor(color)\nfor patch, color in zip(bp2['fliers'], colors[1:]):\n    patch.set_markeredgecolor(color)","1908d5ae":"# Grouped bar chart between public and non-public sector\nlabels = list(dict.fromkeys(data2['hospital']))\npublic = data2[data2['sector'] == 'Public']\nnpublic = data2[data2['sector'] == 'Non-public']\n\npublic_arr = []\nnpublic_arr = []\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfor i, label in zip(x, labels):\n    sum = 0\n    for j in public:\n        if j['hospital'] == label:\n            sum += j['count']\n    public_arr.append(sum)\n    sum = 0\n    for j in npublic:\n        if j['hospital'] == label:\n            sum += j['count']\n    npublic_arr.append(sum)\n\n# visualisation\nfig5, ax5 = plt.subplots(figsize=(15, 10))\nrects1 = ax5.bar(x - width\/2, public_arr, width, label='Public', color='beige', edgecolor='black')\nrects2 = ax5.bar(x + width\/2, npublic_arr, width, label='Non-public', color='pink', edgecolor='black')\n\nax5.set_ylabel('Number of Admissions (millions)')\nax5.set_title('Grouped bar chart between public and non-public sector', fontsize=16)\nax5.set_xticks(x)\nax5.set_xticklabels(labels)\nax5.legend(prop={'size': 15})\nfig5.set_facecolor('lightblue')\nax5.ticklabel_format(axis = 'y', style = 'sci', scilimits=(6, 6))\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig5.tight_layout()","fb2b5916":"# Admission Trend of Accident & Emergency Departments, Specialist Outpatient Clinics, Polyclinics and Public Sector Dental Clinics\naccident = data3[data3['type'] == 'A&E']\nspecialist = data3[data3['type'] == 'Specialist Outpatient Clinics']\npolyclinic = data3[data3['type'] == 'Polyclinics']\ndental = data3[data3['type'] == 'Public Sector Dental Clinics']\noutpatient = {'A&E': accident, 'Specialist Outpatient Clinics': specialist, 'Polyclinics': polyclinic, 'Public Sector Dental Clinics': dental}\ny_est, a, b = {}, {}, {}\n\n# visualisation\nfig7, ax7 = plt.subplots(1, 2, figsize=(15, 10), tight_layout=True,sharey = True)\nfig7.set_facecolor('lightblue')\nfig7.suptitle('Admission Trend of Accident & Emergency Departments, Specialist Outpatient Clinics, Polyclinics and Public Sector Dental Clinics', fontsize=16)\n\nfor d in outpatient:\n    # line chart\n    ax7[0].plot(outpatient[d]['year'], outpatient[d]['count'], label=d, linewidth = 3)\nax7[0].ticklabel_format(axis = 'y', style = 'sci', scilimits=(6, 6))\nax7[0].set_title('trend line across all the types')\nax7[0].set_ylabel('Patient admissions (millions)')\nax7[0].set_xlabel('Year')\nax7[1].set_xlabel('Year')\n# fig7.legend(loc = 'lower left',bbox_to_anchor = (1, 0, 0, 0), prop={'size': 15 })\nax7[0].legend(prop={'size': 10 })\n\n# scatterplot\nfor d in outpatient:\n    ax7[1].scatter(outpatient[d]['year'], outpatient[d]['count'], linewidth = 2, label=d)\n\n# linear regression line\nfor d in outpatient:\n    a[d], b[d] = np.polyfit(outpatient[d]['year'], outpatient[d]['count'], deg=1)\n    y_est[d] = a[d] * outpatient[d]['year'] + b[d]\n    ax7[1].plot(outpatient[d]['year'], y_est[d], '--', linewidth=1.5, label=d)\nax7[1].set_title('scatterplot with linear regression line')\n\nfig7.savefig('chart7.jpg')","40759f9b":"# stacked bar chart\nyears = list(dict.fromkeys(data3['year']))\ntype_ = list(dict.fromkeys(data3['type']))\nbig_dict = {}\nfor year in years:\n    pseudo_list = []\n    for n in data3:\n        if n['year'] == year:\n            pseudo_list.append(n['count'])\n    big_dict[year] = pseudo_list\n\n# visualisation\nfig8, ax8 = plt.subplots(figsize=(15, 10))\nfig8.set_facecolor('lightblue')\nfig8.suptitle('Stacked bar chart on the outpatient clinics', fontsize = 16)\nfig8.tight_layout(pad=2)\nax8.ticklabel_format(axis = 'y', style = 'sci', scilimits=(6, 6))\nax8.set_ylabel('Patient admissions (millions)')\nax8.set_xlabel('Year')\n\nwidth = 0.75\nfor n in big_dict:\n    ax8.bar(n, big_dict[n][0], width, label = 'A&E', color='lightblue')\nfor n in big_dict:\n    ax8.bar(n, big_dict[n][1], width, label = 'Specialist Outpatient Clinics', bottom = big_dict[n][0], color='orange')\nfor n in big_dict:\n    ax8.bar(n, big_dict[n][2], width, label = 'Polyclinics', bottom = big_dict[n][1] + big_dict[n][0], color='lightgreen')\nfor n in big_dict:\n    ax8.bar(n, big_dict[n][3], width, label = 'Public Sector Dental Clinics', bottom = big_dict[n][0] + big_dict[n][1] + big_dict[n][2], color='pink')\n\n\nhandles, labels = fig8.gca().get_legend_handles_labels()\nby_label = dict(zip(labels, handles))\nax8.legend(by_label.values(), by_label.keys(), prop = {'size':10})","1a14c4cd":"# To download all the figures\n## Remove markdown to download\nfig6.savefig('chart1.jpg')\nfig1.savefig('chart2.jpg')\nfig2.savefig('chart3.jpg')\nfig3.savefig('chart4.jpg')\nfig4.savefig('chart5.jpg')\nfig5.savefig('chart6.jpg')\nfig7.savefig('chart7.jpg')\nfig8.savefig('chart8.jpg')"}}