{"cell_type":{"227fc1ec":"code","74defee0":"code","2c55e28b":"code","00e75a6c":"code","3051ae3b":"code","6fb352b8":"code","0e9416ca":"code","170d7bdd":"code","eaa4bef4":"code","ff540c67":"code","6904c2a0":"code","ddaef32b":"code","a9782e4f":"code","5a4c8bd1":"code","1bddf9ca":"code","d453cdb9":"code","9de68703":"code","7a651779":"code","9d6cdc46":"markdown","c3be3039":"markdown","d54984a2":"markdown","00478f23":"markdown","a0bef127":"markdown","7102fbe2":"markdown","c3f62cdd":"markdown","007ebda4":"markdown","5206c70c":"markdown","2bca767a":"markdown","f3442147":"markdown","d7d6f0ab":"markdown","992e8b1e":"markdown","97381bb9":"markdown","05c96342":"markdown","d51a1180":"markdown","fd15671e":"markdown","3845980d":"markdown","33938d6c":"markdown","a82f2941":"markdown","feedbf9f":"markdown","af875ff9":"markdown","43261749":"markdown","287336d9":"markdown"},"source":{"227fc1ec":"import numpy as np\nimport pandas as pd\n\nimport plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","74defee0":"# Access token\nfrom distutils.dir_util import copy_tree\ncopy_tree(src = \"..\/input\/tokens\/\", dst = \"..\/working\")\n\nfrom access_tokens import *\nmapbox_access_token = get_mapbox_token()","2c55e28b":"dataset = pd.read_csv('..\/input\/chicago-food-inspections\/food-inspections.csv')\ndataset.head(5)","00e75a6c":"latest_data = dataset.sort_values('Inspection Date', ascending = False).groupby('License #').head(1)\nlatest_data.dropna(subset=['Risk', 'Facility Type', 'DBA Name', 'Latitude', 'Longitude'], axis = 0, how = 'all', inplace = True)\nlatest_data = latest_data[(latest_data['Results'] != 'Out of Business') & (latest_data['Results'] != 'Business Not Located')]\nlatest_data['Name'] = latest_data.apply(lambda row: row['AKA Name'] if not pd.isnull(row['AKA Name']) else row['DBA Name'], axis = 1)\nlatest_data['Name'] = latest_data['Name'] + '<br>' + latest_data['Address']","3051ae3b":"risk_color_map = { \"All\": \"rgb(0, 0, 0)\", \"Risk 1 (High)\": \"rgb(255, 0, 0)\", \"Risk 2 (Medium)\": \"rgb(204, 204, 0)\", \"Risk 3 (Low)\": \"rgb(0, 100, 0)\" }\nlatest_data['Risk Color'] = latest_data['Risk'].map(risk_color_map)\n\ninspection_color_map = { \n    \"Pass\": \"rgb(0, 255, 0)\", \n    \"Pass w\/ Conditions\": \"rgb(0, 255, 0)\",\n    \"Fail\": \"rgb(255, 0, 0)\", \n    \"No Entry\": \"rgb(255, 0, 0)\", \n    \"Not Ready\": \"rgb(255, 0, 0)\" }\nlatest_data['Inspection Color'] = latest_data['Results'].map(inspection_color_map)\n    \nlatest_data.reset_index(inplace=True)\nprint(\"Total businesses: {}\".format(latest_data.shape[0]))","6fb352b8":"facility_types = latest_data['Facility Type'].value_counts().keys().tolist()\nfacility_count = latest_data['Facility Type'].value_counts().tolist()\n\nfinal_types = []\nfinal_count = []\nothers_count = 0\none_percent = 0.01 * latest_data.shape[0]\nfor count, facility_type in zip(facility_count, facility_types):\n    if count > one_percent:\n        final_types.append(facility_type)\n        final_count.append(count)\n    else:\n        others_count += count\n        \nfinal_types.append('Others')\nfinal_count.append(others_count)\n\n# figure\nfig = {\n    \"data\": [{\n        \"values\": final_count,\n        \"labels\": final_types,\n        \"hoverinfo\": \"label+percent\",\n        \"hole\": .5,\n        \"type\": \"pie\"\n        },\n    ],\n    \"layout\": {\n        \"title\": \"Types of facilities\",\n        \"width\": 800,\n        \"height\": 800\n    }\n}\n\niplot(fig)","0e9416ca":"data = [\n    go.Scattermapbox(\n        lat = latest_data['Latitude'],\n        lon = latest_data['Longitude'],\n        text = latest_data['Name'],\n        hoverinfo = 'text',\n        mode = 'markers',\n        marker = go.scattermapbox.Marker(\n            color = latest_data['Risk Color'],\n            opacity = 0.7,\n            size = 4\n        )\n    )\n]\n\nlayout = go.Layout(\n    mapbox = dict(\n        accesstoken = mapbox_access_token,\n        zoom = 10,\n        center = dict(\n            lat = 41.8781,\n            lon = -87.6298\n        ),\n    ),\n    height = 800,\n    width = 800,\n    title = \"Facilities in Chicago\")\n\nfig = go.Figure(data, layout)\niplot(fig, filename = 'facilities')","170d7bdd":"latest_data['Risk'].value_counts()","eaa4bef4":"data = [\n    go.Bar(\n        x = latest_data['Results'].value_counts().keys().tolist(),\n        y = latest_data['Results'].value_counts().tolist(),\n        marker = dict(\n            color = [\n                'rgb(0,100, 0)', \n                'rgb(0,100, 0)',\n                'rgb(255, 0, 0)',\n                'rgb(255, 0, 0)',\n                'rgb(255, 0, 0)'\n            ]\n        )\n    )\n]\n\nlayout = go.Layout(\n    title = 'Inspection Results',\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename = 'inspections')","ff540c67":"data = [\n    go.Scattermapbox(\n        lat = latest_data['Latitude'],\n        lon = latest_data['Longitude'],\n        text = latest_data['Name'],\n        hoverinfo = 'text',\n        mode = 'markers',\n        marker = go.scattermapbox.Marker(\n            color = latest_data['Inspection Color'],\n            opacity = 0.7,\n            size = 4\n        )\n    )\n]\n\nlayout = go.Layout(\n    mapbox = dict(\n        accesstoken = mapbox_access_token,\n        zoom = 10,\n        center = dict(\n            lat = 41.8781,\n            lon = -87.6298\n        ),\n    ),\n    height = 800,\n    width = 800,\n    title = \"Facilities in Chicago\")\n\nfig = go.Figure(data, layout)\niplot(fig, filename = 'facilities')","6904c2a0":"passed_inspections = latest_data[(latest_data['Results'] == 'Pass') | (latest_data['Results'] == 'Pass w\/ Conditions')]\nfailed_inspections = latest_data[(latest_data['Results'] == 'Fail') | (latest_data['Results'] == 'No Entry') | (latest_data['Results'] == 'Not Ready')]\n\ntrace0 = go.Bar(\n        x = passed_inspections.groupby('Wards').size().keys(),\n        y = passed_inspections.groupby('Wards').size().tolist(),\n        name = 'Passed inspections',\n        marker = dict(\n            color = 'rgb(55, 83, 109)'\n        )\n    )\n\ntrace1 = go.Bar(\n        x = failed_inspections.groupby('Wards').size().keys(),\n        y = failed_inspections.groupby('Wards').size().tolist(),\n        name = 'Failed inspections',\n        marker = dict(\n            color = 'rgb(26, 118, 255)'\n        )\n    )\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title = 'Inspection Results',\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename = 'ward-wise-inspections')","ddaef32b":"import re\nviolators = latest_data.dropna(subset=['Violations'], axis = 0, how = 'all')\nviolations = violators.apply(lambda row: re.findall('\\|\\s([0-9]+)[.]', str(row['Violations'])), axis = 1)\nfirst_violations = violators.apply(lambda row: row['Violations'].split('.')[0], axis = 1)\n\nfor violation, first_violation in zip(violations, first_violations):\n    violation.append(first_violation)\n\nflat_list = [item for sublist in violations for item in sublist]\nunique, counts = np.unique(flat_list, return_counts=True)","a9782e4f":"violation = []\nviolation_count = []\nfor value, count in zip(unique, counts):\n    if count > 100:\n        violation.append(unique)\n        violation_count.append(count)","5a4c8bd1":"data = [\n    go.Bar(\n        x = violation,\n        y = violation_count,\n        marker = dict(\n            color = 'rgb(55, 83, 109)'\n        )\n    )\n]\n\nlayout = go.Layout(\n    title = 'Majority Violations',\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename = 'violations')","1bddf9ca":"from math import cos, asin, sqrt\ndef distance(lat1, lon1, lat2, lon2):\n    p = 0.017453292519943295     #Pi\/180\n    a = 0.5 - cos((lat2 - lat1) * p)\/2 + cos(lat1 * p) * cos(lat2 * p) * (1 - cos((lon2 - lon1) * p)) \/ 2\n    return 12742 * asin(sqrt(a))","d453cdb9":"def get_plot(dataset, curr_latitude = 41.8781, curr_longitude = -87.6298, risk_level = 'Low', search_distance = 5):\n    dataset = dataset[dataset['Facility Type'] == 'Restaurant']\n    \n    if (risk_level == 'Low'):\n        dataset = dataset[dataset['Risk'] == \"Risk 3 (Low)\"]\n    elif (risk_level == 'Medium'):\n        dataset = dataset[(dataset['Risk'] == \"Risk 3 (Low)\") | (dataset['Risk'] == \"Risk 2 (Medium)\")]\n    elif (risk_level == 'High'):\n        dataset = dataset[dataset['Risk'] != \"All\"]\n    \n    dataset = dataset[dataset.apply(lambda row: distance(curr_latitude, curr_longitude, row['Latitude'], row['Longitude']) < search_distance, axis = 1)]\n    dataset.reset_index(inplace = True)\n    \n    data = [\n        go.Scattermapbox(\n            lat = dataset['Latitude'],\n            lon = dataset['Longitude'],\n            text = dataset['Name'],\n            hoverinfo = 'text',\n            mode = 'markers',\n            marker = go.scattermapbox.Marker(\n                color = dataset['Risk Color'],\n                opacity = 0.7,\n                size = 4\n            )\n        )\n    ]\n\n    layout = go.Layout(\n        mapbox = dict(\n            accesstoken = mapbox_access_token,\n            zoom = 10,\n            center = dict(\n                lat = curr_latitude,\n                lon = curr_longitude\n            ),\n        ),\n        height = 800,\n        width = 800,\n        title = \"Searched Restaurants in Chicago based on location and distance\")\n\n    fig = go.Figure(data, layout)\n    iplot(fig, filename='restaurants')","9de68703":"get_plot(latest_data, 41.8781, -87.6298, 'Medium', 5)","7a651779":"# Removing token\nfrom IPython.display import clear_output\nclear_output(wait=True)\n!rm -rf ..\/working\/access_tokens.py","9d6cdc46":"## Data Visualization\n\nNext, I'll visualize the data to understand the data better and draw conclusions.","c3be3039":"### Majority violation\n\nLet's also check the majority violation that is present among the selected dataset.","d54984a2":"### Types of facilities\n\nFirst, I'll extract all the different types of facilities and plot them as a pie chart. All facilities with total percentage less than 1% will be clubbed together as `Others`.","00478f23":"### Risk Analysis\n\nI'll plot all facilities on the map of Chicago based on the colors we defined above.","a0bef127":"It appears that there are a lot of facilities with **High Risk**. We can also confirm the same using `value_counts`.","7102fbe2":"The majority facility types are **Restaurants** with approximately **55% of the total number of facilities**.","c3f62cdd":"## Exploring nearby restaurants\n\nNext, let's use the knowledge that we have, to identify nearby restaurants. I'll create a function that is customizable to get plots on the map based on risk level, current latitude, current longitude, and search distance.","007ebda4":"### Success and Failure\n\nI'll next take a look at the number of facilities that passed the inspection and the ones that did not.","5206c70c":"We can consider `Pass` and `Pass w\/ Conditions` to be positive outcome and the remaining as negative. Taking a look at the plot above, we can see that even though there are many facilities with high risk, most pass the inspection none the less. Let's plot these on a map.","2bca767a":"The first step is to identify all facilities and take the recent inspections for each facility. I'll also remove all rows where `'Risk', 'Facility Type', 'DBA Name', 'Latitude', 'Longitude'` will have null value. Some businesses are no longer operating or are no longer located and thus can be removed too. I'll create a new column `Name` which extracts the name from `AKA Name` and `DBA Name` with preference given to `AKA Name`.","f3442147":"I'll also create a `Risk Color` column which will help in plotting colors for each facility based on Risk.\n1. All -> Black\n2. High Risk -> Red\n3. Medium Risk -> Yellow\n4. Low Risk -> Green\n\nFor inspections, I'll crate the `Inspection Color` column.\n1. Pass or Pass w\/ Conditions -> Green\n2. Fail or No Entry or Not Ready -> Red","d7d6f0ab":"We also need the `mapbox` access token for plotting. I've saved the key in a file which I'll import and use. You'll need to either create such a file for your own or just simply add a key to the notebook and use it.","992e8b1e":"The majority facilities passed their recent inspection.","97381bb9":"# Facilities in Chicago\n\nIn this notebook, I'll use the Chicago's inspection dataset to draw conclusions about the various facilities and the level of risk at which they are.","05c96342":"It appears that indeed the maximum number of facilities have risk rating High.","d51a1180":"### Ward-wise analysis\n\nI'll now take a look at facilities based on their wards and compare how many passed and how many failed.","fd15671e":"## Import dataset\n\nI'll now import the dataset and place it in the `dataset` variable.","3845980d":"## Import libraries\n\nApart from the general libraries, I'll use `plotly` to plot maps.","33938d6c":"Violation 41 is the majority violation which refers to **WIPING CLOTHS: PROPERLY USED & STORED**.","a82f2941":"## Data Analysis\n\nHere, I'll take a look at the data and extract meaningful information for further visualization","feedbf9f":"## Conclusion\n\nIn this notebook, I explored the Chicago food inspection dataset and used visualizations to draw really useful insights and plot map graphs.","af875ff9":"I'll select the violations that are more than 100 in count.","43261749":"We can simply replace the parameter values and get the desired list of restaurants.","287336d9":"It appears that ward 36 has the maximum ratio of passed to failed inspections."}}