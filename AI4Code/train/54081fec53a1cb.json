{"cell_type":{"b2cef7fc":"code","3033b4e3":"code","d7cb1861":"code","37481c0b":"code","4b7ea29b":"code","defb4d7d":"code","2358d531":"code","29c5b189":"code","90f5cc7d":"code","2da35d06":"code","b888ac6d":"code","39ec5df9":"code","75c68838":"code","99f56bfc":"code","558c18a1":"code","164b68a9":"code","6befb885":"code","8868a10b":"code","c1530a51":"code","c923da4c":"markdown","7e5dad9b":"markdown","339e1cf8":"markdown","ef4e6faf":"markdown","993e53a4":"markdown","f8e8fa3e":"markdown","a636870a":"markdown","0ed28ba5":"markdown","a052488b":"markdown"},"source":{"b2cef7fc":"import numpy as np # linear algebra\nimport pandas as pd ","3033b4e3":"!pip3 install pycaret","d7cb1861":"train = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","37481c0b":"train.head()","4b7ea29b":"# to print the full summary\ntrain.info()","defb4d7d":"from pycaret.classification import *\nclassification_setup = setup(data=train,target='Class', normalize=True, session_id=42)","2358d531":"compare_models(sort='Recall')","29c5b189":"qda_cls = create_model('qda')","90f5cc7d":"tune_qda = tune_model(qda_cls, optimize = 'Recall', choose_better = True)","2da35d06":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.countplot(train['Class'])\nplt.show()\nprint('Percent of fraud transaction: ',len(train[train['Class']==1])\/len(train['Class'])*100,\"%\")\nprint('Percent of normal transaction: ',len(train[train['Class']==0])\/len(train['Class'])*100,\"%\")","b888ac6d":"classification_setup1 = setup(data=train,target='Class', normalize=True, session_id=42, fix_imbalance = True)","39ec5df9":"compare_models(sort='Recall', blacklist = ['gbc'])","75c68838":"svm_cls = create_model('svm')","99f56bfc":"tune_svm = tune_model(svm_cls, optimize = 'Recall', choose_better = True)","558c18a1":"# plotting a model\nplot_model(tune_svm,plot = 'confusion_matrix')","164b68a9":"# error Curve\nplot_model(tune_svm, plot = 'error')","6befb885":"# Precision Recall Curve\nplot_model(tune_svm, plot = 'pr')","8868a10b":"# Classification Report Curve\nplot_model(tune_svm, plot = 'class_report')","c1530a51":"y_pred = predict_model(tune_svm)","c923da4c":"**Compare Models**\n\n* Compare_models function train all the models which are available in library using stratified cross validation, this function will return score grid of all model across k-fold(default=10).\n* Scoring matrics used are Accuracy, AUC, Recall, Precision, F1, Kappa and MCC. Mean and standard deviation of the scores across the folds are also returned.\n* You can blacklist(omit certain models from the comparison) and whiltelist(un only certain models for the comparison) the model, passig model ID\u2019s as a list of strings eg. whitelist = compare_models(whitelist = ['dt','rf','xgboost']) blacklist = compare_models(blacklist = ['catboost', 'svm'])\n* Best model return as per the sort parameter(default=Accuracy) passed.\n* Also we can select N top models passing n_select(default=1) parameter","7e5dad9b":"Only 492 (or 0.172%) of transaction are fraudulent. That means the data is highly unbalanced with respect with target variable Class.","339e1cf8":"**Create Model**\n\n* Let\u2019s create an individual model that displays different evaluation matric using 10 k-fold with mean and std.\n* create_model function takes just the one parameter \u2013 the model abbreviation as a string.","ef4e6faf":"**Setup**\n\n* Setup() performs inferences about the data and creates the transformation pipeline to prepare the data for modeling and deployment.\n* Initializing setup() function performs some basic preprocessing tasks like ignoring the IDs and Date Columns, imputing the missing values, encoding the categorical variables, and splitting the dataset into the train-test split, data imbalance, feature selection, binning, etc. for the rest of the modeling steps. When you run the setup function, it will first confirm the data types, and then if you press enter, it will create an environment for data preprocessing.\n* It takes 2 mendatory parameter Dataframe and name of the target column","993e53a4":"# Problem statement - Identify fraudulent credit card transactions.\u00b6\n\nIt is important that credit card companies are able to recognize fraudulent credit card transactions so that customers are not charged for items that they did not purchase. Make your machine learning model learn to detect these anomalous transactions","f8e8fa3e":"# **Balancing Imbalance Data**","a636870a":"So, now the necessary preprocessing is done, let\u2019s create a classification model.","0ed28ba5":"Now we are fixing imbalanced dataset using a function **fix_imbalance = True** and **fix_imbalance_method = SMOTE**.","a052488b":"We are excluding gradient boosting classifier using blacklist function, it is taking a lot time to run on a vast dataset "}}