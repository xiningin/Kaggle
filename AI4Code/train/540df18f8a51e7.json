{"cell_type":{"b1168fcc":"code","9376879a":"code","c589ff62":"code","db22bc1f":"code","7dca0470":"code","9648b124":"code","d800a3ee":"code","fef75075":"code","63eea9e1":"code","2718f5bb":"code","f0452803":"code","c75de3aa":"code","cbac6798":"code","6b43dd55":"code","914eca15":"code","df93b459":"code","7b541aa7":"code","20401593":"code","442401ed":"code","bfda7815":"code","b2b46718":"code","7d86ee08":"code","799ae4fc":"code","5f7986a9":"code","dfc57c32":"code","5046eb14":"code","8166a5aa":"code","0fc6f2e7":"code","91cb76e6":"code","a52aa555":"code","ee8d5746":"code","e83ec81f":"code","e7624318":"code","ffdf40f2":"code","0d2cc2f3":"code","8f550c4c":"code","edaefa6d":"code","80761447":"code","d84e0b78":"code","af0e8381":"code","4c62f4f5":"code","5457e890":"code","b49661f8":"code","214b923c":"code","3e1c3612":"code","54eadf3b":"code","f0b1e95c":"code","31227ed1":"code","035496c7":"code","22fbd875":"code","cf10077f":"code","505d0be5":"code","6e775aa9":"code","992c88b4":"code","479177ee":"code","bf22c1ad":"code","75791b38":"code","51e53863":"code","5b058678":"markdown","21c37931":"markdown","5571970f":"markdown","5527066f":"markdown","22e954e9":"markdown","821954b3":"markdown","e0ae3cff":"markdown","46db5a4c":"markdown","e3ed53c2":"markdown","773b42f4":"markdown","d76d7c1c":"markdown","055c3d46":"markdown","fb753a02":"markdown","03180f23":"markdown","78fc2928":"markdown","9d35562a":"markdown","bec1e03c":"markdown","1e6db176":"markdown","ec12ed86":"markdown","e4158697":"markdown","5b419585":"markdown","5ca88a50":"markdown","765ef5fd":"markdown","64327077":"markdown","9664c0c2":"markdown","900fb1ea":"markdown","85973435":"markdown","a66be089":"markdown","525ae222":"markdown","ba590910":"markdown","1d085a0c":"markdown","e7e2b304":"markdown","fc14c455":"markdown","6c77859d":"markdown","420ac64c":"markdown"},"source":{"b1168fcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9376879a":"import numpy as np\nimport pandas as pd \nimport tensorflow as tf\nimport zipfile\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\"))","c589ff62":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","db22bc1f":"def extract_files(source_path, target_path):\n    zip_ref = zipfile.ZipFile(source_path,'r')\n    zip_ref.extractall(target_path)\n    zip_ref.close()","7dca0470":"extract_files('\/kaggle\/input\/dogs-vs-cats\/test1.zip','\/kaggle\/working\/')\nextract_files('\/kaggle\/input\/dogs-vs-cats\/train.zip','\/kaggle\/working\/')\n","9648b124":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","d800a3ee":"df.head()","fef75075":"df.tail()","63eea9e1":"df['category'].value_counts().plot.bar()","2718f5bb":"sample = random.choice(filenames)\nimage = load_img(\"\/kaggle\/working\/train\/\"+sample)\nplt.imshow(image)","f0452803":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","c75de3aa":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","cbac6798":"earlystop = EarlyStopping(patience=10)","6b43dd55":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","914eca15":"callbacks = [earlystop, learning_rate_reduction]","df93b459":"df[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) ","7b541aa7":"train_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","20401593":"train_df['category'].value_counts().plot.bar()","442401ed":"validate_df['category'].value_counts().plot.bar()","bfda7815":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15","b2b46718":"train_datagen = ImageDataGenerator(rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","7d86ee08":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","799ae4fc":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","5f7986a9":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","dfc57c32":"epochs=3 if FAST_RUN else 10\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","5046eb14":"model.save_weights(\"model.h5\")","8166a5aa":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","0fc6f2e7":"test_filenames = os.listdir(\"\/kaggle\/working\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","91cb76e6":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","a52aa555":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","ee8d5746":"test_df['category'] = np.argmax(predict, axis=-1)","e83ec81f":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","e7624318":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","ffdf40f2":"test_df['category'].value_counts().plot.bar()","0d2cc2f3":"sample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"\/kaggle\/working\/test1\/\"+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","8f550c4c":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename','category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","edaefa6d":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","80761447":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","d84e0b78":"resnet_weights_path = 'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n","af0e8381":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\nnum_classes = 2\nresnet_weights_path = 'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# Indicate whether the first layer should be trained\/changed or not.\nmy_new_model.layers[0].trainable = False\n","4c62f4f5":"my_new_model.compile(optimizer='sgd', \n                     loss='categorical_crossentropy', \n                     metrics=['accuracy'])","5457e890":"!ls images\/train\/upright","b49661f8":"from tensorflow.keras.preprocessing.image import load_img\nimg = load_img('images\/kaggle\/input\/dogs-vs-cats\/train.zip')\nimg","214b923c":"from tensorflow.keras.preprocessing.image import load_img\nimg = load_img('\/kaggle\/input\/dogs-vs-cats\/test1.zip')\nimg","3e1c3612":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n                                        directory='images\/train',\n                                        target_size=(image_size, image_size),\n                                        batch_size=10,\n                                        class_mode='categorical')\n\n\n\nvalidation_generator = data_generator.flow_from_directory(\n                                        directory='images\/val',\n                                        target_size=(image_size, image_size),\n                                        class_mode='categorical')\n\n\n\n# fit_stats below saves some statistics describing how model fitting went\n# the key role of the following line is how it changes my_new_model by fitting to data\nfit_stats = my_new_model.fit_generator(train_generator,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator,\n                                       validation_steps=1)\n\n#step_4.check()","54eadf3b":"filenames = validation_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(validation_generator,steps = nb_samples)","f0b1e95c":"import numpy as np\npred = np.argmax(predict, axis=1)","31227ed1":"from sklearn.metrics import confusion_matrix,accuracy_score\nconfusion_matrix(pred,test_generator.labels)","035496c7":"accuracy_score(pred,test_generator.labels)","22fbd875":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n                                        directory='images\/train',\n                                        target_size=(image_size, image_size),\n                                        batch_size=10,\n                                        class_mode='categorical')\n\n\n\nvalidation_generator = data_generator.flow_from_directory(\n                                        directory='images\/val',\n                                        target_size=(image_size, image_size),\n                                        class_mode='categorical')\n\n\n\n# fit_stats below saves some statistics describing how model fitting went\n# the key role of the following line is how it changes my_new_model by fitting to data\nfit_stats = my_new_model.fit_generator(train_generator,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator,\n                                       validation_steps=1)\n\n#step_4.check()","cf10077f":"from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\ndata_generator_with_aug = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                   horizontal_flip=True,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2)\n\ntrain_generator_aug = data_generator_with_aug.flow_from_directory(\n        'images\/train',\n        target_size=(image_size, image_size),\n        batch_size=24,\n        class_mode='categorical')","505d0be5":"filenames = validation_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(validation_generator,steps = nb_samples)","6e775aa9":"data_generator_no_aug = ImageDataGenerator(preprocessing_function=preprocess_input)\nvalidation_generator_no_aug = data_generator_no_aug.flow_from_directory(\n        'images\/val',\n        target_size=(image_size, image_size),\n        class_mode='categorical')","992c88b4":"fit_stats = my_new_model.fit_generator(train_generator_aug,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator_no_aug,\n                                       validation_steps=1)","479177ee":"test_datagen = ImageDataGenerator(preprocess_input)\n\ntest_generator = test_datagen.flow_from_directory(\n        'images\/val',\n        target_size=(image_size, image_size),\n        color_mode=\"rgb\",\n        shuffle = False,\n        class_mode='categorical',\n        batch_size=1)\n\nfilenames = test_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(test_generator,steps = nb_samples)","bf22c1ad":"import numpy as np\npred = np.argmax(predict, axis=1)","75791b38":"from sklearn.metrics import confusion_matrix,accuracy_score\nconfusion_matrix(pred,test_generator.labels)","51e53863":"accuracy_score(pred,test_generator.labels)","5b058678":"Input Layer: It represent input image data. It will reshape image into single diminsion array. Example your image is 64x64 = 4096, it will convert to (4096,1) array.\nConv Layer: This layer will extract features from image.\nPooling Layer: This layerreduce the spatial volume of input image after convolution.\nFully Connected Layer: It connect the network from a layer to another layer\nOutput Layer: It is the predicted values layer.","21c37931":"We will convert the predict category back into our generator classes by using train_generator.class_indices. It is the classes that image generator map while converting data into computer vision","5571970f":"From our prepare data part. We map data with {1: 'dog', 0: 'cat'}. Now we will map the result back to dog is 1 and cat is 0","5527066f":"See Total In count","22e954e9":"Build Model","821954b3":"Because we will use image genaretor with class_mode=\"categorical\". We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to dog and 0 to cat","e0ae3cff":"Prepare Traning Data","46db5a4c":"See Total In count","e3ed53c2":"Visualize Training","773b42f4":"Prepare Traning Data","d76d7c1c":"Fit Model","055c3d46":"Early Stop","fb753a02":"Create Testing Generator","03180f23":"Importing the Required Libraries","78fc2928":"Submission File Generation","9d35562a":"Data Augumentation","bec1e03c":"See predicted result with images","1e6db176":"Prepare Testing Data","ec12ed86":"Callbacks","e4158697":"Predict","5b419585":"See sample image","5ca88a50":"Virtaulize Result","765ef5fd":"'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n","64327077":"Fit Model","9664c0c2":"Learning Rate Reduction","900fb1ea":"Traning Generator","85973435":"Prepare data","a66be089":"Compile the Model","525ae222":"Define Constants","ba590910":"We will reduce the learning rate when then accuracy not increase for 2 steps","1d085a0c":"Save Model","e7e2b304":"Validation Generator","fc14c455":"To prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased","6c77859d":"See how our generator work","420ac64c":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max\n\n"}}