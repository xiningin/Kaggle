{"cell_type":{"bcfcca01":"code","ce1cdb2c":"code","a1a37b83":"code","3b3f9d33":"code","bb97a711":"code","e3ab8ca6":"code","aa74b29b":"code","70310b32":"code","862bac68":"code","8f94c3ea":"code","fd3cfec4":"code","3c3f4dd4":"code","a497520f":"code","b1744f5c":"code","8b0ffb21":"code","ed2c3256":"code","a968cf33":"code","f54f632c":"code","563c1e5d":"code","6f24f6fb":"code","e19b8562":"code","0d2b8f3e":"code","10f39ca1":"code","6a600a81":"code","04208787":"code","3f9e7b45":"code","b2512adb":"code","77084d98":"code","ff5fcd47":"markdown","79d2e300":"markdown","03057771":"markdown","ccb0c381":"markdown","7102e9d3":"markdown","70b4b20c":"markdown","0f284238":"markdown","ec3781e3":"markdown","1e01bfb5":"markdown","ac6b537a":"markdown","ea639719":"markdown","d807c41a":"markdown","e1ef1e42":"markdown","f7aec1ac":"markdown","91333b1c":"markdown","9ca7a560":"markdown","a85bc736":"markdown","4ba585b2":"markdown"},"source":{"bcfcca01":"\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nsns.set(color_codes=True)\nplt.style.use('fivethirtyeight')  \nimport warnings\nwarnings.filterwarnings('ignore')  #this will ignore the warnings.it wont display warnings in notebook\n","ce1cdb2c":"dataset=pd.read_csv('..\/input\/Iris.csv')","a1a37b83":"dataset.head()","3b3f9d33":"#Dropping Id Coloumn\ndataset=dataset.drop('Id',axis=1)\ndataset.head()","bb97a711":"#dimension\nprint(dataset.shape)  \n","e3ab8ca6":"#checking if any null object is present or not\nprint(dataset.info())   \n","aa74b29b":"# Statistical summary\nprint(dataset.describe()) ","70310b32":"#class distribution\nprint(dataset.groupby('Species').size())","862bac68":"#Statistical Summary of the data\ndataset.describe().plot(kind = \"area\",fontsize=27, figsize = (20,8), table = True,colormap=\"rainbow\")\nplt.xlabel('Statistics',)\nplt.ylabel('Value')\nplt.title(\"General Statistics of Iris Dataset\")","8f94c3ea":"## Box and Whisker plots\ndataset.plot(kind='box', sharex=False, sharey=False)","fd3cfec4":"# Boxplot on each feature split out by species\ndataset.boxplot(by=\"Species\", figsize=(12, 6))","3c3f4dd4":"# Histograms\ndataset.hist(edgecolor='red', linewidth=1.4)","a497520f":"#STRIP PLOT\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.stripplot(x='Species',y='SepalLengthCm',data=dataset,jitter=True,edgecolor='gray',size=8,palette='winter',orient='v')","b1744f5c":"#Bar plot\nsns.countplot('Species',data=dataset)\nplt.show()","8b0ffb21":"#pie plot\ndataset['Species'].value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',shadow=True,figsize=(10,8))\nplt.show()","ed2c3256":"#HEATMAP\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.heatmap(dataset.corr(),annot=True,cmap='cubehelix',linewidths=1,linecolor='k',square=True,mask=False, vmin=-1, vmax=1,cbar_kws={\"orientation\": \"vertical\"},cbar=True)","a968cf33":"#SCATTERPPLOT(or pair plot)\nsns.pairplot(dataset,hue='Species')","f54f632c":"#VIOLIN PLOT\nplt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='SepalLengthCm',data=dataset)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=dataset)\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='PetalLengthCm',data=dataset)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=dataset)","563c1e5d":"\n#Separating dataset into independent and dependent variables\nX = dataset.iloc[:, :-1].values\nY= dataset.iloc[:, -1].values","6f24f6fb":"# Splitting the dataset into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)","e19b8562":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","0d2b8f3e":"#KNN MODEL\n\n#FITTING CLASSIFIER TO THE TRAINING SET\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski', p=2) \nclassifier.fit(X_train,Y_train)\n#predicting the test set result\nY_pred=classifier.predict(X_test)\n#Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix    \ncm=confusion_matrix(Y_test,Y_pred)               \n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))\n","10f39ca1":"\n#Logistics Regression\n#Fitting the logistic regression to the dataset\nfrom sklearn.linear_model import LogisticRegression\nclassifier=LogisticRegression(random_state= 0)\nclassifier.fit(X_train,Y_train)\n#predicting the test set result\nY_pred=classifier.predict(X_test)\n#Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix     \ncm=confusion_matrix(Y_test,Y_pred)              \n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))","6a600a81":"#SVM\n\n# Fitting classifier to the Training set\n# Create your classifier here\nfrom sklearn.svm import SVC\nclassifier=SVC(kernel='linear',random_state=0)\nclassifier.fit(X_train,Y_train)\n# Predicting the Test set results\nY_pred = classifier.predict(X_test)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, Y_pred)\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))","04208787":"\n#Kernel SVM\n# Fitting classifier to the Training set\n# Create your classifier here\nfrom sklearn.svm import SVC\nclassifier=SVC(kernel='rbf',random_state=0)\nclassifier.fit(X_train,Y_train)\n# Predicting the Test set results\nY_pred = classifier.predict(X_test)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, Y_pred)\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))","3f9e7b45":"#Naive Bayes\n# Fitting classifier to the Training set\n# Create your classifier here\nfrom sklearn.naive_bayes import GaussianNB\nclassifier=GaussianNB()\nclassifier.fit(X_train,Y_train)\n# Predicting the Test set results\nY_pred = classifier.predict(X_test)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, Y_pred)\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))","b2512adb":"#Decision Tree\n\n# Fitting Decision Tree Classification to the Training set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, Y_train)\n# Predicting the Test set results\nY_pred = classifier.predict(X_test)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, Y_pred)\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))","77084d98":"\n#Random forest\n# Fitting classifier to the Training set\n# Create your classifier here\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier=RandomForestClassifier(n_estimators=10,criterion='entropy', random_state=0)\nclassifier.fit(X_train,Y_train)\n# Predicting the Test set results\nY_pred = classifier.predict(X_test)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, Y_pred)\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy is',accuracy_score(Y_pred,Y_test))","ff5fcd47":"2.Importing data","79d2e300":"Heat Map","03057771":"Strip Plot","ccb0c381":"IRIS SPECIES CLASSIFICATION","7102e9d3":"Scatter Plot","70b4b20c":"#Data Cleaning\n","0f284238":"Thank you for reading !!!!\nI hope it would be helpful for the readers.","ec3781e3":"Box and Whisker Plot","1e01bfb5":"3.Data Visualization","ac6b537a":"4.Classification Model","ea639719":"1.Importing the libraries","d807c41a":"Violin Plot","e1ef1e42":"Bar Plot","f7aec1ac":"#Summary of Dataset","91333b1c":"Histograms","9ca7a560":"Introduction\n\nThis kernel notebook has Iris Species Data Visualisation and Data Analysis using all Classification models in Python.This is my first machine learning project in Python at Kaggle.I have taken the Iris dataset to do Data analysis.So here in this kernel I am going to do  data exploration,  data visualisation and build some classification models and then finally I will show the accuracy of all the models.","a85bc736":"Statistical Summary of the Data","4ba585b2":"Pie Plot"}}