{"cell_type":{"1a6340ab":"code","22bba3b2":"code","502ef7f5":"code","df7ae22a":"code","1456e7a8":"code","8a44b259":"code","9ffe9ff3":"code","17ec3e75":"code","def46704":"code","b40aca57":"code","9c98ab5d":"code","0f759c67":"code","d90132cd":"code","04cce4b3":"code","119d7b2c":"code","39600465":"code","d92f94af":"code","92e44204":"code","a65dc0bb":"code","6fe2f589":"code","6acf015b":"code","0a66ec7f":"code","e79c15ec":"code","60079145":"code","59356da6":"code","98f7a876":"code","5251ad75":"code","9b7e2523":"code","a718450f":"code","35de4a1b":"code","0ca3f272":"code","77980b40":"code","2d536aeb":"code","935d94c5":"code","a3710eca":"code","4f52f5d4":"code","0fa70ae6":"code","04f989e0":"markdown","cd2e9f3f":"markdown","450ff4e8":"markdown","5a927bba":"markdown","3213b64d":"markdown","a5ecebd9":"markdown","07ed4aa0":"markdown","83a20613":"markdown","72287fdd":"markdown","1812629b":"markdown","ef9da273":"markdown","e804c81e":"markdown","96a1a28d":"markdown","9bb10835":"markdown","e07cc83b":"markdown","61b10036":"markdown","111e80b7":"markdown"},"source":{"1a6340ab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","22bba3b2":"import warnings\nwarnings.filterwarnings('ignore')","502ef7f5":"# Change default matplotlib figsize\nplt.rcParams['figure.figsize'] = (20, 10)","df7ae22a":"dataset_path = '\/kaggle\/input\/russian-passenger-air-service-20072020\/russian_passenger_air_service_2.csv'","1456e7a8":"df = pd.read_csv(dataset_path)","8a44b259":"df.head()","9ffe9ff3":"print('Number of rows:', df.shape[0])\nprint('Number of Airports:', df['Airport name'].nunique())\nprint('First Year:', df['Year'].min())\nprint('Last Year:', df['Year'].max())","17ec3e75":"months = df.columns[~df.columns.isin([\n    'Airport name',\n    'Airport coordinates',\n    'Whole year', 'Year'\n])]","def46704":"# Mapping (e.g. January = 1, February = 2, ...)\nmapping = {v: k for k,v in enumerate(months, start=1)} ","b40aca57":"time_series = df.melt(\n    id_vars=['Airport name', 'Year'],\n    value_vars=months,\n    var_name='Month'\n)","9c98ab5d":"time_series['date'] = time_series.apply(lambda x: f\"{x['Year']}-{mapping[x['Month']]:02d}\", axis=1)","0f759c67":"time_series['date'] = pd.to_datetime(time_series['date']) # Covert type","d90132cd":"time_series = (\n    time_series\n    .rename(columns={'Airport name': 'airport', 'value': 'passengers'})\n    .drop(columns=['Year', 'Month'])\n)","04cce4b3":"time_series.info()","119d7b2c":"by_month = time_series.groupby('date').sum().loc[:'2019-12-01'] ","39600465":"by_month.head()","d92f94af":"fig = by_month.plot(title='Passengers by month')","92e44204":"from statsmodels.graphics.tsaplots import plot_acf","a65dc0bb":"fig = plot_acf(by_month['passengers'], lags=32)","6fe2f589":"dec_df = by_month.copy() # Copy the DataFrame","6acf015b":"from sklearn.linear_model import LinearRegression","0a66ec7f":"x, y = dec_df.index.values.reshape(-1, 1), dec_df.values.reshape(-1, 1)","e79c15ec":"model = LinearRegression()\nmodel = model.fit(x, y)","60079145":"print('Coefficient:', model.coef_[0][0])\nprint('Independent term:', model.intercept_[0])","59356da6":"dec_df['linear_trend'] = model.predict(x.astype('float').reshape(-1, 1))","98f7a876":"dec_df['linear_detrended'] = dec_df['passengers'] - dec_df['linear_trend']","5251ad75":"fig = dec_df[[\n    'passengers',\n    'linear_trend',\n    'linear_detrended'\n]].plot(subplots=True, title='Additive with Linear Regression')","9b7e2523":"dec_df['linear_detrended'] = dec_df['passengers'] \/ dec_df['linear_trend']","a718450f":"fig = dec_df[[\n    'passengers',\n    'linear_trend',\n    'linear_detrended'\n]].plot(subplots=True, title='Multiplicative with Linear Regression')","35de4a1b":"# Calculate a 12-period Simple Moving Average (SMA)\ndec_df['ma_trend'] = dec_df['passengers'].rolling(12).mean()","0ca3f272":"dec_df['ma_detrended'] = dec_df['passengers'] - dec_df['ma_trend']","77980b40":"fig = dec_df[[\n    'passengers',\n    'ma_trend',\n    'ma_detrended'\n]].plot(subplots=True, title='Additive with Moving Average')","2d536aeb":"dec_df['ma_detrended'] = dec_df['passengers'] \/ dec_df['ma_trend']","935d94c5":"fig = dec_df[[\n    'passengers',\n    'ma_trend',\n    'ma_detrended'\n]].plot(subplots=True, title='Multiplicative with Moving Average')","a3710eca":"from statsmodels.tsa.seasonal import seasonal_decompose","4f52f5d4":"decomposition = seasonal_decompose(\n    x=by_month.passengers,\n    model='multiplicative',\n    period=12\n)","0fa70ae6":"fig = decomposition.plot() # Plot components","04f989e0":"- [1. Preprocessing the dataset](#preprocessing)\n- [2. Exploratory Analysis](#exploratory)\n\n    - [2.1. Autocorrelation](#autocorr)\n    - [2.2. Time Series Decomposition](#decompose)\n        - [2.2.1. Removing Trend using Linear Regression](#trend-linear)\n        - [2.2.2. Removing Trend using Moving Averages](#trend-ma)\n        - [2.2.3. Classical Decomposition](#classical)","cd2e9f3f":"#### Multiplicative ($y_t * Trend_t^{-1}$)","450ff4e8":"The original dataset is a little anoying to work with, because the `Year` is a column but each month is a new one columns (e.g. `January`, `February`). Instead of using it like it is, let's create a datetime field and unpivot the dataframe to a long format using the [`pandas.melt()`](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.melt.html).","5a927bba":"#### Multiplicative ($y_t * Trend_t^{-1}$)","3213b64d":"# [2. Exploratory Analysis](#exploratory)","a5ecebd9":"### [2.2.3. Classical Decomposition](#classical)","07ed4aa0":"#### Additive ($y_t - Trend_t$)","83a20613":"For now, let's ignore the data for each airport and explore the aggregated time series from 2007 and 2019.","72287fdd":"Autocorrelation measures the **linear relationship between lagged values** of the time series.  \nWe can clearly see a seasonal pattern in the data because of the 12 period autocorrelation.","1812629b":"#### Create time index","ef9da273":"## [2.2. Time Series Decomposition](#decompose)","e804c81e":"# [1. Preprocessing the Dataset](#preprocessing)","96a1a28d":"### [2.2.2. Removing Trend using Moving Averages](#trend-ma)","9bb10835":"Let's model the trend using the _sklearn_ [`sklearn.LinearRegression`](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html) class to perform a linear regression using Ordinary Least Squares (OLS). This could alse be done using the _statsmodel's_ OLS implementation: [`statsmodels.api.OLS`](https:\/\/www.statsmodels.org\/devel\/generated\/statsmodels.regression.linear_model.OLS.html).","e07cc83b":"## [2.1. Autocorrelation](#autocorr)","61b10036":"#### Additive ($y_t - Trend_t$)","111e80b7":"### [2.2.1. Removing Trend using Linear Regression](#trend-linear)"}}