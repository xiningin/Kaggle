{"cell_type":{"4502a3a3":"code","993ffd05":"code","3b62e653":"code","ba4d30ef":"code","81f4f4c7":"code","f0994c7c":"code","078c4b44":"code","83c1f0d7":"code","fb8df11d":"code","566b27d8":"code","3bffccca":"code","a90865bb":"code","b4dcea2a":"code","9ba4f11c":"code","ba20c425":"code","b7b7268d":"code","34a904c4":"code","820ce277":"code","5c31fb2e":"code","e6bbe4e7":"code","24dc2060":"code","a2639fc4":"code","39399fc6":"code","7a5c9e15":"code","be516018":"code","98471b27":"code","952b6443":"code","59e07bcf":"code","4abee00f":"code","b4dfe247":"code","3150556c":"code","578adc4c":"code","835e9cc9":"code","aec54b61":"code","a811988f":"code","22095421":"code","6e47bac9":"code","f526d220":"code","45a954b7":"code","689ad877":"code","8b74e441":"code","62ee0554":"code","4ac78c60":"code","0ed3e097":"code","20e1663b":"code","180b823a":"code","43376376":"markdown","429c959f":"markdown","a9382c7e":"markdown","3891fd51":"markdown","e1bd676d":"markdown","c38436fc":"markdown","d988e991":"markdown","fa8dfdd1":"markdown","f9d0eb37":"markdown","7cc9927a":"markdown","b78ee752":"markdown","5b35f254":"markdown","420dd0a0":"markdown","153a3c1c":"markdown","0110df70":"markdown","b4b5b72b":"markdown","b99d3243":"markdown"},"source":{"4502a3a3":"# import the important libraries.\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas_profiling as pp","993ffd05":"# data Loading\ndata=pd.read_csv('..\/input\/bank-additional-full.csv', sep = ';')\ndata.sample(5)","3b62e653":"print(\"Shape of the data:\",data.shape)\nprint(\"Columns Names are:\\n\",data.columns)","ba4d30ef":"print(\"General Information about the Data\")\ndata.info()","81f4f4c7":"print(\"Data Types for all the columns of the data: \\n\",data.dtypes)","f0994c7c":"numeric_data = data.select_dtypes(include = np.number)\nnumeric_data.head()","078c4b44":"numeric_data.columns","83c1f0d7":"categorical_data = data.select_dtypes(exclude = np.number)\ncategorical_data.head()","fb8df11d":"categorical_data.columns","566b27d8":"pp.ProfileReport(data)","3bffccca":"print(\"Is there any null values in the data ? \\n\",data.isnull().values.any())","a90865bb":"print(\"Total Null Values in the data = \",data.isnull().sum().sum())","b4dcea2a":"total= data.isnull().sum()\npercent_missing = data.isnull().sum()\/data.isnull().count()\nprint(percent_missing)","9ba4f11c":"data[data.duplicated(keep='first')]","ba20c425":"data.drop_duplicates(keep='first',inplace=True)","b7b7268d":"print(\"Information about the dataframe : \\n \")\ndata.info()","34a904c4":"# Which columns have the most missing values?\ndef missing_data(df):\n    total = df.isnull().sum()\n    percent = total\/df.isnull().count()*100\n    missing_values = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in df.columns:\n        dtype = str(df[col].dtype)\n        types.append(dtype)\n    missing_values['Types'] = types\n    missing_values.sort_values('Total',ascending=False,inplace=True)\n    return(np.transpose(missing_values))\nmissing_data(data)","820ce277":"print('Discrption of Numeric Data : ')\ndata.describe()","5c31fb2e":"print('Discrption of Categorical Data : ')\ndata.describe(include='object')","e6bbe4e7":"print(\"Target values counts:\\n\",data['y'].value_counts())\ndata['y'].value_counts().plot.bar()\nplt.show()","24dc2060":"class_values = (data['y'].value_counts()\/data['y'].value_counts().sum())*100\nclass_values","a2639fc4":"print(\"Histogram for the numerical features :\\n\")\ndata.hist(figsize=(15,15),edgecolor='k',color='skyblue')\nplt.tight_layout()\nplt.show()","39399fc6":"cols = categorical_data.columns\nfor column in cols:\n    plt.figure(figsize=(15,6))\n    plt.subplot(121)\n    data[column].value_counts().plot(kind='bar')\n    plt.title(column)\n    plt.tight_layout()","7a5c9e15":"\ndata.plot(kind='box',subplots=True,layout=(4,3),figsize=(15,15))\nplt.tight_layout()","be516018":"data.groupby([\"contact\"]).mean()","98471b27":"data.groupby(\"education\").mean()","952b6443":"data.pivot_table(values=\"age\",index=\"month\",columns=[\"marital\",\"contact\"])","59e07bcf":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()\ncat_var=['age', 'job', 'marital', 'education', 'default', 'housing', 'loan',\n       'contact', 'month', 'day_of_week','poutcome','y']\nfor i in cat_var:\n    data[i]=LE.fit_transform(data[i])\n    \ndata.head()","4abee00f":"X= data.iloc[:,:-1]\ny= data.iloc[:,-1:]","b4dfe247":"#Now with single statement, you will be able to see all the variables created globally across the notebook, data type and data\/information\n%whos","3150556c":"from sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\nfrom sklearn.linear_model import LogisticRegression, Ridge,Lasso, ElasticNetCV\nfrom sklearn.preprocessing import RobustScaler, MinMaxScaler, StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import r2_score,confusion_matrix, mean_squared_error,accuracy_score, f1_score,classification_report\nfrom sklearn.preprocessing import StandardScaler\nimport xgboost as xgb\n\nimport math\nimport sklearn.model_selection as ms\nimport sklearn.metrics as sklm\n\nfrom imblearn.over_sampling import SMOTE \n\n","578adc4c":"sc=StandardScaler()\nsc.fit_transform(X)","835e9cc9":"sm = SMOTE(random_state = 2)\nX_sm, y_sm = sm.fit_sample(X, y)","aec54b61":"X_train,X_test,y_train,y_test=train_test_split(X_sm,y_sm,test_size=0.25,random_state=2)","a811988f":"lr=LogisticRegression(penalty = 'l1',solver = 'liblinear')\nlr.fit(X_train,y_train)\npred_lr=lr.predict(X_test)\nprint(confusion_matrix(y_test,pred_lr))\nscore_lr= accuracy_score(y_test,pred_lr)\nprint(\"Accuracy Score is: \", score_lr)\nprint(\"F1 Score is: \", f1_score(y_test,pred_lr))\nprint(classification_report(y_test, pred_lr))\n\n","22095421":"knn=KNeighborsClassifier()\nknn.fit(X_train,y_train)\npred_knn=knn.predict(X_test)\nprint(classification_report(y_test,pred_knn))\nconfusion_matrix(y_test,pred_knn)","6e47bac9":"score_knn = cross_val_score(knn,y_test,pred_knn,cv=5,scoring = 'f1')\nprint(score_knn)\nprint(\"Mean of the cross validation scores:\",score_knn.mean())","f526d220":"dt=DecisionTreeClassifier()\ndt.fit(X_train,y_train)\npred_dt=dt.predict(X_test)\nconfusion_matrix(y_test,pred_dt)","45a954b7":"score_dt=cross_val_score(dt,y_test,pred_dt,cv=5)\nprint(score_dt)\nprint(\"Mean of the cross validation scores:\",score_dt.mean())","689ad877":"rf=RandomForestClassifier()\nrf.fit(X_train,y_train)\npred_rf=rf.predict(X_test)\nconfusion_matrix(y_test,pred_rf)","8b74e441":"score_rf=cross_val_score(rf,y_test,pred_dt,scoring='f1',cv=5)\nprint(score_rf)\nprint(\"Mean of the cross validation scores:\",score_rf.mean())","62ee0554":"xgb_clf= xgb.XGBClassifier()\nxgb_clf.fit(X_train,y_train)\npred_xgb=xgb_clf.predict(X_test)\nconfusion_matrix(y_test,pred_xgb)","4ac78c60":"score_xgb = cross_val_score(xgb_clf,y_test,pred_xgb,scoring = 'f1',cv=5)\nprint(score_xgb)\nprint(\"Mean of the cross validation scores:\",score_xgb.mean())","0ed3e097":"print('Feature importances:\\n{}'.format(repr(xgb_clf.feature_importances_)))","20e1663b":"print(\"F1 Score of Logistic Regression\",score_lr)\nprint(\"F1 Score of KNN\",score_knn.mean())\nprint(\"F1 Score of Decision Tree\",score_dt.mean())\nprint(\"F1 Score of Random Forest\",score_rf.mean())\nprint(\"F1 Score of XGB\",score_xgb.mean())","180b823a":"\nplt.bar(x=[\"LR\",\"KNN\",\"DT\",\"RF\",\"XGB\"],height=[score_lr,score_knn.mean(),score_dt.mean(),score_rf.mean(),score_xgb.mean()])\nplt.title( \"Model Performances of Models\",fontsize = 22)\nplt.xlabel(\"Models\",fontsize = 16)\nplt.ylabel(\"F1 Score\",fontsize=16)\nplt.ylim(0,1)\nplt.show()","43376376":"## KNN\n","429c959f":"## Decision Tree Classifier","a9382c7e":"#### Import machine learnig libraries","3891fd51":"### Check for class imbalance","e1bd676d":"#### Total numbers of missing values values in each column. ####","c38436fc":"## Logistic Regression","d988e991":"### Thankyou for visit the kernel. If you have any suggustion please comment.if you feel the kernel helpful,\n\n### please upvote.","fa8dfdd1":"### Univariate Analysis for categorical features","f9d0eb37":"## XGBoost Classifier","7cc9927a":"## Comaparison Between Model performances","b78ee752":"# Subscription Prediction for bank Marketing Data","5b35f254":"So after comparing the f1 score of the models, we can say that XGBoost classier has better performance than other models.","420dd0a0":"## Random Forest Classifier","153a3c1c":"# Classification Models","0110df70":"### Numeric or categorical data","b4b5b72b":"That makes it highly unbalanced, the positive class account for 11.27% of all target.","b99d3243":"### Load the dataset."}}