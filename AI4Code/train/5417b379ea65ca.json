{"cell_type":{"775e4023":"code","b107e308":"code","cd05cdee":"code","b893ffed":"code","f1c37000":"code","78fe0f4a":"code","5d255928":"code","d30c6263":"code","acf4566a":"code","d91e4372":"code","0f714976":"code","c59a7bfb":"code","9010b820":"code","fba0781b":"code","c63195ca":"code","17b0114d":"code","e0cbecb6":"code","a213212f":"code","e7bf52cb":"code","34551aa4":"code","4d9d2b18":"code","a374135d":"code","238774ac":"code","f560e185":"code","dd5e17b9":"code","494aab6d":"code","d8b72c49":"code","3ec31667":"code","b143f3e6":"code","857b88cd":"code","c3586514":"code","e59e17a5":"code","6b021a3a":"code","46b84595":"code","f94aabde":"code","5fce7f47":"code","c688a963":"code","881f22d8":"code","ea5f9662":"code","79459192":"code","7015c7e1":"code","672763b4":"code","ae125742":"code","98ca455c":"code","8531ba7b":"code","cf241c7b":"code","c5be2f9a":"code","f9dbed12":"code","5bfcbf66":"code","93ed41b3":"code","a8fd34a7":"code","dd5e3217":"code","ac24c7a1":"code","b7a1811d":"code","b8c46012":"code","c5717776":"code","7317516f":"code","5d401312":"code","bb2cbbae":"code","c29dd467":"code","bb223858":"code","5e3b2a35":"code","e3b483c4":"code","963aca05":"code","4b848a57":"code","d9ceecec":"code","adf32b6d":"code","4ab09abf":"code","8f102022":"code","28b133d9":"code","1b289620":"code","d538d264":"code","40201814":"code","8ae846eb":"code","5d4b8edd":"code","e690968f":"code","ec9850e1":"code","e087d543":"code","a43128bf":"code","2a9b586a":"code","efb6e4a9":"code","26a78653":"code","d7f60baf":"code","f7f7781b":"code","927ff24c":"code","f27e70bc":"code","2d6cdb14":"code","33b58876":"code","e455c008":"code","d239aca5":"code","91f9c452":"code","5bee0f70":"code","c1f95898":"code","e3a47f3a":"code","df61f0bf":"code","b986dfc0":"code","4205c85c":"code","4c709371":"code","8cf2d52f":"code","c08999af":"code","34ae56b2":"code","43f463c3":"code","31ade779":"code","5ef91fb0":"code","2e0fb7dc":"code","ab3e58d1":"code","1ed36041":"code","2b3d8742":"code","d26b4c64":"code","ad259e0f":"markdown","c976bcea":"markdown","6704663e":"markdown","0bc416ce":"markdown","eb807a79":"markdown","6f50c74e":"markdown"},"source":{"775e4023":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b107e308":"#importing libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport statsmodels\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","cd05cdee":"# read the data\nhousing = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhousing.head()","b893ffed":"#checking shape of dataset\nhousing.shape","f1c37000":"#checking info of dataset\nhousing.info()","78fe0f4a":"import pandas_profiling\n#profile_report = pandas_profiling.ProfileReport(housing)\n#profile_report","5d255928":"numeric_data = housing.select_dtypes(include = ['float64','int64'])\nnumeric_data.head()","d30c6263":"#checking percentage of null values in each column\n\ndf_missing=pd.DataFrame((round(100*(housing.isnull().sum()\/len(housing.index)), 2)), columns=['missing'])\ndf_missing.sort_values(by=['missing'], ascending=False).head(20)","acf4566a":"#reading data dictionary\n\nf = open(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt\", \"r\")\nprint(f.read())","d91e4372":"#addressing NaN values based on data dictionary\n\n# In column 'PoolQC' (Pool quality), NaN stands for No Pool\nhousing['PoolQC'] = housing['PoolQC'].fillna('No_Pool')\n\n# In column 'MiscFeature' (Miscellaneous Features), NaN stands for None, meaning the house has no miscellaneous features.\nhousing['MiscFeature'] = housing['MiscFeature'].fillna('None')\n\n# In column 'Alley', NaN stands for No Alley Access as per the data dictionary\nhousing['Alley'] = housing['Alley'].fillna('No_Alley_Access')\n\n# In column 'Fence' (Fence Quality), NaN stands for No Fence as per the data dictionary\nhousing['Fence'] = housing['Fence'].fillna('No_Fence')\n\n# In column 'FireplaceQu' (FireplaceQu Quality), NaN stands for No Fireplace as per the data dictionary\nhousing['FireplaceQu'] = housing['FireplaceQu'].fillna('No_Fireplace')\n\n# LotFrontage stands for Linear feet of street connected to property, there is no explanation to impute this in data dictionary\n# Let's consider imputing it with median of the lotFrontage of houses in the same neighbourhood\n\n# Group data by neighborhood and impute missing value with median LotFrontage of all the neighborhood\nhousing[\"LotFrontage\"] = housing.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n\n# In column 'GarageYrBlt' (Gargae Year Built), NaN stands for houses with no garage, let's impute with 0\nhousing['GarageYrBlt'] = housing['GarageYrBlt'].fillna(0)\n\n# 'GarageType', 'GarageFinish', 'GarageQual' (Garage Quality) and 'GarageCond'(Garage Condition)\n# Missing values signify no garage as per data dictionary.let's impute NaN values here with No Garage\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    housing[col] = housing[col].fillna('No_Garage')\n\n#BsmtFinType1, BsmtFinType2 (Rating of basement finished area),\n#BsmtExposure (Basement Exposure), BsmtQual(Basement Quality), BsmtCond (Basement Conidtion)\n#These are all parameter related to basement. A NaN value probably signifies that the house does not have a basement.\nfor col in ('BsmtFinType1', 'BsmtFinType2', 'BsmtExposure', 'BsmtQual','BsmtCond'):\n    housing[col] = housing[col].fillna('No_Basement')\n    \n# In column 'MasVnrType' (Masonry veneer type), let's impute it with mode \"None\"\nhousing['MasVnrType'] = housing['MasVnrType'].fillna('None')\n\n# In column 'MasVnrType' (Masonry veneer type), let's impute it with mode 0 corresponding to None\nhousing['MasVnrArea'] = housing['MasVnrArea'].fillna(0)\n\n# In column 'Electrical' (Electrical system), let's impute NaN with \"Other\"\nhousing['Electrical'] = housing['Electrical'].fillna(\"Other\")","0f714976":"#checking percentage of null values in each column\n\ndf_missing=pd.DataFrame((round(100*(housing.isnull().sum()\/len(housing.index)), 2)), columns=['missing'])\ndf_missing.sort_values(by=['missing'], ascending=False).head(20)","c59a7bfb":"# Let us first visualize the spread of Target Variable 'Sale Price'\nfrom scipy.stats import norm\nsns.distplot(housing['SalePrice'], fit=norm)\nplt.show()","9010b820":"## \"MSSubClass\" is a numeric column but it should actually be categorical as per the data dictionary, so let's convert that.\n\nhousing=housing.replace({'MSSubClass' : { 20 : '1-STORY 1946 & NEWER ALL STYLES', \n                                          30:'1-STORY 1945 & OLDER',\n                                          40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n                                          45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n                                          50:'1-1\/2 STORY FINISHED ALL AGES',\n                                          60:'2-STORY 1946 & NEWER',\n                                          70:'2-STORY 1945 & OLDER',\n                                          75:'2-1\/2 STORY ALL AGES',\n                                          80:'SPLIT OR MULTI-LEVEL',\n                                          85:'SPLIT FOYER',\n                                          90:'DUPLEX - ALL STYLES AND AGES',\n                                         120:'1-STORY PUD (Planned Unit Development) - 1946 & NEWER',\n                                         150:'1-1\/2 STORY PUD - ALL AGES',\n                                         160:'2-STORY PUD - 1946 & NEWER',\n                                         180:'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n                                         190:'2 FAMILY CONVERSION - ALL STYLES AND AGES'}})","fba0781b":"numeric_data = housing.select_dtypes(include = ['float64','int64'])\nnumeric_data.columns","c63195ca":"#function to plot scatter plot numeric variables with price\n\ndef pp(w,x,y,z):\n    sns.pairplot(housing, x_vars=[w,x,y,z], y_vars='SalePrice',height=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('LotFrontage', 'LotArea', 'OverallQual','OverallCond')\npp('YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'GrLivArea')\npp('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF')","17b0114d":"#function to plot scatter plot numeric variables with price\n\ndef pp(w,x,y,z):\n    sns.pairplot(housing, x_vars=[w,x,y,z], y_vars='SalePrice',height=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('1stFlrSF', '2ndFlrSF','LowQualFinSF','MSSubClass')\npp('BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath')\npp('BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd','Fireplaces')","e0cbecb6":"#function to plot scatter plot numeric variables with price\n\ndef pp(w,x,y,z):\n    sns.pairplot(housing, x_vars=[w,x,y,z], y_vars='SalePrice',height=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF')\npp('OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch')\npp('PoolArea','MiscVal', 'MoSold', 'YrSold')","a213212f":"# label encode ordinal features where there is order in categories\n\nhousing = housing.replace({  \"Alley\":        {\"No_Alley_Access\" : 0, \"Grvl\" : 1, \"Pave\" : 2},\n                       \"BsmtCond\":     {\"No_Basement\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\": {\"No_Basement\" : 0, \"No\" : 2, \"Mn\" : 2, \"Av\": 3, \n                                        \"Gd\" : 4},\n                       \"BsmtFinType1\": {\"No_Basement\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \n                                        \"BLQ\" : 4, \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\": {\"No_Basement\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \n                                        \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\":     {\"No_Basement\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"CentralAir\":   {\"None\" : 0, \"N\" : 1, \"Y\" : 2},\n                       \"ExterCond\":    {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \n                                        \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\":    {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \n                                        \"Gd\": 4, \"Ex\" : 5},\n                       \"Fence\":        {\"No_Fence\" : 0, \"MnWw\" : 1, \"GdWo\" : 2, \"MnPrv\": 3, \n                                        \"GdPrv\" : 4},\n                       \"FireplaceQu\":  {\"No_Fireplace\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"Functional\":   {\"None\" : 0, \"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \n                                        \"Maj1\" : 4, \"Mod\": 5, \"Min2\" : 6, \"Min1\" : 7, \n                                        \"Typ\" : 8},\n                       \"GarageCond\":   {\"No_Garage\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\":   {\"No_Garage\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageFinish\": {\"No_Garage\" : 0, \"Unf\" : 1, \"RFn\" : 2, \"Fin\" : 3},\n                       \"HeatingQC\":    {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\":  {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandContour\":  {\"None\" : 0, \"Low\" : 1, \"HLS\" : 2, \"Bnk\" : 3, \n                                        \"Lvl\" : 4},\n                       \"LandSlope\":    {\"None\" : 0, \"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\":     {\"None\" : 0, \"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \n                                        \"Reg\" : 4},\n                       \"PavedDrive\":   {\"None\" : 0, \"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\":       {\"No_Pool\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \n                                        \"Ex\" : 4},\n                       \"Street\":       {\"None\" : 0, \"Grvl\" : 1, \"Pave\" : 2},\n                       \"Utilities\":    {\"None\" : 0, \"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \n                                        \"AllPub\" : 4}}\n                     )\n\nhousing.BsmtCond = housing.BsmtCond.astype(int)","e7bf52cb":"## FUNCTION TO PLOT CHARTS\n\ndef plot_charts(var1,var2,label_rotation):\n    plt.figure(figsize=(12, 10))   \n    plt.subplot(2,2,1)\n    plt.title('Count Plot of '+ var1)\n    plt1=sns.countplot(housing[var1], palette=(\"husl\"))\n    plt1.set(xlabel = '%s'%var1, ylabel='Count of'+ '%s'%var1)\n    if(label_rotation):\n        plt1.set_xticklabels(plt1.get_xticklabels(),rotation=90)\n        \n    plt.subplot(2,2,2)\n    plt.title(var1+' vs Price')\n    plt2=sns.boxplot(x=housing[var1], y=housing.SalePrice, palette=(\"husl\"))\n    if(label_rotation):\n        plt2.set_xticklabels(plt2.get_xticklabels(),rotation=90)\n    \n    plt.subplot(2,2,3)\n    plt.title('Count Plot of '+ var2)\n    plt3=sns.countplot(housing[var2], palette=(\"husl\"))\n    plt3.set(xlabel = '%s'%var2, ylabel='Count of'+ '%s'%var2)\n    if(label_rotation):\n        plt3.set_xticklabels(plt3.get_xticklabels(),rotation=90)\n    \n    plt.subplot(2,2,4)\n    plt.title(var2+' vs Price')\n    plt4=sns.boxplot(x=housing[var2], y=housing.SalePrice, palette=(\"husl\"))\n    if(label_rotation):\n        plt4.set_xticklabels(plt4.get_xticklabels(),rotation=90)\n        \n    plt.show()","34551aa4":"categorical_features=housing.select_dtypes(include='object')\ncategorical_features.columns","4d9d2b18":"plot_charts('MSZoning', 'Street', label_rotation=False)","a374135d":"housing['Street'].value_counts(dropna=False)","238774ac":"plot_charts('LotShape','Alley',label_rotation=False)","f560e185":"housing['Street'].value_counts(dropna=False)","dd5e17b9":"plot_charts('LandContour','LotConfig',label_rotation=False)","494aab6d":"plot_charts('LandSlope','BldgType',label_rotation=False)","d8b72c49":"plot_charts('RoofStyle', 'RoofMatl',label_rotation=True)","3ec31667":"plot_charts('SaleType', 'SaleCondition',label_rotation=False)","b143f3e6":"# DATA PREPARATION","857b88cd":"#changing months to categorical\nimport calendar\n\nhousing['MonthSold'] = housing['MoSold'].apply(lambda x: calendar.month_name[x])\nhousing=housing.drop(['MoSold'], axis=1)","c3586514":"#changing data type of Gararge yr built to int from float\nhousing['GarageYrBlt'] = housing['GarageYrBlt'].astype(int)","e59e17a5":"#DERIVED VARIABLES which might make more sense than year\n\nhousing['Age'] = housing['YrSold'] - housing['YearBuilt']\nhousing['Remod_Age'] = housing['YrSold'] - housing['YearRemodAdd']\nhousing['Garage_Age'] = housing['YrSold'] - housing['GarageYrBlt']\nhousing.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold'],1, inplace = True)","6b021a3a":"numeric_data = housing.select_dtypes(include = ['float64','int64'])\nnumeric_data.columns","46b84595":"#OUTLIER TREATMENT\n\ndef remove_outliers(dtf, numl_list):\n    for j in numl_list:\n        Q1 = dtf[j].quantile(0.05)\n        Q3 = dtf[j].quantile(0.95)\n        IQR = Q3 - Q1       \n        dtf = dtf[(dtf[j] >= Q1-2.5*IQR) & (dtf[j] <= Q3+2.5*IQR)]\n    return dtf","f94aabde":"numeric_data_list=list(numeric_data.columns)","5fce7f47":"housing=remove_outliers(housing,numeric_data_list)","c688a963":"# Outlier treatment on the variable Sale Price\nplt.figure(figsize=(4,3))\nplt.boxplot(housing['SalePrice'])\nplt.show()","881f22d8":"housing.shape","ea5f9662":"cor = numeric_data.corr()\nplt.figure(figsize=(20,20))\n\nsns.heatmap(cor, annot=True)\nplt.show()","79459192":"# we drop Id (not relevant)\ncorr = housing.drop([\"Id\"], axis=1).select_dtypes(include=\"number\").corr()\n\nplt.figure(figsize=(16,16));\ncorr[\"SalePrice\"].sort_values(ascending=True)[:-1].plot(kind=\"barh\")\nplt.title(\"Correlation of numerical features to SalePrice\")\nplt.xlabel(\"Correlation to SalePrice\")\nplt.tight_layout()\nplt.show()","7015c7e1":"#saleprice correlation matrix\nplt.figure(figsize=(7,7))\nk = 15 #number of variables for heatmap\ncols = corr.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(housing[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, cmap='viridis',yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","672763b4":"#converting binary variables to numeric by mapping to 0 and 1\n\nhousing['Street'] = housing['Street'].apply(lambda x: 1 if x == 'Pave' else 0 )\nhousing['CentralAir'] = housing['CentralAir'].apply(lambda x : 1 if x == 'Y' else 0)","ae125742":"#converting binary variables to numeric by mapping to 0 and 1\n\nhousing['PavedDrive'] = housing['PavedDrive'].apply(lambda x : 1 if x == 'Y' else 0)","98ca455c":"df = housing.drop(['Id'],axis=1)\nhousing_categorical = df.select_dtypes(include=['object'])\nhousing_categorical.head()","8531ba7b":"# convert into dummies\nhousing_dummies = pd.get_dummies(housing_categorical, drop_first=True)\nhousing_dummies.head()","cf241c7b":"#dropping original categorical columns\ndf = df.drop(list(housing_categorical.columns), axis=1)","c5be2f9a":"#concatenating dummy columns to original dataframe\ndf = pd.concat([df,housing_dummies], axis=1)","f9dbed12":"df.shape","5bfcbf66":"#train_test_split\ndf_train,df_test=train_test_split(df,train_size=0.70, random_state=100)\ndf_train.shape","93ed41b3":"y_train = np.log(df_train.SalePrice)\nX_train = df_train.drop(\"SalePrice\",1)\n\ny_test= np.log(df_test.SalePrice)\nX_test = df_test.drop(\"SalePrice\",1)","a8fd34a7":"num_vars=X_train.select_dtypes(include=['int64','float64']).columns","dd5e3217":"num_vars","ac24c7a1":"scaler = StandardScaler()\nX_train[num_vars] = scaler.fit_transform(X_train[num_vars])\nX_test[num_vars] = scaler.transform(X_test[num_vars])","b7a1811d":"#linear regression model","b8c46012":"lm=LinearRegression()\nlm.fit(X_train,y_train)\n\nrfe = RFE(lm,20)\nrfe=rfe.fit(X_train,y_train)\n\ncol=X_train.columns[rfe.support_]\ncol","c5717776":"X_train_new=X_train[col]\n\nX_train_new = sm.add_constant(X_train_new)\n\n#create first model\nlr=sm.OLS(y_train,X_train_new)\n\n#fit the model\nlr_model=lr.fit()\n\nlr_model.summary()","7317516f":"#RIDGE REGULARIZATION\n\n# list of alphas to tune\n\n\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv.fit(X_train, y_train) ","5d401312":"print(model_cv.best_params_)\nprint(model_cv.best_score_)","bb2cbbae":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results = cv_results[cv_results['param_alpha']<=100]\ncv_results","c29dd467":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\nplt.figure(figsize=(16,5))\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","bb223858":"#final ridge model\nalpha = 10\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","5e3b2a35":"#lets predict the R-squared value of test and train data\ny_train_pred = ridge.predict(X_train)\nprint(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))","e3b483c4":"y_test_pred = ridge.predict(X_test)\nprint(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))","963aca05":"from sklearn.metrics import mean_squared_error\nprint ('RMSE is: \\n', mean_squared_error(y_test, y_test_pred))","4b848a57":"# Ridge model parameters\nmodel_parameters_1 = list(ridge.coef_)\nmodel_parameters_1.insert(0, ridge.intercept_)\nmodel_parameters_1 = [round(x, 3) for x in model_parameters_1]\ncols = X_train.columns\ncols = cols.insert(0, \"constant\")\nlist(zip(cols, model_parameters_1))","d9ceecec":"#lasso\nparams = {'alpha': [0.00005, 0.0001, 0.001, 0.008, 0.01]}\nlasso = Lasso()\n\n# cross validation\nmodel_cv_l = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv_l.fit(X_train, y_train)","adf32b6d":"# cv results\ncv_results_l = pd.DataFrame(model_cv_l.cv_results_)","4ab09abf":"#checking the value of optimum number of parameters\nprint(model_cv_l.best_params_)\nprint(model_cv_l.best_score_)","8f102022":"#final lasso model\nalpha = 0.001\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) ","28b133d9":"#lets predict the R-squared value of test and train data\ny_train_pred = lasso.predict(X_train)\nprint(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))","1b289620":"#lets predict the R-squared value of test and train data\ny_test_pred = lasso.predict(X_test)\nprint(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))","d538d264":"from sklearn.metrics import mean_squared_error\nprint ('RMSE is: \\n', mean_squared_error(y_test, y_test_pred))","40201814":"# Lasso model parameters\nmodel_parameters_1 = list(lasso.coef_)\nmodel_parameters_1.insert(0, lasso.intercept_)\nmodel_parameters_1 = [round(x, 3) for x in model_parameters_1]\ncols = X_train.columns\ncols = cols.insert(0, \"constant\")\nlist(zip(cols, model_parameters_1))","8ae846eb":"test_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","5d4b8edd":"test_data.head()","e690968f":"df_missing=pd.DataFrame((round(100*(test_data.isnull().sum()\/len(test_data.index)), 2)), columns=['missing'])\ndf_missing.sort_values(by=['missing'], ascending=False).head(20)","ec9850e1":"#addressing NaN values based on data dictionary\n\n# In column 'PoolQC' (Pool quality), NaN stands for No Pool\ntest_data['PoolQC'] = test_data['PoolQC'].fillna('No_Pool')\n\n# In column 'MiscFeature' (Miscellaneous Features), NaN stands for None, meaning the house has no miscellaneous features.\ntest_data['MiscFeature'] = test_data['MiscFeature'].fillna('None')\n\n# In column 'Alley', NaN stands for No Alley Access as per the data dictionary\ntest_data['Alley'] = test_data['Alley'].fillna('No_Alley_Access')\n\n# In column 'Fence' (Fence Quality), NaN stands for No Fence as per the data dictionary\ntest_data['Fence'] = test_data['Fence'].fillna('No_Fence')\n\n# In column 'FireplaceQu' (FireplaceQu Quality), NaN stands for No Fireplace as per the data dictionary\ntest_data['FireplaceQu'] = test_data['FireplaceQu'].fillna('No_Fireplace')\n\n# LotFrontage stands for Linear feet of street connected to property, there is no explanation to impute this in data dictionary\n# Let's consider imputing it with median of the lotFrontage of houses in the same neighbourhood\n\n# Group data by neighborhood and impute missing value with median LotFrontage of all the neighborhood\ntest_data[\"LotFrontage\"] = test_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n\n# In column 'GarageYrBlt' (Gargae Year Built), NaN stands for houses with no garage, let's impute with 0\ntest_data['GarageYrBlt'] = test_data['GarageYrBlt'].fillna(0)\n\n# 'GarageType', 'GarageFinish', 'GarageQual' (Garage Quality) and 'GarageCond'(Garage Condition)\n# Missing values signify no garage as per data dictionary.let's impute NaN values here with No Garage\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    test_data[col] = test_data[col].fillna('No_Garage')\n\n#BsmtFinType1, BsmtFinType2 (Rating of basement finished area),\n#BsmtExposure (Basement Exposure), BsmtQual(Basement Quality), BsmtCond (Basement Conidtion)\n#These are all parameter related to basement. A NaN value probably signifies that the house does not have a basement.\nfor col in ('BsmtFinType1', 'BsmtFinType2', 'BsmtExposure', 'BsmtQual','BsmtCond'):\n    test_data[col] = test_data[col].fillna('No_Basement')\n    \n# In column 'MasVnrType' (Masonry veneer type), let's impute it with mode \"None\"\ntest_data['MasVnrType'] = test_data['MasVnrType'].fillna('None')\n\n# In column 'MasVnrType' (Masonry veneer type), let's impute it with mode 0 corresponding to None\ntest_data['MasVnrArea'] = test_data['MasVnrArea'].fillna(0)\n\n# In column 'Electrical' (Electrical system), let's impute NaN with \"Other\"\ntest_data['Electrical'] = test_data['Electrical'].fillna(\"Other\")","e087d543":"df_missing=pd.DataFrame((round(100*(test_data.isnull().sum()\/len(test_data.index)), 2)), columns=['missing'])\ndf_missing.sort_values(by=['missing'], ascending=False).head(20)","a43128bf":"catgl_feats = test_data.dtypes[test_data.dtypes == 'object'].index\nnumrl_feats = test_data.dtypes[test_data.dtypes != 'object'].index","2a9b586a":"Nan_cols = []\n\ncols = test_data.columns\nfor i in cols:\n    if (test_data[i].isnull().sum()\/len(df))*100 > 0:\n        Nan_cols.append(i)","efb6e4a9":"cat_treat_list = []\nnum_treat_list = []\n\nfor i in Nan_cols:\n    if i in catgl_feats:\n        cat_treat_list.append(i)\n    else:\n        num_treat_list.append(i)","26a78653":"cat_treat_list","d7f60baf":"num_treat_list","f7f7781b":"for i in cat_treat_list:\n    test_data[i].fillna(test_data[i].mode()[0], inplace = True)","927ff24c":"for i in num_treat_list:\n    test_data[i].fillna(0, inplace = True)","f27e70bc":"df_missing=pd.DataFrame((round(100*(test_data.isnull().sum()\/len(test_data.index)), 2)), columns=['missing'])\ndf_missing.sort_values(by=['missing'], ascending=False).head(20)","2d6cdb14":"# label encode ordinal features where there is order in categories\n\ntest_data = test_data.replace({  \"Alley\":        {\"No_Alley_Access\" : 0, \"Grvl\" : 1, \"Pave\" : 2},\n                       \"BsmtCond\":     {\"No_Basement\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\": {\"No_Basement\" : 0, \"No\" : 2, \"Mn\" : 2, \"Av\": 3, \n                                        \"Gd\" : 4},\n                       \"BsmtFinType1\": {\"No_Basement\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \n                                        \"BLQ\" : 4, \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\": {\"No_Basement\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \n                                        \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\":     {\"No_Basement\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"CentralAir\":   {\"None\" : 0, \"N\" : 1, \"Y\" : 2},\n                       \"ExterCond\":    {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \n                                        \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\":    {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \n                                        \"Gd\": 4, \"Ex\" : 5},\n                       \"Fence\":        {\"No_Fence\" : 0, \"MnWw\" : 1, \"GdWo\" : 2, \"MnPrv\": 3, \n                                        \"GdPrv\" : 4},\n                       \"FireplaceQu\":  {\"No_Fireplace\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"Functional\":   {\"None\" : 0, \"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \n                                        \"Maj1\" : 4, \"Mod\": 5, \"Min2\" : 6, \"Min1\" : 7, \n                                        \"Typ\" : 8},\n                       \"GarageCond\":   {\"No_Garage\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\":   {\"No_Garage\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageFinish\": {\"No_Garage\" : 0, \"Unf\" : 1, \"RFn\" : 2, \"Fin\" : 3},\n                       \"HeatingQC\":    {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\":  {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \n                                        \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandContour\":  {\"None\" : 0, \"Low\" : 1, \"HLS\" : 2, \"Bnk\" : 3, \n                                        \"Lvl\" : 4},\n                       \"LandSlope\":    {\"None\" : 0, \"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\":     {\"None\" : 0, \"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \n                                        \"Reg\" : 4},\n                       \"PavedDrive\":   {\"None\" : 0, \"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\":       {\"No_Pool\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \n                                        \"Ex\" : 4},\n                       \"Street\":       {\"None\" : 0, \"Grvl\" : 1, \"Pave\" : 2},\n                       \"Utilities\":    {\"None\" : 0, \"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \n                                        \"AllPub\" : 4}}\n                     )\n\ntest_data.BsmtCond = test_data.BsmtCond.astype(int)","33b58876":"test_data.GarageQual = test_data.GarageQual.astype(int)","e455c008":"## \"MSSubClass\" is a numeric column but it should actually be categorical as per the data dictionary, so let's convert that.\n\ntest_data=test_data.replace({'MSSubClass' : { 20 : '1-STORY 1946 & NEWER ALL STYLES', \n                                          30:'1-STORY 1945 & OLDER',\n                                          40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n                                          45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n                                          50:'1-1\/2 STORY FINISHED ALL AGES',\n                                          60:'2-STORY 1946 & NEWER',\n                                          70:'2-STORY 1945 & OLDER',\n                                          75:'2-1\/2 STORY ALL AGES',\n                                          80:'SPLIT OR MULTI-LEVEL',\n                                          85:'SPLIT FOYER',\n                                          90:'DUPLEX - ALL STYLES AND AGES',\n                                         120:'1-STORY PUD (Planned Unit Development) - 1946 & NEWER',\n                                         150:'1-1\/2 STORY PUD - ALL AGES',\n                                         160:'2-STORY PUD - 1946 & NEWER',\n                                         180:'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n                                         190:'2 FAMILY CONVERSION - ALL STYLES AND AGES'}})","d239aca5":"#changing months to categorical\nimport calendar\n\ntest_data['MonthSold'] = test_data['MoSold'].apply(lambda x: calendar.month_name[x])\ntest_data=test_data.drop(['MoSold'], axis=1)","91f9c452":"#changing data type of Gararge yr built to int from float\ntest_data['GarageYrBlt'] = test_data['GarageYrBlt'].astype(int)","5bee0f70":"#DERIVED VARIABLES which might make more sense than year\n\ntest_data['Age'] = test_data['YrSold'] - test_data['YearBuilt']\ntest_data['Remod_Age'] = test_data['YrSold'] - test_data['YearRemodAdd']\ntest_data['Garage_Age'] = test_data['YrSold'] - test_data['GarageYrBlt']\ntest_data.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold'],1, inplace = True)","c1f95898":"#converting binary variables to numeric by mapping to 0 and 1\n\ntest_data['Street'] = test_data['Street'].apply(lambda x: 1 if x == 'Pave' else 0 )\ntest_data['CentralAir'] = test_data['CentralAir'].apply(lambda x : 1 if x == 'Y' else 0)","e3a47f3a":"#converting binary variables to numeric by mapping to 0 and 1\n\ntest_data['PavedDrive'] = test_data['PavedDrive'].apply(lambda x : 1 if x == 'Y' else 0)","df61f0bf":"test_data_X=test_data.drop('Id',1)","b986dfc0":"test_data_numerical=test_data_X.select_dtypes(include=['int32','int64','float64']).columns","4205c85c":"test_data_numerical","4c709371":"test_data_categorical = test_data_X.select_dtypes(include=['object'])\ntest_data_categorical.head()","8cf2d52f":"# convert into dummies\ntest_data_dummies = pd.get_dummies(test_data_categorical, drop_first=True)\ntest_data_dummies.head()","c08999af":"#dropping original categorical columns\ndf_test = test_data_X.drop(list(test_data_categorical.columns), axis=1)","34ae56b2":"#concatenating dummy columns to original dataframe\ndf = pd.concat([df_test,test_data_dummies], axis=1)","43f463c3":"df[test_data_numerical].shape","31ade779":"df[test_data_numerical] = scaler.transform(df[test_data_numerical])","5ef91fb0":"#lets predict the R-squared value of test and train data\ny_test_predicted = lasso.predict(df)","2e0fb7dc":"y_test_predicted","ab3e58d1":"final_predictions = np.exp(y_test_predicted)","1ed36041":"final_predictions","2b3d8742":"salespriceprediction= pd.DataFrame({'Id': test_data['Id'] ,'SalePrice': final_predictions })","d26b4c64":"salespriceprediction.to_csv(\"salespriceprediction.csv\",index=False)","ad259e0f":"## 1. Data Preparation & EDA","c976bcea":"The Sale Price distribution is not normally distributed, it is a little positively skewed with some houses having really high Sale Price","6704663e":"We do not have any more null values","0bc416ce":"**Observation:** \n- MsZoning identifies the general zoning classification of the sale. \n- We see that the prices vary a lot for different values and most of the records are for \"RL\" Residential Low Density properties.\n- Street identifies the Type of road access to property\n- While we see that houses with Paved roads have higher Sale Price compared to Gravel, we must also note that this is a highly imbalanced variable with most records as \"Pave\"","eb807a79":"## 2. EDA and Data Preparation","6f50c74e":"\"ID\" column is like row number, it has all unique values and can be ignored for analysis."}}