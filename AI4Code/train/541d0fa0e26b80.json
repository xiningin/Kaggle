{"cell_type":{"d20922fc":"code","3321bd9f":"code","c79ee220":"code","412b7d97":"code","7e608c55":"code","7a18dc4c":"code","1eac9153":"code","f859bbae":"code","d3579fa7":"code","e774bd22":"code","57279dc8":"code","29139079":"code","3ad8abe5":"code","bae23036":"code","059419f0":"code","842842a7":"code","07e4a0a9":"code","6bf7405b":"code","e219a600":"code","481651a3":"code","bf896abf":"code","01049b20":"code","a20251fe":"code","0f84d1fd":"code","9f0e9aef":"code","7cbda49d":"code","a76bbeb1":"code","28e7c205":"code","826e69ad":"code","51987602":"code","9ca9eaa1":"code","5f9ab6b8":"code","2968ace4":"code","97bb03f2":"code","f0beab53":"code","7ed4f3b9":"code","8a58c5ec":"code","201a9ed9":"code","5a405fc4":"code","9e0b0215":"code","8ae7fc41":"code","410bb20a":"code","7b99ac1b":"code","e735fa14":"code","bb4961ce":"code","f68e0b9e":"code","8aeca50e":"code","8bda3c9f":"markdown","fac1f6b6":"markdown","7844b7c4":"markdown","ecab7168":"markdown","8d97b941":"markdown","1bfdb11b":"markdown","3dc37466":"markdown","c4d24e51":"markdown","737d2ea8":"markdown","7db93c94":"markdown","00f878c7":"markdown","59d61182":"markdown","9ef3797d":"markdown"},"source":{"d20922fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3321bd9f":"df = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\ndf.head(5)","c79ee220":"df.columns = df.columns.str.replace(\" \" , \"_\" )\ndf.columns = df.columns.str.replace(\"\/\" , \"_\" )\ndf.rename(columns ={\"parental_level_of_education\":\"parent_education\"}, inplace = True)\ndf.head(5)\n","412b7d97":"df[\"Avg_total_score\"] = (df.math_score + df.reading_score + df.writing_score ) \/ 3","7e608c55":"df.info()","7a18dc4c":"df.describe(include = \"O\")","1eac9153":"df.describe()","f859bbae":"for i in range(len(df.columns)):\n    details = df[df.columns[i]].value_counts()\n    i = i + 1\n    print(details.head(1))","d3579fa7":"df.columns","e774bd22":"def Missing_Values(df):\n    mis_val = df.isnull().sum(0)\n    mis_val_per = 100 * df.isnull().sum(0) \/ len(df)\n    miss_val_df = pd.concat([mis_val , mis_val_per] , axis = 1)\n    miss_val_df.rename(mapper = {0:\"Missing_Values\" , 1:\"% of Missing Values\"} , axis = \"columns\" , inplace = True)\n    return miss_val_df","57279dc8":"Missing_Values(df)","29139079":"gender = df.gender.value_counts()\nrace = df.race_ethnicity.value_counts()\nparent_education_level = df.parent_education.value_counts()\nlunch = df.lunch.value_counts()\ntest_prep = df.test_preparation_course.value_counts()","3ad8abe5":"plt.style.use(\"fivethirtyeight\")\n\nfig , (ax1 , ax2) = plt.subplots(nrows = 1 , ncols = 2 , figsize = (10, 6) , facecolor = \"w\")\n\nax1.pie(x = gender, labels = gender.index ,shadow = True, colors = [\"#008fd5\",'#fc4f30'] ,  wedgeprops= {'edgecolor':'k' } , \n        startangle = 45 , autopct = \"%1.2f%%\")\nax1.set_title(\"Student Gender Ratio\")\n\n\nax2.bar(x = gender.index , height= gender.values , color = [\"#008fd5\",'#fc4f30'] )\nax2.set_xlabel(\"Student Gender\")\nax2.set_ylabel(\"No. of Students\")\nax2.set_title(\"Student Gender Count\")\nax2.set_yticks(ticks = np.arange(0,500,50))\n\nplt.tight_layout()\nplt.show()","bae23036":"fig , (ax1, ax2) = plt.subplots(nrows = 1 , ncols = 2 , figsize = (12 , 6), facecolor = \"w\")\n\nax1.pie(x = race, labels = race.index , shadow = True,wedgeprops= {'edgecolor':'k' } , autopct = \"%1.2f%%\" , startangle = -80,\n       explode = [0.2 , 0,0,0,0])\nax1.set_title(\"Ratio of Race\/Ethnicity\")\n\n\nax2.bar(x = race.index , height = race.values , color = [ \"#008fd5\",'#fc4f30' ,'#e5ae37' ,'#6d904f' , \"#feffb3\"])\nax2.set_ylabel(\"No of Students\")\nax2.set_xlabel(\"Different Ethnicity\")\nax2.set_title(\"Counts of Groups\")\n\n\nplt.tight_layout()\nplt.show()","059419f0":"fig , (ax1, ax2) = plt.subplots(nrows = 1 , ncols = 2 , figsize = (14 , 6), facecolor = \"w\")\n\nax1.pie(x = parent_education_level, labels = parent_education_level.index ,shadow = True, wedgeprops= {'edgecolor':'k' } ,\n        autopct = \"%1.2f%%\" , startangle = -80,\n       explode = [0 , 0,0,0,0 ,0.35])\nax1.set_title(\"Ratio of Parent Education Level\")\n\n\nax2.barh(y = parent_education_level.index , width = parent_education_level.values , \n        color = [ \"#008fd5\",'#fc4f30' ,'#e5ae37' ,'#6d904f' , \"#feffb3\" , \"cyan\"])\nax2.set_ylabel(\"Parents Education\")\nax2.set_xlabel(\"Count\")\nax2.set_title(\"Frequency of Parent Education\")\n\n\nplt.tight_layout()\nplt.show()","842842a7":"fig , (ax1 , ax2) = plt.subplots(nrows = 1 , ncols = 2 , figsize = (12 , 6),  facecolor = \"w\")\n\nax1.pie(x =lunch , labels = lunch.index ,colors = ['#e5ae37' ,'#6d904f'],shadow = True, wedgeprops= {'edgecolor':'k' } ,\n        autopct = \"%1.2f%%\" , startangle = -80, explode = [0,0])\nax1.set_title(\"School Meal\")\n\nax2.bar(lunch.index , lunch.values , color = ['#e5ae37' ,'#6d904f'])\nax2.set_xlabel(\"Type\")\nax2.set_ylabel(\"Count\")\nax2.set_title(\"School Meal\")\n\nplt.tight_layout()\nplt.show()","07e4a0a9":"fig , (ax1 , ax2) = plt.subplots(nrows = 1 , ncols = 2 , figsize = (12 , 6) , facecolor = \"w\")\n\nax1.pie(x = test_prep , labels = test_prep.index ,shadow = True, wedgeprops= {'edgecolor':'k' } ,colors = [\"#008fd5\" , \"#e5ae37\"] ,\n        autopct = \"%1.2f%%\" , startangle = 45, explode = [0,0])\nax1.set_title(\"Ratio Status of Students Test Preparation\")\n  \nax2.bar(test_prep.index , test_prep.values , color = [\"#008fd5\" , \"#e5ae37\"])\nax2.set_xlabel(\"Status\")\nax2.set_ylabel(\"Count\")\nax2.set_title(\"Status of students Test Preparation\")\n\n\nplt.tight_layout()\nplt.show()","6bf7405b":"fig , axes = plt.subplots(nrows = 1 ,ncols = 3, figsize=(14, 4) , sharey = True)\nplt.suptitle(\"Distribution of Marks in Various Subjects \" , y = 1.09)\naxes[0].set_title(\"Maths\")\naxes[1].set_title(\"Reading\")\naxes[2].set_title(\"Writing\")\nsns.distplot(df.math_score , ax=axes[0] ,kde = True ,rug = True , color = \"orange\")\nsns.distplot(df.reading_score , ax = axes[1], kde = True ,rug = True,color =  \"blue\" )\nsns.distplot(df.writing_score , ax = axes[2] ,kde = True,rug = True, color = \"green\" )\n[axes[i].set_xlabel(\"Scores\") for i in range (0,3)]\nplt.show()","e219a600":"df.corr()","481651a3":"sns.heatmap(df.corr() , cmap = \"cividis\")","bf896abf":"pd.crosstab(df.race_ethnicity, df.parent_education)","01049b20":"tab = pd.crosstab(df.race_ethnicity, df.parent_education)\nrpd = tab.div(tab.sum(1).astype(float), axis = 0)\nrpd.plot(kind = 'bar', stacked = 'True' , legend = False , \n         color = [ \"#008fd5\",'#fc4f30' ,'#e5ae37' , \"#feffb3\" ,'#6d904f', \"cyan\"])\nplt.legend(bbox_to_anchor = (1.05 , 1))\nplt.title('Race vs Parent Education', fontweight = 30, fontsize = 20)\nplt.show()","a20251fe":"sns.catplot(kind = \"box\" , x = \"gender\" , y = \"Avg_total_score\" , data = df, hue = \"race_ethnicity\",\n            col = \"parent_education\" , col_wrap = 2)\nplt.show()","0f84d1fd":"sns.catplot(kind = \"violin\" , x = \"gender\" , y = \"Avg_total_score\" , data = df, hue = \"lunch\",\n            col = \"race_ethnicity\" , col_wrap = 2)\nplt.show()","9f0e9aef":"sns.catplot(kind = \"strip\" , x = \"gender\" , y = \"Avg_total_score\" , data = df , hue = \"test_preparation_course\",\n           col = \"race_ethnicity\", col_wrap = 3)\nplt.show()","7cbda49d":"gender_data = df.groupby(\"gender\")[df.columns[5:]].mean()","a76bbeb1":"sns.heatmap(gender_data,annot = True , cmap = \"viridis\")","28e7c205":"race_data = df.groupby(\"race_ethnicity\")[df.columns[5:]].mean()\nrace_data","826e69ad":"sns.heatmap(race_data,annot = True , cmap = \"plasma\")","51987602":"parent_data = df.groupby(\"parent_education\")[df.columns[5:]].mean()\nparent_data","9ca9eaa1":"sns.heatmap(parent_data,annot = True , cmap = \"coolwarm\")","5f9ab6b8":"prep_data = df.groupby(\"test_preparation_course\")[df.columns[5:]].mean()\nprep_data","2968ace4":"sns.heatmap(prep_data,annot = True , cmap = \"cividis\")","97bb03f2":"lunch_data = df.groupby(\"lunch\")[df.columns[5:]].mean()\nlunch_data","f0beab53":"sns.heatmap(lunch_data , annot = True , cmap = \"inferno\")","7ed4f3b9":"df[\"Overall_Results\"] = \"Results Pending\"","8a58c5ec":"df.loc[(df.math_score >= 50) & (df.reading_score >= 50) & (df.writing_score >= 50) , \"Overall_Results\"] = \"Pass\"\ndf.loc[df.Overall_Results != \"Pass\" , \"Overall_Results\"] = \"Fail\"","201a9ed9":"df.Overall_Results.value_counts()","5a405fc4":"fig , ax = plt.subplots(nrows = 3 , ncols = 2 , figsize = (12 , 12)) \ng = sns.countplot(x = \"gender\" , hue = \"Overall_Results\" , data = df, ax = ax[0][0])\ng.legend()\ng = sns.countplot(x = \"race_ethnicity\" , hue = \"Overall_Results\" , data = df ,ax= ax[0][1])\ng.legend()\ng = sns.countplot(y = \"parent_education\" , hue = \"Overall_Results\" , data = df ,ax= ax[1][0])\ng.legend()\ng = sns.countplot(x = \"lunch\" , hue = \"Overall_Results\" , data = df ,ax= ax[1][1])\ng.legend()\ng = sns.countplot(x = \"test_preparation_course\" , hue = \"Overall_Results\" , data = df ,ax= ax[2][1])\ng.legend()\ng = sns.countplot(y = \"parent_education\" , hue = \"test_preparation_course\" , data = df , ax = ax[2][0])\ng.legend()\nplt.show()","9e0b0215":"def New_Grade(Avg_total_score, Overall_Results):\n  \n  if(Avg_total_score >= 90):\n    return '0'\n  if(Avg_total_score >= 80):\n    return 'A'\n  if(Avg_total_score >= 70):\n    return 'B'\n  if(Avg_total_score >= 60):\n    return 'c'\n  if(Avg_total_score >= 50):\n    return 'D'\n  else :\n    return 'E'\n\ndf['Grade'] = df.apply(lambda x: New_Grade(x['Avg_total_score'], x['Overall_Results']), axis = 1 )\n","8ae7fc41":"df.head()","410bb20a":"gender = pd.crosstab(df.gender , df.Grade) \ngender","7b99ac1b":"gender = pd.crosstab(df.gender , df.Grade)\ngender.div(gender.sum(axis = 1).astype(float),axis = 0).plot(kind = \"bar\" , stacked = True)\nplt.title(\"Gender vs Student Grade \")\nplt.show()","e735fa14":"race = pd.crosstab(df.race_ethnicity , df.Grade)\nrace.div(race.sum(1).astype(float) , axis = 0).plot(kind = \"bar\", stacked = True )\nplt.legend(bbox_to_anchor = (1.05 , 1))\nplt.title(\"Race_Ethnicity Vs Students Grade\")\nplt.show()","bb4961ce":"par_ed = pd.crosstab(df.parent_education , df.Grade)\npar_ed.div(par_ed.sum(1).astype(float) , axis = 0).plot(kind = \"bar\", stacked = True )\nplt.legend(bbox_to_anchor = (1.05 , 1))\nplt.title(\"Parents Education Vs Students Grade\")\nplt.show()","f68e0b9e":"lunch = pd.crosstab(df.lunch , df.Grade)\nlunch.div(lunch.sum(1).astype(float) , axis = 0).plot(kind = \"bar\", stacked = True )\nplt.legend(bbox_to_anchor = (1.05 , 1))\nplt.title(\"Lunch Vs Students Grade\")\nplt.show()","8aeca50e":"test_prep = pd.crosstab(df.test_preparation_course , df.Grade)\ntest_prep.div(test_prep.sum(1).astype(float) , axis = 0).plot(kind = \"bar\", stacked = True )\nplt.legend(bbox_to_anchor = (1.05 , 1))\nplt.title(\"Test Preparation Course Vs Students Grade\")\nplt.show()","8bda3c9f":"![image.png](attachment:image.png)","fac1f6b6":" Let's form a dataframe and check for Missing Values.","7844b7c4":"This gives us the distribution among two attributes.","ecab7168":"# Importing Libraries","8d97b941":"# Visualizing the dataset step by step.","1bfdb11b":"Kindly Upvote if you like my work.\n                                       Thank You!","3dc37466":"# Students Exam Performance - EDA","c4d24e51":"# Visualization with respect to Results ","737d2ea8":"Let's Check  for Correlation between attributes","7db93c94":"Group E students , children of Master's Degree parents and those who completed test preparation course are more likely to score \n[O or A] Grade in Examination.","00f878c7":"# Groupby and Heatmaps","59d61182":"Let's Plot Average Total score against different attributes and find some insights , how student marks is varied with respect to other attributes.","9ef3797d":"# Visualization With respect to Grades"}}