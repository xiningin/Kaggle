{"cell_type":{"f987982c":"code","6dfe5463":"code","f9986f34":"code","f7c9b01f":"code","75f920b0":"code","9e72412e":"code","8d055150":"code","9bca8ba5":"code","b74bd636":"code","a245aa2f":"code","80aa4a84":"code","299fcd25":"code","67bbeeee":"code","81a34b07":"code","910dbb9e":"code","9a45b569":"code","57a4800f":"code","e028d56f":"code","b9034221":"code","69982372":"code","7966374e":"code","5bcbc17b":"code","8af609d5":"code","f486c17f":"code","cc8550fe":"code","15bfdc21":"code","afa891be":"code","ab0e74a5":"code","0409360d":"code","b9cc13f7":"code","3561539a":"code","7d824e2f":"code","93a78ae0":"code","e39e000d":"code","102d31e1":"code","f66988f6":"code","5d1e9647":"code","8c836252":"code","4c210e37":"code","a3aa8188":"code","54b74428":"code","f80132f7":"code","e1583268":"code","2ea9f276":"code","8a8a1e9a":"code","42f695ed":"code","4993625f":"code","b98043db":"code","e51d5ae7":"code","9ea9ebb2":"code","0df91817":"code","a83f0222":"code","57fdb13d":"code","1cd51437":"code","941a06f9":"code","24f3f74b":"code","01d1de67":"code","d99d724c":"code","ef8843f4":"code","325438e6":"code","33f24f91":"code","fc812362":"code","5c55a07a":"code","1dcd9e0b":"code","b10770ab":"code","f395f95b":"code","d52e5b31":"code","74d80b74":"code","af2730bf":"code","e0240b2b":"code","2da976f6":"code","e2da46c9":"code","fa26faca":"code","877a060c":"code","86bd4e8d":"code","812b7b0f":"code","2fe8af8f":"code","dcb3fbfe":"code","d94d129f":"code","07add0dd":"code","c5995671":"code","d0baaee8":"code","58405caf":"code","169aac29":"code","3d9bdd14":"code","d4f9853d":"code","0ba7160c":"markdown","e1c92987":"markdown","e172f8bd":"markdown","a5e492ed":"markdown","75c26c9d":"markdown","ba24b13f":"markdown","a6d313a4":"markdown","940a01df":"markdown","fcbe306e":"markdown","90a70367":"markdown","0cc1ce23":"markdown","ad9acf48":"markdown","76483e15":"markdown","dbf6bfc0":"markdown","0591faec":"markdown","1a3d1c88":"markdown","873d5bde":"markdown","adba2dd6":"markdown","80c38c76":"markdown","47e26a74":"markdown","44f4bb09":"markdown","278a0c4a":"markdown","12bc11c1":"markdown","988473d7":"markdown","ce3c9502":"markdown","db46563f":"markdown","f12c820a":"markdown","d759c48a":"markdown","497457a6":"markdown","89590d1b":"markdown","3f421f79":"markdown","ae2613bd":"markdown","cb17373a":"markdown","e4295760":"markdown","488e6f45":"markdown","5cdb1469":"markdown","08ddde7b":"markdown","a4a3aba8":"markdown","845c1a1f":"markdown","0e8d4ac8":"markdown","3d3eaeaf":"markdown","e78e232e":"markdown","cb829614":"markdown","c49bc376":"markdown","efe0f022":"markdown","f42cfd84":"markdown","4d304d27":"markdown","e27a9c0b":"markdown","c5cd1a40":"markdown","637eaaa6":"markdown","7a2dce41":"markdown","17061939":"markdown","d05f02d6":"markdown","a9c8bda2":"markdown","96f07dc3":"markdown","7f03a312":"markdown","53ad1478":"markdown","ad386975":"markdown","27e26fa4":"markdown","fe9b5606":"markdown","7acab8e1":"markdown","54672a27":"markdown","648f81b1":"markdown","b023ea94":"markdown","67c377c2":"markdown","a5888a81":"markdown","a65cdf73":"markdown","9cd5144b":"markdown","11f26ddf":"markdown","0d6ed33f":"markdown","af561550":"markdown","bb17b842":"markdown","cab7e41a":"markdown"},"source":{"f987982c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6dfe5463":"df_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","f9986f34":"df_train.columns","f7c9b01f":"df_train.info()","75f920b0":"df_train.corr()","9e72412e":"df_train.isnull().sum()","8d055150":"df_train.drop(['Ticket'], axis=1, inplace=True)","9bca8ba5":"def missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent\n\npercentage = missing_percent(df_train)\npercentage","b74bd636":"plt.figure(figsize=(12,6))\nsns.barplot(x=percentage.index, y=percentage)\nplt.xticks(rotation=90)","a245aa2f":"percentage[percentage<1]","80aa4a84":"df_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].mode()[0])\n\nmissing_percent(df_train)","299fcd25":"df_train.drop(['Cabin'], axis=1, inplace=True)\n\nmissing_percent(df_train)","67bbeeee":"df_train['Age'] = df_train['Age'].fillna(df_train['Age'].median())\n\nmissing_percent(df_train)","81a34b07":"sns.catplot(x='Survived', data=df_train, kind=\"count\")","910dbb9e":"sns.catplot(x='Sex', data=df_train, kind=\"count\")","9a45b569":"sns.histplot(df_train['Age'], bins= 8)","57a4800f":"fig = sns.FacetGrid(df_train, hue=\"Sex\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\nfig.set(xlim=(0,90))\nfig.add_legend()","e028d56f":"sns.lmplot(x='Age',y='Survived',data=df_train)","b9034221":"sns.lmplot(x='Age',y='Survived',data=df_train, hue='Sex', x_bins=[0,10,20,30,40,50,60,70,80,90])","69982372":"def adult(passenger):\n    age, sex = passenger\n    if age < 16:\n        return 'child'\n    else:\n        return sex\n    \ndf_train['Person'] = df_train[['Age','Sex']].apply(adult, axis=1)","7966374e":"fig = sns.FacetGrid(df_train, hue=\"Person\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\nfig.set(xlim=(0,90))\nfig.add_legend()","5bcbc17b":"sns.catplot(x='Person',y='Survived',kind='bar', data=df_train, palette ='Set3_d')","8af609d5":"sns.catplot(x=\"Pclass\", data=df_train, hue=\"Person\", kind=\"count\", palette='winter_d')","f486c17f":"sns.catplot(x='Pclass',y='Survived',kind='bar', data=df_train, palette = 'Set2_d')","cc8550fe":"fig = sns.FacetGrid(df_train,aspect=4)\nfig.map(sns.kdeplot,'Fare',shade= True)\nfig.set(xlim=(0,90))\nfig.add_legend()","15bfdc21":"sns.catplot(x='Pclass',y='Fare',kind='bar', data=df_train, palette ='Set3_d')","afa891be":"sns.lmplot(x='Fare',y='Survived',data=df_train)","ab0e74a5":"sns.catplot(x=\"Embarked\", data=df_train, kind=\"count\", palette='Set1_d')","0409360d":"sns.catplot(x=\"Embarked\", data=df_train, kind=\"count\", hue='Pclass', palette='Set1_d')","b9cc13f7":"df_train['Name']","3561539a":"df_train['Title'] = df_train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","7d824e2f":"df_train['Title'].value_counts()","93a78ae0":"df_train['Title'] = df_train['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Don', 'Ms'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace('Mlle', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Mme', 'Mrs')","e39e000d":"df_train['Title'].unique()","102d31e1":"sns.catplot(x='Title',y='Survived',kind='bar', data=df_train, palette ='Set2_d')","f66988f6":"df_train['Alone'] = (df_train['SibSp'] + df_train['Parch'] == 0)\n\ndef Alone_or_not (passenger):\n    if passenger == True:\n        return \"Alone\"\n    if passenger == False:\n        return \"With Family\"\n\ndf_train['Family'] = df_train['Alone'].apply(Alone_or_not)","5d1e9647":"df_train","8c836252":"sns.catplot(x='Family', data=df_train, kind=\"count\")","4c210e37":"sns.catplot(x='Family',y='Survived',kind='bar', data=df_train, palette ='Set3_d')","a3aa8188":"df_test=pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.head()","54b74428":"df_test.drop(['Ticket'], axis=1, inplace=True)\ndf_test.drop(['Cabin'], axis=1, inplace=True)","f80132f7":"df_test['Title'] = df_test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf_test['Title'] = df_test['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Don', 'Dona', 'Ms'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace('Mlle', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Mme', 'Mrs')","e1583268":"df_test.drop(['Name'], axis=1, inplace=True)","2ea9f276":"df_test['Alone'] = (df_test['SibSp'] + df_test['Parch'] == 0)\n\ndef Alone_or_not (passenger):\n    if passenger == True:\n        return \"Alone\"\n    if passenger == False:\n        return \"With Family\"\n\ndf_test['Family'] = df_test['Alone'].apply(Alone_or_not)","8a8a1e9a":"df_test.drop(['SibSp', 'Parch', 'Alone' ], axis=1, inplace=True)","42f695ed":"df_test.isnull().sum()","4993625f":"df_test['Age'] = df_test['Age'].fillna(df_train['Age'].median())\ndf_test.isnull().sum()","b98043db":"df_train.groupby('Pclass')['Fare'].mean()","e51d5ae7":"df_test['Fare']=df_test.groupby('Pclass')['Fare'].transform(lambda val: val.fillna(val.mean()))\ndf_test.isnull().sum()","9ea9ebb2":"df_train","0df91817":"y = df_train['Survived']\ndf_train.drop(['Person', 'SibSp', 'Parch', 'Name', 'Alone', 'Survived' ], axis=1, inplace=True)","a83f0222":"df_train","57fdb13d":"df_test","1cd51437":"df = pd.concat([df_train , df_test], axis=0)\ndf.index = np.arange(1, len(df) + 1)\ndf","941a06f9":"df.drop('PassengerId', axis=1, inplace=True)\ndf","24f3f74b":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","01d1de67":"df_obj= pd.get_dummies(df_obj, drop_first=True)","d99d724c":"df_obj","ef8843f4":"df_obj_train = df_obj.iloc[:891, :]\ndf_obj_test = df_obj.iloc[891:, :]","325438e6":"df_num_train = df_num.iloc[:891, :]\ndf_num_test = df_num.iloc[891:, :]","33f24f91":"names = df_num_train.columns\n\nfrom sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaler.fit(df_num_train)\ndf_num_train= scaler.transform(df_num_train)\ndf_num_test= scaler.transform(df_num_test)\n\ndf_num_train = pd.DataFrame(df_num_train, columns= names)\ndf_num_train.index = np.arange(1, len(df_num_train) + 1)\n\ndf_num_test = pd.DataFrame(df_num_test, columns= names)\ndf_num_test.index = np.arange(892, 892 + len(df_num_test))","fc812362":"df_train = pd.concat([df_num_train, df_obj_train], axis=1)\ndf_test = pd.concat([df_num_test, df_obj_test], axis=1)\ndf_test","5c55a07a":"from sklearn.linear_model import LogisticRegression\nlog_model= LogisticRegression()\nlog_model.fit(df_train, y)","1dcd9e0b":"log_model.coef_","b10770ab":"y_pred_lr= log_model.predict(df_test)\ny_pred_lr","f395f95b":"y_test=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ny_test_e = y_test['Survived'].to_numpy()\ny_test_e","d52e5b31":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix","74d80b74":"accuracy_score(y_test_e, y_pred_lr)","af2730bf":"confusion_matrix(y_test_e, y_pred_lr)","e0240b2b":"plot_confusion_matrix(log_model, df_test , y_test_e)","2da976f6":"print(classification_report(y_test_e, y_pred_lr))","e2da46c9":"from sklearn.metrics import precision_recall_curve, plot_precision_recall_curve, plot_roc_curve","fa26faca":"plot_precision_recall_curve(log_model, df_test, y_test_e)","877a060c":"plot_roc_curve(log_model, df_test, y_test_e)","86bd4e8d":"from sklearn.neighbors import KNeighborsClassifier\nknn_model= KNeighborsClassifier(n_neighbors=18)\nknn_model.fit(df_train, y)","812b7b0f":"log_model.coef_","2fe8af8f":"y_pred_knn= knn_model.predict(df_test)","dcb3fbfe":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","d94d129f":"accuracy_score(y_test_e, y_pred_knn)","07add0dd":"confusion_matrix(y_test_e, y_pred_knn)","c5995671":"plot_confusion_matrix(log_model, df_test , y_test_e)","d0baaee8":"print(classification_report(y_test_e, y_pred_knn))","58405caf":"test_error_rate= []\n\n\nfor k in range (1, 30):\n    knn_model = KNeighborsClassifier(n_neighbors=k)\n    knn_model.fit(df_train, y)\n    \n    y_pred_test = knn_model.predict(df_test)\n    \n    test_error=1- accuracy_score(y_test_e, y_pred_test)\n    test_error_rate.append(test_error)","169aac29":"test_error_rate","3d9bdd14":"plt.figure(figsize=(10, 6))\nplt.plot(range(1, 30), test_error_rate, label='Test Error')\nplt.legend()\nplt.ylabel('Error Rate')\nplt.xlabel('K Value')","d4f9853d":"submission = pd.DataFrame()\nsubmission['PassengerId'] = df_test.index\nsubmission['Survived'] = y_pred_lr\nsubmission.to_csv('my-submission.csv',index=False)","0ba7160c":"## Age","e1c92987":"Now we can drop the passenger Id as it is similar to the index:","e172f8bd":"# Step 13: Submitting the predicted data","a5e492ed":"If you want to know why we chose 18 for n_neighbors, look at section 12_B.","75c26c9d":"We can clearly see that titles Mrs, Miss and Master survived more than others, specially from Mr. Surely this has something to do with the age or sex.","ba24b13f":"# Step 12-A: Evaluating Curves and AUC","a6d313a4":"With 19% of missing data, we can just fill it with the median of the age:","940a01df":"We fill the fair according to its pclass (in train dataset):","fcbe306e":"# Step 12-B: Elbow Method for Choosing Reasonable K Values","90a70367":"Where did the passengers come from? If we look at the project on Kaggle we see that these stand for Cherbourg, Queenstown, Southhampton.","0cc1ce23":"# Step 5: Importing the test dataset and do the changes","ad9acf48":"We can see that there are more children in third class and not so many in first class.","76483e15":"With 77 % missing information maybe it is best to drop the column which does not give us that much of an information:","dbf6bfc0":"We save the survived people in y and drop other columns which are not necessary to keep:","0591faec":"And now let's look at the ones with less than 1%.","1a3d1c88":"We see a family name, title. and name. So maybe we can use these titles for some analyzing:","873d5bde":"# Step 8: Dealing with the numerical values","adba2dd6":"Most of the people aged between 20-30. Let's look at the age condidering the gender:","80c38c76":"Let's see what some of the columns mean:\n\nsurvival: 0 = No, 1 = Yes\n\npclass: Ticket class: 1 = 1st, 2 = 2nd, 3 = 3rd\n\nsibsp: number of siblings \/ spouses aboard the Titanic\n\nparch: number of parents \/ children aboard the Titanic\n\nticket: Ticket number\n\nfare: Passenger fare, the money paid for a journey on public transport.\n\ncabin: Cabin number\n\nembarked, Port of Embarkation: C = Cherbourg, Q = Queenstown, S = Southampton","47e26a74":"## Age","44f4bb09":"Let's remember from Id=892 to the end belongs to the test dataset.","278a0c4a":"# Step 6: Merging the test and train dataset","12bc11c1":"Pclass is the ticket class and it can be 1 = 1st, 2 = 2nd, 3 = 3rd.","988473d7":"We see most of the people paid 5-15 dollars for their ticket. Let's see if this is related to the pclass and rate of survival:","ce3c9502":"It seems that being an old female gave the passengers more chance of survival than being an old male!\nWere there any children on titanic? Let's see if we can make a seperate group for children. If we say people under 16 are children:","db46563f":"We can see that more men were on the deck.","f12c820a":"## Embarked","d759c48a":"Now let's see how many missing data do we have?","497457a6":"# Step 9-A: Building a logistic regression model","89590d1b":"## Gender","3f421f79":"We can see from the information that some info are not really necassary to keep, because they have no impact on the survival. Things like ticket number:","ae2613bd":"Well! We can see that they must have the \"female and children go first\" policy. ","cb17373a":"# Step 11-A: Evaluating the model","e4295760":"Of course as we expected people paid way more for the first class. But let's see if paying more helped them to survive more?","488e6f45":"Finally there is no missing data!","5cdb1469":"## Import","08ddde7b":"# Step 10-B: Predicting the test data","a4a3aba8":"# Step 3: Dealing with the missing data","845c1a1f":"By evaluating the models, we can see the logistic regression has a higher accuracy rate. So we choose y_pred_lr for submitting the data:","0e8d4ac8":"# Step 1: Importing the dataset and neccessary libraries\u00b6","3d3eaeaf":"## Embarked","e78e232e":"## Apply changes","cb829614":"We see that k=18 and 19 are the best.","c49bc376":"## Title","efe0f022":"## Dealing with missing values","f42cfd84":"Let's see if the title is corrolated with surviving:","4d304d27":"## Cabin","e27a9c0b":"We have changed things on the train dataset that we need to do also on test dataset. Also for changing them to dummy variables we need them to be one dataset. Then we will split them and build a model:","c5cd1a40":"Let't see how many people survived in titanic:","637eaaa6":"We see a lot of people came from Southhampton. Let's see if they were in different Pclasses:","7a2dce41":"Let's see what practical information we can get from the names:","17061939":"It seems that survival rate for the first class was more.","d05f02d6":"only 0.22 % is a missing data, so let's just fill it with the mode of the embarks:","a9c8bda2":"Almost all people from Queenstown were in third class.","96f07dc3":"## Fare","7f03a312":"Yes! If you'd pay more, it was more likely you could've survived.","53ad1478":"Title Miss and Mme (mademoiselle) was used for an unmarried woman. Title Mrs or Mme (madame) was used for a married woman. Title Master is an honorific for boys and young men. The other titles are rare, so let's just put them on one group:","ad386975":"# Step 9-B: Building a KNN model","27e26fa4":"# Step 11-B: Evaluating the model","fe9b5606":"# Step 2: Getting to know the data\u00b6","7acab8e1":"It seems that people with family survived more than alone people!","54672a27":"Let's take another look at both train and test dataset:","648f81b1":"# Step 7: Dealing with the categorical data","b023ea94":"We fill the age with median age of train dataset:","67c377c2":"The sinking of the Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew. While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nHere I am building a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc). \nLogistic regression and KNN are the algorithms used to predict this dataset.","a5888a81":"## Pclass","a65cdf73":"So it seems that most of the people were alone on the titanic.","9cd5144b":"## Being alone or not","11f26ddf":"# Step 4: Exploratory data analysis","0d6ed33f":"We can see that the younger people had more change of survival. Is is true for both men and women?","af561550":"Unfortunately many more people did not survive. Let's look at the factors: gender, age, pclass, fare, embarked, title and being alone.","bb17b842":"# Step 10-A: Predicting the test data","cab7e41a":"If someone had no family they are considered alone. Let's make a column named family first:"}}