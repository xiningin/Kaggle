{"cell_type":{"6295fd6f":"code","781b93d6":"code","4ce2f7c8":"code","3321808b":"code","79ebbc78":"code","e3f2bb97":"code","be97bc55":"code","d8770cc2":"code","2fb56e76":"code","e203dfac":"code","984d4ba9":"code","d6c9619c":"code","b3df96d0":"code","57ede86c":"code","55c7c091":"code","392f81dc":"code","f25c6ef8":"markdown","422b3fda":"markdown","591c85e5":"markdown","2ed292b1":"markdown","ad434426":"markdown","7a667271":"markdown","b968518d":"markdown","65be347f":"markdown","b4487cb9":"markdown","900a7318":"markdown","211395c7":"markdown","c656d137":"markdown","203450e3":"markdown"},"source":{"6295fd6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","781b93d6":"auto_df=pd.read_csv(\"\/kaggle\/input\/automobile-dataset\/Automobile_data.csv\")","4ce2f7c8":"#Importing libraries \n\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\noutput_notebook()","3321808b":"# Scatter Markers\n\np = figure(plot_width=500, plot_height=500)\n\n# add a circle renderer with a size, color, and alpha\np.circle(auto_df[\"engine-size\"], auto_df[\"wheel-base\"], size=20, color=\"navy\", alpha=0.5)\n\n# show the results\nshow(p)","79ebbc78":"p = figure(plot_width=500, plot_height=500)\n\n# add a square renderer with a size, color, and alpha\np.square(auto_df[\"engine-size\"], auto_df[\"wheel-base\"], size=20, color=\"green\", alpha=0.5)\n\n# show the results\nshow(p)","e3f2bb97":"from bokeh.transform import factor_cmap, factor_mark\nBODY_STYLE = ['sedan', 'hatchback', 'Other']\nMARKERS = ['hex', 'circle_x', 'triangle']\n\np = figure(title = \"Automobile Dataset\")\np.xaxis.axis_label = 'Engine Size'\np.yaxis.axis_label = 'Wheel Base'\n\np.scatter(\"engine-size\", \"wheel-base\", source=auto_df, legend_field=\"body-style\", fill_alpha=0.4, size=12,\n          marker=factor_mark('body-style', MARKERS, BODY_STYLE),\n          color=factor_cmap('body-style', 'Category10_3', BODY_STYLE))\n\nshow(p)","be97bc55":"#Index Filter \nfrom bokeh.models import  CDSView, IndexFilter\n\nsource = ColumnDataSource(auto_df)\nview = CDSView(source=source, filters=[IndexFilter([70, 90, 110,130])])\n\ntools = [\"box_select\", \"hover\", \"reset\"]\np = figure(plot_height=300, plot_width=300, tools=tools)\np.circle(x=\"engine-size\", y=\"wheel-base\", size=10, hover_color=\"red\", source=source)\n\np_filtered = figure(plot_height=300, plot_width=300, tools=tools)\np_filtered.circle(x=\"engine-size\", y=\"wheel-base\", size=10, hover_color=\"red\", source=source, view=view)\n\nshow(gridplot([[p, p_filtered]]))","d8770cc2":"# Boolean Filter \n\nfrom bokeh.models import BooleanFilter\n\nbooleans = [True if y_val > 110 else False for y_val in source.data['wheel-base']]\nview = CDSView(source=source, filters=[BooleanFilter(booleans)])\n\ntools = [\"box_select\", \"hover\", \"reset\"]\np = figure(plot_height=300, plot_width=300, tools=tools)\np.circle(x=\"engine-size\", y=\"wheel-base\", size=10, hover_color=\"red\", source=source)\n\np_filtered = figure(plot_height=300, plot_width=300, tools=tools,\n                    x_range=p.x_range, y_range=p.y_range)\np_filtered.circle(x=\"engine-size\", y=\"wheel-base\", size=10, hover_color=\"red\", source=source, view=view)\n\nshow(gridplot([[p, p_filtered]]))\n","2fb56e76":"#GroupFilter\n\nfrom bokeh.models import GroupFilter\n\nview1 = CDSView(source=source, filters=[GroupFilter(column_name='body-style', group='hatchback')])\nplot_size_and_tools = {'plot_height': 300, 'plot_width': 300,\n                        'tools':['box_select', 'reset', 'help']}\n\np1 = figure(title=\"Full data set\", **plot_size_and_tools)\np1.circle(x='engine-size', y='wheel-base', source=source, color='black')\n\np2 = figure(title=\"Sedan and Others only\", x_range=p1.x_range, y_range=p1.y_range, **plot_size_and_tools)\np2.circle(x='engine-size', y='wheel-base', source=source, view=view1, color='red')\n\nshow(gridplot([[p1, p2]]))\n","e203dfac":"#Column Layout \n\n\n# create three plots\ns1 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns1.circle(auto_df['engine-size'], auto_df['wheel-base'], size=12, color=\"#53777a\", alpha=0.8)\n\ns2 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns2.triangle(auto_df['engine-size'], auto_df['length'], size=12, color=\"#c02942\", alpha=0.8)\n\ns3 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns3.square(auto_df['engine-size'],auto_df['width'] , size=12, color=\"#d95b43\", alpha=0.8)\n\n# put the results in a column and show\nshow(column(s1, s2, s3))\n\n","984d4ba9":"#Row Layout\n\n# create three plots\ns1 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns1.circle(auto_df['engine-size'], auto_df['wheel-base'], size=12, color=\"#53777a\", alpha=0.8)\n\ns2 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns2.triangle(auto_df['engine-size'], auto_df['length'], size=12, color=\"#c02942\", alpha=0.8)\n\ns3 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns3.square(auto_df['engine-size'],auto_df['width'] , size=12, color=\"#d95b43\", alpha=0.8)\n\n# put the results in a column and show\nshow(row(s1, s2, s3))","d6c9619c":"# create three plots\ns1 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns1.circle(auto_df['engine-size'], auto_df['wheel-base'], size=12, color=\"#53777a\", alpha=0.8)\n\ns2 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns2.triangle(auto_df['engine-size'], auto_df['length'], size=12, color=\"#c02942\", alpha=0.8)\n\ns3 = figure(plot_width=500, plot_height=500, background_fill_color=\"#fafafa\")\ns3.square(auto_df['engine-size'],auto_df['width'] , size=12, color=\"#d95b43\", alpha=0.8)\n\n# make a grid\ngrid = gridplot([[s1, s2], [None, s3]], plot_width=250, plot_height=250)\n\nshow(grid)","b3df96d0":"from bokeh.palettes import Spectral6\n\nbody_style = ['sedan', 'hatchback', 'wagon', 'convertible']\ncounts = [(auto_df['body-style'].values == 'sedan').sum(),(auto_df['body-style'].values == 'hatchback').sum(),(auto_df['body-style'].values == 'wagon').sum(),(auto_df['body-style'].values == 'convertible').sum()]\nsource = ColumnDataSource(data=dict(body_style=body_style, counts=counts, color=Spectral6))\n\np = figure(x_range=body_style, y_range=(0,200), plot_height=250, title=\"Body Style of car Counts\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='body_style', top='counts', width=0.9, color='color', legend_field=\"body_style\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","57ede86c":"from bokeh.palettes import Spectral5\n\nauto_df['body-style']= auto_df['body-style'].astype(str)\ngroup = auto_df.groupby('body-style')\n\nsource = ColumnDataSource(group)\n\ncyl_cmap = factor_cmap('body-style', palette=Spectral5, factors=sorted(auto_df['body-style'].unique()))\n\np = figure(plot_height=350, x_range=group, title=\"Engine size by # Cylinders\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='body-style', top='engine-size', width=1, source=auto_df,\n       line_color=cyl_cmap, fill_color=cyl_cmap)\n\np.y_range.start = 0\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"some stuff\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","55c7c091":"from bokeh.sampledata.sprint import sprint\n\noutput_file(\"sprint.html\")\n\nsprint.Year = sprint.Year.astype(str)\ngroup = sprint.groupby('Year')\nsource = ColumnDataSource(group)\n\np = figure(y_range=group, x_range=(9.5,12.7), plot_width=400, plot_height=550, toolbar_location=None,\n           title=\"Time Spreads for Sprint Medalists (by Year)\")\np.hbar(y=\"Year\", left='Time_min', right='Time_max', height=0.4, source=source)\n\np.ygrid.grid_line_color = None\np.xaxis.axis_label = \"Time (seconds)\"\np.outline_line_color = None\n\nshow(p)","392f81dc":"from bokeh.transform import jitter\nfrom bokeh.sampledata.commits import data\n\noutput_file(\"bars.html\")\n\nDAYS = ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n\nsource = ColumnDataSource(data)\n\np = figure(plot_width=800, plot_height=300, y_range=DAYS, x_axis_type='datetime',\n           title=\"Commits by Time of Day (US\/Central) 2012\u20142016\")\n\np.circle(x='time', y=jitter('day', width=0.6, range=p.y_range),  source=source, alpha=0.3)\n\np.xaxis[0].formatter.days = ['%Hh']\np.x_range.range_padding = 0\np.ygrid.grid_line_color = None\n\nshow(p)","f25c6ef8":"**Column Layout**\n\nTo display plots or widgets in a vertical fashion, use the column() function:\n\n","422b3fda":"In this section , we filter data based upon our requirements. To plot with a subset of data, you can create a CDSView and pass it in as a view argument to the renderer-adding methods on the Figure, such as figure.circle. The CDSView has two properties, source and filters. source is the ColumnDataSource that the view is associated with. filters is a list of Filter objects, listed and described below.\n\n","591c85e5":"**The GroupFilter allows you to select rows from a dataset that have a specific value for a categorical variable. The GroupFilter has two properties, column_name, the name of column in the ColumnDataSource, and group, the value of the column to select for.**\n","2ed292b1":"**Grid Layout**\n\nThe gridplot() function can be used to arrange Bokeh Plots in grid layout. gridplot() also collects all tools into a single toolbar, and the currently active tool is the same for all plots in the grid. It is possible to leave \u201cempty\u201d spaces in the grid by passing None instead of a plot object.\n\n","ad434426":"# 5. Handling categorical data","7a667271":"**The IndexFilter is the simplest filter type. It has an indices property which is a list of integers that are the indices of the data you want to be included in the plot.**\n","b968518d":"# 2. Basic Glyphs ","65be347f":" **Row Layout**\n\nTo display plots horizontally, use the row() function\n\n","b4487cb9":"# 3. Filtering Data","900a7318":"**A BooleanFilter selects rows from a data source through a list of True or False values in its booleans property**","211395c7":"# 1.Import Libraries ","c656d137":"# Please upvote if you like this kernel for further encouragement","203450e3":"# 4. Layouts "}}