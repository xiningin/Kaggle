{"cell_type":{"cf733265":"code","1cfe1376":"code","eabe70f8":"code","fde56ada":"code","aa3c6b0d":"code","47832151":"code","b886cd1c":"code","ad9d874b":"code","5bcb5e50":"code","f40ee470":"code","7432ecfa":"code","31be9ac3":"code","f4853184":"code","e580dfea":"code","5c57e482":"code","4d26b94e":"code","297e7c29":"code","834d3e9e":"code","c8f11d7e":"code","f79e4521":"code","1c14fbcd":"code","a5a42f05":"code","661c0888":"code","be66db8c":"code","496b4b69":"code","aaa24222":"code","54130e85":"code","fd5f30f4":"code","6531cbf3":"code","b90b580a":"code","742629b8":"code","95ad3400":"code","e0c3dba0":"code","3d26148d":"code","d6a19305":"code","685bd5fe":"code","195c211f":"code","877f8a02":"code","6b3c99d6":"code","7a65e975":"code","4b6239bd":"code","066c38fc":"code","dce8de3a":"code","8def2148":"code","63ba223c":"code","3835c50b":"code","c528ad62":"code","33dfc588":"code","307390ee":"code","b7b3cdf6":"code","4cbe4eb6":"markdown","e6c2ec45":"markdown","28ec30a0":"markdown","1392652e":"markdown","bdb23ee1":"markdown","f27ab818":"markdown","36531a2c":"markdown","9b5ee181":"markdown","6529e2c3":"markdown","06415f1a":"markdown","1cb10a8f":"markdown","a9deae1d":"markdown","518df07c":"markdown"},"source":{"cf733265":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1cfe1376":"data='\/kaggle\/input\/insurance\/insurance.csv'\ndf=pd.read_csv(data)","eabe70f8":"df","fde56ada":"df.info()","aa3c6b0d":"df.describe()","47832151":"import plotly.express as px\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport numpy as np","b886cd1c":"#better style and font for graphs\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (10, 6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","ad9d874b":"df.corr()","5bcb5e50":"sns.heatmap(df.corr(), cmap='Greens', annot=True)\nplt.title('Correlation Matrix for All Variables');","f40ee470":"## Age \nfig = px.histogram(df, \n                   x='age', \n                   marginal='box', \n                   nbins=47, \n                   title='Distribution of Age')\nfig.update_layout(bargap=0.1)\nfig.show()","7432ecfa":"#BMI\nfig = px.histogram(df, \n                   x='bmi', \n                   marginal='box', \n                   color_discrete_sequence=['red'], \n                   title='Distribution of BMI (Body Mass Index)')\nfig.update_layout(bargap=0.1)\nfig.show()","31be9ac3":"#Relation between age and charges\nfig = px.scatter(df, \n                 x='age', \n                 y='charges', \n                 color='smoker', \n                 opacity=0.8, \n                 hover_data=['sex'], \n                 title='Age vs. Charges')\nfig.update_traces(marker_size=5)\nfig.show()","f4853184":"#Relation between BMI and Charges\nfig = px.scatter(df, \n                 x='bmi', \n                 y='charges', \n                 color='smoker', \n                 opacity=0.8, \n                 hover_data=['sex'], \n                 title='BMI vs. Charges')\nfig.update_traces(marker_size=5)\nfig.show()","e580dfea":"px.violin\nfig = px.violin(df, \n                 x='bmi', \n                 y='charges', \n                 color='smoker', \n                 #opacity=0.8, \n                 \n                 title='BMI vs. Charges')\nfig.update_traces(marker_size=5)\nfig.show()","5c57e482":"non_smoker_df = df[df.smoker == 'no']","4d26b94e":"plt.title('Age vs. Charges')\nsns.scatterplot(data=non_smoker_df, x='age', y='charges', alpha=0.7, s=15);","297e7c29":"from sklearn.linear_model import LinearRegression","834d3e9e":"model = LinearRegression()","c8f11d7e":"inputs = non_smoker_df[['age']]\ntargets = non_smoker_df.charges\nprint('inputs.shape :', inputs.shape)\nprint('targes.shape :', targets.shape)","f79e4521":"model.fit(inputs, targets)","1c14fbcd":"predictions = model.predict(inputs)\npredictions","a5a42f05":"#w\nmodel.coef_","661c0888":"#b\nmodel.intercept_","be66db8c":"def rmse(targets, predictions):\n    return np.sqrt(np.mean(np.square(targets - predictions)))","496b4b69":"rmse(targets, predictions)","aaa24222":"def estimate_charges(age, w, b):\n    return w * age + b","54130e85":"def try_parameters(w, b):\n    ages = non_smoker_df.age\n    target = non_smoker_df.charges\n    predictions = estimate_charges(ages, w, b)\n    \n    plt.plot(ages, predictions, 'r', alpha=0.9);\n    plt.scatter(ages, target, s=8,alpha=0.8);\n    plt.xlabel('Age');\n    plt.ylabel('Charges')\n    plt.legend(['Prediction', 'Actual']);\n    \n    loss = rmse(target, predictions)\n    print(\"RMSE Loss: \", loss)","fd5f30f4":"try_parameters(model.coef_,model.intercept_)","6531cbf3":"# Create inputs and targets\ninputs, targets = non_smoker_df[['age', 'bmi', 'children']], non_smoker_df['charges']\n\n# Create and train the model\nmodel = LinearRegression().fit(inputs, targets)\n\n# Generate predictions\npredictions = model.predict(inputs)\n\n# Compute loss to evalute the model\nloss = rmse(targets, predictions)\nprint('Loss:', loss)","b90b580a":"fig = px.scatter_3d(non_smoker_df, x='age', y='bmi', z='charges')\nfig.update_traces(marker_size=3, marker_opacity=0.5)\nfig.show()","742629b8":"model.coef_, model.intercept_","95ad3400":"# Create inputs and targets\ninputs, targets = df[['age', 'bmi', 'children']], df['charges']\n\n# Create and train the model\nmodel = LinearRegression().fit(inputs, targets)\n\n# Generate predictions\npredictions = model.predict(inputs)\n\n# Compute loss to evalute the model\nloss = rmse(targets, predictions)\nprint('Loss:', loss)","e0c3dba0":"sns.barplot(data=df, x='smoker', y='charges');","3d26148d":"#Encode categorical variable\nsmoker_codes = {'no': 0, 'yes': 1}\ndf['smoker_code'] = df.smoker.map(smoker_codes)","d6a19305":"df.charges.corr(df.smoker_code)","685bd5fe":"# Create inputs and targets\ninputs, targets = df[['age', 'bmi', 'children', 'smoker_code']], df['charges']\n\n# Create and train the model\nmodel = LinearRegression().fit(inputs, targets)\n\n# Generate predictions\npredictions = model.predict(inputs)\n\n# Compute loss to evalute the model\nloss = rmse(targets, predictions)\nprint('Loss:', loss)","195c211f":"model.coef_, model.intercept_","877f8a02":"sex_codes = {'female': 0, 'male': 1}","6b3c99d6":"df['sex_code'] =df.sex.map(sex_codes)","7a65e975":"df","4b6239bd":"df.charges.corr(df.sex_code)","066c38fc":"# Create inputs and targets\ninputs, targets =df[['age', 'bmi', 'children', 'smoker_code', 'sex_code']], df['charges']\n\n# Create and train the model\nmodel = LinearRegression().fit(inputs, targets)\n\n# Generate predictions\npredictions = model.predict(inputs)\n\n# Compute loss to evalute the model\nloss = rmse(targets, predictions)\nprint('Loss:', loss)","dce8de3a":"df.region.value_counts()","8def2148":"sns.barplot(data=df, x='region', y='charges');","63ba223c":" #encode regions by onehot encoder function\nfrom sklearn import preprocessing\nenc = preprocessing.OneHotEncoder()\nenc.fit(df[['region']])\nenc.categories_","3835c50b":"one_hot = enc.transform(df[['region']]).toarray()\none_hot","c528ad62":"df[['northeast', 'northwest', 'southeast', 'southwest']] = one_hot","33dfc588":"df","307390ee":"# Create inputs and targets\ninput_cols = ['age', 'bmi', 'children', 'smoker_code', 'sex_code', 'northeast', 'northwest', 'southeast', 'southwest']\ninputs, targets = df[input_cols], df['charges']\n\n# Create and train the model\nmodel = LinearRegression().fit(inputs, targets)\n\n# Generate predictions\npredictions = model.predict(inputs)\n\n# Compute loss to evalute the model\nloss = rmse(targets, predictions)\nprint('Loss:', loss)","b7b3cdf6":"model.coef_,model.intercept_","4cbe4eb6":"Let's compute the RMSE loss to evaluate the model.","e6c2ec45":"# we see here loss is less, that mean regression model improve more in last step ","28ec30a0":"****Linear Regression using Multiple Features****","1392652e":"visualize the relationship between \"age\" and \"charges\"","bdb23ee1":"Let's include the region columns into our linear regression model.\n\n$charges = w_1 \\times age + w_2 \\times bmi + w_3 \\times charges + w_4 \\times smoker + w_5 \\times sex + w_6 \\times region + b$","f27ab818":"weak realtion between charges and sex","36531a2c":"Let's go one step further, and add the final numeric column: \"children\", which seems to have some correlation with \"charges\".\n\n$charges = w_1 \\times age + w_2 \\times bmi + w_3 \\times charges + b$","9b5ee181":"**Clear Relation between Non smoker and charges with increase age**","6529e2c3":"# > ****Prediction the charges of insurance ******","06415f1a":"ADD sex to regression model after encode variable","1cb10a8f":"#Regression equation\ny=-2091.4+267.2x","a9deae1d":"Let's define a function to compute the RMSE.","518df07c":"## Linear Regression using a Single Feature\n\nWe now know that the \"smoker\" and \"age\" columns have the strongest correlation with \"charges\". Let's try to find a way of estimating the value of \"charges\" using the value of \"age\" for non-smokers. First, let's create a data frame containing just the data for non-smokers."}}