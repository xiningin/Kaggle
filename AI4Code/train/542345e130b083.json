{"cell_type":{"00550950":"code","c42acbc4":"code","c26f5bec":"code","677e2575":"code","d18b129a":"code","95dc2f11":"code","d5e217ab":"code","a0797483":"code","38c20236":"code","b9ca7002":"code","4818093a":"code","353941e6":"code","7ba45019":"markdown","9b7556ab":"markdown","7be4c050":"markdown","ed1157da":"markdown","ea3fbb18":"markdown","344e016a":"markdown","6d237c84":"markdown","004f819e":"markdown","0052243f":"markdown","119f45d3":"markdown","10baaea7":"markdown","32e17cb1":"markdown","9da78a63":"markdown","01b2b46a":"markdown"},"source":{"00550950":"import pandas as pd\nimport sqlite3\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport networkx as nx","c42acbc4":"con = sqlite3.connect(\"..\/input\/clubhouse-dataset\/Clubhouse_Dataset_v1.db\")\nusers_df = pd.read_sql_query(\"SELECT * from user\", con)\nusers_df = users_df.replace(to_replace ='null',value ='')","c26f5bec":"users_df['time_created'] = pd.to_datetime(users_df['time_created']).apply(lambda x: x.date())\ndate_creation_df = pd.DataFrame(users_df.groupby('time_created')['user_id'].apply(list))\nfor i in range(date_creation_df.shape[0]):\n    date_creation_df['user_id'].iloc[i] = len(date_creation_df['user_id'].iloc[i])\ndate_creation_df.reset_index(level=0,inplace=True)\n\ntrace1 = go.Scatter(\n                    x = date_creation_df.time_created,\n                    y = date_creation_df.user_id,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    )\n\ndata = [trace1]\nlayout = dict(title = 'Number of New Users Created Each Day',\n              xaxis= dict(title= 'Number of New Users',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","677e2575":"invited_by_df = users_df['invited_by_user_profile'].value_counts().to_frame()\ninvited_by_df.reset_index(level=0,inplace=True)\ninvited_by_df.columns = ['user_id','no_of_users_invited']\ninvited_by_df = invited_by_df.head(20)\ninvited_by_df['name'] = ['']*20\nfor i in range(invited_by_df.shape[0]):\n    user_name = users_df.loc[users_df['user_id']==invited_by_df['user_id'].iloc[i]]['name'].values\n    if len(user_name) !=0:\n        invited_by_df.loc[i,'name'] = user_name[0]\n    else:\n        if invited_by_df['user_id'].iloc[i] == '':\n            invited_by_df.loc[i,'name'] = 'No Inviter'\n        else:\n            invited_by_df.loc[i,'name'] = invited_by_df['user_id'].iloc[i]\n            \ntrace1 = go.Bar(\n                x = invited_by_df.name,\n                y = invited_by_df.no_of_users_invited,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\ndata = [trace1]\nlayout = dict(title = 'Top 20 Users Who Invited Others',\n              xaxis= dict(title= 'Name of User',ticklen= 5,zeroline= False)\n             )\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d18b129a":"followers_following_df = users_df[['num_followers','num_following']]\nusers_less_05k_followers = followers_following_df.loc[(followers_following_df['num_followers']<500)].sort_values(['num_followers'],ascending=False)\nusers_05k_1k_followers = followers_following_df.loc[(followers_following_df['num_followers']>500) & (followers_following_df['num_followers']<1000)].sort_values(['num_followers'],ascending=False)\nusers_more1k_followers = followers_following_df.loc[(followers_following_df['num_followers']>1000)].sort_values(['num_followers'],ascending=False)\n\ncluster_percents = pd.DataFrame(columns=['cluster_1','cluster_2','cluster_3'])\ncluster_percents.loc[0,'cluster_1'] = round((users_less_05k_followers.shape[0]\/users_df.shape[0])*100)\ncluster_percents.loc[0,'cluster_2'] = round((users_05k_1k_followers.shape[0]\/users_df.shape[0])*100)\ncluster_percents.loc[0,'cluster_3'] = round((users_more1k_followers.shape[0]\/users_df.shape[0])*100)\n\nbbox = dict(boxstyle =\"round\", fc =\"0.4\")\narrowprops = dict(\n    arrowstyle = \"->\",\n    connectionstyle = \"angle, angleA = 0, angleB = 90,rad = 10\")\n  \nfig, ax = plt.subplots(1,1,figsize=(10, 2.5))\n\nax.barh(cluster_percents.index, cluster_percents['cluster_1'], \n        color='#FF80FF', alpha=0.9)\nax.barh(cluster_percents.index, cluster_percents['cluster_2'], left=cluster_percents['cluster_1'], \n        color='#FF8002', alpha=0.9)\nax.barh(cluster_percents.index, cluster_percents['cluster_3'], left=cluster_percents['cluster_1']+cluster_percents['cluster_2'],\n        color='#00FFC8', alpha=0.9)\n\n\nax.set_xlim(-1.2, 140)\nax.set_ylim(-1.2, 2)\nax.set_xticks([])\nax.set_yticks([])\n\n\nfor i in cluster_percents.index:\n    ax.annotate(f\"{cluster_percents['cluster_1'][i]}%\", \n                   xy=(cluster_percents['cluster_1']\/2, i+0.1),\n                   va = 'center', ha='center',fontsize=20, fontweight='light', fontfamily='san-serif',\n                   color='white')\n\n    ax.annotate(\"Less than 500 followers\", \n                   xy=(cluster_percents['cluster_1'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=11, fontweight='light', fontfamily='san-serif',\n                   color='white')\n    \n    \nfor i in cluster_percents.index:\n  \n    ax.annotate(f\"BTW 500 and 1k followers \\n {int(cluster_percents['cluster_2'][i])}%\",\n                   xy=(cluster_percents['cluster_1'][i]+cluster_percents['cluster_2'][i]\/2, 0.3),\n                   fontsize=13, fontweight='light', fontfamily='san-serif',\n                   color='white',bbox = bbox, arrowprops = arrowprops,xytext =(60,1))\n\nfor i in cluster_percents.index:\n    \n    ax.annotate(f\"More than 1k followers \\n {int(cluster_percents['cluster_3'][i])}%\", \n                   xy=(cluster_percents['cluster_1'][i]+cluster_percents['cluster_2'][i]+cluster_percents['cluster_3'][i]\/2, -0.4),\n                   fontsize=13, fontweight='light', fontfamily='san-serif',\n                   color='white',bbox = bbox, arrowprops = arrowprops,xytext =(120, -1.2))\n\n\n\nfig.text(0.125,0.92,'Distribution of Users Based on Followers', fontfamily='san-serif',fontsize=15, fontweight='bold')  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\nax.legend().set_visible(False)\nplt.show()\n","95dc2f11":"users_1m_followers = followers_following_df.loc[(followers_following_df['num_followers']>1000000)].sort_values(['num_followers'],ascending=False)\nusers_1m_followers['name'] = users_df['name'].iloc[users_1m_followers.index]\nusers_1m_followers.reset_index(level=0,inplace=True)\n\nusers_1m_less_followers = followers_following_df.loc[(followers_following_df['num_followers']>100000) & (followers_following_df['num_followers']<1000000)].sort_values(['num_followers'],ascending=False)\nusers_1m_less_followers['name'] = users_df['name'].iloc[users_1m_less_followers.index]\nusers_1m_less_followers.reset_index(level=0,inplace=True)\nusers_1m_less_followers\n\nusers_less_lm_followers = followers_following_df.loc[(followers_following_df['num_followers']>10000) & (followers_following_df['num_followers']<100000)].sort_values(['num_followers'],ascending=False)\nusers_less_lm_followers['name'] = users_df['name'].iloc[users_less_lm_followers.index]\nusers_less_lm_followers.reset_index(level=0,inplace=True)\n\ntrace1 =go.Scatter(\n                    x = users_1m_followers.num_following,\n                    y = users_1m_followers.num_followers,\n                    mode = \"markers\",\n                    name = \"Above 1M Followers\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= users_1m_followers.name)\n\ntrace2 =go.Scatter(\n                    x = users_1m_less_followers.num_following,\n                    y = users_1m_less_followers.num_followers,\n                    mode = \"markers\",\n                    name = \"BTW 1M and 0.1M Followers\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= users_1m_less_followers.name)\n\ntrace3 =go.Scatter(\n                    x = users_less_lm_followers.num_following,\n                    y = users_less_lm_followers.num_followers,\n                    mode = \"markers\",\n                    name = \"BTW 0.1M and 10K Followers\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= users_less_lm_followers.name)\n\ndata = [trace1,trace2,trace3]\nlayout = dict(title = 'Users Seperated to Three clusters based on Number of Followers',\n              xaxis= dict(title= 'Number Following',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Number of Followers',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","d5e217ab":"photo_url_dict = {'Class_Name':['More Than 1M Followers','BTW 1M to 0.1M','BTW 0.1M to 10k']*2,\n                  'Profile_Status':['With Profile','With out Profile']*3,\n                  'Profile_Count':[users_df.loc[users_1m_followers.index]['photo_url'].nunique(),users_df.loc[users_1m_followers.index]['photo_url'].isnull().sum(),\n                                  users_df.loc[users_1m_less_followers.index]['photo_url'].nunique(),users_df.loc[users_1m_less_followers.index]['photo_url'].isnull().sum(),\n                                  users_df.loc[users_less_lm_followers.index]['photo_url'].nunique(),users_df.loc[users_less_lm_followers.index]['photo_url'].isnull().sum()]\n}\nphoto_url_df = pd.DataFrame.from_dict(photo_url_dict)\n\nfig = px.bar(photo_url_df, x=\"Class_Name\", y=\"Profile_Count\", color=\"Profile_Status\", title=\"Profile Counts\")\nfig.show()","a0797483":"from plotly.subplots import make_subplots\n\nimport plotly.graph_objects as go\n\n\npercent_class_1_with_twitter_accounts = ((users_df.loc[users_1m_followers.index]['twitter'].nunique()-1)\/(users_df.loc[users_1m_followers.index]['twitter'].shape[0]))*100\n\nclass_1_dict = {'Account':['Have Twitter Accounts','No Twitter Accounts'],\n              'Count':[percent_class_1_with_twitter_accounts,100-percent_class_1_with_twitter_accounts]\n             }\nclass_1_df = pd.DataFrame.from_dict(class_1_dict)\n\n##########\n\npercent_class_2_with_twitter_accounts = ((users_df.loc[users_1m_less_followers.index]['twitter'].nunique()-1)\/(users_df.loc[users_1m_less_followers.index]['twitter'].shape[0]))*100\n\nclass_2_dict = {'Account':['Have Twitter Accounts','No Twitter Accounts'],\n              'Count':[percent_class_2_with_twitter_accounts,100-percent_class_2_with_twitter_accounts]\n             }\nclass_2_df = pd.DataFrame.from_dict(class_2_dict)\n\n\n###########\n\npercent_class_3_with_twitter_accounts = ((users_df.loc[users_less_lm_followers.index]['twitter'].nunique()-1)\/(users_df.loc[users_less_lm_followers.index]['twitter'].shape[0]))*100\n\nclass_3_dict = {'Account':['Have Twitter Accounts','No Twitter Accounts'],\n              'Count':[percent_class_3_with_twitter_accounts,100-percent_class_3_with_twitter_accounts]\n             }\nclass_3_df = pd.DataFrame.from_dict(class_3_dict)\n\n\nfig = make_subplots(rows=2, cols=2,specs=[[{\"type\": \"pie\"},{\"type\": \"pie\"}],[{\"type\": \"pie\"},{\"type\": \"pie\"}]])\nfig.add_trace(go.Pie(labels=class_1_df.Account, values=class_1_df.Count, name=\"Class-1\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=class_2_df.Account, values=class_2_df.Count, name=\"Class-2\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=class_3_df.Account, values=class_3_df.Count, name=\"Class-3\"),\n              2, 1)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4)\n\nfig.update_layout(\n    title_text=\"Percentage Twitter Accounts\",\n    annotations=[dict(text='Cluster 1', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='Cluster 2', x=0.83, y=0.5, font_size=10, showarrow=False),\n                dict(text='Cluster 3', x=0.19, y=-0.13, font_size=10, showarrow=False)])\nfig.show()","38c20236":"percent_class_1_with_instagram_accounts = ((users_df.loc[users_1m_followers.index]['instagram'].nunique()-1)\/(users_df.loc[users_1m_followers.index]['instagram'].shape[0]))*100\n\nclass_1_dict = {'Account':['Have Instagram Accounts','No Instagram Accounts'],\n              'Count':[percent_class_1_with_instagram_accounts,100-percent_class_1_with_instagram_accounts]\n             }\nclass_1_df = pd.DataFrame.from_dict(class_1_dict)\n\n##########\n\npercent_class_2_with_instagram_accounts = ((users_df.loc[users_1m_less_followers.index]['instagram'].nunique()-1)\/(users_df.loc[users_1m_less_followers.index]['instagram'].shape[0]))*100\n\nclass_2_dict = {'Account':['Have Instagram Accounts','No Instagram Accounts'],\n              'Count':[percent_class_2_with_instagram_accounts,100-percent_class_2_with_instagram_accounts]\n             }\nclass_2_df = pd.DataFrame.from_dict(class_2_dict)\n\n\n###########\n\npercent_class_3_with_instagram_accounts = ((users_df.loc[users_less_lm_followers.index]['instagram'].nunique()-1)\/(users_df.loc[users_less_lm_followers.index]['instagram'].shape[0]))*100\n\nclass_3_dict = {'Account':['Have Instagram Accounts','No Instagram Accounts'],\n              'Count':[percent_class_3_with_instagram_accounts,100-percent_class_3_with_instagram_accounts]\n             }\nclass_3_df = pd.DataFrame.from_dict(class_3_dict)\n\n\nfig = make_subplots(rows=2, cols=2,specs=[[{\"type\": \"pie\"},{\"type\": \"pie\"}],[{\"type\": \"pie\"},{\"type\": \"pie\"}]])\nfig.add_trace(go.Pie(labels=class_1_df.Account, values=class_1_df.Count, name=\"Class-1\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=class_2_df.Account, values=class_2_df.Count, name=\"Class-2\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=class_3_df.Account, values=class_3_df.Count, name=\"Class-3\"),\n              2, 1)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4)\n\nfig.update_layout(\n    title_text=\"Percentage Instagram Accounts\",\n    annotations=[dict(text='Cluster 1', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='Cluster 2', x=0.83, y=0.5, font_size=10, showarrow=False),\n                dict(text='Cluster 3', x=0.19, y=-0.13, font_size=10, showarrow=False)])\nfig.show()","b9ca7002":"network_df_for_12492 = users_df[(users_df.invited_by_user_profile == 12492)]\nG = nx.from_pandas_edgelist(network_df_for_12492, source='invited_by_user_profile', target='user_id', edge_attr=True,)\nplt.rcParams['figure.figsize']  = (20, 20)\nplt.title('Network Diagram for User \"12492\" Who Invited Highest Number of Users', fontsize = 30)\n\nlayout = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, layout, node_size = 2000, node_color = '#0B3D91')\nnx.draw_networkx_edges(G, layout, width = 1, alpha = 1, edge_color = '#FF80FF')\nnx.draw_networkx_labels(G, layout, font_size = 10, font_color='white', font_weight='bold')\n\nplt.grid()\nplt.axis('off')\nplt.show()","4818093a":"network_df_for_402821 = users_df[(users_df.invited_by_user_profile == 402821)]\nG = nx.from_pandas_edgelist(network_df_for_402821, source='invited_by_user_profile', target='user_id', edge_attr=True,)\nplt.rcParams['figure.figsize']  = (20, 20)\n# plt.style.use('dark_background')\nplt.title('Network Diagram for User \"402821\" Who Invited Second Highest Number of Users', fontsize = 30)\n\nlayout = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, layout, node_size = 2000, node_color = '#0B3D91')\nnx.draw_networkx_edges(G, layout, width = 1, alpha = 1, edge_color = '#FF8002')\nnx.draw_networkx_labels(G, layout, font_size = 10, font_color='white', font_weight='bold')\n\nplt.grid()\nplt.axis('off')\nplt.show()","353941e6":"network_df_for_48443 = users_df[(users_df.invited_by_user_profile == 48443)]\nnetwork_df_for_48443 = network_df_for_48443.reset_index()\nfor i in range(network_df_for_48443.shape[0]):\n    network_df_for_48443 = network_df_for_48443.append(users_df[(users_df.invited_by_user_profile == network_df_for_48443['user_id'].iloc[i])])\nG = nx.from_pandas_edgelist(network_df_for_48443, source='invited_by_user_profile', target='user_id', edge_attr=True,)\nplt.rcParams['figure.figsize']  = (20, 20)\n# plt.style.use('dark_background')\nplt.title('Network Diagram for User \"48443\"', fontsize = 30)\n\nlayout = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, layout, node_size = 2000, node_color = '#0B3D91')\nnx.draw_networkx_edges(G, layout, width = 1, alpha = 1, edge_color = '#6D01FF')\nnx.draw_networkx_labels(G, layout, font_size = 10, font_color='white', font_weight='bold')\n\nplt.grid()\nplt.axis('off')\nplt.show()","7ba45019":"Users in the clusters with more than 100k appears to have a profile picture where as those in 100k to 10k cluster do not appear to have a profile pictuer. **This might suggest that cluster 1 and 2 users have complete profiles.**","9b7556ab":"Above plot show distribution of each cluster againt the number of users they are following. **James Andrews (1.4M Followers, 2500 Following)** has Highest number of follwers and also following more users.","7be4c050":"Similar observation can be made about having twitter and instagram profiles. Users appear to have more twitter profiles linked than instagram. This is evident from first set of pie charts where cluster 1 and 2 users have more than **80% of twitter profiles** linked where as **instagram** links are around **75%**.\n\nAnother trend is between clusters where **highest follwers clusters have twitter and instagram accounts linked** where as lower cluster do not.","ed1157da":"<center><b>** updated with networkx plots **<\/b><\/center>","ea3fbb18":"These plots are only a fraction of the whole network. Similar plot can be made for the entire data.","344e016a":"<center><b>Clubhouse (joinclubhouse.com)<\/b> is a social networking app that lets people gather in audio chat rooms to discuss various topics. Currently only the iOS version is available and membership is by invitation only.<\/center>","6d237c84":"People with no inviter is the highest with 3214 users joined without an inviter. **David Castain** invited most (**593**) number of users.","004f819e":"<center><h2><b>Thanks for reading. Please give your suggestions and comments.<\/b><\/h2><\/center>","0052243f":"> **Network Diagrams**","119f45d3":"Lets see the distribution of users based on followers","10baaea7":"Majority of the data **(95%)** has users with followers **less than 500**. Where as users with **500-1k followers** constitute **3%** and more than **1k followers** is **2%**.\n\nMy analysis in this notebook is only in that **2% users**. Now lets look into this cluster and see the distribution.","32e17cb1":"This dataset contains **1300515** user profiles in clubhouse. Each row shows a user's profile information, including:\n\n>1. **user_id**\n>2. **name**\n>3. **photo_url**\n>4. **username**\n>5. **twitter**\n>6. **Instagram**\n>7. **num_followers**\n>8. **num_following**\n>9. **time_created**\n> 10. **invitedbyuser_profile**\n\nIn this notebook I have clustered users into **3 clusters** based on number of followers for ease of analysis:\n> 1. **More than 1 Million Followers - Cluster 1**\n> 2. **Between 1 Million and 100k Followers - Cluster 2**\n> 3. **Between 100k and 10k Followers - Cluster 3**\n\nI tried to investigae the following questions:\n> 1. **Number of new users created each day.**\n> 2. **Top 20 Users who have invited the most other users.**\n> 3. Profile Completeness of users based on cluster:\n>    * **Do users with most followers have profile pictures?**\n>    * **Do users with most followers have other social media accounts like twitter and instagram?**\n> 4. **Network Diagram for top two users who invited highest number of other users.**\n>5. **Network Diagram of a randomly selected user.**","9da78a63":"<center><h2><b>ClubHouse Data - Plotly EDA<\/b><h2><\/center>\n<center><img src =\"https:\/\/techweez.com\/wp-content\/uploads\/2021\/01\/clubhouse.png\" width=\"300\"><\/center>","01b2b46a":"There is an increase in new users created between November 2020 and January 2021. The maximum number of users created in a day is **73.862K on Dec 30 2020.** (could be because of new year?)."}}