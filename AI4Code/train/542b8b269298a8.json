{"cell_type":{"e19c137b":"code","b713d46e":"code","e21390cd":"code","bee64814":"code","9dfc7bb9":"code","26f4c863":"code","55c0f39d":"code","0cd7ea97":"code","41f19b8a":"code","47253bbb":"code","7fddae3d":"code","419c083e":"code","23a36011":"code","741b23f7":"code","ee993569":"code","27e5e717":"code","22793106":"code","a04cc213":"code","c25321f3":"code","bde4bc2c":"code","2d372247":"markdown","d05e47b4":"markdown","be8ed645":"markdown","4c270739":"markdown","c24b2cae":"markdown","acf8d3b3":"markdown","9ee2e66c":"markdown","d0e0f674":"markdown","180eb8a7":"markdown","3badc3f3":"markdown","ed9c585f":"markdown","31eee463":"markdown","2563fb55":"markdown","41dd2edc":"markdown","f3d61207":"markdown","85c43fa4":"markdown"},"source":{"e19c137b":"pip install chart-studio","b713d46e":"# importing libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport chart_studio.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport os\nprint(os.listdir(\"..\/input\"))\n","e21390cd":"data = pd.read_csv('..\/input\/master.csv')","bee64814":"data.head()","9dfc7bb9":"data.columns","26f4c863":"#I want to change the columns names for making it easier to code and understand.\ndata = data.rename(columns={'country':'Country','year':'Year','sex':'Gender','age':'Age',\n                            'suicides_no':'SuicidesNo','population':'Population',\n                            'suicides\/100k pop':'Suicides_100kPop','country-year':'CountryYear',\n                            'HDI for year':'HDIForYear',' gdp_for_year ($) ':'GdpForYearDollar',\n                            'gdp_per_capita ($)':'GdpPerCapitalDollar','generation':'Generation'})","55c0f39d":"data.info()","0cd7ea97":"data.GdpForYearDollar = data.GdpForYearDollar.str.replace(',','').astype('int64')","41f19b8a":"data.isnull().any()","47253bbb":"data.sample(5)","7fddae3d":"yearList = data.Year.unique()\nyearList.sort()\nsuicidesNumberPerYear = []\nfor i in yearList:\n    total = sum(data.SuicidesNo[data.Year == i])\n    suicidesNumberPerYear.append(total)\n    \ntotalYearData = pd.DataFrame({\"Year\" : yearList, \"NumberofSuicides\" : suicidesNumberPerYear })\ntotalYearData.drop([31], axis = 0, inplace = True)\n\nsuicidesNumberPerYearper100k = []\nfor i in yearList:\n    total = sum(data.Suicides_100kPop[data.Year == i])\n    suicidesNumberPerYearper100k.append(total)\n    \n\ntotalYearData2 = pd.DataFrame({\"Year\" : yearList, \"NumberofSuicidesPer100k\" : suicidesNumberPerYearper100k })\ntotalYearData2.drop([31], axis = 0, inplace = True)\n\n\n\nf, (ax1,ax2) = plt.subplots(1,2,figsize = (20, 8))\nsns.pointplot(x = totalYearData.Year, y = totalYearData.NumberofSuicides, color = \"red\", ax = ax1)\nsns.pointplot(x = totalYearData2.Year, y = totalYearData2.NumberofSuicidesPer100k, color = \"green\", ax = ax2)\nplt.subplot(ax1)\nplt.xticks(rotation = 45)\nplt.grid()\nplt.subplot(ax2)\nplt.xticks(rotation = 45)\nplt.grid()\nax1.set_title(\"Number of Suicides per Year \")\nax2.set_title(\"Number of Suicides per Year (by pop) \")\nplt.ylabel(\"\")\nplt.xlabel('Years')\nplt.show()","419c083e":"gender = data.Gender.unique()\nnumSuicidesGender = []\n\nfor i in gender:\n    total = sum(data.SuicidesNo[data.Gender == i])\n    numSuicidesGender.append(total)\n    \nfig = go.Figure(data = [go.Pie(labels = list(gender),\n                               values = numSuicidesGender)],\n                layout = go.Layout(title = \"Suicide Gender Rates\"))\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=13, \n                  marker=dict(colors=[\"mediumturquoise\",\"pink\"],line=dict(color='#000000', width=1)))\n\n\nfig.show()","23a36011":"generations = data.Generation.unique()\nnumSuicidesGeneration = []\n\nfor i in generations:\n    total = sum(data.SuicidesNo[data.Generation == i])\n    numSuicidesGeneration.append(total)\n    \n    \ndata1 = [go.Bar(\n               x = generations,\n               y = numSuicidesGeneration,\n               name = \"Number of Suicides\",\n               marker = dict(color = \"rgba(116,173,209,0.8)\",\n                             line=dict(color='rgb(0,0,0)',width=1.0)))]\n               \n\nlayout = go.Layout(xaxis= dict(title= 'Generations',ticklen= 5,zeroline= False))\n\nfig = go.Figure(data = data1, layout = layout)\n\niplot(fig)","741b23f7":"ageList = ['5-14 years', '15-24 years', '25-34 years', '35-54 years', '55-74 years','75+ years']           \nsuicidesNoAge = []\n\nfor i in ageList:\n    total = sum(data.SuicidesNo[data.Age == i])\n    suicidesNoAge.append(total)\n    \ndata2 = [go.Pie(values = suicidesNoAge,\n               labels = ageList,\n               hole = .3\n                )]\nlayout = go.Layout( title = go.layout.Title(\n                    text=\"Suicide by Ages\",\n                    x=0.47))\n\nfig = go.Figure(data = data2, layout = layout)\n\niplot(fig)","ee993569":"suicidesNoAgeMale = []\nsuicidesNoAgeFemale = []\nfor i in ageList:\n    total = sum(data.SuicidesNo[data.Gender == \"male\"][data.Age == i])\n    suicidesNoAgeMale.append(total)\n    \nfor i in ageList:\n    total = sum(data.SuicidesNo[data.Gender == \"female\"][data.Age == i])\n    suicidesNoAgeFemale.append(total)\n\ntrace1 = go.Bar(\n                x = ageList,\n                y = suicidesNoAgeMale,\n                name = \"Male\")\n\ntrace2 = go.Bar(\n                x = ageList,\n                y = suicidesNoAgeFemale,\n                name = \"Female\",\n                xaxis = \"x2\",\n                yaxis = \"y2\")\n\ndata3 = [trace1, trace2]\n\nlayout = dict(  xaxis=dict(domain=[0, 0.5]),\n                yaxis=dict(domain=[0, 1]),\n                xaxis2=dict(domain=[0.5, 1]),\n                yaxis2=dict(domain=[0, 1]),\n                title = \"Suicide by Ages\")\n                 \n\nfig = dict(data = data3, layout = layout) \n\niplot(fig)","27e5e717":"countryList = data.Country.unique()\nsuicidesNoCountry = []\nfor i in countryList:\n    total = sum(data.SuicidesNo[data.Country == i])\n    suicidesNoCountry.append(total)\n    \ndfCountry = pd.DataFrame({\"Country\" : countryList, \"noSuicides\" : suicidesNoCountry})\nnewIndex = (dfCountry.noSuicides.sort_values(ascending = False)).index.values\nsorted_dfCountry = dfCountry.reindex(newIndex)\ntopCountry = sorted_dfCountry.iloc[:10,:]\n    \ndata4 = [go.Bar(x = topCountry.Country,\n               y = topCountry.noSuicides,\n               text = topCountry.Country,\n               marker = dict(color = 'rgba(100, 200, 200, 0.6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5))\n              )]\n\nlayout = go.Layout(title = \"Top 10 countries\",\n                   hoverlabel = dict(bgcolor = \"white\"))\n\nfig = go.Figure(data = data4, layout = layout)\n\niplot(fig)","22793106":"Suicides_100kPopCountry = []\n\nfor i in countryList:\n    total = sum(data.Suicides_100kPop[data.Country == i])\n    Suicides_100kPopCountry.append(total)\n    \ndfCountry2 = pd.DataFrame({\"Country\" : countryList, \"Suicides100k\" : Suicides_100kPopCountry})\nnewIndex2 = (dfCountry2.Suicides100k.sort_values(ascending = False)).index.values\nsorted_dfCountry2 = dfCountry2.reindex(newIndex2)\ntopCountry2 = sorted_dfCountry2.iloc[:10,:]\n\ndata5 = [go.Bar(x = topCountry2.Country,\n               y = topCountry2.Suicides100k,\n               text = topCountry2.Country,\n               marker = dict(color = 'rgba(16, 112, 2, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5))\n              )]\n\nlayout = go.Layout(title = \"Top 10 countries by population\",\n                   hoverlabel = dict(bgcolor = \"rgba(80, 26, 80, 0.7)\"))\n\nfig = go.Figure(data = data5, layout = layout)\n\niplot(fig)","a04cc213":"suicidesCountryMale = []\nsuicidesCountryFemale = []\n\nfor i in countryList:\n    total1 = sum(data.SuicidesNo[data.Gender == \"male\"][data.Country == i]) \n    total2 = sum(data.SuicidesNo[data.Gender == \"female\"][data.Country == i])\n    try :\n        mean1 = int((total1 \/ (total1 + total2)) * 100)\n    except:\n        pass\n    try : \n        mean2 = int((total2 \/ (total1 + total2)) * 100)\n    except:\n        pass\n    suicidesCountryMale.append(mean1)\n    suicidesCountryFemale.append(mean2)\n\n    \ndfCountryGender = pd.DataFrame({\"Country\" : countryList, \"Male\" : suicidesCountryMale , \"Female\" : suicidesCountryFemale})\nnewIndex3 = (dfCountryGender.Male.sort_values(ascending = False)).index.values\nsorted_dfCountryGender = dfCountryGender.reindex(newIndex3)\ntopCountryGender = sorted_dfCountryGender.iloc[:30,:]\n\nnewIndex4 = (dfCountryGender.Female.sort_values(ascending = False)).index.values\nsorted_dfCountryGender2 = dfCountryGender.reindex(newIndex4)\ntopCountryGender2 = sorted_dfCountryGender2.iloc[:30,:]\n\n    \ntrace1 = {\n  'x': topCountryGender.Male, \n  'y': topCountryGender.Country,\n  'name': 'Male',\n  'type': 'bar',\n  'orientation' : 'h',\n  'marker' : {'color' : 'rgba(10,10,200,0.7)'}\n}\ntrace2 = {\n  'x': topCountryGender.Female,\n  'y': topCountryGender.Country,\n  'name': 'Female',\n  'type': 'bar',\n  'orientation' : 'h',\n  'marker' : {'color' : 'rgba(252, 185, 65, 0.8)'}\n}\ntrace3 = {\n  'x': topCountryGender2.Male,\n  'y': topCountryGender2.Country,\n  'name': 'Male',\n  'type': 'bar',\n  'orientation' : 'h',\n  'xaxis' : 'x2',\n  'yaxis' : 'y2',\n  'marker' : {'color' : 'rgba(10,10,200,0.7)'}\n}\ntrace4 = {\n  'x': topCountryGender2.Female,\n  'y': topCountryGender2.Country,  \n  'name': 'Female',\n  'type': 'bar',\n  'orientation' : 'h', \n  'xaxis' : 'x2',\n  'yaxis' : 'y2',\n  'marker' : {'color' : 'rgba(252, 185, 65, 0.8)'}\n}\n\ndata6 = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(title = \"Number of suicides by countries comparing gender\",\n              xaxis = dict(showgrid = False,\n              domain = [0.08, 0.49]),\n                   \n              yaxis = dict(showgrid = False,\n              domain = [0, 1]),\n                   \n              xaxis2 = dict(showgrid = False,\n              domain = [0.59, 1]),\n                  \n              yaxis2 = dict(showticklabels = True,showgrid = False, anchor = \"x2\",\n              domain = [0, 1]),\n              barmode = \"relative\",\n              height = 700,\n              width = 1050)\n              \n\nfig = dict(data = data6, layout = layout)\n\niplot(fig)","c25321f3":"f,ax = plt.subplots(figsize=(12, 6))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","bde4bc2c":"suicides100kpop = []\nsuicidesGDP = []\nfor i in countryList:\n    total = int(sum(data.Suicides_100kPop[data.Country == i]) \/ len(data.Suicides_100kPop[data.Country == i]))\n    suicides100kpop.append(total)\n    \nfor i in countryList:\n    total = sum(data.GdpPerCapitalDollar[data.Country == i])\n    mean = int(total \/ len(data.GdpPerCapitalDollar[data.Country == i]))\n    suicidesGDP.append(mean)\n    \ndfCountryGDP = dfCountry.copy()\ndfCountryGDP[\"GDP\"] = suicidesGDP\ndfCountryGDP['Suicides_100kPop'] = suicides100kpop \n\ndata7 = [go.Scatter(\n                    x = dfCountryGDP.GDP,\n                    y = dfCountryGDP.Suicides_100kPop,\n                    mode = \"markers\",\n                    name = \"GDP\",\n                    marker = dict(color = 'rgba(83, 51, 237, 1)'),\n                    text = [dfCountryGDP.GDP,dfCountryGDP.noSuicides])]\n\nlayout = dict(title = 'Correlation between GDP per capital and suicides',\n              xaxis = dict(title= 'GDP($)',ticklen= 5,zeroline= False),\n              yaxis = dict(title= 'Suicides per 100k',ticklen= 5,zeroline= False),\n              width = 800)\n              \nfig = go.Figure(data = data7, layout = layout)\niplot(fig)","2d372247":"<a id=\"4\"><\/a> <br>\n* Next, **gender ratio** of total number of suicides","d05e47b4":"# Introduction\n\nWelcome to my first work that is about global rates of suicides. \n \nIn this kernel, I will analyze suicide rates data and try to visualize some data using seaborn and plotly.\n\nBecause of my first experience with data visualization, I would appreciate your feedbacks.","be8ed645":"As you can see above there are missing values in HDIForYear column.","4c270739":"<a id=\"5\"><\/a> <br>\n* Suicide rates by **generations**\n\n    **Generations**:\n\n    1. G.I. Generation -> 1900 - 1924\n    1. Silent -> 1925 - 1942\n    1. Boomers -> 1946 - 1964\n    1. Generation X -> 1965 - 1980\n    1. Millenials -> 1981 - 2000\n    1. Generation Z -> 2001 - 2010","c24b2cae":"<a id=\"3\"><\/a> <br>\n* First, examine the number of suicides and associated with population ratio **per year **","acf8d3b3":"<a id=\"1\"><\/a> <br>\n# Importing, Tidying and getting knowledge about data","9ee2e66c":"<a id=\"2\"><\/a> <br>\n# Visualization\n\n","d0e0f674":"Now we are good to visualize the data. ","180eb8a7":"<a id=\"6\"><\/a> <br>\n* Suicide rates by **age** intervals","3badc3f3":"\n\n**Content** : \n1. [Importing, Tidying and getting knowledge about data](#1)\n1. [Visualization](#2):\n    1. [Per year](#3)\n    1. [By gender](#4)\n    1. [By generations](#5)   \n    1. [By age](#6)\n    1. [Top 10 countries](#7)   \n    1. [Gender ratios by countries](#8)    \n    1. [Correlations](#9)\n    1. [Correlation between GDP per capital and suicides](#10)\n1. [Conclusion](#11)    ","ed9c585f":"<a id=\"9\"><\/a> <br>\n* **Corrrelations**","31eee463":"<a id=\"7\"><\/a> <br>\n* Countries having the highest rates of suicides ","2563fb55":"<a id=\"10\"><\/a> <br>\n* **Correlation** between GDP per capital and suicides","41dd2edc":"<a id=\"8\"><\/a> <br>\n* Gender ratios of suicides by countries","f3d61207":"<a id=\"11\"><\/a> <br>\n# Conclusion\n\n* To conclude, I tried to analze and visualize the data.\n\n* I would be very grateful for your comments and feedbacks. Because I am new at this tech and I want to be more qualified with it. So I'm open for advices, just leave a comment \n\n* Almost forgot, if you like it consider the upvote button :)","85c43fa4":"First, we will look at the data, try to tidy a bit and get some information about it."}}