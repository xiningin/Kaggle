{"cell_type":{"19f584bb":"code","ca68d27a":"code","69edff91":"code","1ed9b396":"code","005e479b":"code","f59a1004":"code","52d1992d":"code","32403980":"code","ea7c0d45":"code","eda03477":"code","429d72a9":"code","5807648b":"code","2f345cb9":"code","6e8387ac":"code","a3ed3e5d":"code","10086b6d":"code","7a42bfb6":"code","b438b990":"code","09e772f1":"code","a8b1ca56":"code","1e037951":"code","aee8f65e":"code","72bfeffd":"code","32aee922":"code","727e84db":"code","dbd1f6f3":"code","c887b027":"markdown","54f11c24":"markdown","084cb3c6":"markdown","3cc8a393":"markdown","f7c65007":"markdown","592adf68":"markdown","43dffdf8":"markdown","6bc9522a":"markdown","63ded12a":"markdown","5398e204":"markdown","864ae967":"markdown","4a5fb662":"markdown","15a1ec8c":"markdown","135f20eb":"markdown","6baf774c":"markdown","43f60db2":"markdown","452d440a":"markdown","bb0f21ec":"markdown","93f95014":"markdown","251bc0b2":"markdown"},"source":{"19f584bb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca68d27a":"df = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv', low_memory=False) # Training Data\ntest_df = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv') # Testing Data","69edff91":"df.head() # Viewing first 5 rows of training data","1ed9b396":"df = df.drop(['id', 'Data As Of', 'End Date', 'Group', 'Year', 'Week-Ending Date', 'HHS Region', 'Total Deaths', 'Footnote'], axis=1) # Dropping all unnecessary data\ndf.head() # Viewing first 5 rows of cleaned data","005e479b":"df['Month'] = pd.DatetimeIndex(df['Start Date']).month # Generating new functional column to better represent 'Start Date' data\ndf.head() # Viewing first 5 rows of with newly engineered data","f59a1004":"df.isnull().sum() # Checking which columns have null values","52d1992d":"df.shape ","32403980":"df.describe()","ea7c0d45":"print(df.corr())\nsns.heatmap(df.corr(), annot=True, linewidths=.7, cmap='coolwarm')","eda03477":"df.info()","429d72a9":"values = {'MMWR Week': np.mean(df['MMWR Week']), 'COVID-19 Deaths': np.mean(df['COVID-19 Deaths'])}\ndf = df.fillna(value=values)\ndf.isnull().sum() # Ensuring all null values have been replaced","5807648b":"ax = sns.barplot(x=\"COVID-19 Deaths\", y=\"Age Group\", data=df)","2f345cb9":"ax = sns.barplot(x=\"COVID-19 Deaths\", y=\"Race and Hispanic Origin Group\", data=df)","6e8387ac":"ax = sns.lineplot(x=\"Month\", y=\"COVID-19 Deaths\", data=df)","a3ed3e5d":"ax = sns.lineplot(x=\"MMWR Week\", y=\"COVID-19 Deaths\", data=df)","10086b6d":"df_dummies = pd.get_dummies(df) # Generating dummy values for each object\nprint(df_dummies.head()) # Viewing first 5 rows of each dummy DataFrame\ndf = df.drop(['Start Date', 'Race and Hispanic Origin Group', 'Age Group'], axis=1) # Dropping object columns","7a42bfb6":"X = df.drop('COVID-19 Deaths', axis=1) # Assigning all columns except COVID-19 Deaths to 'X'\ny = df['COVID-19 Deaths'].values # Assigning only COVID-19 Deaths column to 'y'\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, shuffle=False, random_state=1)","b438b990":"model_lin = LinearRegression() # Creating Linear Regression model\nmodel_lin.fit(X_train, y_train) # Fitting training data to model\npredictions_lin = model_lin.predict(X_test) # Predicting test data\nscore_lin = r2_score(y_test, predictions_lin) # Scoring predictions against test data\nprint(score_lin) # Display score","09e772f1":"model_ridge = Ridge() # Creating Ridge Regression model\nmodel_ridge.fit(X_train, y_train) # Fitting training data to model\npredictions_ridge = model_ridge.predict(X_test) # Predicting test data\nscore_ridge = r2_score(y_test, predictions_ridge) # Scoring predictions against test data\nprint(score_ridge) # Display score","a8b1ca56":"model_lasso = Lasso()  # Creating Lasso Regression model\nmodel_lasso.fit(X_train, y_train) # Fitting training data to model\npredictions_lasso = model_lasso.predict(X_test) # Predicting test data\nscore_lasso = r2_score(y_test, predictions_lasso) # Scoring predictions against test data\nprint(score_lasso) # Display score","1e037951":"model_elastic = ElasticNet() # Creating Elastic Net Regression model\nmodel_elastic.fit(X_train, y_train) # Fitting training data to model\npredictions_elastic = model_elastic.predict(X_test) # Predicting test data\nscore_elastic = r2_score(y_test, predictions_elastic) # Scoring predictions against test data\nprint(score_elastic) # Display score","aee8f65e":"df_lin = pd.DataFrame(predictions_lin) # Creating DataFrame of Ordinary Least Squares (Linear) Regression predictions\nprint(df_lin.describe()) # Display summary statistics for this distribution\nplt.scatter(y_test, predictions_lin) # Graph distribution of validation scores","72bfeffd":"df_ridge = pd.DataFrame(predictions_ridge) # Creating DataFrame of Ridge Regression predictions\nprint(df_ridge.describe()) # Display summary statistics for this distribution\nplt.scatter(y_test, predictions_ridge) # Graph distribution of validation scores","32aee922":"df_lasso = pd.DataFrame(predictions_lasso) # Creating DataFrame of Lasso Regression predictions\nprint(df_lasso.describe()) # Display summary statistics for this distribution\nplt.scatter(y_test, predictions_lasso) # Graph distribution of validation scores","727e84db":"df_elastic = pd.DataFrame(predictions_elastic) # Creating DataFrame of Elastic Regression predictions\nprint(df_elastic.describe()) # Display summary statistics for this distribution\nplt.scatter(y_test, predictions_elastic) # Graph distribution of validation scores","dbd1f6f3":"output = pd.DataFrame({'id': test_df['id'], 'COVID-19 Deaths': predictions_lin[:1152]}) # Creating output DataFrame\noutput.to_csv('submission.csv', index=False) # Saving output DataFrame as CSV\nprint('Your submission was successfully saved') # Asserting submission was successfully saved","c887b027":"# Viewing and cleaning imported training and testing data (EDA)","54f11c24":"Before we begin filling null values, we should assess each column visually to determine whether or not it is significant, or duplicate information. So, we will take a closer look at the below DataFrame head.","084cb3c6":"Now that we have only the features we are interested in, we will check for missing values.","3cc8a393":"According to the above heatmap, it is apparent that there is a strong correlation between MMWR week and COVID-19 deaths. ","f7c65007":"We will also observe correlational values and plot them.","592adf68":"As there is missing values found in only the 'MMWR Week' and 'COVID-19 Deaths' columns, we will fill each missing value with its column's respective mean value. ","43dffdf8":"# Evaluating Models Against Test Data","6bc9522a":"Elastic Net Regression","63ded12a":"# Importing all necessary packages","5398e204":"# Generating Models and Fitting Data to those models","864ae967":"# Running train_test_split to split Training Data into random train and test subsets","4a5fb662":"In order to choose a reasonable method for imputing missing values, we will count how many rows we have in our DataFrame. ","15a1ec8c":"Lasso Regression","135f20eb":"# Saving best model as 'submission.csv'","6baf774c":"# Reading data","43f60db2":"We will remove the following columns right off the bat as they are purely redundant:\n* 'id,' 'Data As Of,' 'Group' as the row index column contains the same information\n* 'End Date,' 'Year,' and 'Week-Ending Date' as is directly correlates to 'Start Date,' which doesn't give us any valuable insight\n* 'HHS Region' is irrelevant as we are not concerned with regional deaths but deaths in the US as a whole\n* 'Total Deaths' is also irrelevant as we are only concerned with 'COVID-19 Deaths'\n* 'Footnote' is largely blank and is extraneous information","452d440a":"# Feature Engineering (and more EDA)\nWe will engineer a new feature to more easily work with the date of each death--a 'month' column. ","bb0f21ec":"Ridge Regression","93f95014":"We will also observe basic statistics of our data.","251bc0b2":"Ordinary Least Squares model (Linear Regression)"}}