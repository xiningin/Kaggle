{"cell_type":{"d9772963":"code","2959df83":"code","f1ceacbe":"code","49f2b0a6":"code","cc08e3c4":"code","60802860":"code","5c03a2fb":"code","c98f27dd":"code","3eb3d2e6":"code","4a0c9053":"code","104b4519":"code","708a9079":"code","403acf7c":"markdown","afd710cd":"markdown","8adcd3fb":"markdown","f2336c41":"markdown","dc7c047f":"markdown","e488b1b2":"markdown"},"source":{"d9772963":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #plotting\nimport seaborn as sns #data visuilaziton \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2959df83":"dataFrame = pd.read_csv('\/kaggle\/input\/world-happiness\/2018.csv')\ndataFrame.columns = dataFrame.columns.str.replace(' ', '_')#It's so hard to work with column names with spaces, it replaces them with \"_\"\ndataFrame.head()\n","f1ceacbe":"dataFrame.info()","49f2b0a6":"f,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(dataFrame.corr(), annot = True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()","cc08e3c4":"temp = dataFrame[['GDP per capita']]\ndataFrame.Generosity.plot(kind = 'line', color = 'b',label = 'Generosity',linewidth=1,alpha = 0.7,grid = True,linestyle = '-')\nplt.plot(temp,color= 'r', label = 'GDP per capita', linewidth=1, alpha=0.7,linestyle = '-')\n#plt.plot(GDP_per_capita)\nplt.legend(loc='upper right')\nplt.title('Line Plot')\nplt.show()","60802860":"dataFrame.plot(kind='scatter', x='GDP per capita', y='Score',alpha = 0.5,color = 'red')\nplt.show()","5c03a2fb":"temp1 = dataFrame[['Social support']]\nplt.figure(figsize=(12,12))\nplt.hist(temp1, bins=10, linewidth=2)\nplt.show()","c98f27dd":"threshold = sum(dataFrame.Social_support)\/len(dataFrame.Social_support)\nprint(threshold)\ndataFrame[\"Social_support_level\"] = [\"high\" if i>threshold else \"low\" for i in dataFrame.Social_support]\ndataFrame.loc[:10,[\"Social_support_level\",\"Social_support\"]]","3eb3d2e6":"dataFrame.info()","4a0c9053":"dataFrame.Perceptions_of_corruption.value_counts(dropna=False)","104b4519":"dataFrame.describe()","708a9079":"dataFrame.boxplot(column='GDP_per_capita')\nplt.show()","403acf7c":"**Let's take a look at GEnerosity and GDP per Capita's of countrys.**\n* **GDP per capita has a very large range.**","afd710cd":"**And let's check the info about dataset, so learn which variables we're gonna work with.**","8adcd3fb":"**Now it's time to look correlation with another method. We will use scatter plot to see GDP per capita and overall hapiness score**\n* **It's easy to say there's an almost exponential correlation between GDP per capita and score.**","f2336c41":"**And it's also important to learn density of data values. Let's take a look at social support density with histogram.**\n* **Looks like there are more countrys with higher social support than low social supporters.**","dc7c047f":"**At the beginnig of project, take a first look at data. It's useful to get a preview.**","e488b1b2":"**Now let's check the correlations heat map, it's so easy to see specifically things about values. **\n* ** Healthy life expectancy is positively correlated with social support.**\n* **GDP per capita is positively correlated with social support. **\n* **Looks like there's no negative correlationship between any parameters.**"}}