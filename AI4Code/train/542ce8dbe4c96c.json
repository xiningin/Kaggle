{"cell_type":{"78d9f3fb":"code","e597127f":"code","1f746b32":"code","fd725539":"code","b6b7e661":"code","123ec819":"code","3846c927":"code","e0ffd3c2":"code","098cde64":"code","71b42cd6":"code","dd9411cd":"code","fa682aeb":"code","3b56dbcb":"code","18861582":"code","9c961074":"code","d2236d43":"code","4f56eba9":"code","ad201b51":"code","c89cb920":"code","bfa2b4df":"code","2eba4045":"code","a99ab2aa":"code","88f1a9ce":"code","ca221cc2":"code","c3f3925d":"code","9d004435":"code","a5d55de4":"code","fc42ea22":"code","c395e10a":"code","2a43cfe8":"code","645638ab":"code","b0ae669f":"code","4df7c93b":"code","51b89c21":"code","59384b69":"code","6bc2fd85":"code","8c623753":"markdown","72eebd28":"markdown","1b72bbb7":"markdown","91e8040a":"markdown","e8b63fa2":"markdown","83e09583":"markdown","396ca797":"markdown","5c2c14e8":"markdown"},"source":{"78d9f3fb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e597127f":"counties = pd.read_csv(\"..\/input\/counties.csv\")\ntest_data =pd.read_csv('..\/input\/test.csv')","1f746b32":"counties.head()","fd725539":"from pandas import DataFrame\n#Checking for missing values\n\nnumerical_features = counties.select_dtypes(include=[np.number]).columns.tolist()\n\nMissing_values=DataFrame(counties).isnull().sum().sort_values(ascending=False)\nprint(\"Missing_values\")\nprint(Missing_values)\n\n#Imputing missing values with median\n\nfor column in numerical_features:\n    counties[column]=counties[column].fillna(counties[column].median())\n\n#Checking for missing values\n\nMissing_values_new=DataFrame(counties).isnull().sum().sort_values(ascending=False)\nprint(\"Missing_values after imputation\")\nprint(Missing_values_new)","b6b7e661":"counties.describe()","123ec819":"# Data Cleaning for test Data\n\nfrom pandas import DataFrame\n#Checking for missing values\n\nnumerical_features = test_data.select_dtypes(include=[np.number]).columns.tolist()\n\nMissing_values=DataFrame(test_data).isnull().sum().sort_values(ascending=False)\nprint(\"Missing_values\")\nprint(Missing_values)\n\n#Imputing missing values with median\n\nfor column in numerical_features:\n    test_data[column]=test_data[column].fillna(test_data[column].median())\n\n#Checking for missing values\n\nMissing_values_new=DataFrame(test_data).isnull().sum().sort_values(ascending=False)\nprint(\"Missing_values after imputation\")\nprint(Missing_values_new)","3846c927":"test_data.describe()","e0ffd3c2":"Access = counties[['LACCESS_POP10','LACCESS_LOWI10','LACCESS_HHNV10','is_store_decline']]\nAccess.head()","098cde64":"#Check Correlation matrix\nsns.set(style=\"white\")\n\ncorr = Access.corr()\n\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(7, 7))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, vmax=.3, center=0,annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","71b42cd6":"counties[['LACCESS_POP10','LACCESS_LOWI10','LACCESS_HHNV10']].hist(figsize=(16, 10), bins=50, xlabelsize=8, ylabelsize=8);","dd9411cd":"stores = counties[['GROC09','GROCPTH09','SUPERC09','SUPERCPTH09','CONVS09','CONVSPTH09','SPECS09','SPECSPTH09','SNAPS12','SNAPSPTH12','is_store_decline']]","fa682aeb":"idx = pd.IndexSlice\nmask = stores.loc[:,'CONVS09']==0\nstores[mask] = 1","3b56dbcb":"stores[stores['CONVS09']==0]","18861582":"#stores['Stores_with_Snap_benefits'] = stores['SNAPS12'] \/ stores['GROC09']\n#stores['SPECS09_with_Snap_benefits'] = stores['SNAPS12'] \/ stores['SPECS09']\nstores['CONVS09_with_Snap_benefits'] = stores['SNAPS12'] \/ stores['CONVS09']\n#stores['SUPERC09_with_Snap_benefits'] = stores['SNAPS12'] \/ stores['SUPERC09']\n#stores['stores_with_grocery'] = stores['GROC09'] + stores['CONVS09']\nstores['total_stores_snap_benefits'] = stores['SNAPS12'] \/ (stores['GROC09']+ stores['CONVS09']+ stores['SPECS09'])\nstores.head()","9c961074":"#Check Correlation matrix\nsns.set(style=\"white\")\n\ncorr = stores.corr()\n\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 15))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, vmax=.3, center=0,annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","d2236d43":"counties[['GROC09','GROCPTH09','SUPERC09','SUPERCPTH09','CONVS09','CONVSPTH09','SPECS09','SPECSPTH09','SNAPS12','SNAPSPTH12','is_store_decline']].hist(figsize=(16, 10), bins=50, xlabelsize=8, ylabelsize=8);","4f56eba9":"health=counties[['PCT_DIABETES_ADULTS08','PCT_OBESE_ADULTS08','RECFAC09','is_store_decline']]\nhealth.head()","ad201b51":"#Check Correlation matrix\nsns.set(style=\"white\")\n\ncorr = health.corr()\n\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(6, 6))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, vmax=.3, center=0,annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","c89cb920":"counties[['PCT_DIABETES_ADULTS08','PCT_OBESE_ADULTS08','RECFAC09','is_store_decline']].hist(figsize=(16, 10), bins=50, xlabelsize=8, ylabelsize=8);","bfa2b4df":"social=counties[['MEDHHINC15','METRO13','POPLOSS10','POVRATE15','PERPOV10','is_store_decline']]\nsocial.head()","2eba4045":"#Check Correlation matrix\nsns.set(style=\"white\")\n\ncorr = social.corr()\n\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(8, 8))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, vmax=.3, center=0,annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","a99ab2aa":"counties[['MEDHHINC15','METRO13','POPLOSS10','POVRATE15','PERPOV10','is_store_decline']].hist(figsize=(16, 10), bins=50, xlabelsize=8, ylabelsize=8);","88f1a9ce":"BEA = counties[['POP_2009','Per_Cap_2009','Personal_income_2009','is_store_decline']]\nBEA['pop_per_store'] = BEA['POP_2009'] \/( stores['GROC09']+ stores['CONVS09']+ stores['SPECS09'])","ca221cc2":"#Check Correlation matrix\nsns.set(style=\"white\")\n\ncorr = BEA.corr()\n\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(8, 8))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, vmax=.3, center=0,annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","c3f3925d":"# Make zero value Non-Zero to avoid Infynity value\ncounties['CONVS09']=counties['CONVS09'].apply(lambda x: 1 if x == 0 else x)","9d004435":"counties['pop_per_store'] = counties['POP_2009'] \/( counties['GROC09']+ counties['CONVS09']+ counties['SPECS09'])\ncounties['CONVS09_with_Snap_benefits'] = counties['SNAPS12'] \/ counties['CONVS09']\ncounties['total_stores_snap_benefits'] = counties['SNAPS12'] \/ (counties['GROC09']+ counties['CONVS09']+ counties['SPECS09'])","a5d55de4":"counties = counties[['FIPS','State','County','GROC09','GROCPTH09','SUPERC09','SUPERCPTH09','CONVS09','CONVSPTH09','SPECS09','SPECSPTH09','SNAPS12','SNAPSPTH12','is_store_decline','LACCESS_POP10','LACCESS_LOWI10','LACCESS_HHNV10','PCT_DIABETES_ADULTS08','PCT_OBESE_ADULTS08','RECFAC09','MEDHHINC15','METRO13','POPLOSS10','POVRATE15','PERPOV10','POP_2009','Per_Cap_2009','Personal_income_2009','pop_per_store','CONVS09_with_Snap_benefits','total_stores_snap_benefits' ]]","fc42ea22":"counties.head()","c395e10a":"#Check if there is any Inf value\ncounties[counties['total_stores_snap_benefits']==np.inf]","2a43cfe8":"counties.to_csv('model.csv',index=False)","645638ab":"# Make zero value Non-Zero to avoid Infynity value\ntest_data['CONVS14']=test_data['CONVS14'].apply(lambda x: 1 if x == 0 else x)","b0ae669f":"test_data[test_data['CONVS14'] ==0]","4df7c93b":"test_data['pop_per_store'] = test_data['Pop_2014'] \/( test_data['GROC14']+ test_data['CONVS14']+ test_data['SUPERC14'])\ntest_data['CONVS14_with_Snap_benefits'] = test_data['SNAPS16'] \/ test_data['CONVS14']\ntest_data['total_stores_snap_benefits'] = test_data['SNAPS16'] \/ (test_data['GROC14']+ test_data['CONVS14']+ test_data['SPECS14'])","51b89c21":"test_data[test_data['total_stores_snap_benefits']==np.inf]","59384b69":"test_data.head()","6bc2fd85":"test_data.to_csv('test.csv',index=False)","8c623753":"## Observation \n\n* Cant detect any outliers \n* Replaced missing value to median","72eebd28":"## EDA on Bureau of Economic Analysis (BEA) data\n","1b72bbb7":"### EDA on Stores","91e8040a":"## Feature engineering \n\nAs per the EDA we can make below 2 new features \n\n* Population per store - pop_per_store\n* SNAP authorised convienient store - CONVS09_with_Snap_benefits\n* Total SNAP authorised store - total_stores_snap_benefits","e8b63fa2":"### EDA on Health","83e09583":"###  EDA on Access","396ca797":"## EDA on Socioeconomic Characteristics\n","5c2c14e8":"## Data Cleaning and EDA\n\n* Replace Null value\n* Remove Outliers \n"}}