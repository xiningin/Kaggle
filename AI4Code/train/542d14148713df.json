{"cell_type":{"f8db7bb7":"code","32d43dff":"code","89062dc3":"code","92ce70a9":"code","4fd5b1bd":"code","e07c5f0b":"code","f313436d":"code","5f93ed52":"code","5e5029aa":"code","1009fade":"code","239c7944":"code","933e9117":"code","318964a5":"code","96cbdd13":"code","c6929d96":"markdown","847f966d":"markdown","5502f99a":"markdown","4e52a361":"markdown","fda235e1":"markdown","cc198241":"markdown","f1ba0af6":"markdown","3d96a3cf":"markdown","d22caed1":"markdown"},"source":{"f8db7bb7":"pip install talib-binary","32d43dff":"!pip install EIA_python","89062dc3":"import time\nimport numpy as np\nimport pandas as pd","92ce70a9":"import eia as eia\nAPI_KEY = \"\"\n\ndef get_data_from_EIA():\n    api = eia.API(API_KEY)\n\n    series_id='PET.RWTC.D'\n    series_name='Price'\n    row_data = api.data_by_series(series=series_id)\n    df_sum = pd.DataFrame(row_data) \n\n    df_sum.columns=[series_name]   \n    df_sum.index.names = ['Date']\n    df_sum.index = df_sum.index.str.replace('^([\\d]{4})\\s([\\d]{2})([\\d]{2})\\s[\\d]{2}', r'\\1-\\2-\\3',regex=True)\n    df_sum.index=pd.to_datetime(df_sum.index)\n            \n    return df_sum\n\ndef get_data_from_EIA_local():\n    df = pd.read_csv(\"..\/input\/cushing-ok-wti-spot-price-fob\/Cushing_OK_WTI_Spot_Price_FOB_20200626.csv\", header=4, parse_dates = [0])\n    df.columns=[\"Date\", \"Price\"]\n    df.set_index('Date', inplace=True)\n    df.sort_index(inplace=True)\n            \n    return df","4fd5b1bd":"import talib\n\n# Original function for ICH indicator\ndef ichimoku(price):\n    df = pd.Series(data=price)\n    max9 = df.rolling(9).max()\n    min9 = df.rolling(9).min()\n    max26 = df.rolling(26).max()\n    min26 = df.rolling(26).min()\n    max52 = df.rolling(52).max()\n    min52 = df.rolling(52).min()\n    \n    kijun = (max26 + min26) \/ 2\n    tenkan = (max9 + min9) \/ 2\n    \n    chiko = df.copy()\n    chiko_index = np.arange(-26,len(df)-26)\n    chiko.index = chiko_index\n    \n    senko1 = (tenkan + kijun) \/ 2    \n    senko2 = (max52 + min52) \/ 2\n    senko_index = np.arange(26,len(df)+26)\n    senko1.index = senko_index\n    senko2.index = senko_index\n    \n    return tenkan,kijun,chiko,senko1,senko2\n\n# Original function for RCI indicator\ndef RCI(price, timeperiod = 9):\n    rci = []\n    for j in range(len(price)):\n        if j < timeperiod:\n            rci.append(np.nan)    \n        else:\n            data = pd.DataFrame()\n            data['price'] = list(price[j-timeperiod:j])\n            data = data.reset_index()\n            data = data.rename(columns = {'index':'original_index'})\n            data = data.sort_values('price',ascending=False).reset_index(drop = True)\n            data = data.reset_index()\n            data['index'] = [i+1 for i in data['index']]\n            data = data.rename(columns = {'index':'price_rank'})\n            data = data.set_index('original_index')\n            data = data.sort_index()\n            data['date_rank'] = np.arange(timeperiod,0,-1)\n            data['delta'] = [(data.loc[ii,'price_rank']-data.loc[ii,'date_rank'])**2 for ii in range(len(data))]\n            d = data['delta'].sum()\n            value = (1-(6*d)\/(timeperiod**3-timeperiod))*100\n            rci.append(value)\n    return rci\n\ndef add_new_features(df):\n    price = np.array(df['Price'])\n    output = price.copy()\n    cols = ['Price']\n    \n    ### Overlap Studies Function Group ###\n    \n    # SMA: Simple Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.SMA(price, timeperiod=idx)]\n        cols += ['SMA' + str(idx)]\n    # WMA: Weighted Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.WMA(price, timeperiod=idx)]\n        cols += ['WMA' + str(idx)]\n    # EMA: Exponential Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.EMA(price, timeperiod=idx)]\n        cols += ['EMA' + str(idx)]\n    # DEMA: Double Exponential Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.DEMA(price)]\n        cols += ['DEMA' + str(idx)]\n    # TEMA: Triple Exponential Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.T3(price)]\n        cols += ['TEMA' + str(idx)]\n    # TRIMA: Triangular Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.TRIMA(price)]\n        cols += ['TRIMA' + str(idx)]\n    # KAMA: Kaufman Adaptive Moving Average\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.KAMA(price)]\n        cols += ['KAMA' + str(idx)]\n    \n    # MAMA: MESA Adaptive Moving Average\n    for arr in talib.MAMA(price):\n        output = np.c_[output, arr]\n    cols += ['MAMA_1', 'MAMA_2']\n    \n    # Hilbert Transform - Instantaneous Trendline\n    output = np.c_[output, talib.HT_TRENDLINE(price)]\n    cols += ['HT_TRENDLINE']\n    \n    # Bollinger Bands\n    for arr in talib.BBANDS(price, timeperiod=25, nbdevup=1, nbdevdn=1, matype=0):\n        output = np.c_[output, arr]\n    cols += ['BBANDS25_1_ub', 'BBANDS25_1_mb', 'BBANDS25_1_lb']\n    for arr in talib.BBANDS(price, timeperiod=25, nbdevup=2, nbdevdn=2, matype=0):\n        output = np.c_[output, arr]\n    cols += ['BBANDS25_2_ub', 'BBANDS25_2_mb', 'BBANDS25_2_lb']\n    for arr in talib.BBANDS(price, timeperiod=25, nbdevup=3, nbdevdn=3, matype=0):\n        output = np.c_[output, arr]\n    cols += ['BBANDS25_3_ub', 'BBANDS25_3_mb', 'BBANDS25_3_lb']\n    \n    # MIDPNT: MidPoint over period\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.MIDPOINT(price, timeperiod=idx)]\n        cols += ['MIDPNT' + str(idx)]\n    \n    ### Momentum Indicator Function Group ###\n    \n    # ROC: Rate of change Percentage\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.ROCP(price, timeperiod=idx)]\n        cols += ['ROC' + str(idx)]\n    # Mom: Momentum\n    for idx in [5,25,50,75,100]:\n        output = np.c_[output, talib.MOM(price, timeperiod=idx)]\n        cols += ['MOM' + str(idx)]\n    # RSI: Relative Strength Index\n    output = np.c_[output, talib.RSI(price, timeperiod=9)]\n    cols += ['RSI9']\n    output = np.c_[output, talib.RSI(price, timeperiod=14)]\n    cols += ['RSI14']\n    \n    # MACD: Moving Average Convergence\/Divergence\n    for arr in talib.MACD(price, fastperiod=12, slowperiod=26, signalperiod=9):\n        output = np.c_[output, arr]\n    cols += ['MACD', 'MACD_signal', 'MACD_hist']\n    # APO: Absolute Price Oscillator\n    output = np.c_[output, talib.APO(price)]\n    cols += ['APO']\n    # PPO: Percentage Price Oscillator\n    output = np.c_[output, talib.PPO(price)]\n    cols += ['PPO']\n    # CMO: Chande Momentum Oscillator\n    output = np.c_[output, talib.CMO(price)]\n    cols += ['CMO']\n\n    ### Cycle Indicator Function Group ###\n    \n    # Dominant Cycle Period\n    output = np.c_[output, talib.HT_DCPERIOD(price)]\n    cols += ['HT_DCPERIOD']\n    # Dominant Cycle Phase\n    output = np.c_[output, talib.HT_DCPHASE(price)]\n    cols += ['HT_DCPHASE']\n    # Phasor Components\n    for arr in talib.HT_PHASOR(price):\n        output = np.c_[output, arr]\n    cols += ['HT_PHASOR_i', 'HT_PHASOR_q']\n    # SineWave\n    for arr in talib.HT_SINE(price):\n        output = np.c_[output, arr]\n    cols += ['HT_SINE_s', 'HT_SINE_l']    \n    # Trend vs Cycle Mode\n    output = np.c_[output, talib.HT_TRENDMODE(price)]\n    cols += ['HT_TRENDMODE']\n    \n    ### Other(Original) Function Group ###\n    \n    # ICH: Ichimoku Kink\u014d Hy\u014d\n    for arr in ichimoku(price):\n        output = np.c_[output, arr]\n    cols += ['ICH_tenkan','ICH_kijun','ICH_chiko','ICH_senko1','ICH_senko2']\n    \n    # Rank Correlation Index\n    output = np.c_[output, RCI(price)]\n    cols += ['RCI']\n    \n    data = pd.DataFrame(output, index=df.index, columns=cols)\n    #data['Date']=data.index\n    return data","e07c5f0b":"if API_KEY:\n    df_eia = get_data_from_EIA()\nelse:\n    df_eia = get_data_from_EIA_local()\n\ndf_eia = add_new_features(df_eia)\ndf_eia.to_csv('EIA_OIL_add_new_features.csv',index=True)\ndf_eia.tail()","f313436d":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef display_chart(data):\n    rows_count = 14*2\n    columns_count = 1\n    graphs_count = rows_count * columns_count\n    axes = []\n    \n    colname =  [['Price', 'SMA5','SMA25','SMA50','SMA75','SMA100'],\n                ['Price', 'WMA5','WMA25','WMA50','WMA75','WMA100'],\n                ['Price', 'EMA5','EMA25','EMA50','EMA75','EMA100'],\n                ['Price', 'DEMA5','DEMA25','DEMA50','DEMA75','DEMA100'],\n                ['Price', 'TEMA5','TEMA25','TEMA50','TEMA75','TEMA100'],\n                ['Price', 'TRIMA5','TRIMA25','TRIMA50','TRIMA75','TRIMA100'],\n                ['Price', 'KAMA5','KAMA25','KAMA50','KAMA75','KAMA100'],\n                ['Price', 'MAMA_1', 'MAMA_2'],\n                ['Price', 'HT_TRENDLINE'],\n                ['Price', 'BBANDS25_1_ub', 'BBANDS25_1_mb', 'BBANDS25_1_lb'],\n                ['Price', 'BBANDS25_2_ub', 'BBANDS25_2_mb', 'BBANDS25_2_lb'],\n                ['Price', 'BBANDS25_3_ub', 'BBANDS25_3_mb', 'BBANDS25_3_lb'],\n                ['Price', 'MIDPNT5','MIDPNT25','MIDPNT50','MIDPNT75','MIDPNT100'],\n                ['Price', 'ROC5','ROC25','ROC50','ROC75','ROC100'],\n                ['Price', 'MOM5','MOM25','MOM50','MOM75','MOM100'],\n                ['Price', 'RSI9'],\n                ['Price', 'RSI14'],\n                ['Price', 'MACD', 'MACD_signal', 'MACD_hist'],\n                ['Price', 'APO'],\n                ['Price', 'PPO'],\n                ['Price', 'CMO'],\n                ['Price', 'HT_DCPERIOD'],\n                ['Price', 'HT_DCPHASE'],\n                ['Price', 'HT_PHASOR_i', 'HT_PHASOR_q'],\n                ['Price', 'HT_SINE_s', 'HT_SINE_l'],\n                ['Price', 'HT_TRENDMODE'],\n                ['Price', 'ICH_tenkan','ICH_kijun','ICH_chiko','ICH_senko1','ICH_senko2'],\n                ['Price', 'RCI']]\n    \n    title =     ['SMA: Simple Moving Average',\n                 'WMA: Weighted Moving Average',\n                 'EMA: Exponential Moving Average',\n                 'DEMA: Double Exponential Moving Average',\n                 'TEMA: Triple Exponential Moving Average',\n                 'TRIMA: Triangular Moving Average',\n                 'KAMA: Kaufman Adaptive Moving Average',\n                 'MAMA: MESA Adaptive Moving Average',\n                 'Hilbert Transform - Instantaneous Trendline',\n                 'Bollinger Bands(25)-1',\n                 'Bollinger Bands(25)-2',\n                 'Bollinger Bands(25)-3',\n                 'MIDPNT: MidPoint over period',\n                 'ROC: Rate of change Percentage',\n                 'Momentum',\n                 'RSI: Relative Strength Index(9)',\n                 'RSI: Relative Strength Index(12)',\n                 'MACD: Moving Average Convergence\/Divergence',\n                 'APO: Absolute Price Oscillator',\n                 'PPO: Percentage Price Oscillator',\n                 'CMO: Chande Momentum Oscillator',\n                 'Dominant Cycle Period',\n                 'Dominant Cycle Phase',\n                 'Phasor Components',\n                 'SineWave',\n                 'Trend vs Cycle Mode',\n                 'ICH: Ichimoku Kinko Hyo',\n                 'Rank Correlation Index']\n\n    sns.set(font_scale = 1.4)\n    fig = plt.figure(figsize=(15*columns_count+1,15*rows_count+1))\n    plt.style.use('ggplot')\n    \n    x = data.index.astype(str).values\n    for n in range(1, graphs_count + 1):\n        axes.append(fig.add_subplot(rows_count, columns_count, n))\n        if n < len(colname)+1:\n            for i in range(len(colname[n-1])):\n                axes[n-1].plot(x, data[colname[n-1][i]],lw=3,label=colname[n-1][i])\n            axes[n-1].set_xlabel('Date')\n            axes[n-1].set_ylabel('Price')\n            axes[n-1].set_xticks(range(0, len(x), 100))\n            axes[n-1].set_xticklabels(x[::100])\n            axes[n-1].legend(loc='best')\n            axes[n-1].set_title(title[n-1])\n        else:\n            axes[n-1].axis('off')\n           \n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    plt.show()","5f93ed52":"display_chart(df_eia['2019-01-01':'2020-01-01'])","5e5029aa":"from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet, SGDRegressor\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.datasets import load_iris\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import train_test_split\nimport re\n\nclf_names = [   \n                [\"ExtraTreesRegressor\",\"\"],\n                [\"LGBMRegressor\",\"\"],\n                [\"CatBoostRegressor\",\"logging_level='Silent'\"],\n                [\"AdaBoostRegressor\",\"\"],\n                [\"XGBRegressor\",\"\"],\n                [\"RandomForestRegressor\",\"\"],\n                [\"LinearRegression\",\"\"],\n                [\"Ridge\",\"\"],\n                [\"Lasso\",\"tol=0.0001\"],\n                [\"ElasticNet\",\"\"],\n                [\"SGDRegressor\",\"\"],\n                [\"PLSRegression\",\"\"],\n                [\"SVR\",\"kernel='linear'\"],\n                [\"SVR\",\"kernel='rbf'\"],\n                [\"MLPRegressor\",\"max_iter=1000\"],\n            ]\n\ndef sklearn_model(X_train, y_train):\n    total_start = time.time()\n    models = {}\n    total = 0.0\n    df_ret = []\n    for i in range(len(clf_names)):\n        clf_name = clf_names[i][0]\n        start = time.time()\n        clf   = eval(\"%s(%s)\" % (clf_name, clf_names[i][1]))\n        clf.fit(X_train, y_train)\n        score = clf.score(X_train, y_train)\n        if score < 0 or score > 1:\n            score = 0\n        if clf_name == \"SVR\":\n            match = re.search(r\"kernel='(\\w+)'\", clf_names[i][1])\n            if match:\n                clf_name += \"_\" + match.group(1)\n        models[clf_name] = clf\n        if total <= score:\n            total = score\n        df_ret.append([clf_name, \"{:.6f}\".format(score), \"{:.6f}\".format(time.time() - start)])\n    #print('Total Time = %s' % str(time.time() - total_start))\n    df_ret = pd.DataFrame(df_ret, columns=['Model','Accuracy','Time'])\n    df_ret = df_ret.sort_values('Accuracy', ascending=False)\n    df_ret = df_ret.reset_index(drop=True)\n    return models,df_ret","1009fade":"# Data preparation\ndf_train = df_eia['2019-01-01':'2020-01-01']\ndf_train = df_train.dropna()\ndf_train = df_train.drop(df_train.columns[df_train.columns.str.startswith('ICH_')], axis=1)  # this indicator gives abnormal value\n\ny_train = df_train['Price']\nX_train = df_train.drop(['Price'], axis = 1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, train_size = 0.8)\n\n# Learning\nmodels,df_ret = sklearn_model(X_train, y_train)\ndf_ret","239c7944":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef display_imporance(models, X, y):\n    \n    rows_count = 4\n    columns_count = 2\n    axes = []\n    \n    sns.set(font_scale = 1.4)\n    plt.style.use('ggplot')\n    fig = plt.figure(figsize=(18, 30))\n    \n    # below models do not support a feature_importances_ attribute\n    rm_model = ['LinearRegression','Ridge','Lasso','ElasticNet','SGDRegressor','PLSRegression','SVR_linear','SVR_rbf','MLPRegressor']\n    n = 1\n    for name, model in models.items():\n        if name in rm_model:\n            continue\n        y_pred = model.predict(X)\n        fi = model.feature_importances_\n        fi_df = pd.DataFrame({'feature': list(X.columns),\n                             'feature importance': fi[:]}).sort_values('feature importance', ascending = False)\n        axes.append(fig.add_subplot(rows_count, columns_count, n))\n        sns.barplot(fi_df['feature importance'].head(20),fi_df['feature'].head(20), ax=axes[n-1])\n        axes[n-1].set_title(\"Feature imporance in the \" + name + \" Model (Top20)\")\n        n = n + 1\n\n    fig.subplots_adjust(wspace=0.4, hspace=0.3)\n    plt.show()\n","933e9117":"display_imporance(models, X_valid, y_valid)","318964a5":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef display_chart2(data, colname, title):\n    rows_count = 1\n    columns_count = 1\n    graphs_count = rows_count * columns_count\n    axes = []\n\n    sns.set(font_scale = 1.4)\n    fig = plt.figure(figsize=(15*columns_count+1,15*rows_count+1))\n    plt.style.use('ggplot')\n    \n    x = data.index.astype(str).values\n    for n in range(1, graphs_count + 1):\n        axes.append(fig.add_subplot(rows_count, columns_count, n))\n        if n < len(colname)+1:\n            for i in range(len(colname[n-1])):\n                axes[n-1].plot(x, data[colname[n-1][i]],lw=3,label=colname[n-1][i])\n            axes[n-1].set_xlabel('Date')\n            axes[n-1].set_ylabel('Price')\n            axes[n-1].set_xticks(range(0, len(x), 100))\n            axes[n-1].set_xticklabels(x[::100])\n            axes[n-1].legend(loc='best')\n            axes[n-1].set_title(title[n-1])\n        else:\n            axes[n-1].axis('off')\n           \n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    fig.savefig(str(title) + '.png')","96cbdd13":"display_chart2(df_eia['2019-01-01':'2020-01-01'], [['Price', 'SMA5','SMA25','SMA50','SMA75','SMA100']], ['SMA: Simple Moving Average'])\ndisplay_chart2(df_eia['2019-01-01':'2020-01-01'], [['Price', 'MACD', 'MACD_signal', 'MACD_hist']], ['MACD: Moving Average Convergence Divergence'])\ndisplay_chart2(df_eia['2019-01-01':'2020-01-01'], [['Price', 'HT_TRENDLINE']], ['Hilbert Transform - Instantaneous Trendline'])\ndisplay_chart2(df_eia['2019-01-01':'2020-01-01'], [['Price', 'BBANDS25_1_ub', 'BBANDS25_1_mb', 'BBANDS25_1_lb']], ['Bollinger Bands(25)-1'])\ndisplay_chart2(df_eia['2019-01-01':'2020-01-01'], [['Price', 'ICH_tenkan','ICH_kijun','ICH_chiko','ICH_senko1','ICH_senko2']], ['ICH: Ichimoku Kinko Hyo'])\ndisplay_chart2(df_eia['2019-01-01':'2020-01-01'], [['Price', 'RCI']], ['RSI: Relative Strength Index(9)'])","c6929d96":"## 2. Visualize the Technical Indicators\nI set the target period as 1 year for a simple. (2019-01-01 to 2020-01-01)","847f966d":"# Closing\nI hope that this first analysis can be used to identify the time window underlying the different technical features and create more powerful features for the predictive models. If you have any suggestions to improve this script or ideas on how to apply it to the complete portfolio I would be happy to know.<br>\n<br>\nThank you for reading!","5502f99a":"# Technical Analysis\nLet's do programming and run the script!","4e52a361":"# Introduction\nThis notebook suggests that Technical Analysis would be useful to predict future crude oil prices.<br>\nI will share how to calculate Technical Indicators, evaluate using models, and search for highly effective features.<br>\nI have used the WTI crude oil price dataset for this notebook.\n\n# Technical Analysis and Technical Indicators\nTechnical Analysis is based on the belief that 'technical indicators' give insight into the current and future market situation. A technical indicator is a function that retrieves information from a time series of prices or trade volumes, and converts them to an output that can be used as a trade signal for buying or selling at the right moment.\n\nBy analyzing historical data, we can use indicators to predict future price movements.<br>\nIn this notebook, I've used \"TA-Lib\" library for calculating technical indicators.<br>\nTA-Lib is widely used by trading software developers requiring to perform technical analysis of financial market data.","fda235e1":"## 4. Visualize feature scores of the features\nNow, I will visualize the feature scores with matplotlib and seaborn.","cc198241":"# Evaluation\nSome models couldn't give the feature importance due to not support a \"feature\\_importances\\_\" attribute.<br>\nOther six models could calculate the feature importance. I visualized the these result to above graph.<br>\nIt shows us that the feature importance are different for each model.<br>\n\nThe common features in all models are as follows.\n* MA series appears higher in all graphs. Especially, the short-term moving average(5-day) was presented as an important indicator.<br>\n    WMA5,SMA5,EMA5,EMA100<br>\n* The RSI series is a key index used in <a href=https:\/\/en.wikipedia.org\/wiki\/SBI_Group>SBI Securities<\/a> along with the above moving average.<br>\n    RSI14,RSI9<br>\n* MOM appears higher in all graphs. MOM means \"Market momentum\" (acceleration\/deceleration).<br>\n    MOM25,MOM75<br>\n* ROC also  appears higher. This indicator is same series as momentum.<br>\n    ROC50,ROC75\n    \n# Conclusion\nIn conclusion, the basic indices in stock market (e.g. MA, RSI series) are effective and can be used in the Crude OIL prediction. <br>\nIn addition, the mid-term \"Momentum Series\"(e.g. MOM, ROC series) will work as effective element. <br>\n\nHere too, RSI, MACD is calculated for time series competition.\n* Two Sigma Financial Modeling Challenge \n    * Moving Average (MACD) Analysis<br>\n        https:\/\/www.kaggle.com\/luckylwk\/moving-average-macd-analysis\n    * Relative Strenght Index (RSI) Analysis<br>\n        https:\/\/www.kaggle.com\/luckylwk\/relative-strenght-index-rsi-analysis\n        \nAlthough the data name is fake, 63 fundamentals analysis indicators, 40 technical analysis indicators, and 5 derivative data have already been prepared. \nI looked through other public kernel in kaggle, gradient boosting was often used.","f1ba0af6":"## 3. Exploration of Feature Importance\nThen, I will calculate Feature Importance with using the major Regressor Model.","3d96a3cf":"## Technical Indicators List\nI have listed the indicators which is used in this notebook.<br>\n\n| Function Group | Indicator Name | Description URL |\n| :--- | :--- | :--- |\n| Overlap Studies | SMA: Simple Moving Average | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/simple-moving-average-sma\/ |\n| Overlap Studies | WMA: Weighted Moving Average | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/weighted-moving-average-wma\/ |\n| Overlap Studies | EMA: Exponential Moving Average | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/exponential-ema\/ |\n| Overlap Studies | DEMA: Double Exponential Moving Average | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/double-exponential-moving-average-dema\/ |\n| Overlap Studies | TEMA: Triple Exponential Moving Average | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/triple-exponential-moving-average-tema\/ |\n| Overlap Studies | TRIMA: Triangular Moving Average | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/triangular-moving-average-trima\/ |\n| Overlap Studies | KAMA: Kaufman Adaptive Moving Average | https:\/\/corporatefinanceinstitute.com\/resources\/knowledge\/trading-investing\/kaufmans-adaptive-moving-average-kama\/ |\n| Overlap Studies | MAMA: MESA Adaptive Moving Average | https:\/\/www.linnsoft.com\/techind\/mesa-adaptive-moving-average-mama |\n| Overlap Studies | Hilbert Transform - Instantaneous Trendline | https:\/\/en.wikipedia.org\/wiki\/Hilbert_transform |\n| Overlap Studies | Bollinger Bands | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/bollinger-band-bbands\/ |\n| Overlap Studies | MIDPNT: MidPoint over period | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/midpoint-midpnt\/ |\n| Momentum Indicators | ROC: Rate of change Percentage | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/rate-of-change-roc\/ |\n| Momentum Indicators | MOM: Momentum | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/momentum-mom\/ |\n| Momentum Indicators | RSI: Relative Strength Index | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/relative-strength-indicator-rsi\/ |\n| Momentum Indicators | MACD: Moving Average Convergence\/Divergence | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/moving-average-convergence-divergence-macd\/ |\n| Momentum Indicators | APO: Absolute Price Oscillator | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/absolute-price-oscillator-apo\/ |\n| Momentum Indicators | PPO: Percentage Price Oscillator | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/percent-price-oscillator-ppo\/ |\n| Momentum Indicators | CMO: Chande Momentum Oscillator | https:\/\/www.tradingtechnologies.com\/xtrader-help\/x-study\/technical-indicator-definitions\/chande-momentum-oscillator-cmo\/ |\n| Cycle Indicators | Dominant Cycle Period | https:\/\/en.wikipedia.org\/wiki\/Hilbert_transform |\n| Cycle Indicators | Dominant Cycle Phase | https:\/\/en.wikipedia.org\/wiki\/Hilbert_transform |\n| Cycle Indicators | Phasor Components | https:\/\/en.wikipedia.org\/wiki\/Hilbert_transform |\n| Cycle Indicators | SineWave | https:\/\/en.wikipedia.org\/wiki\/Hilbert_transform |\n| Cycle Indicators | Trend vs Cycle Mode | https:\/\/en.wikipedia.org\/wiki\/Hilbert_transform |\n| Other | ICH: Ichimoku Kinko Hyo | https:\/\/en.wikipedia.org\/wiki\/Ichimoku_Kink%C5%8D_Hy%C5%8D |\n| Other | RCI: Rank Correlation Index | https:\/\/en.wikipedia.org\/wiki\/Spearman%27s_rank_correlation_coefficient |","d22caed1":"## 1. Calculate Technical Indicators\nI will show the way of Technical Indicators calculation with talib library and API of EIA.<br>\nPlease refer the below kernel for retreaving the dataset from EIA.<br>\nhttps:\/\/www.kaggle.com\/sajikim\/how-to-use-eia-s-api-to-pull-dataset"}}