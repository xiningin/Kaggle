{"cell_type":{"d737d37c":"code","6b87f216":"code","e361ca8c":"code","83395a6e":"code","918c2d87":"code","9eda53e6":"code","f56468eb":"code","af0739f9":"code","320b1986":"code","85c21ff1":"code","73286dd3":"code","6e0bca54":"code","8f0a0b8d":"code","41311c8a":"code","20152487":"code","84e7d552":"code","76f37ca3":"code","f8f9bd0c":"code","8e207505":"code","44a8f3f5":"code","7747da0f":"code","4b62b30b":"markdown","ad9353af":"markdown","488e8420":"markdown","be50983b":"markdown","8de6ff9d":"markdown","288744d6":"markdown","cd14b79a":"markdown","7f73800b":"markdown","445a5041":"markdown","d87b1c57":"markdown","6d105a39":"markdown","19dbff7e":"markdown","fe94d0aa":"markdown","32482f41":"markdown","403ca7f5":"markdown"},"source":{"d737d37c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.dpi'] = 200","6b87f216":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","e361ca8c":"df.loc[47:50]","83395a6e":"df.dtypes","918c2d87":"## add new features in the dataset\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year.astype('Int64')\ndf['month_added'] = df['date_added'].dt.month\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\ndf.head()","9eda53e6":"from datetime import datetime\n\n## these go on the numbers below\ntl_dates = [\n    \"1997\\nFounded\",\n    \"1998\\nMail Service\",\n    \"2003\\nGoes Public\",\n    \"2007\\nStreaming service\",\n    \"2016\\nGoes Global\",\n    \"2021\\nNetflix & Chill\"\n]\n\ntl_x = [1, 2, 4, 5.3, 8,9]\n\n## the numbers go on these\ntl_sub_x = [1.5,3,5,6.5,7]\n\n\ntl_sub_times = [\n    \"1998\",\"2000\",\"2006\",\"2010\",\"2012\"\n]\n\ntl_text = [\n    \"Netflix.com launched\",\n    \"Starts\\nPersonal\\nRecommendations\",\"Billionth DVD Delivery\",\"Canadian\\nLaunch\",\"UK Launch\"]\n\n\nwith plt.xkcd():\n# Set figure & Axes\n    fig, ax = plt.subplots(figsize=(15, 4), constrained_layout=True)\n    ax.set_ylim(-2, 1.75)\n    ax.set_xlim(0, 10)\n\n\n    # Timeline : line\n    ax.axhline(0, xmin=0.1, xmax=0.9, c='deeppink', zorder=1)\n\n\n    # Timeline : Date Points\n    ax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='palevioletred', zorder=2)\n    ax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='darkmagenta', zorder=3)\n    # Timeline : Time Points\n    ax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='darkmagenta',zorder=4)\n\n    # Date Text\n    for x, date in zip(tl_x, tl_dates):\n        ax.text(x, -0.55, date, ha='center', \n                fontfamily='serif', fontweight='bold',\n                color='royalblue',fontsize=12)\n\n\n    # Stemplot : vertical line\n    levels = np.zeros(len(tl_sub_x))    \n    levels[::2] = 0.3\n    levels[1::2] = -0.3\n    markerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \n    plt.setp(baseline, zorder=0)\n    plt.setp(markerline, marker=',', color='darkmagenta')\n    plt.setp(stemline, color='darkmagenta')\n\n    # Text\n    for idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n        ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n                fontfamily='serif', fontweight='bold',\n                color='royalblue', fontsize=11)\n\n        ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n            fontfamily='serif',color='royalblue')\n\n\n\n    # Spine\n    for spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n        ax.spines[spine].set_visible(False)\n\n    # Ticks    \n    ax.set_xticks([]) \n    ax.set_yticks([]) \n\n    # Title\n    ax.set_title(\"Netflix through the years\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='royalblue')\n    ax.text(2.4,1.57,\"From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?\", fontfamily='serif', fontsize=12, color='mediumblue')\n\n    plt.show()","f56468eb":"col = \"type\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\nwith plt.xkcd():\n    explode = (0, 0.1)  # only \"explode\" the 2nd slice (i.e. 'TV Show')\n\n    fig1, ax1 = plt.subplots(figsize=(5, 5), dpi=100)\n    ax1.pie(grouped[\"count\"], explode=explode, labels=grouped[\"type\"], autopct='%1.1f%%',\n        shadow=True, startangle=90)\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    plt.show()","af0739f9":"from collections import Counter\ncol = \"country\"\n\ncategories = \", \".join(df[col].fillna(\"\")).split(\", \")\ncounter_list = Counter(categories).most_common(25)\ncounter_list = [_ for _ in counter_list if _[0] != \"\"]\nlabels = [_[0] for _ in counter_list]\nvalues = [_[1] for _ in counter_list]\n\n\nwith plt.xkcd():\n    fig, ax = plt.subplots(figsize=(10, 10), dpi=100)\n    y_pos = np.arange(len(labels))\n    ax.barh(y_pos, values, align='center')\n    ax.set_yticks(y_pos)\n    ax.set_yticklabels(labels)\n    ax.invert_yaxis()  # labels read top-to-bottom\n    ax.set_xlabel('Content')\n    ax.set_title('Countries with most content')\n\n    plt.show()","320b1986":"from collections import Counter\nfrom matplotlib.pyplot import figure\nimport math\n\ncolours = [\"orangered\", \"mediumseagreen\", \"darkturquoise\", \"mediumpurple\", \"deeppink\", \"indianred\"]\ncountries_list = [\"United States\", \"India\", \"United Kingdom\", \"Japan\", \"France\", \"Canada\"]\ncol = \"director\"\n\nwith plt.xkcd():\n    figure(num=None, figsize=(20, 8)) \n    x=1\n    for country in countries_list:\n        country_df = df[df[\"country\"]==country]\n        categories = \", \".join(country_df[col].fillna(\"\")).split(\", \")\n        counter_list = Counter(categories).most_common(6)\n        counter_list = [_ for _ in counter_list if _[0] != \"\"]\n        labels = [_[0] for _ in counter_list][::-1]\n        values = [_[1] for _ in counter_list][::-1]\n        if max(values)<10:\n            values_int = range(0, math.ceil(max(values))+1)\n        else:\n            values_int = range(0, math.ceil(max(values))+1, 2)\n        plt.subplot(2, 3, x)\n        plt.barh(labels,values, color = colours[x-1])\n        plt.xticks(values_int)\n        plt.title(country)\n        x+=1\n    plt.suptitle('Popular Directors with the most content')\n    plt.tight_layout()\n    plt.show()","85c21ff1":"col = \"cast\"\n\nwith plt.xkcd():\n    figure(num=None, figsize=(20, 8)) \n    x=1\n    for country in countries_list:\n        df[\"from_country\"] = df['country'].fillna(\"\").apply(lambda x : 1 if country.lower() in x.lower() else 0)\n        small = df[df[\"from_country\"] == 1]\n        cast = \", \".join(small['cast'].fillna(\"\")).split(\", \")\n        tags = Counter(cast).most_common(11)\n        tags = [_ for _ in tags if \"\" != _[0]]\n        labels, values = [_[0]+\"  \" for _ in tags][::-1], [_[1] for _ in tags][::-1]\n        if max(values)<10:\n            values_int = range(0, math.ceil(max(values))+1)\n        elif max(values)>=10 and max(values)<=20:\n            values_int = range(0, math.ceil(max(values))+1, 2)\n        else:\n            values_int = range(0, math.ceil(max(values))+1, 5)\n        plt.subplot(2, 3, x)\n        plt.barh(labels,values, color = colours[x-1])\n        plt.xticks(values_int)\n        plt.title(country)\n        x+=1\n    plt.suptitle('Popular Actors with the most content')\n    plt.tight_layout()\n    plt.show()","73286dd3":"small = df.sort_values(\"release_year\", ascending = True)\n\n#small.duration stores empty values if the content type is 'TV Show'\n\nsmall = small[small['duration'] != \"\"].reset_index()\nsmall[['title', \"release_year\"]][:15]","6e0bca54":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['duration'] != \"\"].reset_index()\nsmall[['title', \"release_year\"]][:15]","8f0a0b8d":"print(df[df['title']=='Monty Python\\'s Flying Circus'])","41311c8a":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['season_count'] != \"\"].reset_index()\nsmall = small[['title', \"release_year\"]][:15]\nsmall","20152487":"df[\"year_diff\"] = df[\"year_added\"]-df[\"release_year\"]\ndf.head()","84e7d552":"col = \"year_diff\"\nonly_movies = df[df[\"duration\"]!=\"\"]\nonly_shows = df[df[\"season_count\"]!=\"\"]\ngrouped1 = only_movies[col].value_counts().reset_index()\ngrouped1 = grouped1.rename(columns = {col : \"count\", \"index\" : col})\ngrouped1 = grouped1.dropna()\ngrouped1 = grouped1.head(20)\ngrouped2 = only_shows[col].value_counts().reset_index()\ngrouped2 = grouped2.rename(columns = {col : \"count\", \"index\" : col})\ngrouped2 = grouped2.dropna()\ngrouped2 = grouped2.head(20)\n\n\nwith plt.xkcd():\n    figure(num=None, figsize=(8, 5)) \n    plt.scatter(grouped1[col], grouped1[\"count\"], color = \"hotpink\")\n    plt.scatter(grouped2[col], grouped2[\"count\"], color = '#88c999')\n    values_int = range(0, math.ceil(max(grouped1[col]))+1, 2)\n    plt.xticks(values_int)\n    plt.xlabel(\"Difference between the year when the content has been\\n added on Netflix and the realease year\")\n    plt.ylabel(\"Number of Movies\/TV Shows\")\n    plt.legend([\"Movies\", \"TV Shows\"])\n    plt.tight_layout()\n    plt.show()","76f37ca3":"print(df['rating'].unique())","f8f9bd0c":"ratings_list = ['TV-MA', 'R', 'PG-13', 'TV-14', 'TV-PG', 'TV-G', 'TV-Y', 'TV-Y7', 'PG', 'G', 'NC-17', 'TV-Y7-FV']\nratings_group_list = ['Little Kids', 'Older Kids', 'Teens', 'Mature']\nratings_dict={\n    'TV-G': 'Little Kids',\n    'TV-Y': 'Little Kids',\n    'G': 'Little Kids',\n    'TV-PG': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'PG': 'Older Kids',\n    'TV-Y7-FV': 'Older Kids',\n    'PG-13': 'Teens',\n    'TV-14': 'Teens',\n    'TV-MA': 'Mature',\n    'R': 'Mature', \n    'NC-17': 'Mature'\n}\nfor rating_val, rating_group in ratings_dict.items():\n    df.loc[df.rating == rating_val, \"rating\"] = rating_group\ndf['rating_val']=1\nx=0\nlabels=['kinda\\nless', 'not so\\nbad', 'holy shit\\nthat\\'s too\\nmany']\n\nwith plt.xkcd():\n    for r in ratings_group_list:\n        grouped = df[df['rating']==r]\n        year_df = grouped.groupby(['year_added']).sum()\n        year_df.reset_index(level=0, inplace=True)\n        plt.plot(year_df['year_added'], year_df['rating_val'], color=colours[x], marker='o')\n        values_int = range(2008, math.ceil(max(year_df['year_added']))+1, 2)\n        plt.yticks([200, 600, 1000], labels)\n        plt.xticks(values_int)\n        plt.title('Count of shows and movies that Netflix\\n has been producing for different audiences', fontsize=12)\n        plt.xlabel('Year', fontsize=14)\n        plt.ylabel('Content Count', fontsize=14)\n        x+=1\n    plt.legend(ratings_group_list)\n    plt.tight_layout()\n    plt.show()","8e207505":"col = \"listed_in\"\ncolours = [\"violet\", \"cornflowerblue\", \"darkseagreen\", \"mediumvioletred\", \"blue\", \"mediumseagreen\", \"darkmagenta\", \"darkslateblue\", \"seagreen\"]\ncountries_list = [\"United States\", \"India\", \"United Kingdom\", \"Japan\", \"France\", \"Canada\", \"Spain\", \"South Korea\", \"Germany\"]\n\nwith plt.xkcd():\n    figure(num=None, figsize=(20, 8)) \n    x=1\n    for country in countries_list:\n        df[\"from_country\"] = df['country'].fillna(\"\").apply(lambda x : 1 if country.lower() in x.lower() else 0)\n        small = df[df[\"from_country\"] == 1]\n        genre = \", \".join(small['listed_in'].fillna(\"\")).split(\", \")\n        genre = [x for x in genre if x != 'International Movies']\n        genre = [x for x in genre if x != 'International TV Shows']\n        genre = [x for x in genre if x != 'British TV Shows']\n        genre = [x for x in genre if x != 'Korean TV Shows']\n        genre = [x for x in genre if x != 'Spanish-Language TV Shows']\n        tags = Counter(genre).most_common(3)\n        tags = [_ for _ in tags if \"\" != _[0]]\n        labels, values = [_[0]+\"  \" for _ in tags][::-1], [_[1] for _ in tags][::-1]\n        if max(values)>200:\n            values_int = range(0, math.ceil(max(values)), 100)\n        elif max(values)>100 and max(values)<=200:\n            values_int = range(0, math.ceil(max(values))+50, 50)\n        else:\n            values_int = range(0, math.ceil(max(values))+25, 25)\n        plt.subplot(3, 3, x)\n        plt.barh(labels,values, color = colours[x-1])\n        plt.xticks(values_int)\n        plt.title(country)\n        x+=1\n    plt.suptitle('Top Genres')\n    plt.tight_layout()\n    plt.show()","44a8f3f5":"from wordcloud import WordCloud\nimport random\nfrom PIL import Image\nimport matplotlib\n\n# Custom colour map based on Netflix palette\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#b20710'])\n\ntext = str(list(df['description'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\n\nmask = np.array(Image.open('..\/input\/finallogo\/New Note.png'))\n\nwordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)\n\nplt.figure( figsize=(5,5))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","7747da0f":"cmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#b20710'])\n\ntext = str(list(df['title'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\n\nmask = np.array(Image.open('..\/input\/finallogo\/New Note.png'))\n\nwordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)\n\nplt.figure( figsize=(5,5))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","4b62b30b":"## Data Preparation","ad9353af":"## 6. Some of the oldest movies on Netflix","488e8420":"After you're done watching a [brilliant show](https:\/\/www.youtube.com\/watch?v=3sxg1xXmd0I) or [movie](https:\/\/www.youtube.com\/watch?v=prwUFBsDRLk&t=10s) on Netflix, does it ever occur to you just how awesome Netflix is for giving you access to this amazing plethora of content? Surely, I'm not alone in this, am I? One thought leads to another, and before you know it, you've made up your mind to do an exploratory data analysis to find out more about who the most popular actors are and which country prefers which genre. \n\nNow, I've spent my fair share of time making regular bar plots and pie plots using Python, and while they do a perfect job in conveying the results, I wanted to add a little fun element to this project. I recently learnt that you can create [xkcd-like plots](https:\/\/matplotlib.org\/stable\/gallery\/showcase\/xkcd.html) in matplotlib, Python's most popular data viz library, and decided that I should '*comify*' all my plots in this project just to make things a little more interesting. Let's take a look at what the data has to say!","be50983b":"## Installing Libraries","8de6ff9d":"## 5. Top Actors with most content","288744d6":"## 12. Wordcloud for title","cd14b79a":"## 10. Top Genres in each country","7f73800b":"## 3. Countries with most content","445a5041":"## 4. Netflix's favourite directors","d87b1c57":"## 1. Timeline","6d105a39":"## 2. Movies vs TV Shows","19dbff7e":"## 9. What kind of content is Netflix focusing on?","fe94d0aa":"## 8. Does Netflix have the latest content?","32482f41":"## 11. Wordcloud for description","403ca7f5":"## 7. Some of the oldest TV Shows on Netflix"}}