{"cell_type":{"6e0778e0":"code","60fc1d25":"code","f9a96705":"code","033b74fe":"code","02b1671c":"code","3ad49959":"code","5103b39c":"code","90f2bb05":"code","17c89eed":"code","21c7613d":"code","e39b5b8e":"code","e5640085":"code","33e64bc9":"code","b296fa03":"markdown","5c01a099":"markdown"},"source":{"6e0778e0":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","60fc1d25":"# read dataset\ndata = pd.read_csv('\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv')","f9a96705":"data.tail()","033b74fe":"data.info()","02b1671c":"data.describe()","3ad49959":"# green: Normal , red: Hernia , purple: Spondylolisthesis\n\ncolor_list = ['red' if i=='Hernia' else ('purple' if i=='Spondylolisthesis' else 'green' ) for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,# c - color\n                                       figsize= [15,15],# figure size\n                                       diagonal='hist',# histohram of each features\n                                       alpha=0.5,# opacity\n                                       s = 150, # size of marker\n                                       marker = 'o',# marker type\n                                       edgecolor= \"black\")\nplt.show()","5103b39c":"data['class'].value_counts()","90f2bb05":"# split dataset\nx,y= data.iloc[:,: -1], data.iloc[:,-1]","17c89eed":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,random_state=1)","21c7613d":"# import KNN algorithm\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)","e39b5b8e":"# fit and predict dataset\nknn.fit(x_train,y_train)\npred = knn.predict(x_test)","e5640085":"# print accuracy\nprint('With KNN (K=3) accuracy is: ',knn.score(x_test,y_test))","33e64bc9":"# find best parameter\nneighbor = np.arange(1,25)\ntrain_accuracy = []\ntest_accuracy = []\n\nfor i,k in enumerate(neighbor):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(x_train,y_train)\n    train_accuracy.append(knn.score(x_train, y_train))\n    test_accuracy.append(knn.score(x_test, y_test))\n\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neighbor, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neighbor, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neighbor)\nplt.savefig('graph.png')\nplt.show()\n\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","b296fa03":"## Introduction\n* Predict orthopedic disease with KNN algorithm (3 class labels) :\n  * Normal , Hernia , Spondylolisthesis\n* Calculate reliability -- Accuracy","5c01a099":"## Conclusion\n* Accuracy : 0.8387096774193549"}}