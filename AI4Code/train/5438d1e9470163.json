{"cell_type":{"2e1e28f9":"code","d0aa4ada":"code","514041fa":"code","291ec011":"code","e9207e3f":"code","38a58fde":"code","65a64bb3":"code","1be3adef":"code","16df04a3":"code","cc3e697c":"code","0a55aeff":"code","a1f91769":"code","f4b17b3c":"code","1bcb3f2f":"code","fd519fef":"code","e47242f3":"code","492c3f65":"code","fa661f4b":"code","bf5c9bc4":"code","7d5ccc38":"code","58e8330f":"code","eed46534":"code","ed41c76e":"code","469ec359":"code","d1f3110a":"code","34b508ba":"code","e3583852":"code","e4215753":"code","5c1ee531":"markdown","5f0aad0c":"markdown","27c07b0c":"markdown","c8d48f8d":"markdown","7515e325":"markdown","91c10bab":"markdown","60162110":"markdown","b2d7ea53":"markdown","f57bdf2f":"markdown","ebf9654e":"markdown","1f68c817":"markdown","1e908bd4":"markdown","7f7c6067":"markdown","72331af6":"markdown","535f3a83":"markdown","66663247":"markdown","d02225f5":"markdown","c37c2fbb":"markdown","597617e5":"markdown","62d1ad2a":"markdown","6fc798d2":"markdown"},"source":{"2e1e28f9":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data from API\nimport requests\n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","d0aa4ada":"prediction_period = 7  # Period for prediction, days","514041fa":"# Download data via API from the Portal of RNBO of Ukraine: https:\/\/api-covid19.rnbo.gov.ua\/\n# https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\ncode_region = 4914  # \"Zhytomyrsk\u0430 oblast\"\nprint(f'Download daily data from the Portal of RNBO of Ukraine')\nmyfile = requests.get(f'https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine&country={code_region}')\nopen('data', 'wb').write(myfile.content)\ndf_data = pd.read_json('data')\ndf_data","291ec011":"# Display the last 5 rows of the dataframe \"df_data\"\ndf_data.tail(5)","e9207e3f":"# Calculation daily data for number of confirmed cases\ndf_data['n_confirmed'] = df_data['confirmed'].diff()\n#df_data['n_confirmed'] = df_data['confirmed']","38a58fde":"# Filtering the missing data\ndata = df_data[['dates','n_confirmed']].dropna().reset_index(drop=True)\ndata['n_confirmed'] = data['n_confirmed'].astype('int')\ndata.tail(2)","65a64bb3":"# Delete the last zero value\ndata = data[:-1]\ndata.tail(2)","1be3adef":"# Build the plot\ndata['n_confirmed'].plot()","16df04a3":"# Prepairing data for modeling with Prophet\ndata.columns = ['ds', 'y']\ndata.tail()","cc3e697c":"# Removing zero values\ndata = data[data['y'] > 0].reset_index(drop=True)\ndata","0a55aeff":"# Devide dataset to training and validation datasets\nvalid = data[(len(data)-prediction_period):].reset_index(drop=True)\ndata = data[:(len(data)-prediction_period)]\nvalid","a1f91769":"data.tail(prediction_period)","f4b17b3c":"# The smallest increase in value\ndata.loc[303:305]","1bcb3f2f":"# Selection data with the biggest wave\ndf2 = data[304:].reset_index(drop=True)\ndf2","fd519fef":"df2.plot()","e47242f3":"# Build Prophet model\nmodel = Prophet()\n\n# Training model for all data\nmodel.fit(data)","492c3f65":"# Build Prophet model with parameters ans structure \n# from the notebook https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting \n# but without holidays\nmodel2 = Prophet(daily_seasonality=False, weekly_seasonality=False, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.1)\nmodel2.add_seasonality(name='weekly', period=5, fourier_order=10, \n                      mode = 'multiplicative', prior_scale = 0.10)\nmodel2.add_seasonality(name='triply', period=3, fourier_order=2, \n                      mode = 'multiplicative', prior_scale = 0.10)\n\n# Training model for df2\nmodel2.fit(df2)","fa661f4b":"def prediction_accuracy(valid, model):\n    # Calculation prediction accuracy for valid dataset by model\n    \n    future = model.make_future_dataframe(periods = prediction_period)   # Valid data prediction\n    forecast = model.predict(future)\n    forecast = forecast[(len(forecast)-prediction_period):]\n    forecast[forecast['yhat'] < 0]['yhat'] = 0\n    y_val = forecast['yhat'].round()  # Prediction    \n    y_target = valid['y']             # Real data\n    \n    return round(mean_absolute_error(y_val, y_target)*100\/valid['y'].sum(), 2)    ","bf5c9bc4":"# Make a forecast for prediction_period days ahead\nfuture = model.make_future_dataframe(periods = prediction_period)\nforecast = model.predict(future)\n\n# Make values integer, and replace negative values with zero\nfeature_all = ['yhat_lower', 'yhat', 'yhat_upper']\nforecast[feature_all] = forecast[feature_all].astype('int')\nfor feature in feature_all:\n    forecast.loc[forecast[feature] < 0, feature] = 0","7d5ccc38":"# Draw plot of the values with forecasting data\nfigure = model.plot(forecast, xlabel = 'Date', ylabel = 'Number of confirmed cases')","58e8330f":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component = model.plot_components(forecast)","eed46534":"# Ouput the prediction for the next prediction_period days\nforecast[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","ed41c76e":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model)}%\")","469ec359":"# Make a forecast for prediction_period days ahead\nfuture2 = model2.make_future_dataframe(periods = prediction_period)\nforecast2 = model2.predict(future2)\n\n# Make values integer, and replace negative values with zero\nforecast2[feature_all] = forecast2[feature_all].astype('int')\nfor feature in feature_all:\n    forecast2.loc[forecast2[feature] < 0, feature] = 0","d1f3110a":"# Draw plot of the values with forecasting data\nfigure2 = model2.plot(forecast2, xlabel = 'Date', ylabel = 'Number of confirmed cases')","34b508ba":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component2 = model2.plot_components(forecast2)","e3583852":"# Ouput the prediction for the next prediction_period days\nforecast2[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","e4215753":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model2)}%\")","5c1ee531":"**ADDITIONAL TASK:** Try changing the parameters of the Prophet model and evaluate how this will affect the shape of the curve and the accuracy of the simulation","5f0aad0c":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","27c07b0c":"## Dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data)","c8d48f8d":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","7515e325":"<a class=\"anchor\" id=\"0\"><\/a>\n# COVID-19 in one region of Ukraine\n### Thanks to @vbmokin https:\/\/www.kaggle.com\/vbmokin\/covid-19-ua-one-region-forecasting ","91c10bab":"The adequacy of a more complex model is much better.","60162110":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","b2d7ea53":"### All list of API parameters\nhttps:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\n\n### Example for region \"Zhytomyrsk\u0430 oblast\"\ncode_region = 4914","f57bdf2f":"**ADDITIONAL TASK:** Try to specify another number (instead of 304) as a reference point or other.\n\nLook all data with plot here: https:\/\/covid19.rnbo.gov.ua\/","ebf9654e":"### Selection data with the biggest wave","1f68c817":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","1e908bd4":"The adequacy of a simple model is very poor!","7f7c6067":"### For all data","72331af6":"## Acknowledgements\n\n### Datasets:\n- official data of Ukraine (https:\/\/covid19.rnbo.gov.ua\/) - via API\n- my dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data) - for the next commits\n\n### Notebooks:\n* [AI-ML-DS Training. L1A : COVID in UA - Prophet](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-covid-in-ua-prophet?scriptVersionId=63736090)\n* [COVID in UA: Prophet with 4, Nd seasonality](https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [COVID-19 in Ukraine: EDA & Forecasting](https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting)\n* [COVID-19 new cases in 70 countries - FB Prophet](https:\/\/www.kaggle.com\/vbmokin\/covid-19-new-cases-in-70-countries-fb-prophet)\n\n### Libraries from GitHub:\n- https:\/\/facebook.github.io\/prophet\/\n- https:\/\/facebook.github.io\/prophet\/docs\/\n- https:\/\/github.com\/facebook\/prophet","535f3a83":"### For all data","66663247":"### For the biggest wave - df2","d02225f5":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","c37c2fbb":"### For the biggest wave - df2","597617e5":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","62d1ad2a":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","6fc798d2":"**TASK:** Make similar calculations for the dataframe df2:\n1. Make a forecast for it for prediction_period=7 days ahead.\n2. Draw a plot of the values with forecasting data.\n3. Draw plot with the components (trend and weekly seasonality) of the forecasts.\n4. Ouput the prediction for the next prediction_period=7 days."}}