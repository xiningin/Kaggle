{"cell_type":{"73e6e267":"code","16806221":"code","443800ff":"code","d6bae353":"code","e2f25dcd":"code","77fc8d60":"code","b761f819":"code","d051b46b":"code","8a1ddf3a":"code","13772fd6":"code","5dafad72":"code","e1821ba6":"code","e8d04e4b":"code","549d44bc":"code","a13f857e":"code","59db268d":"code","8f579ef9":"code","e44c26de":"code","a35b2681":"code","6a27a075":"code","79ab3bbc":"markdown","6af328a7":"markdown","ff69fc51":"markdown","a196c033":"markdown","159151c2":"markdown","67e62afe":"markdown","7b124122":"markdown","df1bfcfe":"markdown","551d44fd":"markdown","ee334e37":"markdown","6a0a1e48":"markdown","d0dcfed5":"markdown","5ddaa9cd":"markdown","610431f0":"markdown","fe4a1556":"markdown","2a736f9f":"markdown","a06e38e5":"markdown","5e056d5f":"markdown","7c9cec72":"markdown","a49c06f4":"markdown","8806a3be":"markdown"},"source":{"73e6e267":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","16806221":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nid_train = df_train['PassengerId']\nid_test = df_test['PassengerId']\ndf = pd.concat([df_train, df_test])\ndf = df.set_index('PassengerId')\ndf.info()\ndf","443800ff":"def category_to_one_hot(df, name_column):\n    one_hot = pd.get_dummies(df[name_column], prefix=name_column, prefix_sep='-')\n    df = pd.concat([df, one_hot], axis=1)\n    df = df.drop(name_column, axis=1)\n    return df, one_hot\n\ndef exclude_low_category(df, name_column, threshold_using_category):\n    df_value_counts = df[name_column].value_counts()\n    excluding_categories = df_value_counts.loc[df_value_counts < threshold_using_category].index\n    for c in excluding_categories:\n        df.loc[df[name_column] == c, name_column] = None\n    return df","d6bae353":"name_column = 'Pclass'\nprint(df[name_column].value_counts(dropna=False))\ndf, one_hot = category_to_one_hot(df, name_column)\none_hot","e2f25dcd":"name_column = 'Name'\ndf[name_column] = df[name_column].str.extract(', (.*?\\.) ')\nprint(df[name_column].value_counts(dropna=False))\ndf = exclude_low_category(df, name_column, 10)\nprint(df[name_column].value_counts(dropna=False))\ndf, one_hot = category_to_one_hot(df, name_column)\none_hot","77fc8d60":"name_column = 'Sex'\nprint(df[name_column].value_counts(dropna=False))\ndf, one_hot = category_to_one_hot(df, name_column)\none_hot","b761f819":"name_column = 'Ticket'\ndf[name_column] = df[name_column].replace('( |^)[0-9]*', '', regex=True)\ndf[name_column] = df[name_column].replace('(\/|\\.).*', '', regex=True)\ndf.loc[df[name_column] == '', name_column] = None\nprint(df[name_column].value_counts(dropna=False))\ndf = exclude_low_category(df, name_column, 10)\nprint(df[name_column].value_counts(dropna=False))\ndf, one_hot = category_to_one_hot(df, name_column)\none_hot","d051b46b":"name_column = 'Cabin'\ndf['Cabin'] = df['Cabin'].replace(' .*', '', regex=True)\ndf['Cabin'] = df['Cabin'].replace('[0-9]*', '', regex=True)\nprint(df[name_column].value_counts(dropna=False))\ndf = exclude_low_category(df, name_column, 10)\nprint(df[name_column].value_counts(dropna=False))\ndf, one_hot = category_to_one_hot(df, name_column)\none_hot","8a1ddf3a":"name_column = 'Embarked'\nprint(df[name_column].value_counts(dropna=False))\ndf, one_hot = category_to_one_hot(df, name_column)\none_hot","13772fd6":"def standardize_df(df, name_column):\n    x = np.array(df.loc[df[name_column].notnull(), name_column])\n    standardized_x = (x - x.mean()) \/ x.std(ddof=1)\n    df.loc[df[name_column].notnull(), name_column] = standardized_x\n    df.loc[df[name_column].isnull(), name_column] = 888\n    return df","5dafad72":"name_column = 'Age'\ndf = standardize_df(df, name_column)\ndf[name_column]","e1821ba6":"name_column = 'SibSp'\ndf = standardize_df(df, name_column)\ndf[name_column]","e8d04e4b":"name_column = 'Parch'\ndf = standardize_df(df, name_column)\ndf[name_column]","549d44bc":"name_column = 'Fare'\ndf = standardize_df(df, name_column)\ndf[name_column]","a13f857e":"df.info()\ndf_train = df.loc[id_train]\ndf_test = df.loc[id_test]","59db268d":"name_class = 'Survived'\ny_train = np.array(df_train[name_class])\nX_train = np.array(df_train.drop(name_class, axis=1))\nX_test = np.array(df_test.drop(name_class, axis=1))","8f579ef9":"param_grid = {\n        'max_depth': [5, 10, 15],\n        'min_samples_split': [10, 20, 30],\n        'n_estimators': [100, 200, 300],\n        'min_samples_leaf': [5, 10, 15],\n        'n_jobs': [4],\n        \"bootstrap\": [True],\n        \"criterion\": [\"entropy\"]\n    }\ngrid = GridSearchCV(estimator=RandomForestClassifier(random_state=0),\n                    param_grid=param_grid,\n                    scoring=\"accuracy\",\n                    cv=10)\ngrid.fit(X_train, y_train)\nprint(f\"Best Score: {grid.best_score_}, Param: {grid.best_params_}\")","e44c26de":"# cv_results = grid.cv_results_\n# for mean, std, param in zip(cv_results['mean_test_score'], cv_results['std_test_score'], cv_results['params']):\n#     print(f\"Mean: {mean}, Std: {std}, Param: {param}\")","a35b2681":"best_model = grid.best_estimator_\ny_pred = best_model.predict(X_test)\ny_pred = np.array(y_pred, dtype=np.int)","6a27a075":"submission_df = pd.DataFrame({'PassengerId': id_test, 'Survived': y_pred})\nsubmission_df.to_csv('submission.csv', index=False)","79ab3bbc":"### 2.1.5. Cabin","6af328a7":"### 2.1.3. Sex","ff69fc51":"### 2.1.6. Embarked","a196c033":"## 2.3. Get Dataset","159151c2":"### 2.2.1. Age","67e62afe":"## 2.2. Standardize Numerical Features","7b124122":"### 2.2.3. Parch","df1bfcfe":"## 3.3. Prediction","551d44fd":"### 2.1.1. Pclass","ee334e37":"## 3.2. Hyperparameter Tuning","6a0a1e48":"# 1. Import Packages and Load Titanic Dataset","d0dcfed5":"## 2.1. One-Hot Encode Categorical Features","5ddaa9cd":"### 2.1.4. Ticket","610431f0":"## 3.1. Get X and y","fe4a1556":"# 2. Feature Engineering","2a736f9f":"### 2.2.2. SibSp","a06e38e5":"# 3. Random Forest Modeling","5e056d5f":"# 4. Submission","7c9cec72":"You can get all CV results with the code below.","a49c06f4":"### 2.2.4. Fare","8806a3be":"### 2.1.2. Name"}}