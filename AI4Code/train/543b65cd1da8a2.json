{"cell_type":{"299bffdc":"code","d6a7ce75":"code","4d6551a5":"code","0a02ec57":"code","bc79529f":"code","c40223b9":"code","d002c420":"code","29b9ab80":"code","56674a1a":"code","1ed2e768":"code","958e01f9":"code","a16b5f1d":"code","5284c8e0":"code","94e92695":"code","114bb839":"code","09f25305":"code","27e3eaa3":"code","9b63a7b9":"code","e4d4aa1d":"code","9ed9b8aa":"code","1b95d05c":"code","aa5f3285":"code","a66d4d95":"code","75eecf8b":"code","c779c4ee":"code","8aa9c01c":"code","bf3639d7":"code","26e003ec":"code","6b74663e":"code","140bdb69":"code","124cd2a6":"code","c980cc79":"code","6554b6d2":"code","d7507494":"code","8388f8c1":"code","4308e4df":"code","58b74054":"code","8b3bfd74":"code","7b7e9b36":"code","54836073":"code","0fe94915":"code","79758764":"code","d53fd515":"code","b16cb5b8":"code","3d987c23":"code","4d30ef27":"code","f48d0e07":"code","09deaa5e":"code","cb9ff3c6":"code","18eea126":"code","dd596db3":"code","c64c429d":"code","6fd0b087":"code","4779a031":"code","a722a449":"code","b0ccae55":"code","5fa85017":"code","b9cfea2c":"code","87bed58f":"code","ad889207":"code","8b070d57":"code","12dae723":"code","4baf2ea3":"code","c9bd231f":"code","fa78f8ce":"code","b7bc0780":"code","77c40eea":"code","343f4f4b":"code","d7a6b104":"code","78f18c21":"code","ac3607df":"code","94e853c8":"code","88c40b05":"code","b599f13c":"code","7a212138":"code","f3c48928":"code","ce1f7047":"code","6d95123d":"code","37276e09":"code","9465e07f":"code","8dbab42d":"code","7458bc92":"code","301af411":"code","89a83887":"code","c9a46a50":"code","ed02a28c":"code","5fc9d0e6":"code","2082254e":"code","6f1c1f24":"code","2c0e5e80":"code","87f7ff31":"code","de88ad24":"code","c28cc421":"code","f10be5d4":"code","cc5997bb":"code","cfaa005e":"code","01b37965":"code","3ec54454":"code","a82f35a3":"markdown","819b75ec":"markdown","8751fbf0":"markdown","78f34158":"markdown","d8ca63f6":"markdown","e03910cf":"markdown","db6521ff":"markdown","34aa84f4":"markdown","445574fe":"markdown","c9c2f373":"markdown","34a1a9c5":"markdown","50b33064":"markdown","30f96b1a":"markdown","36c28e56":"markdown","71a96287":"markdown","0516d35f":"markdown","78c2175f":"markdown","6bf68a35":"markdown","a77edbb4":"markdown","f537818b":"markdown","5600a63a":"markdown"},"source":{"299bffdc":"# Importing libraries necessary for the study\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\n\nimport os\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","d6a7ce75":"# reading the dataset\nHouseAu = pd.read_csv('..\/input\/train.csv')","4d6551a5":"# Head\nHouseAu.head()","0a02ec57":"#transposing the Data table to view the variables better\nHouseAu.head(12).transpose()","bc79529f":"# summary of the dataset: 1460 rows, 81 columns\nprint(HouseAu.info())","c40223b9":"# Let's check the dimensions of the dataframe\nHouseAu.shape","d002c420":"#Cleaning up variable Alley (Replacing NA => No Alley Access)\nHouseAu['Alley'].replace({np.nan:'No Alley Access'},inplace=True)\n100*(HouseAu['Alley'].value_counts()\/HouseAu['Alley'].count())","29b9ab80":"# As 93.8% of Alley is \"No Alley access\" it can be considered as a single value attribute and hence can be dropped\nHouseAu=HouseAu.drop(['Alley'],axis=1)","56674a1a":"#Cleaning up variable BsmtQual (Replacing NA => No Basement) to reduce the features\nHouseAu['BsmtQual'].replace({np.nan:'No Basement'},inplace=True)\nprint(100*(HouseAu['BsmtQual'].value_counts()\/HouseAu['BsmtQual'].count()))\n# Three levels can be combined as \"Others\" (Fa, No BAsement, Ex)\nHouseAu['BsmtQual'].replace({'Fa':'Others'},inplace=True)\nHouseAu['BsmtQual'].replace({'Ex':'Others'},inplace=True)\nHouseAu['BsmtQual'].replace({'No Basement':'Others'},inplace=True)\nprint(100*(HouseAu['BsmtQual'].value_counts()\/HouseAu['BsmtQual'].count()))\n","1ed2e768":"#Cleaning up variable BsmtCond (Replacing NA => No Basement)\nHouseAu['BsmtCond'].replace({np.nan:'No Basement'},inplace=True)\n100*(HouseAu['BsmtCond'].value_counts()\/HouseAu['BsmtCond'].count())\n# Three levels of fair\/good quality can be combined as OK \nHouseAu['BsmtCond'].replace({'Fa':'OK'},inplace=True)\nHouseAu['BsmtCond'].replace({'TA':'OK'},inplace=True)\nHouseAu['BsmtCond'].replace({'Gd':'OK'},inplace=True)\n# Two levels of poor quality can be combined as NOK (Po, No Basement)\nHouseAu['BsmtCond'].replace({'Po':'NOK'},inplace=True)\nHouseAu['BsmtCond'].replace({'No Basement':'NOK'},inplace=True)\nprint(100*(HouseAu['BsmtCond'].value_counts()\/HouseAu['BsmtCond'].count()))\n","958e01f9":"#Can be considered as single value and can be dropped from dataset\nHouseAu=HouseAu.drop(['BsmtCond'],axis=1)","a16b5f1d":"#Cleaning up variable BsmtExposure (Replacing NA => No Basement)\nHouseAu['BsmtExposure'].replace({np.nan:'No Basement'},inplace=True)\n100*(HouseAu['BsmtExposure'].value_counts()\/HouseAu['BsmtExposure'].count())","5284c8e0":"#Cleaning up variable BsmtFinType1 (Replacing NA => No Basement)\nHouseAu['BsmtFinType1'].replace({np.nan:'No Basement'},inplace=True)\n100*(HouseAu['BsmtFinType1'].value_counts()\/HouseAu['BsmtFinType1'].count())","94e92695":"#Cleaning up variable BsmtFinType2 (Replacing NA => No Basement)\nHouseAu['BsmtFinType2'].replace({np.nan:'No Basement'},inplace=True)\n100*(HouseAu['BsmtFinType2'].value_counts()\/HouseAu['BsmtFinType2'].count())","114bb839":"#Taking a deep dive into the Basement related attributes to understand the correlations\nHouseAu_Basement=HouseAu[['BsmtQual','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']]\nHouseAu_Basement.head()\nHouseAu_Basement.info()\n##HouseAu['BsmtQual']=HouseAu['BsmtQual'].values.astype(np.int64)","09f25305":"# pairwise scatter plot to explore Basement attributes\n\nplt.figure(figsize=(20, 10))\nsns.pairplot(HouseAu_Basement)\nplt.show()","27e3eaa3":"#Dropping of correlated variables and keeping only TotalBsmtSF as this is the key one remaining are related to it.\nHouseAu=HouseAu.drop(['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF'],axis=1)","9b63a7b9":"#Plotting the categorical variables related to Basement to find which ones have correlation and can be dropped\nplt.figure(figsize=(20, 12))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'BsmtQual', y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'BsmtExposure', y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'BsmtFinType1',y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'BsmtFinType2',y = 'SalePrice', data = HouseAu)","e4d4aa1d":"#Dropping variables BsmtFinType1 and BsmtFinType2 as two do not seem to have a strong influence on sale price\nHouseAu=HouseAu.drop(['BsmtFinType1','BsmtFinType2'],axis=1)","9ed9b8aa":"#Cleaning up variable FireplaceQu (Replacing NA => No Fireplace)\nHouseAu['FireplaceQu'].replace({np.nan:'No Fireplace'},inplace=True)\nprint(100*(HouseAu['FireplaceQu'].value_counts()\/HouseAu['FireplaceQu'].count()))\n#Imputing level values of FireplaceQu\nHouseAu['FireplaceQu'].replace({'Fa':'OK Fireplace'},inplace=True)\nHouseAu['FireplaceQu'].replace({'TA':'OK Fireplace'},inplace=True)\nHouseAu['FireplaceQu'].replace({'Gd':'OK Fireplace'},inplace=True)\nHouseAu['FireplaceQu'].replace({'Ex':'OK Fireplace'},inplace=True)\nHouseAu['FireplaceQu'].replace({'Po':'OK Fireplace'},inplace=True)\nprint(100*(HouseAu['FireplaceQu'].value_counts()\/HouseAu['FireplaceQu'].count()))","1b95d05c":"#Plotting the categorical variables related to FireplaceQu and checking correlation with SalePrice\nplt.figure(figsize=(20, 12))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'FireplaceQu', y = 'SalePrice', data = HouseAu)\n#Clearly Fireplace presence drives Sale price to some extent","aa5f3285":"#Cleaning up variable GarageType (Replacing NA => No Garage)\nHouseAu['GarageType'].replace({np.nan:'No Garage'},inplace=True)\n100*(HouseAu['GarageType'].value_counts()\/HouseAu['GarageType'].count())","a66d4d95":"#Cleaning up variable GarageFinish (Replacing NA => No Garage)\nHouseAu['GarageFinish'].replace({np.nan:'No Garage'},inplace=True)\n100*(HouseAu['GarageFinish'].value_counts()\/HouseAu['GarageFinish'].count())","75eecf8b":"#Cleaning up variable GarageQual (Replacing NA => No Garage)\nHouseAu['GarageQual'].replace({np.nan:'No Garage'},inplace=True)\nprint(100*(HouseAu['GarageQual'].value_counts()\/HouseAu['GarageQual'].count()))\n#Imputing level values of GarageQual\nHouseAu['GarageQual'].replace({'TA':'OK Garage'},inplace=True)\nHouseAu['GarageQual'].replace({'Fa':'OK Garage'},inplace=True)\nHouseAu['GarageQual'].replace({'Gd':'OK Garage'},inplace=True)\nHouseAu['GarageQual'].replace({'Ex':'OK Garage'},inplace=True)\nHouseAu['GarageQual'].replace({'Po':'No Garage'},inplace=True)\nprint(100*(HouseAu['GarageQual'].value_counts()\/HouseAu['GarageQual'].count()))","c779c4ee":"#Cleaning up variable GarageCond (Replacing NA => No Garage)\nHouseAu['GarageCond'].replace({np.nan:'No Garage'},inplace=True)\nprint(100*(HouseAu['GarageCond'].value_counts()\/HouseAu['GarageCond'].count()))\n#Imputing level values of GarageCond\nHouseAu['GarageCond'].replace({'TA':'OK'},inplace=True)\nHouseAu['GarageCond'].replace({'Fa':'OK'},inplace=True)\nHouseAu['GarageCond'].replace({'Gd':'OK'},inplace=True)\nHouseAu['GarageCond'].replace({'Ex':'OK'},inplace=True)\nHouseAu['GarageCond'].replace({'Po':'No Garage'},inplace=True)\nprint(100*(HouseAu['GarageCond'].value_counts()\/HouseAu['GarageCond'].count()))","8aa9c01c":"#Plotting the categorical variables related to Garage and checking correlation with SalePrice\nplt.figure(figsize=(20, 12))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'GarageCond', y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'GarageQual', y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'GarageFinish', y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'GarageType', y = 'SalePrice', data = HouseAu)\n","bf3639d7":"#GarageCond and GarageQual seem to be same in influence on SalePrice, one can be dropped\nHouseAu=HouseAu.drop(['GarageQual'],axis=1)\n#Garage type - CarPort, No Garage, Basement, 2Types can be combined as \"Others\"\n#Imputing values to \"Others\"\nHouseAu['GarageType'].replace({'CarPort':'No Garage'},inplace=True)\nHouseAu['GarageType'].replace({'Basment':'No Garage'},inplace=True)\nHouseAu['GarageType'].replace({'No Garage':'No Garage'},inplace=True)\nHouseAu['GarageType'].replace({'2Types':'No Garage'},inplace=True)\nprint(100*(HouseAu['GarageType'].value_counts()\/HouseAu['GarageType'].count()))","26e003ec":"#Cleaning up variable PoolQC (Replacing NA => No Pool)\nHouseAu['PoolQC'].replace({np.nan:'No Pool'},inplace=True)\nprint(100*(HouseAu['PoolQC'].value_counts()\/HouseAu['PoolQC'].count()))\n#Imputing level values of PoolQC\nHouseAu['PoolQC'].replace({'Fa':'OK'},inplace=True)\nHouseAu['PoolQC'].replace({'Gd':'OK'},inplace=True)\nHouseAu['PoolQC'].replace({'Ex':'OK'},inplace=True)\nprint(100*(HouseAu['PoolQC'].value_counts()\/HouseAu['PoolQC'].count()))","6b74663e":"#Plotting the categorical variables related to PooQC to find which ones have correlation and can be dropped\nplt.figure(figsize=(10,10))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'PoolQC', y = 'SalePrice', data = HouseAu)\n#PoolQC is only 0.4% of the houses so a small subset of data","140bdb69":"#Sale Price is not strongly changing with Pool or No Pool, effects can be captured with Pool Area. Do dropping PoolQC\nHouseAu=HouseAu.drop(['PoolQC'],axis=1)","124cd2a6":"#Cleaning up variable Fence (Replacing NA => No Fence)\nHouseAu['Fence'].replace({np.nan:'No Fence'},inplace=True)\nprint(100*(HouseAu['Fence'].value_counts()\/HouseAu['Fence'].count()))\n#Imputing level values of Fence\nHouseAu['Fence'].replace({'MnPrv':'Fence'},inplace=True)\nHouseAu['Fence'].replace({'GdPrv':'Fence'},inplace=True)\nHouseAu['Fence'].replace({'GdWo':'Fence'},inplace=True)\nHouseAu['Fence'].replace({'MnWw':'Fence'},inplace=True)\nprint(100*(HouseAu['Fence'].value_counts()\/HouseAu['Fence'].count()))","c980cc79":"#Cleaning up variable MiscFeature (Replacing NA => No Fence)\nHouseAu['MiscFeature'].replace({np.nan:'None'},inplace=True)\n100*(HouseAu['MiscFeature'].value_counts()\/HouseAu['MiscFeature'].count())","6554b6d2":"#Plotting the categorical variables related to MiscFeature to find which ones have correlation and can be dropped\nplt.figure(figsize=(20,20))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'MiscFeature', y = 'SalePrice', data = HouseAu)\n#MiscFeature levels are a minor subset in the dataset but seem to have a good influence on sale price.","d7507494":"#Taking a deep dive into the Basement related attributes to understand the correlations\nHouseAu_Porch=HouseAu[['OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch']]\nprint(HouseAu_Porch.head())\nprint(HouseAu_Porch.info())\n# pairwise scatter plot\nplt.figure(figsize=(20, 10))\nsns.pairplot(HouseAu_Porch)\nplt.show()","8388f8c1":"#From the correlation pairplots, Out of four variables on Porch, we can capture key effects from Open Porch and Enclosed Porch\nHouseAu=HouseAu.drop(['ScreenPorch','3SsnPorch'],axis=1)","4308e4df":"print(100*(HouseAu['Neighborhood'].astype('category').value_counts()\/HouseAu['Neighborhood'].count()))\n#Imputing values of the minor category levels in Neighborhood\nHouseAu['Neighborhood'].replace({'ClearCr':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'SWISU':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'StoneBr':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'Blmngtn':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'MeadowV':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'BrDale':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'Veenker':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'NPkVill':'Others'},inplace=True)\nHouseAu['Neighborhood'].replace({'Blueste':'Others'},inplace=True)\nprint(100*(HouseAu['Neighborhood'].astype('category').value_counts()\/HouseAu['Neighborhood'].count()))","58b74054":"#Binning of the Year built variable\n#Creating bins to define the year periods - 1872-1925, 1925-1950,1950-1975, 1976-1990, 1991-2000,2001-2010\nbins=[1872,1925,1950,1976,1991,2001,2010]\nslot_names=['1872-1925','1925-1950','1950-1975','1976-1990','1991-2000','2001-2010']\nHouseAu['YearBuilt']=pd.cut(HouseAu['YearBuilt'],bins,labels=slot_names,include_lowest=True)\nprint(100*(HouseAu['YearBuilt'].value_counts()\/HouseAu['YearBuilt'].count()))","8b3bfd74":"#Binning of the YearRemodAdd variable\n#Creating bins to define the year periods - 1872-1925, 1925-1950,1950-1975, 1976-1990, 1991-2000,2001-2010\nbins=[1872,1950,1976,1991,2001,2010]\nslot_names=['1872-1950','1950-1975','1976-1990','1991-2000','2001-2010']\nHouseAu['YearRemodAdd']=pd.cut(HouseAu['YearRemodAdd'],bins,labels=slot_names,include_lowest=True)\n100*(HouseAu['YearRemodAdd'].value_counts()\/HouseAu['YearRemodAdd'].count())","7b7e9b36":"#Plotting the categorical variables related toYear Built and Year Remodified to find which ones have correlation and can be dropped\nplt.figure(figsize=(20,15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'YearBuilt', y = 'SalePrice', data = HouseAu)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'YearRemodAdd', y = 'SalePrice', data = HouseAu)","54836073":"# percentage of missing values in each column\nround(HouseAu.isnull().sum()\/len(HouseAu.index), 2)*100","0fe94915":"# missing values in rows\nHouseAu.isnull().sum(axis=1)","79758764":"#Converting the binned year columns as object datatype\nHouseAu['YearBuilt']=HouseAu['YearBuilt'].values.astype(np.object)\nHouseAu['YearRemodAdd']=HouseAu['YearRemodAdd'].values.astype(np.object)","d53fd515":"#Cleaning up variable LotFrontage (Replacing NA => 0)\nHouseAu['LotFrontage'].replace({np.nan:'0'},inplace=True)\nHouseAu['LotFrontage']=HouseAu['LotFrontage'].values.astype(np.int64)\n100*(HouseAu['LotFrontage'].value_counts()\/HouseAu['LotFrontage'].count())\nHouseAu.info()","b16cb5b8":"#MasVnrArea: Masonry veneer area in square feet\n100*(HouseAu['MasVnrType'].astype('category').value_counts()\/HouseAu['MasVnrType'].count())","3d987c23":"HouseAu=HouseAu.drop(['GarageYrBlt'],axis=1) # As it is same as Year Built","4d30ef27":"#Replacing missing value with Unknown\nHouseAu['Electrical'].replace({np.nan:'Unknown'},inplace=True)\nprint(100*(HouseAu['Electrical'].value_counts()\/HouseAu['Electrical'].count()))\n#Imputing the minor category levels of Electrical\nHouseAu['Electrical'].replace({'FuseA':'Other'},inplace=True)\nHouseAu['Electrical'].replace({'FuseF':'Other'},inplace=True)\nHouseAu['Electrical'].replace({'FuseP':'Other'},inplace=True)\nHouseAu['Electrical'].replace({'Mix':'Other'},inplace=True)\nHouseAu['Electrical'].replace({'Unknown':'Other'},inplace=True)\nprint(100*(HouseAu['Electrical'].value_counts()\/HouseAu['Electrical'].count()))","f48d0e07":"# checking whether some rows have more than 1 missing values\nlen(HouseAu[HouseAu.isnull().sum(axis=1) > 1].index)","09deaa5e":"#NULL Rows in MasVnrType \nHouseAu=HouseAu.dropna(how='any',axis=0)","cb9ff3c6":"#Dropping column MasVnrarea and LotFrontage as these are not adding value\nHouseAu=HouseAu.drop(['MasVnrArea','LotFrontage'],axis=1)","18eea126":"# percentage of missing values in each column\nround(HouseAu.isnull().sum()\/len(HouseAu.index), 2)*100","dd596db3":"HouseAu.describe().transpose()","c64c429d":"#finding uniqness in records we see there is no attribute column with a single value\nHouseAu.nunique().sort_values(ascending =True)","6fd0b087":"HouseAu.shape","4779a031":"# all numeric (float and int) variables in the dataset\nHouseAu_numeric = HouseAu.select_dtypes(include=['float64', 'int64'])\nHouseAu_numeric.head()","a722a449":"# dropping ID column \nHouseAu_numeric = HouseAu_numeric.drop(['Id'], axis=1)\nHouseAu_numeric.head()","b0ccae55":"# pairwise scatter plot\nplt.figure(figsize=(20, 10))\nsns.pairplot(HouseAu_numeric)\nplt.show()","5fa85017":"# correlation matrix\ncor = HouseAu_numeric.corr()\ncor","b9cfea2c":"# plotting correlations on a heatmap\n# figure size\nplt.figure(figsize=(16,8))\n# heatmap\nsns.heatmap(cor, cmap=\"YlGnBu\", annot=True)\nplt.show()","87bed58f":"#Target variable: sale price of house\nsns.distplot(HouseAu['SalePrice'])\nplt.show()\n#Normally distributed SalePrice","ad889207":"# Predictor variable: LotArea --> Lot size in square feet\nsns.distplot(HouseAu['LotArea'])\nplt.show()\n#Normally distributed --- LotArea","8b070d57":"# Predictor variable: GrLivArea--> Above grade (ground) living area square feet\nsns.distplot(HouseAu['GrLivArea'])\nplt.show()\n#Normally distributed but slightly bimodal","12dae723":"# Predictor variable: TotalBsmtSF ---> Total square feet of basement area\nsns.distplot(HouseAu['TotalBsmtSF'])\nplt.show()","4baf2ea3":"# Predictor variable: 1stFlrSF: First Floor square feet\nsns.distplot(HouseAu['1stFlrSF'])\nplt.show()\n#Normally distributed with bimodaldistribution","c9bd231f":"# Predictor variable: 2ndFlrSF: Second floor square feet\nsns.distplot(HouseAu['2ndFlrSF'])\nplt.show()\n#Normally distributed ","fa78f8ce":"HouseAu.info()","b7bc0780":"# split into X and y\nX = HouseAu.loc[:, ['MSSubClass','MSZoning','LotArea','Street','LotShape','LandContour','Utilities',\n                    'LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','OverallQual',\n                    'OverallCond','YearBuilt','YearRemodAdd','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType',\n                    'ExterQual','ExterCond','Foundation','BsmtQual','BsmtExposure','TotalBsmtSF','Heating','HeatingQC','CentralAir','Electrical',\n                    '1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath',\n                    'BedroomAbvGr','KitchenAbvGr','KitchenQual','TotRmsAbvGrd','Functional','Fireplaces','FireplaceQu',\n                    'GarageType','GarageFinish','GarageCars','GarageArea','GarageCond','PavedDrive',\n                    'WoodDeckSF','OpenPorchSF','EnclosedPorch','PoolArea','Fence','MiscFeature',\n                    'MiscVal','MoSold','YrSold','SaleType','SaleCondition']]\n\ny = HouseAu['SalePrice']","77c40eea":"# creating dummy variables for categorical variables\n\n# subset all categorical variables\nHouseAu_categorical = X.select_dtypes(include=['object'])\nHouseAu_categorical.head()","343f4f4b":"# convert categorical variables into dummies\nHouseAu_dummies = pd.get_dummies(HouseAu_categorical, drop_first=True)\nHouseAu_dummies.head()","d7a6b104":"# drop categorical variables \nX = X.drop(list(HouseAu_categorical.columns), axis=1)","78f18c21":"# concat dummy variables with X\nX = pd.concat([X, HouseAu_dummies], axis=1)","ac3607df":"X.shape","94e853c8":"# scaling the features\nfrom sklearn.preprocessing import scale\n\n# storing column names in cols, since column names are (annoyingly) lost after \n# scaling (the df is converted to a numpy array)\ncols = X.columns\nX = pd.DataFrame(scale(X))\nX.columns = cols\nX.columns","88c40b05":"# split into train and test\nfrom sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    train_size=0.7,\n                                                    test_size = 0.3, random_state=100)","b599f13c":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n# cross validation\nfolds = 5\n\nlasso = Lasso()\n\n# cross validation\nmodel_cv = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv.fit(X_train, y_train) ","7a212138":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","f3c48928":"# plotting mean test and train scores with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\n\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.show()","ce1f7047":"model_cv.best_params_","6d95123d":"alpha =100\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) ","37276e09":"#Extracting the coefficients and model equation from lasso regression\nlasso.coef_","9465e07f":"# lasso model parameters generation\nmodel_parameters = list(lasso.coef_)\nmodel_parameters.insert(0, lasso.intercept_)\nmodel_parameters = [round(x, 1) for x in model_parameters]\ncols = X.columns\ncols = cols.insert(0, \"constant\")\nprint(list(zip(cols, model_parameters)))","8dbab42d":"# model with optimal alpha\n# lasso regression\nlm1 = Lasso(alpha=100)\n#lm1 = Lasso(alpha=0.001)\nlm1.fit(X_train, y_train)\n\nfrom sklearn.metrics import r2_score\n# predict\ny_train_pred = lm1.predict(X_train)\n#print(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))\ny_test_pred = lm1.predict(X_test)\n#print(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))\n\n#New Code for R2\nr_square_score=r2_score(y_test,y_test_pred)\nprint(\"R Square score:{}\".format(r_square_score))","7458bc92":"#AIC and BIC Calculation\nn= 1016 # n is equal to total datapoints on which model is built\nk= 100 # k is equal to number of predictor variables in model built\nresid=np.subtract(y_test_pred,y_test)\nrss=np.sum(np.power(resid,2))\nprint(\"RSS:{}\".format(rss))\naic=n*np.log(rss\/n)+2*k\nprint(\"AIC:{}\".format(aic))\nbic=n*np.log(rss\/n)+k*np.log(n)\nprint(\"BIC:{}\".format(bic))","301af411":"#Predictor Variables from the Model built using Lasso Regression:\n[('constant', 180762.1), ('MSSubClass', -2299.5), ('LotArea', 6976.5), ('OverallQual', 12762.5), ('OverallCond', 5932.6), ('TotalBsmtSF', 13352.4), ('1stFlrSF', 0.0), ('2ndFlrSF', 6658.1), ('LowQualFinSF', -2033.2), ('GrLivArea', 27001.7), ('BsmtFullBath', 6507.3), ('BsmtHalfBath', 0.0), ('FullBath', 1629.3), ('HalfBath', 1682.0), ('BedroomAbvGr', -4823.0), ('KitchenAbvGr', -4531.2), ('TotRmsAbvGrd', 1524.2), ('Fireplaces', 2298.4), ('GarageCars', 5535.4), ('GarageArea', 322.1), ('WoodDeckSF', 582.8), ('OpenPorchSF', -0.0), ('EnclosedPorch', -1227.0), ('PoolArea', 4833.0), ('MiscVal', 1988.5), ('MoSold', 0.0), ('YrSold', 208.3), ('MSZoning_FV', 4201.8), ('MSZoning_RH', -53.1), ('MSZoning_RL', 2131.6), ('MSZoning_RM', 0.0), ('Street_Pave', 2159.7), ('LotShape_IR2', -282.6), ('LotShape_IR3', 25.1), ('LotShape_Reg', -822.2), ('LandContour_HLS', 1103.4), ('LandContour_Low', -1905.3), ('LandContour_Lvl', 0.0), ('Utilities_NoSeWa', -192.7), ('LotConfig_CulDSac', 2034.0), ('LotConfig_FR2', -1105.6), ('LotConfig_FR3', -753.2), ('LotConfig_Inside', -551.2), ('LandSlope_Mod', 458.8), ('LandSlope_Sev', -4745.6), ('Neighborhood_CollgCr', -925.1), ('Neighborhood_Crawfor', 3167.2), ('Neighborhood_Edwards', -1462.2), ('Neighborhood_Gilbert', -1587.3), ('Neighborhood_IDOTRR', 348.6), ('Neighborhood_Mitchel', -2035.4), ('Neighborhood_NAmes', -2336.2), ('Neighborhood_NWAmes', -1841.2), ('Neighborhood_NoRidge', 6125.6), ('Neighborhood_NridgHt', 3541.9), ('Neighborhood_OldTown', -2038.7), ('Neighborhood_Others', 2368.6), ('Neighborhood_Sawyer', -0.0), ('Neighborhood_SawyerW', 602.9), ('Neighborhood_Somerst', -7.3), ('Neighborhood_Timber', -971.6), ('Condition1_Feedr', 1509.1), ('Condition1_Norm', 5238.4), ('Condition1_PosA', 1450.9), ('Condition1_PosN', 1925.5), ('Condition1_RRAe', -334.5), ('Condition1_RRAn', 1224.4), ('Condition1_RRNe', 0.0), ('Condition1_RRNn', 557.4), ('Condition2_Feedr', -0.0), ('Condition2_Norm', 0.0), ('Condition2_PosA', 1055.2), ('Condition2_PosN', -15909.2), ('Condition2_RRAe', -0.0), ('Condition2_RRAn', -0.0), ('Condition2_RRNn', 0.0), ('BldgType_2fmCon', 0.0), ('BldgType_Duplex', -936.7), ('BldgType_Twnhs', -2828.2), ('BldgType_TwnhsE', -2544.1), ('HouseStyle_1.5Unf', 982.8), ('HouseStyle_1Story', 3463.2), ('HouseStyle_2.5Fin', -2102.8), ('HouseStyle_2.5Unf', -588.6), ('HouseStyle_2Story', -765.1), ('HouseStyle_SFoyer', 54.0), ('HouseStyle_SLvl', 955.6), ('YearBuilt_1925-1950', 2674.2), ('YearBuilt_1950-1975', 1812.2), ('YearBuilt_1976-1990', 3304.6), ('YearBuilt_1991-2000', 6088.8), ('YearBuilt_2001-2010', 7061.1), ('YearRemodAdd_1950-1975', 1089.8), ('YearRemodAdd_1976-1990', 0.0), ('YearRemodAdd_1991-2000', 1295.7), ('YearRemodAdd_2001-2010', 1487.3), ('RoofStyle_Gable', -0.0), ('RoofStyle_Gambrel', 73.5), ('RoofStyle_Hip', 651.7), ('RoofStyle_Mansard', 183.3), ('RoofStyle_Shed', 2116.0), ('RoofMatl_CompShg', 0.0), ('RoofMatl_Membran', -0.0), ('RoofMatl_Metal', 1124.1), ('RoofMatl_Roll', -141.8), ('RoofMatl_Tar&Grv', -934.8), ('RoofMatl_WdShake', -427.2), ('RoofMatl_WdShngl', 63.9), ('Exterior1st_AsphShn', -0.0), ('Exterior1st_BrkComm', -161.8), ('Exterior1st_BrkFace', 2355.7), ('Exterior1st_CBlock', -30.6), ('Exterior1st_CemntBd', 0.0), ('Exterior1st_HdBoard', -574.3), ('Exterior1st_ImStucc', -0.0), ('Exterior1st_MetalSd', 0.0), ('Exterior1st_Plywood', -393.2), ('Exterior1st_Stone', -99.7), ('Exterior1st_Stucco', -549.7), ('Exterior1st_VinylSd', -0.0), ('Exterior1st_Wd Sdng', -0.0), ('Exterior1st_WdShing', 238.0), ('Exterior2nd_AsphShn', 544.7), ('Exterior2nd_Brk Cmn', 0.0), ('Exterior2nd_BrkFace', -785.7), ('Exterior2nd_CBlock', -4.5), ('Exterior2nd_CmentBd', 830.9), ('Exterior2nd_HdBoard', 0.0), ('Exterior2nd_ImStucc', 862.6), ('Exterior2nd_MetalSd', 593.2), ('Exterior2nd_Other', 359.6), ('Exterior2nd_Plywood', -897.3), ('Exterior2nd_Stone', 398.1), ('Exterior2nd_Stucco', -494.5), ('Exterior2nd_VinylSd', -0.0), ('Exterior2nd_Wd Sdng', -1708.3), ('Exterior2nd_Wd Shng', -919.7), ('MasVnrType_BrkFace', 0.0), ('MasVnrType_None', 0.0), ('MasVnrType_Stone', 2715.7), ('ExterQual_Fa', -723.7), ('ExterQual_Gd', -8167.3), ('ExterQual_TA', -8529.6), ('ExterCond_Fa', -267.7), ('ExterCond_Gd', -0.0), ('ExterCond_Po', -0.0), ('ExterCond_TA', 430.7), ('Foundation_CBlock', 2254.4), ('Foundation_PConc', 1657.6), ('Foundation_Slab', 389.7), ('Foundation_Stone', 335.5), ('Foundation_Wood', -1002.7), ('BsmtQual_Others', 6617.0), ('BsmtQual_TA', 1466.7), ('BsmtExposure_Gd', 4489.8), ('BsmtExposure_Mn', -1743.4), ('BsmtExposure_No', -4071.3), ('BsmtExposure_No Basement', 298.7), ('Heating_GasA', -0.0), ('Heating_GasW', 407.8), ('Heating_Grav', 315.7), ('Heating_OthW', -1628.0), ('Heating_Wall', 186.3), ('HeatingQC_Fa', -796.3), ('HeatingQC_Gd', -265.3), ('HeatingQC_Po', -189.7), ('HeatingQC_TA', -0.0), ('CentralAir_Y', 595.5), ('Electrical_SBrkr', -176.6), ('KitchenQual_Fa', -3268.2), ('KitchenQual_Gd', -10980.7), ('KitchenQual_TA', -10858.8), ('Functional_Maj2', -786.1), ('Functional_Min1', 2032.5), ('Functional_Min2', 861.8), ('Functional_Mod', -290.7), ('Functional_Sev', -854.9), ('Functional_Typ', 5678.9), ('FireplaceQu_OK Fireplace', -1838.5), ('GarageType_BuiltIn', 766.3), ('GarageType_Detchd', 232.7), ('GarageType_No Garage', -468.6), ('GarageFinish_No Garage', 3184.3), ('GarageFinish_RFn', -1373.5), ('GarageFinish_Unf', -1305.2), ('GarageCond_OK', 1108.2), ('PavedDrive_P', -990.9), ('PavedDrive_Y', 195.3), ('Fence_No Fence', 171.3), ('MiscFeature_None', 0.0), ('MiscFeature_Othr', 371.7), ('MiscFeature_Shed', -0.0), ('MiscFeature_TenC', -2114.1), ('SaleType_CWD', 521.8), ('SaleType_Con', 643.6), ('SaleType_ConLD', 376.3), ('SaleType_ConLI', 1153.8), ('SaleType_ConLw', 562.1), ('SaleType_New', 5113.1), ('SaleType_Oth', 756.3), ('SaleType_WD', 0.0), ('SaleCondition_AdjLand', 441.1), ('SaleCondition_Alloca', -574.3), ('SaleCondition_Family', 478.6), ('SaleCondition_Normal', 2011.1), ('SaleCondition_Partial', -0.0)]","89a83887":"# split into X and y, X being selected from predictor variables found in Lasso model\nX = HouseAu.loc[:, ['MSSubClass','LotArea','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','OverallQual',\n                    'OverallCond','YearBuilt','YearRemodAdd','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType',\n                    'ExterQual','Foundation','BsmtQual','BsmtExposure','TotalBsmtSF','Heating','HeatingQC','CentralAir','Electrical',\n                    '2ndFlrSF','LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath',\n                    'KitchenAbvGr','KitchenQual','TotRmsAbvGrd','Functional','Fireplaces','FireplaceQu',\n                    'GarageType','GarageFinish','GarageCars','GarageCond','WoodDeckSF','EnclosedPorch','PoolArea',\n                    'SaleType','SaleCondition']]\n\ny = HouseAu['SalePrice']","c9a46a50":"# creating dummy variables for categorical variables\n\n# subset all categorical variables\nHouseAu_categorical = X.select_dtypes(include=['object'])\nHouseAu_categorical.head()","ed02a28c":"# convert categorical variables into dummies\nHouseAu_dummies = pd.get_dummies(HouseAu_categorical, drop_first=True)\nHouseAu_dummies.head()","5fc9d0e6":"# drop categorical variables \nX = X.drop(list(HouseAu_categorical.columns), axis=1)","2082254e":"# concat dummy variables with X\nX = pd.concat([X, HouseAu_dummies], axis=1)","6f1c1f24":"X.shape","2c0e5e80":"# scaling the features\nfrom sklearn.preprocessing import scale\n\n# storing column names in cols, since column names are (annoyingly) lost after \n# scaling (the df is converted to a numpy array)\ncols = X.columns\nX = pd.DataFrame(scale(X))\nX.columns = cols\nX.columns","87f7ff31":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv.fit(X_train, y_train) ","de88ad24":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results = cv_results[cv_results['param_alpha']<=200]\ncv_results.head()","c28cc421":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.show()","f10be5d4":"model_cv.best_params_","cc5997bb":"alpha = 10\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\n#Predictor Variables from the Model built using Ridge Regression:\nridge.coef_","cfaa005e":"# ridge model parameters\nmodel_parameters = list(ridge.coef_)\nmodel_parameters.insert(0, ridge.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = X.columns\ncols = cols.insert(0, \"constant\")\nlist(zip(cols, model_parameters))\n#Predictor Variables from the Model built using Ridge Regression:","01b37965":"# model with optimal alpha\n# Ridge regression\nlm2 = Ridge(alpha=10)\n#lm2 = Ridge(alpha=0.001)\nlm2.fit(X_train, y_train)\n\nfrom sklearn.metrics import r2_score\n# predict\ny_train_pred = lm2.predict(X_train)\n#print(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))\ny_test_pred = lm2.predict(X_test)\n#print(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))\n\n#New Code for R2\nr_square_score=r2_score(y_test,y_test_pred)\nprint(\"R Square score:{}\".format(r_square_score))","3ec54454":"#AIC and BIC Calculation\nn= 1016 # n is equal to total datapoints on which model is built\nk= 50 # k is equal to number of predictor variables in model built\nresid=np.subtract(y_test_pred,y_test)\nrss=np.sum(np.power(resid,2))\nprint(\"RSS:{}\".format(rss))\naic=n*np.log(rss\/n)+2*k\nprint(\"AIC:{}\".format(aic))\nbic=n*np.log(rss\/n)+k*np.log(n)\nprint(\"BIC:{}\".format(bic))","a82f35a3":"### ----------HOUSING PRICE PREDICTION ----------","819b75ec":"#### First Lasso regression will be done to reduce the number of predictor variables","8751fbf0":"#### Based on the predictor variables having high coefficients in Lasso Regression model, we will shortlist these and perform Ridge regression to further regularize the regression model","78f34158":"### Model Building and Evaluation","d8ca63f6":"####### The solution is divided into the following sections:\n####### 1.Data understanding and exploration; \n####### 2.Data cleaning; \n####### 3.Data preparation; \n####### 4.Model building and evaluation.","e03910cf":"### Data Exploration\nTo perform linear regression, the (numeric) target variable should be linearly related to at least one another numeric variable. Let's see whether that's true in this case.\nWe'll first subset the list of all (independent) numeric variables, and then make a pairwise plot.","db6521ff":"#### Step 2: Data understanding and exploration","34aa84f4":"##### This is quite hard to read, and we can rather plot correlations between variables. Also, a heatmap is pretty useful to visualise multiple correlations in one plot.","445574fe":"#### Step 1: Importing Libraries and Importing Original Dataset","c9c2f373":"##### From the R square value we see that the model \nbuilt using lasso regression can have 65% accuracy in its prediction capability.\nR-squared (R2) explains the proportion of variation in the outcome (Sale Price) that is explained by the predictor variables. ","34a1a9c5":"#### Step 4: Data Preparation for Model Building","50b33064":"#### Ridge and Lasso Regression\u00b6","30f96b1a":"#### As Alpha parameter in scikit learn is nothing but theory lambda parameter, so we have from Lasson Rigression, alpha = 100 and from Ridge Regression, alpha = 10. These are the optimal values of lambda or the hyerparameters for regularization of the regression model.","36c28e56":"#### The answer to how well these variables describe the price of a house, is determined from the value of the R2-score and AIC, BOC values.\nThe model prediction capability is only 69%. Which is moderately OK. R2 score provides a measure of how well future samples are likely to be predicted by the model. \nIn estimating the amount of information lost by a model, AIC deals with the trade-off between the goodness of fit of the model and the simplicity of the model. In other words, AIC deals with both the risk of overfitting and the risk of underfitting.In this model, the AIC is 21000 whic is high. Also the BIC which provides a measure of penalty for additional variables. It is 21000 again high.","71a96287":"#### Step 3: Data Cleaning - Missing Value, Duplicates, Imputing, Dropping, Deleting, Exploration","0516d35f":"#### Based on both the Ridge and LAsso Models, the key predictor variables for predicting the Sale Price of Houses in Australia are as follows:\n 'MSSubClass', 'LotArea', 'OverallQual','OverallCond','TotalBsmtSF','BsmtFullBath','LowQualFinSF','BsmtHalfBath','YearBuilt_2001-2010',\n'HeatingQC','SaleType','SaleCondition','GarageCond','Exterior1st','Neighborhood','Fireplaces','Condition1','RoofStyle', 'Exterior2nd_Stone','KitchenQual',\n'Functional_Mod','GarageType_BuiltIn','Heating_Wall','Heating'","78c2175f":"###### Let's now prepare the data and build the model.","6bf68a35":"#### Ridge Regression","a77edbb4":"#### From the Heatmap we can observe that attributes like OverQual, GrLivArea, GarageCars,GarageArea,FullBath and few other variables clearly have a strong correlation with the dependant variable SalePrice","f537818b":"##### Let's now make a pairwise scatter plot and observe linear relationships.","5600a63a":"####Univariate Analysis on Key predictor variables and the target variable"}}