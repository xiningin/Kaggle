{"cell_type":{"648ff873":"code","38b99c23":"code","7ac9c047":"code","92d0c951":"code","c585220d":"code","e9e0d318":"code","934127fb":"code","8873d451":"code","a07877f4":"code","f0442f0e":"code","0fda8c60":"code","79a60456":"code","849112e3":"code","0f667aec":"code","5be5f2d8":"code","95ed7f58":"markdown"},"source":{"648ff873":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","38b99c23":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\n\nimport warnings\nwarnings.filterwarnings('ignore')","7ac9c047":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","92d0c951":"def preprocess(df):\n    df = df.copy()\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    del df['sig_id']\n    return df\n\ntrain = preprocess(train_features)\ntest = preprocess(test_features)\n\ndel train_targets['sig_id']\n\ntrain_targets = train_targets.loc[train['cp_type']==0].reset_index(drop=True)\ntrain = train.loc[train['cp_type']==0].reset_index(drop=True)","c585220d":"def set_seed(seed):\n    torch.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    np.random.seed(seed)","e9e0d318":"nfolds = 7\nnstarts = 7\nnepochs = 50\nbatch_size = 128\nval_batch_size = batch_size * 4\nntargets = train_targets.shape[1]\ntargets = [col for col in train_targets.columns]\ncriterion = nn.BCELoss()\nkfold = MultilabelStratifiedKFold(n_splits=7, random_state=42, shuffle=True)\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","934127fb":"class MoaModel(nn.Module):\n    def __init__(self, num_columns):\n        super(MoaModel, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_columns)\n        self.dropout1 = nn.Dropout(0.2)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_columns, 2048))\n        \n        self.batch_norm2 = nn.BatchNorm1d(2048)\n        self.dropout2 = nn.Dropout(0.5)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(2048, 1048))\n        \n        self.batch_norm3 = nn.BatchNorm1d(1048)\n        self.dropout3 = nn.Dropout(0.5)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(1048, 206))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = F.sigmoid(self.dense3(x))\n        \n        return x","8873d451":"top_feats = [  1,   2,   3,   4,   5,   6,   7,   9,  11,  14,  15,  16,  17,\n        18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  29,  30,  31,\n        32,  33,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  46,\n        47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  58,  59,  60,\n        61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,\n        74,  75,  76,  78,  79,  80,  81,  82,  83,  84,  86,  87,  88,\n        89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101,\n       102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n       115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n       129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143,\n       144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n       158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n       171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\n       184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197,\n       198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212,\n       213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226,\n       227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\n       240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\n       254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,\n       267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n       281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294,\n       295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n       310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,\n       324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,\n       337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n       350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377,\n       378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391,\n       392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,\n       405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418,\n       419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431,\n       432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446,\n       447, 448, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462,\n       463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,\n       476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n       490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 505,\n       506, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521,\n       522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536,\n       538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551,\n       552, 554, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570,\n       571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585,\n       586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599,\n       600, 601, 602, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617,\n       618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,\n       631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644,\n       645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659,\n       660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672,\n       673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,\n       686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700,\n       701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 714, 716, 717,\n       718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732,\n       733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747,\n       748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761,\n       762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774,\n       775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788,\n       789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803,\n       804, 805, 806, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819,\n       821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835,\n       837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852,\n       854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869,\n       870, 871, 872, 873, 874]\nprint(len(top_feats))","a07877f4":"# dataset class\nclass MoaDataset(Dataset):\n    def __init__(self, df, targets, feats_idx, mode='train'):\n        self.mode = mode\n        self.feats = feats_idx\n        self.data = df[:, feats_idx]\n        if mode=='train':\n            self.targets = targets\n    \n    def __len__(self):\n        return len(self.data)\n    \n    def __getitem__(self, idx):\n        if self.mode == 'train':\n            return torch.FloatTensor(self.data[idx]), torch.FloatTensor(self.targets[idx])\n        elif self.mode == 'test':\n            return torch.FloatTensor(self.data[idx]), 0","f0442f0e":"train = train.values\ntest = test.values\ntrain_targets = train_targets.values","0fda8c60":"for seed in range(nstarts):\n    print(f'Train seed {seed}')\n    set_seed(seed)\n    \n    for n, (tr, te) in enumerate(kfold.split(train_targets, train_targets)):\n        print(f'Train fold {n+1}')\n        xtrain, xval = train[tr], train[te]\n        ytrain, yval = train_targets[tr], train_targets[te]\n        \n        train_set = MoaDataset(xtrain, ytrain, top_feats)\n        val_set = MoaDataset(xval, yval, top_feats)\n        \n        dataloaders = {\n            'train': DataLoader(train_set, batch_size=batch_size, shuffle=True),\n            'val': DataLoader(val_set, batch_size=val_batch_size, shuffle=False)\n        }\n        \n        model = MoaModel(len(top_feats)).to(device)\n        checkpoint_path = f'repeat:{seed}_Fold:{n+1}.pt'\n        optimizer = optim.Adam(model.parameters(), weight_decay=1e-5)\n        scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=3, eps=1e-4, verbose=True)\n        best_loss = {'train': np.inf, 'val': np.inf}\n        \n        for epoch in range(nepochs):\n            epoch_loss = {'train': 0.0, 'val': 0.0}\n            \n            for phase in ['train', 'val']:\n                if phase == 'train':\n                    model.train()\n                else:\n                    model.eval()\n                \n                running_loss = 0.0\n                \n                for i, (x, y) in enumerate(dataloaders[phase]):\n                    x, y = x.to(device), y.to(device)\n                    \n                    optimizer.zero_grad()\n                    \n                    with torch.set_grad_enabled(phase=='train'):\n                        preds = model(x)\n                        loss = criterion(preds, y)\n                        \n                        if phase=='train':\n                            loss.backward()\n                            optimizer.step()\n                        \n                    running_loss += loss.item() \/ len(dataloaders[phase])\n                \n                epoch_loss[phase] = running_loss\n            \n            print(\"Epoch {}\/{}   -   loss: {:5.5f}   -   val_loss: {:5.5f}\".format(epoch+1, nepochs, epoch_loss['train'], epoch_loss['val']))\n            \n            scheduler.step(epoch_loss['val'])\n            \n            if epoch_loss['val'] < best_loss['val']:\n                best_loss = epoch_loss\n                torch.save(model.state_dict(), checkpoint_path)","79a60456":"oof = np.zeros((len(train), nstarts, ntargets))\noof_targets = np.zeros((len(train), ntargets))\npreds = np.zeros((len(test), ntargets))","849112e3":"def mean_log_loss(y_true, y_pred):\n    metrics = []\n    for i, target in enumerate(targets):\n        metrics.append(log_loss(y_true[:, i], y_pred[:, i].astype(float), labels=[0,1]))\n    return np.mean(metrics)","0f667aec":"for seed in range(nstarts):\n    print(f\"Inference for seed {seed}\")\n    seed_targets = []\n    seed_oof = []\n    seed_preds = np.zeros((len(test), ntargets, nfolds))\n    \n    for n, (tr, te) in enumerate(kfold.split(train_targets, train_targets)):\n        xval, yval = train[te], train_targets[te]\n        fold_preds = []\n        \n        val_set = MoaDataset(xval, yval, top_feats)\n        test_set = MoaDataset(test, None, top_feats, mode='test')\n        \n        dataloaders = {\n            'val': DataLoader(val_set, batch_size=val_batch_size, shuffle=False),\n            'test': DataLoader(test_set, batch_size=val_batch_size, shuffle=False)\n        }\n        \n        checkpoint_path = f'repeat:{seed}_Fold:{n+1}.pt'\n        model = MoaModel(len(top_feats)).to(device)\n        model.load_state_dict(torch.load(checkpoint_path))\n        model.eval()\n        \n        for phase in ['val', 'test']:\n            for i, (x, y) in enumerate(dataloaders[phase]):\n                if phase == 'val':\n                    x, y = x.to(device), y.to(device)\n                elif phase == 'test':\n                    x = x.to(device)\n                \n                with torch.no_grad():\n                    batch_preds = model(x)\n                    \n                    if phase == 'val':\n                        seed_targets.append(y)\n                        seed_oof.append(batch_preds)\n                    elif phase == 'test':\n                        fold_preds.append(batch_preds)\n                    \n        fold_preds = torch.cat(fold_preds, dim=0).cpu().numpy()\n        seed_preds[:, :, n] = fold_preds\n        \n    seed_targets = torch.cat(seed_targets, dim=0).cpu().numpy()\n    seed_oof = torch.cat(seed_oof, dim=0).cpu().numpy()\n    seed_preds = np.mean(seed_preds, axis=2)\n    \n    print(\"Score for this seed {:5.5f}\".format(mean_log_loss(seed_targets, seed_oof)))\n    oof_targets = seed_targets\n    oof[:, seed, :] = seed_oof\n    preds += seed_preds \/ nstarts\n\noof = np.mean(oof, axis=1)\nprint(\"Overall score is {:5.5f}\".format(mean_log_loss(oof_targets, oof)))","5be5f2d8":"ss[targets] = preds\nss.loc[test_features['cp_type']=='ctl_vehicle', targets] = 0\nss.to_csv('submission.csv', index=False)","95ed7f58":"PyTorch baseline based on https:\/\/www.kaggle.com\/simakov\/keras-multilabel-neural-network-v1-2 with some slight implementation divergences.\n\n1. No use of lookahead optimizer.\n2. training with several seeds but kfold seed remains fixed across runs.\n3. training is done from scratch.\n4. weight normalization is done before the activation.\n\n**update v4:** Add weight decay. Run for 50 epochs. \n\nPls upvote, if you find it useful. Feedback is also very much appreciated."}}