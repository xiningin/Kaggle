{"cell_type":{"389a58dd":"code","8860061d":"code","c0a08bf9":"code","1b6586d0":"code","634ac671":"code","b6cd465b":"code","bcea6d59":"code","075ae7cf":"code","12bc319e":"code","d1a592c6":"code","09c42036":"code","683e5efc":"code","71ff3915":"code","02f8a971":"code","0549d700":"code","0e95f868":"code","e854d257":"code","e065af76":"code","c677b22b":"code","73b4eaf2":"code","4518a639":"code","b8bcd0f2":"code","78eec45e":"code","ea5ccb0a":"code","d3285cce":"code","7b093850":"code","8cda6c7c":"code","37cb0783":"code","5b54333b":"code","f73b140b":"code","eedd8b23":"code","8f66a535":"code","ee82e1e1":"code","eb29d4f9":"code","9cbc2bd2":"code","ed4bf88a":"code","9ca715db":"code","5ee4b45e":"code","cd7fb23e":"markdown","512666be":"markdown","31a1e9ee":"markdown","7d90ff9d":"markdown","85102a00":"markdown","274ef97c":"markdown","b48bc4e3":"markdown","bcbff4f2":"markdown","ac4a15ff":"markdown","2cac393d":"markdown","ab512bfe":"markdown","3676bfbc":"markdown","bacac014":"markdown","fadf6f93":"markdown","7e078cbd":"markdown","03db0d53":"markdown"},"source":{"389a58dd":"#importing basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n\nraw_data = pd.read_csv('..\/input\/cardiovascular-disease-dataset\/cardio_train.csv',sep=';')\n# Check the data\nraw_data.info()","8860061d":"raw_data.head(3)","c0a08bf9":"print(f\"Missing values are present: {raw_data.isnull().sum().any()}\")","1b6586d0":"raw_data.drop('id',axis=1,inplace=True)\nraw_data.age = np.round(raw_data.age\/365.25,decimals=1)\nraw_data.gender = raw_data.gender.replace(2,0)","634ac671":"raw_data.duplicated().sum()","b6cd465b":"raw_data.drop_duplicates(inplace=True)","bcea6d59":"sns.set_style('darkgrid')\nsns.countplot(raw_data.cardio,palette='summer')\nplt.xlabel('Presence of cardiovascular disease',fontdict={'fontsize': 15,'color':'Green'},labelpad=3);","075ae7cf":"a = raw_data[raw_data[\"gender\"]==0][\"height\"].mean()\nb = raw_data[raw_data[\"gender\"]==1][\"height\"].mean()\nif a > b:\n    gender = \"male\"\n    gender1 = \"female\"\nelse:\n    gender = \"female\"\n    gender1 = \"male\"\nprint(\"Gender:0 is \"+ gender +\" & Gender:1 is \" + gender1)","12bc319e":"sns.set_style('whitegrid')\nsns.countplot(raw_data.gender,hue=raw_data.cardio, palette=\"Set2\");","d1a592c6":"sns.set_style('dark')\nsns.boxplot(raw_data.height,palette='pink')\nplt.title('Distribution of height');","09c42036":"sns.set_style('white')\nsns.boxplot(raw_data.weight,palette='terrain')\nplt.title('Distribution of weight');","683e5efc":"raw_data = raw_data[(raw_data['height']<250) & (raw_data['weight']>20.0)]","71ff3915":"raw_data[\"bmi\"] = (raw_data[\"weight\"]\/ (raw_data[\"height\"]\/100)**2).round(1)","02f8a971":"raw_data[raw_data['bmi']<10]","0549d700":"raw_data[raw_data['bmi']>100].sort_values(by='weight',ascending=False).head(5)","0e95f868":"data= raw_data[(raw_data['bmi']>10) & (raw_data['bmi']<100)].copy()","e854d257":"sns.boxplot(data.bmi,color='Green')\nplt.title('Distribution of BMI');","e065af76":"data.drop(['weight','height'],axis=1,inplace=True)","c677b22b":"sns.violinplot(data.age,color='orange')\nprint(\"Observations have been recorded mostly for people with age between 40 and 65\");","73b4eaf2":"(data['ap_lo']>360).sum()","4518a639":"(data['ap_hi']>360).sum()","b8bcd0f2":"data= data[(data['ap_lo']<360) & (data['ap_hi']<360)].copy()\ndata= data[(data['ap_lo']>20) & (data['ap_hi']>20)].copy()\ndata=data[data['ap_hi']>data['ap_lo']]","78eec45e":"sns.violinplot(data.ap_hi,color='orange');","ea5ccb0a":"sns.violinplot(data.ap_lo,color='orange');","d3285cce":"#creating dummy variables for categorical column\ndata['cholesterol']=data['cholesterol'].map({ 1: 'normal', 2: 'above normal', 3: 'well above normal'})\ndata['gluc']=data['gluc'].map({ 1: 'normal', 2: 'above normal', 3: 'well above normal'})\ndummies = pd.get_dummies(data[['cholesterol','gluc']],drop_first=True)\nfinal_data = pd.concat([data,dummies],axis=1)\nfinal_data.drop(['cholesterol','gluc'],axis=1,inplace=True)\nfinal_data.head()","7b093850":"#plotting using plotly\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\nprint('Correlation of features with target variable')\nfinal_data.corr()['cardio'].sort_values()[:-1].iplot(kind='barh');","8cda6c7c":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nX_train, X_test, y_train, y_test = train_test_split(final_data.drop('cardio',axis=1),final_data.cardio,test_size=0.30)\n\nto_be_scaled_feat = ['age', 'ap_hi', 'ap_lo','bmi']\nother_feat = ['gender', 'cholesterol_normal', 'cholesterol_well above normal',\n       'gluc_normal', 'gluc_well above normal', 'smoke', 'alco', 'active']\nscaler=StandardScaler()\nscaler.fit(X_train[to_be_scaled_feat])\nX_train[to_be_scaled_feat] = scaler.transform(X_train[to_be_scaled_feat])\nX_test[to_be_scaled_feat] = scaler.transform(X_test[to_be_scaled_feat])","37cb0783":"# importing classifiers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score,accuracy_score,classification_report\n\nclassifiers = {\n    'Logistic Regression' : LogisticRegression(),\n    'Decision Tree' : DecisionTreeClassifier(),\n    'Random Forest' : RandomForestClassifier(),\n    'Support Vector Machines' : SVC(),\n    'K-nearest Neighbors' : KNeighborsClassifier(),\n    'XGBoost' : XGBClassifier()\n}\nresults=pd.DataFrame(columns=['Accuracy in %','F1-score'])\nfor method,func in classifiers.items():\n    func.fit(X_train,y_train)\n    pred = func.predict(X_test)\n    results.loc[method]= [100*np.round(accuracy_score(y_test,pred),decimals=4),\n                         round(f1_score(y_test,pred),2)]\nresults","5b54333b":"error_rate = []\n\nfor i in range(1,15):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,15),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate');","f73b140b":"knn = KNeighborsClassifier(n_neighbors=12)\nknn.fit(X_train,y_train)\nknn_pred = knn.predict(X_test)\nprint(classification_report(y_test,knn_pred))","eedd8b23":"results.loc['K-nearest Neighbors(Improved)']= [100*np.round(accuracy_score(y_test,knn_pred),decimals=4),\n                         round(f1_score(y_test,knn_pred),2)]","8f66a535":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {'max_depth': [80, 90],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4],\n    'min_samples_split': [8, 10],\n    'n_estimators': [100, 200]}\ngrid=GridSearchCV(RandomForestClassifier(),param_grid,verbose=1)\ngrid.fit(X_train,y_train)\ngrid.best_params_","ee82e1e1":"grid_pred = grid.predict(X_test)\nprint(classification_report(y_test,grid_pred))","eb29d4f9":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping","9cbc2bd2":"#splitting further into validation set\nX_train, X_val, y_train, y_val = train_test_split(X_train,y_train,test_size=0.20)\n\nmodel = Sequential()\nmodel.add(Dense(12,activation='relu'))\nmodel.add(Dense(50,activation='relu',kernel_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1),\n    bias_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(50,activation='relu',kernel_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1),\n    bias_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(50,activation='relu',kernel_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1),\n    bias_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1,activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam')\n\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\n\nmodel.fit(x=X_train.values,y=y_train.values,\n          validation_data=(X_val,y_val.values),\n          batch_size=100,epochs=150,callbacks=[early_stop])","ed4bf88a":"losses = pd.DataFrame(model.history.history)\nlosses[['loss','val_loss']].plot();","9ca715db":"dnn_pred = model.predict_classes(X_test)\nprint(classification_report(y_test,dnn_pred))","5ee4b45e":"results.loc['Random Forest(Improved)']= [100*np.round(accuracy_score(y_test,grid_pred),decimals=4),\n                         round(f1_score(y_test,grid_pred),2)]\nresults.loc['Deep Neural Network']= [100*np.round(accuracy_score(y_test,dnn_pred),decimals=4),\n                         round(f1_score(y_test,dnn_pred),2)]\nresults.sort_values(by='Accuracy in %',ascending=False).style.highlight_max()","cd7fb23e":"* There is no mising value in the data.\n* I will drop column 'id' as it is irrelevant to target variable.\n* Transform age column into years instead of days.\n* Gender feature should not be categorized into 1 and 2 because 2 is always numerically bigger than 1, the model would take into account that and give a bigger ratio to one gender for having a disease. So, I will make that binary.\n* I will check and drop duplicates.","512666be":"By using **elbow method** we have increased accuracy of this model from 69.4% to 72%.","31a1e9ee":"## Random Forest (by GridSearchCV)","7d90ff9d":"# Exploratory Data Analysis and Data Preprocessing","85102a00":"# Improving Accuracy by Hyperparameter Tuning\n\n## K- Nearest Neighbors (by elbow method)","274ef97c":"Further, I will remove extremely underweight and obese people because such cases seems impossible. For example, there are observations with 80 cm height and 165 kgs weight which is quite impossible. May be it was a fake observation or typing mistake. Also, health conditions of dwarf and abnormally tall people are totally different so I don't want to include them.","b48bc4e3":"Now, I will remove outliers and abrupt blood pressure values.","bcbff4f2":"# Deep Neural Networks","ac4a15ff":"# Results","2cac393d":"So, data is almost balanced. Let's see which gender has more cases of disease. As in this data there was no knowledge of which gender is denoted by which number, I will use simple fact that women's average age is less than that of men.","ab512bfe":"### Modelling","3676bfbc":"By using **GridSearchCV** we have increased accuracy of this model from 69% to 73%.","bacac014":"# Classification Project\n\nIn this project, I have used [Cardiovascular Disease dataset](https:\/\/www.kaggle.com\/sulianova\/cardiovascular-disease-dataset) from kaggle. Based on some health conditions of an individual my model will predict whether he has any cardiovascular disease or not.\n\nFeatures:\n\n* Age | Objective Feature | age | int (days)\n* Height | Objective Feature | height | int (cm) |\n* Weight | Objective Feature | weight | float (kg) |\n* Gender | Objective Feature | gender | categorical code |\n* Systolic blood pressure | Examination Feature | ap_hi | int |\n* Diastolic blood pressure | Examination Feature | ap_lo | int |\n* Cholesterol | Examination Feature | cholesterol | 1: normal, 2: above normal, 3: well above normal |\n* Glucose | Examination Feature | gluc | 1: normal, 2: above normal, 3: well above normal |\n* Smoking | Subjective Feature | smoke | binary |\n* Alcohol intake | Subjective Feature | alco | binary |\n* Physical activity | Subjective Feature | active | binary |\n* Presence or absence of cardiovascular disease | Target Variable | cardio | binary |","fadf6f93":"### Splitting and Standardizing data","7e078cbd":"There are many outliers in height and weight features. I combine both of these into a new feature bmi.","03db0d53":"I will remove extremely rare cases of height and weight. As data is quite big, there will be no prblem while modelling."}}