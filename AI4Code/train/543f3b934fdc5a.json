{"cell_type":{"9a14091a":"code","0b812017":"code","c703a298":"code","83f412ef":"code","043fab45":"code","a424f0e2":"code","60447c08":"code","1787812a":"code","273d458f":"code","2a365fa0":"code","93d2e190":"code","595a8652":"code","e98a874d":"code","fac1124b":"code","0dfda5c8":"code","806da01f":"code","be3bf598":"code","4d10ee18":"code","ab93b8e8":"code","d4bfa194":"code","624747b0":"code","13d1f38a":"code","890c7fcc":"code","512184aa":"code","cbc34929":"code","3f92f9f7":"code","7b6388f8":"code","1832f359":"code","81314e7e":"code","f16d3ea9":"code","068318f6":"code","8488fecc":"code","49bda3fa":"markdown","af44c6ef":"markdown","897509fc":"markdown","961b81a0":"markdown","3c1020ba":"markdown","22a0ace9":"markdown","10f4cfcf":"markdown","c18b4cbc":"markdown","c2361325":"markdown","98cf70af":"markdown","0c1c5f86":"markdown","1a27ce33":"markdown","33106250":"markdown","72f6a99a":"markdown","8f883dc3":"markdown","e6ab81bc":"markdown","9d121717":"markdown"},"source":{"9a14091a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport json #json reader to python dict\nimport os #create system directory\n\nimport re  # For preprocessing\nimport spacy  # For preprocessing\n\nimport multiprocessing # For get number of cores\n\nfrom time import time  # To time our operations\nfrom collections import defaultdict  # For word frequency\n\n\nfrom gensim.models.phrases import Phrases, Phraser #For create relevant phrases\nfrom gensim.models import Word2Vec #Our model type\n\n\n#import logging  # Setting up the loggings to monitor gensim\n#logging.basicConfig(format=\"%(levelname)s - %(asctime)s: %(message)s\", datefmt= '%H:%M:%S', level=logging.INFO)","0b812017":"HOME_DIR = os.path.realpath('..')\nINPUT_DIR = os.path.join(HOME_DIR, 'input')\nOUTPUT_DIR = os.path.join(HOME_DIR, 'output')\n\nDATA_DIR = os.path.join(INPUT_DIR, 'CORD-19-research-challenge')\nMODELS_DIR = os.path.join(INPUT_DIR, 'models')\nRANDOM_VEC_DIR = os.path.join(INPUT_DIR, 'random-vectors-similarity')","c703a298":"def cleaned_metadata_df(metadata):\n    \"\"\"Prepare metadata to work\"\"\"\n    \n    print('Shape original:' , metadata.shape)\n    \n    result_df = metadata.copy()\n    result_df = result_df.drop_duplicates()\n    result_df = result_df[result_df.has_pdf_parse]\n    \n    print('Shape after cleaning:' ,result_df.shape)\n    return result_df    ","83f412ef":"def cleaning(spacy_doc):\n    \"\"\"Lemmatizes and removes stopwords \n        doc needs to be a spacy Doc object \"\"\"\n    txt = [token.lemma_ for token in spacy_doc if not token.is_stop]\n    if len(txt) > 2:\n        return ' '.join(txt)","043fab45":"def Word2Vec_Preprocessing(df, text_col_name):\n    \"\"\" Prepare column from pd.DataFrame with text to Word2Vec model \"\"\"\n    nlp = spacy.load('en', disable=['ner', 'parser']) # disabling Named Entity Recognition for speed\n    brief_cleaning = (re.sub(\"[^A-Za-z']+\", ' ', str(row)).lower() for row in df[text_col_name])\n\n    t = time()\n    txt = [] \n    for doc in nlp.pipe(brief_cleaning, batch_size=5000, n_threads=-1):\n        txt.append(cleaning(doc))\n    #print('Time to clean up everything: {} mins'.format(round((time() - t) \/ 60, 2)))\n\n    df_clean = pd.DataFrame({'clean': txt})\n    df_clean = df_clean.dropna().drop_duplicates()\n    return df_clean","a424f0e2":"def create_sentences(df, col_name):\n    \"\"\"Build sentences to Word2Vec model \"\"\"\n    t=time()\n    sent = [row.split() for row in df[col_name]]\n    phrases = Phrases(sent, min_count=30, progress_per=100)\n    bigram = Phraser(phrases)\n    \n    #print('Time to create sentences: {} mins'.format(round((time() - t) \/ 60, 2)))\n    return bigram[sent]","60447c08":"def create_word_frequency_dict(sentences):\n    \"\"\" Counting of token in sentences \"\"\"\n    t=time()\n    word_freq = defaultdict(int)\n    for sent in sentences:\n        for i in sent:\n            word_freq[i] += 1\n    #print('Time to create_word_frequency_dict: {} mins'.format(round((time() - t) \/ 60, 2)))\n    return word_freq","1787812a":"def cosine_similarity(vec_1, vec_2):\n    \"\"\" Correlation between Word2Vec vectors \"\"\"\n    return np.dot(vec_1, vec_2)\/(np.linalg.norm(vec_1)*np.linalg.norm(vec_2))","273d458f":"def Initialization_Word2Vec_model():\n    cores = multiprocessing.cpu_count()\n    w2v_model = Word2Vec(min_count=20,\n                     window=5,\n                     size=150,\n                     sample=6e-5, \n                     alpha=0.03, \n                     min_alpha=0.0007, \n                     negative=20,\n                     workers=cores)\n    return w2v_model","2a365fa0":"def Build_Word2Vec_vocab(w2v_model, sentences,update=True):\n    t = time()\n    w2v_model.build_vocab(sentences, progress_per=10000, update=update)\n    #print('Time to build vocab: {} mins'.format(round((time() - t) \/ 60, 2)))\n    return w2v_model","93d2e190":"def Train_Word2Vec_model(w2v_model, sentences):\n    t = time()\n    w2v_model.train(sentences, total_examples=w2v_model.corpus_count, epochs=20, report_delay=1)\n    #print('Time to train the model: {} mins'.format(round((time() - t) \/ 60, 2)))\n    \n    #w2v_model.init_sims(replace=True)\n    \n    return w2v_model","595a8652":"def add_full_text_to_metadata(metadata_df):\n    t=time()\n    len_metadata_df = len(metadata_df)\n    for _, row in metadata_df.iterrows():\n        sha_cde = str(row['sha']).split('; ')\n        full_text_file = row['full_text_file']\n\n        full_text = ''\n        \n        if _ % 10000 == 0: print(f'{_} full_texts was added!')\n        \n        for sha in sha_cde: \n            path_full_text = os.path.join(DATA_DIR, f'{full_text_file}\/{full_text_file}\/pdf_json\/{sha}.json'.format(full_text_file, sha))\n            try:\n                with open(path_full_text) as json_data:\n                        data = json.load(json_data)\n                full_text = full_text + ' '.join([page['text'] for page in data['body_text']])\n            except:\n                pass\n        metadata_df.loc[row.name, 'full_text'] = str(metadata_df.loc[row.name, 'abstract']) + ' ' + full_text\n\n    print('Time to add full_text: {} mins'.format(round((time() - t) \/ 60, 2)))\n    return metadata_df","e98a874d":"def chunk_Word2Vec_Preprocessing(metadata_df, chunk_size = 50):\n    part_idx = 0 \n    part_size = int(np.round(len(metadata_df)\/chunk_size + 1))\n    df_clean = dict()\n    for idx in range(1,chunk_size+1):\n        df_clean[idx] = Word2Vec_Preprocessing(metadata_df.iloc[part_idx:part_idx+part_size,:], 'full_text')\n        part_idx = part_idx+part_size\n        print('End of cleaning part {}'.format(idx))\n\n    df_clean_all = pd.concat(list(df_clean.values()))\n    df_clean_all.to_pickle(os.path.join(OUTPUT_DIR, '\/kaggle\/working\/df_clean_all.pkl'))\n    \n    return df_clean_all","fac1124b":"def Build_sentence_vector(words):\n    result_vector = [0]*len(w2v_model.wv.get_vector(words[0]))\n    for word in words:\n        result_vector = (result_vector + w2v_model.wv.get_vector(word))\n    \n    return result_vector\/np.linalg.norm(result_vector)","0dfda5c8":"def generate_article_vectors(from_column='full_text'):\n\n    w2v_vocab_set = set(w2v_model.wv.vocab.keys())\n    article_vectors = dict()\n\n    for _, row in metadata_df.iterrows():\n\n        article_words_set = str(row[from_column]).split()\n        words = [word for word in article_words_set if word in (w2v_vocab_set)]\n        if len(words):\n            article_vectors[row.name] = Build_sentence_vector(words)\n            \n    return article_vectors","806da01f":"def generate_question_vector(effort_idx):\n    question_words = Word2Vec_Preprocessing(efforts_df.iloc[effort_idx:effort_idx+1],'txt').iloc[0,0].split()\n    w2v_vocab_set = set(w2v_model.wv.vocab.keys())\n    words = list(w2v_vocab_set.intersection(question_words))\n    return Build_sentence_vector(words)","be3bf598":"def generate_articles_indexies(question_vector, article_vectors):\n    similarity_values = dict()\n    for key in article_vectors.keys():\n        similarity_values[key] = cosine_similarity(question_vector,article_vectors.get(key))\n\n    articles_indexies = sorted(similarity_values, key= similarity_values.get, reverse=True)\n    print(articles_indexies[:10])\n\n    return similarity_values, articles_indexies","4d10ee18":"def find_part_of_article_to_efforts(example_full_text_df, question_vector, effort_idx, article_index, step=150, prc_of_article=0.04):\n    w2v_vocab_set = set(w2v_model.wv.vocab.keys())\n    spliting_words = example_full_text_df['clean'][0].split()\n    spliting_words = [word for word in spliting_words if word in w2v_vocab_set]\n    similarity_lst = []\n    simil_value = -1\n    for idx, word in enumerate(spliting_words):\n\n        part_sentence_vec = Build_sentence_vector(spliting_words[idx:idx+step])\n        new_simil_value = cosine_similarity(question_vector, part_sentence_vec)\n        similarity_lst.append(new_simil_value)\n        if new_simil_value > simil_value:\n            simil_idx = idx\n            simil_value = new_simil_value\n\n    full_text_rate = simil_idx\/len(spliting_words) - prc_of_article\/2, simil_idx\/len(spliting_words) + prc_of_article\/2\n    if full_text_rate[0] < 0: full_text_rate = 0, full_text_rate[1] \n    begin_sign = int(round(full_text_rate[0] * len(metadata_df.loc[article_index, 'full_text']),0))\n    end_sign = int(round(full_text_rate[1] * len(metadata_df.loc[article_index, 'full_text']),0))\n\n    begin_part_sent, end_part_sent = int(full_text_rate[0]*len(similarity_lst)), int(full_text_rate[1]*len(similarity_lst))\n    begin_part_sent, end_part_sent = np.maximum(0, begin_part_sent), np.minimum(len(similarity_lst), end_part_sent)\n        \n    plt.figure(figsize=(15, 5))\n    plt.title('The most similar part of article')\n    plt.plot(similarity_lst);\n    plt.plot(range(begin_part_sent, end_part_sent),similarity_lst[begin_part_sent:end_part_sent])\n    plt.show();\n\n    print('...', metadata_df.loc[article_index, 'full_text'][begin_sign:end_sign], '...')\n\n    return None","ab93b8e8":"def get_effort_article(article_vectors, effort_idx, nr_of_similar_article = 0):\n    \n    question_vector = generate_question_vector(effort_idx)\n    similarity_values, articles_indexies = generate_articles_indexies(question_vector, article_vectors)\n    article_index = articles_indexies[nr_of_similar_article]\n    print('--------------------------------------------------------------------')\n    print(f'TITLE [{article_index}]: ', metadata_df.loc[article_index,'title'])\n    print('--------------------------------------------------------------------')\n    print('---------------------------')\n    print('Publish time: {}'.format(metadata_df.loc[article_index, 'publish_time']))\n    print('---------------------------')\n    \n    print('--------------------------------------------------------------------')\n    print('efforts ', efforts_df['txt'][effort_idx])\n    print('--------------------------------------------------------------------')\n    \n    print('similarity effort to full text is: ', similarity_values.get(article_index) ,'\\n')\n    example_full_text_df  = Word2Vec_Preprocessing(metadata_df.loc[article_index:article_index,:],'full_text')\n    find_part_of_article_to_efforts(example_full_text_df, question_vector, effort_idx, article_index)\n    return None","d4bfa194":"metadata = pd.read_csv(os.path.join(DATA_DIR, 'metadata.csv'),)\nmetadata_df = cleaned_metadata_df(metadata)","624747b0":"# #w2v_model = Initialization_Word2Vec_model()\n# row_cnt = 27174\n# w2v_model = Word2Vec.load(os.path.join(INPUT_DIR, 'models\/w2v_model_on_all_abstract_full_text_after_{}_rows.w2v'.format(row_cnt)))\n# chunk_size = int(len(metadata_df)\/100 + 1)\n# for idx in range(0,100): \n    \n#     chunk_df = add_full_text_to_metadata(metadata_df.iloc[row_cnt:row_cnt+chunk_size,:])\n#     df_clean = chunk_Word2Vec_Preprocessing(chunk_df, 1)\n#     sentences = create_sentences(df_clean, 'clean')\n\n#     #word_freq = create_word_frequency_dict(sentences)\n#     #sorted(word_freq, key=word_freq.get, reverse=True)[:10]\n\n#     update_w2v_vocab = len(w2v_model.wv.vocab) != 0\n#     w2v_model = Build_Word2Vec_vocab(w2v_model, sentences, update_w2v_vocab)\n#     w2v_model = Train_Word2Vec_model(w2v_model, sentences)\n\n#     row_cnt = row_cnt+chunk_size\n#     w2v_model.save(os.path.join(OUTPUT_DIR, '\/kaggle\/working\/w2v_model_on_all_abstract_full_text_after_{}_rows.w2v'.format(row_cnt)))\n#     print('-----------------------------------')\n#     print('| Model after {} rows was built   |'.format(row_cnt))\n#     print('-----------------------------------')\n    \n#     remove_path = os.path.join(OUTPUT_DIR,'\/kaggle\/working\/w2v_model_on_all_abstract_full_text_after_{}_rows.w2v'.format(row_cnt - 3*chunk_size))\n#     if os.path.exists(remove_path):\n#         os.remove(remove_path)\n    \n# w2v_model.init_sims(replace=True)","13d1f38a":"### Load a model after 2 days training. Model was saved and now I get there from INPUT_DIR\nw2v_model = Word2Vec.load(os.path.join(MODELS_DIR, 'w2v_model_on_all_abstract_full_text_after_34377_rows.w2v'))\nw2v_model.init_sims(replace=True)","890c7fcc":"#Time to add full_text ~ 6:30 min\nmetadata_df = add_full_text_to_metadata(metadata_df)","512184aa":"efforts_df = pd.DataFrame({'txt':[\n                          \"articulate and translate existing ethical principles and standards to salient issues in COVID-2019\"\n                         ,\"embed ethics across all thematic areas, engage with novel ethical issues that arise and coordinate to minimize duplication of oversight\"\n                         ,\"support sustained education, access, and capacity building in the area of ethics\"\n                         ,\"establish a team at WHO that will be integrated within multidisciplinary research and operational platforms and that will connect with existing and expanded global networks of social sciences.\"\n                         ,\"develop qualitative assessment frameworks to systematically collect information related to local barriers and enablers for the uptake and adherence to public health measures for prevention and control. This includes the rapid identification of the secondary impacts of these measures. (e.g. use of surgical masks, modification of health seeking behaviors for SRH, school closures)\"\n                         ,\"identify how the burden of responding to the outbreak and implementing public health measures affects the physical and psychological health of those providing care for Covid-19 patients and identify the immediate needs that must be addressed.\"\n                         ,\"identify the underlying drivers of fear, anxiety and stigma that fuel misinformation and rumor, particularly through social media.                        \"\n                        ]})","cbc34929":"article_vectors = generate_article_vectors()","3f92f9f7":"get_effort_article(article_vectors, effort_idx=0, nr_of_similar_article=8)","7b6388f8":"get_effort_article(article_vectors, effort_idx=1)","1832f359":"get_effort_article(article_vectors, effort_idx=2, nr_of_similar_article=5)","81314e7e":"get_effort_article(article_vectors, effort_idx=3, nr_of_similar_article=4)","f16d3ea9":"get_effort_article(article_vectors, effort_idx=4)","068318f6":"get_effort_article(article_vectors, effort_idx=5)","8488fecc":"## Model characteristic \nmodel_vocab_len = len(w2v_model.wv.vocab.keys())\nmodel_full_text_train_len = metadata.shape[0]\n\nquestion_vector = generate_question_vector(2)\nsimilarity_values, articles_indexies = generate_articles_indexies(question_vector, article_vectors)\n\n### Random vectors test\nif os.path.exists(os.path.join(RANDOM_VEC_DIR, 'random_vectors_similarity.pkl')):\n    random_check = pd.read_pickle(os.path.join(RANDOM_VEC_DIR, 'random_vectors_similarity.pkl'))\n\nelse:\n    random_check = []\n    for i in range(0,model_full_text_train_len):\n        random_abstract = [list(w2v_model.wv.vocab.keys())[int(idx)] for idx in np.round(np.random.uniform(1, model_vocab_len-1, 200))]\n        random_vector = Build_sentence_vector(random_abstract)\n        random_check.append(cosine_similarity(question_vector, random_vector))\n    \n    #break after 24820 iteration\n    pd.Series(random_check).to_pickle('random_vectors_similarity.pkl')\n\nplt.figure(figsize = (15, 5))\nplt.hist(list(similarity_values.values()), bins=50);\nplt.hist(random_check, bins = 50);\nplt.legend(['similarity_values', 'random_check']);\nplt.show();","49bda3fa":"### Building model\n#### Initialization","af44c6ef":"### Build vectors and create aggregation functions","897509fc":"### Why do I think it works? \n\nLook at the picture below. For randomly generated sentences, the correlation coefficient has a normal distribution with the \n* mean = -0.081 \n* standard deviation = 0.061\n\nThe articles I review have a minimum correlation coefficient of around 0.55 - 0.6, which is much more important than the result of a random distribution","961b81a0":"# Create neccesary dirs","3c1020ba":"#### Loop for training the final model","22a0ace9":"## Build Word2Vec model\nusing https:\/\/www.kaggle.com\/pierremegret\/gensim-word2vec-tutorial","10f4cfcf":"# Import of necessary libraries","c18b4cbc":"# Processing ","c2361325":"#### Building the Vocabulary Table","98cf70af":"I will write here strengths and weaknesses this idea, but I'm hope that it was interesting for you!  \n\n**This Notebook is WIP**  \n\nThanks for reading, bye!","0c1c5f86":"#### Training of the model","1a27ce33":"**OK!** \n\n**We are ready to read our compared articles to our efforts! **","33106250":"# Intro","72f6a99a":"### Preprocessing","8f883dc3":"As \"efforts\" I adopted sentences which were indicated as specific questions in the given task****","e6ab81bc":"**Hello everybody!**\n\nSo you say that we have tens of thousands of scientific articles and want to find out which of them respond to the tasks we set?\n\nTo comprehend it, it would be good to sort the texts according to the task, and then check if the ones at the top answer our question. Well, but reading entire articles can be tedious ... then choose the most similar fragment of the article and compare it with the question.\n\nThis notebook implements the above idea in the following four steps:\n* Construction of a simple **Word2Vec** model based on full texts of articles\n* Creating the **article vector**, which is a component of the vectors contained in the text, and the **vector of the question posed**\n* Indication of **similarities** between the above vectors using a correlation coefficient\n* Extract the **closest fragment** from the article and display it to the user\n\nLet's go!","9d121717":"# Definition all functions used in notebook"}}