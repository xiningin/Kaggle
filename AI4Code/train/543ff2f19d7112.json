{"cell_type":{"853cfea4":"code","7d973a97":"code","fbf1dc5b":"code","37a5ad6f":"code","5f0c1718":"code","dcf9c5f5":"code","96a5f775":"code","e11205af":"code","e740c2aa":"code","58185bed":"code","18448875":"code","2f84ed10":"markdown","3a7fdeb5":"markdown","d5b1cf9d":"markdown","1a35a8ce":"markdown","8a815c99":"markdown","33011983":"markdown","2d69d625":"markdown"},"source":{"853cfea4":"import numpy as np\nimport pandas as pd\nfrom datetime import date\nfrom datetime import timedelta","7d973a97":"def specify_country(f_date, country):\n    df_tr = pd.DataFrame()\n    l_date = date.today()\n    temp_date = f_date\n    delta = l_date - f_date\n    dlink = f'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/{temp_date.strftime(\"%m-%d-%Y\")}.csv'\n    for x in range(delta.days):\n        df = pd.read_csv(dlink)\n        \n        # these columns for avoiding inconstant column names, hope gonna they're gonna be constant\n        country_col = [col for col in df.columns if 'Country' in col]\n        country_col = \"\".join(country_col)\n        province_col = [col for col in df.columns if 'Province' in col]\n        province_col = \"\".join(province_col)\n        \n        df = df[(df[country_col] == country) & ((df[province_col].isnull()) | (df[province_col] == country))]\n        df['Date'] = temp_date\n        df_tr = df_tr.append(df)\n        dlink = list(dlink)\n        temp_date = temp_date + timedelta(days = 1)\n        dlink[112:122] = temp_date.strftime(\"%m-%d-%Y\")\n        dlink = \"\".join(dlink)\n    df_tr.reset_index(inplace = True)\n    return df_tr","fbf1dc5b":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot","37a5ad6f":"#You can edit: starting date and country name\nf_date = date(2020, 3, 13)\ncountry = 'Turkey'\n\ndf_turkey = specify_country(f_date, country)\ndf_turkey = df_turkey[['Confirmed','Deaths', 'Recovered', 'Date']]\ndf_turkey","5f0c1718":"fig = go.Figure()\n\ntrace0 = go.Scatter(\n    x = df_turkey['Date'],\n    y = df_turkey['Confirmed'],\n    name = \"Cases\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Cases: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#1f77b4\"\n    )\n)\n\ntrace1 = go.Scatter(\n    x = df_turkey['Date'],\n    y = df_turkey['Deaths'],\n    name = \"Deaths\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Deaths: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#d62728\"\n    )\n)\n\ntrace2 = go.Scatter(\n    x = df_turkey['Date'],\n    y = df_turkey['Recovered'],\n    name = \"Recovered\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Recovered: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#00b200\"\n    )\n)\n\n\ndata = [trace0, trace1, trace2]\nlayout = go.Layout(title = 'Cumulative COVID-19 cases in Turkey',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Confirmed Cases'),)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","dcf9c5f5":"f_date = date(2020, 2, 26)\ncountry = 'Brazil'\n\ndf_brazil = specify_country(f_date, country)\ndf_brazil = df_brazil[['Confirmed','Deaths', 'Recovered', 'Date']]\ndf_brazil","96a5f775":"fig = go.Figure()\n\ntrace0 = go.Scatter(\n    x = df_brazil['Date'],\n    y = df_brazil['Confirmed'],\n    name = \"Cases\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Cases: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#1f77b4\"\n    )\n)\n\ntrace1 = go.Scatter(\n    x = df_brazil['Date'],\n    y = df_brazil['Deaths'],\n    name = \"Deaths\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Deaths: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#d62728\"\n    )\n)\n\ntrace2 = go.Scatter(\n    x = df_brazil['Date'],\n    y = df_brazil['Recovered'],\n    name = \"Recovered\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Recovered: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#00b200\"\n    )\n)\n\n\ndata = [trace0, trace1, trace2]\nlayout = go.Layout(title = 'Cumulative COVID-19 cases in Brazil',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Confirmed Cases'),)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e11205af":"f_date = date(2020, 2, 27)\ncountry = 'Netherlands'\n\ndf_netherlands = specify_country(f_date, country)\ndf_netherlands = df_netherlands[['Confirmed','Deaths', 'Recovered', 'Date']]\ndf_netherlands","e740c2aa":"fig = go.Figure()\n\ntrace0 = go.Scatter(\n    x = df_netherlands['Date'],\n    y = df_netherlands['Confirmed'],\n    name = \"Cases\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Cases: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#1f77b4\"\n    )\n)\n\ntrace1 = go.Scatter(\n    x = df_netherlands['Date'],\n    y = df_netherlands['Deaths'],\n    name = \"Deaths\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Deaths: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#d62728\"\n    )\n)\n\ntrace2 = go.Scatter(\n    x = df_netherlands['Date'],\n    y = df_netherlands['Recovered'],\n    name = \"Recovered\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Recovered: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#00b200\"\n    )\n)\n\n\ndata = [trace0, trace1, trace2]\nlayout = go.Layout(title = 'Cumulative COVID-19 cases in Netherlands',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Confirmed Cases'),)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","58185bed":"f_date = date(2020, 1, 22)\ncountry = 'Germany'\n\ndf_germany = specify_country(f_date, country)\ndf_germany = df_germany[['Confirmed','Deaths', 'Recovered', 'Date']]\ndf_germany","18448875":"fig = go.Figure()\n\ntrace0 = go.Scatter(\n    x = df_germany['Date'],\n    y = df_germany['Confirmed'],\n    name = \"Cases\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Cases: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#1f77b4\"\n    )\n)\n\ntrace1 = go.Scatter(\n    x = df_germany['Date'],\n    y = df_germany['Deaths'],\n    name = \"Deaths\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Deaths: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#d62728\"\n    )\n)\n\ntrace2 = go.Scatter(\n    x = df_germany['Date'],\n    y = df_germany['Recovered'],\n    name = \"Recovered\",\n    fill='tozeroy',\n    mode = 'lines+markers',\n    hovertemplate = 'Recovered: %{y}<br>%{x}',\n    marker=dict(\n        size=8,\n        color = \"#00b200\"\n    )\n)\n\n\ndata = [trace0, trace1, trace2]\nlayout = go.Layout(title = 'Cumulative COVID-19 cases in Germany',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Confirmed Cases'),)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2f84ed10":"I have tried to code a function in order to get some country's COVID-19 data. Please make comment how can we improve this funcion or build new functions to help community.\n\nData by Johns Hopkins CSSE: https:\/\/github.com\/CSSEGISandData\/COVID-19\n","3a7fdeb5":"## ** Function to get COVID-19 Data of Specific Country **","d5b1cf9d":"## Germany","1a35a8ce":"### ** Brazil **","8a815c99":"### ** Turkey **","33011983":"### ** Netherlands **","2d69d625":"## ** Examples **"}}