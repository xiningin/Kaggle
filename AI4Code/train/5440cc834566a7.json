{"cell_type":{"22922597":"code","b2f72faa":"code","558e6948":"code","bb89093a":"code","2e8cebdb":"code","13429ee6":"code","c5a830ed":"code","320f4a0f":"code","b0ebcf1f":"code","0e77f27b":"code","278e0e45":"code","3f69b153":"code","49b39eee":"code","59651d50":"code","a8483202":"code","28cb13f4":"code","068bdd86":"code","94dae2ba":"code","22c9d34d":"code","92daddb6":"code","8cfd9283":"code","89c199ec":"code","0b55286b":"code","e2ace2ed":"code","be8ebb33":"code","6c9d9c4f":"code","fc3ccb90":"code","e1e23960":"code","58ffec08":"code","8a132873":"markdown","6ec115ab":"markdown","ce9f1154":"markdown","43b7569a":"markdown","7e7f93a7":"markdown","7593c050":"markdown","5f1e0479":"markdown","1fc2889f":"markdown","86dca762":"markdown","cb243bde":"markdown","10425cb9":"markdown","9cb29261":"markdown","0813e7c7":"markdown","b7ceb5c4":"markdown","45f907c3":"markdown","42ff608e":"markdown","d85dcef3":"markdown","05b728da":"markdown","32c653f5":"markdown","fdf38183":"markdown","0fe4942d":"markdown","7ad06be4":"markdown","73955eed":"markdown","37a023bd":"markdown","750a8cfb":"markdown","bb1f3f4c":"markdown","79c22d9c":"markdown","207145da":"markdown","a83cd7e7":"markdown","589c3a2f":"markdown","cce66a64":"markdown","7e0902ea":"markdown","417a7799":"markdown","52a0c81c":"markdown","7b8b5bba":"markdown","ae74d162":"markdown","2c627f78":"markdown","138b4f17":"markdown","e1ac32b6":"markdown","bd82c4a4":"markdown","36b4f296":"markdown","beabd2c7":"markdown"},"source":{"22922597":"import pandas as pd\nimport matplotlib.pyplot as plt","b2f72faa":"violations2017 = pd.read_csv('..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2017.csv')\nviolations2018 = pd.read_csv('..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2018.csv')\nviolations2019 = pd.read_csv('..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2019.csv')\nviolations2020 = pd.read_csv('..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2020.csv')\ndescriptors = pd.read_csv('..\/input\/nyc-parking-violations\/ParkingViolationCodes_2020.csv')","558e6948":"print(violations2017.shape)\nprint(violations2018.shape)\nprint(violations2019.shape)\nprint(violations2020.shape)\nprint(descriptors.shape)","bb89093a":"violations2020.head()","2e8cebdb":"descriptors.head()","13429ee6":"#This data is mostly categorical\nviolations2020.describe()","c5a830ed":"#Dropping and reorganizing columns. New column order shown in the columns lsit below. \ncolumns = [ 'Issue Date', 'Plate ID','Violation Code', 'Registration State','Plate Type', 'Vehicle Body Type', \n            'Vehicle Make', 'Issuing Agency', 'Violation Time', 'Vehicle Color', \n            'Vehicle Year', 'Time First Observed','Violation County', 'Street Name']\nviolations2020 = violations2020[columns]\nviolations2017 = violations2017[columns]\nviolations2018 = violations2018[columns]\nviolations2019 = violations2019[columns]","320f4a0f":"#The Issue Date column has data represented as string\nviolations2020.dtypes","b0ebcf1f":"#Here we are converting the entire 'Issue Date' column to instances of Timestamp with to_datetime() for each violations_issues dataframe \nviolations2020['Issue Date'] = pd.to_datetime(violations2020['Issue Date'])\nviolations2017['Issue Date'] = pd.to_datetime(violations2017['Issue Date'])\nviolations2018['Issue Date'] = pd.to_datetime(violations2018['Issue Date'])\nviolations2019['Issue Date'] = pd.to_datetime(violations2019['Issue Date'])","0e77f27b":"violations2020.dtypes","278e0e45":"violations2020.head()","3f69b153":"violations_df_dict = {\n    '2017': violations2017,\n    '2018': violations2018,\n    '2019': violations2019,\n    '2020': violations2020,\n}","49b39eee":"#A For Loop iterating through the different violation dataframes\nfor violation_year, violations_df in violations_df_dict.items():    \n    print()\n    print(violation_year) \n    #isnull is for String or Object Data, such as DataTime\n    print('Issue Date:', violations_df['Issue Date'].isnull().sum().sum())\n    #Specific to THIS Dataset, Zeros represent empty values for numeric data\n    print('Violation Codes:', (violations_df['Violation Code'] == 0).sum())\n    print('Vehicle Body Type:', violations_df['Vehicle Body Type'].isnull().sum().sum())\n    print('Registration State:', violations_df['Registration State'].isnull().sum().sum())\n    print('Plate Type:', violations_df['Plate Type'].isnull().sum().sum())\n    print('Violation Time:', violations_df['Violation Time'].isnull().sum().sum())\n    print('Vehicle Year:',(violations_df['Vehicle Year'] == 0).sum())\n    print('Time First Observed:', violations_df['Time First Observed'].isnull().sum().sum())\n    print('Violation County:', violations_df['Violation County'].isnull().sum().sum())\n    print('Street Name:', violations_df['Street Name'].isnull().sum().sum())","59651d50":"#2020\n# Update dataframe, by getting all violation codes that are not equal to zero or notna. \nviolations2020 = violations2020[violations2020['Violation Code'] != 0]\nviolations2020 = violations2020[violations2020['Vehicle Year'] != 0]\nviolations2020 = violations2020[violations2020['Vehicle Body Type'].notna()]\nviolations2020 = violations2020[violations2020['Violation Time'].notna()]\n\n#2017\nviolations2017 = violations2017[violations2017['Vehicle Body Type'].notna()]\nviolations2017 = violations2017[violations2017['Street Name'].notna()]\nviolations2017 = violations2017[violations2017['Vehicle Year'] != 0]\n\n#2018\nviolations2018 = violations2018[violations2018['Vehicle Year'] != 0]\n\n#2019\nviolations2019 = violations2019[violations2019['Vehicle Year'] != 0]","a8483202":"#pd.concat combines a list of dataframes and then returns the combined dataframe\n#(violations_df_dict.values()) returns a list of all the values in the dictionary, which is the 4 dataframes\nall_violations = pd.concat(violations_df_dict.values())","28cb13f4":"all_violations.shape","068bdd86":"#First create a dictionary mapping old borough to new borough\nboroughs_dict = {'QNS': 'Q','QN' : 'Q', 'KINGS': 'K', 'BK' : 'K', 'BRONX':'BX', 'MN' : 'NY','ST' : 'R' }\n#replace function using the dict will convert the old boroughs to the new boroughs\nall_violations['Violation County'] = all_violations['Violation County'].replace(boroughs_dict)\n#Filtering out all violation boroughs that are NOT P, as P is very unclear to what it represents.\nall_violations = all_violations[~all_violations['Violation County'].str.match('P')]","94dae2ba":"vehicle_color_dict = {'WHITE':'WH', 'BLACK': 'BK'}\nall_violations['Vehicle Color'] = all_violations['Vehicle Color'].replace(vehicle_color_dict)","22c9d34d":"from datetime import datetime\n\n#Function for converting Violation Time's string data into hours float data  \ndef convert_time(time_str):\n    # Use try-except because there are some invalid or empty values (especially for the years that have only empty values).\n    try:\n        # Get the hours and minutes from the time_str and convert to integers. \n        # Remember time represented in string formated as------>HH:MM:SS \n        hours = int(time_str[0:2])\n        minutes = int(time_str[2:4])\n        \n        # If the time is \"PM\", and it's not noon, then we need to add 12 hours to make it proper military time.\n        if 'P' in time_str and hours != 12:\n            hours = hours + 12\n            \n        # For simplicity, convert the hours + minutes to just hours with a decimal place.\n        hours = hours + (minutes \/ 60)\n        if hours > 23:\n            return None\n        return hours\n    except:\n        # If the time_str is not in the valid format return None for now.\n        return None\n\n# Use the Convert_time function above to convert every violation time to a decimal number representing military time\n#The apply() function is calling the lambda function and applying it to every row here\nall_violations['Violation Time'] = all_violations['Violation Time'].apply(lambda row: convert_time(row))\n\n# Get rid of the invalid values by using notnull which will only select valid values. \nall_violations = all_violations[all_violations['Violation Time'].notnull()]","92daddb6":"descriptors.head(97)","8cfd9283":"#Mergining all_violations(left) & descriptors(right) by the violation code.\nall_violations = all_violations.merge(descriptors, left_on='Violation Code', right_on='VIOLATION CODE')","89c199ec":"#Dropping duplicate violation code column\ncolumns_to_drop= ['VIOLATION CODE']\nall_violations = all_violations.drop(columns_to_drop, axis='columns')\nall_violations.head()","0b55286b":"#Using a bar chart as its cegorical data \nall_violations['Vehicle Make'].value_counts()[0:7].plot(kind='bar')\nplt.ylabel('Number of Tickets Issued')\nplt.xlabel('Vehicle Maker')\nplt.title('Number of Tickets by Vehicle Make');","e2ace2ed":"all_violations['Vehicle Color'].value_counts()[0:7].plot(kind='bar')\nplt.ylabel('Number of Tickets Issued')\nplt.xlabel('Vehicle Color')\nplt.title('Number of Tickets by Vehicle Color');","be8ebb33":"#Passagenger data is a subset of ALL violations where 'Plate Type' is equal to PAS.\npassenger_data = all_violations[all_violations['Plate Type'].str.match('PAS')]\npassenger_data['Plate ID'].value_counts()[0:10].plot(kind='bar')\nplt.ylabel('Number of Tickets Issued')\nplt.xlabel('License Plate Number')\nplt.title('Number of Tickets by License Plate');\n","6c9d9c4f":"XDZD73 = all_violations[all_violations['Plate ID'].str.match('XDZD73')]\nXDZD73.head()","fc3ccb90":"all_violations['Violation County'].value_counts().plot(kind='bar')\nplt.ylabel('Number of Tickets Issued')\nplt.xlabel('Violation County')\nplt.title('Number of Tickets by Violation County');","e1e23960":"all_violations['Street Name'].value_counts()[0:10].plot(kind='bar')\nplt.ylabel('Number of Tickets Issued')\nplt.xlabel('Street Name')\nplt.title('Top 10 Most Ticketed Streets');","58ffec08":"#Every bar hour responds to an hour in military time.\nall_violations['Violation Time'].hist(bins=24)\nplt.ylabel('Number of Tickets Issued')\nplt.xlabel('Time in Military Hours')\nplt.title('Number of Tickets Issued by Time');","8a132873":"**(A) Shape of the data**","6ec115ab":"**References**: \n> * [Lambda with Apply](https:\/\/www.analyticsvidhya.com\/blog\/2020\/03\/what-are-lambda-functions-in-python\/)\n> * [time_str](https:\/\/www.journaldev.com\/23365\/python-string-to-datetime-strptime)","ce9f1154":"# ***Data Preparation***","43b7569a":"\n# 3. **When** are most tickets issued? What **time of the day** should we be most cautious of?\n**Cleaning was done above to convert string times to number of hours**","7e7f93a7":"# Counting and printing Null values\nUtilized the dictionary in the cell above so we could print out the respective year for each dataframe. ","7593c050":"# Dropping rows with missing values","5f1e0479":"I want to make note that the data shows **toyotas** as being the most ticketed, but it's also possible that vehicle make is just very popular amongst the whole population of vehicles, not just the ticketed ones. The same can be said about vehicle color **(Grey, black, and white)** are most likely the common car colors.","1fc2889f":"Given the daily data for these four years, most offenses occured between 10 AM and 3PM. These results are expected due to time dependent violations such as 'NO PARKING-DAY\/TIME LIMITS', **Code 20**, can only be issued during middle of the day. Additionally, the work day hours may decrease the availability of parking spots, leading to more violations to be committed. ","86dca762":"# 1. **Who** gets the most tickets.","cb243bde":"# Converting **Issue Date** from string to datetime. ","10425cb9":"# Understand the Data\n","9cb29261":" # **Content**\n* **Plate ID:** REGISTERED PLATE ID        \n* **Summons Number:** UNIQUE IDENTIFIER OF SUMMONS   \n* **Registration State:** STATE OF PLATE REGISTRATION    \n* **Plate Type:** TYPE OF PLATE     \n* **Issue Date:**  ISSUE DATE      \n* **Violation Code:** TYPE OF VIOLATION     \n* **Vehicle Body Type:** VEHICLE BODY TYPE WRITTEN ON SUMMONS (SEDAN, ETC.)\n* **Vehicle Make:** MAKE OF CAR WRITTEN ON SUMMONS  \n* **Issuing Agency:** ISSUING AGENCY CODE     \n* **Street Code1:** GEOGRAPHICAL STREET CODE     \n* **Street Code2:** GEOGRAPHICAL STREET CODE     \n* **Street Code3:** GEOGRAPHICAL STREET CODE     \n* **Vehicle Expiration Date:** VEHICLE EXPIRATION DATE ON SUMMONS   \n* **Violation Location:** GENERAL VIOLATION LOCATION     \n* **Violation Precinct:** PRECINCT OF VIOLATION     \n* **Issuer Precinct:** PRECINCT OF ISSUANCE     \n* **Issuer Code:** UNIQUE CODE IDENTIFYING ISSUING OFFICER   \n* **Issuer Command:** COMMAND OF ISSUING OFFICER    \n* **Issuer Squad:** ISSUING OFFICER'S SQUAD     \n* **Violation Time:** TIME VIOLATION OCCURRED     \n* **Time First Observed:** TIME OF INITIAL VIOLATION OBSERVATION   \n* **Violation County:** COUNTY OF VIOLATION     \n* **Violation In Front Of Or Opposite:** VIOLATION IN FRONT OF OR OPPOSITE  \n* **House Number:** ADDRESS NUMBER OF VIOLATION    \n* **Street Name:** STREET NAME OF SUMMONS ISSUED   \n* **Intersecting Street:** VIOLATION NEAR INTERSECTING STREET    \n* **Date First Observed:** DATE OF INITIAL VIOLATION OBSERVATION   \n* **Law Section:** SECTION OF VEHICLE & TRAFFIC LAW  \n* **Sub Division:** SUB DIVISION ON SUMMONS IMAGE   \n* **Violation Legal Code:** TYPE OF LEGAL CODE    \n* **Days Parking In Effect:** DAYS PARKING IN EFFECT    \n* **From Hours In Effect:** START TIME POSTED FOR METER AND SIGN VIOLATIONS\n* **To Hours In Effect:** END TIME POSTED FOR METER AND SIGN VIOLATIONS\n* **Vehicle Color:** CAR COLOR WRITTEN ON SUMMONS   \n* **Unregistered Vehicle?:** UNREGISTERED VEHICLE INDICATOR     \n* **Vehicle Year:** YEAR OF VEHICLE WRITTEN ON SUMMONS  \n* **Meter Number:** PARKING METER NUMBER FOR METER VIOLATIONS  \n* **Feet From Curb:** NUMBER OF FEET FROM CURB FOR HYDRANT VIOLATION\n* **Violation Post Code:** NUMBER OF FEET FROM CURB FOR HYDRANT VIOLATION\n* **Violation Description:** DESCRIPTION OF VIOLATION     \n* **No Standing or Stopping Violation:** SUMMONS INDICTOR FOR NO STANDING OR STOPPING \n* **Hydrant Violation:** SUMMONS INDICTOR FOR NO STANDING OR STOPPING \n* **Double Park:** SUMMONS INDICATOR FOR DOUBLE PARKING VIOLATION  \n\n\n","0813e7c7":"There is actually an [article](https:\/\/nypost.com\/2019\/11\/02\/nyc-school-zone-speed-cameras-ticket-1-million-motorists-in-3-months\/) \nthat discussed which New York City school zone had the most camera-generated speeding violations issued between July 11 to Oct. 11, 2019. Our top street, EB Horace Harding Expressway, came in 6th place in that list. ","b7ceb5c4":"Same issue with vehicle color.","45f907c3":"Throughout 2017 and 2020 the driver with the XDZD73 license plate was the top offender amongst passenger drivers. Commercial drivers, individually, had actually culminated 300+ tickets in the same time. ","42ff608e":"# **New York City Parking Violations**","d85dcef3":"# Import the Violations Data sets for years 2017-2020 and code descriptors\nEventually we want to merge all of the datasets into a single dataframe for analysis. \nFile paths listed below:\n1. Violations Issued **2017**: ..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2017.csv\n1. Violations Issued **2018**:..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2018.csv\n1. Violations Issued **2019**:..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2019.csv\n1. Violations Issued **2020**: ..\/input\/nyc-parking-violations\/Parking_Violations_Issued_-_Fiscal_Year_2020.csv\n1. Violation **Descriptors**: ..\/input\/nyc-parking-violations\/ParkingViolationCodes_2020.csv\n","05b728da":"Please note the **descriptors** dataframe reflects violation fine amounts from the most updated year, **2020**. *Fines may be lower for previous years.*","32c653f5":"Notice that there are duplicate boroughs with different titles (ex. K and Kings). The additonal columns found were: MN, KINGS, QNS, BRONX, ST and P(no idea). As we want only 5 boroughs, the code below will merge duplicate columns and drop P(There is almost no data in P, so i felt it was justified to drop it). ","fdf38183":"**(C) Basic Examination of Data:**\n* **Relationship between dataframes:**\n> * The 43 columns for the four violation code dataframes are identical, so it will be simple to merge later on. \n> * The violation codes found on the yearly tables can be matched to the 'VIOLATION CODE' column in the descriptors dataframe. This will be helpful when joining the dataframes together. \n* **Any missing data?** From first glance, there are missing values in some rows such as: vehicle expiration date and vehicle body type. \n* **Why is this data missing?** Some values that are less relevant to New York processing a ticket are missing, while data such as the summons number is never missing.\n* **Any inconsistent data?** Some months had significantly less data than other months. Some invalid violation times were found. \n* **Which columns are interesting?** The following columns, for the most part, have useful\/consistent data that can be used to visualize trends relating to the violations issued.    \n> **Issue Date, Plate ID, Violation Code, Registration State, Plate Type, Vehicle Body Type,  Vehicle Color, Vehicle Make, Issuing Agency, Violation Time, Vehicle Color, Vehicle Year, Time First Observed, Violation County, Street Name**\n* **Which columns are not?** The following columns either have too much incosistent data, too many empty cells, or simply a lack relativity to my proposed questions.  \n> **From Hours In Effect, To Hours In Effect, Unregistered Vehicle?, Vehicle Year, Meter Number, Feet From Curb, Violation Post Code, Violation Description, No Standing or Stopping Violation, Hydrant Violation, Double Parking Violation, Law Section, Sub Division.**\n* **Interesting information I can get out of this data?** Trends relating to who was most ticketed, what vehicles were ticketed, where and when violations occur etc.","0fe4942d":"Does what you drive affect your chances? **Based on vehicle make?**","7ad06be4":"Other than Staten Island's placement at the very bottom, the results did suprise me. I wasn't expecting both Queens and Brookyln to out-ticket Manhattan by over 100%. The reasoning for these results may stem from a similar concept seen in the vehicle make\/color results. The idea that there might just be a significantly higher amount of drivers in areas such as Queens and Brookyln. It would be interesting to gather data on all the registered vehicles in each county and to calculate the percentage of drivers ticketed for each county. ","73955eed":"**Inspiration:** I'm a huge fan of visiting Manhattan...and of course its surrounding areas. Making the journey into New York is pretty simple given that I am only a forty minute train ride from Penn. However, I often wonder whether driving into the city is a better option (Usually isn't). Before even opening the car door, I always ask myself one question, \"am I getting a ticket?\" What factors increase the chance of finding a ticket on my windshield or getting pulled over. Being curious about the violations we all might face parking anywhere within New York's 5 boroughs, I decided to use this dataset to answer the following questions:  \n\n1. **Who gets the most tickets?** What are the most common **car types** and **make years** that receive the most tickets. (Is there a correlation between vehicle color and # of violations). Any **Repeat offenders**? Who is offensive vehicle owner of 2020 (Based on # offenses). Any **Repeat offenders**? Most offensive vehicle owner of 2020 (Based on # offenses).\n1.  **Where** are most tickets issued. (Which **borough's** receive the most tickets.)\n1.  **When** are most tickets issued.\n","37a023bd":"# Mapping the Year to its respective dataframe.\nCreate a dictionary where the key is the year and the value is the respective dataframe. We do this so we may loop through the dataframes to perform cleaning operations.","750a8cfb":"From this dataframe we see that every one of this driver's issues were **buslane violations**. The vehicle is a truck registered in New Jeresy  which consistently recieves violations in the Bronx and mostly on the same street intersection. A possible reason for this could be that this truck is being used for delivery operations and maybe they are frequently parking in front of a client store that is located on a bus lane. The drawback of that theory is that i filtered out all commercial plate types and focused on PAS.    ","bb1f3f4c":"# **Issue Date** is now a datetime object","79c22d9c":"# Additional Cleaning (Post Data Analysis) \nRan into issues with plotting so additional cleaning was necessary.","207145da":"# Converting **Violation Time** to a float representing hours.\nFor simplicity, we will be converting the string time into a float. The function below will convert a string, (e.g. 0530P) to an hours float (e.g. 17.5).","a83cd7e7":"**(B) Nature of the Data**\nColoumns are identical for all years so we'll be using just 2020 as an example to keep the notebook lean. ","589c3a2f":"\n# 2. **Where** are most tickets issued. (Which **borough** recieves the most tickets.)\n> K=Kings, Q=Queens, NY=Manhattan, BX=Bronx, R=Richmond County(Staten Island)","cce66a64":"# Joining the Yearly Violations Dataframes with the Violation Code Description Dataframe. \nThe data frame that was created above, **all_violations**, contains only numerical violations codes. Their respective descriptions are located on the descriptors dataframe","7e0902ea":"# ***Data Analysis***","417a7799":"# **Background** \n* This is an analysis of the parking violations committed in New York City during between the fiscal years of 2017-2020.\n- The information contained in this dataset includes summons numbers, license plate ID\/Type, vehicle information, violation codes and their respective descriptions. \n* The data is pulled from the [NYC Open Data site](https:\/\/data.cityofnewyork.us\/City-Government\/Parking-Violations-Issued-Fiscal-Year-2020\/p7t3-5i9s\/data). ","52a0c81c":" # Joining the Dataframes","7b8b5bba":"What about **color?**","ae74d162":"With the data cleaned, we may now visualize the data help us identity interesting areas of focus: \n 1. **Who** gets the most tickets?\n>  What are the most common **car makes** and **car color** that recieve the most tickets. Any **Repeat offenders**? Who is the **most offensive** vehicle owner of 2020. What were their violations. \n 1. **Where** are most tickets issued.\n>  Which **borough's** recieve the most tickets. **Which streets?**\n 1. **When** are most tickets issued during the day? \n>  Top violations plotted by time of day.","2c627f78":"# Import Libraries","138b4f17":"# Now lets combine **all 4 years** worth of data into **a single dataframe**. \nWe will be combining these 4 dataframes through [Concatenation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.concat.html)\n\n ","e1ac32b6":"**Now let's narrow it down to streets?** Which are the **most popular** streets for violations.","bd82c4a4":"**reference:** [pandas.to_datetime](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.to_datetime.html)","36b4f296":"# Colomns we want to keep\n","beabd2c7":"So who were the **top offenders** between 2017-2020 based on Plate ID frequency."}}