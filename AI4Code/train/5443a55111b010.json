{"cell_type":{"7d4b70e1":"code","edcff879":"code","dc173845":"code","18823ae7":"code","39684528":"code","fbf415f8":"code","d64eb8b1":"code","24f55aee":"code","a90f0c55":"code","95f1afdc":"code","59b70326":"code","0b6c891e":"code","79a06696":"code","9e498024":"code","df33ff9e":"code","7a8b4844":"code","782883fa":"code","a477191b":"code","9ceb8c17":"markdown","8ae39752":"markdown","173d13d0":"markdown","784b57bf":"markdown","5791b60b":"markdown","9d95c5e0":"markdown","74e4ca2d":"markdown","57b86798":"markdown","d46564e2":"markdown","4d760ee8":"markdown","adb866fd":"markdown","7f861201":"markdown","3cc01efe":"markdown","c469ac9c":"markdown","f983d191":"markdown","ab8fd7d7":"markdown","23d28b7f":"markdown","1e7c493a":"markdown"},"source":{"7d4b70e1":"## import packages\nimport numpy as np\nimport pandas as pd\n\nfrom bokeh.layouts import column, row\nfrom bokeh.models import ColumnDataSource, LinearAxis, Range1d, FactorRange, NumeralTickFormatter\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.palettes import Blues9, Greens9, Oranges7, Reds9, Spectral4\nfrom bokeh.plotting import figure, output_notebook, show\nfrom bokeh.transform import cumsum, dodge\n\noutput_notebook()\n\n## setup configuration, constants and parameters\nPATH_WGM_GAMES = \"..\/input\/chess-games-of-woman-grandmasters\/games_wgm.csv\"\nPATH_FIDE_RATINGS = \"..\/input\/chess-fide-ratings\"\n\nMAPPING_MONTH = {\n    1: \"Jan\",\n    2: \"Feb\",\n    3: \"Mar\",\n    4: \"Apr\",\n    5: \"May\",\n    6: \"Jun\",\n    7: \"Jul\",\n    8: \"Aug\",\n    9: \"Sep\",\n    10: \"Oct\",\n    11: \"Nov\",\n    12: \"Dec\"\n}\n\nMAPPING_WEEKDAY = {\n    0: \"Mon\",\n    1: \"Tue\",\n    2: \"Wed\",\n    3: \"Thu\",\n    4: \"Fri\",\n    5: \"Sat\",\n    6: \"Sun\"\n}\n","edcff879":"## preparing data\ndf_games = pd.read_csv(PATH_WGM_GAMES, parse_dates = [\"end_time\"])\ndf_games = df_games[df_games.rules == \"chess\"]\ndf_games[\"wgm_rating\"] = df_games.white_rating\ndf_games.loc[df_games.wgm_username == df_games.black_username.str.lower(), \"wgm_rating\"] = df_games[df_games.wgm_username == df_games.black_username.str.lower()].black_rating.values\ndf_games[\"wgm_result\"] = df_games.white_result\ndf_games.loc[df_games.wgm_username == df_games.black_username.str.lower(), \"wgm_result\"] = df_games[df_games.wgm_username == df_games.black_username.str.lower()].black_result.values\ndf_games[\"opponent_result\"] = df_games.black_result\ndf_games.loc[df_games.wgm_username == df_games.black_username.str.lower(), \"opponent_result\"] = df_games[df_games.wgm_username == df_games.black_username.str.lower()].white_result.values\ndf_games[\"checkmated\"] = (df_games.opponent_result == \"checkmated\").astype(int)\ndf_games[\"year\"] = df_games.end_time.dt.year\ndf_games[\"month\"] = df_games.end_time.dt.month\ndf_games[\"date\"] = df_games.end_time.dt.date\ndf_games[\"weekday\"] = df_games.end_time.dt.weekday\ndf_games[\"games\"] = 1\n\ndf_games.head()\n","dc173845":"print(\"Games:\", df_games.shape[0])\nprint(\"First Game:\", min(df_games.end_time))\nprint(\"Last Game:\", max(df_games.end_time))\n","18823ae7":"df_date = df_games.groupby(\"date\")[\"games\"].count().reset_index().sort_values(\"date\")\ndf_date[\"cumulative_games\"] = df_date.games.cumsum()\n\nsource_1 = ColumnDataSource(data = dict(\n    date = np.array(df_date.date.values, dtype = np.datetime64),\n    games = df_date.games.values,\n    cumulative_games = df_date.cumulative_games.values\n))\n\ntooltips_11 = [\n    (\"Date\", \"@date{%F}\"),\n    (\"Games\", \"@games\")\n]\n\ntooltips_12 = [\n    (\"Date\", \"@date{%F}\"),\n    (\"Cumulative Games\", \"@cumulative_games\")\n]\n\nformatters_1 = {\n    \"@date\": \"datetime\"\n}\n\nv1 = figure(plot_width = 660, plot_height = 300, x_axis_type = \"datetime\", title = \"Games Played\")\nv1.extra_y_ranges = {\"Games\": Range1d(start = -32.0, end = 1.1 * max(df_date.games))}\n\nv11 = v1.line(\"date\", \"games\", source = source_1, width = 2, color = \"green\", y_range_name = \"Games\", legend_label = \"Games\")\nv12 = v1.line(\"date\", \"cumulative_games\", source = source_1, width = 2, color = \"blue\", legend_label = \"Cumulative Games\")\n\nv1.add_tools(HoverTool(renderers = [v11], tooltips = tooltips_11, formatters = formatters_1, mode = \"vline\"))\nv1.add_tools(HoverTool(renderers = [v12], tooltips = tooltips_12, formatters = formatters_1, mode = \"vline\"))\n\nv1.xaxis.axis_label = \"Date\"\nv1.yaxis.axis_label = \"Total Games\"\nv1.yaxis[0].formatter = NumeralTickFormatter(format = \"0a\")\n\nv1.add_layout(LinearAxis(y_range_name = \"Games\", axis_label = \"Games\"), \"right\")\n\nv1.legend.location = \"top_left\"\n\n\ndf_year_games = df_games.groupby(\"year\")[\"games\"].count().reset_index().sort_values(\"year\")\ndf_year_users = df_games.drop_duplicates(subset = [\"year\", \"wgm_username\"]).groupby(\"year\")[\"games\"].count().reset_index().sort_values(\"year\")\ndf_year_users.rename(columns = {\"games\": \"users\"}, inplace = True)\ndf_year = df_year_games.merge(df_year_users, on = \"year\")\n\nsource_2 = ColumnDataSource(df_year)\n\ntooltips_2 = [\n    (\"Year\", \"@year\"),\n    (\"Games\", \"@games\"),\n    (\"Players\", \"@users\")\n]\n\nv2 = figure(plot_width = 660, plot_height = 300, tooltips = tooltips_2, title = \"Games and Users by Year\")\nv2.extra_y_ranges = {\"Users\": Range1d(start = -5.5, end = 1.1 * max(df_year.users))}\n\nv2.vbar(x = \"year\", top = \"games\", source = source_2, width = 0.75, alpha = 0.8, color = \"orange\", legend_label = \"Games Played\")\nv2.line(x = \"year\", y = \"users\", source = source_2, width = 3, y_range_name = \"Users\", color = \"grey\", legend_label = \"Unique WGM Players\")\n\nv2.xaxis.axis_label = \"Year\"\nv2.yaxis.axis_label = \"Games\"\n\nv2.legend.location = \"top_left\"\n\nv2.add_layout(LinearAxis(y_range_name = \"Users\", axis_label = \"Users\"), \"right\")\n\n\ndf_month = df_games.groupby(\"month\")[\"games\"].count().reset_index().sort_values(\"month\")\ndf_month.month = df_month.month.map(MAPPING_MONTH)\n\nsource_3 = ColumnDataSource(df_month)\n\ntooltips_3 = [\n    (\"Month\", \"@month\"),\n    (\"Games\", \"@games\")\n]\n\nv3 = figure(plot_width = 390, plot_height = 300, x_range = df_month.month.values, tooltips = tooltips_3, title = \"Games by Month\")\n\nv3.vbar(x = \"month\", top = \"games\", source = source_3, width = 0.7, alpha = 0.8, color = \"maroon\")\n\nv3.xaxis.axis_label = \"Month\"\nv3.yaxis.axis_label = \"Games\"\n\n\ndf_weekday = df_games.groupby(\"weekday\")[\"games\"].count().reset_index().sort_values(\"weekday\")\ndf_weekday.weekday = df_weekday.weekday.map(MAPPING_WEEKDAY)\n\nsource_4 = ColumnDataSource(df_weekday)\n\ntooltips_4 = [\n    (\"Weekday\", \"@weekday\"),\n    (\"Games\", \"@games\")\n]\n\nv4 = figure(plot_width = 270, plot_height = 300, x_range = df_weekday.weekday.values, tooltips = tooltips_4, title = \"Games by Weekday\")\n\nv4.vbar(x = \"weekday\", top = \"games\", source = source_4, width = 0.7, alpha = 0.8, color = \"maroon\")\n\nv4.xaxis.axis_label = \"Weekday\"\nv4.yaxis.axis_label = \"Games\"\n\n\nshow(column(v1, v2, row(v3, v4)))\n","39684528":"df_time_class = df_games.groupby(\"time_class\")[\"games\"].count().reset_index()\ndf_time_class[\"game_ratio\"] = df_time_class.games * 100 \/ df_time_class.games.sum()\ndf_time_class[\"angle\"] = df_time_class.games \/ df_time_class.games.sum() * 2 * np.pi\ndf_time_class[\"color\"] = Spectral4\n\ntooltips_1 = [\n    (\"Games Ratio\", \"@game_ratio{0.0}%\")\n]\n\nv1 = figure(plot_width = 660, plot_height = 300, tooltips = tooltips_1, title = \"Distribution of Game Format\")\n\nv1.wedge(\n    x = 0,\n    y = 1,\n    radius = 0.35,\n    source = df_time_class,\n    start_angle = cumsum(\"angle\", include_zero = True),\n    end_angle = cumsum(\"angle\"),\n    line_color = \"white\",\n    fill_color = \"color\",\n    legend_field = \"time_class\"\n)\n\nv1.axis.axis_label = None\nv1.axis.visible = False\nv1.grid.grid_line_color = None\n\n\ndf_bullet = df_games[df_games.time_class == \"bullet\"].groupby(\"time_control\")[\"games\"].count().reset_index().sort_values(\"games\", ascending = False).head(9)\ndf_bullet[\"game_ratio\"] = df_bullet.games * 100 \/ df_bullet.games.sum()\ndf_bullet[\"angle\"] = df_bullet.games \/ df_bullet.games.sum() * 2 * np.pi\ndf_bullet[\"color\"] = Greens9\n\ntooltips_2 = [\n    (\"Games Ratio\", \"@game_ratio{0.0}%\")\n]\n\nv2 = figure(plot_width = 330, plot_height = 250, tooltips = tooltips_2, title = \"Time Control of Bullet Games\")\n\nv2.wedge(\n    x = 0,\n    y = 1,\n    radius = 0.35,\n    source = df_bullet,\n    start_angle = cumsum(\"angle\", include_zero = True),\n    end_angle = cumsum(\"angle\"),\n    line_color = \"white\",\n    fill_color = \"color\",\n    legend_field = \"time_control\"\n)\n\nv2.axis.axis_label = None\nv2.axis.visible = False\nv2.grid.grid_line_color = None\n\n\ndf_blitz = df_games[df_games.time_class == \"blitz\"].groupby(\"time_control\")[\"games\"].count().reset_index().sort_values(\"games\", ascending = False).head(9)\ndf_blitz[\"game_ratio\"] = df_blitz.games * 100 \/ df_blitz.games.sum()\ndf_blitz[\"angle\"] = df_blitz.games \/ df_blitz.games.sum() * 2 * np.pi\ndf_blitz[\"color\"] = Blues9\n\ntooltips_3 = [\n    (\"Games Ratio\", \"@game_ratio{0.0}%\")\n]\n\nv3 = figure(plot_width = 330, plot_height = 250, tooltips = tooltips_3, title = \"Time Control of Blitz Games\")\n\nv3.wedge(\n    x = 0,\n    y = 1,\n    radius = 0.35,\n    source = df_blitz,\n    start_angle = cumsum(\"angle\", include_zero = True),\n    end_angle = cumsum(\"angle\"),\n    line_color = \"white\",\n    fill_color = \"color\",\n    legend_field = \"time_control\"\n)\n\nv3.axis.axis_label = None\nv3.axis.visible = False\nv3.grid.grid_line_color = None\n\n\ndf_rapid = df_games[df_games.time_class == \"rapid\"].groupby(\"time_control\")[\"games\"].count().reset_index().sort_values(\"games\", ascending = False).head(9)\ndf_rapid[\"game_ratio\"] = df_rapid.games * 100 \/ df_rapid.games.sum()\ndf_rapid[\"angle\"] = df_rapid.games \/ df_rapid.games.sum() * 2 * np.pi\ndf_rapid[\"color\"] = Reds9\n\ntooltips_4 = [\n    (\"Games Ratio\", \"@game_ratio{0.0}%\")\n]\n\nv4 = figure(plot_width = 330, plot_height = 250, tooltips = tooltips_4, title = \"Time Control of Rapid Games\")\n\nv4.wedge(\n    x = 0,\n    y = 1,\n    radius = 0.35,\n    source = df_rapid,\n    start_angle = cumsum(\"angle\", include_zero = True),\n    end_angle = cumsum(\"angle\"),\n    line_color = \"white\",\n    fill_color = \"color\",\n    legend_field = \"time_control\"\n)\n\nv4.axis.axis_label = None\nv4.axis.visible = False\nv4.grid.grid_line_color = None\n\n\ndf_daily = df_games[df_games.time_class == \"daily\"].groupby(\"time_control\")[\"games\"].count().reset_index().sort_values(\"games\", ascending = False).head(9)\ndf_daily[\"game_ratio\"] = df_daily.games * 100 \/ df_daily.games.sum()\ndf_daily[\"angle\"] = df_daily.games \/ df_daily.games.sum() * 2 * np.pi\ndf_daily[\"color\"] = Oranges7\n\ntooltips_5 = [\n    (\"Games Ratio\", \"@game_ratio{0.0}%\")\n]\n\nv5 = figure(plot_width = 330, plot_height = 250, tooltips = tooltips_5, title = \"Time Control of Daily Games\")\n\nv5.wedge(\n    x = 0,\n    y = 1,\n    radius = 0.35,\n    source = df_daily,\n    start_angle = cumsum(\"angle\", include_zero = True),\n    end_angle = cumsum(\"angle\"),\n    line_color = \"white\",\n    fill_color = \"color\",\n    legend_field = \"time_control\"\n)\n\nv5.axis.axis_label = None\nv5.axis.visible = False\nv5.grid.grid_line_color = None\n\nv5.legend.label_text_font_size = \"8pt\"\n\nshow(column(v1, row(v2, v3), row(v4, v5)))\n","fbf415f8":"df_users = pd.pivot_table(df_games, index = \"wgm_username\", columns = \"year\", values = \"games\", aggfunc = \"sum\", fill_value = 0).reset_index()\ndf_users.columns.name = None\ndf_users[\"games\"] = df_users.drop(\"wgm_username\", axis = 1).sum(axis = 1)\ndf_users = df_users.sort_values(\"games\", ascending = False).head(10).sort_values(\"games\")\n\nyears = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\ngames = {\n    \"user\": df_users.wgm_username.values,\n    \"2009\": df_users[2009].values,\n    \"2010\": df_users[2010].values,\n    \"2011\": df_users[2011].values,\n    \"2012\": df_users[2012].values,\n    \"2013\": df_users[2013].values,\n    \"2014\": df_users[2014].values,\n    \"2015\": df_users[2015].values,\n    \"2016\": df_users[2016].values,\n    \"2017\": df_users[2017].values,\n    \"2018\": df_users[2018].values,\n    \"2019\": df_users[2019].values,\n    \"2020\": df_users[2020].values\n}\n\nsource_1 = ColumnDataSource(games)\n\nv1 = figure(\n    plot_width = 660,\n    plot_height = 400,\n    x_range = (0, 1.1 * max(df_users.games.values)),\n    y_range = df_users.wgm_username.values,\n    title = \"Most Games Played in Lifetime\"\n)\n\nv1.hbar_stack(years, y = \"user\", source = source_1, color = tuple(reversed(list(Blues9) + [\"#ffffff\"] * 3)), height = 0.75,\n              legend_label = [\"Games in %s\" % x for x in years])\n\nv1.xaxis.axis_label = \"Games\"\nv1.yaxis.axis_label = \"Player\"\n\nv1.legend.location = \"bottom_right\"\n\n\ndf_users = df_games.groupby([\"year\", \"wgm_username\"])[\"games\"].sum().reset_index().sort_values(\"games\", ascending = False)\ndf_users = df_users.groupby(\"year\").head(3).sort_values([\"year\", \"games\"], ascending = [True, False])\n\nfactors = list(zip(*[df_users.year.astype(str).values, df_users.wgm_username.values]))\n\ntooltips_2 = [\n    (\"Games\", \"$y{0}\")\n]\n\nv2 = figure(\n    plot_width = 660,\n    plot_height = 450,\n    x_range = FactorRange(*factors),\n    tooltips = tooltips_2,\n    title = \"Most Games Played by Year\"\n)\n\nv2.vbar(x = factors, top = df_users.games.values, width = 0.75, alpha = 0.5)\n\nv2.xgrid.grid_line_color = None\n\nv2.xaxis.major_label_orientation = np.pi \/ 2\n\nv2.xaxis.axis_label = \"Year and Player\"\nv2.yaxis.axis_label = \"Games\"\n\n\nshow(column(v1, v2))\n","d64eb8b1":"df_white = df_games[df_games.wgm_username == df_games.white_username.str.lower()]\ndf_black = df_games[df_games.wgm_username == df_games.black_username.str.lower()]\n\ndf_white[\"wins_white\"] = (df_white.white_result == \"win\").astype(int)\ndf_black[\"wins_black\"] = (df_black.black_result == \"win\").astype(int)\n\ndf_white = df_white.groupby(\"wgm_username\")[[\"games\", \"wins_white\"]].sum().reset_index().rename(columns = {\"games\": \"games_white\"})\ndf_black = df_black.groupby(\"wgm_username\")[[\"games\", \"wins_black\"]].sum().reset_index().rename(columns = {\"games\": \"games_black\"})\n\ndf_users = df_white.merge(df_black, on = \"wgm_username\", how = \"outer\")\ndf_users.fillna(0, inplace = True)\ndf_users[\"games\"] = df_users.games_white + df_users.games_black\ndf_users[\"wins\"] = df_users.wins_white + df_users.wins_black\ndf_users[\"win_percentage\"] = df_users.wins \/ df_users.games\ndf_users[\"win_percentage_white\"] = df_users.wins_white \/ df_users.games_white\ndf_users[\"win_percentage_black\"] = df_users.wins_black \/ df_users.games_black\n\ndf_users = df_users[df_users.games >= 100].sort_values(\"win_percentage\", ascending = False).head(10).sort_values(\"win_percentage\")\n","24f55aee":"source_1 = ColumnDataSource(data = dict(\n    user = df_users.wgm_username.values,\n    games = df_users.games.values,\n    games_white = df_users.games_white.values,\n    games_black = df_users.games_black.values,\n    win_percentage = df_users.win_percentage.values * 100,\n    win_percentage_white = df_users.win_percentage_white.values * 100,\n    win_percentage_black = df_users.win_percentage_black.values * 100,\n))\n\ntooltips_11 = [\n    (\"Games with White\", \"@games_white\"),\n    (\"Win % with White\", \"@win_percentage_white{0.0}%\"),\n]\n\ntooltips_12 = [\n    (\"Games with Black\", \"@games_black\"),\n    (\"Win % with Black\", \"@win_percentage_black{0.0}%\"),\n]\n\n\nv1 = figure(\n    plot_width = 660,\n    plot_height = 450,\n    x_range = Range1d(50, 100),\n    y_range = df_users.wgm_username.values,\n    title = \"Highest Win % (At least 100 games played)\"\n)\n\nv11 = v1.hbar(y = dodge(\"user\", 0.15, range = v1.y_range),\n              right = \"win_percentage_white\", source = source_1, height = 0.2, color = \"white\", legend_label = \"Win % playing White\")\n\nv12 = v1.hbar(y = dodge(\"user\", -0.15, range = v1.y_range),\n              right = \"win_percentage_black\", source = source_1, height = 0.2, color = \"black\", legend_label = \"Win % playing Black\")\n\nv1.add_tools(HoverTool(renderers = [v11], tooltips = tooltips_11))\nv1.add_tools(HoverTool(renderers = [v12], tooltips = tooltips_12))\n\nv1.background_fill_color = \"green\"\nv1.background_fill_alpha = 0.25\n\nv1.xaxis.axis_label = \"Win %\"\nv1.yaxis.axis_label = \"Player\"\n\nv1.legend.location = \"bottom_right\"\n\nshow(v1)\n","a90f0c55":"df_current = df_games.sort_values(\"end_time\", ascending = False).drop_duplicates(\"wgm_username\")[[\"wgm_username\", \"wgm_rating\"]].rename(columns = {\"wgm_rating\": \"current_rating\"})\ndf_highest = df_games.groupby(\"wgm_username\")[\"wgm_rating\"].max().reset_index().rename(columns = {\"wgm_rating\": \"highest_rating\"})\n\ndf_users = df_current.merge(df_highest, on = \"wgm_username\")\n\ndf_users_current = df_users.sort_values(\"current_rating\", ascending = False).head(10)\ndf_users_highest = df_users.sort_values(\"highest_rating\", ascending = False).head(10)\n\nsource_1 = ColumnDataSource(df_users_current)\n\ntooltips_1 = [\n    (\"Current Rating\", \"@current_rating\")\n]\n\ntooltips_2 = [\n    (\"Highest Rating\", \"@highest_rating\")\n]\n\nv1 = figure(plot_width = 660, plot_height = 400, x_range = df_users_current.wgm_username.values, title = \"Top Current Ratings\")\n\nv11 = v1.line(\"wgm_username\", \"current_rating\", source = source_1, width = 3, color = \"green\", alpha = 0.5, legend_label = \"Current Rating\")\nv12 = v1.line(\"wgm_username\", \"highest_rating\", source = source_1, width = 3, color = \"red\", alpha = 0.5, legend_label = \"Highest Rating\")\n\nv1.add_tools(HoverTool(renderers = [v11], tooltips = tooltips_1))\nv1.add_tools(HoverTool(renderers = [v12], tooltips = tooltips_2))\n\nv1.xaxis.major_label_orientation = np.pi \/ 4\n\nv1.xaxis.axis_label = \"Player\"\nv1.yaxis.axis_label = \"Rating\"\n\nv1.legend.location = \"bottom_left\"\n\n\nsource_2 = ColumnDataSource(df_users_highest)\n\nv2 = figure(plot_width = 660, plot_height = 400, x_range = df_users_highest.wgm_username.values, title = \"Top Highest Ratings\")\n\nv21 = v2.line(\"wgm_username\", \"current_rating\", source = source_2, width = 3, color = \"green\", alpha = 0.5, legend_label = \"Current Rating\")\nv22 = v2.line(\"wgm_username\", \"highest_rating\", source = source_2, width = 3, color = \"red\", alpha = 0.5, legend_label = \"Highest Rating\")\n\nv2.add_tools(HoverTool(renderers = [v21], tooltips = tooltips_1))\nv2.add_tools(HoverTool(renderers = [v22], tooltips = tooltips_2))\n\nv2.xaxis.major_label_orientation = np.pi \/ 4\n\nv2.xaxis.axis_label = \"Player\"\nv2.yaxis.axis_label = \"Rating\"\n\nv2.legend.location = \"bottom_left\"\n\n\nshow(column(v1, v2))\n","95f1afdc":"df_fide_2019 = pd.read_csv(f\"{PATH_FIDE_RATINGS}\/ratings_2019.csv\")\ndf_fide_2020 = pd.read_csv(f\"{PATH_FIDE_RATINGS}\/ratings_2020.csv\")\n\ndf_fide = pd.concat([df_fide_2019, df_fide_2020], ignore_index = True)\n\ndf_ratings = df_fide[df_fide.fide_id == 13604040]\ndf_ratings[\"date\"] = pd.to_datetime(df_ratings.year.astype(str) + \"-\" + df_ratings.month.astype(str) + \"-15\")\n\ndf_online_ratings = df_games[df_games.wgm_username == \"meri-arabidze\"].groupby(\"date\")[\"wgm_rating\"].mean().reset_index()\ndf_online_ratings.date = pd.to_datetime(df_online_ratings.date)\n\ndf_ratings = df_ratings.merge(df_online_ratings, on = \"date\", how = \"outer\").sort_values(\"date\").reset_index(drop = True)\ndf_ratings.fillna(method = \"ffill\", inplace = True)\n","59b70326":"source = ColumnDataSource(data = dict(\n    date = np.array(df_ratings.date.values, dtype = np.datetime64),\n    classical_rating = df_ratings.rating_standard.values,\n    rapid_rating = df_ratings.rating_rapid.values,\n    blitz_rating = df_ratings.rating_blitz.values,\n    online_rating = df_ratings.wgm_rating.values\n))\n\ntooltips = [\n    (\"Date\", \"@date{%F}\"),\n    (\"Classical Rating\", \"@classical_rating{0}\"),\n    (\"Rapid Rating\", \"@rapid_rating{0}\"),\n    (\"Blitz Rating\", \"@blitz_rating{0}\"),\n    (\"Online Rating\", \"@online_rating{0}\"),\n]\n\nformatters = {\n    \"@date\": \"datetime\"\n}\n\nv = figure(plot_width = 660, plot_height = 400, x_axis_type = \"datetime\", tooltips = tooltips, title = \"FIDE Ratings vs Online Rating (Meri Arabidze)\")\n\nv.line(\"date\", \"classical_rating\", source = source, width = 3, color = \"yellow\", alpha = 0.5, legend_label = \"FIDE Classical Rating\")\nv.line(\"date\", \"rapid_rating\", source = source, width = 3, color = \"orange\", alpha = 0.5, legend_label = \"FIDE Rapid Rating\")\nv.line(\"date\", \"blitz_rating\", source = source, width = 3, color = \"red\", alpha = 0.5, legend_label = \"FIDE Blitz Rating\")\nv.line(\"date\", \"online_rating\", source = source, width = 3, color = \"green\", alpha = 0.5, legend_label = \"Online Chess Rating\")\n\nv.add_tools(HoverTool(tooltips = tooltips, formatters = formatters))\n\nv.xaxis.axis_label = \"Date\"\nv.yaxis.axis_label = \"Rating\"\n\nv.legend.location = \"top_left\"\n\nshow(v)\n","0b6c891e":"!pip install python-chess==0.31.1","79a06696":"import chess.pgn\nimport io\n\n## reading first game\ngame = chess.pgn.read_game(io.StringIO(df_games.pgn[0]))\nprint(game)\n\n## setting up chess board\nboard = game.board()\nboard","9e498024":"## visualize first move\nboard = game.board()\nfor i, move in enumerate(game.mainline_moves()):\n    if i == 0:\n        board.push(move)\n    else:\n        break\n\nboard","df33ff9e":"## visualize nth move (n = 13)\nn = 13\nboard = game.board()\nfor i, move in enumerate(game.mainline_moves()):\n    if i <= n:\n        board.push(move)\n    else:\n        break\n\nboard","7a8b4844":"## visualize end position\nboard = game.board()\nfor i, move in enumerate(game.mainline_moves()):\n    board.push(move)\n\nboard","782883fa":"def get_first_move(pgn):\n    \"\"\"\n    Returns the first move of game.\n    \"\"\"\n    game = chess.pgn.read_game(io.StringIO(pgn))\n    first_move = \"\"\n\n    for i, move in enumerate(game.mainline_moves()):\n        if i == 0:\n            first_move = str(move)\n        else:\n            break\n\n    return first_move\n\ndf_games[\"first_move\"] = df_games.pgn.apply(lambda x: get_first_move(x))\n\ndf_moves = df_games.groupby(\"first_move\")[\"games\"].count().reset_index()\ndf_moves[\"games_percentage\"] = round(df_moves.games * 100 \/ df_moves.games.sum(), 2)\ndf_moves.sort_values(\"games\", ascending = False).head(4)\n","a477191b":"df_users = df_games[df_games.wgm_result == \"win\"].groupby(\"wgm_username\")[[\"games\", \"checkmated\"]].sum().reset_index()\ndf_users[\"checkmate_rate\"] = df_users.checkmated \/ df_users.games\ndf_users = df_users[df_users.games >= 100].sort_values(\"checkmate_rate\", ascending = False).head(10)\n\nsource_1 = ColumnDataSource(data = dict(\n    user = df_users.wgm_username.values,\n    games_won = df_users.games.values,\n    games_checkmated = df_users.checkmated.values,\n    checkmate_percentage = df_users.checkmate_rate * 100\n))\n\ntooltips_1 = [\n    (\"Total Games Won\", \"@games_won\")\n]\n\ntooltips_2 = [\n    (\"Games Won by Checkmate\", \"@games_checkmated\")\n]\n\ntooltips_3 = [\n    (\"Checkmate Percentage\", \"@checkmate_percentage{0.00}%\")\n]\n\nv1 = figure(\n    plot_width = 650,\n    plot_height = 400,\n    x_range = df_users.wgm_username.values,\n    y_range = Range1d(0, 1.1 * max(df_users.games.values)),\n    title = \"Highest Checkmating Percentage (At least 100 games won)\"\n)\n\nv1.extra_y_ranges = {\"Checkmate Percentage\": Range1d(start = 20, end = 40)}\n\nv11 = v1.vbar(x = dodge(\"user\", 0.15, range = v1.x_range), top = \"games_won\", width = 0.2, source = source_1, color = \"blue\", legend_label = \"Games Won\")\nv12 = v1.vbar(x = dodge(\"user\", -0.15, range = v1.x_range), top = \"games_checkmated\", width = 0.2, source = source_1, color = \"orange\", legend_label = \"Games Checkmated\")\nv13 = v1.line(\"user\", \"checkmate_percentage\", source = source_1, width = 3, color = \"red\", y_range_name = \"Checkmate Percentage\", legend_label = \"Checkmate Percentage\")\n\nv1.add_tools(HoverTool(renderers = [v11], tooltips = tooltips_1))\nv1.add_tools(HoverTool(renderers = [v12], tooltips = tooltips_2))\nv1.add_tools(HoverTool(renderers = [v13], tooltips = tooltips_3))\n\nv1.xaxis.major_label_orientation = np.pi \/ 4\n\nv1.xaxis.axis_label = \"Player\"\nv1.yaxis.axis_label = \"Games\"\nv1.add_layout(LinearAxis(y_range_name = \"Checkmate Percentage\", axis_label = \"Checkmate Percentage\"), \"right\")\n\nv1.legend.location = \"top_center\"\n\nshow(v1)\n","9ceb8c17":"## 7. Popular Openings\nThe first (and first few) moves of a chess game define the 'opening'. There are various names been given to such openings based on legends of the game who popularized them. Let's look at the top opening moves played by these WGMs.\n\nThere is a very nice packages in Python for Chess: https:\/\/pypi.org\/project\/python-chess\/   \nWe will use that to read the PGN games and visualize the board positions.\n","8ae39752":"Its easier to get a higher rating in online chess. It is natural considering you can play more and also choose your opponents optimally.","173d13d0":"## 6. Highest Ratings\nChess follows the [Elo Rating System](https:\/\/en.wikipedia.org\/wiki\/Elo_rating_system). The highest rating a woman chess player has ever achieved is an incredible **2735** by the great [Judit Polg\u00e1r](https:\/\/en.wikipedia.org\/wiki\/Judit_Polg%C3%A1r) (in the photo below) from Hungary, who is widely considered as the best female chess player of all time.\n\n![](https:\/\/i.imgur.com\/V1UGhI9.jpg)\n\nLet's check whether any player has reached or crossed that rating in online chess and if there is any correlation with their official FIDE rating.\n","784b57bf":"## 5. Most Successful Players\nLet's get to the game results. It would be interesting to see if there is a correlation between online chess performance compared to offline chess ratings.\n","5791b60b":"There are over **270K** games of WGM from September-2009 to September-2020.\n\n## 2. Games\nThe internet is open 24x7. It makes the world come together and enables online chess to become a bridge between two players sitting on opposite sides of the globe to play and enjoy a game together. Friend or not.\n\nLet's look at the number of games being played across the years and if there is any trend between months or days of the week. Looking at hours of the day won't be right since the timezone is fixed (most likely the server timezone) and a game could be played between players from two different timezones.\n","9d95c5e0":"Online chess is growing barring a slight slump in 2018. No doubt. The spike in 2020 is the result of COVID-19. While the world of sports awaits the passing of this phase, chess is blooming through technology.\n\nPlayers are playing online chess round the clock, any day in the week and throughout the year. This year already over a **170 WGMs** have played at least one game of online chess and this number is only going to increase.\n","74e4ca2d":"### \"Every chess game has queens, but these chess players are the real queens of the game!\"\n","57b86798":"![](https:\/\/i.imgur.com\/1fCu7xl.png)\n\nThese are the top-4 opening moves played by WGMs. Nothing surprising here since these are the most popular openings worldwide. The big two, d4 and e4 together cover **82%** of game openings.\n","d46564e2":"![](https:\/\/images.chesscomfiles.com\/uploads\/v1\/user\/2717746.5a711fd9.1200x1200o.a4013b32b416.jpeg)\n\n[Camilla Baginskaite](https:\/\/en.wikipedia.org\/wiki\/Camilla_Baginskaite) (in the photo above), a Lithuanian and American WGM, is the most active player ***(camillab)*** with **over 60K games** played in the last 12 years! That is more than twice of the next best. She played the most number of games in each of the years 2011-2016.\n\n[kungmongmanh](https:\/\/www.chess.com\/member\/kungmongmanh), a WGM from Vietnam, has played the second most number of games and the most in years 2017, 2019 and currently leads in 2020.\n\nMany of the Top-10 active players have majorty of their games played since **2015-2016**. This is a great era to be playing chess with so many active players and games.\n","4d760ee8":"## 4. Most Active Players\nHow many games do you think WGMs play online in a year? Could this be the secret to their success?   \nLet's look at some of the top players who are most active over the lifetime as well as in each year.\n","adb866fd":"## Chess\n![](https:\/\/cdn.pixabay.com\/photo\/2017\/09\/08\/20\/29\/chess-2730034_1280.jpg)\n\n[Chess](https:\/\/en.wikipedia.org\/wiki\/Chess) is one of the most popular indoor games in the world. It's history goes back a few centuries and it is amazing to see the activity, level and growth of the sport even in these times. We are lucky to be in this special era where we can see the power of marrying technology with sports like chess that have a siginificant element of algorithms, structure and strategy in it.\n\nThe internet and the nature of the game enables it to be easily playable online. Having a fixed set of rules but endless possibilities of moves and games, it is one of the most researched games with a lot of data available.\n\nChess.com https:\/\/www.chess.com\/ as the name suggests is an extremely popular website where users can play chess online. They have graciously exposed the data of these games for public use. While the entire database is huge, **all games played by Woman Grandmasters (WGM) is available as a Kaggle Dataset:** https:\/\/www.kaggle.com\/rohanrao\/chess-games-of-woman-grandmasters\n\nNote that a woman can be a WGM as well as GM! But men cannot boast of having both these titles :-)   \nYou can read more about these titles here: https:\/\/en.wikipedia.org\/wiki\/FIDE_titles\n\nThe official FIDE ratings of chess players are also available on Kaggle: https:\/\/www.kaggle.com\/rohanrao\/chess-fide-ratings\n","7f861201":"![](https:\/\/en.chessbase.com\/portals\/4\/files\/news\/2007\/mescheriakova01.jpg)\n\n[Evgenia Meshcheriakova](https:\/\/www.chess.com\/member\/evgeniamescheriakova) (in the photo above), a Russian WGM, has the best checkmate rate of **34.96%** which is a little over one checkmate win in every three games won. She is followed by ***rainbow2014*** at **30.40%**, ***ole83*** at **30.30%** and **alexa797** at **30.29%**, the three other players above 30%. It's incredible to see all the top-10 WGMs have a checkmate rate of over 25%.\n","3cc01efe":"![](https:\/\/i.imgur.com\/3t0NQpH.jpg)\n\n[Meri Arabidze](https:\/\/en.wikipedia.org\/wiki\/Meri_Arabidze) (in the photo above), has achieved the highest rating by a WGM of **2763** on chess.com\n\nJovana Rapport (sylvanaswindrunner) is currently rated **2712**, which is her highest ever and might go on to finally breaking the 2763 mark.\n\nOf course achieving these high ratings in offline chess is much harder than online chess. Looking at the men's rating, no one has ever crossed 2900 in offline but many players have breached the 3000-mark in online chess.\n","c469ac9c":"**Bullet (57.2%)** and **Blitz (40.6%)** are the most popular game formats which is not surprising since they are the quickest times.\n\nWithin Bullet, the **60-second** time control is the clear favourite with **95.2%**   \nWithin Blitz, the **3-minute** time control is the clear favourite with **76.2%**","f983d191":"## 8. Checkmate!\nThe most beautiful word in chess: **Checkmate!**   \nA player is considered in [checkmate](https:\/\/en.wikipedia.org\/wiki\/Checkmate) when the player's king is in check (or attacked) and there is no available place for the king to go and no way to stop the check.\n\n![](https:\/\/i.imgur.com\/GwIDakJ.jpg)\n\nThe ecstatic feeling you get when checkmating someone to win the game is like an epitome of happiness in chess. But its not always possible to win by checkmating. Sometimes the opponent just resigns at a (generally losing) position or might lose on time (when the player's clock goes to 0) or in the case of online chess might just abandon the game and not finish it. So lets look at the WGMs who have the highest checkmating rate in their games.\n","ab8fd7d7":"## 3. Time Control\n![](https:\/\/i.imgur.com\/CRvx9fg.png)\n\nChess matches are generally time bound. There are various time controls to play chess. These are primarily divided into three formats:\n\n* **Bullet:** Each player gets upto 2 minutes\n* **Blitz:** Each player gets at least 2 minutes and up to 10 minutes\n* **Rapid:** Each player gets at least 10 minutes and up to 60 minutes\n* **Classical:** Each player gets 90 minutes\n\nThere can be slight variations of these times but the order of Bullet < Blitz < Rapid < Classical remains consistent. Classical chess games are usually 90 minutes per player and isn't popular in the online chess world for being too long. Instead there is an alternative called **Daily** where the players are required to play at least one move every 'x' days where x can be chosen while beginning the game.\n\nA time control of the 'x+y' or 'x|y' format indicates a starting clock time of 'x' seconds and an increment of 'y' seconds after each move. So a time control of 180+2 indicates each players gets 3-minutes (180-seconds) on the clock and an increment of 2 seconds is added after each moved is played by the player.\n","23d28b7f":"![](https:\/\/i.imgur.com\/AUs0ipd.jpg)\n\n[Sheila Jackson](https:\/\/en.wikipedia.org\/wiki\/Sheila_Jackson_(chess_player)) (in the photo above), an English WGM, is the most successful player ***(liverpoolborn)*** with a incredible winning % of **86.0%**. She has won **89.3%** of her games playing white and **82.8%** of her games playing black.\n\nShe only recently (April-2020) started playing on chess.com so it will be interesting to see if she can keep up the high win rate.\n\nAnd we see most of the top players have a higher winning % with white. The only exceptions in top 10 are **katerina68**, **dianadarchia** and **betulcemreyildiz**. This is natural since the player with white pieces gets to play the first move in chess.\n","1e7c493a":"## 1. Dataset\nLet's look at the WGM games data which has over 0.2M rows. Every row represents a game played by a WGM. Since it's a two-player game, the WGM is one player and the opponent may or may not be a WGM.   \nThe entire set of moves of the game are available in [PGN](https:\/\/en.wikipedia.org\/wiki\/Portable_Game_Notation) format in the *pgn* column.\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/b\/b6\/SCD_algebraic_notation.svg\/242px-SCD_algebraic_notation.svg.png)"}}