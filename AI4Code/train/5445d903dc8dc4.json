{"cell_type":{"27dc2590":"code","20833e14":"code","74c7eb6e":"code","5a87c2fe":"code","194d3af2":"code","96eb53fe":"code","9a41159c":"code","8ef97b9e":"code","525bb2a5":"code","83ad70c2":"code","f297c7f6":"code","057c4bef":"code","244e419e":"code","02d1cc6e":"code","aa2e1068":"code","544c1938":"code","7930bb06":"code","8f1f0289":"code","64407ea6":"code","80d8f3f9":"code","4782be95":"code","2661d09f":"code","ee6f6fd5":"code","5a4bdfb7":"code","5a842839":"code","8ae9a193":"code","f8135b2e":"code","52bf6767":"code","58c23823":"code","2483b82c":"code","21a348a6":"code","b321cdaa":"code","977a1cdd":"code","980820e1":"code","80aff0fd":"code","70db5238":"code","ce2a43c7":"code","b9a364fc":"code","56ab7ee2":"code","acd5f289":"code","0cb7e126":"code","b9a16f67":"code","933b38ae":"code","f0330471":"code","3dd99ff5":"code","a20d4ad3":"code","d3f345f3":"code","5ee49e1f":"code","7fdd6417":"code","b376a435":"code","04053616":"code","d16e1f32":"code","e549dd8d":"markdown"},"source":{"27dc2590":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor,DecisionTreeClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntrain = pd.read_csv('titanic\/train.csv')\ntest = pd.read_csv('titanic\/test.csv')","20833e14":"# train.shape\ntrain.head()\n# Means 891 rows and 12 columns.","74c7eb6e":"# train.columns\ntrain.set_index(['PassengerId'], inplace=True)","5a87c2fe":"test.set_index(['PassengerId'], inplace=True)","194d3af2":"#To check which values are null and how many\ntrain.isnull().sum()","96eb53fe":"test.isnull().sum()","9a41159c":"# View issing values matrix\nimport missingno as msno\n\nmsno.matrix(train)","8ef97b9e":"# Fill missing ages using Median value\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan , strategy = 'mean')\nage2 = imputer.fit_transform(train.Age.values.reshape(-1,1))\ntrain['Age2']=age2\n\nage_test = imputer.fit_transform(test.Age.values.reshape(-1,1))\ntest['Age_test'] = age_test","525bb2a5":"train.head()","83ad70c2":"test.head()","f297c7f6":"train.isnull().sum()","057c4bef":"# Count Embarkes values\ntrain.Embarked.value_counts()","244e419e":"# Fill missing values in Embarked column with most frequent value (\"S\")\ntrain.Embarked.fillna('S', inplace=True)","02d1cc6e":"# Fill missing values of Fare column with mean of that column\ntest.Fare.fillna(test.Fare.mean(), inplace=True)","aa2e1068":"test.isnull().sum()\ntrain.isnull().sum()","544c1938":"# Drop Age and Cabin rows.\n# Age column is not wanted any more because, we have created Age2 column with filling missed values\n# In cabin column, nearly 80% values are missing. So we have to drop that column. \ntrain.drop(['Age','Cabin'],axis=1, inplace=True)\ntest.drop(['Age','Cabin'], axis=1, inplace=True)","7930bb06":"train.isnull().sum()\ntest.isnull().sum()","8f1f0289":"# Transform sex column (male & female) in to 1 & 0\ntrain['Sex'] = train.Sex.apply(lambda x: 0 if x == \"female\" else 1)","64407ea6":"train.Sex","80d8f3f9":"train.head()","4782be95":"sns.boxplot(x='Survived', y='Fare', data=train)","2661d09f":"train['Fare'] = train[train['Fare']<=400]","ee6f6fd5":"train.columns","5a4bdfb7":"sns.boxplot(x='Survived', y='Fare', data=train)","5a842839":"train.describe()","8ae9a193":"train.groupby('Survived').mean()","f8135b2e":"train.groupby('Sex').mean()","52bf6767":"#Correlation matrix of features\ntrain.corr()","58c23823":"plt.subplots(figsize=(15,8))\n\nsns.heatmap(train.corr(), annot=True, cmap='PuBu')\n","2483b82c":"sns.barplot(x='Sex', y='Survived', data=train)","21a348a6":"sns.barplot(x='Pclass', y='Survived', data=train)","b321cdaa":"sns.kdeplot(train.loc[(train['Survived']==0), 'Age2'], color='b', shade=True, label='Not Survived')\nsns.kdeplot(train.loc[(train['Survived']==1), 'Age2'], color='g', shade=True, label='Survived')","977a1cdd":"# Create a new feature named as \"Family_Size\" by clculating sum of no.of siblings and no.of parents\ntrain['Family_Size'] = train['SibSp'] + train['Parch'] + 1\ntrain.head()","980820e1":"# Creating a new feature named as \"family_group\" according to the no.of members in the family. \ndef familyGroup(size):\n    a = ''\n    if(size<=1):\n        a='alone'\n    elif (size<=4):\n        a='small'\n    else:\n        a='large'\n    return a\n\ntrain['family_group'] = train.Family_Size.map(familyGroup)\ntrain.head()","80aff0fd":"# Creating a new feature as \"age_group\" by categorizing ages into groups. (infant,toddler,child,teenager,young_adult ,middle_age, old)\ndef age_group(age):\n    a = ''\n    if (age<=1):\n        a = 'infant'\n    elif (age<=4):\n        a = 'toddler'\n    elif (age<=14):\n        a = 'child'\n    elif (age<=15):\n        a='teenager'\n    elif (age <= 25):\n        a = 'young_adult'\n    elif (age <= 65):\n        a = 'middle_age'\n    else :\n        a = 'old'\n    \n    return a\n\ntrain['age_group'] = train.Age2.map(age_group)\ntrain.head()","70db5238":"# Create a new feature as 'fare_per_person' \ntrain['fare_per_person'] = train['Fare']\/train['Family_Size']\ntrain.head()","ce2a43c7":"# Create dummy values for beow columns. \ntrain = pd.get_dummies(train, columns=['Embarked', 'family_group', 'age_group' ], drop_first=True)","b9a364fc":"# Drop Name, Ticket, Fare\ntrain.drop(['Name', 'Ticket', 'Fare'])","56ab7ee2":"train.Survived.value_counts()\/len(train)*100\n#This signifies almost 61% people in the ship died and 38% survived.","acd5f289":"train.describe()","0cb7e126":"plt.subplots(figsize = (15,8))\nsns.heatmap(train.corr(), annot=True,cmap=\"BuPu\")\nplt.title(\"Correlations Among Features\", fontsize = 20);","b9a16f67":"plt.subplots(figsize = (15,8))\nsns.barplot(x = \"Sex_male\", y = \"Survived\", data=train, edgecolor=(0,0,0), linewidth=2)\nplt.title(\"Survived\/Non-Survived Passenger Gender Distribution\", fontsize = 25)\nlabels = ['Female', 'Male']\nplt.ylabel(\"% of passenger survived\", fontsize = 15)\nplt.xlabel(\"Gender\",fontsize = 15)\nplt.xticks(sorted(train.Sex_male.unique()), labels)\n\n# 1 is for male and 0 is for female.","933b38ae":"plt.subplots(figsize = (10,10))\nax=sns.countplot(x='Pclass',hue='Survived',data=train)\nplt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 25)\nleg=ax.get_legend()\nleg.set_title('Survival')\nlegs=leg.texts\n\nlegs[0].set_text('No')\nlegs[1].set_text(\"yes\")","f0330471":"plt.subplots(figsize=(15,10))\n\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Fare'],color='r',shade=True,label='Not Survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Fare'],color='b',shade=True,label='Survived' )\nplt.title('Fare Distribution Survived vs Non Survived',fontsize=25)\nplt.ylabel('Frequency of Passenger Survived',fontsize=20)\nplt.xlabel('Fare',fontsize=20)","3dd99ff5":"#fig,axs=plt.subplots(nrows=2)\nfig,axs=plt.subplots(figsize=(10,8))\nsns.set_style(style='darkgrid')\nsns.kdeplot(train.loc[(train['Survived']==0),'Age2'],color='r',shade=True,label='Not Survived')\nsns.kdeplot(train.loc[(train['Survived']==1),'Age2'],color='b',shade=True,label='Survived')\n","a20d4ad3":"X=train.drop('Survived',axis=1)\ny=train['Survived'].astype(int)\n","d3f345f3":"train.head()","5ee49e1f":"#RandomForestClassifier model.\nfrom sklearn.ensemble import RandomForestClassifier\n\nclassifier=RandomForestClassifier(n_estimators=100, max_features=3)\nxtrain=train.iloc[:,1:]\nytrain=train.iloc[:,:1]\nytrain=ytrain.values.ravel()\nclassifier.fit(xtrain,ytrain)\n#we need to convert the test data ","7fdd6417":"testIm=SimpleImputer(missing_values=np.nan ,strategy='most_frequent')\nAge1=testIm.fit_transform(test.Age.values.reshape(-1,1))\nFare2=testIm.fit_transform(test.Fare.values.reshape(-1,1))\ntest.drop(['Name','Cabin','Age','Ticket','Fare'],axis=1,inplace=True)\ntest['Age1']=Age1\ntest['Fare2']=Fare2\ntest.set_index('PassengerId',inplace=True)","b376a435":"## get dummy variables for Column sex and embarked since they are categorical value.\ntest = pd.get_dummies(test, columns=[\"Sex\"], drop_first=True)\ntest = pd.get_dummies(test, columns=[\"Embarked\"],drop_first=True)\n\n\n#Mapping the data.\ntest['Fare2'] = test['Fare2'].astype(int)\ntest.loc[test.Fare2<=7.91,'Fare2']=0\ntest.loc[(test.Fare2>7.91) &(test.Fare2<=14.454),'Fare2']=1\ntest.loc[(test.Fare2>14.454)&(test.Fare2<=31),'Fare2']=2\ntest.loc[(test.Fare2>31),'Fare2']=3\n\ntest['Age1']=test['Age1'].astype(int)\ntest.loc[ test['Age1'] <= 16, 'Age1']= 0\ntest.loc[(test['Age1'] > 16) & (test['Age1'] <= 32), 'Age1'] = 1\ntest.loc[(test['Age1'] > 32) & (test['Age1'] <= 48), 'Age1'] = 2\ntest.loc[(test['Age1'] > 48) & (test['Age1'] <= 64), 'Age1'] = 3\ntest.loc[test['Age1'] > 64, 'Age1'] = 4","04053616":"Result=classifier.predict(test)\nprint(Result)\nprint(len(Result))\n","d16e1f32":"passengersId = test.index\n\nop = pd.DataFrame(pd.DataFrame({\n    \"PassengerId\" : passengersId,\n    \"Survived\" : Result\n}))\n\n# test.index.name","e549dd8d":"### Importing the data"}}