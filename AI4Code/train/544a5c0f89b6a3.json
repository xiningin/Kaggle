{"cell_type":{"387768a2":"code","9eea4839":"code","c2304860":"code","80b6a9f6":"code","6369343d":"code","6e558445":"code","d821e121":"code","e73f2841":"code","2b6cb7fc":"code","ee68b820":"code","28e749a9":"code","5b3ec126":"code","52dfa8fc":"code","291e8ce4":"code","b952f684":"code","4f6f92d5":"code","d2f30d0d":"code","79d4a2bd":"code","29129f98":"code","d9f7a6f5":"code","879c7c9f":"code","7743103f":"code","4cddee37":"code","2753f24a":"code","a08bec8f":"code","9710cccc":"code","82fb185e":"code","240177aa":"code","2888e322":"code","9c32cd8f":"code","6e89c1b7":"code","92f2b1d0":"code","7f0c0731":"code","9957be2b":"code","6da1de9e":"code","8a2e4acd":"markdown","7de9968b":"markdown"},"source":{"387768a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9eea4839":"df = pd.read_csv('\/kaggle\/input\/sandp500\/all_stocks_5yr.csv')\ndf.head()","c2304860":"df.describe()","80b6a9f6":"df.info()","6369343d":"df.Name.nunique()","6e558445":"df.Name.unique()","d821e121":"AAL = df[df['Name']==\"AAL\"]","e73f2841":"AAL.head()","2b6cb7fc":"plt.figure(figsize=(12,6))\nplt.plot(AAL['date'],AAL['open'],color='red')\nplt.plot(AAL['date'],AAL['close'], color=\"blue\")","ee68b820":"from fbprophet import Prophet\n","28e749a9":"model = Prophet()","5b3ec126":"\nAAL_data = AAL[[\"date\",\"close\"]]\nAAL_prophet = AAL_data.rename(columns={\"date\":\"ds\",\"close\":\"y\"})","52dfa8fc":"AAL_prophet","291e8ce4":"model.fit(AAL_prophet)","b952f684":"future = model.make_future_dataframe(periods=365,freq=\"D\")\nforecast = model.predict(future)","4f6f92d5":"fig = model.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)","d2f30d0d":" model.plot_components(forecast)","79d4a2bd":"plt.plot(forecast['ds'],forecast['yhat'],color=\"red\")\n# plt.plot(AAL['date'],AAL['close'], color=\"blue\")\n","29129f98":"ALL_arima = AAL_data.set_index(AAL_data['date']).drop([\"date\"],axis=1)","d9f7a6f5":"plt.xlabel(\"Date\")\nplt.ylabel(\"close AAL\")\nplt.plot(ALL_arima)\n# ALL_arima","879c7c9f":"roll_mean = ALL_arima.rolling(window=12).mean()\nroll_std = ALL_arima.rolling(window=12).std()","7743103f":"plt.figure(figsize=(16,6))\nplt.plot(roll_mean,color='red',label=\"Rolling Mean\")\nplt.plot(roll_std,color='blue',label=\"Rolling STD\")\nplt.plot(ALL_arima,color='green',label=\"original\")","4cddee37":"from statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA","2753f24a":"print('Results of Dickey Fuller Test:')\ndftest = adfuller(ALL_arima['close'], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)\n","a08bec8f":"ALL_arima_logScale = np.log(ALL_arima)\nplt.plot(ALL_arima_logScale)","9710cccc":"movingAverage = ALL_arima_logScale.rolling(window=12).mean()\nmovingSTD = ALL_arima_logScale.rolling(window=12).std()\nplt.plot(ALL_arima_logScale)\nplt.plot(movingAverage, color='red')","82fb185e":"dataLogScaleMinusMovingAverage = ALL_arima_logScale - movingAverage\ndataLogScaleMinusMovingAverage.head(12)\ndataLogScaleMinusMovingAverage.dropna(inplace=True)\ndataLogScaleMinusMovingAverage.head(10)","240177aa":"def test_stationarity(timeseries):\n    \n    #Determine rolling statistics\n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    #Plot rolling statistics\n    orig = plt.plot(timeseries, color='blue', label='Original')\n    mean = plt.plot(movingAverage, color='red', label='Rolling Mean')\n    std = plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey\u2013Fuller test:\n    print('Results of Dickey Fuller Test:')\n    dftest = adfuller(timeseries['close'], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","2888e322":"test_stationarity(dataLogScaleMinusMovingAverage)","9c32cd8f":"model = ARIMA(ALL_arima_logScale, order=(2,1,2))\nresults_ARIMA = model.fit(disp=0)\nplt.plot(dataLogScaleMinusMovingAverage)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues - dataLogScaleMinusMovingAverage['close'])**2))\nprint('Plotting ARIMA model')","6e89c1b7":"ALL_arima_logScale","92f2b1d0":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\nprint(predictions_ARIMA_diff.head())","7f0c0731":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum)","9957be2b":"predictions_ARIMA_log = pd.Series(ALL_arima_logScale['close'].iloc[0], index=ALL_arima_logScale.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA_log.head()","6da1de9e":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(ALL_arima)\nplt.plot(predictions_ARIMA)","8a2e4acd":"I try with arima","7de9968b":"we start analyze the data from AAL"}}