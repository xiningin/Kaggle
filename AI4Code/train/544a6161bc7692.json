{"cell_type":{"3be1a2af":"code","8a4d819d":"code","323d3b97":"code","9163bec9":"code","24eccd53":"code","b496b3a5":"code","d3e08c9b":"code","8a2d0de1":"code","720dd740":"code","74d94a2b":"code","08c712f1":"code","3a2cfdb7":"code","d9f56afb":"code","eb014a7f":"code","92fd1e07":"code","2d341438":"code","1cdf5dcd":"code","7b95d3d8":"code","ba86785e":"code","82f447f3":"code","9598db61":"code","13f53fde":"code","3971e156":"code","28522e41":"code","3d06ea0f":"code","9e807a48":"code","1dc836b9":"code","324d5b65":"code","dbb420d1":"code","cae34117":"code","d13fb835":"code","b688654b":"code","6e8ed06e":"code","bd562f60":"code","27ed4180":"code","8a91913f":"code","a1e686de":"code","6a626ccd":"code","af3ccb51":"code","5142d3f8":"markdown","9fe3eb6a":"markdown","087023ff":"markdown","00add9de":"markdown","e10b3638":"markdown","42fd6b19":"markdown","cb10dfa5":"markdown","edf2a46f":"markdown","db1f42f3":"markdown","57628ec0":"markdown","9cd28e11":"markdown","ce53b841":"markdown","c1361356":"markdown","dc538626":"markdown","d7dee6e2":"markdown","4f4f58a6":"markdown","3d7644b0":"markdown","2f21cf9e":"markdown","8a4923eb":"markdown","2f6ad1cf":"markdown","750d0c27":"markdown","0b113b87":"markdown"},"source":{"3be1a2af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a4d819d":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom collections import Counter\nimport matplotlib as mpl\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier \n%matplotlib inline","323d3b97":"#load our data\ndf=pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf.head()","9163bec9":"#let's take alook about some information as type and non values\ndf.info()","24eccd53":"df.columns","b496b3a5":"#adding reading,writing,math to total_score\ndf['total_score']=df['math score']+df['reading score']+df['writing score']","d3e08c9b":"df.head()","8a2d0de1":"#shape of df\ndf.shape","720dd740":"plt.figure(figsize=[15,5])\nplt.subplot(1,2,1)\nplt.pie(df['gender'].value_counts(),labels=df['gender'].value_counts().index,explode=[.1,.1],autopct='%1.1f%%',shadow=True);\nplt.title('percentage of males and females')\nplt.subplot(1,2,2)\n#base_color = sb.color_palette()[5]\nsb.countplot(data=df,x='gender' )\nplt.title('Number of males and females')","74d94a2b":"#Distribution of our numerical features with each other\nsb.pairplot(df, hue=\"gender\")","08c712f1":"#Numbers of each gender in each race\nsb.set(style='darkgrid')\nplt.figure(figsize=[10,5])\nax=sb.countplot(data=df,x='gender',hue='race\/ethnicity')\nplt.title('Numbers of each gender in each race');","3a2cfdb7":"#Distribution of total score for each gender in each group\nplt.figure(figsize=[10,10]);\nsb.set_theme(style=\"darkgrid\")\nsb.displot(df, x=\"total_score\", col=\"race\/ethnicity\", row=\"gender\",\n             binwidth=3, height=3, facet_kws=dict(margin_titles=True),);\n ","d9f56afb":"f, ax = plt.subplots(figsize=(10, 5))\nsb.despine(f)\n\nsb.histplot(\n    df,\n    x=\"math score\", hue=\"gender\",\n    multiple=\"stack\",\n    palette=\"light:m_r\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=False,)\nplt.title('Number of each gender in math score')\nax.xaxis.set_major_formatter(mpl.ticker.ScalarFormatter());\nax.set_xticks([0,10,20,30,40,50,60,70,80,90,100,110]);","eb014a7f":"sb.set(style='darkgrid')\nplt.figure(figsize=[10,5])\nax=sb.countplot(data=df,x='parental level of education',hue='gender')\nplt.xticks(rotation=45)\nplt.title('Numbers of each gender in each level education');","92fd1e07":"#Number in each race which has test preparation course\nplt.figure(figsize=[10,7])\ncounts = df.groupby(['race\/ethnicity', 'test preparation course']).size()\ncounts = counts.reset_index(name='count')\n# Use DataFrame.pivot() to rearrange the data, to have race class on rows\ncounts =counts.pivot(index = 'race\/ethnicity', columns = 'test preparation course' ,values = 'count')\n#drow hwat map \nsb.heatmap(counts,annot = True, fmt = 'd');\n#get the title\nplt.title('Number in each race which has test preparation course');","2d341438":"#math score statistics for each gender\nbase_color = sb.color_palette()[4]\nsb.violinplot(data=df, x='gender', y='math score', color=base_color, innner=None)\nplt.xticks(rotation=15);\n","1cdf5dcd":"base_color = sb.color_palette()[4]\nsb.boxplot(data=df, x='gender', y='writing score', color=base_color )\nplt.xticks(rotation=15);","7b95d3d8":"# Draw a categorical scatterplot to show each observation\nplt.figure(figsize=[10,6])\nax = sb.swarmplot(data=df, x=\"reading score\", y=\"gender\",hue='lunch');\nax.set(ylabel=\"\");","ba86785e":"#plotting boxplot for Total score with types of races\nsb.set_theme(style=\"ticks\")\n\n# Initialize the figure with a logarithmic x axis\nf, ax = plt.subplots(figsize=(7, 6))\nax.set_xscale(\"log\")\n\nsb.boxplot(x=\"total_score\", y=\"race\/ethnicity\", data=df,\n            whis=[0, 100], width=.6, palette=\"vlag\")\n\n# Add in points to show each observation\nsb.stripplot(x=\"total_score\", y=\"race\/ethnicity\", data=df,\n              size=2, color=\".3\", linewidth=0)\n\n# Tweak the visual presentation\nplt.xticks( )\nax.xaxis.grid(False)\nax.set(ylabel=\"\")\nsb.despine(trim=False, left=True)","82f447f3":"\ndef detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices =Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","9598db61":"df.loc[detect_outliers(df,['math score', 'reading score', 'writing score'])]","13f53fde":"# drop outliers\ndf =df.drop(detect_outliers(df,['math score', 'reading score', 'writing score']),axis = 0).reset_index(drop = True)","3971e156":"#encoding gender feature\ndf['gender']=df['gender'].replace({'female':0,'male':1})","28522e41":"#we want to know the uniques in race\ndf['race\/ethnicity'].unique()","3d06ea0f":"# encoding race\ndf['race\/ethnicity']=df['race\/ethnicity'].replace({'group B':1, 'group C':2, 'group A':3, 'group D':4, 'group E':5})","9e807a48":"# uniques of parental level of education\ndf['parental level of education'].unique()\n","1dc836b9":"# encoding parental level of education\ndf['parental level of education']=df['parental level of education'].replace({\"bachelor's degree\":1, 'some college':2, \"master's degree\":3,\n       \"associate's degree\":4, 'high school':5, 'some high school':6})","324d5b65":"# uniques of lunch\ndf['lunch'].unique()","dbb420d1":"# encoding lunch\ndf['lunch']=df['lunch'].replace({'standard':1, 'free\/reduced':0})","cae34117":"# uniques of test preparation course\ndf['test preparation course'].unique()","d13fb835":"# encoding test preparation course \ndf['test preparation course']=df['test preparation course'].replace({'none':0, 'completed':1})","b688654b":"df.head()","6e8ed06e":"# drawing heatmap\nplt.figure(figsize=[10,10])\nsb.heatmap(df.corr(),annot=True, cmap='Dark2_r', linewidths = .2)\nplt.title('Relation between variables');","bd562f60":"df.drop(['writing score','reading score'],inplace=True,axis=1)\n","27ed4180":"X=df.drop(['gender'],axis=1)\ny=df['gender']","8a91913f":"X['total_score']=X['total_score']\/X['total_score'].max()\nX['math score']=X['math score']\/X['math score'].max()\n","a1e686de":"#Splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","6a626ccd":"#Applying VotingClassifier Model \n\n#loading models for Voting Classifier\nLRModel_ = LogisticRegression(solver='lbfgs', multi_class='multinomial',random_state=33)\nDTModel_ = DecisionTreeClassifier(criterion = 'entropy',max_depth=20,random_state = 33)\nKNNModel_ = KNeighborsClassifier(n_neighbors= 20 , weights ='uniform', algorithm='auto')\nSGDModel_ = SGDClassifier(loss='log', penalty='l2', max_iter=200, tol=1e-5)\n\n#loading Voting Classifier\nVotingClassifierModel = VotingClassifier(estimators=[('LRModel',LRModel_),('DTModel',DTModel_),('KNNModel',KNNModel_),('SGDModel',SGDModel_)],n_jobs=10 ,voting='hard')\nVotingClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('VotingClassifierModel Train Score is : ' , VotingClassifierModel.score(X_train, y_train))\nprint('VotingClassifierModel Test Score is : ' , VotingClassifierModel.score(X_test, y_test))\nprint('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = VotingClassifierModel.predict(X_test)\nprint('Predicted Value for VotingClassifierModel is : ' , y_pred[:10])","af3ccb51":"#Import Libraries\nfrom sklearn.metrics import accuracy_score\n \n#Calculating Accuracy Score  : ((TP + TN) \/ float(TP + TN + FP + FN))\nAccScore = accuracy_score(y_test, y_pred, normalize=True)\nprint('Accuracy Score is : ', AccScore)","5142d3f8":"# Adding new column which combine the final score of reading ,writing, and math ","9fe3eb6a":"# Total score with types of races","087023ff":"first we will replace each catoegory with unique number to make it easy to deel with our feature","00add9de":"# Math score statistics for each gender","e10b3638":"Rescale total score and math score","42fd6b19":"# Anomaly Detection","cb10dfa5":"Because od the strong relations between these three features we will drop two of them","edf2a46f":"# Relation between our features","db1f42f3":"Distribution of our numerical features with each other","57628ec0":"# Distribution of total score for each gender in each group","9cd28e11":"# Numbers of each gender in each race","ce53b841":"let's take alook after we encode our data","c1361356":"# Number of males and femals","dc538626":"# Our new encoded data NOW","d7dee6e2":"#  Please if you benefit from this kernal UPVOTE it ","4f4f58a6":"# Number of each gender in math score","3d7644b0":"# Number in each race which has test preparation course","2f21cf9e":"As we see we have no nulls in our data","8a4923eb":"As we see above the three scores in writing ,reading and math have strong relation between each other","2f6ad1cf":"WE see that the main of males is higher than femals","750d0c27":"# Writing score statistics for each gender","0b113b87":"# Now we will make prediction of gender based on other features"}}