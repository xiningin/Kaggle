{"cell_type":{"7a1e751c":"code","4de18273":"code","6868b206":"code","43f4ae20":"code","da9173fa":"code","a2da9cd5":"code","495bddbe":"code","d1770e6f":"code","3fd7e2ba":"code","8a0c3ee2":"code","644c1323":"code","46612c17":"code","69b41bb5":"code","a9c5fae3":"code","4562af4f":"code","b72768be":"code","08e8ed34":"code","318a61d0":"code","b6dff9e8":"code","e876bfa3":"code","1b55595f":"code","cf016d75":"code","db8e313b":"code","0a2e0bc0":"code","cc306b37":"code","4c84ede2":"code","12f62af3":"code","8f94a431":"code","abdacfd6":"code","9fd6c145":"code","5c0b991e":"code","2fdbdbf7":"code","ac7255d8":"code","69b42065":"code","5b19bff8":"code","0cc607ef":"code","d6aa3b04":"code","bb64fbbb":"code","c8304fb3":"code","d603bc7f":"code","ddf51cae":"markdown","5d05d51a":"markdown","5fc0609f":"markdown","1f143350":"markdown","0131e130":"markdown","7d214f50":"markdown","48577a63":"markdown"},"source":{"7a1e751c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV","4de18273":"titanic = pd.read_csv('..\/input\/titanic\/train.csv')","6868b206":"titanic.head()","43f4ae20":"plt.figure(figsize=(16,14))\n#Survived vs Unsurvived\nplt.subplot(2,2,1)\nsns.countplot(titanic['Survived'],palette='viridis');\nplt.title('Survived vs Unsurvived',fontsize=16)\nplt.xlabel('Survived',fontsize=14)\nplt.ylabel('Count',fontsize=14);\n#Male vs Female\nplt.subplot(2,2,2)\nsns.countplot(titanic['Survived'],hue=titanic['Sex'],palette='viridis');\nplt.title('Male vs Female',fontsize=16)\nplt.xlabel('Survived',fontsize=14)\nplt.ylabel('Count',fontsize=14);\n#Passesnger Travelled on Different Classes\nplt.subplot(2,2,3)\nsns.countplot(titanic['Pclass'],palette='viridis');\nplt.title('Passenger travelled on Different Classes',fontsize=16)\nplt.xlabel('Class Travelled',fontsize=14)\nplt.ylabel('Count',fontsize=14);\n#Passesnger Travelled on Different Classes Survived vs Unsurvived\nplt.subplot(2,2,4)\nsns.countplot(titanic['Pclass'],hue=titanic['Survived'],palette='viridis');\nplt.title('Passenger Survived vs Unsurvived on Different Classes',fontsize=16)\nplt.xlabel('Class Travelled',fontsize=14)\nplt.ylabel('Count',fontsize=14);\nplt.tight_layout(pad=3.0)","da9173fa":"plt.figure(figsize=(16,14))\n#Passengers Traveled with Siblings and Spouse\nplt.subplot(2,2,1)\nsns.countplot(titanic['SibSp'],palette='viridis');\nplt.title('Passengers Traveled with Siblings and Spouse',fontsize=16)\nplt.xlabel('No of Siblings and Spouse',fontsize=14)\nplt.ylabel('Count',fontsize=14);\n#Passengers Traveled with Parents and Children\nplt.subplot(2,2,2)\nsns.countplot(titanic['Parch'],palette='viridis');\nplt.title('Passengers Traveled with Parents and Children',fontsize=16)\nplt.xlabel('No of Parents and Children',fontsize=14)\nplt.ylabel('Count',fontsize=14);\n#Distrubution of Age\nplt.subplot(2,2,3)\nsns.distplot(titanic['Age'],kde_kws={\"color\": \"k\", \"lw\": 3, \"label\": \"KDE\"},hist_kws={\"histtype\": \"step\", \"linewidth\":3,\"alpha\":1,\"color\": \"g\"})\nplt.title('Distrubution of Age',fontsize=16)\nplt.xlabel('Age',fontsize=14)\n#Distrubution of Fare\nplt.subplot(2,2,4)\nsns.distplot(titanic['Fare'],kde=False,hist_kws={'lw':3,\"alpha\":0.8,\"color\":\"g\"},bins=30);\nplt.title('Distrubution of Fare',fontsize=16)\nplt.xlabel('Fare',fontsize=14)\nplt.tight_layout(pad=3.0)\n","a2da9cd5":"titanic.isnull().sum()","495bddbe":"titanic = titanic.drop('Cabin',axis=1)\ntitanic['Fare'] = np.log(titanic['Fare'])","d1770e6f":"def impute(col):\n    age = col[0]\n    clas = col[1]\n    if(pd.isnull(age)):\n        if(clas==1):\n            return 37\n        elif(clas == 2):\n            return 29\n        else:\n            return 25\n    return age    ","3fd7e2ba":"titanic['Age'] = titanic[['Age','Pclass']].apply(impute,axis=1)\ntitanic.dropna(inplace=True)","8a0c3ee2":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nsns.boxplot(x=titanic['Fare'],data=titanic)\nplt.xlabel('Fare',fontsize=14)\nplt.subplot(1,2,2)\nsns.boxplot(x=titanic['Age'],data=titanic)\nplt.xlabel('Age',fontsize=14)\nplt.suptitle('Outlier',fontsize=16);\nplt.tight_layout(pad=3.0)","644c1323":"Q1 = titanic['Age'].quantile(0.25)\nQ3 = titanic['Age'].quantile(0.75)\nIQR = Q3-Q1\nlow_wiskers = Q1-1.5*IQR\nupper_wiskers = Q3+1.5*IQR\ntitanic= titanic[(titanic['Age']>low_wiskers)&(titanic['Age']<upper_wiskers)]","46612c17":"Q1 = titanic['Fare'].quantile(0.25)\nQ3 = titanic['Fare'].quantile(0.75)\nIQR = Q3-Q1\nlow_wiskers = Q1-1.5*IQR\nupper_wiskers = Q3+1.5*IQR\ntitanic = titanic[(titanic['Fare']>low_wiskers)&(titanic['Fare']<upper_wiskers)]","69b41bb5":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nsns.boxplot(x=titanic['Fare'],data=titanic)\nplt.xlabel('Fare',fontsize=14)\nplt.subplot(1,2,2)\nsns.boxplot(x=titanic['Age'],data=titanic)\nplt.xlabel('Age',fontsize=14)\nplt.suptitle('Outlier Removal',fontsize=16);\nplt.tight_layout(pad=3.0)","a9c5fae3":"titanic.isnull().sum()","4562af4f":"titanic.head()","b72768be":"titanic.isnull().sum()","08e8ed34":"#Mapping Sex Column Male-0,Female-1\ntitanic['Sex'] = titanic['Sex'].map({'male':0,'female':1})\n#Getting Dummies for Embarked\nembarked = pd.get_dummies(titanic['Embarked'])\n#Dropping original column and concatinating encoded column\ntitanic = titanic.drop('Embarked',axis=1)\ntitanic = pd.concat([titanic,embarked],axis=1)\n#Creating Family as Sbsp+Parch and dropping SbSp&Parch\ntitanic['Family'] = titanic['SibSp']+titanic['Parch']\ntitanic = titanic.drop(['SibSp','Parch'],axis=1)","318a61d0":"#Dropping Columns\ntitanic.drop('Ticket',axis=1,inplace=True)\ntitanic.drop('PassengerId',axis=1,inplace=True)\ntitanic = titanic.drop('Name',axis=1)","b6dff9e8":"test = pd.read_csv('..\/input\/titanic\/test.csv')","e876bfa3":"test.head()","1b55595f":"#handling Missing Value\ntest['Age'] = test[['Age','Pclass']].apply(impute,axis=1)\ntest = test.drop('Cabin',axis=1)\n#Mapping Sex Column Male-0,Female-1\ntest['Sex'] = test['Sex'].map({'male':0,'female':1})\n#Getting Dummies for Embarked\nembarked = pd.get_dummies(test['Embarked'])\n#Dropping original column and concatinating encoded column\ntest = test.drop('Embarked',axis=1)\ntest = pd.concat([test,embarked],axis=1)\n#Creating Family as Sbsp+Parch and dropping SbSp&Parch\ntest['Family'] = test['SibSp']+test['Parch']\ntest = test.drop(['SibSp','Parch'],axis=1)","cf016d75":"#Dropping Columns\ntest.drop(['Ticket','PassengerId','Name'],axis=1,inplace=True)\ntest = test.fillna(int(test['Fare'].mean()))","db8e313b":"X = titanic.drop('Survived',axis=1)\ny = titanic['Survived']","0a2e0bc0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","cc306b37":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","4c84ede2":"#Kogistic Regression\nmodel_log = LogisticRegression()\nmodel_log.fit(X_train,y_train)\n","12f62af3":"model_log.score(X_train,y_train)","8f94a431":"#Support Vector Classifier\nmodel_svm = SVC(kernel='rbf')\nmodel_svm.fit(X_train,y_train)\nmodel_svm.score(X_train,y_train)","abdacfd6":"model_svm.score(X_test,y_test)","9fd6c145":"#Random Forest\nmodel_rf = RandomForestClassifier()\nmodel_rf.fit(X_train,y_train)\nmodel_rf.score(X_train,y_train)","5c0b991e":"model_rf.score(X_test,y_test)","2fdbdbf7":"#Scaling Entire Dataset\nX_scaled = scaler.fit_transform(X)\ntest_scaled = scaler.transform(test)","ac7255d8":"\nparam_grid = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n}","69b42065":"#Performing GridSearchCV\nCV_rfc = GridSearchCV(estimator=model_rf, param_grid=param_grid,cv= 5)\nCV_rfc.fit(X_scaled,y)","5b19bff8":"#Getting Best Parameters\nCV_rfc.best_params_","0cc607ef":"#Retraining with best Parameters\nmodel_cvrf = RandomForestClassifier(criterion='gini',max_depth=7,max_features='log2',n_estimators=200)\nmodel_cvrf.fit(X_scaled,y)","d6aa3b04":"model_cvrf.score(X_scaled,y)","bb64fbbb":"pred = model_cvrf.predict(test_scaled)","c8304fb3":"#Submission\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","d603bc7f":"submission = pd.DataFrame({'PassengerId':test_df['PassengerId'],'Survived':pred})\nsubmission.to_csv(\"\/kaggle\/working\/gender_submission.csv\",index=False)","ddf51cae":"## Converting Categorical Values","5d05d51a":"## Test Data","5fc0609f":"## Thank you!! Please Upvote If you like this Effort!!","1f143350":"## Hyper Parameter Tuning\n","0131e130":"## Missing values and Outlier Treatment","7d214f50":"## Data Analysis and Visualization","48577a63":"## Please Upvote If you like this Effort!!"}}