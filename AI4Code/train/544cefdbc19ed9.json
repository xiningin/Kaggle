{"cell_type":{"4b3233b8":"code","8f96232f":"code","0c56daef":"code","315c8711":"code","85729dfc":"code","72fa79e2":"code","3a0eb680":"code","71c93ff6":"code","3b120414":"code","70e9c49d":"code","3e890a82":"code","e10beb22":"code","18a7e526":"code","b3e05de5":"code","5290f784":"code","0e7058f8":"code","ae5ce5df":"code","66d83af8":"code","9d359303":"code","eb7f2a6c":"code","bbbf22d3":"code","362c07b7":"code","f715fab7":"code","7c8d065a":"code","a06ea1f9":"code","7998de67":"code","60de5065":"code","334cd799":"code","50fe3ee7":"code","b566a679":"code","b6696fe0":"code","04f36beb":"code","55a2d948":"code","326eab49":"code","ad59275c":"code","4ec45ef8":"code","27713f16":"code","2279351d":"code","99b2481c":"code","5993e514":"code","7d5eb45c":"code","07cf2cee":"code","eff81008":"code","2bb2e6da":"code","2e6d37df":"code","6d15d55c":"code","92fe6f3a":"code","08246d23":"code","e5f9373d":"code","461aa514":"code","86fad5b9":"code","c7d21722":"code","932ca1fb":"code","091c0189":"code","f8d0bb73":"code","30830691":"code","f51cf4e7":"code","aa67860f":"code","2fe0f685":"code","3c74b504":"code","b05d9fd2":"code","095fe75b":"code","065af287":"code","5fd09f08":"code","0f45d252":"code","134a58ed":"code","02941fc8":"code","5b702807":"code","148ae625":"code","824b2a98":"code","a2cb6827":"code","354446f6":"code","1714cb10":"code","7ba36dfc":"code","e526487f":"code","dc274e44":"code","f04c3603":"code","6e69cfcc":"code","f699396c":"code","0829bc75":"markdown","ec6e26f6":"markdown"},"source":{"4b3233b8":"%%capture\n!pip install openpyxl\n!pip install xlrd\n!pip install -q efficientnet\nimport efficientnet.tfkeras as efn","8f96232f":"\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport glob as gb\n\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport random, re, math, time\nrandom.seed(a=128)\n\nfrom os.path import join \n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\n#import tensorflow_addons as tfa\nimport efficientnet.tfkeras as efn\n\nfrom tqdm.keras import TqdmCallback\n\nfrom PIL import Image\nimport PIL\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import KFold\n\nfrom sklearn.utils.class_weight import compute_class_weight\n\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nfrom pandas_summary import DataFrameSummary\n\nfrom kaggle_datasets import KaggleDatasets\n\nfrom tqdm import tqdm\n","0c56daef":"from tensorflow.keras.preprocessing.image import load_img,img_to_array\ndataset_dir = \"\/kaggle\/input\/ocular-disease-recognition-odir5k\/preprocessed_images\/\"\nimage_size=224\nlabels = []\ndataset = []\ndef create_dataset(image_category,label):\n    for img in tqdm(image_category):\n        image_path = os.path.join(dataset_dir,img)\n        try:\n            image = cv2.imread(image_path,cv2.IMREAD_COLOR)\n            image = cv2.resize(image,(image_size,image_size))\n        except:\n            continue\n        \n        dataset.append([np.array(image),np.array(label)])\n    random.shuffle(dataset)\n    return dataset","315c8711":"DATA_PATH = '..\/input\/ocular-disease-recognition-odir5k\/full_df.csv'\nIMG_DIR = '\/kaggle\/input\/ocular-disease-recognition-odir5k\/ODIR-5K\/ODIR-5K\/Training Images\/'","85729dfc":"main_df = pd.read_csv('..\/input\/ocular-disease-recognition-odir5k\/full_df.csv')\n","72fa79e2":"\nIMG_SIZE = 512\n\ndef crop(image): \n    # Remove vertical black borders (the image must be already normalized)\n    sums = image.sum(axis=0)\n    sums = sums.sum(axis=1)\n    filter_arr = []\n    for s in sums:\n        if s == 0:\n            filter_arr.append(False)\n        else:\n            filter_arr.append(True)\n    image = image[:, filter_arr]\n    \n    # Crop to a square shape\n    h = image.shape[0]\n    w = image.shape[1]    \n    \n    if h < w:\n        x = (w - h)\/\/2\n        image = image[:, x:x+h, :]        \n    elif h > w:\n        x = (h - w)\/\/2\n        image = image[x:x+w, :, :]           \n    else:\n        pass\n    \n    return image\n            ","3a0eb680":"def preprocess_image(file_name):\n    image = cv2.imread(os.path.join(IMG_DIR, file_name))\n    \n    norm_img = np.zeros(image.shape)\n    norm_img = cv2.normalize(image,  norm_img, 0, 255, cv2.NORM_MINMAX)\n    \n    image = crop(norm_img)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    \n    return image\n\ndef preprocess_patient(patient_id):\n    left_eye_file = str(patient_id) + '_left.jpg'\n    right_eye_file = str(patient_id) + '_right.jpg'\n    image = cv2.hconcat([preprocess_image(left_eye_file), preprocess_image(right_eye_file)]) \n    return image\n\n# example","71c93ff6":"patient_id = main_df.iloc[14]['ID']\nimage = preprocess_patient(patient_id)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nprint(image.shape)\nplt.imshow(image)\n","3b120414":"# example\npatient_id = main_df.iloc[7]['ID']\nimage = preprocess_patient(patient_id)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nplt.imshow(image)","70e9c49d":"def get_data():\n    \n    X=[]\n\n    for i in range(main_df.shape[0]):\n\n        patient_id = main_df.iloc[i]['ID']\n        image = preprocess_patient(patient_id)\n        X.append(image)\n        if i==(main_df.shape[0])-1:\n\n            end='\\n'\n        else:\n            end='\\r'\n        print('processed {}\/{}'.format(i+1,(main_df.shape[0])),end=end)\n    X=np.array(X)  \n    return X  ","3e890a82":"X_train=get_data()","e10beb22":"def plot(cmap='gray'):\n    plt.figure(figsize=(25,25))\n    for n,i in enumerate(list(np.random.randint(0,len(X_train),15))):\n        plt.subplot(5,3,n+1)\n        plt.imshow(X_train[i],cmap=cmap)\n        plt.axis('off')\n        plt.title(main_df.iloc[n]['Left-Diagnostic Keywords']+' \\n  '+main_df.iloc[i]['Right-Diagnostic Keywords'])","18a7e526":"plot()","b3e05de5":"df = pd.read_csv(\"..\/input\/ocular-disease-recognition-odir5k\/full_df.csv\")\ndf.head(500)","5290f784":"df['labels'].unique()","0e7058f8":"main_df=df.copy()","ae5ce5df":"target = pd.Series(dtype='object')\n# this code iterates through every row in the dataframe and creates a list which contains the correct values for the target, when reading the actual columns\n# then appends this list to a series which contains the target values\nfor i in range(main_df.shape[0]):\n    target_list = []\n    for col in ['N','D','G','C','A','H','M','O']:\n        if (main_df.loc[i][col] == 1):\n            target_list.append(1)\n        else:\n            target_list.append(0)\n    d = {'target':target_list}\n    input_df_row = pd.Series(data=d)\n    target = target.append(input_df_row)\ntarget.index = main_df.index","66d83af8":"target1=pd.DataFrame(target)\ntarget1=np.unique(target1)\ntype(target1)\nvalue=[]\nfor i in range(len(target1)):\n    value.append(target1[i])","9d359303":"new_data=pd.DataFrame(value)","eb7f2a6c":"data_y=main_df[['N','D','G','C','A','H','M','O']]\n\ndata_y=pd.DataFrame(data_y)\ndata_y_prime=np.array(data_y)","bbbf22d3":"data=main_df.copy()","362c07b7":"val=[]\nfor i in range(len(new_data)):\n    val.append(i+1)","f715fab7":"value=np.array(value)","7c8d065a":"data_y_prime=np.array(data_y)","a06ea1f9":"print(len(data_y_prime))\nprint(len(target1))\nprint(type(data_y_prime))\nprint(type(target1))","7998de67":"val=[]\nfor i in range(len(target1)):\n    cas='case'+str(i+1)\n    val.append(cas)","60de5065":"y_val=[]\nfor i in range(len(data_y_prime)):\n    \n    for j in range(len(target1)):\n        \n        if (data_y_prime[i][0]==target1[j][0]) and((data_y_prime[i][1]==target1[j][1])) and (((data_y_prime[i][2]==target1[j][2]))) and ((data_y_prime[i][3]==target1[j][3])) and ((data_y_prime[i][4]==target1[j][4])) and(data_y_prime[i][5]==target1[j][5]) and((data_y_prime[i][6]==target1[j][6])) and (((data_y_prime[i][7]==target1[j][7]))):\n            \n            if j==0:\n                y_val.append(val[0])\n            if j==1:\n                y_val.append(val[1])\n            if j==2:\n                y_val.append(val[2]) \n             \n            if j==3:\n                y_val.append(val[3])\n            if j==4:\n                y_val.append(val[4])\n            if j==5:\n                y_val.append(val[5])\n             \n            \n            if j==6:\n                y_val.append(val[6])\n            if j==7:\n                y_val.append(val[7])\n            if j==8:\n                y_val.append(val[8]) \n             \n            if j==9:\n                y_val.append(val[9])\n            if j==10:\n                y_val.append(val[10])\n            if j==11:\n                y_val.append(val[11])\n              \n            if j==12:\n                y_val.append(val[12])\n            if j==13:\n                y_val.append(val[13])\n            if j==14:\n                y_val.append(val[14]) \n             \n            if j==15:\n                y_val.append(val[15])\n            if j==16:\n                y_val.append(val[16])\n            if j==17:\n                y_val.append(val[17])\n             \n            \n            if j==18:\n                y_val.append(val[18])\n            if j==19:\n                y_val.append(val[18])\n            if j==20:\n                y_val.append(val[20]) \n             \n            if j==21:\n                y_val.append(val[21])\n            if j==22:\n                y_val.append(val[22])\n            if j==23:\n                y_val.append(val[23])  \n                \n            if j==24:\n                y_val.append(val[24])\n            if j==25:\n                y_val.append(val[25])\n            if j==26:\n                y_val.append(val[26]) \n             \n            if j==27:\n                y_val.append(val[27])\n            if j==28:\n                y_val.append(val[28])\n            if j==29:\n                y_val.append(val[29])\n             \n            \n            if j==30:\n                y_val.append(val[30])\n            if j==31:\n                y_val.append(val[31])\n            if j==32:\n                y_val.append(val[32]) \n             \n            if j==33:\n                y_val.append(val[33])\n            if j==34:\n                y_val.append(val[34])\n            if j==35:\n                y_val.append(val[35])   \n            if j==36:\n                y_val.append(val[36])\n            if j==37:\n                y_val.append(val[37])     \n                \n                \n        \n        \nprint(len(y_val))      ","334cd799":"df1=main_df.copy()","50fe3ee7":"y_val=pd.DataFrame(y_val)","b566a679":"df1['case']=y_val","b6696fe0":"df1","04f36beb":"df1.shape","55a2d948":"c=df1['case'].value_counts()","326eab49":"\nc=pd.DataFrame(c)\ndf1['case'].value_counts().index\n","ad59275c":"df1['case'].value_counts()","4ec45ef8":"(df1['O']==1).value_counts()","27713f16":"(df1['N']==1).value_counts()","2279351d":"(df1['D']==1).value_counts()","99b2481c":"(df1['G']==1).value_counts()","5993e514":"(df1['C']==1).value_counts()","7d5eb45c":"(df1['A']==1).value_counts()","07cf2cee":"(df1['M']==1).value_counts()","eff81008":"(df1['H']==1).value_counts()","2bb2e6da":"import pandas as pd\ns1 = pd.Series(['a', 'b', 'a', 'c', 'a', 'b'])\ns2 = pd.Series(['a', 'f', 'a', 'd', 'a', 'f', 'f'])\nd = pd.DataFrame({'s1': s1, 's2': s2})\nd","2e6d37df":"d.apply(pd.value_counts).plot(kind='bar', subplots=True)","6d15d55c":"df['labels'].apply(pd.value_counts).plot(kind='bar', subplots=True)","92fe6f3a":"df = pd.read_csv(\"..\/input\/ocular-disease-recognition-odir5k\/full_df.csv\")\ndf.head()","08246d23":"df['labels'].value_counts().plot(kind='bar', subplots=True)","e5f9373d":"df['labels'].value_counts().index","461aa514":"import seaborn as sns\nnew_data=df.copy()\n\nprint(df['labels'].value_counts())\nsns.countplot(x='labels',data=df,palette='Set2')","86fad5b9":"new_data['labels']","c7d21722":"new_data=new_data.replace(to_replace =[\"['N']\",\"['D']\",\"['G']\",\"['C']\", \"['A']\",\"['H']\",\"['M']\",\"['O']\"],\n                            value =[0,1,2,3,4,5,6,7])","932ca1fb":"new_data.drop(columns=['Left-Fundus','Right-Fundus','Left-Diagnostic Keywords','Right-Diagnostic Keywords','filepath','filename','target','N', 'D' ,'G', 'C', 'A','H', 'M' ,'O'],inplace=True)","091c0189":"new_data=new_data.set_index('ID')\n","f8d0bb73":"new_data.head()","30830691":"dum=pd.get_dummies(new_data['Patient Sex'])","f51cf4e7":"new_data=pd.concat([new_data,dum],axis=1)","aa67860f":"new_data.head()","2fe0f685":"new_data.drop(columns=['Patient Sex','Female'],inplace=True)","3c74b504":"new_data","b05d9fd2":"new_data['Patient Age'].plot('bar')","095fe75b":"def normalize_age(typ=False):\n    if typ=='Std':\n        age= new_data['Patient Age']-new_data['Patient Age'].mean()\/new_data['Patient Age'].std()\n    \n    if typ=='norm':\n        \n        age=new_data['Patient Age']\/new_data['Patient Age'].max()\n    return age\nage=normalize_age(typ='norm')\nnew_data['Age']=age","065af287":"new_data","5fd09f08":"import seaborn as sns\n\nsns.distplot(new_data['Age'], hist=False)","0f45d252":"sns.distplot(new_data['Patient Age'], hist=False)","134a58ed":"new_data.drop(columns=['Patient Age'],inplace=True)","02941fc8":"new_data","5b702807":"new_data['labels'].value_counts().plot.pie(autopct=\"%.1f%%\");","148ae625":"pie, ax = plt.subplots(figsize=[10,8])\nlabels = new_data['labels'].value_counts().keys()\nplt.pie(x=new_data['labels'].value_counts(), autopct=\"%.1f%%\", labels=labels, pctdistance=0.5)\nplt.title(\"Delivery Tips by type\", fontsize=14);","824b2a98":"new_data['labels'].value_counts().keys()","a2cb6827":"new_data","354446f6":"plt.imshow(X_train[0])","1714cb10":"len(X_train)\nlen(new_data)","7ba36dfc":"y_labels=new_data['labels']\ny_labels_cat=df['labels']\nplt.imshow(X_train[50])\nplt.title(y_labels_cat[50])\nplt.figure(figsize=(10,10))\nfor n,i in enumerate(list(np.random.randint(0,len(X_train),15))):\n    plt.subplot(5,3,n+1)\n    plt.imshow(X_train[i])\n    plt.axis('off')\n    plt.title(y_labels_cat[i])\n        ","e526487f":"indices=list(range(len(X_train)))\nnp.random.seed(42)\nnp.random.shuffle(indices)\n\nind=int(len(indices)*0.80)\n# train data\nX_train=X_train[indices[:ind]] \n\n# validation data\n","dc274e44":"X_val=X_train_all[indices[-(len(indices)-ind):]] \ny_val=y_train_all[indices[-(len(indices)-ind):]]","f04c3603":"\nfrom tensorflow.keras.applications.vgg19 import VGG19\nvgg = VGG19(weights=\"imagenet\",include_top = False,input_shape=(X_train[0].shape))","6e69cfcc":"for layer in vgg.layers:\n    layer.trainable = False","f699396c":"\n\nIMG_SHAPE = (512,512,3)\nbase_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,\n                                               include_top=False, \n                                               weights='imagenet')\n\n","0829bc75":"# Model ","ec6e26f6":"DEVICE=\"TPU\"\nif DEVICE == \"TPU\":\n    print(\"connecting to TPU...\")\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        print(\"Could not connect to TPU\")\n        tpu = None\n\n    if tpu:\n        try:\n            print(\"initializing  TPU ...\")\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"TPU initialized\")\n        except _:\n            print(\"failed to initialize TPU\")\n    else:\n        DEVICE = \"GPU\"\n\nif DEVICE != \"TPU\":\n    print(\"Using default strategy for CPU and single GPU\")\n    strategy = tf.distribute.get_strategy()\n\nif DEVICE == \"GPU\":\n    print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n    \nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\nAUTO = tf.data.experimental.AUTOTUNE"}}