{"cell_type":{"44a871a2":"code","88bdc84a":"code","0ba91d19":"code","66f478de":"code","af879fa1":"code","25b76473":"code","0c5cf555":"code","617fc842":"code","277d5f87":"code","2fe4174a":"code","862c6af7":"code","41f5ba14":"code","38089003":"code","b818b2d2":"code","8ff937f1":"code","638f623e":"code","ea1d3be8":"code","362467cb":"code","4fd6d88a":"code","5abd2aef":"code","25f1ee0b":"code","3634536d":"code","d2c12b39":"code","eccb308c":"code","953fe0ab":"markdown","f7512a9b":"markdown","aa6e2fcd":"markdown","a7751884":"markdown","b6195388":"markdown","3900f254":"markdown","8585f466":"markdown","fd377a54":"markdown","64fc6217":"markdown"},"source":{"44a871a2":"import gc\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\nfrom pprint import pprint\n\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc, roc_auc_score, plot_roc_curve\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import SGDClassifier","88bdc84a":"path='\/kaggle\/input\/tabular-playground-series-sep-2021\/'\n\ntrain = pd.read_csv(path+'train.csv')\ntest = pd.read_csv(path+'test.csv')","0ba91d19":"print('train shape:', train.shape)\nprint('test shape:', test.shape)","66f478de":"train.head()","af879fa1":"test.head()","25b76473":"id = test['id']\ny = train['claim']\ntrain = train.drop(['id','claim'], axis=1)\ntest = test.drop(['id'], axis=1)","0c5cf555":"train[\"max_value\"] = train.max(axis = 1)\ntrain[\"min_value\"] = train.min(axis = 1 )\ntrain['num_missing_std'] = train.isna().std(axis=1).astype('float') \ntrain[\"mean\"] = train.mean(axis = 1)\ntrain[\"median\"] = train.median(axis = 1)\ntrain[\"std\"] = train.std(axis = 1)\ntrain['mad'] = train.mad(axis=1) \ntrain[\"skew\"] = train.skew(axis = 1)\ntrain[\"null_value\"] = train.isnull().sum(axis = 1)\n\ntest[\"max_value\"] = test.max(axis = 1)\ntest[\"min_value\"] = test.min(axis = 1 )\ntest['num_missing_std'] = test.isna().std(axis=1).astype('float') \ntest[\"mean\"] = test.mean(axis = 1)\ntest[\"median\"] = test.median(axis = 1)\ntest[\"std\"] = test.std(axis = 1)\ntest['mad'] = test.mad(axis=1) \ntest[\"skew\"] = test.skew(axis = 1)\ntest[\"null_value\"] = test.isnull().sum(axis = 1)","617fc842":"X_train, X_test, y_train, y_test = train_test_split(\n    train, y, test_size=0.1, random_state=42)","277d5f87":"numerical_transformer = SimpleImputer(strategy='constant', fill_value=0)\n\nimputed_train = pd.DataFrame(numerical_transformer.fit_transform(X_train))\nimputed_test = pd.DataFrame(numerical_transformer.transform(X_test))\nimputed_train.columns = train.columns\nimputed_test.columns = train.columns","2fe4174a":"scaler = StandardScaler()\nX_train = scaler.fit_transform(imputed_train)\nX_test = scaler.transform(imputed_test)","862c6af7":"del imputed_train, imputed_test, train\ngc.collect()","41f5ba14":"sgd = SGDClassifier()","38089003":"penalty = ['l1']\nalpha = [1e-4, 1e-3, 1e-2, 1e-1, 1e0]\nmax_iter = [int(x) for x in np.linspace(1000, 10000, num = 19)]\nloss = ['hinge', 'log', 'modified_huber', 'squared_hinge',  \n'perceptron'] \nlearning_rate = ['constant', 'optimal', 'invscaling', 'adaptive'] \nclass_weight = [{1:0.5, 0:0.5}, {1:0.4, 0:0.6}, {1:0.6, 0:0.4}, {1:0.7, 0:0.3}] \neta0 = [1, 10, 100]\n\n\nrandom_grid = {\n    'penalty' : penalty,\n    'alpha' : alpha,\n    'max_iter' : max_iter,\n    'loss': loss,\n    'learning_rate' : learning_rate,\n    'class_weight' : class_weight,\n    'eta0' : eta0\n}\n\n\npprint(random_grid)","b818b2d2":"clf = RandomizedSearchCV(estimator = sgd, param_distributions = random_grid, n_iter = 10, cv = 3, verbose = 2, random_state = 42, n_jobs = -1, scoring = 'roc_auc')","8ff937f1":"%%time\nclf.fit(X_train, y_train)","638f623e":"del y_train\ngc.collect()","ea1d3be8":"print('Best Score: ', clf.best_score_) \nprint('Best Params: ', clf.best_params_)","362467cb":"pred = clf.predict(X_test)","4fd6d88a":"fpr, tpr, thresholds = roc_curve(y_test, pred)\nprint(auc(fpr, tpr))\n\nplot_roc_curve(clf, X_test, y_test)\nplt.show()","5abd2aef":"del y_test, X_test, X_train\ngc.collect()","25f1ee0b":"imputed_test_df = pd.DataFrame(numerical_transformer.transform(test))\nimputed_test_df.columns = imputed_test_df.columns \ntest_df =  scaler.transform(imputed_test_df)\ny_predicted = clf.predict(test_df)","3634536d":"del test_df, test\ngc.collect()","d2c12b39":"data = {'id' : id, \"claim\" : y_predicted}\ndf = pd.DataFrame(data=data)\ndf.head()","eccb308c":"df.to_csv('submission.csv', index=False)\ndf","953fe0ab":"# Exporting predictions to appropriate submission format","f7512a9b":"# Reading the dataset","aa6e2fcd":"Some feature engineering","a7751884":"# **Measuring** **performance**","b6195388":"Splitting data","3900f254":"# SGD Classifier","8585f466":"Transforming data","fd377a54":"**Creating random grid**","64fc6217":"# Handling missing values"}}