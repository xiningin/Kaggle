{"cell_type":{"420ec116":"code","e2fb6d5a":"code","646bdae9":"code","8dc77a60":"code","55580642":"code","5513c5e9":"code","2146442f":"code","6b2403e7":"code","0c4316c3":"code","0d83591c":"code","780ce00d":"code","08748278":"code","65da2058":"code","a798a32e":"code","610af7a2":"code","7fd8eb0a":"code","859043d7":"code","ba189e90":"code","a8bb7141":"code","778b9bda":"code","84827e7e":"code","b06e17b2":"code","b91e20fd":"code","78e7c86c":"code","a36844d2":"code","8672946c":"code","f62a93eb":"code","e82f1de1":"code","b3be1e24":"code","b00d005b":"code","ca0de34b":"code","832f9c84":"code","911e1f35":"code","f2f46708":"code","b3c5b3b7":"code","6ddaffa2":"code","bad3be7f":"code","39c2c5fc":"code","7d3253c1":"code","1acd6275":"code","f5058352":"code","834e2377":"code","d0da77a3":"code","7e393f61":"code","e1f2c5d5":"code","dc62565f":"code","4ad4a071":"code","5f05df9e":"code","73f1b94a":"code","f8a6722b":"code","dd0614f1":"code","0568927c":"code","6f55ffa7":"code","1f9d3a66":"code","133c69f0":"code","9f73168a":"code","b1ffec7e":"code","c1c2614c":"code","3e6386f7":"code","5bbaafb1":"code","edfe7f15":"code","7151c1ee":"code","ec172c98":"code","506b1d14":"code","41a5e9e0":"code","32a1b35f":"code","b1aaa5db":"code","718eece0":"code","9c69198f":"code","9eb718bb":"code","9c4dc8b6":"code","cbbb46f8":"code","f4e53bd7":"code","59dd91d6":"code","f38affc6":"code","7cab066c":"code","845d695f":"code","d0e1e092":"code","159a9b34":"code","a40ceeaa":"code","670bdec5":"code","c3d58b35":"code","106d65d7":"code","ff5d8d32":"code","d123de4d":"code","27006f77":"code","f8e77b64":"code","266008f2":"code","90083367":"code","488b0107":"code","8b8e5acd":"code","3260fc24":"code","3916dc0f":"code","f605e88e":"code","ec6e8055":"code","bb301087":"code","24ee57b9":"code","66e708b9":"code","5ce4c433":"code","aac1125b":"code","2127cdce":"code","8b7d599a":"code","74d01d42":"code","9f2b273b":"code","7f8c667d":"code","a5e61f92":"code","51e5de43":"code","a8b2ace9":"code","5e8bd5a6":"code","3919e8f0":"code","c96c8870":"code","25dfb3f5":"code","2aaf421a":"code","7f118684":"code","53ea9aad":"code","6f554d94":"code","280b63b2":"code","6638da62":"code","dcf4a3e1":"markdown","c4458473":"markdown","4152e7a2":"markdown","fe5baac9":"markdown","2d3c1d78":"markdown","1420eb84":"markdown","0f29e5bd":"markdown","dfc6495e":"markdown","10e2e243":"markdown","edc9fd02":"markdown","087f247b":"markdown","11881737":"markdown","28791d18":"markdown"},"source":{"420ec116":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nimport sys\nimport gc\nimport pickle\nfrom itertools import product\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e2fb6d5a":"train_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv\")\nitems_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nshops_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ncate_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")","646bdae9":"train_data.head()","8dc77a60":"train_data.shape","55580642":"train_data.info()","5513c5e9":"#Train_data n\u0131n item_price s\u00fctununu baz alarak; modunu, standart sapmas\u0131n\u0131 hesaplayal\u0131m.","2146442f":"train_data['item_price'].mode()\n","6b2403e7":"train_data['item_price'].std()\n","0c4316c3":"#Veri k\u00fcmesinde yer alan t\u00fcm \u00f6znitelikler aras\u0131ndaki kovaryans de\u011ferlerini i\u00e7eren matris a\u015fa\u011f\u0131daki kod par\u00e7as\u0131yla hesaplanabilir.","0d83591c":"train_data.cov()","780ce00d":"#\u0130ki veya daha fazla ba\u011f\u0131ms\u0131z de\u011fi\u015fken (\u00f6znitelik)aras\u0131ndaki ili\u015fkinin varl\u0131\u011f\u0131, bu ili\u015fkinin y\u00f6n\u00fc ve \u015fiddeti korelasyon analizi ve sonucunda elde edilen korelasyon katsay\u0131s\u0131 ile belirlenir.","08748278":"import seaborn as sns\ncorr = train_data.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","65da2058":"#Verimizde toplam ka\u00e7 h\u00fccrede eksik veri vard\u0131r sorusunun cevab\u0131n\u0131 \u00f6\u011frenmemiz gerekir","a798a32e":"train_data.isnull().sum()","610af7a2":"#Veri G\u00f6rselle\u015ftirme ile verimizi tablo \u00fczerinde inceleyelim.","7fd8eb0a":"color = sns.color_palette(\"hls\", 8)\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15, 5))\nsns.countplot(x=train_data['shop_id'], data=train_data, palette=color)","859043d7":"plt.figure(figsize=(10, 5))\nsns.distplot(train_data['item_id'], color=\"red\");","ba189e90":"plt.figure(figsize=(10, 5))\nsns.distplot(train_data['item_price'], color=\"red\");","a8bb7141":"plt.figure(figsize=(10, 5))\nsns.distplot(np.log(train_data['item_price']), color=\"red\");","778b9bda":"plt.figure(figsize=(10, 5))\ntrain_data['item_cnt_day'].plot(kind='hist', alpha=0.7, color='orange')","84827e7e":"test_data.head()","b06e17b2":"test_data.shape","b91e20fd":"len(test_data['shop_id'].unique())","78e7c86c":"len(test_data['item_id'].unique())","a36844d2":"5100 * 42","8672946c":"plt.figure(figsize=(10, 5))\nsns.countplot(x=test_data['shop_id'], data=test_data)","f62a93eb":"plt.figure(figsize=(10, 5))\nsns.distplot(test_data['item_id'], color=\"green\");","e82f1de1":"#Ayk\u0131r\u0131 De\u011fer incelemesi yapal\u0131m.","b3be1e24":"train_data['item_cnt_day'].sort_values(ascending=False).head(5)","b00d005b":"plt.figure(figsize=(10, 5))\ncolor = sns.color_palette(\"hls\", 8)\nplt.xlim(-200, 3500)\nsns.boxplot(x=train_data.item_cnt_day, color=\"red\", palette=\"Set3\")","ca0de34b":"train_data = train_data[train_data.item_cnt_day<=1000]","832f9c84":"plt.figure(figsize=(10, 5))\ncolor = sns.color_palette(\"hls\", 8)\nplt.xlim(-200, 3500)\nsns.boxplot(x=train_data.item_cnt_day, color=\"red\", palette=\"Set3\")","911e1f35":"train_data['item_price'].sort_values(ascending=False).head()","f2f46708":"plt.figure(figsize=(10, 5))\ncolor = sns.color_palette(\"hls\", 8)\nplt.xlim(train_data.item_price.min(), train_data.item_price.max()*1.1)\nsns.boxplot(x=train_data.item_price, color=\"red\", palette=\"Set3\")","b3c5b3b7":"train_data = train_data[train_data['item_price'] < 100000]","6ddaffa2":"train_data[train_data['item_price'] < 0]","bad3be7f":"predict_mean_price = train_data[(train_data['date_block_num'] == 4) & (train_data['shop_id'] == 32) & (train_data['item_id'] == 2973) & (train_data['item_price'] > 0)]['item_price'].mean()\npredict_mean_price","39c2c5fc":"train_data.loc[train_data['item_price'] < 0, 'item_price'] = predict_mean_price","7d3253c1":"train_data[(train_data['date_block_num'] == 4) & (train_data['shop_id'] == 32) & (train_data['item_id'] == 2973) & (train_data['item_price'] > 0)]","1acd6275":"unq_train_shops = train_data['shop_id'].unique()\nunq_test_shops = test_data['shop_id'].unique()\nprint(len(unq_train_shops))\nprint(len(unq_test_shops))","f5058352":"set(unq_test_shops).issubset(set(unq_train_shops))","834e2377":"shops_data.head()","d0da77a3":"def listToString(s):  \n    \n    # initialize an empty string \n    str1 = \" \" \n    \n    # return string\n    return (str1.join(s))","7e393f61":"import re\nfor i, shop in enumerate(shops_data['shop_name']):\n    if i == 6:\n        pass\n    else:\n        string = shop\n        cleanString = re.sub(r'[?|$|.|!]',r'',string)\n        splitStr = cleanString.split()[:-1]\n        finalStr = listToString(splitStr)\n        result = shops_data[shops_data['shop_name'].str.contains(finalStr)]\n        if result.shape == (2, 2) or result.shape == (0, 2):\n            print(result)\n            print('-'*50)","e1f2c5d5":"shops_data[shops_data['shop_name'].str.contains('\u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426')]","dc62565f":"train_data.loc[train_data.shop_id == 0, 'shop_id'] = 57\ntest_data.loc[test_data.shop_id == 0, 'shop_id'] = 57\n\ntrain_data.loc[train_data.shop_id == 1, 'shop_id'] = 58\ntest_data.loc[test_data.shop_id == 1, 'shop_id'] = 58\n\ntrain_data.loc[train_data.shop_id == 10, 'shop_id'] = 11\ntest_data.loc[test_data.shop_id == 10, 'shop_id'] = 11","4ad4a071":"shops_data.head()","5f05df9e":"shops_data.loc[shops_data['shop_name'] == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'","73f1b94a":"shops_data['city'] = shops_data['shop_name'].str.split(' ').map(lambda x:x[0])\nshops_data.loc[shops_data['city'] == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops_data.head()","f8a6722b":"city_label_encoder = preprocessing.LabelEncoder()\nshops_data['city_code'] = city_label_encoder.fit_transform(shops_data['city'])","dd0614f1":"shops_data = shops_data[['shop_id','city_code']]\nshops_data.head()","0568927c":"items_data.head()","6f55ffa7":"unq_train_item =  train_data['item_id'].unique()\nunq_test_item =  test_data['item_id'].unique()\nprint(len(unq_train_item))\nprint(len(unq_test_item))","1f9d3a66":"set(unq_test_item).issubset(set(unq_train_item))","133c69f0":"len(set(unq_test_item).difference(set(unq_train_item)))","9f73168a":"cat_in_test_data = items_data.loc[items_data['item_id'].isin(sorted(test_data['item_id'].unique()))].item_category_id.unique()\ncat_in_test_data","b1ffec7e":"cat_not_in_test = cate_data[~cate_data['item_category_id'].isin(cat_in_test_data)].item_category_id.unique()\ncat_not_in_test","c1c2614c":"cate_data.head()","3e6386f7":"splt_cate = cate_data['item_category_name'].str.split('-')\ncate_data['main_cate'] = splt_cate.map(lambda x: x[0].strip())\ncate_data['main_cate_id'] = preprocessing.LabelEncoder().fit_transform(cate_data['main_cate'])\n\ncate_data['sub_cate'] = splt_cate.map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncate_data['sub_cate_id'] = preprocessing.LabelEncoder().fit_transform(cate_data['sub_cate'])\n\ncate_data = cate_data[['item_category_id', 'main_cate_id', 'sub_cate_id']]","5bbaafb1":"cate_data.head()","edfe7f15":"print('Item not in train:', len(set(unq_test_item).difference(set(unq_train_item))))\nprint('Total item in test:', len(test_data['item_id'].unique()))\nprint('Total shop in test:', len(test_data['shop_id'].unique()))","7151c1ee":"ts = time.time()\nmatrix = []\n\nmonths = train_data.date_block_num.unique()\nfor month in months:\n    sales = train_data[train_data.date_block_num == month]\n    unq_shop = sales['shop_id'].unique()\n    unq_item = sales['item_id'].unique()\n    append_arr = np.array(list(product(unq_shop, unq_item, [month])), dtype='int16')\n    matrix.append(append_arr)","ec172c98":"cols = ['shop_id','item_id', 'date_block_num']\nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\nmatrix.head()","506b1d14":"matrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix.sort_values(['date_block_num','shop_id','item_id'],inplace=True)\nmatrix.head()","41a5e9e0":"matrix.shape","32a1b35f":"color = sns.color_palette(\"hls\", 8)\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15, 5))\nsns.countplot(x=matrix['shop_id'], data=matrix, palette=color)","b1aaa5db":"train_data['revenue'] = train_data['item_price'] * train_data['item_cnt_day']\ntrain_data.head()","718eece0":"group_data = train_data.groupby(by=['date_block_num', 'shop_id', 'item_id']).agg({'item_cnt_day': 'sum'})\ngroup_data.columns = ['item_cnt_month']\ngroup_data.reset_index(inplace = True)\ngroup_data.head()","9c69198f":"matrix = pd.merge(matrix, group_data, on=cols, how='left')\nmatrix.head()","9eb718bb":"matrix['item_cnt_month'] = (matrix['item_cnt_month'].fillna(0).clip(0, 20).astype(np.float16))\nmatrix.head()","9c4dc8b6":"matrix.shape","cbbb46f8":"test_data.head()","f4e53bd7":"test_data['date_block_num'] = 34\ntest_data['date_block_num'] = test_data['date_block_num'].astype(np.int8)\ntest_data['shop_id'] = test_data['shop_id'].astype(np.int8)\ntest_data['item_id'] = test_data['item_id'].astype(np.int16)","59dd91d6":"matrix = pd.concat([matrix, test_data], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True)\nmatrix = matrix.drop('ID', axis=1)\nmatrix.head()","f38affc6":"items_data.drop(['item_name'], axis=1, inplace=True)\nitems_data.head()","7cab066c":"cate_data.head()","845d695f":"matrix = pd.merge(matrix, shops_data, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items_data, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cate_data, on=['item_category_id'], how='left')","d0e1e092":"matrix.head()","159a9b34":"matrix['city_code'] = matrix['city_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['main_cate_id'] = matrix['main_cate_id'].astype(np.int8)\nmatrix['sub_cate_id'] = matrix['sub_cate_id'].astype(np.int8)","a40ceeaa":"# train_data['date_block_num'] += 9\n# train_data.head()\nmatrix.head()","670bdec5":"def generate_lag(df, months, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n#     print(tmp)\n    for month in months:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id',col+'_lag_'+str(month)]\n        shifted['date_block_num'] += month\n#         print(month)\n#         print(shifted)\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n                      \n    return df","c3d58b35":"matrix = generate_lag(matrix, [1, 2, 3, 6, 12], 'item_cnt_month')\nmatrix.head()","106d65d7":"group = matrix.groupby(['date_block_num']).agg({'item_cnt_month' : ['mean']})\ngroup.columns = [ 'date_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num'], how='left')\nmatrix['date_avg_item_cnt'] = matrix['date_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_avg_item_cnt')\nmatrix.drop(['date_avg_item_cnt'], axis=1, inplace=True)","ff5d8d32":"group = matrix.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_cnt'] = matrix['date_item_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1,2,3,6,12], 'date_item_avg_item_cnt')\nmatrix.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)","d123de4d":"group = matrix.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_shop_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_avg_item_cnt'] = matrix['date_shop_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1,2,3,6,12], 'date_shop_avg_item_cnt')\nmatrix.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)","27006f77":"group = matrix.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_category_id'], how='left')\nmatrix['date_cat_avg_item_cnt'] = matrix['date_cat_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_cat_avg_item_cnt')\nmatrix.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)","f8e77b64":"group = matrix.groupby(['date_block_num', 'shop_id', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_cat_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'item_category_id'], how='left')\nmatrix['date_shop_cat_avg_item_cnt'] = matrix['date_shop_cat_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_shop_cat_avg_item_cnt')\nmatrix.drop(['date_shop_cat_avg_item_cnt'], axis=1, inplace=True)","266008f2":"group = matrix.groupby(['date_block_num', 'shop_id', 'main_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_type_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'main_cate_id'], how='left')\nmatrix['date_shop_type_avg_item_cnt'] = matrix['date_shop_type_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_shop_type_avg_item_cnt')\nmatrix.drop(['date_shop_type_avg_item_cnt'], axis=1, inplace=True)","90083367":"group = matrix.groupby(['date_block_num', 'shop_id', 'sub_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_subtype_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'sub_cate_id'], how='left')\nmatrix['date_shop_subtype_avg_item_cnt'] = matrix['date_shop_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_shop_subtype_avg_item_cnt')\nmatrix.drop(['date_shop_subtype_avg_item_cnt'], axis=1, inplace=True)","488b0107":"group = matrix.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'city_code'], how='left')\nmatrix['date_city_avg_item_cnt'] = matrix['date_city_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_city_avg_item_cnt')\nmatrix.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)","8b8e5acd":"group = matrix.groupby(['date_block_num', 'item_id', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'item_id', 'city_code'], how='left')\nmatrix['date_item_city_avg_item_cnt'] = matrix['date_item_city_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_item_city_avg_item_cnt')\nmatrix.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)","3260fc24":"group = matrix.groupby(['date_block_num', 'main_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_type_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'main_cate_id'], how='left')\nmatrix['date_type_avg_item_cnt'] = matrix['date_type_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_type_avg_item_cnt')\nmatrix.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)","3916dc0f":"group = matrix.groupby(['date_block_num', 'sub_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_subtype_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'sub_cate_id'], how='left')\nmatrix['date_subtype_avg_item_cnt'] = matrix['date_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_subtype_avg_item_cnt')\nmatrix.drop(['date_subtype_avg_item_cnt'], axis=1, inplace=True)","f605e88e":"matrix.head()","ec6e8055":"train_data.head()","bb301087":"group = train_data.groupby(['item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['item_avg_item_price']\ngroup.reset_index(inplace=True)\nmatrix = pd.merge(matrix, group, on=['item_id'], how='left')\nmatrix['item_avg_item_price'] = matrix['item_avg_item_price'].astype(np.float16)\nmatrix.head()","24ee57b9":"group = train_data.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['date_item_avg_item_price']\ngroup.reset_index(inplace=True)\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_price'] = matrix['date_item_avg_item_price'].astype(np.float16)\nmatrix.head()","66e708b9":"lags = [1,2,3,4,5,6]\nmatrix = generate_lag(matrix, lags, 'date_item_avg_item_price')\nmatrix.head()","5ce4c433":"for i in lags:\n    matrix['delta_price_lag_'+str(i)] = (matrix['date_item_avg_item_price_lag_'+str(i)] - matrix['item_avg_item_price']) \/ matrix['item_avg_item_price']","aac1125b":"def select_trend(row):\n    for i in lags:\n        if row['delta_price_lag_'+str(i)]:\n            return row['delta_price_lag_'+str(i)]\n    return 0","2127cdce":"matrix['delta_price_lag'] = matrix.apply(select_trend, axis=1)\nmatrix['delta_price_lag'] = matrix['delta_price_lag'].astype(np.float16)\nmatrix['delta_price_lag'].fillna(0, inplace=True)\n\nfetures_to_drop = ['item_avg_item_price', 'date_item_avg_item_price']\nfor i in lags:\n    fetures_to_drop += ['date_item_avg_item_price_lag_'+str(i)]\n    fetures_to_drop += ['delta_price_lag_'+str(i)]\n\nmatrix.drop(fetures_to_drop, axis=1, inplace=True)","8b7d599a":"group = train_data.groupby(['date_block_num','shop_id']).agg({'revenue': ['sum']})\ngroup.columns = ['date_shop_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_revenue'] = matrix['date_shop_revenue'].astype(np.float32)\n\ngroup = group.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\ngroup.columns = ['shop_avg_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['shop_id'], how='left')\nmatrix['shop_avg_revenue'] = matrix['shop_avg_revenue'].astype(np.float32)\n\nmatrix['delta_revenue'] = (matrix['date_shop_revenue'] - matrix['shop_avg_revenue']) \/ matrix['shop_avg_revenue']\nmatrix['delta_revenue'] = matrix['delta_revenue'].astype(np.float16)\n\nmatrix = generate_lag(matrix, [1], 'delta_revenue')\n\nmatrix.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)","74d01d42":"matrix['month'] = matrix['date_block_num'] % 12\nmatrix.head()","9f2b273b":"days = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nmatrix['days'] = matrix['month'].map(days).astype(np.int8)\nmatrix.head()","7f8c667d":"cache = {}\nmatrix['item_shop_last_sale'] = -1\nmatrix['item_shop_last_sale'] = matrix['item_shop_last_sale'].astype(np.int8)\n\nfor idx, row in matrix.iterrows():    \n    key = str(row.item_id)+' '+str(row.shop_id)\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        matrix.at[idx, 'item_shop_last_sale'] = row.date_block_num - last_date_block_num\n        cache[key] = row.date_block_num ","a5e61f92":"cache = {}\nmatrix['item_last_sale'] = -1\nmatrix['item_last_sale'] = matrix['item_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = row.item_id\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        if row.date_block_num>last_date_block_num:\n            matrix.at[idx, 'item_last_sale'] = row.date_block_num - last_date_block_num\n            cache[key] = row.date_block_num         ","51e5de43":"matrix['item_shop_first_sale'] = matrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nmatrix['item_first_sale'] = matrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')","a8b2ace9":"matrix = matrix[matrix.date_block_num > 11]","5e8bd5a6":"def fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)","3919e8f0":"matrix.to_pickle('data.pkl')","c96c8870":"gc.collect();","25dfb3f5":"data = pd.read_pickle('data.pkl')","2aaf421a":"data = data[[\n    'date_block_num',\n    'shop_id',\n    'item_id',\n    'item_cnt_month',\n    'city_code',\n    'item_category_id',\n    'main_cate_id',\n    'sub_cate_id',\n    'item_cnt_month_lag_1',\n    'item_cnt_month_lag_2',\n    'item_cnt_month_lag_3',\n    'item_cnt_month_lag_6',\n    'item_cnt_month_lag_12',\n    'date_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_2',\n    'date_item_avg_item_cnt_lag_3',\n    'date_item_avg_item_cnt_lag_6',\n    'date_item_avg_item_cnt_lag_12',\n    'date_shop_avg_item_cnt_lag_1',\n    'date_shop_avg_item_cnt_lag_2',\n    'date_shop_avg_item_cnt_lag_3',\n    'date_shop_avg_item_cnt_lag_6',\n    'date_shop_avg_item_cnt_lag_12',\n    'date_cat_avg_item_cnt_lag_1',\n    'date_shop_cat_avg_item_cnt_lag_1',\n    'date_city_avg_item_cnt_lag_1',\n    'date_item_city_avg_item_cnt_lag_1',\n    'delta_price_lag',\n    'month',\n    'days',\n    'item_shop_last_sale',\n    'item_last_sale',\n    'item_shop_first_sale',\n    'item_first_sale',\n]]","7f118684":"X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","53ea9aad":"model = XGBRegressor(\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.3,    \n    seed=42)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)","6f554d94":"Y_pred = model.predict(X_valid).clip(0, 20)\nY_test = model.predict(X_test).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test_data.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('boost_submission.csv', index=False)\n\n# save predictions for an ensemble\npickle.dump(Y_pred, open('xgb_train.pickle', 'wb'))\npickle.dump(Y_test, open('xgb_test.pickle', 'wb'))","280b63b2":"def plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)","6638da62":"plot_features(model, (10,14))","dcf4a3e1":"### item","c4458473":"### shop ve item_category_id","4152e7a2":"#\u00dcr\u00fcn fiyat\u0131n\u0131n ayk\u0131r\u0131 de\u011ferlerini inceleyelim.","fe5baac9":"### item ve city_code","2d3c1d78":"### shop ve main_cate_id","1420eb84":"Bir aydaki g\u00fcn say\u0131s\u0131","0f29e5bd":"### shop ve sub_cate_id","dfc6495e":"### sub_cate_id","10e2e243":"Tahmin","edc9fd02":"### shop","087f247b":"### main_cate_id","11881737":"### city_code","28791d18":"### item_category_id"}}