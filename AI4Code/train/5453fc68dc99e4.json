{"cell_type":{"68c9d836":"code","6834a6b1":"code","dec26ca4":"code","5011abca":"code","a6503d0e":"code","81f3853b":"code","68141f7f":"code","6f56c1ed":"code","93bb098e":"code","2b51fa03":"code","6571404a":"code","7ce7b7b3":"code","94f89f9a":"code","66d715a4":"code","5c851826":"code","e5c73d65":"code","6d472ffd":"code","01c67227":"code","23a08615":"code","0a6c6f5a":"code","9fbde76a":"code","efd4f5a4":"code","d4dabc6f":"code","611bed91":"code","65d2763e":"code","deb8e5fc":"code","317c9d4c":"code","b9ef11f0":"code","44d03c8e":"code","beb3adcc":"code","2609037b":"code","be11ab56":"code","f7b46be1":"code","a011f48d":"code","e647adb4":"code","d8efcc0e":"code","e8a1c237":"code","07a7f262":"code","d5246279":"code","708316f4":"code","27c7fda8":"code","d0e32856":"code","be6f6d21":"code","6f5bc1ae":"code","31ec06a5":"code","db57158d":"code","95280bea":"code","9212b210":"code","0e281a2f":"code","67b1a748":"code","93e971fd":"code","6b80493f":"code","32dc0ba8":"code","9ccf9bae":"code","9329d989":"code","b37568e7":"code","dedb7f19":"code","5f94ffa2":"markdown","a44922e3":"markdown","52777f43":"markdown","7f4f23c9":"markdown","81b9c8be":"markdown","cc564e64":"markdown","e738127d":"markdown","bc4561cc":"markdown","799b3242":"markdown","01593353":"markdown","da755266":"markdown","8e153d8a":"markdown","703c9808":"markdown","2197f329":"markdown","36c148fc":"markdown","34e3a6a2":"markdown","c3306826":"markdown","53145e43":"markdown","2aa2d8b2":"markdown","d4cecdb4":"markdown","2438d1c7":"markdown","ec1a5bf9":"markdown","782651ea":"markdown","11c70a99":"markdown"},"source":{"68c9d836":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nsns.set_theme()","6834a6b1":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndata = df_train.append(df_test)","dec26ca4":"df_train.head()","5011abca":"df_train.isnull().sum()","a6503d0e":"df_test.isnull().sum()","81f3853b":"df_train.duplicated().sum()","68141f7f":"print(\"Training set size\",len(df_train))\nprint(\"Test set size\",len(df_train))","6f56c1ed":"data","93bb098e":"g = sns.FacetGrid(data[:891],col=\"Pclass\")\ng.map_dataframe(sns.pointplot,x=\"Sex\",y=\"Survived\")","2b51fa03":"g = sns.FacetGrid(data[:891],col=\"Pclass\",hue=\"Survived\")\ng.map_dataframe(sns.kdeplot,x=\"Fare\")\ng.add_legend()","6571404a":"g = sns.FacetGrid(data[:891],col=\"Sex\",hue=\"Survived\")\ng.map_dataframe(sns.histplot,x=\"Age\")\ng.add_legend()","7ce7b7b3":"g = sns.FacetGrid(data[:891],col=\"Sex\")\ng.map_dataframe(sns.pointplot,x=\"Embarked\",y=\"Survived\")\ng.add_legend()","94f89f9a":"g = sns.FacetGrid(data[:891],col=\"Embarked\")\ng.map_dataframe(sns.histplot,x=\"Age\",y=\"Survived\")","66d715a4":"data[\"family\"] = data[\"Parch\"] + data[\"SibSp\"]\ndata = data.drop(columns=[\"Parch\",\"SibSp\"])  #delete  Parch and Sibsp\n#-------------------------------------------------\ng = sns.FacetGrid(data[:891],col=\"Sex\")\ng.map_dataframe(sns.pointplot,x=\"family\",y=\"Survived\")","5c851826":"from sklearn.impute import KNNImputer\nknn = KNNImputer(n_neighbors=3)\ndata[\"Age\"] = knn.fit_transform(data[\"Age\"].values.reshape(-1,1)).ravel()","e5c73d65":"data[\"Fare\"] = data[\"Fare\"].fillna(data[:891][\"Fare\"].mode()[0])\ndata[\"Embarked\"] = data[\"Embarked\"].fillna(data[:891][\"Embarked\"].mode()[0])","6d472ffd":"data.head()","01c67227":"import re\ndata[\"Ticket_num\"] = data[\"Ticket\"].apply(lambda x:\"\".join(re.findall(r\"\\d+\",x)))\ndata[\"Name_last\"] = data[\"Name\"].apply(lambda x:x.split(\",\",1)[0])","23a08615":"#\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0.5\uff0c\u6216\u8005-1\uff0c\u53ea\u8981\u533a\u522b\u4e8e0\u548c1\u5373\u53ef\u3002\u7531\u4e8e0\u548c1\u7684\u5747\u503c\u662f0.5\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u7f6e\u4e3a0.5\n#\u901a\u8fc7\u540d\u5b57\u548c\u7968\u4ef7\u786e\u5b9a\u5bb6\u5ead\nDef = 0.5\ndata[\"family_survived\"] = Def\n\n#\u901a\u8fc7\u540d\u5b57\u548c\u7968\u4ef7\u786e\u5b9a\u5bb6\u5ead\nda_group = data.groupby([\"Name_last\",\"Fare\"])\nfor group,all_data in da_group:\n    if (len(all_data) >= 1): #\u662f\u5426\u662f\u4e00\u4e2a\u5bb6\u5ead\u3002Is it a family\uff1f\n            for index, row in all_data.iterrows():\n                if (row['family_survived'] == 0) or (row['family_survived']== 0.5):\n                    surviv_max = all_data.drop(index)['Survived'].max()\n                    surviv_min = all_data.drop(index)['Survived'].min()   #\u5220\u9664\u672c\u4eba\u7684\u8bb0\u5f55\uff0c\u67e5\u770b\u5bb6\u5ead\u5176\u4ed6\u4eba\u7684\u751f\u5b58\u72b6\u51b5\u3002Delete my records and view the living conditions of others in the family.\n                    ids = row['PassengerId']\n                    if (surviv_max == 1.0):\n                        data.loc[data['PassengerId'] == ids, 'family_survived'] = 1\n                    elif (surviv_min==0.0):\n                        data.loc[data['PassengerId'] == ids, 'family_survived'] = 0\n\nprint(\"family survival:\", data.loc[data['family_survived'] == 1].shape[0])\n","0a6c6f5a":"#\u901a\u8fc7\u540d\u5b57\u548c\u7968\u53f7\u786e\u5b9a\u5bb6\u5ead\nda_group = data[[\"PassengerId\",\"Name_last\",\"Survived\",\"family\",\"Fare\",\"Ticket_num\"]].groupby([\"Name_last\",\"Ticket_num\"])\nfor group,all_data in da_group:\n    if (len(all_data) >= 1): #\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a\u5bb6\u5ead\u3002Is it a family\uff1f\n        for index, row in all_data.iterrows():\n            surviv_max = all_data.drop(index)['Survived'].max()\n            surviv_min = all_data.drop(index)['Survived'].min()   #\u5220\u9664\u672c\u4eba\u7684\u8bb0\u5f55\uff0c\u67e5\u770b\u5bb6\u5ead\u5176\u4ed6\u4eba\u7684\u751f\u5b58\u72b6\u51b5\u3002Delete my records and view the living conditions of others in the family.\n            ids = row['PassengerId']\n            if (surviv_max == 1.0):\n                data.loc[data['PassengerId'] == ids, 'family_survived'] = 1\n            elif (surviv_min==0.0):\n                data.loc[data['PassengerId'] == ids, 'family_survived'] = 0\n\nprint(\"family survival:\", data.loc[data['family_survived'] == 1].shape[0])","9fbde76a":"#\u901a\u8fc7\u7968\u53f7\u76f8\u540c\u786e\u5b9a\u5bb6\u5ead\nda_group = data.groupby([\"Ticket_num\"])\nfor group,all_data in da_group:\n    if (len(all_data) >= 1): #\u662f\u5426\u662f\u4e00\u4e2a\u5bb6\u5ead\u3002Is it a family\uff1f\n            for index, row in all_data.iterrows():\n                if (row['family_survived'] == 0) or (row['family_survived']== 0.5):\n                    surviv_max = all_data.drop(index)['Survived'].max()\n                    surviv_min = all_data.drop(index)['Survived'].min()   #\u5220\u9664\u672c\u4eba\u7684\u8bb0\u5f55\uff0c\u67e5\u770b\u5bb6\u5ead\u5176\u4ed6\u4eba\u7684\u751f\u5b58\u72b6\u51b5\u3002Delete my records and view the living conditions of others in the family.\n                    ids = row['PassengerId']\n                    if (surviv_max == 1.0):\n                        data.loc[data['PassengerId'] == ids, 'family_survived'] = 1\n                    elif (surviv_min==0.0):\n                        data.loc[data['PassengerId'] == ids, 'family_survived'] = 0\n\nprint(\"family survival:\", data.loc[data['family_survived'] == 1].shape[0])","efd4f5a4":"data = data.drop(columns=[\"Name\",\"Ticket\",\"Ticket_num\",\"Name_last\"])","d4dabc6f":"data.head()","611bed91":"data[\"Age\"] = pd.qcut(data[\"Age\"],7)","65d2763e":"data[\"Fare\"] = pd.qcut(data[\"Fare\"],7)","deb8e5fc":"data[\"Age\"]","317c9d4c":"data[\"Cabin\"] = data[\"Cabin\"].apply(lambda x:str(x)[0])","b9ef11f0":"from sklearn.preprocessing import LabelEncoder,StandardScaler\n# col = [\"Sex\",\"Age\",\"Fare\",\"Embarked\",\"Cabin\"]  for\u5faa\u73af\u7684\u65b9\u5f0f\u51fa\u73b0\u9519\u8bef\u3002\u6362\u4e00\u79cd\u529e\u6cd5\u3002\n# for i in col:\n#     la = LabelEncoder()\n#     la.fit(data.loc[:,i].values.reshape(-1, 1))\n#     data[i] = la.transform(data.loc[:,i].values.reshape(-1, 1))\nla = LabelEncoder()\nla.fit(data[\"Sex\"])\ndata[\"Sex\"] = la.transform(data[\"Sex\"])\n\nla.fit(data[\"Age\"])\ndata[\"Age\"] = la.transform(data[\"Age\"])\n\nla.fit(data[\"Fare\"])\ndata[\"Fare\"] = la.transform(data[\"Fare\"])\n\nla.fit(data[\"Embarked\"])\ndata[\"Embarked\"] = la.transform(data[\"Embarked\"])\n\nla.fit(data[\"Cabin\"])\ndata[\"Cabin\"] = la.transform(data[\"Cabin\"])\n\nall_col = [\"Sex\",\"Age\",\"Fare\",\"Embarked\",\"Pclass\",\"family\",\"family_survived\",\"Cabin\"]\nfor i in all_col:\n    std = StandardScaler()\n    std.fit(data[:891].loc[:,i].values.reshape(-1, 1)) #traindata\n    data[i] = std.transform(data.loc[:,i].values.reshape(-1, 1))","44d03c8e":"data.head()","beb3adcc":"df_train = data[:891]\ndf_test = data[891:]","2609037b":"df_train[\"Survived\"].value_counts(normalize=True)","be11ab56":"from sklearn.model_selection import StratifiedKFold,cross_val_score,RandomizedSearchCV,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier,StackingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score,recall_score,precision_score,roc_auc_score\nfrom xgboost import XGBClassifier","f7b46be1":"target = df_train.iloc[:,1]\nfeature = df_train.iloc[:,2:]\nstk = StratifiedKFold(n_splits=5,random_state=123,shuffle=True)\nfor train_index,test_index in stk.split(feature,target):\n    x_train,y_train = feature.iloc[train_index],target.iloc[train_index]\n    x_test,y_test = feature.iloc[test_index],target.iloc[test_index]","a011f48d":"#Deault\ngbdt = GradientBoostingClassifier(random_state=123)\ngbdt.fit(x_train,y_train)\ngbdt_pre = gbdt.predict(x_test)\nprint(\"gbdt recall:\",round(recall_score(y_test,gbdt_pre),2))\nprint(\"gbdt precision:\",round(precision_score(y_test,gbdt_pre),2))\nprint(\"gbdt f1_score:\",round(f1_score(y_test,gbdt_pre),2))\nprint(\"gbdt rou_auc_score:\",round(roc_auc_score(y_test,gbdt_pre),2))","e647adb4":"params = {\n    \n    \"max_depth\":(2,8),\n    \"learning_rate\":(0.01,0.1),\n    \"min_samples_leaf\":(1,3),\n    \"n_estimators\":(100,300)\n}\ngbdt_gd = RandomizedSearchCV(gbdt,param_distributions=params,cv=5,scoring=\"roc_auc\")\ngbdt_gd.fit(x_train,y_train)\nprint(gbdt_gd.best_score_)\nprint(gbdt_gd.best_estimator_)\nprint(gbdt_gd.best_params_)","d8efcc0e":"gbdt_pre = gbdt_gd.predict(x_test)\nprint(\"gbdt_gd recall:\",round(recall_score(y_test,gbdt_pre),2))\nprint(\"gbdt_gd precision:\",round(precision_score(y_test,gbdt_pre),2))\nprint(\"gbdt_gd f1_score:\",round(f1_score(y_test,gbdt_pre),2))\nprint(\"gbdt_gd rou_auc_score:\",round(roc_auc_score(y_test,gbdt_pre),2))","e8a1c237":"#Deault\nadaboost = AdaBoostClassifier(random_state=123)\nadaboost.fit(x_train,y_train)\nadaboost_pre = gbdt.predict(x_test)\nprint(\"adaboost recall:\",round(recall_score(y_test,adaboost_pre),2))\nprint(\"adaboost precision:\",round(precision_score(y_test,adaboost_pre),2))\nprint(\"adaboost f1_score:\",round(f1_score(y_test,adaboost_pre),2))\nprint(\"adaboost rou_auc_score:\",round(roc_auc_score(y_test,adaboost_pre),2))","07a7f262":"params = {\n    \n    \"learning_rate\":(0.01,0.2),\n    \"n_estimators\":(50,300)\n}\nada_gd = RandomizedSearchCV(adaboost,param_distributions=params,cv=5,scoring=\"roc_auc\")\nada_gd.fit(x_train,y_train)\nprint(ada_gd.best_score_)\nprint(ada_gd.best_estimator_)\nprint(ada_gd.best_params_)","d5246279":"ada_pre = ada_gd.predict(x_test)\nprint(\"ada_gd recall:\",round(recall_score(y_test,ada_pre),2))\nprint(\"ada_gd precision:\",round(precision_score(y_test,ada_pre),2))\nprint(\"ada_gd f1_score:\",round(f1_score(y_test,ada_pre),2))\nprint(\"ada_gd rou_auc_score:\",round(roc_auc_score(y_test,ada_pre),2))","708316f4":"rf = RandomForestClassifier(random_state=123)\nrf.fit(x_train,y_train)\nrf_pre = rf.predict(x_test)\nprint(\"rf recall:\",round(recall_score(y_test,rf_pre),2))\nprint(\"rf precision:\",round(precision_score(y_test,rf_pre),2))\nprint(\"rf f1_score:\",round(f1_score(y_test,rf_pre),2))\nprint(\"rf rou_auc_score:\",round(roc_auc_score(y_test,rf_pre),2))","27c7fda8":"params = {\n    \"max_depth\":(3,10),\n    \"n_estimators\":(50,300),\n    \"min_samples_leaf\":(1,5),\n    \"min_samples_split\":(0.1,0.2),\n    \"min_impurity_decrease\":(0,0.2),\n}\nrf_gd = RandomizedSearchCV(rf,param_distributions=params,cv=5,scoring=\"roc_auc\")\nrf_gd.fit(x_train,y_train)\nprint(rf_gd.best_score_)\nprint(rf_gd.best_estimator_)\nprint(rf_gd.best_params_)","d0e32856":"rfgd_pre = rf_gd.predict(x_test)\nprint(\"rf_gd recall:\",round(recall_score(y_test,rfgd_pre),2))\nprint(\"rf_gd precision:\",round(precision_score(y_test,rfgd_pre),2))\nprint(\"rf_gd f1_score:\",round(f1_score(y_test,rfgd_pre),2))\nprint(\"rf_gd rou_auc_score:\",round(roc_auc_score(y_test,rfgd_pre),2))","be6f6d21":"knn = KNeighborsClassifier()\nknn.fit(x_train,y_train)\nknn_pre = knn.predict(x_test)\nprint(\"knn recall:\",round(recall_score(y_test,knn_pre),2))\nprint(\"knn precision:\",round(precision_score(y_test,knn_pre),2))\nprint(\"knn f1_score:\",round(f1_score(y_test,knn_pre),2))\nprint(\"knn rou_auc_score:\",round(roc_auc_score(y_test,knn_pre),2))","6f5bc1ae":"params = {'algorithm': ['auto'], 'weights': ['uniform', 'distance'], 'leaf_size': list(range(1,50,5)), \n               'n_neighbors': [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22]}\nknn_gd=GridSearchCV(knn, param_grid = params, verbose=True, \n                cv=10, scoring = \"roc_auc\")\nknn_gd.fit(x_train, y_train)\nprint(knn_gd.best_score_)\nprint(knn_gd.best_estimator_)\nprint(knn_gd.best_params_)","31ec06a5":"knngd_pre = knn_gd.predict(x_test)\nprint(\"knngd_pre recall:\",round(recall_score(y_test,knngd_pre),2))\nprint(\"knngd_pre precision:\",round(precision_score(y_test,knngd_pre),2))\nprint(\"knngd_pre f1_score:\",round(f1_score(y_test,knngd_pre),2))\nprint(\"knngd_pre rou_auc_score:\",round(roc_auc_score(y_test,knngd_pre),2))","db57158d":"#Default\nxgb = XGBClassifier(random_state=123,eval_metric=\"logloss\",use_label_encoder=False)\nxgb.fit(x_train,y_train)\nxgb_pre = xgb.predict(x_test)\nprint(\"xgb recall:\",round(recall_score(y_test,xgb_pre),2))\nprint(\"xgb precision:\",round(precision_score(y_test,xgb_pre),2))\nprint(\"xgb f1_score:\",round(f1_score(y_test,xgb_pre),2))\nprint(\"xgb rou_auc_score:\",round(roc_auc_score(y_test,xgb_pre),2))","95280bea":"params ={\n    \"max_depth\":(2,8),\n    \"n_estimators\":(100,400),\n    \"learning_rate\":(0.5,1),\n    \"gamma\":(0,0.2),\n    \"reg_lambda\":(0.1,0.3),\n    \"reg_alpha\":(0.1,0.3),\n    \"colsample_bytree\":(0.8,1),\n}\n\nxgb_gd = RandomizedSearchCV(xgb,param_distributions=params,cv=5,scoring=\"roc_auc\")\nxgb_gd.fit(x_train,y_train)\nprint(xgb_gd.best_score_)\nprint(xgb_gd.best_estimator_)\nprint(xgb_gd.best_params_)","9212b210":"xgbgd_pre = xgb_gd.predict(x_test)\nprint(\"xgb_gd recall:\",round(recall_score(y_test,xgbgd_pre),2))\nprint(\"xgb_gd precision:\",round(precision_score(y_test,xgbgd_pre),2))\nprint(\"xgb_gd f1_score:\",round(f1_score(y_test,xgbgd_pre),2))\nprint(\"xgb_gd rou_auc_score:\",round(roc_auc_score(y_test,xgbgd_pre),2))","0e281a2f":"logstic = LogisticRegression(random_state=123)\nlogstic.fit(x_train,y_train)\nlogstic_pre = logstic.predict(x_test)\nprint(\"logstic recall:\",round(recall_score(y_test,logstic_pre),2))\nprint(\"logstic precision:\",round(precision_score(y_test,logstic_pre),2))\nprint(\"logstic f1_score:\",round(f1_score(y_test,logstic_pre),2))\nprint(\"logstic rou_auc_score:\",round(roc_auc_score(y_test,logstic_pre),2))","67b1a748":"prams = {\n    \n    \"C\":[0.1,0.2,0.3,0.4,0.5],\n    \"solver\":[\"newton-cg\",\"lbfgs\",\"sag\",\"saga\"]\n}\n\nlogstic_gd=GridSearchCV(logstic, param_grid = prams, verbose=True, \n                cv=10, scoring = \"roc_auc\")\nlogstic_gd.fit(x_train, y_train)\nprint(logstic_gd.best_score_)\nprint(logstic_gd.best_estimator_)\nprint(logstic_gd.best_params_)","93e971fd":"logsticgd_pre = logstic_gd.predict(x_test)\nprint(\"logstic recall:\",round(recall_score(y_test,logsticgd_pre),2))\nprint(\"logstic precision:\",round(precision_score(y_test,logsticgd_pre),2))\nprint(\"logstic f1_score:\",round(f1_score(y_test,logsticgd_pre),2))\nprint(\"logstic rou_auc_score:\",round(roc_auc_score(y_test,logsticgd_pre),2))","6b80493f":"df_t = df_test.iloc[:,2:]\nids = df_test.iloc[:,0]\ndf_t","32dc0ba8":"# from sklearn.ensemble import VotingClassifier\n# esti = [(\"gbdt\",gbdt_gd),(\"rf\",rf_gd),(\"adaboost\",ada_gd),(\"knn\",knn_gd),(\"xgb\",xgb_gd)]\n# softvoting = VotingClassifier(estimators=esti,voting=\"soft\")\n# softvoting.fit(x_train, y_train)\n# softvoting_pre = softvoting.predict(x_test)\n# print(\"softvoting recall:\",round(recall_score(y_test,softvoting_pre),2))\n# print(\"softvoting precision:\",round(precision_score(y_test,softvoting_pre),2))\n# print(\"softvoting f1_score:\",round(f1_score(y_test,softvoting_pre),2))\n# print(\"softvoting rou_auc_score:\",round(roc_auc_score(y_test,softvoting_pre),2))","9ccf9bae":"# voting = VotingClassifier(estimators=esti,voting=\"hard\")\n# voting.fit(x_train, y_train)\n# voting_pre = voting.predict(x_test)\n# print(\"hard voting recall:\",round(recall_score(y_test,voting_pre),2))\n# print(\"hard voting precision:\",round(precision_score(y_test,voting_pre),2))\n# print(\"hard voting f1_score:\",round(f1_score(y_test,voting_pre),2))\n# print(\"hard voting rou_auc_score:\",round(roc_auc_score(y_test,voting_pre),2))\n\n#\u786c\u6295\u7968\u7684\u6548\u679c\u4e0d\u5982\u8f6f\u6295\u7968","9329d989":"# esti = [(\"gbdt\",gbdt_gd),(\"rf\",rf_gd),(\"adaboost\",ada_gd),(\"knn\",knn_gd),(\"xgb\",xgb_gd)]\n# stack = StackingClassifier(estimators=esti,final_estimator=logstic_gd,cv=5)\n# stack.fit(x_train, y_train)\n# stack_pre = voting.predict(x_test)\n# print(\"stack recall:\",round(recall_score(y_test,stack_pre),2))\n# print(\"stack precision:\",round(precision_score(y_test,stack_pre),2))\n# print(\"stack f1_score:\",round(f1_score(y_test,stack_pre),2))\n# print(\"stack rou_auc_score:\",round(roc_auc_score(y_test,stack_pre),2))\n\n#Stack\u4e0d\u5982\u8f6f\u6295\u7968","b37568e7":"sub = pd.DataFrame()\nsub[\"PassengerId\"] = ids\nsub[\"Survived\"] = knn_gd.predict(df_t)\nsub[\"Survived\"] = sub[\"Survived\"].astype(int)\nsub","dedb7f19":"sub.to_csv(\"submission.csv\",index=None)\nprint(\"End!\")","5f94ffa2":"### 2.4 Cabin","a44922e3":"# 2 Feature engineering \ud83d\udc4d\n<div style=\"color: #fff7f7;\n           display:fill;\n           border-radius:10px;\n           border-style: solid;\n           border-color:#424949;\n           text-align:center;\n           background-color:#003a6c ;\n           font-size:15px;\n           letter-spacing:0.5px;\n           padding: 0.7em;\n           text-align:left\">\n<li> Cabin\u8be5\u5217\u7f3a\u5931\u6bd4\u4f8b\u8fc7\u9ad8\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u9009\u62e9\uff1a\u8003\u8651\u5220\u9664\uff0c\u6216\u8005\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u7279\u5f81\uff0c\u8868\u793a\u662f\u5426\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u6216\u8005\u5728\u539f\u6709\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u7f3a\u5931\u503c\u6807\u8bc6\u4e3aMiss\u3002\n<li> Name\u5217\u5f88\u6709\u7528\uff0c\u4e00\u65b9\u9762\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u6bcf\u4e2a\u4eba\u7684\u79f0\u8c13\uff0c\u6839\u636e\u79f0\u8c13\u6765\u586b\u5145\u5e74\u9f84\u7f3a\u5931\u503c\uff0c\u53e6\u4e00\u65b9\u9762\u63d0\u53d6\u6bcf\u4e2a\u4eba\u7684\u540d\u5b57\uff0c\u8ddf\u540e\u7eed\u7684\u7968\u53f7\/\u7968\u4ef7\u8054\u7cfb\u8d77\u6765\uff0c\u53ef\u4ee5\u786e\u5b9a\u90e8\u5206\u4eba\u7684\u5bb6\u5ead\u5b58\u6d3b\u60c5\u51b5\u3002\n<li> \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u5e74\u9f84\/\u7968\u4ef7\u8fdb\u884c\u5206\u7bb1\uff0c\u81f3\u4e8e\u9009\u62e9\u5206\u7bb1\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u53c2\u8003\u7b49\u5bbd\/\u7b49\u9891\u5206\u7bb1\u3002\u5982\u679c\u662f\u4f7f\u7528\u8ddf\u8ddd\u79bb\u76f8\u5173\u7684\u7b97\u6cd5\uff0c\u5206\u7bb1\u540e\u4f1a\u5f88\u6709\u7528\uff0c\u6216\u8005\u5bf9\u7279\u5f81\u8fdb\u884c\u7f29\u653e\u3002<hr>\n<li>The percentage of missing values in Cabin column is too high. We have three options: consider deleting, or adding a new feature to indicate whether there are missing values, or mark the missing value as Miss on the original basis.\n<li>The Name column is very useful. On the one hand, we can extract the title of each person and fill in missing age values based on the title. On the other hand, we can extract the name of each person and link it with the subsequent ticket number\/fare to determine the survival of some people\u2019s families. condition.\n<li>We can consider classifying the age\/fare. As for the type of classification, please refer to the equal width\/equal frequency classification. If you are using a distance-related algorithm, it will be useful after binning or scaling features.\n<\/div>","52777f43":"### 2.2 Name and Ticket---add family_survived","7f4f23c9":"- Stacking","81b9c8be":"- \u767b\u8239\u6e2f\u53e3\u7684\u751f\u5b58\u6bd4\u4f8b\u6bd4\u8f83\u5e73\u7f13\n- The survival rate at the embarkation port is relatively flat","cc564e64":"### 2.3 Age and Fare","e738127d":"<div style=\"color: #fff7f7;\n           display:fill;\n           border-radius:10px;\n           border-style: solid;\n           border-color:#424949;\n           text-align:center;\n           background-color:#003a6c ;\n           font-size:15px;\n           letter-spacing:0.5px;\n           padding: 0.7em;\n           text-align:left\">\n    <h1 style=\"text-align:center;font-weight: 20px; color:White;\">\n       Result\ud83e\uddd0<\/h1>\n    <li>\u5f53\u6211\u5220\u9664Cabin\u65f6\uff0c\u63d0\u4ea4\u7684\u6a21\u578b\u5206\u6570\u662f0.79\uff0c\u5f53\u6211\u52a0\u5165Cabin\u65f6\uff0c\u5c06\u7f3a\u5931\u503c\u8868\u793a\u4e3aN,\u63d0\u4ea4\u7684\u6a21\u578b\u5206\u6570\u8fbe\u5230\u4e860.80382\u3002\n    <li>\u5f53\u6211\u5c06\u5e74\u9f84\u548c\u7968\u4ef7\u5206\u7bb1\u8c03\u6574\u4e3a5\u4e2a\u65f6\uff0c\u6a21\u578b\u5206\u6570\u4e0b\u964d\u52300.78\u3002\u7136\u800c\u5f53\u6211\u8c03\u6574\u4e3a7\u4e2a\u5206\u7bb1\u65f6\uff0c\u6a21\u578b\u5206\u6570\u8fbe\u52300.80382\u3002\n    <li>\u8f6f\u6295\u7968\u4ee5\u53ca\u786c\u6295\u7968\u8fd8\u6709\u6a21\u578b\u5806\u53e0Stack\u7684\u65b9\u5f0f\uff0c\u6548\u679c\u4e0d\u5982KNN\uff0c\u8f6f\u6295\u7968\u7b49\u65b9\u5f0f\u8fbe\u5230\u7684\u5206\u6570\u662f0.78\u3002\u4f46\u662f\u5728\u8f6f\u6295\u7968\u4e2d\u5220\u9664\u903b\u8f91\u56de\u5f52\u7684\u6a21\u578b\uff0c\u63d0\u4ea4\u7684\u5206\u6570\u53ef\u4ee5\u8fbe\u52300.80143\u3002<hr>\n    <li>When I deleted Cabin, the submitted model score was 0.79. When I joined Cabin, the missing value was expressed as N, and the submitted model score reached 0.80382.\n    <li>When I adjusted the age and fare bins to 5, the model score dropped to 0.78. However, when I adjusted to 7 bins, the model score reached 0.80382.\n    <li>Soft voting and hard voting, as well as the way of stacking models, are not as effective as KNN, and the score achieved by soft voting is 0.78. But if the logistic regression model is deleted in the soft voting, the submitted score can reach 0.80143.<hr>\n    \u53ef\u80fd\u9700\u8981\u6539\u8fdb\u7684\u5730\u65b9\uff1a\n<li>\u9488\u5bf9\u5e74\u9f84\u7f3a\u5931\u503c\u586b\u5145\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9636\u7ea7\u7279\u5f81\u6216\u8005\u63d0\u53d6\u540d\u5b57\u7279\u5f81\u4e2d\u7684\u79f0\u8c13\uff0c\u5bf9\u5e74\u9f84\u6765\u8fdb\u884c\u7f3a\u5931\u503c\u586b\u5145\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u66b4\u529b\u7684KNN\u586b\u8865\u7684\u65b9\u5f0f\u3002\n<li>\u5bb6\u5ead\u6b7b\u4ea1\u7279\u5f81\uff1a\u6211\u4eec\u53ef\u4ee5\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7Ticket\u548cFare\u4ee5\u53caName-last\uff0c\u6216\u8bb8\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528Cabin\u6765\u7efc\u5408\u5224\u65ad\uff0c\u6bd5\u7adf\u76f8\u4f34\u51fa\u6e38\u7684\u5bb6\u5ead\uff0c\u80af\u5b9a\u4e5f\u4f1a\u4ece\u76f8\u540c\u7684Embarked\u767b\u8239\u3002<hr>\nPossible areas for improvement:\n<li> For the filling of missing values for age, we can consider using class features or extracting titles from name features to fill in missing values for age instead of using violent KNN filling.\n<li>Family death characteristics: We can not only use Ticket, Fare and Name-last, but perhaps we can also use Cabin to make a comprehensive judgment. After all, families traveling with us will definitely board the same Embarked.\n<\/div>","bc4561cc":"#### 3.2 Adaboost","799b3242":"### 3.6 Logistic","01593353":"### 3.5 XGboost","da755266":"# 1 EDA\n<div style=\"color: #fff7f7;\n           display:fill;\n           border-radius:10px;\n           border-style: solid;\n           border-color:#424949;\n           text-align:center;\n           background-color:#003a6c ;\n           font-size:15px;\n           letter-spacing:0.5px;\n           padding: 0.7em;\n           text-align:left\">\n<center style=\"font-size:30px\">Some things that need to be explained\ud83c\udf45<\/center>\n<hr>\u7279\u5f81\u5904\u7406\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a\n<li>1.\u5e74\u9f84\u548c\u7968\u4ef7\u7684\u5206\u7bb1\u6570\u91cf\u8981\u5c3d\u91cf\u591a\u4e00\u70b9\u3002\n<li>2.\u901a\u8fc7\u540d\u5b57\/\u7968\u4ef7\u4e24\u4e2a\u7279\u5f81\u8fdb\u884c\u914d\u5408\uff0c\u6784\u5efa\u4e00\u4e2a\u8868\u793a\u5bb6\u5ead\u6b7b\u4ea1\u72b6\u6001\u7684\u7279\u5f81\u3002\n<li>3.Cabin\u5217\u5e94\u8be5\u7559\u4e0b\uff0c\u7528\u5176\u4ed6\u503c\u6807\u8bc6\u7f3a\u5931\u503c\uff0c\u5b83\u663e\u8457\u7684\u63d0\u5347\u4e860.2\u5206\u3002<hr>\n<li>1. The number of bins for age and fare should be as large as possible.\n<li>2. The two features of name\/fare are combined to construct a feature that represents the death state of the family.\n<li>3. The Cabin column should be left, and other values are used to identify missing values, which significantly improves by 0.2 points.\n<\/div>","8e153d8a":"- \u6211\u4eec\u6ce8\u610f\u5230\uff0c1\u9636\u7ea7\u7684\u4eba\u7968\u4ef7\u5206\u5e03\u6bd4\u8f83\u5e73\u7f13\uff0c\u4e14\u5b58\u5728\u5f88\u9ad8\u7684\u7968\u4ef7\uff0c\u8fd9\u8bf4\u660e\u7968\u4ef7\u5b58\u5728\u4e25\u91cd\u7684\u53f3\u504f\u3002\n- We have noticed that the fare distribution of class 1 people is relatively flat, and there are high fares, which shows that the fares are seriously skewed to the right.","703c9808":"- C\u6e2f\u53e3\u5b58\u6d3b\u4e0b\u6765\u7684\u4eba\u96c6\u4e2d\u572820\u5c81\u5de6\u53f3\u3002\n- S\u6e2f\u53e3\u6b7b\u4ea1\u7684\u4eba\u96c6\u4e2d\u572820\u5c81\u5de6\u53f3\u3002\n- Q\u6e2f\u53e3\u6b7b\u4ea1\u7684\u4eba\u96c6\u4e2d\u572835\u5c81\u5de6\u53f3\u3002\n-The survivors of Port C are concentrated in their 20s.\n-The deaths in Port S are concentrated in their 20s.\n-People who died at Port Q were mostly around 35 years old.","2197f329":"- \u5f53\u72ec\u81ea\u4e00\u4e2a\u4eba\u65c5\u6e38\u6216\u8005\u643a\u5e26\u5bb6\u4eba\/\u670b\u53cb\u7684\u4eba\u6570\u8d85\u8fc77\u4e2a\u4eba\u65f6\uff0c\u751f\u5b58\u7387\u4f1a\u5f88\u4f4e\u3002\u65e0\u8bba\u662f\u7537\u6027\u8fd8\u662f\u5973\u6027\u7fa4\u4f53\uff0c3\u4e2a\u4eba\u65c5\u6e38\u7684\u751f\u5b58\u6bd4\u4f8b\u6700\u9ad8\u3002\n- \u8fd9\u8bf4\u660e\u5bb6\u4eba\u7684\u6570\u91cf\u4e5f\u662f\u5b58\u6d3b\u7684\u91cd\u8981\u5f71\u54cd\u56e0\u7d20\u3002\n- When traveling alone or when there are more than 7 people with family\/friends, the survival rate will be very low. Regardless of whether it is a male or a female group, the three persons have the highest survival rate in tourism.\n- This shows that the number of family members is also an important factor in survival.","36c148fc":"- hard VotingClassifier","34e3a6a2":"- \u65e0\u8bba\u662f\u7537\u6027\u8fd8\u662f\u5973\u6027\uff0c\u513f\u7ae5\u6216\u8005\u672a\u6210\u5e74\u6d3b\u4e0b\u6765\u7684\u6bd4\u4f8b\u90fd\u633a\u9ad8\u3002\n- \u4ece\u603b\u4f53\u6765\u770b\uff0c\u5973\u6027\u751f\u5b58\u7684\u6bd4\u4f8b\u8981\u8d85\u8fc7\u7537\u6027\uff0c\u8fd9\u662f\u6bcb\u5eb8\u7f6e\u7591\u7684\u3002\n-Whether it is male or female, the percentage of children or minors surviving is quite high.\n-From an overall point of view, there is no doubt that the proportion of women surviving is higher than that of men.","c3306826":"- soft VotingClassifier","53145e43":"#### 3.1 GBDT","2aa2d8b2":"<div style=\"color: #fff7f7;\n           display:fill;\n           border-radius:10px;\n           border-style: solid;\n           border-color:#424949;\n           text-align:center;\n           background-color:#003a6c ;\n           font-size:15px;\n           letter-spacing:0.5px;\n           padding: 0.7em;\n           text-align:left\" >\n    <h1 style=\"text-align:center;font-weight: 20px; color:White;\">\n       Feature Processing and Model Selection of Titanic\ud83d\ude01<\/h1>\n<\/div>","d4cecdb4":"### 3.4 KNN","2438d1c7":"### 2.1 \u586b\u5145\u7f3a\u5931\u503c Fill in missing values","ec1a5bf9":"### 3.3 RF","782651ea":"- \u751f\u5b58\u6bd4\u4f8b\u8ddf\u9636\u5c42\u5b58\u5728\u5173\u7cfb\uff0c\u57281\/2\u9636\u7ea7\u4e2d\uff0c\u7537\u6027\u7684\u5b58\u6d3b\u6bd4\u4f8b\u8981\u8d85\u8fc7\u5973\u6027\u3002\u4f46\u662f\u57283\u9636\u7ea7\u4e2d\uff0c\u5973\u6027\u7684\u5b58\u6d3b\u6bd4\u4f8b\u8981\u8d85\u8fc7\u7537\u6027\u3002\n- The survival rate has a relationship with the class. In the 1\/2 class, the survival rate of men exceeds that of women. But in the three classes, the survival rate of women exceeds that of men.","11c70a99":"# 3 Model"}}