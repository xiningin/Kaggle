{"cell_type":{"5023581c":"code","9e751954":"code","f24d20df":"code","e27f8f05":"code","1ef8c6d2":"code","06902ace":"code","2a9f97aa":"code","2aa0ae39":"code","aa9547ca":"code","8def09c1":"code","749f76b5":"code","9c2f412e":"code","e86fb74d":"code","6d8c1274":"markdown","02697aca":"markdown","62f90e82":"markdown","0cc7fd81":"markdown","980b9fba":"markdown","88f39b3e":"markdown","48cf317e":"markdown","89e96d93":"markdown","0defd5d4":"markdown","0ce5467f":"markdown"},"source":{"5023581c":"# \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c seed \u0440\u0430\u043d\u0434\u043e\u043c\u0430 \u0434\u043b\u044f numpy numpy.random.seed(0)\n\n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndf = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')\n\ndf = df[['hotel', 'is_canceled', 'lead_time', 'arrival_date_month', 'arrival_date_week_number', 'arrival_date_day_of_month',\n    'stays_in_weekend_nights','stays_in_week_nights', 'adults', 'children', 'babies', 'meal']]","9e751954":"df['is_canceled'].value_counts(dropna=False) \/ len(df)","f24d20df":"df['hotel'] = df['hotel'].astype('category')\ndf['arrival_date_month'] = df['arrival_date_month'].astype('category')\ndf['meal'] = df['meal'].astype('category')","e27f8f05":"df","1ef8c6d2":"# plt.figure(figsize=(20, 10))\n# sns.heatmap(df.corr(), annot = True, fmt='.4g',cmap= 'coolwarm')\n# plt.show()","06902ace":"# df.value_counts(dropna=False)\n# df.columns\n# df.info()\n# df.head()\n# df.describe()\n\n# df.hist(layout=(3,4), figsize=(20,10))\n# df['meal'].hist()\n# plt.show()\n\n# plt.figure(figsize=(20, 10))\n# sns.heatmap(df.corr(), annot = True, fmt='.4g',cmap= 'coolwarm')\n# plt.show()","2a9f97aa":"# ???","2aa0ae39":"# Category\nprep_df = df[['hotel', 'lead_time', 'arrival_date_month','stays_in_week_nights','stays_in_weekend_nights', 'adults', 'children', 'babies', 'meal']]\ntarget = df['is_canceled']\n\n# One-hot encoding\nprep_df = pd.get_dummies(prep_df, columns=['hotel','meal','arrival_date_month'],drop_first=True)","aa9547ca":"prep_df","8def09c1":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(prep_df,target, test_size=0.2, random_state=2)","749f76b5":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\n\ndef create_simple_pipeline():\n    return Pipeline([\n        (\"fill_nan\", SimpleImputer(missing_values=np.nan, strategy='mean')), \n        (\"scale\", StandardScaler()), \n        (\"clf\", LogisticRegression())\n    ])\n\n# Pipeline\nsimple_clf_pipline = create_simple_pipeline()\n\n# Train\nsimple_clf_pipline.fit(X_train, y_train)\n\n# Test\ny_pred = simple_clf_pipline.predict(X_test)\nscore = accuracy_score(y_test, y_pred)\n\nprint(f\"Accuracy: {score}\")\n\n# 0.629\n\n# 0.672\n# 0.678","9c2f412e":"from sklearn.model_selection import KFold\n\ndef estimate_model(clf_pipline,data_df,target):\n    k_fold = KFold(n_splits=10, shuffle=False)\n    scores = []\n    X = prep_df.to_numpy()\n    y = target.to_numpy()\n    for train_index, test_index in k_fold.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        # Train\n        clf_pipline.fit(X_train, y_train)\n\n        # Test\n        y_pred = clf_pipline.predict(X_test)\n        score = accuracy_score(y_test, y_pred)\n        scores.append(score)\n    return scores\n\nsimple_clf_pipline = create_simple_pipeline()\nscores = estimate_model(simple_clf_pipline,prep_df,target)\nprint(\"Accuracy: %0.4f (+\/- %0.4f)\" % (np.mean(scores),np.std(scores)))","e86fb74d":"df = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')\n\nprep_df = df[['hotel', 'lead_time', 'arrival_date_month','stays_in_week_nights','stays_in_weekend_nights', 'adults', 'children', 'babies', 'meal',\n             'market_segment', 'distribution_channel', 'is_repeated_guest', 'previous_cancellations', 'previous_bookings_not_canceled',\n             'reserved_room_type', 'assigned_room_type','booking_changes', 'deposit_type']]\n\ntarget = df['is_canceled']\n\n# One-hot encoding\nprep_df = pd.get_dummies(prep_df, columns=['hotel','meal','arrival_date_month','market_segment','distribution_channel',\n                                           'reserved_room_type','assigned_room_type','deposit_type'],drop_first=True)\n\n\nfrom sklearn.feature_selection import VarianceThreshold\n\nclf_pipeline = Pipeline([\n        (\"fill_nan\", SimpleImputer(missing_values=np.nan, strategy='mean')), \n        (\"scale\", StandardScaler()), \n        (\"select features\",VarianceThreshold()),\n        (\"clf\", LogisticRegression(C=0.01,penalty='l1', tol=0.01,solver='saga'))\n    ])\n\n\nscores = estimate_model(clf_pipeline,prep_df,target)\nprint(\"Accuracy: %0.4f (+\/- %0.4f)\" % (np.mean(scores),np.std(scores)))\n# 0.629\n\n# 0.672\n# 0.678","6d8c1274":"# Preprocessing","02697aca":"### \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b\n* \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0446\u0438\u044f pandas https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/index.html\n* \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b\u044b \u043f\u043e pandas https:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/tutorials.html\n* \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043f\u043e numpy https:\/\/numpy.org\/devdocs\/user\/quickstart.html\n* \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043f\u043e matplotlib https:\/\/matplotlib.org\/tutorials\/introductory\/pyplot.html\n* \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043f\u043e seaborn https:\/\/seaborn.pydata.org\/introduction.html","62f90e82":"### \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b\n\n* \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f scikit-learn https:\/\/scikit-learn.org\/stable\/user_guide.html\n* \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 https:\/\/scikit-learn.org\/stable\/modules\/impute.html#impute\n* \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 https:\/\/scikit-learn.org\/stable\/modules\/preprocessing.html#preprocessing-scaler\n* \u041e\u0442\u0431\u043e\u0440 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 https:\/\/scikit-learn.org\/stable\/modules\/feature_selection.html?highlight=variancethreshold\n* \u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 https:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#\n* \u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b https:\/\/scikit-learn.org\/stable\/modules\/compose.html#pipeline\n* \u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b https:\/\/scikit-learn.org\/stable\/modules\/classes.html?highlight=pipeline#module-sklearn.pipeline","0cc7fd81":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","980b9fba":"### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0441\u043b\u043e\u0436\u043d\u0435\u0435","88f39b3e":"# \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","48cf317e":"# \u0427\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","89e96d93":"### Pipeline\n\n```python\nclass MyPipelineStep(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        ???\n        -- code --\n        ???\n        return self\n    \n    def transform(self, X):\n        ???\n        -- code --\n        ???\n        return transformed_X\n```","0defd5d4":"### \u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0430\u0443\u044e \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.","0ce5467f":"### \u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u044d\u0442\u043e\u043c\u0443 \u0432\u0435\u0440\u0438\u0442\u044c ?"}}