{"cell_type":{"4d6377be":"code","7ce280db":"code","15b84de0":"code","932ea8b6":"code","f3f41ed2":"code","12015a75":"code","d6a7d75c":"code","b0d12a88":"code","688fde02":"code","f60f8377":"code","21d490e7":"code","d36ea38b":"code","4b163fe7":"code","5d69e5ba":"code","dbebf917":"code","8c2d9f62":"code","433c1259":"code","2ce918b9":"code","985162df":"code","1686fc29":"code","b1363647":"code","08b50132":"code","c75eec31":"code","f919160e":"code","a01ab63b":"markdown","3699c863":"markdown","37df912c":"markdown","23b60e2c":"markdown","23a373c9":"markdown","0c7bbd8e":"markdown","dc95b368":"markdown","1517394e":"markdown","73fceb82":"markdown","62f34469":"markdown"},"source":{"4d6377be":"import numpy as np\nimport pandas as pd\n##################################################\n###################Classsifiers###################\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\n###################################################\n################Processing and EDA#################\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score,f1_score, average_precision_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n##################################################\n##############Disable Warnings####################\nimport warnings  \nwarnings.filterwarnings('ignore')\n##################################################\nimport os","7ce280db":"#Total playing time is not chosen due to a player can give a long break to \n#his\/her playing career, then they can start playing again\nrelatedColumnsList=[\"LeagueIndex\",\"Age\",\"HoursPerWeek\",\"APM\",\"SelectByHotkeys\",\n                    \"AssignToHotkeys\",\"UniqueHotkeys\",\n                    \"MinimapAttacks\",\"MinimapRightClicks\",\"NumberOfPACs\",\n                    \"GapBetweenPACs\",\"ActionLatency\",\n                    \"ActionsInPAC\",\"TotalMapExplored\",\"WorkersMade\",\"UniqueUnitsMade\",\n                    \"ComplexUnitsMade\",\"ComplexAbilityUsed\",\"MaxTimeStamp\"]\ndf=pd.read_csv('..\/input\/starcraft.csv')\ndf = df[relatedColumnsList]\ndf.dropna()\ndf = df[df['LeagueIndex']!=8]\ndf.head(n=6)","15b84de0":"leagueOne=df[df['LeagueIndex']==1]['Age']\nleagueTwo=df[df['LeagueIndex']==2]['Age']\nleagueThree=df[df['LeagueIndex']==3]['Age']\nleagueFour=df[df['LeagueIndex']==4]['Age']\nleagueFive=df[df['LeagueIndex']==5]['Age']\nleagueSix=df[df['LeagueIndex']==6]['Age']\nleagueSeven=df[df['LeagueIndex']==7]['Age']","932ea8b6":"print(\"Percentages of leagues in total data:\\n\")\ndf['LeagueIndex'].value_counts(normalize=True)*100","f3f41ed2":"plt.style.use('ggplot')\nfig, ax = plt.subplots(1, figsize = (14,8))\nfig.suptitle('League-Player Percentage', fontweight='bold', fontsize = 22,ha='center')\nbins = np.arange(0, 9, 1)\nweights = np.ones_like(df['LeagueIndex']) \/ len(df['LeagueIndex'])\np2 = plt.subplot(1,2,2)\np2.hist(df['LeagueIndex'], bins=bins, weights = weights, align='left')\nplt.xlabel('League Index', fontweight='bold')\nplt.title('Percentage',loc='left')\nyvals = plt.subplot(1,2,2).get_yticks()\nplt.subplot(1,2,2).set_yticklabels(['{:3.1f}%'.format(y*100) for y in yvals])\nplt.show()","12015a75":"leagues=[leagueOne,leagueTwo,leagueThree,leagueFour,\n         leagueFive,leagueSix,leagueSeven]\nnewLabels=[\"Bronze\", \"Silver\", \"Gold\", \"Platinum\",\n           \"Diamond\", \"Master\", \"Grandmaster\"]","d6a7d75c":"fig=plt.figure(figsize=(25,15))\nplt.title(\"Player League Number - Age Distribution\")\nfor i in range(len(leagues)):\n    leagues[i].hist(alpha=0.9,bins=60,label=newLabels[i])\n    plt.legend(loc=\"best\")","b0d12a88":"leagueOne=df[df['LeagueIndex']==1]['APM']\nleagueTwo=df[df['LeagueIndex']==2]['APM']\nleagueThree=df[df['LeagueIndex']==3]['APM']\nleagueFour=df[df['LeagueIndex']==4]['APM']\nleagueFive=df[df['LeagueIndex']==5]['APM']\nleagueSix=df[df['LeagueIndex']==6]['APM']\nleagueSeven=df[df['LeagueIndex']==7]['APM']","688fde02":"leagues=[leagueOne,leagueTwo,leagueThree,leagueFour,\n         leagueFive,leagueSix,leagueSeven]","f60f8377":"fig=plt.figure(figsize=(25,15))\nplt.title(\"Player League Number - Action Per Minute Distribution\")\nfor i in range(len(leagues)):\n    leagues[i].hist(alpha=0.8,bins=80,label=newLabels[i])\n    plt.legend(loc=\"best\")","21d490e7":"plt.style.use(['seaborn-dark'])\nfig, axes = plt.subplots(nrows=1, ncols = 1, figsize = (15,8))\nfig.suptitle('Attribute Relationships', fontsize=25, fontweight='bold')\nmask = np.zeros_like(df.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nr_matrix = df.corr().round(decimals=1)\nsns.heatmap(r_matrix, mask=mask, annot=True, fmt='g',\n            annot_kws={'size':10},linewidths=.3,cmap='coolwarm')\nplt.show()\n","d36ea38b":"willBeFocusedColumns = ['APM','SelectByHotkeys', 'AssignToHotkeys',\n                        'NumberOfPACs','GapBetweenPACs', 'ActionLatency']","4b163fe7":"ySelected = df['LeagueIndex']\nxSelected = df[willBeFocusedColumns]","5d69e5ba":"xTrain,xTest,yTrain,yTest=train_test_split(xSelected,ySelected,test_size=0.33)","dbebf917":"dtc= DecisionTreeClassifier()\ndtc.fit(xTrain,yTrain)\nyPrediction=dtc.predict(xTest)\nprint(\"Decision Tree Confusion Matrix\")\ncm=confusion_matrix(yTest,yPrediction)\nprint(cm)\nprint(\"Score of Decision Tree: \",dtc.score(xTest,yTest),\"\\n\")","8c2d9f62":"#import graphviz \n#from sklearn import tree\n#dot_data = tree.export_graphviz(dtc, out_file=None) \n#graph = graphviz.Source(dot_data) \n#graph.render(\"df\") \n#graph","433c1259":"gnb=GaussianNB()\ngnb.fit(xTrain,yTrain)\nyPrediction=gnb.predict(xTest)\nprint(\"Naive Bayes Confusion Matrix\")\ncm=confusion_matrix(yTest,yPrediction)\nprint(cm)\nprint(\"Score of Naive Bayes: \",gnb.score(xTest,yTest),\"\\n\")","2ce918b9":"svmTrial = svm.LinearSVC()\nsvmTrial = svmTrial.fit(xTrain,yTrain)\nyPrediction = svmTrial.predict(xTest)\nprint(\"Support Vector Machine Confusion Matrix\")\ncm=confusion_matrix(yTest,yPrediction)\nprint(cm)\nprint(\"Score of Support Vector Machine: \",svmTrial.score(xTest,yTest),\"\\n\")","985162df":"rfc=RandomForestClassifier()\nrfc.fit(xTrain,yTrain)\nyPrediction=rfc.predict(xTest)\nprint(\"Random Forest Confusion Matrix\")\ncm=confusion_matrix(yTest,yPrediction)\nprint(cm)\nprint(\"Score of Random Forest: \",rfc.score(xTest,yTest),\"\\n\")","1686fc29":"def CalculateOneVsAll(targetRank):\n    oneVsAllDataFrame = df.copy(deep=True)\n    leagueIndexes=[1,2,3,4,5,6,7]\n    if targetRank in leagueIndexes:\n        leagueIndexes[targetRank-1]=0\n    for i in range(len(oneVsAllDataFrame.index)):  \n        if(oneVsAllDataFrame['LeagueIndex'][i]!=targetRank):\n            for k in range(len(leagueIndexes)):\n                oneVsAllDataFrame['LeagueIndex'].replace(leagueIndexes[k],0,inplace=True)\n    \n    OVAWillBeFocusedColumns = ['APM','SelectByHotkeys', 'AssignToHotkeys',\n                            'NumberOfPACs','GapBetweenPACs', 'ActionLatency']\n    yOVASelected = oneVsAllDataFrame['LeagueIndex']\n    xOVASelected = oneVsAllDataFrame[OVAWillBeFocusedColumns]        \n            \n    xOVATrain,xOVATest,yOVATrain,yOVATest=train_test_split(xOVASelected,\n                                                           yOVASelected,\n                                                           test_size=0.33)  \n\n    ######################DecisionTreeClassifier One vs All####################\n    dtcOVA=DecisionTreeClassifier()\n    dtcOVA.fit(xOVATrain,yOVATrain)\n    yOVAPrediction=dtcOVA.predict(xOVATest)\n    print(\"One Versus All Decision Tree Confusion Matrix\")\n    cmOVA=confusion_matrix(yOVATest,yOVAPrediction)\n    print(cmOVA)\n    print(yOVAPrediction)\n    print(\"OVA Score of Decision Tree: \",dtcOVA.score(xOVATest,yOVATest),\"\\n\")\n    f1ScoreCalculation(yOVATest,yOVAPrediction)\n    precisionScoreCalculation(yOVATest,yOVAPrediction)\n    recallScoreCalculation(yOVATest,yOVAPrediction)\n    ######################Naive Bayes Classifier One vs All####################\n    gnbOVA=GaussianNB()\n    gnbOVA.fit(xOVATrain,yOVATrain)\n    yOVAPrediction=gnbOVA.predict(xOVATest)\n    print(\"One Versus All Naive Bayes Confusion Matrix\")\n    cmOVA=confusion_matrix(yOVATest,yOVAPrediction)\n    print(cmOVA)\n    print(yOVAPrediction)\n    print(\"OVA Score of Naive Bayes Classifier: \",gnbOVA.score(xOVATest,yOVATest),\"\\n\")\n    f1ScoreCalculation(yOVATest,yOVAPrediction)\n    precisionScoreCalculation(yOVATest,yOVAPrediction)\n    recallScoreCalculation(yOVATest,yOVAPrediction)\n    ######################Support Vector Machine One vs All####################\n    svmOVA = svm.LinearSVC()\n    svmOVA = svmOVA.fit(xOVATrain,yOVATrain)\n    yOVAPrediction = svmOVA.predict(xOVATest)\n    print(\"One Versus All Support Vector Machine Confusion Matrix\")\n    cmOVA=confusion_matrix(yOVATest,yOVAPrediction)\n    print(cmOVA)\n    print(yOVAPrediction)\n    print(\"OVA Score of Support Vector Machine: \",svmOVA.score(xOVATest,yOVATest),\n          \"\\n\")\n    f1ScoreCalculation(yOVATest,yOVAPrediction)\n    precisionScoreCalculation(yOVATest,yOVAPrediction)\n    recallScoreCalculation(yOVATest,yOVAPrediction)\n    #########################RandomForestClassifier One vs All#################\n    rfcOVA=RandomForestClassifier()\n    rfcOVA.fit(xOVATrain,yOVATrain)\n    yOVAPrediction=rfcOVA.predict(xOVATest)\n    print(\"One Versus All Random Forest Confusion Matrix\")\n    cmOVA=confusion_matrix(yOVATest,yOVAPrediction)\n    print(cmOVA)\n    print(yOVAPrediction)\n    print(\"OVA Score of One Versus All Random Forest: \",rfcOVA.score(xOVATest,yOVATest),\n          \"\\n\")\n    f1ScoreCalculation(yOVATest,yOVAPrediction)\n    precisionScoreCalculation(yOVATest,yOVAPrediction)\n    recallScoreCalculation(yOVATest,yOVAPrediction)","b1363647":"def f1ScoreCalculation(test,prediction):\n    print(\"Macro F1: \",f1_score(test,prediction,average='macro'))\n    print(\"Micro F1: \",f1_score(test,prediction,average='micro'))\n    print(\"Weighted F1: \",f1_score(test,prediction,average='weighted'))\n    print(f1_score(test,prediction,average=None),\"\\n\")","08b50132":"def precisionScoreCalculation(test,prediction):\n    print(\"Macro Precision: \",precision_score(test,prediction,average='macro'))\n    print(\"Micro Precision: \",precision_score(test,prediction,average='micro'))\n    print(\"Weighted Precision: \",precision_score(test,prediction,average='weighted'))\n    print(precision_score(test,prediction,average=None),\"\\n\")","c75eec31":"def recallScoreCalculation(test,prediction):\n    print(\"Macro Recall: \",recall_score(test,prediction,average='macro'))\n    print(\"Micro Recall: \",recall_score(test,prediction,average='micro'))\n    print(\"Weighted Recall: \",recall_score(test,prediction,average='weighted'))\n    print(recall_score(test,prediction,average=None),\"\\n\")","f919160e":"notifier=[\"-----ONE VERSUS ALL FOR BRONZE LEAGUE PREDICTIONS-----\\n\",\n          \"-----ONE VERSUS ALL FOR SILVER LEAGUE PREDICTIONS-----\\n\",\n          \"-----ONE VERSUS ALL FOR GOLD LEAGUE PREDICTIONS-----\\n\",\n          \"-----ONE VERSUS ALL FOR PLATINIUM LEAGUE PREDICTIONS-----\\n\",\n          \"-----ONE VERSUS ALL FOR DIAMOND LEAGUE PREDICTIONS-----\\n\",\n          \"-----ONE VERSUS ALL FOR MASTER LEAGUE PREDICTIONS-----\\n\",\n          \"-----ONE VERSUS ALL FOR GRAND MASTER LEAGUE PREDICTIONS-----\\n\"]\nendNotifier=[\"++++ End of Bronze league predictions++++\\n\",\n          \"++++ End of Silver league predictions++++\\n\",\n          \"++++ End of Gold league predictions++++\\n\",\n          \"++++ End of Platinium league predictions++++\\n\",\n          \"++++ End of Diamond league predictions++++\\n\",\n          \"++++ End of Master league predictions++++\\n\",\n          \"++++ End of Grand Master league predictions++++\\n\"]\nj=1        \nwhile j<=7:\n    print(notifier[j-1])\n    CalculateOneVsAll(j)\n    print(endNotifier[j-1])\n    j+=1","a01ab63b":"This project is still in development. New additions will be added sequentially.","3699c863":"> ## Introduction\n","37df912c":"GameID: Unique ID for each game\n\nLeagueIndex: 1-8 for Bronze, Silver, Gold, Diamond, Master, GrandMaster, Professional leagues\n\nAge: Age of each player\n\nHoursPerWeek: Hours spent playing per week\n\nTotalHours: Total hours spent playing\n\nAPM: Action per minute\n\nSelectByHotkeys: Number of unit selections made using hotkeys per timestamp\n\nAssignToHotkeys: Number of units assigned to hotkeys per timestamp\n\nUniqueHotkeys: Number of unique hotkeys used per timestamp\n\nMinimapAttacks: Number of attack actions on minimal per timestamp\n\nMinimapRightClicks: Number of right-clicks on minimal per timestamp\n\nNumberOfPACs: Number of PACs per timestamp\n\nGapBetweenPACs: Mean duration between PACs (milliseconds)\n\nActionLatency: Mean latency from the onset of PACs to their first action (milliseconds)\n\nActionsInPAC: Mean number of actions within each PAC\n\nTotalMapExplored: Number of 24x24 game coordinate grids viewed by player per timestamp\n\nWorkersMade: Number of SCVs, drones, probes trained per timestamp\n\nUniqueUnitsMade: Unique units made per timestamp\n\nComplexUnitsMade: Number of ghosts, investors, and high templars trained per timestamp\n\nComplexAbilityUsed: Abilities requiring specific targeting instructions used per timestamp\n\nMaxTimeStamp: Time stamp of game's last recorded event","23b60e2c":"#### The F-measure can be interpreted as a weighted harmonic mean of the precision and recall. A measure reaches its best value at 1 and its worst score at 0.","23a373c9":"-A Generic Machine Learning Research On Star Craft II.\n-At the end of the research, expected outcome will be a conclusion of different approaches in league prediction.","0c7bbd8e":"###########################################################################\n######################## ONE VERSUS ALL CLASSIFICATION ####################\n###########################################################################","dc95b368":"## Required Packages\n","1517394e":"**Brief information about columns for making easy to work with**\n","73fceb82":"#### Recall is defined as the number of true positives over the number of true positives plus the number of false negatives.","62f34469":"#### Precision is defined as the number of true positives over the number of true positives plus the number of false positives."}}