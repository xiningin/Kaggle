{"cell_type":{"50450e95":"code","588ce048":"code","dc9d52df":"code","3a206664":"code","2e9c67db":"code","839d7f6a":"code","55dc88c3":"code","4fdb1f9a":"code","2e1cac24":"code","f892f4da":"code","8f5e462d":"code","12e33300":"code","8343864f":"code","968f0863":"code","f4f23773":"code","faea6760":"code","13b0c07b":"code","3ce7131e":"code","d7e1e4e1":"code","bfaf8864":"code","28bbf14b":"code","23a0e3e6":"code","0442d6af":"code","5d07e48e":"code","2b9dba62":"code","b42680f2":"code","3fda39e1":"code","8354e716":"code","f7101744":"code","f4fc8b35":"code","700b5716":"code","4cfdb8e0":"code","a9f3249a":"code","ef202826":"code","a5bab3d0":"code","c44523a3":"code","889b5993":"code","420004b3":"code","2f7b8ec2":"code","484776b9":"code","92121145":"code","4375661f":"code","9a36d56d":"code","a1d691a5":"code","ab771e28":"code","ea0dfe3c":"code","58134bf5":"code","8c801bc1":"code","aa14bce5":"code","031fde56":"code","9f3fa022":"code","10abc656":"code","418ebae0":"code","d6f82d0e":"code","a578ed56":"code","bdbacba8":"code","7e53839b":"code","c7dced97":"markdown","640c4d2d":"markdown","13f647f8":"markdown","0224322c":"markdown","663c3d23":"markdown","c2e59557":"markdown","e17722ca":"markdown","e37ca664":"markdown","9803ffe9":"markdown","e7d1db7b":"markdown","f8f042f6":"markdown","5752b1a6":"markdown"},"source":{"50450e95":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier","588ce048":"#\u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b\u5168\u4f53\u306e20\u5206\u306e1\u3060\u3051\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n#\u5b9f\u969b\u306b\u8ab2\u984c\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# df_train = pd.read_csv('train.csv', index_col=0, skiprows=lambda x: x%20!=0)\ndf_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0)\n#df_train = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv', index_col=0)","dc9d52df":"y_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\n\nX_test = df_test","3a206664":"X_train.shape,X_test.shape","2e9c67db":"X_train.head()","839d7f6a":"X_train['home_ownership'].describe()","55dc88c3":"# \u3053\u306e\u3042\u3068\u306b\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304ccats\u9001\u308a\u306b\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u3053\u3067\u5148\u306b\u6b32\u3057\u3044\u30ab\u30e9\u30e0\u3092\u634c\u304d\u307e\u3059","4fdb1f9a":"X_train = X_train.drop(['emp_title', 'title'], axis=1)\nX_test = X_test.drop(['emp_title', 'title'], axis=1)","2e1cac24":"from sklearn.preprocessing import LabelEncoder","f892f4da":"# \u501f\u5165\u76ee\u7684\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = LabelEncoder()\nX_train['purpose'] = encoder.fit_transform(X_train['purpose'].values)\nX_test['purpose'] = encoder.transform(X_test['purpose'].values)","8f5e462d":"# \u30b5\u30d6\u30b0\u30ec\u30fc\u30c9\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = LabelEncoder()\nX_train['sub_grade'] = encoder.fit_transform(X_train['sub_grade'].values)\nX_test['sub_grade'] = encoder.transform(X_test['sub_grade'].values)","12e33300":"def map_emp_length(x):\n    dic = {\n        np.nan: np.nan,\n        '< 1 year': 0.5,\n        '1 year': 1,\n        '2 years': 2,\n        '3 years': 3,\n        '4 years': 4,\n        '5 years': 5,\n        '6 years': 6,\n        '7 years': 7,\n        '8 years': 8,\n        '9 years': 9,\n        '10+ years': 20,\n    }\n    return dic[x]\n\n\nfor xs in [X_train, X_test]:\n    del xs['grade']\n    xs['emp_length'] = xs['emp_length'].map(map_emp_length)","8343864f":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","968f0863":"oe = OrdinalEncoder(cols=cats, return_df=False)\n\nX_train[cats] = oe.fit_transform(X_train[cats])\nX_test[cats] = oe.transform(X_test[cats])","f4f23773":"f = 'annual_inc'\nscaler = StandardScaler()\nscaler.fit(X_train[[f]])","faea6760":"scaler.transform(X_test[['loan_amnt']])","13b0c07b":"from datetime import datetime as dt\nfrom datetime import timedelta","3ce7131e":"# \u5e74\u53ce\u306b\u5bfe\u3059\u308b\u9810\u91d1\u6bd4\u7387\n# revo_depo = X_train['revol_bal'] \/ X_train['tot_cur_bal']\n# revo_depo = X_test['revol_bal'] \/ X_test['tot_cur_bal']","d7e1e4e1":"X_train2 = X_train\nX_test2 = X_test","bfaf8864":"X_train2['incom_depo']=np.nan\nX_test2['incom_depo']=np.nan","28bbf14b":"def kakezan2(x):\n    try:\n        return x.loc['annual_inc'] \/ x.loc['tot_cur_bal'].round(7)\n    except:ValueError","23a0e3e6":"def kakezan3(x):\n    try:\n        return x.loc['annual_inc'] \/ x.loc['tot_cur_bal'].round(7)\n    except:ValueError","0442d6af":"X_train2['incom_depo'] = X_train2.apply(kakezan2, axis=1)\nX_test2['incom_depo'] = X_test2.apply(kakezan3, axis=1)","5d07e48e":"X_train2['incom_depo']=X_train2['incom_depo'].replace([np.inf, -np.inf], np.nan).fillna(3000)\nX_test2['incom_depo']=X_test2['incom_depo'].replace([np.inf, -np.inf], np.nan).fillna(3000)","2b9dba62":"X_train2['incom_depo']","b42680f2":"X_train['incom_depo']","3fda39e1":"X_test2['incom_depo']","8354e716":"# \u8fd4\u6e08\u6bd4\u7387 2\n# revo_depo = X_train['revol_bal'] \/ X_train['tot_cur_bal']\n# revo_depo = X_test['revol_bal'] \/ X_test['tot_cur_bal']","f7101744":"X_train2['dti2']=np.nan\nX_test2['dti2']=np.nan","f4fc8b35":"# ( dti * ( annual_inc \/ 12) + installment ) \/ annual_inc * 12","700b5716":"# ( X_train2['dti'] * ( X_train2['annual_inc'] \/ 12) + X_train2['installment'] ) \/ X_train2['annual_inc'] * 12","4cfdb8e0":"def kakezan4(x):\n    try:\n        return ((x.loc['dti'] * x.loc['annual_inc'] \/ 12) + x.loc['installment']) \/ x.loc['annual_inc'] * 12 \n    except:ValueError","a9f3249a":"def kakezan5(x):\n    try:\n        return ((x.loc['dti'] * x.loc['annual_inc'] \/ 12) + x.loc['installment']) \/ x.loc['annual_inc'] * 12\n    except:ValueError","ef202826":"X_train2['dti2'] = X_train2.apply(kakezan4, axis=1)\nX_test2['dti2'] = X_test2.apply(kakezan5, axis=1)","a5bab3d0":"X_train = X_train2\nX_test = X_test2","c44523a3":"X_train['loan_amnt'] = X_train['loan_amnt'].apply(np.log1p)\nX_test['loan_amnt'] = X_test['loan_amnt'].apply(np.log1p)","889b5993":"# \u307e\u305a\u306f\u6570\u5024\u7279\u5fb4\u91cf\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\nX_train_num = X_train.drop(cats, axis=1).fillna(-9999)\nX_test_num = X_test.drop(cats, axis=1).fillna(-9999)","420004b3":"X_train","2f7b8ec2":"# \u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046 \nX_train = X_train.fillna(X_train.median())\nX_test = X_test.fillna(X_test.median())\n\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","484776b9":"X_train.fillna(X_train.mean(), axis=0, inplace=True)\nX_test.fillna(X_train.mean(), axis=0, inplace=True)","92121145":"X_train.describe()","4375661f":"# \u307e\u305a\u306f\u6570\u5024\u7279\u5fb4\u91cf\u3060\u3051\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n# \u4ea4\u5dee\u691c\u5b9a (Cross Validation = CV) \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u6b21\u56de\u3088\u308a\u8a73\u3057\u304f\u53d6\u308a\u6271\u3044\u307e\u3059\u3002\n# CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n# scores = []\n\n# skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n# for i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train_num, y_train))):\n#     X_train_, y_train_ = X_train_num.values[train_ix], y_train.values[train_ix]\n#      X_val, y_val = X_train_num.values[test_ix], y_train.values[test_ix]\n    \n    \n#     clf = GradientBoostingClassifier()\n    \n#     clf.fit(X_train_, y_train_)\n#     y_pred = clf.predict_proba(X_val)[:,1]\n#     score = roc_auc_score(y_val, y_pred)\n#     scores.append(score)\n    \n#     print('CV Score of Fold_%d is %f' % (i, score))","9a36d56d":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n# np.array(scores).mean()","a1d691a5":"target = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n# \u3053\u3053\u3067\u306f\u7406\u89e3\u306e\u305f\u3081\u306b\u81ea\u5206\u3067\u4ea4\u5dee\u691c\u5b9a\u7684\u306b\u5b9f\u65bd\u3059\u308b\u304c\u3001xfeat\u306a\u3069\u3092\u7528\u3044\u3066\u3082\u826f\u3044\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","ab771e28":"enc_train.describe()","ea0dfe3c":"enc_test.describe()","58134bf5":"# \u3053\u306e\u4e0b\u306e\u3084\u3064\u306f\u56de\u3055\u3093\u3067\u826f\u304f\u306a\u3044\u304b","8c801bc1":"# \u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046 \nX_train = X_train.fillna(X_train.median())\nX_test = X_test.fillna(X_test.median())\n\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","aa14bce5":"X_test","031fde56":"# \u4eca\u5ea6\u306fTarget Encoding\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\nfor col in cats:\n\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    X_test[col] = X_test[col].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n        \n    X_train[col]  = enc_train","9f3fa022":"X_train.fillna(X_train.mean(), axis=0, inplace=True)\nX_test.fillna(X_train.mean(), axis=0, inplace=True)","10abc656":"# \u4eca\u5ea6\u306f\u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf\u3082\u8ffd\u52a0\u3057\u3066\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nscores = []\ny_pred_test = np.zeros(len(X_test))\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    \n    clf = LGBMClassifier()\n    \n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(roc_auc_score(y_val, y_pred))\n    y_pred_test +=  clf.predict_proba(X_test)[:,1]\n\nscores = np.array(scores)\nprint('Ave. CV score is %f' % scores.mean())\ny_pred_test \/= 5 # \u6700\u5f8c\u306bfold\u6570\u3067\u5272\u308b","418ebae0":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nnp.array(scores).mean()","d6f82d0e":"y_pred_test","a578ed56":"y_pred","bdbacba8":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\nsubmission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred_test\nsubmission.to_csv('submission.csv')","7e53839b":"import eli5\n\neli5.show_weights(clf, feature_names=list(X_train.columns))","c7dced97":"## X\u3068y\u306b\u5206\u5272\u3057\u307e\u3059","640c4d2d":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","13f647f8":"dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u3092\u5168\u3066Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304a\u304d\u307e\u3059\u3002","0224322c":"## \u6b8b\u308a\u306e\u30ab\u30c6\u30b4\u30ea\u3092Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b","663c3d23":"## Target\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","c2e59557":"## \u30ed\u30fc\u30f3\u984d\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u306ftree\u7cfb\u306b\u5bfe\u3057\u3066\u306f\u307b\u307c\u52b9\u679c\u304c\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3069\u306e\u3088\u3046\u306a\u5909\u63db\u304c\u52b9\u679c\u7684\u304b\u3001\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u3080\u4e2d\u3067\u8272\u3005\u8003\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","e17722ca":"# AI Academy FE&Modeling\u30b5\u30f3\u30d7\u30ebNotebook","e37ca664":"## Label\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","9803ffe9":"## \u30bf\u30fc\u30b2\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","e7d1db7b":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u3092\u9664\u3044\u3066\u3001\u6b20\u640d\u5024\uff08\u7a7a\u6b04\uff09\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","f8f042f6":"##  \u52e4\u7d9a\u5e74\u6570\u3092\u6570\u5024\u5316","5752b1a6":"\u8b1b\u7fa9\u4e2d\u306b\u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u5185\u5bb9\u3068\u3057\u3066\u306f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30ec\u30d9\u30eb\u3067\u3042\u308a\u3001\u3053\u3053\u304b\u3089\u6539\u5584\u3057\u3066\u3044\u304f\u306e\u304c\u8b1b\u7fa9\u5f8c\u306e\u8ab2\u984c\u306b\u306a\u308a\u307e\u3059\u3002Discussion\u3067\u6d3b\u767a\u306a\u8b70\u8ad6\u3092\u901a\u3058\u3066\u30ec\u30d9\u30eb\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002"}}