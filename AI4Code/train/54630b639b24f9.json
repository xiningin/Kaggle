{"cell_type":{"df2c8709":"code","a3fe1dca":"code","d0dff678":"code","adda306c":"code","792c1b06":"code","7bd3c756":"code","28d0019c":"code","334a078c":"code","11f6f93f":"code","ae8e39bc":"code","cf950e22":"code","3046ce23":"code","6e875c65":"code","de37543c":"code","fbf507ad":"code","001e9cb8":"code","e0b81456":"code","c1f5266a":"code","d573d3ef":"code","083ac30f":"code","d4d9e627":"code","35705dd1":"code","055314ed":"code","b02e53ee":"code","e7ecaaad":"code","ab954538":"code","94d6acf0":"code","494a6f5b":"code","dba53d58":"code","bc40142a":"code","54a1ca79":"code","92c435cc":"code","c11608a5":"code","0711bdf5":"code","c74e902e":"code","a7319205":"code","19b49d4e":"code","250e5666":"code","5ed01fd4":"code","2da8f706":"code","3507073f":"code","47f14cc6":"code","b449f35e":"code","887c7ce1":"code","9ff88829":"code","a69961a3":"code","4464a9d2":"code","0fd7ec98":"code","76d3057b":"code","1a02c479":"code","0655cb65":"code","5e92dfbb":"code","efb4d6ec":"code","c8ea6b53":"code","cd1c70d1":"code","e4007225":"code","312076bb":"code","32581382":"code","c5776b90":"code","474500d1":"code","2a6f0712":"code","b9e0f9bc":"code","eb2d8966":"code","ce1febbb":"code","90998333":"code","3299eece":"code","5be657db":"code","9b62fecc":"code","663e120c":"code","97e1ca01":"code","079e18cc":"code","47c02206":"code","790f4640":"code","2f8e23ca":"code","8da9214e":"code","acca1772":"code","e2f152f3":"code","bcb32417":"code","09c0a8bd":"markdown","2d28318c":"markdown","680c9cd5":"markdown","682b7a0c":"markdown","f48f2d8e":"markdown","10cbdaa5":"markdown","fe8e7e09":"markdown","ddbc6461":"markdown","8f909160":"markdown","610c440e":"markdown","6f6e45e3":"markdown"},"source":{"df2c8709":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a3fe1dca":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import product\nimport gc\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\nfrom sklearn.model_selection import GridSearchCV\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\ndef downcast_dtypes(df):\n    '''\n        Changes column types in the dataframe: \n                \n                `float64` type to `float32`\n                `int64`   type to `int32`\n    '''\n    \n    # Select columns to downcast\n    float_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int_cols =   [c for c in df if df[c].dtype == \"int64\"]\n    \n    # Downcast\n    df[float_cols] = df[float_cols].astype(np.float32)\n    df[int_cols]   = df[int_cols].astype(np.int32)\n    if 'date_block_num' in df.columns:\n        df['date_block_num'] = df['date_block_num'].astype(np.int8)\n    if 'shop_id' in df.columns:\n        df['shop_id'] = df['shop_id'].astype(np.int8)\n    if 'item_id' in df.columns:\n        df['item_id'] = df['item_id'].astype(np.int16)\n    if 'year' in df.columns:\n        df['year'] = df['year'].astype(np.int8)\n    if 'month' in df.columns:\n        df['month'] = df['month'].astype(np.int8)\n    if 'quarter' in df.columns:\n        df['quarter'] = df['quarter'].astype(np.int8)\n    return df","d0dff678":"DATA_FOLDER     = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/'\n\nsales_train     = pd.read_csv(os.path.join(DATA_FOLDER, 'sales_train.csv'))\nitems           = pd.read_csv(os.path.join(DATA_FOLDER, 'items.csv'))\nitem_categories = pd.read_csv(os.path.join(DATA_FOLDER, 'item_categories.csv'))\nshops           = pd.read_csv(os.path.join(DATA_FOLDER, 'shops.csv'))\ntest            = pd.read_csv(os.path.join(DATA_FOLDER, 'test.csv')).set_index('ID')","adda306c":"shops.head()","792c1b06":"shops[shops.shop_id == 57]","7bd3c756":"items.head()","28d0019c":"sales_train.describe()","334a078c":"sns.boxplot(x=sales_train['item_price'])","11f6f93f":"sns.boxplot(x=sales_train['item_cnt_day'])","ae8e39bc":"sales_train.isnull().describe()","cf950e22":"items.head()","3046ce23":"item_categories.head()","6e875c65":"shops.head()","de37543c":"test.head()","fbf507ad":"sales_train.loc[sales_train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\nsales_train.loc[sales_train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\nsales_train.loc[sales_train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11","001e9cb8":"median = sales_train[(sales_train.shop_id==32)&(sales_train.item_id==2973)&(sales_train.date_block_num==4)&(sales_train.item_price>0)].item_price.median()\nsales_train.loc[sales_train.item_price<0, 'item_price'] = median","e0b81456":"sales_train = sales_train[sales_train['item_price']<30000]\nsales_train = sales_train[sales_train['item_cnt_day']<1001]","c1f5266a":"median = sales_train[(sales_train['shop_id']==32) & (sales_train['item_id']==2973) & (sales_train['date_block_num']==4) \n                     & (sales_train['item_price']>0)].item_price.median()\nsales_train.loc[sales_train['item_price']<0,'item_price'] = median","d573d3ef":"sales_train.date = pd.to_datetime(sales_train.date,format =\"%d.%m.%Y\")\nsales_train['year'] = sales_train.date.dt.year\nsales_train['month'] = sales_train.date.dt.month\nsales_train['day'] = sales_train.date.dt.day","083ac30f":"def date_agg_year(df):\n    if df == 2013 :\n        return  0\n    if df == 2014 :\n        return  1\n    if df == 2015 :\n        return  2\n        \ndef date_agg_month(df):\n    if df in [1,2,3]:\n        return 1\n    if df in [4,5,6]:\n        return 2\n    if df in [7,8,9]:\n        return 3 \n    if df in [10,11,12]:\n        return 4","d4d9e627":"sales_train.year = sales_train.year.agg(date_agg_year)\nsales_train['quarter'] = sales_train.month.agg(date_agg_month)","35705dd1":"shops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\nshops = shops[['shop_id','city_code']]\n\nitem_categories['split'] = item_categories['item_category_name'].str.split('-')\nitem_categories['type'] = item_categories['split'].map(lambda x: x[0].strip())\nitem_categories['type_code'] = LabelEncoder().fit_transform(item_categories['type'])\n# if subtype is nan then type\nitem_categories['subtype'] = item_categories['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\nitem_categories['subtype_code'] = LabelEncoder().fit_transform(item_categories['subtype'])\nitem_categories = item_categories[['item_category_id','type_code', 'subtype_code']]\n\nitems.drop(['item_name'], axis=1, inplace=True)","055314ed":"sales_train['revenue'] = sales_train['item_price'] * sales_train['item_cnt_day']","b02e53ee":"index_cols = ['shop_id','item_id','date_block_num']\n\ngrid = [] \n\nfor block_num in sales_train['date_block_num'].unique():\n    cur_shops = sales_train.loc[sales_train['date_block_num'] == block_num, 'shop_id'].unique()\n    cur_items = sales_train.loc[sales_train['date_block_num'] == block_num, 'item_id'].unique()\n    grid.append(np.array(list(product(*[cur_shops,cur_items,[block_num]])),dtype='int32'))\n\ngrid = pd.DataFrame(np.vstack(grid), columns = index_cols,dtype=np.int32)\n\ngb = sales_train.groupby(index_cols).agg({'item_cnt_day':['sum']})\ngb.columns = ['target']\ngb.reset_index(inplace=True)\nall_data = pd.merge(grid, gb, on=index_cols, how='left').fillna(0)\nall_data['target'] = all_data['target'].astype(np.float16)\n\ngb = sales_train.groupby(['shop_id','date_block_num']).agg({'item_cnt_day':['sum']})\ngb.columns = ['target_shop']\ngb.reset_index(inplace=True)\nall_data = pd.merge(all_data, gb, on=['shop_id','date_block_num'], how='left').fillna(0)\nall_data['target_shop'] = all_data['target_shop'].astype(np.float16)\n\ngb = sales_train.groupby(['item_id','date_block_num']).agg({'item_cnt_day':['sum']}) \ngb.columns = ['target_item']\ngb.reset_index(inplace=True)\nall_data = pd.merge(all_data, gb, on=['item_id','date_block_num'], how='left').fillna(0)\nall_data['target_item'] = all_data['target_item'].astype(np.float16)\n\ndel gb\nall_data = downcast_dtypes(all_data)\n\ngc.collect()\n\nall_data.sort_values(index_cols,inplace=True)","e7ecaaad":"for i in range(12):\n    all_data.loc[all_data.date_block_num==i,'year'] = 0\n    all_data.loc[all_data.date_block_num==i,'month'] = i\nfor i in range(12,24):\n    all_data.loc[all_data.date_block_num==i,'year'] = 1\n    all_data.loc[all_data.date_block_num==i,'month'] = i-11\nfor i in range(24,35):\n    all_data.loc[all_data.date_block_num==i,'year'] = 2\n    all_data.loc[all_data.date_block_num==i,'month'] = i-23\n\nall_data['quarter'] = all_data['month'].agg(date_agg_month)","ab954538":"#gb = all_data.groupby(['shop_id','item_id','quarter','year']).agg({'target':['mean']})\n#gb.columns = ['quarter_mean_target']\n#gb.reset_index(inplace=True)\n#all_data = pd.merge(all_data,gb,on = ['shop_id','item_id','quarter','year'],how = 'left').fillna(0)\n#all_data['quarter_mean_target'] = all_data['quarter_mean_target'].astype(np.float16)\n\n#gb = all_data.groupby(['item_id','quarter','year']).agg({'target':['mean']})\n#gb.columns = ['quarter_mean_target_item']\n#gb.reset_index(inplace=True)\n#all_data = all_data.merge(gb,on = ['item_id','quarter','year'],how = 'left').fillna(0)\n#all_data['quarter_mean_target_item'] = all_data['quarter_mean_target_item'].astype(np.float16)\n\n#gb = all_data.groupby(['shop_id','quarter','year']).agg({'target':['mean']})\n#gb.columns = ['quarter_mean_target_shop']\n#gb.reset_index(inplace=True)\n#all_data = all_data.merge(gb,on = ['shop_id','quarter','year'],how = 'left').fillna(0)\n#all_data['quarter_mean_target_shop'] = all_data['quarter_mean_target_shop'].astype(np.float16)\n\n#all_data = downcast_dtypes(all_data)\n\n#del gb\n#gc.collect()\n\n#all_data.sort_values(index_cols,inplace=True)","94d6acf0":"test['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\nall_data = pd.concat([all_data, test], ignore_index=True, sort=False, keys=index_cols).fillna(0)","494a6f5b":"for i in range(12):\n    all_data.loc[all_data.date_block_num==i,'year'] = 0\n    all_data.loc[all_data.date_block_num==i,'month'] = i\nfor i in range(12,24):\n    all_data.loc[all_data.date_block_num==i,'year'] = 1\n    all_data.loc[all_data.date_block_num==i,'month'] = i-11\nfor i in range(24,35):\n    all_data.loc[all_data.date_block_num==i,'year'] = 2\n    all_data.loc[all_data.date_block_num==i,'month'] = i-23\n\nall_data['quarter'] = all_data['month'].agg(date_agg_month)","dba53d58":"all_data = pd.merge(all_data, shops, on=['shop_id'], how='left')\nsales_train = pd.merge(sales_train,shops,on='shop_id',how='left')\nall_data = pd.merge(all_data, items, on=['item_id'], how='left')\nall_data = pd.merge(all_data, item_categories, on=['item_category_id'], how='left')\nall_data['city_code'] = all_data['city_code'].astype(np.int8)\nall_data['item_category_id'] = all_data['item_category_id'].astype(np.int8)\nall_data['type_code'] = all_data['type_code'].astype(np.int8)\nall_data['subtype_code'] = all_data['subtype_code'].astype(np.int8)","bc40142a":"gb = all_data.groupby(['item_category_id','date_block_num']).agg({'target':['sum']}) \ngb.columns = ['target_category']\ngb.reset_index(inplace=True)\nall_data = pd.merge(all_data, gb, on=['item_category_id','date_block_num'], how='left').fillna(0)\nall_data['target_category'] = all_data['target_category'].astype(np.float16)","54a1ca79":"gb = all_data.groupby(['item_category_id']).agg({'item_id':['nunique']})\ngb.columns =['item_category_num_count']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on = 'item_category_id',how='left').fillna(0)\n\ngb = all_data.groupby(['shop_id']).agg({'item_id':['nunique']})\ngb.columns =['shop_item_num_count']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on ='shop_id',how='left').fillna(0)\n\ngb = all_data.groupby(['shop_id']).agg({'item_id':['nunique']})\ngb.columns =['shop_item_category_num_count']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on ='shop_id',how='left').fillna(0)\n\ngb = all_data.groupby(['city_code']).agg({'shop_id':['nunique']})\ngb.columns =['city_shop_count']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on ='city_code',how='left').fillna(0)\n\ngb = all_data.groupby(['type_code']).agg({'subtype_code':['nunique']})\ngb.columns =['item_type_sub_count']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on ='type_code',how='left').fillna(0)\n\ngb = all_data.groupby(['date_block_num','shop_id']).agg({'item_id':['nunique']})\ngb.columns =['date_shop_item_count']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on =['date_block_num','shop_id'],how='left').fillna(0)\n\ndel gb\ngc.collect()","92c435cc":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        gc.collect()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left').fillna(0)\n    return df","c11608a5":"all_data = lag_feature(all_data, [1,2,3,6,12], 'target')\nall_data = lag_feature(all_data, [1,2,3,6,12], 'target_shop')\nall_data = lag_feature(all_data, [1,2,3,6,12], 'target_item')\nall_data = lag_feature(all_data, [1,2,3,6,12], 'target_category')","0711bdf5":"#all_data = lag_feature(all_data, [3,6,12], 'quarter_mean_target')\n#all_data = lag_feature(all_data, [3,6,12], 'quarter_mean_target_item')\n#all_data = lag_feature(all_data, [3,6,12], 'quarter_mean_target_shop')","c74e902e":"gb = sales_train.groupby(['item_id']).agg({'item_price':['mean']})\ngb.columns =['item_price_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['item_id'],how= 'left').fillna(0)\nall_data['item_price_mean'] = all_data['item_price_mean'].astype(np.float16)\n\ngb = sales_train.groupby(['item_id','date_block_num']).agg({'item_price':['mean']})\ngb.columns =['date_item_price_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['item_id','date_block_num'],how= 'left').fillna(0)\nall_data['date_item_price_mean'] = all_data['date_item_price_mean'].astype(np.float16)\n\ngb = sales_train.groupby(['shop_id']).agg({'revenue':['mean']})\ngb.columns =['shop_revenue_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['shop_id'],how= 'left').fillna(0)","a7319205":"gb = all_data.groupby(['item_id','date_block_num','city_code']).agg({'target':['mean']})\ngb.columns =['date_city_item_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['item_id','date_block_num','city_code'],how= 'left').fillna(0)\nall_data['date_city_item_target_mean'] = all_data['date_city_item_target_mean'].astype(np.float16)","19b49d4e":"gb = all_data.groupby(['shop_id','date_block_num','city_code']).agg({'target':['mean']})\ngb.columns =['date_city_shop_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['shop_id','date_block_num','city_code'],how= 'left').fillna(0)\nall_data['date_city_shop_target_mean'] = all_data['date_city_shop_target_mean'].astype(np.float16)","250e5666":"gb = all_data.groupby(['date_block_num','city_code']).agg({'target':['mean']})\ngb.columns =['date_city_target_mean']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on=['date_block_num','city_code'],how= 'left').fillna(0)\nall_data['date_city_target_mean'] = all_data['date_city_target_mean'].astype(np.float16)","5ed01fd4":"gb = all_data.groupby(['type_code','date_block_num','city_code']).agg({'target':['mean']})\ngb.columns =['date_city_type_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['type_code','date_block_num','city_code'],how= 'left').fillna(0)\nall_data['date_city_type_target_mean'] = all_data['date_city_type_target_mean'].astype(np.float16)","2da8f706":"gb = all_data.groupby(['item_category_id','date_block_num','city_code']).agg({'target':['mean']})\ngb.columns =['date_city_category_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['item_category_id','date_block_num','city_code'],how= 'left').fillna(0)\nall_data['date_city_category_target_mean'] = all_data['date_city_category_target_mean'].astype(np.float16)","3507073f":"gb = all_data.groupby(['item_id','date_block_num']).agg({'target':['mean']})\ngb.columns =['date_item_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['item_id','date_block_num'],how= 'left').fillna(0)\nall_data['date_item_target_mean'] = all_data['date_item_target_mean'].astype(np.float16)","47f14cc6":"gb = all_data.groupby(['type_code','date_block_num']).agg({'target':['mean']})\ngb.columns =['date_type_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['type_code','date_block_num'],how= 'left').fillna(0)\nall_data['date_type_target_mean'] = all_data['date_type_target_mean'].astype(np.float16)","b449f35e":"gb = all_data.groupby(['shop_id','date_block_num']).agg({'target':['mean']})\ngb.columns =['date_shop_target_mean']\ngb.reset_index(inplace = True)\nall_data = all_data.merge(gb,on=['shop_id','date_block_num'],how= 'left').fillna(0)\nall_data['date_shop_target_mean'] = all_data['date_shop_target_mean'].astype(np.float16)","887c7ce1":"gb = all_data.groupby(['item_category_id','date_block_num']).agg({'target':['mean']})\ngb.columns =['date_category_target_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['item_category_id','date_block_num'],how= 'left').fillna(0)\nall_data['date_category_target_mean'] = all_data['date_category_target_mean'].astype(np.float16)","9ff88829":"gb = sales_train.groupby(['shop_id','date_block_num']).agg({'revenue':['sum']})\ngb.columns =['date_shop_revenue']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['shop_id','date_block_num'],how= 'left').fillna(0)","a69961a3":"gb = sales_train.groupby(['shop_id','date_block_num']).agg({'revenue':['mean']})\ngb.columns =['date_shop_revenue_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['shop_id','date_block_num'],how= 'left').fillna(0)","4464a9d2":"gb = sales_train.groupby(['date_block_num','city_code']).agg({'revenue':['mean']})\ngb.columns =['date_city_revenue_mean']\ngb.reset_index(inplace = True)\nall_data = pd.merge(all_data,gb,on=['date_block_num','city_code'],how= 'left').fillna(0)\n\ndel gb\ngc.collect()","0fd7ec98":"all_data = lag_feature(all_data, [1], 'date_item_price_mean')","76d3057b":"all_data = lag_feature(all_data, [1], 'date_shop_item_count')","1a02c479":"all_data = lag_feature(all_data, [1,2,3], 'date_shop_revenue')","0655cb65":"all_data = lag_feature(all_data,[1],'date_shop_revenue_mean')","5e92dfbb":"all_data = lag_feature(all_data,[1], 'date_city_type_target_mean')","efb4d6ec":"all_data = lag_feature(all_data,[1], 'date_city_item_target_mean')","c8ea6b53":"all_data = lag_feature(all_data,[1], 'date_city_shop_target_mean')","cd1c70d1":"all_data = lag_feature(all_data,[1], 'date_city_category_target_mean')","e4007225":"all_data = lag_feature(all_data,[1], 'date_city_target_mean')","312076bb":"all_data = lag_feature(all_data,[1], 'date_item_target_mean')","32581382":"all_data = lag_feature(all_data,[1], 'date_shop_target_mean')","c5776b90":"all_data = lag_feature(all_data,[1], 'date_category_target_mean')","474500d1":"all_data = lag_feature(all_data,[1], 'date_city_revenue_mean')","2a6f0712":"all_data = lag_feature(all_data,[1], 'date_shop_revenue_mean')","b9e0f9bc":"all_data = all_data[all_data.date_block_num > 12]\nall_data = downcast_dtypes(all_data)","eb2d8966":"all_data.to_pickle('data.pkl')","ce1febbb":"del all_data\ndel shops\ndel items\ndel item_categories\n\ngc.collect()","90998333":"all_data = pd.read_pickle('data.pkl')","3299eece":"all_data.columns","5be657db":"all_data = downcast_dtypes(all_data)","9b62fecc":"columns = ['shop_id', 'item_id', 'date_block_num', \n           'year', 'month', 'quarter', 'city_code',\n       'item_category_id', 'type_code', 'subtype_code',\n#       'item_category_num_count', 'shop_item_num_count',\n#       'shop_item_category_num_count', 'city_shop_count',\n#       'item_type_sub_count', 'date_shop_item_count',\n       'target_lag_1',\n       'target_lag_2', 'target_lag_3', 'target_lag_6', 'target_lag_12',\n       'target_shop_lag_1', 'target_shop_lag_2', 'target_shop_lag_3',\n       'target_shop_lag_6', 'target_shop_lag_12', 'target_item_lag_1',\n       'target_item_lag_2', 'target_item_lag_3', 'target_item_lag_6',\n       'target_item_lag_12','target_category_lag_1','target_category_lag_2','target_category_lag_3',\n       'target_category_lag_6','target_category_lag_12','item_price_mean', \n       'date_item_price_mean_lag_1', 'date_shop_item_count_lag_1',\n       'date_shop_revenue_lag_1', 'date_shop_revenue_lag_2','date_shop_revenue_lag_3',\n       'date_shop_revenue_mean_lag_1',\n       'date_city_type_target_mean_lag_1',\n       'date_city_item_target_mean_lag_1', 'date_city_shop_target_mean_lag_1',\n       'date_city_category_target_mean_lag_1', 'date_city_target_mean_lag_1',\n       'date_item_target_mean_lag_1', 'date_shop_target_mean_lag_1',\n       'date_category_target_mean_lag_1', 'date_city_revenue_mean_lag_1'\n          ]","663e120c":"train_x = all_data.loc[all_data.date_block_num < 33, columns]\ntrain_y = all_data.loc[all_data.date_block_num < 33,'target']","97e1ca01":"train_x.info()","079e18cc":"validation_x = all_data.loc[all_data.date_block_num == 33, columns]\nvalidation_y = all_data.loc[all_data.date_block_num == 33,'target']","47c02206":"test_x = all_data.loc[all_data.date_block_num == 34, columns]","790f4640":"del all_data\n\ngc.collect()","2f8e23ca":"model = XGBRegressor(\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8,\n    eta=0.3,    \n    seed=42)\n\nmodel.fit(\n    train_x, \n    train_y,\n    eval_metric=\"rmse\",\n    eval_set=[(train_x, train_y), (validation_x, validation_y)],\n    verbose=True,\n    early_stopping_rounds = 10)","8da9214e":"plot_features(model, (10,14))","acca1772":"Y_validation = model.predict(validation_x).clip(0, 20)\nY_test = model.predict(test_x).clip(0, 20)","e2f152f3":"submission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('xgb_submission.csv', index=False)","bcb32417":"submission.head()","09c0a8bd":"# EDA","2d28318c":"\u52a0\u5165test","680c9cd5":"# \u6700\u540e\u51c6\u5907","682b7a0c":"# \u52a0\u5165\u65f6\u5ef6\u7279\u5f81","f48f2d8e":"# Train\/validation split","10cbdaa5":"# \u5bf9\u6708\u9500\u91cf\u76f8\u5173\u7279\u5f81\u8fdb\u884cMean coding","fe8e7e09":"# \u7279\u522b\u7279\u5f81","ddbc6461":"\u52a0\u5165\u5176\u5b83\u7279\u5f81","8f909160":"# \u52a0\u5165\u6708\u9500\u91cf\u76f8\u5173\u7684\u7279\u5f81","610c440e":"# \u6570\u636e\u9884\u5904\u7406 \uff08sales_train\uff09","6f6e45e3":"# \u52a0\u5165\u5176\u5b83\u7279\u5f81\u7684mean coding"}}