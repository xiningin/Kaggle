{"cell_type":{"29b3b455":"code","6e5f1f8b":"code","adb5e8e5":"code","15546256":"code","c76ee194":"code","c570c5ba":"code","edc83466":"code","a95dd9e8":"code","323171a8":"code","16eea99b":"code","802804f1":"code","0b9dd320":"code","f0e442fe":"code","1eede955":"code","4e27fc12":"code","b80de66d":"code","3dbe0cdd":"code","e98be10c":"code","fa013f0b":"code","115f36b5":"code","189b8140":"code","1042cadf":"code","9c5973d0":"code","6232c62c":"code","d3cb1c6d":"code","6c2433e2":"code","17119b04":"code","def9887b":"code","1abd752b":"code","ff69ff16":"code","20b938d6":"code","f02b75cc":"code","1add6ae0":"code","3d0cbd46":"code","7f758a01":"code","abfa02e3":"code","f1948dbc":"code","4ec0322a":"code","fe5329ff":"code","39eb8ffa":"code","bc7ff97f":"code","b11d2a9e":"code","d24aecb5":"code","b7147077":"code","58ba19bd":"code","d60e1615":"code","71476426":"markdown","ede38eb5":"markdown","93a1a8e5":"markdown","bc756dc5":"markdown","860ed86c":"markdown","18611b68":"markdown","12e328b8":"markdown","68d46eec":"markdown","c180a1f5":"markdown","a4763122":"markdown","a4359e32":"markdown","32ec0e10":"markdown","0b1a5ccf":"markdown","f9882b71":"markdown","c22ae15b":"markdown","289b17f5":"markdown","9ef2e9fa":"markdown","265869d4":"markdown","13f824a6":"markdown","62ef520e":"markdown","af71ad68":"markdown","562f3642":"markdown","1d035c84":"markdown","7c59f620":"markdown","8819d11c":"markdown","8e816b64":"markdown","0cdb8151":"markdown","a581d0a6":"markdown","2903a08d":"markdown","1e6dd626":"markdown","331b3095":"markdown","93bd4bc6":"markdown"},"source":{"29b3b455":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6e5f1f8b":"#Reading the CSV file\ndf=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","adb5e8e5":"df.head()","15546256":"df.info()","c76ee194":"df.describe()","c570c5ba":"#Checking for any duplicates within the dataset\ndf.duplicated().sum()","edc83466":"#Checking for the missing values in the dataset\ndf.isna().sum().sort_values(ascending=False)","a95dd9e8":"#Checking for the % of missing values\n100* (df.isnull().sum() \/ len(df)).sort_values(ascending=False)","323171a8":"#Finding the correlation values of 'Survived' with other features\ndf.corr()['Survived']","16eea99b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n","802804f1":"#Plotting the heatmap of the correlation values\nplt.figure(figsize=(5,3), dpi=150)\nsns.heatmap(df.corr(), annot=True)","0b9dd320":"df.corr()['Pclass']","f0e442fe":"plt.figure(figsize=(7,4), dpi=150)\nax = sns.countplot(data=df,x='Pclass', hue='Survived')\nplt.ylim(0,500)\n\nfor p in ax.patches:\n        ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))","1eede955":"#Checking for a relation between Fare and Pclass, as they are correlated\nplt.figure(figsize=(6,10), dpi=150)\nsns.boxplot(data=df, x='Pclass',y='Fare', hue='Survived')","4e27fc12":"plt.figure(figsize=(5,5), dpi=150)\nsns.scatterplot(data=df, x='Pclass',y='Fare', hue='Survived', alpha=0.5)","b80de66d":"#Lets see the data in tabular form for Passengers in class 1, who paid higher and survived\np1_survived_df = df[(df['Pclass']==1) & (df['Survived']==1)].sort_values('Fare', ascending=False)\np1_survived_df","3dbe0cdd":"plt.figure(figsize=(7,4), dpi=150)\nax = sns.countplot(data=df,x='Sex', hue='Survived')\nplt.ylim(0,700)\n\nfor p in ax.patches:\n        ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))","e98be10c":"plt.figure(figsize=(7,4), dpi=150)\nax = sns.countplot(data=p1_survived_df,x='Sex')\nplt.ylim(0,150)\n\nfor p in ax.patches:\n        ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()+30))","fa013f0b":"df['Age'].describe()","115f36b5":"plt.figure(figsize=(10,6))\nsns.histplot(data=df, x='Age', hue='Survived', kde=True,bins=16)","189b8140":"plt.figure(figsize=(6,3), dpi=150)\nsns.barplot(data=df, x='Sex', y='Age',hue='Survived', ci='sd')\nplt.legend(loc=(1.05,0.5))","1042cadf":"plt.figure(figsize=(6,3), dpi=150)\nsns.barplot(data=df, x='Pclass', y='Age',hue='Survived', ci='sd')\nplt.legend(loc=(1.05,0.5))","9c5973d0":"df[df['Age'].isna()]","6232c62c":"#Filling the missing 177 values of 'Age' feature with its mean\ndf['Age'] = df['Age'].fillna(df['Age'].mean())\n","d3cb1c6d":"plt.figure(figsize=(8,4),dpi=150)\nsns.countplot(data=df,x='SibSp', hue='Survived')\nplt.ylim(0,250)","6c2433e2":"plt.figure(figsize=(8,4),dpi=150)\nsns.countplot(data=df,x='Parch', hue='Survived')","17119b04":"#Combining the Parch and SibSp to see if we can find a better correlation\ndf['relatives']=df['Parch']+df['SibSp']\n","def9887b":"plt.figure(figsize=(8,4),dpi=150)\nsns.countplot(data=df,x='relatives', hue='Survived')","1abd752b":"plt.figure(figsize=(6,3), dpi=150)\nsns.barplot(data=df, x='relatives', y='Age',hue='Survived', ci='sd')\nplt.legend(loc=(1.05,0.5))","ff69ff16":"#Dropping Sibsp and Parch from dataset\ndf = df.drop(['SibSp', 'Parch'], axis=1)\n","20b938d6":"#Finding unique values in 'Ticket' column\ndf['Ticket'].unique()","f02b75cc":"df['Ticket'].value_counts()","1add6ae0":"df = df.drop(['Ticket'], axis=1)","3d0cbd46":"df.corr()['Fare']","7f758a01":"plt.figure(figsize=(12,6), dpi=150)\nsns.histplot(data=df, x='Fare', hue='Survived', kde=True, bins=50)","abfa02e3":"df['Cabin'].isna().sum()","f1948dbc":"df = df.drop(['Cabin'], axis=1)","4ec0322a":"df['Embarked'].unique()","fe5329ff":"df['Embarked'].value_counts()","39eb8ffa":"#Exploring the 'Embarked' column to find the best fit for the 2 missing values\ndf.groupby('Embarked').describe().T","bc7ff97f":"df[df['Embarked'].isna()]","b11d2a9e":"df[df['Fare']==80.0]","d24aecb5":"df.at[61,'Embarked']='S'\ndf.at[829,'Embarked']='S'","b7147077":"df=df.drop(['Name'], axis=1)","58ba19bd":"df['PassengerId'].value_counts()","d60e1615":"df=df.drop(['PassengerId'], axis=1)","71476426":"### So, **66%** who survived from class 1 were women, and only **34%** men made it. And of the 109 men who survived, 45 were from Pclass 1, which makes it 41%","ede38eb5":"# 9. Name","93a1a8e5":"# **3. Age**","bc756dc5":"### As per the figure, 63% in class 1 survived, 47% in class 2 survived, and only 20% in class 3 survived","860ed86c":"### We have the columns with the missing values, let's check with the passengers of similar fare, to find the best allocation of missing values","18611b68":"# **Exploratory Data Analysis of each feature**","12e328b8":"# 8. Embarked\n### Missing: 2","68d46eec":"### As 687 values are missing from Cabin, its better to drop the column, as this feature would not help us more, in this case","c180a1f5":"### We have combined Sibsp and Parch for EDA, as the features implies the same meaning, and we will try to combine the features into one feature as 'relatives' later. Let's explore it individually now","a4763122":"## **Missing values:** 177","a4359e32":"# **4. Sibsp and Parch**\n### **Missing values**:None","32ec0e10":"### Ticket doesn't seem to contribute much to the predictions as the unique values are too high. Hence dropping that column","0b1a5ccf":"# 7. Cabin\n### Missing values: 687","f9882b71":"### Clearly, **74%** women on board survived the disaster, only **19%** men survived the disaster, gender becomes a huge factor here","c22ae15b":"### From the plot, the average age of 'male' who survived the disaster was less than the one who didnt make it. So lesser the age, more the chances they didnt make it","289b17f5":"# 5. Ticket","9ef2e9fa":"## **Missing values:** None","265869d4":"### As we have 2 missing values, we need to fill the data, so let's do some exploration in 'Embarked'","13f824a6":"### **Missing values:** None","62ef520e":"### Age and Pclass seems to be strongly correlated, in terms of who survived","af71ad68":"### We've seen how pclass is related to how many people survived, lets see how many from Pclass 1 survived, with sex as a factor","562f3642":"### Name in specific does not seem to account in this case, hence dropping this column ","1d035c84":"### As PassengerID is a unique value for each passenger, it would not contribute to the predictions, hence dropping the column","7c59f620":"### Fare seems to have a good correlation with the survived prediction, however, the prices are too high for some tickets, which is an outlier in terms of fare","8819d11c":"### Unfortunately, we do not have any other passenger with similar fare, ans as we are unable to find any specific trend with this 2 customers from other feature info, we will fill the values with the mode, which is 'S' Southampton in this case","8e816b64":"#### Hi all, This is my first notebook submission, and I appreciate your feedback and comments for improving the below analysis. Thanks","0cdb8151":"# **6. Fare**\n### **Missing values**: None","a581d0a6":"### So, as per the plot, there are passengers who paid more in Pclass 1, and the survived count for those passengers are comparitively higher. So fare seems a good determinor","2903a08d":"### For women, the average age of the ones who survived is more than the ones who didnt make it","1e6dd626":"# 10. Passenger ID","331b3095":"# **2. Sex**","93bd4bc6":"## **1. Passenger Class :**\n"}}