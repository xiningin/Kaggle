{"cell_type":{"bc75abdd":"code","81e00afd":"code","dfe35a7a":"code","55b2c67b":"code","15ce8005":"code","e2485e83":"code","fbcf37a6":"code","ed827082":"code","2f3298b5":"code","29eae57d":"code","82a5d6f0":"code","f796aefb":"code","760c2f86":"code","fb2652a0":"markdown","0993c269":"markdown","8d123287":"markdown","eb1e367d":"markdown","bd63901c":"markdown","0a484114":"markdown","4a5fa758":"markdown","5dc0a51c":"markdown","d8584c33":"markdown","1970329b":"markdown","7e3fcd29":"markdown","ee0aa529":"markdown","8421e5f7":"markdown","6d7d0633":"markdown"},"source":{"bc75abdd":"# Make sure we have the latest kaggle-environments installed\n!pip install kaggle-environments --upgrade\n\nfrom kaggle_environments import make, evaluate","81e00afd":"!pip install seaborn --upgrade\nimport seaborn as sns\n\nimport time\nimport pandas as pd\nimport numpy as np","dfe35a7a":"episodeSteps = 10 #default: 400","55b2c67b":"%%writefile submission_strategy_1.py\n\n# Imports helper functions\nfrom kaggle_environments.envs.halite.helpers import *\n\n# Returns best direction to move from one position (fromPos) to another (toPos)\n# Example: If I'm at pos 0 and want to get to pos 55, which direction should I choose?\ndef getDirTo(fromPos, toPos, size):\n    fromX, fromY = divmod(fromPos[0],size), divmod(fromPos[1],size)\n    toX, toY = divmod(toPos[0],size), divmod(toPos[1],size)\n    if fromY < toY: return ShipAction.NORTH\n    if fromY > toY: return ShipAction.SOUTH\n    if fromX < toX: return ShipAction.EAST\n    if fromX > toX: return ShipAction.WEST\n\n# Directions a ship can move\ndirections = [ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST]\n\n# Will keep track of whether a ship is collecting halite or carrying cargo to a shipyard\nship_states = {}\n\n# Returns the commands we send to our ships and shipyards\ndef agent(obs, config):\n    size = config.size\n    board = Board(obs, config)\n    me = board.current_player\n\n    # If there are no ships, use first shipyard to spawn a ship.\n    if len(me.ships) == 0 and len(me.shipyards) > 0:\n        me.shipyards[0].next_action = ShipyardAction.SPAWN\n\n    # If there are no shipyards, convert first ship into shipyard.\n    if len(me.shipyards) == 0 and len(me.ships) > 0:\n        me.ships[0].next_action = ShipAction.CONVERT\n    \n    for ship in me.ships:\n        if ship.next_action == None:\n            \n            ### Part 1: Set the ship's state \n            if ship.halite < 200: # If cargo is too low, collect halite\n                ship_states[ship.id] = \"COLLECT\"\n            if ship.halite > 500: # If cargo gets very big, deposit halite\n                ship_states[ship.id] = \"DEPOSIT\"\n                \n            ### Part 2: Use the ship's state to select an action\n            if ship_states[ship.id] == \"COLLECT\":\n                # If halite at current location running low, \n                # move to the adjacent square containing the most halite\n                if ship.cell.halite < 100:\n                    neighbors = [ship.cell.north.halite, ship.cell.east.halite, \n                                 ship.cell.south.halite, ship.cell.west.halite]\n                    best = max(range(len(neighbors)), key=neighbors.__getitem__)\n                    ship.next_action = directions[best]\n            if ship_states[ship.id] == \"DEPOSIT\":\n                # Move towards shipyard to deposit cargo\n                direction = getDirTo(ship.position, me.shipyards[0].position, size)\n                if direction: ship.next_action = direction\n                \n    return me.next_actions","15ce8005":"env = make(\"halite\", debug=True, configuration={\"episodeSteps\": episodeSteps})\n\nstart_time = time.time()\nenv.run([\"submission_strategy_1.py\", \"random\", \"random\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)\nrun_time = time.time() - start_time","e2485e83":"strategy_performance_report  = pd.DataFrame(columns=['Strategy', 'Halite', 'Runtime (secs)'])\n\n#CSCD: Convert Spawn Collect Deposit\nresult_list = env.state[0]['observation']['players']\n\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '1 P1: CSCD', 'Halite': result_list[0][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '1 P2: Random', 'Halite': result_list[1][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '1 P3: Random', 'Halite': result_list[2][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '1 P4: Random', 'Halite': result_list[3][0], 'Runtime (secs)': run_time}","fbcf37a6":"env = make(\"halite\", debug=True, configuration={\"episodeSteps\": episodeSteps})\n\nstart_time = time.time()\nenv.run([\"submission_strategy_1.py\", \"submission_strategy_1.py\", \"submission_strategy_1.py\", \"submission_strategy_1.py\"])\nenv.render(mode=\"ipython\", width=800, height=600)\nrun_time = time.time() - start_time","ed827082":"result_list = env.state[0]['observation']['players']\n\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '2 P1: CSCD', 'Halite': result_list[0][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '2 P2: CSCD', 'Halite': result_list[1][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '2 P3: CSCD', 'Halite': result_list[2][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '2 P4: CSCD', 'Halite': result_list[3][0], 'Runtime (secs)': run_time}","2f3298b5":"%%writefile submission_strategy_2.py\n\nagent_strategy = {\n    'debug': False,\n    'collect_threshold': 100,\n    'deposit_threshold': 500,\n    'invest_threshold': 4_000,\n    'max_ships': 3,\n    'max_shipyards': 2,\n    'score': 7346\n}    \n\nagent_strategy = {\n    'debug': False,\n    'collect_threshold': 1000,\n    'deposit_threshold': 5000,\n    'invest_threshold': 2_000,\n    'max_ships': 3,\n    'max_shipyards': 2,\n    'score': 8871\n}     \n\nagent_strategy = {\n    'debug': False,\n    'collect_threshold': 1000,\n    'deposit_threshold': 2000,\n    'invest_threshold': 3_000,\n    'max_ships': 5,\n    'max_shipyards': 3,\n    'score': 31410\n}       \n\n\n# Imports helper functions\nfrom kaggle_environments.envs.halite.helpers import *\n\n# Returns best direction to move from one position (fromPos) to another (toPos)\n# Example: If I'm at pos 0 and want to get to pos 55, which direction should I choose?\ndef getDirTo(fromPos, toPos, size, step, me, ship):\n    fromX, fromY = divmod(fromPos[0],size), divmod(fromPos[1],size)\n    toX, toY = divmod(toPos[0],size), divmod(toPos[1],size)\n    \n    #NEW: Avoid collision\n    my_ship_positions = [ship.position for ship in me.ships]\n    my_ship_next_actions = [ship.next_action for ship in me.ships]\n    \n    if agent_strategy['debug']:\n        print('Step:{}, fromPos:{}, toPos:{}, my_ship_positions:{}, my_ship_next_actions:{}'.format(step, fromPos, toPos, my_ship_positions, my_ship_next_actions))    \n    \n    #NEW: Do nothing\/Wait if there is a ship in your next planned cell\n    if fromY < toY and (ship.cell.north.ship == None):\n        return ShipAction.NORTH\n    if fromY > toY and (ship.cell.south.ship == None):\n        return ShipAction.SOUTH\n    if fromX < toX and (ship.cell.east.ship == None):\n        return ShipAction.EAST\n    if fromX > toX and (ship.cell.west.ship == None):\n        return ShipAction.WEST\n    \n    #NEW: Else wait\n    return None\n\n#NEW: evaluate_deconflict_next_actions\ndef evaluate_deconflict_next_actions(board, me):\n    my_ship_positions = [(ship.id, ship.position) for ship in me.ships]\n    my_ship_next_actions = []\n    for ship in me.ships:\n        if ship.next_action:\n            my_ship_next_actions.append((ship.id, ship.next_action.value))\n        else:\n            my_ship_next_actions.append((ship.id,5))\n                                    \n    my_shipyard_next_actions = [(shipyard.id, shipyard.next_action.value) for shipyard in me.shipyards if shipyard.next_action]\n    \n    current_actions = me.next_actions\n    if agent_strategy['debug']:\n        print('my_ship_positions, my_ship_next_actions, my_shipyard_next_actions, current_actions', my_ship_positions, my_ship_next_actions, my_shipyard_next_actions, current_actions)\n    \n    direction_to_XY = {1:(0,+1), 2:(+1,0), 3:(0,-1), 4:(-1,0), 5:(0,0)}\n\n    improved_actions_dict = {}\n    improved_actions = {}\n\n    #Look for shipyard related actions\n    for item in current_actions:\n        if agent_strategy['debug']:\n            print('current_actions', item, current_actions[item])\n        if current_actions[item] in ['CONVERT', 'SPAWN']:\n            improved_actions[item] = current_actions[item]\n        \n    for item in zip(my_ship_positions, my_ship_next_actions):\n        if agent_strategy['debug']:\n            print('item', item)\n        ship_id = item[0][0]\n        next_position = tuple([a + b for a, b in zip(item[0][1], direction_to_XY[item[1][1]])])\n        if agent_strategy['debug'] and (ship_id in current_actions):\n            print('ship_id, next_position, current_actions[ship_id]', ship_id, next_position, current_actions[ship_id])\n\n        if (next_position not in improved_actions_dict) and (ship_id in current_actions):\n            improved_actions_dict[next_position] = ship_id\n            improved_actions[ship_id] = current_actions[ship_id]    \n    \n    if agent_strategy['debug']:\n        print('edna, Step:{}, my_ship_positions:{}, my_ship_next_actions:{}, current_actions:{}, improved_actions:{}'.format(board.step+1, my_ship_positions, my_ship_next_actions, current_actions, improved_actions))    \n    return improved_actions\n    \n# Directions a ship can move\ndirections = [ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST]\n\n# Will keep track of whether a ship is collecting halite or carrying cargo to a shipyard\nship_states = {}\n\n# Returns the commands we send to our ships and shipyards\ndef agent(obs, config):\n    size = config.size\n    board = Board(obs, config)\n    me = board.current_player\n        \n    # If there are no shipyards, convert first ship into shipyard.\n    if len(me.shipyards) == 0 and len(me.ships) > 0:\n        me.ships[0].next_action = ShipAction.CONVERT\n        \n        #my_ship_positions = [ship.position for ship in me.ships]\n        #print('IF 1 Step:{}, ships:{}, shipyards:{}, halite:{}, ship_positions:{}'.format(\n        #                board.step+1, len(me.ships), len(me.shipyards), me.halite, my_ship_positions))\n        \n    # If there are no ships, use first shipyard to spawn a ship.\n    if len(me.ships) == 0 and len(me.shipyards) > 0:\n        me.shipyards[0].next_action = ShipyardAction.SPAWN\n        \n        #my_ship_positions = [ship.position for ship in me.ships]\n        #print('IF 2 Step:{}, ships:{}, shipyards:{}, halite:{}, ship_positions:{}, shipyard.position:{}'.format(\n        #                board.step+1, len(me.ships), len(me.shipyards), me.halite, my_ship_positions, me.shipyards[0].position))\n        \n        \n    for ship in me.ships:\n        if ship.next_action == None:\n            \n            ### Part 1: Set the ship's state \n            if ship.halite < agent_strategy['collect_threshold']: # If cargo is too low, collect halite\n                ship_states[ship.id] = \"COLLECT\"\n                \n            if ship.halite > agent_strategy['deposit_threshold']: # If cargo gets big, deposit halite\n                ship_states[ship.id] = \"DEPOSIT\"\n                #NEW: \n                #me.ships[0].next_action = ShipAction.CONVERT\n\n            #NEW: CSCD+Invest    \n            if (me.halite > agent_strategy['invest_threshold']) and (len(me.ships) < agent_strategy['max_ships']): # If Player 1 halite gets very big, spawn a new ship\n                if ship.position != me.shipyards[0].position:\n                    ship_states[ship.id] = \"SPAWN\"\n                    #if agent_strategy['debug']:\n                    print('Step:{}, Strategy 2: CSCD+Invest called 1, ships:{}, shipyards:{}, halite:{}'.format(board.step+1, len(me.ships), len(me.shipyards), me.halite))    \n                \n            ### Part 2: Use the ship's state to select an action\n            if ship_states[ship.id] == \"COLLECT\":\n                # If halite at current location running low, \n                # move to the adjacent square containing the most halite\n                if ship.cell.halite < 100:\n                    #NEW: Avoid collision\n                    #neighbors = [ship.cell.north.halite, ship.cell.east.halite, \n                    #             ship.cell.south.halite, ship.cell.west.halite]\n                    neighbors = []\n                    if ship.cell.north.ship == None:\n                        neighbors.append(ship.cell.north.halite)\n                    else:\n                        neighbors.append(-1)\n                    if ship.cell.east.ship == None:\n                        neighbors.append(ship.cell.east.halite)\n                    else:\n                        neighbors.append(-1)    \n                    if ship.cell.south.ship == None:\n                        neighbors.append(ship.cell.south.halite)\n                    else:\n                        neighbors.append(-1)    \n                    if ship.cell.west.ship == None:\n                        neighbors.append(ship.cell.west.halite)    \n                    else:\n                        neighbors.append(-1)    \n                    if agent_strategy['debug']:\n                        print('Step:{}, Strategy 2: CSCD+Invest called 2, ships:{}, shipyards:{}, halite:{}, neighbors:{}'.format(board.step+1, len(me.ships), len(me.shipyards), me.halite, neighbors))        \n                            \n                    best = max(range(len(neighbors)), key=neighbors.__getitem__)\n                    ship.next_action = directions[best]\n                    \n            if ship_states[ship.id] == \"DEPOSIT\":\n                # Move towards shipyard to deposit cargo\n                direction = getDirTo(ship.position, me.shipyards[0].position, size, board.step+1, me, ship)\n                if direction: ship.next_action = direction\n\n            #NEW: CSCD+Invest\n            if (ship_states[ship.id] == \"SPAWN\") and (len(me.ships) < agent_strategy['max_ships']):\n                #ship.next_action = ShipAction.CONVERT\n                my_ship_positions = [ship.position for ship in me.ships]\n                if me.shipyards[0].position not in my_ship_positions:\n                    me.shipyards[0].next_action = ShipyardAction.SPAWN\n                    if agent_strategy['debug']:\n                        print('Step:{}, Strategy 2: CSCD+Invest called 3, ships:{}, shipyards:{}, halite:{}, ship_positions:{}, shipyard.position:{}'.format(\n                            board.step+1, len(me.ships), len(me.shipyards), me.halite, my_ship_positions, me.shipyards[0].position))\n\n    improved_actions = evaluate_deconflict_next_actions(board, me)\n    \n    return improved_actions","29eae57d":"env = make(\"halite\", debug=True, configuration={\"episodeSteps\": 400}) \n\nstart_time = time.time()\nenv.run([\"submission_strategy_2.py\", \"submission_strategy_1.py\", \"submission_strategy_1.py\", \"submission_strategy_1.py\"])\nenv.render(mode=\"ipython\", width=800, height=600)\nrun_time = time.time() - start_time","82a5d6f0":"result_list = env.state[0]['observation']['players']\n\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '3 P1: CSCD + Invest', 'Halite': result_list[0][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '3 P2: CSCD', 'Halite': result_list[1][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '3 P3: CSCD', 'Halite': result_list[2][0], 'Runtime (secs)': run_time}\nstrategy_performance_report.loc[len(strategy_performance_report)] = {'Strategy': '3 P4: CSCD', 'Halite': result_list[3][0], 'Runtime (secs)': run_time}","f796aefb":"strategy_performance_report","760c2f86":"#sns.set_theme(style=\"white\")\n\n# Plot miles per gallon against horsepower with other semantics\nwith sns.axes_style(\"whitegrid\", {'grid.linestyle': '--'}):\n    myplot = sns.relplot(x=\"Strategy\", y=\"Halite\", hue=\"Strategy\", size=\"Strategy\",\n                sizes=(500, 500), alpha=1, palette=\"pastel\", legend=\"brief\", #, \u201cbrief\u201d, \u201cfull\u201d, or False\n                height=10, data=strategy_performance_report)\n\n#Slighlty rotate the x-axis labels so model names to not overlap\nmyplot.set_xticklabels(rotation=45);\n\n#Add title and rename axes        \nmyplot.set(title='Halite, spaceships strategy performance', xlabel='Strategy', ylabel='Halite (higher is better --->)');\n\n#Add annotation for CSCD: Convert Spawn Collect Deposit vs Random x 3\nx_location, y_location = 0, 6_500\nmyplot.axes[0][0].annotate('CSCD vs Random x 3', xy=(x_location+1.7, y_location-1_000), xytext=(x_location, y_location+0.01),\n             arrowprops=dict(facecolor='#C4F0EF', shrink=0.05, headwidth=20, width=5))\n\n#Add annotation for CSCD vs CSCD x 3\nx_location, y_location = 4, 5_400\nmyplot.axes[0][0].annotate('CSCD vs CSCD x 3', xy=(x_location+1.7, y_location-1_000), xytext=(x_location, y_location+0.01),\n             arrowprops=dict(facecolor='#C4F0EF', shrink=0.05, headwidth=20, width=5))\n\n#Add annotation for CSCD + Invest vs CSCD x 3\nx_location, y_location = 6.3, 10_700\nmyplot.axes[0][0].annotate('CSCD + Invest vs CSCD x 3', xy=(x_location+1.5, y_location+1_000), xytext=(x_location, y_location+0.01),\n             arrowprops=dict(facecolor='#C4F0EF', shrink=0.05, headwidth=20, width=5))\n\n#Add Tuning Legend\nx_location, y_location, y_delta = 7.1, 2_500, 500\nmyplot.axes[0][0].annotate('Author: George Zoto', xy=(x_location, y_location+y_delta), size='x-large')\nmyplot.axes[0][0].annotate('Legend for different strategies', xy=(x_location, y_location), size='x-large')\nmyplot.axes[0][0].annotate('Random: Random', xy=(x_location, y_location-y_delta), size='large')\nmyplot.axes[0][0].annotate('CSCD: Convert Spawn Collect Deposit', xy=(x_location, y_location-2*y_delta), size='large')\nmyplot.axes[0][0].annotate('CSCD + Invest (new ship)', xy=(x_location, y_location-3*y_delta), size='large')","fb2652a0":"### Strategy performance","0993c269":"### Introduction and context\n\nHalite is an online multiplayer game created by Two Sigma. \nIn the game, four participants command ships to collect an energy source called halite. \nThe player with the most halite at the end of the game wins.  \nhttps:\/\/www.kaggle.com\/alexisbcook\/getting-started-with-halite\n\nhttps:\/\/www.kaggle.com\/sam\/halite-sdk-overview\n\nhttps:\/\/github.com\/Kaggle\/kaggle-environments\/tree\/master\/kaggle_environments\/envs\/halite","8d123287":"### Gameplay 1: CSCD vs Random x 3","eb1e367d":"### Creating, simulating and benchmarking our own agents","bd63901c":"### How many steps do we need to run a simulation for","0a484114":"### Strategy 1: Convert Spawn Collect Deposit (CSCD)","4a5fa758":"### Gameplay 3: CSCD+Invest vs Random x 3","5dc0a51c":"### Gameplay 2: CSCD vs CSCD x 3","d8584c33":"### Strategy performance","1970329b":"### Strategy 2: CSCD + Invest + Avoid Collision: create new shipyard and new ship if Halite > threshold","7e3fcd29":"### Exploring the Halite SDK\nhttps:\/\/www.kaggle.com\/sam\/halite-sdk-overview","ee0aa529":"### Schema Cheat Sheet\n\n```\nBoard: {\n    __init__(observation: Dict[str, Any], configuration: Dict[str, Any], next_actions: Optional[List[Dict[str, str]]] = None) -> None\n    cells -> Dict[Point, Cell]\n    ships -> Dict[ShipId, Ship]\n    shipyards -> Dict[ShipyardId, Shipyard]\n    players -> Dict[PlayerId, Player]\n\n    current_player_id -> PlayerId\n    current_player -> Player\n    opponents -> List[Player]\n\n    configuration -> Configuration\n    observation -> Dict[str, Any]\n    step -> int\n\n    next() -> Board\n\n    __deepcopy__(_) -> Board\n    __getitem__(point: Union[Tuple[int, int], Point]) -> Cell\n    __str__() -> str\n}\n\nCell: {\n    position -> Point\n    halite -> float\n\n    ship_id -> Optional[ShipId]\n    ship -> Optional[Ship]\n\n    shipyard_id -> Optional[ShipyardId]\n    shipyard -> Optional[Shipyard]\n\n    north -> Cell\n    south -> Cell\n    east -> Cell\n    west -> Cell\n\n    neighbor(offset: Point) -> Cell\n}\n\nShip: {\n    id -> ShipId\n    halite -> int\n\n    position -> Point\n    cell -> Cell\n\n    player_id -> PlayerId\n    player -> Player\n\n    next_action -> Optional[ShipAction]\n}\n\nShipyard: {\n    id -> ShipyardId\n\n    position -> Point\n    cell -> Cell\n\n    player_id -> PlayerId\n    player -> Player\n\n    next_action -> Optional[ShipyardAct\n}\n\nPlayer: {\n    id -> PlayerId\n    is_current_player -> bool\n    halite -> int\n    next_actions -> Dict[str, str]\n\n    ship_ids -> List[ShipId]\n    shipys -> List[Ship]\n\n    shipyard_ids -> List[ShipyardId]\n    shipyards -> List[Shipyard]\n}\n\nPoint: {\n    x -> int\n    y -> int\n\n    translate(offset: Point, size: int) -> Point\n    to_index(size: int) -> int\n\n    @staticmethod\n    from_index(index: int, size: int) -> Point\n\n    __abs__() -> Point\n    __add__(other: Point) -> Point\n    __eq__(other: Point) -> bool\n    __floordiv__(denominator: int) -> Point\n    __hash__() -> int\n    __mod__(mod: int) -> Point\n    __mul__(factor: int) -> Point\n    __neg__() -> Point\n    __str__() -> str\n    __sub__(other: Point) -> Point\n}\n```","8421e5f7":"### Visualize strategy performance","6d7d0633":"### Strategy performance"}}