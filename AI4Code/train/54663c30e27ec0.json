{"cell_type":{"a16a504c":"code","ae32add1":"code","acd23d8a":"code","9b354876":"code","2ed24218":"code","22dab241":"code","e357caa0":"code","eb916ff7":"code","18a84f36":"code","2102d035":"code","dcd7126d":"code","de7405ee":"code","4e0ee2a9":"code","18862b16":"code","c4905296":"code","8e440ef3":"code","9f392f70":"code","22daf894":"code","5364e2ce":"code","34266604":"code","fe1f5f3f":"code","02652bd5":"code","831106f4":"code","ef8978f4":"code","da75b119":"code","305583ac":"code","a6b17423":"code","67f84739":"code","8fa55a88":"code","75f59df9":"code","487417e3":"code","42df5900":"code","9c85cf0d":"code","6a07b34d":"code","3ad60564":"code","ca312c8e":"code","e0b36d14":"code","9421d58c":"code","a7aa6fb0":"code","e25bbf8d":"code","cebb8a8c":"code","192af25a":"markdown","00b96c31":"markdown","287d2058":"markdown","7839daca":"markdown","5b671ef3":"markdown","eabd15e7":"markdown","7897ded8":"markdown","e474f581":"markdown","5a1c044c":"markdown","63b94c19":"markdown","7dcea237":"markdown","568686d1":"markdown","34d02eeb":"markdown","5c8a2690":"markdown","ead13993":"markdown","3f2398ab":"markdown","2f2f83d1":"markdown","98af6e88":"markdown","b93eef70":"markdown","43221aa0":"markdown","c93f3fc5":"markdown","da0a64c4":"markdown","6c893cae":"markdown","2793ec7c":"markdown","605e7872":"markdown","8dff8122":"markdown","da2e20de":"markdown","42af1ac8":"markdown","a27c79bf":"markdown","55a57344":"markdown","8da0e844":"markdown","7e9c1d12":"markdown","31cffe33":"markdown","bc1d134a":"markdown","fdb23e60":"markdown"},"source":{"a16a504c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-pastel') #theme of grids\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')","ae32add1":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerID = test_df['PassengerId']","acd23d8a":" train_df.info()","9b354876":"def bar_plot(variable):\n    \"\"\"\n    input: variable example: Sex\n    output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    # count number of categroical variable\n    varValue = var.value_counts()\n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.show() \n    print(\"{}: \\n {}\" .format(variable,varValue))\n    \n    \n    ","2ed24218":"category1 = ['Survived','Sex','Pclass','Embarked','SibSp','Parch']\nfor i in category1:\n    bar_plot(i)\n    ","22dab241":"category2 = ['Cabin', 'Name', 'Ticket']\nfor i in category2:\n    print(\"{}: \\n\" .format(train_df[i].value_counts()))","e357caa0":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 100)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","eb916ff7":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","18a84f36":"#Pclass vs Survived\ntrain_df[['Pclass','Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by='Survived', ascending=False) ","2102d035":"#Sex vs Survived\ntrain_df[['Sex','Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by='Survived', ascending=False) ","dcd7126d":"#SibSp vs Survived\ntrain_df[['SibSp','Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by='Survived', ascending=False) ","de7405ee":"# Parch vs Survived\ntrain_df[['Parch','Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by='Survived', ascending=False) ","4e0ee2a9":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","18862b16":"train_df.loc[detect_outliers(train_df,['Age','SibSp','Parch','Fare'])]","c4905296":"#Drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","8e440ef3":"train_df_len = len(train_df )\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop = True)","9f392f70":"train_df.columns[train_df.isnull().any()]\n#Which columns have null value?","22daf894":"train_df.isnull().sum()","5364e2ce":"# Find null values\ntrain_df[train_df['Embarked'].isnull()]","34266604":"#According to the ticket price, we can find out from which port he\/she embarked.\nwhere = train_df['Fare'].where(train_df['Fare'] == 80)\nwhere.dropna(inplace=True)\nwhere\n#This method is aborted Fare == 80 just they are\n# Another way;","fe1f5f3f":"train_df.boxplot(column='Fare',by='Embarked')\nplt.show()\n# Our subject's Fare are 80, we can assume they embarked from C, because of C's mean more closer to 80 other than.","02652bd5":"train_df['Embarked'] = train_df['Embarked'].fillna('C')\ntrain_df[train_df['Embarked'].isnull()]","831106f4":"train_df[train_df['Fare'].isnull()]","ef8978f4":"train_df[train_df['Pclass']==3]\n#\u00f6nce Pclass == 3'leri filtreledi\n#daha sonra bu de\u011ferler i\u00e7erisinde Fare'ler istendi, yani mean maaa\u015f \u015fudur ","da75b119":"train_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass']==3]['Fare']))\ntrain_df[train_df[\"Fare\"].isnull()]","305583ac":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\") \n#annot --> write values\n#.2f meant is .00 if you write .3f it will be .000 \nplt.show()\n\n# Comments: Fare feature seems to have correlation with the survived feature (+0,26)","a6b17423":"g = sns.factorplot(x='SibSp',y='Survived',data=train_df,kind='bar',size=6)\ng.set_ylabels('Survived probability') \nplt.show()\n\n\n# Comment: Having a lot of SibSp have less chance to survive\n# if SibSp <= 2 passenger has more chance to survive\n# We can consider a new feature describing these categories","67f84739":"g = sns.factorplot(x='Parch',y='Survived',data=train_df,kind='bar',size=6)\ng.set_ylabels('Survived probability') \nplt.show()","8fa55a88":"g = sns.factorplot(x='Pclass',y='Survived',data=train_df,kind='bar',size=6)\ng.set_ylabels('Survived probability') \nplt.show()","75f59df9":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","487417e3":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist, \"Age\",bins=20)\ng.add_legend()\nplt.show()","42df5900":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","9c85cf0d":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","6a07b34d":"train_df[train_df[\"Age\"].isnull()] \n# 12 of 256 rows doesnt have NaN","3ad60564":"sns.factorplot(x=\"Sex\",y=\"Age\",data = train_df, kind=\"box\")\nplt.show()","ca312c8e":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data = train_df, kind=\"box\")\nplt.show()","e0b36d14":"sns.factorplot(x=\"Parch\",y=\"Age\", data = train_df, kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\", data = train_df, kind=\"box\")\nplt.show()","9421d58c":"# Add Sex feature\n\ntrain_df['sexnumber'] = [1 if i == \"male\" else 0 for i in train_df['Sex']]","a7aa6fb0":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\",\"sexnumber\"]].corr(), annot = True)\nplt.show()","e25bbf8d":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"])&(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","cebb8a8c":"train_df[train_df[\"Age\"].isnull()]\n# already cleaned to missing values","192af25a":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","00b96c31":"<hr >\n<a id = '5'><\/a><br>\n\n###  [b. Numerical Variable:](#5)\n","287d2058":"0ur Variable Features:\n1. PassengerId: Unique numer of each passenger\n1. Survived: 0 = No 1 = Yes\n1. Pclass: Ticket class 1 = 1st 2 = 2nd 3 = 3rd\n1. Name\n1. Sex\n1. Age\n1. SibSp: of siblings \/ spouses aboard the Titanic\n1. Parch: of parents \/ children aboard the Titanic\n1. Ticket: Ticket number\n1. Fare: Passenger fare (ticket price)\n1. Cabin: Cabin number\n1. Embarked: Port of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton\n\n\n* pclass: A proxy for socio-economic status (SES)\n* 1st = Upper\n* 2nd = Middle\n* 3rd = Lower\n* \n* age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n* \n* sibsp: The dataset defines family relations in this way...\n* Sibling = brother, sister, stepbrother, stepsister\n* Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* \n* parch: The dataset defines family relations in this way...\n* Parent = mother, father\n* Child = daughter, son, stepdaughter, stepson\n* Some children travelled only with a nanny, therefore parch=0 for them.","7839daca":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","5b671ef3":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","eabd15e7":"# Introduction\nThe sinking of the Titanic is one of the most notorious shipwrecks in history. On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\n<font color = blue>\nContent\n\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    \n    1. [Univariate Variable Analysis](#3)\n    \n        1. [Categorical Variable Analysis](#4)\n    \n        1. [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    1. [Find missing value](#9)\n    \n    1. [Fill missing value](#10)\n1. [Visualization](#11)\n    1. [Correlation Between SibSp - Parch - Age - Fare - Survived](#12)\n    1. [SibSp with Survived features](#13)\n    1. [Parch with Survived](#14)\n    1. [Pclass with Survived](#15)\n    1. [Age -- Survived](#16)\n    1. [Pclass -- Survived -- Age](#17)\n    1. [Embarked -- Sex -- Pclass -- Survived](#18)\n    1. [Embarked -- Sex -- Fare -- Survived](#19)\n1. [Fill Missing: Age Feature](#20)\n    ","7897ded8":"<hr > \n\n<a id = '1'><\/a><br>\n### [3. Basic Data Analysis](#6)\n","e474f581":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","5a1c044c":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","63b94c19":"<a id = '1'><\/a><br>\n#### [A. Find missing value](#9)\n   ","7dcea237":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","568686d1":"* Sex is not informative for age prediction, age distrubition seems to be same","34d02eeb":"<a id = '1'><\/a><br>\n#### [A. Fill missing value](#10)\n\n*  Embarked has 2 missing values\n*  Fare has only 1 missing values\n   ","5c8a2690":"<hr >\n<a id = '1'><\/a><br>\n\n## [2. Variable Description](#2)\n\n<hr >","ead13993":"<a id = \"11\"><\/a><br>\n# Visualization","3f2398ab":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","2f2f83d1":"* For Parch\n    - If feature of parch little than 3 somebody must younger than 30\n* For SibSp\n    - If feature of ","98af6e88":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","b93eef70":"<hr > \n\n<a id = '1'><\/a><br>\n### [4. Outlier Detection](#7)","43221aa0":"* Age is not correlated with sex but it correlated with SibSp Parch Pclass ","c93f3fc5":"<a id = '1'><\/a><br>\n### [1. Load and Check Data](#1)","da0a64c4":"* Age <= 10 has a high survival rate\n* Elder passengers (est. 80 year)\n* Large number of 20 years old did not survive.\n* Most passengers are in 15-35 age range\n* Use Age distrubition for missing value of age features","6c893cae":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","2793ec7c":"For Age median values;\n1st class passengers are older than 2nd, and 2nd older than 3rd.\nElder are rich, younger are poor :D","605e7872":"<a id = \"13\"><\/a><br>\n## Sibsp with Survived features","8dff8122":"* Females have much better survival rate than males\n* Males have better survival rate in pclass in C\n* Embarked and sex will be use in training","da2e20de":"<hr >\n<a id = '3'><\/a><br>\n\n## [3. Univariate Variable Description](#3)\n\n   \n*[a. Categorical Variable:](#4) Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsb and Parch\n    \n*[b. Numerical Variable:](#5) Age, Fare and PassengerId\n\n","42af1ac8":"* float64: Age and Fare\n* int64: PassengerId, Survived, Pclass, Sibsp, Parch\n* object: Name, Sex, Ticket, Cabin, Embarked","a27c79bf":"<hr >\n<a id = '4'><\/a><br>\n\n### [a. Categorical Variable:](#4)\n    \n    ","55a57344":"* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","8da0e844":"#### Description\n* Pclass is important feature for model training  ","7e9c1d12":"* Passengers who pay higher fare have better survival rate\n* Fare can be used as categorical for training","31cffe33":"<hr > \n\n<a id = '1'><\/a><br>\n### [4. Missing Value](#8)\n","bc1d134a":"sex feature","fdb23e60":"<a id = \"16\"><\/a><br>\n## Age -- Survived"}}