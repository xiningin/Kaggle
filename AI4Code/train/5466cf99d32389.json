{"cell_type":{"c399d4ce":"code","60090225":"code","54108d50":"code","7090a483":"code","b2498124":"code","525296ec":"code","33af2e21":"code","3fdf3708":"code","d44f7fb0":"code","93cd2a15":"code","2824152a":"code","feba0991":"code","1ce41923":"code","f9956943":"code","a1ff7666":"code","99883b56":"markdown","3c7d667a":"markdown","68756592":"markdown","13aee2fe":"markdown","f6556c13":"markdown","38906076":"markdown","4a07acdf":"markdown","b7d29a34":"markdown","0469276b":"markdown","e09c568b":"markdown","273c8e3f":"markdown","6e8e0740":"markdown"},"source":{"c399d4ce":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set_palette('husl')\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import preprocessing\nfrom sklearn.svm import SVC","60090225":"iris = pd.read_csv('..\/input\/iris\/Iris.csv',index_col=0)","54108d50":"iris.head()","7090a483":"iris.shape","b2498124":"iris.info()","525296ec":"iris.describe()","33af2e21":"iris['Species'].value_counts()","3fdf3708":"sns.pairplot(iris, hue='Species', markers='+')\nplt.show()","d44f7fb0":"plt.figure(figsize=(7,5))\nsns.heatmap(iris.corr(), annot=True, cmap='cubehelix_r')\nplt.show()","93cd2a15":"#for classsification we have to encode it.\nlabel_encoder = preprocessing.LabelEncoder()\niris['Species']= label_encoder.fit_transform(iris['Species']) ","2824152a":"X=iris.iloc[:,0:4]\ny=iris['Species']","feba0991":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)","1ce41923":"models = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n# evaluate each model in turn\nresults = []\nmodel_names = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\ncv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\nresults.append(cv_results)\nmodel_names.append(name)\nprint('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","f9956943":"model = SVC(gamma='auto')\nmodel.fit(X_train, y_train)\nprediction = model.predict(X_test)","a1ff7666":"print(f'Test Accuracy: {accuracy_score(y_test, prediction)}')\nprint(f'Classification Report: \\n {classification_report(y_test, prediction)}')","99883b56":"**Support Vector Classifier (SVC) is performing better than other algorithms.\nLet\u2019s train SVC model on our training set and predict on test set in the next step.**","3c7d667a":"**As we can see species is highly correlated with PetalLenghtCm and PetalWidthCm**","68756592":"**Now checking the accuracy of our model using\naccuracy_score(y_test, prediction)\ny_test: actual values of X_test\nprediction: predicted values of X_test.\n2.Printing out the classification report using\nclassification_report(y_test, prediction).**","13aee2fe":"**Model Building**","f6556c13":"**Heatmap\nPlotting the heatmap to check the correlation.\ndataset.corr() is used to find the pairwise correlation of all columns in the dataframe.**","38906076":"**X is having all the dependent variables.\nY is having an independent variable (here in this case \u2018Species\u2019 is an independent variable).**\n","4a07acdf":"**Models Testing - we will try all the classification models**","b7d29a34":"**So we finally have an accuracy of 96.67 with a suppport of 30 with good f1-scores**","0469276b":"**1.We are defining our SVC model and passing gamma as auto\n2.After that fitting\/training the model on X_train and Y_train using .fit() method\n3.Then we are predicting on X_test using .predict() method**","e09c568b":"**Importing Data Sets**","273c8e3f":"**Train Test split\nSplitting our dataset into train and test using train_test_split(), what we are doing here is taking 80% of data to train our model, and 20% that we will hold back as a validation dataset:**","6e8e0740":"**Pair plot\nPlotting multiple pairwise bivariate distributions in a dataset using pairplot:**"}}