{"cell_type":{"d61ab091":"code","97dd0d35":"code","5cd2af6c":"code","f99af3b4":"code","b2490a09":"code","906992d3":"code","bfbfaf3c":"code","7bfa5426":"code","448b1c10":"code","e95584d8":"code","16670b92":"code","601fdbe7":"code","a1de3f52":"code","8cb43b1d":"code","07cc597b":"code","63e33bfa":"code","9369cb2b":"code","ea470946":"code","929a3463":"code","f1c7360c":"code","db8e4030":"code","fcc41fdf":"code","b794298e":"code","09e3a950":"code","1ea92f8b":"code","93120d02":"code","dafc0a95":"code","b3864c4d":"code","35f2e9a6":"code","30d00bb3":"code","8555e2a7":"code","11375b86":"code","603f89d5":"code","c6d9f468":"code","5105e3de":"code","34e87037":"code","f524f8ab":"code","8012cd46":"code","2ecc4d73":"code","6916869a":"code","5c23be1c":"code","767808b0":"code","ca13bd37":"code","eb48bdd6":"code","ece492f1":"code","7c6d746c":"code","6b50efd9":"code","d17a8f5e":"code","867cfb7c":"code","cf3e8769":"code","ecabf51d":"code","27a5dfeb":"code","78b72561":"code","acb36730":"code","683e40b5":"code","caafadae":"markdown","9a5e2693":"markdown","65b613f7":"markdown","46f73410":"markdown","b81d9a8f":"markdown","b295d86f":"markdown","8cb5639b":"markdown","f5286a08":"markdown","f71ebf96":"markdown","1472e185":"markdown","a2a2da4d":"markdown","6cc8274c":"markdown","3a4649bc":"markdown","13c46a2b":"markdown","0d55626e":"markdown"},"source":{"d61ab091":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97dd0d35":"L = [11,12,13,14]\nprint(L)","5cd2af6c":"# i. WAP to add 50 and 60 to L.\nL.append(50)\nL.append(60)\nprint(L)","f99af3b4":"# ii. WAP to remove 11 and 13from L.\nL.remove(11)\nL.remove(13)\nprint(L)","b2490a09":"# iii.WAP to sort L in ascending order.\nL.sort()\nprint(L)","906992d3":"# iv. WAP to sort L in descending order.\nL.sort(reverse=True)\nprint(L)","bfbfaf3c":"# v. WAP to search for 13 in L.\nprint(L.index(14))","7bfa5426":"# vi. WAP to count the number of elements present in L.\nprint(len(L))","448b1c10":"# vii. WAP to sum all the elements in L.\nsum(L)","e95584d8":"# viii. WAP to sum all ODD numbers in L.\nsum(x for x in L if x%2)","16670b92":"# ix. WAP to sum all EVEN numbers in L.\nsum(x for x in L if not x%2)","601fdbe7":"# x. WAP to sum all PRIME numbers in L.\nfrom math import sqrt\ndef isprime(n):\n    prime_flag = 0\n\n    if(n > 1):\n        for i in range(2, int(sqrt(n)) + 1):\n            if (n % i == 0):\n                prime_flag = 1\n                break\n        if (prime_flag == 0):\n            return True\n        else:\n            return False\n    else:\n        return False\n\nsum(x for x in L if isprime(x))","a1de3f52":"# xi. WAP to clear all the elements in L.\nL.clear()\nprint(L)","8cb43b1d":"# xii. WAP to delete L.\ndel L\n# print(L)","07cc597b":"# Q2. D is a dictionary defined as D= {1:5.6, 2:7.8, 3:6.6, 4:8.7, 5:7.7}.\n\nD= {1:5.6, 2:7.8, 3:6.6, 4:8.7, 5:7.7}\nprint(D)\nprint(type(D))","63e33bfa":"# i. WAP to add new entry in D; key=8 and value is 8.8\nD[8]=8.8\nprint(D)","9369cb2b":"# ii. WAP to remove key=2.\ndel D[2]\nprint(D)","ea470946":"# iii. WAP to check weather 6 key is present in D.\nif 6 in D.keys():\n    print(\"It is present\")\nelse:\n    print(\"It is not present\")","929a3463":"# iv. WAP to count the number of elements present in D.\nprint(len(D))","f1c7360c":"# v. WAP to add all the values present D.\nsum(D.values())","db8e4030":"# vi. WAP to update the value of 3 to 7.1.\nD[3] = 7.1\nprint(D)","fcc41fdf":"# vii. WAP to clear the dictionary.\nD.clear()\nprint(D)","b794298e":"# Q3. S1 is a set defined as S1= [10, 20, 30, 40, 50, 60]. S2 is a set defined as S2= [40, 50, 60, 70, 80, 90].\nS1 = {10,20,30,40,50,60}\nprint(S1)\nprint(type(S1))\n\nS2= {40, 50, 60, 70, 80, 90}\nprint(S2)\nprint(type(S2))","09e3a950":"# i. WAP to add 55 and 66 in Set S1.\nS1.add(55)\nS1.add(66)\nprint(S1)","1ea92f8b":"# ii. WAP to remove 10 and 30 from Set S1.\nS1.remove(10)\nS1.remove(30)\nprint(S1)","93120d02":"# iii. WAP to check whether 40 is present in S1.\nif 40 in S1:\n    print(\"It is present\")\nelse: \n    print(\"It is not present\")","dafc0a95":"# iv. WAP to find the union between S1 and S2.\nS3 = S1.union(S2)\nprint(S3)","b3864c4d":"# v. WAP to find the intersection between S1 and S2.\nS4 = S1.intersection(S2)\nprint(S4)","35f2e9a6":"# vi. WAP to find the S1 - S2.\nS5 = S1-S2\nprint(S5)","30d00bb3":"# i. WAP to print 100 random strings whose length between 6 and 8.\nimport string\nimport secrets\nimport random\n\nX = []\nfor i in range(100):\n    N = random.randint(6,8)\n    res = \"\".join(secrets.choice(string.ascii_letters+string.digits+string.punctuation) for i in range(N))\n    X.append(res)\nprint(X)","8555e2a7":"# ii. WAP to print all prime numbers between 600 and 800.\ndef is_prime(n):\n    if n == 1:\n        return False\n    i = 2\n    while i*i <= n :\n        if n%i == 0:\n            return False\n        i+= 1\n    return True\nprime_list = []\nfor j in range(600,801):\n    if is_prime(j):\n        prime_list.append(j)\nprint(prime_list)\n    ","11375b86":"# iii. WAP to print all numbers between 100 and 1000 that are divisible by 7 and 9.\nnum_list = []\nfor i in range(100,1001):\n    if i%63==0:\n        num_list.append(i)\nprint(num_list)","603f89d5":"# Q5. WAP to create two lists of 10 random numbers between 10 and 30;\nimport random\nr1 = [random.randint(10,30) for _ in range(10)]\nprint(r1)\nr2 = [random.randint(10,30) for _ in range(10)]\nprint(r2)\n","c6d9f468":"# i. Common numbers in the two lists\na = set(r1)\nb = set(r2)\nc = a&b\nprint(c)","5105e3de":"# ii. Unique numbers in both the list\na = set(r1)\nb = set(r2)\nprint(a)\nprint(b)\nprint(a-(a&b))\nprint(b-(b&a))","34e87037":"# iii. Minimum in both the list\nmin_r1 = min(r1)\nmin_r2 = min(r2)\nprint(min_r1)\nprint(min_r2)","f524f8ab":"# iv. Maximum in both the list\nprint(max(r1))\nprint(max(r2))","8012cd46":"# v. Sum of both the lists\nprint(sum(r1))\nprint(sum(r2))","2ecc4d73":"# Q6. WAP to create a list of 100 random numbers between 100 and 900. Count and print the:\nimport random\n\nr = [random.randint(100,900) for _ in range(100)]\nprint(r)","6916869a":"# i. All odd numbers\nr_odd = [x for x in r if x%2!=0]\nprint(r_odd)\nprint(len(r_odd))","5c23be1c":"# ii. All even numbers\nr_even = [x for x in r if x%2 == 0]\nprint(r_even)\nprint(len(r_even))","767808b0":"# iii. All prime numbers\nr_prime = [ x for x in r if is_prime(x)]\nprint(r_prime)\nprint(len(r_prime))","ca13bd37":"# Q7. D is a dictionary defined as D={1:\"One\",2:\"Two\",3:\"Three\",4:\"Four\", 5:\"Five\"}.\nD = {1:\"One\",2:\"Two\",3:\"Three\",4:\"Four\", 5:\"Five\"}\nprint(D)","eb48bdd6":"# WAP to read all the keys and values from dictionary and write to the file in the given below format.\nprint(\"{:<10} {:<10} \".format(\"Keys\",\"Values\"))\nfor key,value in D.items():\n    print(\"{:<10} {:<10} \".format(key,value))","ece492f1":"# Q8. L is a list defined as L={\"One\",\"Two\",\"Three\",\"Four\",\"Five\"}.\nL = [\"One\",\"Two\",\"Three\",\"Four\",\"Five\"]\nprint(L)","7c6d746c":"# WAP to count the length of reach element from a list and write to the file in the given below format:\n# |keys|values|\n# |----|-------|\n# |One |      3|\n# |Two |      3|\n# |Four|      4|\n\nD = {}\nfor i in L:\n    D[i] = len(i)\nprint(\"{:<10} {:<10} \".format(\"Element\",\"Size\"))\nfor key,value in D.items():\n    print(\"{:<10} {:<10} \".format(key,value))\n","6b50efd9":"# Q9. Write to the file 100 random strings whose length between 10 and 15.\nimport string\nimport secrets\nimport random\n\nX = []\nfor i in range(100):\n    N = random.randint(10,15)\n    res = \"\".join(secrets.choice(string.ascii_letters+string.digits+string.punctuation) for i in range(N))\n    X.append(res)\nprint(X)","d17a8f5e":"# Q10. Write to the file all prime numbers between 600 and 800.\ndef is_prime(n):\n    if n == 1:\n        return False\n    i = 2\n    while i*i <= n :\n        if n%i == 0:\n            return False\n        i+= 1\n    return True\nprime_list = []\nfor j in range(600,801):\n    if is_prime(j):\n        prime_list.append(j)\nprint(prime_list)","867cfb7c":"# Q11. WAP to calculate the time taken by a program.\nimport timeit\n\nmysetup = \"from math import sqrt\"\n \nmycode = '''\ndef example(): \n    mylist = [] \n    for x in range(100): \n        mylist.append(sqrt(x))\n'''\nprint(timeit.timeit(setup = mysetup,\n                  stmt = mycode,\n                  number = 100000)) ","cf3e8769":"# approach 2 using time module\n\nimport time\nbegin = time.time()\nfor i in range(5):\n    print(\"Lab Assignment\")\n    \ntime.sleep(1)\nend = time.time()\n\nprint(\"Total runtime of the program is\", end-begin)","ecabf51d":"# Q12. WAP to create a dictionary of student marks in five subjects and you have to find the student having maximum and minimum average marks.\n# n = int(input(\"Enter n : \"))\n# d = {}\n# for i in range(n):\n#     roll = int(input(\"Enter roll no: \"))\n#     name = input(\"Entern name: \")\n#     marks1 = int(input(\"Enter marks1: \"))\n#     marks2 = int(input(\"Enter marks2: \"))\n#     marks3 = int(input(\"Enter marks3: \"))\n#     marks4 = int(input(\"Enter marks4: \"))\n#     marks5 = int(input(\"Enter marks5: \"))\n#     d[roll] = [name,marks1,marks2,marks3, marks4,marks5]\nd = {}\nd[5540] = [87,88, 78, 68,87]\nd[5538] = [98,78,67,55,99]\nd[5537] = [66,89,99,87,76]\nd[5536] = [67,78,89,98,87]\nd[5535] = [89,88,76,66,87]\nprint(\"{:<10} {:<10} {:<10} {:<10} {:<10} {:<10}\".format(\"Roll\", \"Phy\", \"Math\", \"Che\", \"Eng\", \"Hin\"))\nfor key,value in d.items():\n    phy,math,che,eng,hin = value\n    print(\"{:<10} {:<10} {:<10} {:<10} {:<10} {:<10}\".format(key,phy,math,che,eng,hin))","27a5dfeb":"for i in d:\n    d[i].append(sum(d[i])\/5)\nprint(\"{:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10}\".format(\"Roll\", \"Phy\", \"Math\", \"Che\", \"Eng\", \"Hin\", \"Avg\"))\nfor key,value in d.items():\n    phy,math,che,eng,hin,avg = value\n    print(\"{:<10} {:<10} {:<10} {:<10} {:<10} {:<10} {:<10}\".format(key,phy,math,che,eng,hin,avg))","78b72561":"avg_dict = {}\nfor i in d:\n    avg_dict[i] = d[i][-1]\nprint(avg_dict)\n","acb36730":"max_key = max(avg_dict, key=avg_dict.get)\nprint(max_key)\nmin_key = min(avg_dict, key=avg_dict.get)\nprint(min_key)\n","683e40b5":"# Q13. WAP to sort the following number of elements in a list and calculate time taken.\n\nimport timeit\nimport random\nd = {}\nfor i in range(1,6):\n    mysetup = \"import random\"\n\n    mycode = '''def x(): \n                    mylist = [random.randint(0,1000) for _ in range(i*5000)] \n                    mylist.sort()\n            '''\n    time = timeit.timeit(setup = mysetup,stmt = mycode,number = 1000000)\n    d[i*5] = time\nprint(\"{:<30} {:<30}\".format(\"Number of elements(*1000)\", \"Time to sort\"))\nfor key,value in d.items():\n    print(\"{:<30} {:<30}\".format(key,value))","caafadae":"----------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------\n\n\n# Q3. S1 is a set defined as S1= [10, 20, 30, 40, 50, 60].\nS2 is a set defined as S2= [40, 50, 60, 70, 80, 90].\n\ni. WAP to add 55 and 66 in Set S1.\n\nii. WAP to remove 10 and 30 from Set S1.\n\n\niii. WAP to check whether 40 is present in S1.\n\niv. WAP to find the union between S1 and S2.\n\nv. WAP to find the intersection between S1 and S2.\n\nvi. WAP to find the S1 - S2.\n","9a5e2693":"\n\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q13. WAP to sort the following number of elements in a list and calculate time taken.\n\n|Number of elements in list| Time Taken to sort|\n|--------------------------|-------------------|\n|5k |T1|\n|10k|T2|\n|15k|T3|\n|20k|T4|\n|25k|T5|","65b613f7":"\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q8. L is a list defined as L={\"One\",\"Two\",\"Three\",\"Four\",\"Five\"}.\n\nWAP to count the length of reach element from a list and write to the file in the given below\nformat:\n\n|keys|values|\n|----|-------|\n|One| 3|\n|Two| 3|\n|Four| 4|","46f73410":"----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q4. Write the following program.\n\ni. WAP to print 100 random strings whose length between 6 and 8.\n\nii. WAP to print all prime numbers between 600 and 800.\n\niii. WAP to print all numbers between 100 and 1000 that are divisible by 7 and 9.","b81d9a8f":"\n\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n","b295d86f":"\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q9. Write to the file 100 random strings whose length between 10 and 15.","8cb5639b":"----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n# Q2. D is a dictionary defined as D= {1:5.6, 2:7.8, 3:6.6, 4:8.7, 5:7.7}.\n\n\n\ni. WAP to add new entry in D; key=8 and value is 8.8\n\nii. WAP to remove key=2.\n\n\niii. WAP to check weather 6 key is present in D.\n\niv. WAP to count the number of elements present in D.\n\nv. WAP to add all the values present D.\n\nvi. WAP to update the value of 3 to 7.1.\n\nvii. WAP to clear the dictionary.\n\n\n","f5286a08":"----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q5. WAP to create two lists of 10 random numbers between 10 and 30; Find\n\ni. Common numbers in the two lists\n\nii. Unique numbers in both the list\n\niii. Minimum in both the list\n\niv. Maximum in both the list\n\nv. Sum of both the lists","f71ebf96":"![NITH LOGO](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUSEhIVFhUXFxYaFxcXGB4ZHRcdHR4dHRgYHhoaHSkgGBslHRcdITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OGxAQGy0mHyYtLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAOEA4QMBIgACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAABgQFAQMHAgj\/xABJEAACAQMCAwUDCgEKAwgDAAABAgMABBESIQUxQQYTIlFhB3GBFCMyQlKRobHB0bIVMzRDYnKCouHwFlN0JCVzg5Kzw\/FFVML\/xAAaAQACAwEBAAAAAAAAAAAAAAAABAEDBQYC\/8QANxEAAQMCAwMLAgYDAQEAAAAAAQACAwQREiExQVFhBRMicYGRobHB0fAyUhQjM0JiciTh8YIV\/9oADAMBAAIRAxEAPwDuNFFFQpRRRRQhFFFFCEVis1X8T4rDbrqlkCjoDzPuHM1BIAuVIaXGwFyp9applUZZgo8ycD8aS5u1VzcnRYwHT\/zXG3w6D4591EXYyWUh725dz9lTsPTJ2HwFU8+Xfpi\/HQJz8GI853hvDV3cNO0hW9\/2ztIs5l1HyQZ\/HlVV\/wAcySf0ezkfyJzj8BVzZ9nrO3GoRRjH15PER\/ifl8KlX\/F4YIhKclDjT3SNITnlhYwSaMEztXAdQRzlKz6WF39jYdw90tnjHFXwUtEQf2hn9RXvPGWHKBfz\/WpA7cwNbS3kcU7wRIz69GkPpbSyrqwcgg88cjUyw49K+p5rOS3iVC5kkdDjG+MKxPKjmTtcVBrBsiZ3E+ZVWP5ZH\/IP+\/hXgcY4qn07VHH9kY\/Wplj2tdzEzWVwkE7BY5SAeedDOgOpFbzPLIzirO34\/E0dxN4ljt2kEjEbfNjLkY5gb\/dRzBGjij8Y0\/VGzuI8iqFe28qfz9lKnmQDj35IqzsO2lnLgd5pP9sY\/HlVhZ8at5WSNZVLyRLMsZ2YxtjD6TuBvUe97P2c+SYYyckFk8LZGxBK4OR5GjBMNHX6x7KedpX\/AFMLf6m\/gfdW8E6uNSMGHmDkfhW2kefsXJEddlcuh+yx292Rz+INeY+1F3bEJfQEr\/zUH542P4e6o58t\/UFuOoR+DEn6Dw7ho7uOvYU9VkVXcK4xDcLqicN5jqPeOlWFXggi4SbmuabOFis0UUVKhFFFFCEUUUUIRRRRQhFFFFCEUUUUIWK8OwAyTgVovbxIkMkjBUUZJP8Avc+lJEtxc8TcpHqhtAfE5GC\/7n05Dr5VW+TBkMzuTEFMZbuJs0ak\/Lk8Ap3Fu17O\/wAnsE72TkZOar7vP3najhXY7U3fXr99Ifqk5Vff9r3cvSraC3tbCAnKxxr9J25k+p5knoB8KXbzj9ze2M1zZo8UaONDZXvZ40Yi40pv3LeEhdRySN9Irw2Iu6UmfDYrXVQYMFOMI2n9x7dnUE7W6oo0oFAXbC429MDlSrJxK\/upZ1snt4o4H7vMyNI0rgAn6LL3aeIDO5O\/pmJ2Q4lFFGsvdxWlpPpMTTS67i5kbGl2wxG67Y1Ftugqzuez9zHPLNY3KRCcgzRyxd4usDT3qYZSGwACp2OByq\/RIpM4hdPeXNrKbSGZplmtnguJT3UU8BJcgaSHGFbpk4G+2\/TuEQyJDGsoiDqoDCEERj0QMcgY23pVkk4bw+ONLm4VpI5XnyfFI0rkl3EceSASx2xgZqpv\/bDCMiC2kf1kYIPuGo\/lVjYnu0Cmyl23BpzwviVksbA99epbqdtSO2uMg9QdZ\/GtfC+zmtJIV4fPbrNA8TzTXRkZdS42jMj8yByIpXu\/a1et9COGP3KW\/iNV8vtL4if65B7o1FXClkO5GErpvD7niZFvbm2WAxsgnnLrIjxr9WIfSLPpAOQNOevMLPE+ysw4bey6rtLiV7lu5jkOmQSSEIrRkEY0tvjGRneliP2l8SH9cp98amp9n7Wb1fppDJ71K\/wmg0sgU4Sru7tzb3EvEijAWMlvB1Gq2EarNt1Cs5YY5lK9dkXuZYre0imNv3kLX1zMqgyH5RK7RohYELtzYgnAHnRae1uBxoubRwpBB0FZAQfNW07ffVzb3NhfPHJZXpgnjTuwI8I\/d\/8ALaKUeJR0ONt8Hc1U6J7dQosvdl2lktDew3chuPkvcFJFVVklEwOiIqMKZNQwCMasjYU4NGHXxLsRurAHn0NIHFezz20lvIsU93EJnuLtwUaaWUKFhJQlQ0aDPgUdBgdTY3N29\/eLbRyyw26W8c8mnMckpkYiNDqGpFUKxI2OcVVZQtvFexqhu+s3MEo5AHCH9V\/L0rxwvta8Ti3v07t+Qk+q3qenxG3ur1wLivyea8t57jVBbdyyzzMAU7wNmJ35ErpByd8OM1cSR2nEIfC8c8e4DxsGweuGU7GqHQ4elHkd2wp5tWHjBUDENh\/cO3b1HwVwkgIBByDyIrZXO1e54W4D5mtSdjzKfsfwPpyp4sL2OaNZImDKw2I\/L0PpXuOXFkcjuVU9MYgHA4mnRw8juPA+KmUUUVYl0UUUUIRRRRQhFFFFCFio97dpEjSSMFRRkk1vLY50gXsr8TuO5jJFrCQXb7Z\/U+XxPlVcsmEZanRX08AlcS42aMydw9zoF4ijl4rNrbVHaodhyLEfr5np76a767hsoCSCEjQtojGptK41EIN2AzknyzWeIXkNlb62wkUYUcjpXJwCcDwrk7t0pRVp7SYcRvBHPHNGFkkiBb5GpOQE+3bkY1MBnIydthEceHM67SpqKjnLNaLNGg9TvJ2lWXaK+MZivwyz2OEMiYDCMc0uozjfGfEPIZG4wZVlwmSC9eS3Cm1ugXmTONEoAxKo6iRcBh5qD1qv\/wCDkZGSG7ZbCbMjQKFKaX8TCOTmkT5yQPPbGTS3229pOM29gcY2afn6YjB930j8KYZG55sEuBdXHE7jhXCnZtPeXPiKR5Mjxhjq0rqyIEzvjb0FIfaP2h3lzlVfuIj9WM4JHq\/P7sUpOxJLMSSTkknJJ8yTuTVja8LBAZm2PQfvTT+ZpW4pPnYmqakkndhjF1WdfU\/ef3rfJbOq6mXAzjfn93Sr6G3VfoqB+f31rv4SyEDntilP\/ql0gAFm3zJWyeRS2JznOu62QHz2S9UiyQF1BGQTW9OEueZAqTbcNKsG1A49KaqK6AscGuzskoOT6jG0uYbXGu662PwtDyyPcajycH8m+8Va0GsRlbOzRx810UnJtK\/Vg7MkuXVsyHBxvyxWnFS+KOTIcggchmoldJTPc+IOccyuSqWMZK5rNAcrpr7Oe0C8tcKX76P7EpJI9z8x8c10Lh\/GLDiroyySW94qkDS+iTSd2UEbSpnfTvjGcbVx2CxZk1Dz2Hn51FGQeoIO3Qg+fmDVRbDKSGnMaquSnexoc4WB04rsnFuF2tpd2iz+GzVZnEkzFka7OkI07t17vVgucbbb177P8VTu73iaoiLFE6SLEcwTvECwkjfbUDnRnHMcztVL2J9pPK34gdSnYTEZ+Eg6j+199OnaDgBmtY7G2EcVq4xKy7lYuemMciWO2rOwpOSNzDYqiyvrQieBGkjwJY0Zo33K6lBKnzIzj4UnXNvLwubvIsvaOfEnVD\/vkfgelX1lwG2sy908srMFbVNcTM+lebfSOlRtyAqbw68ivbcSKrGKUNgOunUuSA2D9U4yD1BBpeSPFmMiNCr6eo5skOF2nUb\/AGI1CmWN4k0ayxtqRhkH\/fI1LrnkDPwu60Nk2kx2P2D+hHXzG\/Q0\/wAbggEHIPI0RSYhY6jVTUwCIgtN2nMH06wdVsoooqxLoooooQiisVE4lerDE8r8lBP+lQTYXKACTYJa7b8UclLKA\/OzfSI+qp\/LP5A1dcC4UlrCIk3wMserN1P+\/Sl7sNYtK8l\/Nu8hIjz0XkT+g9B61jt2jymBRHLcWweT5TDbOA7Pj5lWIZSI9WSdxvpztVMIxHnDt06k9VOEYFO3Z9XF3+tAoBubiG4N\/wAQtv8As8sZiAB1myjJ3EqDIZXwC7DIGkdMmr\/s9wj5OzdxMr2EilkibxCInmI25dyRk6Ty6bbVT9mr27S5ht5XheOSKQm3jBb5GiDEZMxJMxYnSdXM7jGCKovaf2mSFBw20CooAEvdgKEXpEoXYeZ9PfTcbC91gkAFVe0Ttz3+bS0Om2Xwsy7d7jbSMcohj\/Fjy5oVZijLEKBuf9\/dU694cVGVOcDf9\/dTxmigcIybE\/M05HSyvY57W3A1VfVxwZzpIIOAdj7\/APf414sOHD6T\/Bf3\/arSsvlCtjkHNtF89Vucl0EkbhM424bSOO5FFSeHWZlljiXm5Vfdk7n4DJ+FNEnB4VsZjoBdLpoxIQNWkMF5+74VlBpcteepbEQDqSB35X70nUVfcb7NNbyOneBgsYlBwQSpbSAR51Q1DgWmxVkUzJm4mG4RRRRUKxYcAjBAI9d6rp+FKTlTjzH7VZUVbFPJEbsNlRPTRTi0jb+ffqsIgAAHIVHvLJZPRvP9D51JrFeWyOY7E02K9SQxvZgcMkuXFuyHDD3HoadvZ327NqwtrlibYnCsdzCT\/wDH6dPdyV+KXgPgXcdT+gqsrpqcvmh\/Nbb5quLrYoo5S2M3HzLivoPtXwKG6Be7uCLJItXdhtCatz3zOD4gBjSOQIzvUDslf3syxzTzLFaRFgsjKFe9XJEcrhx8yunBwN2bfYbUueyntWD\/AN33GGUg9yW\/GI56dR91bu2fZIJLbrDI000xlV\/lhM6JHsWnw2ERo9gNsHUM770nJGWOsUkRZdC4haQ3tuU1K6P9F1IOCOTAjyNUfYniTo72FwfnI86CfrKOg93Menurx2W49YxyQ8KsiX0RsdSLlF0\/SLPyLMxO4zvnO9eu3nD2TRew7SQkasdV8\/hyPoT5UnM3DaQbNeITtI4SA079HacHbO\/Qp0rNQeEX6zwpKvJhn3HqPhU6mAQRcJMtLSQdUUUUUKFikntzO00sNjH9dg0hHRen5E\/AU6M2Bk8hSP2PX5Rd3N63IMUjz0HIf5QP\/VVE5vZg2+ScogGYpj+0Zf2OQ7texM9yTb257mIyGNPBEpALkDZQTsCa5jBdXV9K8tlaRWV4D84TeYbnjE1v3HzgOMZxnA2aun8Y4PHcx93LqxkMCjMjKRnDBlIIO\/40uwdlphcxNNJFcxRksksq6LmJh9EB0GJVPIg4286vGSTJvqo\/ELheE8PaZobZLuQYPcLpSSY\/W3AJUfSOfL1rh0sjOxZiWdiSxO5Yk5J95NOftX47394YUOY4PCPIufpn4bD4GlGynCNqK5\/T3VoxNdHEXAXKuha0uAcbDadyt+H2mgb\/AEjz9PSpVare4VxlT7+mK21zMrnueS\/Xau6pmRtjDY\/p2Kx7PcOFzcJAWK6w+COhCkg467jlVxadmwsV9JIwZrdZEUAbatIbvN+oB2HTeo3YH+nQ\/wDmfwNTVJ\/R+Mf+JJ\/7a1bExpbc8fJZVdUysmMbTYWZ4uzRbcLhhm4a0caqz5LEDdvmidzUWf8AoFz\/ANdJ\/GKmcX4ikP8AJkjnZQC2OYUx6dWPIZz8KgXMqjh8+WAzeyEbjfxg59dt6sdbQbj5BIQh5wvdc3c3M8HuV\/dW6vxBkdQymyAIPI+M1zebgsmhJEGpZZHjVR9IMrMNOOuQuc+8e\/pYOeJZH\/6Y\/jNUHCf5mw\/66X83omaCe\/0U0M74s27h5OKQGUgkEYI2IPQ1imztNwKSS5u5IguiI6nycHddRIGN+RqPadln7yz1uui4bO2cgKNbA+8DGfWlubdey3W18PNhzjY2vbsvbuS3RV\/2g4boacRR\/Nxz4JGTpGgEAnou9UFeCLGyvhlbK3E1FYdcjB61mihWkXS\/fWvdt\/ZPL9qjZpju7fWpXr0Pka8Wtiqep8z+nlW1DyoGxdPNw+XXOTcjOM9mZMOfVwVECVOQSrKQQRsQRyPvBrt3COILxbhup4kluI8homcojyAeHVj+rcYbScjcjfFce4xBhtY5Nz99MHsu478mvFRjiOfwN6N9Rvv2+NOFwqIA8a\/LrGqoDDIWHZ5bFdcI4pfwM0VpbWkt0+PlDK7yd2RsAzqiQwxpyEQZiM75JLHqHDrlbmDDPFIcFJe6bWgflImfQ+dKfa3h+iUAw3dxE4LJa2yrFCCuNTTSgrksSdmOCNsHnXrsfx+TvLaJra3t7a6hd7URMS2qPSSjgqAG7slv8FJJRSOxUpguJrFycAl489R1\/MfjTxSL24QwXFter9VgrkeX+qlhTvG4IBHIjIpeDokx7vJPVnTwz\/cM\/wCwyPoe1bKKxRV6RVN2tvO5tJX66dI952\/Wo3Ya07qyizzcGQ\/4tx\/lxVb7TJCYYoQd5JAP2\/E0x3E4t7cvoZhFHnQg1MdI5Ko5n0qgdKY8B5p13QpGj7nE9gFh4ko4XxeC4BME8UuDhtDBivoQDlT76q5u1CfIri8CkLF3yrnm5Rigx5anGB8KQLq\/g4jLF3HCU76cSlJWmWBx3eNZZoNTKfGBhhnerL2o4teF21mmwZo1xqz4YxqO\/wBbxad6bjZieAkwuRPIWJZjlmJLHzJOSfvNYrZBEWYKOdS7WxcSLqXbOc9Nq0JalkYNzmBdOQ00kpGEGxNr2y+BWtpBoUL16+p61YrwuYrIwibEWe8JXATAyQc9cdPWoZp64LcGTht+7HxMzZ9\/doK5do5xxxHPMrrKmU0sTebAtkOrMD38Fojgj4fJYyE6mYSPIRtgOqqvwGT+NWcso+TcVOQAzvg555jXSB78jHvpT7TcSWaSLu21BIokB9Rz5+pp44X2MiHz103fOfGVPhjU456OROBjJq6O5JaBkPZY9YGxsZJITiOfXZ1x1JA45xETSIyMSqxRIDy5DDD3Zp47Idk7ZreOaRTKzpkBvopq2IVenLn6Vz3iE2uV2zsZGx5YzhcemAAPQCuxdjP6DB\/cHXP+\/dUU9nPN\/mau5WLoqWNrTbPPuulnhtqbK9WOVyYniaO2c+WSwiJ6EZIA8sY5bauE\/wAzYf8AXS\/m9OnGeGx3ETRS\/RPI9VPMMPIg1z4XPyN4LW48Jt7nve83xJGwbxj1B2IqyRuG27\/nss+ml53+27fZrs\/HNME\/\/wCW\/uf\/ABmvMXPhH\/mf+y1QreC6u3uDCvc29wRqklXxFQNJCJ6+ZrxN31tcWSXWO4hkcJOBgEMhVVcfVbJHvqdM\/mt0Gx6IIvbTbky3ffYpM4+b4t\/fP8C0icW4U9uIzJpxKgdSCeRxzyBvvTdBLLcvexWsYaOeTedshFUAA46u2QdhUm44DPaPFOzNeRxA6o2GWTIALIDnIGBt6VW6MvHzenIKsUzi0kZ52\/8AIAz2Z31XOQR50VdcU4izCYxriGWeRi+nc8iqFuagc8dST61S0q7JdBE8vbci3zbuPBFFFFRZWLVdw61K9envpbyRuDgg5B8iOR++r6XiKDrn3VTXEgZiwGM74rd5KbK24LThK5nll0Ly1zHAu0Ns8tnBd7\/l+SThaXkUiRsUUu7o0gTB0y+Bd3IIIApN4TfQ27ieO3v7j5KGZ2mxCkHfZ7yURPhvEGJ2BwAeQq29h99qtZoDzil1D0WQZ\/jVz8ax2tuLSa4lEdxdanTuLtLS3M4lRc+B2CHQwDsMqQfFRI3C8hc+U3dr7PvrOUKNRC60xvkruMe8ZHxrPYq872ziPVRpP+HYfhip\/DiskCYRkQoAEcEMBjABB3BxSx7Nn0rcQHGY5SP0Pw2pR3RmHEW7k4wY6R4+1wPfkfRO2aKxiimEmkrtiS19ZR9NQb7mFM\/FZZliLW8SyybYR37sHffxaTjA9KVuOtni9oOgXP3hv2qy7fQxtZOJbqS2TK5eLdmycBAAMsWJxgbml4fqeePonao2ihb\/ABv3uKSpbzvOIx6bJob3K95LYzpKAmRkXAKqpBHmNXh2O2Kj+3K4Jnto+ixu\/wD6mA\/\/AIqf2MnkimhtxdyQxljphm4fHB8oG5OmVG2c7nxeI7nHOqD2zyk36j7MKY+JJrQpReQJNuqUeDr4yfJTV1VXwNfpH3CrSsvlF2KodwyXZckMw0oO+5WDT92L7LwzQrJLMZVzqMCsVRW2HjA3ZgBjoPfSFUrhvEJIHEkbEEfcR5EdaVjeGm5F1fXU8k8WGN1j5+ykccdWuZCgAXvCFAGkAA4A25cq6\/xC67q0eX7EJb7kpCg7G3EqLIq2+GTIbU+SWbVrO27AbeWDTT22Zlse6B8chhiHqSRkfEA0xEHNDnFYldJHM6GJh0Nj4BcxW3wVzu2jJjOsZO2ORzkg6sjbw0y8O7eGCCKFIA2hAGZn079cAKfvqsWP5xwizfKEjxkMG8QyJCSdu70Ech1qhkhK6cjGpQy+oPI\/hSwc5h6K2DFFVWEue217a3zytlbQ9aaONdqnvJIUCmOMPGWXOdTahuSOYHQetdOuOHxSFHkjRmTJQsoJUnmRnly\/CuEIxBBGxyCD5Ebg\/fXcOzl\/39vHKdiyjI9eR\/EU1TPLnHFqsflmmbAyPmxZouO05+Sswlabm0SRDHIqujDDKwDAjyIPOpFZpxYAWiK3VVCqAqgYAUAADyA6V7IxWytF1LpRm+ypP3DNCFzKS1F9cXQt1EToQdmOicK2PGvINkZDD4+dK3FdXfSa0EbajqQclPlTp7LBqluG9F\/Esf0qJ7TuFrHKky7d9q1DpqXG\/vIP4VnvaXR4\/ll1VLKIaw0+ywt12F\/Ls2JLrIrFFLLdS1cJpdh5E\/6Vrq0vbF2kJAGDjfPpUW4smQZbHPGxrqKericxrS4YrDJcTUUcrHPIYcIJz4XT37EbjTdzpn6cIOPMqwx+DGmm1mu7LXaw\/IWTvJHWWWfQy945cq8IGWILYzqGaSfY43\/eI9YZP0pr7cWcM0wWHhMk0qXEUk0wgTDrH4nTW5BkLL4QOR5ZqmqFpFnu1TvwC4leEGaS3kkyQWt86PQDUzHOPWl\/suAnEr2Mcj4h9+T+LVI7BWBjW5kFu1vHNOXihZQjIoRF3VSQMspOx61H4YMcZn9Y8\/gtZ831N603SZslH8PUJ2oooq9JJI48mOLWjdCuPuDfvVr2x4fLLFG8ARpIJUlVHOlZNOcoW+qSCcHkDiqvtuNF3ZS5+vpPxIqz7dNGLKV5olliTSzqxONIYam23JAycdcVRD9Txx9E7VZxRO\/iR3OKpri7ub6a2jktPkscUyTO80sbMxUEKkSxsTklt222yOtJXtpixfI32oVI+BIpk4ddcEV0az4fJKwYaXgs5G0\/2tbKBgeeaq\/bjbfOWs32kkT7iGH8R+6tCmP5gSbdVzWG5dBhTirXhU7Pr1HOMVS1ZcEfxMvmM\/dU8oQM5lzg0X3rY5MneKhjC420tfLRW9ZrFFc5quvXaOxt6ktrFoO6IFYdVYcwaq+38LzNb28X0y0jjfA8CEjJG48s9M0qezi6ZbxUU+GRXDDodILKfeCMfE1f9q4Lie9022cxQjXhtJ0udwp6MQMZ99Pc5ii8Fyb6bmK42IsAXAnZcZX6nEdfBL8CJI8q29vIkwChFU47oqD3hds4K58+dT5OHrcWvDohszhxqA3AAYgb9MgVC4dHPG8kttbShlkZGCtrXAADRtp3Jzk6vM1ddmWBbhiDcCCZvxAz+NVMF8jt901UPLLOYdLkZ3N8B11y880kQ8PzpPepls+BdTSLgkboq4GcZGWGQRvXQ+zvae2hgjiZZo1AwryR7NvudSZA3zS7DcGL5RCs0i6JZhohhyxGTu8hGAn5YqTwjiDRRRxi67slRmK7j0xnO50SY+iSeZzURHAcvnivVYDUM6eYBy2ai\/27ONxxC6JZ8RilXVFIjjzVgfyrZ8rTX3eoa8Z053x5454rnHFwC0Qa2igd5ExcxSLoKg5chgRjbzxzqP7QOID5TFJbyqdKDDxuDg581P4UwZ7Nv1eKzY+Tece1oJzBO8C3EGxucvRdWBqs7TT6LSdvKNvxGP1pS7M9vgcR3Wx6Sjkf7w6e\/lVDf9sZZbeS3lAbVsHG3I9RyO3lUuqGYclEXJVRzti3QjtBOo3+auvZOv8ASD\/4Q\/ip14tw6OeNo5VBUjr0P2gehFc17B9o47YskowkjfS+yQBjI8t+ddRLB4yVIIZTgg5ByOdFOWmMBHKzZI6tz8xc3B7lwSZQGYA5AJAPmAdj8Rv8a8V7mj0sR9klfuOP0rxWcuxGiKr+NHwD+9+lWFVvHOS+8\/lTVEL1DOtJcpG1K\/q9Qr32SvpvmfSzaIJThRljy2A6n0rp57QcQPiThLlPJrmJZMf3N1B9NVIvsOtibm4kxskSLn1dsj8IzW\/tTxLhb3MHc3rxSNd6brTPLDhAsmvVkqB41Qavu51sVJ\/MXEO1XTeD8VFwmsJJGwOl45VKOjDmCOR9CpIPQ0ucJOeMXB8kx+C0wdn4Y1gUQztPGclZDJ3uQegfJ1D40vdkz3nEL2TyYqPgdJ\/hrPl+pg4pulyjld\/G3e4J3oozRVyTsEne0uA\/J0lHOORT9\/8ArVze28d3Zsj5Mc8ODp5kMudvWtnaSz761lj6lDj3jcflVX7P73vLNFJ8URKH3Ddf8pA+FUjKY8R5J09OkB+13g4e4SJxztk8jQxTyvZWvfLFJG4eO4eMKcys+kCNNQUYXc5zkcquvalFHccLS4gdZEikjZXU6gVPzZ364LA\/CrLthxC+i1FZooY2bRCqRma4mYjwhA\/gU5znIIAGc1t7P8O12UtldXQuJ3R++GpSYxJkaQF2UA+g38qbY7C4FJBcCUVd23DQhDaiSPuqnurdo3eN\/pIxVveDg\/Darvhs2pB5jY\/pXvlR0jWAtORyK3OR2xPlIeM9R2KVRRRXPrqlL4XxB4JVmjIDLnGRkbjBB+Bpk4D2y7u4lmnTV3gUEp9XTnAAPTc0oUV7a9zdCl56SGYHG3Mi19tr38wF0\/sjxu3EMxeZEZ5pm0uwU4Ykrz9Kgdipl7y0ywBS1YHJGxMnL37Ut9kuEwXUrRTuykr4MEDJ6jcb7dKbJPZlERgTOP8ACv5immOe4AgaLn6mKnhkfG5xBNtl9nDVVHaEMst8i99pLo3gYCPxqvifq2SeVb+\/khURyNJGuABHdxiWI+gkHL3Z2rdJ7NWAwlyPip\/HesHsXxBV0petjy72THuxnFeRG+5NvVe3VEBa1oeMra3GgA2g9fqofDODme4fuVt4+7TLY+eiYvncKdgcfdgUr8Ql1PqIUEgZCqFG3oOVN1n2a4pbqwgkVdRy2Ch1H\/Ehqjn7J34\/qGJ9MfvVT2OIGRTlNURMeSXtIsALHPjrvPWqSip0nAbxRvbyZ\/uk\/lUSW2lUeOMqTyGkjP3jeqy0hajZ4zkCvFMPZftNLanu\/pRt9Q\/VJ6r5e7lS5kgbg+6t1hJ40J2Gtc59+9DSWm4XiZsUzCx4uPmnFeZHJJY8yST7ycmvOrG5qy7QyQNO7W2e7Jzv59celL\/F5tKY6tt8OtemRF8gYNpUPqAyDnSLZaHXqUCLicg54PvFeb287zG2MZqLWyGFnZUQZZiFUepOB+JrqG0kDXB4bYhce6sncwsc4kLsPshsTFw6a4CMzyu5ULgMyoNKqCds6tZGfOrGw7Y2GFtbtnjlUKrLex4ZieWWI0tnzG1S+F3At+54dGywvD3f86u1zFp8bRENjXrODncHmMMDUDinZa6kmnizGba5uIZpZCT3iLHoPcBcYIJjGGyMam23pB7sTiUkU5fNwxHSqpGik4UAAADOwG1K\/szjJhlmbOZJCf3\/ABNWHbq97uyl83AQf4uf+XNS+ydl3NpEhGDpDN723P54+FKHpTDgPNOt6FI4\/c4DsaLnzCuMUVnNFX2SKKROz3\/ZOIT2p2SXxx\/mPwJH+Gnukz2gWbKIryL6cLDPqv8A9\/maoqAQA8bPJO0RDnGJ2jxbt1Hjl2qb2g7HW97NHNcGY90rKqJK0anUcknRhs9MgjI89sWnCuCW9spW3gjiB+loUAsfNjzY+pOa28MvVmiSVOTKD+4++p1XAgjJJlpBsdVxH2x8A7q4W6UeCbZ\/R1H6r+VJfB5sPp6N+dfRPangqXltJbucax4WxnQw3V8dcHp1GRXzdf2ckEjwyrpkQlWHqPI9QeYPkaeaBPCYjqmKacwyB42K4n4ginGcn06e+pQpWqz4bfckb4H9DWdVcm82wOZnvXQ0fK5klLZbAHTgraigUVlXW6t9hP3ckcmSNLo23PAIJx8K7rbXsbgMjqwO4II3rgdekkI5HHuJH5VdFNzd1m8ocmirwnFYi+y+q+g9Ve65z7NuOyM7W0jFhp1ISckY5rnqOtdGrQjeHtuFydVTOp5TG7\/oWK0XMyorOxwqgkk9ANzW81zvt12tRke1hySfDI\/QDqo8z0J5c6JHhjblFLTPqJAxg6+A3qNL7SZNRKwJo+qGYhveSAR8KU+L8UluZDJI2SeQHIDyUdBUGisx0r36ldpBQ08BxRsAO9bJpmY5ZiSBjJOdvKrjhPH0iTu5bOCYD6LOoDAeRbSdQ+741R1g15BINwrZYWSNwuGXDLysmnj\/AAy3a1jvbZTGGfS8ZOQpOeWeWCPdvSsyg7EZFTf5Tk7j5Pq+b168Y6+\/y3qvnmCKWP8A9+lejdzhgGfqqoWGGMiU3AJsTn0dl+pVHErZEI0k5P1eeB503eyHgPf3RuGHzcG49XP0R8Bk\/dSXBDJPKqINUkjAKPMnl7h+QFfRfZHgKWVrHbqcsBl2+25+k3u6AdAAOldES6KEMcbuK4yqlY+QlgsNylcX4NBdJ3dxEsi5yM81PRlYbo253BB3qLwbsxb2r64RLq0lfHPNIACQSAsjlRyG+M1eiovELtYo2kc4VQSaSJsLlLAEmwSf2qzc3lvaDdVIeT3dfwGP8Qp5pL7B2rSNLeyDxSsQmei\/7wPhTtVMAvd+\/wAtidrSGlsI0YLH+xzPt2Ioooq9JIqPdW6yIyMMqwII99SKKEJD7JXLWlxJYTHYnVCT1zvj4jf3g09g0r9teCmaMTRbTQ7qRzIG5X9RUrspxwXUIblIu0i+R88eRx+dLxHA7mz2dX+k9UjnmfiG66O4O39TvNXxFc89qPY43KfKYEzPGN1HOVB09WHMee4roWajtcprEepQ5UsFz4iAQCwHMgEj7xTbHlpuEivlipFnaGQ4HIczXU\/aR2ALlruzXLbmWJR9LzdR9rzHWuTRyFTkHBrRLzLGebNjx2K+FzA4F4uNqZIkwAB0r3UKxvw+zbN+f+\/KptctLG+Nxa8ZruYJo5WB0Zy8kUVHgvUY4B38j191Sa8ua5hs4L3HKyQYmG44K67GcRWC7jdiApypJ5DV1++u0o4IyCCK+e6tez\/HJbaRWRjoyNa58LDrt0OOo8quhmwZHRZXKfJhqTzjD0gNN9l3I1wbjiAXMwHLvH\/Ou1R8RjaEzK693pLasjAA55PTFcLuZtbs56szb+pzVtWRZtklyAxwfIeAHbf\/AEtdFFFJLpUMaqOIcQz4UO3U+foPSrK6hDqVNL0iFSQdiK1OTIYpHYnajQeqxOWKiaNoY0WadvopvDr\/AE4Vvo9D5f6Vq4jd62\/sjl+9RCa6n7OOwG63d4nkYomH3O4\/EKfjWm6nhik562e7isJ9bKYeZJy+ZK09lXY4wKLudcSuPm1I3jU9T5M3l0FdIArwK9g0pI8vdcpEoNI3bO5a4mjsIT9Jg0pHQDofQDf7qv8AtPxxbWEud3baNftN+w61Xdh+DNGrXM28825zzUHfHx5\/d5UpKcZ5sdvUnqYCFpqHbMm8Xb+puvWmSytVijWNBhVAA+FSaxWaYAskbk5lFFFFCEUUUUIXmkTtHw+Szm+XWw8B\/nkHLB+kfceeeh3p8rxKgIIIBB2IPWq5I8Y47FdTzmF17XByI3j5puOah8I4jHcRLLGcg\/eD1B9a5\/2g4nLPO8eY43tjNIZQrCS1RD4X6iUSptoOAd\/LFT7+ym4bKbi3Gq2Y\/OR\/Z\/bHQ\/A1e3iQ8RtcRuuklT4lDjKnOmRD9NTyKmoikucLsirKinDAJIzdh0O0cDuI8dQovZDtgl3mJ8JcISrLhlDkY1FQ4BDDIDRnxIcg52Jpe2PYSC9Mk1o6JOrFZAv0HcYyrAfRfcb+u9VPFOC3McUL3UYAXwmaJmP8nwxkYdAzMzzOo3cu2nAGGAxVj2O7TCLv3uCCk1wPnwArBgiRoJ4QcxSuqq2QMHUdlximGPLDcJW65JxLh8tvIYp42jcdD+YPUeor0185TQT8euPKvovtBwi1uogl0iMpPhZjpKk8tD7FSfQ7+tcx7R+yiaPL2b96v2Hwrj3Hk34U2JIpbYxmNPn\/AFXRzvZcNNrixXN63Q3MgwFc9AOv5174hYywNomjeNvJxjPuPI\/CtUMmlg2M4OcUzK0PYcgdy9xPLXXDiOITLiiqocYPVPx\/0r2OLr9k\/hXNGgqBq1da3lSlP7++6k394Y123DHcZOCRyJHImq5+LOeQA\/Gs8RvFkUAA5BzvVfWpRULDHeVnS4rGr+UJDMRC\/o5afLq34TcsxYMSetWEsgUZYgUtwzFTlTg4xW60tZZ30xI8r+Sgtj39B8a8zcm45S69mr1T8rmKANIu7PM\/LlTbjiw5IM+p\/aotrbzXMojjVpJG5Ko6efkFHmdqeuznsonlw92\/cr9hcM5+PJfxrp\/BeA2tjGVhRY15u5PibHV3O5+Ow6Yq1jYKf9MXO9ZlTXSz\/Wct2zuSt2G9nEdsVnusSTDdV5pGfP8AtMPM8ulSPaLxBozEIrkxupyVRmzlgQjSD6GjI\/rMgnoare2fHEmAuLQyHQe7WdJpFDHUO8EEMbgXMqqGbxDR4ADq5Vq7O8MJmHcvFI5jkM5lLf8AeMMu8czONX0fokaTp3AIU1S97nm7kkpvZ3jUk5jSW5d7hU+UQhT3UdwsyFo4nULsVBPgOTgK29OMvEu6txNcgRtoUuoOoBsboDgat9qhxQWtjbKTFFAqgHSgzh8Y8JIBY42zzxS7Z2svFJRLMClqh8CctX7k9T05Cl5ZbHC3Mpunpw8GSQ2YNT6Dj5albeBWT39x8tuFxEu0KHkcdfdnf1PoBT\/WmGIKoVQAAMADkBW6pijwDjtXionMzr2sBkBuHzU7UUUUVYqEUUUUIRRRRQhFFFFCFqdAQQRkHYg9aR+Kdn57SQ3NicrzeHmMeg6j05jpT7RVckYfr3q6CodCTbMHUHQ9fzJKfDuL21\/F3Ugw2VLwsxG6nPMY1rkcuvUVs\/4cVr\/5UyRBY48RBR4mdyTJJJtgkbBRvjU52zRx\/slHOe9iPdTcw67An1A\/OqmDtHdWjCO+iLL0lTfP6N+BqsSOZlJ37EyaZk+dOc\/sOvYdD5qm7dziS5aYkGGBo4FjkQTRzXD5L+B5FCd3GAC6ENl9s4wWjsvxphaF7qGSFYgPnHbWHXJAIJAfbA+moOCNzzoubG2vhFJbyIGjeRhpx\/WqVlDKdwxDZDYyGUHlkGV2gsJBYNa2oYlljgUk5KI5CSSEk58MZZvPamA4EXCQc0tNjqo\/AuOQ8RXEluNEilo9ZSVXQEc9OdD7jKHz5movE\/Zhw6XJWN4SesT6ce5Wyn4UpdoeEyxzSiOONXeS2tYHidomgBYd1Ky\/12QTnDf1e4xUt+0d7C08SzSNILhktkkjjkMwUkaSolV4xgA944AOzb6sV7a9zdCoRdexsb91esB0EkQY\/FlYfw1Xt7HrnpdQn3q4\/ep932kvJ51VjbiBGu\/GlxJbB\/k+gNIXKOFVWfAGcE5zsKs7Dt5IrQ27wxTO8ixa4ryKRiWBOSFUfVGTy6eYq0VMm9TiKXR7H7nrdQD3K5qda+xsbd7eHHURxY+5mY\/w0zdqe2j2TsrWyFQhcM9yiF1AySEwzDkQM4yRgb1Cuu2N1hHQWAhZJXMqzy3IURAFxpjiXLeLkM8jR+Jl3ouV4TsJwi03uGLsEZ83Ev1V+kxRdK4GfLrTJw7itjHCWjaOGJBk6l7kKPcwG1c5u55b2VYru6UB1gjmjiRUMa3IOiJjqfxrIq9eTA4Ga22nZOS9gilKiR30xzvNIWaCaN2S6dQ+cK4Bwi4GQuwG4qc9zvqN1Cf+0HH3gUGKHvMpr72RxFAg6apTkknmFVWO2+Mg1SXNq\/FOHpOGPyhUJWJWKw9+jbq6NnWuQUOr6rHGDgi+4RaGezijvYQXTAdZADlo2wsgxt4iocY+0K9yfJrMzTNIIxM4d1J2LBQpKrzyQoyBzxXgkAXKkNJNhqqbs52fnjn726WBw2qZdC6fkkzAK8ce7FkdDucjdSceLaZxDilrw+Moi+IlmWJTk5Y5PPOhcnlyHQVWXPaW5u2MVjEwXrK22PXyX8T6VZ8A7IRwnvZj30x3LNuAfQH8zS5lc\/KPv2J\/8KyHpVBz+0HPtP7fPgqvh3A571xcXpKxjdIRtt6joPxNPEUQUBVAAAwAOQFbqKsjjDOvel56h0xF8gNANB88UUUUVYqEUUUUIRRRRQhFFFFCEUUUUIRRRRQhYrTPArgq6hgeYIyK30UFCTuI9h01d5ayNA\/py\/cVE\/lHiVptLD38Y+um5x7xuPiKfKKoMA1abdXsnW1ryMMoDxx17CM0mWnbW0kI71TGwII1rqwRyOQNjvzq5SazuM4MEusYb6LFgOhzuQKlX3CIJv52FG9SN\/vG9UN32BtX3XWnuOfzo\/ObuPgj\/Df9ze5w9CtvCuxsEKrHkyRrHPHocLgiaXvX5Af3ceQFapuyIEqNC6xxLdRXPdBMDWsbRyDIOAGBQjbYoftbRT2DZP5m8mT0yQP8pFA7K3w5cQf4lj+ZoEkn2eKg08GyUdrXD3Vv2n7MRXqOrl0Zo2j1IxXIOcBgDh1BOcH1860WnZGKOSKXvGLRuXI2CtmDuCuMbLgasedV7dlb48+IN8Cw\/I0f8CO\/89ezN6ZJH+YmgySfZ4o\/DwbZh2NcfZWd7Z8PjbVJ3EeMeHKqMhg6nSObBgCDUKftnZw6hCC5ZixEa4DMeZyeZJ6jNe7bsBaru2t\/ecflV9Y8Ht4f5qFFPmBv953o\/PduHip\/w2fc7uaPUpT\/AJW4jd7QQdyh+u\/h+4nn8Aal2HYhS3eXcrTv5EnH7kU5UUCnF7vN\/m5BrXAYYgGDhr2u1Wi3t1RQqKFUcgBgVuorNXpLVFFFFCEUUUUIRRRRQhFFFFCEUUUUIRRRRQhFFFFCEUUUUIRRRRQhFYNFFCEUVmigqAvJoooqBqpRXqiigqEUUUVKlYrNFFCEUUUUIRRRRQhFFFFCEUUUUIX\/2Q==)\n\n---\n## National Institute of Technology, Hamirpur\n---\n----------------------------------------------------------------------------------------\n### Computer Science & Engineering Department\n----------------------------------------------------------------------------------------\n# **CSD_426**\n## Data Ware Housing and Data Mining LAB\n---\n\n> Submitted By: **Abhishek Kumar, 185540**\n\n\n> Submitted To: **Dr. Vijay Kumar Chahar**\n","1472e185":"\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n# Q7. D is a dictionary defined as D={1:\"One\",2:\"Two\",3:\"Three\",4:\"Four\", 5:\"Five\"}.\n\nWAP to read all the keys and values from dictionary and write to the file in the given below\nformat.\n\n|keys|values|\n|----|-------|\n|Key1| Value1|\n|Key2| Value2|\n|Key3| Value3|","a2a2da4d":"----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n# Q1. L is a list defined as L= [11, 12, 13, 14].\n","6cc8274c":"\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q11. WAP to calculate the time taken by a program.\n","3a4649bc":"\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q12. WAP to create a dictionary of student marks in five subjects and you have to find the\nstudent having maximum and minimum average marks.\n","13c46a2b":"\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n\n# Q10. Write to the file all prime numbers between 600 and 800.","0d55626e":"----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\n# Q6. WAP to create a list of 100 random numbers between 100 and 900. Count and print the:\n\ni. All odd numbers\n\nii. All even numbers\n\niii. All prime numbers"}}