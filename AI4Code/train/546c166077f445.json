{"cell_type":{"f2a78be9":"code","210a1902":"code","6da7314d":"code","8e8ba920":"code","378f512d":"code","2f91b43c":"code","f2b0a277":"code","71c3fb0e":"code","2d9ed8c3":"code","c52ad6c4":"code","0d1fa0bf":"code","74897248":"code","4921a396":"code","9bbe8521":"code","7cc005a1":"code","0d991071":"code","fbf7429f":"code","47077343":"code","99a7e54a":"code","7dee5a88":"code","4c092ce3":"code","295169b8":"code","f989464f":"code","19985ae5":"code","24079967":"code","c6a207ca":"code","08e419fd":"code","e012fea0":"code","5c49a2dd":"code","f41967d3":"code","ce123513":"markdown","25ee499e":"markdown","0a009694":"markdown","e47dea8c":"markdown","67c5b201":"markdown","cc9f1b18":"markdown","add3bd5a":"markdown","e78acedc":"markdown","99a054df":"markdown"},"source":{"f2a78be9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","210a1902":"import numpy as np\nimport scipy.stats as stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, BaggingClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nsns.set(font_scale=1.5)\n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\npd.set_option('display.max_rows',None)\npd.set_option('display.max_column',None)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6da7314d":"train =pd.read_csv('\/kaggle\/input\/titanic\/train.csv') \ntest= pd.read_csv('\/kaggle\/input\/titanic\/test.csv') ","8e8ba920":"train.isnull().sum()","378f512d":"test.isnull().sum()","2f91b43c":"fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (18, 6))\n\n# train data \nsns.heatmap(train.isnull(), yticklabels=False, ax = ax[0], cbar=False, cmap='viridis')\nax[0].set_title('Train data')\n\n# test data\nsns.heatmap(test.isnull(), yticklabels=False, ax = ax[1], cbar=False, cmap='viridis')\nax[1].set_title('Test data');","f2b0a277":"train['Embarked'].value_counts()","71c3fb0e":"#fill missing values with most freqquent\ntrain = train.replace({\n    'Embarked' : {np.nan : 'S'}})","2d9ed8c3":"#for those Fares with Pclass 3 find their mean\nz= test[test['Pclass']==3]\n\nmean = np.mean(z['Fare'])\n# Fill Fare NAN values\ntest = test.replace({\n    'Fare' : {np.nan : mean}})","c52ad6c4":"test.isnull().sum()","0d1fa0bf":"mean_age =train.groupby('Pclass').agg({'Age': 'mean'})\nmean_age","74897248":"#function to impute age\ndef impute_age(age_pclass): # passing age_pclass as ['Age', 'Pclass']\n    \n    # Passing age_pclass[0] which is 'Age' to variable 'Age'\n    Age = age_pclass[0]\n    \n    # Passing age_pclass[2] which is 'Pclass' to variable 'Pclass'\n    Pclass = age_pclass[1]\n    \n    #applying condition based on the Age and filling the missing data respectively \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 38\n\n        elif Pclass == 2:\n            return 30\n\n        else:\n            return 25\n\n    else:\n        return Age","4921a396":"for i, row in train.iterrows():\n    pclass = row['Pclass']\n    age = row['Age']\n    age_pclass = [age,pclass]\n    train = train.replace({\n    'Age' : {np.nan : impute_age(age_pclass)}})\n    \n#replace for Test data in Pclass\n# (for test) grab age and apply the impute_age, our custom function \nfor index, rows in test.iterrows():\n    pclass_test = rows['Pclass']\n    age_test = rows['Age']\n    age_pclass_test = [age_test, pclass_test]\n    test = test.replace({\n    'Age' : {np.nan : impute_age(age_pclass_test)}})","9bbe8521":"train.isnull().sum()","7cc005a1":"test.isnull().sum()","0d991071":"#change cabin values to 0 and 1\ntrain['Cabin']=train['Cabin'].apply(lambda x:1 if pd.notnull(x) else 0)\ntest['Cabin']=test['Cabin'].apply(lambda x:1 if pd.notnull(x) else 0)","fbf7429f":"train.describe()","47077343":"train.hist(column=\"Age\",by=\"Survived\",sharey=True,figsize=(15,7), bins=15,color='#b1cbbb')\nplt.suptitle('Age Density Distribution grouped by Survived');","99a7e54a":"df_plot= train[['Pclass','Sex','Parch','Cabin','Embarked','Survived']]\nfor i,v in enumerate(df_plot):\n    plt.subplots(figsize = (8,4))\n    ax = sns.countplot(x = df_plot[v], hue=\"Survived\",  data = df_plot,palette=\"husl\")\n    plt.show()\n      ","7dee5a88":"# convert categrical variables\ntrain = pd.get_dummies(train, columns=[\"Sex\", \"Embarked\"],drop_first=True)\ntest = pd.get_dummies(test, columns=[\"Sex\", \"Embarked\"],drop_first=True)","4c092ce3":"# features need to be dropped\nfeatures_drop = ['PassengerId','Name', 'Ticket', 'Survived']","295169b8":"selected_features = [v for i,v in enumerate(train.columns) if v not in features_drop]\nselected_features","f989464f":"X_train = train[selected_features]\ny_train = train['Survived']\nX_test = test[selected_features]","19985ae5":"#baseline for y_train\nbase = y_train.value_counts()\/len(y_train)\nbase","24079967":"gbc = GradientBoostingClassifier()\nparam_grid = {\n    'learning_rate': np.linspace(0.01,0.1,10),\n    'subsample'    : np.linspace(0.1,0.9,9),\n    'n_estimators' : np.linspace(50,200,4,dtype=int),\n    'max_depth'    : np.linspace(4,10,6,dtype=int)\n}\ngs = GridSearchCV(gbc,\n                  param_grid, \n                  cv=5,\n                  scoring='accuracy',\n                  verbose=1,\n                 n_jobs=-1)\ngs.fit(X_train, y_train)","c6a207ca":"gbcs= gs.best_score_\ngbcs","08e419fd":"#best parameters\ngs.best_params_","e012fea0":"#model with best params\ngbc_cv = GradientBoostingClassifier(learning_rate= 0.07,\n                                    max_depth= 4,\n                                    n_estimators= 200,\n                                    subsample= 0.8)\ngbc_cv.fit(X_train,y_train)","5c49a2dd":"s5 = cross_val_score(gbc_cv,X_train, y_train, cv=5)\ns5.mean()","f41967d3":"pred = pd.DataFrame(gbc_cv.predict(X_test),columns=['Survived'])\npred.set_index(test['PassengerId'],inplace=True)","ce123513":"In the cell below, use `cross_val_score` to see what accuracy we can expect from our model.","25ee499e":"# Visualize the NaN values","0a009694":"# Dummies","e47dea8c":"we observe the average age of passengers is 28 year old and the eldest passenger is 80 years old,  and there might be 1 or more families with 6 children with this large number of family members did they all survived ?1.\n\nseems most of survived passenger between 20 to 30 and children are younger than 10 years. can it be because childrens and women first ?! ","67c5b201":"# Read files","cc9f1b18":"**From the above graphs we can see those elemnts approve our theory which is *there are some features are related to the number of survived passenger*.**\n\nHigh number of survived in :\n- First class\n- Female \n- 0 parent\/children\n- without cabin number\n- Embarked S","add3bd5a":"**After Filling all NaN values lets see the relation between the Features and our traget.**","e78acedc":"let's use these Features to predict, but first let us do dummy variables.","99a054df":"# Model"}}