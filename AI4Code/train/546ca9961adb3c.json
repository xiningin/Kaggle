{"cell_type":{"ffbe6ae7":"code","545d133c":"code","3e90bc61":"code","c7462f81":"code","e3a29b52":"code","d2ace742":"code","1f2ad8b3":"code","f0f5c74b":"code","9b82d65c":"code","a746250b":"code","13920d7f":"code","89664cba":"code","79e5ab28":"code","58cae435":"code","e058beb2":"code","107d99f7":"code","d430c327":"code","10d40dfe":"code","fe6b7dfe":"code","6e1d3599":"code","cebd3067":"code","1db3a114":"code","df756454":"code","868a9996":"code","8ca4cd2a":"code","a7f2e099":"code","335197ad":"code","7b977c32":"code","82bb5b79":"code","3dab156a":"code","21aa4600":"code","206c6ddf":"code","f0d3a40b":"code","b3212cc0":"code","0e19f74b":"code","45b647de":"code","d9550780":"code","4694e57b":"code","f20a711b":"code","33fb56de":"code","50e4a1fd":"code","ce0e84f1":"code","bbb6a15f":"code","588bdc14":"code","ebaea361":"code","fa00a8fa":"code","be196545":"code","7ccc0af2":"code","9190b344":"code","69bfcb2e":"code","b5618903":"code","b2316bd5":"code","2ab27c1d":"code","cd55bd77":"code","cd5a34d6":"code","5fb263cc":"code","0d2ce7bd":"code","5c00972a":"code","d7829197":"code","c9cabbb7":"code","49d2723e":"code","d01abd8a":"code","3741be74":"code","d792942b":"code","da6f64b7":"code","183f50f8":"code","bb6569b4":"code","c87e1e74":"markdown","249d69cf":"markdown","c5f1ada5":"markdown","80e17887":"markdown","a5935ce4":"markdown","6d07f2f3":"markdown","cc57882c":"markdown","e8f90cfb":"markdown","025fb109":"markdown","41e0a1e1":"markdown","4c5d7345":"markdown","d45e5621":"markdown","2c558284":"markdown","8e970df8":"markdown","8de9d9bd":"markdown"},"source":{"ffbe6ae7":"#For data reading and visualization\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport matplotlib\n#matplotlib.rcParams[\"figure.figsize\"] = (20,10)\n\n#For model building\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n#For evaluation\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","545d133c":"df=pd.read_csv('\/kaggle\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf","3e90bc61":"df.info()","c7462f81":"df.describe()","e3a29b52":"df.isna().sum()","d2ace742":"sns.countplot( x='area_type', data=df, palette=\"icefire\");","1f2ad8b3":"plt.bar(df.area_type,df.price,color=['salmon'])","f0f5c74b":"sns.scatterplot(df['society'],df['price'])","9b82d65c":"corr_mat=df.corr()\nsns.heatmap(corr_mat,annot=True)","a746250b":"df.shape\n","13920d7f":"df=df.drop(['area_type','availability','society'],axis=1)\ndf","89664cba":"df.isna().sum()","79e5ab28":"df=df.dropna()","58cae435":"df.isna().sum()","e058beb2":"df.shape","107d99f7":"df.head()","d430c327":"df['BHK']= df['size'].apply(lambda x: int(x.split(' ')[0]))\ndf.head()","10d40dfe":"df=df.drop('size',axis=1)","fe6b7dfe":"df.shape","6e1d3599":"df['total_sqft'].unique()","cebd3067":"def is_float(x):\n  try:\n    float(x)\n  except:\n    return False\n  return True\n\n#df['total_sqft']=df['total_sqft'].apply(is_float)","1db3a114":"df[~df['total_sqft'].apply(is_float)].head(10)","df756454":"def preprocess_sqft(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None\n        \n        \n\ndf['total_sqft']=df['total_sqft'].apply(preprocess_sqft)","868a9996":"df.shape","8ca4cd2a":"df.total_sqft.head()\n","a7f2e099":"df[~df['total_sqft'].apply(is_float)].head(10)","335197ad":"df[~df.total_sqft.notnull()]","7b977c32":"df.total_sqft.isnull().sum() ","82bb5b79":"df=df.dropna()","3dab156a":"df[~df.total_sqft.notnull()]","21aa4600":"df.shape","206c6ddf":"df['price_per_sqft']=df['price']*100000\/df['total_sqft']\ndf.head()","f0d3a40b":"df.shape","b3212cc0":"df.location=df.location.apply(lambda x: x.strip())\nloc_stats=df.location.value_counts(ascending=False)\nloc_stats","0e19f74b":"len(loc_stats[loc_stats>10])","45b647de":"loc_stats_less_than_10=loc_stats[loc_stats>10]","d9550780":"df.location=df.location.apply(lambda x: 'other' if x in (loc_stats_less_than_10) else x)","4694e57b":"df.location[df['location']!='other']","f20a711b":"df.location.unique()","33fb56de":"df[df.total_sqft\/df.BHK<300].head()","50e4a1fd":"df = df[~(df.total_sqft\/df.BHK<300)]","ce0e84f1":"df","bbb6a15f":"df.shape","588bdc14":"df.price_per_sqft.describe()","ebaea361":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\n    \ndf = remove_pps_outliers(df)\ndf.shape","fa00a8fa":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('BHK'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('BHK'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\n\ndf = remove_bhk_outliers(df)\n# df8 = df7.copy()\ndf.shape","be196545":"\n\nplt.subplots(figsize=(8,6))\nplt.hist(df.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","7ccc0af2":"df = df[df.bath<df.BHK+2]","9190b344":"df.shape","69bfcb2e":"plt.hist(df.bath,bins=20)\nplt.xlabel('No. of bathrooms in a house')\nplt.ylabel('No. of houses')","b5618903":"dummies = pd.get_dummies(df.location)\ndummies","b2316bd5":"df=pd.concat([df,dummies.drop('other',axis='columns')],axis='columns')","2ab27c1d":"df.head()","cd55bd77":"df=df.drop('location',axis='columns')","cd5a34d6":"df.shape","5fb263cc":"df.head()","0d2ce7bd":"X=df.drop(\"price\",axis=1)\nY=df.price","5c00972a":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)","d7829197":"rf_clf=RandomForestRegressor()\nrf_clf.fit(X_train,Y_train)\nrf_Y_pred=rf_clf.predict(X_test)\nrf_score=rf_clf.score(X_test,Y_test)\nprint(rf_score)","c9cabbb7":"cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\nnp.mean(cross_val_score(rf_clf, X, Y, cv=cv))","49d2723e":"from sklearn.ensemble import RandomForestRegressor\nnp.random.seed(42)\nfor i in range(1,40,1):\n  print(f\"With {i*10} estimators:\")\n  clf2=RandomForestRegressor(n_estimators=i*10,max_depth=i,random_state=i).fit(X_train,Y_train)\n  print(f\"Accuracy: {clf2.score(X_test,Y_test)*100:2f}%\")","d01abd8a":"RF_clf2=RandomForestRegressor(n_estimators=110,max_depth=11,random_state=11)\nRF_clf2.fit(X_train,Y_train)\nRF2_Y_pred=RF_clf2.predict(X_test)\nRF2_score=RF_clf2.score(X_test,Y_test)\nRF2_score","3741be74":"cv2 = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\nnp.mean(cross_val_score(RF_clf2, X, Y, cv=cv2))","d792942b":"mean_squared_error(Y_test,RF2_Y_pred)","da6f64b7":"df1=pd.DataFrame({'Actual': Y_test,'Predicted': RF2_Y_pred })\ndf1.head()","183f50f8":"df1.plot(figsize=(20,8),kind='line')","bb6569b4":"sns.regplot(x='Actual',y='Predicted',data=df1)","c87e1e74":"# **Model building: Taking input as X and Y**","249d69cf":"# **Read and analyze data from csv file**","c5f1ada5":"# **Converting 'Object' values of Location into Numerical form using One Hot Encoding**","80e17887":"# **Dropping the columns which won't influence our model much**","a5935ce4":"# **Removing outliers**","6d07f2f3":"# **Preprocessing Location column**","cc57882c":"# **Checking NaN values**","e8f90cfb":"# **Creating a column for price per sq.feet**","025fb109":"# **Visualizing data**","41e0a1e1":"# **Creating a column named BHK**","4c5d7345":"# **Creating a function for checking float values**","d45e5621":"# **Import the required packages**","2c558284":"# **Splitting the data into train and test sets**","8e970df8":"# **Preprocessing total sq.feet column**","8de9d9bd":"# **Applying Random Forest Regressor model**"}}