{"cell_type":{"84854484":"code","e5cf2bcd":"code","dbdc6cfb":"code","50647a04":"code","da766def":"code","7cca8f7a":"code","c7f1fb69":"code","4969e071":"code","dab8e5b3":"code","6aba07d8":"code","672f7d27":"code","ded4aeba":"code","ebc99b9a":"code","f3b05f10":"code","8e9d9187":"code","ae12d2cb":"code","a3e5c134":"code","fbf0f3ca":"code","03561978":"code","4698043c":"code","1e506d5a":"code","f4c0ad48":"code","25d22bac":"code","39193546":"code","9080e87c":"code","994286df":"code","c30c3f28":"code","1ac49043":"code","a73f4392":"code","3db0df32":"code","d7ed4815":"code","a8e0398c":"markdown","56607992":"markdown","257aac66":"markdown","45c5a7cc":"markdown"},"source":{"84854484":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","e5cf2bcd":"data0 = pd.read_csv(\"..\/input\/boombikes-bike-sharing\/day.csv\")\ndata0[0:2].T","dbdc6cfb":"data0=data0.drop(['instant','dteday'],axis=1)","50647a04":"print(data0['cnt']. value_counts())","da766def":"Name=sorted(data0['cnt'].unique())\nprint(Name)","7cca8f7a":"N=list(range(len(Name)))\nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","c7f1fb69":"data0.columns","4969e071":"data0.info()","dab8e5b3":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","6aba07d8":"data1=df\ndata1[0:2].T","672f7d27":"data1.columns","ded4aeba":"data1['cnt']=data1['cnt'].map(normal_mapping)","ebc99b9a":"target=['cnt']\ndataY=data1[target]\ndataX=data1.drop([target[0]],axis=1)","f3b05f10":"m=len(dataX)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ntrainX=dataX.loc[M[0:(m\/\/4)*3]]\ntrainY=dataY.loc[M[0:(m\/\/4)*3]]\ntestX=dataX.loc[M[(m\/\/4)*3:]]\ntestY=dataY.loc[M[(m\/\/4)*3:]]","8e9d9187":"df_columns = list(dataX.columns)\nprint(df_columns)","ae12d2cb":"train_df=trainX\ntest_df=testX","a3e5c134":"train_df.columns=df_columns\ntest_df.columns=df_columns","fbf0f3ca":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","03561978":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","4698043c":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","1e506d5a":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","f4c0ad48":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","25d22bac":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","39193546":"y = trainY\nydf=pd.DataFrame(y)\nydf.value_counts()","9080e87c":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[0],fontsize=20)\n    ax.set_xlabel('Actual Train '+target[0],fontsize=12)\n    ax.set_ylabel('Predicted Train '+target[0],fontsize=12)\n    ax.scatter(y,oof)\n","994286df":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","c30c3f28":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","1ac49043":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = pd.Series(pred1).apply(lambda x:round(x))\npred2","a73f4392":"testY2=testY['cnt'].reset_index(drop=True)\ntestY2","3db0df32":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0],fontsize=20)\nax.set_xlabel('Actual Test '+target[0],fontsize=12)\nax.set_ylabel('Predicted  Test '+target[0],fontsize=12)\nax.scatter(testY2,pred2)","d7ed4815":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict  '+target[0], ax=ax, color='black',bins=40)\nsns.histplot(oof, label='Train Predict  '+target[0], ax=ax, color='C1',bins=40)\nax.legend()\nax.grid()","a8e0398c":"# Target setting","56607992":"# Model","257aac66":"# Visualize Importance","45c5a7cc":"# Data preparation"}}