{"cell_type":{"2c17bacd":"code","94df6452":"code","aaf5402b":"code","dd6e7528":"code","c599199d":"code","1044de05":"code","c02ad4b2":"code","35d6833f":"code","3f1fcc30":"code","9da70199":"code","9614ad21":"code","f578980c":"markdown","d771377b":"markdown","f21ff870":"markdown","0544a64b":"markdown","1420179d":"markdown"},"source":{"2c17bacd":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","94df6452":"\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n# Load test & train data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n# Lets understand  the csv files\ntrain.head()","aaf5402b":"train.describe(include=np.number)","dd6e7528":"train.describe(include=np.object)","c599199d":"X = pd.get_dummies(train[['Fare', 'Sex']])\ny = train['Survived']\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\nX.describe()","1044de05":"# y histogram\nsns.distplot(y, kde = False)\nplt.show()","c02ad4b2":"# Fare histogram -> check split\nfig, ax = plt.subplots()\nsns.distplot(X['Fare'], kde = False, ax=ax) # sns.distplot(X['Fare'], hist = False, ax=ax)\nsns.distplot(train_X['Fare'], kde = False, ax=ax) # sns.distplot(train_X['Fare'], hist = False, ax=ax)\nplt.show()","35d6833f":"#skewness and kurtosis\nprint(\"Skewness: %f\" % X['Fare'].skew())  #  third standardized moment\nprint(\"Kurtosis: %f\" % X['Fare'].kurt())  #  fourth standardized moment","3f1fcc30":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True, annot=True);","9da70199":"# Relation between class and survival\nsns.barplot(x='Pclass', y='Survived', data=train, ci=None)\nplt.show()","9614ad21":"model = LogisticRegression(random_state=1, multi_class='auto', solver='lbfgs')\nmodel.fit(train_X, train_y)\n\npred_y = model.predict(val_X)\n\nprint (accuracy_score(pred_y, val_y))","f578980c":"## Dummification\nWe will focus on the ticket fare and the sex of people on board. To use this categorical variable into some of our models, we need to turn it into a numerical variable. This can be done by a pocess called \"dummification\". Here, we create a column for each value the categorical variable can take.","d771377b":"We can describe numerical and categorical data","f21ff870":"## Some data visualization and description","0544a64b":"## Load and describe data\nFirst things first, let's load the dataand see what do we have.","1420179d":"## Model fitting and prediction"}}