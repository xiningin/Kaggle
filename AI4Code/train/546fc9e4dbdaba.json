{"cell_type":{"44388b96":"code","fc1e95f1":"code","bb1c18c7":"code","41169d8c":"code","cb8f67ab":"code","5f68159a":"code","e8159f9c":"code","819de210":"code","08559057":"code","4c8db345":"code","82b4cae3":"code","f4112a1f":"code","b21ccb26":"code","ee7b294a":"code","1430a83b":"code","dd25198f":"code","634607c1":"code","e0b330a6":"code","b2d8db16":"code","3d16ce89":"code","d100e309":"code","a6be7e31":"code","1bfd7ba2":"code","95096fda":"code","6d5dfab9":"code","03a62aea":"code","a6649d53":"code","39d0f535":"code","4cdf6854":"code","1b0a9566":"code","eee0fecc":"code","b44d5378":"code","71861d6e":"code","665d7037":"code","d6d942fc":"code","af7db539":"code","5f4e70f7":"code","ad3cdc0d":"markdown","45ba3066":"markdown","941c3579":"markdown","f0e14fe6":"markdown","2f559e43":"markdown","8f141cd4":"markdown","70d2017a":"markdown","4ef5d3a2":"markdown","a4039005":"markdown","e3de5b12":"markdown","3a204a37":"markdown","9d6c6846":"markdown","70d3a0b8":"markdown","938b2d14":"markdown","00c3ce7b":"markdown","a6a18802":"markdown","43cd3b49":"markdown","e9a6f583":"markdown","20965043":"markdown","9db675dd":"markdown","ceff6a9c":"markdown","f302350b":"markdown","dfaab036":"markdown","ecaf2040":"markdown","127d0073":"markdown","1c51b118":"markdown","d2b75a4f":"markdown"},"source":{"44388b96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc1e95f1":"import numpy as np\nimport sklearn \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd","bb1c18c7":"df_train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nprint(df_train.head()) # print 1st five rows of trainiing dataset\nprint(df_train.columns) # print column names","41169d8c":"print(df_train.info()) # training dataset information\nprint(df_train.describe())# training dataset stasticics","cb8f67ab":"df_test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test.head() # print 1st five rows of trainiing dataset\nprint(df_test.columns) # print column names\nprint(df_test.isna().sum())","5f68159a":"df_sub=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nprint(df_sub.head()) # print 1st five rows of trainiing dataset\nprint(df_sub.columns) # print column names","e8159f9c":"print(df_train.shape)\nprint(df_train[['Survived']].value_counts())\nsns.countplot(x='Survived',data=df_train)","819de210":"sns.countplot(x='Survived',hue='Sex',data=df_train)","08559057":"\nprint(df_train['Survived'].shape)\nprint(df_train[['Survived']].value_counts())\nprint(df_train[['Sex']].value_counts())\n","4c8db345":"# selecting data only for gender male \ndf=df_train[(df_train[['Sex']]=='male').any(axis=1)]\nprint(df.shape)\nprint(df[['Survived']].value_counts())\nprint(df)\n","82b4cae3":"# selecting data only for gender female \ndf=df_train[(df_train[['Sex']]=='female').any(axis=1)]\nprint(df.shape)\nprint(df[['Survived']].value_counts())\nprint(df)\n","f4112a1f":"sns.countplot(x='Survived',data=df_train,hue='Pclass')","b21ccb26":"sns.countplot(x='SibSp',data=df_train)","ee7b294a":"plt.xlabel('Age')\ndf_train['Age'].hist(bins=100,color='purple')","1430a83b":"plt.xlabel('Fare')\ndf_train['Fare'].hist(bins=45)","dd25198f":"sns.boxplot(data=df_train,y='Age',x='Pclass')","634607c1":"print(df_train.isna().sum())","e0b330a6":"def impute_age(col):\n    Age = col[0]\n    Pclass = col[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age\ndf_train['Age']=df_train[['Age','Pclass']].apply(impute_age,axis=1)","b2d8db16":"print(df_train.isna().sum())","3d16ce89":"df_train=df_train.drop(['Cabin','Name','Ticket'],axis=1)\ndf_train.dropna(inplace=True)\nprint(df_train.isna().sum())\nprint(df_train.head())","d100e309":"sex = pd.get_dummies(df_train['Sex'])\nembark = pd.get_dummies(df_train['Embarked'])\ndf_train=df_train.drop(['Sex','Embarked'],axis=1)\ndf_train=pd.concat([df_train,sex,embark],axis=1)\nprint(df_train.columns)\nprint(df_train.head())","a6be7e31":"df_train=df_train.drop(['PassengerId'],axis=1)\nprint(df_train.head())","1bfd7ba2":"X_train=df_train.drop(['Survived'],axis=1)\ny_train=df_train['Survived'] # vector\nprint(X_train.shape)\nprint(y_train.shape)","95096fda":"print(df_test.head())","6d5dfab9":"df_test=df_test.drop(['Cabin','Name','Ticket'],axis=1)\nprint(df_test.isna().sum())\nprint(df_test.head())","03a62aea":"sns.boxplot(data=df_test,y='Age',x='Pclass')\n","a6649d53":"print(np.unique(df_test['Pclass']))\n# selecting data only for Pcalss=1\ndf1=df_test[(df_test[['Pclass']]==1).any(axis=1)]\nprint(df1.shape)\nprint(df1.describe())\n# selecting data only for Pcalss=2\ndf1=df_test[(df_test[['Pclass']]==2).any(axis=1)]\nprint(df1.shape)\nprint(df1.describe())\n# selecting data only for Pcalss=3\ndf1=df_test[(df_test[['Pclass']]==3).any(axis=1)]\nprint(df1.shape)\nprint(df1.describe())","39d0f535":"def impute_age(col):\n    Age = col[0]\n    Pclass = col[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 42\n\n        elif Pclass == 2:\n            return 27\n\n        else:\n            return 24\n\n    else:\n        return Age\ndf_test['Age']=df_test[['Age','Pclass']].apply(impute_age,axis=1)\ndef impute_fare(col):\n    Fare=col[0]\n    Pclass = col[1]\n    \n    if pd.isnull(Fare):\n\n        if Pclass == 1:\n            return 60\n\n        elif Pclass == 2:\n            return 15.75\n\n        else:\n            return 7.89\n\n    else:\n        return Fare\n    \ndf_test['Fare']=df_test[['Fare','Pclass']].apply(impute_fare,axis=1)\nprint(df_test.isna().sum())","4cdf6854":"print(df_test.head())","1b0a9566":"sex = pd.get_dummies(df_test['Sex'])\nembark = pd.get_dummies(df_test['Embarked'])\ndf_test=df_test.drop(['Sex','Embarked'],axis=1)\ndf_test=pd.concat([df_test,sex,embark],axis=1)\nprint(df_test.columns)\nprint(df_test.head())","eee0fecc":"X_test=df_test.drop(['PassengerId'],axis=1)\nprint(X_test.shape)","b44d5378":"PID=df_test[['PassengerId']]\nprint(PID)","71861d6e":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(X_train)\nX_train_std=sc.transform(X_train)\nX_test_std=sc.transform(X_test)","665d7037":"from sklearn.svm import SVC\nclf=SVC(kernel='rbf')\nclf.fit(X_train_std,y_train)\ny_pred_train=clf.predict(X_train_std)\nfrom sklearn.metrics import accuracy_score\ntrain_acc=accuracy_score(y_train,y_pred_train)\nprint(train_acc)","d6d942fc":"y_pred_test=clf.predict(X_test_std)\nprint(y_pred_test)","af7db539":"SV=pd.DataFrame(y_pred_test,columns=['Survived'])\nprint(SV)","5f4e70f7":"result=pd.concat([PID,SV],axis=1)\nprint(result)\nresult.to_csv('result_titanic.csv',index=False)","ad3cdc0d":"** Siblings\/Spouse onboard **","45ba3066":"**Delete Cabin, Name and Ticket not avaible **\n** Delete missing values embarked","941c3579":"Step 1:Import Necessary libraries","f0e14fe6":"In the following section of the notebook, we will be predicting the surviability of the titanic population.This is beginner friendly basics program.\n\n**Having three dataset, Trains.csv, test.csv and gender_submission.csv\nLibrary used sklearn, pandas,matplotlib,numpy and seaborn **","2f559e43":"**NO NEED of Passenger ID for training purpose**\n**NO NEED to train test split as we have already sparate test file**","8f141cd4":"Step 2: Read the files and print head","70d2017a":"**Create training input and label**","4ef5d3a2":"Boxplots provides some indication of the data's symmetry and skewness.With respect to class the passenger's age had been distributed.From the observation the median age of class-1 is to be 37, class-2 to be 29 and class-3 to be 24.","a4039005":"**** Age distribution ****\nMost of pepoles are belong to ege 18-32 years, ","e3de5b12":"**Below is ship class-wise analysis of survivability prediction. **","3a204a37":"The above is our train data_set holding the following information :\n\nPassengerId : Specifies each passenger's ID\nSurvived : 0 - Not Survived ; 1- Survived\nPclass : Passenger class : 1,2,3\nName : Name of the passenger\nSex : Gender\nAge : Age\nSibSp : Siblings\/Spouse onboard\nParch : Parent\/Child onboard\nTicket : Ticket No.\nFare : Fare\nCabin : Cabin No.\nEmbarked : Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","9d6c6846":"**Training Dataset information and dataset description**","70d3a0b8":"**Generate test predicted and add to PID**","938b2d14":"**** Fare Distribustion**","00c3ce7b":"** CHeck missing values**","a6a18802":"Test data plot as age","43cd3b49":"REplace missing value of age in test data as median of respective Pclass","e9a6f583":"**SVM classifier**","20965043":"To get rid of the missing data in Age, let's replace it with the median according to the class as we had discovered in the previous boxplot.","9db675dd":"**Feature Scaling**\nNow We have, \n1. X_train, y_train\n2. X_test, Y_predected Need to compute\n3. PID add y_predected","ceff6a9c":"Feamles are mot survived than males","f302350b":"# 1st Plot\n**Surviveied vs Not survived**\nout of 891 training datasets, 549 NOT survived and 342 survived","dfaab036":"# **Data Visulizations**","ecaf2040":"# 2nd Plot\n**Below is gender-wise analysis of survivability prediction.**\n","127d0073":"**One Hot eccoding of Sex and Embarked **","1c51b118":"*Putt passenger ID for Create submission*","d2b75a4f":"**Transform Testining Data too**\n1. check missing values and remove them as training data\n2. check Categorical data\n3. Remove unwanted columns as training data"}}