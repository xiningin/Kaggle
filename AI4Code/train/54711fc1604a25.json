{"cell_type":{"dd4431a4":"code","8baa88c9":"code","6df0f917":"code","30809949":"code","ed06e45f":"code","f276aef2":"code","14280d68":"code","8bd8baf4":"code","a225d64a":"code","c3495d97":"code","0fa309c3":"code","20f38164":"code","1ec3f575":"code","3e614d1d":"code","b43f8bf2":"code","b5e09a3f":"code","59a9142d":"code","1ba8cdc8":"code","d866c777":"code","acc000a2":"code","3a111712":"code","a6780f06":"code","b6df66a5":"code","f60a277e":"code","ac7bad99":"code","9dd85143":"code","c4a2cb47":"code","d03737fa":"markdown","3c3c938b":"markdown","9c9de3c6":"markdown","af4ebf8e":"markdown","7ea6c642":"markdown","75029326":"markdown","58c5769a":"markdown","bbc4c4a6":"markdown","35b93c44":"markdown","c0dd836f":"markdown","1c32f53d":"markdown","551b25b6":"markdown","5125c8b9":"markdown","041beecf":"markdown","c0c2a01a":"markdown","c4486df7":"markdown","7435c664":"markdown","a2be06e4":"markdown","6279dbb5":"markdown","1838d059":"markdown","81a3f5fe":"markdown","16680a22":"markdown"},"source":{"dd4431a4":"%matplotlib inline","8baa88c9":"from warnings import simplefilter\n\nsimplefilter('ignore')","6df0f917":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport string\nfrom wordcloud import WordCloud\nfrom nltk.probability import FreqDist","30809949":"sns.set(font_scale= 1.1,style= 'darkgrid', palette= 'Set3')\nmy_pal= sns.dark_palette(color= 'crimson', n_colors= 7, as_cmap= False, reverse= False)\nsns.palplot(my_pal)","ed06e45f":"data= pd.read_csv('..\/input\/zomato.csv')","f276aef2":"data.head()","14280d68":"data.drop(['url', 'phone'],axis= 1, inplace= True) # inplace= True, makes the change inplace","8bd8baf4":"data.isna().mean().mul(100) # gives the rate of missing values in the dataframe","a225d64a":"data.info()","c3495d97":"data.rate.value_counts(dropna= False).head(10)","0fa309c3":"data['ratings']= data.rate.str.split('\/', expand= True)[0].str.rstrip() #we will try and get the ratings\ndata['ratings']= data['ratings'].str.replace('-', '-1')\ndata['ratings'].fillna('-1', inplace= True)\ndata['ratings']= data['ratings'].str.replace('NEW', '-2')\ndata['ratings'].value_counts(dropna= False).head(10)","20f38164":"data['ratings']= pd.to_numeric(data['ratings']); data.drop('rate', axis= 1, inplace= True)","1ec3f575":"data['approx_cost(for two people)'].value_counts().sample(10) # wee see that there are commas in the number\n# we'll replace this separtor with blanks","3e614d1d":"data['approx_cost(for two people)']= data['approx_cost(for two people)'].str.replace(',', \"\"); data['approx_cost(for two people)'].sample(7)\ndata['approx_cost(for two people)']= pd.to_numeric(data['approx_cost(for two people)'])\ndata.rename(columns= {'approx_cost(for two people)': 'cost for two'}, inplace= True)","b43f8bf2":"_= data.query('ratings != -1').query('ratings != -2')\n\nratings= sns.FacetGrid(_, row= 'online_order', col= 'book_table', sharex= True, sharey= True, aspect = 2.6)\nratings.map(sns.kdeplot, 'ratings', shade= True, color= 'crimson')\n\nplt.suptitle('Distribution of Ratings by availability of Online ordering or Table booking facilities'\n             , y= 1.05)\nplt.show()","b5e09a3f":"_= data[(data['cost for two'] > 0) & (data['cost for two'] < 3000)]\n\nratings= sns.FacetGrid(_, row= 'online_order', col= 'book_table', sharex= True, sharey= True, aspect = 2.6)\n\nratings.map(sns.kdeplot, 'cost for two', shade= True, color= 'crimson')\n\nplt.suptitle('Distribution of Price by availability Online order or Table bookings', y= 1.05)\n\nplt.show()","59a9142d":"data['rest_type']= data['rest_type'].str.split(',',expand= True)[0]\ndata['rest_type']= data['rest_type'].str.replace(',',\"\")","1ba8cdc8":"_= data.query('ratings > 0').groupby('rest_type')['ratings'].agg('mean').sort_values(ascending = False)\n\nfig, (ax1, ax2)= plt.subplots(1, 2,figsize= (24, 6), sharex= True)\n\nsns.barplot(y= _.head(5).index, x= _.head(5), palette= my_pal, ax= ax1, edgecolor= 'k')\nax1.set_ylabel('Restaraunt type', fontdict= {'fontsize': 'x-large'})\nax1.set_xlabel('Ratings', fontdict= {'fontsize': 'large'})\nax1.set_title('Five highest rated Restaurant types', fontdict= {'fontsize': 'xx-large'})\n\nsns.barplot(y= _.tail(5).index, x= _.tail(5), ax= ax2, palette= my_pal, edgecolor= 'k')\nax2.set_ylabel('')\nax2.set_xlabel('Ratings', fontdict= {'fontsize': 'large'})\nax2.set_title(\"Five lowest rated Restaurant types\", fontdict= {'fontsize': 'xx-large'})\n\nfig.tight_layout()\nplt.xticks(ticks= np.arange(0., 5., 0.5))\nfig.suptitle('Average Ratings grouped by \"Restaurant\" types in Bangalore', y= 1.08, fontsize= 25)\nplt.show()","d866c777":"_= data[data['cost for two'] > 0].groupby('rest_type')['cost for two'].agg('mean').sort_values(ascending = False)\n\nfig, (ax1, ax2)= plt.subplots(1, 2,figsize= (24, 6), sharex= True)\n\nsns.barplot(y= _.head(5).index, x= _.head(5), palette= my_pal, ax= ax1, edgecolor= 'k')\nax1.set_ylabel('Restaraunt type', fontdict= {'fontsize': 'x-large'})\nax1.set_xlabel('Ratings', fontdict= {'fontsize': 'large'})\nax1.set_title('Five most expensive Restaurant types', fontdict= {'fontsize': 'xx-large'})\n\nsns.barplot(y= _.tail(5).index, x= _.tail(5), ax= ax2, palette= my_pal, edgecolor= 'k')\nax2.set_ylabel('')\nax2.set_xlabel('Ratings', fontdict= {'fontsize': 'large'})\nax2.set_title(\"Five cheapest Restaurant types\", fontdict= {'fontsize': 'xx-large'})\n\nfig.tight_layout()\nplt.xticks(ticks= np.arange(0, _.max(), 500))\nfig.suptitle('Ratings grouped by \"Restaurant\" types in Bangalore', y= 1.08, fontsize= 25)\nplt.show()","acc000a2":"_= data.query('ratings > 0')\nfig= plt.figure(figsize= (18, 6))\nsns.violinplot(x= _['listed_in(type)'], y= _['ratings'], width= 0.75, palette= my_pal)\nplt.title('Ratings distribution across \"Restaurant types\" in Banglore', fontdict={'fontsize': 'larger'})\nplt.xlabel('Restaurant type', fontdict={'fontsize': 'medium'})\nplt.ylabel('Ratings', fontdict={'fontsize': 'medium'})\nplt.show()","3a111712":"_= data[data['cost for two'] > 0]\nfig= plt.figure(figsize= (18, 6))\nsns.violinplot(x= _['listed_in(type)'], y= _['cost for two'], width= 0.75, palette= my_pal)\nplt.title('Cost distribution across \"Restaurant types\" in Banglore', fontdict={'fontsize': 'x-large'})\nplt.xlabel('Restaurant type', fontdict={'fontsize': 'medium'})\nplt.ylabel('Ratings', fontdict={'fontsize': 'medium'})\nplt.show()","a6780f06":"data['dish_liked'].fillna('Unknown', inplace= True)\n\ndishes= []\nfor text in data['dish_liked']:\n    \n    for word in text.split(','):\n        \n        dishes.append(word.strip().title())\n\ndishes_freq= FreqDist(dishes)\n\ndishes_list= sorted(dishes_freq.items(), key= lambda x: x[1], reverse= True)[1:]\n\nmost_liked_dishes= [x[0].title() for x in dishes_list]\nmost_liked_dishes_count= [x[1] for x in dishes_list]\n_= dishes_freq.pop('Unknown', None) #this removes the key and the value and then returns it\n\nmy_pal_wrd_cld= sns.light_palette(color= 'crimson', n_colors=7, reverse= True, as_cmap= True) #creates a paletter as cmap\nwd= WordCloud(scale= 10, margin= False, max_words= 50, colormap= my_pal_wrd_cld).generate_from_frequencies(dishes_freq)\n\nplt.figure(figsize= (24, 6))\nplt.imshow(wd)\nplt.axis('off')\nplt.show()","b6df66a5":"data['cuisines'].fillna('unknown', inplace= True)\n\ncuisines= []\nfor text in data['cuisines']:\n    \n    for word in text.split(','):\n        \n        cuisines.append(word.strip().title())\n\ncuisine_freq= FreqDist(cuisines)\n\nmy_pal_wrd_cld= sns.light_palette(color= 'crimson', n_colors=7, reverse= True, as_cmap= True) #creates a paletter as cmap\nwd= WordCloud(scale= 10, margin= False, max_words= 50, colormap= my_pal_wrd_cld).generate_from_frequencies(cuisine_freq)\n\nplt.figure(figsize= (24, 6))\nplt.imshow(wd)\nplt.axis('off')\nplt.show()","f60a277e":"_= data[data['cost for two'] > 0].groupby('name')['cost for two'].mean().sort_values(ascending= False)\nexp_names= [n[0] for n in _.head().index.str.split(' - ', expand= True)]\n\nfig, (ax1, ax2)= plt.subplots(1, 2, figsize= (24, 6))\n\nsns.barplot(x= _.head(), y=exp_names, palette= my_pal, edgecolor= 'k', ax= ax1, ci= None)\nax1.set_title('Five Most Expensive Restaurants', fontdict= {'fontsize': 'xx-large'})\nax1.set_ylabel('Restaurant Name', fontdict= {'fontsize': 'x-large'})\nax1.set_xlabel('Cost for Two People', fontdict= {'fontsize': 'x-large'})\n\nsns.barplot(x= _[_.notna()].tail(5),y= _[_.notna()].tail(5).index, palette= my_pal, edgecolor= 'k', ax= ax2, ci= None)\nax2.set_title('Five Cheapest Restaurants', fontdict= {'fontsize': 'xx-large'})\nax2.set_xlabel('Cost for Two People', fontdict= {'fontsize': 'x-large'})\nax2.set_ylabel('')\n\nfig.tight_layout()\nfig.suptitle('Top five Most Expensive and Cheapest Restaurants for in Bangalore', y= 1.09, fontsize=25)\nplt.show()","ac7bad99":"locs= data.drop_duplicates(subset= 'name')['listed_in(city)'].str.replace(('\\dth '), \"\").value_counts() #drop duplicates in the name and take count\n\nfig= plt.figure(figsize= (18, 4))\nmy_pal= sns.dark_palette(color= 'crimson', n_colors= 10, as_cmap= False, reverse= False)\nk= sns.barplot(y= locs.head(10).index, x= locs.head(10), palette= my_pal, edgecolor= 'k')\nfig.suptitle('Restaurant Count grouped by \"Location\"')\nplt.ylabel('Location', fontdict= {'fontsize': 'medium'})\nplt.xlabel('Count', fontdict= {'fontsize': 'medium'})\nplt.show()","9dd85143":"my_pal= sns.dark_palette(color= 'crimson', n_colors= data['listed_in(type)'].nunique(), reverse= False)\nsns.palplot(my_pal)","c4a2cb47":"_= data[(data['ratings'] > 0) & (data['votes'] > 0) & (data['cost for two'] > 0)]\n\nplt.figure(figsize= (24, 9))\nsns.scatterplot(x= _['ratings'], y=_['cost for two']\n                , hue= _['listed_in(type)']\n                , palette= my_pal)\n\nplt.ylabel('Cost for Two', fontdict= {'fontsize': 'x-large'})\nplt.xlabel('Ratings', fontdict= {'fontsize': 'x-large'})\nplt.title('Cost for Two vs Ratings by \"Restaurant Type\"', fontdict= {'fontsize': 'x-large'})\nplt.axvspan(3.65, 4.75, color= 'crimson', alpha= 0.15)\nplt.show()","d03737fa":"### Importing necessary modules for creating the kernel\n\n* `pandas` for creating and handling DataFrames\n* `seaborn` for plotting\n* `wordcloud` for creating word cloud","3c3c938b":"### Analysing the patterns of cost for food, we see:\n\nNote: The plots have been filtered to include only values below `3,000 Rs`.\n\n1. Restaurants with both online ordering and table booking and just table booking facilities have higher spread of cost of food. These might be fine dine-in restaurants.\n\n2. While, restaurants with neither of the facilities have much lower spread of cost for food, these might be takeaway restaurants","9c9de3c6":"### From the wordcloud on most served cuisines we see;\n**North Indian** cuisines seems to be the most served and liked cuisine in `Bangalore`. This could hint at a higher concentration of North Indians in `Banglore`.","af4ebf8e":"### From analysing the ratings based on facilities we see;\nRestaurants with just **table booking** facility have higher average rating `4.3`, while restaurants with both **online ordering** and **table booking** capabilities have an average rating of `4.1`.","7ea6c642":"### From the barplot we see;\n\n1. \"BTM\" has more than 1,000 restaurants (that's a busy site!)\n2. Koramangala, HSR and other streets are missing from the sites with high number of restaurants","75029326":"## From analysing the ratings for Restaurant types we see;\n\n1. Pubs, Bars, Lunges etc. that seem to be serving `alcohol` seems to have gotten higher average ratings among all the restaurant types\n2. `Quick food stalls` or cheaper restaurants seems to have gotten lower average ratings among all the restaurant types","58c5769a":"### From the violin plot we see;\n\n1. Fine **dine-out**, **pubs**,**bars** etc. costed higher on average than other restaurants\n2. We see that **desserts** and **take-away\/delivery** are cheaper alternatives in `Bangalore`!\n3. We also see some outliers in **dine-out**, **buffet** and **drinks & night-life**, these could be five star hotels or part of five star hotels","bbc4c4a6":"From the Violin Plot we can again see that of the highest rated reataurant types were **Pubs**, **Fine Dining**, **Micro Brewery** and **Lounges**","35b93c44":"### Please fork the kernel and give and upvote if you like the kernel\n\n#### Tell me what you think of the kernel and what else could have been done\n\n#### Thank you for tuning-in!!","c0dd836f":"#### We'll explore the `rate` variable\n\nWe see there are 7775 **missing values** and 2208 values named **\"NEW\"**, this indicates that there are a few restaraunts that haven't been rated yet, we will replace the missing value with **-1** and **NEW** with **-2**, so that we can filter them easily later","1c32f53d":"###### Loading the dataset","551b25b6":"#### We'll drop the `URL`, `phone` columns as they are irrelevant for this analysis","5125c8b9":"#### We'll now explore the `approx_cost(for two people)` variable\n\nWe see that there are **\",\"** in between, so they are treated as string. We'll replace the **\",\"** and typecaste them to numberic","041beecf":"### From the word-cloud of the most liked dish we see;\n**Pasta**, **Burgers**, **Cocktails**, **Pizza** and **Biriyani** seems to be some of the most liked dishes by `Banglorians`.","c0c2a01a":"### From the scatter plot we see;\n\n1. Most ratings fall in the \"crimson\" span, indicating that most restaurants got a rating between `3.5` to `5.0`\n2. There might be more **Pubs & bars** in `Banglore` than **Buffets**, **Cafes** and other restaurant types","c4486df7":"### From analysing the most expensive and cheapest resturants we see;\n\n1. That most expensive restaurants seem to be 5 star rated or similar\n2. Some of the cheapest restaurants in bangalore serve food for as low as 40 Rs.","7435c664":"We see that there are missing values in: `rate`, `location`, `rest_type`, `dish_liked`, `cuisines`, `approx_cost`\nwe will explore these variables a little more in detail","a2be06e4":"# From analysing the cost for Restaurants we see;\n\n1. Some of the most expensve restaurant types also seems to be some of highest rated restaurant types too!\n2. We can see some of the cheapest restaurant types also seems to have gotten some of the lowest ratings too!","6279dbb5":"# Zomato Bangalore Restaurants\n\n#### A trip through resturants in `Bangalore`\n#### Importing Matplotlib inline\nThis magic command helps in inline visualization in python notebook","1838d059":"##### Exploring the DataFrame","81a3f5fe":"### Setting a color scheme for the kernel: \"Crimson\"","16680a22":"#### We'll explore the dataset further"}}