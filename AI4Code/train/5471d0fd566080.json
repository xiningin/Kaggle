{"cell_type":{"23de84bc":"code","f89e7227":"code","dfb17b23":"code","db5b459b":"code","a68adff3":"code","4a143ab6":"code","381d4d28":"code","49978489":"code","54e50d21":"code","95ced0d1":"code","acb297b4":"code","52af114e":"code","3f518773":"code","89beda14":"code","98b7148e":"code","230f7ac5":"code","7ff68d11":"code","aeeb2b76":"code","9398e783":"code","b4f721e4":"code","3199dffc":"code","35b16fef":"code","4e816259":"code","af061df3":"code","cc7920b9":"code","4e9c0657":"code","44a1d4c8":"code","27c70e78":"code","1a17aa2f":"code","2757c0f6":"code","f6d7ba3a":"code","08d0f7f4":"code","e1c7a15a":"code","027d9698":"code","9c12f963":"code","6fc532d6":"code","5ea41c3a":"code","5c937980":"code","c099af81":"code","021e7209":"code","1d193802":"code","e7d3af1a":"markdown","27d954d8":"markdown","bdcb88dd":"markdown","09c8859b":"markdown","17cb3a61":"markdown","46407f96":"markdown","535b6aba":"markdown","cc801ed3":"markdown","1e72477e":"markdown","989a94ad":"markdown"},"source":{"23de84bc":"from IPython.display import clear_output","f89e7227":"!unzip ..\/input\/tgs-salt-identification-challenge\/train.zip -d .\/train\nclear_output()","dfb17b23":"!unzip ..\/input\/tgs-salt-identification-challenge\/test.zip -d .\/test\nclear_output()","db5b459b":"from distutils.dir_util import copy_tree\n\nfromDir = '..\/input\/tgs-salt-identification-challenge'\ntoDir = '.\/'\n\ncopy_tree(fromDir, toDir)","a68adff3":"import torch\nfrom torch import optim\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset, DataLoader, dataloader, random_split\n\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os","4a143ab6":"import wandb\nimport os\nimport time\nimport copy\n\n# login wandb\nos.environ['WANDB_API_KEY'] = '2a291fe931b1a2be33e1c09cb5b86dcd6843ea48'","381d4d28":"# Model config ======\nRUN_NAME        = 'unetv1'\nN_CLASSES       = 1\nINPUT_SIZE      = 101\nEPOCHS          = 100\nLEARNING_RATE   = 0.002\nSTART_FRAME     = 16\nDROP_RATE       = 0.5\n\n# Data config =======\nSAVE_PATH       = '.\/'\nDATA_PATH       = '.\/'\nIMAGE_PATH      = 'train\/images\/'\nMASK_PATH       = 'train\/masks\/'\n\nREAL_SIZE       = 101\nRANDOM_SEED     = 42\nVALID_RATIO     = 0.2\nBATCH_SIZE      = 16\nNUM_WORKERS     = 0\nCLASSES         = {1:'salt'}\n\n# PAD_LEFT_TOP = int((INPUT_SIZE - REAL_SIZE)\/2)\n# PAD_RIGHT_BOTTOM = INPUT_SIZE - PAD_LEFT_TOP - REAL_SIZE","49978489":"class TGSDataset(Dataset):\n    \"\"\"TGS Salt Identification dataset.\"\"\"\n    \n    def __init__(self, root_dir=DATA_PATH, transform=None):\n        \"\"\"\n        Args:\n            root_path (string): Directory with all the images.\n            transformer (function): whether to apply the data augmentation scheme\n                mentioned in the paper. Only applied on the train split.\n        \"\"\"\n\n        # load dataset from root dir\n        train_df  = pd.read_csv(root_dir+'train.csv', index_col='id')\n        depths_df = pd.read_csv(root_dir+'depths.csv', index_col='id')\n        train_df = train_df.join(depths_df)\n\n        self.root_dir   = root_dir\n        self.ids        = train_df.index\n        self.depths     = train_df['z'].to_numpy()\n        self.rle        = train_df['rle_mask'].to_numpy()\n        \n        if transform is None:\n            self.transfrom = transforms.Compose([transforms.Grayscale(), \n                                                 transforms.ToTensor(),])\n                                                 \n\n    def __len__(self):\n        return len(self.ids)\n\n    def __getitem__(self, index):\n        id    = self.ids[index]\n        depth = self.depths[index]\n\n        # file should be unzipped\n        image = Image.open(self.root_dir+IMAGE_PATH+id+'.png')\n        mask  = Image.open(self.root_dir+MASK_PATH+id+'.png')\n    \n        image = self.transfrom(image)\n        mask  = self.transfrom(mask)\n\n        return image, mask","54e50d21":"def get_dataloader(dataset, \n                    batch_size=BATCH_SIZE, random_seed=RANDOM_SEED, \n                    valid_ratio=VALID_RATIO, shuffle=True, num_workers=NUM_WORKERS):\n    \"\"\"\n    Params:\n    -------\n    - dataset: the dataset.\n    - batch_size: how many samples per batch to load.\n    - random_seed: fix seed for reproducibility.\n    - valid_ratio: percentage split of the training set used for\n      the validation set. Should be a float in the range [0, 1].\n    - shuffle: whether to shuffle the train\/validation indices.\n    - num_workers: number of subprocesses to use when loading the dataset.\n    \"\"\"\n\n    error_msg = \"[!] valid_ratio should be in the range [0, 1].\"\n    assert ((valid_ratio >= 0) and (valid_ratio <= 1)), error_msg\n\n    # split the dataset\n    n = len(dataset)\n    n_valid = int(valid_ratio*n)\n    n_train = n - n_valid\n\n    # init random seed\n    torch.manual_seed(random_seed)\n\n    train_dataset, valid_dataset = random_split(dataset, (n_train, n_valid))\n\n    train_loader = DataLoader(train_dataset, batch_size, shuffle=shuffle, num_workers=num_workers)\n    valid_loader = DataLoader(valid_dataset, batch_size, shuffle=False, num_workers=num_workers)\n\n    return train_loader, valid_loader","95ced0d1":"# load dataset\ndataset = TGSDataset(DATA_PATH)\ntrainloader, validloader = get_dataloader(dataset=dataset, valid_ratio=0.05)","acb297b4":"def show_dataset(dataset, n_sample=4):\n    \"\"\"Visualize dataset with n_sample\"\"\"\n    fig = plt.figure()\n\n    # show image\n    for i in range(n_sample):\n        image, mask = dataset[i]\n        image = transforms.ToPILImage()(image)\n        mask = transforms.ToPILImage()(mask)\n        print(i, image.size, mask.size)\n\n\n        plt.tight_layout()\n        ax = plt.subplot(1, n_sample, i + 1)\n        ax.set_title('Sample #{}'.format(i))\n        ax.axis('off')\n\n        plt.imshow(image, cmap=\"Greys\")\n        plt.imshow(mask, alpha=0.3, cmap=\"OrRd\")\n\n        if i == n_sample-1:\n            plt.show()\n            break","52af114e":"show_dataset(dataset)","3f518773":"class BatchActivate(nn.Module):\n    def __init__(self, num_features):\n        super(BatchActivate, self).__init__()\n        self.norm = nn.BatchNorm2d(num_features)\n\n    def forward(self, x):\n        return F.relu(self.norm(x))\n\nclass ConvBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, kernel=3, padding=1, stride=1, activation=True):\n        super(ConvBlock, self).__init__()\n        self.conv = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, \n                            kernel_size=kernel, stride=stride, padding=padding)\n        self.batchnorm  = BatchActivate(out_channels)\n        self.activation = activation\n\n    def forward(self, x):\n        x = self.conv(x)\n        if self.activation:\n            x = self.batchnorm(x)\n        return x\n\nclass DoubleConvBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, kernel=3, padding=1, stride=1):\n        super(DoubleConvBlock, self).__init__()\n        self.conv1 = ConvBlock(in_channels, out_channels, kernel, padding, stride)\n        self.conv2 = ConvBlock(out_channels, out_channels, kernel, padding, stride)\n    \n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        return x\n\nclass ResidualBlock(nn.Module):\n    def __init__(self, in_channels, batch_activation=False):\n        super(ResidualBlock, self).__init__()\n        self.batch_activation = batch_activation\n        self.norm  = nn.BatchNorm2d(num_features=in_channels)\n        self.conv1 = ConvBlock(in_channels, in_channels, kernel=3, stride=1, padding=1)\n        self.conv2 = ConvBlock(in_channels, in_channels, kernel=3, stride=1, padding=1, activation=False)\n\n    def forward(self, x):\n        residual = x\n        x = self.norm(x)\n        x = self.conv1(x)\n        x = self.conv2(x)\n\n        x += residual\n        # x = x.view(x.size(0),-1)\n        \n        if self.batch_activation:\n            x = self.norm(x)\n        \n        return x","89beda14":"class UNet_ResNet(nn.Module):\n    def __init__(self, in_channels=1, n_classes=N_CLASSES, dropout=DROP_RATE, start_fm=START_FRAME):\n        super(UNet_ResNet, self).__init__()\n        #Dropout\n        self.drop = dropout\n        #Pooling\n        self.pool = nn.MaxPool2d((2,2))\n\n        # Encoder \n        self.encoder_1 = nn.Sequential(\n            nn.Conv2d(in_channels, start_fm, 3, padding=(1,1)),\n            ResidualBlock(start_fm),\n            ResidualBlock(start_fm, batch_activation=True),\n        )\n\n        self.encoder_2 = nn.Sequential(\n            nn.Conv2d(start_fm, start_fm*2, 3, padding=(1,1)),\n            ResidualBlock(start_fm*2),\n            ResidualBlock(start_fm*2, batch_activation=True),\n        )\n\n        self.encoder_3 = nn.Sequential(\n            nn.Conv2d(start_fm*2, start_fm*4, 3, padding=(1,1)),\n            ResidualBlock(start_fm*4),\n            ResidualBlock(start_fm*4, batch_activation=True),\n        )\n        \n        self.encoder_4 = nn.Sequential(\n            nn.Conv2d(start_fm*4, start_fm*8, 3, padding=(1,1)),\n            ResidualBlock(start_fm*8),\n            ResidualBlock(start_fm*8, batch_activation=True),\n        )\n\n        self.middle = nn.Sequential(\n            nn.Conv2d(start_fm*8, start_fm*16, 3, padding=3\/\/2),\n            ResidualBlock(start_fm*16),\n            ResidualBlock(start_fm*16, batch_activation=True),\n        )\n        \n        # Transpose conv\n        self.deconv_4  = nn.ConvTranspose2d(start_fm*16, start_fm*8, kernel_size=(3,3), stride=2, padding=1, output_padding=1)\n        self.deconv_3  = nn.ConvTranspose2d(start_fm*8, start_fm*4, kernel_size=(3,3), stride=2)\n        self.deconv_2  = nn.ConvTranspose2d(start_fm*4, start_fm*2, kernel_size=(3,3), stride=2, padding=1, output_padding=1)\n        self.deconv_1  = nn.ConvTranspose2d(start_fm*2, start_fm, kernel_size=(3,3), stride=2)\n\n        # Decoder \n        self.decoder_4 = nn.Sequential(\n            nn.Dropout2d(dropout),\n            nn.Conv2d(start_fm*16, start_fm*8, 3, padding=(1,1)),\n            ResidualBlock(start_fm*8),\n            ResidualBlock(start_fm*8, batch_activation=True),\n        )\n\n        self.decoder_3 = nn.Sequential(\n            nn.Dropout2d(dropout),\n            nn.Conv2d(start_fm*8, start_fm*4, 3, padding=(1,1)),\n            ResidualBlock(start_fm*4),\n            ResidualBlock(start_fm*4, batch_activation=True),\n        )\n\n        self.decoder_2 = nn.Sequential(\n            nn.Dropout2d(dropout),\n            nn.Conv2d(start_fm*4, start_fm*2, 3, padding=(1,1)),\n            ResidualBlock(start_fm*2),\n            ResidualBlock(start_fm*2, batch_activation=True),\n        )\n\n        self.decoder_1 = nn.Sequential(\n            nn.Dropout2d(dropout),\n            nn.Conv2d(start_fm*2, start_fm, 3, padding=(1,1)),\n            ResidualBlock(start_fm),\n            ResidualBlock(start_fm, batch_activation=True),\n        )\n            \n        self.conv_last = nn.Conv2d(start_fm, n_classes, 1)\n\n    def forward(self, x):\n        # Encoder\n        \n        conv1 = self.encoder_1(x) #101\n        x = self.pool(conv1) # 50\n        x = nn.Dropout2d(self.drop\/2)(x)\n\n        conv2 = self.encoder_2(x) #50\n        x = self.pool(conv2) # 25\n        x = nn.Dropout2d(self.drop)(x)\n\n        conv3 = self.encoder_3(x) #25\n        x = self.pool(conv3) #12\n        x = nn.Dropout2d(self.drop)(x)\n\n        conv4 = self.encoder_4(x) #12\n        x = self.pool(conv4) #6\n        x = nn.Dropout2d(self.drop)(x)\n\n\n        # Middle\n        x     = self.middle(x) # 6\n        \n        # Decoder\n        x     = self.deconv_4(x) #12\n        x     = torch.cat([conv4, x], dim=1) #16\n        x     = self.decoder_4(x)\n        \n\n        x     = self.deconv_3(x) #25\n        x     = torch.cat([conv3, x], dim=1)\n        x     = self.decoder_3(x)\n\n\n        x     = self.deconv_2(x) #50\n        x     = torch.cat([conv2, x], dim=1)\n        x     = self.decoder_2(x)\n\n\n        x     = self.deconv_1(x) # 101\n        x     = torch.cat([conv1, x], dim=1)\n        x     = self.decoder_1(x)\n\n        out   = (self.conv_last(x)) # 101\n        return out","98b7148e":"def labels():\n  l = {}\n  for i, label in enumerate(CLASSES):\n    l[i] = label\n  return l\n\ndef tensor2np(tensor):\n    tensor = tensor.squeeze().cpu()\n    return tensor.detach().numpy()\n\ndef normtensor(tensor):\n    tensor = torch.where(tensor<0., torch.zeros(1).cuda(), torch.ones(1).cuda())\n    return tensor\n\ndef wandb_mask(bg_imgs, pred_masks, true_masks):\n    # bg_imgs    = [np.array(transforms.ToPILImage()(image)) for image in bg_imgs]\n    # pred_masks = [np.array(transforms.ToPILImage()(image)) for image in pred_masks]\n    # true_masks = [np.array(transforms.ToPILImage()(image)) for image in true_masks]\n\n    return wandb.Image(bg_imgs, masks={\n        \"predictions\" : {\n            \"mask_data\" : pred_masks,\n            \"class_labels\" : CLASSES\n            },\n        \"ground_truth\" : {\n            \"mask_data\" : true_masks, \n            \"class_labels\" : CLASSES\n            }\n        })\n    \ndef count_params(model):\n    pytorch_total_params = sum(p.numel() for p in model.parameters())\n    return pytorch_total_params","230f7ac5":"def cal_iou(outputs, labels, SMOOTH=1e-6):\n    with torch.no_grad():\n        outputs = outputs.squeeze(1).bool()  # BATCH x 1 x H x W => BATCH x H x W\n        labels = labels.squeeze(1).bool()\n        \n        intersection = (outputs & labels).float().sum((1, 2))  # Will be zero if Truth=0 or Prediction=0\n        union = (outputs | labels).float().sum((1, 2))         # Will be zzero if both are 0\n        \n        iou = (intersection + SMOOTH) \/ (union + SMOOTH)  # We smooth our devision to avoid 0\/0\n        \n        # thresholded = torch.clamp(20 * (iou - 0.5), 0, 10).ceil() \/ 10  # This is equal to comparing with thresolds\n    \n    return iou\n\n    # return iou.cpu().detach().numpy()\n\ndef get_iou_score(outputs, labels):\n    A = labels.squeeze(1).bool()\n    pred = torch.where(outputs<0., torch.zeros(1).cuda(), torch.ones(1).cuda())\n    B = pred.squeeze(1).bool()\n    intersection = (A & B).float().sum((1,2))\n    union = (A| B).float().sum((1, 2)) \n    iou = (intersection + 1e-6) \/ (union + 1e-6)  \n    \n    return iou.cpu().detach().numpy()","7ff68d11":"def train(model, device, trainloader, optimizer, loss_function):\n    model.train()\n    running_loss = 0\n    mask_list, iou = [], []\n    for i, (input, mask) in enumerate(trainloader):\n        # load data into cuda\n        input, mask = input.to(device), mask.to(device)\n\n        # forward\n        predict = model(input)\n        loss = loss_function(predict, mask)\n\n        # metric\n        iou.append(get_iou_score(predict, mask).mean())\n        running_loss += (loss.item())\n        \n        # zero the gradient + backprpagation + step\n        optimizer.zero_grad()\n\n        loss.backward()\n        optimizer.step()\n\n        # log the first image of the batch\n        if ((i + 1) % 10) == 0:\n            pred = normtensor(predict[0])\n            img, pred, mak = tensor2np(input[0]), tensor2np(pred), tensor2np(mask[0])\n            mask_list.append(wandb_mask(img, pred, mak))\n            \n    mean_iou = np.mean(iou)\n    total_loss = running_loss\/len(trainloader)\n    wandb.log({'Train loss': total_loss, 'Train IoU': mean_iou, 'Train prediction': mask_list})\n\n    return total_loss, mean_iou","aeeb2b76":"def test(model, device, testloader, loss_function, best_iou):\n    model.eval()\n    running_loss = 0\n    mask_list, iou  = [], []\n    with torch.no_grad():\n        for i, (input, mask) in enumerate(testloader):\n            input, mask = input.to(device), mask.to(device)\n\n            predict = model(input)\n            loss = loss_function(predict, mask)\n\n            running_loss += loss.item()\n            iou.append(get_iou_score(predict, mask).mean())\n\n            # log the first image of the batch\n            if ((i + 1) % 1) == 0:\n                pred = normtensor(predict[0])\n                img, pred, mak = tensor2np(input[0]), tensor2np(pred), tensor2np(mask[0])\n                mask_list.append(wandb_mask(img, pred, mak))\n\n    test_loss = running_loss\/len(testloader)\n    mean_iou = np.mean(iou)\n    wandb.log({'Valid loss': test_loss, 'Valid IoU': mean_iou, 'Prediction': mask_list})\n    \n    if mean_iou>best_iou:\n    # export to onnx + pt\n        try:\n            torch.save(model.state_dict(), SAVE_PATH+RUN_NAME+'.pth')\n        except:\n            print('Can export weights')\n\n    return test_loss, mean_iou","9398e783":"def model_pipeline(config, prev_model = None):\n    # tell wandb to get started\n    best_model = None\n    with wandb.init(project=\"TGS-Salt-identification\", tags=['Unet'], config=config):\n        # access all HPs through wandb.config, so logging matches execution!\n        config = wandb.config\n        \n        # make the model, data, and optimization problem\n        model, criterion, optimizer = make(config, prev_model)\n\n        best_iou = -1\n        wandb.watch(model, criterion, log=\"all\", log_freq=10)\n        for epoch in range(config['epoch']):\n\n            t0 = time.time()\n            train_loss, train_iou = train(model, device, trainloader, optimizer, criterion)\n            t1 = time.time()\n\n            print(f'Epoch: {epoch} | Train loss: {train_loss:.3f} | Train IoU: {train_iou:.3f} | Time: {(t1-t0):.1f}s')\n\n            test_loss, test_iou = test(model, device, validloader, criterion, best_iou)\n            print(f'Epoch: {epoch} | Valid loss: {test_loss:.3f} | Valid IoU: {test_iou:.3f} | Time: {(t1-t0):.1f}s')\n\n            # Wandb summary\n            if best_iou < test_iou:\n                best_iou = test_iou\n                best_model = copy.deepcopy(model)\n                wandb.run.summary[\"best_accuracy\"] = best_iou\n        \n#         trained_weight = wandb.Artifact(RUN_NAME, type='weights')\n#         trained_weight.add_file(SAVE_PATH+RUN_NAME+'.onnx')\n#         trained_weight.add_file(SAVE_PATH+RUN_NAME+'.pth')\n#         wandb.log_artifact(trained_weight)\n\n#         print(\"Model saved to Wandb\")\n\n    return best_model","b4f721e4":"def make(config, prev_model = None):\n    # Make the model\n    if prev_model == None:\n        model = UNet_ResNet().to(device)\n    else:\n        model = prev_model\n\n    print('Number of parameter:', count_params(model))\n\n    # Make the loss and optimizer\n    criterion = nn.BCEWithLogitsLoss()\n    optimizer   = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n    \n    return model, criterion, optimizer","3199dffc":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nconfig = dict(\n    lr          = LEARNING_RATE,\n    batchsize   = BATCH_SIZE,\n    epoch       = EPOCHS,\n    model_sf    = START_FRAME,\n    device      = device,\n)","35b16fef":"model = model_pipeline(config, prev_model=None)","4e816259":"TEST_IMAGE_PATH = 'test\/images\/'","af061df3":"import pandas as pd\ntrain_df  = pd.read_csv('.\/'+'train.csv', index_col='id')\ndepths_df = pd.read_csv('.\/'+'depths.csv', index_col='id')","cc7920b9":"test_df = depths_df.loc[depths_df.index.isin(train_df.index) == False]","4e9c0657":"test_df","44a1d4c8":"class Test_TGSDataset(Dataset):\n    \"\"\"TGS Salt Identification dataset.\"\"\"\n    \n    def __init__(self, root_dir=DATA_PATH, transform=None):\n        \"\"\"\n        Args:\n            root_path (string): Directory with all the images.\n            transformer (function): whether to apply the data augmentation scheme\n                mentioned in the paper. Only applied on the train split.\n        \"\"\"\n\n        # load dataset from root dir\n        train_df  = pd.read_csv(root_dir+'train.csv', index_col='id')\n        depths_df = pd.read_csv(root_dir+'depths.csv', index_col='id')\n        test_df = depths_df.loc[depths_df.index.isin(train_df.index) == False]\n\n        self.root_dir   = root_dir\n        self.ids        = test_df.index\n        self.depths     = test_df['z'].to_numpy()\n        \n        if transform is None:\n            self.transfrom = transforms.Compose([transforms.Grayscale(), \n                                                 transforms.ToTensor(),])\n                                                  \n\n    def __len__(self):\n        return len(self.ids)\n\n    def __getitem__(self, index):\n        id    = self.ids[index]\n        depth = self.depths[index]\n\n        # file should be unzipped\n        image = Image.open(self.root_dir+TEST_IMAGE_PATH+id+'.png')\n        image = self.transfrom(image)\n\n        return image","27c70e78":"def show_test_dataset(dataset, n_sample=4):\n    \"\"\"Visualize dataset with n_sample\"\"\"\n    fig = plt.figure()\n\n    # show image\n    for i in range(n_sample):\n        image = dataset[i]\n        image = transforms.ToPILImage()(image)\n        print(i, image.size)\n\n        plt.tight_layout()\n        ax = plt.subplot(1, n_sample, i + 1)\n        ax.set_title('Sample #{}'.format(i))\n        ax.axis('off')\n\n        plt.imshow(image, cmap=\"Greys\")\n\n        if i == n_sample-1:\n            plt.show()\n            break","1a17aa2f":"test_dataset = Test_TGSDataset(DATA_PATH)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=0)","2757c0f6":"show_test_dataset(test_dataset)","f6d7ba3a":"predicted_mask = []","08d0f7f4":"def predict(model, test_dataset, device):\n    model.eval()\n    predicted_masks = []\n    with torch.no_grad():\n        for i, input in enumerate(test_loader):\n            input = input.to(device)\n            predict = model(input)\n            predict = (predict > 0).type(torch.float)\n            predicted_masks.append(predict)\n    predicted_masks = torch.cat(predicted_masks)\n    return predicted_masks","e1c7a15a":"predicted_mask = predict(model, test_dataset, device=device)","027d9698":"def show_sample_test_result(test_dataset, predicted_mask, n_samples=20):\n    \"\"\"Visualize test sample and corresponding result.\"\"\"\n    plt.rcParams[\"figure.figsize\"] = (20,10)\n    for i in range(n_samples):\n        sample = predicted_mask[i]  \n        sample = torch.squeeze(sample, dim=0)\n        sample = transforms.ToPILImage()(sample)\n        X = test_dataset[i]\n        X = transforms.ToPILImage()(X)\n        \n        ax = plt.subplot(2, int(n_samples\/2), i + 1)\n        ax.set_title('Sample #{}'.format(i))\n        ax.axis('off')\n        plt.imshow(X, cmap=\"Greys\")\n        plt.imshow(sample, alpha=0.3, cmap=\"OrRd\")\n        if i == n_samples-1:\n            plt.show()\n            break\n        ","9c12f963":"show_sample_test_result(test_dataset, predicted_mask)","6fc532d6":"predicted_mask_np = predicted_mask.cpu().data.numpy()","5ea41c3a":"def rle_encode(im):\n    '''\n    im: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = im.flatten(order = 'F')\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","5c937980":"rle_results = []\nfor im in predicted_mask_np:\n    im = np.squeeze(im)\n    im_rle_result = rle_encode(im)\n    rle_results.append(im_rle_result)","c099af81":"submit = pd.DataFrame([list(test_dataset.ids), rle_results]).T\nsubmit.columns = ['id', 'rle_mask']","021e7209":"submit.to_csv('submission.csv', index = False)\n","1d193802":"submit","e7d3af1a":"# Reorganize Data","27d954d8":"**Unzip and move files to working directory**","bdcb88dd":"# Train and Eval Function","09c8859b":"**Helper function**","17cb3a61":"# Create dataset and dataloader train","46407f96":"# Unet & block","535b6aba":"**Move Directory**","cc801ed3":"# CONFIG","1e72477e":"# Start train","989a94ad":"# Import Library"}}