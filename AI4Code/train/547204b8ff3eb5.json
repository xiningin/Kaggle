{"cell_type":{"71c56702":"code","ead928af":"code","032d3a8d":"code","51c4652c":"code","6e345ea3":"code","174ac2ae":"code","9a876131":"code","1a4b2234":"code","70d516a0":"code","985c5b33":"code","046c750d":"code","ec75862c":"code","d169dfeb":"code","4a9ae11e":"code","fd7e3dfd":"code","2768293a":"markdown","df86e6b7":"markdown","0413adbf":"markdown","8533fc06":"markdown","305e8760":"markdown","892a98d4":"markdown"},"source":{"71c56702":"import ssl\nimport matplotlib.pyplot as plt\nimport keras\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport urllib.request, json \nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler","ead928af":"# Hyperparameters:\n\nINTERVAL = 18\nDATE_FROM = '2020-11-01'\nDATE_TO = '2021-03-01'\nSTEP_AFTER = 6\n \nSTEP = 5","032d3a8d":"#loading historical data with 1-minute intervals\n\nfilepath = \"http:\/\/www.cryptodatadownload.com\/cdd\/Bitstamp_BTCUSD_minute.csv\"\n\nssl._create_default_https_context = ssl._create_unverified_context\n\ndf = pd.read_csv(filepath, skiprows=1)\n\ndf.head(5)","51c4652c":"# selecting part of data for training and validation within predefined interval\n# putting data in ascending order \n\nbtc_set = df.where(df['date'] > DATE_FROM).where(df['date'] < DATE_TO).sort_values('date')\nbtc_set = btc_set.dropna()\nbtc_set = btc_set[['close']]","6e345ea3":"dataset = btc_set.values[::STEP]","174ac2ae":"X = []\ny = []\n \nfor i in range(0, len(dataset) - (INTERVAL + STEP_AFTER - 1)):\n    X.append(dataset[i:i + INTERVAL, 0])\n    y.append(dataset[i + INTERVAL + STEP_AFTER - 1, 0])\n\nX, y = np.array(X), np.array(y)","9a876131":"training_size = int(len(X) * 0.9)\n \nX_train = X[:training_size]\ny_train = y[:training_size]\n \nX_test = X[training_size:]\ny_test = y[training_size:]","1a4b2234":"model = Sequential()\n \nmodel.add(Dense(512))\nmodel.add(Dropout(0.2))   \n\nmodel.add(Dense(512)) \n\nmodel.add(Dense(1024))\n\nmodel.add(Dense(1))\n \n#model.summary()\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\nmodel.fit(X_train, y_train, epochs = 20, batch_size = 256)","70d516a0":"y_predicted = model.predict(X_test)","985c5b33":"last = 1000\n \nplt.plot(y_test[-last:], color = 'red', label = 'Real Price')\nplt.plot(y_predicted[-last:], color = 'blue', label = 'Predicted Price')\n \nplt.show()","046c750d":"#time period for the data which gonna be downloaded\nto_time = datetime.datetime.now()\nfrom_time = to_time - datetime.timedelta(minutes=((INTERVAL + STEP_AFTER) * STEP))\n \ndate_to = to_time.strftime(\"%Y-%m-%dT%H:%M\")\ndate_from = from_time.strftime(\"%Y-%m-%dT%H:%M\")\n \nprint(date_from)\nprint(date_to)","ec75862c":"api_url = \"https:\/\/production.api.coindesk.com\/v2\/price\/values\/BTC?start_date=\" + date_from + \"&end_date=\" + date_to + \"&ohlc=false\"\n \nwith urllib.request.urlopen(api_url) as url:\n    data_json = json.loads(url.read().decode())\n\nlive_data = np.array(data_json['data']['entries'])[:,1]\n \nlive_data = live_data.reshape(-1,1)[::STEP]","d169dfeb":"X = []\nfor i in range(INTERVAL, INTERVAL + STEP_AFTER):\n    X.append(live_data[i - INTERVAL:i, 0])\n\nX = np.array(X)","4a9ae11e":"predicted_price = model.predict(X)","fd7e3dfd":"live_data_transformed = live_data\n \nresUnified = np.concatenate((live_data_transformed, predicted_price * live_data_transformed[-1] \/ predicted_price[0]))\n \n\nplt.plot(resUnified, color = 'blue')\nplt.plot(live_data_transformed, color = 'red')\nplt.show()","2768293a":"# Model","df86e6b7":"Loading realtime data from API","0413adbf":"# Real world testing","8533fc06":"# **Importing & preparing data**","305e8760":"The idea is to make a labeled set of observations from BTC time series and based on this data try to make prediction of upcoming trend using deep learining algorithm.","892a98d4":"# Making prediction"}}