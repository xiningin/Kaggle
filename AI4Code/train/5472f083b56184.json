{"cell_type":{"259e8136":"code","dca0f0af":"code","45b3c37d":"code","2ccaa66b":"code","06fd5210":"code","92cdcbda":"code","e6a57cef":"code","98e63752":"code","62451b29":"code","81a6a384":"code","519d7ef4":"code","32d34452":"code","11f52b9f":"code","4a59e288":"code","cc4d0cb8":"code","4e07f017":"code","334b8e0f":"code","34692f8a":"code","d18b3199":"code","cca54ab3":"code","e468de83":"code","6c70b682":"code","c428035b":"code","75c15e94":"code","4e67cb5c":"code","881855c5":"code","aa750880":"code","acd025c8":"code","96e4aae8":"code","41717247":"code","1d0ec28d":"code","01d0efb5":"code","47f73842":"code","1e5fb66a":"code","d70a96ef":"markdown"},"source":{"259e8136":"# Basic Mathematic operations in Python\n\n\n\n# Addition\nprint(7+10)\n\n# Addition, subtraction\nprint(5 + 5)\nprint(5 - 5)\n\n#Division\nprint(5 \/ 8)\n\n# Multiplication, division, modulo, and exponentiation\nprint(3 * 5)\nprint(10 \/ 2)\nprint(18 % 7)\nprint(4 ** 2)\n\n# How much is your $100 worth after 7 years?\na = (100*(1.1**7))\nprint(a)","dca0f0af":"# Create a variable savings\n\nsavings = 100\n\n# Print out savings\nprint(savings)","45b3c37d":"# Create a variable savings\nsavings = 100\n\n# Create a variable growth_multiplier\n\ngrowth_multiplier = 1.1\n\n\n# Calculate result\n\n\nresult = savings * growth_multiplier ** 7\n\n\n# Print out result\n\nprint(result)\n","2ccaa66b":"# Create a variable desc\n\ndesc = \"compound interest\"\n\n# Create a variable profitable\n\nprofitable = True","06fd5210":"savings = 100\ngrowth_multiplier = 1.1\ndesc = \"compound interest\"\n\n# Assign product of growth_multiplier and savings to year1\n\nyear1 = savings * growth_multiplier\n\n# Print the type of year1\n\nprint(type(year1))\n\n# Assign sum of desc and desc to \n\ndoubledesc = desc + desc\n\n# Print out doubledesc\n\nprint(doubledesc)\n","92cdcbda":"# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\nst_savings = str(savings)\nst_result = str(result)\n\n# Fix the printout\nprint(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")\n\n# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\n\npi_float = float(pi_string)\n\nprint(pi_float)\n","e6a57cef":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Create list areas\n\nareas = [hall,kit,liv,bed,bath]\n\n# Print areas\n\nprint(areas)\n\n","98e63752":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Adapt list areas\nareas = [\"hallway\",hall, \"kitchen\", kit, \"living room\", liv,\"bedroom\", bed, \"bathroom\", bath]\n\n# Print areas\n\nprint(areas)\n","62451b29":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# house information as list of lists\nhouse = [[\"hallway\", hall],\n         [\"kitchen\", kit],\n         [\"living room\", liv],\n         [\"bedroom\", bed],\n         [\"bathroom\", bath]]\n\n# Print out house\n\nprint(house)\n\n# Print out the type of house\n\nprint(type(house))\n","81a6a384":"# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Print out second element from areas\nprint(areas[1])\n\n# Print out last element from areas\nprint(areas[9])\n\n# Print out the area of the living room\nprint(areas[5])","519d7ef4":"# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Sum of kitchen and bedroom area: eat_sleep_area\n\neat_sleep_area = areas[3]+areas[7]\n\n# Print the variable eat_sleep_area\n\nprint(eat_sleep_area)\n","32d34452":"# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n# Use slicing to create downstairs\n\ndownstairs = areas[0:6]\n\n# Use slicing to create upstairs\n\nupstairs = areas[6:]\n\n# Print out downstairs and upstairs\n\nprint(downstairs)\n\nprint(upstairs)","11f52b9f":"# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Alternative slicing to create downstairs\n\ndownstairs = areas[:6]\n\nprint(downstairs)\n\n# Alternative slicing to create upstairs\n\nupstairs = areas[6:]\n\nprint(upstairs)","4a59e288":"# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Correct the bathroom area\n\nareas[-1] = 10.50\n\n# Change \"living room\" to \"chill zone\"\n\nareas[4] = \"chill zone\"","cc4d0cb8":"# Create the areas list and make some changes\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"chill zone\", 20.0,\n         \"bedroom\", 10.75, \"bathroom\", 10.50]\n\n# Add poolhouse data to areas, new list is areas_1\nareas_1 = areas + [\"poolhouse\", 24.5]\n\n# Add garage data to areas_1, new list is areas_2\n\nareas_2 = areas_1 + [\"garage\", 15.45]","4e07f017":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = areas[:]\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)","334b8e0f":"# Create variables var1 and var2\nvar1 = [1, 2, 3, 4]\nvar2 = True\n\n# Print out type of var1\n\nprint(type(var1))\n\n# Print out length of var1\n\nprint(len(var1))\n\n# Convert var2 to an integer: out2\n\nout2 = int(var2)\n\n","34692f8a":"# Create lists first and second\nfirst = [11.25, 18.0, 20.0]\nsecond = [10.75, 9.50]\n\n# Paste together first and second: full\n\nfull = first + second\n\n# Sort full in descending order: full_sorted\n\nfull_sorted = sorted(full,reverse=True)\n\n# Print out full_sorted\n\nprint(full_sorted)\n","d18b3199":"# string to experiment with: place\nplace = \"poolhouse\"\n\n# Use upper() on place: place_up\n\nplace_up = place.upper()\n# Print out place and place_up\n\nprint(place)\nprint(place_up)\n# Print out the number of o's in place\nprint(place.count(\"o\"))","cca54ab3":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\n\nprint(areas.index(20.0))\n\n# Print out how often 9.50 appears in areas\n\nprint(areas.count(9.50))","e468de83":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Use append twice to add poolhouse and garage size\n\nareas.append(24.5)\nareas.append(15.45)\n\n\n\n# Print out areas\n\nprint(areas)\n\n# Reverse the orders of the elements in areas\n\nareas.reverse()\n\n# Print out areas\nprint(areas)","6c70b682":"# Definition of radius\nr = 0.43\n\n# Import the math package\nimport math\n\n# Calculate C\nC = 2*(math.pi)*r\n\n# Calculate A\nA = math.pi*(r*r)\n\n# Build printout\nprint(\"Circumference: \" + str(C))\nprint(\"Area: \" + str(A))","c428035b":"# Definition of radius\nr = 192500\n\n# Import radians function of math package\n\nfrom math import radians\n\n# Travel distance of Moon over 12 degrees. Store in dist.\n\nphi = radians(12)\n\n# Print out dist\n\ndist = r*phi\n\nprint(dist)","75c15e94":"# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Import the numpy package as np\n\nimport numpy as np\n\n# Create a numpy array from baseball: np_baseball\n\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\n\nprint(type(np_baseball))","4e67cb5c":"# height is available as a regular list\n\n# Import numpy\n\nimport numpy as np\n\nheight_in = [70.47, 80.13, 75.91, 89.12, 78.43, 75.32]\n\n# Create a numpy array from height_in: np_height_in\n\nnp_height_in = np.array(height_in)\n\n# Print out np_height_in\n\nprint(np_height_in)\n\n# Convert np_height_in to m: np_height_m\n\nnp_height_m = np_height_in*0.0254\n\n# Print np_height_m\n\nprint(np_height_m)\n","881855c5":"# height and weight are available as regular lists\n\n# Import numpy\nimport numpy as np\n\n# Create array from height_in with metric units: np_height_m\nnp_height_m = np.array(height_in) * 0.0254\n\n# Create array from weight_lb with metric units: np_weight_kg\n\nweight_lb = [170.47, 180.13, 175.91, 189.12, 178.43, 175.32]\n\nnp_weight_kg = np.array(weight_lb)*0.453592\n\n# Calculate the BMI: bmi\n\nbmi = np_weight_kg \/ np_height_m **2\n\nprint(bmi)\n\n\n# Print out bmi\n","aa750880":"# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height_in) * 0.0254\nnp_weight_kg = np.array(weight_lb) * 0.453592\nbmi = np_weight_kg \/ np_height_m ** 2\n\n# Create the light array\n\nlight = bmi<21\n\n# Print out light\n\nprint(light)\n\n# Print out BMIs of all baseball players whose BMI is below 21\n\nprint(bmi[light==True])\n\n","acd025c8":"# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight_lb = np.array(weight_lb)\nnp_height_in = np.array(height_in)\n\n# Print out the weight at index 5\n\nprint(weight_lb[5])\n\n# Print out sub-array of np_height_in: index 2 up to and including index 5\n\nprint(np_height_in[2:6])\n","96e4aae8":"# Create baseball, a list of lists\nbaseball = [[180, 78.4, 1],\n            [215, 102.7, 1],\n            [210, 98.5, 1],\n            [188, 75.2, 1]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)","41717247":"# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)","1d0ec28d":"# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 4th row of np_baseball\nprint(np_baseball[3,:])\n\n# Select the entire second column of np_baseball: np_weight_lb\n\nnp_weight_lb = np_baseball[:,1]\n\n# Print out height of 3rd player\n\nprint(np_baseball[3,0])","01d0efb5":"# baseball is available as a regular list of lists\n# updated is available as 2D numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and updated\n#print(np_baseball+updated)\n\n# Create numpy array: conversion\n\nconversion = np.array([0.0254,0.453592,1])\n\n\n# Print out product of np_baseball and conversion\n\nprint(np_baseball*conversion)\n","47f73842":"# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))\n\n# Print median height. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))\n\n# Print out the standard deviation on height. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))\n\n# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0],np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))","1e5fb66a":"# heights and positions are available as lists\n\n# Import numpy\nimport numpy as np\n\nnp_positions = np.array([\"GK\", \"F\", \"D\", \"GK\", \"F\", \"D\"])\nnp_heights = np_height_in\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\n\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))\n\n# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))","d70a96ef":"\n\n**Hi ! Welcome to my Kernel**\n\n> **** This the first part of a series of kernels that wil familiarize you with the naunces of Machine Learning using Python\n\n* I created this kernel so that beginners can use this to learn the syntax and data types in Python.\n\n* Others may just use this code as a refresher !!\n\n**We will look at the following topics in this kernel**\n\n1. Basic Operations in Python\n2. Creating variables in Python and working with them\n3. Python Lists, Functions and Packages\n4. Introduction to Numpy\n"}}