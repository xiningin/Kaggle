{"cell_type":{"34c812ee":"code","7f2ad8d8":"code","d11e70af":"code","ceda9491":"code","52836204":"markdown"},"source":{"34c812ee":"import math\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nfrom matplotlib import animation as ani\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\n#rc('text', usetex=True)\nfrom IPython.display import display # Allows the use of display() for DataFrames\nimport seaborn as sns\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\nsns.set_style(\"whitegrid\", {'grid.linestyle': '--'})\nred = sns.xkcd_rgb[\"light red\"]\ngreen = sns.xkcd_rgb[\"medium green\"]\nblue = sns.xkcd_rgb[\"denim blue\"]\n","7f2ad8d8":"TARGET_COL_NAME = \"Yards\"\ntrain = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False, dtype={\"GameId\":object, \"PlayId\":object})\ntrain.TimeHandoff = pd.to_datetime(train.TimeHandoff)\ntrain.TimeSnap = pd.to_datetime(train.TimeSnap)","d11e70af":"DEBUG = False\n\nX_MAX = 120\nY_MAX = 53.3\ndown_disp_dict = {i+1: v for i, v in enumerate([\"1st\", \"2nd\", \"3rd\", \"4th\"])}\narrow_length_coef = 5\n\ndef draw_scatter_arrow(df, color, team, rusher_id):\n    rusher_color = np.where(df.NflId == rusher_id, \"r\", \"k\")\n    plt.scatter(x=df.X, y=df.Y, color=color, alpha=0.7, s=30, label=team, edgecolors=rusher_color)\n    for i, df_s in df.iterrows():\n        distance_each = df_s.Dis\n        dx = math.cos(math.radians(df_s.Dir))*distance_each*arrow_length_coef\n        dy = math.sin(math.radians(df_s.Dir))*distance_each*arrow_length_coef\n        if dx!=0 or dy!=0:\n            plt.arrow(x=df_s.X, y=df_s.Y, dx=dx, dy=dy, length_includes_head=True, color='k')\n\ndef draw_field_animation(game_id):\n    def animate(nframe):\n        global num_frame\n        plt.clf()\n\n        df = df_list[nframe]\n        play_dir = df.iloc[0].PlayDirection\n        quater = df.iloc[0].Quarter\n        yards = df.iloc[0].Yards\n        field_position  = df.iloc[0].FieldPosition\n        possession_team = df.iloc[0].PossessionTeam\n        yard_line = df.iloc[0].YardLine\n        down = df.iloc[0].Down\n        distance = df.iloc[0].Distance\n        handoff_snap = df.iloc[0].TimeHandoff.value\/\/1000\/\/1000 - df.iloc[0].TimeSnap.value\/\/1000\/\/1000\n        rusher = df.iloc[0].NflIdRusher\n        \n        score_home = df.iloc[0].HomeScoreBeforePlay\n        score_vistor = df.iloc[0].VisitorScoreBeforePlay\n\n        # ref: https:\/\/www.kaggle.com\/hookbook\/nfl-data-visualization-of-plays\n        own = (field_position == possession_team)\n        if (own and play_dir == 'left') or (own == False and play_dir == 'right'):\n            start_line = 110 - yard_line\n        elif (own and play_dir == 'right') or (own == False and play_dir == 'left'):\n            start_line = 10 + yard_line\n        if play_dir == 'right':\n            gain_line = start_line + yards\n        elif play_dir == 'left':\n            gain_line = start_line - yards\n            \n        df_home = df[df.Team==\"home\"]\n        df_away = df[df.Team==\"away\"]\n\n        if play_dir == 'right':\n            arrow_x = 30\n            arrow_dx = 60\n        else:\n            arrow_x = 90\n            arrow_dx = -60\n            \n        plt.arrow(x=arrow_x, y=25, dx=arrow_dx, dy=0, length_includes_head=True, width=10, head_length=10,head_width=20, \n                  color='pink', edgecolor=None, alpha=0.2)\n        plt.fill_between([0,10], Y_MAX, color=\"pink\", alpha=0.3)\n        plt.fill_between([110,120], Y_MAX, color=\"pink\", alpha=0.3)\n        \n        plt.vlines(start_line, 0, Y_MAX, \"r\", label=\"YardLine\")\n        plt.vlines(gain_line, 0, Y_MAX, \"purple\", label=\"YardLine + Yards\")\n        \n        draw_scatter_arrow(df_home, color=\"b\", team=\"home\", rusher_id=rusher)\n        draw_scatter_arrow(df_away, color=\"g\", team=\"away\", rusher_id=rusher)\n        \n        plt.xlim(0, X_MAX)\n        plt.ylim(0, Y_MAX)\n        plt.title(f\"frame: {nframe}, Q:{quater},home{score_home} vs visitor{score_vistor}, {down_disp_dict[down]}&{distance} Yards:{yards}, PlayDir:{play_dir}, own:{own}, handoff-snap:{handoff_snap} \")\n        plt.legend(loc=\"lower left\")\n        plt.xticks(np.arange(0,120,10), np.arange(-10,110,10))\n\n    train_game = train[train.GameId==game_id]\n    df_list = [g for _, g in train_game.groupby(\"PlayId\")]\n    num_frame = 3 if DEBUG else len(df_list)\n    \n    fig = plt.figure(figsize=(12,5))\n    anim = ani.FuncAnimation(fig, animate, frames=int(num_frame))\n    \n    save_name = f'field_anim_{game_id}.gif'\n    anim.save(save_name, writer='imagemagick', fps=1, dpi=128)\n    plt.close()\n    return save_name","ceda9491":"n_game = 1 if DEBUG else 10\nfor game_id in  train.GameId.unique()[:n_game]:\n    print(f\"GameId: {game_id}\")\n    save_name = draw_field_animation(game_id)\n    with open(save_name, 'rb') as file:\n        display(Image(file.read()))","52836204":"#### Point\n* Background pink arrow means dirction of offence team.  \n* A line from each circle means direction and distance of player's move. (distance is deformed with a coefficient)\n* Rusher is marked as red edge color."}}