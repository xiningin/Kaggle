{"cell_type":{"09e4412e":"code","446a069a":"code","1c1abfc3":"code","6f9babd6":"code","24e9f912":"code","099f38ea":"code","27e80d1c":"code","ed993c47":"code","d24aa8da":"code","6d8188a1":"code","56749bf5":"markdown","2c736c89":"markdown","10554877":"markdown","c9d8e9ce":"markdown","052384da":"markdown"},"source":{"09e4412e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","446a069a":"from numpy.linalg import norm","1c1abfc3":"class point(object):\n  def __init__(self,xi,idx):\n    self.core=False\n    self.border=False\n    self.noise=False\n    self.data=xi\n    self.idx=idx\n    #points in epsilon distance\n    self.neighbors=set()\n    #visited for grouping used\n    self.visited=False\n\n  def core_grouping(self):\n    self.core_neighbors=set()\n    for neighbor in self.neighbors:\n      if neighbor.core:\n        self.core_neighbors.add(neighbor)","6f9babd6":"class density_based_clustering(object):\n  def __init__(self,ep,min_pts):\n    self.D={}\n    self.ep=ep\n    self.min_pts=min_pts\n\n  def build_database(self,X):\n    for idx,xi in enumerate(X):\n      self.D[idx]=point(xi,idx)\n\n  def build_data_type(self,X):\n    self.build_database(X)\n    #search core \n    for idx in self.D:\n      for others in self.D:\n        #compute distance\n        dis=norm(self.D[others].data-self.D[idx].data)\n        #ignore self and capture data which their distance<=ep\n        if dis!=0 and dis<=self.ep:\n          self.D[idx].neighbors.add(self.D[others])\n\n      #search core\n      if len(self.D[idx].neighbors)>=self.min_pts:\n        self.D[idx].core=True\n\n    #search border and noise \n    for idx in self.D:\n      decision=[]\n      if self.D[idx].core==False:\n        for neighbor in self.D[idx].neighbors:\n          if neighbor.core:\n            decision.append(1)\n          else:\n            decision.append(0)\n        if 1 in decision:\n          self.D[idx].border=True\n        else:\n          self.D[idx].noise=True\n      else:\n        self.D[idx].core_grouping()\n\n  #recursive\n  def connect_core(self,core,group):\n    for neighbor in core.core_neighbors:\n      if neighbor in group:\n        pass\n      else:\n        group.add(neighbor)\n        self.connect_core(neighbor,group)\n        neighbor.visited=True\n\n\n  def clustering(self,X):\n\n    #set data type(core border noise)\n    self.build_data_type(X)\n\n\n    #connect core point \n    #grouping step should notice what i mention above, look at the picture !\n    groups={}\n    for idx in self.D:\n      if self.D[idx].core and self.D[idx].visited==False:\n        groups[idx]=set()\n        groups[idx].add(self.D[idx])\n        self.D[idx].visited=True\n        self.connect_core(self.D[idx],groups[idx])\n\n    cluster={idx:[] for idx,key in enumerate(groups)}\n    for idx,group in enumerate(groups):\n      data=set()\n      for core in groups[group]:\n        data.add(core)\n        for neighbor in core.neighbors:\n          data.add(neighbor)\n      for pt in data:\n        #ignore noise\n        if not pt.noise:\n          cluster[idx].append(pt.data)\n    for key in cluster:\n      cluster[key]=np.array(cluster[key])\n    return cluster","24e9f912":"from sklearn.datasets import make_moons\n\ndata=make_moons(n_samples=200,noise=0.05,random_state=0)\nX=data[0]\ny=data[1]\nplt.scatter(X[:,0],X[:,1], c='cyan', edgecolor='black',marker='s',s=40)\nplt.show()","099f38ea":"dbscan=density_based_clustering(0.2,5)\ndict_X=dbscan.clustering(X)\ncolor=['cyan','red']\nfor id,idx in enumerate(dict_X):\n  plt.scatter(dict_X[idx][:,0],dict_X[idx][:,1],c=color[id], edgecolor='black',marker='s',s=40,label=f'group{idx}')\nplt.legend()","27e80d1c":"from sklearn.datasets import make_blobs","ed993c47":"data=make_blobs(n_samples=300,random_state=3)\nX=data[0]\ny=data[1]","d24aa8da":"plt.scatter(X[:,0],X[:,1], c='cyan', edgecolor='black',marker='s',s=40)","6d8188a1":"dbscan=density_based_clustering(1.2,7)\ndict_X=dbscan.clustering(X)\ncolor=['cyan','red','lightgreen','black','yellow','white','orange']\nfor id,idx in enumerate(dict_X):\n  plt.scatter(dict_X[idx][:,0],dict_X[idx][:,1],c=color[id], edgecolor='black',marker='s',s=40,label=f'group{idx}')\nplt.legend()","56749bf5":"Core point : more than min_pts points in distance range $\\epsilon$\n\nBorder point :neighbors number < min_pts but more or eqaul to one neighbor is core\n\nNoise point :out of the two situation we discribe above will be a noise point","2c736c89":"# Algorithm","10554877":"# Blobs data","c9d8e9ce":"* Notice that when doing grouping, cores overlapping but not lap each others\n\n* I solve this by recursive \n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAfUAAAFUCAYAAAA9CKVaAAAgAElEQVR4Ae2diZLbupJt\/f8\/7RNwHdgUxQEEkfOqCAUlEsxh5Qb29bvdr3\/95g8CEIAABCAAgRQEfqXogiYgAAEIQAACEPiNqSMCCEAAAhCAQBICmHqSQdIGBCAAAQhAAFNHAxCAAAQgAIEkBDD1JIOkDQhAAAIQgACmjgYgAAEIQAACSQhg6kkGSRsQgAAEIAABTB0NQAACEIAABJIQwNSTDJI2IAABCEAAApg6GoAABCAAAQgkIYCpJxkkbUAAAhCAAAQwdTQAAQhAAAIQSEIAU08ySNqAAAQgAAEIYOpoAAIQgAAEIJCEAKaeZJC0AQEIQAACEMDU0QAEIAABCEAgCQFMPckgaQMCkQj8+vXrt+UnEitqhcATApj6E1qshQAE\/hJ4Y8p\/gxh96bUbpSctBMQIYOpiaAkMgdgEuvGdXWN391N97y1DL\/QAgUYAU0cHEChMoJva0bUSlt5\/pZ7pNScBTD3nXOkKAocEunn16+GiwjfhUnj4SVrH1JMMkjYgcESgm1S\/Hq3h3jcBeH0z4U4MAph6jDlRJQRuCXQj2l5vX2LBJQFYXuLhoUMCmLrDoVASBPYEtuZy9n3\/Dr\/XEujc10YlGgTWEsDU1\/IkGgReE+jmsb2+DkqAZQT6XJYFJBAEFhLA1BfCJBQE3hDALN7Q03+3z6td+YOAFwKo0cskqKMsgW4OZQEkaLzPsF8TtEQLQQlg6kEHR9nxCWAA8Wd41kGfbb+ereM+BFYTwNRXEyUeBC4I9EO+XfmrQ4C515m1daecLNYTIH8JAv1QL9EsTV4SQAuXeHj4kgCm\/hIgr0PgigAH+BWd2s\/QRu35S3WPqUuRJW5ZAv2wblf+IHBHoOvlbh3PITBCgFNnhBJrIHBBoB\/K\/XqxlEcQOCWAfk7R8OABAUz9ASyWQqAR6Idvv0IFAisJoKuVNOvFwtTrzZyOHxLoh2y\/Pnyd5RCYIoDeprCVfwlTLy8BAJwR4FA9I8N9TQLoUJN2\/FyYevwZ0sFiAhyii4ESbgkBdLkEY\/ogmHr6EdPgKAEOzVFSrLMkgE4t6fvPjan7nxEVChPgkBQGTHgRAuhWBGv4oJh6+BHSwCwBDsVZcrzniQA69jQN+1owdfsZUIEyAQ5BZeCkUyGArlUwu0+CqbsfEQWuIsCht4okcTwTQOeepyNfG6Yuz5gMxgQ45IwHQHoTAl337cpfHQJMu86sS3S6Pcj69xKN0yQELgiwFy7gJHuEqScbaKV2+kG1vVbqn14h8JRA3ytP32N9HAKYepxZUenu\/991gEAAAnMEMPc5bhHewtQjTKl4jf0Aalf+IACBdQT63loXkUjWBDglrSdA\/kMC\/bDByA\/xcBMCSwmw35biNA2GqZviJ\/mWAAfLlgbfIWBDoO9Dm+xkfUsAU39LkPdfEegHSLvyBwEI+CHQ96afiqhkhAAn6Qgl1iwj0A+Kfl0WmEAQgIAIgb5X25U\/\/wSYkv8Zha+QQyH8CGkAAn8I9L0MDr8EMHW\/swlbWd\/4\/Rq2EQqHAAQOCbC3D7G4uImpuxhD7CL6Bu\/X2N1QPQQgMEqAPT9KSm8dpq7HOlWmvpnblT8IQKA2gX4e1Kbgo3tOZB9zCFMFmzfMqCgUAuoE+A\/56si\/EmLqX0i4cUQAMz+iwj0IQGBPgLNiT0T3N6auyztcNjZouJFRMARcEODssBkDpm7D3X1WNqT7EVEgBEIQaGcJf3oEoK3H2n2mbuRsQvejokAIhCLQz5ZQRQctFlMPOrhVZffNhpGvIkocCEDgjADnzBmZdfcx9XUsQ0TamjgbLMTIKBICqQj0MyhVU46awdQdDUOqlL6JMHEpwsSFAASeEuA8ekpsbD2mPsYp3CqMPNzIKBgC5Qj0c6pc44INY+qCcC1Cs0ksqJMTAhB4Q4B\/tb+h9\/kupv7JI+wvzDzs6CgcAhD4\/fs3Z9gaGWDqaziaRWEjmKEnMQQgIECAf7W\/g4qpv+Nn9jZmboaexBCAgDABzrd5wJj6PDuTNxG7CXaSQgACBgQ4755Dx9SfMzN5A3GbYCcpBCDggEA7\/\/gbIwCpMU5mqzBzM\/QkhgAEHBHgLBwbBqY+xkl9FQJWR05CCEAgAAH+1X49JEz9mo\/6U8xcHTkJIQCBYAQw9vOBYernbNSedCNHqGrISQQBCAQn0M\/N4G0sLx9TX450LGAXJEY+xotVEIAABI4IcIZ+UsHUP3mI\/dqaOCIUw0xgCECgIAHO1H9Dx9T\/sRD51s1cJDhBIQABCEDgDwHO2h8hYOpCGwKBCYElLAQgAIELAtX\/1Y6pX4hj9lF1Uc1y4z0IQAACKwhUPoMx9RUK+j8G\/zpfCJNQEIAABF4QqHoeY+ovRNNfrSqe3j9XCEAAAl4JVPtXO6b+UonVBPMSF69DAAIQUCdQ6ZzG1Cflxb\/OJ8HxGgQgAAEDAlWMHVN\/KC7M\/CEwlkMAAhBwQqCCsWPqg2LDzAdBsQwCEICAYwLZjR1TvxEfZn4DiMcQgAAEghHIbOyY+okYMfMTMNyGAAQgkIBAVmPH1HfixMx3QPgJAQhAICmBjMaOqf8vVsw86a6lLQhAAAIXBLIZe3lTx8wv1M4jCEAAAgUIZDL2sqaOmRfYqbQIAQhAYJBAFmMvZ+qY+aDCWQYBCECgGIEMxl7G1DHzYruTdiEAAQhMEIhu7OlNHTOfUDWvQAACEChMILKxpzb1yIMpvJ9oHQIQgIA5gaj+kdbUow7EXMkUAAEIQAACfwhE9JGUph5xEOwhCEAAAhDwRyCan6Qz9WgD8CdhKoKAbwJtj1f9+J5M3uoi+UoaU++bPK+s6AwCNQj0vXx2rUHhuMstk+MV3JUi0NhH+ItR5Q3JKLBv2uAxBMoR2JpU\/14OwmTD8JoE9+K1CF4T3tQjQH6hIV6FQEoCGNK6sXIGrmN5FykC69CmHgHwnUh4DoEqBLqRs2\/XT3zLdvt9fSYietdvWFP3DhbpQwACPwS6ycBDnwDsZZh79p+Qpu4ZqIyEiAqBeAQwFD8z67PoVz+Vxa3Eqw+FMnUEGXcDUHl+An1\/9mv+juN26NWQohH1yDGMqXuEF02A1AsBCQKYuARV+Zicqe8Ze2QYwtQ9gnsvByJAIDYBzDz2\/Fr1zPD9DL35k2tTR3DvBUcECEgQ8HaQSfRYKSZn7fy0ve0Ft6buDdT8yHkTArkIsDdzzXPbDbPd0hj\/7ombS1P3BGh8rKyEQH4C7M3cM2a+c\/P1xM2VqTcwnuDMjZe3IJCTAHsz51z3XXEO74mM\/fayP9yYuhcgY+NjFQRqEWB\/1pp365aZP5+5B2YuTN0DiOfj4w0I1CDA\/qwx56Mu2+yZ\/xGZ83vWvMxN3RrA+Wh4AgEIsD\/RQCOADsZ1YM3KzNRb49bNj4+JlRCoR4D9WW\/mVx2jhys6n88sWZmYumXDn+j5BQEIHBFgjx5RqX0PTTybvxUvdVO3avTZOFgNgboE2KN1Z3\/XedMG+rij9PPcipOqqVs1OTYCVkEAAuxRNDBCoOkErVyTsuKjZupWDV5j5ykEINAJsEc7Ca6jBJpm0M0xLSsuKqZu1dwxau5CAAJ7AuzRPRF+PyGAfo5pWXDB1I9nwV0IlCFgcfCUgVuoUXT0PWwLJuKmbtHUN1ruQAACRwTYn0dUuDdLAD19krPgIWrqFg19IuUXBCBwRoD9eUaG+28IoKt\/9CxYiJm6RTP\/UPINAhC4IsD+vKLDs7cE0Nc\/gtosRExdu4l\/+PgGAQiMEGCPjlBizRsCaOyHnjYHTP2NankXAgEJaB8yARFR8iICaO0HpCaH5aauWfwi3REGAqUIsEdLjdu8WfSm+38QZ6mpMzzz\/UMBEDgl0PYne\/QUDw+ECKC5oKbO4IR2BGFFCXSj4\/pj+E84iA6G4GkI4A0\/o9TisOxf6loFp1E6jZgQ2JuWSRFGSVfv0c7SqB3SBiGwWndB2v4qU4vDElPXKvaLEjcgMEigugFJ7lHJ2IPjZZljAujj33A0WLw2dY0i\/yHhGwTGCTRt9s\/4WzlXSu9TOOfUzaqupPW3qk7pOBocXpm6RoHSkImfjwAG8zlTzX0K+0\/2\/PohoKlBz8w1OEybukZxnodDbb4IdDNBl99zsWBikfO7c+54IYAefiahwQFT96J66pgi0DaJxkaZKs7JS1Z8rPI6wU4ZOwLo4QeINIcpU5cuaqcFfkLgkAA6PMTyddOSk2XuLxDcMCeAHuT\/d9YfmzpDMd8XFPA\/AbQ4JgVrTi2\/dQ1jpFilQaC6FqT7f2Tq0sVoCIoc8Qk0HaLF8Tl6YeWljnFyrJQgUF0H0v1j6hKqJaYIgbYZpDeESOHGQT0xY4bGYnCQ3pMeLXBI9z9s6tKFWMAlZxwC6G9+Vh7ZeaxpnjBvPiFQffbS\/Q+ZunQRTwTB2poE0OD83L2ya3V5rW2eNm\/eEag+c+n+b01duoA7AfAcAmjwnQa882v1ea\/x3QR4e0ug+qyl+8fUt2rjuzsC0hvAXcMCBUVh2OqMUqvAmMqErD5j6f4vTV06eRkV0+gUAfQ3he3rpWgco9X7BZwblwSqz1e6\/1NTl058OXUelieA\/tZJICLLiDWvm1juSNVnK93\/oalLJ80tWbpbQQANrqD4EyMqy6h1r5tc3kiVZyvdO6aed9+E7Uxa9GHBTBYemWerPXL9kyNL\/1rlmUr3\/mXq0gnTq5UGXxNAg68RfgTIwLP1kKGPj8EU\/lF5ltK9Y+qFN5bH1qUF77Fn6ZoyMc3Ui\/TcPcevPEfp3j9MXTqZZ5FRmz0B9Cczg0xcM\/UiM+0YUSvPUbr3v6YunSiG1KjSigD6kyOfjW3rJ1tPctP3Gbny\/KR7x9R9ar5cVdJCLwd003BWtln72owu7dfKs5Pu\/Y+pSydJq0waW0IA\/S3BeBokM9\/MvZ0ONMGDynOT7v2XdIIE+qMFYQJoUBZwdr7Z+5NVh030yjOT7h1Tt9E0Wf8nIC1wQP8u8d8\/o6NYSq88L+ne\/\/536rEkQbVZCEgLPAunN31UYVylzzda8PJu5VlJ946pe1H54jqacKJ\/FiMpG076EPEEtlKvnrg\/raXynKR7x9SfqtHZ+iaQo4+zMg\/LuRN31L4OmzW8ecfZsDSR1NX6FYEoHLTyjKR7x9SFxbsyfBPD\/rMyvmasWWFv+9esN3KuWdb0HJmA79orarJPRLp3TL2TdnjdGpi0EDTbX9VL56NZe8Rcq3hH6r1iz8wnBgFpbWLqDnWQ3axWi7rz2l4djtWspNW8zRp5mLhq3w8xmSyvPBvp3jF1E0l\/J22D7p\/vp3nuSAu6k+ost9f+rNpVi7kV1z7jo\/xXz47Wc0+HQHZNXlGU7h1Tv6Iv+KwfNv0qmMpNaGkx3zVaifWWhTX3bS0S30f6G1kjURsxjwlUnod075j6seZE7rZh9o9IAsdBpYX8pPU+g6PrkzhR1npiL8Hsqr8+45b3ap1EXcQ8J1B5FtK9Y+rnulv6RHqQS4sVCBal\/1ZnlFpHx5Stn33fI\/1lnOueQ6TfIzOL1M+TWqV7x9SfTGNyrfQQJ8tSfS0ag1ZvtJrPBpqljzf9dQb9ehaL+zoEKs9BundMXUjDbXD9I5QiTFhpEUuCiFx755Khh97L0XW0v7Zu+zmKxT0dAqMz06lGN4t075j6onluDwvpoS0qWS1MdB59tmrAFieKzv8Ox0x\/0Wd6x8T785mZee9ptD7p3jH10UmcrONwOAHz\/21pAV9nX\/s0ai9R6x6d3mx\/7b3Zd0drY90xgcrcpXvH1I81d3uXA+EWUcoDM+LcpQ+ReyXIrpjtL+IsZUnqRZ+dmV6Fcpmke8fUH86Og2AcmLR4xytZvzKSDjLPoU12tr9IM1yvYNuIszOzrfp9do2+MfXBOXEADILaLNMQ8CadydcIusg+h9n+IszORNQKSWdnplCaaAqNvjH1mxGy8W8AnTzWEO9JapPbnnWSfRaz\/XmemYmIFZPOzkyxxOWptHrG1C9GpzWEixLCPqrKzmPfHmtaKezZ\/tp7s++urL9irIrctXrG1A92FJv9AMrDW1oCfliWynJvvXurZ\/UQZvtr782+u7qHavEqctfqGVPf7SYt8Lu06X5W5+ipf0+1SAh9tr\/23uy7En1UilmRu1bPmPpmJ2lB36RM+xWW8\/9T2atFUWEWrcfZz2rexLsnUEGTewpaPWPq\/5PXAr4fdNbf8PyZbONgzcI6v2eNw8ZmOtW4a\/aLqb\/433O12Q4xsmqKOAIRSx6Wub3PBjY2E6rGXbPf8qauCdtm+9hkhes3dysmVnm\/Cfi7AxubmVTjrtlvWVNvkDVB22wdu6yw\/WZvxcQq7zcBf3dgYzOTatw1+y1p6pqAbbaMfVYYH8\/AgotFzuPu\/d2Fjc1MqnHX7LecqWvCtdkuPrLC+XgOFlwsch537+8ubGxmUom7dq+lTF0brs128ZEV1udz0Gajne+8c39PYGMzk0rctXstY+raYG22ip+s8L6ehSYfzVzXXft7ChubmVThbtFnCVO3AGuzVfxkhfn1LLT5aOe77t7PU7jYzKIKd4s+05u6BVSbbeIrayburZeVnz4pTUaauXp\/Ea5wsZlSBe5WPaY2dSuoNtvEV1bYn8+jsdl\/zlevecI8jjnC5ZiL1N2ue6n4nuJaaSutqVsB9SQqy1rgP0Zf85BjJt8zgck3E8k7VXhb9pnS1C2BSm6ISLGZwdi0GictVlp5xjr3sQomunOowtuyz3SmbglTd3v4zsYcxuejxUorz3jn9ithojeDKqyt+0xl6tYw9baH\/0zMYnxGWqy08ox3br8SJnozqMLaus80pm4NUm9rxMjEPMbn1Fhp8dLMNU7AbqUWd7sO\/WSuwNpDjylM3QNIP1vHRyXMZHwOjZU2L+184zR0V8JBh3cVzh76xNR1NF0uiwdxj0BvdVrXalGDdc8js9FYAwd5ylUYe+kzvKl7ASm\/NWJliDYXy3p77n7VmrR2Pq2+nuSBwRNaz9dW4uulV0z9uU55Y4CAF4EPlPp3iVXNPW+\/\/i1I+It2PuF2psLDYArb0EuV2HrqNbSpewI5pPJCiyLOxqrmbd7td2m5aOaS7mU2PgxmyV2\/V42rp37DmroniNfyrvk04nysat7m3X7XUI52Po2enuSo3v8TVqNrqzH11m9IU\/cGcVTsldZFnJFVzdu82+9aerHIqdXbXZ7Kvd+xmX1ejam3fjH1WeXy3iUBb0K\/LHbz0KLubc7t901Z4l+t8oo3dpOgat83WP4+bnyefv6+XOCLR\/2EM3WPEAto93GLUedkUfc25\/b7Y+gvX7DM\/bL06dcr9txhtd7vPn0t12MCHvWDqR\/PirsvCXgU+0hL\/ZAbWbtqzZ7V\/veqPCNxLHOP1Ld6TfZ+W39nn9Usq8Xzqp1Qpu4VYjUxj\/QbfVaa9e9z7X+P8F65xjr\/yl7uYmXqtfWy\/9z1z\/M5Ap51g6nPzZS3bgh4Fv1N6X8ea9a\/z7X\/PVLv6jUealjd01G8LH1m6eNoRh7veeYdxtQ9Q\/QoOuuaos9Ls\/59rv1vq1l6qUOq\/yz9XfVx9UyKa\/a43pmGMHXvELOLeKa\/6DPTrH+fa\/97hv+qdzzVsqqnHid6b63+fQ\/9Xr\/2XrmuIbDnvSbq2iiY+lqeRPufQATx3w1Luoerg1c6913v2+dXdW7XRfvuifEsuz6bfp2Nw3tjBCJoxr2pR4A4Jodaq7LMTaKPFvMu7t1zCzWN1G1R10xOj3xH++hziNzDaK+e1kXhjal7Uk2iWqJsgDvkK\/tosUbjja67q1\/iee\/Dc413fUesvXO\/643nMgSiaMa1qUeBKCOh2FGzzG5FHy3GTJyZd7RVM9ubdp3bfBG4tno7237d9sB3XQJRNPNHN7ponmWLBPJZZ\/lXZ5rdaC9t3dFndtqjeWfjr3xv2\/fKuBKxvHPtLCV6J+YcAe+a2Xbl9l\/qkSBugfL9h0Cm+fVD9u66evZRGd5x4vnxf\/jrXFbriHjvCETbh+5MHWG\/E6CXt6NtBC\/ctnXAcEtjzXeYruFYKUo0zbgy9WjwKgn7aa\/M8imx7\/Uw\/Gby9g5M3xKs9X5EvWDqtTSq1m3EzaAGZzARDAdBPVgG0wewWDr1P+BqjQ1Tt55A0vwcnu8HC8P3DPcRYLonwu8zAlG14sbUowI8E0T1+8zzvQJg+J7hPgJM90T4fUQgsk7Km3obXrXPkYhX34u8KVazmI0Hw1ly5+\/B9JwNT34IRNeIC1OPDjHaZtDirZUnGv\/ReuE3SmpsHTzHOFVelUEjmHpBBWsJVytP1hHCb+1k4bmWZ7ZoWfRhbupZQEYSuBZzrTyR2D+pFX5PaF2vheU1n+pPM+kDUy+qZg0Ra+TIPD74vZ9uYwjH9xwzR8imD1NTzwYzmvA1+GvkiMZ9tF7YjZI6Xge\/Yy7c\/SSQTSeY+ud8y\/3SELRGjoyDg9u7qcLvHb8Kb2fUCKZeQbkXPWqIWiPHRYthH8FtfnSwm2dX6c2MOsHUKyn4pFcNYWvkOGkv7G2YzY0ObnPcqr2VVSeYejUlH\/SrIW6NHAethb4Fs\/HxNVb9M\/4WKysSyK4TTL2iqg96ljYQ6fgHLYW\/BbPvEfYDeX\/9XskdCHwTqLCnMPXvuZ\/eySwI6d6k458OLfADmH0ODx6fPPj1nEAFDZmZekS4EWselb1Gbxo5RvuNsA5eP1NqHGARQbG+a6yiIUz9oQ4zC0O6N+n4D0fpfnl1Xq3\/6gzcizRQgVW0hKlPiDKrODT60sgxMVKXr1Ri1Xrdf1wOhaJCEii1l6wmFB1y9PrP5i7dl3T8s74i3q\/CqkqfETUYveamrWr64l\/qk6rNLBTJ3iRjT47S7WvZWbX+svfoVlxFCquoL0x9UtyZxSLdm3T8yZG6ey0zp8y9uRNS0YKqagxTnxR8dsFI9tdiS8afHKm717IyytqXOwEVL6iqzjD1SeFXEIx0j9LxJ0fr5rVsfFo\/2XpyIxYK+SBQWWeY+ocUxn9UEI10j9Lxx6fpc6V3Pq2+Jx+flKkqIwHve0eSOab+gm4F4Uj3KB3\/xXjNX\/XKptXltTbzoVGAOYHq2sTUX0iwgnike5SO\/2K85q96YNNq2H\/MwVAABE4IeNgzJ6Wp3cbUX6CuICCNHjVyvBiz2aurubR4Tz9mzZMYAg8JrN4vD9O7WY6pvxhFFRFp9NnN5sU40r2qwT0dNBoqS4D98jN6TP3FFqgiIs0+NXO9GL3Kq7BQwUySBATYK\/+GiKn\/YzH1rYKYtHvUzjc1eIWX4KAAmRThCbBPPkeIqX\/yePyrgqC0e9TO93joSi\/AQQk0acISYI98jw5T\/2by+E4FYWn32PJp53w8eOEXqvcvjJfwwQmwP44HiKkfc3l0t4K4rHpsefvn0VASLLZivkfnpY59XfyuSwBNns8eUz9nM\/ykgsA89Nhq6J\/h4QRe6IF5w+eljsCjpPTFBNDkOVBM\/ZzN8JMKAvPWY6unf4YHFWyhF+Ze6gg2PsoVIoAer8Fi6td8hp5mN5cGwfNGysrfC3MvdQxtRhalJ4Aer0eMqV\/zefQ0s9gi9BahxieC8tKPlzqesGNtTgJo8X6umPo9o+EVmQUXpbcodY6IyrKXlnv7GamXNRCQJGC5HyT7Wh0bU19INLPoIvXWzWjhaE1CSTPvnI6uJg2TFAInBKT3wknakLcx9YVjyyy8iL3tzWrhqFVCSTHvXFSaIAkEXhKQ2gcvy3L7Oqa+cDSZxRe9t4j1r665xVsdc+H2IRQEvgig1y8ktzcw9VtE4wsyCzBDb62Hq8\/4pHVWjjC\/6mf\/TKdqskBgDYER\/a\/JlCsKpr54nlmFmLWv7fj3Jhjh97Z+vkMgC4EK543UrDB1AbIZBZmxJ4HRLw0J86U4CRaEALp\/NyhM\/R2\/w7czijJjT4fDc3IT3k4GQRmqBND9e9yY+nuGhxGaODN9DpvkphgBDjcxtAR2SgDNrxkMpr6GI1EgsJQAB9xSnARzTgC9rxsQpr6OJZEgsIQAB9wSjAQJQgC9rx0Upr6WJ9Eg8JoAh9xrhAQIQgCtrx8Upr6eKREhME2AQ24aHS8GI4DWZQaGqctwJSoEpghw0E1h46VgBNC53MDMTL21xGDlBkvkeATYD\/FmRsXPCaDz58yevIGpP6HFWggIEeCgEwJLWDcEmsbRufw4MHV5xmSAwC0BDrtbRCwITAB96w0PU9djTSYIHBLgwDvEws1EBNC43jAxdT3WZILAIQEOvEMs3ExCAH3rDvKXJXDL3LqYyQaBYwLsgWMu3M1BAH3rz9HU1Fu7DF1\/6GT0QwD9+5kFlVwTGNFqW7P9XEfkqQSBP\/\/P7yPDkkjeYlrmluqJuBAYIYD2RyixxgOBEa2OrPHQS\/Ya\/v536lYDscqbfbD0558A2vc\/o+oVNo2O6HRkTXWWWv3\/NfWW0GowVnm1IJMHAnsCaH5PhN\/eCIxqdHSdt\/6y1vNh6q3JNiCLIVnkzDpU+vJNAK37ng\/Vjf8DDy37U8uXqfcSLYZlkbP3yxUCGgTQuAZlcrwhMKrR0XVvauHd5wROTb2FshiaRc7n2HgDAs8JoO3nzHhDl8CVRtuz7Ue3MrKNErg09RbkasijSZ6us8j5tEbWQ+AJATT9hBZrtQl0sz7Li37PyPi7f2vqreS7gUu0hYgkqBLTigB6tiJP3jsCI9ocWXOXh+c6BIZMvZeiPVjtfL1PrhBYSQAdr6RJrJUERrQ5smZlTcR6R+CRqbdU2gPWzvcOJ29D4JsAGv5mwh1bAk2T6NJ2BlLZH5t6K0RbEIhPavzElSaAdqUJE\/8JAe2z+0ltrF1DYMrUe2pNgXA4dupcIxFAt5GmlbdWzbM6L8UYnb0y9d6i1sGllaf3xRUCbwig1zf0eHcVAXS4imSMOEtMvbXahKMhHo0cMUZHlZ4JoFPP06lRm9aZXINmnC6XmXpvWeMwQ6ydNlePBDT2gMe+qckPAVp+SfMAAAUSSURBVDToZxbalSw39daAlqAwd225kO+OgJb27+rgeU0CnIk1577tWsTUWwJNcXGQbkfKdysC6NCKPHk1z1to+yYgZuq9ba2DTitP74srBPYE0OCeCL81CKA7DcpxcoibekPRRCctPOn4cUZKpRYE0J8F9do5Nc7V2oRjdq9i6h1NF6HUASgVt9fPFQJ7Al3T+\/v8hoAUATQnRTZHXFVT3yLrwlxtxKvjbWvmOwQ6ga7f\/psrBKQJoDlpwjnim5n6Fl8X6ypD7vG2OfgOgVUEVul0VT3EyU2A8yz3fFd358LUt02tFDCH75Ys398SWKnNt7Xwfm4CXWucYbnnLNGdO1PvTXZR99+zVzbFLDne2xJAR1safF9NoJ93\/bo6PvHqEHBr6n0EK0TeY7QrfxB4SgDdPCXG+jsC2zMJfd3R4vkTAmFcbpXw95tpVdwn0FkbiwAaiTUvj9Xuzx2PNVJTDgJhTL3h7htjNfoet19XxydeXAJNE\/xBYIZAP0\/Q0Aw93pklEPLE6ptltum796Tj3+XnuT0BNGA\/g6gVoJ2ok8tRd0hT7+ilN490\/N4HVz8EmLmfWUSqpOumXfmDgCWBFArsG0oKpHR8qbot40Y63Pp8I9VsOVty\/xBANyjBI4EUpt7B9k3Wf6++cuiPE\/XOqmvFe53jxFmpQQDdaFAmxxsCqUy9g9huvNWHtmTsXn+G62ruK5l4rm1ln8RaR6Dv+3URiQQBGQIpTX2Pqm\/I1Yf56nj7uiP\/9sim6yAyV2rXI9D14lHLehTIFI1ACVPfDmX1Rt3G69+3+ap+93YQequnqi689t337vbqtVbqgsAVgXKmvoUhtYGl4m5r9\/59y8DDd++8qE+HwJkWdbKTBQLyBEqb+hZv3+zbeyu+S8VdURsxIJCZQN9722vmfukNAo0Apr7TwfYAaN9X\/W3jropJHAhA4JMA++yTB7\/qEVjnWknZbQ+JVSbfYyZFRlsQUCXQ99Oq\/alaPMkgsJgApv4Q6MoDZBvr6PvD0lgOgTIEtvulTNM0CoEBApj6AKSzJf1gOXv+9n6Pz\/XX3\/9jPqMs3rLnfVsCd3O2rY7sEPBLAFNfMJvtAbQgHCEgkJrAdr+cfU8NgOYgIEgAU18Mtx9Si8MSDgIhCfT9sL2GbISiIRCEAKYuNKh+iAmFJywEXBHoet9fXRVJMRAoQABTFx7y\/pDb\/hZOTXgILCew1e\/2+\/JEBIQABKYIYOpT2Na8tD0UR76vyUoUCJwTuNPh+Zs8gQAEPBDA1D1MYbCGuwO3PecPAlcE7jR09S7PIAAB\/wRwAf8zelTh1aH9KBCLQxK4mj\/\/oS\/kSCkaAo8IYOqPcMVefHfg8\/z5\/z68N2axFUr1EIDAWwKY+luCvA8BCEAAAhBwQgBTdzIIyoAABCAAAQi8JYCpvyXI+xCAAAQgAAEnBDB1J4OgDAhAAAIQgMBbApj6W4K8DwEIQAACEHBCAFN3MgjKgAAEIAABCLwlgKm\/Jcj7EIAABCAAAScEMHUng6AMCEAAAhCAwFsCmPpbgrwPAQhAAAIQcEIAU3cyCMqAAAQgAAEIvCWAqb8lyPsQgAAEIAABJwQwdSeDoAwIQAACEIDAWwKY+luCvA8BCEAAAhBwQgBTdzIIyoAABCAAAQi8JYCpvyXI+xCAAAQgAAEnBDB1J4OgDAhAAAIQgMBbApj6W4K8DwEIQAACEHBCAFN3MgjKgAAEIAABCLwl8B9EEdfW6RZLeAAAAABJRU5ErkJggg==)","052384da":"# Moon Data"}}