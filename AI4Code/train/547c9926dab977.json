{"cell_type":{"eec342ee":"code","cc976eaf":"code","6749566f":"code","7fcdf8d4":"code","7ddbacff":"code","c34fec51":"code","443f8429":"code","c032b709":"code","c5310a7d":"code","89e30560":"code","d1afc7aa":"code","b01d6dd9":"code","c7002fac":"code","6e2da7ac":"code","0bdfab1b":"code","fbbde64a":"markdown","41d066b3":"markdown","408af216":"markdown","e9995a26":"markdown","68fb4d7c":"markdown","798928e7":"markdown","aab5c80a":"markdown","f1372b2d":"markdown","37565ad3":"markdown","ebfa7e3e":"markdown","fa9953ac":"markdown","084654fd":"markdown","d93ad3c3":"markdown","e4c74a4b":"markdown","24134e80":"markdown"},"source":{"eec342ee":"# Let's create a list without list comprehension.\na = []\nfor i in range(6):\n    a.append(i)\na","cc976eaf":"# Now using list comprehension we'll create a list.\na = [i for i in range(6)]\na","6749566f":"#Now another example\n#Without List Comprehension\nsqr = []\nfor i in range(10):\n    sqr.append(i**2)\nsqr","7fcdf8d4":"#Using List Comprehension\nsqr_lc = [i**2 for i in range(10)]\nsqr_lc","7ddbacff":"#Now another example\n#Without List Comprehension\na = [10,30,50,70,90,110]\nfor i in a:\n    if (i < 70):\n        i\n\n#Using List Comprehension\na = [10,30,50,70,90,110]\nb = [i for i in a if (i<70)]\nb","c34fec51":"a = [1,2,3,4,5]\nb = [\n    i**2\n    for i in a\n]\nb","443f8429":"# Let's create a dictionary without Dictionary Comprehension.\na = {1:10,2:20,3:30}\nfor i in a:\n    b[i]=a[i]\nprint(b)","c032b709":"# Now using dictionary comprehension we'll create a dictionary.\na = {1:10,2:20,3:30}\nb = {i:a[i] for i in a}\nb","c5310a7d":"#Consider this example\n#We have two lists, one contains name and other age\n#We have to construct a dictionary connecting names to their corresponding age\n\nname = [\"John\",\"Paul\",\"Jones\",\"Sampson\",\"James\"]\nage = [20,21,22,35,34]\nb = {}\n\n#Without dictionary comprehension\nfor (key,value) in zip(name,age):\n    b[key] = value\nprint(b)\n\n#Using dictionary comprehension\nb = {key:value for (key,value) in zip(name,age)}\nb","89e30560":"#Now another example\nname = [\"John\",\"Paul\",\"Jones\",\"Sampson\",\"James\"]\nage = [20,21,22,35,34]\nb = {}\n\n#Without dictionary comprehension\nfor (key,value) in zip(name,age):\n    if (value > 30):\n        b[key] = value\nprint(b)\n\n#Using dictionary comprehension\nb = {key:value for (key,value) in zip(name,age) if (value > 30)}\nb","d1afc7aa":"# Let's create a set without set comprehension.\na = set() \nfor i in range(6):\n    a.add(i)\na","b01d6dd9":"# Now using set comprehension we'll create a set.\nb = {i for i in range(6)}\nb","c7002fac":"#Now another example\n#Without Set Comprehension\nage = [20,30,18,24,15,10]\na = set()\nfor i in age:\n    if (i > 18):\n        a.add(i)\nprint(a)\n\n#Using Set Comprehension\nage = [20,30,18,24,15,10]\na = {i for i in age if (i > 18)}\na","6e2da7ac":"#Without using Generator Comprehension\nfor i in range(6):\n    print(i, end = ' ') \n\n#Using Generator Comprehension...round brackets in generator comprehension\ngen_var = (i for i in range(6))\nprint(\"\\n\",gen_var)\n\nfor var in gen_var:\n    print(var, end = ' ')","0bdfab1b":"#Now another example\n#Without using Generator Comprehension\nage = [20,18,15,30,24]\na = (i for i in age if (i > 18))\nprint(a)\nfor var in a:\n    print(var, end = ' ')","fbbde64a":"# List Comprehension\n**It is one of the unique features in Python to create lists.**","41d066b3":"Note that a set comprehension can have many for loops and may or may not contain if condition based on the program.","408af216":"**Syntax for Set Comprehension**\n> *set_variable = {expression for var in iterator if (var satisfies this condition)}*","e9995a26":"Usually programmers write comprehension in a single line, but one can break down the code...it looks clearer when its split.","68fb4d7c":"Note that a list comprehension can have many for loops and may or may not contain if condition based on the program.","798928e7":"**Syntax for Dictionary Comprehension**\n>*dict_variable = {key:value for (key, value) in iterable if (key, value satisfy this condition)}*","aab5c80a":"**Syntax for Generator Comprehension**\n> *generator_variable = (expression for var in input_list if (var satisfies this condition))*","f1372b2d":"# Comprehensions in Python\n\n*Comprehensions in Python provide us with a short and concise way to construct new sequence data types like list, dictionary, set. It is easy to use and understand.*\n\nIn Python there are four type of comprehension.\n\n* List Comprehension\n* Dictionary Comprehension\n* Set Comprehension\n* Generator Comprehension\n\n![How-to-Learn-Python.jpg](attachment:How-to-Learn-Python.jpg)","37565ad3":"In just single line of code, the list is created making the program even more elegant and easy to understand.","ebfa7e3e":"# Generator Comprehension\n**Generators don\u2019t allocate memory for the whole list. Instead, they generate each value one by one which is why they are memory efficient.**","fa9953ac":"Note that a generator comprehension can have many for loops and may or may not contain if condition based on the program.","084654fd":"Like lists, dictionary comprehension can have many for loops and may or may not contain if condition based on the program.","d93ad3c3":"# Set Comprehension\n**A Set is a collection of elements which are unordered and unindexed.**","e4c74a4b":"**Syntax for List Comprehension**\n>*list_variable = [expression for var in input_list if (var satisfies this condition)]*","24134e80":"# Dictionary Comprehension\n**Dictionary is a collection of elements which are unordered, mutable and indexed. It has keys and each keys is assigned a value.**"}}