{"cell_type":{"69558d8b":"code","7152e842":"code","a942b081":"code","578fd3c6":"code","6a473d51":"code","96925ebf":"code","e518af08":"code","eb589d30":"code","4984dc1b":"code","4fc60e39":"code","9d093ccb":"code","93de2975":"code","8271b016":"code","ff049445":"code","a3fbf591":"code","817e02f7":"code","0496e77f":"code","85eab830":"code","310c2706":"code","2d35bc3c":"code","ae3b8016":"code","5c105c36":"code","bbc78e07":"code","a2621bec":"code","4bbf12a6":"code","0573462f":"code","b95d0972":"code","10b1bb27":"code","46ca105b":"code","5355cf9c":"code","86f98de8":"code","90c785bf":"code","3cbfff6d":"code","5e06a3ef":"code","cc0c18a1":"code","b66ceab7":"code","9a140c0c":"code","82ba1901":"code","66828b38":"code","27bc6ead":"code","5a1df1d6":"code","335e3568":"code","3d9536fe":"code","a1253da4":"markdown","bde0dba1":"markdown"},"source":{"69558d8b":"import os\nimport pandas as pd\nimport numpy as np\nfrom glob import glob\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pathlib import Path","7152e842":"path = '..\/input\/petfinder-pawpularity-score\/'\ntrain = pd.read_csv(path + 'train.csv')\ntest= pd.read_csv(path + 'test.csv')\ntrain_jpg = glob(path + \"train\/*.jpg\")\ntest_jpg = glob(path + \"test\/*.jpg\")","a942b081":"train.head()","578fd3c6":"for i in range(5):\n    image = plt.imread(train_jpg[i]) \n    print(image.shape)\n    image_show= plt.imread(train_jpg[i]) \n    plt.imshow(image_show)\n    plt.show()","6a473d51":"id_modified=train_jpg[0].split('\/')[-1].split('.')[0]\ntrain_df = train.loc[train['Id'] == id_modified]\ntrain_df","96925ebf":"id_modified1 = train.loc[train['Id'] == id_modified,'Pawpularity']\npawpularity= id_modified1.iloc[0]\npawpularity","e518af08":"for i in range(5):\n    id_modified=train_jpg[i].split('\/')[-1].split('.')[0]\n    id_modified_series = train.loc[train['Id'] == id_modified,'Pawpularity']\n    pawpularity= id_modified_series.iloc[0]\n    image= plt.imread(train_jpg[i]) \n    plt.imshow(image)\n    title =train_jpg[i] + '   -   ' + str(pawpularity)\n    plt.title(title) \n    plt.show()\n","eb589d30":"def image_to_show_based_on_pawpularity(desired_pawpularity):\n    showing_image_numbers=5\n    sample=train[train[\"Pawpularity\"] == desired_pawpularity].sample(5).reset_index(drop=True)\n    for i in range(5):\n        id_modified = sample.iloc[i]['Id']\n        root = '..\/input\/petfinder-pawpularity-score\/train\/'\n        extension = '.jpg'\n        image_path = root + str(id_modified) + extension\n        pawpularity=sample.iloc[i]['Pawpularity']\n        image= plt.imread(image_path)\n        plt.subplot(1, 5, i+1)\n        title = pawpularity\n        plt.title(title) \n        plt.imshow(image)\n    plt.show()\n   ","4984dc1b":"image_to_show_based_on_pawpularity(20)","4fc60e39":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python.client import device_lib\nimport seaborn as sns\nimport matplotlib.pyplot as plt","9d093ccb":"train = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ntest = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","93de2975":"def train_id_to_path(x):\n    return '\/kaggle\/input\/petfinder-pawpularity-score\/train\/' + x + \".jpg\"\ndef test_id_to_path(x):\n    return '\/kaggle\/input\/petfinder-pawpularity-score\/test\/' + x + \".jpg\"\ntrain = pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/train.csv')\ntrain = train.drop(['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory', 'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur'],axis=1)\ntest = pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/test.csv')\ntest = test.drop(['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory', 'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur'],axis=1)\ntrain[\"img_path\"] = train[\"Id\"].apply(train_id_to_path)\ntest[\"img_path\"] = test[\"Id\"].apply(test_id_to_path)","8271b016":"train['two_bin_pawp'] = pd.qcut(train['Pawpularity'], q=2, labels=False)\ntrain = train.astype({\"two_bin_pawp\": str})\ntrain['four_bin_pawp'] = pd.qcut(train['Pawpularity'], q=4, labels=False)\ntrain = train.astype({\"four_bin_pawp\": str})\ntrain['ten_bin_pawp'] = pd.qcut(train['Pawpularity'], q=10, labels=False)\ntrain = train.astype({\"ten_bin_pawp\": str})","ff049445":"train4bin_stats = train.groupby('four_bin_pawp')\ntrain4bin_stats.describe()","a3fbf591":"train.head()","817e02f7":"test.head()","0496e77f":"image_height = 128\nimage_width = 128\ndef path_to_eagertensor(image_path):\n    raw = tf.io.read_file(image_path)\n    image = tf.image.decode_jpeg(raw, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, (image_height, image_width))\n    return image","85eab830":"print(train['img_path'][0])","310c2706":"og_example_image = plt.imread('..\/input\/petfinder-pawpularity-score\/train\/0007de18844b0dbbb5e1f607da0606e0.jpg') \nprint(og_example_image.shape)\nplt.imshow(og_example_image)\nplt.title('First Training Image') \nplt.show()","2d35bc3c":"example_image = path_to_eagertensor('..\/input\/petfinder-pawpularity-score\/train\/0007de18844b0dbbb5e1f607da0606e0.jpg')\n","ae3b8016":"print('type: ', type(example_image),'\\n shape: ',example_image.shape)\nplt.imshow(example_image)\nplt.title('First Training Image - with preprocessing done by path_to_eagertensor()') \nplt.show()","5c105c36":"X = []\nfor img in train['img_path']:\n    new_img_tensor = path_to_eagertensor(img)\n    X.append(new_img_tensor)\n    \nprint(type(X),len(X))\nX = np.array(X)\nprint(type(X),X.shape)","bbc78e07":"X_submission = []\nfor img in test['img_path']:\n    new_img_tensor = path_to_eagertensor(img)\n    X_submission.append(new_img_tensor)\n    \nprint(type(X_submission),len(X_submission))\nX_submission = np.array(X_submission)\nprint(type(X_submission),X_submission.shape)","a2621bec":"y = train['Pawpularity']\nprint(type(y))","4bbf12a6":"train4bin_stats = train.groupby('four_bin_pawp')\ntrain4bin_stats.describe()","0573462f":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","b95d0972":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python.client import device_lib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Conv1D, MaxPooling1D\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom sklearn.datasets import make_blobs\nfrom sklearn.preprocessing import MinMaxScaler \nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers import BatchNormalization\n\n\n","10b1bb27":"inputs = tf.keras.Input(shape=(image_height,image_width,3))\nx = inputs\n\nx = tf.keras.layers.Conv2D(filters = 16, kernel_size = (7,7), strides = (2,2),padding='valid',activation = 'relu')(x)\nx = tf.keras.layers.Conv2D(filters = 32, kernel_size = (3,3), strides = (2,2), padding='same',activation = 'relu')(x)\nx = tf.keras.layers.BatchNormalization()(x)\n\n\nx = tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), padding='same',activation = 'relu')(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), strides = (2,2), padding='same',activation = 'relu')(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.Dropout(0.25)(x)\n\nx = tf.keras.layers.Conv2D(filters = 128, kernel_size = (3,3), padding='same',activation = 'relu')(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(x)\nx = tf.keras.layers.Conv2D(filters = 128, kernel_size = (3,3),padding='same',activation = 'relu')(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.Dropout(0.25)(x)\n\nx = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(512, activation = \"relu\")(x)\nx = tf.keras.layers.Dropout(0.5)(x)\n\noutput = tf.keras.layers.Dense(1)(x)\n\nmodel = tf.keras.Model(inputs = inputs, outputs = output)\n","46ca105b":"model.summary()","5355cf9c":"model.compile(optimizer='Adam', loss='mse', metrics = [tf.keras.metrics.RootMeanSquaredError(name=\"rmse\"), \"mae\", \"mape\"]) ","86f98de8":"data_augmentation = ImageDataGenerator(\n    rotation_range = 15, \n    zoom_range = 0.15,\n    width_shift_range = 0.2, \n    height_shift_range = 0.2, \n    shear_range = 0.1,\n    horizontal_flip = True, \n    fill_mode = \"nearest\")","90c785bf":"history = model.fit(\n    data_augmentation.flow(x_train,y_train,batch_size=32),\n    validation_data = (x_test,y_test),\n    epochs = 3\n)","3cbfff6d":"def convert2onehot_4(labels):\n    result = []\n    for label in labels:\n#         print(label)\n        if label == '0':\n#             print(\"label 1\")\n            result.append([1, 0, 0, 0])\n        elif label == '1':\n            result.append([0,1,0,0])\n        elif label == '2':\n            result.append([0,0,1,0])\n        else:\n#             print(\"label 0\")\n            result.append([0,0,0,1])\n    return np.array(result)\nx_train_array = np.array(x_train)\nx_test_array = np.array(x_test)\ny_train_onehot = convert2onehot_4(y_train)\ny_test_onehot = convert2onehot_4(y_test)","5e06a3ef":"inputs1 = tf.keras.Input(shape=(image_height,image_width,3))\nx1 = inputs1\n\nx1 = tf.keras.layers.Conv2D(filters = 16, kernel_size = (7,7), strides = (2,2),padding='valid',activation = 'relu')(x1)\nx1 = tf.keras.layers.Conv2D(filters = 32, kernel_size = (3,3), strides = (2,2), padding='same',activation = 'relu')(x1)\nx1 = tf.keras.layers.BatchNormalization()(x1)\n\n\nx1 = tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), padding='same',activation = 'relu')(x1)\nx1 = tf.keras.layers.BatchNormalization()(x1)\nx1 = tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), strides = (2,2), padding='same',activation = 'relu')(x1)\nx1 = tf.keras.layers.BatchNormalization()(x1)\nx1 = tf.keras.layers.Dropout(0.25)(x1)\n\nx1 = tf.keras.layers.Conv2D(filters = 128, kernel_size = (3,3), padding='same',activation = 'relu')(x1)\nx1 = tf.keras.layers.BatchNormalization()(x1)\nx1 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(x1)\nx1 = tf.keras.layers.Conv2D(filters = 128, kernel_size = (3,3),padding='same',activation = 'relu')(x1)\nx1 = tf.keras.layers.BatchNormalization()(x1)\nx1 = tf.keras.layers.Dropout(0.25)(x1)\n\nx1 = tf.keras.layers.Flatten()(x1)\nx1 = tf.keras.layers.Dense(512, activation = \"relu\")(x1)\nx1 = tf.keras.layers.Dropout(0.5)(x1)\n\noutput1 = tf.keras.layers.Dense(4)(x1)\n\nmodel1 = tf.keras.Model(inputs = inputs1, outputs = output1)\n\n","cc0c18a1":"model1.compile(optimizer='Adam', loss='mse', metrics = [tf.keras.metrics.RootMeanSquaredError(name=\"rmse\"), \"mae\", \"mape\"]) ","b66ceab7":"print(x_train_array.shape, y_train_onehot.shape,x_test_array.shape, y_test_onehot.shape)","9a140c0c":"model1.summary()","82ba1901":"model1.fit(x_train_array, y_train_onehot, batch_size=16, epochs=3, validation_data=(x_test_array, y_test_onehot))","66828b38":"cnn_pred = model.predict(X_submission)\nprint(X_submission.shape, type(X_submission))\nprint(cnn_pred.shape, type(cnn_pred))\n","27bc6ead":"cnn = pd.DataFrame()\ncnn['Id'] = test['Id']\ncnn['Pawpularity'] = cnn_pred\ncnn.to_csv('submission.csv',index=False)","5a1df1d6":"cnn.head(10)","335e3568":"cnn_pred1 = model1.predict(X_submission)\nprint(X_submission.shape, type(X_submission))\nprint(cnn_pred1.shape, type(cnn_pred1))","3d9536fe":"cnn1=pd.DataFrame(cnn_pred1)\ncnn1","a1253da4":"Modeling_CNN","bde0dba1":"EDA"}}