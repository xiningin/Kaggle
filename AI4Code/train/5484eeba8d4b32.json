{"cell_type":{"e88c98e1":"code","1041a435":"code","3dbabdc1":"code","af1ac585":"code","984bc0fc":"code","3edfe397":"code","c9581f9f":"code","148c751f":"code","a27350d1":"code","fe7b20ee":"code","1c724649":"code","0e94b1f9":"code","0fae1f81":"code","d28487c1":"code","d9eacca0":"code","50b58bbf":"code","8210a6fa":"code","666aeb3b":"code","efbdec3b":"code","87aeab8f":"code","2dc21c39":"code","8d01cc2d":"code","c7bdbee4":"code","0dc91d7e":"code","49b0401f":"code","5ae436d6":"code","f52f7a8d":"code","01c2bef5":"code","327707b0":"code","6653c103":"markdown"},"source":{"e88c98e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1041a435":"# Importing this to not show any function deprecation warnings \nimport warnings\nwarnings.filterwarnings('ignore')","3dbabdc1":"#Reading the ipl dataset into a pandas dataframe object\nipl = pd.read_csv(\"\/kaggle\/input\/indian-premier-league-match-analysis\/matches.csv\")","af1ac585":"#looking at the first 5 rows of the df\nipl.head()","984bc0fc":"#looking at the rows and columns of the dataset\nipl.shape","3edfe397":"#getting the most of man of the match awards\nipl['player_of_match'].value_counts()","c9581f9f":"#getting the top 10 most man of the match players\nipl['player_of_match'].value_counts()[:10]","148c751f":"#making a bar plot with the top 5 players with most MOM's\nipl['player_of_match'].value_counts()[:5].plot(kind='barh') #use kind='bar' to make the vertical bar plot","a27350d1":"#import the visualization libraries \nimport matplotlib.pyplot as plt \nimport seaborn as sns","fe7b20ee":"#making a bar plot of 5 top most MOM award winners using matplotib library\nplt.figure(figsize=(8,8))\nplt.bar(list(ipl['player_of_match'].value_counts()[:5].keys()), list(ipl['player_of_match'].value_counts()[:5]), color ='g')\nplt.show()\n","1c724649":"#Visualising the bar plot using seaborn this time (Just trying how diff libraries produce the same bar graph)\nsns.barplot(list(ipl['player_of_match'].value_counts()[:5].keys()) , list(ipl['player_of_match'].value_counts()[:5]))\nplt.tight_layout()\nplt.xticks(rotation =90)\nplt.show()","0e94b1f9":"#getting the frequencies of result column\nipl['result'].value_counts()","0fae1f81":"#finding out the number of times each team won the toss\nipl['toss_winner'].value_counts()","d28487c1":"# Subsetting the matches where the team won batting first\nbatting_first = ipl[ipl['win_by_runs'] !=0]","d9eacca0":"# Checking the first 5 rows of the batting_first dataframe\nbatting_first.head()","50b58bbf":"plt.figure(figsize=(8,8))\nplt.hist(batting_first['win_by_runs'])\nplt.title(\"Distribution of Runs\")\nplt.xlabel(\"Runs\")\nplt.show()","8210a6fa":"# Finding out the number of wins for each team after batting first\nbatting_first['winner'].value_counts()","666aeb3b":"plt.figure(figsize=(8,8))\nsns.barplot(list(batting_first['winner'].value_counts()[:8].keys()) , list(batting_first['winner'].value_counts()[:8]))\nplt.tight_layout()\nplt.xticks(rotation = 75)\nplt.show()","efbdec3b":"plt.figure(figsize=(8,8))\nplt.pie(list(batting_first['winner'].value_counts()[:8]) , labels=list(batting_first['winner'].value_counts().keys()[:8]) ,autopct=\"%.1f%%\")\nplt.tight_layout()\nplt.show()","87aeab8f":"# Extracting the records where the team has won after batting second\nbatting_second = ipl[ipl['win_by_wickets'] != 0]","2dc21c39":"batting_second.head()","8d01cc2d":"#making a histogram for frequencey of wins by number of wickets for team batting second\nplt.figure(figsize= (6,6))\nplt.hist(batting_second['win_by_wickets'],bins = 30)\nplt.show()","c7bdbee4":"#finding out the frequecny of winning of each team batting second\nbatting_second['winner'].value_counts()","0dc91d7e":"#making a bar plot of the freq of wins of teams batting second\nplt.figure(figsize=(5,5))\nplt.bar(list(batting_second['winner'].value_counts().keys()[:8]) , list(batting_second['winner'].value_counts()[:8]))\n# Here we are going to plot the line on the same figure using the plot function to show how values go down in bar plot\nplt.plot(list(batting_second['winner'].value_counts().keys()[:8]) , list(batting_second['winner'].value_counts()[:8]), marker='*' , color='red' , linestyle ='--')\nplt.tight_layout()\nplt.xticks(rotation=75)\nplt.show()","49b0401f":"plt.pie(list(batting_second['winner'].value_counts()[:8]),labels = list(batting_second['winner'].value_counts().keys()[:8]) , autopct='%.1f%%')\nplt.tight_layout()\nplt.show()\n","5ae436d6":"#looking at number of matches played each season\nipl['season'].value_counts()","f52f7a8d":"#looking at number of matches played at each city\nipl['city'].value_counts()","01c2bef5":"# Finding out how many times a team won the match after winning the toss\nnp.sum(ipl['toss_winner'] == ipl['winner'])","327707b0":"#Dividing 325 with the total number of matches to see the percentage of winning if won the toss\n325\/636","6653c103":"# Please UPVOTE and provide comments if any. Thank YOU"}}