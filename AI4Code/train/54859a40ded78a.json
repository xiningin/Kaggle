{"cell_type":{"120b8474":"code","578584a6":"code","ba9bcb1d":"code","53419d05":"code","2c19bacc":"code","7bd205f2":"code","2bfcf240":"code","8d87ee2b":"code","5afdac1c":"code","3f406ed6":"code","40bd08be":"code","7b7a75dc":"code","4405d9ec":"code","5550dc78":"code","92be8f16":"code","ca3c3bc2":"code","44c5a88d":"code","6589d476":"code","63df38ee":"code","527dca02":"code","9edc601f":"code","15d20926":"code","0ec5e645":"code","ec6ee6ee":"code","7e05ed14":"markdown","aee7dd55":"markdown","aedbec3f":"markdown","598ff648":"markdown","aba2d1a9":"markdown","7aeb1508":"markdown","12b5f7dc":"markdown","df83c3c2":"markdown","98b04acd":"markdown","98ad0d8e":"markdown"},"source":{"120b8474":"import numpy as np\nimport pandas as pd ","578584a6":"train = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\nprint(train.shape)\ntrain.head()","ba9bcb1d":"test = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')\nprint(train.shape)\ntrain.head()\n","53419d05":"train_arr = np.array(train, dtype='float32')\ntest_arr = np.array(test, dtype='float32')","2c19bacc":"def preprocess(arr):\n    x = arr[:, 1:]\/255.0\n    y = arr[:, 0]\n    \n    return x, y","7bd205f2":"X_train, y_train = preprocess(train_arr)","2bfcf240":"X_test, y_test = preprocess(test_arr)","8d87ee2b":"from sklearn.model_selection import train_test_split","5afdac1c":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=36)","3f406ed6":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import utils\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, GlobalAveragePooling2D, Activation, BatchNormalization\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","40bd08be":"X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nX_valid = X_valid.reshape(X_valid.shape[0], 28, 28, 1)","7b7a75dc":"datagen = ImageDataGenerator(featurewise_center=False,\n                            samplewise_center=False,\n                            featurewise_std_normalization=False,\n                            samplewise_std_normalization=False,\n                            zca_whitening=False,\n                            rotation_range=15,\n                            width_shift_range=0.1,\n                            height_shift_range=0.1,\n                            horizontal_flip=True,\n                            vertical_flip=False)\n\ndatagen.fit(X_train)","4405d9ec":"model = Sequential()\n\n# First layer\nmodel.add(Conv2D(128, kernel_size=(3,3), input_shape=(28,28,1), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n# Second layer\nmodel.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n# Third layer\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n# Fully Connected layers\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\n    \nmodel.add(Dense(10, activation='softmax'))\n    \nmodel.summary()","5550dc78":"model.compile(loss='sparse_categorical_crossentropy',\n             optimizer=Adam(lr=0.0003),\n             metrics=['accuracy'])","92be8f16":"history = model.fit(datagen.flow(X_train, y_train, batch_size = 64),\n                    steps_per_epoch = len(X_train) \/\/ 64, \n                    epochs = 5, \n                    validation_data= (X_valid, y_valid),\n                    verbose=1)","ca3c3bc2":"# Save the model\nmodel.save('my_model.h5')","44c5a88d":"scores = model.evaluate(X_test, y_test)","6589d476":"pd.DataFrame(history.history).plot()","63df38ee":"pred = model.predict(X_test)","527dca02":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\ny_pred = np.argmax(pred, axis=1)","9edc601f":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))","15d20926":"import matplotlib.pyplot as plt","0ec5e645":"fig, axes = plt.subplots(5, 5, figsize=(12,12))\naxes = axes.ravel()\n\nfor i in np.arange(25):\n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title('True: %s \\nPredict: %s' % (class_names[int(y_test[i])], class_names[y_pred[i]]))\n    axes[i].axis('off')\n    plt.subplots_adjust(wspace=1)","ec6ee6ee":"fig, axes = plt.subplots(5, 5, figsize=(12,12))\naxes = axes.ravel()\n\nmiss_pred = np.where(y_pred != y_test)[0]\nfor i in np.arange(25):\n    axes[i].imshow(X_test[miss_pred[i]].reshape(28,28))\n    axes[i].set_title('True: %s \\nPredict: %s' % (class_names[int(y_test[miss_pred[i]])],\n                                                 class_names[y_pred[miss_pred[i]]]))\n    axes[i].axis('off')\n    plt.subplots_adjust(wspace=1)","7e05ed14":"# Predicting Fashion Items with CNN\n* Preprocess the data\n* train_test_split\n* Generate and augment the data\n* Simple CNN modeling\n* Model evaluation","aee7dd55":"## Training","aedbec3f":"## Modeling with CNN","598ff648":"## Data Splitting","aba2d1a9":"## Import Libraries","7aeb1508":"## Data Generation & Augmentation","12b5f7dc":"## Prediction Visualization","df83c3c2":"## Data Preprocessing","98b04acd":"## Evaluation","98ad0d8e":"## Prediction"}}