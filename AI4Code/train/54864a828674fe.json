{"cell_type":{"aac31816":"code","9aaab80b":"code","dd3e557f":"code","ca596f1f":"code","99d67979":"code","069502ea":"code","ea90702e":"code","024641cb":"code","3c7bd90c":"code","87cf025a":"code","cbd508bd":"code","cb0bf47c":"code","8255882d":"code","0c1717f2":"code","e5a0a6c2":"code","8a299b58":"code","050160a1":"code","7de43214":"code","ec47da0b":"code","f5bb0051":"code","b0468968":"code","909e364b":"code","86e7d790":"code","2d21bbe9":"code","aaa5fe1b":"code","5cc29d9e":"code","69193a9b":"code","1c3dd062":"code","4c61b874":"code","66b2446a":"code","fef36b47":"code","28451a7f":"code","b097d984":"code","155b94b5":"code","2e422dd3":"code","4a2297b8":"code","0fb930be":"code","4eb71293":"code","26fdad50":"code","7da4680b":"code","57a5190a":"code","8bed38de":"markdown","26d50cd7":"markdown","7cf6b554":"markdown","bc81b59f":"markdown","5f6f8279":"markdown","5d9d2228":"markdown","ff60ba5b":"markdown","4f051a5f":"markdown","37f83880":"markdown","d5573219":"markdown","81d68a88":"markdown","2cc41753":"markdown","bd752ea0":"markdown","b96771de":"markdown","1a41d98c":"markdown","e36fa08c":"markdown","ca926bd9":"markdown","4f905428":"markdown","6c3d87dc":"markdown","adeac5f4":"markdown","9fe6afb7":"markdown","d7ac6aea":"markdown","92a7d203":"markdown","3dee8bda":"markdown","581800ee":"markdown"},"source":{"aac31816":"# here we are importing important libraries\nimport math\nimport pandas_datareader as web\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"fivethirtyeight\")\nsns.set_style('whitegrid')\n%matplotlib inline\nfrom datetime import datetime\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM\n","9aaab80b":"# Here we are making tech list which we will use for this analysis\nTech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']\n# now we are setting end and start time for grabing data\nend = datetime.now()\nstart = datetime(end.year-1,end.month,end.day)\n# now we are using for loop for grabing yahoo data and setting it in form of dataframe\n#  Using globals() is a sloppy way of setting the DataFrame names, but its simple\nfor stock in Tech_list:\n    globals()[stock] = web.DataReader(stock,\"yahoo\",start,end)","dd3e557f":"# here we are making list of our company\nCompany_list = [AAPL,GOOG,MSFT,AMZN]\ncompany_name = ['AAPL', 'GOOG', 'MSFT', 'AMZN']\nfor company, comp_name in zip(Company_list,company_name):\n    company[\"company_name\"] = comp_name\n    \ndf = pd.concat(Company_list,axis=0)\ndf.tail(10)","ca596f1f":"# here we are summarize stats \nAAPL.describe()","99d67979":"# here we are printing information of our dataset\nAAPL.info()","069502ea":"# here we are visualising of closing price\nplt.figure(figsize=(12, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(Company_list, 1):\n    plt.subplot(2, 2,i)\n    company['Adj Close'].plot()\n    plt.ylabel('Adj Close')\n    plt.xlabel(None)\n    plt.title(f\"{Tech_list[i - 1]}\")","ea90702e":"# here we are visualising total volume of stock being trade each day\nplt.figure(figsize=(12, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(Company_list, 1):\n    plt.subplot(2, 2,i)\n    company['Volume'].plot()\n    plt.ylabel('Volume')\n    plt.xlabel(None)\n    plt.title(f\"{Tech_list[i - 1]}\")","024641cb":"ma_day = [10, 20, 50]\n\nfor ma in ma_day:\n    for company in Company_list:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Adj Close'].rolling(ma).mean()","3c7bd90c":"# here we are printing columns of google company\nprint(GOOG.columns)","87cf025a":"# here we are visualising the additional moving averages\ndf.groupby(\"company_name\").hist(figsize=(12, 12));","cbd508bd":"# here we are visualising three important moving averages of all the company\nfig, axes = plt.subplots(nrows=2,ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nAAPL[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\naxes[0,0].set_title('APPLE')\n\nGOOG[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,1])\naxes[0,1].set_title('GOOGLE')\n\nMSFT[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,0])\naxes[1,0].set_title('MICROSOFT')\n\nAMZN[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,1])\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","cb0bf47c":"# We'll use pct_change to find the percent change for each day\nfor company in Company_list:\n    company['Daily Return'] = company['Adj Close'].pct_change()\n\n# Then we'll plot the daily return percentage\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nAAPL['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')\naxes[0,0].set_title('APPLE')\n\nGOOG['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')\naxes[0,1].set_title('GOOGLE')\n\nMSFT['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')\naxes[1,0].set_title('MICROSOFT')\n\nAMZN['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","8255882d":"# Note the use of dropna() here, otherwise the NaN values can't be read by seaborn\nplt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(Company_list, 1):\n    plt.subplot(2, 2, i)\n    sns.distplot(company['Daily Return'].dropna(), bins=100, color='blue')\n    plt.ylabel('Daily Return')\n    plt.title(f'{company_name[i - 1]}')\n","0c1717f2":"# here we are Grabing all the closing prices for the tech stock list into one DataFrame\nclosing_df = web.DataReader(Tech_list, 'yahoo', start, end)['Adj Close']\n# here we are printing first five line\nclosing_df.head() ","e5a0a6c2":"# here we are Making a new tech returns DataFrame\ntech_rets = closing_df.pct_change()\ntech_rets.head()","8a299b58":"# here we are comparing Google to itself should show a perfectly linear relationship\nsns.jointplot('GOOG', 'GOOG', tech_rets, kind='scatter', color = \"blue\")","050160a1":"# here We'll use joinplot to compare the daily returns of Google and Microsoft\nsns.jointplot('GOOG', 'MSFT', tech_rets, kind='scatter', color = \"blue\")","7de43214":"# Here we are simply calling pairplot on our DataFrame for an automatic visual analysis \n# of all the comparisons\nsns.pairplot(tech_rets, kind='reg')","ec47da0b":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturn_fig = sns.PairGrid(tech_rets.dropna())\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturn_fig.map_upper(plt.scatter, color='green')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) \n# or the color map (BluePurple)\nreturn_fig.map_lower(sns.kdeplot, cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturn_fig.map_diag(plt.hist, bins=30)","f5bb0051":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturns_fig = sns.PairGrid(closing_df)\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturns_fig.map_upper(plt.scatter,color='green')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) or the color map (BluePurple)\nreturns_fig.map_lower(sns.kdeplot,cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturns_fig.map_diag(plt.hist,bins=30)","b0468968":"# Here we are using seabron for a quick correlation plot for the daily returns\nsns.heatmap(tech_rets.corr(), annot=True, cmap=\"YlGnBu\")","909e364b":"sns.heatmap(closing_df.corr(), annot=True, cmap=\"YlGnBu\")","86e7d790":"# Here e are defining a new DataFrame as a cleaned version of the oriignal tech_rets DataFrame\nrets = tech_rets.dropna()\n\narea = np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom', \n                 arrowprops=dict(arrowstyle='-', color='blue', connectionstyle='arc3,rad=-0.3'))","2d21bbe9":"# here we are Getting the stock quote\ndf = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end=datetime.now())\n# printing the data\ndf","aaa5fe1b":"# here we are printing shape of data\ndf.shape","5cc29d9e":"# here we are Visualising the closing price history\nplt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(df['Close'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","69193a9b":"#Creating a new dataframe with only the 'Close' column\ndata = df.filter(['Close'])\n#Converting the dataframe to a numpy array\ndataset = data.values\n#Get \/Compute the number of rows to train the model on\ntraining_data_len = math.ceil( len(dataset) *.8)\ntraining_data_len","1c3dd062":"# here we are Scaling the all of the data to be values between 0 and 1 \nscaler = MinMaxScaler(feature_range=(0, 1)) \nscaled_data = scaler.fit_transform(dataset)\nscaled_data","4c61b874":"#Creating the scaled training data set\ntrain_data = scaled_data[0:training_data_len  , : ]\n#Spliting the data into x_train and y_train data sets\nx_train=[]\ny_train = []\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()","66b2446a":"#Here we are Converting x_train and y_train to numpy arrays\nx_train, y_train = np.array(x_train), np.array(y_train)","fef36b47":"# Here we are reshaping the data into the shape accepted by the LSTM\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))","28451a7f":"#now we are Building the LSTM network model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True,input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=False))\nmodel.add(Dense(units=25))\nmodel.add(Dense(units=1))","b097d984":"# here we are Compiling the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')","155b94b5":"# here we are training the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","2e422dd3":"# here we are testing data set\ntest_data = scaled_data[training_data_len - 60: , : ]\n#Creating the x_test and y_test data sets\nx_test = []\ny_test =  dataset[training_data_len : , : ] #Get all of the rows from index 1603 to the rest and all of the columns (in this case it's only column 'Close'), so 2003 - 1603 = 400 rows of data\nfor i in range(60,len(test_data)):\n    x_test.append(test_data[i-60:i,0])","4a2297b8":"# here we are converting x_test to a numpy array  \nx_test = np.array(x_test)","0fb930be":"# here we are reshaping the data into the shape accepted by the LSTM  \nx_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))","4eb71293":"# now we are getting the models predicted price values\npredictions = model.predict(x_test) \npredictions = scaler.inverse_transform(predictions)#Undo scaling","26fdad50":"# here we are calculaing the value of RMSE \nrmse=np.sqrt(np.mean(((predictions- y_test)**2)))\nrmse","7da4680b":"#Plot\/Create the data for the graph\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n#Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","57a5190a":"print(valid)","8bed38de":"**4. What was the correlation between different stocks closing prices?**","26d50cd7":"There are three important moving averages that can be applied to your charts that will help you trade better. They are the 10 moving average, the 20 moving average and the 50 moving average.\nThe 20 moving average (10MA) is the short-term outlook.\nThe 50 moving average (20MA) is the medium term outlook.\nThe 200 moving average (50MA) is the trend bias.\n","7cf6b554":"Thanks for reading. I hope you like my analysing and visualization and found it to be helpful. If you have any questions or suggestions, feel free to write them down in the comment section","bc81b59f":"So now we can see that if two stocks are perfectly (and positivley) correlated with each other a linear relationship bewteen its daily return values should occur.","5f6f8279":"**1. What was the change in price of the stock overtime?**","5d9d2228":"# Importing libraries","ff60ba5b":"**5. How much value do we put at risk by investing in a particular stock?**","4f051a5f":"# Contents","37f83880":"**2. What was the moving average of the various stocks?**","d5573219":"Now that we've done some baseline analysis, let's go ahead and dive a little deeper. We're now going to analyze the risk of the stock. In order to do so we'll need to take a closer look at the daily changes of the stock, and not just its absolute value. Let's go ahead and use pandas to retrieve teh daily returns for the Apple stock.","81d68a88":"1. Inroduction\n2. Importing libraries\n3. Reading datasets\n4. Building Models\n5. Conclusion","2cc41753":"Fantastic! Just like we suspected in our PairPlot we see here numerically and visually that Microsoft and Amazon had the strongest correlation of daily stock return. It's also interesting to see that all the technology comapnies are positively correlated.","bd752ea0":"**6. Predicting the closing price stock price of APPLE inc:**","b96771de":"# Conclusion","1a41d98c":"In this notebook I will show you how to write a python program that predicts the price of stocks using a machine learning technique called Long Short-Term Memory (LSTM). This program is really simple and I doubt any major profit will be made from this program, but it\u2019s slightly better than guessing! Remember the stock price can be affected by many different things.\n","e36fa08c":"# Reading dataset","ca926bd9":"There are 2183 rows and 6 columns","4f905428":"**3. What was the daily return of the stock on average?**","6c3d87dc":"Now that we've seen the visualizations for the closing price and the volume traded each day, let's go ahead and caculate the moving average for the stock.","adeac5f4":"# Building Models","9fe6afb7":"We will be solve the following question:\n1. What was the change in price of the stock over time?\n2. What was the daily return of the stock on average?\n3. What was the moving average of the various stocks?\n4. What was the correlation between different stocks'?\n5. How much value do we put at risk by investing in a particular stock?\n6. How can we attempt to predict future stock behavior? (Predicting the closing price stock price of APPLE inc using LSTM)","d7ac6aea":"# Introduction","92a7d203":"Create a new data frame with only the closing price and convert it to an array.\nThen create a variable to store the length of the training data set. I want the training data set to contain about 80% of the data.","3dee8bda":"Now scale the data set to be values between 0 and 1 inclusive, I do this because it is generally good practice to scale your data before giving it to the neural network.","581800ee":"Finally, we could also do a correlation plot, to get actual numerical values for the correlation between the stocks' daily return values. By comparing the closing prices, we see an interesting relationship between Microsoft and Apple."}}