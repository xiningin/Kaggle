{"cell_type":{"29d462b1":"code","a8632f84":"code","eea13aae":"code","3ec3cddb":"code","a827e93f":"code","55ca5c06":"code","7ece4c50":"code","ac3f9361":"code","9ffe9e71":"code","c51b47ae":"code","0d087289":"code","89e51019":"code","c1781968":"code","b01098ec":"code","372d7bec":"code","6e2d8621":"code","26a93546":"code","f6e3f346":"code","762d2977":"code","7786fd01":"code","3c4bcb98":"code","19e2fab9":"code","f59d3fe2":"code","78ec8cad":"code","2c9c08e0":"code","f14ff6aa":"code","5dc001a4":"code","4cf663d2":"code","21369bb0":"code","ebc6c50a":"code","60a15039":"code","acb569a3":"code","49306953":"code","ac733786":"code","988ab2d5":"code","75671183":"code","c53f19ab":"code","f30f2523":"code","2747af7b":"code","7bb2bf1e":"code","dbec5f4f":"code","856fad5c":"code","e4d1e41a":"code","1b5916ee":"code","7519a166":"code","b4af3c7f":"code","855638f6":"code","61899924":"code","1b07a1a6":"code","f3f3f3ba":"code","da67c650":"code","6b1b47c4":"code","0176dc53":"code","b73253a6":"code","2438c696":"code","39b914b7":"code","af4acd15":"code","96f62641":"code","f9b3adcd":"markdown","e9f870a5":"markdown","2e809e88":"markdown","a9210550":"markdown","634416d9":"markdown","cbf7e51f":"markdown"},"source":{"29d462b1":"import pandas as pd       \nimport matplotlib as mat\nimport matplotlib.pyplot as plt    \nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import LeaveOneGroupOut\nfrom sklearn.metrics import mean_squared_log_error\n\nfrom xgboost import XGBRegressor\n#from lightgbm import LGBMRegressor","a8632f84":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv', index_col='date_time', parse_dates=['date_time'])\nX_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv', index_col='date_time', parse_dates=['date_time'])\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\n\n\ntarget = [col for col in df_train.columns if 'target_' in col]\nY_train = df_train[target].copy()\n#X_train = df_train.copy().drop(target, axis = 1)","eea13aae":"df_train","3ec3cddb":"df_train.info()","a827e93f":"df_train.describe().T","55ca5c06":"X_test","7ece4c50":"X_test.info()","ac3f9361":"X_test.describe()","9ffe9e71":"df_train['month'] = df_train.index.month\n#df_train['weekofyear'] = df_train.index.isocalendar().week\ndf_train['dayofweek'] = df_train.index.dayofweek\ndf_train['hour'] = df_train.index.hour\n\nX_test['month'] = X_test.index.month\n#X_test['weekofyear'] = X_test.index.isocalendar().week\nX_test['dayofweek'] = X_test.index.dayofweek\nX_test['hour'] = X_test.index.hour","c51b47ae":"df_train.head()","0d087289":"X_test.head()","89e51019":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_train.index, y=\"target_carbon_monoxide\", data=df_train, label='carbon_monoxide', color = 'red')\n\nplt.legend()\nplt.xticks(rotation=25)\nplt.show()","c1781968":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_train.index, y=\"target_benzene\", data=df_train, label='benzene', color = 'blue')\n\nplt.legend()\nplt.xticks(rotation=25)\nplt.show()","b01098ec":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_train.index, y=\"target_nitrogen_oxides\", data=df_train, label='nitrogen_oxides', color = 'green')\n\nplt.legend()\nplt.xticks(rotation=25)\nplt.show()","372d7bec":"df_month = pd.DataFrame()\ndf_month['target_carbon_monoxide'] = df_train.groupby(['month'])['target_carbon_monoxide'].mean()\ndf_month['target_benzene'] = df_train.groupby(['month'])['target_benzene'].mean()\ndf_month['target_nitrogen_oxides'] = df_train.groupby(['month'])['target_nitrogen_oxides'].mean()\n#df_month\n\ndf_dayofweek = pd.DataFrame()\ndf_dayofweek['target_carbon_monoxide'] = df_train.groupby(['dayofweek'])['target_carbon_monoxide'].mean()\ndf_dayofweek['target_benzene'] = df_train.groupby(['dayofweek'])['target_benzene'].mean()\ndf_dayofweek['target_nitrogen_oxides'] = df_train.groupby(['dayofweek'])['target_nitrogen_oxides'].mean()\n#df_dayofweek\n\ndf_hour = pd.DataFrame()\ndf_hour['target_carbon_monoxide'] = df_train.groupby(['hour'])['target_carbon_monoxide'].mean()\ndf_hour['target_benzene'] = df_train.groupby(['hour'])['target_benzene'].mean()\ndf_hour['target_nitrogen_oxides'] = df_train.groupby(['hour'])['target_nitrogen_oxides'].mean()\n#df_hour","6e2d8621":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_month.index, y=\"target_carbon_monoxide\", data=df_month, label='carbon_monoxide', color = 'red')\n\nplt.legend()\nplt.xticks(df_month.index)\nplt.show()","26a93546":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_month.index, y=\"target_benzene\", data=df_month, label='benzene', color = 'blue')\n\nplt.legend()\nplt.xticks(df_month.index)\nplt.show()","f6e3f346":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_month.index, y=\"target_nitrogen_oxides\", data=df_month, label='nitrogen_oxides', color = 'green')\n\nplt.legend()\nplt.xticks(df_month.index)\nplt.show()","762d2977":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_dayofweek.index, y=\"target_carbon_monoxide\", data=df_dayofweek, label='carbon_monoxide', color = 'red')\n\nplt.legend()\nplt.xticks(df_dayofweek.index)\nplt.show()","7786fd01":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_dayofweek.index, y=\"target_benzene\", data=df_dayofweek, label='benzene', color = 'blue')\n\nplt.legend()\nplt.xticks(df_dayofweek.index)\nplt.show()","3c4bcb98":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_dayofweek.index, y=\"target_nitrogen_oxides\", data=df_dayofweek, label='nitrogen_oxides', color = 'green')\n\nplt.legend()\nplt.xticks(df_dayofweek.index)\nplt.show()","19e2fab9":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_hour.index, y=\"target_carbon_monoxide\", data=df_hour, label='carbon_monoxide', color = 'red')\n\nplt.legend()\nplt.xticks(df_hour.index)\nplt.show()","f59d3fe2":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_hour.index, y=\"target_benzene\", data=df_hour, label='benzene', color = 'blue')\n\nplt.legend()\nplt.xticks(df_hour.index)\nplt.show()","78ec8cad":"plt.figure(figsize=(15,5))\n\nsns.lineplot(x=df_hour.index, y=\"target_nitrogen_oxides\", data=df_hour, label='nitrogen_oxides', color = 'green')\n\nplt.legend()\nplt.xticks(df_hour.index)\nplt.show()","2c9c08e0":"#Seasons\ndf_train['is_winter'] = df_train['month'].apply(lambda x: 1 if (x == 12 or x == 1 or x == 2) else 0)\nX_test['is_winter'] = X_test['month'].apply(lambda x: 1 if (x == 12 or x == 1 or x == 2) else 0)\n\ndf_train['is_spring'] = df_train['month'].apply(lambda x: 1 if (x == 3 or x == 4 or x == 5) else 0)\nX_test['is_spring'] = X_test['month'].apply(lambda x: 1 if (x == 3 or x == 4 or x == 5) else 0)\n\ndf_train['is_summer'] = df_train['month'].apply(lambda x: 1 if (x == 6 or x == 7 or x == 8) else 0)\nX_test['is_summer'] = X_test['month'].apply(lambda x: 1 if (x == 6 or x == 7 or x == 8) else 0)\n\ndf_train['is_autumn'] = df_train['month'].apply(lambda x: 1 if (x == 9 or x == 10 or x == 11) else 0)\nX_test['is_autumn'] = X_test['month'].apply(lambda x: 1 if (x == 9 or x == 10 or x == 11) else 0)\n\n#Weekend or not\ndf_train['is_weekend'] = df_train['dayofweek'].apply(lambda x: 1 if x >= 5  else 0)\nX_test['is_weekend'] = X_test['dayofweek'].apply(lambda x: 1 if x >= 5  else 0)\n\n#Commute\/work periods\ndf_train['is_commute_m'] = df_train['hour'].apply(lambda x: 1 if (x == 8 or x == 9)  else 0)\nX_test['is_commute_m'] = X_test['hour'].apply(lambda x: 1 if (x == 8 or x == 9)  else 0)\n                                                  \ndf_train['is_work'] = df_train['hour'].apply(lambda x: 1 if (x >=10 and x < 18)  else 0)\nX_test['is_work'] = X_test['hour'].apply(lambda x: 1 if (x >=10 and x < 18)  else 0)\n\ndf_train['is_commute_e'] = df_train['hour'].apply(lambda x: 1 if (x >=18 and x <= 20)  else 0)\nX_test['is_commute_e'] = X_test['hour'].apply(lambda x: 1 if (x >=18 and x <= 20)  else 0)                                                  ","f14ff6aa":"df_train.head()","5dc001a4":"X_test.head()","4cf663d2":"season = ['is_winter','is_spring','is_summer','is_autumn']\n\nplt.figure(figsize=(16,12))\n\nfor i,col in enumerate(df_train[season]):    \n    plt.subplot(2,2,i + 1)\n\n    sns.boxplot(x=df_train.loc[:,col], y=df_train[\"target_carbon_monoxide\"], palette = 'BuPu')    \n    plt.ylabel(\"\")\n    plt.yticks(fontsize = 7)\n\nplt.show()","21369bb0":"plt.figure(figsize=(16,12))\n\nfor i,col in enumerate(df_train[season]):    \n    plt.subplot(2,2,i + 1)\n\n    sns.boxplot(x=df_train.loc[:,col], y=df_train[\"target_benzene\"], palette = 'BuPu')    \n    plt.ylabel(\"\")\n    plt.yticks(fontsize = 7)\n\nplt.show()","ebc6c50a":"plt.figure(figsize=(16,12))\n\nfor i,col in enumerate(df_train[season]):    \n    plt.subplot(2,2,i + 1)\n\n    sns.boxplot(x=df_train.loc[:,col], y=df_train[\"target_nitrogen_oxides\"], palette = 'BuPu')    \n    plt.ylabel(\"\")\n    plt.yticks(fontsize = 7)\n\nplt.show()","60a15039":"work_hour = ['is_commute_e','is_work','is_commute_e']\n\nplt.figure(figsize=(16,6))\n\nfor i,col in enumerate(df_train[work_hour]):    \n    plt.subplot(1,3,i + 1)\n\n    sns.boxplot(x=df_train.loc[:,col], y=df_train[\"target_carbon_monoxide\"], palette = 'BuPu')    \n    plt.ylabel(\"\")\n    plt.yticks(fontsize = 7)\n\nplt.show()","acb569a3":"plt.figure(figsize=(16,6))\n\nfor i,col in enumerate(df_train[work_hour]):    \n    plt.subplot(1,3,i + 1)\n\n    sns.boxplot(x=df_train.loc[:,col], y=df_train[\"target_benzene\"], palette = 'BuPu')    \n    plt.ylabel(\"\")\n    plt.yticks(fontsize = 7)\n\nplt.show()","49306953":"plt.figure(figsize=(16,6))\n\nfor i,col in enumerate(df_train[work_hour]):    \n    plt.subplot(1,3,i + 1)\n\n    sns.boxplot(x=df_train.loc[:,col], y=df_train[\"target_nitrogen_oxides\"], palette = 'BuPu')    \n    plt.ylabel(\"\")\n    plt.yticks(fontsize = 7)\n\nplt.show()","ac733786":"plt.figure(figsize=(5,6))\n\nsns.boxplot(x=df_train['is_weekend'], y=df_train[\"target_carbon_monoxide\"], palette = 'BuPu')    \nplt.ylabel(\"\")\nplt.yticks(fontsize = 7)\n\nplt.show()","988ab2d5":"plt.figure(figsize=(5,6))\n\nsns.boxplot(x=df_train['is_weekend'], y=df_train[\"target_benzene\"], palette = 'BuPu')    \nplt.ylabel(\"\")\nplt.yticks(fontsize = 7)\n\nplt.show()","75671183":"plt.figure(figsize=(5,6))\n\nsns.boxplot(x=df_train['is_weekend'], y=df_train[\"target_nitrogen_oxides\"], palette = 'BuPu')    \nplt.ylabel(\"\")\nplt.yticks(fontsize = 7)\n\nplt.show()","c53f19ab":"plt.figure(figsize=(20,10))\nsns.heatmap(df_train.corr().round(2), vmin=-1, vmax=1, center=0, annot=True, cmap='viridis')\nplt.show()","f30f2523":"df_train.corr('spearman')[['target_carbon_monoxide']].sort_values(['target_carbon_monoxide'], ascending=False).style.background_gradient('viridis')","2747af7b":"df_train.corr('spearman')[['target_benzene']].sort_values(['target_benzene'], ascending=False).style.background_gradient('viridis')","7bb2bf1e":"df_train.corr('spearman')[['target_nitrogen_oxides']].sort_values(['target_nitrogen_oxides'], ascending=False).style.background_gradient('viridis')","dbec5f4f":"X_train = df_train.copy().drop(target, axis = 1)","856fad5c":"X_train","e4d1e41a":"Y_train1 = Y_train.iloc[:, 0].copy()\nY_train2 = Y_train.iloc[:, 1].copy()\nY_train3 = Y_train.iloc[:, 2].copy()","1b5916ee":"Y_train1","7519a166":"Y_train2","b4af3c7f":"Y_train3","855638f6":"groups = X_train['month']\ngroups.value_counts()","61899924":"X_train['month'] = X_train['month'].replace(1,12)\ngroups = X_train['month']\ngroups.value_counts()","1b07a1a6":"#Month feature harms the performance.\nX_train = X_train.drop('month', axis = 1)\nX_test = X_test.drop('month', axis = 1)","f3f3f3ba":"def prediction (X_train, Y_train, model, X_test):\n        \n    #kfold = KFold(n_splits = 10)\n    logo = LeaveOneGroupOut()\n\n    y_pred = np.zeros(len(X_test))\n    train_oof = np.zeros(len(X_train))\n    \n    #for idx in kfold.split(X=X_train, y=Y_train):\n    for idx in logo.split(X=X_train, y=Y_train, groups=groups):\n        train_idx, val_idx = idx[0], idx[1]\n        xtrain = X_train.iloc[train_idx]\n        ytrain = Y_train.iloc[train_idx]\n        xval = X_train.iloc[val_idx]\n        yval = Y_train.iloc[val_idx]\n        \n        # fit model for current fold\n        model.fit(xtrain, ytrain, \n            early_stopping_rounds = 100, eval_set = [(xval,yval)], verbose = False)\n\n        #create predictions\n        #y_pred += model.predict(X_test)\/kfold.n_splits\n        y_pred += model.predict(X_test)\/10 #logo.n_splits\n        print(y_pred)\n               \n        val_pred = model.predict(xval)\n        # getting out-of-fold predictions on training set\n        val_pred[val_pred < 0] = 0 #few negative values\n        train_oof[val_idx] = val_pred\n\n        # calculate and append rmsle\n        msle = mean_squared_log_error(yval,val_pred)\n        rmsle = np.sqrt(msle)\n        print('RMSLE : {}'.format(rmsle))\n  \n    return y_pred, train_oof","da67c650":"#lgbm_model = LGBMRegressor(objective = 'regression', metric = 'rmse', n_estimators = 3000, learning_rate = 0.02, random_state = 42,\n#                           subsample = 0.8, colsample_bytree = 0.8, reg_alpha = 0.5, reg_lambda = 0.5)\n\nxgb_model = XGBRegressor(objective=\"reg:squarederror\", eval_metric = 'rmsle', n_estimators = 3000, learning_rate = 0.02, random_state = 42,\n                           subsample = 0.8, colsample_bytree = 0.8, reg_alpha = 0.5, reg_lambda = 0.5)","6b1b47c4":"#pred_1, train_oof_1  = prediction (X_train, Y_train1, lgbm_model, X_test)\npred_1, train_oof_1  = prediction (X_train, Y_train1, xgb_model, X_test)","0176dc53":"#pred_2, train_oof_2  = prediction (X_train, Y_train2, lgbm_model, X_test)\npred_2, train_oof_2  = prediction (X_train, Y_train2, xgb_model, X_test)","b73253a6":"#Using carbon_monoxide to improve nitrogen_oxides prediction\nX_train['target_carbon_monoxide'] = df_train['target_carbon_monoxide']\nX_test['target_carbon_monoxide'] = pred_1","2438c696":"#pred_3, train_oof_3  = prediction (X_train, Y_train3, lgbm_model, X_test)\npred_3, train_oof_3  = prediction (X_train, Y_train3, xgb_model, X_test)","39b914b7":"print(\"RMSLE: {0:0.6f}\".format(np.sqrt(mean_squared_log_error(Y_train1,train_oof_1))))\nprint(\"RMSLE: {0:0.6f}\".format(np.sqrt(mean_squared_log_error(Y_train2,train_oof_2))))\nprint(\"RMSLE: {0:0.6f}\".format(np.sqrt(mean_squared_log_error(Y_train3,train_oof_3))))","af4acd15":"submission['target_carbon_monoxide'] = pred_1\nsubmission['target_benzene'] = pred_2\nsubmission['target_nitrogen_oxides'] = pred_3\n\nsubmission","96f62641":"submission.to_csv(\"submission.csv\", index=False)\nsubmission","f9b3adcd":"## Making Predictions","e9f870a5":"# <center>Tabular Playground Series - July\/2021<center>\n## <center>EDA (on time features) + XGBoost with Feature Engineering<center>\n---\nNotebook created on the last days of competition for practice purposes, with no intent to aim at the top of the leaderboard (given the data leakage issue). It consists of basic feature engineering based on some EDA. No pseudolabeling (except for using carbon monoxide as a feature for nitrogen oxides) and no external sources.\n    \nNotebooks that were helpful for this work:\n* [XGBoost & LeaveOneGroupOut & Ensembling](https:\/\/www.kaggle.com\/mehrankazeminia\/1-tps-jul-21-xgboost-leaveonegroupout\/notebook) by [@mehrankazeminia](https:\/\/www.kaggle.com\/mehrankazeminia) & [@somayyehgholami](https:\/\/www.kaggle.com\/somayyehgholami) (Leave one group out)\n* [TPS July EDA+LGBM+Models](https:\/\/www.kaggle.com\/ankitp013\/tps-july-eda-lgbm-models) by [@ankitp013](https:\/\/www.kaggle.com\/ankitp013) (Feature Engineering) ","2e809e88":"## Importing Libraries and Datasets","a9210550":"Observations:\n- Seasonal influence on targets;\n- All targets have lower values on weekend;\n- Higher values on commute and work time.\n\nCreating new features based on the previous plots.","634416d9":"Note: Day of week values go from 0(monday) to 6(sunday)","cbf7e51f":"## Exploring the Data"}}