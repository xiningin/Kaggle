{"cell_type":{"77db0d6a":"code","deb25973":"code","0ac33d92":"code","f7b98a3f":"code","79842ee3":"code","abb88eec":"code","f5e25740":"code","cb070cb1":"code","7bfb96b9":"code","76204b30":"code","805dbaef":"code","a006bb96":"code","bf49a72e":"code","dac972d8":"code","bcf1b625":"code","1278c472":"code","0c12386b":"code","ce8ca9f0":"code","f587652c":"code","fca455b7":"code","c8307f9d":"code","b4d35b06":"code","22437152":"code","6410dac8":"code","89d3d56a":"code","0cfb70da":"code","aa794344":"code","3e956c50":"code","db31e9ff":"code","280cac18":"code","f7df08df":"code","47ccc401":"code","2bab4e61":"code","06d9b6b9":"code","9735218c":"code","53bea26f":"code","d389eecb":"code","f33d36ac":"code","fc993bce":"code","54e4ba38":"code","9619aa21":"code","06b649f1":"code","272bd86f":"code","1701de3d":"code","0f3c1546":"code","071b36db":"markdown","483a3c95":"markdown","971c648d":"markdown","628e7c78":"markdown","4ee7586e":"markdown","becfd46d":"markdown","8f8020df":"markdown","3c4c7fb6":"markdown","14f073da":"markdown","18643c39":"markdown","d693afd7":"markdown","307c3a2b":"markdown","3f1766f9":"markdown","67555c27":"markdown","a7ead219":"markdown","eee7cd82":"markdown","3bccbe16":"markdown","149eaef1":"markdown","79bd420d":"markdown","57df3999":"markdown","20f91a8f":"markdown","bb78c5bb":"markdown","462d762d":"markdown","63a43880":"markdown","33c91123":"markdown","3f4c6646":"markdown","df5b1a34":"markdown","6e94bc13":"markdown","d967cf68":"markdown","472baf77":"markdown","212abf9e":"markdown","7cab308b":"markdown"},"source":{"77db0d6a":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os","deb25973":"# using SQLite Table to read data.\ncon = sqlite3.connect('..\/input\/database.sqlite') \n\n# filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\n# SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000, will give top 500000 data points\n# you can change the number to any other number based on your computing power\n\n# filtered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000\"\"\", con) \n# for tsne assignment you can take 5k data points\n\nfiltered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 100000\"\"\", con) \n\n# Give reviews with Score>3 a positive rating(1), and reviews with a score<3 a negative rating(0).\ndef partition(x):\n    if x < 3:\n        return 0\n    return 1\n\n#changing reviews with score less than 3 to be positive and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition) \nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(3)","0ac33d92":"display = pd.read_sql_query(\"\"\"\nSELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*)\nFROM Reviews\nGROUP BY UserId\nHAVING COUNT(*)>1\n\"\"\", con)","f7b98a3f":"print(display.shape)\ndisplay.head()","79842ee3":"display[display['UserId']=='AZY10LLTJ71NX']","abb88eec":"display['COUNT(*)'].sum()","f5e25740":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND UserId=\"AR5J8UI46CURR\"\nORDER BY ProductID\n\"\"\", con)\ndisplay.head()","cb070cb1":"#Sorting data according to ProductId in ascending order\nsorted_data=filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","7bfb96b9":"#Deduplication of entries\nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","76204b30":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","805dbaef":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","a006bb96":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","bf49a72e":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","dac972d8":"# printing some random reviews\nsent_0 = final['Text'].values[0]\nprint(sent_0)\nprint(\"=\"*50)\n\nsent_1000 = final['Text'].values[1000]\nprint(sent_1000)\nprint(\"=\"*50)\n\nsent_1500 = final['Text'].values[1500]\nprint(sent_1500)\nprint(\"=\"*50)\n\nsent_4900 = final['Text'].values[4900]\nprint(sent_4900)\nprint(\"=\"*50)","bcf1b625":"# remove urls from text python: https:\/\/stackoverflow.com\/a\/40823105\/4084039\nsent_0 = re.sub(r\"http\\S+\", \"\", sent_0)\nsent_1000 = re.sub(r\"http\\S+\", \"\", sent_1000)\nsent_150 = re.sub(r\"http\\S+\", \"\", sent_1500)\nsent_4900 = re.sub(r\"http\\S+\", \"\", sent_4900)\n\nprint(sent_0)","1278c472":"# https:\/\/stackoverflow.com\/questions\/16206380\/python-beautifulsoup-how-to-remove-all-tags-from-an-element\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(sent_0, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1000, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1500, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_4900, 'lxml')\ntext = soup.get_text()\nprint(text)","0c12386b":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","ce8ca9f0":"sent_1500 = decontracted(sent_1500)\nprint(sent_1500)\nprint(\"=\"*50)","f587652c":"#remove words with numbers python: https:\/\/stackoverflow.com\/a\/18082370\/4084039\nsent_0 = re.sub(\"\\S*\\d\\S*\", \"\", sent_0).strip()\nprint(sent_0)","fca455b7":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent_1500 = re.sub('[^A-Za-z0-9]+', ' ', sent_1500)\nprint(sent_1500)","c8307f9d":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\n# <br \/><br \/> ==> after the above steps, we are getting \"br br\"\n# we are including them into stop words list\n# instead of <br \/> if we have <br\/> these tags would have revmoved in the 1st step\n\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","b4d35b06":"# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Text'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_reviews.append(sentance.strip())","22437152":"preprocessed_reviews[1500]","6410dac8":"## preprocessing for review summary \nsummary_preprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Summary'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    summary_preprocessed_reviews.append(sentance.strip())\n\nprint(summary_preprocessed_reviews[1500])\n","89d3d56a":"# Adding review text and Summary text as Input into the data\n\npreprocessed_reviews = [i + ' ' + j for i, j in zip(preprocessed_reviews,summary_preprocessed_reviews)] \nprint(preprocessed_reviews[1500])\n","0cfb70da":"#Calculating the train and test size and dividing the data into train and test chunks into the 70 - 30 ratio\nimport math\n\npreprocessed_reviews = np.array(preprocessed_reviews) \ntrain_size = math.floor(preprocessed_reviews.shape[0] * 0.7)\n\n#split the data set into train and test\npreprocessed_reviews_train = preprocessed_reviews[: train_size]\npreprocessed_reviews_test  =preprocessed_reviews[train_size : ]  \nScore_train =final['Score'][: train_size ]\nScore_test = final['Score'][train_size : ]\nprint(preprocessed_reviews_train.shape)\nprint(preprocessed_reviews_test.shape)\n# abc = pd.Score_train\n# print(abc.value_counts())\nprint(Score_train.shape)\nprint(Score_test.shape)\nprint(Score_train.value_counts())","aa794344":"#BoW \ncount_vect = CountVectorizer(min_df=5) #in scikit-learn\n\n# BOW on Train data \ncount_vect_train_data = count_vect.fit_transform(preprocessed_reviews_train)\n\n# BOW on Test data  \ncount_vect_test_data = count_vect.transform(preprocessed_reviews_test)\n\nprint(\"some feature names \", count_vect.get_feature_names()[:10])\nprint('='*50)\n\n\nprint(\"the type of count vectorizer of train Preprocessed data\",type(count_vect_train_data))\nprint(\"the type of count vectorizer of test Preprocessed data\",type(count_vect_test_data))\nprint(\"the shape of out text BOW vectorizer on train data\",count_vect_train_data.get_shape())\nprint(\"the shape of out text BOW vectorizer on test data\",count_vect_test_data.get_shape())\nprint(\"the number of unique words \", count_vect_test_data.get_shape()[1])","3e956c50":"#bi-gram, tri-gram and n-gram\n\nn_count_vect = CountVectorizer(ngram_range=(1,2), min_df=10)\n\n# bi-gram BOW on Train data and Test data \nn_count_vect_train_data = n_count_vect.fit_transform(preprocessed_reviews_train) \nn_count_vect_test_data = n_count_vect.transform(preprocessed_reviews_test)\n\n\nprint(\"some feature names \", n_count_vect.get_feature_names()[:10])\nprint('='*50)\n\n\nprint(\"the type of count vectorizer of train Preprocessed data\",type(n_count_vect_train_data))\nprint(\"the type of count vectorizer of test Preprocessed data\",type(n_count_vect_test_data))\nprint(\"the shape of out text bi gram BOW vectorizer on train data\",n_count_vect_train_data.get_shape())\nprint(\"the shape of out text bi gram BOW vectorizer on test data\",n_count_vect_test_data.get_shape())\nprint(\"the number of unique words \",n_count_vect_train_data.get_shape()[1])","db31e9ff":"#Text converting into vector using Tf-Idf\ntf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10 )\n\n# n-gram TfIdf on Train and Test data \ntfIdf_vect_train_data = tf_idf_vect.fit_transform(preprocessed_reviews_train) \ntfIdf_vect_test_data = tf_idf_vect.transform(preprocessed_reviews_test)\n\nprint(\"some feature names \", tf_idf_vect.get_feature_names()[:10])\nprint('='*50)\n\nprint(\"the type of count vectorizer of train Preprocessed data\",type(tfIdf_vect_train_data))\nprint(\"the type of count vectorizer of test Preprocessed data\",type(tfIdf_vect_test_data))\nprint(\"the shape of out text n-gram TfIdf vectorizer on train data\",tfIdf_vect_train_data.get_shape())\nprint(\"the shape of out text n-gram TfIdf vectorizer on test data\",tfIdf_vect_test_data.get_shape())\nprint(\"the number of unique words \",tfIdf_vect_train_data.get_shape()[1])","280cac18":"# Train your own Word2Vec model using your own text corpus\nimport gensim\n\ni=0\nlist_of_sentance=[]\nfor sentance in preprocessed_reviews:\n    list_of_sentance.append(sentance.split())\n\nw2v_model=gensim.models.Word2Vec(list_of_sentance,min_count= 5,size=50, workers=4)    ","f7df08df":"# Using Google News Word2Vectors\n\n# in this project we are using a pretrained model by google\n# its 3.3G file, once you load this into your memory \n# it occupies ~9Gb, so please do this step only if you have >12G of ram\n# we will provide a pickle file wich contains a dict , \n# and it contains all our courpus words as keys and  model[word] as values\n# To use this code-snippet, download \"GoogleNews-vectors-negative300.bin\" \n# from https:\/\/drive.google.com\/file\/d\/0B7XkCwpI5KDYNlNUTTlSS21pQmM\/edit\n# it's 1.9GB in size.\n\n\n# http:\/\/kavita-ganesan.com\/gensim-word2vec-tutorial-starter-code\/#.W17SRFAzZPY\n# you can comment this whole cell\n# or change these varible according to your need\n\nis_your_ram_gt_16g=False\nwant_to_use_google_w2v = False\nwant_to_train_w2v = False\n\nif want_to_train_w2v:\n    # min_count = 5 considers only words that occured atleast 5 times\n    w2v_model=Word2Vec(list_of_sentance,min_count=5,size=50, workers=4)\n    print(w2v_model.wv.most_similar('great'))\n    print('='*50)\n    print(w2v_model.wv.most_similar('worst'))\n    \nelif want_to_use_google_w2v and is_your_ram_gt_16g:\n    if os.path.isfile('GoogleNews-vectors-negative300.bin'):\n        w2v_model=KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)\n        print(w2v_model.wv.most_similar('great'))\n        print(w2v_model.wv.most_similar('worst'))\n    else:\n        print(\"you don't have gogole's word2vec file, keep want_to_train_w2v = True, to train your own w2v \")","47ccc401":"w2v_words = list(w2v_model.wv.vocab)\nprint(\"number of words that occured minimum 5 times \",len(w2v_words))\nprint(\"sample words \", w2v_words[0:50])","2bab4e61":"# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","06d9b6b9":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\nmodel = TfidfVectorizer()\ntf_idf_matrix = model.fit_transform(preprocessed_reviews)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))","9735218c":"# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec)\n    row += 1","53bea26f":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import GridSearchCV\n\n#Function to return Optimal value of alpha and Draw plot of area under roc curve vs alpha-\ndef NaiveBayes_accuracy(Train_data ,Score_train ):\n    #possible number of alpha\n    alphas =  np.array([0.00001, 0.00003, 0.0001, 0.0003, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10,30,100,300,1000])\n    param_grid = dict(alpha = alphas)\n    \n    NB_Optimal = MultinomialNB()\n    grid = GridSearchCV(NB_Optimal, param_grid=param_grid,scoring='roc_auc',cv=5,  n_jobs=-1)\n    grid_result = grid.fit(Train_data , Score_train)\n    \n    # summarize results\n    CV_mean = grid_result.cv_results_['mean_test_score']\n    Train_mean = grid_result.cv_results_['mean_train_score']\n    \n   \n    # Plot graph between grid cross validation result and number of neighbors\n    plt.plot(np.log10(alphas), CV_mean ,label='AUC of CV data against Alpha' , marker = '*')\n    plt.plot(np.log10(alphas) , Train_mean , label='AUC of train data against Alpha' , marker = '*')\n    plt.title(\"Area under Roc Curve vs alpha\")\n    plt.xlabel('alpha')\n    plt.ylabel('Area')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n# Function to  plot graph on area under roc curve on test and train data and print confusion matrix\ndef plot_Graph(alpha, Train_data, Train_label, Test_data, Test_label):\n    #Train KNN on optimal parameter\n    NB_Optimal = MultinomialNB(alpha = alpha)\n    # fitting the model\n    NB_Optimal.fit(Train_data, Train_label)\n\n    #predict the probability of Train data and test data from model\n    train_log_proba = NB_Optimal.predict_log_proba(Train_data)\n    test_log_proba =  NB_Optimal.predict_log_proba(Test_data)\n    \n    #Calculate the Class \n    train_pred = np.argmax(train_log_proba, axis=1) \n    test_pred =  np.argmax(test_log_proba, axis=1)\n    \n    #Compute fpr and tpr from the predicted label and  True label of train data and test data\n    fpr_train, tpr_train,_ = roc_curve(Train_label, train_pred)\n    fpr_test, tpr_test,_ = roc_curve(Test_label, test_pred)\n    \n    # Compute area under roc curve\n    area_train = auc(fpr_train, tpr_train)\n    area_test = auc(fpr_test, tpr_test)\n    \n    lw =2\n    plt.plot(fpr_test, tpr_test, color='darkorange',lw=lw, label='ROC curve of Test data (area = %0.2f)' % area_test)\n    plt.plot(fpr_train, tpr_train, color='green',lw=lw, label='ROC curve of Train data(area = %0.2f)' % area_train)\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Area Under Receiver operating characteristic Curve')\n    plt.legend(loc=\"lower right\")\n    \n    # Confusion matrix for train data\n    \n    plt.figure()\n    cm = confusion_matrix(Train_label, train_pred)\n    class_label = [\"negative\", \"positive\"]\n    df_cm_train = pd.DataFrame(cm, index = class_label, columns = class_label)\n    sns.heatmap(df_cm_train , annot = True, fmt = \"d\")\n    plt.title(\"Confusiion Matrix for Train data\")\n    plt.xlabel(\"Predicted Label\")\n    plt.ylabel(\"True Label\")\n    \n     # Confusion matrix for test data\n    \n    plt.figure()\n    cm = confusion_matrix(Test_label, test_pred)\n    class_label = [\"negative\", \"positive\"]\n    df_cm_test = pd.DataFrame(cm, index = class_label, columns = class_label)\n    sns.heatmap(df_cm_test , annot = True, fmt = \"d\")\n    plt.title(\"Confusiion Matrix for test data\")\n    plt.xlabel(\"Predicted Label\")\n    plt.ylabel(\"True Label\")\n    plt.show()\n    ","d389eecb":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Find optimal value of aplha\nNaiveBayes_accuracy(n_count_vect_train_data , Score_train)\n","f33d36ac":"# By looking at the validation and traing curve we can say that\nBOW_optimal_alpha = 1.0\n#Plot the graph on area under roc curve on test and train data and print confusion matrix\nplot_Graph(BOW_optimal_alpha , n_count_vect_train_data, Score_train, n_count_vect_test_data, Score_test)","fc993bce":"# Train model with optimal value of alpha\nNB_optimal = MultinomialNB(alpha = BOW_optimal_alpha)\n    \n# fitting the model\nNB_optimal.fit(n_count_vect_train_data, Score_train)\n\n# Top 10 positive  Features After Naive Bayes\npos_class_prob_sorted = NB_optimal.feature_log_prob_[0, :].argsort()\nprint(np.take(n_count_vect.get_feature_names(), pos_class_prob_sorted[:10]))","54e4ba38":"# Top 10 negative Features After Naive Bayes\nneg_class_prob_sorted = NB_optimal.feature_log_prob_[1,:].argsort()\nprint(np.take(n_count_vect.get_feature_names(), neg_class_prob_sorted[:10]))","9619aa21":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Find optimal value of aplha\nNaiveBayes_accuracy(tfIdf_vect_train_data , Score_train)","06b649f1":"# By looking at the validation and traing curve we can say that\ntfIdf_optimal_alpha = 0.1\n\n#Plot the graph on area under roc curve on test and train data and print confusion matrix\nplot_Graph(tfIdf_optimal_alpha , tfIdf_vect_train_data , Score_train, tfIdf_vect_test_data , Score_test)","272bd86f":"# Train model with optimal value of alpha\nNB_optimal_TfIdf = MultinomialNB(alpha = tfIdf_optimal_alpha)\n    \n# fitting the model\nNB_optimal_TfIdf.fit(tfIdf_vect_train_data , Score_train)\n\n# Top 10 positive  Features After Naive Bayes\npos_class_prob_sorted = NB_optimal_TfIdf.feature_log_prob_[0,:].argsort()\nprint(np.take(n_count_vect.get_feature_names(), pos_class_prob_sorted[:10]))","1701de3d":"# Top 10 negative Features After Naive Bayes\nneg_class_prob_sorted = NB_optimal_TfIdf.feature_log_prob_[1, :].argsort()\nprint(np.take(n_count_vect.get_feature_names(), neg_class_prob_sorted[:10]))","0f3c1546":"from prettytable import PrettyTable\n\n# Only review text as train data\nx = PrettyTable()\nx.field_names = [\"Algorithm(Review text as Training data Only)\", \"Optimal value of alpha\" , \"Train_data_AUC\", \"CrossValidation_data_AUC\", \"Test_data_AUC\"]\nx.add_row([\"Naive Bayes with n(1,2) gram BOW  \" , 1.0 , 0.91 , 0.937321 , 0.87 ])\nx.add_row([\"Naive Bayes with TfIdf            \" , 0.1 , 0.82 , 0.946352 , 0.74 ])\n\nprint(x)\n\n\n\n# Both Review text and summary text as the train data \ny = PrettyTable()  \ny.field_names = [\"Algorithm(Review and Summary text as Training data)\", \"Optimal value of alpha\" , \"Train_data_AUC\", \"CrossValidation_data_AUC\", \"Test_data_AUC\"]\ny.add_row([\"Naive Bayes with n(1,2) gram BOW  \" , 1.0 , 0.93 , 0.95511 , 0.90 ])\ny.add_row([\"Naive Bayes with TfIdf            \" , 0.1 , 0.86 , 0.961842 , 0.78 ])\n\nprint(y)","071b36db":"# [4] Featurization","483a3c95":"# [1]. Reading Data","971c648d":"<b>Observation:-<\/b> It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","628e7c78":"# [6] Conclusions","4ee7586e":"1.  ** Naive bayes is much better model  than Knn model for Text classification for Amazon fine food data**\n\n2. ** When we are train Model with review and  summary data as training data, then we are getting slightly higher accuracy than Only Review data as training data.So Feature engineering for Concatenating Summary data into review data  work here**\n\n3. **Naive Bayes with Bow model has more accuracy than TfIdf model here.**\n\n4. **Naive Bayes with Bow model has optimal value of alpha 1.0 where as Naive Bayes with TfIdf model has optimal value of alpha is 0.1.So for diiferent vectorization of text optimal value may differ.**","becfd46d":"#### [4.4.1.2] TFIDF weighted W2v","8f8020df":"### [5.1.2] Top 10 important features of negative class from<font color='red'> SET 1<\/font>","3c4c7fb6":"### [5.1.1] Top 10 important features of positive class from<font color='red'> SET 1<\/font>","14f073da":"# [5] Apply Naive Bayes","18643c39":"## [4.4.1] Converting text into vectors using Avg W2V, TFIDF-W2V","d693afd7":"# Applying Multinomial Naive Bayes","307c3a2b":"#### [4.4.1.1] Avg W2v","3f1766f9":"### [5.2.1] Top 10 important features of positive class from<font color='red'> SET 2<\/font>","67555c27":"# Amazon Fine Food Reviews Analysis\n\n\nData Source: https:\/\/www.kaggle.com\/snap\/amazon-fine-food-reviews <br>\n\nEDA: https:\/\/nycdatascience.com\/blog\/student-works\/amazon-fine-foods-visualization\/\n\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.<br>\n\nNumber of reviews: 568,454<br>\nNumber of users: 256,059<br>\nNumber of products: 74,258<br>\nTimespan: Oct 1999 - Oct 2012<br>\nNumber of Attributes\/Columns in data: 10 \n\nAttribute Information:\n\n1. Id\n2. ProductId - unique identifier for the product\n3. UserId - unqiue identifier for the user\n4. ProfileName\n5. HelpfulnessNumerator - number of users who found the review helpful\n6. HelpfulnessDenominator - number of users who indicated whether they found the review helpful or not\n7. Score - rating between 1 and 5\n8. Time - timestamp for the review\n9. Summary - brief summary of the review\n10. Text - text of the review\n\n\n#### Objective:\nGiven a review, determine whether the review is positive (rating of 4 or 5) or negative (rating of 1 or 2).\n\n<br>\n[Q] How to determine if a review is positive or negative?<br>\n<br> \n[Ans] We could use Score\/Rating. A rating of 4 or 5 can be cosnidered as a positive review. A rating of 1 or 2 can be considered as negative one. A review of rating 3 is considered nuetral and such reviews are ignored from our analysis. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review.\n\n\n","a7ead219":"## [4.4] Word2Vec","eee7cd82":"## [2.1] Data Cleaning: Deduplication\n\nIt is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data.  Following is an example:","3bccbe16":"## [5.1] Applying Naive Bayes on BOW,<font color='red'> SET 1<\/font>","149eaef1":"# Functions for Naive Bayes Accuracy","79bd420d":"## [5.2] Applying Naive Bayes on TFIDF,<font color='red'> SET 2<\/font>","57df3999":"<h2><font color='green'>[3.2b] Preprocessing Review Summary<\/font><\/h2>","20f91a8f":"#  [3] Preprocessing","bb78c5bb":"## [3.1].  Preprocessing Review Text\n\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1. Begin by removing the html tags\n2. Remove any punctuations or limited set of special characters like , or . or # etc.\n3. Check if the word is made up of english letters and is not alpha-numeric\n4. Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n5. Convert the word to lowercase\n6. Remove Stopwords\n7. Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)<br>\n\nAfter which we collect the words used to describe positive and negative reviews","462d762d":"# Splitting of Preprocessed data into Train and Test data","63a43880":"<h2><font color='black'>Feature Engineering<\/font><\/h2>","33c91123":"#  [2] Exploratory Data Analysis","3f4c6646":"### [5.2.2] Top 10 important features of negative class from<font color='red'> SET 2<\/font>","df5b1a34":"## [4.3] TF-IDF","6e94bc13":"## [4.2] Bi-Grams and n-Grams.","d967cf68":"<h2><font color='green'>[3.2a]Preprocessing Review Text<\/font><\/h2>","472baf77":"As it can be seen above that same user has multiple reviews with same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","212abf9e":"## [4.1] BAG OF WORDS","7cab308b":"## [1.1] Loading the data\n\nThe dataset is available in two forms\n1. .csv file\n2. SQLite Database\n\nIn order to load the data, We have used the SQLITE dataset as it is easier to query the data and visualise the data efficiently.\n<br> \n\nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score is above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\"."}}