{"cell_type":{"e71dba80":"code","6b150ea0":"code","0dda8e85":"code","1078eb6b":"code","13ada9dd":"code","823f0dea":"code","ab52126a":"code","977aee4d":"code","d66628d3":"code","aaf3251b":"code","642193d5":"code","fda28da8":"code","1bde6b11":"code","44a73f30":"code","cb515045":"code","e378eb58":"code","41c50265":"code","fecb3278":"code","42caa081":"code","0b63cd07":"code","453c545b":"code","3052b6da":"code","154f7deb":"code","301bbcc5":"code","7e0111f2":"code","23c3af29":"code","8217ee9b":"code","67762638":"code","28cc4091":"code","55747ede":"code","9ac33214":"code","ead43e80":"code","74b7fadd":"code","c963c158":"code","e99f22cf":"code","9be2a4aa":"markdown","a4a73a9f":"markdown","8a3a6802":"markdown","b62e0f5e":"markdown","514455e9":"markdown","7c060565":"markdown","f63b6091":"markdown","e824f63b":"markdown","cacc1513":"markdown","48132257":"markdown","17a94e59":"markdown","2db87489":"markdown","49affe6a":"markdown","2c3e32f9":"markdown"},"source":{"e71dba80":"from IPython.display import Image\nfrom IPython.core.display import HTML \nurl = 'https:\/\/www.ft.com\/__origami\/service\/image\/v2\/images\/raw\/https%3A%2F%2Fs3-ap-northeast-1.amazonaws.com%2Fpsh-ex-ftnikkei-3937bb4%2Fimages%2F1%2F1%2F2%2F8%2F14018211-7-eng-GB%2F0529N-Solar.jpg?source=nar-cms'\nImage(url= url, width=600, height=600, unconfined=True)\n\n\n    ","6b150ea0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0dda8e85":"import pandas as pd\nimport numpy as np\nimport datetime as dt\n#import n2w\nimport seaborn as sns\nimport matplotlib \nfrom matplotlib import pyplot as plt","1078eb6b":"# load data related to plant# 1\n\ndf_gen=pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_weather=pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')","13ada9dd":"pip install n2w","823f0dea":"import n2w","ab52126a":"df_gen.head()","977aee4d":"df_weather.head()","d66628d3":"# drop unwanted columns. \ndf_weather = df_weather.drop(['PLANT_ID', 'SOURCE_KEY'], axis=1)\ndf_gen = df_gen.drop(['PLANT_ID'], axis=1)\n\n# convert the date_time column into timedate stamp\ndf_gen[\"DATE_TIME\"] = df_gen[\"DATE_TIME\"].apply(pd.to_datetime)\ndf_weather[\"DATE_TIME\"] = df_weather[\"DATE_TIME\"].apply(pd.to_datetime)","aaf3251b":"# Convert the sourcekey to meaningful representation. \nnum = list(np.arange(0,22))\n\n#extract source key from df_gen file. \nsource_key = list(df_gen['SOURCE_KEY'].unique())\n\nsource_num = []\nfor n in num:\n    source_num.append(n2w.convert(n))\n\n#Replace source_key list in dataframe by number in words. \nfor n in range(len(source_key)):\n    df_gen = df_gen.replace(source_key[n],source_num[n])  \n","642193d5":"df_gen.head()","fda28da8":"from IPython.display import Image\nfrom IPython.core.display import HTML \nurl = 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/2\/20\/PV-system-schematics-residential-Eng.png\/360px-PV-system-schematics-residential-Eng.png'\nImage(url= url, width=600, height=600, unconfined=True)","1bde6b11":"## Group data based on inverter. \n\ndf_inv_id = {k: v for k, v in df_gen.groupby('SOURCE_KEY')}","44a73f30":"# lets pick a day and inverter number for investigation. Say Inverter = 'one', date = '2020:05:16' lets extract data df_gen\n#and weather file. \n\n#extract dataframe for Inverter 'One'\ndf_1 = df_inv_id.get('one')\ndf_1.set_index('DATE_TIME', drop=True, append=False, inplace=True, verify_integrity=False)\n\ndf_1_day= df_1.loc['2020-05-15 05:30:00': '2020-05-15 19:30:00']","cb515045":"df_1_day.head()","e378eb58":"## Similarly lets extract info from weather for date and range ['2020-05-15 05:30:00': '2020-05-15 19:30:00']\ndf_weather.set_index('DATE_TIME', drop=True, append=False, inplace=True, verify_integrity=False)\ndf_weath_1 = df_weather.loc['2020-05-15 05:30:00': '2020-05-15 19:30:00']","41c50265":"df_weath_1.head()","fecb3278":"result = pd.concat([df_1_day,df_weath_1 ], axis=1, sort= False)\n\n#timestamp 19:00, 19:15, 19:30 are missing! The DC power is zero and hence all the rows are delated. \nresult.dropna(axis=0, how='any', thresh=None, subset=None, inplace=True)\nresult.tail()","42caa081":"sns.heatmap(result.corr(),annot=True)","0b63cd07":"sns.pairplot(data=result) ","453c545b":"sns.jointplot(x='IRRADIATION', y='DC_POWER', data= result, kind = 'reg')\nsns.jointplot(x='AMBIENT_TEMPERATURE', y='MODULE_TEMPERATURE', data= result,  kind = 'kde')","3052b6da":"result = result.drop(['AC_POWER', 'SOURCE_KEY', 'DAILY_YIELD','TOTAL_YIELD', 'MODULE_TEMPERATURE'], axis=1)\n","154f7deb":"fig = plt.figure();   \nax1 = fig.add_subplot(121);  \nax2 = fig.add_subplot(122);\n\ny =result['DC_POWER']\ny1= result['IRRADIATION']\n\nsns.kdeplot(y, shade=True, color=\"r\",gridsize = 100, ax= ax1)\nsns.kdeplot(y1, shade=True, color=\"r\",gridsize = 100, ax=ax2)","301bbcc5":"y2 = result['AMBIENT_TEMPERATURE']\nsns.kdeplot(y2, shade=True, color=\"r\",gridsize = 100)","7e0111f2":"def area_undercurve(df):\n    dc_array =df['DC_POWER']\n    irrad_array = df['IRRADIATION']\n    dc_power = round(sum(dc_array.values*15.0\/60.0),4)\n    solar_power = round(sum(irrad_array*15.0\/60.0),4)\n    \n    solar_cell_area = round(dc_power\/(solar_power*0.2), 4)\n    \n    return dc_power, solar_power, solar_cell_area\n","23c3af29":"# Pseudo code\n# 1. filter data for inverter 1 and combine this with weather data. To form one single dataframe\n# 2. filter day time dcpower, solar_power and solar_cell_area for specific days with good data. \n# 3. study the variations between days. \n# 4. Hypothesis testing H0: Mean_of_inverter1 = Mean_of_inverter2 Ha means are not equal. ","8217ee9b":"## modify the dataframe filter to drop the columns that are not needed. \n\ndf_one_comb = pd.concat([df_1,df_weather], axis=1).reindex(df_1.index)\ndf_one_comb = df_one_comb.drop(['AC_POWER', 'SOURCE_KEY', 'DAILY_YIELD','TOTAL_YIELD', 'MODULE_TEMPERATURE'], axis=1)","67762638":"list_delta = [0,1,2,4,6,8,9,10,11,12,14,15,21,28,29,30,31,32]\n\nstart_date = dt.datetime(2020,5,16,5,30,0)\nend_date = dt.datetime(2020,5,16,19,30,0)\n\n\ndates = []\ndc_pwr = []\nsolar_pwr = []\nsolar_cell_ar= []\ninverter = ['one'] * len(list_delta)\n\nfor n in list_delta:\n    start = start_date + dt.timedelta(days = n)\n    end = end_date + dt.timedelta(days = n)\n    dates.append(start.date())\n    dc_power, solar_power, solar_cell_area = area_undercurve(df_one_comb.loc[start:end])\n    dc_pwr.append(dc_power)\n    solar_pwr.append(solar_power)\n    solar_cell_ar.append(solar_cell_area)\n    #print(start,end)\n    \ndata = {'Date': dates, 'DC_power':dc_pwr, 'Solar_power': solar_pwr, 'Solar_cell_area': solar_cell_ar, 'inverter': inverter}\ninvert_results_df = pd.DataFrame(data= data, columns= ['Date', 'DC_power', 'Solar_power','Solar_cell_area', 'inverter'])","28cc4091":"invert_results_df","55747ede":"sns.lineplot(x=\"Date\", y=\"DC_power\", data=invert_results_df)","9ac33214":"sns.boxplot(x=invert_results_df[\"DC_power\"])","ead43e80":"#extract dataframe for Inverter 'One'\ndf_2 = df_inv_id.get('two')\ndf_2.set_index('DATE_TIME', drop=True, append=False, inplace=True, verify_integrity=False)\n\n## modify the dataframe filter to drop the columns that are not needed. \ndf_two_comb = pd.concat([df_2,df_weather], axis=1).reindex(df_2.index)\ndf_two_comb = df_two_comb.drop(['AC_POWER', 'SOURCE_KEY', 'DAILY_YIELD','TOTAL_YIELD', 'MODULE_TEMPERATURE'], axis=1)\n\n# dataframe for inverter2\ndf_two_comb.head()","74b7fadd":"list_delta = [0,1,2,4,6,8,10,11,12,14,15,21,28,29,30,31,32]\n\nstart_date = dt.datetime(2020,5,16,5,30,0)\nend_date = dt.datetime(2020,5,16,19,30,0)\n\n\ndates = []\ndc_pwr = []\nsolar_pwr = []\nsolar_cell_ar= []\ninverter = ['two'] * len(list_delta)\n\nfor n in list_delta:\n    start = start_date + dt.timedelta(days = n)\n    end = end_date + dt.timedelta(days = n)\n    dates.append(start.date())\n    dc_power, solar_power, solar_cell_area = area_undercurve(df_two_comb.loc[start:end])\n    dc_pwr.append(dc_power)\n    solar_pwr.append(solar_power)\n    solar_cell_ar.append(solar_cell_area)\n    #print(start,end)\n    \ndata_two = {'Date': dates, 'DC_power':dc_pwr, 'Solar_power': solar_pwr, 'Solar_cell_area': solar_cell_ar, 'inverter': inverter}\ninvert_two_results_df = pd.DataFrame(data= data_two, columns= ['Date', 'DC_power', 'Solar_power','Solar_cell_area', 'inverter'])\n\ninvert_two_results_df","c963c158":"from scipy import stats\nx1 = invert_results_df['DC_power']\nx2 = invert_two_results_df['DC_power']\n\nstats.ttest_ind(x1,x2)","e99f22cf":"#Since P value is more than 0.5, statisitically fail to reject Null Hypothesis","9be2a4aa":"# Extract performance of plant 1, inverter_1 on 2020-05-15","a4a73a9f":"## Area under the DC_POWER curve & surface area of solar cell. ","8a3a6802":"## Extract Information for \"Inverter -1\"","b62e0f5e":"## Further Analysis\n\n \"Feel free to copy this notebook and continue analysis. If you wish to!\"\n\n1. Compare all other inverters of plant 1 for sample number of days\n2. Compare all other inverters of plant 2 for sample number of days\n3. Check if weather patterns for plant 1 and plant 2 vary significantly. If yes then the location of plant 2 is different \nfrom plant 1. \n4. Compare all inverters of plant 1 & 2 for a given day. ","514455e9":"# Import files","7c060565":"# Further cleaning\nseveral columns from result are not important. Example daily_yield, total_yield, Module_temp, AC_power are irrelavent. \nThe data shows colinearity and hence they are not included. for future analysis. ","f63b6091":"Image Source:-www.asia.nikkei.com","e824f63b":"## Hypothesis Testing 2sample t test","cacc1513":"## Investigation\n1. Hypothesis all Modules of same size. h0 = Mean production rate of each inverter for a given day are all equal. Only based off assumption 'Solar cell area is same for all the modules for all inverters'\n2. Calculate solar cell area based on the assumptions and check for consistence across inverters\/ days","48132257":"## Assumptions\n\n1. Sun raise and sunset falls between 05.30 and 19.30, for all the places in India. The power generation happens during \nthese hours. (#https:\/\/www.timeanddate.com\/astronomy\/india)\n2. Each record should have 14hours * 60min\/15min = 56 +1 = 57 rows for weather and gen df's. (time slot:- 05.30 and 19.30)\n3. All the inverters are located almost at same location. The weather readings based of one sensor represents all other sets of inverters\n4. Solar cell performance hinders based on clouds blocking sun rays. The weather data provided has only ambient temp readings\/ module readings does not provide details of preciptation amount, Direct radition, diffuse radition, Total Cloud cover, low, mid and high cloud cover. (https:\/\/www.meteoblue.com\/en\/weather\/archive\/export\/india_el-salvador_3585481)\n5. Total Power Output = Total Area x Solar Irradiance x Conversion Efficiency. The total area of the solar cells is unknown, conversion efficiency is unknown. The power unit of DC Power is kW, solar irradiance unit is not provided. Assuming following info. \nConversion Efficiency = 20% \nSolar Irradiance is the power per unit area (watt per square metre, W\/m2)","17a94e59":"image source wikimedia.org","2db87489":"# Install n2w library","49affe6a":"## Data Cleaning","2c3e32f9":"## Extract Information for \"Inverter -2\""}}