{"cell_type":{"3e458d53":"code","e88bded8":"code","2d8191fb":"code","91c673c6":"code","17d7c9f3":"code","04e0a282":"code","52a080a6":"code","194edb2c":"code","58151bc5":"code","3137121d":"code","bd447dd7":"code","fe969824":"code","e93a8330":"code","d629e830":"code","c64c8e7b":"code","5e1875b2":"code","b15699c8":"code","4217cadf":"code","6777bf6b":"code","e969c086":"code","a68a2fc3":"code","24054957":"code","a93f958f":"code","6400e212":"code","903f0517":"code","ef1da6f0":"code","b2b2fbd0":"code","d0aa91a6":"code","59540e7a":"code","8bf06c8f":"code","5ae38619":"markdown"},"source":{"3e458d53":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nwarnings.filterwarnings(action='ignore')","e88bded8":"train_df=pd.read_csv(r'C:\\Users\\msdan\\Desktop\\project\\New folder\\train.csv')\ntest_df=pd.read_csv(r'C:\\Users\\msdan\\Desktop\\project\\New folder\\test.csv')","2d8191fb":"train_df.head(5)","91c673c6":"test_df.head(5)","17d7c9f3":"test_df['SalePrice'] = 0","04e0a282":"Comb_data = pd.concat([train_df, test_df], keys=('x', 'y'))\nComb_data =Comb_data.drop([\"Id\"], axis = 1)\n#Comb_data=Combined Data here,after combining test and train csv files","52a080a6":"Comb_data.shape","194edb2c":"null_pct=(Comb_data.isnull().sum()\/Comb_data.shape[0]*100).sort_values(ascending=False)\nnull_pct","58151bc5":"column_drop=null_pct[null_pct>30].keys()","3137121d":"Comb_data=Comb_data.drop(column_drop, \"columns\")","bd447dd7":"Comb_data.shape","fe969824":"Comb_data['SalePrice']","e93a8330":"Comb_data.isnull().sum()","d629e830":"Comb_data['LotFrontage'] = Comb_data['LotFrontage'].fillna(Comb_data['LotFrontage'].mean())\nComb_data['BsmtFinSF1'] = Comb_data['BsmtFinSF1'].fillna(Comb_data['BsmtFinSF1'].mean())\nComb_data['BsmtFinSF2'] = Comb_data['BsmtFinSF2'].fillna(Comb_data['BsmtFinSF2'].mean())\nComb_data['BsmtUnfSF'] = Comb_data['BsmtUnfSF'].fillna(Comb_data['BsmtUnfSF'].mean())\nComb_data['TotalBsmtSF'] = Comb_data['TotalBsmtSF'].fillna(Comb_data['TotalBsmtSF'].mean())\nComb_data['GarageCars'] = Comb_data['GarageCars'].fillna(Comb_data['GarageCars'].mean())\nComb_data['GarageArea'] = Comb_data['GarageArea'].fillna(Comb_data['GarageArea'].mean())\nComb_data['MSZoning'] = Comb_data['MSZoning'].fillna(Comb_data['MSZoning'].mode()[0])\nComb_data['MasVnrType'] = Comb_data['MasVnrType'].fillna(Comb_data['MasVnrType'].mode()[0])\nComb_data['BsmtQual'] = Comb_data['BsmtQual'].fillna(Comb_data['BsmtQual'].mode()[0])\nComb_data['BsmtCond'] = Comb_data['BsmtCond'].fillna(Comb_data['BsmtCond'].mode()[0])\nComb_data['BsmtExposure'] = Comb_data['BsmtExposure'].fillna(Comb_data['BsmtExposure'].mode()[0])\nComb_data['BsmtFinType1'] = Comb_data['BsmtFinType1'].fillna(Comb_data['BsmtFinType1'].mode()[0])\nComb_data['BsmtFinType2'] = Comb_data['BsmtFinType2'].fillna(Comb_data['BsmtFinType2'].mode()[0])\nComb_data['GarageType'] =Comb_data['GarageType'].fillna(Comb_data['GarageType'].mode()[0])\nComb_data['GarageFinish'] = Comb_data['GarageFinish'].fillna(Comb_data['GarageFinish'].mode()[0])\nComb_data['GarageQual'] =Comb_data['GarageQual'].fillna(Comb_data['GarageQual'].mode()[0])\nComb_data['GarageCond'] = Comb_data['GarageCond'].fillna(Comb_data['GarageCond'].mode()[0])\nComb_data['SaleType'] =Comb_data['SaleType'].fillna(Comb_data['SaleType'].mode()[0])\nComb_data['Utilities'] = Comb_data['Utilities'].fillna(Comb_data['Utilities'].mode()[0])\nComb_data['Exterior1st'] = Comb_data['Exterior1st'].fillna(Comb_data['Exterior1st'].mode()[0])\nComb_data['Exterior2nd'] = Comb_data['Exterior2nd'].fillna(Comb_data['Exterior2nd'].mode()[0])\nComb_data['Electrical'] = Comb_data['Electrical'].fillna(Comb_data['Electrical'].mode()[0])\nComb_data['Functional'] = Comb_data['Functional'].fillna(Comb_data['Functional'].mode()[0])\nComb_data['MasVnrArea'] = Comb_data['MasVnrArea'].fillna(Comb_data['MasVnrArea'].mode()[0])\nComb_data['BsmtFullBath'] = Comb_data['BsmtFullBath'].fillna(Comb_data['BsmtFullBath'].mode()[0])\nComb_data['BsmtHalfBath'] = Comb_data['BsmtHalfBath'].fillna(Comb_data['BsmtHalfBath'].mode()[0])\nComb_data['KitchenQual'] = Comb_data['KitchenQual'].fillna(Comb_data['KitchenQual'].mode()[0])","c64c8e7b":"Comb_data.isnull().sum()","5e1875b2":"Comb_data.corr()","b15699c8":"## Categorical Features\ncolumns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']\nlen(columns)","4217cadf":"quantitative_columns = [column for column in train_df.columns \n                        if train_df.dtypes[column] in ['float64', 'int64']]\n","6777bf6b":"quantitative_columns.remove('SalePrice')\nquantitative_columns.remove('Id')","e969c086":"test_id = test_df['Id']\ntrain_df.drop(['Id'], axis=1, inplace=True)\ntest_df.drop(['Id'], axis=1, inplace=True)","a68a2fc3":"train_input= train_df[quantitative_columns].values\ntest_input = test_df[quantitative_columns].values","24054957":"scaler = StandardScaler().fit(train_input)\n\ntrain_input = scaler.transform(train_input)\ntest_input = scaler.transform(test_input)","a93f958f":"train_out = train_df.SalePrice.values\nplt.hist(train_out);","6400e212":"target = np.log1p(train_df.SalePrice)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='blue')\nplt.show()","903f0517":"model = XGBRegressor()","ef1da6f0":"model = model.fit(train_input,  np.log1p(train_df.SalePrice))","b2b2fbd0":"predictions = model.predict(test_input)","d0aa91a6":"predictions = np.expm1(predictions)\n","59540e7a":"df_predictions = pd.DataFrame.from_dict({\n    'Id': test_id,\n    'SalePrice': predictions\n})\ndf_predictions","8bf06c8f":"df_predictions.to_csv('submission.csv', index=False)","5ae38619":"# House Prices - Advanced Regression Technique"}}