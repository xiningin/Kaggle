{"cell_type":{"3093e445":"code","099925f0":"code","f41c17ce":"code","48123215":"code","7f576a9d":"code","c88cef5a":"code","f85b28f5":"code","2be28ad7":"code","61477eee":"code","ab489349":"code","4821fbfd":"code","0f08daff":"code","bf3ff6f8":"code","38a02589":"code","61b65e1b":"code","e397040c":"code","88df49b8":"code","ddb69107":"code","97d7903e":"code","e1cb7a58":"code","b1895820":"code","a1a2df55":"code","e8784c18":"code","679cb4f2":"code","d8e487d6":"code","a512ca6b":"code","4df5e237":"code","f3459373":"markdown","d5d75beb":"markdown","04163d1f":"markdown","39a41621":"markdown","1eddb358":"markdown","e03a756f":"markdown","bc083c5c":"markdown","688aa3ba":"markdown","a21596cf":"markdown","e51f0ae3":"markdown","dc81cb4f":"markdown","4309132e":"markdown","a6c0c3db":"markdown","454abb2c":"markdown","23f8d806":"markdown","46b9afc0":"markdown"},"source":{"3093e445":"# imports used in the project\n\nimport zipfile\nimport numpy as np \nimport scipy as sp \nimport matplotlib as mpl\nimport matplotlib.cm as cm \nimport matplotlib.pyplot as plt\nimport pandas as pd \npd.set_option('display.width', 500)\npd.set_option('display.max_columns', 100)\npd.set_option('display.notebook_repr_html', True)\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom collections import Counter\n","099925f0":"# plots descriptions\n#Can be googled to find optimum style.\n\nplt.style.use(['dark_background', 'bmh'])\nplt.rc('axes', facecolor='k')\nplt.rc('figure', facecolor='k')\nplt.rc('figure', figsize=(5,5))","f41c17ce":"# Read the data from CSV files into pandas data frame\n\ndf_events = pd.read_csv(\"..\/input\/football-events\/events.csv\")\ndf_game_info = pd.read_csv(\"..\/input\/football-events\/ginf.csv\")","48123215":"# Encode the data into respective data frames\n\nencoding = pd.read_table('..\/input\/football-events\/dictionary.txt', delim_whitespace=False, names=('num','events'))\nevent_type=encoding[1:13]\nevent_type_2=encoding[14:18]\nside=encoding[19:21]\nshot_place=encoding[22:35]\nshot_outcome=encoding[36:40]\nlocation=encoding[41:60]\nbodypart=encoding[61:64]\nassist_method=encoding[65:70]\nsituition=encoding[71:75]","7f576a9d":"# Manually convert the dictionary.txt to python dictionaries\n\nevent_types = {1:'Attempt', 2:'Corner', 3:'Foul', 4:'Yellow card', 5:'Second yellow card', 6:'Red card', 7:'Substitution', 8:'Free kick won', 9:'Offside', 10:'Hand ball', 11:'Penalty conceded'}\nevent_types2 = {12:'Key Pass', 13:'Failed through ball', 14:'Sending off', 15:'Own goal'}\nsides = {1:'Home', 2:'Away'}\nshot_places = {1:'Bit too high', 2:'Blocked', 3:'Bottom left corner', 4:'Bottom right corner', 5:'Centre of the goal', 6:'High and wide', 7:'Hits the bar', 8:'Misses to the left', 9:'Misses to the right', 10:'Too high', 11:'Top centre of the goal', 12:'Top left corner', 13:'Top right corner'}\nshot_outcomes = {1:'On target', 2:'Off target', 3:'Blocked', 4:'Hit the bar'}\nlocations = {1:'Attacking half', 2:'Defensive half', 3:'Centre of the box', 4:'Left wing', 5:'Right wing', 6:'Difficult angle and long range', 7:'Difficult angle on the left', 8:'Difficult angle on the right', 9:'Left side of the box', 10:'Left side of the six yard box', 11:'Right side of the box', 12:'Right side of the six yard box', 13:'Very close range', 14:'Penalty spot', 15:'Outside the box', 16:'Long range', 17:'More than 35 yards', 18:'More than 40 yards', 19:'Not recorded'}\nbodyparts = {1:'right foot', 2:'left foot', 3:'head'}\nassist_methods = {1:'Pass', 2:'Cross', 3:'Headed pass', 4:'Through ball'}\nsituations = {1:'Open play', 2:'Set piece', 3:'Corner', 4:'Free kick'}","c88cef5a":"## Map the leagues' names to their popular names for easier understanding\nleagues = {'E0': 'Premier League', 'SP1': 'La Liga',\n          'I1': 'Serie A', 'F1': 'League One', 'D1': 'Bundesliga'}\n\n## Map them to events\ndf_game_info.league = df_game_info.league.map(leagues)","f85b28f5":"# Map the dictionaries onto the events dataframe\n\ndf_events['event_type'] =   df_events['event_type'].map(event_types)\ndf_events['event_type2'] =  df_events['event_type2'].map(event_types2)\ndf_events['side'] =         df_events['side'].map(sides)\ndf_events['shot_place'] =   df_events['shot_place'].map(shot_places)\ndf_events['shot_outcome']=  df_events['shot_outcome'].map(shot_outcomes)\ndf_events['location'] =     df_events['location'].map(locations)\ndf_events['bodypart'] =     df_events['bodypart'].map(bodyparts)\ndf_events['assist_method']= df_events['assist_method'].map(assist_methods)\ndf_events['situation'] =    df_events['situation'].map(situations)","2be28ad7":"# Merge other dataset to have country, league, date and season\ndf_events = df_events.merge(df_game_info ,how = 'left')","61477eee":"df_game_info.season = df_game_info.season.astype('category')\ndf_game_info.league = df_game_info.league.astype('category')\ndf_game_info.country = df_game_info.country.astype('category')","ab489349":"df_game_info.league.unique()","4821fbfd":"assist_method","0f08daff":"# Function to calculate missing values by column# Funct \ndef missing_values_table(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","bf3ff6f8":"missing_values_table(df_events)","38a02589":"# Fill the required features with new class 'unknown'\ndf_events.shot_place.fillna('UNK', inplace= True)\ndf_events.player.fillna('UNK', inplace= True)\ndf_events.shot_outcome.fillna('UNK', inplace= True)\ndf_events.bodypart.fillna('UNK', inplace= True)\ndf_events.location.fillna('UNK', inplace= True)\ndf_events.assist_method.fillna('UNK', inplace= True);","61b65e1b":"df_events.info()","e397040c":"# Notice that a lot of the floats and ints are in fact categoricals\n# We can fix this with Pandas' astype function\ncategoricals = ['id_odsp', 'event_type', 'event_team', 'opponent', 'shot_place', 'shot_outcome', 'location', 'bodypart', 'assist_method', 'situation', 'side']\nd = dict.fromkeys(categoricals,'category')\ndf_events = df_events.astype(d)\ndf_events['is_goal'] = df_events['is_goal'].astype('bool') # this is a bool, we can fix that too while we're at it","88df49b8":"df_events.info()","ddb69107":"df_unique_events = df_events.drop_duplicates() ","97d7903e":"# Get the yellow cards data\n\nfirst_yellow_cards = df_unique_events [df_unique_events ['event_type'] == ('Yellow card')] # select first yellow cards\nsecond_yellow_cards= df_unique_events [df_unique_events ['event_type'] == ('Second yellow card')] # select second yellow cards\nred_cards = df_unique_events [df_unique_events['event_type'] == ('Red card')] # select red cards\nyellow_cards= df_unique_events [df_unique_events ['event_type'] == ('Yellow card' or 'Second yellow card')]\n\ncard_frames = [red_cards, yellow_cards]\nall_cards = pd.concat(card_frames)\n","e1cb7a58":"# Get the yellow cards against time of playing the game\nfig = plt.figure(figsize=(14,8))\nplt.hist(red_cards.time, 100, color=\"red\")\nplt.xlabel(\"Minute  of the Game\")\nplt.ylabel(\"Red Cards\")\nplt.title(\"When Red Cards Occur\")\n\n","b1895820":"# plot the second yellow cards against time of playing the game\n\nfig2 = plt.figure(figsize=(14,8))\nplt.hist(first_yellow_cards.time, 100, color=\"yellow\")\nplt.xlabel(\"Minute of the Game\")\nplt.ylabel(\"First Yellow Cards\")\nplt.title(\"When First Yellow Cards Occur\")\n\n","a1a2df55":"# plot the red cards against time of playing the game\n\nfig3 = plt.figure(figsize=(14,8))\nplt.hist(second_yellow_cards.time, 100, color=\"yellow\")\nplt.xlabel(\"Minute of the Game\")\nplt.ylabel(\"Second Yellow Cards\")\nplt.title(\"When Second Yellow Cards Occur\")\n\n","e8784c18":"# Get the yellow cards against time of playing the game\nfig4 = plt.figure(figsize=(14,8))                                                            \nplt.hist(all_cards.time, 100, color=\"orange\")\nplt.xlabel(\"Minute  of the Game\")\nplt.ylabel(\"Cards served\")\nplt.title(\"When cards are served\")\n","679cb4f2":"yellow_league = pd.crosstab(index=yellow_cards.event_type, columns=yellow_cards.league)\nyellow_league.plot(kind='bar', figsize=(14,14))\n","d8e487d6":"red_league = pd.crosstab(index=red_cards.event_type, columns=red_cards.league)\nred_league .plot(kind='bar', figsize=(14,14))","a512ca6b":"player_red_card = (red_cards[['player', 'league']])\nleague_one = player_red_card [player_red_card.league == 'League One'].groupby('player').count()\nLa_Liga = player_red_card [player_red_card.league == 'La Liga'].groupby('player').count()\nBundesliga = player_red_card [player_red_card.league == 'Bundesliga'].groupby('player').count()\nSerie_A = player_red_card [player_red_card.league == 'Serie A'].groupby('player').count()\nPremier_League = player_red_card [player_red_card.league == 'Premier League'].groupby('player').count()\n\n\nplayer_red_card_yellow = (yellow_cards[['player', 'league']])\nleague_one_yellow = player_red_card_yellow [player_red_card_yellow.league == 'League One'].groupby('player').count()\nLa_Liga_yellow = player_red_card_yellow [player_red_card_yellow.league == 'La Liga'].groupby('player').count()\nBundesliga_yellow = player_red_card_yellow[player_red_card_yellow.league == 'Bundesliga'].groupby('player').count()\nSerie_A_yellow = player_red_card_yellow[player_red_card_yellow.league == 'Serie A'].groupby('player').count()\nPremier_League_yellow = player_red_card_yellow[player_red_card_yellow.league == 'Premier League'].groupby('player').count()\n\nleague_one.columns=['league_one_red']\nLa_Liga.columns=['La_Liga_red']\nBundesliga.columns=['Bundesliga_red']\nSerie_A.columns=['Serie_A_red']\nPremier_League.columns=['Premier_League_red']\n\nleague_one_yellow.columns=['league_one_yellow']\nLa_Liga_yellow.columns=['La_Liga_yellow_']\nBundesliga_yellow.columns=['Bundesliga_yellow']\nSerie_A_yellow.columns=['Serie_A_yellow']\nPremier_League_yellow.columns=['Premier_League_yellow']\n\ncards_per_league = pd.concat([league_one, La_Liga, Bundesliga, Serie_A,  Premier_League,league_one_yellow, \\\n                              La_Liga_yellow, Bundesliga_yellow, Serie_A_yellow,  Premier_League_yellow]).fillna(0)\n","4df5e237":"goals=df_unique_events[df_unique_events[\"is_goal\"]==1]\n\nfig4=plt.figure(figsize=(14,8))\nplt.hist(goals.time,width=1,bins=100,color=\"green\")   #100 so 1 bar per minute\nplt.xlabel(\"Minutes\")\nplt.ylabel(\"Number of goals\")\nplt.title(\"Number of goals against Time during match\")","f3459373":"### Graph to show when red cards are most likely to be served","d5d75beb":"### Graph to show when the second yellow cards are most likely to be served","04163d1f":"### Import the data from CSV ","39a41621":"### Handle Missing Values","1eddb358":"### Get cards served per league","e03a756f":"### Generally when are cards likely to be served","bc083c5c":"### When are goals most likely to be scored","688aa3ba":"# Data Processing and Engineering ","a21596cf":"### Create the cards dataframes","e51f0ae3":"# Data Analysis and Visualisations","dc81cb4f":"### Distribution of serving of yellow cards as per the leagues","4309132e":"### Graph to show when the yellow cards are most likely to be served","a6c0c3db":"### Distibution of red cards as per the league","454abb2c":"# Football Events and Game Information","23f8d806":"### Imports and initializations","46b9afc0":"## Data Engineering"}}