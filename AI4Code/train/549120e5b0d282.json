{"cell_type":{"dfbac3bd":"code","5e070529":"code","3adda92d":"code","516419c0":"code","d6402502":"code","d089eeca":"code","5505c268":"code","93deb6b1":"code","ae81009d":"code","02314e2a":"code","5b51cc50":"code","3c9c0e58":"code","e4ae2b44":"code","c226fe57":"code","1191c5ba":"code","b7e4dfb2":"code","9469e63e":"code","68d10d14":"code","9d617f38":"code","26788000":"code","fb260f8f":"code","a2c3f46f":"code","2a9375b3":"code","6e93776e":"code","2f06637c":"code","73aafb64":"code","97653748":"code","120b0031":"code","5e4c1638":"code","e0c41eb7":"code","65b2c300":"code","32c85550":"code","2e13b01e":"code","80d0e813":"code","e9ef736d":"code","f3410313":"code","d9fff133":"code","1f580e49":"code","194585dc":"code","0dda0dbf":"code","2bffd291":"code","6fc8c125":"code","69988100":"code","392657f1":"code","e9192d22":"code","16f08e00":"code","6ba9a848":"code","f69f7d4f":"code","23e8ed20":"code","548b5301":"code","176423b2":"code","402f4afc":"code","3cf6be48":"code","90199614":"code","dc82e565":"code","f18a3a77":"markdown","babda079":"markdown","e80c0724":"markdown","8380b6e8":"markdown","3d8cc839":"markdown","c5e06181":"markdown","d89257bb":"markdown","0fa28c41":"markdown","2671d102":"markdown","e34a68eb":"markdown","2ba2f226":"markdown","fbda06cf":"markdown","83e74475":"markdown"},"source":{"dfbac3bd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import accuracy_score,mean_squared_error,roc_curve,roc_auc_score,classification_report,r2_score,confusion_matrix\n\n# Visualization Seaborn & Matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Plotly for interactive graphics \nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n#Disabling the warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5e070529":"df = pd.read_csv('\/kaggle\/input\/diabetes\/diabetes.csv')","3adda92d":"df.head()","516419c0":"df.info()","d6402502":"cdf = df.copy()","d089eeca":"cdf.Pregnancies.value_counts()","5505c268":"plt.figure(figsize = (12,6)) \nsns.heatmap(cdf.corr(),robust=True,fmt='.1g',linewidths=1.3,linecolor = 'gold', annot=True,);","93deb6b1":"cdf.nunique()","ae81009d":"cdf.describe().T","02314e2a":"print(\"satir ve sutun=\",cdf.shape)\nprint(\"boyut sayisi = \",cdf.ndim)\nprint(\"boyut sayisi = \",cdf.ndim)","5b51cc50":"sns.countplot(cdf.Outcome);","3c9c0e58":"import missingno as msno\nmsno.matrix(cdf);","e4ae2b44":"x = cdf.drop([\"Outcome\"],axis = 1) #independent value","c226fe57":"y = cdf.Outcome","1191c5ba":"x = (x-np.min(x))\/(np.max(x)-np.min(x)).values","b7e4dfb2":"x.head()","9469e63e":"from sklearn.model_selection import train_test_split,cross_val_score,ShuffleSplit,GridSearchCV\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state = 42)","68d10d14":"from sklearn.linear_model import LogisticRegression","9d617f38":"log_reg = LogisticRegression().fit(x_train,y_train)\nlog_reg","26788000":"log_reg.intercept_\nlog_reg.coef_","fb260f8f":"y_pred = log_reg.predict(x_test)\ny_pred[0:10]","a2c3f46f":"y_probs = log_reg.predict_proba(x_test)[:,1]","2a9375b3":"y_pred = [1 if i >0.45 else 0 for i in y_probs]\ny_pred[:10]","6e93776e":"log_score = accuracy_score(y_test,y_pred)\nprint (\"log score=\",log_score)","2f06637c":"from sklearn.metrics import accuracy_score\n","73aafb64":"log_score = accuracy_score(y_test,y_pred)\nprint (\"log score=\",log_score)","97653748":"confusion_matrix(y_test,y_pred)","120b0031":"y_pred = [1 if i >0.52 else 0 for i in y_probs]\ny_pred[:10]\n","5e4c1638":"from sklearn.ensemble import RandomForestClassifier","e0c41eb7":"r_for = RandomForestClassifier().fit(x_train,y_train)\nr_for","65b2c300":"y_pred = r_for.predict(x_test)","32c85550":"rf_score = accuracy_score(y_test,y_pred)\nrf_score","2e13b01e":"Importance = pd.DataFrame({\"Importance\": r_for.feature_importances_*100},\n                         index = x_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"g\")\n\nplt.xlabel(\"De\u011fi\u015fken \u00d6nem D\u00fczeyleri\")","80d0e813":"from sklearn.neighbors import KNeighborsClassifier","e9ef736d":"knn = KNeighborsClassifier(n_neighbors=3).fit(x_train,y_train)\nknn","f3410313":"y_pred = knn.predict(x_test)","d9fff133":"knn_score = accuracy_score(y_test,y_pred)\nknn_score","1f580e49":"confusion_matrix(y_test,y_pred)","194585dc":"knn_params = {\"n_neighbors\":np.arange(1,50)}","0dda0dbf":"knn =KNeighborsClassifier()\nknn_cv = GridSearchCV(knn,knn_params,cv = 10)\nknn_cv = knn_cv.fit(x_train,y_train)","2bffd291":"print(\"Best Score:\"+str(knn_cv.best_score_))\nprint(\"Best Parameters:\"+str(knn_cv.best_params_))","6fc8c125":"knn_final = KNeighborsClassifier(n_neighbors=1)\nknn_final.fit(x_train,y_train)","69988100":"y_pred = knn_final.predict(x_test)\nknn_fscore = accuracy_score(y_test,y_pred)\nknn_fscore","392657f1":"confusion_matrix(y_test,y_pred)","e9192d22":"from sklearn.svm import SVC","16f08e00":"svm_model = SVC(C=5,degree=9,kernel = 'poly').fit(x_train,y_train)\nsvm_model","6ba9a848":"y_pred = svm_model.predict(x_test)\nsvm_score = accuracy_score(y_test,y_pred)\nsvm_score","f69f7d4f":"confusion_matrix(y_test,y_pred)","23e8ed20":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(x_train, y_train)\nnb_model","548b5301":"nb_model.predict(x_test)[:10]","176423b2":"nb_model.predict_proba(x_test)[0:10]  \n","402f4afc":"y_pred = nb_model.predict(x_test)\nnb_score = accuracy_score(y_test, y_pred)\nprint(\"NB_class_SCORE = \", nb_score)  ","3cf6be48":"cross_val_score(nb_model, x_test, y_test, cv = 20).mean()  ","90199614":"indexx = [\"Log\",\"RF\",\"KNN\",\"SVM\",\"NB\"]\nregressions = [log_score,rf_score,knn_fscore,svm_score,nb_score]\n\nplt.figure(figsize=(8,6))\nsns.barplot(x=indexx,y=regressions)\nplt.xticks()\nplt.title('Model Comparision',color = 'orange',fontsize=20);\n","dc82e565":"indexx = [\"Log\",\"RF\",\"KNN\",\"SVM\",\"NB\"]\nregressions = [log_score,rf_score,knn_fscore,svm_score,nb_score]\n\nimport plotly.express as px\n\nfig = px.pie(df, values=regressions, names=indexx, title='Regression Score Results')\nfig.show()","f18a3a77":"### Model Selection","babda079":"## 2) Random Forest","e80c0724":"## 4) SVM - Support Vector Machine","8380b6e8":"### Normalization","3d8cc839":"### Model Tuning","c5e06181":"#### Accuracy Score","d89257bb":"### PCA,Standart Scaler, Preprocessing etc.","0fa28c41":"## Train-test splitting","2671d102":"## 3) KNN model","e34a68eb":"#### Importance","2ba2f226":"## 5) Gaussian Naive Bayes Model","fbda06cf":"### Proba values - probability","83e74475":"# 1) Logistic Regression"}}