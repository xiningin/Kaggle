{"cell_type":{"9e0759db":"code","b98737cc":"code","72f94187":"code","ab6a6c50":"code","486d369f":"code","b0185ad2":"code","8b9f04a6":"code","190b4c45":"code","a8e5c7fd":"code","43be15e4":"code","f6c898b3":"code","7ba1eb07":"code","bb3cdb65":"code","7845eb55":"code","c7741312":"code","47d551f7":"code","a9c281c7":"code","7df49ef6":"code","a36bfc34":"code","c51a0fe9":"code","c19c4f0c":"code","493963a0":"code","bfc8fb78":"code","b1dfa1bf":"code","f51f745d":"code","d5c5fb5d":"code","1a275cc6":"code","86a8358b":"code","1d0d54fa":"code","7d788ca4":"code","61cc487d":"code","88c6e6db":"code","374d84d4":"code","e8e9fbfb":"code","26477b06":"code","7bdd42e7":"code","c6af3f5d":"code","cadae94d":"code","0b3f9432":"code","ae6baa49":"code","8865fad3":"code","dda91ef9":"code","b6e3f859":"code","06ca69e1":"code","13fb8b1f":"code","d47ee13c":"markdown","a3b957f0":"markdown","ae0fdf02":"markdown"},"source":{"9e0759db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b98737cc":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n","72f94187":"df.shape","ab6a6c50":"df.head()","486d369f":"df.info()","b0185ad2":"# check missing value\ndf.isnull().sum()","8b9f04a6":"import seaborn as sns","190b4c45":"# missing data visulisation\n\nsns.heatmap(df.isnull())","a8e5c7fd":"# found mising value for Age and Cabin, let fix the missing value for age columns\n# check average age as per class\nsns.boxplot(\"Pclass\",\"Age\",data = df)","43be15e4":"# as per finding average age of traveler Pclass 1 travel has 37 average age, Pclass 2 has 29 and Pclass has 24\n# replace missing value as per Pclass\n\ndef impute_Age (cols):\n    \n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1:\n            return 37\n        \n        elif Pclass == 2:\n            return 29\n        \n        else:\n            return 24\n        \n    else:\n        return Age","f6c898b3":"df[\"Age\"] = df[[\"Age\",\"Pclass\"]].apply(impute_Age, axis =1)","7ba1eb07":"# check missing value, no missing value for Age\nsns.heatmap(df.isnull())","bb3cdb65":"# found so many missing value for Cabin, so i drop the Cabin Columns\n\ndf.drop(\"Cabin\",axis = 1, inplace = True)","7845eb55":"sns.heatmap(df.isnull()) # no missing Value","c7741312":"sns.pairplot(df)","47d551f7":"sns.countplot(\"Survived\", data = df)","a9c281c7":"sns.countplot(\"Survived\",hue = \"Sex\", data = df)","7df49ef6":"sns.countplot(\"Survived\", hue = \"Pclass\",data = df)","a36bfc34":"sns.distplot(df[\"Age\"], kde = False)","c51a0fe9":"sns.countplot(\"SibSp\", data = df)","c19c4f0c":"df[\"Fare\"].hist()","493963a0":"sns.boxplot(\"Pclass\",\"Age\", data = df)","bfc8fb78":"df.head()","b1dfa1bf":"# change categorical value in number for Embarked and Sex\nembark = pd.get_dummies(df[\"Embarked\"], drop_first=True)\nsex = pd.get_dummies(df[\"Sex\"], drop_first=True)","f51f745d":"df.drop([\"Name\",\"Embarked\",\"Sex\",\"Ticket\"], axis = 1, inplace = True)","d5c5fb5d":"df.head()","1a275cc6":"#df.drop([\"PassengerId\"], axis =1, inplace = True)","86a8358b":"df.head()","1d0d54fa":"df1 = pd.concat([df,sex,embark], axis = 1)","7d788ca4":"df1.head()","61cc487d":"train_data = df1.drop([\"Survived\"],axis =1)\ntest_data  = df1[\"Survived\"]","88c6e6db":"train_data.head()","374d84d4":"test_data.head()","e8e9fbfb":"from sklearn.model_selection import train_test_split","26477b06":"x_train, x_test,y_train,y_test = train_test_split(train_data,test_data,test_size=0.30,random_state=121)","7bdd42e7":"from sklearn.linear_model import LogisticRegression","c6af3f5d":"logmodel = LogisticRegression()\nlogmodel.fit(x_train,y_train)","cadae94d":"predictions = logmodel.predict(x_test)","0b3f9432":"from sklearn.metrics import confusion_matrix","ae6baa49":"accuracy = confusion_matrix(y_test,predictions)","8865fad3":"accuracy","dda91ef9":"from sklearn.metrics import accuracy_score","b6e3f859":"accuracy_score = accuracy_score(y_test,predictions)","06ca69e1":"accuracy_score","13fb8b1f":"output = pd.DataFrame({'PassengerId': x_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","d47ee13c":"- Add Sex and emparked dummies value","a3b957f0":"- drop columns Name, Sex, Embarked,Ticket","ae0fdf02":"# Data visualization"}}