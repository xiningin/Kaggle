{"cell_type":{"3a428bbf":"code","4602fcb8":"code","de46ba63":"code","97fe4376":"code","b812b751":"code","0c2f4c26":"code","675e62bb":"code","b695825d":"code","d51a6019":"code","869b3b20":"code","910354e3":"code","a3b45d81":"code","d9f54c32":"code","f76b6e68":"code","79ffb997":"code","09410d72":"code","a9879998":"code","07e20c03":"code","a4cce536":"code","35513adf":"code","d5b8e850":"code","85abef61":"code","a90e225c":"markdown","24441ba5":"markdown","d5522eab":"markdown","eb82f846":"markdown","eb1219dc":"markdown","3f66582e":"markdown","50787eda":"markdown","276f90df":"markdown","1c8bc735":"markdown","7ee69fca":"markdown","f26221aa":"markdown"},"source":{"3a428bbf":"#algebra\nimport pandas as pd\npd.options.display.float_format = '{:,.12f}'.format\n#I want to see all features from the dataset given. But be careful, sometimes the output can be too large!\npd.options.display.max_rows = None \npd.set_option('max_colwidth', 260)\nimport numpy as np\n\n#data preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\n\n#models\nimport optuna\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\n\n#Visual\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom matplotlib import ticker as tkr\n#import plotly.express as px","4602fcb8":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')","de46ba63":"print('The train data has {} rows and {} columns'.format(train.shape[0], train.shape[1]))\nprint('The test data has {} rows and {} columns'.format(test.shape[0], test.shape[1]))","97fe4376":"train.info()","b812b751":"test.info()","0c2f4c26":"#Color scheme picked from https:\/\/www.kaggle.com\/usharengaraju\/tensorflow-decision-forests-w-b\ntrain.loc[:, 'f0':].describe().T.style.bar(subset=['mean'], color=\"#e9c46a\")\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='Pastel1')","675e62bb":"train.head(15)","b695825d":"corr_matrix = train.corr()[['target']].sort_values(by = ['target'], ascending = False).drop(['target']).T\ncorr_matrix.style.background_gradient(cmap = 'coolwarm').set_precision(2)","d51a6019":"missing = pd.concat([train.isna().sum().sort_values(ascending = False), train.dtypes], axis=1, keys=['Total', 'Type'])\nmissing[missing['Total'] > 0]","869b3b20":"missing = pd.concat([test.isna().sum().sort_values(ascending = False), test.dtypes], axis=1, keys=['Total', 'Type'])\nmissing[missing['Total'] > 0]","910354e3":"nrows = 20\nncols = 5\nfig, axes = plt.subplots(nrows, ncols, figsize = (25,75))\naxes = axes.flatten()\nfor idx, ax in enumerate(axes):\n    sns.kdeplot(data = train, x = f'f{idx}', \n                fill = True, \n                ax = ax)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.spines['left'].set_visible(False)\n    ax.set_title(f'f{idx}', loc = 'right', weight = 'bold', fontsize = 10)\n    #plt.text(f'f{idx}')\n\n\nfig.tight_layout()\nplt.show()","a3b45d81":"X = train.drop(columns = ['id', 'target'])\nY = train['target']\n\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, train_size = 0.85, random_state = 42)\nX_test = test.drop(columns = ['id'])","d9f54c32":"import h2o\nfrom h2o.automl import H2OAutoML","f76b6e68":"h2o.init()\n\nh2o_train = h2o.H2OFrame(train)\nh2o_test = h2o.H2OFrame(test)\n\nh2o_train['target'] = h2o.H2OFrame(Y.tolist()).asfactor()","79ffb997":"feature_columns = [x for x in h2o_train.columns if x != 'target']\ntarget_column = 'target'","09410d72":"aml = H2OAutoML(\n    max_models = 50,\n    seed = 2021, \n    max_runtime_secs = 8*3600,\n    nfolds = 5,\n    #exclude_algos = ['GBM']\n)\n\naml.train(\n    x = feature_columns, \n    y = target_column, \n    training_frame = h2o_train)","a9879998":"lb = aml.leaderboard\nlb.head(rows = lb.nrows)","07e20c03":"model_ids = list(aml.leaderboard['model_id'].as_data_frame().iloc[:, 0])\nse = h2o.get_model(model_ids[0])\nmetalearner = h2o.get_model(se.metalearner()['name'])\nmetalearner.std_coef_plot()","a4cce536":"preds = aml.predict(h2o.H2OFrame(test[feature_columns]))\npreds_df = h2o.as_list(preds)","35513adf":"preds_df['id'] = test['id']\npreds_df = preds_df.rename(columns = {'p1': 'target'}).filter(items = ['target', 'id'])","d5b8e850":"preds_df.to_csv('claim_prediction.csv', index = False)","85abef61":"h2o.save_model(aml.leader, path = '.\/suharkov_h2o_model_bin')","a90e225c":"# 1. Load libraries and data","24441ba5":"### There are hats and peaks. Last are skewed and reduce the desired metric.","d5522eab":"https:\/\/www.h2o.ai\/blog\/a-deep-dive-into-h2os-automl\/","eb82f846":"# 3. Models","eb1219dc":"# 4. Submission","3f66582e":"### 2.2. Missing values","50787eda":"### 2.3. Data distribution","276f90df":"### 3.1. H2O","1c8bc735":"# 2. EDA","7ee69fca":"### 2.1. Correlation, first look","f26221aa":"# Save model"}}