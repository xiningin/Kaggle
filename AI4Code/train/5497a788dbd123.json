{"cell_type":{"48cd7808":"code","fa231544":"code","78688924":"code","da1c1198":"code","23c6ec4d":"code","1e3e5f5b":"code","47c7c87e":"code","ef6352dc":"code","e059bdef":"code","9abc377c":"code","7a100a63":"code","9a2c5e3a":"code","0e8a9beb":"code","4162ee02":"code","8770b87a":"code","1ff255a4":"code","2597dffe":"markdown","eb57616f":"markdown","b89d6c7b":"markdown","330de5a0":"markdown"},"source":{"48cd7808":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.preprocessing import MinMaxScaler # Min Max Scaler to reduce the data to a 0-1 value\nfrom sklearn.preprocessing import StandardScaler\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.utils import to_categorical\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fa231544":"birds = pd.read_csv(\"\/kaggle\/input\/birds-songs-numeric-dataset\/train.csv\")\nbirds.head()","78688924":"test = pd.read_csv(\"\/kaggle\/input\/birds-songs-numeric-dataset\/test.csv\")\ntest.head()","da1c1198":"birds.describe()","23c6ec4d":"for col in birds:\n    if(birds[col].dtype == object):\n        print(birds[col].describe())","1e3e5f5b":"birds = birds.sample(frac=1).reset_index(drop=True)\nbirds.head()","47c7c87e":"y_birds = birds['species']\nbirds.drop( ['id', 'genus', 'species'], axis=1, inplace=True)\n\ny_test = test['species']\ntest.drop(['id', 'genus', 'species'], axis=1, inplace=True)\ny_birds","ef6352dc":"classes = y_birds.unique()\nclasses","e059bdef":"y_birds = y_birds.astype(\"category\")\ny_test = y_test.astype(\"category\")\ny_birds","9abc377c":"birds.shape","7a100a63":"y_birds.cat.codes","9a2c5e3a":"ss = StandardScaler()\nbirds_scaled = pd.DataFrame(ss.fit_transform(birds),columns = birds.columns)\nbirds_scaled.head()","0e8a9beb":"input_shape = (169, )\n\n# definicion del modelo\nmodel = keras.Sequential(\n    [\n        keras.Input(shape=input_shape),\n        layers.Flatten(),\n        layers.Dense(256, activation=\"relu\"),\n        layers.Dense(512, activation=\"relu\"),\n        layers.Dense(1024, activation=\"relu\"),\n        layers.Dense(512, activation=\"relu\"),\n        layers.Dense(256, activation=\"relu\"),\n        # Cree mas capas Dense aqui: \n        # layers.Dense(XX, activation=\"AA\"),\n        \n        layers.Dense(len(classes), activation=\"softmax\"),\n    ]\n)\n\n# Construir el modelo y ver la arquitectura\nmodel.build(input_shape)\nmodel.summary()","4162ee02":"model.compile(loss='sparse_categorical_crossentropy', optimizer='adamax', metrics=['accuracy'])","8770b87a":"history = model.fit(x=birds_scaled, y=y_birds.cat.codes, epochs=20, batch_size=5000, verbose=1, validation_split=0.3, shuffle=True)","1ff255a4":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nxepochs = [n for n in range(len(history.history['accuracy']))]\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Accuracy over time\", \"Loss over time\"))\n\nfor metric in ['accuracy', 'val_accuracy']:\n    fig.add_trace(go.Scatter(x=xepochs, y=history.history[metric], mode='lines+markers', name=metric), row=1, col=1)\n\nfor metric in ['loss', 'val_loss']:\n    fig.add_trace(go.Scatter(x=xepochs, y=history.history[metric], mode='lines+markers', name=metric), row=1, col=2)\n\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=1)\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=2)\n\nfig.update_yaxes(title_text=\"Accuracy\", row=1, col=1)\nfig.update_yaxes(title_text=\"Loss\", row=1, col=2)\n\nfig.show()","2597dffe":"# Imports","eb57616f":"# Load data","b89d6c7b":"# Data analysis","330de5a0":"# Neural Network"}}