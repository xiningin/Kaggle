{"cell_type":{"797c3c5a":"code","82bdde69":"code","633ab4e0":"code","edd7856b":"code","d4cd054c":"code","837ed6f3":"code","3cf69a5c":"code","22520d84":"code","6111d79d":"code","d2dd1fb9":"code","8db826df":"code","8cd44012":"code","ae7e3a0b":"code","f5030976":"code","81db4071":"code","73f0fe73":"code","93d8276e":"code","7fc75d02":"code","56a9827f":"code","9896d170":"code","f253fccc":"code","4d6926fc":"code","fa74de65":"code","3c56b8ce":"code","133904fb":"code","0dba56ba":"code","95e871b9":"code","00258f9b":"code","d4d539c2":"code","3cdb9bbc":"markdown","6042c643":"markdown","750ada58":"markdown","2918033f":"markdown","f36bada6":"markdown","aa559f81":"markdown","6fbc0d85":"markdown","42a4a704":"markdown","e2f7dd26":"markdown","f0a243fb":"markdown","87209531":"markdown","ca64ba4b":"markdown","8844507d":"markdown","1787e367":"markdown","75b4f970":"markdown","f61de08a":"markdown","cd30e2a2":"markdown"},"source":{"797c3c5a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","82bdde69":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","633ab4e0":"#Reading train file:\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv')\n#Reading test file:\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv')\n#reading sample submission\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/sample_submission.csv')\n","edd7856b":"train","d4cd054c":"test","837ed6f3":"submission","3cf69a5c":"train.isnull().sum().sum()","22520d84":"test.isnull().sum().sum()","6111d79d":"import matplotlib.pyplot as plt\n\ntrain.groupby('target').target.count().plot.bar(ylim=0)\nplt.show()\n","d2dd1fb9":"classes = {\"Class_1\": 1, \"Class_2\": 2, \"Class_3\": 3, \"Class_4\":4}\n\ntrain.target = train.target.map(classes)\ntrain.target","8db826df":"target = train.target\n\ntrain.drop('target', axis = 1, inplace = True)\ntrain","8cd44012":"combi = train.append(test)\ncombi","ae7e3a0b":"combi.drop('id', axis = 1, inplace = True)\ncombi","f5030976":"combi = (combi.max() - combi) \/ (combi.max() - combi.min())\ncombi","81db4071":"y = target\nX = combi[: len(train)]\nX_test = combi[len(train) :]","73f0fe73":"y.shape","93d8276e":"X.shape","7fc75d02":"X_test.shape","56a9827f":"pip install smote-variants","9896d170":"import smote_variants as sv\n\noversampler= sv.MulticlassOversampling(sv.distance_SMOTE())\nX_samp, y_samp= oversampler.sample(X, y)","f253fccc":"X_samp.shape, y_samp.shape","4d6926fc":"#split train set for testing\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X_samp, y_samp, test_size=0.10, random_state=1, stratify=y_samp)\nX_train.shape, y_train.shape, X_val.shape, y_train.shape, X_test.shape","fa74de65":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(C=100, class_weight= 'balanced', multi_class='multinomial', random_state=1, max_iter=20000).fit(X_train, y_train)\nmodel.score(X_train, y_train)","3c56b8ce":"y_pred = model.predict(X_val)\nmodel.score(X_val, y_val)","133904fb":"y_pred","0dba56ba":"prediction = model.predict(X_test)\nprediction.shape","95e871b9":"predictions = pd.get_dummies(prediction)\npredictions.columns=['Class_1', 'Class_2', 'Class_3', 'Class_4']\npredictions","00258f9b":"submission.Class_1 = predictions.Class_1\nsubmission.Class_2 = predictions.Class_2\nsubmission.Class_3 = predictions.Class_3\nsubmission.Class_4 = predictions.Class_4","d4d539c2":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission\n","3cdb9bbc":"Define X and y","6042c643":"Map target","750ada58":"Normalise combi","2918033f":"Combine train and test","f36bada6":"Analyse target","aa559f81":"Prepare submission","6fbc0d85":"Select model","42a4a704":"Drop target from train","e2f7dd26":"Drop ID from combi","f0a243fb":"This is a synthetic dataset that is based on a real dataset. These datasets are based on Kaggle's May 2021 tabular competition.","87209531":"Read the files","ca64ba4b":"One hot encode prediction","8844507d":"Predict on validation set","1787e367":"SMOTE","75b4f970":"Split into training and validation","f61de08a":"Check for null values","cd30e2a2":"Predict on test set"}}