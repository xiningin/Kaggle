{"cell_type":{"1b6752ce":"code","8f21a3d2":"code","2df55cb8":"code","f13ecf60":"code","5cb7799d":"code","170cc085":"code","f1193fb9":"code","f89460db":"code","71774b05":"code","9980b661":"markdown"},"source":{"1b6752ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f21a3d2":"from sklearn import datasets, linear_model\nfrom scipy import linalg\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport requests","2df55cb8":"cols = ['City1', 'City2', 'Average Fare', 'Distance', 'Average weekly passengers',\n                   'market leading airline', 'market share', 'Average fare', 'Low price airline',\n                   'market share', 'price']","f13ecf60":"target_url = 'http:\/\/users.stat.ufl.edu\/~winner\/data\/airq402.dat'\n\nresponse = requests.get(target_url)","5cb7799d":"data_dat = response.text\n\ndata_list = data_dat.splitlines() \n\ndata_content = [e.split() for e in data_list] ","170cc085":"data = pd.DataFrame(data_content, columns = cols)\ndata.head()","f1193fb9":"data.columns = data.columns.str.replace(\" \",\"_\")","f89460db":"data.columns = data.columns.str.replace(\".\",\"_\")\ndata.head()","71774b05":"data.rename(columns={data.columns[7] : 'Average_fare_1'}, inplace=True)\ndata.head()\n\ncolumn_names = data.columns.values\ncolumn_names[9] = 'market_share_1'\ndata.columns = column_names\n\ndata.head()\n\n# Converting string of numbers (as a result of .split()) to floats\n\ndata['Average_Fare'] = data['Average_Fare'].astype(float)\ndata['Distance'] = data['Distance'].astype(float)\ndata['Average_weekly_passengers'] = data['Average_weekly_passengers'].astype(float)\ndata['market_share'] = data['market_share'].astype(float)\ndata['Average_fare_1'] = data['Average_fare_1'].astype(float)\ndata['market_share_1'] = data['market_share_1'].astype(float)\ndata['price'] = data['price'].astype(float)\n\n#Since there is not much difference between Average_Fare and Average_Fare_1\ndata1 = data.drop(['Average_fare_1'], axis = 1)\ndata1.head()\n\ndata1.describe()\n\ndata1.describe(include= ['O'])\n\ndata1.isnull().any()\n\n## EDA\n\nprint(data1['Average_Fare'].describe())\nplt.figure(figsize=(9, 8))\nsns.distplot(data1['Average_Fare'], color='b', bins=20, hist_kws={'alpha': 0.4});\n\n#skewed towards the right , with some outliers\n\ndata1_num = data1.select_dtypes(include = ['float64', 'int64'])\ndata1_num.head()\n\n### Numerical feature analysis:\n\ndata1_num_corr = data1_num.corr()['Average_Fare'][:-1] # -1 because the latest row is Average_Fare\ngolden_features_list = data1_num_corr[abs(data1_num_corr) > 0.5].sort_values(ascending=False)\nprint(\"There is {} strongly correlated values with Average_Fare:\\n{}\".format(len(golden_features_list), golden_features_list))\n\n#Plotting scatter plots of Independent Variable vs Dependent Variable.\n\nfor i in range(0, len(data1_num.columns), 6):\n    sns.pairplot(data=data1_num,\n                x_vars=data1_num.columns[i:i+5],\n                y_vars=['Average_Fare'])\n\n# we can see that out of these numerical features, distance, price, market_share share some relationship with the target variable\n\n# Average_weekly_passengers - data is scattered with huge outliers, and most data is concentrated within sum of 2500. Very random, no pattern\n\n# market_share1 seems to be uniformly distributed.\n\ncorr = data1_num.drop('Average_Fare', axis=1).corr() # Check for multicollinearity using heat map\nplt.figure(figsize=(12, 10))\n\nsns.heatmap(corr[(corr >= 0.5) | (corr <= -0.4)], \n            cmap=\"PiYG\", vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True);\n\n# the correlation between distance and price is highest 0.58\n# the correlation between distance and market_share is 2nd highest -0.53\n# the market_share and price however share a low correlation of -0.31 (so we will keep them both)\n# market_share_1 has a higher correlation 0.37 (>0.31) with distance as compared to market_share but still it is less\n# average_weekly_passengers doesn't have correlation with any of the features nor with the target variable\n\n### Categorical feature analysis:\n\ndata1_cat = data1.select_dtypes(include = ['object'])\ndata1_cat.head()\n\nx=data1.groupby(['City1', 'Average_Fare'], as_index = False).count().sort_values(by = 'Average_Fare',ascending = False)\nx.head()\n\nsns.barplot('City1', 'Average_Fare', data=np.round(data1,3), color=\"blue\")\nplt.show()\n\nsns.barplot('City2', 'Average_Fare', data=np.round(data1,3), color=\"blue\")\nplt.show()\n\nsns.barplot('market_leading_airline', 'Average_Fare', data=np.round(data1,3), color=\"blue\")\nplt.show()\n\nsns.barplot('Low_price_airline', 'Average_Fare', data=np.round(data1,3), color=\"blue\")\nplt.show()\n\n#Categorical variables have too many variables for City1 and City2, encoding is not an option for them\n\ndata1.head()\n\n## Check for outliers\n\n#Distance\nimport seaborn as sns\n \nsns.boxplot(data=data1.iloc[:,3], color=\"blue\")\n\n#Average weekly pass\nimport seaborn as sns\n \nsns.boxplot(data=data1.iloc[:,4], color=\"blue\")\n\n# huge no. of outliers\n\n#market_share\nimport seaborn as sns\n \nsns.boxplot(data=data1.iloc[:,6], color=\"blue\") \n\n## market_share1\nimport seaborn as sns\n \nsns.boxplot(data=data1.iloc[:,8], color=\"blue\")  \n\n#outlier treatment -  clubbing beyond P1 and P99 percentiles\n\ndist = data1_num['Distance'].values  #series to array \np1_dist = np.percentile(dist, 1) #percentile values\np2_dist = np.percentile(dist, 99)\nprint(p1_dist, p2_dist)\n\npasse = data1_num['Average_weekly_passengers'].values  #series to array \np1_passe = np.percentile(passe, 1) #percentile values\np2_passe = np.percentile(passe, 99)\nprint(p1_passe, p2_passe)\n\nms = data1_num['market_share'].values  #series to array \np1_ms = np.percentile(ms, 1) #percentile values\np2_ms = np.percentile(ms, 99)\nprint(p1_ms, p2_ms)\n\nms1 = data1_num['market_share_1'].values  #series to array \np1_ms1 = np.percentile(ms1, 1) #percentile values\np2_ms1 = np.percentile(ms1, 99)\nprint(p1_ms1, p2_ms1)\n\ndata1_list = [data1]\n\nfor dataset1 in data1_list:\n    dataset1.loc[dataset1.Distance < 187.95, 'Distance' ] = 187.95\n    dataset1.loc[dataset1.Distance > 2586.01, 'Distance' ] = 2586.01\n    \n    dataset1.loc[dataset1.Average_weekly_passengers < 184.33, 'Average_weekly_passengers' ] = 184.33\n    dataset1.loc[dataset1.Average_weekly_passengers > 3699.30, 'Average_weekly_passengers' ] = 3699.30\n    \n    dataset1.loc[dataset1.market_share < 22.9443, 'market_share' ] = 22.9443 \n    dataset1.loc[dataset1.market_share > 99.6801, 'market_share' ] = 99.6801\n    \n    dataset1.loc[dataset1.market_share_1 < 1.3099, 'market_share_1' ] = 1.3099\n    dataset1.loc[dataset1.market_share_1 > 99.6801, 'market_share_1' ] = 99.6801\n\n## Dummy treatment for categorical data\n\ndf1 = data1\ndf1.head()\n\nMLA_Dum = pd.get_dummies(df1.market_leading_airline,prefix='MLA',drop_first=True)\nMLA_Dum.head()\n\nLPA_Dum = pd.get_dummies(df1.Low_price_airline,prefix='LPA',drop_first=True)\nLPA_Dum.head()\n\nmodeldata = pd.concat([df1, MLA_Dum, LPA_Dum],axis=1)\nmodeldata.head()\n\nmodeldata1 = modeldata.drop(['City1', 'City2', 'market_leading_airline', 'Low_price_airline'], axis = 1)\nmodeldata1.head()\n\n## Cross Validation\n\nfrom sklearn.model_selection import train_test_split\ndf_train, df_test = train_test_split(modeldata1,test_size=0.30,random_state=1234)\n\ndf_train.shape, df_test.shape\n\nXTrain = df_train.iloc[:,list(range(1,6)) + list(range(6,df_train.shape[1]))]\nYTrain = df_train['Average_Fare']\n\nXTest = df_test.iloc[:,list(range(1,6)) + list(range(6,df_test.shape[1]))]\nYTest = df_test['Average_Fare']\n\nXTrain.shape,YTrain.shape\n\nXTest.shape,YTest.shape\n\n## Multiple Linear Regression Model\n\nregr = linear_model.LinearRegression(normalize=True)\nregr\n\nregr.fit(XTrain,YTrain)\n\nregr.score(XTrain,YTrain)\n\nregr.score(XTest,YTest)\n\nfrom scipy import stats\n\ndef acc(X, Y, model):\n    Y = np.array(Y)\n    yhat = model.predict(X)\n    SSR = sum((Y-yhat)**2)\n    SST = sum((Y - np.mean(Y))**2)\n    Rsquared = 1 - (float(SSR))\/SST\n    adjRsquared = 1 - (1-Rsquared)*(len(Y)-1)\/(len(Y)-X.shape[1]-1)\n    \n    return Rsquared, adjRsquared\n\nacc(XTest, YTest, regr)\n\n## Feature importance\n\ndef ErrorMetric(model,X,Y):\n    Yhat = model.predict(X)\n    MAPE = np.mean(abs(Y-Yhat)\/Y)*100\n    MSSE = np.mean(np.square(Y-Yhat))\n    return MAPE, MSSE\n\n# for varible importance, use ensemble method\n\nfrom sklearn import ensemble\nfrom sklearn.ensemble import GradientBoostingRegressor\nmodel = ensemble.GradientBoostingRegressor()\nmodel.fit(XTrain, YTrain)\n\n# Score for XGB regressor\n\nprint('Gradient Boosting score\": %.4f' % model.score(XTest, YTest))\n\nfeature_labels = np.array(modeldata1.columns)\nfeature_labels\n\nimportance = model.feature_importances_\nfeature_indexes_by_importance = importance.argsort()\nfor index in feature_indexes_by_importance:\n    print('{}-{:.2f}%'.format(feature_labels[index], (importance[index] *100.0)))\n\ns1 = pd.Series(list(feature_labels), name='feature')\n\ns2 = pd.Series(list(importance), name='variable imp')\n\nimp = pd.concat([s1, s2], axis=1)\nimp.head()\n\nimp_df = imp[imp['variable imp'] > .02] \nimp_df.head(11)\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(15,8))\nax = sns.barplot('variable imp', 'feature', data=np.round(imp_df,3), color=\"green\")\n\n## PCA\n\nmodeldata1.head()\n\nfeatures = list(feature_labels)\n\n# Separating out the features\nx= modeldata1.loc[:, features].values\n\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=3)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf1 = pd.DataFrame(data = principalComponents\n             , columns = ['pc1', 'pc2', 'pc3'])\n\nprint(pca.explained_variance_)\nprint(pca.explained_variance_ratio_)\nprint (pca.explained_variance_ratio_.cumsum())\n\nprincipalDf1.head()\n\nresult = principalDf1\n# Run The PCA\nsns.set_style(\"white\")\n# Store results of PCA in a data frame\n#result=pd.DataFrame(pca.transform(df), columns=['PCA%i' % i for i in range(3)], index=df.index)\nfrom mpl_toolkits.mplot3d import Axes3D\nAxes3D = Axes3D  # pycharm auto import\nmodeldata1['Average_Fare']=pd.Categorical(modeldata1['Average_Fare'])\nmy_color=modeldata1['Average_Fare'].cat.codes\n\n# Plot initialisation\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(result['pc1'], result['pc2'], result['pc3'], c=my_color, cmap='viridis', s=60)\n \n# make simple, bare axis lines through space:\nxAxisLine = ((min(result['pc1']), max(result['pc1'])), (0, 0), (0,0))\nax.plot(xAxisLine[0], xAxisLine[1], xAxisLine[2], 'black')\nyAxisLine = ((0, 0), (min(result['pc2']), max(result['pc2'])), (0,0))\nax.plot(yAxisLine[0], yAxisLine[1], yAxisLine[2], 'black')\nzAxisLine = ((0, 0), (0,0), (min(result['pc3']), max(result['pc3'])))\nax.plot(zAxisLine[0], zAxisLine[1], zAxisLine[2], 'black')\n \n# label the axes\nax.set_xlabel(\"PC1\")\nax.set_ylabel(\"PC2\")\nax.set_zlabel(\"PC3\")\nax.set_title(\"PCA on the train data\")\n\npca = PCA(n_components=9)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = ['pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8', 'pc9'])\n\nprint (pca.explained_variance_ratio_.cumsum())\n\n# so optimal number of PC components = 7\n\npca = PCA(n_components=7)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = ['pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7'])\n\nprincipalDf.head()\n\n#from sklearn.cross_validation import train_test_split\n#Join 'default' in to the train_pDf dataframe\ntrain_principalDf_xy = pd.concat([principalDf, modeldata1['Average_Fare']], axis = 1) \n\ntrain_principalDf_xy_1 = train_principalDf_xy\n\n#train_principal_DF_xy_1 is the final transformed train data set\n\nX = train_principalDf_xy_1[['pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7']] \nY = train_principalDf_xy_1['Average_Fare']\n\nXtrain_pc, Xtest_pc, Ytrain_pc, Ytest_pc = train_test_split(X,Y,test_size = 0.30, random_state = 34)\n\n### L1 Regularization\n\nlassoMod = linear_model.Lasso(alpha=0.9) \n\nlassoMod.fit(Xtrain_pc,Ytrain_pc)\n\nprint (lassoMod.coef_)\n\nlassoMod.coef_[((lassoMod.coef_)!=0)]\n\nlassoMod.score(Xtrain_pc,Ytrain_pc)\n\nlassoMod.score(Xtest_pc,Ytest_pc)","9980b661":"# READING DATA"}}