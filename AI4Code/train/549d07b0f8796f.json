{"cell_type":{"933c9da7":"code","ef4bcec2":"code","98a6f2bc":"code","4cf24d18":"code","cdb33bd2":"code","b4af7a45":"code","7f72dcd5":"code","e8c7c696":"code","4e00a435":"code","07ed0a86":"code","56dd2e9e":"code","64f4ac2f":"code","9296db8e":"code","a212bfff":"code","e7338244":"code","b5603c70":"code","33e6d710":"markdown"},"source":{"933c9da7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ef4bcec2":"import re\nmax_p_range_day = re.findall(r'max_p_range_day\\s*=\\s* \\'\\d*[-,]?\\d*[-,]?\\d*\\'',\"max_p_range_day = '2018-03-23'\")[0].replace(' ', '')\nprint(max_p_range_day)","98a6f2bc":"period_date =pd.date_range(start='1\/1\/2009', end='8\/1\/2020', freq='M')\nperiod =[]\nfor x in period_date :\n    ym = str(x)[:4] + str(x)[5:7]\n    period.append(ym)\n    \nprint(period)\n\nfor x in period :\n    index = x[4:6]\n    #print(int(index)-1 )","4cf24d18":"import arrow\nimport datetime\n\ndef get_date(param , day) :\n    dt = param +day \n    a = arrow.get(dt, 'YYYYMD').date()\n    return str(a)\n\n\nprint(str(datetime.datetime.strptime(\"20131125\", '%Y%m%d'))[:10])","cdb33bd2":"month_data_list =[]\n\ndef get_components (records , param , month_text) :\n    \n    \n    for record in records:\n        days_record  =[]\n        for x in record :\n            \n            if x.startswith(month_text) :\n                day = x.split(' ')[1]\n                if len(day) ==1 :\n                    day ='0' + day\n                #print(get_date(param ,day))\n                index_column =get_date(param ,day)\n                days_record.append(index_column)\n            if x.startswith('Average temperature') :\n                avg_temp = x.split('Average temperature')[1]\n                #print(avg_temp[:-2])\n                avg_temp = avg_temp [:-2]\n                days_record.append(avg_temp)\n            if x.startswith('Average humidity') :\n                avg_humidity = x.split('Average humidity')[1]\n                #print(avg_humidity[:-1])\n                avg_humidity = avg_humidity [:-1]\n                days_record.append(avg_humidity)\n            if x.startswith('Average dewpoint') :\n                avg_dewpoint = x.split('Average dewpoint')[1]\n                #print(avg_dewpoint[:-2])\n                avg_dewpoint = avg_dewpoint [:-2]\n                days_record.append(avg_dewpoint)\n            if x.startswith('Average barometer') :\n                avg_baro = x.split('Average barometer')[1]\n                #print(avg_baro[:-3])\n                avg_baro = avg_baro [:-3]\n                days_record.append(avg_baro)\n            if x.startswith('Average windspeed') :\n                avg_wind_speed = x.split('Average windspeed')[1]\n                #print(avg_wind_speed[:-4])\n                avg_wind_speed = avg_wind_speed [:-4]\n                days_record.append(avg_wind_speed)\n            if x.startswith('Average gustspeed') :\n                avg_gust_speed = x.split('Average gustspeed')[1]\n                #print(avg_gust_speed[:-4])\n                avg_gust_speed = avg_gust_speed [:-4]\n                days_record.append(avg_gust_speed)\n            if x.startswith('Average direction') :\n                avg_dir = x.split('Average direction')[1]\n                #print(avg_dir[:-7])\n                avg_dir = avg_dir [:-7]\n                days_record.append(avg_dir)\n            if x.startswith('Rainfall for month') :\n                rainfall_per_month = x.split('Rainfall for month')[1]\n                #print(rainfall_per_month[:-3])\n                rainfall_per_month = rainfall_per_month [:-3]\n                days_record.append(rainfall_per_month)\n            if x.startswith('Rainfall for year') :\n                rainfall_per_year = x.split('Rainfall for year')[1]\n                #print(rainfall_per_year[:-3])\n                rainfall_per_year = rainfall_per_year [:-3]\n                days_record.append(rainfall_per_year)\n            if x.startswith('Maximum rain per minute') :\n                rainfall_per_min = x.split(' ')[4]\n                #print(rainfall_per_min)\n                rainfall_per_min = rainfall_per_min [:-3]\n                days_record.append(rainfall_per_min)\n            if x.startswith('Maximum temperature') :\n                max_temp = x.split(' ')[2]\n                #print(max_temp[:-2])\n                max_temp = max_temp[:-2]\n                days_record.append(max_temp)\n            if x.startswith('Minimum temperature') :\n                min_temp = x.split(' ')[2]\n                #print(min_temp[:-2])\n                min_temp = min_temp[:-2]\n                days_record.append(min_temp)\n            if x.startswith('Maximum humidity') :\n                max_humidity = x.split(' ')[2]\n                #print(max_humidity[:-1])\n                if max_humidity == '' :\n                        max_humidity = x.split(' ')[3]\n                        print(max_humidity)\n                max_humidity = max_humidity[:-1]\n                days_record.append(max_humidity)\n            if x.startswith('Minimum humidity') :\n                min_humidity = x.split(' ')[2]\n                if min_humidity == '' :\n                        min_humidity = x.split(' ')[3]\n                #print(min_humidity)\n                min_humidity = min_humidity.split('%')[0]\n                days_record.append(min_humidity)\n            if x.startswith('Maximum pressure') :\n                max_pressure = x.split(' ')[2]\n                #print(max_pressure)\n                days_record.append(max_pressure)\n            if x.startswith('Minimum pressure') :\n                min_pressure = x.split(' ')[2]\n                #print(min_pressure)\n                days_record.append(min_pressure)\n            if x.startswith('Maximum windspeed') :\n                max_windspeed = x.split(' ')[2]\n                #print(max_windspeed)\n                days_record.append(max_windspeed)\n            if x.startswith('Maximum gust speed') :\n                max_gust_speed = x.split(' ')[3]\n                if max_gust_speed =='' :\n                    max_gust_speed = x.split(' ')[4]\n                    #print(max_gust_speed)\n                days_record.append(max_gust_speed)\n            if x.startswith('Maximum heat index') :\n                max_heat_index = x.split(' ')[3]\n                #print(max_heat_index[:-2])\n                max_heat_index = max_heat_index[:-2]\n                days_record.append(max_heat_index)\n        month_data_list.append(days_record)\n    return month_data_list\n            ","b4af7a45":"from bs4 import BeautifulSoup\nimport urllib.request\nimport time\n\nmonth_text =['Jan', 'Feb' ,'Mar', 'Apr' ,'May' ,'Jun', 'Jul','Aug' ,'Sep','Oct','Nov','Dec']\n\nfor param in period[:] :\n    #time.sleep(1)\n    \n    r =urllib.request.urlopen(\"https:\/\/www.estesparkweather.net\/archive_reports.php?date=\" + param)\n    soup = BeautifulSoup(r,'lxml')\n    data =[]\n    all_table = soup.find_all('table')\n    for table in all_table:\n        data.append(table.text.splitlines())\n\n    for x in data :\n        while '' in x:\n            x.remove('')\n\n    final =[]\n    total_data =[]\n    index = param[4:6]\n    int_index = int(index) -1\n    \n    for x in data:\n        if x[0].startswith(month_text[int_index]) :\n            final.append(x)\n    print ( param + \" : \" + str(len(final)) )\n    get_components(final , param , month_text[int_index])\n\n\nif len(month_data_list) > 0 :\n    print(len(month_data_list))\n\n#print(month_data_list)\n\nprint(\"The End\")\n","7f72dcd5":"df = pd.DataFrame(month_data_list)\ndf.columns = ['Date','Average temperature (\\xb0F)','Average humidity (%)','Average dewpoint (\\xb0F)','Average barometer (in)','Average windspeed (mph)','Average gustspeed (mph)','Average direction (\\xb0deg)','Rainfall for month (in)','Rainfall for year (in)', 'Maximum rain per minute','Maximum temperature (\\xb0F)', 'Minimum temperature (\\xb0F)','Maximum humidity (%)','Minimum humidity (%)','Maximum pressure','Minimum pressure','Maximum windspeed (mph)','Maximum gust speed (mph)','Maximum heat index (\\xb0F)']\ndf1 = df[:-3]\ndf1['Date1'] =pd.to_datetime(df1['Date'])\ndf1.index = df1['Date1']\n#df1.drop(['Date'] ,1 , inplace=True)\n#df1 = df1.apply(pd.to_numeric, errors='ignore', downcast='float')\n\ndf1['Average temperature (\u00b0F)'] = df1['Average temperature (\u00b0F)'].astype(float)\ndf1['Average humidity (%)'] = df1['Average humidity (%)'].astype(float)\ndf1['Average dewpoint (\u00b0F)'] = df1['Average dewpoint (\u00b0F)'].astype(float)\ndf1['Average barometer (in)'] = df1['Average barometer (in)'].astype(float)\ndf1['Average windspeed (mph)'] = df1['Average windspeed (mph)'].astype(float)\ndf1['Average gustspeed (mph)'] = df1['Average gustspeed (mph)'].astype(float)\ndf1['Average direction (\u00b0deg)'] = df1['Average direction (\u00b0deg)'].astype(float)\ndf1['Rainfall for month (in)'] = df1['Rainfall for month (in)'].astype(float)\ndf1['Rainfall for year (in)'] = df1['Rainfall for year (in)'].astype(float)\ndf1['Maximum rain per minute'] = df1['Maximum rain per minute'].astype(float)\ndf1['Maximum temperature (\u00b0F)'] = df1['Maximum temperature (\u00b0F)'].astype(float)\ndf1['Minimum temperature (\u00b0F)'] = df1['Minimum temperature (\u00b0F)'].astype(float)\ndf1['Maximum pressure'] = df1['Maximum pressure'].astype(float)\ndf1['Minimum pressure'] = df1['Minimum pressure'].astype(float)\ndf1['Maximum windspeed (mph)'] = df1['Maximum windspeed (mph)'].astype(float)\ndf1['Maximum heat index (\u00b0F)'] = df1['Maximum heat index (\u00b0F)'].astype(float)\ndf1['Minimum humidity (%)'] = df1['Minimum humidity (%)'].astype(float)\ndf1['Maximum humidity (%)'] = df1['Maximum humidity (%)'].astype(float)\ndf1['Maximum gust speed (mph)'] = df1['Maximum gust speed (mph)'].astype(float)\n","e8c7c696":"from pandas.api.types import is_numeric_dtype, is_datetime64_dtype\ndf1.loc['2011-08-20' ,'Average windspeed (mph)']  =3.0\n\n\n\nprint(df1.info())\n\nprint(round(np.mean(df1[\"2011-08-1\":\"2011-08-20\"][\"Average windspeed (mph)\"]), 2))\nprint(round(np.std(df1[\"2011-04-20\":\"2012-01-1\"][\"Minimum temperature (\u00b0F)\"]), 2))\nprint(round(np.std(df1[\"2011-04-20\":\"2012-01-1\"][\"Maximum pressure\"]), 2))\nprint(round(np.max(df1[\"2011-04-20\":\"2012-01-1\"][\"Maximum temperature (\u00b0F)\"]), 2))\n\n#print(is_numeric_dtype(df1['Maximum gust speed (mph)']))\n\nprint(str(len(df1.columns)))","4e00a435":"'''['Average temperature (\u00b0F)', 'Average humidity (%)',\n 'Average dewpoint (\u00b0F)', 'Average barometer (in)',\n 'Average windspeed (mph)', 'Average gustspeed (mph)',\n 'Average direction (\u00b0deg)', 'Rainfall for month (in)',\n 'Rainfall for year (in)', 'Maximum rain per minute',\n 'Maximum temperature (\u00b0F)', 'Minimum temperature (\u00b0F)',\n 'Maximum humidity (%)', 'Minimum humidity (%)', 'Maximum pressure',\n 'Minimum pressure', 'Maximum windspeed (mph)',\n 'Maximum gust speed (mph)', 'Maximum heat index (\u00b0F)'] '''","07ed0a86":"df1['Month'] = df1['Date'].apply(lambda x:x.split('-')[1])\n","56dd2e9e":"df_med_gust=df1['Maximum gust speed (mph)'].groupby(df1['Month']).median()\n#print(df_med_gust)\nprint(\"Month with highest median = \" +str(df_med_gust.idxmax())[:10])\nprint(\"higest median value = \" + str(df_med_gust[str(df_med_gust.idxmax())[:10]]))","64f4ac2f":"print(\"Average temparature from March 2010 to May 2012 = \" + str(round(np.mean(df1['2010-03-01' : '2012-05-31']['Average temperature (\u00b0F)']),2)))","9296db8e":"print(\"Std deviation of Max Wind speed =\" + str(round(np.std(df1['Maximum windspeed (mph)']),2)))\n\np50_p75 = np.percentile(df1['Average temperature (\u00b0F)'],75) - np.percentile(df1['Average temperature (\u00b0F)'],50) \nprint(\"Difference in 75 and 50 percentile for Average Temperature = \" +str(round(p50_p75 , 2))) # 12.200000000000003\n#print(p50_p75)\n\nprint(\"Pearson Coeff between Avg Dewpoint and Avg temparature = \" +str(round(np.corrcoef(df1['Average dewpoint (\u00b0F)'], df1['Average temperature (\u00b0F)'])[0,1],2)))\n#0.7596091253567396\n\nnp.min(df1['Average dewpoint (\u00b0F)'].groupby(pd.Grouper(freq=\"M\")).mean()) #33.46666666666667\n\ndf_avg_humd = df1['Average dewpoint (\u00b0F)'].groupby(pd.Grouper(freq=\"M\")).mean()\nprint(\"month with lowest average dew point = \"+ str((df_avg_humd).idxmin())[:10])\n#df1.loc[df1.groupby(pd.Grouper(freq=\"M\"))['Average humidity (%)'].idxmin()]\n\nprint(\"Average temparature from March 2010 to May 2012 = \" + str(round(np.mean(df1['2010-03-01' : '2012-05-31']['Average temperature (\u00b0F)']),2)))\n\ndf1['diff_pressure'] = df1['Maximum pressure'] -df1['Minimum pressure']\nprint(\"Day with highest difference in pressure = \" + str(df1['diff_pressure'].idxmax())[:10])\n\n\ndf_med_gust=df1['Maximum gust speed (mph)'].groupby(pd.Grouper(freq='M')).median()\nprint(\"Month with highest median = \" +str(df_med_gust.idxmax())[:10])\nprint(\"higest median value = \" + str(df_med_gust[str(df_med_gust.idxmax())[:10]]))\n\n\n#print(df1['2010-12-01':'2010-12-31']['Average temperature (\u00b0F)'].max())  #46.3\n#print(df1['2010-12-01':'2010-12-31']['Average temperature (\u00b0F)'].min())  #1.5\nprint(\"Range of Temparature for Dec 2010 = \" + str(df1['2010-12-01':'2010-12-31']['Average temperature (\u00b0F)'].max() - df1['2010-12-01':'2010-12-31']['Average temperature (\u00b0F)'].min()))\n\nmed_baro = np.median(df1['Average barometer (in)']) # 29.9\nprint(\"no of days less than median barometer reading = \" + str(len(df1[df1['Average barometer (in)'] == med_baro])))\n\none_std_avg_temp = np.std(df1['Average temperature (\u00b0F)'])\nmean_avg_temp = np.mean(df1['Average temperature (\u00b0F)'])\n\nhigh = mean_avg_temp + one_std_avg_temp\nlow = mean_avg_temp - one_std_avg_temp\n\n#print( one_std_avg_temp , mean_avg_temp , high ,low )\nprint(\"No of days with one Std deviation of average temp = \" +str(len(df1[(df1['Average temperature (\u00b0F)'] > low ) & (df1['Average temperature (\u00b0F)'] < high)])))\n#df1.info()","a212bfff":"#print(\"Average temparature from March 2010 to May 2012 = \" + str(round(np.mean(df1['2010-03-01' : '2012-02-28']['Average temperature (\u00b0F)']),2)))\n\n\ndf_med_gust=df1['Maximum gust speed (mph)'].groupby(pd.Grouper(freq='M')).median()\n#print(\"Month with highest median = \" +str(df_med_gust.idxmax())[:10])\n#print(\"higest median value = \" + str(df_med_gust[str(df_med_gust.idxmax())[:10]]))\n#df1['2010-03-01' : '2012-05-31']['Average temperature (\u00b0F)' ]\ndf1[df1['Average temperature (\u00b0F)'] < 0]['Average temperature (\u00b0F)']\n#print((df_med_gust.values))\n\n","e7338244":"df1.shape","b5603c70":"df1.to_csv('climate_data.csv',index = False)","33e6d710":"> "}}