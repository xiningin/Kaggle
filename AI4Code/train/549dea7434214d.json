{"cell_type":{"91347a90":"code","37ca84a3":"code","aeac0f1b":"code","76338ed0":"code","ec1f213b":"code","1c94b541":"code","b5781da5":"code","ee589e67":"code","9ba2fbfe":"code","24c48156":"code","a99a0cb7":"code","73dcd104":"code","e2e1e70c":"code","05e7f3dc":"code","15cfdb8e":"code","d519b06b":"code","f0fa6168":"markdown","fe0aa88b":"markdown","8a894e56":"markdown","f6dfff4a":"markdown","80ce451a":"markdown","e0a9a1d1":"markdown","df97145b":"markdown","d076b97e":"markdown","c915718b":"markdown","d1382af4":"markdown","e9ab54de":"markdown","772e5b67":"markdown"},"source":{"91347a90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","37ca84a3":"import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPool2D, GlobalAveragePooling2D, Flatten, Dense, BatchNormalization \nfrom keras.utils.np_utils import to_categorical\n%matplotlib inline","aeac0f1b":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","76338ed0":"display(train.info())\ndisplay(test.info())\n\ndisplay(train.head())\ndisplay(test.head())","ec1f213b":"x_train = train.iloc[:, 1:].values\ny_train = train.iloc[:, 0].values\ntest = test.iloc[:,:].values","1c94b541":"x_train = tf.keras.utils.normalize(x_train,axis = 1)\ntest = tf.keras.utils.normalize(test,axis = 1)","b5781da5":"y_train = to_categorical(y_train, num_classes = 10)","ee589e67":"x_train = x_train.reshape(-1, 28, 28, 1)\ntest = test.reshape(-1, 28, 28, 1)","9ba2fbfe":"model = Sequential()\n\nmodel.add(BatchNormalization(input_shape = (28, 28, 1)))\nmodel.add(Conv2D(filters = 128, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'valid'))\nmodel.add(Conv2D(filters = 128, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'valid'))\nmodel.add(MaxPool2D(pool_size = 2,strides = 2))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 256, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'valid'))\nmodel.add(Conv2D(filters = 256, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'valid'))\nmodel.add(MaxPool2D(pool_size = 2,strides = 2))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 512, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'valid'))\nmodel.add(Conv2D(filters = 512, kernel_size = 1, kernel_initializer = 'he_normal', activation = 'relu', padding = 'valid'))\nmodel.add(BatchNormalization())\n\nmodel.add(GlobalAveragePooling2D())\n\nmodel.add(Dense(10, activation = 'softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])\n\nmodel.summary()","24c48156":"a = model.fit(x_train, y_train, batch_size=100, epochs=3,verbose=1)","a99a0cb7":"y = model.predict(test)\npredictions = y\ny = np.argmax(y, axis=1)","73dcd104":"loss = a.history[\"loss\"]\nacc = a.history[\"acc\"]\nep = list(range(len(loss)))","e2e1e70c":"plt.plot(ep, loss)\nplt.xlabel(\"#epochs\")\nplt.ylabel(\"loss\")","05e7f3dc":"plt.plot(ep, acc)\nplt.xlabel(\"#epochs\")\nplt.ylabel(\"accuracy\")","15cfdb8e":"submission = pd.DataFrame()\nsubmission['ImageId'] = [i for i in range(1, len(test)+1)]\nsubmission['Label'] = y\nsubmission.to_csv('submission_3_4.csv', index=False)","d519b06b":"test = test.reshape(test.shape[0], 28, 28)\nj=0\nfor i in range(10004, 10007):\n    plt.subplot(330 + (j+1))\n    j+=1\n    plt.imshow(test[i], cmap = plt.cm.binary)\n    plt.title(np.argmax(predictions[i]));","f0fa6168":"# Loss and Accurancy Visualization","fe0aa88b":"# Model","8a894e56":"# Training and Test Data Shuffling","f6dfff4a":"# Training and Test Data Assignment","80ce451a":"# Model Execution","e0a9a1d1":"# Prediction","df97145b":"# Training and Test Data Normalization","d076b97e":"# Training Data Lables Assignment","c915718b":"# Reseults Visualization","d1382af4":"# Import Training and Test Data","e9ab54de":"# Results Store","772e5b67":"# Display Training and Test Data"}}