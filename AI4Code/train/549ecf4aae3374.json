{"cell_type":{"305a776b":"code","3aafd558":"code","29e04c65":"code","96079d1e":"code","a451062d":"code","9099d87d":"code","4c53bed6":"code","bf4f38d6":"code","4e407c32":"code","dfdfff76":"code","2b8aa2e5":"code","9d6db1e1":"code","96e7658f":"code","0ac7fd23":"code","e2c03e20":"code","2ee9ad22":"code","19af3527":"markdown"},"source":{"305a776b":"import pandas as pd\n\ndirectorio = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' # directorio del dataset de Iowa\niowa = pd.read_csv(directorio)\n# dropna drops missing values\n#data = data.dropna(axis=0)\n\nprint(iowa.describe())\nprint(iowa.head())\niowa.sample(5)","3aafd558":"#mostramos las columnas del dataset\niowa.columns","29e04c65":"# almacena la serie de precios por separado como precios.\nprecios = iowa.SalePrice\n# el comando head devuelve las primeras l\u00edneas de datos.\nprint(precios.head())","96079d1e":"# Se pueden seleccionar varias columnas de un DataFrame al proporcionar una lista de nombres de columna entre corchetes.\n# Recuerde, cada elemento en esa lista debe ser una cadena (con comillas).\n# todas las columnas seleccionadas deben ser del mismo tipo o solo se mostrar\u00e1n las de tipo int con el comando describe()\ncolumnas_string = ['GarageType','HouseStyle','SaleType']\ntres_columns_of_data = iowa[columnas_string]\ntres_columns_of_data.describe()","a451062d":"# si selecciona una columna de tipo int y otra de tipo string, solo la int se muestra\n#ambas columnas deben ser del mismo tipo \ncolumnas_int = ['GarageYrBlt','YrSold']\ndos_columns_of_data = iowa[columnas_int]\ndos_columns_of_data.describe()","9099d87d":"#objetivo de predicci\u00f3n\ny = precios\n#y=iowa.SalePrice\n\n#elegimos columnas para los predictores, usamos columnas num\u00e9ricas como el ejemplo\npredictores = [ 'LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\n#por convenci\u00f3n, llamamos X a este dato.\nX=iowa[predictores]","4c53bed6":"from sklearn.tree import DecisionTreeRegressor\n\n# Define model\nmodelo = DecisionTreeRegressor()\n\n# Fit model\nmodelo.fit(X, y)","bf4f38d6":"print(\"Hacer predicciones para las siguientes 5 casas:\")\nprint(X.head())\nprint(\"Las predicciones de precio con Decision Tree son: \")\nprint(modelo.predict(X.head()))","4e407c32":"X.sample(5)\nmodelo.predict(X.sample(5))\nmodelo.predict(X.head())","dfdfff76":"#El c\u00e1lculo del error absoluto medio usando solo los datos de training X es\nfrom sklearn.metrics import mean_absolute_error\n\nprecios_predecidos = modelo.predict(X)\nmean_absolute_error(y, precios_predecidos)\n","2b8aa2e5":"from sklearn.model_selection import train_test_split\n\n# dividir los datos en datos de entrenamiento y validaci\u00f3n, tanto para los predictores como para el objetivo\n# La divisi\u00f3n se basa en un generador de n\u00fameros aleatorios. Proporcionando un valor num\u00e9rico a\n# el argumento de random_state garantiza que obtenemos la misma divisi\u00f3n cada vez que se\n# ejecuta este script\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state = 0)\n# Define model\nmodelo = DecisionTreeRegressor()\n# Fit model\nmodelo.fit(train_X, train_y)\n\n# get predicted prices on validation data\npredicciones = modelo.predict(val_X)\nprint(\"Mean Absolute Error con Decision Tree Regresor: %d \" %(mean_absolute_error(val_y, predicciones)))","9d6db1e1":"#We can use a utility function to help compare MAE scores from different values for max_leaf_nodes:\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef get_mae(max_leaf_nodes, predictors_train, predictors_val, targ_train, targ_val):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(predictors_train, targ_train)\n    preds_val = model.predict(predictors_val)\n    mae = mean_absolute_error(targ_val, preds_val)\n    return(mae)\n","96e7658f":"# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 250, 500, 1000, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max nodos hoja: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","0ac7fd23":"#We build a RandomForest similarly to how we built a decision tree in scikit-learn.\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nforest_model = RandomForestRegressor()\nforest_model.fit(train_X, train_y)\niowa_preds = forest_model.predict(val_X)\nprint(\"Mean abs error con Random Forest Regresor: %d\" %(mean_absolute_error(val_y, iowa_preds)))","e2c03e20":"# Treat the test data in the same way as training data. In this case, pull same columns.\ntest_X = iowa[predictores]\n# Use the model to make predictions\npredicted_prices = forest_model.predict(test_X.sample(1460))\n# We will look at the predicted prices to ensure we have something sensible.\nprint(\"prediccion de precios con Random Forest: \")\nprint(predicted_prices)\n","2ee9ad22":"my_submission = pd.DataFrame({'Id': iowa.Id, 'SalePrice': predicted_prices})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","19af3527":"# Introduction\n**This is my workspace for the [Machine Learning course](https:\/\/www.kaggle.com\/learn\/machine-learning).**\n"}}