{"cell_type":{"d0be0ac7":"code","33778cc0":"code","0ff49296":"code","8497af4c":"code","d34ab671":"code","30ac5a49":"code","e2437cfa":"code","f160005f":"code","813dbe2b":"code","86f9a63f":"code","1e173784":"code","c4532791":"code","55c2aca7":"code","3769b030":"markdown","62482d79":"markdown","dc002146":"markdown","e2d769bf":"markdown","ac4e1b96":"markdown","2ad04e04":"markdown"},"source":{"d0be0ac7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","33778cc0":"userAnimeListDataPd=pd.read_csv('\/kaggle\/input\/myanimelist\/UserAnimeList.csv',\n                              usecols=['username', 'anime_id', 'my_score'],\n                               dtype={'username':'string_', 'anime_id':'uint16', 'my_score':'uint8'},\n                              #nrows=1000 #for testing\n                               )\nuserAnimeListDataPd=userAnimeListDataPd.dropna()\nuserAnimeListDataPd=userAnimeListDataPd[userAnimeListDataPd['my_score']>7.0]\n#trim\nnrows=100000\nuserAnimeListDataPd=userAnimeListDataPd.iloc[0:nrows]\n\nuserAnimeListDataPd.head(20)","0ff49296":"from sklearn.preprocessing import LabelEncoder\n\n#userAnimeListDataPd=userAnimeListDataPd.set_index('username')\nlabelencoder = LabelEncoder()\nuserAnimeListDataPd['username'] = labelencoder.fit_transform(userAnimeListDataPd['username'])\nuserAnimeListDataPd.head()","8497af4c":"print('Shape: ',userAnimeListDataPd.shape)\nnumber_of_users=userAnimeListDataPd.drop_duplicates(subset=['username']).shape[0]\nprint('Number of users: ',number_of_users)\ntitles=userAnimeListDataPd.drop_duplicates(subset=['anime_id']).shape[0]\nprint(\"number of titles: \", titles)\n","d34ab671":"#userAnimeListDataPd=userAnimeListDataPd[['username', 'anime_id']].set_index('username').stack()\n#userAnimeListDataPd=pd.get_dummies(userAnimeListDataPd, sparse=True).groupby(level=0).sum().head()\n#titles=userAnimeListDataPd.shape[1]","30ac5a49":"#userAnimeListDataPd.index.name='username'\nuserAnimeListDataPd =userAnimeListDataPd[['username']].join(pd.get_dummies(userAnimeListDataPd['anime_id'], sparse=True)).groupby('username').max()\n#userAnimeListDataPd =userAnimeListDataPd['index'].join(pd.get_dummies(userAnimeListDataPd['anime_id'])).groupby('index').max()\n#userAnimeListDataPd.pivot_table(index=['number_label'], columns=['anime_id'], aggfunc=[len], fill_value=0)\nprint(userAnimeListDataPd.head(20))\nprint(userAnimeListDataPd.shape)","e2437cfa":"userAnimeListDataPd.to_csv (r'\/kaggle\/exported.csv', header=True, compression='zip')","f160005f":"from keras.layers import Input, Dense, Flatten, Reshape, Concatenate\nfrom keras import models\n\nclass deep_autoencoder():\n    #for 2d graph\n    \n    def __init__(self,input_size, l1, l2):    \n        \"https:\/\/blog.keras.io\/building-autoencoders-in-keras.html\"\n        \n        encoded_dim=2\n        input_shape=Input(shape=(input_size,))\n        #encoder\n        #self.encoder=models.Sequential()\n        self.encoder=Dense(l1, activation='relu')(input_shape)\n        self.encoder=Dense(l2, activation='tanh')(self.encoder)\n        self.encoder=Dense(encoded_dim, activation='tanh')(self.encoder)\n\n        #decoder\n        \n        #self.decoder=models.Sequential()\n        self.decoder=Dense(l2, activation='tanh', input_dim=encoded_dim)(self.encoder)\n        self.decoder=Dense(l1, activation='tanh')(self.decoder)\n        self.decoder=Dense(input_size, activation='relu')(self.decoder)\n        \n        #autoencoder\n        #self.model=models.Model(input_shape, self.encoder(self.decoder(input_shape)), name=\"autoencoder\")\n        self.model=models.Model(input_shape,self.decoder)\n        self.encmodel=models.Model(input_shape,self.encoder)\n    \n    ","813dbe2b":"autoencoder=deep_autoencoder(titles, 900, 100)\nautoencoder.model.compile(loss='mse', optimizer='adam')\nautoencoder.model.fit(userAnimeListDataPd, userAnimeListDataPd, epochs=20)","86f9a63f":"import matplotlib.pyplot as plt\nz=autoencoder.encmodel.predict(userAnimeListDataPd)\nprint(userAnimeListDataPd.shape)\nplt.scatter(z[:,0], z[:,1], marker='o', s=0.1, c='#d53a26')\nplt.show()\nplt.savefig('stat.png', dpi=600)\n","1e173784":"fig, axs=plt.subplots(19, figsize=(10, 190))\nfor i in range(1,20):\n    autoencoder=deep_autoencoder(titles, 5*i, 3*i)\n    autoencoder.model.compile(loss='mse', optimizer='adam')\n    autoencoder.model.fit(userAnimeListDataPd, userAnimeListDataPd, epochs=20)\n    import matplotlib.pyplot as plt\n    z=autoencoder.encmodel.predict(userAnimeListDataPd)\n    print(userAnimeListDataPd.shape)\n    #axs[i-1].set_title(\"NN size = \", str(10*i), str(3*i))\n    axs[i-1].scatter(z[:,0], z[:,1], marker='o', s=0.1, c='#d53a26')\n","c4532791":"autoencoder=deep_autoencoder(titles, 6, 3)\nautoencoder.model.compile(loss='mse', optimizer='adam')\nautoencoder.model.fit(userAnimeListDataPd, userAnimeListDataPd, epochs=120)\nz=autoencoder.encmodel.predict(userAnimeListDataPd)\nprint(userAnimeListDataPd.shape)\n#axs[i-1].set_title(\"NN size = \", str(10*i), str(3*i))\nplt.scatter(z[:,0], z[:,1], marker='o', s=0.1, c='#d53a26')","55c2aca7":"model_json = autoencoder.model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\nmodel_json = autoencoder.encmodel.to_json()\nwith open(\"encmodel.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nautoencoder.model.save_weights(\"encmodel.h5\")\nprint(\"Saved model to disk\")","3769b030":"Lets try to get more visualizations by varying autoencoder size, because as we can see from previos visualization there is no useful information for people (we dont see clusters etc...)","62482d79":"Information about dataset","dc002146":"Vizualazing","e2d769bf":"From those graphs we can see only one thing - there is large group of people sharing the same titles. I suppose that this titles are generaly loved (like fma, one peace...) and people from this group watch only popular thins and dont explore something by themselves. But this fact needs further investigation (todo)","ac4e1b96":"# **Section 2 - Deep autoencoder**","2ad04e04":"# **Section 1 - prepearing data**"}}