{"cell_type":{"cc7b71de":"code","d8924629":"code","da5195f7":"code","7a9a3273":"code","923abd37":"code","eb01ac8f":"code","74920f73":"code","f4a03a05":"code","180b240f":"code","2083d8c4":"code","aa374b2d":"code","12c0e27d":"code","1a282661":"code","b332c15e":"code","b38e5e58":"code","ea2fb256":"code","80b3bad4":"code","73196543":"code","b8a156aa":"code","755c9304":"code","24d31344":"code","86acf5d0":"code","b14b2d34":"code","b3eee775":"code","85d08d3a":"code","9cc16951":"code","ef5de975":"code","7540c16d":"code","6e33a74d":"code","7e568838":"code","f4af8007":"code","f6ac6103":"markdown","e39a14d7":"markdown","14f96dc2":"markdown","e5deb4aa":"markdown","667a9e2a":"markdown"},"source":{"cc7b71de":"import datatable as dt\nimport pandas as pd\nimport numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestRegressor\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score","d8924629":"df = dt.fread('..\/input\/fold-is-power\/5fold.csv').to_pandas()","da5195f7":"df = df[df['kfold']==0]","7a9a3273":"rf = RandomForestRegressor()","923abd37":"sample = df.sample(frac=0.2)","eb01ac8f":"x = sample.drop(['id', 'target', 'kfold'], axis=1)\ny = sample['target']","74920f73":"rf.fit(x, y)","f4a03a05":"importance = rf.feature_importances_\nd = pd.DataFrame()\nd['imp'] = importance\nd['f'] = x.columns\n\nd=d.sort_values('imp', ascending=False)[:20]\n\nfig, ax = plt.subplots(figsize=(20,7))\n\nax.barh(d.f, d.imp, color='crimson')\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n    \nax.grid(b=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.2)\nax.invert_yaxis()\nplt.show()","180b240f":"d.f.values","2083d8c4":"df = df[['f34', 'f55', 'f43', 'f80', 'f27', 'f91', 'f71', 'f8', 'f97',\n       'f25', 'f22', 'f41', 'f66', 'f50', 'f57', 'f81', 'f96', 'f3',\n       'f60', 'f82', 'target']]","aa374b2d":"df.shape","12c0e27d":"df.head()","1a282661":"# correlations = df[:20].corr()\n# fig = plt.figure(figsize=(10,10))\n# ax = fig.add_subplot(111)\n# cax = ax.matshow(correlations, vmin=-1, vmax=1, cmap='RdPu')\n# fig.colorbar(cax)\n# #ticks = np.arange(0,20,1)\n# ax.set_xticks(ticks)\n# ax.set_yticks(ticks)\n# ax.set_xticklabels(df.columns)\n# ax.set_yticklabels(df.columns)\n# plt.show()","b332c15e":"train, test = train_test_split(df, test_size=0.2)","b38e5e58":"xtrain = train.drop(['target'], axis=1).values\nytrain = train['target'].values","ea2fb256":"xtest = test.drop(['target'], axis=1).values\nytest = test['target'].values","80b3bad4":"rfc = RandomForestClassifier()","73196543":"rfc.fit(xtrain, ytrain)","b8a156aa":"ypred = rfc.predict(xtest)","755c9304":"print(classification_report(ytest, ypred))","24d31344":"print(roc_auc_score(ytest, ypred))","86acf5d0":"pred_df = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()","b14b2d34":"pred_df = pred_df[['f34', 'f55', 'f43', 'f80', 'f27', 'f91', 'f71', 'f8', 'f97',\n       'f25', 'f22', 'f41', 'f66', 'f50', 'f57', 'f81', 'f96', 'f3',\n       'f60', 'f82']]","b3eee775":"df = dt.fread('..\/input\/fold-is-power\/5fold.csv').to_pandas()","85d08d3a":"df = df[['f34', 'f55', 'f43', 'f80', 'f27', 'f91', 'f71', 'f8', 'f97',\n       'f25', 'f22', 'f41', 'f66', 'f50', 'f57', 'f81', 'f96', 'f3',\n       'f60', 'f82', 'target', 'kfold']]","9cc16951":"all_pred = []\nall_true = []\ny_pred = []\nfor fold in range(5):\n    train = df[df['kfold']!=fold]\n    test = df[df['kfold']==fold]\n    xpred = pred_df.values\n    \n    xtrain = train.drop(['target', 'kfold'], axis=1).values\n    ytrain = train['target'].values\n    \n    xtest = test.drop(['target', 'kfold'], axis=1).values\n    ytest = test['target'].values\n    \n    xpred = pred_df.values\n    \n    rfc = RandomForestClassifier()\n    print('Training...\\n')\n    rfc.fit(xtrain, ytrain)\n    \n    print('Predicting OOF...\\n')\n    ypred = rfc.predict(xtest)\n    y_pred.append(np.hstack(ypred))\n    \n    ypred_ = rfc.predict(xpred)\n    y_pred.append(np.hstack(ypred_))\n    \n    all_true = all_true + list(ytest)\n    all_pred = all_pred + list(ypred)\n    \n    print(f'OOF {fold} score: {roc_auc_score(ytest, ypred)}\\n')","ef5de975":"y_pred_f = sum(y_pred_)\/len(y_pred_)","7540c16d":"len(y_pred_f)","6e33a74d":"sub = dt.fread('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv').to_pandas()","7e568838":"sub['targets'] = y_pred_f","f4af8007":"sub.to_csv('submission.csv', index=False)","f6ac6103":"# Read the Data Using datatable","e39a14d7":"### Taking a small sample dataset to calculate the feature importances","14f96dc2":"# Taking the 20 most important features","e5deb4aa":"# Plotting the 20 most important features","667a9e2a":"# Taking just one fold just to make it faster"}}