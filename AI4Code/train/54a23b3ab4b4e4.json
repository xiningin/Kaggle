{"cell_type":{"78128e2c":"code","3b62fa38":"code","a2bbb9ec":"code","b6a0d8df":"code","e6071d03":"code","4f31edd0":"code","cb1ae855":"code","2bc0e45f":"code","7a2acc05":"code","1117ca55":"code","983ae851":"code","8a2d7914":"code","b9439c62":"code","5c8acab5":"code","f12e806a":"code","ffc4c01b":"code","da2fd1bd":"code","e38cda01":"code","7d75ea31":"code","f70ddb3f":"code","50c7b87b":"code","4ed4386c":"code","a73fba47":"code","24eacaa6":"code","7d24c8c6":"markdown","f285363a":"markdown","0336a608":"markdown","a5797dc6":"markdown","dddb5aef":"markdown"},"source":{"78128e2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b62fa38":"import pandas as pd\nimport os\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\n\n# Plotting \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# classification models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import RidgeClassifier\n\n\n# Evaluation metric\nfrom sklearn.metrics import roc_auc_score","a2bbb9ec":"train_df = pd.read_csv('\/kaggle\/input\/dont-overfit-ii\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/dont-overfit-ii\/test.csv')","b6a0d8df":"display(train_df.shape)\ndisplay(train_df.head())\ndisplay(train_df.info())","e6071d03":"display(test_df.shape)\ndisplay(test_df.head())\ndisplay(test_df.info())","4f31edd0":"train_df[train_df.columns[2:]].std().hist();\nplt.title('Distribution of stds of all columns');","cb1ae855":"train_df[train_df.columns[2:]].mean().hist();\nplt.title('Distribution of means of all columns');","2bc0e45f":"\ndisplay(train_df.describe())\ndisplay(test_df.describe())","7a2acc05":"# train_df.groupby('target').hist(figsize=(50,50))","1117ca55":"train_df['target'].value_counts() ","983ae851":"print(train_df.isnull().any().any())\nprint(test_df.isnull().any().any())","8a2d7914":"print(train_df.duplicated().sum()) \nprint(train_df.duplicated().sum()) ","b9439c62":"corrs = train_df.corr().abs().unstack().sort_values(kind=\"quicksort\").reset_index()\ncorrs = corrs[corrs['level_0'] != corrs['level_1']]\ncorrs.tail(15)","5c8acab5":"# fig, ax = plt.subplots(figsize=(15,5))\n# corr_matrix = train_df.corr().abs()\n# sns.heatmap(corr_matrix, annot=True, linewidths=.5)","f12e806a":"Y = train_df['target']\nx = train_df.drop(columns=['target'])","ffc4c01b":"from sklearn.model_selection import train_test_split\n\nX_train,X_val, y_train, y_val = train_test_split(x,Y, test_size=0.2, random_state=42,stratify=train_df['target'])","da2fd1bd":"y_val.shape","e38cda01":"model = Lasso(alpha=0.0299)\nmodel1 = RidgeClassifier(alpha=0.005) # -- huge overfit ","7d75ea31":"model1.fit(X_train,y_train)\nypred_train=model1.predict(X_train)\nypred_val=model1.predict(X_val)\n","f70ddb3f":"print(\"The train score is  = {} \".format(roc_auc_score(y_train,ypred_train)))\nprint(\"The validation score is = {}\".format(roc_auc_score(y_val,ypred_val)))\n\n","50c7b87b":"model.fit(X_train,y_train)\nypred_train=model.predict(X_train)\nypred_val=model.predict(X_val)","4ed4386c":"ypred = model.predict(test_df)\nypred","a73fba47":"output = pd.DataFrame({'id': test_df.id,\n                       'target': ypred})\n\noutput.head()","24eacaa6":"output.to_csv('submission.csv', index=False)","7d24c8c6":"columns have std of 1 +\/- 0.1 (min and max values are 0.859, 1.15 respectively)","f285363a":"Binary classification --- Disbalanced ","0336a608":"NO DUPLICATS","a5797dc6":"NO NULLS ","dddb5aef":"columns ave mean of 0 +\/- 0.15 (min and max values are -0.2, 0.1896 respectively)"}}