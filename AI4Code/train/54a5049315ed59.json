{"cell_type":{"0263fb25":"code","a65ea351":"code","82d1b0e0":"code","911856c0":"code","cb5432eb":"code","84bfeb98":"code","64a9bf0a":"code","afa12a42":"code","2fd606f2":"code","211084de":"code","106da26e":"code","3728a598":"code","20c21998":"code","9c7ddaaa":"code","f1a5664c":"code","26669998":"code","a5e0f7b6":"code","d8b8319b":"code","7c351173":"code","a4c8aafc":"code","6e6ca655":"code","4f0723db":"code","19df2165":"code","b7568eb6":"code","e52c909f":"code","2807458a":"markdown","cd3638c6":"markdown","09bb97d6":"markdown","6fd64e44":"markdown","a1219dab":"markdown","c0feb0b8":"markdown","5e269baa":"markdown","e78fd97c":"markdown","ae756897":"markdown","7c408428":"markdown","eef38566":"markdown","c8db4b0d":"markdown","ccdd1c64":"markdown","9d8b610f":"markdown","96f8fc6c":"markdown"},"source":{"0263fb25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode,iplot,plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as ff\n\nfrom wordcloud import WordCloud\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a65ea351":"data=pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\")","82d1b0e0":"data.info()\n# Dataset toplam 11 feature'den olu\u015fuyor\n# 6 float tipinde, 1 integer tipinde ve 4 feature'da object(string) tipinde.\n# 1659 adet kay\u0131t(sample) bulunuyor. \u0130ndexlemesi 0 ila 16597 aras\u0131.","911856c0":"data.notnull().all()  # \"Data i\u00e7erisindeki hi\u00e7bir kolonda null de\u011fer yok?\" dedik ve bize d\u00f6nen cevap\n# Year ve Publisher'da null var","cb5432eb":"import missingno as msno\nmsno.bar(data)\n#msno.matrix(data)\n#msno.heatmap(data)\nplt.show()\n# Sonu\u00e7lara bak\u0131ld\u0131\u011f\u0131nda  Year featuresinde 271 adet , Publisher featuresinde 58 adet null de\u011fer bulunmaktad\u0131r.","84bfeb98":"# Herhangi bir feature'Nin herhangi bir sat\u0131r\u0131nda null de\u011feri var ise, ilgili sample'yi (null de\u011fere ait t\u00fcm feature de\u011ferleri) yok et.\n# Null values are removed from the dataset.\ndata.dropna(how=\"any\",inplace = True)\ndata.info()","64a9bf0a":"# Then convert data from float to int\n# Float tipinde Year Featuresi integer tipine \u00e7evriliyor.\ndata['Year'] = data['Year'].astype(int)\ndata.head()","afa12a42":"dataTop100=data.head(100)\n\ntrace1=go.Histogram(\n    y=dataTop100.Publisher,\n    name=\"Publisher\",\n    #xbins=dict(start=-3.0,end=4,size=0.5),\n    opacity=0.75,\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2=go.Histogram(\n    y=dataTop100.Platform,\n    name=\"Platform\",\n    opacity=0.75,\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\ntrace3=go.Histogram(\n    y=dataTop100.Genre,\n    name=\"Genre\",\n    opacity=0.75,\n    marker=dict(color='rgba(16, 112, 2, 0.6)'))\n\ndata_new=[trace1,trace2,trace3]\nlayout_new=go.Layout(\n    barmode='overlay',\n    title='En iyi 100 yay\u0131nc\u0131,platform ve t\u00fcr',\n    yaxis=dict(title='Yay\u0131nc\u0131,Platform,Genre'),\n    xaxis=dict(title='Count'),\n    bargap=0.2,\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor=\"rgb(243, 243, 243)\",\n)\nfig=go.Figure(data=data_new,layout=layout_new)\niplot(fig)","2fd606f2":"datatop100 = data.head(100)\n\ntrace1=go.Scatter(\n        x=datatop100.Rank,\n        y=datatop100.NA_Sales,\n        name=\"Kuzey Amerika Sat\u0131\u015flar\u0131\",\n        mode=\"markers\",\n        marker=dict(color='rgba(4,122,24,0.7)',size=8),\n        text=datatop100.Name\n)\ntrace2=go.Scatter(\n    x=datatop100.Rank,\n    y=datatop100.EU_Sales,\n    name=\"Avrupa Sat\u0131\u015flar\u0131\",\n    mode=\"markers\",\n    marker=dict(color='rgba(255,5,5,0.7)',size=8),\n    text=datatop100.Name\n)\ntrace3=go.Scatter(\n    x=datatop100.Rank,\n    y=datatop100.JP_Sales,\n    name=\"Japonya Sat\u0131\u015flar\u0131\",\n    mode=\"markers\",\n    marker=dict(color='rgba(102,29,36,0.7)',size=8),\n    text=datatop100.Name\n)\ntrace4=go.Scatter(\n    x=datatop100.Rank,\n    y=datatop100.Other_Sales,\n    name=\"Di\u011fer D\u00fcnya \u00dclke Sat\u0131\u015flar\u0131\",\n    mode=\"markers\",\n    marker=dict(color='rgba(164,44,237,0.7)',size=5),\n    text=datatop100.Name\n)\n\nnew_data = [trace1, trace2, trace3, trace4]\nlayout = dict(title = 'Kuzey Amerika, Avrupa,Japonya ve Di\u011fer \u00dclke Sat\u0131\u015flar\u0131',\n              xaxis= dict(title= 'S\u0131ralama',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\"),\n              yaxis= dict(title= 'Sat\u0131\u015flar',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\",),\n              paper_bgcolor='rgb(243, 243, 243)',\n              plot_bgcolor='rgb(243, 243, 243)' )\nfig = dict(data = new_data, layout = layout)\niplot(fig)","211084de":"# x ekseni S\u0131ralamas\u0131 (Rank)\n# y ekseni \u00c7\u0131k\u0131\u015f Y\u0131llar\u0131\n# Noktalar\u0131n(marker) b\u00fcy\u00fckl\u00fc\u011f\u00fc ve renk tonlar\u0131: Kuzey Amerika Sat\u0131\u015flar\u0131\n\nimport plotly.express as px #renk paleti i\u00e7in olmasada olur\n\ndatatop100=data.head(100)\nfig={\n    \"data\": [\n        {\n            'x':datatop100.Rank,\n            'y':datatop100.Year,\n            'mode':'markers',\n            'marker':{\n                'color':datatop100.Global_Sales,\n                'size' :datatop100.Global_Sales,\n                'showscale':True,\n                \"colorscale\":px.colors.diverging.BrBG\n            },\n            \"text\":\"Name:\"+datatop100.Name+\",\"+\"Publisher:\"+datatop100.Publisher\n        },\n    ],\n    \"layout\":\n        {\n            \"title\":\"Global Sat\u0131\u015f ve Yay\u0131nc\u0131lar\u0131na G\u00f6re En iyi 100 video Oyununun \u00c7\u0131k\u0131\u015f Y\u0131llar\u0131\" ,\n            \"xaxis\":{\n                \"title\":\"Rank\",\n                \"gridcolor\":\"rgb(255,255,255)\",\n                \"zerolinewidth\":1,\n                \"ticklen\":5,\n                \"gridwidth\":1\n            },\n           \"yaxis\":{\n                \"title\":\"Years\",\n                \"gridcolor\":\"rgb(255,255,255)\",\n                \"zerolinewidth\":1,\n                \"ticklen\":5,\n                \"gridwidth\":2\n            },\n            \"paper_bgcolor\":'rgb(248, 248, 255)',\n            \"plot_bgcolor\": 'rgb(248, 248, 255)'\n        }\n}\niplot(fig)\n","106da26e":" #2011 y\u0131l\u0131na filtrelenmi\u015f datasetin ilk 5 samplesi sadece Name,Na_Sales ve Global_Sales Featureleri\ndf2011=data[data.Year==2008].iloc[0:5,:]\n\nfig = {\n  \"data\": [\n    { #trace olu\u015fturuluyor\n      \"values\": df2011.Global_Sales,\n      \"labels\": df2011.Name,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Sonu\u00e7lar\",\n      \"hoverinfo\":\"label+percent+name\", #Feature Name + Oran + genel isim\n      \"hole\": .2,  # olu\u015facak pie \u00e7hart\u0131 ortas\u0131ndaki deli\u011fin b\u00fcy\u00fckl\u00fc\u011f\u00fc\n      \"type\": \"pie\" # trace'in tipi\n    },],\n  \"layout\": {  #layout olu\u015fturuluyor\n        \"title\":\"2011 Y\u0131l\u0131ndaki Global Sat\u0131\u015flar\u0131n\u0131n, Video oyun oranlar\u0131\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"2011 Y\u0131l\u0131ndaki Global Sat\u0131\u015flar\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","3728a598":"data.head()","20c21998":"sns.countplot(data.Genre)\nplt.title(\"Genre\",color = 'Red',fontsize=15)\nplt.xticks(rotation=45)\nplt.show()","9c7ddaaa":"df100=data.head(100)\ndata2=df100.loc[:,[\"Year\",\"Platform\",\"NA_Sales\",\"EU_Sales\"]]\ndata2[\"index\"]=np.arange(1,len(df100)+1) #data2 add new columns name=index, value=0,length df100frame +1\n\nfig = ff.create_scatterplotmatrix(data2, \n                                  diag='box', \n                                  index='index',\n                                  colormap='Portland',\n                                  colormap_type='seq',\n                                  height=1000, width=1200)\niplot(fig)\nplt.show()\n","f1a5664c":"genre_list=list(data.Genre.unique())\nNA_list=[]\nEU_list=[]\nJP_list=[]\nOT_list=[]\n\nfiltre=data.Genre\n\nfor i in genre_list:\n    x=data[filtre == i]\n    NA_list.append(sum(x.NA_Sales) \/ len(x))\n    EU_list.append(sum(x.EU_Sales) \/ len(x))\n    JP_list.append(sum(x.JP_Sales) \/ len(x))\n    OT_list.append(sum(x.Other_Sales) \/ len(x))\n    \nf,ax = plt.subplots(figsize=(15,15))\n\nsns.barplot(x=genre_list , y=NA_list, color='pink', alpha=0.5, label='Kuzey Amerika Sat\u0131\u015flar\u0131')\nsns.barplot(x=genre_list , y=EU_list, color='red', alpha=0.5, label='Avrupa Sat\u0131\u015flar\u0131')\nsns.barplot(x=genre_list , y=JP_list, color='blue', alpha=0.5, label='Japonya Sat\u0131\u015flar\u0131')\nsns.barplot(x=genre_list , y=OT_list, color='green', alpha=0.5, label='Di\u011fer \u00dclke Sat\u0131\u015flar\u0131')\n\nax.legend(loc='upper right' , frameon=True) \nax.set(xlabel='Video Oyun T\u00fcrleri', ylabel='States', title=\"T\u00fcrlere G\u00f6re Video Oyunlar\u0131n\u0131n Ortalama Sat\u0131\u015flar\u0131\")\nplt.show()","26669998":"data.Genre.unique()","a5e0f7b6":"sport_filter=data[data.Genre==\"Sports\"]\nplatform_filter=data[data.Genre==\"Platform\"]\nracing_filter=data[data.Genre==\"Racing\"]\nrole_filter=data[data.Genre==\"Role-Playing\"]\npuzzle_filter=data[data.Genre==\"Puzzle\"]\nmisc_filter=data[data.Genre==\"Misc\"]\nshooter_filter=data[data.Genre==\"Shooter\"]\nsimulation_filter=data[data.Genre==\"Simulation\"]\naction_filter=data[data.Genre==\"Action\"]\nfighting_filter=data[data.Genre==\"Fighting\"]\nadventure_filter=data[data.Genre==\"Adventure\"]\nstrategy_filter=data[data.Genre==\"Stragety\"]","d8b8319b":"\n\ntrace1=go.Histogram(\n    x=sport_filter.Platform,\n    opacity=0.7,\n    name=\"Sports\",\n    marker=dict(color='rgba(151,255,255,0.7)'))\ntrace2=go.Histogram(\n    x=platform_filter.Platform,\n    opacity=0.7,\n    name=\"Platform\",\n    marker=dict(color=\"rgba(74,128,77,0.7)\"))\ntrace3=go.Histogram(\n    x=racing_filter.Platform,\n    opacity=0.7,\n    name=\"Racing\",\n    marker=dict(color=\"rgba(139,101,139,0.7)\"))\ntrace4=go.Histogram(\n    x=role_filter.Platform,\n    opacity=0.7,\n    name=\"Role-Playing\",\n    marker=dict(color=\"rgba(238,232,170,0.7)\"))\ntrace5=go.Histogram(\n    x=puzzle_filter.Platform,\n    opacity=0.7,\n    name=\"Puzzle\",\n    marker=dict(color=\"rgba(139,69,19,0.7)\"))\ntrace6=go.Histogram(\n    x=misc_filter.Platform,\n    opacity=0.7,\n    name=\"Misc\",\n    marker=dict(color=\"rgba(253 ,245 ,230,0.7)\"))\ntrace7=go.Histogram(\n    x=shooter_filter.Platform,\n    opacity=0.7,\n    name=\"Shooter\",\n    marker=dict(color=\"rgba(255 ,228 ,181,0.7)\"))\ntrace8=go.Histogram(\n    x=simulation_filter.Platform,\n    opacity=0.7,\n    name=\"Simulation\",\n    marker=dict(color=\"rgba(205, 133, 63,0.7)\"))\ntrace9=go.Histogram(\n    x=action_filter.Platform,\n    opacity=0.7,\n    name=\"Action\",\n    marker=dict(color=\"rgba(116,173,209,0.7)\"))\ntrace10=go.Histogram(\n    x=fighting_filter.Platform,\n    opacity=0.7,\n    name=\"Fighting\",\n    marker=dict(color=\"rgba(1,15,139,0.7)\"))\ntrace11=go.Histogram(\n    x=adventure_filter.Platform,\n    opacity=0.7,\n    name=\"Adventures\",\n    marker=dict(color=\"rgba(205 ,201, 201,0.7)\"))\ntrace12=go.Histogram(\n    x=strategy_filter.Platform,\n    opacity=0.7,\n    name=\"Stragety\",\n    marker=dict(color=\"rgba(255, 222 ,173,0.7)\"))\n\ndata_new=[trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12]\nlayout_new = go.Layout(barmode='stack',\n                   title='Genre Counts According to Platform',\n                   xaxis=dict(title='Platform'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data_new, layout=layout_new)\niplot(fig)","7c351173":"sport_filter.Platform.unique() # 25 Farkl\u0131(unique) Platform de\u011feri bulunmaktad\u0131r.","a4c8aafc":"sport_filter=data[data.Genre==\"Sports\"]\nplatform_filter=data[data.Genre==\"Platform\"]\nracing_filter=data[data.Genre==\"Racing\"]\nrole_filter=data[data.Genre==\"Role-Playing\"]\npuzzle_filter=data[data.Genre==\"Puzzle\"]\nmisc_filter=data[data.Genre==\"Misc\"]\nshooter_filter=data[data.Genre==\"Shooter\"]\nsimulation_filter=data[data.Genre==\"Simulation\"]\naction_filter=data[data.Genre==\"Action\"]\nfighting_filter=data[data.Genre==\"Fighting\"]\nadventure_filter=data[data.Genre==\"Adventure\"]\nstrategy_filter=data[data.Genre==\"Stragety\"]","6e6ca655":"trace1=go.Bar(\n    x=sport_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=sport_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Sports\",\n    marker=dict(color='rgba(151,255,255,0.7)'))\ntrace2=go.Bar(\n    x=platform_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=platform_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Platforms\",\n    marker=dict(color='rgba(74,128,77,0.7)'))\ntrace3=go.Bar(\n    x=racing_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=racing_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Racings\",\n    marker=dict(color='rgba(139,101,139,0.7)'))\ntrace4=go.Bar(\n    x=role_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=role_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Roles\",\n    marker=dict(color='rgba(238,232,170,0.7)'))\ntrace5=go.Bar(\n    x=puzzle_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=puzzle_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Puzzles\",\n    opacity=0.7,\n    marker=dict(color='red'))\ntrace6=go.Bar(\n    x=misc_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=misc_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Miscs\",\n    marker=dict(color=\"rgba(255,228,181,0.7)\"))\ntrace7=go.Bar(\n    x=shooter_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=shooter_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Shooters\",\n    marker=dict(color=\"rgba(205,133,63,0.7)\"))\ntrace8=go.Bar(\n    x=simulation_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=simulation_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Simulations\",\n    marker=dict(color=\"rgba(116,173,209,0.7)\"))\ntrace9=go.Bar(\n    x=action_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=action_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Actions\",\n    marker=dict(color=\"rgba(188,145,202,0.7)\"))\ntrace10=go.Bar(\n    x=fighting_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=fighting_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Fightings\",\n    marker=dict(color='rgba(104,57,119,0.7)'))\ntrace11=go.Bar(\n    x=adventure_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=adventure_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Adventures\",\n    marker=dict(color='rgba(245,253,104,0.7)'))\ntrace12=go.Bar(\n    x=strategy_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index,\n    y=strategy_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values,\n    name=\"Stragetys\",\n    marker=dict(color='rgba(138,72,40,0.7)'))\n                \ndata_new=[trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12]      \n\nlayout_new = go.Layout(\n    barmode='stack',\n    title='Total Global Sales According to Platform and Genre',\n    xaxis=dict(title='Platform'),\n    yaxis=dict( title='Global Sales(In Millions)'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\nfig=go.Figure(data=data_new,layout=layout_new)\niplot(fig)","4f0723db":"genre=pd.DataFrame(data.groupby(\"Genre\")[[\"NA_Sales\",\"EU_Sales\",\"JP_Sales\",\"Other_Sales\",\"Global_Sales\"]].sum())\ngenre.reset_index(level=0, inplace=True)   # add index\ngenrecount=pd.DataFrame(data[\"Genre\"].value_counts())\ngenrecount.reset_index(level=0, inplace=True) # add index\ngenrecount.rename(columns={\"Genre\": \"Counts\",\"index\":\"Genre\"}, inplace=True) #dataframe columns rename and save\ngenre=pd.merge(genre,genrecount,on=\"Genre\") # merge ==> dataframe1 + dataframe2 = new dataframe ==> genre + genrecount = genre\n\n\n\n#for Tabla Design\ntable_data=genre[[\"Genre\",\"NA_Sales\",\"EU_Sales\",\"JP_Sales\",\"Other_Sales\",\"Global_Sales\"]]  # Tablo i\u00e7in genreden belirtilen alanlar \u00e7ekildi\n# Tablo i\u00e7indeki kolon isimleri de\u011fi\u015ftirildi.\ntable_data = table_data.rename(columns = {\"NA_Sales\": \"Kuzey Amerika\",  \n                                  \"EU_Sales\":\"Avrupa\", \n                                  \"JP_Sales\": \"Japonya\",\"Other_Sales\":\"Di\u011fer\",\"Global_Sales\":\"Total\"})\n\n\nx=genre.Genre \nNA_Perce=list(genre[\"NA_Sales\"]\/genre[\"Global_Sales\"]*100)       #oranlar1\nEU_Perce=list(genre[\"EU_Sales\"]\/genre[\"Global_Sales\"]*100)       #oranlar2\nJP_Perce=list(genre[\"JP_Sales\"]\/genre[\"Global_Sales\"]*100)       #oranlar3\nOther_Perce=list(genre[\"Other_Sales\"]\/genre[\"Global_Sales\"]*100) #oranlar4\n\ntrace1=go.Bar(\n    x=x,\n    y=NA_Perce,\n    name='Kuzey Amerika',\n    xaxis='x2',yaxis='y2',\n    marker=dict(color=\"blue\",\n                opacity=0.7,\n                line=dict(color='rgb(8,48,107)',width=3)))\n\ntrace2=go.Bar(\n    x=x,\n    y=EU_Perce,\n    name='Avrupa',\n    xaxis='x2',yaxis='y2',\n    marker=dict(color=\"red\",\n                opacity=0.7,\n                line=dict(color='rgb(8,48,107)',width=3)))\n\ntrace3=go.Bar(\n    x=x,\n    y=JP_Perce,\n    name='Japonya',\n    xaxis='x2',yaxis='y2',\n    marker=dict(color=\"orange\",\n                opacity=0.7,\n                line=dict(color='rgb(8,48,107)',width=3)))\n\ntrace4=go.Bar(\n    x=x,\n    y=Other_Perce,\n    name='Di\u011fer B\u00f6lgeler',\n    xaxis='x2',yaxis='y2',\n    marker=dict(color=\"purple\",\n                opacity=0.7,\n                line=dict(color='rgb(8,48,107)',width=3)))\n\ntrace5=go.Table(                      #Table=> Header,Cells,Domain ==> Table(header,cells,domain),parameter\n    header = dict(\n    values = table_data.columns,\n    line = dict(color = 'rgb(8,48,107)',width=3),\n    fill = dict(color = [\"darkslateblue\",\"blue\",\"red\", \"orange\",\"purple\",\"green\"]),\n    align = ['left','center'],\n    font = dict(color = 'white', size = 12),\n    height=30,\n  ),\n    # round ile her bir de\u011fer ondal\u0131k say\u0131ya yuvarlan\u0131yor.\n  cells = dict(\n    values = [table_data.Genre,round(table_data[\"Kuzey Amerika\"]),round(table_data[\"Avrupa\"]), round(table_data[\"Japonya\"]), round(table_data[\"Di\u011fer\"]),round(table_data[\"Total\"])],\n    height=30,\n    line = dict(color = 'rgb(8,48,107)',width=3),   #h\u00fccre \u00e7izgilerinin renk ve kal\u0131nl\u0131\u011f\u0131\n    fill = dict(color = [\"silver\",\"rgb(158,202,225)\",\"darksalmon\", \"gold\",\"mediumorchid\",\"yellowgreen\"]), # H\u00fccrelerin renkleri\n    align = ['left', 'center'],\n    font = dict(color = '#506784', size = 12)\n  ),\n    domain=dict(x=[0.60,1],y=[0,0.95]),   # tablonun duraca\u011f\u0131 konum, belirlenmezse default olarak di\u011fer tracelerin \u00fcst\u00fcn\u00fc kapat\u0131r.\n)\n\n# Create Data (Traceler biraraya topland\u0131 ve fig\u00fcr parametresi i\u00e7in haz\u0131r hale geldi.)\ndata_new = [trace1, trace2,trace3,trace4,trace5]\n\n# Create layout (Layout Olu\u015fturuluyor)\nlayout_new = go.Layout(barmode='stack',autosize=False,width=1200,height=650,\n                legend=dict(\n                x=.58, y=0,orientation=\"h\",font=dict(family='Courier New, monospace',size=11,color='#000'),\n                bgcolor='beige', bordercolor='beige', borderwidth=1),\n                title='North America, Europe, Japan and Other Sales Percentage and Amounts According to Genre',\n                \n                xaxis2=dict(domain=[0, 0.50],anchor=\"y2\", title='Genre'),\n                paper_bgcolor='beige',plot_bgcolor='beige',\n                annotations=[ dict( text='Sales Percentage According to Region',\n                                    x=0.08,y=1.02,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                    font=dict(size=15,family=\"Courier New, monospace\"),\n                                    bgcolor=\"lightyellow\",borderwidth=5\n                                  ), #dict1 end\n                              dict( text='Total Sales(In Millions)'\n                                    ,x=0.9,y=1.02,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                   font=dict(size=15,family='Courier New, monospace'),\n                                   bgcolor=\"lightyellow\",borderwidth=5\n                                   )#dickt2 end\n                ]# annotations end\n)#layout end\nfig=go.Figure(data=data_new,layout=layout_new)\niplot(fig)","19df2165":"plt.subplots(figsize=(10,10))\nwordcloud=WordCloud(\n    background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(data.Name)) #kullan\u0131lan kelimeleri ay\u0131r ve en \u00e7ok kullan\u0131lanlar\u0131 oranlayarak b\u00fcy\u00fct.\nplt.imshow(wordcloud ,interpolation='bilinear')\nplt.axis('off')  # x ve y eksenlerini kapat\nplt.show()\n","b7568eb6":"data.head()","e52c909f":"datatop100=data.head(100)\n#Global_Sales min max y\u00f6ntemi ile normalize(Her bir de\u011ferin (0-1) aral\u0131\u011f\u0131na indirgenmesi) ediliyor.\ndatatop100[\"Norm_Sales\"] = (datatop100.Global_Sales - np.min(datatop100.Global_Sales)) \/ (np.max(datatop100.Global_Sales) - (np.min(datatop100.Global_Sales)))\ndatatop100.Rank = datatop100.Rank.astype('str') # type=str\ndatatop100.Global_Sales = datatop100.Global_Sales.astype('str') # type=str\ndatatop100.Year = datatop100.Year.astype('str') # type = str\n\ntrace1=go.Scatter3d(\n    x=datatop100.Year,\n    y=datatop100.Publisher,\n    z=datatop100.Norm_Sales,\n    text=\"Name:\" + datatop100.Name + \" , \" + \"Rank: \" + datatop100.Rank + \" , \" \n    +\"Year: \" + datatop100.Year + \" , \" +  \"Global Sales: \" + datatop100.Global_Sales + \"Milyon\",\n    mode='markers',\n     marker=dict(\n        size=datatop100.NA_Sales, # markerlar\u0131n b\u00fcy\u00fckl\u00fckleri Amerika Sat\u0131\u015flar\u0131na G\u00f6re olsun\n        color = datatop100.Norm_Sales, #Renk yo\u011funluklar\u0131 Normalize edilmi\u015f Global Sat\u0131\u015flara g\u00f6re olsun\n        colorscale = \"Rainbow\",\n        colorbar = dict(title = 'Global Sat\u0131\u015fa G\u00f6re'), # renkleri g\u00f6steren k\u0131sm\u0131n ba\u015fl\u0131\u011f\u0131\n        line=dict(color='rgb(140, 140, 170)'),)\n)\ndata_new = [trace1]\n\nlayout_new=go.Layout(height=800, width=800, \n                    title='En iyi 100 Video Oyununun \u00c7\u0131k\u0131\u015f Y\u0131l\u0131, Yay\u0131nc\u0131s\u0131 ve Global Sat\u0131\u015f\u0131',titlefont=dict(color='rgb(20, 24, 54)'),\n                    scene = dict(\n                    xaxis=dict(title='\u00c7\u0131k\u0131\u015f Y\u0131l\u0131',titlefont=dict(color='rgb(20, 24, 54)')),\n                    yaxis=dict(title='Yay\u0131nc\u0131',titlefont=dict(color='rgb(20, 24, 54)')),\n                    zaxis=dict(title='Global Sat\u0131\u015f',titlefont=dict(color='rgb(20, 24, 54)')),\n                    bgcolor = 'whitesmoke'\n                    ))\nfig=go.Figure(data=data_new, layout=layout_new)\niplot(fig)","2807458a":"<a id=\"10\"><\/a> <br>\n# T\u00fcr ve Platform'a G\u00f6re Global Sat\u0131\u015flar (Global Sales by Type and Platform)\n\n    \u00d6rnek Yap\u0131labilecek Bir \u00c7\u0131kar\u0131m: T\u00fcr\u00fc(Genre) Aksiyon, Platformu PS olan video oyunlar\u0131n\u0131n Globalde Sat\u0131\u015f\u0131ndan elde edilen miktar (milyon) cinsinden.","cd3638c6":"<a id=\"3\"><\/a> <br>\n# En iyi 100 Video Oyunu Sat\u0131\u015flar\u0131 (Top 100 Video Game Sales)","09bb97d6":"# INTRODUCTION \n\n    Bu kernelde, video oyunlar\u0131 sat\u0131\u015flar\u0131 isimli veriseti analiz edilerek, plotly k\u00fct\u00fcphanesi ile g\u00f6rselle\u015ftirme hedeflenmi\u015ftir.\n    \n    Rank - Genel Sat\u0131\u015flar\u0131n S\u0131ralamas\u0131\n    Name - Oyun ismi\n    Platform - Oyun s\u00fcr\u00fcm\u00fc,platformu (i.e. PC,PS4, etc.)\n    Year - Oyunun \u00e7\u0131k\u0131\u015f y\u0131l\u0131\n    Genre - Oyunun T\u00fcr\u00fc\n    Publisher - Oyun Yay\u0131nc\u0131s\u0131\n    NA_Sales - Kuzey Amerika'da sat\u0131\u015flar (millions)\n    EU_Sales - Avrupada sat\u0131\u015flar (in millions)\n    JP_Sales - Japonyada sat\u0131\u015flar (in millions)\n    Other_Sales - Di\u011fer \u00fclkelerde sat\u0131\u015flar (in millions)\n    Global_Sales - D\u00fcnya \u00e7ap\u0131nda toplam sat\u0131\u015f\n    \n    \n    -----------------------------------------------------------------------------------------------------\n    This kernel is analyzed with the dataset called video games sales, visualization is aimed with plotly libraries.\n    \n    Rank - Ranking of overall sales\n    Name - The games name\n    Platform - Platform of the games release (i.e. PC,PS4, etc.)\n    Year - Year of the game's release\n    Genre - Genre of the game\n    Publisher - Publisher of the game\n    NA_Sales - Sales in North America (in millions)\n    EU_Sales - Sales in Europe (in millions)\n    JP_Sales - Sales in Japan (in millions)\n    Other_Sales - Sales in the rest of the world (in millions)\n    Global_Sales - Total worldwide sales.\n<br>\n* [Dataset nitelik incelemesi (Loading Data and Explanation of Features)](#1)\n* [En iyi 100 Yay\u0131nc\u0131,Platform ve T\u00fcr (Top 100 Publishers, Platforms and Genres)](#2)\n* [En iyi 100 Video Oyunu Sat\u0131\u015flar\u0131 (Top 100 Video Game Sales)](#3)\n* [Global Sat\u0131\u015f ve Yay\u0131nc\u0131lar\u0131na G\u00f6re En iyi 100 video Oyununun \u00c7\u0131k\u0131\u015f Y\u0131llar\u0131 (Release Years of Top 100 Video Games According to Global Sales and Publishers)](#4)\n* [En iyi 5 Video Oyununun 2011 y\u0131l\u0131nda Global Sat\u0131\u015flar\u0131 (Global Sales of the Top 5 Video Games in 2011)](#5)\n* [En \u00e7ok Sat\u0131\u015f Yapan Oyun T\u00fcrleri (Top Selling Game Genre's)](#6)\n* [Y\u0131l, Platform, Kuzey Amerika ve Avrupa Sat\u0131\u015flar\u0131na G\u00f6re En iyi 100 Video Oyunu Aras\u0131ndaki \u0130li\u015fki (Relationship Between The 100 Best Video Games By Year, Platform, North America, and Europe Sales)](#7)\n* [T\u00fcrlere G\u00f6re Sat\u0131\u015f Oranlar\u0131 (Sales Rates by Genre)](#8)\n* [T\u00fcr ve Platform Aras\u0131ndaki \u0130li\u015fki (Relationship Between Genre and Platform)](#9)\n* [T\u00fcr ve Platform'a G\u00f6re Global Sat\u0131\u015flar (Global Sales by Type and Platform)](#10)\n* [T\u00fcr ve B\u00f6lgelere G\u00f6re Sat\u0131\u015flar (North America, Europe, Japan and Other Sales Percentage and Amounts According to Genre)](#11)\n* [Oyun \u0130simleri ile Kelime Bulutu (Word Cloud with Game Names)](#12)\n* [En iyi 100 oyunun \u00e7\u0131k\u0131\u015f y\u0131llar\u0131, global sat\u0131\u015flar\u0131 ve yay\u0131nc\u0131lar\u0131 ile 3D kabarc\u0131k grafi\u011finde g\u00f6sterimi (Release year of the top 100 video games with 3d bubble, global sale and publisher)](#13)","6fd64e44":"<a id=\"13\"><\/a> <br>\n# En iyi 100 oyunun \u00e7\u0131k\u0131\u015f y\u0131llar\u0131, global sat\u0131\u015flar\u0131 ve yay\u0131nc\u0131lar\u0131 ile 3D kabarc\u0131k grafi\u011finde g\u00f6sterimi (Release year of the top 100 video games with 3d bubble, global sale and publisher)\n (3D Bubble Chart with Release Years, Global Sales and Publishers of Top 100 Games)\n","a1219dab":"<a id=\"12\"><\/a> <br>\n# Oyun \u0130simleri ile Kelime Bulutu (Word Cloud with Game Names)\n\n    from wordcloud import WordCloud\n    wordcloud k\u00fct\u00fcphanesi plotly farkl\u0131 bir k\u00fct\u00fcphanedir.","c0feb0b8":"<a id=\"4\"><\/a> <br>\n# Global Sat\u0131\u015f ve Yay\u0131nc\u0131lar\u0131na G\u00f6re En iyi 100 video Oyununun \u00c7\u0131k\u0131\u015f Y\u0131llar\u0131 (Release Years of Top 100 Video Games According to Global Sales and Publishers)","5e269baa":"<a id=\"6\"><\/a> <br>\n# En \u00e7ok Sat\u0131\u015f Yapan Oyun T\u00fcrleri (Top Selling Game Genre's)","e78fd97c":"    x=sport_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().index\n    y=sport_filter.groupby(\"Platform\")[\"Global_Sales\"].sum().values\n    \n    Yukar\u0131daki iki kullan\u0131ma bakt\u0131\u011f\u0131m\u0131zda, sport_filter.groupby(\"Platform\") ile benim output'um platform kolonuna g\u00f6re yap\u0131land\u0131r\u0131ls\u0131n dedik.\n    Yani Platform kolonunda 25 adet uniq de\u011fer oldu\u011funa g\u00f6re, outputum'da sadece uniq olarak Platformlar bulunsun dedik.\n    \n    sport_filter.groupby(\"Platform\")[\"Global_Sales\"].sum() ifadesinin tamam\u0131n\u0131 ele al\u0131rsak: Platformlara g\u00f6re yap\u0131land\u0131r\u0131lan(gruplanan) sample'lar\u0131n \"Global_Sales\" kolonlar\u0131na(feature) bak ve bunlar\u0131 topla(sum) dedik. Yani 100 adet sample oldu\u011funu d\u00fc\u015f\u00fcn\u00fcrsek Platform feature'sinde \u00f6rne\u011fin 1. uniqe de\u011fer olan \"Wii\" platform de\u011ferine kar\u015f\u0131l\u0131k gelen b\u00fct\u00fcn Global_Sales de\u011ferlerini topla ve ayn\u0131 i\u015flemi kalan 24 platform t\u00fcr\u00fc i\u00e7inde yap demi\u015f olduk.\n    \n    index ile bunlar\u0131n indislerine ula\u015ft\u0131k,values ile ise her bir indise kar\u015f\u0131l\u0131k gelen de\u011fere yani sum edilmi\u015f global_sales'e ula\u015ft\u0131k.","ae756897":"<a id=\"2\"><\/a> <br>\n# En iyi 100 Yay\u0131nc\u0131,Platform ve T\u00fcr (Top 100 Publishers, Platforms and Genres)","7c408428":"<a id=\"9\"><\/a> <br>\n# T\u00fcr ve Platform Aras\u0131ndaki \u0130li\u015fki (Relationship Between Genre and Platform)","eef38566":"<a id=\"7\"><\/a> <br>\n# Y\u0131l, Platform, Kuzey Amerika ve Avrupa Sat\u0131\u015flar\u0131na G\u00f6re En iyi 100 Video Oyunu Aras\u0131ndaki \u0130li\u015fki (Relationship Between The 100 Best Video Games By Year, Platform, North America, and Europe Sales)","c8db4b0d":"<a id=\"11\"><\/a> <br>\n# T\u00fcr ve B\u00f6lgelere G\u00f6re Sat\u0131\u015flar (North America, Europe, Japan and Other Sales Percentage and Amounts According to Genre)\n\n    1.) Datay\u0131, t\u00fcr(genre)'e g\u00f6re gruplayarak, her t\u00fcr i\u00e7in her b\u00f6lge(NA,EU,JP,OT,GS) sat\u0131\u015flar\u0131n\u0131 bulal\u0131m.\n    2.) Her b\u00f6lge sat\u0131\u015f\u0131n\u0131n global sat\u0131\u015fa oran\u0131n\u0131 elde edelim.\n    3.) Her b\u00f6lge i\u00e7in t\u00fcrlerin Global sat\u0131\u015fa olan Sonu\u00e7lar\u0131m\u0131z\u0131 Bar ile plot edelim.\n    4.) Her b\u00f6lge i\u00e7in t\u00fcrlerin total sat\u0131\u015f\u0131n\u0131 veren sonu\u00e7lar\u0131m\u0131z\u0131 tabloda listeleyelim\n    ","ccdd1c64":"<a id=\"8\"><\/a> <br>\n# T\u00fcrlere G\u00f6re Sat\u0131\u015f Oranlar\u0131 (Sales Rates by Genre)","9d8b610f":"<a id=\"5\"><\/a> <br>\n# En iyi 5 Video Oyununun 2011 y\u0131l\u0131nda Global Sat\u0131\u015flar\u0131              (Global Sales of the Top 5 Video Games in 2011)","96f8fc6c":"<a id=\"1\"><\/a> <br>\n# Dataset nitelik incelemesi (Loading Data and Explanation of Features)"}}