{"cell_type":{"6a7d52d0":"code","692a9f9e":"code","c9f15884":"code","d7707c55":"code","9955b3db":"code","506efa41":"code","4aa3edc2":"code","31f65bde":"code","3271e2c1":"code","740d9761":"code","cfd75a37":"code","6307959f":"code","273f0b77":"code","7eb52bd6":"code","8609f3d0":"code","a280ad66":"code","70dcc085":"code","dff7ea22":"code","42de7ac4":"code","88a3af92":"code","ca6f84d5":"code","aca38fa5":"code","2c3f09d7":"code","2f836d5e":"code","ca2419cb":"code","617dfb86":"code","bffe1098":"code","43bd93bb":"code","8815638d":"code","190f5e4d":"code","6bbbb9ea":"code","c8ffe70d":"code","60b7c452":"code","85a65569":"code","ab18cc3a":"code","a97e6217":"code","a8c61dd4":"code","a641703d":"code","1ab9487a":"code","77102611":"code","7c9aedde":"code","2064ab22":"markdown","cadf31ed":"markdown","916456b5":"markdown","6aca3467":"markdown","a9d45170":"markdown"},"source":{"6a7d52d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will l\n#ist the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","692a9f9e":"\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport seaborn as sns\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n","c9f15884":"movies = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\nhappy2015 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\n","d7707c55":"print(happy2015.info())\n\n#dataset looks normal since there are 158 entries and all of them are not null. \n#Also strings are in object form and numerical values are in float or int form which is good\n","9955b3db":"# Since I do not want work with long column name whit spaces I created new column with same values then drop the long column named column.\nhappy2015['GDP'] = happy2015['Economy (GDP per Capita)']\n\nhappy2015.drop(['Economy (GDP per Capita)'],axis = 1,inplace=True)\n\n","506efa41":"#Sorting according to GDP . From High GDP to LOW  GDP\nnew_index = happy2015['GDP'].sort_values(ascending = False).index.values\nsorted_happy2015 = happy2015.reindex(new_index)","4aa3edc2":"\n#BAR PLOT\n# In here I tried to visualize countries with respect to its GDP's\n\nplt.figure(figsize = (45,25))\nsns.barplot(x = sorted_happy2015['Country'] , y =sorted_happy2015['GDP'] )\nplt.title(\"Countries vs GDP per Capita\")\nplt.xticks(rotation = 90)\nplt.xlabel(\"Countries\")\nplt.ylabel(\"GDP\")\nplt.show()\n","31f65bde":"\n#%%\n#In here I tried to understand which region is the happiest in 2015\ntrace1 = go.Histogram(\n    x = happy2015['Region'],\n    opacity=0.75,\n    name = \"Reg\",\n)\ndata = [trace1]\nlayout = go.Layout(barmode='overlay',\n                   title=' #Number of Happy Countries in Region',\n                   xaxis=dict(title='Regions'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3271e2c1":"#%% Correlation Map\nf,ax = plt.subplots( figsize = (5,5))\nsns.heatmap(happy2015.corr() , annot = True , linewidths = 2 ,linecolor = 'blue', fmt = '.1f' , ax = ax )\nplt.title(\"Correlation Matrix\")\nplt.show()\n\n","740d9761":"\n#%% Point Plots     #Point Plot data Preparation\n\n#SORT\u0130NG according to Happines Score\nnew_index2 = happy2015['Happiness Score'].sort_values(ascending = False).index.values\nsorted2_happy2015 = happy2015.reindex(new_index2)\n\n#NORMALIZATATION\nsorted_happy2015['GDP'] = sorted_happy2015['GDP'] \/max(sorted_happy2015['GDP']) \nsorted2_happy2015['Happiness Score'] = sorted2_happy2015['Happiness Score'] \/ max(sorted_happy2015['Happiness Score'])\n\ndata2 = pd.concat([sorted_happy2015,sorted2_happy2015['Happiness Score']],axis = 1,)\ncolumn_names = data2.columns.values\ncolumn_names[3] = \"CHANGED\"\ndata2.columns = column_names\ndata2.drop([\"CHANGED\"],inplace = True,axis=1)","cfd75a37":"\n#%%\n#In this plot I have tried to see whether is there any relationship between Happiness score and GDP ratio\n# Point Plot visualization\nf,ax1 = plt.subplots(figsize = (30,10))\nsns.pointplot(x='Region' , y ='GDP',data = data2 , color = 'lime' ,alpha = 0.8)\nsns.pointplot(x = 'Region' , y = 'Happiness Score' ,data = data2 , color = 'red' , alpha = 0.8 )\nplt.title('GDP vs Happiness Score ',fontsize = 20 , color = 'blue' )\n\nplt.text(8,0.75,'Happiness Score', color = 'red' , fontsize = 17 ,style = 'italic' )\nplt.text(8,0.70,'GDP ratio' , color = 'lime',fontsize = 17 , style = 'italic')\n\nplt.xlabel('Regions',fontsize = 15 ,color = 'blue' )\nplt.ylabel ('Values' , fontsize = 15 , color ='blue')\nplt.grid()\nplt.show()","6307959f":"#%% SNS lmplot\n#For understand distribution and correlation of GDP and Happiness Score\nsns.lmplot(x = 'GDP',y ='Happiness Score',data = data2)\n","273f0b77":"#%% SNS KDE PLOT\n#For understand distribution and correlation of GDP and Family\nsns.kdeplot(data2.GDP,data2.Family,shade = True ,cut = 1)","7eb52bd6":"#%%\n#Another visualization For understand distribution and correlation of GDP and Happiness Score\nsns.kdeplot(data2.GDP,data2['Happiness Score'],shade = True , cut = 1)\n","8609f3d0":"#Horizontal Bar\n\n#Creating list for unique Regions\nregion_list = data2['Region'].unique()\n\nf,ax = plt.subplots(figsize=(9,15))\n\nsns.barplot(x='Family', y='Region', data = data2,color = 'green' , alpha = 0.5 , label = 'Family')\nsns.barplot(x='Freedom', y='Region', data = data2,color = 'blue' , alpha = 0.5 , label = 'Freedom')\nsns.barplot(x='Generosity', y='Region', data = data2,color = 'purple' , alpha = 0.5 , label = 'Generosity')\nsns.barplot(x='Trust (Government Corruption)', y='Region', data = data2,color = 'red' , alpha = 0.5 , label = 'Trust (Government Corruption)')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu framen gorunurlugu b\u00f6lme \nax.set(xlabel='Percentage', ylabel='Region',title = \"Percentage of properties According to States \")\n","a280ad66":"#%% Joint Plots Freedom vs Corruption\n\ng = sns.jointplot(x = data2.Freedom , y = data2['Trust (Government Corruption)'], kind ='kde' ,size = 7 )\nplt.show()\n","70dcc085":"#%% Another Joint plot \n#For understand distribution and correlation of Freedom and Trust( Government Corruption ) Score\ng = sns.jointplot(x = data2.Freedom , y = data2['Trust (Government Corruption)'], kind ='scatter' ,size = 7 )\nplt.show()","dff7ea22":"#%% Another Joint plot\n#Different version of upper plot with same data\ng = sns.jointplot(x = data2.Freedom , y = data2['Trust (Government Corruption)'], kind ='reg' ,size = 7 )\nplt.show()","42de7ac4":"#%% Another Joint plot\n#Different version of upper plot with same data\ng = sns.jointplot(x = data2.Freedom , y = data2['Trust (Government Corruption)'], kind ='resid' ,height = 7 )\nplt.show()","88a3af92":"#%% Another Joint plot\n#Different version of upper plot with same data\ng = sns.jointplot(x = data2.Freedom , y = data2['Trust (Government Corruption)'], kind ='hex' ,size = 7 )\nplt.show()","ca6f84d5":"#%% data3 is dataframe with family and happiness score\n\ndata3 = data2[['Family','Happiness Score']]\ndata3['Family'] = data3['Family']\/max(data3['Family'])\n\nsns.pairplot(data3)\nplt.show()","aca38fa5":"#To see distriubt\nsns.jointplot(x = data2.Family, y = data2['Happiness Score'], kind = 'kde' , height = 7 )","2c3f09d7":"\n#%%  JointPlot with another example\n\ng = sns.jointplot(\"Happiness Score\", \"Family\", data=data3,size=5, ratio=3, color=\"r\")","2f836d5e":"#%%  Pie Chart  matplot visualization\n\n#Distribution of regions of first 30 happiest countries\n\n#DATA PREPARAT\u0130ON\nhappy2015.Region.dropna(inplace = True)\nhappy2015_top30 = happy2015.iloc[0:30,:]\nlabels  = happy2015_top30.Region.value_counts().index\nexplode  = [0,0,0,0,0,0]\n\nsizes = happy2015_top30.Region.value_counts().values\n\n\n\n#Visualization \nplt.figure( figsize = (7,7))\nplt.pie(sizes, explode = explode ,labels=labels , autopct = '%1.1f%%')\nplt.show()","ca2419cb":"#%% Count Plot\n\n#In here I classified the countries according to their GDP's as rich and poor . \n#Then I tried to see how many of the countries rich in the dataframe . \n#It can bee seen there are more rich countries than poor countries in our data\navg = np.mean(happy2015.GDP) #average with numpy method\n\nRichness = [\"rich\" if each > avg else \"poor\" for each in happy2015.GDP ] #classification according to GDP\ndataframe = pd.DataFrame({ 'richness' : Richness})\nsns.countplot(x = dataframe.richness)\n\n\n","617dfb86":"#%% Violin Plot\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data3, palette=pal, inner=\"points\") #sadece say\u0131sal verileri al\u0131p g\u00f6steriyor \n#en \u015fi\u015fman oldu\u011fu yerler datan\u0131n en \u00e7ok nerede oldu\u011funu g\u00f6steriyor\nplt.show()","bffe1098":"movies.info()","43bd93bb":"#AFTER THIS PART , we are going with movies dataset\n#DATA CLEANING\n#to_drop = ['homepage','id','tagline','spoken_languages']\n#movies.drop(to_drop,inplace = True , axis = 1)\n        \n#movies[movies.budget == 0]\nmovies.budget.replace(0,\"NA\",inplace = True)\n","8815638d":"movies.dropna(axis = 0,inplace = True)\n\ndf  = movies[movies.budget !=\"NA\"]\ndf.reset_index(inplace  = True)\ndf = df.drop(['index'] , axis = 1)\n\ndf.budget = df.budget.astype(float)","190f5e4d":"\nnew_index = (df['popularity'].sort_values(ascending = False).index.values)\n\nsortedDfPop = df.reindex(new_index)\n\ndfGraph = sortedDfPop[['original_title','popularity','vote_count']]\ndfGraph = dfGraph.iloc[:100,:]\n\ndfGraph['popularity'] = dfGraph['popularity'] \/ max(dfGraph['popularity']) #Normalization\ndfGraph['vote_count'] = dfGraph['vote_count'] \/ max(dfGraph['vote_count']) #Normalization","6bbbb9ea":"#Plotly Line Plot\n\n#Creating trace1 \ntrace1 = go.Scatter(\n        x = dfGraph.original_title,\n        y = dfGraph.popularity,\n        mode = \"lines\",\n        name =\"popularity\",\n        marker = dict(color = 'rgba(16,112,2,0.8)'),\n        text = dfGraph.original_title)\n\ntrace2 = go.Scatter(\n        x = dfGraph.original_title,\n        y = dfGraph.vote_count,\n        mode =\"lines\",\n        name = \"vote_count\",\n        text = dfGraph.original_title)\ndata = [trace1 , trace2]\n\nlayout = dict (title = 'Percentage of popularity vs vote_count of Top 100 Movies',\n               xaxis = dict(title = 'Movies',ticklen = 5 , zeroline =False),\n               yaxis = dict(title =\"Percentages\",ticklen=20, zeroline = True))\n\nfig = dict(data = data , layout = layout)\niplot(fig,filename='simple-line')\n","c8ffe70d":"#%% Plotly Bar Plot\n\n# DATA PREPARATION\n\nsortedDfPop.reset_index(inplace = True)\nsortedDfPop = sortedDfPop.drop(['index'] , axis = 1)\ndate = []\nfor each in sortedDfPop['release_date']:\n    date.append(each.split(\"-\")[0])\nsortedDfPop[\"date\"] = date\n","60b7c452":"#%% Plotly Bar Plot \n\ntop5 = sortedDfPop[:5]\ntop5\n\ntrace1 = go.Bar(\n        x = top5.original_title,\n        y = top5.revenue,\n        name = \"revenue\",\n        marker = dict( color = 'rgba(255,174,255,0.5)',\n                      line = dict(color = 'rgba(0,0,0,1)',\n                      width = 0.5)),\n                      text=top5.date,\n        )\n        \ntrace2 = go.Bar(\n        x = top5.original_title,\n        y = top5.budget,\n        name = \"budget\",\n        marker = dict ( color = 'rgba(0,255,146,0.5)',\n                       line = dict(color = 'rgba(0,0,0,1)',\n                                   width = 0.5)),\n                       text = top5.date)\ndata=[trace1,trace2]\nlayout = go.Layout(\n        barmode = \"group\",\n        title = \"Top5 Popular Movies's Revenues vs budget\")\nfig = go.Figure(data = data , layout =layout)\niplot(fig)","85a65569":"#%% Farkl\u0131 bir Bar plot\n\n\n# prepare data frames\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n\ny_saving =[ each for each in top5.revenue] \ny_net_worth  = [float(each) for each in top5.budget]\nx_saving = [each for each in top5.original_title]\nx_net_worth  = [each for each in top5.original_title]\n\ntrace0 = go.Bar(\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='research',\n                orientation='h',\n)\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='income',\n)\n\nlayout = dict(\n                title='Citations and income',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)\n","ab18cc3a":"#%% Pie Chart Plotly \n\nuniqueYears = sortedDfPop.date.unique()\nmovie2014 = sortedDfPop[sortedDfPop.date == \"2014\"].iloc[:10,:]\nmovie2015 = sortedDfPop[sortedDfPop.date == \"2015\"].iloc[:10,:]\nmovie2016 = sortedDfPop[sortedDfPop.date == \"2016\"].iloc[:10,:]\n\npop2014 = sum(movie2014.popularity)\/len(movie2014.popularity)\npop2015 = sum(movie2015.popularity)\/len(movie2015.popularity)\npop2016 = sum(movie2016.popularity)\/len(movie2016.popularity)\n\n\nlabels = ['Top10Popularity-2014','Top10Popularity-2015','Top10Popularity-2016']\n\npie_list = [pop2014,pop2015,pop2016]\n\ncolors = ['#FEBFB3', '#E1396C', '#96D38C', '#D0F9B1']\n\n\ntrace1  = go.Pie(labels = labels ,\n                 values =pie_list ,\n                 hoverinfo = \"label+percent+value\",\n                 textinfo = \"label+percent\",\n                 textfont = dict(size = 20),\n                 hole = .1,\n                 marker=dict(colors=colors,line=dict(color='#000000', width=2))\n                                                     )\n                                     \nlayout = go.Layout(\n        title = \"Avg.Popularity Of Top10Movies with respect to Years\",\n        annotations = [\n                       {\n                       \"font\":  {\"size\" : 14},\n                       \"showarrow\" : False ,\n                       \"text\" : \"Popularity\",\n                       \"x\" : 0.30,\n                       \"y\" : 1 \n                       }])\n                       \n\ndata = [trace1]\n\nfig  = go.Figure( data = data , layout = layout)\niplot(fig)\n","a97e6217":"#data preparation\nfirst20 = movies.iloc[:20,:]\nfirst20.budget =first20.budget.astype(int)\nfirst20.vote_average = first20.vote_average.astype(int)\n\n#%% Buble Charts\n\nmoviesBudget  = [float(each)\/5000000for each in first20.budget]\nruntime = [float(each) for each in first20.runtime]\ndata = [\n    {\n        'y': first20.vote_average,\n        'x': first20.title,\n        'mode': 'markers',\n        'marker': {\n            'color': runtime,\n            'size': moviesBudget,\n            'showscale': True,\n        },\n        \"text\" :  first20.title\n    }\n]\n\niplot(data)","a8c61dd4":"#%% Word Cloud\nfrom wordcloud import WordCloud\nfrom collections import Counter\n\nword_list = []\n\nfor index,row in movies.iterrows():\n    all_words = row['overview'].split(\" \")\n    for each in all_words :\n        word_list.append(each)\n\nword_count1 = Counter(word_list)\nmost_common_names =word_count1.most_common(90)\n\nmost_common_names = most_common_names[33:]\n#%%\nplt.subplots(figsize = (9,9))\nwordcloud = WordCloud(\n        background_color = \"white\",\n        width = 512 ,\n        height = 384).generate(\" \".join(word_list))\nplt.imshow(wordcloud) #img \u0131 plot ettirmek i\u00e7in kullan\u0131l\u0131yor resim bu asl\u0131nda\nplt.axis('on')\nplt.show()","a641703d":"#%% box Plot\n\n\ntrace1 = go.Box(\n        y = sortedDfPop.budget\/max(sortedDfPop.budget),\n        name = \"distribution of budget of movies\",\n        marker = dict(color = 'rgba(220,54,22,0.6)')\n)\ntrace2 = go.Box(\n        y = sortedDfPop.revenue\/max(sortedDfPop.revenue),\n        name = \"dist of revenue of movies\",\n        marker = \n        dict(color = 'rgb(12,128,128)')\n        )\ndata = [trace1,trace2]\nfig = go.Figure(data = data)\niplot(fig)\n\n","1ab9487a":"#%% Scatter matrix\n#is used to see covariance and relation between more than 2 features\n\nimport plotly.figure_factory as ff\n\nsortedDfPop['budget'] = sortedDfPop['budget'].astype(float)\/max(sortedDfPop['budget'])\nsortedDfPop['revenue'] = sortedDfPop['revenue'].astype(float)\/max(sortedDfPop['revenue'])\nsortedDfPop['popularity'] = sortedDfPop['popularity'].astype(float)\/max(sortedDfPop['popularity'])\n\nmoviesData = sortedDfPop.loc[:,[\"budget\",\"revenue\",\"popularity\"]]\n\nmoviesData[\"index\"] = np.arange(1,len(moviesData)+ 1)\n\nfig = ff.create_scatterplotmatrix(moviesData, diag = 'box' , index = 'index' , colormap ='Portland',\n                                  colormap_type = 'cat',\n                                  height = 700 , width = 700)\n\niplot(fig)\n\n","77102611":"#%% Inset Plot 2 Plots in one frame\n\n#first line plot\n\nmovies30 = movies.iloc[:150,:]\ntrace1  = go.Scatter(\n        x= movies30.original_title,\n        y= movies30.budget,\n        name = \"budget\",\n        marker = dict(color = 'rgba(16 , 112, 2 , 0.8)')\n        )\n\ntrace2 = go.Scatter( \n        x = movies30.original_title,\n        y=movies30.popularity,\n        xaxis = 'x2',\n        yaxis = 'y2',\n        name = \"revenue\",\n        marker = dict(color = 'rgba(160,112,20,0.8)')\n        )\n\ndata = [trace1,trace2]\nlayout = go.Layout(\n        xaxis2 = dict(\n                domain = [0.6,0.95],\n                anchor = \"y2\",),\n        yaxis2 = dict(\n                domain = [0.7,0.95],\n                anchor = 'x2'),\n                title = \"budget vs popularity\")\n        \n        \n        \nfig = go.Figure(data = data , layout = layout)\n\niplot(fig)\n","7c9aedde":"#%% multiple subplots\n#While comparing more than 1 plot \n \ntrace1 = go.Scatter(\n        x = movies.original_title,\n        y = movies.popularity ,\n        name = \"popularity\" ,\n        )\n\n\ntrace2 = go.Scatter(\n        x = movies.original_title,\n        y = movies.budget ,\n        name = \"budget\" ,\n        xaxis = \"x2\",\n        yaxis = \"y2\" ,\n        )\n\n\ntrace3 = go.Scatter(\n        x = movies.original_title,\n        y = movies.revenue ,\n        name = \"revenue\" ,\n        xaxis = \"x3\",\n        yaxis = \"y3\" ,\n        )\n\n\ntrace4 = go.Scatter(\n        x = movies.original_title,\n        y = movies.vote_count ,\n        name = \"vote_count\" ,\n        xaxis = \"x4\",\n        yaxis = \"y4\" ,\n        )\n\ndata = [trace1 , trace2 , trace3 , trace4]\n\nlayout = go.Layout(\n        xaxis = dict(\n                domain = [0,0.45]\n                ),\n                \n        yaxis = dict(\n                domain = [0,0.45]\n                ),\n        xaxis2 = dict(\n                domain = [0.55,1]\n                ),\n        xaxis3 = dict(\n                domain = [0,0.45],\n                anchor = \"y3\"\n                ),\n        xaxis4 = dict(\n                domain = [0.55,1],\n                anchor = \"y4\",\n                ),\n                \n        yaxis2 = dict(\n                domain = [0,0.45],\n                anchor = \"x2\"),\n        \n                \n        yaxis3 = dict(\n                domain = [0.55,1]\n                ),\n        yaxis4 = dict(\n                domain = [0.55,1],\n                anchor = \"x4\",\n        \n                )        \n        )\n\nfig = go.Figure( data = data , layout = layout)\niplot(fig )","2064ab22":"**RESULT of correlation matrix**\n#Happines score is related with  family,health , freedom , GDP\n#Health is related with  GDP \n#Trust and Freedom is related\n#Family and Happiness Score ,Hdalth and GDP is related","cadf31ed":"> In this kernel I used 2 different dataset . One of them is about world's happiness record and other one is about top 5000 movies and information about them. ","916456b5":"Mostly used words in the overview of movies are \n* LIFE\n* FIND\n* WORLD\n* NEW\n* WILL\n* DISCOVER\n* FRIEND\nMaybe we can say these words are the most interesting subjects for human beings in terms of making them watch the movie.","6aca3467":"GDP .and Happiness Score goes in the same manner which also shows they are correlated .","a9d45170":"**IN Word Cloud part iterated over the overview column and take from overview most common 90 word . FIrst 33 words are mostly prepositions or connectives.\n** I took them out then use word cloud frame.**\n**"}}