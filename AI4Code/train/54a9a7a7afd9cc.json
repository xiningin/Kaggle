{"cell_type":{"d18925e2":"code","2ca5513c":"code","a0e0ed3e":"code","ebe94f5d":"code","644940cb":"code","1ecdf556":"code","838f448a":"code","9a608893":"code","1c3e8f70":"code","eb984dce":"code","59e8f974":"code","5e08079e":"code","ec37b3c3":"code","0c4e0519":"code","5ebf0ddc":"code","e04de218":"code","5094b443":"code","3c62820b":"code","2c64395e":"code","fe7bffab":"code","833087b5":"code","d98473c9":"code","1c054b6c":"code","c7fe0fae":"code","eabc3068":"code","b8a122fd":"code","4b39850b":"code","203e84bc":"code","2bf235e2":"code","cd9d3e42":"code","09119b43":"code","fb1921fe":"code","bbe726df":"code","e601bd6f":"code","5a20acde":"code","7e52c0d6":"code","5c38a4da":"code","4f04e9cd":"code","6ba6bb64":"code","6271a0bf":"code","2ea9a1b9":"code","6c0ee43a":"code","d9242983":"code","837d178b":"code","b2e649a9":"code","8d947f14":"code","12538c6a":"code","647016fc":"code","dc02450a":"code","71db539f":"code","0296470f":"code","d3e75575":"code","bf7e31a6":"code","85c9b9c4":"code","a7860169":"code","c28e4b18":"code","baf28dbf":"code","13645462":"code","3f748e56":"code","0d7a883d":"code","6990c85b":"code","f73c7fe5":"code","123b05fe":"code","654af885":"code","ff8aa640":"code","942dbbaa":"code","61b7894f":"code","e9abde6a":"code","b6991356":"code","82d67f47":"code","8ac69175":"code","d7b7d15f":"code","1ea1a3c6":"code","70cda37e":"code","e7a30a48":"code","904611f8":"code","642de56e":"code","b5987ed8":"code","7262c041":"code","575c2f7e":"code","7b4c0697":"code","becc8b75":"code","8ecaa196":"code","51a8ecdb":"code","a57dec16":"code","570fb2a4":"code","1f03b3d6":"code","6c3e70e1":"code","10045e5b":"code","7db04914":"code","b3ac3979":"code","287c44ce":"code","b3e582c6":"code","f75be9e0":"code","6fbf8bb8":"code","84e84674":"code","e72c1ac8":"code","0483e90f":"code","01324960":"code","d03297e9":"code","19b6f14c":"code","ca1a0b19":"code","a7dbdebf":"code","df63de09":"code","8c36a18e":"code","1b2a5382":"code","8c16fa71":"code","1329b7bd":"code","395d9e60":"code","4edc96ee":"code","2278ce1b":"code","87e031b4":"code","7ca64f17":"code","ffbea6f1":"code","5db71071":"code","a16cc057":"code","2cc96a5f":"code","4009fc98":"code","324d15c7":"code","37578497":"code","9985e91e":"code","8cfc32a4":"code","8c627d35":"code","3e95fbc4":"code","2a09a30c":"code","3f94179b":"code","08125502":"code","8a47b74d":"code","84ab2747":"code","04b9aa4d":"code","62142211":"code","849f2b31":"code","7307497f":"code","ffaa6227":"code","7c61821e":"code","198df2c4":"code","25a2d932":"code","6abc1db0":"code","acdeae54":"code","21a9cece":"code","b47e1e06":"code","dada58d5":"code","f4b142e1":"code","f65f794a":"code","48fa00d9":"code","81f49491":"code","22da8f6a":"code","aeb06450":"code","14fe0870":"code","8684d5a3":"code","152aec43":"code","412b343c":"code","1be0c668":"code","5a88d126":"code","4a801854":"code","815baba4":"code","0e8a5149":"code","1f3e7655":"code","de2a6bc3":"code","edbab50c":"code","da3f86f6":"code","45731390":"code","18d6bff4":"code","2942b2eb":"code","6b950843":"code","e38ef1f6":"code","93a87042":"code","ef7e1a8a":"code","9fab7554":"code","971b4b34":"code","b7fc93be":"code","1419343f":"code","308efba6":"code","fbd38c20":"code","f63259a4":"code","fcb0bf48":"code","0aad2f2d":"code","d7e7685e":"code","da30309e":"code","3414bc10":"code","8015888f":"code","81f975ae":"code","2267f360":"code","8afd299e":"code","0355b0d7":"code","d6a5f4f6":"code","e1cb0a06":"code","3351384f":"code","5bb8a337":"code","cf238d38":"code","fe4d98f1":"code","f759026f":"code","a8230b7d":"code","886ffcf4":"code","f375eb87":"code","ea94ec60":"code","369c994e":"code","ecadd4c3":"markdown","62176053":"markdown","00565dbf":"markdown","5b49d0f8":"markdown","af2673fe":"markdown","71bcbcde":"markdown","b6bc8f59":"markdown","71a3d30a":"markdown","b70f59f6":"markdown","e4ddbc5e":"markdown","c4530430":"markdown","cb07a8d8":"markdown","17c36c1e":"markdown","23d401c4":"markdown","9fb120ad":"markdown","b3ec3c14":"markdown","ac83e15e":"markdown","33959a84":"markdown","54612373":"markdown","1f6cef54":"markdown","dc55ed2d":"markdown","e87931ba":"markdown","27e46386":"markdown","d9d335d2":"markdown","3419d53d":"markdown","4f859a2f":"markdown","e6618c14":"markdown","b84246fb":"markdown","50e5ed75":"markdown","9f5a35a7":"markdown","d1d8600b":"markdown","3e953692":"markdown","156bef53":"markdown","33c0923b":"markdown","716f9cc0":"markdown","a19bdb4e":"markdown","a7acaee5":"markdown","d55fe448":"markdown","961eed94":"markdown","fa3241b7":"markdown","e743a841":"markdown","e5d68048":"markdown","c8008eee":"markdown","f232e209":"markdown","f1b16849":"markdown","3d21a618":"markdown","072ac63c":"markdown","f1df7ce3":"markdown","3bda1a38":"markdown","79e03904":"markdown","227fe22e":"markdown","4ebfd507":"markdown","b363344b":"markdown","047741cc":"markdown","b3a6bec1":"markdown","0d6ff14d":"markdown","eceb28c7":"markdown","3d0264d5":"markdown","2ab7c41c":"markdown","2ccde3ba":"markdown","635a8ae1":"markdown","65b82a80":"markdown","28ac08b6":"markdown","5621a76d":"markdown","b9e2d407":"markdown","c8ae15d3":"markdown","8d155e3d":"markdown","34be1db2":"markdown","b12334a8":"markdown","93a02c81":"markdown","2e14589c":"markdown","0dcab774":"markdown","ad3329f5":"markdown","ef0092f2":"markdown","ebabcd3a":"markdown","0bd8e073":"markdown","2ae3f001":"markdown","f71e7399":"markdown","f7880813":"markdown","42d87fcd":"markdown","94dea50c":"markdown","cf2041a2":"markdown","cca34c04":"markdown","b2c49082":"markdown","9933de4b":"markdown"},"source":{"d18925e2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly import tools\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import Ridge\nimport lightgbm as  lgb\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('ggplot')\nseed = 4432","2ca5513c":"path = '..\/input\/'\n#path = 'dataset\/'\ntrain = pd.read_csv(path+ 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nprint('Number of rows and columns in train dataset:', train.shape)\nprint('Number of rows and columns in test dataset:', test.shape)","a0e0ed3e":"train.head()","ebe94f5d":"test.head()","644940cb":"train.describe()","1ecdf556":"no_missing_col = [c for c in train.columns if train[c].isnull().sum() ==0]\nmissing_col = [c for c in train.columns if train[c].isnull().sum() >0]\nprint(f'Missing value in {len(missing_col)} columns and no missing value in {len(no_missing_col)} columns')\n\nmissing = train[missing_col].isnull().sum()\nplt.figure(figsize=(14,6))\nsns.barplot(x = missing.index, y = missing.values)\nplt.xticks(rotation=90);","838f448a":"no_missing_col = [c for c in test.columns if test[c].isnull().sum() ==0]\nmissing_col = [c for c in test.columns if test[c].isnull().sum() >0]\nprint(f'Missing value in {len(missing_col)} columns and no missing value in {len(no_missing_col)} columns')\n\nmissing = test[missing_col].isnull().sum()\nplt.figure(figsize=(14,6))\nsns.barplot(x = missing.index, y = missing.values)\nplt.xticks(rotation=90);","9a608893":"missing = train[missing_col].isnull()\nplt.figure(figsize =(14,6))\nsns.heatmap(missing, cbar=False, cmap='viridis')","1c3e8f70":"def Numeric_plot(df,column = '', title='',ncols=2,trans_func = None):\n    \"\"\" Histogram plot Box plot of Numeric variable\"\"\"\n    \n    # Box plot\n    trace1 = go.Box(y = df[column],name='Box')\n    \n    # Histogram\n    trace2 = go.Histogram(x = df[column], name = 'x')\n    \n    fig = tools.make_subplots(rows=1, cols=ncols)\n    fig.append_trace(trace1, 1,1)\n    fig.append_trace(trace2, 1,2)\n    fig['layout'].update(height=300, title=title)\n    fig['layout']['yaxis1'].update(title= column)\n\n    # Histogram after transformation\n    if trans_func != None:\n        tmp = df[column].apply(trans_func)\n        trace3 = go.Histogram(x = tmp, name = trans_func+'(x)')\n        fig.append_trace(trace3, 1,3)\n    \n    py.iplot(fig)\n","eb984dce":"def Categorical_plot(df, column ='', title = '',limit=10):\n    \"\"\" Barplot: of categorical variable\n        Boxplot: of categoriucal and taraget variable\"\"\"\n    # Barplot\n    bar = df[column].value_counts()[:limit]\/df.shape[0]\n    bar_round = [round(w,2) for w in bar.values *100]\n    trace1 = go.Bar(x = bar.index, y = bar_round, name='% Count' )    \n    # Boxplot\n    box = df[column].isin(bar.index[:limit])\n    box =df.loc[box][[column,'SalePrice']]\n    trace2 = go.Box(x = box[column], y= box['SalePrice'],name='Sale Price')\n\n    # Figure legend\n    fig = tools.make_subplots(rows=1, cols=2,)#subplot_titles= ('',''))\n    fig.append_trace(trace1, 1,1)\n    fig.append_trace(trace2, 1,2)\n    \n    fig['layout']['yaxis1'].update(title='% Count')\n    fig['layout']['yaxis2'].update(title='Sale Price')\n    fig['layout'].update(height=400, title=title,showlegend=False)\n    py.iplot(fig)","59e8f974":"def Regression_plot(df,column=''):\n    \"\"\"Regression plot: with pearsonr correlation value \"\"\"\n    cor = round(df[['SalePrice',column]].corr().iloc[0,1], 3)\n    sns.jointplot(x= df[column], y = df['SalePrice'], kind= 'reg',\n                  label = 'r: '+str(cor),color='blue')\n    plt.legend()\n    #plt.title('Regression plot ')","5e08079e":"drop_col = []\ncategorical_col = []\nnumeric_col = []","ec37b3c3":"Numeric_plot(train, column='SalePrice',title='Sale Price',ncols=3,trans_func='log1p')","0c4e0519":"# Run this only once\nmap_value = {20: '1-STORY 1946 & NEWER ALL STYLES',\n            30: '1-STORY 1945 & OLDER',\n            40: '1-STORY W\/FINISHED ATTIC ALL AGES',\n            45: '1-1\/2 STORY - UNFINISHED ALL AGES',\n            50: '1-1\/2 STORY FINISHED ALL AGES',\n            60: '2-STORY 1946 & NEWER',\n            70: '2-STORY 1945 & OLDER',\n            75: '2-1\/2 STORY ALL AGES',\n            80: 'PLIT OR MULTI-LEVEL',\n            85: 'SPLIT FOYER',\n            90: 'DUPLEX - ALL STYLES AND AGES',\n            120: '1-STORY PUD (Planned Unit Development) - 1946 & NEWER',\n            150: '1-1\/2 STORY PUD - ALL AGES',\n            160: '2-STORY PUD - 1946 & NEWER',\n            180: 'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n            190: '2 FAMILY CONVERSION - ALL STYLES AND AGES'}\n\ntrain['MSSubClass'] = train['MSSubClass'].map(map_value)\ntest['MSSubClass'] = test['MSSubClass'].map(map_value)","5ebf0ddc":"Categorical_plot(train, column='MSSubClass', title='MSSubClass: The building class',limit=None)","e04de218":"# Add to list of categorical column\ncategorical_col.append('MSSubClass')","5094b443":"map_value = { \n            'A': 'Agriculture',\n            'C': 'Commercial',\n            'FV': 'Floating Village Residential',\n            'I': 'Industrial',\n            'RH': 'Residential High Density',\n            'RL': 'Residential Low Density',\n            'RP': 'Residential Low Density Park',\n            'RM': 'Residential Medium Density',\n            }\ntrain['MSZoning'] = train['MSZoning'].map(map_value)\ntest['MSZoning'] = test['MSZoning'].map(map_value)","3c62820b":"Categorical_plot(train, column= 'MSZoning', title ='MSZoning: Identifies the general zoning classification of the sale')","2c64395e":"# Add to list of categorical column\ncategorical_col.append('MSZoning')","fe7bffab":"Numeric_plot(train, column= 'LotFrontage', ncols=3, trans_func='log', title='Linear feet of street connected to property')","833087b5":"Regression_plot(train, column='LotFrontage')","d98473c9":"# Add to list of Numeric column list\nnumeric_col.append('LotFrontage')","1c054b6c":"Numeric_plot(train, column = 'LotArea',ncols=3, trans_func='log1p', title='Lot size in square feet')","c7fe0fae":"Regression_plot(train, column='LotArea')","eabc3068":"# Add to list of Numeric column list\nnumeric_col.append('LotArea')","b8a122fd":"Categorical_plot(train, column='Street', title= 'Street: Type of road access to property')","4b39850b":"# Add to list of Drop column list\ndrop_col.append('Street')","203e84bc":"Categorical_plot(train, column='Alley', title= 'Type of alley access to property')","2bf235e2":"# Add to list of categorical column list\ndrop_col.append('Alley')","cd9d3e42":"Categorical_plot(train, column='LotShape', title= 'General shape of property')","09119b43":"# Add to list of categorical column list\ncategorical_col.append('LotShape')","fb1921fe":"Categorical_plot(train, column='LandContour', title= 'Flatness of the property')","bbe726df":"# Add to list of categorical column list\ncategorical_col.append('LandContour')","e601bd6f":"Categorical_plot(train, column='Utilities', title= 'Type of utilities available')","5a20acde":"# Add to list of Drop column list\ndrop_col.append('Utilities')","7e52c0d6":"Categorical_plot(train, column='LotConfig', title= 'Lot configuration')","5c38a4da":"# Add to list of categorical column list\ncategorical_col.append('LotConfig')","4f04e9cd":"Categorical_plot(train, column='LandSlope', title= 'Lot configuration')","6ba6bb64":"# Add to list of categorical column list\ncategorical_col.append('LandSlope')","6271a0bf":"Categorical_plot(train, column='Neighborhood', title= 'Top 10 Lot configuration',limit=10)","2ea9a1b9":"# Add to list of categorical column list\ncategorical_col.append('Neighborhood')","6c0ee43a":"Categorical_plot(train, column='Condition1', title= 'Proximity to various conditions',limit=None)","d9242983":"# Add to list of categorical column list\ncategorical_col.append('Condition1')","837d178b":"Categorical_plot(train, column='Condition2', title= 'Proximity to various conditions',limit=None)","b2e649a9":"# Add to list of categorical column list\ncategorical_col.append('Condition2')","8d947f14":"Categorical_plot(train, column='BldgType', title= 'Type of dwelling',limit=None)","12538c6a":"# Add to list of categorical column list\ncategorical_col.append('BldgType')","647016fc":"Categorical_plot(train, column='HouseStyle', title= 'Style of dwelling',limit=None)","dc02450a":"# Add to list of categorical column list\ncategorical_col.append('HouseStyle')","71db539f":"map_values = {10: 'Very Excellent', \n             9: 'Excellent', \n             8: 'Very Good',\n             7: 'Good',\n             6: 'Above Average',\n             5: 'Average',\n             4: 'Below Average',\n             3: 'Fair',\n             2: 'Poor',\n             1: 'Very Poor'\n            }\ntrain['OverallQual'] = train['OverallQual'].map(map_values)\ntest['OverallQual'] = test['OverallQual'].map(map_values)","0296470f":"Categorical_plot(train, column='OverallQual', title= 'Rates the overall material and finish of the house',limit=None)","d3e75575":"# Add to list of categorical column list\ncategorical_col.append('OverallQual')","bf7e31a6":"map_values = {10: 'Very Excellent', \n             9: 'Excellent', \n             8: 'Very Good',\n             7: 'Good',\n             6: 'Above Average',\n             5: 'Average',\n             4: 'Below Average',\n             3: 'Fair',\n             2: 'Poor',\n             1: 'Very Poor'\n            }\ntrain['OverallCond'] = train['OverallCond'].map(map_values)\ntest['OverallCond'] = test['OverallCond'].map(map_values)","85c9b9c4":"Categorical_plot(train, column='OverallCond', title= 'Rates the overall condition of the house',limit=None)","a7860169":"# Add to list of categorical column list\ncategorical_col.append('OverallCond')","c28e4b18":"Numeric_plot(train, column='YearBuilt', title= 'Original construction date', ncols=2,)# trans_func='sqrt')","baf28dbf":"Regression_plot(train, column='YearBuilt')","13645462":"# Add to numeric column list\nnumeric_col.append('YearBuilt')","3f748e56":"Numeric_plot(train, column='YearRemodAdd', title= 'Remodel date', ncols=2,)# trans_func='log')","0d7a883d":"Regression_plot(train, column='YearRemodAdd')","6990c85b":"# Add to numeric column list\nnumeric_col.append('YearRemodAdd')","f73c7fe5":"Categorical_plot(train, column='RoofStyle', title= 'Type of roof',limit=None)","123b05fe":"# Add to list of categorical column list\ncategorical_col.append('RoofStyle')","654af885":"Categorical_plot(train, column='RoofMatl', title= 'Roof material',limit=None)","ff8aa640":"# Add to list of drop column list\ndrop_col.append('RoofMatl')","942dbbaa":"Categorical_plot(train, column='Exterior1st', title= 'Exterior covering on house',limit=None)","61b7894f":"# Add to list of categorical column list\ncategorical_col.append('Exterior1st')","e9abde6a":"Categorical_plot(train, column='Exterior2nd', title= 'Exterior covering on house',limit=None)","b6991356":"# Add to list of categorical column list\ncategorical_col.append('Exterior2nd')","82d67f47":"Categorical_plot(train, column='MasVnrType', title= 'Masonry veneer type',limit=None)","8ac69175":"# Add to list of categorical column list\ncategorical_col.append('MasVnrType')","d7b7d15f":"Numeric_plot(train, column= 'MasVnrArea', title= 'Masonry veneer area in square feet',) #ncols=3, trans_func='sqrt')","1ea1a3c6":"Regression_plot(train, column='MasVnrArea')","70cda37e":"# Add to list of numeric column list\nnumeric_col.append('MasVnrArea')","e7a30a48":"map_values = { \n            'Ex': 'Excellent',\n            'Gd': 'Good',\n            'TA': 'Average\/Typical',\n            'Fa': 'Fair',\n            'Po': 'Poor'\n            }\ntrain['ExterQual'] = train['ExterQual'].map(map_values)\ntest['ExterQual'] = test['ExterQual'].map(map_values)","904611f8":"Categorical_plot(train, column='ExterQual', title= 'Evaluates the quality of the material on the exterior',limit=None)","642de56e":"# Add to list of categorical column list\ncategorical_col.append('ExterQual')","b5987ed8":"map_values = { \n            'Ex': 'Excellent',\n            'Gd': 'Good',\n            'TA': 'Average\/Typical',\n            'Fa': 'Fair',\n            'Po': 'Poor'\n            }\ntrain['ExterCond'] = train['ExterCond'].map(map_values)\ntest['ExterCond'] = test['ExterCond'].map(map_values)","7262c041":"Categorical_plot(train, column='ExterCond', title= 'Evaluates the present condition of the material on the exterior',limit=None)","575c2f7e":"# Add to list of categorical column list\ncategorical_col.append('ExterCond')","7b4c0697":"Categorical_plot(train, column='Foundation', title= 'Type of foundation',limit=None)","becc8b75":"# Add to list of categorical column list\ncategorical_col.append('Foundation')","8ecaa196":"Categorical_plot(train, column='BsmtQual', title= 'Evaluates the height of the basement',limit=None)","51a8ecdb":"# Add to list of categorical column list\ncategorical_col.append('BsmtQual')","a57dec16":"Categorical_plot(train, column='BsmtCond', title= 'Evaluates the general condition of the basement',limit=None)","570fb2a4":"# Add to list of categorical column list\ncategorical_col.append('BsmtCond')","1f03b3d6":"Categorical_plot(train, column='BsmtExposure', title= 'Refers to walkout or garden level walls',limit=None)","6c3e70e1":"# Add to list of categorical column list\ncategorical_col.append('BsmtExposure')","10045e5b":"Categorical_plot(train, column='BsmtFinType1', title= 'Rating of basement finished area',limit=None)","7db04914":"# Add to list of categorical column list\ncategorical_col.append('BsmtFinType1')","b3ac3979":"Numeric_plot(train, column='BsmtFinSF1', title='Type 1 finished square feet')#,ncols=3, trans_func='log1p')","287c44ce":"Regression_plot(train, column= 'BsmtFinSF1')","b3e582c6":"# Add to list of numeric column list\nnumeric_col.append('BsmtFinSF1')","f75be9e0":"Categorical_plot(train, column='BsmtFinType2', title= 'Rating of basement finished area',limit=None)","6fbf8bb8":"# Add to list of categorical column list\ncategorical_col.append('BsmtFinType2')","84e84674":"Numeric_plot(train, column='BsmtFinSF2', title='Type 2 finished square feet')#,ncols=3, trans_func='log1p')","e72c1ac8":"Regression_plot(train, column= 'BsmtFinSF2')","0483e90f":"# Add to list of numeric column list\nnumeric_col.append('BsmtFinSF2')","01324960":"Numeric_plot(train, column='BsmtUnfSF', title='Unfinished square feet of basement area')#,ncols=3, trans_func='log1p')","d03297e9":"Regression_plot(train, column= 'BsmtUnfSF')","19b6f14c":"# Add to list of numeric column list\nnumeric_col.append('BsmtUnfSF')","ca1a0b19":"Numeric_plot(train, column='TotalBsmtSF', title='Total square feet of basement area')#,ncols=3, trans_func='log1p')","a7dbdebf":"Regression_plot(train, column= 'TotalBsmtSF')","df63de09":"# Add to list of numeric column list\nnumeric_col.append('TotalBsmtSF')","8c36a18e":"Categorical_plot(train, column='Heating', title= 'Type of heating',limit=None)","1b2a5382":"# Add to list of dro column list\ndrop_col.append('Heating')","8c16fa71":"Categorical_plot(train, column='HeatingQC', title= 'Heating quality and condition',limit=None)","1329b7bd":"# Add to list of categorical column list\ncategorical_col.append('HeatingQC')","395d9e60":"Categorical_plot(train, column='CentralAir', title= 'Central air conditioning',limit=None)","4edc96ee":"# Add to list of categorical column list\ncategorical_col.append('CentralAir')","2278ce1b":"Categorical_plot(train, column='Electrical', title= 'Electrical system',limit=None)","87e031b4":"# Add to list of categorical column list\ncategorical_col.append('Electrical')","7ca64f17":"g = sns.pairplot(train, vars=['1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea'],\n                palette = 'viridis', kind= 'reg', aspect=1.5)","ffbea6f1":"# Add to\nnumeric_col.extend(['1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea'])","5db71071":"Categorical_plot(train, column='BsmtFullBath', title= 'Basement full bathrooms',limit=None)","a16cc057":"# Add to list of categorical column list\ncategorical_col.append('BsmtFullBath')","2cc96a5f":"Categorical_plot(train, column='BsmtHalfBath', title= 'Basement half bathrooms',limit=None)","4009fc98":"# Add to list of categorical column list\ncategorical_col.append('BsmtHalfBath')","324d15c7":"Categorical_plot(train, column='FullBath', title= ' Full bathrooms above grade',limit=None)","37578497":"# Add to list of categorical column list\ncategorical_col.append('FullBath')","9985e91e":"Categorical_plot(train, column='HalfBath', title= 'Half baths above grade',limit=None)","8cfc32a4":"# Add to list of categorical column list\ncategorical_col.append('HalfBath')","8c627d35":"Categorical_plot(train, column='BedroomAbvGr', title= 'Bedrooms above grade',limit=None)","3e95fbc4":"# Add to list of categorical column list\ncategorical_col.append('BedroomAbvGr')","2a09a30c":"Categorical_plot(train, column='KitchenAbvGr', title= 'Kitchens above grade',limit=None)","3f94179b":"# Add to list of categorical column list\ncategorical_col.append('KitchenAbvGr')","08125502":"Categorical_plot(train, column='KitchenQual', title= 'Kitchen quality',limit=None)","8a47b74d":"# Add to list of categorical column list\ncategorical_col.append('KitchenQual')","84ab2747":"Categorical_plot(train, column='TotRmsAbvGrd', title= 'Total rooms above grade',limit=None)","04b9aa4d":"# Add to list of categorical column list\ncategorical_col.append('KitchenQual')","62142211":"Categorical_plot(train, column='Functional', title= 'Home functionality',limit=None)","849f2b31":"# Add to list of categorical column list\ncategorical_col.append('Functional')","7307497f":"Categorical_plot(train, column='Fireplaces', title= 'Number of fireplaces',limit=None)","ffaa6227":"# Add to list of categorical column list\ncategorical_col.append('Fireplaces')","7c61821e":"Categorical_plot(train, column='FireplaceQu', title= 'Fireplace quality',limit=None)","198df2c4":"# Add to list of categorical column list\ncategorical_col.append('FireplaceQu')","25a2d932":"Categorical_plot(train, column='GarageType', title= 'Garage location',limit=None)","6abc1db0":"# Add to list of categorical column list\ncategorical_col.append('GarageType')","acdeae54":"Numeric_plot(train, column='GarageYrBlt', title= 'Year garage was built')","21a9cece":"# Add to list of Numeric column list\nnumeric_col.append('GarageYrBlt')","b47e1e06":"Categorical_plot(train, column='GarageFinish', title= 'Interior finish of the garage')","dada58d5":"# Add to list of calegtory column list\ncategorical_col.append('GarageFinish')","f4b142e1":"Categorical_plot(train, column='GarageCars', title= 'Size of garage in car capacity')","f65f794a":"# Add to list of calegtory column list\ncategorical_col.append('GarageCars')","48fa00d9":"Numeric_plot(train, column='GarageArea', title= 'Size of garage in square feet')","81f49491":"# Add to list of numeric column list\nnumeric_col.append('GarageArea')","22da8f6a":"Categorical_plot(train, column='GarageQual', title= 'Garage quality')","aeb06450":"# Add to list of calegtory column list\ncategorical_col.append('GarageQual')","14fe0870":"Categorical_plot(train, column='GarageCond', title= 'Garage condition')","8684d5a3":"# Add to list of calegtory column list\ncategorical_col.append('GarageCond')","152aec43":"Categorical_plot(train, column='PavedDrive', title= 'Paved driveway')","412b343c":"# Add to list of calegtory column list\ncategorical_col.append('PavedDrive')","1be0c668":"g = sns.pairplot(data= train, kind= 'reg',\n                 vars= ['WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea'],)","5a88d126":"# Add to\nnumeric_col.extend(['WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea'])","4a801854":"Categorical_plot(train, column='PoolQC', title= 'Pool quality')","815baba4":"# Add to list of calegtory column list\ndrop_col.append('PoolQC')","0e8a5149":"Categorical_plot(train, column='Fence', title= 'Fence quality')","1f3e7655":"# Add to list of calegtory column list\ncategorical_col.append('Fence')","de2a6bc3":"Categorical_plot(train, column='MiscFeature', title= 'Miscellaneous feature not covered in other categories')","edbab50c":"# Add to list of drop column list\ndrop_col.append('MiscFeature')","da3f86f6":"Numeric_plot(train, column='MiscVal', title='$Value of miscellaneous feature',)# ncols=3, trans_func='log1p')","45731390":"# Add to numeric column list\nnumeric_col.append('MiscVal')","18d6bff4":"Categorical_plot(train, column='MoSold', title='Month Sold (MM)',)","2942b2eb":"# Add to categorical column list\ncategorical_col.append('MoSold')","6b950843":"Categorical_plot(train, column='YrSold', title='Year Sold',)","e38ef1f6":"# Add to categorical column list\ncategorical_col.append('YrSold')","93a87042":"Categorical_plot(train, column='SaleType', title='Type of sale',)","ef7e1a8a":"# Add to categorical column list\ncategorical_col.append('SaleType')","9fab7554":"Categorical_plot(train, column='SaleCondition', title='Condition of sale',)","971b4b34":"# Add to categorical column list\ncategorical_col.append('SaleCondition')","b7fc93be":"# Check column \nprint('Check number of column',train.shape, len(categorical_col)+len(drop_col)+len(numeric_col))\ntrain = train.drop(drop_col, axis=1)\ntest = test.drop(drop_col, axis=1)","1419343f":"test['SalePrice'] = np.nan","308efba6":"train_test = pd.concat([train, test], axis =0)\ntrain_test.shape","fbd38c20":"def Binary_encoding(df,columns):\n    \"\"\"Binary encoding\"\"\"\n    print('*'*5,'Binary encoding','*'*5)\n    lb = LabelBinarizer()\n    print('Original shape:',df.shape)\n    original_col = df.columns\n    #columns = [i for i in columns if df[columns].nunique()>2]\n    for i in columns:\n        if df[i].nunique() >2:\n            result = lb.fit_transform(df[i].fillna(df[i].mode()[0],axis=0))\n            col = ['BIN_'+ str(i)+'_'+str(c) for c in lb.classes_]\n            result1 = pd.DataFrame(result, columns=col)\n            df = df.join(result1)\n    print('After:',df.shape)\n    #new_col = [c for c in df.columns if c not in original_col]\n    return df","f63259a4":"#train_test = Binary_encoding(train_test, categorical_col[1])","fcb0bf48":"def OneHotEncoding(df, columns, nan_as_category=True, drop_first=True):\n    \"\"\"One Hot Encoding: of categorical variable\"\"\"\n    print(10*'*'+'One Hot Encoding:',df.shape,10*'*')\n    lenght = df.shape[0]\n    # Concatenate dataframe\n    #df = pd.concat([df1,df2], axis=0)\n    \n    # OHE\n    df = pd.get_dummies(data = df, columns= columns, drop_first=drop_first, \n                        dummy_na=nan_as_category)\n    \n    print(10*'*','After One Hot Encoding:',df.shape,10*'*')\n    return df","0aad2f2d":"train_test = OneHotEncoding(train_test, columns=categorical_col)","d7e7685e":"def Fill_missing_value(df,column):\n    \"\"\"Fill missing value with Mean\"\"\"\n    for c in column:\n        if df[c].isnull().sum() >0:\n            df[c] = df[c].fillna(df[c].mean())\n    print('Check Missing value:',df.isnull().sum().sum())\n    return df","da30309e":"train_test = Fill_missing_value(train_test,numeric_col)","3414bc10":"def Descriptive_stat_feat(df,columns):\n    \"\"\" Descriptive statistics feature\n    genarating function: Mean,Median,Q1,Q3\"\"\"\n    print('*'*5,'Descriptive statistics feature','*'*5)\n    print('Before',df.shape)\n    mean = df[columns].mean()\n    median = df[columns].median()\n    Q1 = np.percentile(df[columns], 25, axis=0)\n    Q3 = np.percentile(df[columns], 75, axis=0)\n    for i,j in enumerate(columns):\n        df['mean_'+j] = (df[j] < mean[i]).astype('int8')\n        df['median_'+j] = (df[j] > median[i]).astype('int8')\n        df['Q1'+j] = (df[j] < Q1[i]).astype('int8')\n        df['Q3'+j] = (df[j] > Q3[i]).astype('int8')\n    print('After ',df.shape)\n    return df","8015888f":"train_test = Descriptive_stat_feat(train_test, columns = numeric_col)","81f975ae":"train_test.isnull().sum().sum()","2267f360":"length = train.shape[0]\ntest_id = test['Id']\ntrain1 = train_test[:length]\ntest1 = train_test[length:]\nX = train1.drop(['Id','SalePrice'], axis=1)\ny = np.log1p(train1['SalePrice'])\nnew_test = test1.drop(['Id','SalePrice'], axis=1)\n#X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=seed)\ndel train1, test1","8afd299e":"from sklearn.model_selection import RandomizedSearchCV\nreg = Ridge(alpha= 1.0)\nrsCV = RandomizedSearchCV(reg,cv= 5,param_distributions={'alpha':np.linspace(0,20,100)},random_state= seed)\nrsCV.fit(X,y)","0355b0d7":"rsCV.best_params_","d6a5f4f6":"kf = KFold(n_splits=5, random_state=seed,)\n\nfinal_pred = 0\nrmse = []\nr_square = []\nfor i, (train_index, test_index) in enumerate(kf.split(X)):\n    print(f'Modelling {i+1} of {kf.n_splits} fold')\n    X_train, X_valid = X.loc[train_index], X.loc[test_index]\n    y_train, y_valid = y[train_index], y[test_index]\n    \n    # L2 - Regression\n    reg = Ridge(alpha = rsCV.best_params_['alpha'])\n    reg.fit(X_train, y_train)\n    y_pred = reg.predict(X_valid)\n    final_pred += reg.predict(new_test)\n    r2 = reg.score(X_valid, y_valid)\n    r_square.append(r2)\n    print('*'*10,'R sqaure:',round(r2,3), '*'*10,'\\n')\n    rmse.append(mean_squared_error(y_valid, y_pred)**0.5)","e1cb0a06":"print(rmse,'\\nRMSE:',np.mean(rmse))","3351384f":"f = plt.figure(figsize= (14,6))\n\nax = f.add_subplot(121)\nax.scatter(y_valid, y_pred)\nplt.title('Scatter plot of y_true vs y_pred')\n\nresidual = y_valid - y_pred\nax = f.add_subplot(122)\nsns.distplot(residual, ax = ax)\nplt.axvline(residual.mean())\nplt.title('Residual plot');","5bb8a337":"#pred = reg.predict(new_test)\npred = np.expm1(final_pred\/ kf.n_splits)\nsubmit = pd.DataFrame({'Id':test_id,'SalePrice':pred})\nsubmit.to_csv('houseprice.csv',index= False)\nprint('Shape: ',submit.shape)\nsubmit.head()","cf238d38":"from sklearn.model_selection import RandomizedSearchCV\n\nparam = {\n    'n_estimators':[200, 500, 1000,2000],\n    'learning_rate': np.linspace(0.001, 1, 10),\n    'max_depth': [3,5,7,8,10],\n    'num_leaves': [32, 64, 128],\n    'feature_fraction': np.linspace(0.7,1,5),\n    'bagging_fraction': np.linspace(0.6,1,5),\n    'lambda_l1': np.linspace(0,1,20),\n    'lambda_l2': np.linspace(0,1,20),\n}\n\nlgb_reg = lgb.LGBMRegressor(eval_metric ='mse',)\nrsCV = RandomizedSearchCV(lgb_reg,cv= 5,param_distributions= param,random_state= seed)\nrsCV.fit(X,y)","fe4d98f1":"rsCV.best_params_","f759026f":"# Lightgbm\ndef model(X_train, X_valid, y_train, y_valid,test_new,random_seed, param):\n    \n    lg_param = {}\n    lg_param['learning_rate'] = param['learning_rate']\n    lg_param['n_estimators'] = param['n_estimators']\n    lg_param['max_depth'] = param['max_depth']\n    #lg_param['num_leaves'] = param['num_leaves']\n    lg_param['boosting_type'] = 'gbdt'\n    lg_param['feature_fraction'] = param['feature_fraction']\n    lg_param['bagging_fraction'] = param['bagging_fraction']\n    lg_param['lambda_l1'] = param['lambda_l1']\n    lg_param['lambda_l2'] = param['lambda_l2']\n    lg_param['silent'] = -1\n    lg_param['verbose'] = -1\n    lg_param['nthread'] = 4\n    lg_param['seed'] = random_seed\n    \n    lgb_model = lgb.LGBMRegressor(**lg_param)\n    print('-'*10,'*'*20,'-'*10)\n    lgb_model.fit(X_train,y_train,eval_set=[(X_train,y_train),(X_valid,y_valid)], \n                 eval_metric ='mse', verbose =100, early_stopping_rounds=50)\n    y_pred = lgb_model.predict(X_valid)\n    y_pred_new = lgb_model.predict(test_new)\n    return y_pred,y_pred_new,lgb_model","a8230b7d":"kf = KFold(n_splits=5, random_state=seed,)\n\nfinal_pred = 0\nrmse = []\nfor i, (train_index, test_index) in enumerate(kf.split(X)):\n    print(f'Modelling {i+1} of {kf.n_splits} fold')\n    X_train, X_valid = X.loc[train_index], X.loc[test_index]\n    y_train, y_valid = y[train_index], y[test_index]\n    \n    # GBM Regression\n    print('\\n{} fold of {} KFold'.format(i+1,kf.n_splits))\n    y_pred,y_pred_new,lgb_model = model(X_train, X_valid, y_train, y_valid,new_test,random_seed = i,\n                                    param = rsCV.best_params_)\n    final_pred += y_pred_new\n    rmse.append(mean_squared_error(y_valid, y_pred)**0.5)\n    #print('*'*10,'Rmse:',round(r2,3), '*'*10,'\\n')","886ffcf4":"print(rmse,'\\nRMSE:',np.mean(rmse))","f375eb87":"lgb.plot_importance(lgb_model,max_num_features=20)","ea94ec60":"f = plt.figure(figsize= (14,6))\n\nax = f.add_subplot(121)\nax.scatter(y_valid, y_pred)\nplt.title('Scatter plot of y_true vs y_pred')\n\nresidual = y_valid - y_pred\nax = f.add_subplot(122)\nsns.distplot(residual, ax = ax)\nplt.axvline(residual.mean())\nplt.title('Residual plot');","369c994e":"#pred = reg.predict(new_test)\npred = np.expm1(final_pred\/ kf.n_splits)\nsubmit = pd.DataFrame({'Id':test_id,'SalePrice':pred})\nsubmit.to_csv('houseprice_lgb.csv',index= False)\nprint('Shape: ',submit.shape)\nsubmit.head()","ecadd4c3":"### 2.63 GarageCond: Garage condition\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","62176053":"### 2.70 YrSold: Year Sold (YYYY)","00565dbf":"### 2.19 YearBuilt: Original construction date","5b49d0f8":"### 2.14 Condition2: Proximity to various conditions (if more than one is present)\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad","af2673fe":"### 2.68 MiscVal: $Value of miscellaneous feature","71bcbcde":"### 2.57 FireplaceQu: Fireplace quality\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace","b6bc8f59":"### 2.30 ExterCond: Evaluates the present condition of the material on the exterior\n* Ex: Excellent\n* Gd: Good\n* TA: Average\/Typical\n* Fa: Fair\n* Po: Poor","71a3d30a":"### 2.27 ExterQual: Evaluates the quality of the material on the exterior \n* Ex: Excellent\n* Gd: Good\n* TA: Average\/Typical\n* Fa: Fair\n* Po: Poor","b70f59f6":"# House Price prediction\n\nSalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n","e4ddbc5e":"### 2.31 Foundation: Type of foundation\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood","c4530430":"### 1.1 Import dataset","cb07a8d8":"### 2.56 Fireplaces: Number of fireplaces","17c36c1e":"### 2.65 \n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet","23d401c4":"### 2.66 PoolQC: Pool quality\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool","9fb120ad":"### 2.37 BsmtFinType2: Rating of basement finished area (if multiple types)\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","b3ec3c14":"### 2.44 Electrical: Electrical system\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed","ac83e15e":"### 2.3 LotFrontage: Linear feet of street connected to property","33959a84":"### 2.9 Utilities: Type of utilities available\n\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t","54612373":"### 2.33 BsmtCond: Evaluates the general condition of the basement\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement","1f6cef54":"## 7.0 Model","dc55ed2d":"### 1.4 Usefull function","e87931ba":"### 2.4 LotArea: Lot size in square feet","27e46386":"### 2.6 Alley: Type of alley access to property\n* Grvl: Gravel\n* Pave: Paved\n* NA: No alley access","d9d335d2":"### 2.2 MSZoning: Identifies the general zoning classification of the sale.\n* A Agriculture\n* C Commercial\n* FV Floating Village Residential\n* I Industrial\n* RH Residential High Density\n* RL Residential Low Density\n* RP Residential Low Density Park \n* RM Residential Medium Density","3419d53d":"### 2.48 BsmtHalfBath: Basement half bathrooms","4f859a2f":"### 2.62 GarageQual: Garage quality\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","e6618c14":"### 2.64 PavedDrive: Paved driveway\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel","b84246fb":"### 2.72 SaleCondition: Condition of sale\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)","50e5ed75":"### 2.60 GarageCars: Size of garage in car capacity","9f5a35a7":"### 5.0 Model\nLet's build L2 regularized linear regression with 5 fold cross validation strategy.","d1d8600b":"### 2.32 BsmtQual: Evaluates the height of the basement\n* Ex: Excellent (100+ inches)\t\n* Gd: Good (90-99 inches)\n* TA: Typical (80-89 inches)\n* Fa: Fair (70-79 inches)\n* Po: Poor (<70 inches\n* NA: No Basement","3e953692":"## 2 Exploratory data analysis\n### 2.0 SalePrice:\nThe property's sale price in dollars. This is the target variable that we were trying to predict.","156bef53":"### 2.12 Neighborhood: Physical locations within Ames city limits\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker","33c0923b":"### 2.13 Condition1: Proximity to various conditions\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad","716f9cc0":"### 2.67 MiscFeature: Miscellaneous feature not covered in other categories\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone","a19bdb4e":"## 1.0 Import library","a7acaee5":"### 1.3 Missing value","d55fe448":"### 2.26 MasVnrArea: Masonry veneer area in square feet","961eed94":"### 2.17 OverallQual: Rates the overall material and finish of the house\n10: Very Excellent\n9: Excellent\n8: Very Good\n7: Good\n6: Above Average\n5: Average\n4: Below Average\n3: Fair\n2: Poor\n1: Very Poor","fa3241b7":"### 2.57 GarageType: Garage location\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage","e743a841":"### 2.23 Exterior1st: Exterior covering on house\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","e5d68048":"### 2.39 BsmtUnfSF: Unfinished square feet of basement area","c8008eee":"### 2.7 LotShape: General shape of property\n* Reg: Regular\n* IR1: Slightly irregular\n* IR2: Moderately Irregular\n* IR3: Irregular","f232e209":"### 2.11 LandSlope: Slope of property\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope","f1b16849":"### 2.22 RoofMatl: Roof material\n    ClyTile\tClay or Tile\n    CompShg\tStandard (Composite) Shingle\n    Membran\tMembrane\n    Metal\tMetal\n    Roll\tRoll\n    Tar&Grv\tGravel & Tar\n    WdShake\tWood Shakes\n    WdShngl\tWood Shingles","3d21a618":"### 2.5 Street: Type of road access to property\n* Grvl: Gravel\n* Pave: Paved","072ac63c":"### 2.18 OverallCond: Rates the overall condition of the house\n10: Very Excellent\n9: Excellent\n8: Very Good\n7: Good\n6: Above Average\n5: Average\n4: Below Average\n3: Fair\n2: Poor\n1: Very Poor","f1df7ce3":"### 2.21 RoofStyle: Type of roof","3bda1a38":"### 2.67 Fence: Fence quality\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence","79e03904":"### 3.0 Data preprocessing","227fe22e":"### 2.40 TotalBsmtSF: Total square feet of basement area","4ebfd507":"### 2.71 SaleType: Type of sale\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther","b363344b":"### 2.43 CentralAir: Central air conditioning","047741cc":"### 2.25 MasVnrType: Masonry veneer type\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone","b3a6bec1":"### 2.1 MSSubClass: The building class\nIdentifies the type of dwelling involved in the sale.\n* 20 1-STORY 1946 & NEWER ALL STYLES\n* 30 1-STORY 1945 & OLDER\n* 40 1-STORY W\/FINISHED ATTIC ALL AGES\n* 45 1-1\/2 STORY - UNFINISHED ALL AGES\n* 50 1-1\/2 STORY FINISHED ALL AGES\n* 60 2-STORY 1946 & NEWER\n* 70 2-STORY 1945 & OLDER\n* 75 2-1\/2 STORY ALL AGES\n* 80 PLIT OR MULTI-LEVEL\n* 85 SPLIT FOYER\n* 90 DUPLEX - ALL STYLES AND AGES\n* 120 1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n* 150 1-1\/2 STORY PUD - ALL AGES\n* 160 2-STORY PUD - 1946 & NEWER\n* 180 PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n* 190 2 FAMILY CONVERSION - ALL STYLES AND AGES\n","0d6ff14d":"### 2.54 TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)","eceb28c7":"### 2.41 Heating: Type of heating\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnace","3d0264d5":"### 2.42 HeatingQC: Heating quality and condition\n* Ex: Excellent\n* Gd: Good\n* TA: Average\/Typical\n* Fa: Fair\n* Po: Poor","2ab7c41c":"### 2.49 FullBath: Full bathrooms above grade","2ccde3ba":"### 2.61 GarageArea: Size of garage in square feet","635a8ae1":"### 2.20 YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)","65b82a80":"### 2.16 HouseStyle: Style of dwelling\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level","28ac08b6":"### 2.36 BsmtFinSF1: Type 1 finished square feet","5621a76d":"### 2.51 Bedroom: Bedrooms above grade (does NOT include basement bedrooms)","b9e2d407":"### 1.2 Glimpse dataset","c8ae15d3":"### 2.55 Functional: Home functionality (Assume typical unless deductions are warranted)\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only","8d155e3d":"### 1.5 Column","34be1db2":"### 2.47 BsmtFullBath: Basement full bathrooms","b12334a8":"### 2.38 BsmtFinSF2: Type 2 finished square feet","93a02c81":"### 2.58 GarageYrBlt: Year garage was built","2e14589c":"### 2.15 BldgType: Type of dwelling\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit","0dcab774":"### 2.8 LandContour: Flatness of the property\n* Lvl: Near Flat\/Level\n* Bnk: Banked - Quick and significant rise from street grade to building\n* HLS: Hillside - Significant slope from side to side\n* Low: Depression","ad3329f5":"### 2.10 LotConfig: Lot configuration\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property","ef0092f2":"## 4.0 Model Selection","ebabcd3a":"### 2.24 Exterior2nd: Exterior covering on house (if more than one material)\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","0bd8e073":"### 2.59 GarageFinish: Interior finish of the garage\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage","2ae3f001":"### 2.50 HalfBath: Half baths above grade","f71e7399":"### 2.52 KitchenAbvGr: Kitchens above grade","f7880813":"### 2.34 BsmtExposure: Refers to walkout or garden level walls\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement","42d87fcd":"### 2.35 BsmtFinType1: Rating of basement finished area\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","94dea50c":"### 2.44 \n* 1stFlrSF: First Floor square feet \n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet","cf2041a2":"## 6.0 Model Evaluation","cca34c04":"### 2.53 KitchenQual: Kitchen quality\n* Ex: Excellent\n* Gd: Good\n* TA: Average\/Typical\n* Fa: Fair\n* Po: Poor","b2c49082":"### Thank you","9933de4b":"### 2.69 MoSold: Month Sold (MM)"}}