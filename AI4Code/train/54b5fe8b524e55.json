{"cell_type":{"79ae7e38":"code","d867afdf":"code","cc3d3555":"code","63bd9769":"code","ef823f2a":"code","779adf54":"code","5da76ae8":"code","0b13599b":"code","a9e5eacd":"markdown","e3052dcd":"markdown","8707159f":"markdown","6de14047":"markdown","cb16e54b":"markdown","cbedb6af":"markdown","34e5da45":"markdown","2fe90bb9":"markdown","202cbb05":"markdown"},"source":{"79ae7e38":"input_country, input_city = 'India', 'Lucknow'\n# find_topk_nearby_channels(input_country, input_city)","d867afdf":"import numpy as np\nimport pandas as pd","cc3d3555":"WorldData = pd.read_csv(\n                 '..\/input\/world-cities-database\/worldcitiespop.csv',\n                 dtype={'Country':str,'City':str,'AccentCity':str,'Region':str,'Population':np.float64,'Latitude':np.float64,'Longitude':np.float64},\n                 low_memory=False)\nWorldData.drop(['Region','Population'], inplace=True, axis=1)\nWorldData.dropna(axis=0, inplace=True)\nCodeToCountry = pd.read_csv('..\/input\/isoalpha2codes\/data_csv.csv')\nSlackData = pd.read_csv('..\/input\/openminedslackchannellocationdata\/SlackData.csv')","63bd9769":"slackChannelData = [\n    ['#bangalore', 'Bengaluru', 'India'],\n    ['#bhubaneshwar', 'Bhubaneshwar', 'India'],\n    ['#chennai', 'Chennai', 'India'],\n    ['#coimbatore', 'Coimbatore','India'],\n    ['#hyderabad', 'Hyderabad', 'India'],\n    ['#kolkata', 'Kolkata', 'India'],\n    ['#mumbai', 'Mumbai', 'India'],\n    ['#delhi-ncr', 'Delhi', 'India'],\n    ['#pune-india', 'Pune', 'India'],\n    ['#atlanta', 'Atlanta', 'United States'],\n    ['#boston', 'Boston', 'United States'],\n    ['#chicago', 'Chicago', 'United States'],\n    ['#dallas', 'Dallas', 'United States'],\n    ['#florida', 'Florida', 'United States'],\n    ['#los-angeles', 'Los Angeles', 'United States'],\n    ['#montreal', 'Montreal', 'Canada'],\n    ['#nashville', 'Nashville', 'United States'],\n    ['#newyork', 'New York', 'United States'],\n    ['#san-francisco', 'San Francisco', 'United States'],\n    ['#seattle', 'Seattle', 'United States'],\n    ['#toronto', 'Toronto', 'Canada'],\n    ['#washington-dc', 'Washington', 'United States'],\n    ['#amsterdam', 'Amsterdam', 'Netherlands'],\n    ['#athens', 'Athens', 'Greece'],\n    ['#barcelona', 'Barcelona', 'Spain'],\n    ['#berlin', 'Berlin', 'Germany'],\n    ['#dublin', 'Dublin', 'Ireland'],\n    ['#lisbon', 'Lisbon', 'Portugal'],\n    ['#london', 'London', 'United Kingdom'],\n    ['#madrid', 'Madrid', 'Spain'],\n    ['#munich', 'Munich', 'Germany'],\n    ['#paris', 'Paris', 'France'],\n    ['#prague', 'prague', 'Czech Republic'],\n    ['#preveza', 'Preveza', 'Greece'],\n    ['#zurich', 'Zurich', 'Switzerland'],\n    ['#abuja', 'Abuja', 'Nigeria'],\n    ['#auckland', 'Auckland', 'New Zealand'],\n    ['#bangkok', 'Bangkok', 'Thailand'],\n    ['#dhaka', 'Dhaka', 'Bangladesh'],\n    ['#ghana', 'Accra', 'Ghana'],\n    ['#istanbul', 'Istanbul', 'Turkey'],\n    ['#italy', 'Rome', 'Italy'],\n    ['#jakarta', 'Jakarta', 'Indonesia'],\n    ['#kathmandu', 'Kathmandu', 'Nepal'],\n    ['#lagos', 'Lagos', 'Nigeria'],\n    ['#melbourne', 'Melbourne', 'Australia'],\n    ['#mexico', 'Mexico', 'Mexico'],\n    ['#moscow', 'Moscow', 'Russian Federation'],\n    ['#philippines', 'Manila', 'Philippines'],\n    ['#punjab', 'Lahore', 'Pakistan'],\n    ['#sao-paulo', 'S\u00e3o Paulo', 'Brazil'],\n    ['#singapore', 'Singapore', 'Singapore'],\n    ['#tokyo', 'Tokyo', 'Japan'],\n]","ef823f2a":"def country_to_code(country: str):\n    code = CodeToCountry[CodeToCountry.Name.str.lower() == str.lower(country)].Code\n    countryCode = next(iter(code), None)\n    return countryCode","779adf54":"def find_coords(country: str, city: str):\n    countryCode = country_to_code(country)\n    if countryCode is not None:\n        locationData = WorldData[(WorldData.Country == str.lower(countryCode)) & ((WorldData.AccentCity==city) | (WorldData.City == str.lower(city)))]\n    else:\n        print(\"Country not found. Searching cities worldwide\")\n        locationData = WorldData[(WorldData.AccentCity == city) | (WorldData.City == str.lower(city))]\n    if not locationData.shape[0]:\n        print(\"City not found. Try again with some nearby prominent city\")\n    lat, long = locationData.Latitude, locationData.Longitude\n    lat = next(iter(lat), None)\n    long = next(iter(long), None)\n    return lat, long","5da76ae8":"def build_slack_channel_data(slackChannelData):\n    latitudes = []\n    longitudes = []\n    for channel, city, country in slackChannelData:\n        lat, long = find_coords(country, city)\n        if lat is not None and long is not None:\n            latitudes.append(lat)\n            longitudes.append(long)\n        else:\n            print(\"Failed to find coordinates for channel: \", channel)\n            return\n    SlackData = pd.DataFrame(slackChannelData, columns=['Channel Name','City', 'Country'])\n    SlackData['Latitude'] = latitudes\n    SlackData['Longitude'] = longitudes\n    return SlackData\n#SlackData = build_slack_channel_data(slackChannelData)\n#SlackData.to_csv('SlackData.csv', index=False)","0b13599b":"def find_topk_nearby_channels(inputCountry, inputCity, slackdata=SlackData, k=5):\n    lat, long = find_coords(inputCountry, inputCity)\n    if lat is not None and long is not None:\n        return slackdata.iloc[((slackdata['Longitude'] - long)**2+(slackdata['Latitude'] - lat)**2).argsort()[:k],:3]\n    else:\n        return","a9e5eacd":"### Imports","e3052dcd":"### Raw slack channel data","8707159f":"### Returns ISO ALPHA 2 country codes for input country name","6de14047":"#### Step 1: Run all cells\n#### Step 2: That's all. Now you can query using below cell\nDon't forget to uncomment the function call below before making queries but only after step 1 is done","cb16e54b":"### Returns latitude and longitude for input city name","cbedb6af":"# OM Nearby Slack Channel Finder","34e5da45":"### Load and preprocess data","2fe90bb9":"### Returns k closest slack channels for given input","202cbb05":"### Create SlackData from raw slack data\n(to be used only when there are changes in raw slack channel data)"}}