{"cell_type":{"29d05aff":"code","95f59c31":"code","18253013":"code","c3105aed":"code","387d8edb":"code","ded103a6":"code","ccabaf0a":"code","11bd10b4":"code","7da0c164":"code","e2b89816":"code","adb26893":"code","31787e59":"code","35459b4b":"code","d2088138":"code","6345805c":"code","5ca98091":"code","aa7f8e2d":"code","94bef6d2":"code","fabc62fd":"code","607b2c82":"code","ab6575c9":"code","ddff462b":"code","3064792e":"code","a1d8cffa":"code","fdcdab3a":"code","564c7a7b":"code","2a2fa650":"code","8f2c80e6":"code","6e7ea6fe":"code","231737f0":"code","dda6fc13":"code","b13fd667":"code","dfcdb999":"code","88db4f34":"code","0ae77d9d":"code","cbc75adf":"code","88b32af7":"markdown","0338d443":"markdown","0fb39403":"markdown","5c1e888d":"markdown"},"source":{"29d05aff":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\nimport os\nimport gc\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\n\nfrom nltk.corpus import stopwords\neng_stopwords = set(stopwords.words(\"english\"))\nimport string","95f59c31":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ngc.collect()","18253013":"test_df = pd.read_csv(\"..\/input\/test.csv\")","c3105aed":"train_df[\"question_text\"].isna().sum(), test_df[\"question_text\"].isna().sum(), ","387d8edb":"train_df, val_df = train_test_split(train_df, test_size=0.1, random_state = 1001)","ded103a6":"train_df.shape, val_df.shape","ccabaf0a":"max_features = 95000\nmax_len = 72\nembed_size = 300","11bd10b4":"%%time\n# embdedding setup\n# Source https:\/\/blog.keras.io\/using-pre-trained-word-embeddings-in-a-keras-model.html\nembeddings_index = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\nfor line in tqdm(f):\n    values = line.split(\" \")\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\ngc.collect()\nprint('Found %s word vectors.' % len(embeddings_index))","7da0c164":"# Convert values to embeddings\ndef text_to_array(text, zeros = 300, split_val = max_len):\n    empyt_emb = np.zeros(zeros)\n    text = text[:-1].split()[:split_val]\n    embeds = [embeddings_index.get(x, empyt_emb) for x in text]\n    embeds+= [empyt_emb] * (split_val - len(embeds))\n    return np.array(embeds)","e2b89816":"# train_vects = [text_to_array(X_text) for X_text in tqdm(train_df[\"question_text\"])]\nval_vects = np.array([text_to_array(X_text) for X_text in tqdm(val_df[\"question_text\"][:5000])]) \nval_y = np.array(val_df[\"target\"][:5000])","adb26893":"# Data providers\nbatch_size = 256\n\ndef batch_gen(train_df):\n    n_batches = math.ceil(len(train_df) \/ batch_size)\n    while True: \n        train_df = train_df.sample(frac=1.)  # Shuffle the data.\n        for i in range(n_batches):\n            texts = train_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n            text_arr = np.array([text_to_array(text) for text in texts])\n            yield text_arr, np.array(train_df[\"target\"][i*batch_size:(i+1)*batch_size])\n","31787e59":"from keras.models import Sequential,Model\nfrom keras.layers import CuDNNLSTM, Dense, Bidirectional, Input,Dropout, CuDNNGRU\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints\nfrom keras.callbacks import Callback, EarlyStopping, ModelCheckpoint\nfrom sklearn.metrics import f1_score\nfrom keras.layers.normalization import BatchNormalization\nfrom keras import backend as K\nfrom keras.engine.topology import Layer, InputSpec","35459b4b":"class Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('normal')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim","d2088138":"class F1Evaluation(Callback):\n    def __init__(self, validation_data=(), interval=1):\n        super(Callback, self).__init__()\n        self.interval = interval\n        self.X_val, self.y_val = validation_data\n\n    def on_epoch_end(self, epoch, logs={}):\n        if epoch % self.interval == 0:\n            y_pred = self.model.predict(self.X_val, verbose=0)\n            y_pred = (y_pred > 0.5).astype(int)\n            score = f1_score(self.y_val, y_pred)\n            print(\"\\n F1 - Epoch: %d - Score: %.6f \\n\" % (epoch+1, score)) ","6345805c":"esr = EarlyStopping(verbose=2, patience=3)","5ca98091":"f1 = F1Evaluation(validation_data=(val_vects, val_y), interval=1)","aa7f8e2d":"inp = Input(shape=(max_len,300 ))\nx = Bidirectional(CuDNNGRU(192, return_sequences=True))(inp)\nx = Bidirectional(CuDNNGRU(64,return_sequences=True))(x)\nx = Attention(max_len)(x)\n#x = Dropout(0.25)(x)\nx = Dense(32, activation=\"relu\")(x)\nx = Dropout(0.25)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","94bef6d2":"model.summary()","fabc62fd":"from keras.utils import plot_model\nplot_model(model, to_file='model.png',show_shapes=True)\n\nfrom IPython.display import Image\nImage(filename='model.png')\n#from keras.utils.vis_utils import model_to_dot\n\n#SVG(model_to_dot(model).create(prog='dot', format='svg'))","607b2c82":"model_name = 'gru_model'#%(rate_drop_lstm,rate_drop_dense)\nprint(model_name)","ab6575c9":"bst_model_path = model_name + '.h5'\nmodel_checkpoint = ModelCheckpoint(bst_model_path, save_best_only=True, save_weights_only=True, verbose=1)","ddff462b":"gc.collect() ","3064792e":"np.random.seed(2018)\nmg = batch_gen(train_df)\nhist = model.fit_generator(mg, epochs=30,\n                    steps_per_epoch=512,\n                    validation_data=(val_vects, val_y), callbacks=[f1, esr, model_checkpoint],\n                    verbose=2)","a1d8cffa":"model.load_weights(bst_model_path)","fdcdab3a":"import matplotlib.pyplot as plt ","564c7a7b":"gc.collect()","2a2fa650":"plt.plot(hist.history['acc'])\nplt.plot(hist.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.xlim(1,)\nplt.legend(['Train', 'Val'], loc='upper left')\nplt.show()","8f2c80e6":"# summarize history for loss\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.xlim(1,)\nplt.legend(['Train', 'Val'], loc='upper left')\nplt.show()","6e7ea6fe":"# prediction part\nbatch_size = 256\ndef batch_gen(test_df):\n    n_batches = math.ceil(len(test_df) \/ batch_size)\n    for i in range(n_batches):\n        texts = test_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n        text_arr = np.array([text_to_array(text) for text in texts])\n        yield text_arr\n\n\n\nall_preds = []\nfor x in tqdm(batch_gen(test_df)):\n    all_preds.extend(model.predict(x).flatten())","231737f0":"%%time\nval_preds = []\nfor x in batch_gen(val_df):\n    val_preds.extend(model.predict(x).flatten())","dda6fc13":"gc.collect()","b13fd667":"pd.Series(all_preds).describe()","dfcdb999":"_thresh = [] \nfor thresh in np.arange(0.1, 0.501, 0.01): \n    _thresh.append([thresh, f1_score(val_df[\"target\"], (val_preds>thresh).astype(int))])\n    print(\"F1 score at threshold {0} is {1}\".format(thresh, f1_score(val_df[\"target\"], (val_preds>thresh).astype(int))))","88db4f34":"_thresh = np.array(_thresh)\nbest_id = _thresh[:,1].argmax()\nbest_thresh = _thresh[best_id][0]\nbest_thresh","0ae77d9d":"y_te = (np.array(all_preds) > best_thresh).astype(np.int)\n\nsubmit_df = pd.DataFrame({\"qid\": test_df[\"qid\"], \"prediction\": y_te})\nsubmit_df.to_csv(\"submission.csv\", index=False)","cbc75adf":"submit_df.head()","88b32af7":"# Inference","0338d443":"And the credit goes to [Miha Skalic](http:\/\/www.kaggle.com\/mihaskalic) for [LSTM is all you need! well, maybe embeddings also](https:\/\/www.kaggle.com\/mihaskalic\/lstm-is-all-you-need-well-maybe-embeddings-also). This is a modied version of it.  ","0fb39403":"# Training","5c1e888d":"# Setup"}}