{"cell_type":{"c85d22af":"code","c9731ca4":"code","b25ab9ca":"code","587091fe":"code","01dac4cf":"code","d808e581":"code","2f958ef0":"code","e06bc402":"code","0f221bb2":"code","d2108148":"code","bcc42019":"code","e6f6e975":"markdown","78653490":"markdown","405215e4":"markdown","65b5854d":"markdown","ae4aa591":"markdown","440159ce":"markdown","df1f68c1":"markdown"},"source":{"c85d22af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c9731ca4":"import seaborn as sns","b25ab9ca":"credit_df = pd.read_csv(\"\/kaggle\/input\/credit\/Default.csv\",index_col=0)\ncredit_df.head()","587091fe":"credit_df.info()","01dac4cf":"sns.boxplot(y=\"balance\",x=\"student\",data=credit_df,width=0.8)","d808e581":"sns.pairplot(credit_df,hue=\"student\")","2f958ef0":"credit_df[credit_df[\"default\"] == \"Yes\"].head()","e06bc402":"sns.heatmap(data=credit_df.corr(), annot=True, linewidths=.5, cmap=\"coolwarm\")","0f221bb2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nmodl = LogisticRegression(random_state=10)\n\n# Create feature set\nX = credit_df[['balance','income']]\nX[\"student\"] = pd.get_dummies(credit_df[\"student\"],drop_first=True)\ny = credit_df[\"default\"]\n\n# create a training and a test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=10)\n\nmodl.fit(X_train,y_train)\ny_predict = modl.predict(X_test)","d2108148":"print(confusion_matrix(y_test,y_predict))\nprint(classification_report(y_test,y_predict))","bcc42019":"modl.predict_proba(np.array([1500,25000,0]).reshape(1,-1))","e6f6e975":"Let has a look at the Correlation Matrix as a heatmap","78653490":"According to the model, Chances of a \"No\" (i.e. will not default) 93.3% and for  Yes (i.e will default) is 6.6%. The Nos have it. Increase that guys limit :-)","405215e4":"Looks like based on the data we can predict the likelyhood of not defaulting with 96% accuracy. From the confusion matrix above, we only has 1 also false positive (in this case a positive reading is the likelyhood of not defaulting). Great lets try it out.\n\nSo a user with a credit balance of 1500 and an income of 25k who is not a student. I wonder what if this user will defualt","65b5854d":"Load the credit data and let get some information on the data.","ae4aa591":"Okay lets predict default using Logistic Regression","440159ce":"Great our Model is ready so how accurate is it?","df1f68c1":"Balance by Gender"}}