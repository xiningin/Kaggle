{"cell_type":{"9262de16":"code","e8f3c3f7":"code","4ac78fa7":"code","1df7631f":"code","01636f8a":"code","c3baf213":"code","7b275f38":"code","9937b5a8":"code","8994e395":"code","54a55e98":"code","e8a42992":"code","5a2e486b":"code","663a9f3a":"code","b1b4bb53":"code","653d78ec":"code","4c143609":"code","974c777e":"code","fc69eb37":"code","751b3398":"markdown","9366f653":"markdown","6c8c163e":"markdown","19644018":"markdown","4112bae7":"markdown","571d74ef":"markdown","d0b09944":"markdown","2ecdb6f5":"markdown","be3419e8":"markdown","b8c6a230":"markdown"},"source":{"9262de16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8f3c3f7":"import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\npd.set_option('display.max_rows', 20)\nimport re","4ac78fa7":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\nWHO_Life_Exp = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/WHOregionLifeExpectancyAtBirth.csv')  \nWHO_HALE_EXP_BIRTH = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/HALeWHOregionLifeExpectancyAtBirth.csv')\nHALE_EXP = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/ofHaleInLifeExpectancy.csv')\nWHO_Life_Exp_Birth = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/lifeExpectancyAtBirth.csv')\nMedicalDoctors = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/medicalDoctors.csv')\nCancerEtc = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/30-70cancerChdEtc.csv')\n\nUnsafeWash = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/mortalityRateUnsafeWash.csv')\n\nMaternalMortality = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/maternalMortalityRatio.csv')\n\nSanitation = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/atLeastBasicSanitizationServices.csv') # Population using at least basic sanitation services (%)\n\nUHC = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/uhcCoverage.csv')\n\nPharmacists = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/pharmacists.csv')\n\nDrinkingWater = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/basicDrinkingWaterServices.csv') # Population using at least basic drinking-water services (%)\n\nNeonatalMortality = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/neonatalMortalityRate.csv')","1df7631f":"def clean(df):\n    df['Location'] = df['Location'].str.replace('United Kingdom of Great Britain and Northern Ireland', 'United Kingdom')\n    df['Location'] = df['Location'].str.replace('Viet Nam', 'Vietnam')\n    df['Location'] = df['Location'].str.replace('Democratic Republic of the Congo', 'Dem. Rep. Congo')\n\n    df['Location'] = df['Location'].str.replace('Republic of Korea', 'South Korea')\n    df['Location'] = df['Location'].str.replace(\"Democratic People's South Korea\", 'North Korea')\n\n    df['Location'] = df['Location'].str.replace(\"Lao People's Democratic Republic\", 'Laos')\n    df['Location'] = df['Location'].str.replace(\"Russian Federation\", 'Russia')\n    df['Location'] = df['Location'].str.replace(\"Equatorial Guinea\", 'Eq. Guinea')\n    df['Location'] = df['Location'].str.replace(\"Dominican Republic\", 'Dominican Rep.')\n    df['Location'] = df['Location'].str.replace(\"South Sudan\", 'S. Sudan')\n    df['Location'] = df['Location'].str.replace(\"C\u00f4te d\u2019Ivoire\", \"C\u00f4te d'Ivoire\")\n    df['Location'] = df['Location'].str.replace(\"United Republic of Tanzania\", 'Tanzania')\n    df['Location'] = df['Location'].str.replace(\"Central African Republic\", 'Central African Rep.')\n    df['Location'] = df['Location'].str.replace(\"Syrian Arab Republic\", 'Syria')\n    df['Location'] = df['Location'].str.replace(\"The former Yugoslav Republic of Macedonia\", 'Macedonia')\n    df['Location'] = df['Location'].str.replace(\"Bosnia and Herzegovina\", 'Bosnia and Herz.')\n    df['Location'] = df['Location'].str.replace(\"Republic of Moldova\", 'Moldova')\n    df['Location'] = df['Location'].str.replace(\"Solomon Islands\", 'Solomon Is.')\n    df['Location'] = df['Location'].str.replace(\"Brunei Darussalam\", 'Brunei')\n    df['Location'] = df['Location'].str.replace(\"Eswatini\", 'eSwatini')\n    \n    df.loc[df['Location'].str.startswith('Iran'), 'Location'] = 'Iran' \n    df.loc[df['Location'].str.startswith('Venezuela'), 'Location'] = 'Venezuela' \n    df.loc[df['Location'].str.startswith('Bolivia'), 'Location'] = 'Bolivia' \n    df.loc[df['Location'].str.startswith('Micronesia'), 'Location'] = 'Micronesia' \n    df.loc[df['Location'].str.startswith('Sudan'), 'Location'] = 'Sudan' \n\nNeonatalMortality2 = NeonatalMortality\nWHO_Life_Exp_Birth2 = WHO_Life_Exp_Birth\nMedicalDoctors2 = MedicalDoctors\nCancerEtc2 = CancerEtc\nMaternalMortality2 = MaternalMortality\n\nclean(NeonatalMortality2)\nclean(WHO_Life_Exp_Birth2)\nclean(MedicalDoctors2)\nclean(CancerEtc2)\nclean(MaternalMortality2)\nclean(NeonatalMortality2)\n\nWHO_Life_Exp_Birth2.drop(WHO_Life_Exp_Birth2.loc[WHO_Life_Exp_Birth2['Period'] == 1920].index, inplace=True)\n\n","01636f8a":"MedicalDoctorsPivot = pd.pivot_table(MedicalDoctors2, values=['First Tooltip'], index=['Location'], columns = ['Period'])\n\nMedicalDoctorsPivot2 = MedicalDoctorsPivot\n\nfor x in range(len(MedicalDoctorsPivot2.index)):\n    for i in range(len(MedicalDoctorsPivot2.columns)):\n        if np.isnan(MedicalDoctorsPivot2.iloc[x, i]):\n            MedicalDoctorsPivot2.iloc[x, i] = MedicalDoctorsPivot2.iloc[x, (i-1)]        \n\n#DoctorsFinal = []\n#for x in range(29):\n#    for y in range(194):\n#        DoctorsFinal.append([MedicalDoctorsPivot2.index[y],\n#                             MedicalDoctorsPivot2.columns[x],\n#                             MedicalDoctorsPivot2.iloc[y,x]])\n    \n#DoctorsFinal = pd.DataFrame(DoctorsFinal,columns=[\"Location\", \"Period\", 'Doctors'])     \n#world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n#world = world.rename(columns={\"name\": \"Location\"})\n#test4 = pd.merge(world,DoctorsFinal,on=['Location'],how='left')\n#test4 = test4.dropna()\n#test4 = test4.sort_values(by=['Period']).reset_index()","c3baf213":"WHO_Life_Exp_Birth_Sex = WHO_Life_Exp_Birth2[WHO_Life_Exp_Birth2['Dim1'] == 'Both sexes'].sort_values(by=['Period']).reset_index()\n\nworld = world.rename(columns={\"name\": \"Location\"})\n\ntest = pd.merge(world,WHO_Life_Exp_Birth_Sex,on=['Location'],how='left')\n\ntest = test.dropna()\n\ntest = test.sort_values(by=['Period']).reset_index()\n\ntest.loc[test.Location == 'France', 'iso_a3'] = \"FRA\"\ntest.loc[test.Location == 'Norway', 'iso_a3'] = \"NOR\"\n\nfig = px.choropleth(test, locations=\"iso_a3\",\n                    color=\"First Tooltip\", # lifeExp is a column of gapminder\n                    hover_name=\"Location\",# column to add to hover information\n                    animation_frame='Period',\n                    color_continuous_midpoint = 60,\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    width=1200, height=800,\n                    title = 'Life Expectancy at Birth')\n\nfig.update_traces(colorbar_nticks=10, selector=dict(type='choropleth'))\nfig.show()","7b275f38":"WHO_Life_Exp_Birth2Pivot = pd.pivot_table(WHO_Life_Exp_Birth2, values=['First Tooltip'], index=['Dim1'], columns = ['Period'], aggfunc={'First Tooltip': np.mean}).T\n\nWHO_Life_Exp_Birth2Pivot['Date'] = [2000, 2010, 2015, 2019]\n\nfig = px.line(WHO_Life_Exp_Birth2Pivot, x=\"Date\", y=[\"Both sexes\", 'Male', 'Female'], title = ' Global Life Expectancy at Birth')\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x\")\nfig.show()","9937b5a8":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\nworld = world.rename(columns={\"name\": \"Location\"})\n\ntest3 = pd.merge(world,MedicalDoctors2,on=['Location'],how='left')\n\ntest3 = test3.dropna()\n\ntest3 = test3.sort_values(by=['Period']).reset_index()\n\n\ntest3.loc[test3.Location == 'France', 'iso_a3'] = \"FRA\"\ntest3.loc[test3.Location == 'Norway', 'iso_a3'] = \"NOR\"\n\nfig = px.choropleth(test3, locations=\"iso_a3\",\n                    color=\"First Tooltip\", # lifeExp is a column of gapminder\n                    color_discrete_map={\n                        0-5: '#fffcfc',\n                        5-10 : '#ffdbdb',\n                        10-20 : '#ffbaba',\n                        20-30 : '#ff9e9e',\n                        30-40 : '#ff7373',\n                        40-50 : '#ff4d4d',\n                        50-90 : '#ff0d0d'},\n                    hover_name=\"Location\",# column to add to hover information\n                    animation_frame='Period',\n                    color_continuous_midpoint = 30,\n                    \n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    width=1200, height=800,\n                    title=\"Medical Doctors per 10,000 persons\")\n\nfig.update_traces(colorbar_nticks=10, selector=dict(type='choropleth'))\nfig.show()\n","8994e395":"MedicalDoctors2Pivot = pd.pivot_table(MedicalDoctors2, values=['First Tooltip'], index=['Period'], aggfunc={'First Tooltip': np.mean})\nfig = px.line(MedicalDoctors2Pivot, x=MedicalDoctors2Pivot.index, y='First Tooltip', title = 'Doctors per 10,000 persons (global mean)')\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x\")\nfig.show()","54a55e98":"# 'Probability (%) of dying between age 30 and exact age 70 from any of cardiovascular disease, cancer, diabetes, or chronic respiratory disease\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld = world.rename(columns={\"name\": \"Location\"})\ntest5 = pd.merge(world,CancerEtc2,on=['Location'],how='left')\ntest5 = test5.dropna()\ntest5 = test5.sort_values(by=['Period']).reset_index()\ntest5.loc[test5.Location == 'France', 'iso_a3'] = \"FRA\"\ntest5.loc[test5.Location == 'Norway', 'iso_a3'] = \"NOR\"\nfig = px.choropleth(test5, locations=\"iso_a3\",\n                    color=\"First Tooltip\", # lifeExp is a column of gapminder\n                    hover_name=\"Location\",# column to add to hover information\n                    animation_frame='Period',\n                    #color_continuous_midpoint = 60,\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    width=1200, height=800,\n                    title = \"Probability (%) of dying between age 30 and exact age 70 from any of cardiovascular disease, cancer, diabetes, or chronic respiratory disease\")\nfig.update_traces(colorbar_nticks=10, selector=dict(type='choropleth'))\nfig.show()","e8a42992":"CancerEtc2Pivot = pd.pivot_table(CancerEtc2, values=['First Tooltip'], index=['Dim1'], columns = ['Period'], aggfunc={'First Tooltip': np.mean}).T\nCancerEtc2Pivot['Date'] = [2000, 2005, 2010, 2015, 2016]\nfig = px.line(CancerEtc2Pivot, x=\"Date\", y=[\"Both sexes\", 'Male', 'Female'], title = 'Mean Global Probability (%) of dying between age 30 and exact age 70 from any of cardiovascular disease, cancer, diabetes, or chronic respiratory disease')\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x\")\nfig.show()","5a2e486b":"MaternalMortality = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/maternalMortalityRatio.csv')\nMaternalMortality2 = MaternalMortality\nclean(MaternalMortality2)\nfor i in range(len(MaternalMortality2)):\n    MaternalMortality2['First Tooltip'][i] = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", MaternalMortality2['First Tooltip'][i])\nMaternalMortality2['First Tooltip'] = MaternalMortality2['First Tooltip'].astype('int')\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld = world.rename(columns={\"name\": \"Location\"})\ntest6 = pd.merge(world,MaternalMortality2,on=['Location'],how='left')\ntest6 = test6.dropna()\ntest6 = test6.sort_values(by=['Period']).reset_index()\n#test6['First Tooltip'] = test6['First Tooltip'].astype('int')\ntest6.loc[test6.Location == 'France', 'iso_a3'] = \"FRA\"\ntest6.loc[test6.Location == 'Norway', 'iso_a3'] = \"NOR\"\nfig = px.choropleth(test6, locations=\"iso_a3\",\n                    color=\"First Tooltip\", # lifeExp is a column of gapminder\n                    hover_name=\"Location\",# column to add to hover information\n                    animation_frame='Period',\n                    color_continuous_midpoint = 800,\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    width=1200, height=800,\n                    title = 'Maternal mortality ratio (per 100 000 live births)')\nfig.update_coloraxes(cmin=0, cmax=2000)                    \nfig.update_traces(colorbar_nticks=10, selector=dict(type='choropleth'))\nfig.show()","663a9f3a":"MaternalMortality2pivot = pd.pivot_table(MaternalMortality2, values=['First Tooltip'], columns = ['Period'], aggfunc={'First Tooltip': np.mean}).T\nMaternalMortality2pivot\nfig = px.line(MaternalMortality2pivot, x=MaternalMortality2pivot.index, y=['First Tooltip'], title = 'Maternal mortality ratio (per 100 000 live births)')\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x\")\nfig.show()","b1b4bb53":"NeonatallMortality = NeonatalMortality = pd.read_csv('\/kaggle\/input\/who-worldhealth-statistics-2020-complete\/neonatalMortalityRate.csv')\nNeonatalMortality2 = NeonatalMortality\nclean(NeonatalMortality2)\n\nfor i in range(len(NeonatalMortality2)):\n    NeonatalMortality2['First Tooltip'][i] = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", NeonatalMortality2['First Tooltip'][i])\n\nNeonatalMortality2['First Tooltip'] = NeonatalMortality2['First Tooltip'].astype('float64')\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\nworld = world.rename(columns={\"name\": \"Location\"})\n\ntest7 = pd.merge(world, NeonatalMortality2,on=['Location'],how='left')\n\ntest7 = test7.dropna()\n\ntest7 = test7.sort_values(by=['Period']).reset_index()\n\n#test6['First Tooltip'] = test6['First Tooltip'].astype('int')\n\ntest7.loc[test7.Location == 'France', 'iso_a3'] = \"FRA\"\ntest7.loc[test7.Location == 'Norway', 'iso_a3'] = \"NOR\"\n\nfig = px.choropleth(test7, locations=\"iso_a3\",\n                    color=\"First Tooltip\", # lifeExp is a column of gapminder\n                    hover_name=\"Location\",# column to add to hover information\n                    animation_frame='Period',\n                    #color_continuous_midpoint = 800,\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    width=1200, height=800,\n                    title = 'Neonatal mortality rate (per 1000 live births)')\n\nfig.update_coloraxes(cmin=0, cmax=80)                    \nfig.update_traces(colorbar_nticks=10, selector=dict(type='choropleth'))\nfig.show()","653d78ec":"NeonatalMorPivot = pd.pivot_table(NeonatalMortality2, values=['First Tooltip'], columns = ['Period'], aggfunc={'First Tooltip': np.mean}).T\n\nfig = px.line(NeonatalMorPivot, x=NeonatalMorPivot.index, y=['First Tooltip'], title = 'Global Mean Neonatal mortality rate (per 1000 live births)')\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x\")\nfig.show()","4c143609":"test7\ntest7pivot = pd.pivot_table(test7, values=['First Tooltip'], index=['Period','continent'], aggfunc={'First Tooltip': np.sum})\ntest3pivot = pd.pivot_table(test3, values=['First Tooltip'], index=['Period','continent'], aggfunc={'First Tooltip': np.sum})\ntest7pivot = test7pivot.rename(columns={\"First Tooltip\": \"Neonatal Mortality\"})\ntest3pivot = test3pivot.rename(columns={\"First Tooltip\": \"Doctors per 10,000\"})\ntestmerge = pd.merge(test3pivot, test7pivot, on=['Period', 'continent'], how='left')\n\ntestmerge['indx'] = testmerge.index\n\ntestmerge.indx = testmerge.indx.str.replace('[^a-zA-Z0-9]', '')\ntestmerge\n\n#testmerge.unstack(level='Period')\n#df.loc[df['Location'].str.startswith('Iran'), 'Location'] = 'Iran' \n\n#px.scatter(testmerge, x=\"Doctors per 10,000\", y=\"Neonatal Mortality\", animation_frame=\"Period\", color=\"continent\")","974c777e":"#test7 Neonatal Mortality rate\n#test3 Doctors per 10 000\n\n#test7pivot = pd.pivot_table(test7, values=['First Tooltip', 'Period'], columns = ['continent'], aggfunc={'First Tooltip': np.sum}).T\ntest7pivot = test7pivot.rename(columns={\"First Tooltip\": \"Neonatal Mortality\"})\n\ntest3pivot = pd.pivot_table(test3, values=['First Tooltip'], columns = ['continent', 'Period'], aggfunc={'First Tooltip': np.sum}).T\ntest3pivot = test3pivot.rename(columns={\"First Tooltip\": \"Doctors per 10,000\"})\n\ntestmerge = pd.merge(test3pivot,test7pivot,on=['continent', 'Period'],how='left')\ntestmerge\ntest7\n#fig = px.scatter(testmerge, x=\"Doctors per 10,000\", y=\"Neonatal Mortality\", animation_frame=\"Period\", animation_group=\"continent\", color=\"continent\", hover_name=\"location\")","fc69eb37":"fig = px.scatter(df, x=\"total_cases\", y=\"total_deaths\", animation_frame=\"date\", animation_group=\"location\",\n            size=\"population\", color=\"continent\", hover_name=\"location\",\n            log_x=True, log_y=True, size_max=45, range_x=[100,10000000], range_y=[25,140000])","751b3398":"## Cardiovascular Disease, Cancer, Diabetes and Chronic Respiratory Disease","9366f653":"# 1. Load Data","6c8c163e":"# 2. Data Cleansing","19644018":"### Still, the global mean maternal mortality ratio is steadily decreasing.","4112bae7":"# Neonatal Mortality \n\n### Neonatal mortality refers to death of a live-born baby within the first 28 days of life. In this case it is measured per 1,000 live bearths","571d74ef":"## Life Expectancy at Birth\n\n### North and South America, Europe, Japan and Australia have high life expectancies, in contrast with Africa which has very low, some lower than 50 years.","d0b09944":"# ************ WORK IN PROGRESS ************","2ecdb6f5":"## Doctors per 10,000 persons\n\n### The highest numbers of doctors are seen in Europe, Russia and Kazakhstan, with Cuba having the highest number, however, African countries have the lowest numbers.","be3419e8":"# Visualization","b8c6a230":"# Maternal Mortality Ratio\n\n### Maternal mortality refers to deaths due to complications from pregnancy or childbirth. Central African countries as well as Afghanistan have a steadily high maternal mortality ratio over the last two decades."}}