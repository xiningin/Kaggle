{"cell_type":{"db1d1853":"code","39c12b29":"code","a8f365d4":"code","414e6436":"code","35329f38":"code","08d45086":"code","23e0848c":"code","f50ba2e9":"code","491a13c6":"code","10e1e7e0":"code","20492c33":"code","44eadd04":"code","12740c00":"code","ec2bd2f6":"code","d925c4ec":"code","623b70b7":"code","7886647c":"code","2354711e":"markdown","4837be45":"markdown","2cc5aef3":"markdown","b6e219ca":"markdown","b0754651":"markdown","f3da1d90":"markdown","bcf1f7e1":"markdown"},"source":{"db1d1853":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39c12b29":"!pip install feyn","a8f365d4":"import feyn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as ex\nimport sklearn.model_selection\nfrom scipy.stats import ttest_ind\nimport plotly.graph_objs as go","414e6436":"water_df = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\nwater_df","35329f38":"# Making a nice pie chart\nchart_data = water_df.copy()\n\nchart_data.Potability =  chart_data.Potability.map({1:'Potable',0:'Not Potable'})\nex.pie(chart_data,names='Potability',title='Distribution of Target Labels (Potability)')","08d45086":"# Checking for missing values in data.\nmissing = water_df.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","23e0848c":"# Correlation heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(water_df.corr(), annot=True)","f50ba2e9":"sns.pairplot(water_df, hue = 'Potability')","491a13c6":"# I'll check the distribution of the attributes\n\nsns.displot(water_df['ph'], kde = 'true', bins=10)\nsns.displot(water_df['Hardness'], kde = 'true', bins=10)\nsns.displot(water_df['Solids'], kde = 'true', bins=10)\nsns.displot(water_df['Chloramines'], kde = 'true', bins=10)\nsns.displot(water_df['Sulfate'], kde = 'true', bins=10)\nsns.displot(water_df['Conductivity'], kde = 'true', bins=10)\nsns.displot(water_df['Organic_carbon'], kde = 'true', bins=10)\nsns.displot(water_df['Trihalomethanes'], kde = 'true', bins=10)\nsns.displot(water_df['Turbidity'], kde = 'true', bins=10)","10e1e7e0":"# View the mean by the response variable\nwater_df.groupby('Potability').mean()","20492c33":"# View the stdDev by the response variable\nwater_df.groupby('Potability').std()","44eadd04":"# Imputing missing values\nfor col in ['Sulfate','ph','Trihalomethanes']:\n    missing_label_0 = water_df.query('Potability == 0')[col][water_df[col].isna()].index\n    water_df.loc[missing_label_0,col] = water_df.query('Potability == 0')[col][water_df[col].notna()].mean()\n\n    missing_label_1 = water_df.query('Potability == 1')[col][water_df[col].isna()].index\n    water_df.loc[missing_label_1,col] = water_df.query('Potability == 1')[col][water_df[col].notna()].mean()","12740c00":"# Splitting the dataset\ndf_train, df_test = sklearn.model_selection.train_test_split(water_df,stratify=water_df[\"Potability\"], train_size=.80, random_state=1)","ec2bd2f6":"# Connecting to the QLattice\nql = feyn.connect_qlattice()","d925c4ec":"# Using the auto_run command\nmodels = ql.auto_run( \n    df_train,\n    output_name = \"Potability\",\n    kind = 'classification'\n)","623b70b7":"best_model = models[0]","7886647c":"best_model.plot(df_train, df_test)","2354711e":"I will impute missing data later.","4837be45":"# Getting data and QLattice ready","2cc5aef3":"All the distributions are normal and distributed around the mean.","b6e219ca":"The mean and standard deviations are also close to each other.","b0754651":"The correlation between the attributes are low which suggests that the attributes are independent.","f3da1d90":"# Dealing with data\n\nIn this section I will do som data exploration to see:\n1. If there is a very skewed distribution of the target variable in data\n2. If there is any missing values\n3. Possible correlation between variables\n\n","bcf1f7e1":"\n\n**Dealing with missing data**\n\nI will impute all missing values that are labeled \"potable\" using the mean of all non-missing \"potable\" samples. Likewise I will impute all missing values that are labeled \"non-potable\" using the mean of all non-missing \"non-potable\" samples."}}