{"cell_type":{"c93357fa":"code","ad90645c":"code","24f183b7":"code","3ff1bbb3":"code","c67da9d8":"code","8f807038":"code","55ed9693":"code","20036e2a":"code","f70813c2":"code","c1ada080":"code","e9261ead":"code","9d207714":"code","437115c0":"code","751a75c5":"markdown","e667b05e":"markdown","fef8b4f1":"markdown"},"source":{"c93357fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ad90645c":"data = pd.read_csv(\"\/kaggle\/input\/international-airline-passengers\/international-airline-passengers.csv\",skipfooter = 5)\ndata.info()","24f183b7":"import math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error","3ff1bbb3":"dataset = data.iloc[:,1].values\nplt.plot(dataset)\nplt.show()","c67da9d8":"dataset = dataset.reshape(-1,1)\ndataset = dataset.astype(\"float32\")\ndataset.shape","8f807038":"scaler = MinMaxScaler()\ndataset = scaler.fit_transform(dataset)","55ed9693":"train_size = int(len(dataset)*0.50)\ntest_size = len(dataset) - train_size\ntrain = dataset[0:train_size,:]\ntest = dataset[train_size:len(dataset),:]\nprint(len(train),len(test))","20036e2a":"time_stemp = 10\ndataX = []\ndataY = []\nfor i in range(len(train)-time_stemp-1):\n    a = train[i:(i+time_stemp), 0]\n    dataX.append(a)\n    dataY.append(train[i + time_stemp, 0])\ntrainX = np.array(dataX)\ntrainY = np.array(dataY)  ","f70813c2":"dataX = []\ndataY = []\nfor i in range(len(test)-time_stemp-1):\n    a = test[i:(i+time_stemp), 0]\n    dataX.append(a)\n    dataY.append(test[i + time_stemp, 0])\ntestX = np.array(dataX)\ntestY = np.array(dataY)  ","c1ada080":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","e9261ead":"model = Sequential()\nmodel.add(LSTM(15, input_shape=(1,time_stemp)))\nmodel.add(Dense(1))\nmodel.compile(loss = \"mean_squared_error\",optimizer = \"adam\")\nmodel.fit(trainX, trainY, epochs = 50, batch_size =2)","9d207714":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n# invert predictions\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])\n# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","437115c0":"# shifting train\ntrainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict)+time_stemp, :] = trainPredict\n# shifting test predictions for plotting\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(time_stemp*2)+1:len(dataset)-1, :] = testPredict\n# plot baseline and predictions\nplt.figure(figsize = (12,8))\nplt.plot(scaler.inverse_transform(dataset))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.savefig(fname = \"final\")\nplt.legend()\nplt.show()","751a75c5":"# Predictions and Visualising","e667b05e":"# Preprocessing","fef8b4f1":"# Create Model"}}