{"cell_type":{"9a8896f4":"code","ff72e2ed":"code","bc2a0c2e":"code","a5887fdd":"code","763ff39e":"code","58fe7cc4":"code","f1d2f469":"code","f5beb6e1":"code","68c1c42c":"code","e6ed20aa":"code","9c73b943":"code","8201374c":"code","a4360bf3":"code","6f4f7c5b":"code","9373c4df":"code","f64fdaaa":"code","88d36c46":"markdown","62c5099e":"markdown","19989009":"markdown","54889e72":"markdown","87f2512c":"markdown","cbafd64b":"markdown","a948d5ae":"markdown"},"source":{"9a8896f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ff72e2ed":"data = pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Future50.csv')","bc2a0c2e":"data.head()","a5887fdd":"data.info()","763ff39e":"data.columns","58fe7cc4":"data.describe()","f1d2f469":"# correlation map\nf,ax = plt.subplots(figsize=(8,8))\nsns.heatmap(data.corr(), annot=True, linewidths = .5 ,fmt ='.1f', ax=ax)\n\nplt.show()","f5beb6e1":"# Units vs Sales\nf,ax = plt.subplots(figsize=(8,8))\nsns.violinplot(data['Units'], data['Sales'])\n\nplt.show()","68c1c42c":"color_list = ['red' if i=='True' else 'green' for i in data.loc[:,'Franchising']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'Franchising'],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '&',\n                                       edgecolor=\"black\")\nplt.show()\n","e6ed20aa":"sns.countplot(x=\"Franchising\", data=data)\ndata.loc[:,'Franchising'].value_counts()","9c73b943":"# create data1 that includes Units that is feature and Sales that is target variable\ndata1 = data[data['Franchising'] =='Yes']\nx = np.array(data1.loc[:,'Units']).reshape(-1,1)\ny = np.array(data1.loc[:,'Sales']).reshape(-1,1)\n# Scatter\nplt.figure(figsize=[5,5])\nplt.scatter(x=x,y=y)\nplt.xlabel('Units')\nplt.ylabel('Sales')\nplt.show()","8201374c":"# LinearRegression\nfrom sklearn.linear_model import LinearRegression\nlinear_reg = LinearRegression()\n\n# Predict space\npredict_space = np.linspace(min(x), max(x)).reshape(-1,1)\n\n# Fit\nlinear_reg.fit(x,y)\n\n# Predict\npredicted = linear_reg.predict(predict_space)\n\n# Plot regression line and scatter\nplt.plot(predict_space, predicted, color='black', linewidth=3)\nplt.scatter(x=x,y=y)\nplt.xlabel('Units')\nplt.ylabel('Sales')\nplt.show()","a4360bf3":"x = data[\"Units\"].values.reshape(-1,1)\ny = data[\"Sales\"].values.reshape(-1,1)\nplt.scatter(x,y,color=\"green\")\nplt.plot(predict_space, predicted, color='green', linewidth=3 , label = 'linear')\n\n\n# polynomial regression = y =b0 + b1*x + b2*x^2 + b3*x^3 + ... +bn*x^n\nfrom sklearn.preprocessing import PolynomialFeatures \npolynomial_regression =PolynomialFeatures(degree = 10)\n\nx_polynomial = polynomial_regression.fit_transform(x)\n\n# fit\nlinear_regression2 = LinearRegression()\nlinear_regression2.fit(x_polynomial,y)\n\n#\ny_head2 = linear_regression2.predict(x_polynomial)\nplt.plot(x,y_head2,color=\"red\",label = \"poly\")\nplt.legend()\nplt.show()\n","6f4f7c5b":"x=data[\"Units\"].values.reshape(-1,1)\ny=data[\"Sales\"].values.reshape(-1,1)\n\n#  decision tree regression\nfrom sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()  \ntree_reg.fit(x,y)\n\nx_ = np.arange(min(x),max(x),0.01).reshape(-1,1)\ny_head = tree_reg.predict(x_)\n\nplt.scatter(x,y,color=\"black\")\nplt.plot(x_,y_head,color=\"purple\")\nplt.xlabel(\"Units\")\nplt.ylabel(\"Sales\")\nplt.show()\n","9373c4df":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 100 , random_state = 42)\nrf.fit(x,y)\n\n# print(\"7.8 seviyesinde fiyat\u0131n ne kadar oldu\u011fu:\",rf.predict(7.8))\n\nx_ = np.arange(min(x),max(x),0.01).reshape(-1,1)\ny_head = rf.predict(x_)\n\n# visualize\nplt.scatter(x,y,color=\"red\")\nplt.plot(x_,y_head,color=\"purple\")\nplt.xlabel(\"Units\")\nplt.ylabel(\"Sales\")\nplt.show()","f64fdaaa":"\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 100 , random_state = 30)\nrf.fit(x,y)\n\ny_head = rf.predict(x)\n\nfrom sklearn.metrics import r2_score\nprint(\"r_score:\",r2_score(y,y_head))\n","88d36c46":"* **Let's first read our dataset and take a quick look what we have.**","62c5099e":"# **Linear Regression**","19989009":"# **Decision Tree Regression**","54889e72":" ****R-Square with Random Forest Regression****","87f2512c":"# **R-Square**","cbafd64b":"# **Random Forest Regression**","a948d5ae":"# **Polynomial Linear Regression**"}}