{"cell_type":{"8648017b":"code","f2879a4e":"code","93afa035":"code","b4d84fb2":"code","681c6486":"code","58424e87":"code","f5d32558":"code","85845dd8":"code","5546337c":"code","13182f17":"code","668ebadf":"code","0ec13e8e":"code","9bba9082":"code","3afe4ee5":"code","0f848a5a":"code","1a9d7e27":"code","fd8664b5":"markdown","be5d2471":"markdown","f057008f":"markdown","eb98d9e2":"markdown","d425c774":"markdown","7e88ec15":"markdown","50f52ca9":"markdown"},"source":{"8648017b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2879a4e":"import folium\nimport matplotlib.pyplot as plt","93afa035":"world_map=folium.Map()\nworld_map\n#Generating the world map is straigtforward in Folium.\n#We simply create a Folium _Map_ object and then you display it","b4d84fb2":"world_map = folium.Map(location=[56.130, -106.35], zoom_start=4,tiles='Stamen Toner')\n\n# display Canada's map\nworld_map\n#Here we create Stamen Toner map is high-contrast B+W (black and white) maps used for data mashups and exploring river meanders and coastal zones.","681c6486":"world_map = folium.Map(location=[56.130, -106.35], zoom_start=4,tiles='Stamen Terrain')\nworld_map\n#Here we create Stamen Terrain map with feature of hill shading and natural vegetation colors","58424e87":"df= pd.read_csv('..\/input\/crime-incidents\/Police_Department_Incidents_-_Previous_Year__2016_.csv')\ndf.head()","f5d32558":"df.shape\n#We have 150 500 crimes in rows with 13 features in columns","85845dd8":"# create map and display it\nsanfrancisco_map = folium.Map(location=[37.77, -122.42], zoom_start=12)\n\nsanfrancisco_map # display the map of San Francisco\n","5546337c":"incidents = folium.map.FeatureGroup()\nlatitudes = list(df.iloc[:100,:].Y)\nlongitudes = list(df.iloc[:100,:].X)\nlabels = list(df.iloc[:100,:].Category)\n\n# loop through the 100 crimes and add each to the incidents feature group\nfor lat, long, in zip(df.iloc[:100,:].Y, df.iloc[:100,:].X):\n    incidents.add_child(\n        folium.CircleMarker(\n            [lat, long],\n            radius=5, # define how big you want the circle markers to be\n            color='yellow',\n            fill=True,\n            popup=labels,\n            fill_color='blue',\n            fill_opacity=0.6\n        )\n    )\n\n# add incidents to map\nsanfrancisco_map.add_child(incidents)\n# Here we have pop up label that shows itself when we click on them","13182f17":"from folium import plugins\n\n# let's start again with a clean copy of the map of San Francisco\nsanfrancisco_map = folium.Map(location = [latitude, longitude], zoom_start = 12)\n\n# instantiate a mark cluster object for the incidents in the dataframe\nincidents = plugins.MarkerCluster().add_to(sanfrancisco_map)\n\n# loop through the dataframe and add each data point to the mark cluster\nfor lat, lng, label, in zip(df.iloc[:100,:].Y, df_incidents.X, df_incidents.Category):\n    folium.Marker(\n        location=[lat, lng],\n        icon=None,\n        popup=label,\n    ).add_to(incidents)\n\n# display map\nsanfran_map","668ebadf":"df2=pd.read_csv(\"..\/input\/survey-data\/Topic_Survey_Assignment (1).csv\")\ndf2","0ec13e8e":"df2.sort_values(by=\"Very interested\",ascending=False).plot(kind=\"bar\", figsize=(20, 8), width=0.8,\n                                                           color =['#5cb85c', '#5bc0de', '#d9534f'])\nplt.legend(fontsize=14)\nplt.title(\"Percentage of Respondents' interest in Data science areas\", size=16)\n","9bba9082":"san_francisco=df[\"PdDistrict\"].value_counts().reset_index()\n\nsan_francisco","3afe4ee5":"world_geo = r\"..\/input\/san-francisco\/san-francisco.geojson\"\nworld_geo","0f848a5a":"world_map = folium.Map(location=[0, 0], zoom_start=2)","1a9d7e27":"df","fd8664b5":"<font color=\"blue\" >\n    We will visualize the immigration to Canadan in this dataset","be5d2471":"# 3.Some Exercises with Matplotlib:","f057008f":"In this dataframe, each row consists of 13 features:\n\n> 1.  **IncidntNum**: Incident Number\n> 2.  **Category**: Category of crime or incident\n> 3.  **Descript**: Description of the crime or incident\n> 4.  **DayOfWeek**: The day of week on which the incident occurred\n> 5.  **Date**: The Date on which the incident occurred\n> 6.  **Time**: The time of day on which the incident occurred\n> 7.  **PdDistrict**: The police department district\n> 8.  **Resolution**: The resolution of the crime in terms whether the perpetrator was arrested or not\n> 9.  **Address**: The closest address to where the incident took place\n> 10. **X**: The longitude value of the crime location \n> 11. **Y**: The latitude value of the crime location\n> 12. **Location**: A tuple of the latitude and the longitude values\n> 13. **PdId**: The police department ID","eb98d9e2":"<font color=\"blue\" >\n    Map(location=None, width='100%', height='100%', left='0%', top='0%', position='relative', tiles='OpenStreetMap', attr=None, min_zoom=0, max_zoom=18, zoom_start=10, min_lat=-90, max_lat=90, min_lon=-180, max_lon=180, max_bounds=False, crs='EPSG3857', control_scale=False, prefer_canvas=False, no_touch=False, disable_3d=False, png_enabled=False, zoom_control=True, **kwargs)\n    \n    \n    \n |  \n |  Create a Map with Folium and Leaflet.js\n    \n |  \n |  Generate a base map of given width and height with either default\n |  tilesets or a custom tileset URL. The following tilesets are built-in\n |  to Folium. Pass any of the following to the \"tiles\" keyword:\n    \n    \n |  \n |      - \"OpenStreetMap\"\n |      - \"Mapbox Bright\" (Limited levels of zoom for free tiles)\n |      - \"Mapbox Control Room\" (Limited levels of zoom for free tiles)\n |      - \"Stamen\" (Terrain, Toner, and Watercolor)\n |      - \"Cloudmade\" (Must pass API key)\n |      - \"Mapbox\" (Must pass API key)\n |      - \"CartoDB\" (positron and dark_matter)","d425c774":"<font color=\"blue\">\nWe can also added some pop-up text that would get displayed when you hover over a marker:","7e88ec15":"Below we will superimpose the locations of the crimes onto the map. The way to do that in **Folium** is to create a _feature group_ with its own features and style and then add it to the San Francisco map","50f52ca9":"<font color=\"blue\" >\n    All locations on a map are defined by their respective Latitude and Longitude values. So we can create a map and pass in a center of Latitude and Longitude values of [0, 0]."}}