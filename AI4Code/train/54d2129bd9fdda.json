{"cell_type":{"7fd2bf4a":"code","0bac1b5a":"code","41cbe33d":"code","aa372013":"code","698d1956":"code","07f9b4ed":"code","4048807c":"code","98430f97":"code","02200db2":"code","eea30105":"code","06b70f54":"markdown","42b0d2ab":"markdown","e76579e4":"markdown","a501accb":"markdown","563c900b":"markdown","d7db82cd":"markdown","5425b2ef":"markdown","2bf3b893":"markdown"},"source":{"7fd2bf4a":"import os\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","0bac1b5a":"def collect_actors_activities(actors, actor_id):\n    activities = pd.DataFrame(np.concatenate((actors[[actor_id]].merge(\n                                                               questions[['questions_author_id', 'questions_date_added']], \n                                                               left_on=actor_id, right_on='questions_author_id', how='inner').values[:,[0,2]],\n                                                           actors[[actor_id]].merge(\n                                                               answers[['answers_author_id', 'answers_date_added']], \n                                                               left_on=actor_id, right_on='answers_author_id', how='inner').values[:,[0,2]],\n                                                           actors[[actor_id]].merge(\n                                                               comments[['comments_author_id', 'comments_date_added']], \n                                                               left_on=actor_id, right_on='comments_author_id', how='inner').values[:,[0,2]]), \n                                                          axis=0), \n                                           columns=[actor_id, 'activity_time'])\n    activities['activity_date'] = activities['activity_time'].dt.date\n    activities_df = activities.groupby(\n        [actor_id, 'activity_date'])['activity_time'].count().reset_index().pivot(\n        values='activity_time', columns=actor_id, index='activity_date')\n    return activities_df\n\ndef compute_days_from_last_activities(activities, dates, ids):    \n    days_from_last_activities = pd.DataFrame(1, index=dates, columns=ids)\n    days_from_last_activities = days_from_last_activities.rolling(\n        window=1000000, min_periods=1, center=False).sum()    \n    activity_indicators = activities.reindex_like(days_from_last_activities).notnull()\n    days_from_last_activities = days_from_last_activities.sub(\n        days_from_last_activities[activity_indicators].fillna(method='ffill'))\n    return days_from_last_activities","41cbe33d":"# Input data files are available in the \"..\/input\/\" directory.\ninput_dir = \"..\/input\"\n\nprofessionals = pd.read_csv(os.path.join(input_dir, 'professionals.csv'), parse_dates=True)\nstudents = pd.read_csv(os.path.join(input_dir, 'students.csv'))\nschool_memberships = pd.read_csv(os.path.join(input_dir, 'school_memberships.csv'))\ngroups = pd.read_csv(os.path.join(input_dir, 'groups.csv'))\ngroup_memberships = pd.read_csv(os.path.join(input_dir, 'group_memberships.csv'))\nquestions = pd.read_csv(os.path.join(input_dir, 'questions.csv'))\nanswers = pd.read_csv(os.path.join(input_dir, 'answers.csv'))\nemails = pd.read_csv(os.path.join(input_dir, 'emails.csv'))\nmatches = pd.read_csv(os.path.join(input_dir, 'matches.csv'))\ncomments = pd.read_csv(os.path.join(input_dir, 'comments.csv'))\ntags = pd.read_csv(os.path.join(input_dir, 'tags.csv'))\ntag_users = pd.read_csv(os.path.join(input_dir, 'tag_users.csv'))\ntag_questions = pd.read_csv(os.path.join(input_dir, 'tag_questions.csv'))\n\nprofessionals['professionals_date_joined'] = pd.to_datetime(professionals['professionals_date_joined'])\nstudents['students_date_joined'] = pd.to_datetime(students['students_date_joined'])\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\nanswers['answers_date_added'] = pd.to_datetime(answers['answers_date_added'])\nemails['emails_date_sent'] = pd.to_datetime(emails['emails_date_sent'])\ncomments['comments_date_added'] = pd.to_datetime(comments['comments_date_added'])","aa372013":"window_days = [100000, 365, 30]\nprofessional_activities_df = collect_actors_activities(\n    actors=professionals, actor_id='professionals_id')\nprofessional_activities_df.index = pd.to_datetime(professional_activities_df.index)\nfor window in window_days:\n    print('Process window: {}'.format(window))\n    cum_sum_professional_activities = professional_activities_df.rolling(\n        window=window, min_periods=1).sum()\n    cum_sum_professional_activities.to_parquet(\n        'professional_activities_sum_{}.parquet.gzip'.format(window), compression='gzip')\n    cum_sum_professional_activities['e1d39b665987455fbcfbec3fc6df6056'].plot()","698d1956":"# Obtaining the lists of dates and professional ids #\nprofessionals['professionals_joined_date'] = professionals['professionals_date_joined'].dt.date\ndates = pd.date_range(start=professionals['professionals_joined_date'].min(), \n                      end=professionals['professionals_joined_date'].max())\nids = professionals['professionals_id']","07f9b4ed":"days_from_last_activities = compute_days_from_last_activities(professional_activities_df, dates, ids)\ndays_from_last_activities.to_parquet(\n    'days_from_last_activities.parquet.gzip', compression='gzip')","4048807c":"professionals['value'] = 1\nprofessionals_joined_dates_df = professionals.pivot(\n    values='value', index='professionals_joined_date', columns='professionals_id')\ndays_from_joined_dates = compute_days_from_last_activities(professionals_joined_dates_df, dates, ids)\ndays_from_joined_dates.to_parquet(\n    'days_from_joined_dates.parquet.gzip', compression='gzip')","98430f97":"days_from_last_activities['ffca7b070c9d41e98eba01d23a920d52'].plot()","02200db2":"days_from_joined_dates['ffca7b070c9d41e98eba01d23a920d52'].plot()","eea30105":"os.listdir()","06b70f54":"# II. Loading Relevant Data Tables #","42b0d2ab":"## III.2. Days From Joined Dates and Days from Last Activities ##","e76579e4":"# III. Computing and Saving Activity Statistics # ","a501accb":"### Any action including questioning, answering, or commenting is counted as an activity ###","563c900b":"** Some sample plots for recency statistics **","d7db82cd":"# I. Functions for Activity Statistics #","5425b2ef":"** These statistics can help to model recency effects, i.e. professionals who just joined the website or recently contributed answers are more likely to answer new questions **","2bf3b893":"## III.1. Professional Activity Counts at Different Rolling Windows ##"}}