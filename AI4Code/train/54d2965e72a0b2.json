{"cell_type":{"67ce8b39":"code","fa717963":"code","0464cf4a":"code","c3a90ea0":"code","87390108":"code","7cae94f9":"code","c227e354":"code","373e8730":"code","9e120101":"code","7fbdb3d1":"code","2a03b282":"code","0eb2ab2b":"code","df010335":"code","8b5dceb7":"code","2f15e693":"code","31cf2e93":"code","ffd01981":"code","7dd0d7b8":"markdown","39d101f9":"markdown","c43c06f3":"markdown","8c4bdcc2":"markdown","a0b11104":"markdown","f9593caf":"markdown","27d5581d":"markdown","9f656bbb":"markdown","f2dbd933":"markdown"},"source":{"67ce8b39":"#Importing the required packages\n\nimport pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity","fa717963":"#Reading the data sets\n\ndf1 = pd.read_csv(r'..\/input\/movielens-100k\/ml-latest-small\/movies.csv')\ndf2 = pd.read_csv(r'..\/input\/movielens-100k\/ml-latest-small\/ratings.csv')","0464cf4a":"df = df2.merge(df1, left_on='movieId', right_on='movieId', how='left')\ndf","c3a90ea0":"#Removing columns which will not be used \n\ndel df['timestamp']\ndel df['genres']","87390108":"df.head()","7cae94f9":"user_movie_matrix = pd.pivot_table(df, values = 'rating', index='movieId', columns = 'userId')\nuser_movie_matrix","c227e354":"user_movie_matrix = user_movie_matrix.fillna(0)\nuser_movie_matrix.head()","373e8730":"#user-based collaborative filtering\n\nuser_user_matrix = user_movie_matrix.corr(method='pearson')\nuser_user_matrix","9e120101":"#Extarcing top 10 similar users for User2 by sorting them in descending order based on their similarties\n\nuser_user_matrix.loc[2].sort_values(ascending=False).head(10)","7fbdb3d1":"#Converting the above data into a DF and removing the user2 itself (A user will be always similar to iteself with a rating of 1)\n\ndf_2 = pd.DataFrame(user_user_matrix.loc[2].sort_values(ascending=False).head(10))\ndf_2 = df_2.reset_index()\ndf_2.columns = ['userId', 'similarity']","2a03b282":"df_2 = df_2.drop((df_2[df_2['userId'] ==2]).index)\ndf_2","0eb2ab2b":"#Now we are creating a new DF which has all the similar users and their rated movies\n\nfinal_df = df_2.merge(df, left_on='userId', right_on='userId', how='left')\nfinal_df","df010335":"final_df['score'] = final_df['similarity']*final_df['rating']\nfinal_df","8b5dceb7":"#Creating a df for all the movies which are already watched by our target user2\n\nwatched_df = df[df['userId'] == 2]\nwatched_df","2f15e693":"cond = final_df['movieId'].isin(watched_df['movieId'])\nfinal_df.drop(final_df[cond].index, inplace = True) ","31cf2e93":"recommended_df = final_df.sort_values(by = 'score', ascending = False)['title'].head(10)\nrecommended_df = recommended_df.reset_index()\ndel recommended_df['index']","ffd01981":"recommended_df","7dd0d7b8":"### Calculating similarites \n\nSimilarity based methods determine the most similar objects with the highest values as it implies they live in closer neighborhoods.\nThere are multiple similarity based metrics\n* Pearson\u2019s correlation\n* Spearman\u2019s correlation\n* Kendall\u2019s Tau\n* Cosine similarity\n* Jaccard similarity\n\nHowever, for our case we'll be using `Pearson\u2019s correlation` because we have a sparse matrix, which means that most movies are not rated (have a rating of 0). hence we will center all the ratings to 0 so that the default rating becomes 0.\n\n![1_4JSKpD-YjekoSMxHdTdCOg](https:\/\/user-images.githubusercontent.com\/33485020\/108067673-25ae2e00-7087-11eb-9c79-57972f8a424b.png)\n","39d101f9":"Here we are going to remove already watched movies from our recommendation as we can not suggest the same movie again!","c43c06f3":"### Recommending movies for sample userId: 2\n\nWe will go ahead and try to come with a movie list for UserId = 2","8c4bdcc2":"\n\nWe are now going to transform the DF into a movie-to-user matrix, where each row represents one movie and the columns correspond to different users. ","a0b11104":"### Here is the list of top 10 recommended movies for user 2!","f9593caf":"Here we are calculating a new metric (score) by multiplying the user similarity with the movie rating. The basic idea here is that the most similar user will have a higher possisbilty of suggesting better movies. So a movie which is rated high by the most similar user will have a higher order in our recommendation. ","27d5581d":"As we can see from the above matrix, higher +ve values means more similar and -ve values mean not similar. \nEg: Similarty of user 1 and user 2 is 0.019400 but similarity of user1 and user3 is 0.053056, which means User1 is more similar to User3. ","9f656bbb":"### Data Preparation ","f2dbd933":"# Movie Recommendation System with Collaborative Filtering\n\n\n![netflix-background-9](https:\/\/user-images.githubusercontent.com\/33485020\/108069438-5ee79d80-7089-11eb-8264-08fdda7e0d11.jpg)\n\n\nA `movie recommendation system` is a system whose objective is to predict and compile a list of movies that a user is likely to watch. Recommendation systems have gained much popularity in recent years and have been developed and implemented for various commercial use cases.\n\nFor example,\n* Netflix uses recommendation systems to recommend movies or television programs for individual users\n* Amazon uses recommendation systems to predict and display a list of products that the customer is likely to buy\n* Spotify uses music recommendation systems to provide new songs for its listeners  \n\nRecommendation systems have a strong potentional to be used in a variery of other areas as well, however they play a major role in the e-commerce and media businesses, as they can directly impact the revenue and user engagement\n\nThere are broadly 3 types of recommendation systems:\n1. `Popularity Based:` This is a basic system in which movies\/shows which are rated high will be recommended to all the users in a certain demographic region. Eg: Netflix Top Trending will show top 10 movies trending in that particular country to ever user. \n\n2. `Content Based:` The general idea is that if a user liked an item with certain properites then he\/she are more likely to like similar items. Eg: Movies are recommended based on they Cast, Story, Genre, Plot, Director and many more fields. \n\n3. `Collaborative Filtering:` This is a more advanced system in which the algorithm tries to find similar users\/articles and then recommends items based on this similarity. Eg: If one person likes movies A, B, and C and another person likes movies A, B, and D, it is likely that the first person will buy item D and the other person will buy item C, since they share many similarities with each other\n\n\nIn this Notebook, we'll be focusing on the advanced Collaborative Filtering recommender. Lets get started!"}}