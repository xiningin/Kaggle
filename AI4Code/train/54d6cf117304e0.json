{"cell_type":{"6771a07a":"code","fac0a08e":"code","687b843c":"code","c717510a":"code","5d9b605d":"code","69b9600f":"code","b01d6077":"code","568de3ed":"code","9f265ae4":"code","bd7a1896":"code","d89f12d6":"code","e75cb280":"code","15957560":"code","d26fc341":"code","6a843bea":"code","58965eb0":"code","b80dc500":"code","7efa3c37":"code","618d90bd":"markdown","23ff5ab6":"markdown","28aa0136":"markdown","2670c669":"markdown","42e93a98":"markdown","11a9ea38":"markdown","deeb4fa0":"markdown","e61e4440":"markdown","e38f5b71":"markdown","c768570e":"markdown","ec775e9a":"markdown"},"source":{"6771a07a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport os\n\n\n\n","fac0a08e":"    data = pd.read_csv('..\/input\/athlete_events.csv') #Reading csv data","687b843c":"data.info() #Getting some useful info about data","c717510a":"data.corr() # Seeing correlation between data","5d9b605d":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()  ","69b9600f":"data.head(5)                           #As we see there is some NaN. \n","b01d6077":"assert  data['Weight'].notnull().all() #We may not always see it. We use this code line to make sure. If an error occurs there are NaN values","568de3ed":"data[\"Weight\"].value_counts(dropna =False) # We can see number of NaN values","9f265ae4":"data.Weight.dropna(inplace = True) # This code will clean the Weight column","bd7a1896":"data.head(5) # We can still see the NaN values but don't worry about it they all gone","d89f12d6":"assert  data.Weight.notnull().all()  # As we see there is no error occur","e75cb280":"assert data.Weight.dtypes == np.float","15957560":"data1 = data.loc[:,[\"Age\",\"Height\",\"Weight\"]]\ndata1.plot()","d26fc341":"data1.plot(subplots = True)\nplt.show()","6a843bea":"data1.plot(kind = \"hist\",y = \"Weight\",bins = 100,normed = False)","58965eb0":"myList_Weight=list(data1.Weight)  # Converting the list\nmyList_Height=list(data1.Height)  # Converting the list\nlist_col = [myList_Weight,myList_Height] # Merge lists\nlist_label = ['Height','Weight']  # Creating feature list\nzipped = list(zip(list_label,list_col)) # Marge the features and values\ndata_dict = dict(zipped)   # Convert the list to the dictionary\ndf = pd.DataFrame(data_dict)     # Convert the  dictionary to the dataframe\ndf","b80dc500":"df['age'] = data1.Age\ndf","7efa3c37":"data1.plot(kind = \"scatter\",x=\"Height\",y = \"Weight\")\nplt.show()","618d90bd":"<h2> 1. Virtualization of data correlation <\/h2>","23ff5ab6":"![](http:\/\/)","28aa0136":"<h3> Detecting NaN Values Method 1<\/h3>","2670c669":"<p>****As we see there is a correlation between height and weight. Easier to see the correlation when you do the virtualization<\/p>","42e93a98":"<h3> Cleaning NaN values <\/h3>\n\n\n\n\n\n\n\n\n\n\n","11a9ea38":"<h2> 2. Cleaning Data <\/h2>","deeb4fa0":"<h3>Now, We can analyze and visualize the data<h3>","e61e4440":"<h3> Detecting NaN Values Method 2 <\/h3>","e38f5b71":"<h3> Detecting NaN Values Method 3 <\/h3>","c768570e":"<h1> Basic Data Analysis <\/h1>","ec775e9a":"<h2>There is transformation between list and dataframe<\/h2>"}}