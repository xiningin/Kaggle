{"cell_type":{"a36f6f41":"code","269008f4":"markdown"},"source":{"a36f6f41":"import numpy as np; import pandas as pd;from scipy import signal\nfrom sklearn.preprocessing import MinMaxScaler,RobustScaler\nimport warnings;warnings.filterwarnings(\"ignore\");import lightgbm as lgb\ntrain = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv');\ntest = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')\ntrain_test =pd.concat([train, test],sort=True).reset_index()\ntrain_test_processed=pd.DataFrame()\nfor i in range(len(train_test)\/\/100000):\n    batch =train_test.loc[i * 100000:((i + 1) * 100000) - 1]\n    batch['signal'] = signal.detrend(batch.signal)\n    batch['roll_min'] = batch['signal'].rolling(window=5, min_periods=1,center=True).min()\n    batch['roll_max'] = batch['signal'].rolling(window=5, min_periods=1,center=True).max()\n    batch['signal_scaled_mm']=MinMaxScaler().fit_transform(batch['signal'].values.reshape(-1,1)).reshape(-1).mean()\n    batch['signal_scaled_rs']=RobustScaler().fit_transform(batch['signal'].values.reshape(-1,1)).reshape(-1).mean()\n    train_test_processed=pd.concat([train_test_processed, batch],sort=False).reset_index(drop=True)\ny_train = train['open_channels']\nX_train=train_test_processed[:len(train)][['signal','signal_scaled_mm','signal_scaled_rs','roll_min','roll_max']]\nX_test=train_test_processed[-len(test):][['signal','signal_scaled_mm','signal_scaled_rs','roll_min','roll_max']]\ncls = lgb.LGBMClassifier(n_estimators=111, n_jobs= -1); cls.fit(X_train, y_train)\npd.DataFrame({'time': test.time, 'open_channels': cls.predict(X_test)}).to_csv('submission.csv', index=False,float_format='%.4f')","269008f4":"> Notebook inspired by https:\/\/www.kaggle.com\/caesarlupum\/2020-20-lines-target-encoding"}}