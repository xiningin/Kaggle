{"cell_type":{"b865bca2":"code","808c91b7":"code","ca1d0543":"code","2f1fce1e":"code","d5ded562":"code","caa7b6b3":"code","bb671c44":"code","6ab242fd":"code","2b9712a2":"code","cd8f81bb":"code","81020beb":"code","e24d60fd":"code","68b929d1":"code","59bf8deb":"code","175d4dd6":"code","c20074ca":"code","3c180621":"code","6b3954e6":"code","38c05034":"code","5b184692":"code","bd68c870":"code","130f94cb":"code","b8b32977":"code","3196869c":"code","914811ab":"code","4e929096":"code","03616243":"code","425f17e3":"code","1fb6d7b6":"code","fa1584d2":"code","99ea4dd2":"code","011bfeff":"code","265e9a11":"code","658c4950":"markdown","e7b3fe4b":"markdown","81a01ca6":"markdown","5b11ad99":"markdown","5363f6c9":"markdown","ef274657":"markdown","0bcfaf8f":"markdown","5bd370b2":"markdown","3becbae7":"markdown","eb1582ea":"markdown","6c573461":"markdown","3cc61570":"markdown","2a8fb332":"markdown","39d773dc":"markdown","44b3d711":"markdown"},"source":{"b865bca2":"# accompanying notebook from https:\/\/www.youtube.com\/watch?v=5lgrlddp-98","808c91b7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","ca1d0543":"import os\npath = os.listdir('..\/input\/brain-tumor-classification-mri\/Training')\nclasses = {'no_tumor': 0, 'pituitary_tumor':1}","2f1fce1e":"import cv2\nX = []\nY = []\nfor cls in classes:\n    pth = '..\/input\/brain-tumor-classification-mri\/Training\/' + cls\n    for j in os.listdir(pth):\n        img = cv2.imread(pth+'\/'+j, 0)\n        img = cv2.resize(img, (200,200))\n        X.append(img)\n        Y.append(classes[cls])\n\nnp.unique(Y)","d5ded562":"X = np.array(X)\nY = np.array(Y)","caa7b6b3":"pd.Series(Y).value_counts()","bb671c44":"X.shape","6ab242fd":"with plt.xkcd():\n    plt.imshow(X[0], cmap='Blues')","2b9712a2":"X_updated = X.reshape(len(X), -1)\nX_updated.shape","cd8f81bb":"xtrain, xtest, ytrain, ytest = train_test_split(X_updated, Y, random_state=10, test_size=0.20)","81020beb":"xtrain.shape, xtest.shape","e24d60fd":"print(xtrain.max(), xtrain.min())\nprint(xtest.max(), xtest.min())\nxtrain = xtrain\/255\nxtest = xtest\/255\nprint(xtrain.max(), xtrain.min())\nprint(xtest.max(), xtest.min())","68b929d1":"from sklearn.decomposition import PCA","59bf8deb":"print(xtrain.shape, xtest.shape)\npca = PCA(.98)\npca_train = pca.fit_transform(xtrain)\npca_test = pca.transform(xtest)","175d4dd6":"pca_test.shape, pca_train.shape","c20074ca":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","3c180621":"lg = LogisticRegression(C=0.1)\nlg.fit(pca_train, ytrain)","6b3954e6":"sv = SVC()\nsv.fit(pca_train, ytrain)","38c05034":"pca_train.shape","5b184692":"print(\"training score: \", lg.score(pca_train, ytrain))\nprint(\"testing score: \", lg.score(pca_test, ytest))","bd68c870":"print(\"training score: \", sv.score(pca_train, ytrain))\nprint(\"testing score: \", sv.score(pca_test, ytest))","130f94cb":"pca_test.shape","b8b32977":"pred = sv.predict(pca_test)\nnp.where(ytest != pred)","3196869c":"pred[6]","914811ab":"ytest[6]","4e929096":"dec = {0: 'No tumour', 1: 'pituitory tumour'}\n","03616243":"plt.figure(figsize=(12,8))\np = os.listdir('..\/input\/brain-tumor-classification-mri\/Testing')\nc=1\nwith plt.xkcd():\n\n    for i in os.listdir('..\/input\/brain-tumor-classification-mri\/Testing\/no_tumor')[:9]:\n        plt.subplot(3,3,c)\n\n        img = cv2.imread('..\/input\/brain-tumor-classification-mri\/Testing\/no_tumor\/' + i, 0)\n        img1 = cv2.resize(img, (200,200))\n        img1 = img1.reshape(1,-1)\/255\n        pca_test = pca.transform(img1)\n        p = sv.predict(pca_test)\n        plt.title(dec[p[0]])\n        plt.imshow(img, cmap='spring_r')\n        c+=1","425f17e3":"plt.figure(figsize=(12,8))\np = os.listdir('..\/input\/brain-tumor-classification-mri\/Testing')\nc=1\nwith plt.xkcd():\n\n    for i in os.listdir('..\/input\/brain-tumor-classification-mri\/Testing\/pituitary_tumor')[:9]:\n        plt.subplot(3,3,c)\n\n        img = cv2.imread('..\/input\/brain-tumor-classification-mri\/Testing\/no_tumor\/' + i, 0)\n#         print(img.shape)\n        img1 = cv2.resize(img, (200,200))\n#         print(img1.shape)\n        img1 = (img1.reshape(1,-1))\/255\n        pca_test = pca.transform(img1)\n#         print(pca_test.shape)\n        p = sv.predict(pca_test)\n        plt.title(dec[p[0]])\n        plt.imshow(img, cmap='spring_r')\n        plt.axis('off')\n        c+=1","1fb6d7b6":"!pip install -q gradio","fa1584d2":"def greet(name):\n    return \"Hello \" + name + \"!\"\n\ngreet(\"World\")","99ea4dd2":"def predict_ui(img_name):\n    \n    img = cv2.imread(img_name, 0)\n#         print(img.shape)\n    img1 = cv2.resize(img, (200,200))\n#         print(img1.shape)\n    img1 = (img1.reshape(1,-1))\/255\n    pca_test = pca.transform(img1)\n#         print(pca_test.shape)\n    p = sv.predict(pca_test)\n    plt.title(dec[p[0]])\n    plt.imshow(img, cmap='spring_r')\n    plt.axis('off')","011bfeff":"predict_ui('..\/input\/brain-tumor-classification-mri\/Testing\/pituitary_tumor\/image(1).jpg')","265e9a11":"import gradio\n\ngradio.Interface(predict_ui, \"text\", \"plot\").launch(share=True)","658c4950":"## Visualising data","e7b3fe4b":"[Gradio](https:\/\/gradio.app\/docs\/) are a fun way to add interacting UI to your apps. Lets try it with a brain tumor identification model working with SVMs.\n\n![](https:\/\/gradio.app\/assets\/img\/logo.svg)","81a01ca6":"## Feature scaling","5b11ad99":"# GRADIO from SVMs","5363f6c9":"## Train model","ef274657":"## Prediction","0bcfaf8f":"## Evaluation","5bd370b2":"## Preparing \/ collecting data","3becbae7":"# Adding an interface\n\nLets create a simple interface with gradio for prediction","eb1582ea":"## Split data","6c573461":"## Feature selection PCA\n\nPCA is necesseray to do befre we use support vector machines in order to select the most important attributes.","3cc61570":"# Importing modules","2a8fb332":"Lets just choose between two classes, no_tumour and pituatory_tumour.","39d773dc":"## Prepare data","44b3d711":"## Test model"}}