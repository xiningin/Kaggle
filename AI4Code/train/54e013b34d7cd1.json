{"cell_type":{"e76d99f2":"code","dfcd0ffc":"code","f5d6f52a":"code","bb71e896":"code","a68c44b8":"code","6a438cd7":"code","4f664a33":"code","85bf6ff0":"code","5adc2ce8":"code","ba0fdda1":"code","acee7e63":"code","603b7967":"code","683cca0e":"code","8161475f":"code","49907b4d":"code","e6455886":"code","cab54710":"code","2058ff0e":"code","0911b507":"code","ac4a8a4b":"code","e0b44d6f":"code","c7cd8bce":"code","a9985dd9":"code","eb4314ee":"markdown","2cad5ea3":"markdown","0f6a7840":"markdown","2f6862f3":"markdown","d5ace48d":"markdown","4775e50d":"markdown","589f6fff":"markdown","379e687f":"markdown","86e9f716":"markdown","a8f6cf45":"markdown","fe25810d":"markdown","c879e6ec":"markdown"},"source":{"e76d99f2":"!kaggle datasets download ashirwadsangwan\/imdb-dataset","dfcd0ffc":"import zipfile\n\npath = 'imdb-dataset.zip'\nzip_file = zipfile.ZipFile(path)\nzip_list = zip_file.namelist()\n\nfor f in zip_list:\n    zip_file.extract(f)\n\nzip_file.close()","f5d6f52a":"import os\nall_files = os.listdir()\nprint([csv_file for csv_file in all_files if '.tsv' == csv_file[-4:]])","bb71e896":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom apyori import apriori","a68c44b8":"name_basics = pd.read_csv('.\/name.basics.tsv\/name.basics.tsv', sep='\\t', low_memory=True)\ntitle_akas = pd.read_csv('.\/title.akas.tsv\/title.akas.tsv', sep='\\t', low_memory=True)\ntitle_basics = pd.read_csv('.\/title.basics.tsv\/title.basics.tsv', sep='\\t', low_memory=True)\ntitle_principals = pd.read_csv('.\/title.principals.tsv\/title.principals.tsv', sep='\\t', low_memory=True)\ntitle_rating = pd.read_csv('.\/title.ratings.tsv\/title.ratings.tsv', sep='\\t', low_memory=True)","6a438cd7":"print('Shape, Columns: \\n')\nprint('name_basics: {}, \\n{} \\n'.format(name_basics.shape, name_basics.columns))\nprint('title_akas: {}, \\n{} \\n'.format(title_akas.shape, title_akas.columns))\nprint('title_basics: {}, \\n{} \\n'.format(title_basics.shape, title_basics.columns))\nprint('title_principals: {}, \\n{} \\n'.format(title_principals.shape, title_principals.columns))\nprint('title_rating: {}, \\n{} \\n'.format(title_rating.shape, title_rating.columns))","4f664a33":"import matplotlib.pyplot as plt","85bf6ff0":"def name_basics_func0():\n    primaryProfession = name_basics['primaryProfession'].dropna()\n    name_basics['primaryProfession'] = name_basics['primaryProfession'].astype('str')\n    num_individual_profession = name_basics['primaryProfession'].map(lambda x: len(x.split(',')))\n    name_basics['num_individual_profession'] = num_individual_profession\n    name_basics['num_individual_profession'].value_counts().plot(kind='bar')\n    plt.xlabel('num_individual_profession')\n    plt.ylabel('frequency')\n    plt.show()\n    new_name_basics0 = name_basics[['birthYear', 'num_individual_profession']]\n    return new_name_basics0\n\nnew_name_basics0 = name_basics_func0()","5adc2ce8":"def name_basics_func1():\n    frequency_profession_dict = dict()\n    for primaryProfession in name_basics['primaryProfession']:\n        for pro in primaryProfession.split(','):\n            if pro == 'nan':\n                continue\n            try:\n                frequency_profession_dict[pro] += 1\n            except KeyError:\n                frequency_profession_dict[pro] = 1\n\n    frequency_profession_df = pd.DataFrame(frequency_profession_dict.values(),\n                                           index=frequency_profession_dict.keys(),\n                                           columns=['frequency']).sort_values('frequency', ascending=False)\n    frequency_profession_df.plot(kind='barh', figsize=(10, 10))\n    plt.show()\n    \n    res = apriori(name_basics[name_basics['primaryProfession'] != 'nan']['primaryProfession'].map(lambda x: x.split(',')).values)\n    print('Aprior')\n    for rule in res:\n        print(str(rule))\n    return frequency_profession_df\n    \n    \nfrequency_profession_df = name_basics_func1()","ba0fdda1":"MIN_SUPP = 0.1\nMIN_CONF = 0.1\nMIN_LIFT = 0.1\n\ndef title_akas_func0():\n    num_different_works = len(title_akas.titleId.unique())\n    print('There are {} works in total'.format(num_different_works))\n    print('On average, each work is available in {:.3f} languages'.format(len(title_akas) \/ num_different_works))\n    title_akas['frequency'] = 0\n    frequency_versions_df = title_akas[['titleId', 'frequency']].groupby('titleId').count()\n\n    frequency_versions_df['frequency'].value_counts().iloc[:20].plot(kind='barh')\n    plt.xlabel('frequency')\n    plt.ylabel('num_versions')\n    print('The relationship between the number of language versions and frequency is shown in the figure below')\n    plt.show()\n\n    title_akas[['region', 'frequency']].groupby('region').count().sort_values('frequency').iloc[-20:].plot(kind='barh')\n    plt.xlabel('frequency')\n    plt.ylabel('region')\n    print('Which regions usually have translations?')\n    plt.show()\n\n    print('Top ten most widely disseminated works:')\n    top10 = frequency_versions_df.sort_values('frequency', ascending=False)[: 10]\n    originalTitle_top10 = list()\n    for tt in top10.index:\n        originalTitle_top10.append(\n            title_akas[title_akas['titleId'] == tt].sort_values('isOriginalTitle', ascending=False).title.values[0])\n    top10['Title'] = originalTitle_top10\n    display(top10)\n    \n    frequency_versions_df.columns = ['num_akas']\n    frequency_versions_df['tconst'] = frequency_versions_df.index\n    frequency_versions_df = frequency_versions_df.reset_index()[['tconst', 'num_akas']]\n    \n    print('Analysis of propagation paths using Aprior')\n    res = apriori(transactions=title_akas[title_akas['types'] != '\\\\N']['types'].map(lambda x: x.split(',')).values,\n                  min_support=MIN_SUPP,\n                  min_confidence=MIN_CONF,\n                  min_lift=MIN_LIFT)\n    print('Aprior')\n    for rule in res:\n        print(str(rule))\n    return frequency_versions_df\n\nnew_title_akas = title_akas_func0()","acee7e63":"def title_basics_func0():\n    title_basics['titleType'].value_counts().plot(kind='bar')\n    plt.xlabel('titleType')\n    plt.ylabel('nums')\n    print('The following are the different kinds of quantities')\n    plt.show()\n\n    _title_basics = title_basics[title_basics['startYear'] != '\\\\N']\n    _title_basics.loc[:, 'startYear'] = _title_basics.startYear.astype('int')\n    earest_year = _title_basics.startYear.min()\n    latest_year = _title_basics.startYear.max()\n    print('The earliest work was created in {}, and the latest will be in {}'.format(earest_year, latest_year))\n\n    print('From 1880 to 2020, the number of works per ten years is as follows:')\n    years = np.arange(1880, 2021, 10)\n    nums = [len(_title_basics[(year - 5) < _title_basics['startYear']][_title_basics['startYear'] < (year + 5)]) for year in years]\n    plt.bar(years, nums, width=5)\n    plt.xlabel('year')\n    plt.ylabel('nums')\n    plt.show()\n    \n    title_basics.loc[title_basics['runtimeMinutes'] == '\\\\N', 'runtimeMinutes'] = 0\n    new_title_basics = title_basics[['tconst', 'startYear', 'runtimeMinutes']]\n    return new_title_basics\n    \nnew_title_basics = title_basics_func0()","603b7967":"tconst_name_dict = name_basics[['nconst', 'primaryName']].set_index('nconst').to_dict()['primaryName']\nnconst_title_dict = title_basics[['tconst', 'primaryTitle']].set_index('tconst').to_dict()['primaryTitle']\ntconst_nconst_dict = dict()\nfor tconst, nconst in title_principals[['tconst', 'nconst']].values:\n    print('\\r{}'.format(len(tconst_nconst_dict)), end='')\n    try:\n        title = nconst_title_dict.get(tconst)\n        if not title:\n            continue\n        name = tconst_name_dict.get(nconst)\n        tconst_nconst_dict[title].append(name)\n    except KeyError:\n        tconst_nconst_dict[title] = [name]","683cca0e":"for i in range(10):\n    print(i + 1)\n    print(list(tconst_nconst_dict.keys())[i])\n    print(list(tconst_nconst_dict.values())[i])\n\nprint('...')\nprint('A total of {} pieces of valid data'.format(len(tconst_nconst_dict)))","8161475f":"nconst_dict = dict()\nfor nconst in title_principals['nconst'].values:\n    try:\n        nconst_dict[nconst] += 1\n    except KeyError:\n        nconst_dict[nconst] = 1","49907b4d":"nconst_df = pd.DataFrame()\nnconst_df['nconst'] = nconst_dict.keys()\nnconst_df['frequency'] = nconst_dict.values()","e6455886":"print('The ten most frequently appearing actors are as follows:')\ni = 0\nfor nconst in nconst_df.sort_values('frequency', ascending=False).nconst.values:\n    profession = name_basics[name_basics['nconst'] == nconst].primaryProfession.item()\n    if ('actor' in profession) or ('actress' in profession):\n        i += 1\n        name = name_basics[name_basics['nconst'] == nconst].primaryName.item()\n        freq = nconst_df[nconst_df['nconst'] == nconst].frequency.item()\n        print('Rank: {}, Name: {}. Freq: {} times'.format(i, name, freq))\n        if i == 10:\n            break","cab54710":"MIN_SUPP = 0.01\nMIN_CONF = 0.01\nMIN_LIFT = 0.01\ndef title_principals_func0():\n    title_principals['category'].value_counts().plot(kind='bar')\n    plt.xlabel('category')\n    plt.ylabel('frequency')\n    print('Among them, the largest number of actors')\n    plt.show()\n    title_principals['nums_principals'] = 1\n    new_title_principals = title_principals[['tconst', 'nums_principals']].groupby('tconst').count()\n    print('On average, there are {} principals in charge of each work'.format(len(title_principals) \/ len(new_title_principals)))\n    \n    new_title_principals.value_counts().plot(kind='bar')\n    plt.ylabel('frequency')\n    print('The most occurring situation is that there are 10 principals')\n    plt.show()\n    \n    new_title_principals.reset_index(inplace=True)\n    \n#     tconst_nconst_dict = dict()\n#     for tconst, nconst in title_principals[['tconst', 'nconst']].values:\n#         try:\n#             tconst_nconst_dict[tconst].append(nconst)\n#         except KeyError:\n#             tconst_nconst_dict[tconst] = [nconst]\n\n#     print('Use Aprior to calculate the most frequently appearing people')\n#     res = apriori(transactions=tconst_nconst_dict.values(),\n#                   min_support=MIN_SUPP,\n#                   min_confidence=MIN_CONF,\n#                   min_lift=MIN_LIFT)\n#     print('Aprior')\n#     for rule in res:\n#         print(str(rule))\n        \n    return new_title_principals\n\nnew_title_principals = title_principals_func0()","2058ff0e":"def title_rating_func0():\n    print('The average score for all works is 7.1, and the average number of votes cast is 76 votes')\n    title_rating.describe()\n\n    plt.figure(figsize=(10, 4))\n    plt.bar(['0~9', '10~99', '100~999', '1000~9999', '10000~99999', '100000~999999'], \n            [\n                len(title_rating[\n                    title_rating['numVotes'] >= 0][title_rating['numVotes'] < 1e1]),\n                len(title_rating[\n                    title_rating['numVotes'] >= 1e1][title_rating['numVotes'] < 1e2]),\n                len(title_rating[\n                    title_rating['numVotes'] >= 1e2][title_rating['numVotes'] < 1e3]),\n                len(title_rating[\n                    title_rating['numVotes'] >= 1e3][title_rating['numVotes'] < 1e4]),\n                len(title_rating[\n                    title_rating['numVotes'] >= 1e4][title_rating['numVotes'] < 1e5]),\n                len(title_rating[\n                    title_rating['numVotes'] >= 1e5][title_rating['numVotes'] < 1e6]),\n            ]\n           )\n    plt.xlabel('numVotes')\n    plt.ylabel('numWorks')\n    print('But at this time we will find that only a few of the works have a lot of attention')\n    plt.show()\n\n    plt.figure(figsize=(10, 4))\n    plt.bar(['0~9', '10~99', '100~999', '1000~9999', '10000~99999', '100000~999999'], \n            [\n                title_rating[title_rating[\n                    'numVotes'] >= 0][title_rating['numVotes'] < 1e1].averageRating.mean(),\n                title_rating[title_rating[\n                    'numVotes'] >= 1e1][title_rating['numVotes'] < 1e2].averageRating.mean(),\n                title_rating[title_rating[\n                    'numVotes'] >= 1e2][title_rating['numVotes'] < 1e3].averageRating.mean(),\n                title_rating[title_rating[\n                    'numVotes'] >= 1e3][title_rating['numVotes'] < 1e4].averageRating.mean(),\n                title_rating[title_rating[\n                    'numVotes'] >= 1e4][title_rating['numVotes'] < 1e5].averageRating.mean(),\n                title_rating[title_rating[\n                    'numVotes'] >= 1e5][title_rating['numVotes'] < 1e6].averageRating.mean(),\n            ]\n           )\n    plt.xlabel('numVotes')\n    plt.ylabel('averageRating')\n    print('However there is no direct relationship between the number of voters and the score')\n    plt.show()\n    \ntitle_rating_func0()","0911b507":"title_rating = pd.merge(left=title_rating, right=new_title_akas, how='left', on='tconst')\ntitle_rating = pd.merge(left=title_rating, right=new_title_basics, how='left', on='tconst')\ntitle_rating = pd.merge(left=title_rating, right=new_title_principals, how='left', on='tconst')","ac4a8a4b":"title_rating.loc[title_rating['num_akas'].isnull(), 'num_akas'] = 0\ntitle_rating.loc[title_rating['nums_principals'].isnull(), 'nums_principals'] = 0","e0b44d6f":"def minmaxscaler(data):\n    min = np.amin(data)\n    max = np.amax(data)    \n    return (data - min)\/(max-min)","c7cd8bce":"title_rating","a9985dd9":"minmaxscaler(title_rating[['averageRating', 'numVotes', 'num_akas', 'startYear', 'runtimeMinutes' ,'nums_principals']]).corr()","eb4314ee":"Calculate and plot the frequency of various occupations","2cad5ea3":"### 3. Load data & Overview","0f6a7840":"Print all tsv files","2f6862f3":"### 1. Download dataset frome Kaggle","d5ace48d":"Connect the data columns in each table and calculate their correlation coefficients","4775e50d":"Frequency Statistic","589f6fff":"In table title_basics, We can get more information about the genre, and we can also know the productivity of works in each era.","379e687f":"table 'title_principals', We can get the number of principals and the responsibilities of the highest priority principals for each work","86e9f716":"### 2. Unzip files\nGet all the files in the compressed package\n\nUnzip files in a loop to the specified directory\n\nClose the file and free up memory\n","a8f6cf45":"An excellent work is usually translated into different languages by different channels and then sold in different regions. Table 'title_akas' has the feature 'region' for sale and the lack of feature 'language', so the feature 'language' can be ignored\n\nFirst of all, we can get the total number of works","fe25810d":"In the table 'title_rating', we can see the scores and votes of different works","c879e6ec":"### 4. Data Analysing\nTable 'name_basics' contains information about the personnel involved, including nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles.\n\nFirst calculate how many functions there are and draw a picture"}}