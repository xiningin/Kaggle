{"cell_type":{"bbda8724":"code","360a4f2c":"code","eb891f8f":"code","934e90fa":"code","08713dce":"code","edd6f80d":"code","ff408ef8":"code","888f8ee1":"code","6d7b90b8":"code","0a7c7d77":"code","5c98673d":"code","dae537ed":"code","c5103663":"code","96726860":"code","53e1859c":"code","6fd3c2bd":"markdown","ce3b50b4":"markdown","17e07987":"markdown","826400be":"markdown","69f34479":"markdown"},"source":{"bbda8724":"import numpy as np\nimport pandas as pd","360a4f2c":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns: #columns\u6bce\u306b\u51e6\u7406\n        col_type = df[col].dtypes\n        if col_type in numerics: #numerics\u306e\u30c7\u30fc\u30bf\u578b\u306e\u7bc4\u56f2\u5185\u306e\u3068\u304d\u306b\u51e6\u7406\u3092\u5b9f\u884c. \u30c7\u30fc\u30bf\u306e\u6700\u5927\u6700\u5c0f\u5024\u3092\u5143\u306b\u30c7\u30fc\u30bf\u578b\u3092\u52b9\u7387\u7684\u306a\u3082\u306e\u306b\u5909\u66f4\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","eb891f8f":"\ncalendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\ncalendar = reduce_mem_usage(calendar)\nprint('Calendar has {} rows and {} columns'.format(calendar.shape[0], calendar.shape[1]))\n\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsell_prices = reduce_mem_usage(sell_prices)\nprint('Sell prices has {} rows and {} columns'.format(sell_prices.shape[0], sell_prices.shape[1]))\n\nsales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nprint('Sales train validation has {} rows and {} columns'.format(sales.shape[0], sales.shape[1]))","934e90fa":"sample_submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsample_submission = sample_submission[sample_submission.id.str.endswith('validation')]\n\nNUM_ITEMS = sales.shape[0]    # 30490\nDAYS_PRED = sample_submission.shape[1] - 1    # 28\n\n# To make it simpler, I will run only the last 10 days\nDAYS_PRED = 10","08713dce":"\n\ndef transform(df):\n    newdf = df.melt(id_vars=[\"id\"], var_name=\"d\", value_name=\"sale\")\n    newdf.sort_values(by=['id', \"d\"], inplace=True)\n    newdf.reset_index(inplace=True)\n    return newdf\n\nfrom sklearn.metrics import mean_squared_error\n\ndef rmse(df, gt):\n    df = transform(df)\n    gt = transform(gt)\n    return mean_squared_error(df[\"sale\"], gt[\"sale\"])\n","edd6f80d":"\ndayCols = [\"d_{}\".format(i) for i in range(1904, 1904+DAYS_PRED)]\ngt = sales[[\"id\"]+dayCols]\n\ndayCols = [\"F{}\".format(i) for i in range(1, DAYS_PRED+1)]\ndf = sample_submission[[\"id\"]+dayCols]","ff408ef8":"# RSME score\nrmse(df, gt)","888f8ee1":"import gc\nfrom scipy.sparse import csr_matrix","6d7b90b8":"# Get list of all products\nidcols = [\"id\", \"item_id\", \"state_id\", \"store_id\", \"cat_id\", \"dept_id\"]\nproduct = sales[idcols]\n\n# create weight matrix\npd.get_dummies(product.state_id, drop_first=False)\nweight_mat = np.c_[\n   np.ones([NUM_ITEMS,1]).astype(np.int8), # level 1\n   pd.get_dummies(product.state_id, drop_first=False).values,\n   pd.get_dummies(product.store_id, drop_first=False).values,\n   pd.get_dummies(product.cat_id, drop_first=False).values,\n   pd.get_dummies(product.dept_id, drop_first=False).values,\n   pd.get_dummies(product.state_id + product.cat_id, drop_first=False).values,\n   pd.get_dummies(product.state_id + product.dept_id, drop_first=False).values,\n   pd.get_dummies(product.store_id + product.cat_id, drop_first=False).values,\n   pd.get_dummies(product.store_id + product.dept_id, drop_first=False).values,\n   pd.get_dummies(product.item_id, drop_first=False).values,\n   pd.get_dummies(product.state_id + product.item_id, drop_first=False).values,\n   np.identity(NUM_ITEMS).astype(np.int8) #item :level 12\n].T\n\nweight_mat = weight_mat.astype(\"int8\")\nweight_mat, weight_mat.shape","0a7c7d77":"weight_mat_csr = csr_matrix(weight_mat)\ndel weight_mat; gc.collect()","5c98673d":"def cal_weight1(product):\n    sales_train_val = sales\n    d_name = ['d_' + str(i+1) for i in range(1913)]\n\n    sales_train_val = weight_mat_csr * sales_train_val[d_name].values\n\n\n    df_tmp = ((sales_train_val>0) * np.tile(np.arange(1,1914),(weight_mat_csr.shape[0],1)))\n\n    start_no = np.min(np.where(df_tmp==0,9999,df_tmp),axis=1)-1\n\n    flag = np.dot(np.diag(1\/(start_no+1)) , np.tile(np.arange(1,1914),(weight_mat_csr.shape[0],1)))<1\n\n    sales_train_val = np.where(flag, np.nan, sales_train_val)\n\n    # denominator of RMSSE \/ RMSSE\n    weight1 = np.nansum(np.diff(sales_train_val,axis=1)**2,axis=1)\/(1913-start_no)\n    \n    return weight1\n\nweight1 = cal_weight1(product)","dae537ed":"# Get the last 28 days for weight2\ncols = [\"d_{}\".format(i) for i in range(1886, 1886+28)]\n\ndata = sales[[\"id\", 'store_id', 'item_id'] + cols]\n\ndata = data.melt(id_vars=[\"id\", 'store_id', 'item_id'], var_name=\"d\", value_name=\"sale\")\ndata = pd.merge(data, calendar, how = 'left', left_on = ['d'], right_on = ['d'])\ndata = data[[\"id\", 'store_id', 'item_id', \"sale\", \"wm_yr_wk\"]]\ndata = data.merge(sell_prices, on = ['store_id', 'item_id', 'wm_yr_wk'], how = 'left')\n","c5103663":"\ndef cal_weight2(data):\n    # calculate the sales amount for each item\/level\n    df_tmp = data\n    df_tmp['amount'] = df_tmp['sale'] * df_tmp['sell_price']\n    df_tmp =df_tmp.groupby(['id'])['amount'].apply(np.sum)\n    df_tmp = df_tmp.values\n    \n    weight2 = weight_mat_csr * df_tmp \n\n    weight2 = weight2\/np.sum(weight2)\n    return weight2\n    \nweight2 = cal_weight2(data)\nweight2.shape","96726860":"def wrmsse(preds, y_true):\n    # number of columns\n    num_col = DAYS_PRED\n\n    reshaped_preds = preds.reshape(num_col, NUM_ITEMS).T\n    reshaped_true = y_true.reshape(num_col, NUM_ITEMS).T\n    \n          \n    train = weight_mat_csr*np.c_[reshaped_preds, reshaped_true]\n    \n    score = np.sum(\n                np.sqrt(\n                    np.mean(\n                        np.square(\n                            train[:,:num_col] - train[:,num_col:])\n                        ,axis=1) \/ weight1) * weight2)\n    \n    return score","53e1859c":"# WRMSSE score\nDAYS_PRED = 10\ndft = transform(df)\ngtt = transform(gt)\nwrmsse(dft[\"sale\"].to_numpy(), gtt[\"sale\"].to_numpy())","6fd3c2bd":"# RSME","ce3b50b4":"# Note\n\nThis notebook is based on [for_Japanese_beginner(with WRMSSE in LGBM))](https:\/\/www.kaggle.com\/girmdshinsei\/for-japanese-beginner-with-wrmsse-in-lgbm)\n\nI just organised everything as a simple function so anyone could use it to evaluate their models.","17e07987":"### Load your submission","826400be":"# WRMSSE","69f34479":"The very simplify version of WRMSSE is\n\\begin{equation}\nWRMSSE = \\sum_{i=1}^{42840} (W2_i * \\sqrt{\\frac{\\sum{(y-y')^2}}{W1}})\n\\end{equation}\n\nSo the functions below will be seperated into `cal_weight1` and `cal_weight2`. Then, it will be merged together into `wrmsse`\n\n````\nPS. 42840 is the number of series that will be evaluated here.\n````"}}