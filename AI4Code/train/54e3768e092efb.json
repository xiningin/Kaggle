{"cell_type":{"4c454626":"code","a8d396e3":"code","be7ef07d":"code","028f1bd5":"code","c98c8db6":"code","02f09207":"code","74716a6c":"code","f419f17f":"code","54f84509":"code","6abcd2a1":"code","d526d4a3":"code","bd586fa6":"code","90b26f3a":"code","1b36996d":"code","5525f744":"code","62beb124":"code","edb7251a":"code","358df6bd":"code","d60dd3db":"code","5fa2b342":"code","6e0ac6f2":"code","a2ac1870":"code","e86598d3":"code","35b8d805":"code","8a923048":"code","fcf6ffb9":"code","1639eb2a":"code","f4f23126":"code","fcc7f36b":"code","67eb7821":"code","3175f4a3":"code","0b81d477":"code","3068771b":"code","9e42ebf7":"markdown","9e131ed7":"markdown"},"source":{"4c454626":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n#from surprise import Reader, Dataset, SVD, evaluate\n\nimport warnings; warnings.simplefilter('ignore')","a8d396e3":"md = pd. read_csv('..\/input\/movies_metadata.csv')\nmd.head()","be7ef07d":"md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","028f1bd5":"vote_counts = md[md['vote_count'].notnull()]['vote_count'].astype('int')\nvote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')\nC = vote_averages.mean()\nC","c98c8db6":"m = vote_counts.quantile(0.95)\nm","02f09207":"md['year'] = pd.to_datetime(md['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)","74716a6c":"qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & (md['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity', 'genres']]\nqualified['vote_count'] = qualified['vote_count'].astype('int')\nqualified['vote_average'] = qualified['vote_average'].astype('int')\nqualified.shape","f419f17f":"def weighted_rating(x):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","54f84509":"qualified['wr'] = qualified.apply(weighted_rating, axis=1)","6abcd2a1":"qualified = qualified.sort_values('wr', ascending=False).head(250)","d526d4a3":"qualified.head(15)","bd586fa6":"s = md.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)\ns.name = 'genre'\ngen_md = md.drop('genres', axis=1).join(s)","90b26f3a":"def build_chart(genre, percentile=0.85):\n    df = gen_md[gen_md['genre'] == genre]\n    vote_counts = df[df['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_averages = df[df['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_averages.mean()\n    m = vote_counts.quantile(percentile)\n    \n    qualified = df[(df['vote_count'] >= m) & (df['vote_count'].notnull()) & (df['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity']]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    \n    qualified['wr'] = qualified.apply(lambda x: (x['vote_count']\/(x['vote_count']+m) * x['vote_average']) + (m\/(m+x['vote_count']) * C), axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(250)\n    \n    return qualified","1b36996d":"build_chart('Romance').head(15)","5525f744":"links_small = pd.read_csv('..\/input\/links_small.csv')\nlinks_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')","62beb124":"md = md.drop([19730, 29503, 35587])","edb7251a":"#Check EDA Notebook for how and why I got these indices.\nmd['id'] = md['id'].astype('int')","358df6bd":"smd = md[md['id'].isin(links_small)]\nsmd.shape","d60dd3db":"smd['tagline'] = smd['tagline'].fillna('')\nsmd['description'] = smd['overview'] + smd['tagline']\nsmd['description'] = smd['description'].fillna('')","5fa2b342":"tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(smd['description'])","6e0ac6f2":"tfidf_matrix.shape","a2ac1870":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","e86598d3":"cosine_sim[0]","35b8d805":"smd = smd.reset_index()\ntitles = smd['title']\nindices = pd.Series(smd.index, index=smd['title'])","8a923048":"def get_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:31]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]","fcf6ffb9":"get_recommendations('The Godfather').head(10)","1639eb2a":"get_recommendations('The Dark Knight').head(10)","f4f23126":"def improved_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:26]\n    movie_indices = [i[0] for i in sim_scores]\n    \n    movies = smd.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year']]\n    vote_counts = movies[movies['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_averages = movies[movies['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_averages.mean()\n    m = vote_counts.quantile(0.60)\n    qualified = movies[(movies['vote_count'] >= m) & (movies['vote_count'].notnull()) & (movies['vote_average'].notnull())]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    qualified['wr'] = qualified.apply(weighted_rating, axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(10)\n    return qualified","fcc7f36b":"improved_recommendations('The Dark Knight')","67eb7821":"improved_recommendations('Mean Girls')","3175f4a3":"reader = Reader()","0b81d477":"ratings = pd.read_csv('..\/input\/ratings_small.csv')\nratings.head()","3068771b":"ratings[ratings['userId'] == 1]","9e42ebf7":"****Content Based Recommender","9e131ed7":"# Movies Recommender System"}}