{"cell_type":{"7cb1bdb2":"code","8753b5da":"code","fc539002":"code","5d9b9350":"code","a33eebca":"code","9ec0d381":"code","708a03c1":"code","c34e5931":"code","f6adf617":"code","12a85c38":"code","0b9622d4":"code","2f9f2c76":"code","ee6f3854":"code","2d9db28b":"code","a789a18e":"code","2eab093c":"code","ca6405d5":"code","687c3191":"code","468b7709":"code","bee73299":"code","477b602a":"code","e6155319":"code","608d5731":"code","c6a2ad3d":"markdown","79696389":"markdown","2eb55317":"markdown","6b2a35e3":"markdown","54a8f034":"markdown","f111e25d":"markdown","af737e74":"markdown","4fec9802":"markdown","4908d286":"markdown","655183b5":"markdown","8a13a3bb":"markdown","fd7e565d":"markdown","f461e93a":"markdown","ed0b7b5a":"markdown","d3a279e6":"markdown","e24fca8e":"markdown"},"source":{"7cb1bdb2":"from keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2\nfrom keras.applications.inception_resnet_v2 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.preprocessing import image\nfrom sklearn.model_selection import train_test_split\nimport os\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport pandas as pd","8753b5da":"df = pd.read_csv(\"..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train.csv\")","fc539002":"df.head()","5d9b9350":"df['Class'].value_counts()","a33eebca":"df['Class'].value_counts(sort=True).plot.bar()","9ec0d381":"train_image = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train'\ntest_image = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test'","708a03c1":"image_size = [299, 299]","c34e5931":"train_df,valid_df = train_test_split(df,test_size=.15,stratify=df.Class.values,shuffle=True)\n\n\ntrain_df.reset_index(inplace=True,drop=True)\nvalid_df.reset_index(inplace=True,drop=True)","f6adf617":"train_df.head()","12a85c38":"train_df['Class'].value_counts()","0b9622d4":"train_df['Class'].value_counts(sort=True).plot.bar()","2f9f2c76":"valid_df.head()","ee6f3854":"valid_df['Class'].value_counts()","2d9db28b":"valid_df['Class'].value_counts(sort=True).plot.bar()","a789a18e":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntraining_set = train_datagen.flow_from_dataframe(dataframe=train_df, directory=train_image,\n                                                 x_col=\"Image\", y_col=\"Class\",\n                                                 class_mode=\"categorical\",\n                                                 target_size=(299,299), batch_size=32)","2eab093c":"validation_datagen = ImageDataGenerator(rescale = 1.\/255)\n\nvalidation_set = validation_datagen.flow_from_dataframe(dataframe=valid_df, directory=train_image,\n                                                 x_col=\"Image\", y_col=\"Class\",\n                                                 class_mode=\"categorical\",\n                                                 target_size=(299,299), batch_size=32)","ca6405d5":"incep = InceptionResNetV2(input_shape=image_size + [3], weights='imagenet', include_top=False)\n\n# don't train existing weights\nfor layer in incep.layers:\n  layer.trainable = False  \n\nx = Flatten()(incep.output)\n\n\nprediction = Dense(6, activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=incep.input, outputs=prediction)\n\n# view the structure of the model\nmodel.summary()","687c3191":"model.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","468b7709":"r = model.fit_generator(\n  training_set,\n  validation_data=validation_set,\n  epochs=12,\n  steps_per_epoch=training_set.n\/\/32,\n  validation_steps=validation_set.n\/\/32\n)","bee73299":"# Loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# Accuracies\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')\n","477b602a":"name=[]\ny_pred=[]\nlabels = (training_set.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\nfor i in os.listdir('..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/'):\n    name.append(i)\n    i='..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/'+i\n    img=image.load_img(i,target_size=(299,299,3))\n    img=image.img_to_array(img)\/255\n    pred=model.predict(img.reshape(1,299,299,3))\n    y_pred.append(labels[np.argmax(pred[0])])\n    \ndata=pd.DataFrame((zip(name,y_pred)),columns=['Image','Class'])\ndata.head()","e6155319":"data.to_csv('my_submission.csv',index=False)","608d5731":"data.shape","c6a2ad3d":"# Importing Libraries","79696389":"# Getting Images and Preprocesing ","2eb55317":"# Getting The InceptionResNetV2 Model","6b2a35e3":"# Getting Predictions for Test Data Images","54a8f034":"## Validation Dataframe","f111e25d":"# Compile the model","af737e74":"# Ploting Loss ansd Accuracy","4fec9802":"# Getting the Images Folder Path","4908d286":"# Setting Input Image Size","655183b5":"# Getting Analysis of Dataframe","8a13a3bb":"# Getting Images for Vaidation","fd7e565d":"# Splitting Dataframe","f461e93a":"## Training Dataframe","ed0b7b5a":"# Getting The Dataset","d3a279e6":"# Fitting the model","e24fca8e":"## Getting Images for training"}}