{"cell_type":{"661569bf":"code","0fec8734":"code","0fd248af":"code","44ec1dad":"code","caae71b2":"code","3adf8be0":"code","dc3f1a0e":"code","d808431a":"code","28998418":"code","2db5d525":"code","090c6698":"code","2ed3b153":"code","e5e0bc5b":"code","b6140a99":"code","b24446ae":"code","0846e6fd":"code","320cf6fd":"code","4ba1c8cd":"code","6e19aba7":"code","ed9601c9":"code","09abceb0":"code","8e2542ef":"code","a52c7222":"code","42267470":"code","1c6760cf":"code","15e03cc0":"code","c6f432ee":"code","8ac0f39e":"code","5363fe17":"code","eb558d00":"code","b6b98e09":"code","b3b8126c":"code","1d1f598e":"code","88f087b6":"code","56131c61":"code","96316094":"code","ee04c8ca":"code","57e34f89":"code","2de2cfd0":"code","30a1dee8":"code","72433f82":"code","7f9a2ab3":"code","b243af28":"code","d931b1c2":"code","3812e599":"code","8138fc09":"code","2567238c":"code","3a059a55":"code","bd17e5b5":"code","a90a588e":"code","10116c07":"code","61825702":"code","b39edd34":"code","450099f1":"code","d5cd4591":"code","9201638a":"code","27bbf579":"code","d2f450b1":"code","c4125833":"code","325f4597":"code","c5967e8d":"code","fc871211":"code","79850462":"code","13cb2592":"code","ac5acbf5":"code","4cb47b72":"code","87f07b34":"code","6f8a8de4":"code","37cf777b":"code","80cc2461":"code","4408d414":"code","0ebd59e4":"code","94f1b733":"code","70ae4a1e":"code","80dcfdef":"code","5ef4d080":"code","01c86a9a":"code","b8b9c4ce":"code","544d6fbd":"code","7ea32991":"code","3f000aad":"code","55387d18":"code","1d9730e6":"code","e5c2dbb9":"code","3022220b":"code","5e9edd2b":"code","cf1e8f6d":"code","5a230f85":"code","0022a5b2":"code","de43421b":"code","a31a393b":"code","b3f3880f":"code","648c6258":"code","39f8b7dd":"code","28c2fda1":"code","5164c437":"code","1701267e":"code","125d18a6":"code","ab59c756":"code","789d92ad":"code","8754e929":"code","a4641373":"code","cd9b6be5":"code","53e6c5ec":"code","a7f2762b":"code","2d0ef06b":"code","8c83124d":"code","1e40ddd3":"code","f28a2102":"code","3135744c":"code","97ccf917":"code","ebe883a9":"code","ee67679a":"code","319ab112":"code","6c8d3f23":"code","5c35cb5f":"code","24b9fd54":"code","dce7e9e3":"code","36b90b60":"code","781f10ff":"code","0abce49d":"code","e53bd536":"code","46856244":"code","f8fd2039":"code","e877ef5f":"code","c8855c7d":"code","c5bee6aa":"code","1be37625":"code","1de98049":"code","c1a12aed":"code","198fdc56":"markdown","98fee5ef":"markdown","d02d4549":"markdown","0bddc62d":"markdown","e9e2f8ba":"markdown","17888ccf":"markdown","6c0f55ae":"markdown","b97f5f8a":"markdown","79b80bae":"markdown","2d7c4d86":"markdown","6d93d4db":"markdown","1680d74d":"markdown","48ff0196":"markdown","dcc66aeb":"markdown","3ae5d154":"markdown","e9d6712e":"markdown","030f7c5e":"markdown","35e22521":"markdown","7343040e":"markdown","1d60ee4e":"markdown","4dfafad2":"markdown","bf840752":"markdown","8c7c3c6e":"markdown","5e4696bd":"markdown","50091b63":"markdown","2b27b22c":"markdown","8d8c0fed":"markdown","52c51ca0":"markdown","1ced0b9d":"markdown","d857e72f":"markdown","07e3753c":"markdown","5fdac239":"markdown","2e1e3ed0":"markdown","64461786":"markdown","7aa8117e":"markdown","6797b003":"markdown","c2a50e68":"markdown","e780ed1f":"markdown","2dba6c18":"markdown","5baecc0a":"markdown","8e123cd0":"markdown","b60502fb":"markdown"},"source":{"661569bf":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom mpl_toolkits.mplot3d import Axes3D\nimport statsmodels.api as sm\nimport missingno as msno\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom scipy.stats import levene\nfrom scipy.stats import shapiro\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nimport xgboost as xgb\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve","0fec8734":"Personality = pd.read_csv(\"..\/input\/personality-scale-analysis\/psyc.csv\")\nPersonality[\"Total\"] = Personality[\"openness\"] + Personality[\"neuroticism\"] + \\\nPersonality[\"conscientiousness\"] + Personality[\"agreeableness\"] + Personality[\"extraversion\"]\n\ndata = Personality.copy()\n\ndataV = Personality.copy() # for VISUALIZATION\ndataV[\"gender\"] = pd.Categorical(dataV[\"gender\"])\ndataV[\"openness\"] = pd.Categorical(dataV[\"openness\"])\ndataV[\"neuroticism\"] = pd.Categorical(dataV[\"neuroticism\"])\ndataV[\"conscientiousness\"] = pd.Categorical(dataV[\"conscientiousness\"])\ndataV[\"agreeableness\"] = pd.Categorical(dataV[\"agreeableness\"])\ndataV[\"extraversion\"] = pd.Categorical(dataV[\"extraversion\"])\ndataV[\"Personality\"] = pd.Categorical(dataV[\"Personality\"])\n\ndf = data.select_dtypes(include=[\"float64\",\"int64\",\"int32\"])\n","0fd248af":"print(data.shape)\nprint(\"----\"*30)\nprint(data.columns)\nprint(\"----\"*30)\nprint(data.info())\nprint(\"----\"*30)\nprint(data.describe().T)\nprint(\"----\"*30)\nprint(data[\"gender\"].value_counts())\nprint(\"----\"*30)\nprint(data[\"Personality\"].value_counts())\nprint(\"----\"*30)\nprint(df.corr())\nprint(\"----\"*30)\nprint(data.groupby([\"gender\",\"Personality\"])[\"openness\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"gender\",\"Personality\"])[\"neuroticism\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"gender\",\"Personality\"])[\"conscientiousness\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"gender\",\"Personality\"])[\"agreeableness\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"gender\",\"Personality\"])[\"extraversion\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"Personality\",\"Total\"])[\"openness\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"Personality\",\"Total\"])[\"neuroticism\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"Personality\",\"Total\"])[\"conscientiousness\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"Personality\",\"Total\"])[\"agreeableness\"].mean())\nprint(\"----\"*30)\nprint(data.groupby([\"Personality\",\"Total\"])[\"extraversion\"].mean())\nprint(\"----\"*30)\nprint(data.isnull().sum())","44ec1dad":"dataV[\"gender\"].hist(figsize=(5,5))\nplt.show()","caae71b2":"dataV[\"Personality\"].hist(figsize=(5,5))\nplt.show()","3adf8be0":"dataV[\"openness\"].hist(figsize=(5,5))\nplt.show()","dc3f1a0e":"dataV[\"neuroticism\"].hist(figsize=(5,5))\nplt.show()","d808431a":"dataV[\"conscientiousness\"].hist(figsize=(5,5))\nplt.show()","28998418":"dataV[\"agreeableness\"].hist(figsize=(5,5))\nplt.show()","2db5d525":"dataV[\"extraversion\"].hist(figsize=(5,5))\nplt.show()","090c6698":"sns.boxplot(x=\"Total\",y=\"gender\",hue=\"Personality\",data=data)\nplt.show()","2ed3b153":"sns.barplot(x=\"Total\",y=\"gender\",hue=\"Personality\",data=data)\nplt.show()","e5e0bc5b":"sns.barplot(x=\"openness\",y=\"Total\",hue=\"Personality\",data=dataV)\nplt.show()","b6140a99":"sns.barplot(x=\"openness\",y=\"Total\",hue=\"Personality\",data=dataV)\nplt.show()","b24446ae":"sns.barplot(x=\"neuroticism\",y=\"Total\",hue=\"Personality\",data=dataV)\nplt.show()","0846e6fd":"sns.barplot(x=\"conscientiousness\",y=\"Total\",hue=\"Personality\",data=dataV)\nplt.show()","320cf6fd":"sns.barplot(x=\"agreeableness\",y=\"Total\",hue=\"Personality\",data=dataV)\nplt.show()","4ba1c8cd":"sns.barplot(x=\"extraversion\",y=\"Total\",hue=\"Personality\",data=dataV)\nplt.show()","6e19aba7":"sns.lineplot(x=\"Personality\",y=\"openness\",data=data)\nplt.show()","ed9601c9":"sns.lineplot(x=\"Personality\",y=\"openness\",data=data)\nplt.show()","09abceb0":"sns.lineplot(x=\"Personality\",y=\"neuroticism\",data=data)\nplt.show()","8e2542ef":"sns.lineplot(x=\"Personality\",y=\"conscientiousness\",data=data)\nplt.show()","a52c7222":"sns.lineplot(x=\"Personality\",y=\"agreeableness\",data=data)\nplt.show()","42267470":"sns.lineplot(x=\"Personality\",y=\"extraversion\",data=data)\nplt.show()","1c6760cf":"features = [\"openness\",\"neuroticism\",\"conscientiousness\",\"agreeableness\",\"extraversion\"]","15e03cc0":"corrPearson = data[features].corr(method=\"pearson\")\ncorrSpearman = data[features].corr(method=\"spearman\")","c6f432ee":"fig = plt.figure(figsize=(10,8))\nsns.heatmap(corrPearson,annot=True,cmap='RdYlGn', vmin=-1, vmax=+1)\n\nplt.title(\"Pearson Correlation\")\nplt.show()","8ac0f39e":"fig = plt.figure(figsize=(10,8))\nsns.heatmap(corrSpearman,annot=True,cmap='RdYlGn', vmin=-1, vmax=+1)\n\nplt.title(\"Pearson Correlation\")\nplt.show()","5363fe17":"for i in features:\n    print(i,\"----------\")\n    print(shapiro(data[i]))","eb558d00":"print(levene(data[\"openness\"],data[\"neuroticism\"],data[\"conscientiousness\"],\n             data[\"agreeableness\"],data[\"extraversion\"]))","b6b98e09":"encode = LabelEncoder()","b3b8126c":"columns = [\"gender\",\"Personality\"]\nfor i in columns:\n    print(data[i].value_counts())\n    print(\"----\"*30)\n    data[i] = encode.fit_transform(data[i])\n    print(data[i].value_counts())\n    print(\"----\"*30)","1d1f598e":"print(data.info())","88f087b6":"filterwarnings(\"ignore\")","56131c61":"x = data.drop(\"Personality\",axis=1)\ny = data[\"Personality\"]\nxTrain,xTest,yTrain,yTest = train_test_split(x,y,test_size=0.2,random_state=123)","96316094":"ols = sm.OLS(yTrain,xTrain).fit()\npredict = ols.predict(xTest)\nprint(ols.summary())","ee04c8ca":"lm = LinearRegression().fit(xTrain,yTrain)\npredict = lm.predict(xTest)\n\nR2CV = cross_val_score(lm,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(lm,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","57e34f89":"pca = PCA()\nxRTrain = pca.fit_transform(scale(xTrain))\nxRTest = pca.fit_transform(scale(xTest))\nlmP = LinearRegression().fit(xRTrain,yTrain)\npredict = lm.predict(xRTest)\n\nR2CV = cross_val_score(lmP,xRTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(lmP,xRTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","2de2cfd0":"pls = PLSRegression().fit(xTrain,yTrain)\npredict = pls.predict(xTest)\n\nR2CV = cross_val_score(pls,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(pls,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","30a1dee8":"for i in range(1,20):\n    plstuned = PLSRegression(n_components=i).fit(xTrain,yTrain) # best is 2\n    print(i,\"----\"*20)\n    R2CVtuned = cross_val_score(plstuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\n    print(R2CVtuned)\n    errortuned = -cross_val_score(plstuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\n    print(np.sqrt(errortuned))\n    \nplstuned = PLSRegression(n_components=2).fit(xTrain,yTrain)","72433f82":"ridge = Ridge().fit(xTrain,yTrain)\npredict = ridge.predict(xTest)\n\nR2CV = cross_val_score(ridge,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(ridge,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","7f9a2ab3":"alph = np.random.uniform(0.01,10,100)","b243af28":"cv = RidgeCV(alphas=alph,scoring=\"r2\",cv=10,normalize=True).fit(xTrain,yTrain)\nprint(cv.best_score_)\nprint(cv.alpha_)","d931b1c2":"ridgetuned = Ridge(alpha=0.05984518457368705,normalize=True).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(ridgetuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(ridgetuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","3812e599":"lasso = Lasso().fit(xTrain,yTrain)\npredict = lasso.predict(xTest)\n\nR2CV = cross_val_score(lasso,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(lasso,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","8138fc09":"cv = LassoCV(alphas=None,max_iter=1000000,normalize=True,verbose=False).fit(xTrain,yTrain)\nprint(cv.alpha_)","2567238c":"lassotuned = Lasso(alpha=0.0018064007190031926,normalize=True).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(lassotuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(lassotuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","3a059a55":"enet = ElasticNet(random_state=0).fit(xTrain,yTrain)\npredict = enet.predict(xTest)\n\nR2CV = cross_val_score(enet,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(enet,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","bd17e5b5":"cv = ElasticNetCV(alphas=None,random_state=0).fit(xTrain,yTrain)\nprint(cv.alpha_)","a90a588e":"enettuned = ElasticNet(alpha=0.026159013876672955,random_state=0).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(enettuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(enettuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","10116c07":"knnr = KNeighborsRegressor().fit(xTrain,yTrain)\npredict = knnr.predict(xTest)\n\nR2CV = cross_val_score(knnr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(knnr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","61825702":"n = {\"n_neighbors\": np.arange(1,20)}","b39edd34":"cv = GridSearchCV(knnr,n,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","450099f1":"knnrtuned = KNeighborsRegressor(n_neighbors=19).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(knnrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(knnrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","d5cd4591":"scaler = StandardScaler().fit(xTrain,yTrain)\nxRTrain = scaler.transform(xTrain)\nxRTest = scaler.transform(xTest)","9201638a":"mlpr = MLPRegressor().fit(xRTrain,yTrain)\npredict = mlpr.predict(xTest)\n\nR2CV = cross_val_score(mlpr,xRTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(mlpr,xRTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","27bbf579":"params = {\"alpha\":[0.0001,0.001,0.01,0.1,0.2],\n         \"hidden_layer_sizes\": [(20,20),(100,200,150),(300,200,250)],\n         \"activation\": [\"relu\",\"logistic\"]}","d2f450b1":"cv = GridSearchCV(mlpr,params,cv=10,verbose=False,n_jobs=-1).fit(xRTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","c4125833":"mlprtuned = MLPRegressor(activation=\"logistic\",alpha=0.01,\n                         hidden_layer_sizes=(100,200,150)).fit(xRTrain,yTrain)\n\nR2CVtuned = cross_val_score(mlprtuned,xRTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(mlprtuned,xRTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","325f4597":"cartr = DecisionTreeRegressor(random_state=42).fit(xTrain,yTrain)\npredict = cartr.predict(xTest)\n\nR2CV = cross_val_score(cartr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(cartr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","c5967e8d":"params = {\"min_samples_split\":range(2,100),\n         \"max_leaf_nodes\":range(2,10)}","fc871211":"cv = GridSearchCV(cartr,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","79850462":"cartrtuned = DecisionTreeRegressor(max_leaf_nodes=7,min_samples_split=25,random_state=42).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(cartrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(cartrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","13cb2592":"baggr = BaggingRegressor(random_state=42,bootstrap_features=True).fit(xTrain,yTrain)\npredict = baggr.predict(xTest)\n\nR2CV = cross_val_score(baggr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(baggr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","ac5acbf5":"e = {\"n_estimators\": range(2,30)}","4cb47b72":"cv = GridSearchCV(baggr,e,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","87f07b34":"baggrtuned = BaggingRegressor(random_state=42,bootstrap_features=True,\n                             n_estimators=29).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(baggrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(baggrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","6f8a8de4":"rfr = RandomForestRegressor(random_state=42).fit(xTrain,yTrain)\npredict = rfr.predict(xTest)\n\nR2CV = cross_val_score(rfr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(rfr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","37cf777b":"params = {\"max_depth\":range(1,20),\n         \"max_features\":[3,5,10,15, 20],\n         \"n_estimators\": [200,300,500,1000,2000]}","80cc2461":"cv = GridSearchCV(rfr,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","4408d414":"rfrtuned = RandomForestRegressor(random_state=42,max_depth=13,\n                                 max_features=3,n_estimators=500).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(rfrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(rfrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","0ebd59e4":"gbmr = GradientBoostingRegressor().fit(xTrain,yTrain)\npredict = gbmr.predict(xTest)\n\nR2CV = cross_val_score(gbmr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(gbmr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","94f1b733":"params = {\"learning_rate\": [0.001, 0.01, 0.1, 0.2],\n          \"max_depth\": [3, 5, 8, 10],\n          \"n_estimators\": [200, 300, 500, 1000, 2000],\n          \"subsample\": [1, 0.5, 0.75]}","70ae4a1e":"cv = GridSearchCV(gbmr,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","80dcfdef":"gbmrtuned = GradientBoostingRegressor(learning_rate=0.01,max_depth=3,\n                                      n_estimators=300,subsample=0.5).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(gbmrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(gbmrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","5ef4d080":"xgr = XGBRegressor().fit(xTrain,yTrain)\npredict = xgr.predict(xTest)\n\nR2CV = cross_val_score(xgr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(xgr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","01c86a9a":"params = {\"colsample_bytree\": [0.1, 0.5, 0.6, 0.9, 1],\n          \"n_estimators\": [100, 200, 500, 1000],\n          \"max_depth\": [2, 3, 4, 5],\n          \"learning_rate\": [0.1, 0.01, 0.5]}","b8b9c4ce":"cv = GridSearchCV(xgr,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","544d6fbd":"xgrtuned = XGBRegressor(colsample_bytree=0.5,n_estimators=1000,\n                       max_depth=5,learning_rate=0.5).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(xgrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(xgrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","7ea32991":"lgbmr = LGBMRegressor().fit(xTrain,yTrain)\npredict = lgbmr.predict(xTest)\n\nR2CV = cross_val_score(lgbmr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(lgbmr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","3f000aad":"params = {\n    \"n_estimators\": [100, 200, 500, 1000],\n    \"max_depth\": [2, 3, 4, 5, 6],\n    \"learning_rate\": [0.1, 0.01, 0.5]\n}","55387d18":"cv = GridSearchCV(lgbmr,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","1d9730e6":"lgbmrtuned = LGBMRegressor(learning_rate=0.01,max_depth=2,\n                           n_estimators=1000).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(lgbmrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(lgbmrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","e5c2dbb9":"catbr = CatBoostRegressor(verbose=False).fit(xTrain,yTrain)\npredict = catbr.predict(xTest)\n\nR2CV = cross_val_score(catbr,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CV)\nerror = -cross_val_score(catbr,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","3022220b":"params = {\"depth\": [2,3,4,5,6,7],\n         \"learning_rate\": [0.1,0.01,0.001,0.5]}","5e9edd2b":"cv = GridSearchCV(catbr,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","cf1e8f6d":"catbrtuned = CatBoostRegressor(verbose=False,depth=2,learning_rate=0.01).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(catbrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(catbrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","5a230f85":"models = [lm,lmP,plstuned,ridgetuned,lassotuned,enettuned,\n         knnrtuned,mlprtuned,cartrtuned,baggrtuned,rfrtuned,gbmrtuned,xgrtuned,lgbmrtuned,catbrtuned]","0022a5b2":"for model in models:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    accuracy = r2_score(yTest, predict)\n    print(\"-\" * 28)\n    print(name + \": \")\n    print(f\"Accuracy: {accuracy}\")","de43421b":"for model in models:\n    name = model.__class__.__name__\n    predict = model.predict(xTrain)\n    accuracy = r2_score(yTrain, predict)\n    print(\"-\" * 28)\n    print(name + \": \")\n    print(f\"Accuracy: {accuracy}\")","a31a393b":"r = pd.DataFrame(columns=[\"MODELS\",\"ACC\"])\nfor model in models:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    accuracy = r2_score(yTest, predict)\n    result = pd.DataFrame([[name,accuracy*100]],columns=[\"MODELS\",\"ACC\"])\n    r = r.append(result)\n    \nsns.barplot(x=\"ACC\",y=\"MODELS\",data=r,color=\"r\")\nplt.xlabel(\"ACC\")\nplt.xlim(0,50)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","b3f3880f":"r = pd.DataFrame(columns=[\"MODELS\",\"ACC\"])\nfor model in models:\n    name = model.__class__.__name__\n    predict = model.predict(xTrain)\n    accuracy = r2_score(yTrain, predict)\n    result = pd.DataFrame([[name,accuracy*100]],columns=[\"MODELS\",\"ACC\"])\n    r = r.append(result)\n    \nsns.barplot(x=\"ACC\",y=\"MODELS\",data=r,color=\"r\")\nplt.xlabel(\"ACC\")\nplt.xlim(0,100)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","648c6258":"lj = LogisticRegression(solver=\"liblinear\").fit(xTrain,yTrain)\npredict = lj.predict(xTest)\n\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(lj,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))\nprint(\"----\"*30)\n","39f8b7dd":"gnb = GaussianNB().fit(xTrain,yTrain)\npredict = gnb.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(gnb,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))\nprint(\"----\"*30)","28c2fda1":"knnc = KNeighborsClassifier().fit(xTrain,yTrain)\npredict = knnc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(knnc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","5164c437":"params = {\"n_neighbors\": np.arange(1,50)}","1701267e":"cv = GridSearchCV(knnc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","125d18a6":"knnctuned = KNeighborsClassifier(n_neighbors=12).fit(xTrain,yTrain)\npredicttuned = knnctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(knnctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","ab59c756":"scaler = StandardScaler().fit(xTrain, yTrain)\nxRTrain = scaler.transform(xTrain)\nxRTest = scaler.transform(xTest)","789d92ad":"mlpc = MLPClassifier().fit(xRTrain,yTrain)\npredict = mlpc.predict(xRTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(mlpc,xRTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","8754e929":"params = {\"alpha\": [0.01,0.02,0.005,0.001,0.0001],\n         \"hidden_layer_sizes\": [(3,5),(5,3),(10,10,10),(100,200,150),(100,100,100)],\n         \"activation\": [\"relu\",\"logistic\"]}","a4641373":"cv = GridSearchCV(mlpc,params,cv=10,verbose=False,n_jobs=-1).fit(xRTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","cd9b6be5":"mlpctuned = MLPClassifier(activation=\"relu\",alpha=0.001,\n                          hidden_layer_sizes=(100,200,150)).fit(xRTrain,yTrain)\npredicttuned = mlpctuned.predict(xRTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(mlpctuned,xRTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","53e6c5ec":"cartc = DecisionTreeClassifier(random_state=42).fit(xTrain,yTrain)\npredict = cartc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(cartc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","a7f2762b":"params = {\"max_depth\":range(1,20),\n         \"min_samples_split\":range(2,50)}","2d0ef06b":"cv = GridSearchCV(cartc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","8c83124d":"cartctuned = DecisionTreeClassifier(random_state=42,max_depth=3,\n                                    min_samples_split=2).fit(xTrain,yTrain)\npredicttuned = cartctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(cartctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","1e40ddd3":"rfc = RandomForestClassifier(random_state=42).fit(xTrain,yTrain)\npredict = rfc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(rfc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","f28a2102":"params = {\"max_depth\": [2, 5, 8, 10],\n          \"max_features\": [2, 5, 8],\n          \"n_estimators\": [10, 500, 1000],\n          \"min_samples_split\": [2, 5, 10]}","3135744c":"cv = GridSearchCV(rfc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","97ccf917":"rfctuned = RandomForestClassifier(random_state=42,max_depth=8,max_features=8,\n                                  min_samples_split=5,n_estimators=500).fit(xTrain,yTrain)\npredicttuned = rfctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(rfctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","ebe883a9":"gbmc = GradientBoostingClassifier().fit(xTrain,yTrain)\npredict = gbmc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(gbmc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","ee67679a":"params = {\"learning_rate\": [0.001,0.01,0.1,0.05],\n         \"max_depth\": [3,5,10],\n         \"n_estimators\": [100,300,500,1000],\n         \"min_samples_split\":[2,5,10]}","319ab112":"cv = GridSearchCV(gbmc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","6c8d3f23":"gbmctuned = GradientBoostingClassifier(learning_rate=0.01,max_depth=5,\n                                      n_estimators=500,min_samples_split=5).fit(xTrain,yTrain)\n\npredicttuned = gbmctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(gbmctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","5c35cb5f":"xgc = XGBClassifier(verbose=False).fit(xTrain,yTrain)\npredict = xgc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(xgc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","24b9fd54":"params = {\"n_estimators\": [100, 500, 1000, 2000],\n          \"subsample\": [0.6, 0.8, 1.0],\n          \"max_depth\": [3, 4, 5, 6],\n          \"learning_rate\": [0.1, 0.01, 0.02, 0.05],\n          \"min_samples_split\": [2, 5, 10]}","dce7e9e3":"cv = GridSearchCV(xgc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","36b90b60":"xgctuned = XGBClassifier(n_estimators=1000,subsample=0.8,\n                        max_depth=5,learning_rate=0.01,min_samples_split=5).fit(xTrain,yTrain)\npredicttuned = xgctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(xgctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","781f10ff":"lgbmc = LGBMClassifier().fit(xTrain,yTrain)\npredict = lgbmc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(lgbmc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","0abce49d":"params = {\"n_estimators\": [100, 500, 1000, 2000],\n          \"subsample\": [0.6, 0.8, 1.0],\n          \"max_depth\": [3, 4, 5, 6],\n          \"learning_rate\": [0.1, 0.01, 0.02, 0.05],\n          \"min_child_samples\": [5, 10, 20]}","e53bd536":"cv = GridSearchCV(lgbmc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","46856244":"lgbmctuned = LGBMClassifier(n_estimators=1000,subsample=0.8,max_depth=6,\n                           learning_rate=0.02,min_child_samples=10).fit(xTrain,yTrain)\npredicttuned = lgbmctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(lgbmctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","f8fd2039":"catbc = CatBoostClassifier(verbose=False).fit(xTrain,yTrain)\npredict = catbc.predict(xTest)\n\nprint(accuracy_score(yTest,predict))\nR2CV = cross_val_score(catbc,xTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = mean_squared_error(yTest,predict)\nprint(np.sqrt(error))","e877ef5f":"params = {\"iterations\": [200, 500],\n          \"learning_rate\": [0.01, 0.05, 0.1],\n          \"depth\": [3, 5, 8]}","c8855c7d":"cv = GridSearchCV(catbc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","c5bee6aa":"catbctuned = CatBoostClassifier(verbose=False,depth=5,iterations=200,\n                                learning_rate=0.05).fit(xTrain,yTrain)\npredicttuned = catbctuned.predict(xTest)\n\nprint(accuracy_score(yTest,predicttuned))\nR2CVtuned = cross_val_score(catbctuned,xTest,yTest,cv=10).mean()\nprint(R2CVtuned)\nerrortuned = mean_squared_error(yTest,predicttuned)\nprint(np.sqrt(errortuned))\nprint(\"----\"*30)","1be37625":"modelsC = [lj,gnb,knnctuned,mlpctuned,cartctuned,rfctuned,gbmctuned,xgctuned,lgbmctuned,catbctuned]","1de98049":"for model in modelsC:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    accuracy = accuracy_score(yTest, predict)\n    print(\"-\" * 28)\n    print(name + \": \")\n    print(f\"Accuracy: {accuracy}\")","c1a12aed":"r = pd.DataFrame(columns=[\"MODELS\",\"ACC\"])\n\nfor model in modelsC:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    accuracy = accuracy_score(yTest, predict)\n    result = pd.DataFrame([[name,accuracy*100]],columns=[\"MODELS\",\"ACC\"])\n    r = r.append(result)\n    \nsns.barplot(x=\"ACC\",y=\"MODELS\",data=r,color=\"r\")\nplt.xlabel(\"ACC\")\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","198fdc56":"# GBM C MODELS & ERROR & TUNING & PREDICT","98fee5ef":"# COMPARISON REGRESSOR FOR TRAIN VISUALIZATION","d02d4549":"# RANDOM FOREST (RF) C MODELS & ERROR & TUNING & PREDICT","0bddc62d":"# COMPARISON REGRESSOR VISUALIZATION","e9e2f8ba":"# PLS MODELS & ERROR & TUNING & PREDICT","17888ccf":"# BAGGING MODELS & ERROR & TUNING & PREDICT","6c0f55ae":"# REGRESSION TREES(CART) C MODELS & ERROR & TUNING & PREDICT","b97f5f8a":"# CATBOOST CLASSIFIER MODELS & ERROR & TUNING & PREDICT","79b80bae":"# INFORMATION","2d7c4d86":"# COMPARISON REGRESSOR","6d93d4db":"# COMPARISON REGRESSOR","1680d74d":"# PCR MODELS & ERROR & TUNING & PREDICT","48ff0196":"## Personality\n\n* Dependable - 0\n* Extraverted - 1\n* Lively - 2\n* Responsible - 3\n* Serious - 4","dcc66aeb":"# COMPARISON REGRESSOR FOR TRAIN","3ae5d154":"# GRADIENT BOOSTING MACHINES (GBM) MODELS & ERROR & TUNING & PREDICT","e9d6712e":"## Gender\n\n* Female - 0\n* Male - 1","030f7c5e":"# X & Y FOR MODELS","35e22521":"# LIGHT GRADIENT BOOSTING (LIGHT GBM) R MODELS & ERROR & TUNING & PREDICT","7343040e":"# GAUSSIAN NAIVE BAYES MODELS & ERROR & TUNING & PREDICT","1d60ee4e":"# RIDGE MODELS & ERROR & TUNING & PREDICT","4dfafad2":"# NORMALITY","bf840752":"# ENET MODELS & ERROR & TUNING & PREDICT","8c7c3c6e":"# CONVERSION","5e4696bd":"# ANN R MODELS & ERROR & TUNING & PREDICT","50091b63":"# CATEGORY BOOSTING (CATBOOST) R MODELS & ERROR & TUNING & PREDICT","2b27b22c":"# LIGHTGBM C MODELS & ERROR & TUNING & PREDICT","8d8c0fed":"# VISUALIZATION","52c51ca0":"# ANN C MODELS & ERROR & TUNING & PREDICT","1ced0b9d":"# COMPARISON REGRESSOR VISUALIZATION","d857e72f":"# KNN MODELS & ERROR & TUNING & PREDICT","07e3753c":"# REGRESSION TREES(CART) MODELS & ERROR & TUNING & PREDICT","5fdac239":"# XGBOOST C MODELS & ERROR & TUNING & PREDICT","2e1e3ed0":"# KNN C MODELS & ERROR & TUNING & PREDICT","64461786":"# OLS MODELS & ERROR & TUNING & PREDICT","7aa8117e":"# DATA","6797b003":"# RANDOM FORESTS (RF) R MODELS & ERROR & TUNING & PREDICT","c2a50e68":"# HOMOGENEITY","e780ed1f":"# EXTREME GRADIENT BOOSTING (XGBOOST) R MODELS & ERROR & TUNING & PREDICT","2dba6c18":"# LINEAR MODELS & ERROR & TUNING & PREDICT","5baecc0a":"# LOGISTIC REGRESSION MODELS & ERROR & TUNING & PREDICT","8e123cd0":"# LASSO MODELS & ERROR & TUNING & PREDICT","b60502fb":"# CORRELATION VISUALIZATION "}}