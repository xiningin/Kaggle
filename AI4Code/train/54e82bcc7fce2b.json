{"cell_type":{"4b28884c":"code","94e02618":"code","fc82c79d":"code","af3b8553":"code","21a34b02":"code","9d302387":"code","dd38d4d9":"code","a9731655":"code","0e215e41":"code","45597204":"code","e7e2f03d":"code","539afd14":"code","3d0d2780":"code","8b9914d3":"code","0dbdfee3":"code","8b632a26":"code","abbf7b56":"code","848952dd":"code","d0c4a306":"code","0ae74e0c":"code","f2968122":"code","b245d197":"code","e5a40a5c":"code","4a0390c4":"code","272ec8ec":"code","f8a9efa4":"code","cdc9d075":"code","a0359f53":"code","8a2b5f92":"code","8f5f879c":"code","ecb201ee":"code","ad7b1cb1":"code","1343ffd5":"code","dc43f201":"code","8d97c73e":"code","a6b9dbb7":"code","085ee6e7":"code","b33afc77":"code","f4bcddd1":"code","77f919fb":"code","96a7f658":"code","8c10c00e":"code","47a945c6":"code","9ae99919":"code","bca8a000":"code","c6317748":"code","cd2e5037":"code","84bdfcfe":"code","4ae85c5d":"code","3882a5a8":"code","4be200ad":"code","4a13f19c":"code","5699db94":"code","b7993ecc":"code","517a6f82":"code","cfa7b41d":"code","6577f0d0":"code","197a3b5d":"code","d8229600":"code","a5efd3fd":"code","d8fb36dc":"code","54cd296b":"code","a02c1f16":"code","f679d3b9":"code","e9751041":"code","7c530319":"code","2fccdf72":"code","2d5ee368":"code","9e207d27":"code","b5409e49":"code","d4854f2f":"code","4aca2bac":"code","18b34d29":"code","65799f16":"code","ae361b2f":"markdown","4f2b977c":"markdown","5d80d483":"markdown","67dd72b4":"markdown","7da63182":"markdown"},"source":{"4b28884c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = \"retina\"\n# this sets the backend of matplotlib to the 'inline backend' \n#   that is graphs will be included in the notebool, next to code. \n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport cufflinks as cf\n\n#In order to display the plot inside the notebook,  initiate plotly\u2019s notebook\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94e02618":"#getting all the datasets into variables \nglobal_temp = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')\nglobal_temp.head()\nprint(global_temp.dtypes)","fc82c79d":"global_temp['dt'] = pd.to_datetime(global_temp['dt'])\nglobal_temp.info()","af3b8553":"global_temp.index","21a34b02":"global_temp = pd.read_csv(\"\/kaggle\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv\")\nglobal_temp_by_country = pd.read_csv(\"\/kaggle\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\")","9d302387":"#lets now create new months and years cols\n\n\nglobal_temp[\"dt\"] = pd.to_datetime(global_temp[\"dt\"])\nglobal_temp[\"Month\"] = global_temp[\"dt\"].dt.month\nglobal_temp[\"Year\"] = global_temp[\"dt\"].dt.year\nglobal_temp = global_temp.drop(\"dt\", axis = 1)\nglobal_temp = global_temp[global_temp.Year >= 1900]","dd38d4d9":"global_temp_by_country[\"dt\"] = pd.to_datetime(global_temp_by_country[\"dt\"])\nglobal_temp_by_country[\"Month\"] = global_temp_by_country[\"dt\"].dt.month\nglobal_temp_by_country[\"Year\"] = global_temp_by_country[\"dt\"].dt.year\nglobal_temp_by_country = global_temp_by_country.drop(\"dt\", axis = 1)\nglobal_temp_by_country = global_temp_by_country[global_temp_by_country.Year >= 1900]","a9731655":"global_temp.isnull().sum().sort_values(ascending = False).head(3)\nglobal_temp_by_country.isnull().sum().sort_values(ascending = False).head(3)\nglobal_temp_by_country= global_temp_by_country.dropna()\nprint(global_temp_by_country.isnull().sum().sort_values(ascending = False).head(3))\nprint(global_temp_by_country.shape)","0e215e41":"global_temp.describe()","45597204":"global_temp_by_state = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByState.csv')\nglobal_temp_by_state.head()\nglobal_temp_by_country = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv')\nglobal_temp_by_country.head()\nglobal_temp_by_city = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCity.csv')\nglobal_temp_by_city.head()\nglobal_temp_by_major_city = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByMajorCity.csv')\nglobal_temp_by_major_city.head()","e7e2f03d":"global_temp_by_state['dt'] = pd.to_datetime(global_temp_by_state['dt'])\nglobal_temp_by_state.info()\n#global_temp_by_country['dt'] = pd.to_datetime(global_temp_by_country['dt'])\n#global_temp_by_country.info()\nglobal_temp_by_city['dt'] = pd.to_datetime(global_temp_by_city['dt'])\nglobal_temp_by_city.info()\nglobal_temp_by_major_city['dt'] = pd.to_datetime(global_temp_by_major_city['dt'])\nglobal_temp_by_major_city.info()","539afd14":"global_temp_by_state.set_index('dt', inplace=True)\nglobal_temp_by_country.set_index('dt', inplace=True)\nglobal_temp_by_city.set_index('dt', inplace=True)\nglobal_temp_by_major_city.set_index('dt', inplace=True)\nglobal_temp_by_major_city.index","3d0d2780":"global_temp.shape,global_temp_by_state.shape, global_temp_by_country.shape, global_temp_by_city.shape, global_temp_by_major_city.shape","8b9914d3":"global_temp.isna().sum()","0dbdfee3":"india_temp = global_temp_by_country[global_temp_by_country['Country']=='India']\nindia_temp.head()\nindia_temp.reset_index()","8b632a26":"temp = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv')\nnew_df = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')\nnew_df['year'] = pd.to_datetime( new_df['dt']).dt.year # Converting date into year and making new column.\n\nby_new = new_df.groupby(['year'] )['LandAverageTemperature'].mean().reset_index()\nnew_pivot = by_new.pivot_table(values='LandAverageTemperature',index='year')\nnew_pivot.iplot(kind='scatter')","abbf7b56":"india = temp[temp['Country']=='India']\nindia['year'] = pd.to_datetime(india['dt']).dt.year\n\nnew_india = india.groupby('year')['AverageTemperature'].mean().reset_index()\nnew_india.iplot(kind='scatter', x='year', y='AverageTemperature', title='Temperature trend in India',\n               xTitle='Year', yTitle='Temperature')\n","848952dd":"df_state = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByState.csv')\nstate = df_state[df_state['Country']=='India']\nstate = state.groupby('State')['AverageTemperature'].mean().reset_index()\nstate.sort_values('AverageTemperature',inplace=True, )\nstate = state[:10]\nstate.iplot(kind='bar', x='State', y='AverageTemperature', title='Top 10 Coolest States',\n           xTitle='State', yTitle='Temperature', color='Red')","d0c4a306":"state = df_state[df_state['Country']=='India']\nstate = state.groupby('State')['AverageTemperature'].mean().reset_index()\nstate.sort_values('AverageTemperature',inplace=True, ascending=False)\nstate = state[:10]\nstate.iplot(kind='bar', x='State', y='AverageTemperature', title='Top 10 Hotest States',\n           xTitle='State', yTitle='Temperature')","0ae74e0c":"df_city = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByMajorCity.csv')\ntemp_df = df_city[df_city['Country']== 'India']\ntemp_df.head()","f2968122":"print(temp_df.City.unique())","b245d197":"temp_df = df_city[df_city['City']== 'Madras']\ntemp_df['year'] = pd.to_datetime(temp_df['dt']).dt.year\n\nby_year = temp_df.groupby('year')['AverageTemperature'].mean().reset_index()\nby_year.iplot(kind='scatter', x='year', y='AverageTemperature', title='Temperature trend of Chennai City (formerly known as Madras)',\n             xTitle='Year', yTitle='Temperature', legend=True)","e5a40a5c":"global_temp = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')\nglobal_temp = global_temp[['dt', 'LandAverageTemperature']]\n\nglobal_temp['dt'] = pd.to_datetime(global_temp['dt'])\nglobal_temp['year'] = global_temp['dt'].map(lambda x: x.year)\nglobal_temp['month'] = global_temp['dt'].map(lambda x: x.month)\n\n#getting the season month wise\ndef get_season(month):\n    if month >= 3 and month <= 5:\n        return 'spring'\n    elif month >= 6 and month <= 8:\n        return 'summer'\n    elif month >= 9 and month <= 11:\n        return 'autumn'\n    else:\n        return 'winter'\n    \nmin_year = global_temp['year'].min()\nmax_year = global_temp['year'].max()\nyears = range(min_year, max_year + 1)\n\nglobal_temp['season'] = global_temp['month'].apply(get_season)\n\nspring_temps = []\nsummer_temps = []\nautumn_temps = []\nwinter_temps = []\n\nfor year in years:\n    curr_years_data = global_temp[global_temp['year'] == year]\n    spring_temps.append(curr_years_data[curr_years_data['season'] == 'spring']['LandAverageTemperature'].mean())\n    summer_temps.append(curr_years_data[curr_years_data['season'] == 'summer']['LandAverageTemperature'].mean())\n    autumn_temps.append(curr_years_data[curr_years_data['season'] == 'autumn']['LandAverageTemperature'].mean())\n    winter_temps.append(curr_years_data[curr_years_data['season'] == 'winter']['LandAverageTemperature'].mean())\nsns.set(style=\"whitegrid\")\nsns.set_color_codes(\"pastel\")\nf, ax = plt.subplots(figsize=(10, 6))\n\n#plotting with different colors to easily differentiate.\nplt.plot(years, summer_temps, label='Summers average temperature', color='orange')\nplt.plot(years, autumn_temps, label='Autumns average temperature', color='r')\nplt.plot(years, spring_temps, label='Springs average temperature', color='g')\nplt.plot(years, winter_temps, label='Winters average temperature', color='b')\n\nplt.xlim(min_year, max_year)\n\nax.set_ylabel('Average temperature')\nax.set_xlabel('Year')\nax.set_title('Average temperature in each season')\nlegend = plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), frameon=True, borderpad=1, borderaxespad=1)","4a0390c4":"global_temp = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv\")\nglobal_temp[\"dt\"] = pd.to_datetime(global_temp[\"dt\"])\nannual_mean_global = global_temp.groupby(global_temp[\"dt\"].dt.year).mean()","272ec8ec":"global_temp_by_country = global_temp_by_country.sort_values('AverageTemperature')\nbins =  np.arange(-38, 38, 5)\nind = np.digitize(global_temp_by_country['AverageTemperature'],bins)\n    \nglobal_temp_by_country.groupby(ind).head() ","f8a9efa4":"global_temp.describe()","cdc9d075":"import warnings\nwarnings.filterwarnings('ignore')","a0359f53":"#Open the file and saving th data into a dataframe df, then later seleect the rows with country india on them.\ndf = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\", index_col=0, parse_dates=True)\ndf = df.loc[(df.Country==\"India\")|(df.Country==\"China\")]\n# Cleaning process - Drop the rows in which the average temperature is not available\ndf = df.dropna(subset = [\"AverageTemperature\"])","8a2b5f92":"df.head()\ndf.tail()","8f5f879c":"df.shape","ecb201ee":"col_names = df.columns\ncol_names","ad7b1cb1":"#getting the season month wise\ndef get_target(Country):\n    if Country==\"India\":\n        return 1\n    else:\n        return 0\n    \ndf['target'] = df['Country'].apply(get_target)","1343ffd5":"col_names = df.columns\ncol_names","dc43f201":"df.head()","8d97c73e":"df.describe()","a6b9dbb7":"plt.subplot(2, 1, 1)\nfig = df.boxplot(column='AverageTemperature')\nfig.set_title('')\nfig.set_ylabel('AT')\n\n\nplt.subplot(2, 1, 2)\nfig = df.boxplot(column='AverageTemperatureUncertainty')\nfig.set_title('')\nfig.set_ylabel('AT Uncrtnty')","085ee6e7":"plt.figure(figsize=(24,20))\n\n\nplt.subplot(2, 1, 1)\nfig = df['AverageTemperature'].hist(bins=20)\nfig.set_xlabel('AT')\n#fig.set_ylabel('')\n\n\nplt.subplot(2, 1, 2)\nfig = df['AverageTemperatureUncertainty'].hist(bins=20)\nfig.set_xlabel('AT - U')","b33afc77":"X = df.drop(['target'], axis=1)\nX = df.drop(['Country'],axis=1)\n\ny = df['target']","f4bcddd1":"# split X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\nX_train.shape, X_test.shape","77f919fb":"cols = X_train.columns\nfrom sklearn.preprocessing import StandardScaler\n# import SVC classifier\nfrom sklearn.svm import SVC\n\n\n# import metrics to compute accuracy\nfrom sklearn.metrics import accuracy_score","96a7f658":"scaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\n\nX_test = scaler.transform(X_test)","8c10c00e":"X_train = pd.DataFrame(X_train, columns=[cols])","47a945c6":"X_test = pd.DataFrame(X_test, columns=[cols])","9ae99919":"X_train.describe()","bca8a000":"# instantiate classifier with default hyperparameters\nsvc=SVC() \n\n# fit classifier to training set\nsvc.fit(X_train,y_train)\n\n# make predictions on test set\ny_pred=svc.predict(X_test)\n\n# compute and print accuracy score\nprint('Model accuracy score with default hyperparameters: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","c6317748":"# instantiate classifier with rbf kernel and C=100\nsvc=SVC(C=100.0) \n\n\n# fit classifier to training set\n\nsvc.fit(X_train,y_train)\n\n\n# make predictions on test set\ny_pred=svc.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with rbf kernel and C=100.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","cd2e5037":"# instantiate classifier with rbf kernel and C=1000\nsvc=SVC(C=1000.0) \n\n\n# fit classifier to training set\nsvc.fit(X_train,y_train)\n\n\n# make predictions on test set\ny_pred=svc.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with rbf kernel and C=1000.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","84bdfcfe":"# instantiate classifier with linear kernel and C=1.0\nlinear_svc=SVC(kernel='linear', C=1.0) \n\n\n# fit classifier to training set\nlinear_svc.fit(X_train,y_train)\n\n\n# make predictions on test set\ny_pred_test=linear_svc.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with linear kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_test)))","4ae85c5d":"#instantiate classifier with linear kernel and C=100.0\nlinear_svc100=SVC(kernel='linear', C=100.0) \n\n\n# fit classifier to training set\nlinear_svc100.fit(X_train, y_train)\n\n\n# make predictions on test set\ny_pred=linear_svc100.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with linear kernel and C=100.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","3882a5a8":"# instantiate classifier with linear kernel and C=100.0\nlinear_svc100=SVC(kernel='linear', C=100.0) \n\n\n# fit classifier to training set\nlinear_svc100.fit(X_train, y_train)\n\n\n# make predictions on test set\ny_pred=linear_svc100.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with linear kernel and C=100.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","4be200ad":"y_pred_train = linear_svc.predict(X_train)\n\ny_pred_train","4a13f19c":"print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))","5699db94":"print('Training set score: {:.4f}'.format(linear_svc.score(X_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(linear_svc.score(X_test, y_test)))","b7993ecc":"# check class distribution in test set\n\ny_test.value_counts()","517a6f82":"# check null accuracy score\n\nnull_accuracy = (493\/(493+449))\n\nprint('Null accuracy score: {0:0.4f}'. format(null_accuracy))","cfa7b41d":"# instantiate classifier with polynomial kernel and C=1.0\npoly_svc=SVC(kernel='poly', C=1.0) \n\n\n# fit classifier to training set\npoly_svc.fit(X_train,y_train)\n\n\n# make predictions on test set\ny_pred=poly_svc.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with polynomial kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","6577f0d0":"# instantiate classifier with polynomial kernel and C=100.0\npoly_svc100=SVC(kernel='poly', C=100.0) \n\n\n# fit classifier to training set\npoly_svc100.fit(X_train, y_train)\n\n\n# make predictions on test set\ny_pred=poly_svc100.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with polynomial kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","197a3b5d":"#instantiate classifier with sigmoid kernel and C=1.0\nsigmoid_svc=SVC(kernel='sigmoid', C=1.0) \n\n\n# fit classifier to training set\nsigmoid_svc.fit(X_train,y_train)\n\n\n# make predictions on test set\ny_pred=sigmoid_svc.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with sigmoid kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","d8229600":"# instantiate classifier with sigmoid kernel and C=100.0\nsigmoid_svc100=SVC(kernel='sigmoid', C=100.0) \n\n\n# fit classifier to training set\nsigmoid_svc100.fit(X_train,y_train)\n\n\n# make predictions on test set\ny_pred=sigmoid_svc100.predict(X_test)\n\n\n# compute and print accuracy score\nprint('Model accuracy score with sigmoid kernel and C=100.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","a5efd3fd":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred_test)\n\nprint('Confusion matrix\\n\\n', cm)\n\nprint('\\nTrue Positives(TP) = ', cm[0,0])\n\nprint('\\nTrue Negatives(TN) = ', cm[1,1])\n\nprint('\\nFalse Positives(FP) = ', cm[0,1])\n\nprint('\\nFalse Negatives(FN) = ', cm[1,0])","d8fb36dc":"# visualize confusion matrix with seaborn heatmap\n\ncm_matrix = pd.DataFrame(data=cm, columns=['Actual Positive:1', 'Actual Negative:0'], \n                                 index=['Predict Positive:1', 'Predict Negative:0'])\n\nsns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')","54cd296b":"# plot ROC Curve\n\nfrom sklearn.metrics import roc_curve\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_test)\n\nplt.figure(figsize=(6,4))\n\nplt.plot(fpr, tpr, linewidth=2)\n\nplt.plot([0,1], [0,1], 'k--' )\n\nplt.rcParams['font.size'] = 12\n\nplt.title('ROC curve for the classifier')\n\nplt.xlabel('False Positive Rate (1 - Specificity)')\n\nplt.ylabel('True Positive Rate (Sensitivity)')\n\nplt.show()","a02c1f16":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","f679d3b9":"import fbprophet","e9751041":"print('Prophet %s' % fbprophet.__version__)","7c530319":"# load the temperature dataset, if starting from here. Else skip it.\nfrom pandas import read_csv\ndf = read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv', header=0)\ndf=df.iloc[:,:-1]\n# getting the number of rows and cols \nprint(df.shape)\n\n#display a few values frm the last.\nprint(df.tail())","2fccdf72":"# fit prophet model on Temperature dataset\nfrom pandas import read_csv\nfrom pandas import to_datetime\nfrom fbprophet import Prophet\n# load data\npath = '..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv'\ndf = read_csv(path, header=0)\ndf=df.iloc[:,:-2]\n# prepare expected column names\ndf.columns = ['ds', 'y']\ndf['ds']= to_datetime(df['ds'])\ndf.head()\ndf.dropna(inplace=True)\ndf.head()\nprint(df.shape)\ndf=df.iloc[:50000,:]","2d5ee368":"# define the model\nmodel = Prophet()\n# fit the model\nmodel.fit(df)","9e207d27":"future = list()\nfor i in range(1, 13):\n\tdate = '2025-%02d' % i\n\tfuture.append([date])\nfuture = pd.DataFrame(future)\nfuture.columns = ['ds']\nfuture['ds']= to_datetime(future['ds'])","b5409e49":"# summarize the forecast\nforecast = model.predict(future)\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())","d4854f2f":"# calculate MAE between expected and predicted values for december\nfrom sklearn.metrics import mean_absolute_error\ny_true = df['y'][-12:].values\ny_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)","4aca2bac":"global_temp_by_major_city.index","18b34d29":"global_temp_by_major_city = global_temp_by_major_city.reset_index()\nglobal_temp_by_major_city.index","65799f16":"plt.figure()\nx = pd.to_datetime(global_temp_by_major_city.dt[:], format='%Y-%m-%d', errors='ignore').dt.year\nplt.subplot(221) \nplt.title('Before 1900')\nplt.boxplot([global_temp_by_major_city.AverageTemperature[x<1900][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Madras\"].dropna().values,\n             global_temp_by_major_city.AverageTemperature[x<1900][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Delhi\"].dropna().values,\n            global_temp_by_major_city.AverageTemperature[x<1900][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Bangalore\"].dropna().values]\n            ,0,'kd',1,1)\nplt.axis([0,4,-25, 35])\nplt.xticks([1, 2, 3], ['Chn', 'Dlh', 'Bnglr'])\nplt.subplot(222) \nplt.title('1900-2000')\nplt.boxplot([global_temp_by_major_city.AverageTemperature[x>=1900][x<2000][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Madras\"].dropna().values,\n             global_temp_by_major_city.AverageTemperature[x>=1900][x<2000][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Delhi\"].dropna().values,\n            global_temp_by_major_city.AverageTemperature[x>=1900][x<2000][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Bangalore\"].dropna().values]\n            ,0,'kd',1,1)\nplt.axis([0,4,-25, 35])\nplt.xticks([1, 2, 3], ['Chn', 'Dlh', 'Bnglr'])\nplt.subplot(223) \nplt.title('2000-2008')\nplt.boxplot([global_temp_by_major_city.AverageTemperature[x>=2000][x<2008][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Madras\"].dropna().values,\n             global_temp_by_major_city.AverageTemperature[x>=2000][x<2008][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Delhi\"].dropna().values,\n            global_temp_by_major_city.AverageTemperature[x>=2000][x<2008][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Bangalore\"].dropna().values]\n            ,0,'kd',1,1)\nplt.axis([0,4,-25, 35])\nplt.xticks([1, 2, 3], ['Chn', 'Dlh', 'Bnglr'])\nplt.subplot(224) \nplt.title('After 2008')\nplt.boxplot([global_temp_by_major_city.AverageTemperature[x>=2008][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Madras\"].dropna().values,\n             global_temp_by_major_city.AverageTemperature[x>=2008][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Delhi\"].dropna().values,\n            global_temp_by_major_city.AverageTemperature[x>=2008][global_temp_by_major_city.Country==\"India\"][global_temp_by_major_city.City==\"Bangalore\"].dropna().values]\n            ,0,'kd',1,1)\nplt.axis([0,4,-25, 35])\nplt.xticks([1, 2, 3], ['Chn', 'Dlh', 'Bnglr'])\nplt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.4,\n                    wspace=0.3)\n","ae361b2f":"Box Plot","4f2b977c":"SVM algorithm","5d80d483":"Phophet algorithm\n","67dd72b4":"correlation algorithm","7da63182":"sample"}}