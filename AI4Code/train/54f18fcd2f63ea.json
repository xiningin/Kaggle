{"cell_type":{"2cdf91a8":"code","e72d2fab":"code","bf006fe8":"code","cc79c878":"code","939deb0a":"code","70044fe5":"code","bc2de173":"code","230783d9":"code","4cf64ce5":"code","1eb9011d":"code","e0907d7d":"code","479df9c3":"code","3cfda8ff":"code","72cf235f":"code","a4c4e6d5":"code","4ae2fad6":"code","a979c2b9":"markdown","e5104ce8":"markdown","7de26bdc":"markdown","fca0d6eb":"markdown","394fe2ed":"markdown"},"source":{"2cdf91a8":"import pandas as pd\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.optimize import minimize\nfrom itertools import permutations\n\nfrom time import time\n\nfrom tqdm import tqdm\n\n%matplotlib inline\nsns.set(color_codes=True)","e72d2fab":"pitches = pd.read_csv('..\/input\/pitches.csv')\natbats = pd.read_csv('..\/input\/atbats.csv', index_col='ab_id')\nej = pd.read_csv('..\/input\/ejections.csv')\ngames = pd.read_csv('..\/input\/games.csv', index_col='g_id')","bf006fe8":"balls_strikes_ejs = ej[~(ej['BS'].isna())].groupby('g_id').head(n=1)\nballs_strikes_ejs = balls_strikes_ejs.set_index('g_id')\nballs_strikes_ejs.rename(columns={'event_num': 'ej_event_num', \n                                  'ab_id': 'ej_ab_id'}, inplace=True)\nballs_strikes_ejs.head()\n\npitches.dropna(inplace=True)\ncalled_pitches = pitches[pitches.code.isin(['C', 'B'])].copy()\ncalled_pitches['k'] = (called_pitches.code=='C').astype(int)\ncalled_pitches = called_pitches[(called_pitches.k == 0) | \n                                ((np.abs(called_pitches.px) < 2) & (called_pitches.pz > 0.2) &\n                                 (called_pitches.pz < 4.5))]\ncalled_pitches = called_pitches.join(atbats, on='ab_id')\n\nej_pitches = called_pitches[['pz', 'px', 'ab_id', 'code', 'k',\n                             'event_num', 'top', 'g_id', \n                             'stand', 'p_throws']].join(balls_strikes_ejs, how='right', on='g_id')\nej_pitches['d'] = ej_pitches.ej_event_num - ej_pitches.event_num\nej_pitches['after_ej'] = ej_pitches.d < 0\nej_pitches['ej_team_batting'] = ~(ej_pitches.top == ej_pitches.is_home_team)","cc79c878":"ej_pitches.head()","939deb0a":"class multi_logistic():\n    def __init__(self):\n        self.bounds = [1.3, 3.5, -1, 1]\n        self.coef = [8, 10, 10, 10]\n        self.corner_coef = [1, 1, 1, 1]\n        self.trained = False\n        \n    def predict(self, X, bounds=None, coef=None, corner_coef=None):\n        if bounds is None:\n            bounds = self.bounds\n        if coef is None:\n            coef = self.coef\n        if corner_coef is None:\n            corner_coef = self.corner_coef\n        mid_x = (self.bounds[2] + self.bounds[3])\/2\n        mid_y = (self.bounds[0] + self.bounds[1])\/2\n        log_odds = [-((bounds[0] - X[:, 1])*coef[0] + ((X[:,0] - mid_x)**2)*corner_coef[0]) , \n                (bounds[1] - X[:, 1])*coef[1] - ((X[:, 0] - mid_x)**2)*corner_coef[1],\n                -((bounds[2] - X[:, 0])*coef[2] + (X[:,1] - mid_y)**2)*corner_coef[2],\n                (bounds[3] - X[:, 0])*coef[3] - ((X[:,1] - mid_y)**2)*corner_coef[3]]\n\n        odds = [np.exp(l) for l in log_odds]\n        probs = [o\/(o + 1) for o in odds]\n        return probs[0] * probs[1] * probs[2] * probs[3]\n    \n    def eval(self, X, y, bounds=None, coef=None, corner_coef=None): \n\n        if bounds is None:\n            bounds = self.bounds\n        if coef is None:\n            coef = self.coef\n        if corner_coef is None:\n            corner_coef = self.corner_coef\n\n        preds = self.predict(X, bounds=bounds, coef=coef, corner_coef=corner_coef)\n        scores = -np.log(1 - np.abs(y - preds))\n        return scores\n        #return np.minimum(scores, np.ones(scores.shape)*100)\n        \n    def fit(self, X, y, solver_method='SLSQP'):\n        func = lambda p: np.mean(self.eval(X, y, bounds=p[:4], coef=p[4:8], corner_coef=p[8:]))\n        results = minimize(func, x0=self.bounds+self.coef+self.corner_coef, \n                           method=solver_method, options={'ftol': 0.0005})\n        self.bounds = list(results.x[:4])\n        self.coef = list(results.x[4:8])\n        self.corner_coef = list(results.x[8:])\n        self.trained = True\n        \n        return self\n    \n","70044fe5":"xlims = [-2, 2]\nylims = [1, 4]\n\ndef fit_kn(df, n=150):\n    mdl = KNeighborsClassifier(n_neighbors=n)\n    mdl.fit(df[['px', 'pz']], df.k.astype(int))\n    return mdl\n\ndef fit_mdl(df, mtype, **kwargs):\n    X, y = df[['px', 'pz']].values, df['k'].values\n    if mtype == 'knn':\n        n = kwargs.get('n', 150)\n        return KNeighborsClassifier(n_neighbors=n).fit(X, y)\n    elif mtype == 'logistic':\n        return multi_logistic().fit(X, y)\n    else:\n        raise ValueError('mtype not recognized')\n\ndef find_zone_stats(mdl, res=0.05):\n    xx, yy = np.meshgrid(np.arange(xlims[0], xlims[1], res),\n                     np.arange(ylims[0], ylims[1], res))  \n    try:\n        preds = mdl.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:,1]\n    except:\n        preds = mdl.predict(np.c_[xx.ravel(), yy.ravel()])\n        \n    zone_size = preds.sum()*(res**2)*144\n    boundary_size = (((-(np.abs(preds - 0.5)) + 0.5)*2)**2).sum()*(res**2)*144\n    return zone_size, boundary_size\n\ndef plot_zone(mdl, res=0.05):\n    xx, yy = np.meshgrid(np.arange(xlims[0], xlims[1], res),\n                     np.arange(ylims[0], ylims[1], res))  \n    try:\n        preds = mdl.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:,1]\n    except:\n        preds = mdl.predict(np.c_[xx.ravel(), yy.ravel()])\n    plt.imshow(preds.reshape(xx.shape), extent=[xlims[0], xlims[1], ylims[0], ylims[1]], cmap='bwr', origin='lower')\n    return preds.reshape(xx.shape), [xlims[0], xlims[1], ylims[0], ylims[1]]\n\n\ndef describe_plot_zone(df, res=0.05, n=150, mtype=None):\n    if mtype=='knn':\n        mdl = fit_kn(df, n=n)\n    elif mtype=='logistic':\n        mdl = multi_logistic()\n        mdl.fit(df[['px', 'pz']].values, df['k'].values)\n    img, ext = plot_zone(mdl, res=res)\n    zone_size, boundary_size = find_zone_stats(mdl, res=res)\n    if mtype=='logistic':\n        x = mdl.bounds\n        plt.plot([x[2], x[3]], [x[0], x[0]], '-k') \n        plt.plot([x[2], x[3]], [x[1], x[1]], '-k') \n        plt.plot([x[2], x[2]], [x[0], x[1]], '-k') \n        plt.plot([x[3], x[3]], [x[0], x[1]], '-k') \n    plt.show()\n    print('Zone is {:6.1f} in^2, with weighted boundary of {:6.1f} in^2'.format(zone_size, boundary_size))\n    return img, ext, mdl\n    ","bc2de173":"after_ej_dict = {False: 'Before ejection', True: 'After ejection'}\nej_team_dict = {True: \"Team ejected\", False: \"Other team\"}\nzs = []\nzb = []\nmanagers_team_batting = []\nafter_ejection = []\nzbounds = []\ncoefs = []\ncorner_coefs = []\nfor g in ej_pitches[ej_pitches.stand=='R'].groupby(['after_ej', 'ej_team_batting']):\n    print(after_ej_dict[g[0][0]],'\\n', ej_team_dict[g[0][1]])\n    print('Based on {} pitches'.format(len(g[1])))\n\n    for i in tqdm(range(10000)):\n        mdl = fit_mdl(g[1].sample(len(g[1]), replace=True), mtype='logistic', n=int(np.sqrt(len(g[1]))\/4))\n        zsize, zbound = find_zone_stats(mdl)\n        zbounds.append(mdl.bounds)\n        coefs.append(mdl.coef)\n        corner_coefs.append(mdl.corner_coef)\n        zs.append(zsize)\n        zb.append(zbound)\n        after_ejection.append(after_ej_dict[g[0][0]])\n        managers_team_batting.append(ej_team_dict[g[0][1]])\n        \nzbounds = np.array(zbounds)\nlogistic_panel = pd.DataFrame(dict(zone_size=zs, zb=zb, after_ejection=after_ejection, \n                                   team_batting=managers_team_batting, zbot=zbounds[:,0],\n                                   ztop=zbounds[:,1], zleft=zbounds[:,2], zright=zbounds[:,3]))","230783d9":"g = sns.catplot(data=logistic_panel, x='after_ejection', hue='team_batting', y='zone_size', \n                kind='box', orient='v', showfliers=False)\ng.set(xlabel='')\ng.set(ylabel=r'Zone Size (in^2)')\ng._legend.set_title('Team Batting')\nplt.savefig('logistic_boxplot_zonesize.png')","4cf64ce5":"logistic_panel['i'] = np.tile(range(10000), 4)\nlogistic_panel['combined'] = logistic_panel.apply(lambda x: x.team_batting + ' ' + x.after_ejection, axis=1)\nlogistic_pivoted_size = logistic_panel.pivot(index='i', columns='combined', values='zone_size')\n\nprint('Comparing Zone Sizes')\nfor p in permutations(list(logistic_pivoted_size.columns), 2):\n    data = logistic_pivoted_size[p[1]] - logistic_pivoted_size[p[0]]\n    p_val = np.mean(data>0)\n    if p_val <= 0.5:\n        print(p[0], np.mean(logistic_pivoted_size[p[0]]), \n              p[1], np.mean(logistic_pivoted_size[p[1]]), p_val)","1eb9011d":"g = sns.catplot(data=logistic_panel, x='after_ejection', hue='team_batting', y='zb', \n                kind='box', orient='v', showfliers=False)\ng.set(xlabel='')\ng.set(ylabel=r'Zone Size (in^2)')\ng._legend.set_title('Team Batting')\nplt.savefig('logistic_boxplot_boundary.png')","e0907d7d":"logistic_pivoted_boundary = logistic_panel.pivot(index='i', columns='combined', values='zb')\n\nprint('Comparing Zone Sizes')\nfor p in permutations(list(logistic_pivoted_boundary.columns), 2):\n    data = logistic_pivoted_boundary[p[1]] - logistic_pivoted_boundary[p[0]]\n    p_val = np.mean(data>0)\n    if p_val <= 0.5:\n        print(p[0], np.mean(logistic_pivoted_boundary[p[0]]), \n              p[1], np.mean(logistic_pivoted_boundary[p[1]]), p_val)","479df9c3":"after_ej_dict = {False: 'Before ejection', True: 'After ejection'}\nej_team_dict = {True: \"Team ejected\", False: \"Other team\"}\nzs = []; zb = [];\nmanagers_team_batting = []\nafter_ejection = []\nfor g in ej_pitches[ej_pitches.stand=='R'].groupby(['after_ej', 'ej_team_batting']):\n    print(after_ej_dict[g[0][0]],'\\n', ej_team_dict[g[0][1]])\n    print('Based on {} pitches'.format(len(g[1])))\n\n    for i in tqdm(range(10000)):\n        mdl = fit_mdl(g[1].sample(len(g[1]), replace=True), mtype='knn', n=int(np.sqrt(len(g[1]))\/4))\n        zsize, zbound = find_zone_stats(mdl)\n        zs.append(zsize)\n        zb.append(zbound)\n        after_ejection.append(after_ej_dict[g[0][0]])\n        managers_team_batting.append(ej_team_dict[g[0][1]])\n        \nknn_panel = pd.DataFrame(dict(zone_size=zs, zb=zb, after_ejection=after_ejection, \n                              team_batting=managers_team_batting))","3cfda8ff":"g = sns.catplot(data=knn_panel, x='after_ejection', hue='team_batting', y='zone_size', \n                kind='box', orient='v', showfliers=False)\ng.set(xlabel='')\ng.set(ylabel=r'Zone Size (in^2)')\ng._legend.set_title('Team Batting')\nplt.savefig('knn_boxplot_zonesize.png')","72cf235f":"knn_panel['i'] = np.tile(range(10000), 4)\nknn_panel['combined'] = knn_panel.apply(lambda x: x.team_batting + ' ' + x.after_ejection, axis=1)\nknn_pivoted_size = knn_panel.pivot(index='i', columns='combined', values='zone_size')\n\nprint('Comparing Zone Sizes')\nfor p in permutations(list(knn_pivoted_size.columns), 2):\n    data = knn_pivoted_size[p[1]] - knn_pivoted_size[p[0]]\n    p_val = np.mean(data>0)\n    if p_val <= 0.5:\n        print(p[0], np.mean(knn_pivoted_size[p[0]]), p[1], \n              np.mean(knn_pivoted_size[p[1]]), p_val)","a4c4e6d5":"g = sns.catplot(data=knn_panel, x='after_ejection', hue='team_batting', y='zb', \n                kind='box', orient='v', showfliers=False)\ng.set(xlabel='')\ng.set(ylabel=r'Zone Boundary (in^2)')\ng._legend.set_title('Team Batting')\nplt.savefig('knn_boxplot_boundary.png')","4ae2fad6":"\nknn_pivoted_boundary = knn_panel.pivot(index='i', columns='combined', values='zb')\n\nprint('Comparing Zone Boundary Sizes')\nfor p in permutations(list(knn_pivoted_boundary.columns), 2):\n    data = knn_pivoted_boundary[p[1]] - knn_pivoted_boundary[p[0]]\n    p_val = np.mean(data>0)\n    if p_val <= 0.5:\n        print(p[0], np.mean(knn_pivoted_boundary[p[0]]), \n              p[1], np.mean(knn_pivoted_boundary[p[1]]), p_val)","a979c2b9":"# Running the model\n\nWe split the data using pandas and run it through a loop which trains and saves model statistics for each bootstrapped sample","e5104ce8":"# Measuring the Strike Zone\n\nIn this notebook I'll demonstrate two ways to model the strike zone, both requiring a relatively large amount of data (thousands of pitches). The first method, k-nearest neighbor, is nonparametric and does not know what the shape of the zone should be. It is extremely flexible (for example, the shape of each corner), but requires more data. The second method models each edge as a logistic regression problem. \n\nFor error analysis, I use 10,000 bootstrapped samples. With this, I can show that the strike zone changes when a player is ejected from the game for arguing balls and strikes.","7de26bdc":"## Helper functions and KNN\n\nThese functions take a dataset and train the model, plot the model, and calculate the size of the zone under this model","fca0d6eb":"## Importing and formatting data\n\nThis dataset includes all pitches and ejections from the 2015-2018 seasons. We just want the pitches that came in a game with a balls-and-strikes ejection, and we need those pitches labeled by before\/after the ejection and team.","394fe2ed":"## Defining the logistic regression model\n\nHere I model each edge of the strike zone as a logistic regression, allowing each edge to be a parabola instead of a straight line (with straight lines, the corners aren't dealt with well). This gives 12 parameters (edge location, coefficient, and parabola coefficient for each of 4 sides), which can then be solved with scipy.minimize."}}