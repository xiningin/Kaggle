{"cell_type":{"c19651fd":"code","6e5035c7":"code","caff9f60":"code","7b7176c4":"code","2099d1d0":"code","2a9d23e4":"code","60a51d1c":"code","b41b922e":"code","f7a08b30":"code","b452d8af":"code","7fbc7cb3":"code","cd27a9b5":"code","b9845c3f":"code","1bd34863":"code","8f54f4c0":"code","2b198a97":"code","a4cad871":"code","0ca05375":"code","8aa58228":"code","04231e1f":"markdown","50c2ce7f":"markdown","726072bd":"markdown","1db9c491":"markdown","9c296143":"markdown","0bb533f9":"markdown","72f3bd39":"markdown","1466b780":"markdown"},"source":{"c19651fd":"# Import Time\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torchvision\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline\n\n# Gets the GPU if there is one, otherwise the cpu\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","6e5035c7":"# Quick function that gets how many out of 'preds' match 'labels'\n# To be used much later\ndef get_num_correct(preds, labels):\n    return preds.argmax(dim=1).eq(labels).sum().item()","caff9f60":"# Read in the train set and the test set\n# In a kernel here on Kaggle, use the Workspace on the right-hand side to figure out the file path\ntrain_set = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_images = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n\n# Split the train set so there is also a validation set\ntrain_images, val_images, train_labels, val_labels = train_test_split(train_set.iloc[:, 1:], \n                                                                     train_set.iloc[:, 0], \n                                                                     test_size=0.2)\n\n# Reset indices so the Dataset can find them with __getitem__ easily\ntrain_images.reset_index(drop=True, inplace=True)\nval_images.reset_index(drop=True, inplace=True)\ntrain_labels.reset_index(drop=True, inplace=True)\nval_labels.reset_index(drop=True, inplace=True)","7b7176c4":"# Let's just display a number as a dataframe for fun \n# (I think it looks cool, plus it led to something else I tried, mentioned in the last section)\npd.set_option('display.max_columns', 28)\npd.DataFrame(train_images.iloc[3, :].to_numpy().reshape(28, 28))","2099d1d0":"# Some quick data visualization\n# (not a terribly exciting dataset)\n# First 25 images in training set\n# Note: label is above the image\n\nfig, ax = plt.subplots(nrows=5, ncols=5, figsize=(8,8))\nfig.subplots_adjust(hspace=.3)\nfor i in range(5):\n    for j in range(5):\n        ax[i][j].axis('off')\n        ax[i][j].imshow(train_images.iloc[[i+(j*5)], :].to_numpy().astype(np.uint8).reshape(28, 28), cmap='gray')\n        ax[i][j].set_title(train_labels[i+(j*5)])","2a9d23e4":"# Some more quick data visualization\n# First 10 images of each class in the training set\nfig, ax = plt.subplots(nrows=10, ncols=10, figsize=(10,10))\n\n# I know these for loops look weird, but this way num_i is only computed once for each class\n# Trust me the way I had this before was more normal, but this is more efficient\nfor i in range(10): # Column by column\n    num_i = train_images[train_labels == i]\n    ax[0][i].set_title(i)\n    for j in range(10): # Row by row\n        ax[j][i].axis('off')\n        ax[j][i].imshow(num_i.iloc[j, :].to_numpy().astype(np.uint8).reshape(28, 28), cmap='gray')","60a51d1c":"# Transformations\nIMG_SIZE = 28 # size of images in MNIST\n# Also the images only have one color channel\n# So 3D size = (1, 28, 28)\n\n# Transformations for the train\ntrain_trans = transforms.Compose(([\n    transforms.ToPILImage(),\n    transforms.RandomCrop(IMG_SIZE), \n    transforms.ToTensor(), # divides by 255\n  #  transforms.Normalize((0.5,), (0.5,))\n]))\n\n# Transformations for the validation & test sets\nval_trans = transforms.Compose(([\n    transforms.ToPILImage(),\n    transforms.ToTensor(), # divides by 255\n   # transforms.Normalize((0.1307,), (0.3081,))\n]))\n\n# did worse w\/o RandomCrop, if someone can explain why \n# (or if I'm crazy and should try it again) \n# I'd love to hear about it in the comments","b41b922e":"# Custom class for the MNIST dataset from Kaggle\n# Images come in a csv, not as actual images\n# Training set is split before given to this class\n\nclass MNISTDataSet(torch.utils.data.Dataset):\n    # images df, labels df, transforms\n    # uses labels to determine if it needs to return X & y or just X in __getitem__\n    def __init__(self, images, labels, transforms=None):\n        self.X = images\n        self.y = labels\n        self.transforms = transforms\n                    \n    def __len__(self):\n        return len(self.X)\n    \n    def __getitem__(self, i):\n        data = self.X.iloc[i, :] # gets the row\n        # reshape the row into the image size \n        # (numpy arrays have the color channels dim last)\n        data = np.array(data).astype(np.uint8).reshape(28, 28, 1) \n        \n        # perform transforms if there are any\n        if self.transforms:\n            data = self.transforms(data)\n        \n        # if !test_set return the label as well, otherwise don't\n        if self.y is not None: # train\/val\n            return (data, self.y[i])\n        else: # test\n            return data","f7a08b30":"# Get datasets using the custom MNIST Dataset for the train, val, and test images\ntrain_set = MNISTDataSet(train_images, train_labels, train_trans)\nval_set = MNISTDataSet(val_images, val_labels, val_trans)\ntest_set = MNISTDataSet(test_images, None, val_trans)\n\n# Nice habit to get into\nnum_classes = 10 # 0-9","b452d8af":"class Network(nn.Module):\n    def __init__(self):\n        super(Network, self).__init__()\n        # image starts as (1, 28, 28)\n        # Formula to compute size of image after conv\/pool\n        # (size-filter+2*padding \/ stride) + 1\n        #                      inputs         # of filters    filter size    \n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=5, stride=1, padding=2) # conv1\n        self.conv1_bn = nn.BatchNorm2d(num_features=32)\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5, stride=1, padding=2) # conv2\n        self.conv2_bn = nn.BatchNorm2d(num_features=64)\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels= 128, kernel_size=3, stride=1, padding=1) # conv3\n        self.conv3_bn = nn.BatchNorm2d(num_features=128)\n        \n        self.fc1 = nn.Linear(in_features=128*6*6, out_features=1024) # linear 1\n        self.fc1_bn = nn.BatchNorm1d(num_features=1024)\n        self.fc2 = nn.Linear(in_features=1024, out_features=512) # linear 2\n        self.fc2_bn = nn.BatchNorm1d(num_features=512)\n        self.fc3 = nn.Linear(in_features=512, out_features=256) # linear 3\n        self.fc3_bn = nn.BatchNorm1d(num_features=256)\n        self.fc4 = nn.Linear(in_features=256, out_features=64) # linear 4\n        self.fc4_bn = nn.BatchNorm1d(num_features=64)\n        self.out = nn.Linear(in_features=64, out_features=10) # output\n    \n    def forward(self, t):\n        t = F.relu(self.conv1_bn(self.conv1(t)))\n        t = F.max_pool2d(t, kernel_size=2, stride=2) # (1, 14, 14)\n        \n        t = F.relu(self.conv2_bn(self.conv2(t)))\n        t = F.max_pool2d(t, kernel_size=2, stride=2) # (1, 7, 7)\n        \n        t = F.relu(self.conv3_bn(self.conv3(t)))\n        t = F.max_pool2d(t, kernel_size=2, stride=1) # (1, 6, 6)\n        \n        t = F.relu(self.fc1_bn(self.fc1(t.reshape(-1, 128*6*6))))\n        t = F.relu(self.fc2_bn(self.fc2(t)))\n        t = F.relu(self.fc3_bn(self.fc3(t)))\n        t = F.relu(self.fc4_bn(self.fc4(t)))\n        t = self.out(t)\n        \n        return t","7fbc7cb3":"lr = 0.001 # initial learning rate\nbatch_size = 100 # batch size\nepochs = 10 # number of epochs to run\n\nnetwork = Network().to(device) # put the model on device (hopefully a GPU!)\ntrain_dl = DataLoader(train_set, batch_size=batch_size, shuffle=True)\nval_dl = DataLoader(val_set, batch_size=batch_size, shuffle=False)\noptimizer = optim.Adam(network.parameters(), lr=lr)\n\nfor epoch in range(epochs):\n    print(\"Epoch: \", epoch+1)\n    epoch_loss = 0\n    epoch_correct = 0\n    network.train() # training mode\n    \n    # lessen the learning rate after 4 epochs (0,...,3)\n    if epoch == 4:\n        print(\" decreasing lr\")\n        optimizer = optim.Adam(network.parameters(), lr=0.00001)\n    \n    if epoch == 10: # not currently used\n        print(\" decreasing lr again\")\n        optimizer = optim.Adam(network.parameters(), lr=0.0000000000001)\n    \n    for images, labels in train_dl:\n        X, y = images.to(device), labels.to(device) # put X & y on device\n        y_ = network(X) # get predictions\n        \n        optimizer.zero_grad() # zeros out the gradients\n        loss = F.cross_entropy(y_, y) # computes the loss\n        loss.backward() # computes the gradients\n        optimizer.step() # updates weights\n        \n        epoch_loss += loss.item() * batch_size\n        epoch_correct += get_num_correct(y_, y)\n        \n    # Evaluation with the validation set\n    network.eval() # eval mode\n    val_loss = 0\n    val_correct = 0\n    with torch.no_grad():\n        for images, labels in val_dl:\n            X, y = images.to(device), labels.to(device) # to device\n            \n            preds = network(X) # get predictions\n            loss = F.cross_entropy(preds, y) # calculate the loss\n            \n            val_correct += get_num_correct(preds, y)\n            val_loss = loss.item() * batch_size\n    # Print the loss and accuracy for the validation set\n    print(\" Val Loss: \", val_loss)\n    print(\" Val Acc: \", (val_correct\/len(val_images))*100)","cd27a9b5":"# Use the validation set to make a confusion matrix\nnetwork.eval() # good habit I suppose\npredictions = torch.LongTensor().to(device) # Tensor for all predictions\n\n# Goes through the val set\n# Don't care about the associated labels\nfor images, _ in val_dl:\n    preds = network(images.to(device))\n    predictions = torch.cat((predictions, preds.argmax(dim=1)), dim=0)\n\n# Make the confusion matrix\ncmt = torch.zeros(num_classes, num_classes, dtype=torch.int32)\nfor i in range(len(val_labels)):\n    cmt[val_labels[i], predictions[i]] += 1\n","b9845c3f":"# Doesn't look fancy but it works\n# Actual class down the column (0-9), predicted class across the rows (0-9)\ncmt","1bd34863":"# Time to get the network's predictions on the test set\n# Put the test set in a DataLoader\ntest_dl = DataLoader(test_set, batch_size=batch_size, shuffle=False)\n\nnetwork.eval() # Safety first\npredictions = torch.LongTensor().to(device) # Tensor for all predictions\n\n# Go through the test set, saving the predictions in... 'predictions'\nfor images in test_dl:\n    preds = network(images.to(device))\n    predictions = torch.cat((predictions, preds.argmax(dim=1)), dim=0)","8f54f4c0":"# Read in the sample submission\nsubmission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")","2b198a97":"# Change the label column to our predictions \n# Have to make sure the predictions Tensor is on the cpu\nsubmission['Label'] = predictions.cpu().numpy()","a4cad871":"# Write the dataframe to a new csv, not including the index\nsubmission.to_csv(\"predictions.csv\", index=False)","0ca05375":"# Save the model (if you really want for some reason)\n# torch.save(network, \"Model\/mnist_network\") ","8aa58228":"# 99.457% on MNIST test set on Kaggle (top 23%)\n# (same on full training set w\/ 15 epochs)\n# 99.385% on a run through, depends on luck to get a bit higher (or maybe full training set, but also luck)","04231e1f":"# Set-Up","50c2ce7f":"# Some Other Things I Tried:\n - Making each pixel in each image either 255 or 0 (before normalization) depending on how close to one of those two extremes it was \n        - Didn't help, didn't really hurt\n - Training the model on the whole training set\n        - Usually didn't help\/hurt, but had no way to see if it had been a good run or not without submitting it to Kaggle\n - I added a few transformations at first without really thinking, like ColorJitter\n        - It definitely helped when I removed them\n        - Think about if your transformations go with your dataset before adding them\n - Even though to me it seems like the RandomCrop transformation shouldn't really do anything in this case, it did worse when I removed it, so in it has since stayed","726072bd":"# Network Evaluation","1db9c491":"# Some Data Visualization","9c296143":"# Training Loop","0bb533f9":"# Introduction\n\nThis is one of I'm sure many notebooks here examining the MNIST dataset using PyTorch. Transfer learning is not used, rather a CNN with 3 convolutional layers, 4 hidden layers, and an output layer. This model was able to achieve 99.457%, although that does require a bit of a lucky run. \n\nMy hope is that this notebook will help someone who is learning PyTorch, as I recently was. On that note, this notebook includes some PyTorch things like: a custom dataset class that inherits PyTorch's dataset class, transforms, putting data and the network on a GPU\/CPU, various neurel network layers, a training loop, and an evaluation loop. Some images are also visualized using matplotlib and a simple confusion matrix is made. If you're new to PyTorch, hopefully you will find something useful in this notebook!","72f3bd39":"# Possible Future Notebook Improvements\n - Better-looking confusion matrix\n - Try to improve accuracy a bit more (maybe try SGD)\n - Save val_acc from each epoch, possibly end training early if using more epochs\n - Make blocks in CNN class so it's easier to quickly see the architecture","1466b780":"I believe network.train() and network.eval() are only needed if Dropout layers are used. Previous iterations had them. Also, I imagine it's another thing that's it's good to get in the habit of doing. "}}