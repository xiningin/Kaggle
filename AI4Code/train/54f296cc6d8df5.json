{"cell_type":{"4102e900":"code","20b3de88":"code","a6bf475d":"code","3609996d":"code","193d3730":"code","6f135b67":"code","3da2cad1":"code","80a3f261":"code","8edd00bc":"code","563f2b2e":"code","ef1bd3a2":"code","5ceb4972":"code","330951e8":"markdown","31f6c3ca":"markdown","0b6671f3":"markdown","9e22893b":"markdown"},"source":{"4102e900":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20b3de88":"import pandas as pd\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport seaborn as sns","a6bf475d":"doge_df=pd.read_csv('..\/input\/dogecoin-historical-data\/DOGE-USD.csv')\ndoge_df.head()","3609996d":"plt.figure(figsize = (20,10))\ndoge_df.groupby('Date')['Open'].mean().plot(marker='o',ls='-',lw=3,ms=3,mew=1,alpha=.5);\nplt.xlabel('Date');\nplt.ylabel('Volume');\nplt.savefig('all_data.png')","193d3730":"doge_df_last1 = doge_df.head(2295)\n\nplt.figure(figsize = (20,10))\ndoge_df_last1.groupby('Date')['Close'].mean().plot();\n#plt.plot(doge_df_last1.Date,doge_df_last1.Close);\nplt.xlabel('Date');\nplt.ylabel('Price');\nplt.locator_params(axis=\"x\", nbins=20)\nplt.legend()\nplt.savefig('first_data.png')","6f135b67":"## Data after 29th November 2020","3da2cad1":"doge_df_last = doge_df.tail(330)\n\nplt.figure(figsize = (20,10))\ndoge_df_last.groupby('Date')['Close'].mean().plot();\n#plt.plot(doge_df_last1.Date,doge_df_last1.Close);\nplt.xlabel('Date');\nplt.ylabel('Price');\nplt.locator_params(axis=\"x\", nbins=20)\nplt.legend()\nplt.savefig('first_data.png')","80a3f261":"doge_df_last = doge_df_last.head(100)\n\nplt.figure(figsize=(40,15))\n#plt.plot(doge_df_last.Date,doge_df_last.High,marker='o',ls='-',lw=3,ms=12,mew=1,alpha=.7)\n#plt.plot(doge_df_last.Date,doge_df_last.Low,marker='o',ls='-',lw=3,ms=12,mew=1,alpha=.9)\nplt.plot(doge_df_last.Date,doge_df_last.Open,marker='o',ls='-',lw=3,ms=12,mew=1,alpha=.7)\nplt.plot(doge_df_last.Date,doge_df_last.Close,marker='d',ls='-',lw=3,ms=12,mew=1,alpha=.7)\n# plt.plot(final_df.Date,final_df.Volume,marker='d',ls='-',lw=3,ms=12,mew=1,alpha=.7)\nplt.xlabel('Date',fontsize = 25)\nplt.ylabel('Price',fontsize = 25)\n#plt.grid(color='g', linestyle='-', linewidth=0.8,alpha=0.5)\nplt.tick_params(axis='x', which='major', labelsize=20, rotation=90)\nplt.tick_params(axis='y', which='major', labelsize=15)\nplt.title(\"Dogecoin Market In Last 330 Days\",fontsize = 30,pad=20);\nplt.legend(['High','Low','Open','Close']);\nplt.savefig('All_last100.png')","8edd00bc":"doge_df_test = doge_df.tail(330)\n## combine these different collections into a list\ndata_to_plot = [doge_df_test.Open, doge_df_test.High, doge_df_test.Low, doge_df_test.Close]\n\n# Create a figure instance\nfig = plt.figure(figsize=(10,6))\n\n# Create an axes instance\nax = fig.add_axes([0,0,1,1])\n\n# Create the boxplot\nbp = sns.violinplot(data=data_to_plot, orient='h',xlabel='Price')\nbp.set_yticklabels(['Open','High','Low','Close'])\n#ax.set_xticklabels(['a','b','c'])\n\nplt.show()","563f2b2e":"from sklearn.preprocessing import MinMaxScaler\nclose = doge_df_last.Close.iloc[:].to_numpy()\nscaler = MinMaxScaler(feature_range=(0,1))\ncloseScaled = scaler.fit_transform(np.array(close).reshape(-1,1))","ef1bd3a2":"# Distribution of Original Data\nsns.distplot(close, hist=True, kde=True, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","5ceb4972":"# Distribution of Scaled Data\nsns.distplot(closeScaled, hist=True, kde=True, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","330951e8":"## Distribution Graph","31f6c3ca":"## Data Till 29th November 2020","0b6671f3":"## Sudden Spike on 1st Jan 2021 and 29th Jan 2021","9e22893b":"## Violin Plot after december 2020"}}