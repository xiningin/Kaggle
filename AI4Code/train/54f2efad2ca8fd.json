{"cell_type":{"897d2602":"code","7faefd0e":"code","38ebae48":"code","1e465ce3":"code","7040e25f":"code","ef8c42a1":"code","be684419":"code","2993b79c":"code","b8e8f9e5":"code","3fab8f41":"code","b12376c8":"code","f394123f":"code","45150653":"code","60abe637":"code","fbd1361d":"code","7bdd2796":"code","594b0cd1":"code","55a04b35":"code","4f00ca47":"code","874f4a63":"code","2e14fe99":"code","ae9cb75c":"code","f8144ee8":"code","f9191495":"code","ea2244f7":"code","821b65b7":"code","61fcf560":"code","736eb127":"code","3b0cbde9":"code","48dd346a":"code","05a7cab5":"code","e8619400":"code","e526d60b":"code","0dfc53b3":"code","3504d2de":"code","67b5c35e":"code","03a31c25":"code","638256ae":"code","77df7f46":"code","15934f72":"code","05b85f4b":"code","ee5466cd":"code","b0d1f037":"code","d2904e51":"code","041a48af":"code","42f201ec":"code","667bc32e":"code","cad8adba":"code","b971d73d":"code","a83c528b":"code","635e76c3":"code","bdd17a03":"code","dc610e88":"code","02041ef2":"code","68a1d518":"code","13cd2bfa":"code","91634bdf":"code","bfed676e":"code","4cb6357f":"code","4658cdb9":"code","93d1247a":"code","235f3986":"code","475b08c3":"code","7fc99344":"code","9836fdc7":"code","366715ad":"code","42e5511b":"code","2c15e8df":"code","e084f980":"code","b051c80c":"code","ac4a76ce":"code","35236e32":"code","dd91d274":"code","7be5dd63":"code","378096b0":"code","be46dc5e":"code","4f52139d":"code","ed0ee64c":"code","ca3a1e5b":"code","90dfa9a9":"code","bd4a7420":"markdown","fd66088c":"markdown","5b2cf82b":"markdown","740ef474":"markdown"},"source":{"897d2602":"import pandas as pd","7faefd0e":"dataset = pd.read_csv('..\/input\/loanprediction\/loan_prediction.csv')\ndf = dataset.copy()","38ebae48":"df","1e465ce3":"df.corr()","7040e25f":"df.count()","ef8c42a1":"df.describe()","be684419":"df.isnull().sum()","2993b79c":"df.isnull().sum()","b8e8f9e5":"df","3fab8f41":"df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace=True)\ndf['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace=True)\ndf['LoanAmount'].fillna(df['LoanAmount'].mode()[0], inplace=True)\ndf['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace=True)\ndf['Dependents'].fillna(df['Dependents'].mode()[0], inplace=True)\ndf['Married'].fillna(df['Married'].mode()[0], inplace=True)\ndf['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n","b12376c8":"df","f394123f":"df.isnull().sum()","45150653":"df.replace('3+', '3', inplace =True)","60abe637":" #df['Dependents'] = df['Dependents'].replace(['3+'],'3')","fbd1361d":"df.drop(['Loan_ID'],axis=1,inplace=True)","7bdd2796":"df","594b0cd1":"df.Loan_Status.value_counts()","55a04b35":"df.Loan_Status.replace({'Y': 0, 'N': 1},inplace = True)","4f00ca47":"x = df.iloc[:,:-1]","874f4a63":"y = df.iloc[:,[-1]]","2e14fe99":"y = df.Loan_Status\n","ae9cb75c":"y","f8144ee8":"x = pd.get_dummies(x, drop_first = True)","f9191495":"x","ea2244f7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size= 0.3, stratify = y)","821b65b7":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","61fcf560":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC","736eb127":"model1 = LogisticRegression()\nmodel2 = DecisionTreeClassifier()\nmodel3 = SVC(probability=True)","3b0cbde9":"model1.fit(X_train, y_train)\nmodel2.fit(X_train, y_train)\nmodel3.fit(X_train, y_train);","48dd346a":"model1_pred = model1.predict(X_test)\nmodel2_pred = model2.predict(X_test)\nmodel3_pred = model3.predict(X_test)","05a7cab5":"from sklearn.metrics import accuracy_score","e8619400":"model1.__class__.__name__","e526d60b":"print(model1.__class__.__name__ , accuracy_score(y_test, model1_pred))\nprint(model2.__class__.__name__ , accuracy_score(y_test, model2_pred))\nprint(model3.__class__.__name__ , accuracy_score(y_test, model3_pred))","0dfc53b3":"from sklearn import metrics","3504d2de":"from sklearn.ensemble import VotingClassifier","67b5c35e":"estimators = [('lr', model1), ('dt', model2) , ('svm', model3) ] \nvoting_hard = VotingClassifier(estimators, voting=\"hard\")","03a31c25":"voting_hard.fit(X_train, y_train)","638256ae":"voting_hard_pred = voting_hard.predict(X_test)","77df7f46":"accuracy_score(y_test, voting_hard_pred)","15934f72":"estimators = [('lr', model1), ('dt', model2) , ('svm', model3) ] \nvoting_soft = VotingClassifier(estimators, voting=\"soft\")","05b85f4b":"voting_soft.fit(X_train, y_train)","ee5466cd":"X_test","b0d1f037":"voting_soft_pred = voting_soft.predict(X_test)","d2904e51":"model4 = SVC(probability=True) \nestimators = [('lr', model1), ('dt', model2) , ('svm', model4) ] \nvoting_soft = VotingClassifier(estimators, voting=\"soft\")","041a48af":"voting_soft.fit(X_train, y_train)","42f201ec":"voting_soft_pred = voting_soft.predict(X_test)","667bc32e":"accuracy_score(y_test, voting_soft_pred)","cad8adba":"from sklearn.ensemble import BaggingClassifier","b971d73d":"from sklearn.svm import SVC\nsvm = SVC(probability=True)","a83c528b":"bag = BaggingClassifier(base_estimator= svm,\n                 n_estimators = 10,\n                 max_samples = 0.4,\n                 max_features = 12,\n                 bootstrap = True,\n                 bootstrap_features = True,\n                 n_jobs = -1,\n                 random_state = 123)","635e76c3":"X_train.shape","bdd17a03":"bag.fit(X_train, y_train)","dc610e88":"bag_pred = bag.predict(X_test)","02041ef2":"from sklearn.metrics import accuracy_score","68a1d518":"accuracy_score(y_test, bag_pred)","13cd2bfa":"from sklearn.ensemble import GradientBoostingClassifier","91634bdf":"gbm = GradientBoostingClassifier(random_state = 123)","bfed676e":"gbm.fit(X_train, y_train)","4cb6357f":"gbm_pred = gbm.predict(X_test)","4658cdb9":"accuracy_score(y_test, gbm_pred)","93d1247a":"!pip install xgboost","235f3986":"import xgboost","475b08c3":"from xgboost import XGBClassifier","7fc99344":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size= 0.3, stratify = y)","9836fdc7":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","366715ad":"from xgboost import XGBClassifier","42e5511b":"xgbt = XGBClassifier(max_depth = 2,\n             learning_rate = 0.2,\n             objective  = \"multi:softmax\",\n             num_class = 2,\n             booster = \"gbtree\",\n             n_estimarors = 10,\n             random_state = 123)","2c15e8df":"xgbt.fit(X_train, y_train)","e084f980":"xgbt_pred = xgbt.predict(X_test)","b051c80c":"accuracy_score(y_test, xgbt_pred)","ac4a76ce":"xgbt.score(X_train, y_train)","35236e32":"xgbt.score(X_test, y_test)","dd91d274":"!pip install catboost","7be5dd63":"from catboost import CatBoostRegressor\n\n# Initialize CatBoostRegressor\nmodel = CatBoostRegressor(iterations=2,\n                          learning_rate=1,\n                          depth=2)\n# Fit model\nmodel.fit(X_train, y_train)\n# Get predictions\npreds = model.predict(X_test)","378096b0":"model.score(X_train, y_train)","be46dc5e":"model.score(X_test, y_test)","4f52139d":"from lightgbm import LGBMClassifier","ed0ee64c":"lgbm_model = LGBMClassifier()\nlgbm_model.fit(X_train, y_train)","ca3a1e5b":"y_pred = lgbm_model.predict(X_test)\ny_pred","90dfa9a9":"accuracy_score(y_test, y_pred)","bd4a7420":"BAGGING","fd66088c":"VOTING","5b2cf82b":"the best model is bagging    = 81 ","740ef474":"BOOSTING"}}