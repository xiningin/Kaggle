{"cell_type":{"b8fea843":"code","22a03402":"code","770ca2a8":"code","56c89f36":"code","b55d0fc5":"code","758b409e":"code","82dbaa60":"code","18faa958":"code","4f0a7631":"code","7b9c8192":"code","ae289379":"code","0247a695":"code","f1517111":"code","c2eda49a":"code","9344ba8b":"code","46c5dbed":"code","17035a8f":"code","9b1e8399":"code","dc0e8e90":"code","dcb87796":"code","0693195f":"code","067af55e":"code","105f8568":"code","bf2e61fd":"code","b098f2b3":"code","18218f45":"code","0eef1f6e":"code","b0eddc9c":"code","1d0a3b2b":"code","7b0b84dc":"markdown","5612d059":"markdown"},"source":{"b8fea843":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22a03402":"import matplotlib.pyplot as plt\nimport seaborn as sns","770ca2a8":"train_path ='..\/input\/tabular-playground-series-feb-2022\/train.csv'\ntest_path = '..\/input\/tabular-playground-series-feb-2022\/test.csv'\nsub_path = '..\/input\/tabular-playground-series-feb-2022\/sample_submission.csv'","56c89f36":"df_train = pd.read_csv(train_path)\ndf_test = pd.read_csv(test_path)\ndf_sub = pd.read_csv(sub_path)","b55d0fc5":"df_sub.sample(6)","758b409e":"df_train","82dbaa60":"df_train['target'].value_counts().index","18faa958":"df_train.info()","4f0a7631":"T = df_train[[x for x in list(df_train.columns) if x != 'target']]\ndf_unified = pd.concat([T , df_test],axis = 0 ,ignore_index = True )\ndf_unified","7b9c8192":"x = []\nfor column in list(df_unified.columns):\n    if df_unified[column].isnull().sum()!=0:\n        x.append(column)\nlen(x)","ae289379":"df_unified.drop('row_id',axis = 1, inplace = True)","0247a695":"plt.figure(figsize=(20,10))\nsns.countplot(df_train.target)\n","f1517111":"from sklearn.preprocessing import RobustScaler\n\nfor column in list(df_unified.columns):\n    rs = RobustScaler()\n    df_unified[column] = rs.fit_transform(df_unified[column].values.reshape(-1,1))","c2eda49a":"from sklearn.preprocessing import QuantileTransformer\n\nfor column in list(df_unified.columns):\n    qt = QuantileTransformer(output_distribution='normal')\n    df_unified[column] = qt.fit_transform(df_unified[column].values.reshape(-1,1))\n","9344ba8b":"df_train['target'].value_counts()","46c5dbed":"target_encode = {'Bacteroides_fragilis':1,'Streptococcus_pyogenes':2,\n                'Streptococcus_pneumoniae':3, 'Campylobacter_jejuni':4,\n                'Salmonella_enterica':5 , 'Escherichia_coli':6,\n                'Enterococcus_hirae':7 , 'Escherichia_fergusonii':8,\n                'Staphylococcus_aureus':9 , 'Klebsiella_pneumoniae':10}\ndf_train['target'] = df_train['target'].map(target_encode)\ndf_train['target'].value_counts()","17035a8f":"training = df_unified.head(df_train.shape[0])\ntesting = df_unified.tail(df_test.shape[0])\n\nX = training\ny = df_train['target']","9b1e8399":"from sklearn.model_selection import train_test_split\n\nX_train , x_valid , Y_train , y_valid = train_test_split(X,y,test_size = 0.2 ,\n                                                        stratify = y ,random_state = 42 )","dc0e8e90":"from sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import BaggingClassifier\nextr_clf = BaggingClassifier(base_estimator = ExtraTreesClassifier(), n_estimators = 10)\nextr_clf.fit(X_train , Y_train)\n","dcb87796":"# from xgboost import XGBClassifier\n# from sklearn.multiclass import OneVsRestClassifier\n# from sklearn.metrics import roc_auc_score\n\n# xgbc_clf = XGBClassifier(eval_metric=['auc'])\n# xgbc_clf.fit(X_train , Y_train , eval_set=[[X_train,Y_train],[x_valid,y_valid]])\n\n# y_valid_preds = xgbc_clf.predict(x_valid)\n\n","0693195f":"# from catboost import CatBoostClassifier\n# from sklearn.metrics import roc_auc_score\n\n# cbc = CatBoostClassifier(n_estimators=125, auto_class_weights= 'Balanced',eval_metric='AUC')\n\n# cbc.fit(X_train,Y_train,eval_set=(x_valid,y_valid))\n\n","067af55e":"# T_cbc = cbc.predict(testing)","105f8568":"T_extr= extr_clf.predict(testing)","bf2e61fd":"# T = xgbc_clf.predict(testing)","b098f2b3":"df_test['target'] = -1\ndf_test['target'] = T_extr\nsubmission = df_test[['row_id','target']]\nsubmission","18218f45":"reverse_encode = {1:'Bacteroides_fragilis',2:'Streptococcus_pyogenes',\n                3:'Streptococcus_pneumoniae', 4:'Campylobacter_jejuni',\n                5:'Salmonella_enterica' , 6:'Escherichia_coli',\n                7:'Enterococcus_hirae' , 8:'Escherichia_fergusonii',\n                9:'Staphylococcus_aureus' , 10:'Klebsiella_pneumoniae'}\nsubmission['target'] = submission['target'].map(reverse_encode)","0eef1f6e":"submission","b0eddc9c":"submission.to_csv('bagging_extra.csv',index =False)","1d0a3b2b":"# submission.to_csv('baseline_cbc.csv',index = False)","7b0b84dc":"1. The target column is not imbalanced","5612d059":"1. Here no columns have nan value"}}