{"cell_type":{"c9ee8763":"code","2ae0c680":"code","23efcfa2":"code","f7fcdcf8":"code","18f6eda5":"code","5dad0198":"code","5c669e04":"code","734ce2e6":"code","488f4ab4":"code","d4e47642":"code","1c3f532a":"markdown","cd56d9ed":"markdown"},"source":{"c9ee8763":"import os\nimport random\nimport torch\nimport collections\nimport pandas as pd\nimport numpy as np\nfrom tqdm.auto import tqdm\nfrom glob import glob\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom scipy.special import softmax\n\npd.set_option('display.max_colwidth', 255)","2ae0c680":"BASE_DIR = \"\/kaggle\/input\/muis-challenge\"\ndf_train = pd.read_csv(f\"{BASE_DIR}\/train.csv\")\ndf_test = pd.read_csv(f\"{BASE_DIR}\/test.csv\")\ndf_synset_meaning = pd.read_csv(f\"{BASE_DIR}\/synset_meaning.csv\")\ndf_sub = pd.read_csv(f\"{BASE_DIR}\/submission.csv\")\n\nprint(df_train.shape, df_test.shape, df_sub.shape)\ndf_train.head(1)","23efcfa2":"# ----------------------------- PREPROCESS --------------------------------\ndict_synset_meaning = collections.defaultdict(dict)\nfor row in df_synset_meaning.itertuples():\n    dict_synset_meaning[row.word][row.synset_id] = row.meaning.lower()\nsynset_id2word = {row.synset_id:row.word for row in df_synset_meaning.itertuples()}\nunique_synset = set(df_synset_meaning.word.unique().tolist())\n\nids = sorted(df_synset_meaning.synset_id.unique().tolist())\nindex2id, id2index = {i:id for i, id in enumerate(ids)}, {id:i for i, id in enumerate(ids)}\nnum_labels = len(index2id)\n\ndf_train[\"synset_index\"] = df_train.synset_id.map(id2index)","f7fcdcf8":"RESULT_DIR = \"\/kaggle\/input\/mlub-submissions\"\n\nMODELS = [\n    {\n        \"fname\":\"mlub-bert-large-uncased-tr5do30ep25\",\n        \"public_score\": 0.97016,\n    },\n    {\n        \"fname\":\"mlub-bert-large-cased-tr5do30ep25s42\",\n        \"public_score\": 0.96746,\n    },\n    {\n        \"fname\":\"mlub-bert-base-uncased-tr5meaning\",\n        \"public_score\": 0.96699,\n    },\n    {\n        \"fname\":\"mlub-bert-large-uncased-tr5do20ep25s42\",\n        \"public_score\": 0.96863,\n    },\n]","18f6eda5":"all_oofs = []\nall_predictions = []\nfor dd in MODELS:\n    print(dd)\n    oof = np.load(f\"{RESULT_DIR}\/oofs\/{dd['fname']}.npy\")\n    predictions = np.load(f\"{RESULT_DIR}\/predictions\/{dd['fname']}.npy\")\n    score = accuracy_score(df_train.synset_id.values, oof.argmax(1) + 1)\n    print(oof.shape, predictions.shape, score)\n    all_oofs.append(oof)\n    all_predictions.append(predictions.mean(0))\n    dd[\"CV\"] = round(score, 5)\n    dd[\"hf_link\"] = f\"https:\/\/huggingface.co\/bayartsogt\/{dd['fname']}\"","5dad0198":"pd.DataFrame(MODELS)","5c669e04":"X = np.array(all_oofs)\nX = np.moveaxis(X, 0, -1)\ny = df_train.synset_index.values\n\nX_test = np.array(all_predictions)\nX_test = np.moveaxis(X_test, 0, -1)\nprint(X.shape, y.shape, X_test.shape)","734ce2e6":"X = softmax(X, axis=1)\nX_test = softmax(X_test, axis=1)","488f4ab4":"oof_mean = X.mean(-1).argmax(-1)\npredictions_mean = X_test.mean(-1).argmax(-1)\nprint(\"accuracy after simple blending:\", accuracy_score(df_train.synset_index.values, oof_mean))","d4e47642":"df_sub.loc[:, \"synset_index\"] = predictions_mean\ndf_sub.loc[:, \"synset_id\"] = df_sub.loc[:, \"synset_index\"].map(index2id)\ndf_sub[[\"text_id\",\"synset_id\"]].to_csv(\"submission.csv\", index=False)\ndf_sub.head()","1c3f532a":"## [mlub-muis-soril] Blending Predictions Private 0.97357\n\nBlending Predictions - Public 0.97040 - Private 0.97357\n\n\u042d\u043d\u044d\u0445\u04af\u04af notebook-\u0442 \u0437\u04e9\u0432\u0445\u04e9\u043d \u0441\u0443\u0440\u0433\u0430\u0441\u0430\u043d model-\u0438\u0439\u043d \u0442\u0435\u0441\u0442 \u0445\u0438\u0439\u0445 \u0437\u043e\u0440\u0438\u043b\u0433\u043e\u043e\u0440 \u0430\u0448\u0438\u0433\u043b\u0430\u0436 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u0430 \u0441\u0443\u0440\u0433\u0430\u043b\u0442 \u0445\u044d\u0440\u0445\u044d\u043d \u0445\u0438\u0439\u0433\u0434\u0441\u044d\u043d \u0442\u0430\u0439\u043b\u0431\u0430\u0440\u044b\u0433 [\u044d\u043d\u044d \u043b\u0438\u043d\u043a\u044d\u044d\u0440](https:\/\/www.kaggle.com\/bayartsogtya\/mlub-muis-soril-1) \u043e\u0440\u0436 \u04af\u0437\u043d\u044d \u04af\u04af!\n\n","cd56d9ed":"\u0414\u0430\u0440\u0430\u0430\u0445 \u043c\u043e\u0434\u0435\u043b\u0438\u04af\u0434\u0438\u0439\u0433 softmax + mean blending \u0445\u0438\u0439\u0436 \u04af\u0440 \u0434\u04af\u043d\u0433\u044d\u044d \u0441\u0430\u0439\u0436\u0440\u0443\u0443\u043b\u0430\u0445 \u0433\u044d\u0436 \u043e\u0440\u043e\u043b\u0434\u0441\u043e\u043d \u0431\u043e\u043b\u043d\u043e."}}