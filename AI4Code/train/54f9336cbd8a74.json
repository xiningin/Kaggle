{"cell_type":{"116bfc37":"code","64f36949":"code","3d1759e9":"code","183f3a68":"code","9048080f":"code","f4819656":"code","7c614c00":"code","d38353a9":"code","91c1790e":"code","708f05fd":"code","17740b4f":"code","0e0b1c35":"code","8db9feca":"code","5b966845":"code","18801323":"code","d4150c8d":"code","a9d6d4b8":"code","b2464c91":"code","a20c97fe":"code","28c2f326":"code","ca5e38a4":"code","88eb6549":"code","9bd97c7d":"code","5bd84eda":"code","f65ad8bb":"code","b6a4c488":"code","9eb5b942":"markdown","50c48e28":"markdown","12cd9ff2":"markdown","e240c459":"markdown","425a3bd3":"markdown","b3455c1b":"markdown","71b70202":"markdown","27ce0fa3":"markdown","0db324eb":"markdown","bff153ae":"markdown","ccab1b20":"markdown","3de9a2cb":"markdown","cf2bc9f8":"markdown","536f4566":"markdown","a18c2b5c":"markdown","2879aa1f":"markdown","aa1db0d5":"markdown","5084f156":"markdown"},"source":{"116bfc37":"#first let's import all necessery libraries for this analysis\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt","64f36949":"#using pandas library and 'read_csv' function to read amazon csv file as file already formated for us from Kaggle\namazon_df=pd.read_csv('..\/input\/forest-fires-in-brazil\/amazon.csv', encoding='latin1')\n#examining head of the dataset\namazon_df.head(10)","3d1759e9":"amazon_df.describe(include=\"all\")","183f3a68":"#checking the length of the dataset\nlen(amazon_df)","9048080f":"#checking if there are any nulls we are dealing with (missing data)\namazon_df.isna().sum()","f4819656":"#cheking unique values in the state column\namazon_df.state.unique()\n","7c614c00":"#checking unique values in the month column\namazon_df.month.unique()","d38353a9":"#creating a dictionary with translations of months\nmonth_map={'Janeiro': 'January', 'Fevereiro': 'February', 'Mar\u00e7o': 'March', 'Abril': 'April', 'Maio': 'May',\n          'Junho': 'June', 'Julho': 'July', 'Agosto': 'August', 'Setembro': 'September', 'Outubro': 'October',\n          'Novembro': 'November', 'Dezembro': 'December'}\n#mapping our translated months\namazon_df['month']=amazon_df['month'].map(month_map)\n#checking the month column for the second time after the changes were made\namazon_df.month.unique()","91c1790e":"#cheking the numeric percentile distribution for the fires reported\namazon_df.number.describe()","708f05fd":"#chekcing how many fires were reported in 20 years \namazon_df.number.sum()","17740b4f":"amazon_df.number.plot(kind=\"box\")","0e0b1c35":"#we are already given the year column, however for good practice we can also extract it from the date one\namazon_df['Year']=pd.DatetimeIndex(amazon_df['date']).year\n#cheking unique years in new created column \namazon_df.Year.unique()","8db9feca":"#we are not going to be using old year column and date column as they serve no significant purpose anymore \namazon_df.drop(columns=['date', 'year'], axis=1, inplace=True)\n#changing order of columns for preffered format\namazon_df=amazon_df[['state','number','month','Year']]\n#changing names of columns for preffered format\namazon_df.rename(columns={'state': 'State', 'number': 'Fire_Number', 'month': 'Month'}, inplace=True)\n#checking changes made\namazon_df.head()","5b966845":"#creating a list of years we have \nyears=list(amazon_df.Year.unique())\n#creating an empty list, which will be populated later with amount of fires reported\nsub_fires_per_year=[]\n#using for loop to extract sum of fires reported for each year and append list above\nfor i in years:\n    y=amazon_df.loc[amazon_df['Year']==i].Fire_Number.sum().round(0)\n    sub_fires_per_year.append(y)\n#creating a dictionary with results     \nfire_year_dic={'Year':years,'Total_Fires':sub_fires_per_year}\n#creating a new sub dataframe for later plot \ntime_plot_1_df=pd.DataFrame(fire_year_dic)\n#checking the dataframe\ntime_plot_1_df.head(5)","18801323":"#using plotly Scatter \ntime_plot_1=go.Figure(go.Scatter(x=time_plot_1_df.Year, y=time_plot_1_df.Total_Fires,\n                                 mode='lines+markers', line={'color': 'red'}))\n#layout changes\ntime_plot_1.update_layout(title='Brazil Fires per 1998-2017 Years',\n                   xaxis_title='Year',\n                   yaxis_title='Fires')\n#showing the figure\ntime_plot_1.show()","d4150c8d":"#With idea to look deeper, it will require a bit more prep-work \n\n#putting all available states in the list\nstates=list(amazon_df.State.unique())\n#creating empty list for each state that will be later appended\nacre_list=[]\nalagoas_list=[] \namapa_list=[] \namazonas_list=[] \nbahia_list=[] \nceara_list=[]\ndistrito_list=[] \nespirito_list=[] \ngoias_list=[] \nmaranhao_list=[] \nmato_list=[] \nminas_list=[]\npara_list=[] \nparaiba_list=[] \nperna_list=[]\npiau_list=[]\nrio_list=[]\nrondonia_list=[]\nroraima_list=[]\nsanta_list=[]\nsao_list=[]\nsergipe_list=[]\ntocantins_list=[]","a9d6d4b8":"#It get's interesting here\n\n#breaking down fires reported for each state throughtout 20 years and appending empty lists\nfor x in states:\n    st=x\n    for i in years:\n        ye=i\n        if st=='Acre':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            acre_list.append(y)\n        elif st=='Alagoas':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            alagoas_list.append(y)\n        elif st=='Amazonas':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            amazonas_list.append(y)\n        elif st=='Amapa':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            amapa_list.append(y)\n        elif st=='Bahia':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            bahia_list.append(y)\n        elif st=='Ceara':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            ceara_list.append(y)\n        elif st=='Distrito Federal':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            distrito_list.append(y)\n        elif st=='Espirito Santo':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            espirito_list.append(y)\n        elif st=='Goias':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            goias_list.append(y)\n        elif st=='Maranhao':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            maranhao_list.append(y)\n        elif st=='Mato Grosso':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            mato_list.append(y)\n        elif st=='Minas Gerais':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            minas_list.append(y)\n        elif st=='Par\u00e1':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            para_list.append(y)\n        elif st=='Paraiba':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            paraiba_list.append(y)\n        elif st=='Pernambuco':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            perna_list.append(y)\n        elif st=='Piau':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            piau_list.append(y)\n        elif st=='Rio':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            rio_list.append(y)\n        elif st=='Rondonia':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            rondonia_list.append(y)\n        elif st=='Roraima':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            roraima_list.append(y)\n        elif st=='Santa Catarina':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            santa_list.append(y)\n        elif st=='Sao Paulo':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            sao_list.append(y)\n        elif st=='Sergipe':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            sergipe_list.append(y)\n        elif st=='Tocantins':\n            y=amazon_df.loc[(amazon_df['State']== st) & (amazon_df['Year']== ye)].Fire_Number.sum().round(0)\n            tocantins_list.append(y)","b2464c91":"#with those lists populated, now creating a powerful dataframe\ntime_plot_2_df=pd.DataFrame(list(zip(years, acre_list, alagoas_list, amapa_list, amazonas_list,\n                                     bahia_list, ceara_list, distrito_list, espirito_list,\n                                     goias_list, maranhao_list, mato_list, minas_list, para_list,\n                                     paraiba_list, perna_list, piau_list, rio_list, rondonia_list,\n                                     roraima_list, santa_list, sao_list, sergipe_list, tocantins_list)),\n                            columns =['Year', 'Acre', 'Alagoas', 'Amapa', 'Amazonas', 'Bahia', 'Ceara',\n                                      'Distrito Federal', 'Espirito Santo', 'Goias', 'Maranhao',\n                                      'Mato Grosso', 'Minas Gerais', 'Par\u00e1', 'Paraiba', 'Pernambuco',\n                                      'Piau', 'Rio', 'Rondonia', 'Roraima', 'Santa Catarina',\n                                      'Sao Paulo', 'Sergipe', 'Tocantins'])\n#checking the dataframe\ntime_plot_2_df.head(10)","a20c97fe":"#examining top 10 states with the most fires reported (please igone the year observation, will be removed later)\ntime_plot_2_df.sum().nlargest(11)","28c2f326":"#creating a dataframe for bar plot visualization\nbar_plot_df=pd.DataFrame(time_plot_2_df.sum().nlargest(11))\n#reseting index for first column\nbar_plot_df=bar_plot_df.reset_index()\n#renaming\nbar_plot_df.rename(columns={'index':'State', 0:'Reported_Fires'}, inplace=True)\n#removing Year observation\nbar_plot_df.drop(bar_plot_df[bar_plot_df.State == 'Year'].index, inplace=True)\n#checking dataframe\nbar_plot_df","ca5e38a4":"#making barplot\nbar_plot=px.bar(bar_plot_df, x='State', y='Reported_Fires', color='Reported_Fires',\n           labels={'Reported_Fires':'Count of reported fires ', 'State':'States'}, color_continuous_scale='Reds')\n#making layout changes\nbar_plot.update_layout(xaxis_tickangle=-45, title_text='Top 10 States for Amount of Reported Fires per 1998-2017 Years')\n#outputing plot\nbar_plot.show()","88eb6549":"#preparing a figure that will be populated \ntime_plot_2 = go.Figure()\n#adding individual graphs to the figure\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Mato Grosso'],\n                                 mode='lines+markers', name='Mato Grosso', line={'color': 'red'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Paraiba'],\n                                 mode='lines+markers', name='Paraiba', line={'color': 'yellow'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Sao Paulo'],\n                                 mode='lines+markers', name='Sao Paulo', line={'color': 'green'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Rio'],\n                                 mode='lines+markers', name='Rio', line={'color': 'blue'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Bahia'],\n                                 mode='lines+markers', name='Bahia', line={'color': 'pink'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Piau'],\n                                 mode='lines+markers', name='Piau', line={'color': 'brown'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Goias'],\n                                 mode='lines+markers', name='Goias', line={'color': 'grey'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Minas Gerais'],\n                                 mode='lines+markers', name='Minas Gerais', line={'color': 'purple'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Tocantins'],\n                                 mode='lines+markers', name='Tocantins', line={'color': 'orange'}))\ntime_plot_2.add_trace(go.Scatter(x=time_plot_2_df.Year, y=time_plot_2_df['Amazonas'],\n                                 mode='lines+markers', name='Amazonas', line={'color': 'gold'}))\n#making changes to layout\ntime_plot_2.update_layout(title='Brazil Fires in Top-10 (frequent) regions per 1998-2017 Years',\n                   xaxis_title='Year',\n                   yaxis_title='Fires')\n#outputing plot\ntime_plot_2.show()","9bd97c7d":"#creating subdataframe for visualizing this states geographically\ngeo_plot_df=pd.DataFrame(time_plot_2_df.sum().nlargest(11))\n#formatting new dataframe\ngeo_plot_df.rename(columns={0:'Count'}, inplace=True)\ngeo_plot_df.reset_index(inplace=True)\ngeo_plot_df.rename(columns={'index':'State'}, inplace=True)\ngeo_plot_df.drop(geo_plot_df.index[5], inplace=True)\n#cheking new sub dataframe \ngeo_plot_df","5bd84eda":"#taking my time and adding all coordinates (latitude and longitude) for this top 10 states\nlat=[-16.350000, -22.15847, -23.533773, -22.908333, -11.409874, -21.5089, -16.328547,\n     -19.841644, -21.175, -3.416843]\nlong=[-56.666668, -43.29321, -46.625290, -43.196388, -41.280857, -43.3228, -48.953403,\n     -43.986511, -43.01778, -65.856064]\n#adding new coordinates as columns to subdataframe above\ngeo_plot_df['Lat']=lat\ngeo_plot_df['Long']=long\n#checking changes in subdataframe for geo visualization\ngeo_plot_df","f65ad8bb":"#using scatter geo with above created subdataframe\nfig = px.scatter_geo(data_frame=geo_plot_df, scope='south america',lat='Lat',lon='Long',\n                     size='Count', color='State', projection='hammer')\nfig.update_layout(\n        title_text = '1998-2017 Top-10 States in Brazil with reported fires')\nfig.show()","b6a4c488":"#according to different sources, months from June - November are the hottes in Brazil\n\n#isolating the hottest months by season\nmonth_array_summer=['June','July','August']\nmonth_array_fall=['September','October','November']\n#leaving data only for hottest months\nbox_plot_df_summer=amazon_df.loc[amazon_df['Month'].isin(month_array_summer)]\nbox_plot_df_fall=amazon_df.loc[amazon_df['Month'].isin(month_array_fall)]\n#visualizing reports\nbox_plot=go.Figure()\n\nbox_plot.add_trace(go.Box(y=box_plot_df_summer.Fire_Number, x=box_plot_df_summer.Month,\n                          name='Summer', marker_color='#3D9970',\n                          boxpoints='all', jitter=0.5, whiskerwidth=0.2,\n                          marker_size=2,line_width=2))\nbox_plot.add_trace(go.Box(y=box_plot_df_fall.Fire_Number, x=box_plot_df_fall.Month,\n                         name='Fall', marker_color='#FF851B',\n                         boxpoints='all', jitter=0.5, whiskerwidth=0.2,\n                          marker_size=2,line_width=2))\n\nbox_plot.update_layout(\n        title_text = 'Distribution of Fire Reports from 1998-2017 in the hottest months')\nbox_plot.show()","9eb5b942":"Amazing visualization! Take a moment to hover over the graph to explore the dynamic features of Plotly. Now, I believe this is one of the examples where plotly library shows how powerful and dynamic it is. Not only we are presented with a very powerful visuals, but hovering over data points we are able to see details of each; also, double clicking on whichever selected state (listed on the legend) you are able to jump in and analyse it individually; not to mention all the zoomin, lasso and many more features that puts plotly library ahead others. From here, examining each state couple interesting trends come out (Mato Grosso I'm looking at you).","50c48e28":"### Abstract\n\n_Abstract overview of the the kernel_","12cd9ff2":"Here, we can already point interesting observation that 50% percentile from all observations (across all months, years and regions) sums up to 24 fire reports.","e240c459":"Take a moment to hover over the graph to explore the dynamic features of Plotly.","425a3bd3":"First, it will be interesting to look at the trend of fires beings reported over 20 years.","b3455c1b":"### Understanding Data\n\n_Going over features presented in the dataset for analysis. Explaining the process and the results_","71b70202":"### Acquiring and Loading Data\n\n_Presenting the code and methods for acquiring the data. Loading the data into appropriate format for analysis. Explaining the process and results_","27ce0fa3":"### Conclusion\n\n_Final thoughts on the dataset and Plotly_","0db324eb":"Fires are a serious problem in Brazil. As stated under the Dataset description, \"Understanding the frequency of forest fires in a time series can help to take action to prevent them\". Being able to pin-point where and when that frequency is most observed should give some clarity on what is the scope we are looking at.","bff153ae":"Clusters is first thing we can see here! Take a moment to hover over the graph to explore the dynamic features of Plotly. There are definetly some states that can be grouped into one for better visualizing practices; as well as combining Mato Grosso and Amazonas regions - which, according with geography may result in better read bubbles on the geographical plot - give it a shot and let me know in the comments.","ccab1b20":"Looks fantastic! Take a moment to hover over the graph to explore the dynamic features of Plotly. This box plot with additional distribution legends gives us some very interesting statistics on percentiles that we are able to hover over and take notes. July, October and November definetly stand out with their highest medians of reports.","3de9a2cb":"Plotly was very fun to use with this dataset. With powerful and dynamic visualizations we discovered couple very interesting means. We found that there is unfortunately a positive trend on fire reports among this 20 years - which, only highlights all the issues and help needed for preserving tropical forests. We found that state like Mato Grosso is an extreme observation and combined with Amazonas region would really raise a red flag on how much frequency it generates; also, with the rest of the states how there is no decline, but a steady distribution of fire reports coming year after year! We imputed approximate coordinates for regions given and visualized it on the geographical scale to identify clusters of regions. Also, we looked at statistical distributions among hottest months in Brazil and were able to pin-point the ones with highest medians. Overall, this dataset could definitely have more features so that more information could be analyzed and correlations identified - which would result in doing powerful predictions and machine learning.\n\nI wish for all readers to explore and analyze your data deeply for the best data-driven decisions that can help improve your strategies for projects, research works, businesses, etc. If you liked this post or want to start a discussion - upvote and leave and a comment!","cf2bc9f8":"Here, it is important to note that months presented to us are not in English. Therefore, to make it easier for my analysis and for viewers - it would be helpful to change months into English format.","536f4566":"### Data Source \n\n_Describing the origin of the data sources. What is the format of the original data? How to access the data?_ ","a18c2b5c":"### Exploring and Visualizing Data\n\n_Exploring the data by analyzing its statistics and visualizing the values of features and correlations between different features. Explaining the process and the results_","2879aa1f":"This is a small dataset we are presented with, it has around 6,500 observations and 5 features; it is a mix between categorical and numeric values.","aa1db0d5":"Now, we know which states (top 10) are generating the most fire reports. Let's visualize those numbers to get even a better understanding!","5084f156":"Very interesting! Take a moment to hover over the graph to explore the dynamic features of Plotly. Unfortunately, we can definetly see a growth of fires reported throughout 20 years with couple ups and downs. However, wee can look deeper to understand what regions (states) contribute the most and perhaps generate those spikes and when those reports are most likely to be at its highest - therefore, let's keep looking!"}}