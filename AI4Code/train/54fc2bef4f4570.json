{"cell_type":{"c3e42cc2":"code","7d281125":"code","05b97547":"code","0cea36d2":"code","c7b578dc":"code","4ce09190":"code","48f4c1e6":"code","039ecfe1":"code","33ecceac":"code","1d65ad7b":"code","4777a62b":"code","3832e895":"code","5087af8c":"code","5f71bb09":"code","3c98e02c":"code","06b2d541":"code","c0aecb82":"code","4e5f1ac9":"code","9fee817e":"code","cb48bfde":"code","7dd5281c":"code","b86ed875":"code","b20c14f2":"code","1fd28eb5":"code","19261ee1":"code","551e17db":"code","b0506f3d":"code","6b53c170":"code","5c95b4d8":"code","74b86e07":"code","148fc118":"code","a43d91fa":"code","df93752f":"code","78b86ce8":"code","06a24af8":"code","b0a1bd85":"code","d5808e76":"code","d643bda8":"code","988b01a3":"code","6d3a504b":"code","3ef95b5a":"code","edfd9269":"code","beb8bdf5":"code","ecb120d8":"code","9b813e10":"code","5bd3ce16":"code","0a08c277":"code","7871184b":"code","7a713bf7":"code","df70da0f":"code","9c62f337":"code","fefcaee7":"code","03d3f517":"code","6e7912ae":"code","0c5b1b91":"code","0b1f5036":"code","0cc1dc1b":"code","cbadac67":"code","5277bc48":"code","10f5e5ce":"code","aec7a2ad":"code","43c0c4fd":"code","c5acf5ae":"code","26a197bd":"code","70f5ae4e":"code","c6c50b10":"code","c89da3d6":"code","538a512a":"code","0ba60df3":"code","f3276cd9":"code","25bbeaa5":"code","6013c716":"code","d7a9608b":"code","e09e88d6":"code","7f8512f4":"code","921f24e1":"code","623d1dde":"code","9e452bde":"code","114badaa":"code","6c3d679a":"code","13fdb0de":"code","db6ee276":"code","bda4c8f4":"code","5e122af4":"code","39f5fc65":"code","13408277":"code","ddb8efe6":"code","72fe3265":"markdown"},"source":{"c3e42cc2":"import pandas as pd\nimport numpy as np\npd.options.display.max_columns = None\n","7d281125":"def capitalize_after_hyphen(x):\n\n    a=list(x)\n\n    a[p.index('-')+1]=a[p.index('-')+1].capitalize()\n\n    x=''.join(a)\n\n    return ''.join(a)\n\n \n\nimport pandas as pd\n\nimport requests \n\n#l=['patients','admdissions','diagnoses','drg-codes','icu-stays','procedures','prescriptions','d-icd-diagnoses','d-icd-procedures']\n\nurl1=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/patients?limit=50000&offset=0\"\n\nurl2=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/admissions?limit=50000&offset=0\"\n\nurl3=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/diagnoses?limit=50000&offset=0\"\n\nurl4=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/drg-codes?limit=50000&offset=0\"\n\nurl5=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/icu-stays?limit=50000&offset=0\"\n\nurl6=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/procedures?limit=50000&offset=0\"\n\nurl7=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/prescriptions?limit=50000&offset=0\"\n\nurl8=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/d-icd-diagnoses?limit=50000&offset=0\"\n\nurl9=\"http:\/\/ec2-54-88-151-77.compute-1.amazonaws.com:3001\/v1\/d-icd-procedures?limit=50000&offset=0\"\n\nd={}\n\nurl=[url1,url2,url3,url4,url5,url6,url7,url8,url9]\n\n \n\nfor x in url: \n\n    p = x[(x.index('v1\/')+len('v1\/')):x.index('?limit')]\n\n    try:\n\n        p=capitalize_after_hyphen(p)\n\n    except:\n\n        pass\n\n    try:\n\n        p=p[:p.index('-')]+p[p.index('-')+1:]\n\n    except:\n\n        pass\n\n   \n\n    try:\n\n        p=capitalize_after_hyphen(p)\n\n    except:\n\n        pass\n\n    try:\n\n        p=p[:p.index('-')]+p[p.index('-')+1:]\n\n    except:\n\n        pass\n\n   \n\n    \n\n    print(p)\n\n   \n\n    d['{}'.format(p)]=pd.DataFrame(requests.get(x).json()['{}'.format(p)])\n\n    d['{}'.format(p)].to_csv('{}.csv'.format(p),encoding='utf-8', index=False)","05b97547":"'''\ntables_req = ['admissions','patients','dIcdDiagnoses','dIcdProcedures','diagnoses','drgcodes','icuStays','procedures']\nd={}\nfor x in tables_req:\n        \n        dataframe=pd.read_csv('C:\/Users\/utsavd\/Downloads\/50KData\/{}.csv'.format(x))\n        d[\"{}\".format(x)]=dataframe\n'''","0cea36d2":"for x in d.keys():\n    d[x].drop(['row_id'],axis=1,inplace=True)","c7b578dc":"drgcodes=pd.read_csv('C:\/Users\/utsavd\/Downloads\/drgcodes.csv')\ndrgpatients=pd.read_csv('C:\/Users\/utsavd\/Downloads\/drgPatients.csv')","4ce09190":"drgpatients.drop('row_id',axis=1,inplace=True)\ndrgcodes.drop('row_id',axis=1,inplace=True)","48f4c1e6":"DrgCodes=pd.concat([d['drgcodes'],drgcodes],axis=0)\nDrgCodes.drop_duplicates(keep='first')\nDrgCodes=DrgCodes.sort_values(by='subject_id')\ndrgpatients=drgpatients[drgpatients['dod'].isnull()]","039ecfe1":"DrgCodes=DrgCodes[['subject_id','hadm_id','drg_code','description']]\nDrgCodes=DrgCodes.reset_index(drop=True)","33ecceac":"d['admissions']=d['admissions'][['subject_id','hadm_id','insurance','admission_type','diagnosis','admittime','dischtime','insurance']]\nd['patients']=d['patients'][['dob','subject_id']]","1d65ad7b":"df=pd.merge(d['admissions'],d['patients'],on=['subject_id'],how='left')","4777a62b":"df['timeofstay']=pd.to_datetime(df['dischtime'])-pd.to_datetime(df['admittime'])","3832e895":"df['timeofstay']=df['timeofstay'].dt.days","5087af8c":"df['age']=pd.to_datetime(df['admittime'])-pd.to_datetime(df['dob'])\ndf.drop('dob',axis=1,inplace=True)\ndf['age']=(df['age'].dt.days)\/365\ndf['age']=df['age'].astype(int)","5f71bb09":"def is_emergency(x):\n    if x=='EMERGENCY':\n        return 1\n    else:\n        return 0\ndf['emergency']=df['admission_type'].apply(is_emergency)","3c98e02c":"df.admittime=pd.to_datetime(df.admittime)\ndf.dischtime=pd.to_datetime(df.dischtime)","06b2d541":"df=df.sort_values(['subject_id','admittime'])\ndf=df.sort_values(['subject_id','dischtime'])\ndf=df.reset_index(drop=True)","c0aecb82":"df.drop(['admission_type'],axis=1,inplace=True)\ndf=df.reset_index(drop=True)","4e5f1ac9":"df['readmitted']=df.groupby('subject_id').cumcount()","9fee817e":"df=df[df['age']>=0]","cb48bfde":"df['readmitted']=df['readmitted'].shift(-1)\ndf['readmitted']=df['readmitted'].fillna(0)\ndf['readmitted']=df['readmitted'].astype(int)","7dd5281c":"df=df.reset_index(drop=True)","b86ed875":"df=df[['readmitted', 'subject_id', 'emergency','hadm_id', 'insurance',\n       'timeofstay', 'age', 'diagnosis', 'admittime', 'dischtime'\n       ]]","b20c14f2":"df = df.loc[:,~df.columns.duplicated()]","1fd28eb5":"def calc_read_within_6(test):\n    test=test.reset_index(drop=True)\n    test['total_em_6']=np.zeros(test.shape[0])\n    for x in range(1,test.shape[0]):\n        for j in range(0,x):\n            a=(test.loc[x,'admittime']-test.loc[j,'dischtime']).days\n            if a<365 and test.loc[j,'emergency']==1:\n                test.loc[x,'total_em_6']=test.loc[x,'total_em_6']+1\n    return test","19261ee1":"gp = df.groupby('subject_id')   \ndf1=pd.DataFrame(columns=['subject_id','emergency','admittime','dischtime'])\nreoccuring_ids=list(df['subject_id'].value_counts()[df['subject_id'].value_counts()>1].index)\nfor x in reoccuring_ids:\n    a=gp.get_group(x)[['subject_id','emergency','admittime','dischtime']]\n    df1=pd.concat([df1,calc_read_within_6(a)],axis=0)\n\ndf1=df1.sort_values(by='subject_id')[['subject_id','admittime','total_em_6']]\ndf=pd.merge(df,df1,on=['subject_id','admittime'],how='left')\ndf['total_em_6'].fillna(0,inplace=True)","551e17db":"comorbid=list(drgcodes[drgcodes['description'].str.contains(' CC| MCC')]['subject_id'])","b0506f3d":"comorbid.sort()","6b53c170":"for x in range(0,df.shape[0]):\n    if df.loc[x,'subject_id'] in comorbid:\n        df.loc[x,'comorbid']=1\n    else:\n        df.loc[x,'comorbid']=0","5c95b4d8":"diagnoses=pd.read_csv('C:\/Users\/utsavd\/Downloads\/diagnoses.csv')\n\ndiagnoses.drop(['row_id','seq_num'],axis=1,inplace=True)\n\ndiagnoses=diagnoses.sort_values(by='subject_id')","74b86e07":"df2=pd.merge(df,diagnoses,on=['subject_id','hadm_id'],how='left')","148fc118":"#Charlson's Comorbidity Points Converter\ndef points_tally(x):\n    if x.startswith(('2500','428','410','490','491','492','493','494','495','496','4439','436','43310','290','294','331','710','533')):\n        return 1\n    elif x.startswith(('2504','2505','2506','2507','2509','342','5853','5854','5855','5856','571','202','204','205','206','207','208')):\n        return 2\n    elif x.startswith('042'):\n        return 5\n    elif x.startswith(('190','191','192','193','194','195','196','197','198','199')):\n        return 6\n    else:\n        return 0","a43d91fa":"df2['icd9_code']=df2['icd9_code'].astype(str)\ndf2['icd9_code']=df2['icd9_code'].apply(points_tally)","df93752f":"df=pd.merge(df,df2.groupby(['subject_id','hadm_id'])['icd9_code'].sum().reset_index(),on=['subject_id','hadm_id'],how='left')","78b86ce8":"#df.drop(['diagnosis'],axis=1,inplace=True)","06a24af8":"for x in range(0,df.shape[0]):\n    if df.loc[x,'readmitted']>0:\n        df.loc[x,'t_read']=df.loc[x+1,'admittime']-df.loc[x,'dischtime']        ","b0a1bd85":"df['t_read']=df['t_read'].dt.days","d5808e76":"def classify_for_readmits_within_30(x):\n    if x['readmitted']>0 and x['t_read']<30.0:\n        return 1\n    else:\n        return 0","d643bda8":"df.readmitted=df.apply(classify_for_readmits_within_30,axis=1)","988b01a3":"df['CHRONIC']=np.where(df['diagnosis'].str.contains('CHRONIC',na=False),1,0)","6d3a504b":"df.fillna(0,inplace=True)","3ef95b5a":"icu=d['icuStays'][['subject_id','outtime']]\nicu['outtime']=pd.to_datetime(icu['outtime'])","edfd9269":"def insurance_class(x):\n    if x == 'Medicare' or x == 'Medicaid':\n        return 1\n    else:\n        return 0","beb8bdf5":"df['insurance']=df['insurance'].apply(insurance_class)","ecb120d8":"import seaborn as sns\nimport matplotlib.pyplot as plt","9b813e10":"input_data=df.drop(['subject_id','hadm_id','admittime','dischtime','diagnosis','t_read'],axis=1)","5bd3ce16":"input_data.total_em_6=input_data['total_em_6'].astype(int)\ninput_data.comorbid=input_data.comorbid.astype(int)","0a08c277":"import collections","7871184b":"from sklearn.model_selection import train_test_split","7a713bf7":"x=input_data.drop(['readmitted'],axis=1)\ny=input_data['readmitted']","df70da0f":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\nx=scaler.fit_transform(x)","9c62f337":"X_train, X_test, Y_train, Y_test = train_test_split(x,y , test_size=0.2)","fefcaee7":"from imblearn import under_sampling, over_sampling\nfrom imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(ratio='minority')\nX_sm, Y_sm = smote.fit_sample(X_train,Y_train)\nX_final, Y_final = smote.fit_sample(X_sm,Y_sm)\nX_train=X_final\nY_train=Y_final","03d3f517":"from sklearn.linear_model import LogisticRegression\nLogReg = LogisticRegression(penalty='l1',max_iter=1000)\nLogReg.fit(X_train, Y_train)\nY_pred = LogReg.predict(X_test)\nprint('Accuracy:',LogReg.score(X_test,Y_test).round(2)*100,'%')","6e7912ae":"list(zip(LogReg.coef_.ravel().round(2).tolist(),list(input_data.drop('readmitted',axis=1))))","0c5b1b91":"import pickle\npickle.dump(LogReg, open('interface.sav', 'wb'))","0b1f5036":"sns.set()\nplt.figure(figsize=(15,10))\nax=sns.barplot(y=l,x=['No Readmission','Readmission Within One Month'])\nplt.ylim(0,1)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n    p.get_height()+0.02,\n    '{:1.1f}%'.format(height*100),\n    ha=\"center\",color='black',fontsize=30)","0cc1dc1b":"a=list(LogReg.coef_.round(2).ravel())\nb=list(X_test[3].round(2))\n\nfactors=[0,0,0,0,0,0,0,0]\nfor x in range(0,len(list(LogReg.coef_.round(2).ravel()))):\n    factors[x]=a[x]*b[x]\n\ns = sum(factors); norm = [float(i)\/s for i in factors]\n\nsns.set()\nplt.figure(figsize=(15,10))\nax=sns.barplot(y=norm,x=list(input_data.drop('readmitted',axis=1)))\nplt.ylim(0,1)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n    p.get_height()+0.02,\n    '{:1.1f}%'.format(height*100),\n    ha=\"center\",color='black',fontsize=30)","cbadac67":"pd.crosstab(Y_pred,Y_test,normalize='columns').round(2)","5277bc48":"pd.crosstab(Y_pred,Y_test,normalize='index').round(2)","10f5e5ce":"from sklearn.metrics import roc_auc_score\nroc_auc_score(Y_test, Y_pred)","aec7a2ad":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n# Fit only to the training data\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nfrom sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier()\n\nmlp.fit(X_train,Y_train)\nY_pred = mlp.predict(X_test)","43c0c4fd":"mlp.score(X_test,Y_test)","c5acf5ae":"pd.crosstab(Y_pred,Y_test)","26a197bd":"from sklearn.linear_model import SGDClassifier","70f5ae4e":"sgd=SGDClassifier(alpha=0.1,class_weight='balanced')\nsgd.fit(X_train,Y_train)\nY_pred=sgd.predict(X_test)","c6c50b10":"pd.crosstab(Y_pred,Y_test,normalize='columns').round(2)","c89da3d6":"sgd.score(X_test,Y_test)","538a512a":"from sklearn.metrics import classification_report ","0ba60df3":"print(classification_report(Y_pred,Y_test))","f3276cd9":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = XGBClassifier()\nmodel.fit(X_train, Y_train)\nY_pred=model.predict(X_test)\naccuracy_score(Y_pred,Y_test)","25bbeaa5":"from sklearn.metrics import roc_auc_score\nroc_auc_score(Y_test, Y_pred)","6013c716":"plt.figure(figsize=(15,10))\ndf.groupby('age')['readmitted'].mean().plot.bar()","d7a9608b":"pd.crosstab(Y_pred,Y_test)","e09e88d6":"from sklearn.neighbors import KNeighborsClassifier\n## Instantiate the model with 5 neighbors. \nknn = KNeighborsClassifier(weights='distance')\n## Fit the model on the training data.\nknn.fit(X_train, Y_train)\n## See how the model performs on the test data.\nknn.score(X_test, Y_test)","7f8512f4":"Y_pred=knn.predict(X_test)","921f24e1":"from sklearn.metrics import roc_auc_score\nroc_auc_score(Y_test, Y_pred)","623d1dde":"from sklearn.svm import SVC\nsvc = SVC(class_weight='balanced')\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_test,Y_test), 3)\nacc_svc","9e452bde":"from sklearn.metrics import roc_auc_score\nroc_auc_score(Y_test, Y_pred)","114badaa":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier(max_depth=28, criterion = \"entropy\", min_samples_split=10)","6c3d679a":"tree.fit(X_train,Y_train)","13fdb0de":"tree.score(X_test,Y_test)","db6ee276":"roc_auc_score(Y_pred,Y_test)","bda4c8f4":"pd.crosstab(Y_test,Y_pred)","5e122af4":"from sklearn.ensemble import RandomForestClassifier\nforest=RandomForestClassifier(class_weight='balanced')\nforest.fit(X_train,Y_train)","39f5fc65":"forest.score(X_test,Y_test)","13408277":"Y_pred=forest.predict(X_test)","ddb8efe6":"pd.crosstab(Y_pred,Y_test,normalize='columns')","72fe3265":"# Model Building"}}