{"cell_type":{"705e2b3f":"code","386ea3f1":"code","487948ee":"code","01f86762":"code","3e613978":"code","87967009":"code","7ee63ed8":"code","effd0409":"code","680258d1":"code","e4a92e06":"code","f0f68e7c":"code","a7e3cb00":"code","c6402a95":"code","021a3ee0":"code","9921a8ca":"code","f6079981":"code","ca24a28c":"code","a0f4bed4":"code","e0ad5c80":"code","07bc0642":"code","fcd8a967":"code","6e804556":"code","7918f977":"code","9ee7f3c7":"code","8e48a007":"code","1565eeac":"code","7d235ac5":"code","a89fd3f8":"code","042108a7":"code","019abe8a":"code","ddcfae82":"code","e54f4266":"code","3f8675f5":"code","240ebc2c":"code","c6bc97fb":"code","5b33a4b0":"code","f3f5ebb4":"code","77dec8b7":"code","d431fe15":"code","2af2e45c":"code","77e867dd":"code","9f8bdaf0":"code","c2c312c9":"code","943150a0":"code","38e70389":"code","ee67c32d":"code","8ba3c3dc":"code","b436d88a":"code","5ac88060":"markdown","84ef0294":"markdown","0ba4e2a0":"markdown","19e22609":"markdown","cd442f19":"markdown","2e1371bd":"markdown","c9be9f3a":"markdown","73b5b2e9":"markdown","42a79c02":"markdown","6f182c3f":"markdown","757f1c01":"markdown","f204f5e5":"markdown","6e80cb87":"markdown","190adc28":"markdown","550219c7":"markdown","4eac127d":"markdown","7ba4faf0":"markdown","b9a19c46":"markdown","6ddc5fb1":"markdown","b735c020":"markdown","533ef00a":"markdown"},"source":{"705e2b3f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","386ea3f1":"# Import training\/testing data\ndf_train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_train.head()","487948ee":"\nprint (df_train.shape)\nprint (df_test.shape)","01f86762":"df_train_test = [df_train, df_test]","3e613978":"for df in df_train_test:\n    print (df.get_dtype_counts())\n    print (\" ---------- \")","87967009":"for df in df_train_test:\n    total = df.isnull().sum().sort_values(ascending = False)\n    total = total[df.isnull().sum().sort_values(ascending = False) != 0]\n    percent = total \/ len(df) * 100\n    percent = percent[df.isnull().sum().sort_values(ascending = False) != 0]\n    concat = pd.concat([total, percent], axis=1, keys=['Total','Percent'])\n    print (concat)\n    print ( \"-------------\")","7ee63ed8":"# too many missing values for the following columns.. just drop them\nfor df in df_train_test:\n    df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'FireplaceQu'],axis=1,inplace=True) \n    ","effd0409":"df_train.drop(['Id'],axis=1,inplace=True)","680258d1":"df_test.drop(['Id'],axis=1,inplace=True)","e4a92e06":"df_train.groupby('Neighborhood')['LotFrontage'].mean()","f0f68e7c":"df_train['LotFrontage'] = df_train.groupby('Neighborhood')['LotFrontage'].transform( lambda x: x.fillna(x.mean()))\ndf_test['LotFrontage'] = df_test.groupby('Neighborhood')['LotFrontage'].transform( lambda x: x.fillna(x.mean()))","a7e3cb00":"df_train.dropna(inplace = True)","c6402a95":"print (df_train.isnull().any().sum())\nprint (df_test.isnull().any().sum())","021a3ee0":"print (df_train.shape)\nprint (df_test.shape)","9921a8ca":"sns.distplot(df_train[\"SalePrice\"])","f6079981":"sns.boxplot(df_train[\"SalePrice\"])","ca24a28c":"import scipy.stats as stats\nstats.probplot(df_train[\"SalePrice\"], plot = plt)","a0f4bed4":"df_train = df_train[df_train[\"SalePrice\"] < 700000]","e0ad5c80":"df_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])","07bc0642":"stats.probplot(df_train[\"SalePrice\"], plot = plt)","fcd8a967":"print(abs(df_train.corr())[\"SalePrice\"].sort_values(ascending = False))","6e804556":"df_test.shape","7918f977":"y = df_train['SalePrice'].reset_index(drop=True)","9ee7f3c7":"y.head()","8e48a007":"df_all = pd.concat((df_train, df_test)).reset_index(drop=True)\ndf_all.drop([\"SalePrice\"], axis = 1, inplace = True)\ndf_all.shape","1565eeac":"df_all = pd.get_dummies(df_all, drop_first = True)\n","7d235ac5":"df_all.shape","a89fd3f8":"print (df_all.get_dtype_counts())","042108a7":"for col in df_all.columns:\n    print (col)","019abe8a":"df_all['haspool'] = df_all['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ndf_all['hasgarage'] = df_all['GarageArea'].apply(lambda x: 1 if x > 0 else 0)","ddcfae82":"df_train_X = df_all.iloc[:len(y), :]\ndf_test_X = df_all.iloc[len(y):, :]","e54f4266":"len(y) , df_test_X.shape, df_train_X.shape","3f8675f5":"from sklearn.model_selection import train_test_split\n# Split up training set \nx_train, x_test, y_train, y_test = train_test_split(df_train_X, y, test_size=0.3)","240ebc2c":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(n_estimators = 150 , max_features = 10 )","c6bc97fb":"regr.fit(x_train, y_train)","5b33a4b0":"print (regr.score (x_train, y_train))\nprint (regr.score(x_test, y_test))","f3f5ebb4":"predictions = regr.predict(x_test)","77dec8b7":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_test, predictions))","d431fe15":"np.sqrt(mean_squared_error(np.expm1(y_test), np.expm1(predictions)))","2af2e45c":"feature_importances = pd.DataFrame(regr.feature_importances_, index = df_all.columns, \n                                   columns=['importance']).sort_values('importance', ascending=False)\nfeature_importances.head(20)","77e867dd":"plt.scatter(np.expm1(y_test),np.expm1(predictions))\nplt.title('Predicted vs. Actual')\nplt.xlabel('Actual Sale Price')\nplt.ylabel('Predicted Sale Price')","9f8bdaf0":"df_test_X.head()","c2c312c9":"submission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","943150a0":"submission.head()","38e70389":"df_test_X.shape","ee67c32d":"df_test_X = df_test_X.fillna(0)\npred = np.expm1(regr.predict(df_test_X))\npred.shape","8ba3c3dc":"submission[\"SalePrice\"] = np.expm1(regr.predict(df_test_X))\nsubmission.head()","b436d88a":"submission.to_csv(\"submission.csv\", index=False)","5ac88060":"# Regression with Random Forest\n* make a Random Forest Regressor to predict the sale price of houses.","84ef0294":"### Drop ID","0ba4e2a0":"# Missing Values","19e22609":"### Mean Square Error Evaluation","cd442f19":"# More feature engeneering","2e1371bd":"### Drop all others rows with missing values","c9be9f3a":"# Correlation","73b5b2e9":"## Fit the data","42a79c02":"# Train test split","6f182c3f":"## Categorical features","757f1c01":"# Fill missing values","f204f5e5":"# Predictions","6e80cb87":"# Submission","190adc28":"# Evaluate","550219c7":"# Create X and y","4eac127d":"# Feature importance","7ba4faf0":"* we could drop some features not highly correlated to the target","b9a19c46":"# Target","6ddc5fb1":"# Model: Random Forest","b735c020":"* apply a log transform to the target","533ef00a":"## Outlier"}}