{"cell_type":{"06d795e9":"code","947588ae":"markdown"},"source":{"06d795e9":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex3 import *\n\ndef should_hit(dealer_total, player_total, player_low_aces, player_high_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay.\n    When calculating a hand's total value, we count aces as \"high\" (with value 11) if doing so\n    doesn't bring the total above 21, otherwise we count them as low (with value 1). \n    For example, if the player's hand is {A, A, A, 7}, we will count it as 11 + 1 + 1 + 7,\n    and therefore set player_total=20, player_low_aces=2, player_high_aces=1.\n    \"\"\"\n    \n    if dealer_total > 21:\n        return False\n\n    if (21 - player_total) >= 7 or dealer_total >= player_total:\n        return True\n\n    return False\n\nq7.simulate(n_games=50000)","947588ae":"# How it works\n    The logic is that if the dealer's total is somehow higher than 21 then he would've already lost so there's no reason to risk getting a new card and the function returns False.\n    \n    Now, if the dealer's total is higher than your current total (but not higher than 21), you need to pick a new card otherwise you'll lose. If that's not the case, and you can pick a new card, then there is a 50% probability that your card will be in the first half of the deck (cards 1-7) and a 50% probability that it will be higher than 7. This means that, if you want to pick a new card the difference between the maximum (21) and your current total should be at least 7. In these cases, the function returns True.\n    \n    If neither the difference is at least 7, nor is the dealer winning, then there's no reason to risk getting a new card and losing the game so the function returns False."}}