{"cell_type":{"b16c28e7":"code","7bf5753a":"code","4936b949":"code","dcf1dd41":"code","ba09b81f":"code","30b20075":"code","7473dbaf":"code","a122c7c3":"code","78e2d4e0":"code","e5d13c97":"code","de014ded":"code","d6539b87":"code","c6d3d5a8":"code","65aa7870":"code","328214c8":"code","5e6e4b80":"code","2d77edd4":"markdown","3051652b":"markdown","1a7dcd2d":"markdown","c334626e":"markdown","13a8f4ec":"markdown"},"source":{"b16c28e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\n\nsns.set()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7bf5753a":"df = pd.read_csv('\/kaggle\/input\/wine-quality-dataset\/WineQT.csv')\ndf.head()","4936b949":"df","dcf1dd41":"df.drop('Id', inplace=True, axis=1)\ndf.isna().sum()","ba09b81f":"df.dtypes","30b20075":"for i in df.columns:\n    sns.displot(data=df, x=i)","7473dbaf":"pd.plotting.scatter_matrix(df, figsize=(20,20));","a122c7c3":"sns.pairplot(df, hue='quality')","78e2d4e0":"def norm(x):\n    return ( (x - x.mean()) \/ x.std() )\n\ndef prepare_df(df):\n    target = df.iloc[:, -1]\n    train  = df.iloc[:, :-1]\n    return train, target\n\ndef plot_diff(y_true, y_pred, title=''):\n    plt.scatter(y_true, y_pred)\n    plt.title(title)\n    plt.xlabel('True Values')\n    plt.ylabel('Predictions')\n    plt.axis('equal')\n    plt.axis('square')\n    plt.xlim(plt.xlim())\n    plt.ylim(plt.ylim())\n    plt.plot([-100, 100], [-100, 100])\n    plt.show()\n\n\ndef plot_metrics(metric_name, title, ylim=5):\n    plt.title(title)\n    plt.ylim(0, ylim)\n    plt.plot(history.history[metric_name], color='blue', label=metric_name)\n    plt.plot(history.history['val_' + metric_name], color='green', label='val_' + metric_name)\n    plt.show()","e5d13c97":"from sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Dense, Dropout","de014ded":"train, test               = train_test_split(df, test_size=.1)\ntrain_data, train_targets = prepare_df(train)\ntest_data, test_targets   = prepare_df(test)","d6539b87":"train_inputs              = norm(train_data)\ntest_inputs               = norm(test_data)","c6d3d5a8":"test_targets.unique()","65aa7870":"input = Input(shape=(len(train_inputs.columns),))\n\nx = Dense(50, activation='relu', kernel_initializer='he_normal')(input)\nx = Dropout(.1)(x)\nx = Dense(50, activation='relu')(x)\nx = Dropout(.1)(x)\nx = Dense(50, activation='relu')(x)\n\noutput = Dense(1, activation='relu')(x)\nmodel = Model(inputs=input, outputs=output)\nmodel.summary()","328214c8":"opt = tf.keras.optimizers.Adam()\nmodel.compile(optimizer=opt,\n              loss='mse',\n              metrics=tf.keras.metrics.RootMeanSquaredError())","5e6e4b80":"history = model.fit(train_inputs,\n          train_targets,\n          batch_size=64,\n          epochs=100,\n          #callbacks=[early_stopping],\n          validation_data=(test_inputs, test_targets))","2d77edd4":"### utility Functions","3051652b":"## data processing","1a7dcd2d":"### prepare the data","c334626e":"## data modeling","13a8f4ec":"## data visualization"}}