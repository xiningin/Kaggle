{"cell_type":{"8b303dfa":"code","e16422be":"code","37cefec2":"code","d52b7fb7":"code","b3960e68":"code","ba86481d":"code","f6f51b23":"code","a500f979":"code","19004f27":"code","f8d2f989":"code","3d86db5c":"code","728f74fb":"code","9d410bcc":"code","f5c3be10":"code","9b642a7c":"code","92ea56ca":"code","f0a06c50":"code","269381d4":"code","9a9dfa0b":"code","2e1ab1cf":"code","0ecb7d1b":"code","b5b5b2a9":"code","4293e3e1":"markdown","73b1c459":"markdown","9b3ef0e3":"markdown","e7088def":"markdown","6d209086":"markdown","09ea5010":"markdown","6238eb9b":"markdown","bb12b0b0":"markdown","ea218465":"markdown","66a02e06":"markdown","18c00130":"markdown","f4a60d06":"markdown","c1ee3f7c":"markdown","9c487207":"markdown","0a32902c":"markdown","e4c0f55c":"markdown","d169b3df":"markdown","e820a404":"markdown","32399930":"markdown","527ab69e":"markdown","ed71964e":"markdown","8f6c20cd":"markdown","6bdac387":"markdown","bc4308f6":"markdown"},"source":{"8b303dfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings  \nwarnings.filterwarnings('ignore')\n\n# Any results you write to the current directory are saved as output.","e16422be":"#Installing specific version of plotly to avoid Invalid property for color error in recent version which needs change in layout\n!pip install plotly==2.7.0\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.plotly as py\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)","37cefec2":"import pandas as pd\ntime_series_df=pd.read_csv('..\/input\/time-series-data\/time_series_data.csv')\ntime_series_df.head()\n","d52b7fb7":"time_series_df.load_date = pd.to_datetime(time_series_df.load_date, format='%Y%m%d')\ntime_series_df = time_series_df.sort_values(by=\"load_date\")\ntime_series_df = time_series_df.reset_index(drop=True)\ntime_series_df.head()","b3960e68":"actual_vals = time_series_df.actuals.values\nactual_log = np.log10(actual_vals)\n","ba86481d":"import math\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nfrom sklearn.metrics import mean_squared_error\nfrom matplotlib import pyplot\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.tools as tls\n\ntrain, test = actual_vals[0:-70], actual_vals[-70:]\n\ntrain_log, test_log = np.log10(train), np.log10(test)\n\nmy_order = (1, 1, 1)\nmy_seasonal_order = (0, 1, 1, 7)\n\n","f6f51b23":"history = [x for x in train_log]\npredictions = list()\npredict_log=list()\nfor t in range(len(test_log)):\n    model = sm.tsa.SARIMAX(history, order=my_order, seasonal_order=my_seasonal_order,enforce_stationarity=False,enforce_invertibility=False)\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    predict_log.append(output[0])\n    yhat = 10**output[0]\n    predictions.append(yhat)\n    obs = test_log[t]\n    history.append(obs)\n   # print('predicted=%f, expected=%f' % (output[0], obs))\n#error = math.sqrt(mean_squared_error(test_log, predict_log))\n#print('Test rmse: %.3f' % error)\n# plot\nfigsize=(12, 7)\nplt.figure(figsize=figsize)\npyplot.plot(test,label='Actuals')\npyplot.plot(predictions, color='red',label='Predicted')\npyplot.legend(loc='upper right')\npyplot.show()","a500f979":"!pip install pyramid-arima","19004f27":"from pyramid.arima import auto_arima\nstepwise_model = auto_arima(train_log, start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=7,\n                           start_P=0, seasonal=True,\n                           d=1, D=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\nprint(stepwise_model)","f8d2f989":"import math\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nfrom sklearn.metrics import mean_squared_error\ntrain, test = actual_vals[0:-70], actual_vals[-70:]\n\ntrain_log, test_log = np.log10(train), np.log10(test)\n\n# split data into train and test-sets\n\nhistory = [x for x in train_log]\npredictions = list()\npredict_log=list()\nfor t in range(len(test_log)):\n    #model = sm.tsa.SARIMAX(history, order=my_order, seasonal_order=my_seasonal_order,enforce_stationarity=False,enforce_invertibility=False)\n    stepwise_model.fit(history)\n    output = stepwise_model.predict(n_periods=1)\n    predict_log.append(output[0])\n    yhat = 10**output[0]\n    predictions.append(yhat)\n    obs = test_log[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (output[0], obs))\n#error = math.sqrt(mean_squared_error(test_log, predict_log))\n#print('Test rmse: %.3f' % error)\n# plot\nfigsize=(12, 7)\nplt.figure(figsize=figsize)\npyplot.plot(test,label='Actuals')\npyplot.plot(predictions, color='red',label='Predicted')\npyplot.legend(loc='upper right')\npyplot.show()","3d86db5c":"predicted_df=pd.DataFrame()\npredicted_df['load_date']=time_series_df['load_date'][-70:]\npredicted_df['actuals']=test\npredicted_df['predicted']=predictions\npredicted_df.reset_index(inplace=True)\ndel predicted_df['index']\npredicted_df.head()","728f74fb":"import numpy as np\ndef detect_classify_anomalies(df,window):\n    df.replace([np.inf, -np.inf], np.NaN, inplace=True)\n    df.fillna(0,inplace=True)\n    df['error']=df['actuals']-df['predicted']\n    df['percentage_change'] = ((df['actuals'] - df['predicted']) \/ df['actuals']) * 100\n    df['meanval'] = df['error'].rolling(window=window).mean()\n    df['deviation'] = df['error'].rolling(window=window).std()\n    df['-3s'] = df['meanval'] - (2 * df['deviation'])\n    df['3s'] = df['meanval'] + (2 * df['deviation'])\n    df['-2s'] = df['meanval'] - (1.75 * df['deviation'])\n    df['2s'] = df['meanval'] + (1.75 * df['deviation'])\n    df['-1s'] = df['meanval'] - (1.5 * df['deviation'])\n    df['1s'] = df['meanval'] + (1.5 * df['deviation'])\n    cut_list = df[['error', '-3s', '-2s', '-1s', 'meanval', '1s', '2s', '3s']]\n    cut_values = cut_list.values\n    cut_sort = np.sort(cut_values)\n    df['impact'] = [(lambda x: np.where(cut_sort == df['error'][x])[1][0])(x) for x in\n                               range(len(df['error']))]\n    severity = {0: 3, 1: 2, 2: 1, 3: 0, 4: 0, 5: 1, 6: 2, 7: 3}\n    region = {0: \"NEGATIVE\", 1: \"NEGATIVE\", 2: \"NEGATIVE\", 3: \"NEGATIVE\", 4: \"POSITIVE\", 5: \"POSITIVE\", 6: \"POSITIVE\",\n              7: \"POSITIVE\"}\n    df['color'] =  df['impact'].map(severity)\n    df['region'] = df['impact'].map(region)\n    df['anomaly_points'] = np.where(df['color'] == 3, df['error'], np.nan)\n    df = df.sort_values(by='load_date', ascending=False)\n    df.load_date = pd.to_datetime(df['load_date'].astype(str), format=\"%Y-%m-%d\")\n\n    return df\n","9d410bcc":"\ndef plot_anomaly(df,metric_name):\n    #error = pd.DataFrame(Order_results.error.values)\n    #df = df.sort_values(by='load_date', ascending=False)\n    #df.load_date = pd.to_datetime(df['load_date'].astype(str), format=\"%Y%m%d\")\n    dates = df.load_date\n    #meanval = error.rolling(window=window).mean()\n    #deviation = error.rolling(window=window).std()\n    #res = error\n\n    #upper_bond=meanval + (2 * deviation)\n    #lower_bond=meanval - (2 * deviation)\n\n    #anomalies = pd.DataFrame(index=res.index, columns=res.columns)\n    #anomalies[res < lower_bond] = res[res < lower_bond]\n    #anomalies[res > upper_bond] = res[res > upper_bond]\n    bool_array = (abs(df['anomaly_points']) > 0)\n\n\n\n    #And a subplot of the Actual Values.\n    actuals = df[\"actuals\"][-len(bool_array):]\n    anomaly_points = bool_array * actuals\n    anomaly_points[anomaly_points == 0] = np.nan\n\n    #Order_results['meanval']=meanval\n    #Order_results['deviation']=deviation\n\n    color_map= {0: \"'rgba(228, 222, 249, 0.65)'\", 1: \"yellow\", 2: \"orange\", 3: \"red\"}\n    table = go.Table(\n    domain=dict(x=[0, 1],\n                y=[0, 0.3]),\n    columnwidth=[1, 2 ],\n    #columnorder=[0, 1, 2,],\n    header = dict(height = 20,\n                  values = [['<b>Date<\/b>'],['<b>Actual Values <\/b>'],\n                            ['<b>Predicted<\/b>'], ['<b>% Difference<\/b>'],['<b>Severity (0-3)<\/b>']],\n                 font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                  fill = dict(color='#d562be')),\n    cells = dict(values = [df.round(3)[k].tolist() for k in ['load_date', 'actuals', 'predicted',\n                                                               'percentage_change','color']],\n                 line = dict(color='#506784'),\n                 align = ['center'] * 5,\n                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),\n                 #format = [None] + [\",.4f\"] + [',.4f'],\n\n                 #suffix=[None] * 4,\n                 suffix=[None] + [''] + [''] + ['%'] + [''],\n                 height = 27,\n                 #fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))\n                 fill=dict(color=  # ['rgb(245,245,245)',#unique color for the first column\n                      [df['color'].map(color_map)],\n                      )\n    ))\n\n\n    #df['ano'] = np.where(df['color']==3, df['error'], np.nan)\n\n    anomalies = go.Scatter(name=\"Anomaly\",\n                       x=dates,\n                       xaxis='x1',\n                       yaxis='y1',\n                       y=df['anomaly_points'],\n                       mode='markers',\n                       marker = dict(color ='red',\n                      size = 11,line = dict(\n                                         color = \"red\",\n                                         width = 2)))\n\n    upper_bound = go.Scatter(hoverinfo=\"skip\",\n                         x=dates,\n                         showlegend =False,\n                         xaxis='x1',\n                         yaxis='y1',\n                         y=df['3s'],\n                         marker=dict(color=\"#444\"),\n                         line=dict(\n                             color=('rgb(23, 96, 167)'),\n                             width=2,\n                             dash='dash'),\n                         fillcolor='rgba(68, 68, 68, 0.3)',\n                         fill='tonexty')\n\n    lower_bound = go.Scatter(name='Confidence Interval',\n                          x=dates,\n                         xaxis='x1',\n                         yaxis='y1',\n                          y=df['-3s'],\n                          marker=dict(color=\"#444\"),\n                          line=dict(\n                              color=('rgb(23, 96, 167)'),\n                              width=2,\n                              dash='dash'),\n                          fillcolor='rgba(68, 68, 68, 0.3)',\n                          fill='tonexty')\n\n    Actuals = go.Scatter(name= 'Actuals',\n                     x= dates,\n                     y= df['actuals'],\n                    xaxis='x2', yaxis='y2',\n                     mode='line',\n                     marker=dict(size=12,\n                                 line=dict(width=1),\n                                 color=\"blue\"))\n\n    Predicted = go.Scatter(name= 'Predicted',\n                     x= dates,\n                     y= df['predicted'],\n                    xaxis='x2', yaxis='y2',\n                     mode='line',\n                     marker=dict(size=12,\n                                 line=dict(width=1),\n                                 color=\"orange\"))\n\n\n\n    # create plot for error...\n    Error = go.Scatter(name=\"Error\",\n                   x=dates, y=df['error'],\n                   xaxis='x1',\n                   yaxis='y1',\n                   mode='line',\n                   marker=dict(size=12,\n                               line=dict(width=1),\n                               color=\"red\"),\n                   text=\"Error\")\n\n\n\n    anomalies_map = go.Scatter(name = \"anomaly actual\",\n                                   showlegend=False,\n                                   x=dates,\n                                   y=anomaly_points,\n                                   mode='markers',\n                                   xaxis='x2',\n                                   yaxis='y2',\n                                    marker = dict(color =\"red\",\n                                  size = 11,\n                                 line = dict(\n                                     color = \"red\",\n                                     width = 2)))\n\n    Mvingavrg = go.Scatter(name=\"Moving Average\",\n                           x=dates,\n                           y=df['meanval'],\n                           mode='line',\n                           xaxis='x1',\n                           yaxis='y1',\n                           marker=dict(size=12,\n                                       line=dict(width=1),\n                                       color=\"green\"),\n                           text=\"Moving average\")\n\n\n\n\n    axis=dict(\n    showline=True,\n    zeroline=False,\n    showgrid=True,\n    mirror=True,\n    ticklen=4,\n    gridcolor='#ffffff',\n    tickfont=dict(size=10))\n\n    layout = dict(\n    width=1000,\n    height=865,\n    autosize=False,\n    title= metric_name,\n    margin = dict(t=75),\n    showlegend=True,\n    xaxis1=dict(axis, **dict(domain=[0, 1], anchor='y1', showticklabels=True)),\n    xaxis2=dict(axis, **dict(domain=[0, 1], anchor='y2', showticklabels=True)),\n    yaxis1=dict(axis, **dict(domain=[2 * 0.21 + 0.20 + 0.09, 1], anchor='x1', hoverformat='.2f')),\n    yaxis2=dict(axis, **dict(domain=[0.21 + 0.12, 2 * 0.31 + 0.02], anchor='x2', hoverformat='.2f')))\n\n\n\n\n\n\n    fig = go.Figure(data = [table,anomalies,anomalies_map,\n                        upper_bound,lower_bound,Actuals,Predicted,\n                        Mvingavrg,Error], layout = layout)\n\n    iplot(fig)\n    pyplot.show()\n","f5c3be10":"classify_df=detect_classify_anomalies(predicted_df,7)\nclassify_df.reset_index(inplace=True)\ndel classify_df['index']\nclassify_df.head()","9b642a7c":"plot_anomaly(classify_df.iloc[:-6,:],\"metric_name\")","92ea56ca":"from pandas import DataFrame\nfrom pandas import Series\nfrom pandas import concat\nfrom pandas import read_csv\nfrom pandas import datetime\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom math import sqrt\n","f0a06c50":"\n# frame a sequence as a supervised learning problem\ndef timeseries_to_supervised(data, lag=1):\n    df = DataFrame(data)\n    columns = [df.shift(i) for i in range(1, lag+1)]\n    columns.append(df)\n    df = concat(columns, axis=1)\n    df.fillna(0, inplace=True)\n    return df\n\n# create a differenced series\ndef difference(dataset, interval=1):\n    diff = list()\n    for i in range(interval, len(dataset)):\n        value = dataset[i] - dataset[i - interval]\n        diff.append(value)\n    return Series(diff)\n\n# invert differenced value\ndef inverse_difference(history, yhat, interval=1):\n    return yhat + history[-interval]\n\n# scale train and test data to [-1, 1]\ndef scale(train, test):\n    # fit scaler\n    scaler = MinMaxScaler(feature_range=(-1, 1))\n    scaler = scaler.fit(train)\n    # transform train\n    train = train.reshape(train.shape[0], train.shape[1])\n    train_scaled = scaler.transform(train)\n    # transform test\n    test = test.reshape(test.shape[0], test.shape[1])\n    test_scaled = scaler.transform(test)\n    return scaler, train_scaled, test_scaled\n\n# inverse scaling for a forecasted value\ndef invert_scale(scaler, X, value):\n    new_row = [x for x in X] + [value]\n    array = np.array(new_row)\n    array = array.reshape(1, len(array))\n    inverted = scaler.inverse_transform(array)\n    return inverted[0, -1]\n\n# fit an LSTM network to training data\ndef fit_lstm(train, batch_size, nb_epoch, neurons):\n    X, y = train[:, 0:-1], train[:, -1]\n    X = X.reshape(X.shape[0], 1, X.shape[1])\n    model = Sequential()\n    model.add(LSTM(neurons, batch_input_shape=(batch_size, X.shape[1], X.shape[2]), stateful=True))\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    for i in range(nb_epoch):\n        model.fit(X, y, epochs=1, batch_size=batch_size, verbose=0, shuffle=False)\n        model.reset_states()\n    return model\n\n# make a one-step forecast\ndef forecast_lstm(model, batch_size, X):\n    X = X.reshape(1, 1, len(X))\n    yhat = model.predict(X, batch_size=batch_size)\n    return yhat[0,0]","269381d4":"\n#### LSTM\nsupervised = timeseries_to_supervised(actual_log, 1)\nsupervised_values = supervised.values\n\n# split data into train and test-sets\ntrain_lstm, test_lstm = supervised_values[0:-70], supervised_values[-70:]\n\n# transform the scale of the data\nscaler, train_scaled_lstm, test_scaled_lstm = scale(train_lstm, test_lstm)","9a9dfa0b":"# fit the model                 batch,Epoch,Neurons\nlstm_model = fit_lstm(train_scaled_lstm, 1, 850 , 3)\n# forecast the entire training dataset to build up state for forecasting\ntrain_reshaped = train_scaled_lstm[:, 0].reshape(len(train_scaled_lstm), 1, 1)\n#lstm_model.predict(train_reshaped, batch_size=1)","2e1ab1cf":"from matplotlib import pyplot\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.tools as tls\n\n# walk-forward validation on the test data\npredictions = list()\nfor i in range(len(test_scaled_lstm)):\n#make one-step forecast\n    X, y = test_scaled_lstm[i, 0:-1], test_scaled_lstm[i, -1]\n    yhat = forecast_lstm(lstm_model, 1, X)\n    # invert scaling\n    yhat = invert_scale(scaler, X, yhat)\n    # invert differencing\n    #yhat = inverse_difference(raw_values, yhat, len(test_scaled)+1-i)\n    # store forecast\n    predictions.append(10**yhat)\n    expected = actual_log[len(train_lstm) + i ]\n# line plot of observed vs predicted\nfigsize=(12, 7)\nplt.figure(figsize=figsize)\npyplot.plot(actual_vals[-70:],label='Actuals')\npyplot.plot(predictions, color = \"red\",label='Predicted')\npyplot.legend(loc='upper right')\npyplot.show()","0ecb7d1b":"tf_df=pd.read_csv('..\/input\/forecast-metric2\/time_series_metric2.csv')\ntf_df.head()","b5b5b2a9":"actual_vals = tf_df.actuals.values\ntrain, test = actual_vals[0:-70], actual_vals[-70:]\ntrain_log, test_log = np.log10(train), np.log10(test)\nfrom pyramid.arima import auto_arima\nstepwise_model = auto_arima(train_log, start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=7,\n                           start_P=0, seasonal=True,\n                           d=1, D=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\nhistory = [x for x in train_log]\npredictions = list()\npredict_log=list()\nfor t in range(len(test_log)):\n    #model = sm.tsa.SARIMAX(history, order=my_order, seasonal_order=my_seasonal_order,enforce_stationarity=False,enforce_invertibility=False)\n    stepwise_model.fit(history,enforce_stationarity=False,enforce_invertibility=False)\n    output = stepwise_model.predict(n_periods=1)\n    predict_log.append(output[0])\n    yhat = 10**output[0]\n    predictions.append(yhat)\n    obs = test_log[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (output[0], obs))\n#error = math.sqrt(mean_squared_error(test_log, predict_log))\n#print('Test rmse: %.3f' % error)\n# plot\nfigsize=(12, 7)\nplt.figure(figsize=figsize)\npyplot.plot(test,label='Actuals')\npyplot.plot(predictions, color='red',label='Predicted')\npyplot.legend(loc='upper right')\npyplot.show()","4293e3e1":"Below is a function to visualize the results. **Again the importance of clear comprehensive visualization helps business users give feedback on anomalies and  makes the results actionable.**\n\nThe first plot has the error term with the upper and lower limit boundary specified. \n\nThe Plot of actuals with anomalies highlighted would be easy for a user to interpret\/validate. So the second plot has actuals and predicted values with anomalies highlighted.\n\n**Blue line- Actuals**\n\n**Orange Line- Predicted**\n\n**Red- Error**\n\n**Green - Moving Average**\n\n**Dotted lines - Upper and Lower bound for normal behavior**","73b1c459":"This is a good time series forecast. **Trend, Seasonality** are two important factors in time series data and if your algorithm is able to capture the trend of your data(upward\/downward) and in case your data is seasonal(weekly,daily,yearly pattern) visually then your algorithm fits your case.\n\nHere we can observe our SARIMA algorithm captures the trend from the spikes(not by replicating it but by just capturing the spike) and predicts well with the actuals during normal days.","9b3ef0e3":"Forecast data using LSTM and plot the results","e7088def":"The LSTM too works well for this metric. The important parameters of LSTM neural network are the **activation function, the number of neurons,batch size and epoch** which needs to be tuned for better results","6d209086":"Installing and importing libraries for visualization","09ea5010":"By using a **rolling mean and standard deviation** here we are able to avoid continuous false anomalies during scenarios like **big sale days.** \n\nThe first spike or dip is highlighted after which the thresholds get adjusted.\n\nAlso the table which provides actual data,predicted, the change and conditional formatting based on level of anomalies.","6238eb9b":"Call the plot function and visualize the results.","bb12b0b0":"We have results of forecast and actuals, to detect anomalies using this information,I m using a property of **distribution of data**. Note this will work only if the data is distributed  **normal\/gaussian**.\n\nSteps I do to detect anomalies:\n1. Compute the **error** term(actual- predicted).\n2. Compute the **rolling mean and rolling standard deviation**(window is a week).\n3. Classify data with an error of 1.5,1.75 and 2 standard deviations as limits for low,medium and high **anomalies**. (5% of data point would be identified anomalies based on this property)\n\nI have used lambda function for classifying anomalies based error and standard deviation rather than having separate loops and function for it.","ea218465":"Now the auto arima model can be used for stepwise forecast by the same process we performed above:","66a02e06":"The order of data here is important and should be **chronological** as we are going to forecast the next point.\n\nConvert the load_date column to datetime format and sort the data based on date.","18c00130":"At a time we predict the **next data point**  and we loop through train data to predict the next data and add the next data point after prediction for further forecasting. \n\nThis is like a moving window daily level data(For eg: Previous 90 points are used to predict the next point at any given time).\n\nConvert the predicted data back to scale by **power 10 transform** and plot the results.","f4a60d06":"Below are helper functions for differencing,scaling along with inverse of them and Training,forecasting  of the **LSTM**.","c1ee3f7c":"The time series data here is at a  **daily level**  from Jan 11 to December 11. ","9c487207":"In this scenario auto arima and our initial SARIMA does well in forecasting also by not too much chasing the actuals.\n\nNext to visualize lets create a dataframe with actuals data available and results of prediction  ","0a32902c":"Extract the values and apply **log transform** to stabilize the **variance** in the data or to make it  **stationary** before feeding it to the model.","e4c0f55c":"Next we also try forecasting using LSTM which is a recurrent neural network. \n\nhttps:\/\/machinelearningmastery.com\/time-series-prediction-lstm-recurrent-neural-networks-python-keras\/ is a really good tutorial of time series forecasting using LSTM and we are going to use some parts of the code here for our use case.\n\n","d169b3df":"Train the LSTM neural network on train data.","e820a404":"Divide the data to train and test with 70 points in test data.\n\nFirst let's try to apply SARIMA algorithm for forecasting. SARIMA stands for **Seasonal Auto Regressive Integrated Moving Average.**  It has a seasonal parameter which we initialize as 7 due to weekly seasonality of our sales data. Other parameters are p,d,q which are identified based on ACF and PACF plots or ideally we should use the parameters with minimal error in forecasting.\n\nMore details can be found here: https:\/\/people.duke.edu\/~rnau\/arimrule.htm\n \n I m not getting into the problem of getting the right set of parameters here which we will solve later using **Auto Arima** which allows us to get the best set of parameters in a range with minimal error.\n \n Here I m specifying the differencing factor(d) as 1. It helps us to remove trends and cycles in the data.","32399930":"With the same procedure followed above we use auto arima to get the best parameters and forecast stepwise. \n\nPlot the results of actuals and predictions made.","527ab69e":"Lets find p and q parameters using auto_arima and specify d as 1 for first order differencing and seasonality as 7 for weekly seasonality.","ed71964e":"Here the algorithm tries to **chase down the actuals**. Though this might be a good forecast where the error is low but the **anomalous behaviour** in the actuals cant be identified using this.\n\nThis is a problem of using forecasting techniques for anomaly detection.**We are trying to capture trends\/seasonality in data along with not optimising too much on the error to get an exact replica of actuals(which makes us difficult to find anomalies).**\n\nEvery metric needs to be validated with parameters fine-tuned so that anomalies are detected when using forecasting for detecting anomalies. Also for metrics with different distribution of data a different approach in identifying anomalies needs to be followed.\n\nOne more con is, **Isolation forest we detected anomalies for a use case which comprised of multiple metrics at a time and we drilled down to anomalies on individual metrics in them.Whereas using forecasting mechanism we need a separate correlation logic as forecasting is individual for metrics.**\n\nWhereas an algorithm like isolation forest separates out anomalous behavior from the data which can be used to generalize to multiple metrics.","8f6c20cd":"Now lets try this out in a different metric data. The data is for same time period. ","6bdac387":"The parameter we specified here seems to work well for the metric but it would be an exhaustive task to do the plots verify and tune the parameters. A solution to this is **Auto Arima** which returns the best set of parameters for the algorithm in our specified range. \n\nInstall pyramid-arima for auto arima.","bc4308f6":"Hi, this is a follow-up article on **anomaly detection**(Link to the previous article: https:\/\/www.kaggle.com\/adithya44\/anomaly-detection-isolation-forest-visualization where we did anomaly detection using unsupervised learning).\n\nHere we will see about detecting anomalies with **time series forecasting**. Time series is any data which is associated with time(daily, hourly, monthly etc). For eg: revenue at a store every day is a time series data at a **day level**. Many use cases like **demand estimation, sales forecasting** is a typical time series forecasting problem which could be solved by algorithms like **SARIMA, LSTM, Holtwinters** etc. Time series forecasting helps us in preparing us for future needs by estimating them with the current data. Once we have the forecast we can use that data to detect anomalies on comparing them with actuals. Let's implement it and look at its pros and cons.\n\n\n"}}