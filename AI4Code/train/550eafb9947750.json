{"cell_type":{"c0fd3e91":"code","74ea1fd6":"code","0bfffdd1":"code","e293c9e3":"code","f55328ca":"code","af2ddad5":"code","29765daa":"code","79be23f7":"code","a7222fb2":"code","3fdc69be":"code","0ec7177b":"code","cd7f8efa":"code","cfde7ad6":"code","c3bde16d":"code","9de571b1":"code","8a28a052":"code","8d8f7b09":"code","b12e3657":"code","42031bdc":"code","b4bb0f2e":"code","f4ca973d":"code","cfb40379":"code","3527e21b":"code","f56fed81":"code","13c9dfc5":"code","13910782":"code","e3e1cfbb":"code","9bfaa013":"code","7ac09e37":"code","28bff639":"code","e5115840":"code","3359c31d":"code","37e118f7":"code","ff9ebb43":"code","9aefee33":"code","9f9be0a1":"code","c7946a64":"code","fabd10d6":"code","9ca1646c":"code","5cf3fdea":"code","4e4c8c83":"code","05881d32":"code","85ba279d":"markdown","7136ed3a":"markdown","06995e9f":"markdown","9835763c":"markdown","926768e7":"markdown","862b6258":"markdown","0fc8c6ab":"markdown","d1359231":"markdown","ca3f0391":"markdown","ec423f4b":"markdown","a06961f6":"markdown","67395059":"markdown","7b059d9e":"markdown","c0b3b85f":"markdown","1c7c9d2d":"markdown","a5f531ab":"markdown","37988193":"markdown","ff27d0f1":"markdown","b54293b7":"markdown","d78dd99c":"markdown","ac1eb3c9":"markdown","97e30e80":"markdown","9f5210cb":"markdown","367781df":"markdown","a0fb8e57":"markdown","bd4001cb":"markdown","8d18acec":"markdown","692ca793":"markdown","57195ce8":"markdown","e9f4902f":"markdown","863d7b54":"markdown","e7854f17":"markdown","be69d662":"markdown","6852b415":"markdown","9cc20b87":"markdown","97ecd184":"markdown"},"source":{"c0fd3e91":"# Installs\n!pip install pycountry_convert \n!pip install folium\n!pip install calmap\n# !pip install pandas==0.25.1\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_deaths_v3.h5\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_confirmed_v3.h5\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_usa_c_v2.h5","74ea1fd6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport calmap\n\nfrom keras.layers import Input, Dense, Activation, LeakyReLU\nfrom keras import models\nfrom keras.optimizers import RMSprop, Adam\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","0bfffdd1":"# Retriving Dataset\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\n# df_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')\ndf_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\ndf_table = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\",parse_dates=['Last_Update'])","e293c9e3":"# new dataset \ndf_covid19 = df_covid19.drop([\"People_Tested\",\"People_Hospitalized\",\"UID\",\"ISO3\",\"Mortality_Rate\"],axis =1)\ndf_covid19.head(2)","f55328ca":"df_confirmed.head(2)","af2ddad5":"df_confirmed = df_confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = df_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"country\"})\ndf_covid19[\"Active\"] = df_covid19[\"Confirmed\"]-df_covid19[\"Recovered\"]-df_covid19[\"Deaths\"]\n# df_recovered = df_recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})","29765daa":"# Changing the conuntry names as required by pycountry_convert Lib\ndf_confirmed.loc[df_confirmed['country'] == \"US\", \"country\"] = \"USA\"\ndf_deaths.loc[df_deaths['country'] == \"US\", \"country\"] = \"USA\"\ndf_covid19.loc[df_covid19['country'] == \"US\", \"country\"] = \"USA\"\ndf_table.loc[df_table['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\n# df_recovered.loc[df_recovered['country'] == \"US\", \"country\"] = \"USA\"\n\n\ndf_confirmed.loc[df_confirmed['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_deaths.loc[df_deaths['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_covid19.loc[df_covid19['country'] == \"Korea, South\", \"country\"] = \"South Korea\"\ndf_table.loc[df_table['Country_Region'] == \"Korea, South\", \"Country_Region\"] = \"South Korea\"\n# df_recovered.loc[df_recovered['country'] == 'Korea, South', \"country\"] = 'South Korea'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_deaths.loc[df_deaths['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_covid19.loc[df_covid19['country'] == \"Taiwan*\", \"country\"] = \"Taiwan\"\ndf_table.loc[df_table['Country_Region'] == \"Taiwan*\", \"Country_Region\"] = \"Taiwan\"\n# df_recovered.loc[df_recovered['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Kinshasa)\", \"country\"] = \"Democratic Republic of the Congo\"\ndf_table.loc[df_table['Country_Region'] == \"Congo (Kinshasa)\", \"Country_Region\"] = \"Democratic Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_deaths.loc[df_deaths['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_covid19.loc[df_covid19['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_table.loc[df_table['Country_Region'] == \"Cote d'Ivoire\", \"Country_Region\"] = \"C\u00f4te d'Ivoire\"\n# df_recovered.loc[df_recovered['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\n\ndf_confirmed.loc[df_confirmed['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_deaths.loc[df_deaths['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_covid19.loc[df_covid19['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_table.loc[df_table['Country_Region'] == \"Reunion\", \"Country_Region\"] = \"R\u00e9union\"\n# df_recovered.loc[df_recovered['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Brazzaville)\", \"country\"] = \"Republic of the Congo\"\ndf_table.loc[df_table['Country_Region'] == \"Congo (Brazzaville)\", \"Country_Region\"] = \"Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_deaths.loc[df_deaths['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_covid19.loc[df_covid19['country'] == \"Bahamas, The\", \"country\"] = \"Bahamas\"\ndf_table.loc[df_table['Country_Region'] == \"Bahamas, The\", \"Country_Region\"] = \"Bahamas\"\n# df_recovered.loc[df_recovered['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_deaths.loc[df_deaths['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_covid19.loc[df_covid19['country'] == \"Gambia, The\", \"country\"] = \"Gambia\"\ndf_table.loc[df_table['Country_Region'] == \"Gambia\", \"Country_Region\"] = \"Gambia\"\n# df_recovered.loc[df_recovered['country'] == 'Gambia, The', \"country\"] = 'Gambia'\n\n# getting all countries\ncountries = np.asarray(df_confirmed[\"country\"])\ncountries1 = np.asarray(df_covid19[\"country\"])\n# Continent_code to Continent_names\ncontinents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}\n\n# Defininng Function for getting continent code for country.\ndef country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'\n\n#Collecting Continent Information\ndf_confirmed.insert(2,\"continent\", [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_deaths.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_covid19.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in countries1[:]])\ndf_table.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in df_table[\"Country_Region\"].values])\n# df_recovered.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]] )   ","79be23f7":"df_table = df_table[df_table[\"continent\"] != \"Others\"]","a7222fb2":"df_deaths[df_deaths[\"continent\" ]== 'Others']","3fdc69be":"# df_active = df_confirmed.copy()\n# df_active.iloc[:,5:] = df_active.iloc[:,5:] - df_recovered.iloc[:,5:] - df_deaths.iloc[:,5:]\n# df_active.head(5)","0ec7177b":"df_confirmed = df_confirmed.replace(np.nan, '', regex=True)\ndf_deaths = df_deaths.replace(np.nan, '', regex=True)\n# df_recovered = df_recovered.replace(np.nan, '', regex=True)\n# df_active = df_active.replace(np.nan, '', regex=True)","cd7f8efa":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n    \n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    plt.minorticks_on()\n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    ax.set_axisbelow(True)\n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"darkcyan\",\"crimson\"]\n    marker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=4, markerfacecolor='#ffffff')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n        plt.fill_between(date,cases,color=color[i],alpha=0.3)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\nout = \"\"#+\"output\/\"","cfde7ad6":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','continent','Last_Update'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\n\ndf_continents_cases = df_covid19.copy().drop(['Lat','Long_','country','Last_Update'],axis =1)\ndf_continents_cases = df_continents_cases.groupby([\"continent\"]).sum()\n\ndf_countries_cases.fillna(0,inplace=True)\ndf_continents_cases.fillna(0,inplace=True)","c3bde16d":"df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"Deaths\"]\/df_t[\"Confirmed\"],2)\ndf_t.style.background_gradient(cmap='Wistia',axis=1).format(\"{:.0f}\",subset=[\"Confirmed\"])","9de571b1":"df_continents_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_continents_cases[\"Deaths\"]\/df_continents_cases[\"Confirmed\"],2)\ndf_continents_cases.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incident_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","8a28a052":"# df_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Wistia')\ndf_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incident_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","8d8f7b09":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 Countries (Confirmed Cases).png')","b12e3657":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Deaths')[\"Deaths\"].index[-10:],df_countries_cases.sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Deaths Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Deaths Cases).png')","42031bdc":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Active')[\"Active\"].index[-10:],df_countries_cases.sort_values('Active')[\"Active\"].values[-10:],color=\"darkorange\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Active Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Active Cases).png')","b4bb0f2e":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Recovered')[\"Recovered\"].index[-10:],df_countries_cases.sort_values('Recovered')[\"Recovered\"].values[-10:],color=\"limegreen\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Recovered Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Recovered Cases).png')","f4ca973d":"# f = plt.figure(figsize=(20,10))\n# f.add_subplot(2,1,1)\n# calmap.yearplot(test['cases'], fillcolor='white', cmap='Blues', linewidth=0.5,linecolor=\"#fafafa\",monthlabels=[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"])\n# # plt.title(\"Daily Confirmed Cases\",fontsize=20)\n# # plt.tick_params(labelsize=15)\n\n# f.add_subplot(2,1,2)\n# calmap.yearplot(df_table.groupby('Last_Update')['Deaths'].sum().diff(), fillcolor='white', cmap='Reds', linewidth=1,linecolor=\"#fafafa\",year=2020,)\n# plt.title(\"Daily Deaths Cases\",fontsize=20)\n# plt.tick_params(labelsize=15)\n# plt.show()","cfb40379":"df_countries_cases.iloc[:,:].corr().style.background_gradient(cmap='Reds')","3527e21b":"df_continents_cases.iloc[:,:].corr().style.background_gradient(cmap='Reds')","f56fed81":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(df_confirmed)):\n    folium.Circle(\n        location=[df_confirmed.iloc[i]['Lat'], df_confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_confirmed.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(df_deaths.iloc[i,-1]\/(df_confirmed.iloc[i,-1]+1.00001)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(df_confirmed.iloc[i,-1]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\n\nworld_map\n","13c9dfc5":"temp_df = pd.DataFrame(df_countries_cases['Confirmed'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df[\"Confirmed\"]), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Confirmed\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Confirmed Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Confirmed Cases(Log Scale)\",colorscale=\"Blues\")\n# fig.to_image(\"Global Heat Map confirmed.png\")\nfig.show()","13910782":"temp_df = pd.DataFrame(df_countries_cases['Deaths'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df[\"Deaths\"]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Deaths\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Deaths Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Deaths (Log Scale)\",colorscale=\"Reds\")\n# fig.to_image(\"Global Heat Map deaths.png\")\nfig.show()","e3e1cfbb":"temp_df = pd.DataFrame(df_countries_cases['Recovered'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df.iloc[:,-1]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Recovered\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Recovered Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Recovered\",colorscale=\"Greens\")\n# fig.to_image(\"Global Heat Map deaths.png\")\nfig.show()","9bfaa013":"df_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths'].max().reset_index().fillna(0)\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(df_data, locations=\"Country_Region\", locationmode='country names', \n                     color=np.power(df_data[\"Confirmed\"],0.3)-2 , size= np.power(df_data[\"Confirmed\"]+1,0.3)-1, hover_name=\"Country_Region\",\n                     hover_data=[\"Confirmed\"],\n                     range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                     projection=\"natural earth\", animation_frame=\"Last_Update\", \n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     title='COVID-19: Progression of spread'\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","7ac09e37":"case_nums_country = df_confirmed.groupby(\"country\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in case_nums_country.index]\n\nf = plt.figure(figsize=(15,8))\nf.add_subplot(111)\nmarker_style = dict(c=\"crimson\",linewidth=6, linestyle='-', marker='o',markersize=8, markerfacecolor='#ffffff')\nplt.plot(d, case_nums_country,**marker_style)\nplt.tick_params(labelsize = 14)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))),d[:-1:int(len(d)\/5)]+[d[-1]])\n\n#labels\nplt.xlabel(\"Dates\",fontsize=18)\nplt.ylabel(\"Number of Countries\/Regions\",fontsize=1)\nplt.grid(alpha = 0.3)\n\nplt.savefig(out+'spread.png')\nplt.show()\nplt.close()","28bff639":"cols = 1\nrows = 1\nf = plt.figure(figsize=(10,10*rows))\n\nvisualize_covid_cases(df_confirmed, df_deaths,continent = \"All\",figure = [f,rows,cols, 1])\n\nplt.savefig(out+'COIVD-19-World.png')\nplt.show()","e5115840":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\n\ncols =2\nrows = int(np.ceil(continents.shape[0]\/cols))\nf = plt.figure(figsize=(20,9*rows))\nfor i,continent in enumerate(continents):\n    visualize_covid_cases(df_confirmed, df_deaths, continent = continent,figure = [f,rows,cols, i+1])\n\nplt.show()","3359c31d":"df_countries = df_confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = False)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 4000].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(18,7*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(df_confirmed, df_deaths,country = country,figure = [f,rows,cols, i+1])\n\nplt.show()","37e118f7":"temp = df_confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 9:\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-12))\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# India is following trend similar to doulbe the cases in 4 days but it may increase the rate \nx = np.arange(0,int(days-5))\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries\\n and India (confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison with India (confirmed).png')\nplt.show()","ff9ebb43":"temp = df_deaths.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_deaths.columns[-1], ascending= False)\n\nthreshold = 10\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        break\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-12)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison countries deaths.png')\nplt.show()","9aefee33":"temp = df_confirmed.groupby('continent').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        break\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-12)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-2)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Continents \\n(confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison of continents (Confirmed).png')\nplt.show()","9f9be0a1":"temp = df_deaths.groupby('continent').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_deaths.columns[-1], ascending= False)\n\nthreshold = 10\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        break\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 10)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-12)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Continents \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison continents (deaths).png')\nplt.show()","c7946a64":"temp_data = df_confirmed.iloc[:,5:].sum(axis =0)\nf = plt.figure(figsize=(20,12))\nf.add_subplot(111)\n\nthreshold = 100000\n\nt = temp_data.values\nt = t[t >threshold]\n\ndate = np.arange(0,len(t[:]))\nxnew = np.linspace(date.min(), date.max(), 10)\nspl = make_interp_spline(date, t, k=1)  # type: BSpline\npower_smooth = spl(xnew)\n\nmarker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\nplt.plot(date,t,\"-.\",label=\"Confirmed Cases\",**marker_style)\n\ndays  = 52\n# Reference lines \nx = np.arange(0,days)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of Cases Doubles Every Day\",(np.log2((t.max()-threshold)\/threshold),t.max()-threshold\/2),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/3+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"...Every Third Day\",(np.log2((t.max()-threshold)\/threshold)*3,t.max()-threshold),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"... Every Week\",(np.log2((t.max()-threshold)\/threshold)*7,t.max()-threshold),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. Every Month\",(18,2**(17\/30+np.log2(threshold))),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/9+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. Every 9 Days\",(np.log2((t.max()-threshold)\/threshold)*9,t.max()-threshold),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n\nplt.xlim(date[0],date[-1])\nplt.ylim(threshold - threshold\/10,2*t.max())\n# plot Params\n# plt.tight_layout()\nplt.tick_params(labelsize = 16)        \nplt.xticks(np.arange(0,len(t[:])+7,7),[ \"Day \"+str(i) for i in range(len(t[:])+7)][::7]) \nplt.xlabel(\"Days\",fontsize=19)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=19)\nplt.title(\"World Trend\",fontsize=24)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+\"World Trend Confirmed cases.png\")\nplt.show()","fabd10d6":"Visible = Input(shape=(1,))\nDense_l1 = Dense(80,name=\"Dense_l1\")(Visible)\nLRelu_l1 = LeakyReLU(name = \"LRelu_l1\")(Dense_l1)\nDense_l2 = Dense(80,name = \"Dense_l2\")(LRelu_l1)\nLRelu_l2 = LeakyReLU(name = \"LRelu_l2\")(Dense_l2)\n\nDense_l3 = Dense(80,name = \"Dense_l3\")(LRelu_l2)\nLRelu_l3 = LeakyReLU(name = \"LRelu_l3\")(Dense_l3)\n\nDense_l4 = Dense(1,name=\"Dense_l4\")(LRelu_l3)\nLRelu_l4 = LeakyReLU(name = \"Output\")(Dense_l4)\n#                                      \nmodel = models.Model(inputs=Visible, outputs=LRelu_l4)\nmodel.compile(optimizer=Adam(lr=0.001), \n               loss='mean_squared_error',\n               metrics=['accuracy'])\nmodel.summary()","9ca1646c":"data_y = np.log10(np.asarray(df_confirmed.iloc[:,5:].sum(axis =0)).astype(\"float32\"))\ndata_x = np.arange(1,len(data_y)+1)","5cf3fdea":"# model.save('model_confirmed_v3.h5')","4e4c8c83":"model = models.load_model(\"model_confirmed_v3.h5\")\nmodel.summary()","05881d32":"lakh = 100000\nprediction_days = 10\n\ntemp_data = df_confirmed.iloc[:,5:].sum(axis =0)\ndata = np.power(10,model.predict(np.arange(1,len(temp_data)+prediction_days+1)))\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\ndate = np.arange(0,len(temp_data))\n\nmarker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=7, markerfacecolor='#ffffff')\nplt.plot(date,temp_data\/lakh,\"-.\",color=\"darkcyan\",**marker_style, label=\"Actual Curve\")\n\ndate = np.arange(0,len(data))\nplt.plot(date,data\/lakh,\"-.\",color=\"orangered\",label=\"Predicted Curve\")\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal = d + nextdays\n\ntext = \"Prediction for next \"+str(prediction_days) +\" days:\\n\"\nfor i in range(prediction_days):\n    text += nextdays[i]+\" : \"+str(np.round(data[-1*(prediction_days-i)],-3)[0]\/lakh)+\" L\\n\"\n\nplt.text(0.02, 0.78, text, fontsize=17, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),d[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Next 10 day Prediction Curve-Global Confirmed Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Confirmed Cases (Lakh)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize =18)\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"Prediction Curve-Confirmed.png\")\nplt.show()","85ba279d":"## Global Deaths Heat Map \n<hr>","7136ed3a":"### 4. COVID-19 Spread Comparison of few most affected countries and INDIA","06995e9f":"# Introduction to COVID-19\n<hr>\n![COVID-19](https:\/\/techcrunch.com\/wp-content\/uploads\/2020\/02\/coronavirus.jpg)\n*Image Credits : [Scientific Animations](http:\/\/www.scientificanimations.com\/wiki-images\/) under a [CC BY-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/) license*\n> **Coronavirus** is a family of viruses that can cause illness, which can vary from *common cold* and *cough* to sometimes more severe disease. **Middle East Respiratory Syndrome (MERS-CoV)** and **Severe Acute Respiratory Syndrome (SARS-CoV)** were such severe cases with the world already has faced.<br>\n**SARS-CoV-2 (n-coronavirus)** is the new virus of the coronavirus family, which first *discovered* in 2019, which has not been identified in humans before. It is a *contiguous* virus which started from **Wuhan** in **December 2019**. Which later declared as **Pandemic** by **WHO** due to high rate spreads throughout the world. Currently (on the date 2 May 2020), this leads to a total of 120K+ Deaths across the globe, including *83+ deaths* alone in *Europe*.<br>\nPandemic is spreading all over the world; it becomes more important to understand about this spread. This NoteBook is an effort to analyze the cumulative data of confirmed, deaths, and recovered cases over time. In this notebook, the main focus is to analyze the spread trend of this virus all over the world. \n\n<br><hr>\n#### I will **update** this **notebook** *continuously* with new viz and updated data. \n\n\n**NOTE :** \n* **Since Dataset Structure has been changed and recovered dataset is no longer updated by Johns Hopkins University, Few Visualization has been dropped related to recovered cases and also active cases.**\n* **I have also added the Prediction section in this notebook. You can check it out. ([Quick Link](#Global-Prediction))**\n* **If you want to see the visualization related to active cases and recovered cases, please see [Version 17](https:\/\/www.kaggle.com\/tarunkr\/covid-19-case-study-analysis-viz-comparisons?scriptVersionId=30677812) of this notebook**\n* **Check out my GitHub repo [COVID-19-CaseStudy-and-Predictions](https:\/\/github.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions)**\n\n**<span style = \"color:#cc1616\">Update log:<\/span>**\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>30 Mar 2020 1:35 PM IST (Version 38) :<\/b> Dataset Update<\/b> <\/font>\n* <font style=\"color:  rgba(107, 61, 35, 0.92)\"><b>31 Mar 2020 1:35 AM IST (Version 39) :<\/b> New Visualization Add.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>31 Mar 2020 1:40 PM IST (Version 40) :<\/b> Dataset Update..<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>1 Apr 2020 1:35 AM IST (Version 42) :<\/b> Indian Testing Data and Comparision with South Korea Added.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>1 Apr 2020 6:10 PM IST (Version 48) :<\/b> Dataset Update and Bug fix.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>2 Apr 2020 6:05 PM IST (Version 50) :<\/b> Dataset Update and Bug fix.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>3 Apr 2020 2:50 AM IST (Version 51) :<\/b> <a href=\"Calander-Map\">Calander-Map<\/a> Added and Visual updates.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>3 Apr 2020 3:40 PM IST (Version 52) :<\/b> Dataset Update and Bug fix.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>5 Apr 2020 1:10 AM IST (Version 54) :<\/b> 2 New section added <a href='#COVID-19-Daily-Analysis'>COVID-19 Daily Analysis<\/a> and <a href='#Testing-Analysis'>Testing Data Analysis<\/a>. Dataset Update and Bug fix.<\/b> <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>6 Apr 2020 2:50 AM IST (Version 55) :<\/b> Dataset Update and Bug fix. <\/font>\n* <font style=\"color:rgba(107, 61, 35, 0.92)\"><b>6 Apr 2020 1:35 PM IST (Version 56) :<\/b> Dataset Update and Bug fix. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>8 Apr 2020 4:50 PM IST (Version 57) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>9 Apr 2020 2:50 PM IST (Version 58) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>12 Apr 2020 2:40 PM IST (Version 59) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>15 Apr 2020 2:50 AM IST (Version 61) :<\/b> Dataset Update and Prediction model update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>19 Apr 2020 7:10 PM IST (Version 63) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>22 Apr 2020 1:45 AM IST (Version 64) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>30 Apr 2020 5:00 PM IST (Version 66) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>02 May 2020 1:50 PM IST (Version 67) :<\/b> Prediction Model Updated. Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>02 May 2020 3:30 PM IST (Version 68) :<\/b> Dataset Update. <\/font>\n* <font style=\"color: rgba(107, 61, 35, 0.92) \"><b>03 May 2020 2:05 AM IST (Version 71) :<\/b> Testing Data Updated. <\/font>\n* <font style=\"color: #cc1616 \"><b>03 May 2020 6:20 PM IST (Version 73) :<\/b> Dataset Updated. <\/font>\n\n<hr>\n\n<hr>\n\n## <font style=\"color:#bd0a6d\">Please UPVOTE if you LIKE my EFFORT<\/font>\n\n### Check Out My Other Works:\n* [covid19-india](https:\/\/www.kaggle.com\/tarunkr\/covid19-india)\n* [digit-recognition-tutorial-cnn-99-67-accuracy](https:\/\/www.kaggle.com\/tarunkr\/digit-recognition-tutorial-cnn-99-67-accuracy)\n\n\n### Follow me:\n*   <font style=\"color:green; font-size:20px;line-height:24px;\">Follow my <a href='https:\/\/www.facebook.com\/getcodeeasy\/'>Facebook Page<\/a><\/font>\n*   <font style=\"color:green; font-size:20px;line-height:24px;\">Follow me on <a href='https:\/\/medium.com\/@codeeasy'>Medium<\/a><\/font>\n*   <font style=\"color:green; font-size:20px;line-height:24px;\">Follow me on <a href='https:\/\/github.com\/tarunk04'>GitHub<\/a><\/font>\n* **Check out my GitHub repo [COVID-19-CaseStudy-and-Predictions](https:\/\/github.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions)**\n\n<hr>\n<hr>\n\n### SOURCES: \n* [WHO](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019)\n* [CDC](https:\/\/www.cdc.gov\/coronavirus\/2019-nCoV\/index.html)\n* [Microsoft COVID-19 Tracker](https:\/\/www.bing.com\/covid)\n* [COVID-19 Tracker by Johns Hopkins University](https:\/\/www.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6)\n* [COVID-19-India-Tracker](https:\/\/www.covid19india.org\/)\n\n<hr>\n### Dataset \nhttps:\/\/github.com\/CSSEGISandData\/COVID-19 <br>\n2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE\n<br>\nThis dataset is updated on daily basis by Johns Hopkins CSSE\n<hr>\n### Please don't PANIC, stay safe, follow the WHO, and your nation guidelines. We all can defeat this together. Please don't spread rumors.","9835763c":"### Country Wise Reported Cases\nCountry Wise reported confirmed cases, recovered cases, deaths, active cases","926768e7":"### Coninent Wise Reported Cases \nConinent Wise reported confirmed cases, recovered cases, deaths, active cases","862b6258":"# Preprocessing \n<hr>","0fc8c6ab":"### 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE ([LINK](https:\/\/github.com\/CSSEGISandData\/COVID-19)) \n<hr>\nDataset consists of time-series data from 22 JAN 2020 to Till date (Updated on daily Basis).<br>\n**Three Time-series dataset (Depricated):**\n* time_series_19-covid-Confirmed.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv))\n* time_series_19-covid-Deaths.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv))\n* time_series_19-covid-Recovered.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv))\n\n**New Time-series dataset:**\n* time_series_covid19_confirmed_global.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv))\n* time_series_covid19_deaths_global ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv))\n\n**New Dataset (Updated more frequently by web crawler of JHU):**\n* cases_country.csv ([Link Raw File](\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\"))","d1359231":"# Imports and Datasets\n<hr> \n* Pandas - for dataset handeling\n* Numpy - Support for Pandas and calculations \n* Matplotlib - for visualization (Platting graphas)\n* pycountry_convert - Library for getting continent (name) to from their country names\n* folium - Library for Map\n* keras - Prediction Models\n* plotly - for interative plots","ca3f0391":"## Graphical Analysis of Testing Data\n<hr>\n### Countrywise\n","ec423f4b":"# COVID-19 Mortality Rate Variation Over Period of Time\n<hr>\nFor any epidemic the one of the most important evaluation is Mortality Rate. It is the measure of number of deaths in a particular population during a specific interval.\n* 1st curve shows how the mortality rate varies from 22 JAN 2020 to till date all over the world. \n* 2nd Curve shows the variation of mortality rate in different continents over time.\n","a06961f6":"# Content :\n<hr>\n* [Intorduction to COVID-19](#Intorduction-to-COVID-19)\n* [Downloding and Installing Prerequisite ](#Downloding-and-Installing-Prerequisite)\n* [Imports and Datasets](#Imports-and-Datasets)\n* [Preprocessing](#Preprocessing)\n* [Defining Functions](#Defining-Functions)\n* [General Analysis of Data](#General-Analysis-of-Data)\n* **[Calander Map](#Calander-Map)** ***<span style=\"color:red\">New<\/span>***\n* [Correlation Analysis](#Correlation-Analysis) \n* **[Visualization on Map](#Visualization-on-Map)** \n    * [Global Confirmed Cases Heat Map](#Global-Confirmed-Cases-Heat-Map)\n    * [Global Deaths Heat Map ](#Global-Deaths-Heat-Map)\n    * [COVID-19: Spread Progression](#COVID-19:-Spread-Progression)\n* [COVID-19 Spread Analysis](#COVID-19-Spread-Analysis)\n    * [Spread Comparison with India](#4.-COVID-19-Spread-Comparison-of-few-most-affected-countries-and-INDIA)\n    * [COVID-19 Spread Comparison of in different continents](#5.-COVID-19-Spread-Comparison-of-in-different-continents) \n* <a href=\"#COVID-19-Case-(Confirmed,-Deaths,-Recovered-and-Active)-Percent-Split-in-Different-countries-(Pie-Viz)\">COVID-19 Case (Confirmed, Deaths, Recovered and Active) Percent Split in Different countries (Pie Viz)<\/a>\n* [Global Prediction](#Global-Prediction)\n    * **[Tabulation of prediction and actual figure after 24th March (Global)](#Tabulation-of-prediction-and-actual-figure-after-24th-March-Global)** \n* **[COVID-19 Daily Analysis](#COVID-19-Daily-Analysis)** ***<span style=\"color:red\">New<\/span>***\n* **[Testing Data Analysis](#Testing-Analysis)** ***<span style=\"color:red\">New<\/span>***\n* [COVID-19 Mortality Rate Variation Over Period of Time](#COVID-19-Mortality-Rate-Variation-Over-Period-of-Time)\n    * [COVID-19: Change in Mortality Rate of Each Countries Over Time](#COVID-19:-Change-in-Mortality-Rate-of-Each-Countries-Over-Time)\n* [Comparision of Mortality and Recovery Rate](#Comparision-of-Mortality-and-Recovery-Rate)\n    * [Variation of Deaths vs Confirmed cases of different cuntries over time](#Variation-of-Deaths-vs-Confirmed-cases-of-different-cuntries-over-time) \n* [Cumulative Confirmed Cases and Cumulative Recovery Vs Cumulative Deaths Analysis ](#Cumulative-Confirmed-Cases-and-Cumulative-Recovery-Vs-Cumulative-Deaths-Analysis )\n* [China Vs Outside China](#China-Vs-Outside-China)\n* **[COVID-19 : INDIA](#COVID-19-:-INDIA)**\n    * **[Analysis of Tests done in India and Comparission with South-Korea](#Analysis-of-Tests-done-in-India-and-Comparission-with-South-Korea)** \n* **[COVID-19 : USA](#COVID-19-:-USA)**\n* [Valuable Feedback](#Valuable-Feedback)\n\n**If you want to see the visualization related to active cases and recovered cases please see [Version 17](https:\/\/www.kaggle.com\/tarunkr\/covid-19-case-study-analysis-viz-comparisons?scriptVersionId=30677812) of this notebook**.","67395059":"##  2. Spread Trends in the World, Continents and few most affected Countries\n<hr>\n1. COVID-19 Global Spread Trends\n2. COVID-19 Spread Trends in Different Continents\n3. COVID-19 Spread Trends in Few Most Affected Countries\n4. COVID-19 Spread Comparison of few most affected countries\n5. COVID-19 Spread Comparison of in different continents\n\n\n### 1. COVID-19 Global Spread Trends\n<h>\nThis graph shows the confirmed, deaths, recovered and active caes trends over the world.\n","7b059d9e":"# COVID-19 Spread Analysis\n<hr>\n\nSpread Analysis is in two sections \n1. Spread Across Globe\n2. Spread Trends in the World, Continents and few most affected Countries","c0b3b85f":"## Prediction Curve for Global Death Cases\nBuliding Model","1c7c9d2d":"# Global Prediction\n<hr>\n\n## Global Trend: \nIt is useful to understand the global trend of an increase in the number of cases over time. There is always a pattern in any data, but the concern is how strongly data follows a pattern. COVID-19 spreads exponentially, positive cases of COVID-19 takes 67 days to reach 1 Lakhs while it takes only 11 days to reach 2 Lakhs, 4 days to reach 3 Lakhs, and just 2 days to reach 5 Lakhs. This trend shows how fast it spreads.\n<br><br>\n**Note: This prediction is only based on the current spread trend, and no other factor is included, so this trend may vary a lot. Also, at some point in time, the testing capacity will become the limiting factor, so it may affect the actual figure a lot. This is to estimate the possible values that could reach with the consideration of any measures taken by different countries to control the spread.**  ","a5f531ab":"## Total Test vs Positive (per 100 Test)","37988193":" # Defining Functions\n <hr>\n* plot_params()\n* visualize_covid_cases()\n* get_mortality_rate()","ff27d0f1":"# Downloding and Installing Prerequisite \n**Install:**\n* pip install pycountry_convert \n* pip install folium\n\n\n<br>\n**Download Pretrained Models from my [GitHub](https:\/\/github.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions):**\n* [model_confirmed.h5](https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_confirmed.h5)\n* [model_deaths.h5](https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_deaths.h5)\n\n","b54293b7":"### 5. COVID-19 Spread Comparison of in different continents","d78dd99c":"## Global Recovered Heat Map \n<hr>","ac1eb3c9":"# General Analysis of Data\n<hr>\nGetting country wise and continent wise data.","97e30e80":"## 1. Spread Across Globe \n<hr> \n### Number of countries affected over the time","9f5210cb":"# Calander Map\n<hr>\n**NOTE: Due to some compatibility issue with pandas this section is no more available. I will soon try to fix the issue.**","367781df":"### Global Reported Cases till Date\nTotal number of confirmed cases, deaths reported, revoveries and active cases all across the world","a0fb8e57":"### 3. COVID-19 Spread Trends in Few Most Affected Countries","bd4001cb":"## COVID-19: Spread Progression","8d18acec":"### Continent Wise Correlation","692ca793":"# Visualization on Map\n<hr>","57195ce8":"# **COVID-19 Analysis, Visualization, Comparison and Predictions**","e9f4902f":"#### Loading Model","863d7b54":"### 2 . COVID-19 Spread Trends in Different Continents","e7854f17":"# COVID-19 Case (Confirmed and Deaths) Percent Split in Different countries (Pie Viz)\n<hr>\nThese pie plots are showing the proportion of the spread of this Pandemic across the world. Each pie is showing a few major contributor countries, and rest countries are shown as \"Others\". Criteria : \n* Confirmed Cases: Any countries reported more than 20000 confirmed cases are shown the rest of the countries are under \"others\" Category.\n* Deaths: Any Countries reported more than 1000 deaths are shown rest of the countries are under \"others\" Category.\n* Active Cases: Any Countries reported more than 15000 active cases are shown the rest of the countries are under \"others\" Category.\n* Recovered Cases: Any Countries reported more than 2000 recoveries are shown rest of the countries are under \"others\" Category.","be69d662":"### Top 10 countries (Confirmed Cases and Deaths)","6852b415":"# Correlation Analysis\n<hr>\nPlotting Heat map of correlation of confirmed cases, recovered cases, deaths and active cases.\n\n### Country wise Correlation","9cc20b87":"## Global Confirmed Cases Heat Map \n<hr>","97ecd184":"## Prediction Curve for Global Confirmed Cases\nBuliding Model"}}