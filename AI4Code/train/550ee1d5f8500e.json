{"cell_type":{"804cef3d":"code","6e7caf42":"code","b5063703":"code","10f866a0":"code","c08c8a7e":"code","9e2002a5":"code","72f5d9a8":"code","da6a49fe":"code","15990d53":"code","b92f8ca4":"code","b4dd13d3":"code","62cffb62":"code","6a60e137":"code","3f923758":"code","aa28aca8":"code","a55d6c03":"code","8a4d24f3":"code","eaeb0ebe":"code","890a8b80":"code","cb40cf18":"code","30e81575":"code","61f01b40":"code","13a66a44":"code","707b1df6":"code","32ec0f5b":"code","a4ff5a62":"code","676a2c2b":"code","b5c2f27f":"code","2b8b86f3":"markdown"},"source":{"804cef3d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns","6e7caf42":"train_df = pd.read_csv(\"\/kaggle\/input\/sliced-s01e08-KJSEks\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/sliced-s01e08-KJSEks\/test.csv\")","b5063703":"train_df.info()","10f866a0":"sns.histplot(data=train_df, x=\"popularity\")","c08c8a7e":"train_df[\"log_duration_ms\"] = train_df[\"duration_ms\"].map(lambda x: np.log(x) if x > 0 else 0)\ntest_df[\"log_duration_ms\"] = test_df[\"duration_ms\"].map(lambda x: np.log(x) if x > 0 else 0)\n\ntrain_df[\"log_speechiness\"] = train_df[\"speechiness\"].map(lambda x: np.log(x) if x > 0 else 0)\ntest_df[\"log_speechiness\"] = test_df[\"speechiness\"].map(lambda x: np.log(x) if x > 0 else 0)\n\ntrain_df[\"log_instrumentalness\"] = train_df[\"instrumentalness\"].map(lambda x: np.log(x) if x > 0 else 0)\ntest_df[\"log_instrumentalness\"] = test_df[\"instrumentalness\"].map(lambda x: np.log(x) if x > 0 else 0)\n\ntrain_df[\"log_liveness\"] = train_df[\"liveness\"].map(lambda x: np.log(x) if x > 0 else 0)\ntest_df[\"log_liveness\"] = test_df[\"liveness\"].map(lambda x: np.log(x) if x > 0 else 0)","9e2002a5":"sns.histplot(data=train_df, x=\"tempo\")","72f5d9a8":"popularity_by_key = train_df.groupby(\"release_day\", as_index=False)[\"popularity\"].mean()\npopularity_by_key.sort_values(by=\"popularity\", ascending=False, inplace=True)\npopularity_by_key","da6a49fe":"train_df[\"popularity_normalized\"] = train_df[\"popularity\"].map(lambda x: np.log(x) if x > 0 else 0)\nsns.histplot(data=train_df, x=\"popularity_normalized\")","15990d53":"from collections import Counter\n\npopu_count = Counter(train_df[\"popularity\"])\ntarget_freq = sorted([(t, popu_count[t]) for t in popu_count], key=lambda x: x[1], reverse=True)\nprint(target_freq)","b92f8ca4":"popularity_percentiles = np.percentile(train_df[\"popularity\"], [50, 75])\ntrain_df[\"popularity_above_50th_percentile\"] = train_df[\"popularity\"].map(lambda x: 1 if x >= popularity_percentiles[0] else 0)\ntrain_df[\"popularity_above_75th_percentile\"] = train_df[\"popularity\"].map(lambda x: 1 if x >= popularity_percentiles[1] else 0)","b4dd13d3":"predictors_to_scan = [\"log_duration_ms\",\n                      \"danceability\",\n                      \"energy\",\n                      \"loudness\",\n                      \"log_speechiness\",\n                      \"acousticness\",\n                      \"log_instrumentalness\",\n                      \"log_liveness\",\n                      \"valence\",\n                      \"tempo\",\n                      \"release_year\",\n                      \"release_month\"]","62cffb62":"for predictor in predictors_to_scan:\n    sns.displot(train_df, x=predictor, hue=\"popularity_above_75th_percentile\", kind=\"ecdf\")","6a60e137":"train_df[\"feature_key\"] = train_df[\"key\"].map(lambda x: f\"k{x}\")\ntest_df[\"feature_key\"] = test_df[\"key\"].map(lambda x: f\"k{x}\")\n\ntrain_df[\"feature_release_month\"] = train_df[\"release_month\"].map(lambda x: f\"m{x}\")\ntest_df[\"feature_release_month\"] = test_df[\"release_month\"].map(lambda x: f\"m{x}\")\n\ntrain_df[\"feature_key\"] = train_df[\"feature_key\"].astype(\"category\")\ntest_df[\"feature_key\"] = test_df[\"feature_key\"].astype(\"category\")\n\ntrain_df[\"feature_release_month\"] = train_df[\"feature_release_month\"].astype(\"category\")\ntest_df[\"feature_release_month\"] = test_df[\"feature_release_month\"].astype(\"category\")","3f923758":"import itertools\n\nnumerators = [\"danceability\", \"energy\", \"release_year\"]\ndenominators = [\"acousticness\", \"log_instrumentalness\"]\n\nfor numerator, denominator in itertools.product(numerators, denominators):\n    \n    h = f\"feature_{numerator}_vs_{denominator}\"\n    train_df[h] = train_df.apply(lambda x: x[numerator] \/ float(x[denominator]) if x[denominator] != 0 else 0, axis=1)\n    test_df[h] = test_df.apply(lambda x: x[numerator] \/ float(x[denominator]) if x[denominator] != 0 else 0, axis=1)\n    \n    if f\"feature_{numerator}\" not in train_df.columns.values:\n        train_df[f\"feature_{numerator}\"] = train_df[numerator]\n        test_df[f\"feature_{numerator}\"] = test_df[numerator]\n    \n    if f\"feature_{denominator}\" not in train_df.columns.values:\n        train_df[f\"feature_{denominator}\"] = train_df[denominator]\n        test_df[f\"feature_{denominator}\"] = test_df[denominator]","aa28aca8":"artist_df = pd.read_csv(\"\/kaggle\/input\/sliced-s01e08-KJSEks\/artists.csv\")\nartist_popularity_dic = dict(zip(artist_df[\"id\"], artist_df[\"popularity\"]))\nartist_followers_dic = dict(zip(artist_df[\"id\"], artist_df[\"followers\"]))","a55d6c03":"from collections import defaultdict\n\ngenre_dic = defaultdict(list)\nid_genre_dic = dict()\n\nfor i, row in artist_df.iterrows():\n    genre_list = str(row[\"genres\"]).replace(\"[\", \"\").replace(\"]\",\"\").replace(\"'\", \"\").split()\n    for entry in genre_list:\n        genre_dic[entry].append(row[\"popularity\"])\n    id_genre_dic[row[\"id\"]] = genre_list","8a4d24f3":"genre_counts = sorted([(p, len(genre_dic[p])) for p in genre_dic], key=lambda x:x[1], reverse=True)\nprint(len(genre_counts))\n\nvalid_genres = [g[0] for g in genre_counts[0:1000]]\ntop_genres = [g[0] for g in genre_counts[0:200]]\n\npopularity_sorted = sorted([(p, np.mean(genre_dic[p])) for p in genre_dic if p in valid_genres], key=lambda x:x[1], reverse=True)\n\npopular_genres = [p[0] for p in popularity_sorted[0:200]]","eaeb0ebe":"def calc_popularity_for_artist(id_list, flag):\n    popularity_scores = list()\n    for entry in id_list:\n        if entry in artist_popularity_dic:\n            popularity_scores.append(artist_popularity_dic[entry])\n        else:\n            popularity_scores.append(0)\n    if flag == \"max\":\n        return max(popularity_scores)\n    else:\n        return np.mean(popularity_scores)","890a8b80":"def calc_followers_for_artist(id_list, flag):\n    follower_scores = list()\n    for entry in id_list:\n        if entry in artist_followers_dic:\n            follower_scores.append(artist_followers_dic[entry])\n        else:\n            follower_scores.append(0)\n    if flag == \"max\":\n        return max(follower_scores)\n    else:\n        return np.mean(follower_scores)","cb40cf18":"def calc_uniqueness_of_genre(id_list):\n    scores = list()\n    for entry in id_list:\n        if entry in id_genre_dic:\n            genres = [np.mean(d) for d in id_genre_dic[entry]]\n        else:\n            follower_scores.append(0)\n    if flag == \"max\":\n        return max(follower_scores)\n    else:\n        return np.mean(follower_scores)","30e81575":"train_df[\"artist_list\"] = train_df[\"id_artists\"].map(lambda x: str(x).replace(\"[\", \"\").replace(\"]\",\"\").replace(\"'\", \"\").split())\ntest_df[\"artist_list\"] = test_df[\"id_artists\"].map(lambda x: str(x).replace(\"[\", \"\").replace(\"]\",\"\").replace(\"'\", \"\").split())\n\ntrain_df[\"feature_max_artist_popularity\"] = train_df[\"artist_list\"].map(lambda x: calc_popularity_for_artist(x, flag=\"max\"))\ntest_df[\"feature_max_artist_popularity\"] = test_df[\"artist_list\"].map(lambda x: calc_popularity_for_artist(x, flag=\"max\"))\n\ntrain_df[\"feature_mean_artist_popularity\"] = train_df[\"artist_list\"].map(lambda x: calc_popularity_for_artist(x, flag=\"mean\"))\ntest_df[\"feature_mean_artist_popularity\"] = test_df[\"artist_list\"].map(lambda x: calc_popularity_for_artist(x, flag=\"mean\"))","61f01b40":"train_df[\"feature_max_artist_followers\"] = train_df[\"artist_list\"].map(lambda x: calc_followers_for_artist(x, flag=\"max\"))\ntest_df[\"feature_max_artist_followers\"] = test_df[\"artist_list\"].map(lambda x: calc_followers_for_artist(x, flag=\"max\"))\n\ntrain_df[\"feature_mean_artist_followers\"] = train_df[\"artist_list\"].map(lambda x: calc_followers_for_artist(x, flag=\"mean\"))\ntest_df[\"feature_mean_artist_followers\"] = test_df[\"artist_list\"].map(lambda x: calc_followers_for_artist(x, flag=\"mean\"))","13a66a44":"def map_genres(id_list, flag):\n    genres = list()\n    for entry in id_list:\n        if entry in id_genre_dic:\n            if flag == \"valid\":\n                genres += [i for i in id_genre_dic[entry] if i in valid_genres]\n            elif flag == \"popular\":\n                genres += [i for i in id_genre_dic[entry] if i in popular_genres]\n            else:\n                genres += [i for i in id_genre_dic[entry] if i in top_genres]\n    genres = list(set(genres))\n    if len(genres) > 0:\n        return \"_\".join(sorted(genres))\n    else:\n        return \"none\"","707b1df6":"train_df[\"genre_flag_valid\"] = train_df[\"artist_list\"].map(lambda x: map_genres(x, flag=\"valid\"))\ntest_df[\"genre_flag_valid\"] = test_df[\"artist_list\"].map(lambda x: map_genres(x,  flag=\"valid\"))\n\ntrain_df[\"genre_flag_top\"] = train_df[\"artist_list\"].map(lambda x: map_genres(x, flag=\"top\"))\ntest_df[\"genre_flag_top\"] = test_df[\"artist_list\"].map(lambda x: map_genres(x,  flag=\"top\"))\n\ntrain_df[\"genre_flag_popular\"] = train_df[\"artist_list\"].map(lambda x: map_genres(x, flag=\"popular\"))\ntest_df[\"genre_flag_popular\"] = test_df[\"artist_list\"].map(lambda x: map_genres(x,  flag=\"popular\"))\n\ntrain_df[\"feature_genre_valid_flag\"] = train_df[\"genre_flag_valid\"].astype(\"category\")\ntest_df[\"feature_genre_valid_flag\"] = test_df[\"genre_flag_valid\"].astype(\"category\")\n\ntrain_df[\"feature_genre_top_flag\"] = train_df[\"genre_flag_top\"].astype(\"category\")\ntest_df[\"feature_genre_top_flag\"] = test_df[\"genre_flag_top\"].astype(\"category\")\n\ntrain_df[\"feature_genre_flag_popular\"] = train_df[\"genre_flag_popular\"].astype(\"category\")\ntest_df[\"feature_genre_flag_popular\"] = test_df[\"genre_flag_popular\"].astype(\"category\")","32ec0f5b":"feature_headers = [f for f in train_df.columns.values if f.find(\"feature_\") != -1]\n\ntrain_df[feature_headers].info()","a4ff5a62":"from sklearn.model_selection import KFold\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error\n\nkf = KFold(n_splits=3, shuffle=True)\n\ncat_features = [\"feature_key\",\n                \"feature_release_month\",\n                \"feature_genre_valid_flag\",\n                \"feature_genre_top_flag\",\n                \"feature_genre_flag_popular\"]\n\nrmse_scores = list()\n\nfor train_index, test_index in kf.split(train_df):\n    \n    _train_df, _test_df = train_df.iloc[train_index].copy(), train_df.iloc[test_index].copy()\n    \n    clf = CatBoostRegressor(logging_level=\"Silent\",\n                            loss_function=\"RMSE\",\n                            cat_features=cat_features)\n    \n    clf.fit(_train_df[feature_headers], _train_df[\"popularity\"])\n    \n    _test_df[\"predicted\"] = clf.predict(_test_df[feature_headers])\n    error = np.sqrt(mean_squared_error(y_true=_test_df[\"popularity\"], y_pred=_test_df[\"predicted\"]))\n    print(\"error\", error)\n    rmse_scores.append(error)\n    \nprint(\"avg rmse ---->\", np.mean(rmse_scores))","676a2c2b":"expected_rmse = round(np.mean(rmse_scores), 2)\n\nclf = CatBoostRegressor(logging_level=\"Silent\",\n                        loss_function=\"RMSE\",\n                        cat_features=cat_features)\n\nprint(\"Fitting on total train set...\", train_df.shape)\n\nclf.fit(train_df[feature_headers], train_df[\"popularity\"])\ntest_df[\"popularity\"] = clf.predict(test_df[feature_headers])\n\ntest_df[[\"id\", \"popularity\"]].to_csv(f\"\/kaggle\/working\/aaa_submission_{expected_rmse}.csv\", index=False)","b5c2f27f":"feature_importance_dic = dict(zip(feature_headers, clf.feature_importances_))\nfeature_rankings = sorted([(f, feature_importance_dic[f]) for f in feature_importance_dic],\n                          key=lambda x: x[1], reverse=True)\n\nfor feature in feature_rankings:\n    print(feature)","2b8b86f3":"ideas:\nnormalize followers...\ngenres might have to be one hot encoded...\nduration might have to be one hot"}}