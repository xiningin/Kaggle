{"cell_type":{"09581cd7":"code","90674a09":"code","a2b99b85":"code","53a5f1eb":"code","36f08a15":"code","5db4f5e2":"code","57e92fa9":"code","c9c785d6":"code","9b7de6a4":"code","d14af975":"code","203f0e22":"code","47f9d96c":"code","55706dc1":"code","93d8c7e4":"code","6c127c59":"code","b05e0f59":"code","fad8a73c":"code","e2afe961":"code","f99bdd35":"code","888eb25e":"code","59a9acab":"markdown","29a76b02":"markdown","2fda1997":"markdown","9e96eb25":"markdown","8cc4878e":"markdown","1f57b0f6":"markdown","70a2ad9f":"markdown","ddfed357":"markdown","4462fb73":"markdown","ea2554a7":"markdown","26c30568":"markdown","bf0d3881":"markdown"},"source":{"09581cd7":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report","90674a09":"data = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_L.csv')","a2b99b85":"data","53a5f1eb":"data.isna().sum().sum()","36f08a15":"y = data['label'].copy()\nX = data.drop('label', axis=1).copy()","5db4f5e2":"y.value_counts()","57e92fa9":"label_mapping = {\n    0: 'nv',\n    1: 'mel',\n    2: 'bkl',\n    3: 'bcc',\n    4: 'akiec',\n    5: 'vasc',\n    6: 'df'\n}","c9c785d6":"X = X \/ 255\n\nX","9b7de6a4":"X = np.array(X)\nprint(X.shape)","d14af975":"X = X.reshape(-1, 28, 28, 1)\nprint(X.shape)","203f0e22":"sample_data = pd.Series(list(zip(X, y))).sample(9)\n\nsample_X = np.stack(np.array(sample_data.apply(lambda x: x[0])))\nsample_y = np.array(sample_data.apply(lambda x: x[1]))","47f9d96c":"plt.figure(figsize=(12, 12))\n\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    plt.imshow(np.squeeze(sample_X[i]))\n    img_label = label_mapping[sample_y[i]]\n    plt.title(img_label)\n    plt.axis(\"off\")\n\nplt.show()","55706dc1":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)","93d8c7e4":"inputs = tf.keras.Input(shape=(28, 28, 1), name='input')\n\nconv1 = tf.keras.layers.Conv2D(filters=16, kernel_size=3, name='conv1')(inputs)\nmaxpool1 = tf.keras.layers.MaxPooling2D(name='maxpool1')(conv1)\n\nconv2 = tf.keras.layers.Conv2D(filters=32, kernel_size=3, name='conv2')(maxpool1)\nmaxpool2 = tf.keras.layers.MaxPooling2D(name='maxpool2')(conv2)\n\nconv3 = tf.keras.layers.Conv2D(filters=64, kernel_size=3, name='conv3')(maxpool2)\nmaxpool3 = tf.keras.layers.MaxPooling2D(name='maxpool3')(conv3)\n\navgpool = tf.keras.layers.GlobalAveragePooling2D(name='avgpool')(maxpool3)\n\noutputs = tf.keras.layers.Dense(7, activation='softmax', name='output')(avgpool)\n\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nprint(model.summary())\ntf.keras.utils.plot_model(model)","6c127c59":"model.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 32\nepochs = 50\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","b05e0f59":"model_acc = model.evaluate(X_test, y_test, verbose=0)[1]\n\nprint(\"Test Accuracy: {:.3f}%\".format(model_acc * 100))","fad8a73c":"y_true = np.array(y_test)\n\ny_pred = model.predict(X_test)\ny_pred = np.array(list(map(lambda x: np.argmax(x), y_pred)))","e2afe961":"cm = confusion_matrix(y_true, y_pred)\nclr = classification_report(y_true, y_pred, target_names=label_mapping.values())","f99bdd35":"plt.figure(figsize=(10, 10))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cbar=False, cmap='Blues')\n\nplt.xticks(np.arange(7) + 0.5, label_mapping.values())\nplt.xlabel(\"Predicted\")\n\nplt.yticks(np.arange(7) + 0.5, label_mapping.values())\nplt.ylabel(\"Actual\")\n\nplt.title(\"Confusion Matrix\")\n\nplt.show()","888eb25e":"print(clr)","59a9acab":"# Task for Today  \n\n***\n\n## Skin Cancer Image Classification  \n\nGiven *image data about various skin lesions*, let's try to predict the **type** of a given lesion.  \n  \nWe will use a TensorFlow CNN to make our predictions.","29a76b02":"# Preprocessing","2fda1997":"# Reshaping  \n  \nCurrently, each image is represented by a vector of length 784.  \n  \nWe want images of size 28x28, so let's reshape each vector into a 2-D array of the proper size.  \n(We will actually make the images into 3-D arrays with a dummy dimension for the single color channel.)","9e96eb25":"# Modeling  \n  \nWe will use a 2-D convolutional neural network to extract features from the images while we train.","8cc4878e":"# Results","1f57b0f6":"# Visualizing  \n  \nLet's take a look at a few of the images.","70a2ad9f":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/Pndpe80vaEA","ddfed357":"# Train-Test Split  \n  \nLet's split the data into train and test sets.","4462fb73":"# Rescaling  \n  \nLet's rescale the pixel values to be between 0 and 1.","ea2554a7":"# Training  \n  \nWe will train using an Adam optimizer and a sparse categorical crossentropy loss function.","26c30568":"There are 7 possible labels.  \n  \nFrom the dataset provider:\n  \n* 0: nv - Melanocytic nevi\n* 1: mel - Melanoma\n* 2: bkl - Benign keratosis-like lesions\n* 3: bcc - Basal cell carcinoma\n* 4: akiec - Actinic keratoses and intraepithelial carcinoma \/ Bowen's disease\n* 5: vasc - Vascular lesions\n* 6: df - Dermatofibroma","bf0d3881":"# Getting Started"}}