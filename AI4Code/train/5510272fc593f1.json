{"cell_type":{"faa4af6f":"code","313e4355":"code","8ece9ea1":"code","cfff07c4":"code","bc192eec":"code","0392f939":"code","5ac64c2a":"code","02f0109e":"code","c460359b":"code","7eba0e23":"code","5855c822":"code","fb51897f":"code","a458d572":"code","b67b8bd3":"code","becbd733":"code","1e2f165c":"code","8822f3ab":"code","8298636e":"code","2ddb2d5b":"code","69bcc4a8":"code","19a024d0":"code","000f23d6":"code","eee935f0":"code","4aa4cb45":"code","1f56a58b":"code","e4a0b2d2":"code","f34b6a4a":"code","a755a94a":"code","c9c94927":"code","3a7c156a":"code","4c19b6f2":"code","1b0832de":"code","c3950f9f":"code","224a6278":"code","419b995b":"code","fe5e4f89":"code","615e53ff":"code","37a0e9b9":"code","429658c7":"code","ec2568f3":"code","55659be5":"code","162ce8e1":"code","b214319b":"code","e246b1bc":"code","7677d5ca":"code","dece2edb":"code","a5bf9a7b":"code","ce23a87e":"code","e7642598":"code","efcba325":"code","0a0ec5a0":"code","a0e13c2c":"code","0f7eea88":"code","904af142":"code","d1916020":"code","87a531b6":"code","340fc3d2":"code","3bd7ad58":"code","fde21cbb":"code","1f04695d":"code","ce167265":"code","8389d5c1":"code","0673ea0e":"code","36060f38":"code","1c04d9e4":"code","fd33ca53":"code","9466f81c":"markdown","d336c3fc":"markdown","493bfee9":"markdown","63532a40":"markdown","b08697b7":"markdown","18f25d82":"markdown","2a6b9d9f":"markdown","3bf453c6":"markdown","430a0d89":"markdown","d828f44b":"markdown"},"source":{"faa4af6f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport  seaborn as sns\nimport plotly \nimport plotly.graph_objs as go\nimport plotly.express as px","313e4355":"df=pd.read_csv('..\/input\/avocado-prices\/avocado.csv',index_col=0)","8ece9ea1":"df.head()","cfff07c4":"df.shape","bc192eec":"df.describe()","0392f939":"sns.distplot(df['AveragePrice'])","5ac64c2a":"df['type'].unique()","02f0109e":"df['region'].unique()#54 region","c460359b":"fig,ax=plt.subplots(1,3,figsize=(20,5))\nsns.barplot(df['year'],df['AveragePrice'],ax=ax[0])\nsns.barplot(y=df['Total Volume'],x=df['year'],ax=ax[1])\nsns.barplot(y=df['Total Bags'],x=df['year'],ax=ax[2])\n\n#2017 has avgprice compared to other years\n#2018 witnessed more number of avacaos sold ","7eba0e23":"colors=['cyan','yellow']\ntypes=df.groupby(['type'])['AveragePrice'].mean().index\nval=df['type'].value_counts().values\nfrom plotly.subplots import make_subplots\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'bar'}]], subplot_titles=['Types Sold', 'AVg Price per Type'])\nfig.add_traces([go.Pie(labels=types,values=val,textinfo='value',marker=dict(colors=colors,line=dict(color='#000000', width=2)))],1,1)\n\nfig.add_traces([go.Bar(x=types,y=df.groupby(['type'])['AveragePrice'].mean().values,marker_color=colors,textposition='auto',\n                      texttemplate='%{text:.3f}',text=df.groupby(['type'])['AveragePrice'].mean().values)],1,2)\n\n#Both type of avacaods are sold equally\n#But avg price for organic is more compared to conventional","5855c822":"tot_vol=df.groupby('type')['Total Volume'].sum()\ntot_bag=df.groupby('type')['Total Bags'].sum()\ncolors=['cyan','yellow']\ntypes=df.groupby(['type'])['AveragePrice'].mean().index\nval=df['type'].value_counts().values\nfrom plotly.subplots import make_subplots\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]], subplot_titles=['toal_vol sold', 'Total_bag sold'])\nfig.add_traces([go.Pie(labels=types,values=tot_vol,textinfo='value',marker=dict(colors=colors,line=dict(color='#000000', width=2)))],1,1)\n\n\nfig.add_traces([go.Pie(labels=types,values=tot_bag,textinfo='value',marker=dict(colors=colors,line=dict(color='#000000', width=2)))],1,2)\n\n#total Volumes and Bags sold for Conventional Avacados are more ,low cost of conventional avacados are reason for popularity","fb51897f":"avg_pr=df.groupby('region')['AveragePrice'].mean().sort_values(ascending=False).values\nloc=df.groupby('region')['AveragePrice'].mean().sort_values(ascending=False).index\nplt.figure(figsize=(7,10))\nsns.barplot(x=avg_pr,y=loc)\n\n#avg price is high in Hatford,SanFransico,NY.whereas houston,cincnati,Dallas had low avg price","a458d572":"avg_vol=df.groupby('region')['Total Volume'].mean().sort_values(ascending=False).values[1:]\nloc=df.groupby('region')['Total Volume'].mean().sort_values(ascending=False).index[1:]\n\navg_bag=df.groupby('region')['Total Bags'].mean().sort_values(ascending=False).values[1:]\nloc=df.groupby('region')['Total Bags'].mean().sort_values(ascending=False).index[1:]\n\nfig,ax=plt.subplots(1,2,figsize=(20,10))\nsns.barplot(x=avg_vol,y=loc,ax=ax[0])\nax[0].set_title('Avg Volumes per region')\n\nsns.barplot(x=avg_bag,y=loc,ax=ax[1])\nax[1].set_title('Avg Bags sold per region')\n\n\n#West ,California,SouthCentral has high volume and bags consumed","b67b8bd3":"df['Date']=pd.to_datetime(df['Date'])\ndf['month']=df['Date'].dt.month","becbd733":"px.box(df,x='month',y='AveragePrice')","1e2f165c":"plt.bar(x=df['month'],height=df['Total Volume'],width=0.3,color='cyan',label='Total_volume')\nplt.bar(x=df['month'],height=df['Total Bags'],width=0.3,color='yellow',label='Total_Bags')\nplt.legend()","8822f3ab":"df_organic=df[df['type']=='organic']\ndf_conventional=df[df['type']=='conventional']\nsns.factorplot('AveragePrice','region',data=df_organic,hue='year',height=11,join=False)","8298636e":"order = (\n    df_organic[(df_organic['year']==2017)].groupby('region')['AveragePrice'].mean().sort_values().index)\nsns.factorplot('AveragePrice','region',data=df_organic,hue='year',height=11,join=False,order=order)\n\n#since there was shortage in supply in 2017 sanfrancisco witnessed high prices","2ddb2d5b":"#price Variation of type of avacado in each region ","69bcc4a8":"org_val=df_organic.groupby(['region'])['AveragePrice'].mean().values\norg_ind=df_organic.groupby(['region'])['AveragePrice'].mean().index\ncon_val=df_conventional.groupby(['region'])['AveragePrice'].mean().values\ncon_ind=df_conventional.groupby(['region'])['AveragePrice'].mean().index\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=org_ind, y=org_val,mode='markers+lines',name='Oragnic'))\nfig.add_trace(go.Scatter(x=con_ind, y=con_val,mode='markers+lines',name='Conventional'))\nfig.update_layout(title='organic vs Conv wrt to region')","19a024d0":"A=df.groupby(['type','year','region',])['AveragePrice'].mean().reset_index()\nA.head()\nfig=px.line(A, x=\"region\", y=\"AveragePrice\", animation_frame=\"year\",color='type')\nfig.update_layout(title='change in avg_price of both type wrt to year ')","000f23d6":"conditions=[(df['month'].between(3,5,inclusive=True)),\n           (df['month'].between(6,8,inclusive=True)),\n           (df['month'].between(9,11,inclusive=True)),\n           (df['month'].between(12,2,inclusive=True))]\nvalues=['Spring','Summer','Fall','Winter']\ndf['seasons'] = np.select(conditions, values)","eee935f0":"df['seasons'].replace('0','Winter',inplace=True)","4aa4cb45":"df.seasons.value_counts()","1f56a58b":"B=df.groupby(['year','type','month','region','seasons'])['AveragePrice'].mean().reset_index()\nB.head()\n","e4a0b2d2":"#Animated lineplot of season vs price wrt each year","f34b6a4a":"px.line(B,x='region',y='AveragePrice',facet_col='seasons',facet_col_wrap=2,color='type',animation_frame='year')","a755a94a":"#Which Season has high price and volume consumed","c9c94927":"fig,ax=plt.subplots(1,2,figsize=(15,5))\nsns.barplot(df['seasons'],df['AveragePrice'],ax=ax[0])\nax[0].set_title('Season vs Avg_Price')\nsns.barplot(df['seasons'],df['Total Volume'],ax=ax[1])\nax[1].set_title('Season vs Total_VOl')\n\n#Fall and Summer witnessed high price ,maybe its because of less supply","3a7c156a":"#Corelation Map","4c19b6f2":"df['day']=df['Date'].dt.day\nplt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True,cmap='twilight')","1b0832de":"#we can see that there is multicollinearity\n\nsince tol_vol is addition of 3 col . same as Total Bags we will keep only these two col","c3950f9f":"df1=df.copy()","224a6278":"df1=df1[['Total Volume', 'Total Bags', 'type', 'year','region', 'month', 'day','AveragePrice']]","419b995b":"#lets check the distribution \nsns.boxplot(np.log(df1['Total Volume']))","fe5e4f89":"print(np.log(df1['Total Volume']).skew())\nprint(df1['Total Bags'].skew())#highly skewed , so using np.log\n\n","615e53ff":"df1['Total Volume']=np.log1p(df1['Total Volume'])\ndf1['Total Bags']=np.log1p(df1['Total Bags'])","37a0e9b9":"#categorical Data\n\nprint(df1['type'].nunique())\nprint(df1['region'].nunique())","429658c7":"df1=pd.get_dummies(df1,drop_first=True,columns=['type','region'])","ec2568f3":"#Model Building","55659be5":"X=df1.drop('AveragePrice',axis=1)\ny=df1['AveragePrice']\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","162ce8e1":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error","b214319b":"\nlr=LinearRegression()\nlr.fit(X_train,y_train)\npredict=lr.predict(X_test)\nprint('R2_score ',r2_score(y_test,predict))\nprint('mae ',mean_absolute_error(y_test,predict))\nprint('rmse ',np.sqrt(mean_squared_error(y_test,predict)))","e246b1bc":"sns.distplot((predict-y_test))\nprint(sum(predict-y_test))","7677d5ca":"sns.scatterplot(y_test,predict)","dece2edb":"#RandomForest\ndef predict(obj,X_train,y_train,X_test,y_test):\n    \n    obj.fit(X_train,y_train)\n    predict=lr.predict(X_test)\n    print('R2_score ',r2_score(y_test,predict))\n    print('mae ',mean_absolute_error(y_test,predict))\n    print('mse ',mean_squared_error(y_test,predict))\n    sns.scatterplot(y_test,predict)\n    \ndt=RandomForestRegressor()\npredict(dt,X_train,y_train,X_test,y_test)    ","a5bf9a7b":"#does standard scaling improves result\n\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train_sc=sc.fit_transform(X_train)\nX_test_sc=sc.transform(X_test)","ce23a87e":"lr=LinearRegression()\nlr.fit(X_train_sc,y_train)\npredict=lr.predict(X_test_sc)\nprint('R2_score ',r2_score(y_test,predict))\nprint('mae ',mean_absolute_error(y_test,predict))\nprint('mse ',mean_squared_error(y_test,predict))\n\n#No we did not see any improvement","e7642598":"#using Label encoder for region\nfrom sklearn.preprocessing import LabelEncoder\ndf_label=df.copy()","efcba325":"lb=LabelEncoder()\ndf_label['region']=lb.fit_transform(df_label['region'])","0a0ec5a0":"#Season Price\n\naa=df.groupby('seasons')['AveragePrice'].mean().to_dict()\ndf_label['season_price']=df_label['seasons'].map(aa)","a0e13c2c":"#Season VOlume\n\nbb=df_label.groupby('seasons')['Total Volume'].mean().to_dict()\ndf_label['season_Volume']=df_label['seasons'].map(bb)\ndf_label=pd.get_dummies(df_label,drop_first=True,columns=['type'])","0f7eea88":"#region price  and avg yearly price\n\nreg=df_label.groupby(['region'])['AveragePrice'].mean().to_dict()\ndf_label['region_price']=df_label['region'].map(reg)\nreg=df_label.groupby(['year'])['AveragePrice'].mean().to_dict()\ndf_label['year_price']=df_label['year'].map(reg)\n","904af142":"col=['4046', '4225', '4770','Small Bags', 'Large Bags', 'XLarge Bags','Total Volume','Total Bags']\nfor i in col:\n    df_label[i]=np.log(1+df_label[i])","d1916020":"X=df_label[[ 'Total Volume','Total Bags', 'year','region', 'month', 'day', 'season_Volume',\n       'type_organic', 'region_price', 'year_price']]\ny=df_label['AveragePrice']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)\n\n\nlr=LinearRegression()\nlr.fit(X_train,y_train)\npredict=lr.predict(X_test)\nprint('R2_score ',r2_score(y_test,predict))\nprint('mae ',mean_absolute_error(y_test,predict))\nprint('rmse ',np.sqrt(mean_squared_error(y_test,predict)))\nsns.distplot((predict-y_test))\nprint(sum(predict-y_test))\n","87a531b6":"a=['AveragePrice', 'Total Volume',\n       'Total Bags', 'year',\n       'region', 'month', 'seasons', 'day', 'season_Volume',\n       'type_organic', 'region_price', 'year_price']","340fc3d2":"#Decision Tree\n\nX=df_label[[ 'Total Volume','Total Bags', 'year','region', 'month', 'day', 'season_Volume','type_organic', 'region_price', 'year_price']]\ny=df_label['AveragePrice']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)\ndt=DecisionTreeRegressor()","3bd7ad58":"\ndt.fit(X_train,y_train)\npredict=lr.predict(X_test)\nprint('R2_score ',r2_score(y_test,predict))\nprint('mae ',mean_absolute_error(y_test,predict))\nprint('rmse ',np.sqrt(mean_squared_error(y_test,predict)))\nsns.distplot((predict-y_test))\nprint(sum(predict-y_test))\n","fde21cbb":"rf=RandomForestRegressor()\nrf.fit(X_train,y_train)\npredict=lr.predict(X_test)\nprint('R2_score ',r2_score(y_test,predict))\nprint('mae ',mean_absolute_error(y_test,predict))\nprint('rmse ',np.sqrt(mean_squared_error(y_test,predict)))\nsns.distplot((predict-y_test))\nprint(sum(predict-y_test))","1f04695d":"#Hyperparamtere Tuning with Randomized search","ce167265":"\n#n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1000, num = 12)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(5, 40, num = 6)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","8389d5c1":"rand_grid={'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\n\ndt_rs=DecisionTreeRegressor()\n\nrv=RandomizedSearchCV(estimator=dt_rs,param_distributions=rand_grid,scoring='neg_mean_squared_error',\n                      n_iter=10,cv=3,random_state=42, n_jobs = 1)","0673ea0e":"rv.fit(X_train,y_train)\n\npred=rv.predict(X_test)\nr2_score(y_test,pred)","36060f38":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(5, 40, num = 6)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","1c04d9e4":"rf_rs=RandomForestRegressor()\n\nrv=RandomizedSearchCV(estimator=rf_rs,param_distributions=rand_grid,scoring='neg_mean_squared_error',\n                      n_iter=10,cv=3,random_state=42, n_jobs = 1)\nrv.fit(X_train,y_train)\npred=rv.predict(X_test)\nprint(r2_score(y_test,pred))\n\nsns.scatterplot(y_test,pred)","fd33ca53":"\n\nfrom xgboost import XGBRegressor\nxgbr = XGBRegressor(silent=True)   \nxgbr.fit(X_train,y_train)\ny_pred = xgbr.predict(X_test)  \nprint(r2_score(y_test,y_pred))\nsns.scatterplot(y_test,y_pred)","9466f81c":"#now let us see region wise\n1. which region has high price\n2. which region consumed high volumes of avacados\n3. total bags sold per each region","d336c3fc":"RandomForest","493bfee9":"SO RF with hyperparametre give good result\n\nVote if you like any of it .","63532a40":"So i decided to add columns based on mean season price, mean total volumes","b08697b7":"#wrt to year\n1. avg price in each year\n2. total vol sold in each year\n3. total bags sold in each year","18f25d82":"xgboost","2a6b9d9f":"**#lets check hoe avegare_price changes wrt to Seasons\nspring runs from March 1 to May 31;\nsummer runs from June 1 to August 31;****\nfall (autumn) runs from September 1 to November 30; and\nwinter runs from December 1 to February 28 (February 29 in a leap year).**","3bf453c6":"#lets plot wrt to month wise","430a0d89":"#wrt to type.\n1. avg price for each type\n2. total vol sod of each type\n3. total bags sold of each type\n","d828f44b":"#lets see how they change wrt to year"}}