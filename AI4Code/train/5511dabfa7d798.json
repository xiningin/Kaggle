{"cell_type":{"2380b12c":"code","7460a355":"code","a40bb7d3":"code","1532d288":"code","09765478":"code","cc81d8ee":"code","ecba1210":"code","452b6416":"code","9780c39d":"code","773ed23c":"code","82337f36":"code","92fecae0":"code","48a6a261":"code","0bfb9e45":"code","b4d6673b":"code","d21469b0":"code","33ad7c4d":"code","7be21024":"code","1fcd86fe":"code","76f40d4d":"code","c16b4052":"code","1f2b9c70":"code","6555d962":"code","e97f0240":"code","7fb0a42d":"code","c82f0e2a":"code","d19bf7aa":"code","3b3f636c":"markdown","77a65d71":"markdown","e60fe25f":"markdown","2738778e":"markdown","f0b4c883":"markdown","de9fb84c":"markdown","f8e360df":"markdown","cc0a399f":"markdown","7305efc1":"markdown","68572feb":"markdown","86c0a267":"markdown","535601b0":"markdown","1349b536":"markdown","35aebf00":"markdown","9c1b20df":"markdown","b270752c":"markdown","593b788d":"markdown","280a182b":"markdown","95a2db95":"markdown"},"source":{"2380b12c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 # opencv\n#from mtcnn.mtcnn import MTCNN\nfrom matplotlib import pyplot as plt\nfrom keras.models import load_model\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7460a355":"# extract a single face from a given photograph\ndef extract_face(filename, required_size=(160, 160)):\n    # load image from file\n    image = Image.open(filename)\n    # convert to RGB, if needed\n    image = image.convert('RGB')\n    # convert to array\n    pixels = np.asarray(image)\n# resize pixels to the model size\n    image = Image.fromarray(pixels)\n    image = image.resize(required_size)\n    face_array = np.asarray(image)\n    return face_array","a40bb7d3":"img = extract_face('\/kaggle\/input\/small-rmfrd\/AFDB_face_dataset\/aidai\/1_0_aidai_0039.jpg')\nplt.imshow(img, cmap = 'gray', interpolation = 'bicubic')\n#plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis\nplt.show()\nprint(img.shape)","1532d288":"def load_face(dir):\n    faces = list()\n    # enumerate files\n    for filename in os.listdir(dir):\n        path = dir + filename\n        face = extract_face(path)\n        faces.append(face)\n    return faces\n\ndef load_dataset(dir):\n    # list for faces and labels\n    X, y = list(), list()\n    for subdir in os.listdir(dir):\n        path = dir + subdir + '\/'\n        faces = load_face(path)\n        labels = [subdir for i in range(len(faces))]\n        # print(\"loaded %d sample for class: %s\" % (len(faces),subdir) ) # print progress\n        X.extend(faces)\n        y.extend(labels)\n    return np.asarray(X), np.asarray(y)","09765478":"# load train dataset\ntrainX, trainy = load_dataset('\/kaggle\/input\/small-rmfrd\/AFDB_face_dataset\/')\nprint(trainX.shape, trainy.shape)","cc81d8ee":"trainx, valid = train_test_split(trainX, test_size=0.1, random_state=42, shuffle=True)","ecba1210":"\nprint(\"number of image in train dataset : %s\" %(len(trainx)))\n\nprint(\"number of image in validation dataset : %s\" %(len(valid)))","452b6416":"y_train, y_valid = train_test_split(trainy, test_size=0.1, random_state=42, shuffle=True)","9780c39d":"print(\"number of image in train dataset : %s\" %(len(y_train)))\n\nprint(\"number of image in validation dataset : %s\" %(len(y_valid)))","773ed23c":"# load train dataset\ntestX, testy = load_dataset('\/kaggle\/input\/small-rmfrd\/AFDB_masked_face_dataset\/')\nprint(trainX.shape, trainy.shape)","82337f36":"# save and compress the dataset for further use\nnp.savez_compressed('extracted_masked_unmasked.npz', trainx, y_train, valid, y_valid,testX, testy)","92fecae0":"data = np.load('extracted_masked_unmasked.npz')\ntrainx, y_train, valid, y_valid,testX, testy = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3'], data['arr_4'], data['arr_5']\nprint('Loaded: ', trainx.shape, y_train.shape, valid.shape, y_valid.shape,testX.shape, testy.shape)","48a6a261":"facenet_model = load_model('\/kaggle\/input\/facenet\/keras-facenet\/model\/facenet_keras.h5')\nprint('Loaded Model')","0bfb9e45":"print('Loaded: ', trainx.shape, y_train.shape, valid.shape, y_valid.shape,testX.shape, testy.shape)","b4d6673b":"def get_embedding(model, face):\n    # scale pixel values\n    face = face.astype('float32')\n    # standardization\n    mean, std = face.mean(), face.std()\n    face = (face-mean)\/std\n    # transfer face into one sample (3 dimension to 4 dimension)\n    sample = np.expand_dims(face, axis=0)\n    # make prediction to get embedding\n    yhat = model.predict(sample)\n    return yhat[0]","d21469b0":"emdTrainX = list()\nfor face in trainx:\n    emd = get_embedding(facenet_model, face)\n    emdTrainX.append(emd)\nemdTrainX = np.asarray(emdTrainX)\nprint(emdTrainX.shape)\nembValid = list()\nfor face in valid:\n    emd = get_embedding(facenet_model,face)\n    embValid.append(emd)\nembValid = np.asarray(embValid)","33ad7c4d":"emdTestX = list()\nfor face in testX:\n    emd = get_embedding(facenet_model, face)\n    emdTestX.append(emd)\nemdTestX = np.asarray(emdTestX)\nprint(emdTestX.shape)\n","7be21024":"# save arrays to one file in compressed format\nnp.savez_compressed('embeddings_masked.npz', emdTrainX, y_train, embValid, y_valid, emdTestX, testy)","1fcd86fe":"data = np.load('embeddings_masked.npz')\nemdTrainX, y_train, embValid, y_valid, emdTestX, testy = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3'], data['arr_4'], data['arr_5']","76f40d4d":"print('Loaded: ', emdTrainX.shape, y_train.shape, embValid.shape, y_valid.shape, emdTestX.shape, testy.shape)","c16b4052":"from sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.svm import SVC\nimport pickle\nprint(\"Dataset: train=%d,validation = %d, test=%d\" % (emdTrainX.shape[0],embValid.shape[0] ,emdTestX.shape[0]))\n# normalize input vectors\nin_encoder = Normalizer(norm='l2')\nemdTrainX_norm = in_encoder.transform(emdTrainX)\nembValid_norm = in_encoder.transform(embValid)\nemdTestX_norm = in_encoder.transform(emdTestX)\n# label encode targets\nout_encoder = LabelEncoder()\n#encoder_arr = np.append (y_train, 'chenderong')\nout_encoder.fit(y_train)\n\n","1f2b9c70":"trainy_enc = out_encoder.transform(y_train)\ny_valid_enc = out_encoder.transform(y_valid)\ntesty_enc = out_encoder.transform(testy)","6555d962":"# fit model\nmodel = SVC(kernel='linear', probability=True)\n#model = SVC(kernel='poly', probability=True)\n#model = SVC(kernel='rbf', probability=True)\nmodel.fit(emdTrainX_norm, trainy_enc)","e97f0240":"# predict\nyhat_valid = model.predict(embValid_norm)\nyhat_test = model.predict(emdTestX_norm)\n# score\nscore_valid = accuracy_score(y_valid_enc, yhat_valid)\nscore_test = accuracy_score(testy_enc, yhat_test)\n# summarize\nprint('Accuracy: train=%.3f, test=%.3f' % (score_valid*100, score_test*100))","7fb0a42d":"filename = 'linear.sav'\npickle.dump(model, open(filename, 'wb'))\n#filename = 'poly.sav'\n#pickle.dump(model, open(filename, 'wb'))\n#filename = 'rbf.sav'\n#pickle.dump(model, open(filename, 'wb'))","c82f0e2a":"loaded_model = pickle.load(open('linear.sav', 'rb'))","d19bf7aa":"from random import choice\nfor i in range(20):\n    # select a random face from test set\n    selection = choice([i for i in range(testX.shape[0])]) \n    random_face = testX[selection]\n    random_face_emd = emdTestX_norm[selection]\n    random_face_class = testy_enc[selection]\n    random_face_name = out_encoder.inverse_transform([random_face_class])\n    # prediction for the face\n    samples = np.expand_dims(random_face_emd, axis=0)\n    yhat_class = loaded_model.predict(samples)\n    yhat_prob = loaded_model.predict_proba(samples)\n    class_index = yhat_class[0]\n    if class_index <= 75:\n        # get name\n        class_probability = yhat_prob[0,class_index] * 100\n        predict_names = out_encoder.inverse_transform(yhat_class)\n        #print('Predicted: %s (%.3f)' % (predict_names[0], class_probability))\n        #if random_face_name[0] == predict_names[0]:\n        print('Predicted: %s (%.3f)' % (predict_names[0], class_probability))\n        print('Expected: %s' % random_face_name[0])\n        # plot face\n        plt.imshow(random_face)\n        title = '%s (%.3f)' % (predict_names[0], class_probability)\n        plt.title(title)\n        plt.show()","3b3f636c":"### Compress and Save Train and Test Dataset\n#### > Note: After face extraction process, train and dataset may occupy memory and there might be memorry error. The reason of this process is to deal with this issue . ","77a65d71":"#### > Note: Normally, In this part of the pipeline, MTCNN library are used; however, faces cannot be detected by MTCNN because of weared mask.","e60fe25f":"### Load Model","2738778e":"### Compress and Save Train and Test Embeddings ","f0b4c883":"### Load saved compressed file","de9fb84c":"## Result Examples","f8e360df":"# Face Recognition with FaceNet Embedding and Support Vector Classification (SVC) Models\n## Pipeline:\n1. Extract Faces\n2. Face Embeddings with FaceNet\n3. Label Encoding \n4. Face Classification with SVC","cc0a399f":"## Extract Faces","7305efc1":"### Load Saved Compressed Dataset","68572feb":"## Label Encoding","86c0a267":"### Load Test Dataset","535601b0":"### Save Model","1349b536":"### Convert Each Face in the Test Set into Embedding","35aebf00":"### Encoding Trainy and Testy with Fitted Encoder","9c1b20df":"## Load Train and Test Dataset\n### Load Train Dataset","b270752c":"## Face Classification with SVC\n#### > Note 1: In SVC, different kernels can be used for multiclass classification. These kernels are : linear, polynomial,  radial basis function (rbf). The kernel is a method or function which is used for linear classification for nonlinear problems or classification. As a default rbf are used; however, in the model, linear is used to make classification process faster since rbf works more slowly. \n\n#### > Note 2: If you want you can use other kernels, I write their code to use them as comment.","593b788d":"### Example","280a182b":"## Face Embeddings with FaceNet\n### Load Model","95a2db95":"### Convert Each Face in the Train Set into Embedding"}}