{"cell_type":{"c33817d8":"code","e15a7cd5":"code","375a7b96":"code","3a4c6ea4":"code","249deb17":"code","babab8e6":"code","4b1419a3":"code","59b61934":"code","28f325a4":"code","5ff75a4d":"code","e5927006":"code","ae999180":"code","d1586a8e":"code","29e3cd81":"code","96aa43f7":"code","fffb79cf":"code","f5bc3b97":"code","5a74dd0e":"code","6c26d1d9":"code","18eba8fe":"code","59225d84":"code","661d0297":"code","3e7b6e1e":"code","fb5267b8":"code","dbcf529c":"markdown","9cc890c0":"markdown","d4812404":"markdown","59a17445":"markdown"},"source":{"c33817d8":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py \npy.init_notebook_mode(connected=True)                  \nimport plotly.graph_objs as go                         \nimport plotly.tools as tls                             \nfrom collections import Counter                        \nimport plotly.figure_factory as ff\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score","e15a7cd5":"df = pd.read_csv(\"..\/input\/amazon-alexa-reviews\/amazon_alexa.tsv\", sep=\"\\t\")","375a7b96":"df.head()","3a4c6ea4":"df.info()","249deb17":"# HOW MANY ALEXA PRODUCTS ARE THERE?\ndf['variation'].nunique()","babab8e6":"# HOW MANY COMMENTS HAVE BEEN MADE ABOUT WHICH PRODUCT? \ndf['variation'].value_counts()","4b1419a3":"# WHICH ALEXA PRODUCT GETS THE HIGHEST VOTES? \ndf.groupby('variation').agg({\"rating\":\"mean\"}).sort_values('rating', ascending = False).head()","59b61934":"# HOW MANY POSITIVE FEEDBACKS ARE THERE? \n# 1 = Positive , 0 = negative\ndf[\"feedback\"].value_counts().head()","28f325a4":"trace0 = go.Bar(\n            x = df[df[\"feedback\"]== 1][\"feedback\"].value_counts().index.values,\n            y = df[df[\"feedback\"]== 1][\"feedback\"].value_counts().values,\n            name='Positive Feedback')\n\ntrace1 = go.Bar(\n            x = df[df[\"feedback\"]== 0][\"feedback\"].value_counts().index.values,\n            y = df[df[\"feedback\"]== 0][\"feedback\"].value_counts().values,\n            name='Negative Feedback')\n\n\ndata = [trace0, trace1]\nlayout = go.Layout(yaxis=dict(title='Count'),\n                   xaxis=dict(title='Feedback'),title='Feedback Distribution')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\npy.iplot(fig)","5ff75a4d":"# HOW MANY POSITIVE AND NEGATIVE COMMENTS WERE WRITTEN ON WHICH PRODUCT? \ntrace0 = go.Bar(\n            x = df[df[\"feedback\"]== 1][\"variation\"].value_counts().index.values,\n            y = df[df[\"feedback\"]== 1][\"variation\"].value_counts().values,\n            name='Positive Feedback')\n\ntrace1 = go.Bar(\n            x = df[df[\"feedback\"]== 0][\"variation\"].value_counts().index.values,\n            y = df[df[\"feedback\"]== 0][\"variation\"].value_counts().values,\n            name='Negative Feedback')\n\ndata = [trace0, trace1]\nlayout = go.Layout(yaxis=dict(title='Count'),\n                   xaxis=dict(title='Feedback'),title='Feedback distribution')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\npy.iplot(fig)","e5927006":"# AVERAGE VOTES OF THE PRODUCTS \nrating = df.groupby('variation').agg({\"rating\":\"mean\"})\nrating['variation'] = rating.index\nrating.reset_index(drop=True)\n\ntrace = go.Bar(x=rating['variation'], y=rating['rating'])\n\nlayout = go.Layout(yaxis=dict(title='Average Rating'),\n                   xaxis=dict(title='Alexa Product'),title='Product - Avarage Rating Distribution')\n\nfig = go.Figure(data=trace, layout=layout)\nfig.data[0].marker.line.width = 2\nfig.data[0].marker.line.color = \"black\"\npy.iplot(fig)","ae999180":"# HOW MUCH WAS USED FROM WHICH VOTES?\ntrace = go.Bar(\n            x = df[\"rating\"].value_counts().index.values,\n            y = df[\"rating\"].value_counts().values,\n            name='Quantity')\n\nlayout = go.Layout(yaxis=dict(title='Quantity'),\n                   xaxis=dict(title='Ratings'),title='# of Votes Quantity')\n\nfig = go.Figure(data=trace, layout=layout)\nfig.data[0].marker.line.width = 2\nfig.data[0].marker.line.color = \"black\"\npy.iplot(fig)","d1586a8e":"#The date and rating of users' comments have been removed. The date on which the comment is made does not matter about the comment. \n#It may cause overfitting as the given score will be directly proportional to the comment. \n#Therefore, the date and rating columns have been removed. \ndf = df.drop(['date','rating'], axis=1)\ndf.head()","29e3cd81":"# Each of the products has been adjusted for the random forest.\nvariation_dummies = pd.get_dummies(df['variation'], drop_first = True)\nvariation_dummies.head()","96aa43f7":"df.drop(['variation'], axis=1, inplace=True)\ndf.head()","fffb79cf":"df = pd.concat([df, variation_dummies], axis=1)\ndf.head()","f5bc3b97":"# All of the comments have been vectorized. \n# In this way, it was made meaningful for the random forest algorithm. \n# Each word in the data set was expressed as a number. \n# NLP techniques were not applied in detail in this study. \n\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nalexa_countvectorizer = vectorizer.fit_transform(df['verified_reviews'])\nalexa_countvectorizer.shape","5a74dd0e":"print(alexa_countvectorizer.toarray())","6c26d1d9":"df.drop(['verified_reviews'], axis=1, inplace = True)\ndf.head()","18eba8fe":"encoded_reviews = pd.DataFrame(alexa_countvectorizer.toarray())\nencoded_reviews.head()","59225d84":"df = pd.concat([df, encoded_reviews], axis=1)\ndf.head()","661d0297":"X = df.drop(['feedback'], axis=1)\ny = df['feedback']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state = 345)\n\nprint(\"X_train Size :\",X_train.shape)\nprint(\"X_test Size :\",X_test.shape)\nprint(\"y_train Size :\",y_train.shape)\nprint(\"y_test Size :\",y_test.shape)","3e7b6e1e":"rf_params = {\"n_estimators\" :[100,200,500,1000], \n             \"max_features\": [3,5,7], \n             \"min_samples_split\": [2,5,10,30],\n             \"max_depth\": [3,5,8,None]}\n\nrf_model = RandomForestClassifier(random_state = 357)\n\nrf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1,verbose = 1).fit(X_train, y_train)\n\nrf_tuned = RandomForestClassifier(**rf_cv_model.best_params_).fit(X,y)","fb5267b8":"tuned = [rf_tuned]\nprint(\"Best Model Parameters and Scores:\")\nfor i in tuned:\n    score = cross_val_score(i, X_train, y_train, cv = 10).mean()\n    print(i,\"score:\",score)","dbcf529c":"<a id='1'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Exploratory Data Analysis<br><\/h1>","9cc890c0":"<a id='2'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Data Cleaning and Feature Engineering<br><\/h1>","d4812404":"<!---------------------------------------------->\n<!-----------------ANA BA\u015eLIK------------------->\n<!---------------------------------------------->\n<center> <h1 style=\"background-color:orange; color:white\"><br>Random Forest for Amazon Reviews Classification<br><\/h1><\/center>\n\n\n<!---------------------------------------------->\n<!------------------A\u00c7IKLAMA-------------------->\n<!---------------------------------------------->\n<br>\nAmazon Alexa, also known simply as Alexa, is a virtual assistant technology developed by Amazon, first used in the Amazon Echo smart speaker and the Echo Dot, Echo Studio and Amazon Tap speakers developed by Amazon Lab126. It is capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, sports, and other real-time information, such as news. Alexa can also control several smart devices using itself as a home automation system. Users are able to extend the Alexa capabilities by installing \"skills\" (additional functionality developed by third-party vendors, in other settings more commonly called apps) such as weather programs and audio features. It uses NLU (natural language understanding), speech recognition and other weak AI to perform these tasks.<br \/><br \/>\n\n\n<!---------------------------------------------->\n<!------------VER\u0130 SET\u0130 HAKKINDA B\u0130LG\u0130---------->\n<!---------------------------------------------->\n\n<center> <h1 style=\"background-color:orange; color:white\" ><br>Details about the dataset<br><\/h1><\/center>\n<br>\nThis dataset consists of a nearly 3000 Amazon customer reviews (input text), star ratings, date of review, variant and feedback of various amazon Alexa products like Alexa Echo, Echo dots, Alexa Firesticks etc. for learning how to train Machine for sentiment analysis. \n<br><br>\n\n\n<!---------------------------------------------->\n<!-----VER\u0130 SET\u0130 DE\u011e\u0130\u015eKENLER\u0130 HAKKINDA B\u0130LG\u0130---->\n<!---------------------------------------------->\n\n<p>\n- <b>Rating:<\/b>This column includes votes cast by users. (1-5)<br \/>\n- <b>Date:<\/b>This column shows on what date users voted.<br \/>\n- <b>Variation<\/b>This column shows which product has been commented on.<br \/>\n- <b>Verified_rewiews<\/b>User comments<br \/>\n- <b>Feedback<\/b>This column indicates whether user comments are positive or negative. 1 is positive comment, 0 is negative comment.<br \/>\n<\/p>\n\n<!---------------------------------------------->\n<!------------------G\u00d6RSEL---------------------->\n<!---------------------------------------------->\n\n<center><img src=\"https:\/\/www.mytrendyphone.eu\/images\/Amazon-Echo-Dot-3-Smart-Speaker-with-Alexa-and-Alarm-Clock-Black-0841667160306-17112020-01-p.jpg\" style=\"width:20%;height:10%;\"><\/center>\n   \n\n<!---------------------------------------------->\n<!-------------------TABLO---------------------->\n<!---------------------------------------------->\n<br>    \n<center>    \n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action\" style=\"background-color:orange; color:white\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\"><br>Notebook Content!<br><\/h3>  \n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\" style=\"color:orange\">Exploratory Data Analysis<span        class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">1<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"profile\" style=\"color:orange\">Data Cleaning and Feature Engineering<span        class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">2<\/span><\/a>\n  \n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#3\" role=\"tab\" aria-controls=\"settings\" style=\"color:orange\">Model Tuning and Result<span class=\"badge badge-primary badge-pill\" style=\"background-color:orange; color:white\">3<\/span><\/a><\/center>","59a17445":"<a id='3'><\/a><center> <h1 style=\"background-color:orange; color:white\" ><br>Model Tuning and Result<br><\/h1>"}}