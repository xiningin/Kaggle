{"cell_type":{"f671782e":"code","d9e0cc26":"code","081bb61c":"code","916b2ec8":"code","253bb109":"code","63b4453c":"code","6df1081e":"code","735abe5b":"code","0398426a":"code","7b17f891":"code","6b6c8492":"code","8a748fe2":"code","d3e8bfa8":"code","8e898e66":"code","e028b4b6":"code","b9740257":"code","9d133232":"code","e40537ea":"code","4fca4089":"code","d7b1f90b":"code","ac40b4ca":"code","1a4a8954":"code","4499a5da":"code","a7180104":"code","22d6fea8":"code","ba86d88e":"code","d60cc84b":"code","9b6573c5":"code","d374fecf":"code","88248131":"code","c6647c41":"code","158d0bb7":"code","2c0e84f0":"code","47c82f86":"code","0468478b":"code","d24f4ac5":"code","a4df5918":"code","eacece8f":"code","ab3498bd":"code","afcc9261":"code","c26095e6":"code","3082195b":"code","8e5b3180":"code","152f2e4b":"code","4d8aaec6":"code","414e3079":"code","4c908a53":"code","f9cf7323":"code","af4571b6":"code","cf30c6be":"code","7d4fcb81":"code","77d1dc34":"markdown","bce7db5c":"markdown","c06f105c":"markdown","37d3cad5":"markdown","6caf2bc3":"markdown","a3f4d3d8":"markdown","9b87a964":"markdown","c83c7816":"markdown","465f5ae4":"markdown","47e1db11":"markdown","ec9f9638":"markdown","8c454f98":"markdown","0c3d935f":"markdown","1edc089e":"markdown","a727c670":"markdown","80c40351":"markdown","fc9f7387":"markdown"},"source":{"f671782e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\nfrom collections import Counter\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d9e0cc26":"traindf = pd.read_csv(\"..\/input\/train.csv\")\ntestdf  = pd.read_csv(\"..\/input\/test.csv\")\nIds = testdf.PassengerId","081bb61c":"target = traindf['Survived']\nall_data = [traindf,testdf]","916b2ec8":"numerical_features = [col for col in traindf.drop(\"PassengerId\",axis=1)._get_numeric_data().columns ]\ncatg_cols = traindf.select_dtypes(include=[\"object\"]).columns.values","253bb109":"outlier_indices=[]\nindices =[]\nfor col in numerical_features:\n    q1,q3 = np.percentile(traindf[col],[25,75])\n    IQR = q3-q1\n    upper_bound = q3+1.5*IQR\n    lower_bound = q1-1.5*IQR\n    data = traindf[(traindf[col]>upper_bound)] | traindf[traindf[col]<lower_bound]\n    outlier_indices.extend(data.index)\noutlier_indices = Counter(outlier_indices)\noutlier_indices = [k for k,v in outlier_indices.items() if v>2]\noutlier_indices\ntraindf.loc[outlier_indices]","63b4453c":"traindf = traindf.drop(outlier_indices,axis=0).reset_index(drop=True)\ntarget = target.drop(outlier_indices,axis=0).reset_index(drop=True)","6df1081e":"portion_survived   = (traindf[traindf['Survived']==1][\"Survived\"].count()\/traindf.shape[0])*100\nportion_not_survived = (traindf[traindf['Survived']==0][\"Survived\"].count()\/traindf.shape[0])*100\nfig = plt.figure(figsize=(3,4))\nsns.countplot(traindf['Survived'])\nplt.title(\"Survival\")\nplt.show()\nsurvival_df  =pd.DataFrame({\"person_survived\":\"%0.2f\"%portion_survived,\"person not survived\":\"%0.2f\"%portion_not_survived},index=[\"survival(%)\"])\nsurvival_df","735abe5b":"plt.figure(figsize=(6,4))\nsns.barplot(traindf[\"Sex\"],y=traindf[\"Survived\"])\nplt.ylabel(\"Survival prob\")\nplt.show()\ntraindf[[\"Sex\",\"Survived\"]].groupby(\"Sex\").mean()","0398426a":"classp1_pass = (traindf[traindf[\"Pclass\"]==1].reset_index(drop=True))\nclassp2_pass = (traindf[traindf[\"Pclass\"]==2].reset_index(drop=True))\nclassp3_pass= (traindf[traindf[\"Pclass\"]==3].reset_index(drop=True))\nproportion_p1 = (classp1_pass[classp1_pass[\"Survived\"]==1][\"Survived\"].count()\/len(classp1_pass))*100\nproportion_p2 = (classp2_pass[classp2_pass[\"Survived\"]==1][\"Survived\"].count()\/len(classp2_pass))*100\nproportion_p3 = (classp3_pass[classp3_pass[\"Survived\"]==1][\"Survived\"].count()\/len(classp3_pass))*100\nsurvivalC = pd.DataFrame({\"Survival(%)\":[proportion_p1,proportion_p2,proportion_p3],\"Total_passenger\":[len(classp1_pass),len(classp2_pass),len(classp3_pass)]},index=[\"classp1\",\"classp2\",\"classp3\"])\nfig,ax = plt.subplots(1,2,figsize=(10,5))\nsns.barplot(x='Pclass',y='Survived',data=traindf,ax=ax[0])\nsns.barplot(x='Pclass',y='Survived',hue=\"Sex\",data=traindf,ax=ax[1])\nax[0].set_title(\"Pclass distribution\")\nax[0].set_ylabel(\"Survival prob\")\nax[1].set_ylabel(\"Survival prob\")\nplt.show()\nsurvivalC\n","7b17f891":"for data in [traindf,testdf]:\n    data[\"Sex\"] = data[\"Sex\"].apply(lambda x: 1 if x==\"male\" else 0)\n    data[\"Pclass\"] = data[\"Pclass\"].astype(str)","6b6c8492":"for data in [traindf,testdf]:\n    data[\"total_members\"] = data[\"SibSp\"]+data[\"Parch\"]+1\n    data['isAlone'] = data[\"total_members\"].apply(lambda x: 1 if x==1 else 0)","8a748fe2":"plt.figure()\nsns.barplot(x = traindf[\"isAlone\"],y=traindf[\"Survived\"])\nplt.ylabel(\"Survival Prob\")\nplt.show()\n","d3e8bfa8":"print(traindf[\"Age\"].describe())\nprint(\"----------------------------\")\nprint(testdf[\"Age\"].describe())","8e898e66":"traindf[[\"Pclass\",\"Age\"]].groupby(\"Pclass\").hist()\ntraindf[[\"Pclass\",\"Age\"]].groupby(\"Pclass\").mean().iloc[1]","e028b4b6":"import random\nfor data in [traindf,testdf]:\n    st = int(data[\"Age\"].std())\n    mean = int(data[\"Age\"].mean())\n    data[\"Age\"] = data[\"Age\"].fillna(random.randint(mean-st,mean+st))","b9740257":"plt.figure()\nsns.catplot(x='Pclass',y=\"Age\",hue=\"Survived\",data=traindf,kind='violin')\nplt.show()\nplt.figure()\nsns.catplot(x='Survived',y='Age',data=traindf,kind=\"violin\")\nplt.show()","9d133232":"for data in [traindf,testdf]:\n    data[\"Age\"] = data[\"Age\"].apply(lambda x:\"1\" if x<=10 else(\"2\" if (x>10 and x<30) else \"3\"))","e40537ea":"traindf[\"Age\"].sample(2)","4fca4089":"for data in [traindf,testdf]:\n    data[\"Embarked\"] = data[\"Embarked\"].fillna(data[\"Embarked\"].mode())","d7b1f90b":"traindf.info()","ac40b4ca":"traindf.describe()","1a4a8954":"plt.figure(figsize=(25,6))\nsns.catplot(x=\"Survived\",y=\"Fare\",data=traindf,kind='violin')","4499a5da":"for data in [traindf,testdf]:\n    median = data[\"Fare\"].median()\n    bins = pd.IntervalIndex.from_tuples([(0, 10), (10, 50),(50,1000)],closed=\"left\")\n    data[\"Fare\"] = data[\"Fare\"].fillna(median)\n    data[\"Fare\"] = pd.cut(data[\"Fare\"],bins,labels=[1,2,3])\n    ","a7180104":"traindf.describe()","22d6fea8":"drop_columns = [\"PassengerId\",\"Name\",\"SibSp\",\"Parch\",\"Ticket\",\"Cabin\"]","ba86d88e":"for data in [traindf,testdf]:\n    data.drop(drop_columns,axis=1,inplace=True)","d60cc84b":"traindf = traindf.drop(\"Survived\",axis=1)","9b6573c5":"for data in [traindf,testdf]:\n    data[\"total_members\"] = data[\"total_members\"].astype(str)","d374fecf":"data = pd.concat([traindf,testdf],axis=0)\ndata = pd.get_dummies(data)\ntraindf = data[:traindf.shape[0]]\ntestdf = data[traindf.shape[0]:]","88248131":"trainX = traindf.values\ntrainY = target.values\ntestX = testdf.values\nfrom sklearn.model_selection import train_test_split\ntrainx,testx,trainy,testy = train_test_split(trainX,trainY,test_size=0.3,random_state=42)","c6647c41":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n","158d0bb7":"classifier = []\nlr = LogisticRegression()\nrf = RandomForestClassifier()\nabc = AdaBoostClassifier()\ngbc = GradientBoostingClassifier()\nbc = BaggingClassifier()\netc = ExtraTreesClassifier()\nxgbc = XGBClassifier()\nsvm = SVC()\ndtc = DecisionTreeClassifier()\nclassifier.extend([lr,abc,rf,gbc,bc,etc,xgbc,svm,dtc])","2c0e84f0":"from sklearn.model_selection import KFold,cross_val_score,cross_validate\ndef scoreModel(n_cv,model):\n        kf = KFold(n_cv,random_state=42,shuffle=True).get_n_splits()\n        cv_score = cross_validate(model,trainX,trainY,cv=kf)\n        return cv_score","47c82f86":"cv_results_train=[]\ncv_results_test = []\nmodel_param = []\nmodel_time = []\ncv_std=[]\nfor model in classifier:\n    score = scoreModel(10,model)\n    model_param.append((model.get_params()))\n    cv_results_train.append(score[\"train_score\"].mean())\n    cv_results_test.append(score[\"test_score\"].mean())\n    model_time.append(score[\"fit_time\"].mean())\n    cv_std.append(score[\"test_score\"].std())","0468478b":"df = pd.DataFrame({\"ML algorithms\":[model.__class__.__name__ for model in classifier],\"Parameters\":model_param,\"Accuracy mean(train)\":cv_results_train,\"Accuracy mean(test)\":cv_results_test,\n                  \"fit time(sec)\":model_time,\"Cv_std\":cv_std})\ndf.sort_values(by=\"Accuracy mean(test)\",ascending=False).reset_index(drop=True)","d24f4ac5":"plt.figure(figsize=(10,7))\nsns.barplot(x='Accuracy mean(test)',y=\"ML algorithms\",data=df,orient=\"V\",**{\"xerr\":cv_std})","a4df5918":"from sklearn.model_selection import GridSearchCV\ncv_split = KFold(7,random_state=42,shuffle=True).get_n_splits()\ndtc_params={\"criterion\":[\"gini\",\"entropy\"], \"min_samples_split\":[2,3,4],\"min_samples_leaf\":[1,2],\"random_state\":[0],\"max_depth\":[100,200,None]}\nrf_params={\"criterion\":[\"gini\",\"entropy\"],\"bootstrap\" :[True,False],\"random_state\":[0],\"n_estimators\":[50,100,300]}\nabc_params={\"n_estimators\":[50,100,300],\"learning_rate\":[0.01,0.03,0.1,0.3,1],\"algorithm\":[\"SAMME.R\"],\"random_state\":[0]}\ngbc_params={\"loss\":[\"deviance\"],\"learning_rate\":[0.01,0.03,0.1,0.3,1],\"n_estimators\":[50,300,500],\"random_state\":[0],\"criterion\":[\"friedman_mse\"]}\nbc_params={\"n_estimators\":[50,100,300],\"oob_score\":[True,False],\"random_state\":[0]}\nxgbc_param = {\"booster\":[\"dart\",\"gbtree\"],\"learning_rate\":[0.1,0.3,1],\"max_depth\":[2,3,4],\"n_estimators\":[100,300],\"seed\":[0]}","eacece8f":"gridSearch = []\ngs_dtc = GridSearchCV(dtc,param_grid = dtc_params,scoring=\"accuracy\",cv=cv_split,verbose=1,n_jobs=-1)\ngs_rf = GridSearchCV(rf,param_grid=rf_params,scoring=\"accuracy\",n_jobs=-1,cv=cv_split,verbose=1)\ngs_abc = GridSearchCV(abc,param_grid=abc_params,scoring=\"accuracy\",n_jobs=-1,cv=cv_split,verbose=1)\ngs_gbc = GridSearchCV(gbc,param_grid=gbc_params,scoring=\"accuracy\",n_jobs=-1,cv=cv_split,verbose=1)\ngs_bc = GridSearchCV(bc,param_grid=bc_params,scoring=\"accuracy\",n_jobs=-1,cv=cv_split,verbose=1)\ngs_xgbc = GridSearchCV(xgbc,param_grid = xgbc_param,scoring=\"accuracy\",n_jobs=-1,cv=cv_split,verbose=1)\ngridSearch.extend([gs_dtc,gs_rf,gs_abc,gs_gbc,gs_bc,gs_xgbc])","ab3498bd":"best_params=[]\nbest_train_score = []\nbest_test_score = []\nstd_train = []\nstd_test = []\nbest_index =0 \nfor gs in gridSearch:\n    gs.fit(trainx,trainy)\n    best_params.append((gs.best_params_))\n    train_score = gs.cv_results_[\"mean_train_score\"][gs.best_index_]\n    test_score = gs.cv_results_[\"mean_test_score\"][gs.best_index_]\n    best_train_score.extend([train_score])\n    best_test_score.extend([test_score])\n    std_train.append([gs.cv_results_['std_train_score'][gs.best_index_]])\n    std_test.append(gs.cv_results_['std_test_score'][gs.best_index_])","afcc9261":"grid_df = pd.DataFrame({\"MLA\":[model.estimator.__class__.__name__ for model in gridSearch],\"Best_params\":best_params,\n                        \"Best train accuracy\":best_train_score,\"Best Test accuracy\":best_test_score,\n                        \"std_train\":std_train,\"std_test\":std_test}\n                      )\nprint(\"Performance of models after model tuning \")\ngrid_df.sort_values(by=\"Best Test accuracy\",ascending=False).reset_index(drop=True)","c26095e6":"i =0\nfor model in gridSearch:\n    model.estimator.set_params(**best_params[i])\n    i = i+1","3082195b":"from sklearn.ensemble import VotingClassifier\nestimators = [\n        (\"GB\",gbc),\n        (\"RF\",rf),\n        (\"xgb\",xgbc),\n        (\"ABC\",abc)\n]","8e5b3180":"vote_hard = VotingClassifier(estimators,voting=\"soft\",weights=[2,1,3,1])\nvot_hard_cv = cross_validate(vote_hard,trainx,trainy,cv=cv_split,scoring=\"accuracy\")\nvote_hard.fit(trainx,trainy)","152f2e4b":"vote_hard.score(trainx,trainy)\nvot_hard_cv[\"test_score\"]","4d8aaec6":"gs_gbc.best_params_","414e3079":"g = GradientBoostingClassifier(criterion= 'friedman_mse',\n learning_rate= 0.01,\n loss='deviance',\n n_estimators=500,\n random_state= 0)","4c908a53":"xgbc.fit(trainx,trainy)\ng.fit(trainx,trainy)\ng.score(testx,testy)","f9cf7323":"xgbc.score(testx,testy)","af4571b6":"pred = g.predict(testX)","cf30c6be":"df_res = pd.DataFrame({\"PassengerId\":Ids,\"Survived\":pred})","7d4fcb81":"output = df_res.to_csv(\"Output.csv\",index=False)","77d1dc34":"**Survial**","bce7db5c":"# Model performance","c06f105c":"# voting classifier","37d3cad5":"these digits are based on train data set","6caf2bc3":"in both data set there are missing values therfore we should fill these missing values according to the age distribution","a3f4d3d8":"made a list of two data sets","9b87a964":"**Pclass**","c83c7816":"Outlier Detection","465f5ae4":"# **HyperParamter Tuning**","47e1db11":"the figure shows that survival rate of people who were traveling with their families has higher survival rate than traveling alone.","ec9f9638":"**SibSp and Parch**","8c454f98":"**Age**","0c3d935f":"**Embarked**","1edc089e":"as we can see survival rate of female is much higher than male, it is obvious!  ","a727c670":"**model's performance after tuning**","80c40351":"1st figure shows the survival rate according to their socio-economic status, upper class has higher survival rate. In 2nd figure it is clear what we have seen before, survival rate of female in all the classes has higher than male","fc9f7387":"**Sex**"}}