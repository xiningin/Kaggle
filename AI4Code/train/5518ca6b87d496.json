{"cell_type":{"bd3f1348":"code","720eb834":"code","d99809a5":"code","8d63781e":"code","d5c267e2":"code","46ff2927":"code","8b3404a3":"code","9f1a074b":"code","9e45fd9b":"code","8272cbfe":"code","83a68ca9":"code","1d8f4df1":"code","aad749b9":"code","835279c9":"code","003ba70e":"code","fdbf8190":"code","57e564d9":"code","8bd92654":"code","e9f3a178":"code","5b7ec33c":"code","9d51a222":"code","9567953f":"markdown"},"source":{"bd3f1348":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns","720eb834":"df1=pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndf1.columns.to_list()","d99809a5":"df1.head()","8d63781e":"df1.columns","d5c267e2":"df1.describe","46ff2927":"df1.dtypes","8b3404a3":"df1.shape","9f1a074b":"df1.info()","9e45fd9b":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","8272cbfe":"def plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","83a68ca9":"def plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","1d8f4df1":"#plt.figure(figsize=(15,10))\nplotPerColumnDistribution(df1, 8,5 )","aad749b9":"plotScatterMatrix(df1, 20, 10)","835279c9":"df1['status'].value_counts()","003ba70e":"df1['status'].value_counts().plot(kind='bar')","fdbf8190":"sns.set(font_scale=1.4)\ndf1['status'].value_counts().plot(kind='bar',color='red', figsize=(7, 6), rot=0)\nplt.xlabel(\"Placed\/Not\", labelpad=14)\nplt.ylabel(\"Count of People\", labelpad=14)\nplt.title(\"Count of People Who got placed\", y=1.02);","57e564d9":"df1['degree_t'].value_counts().plot(kind='bar',color='green')","8bd92654":"g = sns.FacetGrid(df1, col=\"gender\")\ng.map(plt.hist, \"status\");","e9f3a178":"g = sns.FacetGrid(df1, col=\"gender\", hue=\"status\")\ng.map(plt.scatter, \"ssc_b\", \"hsc_s\", alpha=.7)\ng.add_legend();","5b7ec33c":"g = sns.PairGrid(df1, hue=\"workex\")\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter)\ng.add_legend();","9d51a222":"sns.pairplot(df1, hue=\"gender\", height=2.5);","9567953f":"Kindly upvote the kernel if you find it useful! Thanks:)"}}