{"cell_type":{"33fa14e3":"code","1655421f":"code","efd014f9":"code","1446ac0f":"code","409d844b":"code","9df67a94":"code","c547adcc":"code","ffaed836":"code","61b20682":"code","cdca5a0c":"code","ad889b38":"code","54ddbdd1":"code","10dc2458":"code","495c6fd6":"code","45c1396d":"code","b529db8f":"markdown","f1233c40":"markdown","835cd45a":"markdown","9d30c4da":"markdown","41e96060":"markdown","b6368986":"markdown","9d4aa211":"markdown","e7f6d3c3":"markdown","f6521f43":"markdown","d8108911":"markdown","2249ebcd":"markdown"},"source":{"33fa14e3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1655421f":"import plotly.express as px # For Graphing\nimport pandas as pd\nimport numpy as np\nimport plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Dataset description\n\"\"\"\nS_ADJ: (Seasonally Adjusted Data)\n    NSA - Not Seasonally Adjusted\n    TC - Trend Cycle\n    SA - Seasonally Adjusted\nAGE:\n    TOTAL - Total \n    Y25-74 - 25 to 74\n    Y_LT25 - less than 25\nUNIT:\n    PC_ACT - % of active population\n    THS_PER - Thousand persons\nSEX: \n    F - Female\n    M - Male\n    T - Total\nGEO_TIME:\n    Country Code\n    \nData Flags:\n    b - break in time series\n    e - estimated\n    p - provisional\n    u - low reliability\n    c- confidential\n    f - forecast\n    r- revised\n    z - not applicable\n    d - definition differs\n    n - not significant\n    s - eurostat estimate\n    : - unavailable\n\"\"\"","efd014f9":"# Load the data\ndf = pd.read_csv('..\/input\/unemployment-in-european-union\/une_rt_m.tsv',sep='\\t')\ndf.head(5)","1446ac0f":"# Expand first column into separate columns\ndf2 = df.iloc[:,0].str.split(',',expand=True) # Creates new dataframe (df)\ndf2 = df2.rename(columns={0: \"s_adj\", 1: \"age\", 2: \"unit\", 3: \"sex\", 4: \"geo-time\"}) # Rename from 0,1,2, ...\n# Combine expanded column with data\nresult = pd.concat([df2, df], axis=1)\nresult = result.drop('s_adj,age,unit,sex,geo\\\\time', 1)\nresult.head(3)","409d844b":"# Remove characters from numeric fields, replace : with NaN\ncols = list(result.columns[5:-1].values)\nrep = ['e','b','p','u','c','f','r','z','d','n','s']\nresult[cols] = result[cols].replace(rep, '', regex=True) # Replace unwanted char\nresult[cols] = result[cols].replace(':', np.NaN, regex=True) # Replace : with NaN\nresult.head(3)","9df67a94":"# Convert Country Codes\ncodes = pd.read_csv('..\/input\/country-codes\/country_codes.csv') # Import country codes \nresult['geo-time'] = result['geo-time'].map(codes.set_index('Alpha-2 code')['Alpha-3 code']) #Convert 2 char codes to 3 char","c547adcc":"# Drop entries from multiple countries (now NaN country name)\nresult = result[result['geo-time'].notna()] # Remove countries that did not have an alpha-3 code (sub groups of EU countries)\n\n# Keep data from 2019 forward, removing 1983-2018\nresult = result.drop(result.columns[12:-1].values, 1)\nresult = result.iloc[:,:-1]\nresult.head(3)","ffaed836":"# Pivot Data\nresult = result.melt(id_vars=[\"geo-time\", \"age\", \"unit\", \"sex\", \"s_adj\"], var_name=\"Date\", value_name=\"Value\")\nresult['Date'] = result['Date'].replace('M', '-', regex=True)\nresult['Value'] = pd.to_numeric(result['Value'], errors='coerce').fillna(0)\nresult.head(3)","61b20682":"# Filter Geo Data\ngeoData = result[ (result['sex']== 'T') \n                 & (result['unit']== 'PC_ACT')\n                 & (result['s_adj']== 'SA')\n                 & (result['Value'].notna())]\n\ngeoData['Value'] = pd.to_numeric(geoData['Value'],errors='coerce')\ngeoData = geoData.sort_values(by=['geo-time','age','Date'], ascending=True).reset_index(drop=True)","cdca5a0c":"geoData['diff'] = ( (geoData[\"Value\"] - geoData[\"Value\"].shift(1) ) \/ geoData[\"Value\"]) * 100\ngeoData.loc[geoData.Date == '2019-12 ', ['diff']] = 0\ngeoData['diff'] = geoData['diff'].fillna(0)\ngeoData.loc[geoData['diff'] == float(\"-inf\"), ['diff']] = 0\ngeoData[geoData['geo-time']== 'BGR']","ad889b38":"geoData = geoData[geoData['geo-time']!= 'JPN']\ngeoData = geoData[geoData['geo-time']!= 'USA']\ngeoData = geoData[geoData['Date']!= '2019-12 ']\n\ngeoData.head(3)","54ddbdd1":"covid_cases = pd.read_csv('..\/input\/covid-cases\/covid_cases.csv')\ncovid_cases = covid_cases.drop(['dateRep','day','deaths','countriesAndTerritories','geoId','popData2019','continentExp','Cumulative_number_for_14_days_of_COVID-19_cases_per_100000'],1)\ncovid_cases.head(3)","10dc2458":"cov_cntry = covid_cases.groupby(['month','year','countryterritoryCode'])['cases'].sum().reset_index()\ncov_cntry.head(3)","495c6fd6":"cov_cntry = cov_cntry[cov_cntry['countryterritoryCode'].isin(geoData['geo-time'])].reset_index(drop=True)\ncov_cntry['Date'] = cov_cntry['year'].astype(str) + '-' + cov_cntry['month'].astype(str).str.pad(2,fillchar='0').astype(str) + ' '\ncov_cntry = cov_cntry.drop(['month','year'],1)\ncov_cntry.head()","45c1396d":"fig = make_subplots(\n    rows=3, \n    cols=2,\n    subplot_titles=(\"Unemployment Geomap\", \"% Unemployed\", \"Perc. Change from Prev Mnth\", \"COVID-19 Cases per Country\"),\n    specs=[ [{\"type\": \"scattergeo\", \"rowspan\": 3},{\"type\": \"bar\"}],\n            [None,{\"type\": \"bar\"}],\n            [None,{\"type\": \"bar\"}] ])\n\ncolors = ['teal',] * 60\ncolors[1::2] = ['thistle' for x in colors[1::2]]\n\nfor step in geoData['Date'].unique():\n    fig.append_trace(\n        go.Choropleth(\n            visible=False,\n            locations = geoData[ (geoData['Date'] == step) & (geoData['age'] == 'TOTAL') ]['geo-time'],\n            z = geoData[ (geoData['Date'] == step) & (geoData['age'] == 'TOTAL')]['Value'],\n            colorscale = 'Reds',\n            zmax=15.6,\n            zmin=0,\n            colorbar_title = \"Unemp %\", \n        ),\n        row=1,\n        col=1\n    )\n    \n    fig.append_trace(\n        go.Bar(\n            visible=False,\n            x=geoData[ (geoData['Date'] == step) & (geoData['age'] != 'TOTAL')]['geo-time'],\n            y=geoData[ (geoData['Date'] == step) & (geoData['age'] != 'TOTAL')][\"Value\"], \n            marker_color=colors,\n            showlegend=False,\n        ),\n        row=1, \n        col=2\n    )\n\n    fig.append_trace(\n        go.Bar(\n            visible=False,\n            x=geoData[(geoData['Date'] == step) & (geoData['age'] != 'TOTAL')]['geo-time'],\n            y=geoData[(geoData['Date'] == step) & (geoData['age'] != 'TOTAL')][\"diff\"], \n            marker_color=colors,\n            name='25-74',\n        ),\n        row=2, \n        col=2\n    )\n    \n    fig.append_trace(\n        go.Bar(\n            visible=False,\n            x = cov_cntry[ cov_cntry['Date'] == step ]['countryterritoryCode'],\n            y = cov_cntry[ cov_cntry['Date'] == step ][\"cases\"], \n            showlegend=False,\n            marker_color='yellow',\n        ),\n        row=3, \n        col=2\n    )\n \nfig.data[0].visible = True\n\ndates = ['01','02','03','04','05','06']\nsteps = []\nj= 0\nnum_steps = 6\nfor i in range(0, len(fig.data), 4):\n    step = dict(method=\"restyle\", args=[\"visible\", [False] * len(fig.data)],label='2020- {}'.format(dates[j]))\n    j += 1\n    step['args'][1][i] = True\n    step['args'][1][i+1] = True\n    step['args'][1][i+2] = True\n    step['args'][1][i+3] = True\n    steps.append(step)\n\nsliders = [dict(active=0,pad={\"t\": 50},steps=steps)]\n\n# Update geo subplot properties\nfig.update_geos(\n    projection_type=\"miller\",\n    fitbounds=\"locations\",\n    resolution=50,\n    landcolor=\"silver\",\n    oceancolor=\"cadetblue\",\n    showocean=True,\n    showlakes=False,\n)\n\n# Set theme, margin, and annotation in layout\nfig.update_layout(\n    template=\"plotly_dark\",\n    height = 800,\n    margin=dict(r=10, t=55, b=40, l=20),\n    title_text = 'Unemployment % by Country, Jan to June 2020',\n    sliders=sliders,\n    legend=dict(\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1.02,\n        xanchor=\"right\",\n        x=1\n    ),\n)\n\nfig.show()","b529db8f":"Now, remove rows with missing countries, and drop data pre-2019 ","f1233c40":"The values are currently stored as a string and have explanatory characters attached. Let's remove them.\nData Flags:\n    b - break in time series\n    e - estimated\n    p - provisional\n    u - low reliability\n    c- confidential\n    f - forecast\n    r- revised\n    z - not applicable\n    d - definition differs\n    n - not significant\n    s - eurostat estimate\n    : - unavailable","835cd45a":"Next, we filter the data (for tableau I could filter within the program, so this step could be skipped here)","9d30c4da":"# Pitfalls\n1. Move slider to get data to load. Each plot is a new trace and while the slider is set to load in steps of 4 I can't initialise it to the 1st 4 plots\n1. French Guiana (in South America) is registered as France and is causing the \"fitbounds=locations\" to zoom the map further out than I'd like. I've tried multiple methods on zoom\/locations combos but it skews the map something awful (even changing map surface types does little to help)\n1. I couldn't get the bar charts to a 'group' mode. The darker (Teal) is for the age group under 25, and the lighter (Thistle\/pink) is age-range 25 to 74\n1. Percentage Change is calculated as (\"Current Month\" - \"Prev Month\") \/ (Current Month) * 100. No change is set as 0.\n1. Covid Cases represents all the new cases for that month in each country, not a running total\n\n<br>\n***Note: The Geomap is unemployment % as a total, the bar charts are divided by <25 and >25. Then the covid bar chart works on a separate dataframe***\n<br>\nI'm sure there is a better way to represent the difference in the 2 age groups than shown above and am keen to see how others show this. Leave a comment for any ideas\n\n# Discussion\nJanuary <br>\nIt appears than on January the unemployment went down for over 25 but down for under 25's. It would be worth investigating this further as it appears as a clear split between the 2 groups. [Probably stability in new jobs in the new year](https:\/\/www.fastcompany.com\/3067144\/its-the-most-popular-month-to-look-for-a-job-heres-how-to-stand-out)?\n<br><br>\nFebruary\n<br>\nThe divide between employment rates in each country is less divided by age group. \n<br><br>\nMarch\n<br>\nA few countries soar in covid cases but they appear scarcely impacted by the newly hit virus. The geomap indicates an increase in overall unemployment (it darkens compared to Feb)\n<br><br>\nApril\n<br>\nWhile cases are building up in many countries, Ital seems to be the only country with a lower unemployment rate (for <25). Probably a sign of the country comming together and filling in roles? It has never been so low before\n<br><br>\n# Overall\nThere doesn't appear to be a clear distinction between which age group may be worse off because of the pandemic. Some countries have more distinct changes within age groups than other.","41e96060":"Lets extract countries which match our current countries from geoData set","b6368986":"Now, we will expand the first column into separate columns. This creates a new dataframe (df), so we will rename the columns and then combine both df into a new DF and drop the unexpanded column","9d4aa211":"Now, to use the choropleth geopmap we will need to use Alpha-3 Codes (3 character abbreviation of each country). Loading in the supplied country codes I have mapped them together.\nThis will replace entries like 'EU25_2007' with nan which we remove later","e7f6d3c3":"Now to get covid casses by country\n(Download link: \nhttps:\/\/data.europa.eu\/euodp\/en\/data\/dataset\/covid-19-coronavirus-data\/resource\/260bbbde-2316-40eb-aec3-7cd7bfc2f590 )","f6521f43":"Pivot table for better filtering (originally used for tableau data filtering,  may not strictly be necessary for python plots)","d8108911":"Lets combine all cases for each country by month","2249ebcd":"Finally, Lets plot the data\n<br\/>\n**You may need to move the slider for the data to appear**"}}