{"cell_type":{"6fe8604b":"code","5c7f9762":"code","2a6f571e":"code","c8885880":"code","28cfc967":"code","6e31771f":"code","53fcdabf":"code","df974db5":"code","aa46a876":"code","4720f035":"code","5b57d1a0":"code","86ca7cc0":"code","f6dfa478":"code","ff9ac92c":"markdown","a17e51df":"markdown","9baf0fa7":"markdown","6bc32623":"markdown","87d71332":"markdown","2208eeb7":"markdown","61c9cfd0":"markdown","bcb01d94":"markdown","1f0f6a9f":"markdown","9613dd4f":"markdown"},"source":{"6fe8604b":"csv_url = 'https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\/download'\n# csv_filename = 'complete_data_new_format.csv' \ncsv_filename = 'covid_19_clean_complete.csv'\n\nimport pandas as pd\ncsv_df = pd.read_csv('..\/input\/corona-virus-report\/' + csv_filename)","5c7f9762":"from datetime import datetime,date\n\n# Format date\nformatter_string = \"%m\/%d\/%y\" \ntry:\n    # To allow re-run instead of throwing exception\n    csv_df['date'] = pd.to_datetime(csv_df.Date, format=formatter_string)\n    csv_df['Date'] = csv_df['date'].dt.strftime('%Y-%m-%d')\nexcept:\n    pass\n\n# Calculate Active\/Recovered\ncsv_df['Active'] = csv_df['Confirmed'] - csv_df['Deaths'] - csv_df['Recovered']\n\n# Cleanup Province\/State which has NaN\ncsv_df['Province\/State'] = csv_df['Province\/State'].fillna('-')\n\n# Cleanup Confirmed and Death can be negative\ncsv_df['Confirmed'] = csv_df['Confirmed'].apply(lambda x: x if x > 0 else 0)\ncsv_df['Deaths'] = csv_df['Deaths'].apply(lambda x: x if x > 0 else 0)\n\ndata_dates = csv_df.date.unique()\nmax_data_date = max(data_dates)\nprint(\"Last date in {csv_filename} is {max_data_date}\".format(max_data_date=max_data_date,csv_filename=csv_filename))","2a6f571e":"title = 'COVID-2019'\n# d = pd.to_datetime(str(max_data_date)).strftime('%Y-%m-%d')\nchart_title = title + ' as of ' + pd.to_datetime(str(max_data_date)).strftime('%Y-%m-%d')\n\nlegend_orientation=\"v\"\nchart_height = 900","c8885880":"import plotly.offline as py\nimport plotly.graph_objs as go\n\npy.offline.init_notebook_mode(connected=True)\n# cases_df = csv_df[['date','Confirmed','Deaths','Recovered','Active']].groupby('date').sum() # clean.csv\ncases_df = csv_df[['date','Confirmed','Deaths','Active','Recovered']].groupby('date').sum()\n\ndata = []\n# categories = ['Confirmed', 'Deaths', 'Recovered', 'Active'] # clean.csv\ncategories = ['Confirmed', 'Deaths','Active','Recovered']\n\nfor category in categories:\n    trace = go.Scatter(\n        x=cases_df.index, \n        y=cases_df[category],\n        mode=\"markers+lines\",\n        name = category\n    )\n    data.append(trace)\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title=chart_title)\n})","28cfc967":"df = csv_df.loc[csv_df.date==max_data_date]\n# by_country = df[['Country\/Region','Confirmed','Deaths', 'Recovered','Active']].groupby(['Country\/Region']).sum() # clean.csv\nby_country = df[['Country\/Region','Confirmed','Deaths','Active','Recovered']].groupby(['Country\/Region']).sum() # clean.csv\nby_country.sort_values(by='Confirmed',ascending=False,inplace=True)\n\ncountries = by_country.index.to_list()\nprint('Number of countries with confirmed cases = ',len(countries))\n\n# Looks lot have hit a limit of Sunburst chart\nmax_countries = 173\ncountries = countries[:max_countries]\nids = countries\nlabels = countries\nparents = [title] * len(countries)\nvalues = by_country.Confirmed.to_list()[:max_countries]\n\nclassifications = by_country.columns.drop('Confirmed')\n\nfor cty in countries: \n    for c in classifications:\n        ids = ids + [cty + '_' + c]\n        parents = parents + [cty]\n        labels = labels + [c]\n        values = values + [by_country.loc[cty][c]]\n\ntrace = go.Sunburst(\n    ids=ids,\n    labels=labels,\n    parents=parents,\n    values=values,\n    branchvalues=\"total\",\n    outsidetextfont={\"size\": 20, \"color\": \"#377eb8\"},\n#     leaf={\"opacity\": 0.4},\n    marker={\"line\": {\"width\": 2}}\n)\n\nlayout = go.Layout(\n    title = chart_title + \"<br>(click on country)\",\n    margin = go.layout.Margin(t=100, l=0, r=0, b=0),\n    sunburstcolorway=[\"#636efa\",\"#ef553b\",\"#00cc96\"]\n)\n\nfig = go.Figure([trace], layout)\n\npy.iplot(fig)","6e31771f":"import plotly.express as px\nimport numpy as np\n\n# Log confirmed values to show cases, otherwise countries with smaller number of cases will be a pixel\ncsv_df['Confirmed_log'] = np.log(1+csv_df['Confirmed'])\ncsv_df['Confirmed_log'] = csv_df['Confirmed_log'].fillna(0)\ncsv_df['color'] = 'fuschia'\n\na_df = csv_df.sort_values(by=['date'])\nfig = px.scatter_mapbox(a_df,\n                    animation_frame='Date',\n                    animation_group=\"Country\/Region\",\n                    lat=\"Lat\", lon=\"Long\", hover_name=\"Province\/State\", \n                    hover_data=[\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"], # clean.csv\n                    size=\"Confirmed_log\",\n                    color_discrete_sequence=['hsla(360, 100%, 50%, 0.5)'], # lightsalmon, rgb(255,70,0)\n                    zoom=0.5\n                    )\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(title=chart_title\n                 , width = 900, height = 600)\nfig.show()","53fcdabf":"top_country_confirmed = by_country.sort_values(by=\"Confirmed\",ascending=False).index.to_list()\ntop_country_deaths = by_country.sort_values(by=\"Deaths\",ascending=False).index.to_list()\n# top_country_recovered = by_country.sort_values(by=\"Recovered\",ascending=False).index.to_list() # clean.csv\ntop_country = {\n    'Confirmed' : top_country_confirmed,\n    'Deaths' : top_country_deaths,\n#     'Recovered' : top_country_recovered, # clean.csv\n}\ntop_n = 20\nprint('Top {} Confirmed countries : {}'.format(top_n,top_country['Confirmed'][:top_n]))\n\ntop_n = 6","df974db5":"# country_cases_df = csv_df[['Country\/Region','date','Confirmed','Deaths','Recovered']].groupby(['Country\/Region','date']).sum() # clean.csv\ncountry_cases_df = csv_df[['Country\/Region','date','Confirmed','Deaths','Active','Recovered']].groupby(['Country\/Region','date']).sum()\n\ndata = []\ncountries = np.sort(csv_df['Country\/Region'].unique())\ncategory = 'Confirmed'\nfor c in countries:\n    country = country_cases_df.loc[c]\n    \n    visible_flag = 'legendonly'\n    if c in top_country[category][:top_n]:\n        visible_flag = None\n    trace = go.Scatter(\n        x=country.index.to_list(), \n        y=country[category],\n        mode=\"markers+lines\",\n        name = c,\n        text = c,\n        visible=visible_flag\n    )\n    data.append(trace)\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title='<B>{}<\/B><BR>\\\n        <I>Top {} countries with {} shown. Click legend to show others<\/I>'.format(chart_title,top_n,category\n             , height = chart_height,legend_orientation=legend_orientation))\n})","aa46a876":"country_cases_df['Confirmed_1st_diff'] = country_cases_df['Confirmed'].diff().fillna(0)\n\n# Cleanup Confirmed_diff negative to 0\ncountry_cases_df['Confirmed_1st_diff'] = country_cases_df['Confirmed_1st_diff'].apply(lambda x: x if x > 0 else 0)\n\n# average over n intervals\nn = 7\ncountry_cases_df['Confirmed_ewm'] = pd.Series.ewm(country_cases_df['Confirmed_1st_diff'], span=7).mean()\n\n\ndata = []\ncountries = np.sort(csv_df['Country\/Region'].unique())\nfor c in countries:\n    country = country_cases_df.loc[c]\n\n    visible = 'legendonly'\n    if c in top_country['Confirmed'][:top_n]:\n        visible = None\n    trace = go.Scatter(\n        x=country.index.to_list(), \n        y=country['Confirmed_ewm'],\n        mode=\"markers+lines\",\n        name = c,\n        visible=visible\n    )\n    data.append(trace)\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title='<B>{} - ewm<\/B><BR><I>\\\n    Only top {} countriesshown<\/I>'.format(chart_title,top_n)\n                       , legend_orientation=legend_orientation)\n})","4720f035":"category_n = 100\ncategory = 'Confirmed'\n\ncountry_cases_df = csv_df[['Province\/State','Country\/Region','date','Confirmed','Deaths','Recovered','Active']].groupby(['Country\/Region','date']).sum()\ncountry_cases_df_growth = country_cases_df.loc[country_cases_df[category] > category_n]\n\n# Insert a placeholder column\ncountry_cases_df_growth.insert(loc=0, column='ID', value=0)\ncountry_cases_df_growth.reset_index().set_index(['Country\/Region'])\n\n# Set ID counter for each country which will be used as index\npd.options.mode.chained_assignment = None\nfor c in countries:\n    try:\n        country_cases_df_growth.loc[c,'ID'] = np.arange(len(country_cases_df_growth.loc[c]))\n    except:\n        pass\n\ncountry_cases_df_growth = country_cases_df_growth.reset_index().set_index(['Country\/Region','ID'])\ndata = []\nfor c in countries:\n    try:\n        country = country_cases_df_growth.loc[c]\n\n        visible_flag = 'legendonly'\n        if c in top_country[category][:top_n]:\n            visible_flag = None\n        trace = go.Scatter(\n            x=country.index.to_list(), \n            y=country[category],\n            mode=\"markers+lines\",\n            name = c,\n            text = country.date,\n            visible=visible_flag\n        )\n        data.append(trace)\n    except:\n        pass\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title='<B>{chart_title}<\/B><BR><I>\\\n    Shifted to align increase - {category} > {category_n}<BR>\\\n    Top {top_n} countries with {category} shown. Click legend to show others<\/I>'.format(chart_title=chart_title,top_n=top_n,category=category,category_n=category_n)\n                       , legend_orientation=legend_orientation)\n})","5b57d1a0":"category_n = 100\ncategory = 'Deaths'\n\ncountry_cases_df = csv_df[['Province\/State','Country\/Region','date','Confirmed','Deaths','Recovered','Active']].groupby(['Country\/Region','date']).sum()\ncountry_cases_df_growth = country_cases_df.loc[country_cases_df[category] > category_n]\n\n# Insert a placeholder column\ncountry_cases_df_growth.insert(loc=0, column='ID', value=0)\ncountry_cases_df_growth.reset_index().set_index(['Country\/Region'])\n\n# Set ID counter for each country which will be used as index\npd.options.mode.chained_assignment = None\nfor c in countries:\n    try:\n        country_cases_df_growth.loc[c,'ID'] = np.arange(len(country_cases_df_growth.loc[c]))\n    except:\n        pass\n\ncountry_cases_df_growth = country_cases_df_growth.reset_index().set_index(['Country\/Region','ID'])\ndata = []\nfor c in countries:\n    try:\n        country = country_cases_df_growth.loc[c]\n\n        visible_flag = 'legendonly'\n        if c in top_country[category][:top_n]:\n            visible_flag = None\n        trace = go.Scatter(\n            x=country.index.to_list(), \n            y=country[category],\n            mode=\"markers+lines\",\n            name = c,\n            text = country.date,\n            visible=visible_flag\n        )\n        data.append(trace)\n    except:\n        pass\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title='<B>{chart_title}<\/B><BR><I>\\\n    Shifted to align increase - {category} > {category_n}<BR>\\\n    Top {top_n} countries with {category} shown. Click legend to show others<\/I>'.format(chart_title=chart_title,top_n=top_n,category=category,category_n=category_n)\n                       , legend_orientation=legend_orientation)\n})","86ca7cc0":"country_cases_df['Confirmed_pct'] = country_cases_df.pct_change().fillna(0)['Confirmed']\ncountry_cases_df_growth = country_cases_df.loc[country_cases_df['Confirmed_pct'] > 0]\n\n# Insert a placeholder column\ncountry_cases_df_growth.insert(loc=0, column='ID', value=0)\ncountry_cases_df_growth.reset_index().set_index(['Country\/Region'])\n\n# Set ID counter for each country which will be used as index\npd.options.mode.chained_assignment = None\nfor c in countries:\n    try:\n        country_cases_df_growth.loc[c,'ID'] = np.arange(len(country_cases_df_growth.loc[c]))\n    except:\n        pass\n\ncountry_cases_df_growth = country_cases_df_growth.reset_index().set_index(['Country\/Region','ID'])\ndata = []\ncategory = 'Confirmed'\nfor c in countries:\n    try:\n        country = country_cases_df_growth.loc[c]\n\n        visible_flag = 'legendonly'\n        if c in top_country[category][:top_n]:\n            visible_flag = None\n        trace = go.Scatter(\n            x=country.index.to_list(), \n            y=country[category],\n            mode=\"markers+lines\",\n            name = c,\n            text = country.date,\n            visible=visible_flag\n        )\n        data.append(trace)\n    except:\n        pass\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title='<B>{}<\/B><BR>\\\n        <I>Shifted to align increase<BR>\\\n        Top {} countries with {} shown. Click legend to show others<\/I>'.format(chart_title,top_n,category\n             , height = chart_height,legend_orientation=legend_orientation))\n})","f6dfa478":"data = []\ncategory = 'Deaths'\nfor c in countries:\n    try:\n        country = country_cases_df_growth.loc[c]\n\n        visible_flag = 'legendonly'\n        if c in top_country[category][:top_n]:\n            visible_flag = None\n        trace = go.Scatter(\n            x=country.index.to_list(), \n            y=country[category],\n            mode=\"markers+lines\",\n            name = c,\n            text = country.date,\n            visible=visible_flag\n        )\n        data.append(trace)\n    except:\n        pass\n\npy.iplot({\n    \"data\": data,\n    \"layout\": go.Layout(title='<B>{}<\/B><BR>\\\n        <I>Shifted to align increase<BR>\\\n        Top {} countries with {} shown. Click legend to show others<\/I>'.format(chart_title,top_n,category\n            , height = chart_height,legend_orientation=legend_orientation))\n})","ff9ac92c":"# List of top 20 countries","a17e51df":"# Plot cases by location with animation","9baf0fa7":"# Plot cases over time","6bc32623":"# Read file","87d71332":"# By country","2208eeb7":"# By country aligned by Deaths >= n","61c9cfd0":"# By country aligned by Confirmed >= n","bcb01d94":"# By country aligned by Deaths","1f0f6a9f":"# By country aligned by Confirmed growth","9613dd4f":"# Sunburst chart"}}