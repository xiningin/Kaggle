{"cell_type":{"34d71049":"code","906bdeda":"code","94b19c11":"code","e998be51":"code","c1daa478":"code","ca9c1e3a":"code","e891d90c":"code","1b9f9390":"code","7fb62bf2":"code","f4cc9301":"code","4b13691d":"code","8969622a":"code","46021f5c":"code","9fb824d9":"code","1593b037":"code","699a4b4b":"code","b82676f0":"code","30aa2b7c":"code","3a955147":"code","47f2bf0a":"code","50f69f3b":"code","630e95bf":"code","5087d8d0":"code","1501fc52":"code","30210a97":"code","416ae2b2":"code","be58eefd":"code","a01e19f3":"code","dc6b0a0d":"code","4d674d81":"code","652e5402":"code","ed6f7360":"code","e6991d7e":"code","cea07419":"code","25365204":"code","d88a4c51":"code","9344c7d1":"code","db4f80e4":"code","498b1963":"code","d53d4187":"code","0e6b0689":"code","9e37f330":"code","710b39b6":"code","4bce5ef0":"code","89261280":"code","d6665aca":"code","aca885a6":"code","6f2b8322":"code","aefa53a0":"code","5f6c9e8b":"code","3ba8a782":"code","2429c3e4":"code","fb64bf06":"code","f62534cf":"code","5ee7e2d8":"code","63319324":"code","7c1ebb04":"code","30e8921f":"code","f85c2841":"code","22aadd85":"code","cb839ea5":"code","9ce16c64":"code","d51c6731":"code","235252c8":"code","a2527eb4":"code","f59e70c7":"code","25482434":"code","793f19d6":"code","bfb920ce":"code","bcaa07eb":"code","6f6027c4":"code","bec70ecc":"code","5ab7d082":"code","48c7f9c9":"code","510fb72d":"code","78e25a5f":"code","b457de21":"code","adc34f78":"code","57ffdd65":"code","d835f37f":"code","1c2c2533":"code","8527a94c":"code","79e51772":"code","9aadf85d":"code","21606b84":"code","8b8a9cd2":"code","ad36a209":"code","8ba3c8f5":"code","7869e13f":"code","996e8fa0":"code","6108dd63":"code","86d870fc":"code","4c7303ec":"code","078a9404":"code","78fd307b":"code","01a7c6c7":"code","e4ba0aaf":"code","681c709b":"code","fd3f9f83":"code","05fa5360":"code","8e5e9d5e":"code","22cfd902":"code","80d5a3f3":"code","5ee5a3b4":"code","a2adbb5e":"code","b23e8096":"code","c02ea2ae":"code","ab464ab4":"code","a9fd6acb":"code","73917328":"code","a77df493":"code","b96f6f30":"code","7ec654ee":"code","f8318d5f":"code","7e53d4c0":"code","461b78d6":"code","67ffc9db":"code","4fe05a1c":"code","2abcdcfb":"code","cc7c05c1":"code","aef5eb2d":"code","bbd357d0":"code","3e740d07":"markdown","f1af5962":"markdown","04a7fb85":"markdown","6068968a":"markdown","49b93e2b":"markdown","2952e44e":"markdown","fa8f8bf7":"markdown","d6991c2d":"markdown","fbcd3ddb":"markdown","5f1a330e":"markdown","5565d61e":"markdown","13f2c70d":"markdown","995f6b74":"markdown","3281c2e6":"markdown","bdba755d":"markdown","5f408448":"markdown","144615ac":"markdown","b76a40bb":"markdown","865744cd":"markdown","f96faede":"markdown","8ddf7cf1":"markdown","dd22ec7c":"markdown","d30f1da5":"markdown"},"source":{"34d71049":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","906bdeda":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import StackingRegressor, VotingRegressor, BaggingRegressor, GradientBoostingRegressor\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","94b19c11":"import warnings\nwarnings.filterwarnings('ignore')","e998be51":"matplotlib.rcParams.update({'font.size': 14})","c1daa478":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print('Train R2:\\t' + str(round(r2(train_true_values, train_pred_values), 3)))\n    print('Test R2:\\t' + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","ca9c1e3a":"#\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c\nTRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","e891d90c":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.tail()","1b9f9390":"train_df.dtypes","7fb62bf2":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","f4cc9301":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', test_df.shape[0])","4b13691d":"train_df.shape[1] - 1 == test_df.shape[1]","8969622a":"train_df.dtypes","46021f5c":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","9fb824d9":"train_df.dtypes","1593b037":"# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\n\nplt.figure(figsize= (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","699a4b4b":"plt.figure(figsize = (16, 8))\n\nplt.subplot(121)\ntrain_df['Price'].hist(density=False, bins=30)\nplt.ylabel('count')\nplt.xlabel('Price')\n\nplt.subplot(122)\nsns.kdeplot(train_df['Price'], shade=True, legend=False)\nplt.xlabel('Price')\n\nplt.suptitle('Distribution of price')\nplt.show()","b82676f0":"#\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u0438 \u0441\u0440\u0435\u0434\u043d\u044f\u044f\n# \u043c\u043e\u0434\u0443 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\n# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0439.\n\"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\"\"\"\ndef f_plot_distribution(feature, bins_val=50):\n    feature_mean = round(train_df[feature].mean(), 2)\n    feature_median = train_df[feature].median()\n\n    plt.figure(figsize = (12, 6))\n\n    sns.distplot(train_df[feature], bins=bins_val)\n\n    y = np.linspace(0, 0.000005, 10)\n    plt.plot([feature_mean] * 10, y, label='mean',  linewidth=4)\n    plt.plot([feature_median] * 10, y, label='median',  linewidth=4)\n\n    plt.title('Distribution of ' + feature)\n    plt.legend(loc='upper left')\n    plt.show()\n    print(f\"\\tMean= {feature_mean}    Median= {feature_median}\")\n    return\n\nf_plot_distribution('Price')","30aa2b7c":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ntrain_df.describe()","3a955147":"# \u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n\ntrain_df.select_dtypes(include='object').columns.tolist()","47f2bf0a":"train_df['DistrictId'].value_counts()","50f69f3b":"train_df['Ecology_2'].value_counts()","630e95bf":"train_df['Ecology_3'].value_counts()","5087d8d0":"train_df['Shops_2'].value_counts()","1501fc52":"#Rooms\ntrain_df['Rooms'].value_counts()","30210a97":"f_plot_distribution('Rooms')","416ae2b2":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","be58eefd":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\ntrain_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = train_df['Rooms'].median()","a01e19f3":"train_df['Rooms'].value_counts()","dc6b0a0d":"#KitchenSquare\ntrain_df['KitchenSquare'].value_counts()","4d674d81":"train_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","652e5402":"condition = (train_df['KitchenSquare'].isna()) \\\n             | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n\ntrain_df.loc[condition, 'KitchenSquare'] = train_df['KitchenSquare'].median()\n\ntrain_df.loc[train_df['KitchenSquare'] < 3, 'KitchenSquare'] = 3","ed6f7360":"train_df['KitchenSquare'].value_counts()","e6991d7e":"#HouseFloor, Floor\ntrain_df['HouseFloor'].sort_values().unique()","cea07419":"train_df['Floor'].sort_values().unique()","25365204":"(train_df['Floor'] > train_df['HouseFloor']).sum()","d88a4c51":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","9344c7d1":"train_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","db4f80e4":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043c\u043e\u0439 \u0432\u044b\u0448\u0435 50-\u0442\u0438 \u044d\u0442\u0430\u0436\u0435\u0439. \u0412 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0437\u0430\u043f\u0440\u0435\u0442\u0438\u043b\u0438 \u0441\u0442\u0440\u0438\u043e\u0442\u044c \n#\u0432\u044b\u0441\u043e\u0442\u043d\u044b\u0435 \u0434\u043e\u043c\u0430. \u041f\u0440\u0438\u043c\u0435\u043c 50 \u044d\u0442\u0430\u0436\u0435\u0439 \u0437\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c.\ntrain_df.loc[train_df['HouseFloor'] > 50, 'HouseFloor']","498b1963":"#\u0425\u043e\u0440\u043e\u0448\u043e, \u0447\u0442\u043e \u0434\u043e\u043c\u043e\u0432 \u0432\u044b\u0448\u0435 50-\u0442\u0438 \u044d\u0442\u0430\u0436\u0435\u0439 \u043d\u0435\u043c\u043d\u043e\u0433\u043e. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430 50.\ntrain_df.loc[train_df['HouseFloor'] > 50, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['HouseFloor'] > 50, 'HouseFloor'] = 50","d53d4187":"floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","0e6b0689":"train_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor']\\\n                                                .apply(lambda x: random.randint(1, x))","9e37f330":"(train_df['Floor'] > train_df['HouseFloor']).sum()","710b39b6":"#HouseYear\ntrain_df['HouseYear'].sort_values(ascending=False)","4bce5ef0":"train_df.loc[train_df['HouseYear'] > 2020, 'HouseYear'] = 2020","89261280":"#3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ntrain_df.isna().sum()","d6665aca":"train_df[['Square', 'LifeSquare', 'KitchenSquare']].head(10)","aca885a6":"#\u0418\u0437\u0443\u0447\u0438\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c Square\nf_plot_distribution('Square')","6f2b8322":"train_df.boxplot(column='Square')\nprint(train_df['Square'].quantile(.025), train_df['Square'].quantile(.975))","aefa53a0":"#\u041f\u043e\u043c\u0435\u0442\u0438\u043c \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043d\u0430 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435.\ntrain_df['Square_outlier'] = 0\ntrain_df.loc[(train_df['Square'] < 32) & (train_df['Square'] > 210), 'Square_outlier'] = 1\ntrain_df.loc[train_df['Square'] < 32, 'Square'] = 32\ntrain_df.loc[train_df['Square'] > 210, 'Square'] = train_df['Square'].median()\ntrain_df.head()","5f6c9e8b":"train_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n\ncondition = (train_df['LifeSquare'].isna()) \\\n             & (~train_df['Square'].isna()) \\\n             & (~train_df['KitchenSquare'].isna())\n        \ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] \\\n                                            - train_df.loc[condition, 'KitchenSquare'] - 3","3ba8a782":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Healthcare_1\n# \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0430\u043c DistrictId (\u043b\u043e\u0433\u0438\u0447\u0438\u043d\u043e \u043f\u0440\u0435\u0434\u043b\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \n# \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430 \u0437\u0434\u0440\u0430\u0432\u043e\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435)\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441 Healthcare_1\nHealthcare_1_by_DistrictId = train_df.groupby('DistrictId', as_index=False).agg({'Healthcare_1': 'mean','Helthcare_2': 'mean', 'Ecology_1': 'mean', 'Social_1': 'mean', 'Social_2': 'mean', 'Social_3': 'mean', 'Price': 'mean'})\nHealthcare_1_by_DistrictId ","2429c3e4":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443 Healthcare_1 - 35\n\nHealthcare_1_by_DistrictId.isna().sum() ","fb64bf06":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u043e\u0432 - 205\nHealthcare_1_by_DistrictId['DistrictId'].value_counts()\n\n#\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 205 \u0440\u0430\u0439\u043e\u043d\u043e\u0432. \u0418 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e Healthcare_1 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 35. \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u044d\u0442\u043e 17%.","f62534cf":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438. \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0430\u0431\u043b\u0438\u0446, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0435\u0441\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\n#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 Helthcare_2\ngrid = sns.jointplot(Healthcare_1_by_DistrictId['Healthcare_1'], Healthcare_1_by_DistrictId['Helthcare_2'], kind='reg')\nplt.show()\n# \u0412\u044b\u0432\u043e\u0434 - \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0435\u0441\u0442\u044c, \u043d\u043e \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0430\u044f ","5ee7e2d8":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 Social_1\ngrid = sns.jointplot(Healthcare_1_by_DistrictId['Healthcare_1'], Healthcare_1_by_DistrictId['Social_1'], kind='reg')\nplt.show()\n# \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u043b\u0430\u0431\u0430\u044f","63319324":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 Ecology_1\ngrid = sns.jointplot(Healthcare_1_by_DistrictId['Healthcare_1'], Healthcare_1_by_DistrictId['Ecology_1'], kind='reg')\nplt.show()\n# \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u043b\u0430\u0431\u0430\u044f","7c1ebb04":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 Price\ngrid = sns.jointplot(Healthcare_1_by_DistrictId['Healthcare_1'], Healthcare_1_by_DistrictId['Price'], kind='reg')\nplt.show()\n# \u0412\u044b\u0432\u043e\u0434 - \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0435\u0441\u0442\u044c, \u043d\u043e \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0430\u044f ","30e8921f":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0442\u043e\u0436\u0435 \u043e\u0441\u043e\u0431\u043e \u043d\u0435 \u0432\u0438\u0434\u043d\u043e\n\nplt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = Healthcare_1_by_DistrictId.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","f85c2841":"#\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u044b\nHealthcare_1_by_DistrictId['Healthcare_1'].fillna(Healthcare_1_by_DistrictId['Healthcare_1'].median(), inplace=True)\n#\u0443\u0434\u0430\u043b\u0438\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\nHealthcare_1_by_DistrictId.drop('Helthcare_2', axis=1, inplace=True)\nHealthcare_1_by_DistrictId.drop('Ecology_1', axis=1, inplace=True)\nHealthcare_1_by_DistrictId.drop('Social_1', axis=1, inplace=True)\nHealthcare_1_by_DistrictId.drop('Social_2', axis=1, inplace=True)\nHealthcare_1_by_DistrictId.drop('Social_3', axis=1, inplace=True)\nHealthcare_1_by_DistrictId.drop('Price', axis=1, inplace=True)\nHealthcare_1_by_DistrictId","22aadd85":"#\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n#\u041f\u043e\u043c\u0435\u0442\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ntrain_df['Healthcare_1_nan'] = train_df['Healthcare_1'].isna() * 1\n","cb839ea5":"Healthcare_1_by_DistrictId = Healthcare_1_by_DistrictId[['DistrictId', 'Healthcare_1']].rename(columns={'DistrictId':'DistrictId', 'Healthcare_1':'Healthcare_1_by_DistrictId'})\nHealthcare_1_by_DistrictId","9ce16c64":"# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c Healthcare_1_by_DistrictId \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\ntrain_df = train_df.merge(Healthcare_1_by_DistrictId, on='DistrictId', how='left')\ntrain_df.head()","d51c6731":"#\u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 Healthcare_1 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0437\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c Healthcare_1_by_DistrictId\ntrain_df['Healthcare_1'].fillna(train_df['Healthcare_1_by_DistrictId'], inplace=True)\ntrain_df","235252c8":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442\ntrain_df.isna().sum()","a2527eb4":"train_df.median()","f59e70c7":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.kitchen_square_quantile = None\n        self.Healthcare_1_by_DistrictId = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        self.square_quantile_25 = round(X['Square'].quantile(.025), 2)\n        \n        #\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 Healthcare_1\n        #\u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        self.Healthcare_1_by_DistrictId = X.groupby('DistrictId', as_index=False)\\\n            .agg({'Healthcare_1': 'mean'})\\\n            .rename(columns={'Healthcare_1': 'Healthcare_1_by_DistrictId'})\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        \n        #Square\n        X['Square_outlier'] = 0\n        X.loc[(X['Square'] < self.square_quantile_25) & (X['Square'] > 210), 'Square_outlier'] = 1\n        X.loc[X['Square'] < self.square_quantile_25, 'Square'] = self.square_quantile_25\n        X.loc[train_df['Square'] > 210, 'Square'] = X['Square'].median()\n        \n        # KitchenSquare\n        condition = (X['KitchenSquare'].isna()) \\\n                    | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[condition, 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        X.loc[train_df['HouseFloor'] > 50, 'HouseFloor_outlier'] = 1\n        X.loc[train_df['HouseFloor'] > 50, 'HouseFloor'] = 50\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n                                            .apply(lambda x: random.randint(1, x))\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n            \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        # Healthcare_1\n        #\u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443 (\u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 None, \u0432 \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443)\n        X['Healthcare_1_nan'] = X['Healthcare_1'].isna() * 1 \n\n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Healthcare_1 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        X = X.merge(self.Healthcare_1_by_DistrictId, on=[\"DistrictId\"], how='left')\n        X['Healthcare_1_by_DistrictId'].fillna(X['Healthcare_1_by_DistrictId'].median(), inplace=True)\n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","25482434":"#Dummies\nbinary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","793f19d6":"#DistrictSize, IsDistrictLarge\ndistrict_size = train_df['DistrictId'].value_counts().reset_index()\\\n                    .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head()","bfb920ce":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","bcaa07eb":"(train_df['DistrictSize'] > 100).value_counts()","6f6027c4":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","bec70ecc":"train_df","5ab7d082":"#MedPriceByDistrict\nmed_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","48c7f9c9":"med_price_by_district.shape","510fb72d":"train_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","78e25a5f":"#MedPriceByFloorYear\ndef floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n    X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n    X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n    return X\n\n\ndef floor_to_cat_pandas(X):\n    bins = [X['Floor'].min(), 3, 5, 9, 15, X['Floor'].max()]\n    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n    X['floor_cat'].fillna(-1, inplace=True)\n    return X\n\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X\n\n\ndef year_to_cat_pandas(X):\n    bins = [X['HouseYear'].min(), 1941, 1945, 1980, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X","b457de21":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","adc34f78":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","57ffdd65":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","d835f37f":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.house_year_min = None\n        self.floor_min = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.floor_min = df['Floor'].min()\n            self.house_year_max = df['HouseYear'].max()\n            self.house_year_min = df['HouseYear'].min()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [self.floor_min, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [self.house_year_min, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","1c2c2533":"train_df.columns.tolist()","8527a94c":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', \n                 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', \n                     'LifeSquare_nan', 'Healthcare_1_nan','Healthcare_1_by_DistrictId', 'DistrictSize', 'IsDistrictLarge', #'MedPriceByDistrict',\n                     'MedPriceByFloorYear']\n\n#\u0443\u0431\u0440\u0430\u043b\u0438:\n#'new_district', 'Square_outlier', 'HouseYear_outlier',\n#'MedPriceByDistrict',\n\ntarget_name = 'Price'","79e51772":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","9aadf85d":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","21606b84":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","8b8a9cd2":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","ad36a209":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","8ba3c8f5":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","7869e13f":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0435\nX_train.dtypes","996e8fa0":"feature_names_for_stand = X_train.select_dtypes(include=['float64', 'int64']).columns.tolist()\nfeature_names_for_stand","6108dd63":"scaler = StandardScaler()\n\nstand_features_train = scaler.fit_transform(X_train[feature_names_for_stand])\nstand_features_valid = scaler.transform(X_valid[feature_names_for_stand])\nstand_features_test = scaler.transform(test_df[feature_names_for_stand])","86d870fc":"X_train[feature_names_for_stand] = stand_features_train\nX_valid[feature_names_for_stand] = stand_features_valid\ntest_df[feature_names_for_stand] = stand_features_test","4c7303ec":"X_train.head()","078a9404":"test_df.head()","78fd307b":"# lr_model = LinearRegression()\n\n# lr_model.fit(X_train, y_train)\n             \n# y_train_preds = lr_model.predict(X_train)\n# y_test_preds = lr_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.723\n# Test R2:\t0.622","01a7c6c7":"# parameters = [{\n#     'n_estimators': [100, 200, 300, 400],\n#     'max_features': np.arange(5, 10),\n#     'max_depth': np.arange(4, 10),\n# }]\n\n# model = GridSearchCV(\n#     estimator=RandomForestRegressor(random_state=21, criterion='mse'),\n#     param_grid=parameters,\n#     scoring='r2',\n#     cv=3,\n# )\n# model.fit(X_train, y_train)\n\n# model.best_params_\n\n#\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - {'max_depth': 9, 'max_features': 9, 'n_estimators': 400}","e4ba0aaf":"#\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\n# rf_model = RandomForestRegressor(random_state=21,\n#                                 criterion='mse',\n#                                 max_depth=9,\n#                                 max_features=9,\n#                                 n_estimators=400)\n\n# rf_model.fit(X_train, y_train)","681c709b":"#\u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n# y_train_preds = rf_model.predict(X_train)\n# y_test_preds = rf_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.826\n# Test R2:\t0.736","fd3f9f83":"#\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n# cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\n# cv_score","05fa5360":"# cv_score.mean()","8e5e9d5e":"#\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n#                                    columns=['feature_name', 'importance'])\n\n# feature_importances.sort_values(by='importance', ascending=False)","22cfd902":"# model = CatBoostRegressor(\n#     loss_function='RMSE',\n#     eval_metric='RMSE',\n# )\n\n# grid = {\n#     'learning_rate': [0.02, 0.03, 0.1],\n#     'depth': [4, 6, 7, 8, 9, 10],\n#     'n_estimators': [200, 600, 1000],\n#     'l2_leaf_reg': [1, 5, 9]\n# }\n\n# grid_search_result = model.grid_search(\n#     grid,\n#     X=X_train,\n#     y=y_train,\n#     plot=True,\n# )","80d5a3f3":"# grid_search_result['params']\n# {'depth': 8, 'l2_leaf_reg': 1, 'iterations': 600, 'learning_rate': 0.1}","5ee5a3b4":"cb_model = CatBoostRegressor(learning_rate=0.02,\n                            depth=9,\n                            l2_leaf_reg=3,\n                            iterations=1100,\n                            loss_function='RMSE',\n                            eval_metric='R2',\n                            random_seed=21,\n                            silent=True)\n\n#\u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n#\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u0432 \u043e\u0434\u043d\u0443 \u0442\u044b\u0441\u044f\u0447\u043d\u0443\u044e\n#\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u0448\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430 \u043d\u0438\u0445 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n                            # learning_rate=0.03,\n#                             depth=9,\n#                             l2_leaf_reg=2,\n#                             iterations=1000,\n#                             loss_function='RMSE',\n#                             eval_metric='R2',\n#                             random_seed=21,\n#                             silent=True)\n\n\n#                             learning_rate=0.02,\n#                             depth=9,\n#                             l2_leaf_reg=4,\n#                             iterations=1100,\n#                             loss_function='RMSE',\n#                             eval_metric='R2',\n#                             random_seed=21,\n#                             silent=True\n\n#                             learning_rate=0.01,\n#                             depth=8,\n#                             l2_leaf_reg=1,\n#                             iterations=600,\n#                             loss_function='RMSE',\n#                             eval_metric='R2',\n#                             random_seed=21,\n#                             silent=True\n\n#                             learning_rate=0.02,\n#                             depth=9,\n#                             l2_leaf_reg=4,\n#                             iterations=1100,\n#                             loss_function='RMSE',\n#                             eval_metric='R2',\n#                             random_seed=21,\n#                             silent=True\n\n#                             (learning_rate=0.02,\n#                             depth=9,\n#                             l2_leaf_reg=1,\n#                             iterations=1100,\n#                             loss_function='RMSE',\n#                             eval_metric='R2',\n#                             random_seed=21,\n#                             silent=True)\n\n\ncb_model.fit(X_train, y_train)","a2adbb5e":"y_train_preds = cb_model.predict(X_train)\ny_test_preds = cb_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.943\n# Test R2:\t0.765\n\n# Train R2:\t0.942\n# Test R2:\t0.767","b23e8096":"#\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeature_importances = pd.DataFrame(zip(X_train.columns, cb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","c02ea2ae":"# gb_model = GradientBoostingRegressor(criterion='mse',\n#                                      max_depth=7,\n#                                      min_samples_leaf=10,\n#                                      random_state=21,  \n#                                      n_estimators=100)\n# gb_model.fit(X_train, y_train)","ab464ab4":"# y_train_preds = gb_model.predict(X_train)\n# y_test_preds = gb_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n# Train R2:\t0.896\n# Test R2:\t0.745","a9fd6acb":"# lgbm_model = LGBMRegressor(\n#     n_estimators=400,\n#     random_state=21,\n#     max_depth=15\n# )\n# lgbm_model.fit(X_train, y_train)\n# y_train_preds = lgbm_model.predict(X_train)\n# y_test_preds = lgbm_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.954\n# Test R2:\t0.74","73917328":"# xgbr_model = XGBRegressor(random_state=21,\n#                         tree_method='hist',\n#                         subsample=1.0,\n#                         n_estimators=600,\n#                         max_depth=3,\n#                         importance_type='total_cover',\n#                         colsample_bytree=1.0,\n#                         booster='dart')\n\n# xgbr_model.fit(X_train, y_train)\n# y_train_preds = xgbr_model.predict(X_train)\n# y_test_preds = xgbr_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n# Train R2:\t0.929\n# Test R2:\t0.722","a77df493":"# bg_model = BaggingRegressor(base_estimator=cb_model,  n_estimators=10, random_state=21)\n# bg_model.fit(X_train, y_train)\n\n# y_train_preds = bg_model.predict(X_train)\n# y_test_preds = bg_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.943\n# Test R2:\t0.761\n\n# Train R2:\t0.944\n# Test R2:\t0.762","b96f6f30":"#\u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0438\u0437 \u0434\u0432\u0443\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\n\n# rf_model = RandomForestRegressor(random_state=21,\n#                                 criterion='mse',\n#                                 max_depth=9,\n#                                 max_features=9,\n#                                 n_estimators=400)\n\n\n# gb_model = GradientBoostingRegressor(criterion='mse',\n#                                     min_samples_leaf=50,\n#                                     random_state=21,  \n#                                     max_features='sqrt', \n#                                     loss='huber', \n#                                     learning_rate=0.025,\n#                                     max_depth=7,                                     \n#                                     n_estimators=1550)   \n\n# stack_final = StackingRegressor([('gb',gb_model), ('rf',rf_model)])\n# stack_final.fit(X_train, y_train)\n# y_train_preds = stack_final.predict(X_train)\n# y_test_preds = stack_final.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.859\n# Test R2:\t0.762\n","7ec654ee":"#\u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0438\u0437 \u0434\u0432\u0443\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 (\u0435\u0449\u0435 \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430)\n\n# cb_model = CatBoostRegressor(silent=True,\n#                             learning_rate=0.1,\n#                             iterations=1150,\n#                             random_state=21,\n#                             eval_metric='R2',\n#                             depth=8)\n\n# rf_model = RandomForestRegressor(random_state=21,\n#                                 criterion='mse',\n#                                 max_depth=9,\n#                                 max_features=9,\n#                                 n_estimators=400)\n \n\n# stack_rf_cb = StackingRegressor([('cb',cb_model ), ('rf',rf_model )])\n# stack_rf_cb.fit(X_train, y_train)\n# y_train_preds = stack_rf_cb.predict(X_train)\n# y_test_preds = stack_rf_cb.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.954\n# Test R2:\t0.759\n\n# Train R2:\t0.953\n# Test R2:\t0.76\n\n# Train R2:\t0.954\n# Test R2:\t0.763","f8318d5f":"# voting_model = VotingRegressor([('cb_model', cb_model), ('rf_model', rf_model), ('gb_model', gb_model)])\n# voting_model.fit(X_train, y_train)\n\n# y_train_preds = voting_model.predict(X_train)\n# y_test_preds = voting_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.944\n# Test R2:\t0.76","7e53d4c0":"#\u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0438\u0437 3\u0445\n\n# stack_3 = StackingRegressor([('cb',cb_model), ('bg',bg_model)], final_estimator=gb_model)\n# stack_3.fit(X_train, y_train)\n# y_train_preds = stack_3.predict(X_train)\n# y_test_preds = stack_3.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n\n# Train R2:\t0.924\n# Test R2:\t0.742","461b78d6":"test_df.shape","67ffc9db":"test_df","4fe05a1c":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","2abcdcfb":"predictions = cb_model.predict(test_df)\npredictions","cc7c05c1":"submit['Price'] = predictions\nsubmit.head()","aef5eb2d":"submit.shape","bbd357d0":"submit.to_csv('cb_final_3.csv', index=False)","3e740d07":"**4. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","f1af5962":"**5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","04a7fb85":"**\u0412\u044b\u0432\u043e\u0434:**\n<br>\n\u0422\u0430\u043a \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u0435\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0446\u0435\u043d\u0435 \u0441\u043f\u0440\u0430\u0432\u0430.","6068968a":"<iframe src=\"https:\/\/www.kaggle.com\/embed\/julichitai\/baseline?cellIds=12&kernelSessionId=78651449\" height=\"300\" style=\"margin: 0 auto; width: 100%; max-width: 950px;\" frameborder=\"0\" scrolling=\"auto\" title=\"baseline\"><\/iframe>","49b93e2b":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 ","2952e44e":"# CatBoostRegressor","fa8f8bf7":"\n**\u0412\u044b\u0432\u043e\u0434:**\n<br>\n\u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 5. \u041e\u043d\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u043c\u0438 \u0438 \u043d\u0430\u0434\u043e \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0438\u0445. ","d6991c2d":"# 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043d\u0438\u043c\u0438?\n\n1. \u0412\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435, \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c)\n1. \u0417\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 (\u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, np.clip \u0438 \u0442.\u0434.)\n1. \u0414\u0435\u043b\u0430\u0442\u044c\/\u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0438\u0447\u0443\n1. \u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c","fbcd3ddb":"**6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test**","5f1a330e":"# LGBMRegressor","5565d61e":"\u0422\u0430\u043a \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u043f\u0440\u0430\u0432\u0430.","13f2c70d":"# XGBRegressor","995f6b74":"**7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**","3281c2e6":"**\u0412\u044b\u0432\u043e\u0434:**\n<br>\n\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - 32\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - 210.\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0448\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 97,5% (100,9) \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0432 \u0446\u0435\u043b\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 100 \u043c2 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u043c. ","bdba755d":"# BaggingRegressor","5f408448":"**\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","144615ac":"# LinearRegression","b76a40bb":"# RandomForestRegressor","865744cd":"<iframe src=\"https:\/\/www.kaggle.com\/embed\/julichitai\/baseline?cellIds=12&kernelSessionId=78651449\" height=\"300\" style=\"margin: 0 auto; width: 100%; max-width: 950px;\" frameborder=\"0\" scrolling=\"auto\" title=\"baseline\"><\/iframe>","f96faede":"**8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**\n<br>\n\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u041d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432\n\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)","8ddf7cf1":"**\u0412\u044b\u0432\u043e\u0434**\n<br>\n\u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u044e \u0441\u043b\u0435\u0434\u0443\u0449\u0438\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \n\u0417\u0430\u043f\u043e\u043b\u043d\u044e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Healthcare_1_by_DistrictId \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443. \u0418 \u0434\u0430\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0443 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443. ","dd22ec7c":" # \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n* **Id**- \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","d30f1da5":"# 1. EDA\n\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:\n\n1. \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n1. \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n1. \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447"}}