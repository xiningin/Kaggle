{"cell_type":{"33ff8717":"code","7ef9413a":"code","f5ab39dd":"code","e8cab079":"code","70e72c56":"code","75cd6ea9":"code","ada7238f":"code","9fc51d49":"code","d58c2deb":"code","8526b147":"code","3fa31ae4":"code","98ec6705":"code","54aa499c":"code","a30a3d43":"code","364f3370":"code","18971a57":"code","5f69eeb4":"code","7c5fc475":"code","e4a253f2":"code","3b102573":"code","ee5c5526":"code","27db6bf9":"code","dc2e4285":"code","c749db91":"code","1b0348ca":"code","e16970ef":"code","ed226c82":"code","4696be69":"code","65135e7c":"code","c7c9e900":"code","c2e5dfcd":"code","245b136e":"code","7600739f":"code","fb382236":"code","4a29073c":"code","e1c62b9e":"code","a58445f4":"code","eb923cb4":"code","5cbb7736":"code","1f111dd2":"code","27d2c274":"code","e750a483":"code","6a0cabfe":"code","5951e21a":"code","63acbd72":"code","53a58217":"code","62341cc2":"code","2d1ab6b1":"code","2fa1fa72":"markdown","d02a146f":"markdown","86c62474":"markdown","5d495ebb":"markdown","13a20169":"markdown","1ff82de8":"markdown","c8f4b90d":"markdown","0d2daf40":"markdown","29c27866":"markdown","ef6b5255":"markdown","1310c860":"markdown","a01a43f7":"markdown","66a2cb5f":"markdown","4c46e880":"markdown","e918b62e":"markdown"},"source":{"33ff8717":"from pandas import Series\nimport pandas as pd\nimport numpy as np\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, OrdinalEncoder, MinMaxScaler, PolynomialFeatures\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","7ef9413a":"df_train = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ndf_test= pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/sample_submission.csv')\n\n#df_train = pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/\u041a\u0443\u0440\u0441 DS 2020-21\/train.csv')\n#df_test = pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/\u041a\u0443\u0440\u0441 DS 2020-21\/test.csv')\n#sample_submission = pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/\u041a\u0443\u0440\u0441 DS 2020-21\/sample_submission.csv')\n","f5ab39dd":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0431\u044c\u0435\u0434\u0435\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train['sample'] = 1 \ndf_test['sample'] = 0 \ndf_test['default'] = 0 \n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True)","e8cab079":"def show_IQR(pd_dataset, column_name, bins_n=10, feature_name=None):\n    \"\"\" \n       \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n       \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 (\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430) \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0438\u043a\u043e\u0432 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u044b\n       \n       \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0438 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 boxplot\n    \"\"\"\n    data_column = pd_dataset[column_name]\n    perc_25 = data_column.quantile(0.25, interpolation=\"midpoint\")\n    perc_75 = data_column.quantile(0.75, interpolation=\"midpoint\")\n    IQR = perc_75 - perc_25\n    print(f'Q1: {perc_25}\\nQ3: {perc_75}\\nIQR: {IQR}',\n          f'\\n\u0413\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{perc_25 - 1.5*IQR}, {perc_75 + 1.5*IQR}]')\n    print(\"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\", data_column.isna().sum())\n    \n    # \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f: \n    plt.figure(figsize=(15, 5))\n    plt.subplot(121)\n    sns.distplot(data_column.values, bins=bins_n, color='#50248f')\n    plt.title(column_name + ' Distribution - full dataset\\n', fontsize=15)\n    plt.xlabel(column_name)\n    plt.ylabel('Quantity (frequency)')\n\n    # boxplot: \n    plt.subplot(122)\n    sns.boxplot(data_column.values, color='#38d1ff')  \n    plt.title(column_name + ' Distribution - full dataset\\n', fontsize=15)\n    plt.xlabel(column_name)\n    plt.show()\n    \n    if feature_name is not None:\n        \n        # \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f: \n        plt.figure(figsize=(15, 4))\n        plt.subplot(121)\n        sns.distplot(np.log(data_column.values+1), bins=bins_n, color='#a1c9e0')\n        plt.title(' \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 ' + column_name, fontsize=15)\n        plt.xlabel(column_name)\n        plt.ylabel('Quantity (frequency)')\n        \n        # boxplot: \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n        plt.subplot(122)\n        sns.boxplot(x=pd_dataset['default'], y=pd_dataset[column_name])\n        plt.title(column_name + ' distribution by default', fontsize=15)\n        plt.xlabel('default')\n        plt.ylabel(column_name)\n        \n        plt.show()\n    return ''\n\n# \u0418\u0449\u0435\u043c \u0441\u0430\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0441\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0440\u0435\u0434\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445\ndef impotant_muncols(cols, data):\n  imp_num = pd.Series(f_classif(data.query('sample == 1')[cols], data.query('sample == 1')['default'])[0], index = cols)\n  imp_num.sort_values(inplace = True)\n  imp_num.plot(kind = 'barh', figsize=(15,10))\n  return ''\n\n#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\ndef filling_quantile(data, col, change_quant): #quant=0.25 \u0438\u043b\u0438 0.75\n    IQR = data[col].quantile(q=0.75) - data[col].quantile(0.25)\n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    high_border = perc75 + 1.5*IQR\n    low_border = perc25 - 1.5*IQR\n    if change_quant == 0.75:\n        data[col] = data[col].apply(lambda x: perc75 if x>perc75 else x)\n    elif change_quant == 0.25:\n        data[col] = data[col].apply(lambda x: perc25 if x<perc25 else x)\n    else:\n        print('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 0.25 \u0438\u043b\u0438 0.75 :)')\n    return data\n\n#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndef func_quantile(data, col):   \n    \n    IQR = data[col].quantile(q=0.75) - data[col].quantile(0.25)\n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75), \"IQR: {}, \".format(IQR), \"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    \n    # \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    print(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\",col,\":\",data[data[col]<perc25 - 1.5*IQR][col].count() + data[data[col]>perc75 + 1.5*IQR][col].count())\n    data[col].loc[data[col].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 20, label = 'IQR')\n    plt.legend()  \n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndef category_info(data, col):\n    plt.figure(figsize=(15, 4))\n    plt.subplot(121)\n    sns.distplot(data[col].values, bins=7, color='#a1c9e0')\n    plt.title(' \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 ' + col, fontsize=15)\n    plt.xlabel(col)\n    plt.ylabel('Quantity (frequency)')\n            \n    # boxplot: \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    plt.subplot(122)\n    sns.boxplot(x=data.query('sample == 1')['default'], y=data.query('sample == 1')[col])\n    plt.title(col + ': distribution by default', fontsize=15)\n    plt.xlabel('default')\n    plt.ylabel(col)\n    plt.show()\n\n# \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\ndef impotant_feature(data, col, key):\n    cols = data.loc[:, col].value_counts().index\n    combinations_all = list(combinations(cols, 2))\n    for comb in combinations_all:\n        if ttest_ind(data.loc[data.loc[:, col] == comb[0], key],\n                     data.loc[data.loc[:, column] == comb[1], key]).pvalue \\\n                <= 0.05\/len(combinations_all):\n            print('\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f: ', col)\n            break","70e72c56":"df.info() # \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0414\u0430\u0442\u0430\u0424\u0440\u0435\u0439\u043c\u0435","75cd6ea9":"#\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 DataFrame\n\nprint(df.isna().sum())\nprint('\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432:', df.duplicated().sum())\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432:', df['default'].isnull().sum())","ada7238f":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u043a\u0430\u043a\u043e\u043c \u0432\u0438\u0434\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0435 10 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ndf_agg = df.agg({'nunique', lambda s: s.unique()[:10]})\\\n    .append(pd.Series(df.isnull().sum(), name='null'))\\\n    .append(pd.Series(df.dtypes, name='dtype'))\\\n    .transpose()\n\ndf_agg","9fc51d49":"# \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0432\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\ndf['default'].value_counts().plot.barh()\ndf['default'].value_counts()","d58c2deb":"#\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbin_cols=['sex','car','car_type','good_work','foreign_passport']\n\n#\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols=['education','home_address','work_address','app_date','sna'] \n\n#\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nnum_cols=['age','decline_app_cnt','income','bki_request_cnt','score_bki','region_rating','first_time']","8526b147":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\nfor i in num_cols:\n    show_IQR(df, i, 100, 'yes')","3fa31ae4":"#\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0434\u043e \n\nprint(df.loc[:,'default'].astype('float64').corr(df.loc[:,'bki_request_cnt']).astype('float64'))\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 decline_app_cnt \u043d\u0430 \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \n\ndf = filling_quantile(df, 'bki_request_cnt', 0.75)\n\n#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u043e\u0441\u043b\u0435\n\nprint(df.loc[:,'default'].astype('float64').corr(df.loc[:,'bki_request_cnt']).astype('float64'))\n\n# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u0430\u0441\u044c, \u043d\u043e \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u0430\u043a.","98ec6705":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\nshow_IQR(df, 'bki_request_cnt', 80)","54aa499c":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 decline_app_cnt \n\nscaler = MinMaxScaler()\nRanking_norm = scaler.fit_transform(df.loc[:,['decline_app_cnt']]) \ndf.loc[:, ['decline_app_cnt']] = Ranking_norm","a30a3d43":"show_IQR(df, 'decline_app_cnt', 50)","364f3370":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\n\nprint(df.loc[:,'default'].astype('float64').corr(df.loc[:,'decline_app_cnt']).astype('float64'))","18971a57":"# \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 mutual_info_classif\nimpotant_muncols(num_cols, df)","5f69eeb4":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e 'income' \u0438 'age'\n\nprint(df.loc[:,'default'].astype('float64').corr(df.loc[:,'income']).astype('float64'))\nprint(df.loc[:,'default'].astype('float64').corr(df.loc[:,'age']).astype('float64'))","7c5fc475":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n#df = df.drop(columns=['income', 'age'])\n#num_cols = list(set(num_cols) - set(['income','age']))\n\n#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u0445\u043e\u0434\n\n#df = df.drop(columns=['age'])\n#num_cols = list(set(num_cols) - set(['age']))\n\n# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u043e\u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c age \u0438 income\n\ndf['age'] = np.log(df['age'])\ndf['income'] = np.log(df['income'])","e4a253f2":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nf = plt.subplots(figsize=(10, 6))\nsns.heatmap(df.query('sample == 1')[num_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","3b102573":"#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datatime\n\ndf['app_date'] = pd.to_datetime(df['app_date'])\n\n# \u0423 \u043d\u0430\u0441 \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u0437\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 4 \u043c\u0435\u0441\u044f\u0446\u0430 \u0433\u043e\u0434\u0430, \u043c\u0435\u0441\u044f\u0446\u044b \u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u043c, \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\ndf['app_date'] = df['app_date'].apply(lambda x: x.month)\n\n#df = df.drop(columns=['app_date'])\n#cat_cols = list(set(cat_cols) - set(['app_date']))","ee5c5526":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0438\u0449\u0435\u043c \u043c\u043e\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 'education'\n\ndf['education'].value_counts().plot.barh()\nprint('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u044b:', df.education.mode())","27db6bf9":"# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c NaN \u043d\u0430 \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 SCH (\u0432 \u0448\u043a\u043e\u043b\u0435 \u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0432\u0441\u0435)\n\ndf['education'] = df['education'].fillna('SCH')\n\n# \u0422\u0430\u043a \u043a\u0430\u043a \u0443\u0447\u0435\u0431\u0430 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u0430\u0445 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b\n\neducation_grades = [\"SCH\", \"UGR\", \"GRD\", \"PGR\", \"ACD\"]\ndf[\"education\"] = OrdinalEncoder(categories=[education_grades]).fit_transform(df[[\"education\"]]).astype(int)\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n\ndf.education.unique()","dc2e4285":"#\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\nfor i in cat_cols:\n  category_info(df, i)","c749db91":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nf = plt.subplots(figsize=(10, 6))\nsns.heatmap(df.query('sample == 1')[cat_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","1b0348ca":"# \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_cat = Series(mutual_info_classif(df[cat_cols], df['default'],\n                                     discrete_features = True), index = cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","e16970ef":"print(df.loc[:,'default'].astype('float64').corr(df.loc[:,'work_address']).astype('float64'))","ed226c82":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0430\u0434\u0440\u0435\u0441\n\ndf = df.drop(columns='work_address')\ncat_cols = list(set(cat_cols) - set(['work_address']))\n\n#df['home+work_address'] = df['work_address'] + df['home_address']\n#df = df.drop(columns=['work_address','home_address'])\n#cat_cols = list(set(cat_cols) - set(['work_address','home_address']))\n#cat_cols.append('home+work_address')","4696be69":"# \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    df[column] = label_encoder.fit_transform(df[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndf.head()","65135e7c":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nf = plt.subplots(figsize=(10, 6))\nsns.heatmap(df.query('sample == 1')[bin_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","c7c9e900":"# \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_cat = Series(mutual_info_classif(df[bin_cols], df['default'],\n                                     discrete_features = True), index = bin_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c2e5dfcd":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a car\n\n#df = df.drop(columns=['car'])\n#bin_cols = list(set(bin_cols) - set(['car']))\n\n# \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0432\u0443\u0445 car \u0438 car_type\n\ndf['car+car_type'] = df['car']+df['car_type']\n\n#\u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443\n\nlabel_encoder = LabelEncoder()\ndf['car+car_type'] = label_encoder.fit_transform(df['car+car_type'])\ndf = df.drop(columns=['car', 'car_type'])\nbin_cols = list(set(bin_cols) - set(['car', 'car_type']))","245b136e":"#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\npf = PolynomialFeatures(2, include_bias=False)\npoly_data = pf.fit_transform(df[num_cols])[:, len(num_cols):]\npoly_cols = pf.get_feature_names()[len(num_cols):]\npoly_df = pd.DataFrame(poly_data, columns=poly_cols)\ndf = df.join(poly_df, how='left')\nnum_cols = num_cols + poly_cols","7600739f":"impotant_muncols(num_cols, df)","fb382236":"imp_num = pd.Series(f_classif(df.query('sample == 1')[num_cols], df.query('sample == 1')['default'])[0], index = num_cols)\n\n# \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 80% \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445, \u0430 20 \u043e\u0442\u0441\u0435\u043a\u0430\u0435\u043c\n\nfinal_num_cols = list(imp_num.sort_values(ascending=False).keys()[:int(len(imp_num)*0.8)])\nfinal_num_cols","4a29073c":"# dammy \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n# X_cat = OneHotEncoder(sparse = False).fit_transform(df[cat_cols].values)\ndf = pd.get_dummies(df, columns=cat_cols)","e1c62b9e":"bin_cat_cols = list(df.columns)\nfor x in poly_cols:\n    bin_cat_cols.remove(x)\n    \n# \u0443\u0434\u0430\u043b\u0438\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\nbin_cat_cols.remove('client_id')\nbin_cat_cols.remove('default')\nbin_cat_cols.remove('sample')","a58445f4":"imp_cat = pd.Series(mutual_info_classif(df.query('sample == 1')[bin_cat_cols], df.query('sample == 1')['default']), index = bin_cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh',figsize=(15,10))","eb923cb4":"# \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 80% \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445, \u0430 20 \u043e\u0442\u0441\u0435\u043a\u0430\u0435\u043c\n\nfinal_bin_cat_cols = list(imp_cat.sort_values(ascending=False).keys()[:int(len(imp_cat)*0.8)])\nfinal_bin_cat_cols","5cbb7736":"f = plt.subplots(figsize=(15, 15))\nsns.heatmap(df.query('sample == 1')[final_bin_cat_cols + final_num_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","1f111dd2":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nX_num = StandardScaler().fit_transform(df[final_num_cols].values)\ndf[final_num_cols] = X_num","27d2c274":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439:\n\n#train = df.query('sample == 1').drop(['sample'], axis=1)\n#test = df.query('sample == 0').drop(['sample', 'default'], axis=1)\n\ntrain = df.query('sample == 1')[final_bin_cat_cols + final_num_cols]\ntest = df.query('sample == 0')[final_bin_cat_cols + final_num_cols]","e750a483":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\n#X = train.drop(['client_id', 'default'], axis=1).values\nX = train.values\nY = df.query('sample == 1').default.values","6a0cabfe":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","5951e21a":"#from sklearn.model_selection import GridSearchCV\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0438\u043f\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n#penalty = ['l1', 'l2']\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n#C = np.logspace(0, 4, 10)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n#hyperparameters = dict(C=C, penalty=penalty)\n\n#model = LogisticRegression(solver='liblinear', max_iter = 2000)\n#model.fit(X_train, y_train)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n#clf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\n#best_model = clf.fit(X_train, y_train)\n\n# View best hyperparameters\n#print('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\n#print('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","63acbd72":"model = LogisticRegression(solver='liblinear', class_weight='balanced', C=1.0, penalty='l2')\nmodel.fit(X_train, y_train)\n\nprobs = model.predict(X_test)\npred_probs = model.predict_proba(X_test)\n\n\nfpr, tpr, threshold = roc_curve(y_test, pred_probs[:,1])\nroc_auc = roc_auc_score(y_test, pred_probs[:,1])\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","53a58217":"print('accuracy_score:', accuracy_score(y_test, probs))\nprint('precision_score:', precision_score(y_test, probs))\nprint('recall_score:', recall_score(y_test, probs))\nprint('f1_score:', f1_score(y_test, probs))\n\u0441f_mtx = confusion_matrix(y_test, probs)\nprint()\nprint('confusion matrix:', '\\n', \u0441f_mtx)\ntn, fp, fn, tp = \u0441f_mtx.ravel()\nprint()\nprint('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0435\u0432\u043e\u0437\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c \u043a\u0440\u0435\u0434\u0438\u0442: {} \\n\\\n \u0438\u043b\u0438 {}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445 \\n'.format(fp, round((fp\/(fp+tn))*100, 2)))\nprint('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c \u043a\u0440\u0435\u0434\u0438\u0442: {} \\n\\\n\u0438\u043b\u0438 {}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\\n'.format(fn, \n                                        round((1-recall_score(y_test,probs))*100, 2)))\nprint()\nprint('roc_auc_score:', roc_auc_score(y_test, pred_probs[:, 1]))","62341cc2":"sub_test = test.values\nsubmission = df.query('sample == 0')[['client_id', 'default']]\nsubmission['default'] = model.predict_proba(sub_test)[:,1]\ndisplay(submission.sample(10))","2d1ab6b1":"submission.to_csv('submission.csv', index=False)","2fa1fa72":"\u0412\u0438\u0434\u0438\u043c \u0441\u0438\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u043a\u0430\u043c\u0438 car \u0438 car_type. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0439 \u0438\u0445 \u043d\u0438\u0445 \u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u0430\u044f \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0435.","d02a146f":"**\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435:** \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0445\u043e\u0447\u0443 \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u044c \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043e\u0433\u0440\u043e\u0438\u043d\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e Stanislav Nevezhin \u0437\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u0444\u0443\u043a\u0446\u0438\u0438. \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442, \u044d\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0410 \u0442\u0430\u043a\u0436\u0435 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0445\u043e\u0440\u043e\u0448\u043e \u0437\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0435\u0441\u0442\u044c \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043a\u0440\u043e\u043c\u0435 region_rating, first_time, age; \u043d\u0430\u0434\u043e \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u0441 \u043d\u0438\u043c\u0438 \u0434\u0435\u043b\u0430\u0442\u044c.\n","86c62474":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e score_bki \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u0447\u0435\u043c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0438\u0434\u0438\u043c \u0447\u0442\u043e income \u0438 age \u0430\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0445.","5d495ebb":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0444\u0430\u0439\u043b\u043e\u0432","13a20169":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","1ff82de8":"\u0412\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 work_address \u0438 home_address, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0430\u044f \u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u0430\u044f \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0435  ","c8f4b90d":"0,736 - \u0431\u0435\u0437 car\n0,740 - c \u043d\u043e\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c car+car_type\n0,719 - \u0431\u0435\u0437 \u0437\u0430\u043c\u0435\u043d\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 decline_app_cnt\n0,737 - \u0431\u0435\u0437 app-date\n0,726 - \u0441 \u043d\u043e\u0432\u044b\u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c home+work_address","0d2daf40":"\u041d\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u043a\u0430\u043a \u0435\u0441\u0442\u044c.","29c27866":"**\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435:** *\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 18 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432: \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 'education', \u0430 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442. \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d, \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b oversampling \u0438 undersampling.*\n\n","ef6b5255":"## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","1310c860":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","a01a43f7":"# \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","66a2cb5f":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","4c46e880":"\u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e:\nclient_id: \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430;\n\n* education: \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f;\n* sex: \u043f\u043e\u043b \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430;\n* age: \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430;\n* car: \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f;\n* car_type: \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f-\u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438;\n* decline_app_cnt: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0442\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a;\n* good_work: \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \"\u0445\u043e\u0440\u043e\u0448\u0435\u0439\" \u0440\u0430\u0431\u043e\u0442\u044b;\n* bki_request_cnt: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418(\u0411\u044e\u0440\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0440\u0438\u0439);\n* home_adress: \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430;\n* work_adress: \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430;\n* income: \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430;\n* foreign_passport: \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430;\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430;\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435;\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418;\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430;\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438;\n* default: \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430;","e918b62e":"# \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"}}