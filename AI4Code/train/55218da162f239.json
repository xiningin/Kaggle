{"cell_type":{"fb48c9ff":"code","7930da9c":"code","a54cfd44":"code","f7da4761":"code","31988628":"code","a0f54130":"code","e06b9aad":"code","6b78ad0e":"code","6c5483d1":"code","4d0137dc":"code","d920d0c0":"code","6b65afaa":"code","f9ddfac7":"code","b3fdbef4":"code","d09c3097":"markdown","53ce9b9a":"markdown","d03ae9da":"markdown","7685b899":"markdown","f325fcc7":"markdown","d23f6d1f":"markdown","70cbfeaf":"markdown","29131353":"markdown","950a1325":"markdown","d11d3d9d":"markdown","abc07734":"markdown","2a7613e5":"markdown","131a7304":"markdown","8cec4ec4":"markdown"},"source":{"fb48c9ff":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport nltk\nreviewsDF = pd.read_csv(\"..\/input\/seattle\/reviews.csv\")\nreviewsDF = reviewsDF.dropna()\nreviewsDF.head()\nnltk.download('vader_lexicon')","7930da9c":"!pip install langdetect","a54cfd44":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nsid = SentimentIntensityAnalyzer()\n\nreviewsDF['polarity_value']=\"Default\"\nreviewsDF['neg']=0.0\nreviewsDF['pos']=0.0\nreviewsDF['neu']=0.0\nreviewsDF['compound']=0.0\nfor index,row in reviewsDF.iterrows():\n    ss = sid.polarity_scores(row['comments'])\n    reviewsDF.at[index,'polarity_value'] = ss\n    reviewsDF.at[index,'neg'] = ss['neg']\n    reviewsDF.at[index,'pos'] = ss['pos']\n    reviewsDF.at[index,'neu']= ss['neu']\n    reviewsDF.at[index,'compound'] = ss['compound']\nreviewsDF.head()","f7da4761":"reviewsDF.to_csv('.\/polarity_values_reviews.csv')","31988628":"# Our dataframe consists of reviews in different language as well.Hence removing the comments which are not in english\nfrom langdetect import detect\n\ndef detect_lang(sente):\n    sente=str(sente)\n    try:\n        return detect(sente)\n    except:\n        return \"None\"\n\nfor index,row in reviewsDF.iterrows():\n    lang=detect_lang(row['comments'])\n    reviewsDF.at[index,'language'] = lang\n#     print(lang)\n    \n#taking rows whose language is English\nEngReviewsDF=reviewsDF[reviewsDF.language=='en']\n\nEngReviewsDF.head(2)","a0f54130":"polarDF=EngReviewsDF[['pos']]\npolarDF=polarDF.groupby(pd.cut(polarDF[\"pos\"], np.arange(0, 1.1, 0.1))).count()\npolarDF=polarDF.rename(columns={'pos':'count_of_Comments'})\npolarDF=polarDF.reset_index()\npolarDF=polarDF.rename(columns={'pos':'range_i'})\nfor i,r in polarDF.iterrows():\n    polarDF.at[i,'RANGE'] = float(str(r['range_i'])[1:4].replace(',',''))\n    polarDF.at[i,'Sentiment'] = 'positive'\ndel polarDF['range_i']\npolarDF.head()","e06b9aad":"\npolarDFneg=EngReviewsDF[['neg']]\npolarDFneg=polarDFneg.groupby(pd.cut(polarDFneg[\"neg\"], np.arange(0, 1.1, 0.1))).count()\npolarDFneg=polarDFneg.rename(columns={'neg':'count_of_Comments'})\npolarDFneg=polarDFneg.reset_index()\npolarDFneg=polarDFneg.rename(columns={'neg':'range_i'})\nfor i,r in polarDFneg.iterrows():\n    polarDFneg.at[i,'RANGE'] = float(str(r['range_i'])[1:4].replace(',',''))\n    polarDFneg.at[i,'Sentiment'] = 'negative'\ndel polarDFneg['range_i']\nfor i,r in polarDFneg.iterrows():\n    polarDF=polarDF.append(pd.Series([r[0],r[1],r[2]],index=['count_of_Comments','RANGE','Sentiment']),ignore_index=True)\n    \npolarDFneg.head()","6b78ad0e":"polarDFneut=EngReviewsDF[['neu']]\npolarDFneut=polarDFneut.groupby(pd.cut(polarDFneut[\"neu\"], np.arange(0, 1.0, 0.1))).count()\npolarDFneut=polarDFneut.rename(columns={'neu':'count_of_Comments'})\npolarDFneut=polarDFneut.reset_index()\npolarDFneut=polarDFneut.rename(columns={'neu':'range_i'})\nfor i,r in polarDFneut.iterrows():\n    polarDFneut.at[i,'RANGE'] = float(str(r['range_i'])[1:4].replace(',',''))\n    polarDFneut.at[i,'Sentiment'] = 'neutral' \ndel polarDFneut['range_i']\n\nfor i,r in polarDFneut.iterrows():\n    polarDF=polarDF.append(pd.Series([r[0],r[1],r[2]],index=['count_of_Comments','RANGE','Sentiment']),ignore_index=True)\n    \npolarDFneut.head()","6c5483d1":"import seaborn as sns\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\nsns.factorplot(data=polarDF, x=\"RANGE\", y=\"count_of_Comments\",col=\"Sentiment\") \n","4d0137dc":"inputDF = pd.read_csv('..\/input\/seattle\/listings.csv')\ninputDF=inputDF[['number_of_reviews','price','review_scores_rating']]\n\n# replacing NaN values with 0\ninputDF.fillna(0, inplace=True)\n\n#Extracting prices from the table\nprice = inputDF['price']\nprices=[]\n\n#clean the data to make it float\nfor p in price:\n    p=float(p[1:].replace(',',''))\n    prices.append(p)\n\n#replace the price column with the new column\ninputDF['price']=prices\n\nprice_review = inputDF[['number_of_reviews', 'price']].sort_values(by = 'price')\n\nprice_review.plot(x = 'price', \n                  y = 'number_of_reviews', \n                  style = 'o',\n                  figsize =(12,8),\n                  legend = False,\n                  title = 'Reviews based on Price')\n\nplt.xlabel(\"price\")\nplt.ylabel(\"Number of reviews\")","d920d0c0":"from nltk.corpus import stopwords\nimport string\nimport nltk\n\nwords=''\nfor index,row in EngReviewsDF.iterrows():\n    words += row['comments']","6b65afaa":"reviews_data=nltk.word_tokenize(words)\nstring_punctuation = string.punctuation\nignoreChar=['\\r','\\n','',' ',\"'s\",'!',',',]\nnums=['0','1','2','3','4','5','6','7','8','9']","f9ddfac7":"from nltk.corpus import stopwords\n\ncachedStopWords = stopwords.words(\"english\")\ncachedStopWords.append('the')\n\nwords_only = [''.join(c for c in s if c not in string.punctuation if c not in nums if c not in ignoreChar) for s in reviews_data]\nwords_only = [s for s in words_only if s]\ncomments_filtered_data=' '.join(words_only)\ncomments_filtered_data = ' '.join([word.lower() for word in comments_filtered_data.split() if word not in cachedStopWords])","b3fdbef4":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\nwordcloud = WordCloud(width = 1000, height = 700).generate(comments_filtered_data)\nplt.figure(figsize=(18,12))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","d09c3097":"### Interpreting the relation between number of reviews and prices","53ce9b9a":"The words like \"great host\", \"definitely recommended\", \"comfortable\", \"everything needed\" were most used by the customers. These reviews and comments play a big role in attracting the attention of travelers.","d03ae9da":"#### Visualizing polarity score for negativity","7685b899":"To retrieve the polarity of comments i.e. whether a comment is 'positive'or 'negative' or 'neutral' we are using built-in analyzer in the NLTK Python library to assign polarity score to each comment.","f325fcc7":"- From the graph, the reviews were most observed for the listings that have a price range around 100 - 300. The number quickly declines as the price goes up. <br>\n- It shows that, there is no necessity for an expensive listing to have more reviews. Hence, the Prices have no relation with the Number of reviews.","d23f6d1f":"#### Visualizing the polarity score for positivity","70cbfeaf":"#### Visualizing polarity score for neutrality","29131353":"#### Plotting the number of comments against the polarity range","950a1325":"#### Analyzing the most used words in the comments","d11d3d9d":"After calculating polarity, and plotting it on a graph, most of the comments have 0 negative polarity. i.e. most of the comments are either neutral or positive.","abc07734":"# Part-3\n## Business Understanding: \u201cWhat is the relationship of reviews with price?\u201d","2a7613e5":"#### Assigning polarity score to each comment and adding the same to dataframe","131a7304":"As a preprocessing step, I removed the comments which are not in English because I used  built-in analyzer in the NLTK Python library to assign polarity score to each comment and this analyzer doesn't interpret languages other than English.","8cec4ec4":"There are so many factors which contribute towards the price of a listing on AirBnB. While we already have few conclusions for relationship between prices and their dependency on various factors of a listing, let's analyze if price of a listing is dependent on number of reviews or not and if the relationship exists, how does it affect the prices?"}}