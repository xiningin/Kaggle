{"cell_type":{"a2ad2168":"code","0a49a8b6":"code","cb0c20f2":"code","713b62c3":"code","65191f4b":"code","8d9d32f8":"code","45ba80be":"code","baf103ae":"code","22fc0bea":"code","7c3f2a33":"code","506c7ba1":"code","80bd3625":"code","0d98e370":"code","52997c5e":"code","73e0dadd":"code","71552ea6":"code","4fe9cf9e":"code","a0610c35":"code","91aab491":"code","55b38471":"code","bd7a5de4":"code","f5950e53":"code","f0b8b5b2":"code","1371dee6":"code","7bc2554d":"code","6b5daeee":"code","04f5cbcd":"code","4d94eeaa":"code","ae635498":"code","a46814cf":"code","29beface":"code","76a21eaf":"code","457f33ae":"code","bf72ea74":"code","8350eec7":"code","a6e64774":"code","cf9c3e55":"code","46e9a348":"code","85055a2d":"code","a4819b02":"code","03195d3b":"code","f5a6a388":"code","7b44cec5":"code","72a38acd":"code","3a7349ca":"code","2f2fd226":"code","19f398c0":"code","7a5de173":"code","2a7a1c96":"code","e1cbe92f":"code","b699e60e":"code","6173582f":"code","3cd63be5":"code","7201d6d4":"code","fd391c55":"markdown","9db495e5":"markdown","80590065":"markdown","4298b97d":"markdown","42b56d83":"markdown","fe92b855":"markdown","8f6f52b3":"markdown","05a8b1ba":"markdown","85bea15a":"markdown","06de6beb":"markdown","c412af13":"markdown","063219af":"markdown","eacfa92b":"markdown","58e9885d":"markdown","1c0fb33e":"markdown","1dbe1ed9":"markdown","b3c67ef4":"markdown","abbc5cb6":"markdown","7b251182":"markdown","99416718":"markdown","72cf8647":"markdown","94656d5f":"markdown","4fdf296a":"markdown"},"source":{"a2ad2168":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a49a8b6":"pip install pmdarima","cb0c20f2":"import os\nimport pandas as pd\nimport pandas_datareader as pdr\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nplt.style.use('seaborn-whitegrid')\n\nimport statsmodels.api as sm\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom pmdarima.arima import auto_arima\n\nimport seaborn as sns\n\nplt.style.use('seaborn-whitegrid')\nsns.set_style('white')\n%matplotlib inline\nimport itertools\nimport warnings\nwarnings.filterwarnings(action='ignore')\n","713b62c3":"data = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')\ndata.head()\n","65191f4b":"# \ub370\uc774\ud130 \ub85c\ub529\ud558\uace0 month \ub97c datetime \uac1d\uccb4\ub85c \ubc14\uafb8\uace0 index\ub85c \uc9c0\uc815\ud55c\ub2e4.\ndata = data.rename(columns = {'Month':'month', '#Passengers':'passengers'})\ndata['month'] = pd.to_datetime(data['month'])\ndata = data.set_index('month')\ndata","8d9d32f8":"type(data)","45ba80be":"data.index","baf103ae":"fig = data.plot()","22fc0bea":"plt.plot(data)","7c3f2a33":"# \uc2dc\uacc4\uc5f4 \ubd84\ud574(\uacc4\uc808\uc131 \ubd84\ud574)\n# \ub367\uc148 \ubc29\uc2dd\uc744 \ucc44\ud0dd\ud588\uc73c\uba70 \uace0\uc804\uc801 \ubd84\ud574\uc778\uac83 \uac19\ub2e4.\ndecomposition = sm.tsa.seasonal_decompose(data['passengers'], model = 'additive',\n                                          period = 1)\n","506c7ba1":"fig = decomposition.plot()\nfig.set_size_inches(10,10)\nplt.show()","80bd3625":"# split\ntrain_data, test_data = train_test_split(data, test_size = 0.2, shuffle=False)","0d98e370":"print(train_data)\nprint(test_data)\n","52997c5e":"# values \uba54\uc11c\ub4dc\ub97c \uc774\uc6a9\ud558\uba74 value \uac12\ub4e4\uc744 array \ud615\ud0dc\ub85c \ucd94\ucd9c\uac00\ub2a5.\n# shape \ud574\ubcf4\ub2c8\uae4c 2\ucc28\uc6d0\uc778\ub370 \ud55c \ucd95\uc758 \ud06c\uae30\uac00 1\uc774\ub77c squeeze \ud560 \uac83.\ntrain_data.values.shape","73e0dadd":"# ACF, PACF\n\nfig, ax = plt.subplots(1,2,figsize = (10,5))\n# \uc804\uccb4 fig\uc758 title \uc124\uc815\nfig.suptitle('Raw data')\n\n# \uc778\ub371\uc2a4\ub294 \uad73\uc774 \ud544\uc694\uc5c6\ub294 \ub4ef. \uc5b4\ucc28\ud53c \uc2dc\uac04\uc21c\uc73c\ub85c \uc815\ub82c\ub418\uc5b4\uc788\uc74c\uc744 \uac00\uc815\ud55c \ub4ef.\nsm.graphics.tsa.plot_acf(train_data.values.squeeze(),lags = 30,ax=ax[0])\nsm.graphics.tsa.plot_pacf(train_data.values.squeeze(), lags = 30, ax = ax[1])\n","71552ea6":"# \ucc28\ubd84\n\ndiff_train_data = train_data.copy()\n# default \ub294 lag=1, na \ub294 \uc81c\uac70\ndiff_train_data = diff_train_data.diff().dropna()\nprint('Raw data')\nprint(train_data)\nprint('\ucc28\ubd84\ud55c \ub370\uc774\ud130')\nprint(diff_train_data)","4fe9cf9e":"# \ucc28\ubd84 \ub370\uc774\ud130 plot\n\nplt.figure(figsize = (12,8))\n# \uc624 \uc774\ub7f0\uc2dd\uc73c\ub85c\ub3c4 \uac00\ub2a5\ud558\uad6c\ub098. \n# subplot \ubc14\ub85c \uc801\uc6a9\ud558\uace0 \uc138\ub85c2\uac00\ub85c1\uc5d0\uc11c \uccab\ubc88\uc9f8\ub85c \uc9c0\uc815\ud55c \uac83\nplt.subplot(211)\nplt.plot(train_data['passengers'])\nplt.legend(['Raw data(Non-stationary)'])\nplt.subplot(212)\nplt.plot(diff_train_data, color= 'orange')\nplt.legend(['differenced(stationary)'])","a0610c35":"# \ucc28\ubd84\ud55c \ub370\uc774\ud130\uc758 ACF, PACF\n\nfig, ax = plt.subplots(1,2,figsize=(12,8))\nfig.suptitle('differenced data')\n\nsm.graphics.tsa.plot_acf(diff_train_data, ax = ax[0])\nsm.graphics.tsa.plot_pacf(diff_train_data, ax = ax[1])","91aab491":"# \uc2e0\uac00\ud558\uac8c \ubaa8\ub378\uc5d0 \ubc14\ub85c train_data \ub97c \uc9d1\uc5b4\ub123\uace0 fit()\uc744 \ucde8\ud574\uc900\ub2e4.\nmodel = ARIMA(train_data, order = (1,1,0))\nmodel_fit = model.fit()\nmodel_fit.summary()","55b38471":"# parameter search\n\np = range(0,3)\nd = range(1,2)\nq = range(0,3)\n\n# itertools \ub294 \uc774\ud130\ub808\uc774\uc158\uc744 \ub3c4\uc640\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c,\n# itertools.product \ub294 \uc778\uc218\ub85c \ub4e4\uc5b4\uac04 \uac83\ub4e4\uc758 \ubaa8\ub4e0 \uc870\ud569\uc744 \ubc18\ud658\ud55c\ub2e4.\npdq = list(itertools.product(p,d,q))\nprint(pdq)\n\naic = []\nfor i in pdq:\n    model = ARIMA(train_data, order = i)\n    model_fit = model.fit()\n    print('ARIMA: {0} >> AIC : {1}'.format(i, round(model_fit.aic,2)))\n    aic.append(round(model_fit.aic,2))","bd7a5de4":"optimal = [(pdq[i], j) for i, j in enumerate(aic) if j == min(aic)]\noptimal[0]","f5950e53":"model_opt = ARIMA(train_data, order = optimal[0][0])\nmodel_opt_fit = model_opt.fit()\nmodel_opt_fit.summary()","f0b8b5b2":"pred = model_opt_fit.forecast(len(test_data))\nprint(pred)","1371dee6":"# forecast\ub77c\ub294 \uba54\uc11c\ub4dc\ub97c \ub9ce\uc774 \uc4f4\ub2e4\uace0 \ud558\uba70, \ub4e4\uc5b4\uac00\ub294 \uc778\uc218\ub294 \uc774 \ud6c4\ub85c \uc5bc\ub9c8\ub098 \uc608\uce21\ud560\uc9c0\uc774\ub2e4.\n# predict \uba54\uc11c\ub4dc\ub3c4 \uc874\uc7ac\ud558\uba70 \uc774\ub294 start\uc640 end index\ub97c \uc9d1\uc5b4\ub123\uc5b4 \uac12\uc744 \ub3c4\ucd9c\ud55c\ub2e4.\n\n# .forecast \ub294 3\uac1c\uc758 array\ub97c \ud29c\ud50c\ub85c \ubb36\uc740 \ub370\uc774\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \n# \uccab\ubc88\uc9f8 array \ub294 \uc810\uc608\uce21\uac12\uc774\uace0 \ub450\ubc88\uc9f8\ub294 upper bound, \uc138\ubc88\uc9f8\ub294 lower bound \uc774\ub2e4. \npred = model_opt_fit.forecast(len(test_data))\npred_value = pred[0]\n\npred_ub = pred[2][:,0]\npred_lb = pred[2][:,1]\npred_index = list(test_data.index)\nr2 = r2_score(test_data, pred_value)","7bc2554d":"fig, ax = plt.subplots(figsize = (12,8))\nax.plot(data.index, data.passengers)\n# \uadf8\ub0e5 \ub0a0\uc9dc \ub123\uc73c\ub2c8\uae4c \uc778\uc2dd\ubaac\ud574\uc11c \uc774\ub807\uac8c \ud568.\nax.vlines(pd.to_datetime('1958-08-01'), 0, 1000,linestyle = '--', color='r', \n         label='Start of Forecast');\nax.plot(pred_index, pred_value, label = 'prediction',color='orange')\n# \uc694\uac78\ub85c \ubc94\uc704 \ucc44\uc6b0\uae30\nax.fill_between(pred_index, pred_lb, pred_ub, color='k', alpha=0.1,\n               label='0.95 prediciton interval')\nax.legend(loc='upper left')\nplt.suptitle(f'ARIMA {optimal[0][0]} Prediction Results (r2_score:{round(r2,2)})')\nplt.show()","6b5daeee":"# \uc6b0\uc120 \uc5b4\ub5a4 parameter \ub97c \ub123\uc744\uc9c0 search \ud574\ubcf4\uc790\n\nprint('Examples of parameter combinations of SARIMA...')\np = range(0,3)\nd = range(1,2)\nq = range(0,3)\ns = range(12,13)\n\npdq = list(itertools.product(p,d,q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in pdq]\nprint(pdq)\n\naic = []\nparams = []\nfor i in pdq:\n    for j in seasonal_pdq:\n        try:\n            model = SARIMAX(train_data.values, order=(i), seasonal_order=(j))\n            model_fit = model.fit()\n            print(f'SARIMA parameter : {i} {j} >> AIC: {round(model_fit.aic,2)}')\n            params.append((i,j))\n            aic.append(round(model_fit.aic,2))\n        except:\n            continue\n            ","04f5cbcd":"optimal = [(params[i], j) for i, j in enumerate(aic) if j==min(aic)]\noptimal","4d94eeaa":"model_opt = SARIMAX(train_data, order = optimal[0][0][0],\n                   seasonal_order = optimal[0][0][1])\nmodel_opt_fit = model_opt.fit()\nmodel_opt_fit.summary()","ae635498":"model_opt_fit.get_forecast(len(test_data))","a46814cf":"# ARIMA\uc640 \ucf54\ub4dc\uac00 \uc0b4\uc9dd \ub2e4\ub984(forcast \ub300\uc2e0 get_forcast)\nprediction = model_opt_fit.get_forecast(len(test_data))\npredicted_value = prediction.predicted_mean\npredicted_ub = prediction.conf_int().iloc[:,0]\npredicted_lb = prediction.conf_int().iloc[:,1]\npredict_index = list(test_data.index)\nr2 = r2_score(test_data, predicted_value)","29beface":"fig, ax= plt.subplots(figsize=(12,6))\nax.plot(data.index, data)\nax.vlines(pd.to_datetime('1958-08-01'), 0,700, linestyle ='--', color='r',\n         label = 'Start of  Forcast')\nax.plot(predict_index, predicted_value, label='prediction')\nax.fill_between(predict_index, predicted_lb, predicted_ub, color='k',\n               alpha= 0.1, label='0.95 prediction interval')\nax.legend(loc='upper left')\nplt.suptitle(f'SARIMA {optimal[0][0][0], optimal[0][0][1]} prediction results (r2score: {round(r2,2)})')\nplt.show()\n             ","76a21eaf":"# Parameter search\n# trace \ub294 \uacb0\uacfc\uac12\uc744 print \ud574\uc8fc\ub294 \uc778\uc790\n# \uc774\uc804\uc5d0\ub294 AIC\uac00 \uac00\uc7a5 \uc791\uc740 \uacbd\uc6b0\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ub2e4\uc2dc \ub123\uc5b4\uc11c \ud53c\ud305\ud588\ub294\ub370\n# auto_arima \ub294 \uc790\ub3d9\uc73c\ub85c \uac00\uc7a5 \uc801\ud569\ud55c \ud30c\ub77c\ubbf8\ud130\ub97c \ud559\uc2b5\uc2dc\ud0b4\n\nauto_arima_model = auto_arima(train_data, start_p=1, start_q=1, \n                             max_p = 3, max_q = 3, m=12, seasonal=True,\n                             d=1, D=1, max_P=3, max_Q = 3,\n                             trace=True,\n                             error_action = 'ignore',\n                             suppress_warnings = True,\n                             stepwise=False)","457f33ae":"auto_arima_model.summary()","bf72ea74":"# predict\ub97c \uc4f4\ub2e4.\nprediction = auto_arima_model.predict(len(test_data), return_conf_int=True)\nprint(prediction)","8350eec7":"predicted_value = prediction[0]\npredicted_ub = prediction[1][:,0]\npredicted_lb = prediction[1][:,1]\npredicted_index = list(test_data.index)\nr2 = r2_score(test_data, predicted_value)","a6e64774":"fig, ax = plt.subplots(figsize= (12,6))\nax.plot(data.index, data)\nax.vlines(pd.to_datetime('1958-08-01'), 0, 700, linestyle='--',\n         color='r', label='Start of Forecast')\nax.plot(predicted_index, predicted_value, label='Prediction')\nax.fill_between(predicted_index, predicted_ub, predicted_lb,\n               color='k', alpha=1, label='interval')\nax.legend(loc='upper left')\nplt.suptitle(f'SARIMA({auto_arima_model.order, auto_arima_model.seasonal_order}) prediction results: {round(r2,2)}(r2 score)' )","cf9c3e55":"# \uc77c\ub2e8 \uae30\uc5c5\uba85\uc744 \ub123\uc5c8\uc744 \ub54c, \uc885\ubaa9\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc790\n# query \uc5d0 \uc870\uac74\uc744 \ub123\uc73c\uba74 \n\ndef get_code(df, corp):\n    code=df.query(\"name=='{}'\".format(corp))['code'].to_string(index=False)\n    code=code.strip()\n    return code","46e9a348":"raw_data = pd.read_html('http:\/\/kind.krx.co.kr\/corpgeneral\/corpList.do?method=download&searchType=13', header=0)[0]\nraw_data","85055a2d":"code_data1 = raw_data[['\ud68c\uc0ac\uba85','\uc885\ubaa9\ucf54\ub4dc']]\ncode_data = code_data1.rename(columns={'\ud68c\uc0ac\uba85':'name', '\uc885\ubaa9\ucf54\ub4dc':'code'})\n# \uc885\ubaa9\ucf54\ub4dc\ub97c 6\uc790\ub9ac\ub85c \ud1b5\uc77c\ncode_data.code = code_data.code.map('{:06d}'.format)","a4819b02":"code_data","03195d3b":"code_data[code_data.name == 'LG\uc774\ub178\ud14d']","f5a6a388":"stock_code = get_code(code_data,'LG\uc774\ub178\ud14d')\nstock_code = stock_code + '.KS'\nstock_data = pdr.get_data_yahoo(stock_code)\nstock_data","7b44cec5":"stock_data = stock_data[['Close']]\n# \uc774\ub7f0 \uc2dd\uc73c\ub85c\ub3c4 plot\uadf8\ub9ac\uae30 \uac00\ub2a5\nfig = stock_data.plot()","72a38acd":"stock_data.values","3a7349ca":"# Y label\uc774 \uc5c6\uc73c\ubbc0\ub85c 2\uac1c\ub85c\ub9cc \ub098\ub268\n# shuffle = False \ud574\uc918\uc57c \uc2dc\uacc4\uc5f4\uc758 \ub4b7\ubd80\ubd84\ub9cc \ub530\ub85c test set\uc73c\ub85c \ube60\uc9d0\nfrom sklearn.model_selection import train_test_split\nstock_data_train, stock_data_test = train_test_split(stock_data,\n                                                    test_size=0.2,\n                                                    shuffle=False)\n","2f2fd226":"fig, ax = plt.subplots(1,2,figsize=(12,6))\nfig.suptitle('Raw data')\n# \uc778\uc790\ub85c ndarray \ub97c \ub123\uc5b4\uc57c\ud574\uc11c \uadf8\ub7f0\uac00\ubd04\nsm.graphics.tsa.plot_acf(stock_data_train.values.squeeze(), lags=40,\n                        ax= ax[0])\nsm.graphics.tsa.plot_pacf(stock_data_train.values.squeeze(), lags=40,\n                         ax= ax[1])\n","19f398c0":"diff_stock_data_train = stock_data_train.copy()\ndiff_stock_data_train = diff_stock_data_train.diff()\ndiff_stock_data_train = diff_stock_data_train.dropna()\nprint('####Raw data####')\nprint(stock_data_train)\nprint('####diffed data####')\nprint(diff_stock_data_train)","7a5de173":"fig, ax = plt.subplots(2,1, figsize=(12,8))\nax[0].plot(stock_data_train)\nax[0].legend(['Raw Data(Non-stationary)'])\nax[1].plot(diff_stock_data_train, color='r')\nax[1].legend(['Diffed Data(Stationaru)'])\nplt.show()","2a7a1c96":"fig, ax = plt.subplots(1,2, figsize=(12,6))\nfig.suptitle('Diffed')\nsm.graphics.tsa.plot_acf(diff_stock_data_train.values.squeeze(),\n                        lags =  40, ax=ax[0])\nsm.graphics.tsa.plot_pacf(diff_stock_data_train.values.squeeze(),\n                         lags=40, ax=ax[1])\n","e1cbe92f":"auto_arima_model = auto_arima(stock_data_train,start_p=1,\n                             start_q = 1,\n                             seasonal=False, d = 1,trace=True,\n                             error_action = 'ignore',\n                             suppress_warnings = True,\n                             stepwise=False)","b699e60e":"auto_arima_model.summary()","6173582f":"# return_conf_int \ub294 confidential interval\uc744 \ucd9c\ub825\ud55c\ub2e4\ub294 \uc758\ubbf8\uc778\ub4ef\npred = auto_arima_model.predict(len(stock_data_test),\n                               return_conf_int = True)\nprint(pred)","3cd63be5":"pred_value = pred[0]\npred_lb = pred[1][:,0]\npred_ub = pred[1][:,1]\npred_index = list(stock_data_test.index)\npred_index[0]\n","7201d6d4":"fig, ax = plt.subplots(figsize = (12,6))\nax.plot(stock_data.index, stock_data)\nax.vlines(pd.to_datetime('2020-01-31'), 50000, 225000,\n         linestyle = '--', color = 'r', label = 'Start of Forecast')\nax.plot(pred_index, pred_value, label = 'prediction')\nax.fill_between(pred_index, pred_lb, pred_ub, color='k', alpha = 0.1,\n               label='0.95 pred interval')\nplt.suptitle(f'ARIMA {auto_arima_model.order}, prediction results')\nplt.show()\n","fd391c55":"`.forecast`\ub294 3\uac1c\uc758 array\ub97c \ubc18\ud658\ud558\uba70\n1. \uccab\ubc88\uc9f8 array\n  - \uc810\uc608\uce21\uac12\uc744 \ubc18\ud658\n2. \ub450\ubc88\uc9f8 array\n  - \ud45c\uc900\uc624\ucc28(standard error)\ub97c \ubc18\ud658\n3. \uc138\ubc88\uc9f8 array\n  - \ub450\ubc88\uc9f8\uc5d0\uc11c \uad6c\ud55c \ud45c\uc900\uc624\ucc28\ub97c \ud1b5\ud574 prediction interval \ubc94\uc704\ub97c \ubc18\ud658. [lower bound, upper bound]\uc758 \ud615\ud0dc","9db495e5":"\ub531 \ubd10\ub3c4 trend\uc640 \uacc4\uc808\uc131(\ubb3c\uacb0\ubb34\ub2ac)\uac00 \uc788\uc5b4 **non-stationary**\ud55c \ub370\uc774\ud130\uc774\ub2e4. ","80590065":"# **3. Box-Jenkins ARIMA Procedure**\n\n- 3.1 Data Preprocessing\n- 3.2 Identify Model to be Tentatively Entertained\n- 3.3 Estimate Parameters\n- 3.4 Diagnosis Check\n- 3.5 use Model to Forecast","4298b97d":"# EOD","42b56d83":"## 3.5.1 use Model to Forcast - ARIMA","fe92b855":"\uc694\ubc88\uc5d0\ub294 p-value \uac00 \uc544\uc8fc \ub9cc\uc871\uc2a4\ub7fd\uac8c \ub098\uc634.","8f6f52b3":"ARMA \uac00 \uc801\uc808\ud574\ubcf4\uc774\ub294\ub370 \uac15\uc758\uc790\ub294 AR(p) \ub85c \uc77c\ub2e8 \ubaa8\ub378 \uc124\uc815  \n\ucf54\ub4dc\uc0c1\uc73c\ub85c\ub294 `ARIMA(1,1,0)` \uc774 \ub420 \uac83.","05a8b1ba":"**stationary** \ud558\uad6c\ub9cc\n\uc798 \ubcf4\uba74 ACF \uac00 <u>\uc18c\uba78\ud558\ub294 sin \ud568\uc218<\/u> \ucc98\ub7fc \uc0dd\uacbc\ub2e4.   \n\uc774 \uc0ac\uc2e4\ub85c \uc6b0\ub9ac\ub294 \ub300\ub7b5\uc801\uc778 \ubaa8\ub378\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4.","85bea15a":"## 3.5.3 use Model to Forecast - auto_arima","06de6beb":"## **3.2 Identify Model to be Tentatively Entertained**","c412af13":"# 4. Case Study: \uc8fc\uac00\uc608\uce21\n\n- \ub370\uc774\ud130: 5\ub144\uac04 \uc8fc\uac00 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130","063219af":"# **2. \ub370\uc774\ud130 \ub85c\ub529**","eacfa92b":"## 3.4.1 Diagnosis Check - ARIMA","58e9885d":"## 3.5.2 use Model to Forecast - SARIMA","1c0fb33e":"## **3.1 Data Preprocessing**","1dbe1ed9":"ACF\uac00 \uc810\ucc28\uc801\uc73c\ub85c \uc904\uc5b4\ub4dc\ub294 \uac83\uc73c\ub85c \ubcf4\uc544 **non-stationary** \uc774\ub2e4.","b3c67ef4":"\uacc4\uc808\uc131\uc744 \ubc18\uc601\ud558\ub2c8 \ub354 \uc88b\uc740 \ubaa8\ub378\uc774 \ub9cc\ub4e4\uc5b4\uc84c\ub124~","abbc5cb6":"|Model|ACF|PACF|\n|:---|:---:|---:|\n|MA(q)|cut off after lag q|Die out|\n|AR(p)|Die out|cut off after lag p|\n|ARMA(p,q)|Die out  (after q-p)|Die out  (after q-p)|\n\n\n`Die out` : exponentially or sin function","7b251182":"\uc5ec\uae30\uc11c ARIMA \ubaa8\ub378\uc758 \uacc4\uc218 \ubc0f \uc0c1\uc218\uac12\uc744 \uc54c \uc218 \uc788\uace0, \uadf8\uc5d0 \ub300\ud55c p-value\ub3c4 \uc54c \uc218 \uc788\ub2e4. \uc6d0\ub798 \uc5ec\uae30\uc11c\ub294 constant\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c,<br>\n`model.fit(trend = 'nc')` \ub85c \ud558\ub294 \uac83\uc774 \uc633\ub2e4.","99416718":"\uac15\uc758 \uadf8\ub300\ub85c\ud558\ub2c8\uae4c \ubb54\uac00 \uc548\ub410\ub294\ub370, \uc800\ub7f0\uc2dd\uc73c\ub85c \ud558\ub2c8\uae4c \ub418\ub124","72cf8647":"# 1. **\ubaa8\ub4c8 \ubd88\ub7ec\uc624\uae30**","94656d5f":"## 3.4.2 Diagnosis Check - SARIMA\n\n\uc9c0\uae08\uae4c\uc9c0\ub294 \uacc4\uc808\uc131\uc744 \ubc18\uc601\ud558\uc9c0 \uc54a\uc558\ub2e4. \uadf8\ub7ec\ub098 SARIMA \uc5d0\uc11c\ub294 \uacc4\uc808\uc131\uc744 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4.","4fdf296a":"## 3.4.3 Diagnosis Check - auto arima\n\n```python\nprint('Examples of parameter combinations of SARIMA...')\np = range(0,3)\nd = range(1,2)\nq = range(0,3)\ns = range(12,13)\n\npdq = list(itertools.product(p,d,q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in pdq]\nprint(pdq)\n\naic = []\nparams = []\nfor i in pdq:\n    for j in seasonal_pdq:\n        try:\n            model = SARIMAX(train_data.values, order=(i), seasonal_order=(j))\n            model_fit = model.fit()\n            print(f'SARIMA parameter : {i} {j} >> AIC: {round(model_fit.aic,2)}')\n            params.append((i,j))\n            aic.append(round(model_fit.aic,2))\n        except:\n            continue\n```\n\n \uc704 \ucf54\ub4dc\uac00 \ube44\ud6a8\uc728\uc801\uc774\ub77c\uace0 \ud558\uba74\uc11c \uc0c8\ub85c\uc6b4 \ud328\ud0a4\uc9c0\ub97c \uc18c\uac1c\ud574\uc90c(auto arima)"}}