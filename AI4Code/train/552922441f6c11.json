{"cell_type":{"84995768":"code","88ce2af0":"code","4a6fd6eb":"code","5df2b74c":"code","b0125e23":"code","91d6f56b":"code","1fd499ee":"code","4762549c":"code","6917aa12":"code","dcb8c072":"code","107fd7b0":"code","4b8560b6":"code","12ca0137":"code","00107188":"code","8b2a1e6a":"code","dc01aaa9":"code","3a2f629b":"code","5245bf8d":"code","578e7d1f":"code","0840c7ee":"code","08d98ef9":"code","5576186b":"code","1a9a42f4":"code","53c5ac60":"code","c00864f2":"code","fd31cfeb":"code","952280e6":"code","b781671a":"code","ad4ab6d7":"code","7b6730b3":"code","b54eff2e":"code","da4f7e51":"markdown"},"source":{"84995768":"# \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u043c\u0438\nimport pandas as pd\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438:\nfrom sklearn.model_selection import train_test_split\n# \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics  # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\nimport numpy as np  # \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\nfrom datetime import datetime  # \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u0442\u0430\u043c\u0438\nimport matplotlib.pyplot as plt  # \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445\nimport seaborn as sns  # \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","88ce2af0":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0411\u0414\ntask = pd.read_csv('..\/input\/sf-dst-restaurant-rating\/main_task.csv')\ntask","4a6fd6eb":"# \u0414\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0414\u0424\ntask.isna().sum()","5df2b74c":"# \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0411\u0414\ntask.info()","b0125e23":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0435\u0446\nfor column in task:\n    print(type(column))","91d6f56b":"# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u0430 \u0447\u0430\u0441\u0442\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n# \u0425 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445, \u0443 - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f (\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432)\n#X = task.drop(['Restaurant_id', 'Rating'], axis=1)\n#y = task['Rating']\n# \u041d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u0435\u0442\u043a\u043e\u0439 \"train\" \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \"test\" - \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n# \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 25% \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","1fd499ee":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n#regr = RandomForestRegressor(n_estimators=100)\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n#regr.fit(X_train, y_train)\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\n#y_pred = regr.predict(X_test)\n# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0434\u0430\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 ValueError.\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0430 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n# \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.","4762549c":"# \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443.\u0423\u0434\u0430\u043b\u0438\u043c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438\n# \u0410 \u0434\u0430\u043b\u0435\u0435 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435:\n# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u0430 \u0447\u0430\u0441\u0442\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n# \u0425 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445, \u0443 - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f (\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432)\ntask = task.fillna(0)\nX = task.drop(['Restaurant_id', 'Rating', 'City',\n              'Cuisine Style', 'Price Range', 'Reviews', 'URL_TA', 'ID_TA'], axis=1)\ny = task['Rating']\n# \u041d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u0435\u0442\u043a\u043e\u0439 \"train\" \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \"test\" - \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n# \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 25% \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","6917aa12":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nregr = RandomForestRegressor(n_estimators=100)\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nregr.fit(X_train, y_train)\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = regr.predict(X_test)","dcb8c072":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","107fd7b0":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0411\u0414\ntask = pd.read_csv('..\/input\/sf-dst-restaurant-rating\/main_task.csv')","4b8560b6":"# \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ntask['Price Range'].value_counts()","12ca0137":"# \u041a\u043e\u043b-\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nlen(task['Price Range'].value_counts())","00107188":"# \u041a\u043e\u043b-\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\nlen(task.City.value_counts())","8b2a1e6a":"# \u041a\u0443\u0445\u043d\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\ntask['Cuisine Style'] = task['Cuisine Style'].apply(\n    lambda x: str(x).replace('[', ''))\ntask['Cuisine Style'] = task['Cuisine Style'].apply(\n    lambda x: str(x).replace(']', ''))\ntask['Cuisine Style'] = task['Cuisine Style'].fillna('Unknown')\n\n\ndef data_explode(df, col):\n    df[col] = df[col].str.split(',')\n    df = df.explode(col)\n    return df\n\n\ntask['Cuisine Style'] = task['Cuisine Style'].apply(\n    lambda x: str(x).replace(\"'\", ''))\ntask['Cuisine Style'] = task['Cuisine Style'].apply(\n    lambda x: str(x).replace(\"nan\", 'Unknown'))\ntask = data_explode(task, 'Cuisine Style')\ntask['Cuisine Style'].value_counts()","dc01aaa9":"# \u041e\u0431\u0449\u0438\u0435 \u043a\u043e\u043b-\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nlen(task['Cuisine Style'].value_counts())-1","3a2f629b":"# \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\ntask_reset = task.reset_index()\ntask_reset = task_reset.iloc[:, 0:4:3]\ntask_reset = pd.get_dummies(task_reset, columns=['Cuisine Style'])\ntask_reset = task_reset.groupby(['index']).sum()\nround(task_reset.mean().sum(), 1)","5245bf8d":"# \u0431\u044b\u043b \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u0430\u043c\u044b\u0439 \u0441\u0432\u0435\u0436\u0438\u0439 \u043e\u0442\u0437\u044b\u0432\ntask['Reviews'] = task['Reviews'].str.split('],')\ntask = task.explode('Reviews')\ntask['Reviews'] = task['Reviews'].str.replace('[', '')\ntask['Reviews'] = task['Reviews'].str.replace(']', '')\nDate = task['Reviews'][1::2]\nDate = Date.str.split(',')\nDate = Date.explode('Reviews')\nDate = Date.drop_duplicates()\nDATE = []\nfor date in Date:\n    date = str(date)\n    date = pd.to_datetime(date, errors='coerce')\n    DATE.append(date)\nDate = pd.Series(DATE)\nDate.max()","578e7d1f":"# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442\u0434\u0435\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u044b \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u0440\u0430\u0437\u043c\u0435\u0449\u0451\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndifference_date = []\nDate = Date.reset_index()\nDate = Date.iloc[:, 1]\nfor index in range(2245):\n    difference_date.append(Date[index] - Date[index+1])\ndifference_date = pd.Series(difference_date)\ndifference_date.max()","0840c7ee":"# \u0414\u043e\u0431\u0430\u0432\u043b\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\ntask['Date'] = Date\ntask['Date'] = task['Date'].dt.strftime('%Y-%m-%d')\nReviews = task['Reviews'][0::2]\nReviews = Reviews.str.split(',')\nReviews = Reviews.explode('Reviews')\ntask['Reviews'] = Reviews\ntask['Differnce_date'] = difference_date","08d98ef9":"# \u0418\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0447\u0438\u0441\u043a\u0430 \u0411\u0414\ntask = task.drop_duplicates().reset_index()\ntask = task.drop(['index'], axis=1)\ntask['Number of Reviews'] = task['Number of Reviews'].fillna(0)\ntask['Price Range'] = task['Price Range'].replace(\n    to_replace={'$$ - $$$': 'average price', '$': 'small price', '$$$$': 'big price'})\ntask['URL_TA'] = task['URL_TA'].str.replace('\/', '')\ntask.isna().sum()","5576186b":"# \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0432\u044b\u0434\u0430\u044e\u0449\u0438\u0439 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nX = task.drop(['Restaurant_id', 'Rating', 'City',\n              'Cuisine Style', 'Price Range', 'Reviews', 'URL_TA', 'ID_TA', 'Date', 'Differnce_date'], axis=1)\ny = task['Rating']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","1a9a42f4":"regr = RandomForestRegressor(n_estimators=100)\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)","53c5ac60":"print('MAE:', metrics.mean_absolute_error(y_test, y_pred))","c00864f2":"# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0411\u0414\ntask","fd31cfeb":"# City \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432 dummy variables\ntask1 = pd.get_dummies(task, columns=['City'])\ntask1","952280e6":"# \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e MAE\nX = task1.drop(['Restaurant_id', 'Rating',\n                'Reviews', 'URL_TA', 'ID_TA', 'Date', 'Differnce_date', 'Price Range', 'Cuisine Style'], axis=1)\ny = task1['Rating']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","b781671a":"regr = RandomForestRegressor(n_estimators=100)\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)","ad4ab6d7":"print('MAE:', metrics.mean_absolute_error(y_test, y_pred))","7b6730b3":"# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\nplt.figure(figsize=(20,21))\nsns.heatmap(X.corr())","b54eff2e":"X.corr()","da4f7e51":"# \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0430 \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u041b\u043e\u043d\u0434\u0430\u043d\u0435.\u0413\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043e\u0441\u0442\u0438 \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u043e\u0441\u0442\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435."}}