{"cell_type":{"34def39d":"code","8c8751fd":"code","d6c6f776":"code","ba67258b":"code","c895ea35":"code","b83c28fa":"code","738ff0d3":"code","30ce798f":"code","2147bfda":"code","097af0f9":"code","279d2ef8":"code","10d9688e":"code","e59970dc":"code","9b02e7ab":"code","bca618f4":"code","dc612ffa":"code","b8216b6d":"code","dc383cbc":"code","e84f0acf":"code","73201314":"code","0802bea2":"markdown","bee17b96":"markdown","1980b0f5":"markdown","6741081a":"markdown"},"source":{"34def39d":"import pandas as pd\nimport numpy as np\nfrom functools import partial\nimport os\nimport random\nimport joblib\nimport json\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.metrics import accuracy_score\nfrom scipy.optimize import differential_evolution\n\nimport gc\nfrom functools import reduce\nfrom itertools import combinations, chain\nfrom tqdm import tqdm\nfrom sklearn.model_selection import KFold\nfrom itertools import chain\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import LabelEncoder\n","8c8751fd":"train_data = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\nTARGET_NAME = 'target'\ntrain_data[TARGET_NAME] = train_data[TARGET_NAME].str.slice(start=6).astype(int) - 1\nle = LabelEncoder()\ntrain_data[TARGET_NAME] = le.fit_transform(train_data[TARGET_NAME])\ntrain_data.head()","d6c6f776":"oof_catboost = pd.read_csv('..\/input\/tabular-may-2021-oof\/oof_catboost.csv')\noof_catboost.drop(['Class_1','Class_2','Class_3','Class_4'], axis=1, inplace=True)\n\noof_lightautoml = pd.read_csv('..\/input\/tabular-may-2021-oof\/oof_lightautoml.csv')\noof_lightautoml.drop(['Class_1','Class_2','Class_3','Class_4'], axis=1, inplace=True)\n\noof_lightgbm = pd.read_csv('..\/input\/tabular-may-2021-oof\/oof_lightgbm.csv')\noof_lightgbm.drop(['Class_1','Class_2','Class_3','Class_4'], axis=1, inplace=True)\n\noof_xgboost = pd.read_csv('..\/input\/tabular-may-2021-oof\/oof_xgboost.csv')\noof_xgboost.drop(['Class_1','Class_2','Class_3','Class_4'], axis=1, inplace=True)","ba67258b":"oof_xgboost.rename(columns={'lightgbm': 'xgboost'}, inplace=True)\noof_xgboost.head(5)","c895ea35":"oof_lightgbm.head(5)","b83c28fa":"oof_lightautoml.rename(columns={'lightgbm': 'lightautoml'}, inplace=True)\noof_lightautoml.head(5)","738ff0d3":"oof_catboost.head(5)","30ce798f":"oof_predictions_v3 = pd.concat([oof_catboost['catboost'], oof_lightautoml['lightautoml'], \n          oof_lightgbm['lightgbm'], oof_xgboost['xgboost'], train_data['target']], axis=1)\ncolumns = ['catboost', 'lightautoml', 'lightgbm', 'xgboost']","2147bfda":"oof_predictions_v3['catboost'] = oof_predictions_v3['catboost'].apply(lambda x: np.fromstring(\n                               x.replace('\\n','')\n                                .replace('[','')\n                                .replace(']','')\n                                .replace('  ',' '), sep=' '))\noof_predictions_v3['lightautoml'] = oof_predictions_v3['lightautoml'].apply(lambda x: np.fromstring(\n                               x.replace('\\n','')\n                                .replace('[','')\n                                .replace(']','')\n                                .replace('  ',' '), sep=' '))\noof_predictions_v3['lightgbm'] = oof_predictions_v3['lightgbm'].apply(lambda x: np.fromstring(\n                               x.replace('\\n','')\n                                .replace('[','')\n                                .replace(']','')\n                                .replace('  ',' '), sep=' '))\noof_predictions_v3['xgboost'] = oof_predictions_v3['xgboost'].apply(lambda x: np.fromstring(\n                               x.replace('\\n','')\n                                .replace('[','')\n                                .replace(']','')\n                                .replace('  ',' '), sep=' '))","097af0f9":"oof_predictions_v3","279d2ef8":"combined = []\nfor i in range(len(columns)):\n    combined.append(list(combinations(columns, i+1)))\n\ndef evaluate_ensemble(df, columns):\n    return df[[*columns]].apply(lambda x: np.argmax([np.sum(v) for v in zip(*[x[c] for c in columns])]), axis=1).values\n\nresults = dict()\nwith tqdm(total=len(list(chain(*combined)))) as process_bar:\n    for c in list(chain(*combined)):\n        process_bar.update(1)  \n        results[c] = accuracy_score(oof_predictions_v3.target.values, evaluate_ensemble(oof_predictions_v3, c))","10d9688e":"{k: results[k] for k in sorted(results, key=results.get, reverse=True)[0:50]}","e59970dc":"oof_predictions_v3","9b02e7ab":"considered_models = oof_predictions_v3[[\"target\",\"catboost\",\"lightautoml\",\"lightgbm\",\"xgboost\"]]","bca618f4":"kfold = KFold(n_splits=4)\n\nyhats = considered_models.iloc[:,1:].values\ny = considered_models.target.values\nn_models = yhats.shape[1]\n\naccuracy = []\nfor fold, (train_idx, test_idx) in enumerate(kfold.split(yhats, y)):\n    \n    print(f\"Iteration {fold+1}\")\n    \n    weights = np.array([1.0\/n_models for _ in range(n_models)])\n    bounds = [(0.0, 1.0) for _ in range(n_models)]\n    minimizeargs = (np.take(yhats, train_idx, axis=0), np.take(y, train_idx, axis=0))\n    \n    def calculate_accuracy(y_true, y_pred):\n        return np.average(y_true == y_pred)\n\n    def loss_func(weights, Yhat, Y):\n        w = np.mean(weights * Yhat, axis=1)\n        return 1 - calculate_accuracy(Y, list(map(lambda x: np.argmax(x), w)))\n\n    sol = differential_evolution(loss_func, bounds, minimizeargs, maxiter=20, tol=1e-5, disp=True, seed=8)\n    \n    \n    # Calculate oof accuracy of optimized weights\n    oof_accuracy = calculate_accuracy(np.take(y, test_idx, axis=0),\n                                      list(map(lambda x: np.argmax(x), np.mean(\n                                          np.take(yhats, test_idx, axis=0) * sol.x, axis=1))))\n    \n    print(f\"{oof_accuracy}\")\n    \n    accuracy.append((sol.x, oof_accuracy))","dc612ffa":"accuracy","b8216b6d":"preds_xgboost = pd.read_csv('..\/input\/tabular-may-2021-oof\/preds_xgboost.csv')\npreds_lightautoml = pd.read_csv('..\/input\/tabular-may-2021-oof\/preds_lightautoml.csv')\npreds_lightgbm = pd.read_csv('..\/input\/tabular-may-2021-oof\/preds_lightgbm.csv')\npreds_catboost = pd.read_csv('..\/input\/tabular-may-2021-oof\/preds_catboost.csv')","dc383cbc":"submit = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","e84f0acf":"submit[['Class_1','Class_2','Class_3','Class_4']] =  \\\n    0.25 * preds_lightautoml[['Class_1','Class_2','Class_3','Class_4']] + \\\n    0.25 * preds_lightgbm[['Class_1','Class_2','Class_3','Class_4']] + \\\n    0.2 * preds_catboost[['Class_1','Class_2','Class_3','Class_4']] + \\\n    0.1 * preds_xgboost[['Class_1','Class_2','Class_3','Class_4']]","73201314":"submit.to_csv('submit.csv', index=False)","0802bea2":"## Find optimal ensemble bases of oof predictions","bee17b96":"Calculate weights for each model","1980b0f5":"Check different combintaions of oof predictions and get optimal models ensemble","6741081a":"Get top 50 combinations"}}