{"cell_type":{"a782dd6f":"code","58082d5b":"code","938b3bca":"code","752333f8":"code","251bb38b":"code","df69a780":"code","ae4a0f44":"code","02328335":"code","9cb761ed":"code","44fb29ec":"code","2cd4c1fe":"code","19ce62e3":"code","f4f3f831":"code","709bf5fc":"code","b977213a":"code","0afcd22b":"code","a0c7775e":"code","d86ce3e1":"code","dc844bb3":"code","45d4fd1e":"code","290e3519":"code","be450d79":"code","9b88230a":"code","a639a5d6":"code","ae7fd325":"code","c3c7f09c":"code","3bda0e6a":"code","fe866e57":"code","4cde4157":"code","858b6134":"code","36c1e282":"code","0787d562":"code","4925a2cb":"code","c7842ffa":"code","d6b82fd1":"code","1efae680":"code","8ff55d9c":"code","0bf99ae8":"code","efe27999":"markdown","0396812f":"markdown","22879f2c":"markdown","67787c3f":"markdown","278d5c2d":"markdown","7437ba9d":"markdown","9f9bafb6":"markdown","d7f47c2e":"markdown","defe8df9":"markdown","efc1cc3f":"markdown","9d206723":"markdown","a0757529":"markdown","9e2499d6":"markdown","cf3353bd":"markdown"},"source":{"a782dd6f":"import pandas as pd\nimport numpy as np","58082d5b":"import matplotlib.pyplot as plt\nfrom IPython.display import Math, Latex\nfrom IPython.core.display import Image\nimport seaborn as sns\n\nsns.set(color_codes=True)\nsns.set(rc={'figure.figsize':(10,6)})","938b3bca":"from scipy.stats import uniform\n\nnumber = 10000\nstart = 20\nwidth = 25\n\nuniform_data = uniform.rvs(size=number, loc=start, scale=width)\naxis = sns.distplot(uniform_data, bins=100, kde=True, color='skyblue', hist_kws={\"linewidth\": 15})\naxis.set(xlabel='Uniform Distribution ', ylabel='Frequency')","752333f8":"from scipy.stats import norm\n\nnormal_data = norm.rvs(size=90000,loc=20,scale=30)\naxis = sns.distplot(normal_data, bins=100, kde=True, color='skyblue', hist_kws={\"linewidth\": 15,'alpha':0.568})\naxis.set(xlabel='Normal Distribution', ylabel='Frequency')","251bb38b":"from scipy.stats import gamma\n\ngamma_data = gamma.rvs(a=5, size=10000)\naxis = sns.distplot(gamma_data, kde=True, bins=100, color='skyblue', hist_kws={\"linewidth\": 15})\naxis.set(xlabel='Example of Gamma Distribution', ylabel='Frequency')","df69a780":"from scipy.stats import expon\n\nexpon_data = expon.rvs(scale=1,loc=0,size=1000)\naxis = sns.distplot(expon_data, kde=True, bins=100, color='skyblue', hist_kws={\"linewidth\": 15})\naxis.set(xlabel='Exponential Distribution', ylabel='Frequency')","ae4a0f44":"from scipy.stats import poisson\n\npoisson_data = poisson.rvs(mu=2, size=10000)\naxis = sns.distplot(poisson_data, bins=30, kde=False, color='red', hist_kws={\"linewidth\": 15})\naxis.set(xlabel='Poisson Distribution', ylabel='Frequency')","02328335":"from scipy.stats import binom\n\nbinomial_data = binom.rvs(n=10, p=0.8,size=10000)\n\naxis = sns.distplot(binomial_data, kde=False, color='red', hist_kws={\"linewidth\": 15})\naxis.set(xlabel='Binomial Distribution', ylabel='Frequency')\n","9cb761ed":"# loading data set as Pandas dataframe\ndf = pd.read_csv(\"..\/input\/automobile\/Automobile_data.csv\")\ndf.head()","44fb29ec":"df.dtypes","2cd4c1fe":"# Find out the number of values which are not numeric\ndf['price'].str.isnumeric().value_counts()\n\n# List out the values which are not numeric\ndf['price'].loc[df['price'].str.isnumeric() == False]\n\n#Setting the missing value to mean of price and convert the datatype to integer\nprice = df['price'].loc[df['price'] != '?']\npmean = price.astype(str).astype(int).mean()\ndf['price'] = df['price'].replace('?',pmean).astype(int)\ndf['price'].head()","19ce62e3":"# Cleaning the horsepower losses field\ndf['horsepower'].str.isnumeric().value_counts()\nhorsepower = df['horsepower'].loc[df['horsepower'] != '?']\nhpmean = horsepower.astype(str).astype(int).mean()\ndf['horsepower'] = df['horsepower'].replace('?',hpmean).astype(int)\ndf['horsepower'].head()","f4f3f831":"# Cleaning the Normalized losses field\ndf[df['normalized-losses']=='?'].count()\nnl=df['normalized-losses'].loc[df['normalized-losses'] !='?'].count()\nnmean=nl.astype(str).astype(int).mean()\ndf['normalized-losses'] = df['normalized-losses'].replace('?',nmean).astype(int)\ndf['normalized-losses'].head()","709bf5fc":"# cleaning the bore\n# Find out the number of invalid value\ndf['bore'].loc[df['bore'] == '?']\n# Replace the non-numeric value to null and convert the datatype\ndf['bore'] = pd.to_numeric(df['bore'],errors='coerce')\ndf.bore.head()","b977213a":"# Cleaning the column stoke\ndf['stroke'] = pd.to_numeric(df['stroke'],errors='coerce')\ndf['stroke'].head()","0afcd22b":"# Cleaning the column peak-rpm \ndf['peak-rpm'] = pd.to_numeric(df['peak-rpm'],errors='coerce')\ndf['peak-rpm'].head()","a0c7775e":"# Cleaning the Column num-of-doors data\n# remove the records which are having the value '?'\ndf['num-of-doors'].loc[df['num-of-doors'] == '?']\ndf= df[df['num-of-doors'] != '?']\ndf['num-of-doors'].loc[df['num-of-doors'] == '?']","d86ce3e1":"df.describe()","dc844bb3":"# get column height from df\nheight =df[\"height\"]\nprint(height)","45d4fd1e":"#calculate mean, median and mode of dat set height\nmean = height.mean()\nmedian =height.median()\nmode = height.mode()\nprint(mean , median, mode)","290e3519":"import matplotlib.pyplot as plt\n\ndf.make.value_counts().nlargest(30).plot(kind='bar', figsize=(14,8))\nplt.title(\"Number of cars by make\")\nplt.ylabel('Number of cars')\nplt.xlabel('Make of the cars');","be450d79":"#summarize categories of drive-wheels\ndrive_wheels_count =df[\"drive-wheels\"].value_counts()\nprint(drive_wheels_count)","9b88230a":"#standard variance of data set using std() function\nstd_dev =df.std()\nprint(std_dev)\n# standard variance of the specific column\nsv_height=df.loc[:,\"height\"].std()\nprint(sv_height)","a639a5d6":"# variance of data set using var() function\nvariance=df.var()\nprint(variance)\n# variance of the specific column\nvar_height=df.loc[:,\"height\"].var()\nprint(var_height)","ae7fd325":"df.loc[:,\"height\"].var()","c3c7f09c":"df.skew()","3bda0e6a":"# skewness of the specific column\ndf.loc[:,\"height\"].skew()\n","fe866e57":"# Kurtosis of data in data using skew() function\nkurtosis =df.kurt()\nprint(kurtosis)\n\n# Kurtosis of the specific column\nsk_height=df.loc[:,\"height\"].kurt()\nprint(sk_height)","4cde4157":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()\nplt.rcParams['figure.figsize'] = (10, 6)","858b6134":"# plot the relationship between \u201cengine-size\u201d and \u201dprice\u201d\nplt.scatter(df[\"price\"], df[\"engine-size\"])\nplt.title(\"Scatter Plot for engine-size vs price\")\nplt.xlabel(\"engine-size\")\nplt.ylabel(\"price\")","36c1e282":"#boxplot to visualize the distribution of \"price\" with types of \"drive-wheels\"\nsns.boxplot(x=\"drive-wheels\", y=\"price\",data=df)\n","0787d562":"type(df.price[0])","4925a2cb":"# calculating 30th percentile of heights in dataset\nheight = df[\"height\"]\npercentile = np.percentile(height, 50,)\nprint(percentile)","c7842ffa":"price = df.price.sort_values()\nQ1 = np.percentile(price, 25)\nQ2 = np.percentile(price, 50)\nQ3 = np.percentile(price, 75)\n\nIQR = Q3 - Q1\nIQR","d6b82fd1":"df[\"normalized-losses\"].describe()","1efae680":"\nscorePhysics = [34,35,35,35,35,35,36,36,37,37,37,37,37,38,38,38,39,39,\n              40,40,40,40,40,41,42,42,42,42,42,42,42,42,43,43,43,43,44,44,44,44,44,44,45,\n              45,45,45,45,46,46,46,46,46,46,47,47,47,47,47,47,48,48,48,48,48,49,49,49,49,\n              49,49,49,49,52,52,52,53,53,53,53,53,53,53,53,54,54,\n              54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,56,57,57,57,58,58,59,59,59,59,\n              59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,62,62,63,63,63,63,63,64,64,64,\n              64,64,64,64,65,65,65,66,66,67,67,68,68,68,68,68,68,68,69,70,71,71,71,72,72,\n              72,72,73,73,74,75,76,76,76,76,77,77,78,79,79,80,80,81,84,84,85,85,87,87,88]\n            \nscoreLiterature = [49,49,50,51,51,52,52,52,52,53,54,54,55,55,55,55,56,\n                 56,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,60,60,60,60,61,61,61,62,\n                 62,62,62,63,63,67,67,68,68,68,68,68,68,69,69,69,69,69,69,\n                 70,71,71,71,71,72,72,72,72,73,73,73,73,74,74,74,74,74,75,75,75,76,76,76,\n                 77,77,78,78,78,79,79,79,80,80,82,83,85,88]\n                 \nscoreComputer = [56,57,58,58,58,60,60,61,61,61,61,61,61,62,62,62,62,\n                63,63,63,63,63,64,64,64,64,65,65,66,66,67,67,67,67,67,67,67,68,68,68,69,\n                69,70,70,70,71,71,71,73,73,74,75,75,76,76,77,77,77,78,78,81,82,\n                84,89,90]\n\nscores=[scorePhysics, scoreLiterature, scoreComputer]\n","8ff55d9c":" plt.boxplot(scoreComputer, showmeans=True, whis = 99)\n","0bf99ae8":"box = plt.boxplot(scores, showmeans=True, whis=99)\n\nplt.setp(box['boxes'][0], color='blue')\nplt.setp(box['caps'][0], color='blue')\nplt.setp(box['caps'][1], color='blue')\nplt.setp(box['whiskers'][0], color='blue')\nplt.setp(box['whiskers'][1], color='blue')\n\nplt.setp(box['boxes'][1], color='red')\nplt.setp(box['caps'][2], color='red')\nplt.setp(box['caps'][3], color='red')\nplt.setp(box['whiskers'][2], color='red')\nplt.setp(box['whiskers'][3], color='red')\n\nplt.ylim([20, 95]) \nplt.grid(True, axis='y')  \nplt.title('Distribution of the scores in three subjects', fontsize=18) \nplt.ylabel('Total score in that subject')            \nplt.xticks([1,2,3], ['Physics','Literature','Computer'])\n\n\nplt.show()","efe27999":"# Quartiles\n\nIt divides the data set into four equal points. \n\nFirst quartile = 25th percentile\nSecond quartile = 50th percentile (Median)\nThird quartile = 75th percentile\n\nBased on the quartile, there is a another measure called inter-quartile range that also measures the variability in the dataset. It is defined as:\n\nIQR = Q3 - Q1\n\nIQR is not affected by the presence of outliers. \n\n\n","0396812f":"# Data Cleaning","22879f2c":"For categorical variables which has discrite values we can summarize the categorical data is by using the function value_counts(). ","67787c3f":"Let's start by computing Measure of central tendency","278d5c2d":"# Exponential distribution\nIn probability theory and statistics, the exponential distribution is the probability distribution of the time between events in a Poisson point process, i.e., a process in which events occur continuously and independently at a constant average rate.","7437ba9d":"## Import Libraries","9f9bafb6":"# Poisson Distribution\nA discrete frequency distribution which gives the probability of a number of independent events occurring in a fixed time.","d7f47c2e":"# Calculating percentiles\n\n","defe8df9":"# Gamma distribution\nIn probability theory and statistics, the gamma distribution is a two-parameter family of continuous probability distributions.","efc1cc3f":"# Uniform Distribution\nIn statistics, uniform distribution refers to a type of probability distribution in which all outcomes are equally likely. A deck of cards has within it uniform distributions because the likelihood of drawing a heart, a club, a diamond, or a spade is equally likely. A coin also has a uniform distribution because the probability of getting either heads or tails in a coin toss is the same.","9d206723":"# Normal distribution","a0757529":"# Kurtosis\n","9e2499d6":"# Measures of Dispersion","cf3353bd":"# Measure of variance"}}