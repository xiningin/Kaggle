{"cell_type":{"14507af7":"code","79338c09":"code","6ab4963a":"code","8871a07f":"code","9112ece7":"code","2d95cfb0":"code","464bbdc7":"code","af1f2645":"code","64ef234e":"code","e604bad5":"code","0d4ecfb2":"code","0347a4ca":"code","a506368a":"code","87d280dc":"code","5c0d6a78":"code","14edd9a3":"code","93eaceaf":"markdown","fa318174":"markdown","ff3b65b1":"markdown","95abbfc0":"markdown","3b6cb254":"markdown","dee8e532":"markdown"},"source":{"14507af7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import to_categorical\nfrom keras.models import Model\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\n\nfrom imgaug import augmenters\nfrom random import randint","79338c09":"train = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv\")","6ab4963a":"train.head()","8871a07f":"train.shape","9112ece7":"test.shape","2d95cfb0":"rows, cols = 28, 28\ninput_shape = (rows, cols, 1)","464bbdc7":"X = np.array(train.iloc[:, 1:])\ny = to_categorical(np.array(train.iloc[:, 0]))","af1f2645":"x_train, x_val, y_train, y_val = train_test_split(X, y, test_size = 0.3, random_state = 36)","64ef234e":"x_test = np.array(test.iloc[:, 1:])\ny_test = to_categorical(np.array(test.iloc[:, 0]))","e604bad5":"x_train = x_train.reshape(x_train.shape[0], rows, cols, 1)\nx_test = x_test.reshape(x_test.shape[0], rows, cols, 1)\nx_val = x_val.reshape(x_val.shape[0], rows, cols, 1)","0d4ecfb2":"x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_val = x_val.astype('float32')","0347a4ca":"x_train = x_train\/255\nx_test = x_test\/255\nx_val = x_val\/255","a506368a":"batch_size = 64\nepochs = 100\nnum_classes = 10\n\nimg_rows, img_cols = 28, 28\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size = (3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 input_shape = input_shape))\n\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss = categorical_crossentropy,\n              optimizer = Adam(),\n              metrics=['accuracy'])","87d280dc":"history = model.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_val, y_val))\nscore = model.evaluate(x_test, y_test, verbose=0)","5c0d6a78":"model.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=1,\n          verbose=1,\n          validation_data=(x_val, y_val))\nmodel.evaluate(x_test, y_test, verbose=0)","14edd9a3":"prediction = model.predict_classes(x_test)","93eaceaf":"<a id = '5' ><\/a>\n## Prediction and Result","fa318174":"<a id = '2' ><\/a>\n## A Quick Look on the Data","ff3b65b1":"<a id = '4' ><\/a>\n## Creating Model","95abbfc0":"<a id = '3' ><\/a>\n## Getting Data Ready","3b6cb254":"# CNN Exercise with Fashion MNIST Data\n\n1. [Importing Libraries and Stuff](#1)\n1. [A Quick Look on the Data](#2)\n1. [Getiing Data Ready](#3)\n1. [Creating Model](#4)\n1. [Prediction and Result](#5)","dee8e532":"<a id = '1' ><\/a>\n## Importing Libraries and Stuff"}}