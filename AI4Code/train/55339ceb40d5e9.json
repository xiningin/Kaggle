{"cell_type":{"b83a5778":"code","5724862a":"code","c982df17":"code","12c0aaa8":"code","933d2d7e":"code","27365a02":"code","fe8aec60":"code","0c819052":"code","88014399":"code","dd4f8c4f":"code","07d135e7":"code","8888ec97":"code","484798b1":"code","6d92e7f5":"code","1adf7ea7":"code","a8fd1de6":"code","13b00dbc":"markdown","5b12eed0":"markdown","728d5fe5":"markdown","dadf82cb":"markdown","59c16222":"markdown"},"source":{"b83a5778":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5724862a":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype","c982df17":"df = pd.read_csv('..\/input\/medium-articles-dataset\/medium_data.csv')\ndf.head(5)","12c0aaa8":"df.info()","933d2d7e":"df.describe(include = 'all')","27365a02":"df.isnull().sum()","fe8aec60":"missing_count = df.isnull().sum() # the count of missing values\nvalue_count = df.isnull().count() # the count of all values \nmissing_percentage = round(missing_count \/ value_count * 100,2) #the percentage of missing values\nmissing_df = pd.DataFrame({'count': missing_count, 'percentage': missing_percentage}) #create a dataframe\nprint(missing_df)","0c819052":"barchart = missing_df.plot.bar(y='percentage')\n\nfor index, percentage in enumerate(missing_percentage):\n    barchart.text(index, percentage, str(percentage) + '%' )","88014399":"# adding title_length\ndf['title_length'] = df['title'].apply(len)\n\n# extracting month from date\ndf['month'] = pd.to_datetime(df['date']).dt.month.apply(str)\n\n# whether the article has subtitle\ndf['with_subtitle'] = np.where(df['subtitle'].isnull(), 'Yes', 'No')","dd4f8c4f":"# populate the list of numeric attributes and categorical attributes\ndf = df.drop(['id', 'subtitle', 'title', 'url', 'date', 'image', 'responses'], axis=1)\n\nnum_list = []\ncat_list = []\n\nfor column in df:\n    if is_numeric_dtype(df[column]):\n        num_list.append(column)\n    elif is_string_dtype(df[column]):\n        cat_list.append(column)\n        \n\nprint(num_list)\nprint(cat_list)","07d135e7":"for column in df:\n    plt.figure(column, figsize = (4.9,4.9))\n    plt.title(column)\n    if is_numeric_dtype(df[column]):\n        df[column].plot(kind = 'hist')\n    elif is_string_dtype(df[column]):\n        # show only the TOP 10 value count in each categorical data\n        df[column].value_counts()[:10].plot(kind = 'bar')","8888ec97":"# correation matrix and heatmap\ncorrelation = df.corr()\nsns.heatmap(correlation, cmap = \"GnBu\", annot = True)","484798b1":"# pairplot\nsns.pairplot(df,height = 2.5)","6d92e7f5":"# grouped bar chart\nfor i in range(0, len(cat_list)):\n    primary_cat = cat_list[i]\n    for j in range(0, len(cat_list)):\n        secondary_cat = cat_list[j]\n        if secondary_cat != primary_cat:\n            plt.figure (figsize = (15,15))\n            chart = sns.countplot(\n                data = df,\n                x= primary_cat, \n                hue= secondary_cat,\n                palette = 'GnBu',\n                order=df[primary_cat].value_counts().iloc[:10].index #show only TOP10\n            )","1adf7ea7":"# pairplot with hue\nfor i in range(0, len(cat_list)):\n    hue_cat = cat_list[i]\n    sns.pairplot(df, hue = hue_cat)","a8fd1de6":"# box plot\nfor i in range(0, len(cat_list)):\n    cat = cat_list[i]\n    for j in range(0, len(num_list)):\n        num = num_list[j]\n        plt.figure (figsize = (15,15))\n        sns.boxplot( x = cat, y = num, data = df, palette = \"GnBu\")","13b00dbc":"# Missing Value\n* isnull().sum() generates pandas Series object \n* changing Series datatype into DataFrame\n","5b12eed0":"# Univariate Analysis\n\n* numeric variables: histogram\n* categorical variables: bar chart\n \n we can surely carry out some feature engineering before ","728d5fe5":"# Feature Engineering & Feature Selection\n* date -> extract year and month\n* title -> extract length\n* subtitle -> whether contains subtitle or not","dadf82cb":"# Have a Bird Eye View\n* read articles https:\/\/www.visual-design.net\/post\/semi-automated-exploratory-data-analysis-process-in-python for a comprehensive explanation\n* info() and describe ()","59c16222":"# Multivariate Analysis\n* numeric variables: correlation and pairplot\n* categorical & categorical: grouped bar chart\n* numeric & categorical: box plot and pairplot with hue"}}