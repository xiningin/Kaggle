{"cell_type":{"ef7fca0d":"code","3dc456db":"code","a5deec15":"code","79727438":"code","58da8572":"code","11df5331":"code","465ccdf4":"code","007c2d7a":"code","7ceddf57":"code","3ee2d6a6":"code","0f6b5c1a":"code","bed7fa41":"code","d12775ea":"code","5be21796":"code","10674c9b":"code","e08f5e97":"code","64d3e0f0":"code","3f1def14":"code","231761c4":"code","dfd4254c":"code","ffafd0bc":"code","dcaedbb2":"code","af4bf57b":"code","a2b0d3d8":"code","06ae5a71":"code","ad540d6b":"markdown","1cbd9162":"markdown","115deb79":"markdown","e16cac46":"markdown","7cd04a2d":"markdown","43b5fdee":"markdown","5244c415":"markdown","d36f8b35":"markdown","3390b69b":"markdown","0c018bc3":"markdown","b67495fe":"markdown","60e75397":"markdown","005066b3":"markdown","abb6d9ac":"markdown","7262fa3e":"markdown","39a44933":"markdown","39f441e7":"markdown","57ee8e1d":"markdown","4d0a6e6a":"markdown","c6cd6972":"markdown","d4b684ee":"markdown","089cc6f6":"markdown","5c567d51":"markdown","08ff1e5e":"markdown"},"source":{"ef7fca0d":"# from SRK, thanks!\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport json\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics\nimport lightgbm as lgb\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999","3dc456db":"# train.csv                     \u8bad\u7ec3\u6570\u636e\n# merchant.csv                  \u5173\u4e8e\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5546\u6237\/\u5546\u6237id\u7684\u9644\u52a0\u4fe1\u606f\n# sample_submission.csv         \u6b63\u786e\u683c\u5f0f\u7684\u793a\u4f8b\u63d0\u4ea4\u6587\u4ef6\u2014\u2014\u5305\u542b\u671f\u671b\u9884\u6d4b\u7684\u6240\u6709card_id\n# test.csv                      \u6d4b\u8bd5\u6570\u636e\n# historical_transaction.csv    \u6bcf\u4e2acard_id\u4e09\u4e2a\u6708\u5185\u7684\u5386\u53f2\u4ea4\u6613\u4fe1\u606f\n# new_merchant_transaction.csv  \u6bcf\u4e2acard_id\u4e24\u4e2a\u6708\u7684\u6570\u636e,\u5305\u542b\u5728\u5386\u53f2\u6570\u636e\u4e2d\u672a\u8bbf\u95ee\u8fc7\u7684merchant_ids\u4e0a\u7684\u6240\u6709\u8d2d\u4e70\u884c\u4e3a      ","a5deec15":"train_df = pd.read_csv(\"..\/input\/train.csv\", parse_dates=[\"first_active_month\"])   # \u5c06\u9996\u6b21\u6d3b\u52a8\u65f6\u95f4\u89e3\u6790\u4e3a\u65e5\u671f\ntest_df = pd.read_csv(\"..\/input\/test.csv\", parse_dates=[\"first_active_month\"])\nprint(\"Number of rows and columns in train set : \",train_df.shape)\nprint(\"Number of rows and columns in test set : \",test_df.shape)","79727438":"train_df.head()  # \u9996\u6b21\u6d3b\u8dc3\u65f6\u95f4 \u5361\u53f7 \u7279\u5f811 \u7279\u5f812 \u7279\u5f813 \u76ee\u6807\u503c","58da8572":"# target_col \u5206\u5e03\u56fe \n\ntarget_col = 'target'\n\nplt.figure(figsize=(8,6))\nplt.scatter(range(train_df.shape[0]), np.sort(train_df[target_col].values))   # \u7ed8\u5236\u6563\u70b9\u56fe\nplt.xlabel('index', fontsize=12)\nplt.ylabel('Loyalty Score', fontsize=12)    # \u5386\u53f2\u70b9\u51fb\u7387\nplt.show()","11df5331":"# target_col \u76f4\u65b9\u56fe\n# \u76f4\u65b9\u56fe\u8868\u793a\u901a\u8fc7\u6cbf\u6570\u636e\u8303\u56f4\u5f62\u6210\u5206\u7bb1\uff0c\u7136\u540e\u7ed8\u5236\u6761\u4ee5\u663e\u793a\u843d\u5165\u6bcf\u4e2a\u5206\u7bb1\u7684\u89c2\u6d4b\u6b21\u6570\u7684\u6570\u636e\u5206\u5e03\n\nplt.figure(figsize=(12,8))\nsns.distplot(train_df[target_col].values, bins=50, color='red')\nplt.title('Histograme of Loyalty score')\nplt.xlabel('Loyalty score', fontsize=12)       # \u5386\u53f2\u70b9\u51fb\u7387\u67f1\u72b6\u56fe\nplt.show()","465ccdf4":"(train_df[target_col]<-30).sum()","007c2d7a":"# \u8bad\u7ec3\u96c6\u6240\u6709\u9996\u6b21\u6d3b\u52a8\u65f6\u95f4\u9891\u6b21\u7edf\u8ba1\n#\u6761\u5f62\u56fe\u8868\u793a\u6570\u503c\u53d8\u91cf\u4e0e\u6bcf\u4e2a\u77e9\u5f62\u9ad8\u5ea6\u7684\u4e2d\u5fc3\u8d8b\u52bf\u7684\u4f30\u8ba1\u503c\uff0c\u5e76\u4f7f\u7528\u8bef\u5dee\u7ebf\u63d0\u4f9b\u5173\u4e8e\u8be5\u4f30\u8ba1\u503c\u9644\u8fd1\u7684\u4e0d\u786e\u5b9a\u6027\u7684\u4e00\u4e9b\u6307\u793a\n\ncnt_srs = train_df['first_active_month'].dt.date.value_counts()  # \u83b7\u53d6\u9996\u6b21\u6d3b\u52a8\u65f6\u95f4\u7684\u9891\u6b21\u7edf\u8ba1\ncnt_srs = cnt_srs.sort_index()                                   # \u6309\u9996\u6b21\u6d3b\u52a8\u65f6\u95f4\u6392\u5e8f\nplt.figure(figsize=(14,6))\nsns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8, color='green')  # \u7d22\u5f15\u4e3ax \u503c\u4e3ay\nplt.xticks(rotation='vertical')                                       # \u8bbe\u7f6e\u6807\u7b7e\u65b9\u5411\nplt.xlabel('First active month', fontsize=12)\nplt.ylabel('Number of cards', fontsize=12)\nplt.title('First active month count in train set')\nplt.show()\n\n# \u6d4b\u8bd5\u96c6\u6240\u6709\u9996\u6b21\u6d3b\u52a8\u65f6\u95f4\u9891\u6b21\u7edf\u8ba1\n\ncnt_srs = test_df['first_active_month'].dt.date.value_counts()\ncnt_srs = cnt_srs.sort_index()\nplt.figure(figsize=(14,6))\nsns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8, color='red')\nplt.xticks(rotation='vertical')\nplt.xlabel('First active month', fontsize=12)\nplt.ylabel('Number of cards', fontsize=12)\nplt.title('First active month count in train set')\nplt.show()","7ceddf57":"# \u5b83\u663e\u793a\u4e86\u5b9a\u91cf\u6570\u636e\u5728\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u5206\u7c7b\u53d8\u91cf\u7684\u591a\u4e2a\u5c42\u6b21\u4e0a\u7684\u5206\u5e03\uff0c\u8fd9\u4e9b\u5206\u5e03\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u3002\n# \u4e0d\u50cf\u7bb1\u5f62\u56fe\u4e2d\u6240\u6709\u7ed8\u56fe\u7ec4\u4ef6\u90fd\u5bf9\u5e94\u4e8e\u5b9e\u9645\u6570\u636e\u70b9\uff0c\u5c0f\u63d0\u7434\u7ed8\u56fe\u4ee5\u57fa\u7840\u5206\u5e03\u7684\u6838\u5bc6\u5ea6\u4f30\u8ba1\u4e3a\u7279\u5f81\u3002\n\n# feature 1\nplt.figure(figsize=(8, 4))\nsns.violinplot(x='feature_1', y=target_col, data=train_df)         \nplt.xticks(rotation='vertical')\nplt.xlabel('Feature_1', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title('Feature_1 distribution')     \nplt.show()\n\n# feature 2\nplt.figure(figsize=(8,4))\nsns.violinplot(x='feature_2', y=target_col, data=train_df)\nplt.xticks(rotation='vertical')\nplt.xlabel('Feature_2', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title('Feature_2 distribution')\nplt.show()\n\n# feature 3\nplt.figure(figsize=(8,4))\nsns.violinplot(x='feature_3', y=target_col,data=train_df)\nplt.xticks(rotation='vertical')\nplt.xlabel('Feature_3', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title('Feature_3 distribution')\nplt.show()","3ee2d6a6":"hist_df = pd.read_csv('..\/input\/historical_transactions.csv', parse_dates=['purchase_date'])\nhist_df.head()","0f6b5c1a":"gdf = hist_df.groupby('card_id')\ngdf = gdf['purchase_amount'].size().reset_index()\ngdf.columns = ['card_id', 'num_hist_transactions']\ntrain_df = pd.merge(train_df, gdf, on='card_id', how='left')\ntest_df = pd.merge(test_df, gdf, on='card_id', how='left')","bed7fa41":"cnt_srs = train_df.groupby(\"num_hist_transactions\")[target_col].mean()     # \u6bcf\u4e2a\u4ea4\u6613\u6570\u76ee\u6570\u76ee\u4e0b\u7684\u70b9\u51fb\u7387\u5747\u503c\ncnt_srs = cnt_srs.sort_index()\ncnt_srs = cnt_srs[:-50]\n\ndef scatter_plot(cnt_srs, color):\n    trace = go.Scatter(\n        x=cnt_srs.index[::-1],\n        y=cnt_srs.values[::-1],\n        showlegend=False,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ntrace = scatter_plot(cnt_srs, \"orange\")\nlayout = dict(\n    title='Loyalty score by Number of historical transactions',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Histtranscnt\")","d12775ea":"bins = [0, 10, 20, 30, 40, 50, 75, 100, 150, 200, 500, 10000]  # \u6307\u5b9a\u533a\u95f4\ntrain_df['binned_num_hist_transactions'] = pd.cut(train_df['num_hist_transactions'], bins)  # \u786e\u5b9a\u6bcf\u4e2a\u6570\u6240\u5728\u533a\u95f4\ncnt_srs = train_df.groupby(\"binned_num_hist_transactions\")[target_col].mean()\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"binned_num_hist_transactions\", y=target_col, data=train_df, showfliers=False)\nplt.xticks(rotation='vertical')\nplt.xlabel('binned_num_hist_transactions', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title(\"binned_num_hist_transactions distribution\")\nplt.show()","5be21796":"gdf = hist_df.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].agg(['sum', 'mean', 'std', 'min', 'max']).reset_index()\ngdf.columns = [\"card_id\", \"sum_hist_trans\", \"mean_hist_trans\", \"std_hist_trans\", \"min_hist_trans\", \"max_hist_trans\"]\ntrain_df = pd.merge(train_df, gdf, on=\"card_id\", how=\"left\")\ntest_df = pd.merge(test_df, gdf, on=\"card_id\", how=\"left\")","10674c9b":"bins = np.percentile(train_df[\"sum_hist_trans\"], range(0,101,10))             # \u5904\u4e8ep%\u4f4d\u7f6e\u7684\u503c\u79f0\u7b2cp\u767e\u5206\u4f4d\u6570\ntrain_df['binned_sum_hist_trans'] = pd.cut(train_df['sum_hist_trans'], bins)  # \u5c06train_df\u630910\u4e2a\u5206\u4f4d\u6570\u5206\u4e3a10\u4efd\uff0c\u6bcf\u4e2a\u503c\u66ff\u6362\u4e3a\u4e3a\u5176\u6240\u5728\u533a\u95f4\n#cnt_srs = train_df.groupby(\"binned_sum_hist_trans\")[target_col].mean()\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"binned_sum_hist_trans\", y=target_col, data=train_df, showfliers=False)\nplt.xticks(rotation='vertical')\nplt.xlabel('binned_sum_hist_trans', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title(\"Sum of historical transaction value (Binned) distribution\")\nplt.show()","e08f5e97":"bins = np.percentile(train_df[\"mean_hist_trans\"], range(0,101,10))\ntrain_df['binned_mean_hist_trans'] = pd.cut(train_df['mean_hist_trans'], bins)\n#cnt_srs = train_df.groupby(\"binned_mean_hist_trans\")[target_col].mean()\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"binned_mean_hist_trans\", y=target_col, data=train_df, showfliers=False)\nplt.xticks(rotation='vertical')\nplt.xlabel('Binned Mean Historical Transactions', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title(\"Mean of historical transaction value (Binned) distribution\")\nplt.show()","64d3e0f0":"new_trans_df = pd.read_csv(\"..\/input\/new_merchant_transactions.csv\", parse_dates=['purchase_date'])\nnew_trans_df.head()","3f1def14":"gdf = new_trans_df.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].size().reset_index()             # \u4ea4\u6613\u8bb0\u5f55\u6570\u91cf\ngdf.columns = [\"card_id\", \"num_merch_transactions\"]\ntrain_df = pd.merge(train_df, gdf, on=\"card_id\", how=\"left\")\ntest_df = pd.merge(test_df, gdf, on=\"card_id\", how=\"left\")","231761c4":"bins = [0, 10, 20, 30, 40, 50, 75, 10000]\ntrain_df['binned_num_merch_transactions'] = pd.cut(train_df['num_merch_transactions'], bins)\ncnt_srs = train_df.groupby(\"binned_num_merch_transactions\")[target_col].mean()\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"binned_num_merch_transactions\", y=target_col, data=train_df, showfliers=False)\nplt.xticks(rotation='vertical')\nplt.xlabel('binned_num_merch_transactions', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title(\"Number of new merchants transaction (Binned) distribution\")\nplt.show()","dfd4254c":"gdf = new_trans_df.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].agg(['sum', 'mean', 'std', 'min', 'max']).reset_index()\ngdf.columns = [\"card_id\", \"sum_merch_trans\", \"mean_merch_trans\", \"std_merch_trans\", \"min_merch_trans\", \"max_merch_trans\"]\ntrain_df = pd.merge(train_df, gdf, on=\"card_id\", how=\"left\")\ntest_df = pd.merge(test_df, gdf, on=\"card_id\", how=\"left\")","ffafd0bc":"bins = np.nanpercentile(train_df[\"sum_merch_trans\"], range(0,101,10))\ntrain_df['binned_sum_merch_trans'] = pd.cut(train_df['sum_merch_trans'], bins)\n#cnt_srs = train_df.groupby(\"binned_sum_hist_trans\")[target_col].mean()\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"binned_sum_merch_trans\", y=target_col, data=train_df, showfliers=False)\nplt.xticks(rotation='vertical')\nplt.xlabel('binned sum of new merchant transactions', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title(\"Sum of New merchants transaction value (Binned) distribution\")\nplt.show()","dcaedbb2":"bins = np.nanpercentile(train_df[\"mean_merch_trans\"], range(0,101,10))\ntrain_df['binned_mean_merch_trans'] = pd.cut(train_df['mean_merch_trans'], bins)\n#cnt_srs = train_df.groupby(\"binned_sum_hist_trans\")[target_col].mean()\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"binned_mean_merch_trans\", y=target_col, data=train_df, showfliers=False)\nplt.xticks(rotation='vertical')\nplt.xlabel('binned mean of new merchant transactions', fontsize=12)\nplt.ylabel('Loyalty score', fontsize=12)\nplt.title(\"Mean of New merchants transaction value (Binned) distribution\")\nplt.show()","af4bf57b":"train_df[\"year\"] = train_df[\"first_active_month\"].dt.year\ntest_df[\"year\"] = test_df[\"first_active_month\"].dt.year\ntrain_df[\"month\"] = train_df[\"first_active_month\"].dt.month\ntest_df[\"month\"] = test_df[\"first_active_month\"].dt.month\n\ncols_to_use = [\"feature_1\", \"feature_2\", \"feature_3\", \"year\", \"month\", \n               \"num_hist_transactions\", \"sum_hist_trans\", \"mean_hist_trans\", \"std_hist_trans\", \n               \"min_hist_trans\", \"max_hist_trans\",\n               \"num_merch_transactions\", \"sum_merch_trans\", \"mean_merch_trans\", \"std_merch_trans\",\n               \"min_merch_trans\", \"max_merch_trans\",\n              ]","a2b0d3d8":"def run_lgb(train_X, train_y, val_X, val_y, test_X):\n    params = {\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'metric': 'rmse',\n        'num_leaves': 144,\n        'learning_rate': 0.05,\n        'feature_fraction': 0.8,\n        'bagging_fraction': 0.9,\n        'bagging_seed':0,\n        'bagging_freq': 1,\n        'verbose': 1,\n        'reg_alpha':3,\n        'reg_lambda':5\n    }\n    \n    lgtrain = lgb.Dataset(train_X, label=train_y)\n    lgval = lgb.Dataset(val_X, label=val_y)\n    evals_result = {}\n    model = lgb.train(params, lgtrain, 1000, valid_sets=[lgval], early_stopping_rounds=100, verbose_eval=100, evals_result=evals_result)\n    \n    pred_test_y = model.predict(test_X, num_iteration=model.best_iteration)\n    return pred_test_y, model, evals_result","06ae5a71":"train_X = train_df[cols_to_use]\ntest_X = test_df[cols_to_use]\ntrain_y = train_df[target_col].values\n\npred_test = 0\nkf = model_selection.KFold(n_splits=5, random_state=1000, shuffle=True)\nfor dev_index, val_index in kf.split(train_df):\n    dev_X, val_X = train_X.loc[dev_index,:], train_X.loc[val_index,:]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    \n    pred_test_tmp, model, evals_result = run_lgb(dev_X, dev_y, val_X, val_y, test_X)\n    pred_test += pred_test_tmp\npred_test \/= 5.","ad540d6b":"**2\uff09\u65b0\u7684\u5386\u53f2\u4ea4\u6613\u4ef7\u503c\u5747\u503c\u3001\u603b\u6570\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u7b49**","1cbd9162":"** 1. DataSet**","115deb79":"**3. Target Column Exploration**","e16cac46":"**\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e4b\u95f4\u7684\u5206\u5e03\u57fa\u672c\u4e00\u81f4\uff0c\u6240\u4ee5\u6211\u4eec\u6682\u65f6\u4e0d\u9700\u8981\u505a\u57fa\u4e8e\u65f6\u95f4\u7684\u5206\u5272**","7cd04a2d":"**\u63a2\u7d22\u8bad\u7ec3\u96c6\u4e2d\u7684\u7279\u5f811\u30012\u30013\u662f\u5426\u6709\u826f\u597d\u70b9\u51fb\u7387\u9884\u4f30\u80fd\u529b **\n","43b5fdee":"**\u5982\u4e0a\u56fe\uff0c\u70b9\u51fb\u7387\u7684\u5206\u5e03\u4e5f\u53d7\u201c\u5386\u53f2\u4ea4\u6613\u4ef7\u503c\u5747\u503c\u201d\u7684\u5f71\u54cd**","5244c415":"**5. Feature 1 2 3**\n","d36f8b35":"**\u5c06\u5386\u53f2\u4ea4\u6613\u8bb0\u5f55\u7684\u6570\u91cf\u5206\u7bb1\uff0c\u4f5c\u65b9\u6846\u56fe\u89c2\u770b\u5206\u5e03**","3390b69b":"**\u6574\u4f53\u8d8b\u52bf\u4e0a\uff0c\u968f\u7740\u65b0\u5546\u5bb6\u4ea4\u6613\u6570\u91cf\u7684\u589e\u52a0\uff0c\u70b9\u51fb\u7387\u6709\u6240\u4e0b\u964d\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u7bb1\u5b50**","0c018bc3":"**8. \u65b0\u7684\u5386\u53f2\u4ea4\u6613\u8bb0\u5f55**","b67495fe":"**2\uff09\u5386\u53f2\u4ea4\u6613\u4ef7\u503c**\n*  \u68c0\u67e5card_id\u5bf9\u5e94\u7684\u5386\u53f2\u4ea4\u6613\u4ef7\u503c\uff0c\u5728\u6b64\u57fa\u7840\u5f97\u5230\u70b9\u51fb\u7387\u5206\u5e03","60e75397":"**2. Explore the train and test set**","005066b3":"\u5b57\u6bb5\u63cf\u8ff0\u5982\u4e0b\uff1a\n\n1. card_id:                           \u6807\u8bc6\u540d\n1. month_lag:                      \u5230\u53c2\u8003\u65e5\u671f\u7684\u6708\u4efd\u5ef6\u8fdf\n1. purchase_date:               \u8d2d\u4e70\u65f6\u95f4\n1. authorized_flag:             \u6388\u6743\u6807\u5fd7 Y\u8868\u793a\u540c\u610f N\u8868\u793a\u62d2\u7edd\n1. category_3:                     \u533f\u540d\u7684\u7c7b\u522b\n1. installments:                  \u5206\u671f\u4ed8\u6b3e\u8d2d\u4e70\u7684\u6570\u91cf\n1. category_1:                      \u533f\u540d\u7684\u7c7b\u522b\n1. merchant_category_id:  \u5546\u6237\u7c7b\u522b\u6807\u8bc6\u540d\uff08\u533f\u540d\uff09\n1. subsector_id:                  \u5546\u6237\u7c7b\u522b\u7ec4\u6807\u8bc6\u540d\uff08\u533f\u540d\uff09\n1. merchant_id:                  \u5546\u6237\u6807\u8bc6\u540d\n1. purchase_amount:         \u5f52\u4e00\u5316\u7684\u8d2d\u4e70\u91d1\u989d\n1. city_id:                             \u57ce\u5e02\u6807\u8bc6\u540d\n1. state_id:                          \u72b6\u6001\u6807\u8bc6\u540d\uff08\u533f\u540d\uff09\n1. category_2:                     \u533f\u540d\u7684\u7c7b\u522b\n   ","abb6d9ac":"**1\uff09 \u65b0\u7684\u5386\u53f2\u4ea4\u6613\u6570\u76ee**","7262fa3e":"**\u6574\u4f53\u8d8b\u52bf\u4e0a\uff0c\u968f\u7740\u65b0\u5546\u5bb6\u4ea4\u6613\u4ef7\u503c\u603b\u548c\u7684\u589e\u52a0\uff0c\u70b9\u51fb\u7387\u589e\u52a0\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u7bb1\u5b50**","39a44933":"**Model**","39f441e7":"**7. \u6839\u636e\u5386\u53f2\u4ea4\u6613\u6570\u636e\u6784\u9020\u7279\u5f81\u5e76\u62fc\u63a5\u5230\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u4e0a**","57ee8e1d":"**\u90e8\u5206\u771f\u5b9e\u70b9\u51fb\u7387\u8fdc\u5c0f\u4e8e\u5176\u4ed6\u503c\uff0c\u5bf9\u5176\u7edf\u8ba1**","4d0a6e6a":"**\u7531\u56fe\u53ef\u77e5\uff0c\u8fd9\u4e09\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u7c7b\u522b\u4e2d\u7684\u5206\u5e03\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u5728\u6a21\u578b\u4e2d\u627e\u5230\u4e1c\u897f**","c6cd6972":"**\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u70b9\u51fb\u7387\u4f3c\u4e4e\u968f\u7740\u201c\u5386\u53f2\u4ea4\u6613\u4ef7\u503c\u603b\u548c\u201d\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002**","d4b684ee":"**1\uff09\u6bcf\u4e2acard_id\u7684\u5386\u53f2\u4ea4\u6613\u6570\u76ee**","089cc6f6":"**4. \u89c2\u5bdf\u5173\u4e8ecard_id\u7684\u9996\u6b21\u6d3b\u52a8\u65f6\u95f4\uff0c\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2d\u7684\u5206\u5e03\u662f\u5426\u5b58\u5728\u53d8\u5316**","5c567d51":"**\u5b58\u57282207\u884c\u6570\u636e\uff08\u8bad\u7ec3\u6570\u636e1%\uff09\uff0c\u5176\u771f\u5b9e\u70b9\u51fb\u7387\u503c\u4e0e\u5176\u4ed6\u6570\u636e\u5dee\u5f02\u6781\u5927\u3002\u7531\u4e8e\u5ea6\u91cfRMSE\uff0c\u6240\u4ee5\u8fd9\u4e9b\u884c\u53ef\u80fd\u6781\u4e3a\u91cd\u8981**","08ff1e5e":"**6. \u5386\u53f2\u4ea4\u6613\u6570\u636e**"}}