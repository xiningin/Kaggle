{"cell_type":{"399c4de2":"code","e9cf485b":"code","c9a61d50":"code","694dcd0c":"code","8d33cc94":"code","ff43d02e":"code","61d93e2b":"code","0beddd5b":"code","2ce1bc94":"code","db65b88d":"code","6dd9e460":"code","15fdfc7d":"code","44501a4b":"code","8cb091fd":"code","269839e9":"markdown"},"source":{"399c4de2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e9cf485b":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split","c9a61d50":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndf2 = pd.get_dummies(df)\n\ndf3 = df2.sample(frac=0.08)\n\nX = df3.iloc[:,2:]\ny = df3.iloc[:,1]\n\n\npca = PCA(n_components=2).fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(pca, y, random_state=0)\n\n\nplt.figure(dpi=120)\nplt.scatter(pca[y.values==0,0], pca[y.values==0,1], alpha=0.5, label='Edible', s=2)\nplt.scatter(pca[y.values==1,0], pca[y.values==1,1], alpha=0.5, label='Poisonous', s=2)\nplt.legend()\nplt.title('Mushroom Data Set\\nFirst Two Principal Components')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.gca().set_aspect('equal')","694dcd0c":"def plot_mushroom_boundary(X, y, fitted_model):\n\n    plt.figure(figsize=(9.8,5), dpi=100)\n    \n    for i, plot_type in enumerate(['Decision Boundary', 'Decision Probabilities']):\n        plt.subplot(1,2,i+1)\n\n        mesh_step_size = 0.01  # step size in the mesh\n        x_min, x_max = X[:, 0].min() - .1, X[:, 0].max() + .1\n        y_min, y_max = X[:, 1].min() - .1, X[:, 1].max() + .1\n        xx, yy = np.meshgrid(np.arange(x_min, x_max, mesh_step_size), np.arange(y_min, y_max, mesh_step_size))\n        if i == 0:\n            Z = fitted_model.predict(np.c_[xx.ravel(), yy.ravel()])\n        else:\n            try:\n                Z = fitted_model.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:,1]\n            except:\n                plt.text(0.4, 0.5, 'Probabilities Unavailable', horizontalalignment='center',\n                     verticalalignment='center', transform = plt.gca().transAxes, fontsize=12)\n                plt.axis('off')\n                break\n        \n        Z = Z.reshape(xx.shape)\n        plt.scatter(X[y.values==0,0], X[y.values==0,1], alpha=0.4, label='Edible', s=5)\n        plt.scatter(X[y.values==1,0], X[y.values==1,1], alpha=0.4, label='Posionous', s=5)\n        plt.imshow(Z, interpolation='nearest', cmap='RdYlBu_r', alpha=0.15, \n                   extent=(x_min, x_max, y_min, y_max), origin='lower')\n        plt.title(plot_type + '\\n' + \n                  str(fitted_model).split('(')[0]+ ' Test Accuracy: ' + str(np.round(fitted_model.score(X, y), 5)))\n        plt.gca().set_aspect('equal');\n        \n    plt.tight_layout()\n    plt.subplots_adjust(top=0.9, bottom=0.08, wspace=0.02)","8d33cc94":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","ff43d02e":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors=20)\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","61d93e2b":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(max_depth=3)\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","0beddd5b":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","2ce1bc94":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","db65b88d":"from sklearn.svm import SVC\n\nmodel = SVC(kernel='linear')\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","6dd9e460":"from sklearn.svm import SVC\n\nmodel = SVC(kernel='rbf', C=1)\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","15fdfc7d":"from sklearn.svm import SVC\n\nmodel = SVC(kernel='rbf', C=10)\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","44501a4b":"from sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","8cb091fd":"from sklearn.neural_network import MLPClassifier\n\nmodel = MLPClassifier()\nmodel.fit(X_train,y_train)\n\nplot_mushroom_boundary(X_test, y_test, model)","269839e9":"# Classifier Visualization Playground"}}