{"cell_type":{"817b697a":"code","248c1995":"code","cd142788":"code","4a65be72":"code","2cc3adbf":"code","28f119c8":"code","1fbbbde0":"code","c1dd0d76":"code","382c8bb9":"code","e4aea8a3":"code","be660bef":"code","87e1b163":"code","d69bab8a":"code","b16449f2":"code","e4cc0494":"code","1adc0bdf":"code","9ddb6feb":"code","54e633bf":"code","c958ddee":"code","2401d446":"code","75060475":"markdown","f1d5bdc9":"markdown","90076a66":"markdown","5629733b":"markdown","d6db9ef4":"markdown","e953894d":"markdown","f36595de":"markdown","6c1d0b7a":"markdown","4c98642e":"markdown","a992db46":"markdown","3c7fc96b":"markdown","32335d21":"markdown","4e431671":"markdown","2906da23":"markdown","828a224d":"markdown"},"source":{"817b697a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Start by importing the bq_helper module and calling on the specific active_project and dataset_name for the BigQuery dataset.\nimport bq_helper\nfrom bq_helper import BigQueryHelper\n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\n\ndataset = bq_helper.BigQueryHelper(active_project=\"patents-public-data\",\n                                   dataset_name=\"ebi_chembl\")","248c1995":"query1 = \"\"\" SELECT bei, molregno, tid\n            FROM \n                `patents-public-data.ebi_chembl.ligand_eff_23`\n                    INNER JOIN\n                `patents-public-data.ebi_chembl.activities_23`\n                    USING (`activity_id`)\n                    INNER JOIN\n                `patents-public-data.ebi_chembl.assays_23`\n                    USING (`assay_id`)\n                    INNER JOIN\n                `patents-public-data.ebi_chembl.target_dictionary_23`\n                    USING (`tid`)\n                    INNER JOIN\n                `patents-public-data.ebi_chembl.target_type_23`\n                    USING (`target_type`)\n            WHERE bei IS NOT NULL AND parent_type = 'PROTEIN'\n            \"\"\"\ndataset.estimate_query_size(query1)","cd142788":"main = dataset.query_to_pandas_safe(query1)\ndel query1\nmain","4a65be72":"query2 = \"\"\" SELECT *\n            FROM \n                `patents-public-data.ebi_chembl.compound_properties_23`\n            \"\"\"\ndataset.estimate_query_size(query2)","2cc3adbf":"mol = dataset.query_to_pandas_safe(query2)\ndel query2\nmol = mol.drop(columns=['mw_freebase', 'ro3_pass', 'molecular_species', 'mw_monoisotopic', 'full_molformula'])\nmol ","28f119c8":"query3 = \"\"\" SELECT tid, component_id\n            FROM \n                `patents-public-data.ebi_chembl.target_components_23`\n            \"\"\"\ndataset.estimate_query_size(query3)","1fbbbde0":"tar_comp = dataset.query_to_pandas_safe(query3)\ndel query3\ntar_comp.describe()","c1dd0d76":"query4 = \"\"\" SELECT component_id, protein_class_id\n            FROM \n                `patents-public-data.ebi_chembl.component_class_23`\n            \"\"\"\ndataset.estimate_query_size(query4)","382c8bb9":"comp_class = dataset.query_to_pandas_safe(query4)\ndel query4\ncomp_class.describe() ","e4aea8a3":"query5 = \"\"\" SELECT tid, target_type\n            FROM \n                `patents-public-data.ebi_chembl.target_dictionary_23`\n            \"\"\"\ndataset.estimate_query_size(query5)","be660bef":"tar = dataset.query_to_pandas_safe(query5)\ndel query5\ntar","87e1b163":"tar = tar.merge(tar_comp, on='tid', how='inner').merge(comp_class, on='component_id', how = 'inner').drop(columns='component_id').drop_duplicates()\ndel tar_comp, comp_class\ntar.describe()","d69bab8a":"test = tar.groupby('tid')['protein_class_id'].apply(list) # \u0422\u0430\u043a \u043a\u0430\u043a \u043e\u0434\u0438\u043d \u0431\u0435\u043b\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442\u044c \u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c, \u0442\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\ntar = tar.drop(columns='protein_class_id')\nresult = main.merge(mol, on='molregno', how='inner')\nresult = result.merge(tar, on='tid', how='inner')\nresult = result.merge(test.to_frame(), on='tid', how='inner')\nresult = result.dropna() # \u0418\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u0441\u044f \u043e\u0442 \u0441\u0442\u0440\u043e\u043a \u0441 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \ndel test, tar, main, mol\nresult","b16449f2":"from sklearn.preprocessing import MultiLabelBinarizer\ns = result['protein_class_id']\nmlb = MultiLabelBinarizer()\nclasses = pd.DataFrame(mlb.fit_transform(s),columns=mlb.classes_, index=result.index)\ndel s, mlb\nclasses","e4cc0494":"result = result.join(classes).drop(columns=['molregno', 'tid', 'protein_class_id'])\ndel classes\nresult","1adc0bdf":"result = pd.get_dummies(result, columns=['target_type']) # One-hot-encoding\nresult = result.apply(pd.to_numeric) # \u0412\u0441\u0435 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b\u0438 object)\nresult.bei.describe()","9ddb6feb":"Y = result.bei\nX = result.drop(columns=['bei'])\ndel result\nfrom sklearn.model_selection import train_test_split\nX_temp, X_test, Y_temp, Y_test =  train_test_split(X,Y,test_size = 0.15, random_state = 6)\nX_train, X_val, Y_train, Y_val = train_test_split(X_temp, Y_temp, test_size = 0.2, random_state = 7)\ndel X, Y, X_temp, Y_temp","54e633bf":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=2000, learning_rate=0.3, tree_method='gpu_hist')\nmy_model.fit(X_train, Y_train, early_stopping_rounds=5, \n             eval_set=[(X_val, Y_val)], eval_metric = 'rmse', verbose = True)","c958ddee":"from xgboost import plot_importance\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(20, 10))\nplot_importance(my_model, ax=ax, max_num_features=10)","2401d446":"from sklearn.metrics import mean_absolute_error\nY_pred = my_model.predict(X_test)\nmean_absolute_error(Y_test, Y_pred)","75060475":"### \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 ID \u043c\u043e\u043b\u0435\u043a\u0443\u043b, \u0431\u0435\u043b\u043a\u043e\u0432 \u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439","f1d5bdc9":"### \u0418\u0437 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 10 \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 features","90076a66":"###  \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0431\u0435\u043b\u043a\u0438","5629733b":"### \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043b\u0430\u0441\u0441\u0430\u0445 \u0431\u0435\u043b\u043a\u043e\u0432 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0432\u0438\u0434 (\u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u044f\u0435\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u043d\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u044e\u0442\u0441\u044f)","d6db9ef4":"### \u0421\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443","e953894d":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u043e\u0439","f36595de":"### \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u043c\u043e\u043b\u0435\u043a\u0443\u043b \u043f\u043e \u0438\u0445 ID","6c1d0b7a":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","4c98642e":"### \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0442\u0438\u043f\u043e\u0432 \u0446\u0435\u043b\u0435\u0439 (\u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u0438\u0434\u044b \u0431\u0435\u043b\u043a\u043e\u0432)","a992db46":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","3c7fc96b":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 XGBoost","32335d21":"### \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0435\u043b\u043a\u0430\u0445","4e431671":"### \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0431\u0435\u043b\u043a\u0438, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u044e\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","2906da23":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","828a224d":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 train, evaluation, test (70:15:15)"}}