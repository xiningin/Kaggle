{"cell_type":{"e561021d":"code","3f321f5b":"code","172c2831":"code","0578b11d":"code","22f55368":"code","2f1df4e7":"code","dcb6f28e":"code","e1f2f98d":"code","0b1c5e94":"code","e7930ae6":"markdown","b69bcfab":"markdown","97bbec4e":"markdown","ec65e36d":"markdown","bac7ce96":"markdown","d13575c6":"markdown","4fcb09a4":"markdown","a49a386f":"markdown","87536078":"markdown","bc32e01b":"markdown"},"source":{"e561021d":"import keras\nimport pandas as pd\n\n# Load the data\ndf = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")","3f321f5b":"import numpy as np\nfrom keras.utils import to_categorical\n\ny_train = df[\"label\"]\ny_train = to_categorical(y_train)\n\nX_train = df.drop(\"label\", axis=1)\nX_train = np.array(X_train).reshape(-1, 28, 28)\n\nprint(y_train.shape)\nprint(X_train.shape)","172c2831":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\n\ni = 6541\n\nplt.imshow(X_train[i])\nplt.show()\nprint(y_train[i])","0578b11d":"from keras.preprocessing.image import ImageDataGenerator\n\ngen = ImageDataGenerator(width_shift_range=3, height_shift_range=3)\nX_train_reshaped = X_train.reshape(-1, 28, 28,1)\ngen.fit(X_train_reshaped)\n\n# Print one shifted digit\nfor batch in gen.flow(X_train_reshaped, y_train, shuffle=True):\n    first_image = batch[0][0]\n    plt.imshow(first_image.reshape(-1, 28, 28)[0])\n    plt.show()\n    break\n\nX_train_shifted = gen.flow(X_train.reshape(-1, 28, 28,1), y_train, shuffle=True)","22f55368":"import math\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPool2D, Dropout\nfrom keras.optimizers import RMSprop\nfrom keras.callbacks import EarlyStopping\n\nearly_stopping_monitor = EarlyStopping(patience=10, monitor=\"loss\")\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), input_shape=(28, 28, 1), activation=\"relu\", padding=\"same\"))\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", padding=\"same\"))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation=\"relu\", padding=\"same\"))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation=\"relu\", padding=\"same\"))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation=\"relu\", padding=\"same\"))\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation=\"relu\", padding=\"same\"))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(128, activation=\"relu\"))\n\nmodel.add(Dense(10, activation=\"sigmoid\"))\n\nmodel.compile(optimizer=RMSprop(lr=0.0001), loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nmodel.fit(\n    X_train.reshape(-1, 28, 28, 1),\n    y_train,\n    epochs=9999,\n    batch_size=1000,\n    callbacks=early_stopping_monitor\n)","2f1df4e7":"res_train = model.evaluate(X_train.reshape(-1, 28, 28, 1), y_train)\nfor i in range(0, len(res_train)):\n    print(model.metrics_names[i] + \": \" + str(res_train[i]))","dcb6f28e":"df = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ndf.shape","e1f2f98d":"X_test = np.array(df).reshape(-1, 28, 28)\nres = model.predict_classes(X_test.reshape(-1, 28, 28, 1))\nres.shape","0b1c5e94":"res_df = pd.DataFrame(res, index=range(1, 28001), columns=[\"Label\"])\nres_df.index.name=\"ImageId\"\nprint(res_df)\nres_df.to_csv(\"result.csv\")","e7930ae6":"Just for interest: take a look at a random input value and check the assigned label.","b69bcfab":"# Simple CNN for MNIST Digit Recognizing\n\nIt's just my first notebook on Kaggle... creating a CNN for classifying the MNIST digit number set (like it's probably done by many other kagglers)","97bbec4e":"## Load train data.","ec65e36d":"The resulting image look like a \"7\" what is also indicated by our label array.\n\n### Image shifting.\n\nWe create some addtional training data, through shifting our already observed data.","bac7ce96":"## Prepare data.\nFirst let's split the dataframe in predictors and labels. Also get dummy variables for each of the 0-9 label values. Reformat the training set in 28x28 matrices in order to use them as predictors for our CNN.","d13575c6":"Everything looks nice... finally let's create our test data, use our CNN to predict digits and turn the result into the correct format.","4fcb09a4":"Let's check the accuracy on our whole training set.","a49a386f":"Store result in a dataframe and write output to a .csv","87536078":"Create test dataframe and show shape.","bc32e01b":"Now, create, compile and train our CNN."}}