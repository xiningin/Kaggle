{"cell_type":{"9b062e85":"code","23afe7eb":"code","72bff828":"code","8ca19f35":"code","bfddc42a":"code","7dad1367":"code","85400045":"code","ce0bf456":"code","a98df28e":"code","ebba9351":"code","f5e4f667":"code","fe154470":"code","80f7bbb2":"code","fa3d346d":"code","4f8c45b5":"code","424a0120":"code","f9247611":"code","5ab633c6":"code","7b1a21a0":"code","28b1a2d6":"code","be6d5e12":"markdown","a458c757":"markdown","ce0176f8":"markdown","0e1509d2":"markdown","f6a80601":"markdown","e68ecc25":"markdown","7fef9ac8":"markdown","cecf881b":"markdown","4f273648":"markdown","3e632f0d":"markdown","4bd2824b":"markdown","da8527e7":"markdown","d12a680a":"markdown","134d2199":"markdown","4d19c114":"markdown","2504c79c":"markdown","7615d6e7":"markdown","9448970d":"markdown","6f562948":"markdown","ab2ff72d":"markdown","6a0e95ce":"markdown","af93f3be":"markdown"},"source":{"9b062e85":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\n\nimport warnings\nwarnings.filterwarnings('ignore')","23afe7eb":"from tensorflow.compat.v1 import ConfigProto\nfrom tensorflow.compat.v1 import InteractiveSession\n\nconfig = ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.6\nconfig.gpu_options.allow_growth = True\nsession = InteractiveSession(config=config)","72bff828":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rescale=1.\/255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n\ntraining_set = datagen.flow_from_directory(\n        \"..\/input\/cat-and-dog\/training_set\/training_set\/\",\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode=\"binary\"\n      )\n","8ca19f35":"datagen1 = ImageDataGenerator(rescale=1.\/255)\n\ntest_set = datagen1.flow_from_directory(\n        \"..\/input\/cat-and-dog\/test_set\/test_set\",\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode=\"binary\"\n      )","bfddc42a":"from tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import Dense","7dad1367":"from tensorflow.keras.regularizers import l2","85400045":"cnn = tf.keras.models.Sequential()","ce0bf456":"cnn.add(tf.keras.layers.Conv2D(filters=32,padding=\"same\",kernel_size=3, activation='relu', strides=2, input_shape=[64, 64, 3]))","a98df28e":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","ebba9351":"cnn.add(tf.keras.layers.Conv2D(filters=32,padding='same',kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","f5e4f667":"cnn.add(tf.keras.layers.Flatten())","fe154470":"cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","80f7bbb2":"cnn.add(Dense(1, kernel_regularizer=tf.keras.regularizers.l2(0.01),activation\n             ='linear'))","fa3d346d":"cnn.summary()","4f8c45b5":"cnn.compile(optimizer = 'adam', loss = 'hinge', metrics = ['accuracy'])","424a0120":"r=cnn.fit(x = training_set, validation_data = test_set, epochs = 15)","f9247611":"# plot the loss\nimport matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()","5ab633c6":"from tensorflow.keras.models import load_model\n\ncnn.save('.\/model_rcat_dog.h5')","7b1a21a0":"from tensorflow.keras.preprocessing import image\ntest_image = image.load_img('..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.1023.jpg', target_size = (64,64))\ntest_image = image.img_to_array(test_image)\ntest_image=test_image\/255\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)","28b1a2d6":"if result[0]<0:\n    print(\"The image classified is cat\")\nelse:\n    print(\"The image classified is dog\")","be6d5e12":"### Taking the sample image converting the image to an array and predicting the result","a458c757":"## Importing the Usefull Modules","ce0176f8":"### Step 5 - Output Layer","0e1509d2":"# Introduction \n\n![](https:\/\/miro.medium.com\/max\/1400\/1*oB3S5yHHhvougJkPXuc8og.gif)\n\n## What is Image classification?\nImage classification is the process of categorizing and labeling groups of pixels or vectors within an image based on specific rules. The categorization law can be devised using one or more spectral or textural characteristics.\n\n##  Different image classification techniques:\n![](https:\/\/raw.githubusercontent.com\/everydaycodings\/files-for-multiplethings\/master\/1.png)","f6a80601":"### When to use a Sequential model\n\nA Sequential model is appropriate for a plain stack of layers where each layer has exactly one input tensor and one output tensor.\n\nA Sequential model is **not appropriate** when:\n- Your model has multiple inputs or multiple outputs\n- Any of your layers has multiple inputs or multiple outputs\n- You need to do layer sharing\n- You want non-linear topology (e.g. a residual connection, a multi-branch model)\n","e68ecc25":"### Step 2 - Pooling\nDownsamples the input along its spatial dimensions (height and width) by taking the maximum value over an input window (of size defined by pool_size) for each channel of the input. The window is shifted by strides along each dimension.","7fef9ac8":"### Step 3 - Flattening\n**Flattens the input. Does not affect the batch size.**\n\n**Note:** If inputs are shaped (batch,) without a feature axis, then flattening adds an extra channel dimension and output shape is (batch, 1).","cecf881b":"## Training the CNN","4f273648":"### Preprocessing the test Data using ImageDataGenerator","3e632f0d":"### Compiling the CNN\n#### Attributes:\n- **optimizer:** String (name of optimizer) or optimizer instance.\n- **loss:** Loss function.\n- **metrics:** List of metrics to be evaluated by the model during training and testing. ","4bd2824b":"## Ploting the Train loss,val loss and train acc, val acc","da8527e7":"# Creating the Model","d12a680a":"### Importing useful models for CNN Layers","134d2199":"### Step 1 - Convolution\nThis layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs. If use_bias is True, a bias vector is created and added to the outputs. Finally, if activation is not None, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model, provide the keyword argument input_shape (tuple of integers or None, does not include the sample axis), e.g. `input_shape=(64, 64, 3)` for 64x64 RGB pictures in `data_format=\"channels_last\"`. You can use None when a dimension has variable size.\n\n**Arguments Used:**\n- **filters:** Integer, the dimensionality of the output space.\n- **padding:** one of \"valid\" or \"same\". \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left\/right or up\/down of the input such that output has the same height\/width dimension as the input.\n- **kernel_size:** An integer or tuple\/list of 2 integers, specifying the height and width of the 2D convolution window.\n- **activation:** Activation function to use. If you don't specify anything, no activation is applied.\n- **strides:** An integer or tuple\/list of 2 integers, specifying the strides of the convolution along the height and width.","4d19c114":"### Adding a second convolutional layer","2504c79c":"### Step 4 - Full Connection","7615d6e7":"### Printing out the summary of the Layers","9448970d":"# Conclusion\n## This was Just a Introduction to Image Classification. In the upcomming Noteboook i will work on more complex real world problems.","6f562948":"### Saving the trained model","ab2ff72d":"### The Code Given Below Tells to Computer that I will not be using my Entire GPU power. Just use till maximum of 60%","6a0e95ce":"### Training the CNN on the Training set and evaluating it on the Test set\n#### Attributes:\n- **x:** Input data\n- **validation_data:** Data on which to evaluate the loss and any model metrics at the end of each epoch.\n- **epochs:** Integer. Number of epochs to train the model.","af93f3be":"### Preprocessing the training Data using ImageDataGenerator\n#### One of the methods to prevent overfitting is to have more data. By this, our model will be exposed to more aspects of data and thus will generalize better. To get more data, either you manually collect data or generate data from the existing data by applying some transformations. The latter method is known as Data Augmentation.\n\n - **rescale:** rescaling factor. If None or 0, no rescaling is applied, otherwise we multiply the data by the value provided.\n - **shear_range:** This is the shear angle in the counter-clockwise direction in degrees.\n - **zoom_range:** This zooms the image.\n - **horizontal_flip:** Randomly flips the input image in the horizontal direction.\n"}}