{"cell_type":{"4c2a665f":"code","da1987ad":"code","36ad4870":"code","8bf89857":"code","7c090da2":"code","c3381248":"code","625c84e3":"code","5e398caa":"code","2237ead8":"code","4a52163a":"code","325ae138":"code","b1c88347":"code","c35642ab":"code","bce39f18":"code","96bef2c4":"code","56165da8":"code","3dd9446e":"code","8640da56":"code","ed75260d":"code","25533a3a":"code","7b0ca29f":"code","dc06778d":"code","63303e92":"code","3d69fa4e":"code","5018f1c5":"code","29890d28":"code","461ca781":"code","a538d77f":"code","74c93c11":"code","cf0c6fc5":"code","6b32409f":"code","9352549f":"code","3d9b52c0":"code","94d833b5":"code","d308cc08":"code","ad74566e":"code","0cf63016":"code","d9d038a2":"code","f419fddf":"code","7d61aab4":"code","552bfeba":"code","cd454067":"code","9c183e5c":"code","c2388123":"code","446ea790":"code","26f7f6da":"code","c6c12dd8":"code","111bc57f":"code","eb96e68c":"code","53666dd3":"code","8fe13e90":"code","8f282dee":"markdown","1ee7273a":"markdown","17a90bc2":"markdown","bc525aae":"markdown","7040df4a":"markdown","6d5307aa":"markdown","85fc616f":"markdown","fb345819":"markdown","17eb4e8f":"markdown","2f3fc422":"markdown","0d755624":"markdown","21877f61":"markdown","e0ff8d42":"markdown","9a325877":"markdown","eef82afc":"markdown","11b636d7":"markdown","fd5452e7":"markdown","252fcb6d":"markdown","d249d898":"markdown","20815941":"markdown","41af1442":"markdown","422f4b53":"markdown","0e6ef341":"markdown","af423703":"markdown","77b43137":"markdown","24b3f0df":"markdown","7690e4bc":"markdown","ab448140":"markdown","548bffb7":"markdown"},"source":{"4c2a665f":"# Import necessary libraries\nimport gpxpy.geo #Get the haversine distance\nimport math\nimport pickle\nimport os\nimport pandas as pd\nimport folium \nimport datetime #Convert to unix time\nimport time #Convert to unix time\nimport numpy as np#Do aritmetic operations on arrays\n# matplotlib: used to plot graphs\nimport matplotlib\n# matplotlib.use('nbagg') : matplotlib uses this protocall which makes plots more user intractive like zoom in and zoom out\nmatplotlib.use('nbagg')\nimport matplotlib.pylab as plt\nimport seaborn as sns#Plots\nfrom matplotlib import rcParams#Size of plots \nimport plotly as py\nimport cufflinks\nfrom tqdm import tqdm_notebook as tqdm","da1987ad":"# Reading Data\ncovid_master=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ncovid_open=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\ncovid_confirmed=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ncovid_death= pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\n","36ad4870":"covid_master.head(3)\n#data[data['ObservationDate']=='03\/04\/2020']","8bf89857":"# data columns\n#covid_master=covid_master.drop(columns=['SNo'])\ncovid_master.columns","7c090da2":"covid_master.isna().sum()","c3381248":"# We will replace Null states to a value 'NoState'\ncovid_master=covid_master.fillna('NoState')\ncovid_master.isna().sum()","625c84e3":"# changing the data type\nnum_cols=['Confirmed', 'Deaths', 'Recovered']\nfor col in num_cols:\n    temp=[int(i) for i in covid_master[col]]\n    covid_master[col]=temp","5e398caa":"covid_master.groupby(['Country\/Region','Confirmed']).sum()","2237ead8":"# Consolidating unique affected regions till date\nunique_regions=[country for country in list(set(covid_master['Country\/Region']))]","4a52163a":"# Creating list of all regions of all counntries\ntrain=covid_master\nunique_regions=train['Country\/Region'].unique()\nstates_per_regions=[]\nfor reg in tqdm(unique_regions):\n    states_per_regions.append(train[train['Country\/Region']==reg]['Province\/State'].unique()) \nprint('No of unique regions:',len(unique_regions))  ","325ae138":"# Total Confirmed cases per conutry\ntotal_confirmed=[]\nfor i in range(len(unique_regions)):\n    count=0\n    covid_temp=covid_master[covid_master['Country\/Region']==unique_regions[i]]\n    for state in states_per_regions[i]:\n        #print(state)\n        count+=covid_temp[covid_temp['Province\/State']==state].sort_values('ObservationDate').iloc[-1]['Confirmed']\n    total_confirmed.append(count)","b1c88347":"# Total Deaths cases per conutry\ntotal_deaths=[]\nfor i in range(len(unique_regions)):\n    count=0\n    covid_temp=covid_master[covid_master['Country\/Region']==unique_regions[i]]\n    for state in states_per_regions[i]:\n        #print(state)\n        count+=covid_temp[covid_temp['Province\/State']==state].sort_values('ObservationDate').iloc[-1]['Deaths']\n    total_deaths.append(count)","c35642ab":"# Total Recovered cases per conutry\ntotal_recovered=[]\nfor i in range(len(unique_regions)):\n    count=0\n    covid_temp=covid_master[covid_master['Country\/Region']==unique_regions[i]]\n    for state in states_per_regions[i]:\n        #print(state)\n        count+=covid_temp[covid_temp['Province\/State']==state].sort_values('ObservationDate').iloc[-1]['Recovered']\n    total_recovered.append(count)","bce39f18":"# We will ignore the data of 'Diamond pricess Crusie' for countrywise analysis as the data is unconfirmed\ncovid_countrywise=pd.DataFrame(columns=['country','confirmed','deaths','recovered'],index=None)\nunique_regions[53]='unconfirmed\/Diamond princes Cruise'\ntotal_confirmed[53]=0\ntotal_recovered[53]=0\ntotal_deaths[53]=0\ncovid_countrywise.country=unique_regions\ncovid_countrywise.confirmed=total_confirmed\ncovid_countrywise.deaths=total_deaths\ncovid_countrywise.recovered=total_recovered\ncovid_countrywise.to_csv('covid_countrywise.csv')\ncovid_countrywise.head()","96bef2c4":"# This function calculates number of confirmed\/death\/recovered cases before nth day\n# To calculate the number of cases on last day pass '-1', to  get data of 2 days ago pass '-2'\n# The function will return a list of case type by uniique countries\ndef num_cases_n_days_before(n,case_type,unique_regions):\n    \"\"\"\n    case_type ='Confirmed\/Deaths\/Recovered'\n    n= -1,-2 etc.\n    uniue_regions= list of all unique regions\/Countries\n    \"\"\"\n    total_cases=[]\n    for i in range(len(unique_regions)):\n        count=0\n        covid_temp=covid_master[covid_master['Country\/Region']==unique_regions[i]]\n        for state in states_per_regions[i]:\n            if(len(covid_temp[covid_temp['Province\/State']==state])>abs(n)):\n                count+=covid_temp[covid_temp['Province\/State']==state].sort_values('ObservationDate').iloc[-2]['Confirmed']\n        total_cases.append(count)\n    return total_cases","56165da8":"def get_countrywise_spike_score(unique_regions):\n    num_latest_confirmed_cases_=num_cases_n_days_before(-1,'Confirmed',unique_regions)\n    num_confirmed_cases_2_days_ago_=num_cases_n_days_before(-3,'Confirmed',unique_regions)\n    num_confirmed_cases_6_days_ago_=num_cases_n_days_before(-7,'Confirmed',unique_regions)\n    #print(num_latest_confirmed_cases)\n    num_latest_confirmed_cases=[i+1 for i in num_latest_confirmed_cases_]\n    num_confirmed_cases_2_days_ago=[i+1 for i in  num_confirmed_cases_2_days_ago_]\n    num_confirmed_cases_6_days_ago=[i+1 for i in num_confirmed_cases_6_days_ago_ ]\n    spike_scores=[]\n    for i in range(len(num_latest_confirmed_cases)):\n        spike_1=((num_latest_confirmed_cases[i]-num_confirmed_cases_2_days_ago[i])\/num_confirmed_cases_2_days_ago[i])*100\n        spike_2=((num_confirmed_cases_2_days_ago[i]-num_confirmed_cases_6_days_ago[i])\/num_confirmed_cases_6_days_ago[i])*100\n        spike_scores.append(spike_1+spike_2)\n    covid_countrywise_spike_score=pd.DataFrame(columns=['Country','Spike_score','num_latest_confirmed','confirmed_2_days_ago','confirmed_6_days_ago'],index=None)\n    covid_countrywise_spike_score.Country=unique_regions\n    covid_countrywise_spike_score.Spike_score=spike_scores\n    covid_countrywise_spike_score.num_latest_confirmed=num_latest_confirmed_cases_\n    covid_countrywise_spike_score.confirmed_2_days_ago=num_confirmed_cases_2_days_ago_\n    covid_countrywise_spike_score.confirmed_6_days_ago=num_confirmed_cases_6_days_ago_\n    return covid_countrywise_spike_score","3dd9446e":"covid_countrywise_spike_score=get_countrywise_spike_score(unique_regions)\n#covid_countrywise_spike_score.sort_values('Spike_score',ascending=False)[0:10])","8640da56":"#covid_countrywise.iloc[53]['Country']='unconfirmed\/Diamond princes Cruise'\ncovid_countrywise.sort_values('confirmed',ascending=False).head(6)","ed75260d":"covid_countrywise_top=covid_countrywise.sort_values('confirmed',ascending=False).head(6)","25533a3a":"import plotly.express as px\ndata=covid_countrywise.sort_values('confirmed',ascending=False)[0:7]\n\nfig = px.bar(data, x='country', y='confirmed',\n             hover_data=['country','confirmed'], color='confirmed',\n             labels={'pop':'Confirmed Cases'}, height=400,title='Seven worstly hit countries')\nfig.update_layout(template='plotly_dark')\nfig.show()","7b0ca29f":"# Counting total confirmed, deaths and recovered cases for rest of the world\ndata=covid_countrywise.sort_values('confirmed',ascending=False)\nrow_confirmed=0\nrow_deaths=0\nrow_recovered=0\nfor i in range(1,len(covid_countrywise)):\n    row_confirmed+=data.iloc[i]['confirmed']\n    row_deaths+=data.iloc[i]['deaths']\n    row_recovered+=data.iloc[i]['recovered']","dc06778d":"Us=[data.iloc[0]['confirmed'],data.iloc[0]['recovered'],data.iloc[0]['deaths']]\nrest_of_the_world=[row_confirmed,row_recovered,row_deaths]","63303e92":"#https:\/\/plot.ly\/python\/bar-charts\/\nimport plotly.graph_objects as go\ndata=covid_countrywise.sort_values('confirmed',ascending=False)[0:10]\ncountry=data['country']\n\nfig = go.Figure()\nfig.update_layout(template='plotly_dark')\nfig.add_trace(go.Bar(x=['US','Rest of the world'],\n                y=[Us[0],rest_of_the_world[0]],\n                name='Confirmed',\n                marker_color='rgb(102, 102, 255)'\n                ))\nfig.add_trace(go.Bar(x=['US','Rest of the world'],\n                y=[Us[1],rest_of_the_world[1]],\n                name='Recovered',\n                marker_color='rgb(0,255,153)'\n                ))\nfig.add_trace(go.Bar(x=['US','Rest of the world'],\n                y=[Us[2],rest_of_the_world[2]],\n                name='Deaths',\n                marker_color='rgb(255, 102, 102)'\n                ))\nfig.update_layout(\n    title='Confirmed\/Recovered\/Deaths in United States and Rest of the World',\n    xaxis_tickfont_size=15,\n    yaxis=dict(\n        title='count',\n        titlefont_size=12,\n        tickfont_size=15,\n       \n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.10, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.2 # gap between bars of the same location coordinate.\n)\nfig.show()","3d69fa4e":"print('The death rate in US is:',str((Us[2]\/Us[0])*100)+' %')\nprint('The rate of people already recovered in US is(till date):',str((Us[1]\/Us[0])*100)+' %')\nprint('The death rate in rest of the world is:',str((rest_of_the_world[2]\/rest_of_the_world[0])*100)+' %')\nprint('The rate of people already recovered in rest of the world is(till date):',str((rest_of_the_world[1]\/rest_of_the_world[0])*100)+' %')\nprint('The current overall death rate is:',str(((Us[2]+rest_of_the_world[2])\/(Us[0]+rest_of_the_world[0]))*100)+' %')","5018f1c5":"fig.update_layout(barmode='relative', title_text='United States vs Rest of the World Relative Stats',bargap=0.2)\nfig.show()","29890d28":"fig = px.pie(data, values='confirmed', names='country', title='Distribution of confirmed cases globally')\nfig.show()","461ca781":"#https:\/\/plot.ly\/python\/pie-charts\/\nfrom plotly.subplots import make_subplots\ndata=covid_countrywise.sort_values('confirmed',ascending=False)[0:5]\nlabels=list(data['country'])\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=list(data['confirmed']), name='country'),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=list(data['deaths']), name='country'),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Distribution of confirmed and death cases across worstly hit countries\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='confirm', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Deaths', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","a538d77f":"data=covid_countrywise.sort_values('confirmed',ascending=False)\ndeath_confirm_ratio=((data.deaths)\/(data.confirmed))*100\ndata['death_rates']=death_confirm_ratio\ndata.sort_values('death_rates',ascending=False).head(5)","74c93c11":"fig = px.bar(data.sort_values('death_rates',ascending=False).head(10), x='country', y='death_rates',\n             hover_data=['country','death_rates'], color='country',\n             labels={'pop':'Confirmed Cases'}, height=400,title='Countries with worst death rates')\nfig.update_layout(template='plotly_dark')\nfig.show()","cf0c6fc5":"data=covid_countrywise.sort_values('confirmed',ascending=False)\nrecovered_confirm_ratio=((data.recovered)\/(data.confirmed))*100\ndata['recovery_rates']=recovered_confirm_ratio\ndata.sort_values('recovery_rates',ascending=False).head(5)","6b32409f":"fig = px.bar(data.sort_values('recovery_rates',ascending=False).head(20), x='country', y='recovery_rates',\n             hover_data=['country','recovery_rates'], color='country',\n             labels={'pop':'Confirmed Cases'}, height=400,title='Countries with best recovery rates')\nfig.update_layout(template='plotly_dark')\nfig.show()","9352549f":"# Here we will calculate where the number of confirmed cases are increasing at an alarming rate\n# Spike Score = percentage increase in cases from n-6 days to n-3 days + percentage increase in cases from n-3 days to n-1 days\ncovid_countrywise_spike_score=get_countrywise_spike_score(unique_regions)\ncovid_countrywise_spike_score.sort_values('Spike_score',ascending=False).head()","3d9b52c0":"fig = px.bar(covid_countrywise_spike_score.sort_values('Spike_score',ascending=False).head(20), x='Country', y='Spike_score',\n             hover_data=['Country','Spike_score'], color='Country',\n             labels={'pop':'Confirmed Cases'}, height=400,title='Countries where spreading rate is alarming for past week')\nfig.update_layout(template='plotly_dark')\nfig.show()","94d833b5":"covid_timeseries = covid_master.groupby('ObservationDate')['Confirmed', 'Deaths', 'Recovered'].sum()\ncovid_timeseries=covid_timeseries.reset_index().sort_values('ObservationDate')\ncovid_timeseries.head()","d308cc08":"#https:\/\/plot.ly\/python\nx=[i.split('\/')[0]+'\/'+i.split('\/')[1] for i in covid_timeseries.ObservationDate ]\nfig = go.Figure()\nfig.update_layout(template='plotly_dark')\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Confirmed'],\n                         mode='lines+markers',\n                         name='Confirmed',\n                         line=dict(color='rgb(102, 102, 255)', width=2)))\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Deaths'],\n                         mode='lines+markers',\n                         name='Deaths',\n                         line=dict(color='rgb(255, 102, 102)', width=2)))\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Recovered'],\n                         mode='lines+markers',\n                         name='Recovered',\n                         line=dict(color='rgb(0,255,153)', width=2)))\nfig.update_layout(\n    title = 'Spread of COVID-19 over time',\n    xaxis_tickformat = '%d %B (%a)<br>%Y'\n)\nfig.show()","ad74566e":"covid_timeseries = covid_master.groupby(['ObservationDate','Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].sum()\ncovid_timeseries=covid_timeseries.reset_index().sort_values('ObservationDate')\ndata= covid_timeseries[covid_timeseries['Country\/Region']!='Mainland China']\ndata.head()","0cf63016":"fig=go.Figure()\nx=[i.split('\/')[1]+'\/'+i.split('\/')[0] for i in data.ObservationDate ]\ndata['ObservationDate']=x\nfig.update_layout(template='plotly_dark')\nfig = px.line(data, x=\"ObservationDate\", y=\"Confirmed\", color=\"Country\/Region\",\n              line_group=\"Country\/Region\", hover_name=\"Country\/Region\")\nfig.update_layout(template='plotly_dark',title_text='spreading of COVID-19 outside China')\nfig.show()","d9d038a2":"covid_timeseries = covid_master.groupby('ObservationDate')['Confirmed', 'Deaths', 'Recovered'].sum()\ncovid_timeseries=covid_timeseries.reset_index().sort_values('ObservationDate')\ncovid_confirmed=covid_timeseries.Confirmed\ncovid_death=covid_timeseries.Deaths\ncovid_recovered=covid_timeseries.Recovered\nNewly_reported=[covid_confirmed[0]]\nNew_deaths=[covid_death[0]]\nNew_recovered=[covid_recovered[0]]\nfor i in range(1,len(covid_confirmed)):\n    Newly_reported.append(covid_confirmed[i]-covid_confirmed[i-1])\n    New_deaths.append(covid_death[i]-covid_death[i-1])\n    New_recovered.append(covid_recovered[i]-covid_recovered[i-1])\ncovid_timeseries['Newly Confirmed']=Newly_reported \ncovid_timeseries['New Death']=New_deaths\ncovid_timeseries['New Recovered']=New_recovered\ncovid_timeseries.head()","f419fddf":"fig=go.Figure()\nx=[i.split('\/')[0]+'\/'+i.split('\/')[1] for i in covid_timeseries.ObservationDate ]\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Newly Confirmed'],\n                         mode='lines',\n                         name='New Confirmed Incident',\n                         line=dict(color='rgb(102, 102, 255)', width=2)))\nfig.add_trace(go.Scatter(x=x,y=covid_timeseries['New Death'],name='New Death Incident',\n                        mode='lines',line=dict(color='rgb(255, 102, 102)', width=2)))\n\nfig.add_trace(go.Scatter(x=x,y=covid_timeseries['New Recovered'],name='New Recovery Incident',\n             mode='lines',line=dict(color='rgb(0,255,153)', width=2)))\nfig.update_layout(\n    title = 'New Incident Reported\/Recovered\/Death per Day',\n    xaxis_tickformat = '%d %B (%a)<br>%Y',template='plotly_dark'\n)\nfig.show()","7d61aab4":"covid_country=[con.lower() for con in covid_countrywise.country]\ncovid_country[23]='china'\ncovid_countrywise.country=covid_country","552bfeba":"# Merging the COVID-19 data with world co-ordinate data to get the geo code data\ncoordinates=pd.read_csv('..\/input\/world-coordinates\/world_coordinates.csv')\ncoordinates=coordinates.rename(columns={'Country':'country'})\ncords_country=[con.lower() for con in coordinates.country]\ncoordinates.country=cords_country\nworld_data=pd.merge(covid_countrywise,coordinates,on='country')","cd454067":"# We will create a world map with circles in affected regions\n# We will choose the circle radius based on the confirmed ratio\ntotal_confirmed=sum(i for i in covid_countrywise['confirmed'])\ntotal_confirmed_countrywise=world_data.confirmed\npercentage_confirmed_per_country=(total_confirmed_countrywise\/total_confirmed)*100\nfor i in range(len(percentage_confirmed_per_country)):\n    if(percentage_confirmed_per_country[i]<5):\n        percentage_confirmed_per_country[i]=5\n    elif(percentage_confirmed_per_country[i]>5 and percentage_confirmed_per_country[i]<25):\n        percentage_confirmed_per_country[i]=10\n    elif(percentage_confirmed_per_country[i]>25 and percentage_confirmed_per_country[i]<50):\n        percentage_confirmed_per_country[i]=15\n    else:\n         percentage_confirmed_per_country[i]=20\nworld_data['radius']=percentage_confirmed_per_country","9c183e5c":"# create map and display it\n# How to create map using Folium\n#https:\/\/python-visualization.github.io\/folium\/modules.html\n# credit: https:\/\/www.kaggle.com\/parulpandey\/wuhan-coronavirus-a-geographical-analysis\/data\nworld_map = folium.Map(location=[30, 0], zoom_start=1.5,tiles='Stamen Toner')\nfor lat, lon, value, name,confirm_ratio in zip(world_data['latitude'], world_data['longitude'], world_data['confirmed'], world_data['country'],world_data['radius']):\n    folium.CircleMarker([lat, lon],\n                        radius=confirm_ratio,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='rgb(102, 102, 255)',\n                        \n                        fill_color='rgb(102, 102, 255)',\n                        fill_opacity=0.7 ).add_to(world_map)","c2388123":"world_map","446ea790":"#https:\/\/plot.ly\/python\/mixed-subplots\/\n# Initialize figure with subplots\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=(\"Plot 1\", \"Plot 2\", \"Plot 3\", \"Plot 4\"),\n    column_widths=[0.6, 0.4],\n    row_heights=[0.4, 0.6],\n    specs=[[{\"type\": \"scattergeo\", \"rowspan\": 2}, {\"type\": \"bar\"}],\n           [            None                    , {\"type\": \"bar\"}]])\n\n# Add scattergeo globe map of volcano locations\nfig.add_trace(\n    go.Scattergeo(lat=world_data[\"latitude\"],\n                  lon=world_data[\"longitude\"],\n                  mode=\"markers\",\n                  hoverinfo=\"text\",\n                  text=world_data['country'],\n                  showlegend=True,\n                  name='Effected regions',\n                  marker=dict(color=\"crimson\", size=4, opacity=0.8)),\n    row=1, col=1\n)\n\n\nx=[i.split('\/')[0]+'\/'+i.split('\/')[1] for i in covid_timeseries.ObservationDate ]\nfig.update_layout(template='plotly_dark')\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Confirmed'],\n                         mode='lines+markers',\n                         name='Confirmed',\n                         line=dict(color='rgb(102, 102, 255)', width=2)),1,2)\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Deaths'],\n                         mode='lines+markers',\n                         name='Deaths',\n                         line=dict(color='rgb(255, 102, 102)', width=2)),1,2)\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Recovered'],\n                         mode='lines+markers',\n                         name='Recovered',\n                         line=dict(color='rgb(0,255,153)', width=2)),1,2)\n\n\nfig.add_trace(go.Scatter(x=x, \n                         y=covid_timeseries['Newly Confirmed'],\n                         mode='lines',\n                         name='New Confirmed Incident',\n                         line=dict(color='rgb(102, 102, 255)', width=2)),2,2)\nfig.add_trace(go.Scatter(x=x,y=covid_timeseries['New Death'],name='New Death Incident',\n                        mode='lines',line=dict(color='rgb(255, 102, 102)', width=2)),2,2)\n\nfig.add_trace(go.Scatter(x=x,y=covid_timeseries['New Recovered'],name='New Recovery Incident',\n             mode='lines',line=dict(color='rgb(0,255,153)', width=2)),2,2)\n\n# Update geo subplot properties\nfig.update_geos(\n    projection_type=\"orthographic\",\n    landcolor=\"white\",\n    oceancolor=\"MidnightBlue\",\n    showocean=True,\n    lakecolor=\"LightBlue\"\n)\n\n\n# Rotate x-axis labels\nfig.update_xaxes(tickangle=45)\n\n# Set theme, margin, and annotation in layout\nfig.update_layout(\n    template=\"plotly_dark\",\n     title_text=\"COVID-19 World Wide Spread Quick Dashboard\",\n    margin=dict(r=10, t=25, b=40, l=60),\n    annotations=[\n        dict(\n           \n            text=\"Source:JHU\",\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0,\n            y=0)\n    ]\n)\n\nfig.show()\n","26f7f6da":"world_map_deaths = folium.Map(location=[30, 0], zoom_start=1.5,tiles='Stamen Toner')\nworld_data_deaths=world_data[world_data['deaths']>0]\ndeath_confirm_ratio=((world_data.deaths)\/(world_data.confirmed))*100\nworld_data_deaths['death_rates']=death_confirm_ratio\nfor lat, lon, value, name,rad in zip(world_data_deaths['latitude'], world_data_deaths['longitude'], world_data_deaths['deaths'], world_data_deaths['country'],world_data_deaths['death_rates']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Death Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map_deaths)","c6c12dd8":"world_map_deaths","111bc57f":"world_map_recovered = folium.Map(location=[30, 0], zoom_start=1.5,tiles='Stamen Toner')\nworld_data_totaly_recovered=world_data[world_data['confirmed']==world_data['recovered']]\nfor lat, lon, value, name in zip(world_data_totaly_recovered['latitude'], world_data_totaly_recovered['longitude'], world_data_totaly_recovered['recovered'], world_data_totaly_recovered['country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Recovered<\/strong>: ' + str(value) + '<br>'),\n                        color='green',\n                        \n                        fill_color='green',\n                        fill_opacity=0.7 ).add_to(world_map_recovered)","eb96e68c":"world_map_recovered","53666dd3":"covid_master.head()","8fe13e90":"# Run this cell to get the summary of latest status report \nfrom datetime import date\ncovid_countrywise_top\nstatus_date=covid_timeseries.iloc[-1]['ObservationDate']\ntotal_confirmed=sum(i for i in covid_countrywise['confirmed'])\ntotal_recovered=sum(i for i in covid_countrywise['recovered'])\ntotal_deaths=sum(i for i in covid_countrywise['deaths'])\nprint('------Status Report------')\nprint('Last Updated:',status_date)\nprint('Total Confirmed:',total_confirmed)\nprint('Total recovered:',total_recovered)\nprint('Total Deaths:',total_deaths)\nprint('Global Death Rate:'+ str(round((total_deaths\/total_confirmed)*100,2))+' %')\nprint('No of Confirmed cases added on last day:',(covid_timeseries.iloc[-1]['Newly Confirmed']))\nprint('No of Death cases added on last day:',(covid_timeseries.iloc[-1]['New Death']))\nprint('No of Recovered cases added on last day:',(covid_timeseries.iloc[-1]['New Recovered']))\n","8f282dee":"### Q2. What is the comparative situation between The Mostly affected Country and rest of the world?","1ee7273a":"## Analysis of the spread over regions","17a90bc2":"Checking for Null values","bc525aae":"## Covid 19 Master Data","7040df4a":"#### Original Data Source:\nhttps:\/\/github.com\/CSSEGISandData\/COVID-19","6d5307aa":"### What is COVID-19?                                                               \nCoronavirus disease 2019 (COVID-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS coronavirus 2, or SARS-CoV-2),a virus closely related to the SARS virus.The disease was discovered and named during the 2019\u201320 coronavirus outbreak.Those affected may develop a fever, dry cough, fatigue, and shortness of breath. A sore throat,runny nose or sneezing is less common. While the majority of cases result in mild symptoms,some can progress to pneumonia and multi-organ failure.","85fc616f":"### Creating country wise cumulative data","fb345819":"### Q10. Which are the regions where death cases are reported?","17eb4e8f":"### The Answers we will seek\nCOVID-19 aka 'Corona' epidemic is an exceptional situation which threats the existance of global community at large. This is the time where our skills should play a vital role for a bigger cause. In this notebook we will seek answers of 12 key questions to analyze the outbreak closely. After going through these questions, if you are interested to co-develope robust tools and solutions that than help in this fight let me know with a comment.\n1. Which countries are mostly affected by the outbreak?                                     \n2. What is the comparative situation between the Current Epicenter and rest of the world?   \n3. How the confirmed cases are distributed globally over various regions?                                        \n4. How confirmed and death cases are distributed over worstly effected countries?     \n5. In Which Countries number of confirmed cases are increasing at alarming rate?\n6. Which countries have the worst death rates?                                                                   \n7. Which countries have the best recovery rates?                                                                                                                                      \n8. How the virus is spread across various regions?                                                                  \n9. How many new incidents (confirmed\/ recovered\/ Death) are reported on a daily basis?                                    \n10. How the virus is spreading outside of china?                                                                                        \n11. Which countries are completely recovered till date (All confirmed cases are recovred)?                                \n12. Which are the regions where death cases are reported?                                                              \n","2f3fc422":"## Preprocessing","0d755624":"### Q5.  Which countries have the worst death rates?","21877f61":"### Exploratory Data Analysis","e0ff8d42":"*Run the status report cell at the end to get a brief latest status report*","9a325877":"### Q8. How many new incidents (confirmed\/ recovered\/ Death) are reported on a daily basis?","eef82afc":"### Q7. How the virus is spreading outside of china?","11b636d7":"Let's take a high level look at the data","fd5452e7":"## Status Report","252fcb6d":"### Q1. Which countries are mostly hit by COVID-19?","d249d898":"### Q6. Which countries have the best recovery rates?","20815941":"## Analysis of the outbreak over time","41af1442":"The raw data is structured such a way that the last updated row by each country and state contains the latest value for that region and state. Suppose on '02\/02\/2020' the value of confirmed cases in China\/Hubei was 'X' then on '03\/02\/2020' the value is 'X+y'. So the total confirmed cases will be the sum of all the latest values of each state of each region\/country.","422f4b53":"### Q6. How the virus is spreading over time?","0e6ef341":"### Q3. How the confirmed cases are distributed globally over various regions?","af423703":"### Q4. How confirmed and death cases are distributed over worstly effected countries?","77b43137":"## Reading Data","24b3f0df":"### Q11. Which countries are completely recovered tilll date (All confirmed cases are recovred)?\n","7690e4bc":"# COVID-19, 11 Questions, Visualization and Status Report ","ab448140":"### Q. **In which countries COVID-19 in spreading in alearming rate from past week?**","548bffb7":"### Q9. How the virus is spread across various regions?\n"}}