{"cell_type":{"02bb64e4":"code","69c36b77":"code","c7233694":"code","ace91121":"code","8cbcf449":"code","9a6c8281":"code","b1e05b8c":"code","ba663602":"code","1ff062ac":"code","b6b06910":"code","ad1583b0":"code","031f7c65":"code","8d405eeb":"code","f9dc5c67":"code","e1199479":"code","f290543b":"code","6c7d0df7":"code","267fd282":"code","722e4379":"code","7d40eb42":"code","444f616a":"code","7be20c9e":"code","0cb356af":"code","f5d97860":"code","5c50a688":"code","0489ee87":"code","de3ef93c":"code","8a8160bb":"code","826c5336":"code","4ff2afa1":"code","5c5b6cd3":"code","033643aa":"code","50b713e0":"code","c9f35d36":"code","9e7e1937":"code","ee2169ea":"code","127fd542":"code","37cfc526":"code","6aa761e6":"code","0ecba12d":"code","8dce688a":"code","626d33b9":"code","edb7890e":"code","cdb46324":"code","b780d6e3":"code","fd54f861":"code","9b53ea62":"code","cb496d2a":"code","412b36b7":"code","1d2e584e":"code","feed8e1c":"code","b084ce51":"code","dbd52364":"code","6da4b769":"code","32dac33b":"code","c7e87a14":"code","46f04d86":"code","9cbfc2eb":"code","49cac96c":"code","51ff4f57":"code","0ac2ff64":"code","e57a449c":"code","a915ff4d":"code","24dcc992":"code","aa6c27f4":"code","e15ee876":"code","9262a8b0":"code","18b7d14a":"code","1dab2a3c":"code","816a8f80":"code","441e2cef":"code","03b8f6de":"code","e9a54cca":"code","e83a5228":"code","0819cd51":"code","8bc5484d":"code","e550ad8d":"code","ec69d2fa":"code","f4f9c6c3":"code","0a91850a":"code","5a431803":"code","29e36020":"code","544c3de0":"code","c0d4aabe":"code","e1a3bc1f":"code","848048f1":"code","d22c7434":"code","7be657b4":"code","4ab6656b":"code","02be836e":"code","158eb3f4":"code","7e775505":"code","b53c4d4e":"code","70477e92":"code","3eec2fed":"code","8af3acee":"code","e93913ba":"code","6678f574":"code","87ae755f":"code","26efe525":"markdown","81648a27":"markdown","596509c8":"markdown","589fba36":"markdown","5533e6c8":"markdown","ab1bc636":"markdown","b9a24f32":"markdown","32b6a015":"markdown","dbcfbc37":"markdown","9cb9141c":"markdown","9b05eab4":"markdown"},"source":{"02bb64e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# Any results you write to the current directory are saved as output.","69c36b77":"import pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","c7233694":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","ace91121":"train_df.head(10)","8cbcf449":"test_df.tail(10)","9a6c8281":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": 1\n    })\nsubmission.to_csv('submission.csv', index=False)","b1e05b8c":"test_df2 = pd.read_csv('..\/input\/titanic\/test.csv')","ba663602":"test_df2.head()","1ff062ac":"test_df['sur'] = 0","b6b06910":"test_df.head()","ad1583b0":"test_df = test_df.drop(['sur'], axis=1)","031f7c65":"test_df.head()","8d405eeb":"test_df2['sur'] = 0","f9dc5c67":"test_df2.head()","e1199479":"# Mark all female had been survived thats why sur=1\ntest_df2.loc[test_df2.Sex == 'female', 'sur'] = 1","f290543b":"test_df2.head()","6c7d0df7":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": test_df2[\"sur\"]\n    })","267fd282":"submission.to_csv('submission.csv', index=False)","722e4379":"# fare less than 20 and who belong Pclass = 3 and who was female, mark then and died.\ntest_df2.loc[(test_df2.Fare > 20) & (test_df2['Pclass'] == 3) & (test_df['Sex']== 'female') , 'sur'] = 0","7d40eb42":"test_df2.head()","444f616a":"# Update submission file \nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": test_df2[\"sur\"]\n    })","7be20c9e":"submission.to_csv('submission.csv', index=False)","0cb356af":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","f5d97860":"train_df.shape","5c50a688":"test_df.shape","0489ee87":"train_df.info()\n# observe some missing data in Age, Cabin, Embarked","de3ef93c":"test_df.info()","8a8160bb":"train_df.isnull().sum()","826c5336":"test_df.isnull().sum()","4ff2afa1":"#define a function, so that we can make bar chart for every feature. \ndef barchart(feature):\n    g = sns.barplot(x=feature,y=\"Survived\",data=train_df)\n    g = g.set_ylabel(\"Survival Probability\")","5c5b6cd3":"# For sex feature. And see most of Feamale passenger had beed survived.\nbarchart('Sex')","033643aa":"barchart('Pclass')","50b713e0":"barchart('SibSp')","c9f35d36":"barchart('Parch')","9e7e1937":"barchart('Embarked')","ee2169ea":"# Marged train and test data set.\ntrain_test_data = [train_df, test_df]\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\\.', expand = False)","127fd542":"train_df['Title'].value_counts()","37cfc526":"test_df['Title'].value_counts()","6aa761e6":"# extract example \ns2 = pd.Series(['a_b, Dr. c', 'c_d001. e', 'ADR, Mr1. Sajal', 'f_g8.h','as, Miss. Angel'])\ns2.str.extract('([A-Za-z]+[0-9]+)\\.')","0ecba12d":"s2.str.extract('([A-Za-z]+)\\.')","8dce688a":"#Mapping the unnecessary title with 0,1,2,3\ntitle_mapping = {\"Mr\": 0,\"Miss\": 1,\"Mrs\": 2,\"Master\": 3,\"Dr\": 3,\"Rev\": 3,\"Mlle\": 3,\"Countess\": 3,\"Ms\": 3,\"Lady\": 3,\"Jonkheer\": 3,\"Don\": 3,\"Dona\": 3,\"Mme\": 3,\"Capt\": 3,\"Sir\": 3,\"Col\":3,\"Major\":3 }\n\nfor dataset in train_test_data:\n    dataset['Title']  = dataset['Title'].map(title_mapping)","626d33b9":"test_df['Title'].value_counts()","edb7890e":"train_df['Title'].value_counts()","cdb46324":"train_df.info()","b780d6e3":"# Delete unnecessary feature from dataset\ntrain_df.drop('Name',axis=1,inplace=True)\ntest_df.drop('Name',axis=1,inplace=True)","fd54f861":"test_df.head()","9b53ea62":"#Mapping Male and Female in number \nsex_mapping = {\"male\": 0,\"female\": 1 }\n\nfor dataset in train_test_data:\n    dataset['Sex']  = dataset['Sex'].map(sex_mapping)","cb496d2a":"test_df.head()","412b36b7":"barchart('Sex')","1d2e584e":"# FIll missing age with measian age of passengers \ntrain_df[\"Age\"].fillna(train_df.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest_df[\"Age\"].fillna(test_df.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","feed8e1c":"train_df.head()","b084ce51":"# See -> Age are now not NULL\ntrain_df.info()","dbd52364":"test_df.info()","6da4b769":"# For better understanding we make some chart for age \n\nfacet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim=(0,train_df['Age'].max()))\nfacet.add_legend()\n\nplt.show()","32dac33b":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim=(0,train_df['Age'].max()))\nfacet.add_legend()\n\nplt.xlim(0,20)\n# plt.show()","c7e87a14":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim=(0,train_df['Age'].max()))\nfacet.add_legend()\n\nplt.xlim(20,30)","46f04d86":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim=(0,train_df['Age'].max()))\nfacet.add_legend()\n\nplt.xlim(30,40)","9cbfc2eb":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim=(0,train_df['Age'].max()))\nfacet.add_legend()\n\nplt.xlim(40,80)","49cac96c":"# Make category for age in five as child=0, young=1, adult=2, mid_age=3, senior=4\nfor dataset in train_test_data:\n    dataset.loc[dataset['Age'] <=16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] >16) & (dataset['Age'] <=26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] >26) & (dataset['Age'] <=36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] >36) & (dataset['Age'] <=62), 'Age'] = 3,\n    dataset.loc[dataset['Age'] >62, 'Age'] = 4","51ff4f57":"train_df.head()","0ac2ff64":"barchart('Age')","e57a449c":"# filling missing value of Embarked\nfor dataset in train_test_data:\n    dataset['Embarked']  = dataset['Embarked'].fillna('S')","a915ff4d":"train_df.info()","24dcc992":"embarked_map = {\"S\":0, \"C\":1, \"Q\":2}\nfor dataset in train_test_data:\n    dataset['Embarked']  = dataset['Embarked'].map(embarked_map)","aa6c27f4":"train_df.head()","e15ee876":"test_df.info()","9262a8b0":"# FIll missing Fare with measian age of passengers \ntrain_df[\"Fare\"].fillna(train_df.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest_df[\"Fare\"].fillna(test_df.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest_df.info()","18b7d14a":"# For better understanding we make some chart for Fare\n\nfacet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade=True)\nfacet.set(xlim=(0,train_df['Fare'].max()))\nfacet.add_legend()\n\nplt.show()","1dab2a3c":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade=True)\nfacet.set(xlim=(0,train_df['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0,20)","816a8f80":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade=True)\nfacet.set(xlim=(0,train_df['Fare'].max()))\nfacet.add_legend()\nplt.xlim(20,30)","441e2cef":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade=True)\nfacet.set(xlim=(0,train_df['Fare'].max()))\nfacet.add_legend()\nplt.xlim(30,100)","03b8f6de":"# Make category for FARE in four \nfor dataset in train_test_data:\n    dataset.loc[dataset['Fare'] <=7.5, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] >7.5) & (dataset['Fare'] <=15), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] >15) & (dataset['Fare'] <=30), 'Fare'] = 2,\n    dataset.loc[(dataset['Fare'] >30) & (dataset['Fare'] <=100), 'Fare'] = 3,\n    dataset.loc[dataset['Fare'] >100, 'Fare'] = 4","e9a54cca":"train_df.head(20)","e83a5228":"# work with Cabin \ntrain_df.Cabin.value_counts()","0819cd51":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","8bc5484d":"train_df.Cabin.value_counts()","e550ad8d":"pclass1 = train_df[train_df['Pclass'] == 1]['Cabin'].value_counts()\npclass2 = train_df[train_df['Pclass'] == 2]['Cabin'].value_counts()\npclass3 = train_df[train_df['Pclass'] == 3]['Cabin'].value_counts()\ndf = pd.DataFrame([pclass1,pclass2,pclass3])\ndf.index = ['1st class','2nd class','3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","ec69d2fa":"# Cabin Mapping \ncabin_mapping = {\"A\":0,\"B\":0.4,\"C\":0.8,\"D\":1.2,\"E\":1.6,\"F\":2,\"G\":2.4,\"T\":2.8}\nfor dataset in train_test_data:\n    dataset['Cabin']  = dataset['Cabin'].map(cabin_mapping)","f4f9c6c3":"# filling missing Fare with median fare for each Pclass\ntrain_df[\"Cabin\"].fillna(train_df.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest_df[\"Cabin\"].fillna(test_df.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","0a91850a":"train_df.info()","5a431803":"test_df.info()","29e36020":"# For family size\ntrain_df[\"FamilySize\"] = train_df[\"SibSp\"]+ train_df[\"Parch\"]+1","544c3de0":"test_df[\"FamilySize\"] = test_df[\"SibSp\"]+ test_df[\"Parch\"]+ 1","c0d4aabe":"facet = sns.FacetGrid(train_df,hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'FamilySize', shade=True)\nfacet.set(xlim=(0,train_df['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","e1a3bc1f":"# Family Mapping \nfamily_mapping = {1:0,2:0.4,3:0.8,4:1.2,5:1.6,6:2,7:2.4,8:2.8,9:3.2,10:3.6,11:4}\nfor dataset in train_test_data:\n    dataset['FamilySize']  = dataset['FamilySize'].map(family_mapping)","848048f1":"train_df.head()","d22c7434":"# Dropping the unnecessary feature\nfrdp = ['Ticket','SibSp','Parch']\ntrain_df = train_df.drop(frdp, axis=1)\ntest_df = test_df.drop(frdp, axis=1)\ntrain_df = train_df.drop(['PassengerId'], axis=1)","7be657b4":"train_df.head()","4ab6656b":"# Importing Classifier Modules\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","02be836e":"# cross validatin with KFold\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nK_fold = KFold(n_splits=10,shuffle=True,random_state =0)","158eb3f4":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nx = train_df.drop('Survived',axis=1)\ny = train_df['Survived']\nscore = cross_val_score(clf ,x ,y , cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)","7e775505":"#decision tree Score\nround(np.mean(score)*100,2)","b53c4d4e":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf ,x ,y , cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)","70477e92":"#Random Forest Score\nround(np.mean(score)*100,2)","3eec2fed":"clf = RandomForestClassifier(n_estimators=13)\nclf.fit(x, y)\n\ntest_data = test_df.drop(\"PassengerId\", axis=1).copy()\n","8af3acee":"test_data.info()","e93913ba":"prediction = clf.predict(test_data)","6678f574":"# Update submission file \nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": prediction\n    })\nsubmission.to_csv('submission.csv',index=False)","87ae755f":"submission = pd.read_csv('submission.csv')\nsubmission.head()","26efe525":"**Make Submission file**","81648a27":"# Machine Learning modeling ","596509c8":"# RandomForest","589fba36":"# First submission\nMark everyone as surviving and see the Accuracy.","5533e6c8":"# Feature Engineering and increase your accuracy","ab1bc636":"# 3rd submission","b9a24f32":"# DecisionTree","32b6a015":"# Test data load again","dbcfbc37":"# 4th submission","9cb9141c":"# Data Load","9b05eab4":"# Start again for 5th Prediction and submission"}}