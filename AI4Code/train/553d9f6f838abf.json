{"cell_type":{"2fe28446":"code","23e96878":"code","8e0759c7":"code","a266330a":"code","e500777a":"code","4ba46920":"code","a225192a":"code","0dc1e1e9":"code","8828c29f":"code","6b3eb1ca":"code","2471e56f":"code","152c31a5":"code","b36bb1c9":"code","6516e056":"code","703c0ba6":"code","05b4ddbf":"code","e8c390ce":"code","56677958":"code","e18ddb3a":"code","293e4c32":"code","4921a5f0":"code","488d67ca":"code","758e6e10":"code","31de31b8":"code","64487545":"code","bf4362fa":"code","50f3a812":"code","79457564":"code","c5443201":"code","f7975d91":"markdown","c1ce8620":"markdown","d4f1a615":"markdown","4c3ed92c":"markdown","88b7176e":"markdown","3fc6eb30":"markdown","8af4b2f4":"markdown","f586e227":"markdown","7f28c74e":"markdown","58900c5a":"markdown","ed5dabc4":"markdown","d6176674":"markdown","4f0af8a3":"markdown","2af69a57":"markdown","8c1d17ff":"markdown","123423ca":"markdown","60304941":"markdown","a96e7033":"markdown","b2f04b11":"markdown","07b3ad2c":"markdown","ae285d46":"markdown","dd59ea37":"markdown","85e75122":"markdown","7eae7cec":"markdown","bf85576a":"markdown","fdbe2140":"markdown","6a2babb7":"markdown","16d45eea":"markdown","b54b15cc":"markdown","ad3d2af7":"markdown","2aa8a66c":"markdown","10dfd514":"markdown","a7b1d8b3":"markdown","0b6f3569":"markdown","86d4ff7b":"markdown","e9dabaee":"markdown","93e7e210":"markdown","4584340f":"markdown","213793f1":"markdown","8d38056e":"markdown","5de9c00c":"markdown","35984715":"markdown","1ba44671":"markdown","c00c99d2":"markdown","3560bbfe":"markdown","dfa0b7d3":"markdown","825b3a58":"markdown","a5496d43":"markdown","254130cd":"markdown","f031ab61":"markdown","01a9fbd1":"markdown","605055db":"markdown","4f67bc25":"markdown","c71d35d9":"markdown","68c8748a":"markdown","7b57c6c4":"markdown","f7d3e594":"markdown","e03e2565":"markdown","903ae3f9":"markdown","b6ce2b81":"markdown","a7e675b8":"markdown","72b96c1a":"markdown","f2174e3e":"markdown","0ac39d25":"markdown","1057455b":"markdown","382e8563":"markdown","5fc4251e":"markdown","07398ebc":"markdown","c8c8cfe6":"markdown","b5eac58e":"markdown","e84cb9b5":"markdown","edcd114f":"markdown","c5df4297":"markdown","9a697ee4":"markdown","bc71763c":"markdown","f3c9c5d4":"markdown","87ceb2fe":"markdown","edbb5412":"markdown","019c4403":"markdown","e25ef2d5":"markdown","5da28a67":"markdown","6edfbd66":"markdown","dbe719bd":"markdown","8d8b3659":"markdown"},"source":{"2fe28446":"from IPython.core.display import display, HTML, Javascript\n\nhtml_contents =\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    \n    <style>\n    @import url('https:\/\/fonts.googleapis.com\/css2?family=MedievalSharp&display=swap');\n    \n    .Banner_Intro{\n        display:fill;\n        border-radius: 255px 15px 225px 15px\/15px 225px 15px 255px;\n        border-color:#8F480F;\n        border-style: dashed;\n        border-width: 3px; \n        \n        color:#121212;\n        \n        font-size:15px;\n        font-weight: bold;\n        font-family: 'MedievalSharp', cursive;\n        \n        background-color:#E9C990;\n        text-align:center;\n        letter-spacing:0.5px;\n        padding: 0.7em;\n        text-align:left\">        \n    }\n    \n    hr { border: 1px solid #a8b7b79;\n             color: #a8b7b7;\n             background: #a8b7b7;\n           }\n\n\n    .Banner_Intro2{\n        display:fill;\n        border-radius: 255px 15px 225px 15px\/15px 225px 15px 255px;\n        border-color:#627d81;\n        border-style: dashed;\n        border-width: 3px; \n        \n        color:#a8b7b7\";\n        \n        font-size:15px;\n        font-weight: bold;\n        font-family: 'MedievalSharp', cursive;\n        \n        background-color:#a8b7b7;\n        text-align:center;\n        letter-spacing:0.5px;\n        padding: 0.7em;\n        text-align:left\">        \n    }\n    \n    .thing {\n       padding: 1rem;\n       width: 420px;\n       box-shadow: 0 15px 30px 0 rgba(0,0,0,0.11),\n       0 5px 15px 0 rgba(0,0,0,0.08);\n       border-color:#8F480F;\n  \n       border-radius: 254px 15px 225px 15px\/15px 225px 15px 255px;\n       border-style: dashed;\n       border-left: 0 solid #680E04;\n       transition: border-left 300ms ease-in-out, padding-left 300ms ease-in-out;\n  \n       background-color:#E9C990;\n  \n       font-size:15px;\n       font-family: 'MedievalSharp', cursive;\n  \n       font-weight: bold;\n  \n       letter-spacing:0.5px;\n       padding: 0.7em;\n       text-align: left;>\n  \n}\n\n.thing:hover {\n  padding-left: 0.5rem;\n  border-left: 0.5rem solid #8F480F;\n}\n\n.thing > :first-child {\n  margin-top: 0;\n}\n\n.thing > :last-child {\n  margin-bottom: 0;\n}\n\n.heading {\n  color: #fff;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  font-family: 'MedievalSharp', cursive;\n}\n\n.chapters {\n    font-family: 'MedievalSharp', cursive;\n    font-weight: bold;\n    color:#3c3d1a;\n    text-align: center;\n    font-size:25px;\n}\n\n.section {\n    font-family: 'MedievalSharp', cursive;\n    font-weight: bold;\n    color:#3c3d1a;\n    text-align: left;\n    font-size:23px;\n}\n\n.index {\n    font-family: 'MedievalSharp', cursive;\n    font-size:15px;\n    font-weight: bold;\n    color:#3c3d1a;\n    text-align: left;\n}\n\n.banner_head {\n    font-family: 'MedievalSharp', cursive;\n    font-weight: bold;\n    font-size:35px;\n    color:black;\n}\n\n\n    <\/style>\n    <\/head>\n    \n<\/html>\n\"\"\"\n\nHTML(html_contents)","23e96878":"import pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom textwrap import wrap\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nimport matplotlib as mlb\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import AnnotationBbox, OffsetImage\n\nplt.rcParams['figure.figsize'] = (16,9)\nplt.rcParams['axes.edgecolor'] = 'black'\nplt.rcParams['axes.linewidth'] = 1.5\nplt.rcParams['figure.frameon'] = True\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams[\"font.family\"] = \"monospace\";\n\n\nimport seaborn as sns\ncolors = [\"#a8b7b7\",\"#627d81\",\"#7c8459\",\"#3c3d1a\",\"#cfb78a\",\"#be9b6b\",\"#977b4c\",\"#5d5739\",\"#382f17\"]\nsns.palplot(sns.color_palette(colors))","8e0759c7":"df = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\nquestions = df.iloc[0]\ndf = df.drop([0])","a266330a":"def implot(name,X,Y,z):\n    url = 'https:\/\/raw.githubusercontent.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/main\/'+ name +'.png'\n    name = mpimg.imread(url)\n    box = OffsetImage(name , zoom=z)\n    xy = (0.5, 0.7)\n    b = AnnotationBbox(box, xy, frameon=False, pad=1, xybox=(X, Y*1000))\n    A.add_artist(b)","e500777a":"#plot\nA = sns.countplot(x= df['Q1'],\n                      order = df['Q1'].value_counts().index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \n\n#Patch\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)    \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\n\n#Lables\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Age', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Age of Warriors', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0], label_type='edge')\n\n#Annot\nA.annotate('Age',\n                    fontsize=10, fontweight='bold',\n                    xy=(2.6, 4000.1), xycoords='data',\n                    xytext=(0.60, 0.95), textcoords='axes fraction',\n                    arrowprops=dict(\n                    facecolor=colors[1], shrink=0.025, \n                    connectionstyle='arc3, rad=0.40'),\n                    horizontalalignment='left', verticalalignment='top');","4ba46920":"ques='Q2'\nxlab='Count'\nylab='Gender'\n\nA = sns.countplot(x= df[ques],\n                      order = df[ques].value_counts().index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading) \nidx_tallest = np.argmax(patch_h)   \nA.patches[idx_tallest].set_facecolor(colors[7])  \n\n    \nplt.ylabel(xlab, weight='semibold', fontname = 'Georgia')\nplt.xlabel(ylab, weight='semibold', fontname = 'Georgia')\nplt.suptitle('Gender of Warriors', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0])\n    \nimplot('Male',0,14,0.3)    \nimplot('Female',1,10,0.3) \nimplot('unknown',2,6,0.3) \nimplot('unknown',3,4.8,0.3) \nimplot('unknown',4,4.6,0.3) \n\n#Annot\nA.annotate('Male',\n                    fontsize=10, fontweight='bold',\n                    xy=(0.5, 16000.1), xycoords='data',\n                    xytext=(0.60, 0.80), textcoords='axes fraction',\n                    arrowprops=dict(\n                    facecolor=colors[1], shrink=0.025, \n                    connectionstyle='arc3, rad=0.40'),\n                    horizontalalignment='left', verticalalignment='top');","a225192a":"scale =[[0, colors[2]],\n        [0.5,colors[6]],\n        [1.0, colors[7]]]\n\n\nsettings = [ dict(\n        type = 'choropleth',\n        autocolorscale = False,\n        colorscale = scale,\n        showscale = True,\n        locations = df.Q3.value_counts().index,\n        z = df.Q3.value_counts().values,\n        locationmode = 'country names',\n        text = df.Q3.value_counts().index,\n        marker = dict(\n            line = dict(color = '#E4C56F', width = 0.5)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Recorded')\n            )\n       ]\n\nlayout = dict(\n    title = '<b>Countries of Warriors<\/b>', \n    title_x=0.5,\n    titlefont=dict(size =24, color=colors[7], family='MedievalSharp'),\n    geo = dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = colors[1],\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = False,\n                gridcolor = colors[3]\n            ),\n        lataxis = dict(\n                showgrid = False,\n                gridcolor = colors[3]\n                )\n            ),\n        )\n\n\nfig = dict(data=settings, layout=layout)\npy.iplot(fig, validate=False, filename='GlobMap')","0dc1e1e9":"#plot\nA = sns.countplot(x= df['Q4'],\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\n#Patch\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)    \nA.patches[idx_tallest].set_facecolor(colors[7]) \n\n#TextWrap\nfrom textwrap import wrap\nlabels = [ '\\n'.join(wrap(l, 12)) for l in df['Q4'].unique()]\nplt.tick_params(axis='x', which='major', labelsize=10)\nA.set_xticklabels(labels, fontsize=10)\n\n#image\nimplot('Male',1,7,0.26)\nimplot('Artemes',0,5,0.21) \n\n#labels\nplt.ylabel('count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Education', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Education of Warriors', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);","8828c29f":"ylab='Count'\nxlab='Roll'\n\nA = sns.countplot(x= df['Q5'],\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\n#Patch\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)   \nA.patches[idx_tallest].set_facecolor(colors[7]) \n\n\n#TextWrap\nlabels = [ '\\n'.join(wrap(l, 8)) for l in df['Q5'].unique()]\nplt.tick_params(axis='x', which='major', labelsize=10)\nA.set_xticklabels(labels, fontsize=10)\n\n\n#Label\nplt.xlabel(xlab, weight='semibold', fontname = 'Georgia')\nplt.ylabel(ylab, weight='semibold', fontname = 'Georgia')\nplt.suptitle('Roll of Warriors', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0])\n\n#Annot\nA.annotate('26.1% Students',\n                    fontsize=10, fontweight='bold',\n                    xy=(5.0, 4000.1), xycoords='data',\n                    xytext=(0.60, 0.95), textcoords='axes fraction',\n                    arrowprops=dict(\n                    facecolor=colors[2], shrink=0.025, \n                    connectionstyle='arc3, rad=0.40'),\n                    horizontalalignment='left', verticalalignment='top');\n\n#(df['Q5'].value_counts() \/ df['Q5'].shape[0]*100)[:2]","6b3eb1ca":"scale =[[0, colors[2]],\n        [0.5,colors[6]],\n        [1.0, colors[7]]]\n\n\n\n\nData_src = df['Q20'].value_counts()\n\n\ntrace = go.Scatter(\n    x=Data_src.index,\n    y=Data_src.values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 20,\n        size = Data_src.values,\n        color = Data_src.values,\n        colorscale=scale,\n        showscale=True\n    ),\n)\n\nlayout = go.Layout(\n    title='<b>Industries of Warriors<\/b>', \n    title_x=0.5,\n    titlefont=dict(size =24, color=colors[7], family='MedievalSharp'),\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\n\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig.update_xaxes(showline=True, linewidth=2, linecolor=colors[3])\nfig.update_yaxes(showline=True, linewidth=2, linecolor=colors[3])\npy.iplot(fig, filename=\"Industries of Warriors\")\n\n#(df['Q20'].value_counts() \/ df['Q20'].shape[0]*100)[:2]","2471e56f":"fsize = (16, 9)\na = df.filter(regex = 'Q40')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)   \n    \nA.patches[idx_tallest].set_facecolor(colors[7]) \n    \nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Courses Platform', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Warriors Choice of Courses Platform', fontname = 'Georgia', weight='bold')\n    \nA.bar_label(A.containers[0]);","152c31a5":"fsize = (16, 9)\na = df.filter(regex = 'Q7')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 y='count',\n                 x= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)   \n    \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n#image\n#implot('Poseidon',7,12,0.4)\n    \nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Programming Languages', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Warriors Choice of Weapons', fontname = 'Georgia', weight='bold')\n    \nA.bar_label(A.containers[0]);\n\n#(df['Q5'].value_counts() \/ df['Q5'].shape[0]*100)[:2]","b36bb1c9":"A = sns.countplot(x= df['Q8'],\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\n\n\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Languages', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Language Recommended by Data Scientists', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);","6516e056":"fsize = (16, 9)\na = df.filter(regex = 'Q9')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('IDE', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Commonly Used IDE', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);","703c0ba6":"fsize = (16, 9)\na = df.filter(regex = 'Q14')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Data Vizualization', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Mystic Data Visualization', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);","05b4ddbf":"fsize = (16, 9)\na = df.filter(regex = 'Q16')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('ML Frameworks', weight='semibold', fontname = 'Georgia')\nplt.suptitle('ML Fight Styles', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#answergot \/ answergot.sum() *100","e8c390ce":"fsize = (16, 9)\na = df.filter(regex = 'Q17')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('ML Algorithms', weight='semibold', fontname = 'Georgia')\nplt.suptitle('ML Fight Moves', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#answergot \/ answergot.sum() *100","56677958":"cnt_srs = df['Q21'].value_counts().head(30)\n\ntrace = go.Scatter(\n    x=cnt_srs.index,\n    y=cnt_srs.values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 20,\n        size = cnt_srs.values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = cnt_srs.values,\n        colorscale=scale,\n        showscale=True\n    ),\n)\n\nlayout = go.Layout(\n    title='<b>Size of The Company\/Clan<\/b>', \n    title_x=0.5,\n    titlefont=dict(size =24, color=colors[8], family='MedievalSharp'),\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig.update_xaxes(showline=True, linewidth=2, linecolor=colors[3])\nfig.update_yaxes(showline=True, linewidth=2, linecolor=colors[3])\npy.iplot(fig, filename=\"Size of the Company\/Clan\")","e18ddb3a":"fsize = (16, 9)\na = df.filter(regex = 'Q24')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Roles', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Important Roles of Warrior', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#answergot \/ answergot.sum() *100","293e4c32":"Data_src = df['Q25'].value_counts().head(30)\n\ntrace = go.Scatter(\n    x=Data_src.index,\n    y=Data_src.values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 20,\n        size = Data_src.values,\n        color = Data_src.values,\n        colorscale=scale,\n        showscale=True\n    ),\n)\n\nlayout = go.Layout(\n    title='<b>Earning of Warriors(Annual)<\/b>', \n    title_x=0.5,\n    titlefont=dict(size =24, color=colors[8], family='MedievalSharp'),\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig.update_xaxes(showline=True, linewidth=2, linecolor=colors[3])\nfig.update_yaxes(showline=True, linewidth=2, linecolor=colors[3])\npy.iplot(fig, filename=\"Current yearly Compensation\")","4921a5f0":"#plot\nA = sns.countplot(y= df['Q28'],\n                order = df['Q28'].value_counts().index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)\nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\n\n'''\n#TextWrap\nlabels = [ '\\n'.join(wrap(l, 8)) for l in df['Q28'].unique()]\nplt.tick_params(axis='x', which='major', labelsize=10)\nA.set_xticklabels(labels, fontsize=10)'''\n\n#label\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Cloud Platforms', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Best Familiarity with Magic Platform', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n    \n    \n    \nplt.show;","488d67ca":"#plot\nA = sns.countplot(y= df['Q35'],\n                order = df['Q35'].value_counts().index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)\nA.patches[idx_tallest].set_facecolor(colors[7])\n\n'''\n#TextWrap\nlabels = [ '\\n'.join(wrap(l, 8)) for l in df['Q28'].unique()]\nplt.tick_params(axis='x', which='major', labelsize=10)\nA.set_xticklabels(labels, fontsize=10)'''\n\n\n#label\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('BI tool', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Most used Magical Tool', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);","758e6e10":"A = sns.countplot(x= df['Q15'],\n                order = df['Q15'].value_counts().index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)   \nA.patches[idx_tallest].set_facecolor(colors[7]) \n\n\n\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Experience', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Experiences of Warriors in Arts of ML', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0])\n\nplt.xticks(rotation=90);","31de31b8":"A = sns.countplot(x= df['Q6'],\n                order = df['Q6'].value_counts().index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)   \n    \nA.patches[idx_tallest].set_facecolor(colors[7]) \n\nfrom textwrap import wrap\nlabels = [ '\\n'.join(wrap(l, 8)) for l in df['Q6'].unique()]\nplt.tick_params(axis='x', which='major', labelsize=10)\nA.set_xticklabels(labels, fontsize=10)\n\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Coding Years', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Coding Skill Experience of Warriors', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);","64487545":"fsize = (16, 9)\na = df.filter(regex = 'Q10')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Notebook Products', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Notebook of Warrior', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#answergot \/ answergot.sum() *100","bf4362fa":"fsize = (16, 9)\na = df.filter(regex = 'Q27_A')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n    \npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Cloud Computing Platforms', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Magic of Cloud Computing', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#answergot \/ answergot.sum() *100","50f3a812":"#data tangle\nfsize = (16, 9)\na = df.filter(regex = 'Q39')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\n#plot\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\n#patch\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n#lables\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Sharing platforms', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Sharing Wisdom Camp Platform', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#answergot \/ answergot.sum() *100","79457564":"#data tangle\nfsize = (16, 9)\na = df.filter(regex = 'Q42')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\n#plot\nplt.figure(figsize = fsize)\nA = sns.barplot(data = answergot,\n                 x='count',\n                 y= answergot.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\n#patch\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)    \nidx_tallest = np.argmax(patch_h)       \nA.patches[idx_tallest].set_facecolor(colors[7])\n\n#lables\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Platforms', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Warriors Favourit place to learn', fontname = 'Georgia', weight='bold')\nA.bar_label(A.containers[0]);\n\n#(answergot \/ answergot.sum() *100)","c5443201":"fsize = (16, 9)\na = df.filter(regex = 'Q7')\nanswer_desc = a.describe()\nanswergot = answer_desc.loc[['top', 'count']].T\nanswergot = answergot.set_index('top')\nanswergot = answergot.sort_values(by=\"count\", ascending = False)\n\n\nDf = answergot.iloc[[0,3],:]\n    \nplt.figure(figsize = fsize)\nA = sns.barplot(data = Df,\n                 y='count',\n                 x= Df.index,\n              color=colors[4],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\npatch_h = []    \nfor patch in A.patches:\n    reading = patch.get_height()\n    patch_h.append(reading)\n    \nidx_tallest = np.argmax(patch_h)   \n    \nA.patches[idx_tallest].set_facecolor(colors[7])      \n\n\n#image\nimplot('Roman',1,12,0.4)\nimplot('Samurai',0,12,0.6) \n    \n    \nplt.xlabel('Languages', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Python Vs R', fontname = 'Georgia', weight='bold')\n    \nA.bar_label(A.containers[0]);","f7975d91":"<div class=\"thing\">\u2694\ufe0f  The IDEs used by participants are Jupiter Notebook 25%, Visual Studio Code 15% then Pycham 11.5%.","c1ce8620":"<div class=\"thing\">\u2694\ufe0f  There are 19.4% working under 50 employees size and 13.15% for more than 10,000 employees size","d4f1a615":"<div class=\"section\">3.2 Languages Recommended <a id=\"3.2\"><\/a>","4c3ed92c":"<div class=\"thing\">\u2694\ufe0f  30.9% of them share it on Github , 20.7% in Kaggle and 21.4% do not share my work publicly.","88b7176e":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Barren%20Lands.gif?raw=true\"><\/p>","3fc6eb30":"<hr>","8af4b2f4":"<div class=\"Banner_Intro2\"> Keg got more knowlege through the barren Lands in Glean Farms he read about Education, Roll, Industry and Courses Platform.","f586e227":"<div class=\"thing\">\u2694\ufe0f  Python is the best language recommended by the Data scientist and then comes are.","7f28c74e":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Sislion%20Kingdom.gif?raw=true\"><\/p>","58900c5a":"<div class=\"thing\">\u2694\ufe0f  The types of mystic Data Vizualization famous among participants are Matplotlib 34.6%, Seaborn 24.7%. Plotly\/ Plotly express 11.3%","ed5dabc4":"<div class=\"Banner_Intro2\"> From Drotor Castle Keg The Warrior found the hidden truths about Programming Languages,Recommendation,IDE Enviroment, Data Vizualization Tools, ML Framework, ML Algorhythm, Team size of a company, Important Rolls, Yearly Eanings, Etc. Now the journey ends here, or is it?. The king of Drotor Castle offered his boat to travel across the sea towards High Harbor where the Journey of the \u26f0\ufe0f Stosha Mountains Begins.","d6176674":"<hr>","4f0af8a3":"<div class=\"Banner_Intro\"><div class=\"banner_head\">\ud83d\udde1\ufe0f Story of Keg - The Warrior Journey Towards Data Scientist<\/div>\n    <br>\ud83d\udcdc There is a world where people fight from the bottom to the top of the hierarchy to become the ultimate warrior called the data scientist.\n    <br>To become one of the greatest warriors you have to take challenges, adventures, and travel across the land to gain knowledge and skills.\n    <br> There was a boy who looked up to these warriors and ever since childhood he wanted to become a warrior. \n    <br>The path of the data scientist is no ordinary journey to anyone.\n    <br>The journey consist of many difficulties and one has to master all the art forms like fighting the data, mastering the code,\n    <br>concuring the fear of machine learning, and learning mystic arts of Prediction \ud83d\udd2e.\n    <br>So its a story of the boy who wanted to become one of the greatest Data Scientists.","2af69a57":"<div class=\"thing\">\u2694\ufe0f  The most popular used cloud platforms are Amazon Web Services (14%), Google Cloud Platform (12%) and Microsoft Azure (9%).","8c1d17ff":"<div class=\"thing\">\u2694\ufe0f  The coding experience of are highest between 5-10 Years.","123423ca":"<div class=\"Banner_Intro2\"> After crossing the roaring waves of Nitia Bay through a ship we heard whispers and info about years of experience in ML and coding. The Journey of \u26f0\ufe0f Stosha Mountains Begins next.","60304941":"<div class=\"section\">4.2 Experience of Coding <a id=\"4.2\"><\/a>","a96e7033":"<div class=\"section\">2.3 Industry <a id=\"2.3\"><\/a>","b2f04b11":"<div class=\"thing\">\n    \u2694\ufe0f Most of the warriors are between 18 and 29 years of age.<br>\u2694\ufe0f Data Science became very poplular in last few years.","07b3ad2c":"<div class=\"thing\"> \u2694\ufe0f Over 77% of Warriors participated have a Bachelor's and\/or a Master's degree.","ae285d46":"<div class=\"Banner_Intro2\"> After Understanding the demographics Keg The Warrior got some ideas to start. Now he has to continue his journey towards Barren Lands where the books and data leads him.","dd59ea37":"<div class=\"chapters\"> Final Chapter : Destination\/ Conclusion <a id=\"6\"><\/a>","85e75122":"<div class=\"section\">3.6 ML Algorithms <a id=\"3.6\"><\/a>","7eae7cec":"<div class=\"thing\">\n    \u2694\ufe0f Majority count of warriors are 79% and There are only 18% Warrioress Participated.<br>","bf85576a":"<div class=\"section\">3.5 ML Frameworks <a id=\"3.5\"><\/a>","fdbe2140":"<div class=\"index\">Chapters\n    \n1. [Demographics](#1)   \n    - 1.1 [Age ](#1.1)\n    - 1.2 [Gender](#1.2)\n    - 1.3 [Countries ](#1.3)\n2. [Academics and Education](#2)\n    - 2.1 [Education](#2.1)\n    - 2.2 [ Roll](#2.2)\n    - 2.3 [ Industry](#2.3)\n    - 2.4 [ Courses Platform](#2.4)\n3. [Skills](#3)\n    - 3.1 [Languages](#3.1)\n    - 3.2 [ Languages Recommended](#3.2)\n    - 3.3 [ IDE Enviroment](#3.3)  \n    - 3.4 [ Data Vizualization Tools](#3.4)\n    - 3.5 [ML Frameworks](#3.5)\n    - 3.6 [ML Algorithms](#3.6)\n    - 3.7 [ Size of Company](#3.7)\n    - 3.8 [Important Rolls](#3.8)\n    - 3.9[Yearly Earnings](#3.9)\n    - 3.10 [ Cloud Platforms](#3.10)\n    - 3.11[ Business Intelligence Tools](#3.11)\n4. [Experience](#4)\n    - 4.1 [Experience of ML](#4.1)\n    - 4.2  [Experience of Coding](#4.2)\n5. [Platforms](#5)\n    - 5.1 [Notebooks](#5.1)\n    - 5.2 [Cloud Computing Platforms](#5.2)\n    - 5.3 [Public Sharing Platforms](#5.3)\n    - 5.4 [Online Reporting Media and Sources](#5.4)\n    - 5.5  [Python vs R](#5.5)\n6. [Conclusion](#6)","6a2babb7":"<div class=\"section\">2.4 Courses Platform <a id=\"2.4\"><\/a>","16d45eea":"<div class=\"thing\">\u2694\ufe0f  Power BI and Tableau is most preferred Business Intelligence tools. ","b54b15cc":"<div class=\"section\">2.2 Roll <a id=\"2.2\"><\/a>","ad3d2af7":"<div class=\"section\">5.5 Python vs R <a id=\"5.5\"><\/a>","2aa8a66c":"<hr>","10dfd514":"<div class=\"thing\">\u2694\ufe0f  Most preferred fighting style is Scikit learn 24.8%, TensorFlow 16.6%. Keras 14.1%","a7b1d8b3":"<div class=\"section\">3.1 Languages <a id=\"3.1\"><\/a>","0b6f3569":"<div class=\"thing\">\u2694\ufe0f  Python is the common weapon Used by 33% Warriors, followed by SQL with 16%.","86d4ff7b":"<hr>","e9dabaee":"<div class=\"section\">5.2 Cloud Computing Platforms <a id=\"5.2\"><\/a>","93e7e210":"<div class=\"thing\">\u2694\ufe0f  The favourite place to learn and read reports: Kaggle 21.9%, YouTube 20% and Blogs 15.3%.","4584340f":"<hr>","213793f1":"<div class=\"section\">3.10 Cloud Platforms <a id=\"3.10\"><\/a>","8d38056e":"<div class=\"Banner_Intro\"> \ud83d\udd2e The Great Oracle told the boy about the difficulties before going towards the journey the oracle gave him some books, scripts, and data telling him that it will guide him towards the destiny.","5de9c00c":"<div class=\"chapters\"> Chapter 4 :  Experience <a id=\"4\"><\/a>","35984715":"<div class=\"section\">3.9 Yearly Earnings <a id=\"3.9\"><\/a>","1ba44671":" <div class=\"Banner_Intro2\"> <b>  <div class=\"chapters\">\ud83d\udcd4 Narrator<\/div><br><br><br>I Still have a lots of work to do on this data. But the deadline is up but I Will continously update more on this notebook \"Legend of Keg\". Would love to know your oppinion on my notebooks and viz your feedback, knowledge suggestions will push me forward for new tasks.","c00c99d2":"## <div class=\"section\">1.2 Gender <a id=\"1.2\"><\/a>","3560bbfe":"<div class=\"section\">5.3 Public Sharing Platforms <a id=\"5.3\"><\/a>","dfa0b7d3":"<div class=\"thing\">\u2694\ufe0f  The rolls preferred by scientists is to Analyze and understand data to influence product or business decisions 27.4% and Build prototypes to explore applying machine learning to new areas 15.5%","825b3a58":"<div class=\"Banner_Intro2\"> In Rosha Castle King Rosha told us about Cloud Computing, Public Sharing platforms, Media Sources and Notebooks. We also figure out the great battle between the python and R. We almost reached our destination and we got all the ideas of being a data scientist.","a5496d43":"## <div class=\"section\">1.1 Age <a id=\"1.1\"><\/a>","254130cd":"<div class=\"section\">5.1 Notebooks <a id=\"5.1\"><\/a>","f031ab61":"<hr>","01a9fbd1":"<div class=\"chapters\">Chapter 3 : Skills <a id=\"3\"><\/a>","605055db":"<div class=\"thing\">\u2694\ufe0f  Data scientists' most commonly used course platforms are Coursera and Kaggle, respectively, with 20% and 18% .","4f67bc25":"<div class=\"section\">3.7 Size of Company <a id=\"3.7\"><\/a>","c71d35d9":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Bay.gif?raw=true\"><\/p>","68c8748a":"<div class=\"thing\">\u2694\ufe0f  The highest count of annual earning is between 0-999$","7b57c6c4":"<div class=\"section\">5.4 Online Reporting Media and Sources <a id=\"5.4\"><\/a>","f7d3e594":"<div class=\"thing\">\u2694\ufe0f Most of the warriors comes from India 28%, followed by the United States with 10%.","e03e2565":"<div class=\"section\">3.11 Business Intelligence Tools <a id=\"3.11\"><\/a>","903ae3f9":"<div class=\"chapters\"> Chapter 2 : Academics and Education <a id=\"2\"><\/a>","b6ce2b81":"<div class=\"section\">3.4 Data Vizualization Tools <a id=\"3.4\"><\/a>","a7e675b8":"<div class=\"thing\">\u2694\ufe0f  The best fighting moves among data scientists are Linear or Logistic Regression 22.9%, Decision Trees\/ Random Forests 19.6% and GBMs 12.5%","72b96c1a":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Ice%20Zeadel.gif?raw=true\"><\/p>","f2174e3e":"<div class=\"thing\">\u2694\ufe0f  The Python is the clear winner here in terms of data scientists favourit language to use.","0ac39d25":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Tranao%20Republic.gif?raw=true\"><\/p>","1057455b":"<div class=\"section\">2.1 Education <a id=\"2.1\"><\/a>","382e8563":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Banner.png?raw=true\"><\/p>","5fc4251e":"<div class=\"Banner_Intro\"> Drotor Castle has so many hidden secrets about becoming a Data Scientist but journey isn't easy now. \ud83e\udd76 The cold and chill winds.","07398ebc":"<div class=\"thing\">\u2694\ufe0f  Technology industry is the common industy among 15% warriors and 12% of warriors works on Academics\/Education Industry","c8c8cfe6":"<hr>","b5eac58e":"<div class=\"section\">4.1 Experience of ML <a id=\"4.1\"><\/a>","e84cb9b5":"<div class=\"thing\">\u2694\ufe0f  Over 25.9% of Warriors use Colab Notebooks and 25.2% using Kaggle Notebooks.","edcd114f":"<div class=\"section\">3.8 Important Rolls <a id=\"3.8\"><\/a>","c5df4297":"<a id=\"0\"><\/a>\n<div class=\"chapters\">\ud83d\udcd5Importing Libraries &amp; Datasets ","9a697ee4":"<div class=\"thing\">\u2694\ufe0f  AWS highest among all cloud platforms used by participants then comes Google Cloud.","bc71763c":"## <div class=\"section\">1.3 Countries <a id=\"1.3\"><\/a>","f3c9c5d4":"<div class=\"thing\">\u2694\ufe0f  There are lots of under 1 year with ML experience followed by years.","87ceb2fe":" <div class=\"chapters\">Chapter 1 : Demographics<a id=\"1\"><\/a>","edbb5412":"<div class=\"chapters\"> Chapter 5 : Platforms\/ Battleground <a id=\"5\"><\/a>","019c4403":"<div class=\"section\">3.3 IDE Enviroment <a id=\"3.3\"><\/a>","e25ef2d5":"<div class=\"thing\">\u2694\ufe0f  There are 26.1% Students and 13.9% Data Scientist records given by Oracle.","5da28a67":"<div class=\"Banner_Intro2\"> The Great Journey of Keg the Warrior Starts with Cisan Village where he grew up. He is about to meet Oracle lady in the Ropia City.","6edfbd66":"<p><img src=\"https:\/\/github.com\/heyrobin\/DS-ML-2021-Kaggle-Survey\/blob\/main\/Stosha%20mountains.gif?raw=true\"><\/p>","dbe719bd":"<div class=\"Banner_Intro\"> See Ya! Its Not the end","8d8b3659":"<hr>"}}