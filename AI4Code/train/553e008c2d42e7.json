{"cell_type":{"acaed1b6":"code","954684d4":"code","58dfdd5a":"code","f794579d":"code","8bcb1347":"code","c1d53797":"code","10a8a0a5":"code","df63ecef":"code","0f3aa3e6":"code","9cf72d56":"code","4bb1f7f9":"code","5f335c86":"code","6cb094d8":"code","5fd6b1b3":"code","899a4fea":"code","1fc7f87e":"code","e2f82a0f":"code","a48eca17":"markdown"},"source":{"acaed1b6":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2 as cv\nimport os\nimport sys\nimport random","954684d4":"from tensorflow.keras.layers import Input, Dense, Activation, Concatenate,Dropout,ZeroPadding2D\nfrom tensorflow.keras.layers import Flatten, AveragePooling2D,MaxPooling2D, GlobalAveragePooling2D\nfrom tensorflow.keras.models import Model ,load_model\nfrom tensorflow.keras.layers import Conv2D,Dropout,Lambda,PReLU, LeakyReLU,BatchNormalization\nimport tensorflow as tf\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras import backend as k\nleaky_relu = LeakyReLU(alpha=0.01)\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.layers import add, Activation\nfrom tensorflow.keras.applications.vgg16 import VGG16 ","58dfdd5a":"vgg = VGG16(include_top=False, weights='imagenet')","f794579d":"for lyer in vgg.layers:\n    lyer.trainable = False\n","8bcb1347":"vgg.summary()","c1d53797":"size = 224\nshape = (size,size,3)","10a8a0a5":"def create_model():\n    inputs = Input(shape)\n    #inputs = BatchNormalization(axis= -1)(inputs)\n    outputs = vgg(inputs)\n    x = Flatten()(outputs)\n    \n    x = Dense(1024,activation='sigmoid')(x)\n    x = Dense(512,activation = 'sigmoid')(x)\n    output = Dense(3,activation = 'softmax')(x)\n    \n    model = Model(inputs,output)\n    print(model.summary())\n    return model","df63ecef":"mod = create_model()","0f3aa3e6":"def prepare(datadir):\n    classes = [i for i in os.listdir(datadir)]\n    #classes = classes[:35]\n    training=[]\n    for clas in classes:\n        Path=os.path.join(datadir,clas)\n        label=classes.index(clas)\n        for img in os.listdir(Path)[:870]:\n            imgarray= cv.imread(os.path.join(Path,img),cv.IMREAD_COLOR)\n            newimg =  cv.resize(imgarray,(size,size))\n            #newimg=cv.resize(imgarray,(160,160))\n            training.append([newimg,label])  \n    random.shuffle(training)\n    x=[]\n    y=[]\n    for fea,labl in training:\n        x.append(fea)\n        y.append(labl)\n    x=np.array(x)\n    y=np.array(y)\n    y = tf.one_hot(y,3)\n    \n    return {'imgs':x,'label':y}","9cf72d56":"data = prepare('..\/input\/bikess\/Bike side classifier data (complete)')\nx = data['imgs']\ny = data['label']","4bb1f7f9":"mod.compile(loss=\"categorical_crossentropy\", optimizer= Adam(), metrics=[\"accuracy\"])","5f335c86":"from tensorflow.keras.callbacks import TensorBoard,EarlyStopping\n#import datetime\n#logg = \"logs3\"\n#tfcallback = TensorBoard(log_dir=logg)\nerly = EarlyStopping(monitor = 'accuracy',patience = 5)","6cb094d8":"mod.fit(x,y,\n        steps_per_epoch=20,\n        epochs=30,validation_split = 0.2,callbacks = [erly])","5fd6b1b3":"keyss = mod.history.history\nnn = len(keyss['loss'])\nplt.plot(np.arange(nn),keyss['loss'],color='green',label='loss')\nplt.legend()\nplt.plot(np.arange(nn),keyss['val_loss'],color='black',label = 'val_loss')\nplt.legend()\nplt.plot(np.arange(nn),keyss['accuracy'],color='red',label = 'accurcy')\nplt.legend()\nplt.plot(np.arange(nn),keyss['val_accuracy'],color='purple',label = 'val_accu')\nplt.legend()\nplt.xlim(0,nn)\nplt.ylim(0,1)\nplt.show()\n","899a4fea":"test_data = prepare('..\/input\/evaluate\/test')\nx_test = test_data['imgs']\ny_test = test_data['label']","1fc7f87e":"mod.evaluate(x_test,y_test,verbose=2,return_dict = True)","e2f82a0f":"test_path = '..\/input\/evaluate\/test'\nclasses = [i for i in os.listdir(test_path)]\nfor clas in classes:\n    Path=os.path.join(test_path,clas)\n    for img in os.listdir(Path):\n        imgarray= cv.imread(os.path.join(Path,img),cv.IMREAD_COLOR)\n        imgg =  cv.resize(imgarray,(size,size))\n        imgg = np.reshape(imgg,(-1,size,size,3,1))\n        plt.imshow((imgarray.astype(np.uint8)))\n        prbs = mod.predict(imgg)\n        print(clss[np.argmax(prbs)])\n        plt.show() ","a48eca17":"**Prediction on new data**"}}