{"cell_type":{"8b0bd7ca":"code","a5fb20a5":"code","a40d29d8":"code","04032d4a":"code","e52d0089":"code","b9d8232d":"code","dd5a7d4f":"code","ffb3a350":"code","a1fc1f1a":"code","9eabd4fd":"code","b13d9f3f":"code","12311c3a":"code","8f92cc63":"code","7cb4bf58":"code","ee74c9a1":"code","f38b4443":"code","a6475110":"code","feb9a034":"code","f8fbea1b":"code","d28d2e07":"code","d3dbc683":"code","75823e14":"code","129de8bd":"code","5c8b9545":"code","ac89d3cb":"code","2b964b2f":"code","301edb1d":"code","89c67f93":"code","4d6ca7da":"code","02c1b6cf":"code","f0e913c3":"code","509a5ec4":"code","c1024a71":"code","b170bdc4":"code","6ae62b17":"code","5b58be52":"code","d2f954ed":"code","e00d92cf":"code","e7212d6d":"markdown","519d7a66":"markdown","65c04999":"markdown","6280ef04":"markdown","349e2ad1":"markdown","3d87aab0":"markdown","1dc2dae6":"markdown","0e3c557d":"markdown","5fddb66f":"markdown","bbb9eab9":"markdown","009ca427":"markdown","08a14ed5":"markdown","d98abfdc":"markdown","0772faaf":"markdown"},"source":{"8b0bd7ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5fb20a5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a40d29d8":"telco_cust = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","04032d4a":"telco_cust.info()","e52d0089":"telco_cust.head()","b9d8232d":"# count numbers of unique values in every columns\ntelco_cust.nunique()","dd5a7d4f":"# Converting Total Charges to a numerical data type.\ntelco_cust.TotalCharges = pd.to_numeric(telco_cust.TotalCharges, errors='coerce')\ntelco_cust.isnull().sum()","ffb3a350":"# Remove missing values \ntelco_cust.dropna(inplace = True)","a1fc1f1a":"# recheck that we don't have missing values\ntelco_cust.isnull().sum()","9eabd4fd":"# drop column that don't use ; customerID\ndataset = telco_cust.drop('customerID',axis = 1)","b13d9f3f":"dataset.head()","12311c3a":"dataset['Churn'].replace(to_replace='Yes', value=1, inplace=True)\ndataset['Churn'].replace(to_replace='No',  value=0, inplace=True)\n\ndummies = pd.get_dummies(dataset)\ndummies.head()","8f92cc63":"# correlation between every variables\nplt.figure(figsize=(9,5))\nsns.heatmap(dataset.corr(), annot=True)","7cb4bf58":"# gender\nsns.countplot(x='gender', data=dataset)","ee74c9a1":"# SeniorCitizen\nsns.countplot(x='SeniorCitizen', data=dataset)","f38b4443":"# Partner\nsns.countplot(x='Partner', data=dataset)","a6475110":"# Dependents\nsns.countplot(x='Dependents', data=dataset)","feb9a034":"# tenure\nsns.histplot(data=dataset, x=\"tenure\")","f8fbea1b":"# PhoneService\nsns.countplot(x='PhoneService', data=dataset)","d28d2e07":"# MultipleLines\nsns.countplot(x='MultipleLines', data=dataset)","d3dbc683":"# InternetService\nsns.countplot(x='InternetService', data=dataset)","75823e14":"# OnlineSecurity\nsns.countplot(x='OnlineSecurity', data=dataset)","129de8bd":"# OnlineBackup\nsns.countplot(x='OnlineBackup', data=dataset)","5c8b9545":"# DeviceProtection\nsns.countplot(x='DeviceProtection', data=dataset)","ac89d3cb":"# TechSupport\nsns.countplot(x='TechSupport', data=dataset)","2b964b2f":"# StreamingTV\nsns.countplot(x='StreamingTV', data=dataset)","301edb1d":"# StreamingMovies\nsns.countplot(x='StreamingMovies', data=dataset)","89c67f93":"# Contract\nsns.countplot(x='Contract', data=dataset)","4d6ca7da":"# PaperlessBilling\nsns.countplot(x='PaperlessBilling', data=dataset)","02c1b6cf":"# PaymentMethod\nplt.figure(figsize=(10,5))\nsns.countplot(x='PaymentMethod', data=dataset)","f0e913c3":"# MonthlyCharges\nsns.histplot(data=dataset, x=\"MonthlyCharges\")","509a5ec4":"# TotalCharges\nsns.histplot(data=dataset, x=\"TotalCharges\")","c1024a71":"# Churn\nsns.countplot(x='Churn', data=dataset)","b170bdc4":"X = dummies.drop(columns = ['Churn'])\ny = dummies['Churn'].values","6ae62b17":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.5, random_state = 42)","5b58be52":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)","d2f954ed":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","e00d92cf":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","e7212d6d":"## Handle Categorical Variables","519d7a66":"So there are 11 missing values for Total Charges","65c04999":"## Importing the libraries","6280ef04":"## Visualising the data","349e2ad1":"## Exploring the dataset","3d87aab0":"## Handle missing values","1dc2dae6":"## Training XGBoost on the Training set","0e3c557d":"## Applying k-Fold Cross Validation","5fddb66f":"## Importing the dataset","bbb9eab9":"## Making the Confusion Matrix","009ca427":"Telecom customer churn prediction based on XGBoost","08a14ed5":"- draws conclusion to make the model","d98abfdc":"## Splitting the dataset into the Training set and Test set","0772faaf":"# Telco Churn Prediction"}}