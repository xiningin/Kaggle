{"cell_type":{"da2a45f1":"code","aaedd02a":"code","0aee7969":"code","1e25440e":"code","89104ac0":"code","c25c2fac":"code","a400d0ac":"code","d6a208f6":"code","dcb3f829":"code","6a20c2b8":"code","2c5657fe":"code","8ba29ba0":"code","c252a7a3":"code","0fdd1cdc":"code","e0a8e826":"code","a178b10c":"code","c5e4cdde":"code","bdfed950":"code","bcd95d04":"code","50de2888":"code","de50b5ac":"code","e6247446":"code","13d8f407":"code","ff0f73d2":"code","75354567":"code","e3e95003":"code","f5be4aab":"code","d47dda80":"code","5882b7cd":"code","10d48ed3":"code","72e3b133":"code","dadaf8a7":"code","320a057c":"code","9e53d831":"markdown","aeaf04a9":"markdown","4f010913":"markdown","0c5850bc":"markdown","46e5cdb9":"markdown","a386c4d5":"markdown","5eaf5836":"markdown","de469597":"markdown","29a8bb0b":"markdown","c658ddf7":"markdown","ccea0bad":"markdown","355c87d4":"markdown","a124a6c7":"markdown","9f5156be":"markdown"},"source":{"da2a45f1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aaedd02a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom collections import Counter","0aee7969":"#load train_set, test_set\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","1e25440e":"#Make merged data with train, test data\ndf = pd.concat([train,test]).set_index('PassengerId')","89104ac0":"# features and survived\nf, ax = plt.subplots(1,3,figsize=(12,5))\nsns.countplot('Pclass',hue='Survived',data=df,ax=ax[0])\nax[0].set_title('Pclass\/Survived')\nsns.countplot('Sex', hue='Survived', data=df, ax=ax[1])\nax[1].set_title('Sex\/Survived')\nsns.countplot('Embarked', hue='Survived', data=df, ax=ax[2])\nax[2].set_title('Embarked\/Survived')","c25c2fac":"# age \/ survived (train set)\nf, ax = plt.subplots(1,2,figsize=(12,5))\nax[0].hist(train[train['Survived']==0]['Age'], bins=30)\nax[0].set_ylim([0,70])\nax[0].set_title('dead\/age')\nax[1].hist(train[train['Survived']==1]['Age'], bins=30, color='orange')\nax[1].set_ylim([0,70])\nax[1].set_title('alive\/age')","a400d0ac":"# find null in data\ndf.isnull().sum()","d6a208f6":"# fill Fare with Pclass.mean\n# because Fare is very relevant with Pclass.\ndf.Fare = df.Fare.fillna(df.Fare.loc[df.Pclass==3].median())","dcb3f829":"# fill Embarked with most frequent value\nCounter(df.Embarked)","6a20c2b8":"df.Embarked = df.Embarked.fillna('S')","2c5657fe":"# find highest correlation(with pearson)\ndf.Sex=[{'male':0, 'female':1}[i] for i in df.Sex]\ndf[['Age','Fare','Pclass','Sex','SibSp','Survived','Sex']].corr(method='pearson')","8ba29ba0":"# fill median Age of Pclass\nage = list()\nfor i in df.index:\n    if df.Age.isnull()[i]:\n        s = df['Pclass'][i]\n        age.append(df['Age'].loc[df['Pclass']== s].median())\n    else : age.append(df['Age'][i])\ndf.Age=age","c252a7a3":"# Cabinet start with\nCabin=df.Cabin.fillna('0')\nCabin_start=[i[0] for i in Cabin]\ndf.Cabin = Cabin_start","0fdd1cdc":"f, ax = plt.subplots(1,2,figsize=(12,5))\nsns.countplot('Cabin', hue='Survived', data=df, ax=ax[0])\nsns.countplot('Cabin', hue='Pclass', data=df, ax=ax[1])","e0a8e826":"# A~F are like deck name which sorted by floor of the ship  A:top ~ G:bottom\n# Sort Cabin to {A : Promenade \/ B,C : Bridge, Shelter \/ D,E : Salon, Upper \/  F,G: Middle, Lower}\ndef Cabin_cla(x):\n    if x=='A' : return 4\n    elif x=='B'or'C': return 3\n    elif x=='D'or'D': return 2\n    elif x=='F'or'G': return 1\n    else : return 0\ndf['Cabin']=list(map(Cabin_cla,df.Cabin))","a178b10c":"# Same Ticket means companions (family or friends)\ndf.sort_values(['Ticket']).head()","c5e4cdde":"# Companions number\ndf['Companions']=[dict(Counter(df.Ticket))[i] for i in df.Ticket]\ndf=df.drop('Ticket',axis=1)\nplt.figure()\nsns.countplot('Companions', hue='Survived', data=df)","bdfed950":"# Name classification\ntitle = [i.split(' ')[1].split('.')[0].strip() for i in df.Name]\nCounter(title)","bcd95d04":"df.Name=title\nplt.figure(figsize=(20,5))\nsns.countplot('Name', hue='Survived', data=df)","50de2888":"# Mr, Mrs, Miss, master are only meaningfull features\n# decide return value with linear survived proportion\n\ndef Name_cla(x):\n    if x=='Mr': return 1\n    elif x=='Master': return 3\n    elif x=='Miss': return 4\n    elif x=='Mrs': return 5\n    else : return 2\ndf.Name = list(map(Name_cla,title))","de50b5ac":"plt.figure(figsize=(20,5))\nsns.countplot('Name', hue='Survived', data=df)","e6247446":"# family (Parch, SibSp)\ndf['Family']=df['Parch']+df['SibSp']\nf, ax = plt.subplots(1,3, figsize=(14,5))\nsns.countplot('Parch', hue='Survived', data=df, ax=ax[0])\nax[0].set_title('Parch\/Survived')\nsns.countplot('SibSp', hue='Survived', data=df, ax=ax[1])\nax[1].set_title('SibSp\/Survived')\nsns.countplot('SibSp', hue='Survived', data=df, ax=ax[2])\nax[2].set_title('family\/Survived')","13d8f407":"# Parch and SibSp are simmilar with family\n# drop Parch SibSp\ndf=df.drop(['Parch','SibSp'],axis=1)","ff0f73d2":"# Set age level in order to predict overfitting \n# Because age is the most missing value(Assumed value)\ndef age_cla(x):\n    if x <= 9 : return 0\n    elif x <= 15 : return 1\n    elif x <= 25 : return 2\n    elif x <= 35 : return 3\n    elif x <= 45 : return 4\n    elif x <= 60 : return 5\n    else : return 6\ndf.Age = list(map(age_cla, df.Age))\n\n# age level distribution compare with train set\nf, ax = plt.subplots(2,2,figsize=(12,10))\nax[0,0].hist(df[df['Survived']==0]['Age'], bins=30)\nax[0,0].set_ylim([0,500])\nax[0,0].set_xlim([-0.5,8])\nax[0,0].set_title('dead\/age')\nax[0,1].hist(df[df['Survived']==1]['Age'], bins=30, color='orange')\nax[0,1].set_ylim([0,500])\nax[0,1].set_xlim([-0.5,8])\nax[0,1].set_title('alive\/age')\nax[1,0].hist(train[train['Survived']==0]['Age'], bins=30)\nax[1,0].set_ylim([0,70])\nax[1,0].set_title('dead\/age_train')\nax[1,1].hist(train[train['Survived']==1]['Age'], bins=30, color='orange')\nax[1,1].set_ylim([0,70])\nax[1,1].set_title('alive\/age_train')","75354567":"# str data to numeric\ndf.Embarked = [{'S':1, 'Q':2, 'C':3}[i] for i in df.Embarked]","e3e95003":"#Set y_train, X_train, X_test\ny_train=df.Survived.dropna()\nX_train=df[df.Survived.notnull()].drop('Survived',axis=1)\nX_test=df[df.Survived.isnull()].drop('Survived',axis=1)","f5be4aab":"X_train.head()","d47dda80":"# fit the classifier with train data\n# find max roc_auc_score\n# find max_depth maxized roc_auc_score and CV_score\nfrom sklearn.model_selection import cross_val_score\ncv_score = list()\nauc_score = list()\nfor i in [5,6,7,8,9]:\n    rfc=RandomForestClassifier(criterion='gini',random_state=4, max_depth=i)\n    rfc.fit(X_train, y_train)\n    tree_predicted = rfc.predict(X_train)\n    auc_score.append(roc_auc_score(y_train,tree_predicted))\n    scores = cross_val_score(rfc, X_train, y_train,cv=5)\n    cv_score.append(scores.mean())\ndf_score=pd.DataFrame({'max_depth':[5,6,7,8,9],'cv_score':cv_score,'auc_score':auc_score})","5882b7cd":"df_score","10d48ed3":"# to avoid overfitting\n# Selecting max_depth = 8\nrfc=RandomForestClassifier(criterion='gini',random_state=4, max_depth=8)\nrfc.fit(X_train, y_train)\ntree_predicted = rfc.predict(X_train)\nroc_auc_score(y_train,tree_predicted)","72e3b133":"# if I choose max_depth=8, final score is 0.78947\n# it scores higer when max_depth=7, \n# I think this because score is sensitive for small changes, \n# and model with max_depth=8 could be little overfitting.\n\nrfc=RandomForestClassifier(criterion='gini',random_state=4, max_depth=7)\nrfc.fit(X_train, y_train)\ntree_predicted = rfc.predict(X_train)\ny_test = rfc.predict(X_test)","dadaf8a7":"sum(y_test)","320a057c":"# Write the result to csv\nPassengerId = list(X_test.reset_index()['PassengerId'])\nresult = pd.DataFrame({'PassengerId':PassengerId,'Survived':y_test})\nresult['Survived']=[int(i) for i in result.Survived]\nresult.to_csv('result.csv', index=False)","9e53d831":"3.5 'Age'","aeaf04a9":"2.1 Fill 'fare' value","4f010913":"# 5. Result","0c5850bc":"# 2. Fill the null value \n","46e5cdb9":"3.3 'Name'","a386c4d5":"# 4. Machine Learning \n# (Random Forest Decision Tree)\n\nIt seems like simple dataset.\n\nso I used Random Forest model to predict the data.\n\nIt is simple but powerful.","5eaf5836":"3.1 'Cabin'","de469597":"2.3 fill 'age' values with Pclass","29a8bb0b":"3.2 'Ticket'","c658ddf7":"2.2 Fill 'embarked' values","ccea0bad":"# **titanic survivor classification by Random Forest **\nHi kaggle, I'm beginner, happy to learn from everyone!","355c87d4":"3.4 'Family'","a124a6c7":"# 1. Visualizing data","9f5156be":"# 3. Preprocessing data"}}