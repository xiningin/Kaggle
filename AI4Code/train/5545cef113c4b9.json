{"cell_type":{"a7572334":"code","137f3e11":"code","522a87ca":"code","2718cef7":"code","19964bb2":"code","d605c3d2":"code","7ac7683a":"code","5720fb7a":"code","ce03bd94":"code","79d729c9":"code","41e5a7b2":"code","6b0fd55b":"code","d110b4eb":"code","ebd21708":"code","39d97981":"code","5e48a694":"code","d99ce051":"code","41ef5922":"markdown","a5f852aa":"markdown","3eccffa8":"markdown","cbaa8168":"markdown","6dfac3b7":"markdown"},"source":{"a7572334":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","137f3e11":"#Importing required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","522a87ca":"df =  pd.read_csv('\/kaggle\/input\/ecommerce-purchases\/Ecommerce Purchases')","2718cef7":"#returns first 5 rows in the dataframe.\ndf.head(5)     ","19964bb2":"#Ignoring the data that is less than 3 digit (CC Security Code Column)\ndf = df[df['CC Security Code']>99]\ndf.head()","d605c3d2":"#Returns the summary of the dataset\ndf.info()","7ac7683a":"#Generates descriptive statistics.\ndf.describe()","5720fb7a":"#Returns the distinct observations over requested axis.\ndf.nunique()","ce03bd94":"#Plotting the seaborn countplot based on value_counts of AM or PM column\nsns.countplot(x='AM or PM',hue='AM or PM',data=df)\ndf['AM or PM'].value_counts()","79d729c9":"#Pulling the data before \/ from browser information column\ndf2 = df['Browser Info'].str.split(pat = '\/',expand=True)","41e5a7b2":"#Plotting pie chart based on value_counts of Browser Info column\ndf2[0].value_counts().plot(kind='pie',autopct='%1.0f%%')","6b0fd55b":"#Grouping based on CC Providers and representing the same on percentage wise using donut chart\na = df.groupby('CC Provider').size()\n#df.nunique\nlabels='American Express', 'Diners Club \/ Carte Blanche','Discover', 'JCB 15 digit','JCB 16 digit','Maestro','Mastercard','VISA 13 digit','VISA 16 digit','Voyager'\n      \nplt.pie(a, radius=2, labels=labels,autopct='%1.2f%%', pctdistance=1.1, labeldistance=1.2)\ncircle=plt.Circle(xy=(0,0),radius=1 ,color='white')\n\nax=plt.gca() #get current axis\nprint(ax)\nax.add_artist(circle)","d110b4eb":"#Here the grouping has been done in order to obtain the percentage of cc providers.\n#Since there were 10 unique cc providers, tracking of highest provider was necessary so that highest provider would be given with maximum offer.\n#For this process donut chart has been used.\nl = pd.crosstab(df['Language'], df['CC Provider'], values = df['Purchase Price'], aggfunc = 'sum')","ebd21708":"l.plot(kind='bar',figsize=(10,7))\nplt.show()","39d97981":"df1=df.join(\n    df['Address'].str.extract(\n        r\"((?P<City>[A-Z][a-z]+),\\s(?P<State>[A-Z]{2}))\",\n        expand=False\n    )[[\"City\", \"State\"]]\n)\ndf1.head()","5e48a694":"df1['Purchase Price']=df1['Purchase Price'].astype('float')\n\nCitywise=df1.groupby(by=['State'])['Purchase Price'].sum()\nCitywise=pd.DataFrame(Citywise)\nCitywise=Citywise.reset_index(level=['State'])\n\nCitywise","d99ce051":"#importing the plotly packages in offline mode.\n\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n\n#Visualising the state wise purchase in a scatter plot\n\ndata = [go.Scatter(x=Citywise['Purchase Price'],y=Citywise['State'],mode='markers')]\ngo.Figure(data)","41ef5922":"# 3.Summarizing Purchase Price based on CC Providers and Language","a5f852aa":"# 4. State wise Purchase Price","3eccffa8":"#Basic data cleaning","cbaa8168":"# 1. Time of purchase with browser information","6dfac3b7":"# 2.Grouping the CC Providers and finding the percentage of usage"}}