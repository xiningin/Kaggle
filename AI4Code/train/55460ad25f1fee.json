{"cell_type":{"52e14435":"code","d15977c8":"code","60769472":"code","e9f5cc2a":"code","f1520d88":"code","25de6537":"code","f979be7f":"code","fb917c75":"code","79bf8838":"code","510cb1db":"code","e295df55":"code","7034bd9f":"code","6399532c":"code","078bc66f":"code","5eef8b76":"code","424082d5":"code","c6962720":"code","72cca6e4":"code","baae3e6c":"code","63baaba9":"code","4e6576ac":"code","30554d99":"code","e553ba75":"code","30b32e05":"code","0575c18f":"code","31511b73":"code","0b415302":"code","0077b96a":"code","cf4496f0":"code","9af4a0d5":"code","b3ef457a":"markdown","3a9dda53":"markdown","99fbd461":"markdown","feda7b9e":"markdown","605bb2ea":"markdown","c41beae2":"markdown","4392fc91":"markdown","ec1b37c9":"markdown","53105723":"markdown","68312e8f":"markdown","5301048c":"markdown","ee8e9094":"markdown","95b9ff46":"markdown","b49b013f":"markdown","12ffa1e8":"markdown","05da7f92":"markdown","1c684730":"markdown","0f92234f":"markdown","5e3e00da":"markdown","e431f238":"markdown","ee0818e2":"markdown","cc897169":"markdown","f9ae2f08":"markdown"},"source":{"52e14435":"# import libraries \n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d15977c8":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\npd.set_option('display.max_column', 100)\ntrain_df.head()","60769472":"train_df.info()","e9f5cc2a":"train_df.describe().T","f1520d88":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (total \/  train_df.shape[0]).sort_values(ascending = False)   \nmissing_data = pd.concat([total, percent], axis = 1, keys = ['total', 'percent'])\nmissing_data.head(20)","25de6537":"# Distribution of missing data\nbase_color = sns.color_palette()[0]\nsns.barplot(data = missing_data, x = missing_data[missing_data['total']>0].index, y = missing_data.loc[missing_data['total']>0, 'total'], color = base_color)\nplt.xticks(rotation = 90);","f979be7f":"# correlation matrix and heatmap to stand on important features\ncorr_matrix = train_df.corr()\nmask = np.triu(np.ones_like(corr_matrix,dtype = bool))\nplt.figure(figsize = (20,10))\nsns.heatmap(corr_matrix, fmt = '0.1f', cmap = 'Blues', mask = mask, annot = True)\nplt.title(\"Correlation Analysis\");","fb917c75":"corr_matrix['SalePrice'].sort_values(ascending = False)","79bf8838":"cols = corr_matrix.nlargest(11, 'SalePrice')['SalePrice'].index\ncorr_matrix_cols = np.corrcoef(train_df[cols].values.T)\nmask_cols = np.triu(np.ones_like(corr_matrix_cols, dtype = bool))\nplt.figure(figsize = (15,10))\nsns.heatmap(corr_matrix_cols, fmt = '0.1f', mask = mask_cols, cmap = \"Blues\", annot = True, yticklabels=cols.values, xticklabels=cols.values)\nplt.title('correlayion between first 15 features');","510cb1db":"plt.hist(data = train_df, x = 'SalePrice', bins = 20)\nplt.title(\"Sale Price Distribution\")\nplt.xlabel(\"Sale Price\", fontsize = 12);","e295df55":"plt.scatter(x = train_df['GrLivArea'], y = train_df['SalePrice'], alpha = 0.2)\nplt.xlabel(\"GrLivArea\")\nplt.ylabel('sale Price')\nplt.title(\"GrLivArea vs sale Price\");","7034bd9f":"plt.scatter(x = train_df['TotalBsmtSF'], y = train_df['SalePrice'], alpha = 0.2)\nplt.xlabel(\"TotalBsmtSF\")\nplt.ylabel('sale Price')\nplt.title(\"TotalBsmtSF vs sale Price\");","6399532c":"OverallQual_types = train_df['OverallQual'].value_counts()\nOverallQual_types","078bc66f":"sns.countplot(data = train_df, x = 'OverallQual', color = base_color, order = OverallQual_types.index)\nplt.title(\"Distribution Of OverallQual\");","5eef8b76":"# box plot\nplt.figure(figsize = (12,8))\nsns.boxplot(data = train_df, x = 'OverallQual', y = 'SalePrice', color = base_color)\nplt.title(\"OverallQual vs SalePrice\");","424082d5":"plt.figure(figsize = (20,10))\nsns.boxplot(data = train_df, x = 'YearBuilt', y = 'SalePrice', color = base_color)\nplt.title(\"YearBuilt VS SalePrice\");","c6962720":"GarageCars_types = train_df['GarageCars'].value_counts()\nGarageCars_types","72cca6e4":"sns.countplot(data = train_df, x = 'GarageCars', color = base_color, order = GarageCars_types.index)\nplt.title(\"Distribution Of OverallQual\");","baae3e6c":"plt.figure(figsize = (12,8))\nsns.boxplot(data = train_df, x = 'GarageCars', y = 'SalePrice', color = base_color)\nplt.title(\"GarageCars VS SalePrice\");","63baaba9":"FullBath_types = train_df['FullBath'].value_counts()\nFullBath_types","4e6576ac":"sns.countplot(data = train_df, x = 'FullBath', color = base_color, order = GarageCars_types.index)\nplt.title(\"Distribution Of FullBath\");","30554d99":"plt.figure(figsize = (10,6))\nsns.violinplot(data = train_df, x = 'FullBath', y = 'SalePrice', color = base_color, inner = None)\nplt.title(\"FullBath VS SalePrice\");","e553ba75":"# dropping some features of missing data and features of less importance\ntrain_df.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'LotFrontage','1stFlrSF', 'TotRmsAbvGrd', 'GarageArea', 'Id'], axis = 1, inplace = True)\n","30b32e05":"# dropping some outliers from GrLivArea\ntrain_df['GrLivArea'].sort_values(ascending = False).index[:2]\ntrain_df.drop(index = train_df['GrLivArea'].sort_values(ascending = False).index[:2], axis = 1, inplace = True)\ntrain_df.shape","0575c18f":"# filling missing data in categorical[text] features\ndef impute_categorical_nan(df, variable) :\n    mode = df[variable].mode()[0]\n    df[variable].fillna(mode, inplace = True)\n# filling missing in categorical[numbers] features \ndef impute_nan(df, variable) : \n    random_sample = df[variable].dropna().sample(df[variable].isnull().sum())\n    random_sample.index = df[df[variable].isnull()].index\n    df.loc[df[variable].isnull(), variable] = random_sample","31511b73":"# getting categorical features having missing data then pass it to impute_nan function\nfor feature in missing_data[6:19].index :\n    if feature not in (train_df.describe().T.index) :   # if it is not in describe then it is categorical feature \n        impute_categorical_nan(train_df, feature)\n    else :                                              # it is numeric \n        impute_nan(train_df, feature)\n","0b415302":"# check for nulls\ntrain_df.isnull().sum().max()","0077b96a":"categorical_feautres_describtion = train_df.describe(include= 'O' ).T\ncategorical_feautres_describtion ","cf4496f0":"# dropping some categorical features\nfeatures_2_drop = []\nfor index, row in categorical_feautres_describtion.iterrows() :\n    if row['freq'] > 1400 or ((train_df.shape[0] - row['freq']) \/ (row['unique']-1)) < 50 :\n            features_2_drop.append(index)\n        \ntrain_df.drop(columns = features_2_drop, axis = 1, inplace = True)\ntrain_df.shape","9af4a0d5":"# get dummies\ntrain_df = pd.get_dummies(train_df)\nprint(train_df.shape)\ntrain_df.head()","b3ef457a":"6. GarageCars Distribution And Relation With SalePrice","3a9dda53":"7. FullBath Distribution And Relation With SalePrice","99fbd461":"#### as OverallQual increases SalePrice Increase but take care there is some outliers  ","feda7b9e":"#### let's focus on correlation between saleprice and all features","605bb2ea":"# Preparing Data For The Model","c41beae2":"2. Handling Categorical Features","4392fc91":"# Exploring and Visualizing Data it to gain insights ","ec1b37c9":"#### According to missing data i will delete the first six features in missing_data in the section \"Preparing Data For The Model\" becuase of the large number of missy data","53105723":"3. TotalBsmtSF with SalePrice","68312e8f":"1. Handling Missing Data","5301048c":"#### i will take the first 11 feature as they thde most important","ee8e9094":"### What about Missing Data ??","95b9ff46":"### Univariate And Bivariate Visualization Of Important Features ","b49b013f":"4. OverallQual Distribution And Relation With SalePrice","12ffa1e8":"# Get The Data","05da7f92":"### Correlations and Heat Map","1c684730":"## Data Is Ready For The Model","0f92234f":"### some conclusions from correleation\n1. OverAllQual is the most effective feature \n2. GarageCars and GarageArea are very colerrated so we will drop one of them [\"GarageArea\"]\n3. TotalBsmtSf and lstFlrSF are very colerrated so we will drop one of them [\"lstFlrSF\"]\n4. GrLiveArea and TotRmsAbvGrd are very colerrated so we will drop one of them [\"TotRmsAbvGrd\"]","5e3e00da":"#### there are two observations that are outliers we will remove them","e431f238":"2. GrlivArea with SalePrice","ee0818e2":"5. YearBuilt VS SalePrice","cc897169":"1. Analizing SalePrice","f9ae2f08":"#### there is many features having one dominant category which will not affect in the model so i will drop them"}}