{"cell_type":{"9d7258ef":"code","d5ef9c57":"code","70a1bec1":"code","00061127":"code","f8b96857":"code","68b51cfe":"code","1201fc8a":"code","b31437d9":"code","b2f32c15":"code","bcc11c0a":"code","f4a5ebc4":"code","b9682fba":"code","9c0e4cf6":"code","cb608952":"code","0bab1cc6":"code","d57d6ddd":"code","fe8ef524":"code","442e4860":"code","334a3021":"code","dad7bc91":"code","8d16951c":"code","1e61419d":"code","bb5cf34b":"code","0d6bca97":"code","cae72b53":"code","89279a78":"code","a09e03a4":"code","f549f96e":"code","9fb46906":"code","3fe10d08":"code","3001d609":"code","9dea3a6b":"code","e4b6da58":"code","97f078a9":"code","7254fd7f":"code","7ad8af00":"code","e1470d5b":"code","3c69fffb":"code","a67a0917":"code","cd0b8a10":"code","c5abbc83":"code","17c1fd74":"code","d385c7c3":"code","79a42104":"code","e76a63bd":"code","960517e5":"code","6a0c775a":"code","1c9b12eb":"code","62de6bef":"code","2b6ba202":"code","1cef9113":"code","4e9e7222":"code","5c9f05f0":"code","7b655e07":"code","95efc5d7":"code","1701b0d4":"code","057cce7a":"code","b71b9e89":"code","a5be4e96":"code","5b7246cf":"code","4615634b":"code","ef618ce4":"code","c9562dd9":"code","5594eb32":"code","945c27df":"code","5cf23553":"code","0ed3a25c":"code","87242c3a":"code","c211ccb5":"code","43218fe2":"code","61d02196":"code","c22ae09d":"code","cf8fcb44":"code","c34d0ff8":"code","85cec916":"code","657a12ad":"code","09fc672c":"code","c5930d62":"code","47e31505":"code","8497b4a5":"code","f8b770b3":"code","5e8294da":"code","bd0604af":"code","52f6d371":"code","98a8dd3c":"code","5e4544c5":"code","bd942705":"code","81c12b30":"code","03e3cba2":"code","555336b4":"code","ddd6e49e":"code","2ea39451":"code","30ee2d1f":"code","60b668f2":"code","d85bd7b4":"code","10c43a3e":"code","390ed378":"code","a9ba55d0":"code","1f2eab39":"code","348c954c":"code","1145c55d":"code","dfe4ce80":"code","e5e6e7e7":"code","17fceda2":"code","7516ba85":"code","3e806875":"code","663c763a":"code","1773a4b5":"code","d638e2c5":"code","6a9ad79f":"code","4cad5259":"code","e6da34da":"code","27f0bdb2":"code","676f9d9b":"code","9c231449":"code","3c119401":"code","34c972de":"code","cb54d256":"code","698ca9f1":"code","c01f049b":"code","fa038158":"code","3aa83bec":"code","8d9e2ba3":"code","3680e4b8":"code","ae1f0659":"code","54d248ac":"code","f567d7ef":"code","9479b973":"code","f43a3431":"code","89eb0afb":"code","96fcec56":"code","2988dc84":"markdown","7b381107":"markdown","ed9ec3f7":"markdown","e1f3b638":"markdown","82843f35":"markdown","dfbda4a2":"markdown","49062219":"markdown","b1a4588f":"markdown","cde8b7d2":"markdown","c8e6e34f":"markdown","2421967c":"markdown","b1fc14f0":"markdown","1795aa45":"markdown","a0f3e33c":"markdown","84a0f526":"markdown","9e6d0168":"markdown","3fbfb90c":"markdown"},"source":{"9d7258ef":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","d5ef9c57":"data = pd.read_excel('..\/input\/Online Retail.xlsx')","70a1bec1":"data.head()","00061127":"data.shape","f8b96857":"data.info()","68b51cfe":"data.isnull().sum()","1201fc8a":"data.loc[data.CustomerID.isnull()].head()","b31437d9":"data.duplicated().sum()","b2f32c15":"data = data.drop_duplicates()","bcc11c0a":"data = data.dropna(subset=['CustomerID'])","f4a5ebc4":"data.isnull().sum().sum()","b9682fba":"data.shape","9c0e4cf6":"data['Country'].value_counts().plot.bar(figsize=(18,5))\nplt.show()","cb608952":"(data.groupby('StockCode')['Description'].nunique() > 1).sum()","0bab1cc6":"data['StockCode'].nunique(), data['Description'].nunique()","d57d6ddd":"np.logical_or(data['Quantity'] <=0, (data['UnitPrice'] <=0)).value_counts(normalize=True)","fe8ef524":"data = data.query('Quantity > 0 and UnitPrice > 0')","442e4860":"data['InvoiceDay'] = data['InvoiceDate'].dt.date\ndata['InvoiceDay'] = pd.to_datetime(data['InvoiceDay'])","334a3021":"grouping = data.groupby('CustomerID')['InvoiceDay']","dad7bc91":"data['CohortDay'] = grouping.transform('min')","8d16951c":"data.head()","1e61419d":"data['CohortIndex'] = (data['InvoiceDay'] - data['CohortDay']).dt.days","bb5cf34b":"data.head()","0d6bca97":"data.tail()","cae72b53":"data.info()","89279a78":"data['CohortIndex'] = data['CohortIndex'].add(1)","a09e03a4":"data.head()\n","f549f96e":"import datetime as dt\ndef get_month(x): return dt.datetime(x.year, x.month, 1)","9fb46906":"data['InvoiceMonth'] = data['InvoiceDate'].apply(get_month)","3fe10d08":"data.head()","3001d609":"grouping = data.groupby('CustomerID')['InvoiceMonth']","9dea3a6b":"data['CohortMonth'] = grouping.transform('min')","e4b6da58":"data.tail()","97f078a9":"def get_date_int(df, column):\n    year = df[column].dt.year\n    month = df[column].dt.month\n    day = df[column].dt.day\n    return year, month, day","7254fd7f":"invoice_year, invoice_month, _ = get_date_int(data, 'InvoiceMonth')\ncohort_year, cohort_month, _ = get_date_int(data, 'CohortMonth')","7ad8af00":"years_diff = invoice_year - cohort_year\nmonths_diff = invoice_month - cohort_month","e1470d5b":"data['CohortIndex'] = years_diff * 12 + months_diff + 1","3c69fffb":"data.tail()","a67a0917":"grouping = data.groupby(['CohortMonth','CohortIndex'])","cd0b8a10":"grouping['CustomerID'].nunique().head(10)","c5abbc83":"cohort_data_1 = grouping['CustomerID'].apply(pd.Series.nunique)\ncohort_data = grouping['CustomerID'].nunique()","17c1fd74":"(cohort_data_1!=cohort_data).sum()","d385c7c3":"cohort_data = cohort_data.reset_index()","79a42104":"cohort_data.head()","e76a63bd":"cohort_counts = cohort_data.pivot(index='CohortMonth', columns='CohortIndex', values='CustomerID')","960517e5":"cohort_counts","6a0c775a":"cohort_sizes = cohort_counts.iloc[:,0]","1c9b12eb":"retention = cohort_counts.div(cohort_sizes, axis=0)","62de6bef":"retention.round(3) * 100","2b6ba202":"import seaborn as sns\nretention.index = retention.index.date\n\nplt.figure(figsize=(8, 6))\nplt.title('Retention by Monthly Cohorts')\nsns.heatmap(retention, annot=True, cmap='BuGn')\nplt.show()","1cef9113":"grouping = data.groupby(['CohortMonth', 'CohortIndex'])","4e9e7222":"cohort_data = grouping['UnitPrice'].mean()","5c9f05f0":"cohort_data = cohort_data.reset_index()","7b655e07":"cohort_data.head()","95efc5d7":"average_quantity = cohort_data.pivot(index='CohortMonth', \n                                     columns='CohortIndex', \n                                     values='UnitPrice').round(1)\n\naverage_quantity","1701b0d4":"average_quantity.index = average_quantity.index.date\n\nplt.figure(figsize=(8, 6))\nplt.title('Average Spend by Monthly Cohorts')\nsns.heatmap(average_quantity, annot=True, cmap='Blues')\nplt.show()","057cce7a":"cohort_data = grouping['StockCode'].nunique().reset_index()","b71b9e89":"cohort_data.head()","a5be4e96":"different_products = cohort_data.pivot(index='CohortMonth', \n                                       columns='CohortIndex', \n                                       values='StockCode').round(1)\ndifferent_products.index = different_products.index.date\n\ndifferent_products","5b7246cf":"\nplt.figure(figsize=(12, 8))\nsns.heatmap(different_products, annot=True, fmt=\".0f\", cmap='Reds', linewidths=0.1)\nplt.show()","4615634b":"print(\"Min: {} | Max: {}\".format(data['InvoiceDate'].dt.date.min(), data['InvoiceDate'].dt.date.max()))","ef618ce4":"snapshot_date = data['InvoiceDate'].max() + dt.timedelta(days=1)\nsnapshot_date","c9562dd9":"data['TotalSum'] = data['UnitPrice']*data['Quantity']\ndata['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'])","5594eb32":"data.head()","945c27df":"datamart = data.groupby('CustomerID').\\\n    agg({\n        'InvoiceDate': lambda x: (snapshot_date - x.max()).days,\n        'InvoiceNo': 'count',\n        'TotalSum': 'sum'\n    })\n","5cf23553":"datamart.head()","0ed3a25c":"datamart.rename(\n    columns={\n        'InvoiceDate': 'Recency',\n        'InvoiceNo': 'Frequency',\n        'TotalSum': 'MonetaryValue'}, inplace=True)","87242c3a":"datamart.head()","c211ccb5":"# Create labels for Recency, Frequency and MonetaryValue\nr_labels = range(3, 0, -1)\nf_labels = range(1, 4)\nm_labels = range(1, 4)","43218fe2":"r_groups = pd.qcut(datamart['Recency'], q=3, labels=r_labels)\nf_groups = pd.qcut(datamart['Frequency'], q=3, labels=f_labels)\nm_groups = pd.qcut(datamart['MonetaryValue'], q=3, labels=m_labels)","61d02196":"datamart = datamart.assign(R=r_groups, F=f_groups, M=m_groups)","c22ae09d":"datamart['RFM_Score'] = datamart[['R', 'F', 'M']].sum(axis=1)","cf8fcb44":"datamart['RFM_Segment'] = datamart.apply(lambda x: str(x['R']) + str(x['F']) + str(x['M']), axis=1)","c34d0ff8":"datamart.head()","85cec916":"datamart.sort_values('RFM_Score').head()","657a12ad":"datamart.sort_values('RFM_Score', ascending=False).head()","09fc672c":"def rfm_level(df):\n    if df['RFM_Score'] >= 9:\n        return 'Top'\n    elif ((df['RFM_Score'] >= 6) and (df['RFM_Score'] < 9)):\n        return 'Middle'\n    else:\n        return 'Low'","c5930d62":"datamart['RFM_Level'] = datamart.apply(rfm_level, axis=1)","47e31505":"datamart.head()","8497b4a5":"rfm_level_agg = datamart.groupby('RFM_Level').agg({'Recency': 'mean', \n                                                   'Frequency':'mean', \n                                                   'MonetaryValue':['mean', 'count']}).round(1)","f8b770b3":"rfm_level_agg","5e8294da":"datamart[['Recency', 'Frequency', 'MonetaryValue']].describe()","bd0604af":"datamart.shape","52f6d371":"datamart[['Recency', 'Frequency', 'MonetaryValue']].\\\n    plot(kind='kde', figsize=(16, 10), subplots=True, sharex=False, layout=(3, 1))\nplt.show()","98a8dd3c":"from scipy.stats import boxcox","5e4544c5":"boxcox_recency, lam_recency = boxcox(datamart['Recency'])","bd942705":"def plot_transformation(label, before_values, after_values):\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n    fig.suptitle(label)\n    ax[0].set_xlabel('BEFORE')\n    sns.distplot(before_values, ax=ax[0])\n    ax[1].set_xlabel('AFTER')\n    sns.distplot(after_values, ax=ax[1])\n    plt.show()","81c12b30":"plot_transformation('Recency', datamart['Recency'].values, boxcox_recency)","03e3cba2":"boxcox_frequency, lam_frequency = boxcox(datamart['Frequency'])\nplot_transformation('Frequency', datamart['Frequency'].values, boxcox_frequency)","555336b4":"boxcox_monetaryvalue, lam_monetaryvalue = boxcox(datamart['MonetaryValue'])\nplot_transformation('MonetaryValue', datamart['MonetaryValue'].values, boxcox_monetaryvalue)","ddd6e49e":"datamart_rfm = datamart[['Recency', 'Frequency', 'MonetaryValue']]","2ea39451":"from sklearn.preprocessing import StandardScaler\n\ndatamart_unskewed = datamart_rfm.copy()\ndatamart_unskewed['Recency'] = boxcox_recency\ndatamart_unskewed['Frequency'] = boxcox_frequency\ndatamart_unskewed['MonetaryValue'] = boxcox_monetaryvalue","30ee2d1f":"scaler = StandardScaler()\ndatamart_normalized = scaler.fit_transform(datamart_unskewed)\ndatamart_normalized = pd.DataFrame(data=datamart_normalized, \n                                   index=datamart_rfm.index, \n                                   columns=datamart_rfm.columns)","60b668f2":"datamart_normalized.head()","d85bd7b4":"from sklearn.cluster import KMeans","10c43a3e":"sse = {}\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=1)\n    kmeans.fit(datamart_normalized)\n    sse[k] = kmeans.inertia_","390ed378":"sns.pointplot(x=list(sse.keys()), y=list(sse.values()))\nplt.show()","a9ba55d0":"k_choosen = 3","1f2eab39":"kmeans = KMeans(n_clusters=k_choosen, random_state=1)\nkmeans.fit(datamart_normalized)","348c954c":"datamart_cluster = datamart_rfm.assign(Cluster=kmeans.labels_)","1145c55d":"datamart_cluster.groupby('Cluster').agg({\n    'Recency': 'mean',\n    'Frequency': 'mean',\n    'MonetaryValue': ['mean', 'count'],\n}).round(0)","dfe4ce80":"datamart_cluster.head()","e5e6e7e7":"datamart_melt = pd.melt(datamart_normalized.assign(Cluster=kmeans.labels_).reset_index(),\n                        id_vars=['CustomerID', 'Cluster'],\n                        value_vars=['Recency', 'Frequency', 'MonetaryValue'],\n                        var_name='Metric', value_name='Value'\n                       )","17fceda2":"datamart_melt.head()","7516ba85":"plt.title('Snake plot of normalized variables')\nplt.xlabel('Metric')\nplt.ylabel('Value')\nsns.lineplot(data=datamart_melt, x='Metric', y='Value', hue='Cluster')\nplt.show()","3e806875":"datamart_melt.describe().round(2)","663c763a":"datamart_cluster.head()","1773a4b5":"cluster_avg = datamart_cluster.groupby(['Cluster']).mean() ","d638e2c5":"population_avg = datamart_rfm.mean()","6a9ad79f":"relative_imp = cluster_avg \/ population_avg - 1","4cad5259":"relative_imp.round(2)","e6da34da":"plt.title('Relative importance of attributes')\nsns.heatmap(relative_imp, annot=True, fmt='.2f', cmap='RdYlGn')\nplt.show()","27f0bdb2":"def get_recency(x):\n    return (snapshot_date - x.max()).days\n\ndef get_tenure(x):\n    return (snapshot_date - x.min()).days\n    \ndatamart_rfmt = data.groupby('CustomerID').agg({'InvoiceDate': [get_recency, get_tenure],\n                                           'InvoiceNo': 'count', \n                                           'TotalSum': 'sum'})","676f9d9b":"datamart_rfmt.head()","9c231449":"datamart_rfmt.columns = ['Recency', 'Tenure', 'Frequency', 'MonetaryValue']","3c119401":"datamart_rfmt.head()","34c972de":"boxcox_recency, lam_recency = boxcox(datamart_rfmt['Recency'])\nboxcox_tenure, lam_tenure = boxcox(datamart_rfmt['Tenure'])\nboxcox_frequency, lam_frequency = boxcox(datamart_rfmt['Frequency'])\nboxcox_monetaryValue, lam_monetaryValue = boxcox(datamart_rfmt['MonetaryValue'])","cb54d256":"datamart_unskewed = datamart_rfmt.copy()\ndatamart_unskewed['Recency'] = boxcox_recency\ndatamart_unskewed['Tenure'] = boxcox_tenure\ndatamart_unskewed['Frequency'] = boxcox_frequency\ndatamart_unskewed['MonetaryValue'] = boxcox_monetaryvalue","698ca9f1":"scaler = StandardScaler()\ndatamart_normalized = scaler.fit_transform(datamart_unskewed)\ndatamart_normalized = pd.DataFrame(data=datamart_normalized, \n                                   index=datamart_rfmt.index, \n                                   columns=datamart_rfmt.columns)","c01f049b":"sse = {}\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=1)\n    kmeans.fit(datamart_normalized)\n    sse[k] = kmeans.inertia_","fa038158":"sns.pointplot(x=list(sse.keys()), y=list(sse.values()))\nplt.show()","3aa83bec":"k_choosen = 3\n\nkmeans = KMeans(n_clusters=k_choosen, random_state=1)\nkmeans.fit(datamart_normalized)","8d9e2ba3":"datamart_cluster = datamart_rfmt.assign(Cluster=kmeans.labels_)","3680e4b8":"datamart_cluster.groupby('Cluster').agg({\n    'Recency': 'mean',\n    'Tenure': 'mean',\n    'Frequency': 'mean',\n    'MonetaryValue': ['mean', 'count'],\n}).round(0)","ae1f0659":"datamart_cluster.groupby('Cluster').mean() ","54d248ac":"cluster_avg = datamart_cluster.groupby(['Cluster']).mean() \npopulation_avg = datamart_cluster[['Recency', 'Tenure', 'Frequency', 'MonetaryValue']].mean()\nrelative_imp = cluster_avg \/ population_avg - 1","f567d7ef":"relative_imp","9479b973":"sns.heatmap(relative_imp, annot=True, fmt='.2f', cmap='RdYlGn')\nplt.show()","f43a3431":"datamart_melt = pd.melt(\n    datamart_normalized.assign(Cluster=kmeans.labels_).reset_index(), \n    id_vars=['CustomerID', 'Cluster'],\n    value_vars=['Recency', 'Tenure', 'Frequency', 'MonetaryValue'], \n    var_name='Metric', value_name='Value'\n)","89eb0afb":"plt.title('Snake plot of normalized variables')\nplt.xlabel('Metric')\nplt.ylabel('Value')\nsns.lineplot(data=datamart_melt, x='Metric', y='Value', hue='Cluster')\nplt.show()","96fcec56":"datamart_normalized.head()","2988dc84":"## Recency, Frequency, Monetary value, Tenure (RFMT) segmentation\nWe add Tenure to our model (the number of days since a client did his first purchase)","7b381107":"## Recency, Frequency, Monetary (RFM) segmentation\n","ed9ec3f7":"We use more understable labels to categorize the customers:","e1f3b638":"# Summary\nDifferent techniques for customer segmentation:\n\n- cohort analysis\n- Recency, Frequency, Monetary Value analysis\n- Clustering with kmeans\n- Recency, Frequency, Monetary Value, Tenure analysis\n\nTo interpret the obtained clusters we have used:\n- snake plots\n- relative importance of attributes\n","82843f35":"Let's use months for CohortIndex, instead of days:","dfbda4a2":"There are some StockCode with different descriptions:","49062219":"There are some negative values for 'UnitPrice' which may be returns. We will remove them for now:","b1a4588f":"Let's check the number of different products bought  across time and across cohorts.","cde8b7d2":"References:\n\n- https:\/\/en.wikipedia.org\/wiki\/RFM_(customer_value)\n- https:\/\/www.datacamp.com\/courses\/customer-segmentation-in-python\n- https:\/\/towardsdatascience.com\/find-your-best-customers-with-customer-segmentation-in-python-61d602f9eee6\n","c8e6e34f":"Worst 5 clients:","2421967c":"Customer retention rate across time per cohort:","b1fc14f0":"We create the cohorts:","1795aa45":"Best 5 clients:","a0f3e33c":"Let's check the average price across time and across cohorts.","84a0f526":"### Snake plot","9e6d0168":"## K-means\nwe are going to use kmeans to find a meaninfull number of groups. The features used need to fit some assumptions:\n\n- all features must have the same mean\n- all features must have the same variance\n- no skewed features","3fbfb90c":"### Relative importance of each attribute"}}