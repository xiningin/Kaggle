{"cell_type":{"75c51791":"code","b5d3bcf5":"code","f9647b3c":"code","08eeb3b4":"code","e31661ce":"code","820caf08":"code","250c5f8a":"code","82b11a97":"code","d047de10":"code","471184ea":"code","bdefca90":"code","c5171a94":"code","052baeb7":"code","80a3d389":"code","ef39e1e6":"code","cad9b3ad":"code","ec709ca9":"code","ea1d078c":"code","fd67a348":"code","dc423331":"code","b40b6d0e":"markdown","429d2494":"markdown","c156386b":"markdown","7871a8d4":"markdown","09baad4b":"markdown","127a30da":"markdown","4e4bca60":"markdown","c0bef8da":"markdown","a72519f6":"markdown","1ba2db91":"markdown","9a1b0e95":"markdown","b7e9e1db":"markdown","10e9812a":"markdown","9ed1d8da":"markdown","9805cb00":"markdown"},"source":{"75c51791":"import os\nimport random \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use(\"ggplot\")\n%matplotlib inline\nimport cv2\nfrom tqdm import tqdm_notebook,tnrange\nfrom glob import glob\nfrom itertools import chain\nfrom skimage.io import imread,imshow,concatenate_images\nfrom skimage.morphology import label\nfrom skimage.transform import resize\nfrom skimage.color import rgb2gray\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras import backend as K\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","b5d3bcf5":"train_files = []\nmask_files = glob('..\/input\/lgg-mri-segmentation\/kaggle_3m\/*\/*_mask*')\n\nfor i in mask_files:\n    train_files.append(i.replace('_mask',''))\n\nprint(train_files[:5])\nprint(mask_files[:5])","f9647b3c":"fig=plt.figure(figsize=(10,10))\nfor i in range(1,21):\n    fig.add_subplot(6,5,i)\n    img_path=train_files[i]\n    mask_path=mask_files[i]\n    img=cv2.imread(img_path)\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    mask=cv2.imread(mask_path)\n    plt.imshow(img)\n    plt.imshow(mask,alpha=0.4)\n    \nplt.show()","08eeb3b4":"# Set parameters\nIMAGE_SIZE = (256, 256)","e31661ce":"#\u062a\u063a\u064a\u064a\u0631 \u0627\u0633\u0645\u0627\u0621 \u0627\u0644\u0627\u0639\u0645\u062f\u0647\ndf = pd.DataFrame({\"image_path\": train_files, \"mask_path\":mask_files})\n#\u0647\u0646\u0627 \u0628\u064a\u0646\u0627 \u0627\u0646 \u0627\u0644\u0645\u0635\u0627\u0628 \u064a\u0633\u0627\u0648\u0649 1 \u0648\u0627\u0644\u063a\u064a\u0631 \u0645\u0635\u0627\u0628 \u064a\u0633\u0627\u0648\u0649 0\ndef diagnosis(mask_path):\n    value = np.max(cv2.imread(mask_path))\n    if value:\n        return 1\n    else:\n        return 0\n\ndf['mask'] = df[\"mask_path\"].apply(lambda x: diagnosis(x))","820caf08":"#ask = 0 -> no tumor\n#ask = 1 -> tumor\ndf['mask'].value_counts()","250c5f8a":"fig, ax = plt.subplots(10,3,figsize=(20,45))\nfor x in range(10):\n    i = random.randint(0, len(df))\n    img = cv2.imread(df['image_path'][i])\n    mask = cv2.imread(df['mask_path'][i])\n    ax[x][0].title.set_text(\"Brain MRI\")\n    ax[x][0].imshow(img)\n    ax[x][1].title.set_text(\"Mask - \" + str(df['mask'][i]))\n    ax[x][1].imshow(mask)\n    ax[x][2].title.set_text(\"Brain MRI with Mask\")\n    ax[x][2].imshow(img)\n    ax[x][2].imshow(mask, alpha=0.4)\nplt.tight_layout()","82b11a97":"df=pd.DataFrame(data={\"filename\":train_files,\"mask\":mask_files})\ndf_train,df_test=train_test_split(df,test_size=0.1)\ndf_train,df_val=train_test_split(df_train,test_size=0.2)\nprint(df_train.shape)\nprint(df_val.shape)\nprint(df_test.shape)","d047de10":"#\u0639\u0631\u0636 \u0628\u0639\u0636 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062f\u0631\u064a\u0628\ndf_train[:5]","471184ea":"df_val[:5]","bdefca90":"def train_generator(data_frame,batch_size,aug_dict,image_color_mode=\"rgb\",mask_color_mode=\"grayscale\",image_save_prefix=\"image\",mask_save_prefix=\"mask\",save_to_dir=None,target_size=(256,256),seed=1):\n    \n    image_datagen=ImageDataGenerator(**aug_dict)\n    mask_datagen=ImageDataGenerator(**aug_dict)\n    \n    image_generator = image_datagen.flow_from_dataframe(\n        data_frame,\n        x_col = \"filename\",\n        class_mode = None,\n        color_mode = image_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = image_save_prefix,\n        seed = seed)\n\n    mask_generator = mask_datagen.flow_from_dataframe(\n        data_frame,\n        x_col = \"mask\",\n        class_mode = None,\n        color_mode = mask_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = mask_save_prefix,\n        seed = seed)\n    \n    train_gen=zip(image_generator,mask_generator)\n    \n    for (img,mask) in train_gen:\n        img , mask =adjust_data(img,mask)\n        yield (img,mask)\n        \ndef adjust_data(img,mask):\n        img=img\/255\n        mask=mask\/255\n        mask[mask>0.5]=1\n        mask[mask<=0.5]=0\n        \n        return (img,mask)","c5171a94":"def dice_coef(y_true,y_pred):\n    y_truef=K.flatten(y_true)\n    y_predf=K.flatten(y_pred)\n    cal=K.sum(y_truef*y_predf)\n    \n    return ((2*cal+100)\/(K.sum(y_truef)+K.sum(y_predf)+100))\n\ndef dice_coef_loss(y_true,y_pred):\n    return -dice_coef(y_true,y_pred)\n\ndef iou(y_true,y_pred):\n    intersection=K.sum(y_true*y_pred)\n    sum_=K.sum(y_true+y_pred)\n    jac=(intersection+100)\/(sum_-intersection+100)\n    return jac\n\ndef jac_distance(y_true,y_pred):\n    y_truef=K.flatten(y_true)\n    y_predf=K.flatten(y_pred)\n    \n    return -iou(y_true,y_pred)","052baeb7":"def unet(input_size=(256,256,3)):\n    inputs = layers.Input(input_size)\n    \n    conv1 = layers.Conv2D(64, (3, 3), padding='same')(inputs)\n    bn1 = layers.Activation('relu')(conv1)\n    conv1 = layers.Conv2D(64, (3, 3), padding='same')(bn1)\n    bn1 = layers.BatchNormalization(axis=3)(conv1)\n    bn1 = layers.Activation('relu')(bn1)\n    pool1 = layers.MaxPooling2D(pool_size=(2, 2))(bn1)\n\n    conv2 = layers.Conv2D(128, (3, 3), padding='same')(pool1)\n    bn2 = layers.Activation('relu')(conv2)\n    conv2 = layers.Conv2D(128, (3, 3), padding='same')(bn2)\n    bn2 = layers.BatchNormalization(axis=3)(conv2)\n    bn2 = layers.Activation('relu')(bn2)\n    pool2 = layers.MaxPooling2D(pool_size=(2, 2))(bn2)\n\n    conv3 = layers.Conv2D(256, (3, 3), padding='same')(pool2)\n    bn3 = layers.Activation('relu')(conv3)\n    conv3 = layers.Conv2D(256, (3, 3), padding='same')(bn3)\n    bn3 = layers.BatchNormalization(axis=3)(conv3)\n    bn3 = layers.Activation('relu')(bn3)\n    pool3 = layers.MaxPooling2D(pool_size=(2, 2))(bn3)\n\n    conv4 = layers.Conv2D(512, (3, 3), padding='same')(pool3)\n    bn4 = layers.Activation('relu')(conv4)\n    conv4 = layers.Conv2D(512, (3, 3), padding='same')(bn4)\n    bn4 = layers.BatchNormalization(axis=3)(conv4)\n    bn4 = layers.Activation('relu')(bn4)\n    pool4 = layers.MaxPooling2D(pool_size=(2, 2))(bn4)\n\n    conv5 = layers.Conv2D(1024, (3, 3), padding='same')(pool4)\n    bn5 = layers.Activation('relu')(conv5)\n    conv5 = layers.Conv2D(1024, (3, 3), padding='same')(bn5)\n    bn5 = layers.BatchNormalization(axis=3)(conv5)\n    bn5 = layers.Activation('relu')(bn5)\n\n    up6 = layers.concatenate([layers.Conv2DTranspose(512, (2, 2), strides=(2, 2), padding='same')(bn5), conv4], axis=3)\n    conv6 = layers.Conv2D(512, (3, 3), padding='same')(up6)\n    bn6 = layers.Activation('relu')(conv6)\n    conv6 = layers.Conv2D(512, (3, 3), padding='same')(bn6)\n    bn6 = layers.BatchNormalization(axis=3)(conv6)\n    bn6 = layers.Activation('relu')(bn6)\n\n    up7 = layers.concatenate([layers.Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(bn6), conv3], axis=3)\n    conv7 = layers.Conv2D(256, (3, 3), padding='same')(up7)\n    bn7 = layers.Activation('relu')(conv7)\n    conv7 = layers.Conv2D(256, (3, 3), padding='same')(bn7)\n    bn7 = layers.BatchNormalization(axis=3)(conv7)\n    bn7 = layers.Activation('relu')(bn7)\n\n    up8 = layers.concatenate([layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(bn7), conv2], axis=3)\n    conv8 = layers.Conv2D(128, (3, 3), padding='same')(up8)\n    bn8 = layers.Activation('relu')(conv8)\n    conv8 = layers.Conv2D(128, (3, 3), padding='same')(bn8)\n    bn8 = layers.BatchNormalization(axis=3)(conv8)\n    bn8 = layers.Activation('relu')(bn8)\n\n    up9 = layers.concatenate([layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(bn8), conv1], axis=3)\n    conv9 = layers.Conv2D(64, (3, 3), padding='same')(up9)\n    bn9 = layers.Activation('relu')(conv9)\n    conv9 = layers.Conv2D(64, (3, 3), padding='same')(bn9)\n    bn9 = layers.BatchNormalization(axis=3)(conv9)\n    bn9 = layers.Activation('relu')(bn9)\n\n    conv10 = layers.Conv2D(1, (1, 1), activation='sigmoid')(bn9)\n\n    return models.Model(inputs=[inputs], outputs=[conv10])","80a3d389":"model=unet()\nmodel.summary()","ef39e1e6":"EPOCHS = 2\nBATCH_SIZE = 32\nlearning_rate = 1e-4\nBATCH_SIZE = 32\ndecay_rate = learning_rate \/ EPOCHS\nopt = Adam(lr=learning_rate, beta_1=0.9, beta_2=0.999, epsilon=None, decay=decay_rate, amsgrad=False)","cad9b3ad":"train_generator_args = dict(rotation_range=0.2,\n                            width_shift_range=0.05,\n                            height_shift_range=0.05,\n                            shear_range=0.05,\n                            zoom_range=0.05,\n                            horizontal_flip=True,\n                            fill_mode='nearest')\ntrain_gen = train_generator(df_train, BATCH_SIZE,\n                                train_generator_args,\n                                target_size=(256, 256))\n    \ntest_gener = train_generator(df_val, BATCH_SIZE,\n                                dict(),\n                                target_size=(256, 256))\n    \nmodel = unet(input_size=(256, 256, 3))\n\n\n\n\nmodel.compile(optimizer=opt, loss=dice_coef_loss, metrics=[\"binary_accuracy\", iou, dice_coef])\n\ncallbacks = [ModelCheckpoint('unet_brain_mri_seg.hdf5', verbose=1, save_best_only=True)]\n\nhistory = model.fit(train_gen,\n                    steps_per_epoch=len(df_train) \/ BATCH_SIZE, \n                    epochs=EPOCHS, \n                    callbacks=callbacks,\n                    validation_data = test_gener,\n                    validation_steps=len(df_val) \/ BATCH_SIZE)","ec709ca9":"a = history.history\n\nlist_traindice = a['dice_coef']\nlist_testdice = a['val_dice_coef']\n\nlist_trainjaccard = a['iou']\nlist_testjaccard = a['val_iou']\n\nlist_trainloss = a['loss']\nlist_testloss = a['val_loss']\nplt.figure(1)\nplt.plot(list_testloss, 'b-')\nplt.plot(list_trainloss,'r-')\nplt.xlabel('iteration')\nplt.ylabel('loss')\nplt.title('loss graph', fontsize = 15)\nplt.figure(2)\nplt.plot(list_traindice, 'r-')\nplt.plot(list_testdice, 'b-')\nplt.xlabel('iteration')\nplt.ylabel('accuracy')\nplt.title('accuracy graph', fontsize = 15)\nplt.show()","ea1d078c":"model =models.load_model('unet_brain_mri_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'iou': iou, 'dice_coef': dice_coef})","fd67a348":"test_gen = train_generator(df_test, BATCH_SIZE,\n                                dict(),\n                                target_size=(256, 256))\nresults = model.predict(test_gen, steps=len(df_test) \/ BATCH_SIZE)\nprint(\"Test lost: \",results[0])\nprint(\"Test IOU: \",results[1])\nprint(\"Test Dice Coefficent: \",results[2])","dc423331":"for i in range(30):\n    index=np.random.randint(1,len(df_test.index))\n    img = cv2.imread(df_test['filename'].iloc[index])\n    img = cv2.resize(img ,(256, 256))\n    img = img \/ 255\n    img = img[np.newaxis, :, :, :]\n    pred=model.predict(img)\n\n    plt.figure(figsize=(12,12))\n    plt.subplot(1,3,1)\n    plt.imshow(np.squeeze(img))\n    plt.title('Original Image')\n    plt.subplot(1,3,2)\n    plt.imshow(np.squeeze(cv2.imread(df_test['mask'].iloc[index])))\n    plt.title('Original Mask')\n    plt.subplot(1,3,3)\n    plt.imshow(np.squeeze(pred) > .5)\n    plt.title('Prediction')\n    plt.show()","b40b6d0e":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u062a\u0635\u0648\u064a\u0631 \u0628\u0639\u0636 \u0627\u0644\u0627\u0645\u062b\u0644\u0647 \u0648\u0639\u0631\u0636\u0647\u0627 <\/p>","429d2494":"#### Reference:\n1. [Brain MRI Image Segmentation](https:\/\/www.kaggle.com\/pouyaaskari\/brain-mri-image-segmentation\/notebook)\n2. [Brain MRI Segmentation | UNet | Keras](https:\/\/www.kaggle.com\/lqdisme\/brain-mri-segmentation-unet-keras)","c156386b":"### \u0637\u0631\u064a\u0642\u0647 \u0627\u062e\u0631\u0649 \u0644\u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0639\u0631\u0636\u0647\u0627 ","7871a8d4":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Using Segmentation FOR Brain MRI Image<\/p>\n![hgfrh](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxQTExQUFBMWFxYYGiAbGRkYGiEYHBsjIRwfGSMhIyEbHishHCAmISIcIjQjJiosLy8vGyE1PDUuOSkuLy4BCgoKBQUFDgUFDiwaFBosLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLP\/AABEIALkBEQMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAAFBgAEBwMCAQj\/xABPEAACAQEGAgUGCAsGBQQDAAABAgMRAAQFEiExBkETIjJRYQdxdIGRsxQjNDVCk6GxFlJTVXJ1tMHS0+EVM2KC0fBDc5KisggkwvFUY8P\/xAAUAQEAAAAAAAAAAAAAAAAAAAAA\/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP\/aAAwDAQACEQMRAD8AcL3xlEbxKfh9zN1MLIqi8Rls9Awem+pLJTMeypoNSfy7aWL4LhHS5pHJWFKZ2G5J2Va\/SOvmGuugIUrpc3kbLGpZt6AbDvPIAcydBYo3D+RissyIy9pFVnYGgNNgh3GzEeNmG4FwuWMdDGdQqGjedn7Rb\/FWoqQKDq27wxL+Lq2u2prvXznnYFlMDiOnTSKf8cIUe0SE09Vql4wSRVLpllQCpaOpoNakqwDgCnaK08bO\/wAHU0qDXUH168u7T2Wo3u4MhzQlqjYA0YEbkNyNgQbaz\/6fb3HDeL3JK6xosIzO5CqOuo1J0GtkjE7uJkadFCyJ\/fIBlqK0EgXlrQMBsSCNCct\/gj5Ji3oy++SwaBxnxAJMKvsU1+u80jNEYlSWN20lUtQISSKAGvn0FNcOt2iiLEKoJYkAACpJOgAA3Js43XDxdGCJke8\/TlPWSCmtI+Rev\/E5U6tNHIB4eGJchlmpBGKayBi5qaCiKC2vItQHvtcu+CXTPle8TMBzWGi+ohnY\/wDSBYqkLuwL1kkJ3bXU6mn4vqpaycNegIXXWo0J7x++wC34cuLU6O9TCtaEws4084SnnsKxXhmWJDKjJNCN5IjmC60GYEBlHKtMtdASbOD3AonmVifAmgp95tXW7mBy8RpJXYbEFdQwOhqNCCCKGhqKiwZvbcvJHiiwYPMenigZr2QrSOseYBIC6qX6ocpmAJ0BINsw4swtI+jniFIpq9TX4t1oWTXWnWVhXUBspqVJtcf5jj\/WD\/s8dgZ\/LZi8V4S4ZJ45nRZc+SVJStSlMxjAWtByHI772zbD8OlmbLFE8hG+VSacqmmw8Tpb3g+HGeRYwco3Zjsqjcn7hUipIHO2mRF4olhgiijjrUCRM76aZwD1Q5GudgW27IoignXXgK9OhfNAtOXShqc9THmVP8xFg16wWdFLtGSg3dCJEH+ZCV7+fK2sfDHCFxPeAVZdRPKNaEGgDgbeHhsTavHjIMqLeojMKgieJQkpX\/E0YDZhptvYMdtpPkNvAjvd6fOseW5yHOxCqpzx0JJ0ArTe1HyjcOxxN8Iu7h4XahOgIOoBIAGU1V1YU0ZCdMwFqXk+7OJ+gS+8isD15ScdWXCzG98gmk+Eoyqk0ckgQR0Obo6A\/GZyKVorKCa2xe0toHBfC6ELLPQVFRmXOACKjqnquxGtG0AI5nqgl3HDJpiRDDJIRuI0Z6f9INud7ukkTZJY3jYfRdSp9hFbbRDGsjdCzzFabGRmVOr9GP8Aux30CbV0NuMfXzRySs8Y3jfLJHoNKI6lUr3gVHKlgxWxvgr5wuXpMPvVtd4uwFYTnjUqtaMmpC9zKSSSh21JIOhOorS4J+cLl6TD71bB+jb9xVEuILXELut3VAroZowRIDKGzAuGG8Q2PZO29vzJizgzSkEEGRiCNQRmNrPFvy2+ekS+8a1zAOHTNR3bLHXv18+xoOexrQ0sC7aW06DBII1QqCTmYEqTHXU01Bz5aD8bcd1Bb7LhsGkLKc9TVi7MSOQIkLJptXLWwZhaWbMS4VbKZIusBqQAaDUimuobSu5B7wdLKdglpaWlglny8XQRQXSA6Vi6Zvo1aTLIDX9Bo188Ysh21njK8RySxCoTIkpDbhg0mdFHdlQBaHY10prYKVyu5Zo0AGZzlFdBoCTXltW3k36HNkRZp2rSqAItQaEAvqad9B57e7pCzoxjFcoGlQpHcQK135jnS1ePFNR1aNm7VMzFgdRQa76a\/wBbAWSINXLowHWRiMwHf1TRl8R6xbhQg0\/oLebyXiaK8Ah3OiKwyAB0KEEann36U12143Z3WiydqlaitCfXtSo0\/wBgKseRLwjN2H6khNdnBRtqbrUd2vjapwrdzHd8ZjbtJdwp84nQG1+8A\/CYBv1WzV1qAp\/1tzws1GP\/APLb9pWwLfBiVvSnYrHM6kbqyQSSKw8VZQR4gWaRdgt4mUrr0rqRrpRytPMoAXzKLLvBOIiCWRyDXoiEpSuYulBroAeyag9UtobN\/DOIx4m863gx3eRIzN8I65BCsMwfNJzzCh1P3ELbz5AoyhiRrTTw\/wB+a3WGRdgKfbYB8LZGKMCXjcqy86nkK0+2nOxS7Xn\/AA5u8bD22AheLwqPGh7UhIUd9NbV73GzVyDqn8UanvqfPajjY6eSOQOYih6pUZ6faBWvn7rF5b2rx0JJIAbsla65dVB570sCrjl2Hwa8xVrkyTrQ1oc+Rh5iJGb\/ACjusOf5jj\/WD\/s8diuOnJFeZM1R0Qjy0yjM8i5dO\/IshHcEPfYU\/wAxx\/rB\/wBnjsF7gPDZMnSKjMGJZ8oqci1C68hnqWHMIu29jV5MlHkJpTSh3t0w6QxQCFeRyU2VqEByTyLOitvyHMmsxq9FIYwzMRvqCOVae0\/bXnYLkV0bKuUCSOh+MGi8u1mplIrqD3gitRajAXYFVXNlJUEHemmgO\/77ecOx0JcpICpzuSa+Iy5PMF1qNa5uXKtgV7DHzKa15U\/39tg68TYfO8ZzoVWZCQW0Zn6m1d6vHAhJ5yDXey15PuzifoEvvIrP94nkeOQO9SlZVOhYZQVYVOx6OtF2zBNK2T+F7v0cuLqAAPgMxUDkGeJl+wiwKvD9yM06IFz7sV78oLUPcDSlfG2r4hIVATIhXXtNlJJ3NaUOtT30IFdLJ3kzu3xkkhFRlKeFD2q92pQV5BjY9xJiLMApUF6k582atan6JKnx8bB2ubTpD8I6F5YS5jLR9Zg2gyld9agA+Nvd9uN4WYJNSKTo1kK5gzKpJCg00z6EkcqizH5JYikMs0rZYXkRFDGgZzKDUeI018fCy1jHSQYnOshJYs1STqQxLA+tSLB9xS49LdyhytU5M2bUZiOtvyYIabGnhbPeCwRiNyB0IvMPvVtpNzxGqNHRsz5gdAQBUEU0zECgJPq0skYfDkxm7DvvULEcgWkRiB4Akj1WCli926TErym9bxLptWjsfVtZ0vF6SFY1SlVORlANWA0zd1T4dw0sqXrTFLyRyvEv2ylfVvvZ7aSMM7OiKrHQ5j1DWu1akbrrXeupFgDXFJbxP0cSZiKssTEKTXU0zUBYakAnvprbvxDh14hVJZU6IE0jVzSRu9gFrRQKCrEE8hSw\/EEkEqyBW6xOUjTxBHcdNPNbpfrrM06JkdiBVQ1a0yhueoBrX\/NYL9zvSrEeYy5WVhQ0YU27+YbvAINkPiu6lJ2NAA2um1aA+0gqT4sbaFRGjTNq6HLl5jvrz7tLKXH8JWShQqBly1BXtJrv4qbAn2lpaWA\/w\/cYyDLI4GVqIh+kRrUmuw00G9jWVGFMxYVr\/WpsC4akAdsxBUKeqdiTpX2c\/Na4uKxAZRCJpCe0zOoHcoEbivnNfssHqa4Sy0WEF2zAjUVFATWpOlOdmYZwiTnrLd5DnoRUmTqEgeJO53rvZd+CF6OAIpFNVIPSKf0qkkeqo8O8nhl+Ekcscgyu9Y2AOmlDXza1B3FNNzUGDFJAxu0imoetK6VVkrXwNNvP57V8SC1qCM30SRoB7bATBLPd7nd1Iz9ZgxOUChKrqKkaH7BYq3Dpucck97k6TIoJUOWpm7CZhXryb6E5UBY\/i2DwlLurXuVi2VR0YqBmeoORBzAYAu2tFUr2mFgnBjE3XFiTUm7L75LL+IYk14eSSU1YgBANFWhACgbBQtQBY\/wR8kxb0ZffJYK3B\/DUl5EkqsFSIqDX6ZJrlB5UAqTyFtH4Lwu7XdDljdpHJLu4DdWCkvRgEZqM6oS2WvdSgoteTfEFW6zR0qRIWI7wUUD\/AMTZrw3FI7uTOyMyoorrmC5mAbx1J1sC3xffopLxJPHG6NKRKVqrqVZBldSvM6Eg0prqTYMmLZ8wTpHyEM5AGXJVVbxqCQKnexPhxbq8ead5jGgy0Q1BouYChFSwGgFadUbitiHE+H3Se\/O8K9Espy0UUGYtkMxBWgWutFqBlZjQmlg6C5DIDSlRsWofv39dhl5kdKCLrOxVAoFSxLUVR4knnz9tpK0ykIoaQMcqFVYdIduqrAE1PKlfAWH8Q4ibmXiD1vVMrFTVbvmFGUNXrzFSVLDRASAS2qhW46xGMZbpCwcIxeaQGqtJlyZU744xmAP0mZ22ItEbLgsRIqBiLmnf\/wC3jsmWb3+Y4\/1g\/wCzx2B8aJMrEuVFWAooNTnatQd9a+3w1Hi4Le5Y4ZJVjjDVaZhkAVR3HmdAK8zzt64GxMTQKGPWBVHH+ICik61IdQNz20fTrC3G\/XVkkkZicoZRQc6nXlyH22ApPf7iiSQRXZnu2cVvBk+P0oCUXJSlRoCRUctbUZMIiu0gaOeOWKVMySAUp3hlJ6rbChNu8SnLkyhiCApp7D9or\/Sw+CA51oarnKkHY0QsT7fZYDF3dXB6+5LGoLMT3k7V3O\/rJsrYIfjcVrv\/AGaQfOBdwfXWtmG+Txxq5PVXKWamhyCgNDXRmqEX\/G62UeDLy0jYtI1Mz3KZjTQVaWImlgLeSeY5ZERlDVbtCu4SnLTssfUbXMcuRMjtJSNhstKFuROg9dedkfg\/HTdJ1ck5GoHpy7mpzp3cwWHOttexGRJlzRBKsM344Iy6EbZkOtD4EHUGwBcOuj3hUidg8cCHo0NAF1LEgc2Ouu+1LUsUln+L6Vgzw6RvrnKnZS1asFNaE6ip12sZwCGeMrG0a0bVWAqdTT10OngbVpLqZnYyg0BypQ0Glanzmn3WCxhCCRVcsAx1oBrXXck1p4iydPT+2rnTf4RCT658w\/7Sp9dnSbEku6OzyBWUVrl1odiV7zqB+MRTvpmnD19M2K3WRhTNeoaD8UdIoC+YAAeqwer7853oULVnlGUbt8aSKeING\/y2LPxTGzIER+nDCrJQgsDoUO4qQG1228bBMUkC4pOxbJS8S9buOdqH20txjubRXgiMBzWqIATnVlzrTT8Ug+qwPuMYdeBA4EMrSdIqhVRmK6MSwBXOB1VFe5jyt44KuV6vt4PSPLkeMq07DMq5VDKCzCh1C6A1oBbrNx3e3giu03RJGuVZSMzSVrpmqRlOnZpvTUDajdMSa6uFu08kbdMNWCmNwcyEPUUFFAPjUgUIrYOF9x6GOZo5S1Y2aMtlFKqxBpQk0rWmm3npZf4mxeOfMUD5SyhCwAqqBx379cnc8ge8+LxgcifFO3XZiUPWynKG6w6tTmKsM1BtrpqBN9ubIcuU9VVZjv2hmBNOzoRodRtYKFpaWlg9pSortzsXucaRnPXMD2W7vA+NtGk8g14UFje4QAKnqtysnjhW5fni7fVTfwWDz8KApRt7fMIvRWaQfRJzCp84rXzfZb3+C1z\/ADxd\/qpv4LffwXuf54u\/1U38FgurIMqgb9HRdfE18TppTxtU8oN\/mlMLs5MMis6AHTPnYOSK6tXSvJcqjQW+Dhm5\/nmD6qf+C31uGbmaA4zdzTb4qb+CwJlnHgj5Ji3oy++S3z8Fbl+eLt9VN\/BZw4B4OhmS\/wB3u+IQzPNCF6sci5KSK1TmUVGlNO+wZZheIPA+dD4Ed4s8YZjyzo0bqQHUqSD3+BsQxryMvdYmmnv0McS0zMUc0qQo0UE7kCy4nDFzG2M3ceaKYf8AwsFzArtNAzIMpjbdmpTalab1pUfZbrfZSsssYlFTkbM1W7ILDapNQe72DW1JsAupFDjcBHcY5\/4LQ4Bdq5v7bhr39HPXQUGuTupYLuN3yW63SKSBniaaSQPJ2ZFXqlIwe0gPXY07VQTytnlneTALs4CtjcLAagGOcgaAbFO4AeoW4fgrcvzxdvqpv4LAqrMQhTkSD7AR+82aX+Y4\/wBYP+zx2+\/grcvzxdvqpv4LPOA+TwX3DBDdr7FIEvbyGQI4WphjXLRlBqNDXbWwZLhWJSXd88ZoaUYEVVlO6sOYP3gEUIBs84VxdDMAsxCGq9V600NerIAd\/wD9g0\/GNvvEPkvW4mMXnEoIi9SlY5GrlpXsqdqjfvsG\/BW5fni7fVTfwWB4mvWaaExSwGGjdIwkqE6oCjMq9quugYeItQxTGLvAGCzRnU0IcTMa0Joqc617TKPGyt+Cty\/PF2+qm\/gtPwVuX54u31U38FgF49jzT1VQVSoJqas5FQCxGmlTRRQLU7kkkvwQqj+1QpqouM2U946SKh9lvH4K3L88Xb6qb+CzZ5PuEYJHvcMGIQzSTXSSOixyLlq8fWJZQKCgFN9bBkdjeEcRzXfqq2aPfo3rlBO5WhDIfFSCedbO+PeSA3OMS3jEII4ywXMUkOpqQOqCeRsu\/grcvzxdvqpv4LATfjyOSIRyLNHRlNVbpCQGDFK5kOU0pQ1pWvn74n5SIzpFFIRyzERjYDUdckaDZl595sF\/BW5fni7fVTfwWn4K3L88Xb6qb+CwA8XxuW8HrkBQahF0UHaupJZv8TEt42t8ISlsRuJP\/wCRANPB0X91iP4K3L88Xb6qb+CxXhbhy6JfLqy4rA7LPEQgilBYiRSFBKUBO2ulgUOLflt89Il941vjYw\/RxpzRcoautAzMoB5AFm2\/cLazjPkPvE080wvUQEkjuAVaozMWp9tkSThK5qSrYvdwQSCOim0I0P0LADjxlzIJJKvpQ60qKU1qD7aWtLjkbMvSxuyaZgrZdQa18fMbX\/wVuX54u31U38Fp+Cty\/PF2+qm\/gsFfCOIFihni6w6XKlQBVUqS9NeQJoNakk6WD3i9MczhyGlLB1Bp1aqwB7xXkfxR3WYPwVuX54u31U38Fp+Cty\/PF2+qm\/gsCfaWcPwVuX54u31U38FpYNQvPlIwtrxLeellLNCIkXoezTpKnMdetnAoKdnWvL8\/2lmngS6mWV4xDHIKB3eTKEiRa5mYujALqNhUkKNQSpBWsRuWB3iUViglcd6oSPus5yi7wEtdog1WPx8qqzVrWiJTJEO6qlqUIy7Dkl5ec\/GtJIBr1mLgD1nSwKt64evUQq93lUd5Q\/6WGEU0NtHwt1FQMyv3hiCdTtT1WoYtdUl\/viorosy\/RPdJzK13bUitbAi21HyGYtHdZL9eJiRHHACxUVOsijbnvbNb3d2jdkcUZSVYdxGlmrgj5Ji3oy++SwMvEHFtzOG3q6xXh5XlMOSsBj1R1LO7FjnkcDMzHc+wZkLq+XPkbLUDNQ0qagCu2tD7DatZw4fvl7vCC63YZny5SuUdZKFTqdForMDXlrWosCkyEEgihG4NvFtFu+B3ZR8c3TzIKEppCfAtXNKQPpKANusd7WU6uXoobsig6joVY8ucucmwZjaW1S83eGUUmgiYd6KIXGn0TGAvtU2SuI8B6CkiMXhc0ViKMp3KMBoGHgSCNQbAAtsXk7xyC7YLILxK8SyX2ivGmcgosEvIilQpFeVee1sds3v8xx\/rB\/2eOwEPKdxHdr1Hc47vLJL0Ilzs6FCc7Kw3JrsfZZBIt8s18LYE97AVtFBor5c5U0zZQtRnGxoSAuYGupBBUtYuUGeREzBczBcx2FTSp8BvbRzwIADV3FHWMjqDVgzDYGmi7dYdYa6GwPHuGPgoMgqzA9VWQLQUrnNGZWodABQcyKAiwCMbwMQKGEqvUgZdAw6uYkgMdK1WverbU1bPIbiSXe93qeSvRx3SRmoKmgki5c7Z27kkkkkk1JOpJs1eT7s4n6BL7yKwNvlK42uV6ucsV3kkd5LyJqMhQKOjyEVJNdRXlvbJLSxrAbi0xaMj4sdYsf8Ah8s3froMo7WnMAqAW1i53cySJGCAXYKC2gFTSp8LaBDwShORJJHNGNQixg5QWNFZiTUCmYkbjq72o3jhWNUaRJFZwAVjfXNWutQoBpTskAVpVqaEAOM4CbugfpVcFgtKFWBK5joRsNVr3hhTQ2+cFfOFy9Jh96thU7MWYuSWrrXetivBPzhcvSYferYN04g8pdxF7iDzyKLrK5eMQFizhJINHDgBeuT2TXKNrfnvEpg8srrszsw8xYm17jH5ffPSJfeNbjgWFPeZlijFSx\/r6tASTyAJ5WAZaW1W4YFdolUR0kfUvIyVTbQKDuN6s2u1ALWsQuF3PVN3QKQpYCucF0EhoxJ2LABSCKDawZBaWZeJeH+gAkSpjYkeYilQfHUeetRTUBasEtLS0sEtp3DN3EeCySL2rxexHIRvkRMyqf8AMS3stmNtO4DMn9l3xHU9E0sZhOxaTUSZa70QLU8tO+wVcHiq5LLmjO61pWmwryPcd7dbvI2cxrGAG28RvWtNe\/22K3S4rTfJXtFjqB30U6nwtRkSZTmKtmjPgi020IILE+H77B0MitnBOSRRQ8qajb+nhahfYQwNTQAajuB+ynhY1fcEjaQAPkGUGnMkk8zqSDUc+VqEkbJmRzsMwI0zDX2a0+3v1BM4kSoikOrZTE572joAfqzF7DYpwR8kxb0ZffJajxEpEMebcyyEePViBPmroP0Ta9wR8kxb0ZffJYE62p4Cou+GXXotHvbyvM4NGywuI1Su+XMQ5A3tlltB4cxQf2esbDMYpnZAGCsAwjBFTXQnWmXlvobBdAZj1uevn5+21+7XXx8bdb1cgkF3vCkss+akZYGRSpynkoK6b0FLc1vNCopqRU+Hs5\/6GwUHvQDlW0P2G3l41cOkg+LkGV\/Ch6r\/AKSHXzFhzNvl6w4OxZnoTyH9bfZYyEK9o0I23\/3tYM4vMJR2Q7qSp84NLNL\/ADHH+sH\/AGeOwHiL5Vef+dJ\/5mx5\/mOP9YP+zx2BSUVIFta4VKRQRgAqxUEP3fSOniefjbLLjHmkQd5521GViFVcxKquRd9ApNBrsPUN7A1T4NNKBJCVljkyu0gOUIVJBrWhUDM1fD1iwa\/ZXkojGUk5FZdB3AANvUnY72ZuEMQKXTozESrFqg\/SDsP3VGneLJE12aJ2jZWUg7HQnuP21\/0sGY4pB0c0qUpldhTuoSKeqzF5PuzifoEvvIrVeM4KSh\/xx9o01PMkUauvata8n3ZxP0CX3kVgUbPvAsGSMyAKzE7EV00A33+l7bIVtG4bYCCJSNq6VpuS1R5xl9hsDt0MsLRXiNKK+aMFaHTUHfY7kHmQK6Wo4jh8kd2jMiqBICwqTXepJ56g1sYivDx4akgPanoteVCw+8G1bia9CS63STkVyMO4qo+\/91gyLjC65J81COkXMa8zUqTqAdSK68ybcuCfnC5ekw+9WxPjFCyI1KBWpTXTMK+rUVp3tYZwT84XL0mH3q2Dzxj8vvnpEvvGswcBoyrJItQCAhatO1U0078n3jnZf4x+X3z0iX3jWZuAZQY2Ckh1IIpWtDWpFO6gHmY2Buwma7gtHPmQMpAkH\/DYVoSo3HL1+sd5Pg0UT55RLKVVI1jqFUBR1mJAr3U3830aN7wc0jysC7oXUUovVzAite11TpTutWjuAdxU5VOVRl69WoK8+RNT56WCtji1u8iUqpFQDyK1IINf0l8xa2WEW2HGSYonUsAI81NKAnsnWlWroKdw2tkEh1PnsHi0tLSwS2n8P3lpoLs0xJjVsoUdRI1BykjKNK0Jqa62zCzbwRKrOUdnYoC0MZNVrqWIB0zAa6D8Y2B7vLLIFWANGor2xQHY6jlXUVIrpsNrcooZJw0SqTIaKULCtSOVQO\/Q\/wCx4uF7V9FJqBqDpatepTHeYZQ1A9YmG\/LMvmNcwHiRYOOMSOYos4ZbxDK8Tgihr2uXdQai0wu5tOsks75I41zvOano1GlAK0csdAu5amtK2LYGg+FRmgYGWNzm1DB1aFgfP1P+oWu+VfEXhut3YRDJLeXaRaUWkJ6ONCKaCgLU2zAmlgyXii\/9NMaJkjQZI0JBIUEmpI7TMxZydiWNNKWL8EfJMW9GX3yWHYtxF0yFOgiUkKuegLKF5AgCgNF\/7uRoCPBHyTFvRl98lgTrfoLye8B3eXCopCM8k1X61cgYMQOyQQKDKdaVNaW\/Ptv0b\/6e8WWS4PdyRnglJoN8r9YE9\/Wzj1CwDOKY1RIIpEWGZYx1FYFY1zHKg1JZjqxap1JGo2UsV6aMx6UqezShNDTXuOh08B320njbgm8T3jpoRGQUQZS1KFRQgVGooB3b2U7tEYZssql9SrLm3IOXQ+cbjlYBpvsZFBz+jSp9lNPXarjc5uISWQ0ldQ8EG5Guksn4o\/FT6RGtADV8wjhlJJlDvSIknI1RK1BmyEV+0b+B2xTjbF5L1fZ5pFKlnoqEUKKOqq05UUD11POwA2ck1OpPfZsf5jj\/AFg\/7PHZQs3v8xx\/rB\/2eOwAcClVZ4i\/ZziutKCvfytrOH3VSwLZSoIJG1dxQU0Olfb42xWzdg3E+ixzHQCgfw8dD7RYNS4uxgXiYGMMoiQFAo10YEnTQDbvplFuHEGN\/CTE7KI3VAGYdYb\/AHa8u+ypHi8HWLSDrKVWp5nbWtABsa8jvqbV8R4nWKMhShamXShPtHLzWANx5OC0SAgkAknc60FD\/wBP22++T7s4n6BL7yKyxe7y0jF2NSbM\/k+7OJ+gS+8isCjbTsFeOSKEhlICgEtpSmlN60FPAUA0tmNi+C4y0BpTOlalCTQ8uR0\/3vtYNRvV\/JS7xZ\/i0YUA26zZsxHPfutS+H\/FdGSSitVAaHlT7vvsv3bHIiM9QMpDZTUk67Cg1oO8i3KfHIlQnNU00Ufv2pT1+awfeNJlWIJzYjQ7impOmlCdrA+CfnC5ekw+9Ww6\/XtpXLN\/9WI8E\/OFy9Jh96tg88Y\/L756RL7xrEuD78sLK7IzBTVlVsuda6ivIgd1P32G8Y\/L756RL7xrccFmfpFjXXOctP0uqadx8bA8XHiuNLwskwkYMNUTKgWpKhRQCoC5da8udmPFJbrd7sVSV2kJEgGjqfo07OpANdQNt+Vs9xm6oGTIwYPGGNPosdSPDzcrVC2bKM1AWAJ7rA1XlJr3dy1VYIzVauWqrSmZQBQAE6j8WlNrZ3eoGjd0YUZGKsN6EGh+2xC83yaJiqMyUrqp17jqLCSbB8tLS0sEtfwjEXu80cyUzIagEVB5EEdxFQfPbcpfI3hQLoL1eTIgJMYliz9VVY6dFUaOh\/zr3i2W9Jgn5PE\/rIP5dgbcB49w+aYi83CRWlCrmhkZ6sKAdQZWqdBuxOljvlKucIWNYgISFACaMUZaupOWpzAhCxJNa7mhol8McQ4Pcrwl4jgvzulcoleJlBIpWiquo5a27XrizDJHDsMSqGz06SHtVzVJyZjXnU87B2w68iWJSDlahU961qCB4K4zf5BbSeHGixbD5LrMvWproSUavaBYnUN1tDoGpQWy268T4VGXIixA52LEF4aVO+yDTfTxNifDXlCw65StLFDfmLVqHeIrrWvZUHnzJ2FgzOaAQTyxyDMYzJGafjAMgPqah9VmLgj5Ji3oy++S3a\/X3BpZZJWjxLNIzOaPBSrEsaVj21s4+TDCMMvpvl2gF9QSQgSGR4j1ekU9XLHoagb10rYMXsVwDG57nMs93kKSLpUagjmrA6MD3HuHMC2ucT+S\/CrndJL2Zb5IkbBSI5YSa9IIiK9FSqtUEciCLZ70mCfk8T+sg\/l2DTOGvK818eOBri7Xh+qDDMUVtySeaKNTu1BU24X+e5xTSMJGAjU5aHPHmHdIe0ASopSprXSlLLHDXFmE3ETdDBfs8qZDIzxF0XmEIUBa6VNDsLD75jOFSmrjEz3DpIKDloOj7tLAfXiyOd1yySmRdQz1BoNRQ5jQg60FKeetinHuCx4jc5b2IxFe7stZqaLKoGp841P2a1Fke74hg6MGCYlUair3c\/8A8rMQ8oOG9DND0N9yzIUY54qgHLWnVpXqjcGwZbE6hHBFWNMp7qHWzO\/zHH+sH\/Z47TpME\/J4n9ZB\/Lto\/B3C+F4hhwjEl5hiF7bL0skQdpWijXKD0eUgilFpWoNgwm0trHGfCODYet3cyX2dJwxR4ZYStFyjfoqGubl3WVukwT8nif1kH8uwKYY95t5Js3dJgn5PE\/rIP5dp0mCfk8T+sg\/l2BYujqrguKrrUeoj77M3k+7OJ+gS+8it96TBPyeJ\/WQfy7Ofkxw\/C7zNeoIBfU6S6usjSvEQELx1plj0atNTUUrYMdtLbPxZ5PsIuV2+E9Ne50zqh6KWFqF06Qa9HTVSreZlOxsj9Jgn5PE\/rIP5dgULSzf0mCfk8T+sg\/l2nSYJ+TxP6yD+XYFCzHwu6NidzKLlX4RBQbf8RAdvGtrnSYJ+TxP6yD+XYrws+EfDLr0SYh0nTx5M8kJXN0i0zUjrStK01pYFTjH5ffPSJfeNYfBeAlCF6w51t+hcV8kmGS3qTPepxPMzS9GJYg3WYsSqmPNlrXv2tk15TBY3dCmJ1VippJByNPydgXbxi7uwYgVChfYKcuf+luJvxoRQe2zF0mCfk8T+sg\/l2nSYJ+TxP6yD+XYAMuJs2uUA+Gn3WryyqUUAdfMxY94OWg9VG9tmbpME\/J4n9ZB\/LtOkwT8nif1kH8uwKFpZv6TBPyeJ\/WQfy7SwOS+Vi6rPPeUuk4lnFJPjVysOjSNRTJWi5KjWtXfWhoMnuFykmdY4kZ3bQKoqbVrabgmGiGGGEHI88IvF4k2PRNmyRhtwCoDMOeccgQQBXXhVEr0rmRx2kiIyr4NIer\/01tYaK5rRfgQYd\/wh8x9YFPst7vt5LGiABBoFHZ05+NTU1t7iwyRt+qBqSRt5xuPXSwVmwO5T0EUj3dzylOdK\/pgCnrAsGx3hm8XXrOoaPSkkZzJrtqNq+Ni\/QEECmutdPH2WMYZfcoMLBSh0ZWFV15HXY08CNxYM0tpXkaxoXI3+8lC4iu4JUGhPxqrv67JXEeHCGYqtcjAMldwDyPiDUeqxzgj5Ji3oy++SwG+I\/KPFPcrzdI4pwJ5ekHSPGyxlpunYLkjViCxPaLEaa2z243KSZxHGhd22AFTarZyjUQXWGNBSS8oZJXHa6MuyLGO4HIzNTeqjaoIU1wSKMEuxmKkBuiPxak7AyUIJ0PZqNDrpa5DclMYcXSMqTQdZi3\/l+6xmXDLvEBMS6qoqAD2jup152+RcWAGhu69HuaN1\/PtQnwsACDCY5iQsLqwFTkYNTl2Wp7LCMRwpohmHWTvAoRXbMDqvhyNtMwia5MzNFN8dLUAOCtCeVNq+Y2rYthtA+ikUAqfpBUClKDWppXwrWwZRbT+F8Ygu+C\/HRyurX58vROI2Vvg6gMCynUVqO4hT4Wzu\/wB26ORlBqBqp7wQGU+sEGzI\/wAxx\/rB\/wBnjsHTjziyG+x3WOGF4ku4kADsGrnZWoMqgAChHmpZMtLNXCWFh3GZig0LyAAlQdQqV6odhrmOw9dgCJhUxGYRPTzU+\/e1SSMqSGBBG4Ioba1d+HLrIk83QAiILlEskjF8xocxDgZqcgAKsN7Bse4aRxW69JIupMb0LRitFyOxBY7dTWpNATuAzqz\/AOR\/EFgmvsrKWVLlKSoNCRni2JBofVZHvEBQlW3+8bgjwNmfyfdnE\/QJfeRWC\/xNxndprk90u93ljDTrNV5FcDLEIsqgKKLRVoOWoFBQBCtLMfBmAm9ThfoqCztTMFUaliOfIAcyy8q2ANdsPlkFUjZh3gae3a0vFxkj7cbKO8jT27W2W5YPh87QwJAWLau94Zi2g2UK2VWNPogDw5W+4xgF2R5IZYY4sqZ1kgUrmUg6FS2RmBp2gw0I5g2DD7G+CvnC5ekw+9W3DG8Ma7vlOxFVI2IOxFdab77EEbg278E\/OFy9Jh96tg1THfKhdo7+7tdpy0MrDKJUEbPGJIBJrHnrkZhTNl12JFbY1fJukldwKZ2LAb7mtLX+Mfl989Il941rfDFxc1eNSWGtR2lWtDlr9M0NDyp42DlduGJCB0jpESK5GzNJTvKRqzKP0qVt9m4dWlUvCMK0DMjopP6RWg9dLNkEV2u+Rs5ErqzAPVSQ345Oi61oTTa1W5LFDC0d5JFZKjKQ+xB0AJJXv\/2LAkX25PCwEi0qKg7hgeYI0YeINqltFx\/BSyPQqVY5kA2X8VlP+LSvfWvK2dWCWlpaWCW2a+xo80ZFCk9ziC05ARoAO+tKn1Wy\/h7Apb5MsMQ1O5NaKO80BPqAJPIWeOIsau8UkN2CN\/7ZBAZGPWNNc5HZGtNAdBzOgsFkYasTKwUVB1UmlaGvVJ0NdDStRqLA4XySDVqjXMta+fka\/wBbGZZC8BAkLZ+yQ2ZTSldakU5a7WqXPB2aSM5VUM+XLnqaAFmrTY0BGlNTsLB9S9rJmXWpU5jlCk610y11J32B33393vDGiNVHYIopFK9SrHxFa62MXbAleaRI3KJGaLWlScuap5lSGG+ujai3aO4uweMjrE0OZyxIoKBda0OatAaClTzsCHx\/GKwvzIZT5hlkH2yG3rgj5Ji3oy++S1vymQZBCpNTnk51BASFaj\/MGX\/LapwR8kxb0ZffJYE62tf2K5S4mFKyJdlU1ZAD1nYjryLXVzsa7abi2S213AuHL3NfLnMY2CkI3SBGAA7RBbVaAMVoWrlotLBUiuzO08V5U1DAZNVK0G4rqLF8MwS7PRTCKd+59tK\/bahx3iLXi\/MRlhFcnU+kUzKpJBoxIJAOxG1ql1ndHjXOVRRUuSKueQ19dgF8R4N8HlKoDkIzr3ga1FfAite6lmjB798IiErVzisZB2qACSPOKHXa1G+YeJ5M7SvSgFKgaewjXzWMYBgiRxtllZ1aQMhVK06oUgkEjXTXbewZpxjdskkW1THQldjld0H\/AGhR6rXX+Y4\/1g\/7PHbz5RI1WWEL+SLH\/PPM481VKn1i3p\/mOP8AWD\/s8dgXMNhDyKG7O7U7hqfXyHiRbYLlhk90gu7zZAufOYnoQC3WJoKkgVykjXq02pZP8jlwWa\/jMAejQyDN2SykBa+AdlbzqLN\/Gc5dYZ3pnkjpItKHMpKVp3Hl5jYGdeEAYke7ShxImVixoGBo2ZaA0oyiqmu24NgGKXe7xzfBknPRggyMUqQ6qVAqNSNToBpU70s2cD3mZ7pEvRsmSiio0fU1YEjmSPXZNxu4y\/DiZoTCkzVFRpQUDGux3qT42DPePcNkgmMclCymquNQ6SEupB5gHMK+Fvfk+7OJ+gS+8isQ8o16MqozAg9I5AJrQNQgVPIa0Hie+w\/yfdnE\/QJfeRWBRtoPDdxMMKsyn4zrDkSBVa\/9Wdf8teYsiQdpaCpqNN6+FtoxXEDGpuyPnijjSIg5WWsahcyle8gt36mvdYG7BeEgIUeOR4p2QNmFCvWGbKykai3TEeFA0U8kzBpSGYEE5UoK0FdddydN9AOZHgFJfgMDSV6wzCvJTqPs19drfF0TG4XgpqREWFN9sx+ytgwjjTD5Gu6TOCVrlViwYbM+lNgMjimwLUsq8E\/OFy9Jh96tnHFYq3WZiV7GmtSKEchtzpXTU2TuCfnC5ekw+9WweeMfl989Il941j2A3tYVKndhGF3ArSpqRtSv2WA8Y\/L756RL7xrM8N2Maw58vRyxRyqSSNQorQjYim1gI8Q4GZ16aOplAAYV7YApUV57aVsFwHAHvLrU0jXRjrUUFcoBH9LXYcZljzP0isMwCotCMtdSabHlU91iFzZ7uvR1C587s6LWgrQDbQ05+HrAd8SvYTLCq0CoDGNyclKKfUN\/PbL8ShCSyoNldgPMCQLPyztJHl6QGR\/i8yrqx8KHSgJ++yLjMoaaVhszsR4VNaecbWChaWlpYDfCiyNOkSSMgkPXysVqFq2uUg6UsXv16SORmZjlJIQVVgQDlqQTm2B8\/wBygrEGoNCOYsxXHB4SYyXdqgMRQKD4V1sDHwvhwkzPFKphcEGOmQ5tBoCWIamnV1It3x93gdCGyhCTpuNcupJNdPUam3a6SAAhKLU8h3f6W5HEDeLqYyqjMaucgLKQBSj17OleVg+41fjDf+lTkq07+xlPmsfwrFbxeGkkCosYWjO2kUIGpd2O9NeoNTUbDepwlcrteTK15idynXbKxX6CrlOU1IFG8DpYJ5WeIXzrh8aiKGEKXROqrOyhwKfioCABzOZjUmwKfGGLreZy0deiQZI83aYBixdv8TszOe7NTlYnwR8kxb0ZffJZOs48EfJMW9GX3yWANwndlkvl1R6ZGmjDV2ILjT17W3rjW7O7RrdpJYW1U9FK0SsjEE6IRUozH1Nv3fnO7zsjK6mjKQwPcQai27tisU8UN4o0tSropNAG7OXTahJ5bqbBz4nuYvF4kRkUhSqqF1ZRlOwJFF9YHWGoFkTF8Mlu95Ct1chQ612ZVYjUnMQTl7tNOYHW64veLziRvEQq5aqAUAVQuSup6vnJ3POtj+Pk\/CczLmGRVZpasGKqFZtDmA5kHz0I1sFy5XyOgBSppuLT4eih3jkCogpK9KxxrtqQe1XRYwas1BTc2CQ4dC7LSJWYkACrBak0FBmy6nnt4WV+NuIzeGWCLq3aDSNAMoZho0hA0qdgPorQDnUBHEOIi8TySquVTRUXmqIojQHvIRVBPM1sbf5jj\/WD\/s8dlMIaE0NBubNj\/Mcf6wf9njsF\/wAj+IdDe5GGSphIAckA0kRzSmtaA0ts3D0qX+9CaRAOgTqoxD9YtowOUEhQDodi9Rb80YXfnglSWMjMhqKioPeCDoQRUEHcG2k3PjCGUAo\/QS0qczFTXmFYaZe6tDrzsGmcVcRSLKRD2IKZyKUZs6dUitcooV89e6tufG+OwzRQrEQ7ZukOxyDKRRvEk7eHmtmEuPwxGjspzDcUfLQg1NK70ptz7q2CY7xcDmW7k6k9cihA8Bpr4081LBz8oWLCWVYgEAjrXIoUVNNNNTSnOpt58n3ZxP0CX3kVlMmtmzyfdnE\/QJfeRWBewi8iKaKQioR1YjzGtttv1yiqCenylwkkjgZGUmpIpqtV6wFTUWwWz7w3xsqxdFeVZiqhYpVPWUAUCkHQqBpWlRQa2Dd+JsahMUcEUq1mZVBjNcq5hXsVpXsgePcDYCnFZju8l1aOrhGVXLAjLQipoTUgaAAmp7rZ83Ed2jBlEiu6HMirTLJl0UEGjJtqSNqnewK\/8YxjMYlZmJqC4AA9QJ+\/22C\/xliKx3boajpHNMoVdF7yw1JJFKeHqsp8E\/OFy9Jh96thl7vTyOXdqsdz\/vYeFifBPzhcvSYferYPPGPy++ekS+8azFhM0s10jhlkUQrVowaFic+SuahZFXqjSgPqpZd4x+X3z0iX3jWtcLK6NIChyyR6NSoFHRq12GgI9dg933C2izZq99R2TTcg\/StzuUru4oznTLuWNDyFe\/wsXxup0y5K1FPxQRtUaDwr3W4YGvRagmo7jvXxBPLTb+oWY4UjjaRg6CmRXFMyM2isc1NAa9x58rKeNSFp5mMnSEyN8ZWufrHrVoK132FmniW\/K8AhjQ55ZVOUVY0RSN+ZLN\/22TrzA0bFGoGGhoQftGlg4WlpaWCWO4Y8TxZGbK6nMpJAB8xbQEa6HvG9gVpYNHuIRgoN5u66CpMqFq010BAOvjbu8ZiLJQGm9KUINKGh7xS2Y2fsF\/uof0F+97AfwKUQSFjWjVrViBqDXTNqad\/OzDxVwJFikRvEBC3oKKn6M1BQVps1AB7PEWC4Z\/cz\/wDLT3sNtSwTeL\/f03sH5Wliku8jpIpV1zIytuKqUP32ZOCPkmLejL75LXPLf87XjzJ\/4C1Pgj5Ji3oy++SwJ1mPhviNrvVHBaJt1G6nvFfu8AdOa5aWDUcJxy5rn6OSNTJq5ZTGST\/2nzAgWrYk4D5kcGNjVcrV1O9KHavd4WzezHwntL6vvFg1Xg3C5HyTQdHNJG1WVh1Qa1OUnw0OwO410sH4r8lLyNJLdUaNtWa7Pv3no2plkXzajQEVtoXkn2vH6Q\/fZ7n3T9L9xsH4taRo1kiZaEsM1dwVzCn2n2WZH+Y4\/wBYP+zx25+VP51vn\/M\/+It0f5jj\/WD\/ALPHYFC0tLSwS0tLSwd7rOUYMADSu\/iKWZ\/J92cT9Al95FZRs3eT7s4n6BL7yKwKNpaWlglpaWlglmDhObPiVzYgCt5h0H\/MUWX7G+CfnC5ekw+9WweeMfl989Il941j2H43Hd0XK5D5FzaVroNxrUAaD\/XWwHjH5ffPSJfeNYTJv7PusDfLikbqZTXnsCWqeWhAH9bdlhbMqspWozdYbDv1\/pYTw\/8A3T\/pfuFm7D\/+B\/v6QsHW5cNreIbxPBOpnhQK8Z0IFSWIIHcaad29s3xIFWMZp1WOo51A\/wBLafwp\/fn\/AJcn\/kbZhi396\/n\/AHCwUrS0tLB\/\/9k=)","09baad4b":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0627\u0644\u0627\u0646 \u064a\u0645\u0643\u0646\u0646\u0627 \u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0645\u0648\u062f\u064a\u0644<\/p>","127a30da":" \n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0627\u0644\u062a\u0635\u0648\u064a\u0631 \u0628\u0627\u0644\u0631\u0646\u064a\u0646 \u0627\u0644\u0645\u063a\u0646\u0627\u0637\u064a\u0633\u064a \u0645\u0639 \u0627\u0644\u0642\u0646\u0627\u0639<\/p>","4e4bca60":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0639\u0631\u0636 \u0628\u0639\u0636 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a<\/p> ","c0bef8da":"### \u0639\u0631\u0636 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u0649 \u062c\u062f\u0648\u0644","a72519f6":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u062a\u062d\u0645\u064a\u0644 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a <\/p>","1ba2db91":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u062a\u062d\u062f\u064a\u062f \u0645\u0642\u0627\u064a\u064a\u0633 \u062f\u0627\u0644\u0647 \u0627\u0644\u062e\u0633\u0627\u0631\u0647(Loss function)<\/p>","9a1b0e95":"## \u062a\u062d\u0645\u064a\u0644 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0644\u0644\u062a\u0642\u064a\u064a\u0645 \u0639\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631","b7e9e1db":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u062a\u062d\u0645\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a(\u0645\u0633\u0627\u0631 \u0627\u0644\u0635\u0648\u0631 \u0648\u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0627\u0633\u0643\u0627\u062a) <\/p>","10e9812a":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0628\u0646\u0627\u0621 \u0627\u0644 ( U-Net network)<\/p>","9ed1d8da":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0639\u0645\u0644 \u062a\u0648\u0644\u064a\u062f \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062a\u0632\u0648\u064a\u062f\u0647\u0627 <\/p>","9805cb00":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u062a\u0642\u0633\u064a\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0649\u062a\u062f\u0631\u064a\u0628 \u0648\u0627\u062e\u062a\u0628\u0627\u0631 <\/p>"}}