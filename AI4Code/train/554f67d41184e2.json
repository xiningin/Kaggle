{"cell_type":{"009929e2":"code","1a778482":"code","308e523a":"code","d3c1ee53":"code","40ac55af":"code","3ae00714":"code","456792e2":"code","71aa26c3":"code","5798f507":"code","a48bb036":"code","7c47ce00":"code","a8be27c4":"code","00f9ed09":"code","c594494a":"code","1494e04d":"code","a4e7111c":"code","2b4c1f12":"code","a576c8d2":"code","2e6cbb0a":"code","58ea50e8":"code","3c2e2da9":"code","b754fb09":"code","51e4c8cf":"code","2f0cfbb2":"code","980efd42":"code","b157cbd9":"code","ab41dfc8":"code","d0f73ffb":"code","847c7507":"code","06fd3e25":"code","bbc0e73d":"code","2d6c28d9":"code","a29ebeb8":"code","cf4b1553":"code","2c78a331":"code","53f6e34f":"code","e1591111":"code","fa503bef":"code","a248fb82":"code","f24f8c80":"code","4163bcab":"code","5d358383":"markdown","df35d0d9":"markdown","d9a9cf04":"markdown","1af04b10":"markdown","08196151":"markdown","4c44b0d8":"markdown","e008191e":"markdown","06707b4a":"markdown","0fb8eebe":"markdown","9d69f8ab":"markdown","0704319b":"markdown","75801bf4":"markdown","ed45739e":"markdown","c29a1bec":"markdown","2c8b4ea4":"markdown","246b14cf":"markdown","cca2685f":"markdown","ec38f366":"markdown","d5517fda":"markdown","61d10998":"markdown","929c5664":"markdown","a31f4a60":"markdown","b14a8585":"markdown","20a71fcb":"markdown","ef431f87":"markdown","c75dc39d":"markdown","149629eb":"markdown","2858cccb":"markdown","609811f4":"markdown","ef4c87f3":"markdown","00a467f5":"markdown","9bfcc5e2":"markdown","b80d8e29":"markdown","7f4c90d6":"markdown","df275113":"markdown","88b25f71":"markdown","4e210ec8":"markdown"},"source":{"009929e2":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","1a778482":"!wget -O loan_train.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/data\/loan_train.csv","308e523a":"df = pd.read_csv('loan_train.csv')\ndf.head()","d3c1ee53":"df.shape","40ac55af":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()\ndf[\"loan_status\"] = df[\"loan_status\"].replace(to_replace=[\"PAIDOFF\", \"COLLECTION\"], value = [1,0])","3ae00714":"df['loan_status'].value_counts()","456792e2":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","71aa26c3":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","5798f507":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","a48bb036":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","7c47ce00":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","a8be27c4":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","00f9ed09":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","c594494a":"df[['Principal','terms','age','Gender','education']].head()","1494e04d":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","a4e7111c":"X = Feature\nX[0:5]","2b4c1f12":"y = df['loan_status'].values\ny[0:5]","a576c8d2":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","2e6cbb0a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y)\n\nks = range(2,101, 3) # k values to be tested\n\n\n# target is loan_status\ny_test","58ea50e8":"X_test.shape","3c2e2da9":"from sklearn import metrics","b754fb09":"def findBestK(listKs,X_train,y_train,X_test,y_test):\n    bestK = listKs[0]\n    bestKsAcc = 0\n    models = []\n    for i in listKs:\n        KNN = KNeighborsClassifier(n_neighbors = i).fit(X_train,y_train)\n        results = KNN.predict(X_test)\n        testSetAcc = metrics.accuracy_score(y_test,results)\n        print(\"The accuracy is : \", testSetAcc, \" with k = \", i, \"\\n\")\n        if(testSetAcc>bestKsAcc):\n            bestKsAcc = testSetAcc\n            bestK = testSetAcc\n        models.append(KNN)\n    return bestK, models\n        ","51e4c8cf":"findBestK(ks, X_train,y_train,X_test,y_test)","2f0cfbb2":"otherKs = range(20,161,3)\nbestK, models = findBestK(otherKs, X_train, y_train, X_test, y_test)","980efd42":"optimalModel = models[3]","b157cbd9":"from sklearn.tree import DecisionTreeClassifier\n\nDTree = DecisionTreeClassifier().fit(X_train, y_train)\nDTreeResults = DTree.predict(X_test)\n\nacc = metrics.accuracy_score(y_test, DTreeResults)\n\n","ab41dfc8":"acc","d0f73ffb":"from sklearn import svm\n\n\nSVMod = svm.SVC().fit(X_train, y_train)\n\nSVMpreds  =  SVMod.predict(X_test)\n\nSVMacc = metrics.accuracy_score(SVMpreds,y_test)\n","847c7507":"SVMacc","06fd3e25":"from sklearn.linear_model import LogisticRegression","bbc0e73d":"modelLogistic = LogisticRegression().fit(X_train, y_train)\npredsLogistic = modelLogistic.predict(X_test)\n\nlogAccuracy = metrics.accuracy_score(predsLogistic,y_test)\nlogAccuracy","2d6c28d9":"from sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\n","a29ebeb8":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","cf4b1553":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","2c78a331":"test_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\nFeature = test_df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(test_df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature[\"Gender\"] = Feature[\"Gender\"].replace(to_replace = [\"female\", \"male\"], value=[0,1])\nFeature.head()","53f6e34f":"X = preprocessing.StandardScaler().fit(Feature).transform(Feature)\nX[0:5]","e1591111":"y = test_df[\"loan_status\"].replace(to_replace=[\"PAIDOFF\", \"COLLECTION\"], value = [1,0])\ny.shape","fa503bef":"y","a248fb82":"modelsTrained = [optimalModel, DTree, SVMod, modelLogistic]","f24f8c80":"dictScores = {\n    \"Jaccard\" : [],\n    \"F1-score\" : [],\n    \"LogLoss\" : []\n}\ni = 0\nfor k in modelsTrained:\n    i = i + 1\n    preds = k.predict(X)\n    dictScores[\"Jaccard\"].append(jaccard_score(y,preds))\n    \n    dictScores[\"F1-score\"].append(f1_score(y,preds))\n   \n    if(i==4):\n        dictScores[\"LogLoss\"].append(log_loss(y,preds))\n    else:\n        dictScores[\"LogLoss\"].append(\"NA\")","4163bcab":"dictScores[\"Algorithm\"] = [\"KNN\", \"Decision Tree\", \"SVM\", \"Logistic Regression\"]\npd.DataFrame(dictScores).set_index(\"Algorithm\")","5d358383":"In this notebook we try to practice all the classification algorithms that we learned in this course.\n\nWe load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n\nLets first load required libraries:\n","df35d0d9":"### Load Test set for evaluation\n","d9a9cf04":"## Normalize Data\n","1af04b10":"# Model Evaluation using Test set\n","08196151":"# Data visualization and pre-processing\n","4c44b0d8":"It seems like $k = 29$ is the optimal amount of neighbours to classify","e008191e":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4 \n","06707b4a":"### Feature selection\n","0fb8eebe":"## One Hot Encoding\n\n#### How about education?\n","9d69f8ab":"### About dataset\n","0704319b":"First, download and load the test set:\n","75801bf4":"This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n| -------------- | ------------------------------------------------------------------------------------- |\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |\n","ed45739e":"Lets plot some columns to underestand data better:\n","c29a1bec":"What are our lables?\n","2c8b4ea4":"Lets download the dataset\n","246b14cf":"# Decision Tree\n","cca2685f":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame\n","ec38f366":"Lets look at gender:\n","d5517fda":"Lets defind feature sets, X:\n","61d10998":"260 people have paid off the loan on time while 86 have gone into collection \n","929c5664":"Lets convert male to 0 and female to 1:\n","a31f4a60":"86 % of female pay there loans while only 73 % of males pay there loan\n","b14a8585":"### Load Data From CSV File\n","20a71fcb":"Let\u2019s see how many of each class is in our data set \n","ef431f87":"Data Standardization give data zero mean and unit variance (technically should be done after train test split )\n","c75dc39d":"# K Nearest Neighbor(KNN)\n\nNotice: You should find the best k to build the model with the best accuracy.  \n**warning:** You should not use the **loan_test.csv** for finding the best k, however, you can split your train_loan.csv into train and test to find the best **k**.\n","149629eb":"# Pre-processing:  Feature selection\/extraction\n","2858cccb":"# Classification\n","609811f4":"# Logistic Regression\n","ef4c87f3":"### Lets look at the day of the week people get the loan\n","00a467f5":"# Report\n\nYou should be able to report the accuracy of the built model using different evaluation metrics\n","9bfcc5e2":"#### Feature befor One Hot Encoding\n","b80d8e29":"Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\nYou should use the following algorithm:\n\n-   K Nearest Neighbor(KNN)\n-   Decision Tree\n-   Support Vector Machine\n-   Logistic Regression\n\n** Notice:** \n\n-   You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n-   You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n-   You should include the code of the algorithm in the following cells.\n","7f4c90d6":"### Convert to date time object\n","df275113":"<center>\n    <img src=\"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/images\/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  \/>\n<\/center>\n\n<h1 align=\"center\"><font size=\"5\">Classification with Python<\/font><\/h1>\n","88b25f71":"# Support Vector Machine\n","4e210ec8":"## Convert Categorical features to numerical values\n"}}