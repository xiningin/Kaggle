{"cell_type":{"b3d267e0":"code","1d8ce7f7":"code","ab5cfb1f":"code","b5aae3d0":"code","8b7a667d":"code","641370fc":"code","1161a5a6":"code","93a8c83a":"code","2bbc0c88":"code","3080712b":"code","dc8d1508":"code","3a7dc239":"code","c14987ab":"code","f29e9461":"code","a8e4a07b":"code","0d1c6c4d":"code","1b655fbc":"code","0cf10e19":"code","3c7db5f8":"code","c76d0711":"code","33371808":"code","42197e48":"code","6c3ed414":"code","25c50aa1":"code","cb394c05":"code","3c4a9bb8":"code","4d90c5b8":"code","a83c4fe5":"code","5b14b7c0":"code","98ab5ad8":"code","94997675":"code","af40c400":"code","25bf038f":"code","c7f87b75":"code","3d23aece":"code","6c70db02":"code","c7722cae":"code","6ab62215":"code","7931925b":"code","ae34bae9":"code","99d50292":"code","8d598d31":"code","73cbf29e":"code","af2baf84":"code","b104f6e9":"markdown","ae8e06ab":"markdown","3c044222":"markdown","ee7bf7c5":"markdown","d6c1e28c":"markdown","0e7d893f":"markdown","4a16d78c":"markdown","0c42d964":"markdown","daaeeedb":"markdown","3b363d7c":"markdown","a89d77e7":"markdown","64b24e97":"markdown","ef1b080e":"markdown","c05b21b5":"markdown","5adcdc59":"markdown","2c415350":"markdown","e39e0ccd":"markdown","27320128":"markdown","86f09d43":"markdown","50712b8b":"markdown","2ad81945":"markdown","3c4720be":"markdown","9279a956":"markdown","29a4e296":"markdown","24c34311":"markdown","f8e32f6f":"markdown","9784bd42":"markdown","ab30a80a":"markdown","9833ed4d":"markdown","54ec4d65":"markdown"},"source":{"b3d267e0":"!pip install nmslib -q\n!pip install pydantic -q\n!pip install ujson -q\n!pip install wordcloud -q","1d8ce7f7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport json\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport scipy.sparse as sparse\n\nfrom pydantic import BaseModel, ValidationError, validator\nfrom typing import List,Optional\nfrom datetime import datetime\nimport re\nimport gc\nimport ujson\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import StandardScaler\n\nfrom lightfm import LightFM\nfrom lightfm.cross_validation import random_train_test_split\nfrom lightfm.evaluation import auc_score, precision_at_k, recall_at_k\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve","ab5cfb1f":"RANDOM_STATE = 2021\n\n# \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n\n#\u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430\nNUM_THREADS = 8 \n\n#\u0447\u0438\u0441\u043b\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \nNUM_COMPONENTS = 80 \n\n#\u0447\u0438\u0441\u043b\u043e \u044d\u043f\u043e\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nNUM_EPOCHS = 25 ","b5aae3d0":"def show_roc_curve(y_true, y_pred_prob):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 ROC-\u043a\u0440\u0438\u0432\u0443\u044e\"\"\"\n    fpr, tpr, _ = roc_curve(y_true, y_pred_prob)\n    plt.figure()\n    plt.plot([0, 1], label='\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440', linestyle='--')\n    plt.plot(fpr, tpr, label = 'LightFM')\n    plt.title('ROC AUC = %0.3f' % roc_auc_score(y_true, y_pred_prob))\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.legend(loc = 'lower right')\n    plt.show()\n\n\ndef get_text_embeddings_tfidf(df, max_features = 15500):\n    \"Function to get our text title embeddings\"\n    model = TfidfVectorizer(stop_words = 'english', binary = True, max_features = max_features)\n    text_embeddings = model.fit_transform(df['title'])\n    print(f'Our title text embedding shape is {text_embeddings.shape}')\n    del model\n    return text_embeddings\n\ndef nearest_books_nms(book_id, index, n=10):\n    '''\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0433\u0440\u0430\u0444\u0443'''\n    nn = index.knnQuery(item_embeddings[book_id], k=n)\n    return nn\n\nclass Grocery(BaseModel):\n    '''\n    \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 Grocery \n    '''\n    category: Optional[List]\n    description: Optional[List]\n    price: Optional[str]\n    title: Optional[str]\n    also_view: Optional[List]\n    date: Optional[str]\n    rank: Optional[str]\n    also_buy: Optional[List]\n    main_cat: Optional[str]\n    image: Optional[List]\n    asin: str\n\n    @validator('rank',pre=True, always=True)\n    def check_type(cls, value):\n        if type(value) == list:\n            temp = re.findall(r'\\d+(?:,\\d+)?', value[0])\n            number = temp[0].replace(',','.')\n\n            return float(number)\n        elif type(value) == str:\n            temp = re.findall(r'\\d+(?:,\\d+)?', value)\n            number = temp[0].replace(',','.')\n            return float(number)\n        else:\n            return None\n        \n# \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c json-\u0444\u0430\u0439\u043b, \u0434\u0435\u043b\u0438\u043c \u0435\u0433\u043e \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u0438 \u0437\u0430\u043d\u043e\u0441\u0438\u043c \u0438\u0445 \u0432 meta_list\nwith open ('..\/input\/recommendationsv4\/meta_Grocery_and_Gourmet_Food.json') as f:\n    meta_list = []\n    for line in f.readlines():\n        try:\n            meta_list.append(Grocery.parse_raw(line))\n        except ValidationError as e:\n            pass\nmeta = pd.DataFrame.from_records([[s.category, s.description, s.price,s.title, s.also_view, s.date, s.rank, s.also_buy, s.main_cat,s.image,s.asin] for s in meta_list])\nmeta.columns = ['category','description','price','title','also_view','date','rank','also_buy','main_cat','image','asin']\nmeta.to_csv('meta.csv')        \ngc.collect()","8b7a667d":"meta.sample(19)","641370fc":"#\u0427\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b\u044b\ntrain = pd.read_csv('\/kaggle\/input\/recommendationsv4\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/recommendationsv4\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/recommendationsv4\/sample_submission.csv')","1161a5a6":"meta[meta.asin.duplicated()]\n#Show duplicats\nmeta[meta.asin == 'B00004S1C5']\n\nmeta[meta.title == 'Rogelio Bueno Mole']\n#DROP Duplicates\nmeta.drop_duplicates(subset=['asin'],inplace=True)","93a8c83a":"meta.info()","2bbc0c88":"train.info()","3080712b":"test.info()","dc8d1508":"test.sample(15)\nprint(len(submission))\ndisplay(meta[meta.asin == 'B0059JXK2M'])\ndisplay([print(x) for x in meta[meta.asin == 'B0059JU5FM'].image])\ndisplay(test[test.asin == 'B0059JXK2M'])\ndisplay(train[train.asin == 'B0059JXK2M'])","3a7dc239":"train.sample(7)","c14987ab":"# importing required modules\n\nimport urllib.request\nfrom IPython.display import Image\n\nfor image in meta.tail(10).image:\n    if image is not None:\n        image_url = image[0]\n        urllib.request.urlretrieve(image_url, \"test.jpg\")\n        display(Image(filename='test.jpg'))","f29e9461":"print(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0442\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432 Train\",len(train.asin.unique()))\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0442\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432 Test\",len(test.asin.unique()))\n\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 \u0432 Train\/Test\",len(set.intersection(set(train.asin), set(test.asin))))\n","a8e4a07b":"unique_obj = set(test.asin) - set.intersection(set(train.asin),set(test.asin))\nprint(\"\u041e\u0431\u044a\u0435\u043a\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 Train\", unique_obj)\nfor met in unique_obj:\n    display(meta[ meta.asin == met])","0d1c6c4d":"train.verified.value_counts()","1b655fbc":"ax = sns.countplot(x=\"rating\", data=train)","0cf10e19":"ax = sns.countplot(x=\"overall\", data=train)","3c7db5f8":"print(\"\u0420\u0430\u0437\u043c\u0435\u0440 meta-file:\",meta.shape)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 TRAIN:',train.shape)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 TEST:',test.shape)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 Submission file:',submission.shape)","c76d0711":"meta.isna().sum()","33371808":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0432 Train \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\ntrain = train.drop([ 'reviewTime', 'reviewerName', 'style'], axis=1)","42197e48":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 train\ntrain.isnull().sum()","6c3ed414":"column = 'vote'\nprint(f'\u041e\u0431\u0449\u0430\u044f \u0434\u043e\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 {column}:', round((train[column].isnull().value_counts(normalize=True) * 100),2)[1], '%')","25c50aa1":"# \u0421\u0442\u043e\u043b\u0431\u0435\u0446 'vote' \u0441 \u0442\u0430\u043a\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u0430\u043b\u043e\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u0435\u043d, \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0433\u043e \u0442\u043e\u0436\u0435\ntrain = train.drop(['vote','overall'], axis=1)","cb394c05":"train.sample(7)","3c4a9bb8":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0432 test \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\ntest = test.drop([ 'reviewTime', 'vote', 'reviewerName', 'style'], axis=1)\ntest","4d90c5b8":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 test\ntest.isnull().sum()","a83c4fe5":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0443 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 json-\u0444\u0430\u0439\u043b\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \nprint(\"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 title\",np.sum(pd.isna(meta.title)))\ndisplay(meta[pd.isna(meta.title)])","5b14b7c0":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f\nmeta.title.value_counts()","98ab5ad8":"category_dict = dict(zip(meta['asin'],meta['category']))\ntitle_dict = dict(zip(meta['asin'],meta['title']))\nimage_dict = dict(zip(meta['asin'],meta['image']))\nrank_dict = dict(zip(meta['asin'],meta['rank']))\nbuy_dict = dict(zip(meta['asin'],meta['also_buy']))","94997675":"train['category'] = train.asin.apply(lambda x: category_dict[x])\ntest['category'] = test.asin.apply(lambda x: category_dict[x])\n\ntrain['title'] = train.asin.apply(lambda x: title_dict[x])\ntest['title'] = test.asin.apply(lambda x: title_dict[x])\n\ntrain['image'] = train[pd.isna(train.image)].asin.apply(lambda x: image_dict[x])\ntest['image'] = test[pd.isna(test.image)].asin.apply(lambda x: image_dict[x])\n\ntrain['rank'] = train.asin.apply(lambda x: rank_dict[x])\ntest['rank'] = test.asin.apply(lambda x: rank_dict[x])\n\ntrain['also_buy'] = train.asin.apply(lambda x: buy_dict[x])\ntest['also_buy'] = test.asin.apply(lambda x: buy_dict[x])\n\ntrain.head(5)\ngc.collect()","af40c400":"train[train.title.str.contains(\"var aPageStart\") == True].title=\"empty\"\ntest[test.title.str.contains(\"var aPageStart\") == True].title=\"empty\"","25bf038f":"popular_category_train = train.category.explode().value_counts().sort_values(ascending=False)\ndisplay(popular_category_train.head(15))\nprint(\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 train\",len(train))\n\npopular_category_test=test.category.explode().value_counts().sort_values(ascending=False)\ndisplay(popular_category_test.head(15))\nprint(\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 test\" ,print(len(test)))","c7f87b75":"genre_wc = WordCloud(width=1000,height=400,background_color='white')\ngenre_wc.generate_from_frequencies(popular_category_train.to_dict())\nplt.figure(figsize=(16, 8))\nplt.imshow(genre_wc, interpolation=\"bilinear\")\nplt.axis('off')\nplt.savefig('popular_category.png')","3d23aece":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a\n# IMAGE\n\ntrain[pd.isna(train.image)]['has_image'] = False\ntrain[~pd.isna(train.image)]['has_image'] = True\n\ntest[pd.isna(test.image) == True]['has_image'] = False\ntest[~pd.isna(test.image)]['has_image'] = True\n\n#RANK\ntrain['rank'] = train['rank'].astype(float)\ntest['rank'] = test['rank'].astype(float)\ntrain['rank'].fillna(value=0, inplace=True)\ntest['rank'].fillna(value=0, inplace=True)\n\ntrain['rank']= (train['rank'] - train['rank'].mean())\/ train['rank'].std()\ntest['rank']= (test['rank'] - test['rank'].mean())\/ test['rank'].std()\n","6c70db02":"train.isna().sum()","c7722cae":"test.isna().sum()","6ab62215":"tf = TfidfVectorizer(analyzer='word',stop_words='english')\ntfidf_matrix = tf.fit(train.category.explode()) \ntfidf_matrix.get_feature_names()","7931925b":"y = train.rating\nX = train.drop(columns=['rating'],inplace=False)\n#feature_ratings  = sparse.coo_matrix(([1]*len(book_tags),(book_tags.id,book_tags.tag_id)))","ae34bae9":"from sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=7,random_state=RANDOM_STATE)\n\nfor train_idx, valid_idx in skf.split(X, y):\n    ratings_coo = sparse.coo_matrix((y[train_idx].astype(int),\n                                 (X['userid'][train_idx],\n                                  X['itemid'][train_idx])))\n    \n    model = LightFM(learning_rate=0.05,\n                    loss='logistic',\n                    no_components=NUM_COMPONENTS,\n                    random_state=RANDOM_STATE)\n\n    #\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n    model = model.fit(ratings_coo, epochs=NUM_EPOCHS, num_threads=NUM_THREADS)\n    preds = model.predict(X['userid'][valid_idx].values, X['itemid'][valid_idx].values)\n    show_roc_curve(y[valid_idx], preds)\n","99d50292":"'''prec_score = precision_at_k(\n                     model,\n                     test,\n                     num_threads=NUM_THREADS,\n                     k=10,\n                     item_features=test).mean()\n\nrecall_at_k = recall_at_k(model,\n                     test,\n                     num_threads=NUM_THREADS,\n                     k=10,\n                     item_features=y[valid_idx]).mean()\nprint(recall_at_k,prec_score)\n'''","8d598d31":"# \u0414\u043e\u0441\u0442\u0430\u0451\u043c \u044d\u0431\u043c\u0435\u0434\u0434\u0438\u043d\u0433\u0438\n#item_biases, item_embeddings = model.get_item_representations(features=feature_ratings)","73cbf29e":"#\u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043d\u0430\u0448 \u0433\u0440\u0430\u0444 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430\n#nms_idx = nmslib.init(method='hnsw', space='cosinesimil')\n\n#\u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0442\u043e\u0432\u0440\u044b \u0432 \u0433\u0440\u0430\u0444\n#nms_idx.addDataPointBatch(item_embeddings)\n#nms_idx.createIndex(print_progress=True)","af2baf84":"preds = model.predict(test.userid.values,test.itemid.values)\n\nnormalized_preds = (preds - preds.min())\/(preds - preds.min()).max()\n\nsubmission_pred = submission.copy()\n\nsubmission_pred['rating']= preds\nsubmission_pred.to_csv('submission_log.csv', index=False)","b104f6e9":"### DATA","ae8e06ab":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \n> \u0412\u044b\u0432\u043e\u0434: \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b => \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c StratifiedKFold","3c044222":"> #### \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u0432 train \u0438 test","ee7bf7c5":"## INFO for LightFM\n#### Parameters:\n* no_components (int, optional) \u2013 the dimensionality of the feature latent embeddings.\n* k (int, optional) \u2013 for k-OS training, the k-th positive example will be selected from the n positive examples sampled for every user.\n* n (int, optional) \u2013 for k-OS training, maximum number of positives sampled for each update.\n* learning_schedule (string, optional) \u2013 one of (\u2018adagrad\u2019, \u2018adadelta\u2019).\n* loss (string, optional) \u2013 one of (\u2018logistic\u2019, \u2018bpr\u2019, \u2018warp\u2019, \u2018warp-kos\u2019): the loss function.\n* learning_rate (float, optional) \u2013 initial learning rate for the adagrad learning schedule.\n* rho (float, optional) \u2013 moving average coefficient for the adadelta learning schedule.\n* epsilon (float, optional) \u2013 conditioning parameter for the adadelta learning schedule.\n* item_alpha (float, optional) \u2013 L2 penalty on item features. Tip: setting this number too high can slow down training. One good way to check is if the final weights * in the embeddings turned out to be mostly zero. The same idea applies to the user_alpha parameter.\n* user_alpha (float, optional) \u2013 L2 penalty on user features.\n* max_sampled (int, optional) \u2013 maximum number of negative samples used during WARP fitting. It requires a lot of sampling to find negative triplets for users that are * already well represented by the model; this can lead to very long training times and overfitting. Setting this to a higher number will generally lead to longer training times, but may in some cases improve accuracy.\n* random_state (int seed, RandomState instance, or None) \u2013 The seed of the pseudo random number generator to use when shuffling the data and initializing the parameters.","d6c1e28c":"### \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","0e7d893f":"## \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c","4a16d78c":"# Train\/Valid","0c42d964":"# Install packages","daaeeedb":"# \u0423\u043b\u0443\u0447\u0448\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n### TODO\n* kindle_customer\n* good_review\n* bad_review\n* good_summary\n* bad_summary\n* day_of_week\n* category_mean_price\n* category_median_price","3b363d7c":"# EDA\n## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435\n\u0421\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f\n* reviewTime \n* style\n* reviewerName","a89d77e7":"\u0427\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 LightFm, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 COO (\u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445). \u0412\u043c\u0435\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0412 COO \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 (\u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435).\n\n\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n\nratings_coo: \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c train_data.userid(row) * train_data.itemid(col), \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0442\u043e\u0432\u0430\u0440\u0430 train_data.rating \u0432 \u043f\u043e\u043b\u044f\u0445","64b24e97":"# Configs","ef1b080e":"# \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435\n\n\u0412\u0430\u0441 \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b \u0438\u043d\u043d\u043e\u0432\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. \u0412\u0430\u0448 \u0440\u0430\u0431\u043e\u0442\u0430\u0434\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0447\u0435\u043a \u043f\u0440\u043e\u0434\u0430\u0436. \u041f\u043e\u0441\u043b\u0435 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0433\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0435\u0439 \u0432\u044b \u043f\u043e\u043d\u044f\u043b\u0438, \u0447\u0442\u043e \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0443\u0441\u043f\u0435\u0445\u0443 \u0431\u0443\u0434\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435. \u0427\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u0432\u0430\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u0442\u0435\u043c \u0447\u0430\u0449\u0435 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u043e\u0432\u0430\u0440\u044b \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443. \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u043e\u0432\u0430\u0440, \u043e\u043d \u0435\u0433\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443 -> \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0447\u0435\u043a \u0440\u0430\u0441\u0442\u0451\u0442. \u041c\u044b \u043d\u0430\u0448\u043b\u0438 \u0437\u043e\u043b\u043e\u0442\u043e!\n\n# \u0414\u0430\u0442\u0430\u0441\u0435\u0442\n\n\u0423 \u0432\u0430\u0441 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0435\u0433\u043e \u043e\u0431\u0437\u043e\u0440\u043e\u043c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0440\u0435\u0446\u0435\u043d\u0437\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u0412\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 3 (\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e), \u0442\u043e \u043c\u044b \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0435\u043c\u0443 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f, \u0435\u0441\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 4, \u0442\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043d\u0435 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f.\n\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0438\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0430\u0448\u0438\u0445 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f RocAuc.\n\n### \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 [baseline](https:\/\/www.kaggle.com\/alexeybelomoykin\/baseline-dst-18-belomoykin-recommendation)\n# Feel free to upvote \ud83c\udf1f","c05b21b5":"# Import libs","5adcdc59":"### ","2c415350":"#### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441 merge-\u0438\u0442\u044c:\n* image\n* also_buy\n* rank\n","e39e0ccd":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","27320128":"## Useful links\n* [\u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u0444\u0438\u043b\u044c\u043c\u044b IMDB](https:\/\/www.youtube.com\/watch?v=_ncjDruwCJU)\n* [\u041a\u0430\u043a\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b \u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043a\u0443\u043f\u0438\u0442 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437](https:\/\/www.youtube.com\/watch?v=DxYajBxfeaI)\n* [Pydantic \u2014 \u0443\u043c\u043e\u043f\u043e\u043c\u0440\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Python](https:\/\/www.youtube.com\/watch?v=dOO3GmX6ukU)\n* [Recommendation System Series Part 1: An Executive Guide to Building Recommendation System](https:\/\/towardsdatascience.com\/recommendation-system-series-part-1-an-executive-guide-to-building-recommendation-system-608f83e2630a)","86f09d43":"### C\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u043c\u0438","50712b8b":"# Inference","2ad81945":"> \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c \u043f\u043e\u043b\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0431\u044b\u043b\u043e:","3c4720be":"-test.csv - \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 userid, itemid \u0435\u0441\u0442\u044c \u0441\u0432\u043e\u0439 id, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435.\n\n- overall - \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\n- verified - \u0431\u044b\u043b \u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u0432\u0435\u0440\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\n- reviewTime - \u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b \u043e\u0442\u0437\u044b\u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\n- reviewerName - \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n- reviewText - \u0442\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430\n- summary - \u0441\u0436\u0430\u0442\u044b\u0439 \u043e\u0442\u0437\u044b\u0432\n- vote - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430 \u043e\u0442\u0437\u044b\u0432\n- style - \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435\n- image - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\n- userid - id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n- itemid - id \u0442\u043e\u0432\u0430\u0440\u0430\n- id - id \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f","9279a956":"![popular_category.png](attachment:7b5ac9ac-f507-448c-bfb5-8f21b83241ea.png)","29a4e296":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437 meta \u0444\u0430\u0439\u043b\u0430 ","24c34311":"## Utils","f8e32f6f":"## \u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438","9784bd42":"\u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438 \u2014 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0434\u0430\u043b\u044c\u0448\u0435? \u042d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u043e\u0432\u0430\u0440\u0443, \u0430 \u0442\u043e\u0447\u043d\u0435\u0435 \u0438\u0441\u043a\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435.\n\u041d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u043d\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043c\u0435\u0442\u043e\u0434 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439, approximate k-nn, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 nmslib.  ","ab30a80a":"> ### \u0423\u0431\u0435\u0440\u0435\u043c, title \u0441\u043e \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439","9833ed4d":"## \u041f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e (\u0432\u0437\u044f\u0442\u043e [\u0442\u0443\u0442](https:\/\/drive.google.com\/drive\/folders\/1zf8rSVU9bHXTkPDAms5bkV9qDdxVpbdN))\n* Item2Item \u043c\u043e\u0434\u0435\u043b\u0438\n    * implicit.nearest_neighbours.CosineRecommender \u0438 TFIDFRecommender\n* \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430\n    * implicit.als.AlternatingLeastSquares\n* \u0442\u043e\u043f \u043f\u043e\u043a\u0443\u043f\u0430\u0435\u043c\u044b\u0435 \u0442\u043e\u0432\u0430\u0440\u044b\n* \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n* user2user \u043c\u043e\u0434\u0435\u043b\u044c\n    * \u0441\u0436\u0430\u0442\u0438\u0435 TruncatedSVD \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f dense \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    * \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 FAISS\n    * \u043f\u043e\u0438\u0441\u043a \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441 FAISS","54ec4d65":"> \u0414\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0432\u0441\u0435 \u0442\u043e\u0432\u0430\u0440\u044b \u0432 Train \u0438 Test \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 Grocery & Gourmet Food"}}