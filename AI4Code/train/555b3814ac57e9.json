{"cell_type":{"2c7e706f":"code","bd1bd751":"code","1f07a059":"code","f4015ab8":"code","7400d8b2":"code","6a8b31fe":"code","82cfe3fb":"code","233a66f6":"code","15362aad":"code","0a4ae2c0":"code","7674de87":"code","2a0b0cdf":"code","2b0d4ea2":"code","6b23d8f6":"code","3a4a5bc2":"code","8c1edfca":"code","31e2de72":"code","5b94f70d":"code","9c57b724":"code","1c40cbf7":"code","cff6cdf8":"code","c350959f":"code","a3096c6d":"code","f152116c":"code","3c5b4783":"code","f6a7fb47":"code","ba047433":"code","6951550e":"code","3cd97230":"code","87f2c4bd":"code","15b676e2":"code","f69e11c4":"code","2108dd47":"code","f6c09c2d":"code","8590a45c":"code","d8ace41c":"code","fbcd7dd6":"code","fa8f69d5":"code","a648c3c1":"code","d5bf4284":"code","2cc0ab56":"code","ed043cf2":"code","665259d9":"code","4a1696b4":"code","35ab63b9":"code","a8c25a77":"code","34ff81df":"code","bad2a16a":"code","5dae8693":"code","3d264e6e":"code","3d9ad27c":"code","3f3fdaaf":"code","ef191693":"code","65262820":"code","8bd91799":"code","dcab7eec":"code","47e608e7":"code","a4b7f3a1":"code","c355dcb1":"code","95a9c2af":"code","6d70b94f":"code","39518745":"code","b74b2c4a":"code","3b84782b":"code","2b184c45":"code","24c6b85e":"code","8e7f2a97":"code","ddf909eb":"code","af734278":"code","5a05c82f":"code","aaf5117f":"code","32d8bf99":"code","03073b66":"code","d98c8459":"code","1b229d07":"code","6d6e36c0":"code","3ed29e23":"code","66fdd389":"code","0e6086e1":"code","d803ae34":"code","3d735df8":"code","6f4476d4":"code","28dc11f3":"code","5f15970f":"code","dbb33668":"code","0adead58":"markdown","bc5b2b4b":"markdown","646c121e":"markdown","dc1597e0":"markdown","f61d3dd8":"markdown","b3290415":"markdown","d439c548":"markdown","6b8e4b5d":"markdown","c013b3cb":"markdown","f8b87e37":"markdown","d3418298":"markdown","4387c6bd":"markdown","3503f25b":"markdown","b5fc7769":"markdown","8c32fd58":"markdown","51153f7c":"markdown","cb885d35":"markdown","7cc394d2":"markdown","27c295f5":"markdown","a624ba7e":"markdown","fc9dcb77":"markdown","f52f47a8":"markdown","83c6879a":"markdown"},"source":{"2c7e706f":"import numpy as np \nimport pandas as pd ","bd1bd751":"df_raw = pd.read_csv('..\/input\/train.csv')\ndf =  df_raw.copy()\nkaggle_sub = pd.read_csv('..\/input\/test.csv')","1f07a059":"df['SalePrice'] = np.log(df['SalePrice'])","f4015ab8":"df.shape","7400d8b2":"df = df.append(kaggle_sub)","6a8b31fe":"df.shape","82cfe3fb":"df.fillna(-1, inplace=True)","233a66f6":"cat_vars = [col for col in df.columns if df[col].dtype == 'object']\nfor col in cat_vars:\n    df[col] = df[col].astype('category').cat.codes","15362aad":"df, kaggle_sub = df.iloc[:1460], df.iloc[1460:]","0a4ae2c0":"removed_cols = ['SalePrice']\nfeats = [c for c in df.columns if c not in removed_cols]","7674de87":"from sklearn.model_selection import train_test_split","2a0b0cdf":"train, valid = train_test_split(df, random_state=42)","2b0d4ea2":"from sklearn.ensemble import RandomForestRegressor","6b23d8f6":"rf = RandomForestRegressor(random_state=42)","3a4a5bc2":"rf.fit(train[feats], train['SalePrice'])","8c1edfca":"train_preds = rf.predict(train[feats])","31e2de72":"valid_preds = rf.predict(valid[feats])","5b94f70d":"from sklearn.metrics import mean_squared_error","9c57b724":"mean_squared_error(train['SalePrice'], train_preds) ** (1\/2)","1c40cbf7":"mean_squared_error(valid['SalePrice'], valid_preds) ** (1\/2)","cff6cdf8":"rf = RandomForestRegressor(random_state=42)","c350959f":"rf.fit(df[feats], df['SalePrice'])","a3096c6d":"kaggle_sub['SalePrice'] = np.exp(rf.predict(kaggle_sub[feats]))","f152116c":"kaggle_sub[['Id', 'SalePrice']].to_csv('submission.csv', index=False)","3c5b4783":"rf = RandomForestRegressor(random_state=42, n_estimators=200, n_jobs=-1)","f6a7fb47":"rf.fit(train[feats], train['SalePrice'])","ba047433":"train_preds_rf = rf.predict(train[feats])","6951550e":"valid_preds_rf = rf.predict(valid[feats])","3cd97230":"from sklearn.metrics import mean_squared_error","87f2c4bd":"mean_squared_error(train['SalePrice'],train_preds_rf) ** (1\/2)","15b676e2":"mean_squared_error(valid['SalePrice'], valid_preds_rf) ** (1\/2)","f69e11c4":"rf = RandomForestRegressor(random_state=42, n_estimators=200, max_features=.9, n_jobs=-1)","2108dd47":"rf.fit(df[feats], df['SalePrice'])","f6c09c2d":"kaggle_sub['SalePrice'] = np.exp(rf.predict(kaggle_sub[feats]))","8590a45c":"kaggle_sub[['Id', 'SalePrice']].to_csv('submission_rf_opt.csv', index=False)","d8ace41c":"fi = pd.Series(rf.feature_importances_, index=feats)","fbcd7dd6":"fi.sort_values(ascending=False)","fa8f69d5":"fi.sort_values().plot.barh(figsize=(20,20))","a648c3c1":"fi[fi > 0.002].shape","d5bf4284":"feats = fi[fi > 0.002].index.tolist() ","2cc0ab56":"rf = RandomForestRegressor(random_state=42, n_estimators=200, max_features=.9, n_jobs=-1)","ed043cf2":"rf.fit(train[feats], train['SalePrice'])","665259d9":"train_preds_rf = rf.predict(train[feats])","4a1696b4":"valid_preds_rf = rf.predict(valid[feats])","35ab63b9":"from sklearn.metrics import mean_squared_error","a8c25a77":"mean_squared_error(train['SalePrice'],train_preds_rf) ** (1\/2)","34ff81df":"mean_squared_error(valid['SalePrice'], valid_preds_rf) ** (1\/2)","bad2a16a":"fi = pd.Series(rf.feature_importances_, index=feats)","5dae8693":"fi.sort_values().plot.barh(figsize=(20,10))","3d264e6e":"object_cols = [c for c in fi.index if df_raw[c].dtype == 'object' and df_raw[c].nunique() < 8]","3d9ad27c":"df[object_cols].nunique()","3f3fdaaf":"def one_hot_encode(df, df_raw, object_cols, max_cats=None):\n    df.reset_index(inplace=True)\n    for col in object_cols:\n        df_raw[col].astype('category')\n        if max_cats and df_raw[col].nunique() > max_cats:\n            df_raw[col].cat.codes = df_raw[col].cat.codes.apply(lambda x : x if x <= max_cats else max_cats + 1)   \n        df = pd.concat([df, pd.get_dummies(df_raw[col], prefix=col, dummy_na=True)], axis=1)        \n        del df[col]        \n    return df","ef191693":"df = one_hot_encode(df, df_raw, object_cols)","65262820":"removed_cols = ['SalePrice']\nfeats = [c for c in df.columns if c not in removed_cols]","8bd91799":"train, valid = train_test_split(df, random_state=42)","dcab7eec":"rf = RandomForestRegressor(random_state=11, n_estimators=200,  n_jobs=-1)","47e608e7":"rf.fit(train[feats], train['SalePrice'])","a4b7f3a1":"train_preds_rf = rf.predict(train[feats])","c355dcb1":"valid_preds_rf = rf.predict(valid[feats])","95a9c2af":"mean_squared_error(train['SalePrice'], train_preds_rf) ** (1\/2)","6d70b94f":"mean_squared_error(valid['SalePrice'], valid_preds_rf) ** (1\/2)","39518745":"from sklearn.metrics import r2_score","b74b2c4a":"r2_score(valid['SalePrice'], valid_preds_rf) ","3b84782b":"fi = pd.Series(rf.feature_importances_, index=feats)","2b184c45":"fi.sort_values().plot.barh(figsize=(20,30))","24c6b85e":"fi[fi > 0.005].shape","8e7f2a97":"feats = fi[fi > 0.005].index.tolist() ","ddf909eb":"feats","af734278":"rf = RandomForestRegressor(random_state=42, n_estimators=200,  n_jobs=-1)","5a05c82f":"rf.fit(train[feats], train['SalePrice'])","aaf5117f":"train_preds_rf = rf.predict(train[feats])","32d8bf99":"valid_preds_rf = rf.predict(valid[feats])","03073b66":"mean_squared_error(train['SalePrice'],train_preds_rf) ** (1\/2)","d98c8459":"mean_squared_error(valid['SalePrice'], valid_preds_rf) ** (1\/2)","1b229d07":"r2_score(valid['SalePrice'], valid_preds_rf) ","6d6e36c0":"pd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh(figsize=(20,10))","3ed29e23":"preds = np.stack([t.predict(df[feats]) for t in rf.estimators_])","66fdd389":"preds.shape","0e6086e1":"x = df[['OverallQual','SalePrice']].copy()","d803ae34":"x['pred_std'] = np.std(preds, axis=0)\nx['pred_mean'] = np.mean(preds, axis=0)","3d735df8":"x.groupby('OverallQual').mean()","6f4476d4":"x.groupby('OverallQual', as_index=False).mean().plot('OverallQual', 'pred_mean', 'barh', xerr='pred_std', figsize=(20,10))","28dc11f3":"def cv(df, k, feats):\n    preds = []\n    score = []\n    fis = []\n    chunk = df.shape[0] \/\/ k\n    for i in range(k):\n        if i + 1 < k:\n            valid = df.iloc[i*chunk: (i+1)*chunk]\n            train = df.iloc[: i*chunk].append(df.iloc[(i+1)*chunk:])\n            \n        else:\n            valid = df.iloc[i*chunk:]\n            train = df.iloc[: i*chunk] \n        \n        print(train.shape, valid.shape)\n\n        rf = RandomForestRegressor(random_state=42, n_estimators=100, min_samples_leaf=2)\n        rf.fit(train[feats], train['SalePrice'])\n        score.append(mean_squared_error(valid['SalePrice'], rf.predict(valid[feats]))**(1\/2))        \n        fis.append(rf.feature_importances_)\n    return pd.Series(score), pd.Series(preds).mean(), fis","5f15970f":"score, preds, fis = cv(df, 5, feats)","dbb33668":"score.mean()","0adead58":"## Valida\u00e7\u00e3o Cruzada","bc5b2b4b":"## Transforma\u00e7\u00f5es nos Dados de Treino","646c121e":"## Intervalo de Confian\u00e7a Baseado em \u00c1rvore","dc1597e0":"## Importando bibliotecas\n","f61d3dd8":"## Juntando os DataFrames","b3290415":"## Transformando Textos em N\u00fameros","d439c548":"## Fazendo o Fit do Modelo Ap\u00f3s One Hot Encoding e Retirar Colunas","6b8e4b5d":"# Selecionando Features","c013b3cb":"## Selecionando Features Ap\u00f3s One Hot Encoding","f8b87e37":"## Otimizando a Random Forest","d3418298":"## Fazendo o Fit do Modelo Ap\u00f3s One Hot Encoding","4387c6bd":"## Separando os DataFrames","3503f25b":"## Selecionando Colunas","b5fc7769":"## Atualizando Train and Valid com Novas Transforma\u00e7\u00f5es no DataFrame","8c32fd58":"Transformando o pre\u00e7o em log:","51153f7c":"## Feature Importance Ap\u00f3s One Hot Encoding","cb885d35":"## Rodando um Novo Modelo com Menos Features","7cc394d2":"## Avaliando Features Novamente","27c295f5":"### Preenchendo Valores em Branco","a624ba7e":"## Separando Treino e Valida\u00e7\u00e3o","fc9dcb77":"## One Hot Encoding","f52f47a8":"## Lendo arquivos:","83c6879a":"## Avaliando Feature Importance pelo Scikit Learn"}}