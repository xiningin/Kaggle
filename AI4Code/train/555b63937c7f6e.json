{"cell_type":{"575c1594":"code","2850c3c4":"code","d73ff5a6":"code","71f18def":"code","f7c3af95":"code","36322282":"code","eec7b501":"code","ae766874":"code","87d1e467":"code","f1001d70":"code","88e7f238":"code","0c179e90":"code","20352b96":"code","6c853e53":"code","42b6319f":"markdown","d9a5c6a0":"markdown","f7b4f7cc":"markdown","2c76aeef":"markdown","6168761d":"markdown","22f46a6a":"markdown","1b1ccd5f":"markdown","60b06884":"markdown","b823e45d":"markdown","29973426":"markdown","e92b70a9":"markdown","f6bb3446":"markdown"},"source":{"575c1594":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2850c3c4":"data = np.load(\"\/kaggle\/input\/cifar10-keras-files-cifar10load-data\/cifar-10.npz\")\nfilenames = [\"x_train\",\"y_train\",\"x_test\",\"y_test\"]\n\nnps = []\nfor filename in filenames:\n    nps.append(data[filename])\nx_train, y_train, x_test, y_test = nps","d73ff5a6":"x_train.shape, y_train.shape, x_test.shape, y_test.shape","71f18def":"x_train = x_train[:5000]\ny_train = y_train[:5000]\n\nx_test = x_test[:5000]\ny_test = y_test[:5000]","f7c3af95":"import random\nimport matplotlib.pyplot as plt\nfrom skimage.feature import hog\nfrom skimage import data, exposure\n\ndef random_image_to_hog():\n    rnd = random.randint(0, 5000)\n    img = x_train[rnd]\n    label = y_train[rnd][0]\n    classes = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']\n    \n    fd, hog_img = hog(img, orientations=9, pixels_per_cell=(8, 8),\n                      cells_per_block=(2, 2), visualize=True, multichannel = True)\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(3, 3), sharex=True, sharey=True)\n\n    ax1.axis('off')\n    ax1.imshow(img, cmap=plt.cm.gray)\n    ax1.set_title(classes[label])\n        \n    ax2.axis('off')\n    ax2.imshow(hog_img, cmap=plt.cm.gray)\n    ax2.set_title('HOG image')\n    plt.show()","36322282":"random_image_to_hog()","eec7b501":"# from skimage.io import imread\n# from skimage.transform import resize\n\n# cat_img = imread('..\/input\/cat-sample\/cat.jpg')\n# plt.axis(\"off\")\n# plt.imshow(cat_img)\n# print(cat_img.shape)","ae766874":"# fd, cat_hog_image = hog(cat_img, orientations=9, pixels_per_cell=(8, 8),\n#                 \tcells_per_block=(2, 2), visualize=True, multichannel=True)\n# plt.axis(\"off\")\n# plt.imshow(cat_hog_image, cmap=\"gray\")","87d1e467":"x_train = x_train.astype('float64')\nx_train \/= 255\n\nx_test = x_test.astype('float64')\nx_test \/= 255","f1001d70":"x_train_hog = []\nfor i in range(len(x_train)):\n    fd , hog_im = hog(x_train[i] , orientations=9 , pixels_per_cell = (8,8),\n                     cells_per_block = (2,2) , visualize = True ,  multichannel = True)\n    x_train_hog.append(fd)\n\nx_train_hog = np.array(x_train_hog)       ","88e7f238":"from sklearn import svm\n\nmy_model = svm.SVC(kernel = 'rbf')\nmy_model.fit(x_train_hog , y_train.ravel())","0c179e90":"from sklearn.metrics import accuracy_score\n\nx_test_hog = []\nfor i in range(len(x_test)):\n    fd , hog_im = hog(x_test[i] , orientations=9 , pixels_per_cell = (8,8),\n                     cells_per_block = (2,2) , visualize = True ,  multichannel = True)\n    x_test_hog.append(fd)\n\nx_test_hog = np.array(x_test_hog)  \nprdct = my_model.predict(x_test_hog)\nprint(accuracy_score(y_test , prdct))","20352b96":"def predict_test():\n    rnd = random.randint(0, 5000)\n    real_img = x_test[rnd]\n    hog_img = x_test_hog[rnd]\n    label = y_test[rnd][0]\n    classes = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']\n    \n    fd , hog_image = hog(x_test[rnd] , orientations=9 , pixels_per_cell = (8,8),\n                     cells_per_block = (2,2) , visualize = True ,  multichannel = True)\n        \n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(4, 4), sharex=True, sharey=True)\n    ax1.axis('off')\n    ax1.imshow(real_img, cmap=plt.cm.gray)\n    ax1.set_title(classes[label])\n        \n    ax2.axis('off')\n    ax2.imshow(hog_image, cmap=plt.cm.gray)\n    ax2.set_title('HOG image')\n    plt.show()\n    \n    prdct = my_model.predict(hog_img.reshape(1, -1))[0]\n    print('predict_result = ' , classes[prdct])","6c853e53":"predict_test()","42b6319f":"**Size and shape of datasets**","d9a5c6a0":"**Define a function for select randomly an image from x_train set, converting it to HOG version and show them**","f7b4f7cc":"**We use 5000 data samples for training and testing**","2c76aeef":"![](https:\/\/www.thepythoncode.com\/media\/articles\/hog-feature-extraction-in-python\/Picture3.png)","6168761d":"**then, we need to convert x_train samples(images) to their HOG version;**","22f46a6a":"**Now, we can train our model usuing SVM classifier**","1b1ccd5f":"**now we want to select randomly an image from test set and the model tell us its prediction. GOOD LOCK!**","60b06884":"**We can calculate the accuracy of our model**","b823e45d":"# Classification\n\n**First step is normalizing our data**","29973426":"**Loading cifar10 dataset**\n\n![](https:\/\/production-media.paperswithcode.com\/datasets\/CIFAR-10-0000000431-b71f61c0_U5n3Glr.jpg)","e92b70a9":"**Oh... the model accuracy is close to 50% :)))  and that means, 50% of image predictions are correct!**","f6bb3446":"**Because our classification is base on HOG detection**"}}