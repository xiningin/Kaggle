{"cell_type":{"9eac2e9e":"code","b7cd7d0c":"code","49068eb0":"code","c065efa0":"code","a727684a":"code","aff50374":"code","6443bb17":"code","e1c83b52":"code","f087f8a2":"code","c93ec58a":"code","9f92183e":"code","6e02da2e":"code","f0d30198":"code","f51d8a69":"code","5e9b5dcd":"code","82cf942f":"code","0112f56a":"code","47e2fa9e":"code","99d4952f":"code","e5e720ec":"code","4fc715e5":"code","65d7f8cf":"code","a2d29cb7":"code","e67e7e27":"code","64bb82e8":"code","d1913777":"code","e86e2f16":"code","d95a9053":"code","8526a1c3":"code","ca956d7c":"code","c6b81e3c":"code","52aa85d4":"code","97d65e05":"code","6954ada1":"code","f97e13a2":"code","211df64a":"code","8dbd68c2":"code","600f6a87":"code","d4446ce3":"code","30cbff20":"code","a8efc87b":"markdown","9e5aeaa3":"markdown","09f1c761":"markdown","dd72336d":"markdown","1a4f2005":"markdown"},"source":{"9eac2e9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","b7cd7d0c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","49068eb0":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","c065efa0":"train.info()","a727684a":"test.info()","aff50374":"all = pd.concat([train, test], sort = False)\nall.info()","6443bb17":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","e1c83b52":"all.info()","f087f8a2":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","c93ec58a":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","9f92183e":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","6e02da2e":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","f0d30198":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","f51d8a69":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","5e9b5dcd":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","82cf942f":"all.info()","0112f56a":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","47e2fa9e":"all.info()","99d4952f":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","e5e720ec":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","4fc715e5":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","65d7f8cf":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","a2d29cb7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","e67e7e27":"from sklearn.ensemble import RandomForestClassifier","64bb82e8":"RF_Model = RandomForestClassifier()","d1913777":"#from sklearn.model_selection import GridSearchCV","e86e2f16":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","d95a9053":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","8526a1c3":"#RF_grid_model = RF_grid.fit(X_train, y_train)","ca956d7c":"#RF_grid_model.best_estimator_","c6b81e3c":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","52aa85d4":"RF_Model.fit(X_train, y_train)","97d65e05":"predictions = RF_Model.predict(X_test)\npredictions","6954ada1":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","f97e13a2":"all_test.head()","211df64a":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","8dbd68c2":"t_pred = RF_Model.predict(TestForPred).astype(int)","600f6a87":"PassengerId = all_test['PassengerId']","d4446ce3":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","30cbff20":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","a8efc87b":"****Train\/Test Split","9e5aeaa3":"****Extra Features:","09f1c761":"****Check Accuracy","dd72336d":"### Build Random Forest","1a4f2005":"****Final Predictions"}}