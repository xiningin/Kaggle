{"cell_type":{"fda9bc48":"code","12899872":"code","04ca6f4a":"code","bb09561b":"code","7a4e94e4":"code","bf3194a2":"code","608ae680":"code","b4c19b32":"code","68f345b2":"code","8a7b6c92":"code","df49da34":"code","5e9b1210":"code","6c7907dd":"code","cdd00f5b":"code","58b3eca2":"code","6e964030":"code","ee352124":"code","6f9c9e6d":"code","370461a5":"code","7730bcc9":"code","e3069be4":"code","d1efdc4d":"code","5d2bd783":"code","2b5bd72f":"code","c670dbf2":"code","8ebcc33f":"code","84d87dc3":"code","917a1387":"code","2f671915":"code","3c69ab43":"code","2fe8c516":"code","8bd663d3":"markdown","2b319841":"markdown","f737e811":"markdown","4ba2ce24":"markdown","dfa49f6e":"markdown","936ac605":"markdown","014e3714":"markdown"},"source":{"fda9bc48":"#Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, LambdaCallback\n\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","12899872":"df = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv') \ndf.head()","04ca6f4a":"df = df.iloc[:,1:]\ndf_norm = (df - df.mean()) \/ (df.max()-df.min())\ndf_norm.head()","bb09561b":"df.info()","7a4e94e4":"df_norm.corr()","bf3194a2":"df_norm[\"X1 transaction date\"][100:150].plot()","608ae680":"#converting back the normalized price to real value of price\n\ny_mean = df['Y house price of unit area'].mean()\ny_std = df['Y house price of unit area'].std()\n\ndef convert_label_value(pred):\n    return int(pred * y_std + y_mean)","b4c19b32":"#testing the function\n\nprint(convert_label_value(0.12))","68f345b2":"#input features\n\nX = df_norm.iloc[:, :6]\nX.head()","8a7b6c92":"# y value\n\ny = df_norm.iloc[:, -1]\ny.head()","df49da34":"#Feature and label values\n\nX_arr = X.values\ny_arr = y.values\n\nprint('X_arr shape: ', X_arr.shape)\nprint('Y_arr shape: ', y_arr.shape)","5e9b1210":"X_arr[0:5]","6c7907dd":"y_arr[0:5]","cdd00f5b":"X_train, X_test, y_train, y_test = train_test_split(X_arr, y_arr, test_size = 0.2, shuffle = True, random_state=7)\n\nprint('X_train shape: ', X_train.shape)\nprint('y_train shape: ', y_train.shape)\nprint('X_test shape: ', X_test.shape)\nprint('y_test shape: ', y_test.shape)","58b3eca2":"def get_model():\n    \n    model = Sequential([\n        Dense(5, input_shape = (6,), activation = 'relu'),\n        Dense(12, activation = 'sigmoid'),\n        Dense(6, activation = 'relu'),\n        Dense(1)\n    ])\n\n    model.compile(\n        loss='mse',\n        optimizer='adadelta'\n    )\n    \n    return model\n\nmodel = get_model()\nmodel.summary()","6e964030":"model = get_model()\n\npreds_on_untrained = model.predict(X_test)","ee352124":"early_stopping = EarlyStopping(monitor='accuracy', patience = 5)\n\n\nhistory = model.fit(\n    X_train, y_train,\n    validation_data = (X_test, y_test),\n    epochs = 100,\n    callbacks = [early_stopping]\n)","6f9c9e6d":"df_norm= df_norm.iloc[:,1:]","370461a5":"df_norm","7730bcc9":"#mean vales\nmean_val=df.mean()\nmean_val","e3069be4":"std_val=df.std()\nstd_val","d1efdc4d":"df.head(5)","5d2bd783":"#Take the year of sale\n\ndate=2012.500\n\ndate=(date- mean_val[0] )\/ std_val[0]","2b5bd72f":"#Take house age in years\n\nage= 23\n\nage= (age- mean_val[1] )\/ std_val[1]","c670dbf2":"#Distance to nearest metro staion (in m)\n\nmrt= 1200\nmrt= (mrt- mean_val[2] )\/ std_val[2]","8ebcc33f":"#number of stores in the locality\n\nstores=5\n\nstores=(stores- mean_val[3] )\/ std_val[3]","84d87dc3":"#latitude\n\nlatitude=24.97\n\nlatitude=(latitude- mean_val[4] )\/ std_val[4]","917a1387":"#longitude\n\nlongitude=121.53\n\nlongitude=(longitude- mean_val[5] )\/ std_val[5]","2f671915":"#numpy array\n\ntest_input= np.array( [[ date, age, mrt, stores, latitude, longitude]] )","3c69ab43":"#prediction\n\nval= model.predict(test_input)\nres=val[0][0]","2fe8c516":"#testing the function\n\nprint(\"The predicted price is=\",convert_label_value(res))","8bd663d3":"# Create the model","2b319841":"# Taking Sample Values","f737e811":"# Creating Training and Testing sets","4ba2ce24":"# Training the model using Train data","dfa49f6e":"# Test Prediction","936ac605":"# Using the untrained model to get dummy predictions","014e3714":"# Testing"}}