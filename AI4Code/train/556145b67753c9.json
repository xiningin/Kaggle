{"cell_type":{"426b1798":"code","5f455cf1":"code","a7ae33dd":"code","12bab672":"code","b50e0d3c":"code","4bd4547c":"code","bafe6a41":"code","783f0cdd":"code","cfbbfffb":"code","4af7110f":"code","b991c7ca":"code","e4a19afd":"code","870816d1":"code","e68cd483":"code","1083f029":"code","93733225":"code","95b33eca":"code","071e3f92":"code","a801f928":"markdown","92848a64":"markdown","64fbea9a":"markdown","327784e6":"markdown","3fffb891":"markdown","d01c9bfa":"markdown","30a38c38":"markdown","fac542b4":"markdown"},"source":{"426b1798":"seed = 300","5f455cf1":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom math import *\nimport math\nimport numpy as np\nimport pandas as pd","a7ae33dd":"Train = pd.read_csv(\"..\/input\/hta-tagging\/train.csv\")\nTrain.head(5)","12bab672":"def ReadFileToDataFrame(df,path):\n    for i in range(len(df.Filename)):\n        Filename = df.Filename[i];\n        CurrentFile = \"..\/input\/hta-tagging\/{2}\/{2}\/{0}\/{1}\".format(Filename.split(\"-\")[0],Filename,path);\n        File = open(CurrentFile, \"r\");\n        contents = File.read();\n        contents = contents.replace(\"\\r\\n\",\"\\n\")\n        contents = contents.replace(\"\\r\",\"\\n\")\n        df.Filename[i] = contents\n        continue;\n    df = df.rename(columns={\"Filename\":\"Text\"},inplace=True);\nReadFileToDataFrame(Train,\"train-data\");","b50e0d3c":"Train.head(5)","4bd4547c":"# \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 P -> 2 Q -> 1 \u0e41\u0e25\u0e30 N -> 0\nfrom sklearn.preprocessing import OneHotEncoder\ndef AnsEncoder(df, col_name):\n    for i in range(len(df[col_name])):\n        val = 0;\n        txt = df.loc[i,col_name];\n        if (txt == \"P\"): val = 2;\n        if (txt == \"Q\"): val = 1;\n        if (txt == \"N\"): val = 0;\n        df.loc[i,col_name] = val;\n        continue;\n    df[col_name] = pd.to_numeric(df[col_name]);","bafe6a41":"AnsEncoder(Train, \"Blinding of intervention\");\nAnsEncoder(Train, \"Blinding of Outcome assessment\");\nTrain.head(5)","783f0cdd":"#\u0e19\u0e33 Referenes (\u0e1a\u0e23\u0e23\u0e13\u0e32\u0e19\u0e38\u0e01\u0e23\u0e21 \u0e2b\u0e23\u0e37\u0e2d \u0e41\u0e2b\u0e25\u0e48\u0e07\u0e2d\u0e49\u0e32\u0e07\u0e2d\u0e34\u0e07) \u0e2d\u0e2d\u0e01\ndef remove_ref(text):\n    newtext = \"\";\n    for line in text.split(\"\\n\"):\n        if (line.lower()==\"references\" or line.lower()==\"reference\"): break;\n        else: newtext += line + \"\\n\";\n    return text;\nTrain[\"Text\"] = Train[\"Text\"].apply(lambda x : remove_ref(x))","cfbbfffb":"#\u0e2b\u0e32 Keyword\ndef FindBeforeColon(text):\n    \n    def kwreplace(cutted):\n        cutted = cutted.lower();\n        if (\"key\" in cutted): cutted = \"key\";\n        elif (\"objective\" in cutted): cutted = \"objective\";\n        elif (\"reference\" in cutted): cutted = \"reference\";\n        elif (\"method\" in cutted): cutted = \"method\";\n        elif (cutted.endswith(\"es\")): cutted = cutted[:-2];\n        elif (cutted.endswith(\"s\")): cutted = cutted[:-1];\n        return cutted;\n    \n    tmptxt = \"\";\n    curtopic = \"\";\n    topic = [];\n    \n    for line in text.split(\"\\n\"):\n        # \u0e16\u0e49\u0e32 \u0e2b\u0e19\u0e49\u0e32 \u0e42\u0e04\u0e25\u0e48\u0e2d\u0e19 (:) \u0e21\u0e35\u0e04\u0e33\u0e19\u0e49\u0e2d\u0e22\u0e01\u0e27\u0e48\u0e32 6 \u0e04\u0e33 \u0e41\u0e25\u0e30\u0e02\u0e36\u0e49\u0e19\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e15\u0e31\u0e27\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e43\u0e2b\u0e0d\u0e48 \u0e43\u0e2b\u0e49\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e40\u0e1b\u0e47\u0e19 Keyword \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38 \n        if (\":\" in line):\n            cutted = line.split(\":\")[0];\n            if (len(cutted)>0):\n                if (len(cutted.split(\" \")) < 6 and cutted[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" and (not \"Author\" in cutted)):\n                    \n                    cutted = kwreplace(cutted);\n                    if (curtopic != \"\"):\n                        topic.append((curtopic, tmptxt));\n                        tmptxt = \"\";\n                    curtopic = cutted;\n                    tmptxt = \"\".join(line.split(\":\")[1:]);\n                    continue;\n                    \n        # \u0e16\u0e49\u0e32\u0e43\u0e19\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e28 \u0e21\u0e35\u0e04\u0e33 1 \u0e04\u0e33 \u0e41\u0e25\u0e30 \u0e02\u0e36\u0e49\u0e19\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e15\u0e31\u0e27\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e43\u0e2b\u0e0d\u0e48 \u0e43\u0e2b\u0e49\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e40\u0e1b\u0e47\u0e19 Keyword \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\n        if (len(line)>0):\n            if (not \" \" in line and line[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n                \n                if (curtopic != \"\"):\n                        topic.append((curtopic, tmptxt));\n                curtopic = kwreplace(line);\n                tmptxt = \"\";\n                continue;\n        \n        tmptxt += \"\\n\" + line;\n    return topic;","4af7110f":"#\u0e2b\u0e32 Keyword \u0e43\u0e19\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21 \u0e17\u0e38\u0e01\u0e46 \u0e44\u0e1f\u0e25\u0e4c\nTO = [];\ni = 0;\nfor txt in Train.Text:\n    TO.append((i,FindBeforeColon(txt)));\n    i += 1;\n    continue;\nTestO = [];\nif TestMode:\n    i = 0;\n    for txt in Test.Text:\n        TestO.append((i,FindBeforeColon(txt)));\n        i += 1;\n        continue;","b991c7ca":"SelectedCols = [\"Text\",\"method\",\"key\"]","e4a19afd":"#\u0e19\u0e33 Keyword \u0e25\u0e07\u0e43\u0e19 DataFrame \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Keyword \u0e17\u0e35\u0e48\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e19 SelectedCols \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\ndef WriteToPD(df,arr):\n    arrlength = len(arr);\n    PlaceholderList = [None]*df.shape[0];\n    for idx, optionlist in arr:\n        if (idx % 100 == 0):\n            print(\"{0}\/{1} Completed\".format(idx,arrlength));\n        for option, text in optionlist:\n            if option in SelectedCols:\n                if not option in df:\n                    df[option] = PlaceholderList;\n                df.loc[idx,option] = text;\n        continue;\nWriteToPD(Train,TO)\nTrain.head()","870816d1":"from sklearn.model_selection import train_test_split as TTS;\n\ndef DoTTS(TX,TY,TrainSize):\n    global TrainX, ValX, TrainY, ValY \n    global TestTTS\n    TestTTS = TrainSize;\n    \n    TrainX, ValX, TrainY, ValY = TTS(TX, TY, test_size=TestTTS, random_state = seed);\n    if (TestMode):\n        ValX = np.array(Test.Text);","e68cd483":"from sklearn.feature_extraction.text import TfidfVectorizer;\n\nclass TFIDFVector:\n    def __init__(this):\n        print(\"- TF-IDF Vector: Initializing\")\n        \n        this.tfv = TfidfVectorizer(min_df=3,  max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1,\n            stop_words = 'english');\n        \n        print(\"- TF-IDF Vector: Initialized\")\n        \n    def CreateVector(this, val):\n        # \u0e2a\u0e23\u0e49\u0e32\u0e07 Vector \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a 1 Column (Train \u0e2b\u0e23\u0e37\u0e2d Validation) \u0e43\u0e19 Dataframe\n        print(\"- TF-IDF Vector: Creating Vector\")\n        \n        to_return = this.tfv.fit_transform(val);\n        \n        print(\"- TF-IDF Vector: Vector Created\")\n        \n        return to_return;\n    \n    def Create2Vector(this, train, val, reduceshape = True):\n        # \u0e2a\u0e23\u0e49\u0e32\u0e07 Vector \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a 2 Column \u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19\u0e17\u0e31\u0e49\u0e07 Train \u0e41\u0e25\u0e30 Validation\n        print(\"- TF-IDF Vector: Creating Vector\")\n        # \u0e16\u0e49\u0e32 Train \u0e40\u0e1b\u0e47\u0e19 Array 2 \u0e21\u0e34\u0e15\u0e34\n        if type(train[0]) != str:\n            tmplist = []\n            i = 0;\n            tl2 = [];\n            print(\"- TF-IDF Vector: Preparing\");\n            for l in train:\n                tl2 += [txt for txt in l if txt != None];\n            for l in val:\n                tl2 += [txt for txt in l if txt != None];\n            print(\"- TF-IDF Vector: Fitting\");\n            this.tfv.fit(tl2);\n            ValLength = len(train) + len(val);\n            def SafeTransformData(args):\n                if (args == None): return this.tfv.transform([\"\"])[0].toarray();\n                return this.tfv.transform([args])[0].toarray();\n            for ll in train:\n                if (i % max(ValLength\/\/10,1) == 0): print(\"- TF-IDF Vector: Creating Vector {0}\/{1} Completed\".format(i,ValLength));\n#                 if (ll == None): continue;\n#                 print(type(ll))\n                tmplist.append(np.array([SafeTransformData(txt) for txt in ll]));\n                i += 1;\n            t = np.stack(np.array(tmplist))\n            tmplist = []\n            for ll in val:\n                if (i % max(ValLength\/\/10,1) == 0): print(\"- TF-IDF Vector: Creating Vector {0}\/{1} Completed\".format(i,ValLength));\n                tmplist.append(np.array([SafeTransformData(txt) for txt in ll]));\n#                 tmplist.append(this.tfv.transform(ll).astype(\"float32\"))\n                i += 1;\n            v = np.stack(np.array(tmplist))\n            if (reduceshape):\n                nsamples = t.shape[0];\n                value2 = np.prod(t.shape[1:])\n                t = t.reshape((nsamples,value2))\n                nsamples = v.shape[0];\n                value2 = np.prod(v.shape[1:])\n                v = v.reshape((nsamples,value2))\n            to_return = (t, v);\n            \n        else: \n            this.tfv.fit(list(train)+list(val));\n            to_return = (this.tfv.transform(train), this.tfv.transform(val))\n        print(\"- TF-IDF Vector: Vector Created\")\n        return to_return;","1083f029":"import spacy;\nfrom sklearn.svm import SVC\nfrom sklearn.multioutput import MultiOutputRegressor\nclass SVMModel:\n    def __init__(this):\n        return;\n    def RequireVector(): return True;\n    def SetVector(this, VectorCreator):\n        this.VC = VectorCreator();\n        return;\n    def Train(this,Xin, Y):\n        print(\"SVMModel: Training Step will be combined with Predict State\")\n        this.Xin = Xin; this.Y = Y;\n    def Predict(this,XValin):\n        X, XVal = this.VC.Create2Vector(this.Xin, XValin);\n        \n        this.svc = SVC(random_state=seed) # random_state=seed\n        global SVMX, SVMY\n        SVMX = X; SVMY = this.Y;\n        print(\"SVMModel: Training\")\n        this.svc.fit(X, this.Y)\n        print(\"SVMModel: Finished Training\")\n        \n        print(\"SVMModel: Predicting\");\n        tR = this.svc.predict(XVal);\n        print(\"SVMModel: Predicted\");\n        return tR;","93733225":"def TestModel(Model):\n    print(\"Initializing Model\")\n    model = Model;\n    \n    print(\"Training Model\")\n    model.Train((TrainX),(TrainY));\n    \n    print(\"Predicting\")\n    global PredictedY; # \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e01\u0e32\u0e23 Debug\n    PredictedY = model.Predict(ValX);\n    \n    from sklearn.metrics import accuracy_score as ScoreAcc\n    \n    print(\"Calculating Score\")\n    Acc = ScoreAcc(ValY,PredictedY.astype(int))*100;\n    print(\"Accuracy = {0:.2f}%\".format(Acc))\n    \n    return PredictedY.astype(int), Acc;","95b33eca":"SS = SelectedCols;\n\nDoTTS(Train[SelectedCols],Train[[\"Blinding of intervention\",\"Blinding of Outcome assessment\"]],0.2)\n\nTrainY2 = TrainY[['Blinding of Outcome assessment']];\nTrainY = TrainY[['Blinding of intervention']];\n\nValY2 = ValY[['Blinding of Outcome assessment']];\nValY = ValY[['Blinding of intervention']];\n\nTrainX = np.array(TrainX);\nTrainY = np.array(TrainY);\nTrainY2 = np.array(TrainY2);\nValX = np.array(ValX);\n\nValY = np.array(ValY);\nValY2 = np.array(ValY2);\n\nSVM = SVMModel();\nSVM.SetVector(TFIDFVector);\nPredA, AccA = TestModel(SVM);\n\nTrainY, TrainY2 = TrainY2, TrainY;\n\nValY, ValY2 = ValY2, ValY;\n\nSVM = SVMModel();\nSVM.SetVector(TFIDFVector);\nPredB, AccB = TestModel(SVM);\n\n\nValY, ValY2 = ValY2, ValY;\n\n# \u0e41\u0e1b\u0e25\u0e07\u0e01\u0e25\u0e31\u0e1a 0 -> N 1 -> Q \u0e41\u0e25\u0e30 2 -> P\ndef Convert(i):\n    if i == 0: return \"N\";\n    if i == 1: return \"Q\";\n    if i == 2: return \"P\";\n\nFinalPred = [Convert(PredA[i])+Convert(PredB[i]) for i in range(len(PredA))];\nif (TestMode):\n    Test.Prediction = FinalPred;\n    Test[[\"Id\",\"Prediction\"]].to_csv(\"submission.csv\")\nelse:\n    CorrectAns = [Convert(ValY[i])+Convert(ValY2[i]) for i in range(len(ValY))];\n    from sklearn.metrics import accuracy_score as ScoreAcc\n    FinAcc = ScoreAcc(CorrectAns,FinalPred)*100;\n    print(\"A set          = {0:.2f}%\".format(AccA))\n    print(\"B set          = {0:.2f}%\".format(AccB))\n    print(\"\u0e04\u0e30\u0e41\u0e19\u0e19\u0e17\u0e35\u0e48\u0e04\u0e32\u0e14\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49 = {0:.2f}%\".format(FinAcc))","071e3f92":"\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 \u0e04\u0e30\u0e41\u0e19\u0e19\u0e08\u0e23\u0e34\u0e07\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e25\u0e02\u0e17\u0e28\u0e19\u0e34\u0e22\u0e21 \u0e41\u0e15\u0e48\u0e43\u0e19\u0e19\u0e35\u0e49\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e43\u0e2b\u0e49\u0e14\u0e39\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1b\u0e2d\u0e23\u0e4c\u0e40\u0e0b\u0e47\u0e19","a801f928":"Read File","92848a64":"# Data\/Text Preprocessing","64fbea9a":"# Model","327784e6":"# \u0e17\u0e14\u0e2a\u0e2d\u0e1a Model","3fffb891":"Train Test Split","d01c9bfa":"# Vector","30a38c38":"# \u0e2a\u0e23\u0e49\u0e32\u0e07 Model \u0e41\u0e25\u0e30 Vector","fac542b4":"\u0e43\u0e19 Notebook \u0e19\u0e35\u0e49 \u0e21\u0e31\u0e19\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e44\u0e21\u0e48 Perfect \u0e41\u0e15\u0e48\u0e2d\u0e32\u0e08\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e04\u0e38\u0e13\u0e44\u0e14\u0e49 Score \u0e2a\u0e39\u0e07\u0e44\u0e14\u0e49\n\n(\u0e04\u0e33\u0e40\u0e15\u0e37\u0e2d\u0e19 \u0e43\u0e0a\u0e49 Memory \u0e08\u0e33\u0e19\u0e27\u0e19\u0e21\u0e32\u0e01 \u0e41\u0e01\u0e49\u0e44\u0e21\u0e48\u0e17\u0e31\u0e19\u0e2a\u0e48\u0e07 \u0e41\u0e25\u0e30\u0e22\u0e31\u0e07\u0e21\u0e35\u0e1a\u0e31\u0e01\u0e21\u0e32\u0e01\u0e21\u0e32\u0e22 \u0e41\u0e15\u0e48\u0e2d\u0e32\u0e08\u0e21\u0e35\u0e2a\u0e48\u0e27\u0e19\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e49\u0e32\u0e07 \u0e44\u0e21\u0e48\u0e21\u0e32\u0e01\u0e01\u0e47\u0e19\u0e49\u0e2d\u0e22)\n\n\nTest \u0e41\u0e25\u0e49\u0e27\u0e44\u0e14\u0e49\u0e1b\u0e30\u0e21\u0e32\u0e13 30% \u0e41\u0e15\u0e48\u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e2d\u0e35\u0e01 Notebook \u0e19\u0e36\u0e07 Link: https:\/\/www.kaggle.com\/getdna\/sirawich-s-notebook-test\/output\n\n(\u0e42\u0e04\u0e49\u0e14\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e04\u0e25\u0e49\u0e32\u0e22\u0e01\u0e31\u0e19 \u0e22\u0e01\u0e40\u0e27\u0e49\u0e19\u0e01\u0e32\u0e23 Optimize \u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49 Memory \u0e19\u0e49\u0e2d\u0e22\u0e25\u0e07 \u0e41\u0e15\u0e48\u0e44\u0e21\u0e48\u0e04\u0e48\u0e2d\u0e22\u0e21\u0e35\u0e01\u0e32\u0e23\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22)"}}