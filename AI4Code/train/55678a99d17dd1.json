{"cell_type":{"d60ca2f6":"code","12ecb560":"code","b04ebdbf":"code","5d93afd0":"code","9d8af7de":"code","016d0ec4":"code","6899aab0":"code","b326bef5":"code","54d90adb":"code","a3fa7f33":"code","39ef8083":"code","6885cd4d":"code","33af3445":"code","a6d43426":"code","353a2903":"code","ba8951bf":"code","2c73e858":"code","8bdbe1e1":"code","039124e4":"code","2afb7a8f":"markdown","90c872ec":"markdown","ae01251f":"markdown","89e9b7d3":"markdown","969b43f1":"markdown","bd49cc7f":"markdown","a77d00ed":"markdown","abfbaf8a":"markdown","3629efca":"markdown","4e718236":"markdown","1f582525":"markdown"},"source":{"d60ca2f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12ecb560":"train = pd.read_csv(\"\/kaggle\/input\/gdsc-outr-ml-event\/FINAL_DATASET_KAGGLE\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/gdsc-outr-ml-event\/FINAL_DATASET_KAGGLE\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/gdsc-outr-ml-event\/FINAL_DATASET_KAGGLE\/sample_submission.csv\")","b04ebdbf":"train.head()","5d93afd0":"train.isnull().sum()","9d8af7de":"!pip install pycomp","016d0ec4":"# Importing libraries\nfrom pycomp.viz.insights import *\n\nethnicity_colors = ['chartreuse', 'coral']\nplot_donut_chart(df=train, col='ETHNICITY', colors=ethnicity_colors, figsize=(12, 12),\n                 title='Ethnicity Total and Percent')","6899aab0":"race_colors = ['chartreuse', 'coral','magenta', 'dodgerblue', 'darkgreen']\nplot_donut_chart(df=train, col='RACE', colors=race_colors, figsize=(12, 12),\n                 title='Race Total and Percent')","b326bef5":"marital_colors = ['magenta', 'dodgerblue']\nplot_donut_chart(df=train, col='MARITAL', colors=marital_colors, figsize=(12, 12),\n                 title='Marital Total and Percent')","54d90adb":"# Countplot for ethnicity\nethnicity_colors = ['chartreuse', 'coral', 'magenta', 'dodgerblue', 'darkgreen', 'darkorchid', 'brown', 'BlueViolet', 'cyan','coral', 'Turquoise', 'Gold']\n\nplot_countplot(df=train, col='ETHNICITY', palette=ethnicity_colors, \n               title='Ethnicity in Healthcare Coverage')\nplt.xticks(rotation=45);","a3fa7f33":"#Code by Parul Pandey  https:\/\/www.kaggle.com\/parulpandey\/a-guide-to-handling-missing-values-in-python\n\n\nfrom sklearn.impute import SimpleImputer\ntrain_most_frequent = train.copy()\n#setting strategy to 'mean' to impute by the mean\nmean_imputer = SimpleImputer(strategy='most_frequent')# strategy can also be mean or median \ntrain_most_frequent.iloc[:,:] = mean_imputer.fit_transform(train_most_frequent)","39ef8083":"train_most_frequent.isnull().sum()","6885cd4d":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in train.columns:\n    if train[c].dtype=='float16' or  train[c].dtype=='float32' or  train[c].dtype=='float64':\n        train[c].fillna(train[c].mean())\n\n#fill in -999 for categoricals\ntrain = train.fillna(-999)\n# Label Encoding\nfor f in train.columns:\n    if train[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[f].values))\n        train[f] = lbl.transform(list(train[f].values))\n        \nprint('Labelling done.')","33af3445":"train.head()","a6d43426":"train.dtypes","353a2903":"y=pd.DataFrame()\ny=train['HEALTHCARE_COVERAGE']\ndata=train.drop('HEALTHCARE_COVERAGE',axis=1)","ba8951bf":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nX_train,X_test,y_train,y_test=train_test_split(train,y,random_state=0)","2c73e858":"reg=DecisionTreeRegressor(random_state=0)\nreg.fit(X_train,y_train)","8bdbe1e1":"#RMSE error\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nrmse=sqrt(mean_squared_error(y_test,reg.predict(X_test)))\nprint(rmse)","039124e4":"#R^2 error\nprint(reg.score(X_test,y_test))\nprint(reg.score(X_train,y_train))","2afb7a8f":"#Health care Expenses 1.517539e+05   Is that a float???  According to dtypes it is.","90c872ec":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #001f3f;\"><b style=\"color:orange;\">Root Mean Square Error (RMSE)<\/b><\/h1><\/center>","ae01251f":"#Almost 1.0 ????? That's insane.","89e9b7d3":"#Exactly what I want:\n\nThe metric in this (ended) competition.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRHYhr4fam73RERkUoy7Vdw0249bf4n7j65RA&usqp=CAU)c3.ai","969b43f1":"#Single and Married? Only 16.1% Single among 11.411?","bd49cc7f":"#Seems that Latinos are so screwed in Healthcare Coverage. ","a77d00ed":"The last time I saw some kind of formula was on 2001. Awkward situation! And that's the metric of this Ended Competition.","abfbaf8a":"\"Root Mean Square Error (RMSE) is the standard deviation of the residuals (prediction errors). Residuals are a measure of how far from the regression line data points are; RMSE is a measure of how spread out these residuals are. In other words, it tells you how concentrated the data is around the line of best fit. Root mean square error is commonly used in climatology, forecasting, and regression analysis to verify experimental results.\"\n\nhttps:\/\/www.statisticshowto.com\/probability-and-statistics\/regression-analysis\/rmse-root-mean-square-error\/","3629efca":"#Acknowledgements:\n\n\n\nAkshit Rai https:\/\/www.kaggle.com\/akshit293\/rmse-0-098\n\nPyComp Library by Thiago Panini @thiagopanini\n\nCodes by Thiago Panini https:\/\/www.kaggle.com\/thiagopanini\/pycomp-predicting-survival-on-titanic-disaster\/notebook\n\nhttps:\/\/pypi.org\/project\/pycomp\/\n\n","4e718236":"https:\/\/www.kaggle.com\/akshit293\/rmse-0-098   RMSE","1f582525":"![](https:\/\/miro.medium.com\/max\/966\/1*lqDsPkfXPGen32Uem1PTNg.png)towardsdatascience.com"}}