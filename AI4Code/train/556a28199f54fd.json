{"cell_type":{"318db262":"code","eb04b734":"code","5afff828":"code","c1e60ae5":"code","61621359":"code","b92297cc":"code","0ca1f87e":"code","892b53c6":"code","c18a9acd":"code","0a9e134d":"code","212650fa":"code","91be3951":"code","ac08eda3":"code","aa418dc9":"code","f953ccf2":"code","5a3b94a2":"code","f34db282":"code","88e558c8":"code","55145ae6":"code","35eb89bb":"code","a3151deb":"code","698e3a5b":"code","8eafca69":"code","4be237af":"code","b0863ed4":"code","708aa6a1":"code","0cbee4cc":"markdown","ec2b58b7":"markdown","3448b03b":"markdown"},"source":{"318db262":"import warnings\nwarnings.filterwarnings('ignore')","eb04b734":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5afff828":"bmd_data = pd.read_csv('..\/input\/bmd-data\/bmd.csv')\nbmd_data.head()","c1e60ae5":"bmd_data.drop(['id','waiting_time'],axis=1,inplace=True)","61621359":"bmd_data.info()","b92297cc":"Category_col = [col for col in bmd_data.columns if bmd_data[col].dtypes == 'object']\nNumeric_col = [col for col in bmd_data.columns if bmd_data[col].dtypes == 'float64']","0ca1f87e":"Numeric_col.remove('bmd')","892b53c6":"from sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.pipeline import Pipeline","c18a9acd":"CategoryTransformer = Pipeline([('SimpleImputer_Cat',SimpleImputer(strategy='most_frequent')),('OneHotEncoder',OneHotEncoder())])\nNumericTransformer = Pipeline([('SimpleImputer_Num',SimpleImputer(strategy='mean')),('StandardScaler',StandardScaler())])\n\nPreProcessor = ColumnTransformer([('cat_trans',CategoryTransformer,Category_col),\n                                  ('num_trans',NumericTransformer,Numeric_col)])","0a9e134d":"from sklearn.model_selection import train_test_split,KFold,StratifiedKFold,cross_val_score\n\nX = bmd_data.drop('bmd',axis=1)\nY = bmd_data.bmd\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8,random_state =7)","212650fa":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.neighbors import KNeighborsRegressor","91be3951":"estimators=[]\nestimators.append(('PreProcessor',PreProcessor))\nestimators.append(('LinearRegression',LinearRegression()))\n\nLR_Pipeline = Pipeline(estimators)\nLR_Pipeline.fit(X_train,Y_train)\nY_pred = LR_Pipeline.predict(X_test)\n\nfrom sklearn import metrics\n\nnp.sqrt(metrics.mean_squared_error(Y_test,Y_pred))","ac08eda3":"KF = KFold(10,True,7)","aa418dc9":"DTR_estimators=[]\nDTR_estimators.append(('PreProcessor',PreProcessor))\nDTR_estimators.append(('DecisionTreeRegressor',DecisionTreeRegressor()))\n\nDTR_Pipeline = Pipeline(DTR_estimators)\n\nnp.sqrt((-cross_val_score(DTR_Pipeline,X,Y,cv=KF,scoring='neg_mean_squared_error')).mean())","f953ccf2":"RFR_estimators=[]\nRFR_estimators.append(('PreProcessor',PreProcessor))\nRFR_estimators.append(('RandomForestRegressor',RandomForestRegressor()))\n\nRFR_Pipeline = Pipeline(RFR_estimators)\n\nnp.sqrt((-cross_val_score(RFR_Pipeline,X,Y,cv=KF,scoring='neg_mean_squared_error')).mean())","5a3b94a2":"KNR_estimators=[]\nKNR_estimators.append(('PreProcessor',PreProcessor))\nKNR_estimators.append(('KNeighborsRegressor',KNeighborsRegressor()))\n\nKNR_Pipeline = Pipeline(KNR_estimators)\n\nnp.sqrt((-cross_val_score(KNR_Pipeline,X,Y,cv=KF,scoring='neg_mean_squared_error')).mean())","f34db282":"penguins_data = pd.read_csv('..\/input\/palmer-penguins-datasetalternative-iris-dataset\/penguins.csv')\npenguins_data.head()","88e558c8":"penguins_data.info()","55145ae6":"penguins_data.isnull().sum()","35eb89bb":"Category_col = [col for col in penguins_data.columns if penguins_data[col].dtypes == 'object']\nNumeric_col = [col for col in penguins_data.columns if penguins_data[col].dtypes == 'float64']","a3151deb":"Category_col.remove('species')","698e3a5b":"CategoryTransformer = Pipeline([('SimpleImputer_Cat',SimpleImputer(strategy='most_frequent')),('OneHotEncoder',OneHotEncoder())])\nNumericTransformer = Pipeline([('SimpleImputer_Num',SimpleImputer(strategy='mean')),('StandardScaler',StandardScaler())])\n\nPreProcessor = ColumnTransformer([('cat_trans',CategoryTransformer,Category_col),\n                                  ('num_trans',NumericTransformer,Numeric_col)])","8eafca69":"X = penguins_data.drop('species',axis=1)\nY = penguins_data.species","4be237af":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","b0863ed4":"SKF = StratifiedKFold(10,True,7)\n\nfor model in [LogisticRegression(),DecisionTreeClassifier(),RandomForestClassifier(),KNeighborsClassifier(),GaussianNB(),SVC()]:\n  model_name = str(model).split('(',1)[0]\n  print(f' Accuracy of {model_name}  : {round(cross_val_score(Pipeline(steps=[(\"PreProcessor\",PreProcessor),(model_name,model)]),X,Y,cv=SKF,scoring=\"accuracy\").mean()*100,2)}%')\n","708aa6a1":"SKF = StratifiedKFold(10,True,7)\n\nLRC_estimators=[]\nLRC_estimators.append(('PreProcessor',PreProcessor))\nLRC_estimators.append(('LogisticRegression',LogisticRegression()))\n\nLRC_Pipeline = Pipeline(LRC_estimators)\n\nround(cross_val_score(LRC_Pipeline,X,Y,cv=SKF,scoring=\"accuracy\").mean()*100,2)","0cbee4cc":"# Classification","ec2b58b7":"# Pipeline\n\nPipeline helps to automate task(Scaling data, converting categorical to numerical,etc) to minimise human error and prevent data leakage. \n\n![](https:\/\/drive.google.com\/uc?export=view&id=1OsyxlinrXU4G0J9SLqA440ei_7hKfwcK)\n","3448b03b":"# Regression"}}