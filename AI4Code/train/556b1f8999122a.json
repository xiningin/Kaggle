{"cell_type":{"2b9aced7":"code","b711bc62":"code","e969a30d":"code","1961ceb2":"code","6c7840cf":"code","cbe3fc57":"code","7bba62e7":"code","cf143f47":"code","f0120dfd":"code","7f9b202a":"code","2652c74a":"code","c282a3c1":"code","86009e3f":"code","b662c4b8":"code","8cd7270b":"code","e57d3580":"code","62909fc0":"code","d67e5183":"code","1dc24c9c":"code","7667cb7a":"code","d07cbd40":"code","70271cba":"code","af472f33":"code","41d98db7":"code","1bb75115":"code","0a9c8ec1":"code","05e01366":"code","e673f210":"code","e4bc7ca8":"code","3acb5052":"code","5100429e":"code","27e70f9b":"code","02d9dcb7":"code","b64bf10a":"code","30f70b93":"code","d60f6d29":"code","64d8ac89":"code","e31659fb":"code","526ff7ae":"code","1bbab7de":"code","2cbf0286":"code","66ab52d8":"code","02d4ea5a":"code","775857c0":"code","1f07c422":"markdown","49f6bdab":"markdown","ca8c7c0d":"markdown","c92fb968":"markdown","fd972736":"markdown","174ec2f0":"markdown","a1005b55":"markdown","56fff112":"markdown","a5c580e8":"markdown","a0f89113":"markdown","792e3911":"markdown","20edec19":"markdown","3c0a6b49":"markdown","29125736":"markdown","253e52e9":"markdown","4d4fe321":"markdown","18a4661a":"markdown","76788104":"markdown","bc313f4e":"markdown","99eb5c49":"markdown","0948c658":"markdown","84f6bae7":"markdown","e966615e":"markdown","e5948fee":"markdown","7dbe9976":"markdown","65880cc9":"markdown","242bbe67":"markdown","6a16bbfd":"markdown","17c22eb2":"markdown","20d6a2e5":"markdown","9a92fdd5":"markdown","5c0ec710":"markdown","0f3205e3":"markdown","16327900":"markdown","eea850ba":"markdown","97c77009":"markdown"},"source":{"2b9aced7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","b711bc62":"!pip install pyspark","e969a30d":"#PySpark Package Import\n\nfrom pyspark.sql import SparkSession\nimport pyspark.sql.functions as F\nimport time\n\nfrom pyspark.sql.functions import monotonically_increasing_id,broadcast","1961ceb2":"my_spark = SparkSession.builder.getOrCreate()\nmy_spark","6c7840cf":"print('Version',my_spark.version)","cbe3fc57":"%%time\nflights = my_spark.read.csv('\/kaggle\/input\/flight-delays\/flights.csv',header=True)\nairports = my_spark.read.csv('\/kaggle\/input\/flight-delays\/airports.csv',header=True)\nairlines = my_spark.read.csv('\/kaggle\/input\/flight-delays\/airlines.csv',header=True)\n","7bba62e7":"flights.printSchema()","cf143f47":"type(flights)","f0120dfd":"flights.select('DISTANCE').dtypes","7f9b202a":"flights = flights.withColumn('DISTANCE',flights['DISTANCE'].cast('integer'))\nflights","2652c74a":"flights.show(5)","c282a3c1":"airports.show(5)","86009e3f":"airlines.show(5)","b662c4b8":"flights = flights.withColumn('duration_hrs',flights.AIR_TIME\/60)\nflights.show(5)","8cd7270b":"dist_flights = flights.filter('DISTANCE>1000')\ndist_flights.show(1)","e57d3580":"dist_col = dist_flights.select('YEAR','MONTH','FLIGHT_NUMBER','TAIL_NUMBER','ORIGIN_AIRPORT','DESTINATION_AIRPORT','AIR_TIME',\n                               'DISTANCE')\ndist_col.show(5)","62909fc0":"dist_col.filter(dist_col.DESTINATION_AIRPORT=='PBI').show(5)","d67e5183":"dist_col.filter(dist_col.ORIGIN_AIRPORT=='JFK').filter(dist_col.DESTINATION_AIRPORT=='PBI').show(5)","1dc24c9c":"dist_col.selectExpr('YEAR','MONTH','FLIGHT_NUMBER','TAIL_NUMBER','ORIGIN_AIRPORT',\n                    'DESTINATION_AIRPORT','AIR_TIME','DISTANCE','DISTANCE\/(AIR_TIME \/60)as Average_Speed').show(5)","7667cb7a":"dist_col.count()","d07cbd40":"dist_col.filter(dist_col.ORIGIN_AIRPORT=='SEA').groupby('ORIGIN_AIRPORT').count().show()","70271cba":"#Converting Column Type using cast\ndist_col=dist_col.withColumn('AIR_TIME',dist_col['AIR_TIME'].cast('integer'))\ndist_col","af472f33":"#Minimum value\ndist_col.select('ORIGIN_AIRPORT','DISTANCE','AIR_TIME').groupby().min('DISTANCE').show()","41d98db7":"# Maximum Value\n\ndist_col.select('DISTANCE').groupby().max().show()\n\n","1bb75115":"dist_col.select('DISTANCE').groupby().avg().show()","0a9c8ec1":"dist_col.groupby().sum('DISTANCE').collect()[0][0]","05e01366":"dist_col.filter(dist_col.ORIGIN_AIRPORT=='SEA').groupby('DESTINATION_AIRPORT').count().show(5)","e673f210":"month_df = dist_col.groupBy('MONTH','ORIGIN_AIRPORT')\nmonth_df.avg('DISTANCE').show(5)","e4bc7ca8":"month_df.agg(F.mean('DISTANCE')).show(5)","3acb5052":"flights.rdd.getNumPartitions()","5100429e":"airports.select(airports['AIRPORT']).distinct().show(5)","27e70f9b":"airports.filter('length(AIRPORT)<15').show()","02d9dcb7":"airports.filter(~F.column('AIRPORT').contains('Airport')).show()","b64bf10a":"airports.withColumn('State Name',F.when(airports.STATE=='TX','Texas')).show(5)","30f70b93":"airports.withColumn('Flag',F.when(airports.STATE=='TX','Texas').when(airports.STATE=='GA','Georgio')\n                    .otherwise('N\/A')).show(5)","d60f6d29":"airports.withColumn('ID',monotonically_increasing_id()).show()","64d8ac89":"start_time = time.time()\n\ndest_cache = flights.select('DESTINATION_AIRPORT').cache()\nprint('First Call to cache',dest_cache,time.time()-start_time)\nsecond_time = time.time()\nprint('Second Call to the dataframe',dest_cache,time.time()-second_time)","e31659fb":"print('Is the dataframe Cached?',dest_cache.is_cached)\ndest_cache.unpersist()\n\nprint('Is the dataframe Cached?',dest_cache.is_cached)","526ff7ae":"start_time = time.time()\ndf = airports.join(flights,airports['IATA_CODE']==flights['ORIGIN_AIRPORT'])\nprint('Time to Join the dataframe',time.time()-start_time)\n","1bbab7de":"df.explain()","2cbf0286":"start_time = time.time()\ndf_broadcast = airports.join(broadcast(flights),airports['IATA_CODE']==flights['ORIGIN_AIRPORT'])\nprint('Time to execute',start_time-time.time())","66ab52d8":"df_broadcast.explain()","02d4ea5a":"airports.createOrReplaceTempView('Airports_tbl')\n\nmy_spark.sql('Select * from Airports_tbl').show()","775857c0":"my_spark.sql('select * from airports_tbl where state=\"PA\"').show()","1f07c422":"### Groupby Columns and doing a Count","49f6bdab":"### Filter based on Length of Airport Name\u00b6","ca8c7c0d":"### Clearing the Cache","c92fb968":"### Select with Filter based on Column Values","fd972736":"### Importing Files","174ec2f0":"### Caching in Spark","a1005b55":"### Count on the Entire dataset","56fff112":"### Monotinically Increasing IDs","a5c580e8":"### Filtering Columns with PySpark","a0f89113":"### Select Column With Expression","792e3911":"### Aggregating Columns With\n\n- Minimum\n- Maximum\n- Average\n- Sum","20edec19":"### Filter so that AIRPORT name should not contain Airport in its name","3c0a6b49":"### Install PySpark","29125736":"### Select with Filter based on Multiple Column Values\u00b6","253e52e9":"### Top 5 data in Airlines","4d4fe321":"### Type","18a4661a":"### Creating a new Column","76788104":"### Explain Plan on the dataframe","bc313f4e":"### Groupby on multiple Columns","99eb5c49":"### PySpark Package Import","0948c658":"### .agg in PySpark.SQL.functions","84f6bae7":"### Column Information","e966615e":"### Converting String to Integer","e5948fee":"### Multiple When Statement in PySpark","7dbe9976":"### Filtering Data in PySpark\nWe will filter data based on Distance>1000","65880cc9":"### Joining two Dataframe","242bbe67":"### Printing the Schema","6a16bbfd":"### PySpark Version","17c22eb2":"### Count from Particular Origin to Multiple Destination","20d6a2e5":"### Show top 5 data in the dataframe","9a92fdd5":"### Top 5 records in Airport","5c0ec710":"### Another way to use the aggregation on Column","0f3205e3":"### Create a Temporary Table in PySpark","16327900":"### Checking Number of Paritions for the dataframe","eea850ba":"### Select Specific Column Data","97c77009":"#### Conditional Statement Execution in PySpark DataFrame"}}