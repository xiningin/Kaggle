{"cell_type":{"cc2981e9":"code","8e42321f":"code","1eafb7b7":"code","b38c2bb6":"code","a7fcd394":"code","c9a4fb02":"code","7c920f93":"code","fb753620":"code","90af27e2":"code","283eba72":"code","1c1dd082":"code","d114ff29":"code","21e31c46":"code","3e9dd51f":"markdown","531c69c1":"markdown","96681ede":"markdown","23508994":"markdown","9f66da89":"markdown","e3191022":"markdown","bd8d91e5":"markdown","4c9d940b":"markdown","caddf766":"markdown","f9826e21":"markdown","62a20cc7":"markdown","0d6edac1":"markdown"},"source":{"cc2981e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e42321f":"pip install neurolab","1eafb7b7":"import random\nimport numpy as np\nimport pandas as pd\nimport neurolab as nl\nimport matplotlib.pyplot as plt","b38c2bb6":"# Total dataset values 1\nnames_t1 = []\nlabels_t1 = []\ndata_t1 = []\n\n# Total dataset values 2\nnames_t2 = []\nlabels_t2 = []\ndata_t2 = []\n\n# Training values\nnames_t = []\nlabels_t = []\ndata_t = []\n\n# Simulation values\nnames_s = []\nlabels_s = []\ndata_s = []","a7fcd394":"# Upload the dataset\ndataset = pd.read_csv(\"\/kaggle\/input\/video-games-rating-by-esrb\/Video_games_esrb_rating.csv\")\n\n# Division of the dataset into names, data and labels\nfor i in dataset.index:\n    row = []\n    for j in dataset.columns:\n        value = dataset.iloc[i][j]\n        if j == \"title\":\n            names_t1.append(value)\n        elif j == \"esrb_rating\":\n            labels_t1.append(value)\n        else:\n            row.append(value)\n    data_t1.append(row)","c9a4fb02":"# Changing the values of the labels\n# Being strings, they must be encoded with a list\n# (\"E\" = [1, 0, 0, 0], \"ET\" = [0, 1, 0, 0], \"T\" = [0, 0, 1, 0], \"M\" = [0, 0, 0, 1])\nlist_labels = []\nfor index, element in np.ndenumerate(labels_t1):\n    if element == \"E\":\n        list_labels.append([1, 0, 0, 0])\n    elif element == \"ET\":\n        list_labels.append([0, 1, 0, 0])\n    elif element == \"T\":\n        list_labels.append([0, 0, 1, 0])\n    elif element == \"M\":\n        list_labels.append([0, 0, 0, 1])\nlabels_t1 = list_labels","7c920f93":"# Select a sample of N data to use\nN = 100\nsamples_idx = random.sample(range(0, len(data_t1)), N)\nfor i in samples_idx:\n    names_t.append(names_t1[i])\n    data_t.append(data_t1[i])\n    labels_t.append(labels_t1[i])\n    \n# Convert from array to ndarray\ndata_t = np.array(data_t)\nlabels_t = np.array(labels_t)\ndataset.iloc[samples_idx]","fb753620":"# Definition of a multilayer neural network with 1 input\n# Each element of the list in the first argument\n# Specify the minimum and maximum of the input values\n# Each element of the list in the second argument\n# Specify the size of the layer (the last one is the output one)\ninput_l = [[0, 1] for i in range(data_t.shape[1])]\nmultilayer_net = nl.net.newff(input_l, [10, 10, 10, 10, 4])\n\n# Set the gradient descent training algorithm\nmultilayer_net.trainf = nl.train.train_gd        \n\n# Neural network training\n# The lr value represents the learning rate\nerror = multilayer_net.train(data_t, labels_t, epochs=2000, show=100, lr=0.01)","90af27e2":"# Results chart\nplt.figure()\nplt.plot(error)\nplt.xlabel(\"Number of epochs\")\nplt.ylabel(\"Training error\")\nplt.title(\"Progress of the training error\")\nplt.grid()\nplt.show()","283eba72":"# Upload the dataset\ndataset = pd.read_csv(\"\/kaggle\/input\/video-games-rating-by-esrb\/test_esrb.csv\")\n\n# Division of the dataset into names, data and labels\nfor i in dataset.index:\n    row = []\n    for j in dataset.columns:\n        value = dataset.iloc[i][j]\n        if j == \"title\":\n            names_t2.append(value)\n        elif j == \"esrb_rating\":\n            labels_t2.append(value)\n        else:\n            row.append(value)\n    data_t2.append(row)\n    \n# Changing the values of the labels\n# Being strings, they must be encoded with a list\n# (\"E\" = [1, 0, 0, 0], \"ET\" = [0, 1, 0, 0], \"T\" = [0, 0, 1, 0], \"M\" = [0, 0, 0, 1])\nlist_labels = []\nfor index, element in np.ndenumerate(labels_t2):\n    if element == \"E\":\n        list_labels.append([1, 0, 0, 0])\n    elif element == \"ET\":\n        list_labels.append([0, 1, 0, 0])\n    elif element == \"T\":\n        list_labels.append([0, 0, 1, 0])\n    elif element == \"M\":\n        list_labels.append([0, 0, 0, 1])\nlabels_t2 = list_labels","1c1dd082":"# Select a sample of N data to use\nN = 300\nsamples_idx = random.sample(range(0, len(data_t2)), N)\nfor i in samples_idx:\n    names_s.append(names_t2[i])\n    data_s.append(data_t2[i])\n    labels_s.append(labels_t2[i])\n    \n# Convert from array to ndarray\ndata_s = np.array(data_s)\nlabels_s = np.array(labels_s)\ndataset.iloc[samples_idx]","d114ff29":"# Network simulation\nresults = multilayer_net.sim(data_s)\n\n# Print the results, with their actual value\nc_cv = np.array([0, 0, 0, 0])\nc_v = np.array([0, 0, 0, 0])\nfor i in range(len(results)):\n    idx1 = np.argmax(results[i])\n    if idx1 == 0: pv = \"E\"\n    elif idx1 == 1: pv = \"ET\"\n    elif idx1 == 2: pv = \"T\"\n    elif idx1 == 3: pv = \"M\"\n    idx2 = np.argmax(labels_s[i])\n    if idx2 == 0: ev = \"E\"\n    elif idx2 == 1: ev = \"ET\"\n    elif idx2 == 2: ev = \"T\"\n    elif idx2 == 3: ev = \"M\"\n    print(\"Predicted value: \", pv, \"; correct value: \", ev)\n    c_v[idx2] += 1\n    if pv == ev:\n        c_cv[idx1] += 1","21e31c46":"# Calculate the ratio of correctly predicted values to total values\nprint(\"Percentage of correctly predicted values: \", (np.sum(c_cv)\/np.sum(c_v))*100, \"%\")\nprint(\"Percentage of correctly E predicted values: \", (c_cv[0]\/c_v[0])*100, \"%\")\nprint(\"Percentage of correctly ET predicted values: \", (c_cv[1]\/c_v[1])*100, \"%\")\nprint(\"Percentage of correctly T predicted values: \", (c_cv[2]\/c_v[2])*100, \"%\")\nprint(\"Percentage of correctly M predicted values: \", (c_cv[3]\/c_v[3])*100, \"%\")","3e9dd51f":"And, just like before, we select a pool of data to use for the simulation (we can also print those data).","531c69c1":"Now we can import all the libraries we need.","96681ede":"We can also calculate the ratio of guessed values.","23508994":"The next step is to create and train the neural network (we'll use the gradient descend algorithm).","9f66da89":"First of all, we need to install the **neurolab** library ([https:\/\/pypi.org\/project\/neurolab\/](https:\/\/pypi.org\/project\/neurolab\/). It will simplify the work with the neural network.","e3191022":"Those are the lists that will contains the data we'll use to work.","bd8d91e5":"The next thing we need to do is selecting a pool of data to use for the training. We can perform a print of the selected rows to look at the data.","4c9d940b":"Then, we have to modify the labels, replacing every value with a list.","caddf766":"The first thing we need to do is read the CSV training file and divide every line in name, data and label.","f9826e21":"Now that we've created a neural network, we need to test it on some value. To do that, we can use the CSV simulation file, that we need to read and modify in the same way we did before.","62a20cc7":"We can also plot the error values of the neural network through the epochs.","0d6edac1":"Now we just need to simulate the neural network with those values. To obtain the predicted values from the neural network, we just need to look at the maximum element for each data, and convert it using their index."}}