{"cell_type":{"d1b9261f":"code","30173da7":"code","6b1eac00":"code","9e965c59":"code","f9530c2c":"code","f58c3a8e":"code","a18b42ea":"code","61fdb675":"code","0f16c88a":"code","85c4d2d6":"code","2a0afbab":"code","f92e27d8":"code","7b5065da":"code","7d9c19a3":"code","e267a04c":"code","a9936cb2":"markdown","23febd02":"markdown","12145205":"markdown","7979c139":"markdown","93004b33":"markdown","0568c08f":"markdown","f2fb7078":"markdown","82f32b7c":"markdown","e7411c10":"markdown"},"source":{"d1b9261f":"# import required libraries for data analysis\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","30173da7":"# open csv file\ndf = pd.read_csv('..\/input\/misis-ml-lab1\/train.csv')\ndf_test = pd.read_csv('..\/input\/misis-ml-lab1\/test.csv')\ndf.columns = df.columns.map(str.lower)  # column names to lowercase\ndf_test.columns = df_test.columns.map(str.lower)\ndf.head()","6b1eac00":"# check data types, it provides also details on null values, so next checking of null values may not be required\ndf.info()","9e965c59":"df.describe(include='all').T","f9530c2c":"# replacing missing values with mean\ndf.albumin_and_globulin_ratio.fillna(df.albumin_and_globulin_ratio.mean(), inplace=True)","f58c3a8e":"# are there still any missing values?\ndf.info()","a18b42ea":"from sklearn.preprocessing import LabelEncoder, RobustScaler","61fdb675":"# gender contains string values Male, Female; these will be converted into 0, 1, as ML algorithms like just numerical values\nle = LabelEncoder()\ndf['gender'] = le.fit_transform(df['gender'])\ndf_test['gender'] = le.fit_transform(df_test['gender'])\ndf.gender.head()","0f16c88a":"rs = RobustScaler()\nfor c in df[['age', 'gender', 'total_bilirubin', 'alkaline_phosphotase', 'alamine_aminotransferase', 'albumin_and_globulin_ratio']].columns:\n    df[c] = rs.fit_transform(df[c].values.reshape(-1, 1))\n    df_test[c] = rs.fit_transform(df_test[c].values.reshape(-1, 1))\ndf.head()","85c4d2d6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df.drop('liver_disease', axis=1), df['liver_disease'], test_size=0.2, random_state=123)\n\nprint('Train values shape:', X_train.shape)\nprint('Test values shape:', X_test.shape)\nprint('Train target shape:', y_train.shape)\nprint('Test target shape:', y_test.shape)","2a0afbab":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score","f92e27d8":"# Logistic Regression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_train_hat = model.predict(X_train)\ny_test_hat = model.predict(X_test)\n\nprint(model)\nprint('Train performance')\nprint('-------------------------------------------------------')\nprint(classification_report(y_train, y_train_hat))\n\nprint('Test performance')\nprint('-------------------------------------------------------')\nprint(classification_report(y_test, y_test_hat))\n\nprint('Roc_auc score')\nprint('-------------------------------------------------------')\nprint(roc_auc_score(y_test, y_test_hat))\nprint('')\n\nprint('Confusion matrix')\nprint('-------------------------------------------------------')\nprint(confusion_matrix(y_test, y_test_hat))\n","7b5065da":"# Random Forest\nmodel = RandomForestClassifier(n_jobs=-1,random_state=123)\nmodel.fit(X_train, y_train)\ny_train_hat = model.predict(X_train)\ny_test_hat = model.predict(X_test)\n\nprint(model)\nprint('Train performance')\nprint('-------------------------------------------------------')\nprint(classification_report(y_train, y_train_hat))\n\nprint('Test performance')\nprint('-------------------------------------------------------')\nprint(classification_report(y_test, y_test_hat))\n\nprint('Roc_auc score')\nprint('-------------------------------------------------------')\nprint(roc_auc_score(y_test, y_test_hat))\nprint('')\n\nprint('Confusion matrix')\nprint('-------------------------------------------------------')\nprint(confusion_matrix(y_test, y_test_hat))\n","7d9c19a3":"y_pred_test = model.predict(df_test)\nprint(y_pred_test)","e267a04c":"output = pd.DataFrame({'Id':df_test.id, 'Liver_disease':y_pred_test})\noutput.to_csv('sample.csv', index=False)","a9936cb2":"# Classification with Random Forest","23febd02":"## Create sample file","12145205":"## Split data for modeling\nThis is very needed in order to be able to compare performance of model on unseen data. I will choose test size to be 0.25. Dataset is also split to X (features) and y (target) variables.","7979c139":"## Conclusion\nAfter running these cells you will get a file, that you need to submit to the system (in this case sample.csv).","93004b33":"## Model selection\nWe will use several popular models and see how they perform on our dataset.\nAt the end we choose 3 best performing models and will merge them together.","0568c08f":"## Encode & Scale\nI will use sklearn library to encode gender and scale numerical variables","f2fb7078":"### What can we see from describe & info ?\n- for gender we have 2 unique values - sounds reasonable\n- there seems to be extremes for several fields (compare 75% with max) - we will have to fix it\n- liver disease, our target variable, has 2 values\n- albumin_and_globulin_ratio have some missing values those must be handled","82f32b7c":"Ok, Logistic Regression worked fine, nothing special, but still 0.62 f1 score on test dataset is pretty well, model also does not overfit. But we want better score, let's try now SVM that should work well on low dimension data","e7411c10":"### Handle missing values\nWe are going to fix missing values on albumin_and_globulin_ratio field, easiest way is often best way, so just replace it with mean or median"}}