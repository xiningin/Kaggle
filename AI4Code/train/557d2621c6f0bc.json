{"cell_type":{"b48facb3":"code","33e6469e":"code","e5c4bf99":"code","68d6822f":"code","2da9189d":"code","4f6ab13b":"code","72aa847d":"code","0c30803b":"code","50751d9f":"code","40bbf037":"code","cb167e20":"code","9fb1607e":"code","d2a5c893":"code","cf2b26e2":"code","5ffdcc0b":"code","ca72f6c2":"code","5f38d4fa":"code","41675f86":"code","82f8b4a9":"code","773b0daf":"code","06da4e53":"code","45df7b8d":"code","016fd969":"code","64f6b079":"code","6aa3385f":"code","acb23722":"code","94e06252":"code","04dca062":"code","5b877545":"code","c8419023":"code","1ec067ca":"code","b24e2621":"code","260b9603":"code","d6b0e929":"code","fc118726":"code","8ab94033":"code","a9e641fd":"code","805ce7aa":"code","52aae2a9":"code","fb3897e9":"code","c881abb9":"code","e86a742d":"code","fc7d3479":"code","e4c35c4d":"code","bed3fbb0":"code","44391431":"code","b072c9eb":"markdown","381fadad":"markdown","f4ec570b":"markdown","bc71aa67":"markdown","58961b59":"markdown","966ab0da":"markdown","e049d904":"markdown","67a3b8df":"markdown","f892980b":"markdown","0588f0b6":"markdown","c0968294":"markdown","a5f1c420":"markdown","2c63ae0c":"markdown","e23d786f":"markdown","dd5f0680":"markdown","04ebf7a4":"markdown","75508be1":"markdown","a0422aed":"markdown","e0b8ce66":"markdown","a42b75a5":"markdown","9b1bea98":"markdown","adb5c94d":"markdown","d1379c24":"markdown","5d3cd35e":"markdown","be008232":"markdown","4fd14a68":"markdown","e6c625d5":"markdown","9a81b5d2":"markdown","a350a0c6":"markdown","dcb078f3":"markdown","15ca5cdd":"markdown","469c2ccc":"markdown","869ef940":"markdown","9fd3c80d":"markdown","8ae7fad2":"markdown","8a153fcd":"markdown","440e64a2":"markdown","a571630c":"markdown","0d33cbdc":"markdown","1fa62c62":"markdown","d542a07c":"markdown","802a92f9":"markdown","cc48b885":"markdown","52f7c86b":"markdown","0f14473d":"markdown","27b80fd1":"markdown","2e392f6a":"markdown","792433e3":"markdown","7d2c1f51":"markdown","ee634201":"markdown","2f50aa2a":"markdown","0f2cc851":"markdown","3d6dd492":"markdown","842b5f76":"markdown","5cb1bfa9":"markdown","ef12ea15":"markdown","0002c46e":"markdown","fb9b6654":"markdown","f68c34a2":"markdown","24788ef6":"markdown","18df8c14":"markdown","de481d90":"markdown","4ad5ab48":"markdown","9517fa0d":"markdown","8dd7a63a":"markdown","6006f9cb":"markdown","d3f5a1e6":"markdown"},"source":{"b48facb3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","33e6469e":"import pandas as pd  #i\/o operations and data analysis\nimport numpy as np   # linear algebra\nimport matplotlib.pyplot as plt  # viz\nimport seaborn as sns  #viz\n#Machine Learning\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom xgboost import XGBClassifier\n\nplt.style.use('ggplot') #set style for charts\nimport warnings #filter warnings\nwarnings.filterwarnings('ignore')","e5c4bf99":"df=pd.read_csv('..\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')\ndf.head()","68d6822f":"#check for null values\ndf.isna().sum()","2da9189d":"sns.countplot('Sex',data=df)\nplt.show()\ndf.Sex.value_counts()","4f6ab13b":"print('Mean age : {}'.format(round(df.Age.mean(),2)))\nplt.figure(figsize=(9,4))\nplt.subplot(1,2,1)\nsns.boxplot(df.Age)\nplt.subplot(1,2,2)\nsns.kdeplot(df.Age)\nplt.tight_layout()\nplt.show()","72aa847d":"print(\"No: Passengers : {}\".format(df.Category.value_counts()['P']))\nprint(\"No: Crew Members : {}\".format(df.Category.value_counts()['C']))\nsns.countplot(df.Category)\nplt.show()","0c30803b":"n=df.PassengerId.count()\nprint('Total Passengers : {}'.format(n))\nprint('Total Survivors : {}'.format(df.Survived.sum()))\nprint(f\"Survival Percentage : {round(df.Survived.mean()*100,2)}%\")","50751d9f":"plt.title(\"Survived Vs Succumbed\")\nx=[df.Survived.value_counts()[1],df.Survived.value_counts()[0]]\nlabels= ['Survived', 'Dead']\nexplode=[0.05,0.05]\nplt.pie(x=x,labels=labels, autopct='%1.2f%%', explode=explode)\nplt.show()","40bbf037":"c=df.Country.value_counts().sort_values(ascending=False)\nplt.figure(figsize=(8,4))\nsns.barplot(y=c.index,x=c.values*100\/n, orient='h')\nplt.show()","cb167e20":"df['Ctry']=df.Country.apply(lambda x: 'Estonia' if x=='Estonia' \n                            else ('Sweden' if x=='Sweden' else 'Others'))\ndf.head(5)","9fb1607e":"# Delete PassengerId, Country, Firstname and Lastname as they are not required for further analysis\ndf=df[['Sex', 'Age','Category', 'Survived', 'Ctry']]\ndf.head()","d2a5c893":"print(f'Mean age of Survivors : {round(df[(df.Survived==1)].Age.mean(),2)}')\nprint(f'Mean age of Death : {round(df[(df.Survived==0)].Age.mean(),2)}')\nplt.title(\"Age distribution Survived\/Died\")\nsns.kdeplot(data=df[(df.Survived==1)].Age, label='Survived')\nsns.kdeplot(data=df[ (df.Survived==0)].Age, label='Not Survived')\nplt.show()","cf2b26e2":"sns.countplot('Survived', hue='Sex', data=df)\nplt.show()\nprint(\"Survival Rate (Male) : {}%\".format(round(df.Survived[df.Sex=='M'].mean()*100,2)))\nprint(\"Survival Rate (Female) : {}%\".format(round(df.Survived[df.Sex=='F'].mean()*100,2)))","5ffdcc0b":"sns.countplot('Survived', hue='Category', data=df)\nplt.show()\nprint(\"Survival Rate for C : {}%\".format(round(df.Survived[df.Category=='C'].mean()*100,2)))\nprint(\"Survival Rate for P  : {}%\".format(round(df.Survived[df.Category=='P'].mean()*100,2)))","ca72f6c2":"plt.figure(figsize=(8,4))\nplt.title('Male')\nsns.kdeplot(data=df[df.Sex=='F'].Age, label='Female')\nsns.kdeplot(data=df[df.Sex=='M'].Age, label='Male')\nplt.show()\nprint(\"Average age of Male Passenger : {}\".format(round(df[df.Sex=='M'].Age.mean(),2)))\nprint(\"Average age of Female Passenger : {}\".format(round(df[df.Sex=='F'].Age.mean(),2)))","5f38d4fa":"plt.figure(figsize=(8,4))\nplt.title('Category Vs Age')\nsns.boxplot(data=df, x='Age', y='Category')\n#sns.kdeplot(data=df[df.Sex=='M'].Age, label='Male')\nplt.show()\nprint(\"Average age of MS Estonia Crew : {}\"\n      .format(round(df[df.Category=='C'].Age.mean(),2)))\nprint(\"Average age of Passengers : {}\"\n      .format(round(df[df.Category=='P'].Age.mean(),2)))","41675f86":"plt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title('P Category')\nx=[df[df.Category=='P'].Sex.value_counts()['M'],\n   df[df.Category=='P'].Sex.value_counts()['F']]\nlabels= ['Male', 'Female']\nexplode=[0.05,0.05]\nplt.pie(x=x,labels=labels, autopct='%1.2f%%', explode=explode)\n\nplt.subplot(1,2,2)\nplt.title(\"C Category\")\nx=[df[df.Category=='C'].Sex.value_counts()['M'],\n   df[df.Category=='C'].Sex.value_counts()['F']]\nplt.pie(x=x,labels=labels, autopct='%1.2f%%', explode=explode)\n\nplt.tight_layout()\nplt.show()","82f8b4a9":"sns.barplot(x='Ctry', y='Survived', data=df)\nplt.show()\nprint(\"Survival Rate :\")\nprint(\"Sweden : {}\".format(round(df.Survived[df.Ctry=='Sweden'].mean()*100,2)))\nprint(\"Estonia : {}\".format(round(df.Survived[df.Ctry=='Estonia'].mean()*100,2)))\nprint(\"Others : {}\".format(round(df.Survived[df.Ctry=='Others'].mean()*100,2)))","773b0daf":"plt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title('Passengers')\nlabels=df.Ctry.unique()\nx=[]\nfor i in labels:\n    x.append(df[df.Category=='P'].Ctry.value_counts()[i])\nplt.pie(x=x,labels=labels, autopct='%1.2f%%')\n\nplt.subplot(1,2,2)\nplt.title(\"Crew\")\nx=[]\nfor i in labels:\n    x.append(df[df.Category=='C'].Ctry.value_counts()[i])\nplt.pie(x=x,labels=labels, autopct='%1.2f%%')\n\nplt.tight_layout()\nplt.show()","06da4e53":"plt.title(\"Age Vs Nationality\")\nsns.kdeplot(data=df.Age[df.Ctry=='Sweden'], label='Sweden')\nsns.kdeplot(data=df.Age[df.Ctry=='Estonia'], label='Estonia')\nsns.kdeplot(data=df.Age[df.Ctry=='Others'], label='Others')\nplt.show()\n\nprint(\"Mean Age\")\nprint(\"Sweden : {}\".format(round(df.Age[df.Ctry=='Sweden'].mean(),2)))\nprint(\"Estonia : {}\".format(round(df.Age[df.Ctry=='Estonia'].mean(),2)))\nprint(\"Others : {}\".format(round(df.Age[df.Ctry=='Others'].mean(),2)))","45df7b8d":"plt.figure(figsize=(8,4))\nlabels=['Male', 'Female']\nexplode=[0.05,0.05]\nplt.suptitle(\"GENDER VS NATIONALITY\")\n\nplt.subplot(1,3,1)\nplt.title('Sweden')\nx=[df[df.Ctry=='Sweden'].Sex.value_counts()['M'],\n  df[df.Ctry=='Sweden'].Sex.value_counts()['F']]\nplt.pie(x=x,labels=labels, explode=explode,autopct='%1.2f%%')\n\nplt.subplot(1,3,2)\nplt.title('Estonia')\nx=[df[df.Ctry=='Estonia'].Sex.value_counts()['M'],\n  df[df.Ctry=='Estonia'].Sex.value_counts()['F']]\nplt.pie(x=x,labels=labels, explode=explode,autopct='%1.2f%%')\n\nplt.subplot(1,3,3)\nplt.title('Others')\nx=[df[df.Ctry=='Others'].Sex.value_counts()['M'],\n  df[df.Ctry=='Others'].Sex.value_counts()['F']]\nplt.pie(x=x,labels=labels, explode=explode,autopct='%1.2f%%')\n\nplt.tight_layout()\nplt.show()","016fd969":"sns.boxplot(data=df, x='Age', y='Sex', hue='Survived')\nplt.show()","64f6b079":"plt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title('P Category')\nsns.kdeplot(data=df[(df.Category=='P') & (df.Survived==1)].Age, label='Survived')\nsns.kdeplot(data=df[(df.Category=='P') & (df.Survived==0)].Age, label='Not Survived')\nplt.subplot(1,2,2)\nplt.title(\"C Category\")\nsns.kdeplot(data=df[(df.Category=='C') & (df.Survived==1)].Age,label='Survived')\nsns.kdeplot(data=df[(df.Category=='C') & (df.Survived==0)].Age,label='Not Survived')\nplt.tight_layout()\nplt.show()","6aa3385f":"sns.boxplot(data=df, x='Age', y='Ctry', hue='Survived')","acb23722":"sns.boxplot(data=df, x='Age', y='Sex', hue='Category')","94e06252":"sns.boxplot(data=df, x='Age', y='Ctry', hue='Category')","04dca062":"df.corr()","5b877545":"X=df.drop('Survived', axis=1)\ny=df.Survived","c8419023":"#Scaling Age which is the only numeric feature\nscalar=MinMaxScaler()\nX.Age=scalar.fit_transform(np.array(X.Age).reshape(-1,1))\nX.head()","1ec067ca":"X=pd.get_dummies(X, drop_first=True)\nX.head()","b24e2621":"X_train_a, X_test, y_train_a, y_test=train_test_split(X,y,test_size=0.2, random_state=42)\nX_train,X_val,y_train,y_val=train_test_split(X_train_a,y_train_a, test_size=0.2,\n                                             random_state=42)\nprint('Train Shape :', X_train.shape)\nprint('Val Shape :', X_val.shape)\nprint('Test Shape :', X_test.shape)","260b9603":"model_lr=LogisticRegression()\nmodel_lr.fit(X_train,y_train)\nprint('Score in Train : {}'.format(round(model_lr.score(X_train,y_train)*100,4)))\nprint('Score in Validation : {}'.format(round(model_lr.score(X_val,y_val)*100,4)))\nprint('Score in Test : {}'.format(round(model_lr.score(X_test,y_test)*100,4)))\nyval_lr=model_lr.predict(X_val)\nytest_lr=model_lr.predict(X_test)","d6b0e929":"sns.barplot(X_train.columns,model_lr.coef_[0])\nplt.xticks(rotation=60)\nplt.show()","fc118726":"model_svc=SVC(random_state=42)\nmodel_svc.fit(X_train,y_train)\nprint('Score in Train : {}'.format(round(model_svc.score(X_train,y_train)*100,4)))\nprint('Score in Validation : {}'.format(round(model_svc.score(X_val,y_val)*100,4)))\nprint('Score in Test : {}'.format(round(model_svc.score(X_test,y_test)*100,4)))\nyval_svc=model_svc.predict(X_val)\nytest_svc=model_svc.predict(X_test)","8ab94033":"model_dt=DecisionTreeClassifier(criterion='entropy')\nmodel_dt.fit(X_train,y_train)\nprint('Score in Train : {}'.format(round(model_dt.score(X_train,y_train)*100,4)))\nprint('Score in Validation : {}'.format(round(model_dt.score(X_val,y_val)*100,4)))\nprint('Score in Test : {}'.format(round(model_dt.score(X_test,y_test)*100,4)))\nyval_dt=model_dt.predict(X_val)\nytest_dt=model_dt.predict(X_test)","a9e641fd":"sns.barplot(X_train.columns,model_dt.feature_importances_)\nplt.xticks(rotation=60)\nplt.show()","805ce7aa":"model_rf=RandomForestClassifier(n_estimators=100)\nmodel_rf.fit(X_train,y_train)\nprint('Score in Train : {}'.format(round(model_rf.score(X_train,y_train)*100,4)))\nprint('Score in Validation : {}'.format(round(model_rf.score(X_val,y_val)*100,4)))\nprint('Score in Test : {}'.format(round(model_rf.score(X_test,y_test)*100,4)))\nyval_rf=model_rf.predict(X_val)\nytest_rf=model_rf.predict(X_test)","52aae2a9":"sns.barplot(X_train.columns,model_rf.feature_importances_)\nplt.xticks(rotation=60)\nplt.show()","fb3897e9":"model_nb=GaussianNB()\nmodel_nb.fit(X_train,y_train)\nprint('Score in Train : {}'.format(round(model_nb.score(X_train,y_train)*100,4)))\nprint('Score in Validation : {}'.format(round(model_nb.score(X_val,y_val)*100,4)))\nprint('Score in Test : {}'.format(round(model_nb.score(X_test,y_test)*100,4)))\nyval_nb=model_nb.predict(X_val)\nytest_nb=model_nb.predict(X_test)","c881abb9":"model_xgb=XGBClassifier(learning_rate=0.00005, n_estimators=600,n_jobs=100, max_depth=2)\nmodel_xgb.fit(X_train,y_train)\nprint('Score in Train : {}'.format(round(model_xgb.score(X_train,y_train)*100,4)))\nprint('Score in Validation : {}'.format(round(model_xgb.score(X_val,y_val)*100,4)))\nprint('Score in Test : {}'.format(round(model_xgb.score(X_test,y_test)*100,4)))\nyval_xgb=model_xgb.predict(X_val)\nytest_xgb=model_xgb.predict(X_test)","e86a742d":"sns.barplot(X_train.columns,model_xgb.feature_importances_)\nplt.xticks(rotation=60)\nplt.show()","fc7d3479":"models =[\"LR\",\"SVM\",\"DTC\",\"RFC\",\"NB\", \"XGB\"]\nscores_val =[round(model_lr.score(X_val,y_val)*100,4),\n         round(model_svc.score(X_val,y_val)*100,4),\n         round(model_dt.score(X_val,y_val)*100,4),\n         round(model_rf.score(X_val,y_val)*100,4),\n         round(model_nb.score(X_val,y_val)*100,4),\n         round(model_xgb.score(X_val,y_val)*100,4)]\nscores_test=[round(model_lr.score(X_test,y_test)*100,4),\n         round(model_svc.score(X_test,y_test)*100,4),\n         round(model_dt.score(X_test,y_test)*100,4),\n         round(model_rf.score(X_test,y_test)*100,4),\n         round(model_nb.score(X_test,y_test)*100,4),\n         round(model_xgb.score(X_test,y_test)*100,4)]\n\ndf_scores=pd.DataFrame({'Model':models,'Score_val':scores_val, 'Score_test':scores_test})\ndf_scores=df_scores.sort_values(by=['Score_val','Score_test'], ascending=False)\n\nplt.title('Model Score Comparison')\nsns.barplot(data=df_scores, x='Model', y='Score_val', color='blue', \n            label='Validation', alpha=0.8)\nsns.barplot(data=df_scores, x='Model', y='Score_test', color='red', \n            label='Test', alpha=0.5)\nplt.legend()\nplt.ylim(70,90)\nplt.show()","e4c35c4d":"yval_stacked=np.column_stack((yval_lr,yval_svc,yval_xgb))\nytest_stacked=np.column_stack((ytest_lr,ytest_svc,ytest_xgb))\n\nmeta_model=LogisticRegression()\nmeta_model.fit(yval_stacked,y_val)\nprint('Score in Validation : ',round(meta_model.score(yval_stacked,y_val)*100,4))\nprint('Score in Test : ',round(meta_model.score(ytest_stacked,y_test)*100,4))","bed3fbb0":"models.append('Meta Model')\nscores_test.append(round(meta_model.score(ytest_stacked,y_test)*100,4))\ndf_scores=pd.DataFrame({'Model':models,'Score_test':scores_test})","44391431":"df_scores.sort_values(by='Score_test', ascending=False, inplace=True)\nplt.title(\"Model Performance\")\nsns.barplot(x='Model',y='Score_test', data=df_scores)\nplt.ylabel(\"Accuracy Score\")\nplt.xlabel(\"Model\")\nplt.ylim(70,90)\nplt.show()","b072c9eb":"### 6.1 Split Features and Target","381fadad":"### 6.2. Scaling Numeric Features","f4ec570b":"### 7.7. Model Comparison","bc71aa67":"### 7.3.a. Feature importance","58961b59":"### 6.3. Encoding Categorical Features","966ab0da":"Observation:\n* Proportion of female passengers is more for Sweden.\n* <b>From 4.2.g it seems that Swedish nationaly is lowers the survivial rate. However from 4.2.h, 4.2.i and 4.2.j it is clear that Swedes were more older, had higer proportion of females and were majority in passenger category which are risk factors.<\/b>","e049d904":"### 4.2.j. Sex Vs Country","67a3b8df":"Observation: \n* Around 90% of the crew members are Estonians whereas Swedes consitute only 7.7%\n* Swedes constitute two-thirds in Passenger category. ","f892980b":"Observation:\n* Swedish passengers were considerably older than others on an average.","0588f0b6":"### 5.1. Chi Square Test","c0968294":"Observation:\n* Male Passenger is 4 times more likely to survive than female passenger","a5f1c420":"OBSERVATION:\n* The stacked meta model is as good as Logistic Regression, SVC and XGB model.","2c63ae0c":"### 4.1.e. Country","e23d786f":"### 4.2.i. Age Vs Country","dd5f0680":"### 7.6. XG Boost","04ebf7a4":"### 4.2.h. Category Vs Country","75508be1":"### 4.2.a. Age Vs Survival","a0422aed":"### 4.1.a Sex","e0b8ce66":"### 7.4.a. Feature Importance","a42b75a5":"Observation : \n* More than 90% of the passengers on board were from Sweeden or Estonia\n* Since passengers from other countries constitute less than 10%, we will make a new feature 'Ctry' with values Sweden, Estonia and Others.","9b1bea98":"### 4.2.e. Age Vs Category","adb5c94d":"### 4.3.b. Age Vs Category Vs Survival","d1379c24":"### 4.2.f. Sex Vs Category","5d3cd35e":"### 3. Data Wrangling","be008232":"Observation:\n* Younger passengers are more likely to survive","4fd14a68":"Observation: \n* Survival rate is more for crew compared to that for passengers.","e6c625d5":"### 7.3. Decision Tree","9a81b5d2":"Observation:\n* Most of the passengers are young in the age group 30-60","a350a0c6":"Observation:\n* Around 20% of passengers are in Crew members and the rest are passengers.","dcb078f3":"TO BE DONE","15ca5cdd":"Observation:\n* SURVIVAL OF THE ESTONIEST!\n* Estonians are twice as likely to survive than Swedes.\n* It prima facie seems that odds of survival is stacked against Swedish Nationals, However further investigation is required to establish the relationship.","469c2ccc":"OBSERVATION:\n* SVM, XGB and Logistic Regression have the highest accuracy in validation dataset.\n* SVM and XGB have the highest accuracy in test data.\n* Most important feature for survival is 'Sex' followed by 'Age' in XGB Classifier.\n* Random Forest and Decision Tree models give more importance to 'Age' and 'Sex' followed by 'Category' and 'Country'.\n* Logistic regression also provides more weightage to 'Age' followed by 'Sex'\n* From all the models, it is clear that Nationality is not a determining factor in survival prediction.","869ef940":"### 4. Exploratory Data Analysis","9fd3c80d":"Observation:\n* There is no drastic variation in age profile of male and female passengers","8ae7fad2":"# Please Upvote the Notebook if you find it useful","8a153fcd":"### 8.1 Meta Model vs Individual Models","440e64a2":"### 4.1. Univariate Analysis","a571630c":"### 7.2. Support Vector Machine","0d33cbdc":"### 4.2. Bivariate Analysis","1fa62c62":"### 4.3.e. Age Vs Country Vs Category","d542a07c":"### 4.3.c. Age Vs Country Vs Survival","802a92f9":"### 4.3 Relation Between 3 Variable","cc48b885":"### 4.2.c. Category Vs Survival","52f7c86b":"### 4.1.b Age","0f14473d":"### 7.6.a. Feature Importance","27b80fd1":"Observation:\n* Around 1 out of 7 on board aboard MS Estonia Survived","2e392f6a":"### 4.2.b Sex Vs Survival","792433e3":"### 4.3.d. Age Vs Sex Vs Category","7d2c1f51":"### 7.4. Random Forest ","ee634201":"Observation:\n* MS Estonia had more female crew members than males.\n* However in passenger category, males were more. ","2f50aa2a":"### 7 Fitting Model and Evaluation","0f2cc851":"Observation:\n* Average age of crew is much lower than the average age of Passengers.\n* Distribution of crew age is very narrow, most of the crew members are 20-40 years old.","3d6dd492":"### 2. Read Data","842b5f76":"### 7.1.a. Coefficients for each feature","5cb1bfa9":"### 6.4. Dive the dataset into train, test and validation sets","ef12ea15":"### 7.1. Logistic Regression","0002c46e":"### 5. Correlation","fb9b6654":"### 7.5. Naive Bayes","f68c34a2":"### 4.2.d. Age Vs Sex","24788ef6":"### 4.3.a. Age Vs Sex Vs Survived","18df8c14":"### 6. Preprocessing for ML","de481d90":"### 4.1.d. Survived","4ad5ab48":"Observation:\n* Number of Male and Female passengers are almost equal","9517fa0d":"### 4.2.g. Survival Vs Country","8dd7a63a":"### 8. Stacking Models","6006f9cb":"### 4.1.c Category","d3f5a1e6":"### 1. Import Libraries"}}