{"cell_type":{"22d3c706":"code","9a466fd2":"code","1b20a34e":"code","ac0d0596":"code","cae3fcc7":"code","94d8d64c":"code","9848464e":"code","89614add":"code","682e7bd8":"code","2f0ab839":"code","e2fd5c10":"code","ad4d8fa4":"code","a24afdd2":"code","bfb0e70e":"code","efbc562e":"code","314aa349":"code","f09e220c":"code","5f33a4fb":"markdown","45654cc1":"markdown","5cc61235":"markdown"},"source":{"22d3c706":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a466fd2":"from scipy.sparse import csr_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\nimport sys","1b20a34e":"#Pulling data, and clean data and transform it.  We only needed villagers table and housewares table.\n#villagers = pd.read_sql('select * from villagers', conn)\n#housewares = pd.read_sql('select * from housewares', conn)\n\nvillagers = pd.read_csv('\/kaggle\/input\/animal-crossing-new-horizons-nookplaza-dataset\/villagers.csv')\nhousewares = pd.read_csv('\/kaggle\/input\/animal-crossing-new-horizons-nookplaza-dataset\/housewares.csv')\n#since the Furniture_list column were just delimited with a list between a semicolon, I'd just exploded down to its own rows than \n#having it concatenated to a single cell.\nvillagers = villagers.assign(Furniture_List=villagers['Furniture List'].str.split(';')).explode('Furniture_List')\nhousewareslist = housewares[['Internal ID','Name']].drop_duplicates()\nvillagers['Furniture_List'] = villagers['Furniture_List'].astype('int')\nvillagersnew = villagers.merge(housewareslist, left_on = 'Furniture_List', right_on = 'Internal ID' )\nitemlist = villagersnew[['Name_x','Furniture_List','Name_y']].copy()\nitemlist.columns = ['Customer','SalesItem','PurchasedYes']\nitemlist['PurchasedYes'] = 1\npurchaseorder = itemlist.groupby(['Customer','SalesItem','PurchasedYes']).sum().reset_index()\n\n#we needed to have the data set up like this so that it can be pre-processed using labelencoder to create a sparse matrix for each villager.\npurchaseorder","ac0d0596":"#instantiate labelencoder, you could use one-hot like we studied at school for customer list\nuser_label_encoder = LabelEncoder()","cae3fcc7":"#fit transform customer column.  This transforms the Customer as a numerical label from 0-390 (since there are 391 villagers)\nuser_ids = user_label_encoder.fit_transform(purchaseorder.Customer)","94d8d64c":"#instantiate labelencoder, you could use one-hot encoding like we studied at school for customer list. for product list\nproduct_label_encoder = LabelEncoder()","9848464e":"#fit transform the label encoder on product id.  Label all the Item_id's to numeric labels. There are 433 items.\n#Honestly, unsure why we need to numeric categorize an already numerical category of item id.\nproduct_ids = product_label_encoder.fit_transform(purchaseorder.SalesItem)","89614add":"#instantiate CSR matrix, you do not have to call this if we did one-hot encoding in the first place.\nSalesItemCustomerMatrix = csr_matrix(([1]*len(user_ids), (product_ids, user_ids)))\n#SalesItemCustomerMatrix = csr_matrix(([1]*len(user_ids), (product_ids, user_ids)),shape = (433,391)).toarray()","682e7bd8":"#look at salesitemcustomermatrix in pandas dataset form\ndoc_term_matrix = SalesItemCustomerMatrix.todense()\ndf = pd.DataFrame(doc_term_matrix)\ndf","2f0ab839":"#create cosine similiarity using Sales Item customer Matrix.\n#Cosine similiarity compares the item with the list of villagers who bought that same item, then comparies it with another\n#item with a list of villagers who purchased that item, and calculates the cosine of an angle for each list.\n#the output should be a list of 433 items cosine of an angle compared to each other.\nsimilarity = cosine_similarity(SalesItemCustomerMatrix)","e2fd5c10":"#transpose customersalesitemmatrix and use sparse matrix again\nCustomerSalesItemMatrix = csr_matrix(SalesItemCustomerMatrix.T)","ad4d8fa4":"#Call dot function to multiply CustomerSalesItemMatrix with Similiarity_matrix\nCustomerSalesItemScores = CustomerSalesItemMatrix.dot(similarity)","a24afdd2":"#Create list of Recommendation for Customer\nRecForCust = []\n\n#iterate using CustomerSalesItemScores range\nfor user_id in range(CustomerSalesItemScores.shape[0]):\n    #CustomerSalesItemScores, grabbing User_id and somethign else.\n    scores = CustomerSalesItemScores[user_id, :]\n    \n    #call indeces and\n    purchased_items = CustomerSalesItemMatrix.indices[CustomerSalesItemMatrix.indptr[user_id]:CustomerSalesItemMatrix.indptr[user_id+1]]\n    \n    # do not recommend already purchased SalesItems\n    scores[purchased_items] = -1 \n    \n    #argsort from top 10 scores\n    top_products_ids = np.argsort(scores)[-10:][::-1]\n    \n    #create recommendations pandas dataframe top 10\n    recommendations = pd.DataFrame(top_products_ids.reshape(1, -1),index=[user_id],columns=['Top%s' % (i+1) for i in range(10)])\n    \n    #append recommendations\n    RecForCust.append(recommendations)\n    \nrecommendforcustomer = pd.concat(RecForCust)","bfb0e70e":"#is the final product\nrecommendforcustomer","efbc562e":"#inversing so that it pivots by top 10 items pivot table  what is user_label_encoder.inverse_transform?\nrecommendforcustomer.index = user_label_encoder.inverse_transform(recommendforcustomer.index)\n#iterate through recommendations and label encoder\nfor i in range(recommendforcustomer.shape[1]):\n    \n        #product_label_encoder inverse_transform recommendations\n        recommendforcustomer.iloc[:, i] = product_label_encoder.inverse_transform(recommendforcustomer.iloc[:, i])\nrecommendforcustomer = recommendforcustomer.reset_index()\nrecommendforcustomer.head()","314aa349":"recommendforcustomer = pd.melt(recommendforcustomer, id_vars = ['index'], value_vars=['Top1','Top2','Top3','Top4','Top5','Top6','Top7','Top8','Top9','Top10'])\nrecommendforcustomer = recommendforcustomer.merge(housewareslist, left_on = 'value', right_on = 'Internal ID').drop(columns = ['Internal ID']).sort_values(['index','variable'])\nrecommendforcustomer.head()","f09e220c":"recommendforcustomer.head(20)","5f33a4fb":"###  Preprocess data and apply recommender using Collaborative Filtering","45654cc1":"# Created a Powerbi Report on this\n\nhttps:\/\/app.powerbi.com\/view?r=eyJrIjoiMWJjYzQxOTUtYjQzZC00YThhLTg4MmUtZGUxYWVkZTgxYjgyIiwidCI6ImY2YjZkZDViLWYwMmYtNDQxYS05OWEwLTE2MmFjNTA2MGJkMiIsImMiOjZ9&pageName=ReportSection","5cc61235":"Inspired by [MIKHAILSHCH's code](https:\/\/www.kaggle.com\/mikhailshch\/animal-crossing-simple-implicit-recommendations) as well as learning some techniques from this website here:\n\nhttps:\/\/towardsdatascience.com\/recommend-using-scikit-learn-and-tensorflow-recommender-bc659d91301a\n\nI too wanted to build a recommender system.  It's the same concept using Cosine Similiarity as a method of collaborative filtering.  This was to me just a learning experience, and I'm not really adding anything unique to my data analysis.  It's just for me to understand how cosine similiarity works and using .dot funciton on sparse matrix in order to apply the cosine similiarity function was unique to me.\n\nThe objective is exactly the same as Mikhailshch.  Based on the ownership of the villager's items, we assume that they \"purchased\" those items in the past, and within the past, what other items are more likely that they would want for their future purchases.  \n\nThis would be useful if you're playing the game and which items theyd like, in order to improve their friendship levels.  (eventhough there's probably already a strategy guide on that...which makes this analysis not really as useful pragmatically speaking).\n"}}