{"cell_type":{"f2497171":"code","8b600d1b":"code","a94975e5":"code","85655683":"code","53fd9eb8":"code","4f87eca6":"code","be495c09":"code","bdf3cd83":"code","688e193f":"code","a2f358c3":"code","4af54666":"code","a7443d97":"code","009cbddd":"code","a4f3eb4b":"code","c6eeb9ac":"code","c2a13bcb":"code","2946cb6d":"code","37194102":"code","1035a171":"code","9ef8d6bd":"code","0b334921":"code","3837cf06":"code","104b24ec":"code","22543069":"code","a7a627a4":"code","a012e3a4":"code","5ad31c37":"code","c0704953":"code","3b5c6c77":"code","e1d5cc2e":"code","7ec0ecc5":"code","be063f29":"code","0f3f1477":"code","fbac7eb6":"code","c9cc27ba":"code","e548195f":"code","f11e5955":"code","09eee844":"code","b7bfd2ca":"code","deec3240":"code","1995c972":"code","3d9cfba2":"code","e4fc8cdf":"code","2e8ee57a":"code","39e6a8f6":"code","85a5af2d":"code","3b8ea328":"code","3198e9e4":"code","cc4cfd3c":"code","6a5e4d84":"code","8c2387df":"code","900410e0":"code","8d2a2806":"code","1583b409":"code","d5a3c4dd":"code","1a5d86d2":"code","3d0db869":"code","e199f409":"code","40ea60cf":"code","ecd1399f":"code","d598dbfd":"code","7148eecd":"code","e8d0c77c":"code","f090d815":"code","9780fd49":"code","729e80b8":"code","fc2c019a":"code","91dbb1ee":"code","6e160ff4":"code","8cbb3ff0":"code","0e2dcb0e":"code","217ab52b":"code","db7d83c8":"code","4c24b23a":"code","29f495af":"code","161aa18c":"code","0186a70f":"code","726af05c":"code","b19ec25f":"code","ea580e09":"code","3073a4f7":"code","2ce789b6":"code","fbb9b98d":"code","db35c2b8":"code","364ddd7e":"code","5f5944d2":"code","20870d11":"code","2ad6d66e":"code","7a750886":"code","4bf1199a":"code","fa4c6cc2":"code","cecee116":"code","a7d443e5":"code","9015240c":"code","87b7fdf1":"code","e55988b5":"code","0bf4c06c":"code","a7574ace":"code","e345cc56":"code","49651a7f":"code","16571539":"code","465ed7ed":"code","99b96ae1":"code","e9917048":"code","9a1ddff6":"code","364d1a84":"code","d0287ad6":"code","b6ab9c4f":"code","1d0de28c":"code","cf55b63a":"code","ab1ef1bf":"code","3c791a61":"code","eb1edc9e":"code","5ce396a3":"code","eb5bdba4":"code","01ed9770":"code","c675481e":"code","44e0dcae":"code","95b21aa2":"code","b52da93d":"code","b18c9c3c":"code","3ce9ebe7":"code","af788327":"markdown","c0c7f8de":"markdown","c3c8c531":"markdown","85e1ec19":"markdown","65edeb13":"markdown","83653b3e":"markdown","3ea8afa4":"markdown","842cdb24":"markdown","21070385":"markdown","77f30464":"markdown","a639729b":"markdown","b19bb83a":"markdown","b5d6bee1":"markdown","d0c655f3":"markdown","65b247c2":"markdown","a676f0ed":"markdown","d2b60c3d":"markdown","97319a04":"markdown","4ab94e7a":"markdown","de28297a":"markdown","3200a806":"markdown","5de719ca":"markdown"},"source":{"f2497171":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b600d1b":"data = pd.read_csv('\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')","a94975e5":"data.head()","85655683":"len(data)","53fd9eb8":"data['blueWins'].value_counts()","4f87eca6":"# Wins are almost he same number, so we have an equal number of both wins","be495c09":"print('Mean of blue wards places when blue team wins : %.5f' %data[data.blueWins == 1]['blueWardsPlaced'].mean())","bdf3cd83":"print('Mean of blue wards places when blue team wins : %.5f' %data[data.blueWins == 0]['blueWardsPlaced'].mean())","688e193f":"# Victory doesn't depend on the wards placed but on the difference between the two teams","a2f358c3":"data['blueWardsPlacedDiff'] = data['blueWardsPlaced'] - data['redWardsPlaced']","4af54666":"print('Mean difference between wards places when blue team wins : %.5f' %data[data.blueWins == 1]['blueWardsPlacedDiff'].mean())","a7443d97":"print('Mean difference between wards places when blue team loses : %.5f' %data[data.blueWins == 0]['blueWardsPlacedDiff'].mean())","009cbddd":"# More chance to win when you placed more wards but not a great difference","a4f3eb4b":"# Chance to win on wards placed difference\ndata['blueWardsPlacedDiffBins'] = pd.qcut(data['blueWardsPlacedDiff'], q=10)","c6eeb9ac":"prob_wins = data.groupby('blueWardsPlacedDiffBins')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueWardsPlacedDiffBins', 'win_probability']","c2a13bcb":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueWardsPlacedDiffBins\", y=\"win_probability\", data=prob_wins)\nl = ax.set(ylim=(0.4,0.55))","2946cb6d":"# Not a big difference\n# More probability to win with a positive difference but difference in [23, 234] has more probability for a lose","37194102":"print('Mean of blue wards destroyed when blue team wins : %.5f' %data[data.blueWins == 1]['blueWardsDestroyed'].mean())","1035a171":"print('Mean of blue wards destroyed  when blue team loses : %.5f' %data[data.blueWins == 0]['blueWardsDestroyed'].mean())","9ef8d6bd":"# A little more wards destroyed by the winning team but let's see the difference to understand more the win probability","0b334921":"data['blueWardsDestroyedDiff'] = data['blueWardsDestroyed'] - data['redWardsDestroyed']","3837cf06":"print('Mean difference between wards destroyed when blue team wins : %.5f' %data[data.blueWins == 1]['blueWardsDestroyedDiff'].mean())","104b24ec":"print('Mean difference between wards destroyed when blue team loses : %.5f' %data[data.blueWins == 0]['blueWardsDestroyedDiff'].mean())","22543069":"# As for the woards place, more chance to win when you destroyed more wards but not a great difference","a7a627a4":"# Chance to win on wards destroyed difference\nprob_wins = data.groupby('blueWardsDestroyedDiff')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueWardsDestroyedDiff', 'win_probability']","a012e3a4":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueWardsDestroyedDiff\", y=\"win_probability\", data=prob_wins)","5ad31c37":"# There don't seem to be a lot of correlation","c0704953":"prob_wins = data.groupby('blueFirstBlood')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueFirstBlood', 'win_probability']","3b5c6c77":"plt.figure(figsize=(8,5))\nax = sns.barplot(x=\"blueFirstBlood\", y=\"win_probability\", data=prob_wins)","e1d5cc2e":"# Having the first blood seems to be a good advantage","7ec0ecc5":"print('Mean of blue kills when blue team wins : %.5f' %data[data.blueWins == 1]['blueKills'].mean())","be063f29":"print('Mean of blue kills when blue team loses : %.5f' %data[data.blueWins == 0]['blueKills'].mean())","0f3f1477":"# More kills for the winning teams","fbac7eb6":"data['blueKillsDiff'] = data['blueKills'] - data['redKills']","c9cc27ba":"print('Mean difference between kills when blue team wins : %.5f' %data[data.blueWins == 1]['blueKillsDiff'].mean())","e548195f":"print('Mean difference between kills when blue team loses : %.5f' %data[data.blueWins == 0]['blueKillsDiff'].mean())","f11e5955":"# Chance to win on kills difference\nprob_wins = data.groupby('blueKillsDiff')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueKillsDiff', 'win_probability']","09eee844":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueKillsDiff\", y=\"win_probability\", data=prob_wins)","b7bfd2ca":"# Ok, now it's clear (80% to win with 5+ difference of kills)","deec3240":"# Deaths is the opposite as kills\n# It will not be useful when creating the model (death = - kills)","1995c972":"data['blueAssistsDiff'] = data['blueAssists'] - data['redAssists']","3d9cfba2":"# Chance to win on assists difference\nprob_wins = data.groupby('blueAssistsDiff')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueAssistsDiff', 'win_probability']","e4fc8cdf":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueAssistsDiff\", y=\"win_probability\", data=prob_wins)","2e8ee57a":"# Almost same results as kills","39e6a8f6":"print('Mean of elite monsters killed by blue team when blue team wins : %.5f' %data[data.blueWins == 1]['blueEliteMonsters'].mean())","85a5af2d":"print('Mean of elite monsters killed by blue team  when blue team wins: %.5f' %data[data.blueWins == 0]['blueEliteMonsters'].mean())","3b8ea328":"# More Elite Monsters killed for the winning team","3198e9e4":"data['blueEliteMonstersDiff'] = data['blueEliteMonsters'] - data['redEliteMonsters']","cc4cfd3c":"# Chance to win on elite monsters killed difference\nprob_wins = data.groupby('blueEliteMonstersDiff')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueEliteMonstersDiff', 'win_probability']","6a5e4d84":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueEliteMonstersDiff\", y=\"win_probability\", data=prob_wins)","8c2387df":"# Killing Elite Monsters seems to be an advantage","900410e0":"# Elite Monsters contains Dragons and Heralds so we will just create the dragons killed difference for later\ndata['blueDragonsDiff'] = data['blueDragons'] - data['redDragons']","8d2a2806":"# Elite Monsters contains Dragons and Heralds so we will just create the dragons killed difference for later\ndata['blueHeraldsDiff'] = data['blueHeralds'] - data['redHeralds']","1583b409":"print('Mean of towers destroyed by blue team when blue team wins : %.5f' %data[data.blueWins == 1]['blueTowersDestroyed'].mean())","d5a3c4dd":"print('Mean of towers destroyed by blue team  when blue team wins: %.5f' %data[data.blueWins == 0]['blueTowersDestroyed'].mean())","1a5d86d2":"# A little more tower destoyed for the winning team, the difference is explained by the few number of tower","3d0db869":"sns.countplot(data['blueTowersDestroyed'])","e199f409":"# A majority of no towers destroyed","40ea60cf":"data['blueTowersDestroyedDiff'] = data['blueTowersDestroyed'] - data['redTowersDestroyed']","ecd1399f":"# Chance to win on towers destroyed difference\nprob_wins = data.groupby('blueTowersDestroyedDiff')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueTowersDestroyedDiff', 'win_probability']","d598dbfd":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueTowersDestroyedDiff\", y=\"win_probability\", data=prob_wins)","7148eecd":"# Having more than 1 towers destroyed difference is a win","e8d0c77c":"# We will observe three columns as they are about the same aspect","f090d815":"print('Mean of blue total gold when blue team wins : %.5f' %data[data.blueWins == 1]['blueTotalGold'].mean())","9780fd49":"print('Mean of blue total gold when blue team loses : %.5f' %data[data.blueWins == 0]['blueTotalGold'].mean())","729e80b8":"# More gold for the winning team (because more kills ? We will see this later)","fc2c019a":"# Chance to win on gold difference\ndata['blueGoldDiffBins'] = pd.qcut(data['blueGoldDiff'], q=10, duplicates='drop')","91dbb1ee":"prob_wins = data.groupby('blueGoldDiffBins')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueGoldDiffBins', 'win_probability']","6e160ff4":"plt.figure(figsize=(20,8))\nax = sns.barplot(x=\"blueGoldDiffBins\", y=\"win_probability\", data=prob_wins)","8cbb3ff0":"# Difference in gold seems to be correlated to win","0e2dcb0e":"data['blueGoldPerMinDiff'] = data['blueGoldPerMin'] - data['redGoldPerMin']","217ab52b":"# Gold Per Min is equivalent to Total Gold","db7d83c8":"print('Mean of blue average level when blue team loses : %.5f' %data[data.blueWins == 1]['blueAvgLevel'].mean())","4c24b23a":"print('Mean of blue average level when blue team loses : %.5f' %data[data.blueWins == 0]['blueAvgLevel'].mean())","29f495af":"# Mean is quite the same","161aa18c":"data['blueAvgLevelDiff'] = data['blueAvgLevel'] - data['redAvgLevel']","0186a70f":"# Chance to win on average level difference\ndata['blueAvgLevelDiffBins'] = pd.qcut(data['blueAvgLevelDiff'], q=10, duplicates='drop')","726af05c":"prob_wins = data.groupby('blueAvgLevelDiffBins')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueAvgLevelDiffBins', 'win_probability']","b19ec25f":"plt.figure(figsize=(20,8))\nax = sns.barplot(x=\"blueAvgLevelDiffBins\", y=\"win_probability\", data=prob_wins)","ea580e09":"# Some correlation between level average difference and win","3073a4f7":"print('Mean of blue total experience when blue team loses : %.5f' %data[data.blueWins == 1]['blueTotalExperience'].mean())","2ce789b6":"print('Mean of blue total experience when blue team loses : %.5f' %data[data.blueWins == 0]['blueTotalExperience'].mean())","fbb9b98d":"# More Experience for winning team (because of more kills ?)","db35c2b8":"# Chance to win on experience difference\ndata['blueTotalExperienceDiffBins'] = pd.qcut(data['blueExperienceDiff'], q=10, duplicates='drop')","364ddd7e":"prob_wins = data.groupby('blueTotalExperienceDiffBins')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueTotalExperienceDiffBins', 'win_probability']","5f5944d2":"plt.figure(figsize=(20,8))\nax = sns.barplot(x=\"blueTotalExperienceDiffBins\", y=\"win_probability\", data=prob_wins)","20870d11":"# Good correlation between experience and win","2ad6d66e":"print('Mean of blue total minions killed when blue team loses : %.5f' %data[data.blueWins == 1]['blueTotalMinionsKilled'].mean())","7a750886":"print('Mean of blue total minions killed when blue team loses : %.5f' %data[data.blueWins == 0]['blueTotalMinionsKilled'].mean())","4bf1199a":"# More minions killed for winning teams","fa4c6cc2":"data['blueTotalMinionsKilledDiff'] = data['blueTotalMinionsKilled'] - data['redTotalMinionsKilled']","cecee116":"# Chance to win on wards placed difference\ndata['blueTotalMinionsKilledDiffBins'] = pd.qcut(data['blueTotalMinionsKilledDiff'], q=10, duplicates='drop')","a7d443e5":"prob_wins = data.groupby('blueTotalMinionsKilledDiffBins')['blueWins'].mean()\nprob_wins = prob_wins.reset_index()\nprob_wins.columns = ['blueTotalMinionsKilledDiffBins', 'win_probability']","9015240c":"plt.figure(figsize=(15,8))\nax = sns.barplot(x=\"blueTotalMinionsKilledDiffBins\", y=\"win_probability\", data=prob_wins)","87b7fdf1":"# Some correlation between total minions killed difference and win","e55988b5":"# Jungle Minions included in Minions\ndata['blueTotalJungleMinionsKilledDiff'] = data['blueTotalJungleMinionsKilled'] - data['redTotalJungleMinionsKilled']","0bf4c06c":"# CS is equivalent to Minions Killed\ndata['blueCSPerMinDiff'] = data['blueCSPerMin'] - data['redCSPerMin']","a7574ace":"# Removing columns with 'red' for the heatmap\ncols = [c for c in data.columns if c.lower()[:3] != 'red']\ndata_blue = data[cols]\n\n# calculate the correlation matrix\ndata_corr = data_blue.corr()['blueWins']","e345cc56":"# Removing columns with duplicate correlation\ndata_blue = data_blue.drop(['blueGoldPerMinDiff', 'blueGoldPerMin', 'blueCSPerMinDiff', 'blueTotalMinionsKilled'], 1)","49651a7f":"# Get columns with at least 0.2 correlation\ndata_corr = data_blue.corr()['blueWins']\ncols = data_corr[abs(data_corr) > 0.2].index.tolist()\ndata_blue = data_blue[cols]","16571539":"# plot the heatmap\ndata_corr = data_blue.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(data_corr, \n        xticklabels=data_corr.columns,\n        yticklabels=data_corr.columns, cmap=sns.diverging_palette(220, 20, n=200))","465ed7ed":"data_blue.corr()['blueWins'].sort_values(ascending=False)","99b96ae1":"# The biggest factor is the gold difference followed by the experience difference and kills difference","e9917048":"data_blue['blueDragons'].corr(data_blue['blueEliteMonsters'])","9a1ddff6":"data_blue['blueDragonsDiff'].corr(data_blue['blueEliteMonstersDiff'])","364d1a84":"data_blue['blueEliteMonsters'].corr(data_blue['blueEliteMonstersDiff'])","d0287ad6":"# Remove blueDragons & blueEliteMonsters (correlation 0.78), blueDragonsDiff (0.83 correlation with blueEliteMonstersDiff)\ndata_blue = data_blue.drop(['blueDragons', 'blueEliteMonsters', 'blueDragonsDiff'], 1)","b6ab9c4f":"data_blue['blueExperienceDiff'].corr(data_blue['blueAvgLevel'])","1d0de28c":"data['blueKills'].corr(data['blueTotalGold'])","cf55b63a":"data_blue['blueKillsDiff'].corr(data_blue['blueAssistsDiff'])","ab1ef1bf":"# Remove blueKills (correlation 0.89 with blueTotalGold) & blueAssistsDiff(correlation 0.83 with blueAssistsDiff)\ndata_blue = data_blue.drop(['blueKills', 'blueAssistsDiff'], 1)","3c791a61":"data_blue.columns","eb1edc9e":"# Output is binary so 0 or 1\n# We will test Logistic Regression, Decision Tree, Random Forest, KNeighbors","5ce396a3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV","eb5bdba4":"X = data_blue.drop(\"blueWins\", axis=1)\nY = data_blue[\"blueWins\"]","01ed9770":"# Normalize features columns\n# Models performe better when values are close to normally distributed\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(X)\nX = scaler.transform(X)","c675481e":"# Split 20% test, 80% train\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=0)","44e0dcae":"# Logistic Regression\n\nlog = LogisticRegression()\nlog.fit(X_train, Y_train)\nY_pred_log = log.predict(X_test)\nacc_log = accuracy_score(Y_pred_log, Y_test)\nacc_log","95b21aa2":"t = tree.DecisionTreeClassifier()\n\n# search the best params\ngrid = {'min_samples_split': [5, 10, 20, 50, 100]},\n\nclf_tree = GridSearchCV(t, grid, cv=10)\nclf_tree.fit(X_train, Y_train)\n\nY_pred_tree = clf_tree.predict(X_test)\n\n# get the accuracy score\nacc_tree = accuracy_score(Y_pred_tree, Y_test)\nprint(acc_tree)","b52da93d":"rf = RandomForestClassifier()\n\n# search the best params\ngrid = {'n_estimators':[100,200], 'max_depth': range(2,10,2)}\n\nclf_rf = GridSearchCV(rf, grid, cv=10)\nclf_rf.fit(X_train, Y_train)\n\nY_pred_rf = clf_rf.predict(X_test)\n# get the accuracy score\nacc_rf = accuracy_score(Y_pred_rf, Y_test)\nprint(acc_rf)","b18c9c3c":"# KNN or k-Nearest Neighbors\n\nknn = KNeighborsClassifier()\n\n# search the best params\ngrid = {\"n_neighbors\":np.arange(1,100)}\nclf_knn = GridSearchCV(knn, grid, cv=10)\nclf_knn.fit(X_train,Y_train) \n\n# get accuracy score\nY_pred_knn = clf_knn.predict(X_test) \nacc_knn = accuracy_score(Y_pred_knn, Y_test)\nprint(acc_knn)","3ce9ebe7":"# The logistic regression seems to be the best model","af788327":"# Data Exploration","c0c7f8de":"### Wards Destroyed","c3c8c531":"### Deaths","85e1ec19":"### Average Level","65edeb13":"*I don't know a lot about LoL so we will explore each columns to better understand the data*","83653b3e":"### Wins","3ea8afa4":"### Elite Monsters","842cdb24":"### Glossary\n\n* Warding totem: An item that a player can put on the map to reveal the nearby area. Very useful for map\/objectives control.\n* Minions: NPC that belong to both teams. They give gold when killed by players.\n* Jungle minions: NPC that belong to NO TEAM. They give gold and buffs when killed by players.\n* Elite monsters: Monsters with high hp\/damage that give a massive bonus (gold\/XP\/stats) when killed by a team.\n* Dragons: Elite monster which gives team bonus when killed. The 4th dragon killed by a team gives a massive stats bonus. The 5th dragon (Elder Dragon) offers a huge advantage to the team.\n* Herald: Elite monster which gives stats bonus when killed by the player. It helps to push a lane and destroys structures.\n* Towers: Structures you have to destroy to reach the enemy Nexus. They give gold.\n* Level: Champion level. Start at 1. Max is 18.","21070385":"### First Blood","77f30464":"### Towers destroyed","a639729b":"### Total Gold \/ Gold Difference \/ Gold Per Min","b19bb83a":"# Conclusion","b5d6bee1":"### Assists","d0c655f3":"### Total Experience","65b247c2":"### Dragons","a676f0ed":"### Total Minions Killed","d2b60c3d":"### Kills","97319a04":"### Wards Placed","4ab94e7a":"# Creating the model","de28297a":"### Columns\nNo distinction between blue or red\n* blueWins : Blue Team wins or not\n* WardsPlaced : Number of warding totems placed by the team on the map\n* WardsDestroyed : Number of enemy warding totems the team has destroyed\n* FirstBlood : First kill of the game. 1 if the team did the first kill, 0 otherwise\n* Kills : Number of enemies killed by the team\n* Deaths : Number of deaths\n* Assists : Number of kill assists\n* EliteMonsters : Number of elite monsters killed by the team (Dragons and Heralds)\n* Dragons : Number of dragons killed by the team\n* Heralds : Number of heralds killed by the team\n* TowersDestroyed : Number of structures destroyed by the team (towers...)\n* TotalGold : Team total gold\n* AvgLevel : Team average champion level\n* TotalExperience : Team total experience\n* TotalMinionsKilled : Team total minions killed (CS)\n* TotalJungleMinionsKilled : Team total jungle monsters killed\n* GoldDiff : Team gold difference compared to the enemy team\n* ExperienceDiff : Team experience difference compared to the enemy team\n* CSPerMin : Team CS (minions) per minute\n* GoldPerMin : Team gold per minute","3200a806":"# Correlation and Engineering Features","5de719ca":"### Heralds"}}