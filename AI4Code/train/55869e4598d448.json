{"cell_type":{"0d49181b":"code","797ae9c4":"code","5f5b5ddb":"code","94c15457":"code","121e8a71":"code","6ebea1d0":"code","7c01435d":"code","72d2c72b":"code","a388c8ce":"markdown","ca1afea9":"markdown","026b0688":"markdown"},"source":{"0d49181b":"import numpy as np\nimport pandas as pd\nimport os\n\nimport cv2\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","797ae9c4":"# Load the train data\ndf_train = pd.read_csv('..\/input\/train.csv')\n\ndf_train.head()","5f5b5ddb":"# Enter train image_id (without file extension)\n# ..........................\n\nimage_id = 'brsk004-029'\n\n# ..........................\n\n# Note:\n# If the image does not have any Kuzushiji characters then there will be an error message immediately after the next cell.","94c15457":"# Set the file name\nfname = image_id + '.jpg'\n\n\nfrom matplotlib.pyplot import figure\nfigure(figsize=(20,20)) \n\npath = '..\/input\/train_images\/' + fname\nimage = plt.imread(path)\nplt.imshow(image)\nplt.axis('off')\n\nplt.show()","121e8a71":"# Get the labels for the image\ndf = df_train[df_train['image_id'] == image_id]\ndf = df.reset_index(drop=True)\nlabel = df.loc[0, 'labels']\n\n\n# Set plot_type = 'mask' to see a mask instead of a bounding box.\n#plot_type = 'mask'\nplot_type = 'bbox'\n\n# blank mask\nmask = np.zeros((image.shape[0], image.shape[1], 1))\n\ntarget_list = label.split(' ')\n\nfor i, item in enumerate(target_list):\n    if item[0] == 'U':\n        \n        # coordinates of the bbox\n        x = int(target_list[i+1])\n        y = int(target_list[i+2])\n        w = int(target_list[i+3])\n        h = int(target_list[i+4])\n        \n        \n        # =========================================\n        # Imagine that this is a crop inside a crop.\n        # i.e. two boxes, one within another.\n        # =========================================\n        \n        # set the line thickness\n        stroke = 4\n\n        # larger mask\n        # Set plot_type = 'mask' to see a mask instead of a bounding box.\n        mask[y:y+h, x:x+w] = 1\n        \n        if plot_type == 'bbox':\n            \n            # smaller mask inside larger mask\n            y1=y + stroke\n            x1=x + stroke\n            h1 = h - (stroke*2)\n            w1 = w - (stroke*2)\n            mask[y1:y1+h1, x1:x1+w1] = 0\n            \n            \n            \n            # view the center point (top left corner is the center)\n            center_x = int(x + (w\/2))\n            center_y = int(y + (h\/2))\n            w_center = 5\n            h_center = 5\n            mask[center_y:center_y+h_center, center_x:center_x+w_center] = 1\n            \n          \n        \n\n# Plot the bounding boxes\nfigure(figsize=(20,20))\nmask = mask[:,:,0]\n\nplt.imshow(mask)\nplt.axis('off')\n\nplt.show()","6ebea1d0":"figure(figsize=(20,20))\n\nplt.imshow(image, cmap='Greys')\nplt.imshow(mask, cmap='Reds', alpha=0.3)\nplt.axis('off')\n\nplt.show()\n","7c01435d":"\n# Set plot_type = 'mask' to see a mask instead of a bounding box.\nplot_type = 'mask'\n#plot_type = 'bbox'\n\n# blank mask\nmask = np.zeros((image.shape[0], image.shape[1], 1))\n\ntarget_list = label.split(' ')\n\nfor i, item in enumerate(target_list):\n    if item[0] == 'U':\n        \n        # coordinates of the bbox\n        x = int(target_list[i+1])\n        y = int(target_list[i+2])\n        w = int(target_list[i+3])\n        h = int(target_list[i+4])\n        \n        # =========================================\n        # Imagine that this is a crop inside a crop.\n        # i.e. two boxes, one within another.\n        # =========================================\n        \n        # set the line thickness\n        stroke = 4\n\n        # larger mask\n        # Set plot_type = 'mask' to see a mask instead of a bounding box.\n        mask[y:y+h, x:x+w] = 1\n        \n        if plot_type == 'bbox':\n            # smaller mask inside larger mask\n            y1=y + stroke\n            x1=x + stroke\n            h1 = h - (stroke*2)\n            w1 = w - (stroke*2)\n            mask[y1:y1+h1, x1:x1+w1] = 0\n                \n\n# Plot the bounding boxes\nfigure(figsize=(20,20))\nmask = mask[:,:,0]\n\nplt.imshow(mask)\nplt.axis('off')\n\nplt.show()","72d2c72b":"figure(figsize=(20,20))\n\nplt.imshow(image, cmap='Greys')\nplt.imshow(mask, cmap='Reds', alpha=0.3)\nplt.axis('off')\n\nplt.show()","a388c8ce":"> ### To view a train image please enter the image_id and then run all cells in this kernel","ca1afea9":"**Version 3**<br>\nAdded center points to the bounding box image.\n\n<hr>","026b0688":"### A tool to quickly display the following:\n\n- Image\n- Bounding Boxes\n- Image + Bounding Boxes\n- Masks\n- Image + Masks"}}