{"cell_type":{"2472864b":"code","0490ebfc":"code","16ac12dc":"code","8544a0a2":"code","1cb0bc6d":"code","f1ee75d6":"code","97588c70":"code","71f2d725":"code","d6125b11":"code","187eb50e":"code","06c6efdc":"code","592bc3bc":"code","f348c71e":"code","313a7364":"code","d7f6410b":"code","70f7b689":"code","daf47d72":"code","0dde7491":"code","af0f6853":"code","f5f04faf":"code","3667f706":"code","e5beaf25":"markdown","ae47f6ef":"markdown","47ea03d0":"markdown","8c1bee9e":"markdown","5e0f6f98":"markdown","bc8d6ae4":"markdown","b11b8758":"markdown","dbcc706a":"markdown","58836ea8":"markdown","1216f5fa":"markdown"},"source":{"2472864b":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","0490ebfc":"url = 'https:\/\/raw.githubusercontent.com\/MainakRepositor\/Datasets-\/master\/WA_Marketing-Campaign.csv'\ndata0 = pd.read_csv(url)\ndata0","16ac12dc":"data0.shape","8544a0a2":"data0.info()","1cb0bc6d":"data0.isnull().sum()","f1ee75d6":"data0.describe().T","97588c70":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('NAN')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ndata1=df\ndata1","71f2d725":"print(data1.columns.tolist())","d6125b11":"target=['SalesInThousands']\ndataY=data1[target[0]]\ndataX=data1.drop(target,axis=1)\nprint(dataY[0:5].T)\nprint()\nprint(dataX[0:5].T)","187eb50e":"N=list(range(len(dataX)))\nrandom.seed(2021)\nrandom.shuffle(N)\nn=len(dataX)\ntrainX=dataX.loc[N[0:(n\/\/4)*3]]\ntrainY=dataY.loc[N[0:(n\/\/4)*3]]\ntestX=dataX.loc[N[(n\/\/4)*3:]]\ntestY=dataY.loc[N[(n\/\/4)*3:]]\nprint(len(dataX))\nprint(len(trainX))\nprint(len(testX))","06c6efdc":"df_columns = list(dataX.columns)\nprint(df_columns)","592bc3bc":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()\nfrom contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)\nfrom tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df\ntrain_feat_df = to_feature(trainX)\ntest_feat_df = to_feature(testX)","f348c71e":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models\nparams = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}\ny = trainY\nprint(y.shape)","313a7364":"ydf=pd.DataFrame(y)\nydf","d7f6410b":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted Train '+target[i],fontsize=12)\n    ax.set_xlabel('Actual Train '+target[i],fontsize=12)\n    ax.scatter(y,oof)","70f7b689":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","daf47d72":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\nPRED = pred0[4]\nPRED[0:5]","0dde7491":"ANS=np.array(testY)\nANS[0:5]","af0f6853":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(PRED, label='Predicted Test '+target[0], ax=ax, color='black',bins=30)\nsns.histplot(oof, label='Predict Train '+target[0], ax=ax, color='C1',bins=30)\nax.legend()\nax.grid()","f5f04faf":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0],fontsize=20)\nax.set_xlabel('Actual Test '+target[0],fontsize=12)\nax.set_ylabel('Predicted Test '+target[0],fontsize=12)\nax.scatter(ANS,PRED)","3667f706":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Promotion vs '+target[0],fontsize=20)\nax.set_xlabel('Promotion Type',fontsize=12)\nax.set_ylabel(target[0],fontsize=12)\nax.scatter(data1['Promotion'],data1[target[0]])","e5beaf25":"## **2. Uploading the dataset**","ae47f6ef":"## **1. Importing the Libraries**","47ea03d0":"**MADE BY MAINAK CHAUDHURI ON 02.02.2022**","8c1bee9e":"## **4. Label Encoding**","5e0f6f98":"## **3. Data Insighs**","bc8d6ae4":"## **7. Using Light Gradient Boosting Method**","b11b8758":"## **5. Building Machine Learning Model**","dbcc706a":"## **9. Report Generation**","58836ea8":"## **8. K Fold Cross Validation**","1216f5fa":"## **6. Feature Selection and Extraction**"}}