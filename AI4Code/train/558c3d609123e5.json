{"cell_type":{"0140ef60":"code","f92884de":"code","1e2e5385":"code","aca27569":"code","4da56eda":"code","2b34ce3c":"code","c6d16aac":"code","e0da10e4":"code","bc99336e":"code","72698706":"code","6b6cd8b8":"code","ab21575e":"code","4b910f2f":"code","a462d636":"code","0671041d":"code","47c7ee40":"code","00d9c791":"code","c9e6d2b3":"code","be6d4479":"code","6e13108c":"code","5d0db5fa":"code","d55f7e06":"code","866a67c9":"code","2d7ef994":"code","269e1541":"code","f46b2456":"code","5b8e40e7":"code","80287ec3":"code","e8ef065d":"code","72892a25":"code","0e89a421":"code","673ef7a0":"code","e59b99f0":"code","73902671":"code","7bb12e01":"code","e9d4b54b":"code","b577534d":"code","5ee77118":"code","72273d07":"code","8aa00331":"code","b6a447c2":"code","d68684c6":"code","45e21e28":"code","5a538b5e":"code","8617e471":"code","7552ddfc":"code","0eae206e":"code","9a9a6a0e":"code","b48a5b16":"code","ddc12b13":"code","f3567b92":"code","919e5035":"code","aa417043":"code","6da7f263":"code","c709e293":"code","7dc7f567":"code","2e7efac7":"code","6c4148b1":"code","47f5f078":"code","fd874ae9":"code","7e27a3d4":"code","5948cc24":"code","894b7443":"code","dde6d900":"code","f1675ea6":"code","798669e9":"code","f346f4a6":"code","d7a0081f":"code","5f013a54":"code","c3a85c10":"code","73b9bdba":"code","c4158ba9":"code","7915a0e4":"code","5a5f0359":"code","0bcb5c8f":"code","6b9e88e0":"code","6fe47da8":"code","a758b05e":"code","4c9ef7d0":"code","ebdd9a72":"code","e90e03a5":"code","7a9e465f":"code","91ab941f":"code","06516cfa":"code","da629f2b":"code","f8e6d4da":"code","24882817":"code","42ac8c18":"code","6373f1a7":"code","760dc175":"code","aa0f9cc8":"code","f7c1691f":"code","4fe05325":"code","362e129f":"code","57783dda":"code","8681dc16":"code","c3a46280":"code","816ff1fa":"code","9bc94490":"code","e8086ec1":"code","bb5b940e":"code","62fe7833":"code","ec9153a2":"code","6dd6e264":"code","27790112":"code","ff41e4f8":"code","c1ffd295":"code","9178116e":"code","69cabc68":"code","cf0781f0":"code","8aa1298e":"code","6baec7e9":"code","649319ba":"code","b53e0ace":"code","d47461eb":"code","6392fd2f":"code","2ed01e13":"code","65ba9536":"code","dfd12dec":"code","b12a87ec":"code","a6901d78":"code","711fdf88":"code","23599d1e":"code","569ff39e":"code","05582b03":"code","5b4ff3a1":"code","b318be0a":"code","d470c266":"code","f088632e":"code","3dfb5f78":"code","9268e442":"code","f69b82c7":"code","afef8f4c":"code","f56a1d86":"code","454cd86d":"code","d7b99cee":"code","73976234":"code","43c3978a":"code","6ec66d16":"code","c67f6a2e":"code","3e24d01c":"code","975bfdd6":"code","69aa0a1e":"code","56b4f03e":"code","3a28a911":"code","da6f111c":"code","79cf480e":"code","52ad24b3":"code","96c6e4c6":"code","12dca834":"code","98779128":"code","bb9ca69c":"code","fafbfffd":"code","15b53356":"code","b94ee9ad":"code","2505e78a":"code","7fd7f758":"code","8e49b2ed":"code","b97aa838":"code","c1984b79":"code","5a638558":"code","ca2bca68":"code","5113e48e":"code","cfa9593a":"code","03d0879d":"code","aefa7b18":"code","15190f94":"code","a84ff48b":"code","e9bf6b55":"code","2b52bf62":"code","f3fed3d9":"code","779721eb":"code","e00d0dd5":"code","2fd7db50":"code","923754c0":"code","02c690f8":"code","645dc1ef":"code","e86dde22":"code","fe111a35":"code","aec6cb63":"code","f475410b":"code","95bd1de5":"code","5ff25539":"code","f7008a93":"code","7440bf04":"code","75d04cd2":"code","600379ad":"code","22958045":"code","789fe0f3":"code","ee0c7435":"code","adfe1212":"code","abdf89fb":"code","8b75dd51":"code","6c00cd70":"code","727fb2ce":"code","6e375aed":"code","653c2cfb":"code","4d518da8":"code","f2e1a592":"code","36252c6f":"code","c122ad37":"code","3c7b442e":"code","4f9b1b34":"code","2bcaa175":"code","2c56add7":"code","65b316f9":"code","b60f9205":"code","808eb732":"code","4091d17f":"code","d735bec6":"code","3a036a5d":"code","7abe3abb":"code","a4b26e5b":"code","5f0f1974":"code","4f6282bd":"code","754c0054":"code","e12af0c7":"code","9530c4de":"code","8a18b63e":"code","38a2e0e2":"code","f1cf5f15":"code","88777747":"code","61c30587":"code","296f3fc5":"code","b29d3f99":"code","437f3804":"code","8ac4989a":"code","0ae29356":"code","8fb7a844":"code","742bef90":"code","a9799e96":"code","a3126a79":"code","d8991685":"code","ab3c6049":"code","ac2239de":"code","351b5200":"code","d3d89921":"code","08080138":"code","7c0bd78f":"code","777d382a":"code","c0bb6ed5":"code","099222cf":"code","0394f85b":"code","eafbd71f":"code","150ad39a":"code","db5c6e84":"code","06de5c99":"code","73af38fe":"markdown","fffca77e":"markdown","25337b07":"markdown","58cee6a9":"markdown","8b9b9209":"markdown","9ae5e46a":"markdown","61a62b1d":"markdown","cb1c0e0a":"markdown","3f49cd9c":"markdown","3752edc4":"markdown","d99b0000":"markdown","7cacbd97":"markdown","2817cdcb":"markdown","7982efa2":"markdown","38124806":"markdown","8d3c8f8d":"markdown","097f05c4":"markdown","7da5abc4":"markdown","d88f0897":"markdown","9b418a4e":"markdown","01bcb891":"markdown","c3ed4aee":"markdown","dddcca47":"markdown","c5241a73":"markdown","0d59c223":"markdown","af73e622":"markdown","1ff0d96d":"markdown","31f36847":"markdown","ee26cd63":"markdown","1ae9bf4b":"markdown","e63ab82b":"markdown","94f97b50":"markdown","a3367744":"markdown","2e496478":"markdown","ce0c7f6f":"markdown","3903b467":"markdown","47738ddf":"markdown","c481fb48":"markdown","9fcbe2c1":"markdown","98015d49":"markdown","24152ca8":"markdown","cf410593":"markdown","83832123":"markdown","ba5382ed":"markdown","46559e5c":"markdown","8afb84ef":"markdown","c5134a48":"markdown","ce24b1f1":"markdown","5905550c":"markdown","6acba7e2":"markdown","a16fa4ed":"markdown","4b972b23":"markdown","fa089c5e":"markdown","6d0aa33a":"markdown"},"source":{"0140ef60":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\n\nimport warnings\nwarnings.filterwarnings('ignore')","f92884de":"train_data = pd.read_csv('..\/input\/iitgaih12021-22\/train.csv')\ntest_data = pd.read_csv('..\/input\/iitgaih12021-22\/test.csv')","1e2e5385":"train_data","aca27569":"test_data.columns","4da56eda":"train_data.columns","2b34ce3c":"train_data.info()","c6d16aac":"test_data.info()","e0da10e4":"train_data['nerdy'].value_counts()","bc99336e":"test = test_data.copy()\ntrain = train_data.copy()","72698706":"cols =  ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10',\n       'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20',\n       'Q21', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26']\n    \ntrain['que_score'] = train[cols].sum(axis=1) \/ 130","6b6cd8b8":"test['que_score'] = test[cols].sum(axis=1) \/ 130","ab21575e":"train.head()","4b910f2f":"test.head()","a462d636":"sns.boxplot(y = train['que_score'], x= train['nerdy'])","0671041d":"for col in train_data.columns:\n    if train_data[col].isnull().values.any() == True:\n        print(str(col))","47c7ee40":"for col in test.columns:\n    if test[col].isnull().values.any() == True:\n        print(str(col))","00d9c791":"train['country'].unique()","c9e6d2b3":"train['country'].isnull().value_counts()","be6d4479":"test['country'].isnull().value_counts()","6e13108c":"train[train['country'].isnull() == True]","5d0db5fa":"train['country'].fillna('NONE', inplace=True)\ntrain['country'].isnull().value_counts()","d55f7e06":"train['country'].unique()","866a67c9":"test[test['country'].isnull() == True]","2d7ef994":"test['country'].unique()","269e1541":"test['country'].fillna('NONE', inplace=True)\ntest['country'].isnull().value_counts()","f46b2456":"train['race_asian'].isnull().value_counts()","5b8e40e7":"train[train['race_asian'].isnull() == True]","80287ec3":"train['race_asian'].fillna(0, inplace=True)\ntrain['race_asian'].isnull().value_counts()","e8ef065d":"train['major'].isnull().value_counts()","72892a25":"test['major'].isnull().value_counts()","0e89a421":"train['race_white'].replace('0',0,inplace=True)\ntrain['race_white'].replace('1',1,inplace=True)","673ef7a0":"train['race_white'].value_counts()","e59b99f0":"train['race_white'].unique()","73902671":"train[train['major'].isnull().values == True]['race_white'].unique()","7bb12e01":"train[train['major'].isnull()]['race_white'].unique()","e9d4b54b":"train['major'].fillna('NONE', inplace=True)\ntrain['major'].isnull().value_counts()","b577534d":"test['major'].fillna('NONE', inplace=True)\ntest['major'].isnull().value_counts()","5ee77118":"train.isnull().values.any() #successfully removed all null values","72273d07":"test.isnull().values.any() #successfully removed all null values","8aa00331":"train['race_arab'].replace('0',0,inplace=True)\ntrain['race_arab'].replace('1',1,inplace=True)\ntrain['race_asian'].replace('0',0,inplace=True)\ntrain['race_asian'].replace('1',1,inplace=True)\ntrain['race_black'].replace('0',0,inplace=True)\ntrain['race_black'].replace('1',1,inplace=True)\ntrain['race_white'].replace('0',0,inplace=True)\ntrain['race_white'].replace('1',1,inplace=True)","b6a447c2":"test['race_arab'].replace('0',0,inplace=True)\ntest['race_arab'].replace('1',1,inplace=True)\ntest['race_asian'].replace('0',0,inplace=True)\ntest['race_asian'].replace('1',1,inplace=True)\ntest['race_black'].replace('0',0,inplace=True)\ntest['race_black'].replace('1',1,inplace=True)","d68684c6":"train['race_arab'].unique()","45e21e28":"train['race_asian'].unique()","5a538b5e":"train['race_black'].unique()","8617e471":"train['race_white'].unique()","7552ddfc":"train[(train['major'] != 'NONE') & (train['race_arab'] != 0) & (train['race_arab'] != 1)]['nerdy'].unique()","0eae206e":"train[((train['race_arab'] != 0) & (train['race_arab'] != 1)) | \\\n     ((train['race_asian'] != 0) & (train['race_asian'] != 1)) | \\\n     ((train['race_black'] != 0) & (train['race_black'] != 1)) | \\\n     ((train['race_white'] != 0) & (train['race_white'] != 1))]['nerdy'].unique()","9a9a6a0e":"train[((train['race_arab'] != 0) & (train['race_arab'] != 1)) | \\\n     ((train['race_asian'] != 0) & (train['race_asian'] != 1)) | \\\n     ((train['race_black'] != 0) & (train['race_black'] != 1)) | \\\n     ((train['race_white'] != 0) & (train['race_white'] != 1))]","b48a5b16":"train[((train['race_arab'] == 0) | (train['race_arab'] == 1))]['race_black'].unique()","ddc12b13":"test[((test['race_arab'] == 0) | (test['race_arab'] == 1))]['race_asian'].unique()","f3567b92":"test[((test['race_arab'] != 0) & (test['race_arab'] != 1)) | \\\n     ((test['race_asian'] != 0) & (test['race_asian'] != 1)) | \\\n     ((test['race_black'] != 0) & (test['race_black'] != 1)) | \\\n     ((test['race_white'] != 0) & (test['race_white'] != 1))]","919e5035":"test[((test['race_arab'] != 0) & (test['race_arab'] != 1))]","aa417043":"train[(train['race_arab'] != 0) & (train['race_arab'] != 1)]","6da7f263":"train['wrong_race'] = 0\nwrong_race_idx = []\nfor x in range(train.shape[0]):\n    if ((train.loc[x, 'race_arab'] != 0) & (train.loc[x, 'race_arab'] != 1)):\n        wrong_race_idx.append(x)\n        \nfor x in wrong_race_idx:\n    train.loc[x, 'wrong_race'] = 1","c709e293":"test['wrong_race'] = 0\nwrong_race_idx_test = []\nfor x in range(test.shape[0]):\n    if ((test.loc[x, 'race_arab'] != 0) & (test.loc[x, 'race_arab'] != 1)):\n        wrong_race_idx_test.append(x)\n        \nfor x in wrong_race_idx_test:\n    test.loc[x, 'wrong_race'] = 1","7dc7f567":"test[test['wrong_race'] == 1]","2e7efac7":"train['race_white'].unique()","6c4148b1":"train['race_white'].replace(' G', 0, inplace=True)","47f5f078":"train['race_white'].unique()","fd874ae9":"train['race_arab'].value_counts()","7e27a3d4":"test['race_arab'].value_counts()","5948cc24":"train['race_asian'].value_counts()","894b7443":"test['race_asian'].value_counts()","dde6d900":"train['race_black'].value_counts()","f1675ea6":"test['race_black'].value_counts()","798669e9":"for x in range(train.shape[0]):\n    if ((train.loc[x, 'race_arab'] != 0) & (train.loc[x, 'race_arab'] != 1)):\n        train.loc[x, 'race_arab'] = 0","f346f4a6":"for x in range(train.shape[0]):\n    if ((train.loc[x, 'race_asian'] != 0) & (train.loc[x, 'race_asian'] != 1)):\n        train.loc[x, 'race_asian'] = 0\n        \n        \nfor x in range(train.shape[0]):\n    if ((train.loc[x, 'race_black'] != 0) & (train.loc[x, 'race_black'] != 1)):\n        train.loc[x, 'race_black'] = 0","d7a0081f":"train['race_asian'].unique()","5f013a54":"for x in range(test.shape[0]):\n    if ((test.loc[x, 'race_arab'] != 0) & (test.loc[x, 'race_arab'] != 1)):\n        test.loc[x, 'race_arab'] = 0\n        \nfor x in range(test.shape[0]):\n    if ((test.loc[x, 'race_asian'] != 0) & (test.loc[x, 'race_asian'] != 1)):\n        test.loc[x, 'race_asian'] = 0\n        \n        \nfor x in range(test.shape[0]):\n    if ((test.loc[x, 'race_black'] != 0) & (test.loc[x, 'race_black'] != 1)):\n        test.loc[x, 'race_black'] = 0","c3a85c10":"test['race_asian'].unique()","73b9bdba":"cols = ['race_arab', 'race_asian', 'race_black']\n\nfor col in cols:\n    train[[col]] = train[[col]].apply(pd.to_numeric)","c4158ba9":"train['race_arab'].unique()","7915a0e4":"test.info()","5a5f0359":"cols = ['race_arab', 'race_asian', 'race_black']\n\nfor col in cols:\n    test[[col]] = test[[col]].apply(pd.to_numeric)","0bcb5c8f":"tipi_cols = ['TIPI1', 'TIPI2', 'TIPI3', 'TIPI4',\n       'TIPI5', 'TIPI6', 'TIPI7', 'TIPI8', 'TIPI9', 'TIPI10']\n\nfor col in tipi_cols:\n    print(str(col) + \" \" , train[col].unique())","6b9e88e0":"train['TIPI1'].value_counts()","6fe47da8":"tipi_cols = ['TIPI1', 'TIPI2', 'TIPI3', 'TIPI4',\n       'TIPI5', 'TIPI6', 'TIPI7', 'TIPI8', 'TIPI9', 'TIPI10']\n\ntrain['tipi_score'] = train[tipi_cols].sum(axis = 1)","a758b05e":"test['tipi_score'] = test[tipi_cols].sum(axis=1)","4c9ef7d0":"train.head()","ebdd9a72":"sns.boxplot( y = train['tipi_score'], x = train['nerdy'])","e90e03a5":"vcl_col = ['VCL1', 'VCL2',\n       'VCL3', 'VCL4', 'VCL5', 'VCL6', 'VCL7', 'VCL8', 'VCL9', 'VCL10',\n       'VCL11', 'VCL12', 'VCL13', 'VCL14', 'VCL15', 'VCL16']\n\nfor col in vcl_col:\n    print(str(col) + \" \" , train[col].unique())","7a9e465f":"train['education'].unique()","91ab941f":"test['education'].unique()","06516cfa":"train['urban'].unique()","da629f2b":"train['gender'].unique()","f8e6d4da":"train['engnat'].unique()","24882817":"train['age'].unique()","42ac8c18":"train['hand'].value_counts()","6373f1a7":"test['hand'].value_counts()","760dc175":"train['religion'].value_counts()","aa0f9cc8":"train['age'].unique()","f7c1691f":"test['age'].unique()","4fe05325":"train[(train['age'] == 38822) | (train['age'] == 1997) |(train['age'] == 722)| (train['age'] == 1999) | (train['age'] == 545)| (train['age'] == 374) | (train['age'] == 809)| (train['age'] == 123)| (train['age'] == 116)]","362e129f":"test['age'].unique()","57783dda":"train['age'].value_counts()","8681dc16":"train[train['age'] == 1999]","c3a46280":"train.loc[7025, 'age'] = 18","816ff1fa":"train.loc[13674, 'age'] = 18","9bc94490":"train['age'].value_counts()","e8086ec1":"fig, ax = plt.subplots()\nsns.scatterplot(x = train[(train['age'] == 38822) | \\\n                          (train['age'] == 722) | \\\n                          (train['age'] == 545)| (train['age'] == 374) | \\\n                          (train['age'] == 809) | (train['age'] == 116) | (train['age'] == 123)]['age'], y=train['nerdy'])","bb5b940e":"que_cols =  ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10',\n       'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20',\n       'Q21', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'nerdy', 'education', 'voted','married', 'urban', 'familysize', 'country']\ntrain[train['age'] == 38822][que_cols].loc[:, 'Q17']","62fe7833":"train.loc[6487, 'age'] = 38","ec9153a2":"train[train['age'] == 116][que_cols].loc[:, 'Q19']","6dd6e264":"train.loc[13934, 'age'] = 16","27790112":"train[train['age'] == 123][que_cols]","ff41e4f8":"train.loc[13059, 'age'] = 23","c1ffd295":"train[train['age'] == 374][que_cols].loc[:,'Q19']","9178116e":"train.loc[13429, 'age'] = 37","69cabc68":"train[train['age'] == 722][que_cols]","cf0781f0":"train.loc[7723, 'age'] = 72","8aa1298e":"train[train['age'] == 545][que_cols]","6baec7e9":"train.loc[10377, 'age'] = 54","649319ba":"train[train['age'] == 809][que_cols]","b53e0ace":"train.loc[13726, 'age'] = 80","d47461eb":"train['age'].unique()","6392fd2f":"test['age'].unique()","2ed01e13":"que_test_cols =  ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10',\n       'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20',\n       'Q21', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'education', 'voted','married', 'urban', 'familysize', 'country']\ntest[test['age'] == 155][que_test_cols].loc[:,'Q25']","65ba9536":"test[test['age'] == 155][que_test_cols]","dfd12dec":"test.loc[566, 'age'] = 15","b12a87ec":"test[test['age'] == 336][que_test_cols]","a6901d78":"test.loc[4142, 'age'] = 33","711fdf88":"train['age'].unique()","23599d1e":"test['age'].unique()","569ff39e":"sns.boxplot(x=train['nerdy'], y=train['age'])","05582b03":"ela = ['introelapse', 'testelapse' ,'surveyelapse']","5b4ff3a1":"train[ela]","b318be0a":"pd.set_option('float_format', '{:f}'.format)\ntrain.describe()[ela]","d470c266":"train['total_time_min'] = train[ela].sum(axis = 1) \/ 60","f088632e":"ela = ['introelapse', 'testelapse' ,'surveyelapse', 'total_time_min']\ntrain.describe()[ela]","3dfb5f78":"train[train['total_time_min'] <= 120]['total_time_min'].mean()","9268e442":"train[train['total_time_min'] <= 120]['introelapse'].mean()","f69b82c7":"train[train['total_time_min'] <= 120]['testelapse'].mean()","afef8f4c":"train[train['total_time_min'] <= 120]['surveyelapse'].mean()","f56a1d86":"wrong_time = []\nfor x in range(train.shape[0]):\n    if train.loc[x, 'total_time_min'] > 120:\n        train.loc[x, 'total_time_min'] = 8.04080625671319\n        train.loc[x, 'introelapse'] = 142.88500268528463\n        train.loc[x, 'testelapse'] = 142.24113856068743\n        train.loc[x, 'surveyelapse'] = 197.32223415682063\n        wrong_time.append(x)","454cd86d":"train.describe()[ela]","d7b99cee":"ela_test = ['introelapse', 'testelapse' ,'surveyelapse']\ntest['total_time_min'] = test[ela_test].sum(axis = 1) \/ 60","73976234":"ela_test = ['introelapse', 'testelapse' ,'surveyelapse', 'total_time_min']\ntest.describe()[ela_test]","43c3978a":"print(test[test['total_time_min'] <= 120]['total_time_min'].mean())\nprint(test[test['total_time_min'] <= 120]['introelapse'].mean())\nprint(test[test['total_time_min'] <= 120]['testelapse'].mean())\nprint(test[test['total_time_min'] <= 120]['surveyelapse'].mean())","6ec66d16":"wrong_time_test = []\nfor x in range(test.shape[0]):\n    if test.loc[x, 'total_time_min'] > 120:\n        test.loc[x, 'total_time_min'] = 8.486555566743814\n        test.loc[x, 'introelapse'] = 167.22001812506292\n        test.loc[x, 'testelapse'] = 144.04229181351323\n        test.loc[x, 'surveyelapse'] = 197.93102406605578\n        wrong_time_test.append(x)","c67f6a2e":"test.describe()[ela_test]","3e24d01c":"train['country']","975bfdd6":"train['country'].unique()","69aa0a1e":"test['country'].unique()","56b4f03e":"country_not_in_test = []\nfor x in test['country'].unique():\n    if x not in train['country'].unique():\n        country_not_in_test.append(x)","3a28a911":"len(country_not_in_test)","da6f111c":"country_not_in_test","79cf480e":"from sklearn.preprocessing import LabelEncoder","52ad24b3":"test_indx_for_train = []\nfor x in range(test.shape[0]):\n    if test.loc[x, 'country']  in train['country'].unique():\n        test_indx_for_train.append(x)","96c6e4c6":"len(test_indx_for_train)","12dca834":"test.shape","98779128":"test['country']","bb9ca69c":"test_in_train = test.loc[test_indx_for_train, :]","fafbfffd":"test_indx_not_in_train = []\nfor x in range(test.shape[0]):\n    if test.loc[x, 'country']  not in train['country'].unique():\n        test_indx_not_in_train.append(x)","15b53356":"len(test_indx_not_in_train)","b94ee9ad":"test_not_in_train = test.loc[test_indx_not_in_train, :]","2505e78a":"test_not_in_train['country']","7fd7f758":"le = LabelEncoder()\ncountry_enc = le.fit_transform(train['country'])\ntrain['country_enc'] = country_enc","8e49b2ed":"train","b97aa838":"le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\nprint(le_name_mapping)","c1984b79":"country_enc_test = le.transform(test_in_train['country'])\ntest_in_train['country_enc'] = country_enc_test","5a638558":"test_in_train","ca2bca68":"le.classes_","5113e48e":"le2 = LabelEncoder()","cfa9593a":"unique_country = le2.fit_transform(test_not_in_train['country'])\ntest_not_in_train['country_enc'] = unique_country","03d0879d":"test_not_in_train['country_enc'].unique()","aefa7b18":"test_not_in_train['country_enc'] += 139","15190f94":"test_not_in_train['country_enc'].unique()","a84ff48b":"test_enc = pd.concat([test_in_train, test_not_in_train])","e9bf6b55":"test.index","2b52bf62":"test","f3fed3d9":"test_enc=test_enc.reindex(test.index)","779721eb":"test_enc","e00d0dd5":"train['major']","2fd7db50":"train.to_csv(\"train_pre.csv\",index=False )","923754c0":"test_enc.to_csv(\"test_pre.csv\", index=False)","02c690f8":"train = pd.read_csv('train_pre.csv')\ntest = pd.read_csv('test_pre.csv')","645dc1ef":"train.columns","e86dde22":"train[['screenh', 'screenw']].corr()","fe111a35":"train['screenh'].value_counts()","aec6cb63":"train['screenw'].value_counts()","f475410b":"sns.scatterplot(x = train['nerdy'], y=train['screenh'])","95bd1de5":"sns.scatterplot(x = train['nerdy'], y=train['screenw'])","5ff25539":"sns.scatterplot(x = train['nerdy'] , y=train['screenw'] * train['screenh'])","f7008a93":"len(train['major'].unique())","7440bf04":"len(test['major'].unique())","75d04cd2":"train['major'].value_counts()","600379ad":"test['major'].value_counts()","22958045":"common_major = []\nfor x in test['major'].unique():\n    if x in train['major'].unique():\n        common_major.append(x)","789fe0f3":"len(common_major)","ee0c7435":"train[train['major'] == 'NONE']['nerdy'].value_counts()","adfe1212":"train['nerdy'].value_counts()","abdf89fb":"train['no_major'] = 0\nfor x in range(train.shape[0]):\n       if  train.loc[x, 'major'] == 'NONE':\n            train.loc[x ,'no_major'] = 1","8b75dd51":"train['no_major'].value_counts()","6c00cd70":"test['no_major'] = 0\nfor x in range(test.shape[0]):\n       if  test.loc[x, 'major'] == 'NONE':\n            test.loc[x ,'no_major'] = 1","727fb2ce":"test['no_major'].value_counts()","6e375aed":"train","653c2cfb":"train.columns","4d518da8":"train['country'].unique()","f2e1a592":"Asia = ['IL', 'IN', 'SG', 'ID', 'TH', 'PK', 'PH', 'MY', 'TR', 'AM', 'KR', 'TW', 'MO', 'VN' , 'HK', 'LB', 'AE', 'JO',\n       'KW', 'IR','OM', 'JP', 'NP', 'BD', 'CN', 'BN', 'SY', 'QA', 'AZ', 'BH', 'LK', 'AF', 'MV', 'IQ', 'MN', 'KZ', 'PS', 'KH',\n       'LA']\n\nNA = ['US', 'CA', 'MX', 'CR', 'PR', 'GT', 'BS', 'GL', 'BB', 'BZ','DO', 'HN', 'JM','VG', 'AG', 'GD', 'HT', 'SV', 'VI', 'NI', 'KY', 'LC']\n\nSA = ['VE', 'TT', 'BR', 'AR', 'PE', 'CL', 'GY', 'CO', 'UY', 'PY', 'BO', 'EC','CW', 'PA', 'GF']\n\nAUS = ['GU', 'AU', 'NZ' ,'TZ', 'PG', 'DZ','FJ', 'FM', 'VU', 'MP' ]\n\nAFR = ['SA', 'ZW', 'ZA', 'NG', 'KE', 'MA', 'BW', 'EG', 'SZ', 'MG', 'GH', 'ET', 'MW', 'TN', 'ZM', 'RE', 'MU', 'SD', 'MZ'\n      ,'BF','RW', 'SL', 'LY', 'SS', 'UG', 'AO']\n\nEU = ['CH', 'NL', 'GB', 'FI', 'BE', 'DE', 'CZ', 'NO', 'SE' ,'AT', 'PL', 'IT', 'EE', 'BG', 'ES', 'IE', 'GR', 'RU', 'FR', 'HU', 'PT', 'RS', 'RO'\n     ,'DK', 'LV', 'SK', 'LT', 'SI', 'UA', 'HR', 'GE', 'IS', 'AL', 'MT', 'BA', 'BY', 'MK', 'LU', 'CY', 'IM', 'JE', 'MD', 'AX'\n     , 'ME', 'FO','MC' ]","36252c6f":"print(len(Asia) + len(SA) + len(NA) + len(AFR) + len(EU) + len(AUS))","c122ad37":"test['country'].unique()","3c7b442e":"train['continent'] = 0","4f9b1b34":"for x in range(train.shape[0]):\n    if train.loc[x,'country'] in Asia:\n        train.loc[x , 'continent'] = 'Asia'\n        \n    elif train.loc[x,'country'] in NA:\n        train.loc[x , 'continent'] = 'NA'\n        \n    elif train.loc[x,'country'] in SA:\n        train.loc[x , 'continent'] = 'SA'\n        \n    elif train.loc[x,'country'] in AFR:\n        train.loc[x , 'continent'] = 'Africa'\n        \n    elif train.loc[x,'country'] in EU:\n        train.loc[x , 'continent'] = 'Europe'\n        \n    elif train.loc[x,'country'] in AUS:\n        train.loc[x , 'continent'] = 'Aus'\n        \n    else:\n        train.loc[x, 'continent'] = 'NONE'","2bcaa175":"train['continent'].value_counts()","2c56add7":"test['continent'] = 0","65b316f9":"for x in range(test.shape[0]):\n    if test.loc[x,'country'] in Asia:\n        test.loc[x , 'continent'] = 'Asia'\n        \n    elif test.loc[x,'country'] in NA:\n        test.loc[x , 'continent'] = 'NA'\n        \n    elif test.loc[x,'country'] in SA:\n        test.loc[x , 'continent'] = 'SA'\n        \n    elif test.loc[x,'country'] in AFR:\n        test.loc[x , 'continent'] = 'Africa'\n        \n    elif test.loc[x,'country'] in EU:\n        test.loc[x , 'continent'] = 'Europe'\n        \n    elif test.loc[x,'country'] in AUS:\n        test.loc[x , 'continent'] = 'Aus'\n        \n    else:\n        test.loc[x, 'continent'] = 'NONE'","b60f9205":"test['continent'].value_counts()","808eb732":"train.to_csv(\"train_pre.csv\",index=False )\ntest.to_csv(\"test_pre.csv\",index=False )","4091d17f":"train","d735bec6":"test","3a036a5d":"plt.figure(figsize = (15,7))\nsns.countplot(x = train['nerdy'], hue = train['continent'])","7abe3abb":"ohe_test = pd.get_dummies(test['continent'])","a4b26e5b":"test_new = pd.concat([test, ohe_test], axis = 1)","5f0f1974":"test_new","4f6282bd":"ohe_train = pd.get_dummies(train['continent'])\ntrain_new = pd.concat([train, ohe_train], axis = 1)\ntrain_new","754c0054":"train_old = train.copy()\ntest_old = test.copy()","e12af0c7":"train = train_new.copy()\ntest = test_new.copy()","9530c4de":"train_new","8a18b63e":"train_new.to_csv(\"train_pre.csv\",index=False )\ntest_new.to_csv(\"test_pre.csv\",index=False )","38a2e0e2":"train.info()","f1cf5f15":"plt.figure(figsize = (15,15))\n\nplt.subplot(3,3,1)\nsns.countplot(x = train['nerdy'], hue = train['gender'])\n\nplt.subplot(3,3,2)\nsns.countplot(x = train['nerdy'], hue = train['married'])\n\nplt.subplot(3,3,3)\nsns.countplot(x = train['nerdy'], hue = train['urban'])\n\nplt.subplot(3,3,4)\nsns.countplot(x = train['nerdy'], hue = train['hand'])\n\nplt.subplot(3,3,5)\nsns.countplot(x = train['nerdy'], hue = train['engnat'])\n\nplt.subplot(3,3,6)\nsns.countplot(x = train['nerdy'], hue = train['orientation'])\n\nplt.subplot(3,3,7)\nsns.countplot(x = train['nerdy'], hue = train['voted'])\n\nplt.subplot(3,3,8)\nsns.countplot(x = train['nerdy'], hue = train['religion'])\n\nplt.subplot(3,3,9)\nsns.countplot(x = train['nerdy'], hue = train['no_major'])","88777747":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['total_time_min'], kde=True, color='blue')","61c30587":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['introelapse'], kde=True, color='blue')","296f3fc5":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['surveyelapse'], kde=True, color='blue')","b29d3f99":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['testelapse'], kde=True, color='blue')","437f3804":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['screenh'], kde=True, color='blue')","8ac4989a":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['screenw'], kde=True, color='blue')","0ae29356":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['que_score'], kde=True, color='blue')","8fb7a844":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['tipi_score'], kde=True, color='blue')","742bef90":"plt.figure(figsize = (15,7))\nsns.histplot(x = train['age'], kde=True, color='blue')","a9799e96":"plt.figure(figsize = (15,7))\nsns.boxplot(x = train['nerdy'], y= train['familysize'])","a3126a79":"train['familysize'].value_counts()","d8991685":"train[train['familysize'] > 32]['age']","ab3c6049":"test['familysize'].value_counts()","ac2239de":"train[train['familysize'] > 32]['familysize']","351b5200":"train.loc[1084, 'familysize'] = 2\ntrain.loc[6220, 'familysize'] = 2\ntrain.loc[9532, 'familysize'] = 2\ntrain.loc[12236, 'familysize'] = 2","d3d89921":"test[test['familysize'] == 2919]","08080138":"test.loc[4916, 'familysize'] = 2","7c0bd78f":"plt.figure(figsize = (15,7))\nsns.countplot(hue = train['nerdy'], x= train['familysize'])","777d382a":"plt.figure(figsize = (15,10))\n\nplt.subplot(2,2,1)\nsns.histplot(x = (train['total_time_min']), kde=True, color='blue')\nplt.title('original - %1.3f' % train['total_time_min'].skew())\n\nplt.subplot(2,2,2)\nsns.histplot(x = np.log(train['total_time_min']), kde=True, color='blue')\nplt.title('log - %1.3f' % np.log1p(train['total_time_min']).skew())\n\nplt.subplot(2,2,3)\nsns.histplot(x = np.sqrt(train['total_time_min']), kde=True, color='blue')\nplt.title('sqrt - %1.3f' % np.sqrt(train['total_time_min']).skew())\n\nplt.subplot(2,2,4)\nsns.histplot(x = stats.boxcox(train['total_time_min'])[0], kde=True, color='blue')\nplt.title('boxcox - %1.3f' % pd.Series(stats.boxcox(train['total_time_min'])[0]).skew())","c0bb6ed5":"plt.figure(figsize = (15,10))\n\nplt.subplot(2,2,1)\nsns.histplot(x = (train['introelapse']), kde=True, color='blue')\nplt.title('original - %1.3f' % train['introelapse'].skew())\n\nplt.subplot(2,2,2)\nsns.histplot(x = np.log(train['introelapse']), kde=True, color='blue')\nplt.title('log - %1.3f' % np.log1p(train['introelapse']).skew())\n\nplt.subplot(2,2,3)\nsns.histplot(x = np.sqrt(train['introelapse']), kde=True, color='blue')\nplt.title('sqrt - %1.3f' % np.sqrt(train['introelapse']).skew())\n\nplt.subplot(2,2,4)\nsns.histplot(x = stats.boxcox(train['introelapse'])[0], kde=True, color='blue')\nplt.title('boxcox - %1.3f' % pd.Series(stats.boxcox(train['introelapse'])[0]).skew())","099222cf":"plt.figure(figsize = (15,10))\n\nplt.subplot(2,2,1)\nsns.histplot(x = (train['surveyelapse']), kde=True, color='blue')\nplt.title('original - %1.3f' % train['surveyelapse'].skew())\n\nplt.subplot(2,2,2)\nsns.histplot(x = np.log(train['surveyelapse']), kde=True, color='blue')\nplt.title('log - %1.3f' % np.log1p(train['surveyelapse']).skew())\n\nplt.subplot(2,2,3)\nsns.histplot(x = np.sqrt(train['surveyelapse']), kde=True, color='blue')\nplt.title('sqrt - %1.3f' % np.sqrt(train['surveyelapse']).skew())\n\nplt.subplot(2,2,4)\nsns.histplot(x = stats.boxcox(train['surveyelapse'])[0], kde=True, color='blue')\nplt.title('boxcox - %1.3f' % pd.Series(stats.boxcox(train['surveyelapse'])[0]).skew())","0394f85b":"plt.figure(figsize = (15,10))\n\nplt.subplot(2,2,1)\nsns.histplot(x = (train['testelapse']), kde=True, color='blue')\nplt.title('original - %1.3f' % train['testelapse'].skew())\n\nplt.subplot(2,2,2)\nsns.histplot(x = np.log(train['testelapse']), kde=True, color='blue')\nplt.title('log - %1.3f' % np.log1p(train['testelapse']).skew())\n\nplt.subplot(2,2,3)\nsns.histplot(x = np.sqrt(train['testelapse']), kde=True, color='blue')\nplt.title('sqrt - %1.3f' % np.sqrt(train['testelapse']).skew())\n\nplt.subplot(2,2,4)\nsns.histplot(x = stats.boxcox(train['testelapse'])[0], kde=True, color='blue')\nplt.title('boxcox - %1.3f' % pd.Series(stats.boxcox(train['testelapse'])[0]).skew())","eafbd71f":"train1 = train.copy()\ntest1 = test.copy()","150ad39a":"cols = ['total_time_min', 'introelapse', 'surveyelapse', 'testelapse']\n\nfor col in cols:\n    train1[col] = np.log1p(train1[col])\n    test1[col] = np.log1p(test1[col])","db5c6e84":"test1","06de5c99":"train1.to_csv(\"train_pre1.csv\",index=False )\ntest1.to_csv(\"test_pre1.csv\",index=False )","73af38fe":"Now we can apply one_hot encoding in the continent column","fffca77e":"COnsidering Q19 and Education, the person would be 16 years old","25337b07":"We dont have enough data to distinguish between 54 and 45. So putting his age to be 54.","58cee6a9":"### Intro Test and Survey Elapses","8b9b9209":"This feature is also not of much help","9ae5e46a":"As we can see, there are some uncommon value in familysize. This might either be a typo or the person wouldnt want to answer that, so he filled some random values. The max number of birth by a mother after 1980 is 32 children. So any value above that is absurd.","61a62b1d":"### Screenh and screenw columns","cb1c0e0a":"### Country","3f49cd9c":"Now we can one hot encode the continent columns","3752edc4":"Considering its education, this person cant be 09","d99b0000":"Applying log transform to all the features","7cacbd97":"Now we will see how much are our numeric columns skewed, and will try to remove the skewness","2817cdcb":"This person has replayed Q19 as 3. That means he has played video games. So it is rarely possible for his age to be 88 or 82. So we have 38 and 22. Also considering que17, i think it is 38.","7982efa2":"the null values in country column can be filled with \"None\".","38124806":"### Treating object race columns","8d3c8f8d":"This boy seems like 15","097f05c4":"1999 and 1997 seem like birth year. We can convert it to their age. Data was collected between 2015 and 2018. So thier age must be between 1) for 1999: 16 - 19 2) for 1997: 18-21","7da5abc4":"There are some weird values, like 38822, 1997, 722, 545, 123, 374, 1999, 809, 116","d88f0897":"These features are in pixels. Javascript returns screen width and screen height in pixels","9b418a4e":"### Wrong Race Feature","01bcb891":"There are 24 countries which are in train but not in test. This countries will create a problem while label encoding. So what we can do is encode the train as it is. Then encode the test countries which are in train with the same mapping and the remaining countries with an exclusively different mapping","c3ed4aee":"Firstly replacing all string 0's and 1's into int","dddcca47":"### Major Column","c5241a73":"Lets make a column defined as TIPI score. Which sums all values of TIPI score","0d59c223":"No data to distinguish between 33 and 36. Putting it on 33","af73e622":"### Countries","1ff0d96d":"As we can see, the max time is nearly 75k minutes, i.e. 125 hours. That is technically not possible. Avg time to fill a survey acc. to internet is nearly 20 min. Consider the worst case scenerio to be 120 mins to fill an online survey, we need to clip these values. For every row having total time above 120, we will clip them to the mean of the remaining rows.","31f36847":"### Filling Null Values","ee26cd63":"first taking value 38822. It can possibly be something from age 38, 88, 82, 22","1ae9bf4b":"### Checking the TIPI columns","e63ab82b":"### Reviewing more columns","94f97b50":"As we can see arab,asian,black and white columns are object columns, instead they should have been int. This is becuase many people have filled their major subjects in this columns. So we have to add this entries to the major list and replace this values with either 0 or 1 appropriatly","a3367744":"We will just replace all absurd values with the most frequennt value, i.e. 2","2e496478":"### EDA","ce0c7f6f":"Lets substitute both 1999 and 1997 with 18 year of age, as its the most common one","3903b467":"We can make a new feature known as total time (in minutes) which will technically be sum of all the times","47738ddf":"We will divide all countries into their continents. This would help to retain the demographic based relations","c481fb48":"Many people have filled their majors in race column instead of major column. So if race_arab,asain,black and white does not contain any major subjects, then we can fill the train major with none.","9fcbe2c1":"This is a survey data where people were asked different questions and were asked to rate them as \"Nerdy\" on the scale of 0-7.","98015d49":"If some person has high values for each of each of questions from q1 to q26, then there is a high change he is nerdy. so we can make a feature which sums values in each of column and divides it by 130 (= 26 * 5), coz its the maximum score that we can get.","24152ca8":"Seeing that he has played many video games, this guys seems to be 37","cf410593":"If we observe each of the column properly, whoever people who have put any value except 0 or 1 in any race column, their nerdiness rating is either 0 or 1. This detail can be very useful. We can make a new column, \"wrong_race\" and fill it with 1 for people who have entered incorrect value of race (i.e, anything except 0 or 1). Also, only those rows in which race_arab is wrong, have other races also wrong, i.e., if some rows has value of race_arab to be 0 or 1, then the rest races are also either 0 or 1","83832123":" This way, we have preprocessed our data and also made some new columns that would help our model to find a better interaction between features and generalize well. By using the this preprocessed data and a simple untuned XGB model, I got a private score of 1.158, which is a very good score just by Feature Generation and EDA. I will also upload another notebook after this where I have used Stacking of various models to further improve the score to 1.101.","ba5382ed":"### FamilySize","46559e5c":"race_white column in train contains a value G. Replacing it with 0","8afb84ef":"### Checking some more columns","c5134a48":"we can fill race_asain null values with 0 as the person has filled 1 in other races","ce24b1f1":"As we can see, majority people from North America are more nerdy than others","5905550c":"Considering the education, this guy seems like 23 years","6acba7e2":"### Q1- Q26 columns (Que Score)","a16fa4ed":"### Age column","4b972b23":"We can create a feature known as no_major for people with no major. This will help our model to consider information from this column even if we remove it. no_major = 1 means major is NONE. ","fa089c5e":"This guy seems to be 72 by his data","6d0aa33a":"As we can see, majority values in race arab, asian and black are 0. replacing the incorrect values with 0 in there columns"}}