{"cell_type":{"9cde8069":"code","d9754de4":"code","e6a9a709":"code","82975d52":"code","321c6c1a":"code","de0fb933":"code","75c3cce2":"code","b8163ced":"code","7e71e88d":"code","4f8a0992":"code","0635b642":"code","2048134b":"code","12b46fae":"code","61c3fb76":"code","6d0d5749":"code","fbb31cfb":"code","81d6897f":"code","75ec5170":"code","0fc93493":"code","37fa8038":"code","de2defb8":"code","6b2381da":"code","5cff821c":"code","9955cf6b":"code","f2c12f00":"code","67d2f5f2":"code","954fea17":"code","57b96338":"code","1fb0bcd4":"code","07501e76":"code","f9e9f198":"code","280f44b7":"code","3a725a09":"code","9d4c6630":"code","311daea0":"code","7255514f":"code","97400183":"code","fc4d9b79":"code","552d6689":"code","962cb7b8":"code","4c00df74":"code","a14ae45f":"markdown","917a45a2":"markdown","a6523cec":"markdown","d72de135":"markdown","112cf671":"markdown","8f070591":"markdown","a483db90":"markdown","a98d4400":"markdown","c9574b27":"markdown","982ed552":"markdown","717b0212":"markdown","059d097b":"markdown","3e9519ad":"markdown","c777ca4f":"markdown","7cb0a8be":"markdown","17094944":"markdown","0bcba935":"markdown","697f3b39":"markdown","aa841637":"markdown","f946cd24":"markdown"},"source":{"9cde8069":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport sys\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\n\nprint('Python: {}'.format(sys.version))\nprint('numpy: {}'.format(np.__version__))\nprint('pandas: {}'.format(pd.__version__))\nprint('matplotlib: {}'.format(matplotlib.__version__))\nprint('seaborn: {}'.format(sns.__version__))\nprint('sklearn: {}'.format(sklearn.__version__))\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nprint(\"\\n\\n============== [ DataFrames ] ==================\\n\\n\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9754de4":"def warns(*args,**kwargs): pass\nwarnings.warn=warns","e6a9a709":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(\"Train Shape: \", df_train.shape, \"\\nTest Shape: \", df_test.shape)","82975d52":"df_train.head()","321c6c1a":"sns.distplot(df_train['SalePrice'])\nsns.displot(df_train['SalePrice'])","de0fb933":"maxPrice = df_train['SalePrice'].max()\nprint(\"Maximum Sale Price: \", maxPrice)","75c3cce2":"data = pd.concat([df_train['SalePrice'], df_train['OverallQual']], axis = 1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x = df_train['OverallQual'], y='SalePrice', data=data)\nfig.axis(ymin = 0, ymax = maxPrice)","b8163ced":"# Function for Checking Null Values in given DataFrames\ndef get_missing_values(df):\n    total = df.isnull().sum().sort_values(ascending=False)\n    percent = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return (missing_data)    ","7e71e88d":"# Check Train Missing Values\ntrain_missing_values = get_missing_values(df_train)\ntrain_missing_values.head(20)","4f8a0992":"# Check Test Missing Values\ntest_missing_values = get_missing_values(df_test)\ntest_missing_values.head(20)","0635b642":"# Visualizing the Train DataFerame\nfig, ax = plt.subplots(figsize=(12,6)) # figsize in inches\nplt.title(\"Missing Value in Train DataFrame\", fontsize = 18)\nsns.heatmap(df_train.isnull())","2048134b":"# Visualizing the Test DataFerame\nfig, ax = plt.subplots(figsize=(12,6)) # figsize in inches\nplt.title(\"Missing Value in Test DataFrame\", fontsize = 18)\nsns.heatmap(df_test.isnull())","12b46fae":"# Function for Fill Null Values and\n# Encoding of Categorical Values\n\nle = LabelEncoder()\n\ndtypeVal = [\"object\", \"int64\", \"float64\" ]\ndef fillna_encoder(df):\n    for x in dtypeVal:\n        if x == \"object\":\n            obj_df = df.select_dtypes(include = [x]).copy().reset_index()\n            obj_df.fillna(\"Not Listed\", inplace = True)\n            obj_df = obj_df.astype(str)\n            obj_df = obj_df.apply(le.fit_transform)\n            \n        elif x == \"int64\":\n            int_df = df.select_dtypes(include = [x]).copy().reset_index()\n            int_df.fillna(0, inplace = True)\n            \n        elif x == \"float64\":\n            float_df = df.select_dtypes(include = [x]).copy().reset_index()\n            float_df.fillna(0, inplace = True)\n    \n    # Merging of all dataframe\n    all_df = obj_df.merge(int_df, on='index').merge(float_df, on='index')\n    return(all_df)","61c3fb76":"# Filling Null and Encoding Train Categorical Values\nxtrain = fillna_encoder(df_train)\nxtrain","6d0d5749":"# Filling Null and Encoding Train Categorical Values\nxtest = fillna_encoder(df_test)\nxtest","fbb31cfb":"# Verify the Null\/Missing Values by Visualizing the Train DataFerame\nfig, ax = plt.subplots(figsize=(12,6)) # figsize in inches\nplt.title(\"Missing Value in Train DataFrame\", fontsize = 18)\nsns.heatmap(xtrain.isnull())","81d6897f":"# Verify the Null\/Missing Values by Visualizing the Test DataFerame\nfig, ax = plt.subplots(figsize=(12,6)) # figsize in inches\nplt.title(\"Missing Value in Test DataFrame\", fontsize = 18)\nsns.heatmap(xtest.isnull())","75ec5170":"# Verifying the Null\/Missing Values in Train and Test DataFrame\nprint(\"Train DataFrame Null Values: \", xtrain.isnull().sum().sum(), \"\\nTest DataFrame Null Values: \", xtest.isnull().sum().sum() )","0fc93493":"# Define X, y and X_test\nid = xtest.Id\ny = xtrain['SalePrice'].values\nX = xtrain.drop(['Id', 'index', 'SalePrice'], axis=1)\n\n# For test dataframe Prediction\nX_test = xtest.drop(['Id', 'index'], axis=1)","37fa8038":"from sklearn.model_selection import train_test_split\n\n# Split into Validation and training data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1)\n\nX_train.shape, X_val.shape, y_train.shape, y_val.shape, X_test.shape","de2defb8":"# Scaler Tranformation\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# Define Scaler\nscaler = StandardScaler().fit(X_train)\n\n# Scale the Train Set\nX_train = scaler.transform(X_train)\n# Scale the Validation Set\nX_val = scaler.transform(X_val)\n\n# Scale the Test Set\nX_test = scaler.transform(X_test)","6b2381da":"from sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n\nmodel = AdaBoostRegressor(base_estimator=DecisionTreeRegressor(max_depth=15), random_state=1, n_estimators=1000, loss='exponential').fit(X_train, y_train)\nprint(\"Model Score: \",model.score(X_train, y_train))","5cff821c":"y_pred = model.predict(X_val)\ny_pred = y_pred.astype(int)\nprint(\"Validation Set Score: \",model.score(X_val, y_val))","9955cf6b":"# Model Error Evaluation\nfrom sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_val, y_pred, squared=False)\nprint(\"Root Mean Suqared Error: \", rmse)","f2c12f00":"final_pred = model.predict(X_test)\nfinal_pred[final_pred < 0] = 0\nfinal_pred = final_pred.astype(int)\nfinal_pred","67d2f5f2":"final_df = pd.DataFrame({'Id': id, 'SalePrice':final_pred})\nfinal_df","954fea17":"actual_price = pd.DataFrame(y, columns=['Actual'])\nprint(\"Pridected SalePrice Length: \", len(final_pred))\nprint(\"Actual SalePrice Length: \", len(actual_price))","57b96338":"# Create DataFrame to Visualization\ndf_visual = pd.DataFrame(final_pred, columns=['Predict'])\ndf_visual = pd.concat([actual_price, df_visual], axis=1)\ndf_visual = df_visual.drop(df_visual.index[1459])\ndf_visual","1fb0bcd4":"plt.subplots(figsize=(15, 8))\nplt.plot(df_visual[\"Actual\"])\nplt.show()","07501e76":"plt.subplots(figsize=(15, 8))\nplt.plot(df_visual[\"Predict\"], color='green')\nplt.show()","f9e9f198":"# Visualization\ndf_visual.plot(kind='line', figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='blue')\nplt.grid(which='minor', linestyle='-', linewidth='0.5', color='green')\nplt.show()\n","280f44b7":"plt.subplots(figsize=(14, 8))\npoints = np.array(df_visual)\nx_ax = df_visual['Actual']\ny_ax = df_visual['Predict']\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predict\")\nplt.scatter(x_ax, y_ax, color=\"#003F72\")\nplt.show()","3a725a09":"# Create DataFrame to Visualization with taking Log\ndf_visual2 = pd.DataFrame(np.log1p(df_visual[\"Predict\"]), columns=['Predict'])\ndf_visual2 = pd.concat([np.log1p(df_visual[\"Actual\"]), df_visual2], axis=1)\ndf_visual2","9d4c6630":"plt.subplots(figsize=(15, 8))\nplt.plot(df_visual2[\"Actual\"])\nplt.show()","311daea0":"plt.subplots(figsize=(15, 8))\nplt.plot(df_visual2[\"Predict\"], color='green')\nplt.show()","7255514f":"# Visualization\ndf_visual2.plot(kind='line', figsize=(15,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='blue')\nplt.grid(which='minor', linestyle='-', linewidth='0.5', color='green')\nplt.show()\n","97400183":"plt.subplots(figsize=(14, 8))\npoints = np.array(df_visual2)\nx_ax = df_visual2['Actual']\ny_ax = df_visual2['Predict']\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predict\")\nplt.scatter(x_ax, y_ax, color=\"#003F72\")\nplt.show()","fc4d9b79":"final_df.to_csv('myHousePrice.csv', index=False)\nprint('Submitted Successfully')","552d6689":"print(\"\\n\\n============== [ DataFrames ] ==================\\n\\n\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","962cb7b8":"submission = pd.read_csv('\/kaggle\/working\/myHousePrice.csv')\nprint(\"Submission File Shape: \", submission.shape)","4c00df74":"submission","a14ae45f":"### **After Taking Logarithm**\nActual and Predict SalePrice","917a45a2":"# **Load Dataset**","a6523cec":"### **Read Output Submission**","d72de135":"### **Visualization of Actual and Predict Sale Price**","112cf671":"## **Prediction on Validation Set**","8f070591":"## **Define Model**","a483db90":"### **Export CSV File for Submission**","a98d4400":"### **Filling Null\/Missing Data and Encoding the Categorical Values**","c9574b27":"#### **Visualizing the Missing\/Null Vlues**","982ed552":"### **Missing & Null Data Handling**","717b0212":"### **Define X, y and X_test**","059d097b":"### **Create DataFrame for Submission**","3e9519ad":"### **Train Data**","c777ca4f":"### **Spliting for Training and Validation**","7cb0a8be":"### **Sale Price Visualization**","17094944":"### **Model Prediction**","0bcba935":"### **Scaler Tranformation**","697f3b39":"#### **Sure All Praises for Almighty Allah**\n### Good Luck","aa841637":"### **Test Data**","f946cd24":"### **Evaluation**"}}