{"cell_type":{"c19c619d":"code","fdb5819c":"code","00d7898b":"code","35b75ec5":"code","50cd154f":"code","e2ef731b":"code","934caafa":"code","c5693101":"code","9308e480":"code","cf70fac5":"code","73467451":"code","3c438734":"code","6015269c":"code","8bbe3ea3":"code","406229ef":"code","01b153e4":"code","82d3005a":"code","aaf4de5a":"code","c811df62":"code","9ee352de":"code","c34b9c01":"code","63a91e74":"code","0fafc4bc":"code","1135030d":"code","67973cde":"code","1e84a03f":"code","ba662312":"code","9268f504":"code","16c3e0b7":"code","3692ce40":"code","6d1e452f":"code","986fd8b0":"code","0f213e1b":"code","2038fa5d":"code","6c6b1b6e":"markdown","5bdeb90f":"markdown","be79fc33":"markdown","e34c9228":"markdown","d1dbc7e1":"markdown","a66fed83":"markdown","87dc7cae":"markdown","e5e22d63":"markdown","bd0266e8":"markdown","affa9dec":"markdown","a1f5e75d":"markdown","eaf24629":"markdown","e862f742":"markdown","4d3c8945":"markdown","10ee40a3":"markdown","5e5a6410":"markdown","4925bda1":"markdown","8b9c0027":"markdown","9fa86474":"markdown","7ddc974d":"markdown","9ecd486d":"markdown","1b2f655b":"markdown","0114e89f":"markdown","6c596bf9":"markdown","0bc8b2a3":"markdown","ff0f166b":"markdown","686d79b9":"markdown","aa2636b3":"markdown","4dcc07f8":"markdown"},"source":{"c19c619d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom scipy.integrate import odeint\nfrom statistics import mean","fdb5819c":"corona=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/train.csv\",delimiter=\",\")","00d7898b":"corona.head()","35b75ec5":"corona['Date'] = pd.to_datetime(corona['Date'],format='%Y-%m-%d')","50cd154f":"max_date = max(corona['Date'])\ncorona[\"Time\"] = max_date - corona['Date']","e2ef731b":"corona.head()","934caafa":"corona.shape","c5693101":"corona.Fatalities.describe()","9308e480":"(corona[corona.Fatalities>15]).count()","cf70fac5":"corona.isnull().sum()","73467451":"top_country=corona[\"Country\/Region\"].value_counts().head(20)\ntop_country","3c438734":"aux1 = corona.groupby(\"Date\").ConfirmedCases.sum()\naux2 = corona.groupby(\"Date\").Fatalities.sum()\n\ny1 = aux1\nx1 = aux1.index\n\ny2 = aux2\nx2 = aux2.index\n\nplt.figure(figsize=(15,8))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.plot(x1,y1,label=\"Total Confirmed Cases\")\nplt.plot(x2,y2,label=\"Total Fatalities\")\n\nplt.legend(fontsize=10)\nplt.ylabel(\"Cases\",fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.title('Global confirmed cases and fatalities',fontsize=24)\nplt.xticks(rotation=90)\nplt.show()","6015269c":"china_c = corona[corona[\"Country\/Region\"]==\"China\"].groupby(\"Date\").ConfirmedCases.sum()\nchina_f = corona[corona[\"Country\/Region\"]==\"China\"].groupby(\"Date\").Fatalities.sum()","8bbe3ea3":"y1 = china_c\nx1 = china_c.index\n\ny2 = china_f\nx2 = china_f.index\n\nplt.figure(figsize=(15,5))\n\n\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.plot(x1,y1,label=\"Confirmed Cases in China\")\nplt.plot(x2,y2,label=\"Fatalities in China\")\n\nplt.legend(fontsize=10)\nplt.ylabel(\"Cases\",fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.title('China confirmed cases and fatalities',fontsize=24)\nplt.xticks(rotation=90)\n\n\n\n\nplt.show()","406229ef":"without_c = corona[corona[\"Country\/Region\"]!=\"China\"].groupby(\"Date\").ConfirmedCases.sum()\nwithout_f = corona[corona[\"Country\/Region\"]!=\"China\"].groupby(\"Date\").Fatalities.sum()","01b153e4":"y1 = without_c\nx1 = without_c.index\n\ny2 = without_f\nx2 = without_f.index\n\nplt.figure(figsize=(15,8))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.plot(x1,y1,label=\"Confirmed Cases in China\")\nplt.plot(x2,y2,label=\"Fatalities in China\")\n\nplt.legend(fontsize=10)\nplt.ylabel(\"Cases\",fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.title('Global (without China) confirmed cases and fatalities',fontsize=24)\nplt.xticks(rotation=90)\nplt.show()","82d3005a":"spain_c = corona[corona[\"Country\/Region\"]==\"Spain\"].groupby(\"Date\").ConfirmedCases.sum()\nspain_f = corona[corona[\"Country\/Region\"]==\"Spain\"].groupby(\"Date\").Fatalities.sum()\n\nitaly_c = corona[corona[\"Country\/Region\"]==\"Italy\"].groupby(\"Date\").ConfirmedCases.sum()\nitaly_f = corona[corona[\"Country\/Region\"]==\"Italy\"].groupby(\"Date\").Fatalities.sum()\n\ngermany_c = corona[corona[\"Country\/Region\"]==\"Germany\"].groupby(\"Date\").ConfirmedCases.sum()\ngermany_f = corona[corona[\"Country\/Region\"]==\"Germany\"].groupby(\"Date\").Fatalities.sum()\n","aaf4de5a":"y1 = spain_c\nx1 = spain_c.index\n\ny2 = italy_c\nx2 = italy_c.index\n\ny3 = germany_c\nx3 = germany_c.index\n\n\nplt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\n\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.plot(x1,y1,label=\"Spain\")\nplt.plot(x2,y2,label=\"Italy\")\nplt.plot(x3,y3,label=\"Germany\")\n\n\nplt.legend(fontsize=10)\nplt.ylabel(\"Cases\",fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.title('Confirmed cases',fontsize=24)\nplt.xticks(rotation=90)\n\n\ny11 = spain_f\nx11 = spain_f.index\n\ny22 = italy_f\nx22 = italy_f.index\n\ny33 = germany_f\nx33 = germany_f.index\n\nplt.subplot(1,2,2)\n\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.plot(x11,y11,label=\"Spain\")\nplt.plot(x22,y22,label=\"Italy\")\nplt.plot(x33,y33,label=\"Germany\")\n\n\nplt.legend(fontsize=10)\nplt.ylabel(\"Cases\",fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.title('Fatalities',fontsize=24)\nplt.xticks(rotation=90)\nplt.show()\n\n","c811df62":"updated = corona[corona[\"Date\"] == max(corona[\"Date\"])]\nupdated_f = updated.groupby(\"Country\/Region\")[\"ConfirmedCases\",\"Fatalities\"].sum().reset_index()","9ee352de":"import folium\nfrom folium.plugins import HeatMap\nm=folium.Map([30.5928,114.3055],zoom_start=3)\nHeatMap(corona[['Lat','Long']].dropna(),radius=8,gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'}).add_to(m)\ndisplay(m)","c34b9c01":"import plotly.express as px\n\nfig = px.choropleth(updated_f,locations='Country\/Region', color='ConfirmedCases',\n                    locationmode='country names', hover_name=\"Country\/Region\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 60000),\n                           labels={'Country\/Region':'ConfirmedCases'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","63a91e74":"test = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\", delimiter=\",\")\ntest.head()","0fafc4bc":"test[\"Date\"] = pd.to_datetime(test['Date'],format='%Y-%m-%d')","1135030d":"max(test.Date.unique())","67973cde":"X2 = np.arange(len(corona.groupby(\"Date\")),len(corona.groupby(\"Date\"))+15).reshape(-1,1)","1e84a03f":"degrees = [1,2,3]\n\nX = np.arange(0, len(corona.groupby(\"Date\"))).reshape(-1,1)\ny = corona.groupby(\"Date\").ConfirmedCases.sum().values\n\n# Polynomial Regression-nth order\nplt.figure(figsize=(15,10))\nplt.scatter(corona.groupby(\"Date\").ConfirmedCases.sum().index, y, s=10, alpha=0.3)\n\nfor degree in degrees:\n    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())\n    model.fit(X, y)\n    y_plot = model.predict(X)\n    score = model.score(X, y)\n    plt.plot(corona.groupby(\"Date\").ConfirmedCases.sum().index, y_plot, label=\"n = %d\" % degree + '; $R^2$: %.2f' % score)\n    \n    \nplt.plot(corona.groupby(\"Date\").ConfirmedCases.sum().index, corona.groupby(\"Date\").ConfirmedCases.sum().values, label=\"Confirmed cases\")\n    \nplt.legend(loc='lower right')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Cases\")\nplt.title(\"Confirmed cases\")\nplt.xlim(min(corona.groupby(\"Date\").ConfirmedCases.sum().index), max(corona.groupby(\"Date\").ConfirmedCases.sum().index))\nplt.xticks(fontsize=14,rotation=90)\nplt.show()","ba662312":"degree = 2\n\nX = np.arange(0, len(corona.groupby(\"Date\"))).reshape(-1,1)\ny = corona.groupby(\"Date\").ConfirmedCases.sum().values\n\n# Polynomial Regression-2nd order\nplt.figure(figsize=(15,10))\nplt.scatter(X, y, s=10, alpha=0.3)\n\n\nmodel = make_pipeline(PolynomialFeatures(degree), LinearRegression())\nmodel.fit(X, y)\ny_plot = model.predict(X)\nscore = model.score(X, y)\nplt.plot(X, y_plot, label=\"model, n = %d\" % degree + '; $R^2$: %.2f' % score)\n    \ny_plot2 = model.predict(X2)\nplt.plot(X2, y_plot2, label=\"Predictions\")\n\n    \nplt.plot(X, corona.groupby(\"Date\").ConfirmedCases.sum().values, label=\"Confirmed cases\")\n    \n\nplt.legend(loc='lower right')\nplt.xlabel(\"Days\")\nplt.ylabel(\"Cases\")\nplt.title(\"Confirmed cases\")\nplt.show()","9268f504":"# # Total population, N.\nN = 47000000\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 ,Tr = 1, 3.5, 10\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n# Contact rate, beta, and mean recovery rate, gamma, (in 1\/days).\nbeta, gamma = R0\/Tr, 1.\/Tr\n# A grid of time points (in days)\nt = np.linspace(0, 120, 120)\n\n# The SIR model differential equations.\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n# Initial conditions vector\ny0 = S0, I0, R0\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, beta, gamma))\nS, I, R = ret.T\n\n# Plot the data on three separate curves for S(t), I(t) and R(t)\nfig = plt.figure(figsize=(15,5),facecolor='w')\nax = fig.add_subplot(111, axisbelow=True)\nax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')\nax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')\nax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered with immunity')\nax.set_xlabel('Time \/days')\nax.set_ylabel('Population')\nax.set_ylim(0,47000000)\nax.yaxis.set_tick_params(length=0)\nax.xaxis.set_tick_params(length=0)\nax.grid(b=True, which='major', c='w', lw=2, ls='-')\nlegend = ax.legend()\nlegend.get_frame().set_alpha(0.5)\nfor spine in ('top', 'right', 'bottom', 'left'):\n    ax.spines[spine].set_visible(False)\nplt.show()","16c3e0b7":"corona=corona[(corona[\"Date\"]<\"2020-03-12\")]","3692ce40":"degree=2\nscores=[]\n\nfor country in corona['Country\/Region'].unique():\n    \n    country_train = corona[corona['Country\/Region']==country]\n    country_test = test[test['Country\/Region']==country]\n        \n    X = np.array(range(len(country_train))).reshape((-1,1))\n    y = country_train['ConfirmedCases']\n  \n\n    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())\n    model.fit(X, y)\n    \n    print(\"Country:\", country)\n    score = model.score(X, y)\n    print(\"Score:\",score)\n        \n    predict_x = (np.array(range(len(country_test)))+51).reshape((-1,1))\n    test.loc[test['Country\/Region']==country,'ConfirmedCases'] = model.predict(predict_x)\n    \n    scores.append(score)\n    ","6d1e452f":"mean(scores)","986fd8b0":"degree=2\nscores=[]\n\nfor country in corona['Country\/Region'].unique():\n    \n    country_train = corona[corona['Country\/Region']==country]\n    country_test = test[test['Country\/Region']==country]\n        \n    X = np.array(range(len(country_train))).reshape((-1,1))\n    y = country_train['Fatalities']\n   \n\n    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())\n    model.fit(X, y)\n    \n    print(\"Country:\", country)\n    score = model.score(X, y)\n    print(\"Score:\",score)\n        \n    predict_x = (np.array(range(len(country_test)))+51).reshape((-1,1))\n    test.loc[test['Country\/Region']==country,'Fatalities'] = model.predict(predict_x)\n    \n    scores.append(score)","0f213e1b":"mean(scores)","2038fa5d":"sol = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/submission.csv')\nsol['Fatalities'] = test['Fatalities'].round(0).astype(int)\nsol['ConfirmedCases'] = test['ConfirmedCases'].round(0).astype(int)\nsol.to_csv('submission.csv',index=False)","6c6b1b6e":"> # General analysis","5bdeb90f":"### SIR model for Spanish population","be79fc33":"### Polynomial model by country","e34c9228":"> # Introduction","d1dbc7e1":"Let\u00b4s plot know the global predictions for the next 15 days with a polynomial model of 2nd degree.","a66fed83":"Now, we will create the graphic with all countries but China.","87dc7cae":"![image.png](attachment:image.png)","e5e22d63":"Finally, we will save the results obtained. ","bd0266e8":"> ### Load the data","affa9dec":"For more information, please ckeck the link below:\n\n[https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SIR_model_is_dynamic_in_three_senses](http:\/\/)","a1f5e75d":">  ### China","eaf24629":"![image.png](attachment:image.png)","e862f742":"> ### Numbers of confirmed cases by countries","4d3c8945":"First, let\u00b4s try to create a polynomial model with different degress and plot the result.\n\nIn my opinion it will not be the best solution due to the different situation of each country: it depends on measures adopted, population, location, date of the first person infected... The best solution would be to create different model for every country, it would be more accurate.","10ee40a3":"In this notebook, we will create some graphics and anylize the global situation related to COVID-19. \nWe will also create a SIR model for a particular country and different polynomial models.\n\nWe will find a training and test dataset where the training data contains information up to March 18, 2020 and the test will be the data to be predicted (predictions till April 23, 2020). There is a week of overlap between training and predicted data, from March 12 to March 22, 2020.","5e5a6410":"Next, we will represent some of the main plots of the global values obtained from the beginning of the pandemic and particular countries as well.\n\nIt is important to note that the chart trends are very different based on the country. This is because the measures taken by each country have been different and also not at the same time. \n\nAs we said, China was the epicenter of the pandemic, and having a look to its graphic, the chart trend is flattening, which means infections and fatalities are stabilizing. On the other hand, any of the European countries is now struggling with confirmed cases and deaths, having an exponential growth these days. \n","4925bda1":"### Global anaylisis without China","8b9c0027":"### Regression predicting the next 15 days","9fa86474":"> # Predictions","7ddc974d":"First, we will import the training data and do a general anaylisis of them.","9ecd486d":">  ### Some European countries","1b2f655b":"We will do the same representation but for China, which was Coronavirus pandemic epicenter.","0114e89f":"> ### Global Heatmap","6c596bf9":"We can create a model for the Spanish population and see how the curve changes when we modify the parameters. As said before, the model is really sensitive to the different parameters so it is not the best solution for our predictions. \n","0bc8b2a3":"### Global polynomial models ","ff0f166b":"We will represent the confirned cases and fatalities in the world from January 22 to March 22, 2020.","686d79b9":"The SIR model is a mathematical model of infectious disease where the population is divided by 3 different groups with a transition of the person\/population between these groups: \n\n![image.png](attachment:image.png)\n\nSIR model depends on different sensitive parameters: R0, \u03b2 , \u03b3 and N (population). The basic reproduction number, R0, is defined as the expected number of secondary cases produced by a single (typical) infection in a completely susceptible population. \u03b2 is the average number of contacts per person per time, multiplied by the probability of disease transmission in a contact between a susceptible and an infectious subject. \u03b3 is the rate of recovered or dead, that is, number of recovered or dead during one day divided by the total number of infected on that same day. \n\n\n\n\n\n","aa2636b3":"Let\u00b4s try to create model for each country individually. First, we will create a model for the confrimed cases and then for deaths. We will model a polynomial model of 2nd dregree for both targets. \n\nSince the dates between March 12 and March 22 are included in the test dataset, that week will be removed from the train dataset.","4dcc07f8":"Finally, we will create the graphics for Spain, Italy and Germany, three of the countries with the highest rate of infection."}}