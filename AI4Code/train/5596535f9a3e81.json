{"cell_type":{"d0e9fb52":"code","423da1ea":"code","9946a274":"code","af610c62":"code","8c200d9f":"code","26307e63":"code","f2105b43":"code","4f0f33aa":"code","af9f286d":"code","25686185":"code","06daa34d":"code","803418b0":"code","484df25f":"code","2f85b225":"code","f13c3a21":"code","06c09e6c":"code","6043c128":"code","cb04d77c":"code","ae8c00bb":"code","b5bd9e36":"code","142c58ee":"code","579f911f":"code","6e1c2e86":"code","17fb057b":"code","34527e61":"code","fd319341":"code","16762822":"code","2d3f73ee":"code","8aad6989":"code","ae529133":"code","647dea99":"code","3bb74ca9":"code","7aa18ab9":"code","4b0d8558":"code","293103e4":"code","30e9cfdc":"code","7e7de02e":"code","f24a2853":"code","6a595161":"markdown","822ab915":"markdown","7267ee1f":"markdown","65a8b108":"markdown","ef226c5f":"markdown","76f19f80":"markdown","dbd0a4f3":"markdown","13cac83a":"markdown","c5b2e6b9":"markdown","798f2acf":"markdown","31f03122":"markdown","aa387cd9":"markdown","f190709d":"markdown","ab8a9989":"markdown","14ff60e2":"markdown","78bd3c75":"markdown"},"source":{"d0e9fb52":"# This Python 3 environment comes with many helpful analytics libraries installed\n\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","423da1ea":"df = pd.read_csv('\/kaggle\/input\/fifathebest\/FIFATheBest.csv')\ndf.head()","9946a274":"df.info()","af610c62":"df.columns = df.columns.str.lower()","8c200d9f":"df.country.sort_values().unique()","26307e63":"len(df.country.unique())","f2105b43":"Oceania = ['Australia','New Zealand','Papua New Guinea','American Samoa','Solomon Islands',\n          'Tonga','Vanuatu','New Caledonia','Tahiti']\nSouthAmerica = ['Argentina','Bolivia','Brazil','Chile','Colombia','Ecuador','Guyana','Paraguay',\n                'Peru','Suriname','Uruguay','Venezuela']\nNorthAmerica = ['Barbados','Bermuda','British Virgin Islands','Canada','Cayman Islands','Costa Rica',\n               'Cuba','Curacao','Dominica', 'Dominican Republic','El Salvador','Grenada','Guatemala',\n               'Haiti','Honduras','Jamaica','Mexico','Panama','Puerto Rico','St Kitts and Nevis',\n               'St Lucia', 'St Vincent and the Grenadines', 'St. Lucia','Trinidad and Tobago',\n                'Turks and Caicos Islands','US Virgin Islands','USA','Nicaragua','Bahamas','Guam']\nEurope = ['Albania','Andorra','Austria','Belarus', 'Belgium','Bosnia and Herzegovina','Bulgaria',\n        'Croatia','Czech Republic','Denmark','Estonia','Finland','France','Germany','Greece',\n         'Hungary', 'Iceland','Italy','Republic of Ireland','Kosovo','Latvia','Liechtenstein',\n          'Lithuania', 'Luxembourg','Malta','Moldova','Montenegro','Netherlands','Norway',\n         'Poland','Portugal','Romania','San Marino','Serbia','Slovakia', 'Slovenia','Spain','Sweden',\n          'Switzerland','Ukraine','Wales','England','Scotland','Northern Ireland','FYR Macedonia',\n         'Faroe Islands','North Macedonia','Gibraltar']\nAfrica = ['Algeria','Angola','Benin','Botswana','Burkina Faso','Burundi','Cameroon',\n          'Cape Verde Islands','Central African Republic','Chad','Comoros', 'Congo', 'Congo DR',\n         \"C\u00f4te d'Ivoire\",'Djibouti','Egypt','Equitorial Guinea', 'Eritrea','Ethiopia','Gabon',\n         'Gambia','Ghana','Guinea-Bissau','Kenya','Lesotho','Lybia','Madagascar', 'Malawi',\n         'Mali','Mauritania', 'Mauritius','Morocco', 'Mozambique','Namibia','Niger','Nigeria',\n         'Rwanda','Senegal','Sierra Leone','Somalia','South Africa', 'South Sudan','Sudan',\n         'Swaziland','Tanzania','Togo','Tunisia','Uganda','Zambia','Zimbabwe','Eswatini']\nAsia = ['Afghanistan','Armenia','Azerbaijan','Bahrain', 'Bangladesh','Bhutan','Brunei Darussalam',\n       'Cambodia','China PR','Chinese Taipei','Georgia','India','Indonesia','IR Iran','Iran','Israel',\n       'Japan','Kazakhstan', 'Korea DPR', 'Korea Republic','Kyrgyz Republic','Laos','Lebanon',\n       'Malaysia', 'Maldives','Mongolia','Myanmar','Nepal','Oman', 'Pakistan','Philippines',\n       'Qatar','Russia','Saudi Arabia','Singapore','Tajikistan','Thailand','Turkey','Turkmenistan',\n       'United Arab Emirates','Uzbekistan','Vietnam','Yemen','Kuwait','Macau','Syria','Cyprus',\n       'Hong Kong','Jordan','Maleysia','Iraq']\nlen(Oceania) + len(Asia) + len(Africa) + len(Europe) + len(SouthAmerica) + len(NorthAmerica)","4f0f33aa":"def continent_mapping(row):\n    if row in Asia:\n        return 'Asia'\n    elif row in Africa:\n        return 'Africa'\n    elif row in NorthAmerica:\n        return 'North America'\n    elif row in SouthAmerica:\n        return 'South America'\n    elif row in Oceania:\n        return 'Oceania'\n    elif row in Europe:\n        return 'Europe'\n    else:\n        return 'Unknown'\n\ndf['continent'] = df.country.apply(continent_mapping)","af9f286d":"df.sample(5)","25686185":"first = df['first'].value_counts()\nsecond = df.second.value_counts()\nthird = df.third.value_counts()","06daa34d":"player_wise = pd.DataFrame([first, second, third])\nplayer_wise","803418b0":"total = pd.DataFrame(player_wise.sum())\ntotal.transpose()","484df25f":"final = player_wise.append(total.transpose())\nfinal","2f85b225":"final.index","f13c3a21":"as_list = final.index.to_list()\nas_list","06c09e6c":"idx = as_list.index(0) # Meaning that pick the index value of the row with '0' as index\nidx","6043c128":"as_list[idx] = 'total' # basically as_list[3] = 'total'\nas_list","cb04d77c":"final.index = as_list","ae8c00bb":"final = final.sort_values(by='total',axis=1, ascending=False)\nfinal #GREAT!","b5bd9e36":"# You could very well transpose this if you like\nfinal.transpose()","142c58ee":"df[df.country == 'India']","579f911f":"df[df.country == 'Australia']","6e1c2e86":"df[df.country == 'Armenia']","17fb057b":"asia = df[df['continent'] == 'Asia']\nasia_first = asia['first'].value_counts()\nasia_second = asia.second.value_counts()\nasia_third = asia.third.value_counts()\nasia_player_wise = pd.DataFrame([asia_first, asia_second, asia_third])\nasia_player_wise","34527e61":"asia_total = pd.DataFrame(asia_player_wise.sum())\nasia_final = asia_player_wise.append(asia_total.transpose())\nasia_as_list = asia_final.index.to_list()\nasia_as_list[idx] = 'total' # idx has '3' already saved from the last time\nasia_final.index = asia_as_list\n\nasia_final.fillna(0, inplace=True)\nasia_final = asia_final.astype(int)\nasia_final.sort_values(by='total', axis=1, ascending=False)","fd319341":"def looping(df):\n    \n    i = df['first'].value_counts()\n    j = df['second'].value_counts()\n    k = df['third'].value_counts() \n    \n    player_wise = pd.DataFrame([i, j, k])\n    total = pd.DataFrame(player_wise.sum())\n    m = player_wise.append(total.transpose())\n    as_list = m.index.to_list()\n    idx = as_list.index(0)\n    as_list[idx] = 'total'\n    m.index = as_list\n    m.fillna(0, inplace=True)\n    m = m.astype(int)\n    m = m.sort_values(by='total', axis=1, ascending=False)\n    return m\n    ","16762822":"continent_dictionary = {}\ncontinents = ['Asia','Africa','Europe','North America','South America','Oceania']\nfor x in continents:\n    conti = df[df['continent'] == x]\n    continent_dictionary[x] = looping(conti)","2d3f73ee":"continent_dictionary['Asia']","8aad6989":"continent_dictionary['Africa']","ae529133":"continent_dictionary['Europe']","647dea99":"continent_dictionary['South America']","3bb74ca9":"continent_dictionary['North America']","7aa18ab9":"continent_dictionary['Oceania']","4b0d8558":"final #THE DATAFRAME AGAIN, JUST FOR YOUR REFERENCE (SO THAT YOU WOULDN'T HAVE TO ENDLESSLY SCROLL UP AND DOWN)","293103e4":"media = df[df.role == 'Media']\ncaptain = df[df.role == 'Captain']\ncoach = df[df.role == 'Coach']","30e9cfdc":"looping(media)","7e7de02e":"looping(coach)","f24a2853":"looping(captain)","6a595161":"## LAST BUT NOT THE LEAST - CAPTAINS\n### These folks tend to be a mixture of media and coaches - They see the game from within but then also get swayed by the writings of the media people + they have their own idols \/ favorites whom they aspire to be, which is evident from their votings.","822ab915":"Just to check if there are any missing values ","7267ee1f":"# WHAT DO WE LEARN FROM THIS?\n\n### Nearly 47% of Sadio Mane's votes came from Africa, his home continent!\n\n### Generally, I feel that people who play with you, against you, around you will judge you better than someone sitting thousands of miles away in some other continent.\n1. Harry Kane received a grand total of 2 votes from European voters! SOOOO OVERRATED!\n2. Van Dijk scored an imporessive 98 vs Messi's 99 in Europe. Speaks volumes of his presence at the back for Liverpool!  Cristiano received a paltry 72 in Europe! LOOOOOL!\n3. Messi top scored in both Americas - pretty reasonable considering he hails from South America.\n4. Messi top scored in 5 out of the 6 continents! BAMBOOZLING! (ARE YOU STILL WONDERING WHY HE WON THE TROPHY?)\n5. Van Dijk finished runner-up in 4 out of the 6 continents! - NOT BAD FOR A CENTRAL DEFENDER","65a8b108":"### GREAT WORK! NOW WE'LL GENERALIZE IT USING A FUNCTION","ef226c5f":"But first, we'll make the column names in lowercase as they're easier to work with","76f19f80":"Now comes the mapping part:","dbd0a4f3":"# Thank you for staying till the end! Adios!","13cac83a":"# We'll first see an example of 'Asia', and then we'll generalize","c5b2e6b9":"## NEXT UP - COACHES\n### Coaches tend to see the game from 'within', like, from the 'core'. Hence their views differs from the media.","798f2acf":"GREAT! Lets move ahead!\nWe'll now check total votes received by each player","31f03122":"**We'll add a new column 'continent' just for better understanding of which part of the world voted for whom more**","aa387cd9":"# Just FYI, some countries have three representatives, some have two and others have one","f190709d":"## I've also done a similar analysis for each 'role', viz. Captain, Coach and Media","ab8a9989":"**We see that the total votes row is called '0', which can be fixed in a number of ways** \n\n1. transpose rows and columns, so that '0' now becomes a column, and changing a column name is pretty straightforward\n2. first, second, third, 0 is an index column. Remove it as the index col, make it a normal row using reset_index, change '0' to 'total' and then again set it as the index column\n3. We'll make a list of the index column, change 0 to total and then assign this list back to the index column.\n\nwe'll use the third approach","14ff60e2":"## First up - MEDIA.\n### Media people generally care about 'results'. Van Dijk won CL, Liverpool lost just once in League, hence Van Dijk scores so well for the media folks (IMO)","78bd3c75":"## We see that there are NaN values, we'll get rid of them and then make these numbers integers"}}