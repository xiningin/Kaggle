{"cell_type":{"2be746a8":"code","5a8161a3":"code","c7e17abc":"code","dc7be697":"code","da7ece29":"code","8e53162d":"code","3d450bf5":"code","4d7e9a24":"code","6a9ad87d":"code","9bc57309":"code","6d138446":"code","91c0b0d1":"code","b8dbbda7":"code","b1d576ec":"code","45a52a43":"markdown","02c40aa0":"markdown","422f9378":"markdown"},"source":{"2be746a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5a8161a3":"path = '..\/input\/'\nhist = pd.read_csv(path + 'historical_transactions.csv', parse_dates = ['purchase_date'])\nnew = pd.read_csv(path + 'new_merchant_transactions.csv', parse_dates = ['purchase_date'])\nmerchant = pd.read_csv(path + 'merchants.csv')","c7e17abc":"hist.loc[hist.card_id == 'C_ID_d57e4ddab0'].sort_values('purchase_date')","dc7be697":"user_df = hist.loc[hist.card_id == 'C_ID_d57e4ddab0'].sort_values('purchase_date')\nuser_df.loc[user_df.merchant_id == 'M_ID_9139332ccc']","da7ece29":"# making `purchase_d` column. Slicing date from `purchase_date` column and shifting its datatype into String\nhist['purchase_d'] = [x.strftime('%d') for x in pd.DatetimeIndex(hist.purchase_date).date]     ","8e53162d":"hist.head()","3d450bf5":"# Counting frequency of each value from `purchase_d` column and counting values whose frequency is more than one\n# return value implies the frequency of regular monthly purchase \nfrom collections import Counter\ndef regular_cnt(series): \n    return sum(filter(lambda x: x > 1, Counter(series.tolist()).values()))","4d7e9a24":"regular = hist.groupby(['card_id', 'merchant_id']).agg({'purchase_d': [regular_cnt]})","6a9ad87d":"from scipy import stats\ndef mode(x):\n    return stats.mode(x)[1][0]","9bc57309":"regular_df = regular.groupby(['card_id']).agg(['sum', 'mean', 'min', 'max', 'nunique', 'size', mode])","6d138446":"regular_df.head()","91c0b0d1":"regular_df.columns = ['hist_regular_sum','hist_regular_mean', 'hist_regular_min', 'hist_regular_max', 'hist_regular_nunique', 'hist_regular_size', 'hist_regular_mode']","b8dbbda7":"regular_df.head(10)","b1d576ec":"regular_df.to_csv('regular_FE.csv', index = True)","45a52a43":"# Regular payment FE ","02c40aa0":"While revewing Kagglers kernels, one kernel caught my eyes! \n[https:\/\/www.kaggle.com\/raddar\/merchant-id-imputations](http:\/\/)\n\nActually he was trying to show that we can fill in NAs in `merchant_id` but I got an idea about feature engineering! Come with me :)\n","422f9378":"This card user ('C_ID_d57e4ddab0') has very unique purchasing tendency.\nWhen it comes to transaction with merchant_id '\tM_ID_9139332ccc', regular monthly puchase is notable  on 14th of every month ! \nDoes it imply regular subscription ???\nOkay! Now my goal is to find regular purchase date of every card user and make it as a feature! \nLet's go "}}