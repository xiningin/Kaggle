{"cell_type":{"a024044f":"code","792e8a7e":"code","44708e8c":"code","3179b59b":"code","53074e30":"code","db4ccda0":"code","5e7b94c1":"code","35b5f373":"code","958331ae":"code","59662dda":"code","c60d0a7d":"code","72be5d17":"code","6e952bd7":"markdown","fa810c7d":"markdown","a5389915":"markdown","30d35a56":"markdown","d0344499":"markdown","06f5420f":"markdown"},"source":{"a024044f":"import warnings\nwarnings.filterwarnings('ignore')\nimport string\nimport re\nfrom unicodedata import normalize\nimport numpy as np\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential,load_model\nfrom keras.layers import LSTM,Dense,Embedding,RepeatVector,TimeDistributed\nfrom keras.callbacks import EarlyStopping\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom nltk.translate.bleu_score import corpus_bleu\nimport pandas as pd\nfrom string import punctuation\nimport matplotlib.pyplot as plt\nfrom IPython.display import Markdown, display\n\ndef printmd(string):\n    # Print with Markdowns    \n    display(Markdown(string))","792e8a7e":"# How many sentences will be used\n# Limit the sentences to 10.000 on Kaggle to avoid exceding the\n# available RAM space\n# Build a generator to avoid this issue\n\ntotal_sentences = 10000\n\n# Load the dataset\ndataset = pd.read_csv(\"..\/input\/language-translation-englishfrench\/eng_-french.csv\", nrows = total_sentences)\n\n# What proportion of the sentences will be used for the test set\ntest_proportion = 0.1\ntrain_test_threshold = int( (1-test_proportion) * total_sentences)\n\nprintmd(f'## {total_sentences} \"parallel sentences\" will be loaded (original sentence + its translation)')\nprintmd(f'## {train_test_threshold} \"parallel sentences\" will be used to train the model')\nprintmd(f'## {total_sentences-train_test_threshold} \"parallel sentences\" will be used to test the model')","44708e8c":"# Shuffle the dataset\ndataset = dataset.sample(frac=1, random_state=0)\ndataset.iloc[1000:1010]","3179b59b":"def clean(string):\n    # Clean the string\n    string = string.replace(\"\\u202f\",\" \") # Replace no-break space with space\n    string = string.lower()\n    \n    # Delete the punctuation and the numbers\n    for p in punctuation + \"\u00ab\u00bb\" + \"0123456789\":\n        string = string.replace(p,\" \")\n        \n    string = re.sub('\\s+',' ', string)\n    string = string.strip()\n           \n    return string\n\n# Clean the sentences\ndataset[\"English words\/sentences\"] = dataset[\"English words\/sentences\"].apply(lambda x: clean(x))\ndataset[\"French words\/sentences\"] = dataset[\"French words\/sentences\"].apply(lambda x: clean(x))\n\n# Select one part of the dataset\ndataset = dataset.values\ndataset = dataset[:total_sentences]\n\n# split into train\/test\ntrain, test = dataset[:train_test_threshold], dataset[train_test_threshold:]\n\n# Define the name of the source and of the target\n# This will be used in the outputs of this notebook\nsource_str, target_str = \"French\", \"English\"\n\n# The index in the numpy array of the source and of the target\nidx_src, idx_tar = 1, 0","53074e30":"# Display the result after cleaning\npd.DataFrame(dataset[1000:1010])","db4ccda0":"def create_tokenizer(lines):\n    # fit a tokenizer\n    tokenizer = Tokenizer()\n    tokenizer.fit_on_texts(lines)\n    return tokenizer\n \ndef max_len(lines):\n    # max sentence length\n    return max(len(line.split()) for line in lines)\n\ndef encode_sequences(tokenizer, length, lines):\n    # encode and pad sequences\n    X = tokenizer.texts_to_sequences(lines) # integer encode sequences\n    X = pad_sequences(X, maxlen=length, padding='post') # pad sequences with 0 values\n    return X\n \ndef encode_output(sequences, vocab_size):\n    # one hot encode target sequence\n    ylist = list()\n    for sequence in sequences:\n        encoded = to_categorical(sequence, num_classes=vocab_size)\n        ylist.append(encoded)\n    y = np.array(ylist)\n    y = y.reshape(sequences.shape[0], sequences.shape[1], vocab_size)\n    return y\n \n# Prepare target tokenizer\ntar_tokenizer = create_tokenizer(dataset[:, idx_tar])\ntar_vocab_size = len(tar_tokenizer.word_index) + 1\ntar_length = max_len(dataset[:, idx_tar])\nprintmd(f'\\nTarget ({target_str}) Vocabulary Size: {tar_vocab_size}')\nprintmd(f'Target ({target_str}) Max Length: {tar_length}')\n\n# Prepare source tokenizer\nsrc_tokenizer = create_tokenizer(dataset[:, idx_src])\nsrc_vocab_size = len(src_tokenizer.word_index) + 1\nsrc_length = max_len(dataset[:, idx_src])\nprintmd(f'\\nSource ({source_str}) Vocabulary Size: {src_vocab_size}')\nprintmd(f'Source ({source_str}) Max Length: {src_length}\\n')\n \n# Prepare training data\ntrainX = encode_sequences(src_tokenizer, src_length, train[:, idx_src])\ntrainY = encode_sequences(tar_tokenizer, tar_length, train[:, idx_tar])\ntrainY = encode_output(trainY, tar_vocab_size)\n\n# Prepare test data\ntestX = encode_sequences(src_tokenizer, src_length, test[:, idx_src])\ntestY = encode_sequences(tar_tokenizer, tar_length, test[:, idx_tar])\ntestY = encode_output(testY, tar_vocab_size)","5e7b94c1":"def create_model(src_vocab, tar_vocab, src_timesteps, tar_timesteps, n_units):\n    # Create the model\n    model = Sequential()\n    model.add(Embedding(src_vocab, n_units, input_length=src_timesteps, mask_zero=True))\n    model.add(LSTM(n_units))\n    model.add(RepeatVector(tar_timesteps))\n    model.add(LSTM(n_units, return_sequences=True))\n    model.add(TimeDistributed(Dense(tar_vocab, activation='softmax')))\n    return model\n \n# Create model\nmodel = create_model(src_vocab_size, tar_vocab_size, src_length, tar_length, 256)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy')\n\nhistory = model.fit(trainX, \n          trainY, \n          epochs=200, \n          batch_size=64, \n          validation_split=0.1, \n          verbose=1,\n          callbacks=[\n                        EarlyStopping(\n                        monitor='val_loss',\n                        patience=10,\n                        restore_best_weights=True\n                    )\n            ])","35b5f373":"pd.DataFrame(history.history).plot()\nplt.title(\"Loss\")\nplt.show()","958331ae":"def word_for_id(integer, tokenizer):\n    # map an integer to a word\n    for word, index in tokenizer.word_index.items():\n        if index == integer:\n            return word\n    return None\n \ndef predict_seq(model, tokenizer, source):\n    # generate target from a source sequence\n    prediction = model.predict(source, verbose=0)[0]\n    integers = [np.argmax(vector) for vector in prediction]\n    target = list()\n    for i in integers:\n        word = word_for_id(i, tokenizer)\n        if word is None:\n            break\n        target.append(word)\n    return ' '.join(target)\n\ndef compare_prediction(model, tokenizer, sources, raw_dataset, limit=20):\n    # evaluate a model\n    actual, predicted = [], []\n    src = f'{source_str.upper()} (SOURCE)'\n    tgt = f'{target_str.upper()} (TARGET)'\n    pred = f'AUTOMATIC TRANSLATION IN {target_str.upper()}'\n    print(f'{src:30} {tgt:25} {pred}\\n')\n    \n    for i, source in enumerate(sources): # translate encoded source text\n        source = source.reshape((1, source.shape[0]))\n        translation = predict_seq(model, tar_tokenizer, source)\n        raw_target, raw_src = raw_dataset[i]\n        print(f'{raw_src:30} {raw_target:25} {translation}')\n        if i >= limit: # Display some of the result\n            break\n \n# test on some training sequences\nprint('### Result on the Training Set ###')\ncompare_prediction(model, tar_tokenizer, trainX, train)\n\n# test on some test sequences\nprint('\\n\\n### Result on the Test Set ###')\ncompare_prediction(model, tar_tokenizer, testX, test)","59662dda":"# It takes long to compute the BLEU Score\n\ndef bleu_score(model, tokenizer, sources, raw_dataset):\n    # Get the bleu score of a model\n    actual, predicted = [], []\n    for i, source in enumerate(sources):\n        # translate encoded source text\n        source = source.reshape((1, source.shape[0]))\n        translation = predict_seq(model, tar_tokenizer, source)\n        raw_target, raw_src = raw_dataset[i]\n        actual.append([raw_target.split()])\n        predicted.append(translation.split())\n        \n    bleu_dic = {}\n    bleu_dic['1-grams'] = corpus_bleu(actual, predicted, weights=(1.0, 0, 0, 0))\n    bleu_dic['1-2-grams'] = corpus_bleu(actual, predicted, weights=(0.5, 0.5, 0, 0))\n    bleu_dic['1-3-grams'] = corpus_bleu(actual, predicted, weights=(0.3, 0.3, 0.3, 0))\n    bleu_dic['1-4-grams'] = corpus_bleu(actual, predicted, weights=(0.25, 0.25, 0.25, 0.25))\n    \n    return bleu_dic\n\n# Compute the BLEU Score\nbleu_train = bleu_score(model, tar_tokenizer, trainX, train)\nbleu_test = bleu_score(model, tar_tokenizer, testX, test)","c60d0a7d":"plt.bar(x = bleu_train.keys(), height = bleu_train.values())\nplt.title(\"BLEU Score with the training set\")\nplt.ylim((0,1))\nplt.show()","72be5d17":"plt.bar(x = bleu_test.keys(), height = bleu_test.values())\nplt.title(\"BLEU Score with the test set\")\nplt.ylim((0,1))\nplt.show()","6e952bd7":"# 3. Result on the test set<a class=\"anchor\" id=\"3\"><\/a>","fa810c7d":"# 2. Create and train the model<a class=\"anchor\" id=\"2\"><\/a>","a5389915":"![translation](https:\/\/i.imgur.com\/oRErxJM.png)\n \n \n# Table of contents\n\n[<h3>1. Data Preprocessing<\/h3>](#1)\n\n[<h3>2. Create and train the model<\/h3>](#2)\n\n[<h3>3. Result on the test set<\/h3>](#3)\n\n[<h3>4. Prediction evaluation with BLEU<\/h3>](#4)","30d35a56":"# 4. Prediction evaluation with BLEU <a class=\"anchor\" id=\"4\"><\/a>\n\nBLEU (bilingual evaluation understudy) is an algorithm for evaluating the quality of text which has been machine-translated from one natural language to another. Quality is considered to be the correspondence between a machine's output and that of a human: \"the closer a machine translation is to a professional human translation, the better it is\" \u2013 this is the central idea behind BLEU. BLEU was one of the first metrics to claim a high correlation with human judgements of quality, and remains one of the most popular automated and inexpensive metrics.\n\nScores are calculated for individual translated segments\u2014generally sentences\u2014by comparing them with a set of good quality reference translations. Those scores are then averaged over the whole corpus to reach an estimate of the translation's overall quality. Intelligibility or grammatical correctness are not taken into account.\n\nBLEU's output is always a number between 0 and 1. This value indicates how similar the candidate text is to the reference texts, with values closer to 1 representing more similar texts. Few human translations will attain a score of 1, since this would indicate that the candidate is identical to one of the reference translations. For this reason, it is not necessary to attain a score of 1. Because there are more opportunities to match, adding additional reference translations will increase the BLEU score.\n\n\n## Algorithm\n\nBLEU uses a modified form of precision to compare a candidate translation against multiple reference translations. The metric modifies simple precision since machine translation systems have been known to generate more words than are in a reference text. This is illustrated in the following example from Papineni et al. (2002)\n\n![example bleu](https:\/\/i.imgur.com\/mrdpwun.png)\n\nOf the seven words in the candidate translation, all of them appear in the reference translations. Thus the candidate text is given a unigram precision of P, where *m* is number of words from the candidate that are found in the reference, and *wt* is the total number of words in the candidate. This is a perfect score, despite the fact that the candidate translation above retains little of the content of either of the references.\n\nThe modification that BLEU makes is fairly straightforward. For each word in the candidate translation, the algorithm takes its maximum total count, *m_max*, in any of the reference translations. In the example above, the word \"the\" appears twice in reference 1, and once in reference 2. Thus *m_max* = 2.\n\nFor the candidate translation, the count *mw* of each word is clipped to a maximum of *m_max* for that word. In this case, \"the\" has *m_w* = 7 and *m_max*=2, thus *m_w* is clipped to 2. These clipped counts *m_w* are then summed over all distinct words in the candidate. This sum is then divided by the total number of unigrams in the candidate translation. In the above example, the modified unigram precision score would be: P = 1 \/ 7\n\nIn practice, however, using individual words as the unit of comparison is not optimal. Instead, BLEU computes the same modified precision metric using n-grams. The length which has the \"highest correlation with monolingual human judgements\" was found to be four. The unigram scores are found to account for the adequacy of the translation, how much information is retained. The longer n-gram scores account for the fluency of the translation, or to what extent it reads like \"good English\". ([source](https:\/\/en.wikipedia.org\/wiki\/BLEU))\n\n![bleu score 2](https:\/\/i.imgur.com\/tNYaD64.png)","d0344499":"# Train a Machine Translation model FR->EN with BLEU Score\n### *Use a list a translated sentences in French and English to train the model*\n### \\#Keras \\#Deep Learning \\#NLTK \\#BLEU Score\n\n\n","06f5420f":"## 1. Data Preprocessing<a class=\"anchor\" id=\"1\"><\/a><a class=\"anchor\" id=\"1\"><\/a>"}}