{"cell_type":{"561a4cb1":"code","aa62f758":"code","1ada5262":"code","9fd1f5c3":"code","02f77560":"code","16f65546":"code","2fe101db":"code","81e7f0a9":"code","62c95f7e":"code","c82f05fd":"code","d006284e":"code","96a00e1e":"code","73cce2ff":"code","2873bb86":"code","aa0371e1":"code","299ec863":"code","2c8ed7ad":"code","a8ca8116":"code","966de74c":"code","c2e8c554":"code","d3753e5f":"code","62777c12":"code","71c39c64":"code","54632c8c":"code","93078e14":"code","4a8d52be":"code","e6bf6a38":"code","930ed7e1":"code","771bdc87":"code","854b4a93":"code","ede73164":"code","1702b00a":"code","7df74b67":"code","1b4c98d8":"code","e0fbb1d1":"code","4025d70d":"code","4316d7a9":"code","3f29eff5":"code","d22f711b":"code","262cd6dc":"code","7ab7eed1":"code","457e6711":"code","99e87eba":"code","ea131ff7":"code","a4f4c5b3":"code","d7ea6959":"code","b0279658":"code","1dd8fc7a":"code","12578ce2":"code","5eee38a8":"code","64bfe63d":"code","15ab2486":"code","18e98fda":"code","48672adc":"code","b1115f30":"code","f196e34b":"code","e3e02d03":"code","d48e7544":"code","d3765e40":"code","3403653c":"code","139c1d05":"code","c53ea9ac":"code","2c0bdda3":"code","9d8d3f1d":"code","9d21f011":"code","7f3666e3":"code","24e5211d":"code","32099815":"code","dff9c5bf":"code","4c7eba94":"code","661a3762":"code","4b0597cd":"code","931057b5":"code","227d54f7":"code","b0083ee8":"code","7be1756b":"code","1da17fa5":"markdown","b076b067":"markdown","b86121f4":"markdown","eb9529ff":"markdown","b0e3f01f":"markdown","3f58df1f":"markdown","ed979239":"markdown","2ffbc99a":"markdown","2e7768d5":"markdown","faf5217c":"markdown","e7ffd15e":"markdown","92837bab":"markdown","71b1f182":"markdown","a849fa17":"markdown"},"source":{"561a4cb1":"import bq_helper\nfrom bq_helper import BigQueryHelper\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set() \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\nnyc = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"new_york\")","aa62f758":"nyc.table_schema(\"tree_census_2015\")","1ada5262":"query3 = \"\"\"SELECT\n  Latitude,\n  Longitude\nFROM\n  `bigquery-public-data.new_york.tree_census_2015`\nWHERE\n  spc_common=\"Virginia pine\";\n        \"\"\"\nresponse3 = nyc.query_to_pandas_safe(query3, max_gb_scanned=10)\nresponse3.head(15)","9fd1f5c3":"query3 = \"\"\"SELECT\n  UPPER(spc_common) AS common_name,\n  ROUND(latitude, 1) AS lat,\n  ROUND(longitude, 1) AS long,\n  COUNT(*) AS tree_count\nFROM\n  `bigquery-public-data.new_york.tree_census_2015`\nGROUP BY\n  spc_common,\n  spc_latin,\n  lat,\n  long\nORDER BY\n  tree_count DESC;\n        \"\"\"\nresponse3 = nyc.query_to_pandas_safe(query3, max_gb_scanned=10)\nresponse3.head(15)","02f77560":"query4 = \"\"\"SELECT\n  UPPER(spc_common) as common_name,\n  UPPER(spc_latin) as latin_name,\n  COUNT(*) AS tree_count\nFROM\n  `bigquery-public-data.new_york.tree_census_2015`\nGROUP BY\n  spc_common,\n  spc_latin\nORDER BY\n  tree_count DESC\nLIMIT\n  10;\n        \"\"\"\nresponse4 = nyc.query_to_pandas_safe(query4, max_gb_scanned=10)\nresponse4.head(15)\n# Empty strings '' instead of NULL -- not caught by pd.isna()","16f65546":"# Basic functions\n\ndef inspect(query, nrows=15, sample=False):\n    \"\"\"Display response from given query but don't save. \n    query: str, raw SQL query\n    nrows: int, number of rows to display, default 15\n    sample: bool, use df.sample instead of df.head, default False \"\"\"\n    response = nyc.query_to_pandas_safe(query, max_gb_scanned=10)\n    if sample:\n        return response.sample(nrows)\n    return response.head(nrows) \n\ndef retrieve(query, nrows=10):\n    \"\"\"Save response from given query and print a preview. \n    query: str, raw SQL query\n    nrows: int, number of rows to display\"\"\"\n    response = nyc.query_to_pandas_safe(query, max_gb_scanned=10)\n    print(response.head(nrows))\n    return response\n\n# Save table name as variable for ease \nf = '`bigquery-public-data.new_york.tree_census_2015`'\nf2 = '`bigquery-public-data.new_york.tree_census_2005`'","2fe101db":"# What do rows with missing species names look like?\nquery = f'''SELECT * \nFROM {f}\nWHERE spc_common = ''\nLIMIT 5\n  '''\ninspect(query)","81e7f0a9":"query = '''SELECT tree_id, user_type, spc_common\nFROM\n  `bigquery-public-data.new_york.tree_census_2015`\nWHERE spc_common = ''\n\n  '''\nres = retrieve(query)\nres['user_type'].value_counts()\n# There can be missing species names from any type of census worker","62c95f7e":"# Count ntas \nquery = f\"\"\"SELECT COUNT(DISTINCT nta) AS num_ntas, count(distinct nta_name) as num_nta_names\nFROM {f} \nWHERE nta != '' \"\"\" \ninspect(query)","c82f05fd":"query = f\"\"\"SELECT distinct nta_name as nta_names\nFROM {f} \nORDER BY nta_names\n\"\"\" \nnta_names = retrieve(query)","d006284e":"print([x for x in nta_names['nta_names']])\n# Don't actually recognize all of these neighborhoods, but this should be more meaningful than grouping by lat\/lon\n    # Could merge with area to get tree density?\n    # ","96a00e1e":"# Count total trees within neighborhood\nquery = f\"\"\" SELECT \nnta_name,\nCOUNT(tree_id) as tree_count,\nAVG(latitude) as lat,\nAVG(longitude) AS lon\nFROM {f}\nGROUP BY nta_name\nORDER BY tree_count desc\n\n\"\"\"\ninspect(query)\n# Most up to date at https:\/\/tree-map.nycgovparks.org\/","73cce2ff":"# Overall health of trees in NYC\nquery = f\"\"\" SELECT \nCASE WHEN health = '' THEN 'Dead' \n ELSE health END AS health,\nCOUNT(tree_id)  as num_trees,\nCOUNT(tree_id) *100 \/(SELECT COUNT(*) FROM {f}) as healthy_pct\nFROM {f}\nGROUP BY ROLLUP(health)\nORDER BY num_trees\n\"\"\"\ninspect(query)\n# status = alive, stump, dead \n# health = Good, Fair, Poor, left blank if dead or stump \n# 77% trees in good health overeall","2873bb86":"# Calc percent good trees within neighborhood\nquery = f\"\"\" SELECT g.nta_name, g.tree_count, t.total_trees, \ng.tree_count \/ t.total_trees as healthy_pct,\nlon,\nlat\nFROM\n(SELECT nta_name,\n    COUNT(tree_id) as tree_count\nFROM {f}\n WHERE health = 'Good'\n GROUP BY nta_name\n ORDER BY tree_count desc) g\n\nJOIN --\n    (SELECT nta_name,\n        COUNT(tree_id) as total_trees,\n        AVG(latitude) as lat,\n        AVG(longitude) AS lon\n    FROM {f} \n     GROUP BY nta_name) t\nON g.nta_name = t.nta_name\n ORDER BY healthy_pct DESC\n\"\"\"\nhealthy_trees = retrieve(query, nrows=5)","aa0371e1":"# Get sense of health distribution \nsns.distplot(healthy_trees['healthy_pct'])","299ec863":"# Assign color - non uniform bins since everything is above 50%\nhealthy_trees['bin'] = pd.cut(x=healthy_trees['healthy_pct'], bins=[0, 0.5, 0.6, 0.7, 0.8, 0.9, 1]).astype(str)","2c8ed7ad":"healthy_trees['bin'].value_counts()","a8ca8116":"print(healthy_trees.shape)\nhealthy_trees.columns","966de74c":"# healthy_trees.to_csv('healthy_trees.csv')","c2e8c554":"# plotly alternative \nimport plotly\nimport plotly.graph_objs as go\n\nplotly.offline.init_notebook_mode(connected=True)\n\n# sizeref = 2. * max(array of size values) \/ (desired maximum marker size ** 2)\nhealthy_trees['text'] = healthy_trees['nta_name'] + '<br>Tree Count ' + healthy_trees['tree_count'].astype(str)\nbins = [\"(0.0, 0.5]\", \"(0.5, 0.6]\", \"(0.6, 0.7]\", \"(0.7, 0.8]\", \"(0.8, 0.9]\", \"(0.9, 1.0]\"]\ncolors = [\"#b2182b\",\"#ef8a62\",\"#fddbc7\",\"#d1e5f0\",\"#67a9cf\", \"#2166ac\"]\n# http:\/\/colorbrewer2.org\/#type=diverging&scheme=RdBu&n=6\nhealth_grps = []\nscale = 50\n\nfor i, bin in enumerate(bins):\n    healthy_trees_bin = healthy_trees[healthy_trees['bin'] == bin]\n    print(len(healthy_trees_bin))\n    grp = go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = healthy_trees_bin['lon'],\n        lat = healthy_trees_bin['lat'],\n        text = healthy_trees_bin['text'],\n        marker = go.scattergeo.Marker(\n            size = healthy_trees['tree_count']\/scale,\n            color = colors[i],\n            line = go.scattergeo.marker.Line(\n                width=0.5, color='rgb(40,40,40)'\n            ),\n            sizemode = 'area'\n        ),\n        name = bin )\n    health_grps.append(grp)\n\nlayout = go.Layout(\n        title = go.layout.Title(\n            text = '2015 NYC neighborhood tree health status<br>(Click legend to toggle traces)'\n        ),\n        showlegend = True,\n        geo = go.layout.Geo(\n            scope = 'usa',\n            projection = go.layout.geo.Projection(\n                type='albers usa'\n            ),\n            showland = True,\n            landcolor = 'rgb(217, 217, 217)',\n            subunitwidth=1,\n            countrywidth=1,\n            subunitcolor=\"rgb(255, 255, 255)\",\n            countrycolor=\"rgb(255, 255, 255)\"\n        )\n    )\n\nfig = go.Figure(data=health_grps, layout=layout)\nplotly.offline.iplot(fig, filename='d3-bubble-map-tree_counts')\n# not working well yet","d3753e5f":"query = f\"\"\" SELECT \n    nta_name,\n    CASE WHEN health = '' THEN 'Dead' \n     ELSE health END AS health,\n    COUNT(tree_id) as tree_count\n    FROM {f}\n    GROUP BY nta_name, health\n    ORDER BY nta_name, health\n\"\"\"\ntree_health_by_location = retrieve(query)\n","62777c12":"# add location details for tableau, dropping redundant good trees column\nneighborhood_tree_health = tree_health_by_location.merge(healthy_trees.drop(columns=['total_trees']), on='nta_name')","71c39c64":"# Export for tooltip view of the health breakdown in Tableau\nneighborhood_tree_health.to_csv('neighborhood_tree_health.csv')","54632c8c":"%%html\n<div class='tableauPlaceholder' id='viz1553360799175' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NY&#47;NYCTreeHealthbyNeighborhood&#47;NYCTreeHealthbyNeighborhood2015&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='NYCTreeHealthbyNeighborhood&#47;NYCTreeHealthbyNeighborhood2015' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NY&#47;NYCTreeHealthbyNeighborhood&#47;NYCTreeHealthbyNeighborhood2015&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1553360799175');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","93078e14":"# Alternative: How about color by most popular tree species and tool tip tree species breakdown\n    # basically same type of queries, color column = max(counts of species grps) instead of bins\n","4a8d52be":"query = f\"\"\" SELECT *\nFROM {f2}\nLIMIT 5\n\"\"\"\ninspect(query)\n# note: coordinates are a 2-tuple in location_1 coolumn\n# status has different coding\n# nta\/nta_name have some empty entries","e6bf6a38":"# Start by repeating queries to get 2005 data\n# Overall health of trees in NYC\nquery = f\"\"\" SELECT \nstatus,\nCOUNT(objectid)  as num_trees, -- new name for id\nCOUNT(objectid) *100 \/(SELECT COUNT(*) FROM {f2}) as healthy_pct\nFROM {f2}\nGROUP BY ROLLUP(status)\nORDER BY num_trees\n\"\"\"\ninspect(query)\n# status is too different from health to compare directly - excellent actually means something different - can't just make excellent -> 2015 good, and 2005 good -> fair\n# by this metric 90% trees in \"good\" health \n# notably, poor is higher in 2005 ","930ed7e1":"# Count ntas \nquery = f\"\"\"SELECT COUNT(DISTINCT nta) AS num_ntas, count(distinct nta_name) as num_nta_names\nFROM {f2} \n \"\"\" \ninspect(query)\n# more than 2015. What are they?","771bdc87":"query = f\"\"\"SELECT distinct nta_name\nFROM {f2} \n \"\"\" \nnta_names_2005 = retrieve(query)","854b4a93":"print([x for x in nta_names_2005['nta_name'] if x not in nta_names['nta_names'].tolist()])\n# 6 ntas that didn't have a match in 2015","ede73164":"print([x for x in nta_names['nta_names'] if x not in nta_names_2005['nta_name'].tolist()])","1702b00a":"query = f\"\"\"SELECT status,\ncount(objectid) as excluded_trees\nFROM {f2} \nWHERE nta_name IN ('', 'park-cemetery-etc-Brooklyn', 'park-cemetery-etc-Bronx', 'park-cemetery-etc-Manhattan', 'Airport', 'park-cemetery-etc-Queens')\nGROUP BY ROLLUP(status)\n \"\"\" \ninspect(query)\n# \"None\" is the total row\n# 25k so not insignificant - maybe search closest lat\/lon neighborhood\n# but still relatively small, will exclude for now by using inner join","7df74b67":"# Calc change in total trees per neighborhood between 2005 and 2015\nquery = f\"\"\" SELECT f.nta_name, \nf2.total_trees as cnt_2005,\nf.tree_count as cnt_2015,\nf.tree_count - f2.total_trees as change,\n(f.tree_count - f2.total_trees) \/ f2.total_trees as pct_change\nFROM\n(SELECT nta_name,\n    COUNT(tree_id) as tree_count\nFROM {f} -- 2015\n GROUP BY nta_name\n ORDER BY nta_name) f\n\nJOIN --\n    (SELECT nta_name,\n        COUNT(objectid) as total_trees\n    FROM {f2} --2005\n     GROUP BY nta_name) f2\nON f.nta_name = f2.nta_name\n ORDER BY change, pct_change\n\"\"\"\ntree_diff = retrieve(query, nrows=5)","1b4c98d8":"# Calc change in total alive trees per neighborhood between 2005 and 2015\nquery = f\"\"\" SELECT f.nta_name, f2.boroname,\nf2.total_trees as cnt_2005,\nf.tree_count as cnt_2015,\nf.tree_count - f2.total_trees as change,\n(f.tree_count - f2.total_trees) \/ f2.total_trees as pct_change\nFROM\n(SELECT nta_name,\n    COUNT(tree_id) as tree_count\nFROM {f} -- 2015\n WHERE health IN ('Good', 'Fair', 'Poor') --alive \n GROUP BY nta_name\n ORDER BY nta_name) f\n\nJOIN --\n    (SELECT boroname,\n    nta_name,\n        COUNT(objectid) as total_trees\n    FROM {f2} --2005\n     WHERE status in ('Good', 'Excellent', 'Poor')\n     GROUP BY boroname, nta_name) f2\nON f.nta_name = f2.nta_name\n ORDER BY change, pct_change\n\"\"\"\ntree_diff = retrieve(query, nrows=5)","e0fbb1d1":"tree_diff.head()","4025d70d":"tree_diff['boroname'].unique()","4316d7a9":"# staten island was encoded numerically \ntree_diff['boroname'] = tree_diff['boroname'].str.replace('5', 'Staten Island')","3f29eff5":"tree_diff.groupby('boroname')['change', 'pct_change'].describe()","d22f711b":"sns.boxplot(x='change', y='boroname', data=tree_diff)\nplt.title('Raw change in tree count by borough, between 2005 and 2015')","262cd6dc":"# Check out the outlier\ntree_diff[tree_diff['pct_change'] > 500]\n# Sunnyside only had 1 tree in 2005?","7ab7eed1":"sns.boxplot(x='pct_change', y='boroname', data=tree_diff[tree_diff['pct_change'] < 500]) # remove outlier \nplt.title('Percent change in tree count by borough, between 2005 and 2015')\n# Bronx had some of the bigger increases \n# Notably, Queens and Staten Island had small changes but had a lot of healthy trees already","457e6711":"sns.boxplot(x='cnt_2005', y='boroname', data=tree_diff)\nplt.title('Tree count distribution by borough, 2005')","99e87eba":"sns.boxplot(x='cnt_2015', y='boroname', data=tree_diff) \nplt.title('Tree count distribution by borough, 2015')","ea131ff7":"plt.figure(figsize=(10, 40))\nsns.barplot(y='nta_name', x='change', data=tree_diff.sort_values('change'))\nplt.title('Raw change in tree count by neighborhood, between 2005 and 2015')\n# Not the most informative plot but kinda nice to see -> setting hue to borough didn't work out well - unsure why","a4f4c5b3":"# top 5 biggest increases and decreases\ntop5s = pd.concat([tree_diff.head(), tree_diff.tail()]).sort_values(by='cnt_2005', ascending=False)\ntop5m = top5s.melt(id_vars=['nta_name', 'boroname'], value_vars=['cnt_2005', 'cnt_2015'], var_name='Year', value_name='tree_count')","d7ea6959":"ordered_names = top5s['nta_name'].tolist()","b0279658":"# Visualize\nplt.figure(figsize=(4, 8))\nsns.lineplot(x='Year', y='tree_count', hue='nta_name', data=top5m)\nplt.legend(bbox_to_anchor=(1.05, 1))\nplt.title('Raw changes in tree counts for neighborhoods with the biggest changes')\n# East New York probably the most notable for doubling its tree count from <4k to 9k","1dd8fc7a":"## Inspect tree species","12578ce2":"# There are some trees threatened by beetles: advised to no longer plant. \nquery = f\"\"\"\nSELECT * \nFROM `bigquery-public-data.new_york.tree_species`\nWHERE comments LIKE \"Asian Long Horn%\"\n\"\"\"\ninspect(query)","5eee38a8":"# 2015 state of threatened species\nquery = f\"\"\"\nSELECT r.spc_latin as tree,r.spc_common as common_name, COUNT(*) as tree_count\nFROM {f} r\nJOIN `bigquery-public-data.new_york.tree_species` s\nON r.spc_latin = s.species_scientific_name\nWHERE s.comments LIKE \"Asian Long Horn%\"\nGROUP BY tree, common_name\nORDER BY tree_count DESC\n\"\"\"\nspecies2015 = retrieve(query)","64bfe63d":"query = f\"\"\"\nSELECT  r.spc_latin as tree,r.spc_common as common_name,\nCOUNT(*) as tree_count\nFROM {f2} r\nJOIN `bigquery-public-data.new_york.tree_species` s\nON lower(r.spc_latin) = lower(s.species_scientific_name)\nWHERE s.comments LIKE \"Asian Long Horn%\"\nGROUP BY tree, common_name\nORDER BY tree_count DESC\n\"\"\"\nspecies2005_incomplete = retrieve(query)\n# missing London Planetree?\n# common name is different, can't join that easily to 2015\n# Neither year has the leprachaun green ash","15ab2486":"query = f\"\"\"\nSELECT  r.spc_latin as tree,r.spc_common as common_name,\nCOUNT(*) as tree_count\nFROM {f2} r\nWHERE lower(r.spc_common) LIKE '%plane%'\nGROUP BY tree, common_name\nORDER BY tree_count DESC\n\"\"\"\nplanetree = retrieve(query)","18e98fda":"species2005 = pd.concat([species2005_incomplete, planetree], axis=0)","48672adc":"# convert lower case for joining\nspecies2005['tree'] = species2005['tree'].str.lower()","b1115f30":"# Get rid of the random x from fraxinus\nspecies2015['tree'] = species2015['tree'].str.replace(' x ', ' ').str.lower()","f196e34b":"species_cnts = pd.merge(species2005, species2015, how='right', on='tree', suffixes=('_2005', '_2015'))\nspecies_cnts['tree_count_2005'] = species_cnts['tree_count_2005'].fillna(0).astype('int') # fill missing species with count of 0","e3e02d03":"species_cnts['diff'] = species_cnts['tree_count_2015'] - species_cnts['tree_count_2005']\nspecies_cnts.sort_values('diff')","d48e7544":"sns.barplot(y='common_name_2015', x='diff', data=species_cnts.sort_values('diff'))\n# NYC is still planting threatened trees, particularly elms\n\n# To do:\n    # See where these trees are being planted?","d3765e40":"# Check\nquery = f\"\"\"\nSELECT  r.spc_latin as tree,r.spc_common as common_name,\nCOUNT(*) as tree_count\nFROM {f2} r\nWHERE lower(r.spc_common) LIKE '%maple%'\nGROUP BY tree, common_name\nORDER BY tree_count DESC\n\"\"\"\n\ninspect(query)","3403653c":"query = f\"\"\"\nSELECT * \nFROM {f}\nLIMIT 2\"\"\"\nhead = retrieve(query)\n","139c1d05":"head.columns","c53ea9ac":"# Create select statement using python loop\nq = ''\nfor col in head.columns:\n    q += f'COUNT (DISTINCT {col}) as {col}, ' ","2c0bdda3":" q[:-2]","9d8d3f1d":"# WARNING takes some time to run - could load in the whole table and do .describe() as alternative\nquery = f\"\"\"\nSELECT {q[:-2]}\nFROM {f}\n\n\"\"\"\ninspect(query)","9d21f011":"# Refresher on status distribution  - maybe do health instead- poor\/good\nquery = f\"\"\"\nSELECT status,\nCOUNT(*) as tree_count\nFROM {f}\nGROUP BY status\n\"\"\"\ninspect(query)\n# very imbalanced target classes","7f3666e3":"# Get binary classification along with features\nquery = f\"\"\"\nSELECT status,\ntree_dbh as diam,\ncurb_loc,\nroot_stone,\nroot_grate,\nroot_other,\ntrunk_wire,\ntrnk_light,\ntrnk_other,\nbrch_light,\nbrch_shoe,\nbrch_other\n\nFROM {f}\nWHERE status IN ('Alive', 'Dead')\n\n\"\"\"\ndoa_data = retrieve(query)","24e5211d":"doa_data.shape","32099815":"doa_data.columns[1:]","dff9c5bf":"y = (doa_data['status'] == \"Dead\")  # Convert from string \"Yes\"\/\"No\" to binary\ndoa_data['curb_loc'] = doa_data['curb_loc'].map({'OnCurb': 0, 'OffsetFromCurb':1})\nfor col in doa_data.columns[3:]:\n    doa_data[col] = doa_data[col].map({'No': 0, 'Yes':1})","4c7eba94":"feature_names = doa_data.columns[1:].tolist()\nX = doa_data[feature_names]\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1, stratify=y)\nmy_model = RandomForestClassifier(n_estimators=100, random_state=1).fit(train_X, train_y)","661a3762":"model2 = RandomForestClassifier(n_estimators=100, class_weight='balanced').fit(train_X, train_y)","4b0597cd":"print(classification_report(val_y, model2.predict(val_X)))","931057b5":"confusion_matrix(val_y, model2.predict(val_X))","227d54f7":"# takes a long time\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(model2, random_state=1).fit(val_X, val_y)\neli5.show_weights(perm, feature_names = val_X.columns.tolist())\n# doesn't do well with  imbalanced binary variables where most of the values are the same ","b0083ee8":"import shap\n# For speed, we will calculate shap values on smaller subset of the validation data\nsmall_val_X = val_X.iloc[:150]\n\nexplainer = shap.TreeExplainer(model2)\nshap_values = explainer.shap_values(small_val_X)\n\nshap.summary_plot(shap_values[1], small_val_X)","7be1756b":"val_y.iloc[:150].value_counts()\n# Imbalanced classes don't do well with simple model interpretation. Need to revisit.","1da17fa5":"Can you find the Virginia Pines in New York City?\n","b076b067":"**How to Query the NYC Open Data (BigQuery Dataset)**","b86121f4":"### Get actual distribution of health wthin each neighborhood, too.","eb9529ff":"## How well are trees doing within each neighborhood?\nNeighborhood Tabulation Areas (NTA)","b0e3f01f":"Where can you find the most of your favorite type of tree?","3f58df1f":"Look at neighborhoods aggregated at the borough level.","ed979239":"### Neighborhood observations\n1. Rockaways have some of the neighborhoods with the worst tree health.\n2. Queens and Staten Island have good overall tree health.\n3. Stuyvesant Town has the highest percentage of healthy trees but has the fewest trees. \n\nWhat does your neighborhood's tree health looks like?\n","2ffbc99a":"### From forked kernel. Sample questions about the tree census","2e7768d5":"# 2015 Tree Health Modeling\nCan we predict a tree's status based on observations made during the tree census?  \nData dictionary available at [link](https:\/\/data.cityofnewyork.us\/api\/views\/pi5s-9p35\/files\/2e1e0292-20b4-4678-bea5-6936180074b3?download=true&filename=StreetTreeCensus2015TreesDataDictionary20161102.pdf)","faf5217c":"# Let's compare 2015 with 2005 census\nUnfortunately, tree_id's are not consistent across surveys, so we can't track individual trees over the years. However, we can compare how things have changed as a neighborhood.","e7ffd15e":"# Start with 2015 Census","92837bab":"### Misc questions (move to end)","71b1f182":"### Very rough modeling to look at feature importance","a849fa17":"What are the most popular types of tree in New York City?"}}