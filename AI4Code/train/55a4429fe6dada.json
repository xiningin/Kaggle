{"cell_type":{"7ab9c63c":"code","418fe123":"code","518d8c64":"code","d781a4a4":"code","fb19e228":"code","9d718a28":"code","2f8aec52":"code","52fcdfc1":"code","8720ef91":"code","806b20a6":"code","1bd7cf38":"code","5040930d":"code","02a59a30":"markdown","ef423beb":"markdown","56fd75e7":"markdown","9851bbc4":"markdown","de028e49":"markdown","3459290e":"markdown","5170ee2d":"markdown","b27fc644":"markdown"},"source":{"7ab9c63c":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport pandas as pd\nimport pickle\nimport cv2\nfrom tqdm import tqdm \nimport matplotlib as mpl\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport zipfile ","418fe123":"train = pd.read_csv(\"..\/input\/histopathologic-cancer-detection\/train_labels.csv\", dtype=str)\nprint(train.shape)","518d8c64":"train['id'] = train['id'].astype(str) + '.tif'\n","d781a4a4":"train.head(10)","fb19e228":"# Sample 16 images from the training set and display these along with their labels.\n\nplt.figure(figsize=(10,10)) # specifying the overall grid size\n\nfor i in range(16):\n    plt.subplot(4,4,i+1)    # the number of images in the grid is 6*6 (16)\n    img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][i]}')\n    plt.imshow(img)\n    plt.text(0, -5, f'Label {train[\"label\"][i]}')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","9d718a28":"cnn = load_model('..\/input\/cancer-detection-models\/cancer_model.h5')\ncnn.summary()","2f8aec52":"def create_grad_model(model):\n    for layer in reversed(model.layers):\n        if len(layer.output_shape) == 4:\n            last_conv_layer = layer.name\n            break\n\n    grad_model = tf.keras.models.Model(\n        inputs=[model.inputs],\n        outputs=[model.get_layer(last_conv_layer).output, model.output])\n    \n    return grad_model \n\ndef compute_heatmap(image, class_ix, grad_model):\n\n    with tf.GradientTape() as tape:\n        inputs = tf.cast(image, tf.float32)\n        (conv_outputs, predictions) = grad_model(inputs)\n        loss = predictions[:, class_ix]\n    grads = tape.gradient(loss, conv_outputs)\n\n    cast_conv_outputs = tf.cast(conv_outputs > 0, \"float32\")\n    cast_grads = tf.cast(grads > 0, \"float32\")\n    guided_grads = cast_conv_outputs * cast_grads * grads\n\n    conv_outputs = conv_outputs[0]\n    guided_grads = guided_grads[0]\n\n    weights = tf.reduce_mean(guided_grads, axis=(0, 1))\n\n    cam = tf.reduce_sum(tf.multiply(weights, conv_outputs), axis=-1)\n\n    (w, h) = (image.shape[2], image.shape[1])\n    heatmap = cv2.resize(cam.numpy(), (w, h))\n        \n    return heatmap","52fcdfc1":"# Create Gradient Model\ngm = create_grad_model(cnn)\n\n# Select Image and Create Heatmap\n# f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][i]}.tif'\nfilename = train[\"id\"][0]\n# img = mpimg.imread(f'train\/{filename}')\nimg = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][0]}')   \nimg = cv2.resize(img, (32, 32))\ntensor = img.reshape(1,32,32,3) \/ 255\n\n# img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{filename}')\n# tensor = img.reshape((1,) + img.shape) \/ 255\nheatmap = compute_heatmap(tensor, 1, gm)\n\nplt.figure(figsize=[9,3])\n\n# Display Image\nplt.subplot(1,3,1)\nplt.imshow(img)\nplt.axis('off')\n\n# Display Heatmap\nplt.subplot(1,3,2)\nplt.imshow(heatmap, cmap='coolwarm')\nplt.axis('off')\n\n# Display Image and Heatmap Together\nplt.subplot(1,3,3)\nplt.imshow(img, alpha=0.8, cmap='binary_r')\nplt.imshow(heatmap, alpha=0.6, cmap='coolwarm')\nplt.axis('off')\n    \nplt.show()","8720ef91":"def get_heatmap_dist(df, class_ix, gm):\n\n    values = None\n    for i, row in tqdm(df.iterrows()):\n#         f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][0]}'\n#         img = mpimg.imread(f'train\/{row.id}')    \n        img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][i]}')   \n        img = cv2.resize(img, (32, 32))\n        tensor = img.reshape(1,32,32,3) \/ 255\n        hm = compute_heatmap(tensor, class_ix, gm)\n\n        if values is None:\n            values = hm.flatten()\n        else:\n            values = np.hstack([values, hm.flatten()])\n\n    return values","806b20a6":"values = get_heatmap_dist(train.sample(1000, random_state=1), 1, gm)","1bd7cf38":"# setting a high end and low end of the color\nlow = np.quantile(values, 0.10)\nhigh = np.quantile(values, 0.96)\n\nnorm = mpl.colors.Normalize(vmin=low, vmax=high)\n\nprint(low)\nprint(high)","5040930d":"# Select which images to display\nindices = range(12)\n\nfor i in indices:  \n    row = train.iloc[i,:]\n    img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][i]}')    \n    label = row.label\n    img = cv2.resize(img, (32, 32))\n    tensor = img.reshape(1,32,32,3) \/ 255\n    heatmap = compute_heatmap(tensor, 1, gm)\n\n    if(label == '1'):\n        print('Cancer Present')\n    else:\n        print('No Cancer')\n    \n    plt.figure(figsize=[9,3])\n\n    plt.subplot(1,3,1)\n    plt.imshow(img)\n    plt.axis('off')\n\n    plt.subplot(1,3,2)\n    plt.imshow(heatmap, cmap='coolwarm', norm=norm)\n    plt.axis('off')\n\n    plt.subplot(1,3,3)\n    plt.imshow(img, alpha=0.6, cmap='binary_r')\n    plt.imshow(heatmap, alpha=0.6, cmap='coolwarm', norm=norm)\n    plt.axis('off')\n    \n    plt.show()","02a59a30":"## Heatmaps","ef423beb":"## Load Model","56fd75e7":"## Load Package","9851bbc4":"## View Sample of Images","de028e49":"## Multiple Heatmaps","3459290e":"## Load Dataframe","5170ee2d":"# Cancer Detection\n## Class Activation Maps","b27fc644":"## Heatmap Functions"}}