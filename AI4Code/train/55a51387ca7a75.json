{"cell_type":{"45f42943":"code","246a1c28":"code","0b623678":"code","9df15b79":"code","7ca7d96a":"code","b01e0bff":"code","8b718bd8":"code","a7554428":"code","bcf8108e":"code","c794e798":"code","855785d2":"code","c2b7ec57":"code","c9b014f4":"code","dc4bd1d2":"code","38ad6f3b":"code","589c4221":"code","76faff35":"code","76851011":"code","7d7415fa":"code","062d28e7":"code","55e9ee81":"code","103672da":"code","2a20a75e":"code","831ce8ef":"code","1e0a9757":"code","8d49e189":"code","faa90901":"code","6815dd31":"code","5cfd7453":"code","ef26ac3f":"code","ebf83cf5":"code","9c98f7eb":"code","b0a83477":"code","7ea7e868":"code","0c817996":"code","bc94f9fc":"code","5c216843":"code","399c566d":"code","d443aa1e":"code","1e6f6445":"code","32b0c735":"code","9fb42656":"code","66f1c780":"code","593c77b0":"code","44cfd801":"code","14064a9b":"code","701e73af":"code","8237f839":"code","5f0c208c":"code","67596378":"code","d8306127":"code","355eb565":"code","b3e26245":"code","046f56a2":"code","6f7ca4cd":"code","4e4dc05f":"code","4dde693b":"code","2fedf9f2":"code","10b44d59":"code","50305570":"code","43d19caf":"code","ac670816":"code","311f9ec2":"code","6938f829":"code","f83d5420":"code","e4dc44b1":"code","873dd7fb":"code","13162912":"code","0e2859f9":"code","a8d8d8a0":"code","3e55ae30":"code","de8a5388":"code","85c4920a":"code","75326f5d":"code","1a8d77a6":"code","95c93477":"code","9e186e2f":"code","b0e19846":"code","196323e1":"code","7bcad28e":"code","bad88fc5":"code","425ad454":"code","6a40ebf7":"code","c28dc32a":"code","644c2c8c":"code","8ec4cce6":"code","a92ce292":"code","8e118eaa":"code","e64a29b1":"code","daea85c9":"code","656c351d":"code","12ce0329":"code","9b36db3e":"code","1bea1922":"code","a8d0b20e":"code","899aea66":"code","518e914b":"code","97c437f6":"code","1fe6f738":"code","babd5ac5":"code","6f92863b":"code","3a8f8484":"code","e992ff16":"code","17ff6104":"code","0891e78a":"markdown","8224d7cf":"markdown","9eb6199b":"markdown","86804ea5":"markdown","c45d0da1":"markdown","87cd939f":"markdown","5e40a93c":"markdown","82a27c0c":"markdown","86dc6630":"markdown"},"source":{"45f42943":"import numpy as np\nimport pandas as pd\n\nimport urllib.request\nfrom PIL import Image\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import RepeatedStratifiedKFold, RepeatedKFold, KFold\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","246a1c28":"df = pd.read_csv(\"data_diamonds\/diamonds_train.csv\", index_col=0)","0b623678":"df.info()","9df15b79":"df.cut.unique()","7ca7d96a":"df.color.unique()","b01e0bff":"df.clarity.unique()","8b718bd8":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(), annot= True, vmax=1, vmin=-1);","a7554428":"df[df.carat == 2].nunique()","bcf8108e":"df[(df.depth == 65)&(df.clarity == 'SI1')].sort_values(['carat', 'price'], ascending = False)","c794e798":"df[(df.cut == 'Very Good') & (df.color == 'G') & (df.carat == 2) & (df.clarity == 'SI1')].sort_values(['price'], ascending = False).head(30)","855785d2":"df.sort_values(['price'], ascending= False)","c2b7ec57":"sns.boxplot(df['price'])","c9b014f4":"df","dc4bd1d2":"df.cut.unique()","38ad6f3b":"cut_conditions = [(df.cut == 'Fair'), (df.cut == 'Good'), (df.cut == 'Very Good'), (df.cut == 'Premium'), (df.cut == 'Ideal')]\ncut_eleccion = [1, 2, 3, 4, 5]\ndf['cut_ponderado'] = np.select(cut_conditions, cut_eleccion)","589c4221":"color_conditions = [(df.color == 'D'), (df.color == 'E'), (df.color == 'F'), (df.color == 'G'), (df.color == 'H'), (df.color == 'I'), (df.color == 'J')]\ncolor_eleccion = [7, 6, 5, 4, 3, 2, 1]\ndf['color_ponderado'] = np.select(color_conditions, color_eleccion)","76faff35":"df.clarity.nunique()","76851011":"clarity_conditions = [(df.clarity == 'I1'), (df.clarity == 'SI2'), (df.clarity == 'SI1'), (df.clarity == 'VS2'), (df.clarity == 'VS1'), (df.clarity == 'VVS2'), (df.clarity == 'VVS1'), (df.clarity == 'IF')]\nclarity_eleccion = [1, 2, 3, 4, 5, 6, 7, 8]\ndf['clarity_ponderado'] = np.select(clarity_conditions, clarity_eleccion)","7d7415fa":"print(df.depth.max())\nprint(df.depth.min())","062d28e7":"sns.boxplot(df.depth)\nprint(df.depth.quantile(0.25))\nprint(df.depth.quantile(0.75))\nprint(df.depth.mean())","55e9ee81":"depth_conditions =   [((df.depth > 59.5) & (df.depth < 62.9)),\n                    ((df.depth > 56.2) & (df.depth < 59.5)) | ((df.depth > 62.9) & (df.depth < 65)), \n                    ((df.depth > 53.2) & (df.depth < 56.2)) | ((df.depth > 65) & (df.depth < 68))]\ndepth_eleccion = [4, 3, 2]\ndf['depth_ponderado'] = np.select(depth_conditions, depth_eleccion, default= 1)","103672da":"df","2a20a75e":"dummies_cut = pd.get_dummies(df[\"cut\"], prefix='dummie')\ndummies_color = pd.get_dummies(df[\"color\"], prefix='dummie')\ndummies_clarity = pd.get_dummies(df[\"clarity\"], prefix='dummie')","831ce8ef":"df = pd.concat([df, dummies_cut, dummies_color, dummies_clarity], axis = 1)","1e0a9757":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(), annot= True, vmax=1, vmin=-1);","8d49e189":"df.columns","faa90901":"lista_x = ['carat', 'cut_ponderado', 'color_ponderado', 'clarity_ponderado', 'depth_ponderado']\nx = np.array(df[lista_x])\ny =np.array(df.price)\nprint('x:', x.shape)\nprint('y:', y.shape)","6815dd31":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)","5cfd7453":"model_random_forest = RandomForestRegressor(n_estimators=100, random_state=42, warm_start=False)\nmodel_random_forest.fit(x_train, y_train)","ef26ac3f":"model_random_forest.score(x_train,y_train)","ebf83cf5":"model_random_forest.score(x_test,y_test)","9c98f7eb":"prediccion = model_random_forest.predict(x_test)\nprediccion","b0a83477":"np.sqrt(mean_squared_error(y_test, prediccion))","7ea7e868":"model_random_forest.fit(x, y)","0c817996":"prediccion_total = model_random_forest.predict(x)\nprediccion_total","bc94f9fc":"np.sqrt(mean_squared_error(y, prediccion_total))","5c216843":"df_test = pd.read_csv(\"data_diamonds\/diamonds_test.csv\", index_col=0)\ndf_test.head()","399c566d":"cut_conditions_test = [(df_test.cut == 'Fair'), (df_test.cut == 'Good'), (df_test.cut == 'Very Good'), (df_test.cut == 'Premium'), (df_test.cut == 'Ideal')]\ncut_eleccion_test = [1, 2, 3, 4, 5]\ndf_test['cut_ponderado'] = np.select(cut_conditions_test, cut_eleccion_test)","d443aa1e":"color_conditions_test = [(df_test.color == 'D'), (df_test.color == 'E'), (df_test.color == 'F'), (df_test.color == 'G'), (df_test.color == 'H'), (df_test.color == 'I'), (df_test.color == 'J')]\ncolor_eleccion_test = [7, 6, 5, 4, 3, 2, 1]\ndf_test['color_ponderado'] = np.select(color_conditions_test, color_eleccion_test)","1e6f6445":"clarity_conditions_test = [(df_test.clarity == 'I1'), (df_test.clarity == 'SI2'), (df_test.clarity == 'SI1'), (df_test.clarity == 'VS2'), (df_test.clarity == 'VS1'), (df_test.clarity == 'VVS2'), (df_test.clarity == 'VVS1'), (df_test.clarity == 'IF')]\nclarity_eleccion_test = [1, 2, 3, 4, 5, 6, 7, 8]\ndf_test['clarity_ponderado'] = np.select(clarity_conditions_test, clarity_eleccion_test)","32b0c735":"depth_conditions_test =   [((df_test.depth > 59.5) & (df_test.depth < 62.9)),\n                    ((df_test.depth > 56.2) & (df_test.depth < 59.5)) | ((df_test.depth > 62.9) & (df_test.depth < 65)), \n                    ((df_test.depth > 53.2) & (df_test.depth < 56.2)) | ((df_test.depth > 65) & (df_test.depth < 68))]\ndepth_eleccion_test = [4, 3, 2]\ndf_test['depth_ponderado'] = np.select(depth_conditions_test, depth_eleccion_test, default= 1)","9fb42656":"dummies_cut_test = pd.get_dummies(df_test[\"cut\"], prefix='dummie')\ndummies_color_test = pd.get_dummies(df_test[\"color\"], prefix='dummie')\ndummies_clarity_test = pd.get_dummies(df_test[\"clarity\"], prefix='dummie')","66f1c780":"df_test = pd.concat([df_test, dummies_cut_test, dummies_color_test, dummies_clarity_test], axis = 1)\ndf_test.head()","593c77b0":"lista_x_test = ['carat', 'cut_ponderado', 'color_ponderado', 'clarity_ponderado', 'depth_ponderado']\nx_predecir = np.array(df_test[lista_x_test])","44cfd801":"x","14064a9b":"x_predecir","701e73af":"prediccion_submit = model_random_forest.predict(x_predecir)\nprediccion_submit","8237f839":"sample = pd.read_csv(\"data_diamonds\/sample_submission.csv\")","5f0c208c":"sample.head()","67596378":"submission = pd.DataFrame({\"id\": range(len(prediccion_submit)), \"price\": prediccion_submit})\nsubmission.head()","d8306127":"submission.shape","355eb565":"def chequeator(df_to_submit, nombre_archivo):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \n    Si no, LEE EL MENSAJE Y HAZLE CASO.\n    \n    Si a\u00fan no:\n    - apaga tu ordenador, \n    - date una vuelta, \n    - enciendelo otra vez, \n    - abre este notebook y \n    - leelo todo de nuevo. \n    Todos nos merecemos una segunda oportunidad. Tambi\u00e9n t\u00fa.\n    \"\"\"\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                df_to_submit.to_csv(nombre_archivo + '.csv', index = False) #muy importante el index = False\n                urllib.request.urlretrieve(\"https:\/\/i.kym-cdn.com\/photos\/images\/facebook\/000\/747\/556\/27a.jpg\", \"gfg.png\")     \n                img = Image.open(\"gfg.png\")\n                img.show()   \n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n        print(\"\\nMensaje secreto de Clara: No me puedo creer que despu\u00e9s de todo este notebook hayas hecho alg\u00fan cambio en las filas de `diamonds_test.csv`. Lloro.\")","b3e26245":"chequeator(submission, 'submission')","046f56a2":"df.columns","6f7ca4cd":"x2 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx2.columns","4e4dc05f":"lista_x2 = list(x2.columns)","4dde693b":"x2 = np.array(df[lista_x2])\ny =np.array(df.price)\nprint('x2:', x2.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x2, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest2 = RandomForestRegressor(n_estimators=100, warm_start=False, random_state= 42)\nmodel_random_forest2.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest2.score(x_train,y_train))\nprint('Score TEST:', model_random_forest2.score(x_test,y_test))\nprediccion2 = model_random_forest2.predict(x_test)\nprediccion2\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion2)))","2fedf9f2":"model_random_forest2.fit(x2, y)\nprediccion_total2 = model_random_forest2.predict(x2)\nprediccion_total2","10b44d59":"print('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total2)))","50305570":"x_predecir2 = np.array(df_test[lista_x2])\nx_predecir2","43d19caf":"prediccion_submit2 = model_random_forest2.predict(x_predecir2)\nprediccion_submit2","ac670816":"submission2 = pd.DataFrame({\"id\": range(len(prediccion_submit2)), \"price\": prediccion_submit2})\nsubmission2.head()","311f9ec2":"chequeator(submission2, 'submission2')","6938f829":"x3 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx3.columns","f83d5420":"lista_x3 = list(x3.columns)","e4dc44b1":"x3 = np.array(df[lista_x3])\ny = np.array(df.price)\nprint('x3:', x3.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x3, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest3 = RandomForestRegressor(n_estimators=200, max_depth= 20,  warm_start=False, random_state= 42)\nmodel_random_forest3.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest3.score(x_train,y_train))\nprint('Score TEST:', model_random_forest3.score(x_test,y_test))\nprediccion3 = model_random_forest3.predict(x_test)\nprediccion3\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion3)))","873dd7fb":"model_random_forest3.fit(x3, y)\nprediccion_total3 = model_random_forest3.predict(x3)\nprediccion_total3","13162912":"print('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total3)))","0e2859f9":"x_predecir3 = np.array(df_test[lista_x3])\nx_predecir3","a8d8d8a0":"prediccion_submit3 = model_random_forest3.predict(x_predecir3)\nprediccion_submit3","3e55ae30":"submission3 = pd.DataFrame({\"id\": range(len(prediccion_submit3)), \"price\": prediccion_submit3})\nsubmission3.head()","de8a5388":"chequeator(submission3, 'submission3')","85c4920a":"x4 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx4.columns","75326f5d":"lista_x4 = list(x4.columns)","1a8d77a6":"x4 = np.array(df[lista_x4])\ny = np.array(df.price)\nprint('x4:', x4.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x4, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest4 = RandomForestRegressor(n_estimators=200, max_depth= 30,  warm_start=False, random_state= 42)\nmodel_random_forest4.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest4.score(x_train,y_train))\nprint('Score TEST:', model_random_forest4.score(x_test,y_test))\nprediccion4 = model_random_forest4.predict(x_test)\nprediccion4\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion4)))","95c93477":"model_random_forest4.fit(x4, y)\nprediccion_total4 = model_random_forest4.predict(x4)\nprediccion_total4","9e186e2f":"print('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total4)))","b0e19846":"x_predecir4 = np.array(df_test[lista_x4])\nx_predecir4","196323e1":"prediccion_submit4 = model_random_forest4.predict(x_predecir4)\nprediccion_submit4","7bcad28e":"submission4 = pd.DataFrame({\"id\": range(len(prediccion_submit4)), \"price\": prediccion_submit4})\nsubmission4.head()","bad88fc5":"chequeator(submission4, 'submission4')","425ad454":"x5 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx5.columns\nlista_x5 = list(x5.columns)\nx5 = np.array(df[lista_x5])\ny = np.array(df.price)\nprint('x5:', x5.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x5, y, test_size=0.15, random_state=43)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest5 = RandomForestRegressor(n_estimators=200, max_depth= 30, warm_start=False, random_state= 43)\nmodel_random_forest5.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest5.score(x_train,y_train))\nprint('Score TEST:', model_random_forest5.score(x_test,y_test))\nprediccion5 = model_random_forest5.predict(x_test)\nprediccion5\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion5)))\nmodel_random_forest5.fit(x5, y)\nprediccion_total5 = model_random_forest5.predict(x5)\nprediccion_total5\nprint('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total5)))\nx_predecir5 = np.array(df_test[lista_x5])\nx_predecir5\nprediccion_submit5 = model_random_forest5.predict(x_predecir5)\nprediccion_submit5\nsubmission5 = pd.DataFrame({\"id\": range(len(prediccion_submit5)), \"price\": prediccion_submit5})\nsubmission5.head()","6a40ebf7":"chequeator(submission5, 'submission7')","c28dc32a":"x5 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx5.columns\nlista_x5 = list(x5.columns)\nx5 = np.array(df[lista_x5])\ny = np.array(df.price)\nprint('x5:', x5.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x5, y, test_size=0.13, random_state=44)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest5 = RandomForestRegressor(n_estimators = 210, max_depth= 30, warm_start=False, random_state= 44)\nmodel_random_forest5.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest5.score(x_train,y_train))\nprint('Score TEST:', model_random_forest5.score(x_test,y_test))\nprediccion5 = model_random_forest5.predict(x_test)\nprediccion5\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion5)))\nmodel_random_forest5.fit(x5, y)\nprediccion_total5 = model_random_forest5.predict(x5)\nprediccion_total5\nprint('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total5)))\nx_predecir5 = np.array(df_test[lista_x5])\nx_predecir5\nprediccion_submit5 = model_random_forest5.predict(x_predecir5)\nprediccion_submit5\nsubmission5 = pd.DataFrame({\"id\": range(len(prediccion_submit5)), \"price\": prediccion_submit5})\nsubmission5.head()","644c2c8c":"chequeator(submission5, 'submission11')","8ec4cce6":"x5 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx5.columns\nlista_x5 = list(x5.columns)\nx5 = np.array(df[lista_x5])\ny = np.array(df.price)\nprint('x5:', x5.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x5, y, test_size=0.15, random_state=43)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest5 = RandomForestRegressor(n_estimators=200, max_depth= 30, warm_start=False, random_state= 43)\nmodel_random_forest5.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest5.score(x_train,y_train))\nprint('Score TEST:', model_random_forest5.score(x_test,y_test))\nprediccion5 = model_random_forest5.predict(x_test)\nprediccion5\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion5)))\nmodel_random_forest5.fit(x5, y)\nprediccion_total5 = model_random_forest5.predict(x5)\nprediccion_total5\nprint('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total5)))\nx_predecir5 = np.array(df_test[lista_x5])\nx_predecir5\nprediccion_submit5 = model_random_forest5.predict(x_predecir5)\nprediccion_submit5\nsubmission5 = pd.DataFrame({\"id\": range(len(prediccion_submit5)), \"price\": prediccion_submit5})\nsubmission5.head()","a92ce292":"df_2 = pd.read_csv(\"data_diamonds\/diamonds_train.csv\", index_col=0)\n\n#==============================================================================================================================================================================\n\ncut_conditions_2 = [(df_2.cut == 'Fair'), (df_2.cut == 'Good'), (df_2.cut == 'Very Good'), (df_2.cut == 'Premium'), (df_2.cut == 'Ideal')]\ncut_eleccion_2 = [1, 1.1, 1.3, 1.6, 2]\ndf_2['cut_ponderado'] = np.select(cut_conditions_2, cut_eleccion_2)\n\n#==============================================================================================================================================================================\n\ncolor_conditions_2 = [(df_2.color == 'D'), (df_2.color == 'E'), (df_2.color == 'F'), (df_2.color == 'G'), (df_2.color == 'H'), (df_2.color == 'I'), (df_2.color == 'J')]\ncolor_eleccion_2 = [3.1, 2.5, 2, 1.6, 1.3, 1.1, 1]\ndf_2['color_ponderado'] = np.select(color_conditions_2, color_eleccion_2)\n\n#==============================================================================================================================================================================\n\nclarity_conditions_2 = [(df_2.clarity == 'I1'), (df_2.clarity == 'SI2'), (df_2.clarity == 'SI1'), (df_2.clarity == 'VS2'), (df_2.clarity == 'VS1'), (df_2.clarity == 'VVS2'), (df_2.clarity == 'VVS1'), (df_2.clarity == 'IF')]\nclarity_eleccion_2 = [1, 1.1, 1.3, 1.6, 2, 2.5, 3.1, 3.8]\ndf_2['clarity_ponderado'] = np.select(clarity_conditions_2, clarity_eleccion_2)\n\n#==============================================================================================================================================================================\n\ndepth_conditions_2 =   [((df_2.depth > 59.5) & (df_2.depth < 62.9)),\n                    ((df_2.depth > 56.2) & (df_2.depth < 59.5)) | ((df_2.depth > 62.9) & (df_2.depth < 65)), \n                    ((df_2.depth > 53.2) & (df_2.depth < 56.2)) | ((df_2.depth > 65) & (df_2.depth < 68))]\ndepth_eleccion_2 = [1.6, 1.3, 1.1]\ndf_2['depth_ponderado'] = np.select(depth_conditions_2, depth_eleccion_2, default= 1)\n\n#==============================================================================================================================================================================\n\ndummies_cut_2 = pd.get_dummies(df_2[\"cut\"], prefix='dummie')\ndummies_color_2 = pd.get_dummies(df_2[\"color\"], prefix='dummie')\ndummies_clarity_2 = pd.get_dummies(df_2[\"clarity\"], prefix='dummie')\n\n#==============================================================================================================================================================================\n\ndf_2 = pd.concat([df_2, dummies_cut_2, dummies_color_2, dummies_clarity_2], axis = 1)\ndf_2.head()","8e118eaa":"df_test_2 = pd.read_csv(\"data_diamonds\/diamonds_test.csv\", index_col=0)\n\n#==============================================================================================================================================================================\n\ncut_conditions_test_2 = [(df_test_2.cut == 'Fair'), (df_test_2.cut == 'Good'), (df_test_2.cut == 'Very Good'), (df_test_2.cut == 'Premium'), (df_test_2.cut == 'Ideal')]\ncut_eleccion_test_2 = [1, 1.1, 1.3, 1.6, 2]\ndf_test_2['cut_ponderado'] = np.select(cut_conditions_test_2, cut_eleccion_test_2)\n\n#==============================================================================================================================================================================\n\ncolor_conditions_test_2 = [(df_test_2.color == 'D'), (df_test_2.color == 'E'), (df_test_2.color == 'F'), (df_test_2.color == 'G'), (df_test_2.color == 'H'), (df_test_2.color == 'I'), (df_test_2.color == 'J')]\ncolor_eleccion_test_2 = [3.1, 2.5, 2, 1.6, 1.3, 1.1, 1]\ndf_test_2['color_ponderado'] = np.select(color_conditions_test_2, color_eleccion_test_2)\n\n#==============================================================================================================================================================================\n\nclarity_conditions_test_2 = [(df_test_2.clarity == 'I1'), (df_test_2.clarity == 'SI2'), (df_test_2.clarity == 'SI1'), (df_test_2.clarity == 'VS2'), (df_test_2.clarity == 'VS1'), (df_test_2.clarity == 'VVS2'), (df_test_2.clarity == 'VVS1'), (df_test_2.clarity == 'IF')]\nclarity_eleccion_test_2 = [1, 1.1, 1.3, 1.6, 2, 2.5, 3.1, 3.8]\ndf_test_2['clarity_ponderado'] = np.select(clarity_conditions_test_2, clarity_eleccion_test_2)\n\n#==============================================================================================================================================================================\n\ndepth_conditions_test_2 =   [((df_test_2.depth > 59.5) & (df_test_2.depth < 62.9)),\n                    ((df_test_2.depth > 56.2) & (df_test_2.depth < 59.5)) | ((df_test_2.depth > 62.9) & (df_test_2.depth < 65)), \n                    ((df_test_2.depth > 53.2) & (df_test_2.depth < 56.2)) | ((df_test_2.depth > 65) & (df_test_2.depth < 68))]\ndepth_eleccion_test_2 = [1.6, 1.3, 1.1]\ndf_test_2['depth_ponderado'] = np.select(depth_conditions_test_2, depth_eleccion_test_2, default= 1)\n\n#==============================================================================================================================================================================\n\ndummies_cut_test_2 = pd.get_dummies(df_test_2[\"cut\"], prefix='dummie')\ndummies_color_test_2 = pd.get_dummies(df_test_2[\"color\"], prefix='dummie')\ndummies_clarity_test_2 = pd.get_dummies(df_test_2[\"clarity\"], prefix='dummie')\n\n#==============================================================================================================================================================================\n\ndf_test_2 = pd.concat([df_test_2, dummies_cut_test_2, dummies_color_test_2, dummies_clarity_test_2], axis = 1)\ndf_test_2.head()","e64a29b1":"x4_2 = df_2.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx4_2.columns\nlista_x4_2 = list(x4_2.columns)\nx4_2 = np.array(df[lista_x4_2])\ny = np.array(df.price)\nprint('x4_2:', x4_2.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x4_2, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest4_2 = RandomForestRegressor(n_estimators=200, max_depth= 30,  warm_start=True, random_state= 42)\nmodel_random_forest4_2.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest4_2.score(x_train,y_train))\nprint('Score TEST:', model_random_forest4_2.score(x_test,y_test))\nprediccion4_2 = model_random_forest4_2.predict(x_test)\nprediccion4_2\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion4_2)))\nmodel_random_forest4_2.fit(x4_2, y)\nprediccion_total4_2 = model_random_forest4_2.predict(x4_2)\nprediccion_total4_2\nprint('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total4_2)))\nx_predecir4_2 = np.array(df_test[lista_x4_2])\nx_predecir4_2\nprediccion_submit4_2 = model_random_forest4_2.predict(x_predecir4_2)\nprediccion_submit4_2\nsubmission4_2 = pd.DataFrame({\"id\": range(len(prediccion_submit4_2)), \"price\": prediccion_submit4_2})\nsubmission4_2.head()","daea85c9":"chequeator(submission4_2, 'submission4_2_2')","656c351d":"import os, pickle","12ce0329":"x4 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx4.columns","9b36db3e":"x4 = np.array(x4)\nprint('x4.shape:',x4.shape)\nprint('y.shape:', y.shape)","1bea1922":"k_fold = RepeatedKFold(n_splits= 10, n_repeats=2, random_state=42)","a8d0b20e":"model_random_forest_warm = RandomForestRegressor(n_estimators= 100, max_depth=30, warm_start=True, random_state=42)","899aea66":"path = os.getcwd() + os.sep","518e914b":"x_train, x_test, y_train, y_test = train_test_split(x4, y, test_size=0.2, random_state=42)\nprint('x_train.shape =', x_train.shape)\nprint('x_test.shape =', x_test.shape)\nprint('y_train.shape =', y_train.shape)\nprint('y_test.shape =', y_test.shape)","97c437f6":"val_score = []\ntrain_score = []\nfor i, (train, val) in enumerate(k_fold.split(x_train)):\n    print(\"Iteraci\u00f3n:\", i+1)\n    print(\"train\/\u00edndices batch:\", train)\n    print(\"batch_size:\", len(train))\n    #print(\"val:\", val)\n    print(\"val_size:\", len(val))\n    model_random_forest_warm.fit(x_train[train], y_train[train])\n\n    model_random_forest_warm.n_estimators +=100\n\n    score_val = model_random_forest_warm.score(x_train[val], y_train[val])\n    val_score.append(score_val)\n    score_train = model_random_forest_warm.score(x_train[train], y_train[train])\n    train_score.append(score_train)\n    print(\"score_train:\", score_train)\n    print(\"score_val:\", score_val)\n\n    if i % 4 == 0: \n        pickle.dump(model_random_forest_warm, open(path + \"model_saved.sav\" , \"wb\"))\n    \n    if score_val < np.mean(val_score) \/\/ 2:\n        print(\"Se ha encontrado una bajada importante de accuracy en validaci\u00f3n\")\n        print(\"Este es el responsable:\")\n        print(X_train[val])\n        break \n\n    if np.mean(val_score) >= 0.99 and len(val_score) > 5:\n        pickle.dump(model_random_forest_warm, open(path + \"model_saved\" + str(i) + \".sav\" , \"wb\"))\n        print(\"STOP\")\n        break\n    print('\\n=====================\\n')\n","1fe6f738":"modelo_0 = pickle.load(open(path + 'model_saved.sav0', 'rb'))\nmodelo_0","babd5ac5":"prediccion_test_modelo_0 = modelo_0.predict(x_test)\nprediccion_test_modelo_0","6f92863b":"print('RMSE prediccion test modelo 0:', np.sqrt(mean_squared_error(y_test, prediccion_test_modelo_5)))","3a8f8484":"x6 = df.drop(['price', 'cut', 'color', 'clarity'], axis=1)\nx6.columns\nlista_x6 = list(x6.columns)\nx6 = np.array(df[lista_x6])\ny = np.array(df.price)\nprint('x6:', x6.shape)\nprint('y:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x6, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nmodel_random_forest6 = RandomForestRegressor(n_estimators=200, max_depth= 30, warm_start=True, random_state= 42)\nmodel_random_forest6.fit(x_train, y_train)\nprint('Score TRAIN:', model_random_forest6.score(x_train,y_train))\nprint('Score TEST:', model_random_forest6.score(x_test,y_test))\nprediccion6 = model_random_forest6.predict(x_test)\nprediccion6\nprint('RMSE entrenado con TRAIN:', np.sqrt(mean_squared_error(y_test, prediccion6)))\nmodel_random_forest6.fit(x6, y)\nprediccion_total6 = model_random_forest6.predict(x6)\nprediccion_total6\nprint('RMSE entrenado con TOTALIDAD:', np.sqrt(mean_squared_error(y, prediccion_total6)))\nx_predecir6 = np.array(df_test[lista_x6])\nx_predecir6\nprediccion_submit6 = model_random_forest6.predict(x_predecir6)\nprediccion_submit6\nsubmission6 = pd.DataFrame({\"id\": range(len(prediccion_submit6)), \"price\": prediccion_submit6})\nsubmission6.head()","e992ff16":"chequeator(submission4_2, 'submission4_2')","17ff6104":"print('RMSE Train 1:', np.sqrt(mean_squared_error(y_test, prediccion)))\nprint('RMSE Total 1:', np.sqrt(mean_squared_error(y, prediccion_total)))\nprint('\\n===============================\\n')\nprint('RMSE Train 2:', np.sqrt(mean_squared_error(y_test, prediccion2)))\nprint('RMSE Total 2:', np.sqrt(mean_squared_error(y, prediccion_total2)))\nprint('\\n===============================\\n')\nprint('RMSE Train 3:', np.sqrt(mean_squared_error(y_test, prediccion3)))\nprint('RMSE Total 3:', np.sqrt(mean_squared_error(y, prediccion_total3)))\nprint('\\n===============================\\n')\nprint('RMSE Train 4:', np.sqrt(mean_squared_error(y_test, prediccion4)))\nprint('RMSE Total 4:', np.sqrt(mean_squared_error(y, prediccion_total4)))\nprint('\\n===============================\\n')\nprint('RMSE Train 4_2:', np.sqrt(mean_squared_error(y_test, prediccion4_2)))\nprint('RMSE Total 4_2:', np.sqrt(mean_squared_error(y, prediccion_total4_2)))\nprint('\\n===============================\\n')","0891e78a":"---\n\n# RandomForest Regressor --> Con todas las columnas (ponderadas, dummies, y demas)","8224d7cf":"## Por las caracter\u00edsticas del target (price), utilizamos un modelo de REGRESI\u00d3N","9eb6199b":"---\n\n# n_estimators","86804ea5":"---\n\n# RandomForest Regressor (n_splits = 200 , max_depth = 30) --> Con todas las columnas (ponderadas, dummies, y demas)","c45d0da1":"---\n\n# RandomForest Regressor (n_splits = 200 , max_depth = 20) --> Con todas las columnas (ponderadas, dummies, y demas)","87cd939f":"--- \n\n# ","5e40a93c":"# EL MEJOR","82a27c0c":"---","86dc6630":"# Resultados de cada modelo"}}