{"cell_type":{"4be986a7":"code","d0fc7c4f":"code","4637ac0a":"code","139d0415":"code","cce23d74":"code","5ce60f92":"code","c6dd5867":"code","0b9d8616":"code","a83b2842":"code","161ff6bc":"code","246a26de":"code","382f5980":"code","a191ca54":"code","e8d62e39":"code","9d22d791":"code","79aa2e6a":"code","4e8f6f64":"code","c000313d":"code","c359a2f1":"code","b0938c84":"code","cc21f8bc":"code","4d5a7a09":"code","ad4fd394":"code","8a03edb9":"code","8a14b9f1":"code","49189f39":"code","d39266af":"code","7cc3c04f":"code","9631454d":"code","663347c1":"code","58e32a90":"code","47744614":"code","efee62ce":"code","f5eddae7":"code","8359d19b":"code","a5bcf1f5":"code","f9b2f66c":"code","72ce0ee1":"code","a215791d":"code","8375fd75":"code","d87c170e":"code","148b2905":"code","560069d4":"code","a579b002":"code","4a708d34":"code","59f347c9":"code","f2aa0dcb":"code","42f8affa":"code","b3078ba9":"code","7b851202":"code","89643df3":"code","4c51b321":"code","e5e31c72":"code","1fbc49cd":"code","7a00c3ec":"code","dd923766":"code","9e196200":"code","7fe96c2b":"code","95d5726a":"code","95f2ec4c":"code","05405c0c":"code","ed67443c":"code","0242f836":"code","dab73024":"code","18577d68":"code","58c46933":"code","21401641":"code","f01afa19":"code","2e4431dc":"code","b03416a5":"code","64f3b023":"code","3d34ca36":"code","42272fd7":"code","da5be3f5":"code","0dc17842":"code","cdee4136":"code","10595090":"code","c5094c28":"code","5f07fb81":"code","dda04620":"code","b0ea1ce6":"code","215288a8":"code","d04c62d7":"code","6395ea16":"code","654b7bb7":"code","bdd3deba":"code","45e48025":"code","79a52400":"code","8f0a0cb9":"code","df6ebfb8":"code","64eeecce":"code","f70d84f1":"code","c06e1c92":"code","8b156c1a":"code","05c51412":"code","83e36413":"code","a07e2f37":"code","883b4708":"code","26bae1de":"code","01121487":"markdown","b90dbd25":"markdown","740d0851":"markdown","ab27e13d":"markdown","56cb5230":"markdown","d4b1627e":"markdown","67a20aee":"markdown","6c754907":"markdown","f1e9df38":"markdown","2b53b224":"markdown","5891e3d3":"markdown","702e47d1":"markdown","861653e7":"markdown","ca043af3":"markdown","5da4b845":"markdown","662ab4fd":"markdown","72877161":"markdown","862b9638":"markdown","0e0d54fc":"markdown","7af98154":"markdown","fb7a20b6":"markdown","7cc00ef3":"markdown","d0f3b204":"markdown"},"source":{"4be986a7":"#importing Necessary library\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler, LabelEncoder\nfrom sklearn.model_selection import GridSearchCV,train_test_split\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,f1_score,classification_report\nimport warnings\nwarnings.filterwarnings('ignore')","d0fc7c4f":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4637ac0a":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()\n# train_data = pd.read_csv('train.csv')\n# train_data","139d0415":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()\n# test_data = pd.read_csv('test.csv')\n# test_data","cce23d74":"train_data.info()","5ce60f92":"features = ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Embarked']","c6dd5867":"df = train_data[features]","0b9d8616":"df.isna().sum()","a83b2842":"#were replacing age with median\ndf.Age.fillna(df.Age.median(),inplace = True)\ndf.Embarked.fillna(df.Embarked.mode(),inplace=True)","161ff6bc":"sns.barplot(df.Sex,df.Survived)\nplt.show()","246a26de":"plt.rcParams[\"figure.figsize\"] = [10, 8]\nplt.rcParams[\"figure.autolayout\"] = True\nfig, ax =plt.subplots(2,2)\nsns.barplot(df.Pclass,df.Survived,ax=ax[0,0])\nsns.barplot(df.SibSp,df.Survived,ax=ax[0,1])\nsns.barplot(df.Parch,df.Survived,ax=ax[1,0])\nsns.barplot(df.Embarked,df.Survived,ax=ax[1,1])\nfig.show()","382f5980":"plt.figure(figsize=(6,4))\nsns.distplot(df.Age)\nplt.show()","a191ca54":"df['name_extracted'] = df['Name'].apply(lambda x : x.split(',')[1].split('.')[0].strip())","e8d62e39":"df","9d22d791":"df['name_extracted'].groupby(df['name_extracted']).count()","79aa2e6a":"df['name_extracted'].replace(['Ms', 'Mlle', 'Mme'], 'Miss', inplace=True)\ndf['name_extracted'].replace(['Lady'], 'Mrs', inplace=True)\ndf['name_extracted'].replace(['Sir', 'Rev'], 'Mr', inplace=True)","4e8f6f64":"df.name_extracted [~df.name_extracted.isin(['Miss','Mrs','Mr'])] = 'Others'","c000313d":"df.name_extracted.unique()","c359a2f1":"df.Age = pd.cut(df.Age,bins=[0,2,17,65,99],labels=['Baby','Child','Adult','Elderly'])","b0938c84":"plt.rcParams[\"figure.figsize\"] = [5, 4]\nsns.countplot(df.Age)\nplt.show()","cc21f8bc":"sns.distplot(df.Fare)\nplt.show()","4d5a7a09":"sns.boxplot(df.Survived,df.Fare)\nplt.show()","ad4fd394":"df.Fare.describe()","8a03edb9":"# df.Fare = pd.cut(df.Fare,bins=[0,200,300,400,513],labels=['cheap','standard','expensive','lexury'])","8a14b9f1":"df","49189f39":"#standardising Fare\nscale = pd.DataFrame(df.Fare)\nstd_scale = StandardScaler()\ndf.Fare = std_scale.fit_transform(scale)\ndf","d39266af":"df.Embarked.unique()","7cc3c04f":"df.dropna(inplace=True)","9631454d":"def encode(data,col):\n    le = LabelEncoder()\n    data[col] = le.fit_transform(data[col])","663347c1":"encode(df,'Sex')\nencode(df,'Age')\nencode(df,'Embarked')\nencode(df,'name_extracted')\n# encode(df,'Fare')","58e32a90":"df.drop_duplicates(inplace=True)","47744614":"df","efee62ce":"df.columns","f5eddae7":"X = df.drop(['Survived','Name'],axis=1)\ny = df.iloc[:,:1]","8359d19b":"X","a5bcf1f5":"X.std()","f9b2f66c":"# scale = StandardScaler()\n# scaled_X = scale.fit_transform(X)\n# scaled_X = pd.DataFrame(scaled_X,columns=X.columns)\n# scaled_X","72ce0ee1":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_resample(X,y)","a215791d":"X_train,X_test,y_train,y_test = train_test_split(X_sm, y_sm, test_size = 0.20, random_state = 12, stratify = y_sm)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","8375fd75":"# X_train,X_test,y_train,y_test = train_test_split(X, y, test_size = 0.20, random_state = 12, stratify = y)\n# X_train.shape,X_test.shape,y_train.shape,y_test.shape","d87c170e":"from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\n\n#class_weight = {1: 1}, criterion = 'entropy', max_depth = 6\n# criterion = 'gini',\n#                                   min_samples_leaf = 1,\n#                                   min_samples_split = 20,\n#                                   n_estimators = 200, class_weight='balanced'\nrf_model = RandomForestClassifier(class_weight = {1: 1}, criterion = 'entropy', max_depth = 6)\nrf_model.fit(X_train, y_train)\nrf_predictions = rf_model.predict(X_test)\nprint('Accuracy  :',accuracy_score(y_test,rf_predictions))\nprint('Precsion  :',precision_score(y_test,rf_predictions))\nprint('Recall    :',recall_score(y_test,rf_predictions))\nsns.heatmap(confusion_matrix(y_test,rf_predictions),annot=True,fmt='g')\nplt.show()","148b2905":"plt.figure(figsize=(10,7))\nplt.bar(range(len(rf_model.feature_importances_)),rf_model.feature_importances_,tick_label = X_train.columns)\nplt.show()","560069d4":"rf_model.feature_importances_","a579b002":"# params = {'n_estimators': [100, 200, 300], 'criterion':['gini', 'entropy'],\n#                                                      'min_samples_split': [2, 10, 20],\n#                                                      'min_samples_leaf': [1, 3, 5]}","4a708d34":"# random_search=RandomizedSearchCV(rf_model,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","59f347c9":"# random_search.fit(X_train,y_train)","f2aa0dcb":"# random_search.best_estimator_","42f8affa":"# random_search.best_params_","b3078ba9":"# random_search.best_score_","7b851202":"# grid = GridSearchCV(estimator=rf_model,param_grid={'n_estimators': [100, 200, 300],\n#                                                      'criterion':['gini', 'entropy'],\n#                                                      'min_samples_split': [2, 10, 20],\n#                                                      'min_samples_leaf': [1, 3, 5],\n# #                                                      'bootstrap': [True, False],\n#                                                      },cv= 10, scoring=\"accuracy\", n_jobs = -1)\n# %time grid.fit(X_train,y_train)","89643df3":"# grid.best_params_","4c51b321":"# grid.best_score_","e5e31c72":"gb = GradientBoostingClassifier(max_depth=2)\ngb.fit(X_train, y_train)\ngb_pred = gb.predict(X_test)\nprint('Accuracy  :',accuracy_score(y_test,gb_pred))\nprint('Precsion  :',precision_score(y_test,gb_pred))\nprint('Recall    :',recall_score(y_test,gb_pred))\nsns.heatmap(confusion_matrix(y_test,gb_pred),annot=True,fmt='g')\nplt.show()","1fbc49cd":"# gb_grid = GridSearchCV(estimator=gb,param_grid={'n_estimators':[100,200,300],'max_depth':[2,4,6]})\n# gb_grid.fit(X_train,y_train)","7a00c3ec":"# gb_grid.best_params_","dd923766":"# a = [base_score=0.5, booster='gbtree', colsample_bylevel=1,\n#               colsample_bynode=1, colsample_bytree=0.7,\n#               enable_categorical=False, gamma=0.0, gpu_id=-1,\n#               importance_type=None, interaction_constraints='',\n#               learning_rate=0.2, max_delta_step=0, max_depth=5,\n#               min_child_weight=5, monotone_constraints='()',\n#               n_estimators=100, n_jobs=4, num_parallel_tree=1, predictor='auto',\n#               random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n#               subsample=1, tree_method='exact', validate_parameters=1,\n#               verbosity=None]","9e196200":"from xgboost import plot_importance\nimport xgboost as xgb\nxgb = xgb.XGBClassifier(min_child_weight = 5,max_depth = 5,learning_rate = 0.2,gamma = 0.0,colsample_bytree = 0.7)\nxgb.fit(X_train, y_train)\nxgb_pred = xgb.predict(X_test)\nprint('Accuracy  :',accuracy_score(y_test,xgb_pred))\nprint('Precsion  :',precision_score(y_test,xgb_pred))\nprint('Recall    :',recall_score(y_test,xgb_pred))\nprint('F1 score  :',f1_score(y_test,xgb_pred))\nsns.heatmap(confusion_matrix(y_test,xgb_pred),annot=True,fmt='g')\nplt.show()","7fe96c2b":"plt.figure(figsize=(10,7))\nplot_importance(xgb)\nplt.show()","95d5726a":"# params={\n#  \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n#  \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n#  \"min_child_weight\" : [ 1, 3, 5, 7 ],\n#  \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n#  \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ],\n#  'booster': ['gbtree', 'gblinear', 'dart']\n# }","95f2ec4c":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV","05405c0c":"from xgboost import XGBClassifier\nxgb = XGBClassifier()","ed67443c":"# grid = GridSearchCV(estimator=xgb, param_grid=params,n_jobs=-1)\n# grid.fit(X_train,y_train)","0242f836":"from xgboost import XGBClassifier","dab73024":"# model = XGBClassifier()","18577d68":"# random_search=RandomizedSearchCV(model,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","58c46933":"# random_search.fit(X_train,y_train)","21401641":"# random_search.best_estimator_","f01afa19":"# random_search.best_params_","2e4431dc":"# random_search.best_score_","b03416a5":"# gb_grid = GridSearchCV(estimator=gb,param_grid={'n_estimators':[100,200,300],'max_depth':[2,4,6]})\n# gb_grid.fit(X_train,y_train)","64f3b023":"import lightgbm\nlgb = lightgbm.LGBMClassifier(max_depth=4, min_data_in_leaf=100,\n               n_estimators=500, num_leaves=35, class_weight = 'balanced')\nlgb.fit(X_train, y_train)\nlgb_pred = lgb.predict(X_test)\nprint('Accuracy  :',accuracy_score(y_test,lgb_pred))\nprint('Precsion  :',precision_score(y_test,lgb_pred))\nprint('Recall    :',recall_score(y_test,lgb_pred))\nprint('f1 score  :',f1_score(y_test,lgb_pred))\nsns.heatmap(confusion_matrix(y_test,lgb_pred),annot=True,fmt='g')\nplt.show()","3d34ca36":"# param_grid = {\n#     'boosting_type' : ['gbdt','rf','goss','dart'],\n#     'num_leaves': [10, 20, 25, 30, 35],\n#     \"learning_rate\": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n#     'min_data_in_leaf': [30, 50, 100, 300, 400],\n#     'max_depth': [4, 8, 10, 15],\n#     'n_estimators': [100, 200, 300, 500, 700],\n# #     'subsample_for_bin': int = 200000,\n#     }","42272fd7":"# random_search=RandomizedSearchCV(lgb,param_distributions=param_grid,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5)","da5be3f5":"# random_search.fit(X_train,y_train)","0dc17842":"# random_search.best_estimator_","cdee4136":"# random_search.best_score_","10595090":"# random_search.best_params_","c5094c28":"import tensorflow as tf\nfrom tensorflow import keras","5f07fb81":"from keras.models import Sequential\nfrom keras.layers import Flatten,Dense,Dropout","dda04620":"model = Sequential()\nmodel.add(Dense(8, input_dim = 8))\nmodel.add(Dense(1000, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1000, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = 'sigmoid'))\nmodel.summary()","b0ea1ce6":"model.compile(optimizer='Adam', loss = keras.losses.binary_crossentropy, metrics= 'accuracy')","215288a8":"model.fit(X_train,y_train, epochs=200)","d04c62d7":"y_pred = model.predict(X_test)\ny_pred = np.round(y_pred)\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","6395ea16":"test_data","654b7bb7":"test_data.isna().sum()","bdd3deba":"test_feature = ['Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Embarked']","45e48025":"test_df = test_data[test_feature]","79a52400":"test_df.Age.fillna(test_df.Age.median(),inplace = True)\ntest_df.Embarked.fillna(test_df.Embarked.mode(),inplace=True)\ntest_df.Fare.fillna(test_df.Fare.median(),inplace=True)","8f0a0cb9":"test_df['name_extracted'] = test_df['Name'].apply(lambda x : x.split(',')[1].split('.')[0].strip())\ntest_df['name_extracted'].replace(['Ms', 'Mlle', 'Mme'], 'Miss', inplace=True)\ntest_df['name_extracted'].replace(['Lady'], 'Mrs', inplace=True)\ntest_df['name_extracted'].replace(['Sir', 'Rev'], 'Mr', inplace=True)\ntest_df.name_extracted [~test_df.name_extracted.isin(['Miss','Mrs','Mr'])] = 'Others'","df6ebfb8":"test_df.Age = pd.cut(test_df.Age,bins=[0,2,17,65,99],labels=['Baby','Child','Adult','Elderly'])","64eeecce":"scale_test = pd.DataFrame(test_df.Fare)\nstd_scale = StandardScaler()\ntest_df.Fare = std_scale.fit_transform(scale_test)","f70d84f1":"encode(test_df,'Sex')\nencode(test_df,'Age')\nencode(test_df,'Embarked')\nencode(test_df,'name_extracted')","c06e1c92":"del test_df['Name']","8b156c1a":"test_df","05c51412":"# rf_model = RandomForestClassifier(n_estimators=300,criterion='entropy',class_weight={0:1,1:2})\n# rf_model.fit(X_train, y_train)\n# rf_predictions = rf_model.predict(test_df)","83e36413":"# lgb = lgbm.LGBMClassifier()\n# lgb.fit(X_train, y_train)\n# lgb_pred = gb.predict(test_df)","a07e2f37":"# **submission for Neural net**\n# y_pred = model.predict(test_df)\n# y_pred = np.round(y_pred)\n# data = pd.DataFrame(y_pred, columns=['pred']).astype('int')\n# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': data.pred})\n# output.to_csv('submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","883b4708":"# RANDOM FOREST PREDICTION\n# rf_predictions = rf_model.predict(test_df)\n# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': rf_predictions})\n# output.to_csv('submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","26bae1de":"#XGBOOST SUBMISSION\nxgb_pred = xgb.predict(test_df)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': xgb_pred})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","01121487":"### LGBM","b90dbd25":"**0.77272 leaderboard score after balancing**","740d0851":"### model submission","ab27e13d":"### Model building","56cb5230":"**0.72966 leaderborad score**","d4b1627e":"### Tasks For Team Members","67a20aee":"### GB","6c754907":"**removing features**\n1. Cabin = Around 77% of data is NaN\n2. PassengerId = not making any inportance to our mdel\n3. Ticket = Not in good format, every observation has diffrent ticket ","f1e9df38":"###### Not Balanced","2b53b224":"### preparing test data","5891e3d3":"### Importing libraries and Datasets","702e47d1":"###### balanced","861653e7":"### using ANN","ca043af3":"##### ENCODING","5da4b845":"### Taking X,y","662ab4fd":"1. ---0 to 2 = 'Toddler\/Baby'\n2. ---3 to 17 = 'Child'\n3. ---18 to 65 = 'Adult'\n4. ---66 to 99='Elderly'","72877161":"### Data Understanding","862b9638":"1. after balancing  **0.77272 leaderboard score**\n2. before balancing  **0.78229 leaderborad score**","0e0d54fc":"most of the passengers are not paid or not collected information","7af98154":"* how does far effect survival? What are some interesting plots you could do to show the relationship?\n* Do the categorical variables have any low frequency items? I know name, will have mostly unique values. But can things be derived from the name? Like \"IsSir\", or \"IsMam\"...\n* Using the Random forest, what is the variable importance?\n* Or even better - use SHAP - for finding the variable importance - \n* what about using all the features? \n* can you show any correlations between the variables, and survival? How do you show correlations between categorical (I'm not even sure thats possible lol but lets see)\n* Any missing data?\n* Is the Number variables - are they 'normal'? what distribution are they?\n* can you transform any categoricals?\n* Do you even need to One Hot Encode the categoricals with RandomForest? What if you left them as is?\n* What other models do good? XBoost? Other models? Can you test out a dozen models at once?\n* we are looking at RMSE for evaluation metrics I believe. What other evaluation metrics can we use, and can you implement them? Precision, Recall\n* So  we can evaluate the model quickly, and do things like parameters sweeps - we should implement the evaluation metrics we've defined.","fb7a20b6":"DROPING DUPLICATES","7cc00ef3":"### PREDICT ACTUAL TEST DATA","d0f3b204":"### XGB"}}