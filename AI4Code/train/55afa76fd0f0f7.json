{"cell_type":{"ea6a23d2":"code","ae4324d8":"code","92039d70":"code","be8fee2f":"code","cbb30ee9":"code","1ca6a33c":"code","d693ce97":"code","1745b953":"code","a23348b2":"code","17a3b863":"code","39c8cd10":"code","20ad17a3":"code","961ab5ba":"code","0b49e0a0":"code","b2ec1c52":"code","d3ab4b62":"code","8d64146b":"markdown","07edf608":"markdown"},"source":{"ea6a23d2":"from sklearn.datasets import fetch_california_housing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","ae4324d8":"housing=fetch_california_housing()","92039d70":"print(housing.DESCR)","be8fee2f":"df=pd.DataFrame(data=housing.data,columns=housing.feature_names)\ntarget=pd.DataFrame(data=housing.target,columns=['target'])\ndf=pd.concat([df,target],sort=True,axis=1\n            )\ndf.head(15)","cbb30ee9":"X_train_full,X_test, y_train_full,y_test=train_test_split(\n    housing.data, housing.target)\n\nX_train,X_valid, y_train,y_valid=train_test_split(\n    X_train_full,y_train_full)","1ca6a33c":"scaler1=StandardScaler()\nX_train=scaler1.fit_transform(X_train)\nX_valid=scaler1.transform(X_valid)\nx_test=scaler1.transform(X_test)","d693ce97":"model=tf.keras.models.Sequential([\n    tf.keras.layers.Dense(30,activation='relu',input_shape=X_train.shape[1:]),\n    tf.keras.layers.Dense(10,activation='relu'),\n    tf.keras.layers.Dense(1)\n])","1745b953":"model.compile(loss=tf.keras.losses.mean_squared_error,optimizer='sgd'\n             )\nhistory=model.fit(X_train,y_train,epochs=20,\n                  validation_data=(X_valid,y_valid))","a23348b2":"#mse_test = model.evaluate(X_test, y_test)","17a3b863":"X_new = X_test[:3] # pretend these are new instances\ny_pred = model.predict(X_new)\ny_pred","39c8cd10":"final_df=pd.DataFrame(history.history).plot(figsize=(10,5))\nplt.grid(True)\nplt.gca().set_ylim(0, 2.2) # set the vertical range to [0-1]\nplt.show()","20ad17a3":"input_=tf.keras.layers.Input(shape=X_train.shape[1:])\nhidden1=tf.keras.layers.Dense(30,activation='relu')(input_)\nhidden2=tf.keras.layers.Dense(10,activation='relu')(hidden1)\nconcat=tf.keras.layers.concatenate(inputs=[input_ , hidden2])\noutput=tf.keras.layers.Dense(1)(concat)\nmodel = tf.keras.Model(inputs=[input_], outputs=[output])","961ab5ba":"model.compile(loss=\"mse\", optimizer=tf.keras.optimizers.SGD(lr=1e-3))","0b49e0a0":"history1=model.fit(X_train,y_train,epochs=20,\n         validation_data=(X_valid,y_valid))","b2ec1c52":"final_df1=pd.DataFrame(history1.history).plot(figsize=(10,5))\nplt.grid(True)\nplt.gca().set_ylim(0, 2.2) # set the vertical range to [0-1]\nplt.show()","d3ab4b62":"# The End","8d64146b":"## Functional API","07edf608":"## Sequential API"}}