{"cell_type":{"e7a06143":"code","18f3b8c2":"code","5653089a":"code","efc4c486":"code","d4345221":"code","7f726705":"code","cf8aec98":"code","374e1abb":"code","3e1cc3c5":"code","67a59e12":"code","f4db45a4":"code","f36ea8ea":"code","81aa88d2":"code","dfdf3461":"code","0ee58c5d":"code","913351d0":"code","1ff171fc":"code","ee199076":"code","35f58bff":"code","e4b15dc1":"code","d7864dab":"code","8b7b8e29":"code","41aacf0e":"code","83146cdb":"code","dedf3f43":"code","00ff11cf":"code","efe55a9e":"code","3ee9e006":"code","4920cefe":"code","5994bb95":"code","891e6893":"code","239ab444":"code","058e5497":"code","86e2e521":"code","5f0e9e45":"code","1d8ba438":"code","eb4d234d":"code","a04cf357":"code","209f9632":"code","2c53bdf5":"code","9cefeb2e":"code","73460ca4":"code","c516663f":"code","59fab1c7":"code","b17036a9":"code","6fd5f4bb":"code","784f3f6e":"code","0d201a96":"code","925f841f":"code","e4f1d96a":"code","cbe79766":"code","75a7e638":"code","ecf141ad":"code","ecfeeb69":"code","673b5c22":"code","4a3ce625":"code","c1d3b39f":"code","3ac09714":"code","4441377c":"code","d399aa14":"code","2043b797":"code","2bd8ee08":"code","cb4d7135":"code","29107b98":"code","6dba7cb9":"code","9af3f248":"code","51c0dd0a":"code","963ec92f":"code","5a513ff2":"code","71bde099":"code","36e9d3a9":"code","00ac3677":"code","f4abd875":"code","d0a1c60a":"code","35d63466":"code","ac9c0ed1":"code","4fae194d":"code","7e3992a9":"code","26247f70":"code","397a6c46":"markdown","7877b01b":"markdown","86f5c2b0":"markdown","261a5ee5":"markdown","2cddb78f":"markdown","b3ab4e17":"markdown","87e391a9":"markdown","9d7c6b75":"markdown","35ade883":"markdown","a1540f61":"markdown","0686250b":"markdown"},"source":{"e7a06143":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ndf1=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","18f3b8c2":"train_original=df.copy()\ntest_original=df1.copy()","5653089a":"df.head(10)","efc4c486":"#COUNT THE NUMBER OF ROWS AND COLUMNS IN THE DATA SET.","d4345221":"df.shape","7f726705":"df1.shape","cf8aec98":"#GET SOME STATISTICS","374e1abb":"df.describe()","3e1cc3c5":"df.info()","67a59e12":"df.isnull().sum()","f4db45a4":"#VIEWING THE TEST DATASET\n\n\ndf1.head()","f36ea8ea":"df1.info()","81aa88d2":"#COUNT THE EMPTY VALUES IN EACH COLUMN\n\ndf1.isnull().sum()","dfdf3461":"data=[df,df1]\nfor dataset in data:\n    #FILTER CATEGORICAL VARIABLES\n    categorical_columns=[x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    #EXCLUDE ID COLS AND SOURCE:\n    categorical_columns =[x for x in categorical_columns if x not in['Loan_ID']]\n    \n    \n    #PRINT FREQUENCY OF CATEGORIES\nfor col in categorical_columns:\n    print('\\nFrequency of categories for variable %s'%col)\n    print(df[col].value_counts())\n    \n    ","0ee58c5d":"#GENDER\n\nsns.countplot(df['Gender'])","913351d0":"pd.crosstab(df.Gender, df.Loan_Status, margins=True)","1ff171fc":"#DEPENDENDANTS\n\nplt.figure(figsize=(6,6))\nlabels=['0','1','2','3+']\nexplode=(0.05,0,0,0)\nsize=[345,102,101,51]\nplt.pie(size,explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","ee199076":"#GET THE COUNT OF THE NUMBER OF DEPENDENTS\n\ndf.Dependents.value_counts()","35f58bff":"pd.crosstab(df.Dependents,df.Loan_Status,margins=True)","e4b15dc1":"#CREDIT HISTORY\n\nsns.countplot(df['Credit_History'])","d7864dab":"pd.crosstab(df.Credit_History,df.Loan_Status, margins=True)","8b7b8e29":"#SELF EMPLOYED\n\nsns.countplot(df['Self_Employed'])","41aacf0e":"pd.crosstab(df.Self_Employed, df.Loan_Status, margins=True)","83146cdb":"#MARRIED\n\nsns.countplot(df.Married)","dedf3f43":"pd.crosstab(df.Married, df.Loan_Status, margins=True)","00ff11cf":"#LOAN AMOUNT \n\nsns.displot(df['LoanAmount'])","efe55a9e":"#EDUCATION\n\nsns.countplot(df.Education)","3ee9e006":"#PROPERTY AREA\n\n\nsns.countplot(df.Property_Area)","4920cefe":"# APPLICANT INCOME\n\ndf['ApplicantIncome'].hist(bins=50)","5994bb95":"df.boxplot(column='ApplicantIncome')","891e6893":"# APPLICANT INCOME AND EDUCATION\n\ndf.boxplot(column='ApplicantIncome',by='Education')\n","239ab444":"temp1=df['Credit_History'].value_counts(ascending=True)\ntemp2=df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc= lambda x: x.map({'Y':1,'N':0}).mean())\nprint('Frequency Table for Credit History:')\nprint(temp1)\nprint('\\n probability of getting loan for each credit history class:')\nprint(temp2)","058e5497":"import matplotlib.pyplot as plt\nfig=plt.figure(figsize=(8,4))\nax1=fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of applicants')\nax1.set_title(\"Applicants by credit_History\")\ntemp1.plot(kind='bar')\nax2=fig.add_subplot(122)\ntemp2.plot(kind='bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","86e2e521":"temp3=pd.crosstab(df['Credit_History'],df['Loan_Status'])\ntemp3.plot(kind='bar',stacked=True, color=['red','blue'],grid=False)","5f0e9e45":"df.apply(lambda x: sum(x.isnull()),axis=0)","1d8ba438":"df['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)","eb4d234d":"df[\"Self_Employed\"].value_counts()","a04cf357":"# HEATMAP REPRESENTATION OF THE CORRELATION\n\nmatrix=df.corr()\nf,ax=plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","209f9632":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","2c53bdf5":"df.head()","9cefeb2e":"#CONVERTING STRING VALUES(CATEGORICAL VALUES) TO INTEGER\n\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","73460ca4":"df.head()","c516663f":"#CONVERTING STRING VALUES(CATEGORICAL VALUES)TO INTEGER\n\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","59fab1c7":"df1.head()","b17036a9":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","6fd5f4bb":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\n\ndf[\"Loan_Amount_Term\"].value_counts()","784f3f6e":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","0d201a96":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","925f841f":"df.isnull().sum()","e4f1d96a":"df1.isnull().sum()","cbe79766":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","75a7e638":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\ndf1[\"Loan_Amount_Term\"].value_counts()","ecf141ad":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","ecfeeb69":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","673b5c22":"df1.isnull().sum()","4a3ce625":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","c1d3b39f":"sns.displot(df[\"Total_Income\"])","3ac09714":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","4441377c":"sns.displot(df1[\"Total_Income_log\"])","d399aa14":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","2043b797":"sns.displot(df[\"EMI\"])","2bd8ee08":"sns.displot(df[\"EMI\"])","cb4d7135":"#MULTIPLYING BY 1000 TO MAKE THE UITS EQUAL\n\ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","29107b98":"sns.displot(df[\"Balance Income\"])","6dba7cb9":"sns.displot(df[\"Balance Income\"])","9af3f248":"#DROP THE COLOUMNS\n\ndf=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\ndf","51c0dd0a":"#LOOK AT THE DATA TYPES\n\ndf.dtypes","963ec92f":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\n","5a513ff2":"df1=df1.drop(\"Loan_ID\",axis=1)\ndf1","71bde099":"#LOOK AT THE DATA TYPES\n\ndf1.dtypes","36e9d3a9":"x=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","00ac3677":"#LETS PREPARE THE DATA FOR FEEDING IN TO THE MODELS.\n#SAVE THE TARGET VARIABLE IN SEPARATE.\n\nx=pd.get_dummies(x)\ndf=pd.get_dummies(df)","f4abd875":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=102)","d0a1c60a":"#USE THE RANDOM FOREST CLASSIFIER\n\nfrom sklearn.ensemble import RandomForestClassifier\nforest=RandomForestClassifier(n_estimators=100)\nforest.fit(x_train,y_train)\n\n#PRINT THE PREDICTION OF THE RANDOM FOREST CLASSIFIER\npred_rf=forest.predict(x_test)\nacc_rf=accuracy_score(y_test,pred_rf)*100\nacc_rf\n\n\n","35d63466":"pred_test=forest.predict(df1)","ac9c0ed1":"loancsv=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","4fae194d":"loancsv","7e3992a9":"loancsv[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nloancsv[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","26247f70":"loancsv","397a6c46":"# FEATURE ENGINEERING","7877b01b":"# PREDICTION","86f5c2b0":"# EXPLORING AND PREPARING THE DATA","261a5ee5":"# REPLACING THE CATEGORICAL VALUES","2cddb78f":"# IMPORTING PACKAGES","b3ab4e17":"# DROPPING THE VARIABLES","87e391a9":"# CORRELATION BETWEEN ALL THE NUMERICAL VARIABLES\n","9d7c6b75":"# FILLING MISSING VALUES\n","35ade883":"# FILLING MISSING VALUES IN TEST DATA","a1540f61":"# RANDOM FOREST CLASSIFIER","0686250b":"# READING THE DATA"}}