{"cell_type":{"f8a3027e":"code","a8bc0399":"code","c5095daf":"code","1e9f6f5e":"code","afb018b2":"code","f19cd763":"code","cdfbddcb":"code","c75332f9":"code","8a1861b5":"code","37051f54":"code","3da124cb":"code","9d2e449d":"code","d5e1e702":"code","6cea7adf":"code","1ea6d5d3":"code","4769e30b":"markdown","434c3cf1":"markdown","928442e3":"markdown","4f09c46e":"markdown","e75b13e8":"markdown","82b2c30e":"markdown","3415bf23":"markdown","a3dbe0ec":"markdown","3be518b1":"markdown","042a6d27":"markdown"},"source":{"f8a3027e":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\n\nPATH = \"\/kaggle\/input\/predict-test-scores-of-students\/\"","a8bc0399":"dataset = pd.read_csv(PATH + \"test_scores.csv\")\ndataset.head()","c5095daf":"ds_school_group = dataset.groupby('school') # group the dataset values by the school names\n\nschools = dataset['school'].unique()\nschools_df = pd.DataFrame(columns = ['school_setting', 'school_type', 'n_classroom', 'total_student', 'n_experimental', 'n_standard'], index = schools)\n\n# I'll extract some information about the classes and the schools. \nschools_df.loc[:, 'school_setting'] = ds_school_group.school_setting.unique().apply(lambda x: x[0])\nschools_df.loc[:, 'school_type'] = ds_school_group.school_type.unique().apply(lambda x: x[0])\nschools_df.loc[:, 'n_classroom'] = ds_school_group.classroom.nunique()\nschools_df.loc[:, 'total_student'] = ds_school_group.teaching_method.value_counts().groupby(level=0).sum()\nschools_df.loc[:, 'n_experimental'] = ds_school_group.teaching_method.value_counts().xs('Experimental', level = 1)\nschools_df.loc[:, 'n_standard'] = ds_school_group.teaching_method.value_counts().xs('Standard', level = 1)\n\n\n# there are some schools that doesn't have any classrooms for experimental teaching methods, so we can fill the NaN values with 0\n# there aren't any NaN values in the extracted information\nschools_df.fillna(0, inplace = True)\nschools_df.head()","1e9f6f5e":"fig = make_subplots(rows = 1, cols = 2, subplot_titles=('School Setting distribution', 'School Type Distribution'), specs = [[{'type': 'pie'}] * 2])\n\nschool_setting = schools_df['school_setting'].value_counts()\nschool_type = schools_df['school_type'].value_counts()\n\nfig.add_trace(\n    go.Pie(labels = school_setting.index, values = school_setting.values), row = 1, col = 1\n)\n\nfig.add_trace(\n    go.Pie(labels = school_type.index, values = school_type.values), row = 1, col = 2\n)\n\nfig.show()","afb018b2":"fig = px.bar(schools_df, x = schools_df.index, y = ['n_experimental', 'n_standard'], title = '# Student distribution',\n             labels = {'index': 'Schools', 'total_student': 'Number of students'})\nfig.show()","f19cd763":"fig = px.bar(schools_df, x = schools_df.index, y = 'n_classroom', title = '# Classrooms', color = 'school_type', \n             labels = {'index': 'Schools', 'n_classroom': 'Number of classrooms'})\nfig.show()","cdfbddcb":"np_schools = schools_df[schools_df['school_type'] == 'Non-public']\np_schools = schools_df[schools_df['school_type'] == 'Public']\n\nfig = make_subplots(rows=1, cols=2, subplot_titles = ('Private Schools', 'Public Schools'))\n\nfig.add_trace(\n    go.Bar(name = 'Standard', x = np_schools.index, y = np_schools['n_standard']), row = 1, col = 1\n)\nfig.add_trace(\n    go.Bar(name = 'Experimental', x = np_schools.index, y = np_schools['n_experimental']), row = 1, col = 1\n)\n\nfig.add_trace(\n    go.Bar(name = 'Standard', x = p_schools.index, y = p_schools['n_standard']), row = 1, col = 2\n)\nfig.add_trace(\n    go.Bar(name = 'Experimental', x = p_schools.index, y = p_schools['n_experimental']), row = 1, col = 2\n)\n\nfig.update_layout({'barmode':'stack', 'title_text': 'Experimental\/Standard Education Distribution by School Type'})\n\nfig.show()","c75332f9":"fig = make_subplots(rows = len(schools) \/\/ 5 + 1, cols = 5, subplot_titles=schools, shared_yaxes=True)\n\nc = 1\nfor idx, school in enumerate(schools):\n    school_data = dataset[dataset['school'] == school]\n    values = school_data.groupby('classroom')['lunch'].value_counts()\n    \n    df = pd.DataFrame(index = school_data.classroom.unique(), columns = 'n_qualified n_not_qualified'.split())\n\n    # some schools doesn't have any \"qualified\" or \"not qualified\" students so try to extract the data and do nothing if there aren't any student\n    try:\n        df['n_qualified'] = values.xs('Qualifies for reduced\/free lunch', level = 1)\n        fig.append_trace(go.Bar(name = \"Qualified\", x = school_data['classroom'].unique(), y = df['n_qualified'], marker_color = '#4C78A8', legendgroup=\"qualified\"), row = c, col = (idx % 5) + 1)\n    except: pass\n    try:\n        df['n_not_qualified'] =  values.xs('Does not qualify', level = 1)\n        fig.append_trace(go.Bar(name = \"Not Qualified\", x = school_data['classroom'].unique(), y = df['n_not_qualified'], marker_color = '#F58518', legendgroup=\"not_qualified\"), row = c, col = (idx % 5) + 1)\n    except: pass\n\n    if (idx + 1)%5==0: c+=1 \n\n\n# since adding extra traces also adds extra legends to plotly subplots, I'll be filtering the extra ones manually\nlegend_names = set()\nfig.for_each_trace(\n    lambda trace: trace.update(showlegend=False) if trace.name in legend_names else legend_names.add(trace.name)\n)\n\n\nfig.update_layout(height = 1200, width = 1200, title_text = \"Distribution of qualified\/not qualified students by classrooms\")\nfig.show()","8a1861b5":"# Pretest\/Posttest Score Distribution of Qualified\/Not qualified stuents.\nqualified = dataset[dataset['lunch'] == \"Qualifies for reduced\/free lunch\"]\nnot_qualified = dataset[dataset['lunch'] == \"Does not qualify\"]\n\n\nfig = make_subplots(rows = 2, cols = 1, subplot_titles = ['Pretest Score Distribution of Qualified\/Not Qualified Students','Posttest Score Distribution of Qualified\/Not Qualified Students'])\n\nfig_a = ff.create_distplot([qualified['pretest'], not_qualified['pretest']], ['Qualified Students', 'Not Qualified Students'], bin_size = 1)\nfig_b = ff.create_distplot([qualified['posttest'], not_qualified['posttest']], ['Qualified Students', 'Not Qualified Students'], bin_size = 1)\n\nfor i, f in enumerate([fig_a, fig_b], 1):\n    for trace in f.data:\n        fig.append_trace(trace, row = i, col = 1)\n\nlegend_names = set()\nfig.for_each_trace(\n    lambda trace: trace.update(showlegend=False) if trace.name in legend_names else legend_names.add(trace.name)\n)\nfig.update_layout(title_text = 'Pretest\/Posttest Score Distribution of Qualified\/Not qualified students.')\n\n\nfig.show()","37051f54":"# Pretest\/Posttest Score Distribution of Qualified\/Not qualified students.\nexp_teaching = dataset[dataset['teaching_method'] == \"Experimental\"]\nsta_teaching = dataset[dataset['teaching_method'] == \"Standard\"]\n\nfig = make_subplots(rows = 2, cols = 1, subplot_titles = ['Pretest Score Distribution of Students by Teaching Methods','Posttest Score Distribution of Students by Teaching Methods'])\n\nfig_a = ff.create_distplot([exp_teaching['pretest'], sta_teaching['pretest']], ['Experimental', 'Standard'], bin_size = 1)\nfig_b = ff.create_distplot([exp_teaching['posttest'], sta_teaching['posttest']], ['Experimental', 'Standard'], bin_size = 1)\n\nfor i, f in enumerate([fig_a, fig_b], 1):\n    for trace in f.data:\n        fig.append_trace(trace, row = i, col = 1)\n\nlegend_names = set()\nfig.for_each_trace(\n    lambda trace: trace.update(showlegend=False) if trace.name in legend_names else legend_names.add(trace.name)\n)\nfig.update_layout(title_text = 'Pretest\/Posttest Score Distribution of Students with Different Teaching Methods')\n\n\nfig.show()","3da124cb":"np_schools = dataset[dataset['school_type'] == 'Non-public']\np_schools = dataset[dataset['school_type'] == 'Public']\n\nfig = make_subplots(rows = 2, cols = 1, subplot_titles = ('Pretest\/Posttest score distribution of qualified students', 'Pretest\/Posttest score distribution of not qualified students'))\n\nfig.append_trace(go.Box(x = np_schools['school'], y = np_schools[np_schools['lunch'] == 'Qualifies for reduced\/free lunch']['pretest'], name = 'Pretest Score', legendgroup = 'group1', marker_color = '#4C78A8'), 1, 1)\nfig.append_trace(go.Box(x = np_schools['school'], y = np_schools[np_schools['lunch'] == 'Qualifies for reduced\/free lunch']['posttest'], name = 'Posttest Score', legendgroup = 'group2', marker_color = '#F58518'), 1, 1)\n\nfig.append_trace(go.Box(x = np_schools['school'], y = np_schools[np_schools['lunch'] == 'Does not qualify']['pretest'], name = 'Pretest Score', legendgroup = 'group1', marker_color = '#4C78A8'), 2, 1)\nfig.append_trace(go.Box(x = np_schools['school'], y = np_schools[np_schools['lunch'] == 'Does not qualify']['posttest'], name = 'Posttest Score', legendgroup = 'group2', marker_color = '#F58518'), 2, 1)\nfig.update_layout(height = 600, width = 800, title_text = 'Non-Public Schools', boxmode = 'group')\n\nname = set()\nfig.for_each_trace(lambda t: t.update(showlegend=False) if t.name in name else name.add(t.name))\n\nfig.show()","9d2e449d":"fig = make_subplots(rows = 2, cols = 1, subplot_titles = ('Pretest\/Posttest score distribution of qualified students', 'Pretest\/Posttest score distribution of not qualified students'))\n\nfig.append_trace(go.Box(x = p_schools['school'], y = p_schools[p_schools['lunch'] == 'Qualifies for reduced\/free lunch']['pretest'], name = 'Pretest Score', legendgroup = 'group1', marker_color = '#4C78A8'), 1, 1)\nfig.append_trace(go.Box(x = p_schools['school'], y = p_schools[p_schools['lunch'] == 'Qualifies for reduced\/free lunch']['posttest'], name = 'Posttest Score', legendgroup = 'group2', marker_color = '#F58518'), 1, 1)\n\nfig.append_trace(go.Box(x = p_schools['school'], y = p_schools[p_schools['lunch'] == 'Does not qualify']['pretest'], name = 'Pretest Score', legendgroup = 'group1', marker_color = '#4C78A8'), 2, 1)\nfig.append_trace(go.Box(x = p_schools['school'], y = p_schools[p_schools['lunch'] == 'Does not qualify']['posttest'], name = 'Posttest Score', legendgroup = 'group2', marker_color = '#F58518'), 2, 1)\nfig.update_layout(height = 600, width = 800, title_text = 'Non-Public Schools', boxmode = 'group')\n\nname = set()\nfig.for_each_trace(lambda t: t.update(showlegend=False) if t.name in name else name.add(t.name))\n\nfig.show()","d5e1e702":"fig = px.scatter(dataset, x = dataset['pretest'],y = dataset['posttest'], color = 'lunch')\nfig.show()","6cea7adf":"# I won't use every categorical variable, `school`, `classroom`, `student_id` variables will be excluded\ncat_feats = ['school_setting', 'school_type', 'teaching_method', 'gender', 'lunch']\n\ntarget = dataset['posttest'].values\ndata = dataset.iloc[:, :-1]\n\ndata = pd.get_dummies(data, columns = cat_feats)\n# scale the data\ndata_mean = data.loc[:, ['n_student', 'pretest']].mean().values\ndata_std = data.loc[:, ['n_student', 'pretest']].std().values\ndata.loc[:, ['n_student', 'pretest']] = (data.loc[:, ['n_student', 'pretest']] - data_mean) \/ data_std\n# normalize the target data using pretest's mean and std\ntarget = (target - data_mean[1]) \/ data_std[1]\n\ndata.drop(columns=['school', 'classroom', 'student_id'], inplace = True)\ndata.head()","1ea6d5d3":"def adjusted_r2(y_true, y_pred):\n    \"\"\" \n    Returns adjusted R^2 score of the given true target data and predictions, adjusted r^2 also penalizes additional independent variables in the training set.\n    Variable `p` on the below is the number of independent variables used to predict the target. \n    \"\"\"\n    N = y_true.shape[0]\n    r2 = r2_score(y_true, y_pred)\n    p = 13\n    score = 1 - ( (1-r2) * (N-1) ) \/ (N - p - 1)\n    return score\n\nx_train, x_test, y_train, y_test = train_test_split(data, target, test_size = .25)\n\nlr = LinearRegression().fit(x_train, y_train)\ntrain_preds = lr.predict(x_train)\npreds = lr.predict(x_test)\n\n\nprint(\"Linear model's performance on the training and test data\")\nprint(\"train: \\t MSE: %f | MAE: %f | R^2: %f | Adjusted R^2: %f\"%(mean_squared_error(y_train, train_preds), mean_absolute_error(y_train, train_preds), r2_score(y_train, train_preds), adjusted_r2(y_train, train_preds)))\nprint(\"test: \\t MSE: %f | MAE: %f | R^2: %f | Adjusted R^2: %f\"%(mean_squared_error(y_test, preds), mean_absolute_error(y_test, preds), r2_score(y_test, preds), adjusted_r2(y_test, preds)))","4769e30b":"There are many information about the schools so I'll build a dataframe for them ","434c3cf1":"There are few outliers but I guess I was wrong. I thought that lunch prize would motivate students but it doesn't seem to affect that much to the student's performance. We can also say that experimental educational methods were more effective.","928442e3":"There are `918` students who qualified for free lunch or lunch with reduced prices while `1215` of the students don't. Also, we can see that the ratio of qualified\/not qualified students is pretty unstable in schools. But of course, this is understandable because it wouldn't be a `prize` if everyone earned it","4f09c46e":"# Preparing the Dataset and Building a Model\nIn order to build a model, we should have a good understanding of the dataset. We can try to build a linear model because of the linear correlation between `pretest` and `posttest` scores. If it performs well, I won't try to dive deep into the model building process","e75b13e8":"Also it looks like there's a linear correlation between `pretest` and `posttest` scores","82b2c30e":"# Loading and understanding the dataset\nThe dataset has some information about 2133 students. The given info contains:\n* gender of the student\n* the school the student attends,\n* school type\n* school setting\n* classroom of the student,\n* teaching method in the classroom,\n* Number of students in the classroom\n* pretest and posttest scores of the student\nThere is also a `lunch` column and it has 2 unique values: `Does not qualify`, `Qualifies for reduced\/free lunch`.\nI'm assuming that this qualification is given randomly and __before__ the post-test. \n\nThe student's performance on the test depends on too many things and this dataset, of course, couldn't include every single piece of information about the students, we'll search for some usable indicators of the test scores.\nThe `school type` presumably would have an impact on the student's performance since the quality of the education would differ. It is also understandable that the `teaching methods` have an effect on the test scores because the effectiveness of the education mostly depends on qualified teachers and the educational system with enough materials for students to learn. Also, the number of students in the classroom would affect the student's performance since it is very difficult to take care of everyone as a teacher in any condition.\n\nEverything above is just assumptions and we need insights to find out if they are correct or not. Then, let's start!","3415bf23":"It is pretty understandable that public schools have much more classrooms because of the accessibility of public schools.","a3dbe0ec":"# Conclusion\nWell, at first I thought that there are not enough data for the prediction. But with given features, the linear model did a pretty good job. \nWe can say that model didn't overfit the training data and it's quite robust since r^2 and adjusted r^2 don't differ too much.\n\nSince I don't work on tabular data too much, I thought it would be a good exercise to do exploratory analysis on this dataset. If you read this far, I'm glad. \nPlease upvote if you liked the notebook. Thank you very much for your time :)","3be518b1":"Most of the students are learning with standard educational methods and some schools didn't even try any experimental methods, there is also `FBUMG` and it just tried the experimental methods for learning. In few schools, there are more students that learn with experimental methods than the students that learn with standard methods.","042a6d27":"I think experimental and standard education method usage by different school types are pretty close and normal. But the ratio of the student distributions of different educational methods is more stable in private schools. In public schools, it really is just an experimental method."}}