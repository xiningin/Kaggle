{"cell_type":{"8d903cbe":"code","9e81e5f3":"code","3ade8779":"code","43952167":"code","48935fff":"code","d11956cf":"code","a8c8eff7":"code","a341d56f":"code","c0f52925":"code","662bf395":"code","944dd352":"code","a9f89159":"code","0344d86e":"code","f06ef6a3":"code","cce2956d":"code","05cfabb7":"code","d1b54dbb":"code","53741331":"code","e559b454":"code","4101b335":"code","11ceb1f8":"markdown","30267c71":"markdown","2fff778d":"markdown","db0113fd":"markdown","b6fc41c5":"markdown","456f43e2":"markdown","56e6af98":"markdown","3ee8eaf6":"markdown","dacdb039":"markdown","b01f8b81":"markdown","1922c628":"markdown","b25d9cd2":"markdown","9656381c":"markdown","abaa2a9c":"markdown","56858b3e":"markdown","ce1378b8":"markdown","eed8139c":"markdown","da15b93c":"markdown","31e83202":"markdown","a21227ed":"markdown"},"source":{"8d903cbe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px # plotly express\nimport plotly.graph_objects as go\n%matplotlib inline\nimport os\nfrom IPython.display import HTML\n\n# Input data files are available in the '\/kaggle\/input' or '..\/..\/..\/datasets\/extracts\/' directory.\nfile_input=['\/kaggle\/input','..\/..\/..\/datasets\/']\nfiles={}\nfor dirname, _, filenames in os.walk(file_input[0]):\n    for filename in filenames:\n        if 'csv' in filename:\n            files[filename.replace('.csv','')]=os.path.join(dirname, filename)","9e81e5f3":"ProvinceDF=pd.DataFrame()\n\n# provinces to consider\nprovinces= ['Reunion','Quebec','Henan','New York','Virginia','Bermuda','Maharashtra','Lombardia','Tasmania']\n\ndf= pd.read_csv(files['covid_19_data'])\ndf= df[df['Province\/State'].isin(provinces)][['ObservationDate','Province\/State','Confirmed','Deaths','Recovered']]\\\n        .rename({'ObservationDate':'Date','Province\/State':'Province'},axis=1)\ndf['Date']= pd.to_datetime(df['Date'],format='%m\/%d\/%Y').dt.strftime('%Y-%m-%d')\nProvinceDF= pd.concat([ProvinceDF,df])\n\n# India States that needs to be considered\ndf= pd.read_csv(files['covid_19_india'])\ndf= df[df['State\/UnionTerritory']=='Maharashtra'][['Date','State\/UnionTerritory','Confirmed','Deaths','Cured']]\\\n        .rename({'State\/UnionTerritory':'Province','Cured':'Recovered'},axis=1)\ndf['Date']= pd.to_datetime(df['Date'],format='%d\/%m\/%y').dt.strftime('%Y-%m-%d')\nProvinceDF= pd.concat([ProvinceDF,df])\n\n# Italy Region that needs to be considered\ndf= pd.read_csv(files['covid19_italy_region'])\ndf= df[df['RegionName']=='Lombardia'][['Date','RegionName','TotalPositiveCases','Deaths','Recovered']]\\\n    .rename({'RegionName':'Province','TotalPositiveCases':'Confirmed'},axis=1)\ndf['Date']= pd.to_datetime(df['Date']).dt.strftime('%Y-%m-%d')\nProvinceDF= pd.concat([ProvinceDF,df])\n\nProvinceDF.head()","3ade8779":"# Weather data for the above Provinces\/States, pd.DateOffset for shifting dates\ntotal_weather_df=pd.DataFrame()\nfor key in provinces:\n    weather_df= pd.read_csv(files['Weather '+key])\n    weather_df['Date']= (pd.to_datetime(weather_df['valid_time_gmt'],unit='s') - pd.DateOffset(14)).dt.strftime('%Y-%m-%d')\n    weather_df= weather_df[['Date','temp','dewPt','wspd','pressure','heat_index','rh','vis','wc','wdir','feels_like','uv_index']].groupby(['Date']).agg(['min','mean','max']).reset_index()\n    weather_df.columns= weather_df.columns.map('| '.join).str.strip('| ')\n    weather_df['Province']= key\n    weather_df.drop('uv_index| min',axis=1,inplace=True)        \n    total_weather_df=pd.concat([total_weather_df,weather_df])\n    \n# merging weather data with province data\nProvinceWeatherDF= pd.merge(ProvinceDF,total_weather_df,left_on=['Date','Province'],right_on=['Date','Province'],how='left')","43952167":"# Removing elements for which we dont have weather data (temp| min is one of them to consider)\nProvinceWeatherDF= ProvinceWeatherDF[~ProvinceWeatherDF['temp| min'].isna()]\n\n# adding Delta Changes(per day shifts) as different columns data and merging with the province data\nProvinceWeatherDF= pd.concat([ProvinceWeatherDF.sort_values('Date'),\n                            ProvinceWeatherDF.sort_values('Date')[['Province','Confirmed','Deaths','Recovered']]\\\n                              .groupby('Province').diff().rename({'Confirmed':'Delta Confirmed','Deaths':'Delta Deaths','Recovered':'Delta Recovered'},axis=1)],axis=1)\n\n# Cleaning data, for negative per day changes, fill the previous value\nProvinceWeatherDF['Date']= pd.to_datetime(ProvinceWeatherDF['Date'])\nProvinceWeatherDF.sort_values('Date',inplace=True)\n\nfor feature in ['Confirmed','Deaths','Recovered']:\n    ProvinceWeatherDF.loc[ProvinceWeatherDF['Delta '+feature]<0,feature]=\\\n        ProvinceWeatherDF[ProvinceWeatherDF['Delta '+feature]<0][[feature,'Delta '+feature]]\\\n            .apply(lambda row:row[feature]-row['Delta '+feature],axis=1)\n\n    # After the confirmed cases are shifted to previous value, fill the negative value of 'Delta Confirmed cases' to 0\n    ProvinceWeatherDF['Delta '+feature].clip(lower=0,inplace=True)\n\n    # fill zero values apart from first value of Province with the previous value\n    for province in ProvinceWeatherDF['Province'].unique():\n        ProvinceWeatherDF.loc[ProvinceWeatherDF['Province']==province,feature]=\\\n            ProvinceWeatherDF.loc[ProvinceWeatherDF['Province']==province,feature].mask((ProvinceWeatherDF['Province']==province)&(ProvinceWeatherDF[feature] == 0)).ffill()\n    \n    # fill NaN with 0. NaN orignates from unfilled mask above\n    ProvinceWeatherDF[feature].fillna(0,inplace=True)\n    \n    ProvinceWeatherDF.loc[ProvinceWeatherDF[feature]>0,feature+' Days']= ProvinceWeatherDF[ProvinceWeatherDF[feature]>0].groupby('Province')['Date'].rank(ascending=True)\n    ProvinceWeatherDF= pd.merge(ProvinceWeatherDF,\n                            ProvinceWeatherDF.groupby('Province').rolling('7D',on='Date')[feature].mean().reset_index().rename({feature:'Rolling '+feature},axis=1),\n                            left_on=['Date','Province'],right_on=['Date','Province'],how='right')\nProvinceWeatherDF.head()","48935fff":"for feature in ['Confirmed','Deaths','Recovered']:\n    fig= px.line(ProvinceWeatherDF,\n            x='Date',\n            y=feature,\n            color='Province',\n            title=feature+' cases in different provinces',\n            template='plotly_dark')\n\n    fig.update_layout(yaxis=dict(type='log'))\n    fig.show()    ","d11956cf":"for feature in ['Confirmed','Deaths','Recovered']:\n    fig= px.line(ProvinceWeatherDF,\n            x='Confirmed Days',\n            y='Rolling '+feature,\n            hover_name=feature,\n            color='Province',\n            title='Rolling 7-Day average for '+feature+' cases in different provinces',\n            template='plotly_dark')\n    fig.update_layout(yaxis=dict(type='log'),\n        annotations = [dict(xref='paper',\n                                        yref='paper',\n                                        x=-0.1, y=-0.2,\n                                        showarrow=False,\n                                        text ='Number of days since 1st non-zero case was recorded')]\n    )\n    fig.show()   ","a8c8eff7":"corr=ProvinceWeatherDF[ProvinceWeatherDF.columns.sort_values()].corr()\nmask= np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nfig= go.Figure(data=go.Heatmap(z=corr.mask(mask),\n                                x=corr.columns.values,\n                                y=corr.columns.values,\n                                xgap=1, ygap=1,\n                                colorscale=\"Rainbow\",\n                                colorbar_thickness=20,\n                                colorbar_ticklen=3,\n                                zmid=0),\n                layout= go.Layout(title_text='Correlation Matrix', template='plotly_dark',\n                height=900,\n                xaxis_showgrid=False,\n                yaxis_showgrid=False,\n                yaxis_autorange='reversed'))\nfig.show()","a341d56f":"ReqColumns= ProvinceWeatherDF.columns[(ProvinceWeatherDF.columns.str.contains('Confirmed|Recovered|Deaths'))&(~ProvinceWeatherDF.columns.str.contains('Days'))]\n\n# Correlation Matrix\nCorrMatrix= pd.DataFrame(ProvinceWeatherDF.corr())\nCorrMatrix[ReqColumns].style.background_gradient(cmap='Blues')","c0f52925":"opColumns= ProvinceWeatherDF.columns[ProvinceWeatherDF.columns.str.contains('Confirmed|Recovered|Deaths|Days')]\nConfMatrix= CorrMatrix.loc[~CorrMatrix.index.isin(opColumns),'Confirmed']\nConfMatrix= pd.concat([ConfMatrix.abs().rename('Abs Confirmed'),ConfMatrix],axis=1).sort_values('Abs Confirmed',ascending=False)[:10]\nConfMatrix","662bf395":"fig= px.scatter(ProvinceWeatherDF,\n               y='dewPt| min',\n               x='Confirmed',\n               color='rh| min',\n               size='vis| min',\n               hover_name='Province',\n               template='plotly_dark',\n               color_continuous_scale=\"Rainbow\",\n               opacity=1,\n              )\nfig.update_layout(xaxis={'type':'log'},yaxis={'type':'linear'})\nfig.show()","944dd352":"PositiveConfirmedCorr= set(CorrMatrix.index[~CorrMatrix.index.isin(opColumns)])\nNegativeConfirmedCorr= set(CorrMatrix.index[~CorrMatrix.index.isin(opColumns)])\nfor feature in ['Confirmed','Delta Confirmed','Rolling Confirmed']:\n    Correlations= CorrMatrix.loc[~CorrMatrix.index.isin(opColumns),feature]\n    PositiveConfirmedCorr= PositiveConfirmedCorr & set(Correlations[Correlations>0].index)\n    NegativeConfirmedCorr= NegativeConfirmedCorr & set(Correlations[Correlations<0].index)\n    \n    print('\\033[1mPositive Correlation with '+feature+'(Descending Order): \\033[0m\\n\\t'+ ', '.join(Correlations[Correlations>0].sort_values(ascending=False).index))\n    print('\\n\\033[1mNegative Correlation with '+feature+'(Descending Order): \\033[0m\\n\\t'+ ', '.join(Correlations[Correlations<0].sort_values().index))\n    print(''.join(['_' for _ in range(80)]),'\\n')","a9f89159":"ConfMatrix= CorrMatrix.loc[~CorrMatrix.index.isin(opColumns),'Recovered']\nConfMatrix= pd.concat([ConfMatrix.abs().rename('Abs Recovered'),ConfMatrix],axis=1).sort_values('Abs Recovered',ascending=False)[:10]\nConfMatrix","0344d86e":"fig= px.scatter(ProvinceWeatherDF,\n               y='wspd| mean',\n               x='Recovered',\n               size='rh| min',\n               color='wdir| max',\n               hover_name='Province',\n               template='plotly_dark',\n               color_continuous_scale=\"Rainbow\",\n               opacity=1,\n              )\nfig.update_layout(xaxis={'type':'log'},yaxis={'type':'log'})\nfig.show()","f06ef6a3":"PositiveRecoveredCorr= set(CorrMatrix.index[~CorrMatrix.index.isin(opColumns)])\nNegativeRecoveredCorr= set(CorrMatrix.index[~CorrMatrix.index.isin(opColumns)])\n\nfor feature in ['Recovered','Delta Recovered','Rolling Recovered']:\n    Correlations= CorrMatrix.loc[~CorrMatrix.index.isin(opColumns),feature]\n    PositiveRecoveredCorr= PositiveRecoveredCorr & set(Correlations[Correlations>0].index)\n    NegativeRecoveredCorr= NegativeRecoveredCorr & set(Correlations[Correlations<0].index)\n    \n    print('\\033[1mPositive Correlation with '+feature+'(Descending Order): \\033[0m\\n\\t'+ ', '.join(Correlations[Correlations>0].sort_values(ascending=False).index))\n    print('\\n\\033[1mNegative Correlation with '+feature+'(Descending Order): \\033[0m\\n\\t'+ ', '.join(Correlations[Correlations<0].sort_values().index))\n    print(''.join(['_' for _ in range(80)]),'\\n')","cce2956d":"ConfMatrix= CorrMatrix.loc[~CorrMatrix.index.isin(opColumns),'Deaths']\nConfMatrix= pd.concat([ConfMatrix.abs().rename('Abs Deaths'),ConfMatrix],axis=1).sort_values('Abs Deaths',ascending=False)[:10]\nConfMatrix","05cfabb7":"fig= px.scatter(ProvinceWeatherDF,\n               y='rh| min',\n               x='Deaths',\n               size='vis| min',\n               color='dewPt| min',\n               hover_name='Province',\n               template='plotly_dark',\n               color_continuous_scale=\"Rainbow\",\n               opacity=1,\n              )\nfig.update_layout(xaxis={'type':'log'},yaxis={'type':'log'})\nfig.show()","d1b54dbb":"PositiveDeathsCorr= set(CorrMatrix.index[~CorrMatrix.index.isin(opColumns)])\nNegativeDeathsCorr= set(CorrMatrix.index[~CorrMatrix.index.isin(opColumns)])\n\nfor feature in ['Deaths','Delta Deaths','Rolling Deaths']:\n    Correlations= CorrMatrix.loc[~CorrMatrix.index.isin(opColumns),feature]\n    PositiveDeathsCorr= PositiveDeathsCorr & set(Correlations[Correlations>0].index)\n    NegativeDeathsCorr= NegativeDeathsCorr & set(Correlations[Correlations<0].index)\n    \n    print('\\033[1mPositive Correlation with '+feature+'(Descending Order): \\033[0m\\n\\t'+ ', '.join(Correlations[Correlations>0].sort_values(ascending=False).index))\n    print('\\n\\033[1mNegative Correlation with '+feature+'(Descending Order): \\033[0m\\n\\t'+ ', '.join(Correlations[Correlations<0].sort_values().index))\n    print(''.join(['_' for _ in range(80)]),'\\n')","53741331":"HTML('<h3>Absolute Positive Correlation with Confirmed Cases(intersections of all variations):<\/h3>'+\n      ', '.join(PositiveConfirmedCorr)+\n     '<br><br><h3>Absolute Negative Correlation with Confirmed Cases(intersections of all variations):<\/h3>'+\n     ', '.join(NegativeConfirmedCorr))","e559b454":"HTML('<h3>Absolute Positive Correlation with Recovered Cases(intersections of all variations):<\/h3>'+\n      ', '.join(PositiveRecoveredCorr)+\n     '<br><br><h3>Absolute Negative Correlation with Recovered Cases(intersections of all variations):<\/h3>'+\n     ', '.join(NegativeRecoveredCorr))","4101b335":"HTML('<h3>Absolute Positive Correlation with Death Cases(intersections of all variations):<\/h3>'+\n      ', '.join(PositiveDeathsCorr)+\n     '<br><br><h3>Absolute Negative Correlation with Death Cases(intersections of all variations):<\/h3>'+\n     ', '.join(NegativeDeathsCorr))","11ceb1f8":"### Confirmed Cases","30267c71":"# Total Cases vs Date in different provinces","2fff778d":"# Data Cleanup","db0113fd":"**The above chart shows the `lower wspd| mean`, `higher wdir| max` and `lower rh| mean` is propotional to higher Recovered cases.**","b6fc41c5":"# Data Collection","456f43e2":"# Effect of Weather on Coronavirus rate of spread\n\n**Brief:** Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\nThe virus that causes COVID-19 is mainly transmitted through droplets generated when an infected person coughs, sneezes, or exhales. These droplets are too heavy to hang in the air, and quickly fall on floors or surfaces.\n\nIn this notebook, we will try to find the correlation of weather attributes to the spread of Covid-19 (coronavirus). The notebook is spread into few sections:\n1. [Data Collection](#Data-Collection)\n2. [Data Cleanup](#Data-Cleanup)\n3. [Visualizing Cases vs Date for different Province](#Total-Cases-vs-Date-in-different-provinces)\n4. [Visualizing Rolling 7-day average of Cases vs Date for different Province](#Rolling-7-Day-average-for-cases-in-different-provinces)\n5. [Correlation Matrix](#Correlation-Matrix)\n6. Deep Dive in Total cases correlation matrix\n - [Confirmed Cases](#Confirmed-Cases)\n - [Recovered Cases](#Recovered-Cases)\n - [Death Cases](#Death-Cases)\n7. [Conclusion](#Conclusion)\n\n\n**NOTE:** This notebook deals with the correlation of weather attributes to covid-19, and not its causality, which may or may not be the same. Please keep that in mind\n\n**For the sake of ease of use, we will be use `province` as a pseudonym for Region\/States\/Provinces**\n\nAssumptions that I have taken for the data collection and processing.\n1. For weathers I took the following weather locations as a setpoint for each province.\n - **Reunion(France)** - Sainte-Marie, R\u00e9union (ROLAND GARROS AIRPORT STATION)\n - **Henan** - Zhengzhou, Henan (ZHENGZHOU XINZHENG INTERNATIONAL AIRPORT STATION)\n - **New York** - New York City, NY (LAGUARDIA AIRPORT STATION)\n - **Virginia** - Lynchburg, VA (LYNCHBURG REGIONAL AIRPORT STATION)\n - **Bermuda** - Castle Harbour, St. George's Parish (L.F. WADE INTERNATIONAL AIRPORT STATION)\n - **Maharashtra** - Mumbai, Maharashtra (CHHATRAPATI SHIVAJI INTERNATIONAL AIRPORT STATION)\n - **Lombardia** - Peschiera Borromeo, Province of Milan (LINATE AIRPORT STATION)\n - **Tasmania** - Hobart, Tasmania (HOBART INTERNATIONAL AIRPORT STATION)\n2. If the weather has any effect on coronavirus, it will take approximately 14 days for a patient to get diagnosed. So added a weather offset of 14 days","56e6af98":"#### Logic behind creating the below graph:\nwe cannot put all the features to build the chart, so we will choose, which ones to show.\nTo choose that, we will do the following:\n- Get top 10 highest `absolute` correlation features for Confirmed Cases\n- Take the first 3 values, which doesn't include `days` and not a categorical data(value_counts()<4), which are not similar (pressure|mean and pressure|max are correlated), and build the chart below","3ee8eaf6":"# Deep Dive in Total Cases feature's correlations\n\n>now we will go through one by one and see the major correlations","dacdb039":"**The above chart shows the `lower dewPt| max`, `lower rh| min` and `higher vis| max` is propotional to `higher Confirmed cases`.**","b01f8b81":"#### Weather abbreviations and definitions from https:\/\/www.worldcommunitygrid.org\/lt\/images\/climate\/The_Weather_Company_APIs.pdf:\n- **temp**: The forecasted temperature for midpoint day (1pm) or midpoint night (1am) for a 12 hour daypart.\n- **dewPt**: The temperature which air must be cooled at constant pressure to reach saturation\n- **wspd**: The maximum forecasted hourly wind speed\n- **pressure**: Mean Sea Level Pressure, the equivalent pressure reading at sea level recorded at this station\n- **heat_index**: An apparent temperature. It represents what the air temperature \u201cfeels like\u201d on exposed human skin due to the combined effect of warm temperatures and high humidity\n- **rh**: (%)The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. \n- **vis**: Prevailing hourly visibility\n- **wc**: Wind Chill - Minimum wind chill.\n- **wdir**: Daytime average wind direction in magnetic notation. \n- **feels_like**: Hourly feels like temperature. \n- **uv_index**: Maximum UV index for the 12 hour forecast period. ","1922c628":"**The above chart shows the `lower rh| min`, `lower dewPt| min` and `higher vis| min` is propotional to higher Death cases.**","b25d9cd2":"> If you see the above correlations, almost of them have same positive\/negative coorelation, with slight difference in ordering. Thus we are not building seperate graphs for each variation of Recovered cases\n---\n### Death Cases","9656381c":"> If you see the above correlations, Features for whom the graph is plotted have same positive\/negative coorelation, with slight difference in ordering. Thus we are not building seperate graphs for each variation of Death cases. But to add to the point above, *Delta Deaths* have more negative correlations than the others, hence worth looking deeply into it seperately. Maybe a different Notebook for it.\n","abaa2a9c":"### Recovered Cases","56858b3e":"# Rolling 7-Day average for cases in different provinces","ce1378b8":"# Correlation Matrix","eed8139c":"#### Additional Notes:\n\nThere are few things I have tried with almost similar results, hence haven't added to this notebook(Let me know, if I should add them in seperate notebook)\n- F_regression to find top 10 important variables\n- Linear Regression for the same above reason (RMSE score was bad, hence useless)\n- DL model for the same reason (Better than LR, but still high RMSE score)\n- The 14 day offset to counter to diagnosis delay, if removed has almost the same results, hence not put in as a seperate case. You can fork and change `pd.offset(14)` to `pd.offset(0)` for same.","da15b93c":"# Conclusion\n   **we saw how the weather conditions effect the spread of Lockdown. The most interesting of them being the `Temperature`, which is negatively correlated to Confirmed & Death's rate of spread, but positively related to Recovered's.**\n   \nTaking intesection of all types of variation correlation(Total\/Rolling\/Delta) for each o\/p","31e83202":"**Weather data is collected from [WUNDERGROUND](https:\/\/www.wunderground.com\/)**","a21227ed":"> If you see the above correlations, all of them have same positive\/negative correlation, with slight difference in ordering. Thus we are not building seperate graphs for each variation of confirmed cases"}}