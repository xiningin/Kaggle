{"cell_type":{"d617147c":"code","4c37ad6e":"code","2020cce2":"code","305b9c27":"code","d67f4715":"code","43e156d4":"code","93d4001c":"code","ed917534":"code","0696d53f":"code","875694cd":"code","6cc15e59":"code","69c7bb24":"code","473555c7":"code","e0ca2359":"code","71fa10e8":"code","add672b6":"code","f8343002":"code","bd762923":"code","11e7aacb":"code","74dc7903":"code","a05a636b":"code","b59fa3db":"code","f60219e1":"code","818ef64b":"code","4c5933c6":"code","eb2fd1e1":"code","6c4f9fbd":"code","1bd009f9":"code","01981e18":"code","d0e7c7f5":"code","48e5a293":"code","4a055657":"code","1653abf3":"code","556dde31":"code","3464db78":"markdown","e707436c":"markdown","be53f6c0":"markdown","c0cea98f":"markdown","edd00668":"markdown","7b0f1a1f":"markdown"},"source":{"d617147c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c37ad6e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","2020cce2":"train_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","305b9c27":"print(train_data.shape)\nprint(test_data.shape)","d67f4715":"train_data.head()","43e156d4":"X = train_data.drop([\"label\"],axis = 1).values\nY = train_data[\"label\"].values","93d4001c":"plt.figure(figsize=(12,6))\nsns.countplot(Y)","ed917534":"plt.imshow(X[0].reshape([28,28]))","0696d53f":"plt.imshow(X[14].reshape([28,28]))","875694cd":"plt.imshow(X[3].reshape([28,28]))","6cc15e59":"X = X.reshape([42000,28,28,1])\nY = Y.reshape([42000,1])","69c7bb24":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY = to_categorical(Y, num_classes = 10)","473555c7":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1, random_state = 14)","e0ca2359":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","71fa10e8":"x_train = x_train\/255\nx_test = x_test\/255","add672b6":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64,(3,3),padding='same',activation='relu',input_shape=(28,28,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64,(3,3),padding='same',activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10, activation='softmax')\n])","f8343002":"model.summary()","bd762923":"from keras.optimizers import Adam\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer,\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","11e7aacb":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor = 'val_acc',\n                                           patience = 3,\n                                           verbose = 1,\n                                            factor = 0.6,\n                                            min_lr=0.00001)","74dc7903":"batch_size = 64\nepochs = 30","a05a636b":"train_datagen = ImageDataGenerator(\n    rotation_range = 10,\n    zoom_range = 0.1,\n    width_shift_range=0.1,  \n    height_shift_range=0.1,\n    shear_range = 0.1,\n    horizontal_flip=False,  \n    vertical_flip=False\n)","b59fa3db":"train_datagen.fit(x_train)","f60219e1":"history = model.fit(\n            train_datagen.flow(x_train,y_train,batch_size = batch_size),\n            validation_data = (x_test,y_test),\n            batch_size = batch_size,\n            steps_per_epoch = x_train.shape[0]\/\/batch_size,\n            epochs = epochs,\n            verbose = 1,\n            callbacks=[learning_rate_reduction]\n            )","818ef64b":"model.evaluate(x_test,y_test)","4c5933c6":"\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure()\nplt.title('Loss and Accuracy Plots')\nplt.plot(acc,color = 'green',label = 'Training Acuracy')\nplt.plot(val_acc,color = 'violet',label = 'Validation Accuracy')\nplt.plot(loss,color = 'blue',label = 'Training Loss')\nplt.plot(val_loss,color = 'cyan',label = 'Validation Loss')\nplt.legend()\nplt.show()","eb2fd1e1":"data = test_data.values\ndata = data.reshape([28000,28,28,1])\nprint(data.shape)\ndata = data\/255","6c4f9fbd":"test_pred = model.predict(data)","1bd009f9":"test_pred.shape","01981e18":"test_pred","d0e7c7f5":"test_pred = np.argmax(test_pred,axis=1)\nprint(test_pred.shape)","48e5a293":"test_pred","4a055657":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsample_submission","1653abf3":"index=sample_submission.ImageId\ndata={'ImageId':index,'Label':test_pred}\ndf=pd.DataFrame(data)\ndf.head()","556dde31":"df.to_csv('my_submission.csv', index=False)","3464db78":"## Data Augmentation","e707436c":"## Learning Rate reduction","be53f6c0":"## Fitting the model","c0cea98f":"## Evaluation, Accuracy and Loss Plot","edd00668":"## Compiling model","7b0f1a1f":"# Defining CNN"}}