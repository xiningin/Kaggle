{"cell_type":{"74ad58df":"code","1d631c9f":"code","551bccf4":"code","d285e524":"code","9009e882":"code","b4aa033c":"code","c3b98452":"code","a45f5770":"code","42a52599":"code","48d776da":"markdown","7d95e6b2":"markdown"},"source":{"74ad58df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d631c9f":"import numpy as np \nimport pandas as pd \n\ndf1=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ndf2=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","551bccf4":"df2.rename(columns={'id':'movie_id'}, inplace=True)\nprint(df2.columns)\ndf2.head()","d285e524":"print(df1.columns)\ndf1.head()","9009e882":"movies=df2.merge(df1,on='movie_id')\nmovies.head()","b4aa033c":"C=movies['vote_average'].mean()\nprint('C = ', C)\n\nm=movies['vote_count'].quantile(0.8)\nprint('m = ', m)","c3b98452":"data=movies[movies['vote_count']>m]\n","a45f5770":"def weighted_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)\n\ndata['score']=data.apply(weighted_rating, axis=1)\ndata=data.sort_values('score', ascending=False)","42a52599":"data[['original_title', 'vote_count', 'vote_average', 'score']].head(10)","48d776da":"### We create a **score** to evaluate the movies using the WR, then sort the dataframe based on the score. Then pick the top 10 movies to feature.","7d95e6b2":"# Let's try the simplest recommendation algorithm first; **Demographic Filtering**\n\n* Demographic Filtering (DF) technique uses the demographic data of a user to determine which items may be appropriate for recommendation. \n* This require a metric based on which movies can be rated.\n* After sorting based on the metric, we recommend the top movies to the user.\n* Generally used matric for this purpose is: weighted rating (wr) \n\n![](https:\/\/image.ibb.co\/jYWZp9\/wr.png).\n\nHere, \n* v is the number of votes for the movie;\n* m is the minimum votes required to be listed in the chart;\n* R is the average rating of the movie; And\n* C is the mean vote across the whole report\n\nv(**vote_count**) and R (**vote_average**) are listed in our dataset.\n\nC is calculated by finding the mean of the average rating of all ovies\n\nWe also pick an **m** value. This can be set as a quantile of the **vote_count** data. We pick 0.8 quantile.\n\n"}}