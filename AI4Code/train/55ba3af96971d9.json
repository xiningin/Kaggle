{"cell_type":{"04162f28":"code","191cc84c":"code","e9cd513d":"code","af86699a":"code","92c506cc":"code","83371e6f":"code","33b318d6":"code","a9aeefe6":"code","f6d7cb49":"code","f1a60281":"code","dbb4b05e":"code","b919d2cf":"code","a056e576":"code","5b59ad71":"markdown","ef64863b":"markdown"},"source":{"04162f28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","191cc84c":"import os\nimport numpy as np\nimport pandas as pd \nimport random\nimport cv2\nimport matplotlib.pyplot as plt\nimport keras.backend as K\nimport tensorflow as tf\nimport warnings\n\nfrom random import shuffle \nfrom tqdm import tqdm \nfrom PIL import Image\nfrom keras.models import Model, Sequential\nfrom keras.layers import Input, Dense, Flatten, Dropout, BatchNormalization, Conv2D, SeparableConv2D, MaxPool2D, LeakyReLU, Activation, ReLU\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import svm\nfrom glob import glob\nfrom matplotlib import pyplot as plt\n\n","e9cd513d":"path_train = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\npath_val = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\npath_test = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"","af86699a":"img = glob(path_train+\"\/PNEUMONIA\/*.jpeg\")","92c506cc":"plt.imshow(np.asarray(plt.imread(img[0])))","83371e6f":"classes = [\"NORMAL\", \"PNEUMONIA\"]\nimg_height = 299\nimg_width = 299\n\ntrain_data = glob(path_train+\"\/NORMAL\/*.jpeg\")\ntrain_data += glob(path_train+\"\/PNEUMONIA\/*.jpeg\")\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True) # set validation split\n\ntrain_generator = train_datagen.flow_from_directory(\n    path_train,\n    target_size=(img_height, img_width),\n    batch_size=24,\n    classes=classes,\n    class_mode='categorical') # set as training data\n\nvalidation_generator = train_datagen.flow_from_directory(\n    path_val, # same directory as training data\n    target_size=(img_height, img_width),\n    batch_size=24,\n    classes=classes,\n    class_mode='categorical') # set as validation data\n\ntest_generator = train_datagen.flow_from_directory(\n    path_test, # same directory as training data\n    target_size=(img_height, img_width),\n    batch_size=24,\n    classes=classes,\n    class_mode='categorical') # set as validation data\n","33b318d6":"train_generator.image_shape","a9aeefe6":"import skimage\nfrom skimage.transform import resize\ndef plotter(i):\n    Pimages = os.listdir(path_train + \"\/PNEUMONIA\")\n    Nimages = os.listdir(path_train + \"\/NORMAL\")\n    imagep1 = cv2.imread(path_train+\"\/PNEUMONIA\/\"+Pimages[i])\n    imagep1 = skimage.transform.resize(imagep1, (150, 150, 3) , mode = 'reflect')\n    imagen1 = cv2.imread(path_train+\"\/NORMAL\/\"+Nimages[i])\n    imagen1 = skimage.transform.resize(imagen1, (150, 150, 3))\n    pair = np.concatenate((imagen1, imagep1), axis=1)\n    print(\"(Left) - No Pneumonia Vs (Right) - Pneumonia\")\n    print(\"-----------------------------------------------------------------------------------------------------------------------------------\")\n    plt.figure(figsize=(10,5))\n    plt.imshow(pair)\n    plt.show()\nfor i in range(5,10):\n    plotter(i)","f6d7cb49":"from keras.applications.resnet50 import ResNet50\n\nbase_model = ResNet50(weights='imagenet', include_top=False , input_tensor =Input(shape=(299,299,3)), input_shape=(299,299,3))\n","f1a60281":"model = Flatten(name='flatten')(base_model.output)\nmodel = Dense(1024, activation='relu')(model)\nmodel = Dropout(0.7, name='dropout1')(model)\nmodel = Dense(512, activation='relu')(model)\nmodel = Dropout(0.5, name='dropout2')(model)\npredictions = Dense(2, activation='softmax')(model)","dbb4b05e":"conv_model = Model(inputs=base_model.input, outputs=predictions)\nopt = Adam(lr=0.0001, decay=1e-5)\nconv_model.compile(loss='binary_crossentropy', metrics=['accuracy'],optimizer=opt)\n","b919d2cf":"print(conv_model.summary())","a056e576":"for layer in conv_model.layers[:-6]:\n    layer.trainable = False\nconv_model.compile(loss='binary_crossentropy', metrics=['accuracy'],optimizer=opt)\nhistory = conv_model.fit_generator(epochs=5, shuffle=True, validation_data=validation_generator, generator=train_generator, steps_per_epoch=500, validation_steps=10,verbose=2)","5b59ad71":"# Visualize Some Images","ef64863b":"# Augment Data"}}