{"cell_type":{"5d48107d":"code","e644d07f":"code","017e4cee":"code","ceae37a5":"code","9f64fc24":"code","a0bab50d":"code","75a05a04":"code","59b8f0dc":"code","5aedce4d":"code","c2955c17":"code","1247eb8f":"code","38990d5c":"code","45ab96c8":"code","026cfeb6":"code","db0e4a9c":"code","387b7236":"code","2dae38cd":"code","0cb5a3ea":"code","98679926":"code","fc4a386f":"code","228f42b4":"code","e2cda326":"code","202a3097":"code","1538b0dd":"code","e5c75513":"code","0d4b6317":"code","40fe3906":"code","47cd0fb1":"code","b6f1d6e6":"code","a5e78660":"code","04e27474":"code","ae8579b5":"code","27e4c762":"code","1e24d56f":"code","5a7035fb":"code","09a1d4e8":"code","a5affa67":"markdown","7ecbb87c":"markdown","86cd9ad9":"markdown","f50d9319":"markdown","2f5c3222":"markdown","559cbadb":"markdown","174e14da":"markdown","d0aa4433":"markdown"},"source":{"5d48107d":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tqdm import tqdm","e644d07f":"sample_submission = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')\ntraining_labels = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')","017e4cee":"training_labels","ceae37a5":"my_tensor = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00000e74ad.npy', allow_pickle=True)\nmy_tensor = np.load('..\/input\/g2net-gravitational-wave-detection\/test\/0\/0\/0\/00024887b5.npy', allow_pickle=True)\n\nmax_of_rows = my_tensor.max(axis=1)\nmy_tensor = my_tensor \/ max_of_rows[:, np.newaxis]","9f64fc24":"label = training_labels.id[0]\ntarget = training_labels.target[0]","a0bab50d":"plt.figure(num=0, figsize= (9,9))\nfor i in range(3):\n    plt.subplot(3, 1, i+1)\n    plt.title(f'target: {target}, label: {label}')\n    plt.plot(my_tensor[i])","75a05a04":"my_tensor = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00000e74ad.npy', allow_pickle=True)\nmy_tensor = np.load('..\/input\/g2net-gravitational-wave-detection\/test\/0\/0\/0\/0003259f74.npy', allow_pickle=True)\n\nprint(my_tensor.shape)\n\nmax_of_rows = my_tensor.max(axis=1)\nmy_tensor = my_tensor \/ max_of_rows[:, np.newaxis]\n\nd1 = my_tensor[0]\nd2 = my_tensor[1]\nd3 = my_tensor[2]\n\nd1 = d1.reshape(64, 64, 1)\nd2 = d2.reshape(64, 64, 1)\nd3 = d3.reshape(64, 64, 1)\n\nd = np.concatenate((d1,d2,d3), axis=2)\n\nplt.imshow(d)\n\nD = layers.GlobalAveragePooling2D()(d.reshape(1, 64, 64, 3))\n\n\nplt.imshow(D)","59b8f0dc":"flag = 0\ntensor_list = []\nfor dirname, _, filenames in os.walk('..\/input\/g2net-gravitational-wave-detection\/train'):\n    for filename in filenames:\n        tensor_path = os.path.join(dirname, filename)\n        my_tensor = np.load(tensor_path, allow_pickle=True)\n        max_of_rows = my_tensor.max(axis=1)\n        my_tensor = my_tensor \/ max_of_rows[:, np.newaxis]\n        \n        d1 = my_tensor[0]\n        d2 = my_tensor[1]\n        d3 = my_tensor[2]\n\n        d1 = d1.reshape(64, 64, 1)\n        d2 = d2.reshape(64, 64, 1)\n        d3 = d3.reshape(64, 64, 1)\n\n        d = np.concatenate((d1,d2,d3), axis=2)\n        \n        tensor_list.append(d)\n        flag += 1\n    if flag > 1000:\n        break\n        ","5aedce4d":"X_train = np.array(tensor_list)\ny_train = training_labels.target.to_numpy()","c2955c17":"X_train.shape","1247eb8f":"plt.imshow(X_train[0])","38990d5c":"y_train = y_train[:len(X_train)]","45ab96c8":"X_train.shape","026cfeb6":"X_train.shape","db0e4a9c":"inputs = keras.Input(shape=(224, 224, 3))","387b7236":"from tensorflow.keras.applications.resnet50 import ResNet50\n\nres_model = ResNet50(input_tensor=inputs, weights='imagenet')","2dae38cd":"len(res_model.layers)","0cb5a3ea":"for layer in res_model.layers[:161]:\n    layer.trainable = False","98679926":"def scheduler(epoch, lr):\n    if epoch < 10:\n        return lr\n    else:\n        return lr * tf.math.exp(-0.1)","fc4a386f":"scheduler_callback =  tf.keras.callbacks.LearningRateScheduler(scheduler)","228f42b4":"from tensorflow.keras import callbacks\n\nearly_stopping = callbacks.EarlyStopping(\n    min_delta=0.1, # minimium amount of change to count as an improvement\n    patience=20, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)\ncallbacks = [\n    keras.callbacks.TensorBoard(log_dir='.\/logs'),\n    early_stopping,\n    scheduler_callback\n]","e2cda326":"from tensorflow.keras import layers\nfrom tensorflow.keras.layers.experimental import preprocessing\n\ninputs = keras.Input(shape=(64, 64, 3))\npre = preprocessing.Resizing(int(224), int(224), interpolation='bilinear')(inputs)\nx = res_model(pre)\nx = layers.Flatten()(x)\nx = layers.Dense(100, activation=\"sigmoid\")(x)\noutputs = layers.Dense(2, activation=\"softmax\")(x)","202a3097":"from tensorflow.keras import layers\n\ninputs = keras.Input(shape=(64, 64, 3))\nx = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(inputs)\n# x = layers.MaxPooling2D(pool_size=(2, 2))(x)\n# x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x)\n# x = layers.MaxPooling2D(pool_size=(3, 3))(x)\n# x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x)\n\n# Apply global average pooling to get flat feature vectors\nx = layers.GlobalAveragePooling2D()(x)\n\n# Add a dense classifier on top\nnum_classes = 2\noutputs = layers.Dense(num_classes, activation=\"softmax\")(x)","1538b0dd":"y_train[:10]","e5c75513":"model = keras.Model(inputs=inputs, outputs=outputs)","0d4b6317":"model.summary()","40fe3906":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","47cd0fb1":"y_train = y_train[:len(X_train)]","b6f1d6e6":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=0)\n\nX_valid, X_test, y_valid, y_test = train_test_split(X_valid, y_valid, test_size=0.2, random_state=1)","a5e78660":"X_train[0].shape","04e27474":"history = model.fit(X_train, y_train, batch_size=32, epochs=10, validation_data=(X_valid, y_valid),\n                   callbacks=callbacks)","ae8579b5":"import matplotlib.pyplot as plt\n\nplt.figure(num=0)\nplt.title('loss')\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='validation')\nplt.legend()\n\nplt.figure(num=1)\nplt.title('accuracy')\nplt.plot(history.history['accuracy'], label='train')\nplt.plot(history.history['val_accuracy'], label='validation')\nplt.legend()","27e4c762":"loss, acc = model.evaluate(X_test, y_test)  # returns loss and metrics\nprint(\"loss: %.2f\" % loss)\nprint(\"acc: %.2f\" % acc)","1e24d56f":"predictions = model.predict(X_test)\npredictions = np.argmax(predictions, axis=1)    ","5a7035fb":"predictions","09a1d4e8":"X_train.shape","a5affa67":"# Predictions","7ecbb87c":"# Building the Model","86cd9ad9":"# Imports","f50d9319":"# Exhibition of the Data","2f5c3222":"# Demonstration of the Data","559cbadb":"# Training the Model","174e14da":"# What the neural net sees after GlobalAveragePooling2D()","d0aa4433":"# Loading the Data"}}