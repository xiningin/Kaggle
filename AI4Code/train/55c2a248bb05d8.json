{"cell_type":{"325f36fb":"code","3930baf5":"code","5c50fcca":"code","b848aa37":"code","c869a3ad":"code","8bdbcc80":"code","e289607a":"code","77a4b404":"code","99f34078":"code","b8c5f87b":"code","f01675b1":"code","35f6d0b9":"code","903c6c26":"code","be905e21":"code","a27d222f":"code","be1fbe84":"code","4f8e13a1":"code","d2b71fd9":"code","03313eab":"code","51242c7e":"code","1b158a5f":"code","e0c62f8e":"code","964096f7":"code","4967a141":"code","58cbea8e":"code","5637d558":"code","d4d43581":"code","6dfaa55e":"code","8fdd33c6":"code","e607ad77":"code","38663c3e":"code","19dceaee":"code","48c67516":"code","ff9aca06":"code","d1f4a637":"code","60d9a58f":"code","b15066b5":"code","8a8ed981":"code","6c66be80":"code","ed6fac9c":"code","17547639":"code","3cd35500":"code","8c1f3642":"code","b05c0800":"code","ffdb9cd3":"code","1631561c":"code","2e58e2b7":"code","b44b4c47":"code","cdfece41":"code","a9c26ddf":"code","aa276272":"code","928b6c6f":"code","6dc440ec":"code","bcaadb36":"code","2ca18805":"code","2b28af43":"code","242e3260":"code","762803dd":"code","e6bcd5b6":"code","0c69f4f1":"code","8a8f8f1c":"code","372ed072":"code","debd54f8":"code","f7ab70f0":"code","52ba2fa5":"code","b579943c":"code","e4500c78":"code","20980deb":"code","3ed0398e":"code","9cbfc97c":"code","330b4101":"code","570dc710":"code","0031d82c":"code","cb91f44c":"code","8a3b279c":"code","337f7477":"code","9b95c283":"code","c46af410":"code","92cb0bff":"code","6505dce2":"code","2de71408":"code","86870296":"code","1b191a90":"code","09de0599":"code","2361c9a1":"code","a13b587f":"code","98c970ec":"code","60702692":"code","2eb15c9f":"code","046d0f80":"code","777adbbd":"markdown","e0f1f779":"markdown","96db8575":"markdown","c3c9bcf6":"markdown","b4220125":"markdown","05114c51":"markdown","6866e956":"markdown","2c6c9e46":"markdown","49e5827f":"markdown","dda808fb":"markdown","775c7495":"markdown","c8d01b64":"markdown","7215b796":"markdown"},"source":{"325f36fb":"import pandas as pd # Data Analytical library\nimport numpy as np # Fast Linear Alegbra \nimport matplotlib.pyplot as plt # Visulizations\nimport seaborn as sns # Statistical Viz","3930baf5":"data=pd.read_csv('..\/input\/ml-lab-exam\/traindata_SJC.csv')\ndata.head()","5c50fcca":"data.tail()","b848aa37":"data.shape","c869a3ad":"data.describe()","8bdbcc80":"data.columns","e289607a":"data.nunique()","77a4b404":"data['Gender'].unique()","99f34078":"data.isnull().sum()","b8c5f87b":"data = data.drop(['ClaimNumber','ClaimDescription'],axis=1)\ndata.head()","f01675b1":"data['UltimateIncurredClaimCost'].hist()","35f6d0b9":"data =data.dropna()","903c6c26":"data.head()","be905e21":"data.isnull().sum()","a27d222f":"data['gender'] = pd.factorize(data.Gender)[0]","be1fbe84":"data.Gender.value_counts()","4f8e13a1":"data.gender.value_counts()","d2b71fd9":"data['maritalstatus'] = pd.factorize(data.MaritalStatus)[0]\ndata.MaritalStatus.value_counts()","03313eab":"data.maritalstatus.value_counts()","51242c7e":"data['parttimefulltime'] = pd.factorize(data.PartTimeFullTime)[0]\ndata.PartTimeFullTime.value_counts()","1b158a5f":"data.parttimefulltime.value_counts()","e0c62f8e":"data.head()","964096f7":"data['DateTimeOfAccident'] = pd.to_datetime(data['DateTimeOfAccident'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')\ndata['DateReported'] = pd.to_datetime(data['DateReported'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')","4967a141":"data['DateTimeOfAccidentyear'] = data['DateTimeOfAccident'].dt.year\ndata['DateTimeOfAccidentmonth'] = data['DateTimeOfAccident'].dt.month\ndata['DateTimeOfAccidentday'] = data['DateTimeOfAccident'].dt.day\ndata['DateTimeOfAccidenthour'] = data['DateTimeOfAccident'].dt.hour\n\n","58cbea8e":"data['DateReportedyear'] = data['DateReported'].dt.year\ndata['DateReportedmonth'] = data['DateReported'].dt.month\ndata['DateReportedday'] = data['DateReported'].dt.day\n","5637d558":"data.head()","d4d43581":"df = data.drop(['Gender','MaritalStatus','PartTimeFullTime','DateTimeOfAccident','DateReported','DateReportedday','DateReportedmonth','DateTimeOfAccidentday','DaysWorkedPerWeek','HoursWorkedPerWeek'],axis=1)\ndf.head()","6dfaa55e":"df.shape","8fdd33c6":"corelation = df.corr()","e607ad77":"df.corr ","38663c3e":"corrmat = df.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);","19dceaee":"sns.pairplot(df)","48c67516":"sns.relplot(x= 'InitialIncurredCalimsCost', y= 'UltimateIncurredClaimCost', hue='WeeklyWages', data=data )","ff9aca06":"sns.relplot(x= 'InitialIncurredCalimsCost', y= 'UltimateIncurredClaimCost', hue='Gender', data=data )","d1f4a637":"sns.relplot(x= 'WeeklyWages', y= 'UltimateIncurredClaimCost', hue='Gender', data=data )","60d9a58f":"sns.relplot(x= 'DaysWorkedPerWeek', y= 'UltimateIncurredClaimCost', hue='Gender', data=data )","b15066b5":"sns.distplot(data['WeeklyWages'])","8a8ed981":"sns.distplot(data['DaysWorkedPerWeek'], bins=5)","6c66be80":"sns.catplot(x='UltimateIncurredClaimCost',kind='box', data=data)","ed6fac9c":"sns.catplot(x='InitialIncurredCalimsCost',kind='box', data=data)","17547639":"df.head()","3cd35500":"df.info()","8c1f3642":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","b05c0800":"x, y=(df.drop(['UltimateIncurredClaimCost'],axis = 1), df.UltimateIncurredClaimCost)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size =\n0.3, random_state=0)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","ffdb9cd3":"x.head()","1631561c":"x.shape","2e58e2b7":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","b44b4c47":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score","cdfece41":"def cross_val(model):\n    pred = cross_val_score(model, x, y, cv=10)\n    return pred.mean()","a9c26ddf":"def print_evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')","aa276272":"def evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","928b6c6f":"x","6dc440ec":"x.isnull().sum()","bcaadb36":"lin_reg = LinearRegression(normalize=True)\nlin_reg.fit(x_train,y_train)","2ca18805":"pred = lin_reg.predict(x_test)","2b28af43":"test_pred = lin_reg.predict(x_test)\ntrain_pred = lin_reg.predict(x_train)","242e3260":"print('Test set evalation:')\nprint_evaluate(y_test, test_pred)\nprint('Train set evaluation:')\nprint_evaluate(y_train, train_pred)","762803dd":"from sklearn.datasets import make_regression\nfrom sklearn.ensemble import GradientBoostingRegressor\ngradient=GradientBoostingRegressor(random_state=0)\ngradient.fit(x_train,y_train)","e6bcd5b6":"test_pred2 = gradient.predict(x_test)\ntrain_pred2 = gradient.predict(x_train)","0c69f4f1":"print('Test set evalation:')\nprint_evaluate(y_test, test_pred2)\nprint('Train set evaluation:')\nprint_evaluate(y_train, train_pred2)","8a8f8f1c":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_regression\n\nregr = RandomForestRegressor( random_state=0)\nregr.fit(x_train,y_train)\n\n","372ed072":"test_pred3 = regr.predict(x_test)\ntrain_pred3 = regr.predict(x_train)","debd54f8":"print('Test set evalation:')\nprint_evaluate(y_test, test_pred3)\nprint('Train set evaluation:')\nprint_evaluate(y_train, train_pred3)","f7ab70f0":"datatest=pd.read_csv('..\/input\/ml-lab-exam\/testdata_SJC.csv')\ndatatest.head()","52ba2fa5":"datatest.shape","b579943c":"datatest.isnull().sum()","e4500c78":"#datatest = datatest.dropna()","20980deb":"datatest = datatest.drop([ 'ClaimDescription','ClaimNumber'], axis=1 )","3ed0398e":"datatest.head()","9cbfc97c":"datatest['gender'] = pd.factorize(datatest.Gender)[0]","330b4101":"datatest.gender.value_counts()","570dc710":"datatest['maritalstatus'] = pd.factorize(datatest.MaritalStatus)[0]\ndatatest.MaritalStatus.value_counts()","0031d82c":"datatest['parttimefulltime'] = pd.factorize(datatest.PartTimeFullTime)[0]\ndatatest.PartTimeFullTime.value_counts()","cb91f44c":"datatest['DateTimeOfAccident'] = pd.to_datetime(datatest['DateTimeOfAccident'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')\ndatatest['DateReported'] = pd.to_datetime(datatest['DateReported'], \n format = '%Y-%m-%dT%H:%M:%SZ', \n errors = 'coerce')","8a3b279c":"datatest['DateTimeOfAccidentyear'] = datatest['DateTimeOfAccident'].dt.year\ndatatest['DateTimeOfAccidentmonth'] = datatest['DateTimeOfAccident'].dt.month\ndatatest['DateTimeOfAccidentday'] = datatest['DateTimeOfAccident'].dt.day\ndatatest['DateTimeOfAccidenthour'] = datatest['DateTimeOfAccident'].dt.hour\n","337f7477":"datatest['DateReportedyear'] = datatest['DateReported'].dt.year\ndatatest['DateReportedmonth'] = datatest['DateReported'].dt.month\ndatatest['DateReportedday'] = datatest['DateReported'].dt.day\n","9b95c283":"df1 = datatest.drop(['Gender','MaritalStatus','PartTimeFullTime','DateTimeOfAccident','DateReported',],axis=1)\ndf1.head()","c46af410":"df1 = df1.drop(['DateReportedday','DateReportedmonth','DateTimeOfAccidentday','DaysWorkedPerWeek','HoursWorkedPerWeek'],axis=1)\ndf1.head()","92cb0bff":"df1.shape","6505dce2":"df1 = scaler.transform(df1)","2de71408":"linear1 = lin_reg.predict(df1)","86870296":"linear1","1b191a90":"regr1=regr.predict(df1)","09de0599":"regr1","2361c9a1":"gradient1 = gradient.predict(df1)","a13b587f":"gradient1","98c970ec":"csv = pd.read_csv(\"..\/input\/ml-lab-exam\/sample_submission_csv.csv\")\ncsv[\"UltimateIncurredClaimCost\"]= gradient1","60702692":"csv.to_csv('grad.csv')","2eb15c9f":"csv = pd.read_csv(\"..\/input\/ml-lab-exam\/sample_submission_csv.csv\")\ncsv[\"UltimateIncurredClaimCost\"]= regr1","046d0f80":"csv.to_csv('regr.csv')","777adbbd":"# Cleaning the data","e0f1f779":"# linear","96db8575":"# Randomforest regressor","c3c9bcf6":"linear","b4220125":"# model test file","05114c51":"# Gradient boost","6866e956":"histogram target variabale","2c6c9e46":"random forest regressor","49e5827f":"# Gradient boost\n ","dda808fb":"'DateReported','DateReportedday','DateReportedmonth','DateTimeOfAccidentday','DaysWorkedPerWeek','HoursWorkedPerWeek']\nremoved after checking coorrealtion","775c7495":"#  Hackathon 2021","c8d01b64":"# Relationship analysis","7215b796":"# Test file"}}