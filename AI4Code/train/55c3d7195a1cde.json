{"cell_type":{"bc191cf0":"code","024c294d":"code","433f41af":"code","bf3150fb":"code","d899db00":"code","d5a69d85":"code","0bc918cb":"code","9f266874":"code","60a6d49e":"code","29b35006":"code","0495d9f2":"code","1a0d58df":"code","a319dbf6":"code","be52de78":"code","9212859f":"code","cd8d3a6b":"code","7bb17efd":"code","2288a622":"code","ad7c3685":"markdown"},"source":{"bc191cf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visulization \nfrom sklearn import svm  # Support vector machine\nfrom sklearn.model_selection import train_test_split  # split the train data\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","024c294d":"#loading data files\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.shape","433f41af":"#exploring data files\ntrain_image = train.iloc[0:5000,1:]\ntrain_label = train.iloc[0:5000,:1]\ntrain.head()","bf3150fb":"#Since the image is currently one-dimension, we load it into a numpy array and reshape it so that it is two-dimensional (28x28 pixels)\ni=0\ntrain_img = train_image.iloc[i].as_matrix()\ntrain_img = train_img.reshape((28,28))\nplt.imshow(train_img, cmap = 'gray')\ntrain_label.iloc[i]\ntrain_img1.shape","d899db00":"#Split the training data into train & validation set\ntrain_images, val_images , train_labels, val_labels = train_test_split(train_image, train_label,train_size = 0.8, random_state =0)","d5a69d85":"#trying SVM \nclf = svm.SVC()","0bc918cb":"#fitting the modle\nclf.fit(train_images,train_labels.values.ravel())","9f266874":"#checking the accuracy for validation set\nclf.score(val_images, val_labels)","60a6d49e":"train_image\/=255\ntest_SVM=test\/255\ntrain_images\/=255\nval_images\/=255","29b35006":"clf.fit(train_images,train_labels.values.ravel())","0495d9f2":"clf.score(val_images,val_labels)","1a0d58df":"results_SVM=clf.predict(test_SVM[0:])","a319dbf6":"#convert the result into desierd file(.csv)\ndf = pd.DataFrame(results_SVM)\ndf.index.name='ImageId'\ndf.index+=1\ndf.columns=['Label']\ndf.to_csv('..\/results_SVM.csv', header=True)\ndf.head()","be52de78":"#Exploring orignal data files and converting them itno array\nx_train = np.array(train.iloc[:,1:])\ny_train = np.array(train.iloc[:,:1])\nx_test = np.array(test)","9212859f":"n_features_train = x_train.shape[1]        #[1]represent col\nn_samples_train = x_train.shape[0]        #[0]represent row\nn_features_test = x_test.shape[1]\nn_samples_test = x_test.shape[0]\nprint(n_features_train, n_samples_train, n_features_test, n_samples_test)\nprint(x_train.shape, y_train.shape, x_test.shape)","cd8d3a6b":"# show the image\ndef show_img(X):\n    plt.figure(figsize=(8,7))\n    n_samples = X.shape[0]\n    X = X.reshape(n_samples, 28, 28)\n    for i in range(20):\n        plt.subplot(5, 4, i+1)\n        plt.imshow(X[i])\n    plt.show()","7bb17efd":"show_img(x_train)","2288a622":"show_img(x_test)","ad7c3685":"**Pre-Porcessing **\n\n**Feature Standardization\/regularization  ( It is used to centre the data around zero mean and unit variance)\n#1st: converting all the value grater than zero to one and rest all remain zero.\n#2nd: converting the value with standarization or divide the value by 255 as pixle value is varying from (0-255) to achive the regularization**[](http:\/\/)"}}