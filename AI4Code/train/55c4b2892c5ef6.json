{"cell_type":{"1df86c53":"code","6bddf7c8":"code","19d8866b":"code","e0c725d5":"code","c2f116e7":"code","dc113da9":"code","bc812f45":"code","c6391f6a":"code","f1dc852c":"code","a62ff67c":"code","6cc33084":"code","a3937aec":"code","bf86d6e4":"code","f9a2878f":"code","441919c8":"code","88edc418":"code","739cc22e":"code","06d9b438":"code","192cb0cd":"code","3ad5e991":"code","82268c29":"code","c2c7e40f":"code","14f2f5f2":"code","7b8a19e9":"code","9ef11622":"code","f197e47b":"code","e1c27bca":"code","8a542c55":"code","a5fa60d0":"code","3ef6c9da":"code","4788a1a7":"code","655de868":"code","4baee71b":"code","d7163e66":"code","da9506be":"code","a8e0ffb0":"code","71c7c96a":"code","df8b1db3":"code","39fbfa21":"code","002ff0f8":"code","8694fdb7":"code","600458fc":"code","101b3776":"markdown","8e35bd15":"markdown","912a7bcf":"markdown","4bd0a67d":"markdown"},"source":{"1df86c53":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_rows', None)","6bddf7c8":"df_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","19d8866b":"df_train.head()","e0c725d5":"df_train.describe()","c2f116e7":"df_test.describe()","dc113da9":"df_train.info()","bc812f45":"print(\"shape\")\nprint(\" Train data :\",df_train.shape)\nprint(\" Test data :\",df_test.shape)","c6391f6a":"s= (df_train.dtypes=='object')\nobject_cols=list(s[s].index)\nprint(\"Categorial Variable :\",object_cols)","f1dc852c":"s= (df_train.dtypes=='int')\nnum_cols=list(s[s].index)\nprint(\"Integer Variable :\",num_cols)","a62ff67c":"s= (df_train.dtypes=='float')\nfloat_cols=list(s[s].index)\nprint(\"Real Variable :\",float_cols)","6cc33084":"df = [df_train,df_test]\ndf_c = pd.concat(df).reset_index(drop=True)","a3937aec":"df_c.head()","bf86d6e4":"df_c.isnull().sum()","f9a2878f":"plt.figure(figsize=(18,6))\nplt.title('Heatmap of missing values')\nsns.heatmap(df_c.isnull(),yticklabels=False,cbar=False,cmap='viridis')","441919c8":"unique_values = []\nfor col in object_cols:\n  unique_values.append(df_c[col].unique().size)\nplt.figure(figsize=(18,6))\nplt.title('No. Unique values of Categorical Features')\nplt.xticks(rotation=90)\nsns.barplot(x=object_cols,y=unique_values)","88edc418":"plt.figure(figsize=(18,36))\nplt.title('Categorical Features: Distribution')\nplt.xticks(rotation=90)\nindex = 1\nfor col in object_cols:\n  y = df_c[col].value_counts()\n  plt.subplot(11,4,index)\n  plt.xticks(rotation=90)\n  sns.barplot(x=list(y.index), y=y)\n  index +=1","739cc22e":"df_c.drop(columns='Id',inplace=True); print('Drop Id \\n')\ndf_c['MSZoning'] = df_c['MSZoning'].fillna(df_c['MSZoning'].mode()[0])\ndf_c['LotFrontage'] = df_c['LotFrontage'].fillna(df_c['LotFrontage'].mean())\ndf_c.drop(columns='Alley',inplace=True); print('Drop Alley \\n')\n\n#df_c['Utilities'] = df_c['Utilities'].fillna(df_c['Utilities'].mode()[0])\nprint(df_c['Utilities'].value_counts())\ndf_c.drop(columns='Utilities',inplace=True); print('Drop Utilities \\n')\n\ndf_c['Exterior1st'] = df_c['Exterior1st'].fillna(df_c['Exterior1st'].mode()[0])\ndf_c['Exterior2nd'] = df_c['Exterior2nd'].fillna(df_c['Exterior2nd'].mode()[0])\ndf_c['MasVnrType'] = df_c['MasVnrType'].fillna(df_c['MasVnrType'].mode()[0])\ndf_c['MasVnrArea'] = df_c['MasVnrArea'].fillna(df_c['MasVnrArea'].mean())\ndf_c['Electrical'] = df_c['Electrical'].fillna(df_c['Electrical'].mode()[0])\ndf_c['KitchenQual'] = df_c['KitchenQual'].fillna(df_c['KitchenQual'].mode()[0])\ndf_c['Functional'] = df_c['Functional'].fillna(df_c['Functional'].mode()[0])\n\n#df_c.loc[(df_c['Fireplaces'] != 0) & (df_c['FireplaceQu'].isnull()) ][['FireplaceQu','Fireplaces']]\ndf_c['FireplaceQu'] = df_c['FireplaceQu'].fillna('NA'); print('FirePlaceQu: Fill NA values for missing values \\n')\n\ndf_c.loc[(df_c['PoolQC'].isnull()) & df_c['PoolArea']>0][['PoolQC','PoolArea']]\ndf_c.at[2599,'PoolQC'] = df_c['PoolQC'].mode()[0]; print('PoolQC: Use mode for missing value with non-zero PoolAre \\n')\ndf_c['PoolQC'] = df_c['PoolQC'].fillna('NA'); print('PoolQC: Use NA for remaining missing values \\n')\n\ndf_c['SaleType'].fillna(df_c['SaleType'].mode()[0],inplace=True)\ndf_c.drop(columns=['Fence','MiscFeature','SalePrice'],inplace=True); print('Drop Fence, MiscFeature and SalePrice\\n')\n\n# Basement Features\n#df_c.loc[df_c['BsmtQual'].isnull()][['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']].head()\n#df_c.loc[df_c['TotalBsmtSF'].isnull()][['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']]\nprint('Fill missing values of Basement features with NA or 0 \\n')\ndf_c['BsmtQual'] = df_c['BsmtQual'].fillna('NA')\ndf_c['BsmtCond'] = df_c['BsmtCond'].fillna('NA')\ndf_c['BsmtExposure'] = df_c['BsmtExposure'].fillna('NA')\ndf_c['BsmtFinType1'] = df_c['BsmtFinType1'].fillna('NA')\ndf_c['BsmtFinType2'] = df_c['BsmtFinType2'].fillna('NA')\n\ndf_c['BsmtFinSF1'] = df_c['BsmtFinSF1'].fillna(int(0))\ndf_c['BsmtFinSF2'] = df_c['BsmtFinSF2'].fillna(int(0))\ndf_c['BsmtUnfSF'] = df_c['BsmtUnfSF'].fillna(int(0))\ndf_c['TotalBsmtSF'] = df_c['TotalBsmtSF'].fillna(int(0))\ndf_c['BsmtFullBath'] = df_c['BsmtFullBath'].fillna(int(0))\ndf_c['BsmtHalfBath'] = df_c['BsmtHalfBath'].fillna(int(0))\n\n# Garage Features\n# df_c.loc[df_c['GarageCond'].isnull()][['GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond']].head()\nprint('Fill missing values of Garage features with NA or 0 \\n')\ndf_c['GarageType'] = df_c['GarageType'].fillna('NA')\ndf_c['GarageFinish'] = df_c['GarageFinish'].fillna('NA')\ndf_c['GarageCond'] = df_c['GarageCond'].fillna('NA')\ndf_c['GarageQual'] = df_c['GarageQual'].fillna('NA')\ndf_c['GarageCars'] = df_c['GarageCars'].fillna(int(0))\ndf_c['GarageArea'] = df_c['GarageArea'].fillna(int(0))\ndf_c['GarageYrBlt'] = df_c['GarageYrBlt'].fillna(int(0))","06d9b438":"df_c.head()","192cb0cd":"df_c.dtypes","3ad5e991":"df_c.isnull().sum().sum()","82268c29":"from sklearn.preprocessing import OneHotEncoder\ns = (df_c.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\")\nprint(object_cols)\nprint('No. of. categorical features: ',len(object_cols))","c2c7e40f":"OH_encoder = OneHotEncoder(sparse=False)\nOH_cols = pd.DataFrame(OH_encoder.fit_transform(df_c[object_cols]))\nOH_cols.index = df_c.index\nOH_cols.columns = OH_encoder.get_feature_names()\ndf_final = df_c.drop(object_cols, axis=1)\ndf_final = pd.concat([df_final, OH_cols], axis=1)\ndf_final.head()","14f2f5f2":"# Check that the shapes are consistent\n\nprint('df_c_final shape:', df_final.shape)\nprint('df_c_train shape:', df_train.shape)\nprint('df_c_test shape:',  df_test.shape)\n\nX_Train = pd.DataFrame(df_final[:1460])\nX_Test  = pd.DataFrame(df_final[1460:])\nY_Train = df_train['SalePrice']\n\nprint('\\nCheck that the datasets are consistent:\\n')\nprint('X_train shape', X_Train.shape)\nprint('Y_train shape:', Y_Train.shape)\nprint('X_test shape:',  X_Test.shape)","7b8a19e9":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\n# Split the training set into training and validation set\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(X_Train, Y_Train, train_size=0.8, test_size=0.2,random_state=0)","9ef11622":"X_train.Grvl","f197e47b":"from sklearn.ensemble import RandomForestRegressor\n\nmodel_RFR = RandomForestRegressor()\nmodel_RFR.fit(X_train, Y_train)\nY_pred = model_RFR.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","e1c27bca":"from sklearn.ensemble import GradientBoostingRegressor\n\nmodel_GBR = GradientBoostingRegressor()\nmodel_GBR.fit(X_train, Y_train)\nY_pred = model_GBR.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","8a542c55":"from sklearn.linear_model import SGDRegressor\n\nmodel_SGD = SGDRegressor()\nmodel_SGD.fit(X_train, Y_train)\nY_pred = model_SGD.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","a5fa60d0":"import warnings\nwarnings.filterwarnings('ignore')\n\nfrom xgboost import XGBRegressor\n\nmodel_XGBR = XGBRegressor(learning_rate=0.03,n_estimators=200,objective='reg:squarederror')\nmodel_XGBR.fit(X_train,Y_train)\nY_pred = model_XGBR.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","3ef6c9da":"plt.figure()\nplt.title('Comparison of Sale Price of Predicted and Actual values')\nplt.scatter(Y_Train,model_RFR.predict(X_Train),label='Random Forest')\nplt.scatter(Y_Train,model_XGBR.predict(X_Train),label='XGB')\nplt.legend()","4788a1a7":"from sklearn.model_selection import GridSearchCV\nmodel = XGBRegressor()\n\nn_estimators   = [100, 200, 500]\nlearning_rates = [0.03,0.1,0.3]\nobjectives     = ['reg:squarederror']\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators' : n_estimators,\n    'learning_rate':learning_rates,\n    'objective' : objectives\n    }\n\ngrid_cv = GridSearchCV(estimator = model,\n            param_grid = hyperparameter_grid,\n            scoring = 'neg_mean_absolute_error',\n            return_train_score = True)\n\ngrid_cv.fit(X_Train,Y_Train)","655de868":"grid_cv.best_score_","4baee71b":"grid_cv.best_estimator_","d7163e66":"Y_pred = grid_cv.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","da9506be":"regressor = grid_cv.best_estimator_\nY_pred = regressor.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","a8e0ffb0":"plt.figure()\nplt.title('Comparison of Sale Price of Predicted and Actual values')\nplt.scatter(Y_Train,model_RFR.predict(X_Train),label='Random Forest')\nplt.scatter(Y_Train,model_XGBR.predict(X_Train),label='XGB')\nplt.scatter(Y_Train,regressor.predict(X_Train),label='Best model')\nplt.legend()","71c7c96a":"Y_Pred = regressor.predict(X_Test)\nY_Pred","df8b1db3":"Y_Pred.shape","39fbfa21":"sub = pd.DataFrame()\nsub['Id'] = df_test['Id']\nsub['SalePrice'] = Y_Pred","002ff0f8":"sub.head()","8694fdb7":"sub.tail()","600458fc":"sub.to_csv('Submission.csv')","101b3776":"# Data Preprocessing","8e35bd15":"### Import Onehot encoder to encode categorical features ","912a7bcf":"# Model selection and prediction","4bd0a67d":"Check that all missing values have been taken care of.\n\n"}}