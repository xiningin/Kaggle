{"cell_type":{"9b99ec07":"code","d73c1589":"code","ec1aa427":"code","ddf5c216":"code","3daf9b05":"code","a243f4e6":"code","68745f8c":"code","3eaa1c69":"markdown"},"source":{"9b99ec07":"import numpy as np\nimport pandas as pd\n\nfrom xgboost import XGBClassifier","d73c1589":"TRAIN_PATH = \"..\/input\/tabular-playground-series-dec-2021\/train.csv\"\nTEST_PATH = \"..\/input\/tabular-playground-series-dec-2021\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"Id\"\nTARGET = \"Cover_Type\"\nTREE_METHOD = 'gpu_hist'","ec1aa427":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","ddf5c216":"def getLabelCount(df,target):\n    return [( labelValue,len(train.loc[df[target] == labelValue]) ) for labelValue in df[target].unique()]\n\nlabelCount = getLabelCount(train,TARGET)\nlabelCount","3daf9b05":"y = train[TARGET]\nX = train.drop([ID,TARGET],axis=1)\nX_test = test.drop([ID],axis=1)","a243f4e6":"model = XGBClassifier(tree_method=TREE_METHOD) \nmodel.fit(X, y)","68745f8c":"submission = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsubmission[TARGET] =model.predict(X_test)\nsubmission.to_csv(SUBMISSION_PATH,index=False)\nsubmission.head()","3eaa1c69":"'gpu_hist' => gEquivalent to the XGBoost fast histogram algorithm\n\n'gpu_exact' => Performs exact search for splits. Slower and uses considerably more memory than gpu_hist.\n\n\nhttps:\/\/xgboost.readthedocs.io\/en\/release_0.81\/gpu\/index.html"}}