{"cell_type":{"e7f0259d":"code","e0e89c0c":"code","03091ef3":"code","10c124bc":"code","748f3e67":"code","6337b7d3":"markdown","7e7d9b8c":"markdown"},"source":{"e7f0259d":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\n# Read the data\nX_full = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/test.csv', index_col='Id')\nX_study = pd.read_csv('..\/input\/train.csv', index_col='Id')  #to study orignal file\n\n# attempt to remove outliers\nX_full = X_full.drop(X_full[(X_full['GrLivArea'] > 4000) & (X_full['SalePrice'] < 300000)].index)\nX_full = X_full.drop(X_full[X_full['TotalBsmtSF']> 4000].index)\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","e0e89c0c":"X_study.head()","03091ef3":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy=\"most_frequent\")\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\n# model = RandomForestRegressor(n_estimators=100, random_state=0) - attempting to replace with boost\nfrom xgboost import XGBRegressor\nmodel = XGBRegressor(n_estimators=1000, max_depth=3, subsample=0.8, colsample_bytree=0.4, learning_rate=0.03, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","10c124bc":"preds_test = my_pipeline.predict(X_test)","748f3e67":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","6337b7d3":"This is my first dabble in the world of machine learning so I'm fairly pleased to get a reasonable prediction out of this. Still so much to learn but I'm content with this start :)","7e7d9b8c":"**[Intermediate Machine Learning Micro-Course Home Page](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)**\n\n---\n"}}