{"cell_type":{"7afc7b8b":"code","aef2f1c2":"code","66788922":"code","e102e3d5":"code","10c70a19":"code","b1f57216":"code","c61b7119":"code","e7388744":"code","a856863a":"code","6c5c7aba":"code","1577acb2":"code","d47b0788":"code","a5e9c0c6":"code","664efbe6":"code","831e7783":"code","48dc1936":"code","d1088655":"code","fc0d9c34":"code","3974ed4f":"code","520adeda":"code","001c708a":"code","f1f2d46b":"code","210f17e0":"code","132bfaf7":"code","0c93f9f5":"code","6f4027b4":"markdown","a284bf42":"markdown","89c51aa6":"markdown","327cb9a1":"markdown","affd486f":"markdown","898049c6":"markdown","a4fee7ff":"markdown","61a742d6":"markdown","918b666c":"markdown","c645a85b":"markdown","a3a07517":"markdown","708ee596":"markdown","8d1c0c75":"markdown","db61a79e":"markdown"},"source":{"7afc7b8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aef2f1c2":"import numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/weather-dataset\/weatherHistory.csv')\ndf.head()","66788922":"df.shape","e102e3d5":"df['Loud Cover'].value_counts()","10c70a19":"df['Daily Summary'].value_counts()","b1f57216":"df.drop(['Daily Summary','Loud Cover'],axis=1,inplace=True)","c61b7119":"df.head()","e7388744":"df.isnull().sum()","a856863a":"df['Precip Type'].value_counts()","6c5c7aba":"df.dropna(inplace=True)\ndf.shape","1577acb2":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Precip Type']=le.fit_transform(df['Precip Type'])\ndf['Summary']=le.fit_transform(df['Summary'])\ndf.head()\n","d47b0788":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf[df.columns[2:]] = scaler.fit_transform(df[df.columns[2:]])\ndf.head()","a5e9c0c6":"import numpy as np\nfrom datetime import datetime\n\ndef discretize_date(current_date, t):\n    current_date = current_date[:-10]\n    cdate = datetime.strptime(current_date, '%Y-%m-%d %H:%M:%S')\n\n    if t == 'hour_sin':\n        return np.sin(2 * np.pi * cdate.hour\/24.0)\n    if t == 'hour_cos':\n        return np.cos(2 * np.pi * cdate.hour\/24.0)\n    if t == 'day_sin':\n        return np.sin(2 * np.pi * cdate.timetuple().tm_yday\/365.0)\n    if t == 'day_cos':\n        return np.cos(2 * np.pi * cdate.timetuple().tm_yday\/365.0)","664efbe6":"date_types = ['hour_sin', 'hour_cos', 'day_sin', 'day_cos']\nfor dt in date_types:\n    df[dt] = df['Formatted Date'].apply(lambda x : discretize_date(x, dt))\ndf.drop(['Formatted Date'],axis=1,inplace=True)","831e7783":"df.corr()    # checking correlation to drop unnecessary variable","48dc1936":"df.drop(['Apparent Temperature (C)'],axis=1,inplace=True)","d1088655":"y=df.iloc[:,0] \nX = df.iloc[:,1:]  ","fc0d9c34":"X","3974ed4f":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=1)","520adeda":"X_train.shape","001c708a":"X_test.shape","f1f2d46b":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(max_depth=32,n_estimators=120,random_state=1)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","210f17e0":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","132bfaf7":"model = RandomForestClassifier(max_depth=32,n_estimators=120,random_state=1)\nmodel.fit(X_train[X_train.columns[:-4]],y_train)\ny_pred = model.predict(X_test[X_test.columns[:-4]])","0c93f9f5":"accuracy_score(y_test, y_pred)","6f4027b4":"Drop Null values","a284bf42":"# Measuring Accuracy","89c51aa6":"# Train Test Splitting","327cb9a1":"# Exploratory Data Analysis\n\nRemove variables which do not have much impact on the prediction. \nCalculate the value of loud cover: it is same for all rows, so I can remove it.\n","affd486f":"# Training the Model","898049c6":"Check Null values","a4fee7ff":"Standardize input features","61a742d6":"I also remove Daily Summary, since it is text","918b666c":"# Load Dataset","c645a85b":"Apparent Temperature and Temperature are highly correlated (correlation almost equal to 1). So, we can drop one of them.","a3a07517":"# Data Cleaning\n\nConvert categorical data into numerical data","708ee596":"I will use the precip type column as output of the dataset. ","8d1c0c75":"# Feature Engineering\n\nStandardize Data. Extract day of year and hour of day","db61a79e":"Train the same model without the datetime feature"}}