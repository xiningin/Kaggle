{"cell_type":{"bd7f33ed":"code","5f48b2c0":"code","a829ddc8":"code","8fbf5d84":"code","c961768a":"code","39654961":"code","6900f1f1":"code","c866b5ba":"code","a556660e":"code","2b49abc6":"code","0f7be352":"code","5cb31cd8":"code","f8081e68":"code","b37f9565":"code","9449449f":"code","f4703d64":"code","02c7699c":"code","2c032285":"code","af2a0875":"code","58b71f68":"code","4590d847":"code","7753bc13":"code","c99cd68b":"code","6322f18a":"code","8fe37ccb":"code","bf7528a3":"code","522f96b2":"code","a1820489":"code","fae028c8":"code","1ae6e189":"code","b068a6a4":"code","d08af2e5":"code","272949f2":"code","a628d5b9":"code","93377d03":"code","b7992028":"code","914cb718":"code","89d59a0d":"code","da9a4ce6":"code","c04a7f81":"code","63060e9d":"code","bc6ab865":"code","58e27689":"code","316b43d5":"code","6bcc9d0f":"code","c57881bc":"code","949a9b1f":"code","b18012de":"code","cc294582":"code","9779eb4a":"code","b0a8994d":"code","8f996512":"code","ec42ff19":"markdown","fffd98ce":"markdown","91ecce31":"markdown","d0b38a82":"markdown","752c135d":"markdown","ccd298bf":"markdown","6df1c32c":"markdown","74bdbee2":"markdown","c0bc72e1":"markdown","a9ec72cf":"markdown","f48138e1":"markdown","7cfd472b":"markdown","4739418e":"markdown","328b893e":"markdown","1ebbbf81":"markdown","80be28f0":"markdown","8a2239bf":"markdown","55866390":"markdown","7d91ebca":"markdown","5d9afb1b":"markdown","e6491d31":"markdown","8ed612ac":"markdown","0a15d3b7":"markdown","9c6be5f9":"markdown","f4479a5f":"markdown","bce02958":"markdown","5e0e35bb":"markdown","4068b95a":"markdown","f13ea514":"markdown","560632fb":"markdown","29081963":"markdown","db183e69":"markdown","c085bfcc":"markdown","f96c4cee":"markdown","d6905f9a":"markdown","43240abc":"markdown","55c8bb44":"markdown","86214da8":"markdown","21ba36d5":"markdown","cd309ab1":"markdown","8a9875ed":"markdown","fb40a763":"markdown","4a9219b8":"markdown","5d7b6599":"markdown","51d8f595":"markdown","36583fe8":"markdown","59fbdd87":"markdown"},"source":{"bd7f33ed":"\"\"\"\nUncomment the below code if the dependencies are not installed earlier.\n\"\"\"\n'''\n!pip install plotly\n!pip install pycountry\n!pip install ipywidgets\n'''","5f48b2c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport gc\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport pycountry\n\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom ipywidgets import widgets\n\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings('ignore')","a829ddc8":"surveyDF = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv',low_memory=False)\nsurveyDF.drop(0,inplace=True)\nsurveyDF.reset_index(drop=True,inplace=True)","8fbf5d84":"def verticalHistogramSingleColumn(surveyDF, column, title, xaxis, yaxis, labels, width, height):\n    \"\"\"\n    This utility method will process the single column that is passed as a parameter and generate a vertical histogram.\n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :param column: Column used to construct the Histogram.\n    :param title: Default title of the visualization.\n    :param xaxis: X-Axis label.\n    :param yaxis: Y-Axis label.\n    :param labels: Distinct set of values in that are present in the column. The order in which the bins should be\n            displayed left to right.\n    :param width: Visualization width in pixels.\n    :param height: Visualization height in pixels.\n    :return: FigureWidget Histogram.\n    \"\"\"\n    traceData = []\n\n    counter = 0\n\n    for label in labels:\n        if counter % 10 == 0:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(0,107,164,1)', ))\n\n        if counter % 10 == 1:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(255,128,14,1)', ))\n\n        if counter % 10 == 2:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(171,171,171,1)', ))\n\n        if counter % 10 == 3:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(89,89,89,1)', ))\n\n        if counter % 10 == 4:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(95,158,209,1)', ))\n\n        if counter % 10 == 5:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(255,188,121,1)', ))\n\n        if counter % 10 == 6:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(207,207,207,1)', ))\n\n        if counter % 10 == 7:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(200,82,0,1)', ))\n\n        if counter % 10 == 8:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(162,200,236,1)', ))\n\n        if counter % 10 == 9:\n            trace = go.Histogram(x=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(137,137,137,1)', ))\n\n        counter += 1\n        traceData.append(trace)\n\n    layout = go.Layout(\n        title=title,\n        xaxis=dict(title=xaxis),\n        yaxis=dict(title=yaxis),\n        barmode='group',\n        autosize=True,\n        bargap=0.25\n    )\n\n    fig = go.FigureWidget(data=traceData, layout=layout)\n\n    fig.update_layout(showlegend=False,\n                      autosize=False,\n                      width=width,\n                      height=height, )\n\n    gc.collect()\n\n    return fig","c961768a":"def verticalHistogramMultipleColumns(surveyDF, columns, title, xaxis, yaxis, width, height):\n    \"\"\"\n    This utility method will process the list of columns that are passed as a parameter and generate a vertical\n    histogram.\n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :param columns: Columns used to construct the Histogram.\n    :param title: Default title of the visualization.\n    :param xaxis: X-Axis label.\n    :param yaxis: Y-Axis label.\n    :param width: Visualization width in pixels.\n    :param height: Visualization height in pixels.\n    :return: FigureWidget Histogram.\n    \"\"\"\n    traceData = []\n\n    counter = 0\n\n    for column in columns:\n        if counter % 10 == 0:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(0,107,164,1)', ))\n\n        if counter % 10 == 1:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(255,128,14,1)', ))\n\n        if counter % 10 == 2:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(171,171,171,1)', ))\n\n        if counter % 10 == 3:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(89,89,89,1)', ))\n\n        if counter % 10 == 4:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(95,158,209,1)', ))\n\n        if counter % 10 == 5:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(255,188,121,1)', ))\n\n        if counter % 10 == 6:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(207,207,207,1)', ))\n\n        if counter % 10 == 7:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(200,82,0,1)', ))\n\n        if counter % 10 == 8:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(162,200,236,1)', ))\n\n        if counter % 10 == 9:\n            trace = go.Histogram(x=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(137,137,137,1)', ))\n\n        counter += 1\n        traceData.append(trace)\n\n    layout = go.Layout(\n        title=title,\n        xaxis=dict(title=xaxis),\n        yaxis=dict(title=yaxis),\n        barmode='group',\n        autosize=True,\n        bargap=0.25\n    )\n\n    fig = go.FigureWidget(data=traceData, layout=layout)\n\n    fig.update_layout(showlegend=False,\n                      autosize=False,\n                      width=width,\n                      height=height, )\n\n    gc.collect()\n\n    return fig","39654961":"def horizontalHistogramSingleColumn(surveyDF, column, title, xaxis, yaxis, labels, width, height):\n    \"\"\"\n    This utility method will process the single column that is passed as a parameter and generate a horizontal histogram.\n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :param column: Column used to construct the Histogram.\n    :param title: Default title of the visualization\n    :param xaxis: X-Axis label.\n    :param yaxis: Y-Axis label.\n    :param labels: Distinct set of values in that are present in the column. The order in which the bins should be\n            displayed bottom to top.\n    :param width: Visualization width in pixels.\n    :param height: Visualization height in pixels.\n    :return: FigureWidget Histogram.\n    \"\"\"\n    traceData = []\n\n    counter = 0\n\n    for label in labels:\n        if counter % 10 == 0:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(0,107,164,1)', ))\n\n        if counter % 10 == 1:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(255,128,14,1)', ))\n\n        if counter % 10 == 2:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(171,171,171,1)', ))\n\n        if counter % 10 == 3:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(89,89,89,1)', ))\n\n        if counter % 10 == 4:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(95,158,209,1)', ))\n\n        if counter % 10 == 5:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(255,188,121,1)', ))\n\n        if counter % 10 == 6:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(207,207,207,1)', ))\n\n        if counter % 10 == 7:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(200,82,0,1)', ))\n\n        if counter % 10 == 8:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(162,200,236,1)', ))\n\n        if counter % 10 == 9:\n            trace = go.Histogram(y=surveyDF[surveyDF[column] == label][column],\n                                 name=label,\n                                 marker=dict(color='rgba(137,137,137,1)', ))\n\n        counter += 1\n        traceData.append(trace)\n\n    layout = go.Layout(\n        title=title,\n        xaxis=dict(title=xaxis),\n        yaxis=dict(title=yaxis),\n        barmode='group',\n        autosize=True,\n        bargap=0.25\n    )\n\n    fig = go.FigureWidget(data=traceData, layout=layout)\n\n    fig.update_layout(showlegend=False, autosize=False,\n                      width=width,\n                      height=height, )\n\n    gc.collect()\n\n    return fig","6900f1f1":"def horizontalHistogramMultipleColumns(surveyDF, columns, title, xaxis, yaxis,width,height):\n    \"\"\"\n    This utility method will process the list of columns that are passed as a parameter and generate a horizontal \n    histogram. \n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :param columns: Columns used to construct the Histogram.\n    :param title: Default title of the visualization.\n    :param xaxis: X-Axis label.\n    :param yaxis: Y-Axis label.\n    :param width: Visualization width in pixels.\n    :param height: Visualization height in pixels.\n    :return: FigureWidget Histogram.\n    \"\"\"\n    traceData = []\n\n    counter = 0\n\n    for column in columns:\n        if counter % 10 == 0:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(0,107,164,1)', ))\n\n        if counter % 10 == 1:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(255,128,14,1)', ))\n\n        if counter % 10 == 2:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(171,171,171,1)', ))\n\n        if counter % 10 == 3:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(89,89,89,1)', ))\n\n        if counter % 10 == 4:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(95,158,209,1)', ))\n\n        if counter % 10 == 5:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(255,188,121,1)', ))\n\n        if counter % 10 == 6:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(207,207,207,1)', ))\n\n        if counter % 10 == 7:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(200,82,0,1)', ))\n\n        if counter % 10 == 8:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(162,200,236,1)', ))\n\n        if counter % 10 == 9:\n            trace = go.Histogram(y=surveyDF[column].dropna(),\n                                 name=column,\n                                 marker=dict(color='rgba(137,137,137,1)', ))\n\n        counter += 1\n        traceData.append(trace)\n\n    layout = go.Layout(\n        title=title,\n        xaxis=dict(title=xaxis),\n        yaxis=dict(title=yaxis),\n        barmode='group',\n        autosize=True,\n        bargap=0.25\n    )\n\n    fig = go.FigureWidget(data=traceData, layout=layout)\n\n    fig.update_layout(showlegend=False,autosize=False,\n                      width=width,\n                      height=height,)\n\n    gc.collect()\n\n    return fig","c866b5ba":"def donutPie(surveyDF, column, title, colors, pull, hole, width, height):\n    \"\"\"\n    This utility method will process the single column that is passed as a parameter and generate a pie chart.\n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :param column: Column used to construct the Histogram.\n    :param title: Default title of the visualization.\n    :param colors: list of RGB colors used in the Pie visualization.\n    :param pull: Categorical pull.\n    :param hole: Size of the center hole.\n    :param width: Visualization width in pixels.\n    :param height: Visualization height in pixels.\n    :return: Pie FigureWidget\n    \"\"\"\n\n    labels = surveyDF[column].value_counts().index\n    values = surveyDF[column].value_counts().values\n\n    trace = go.Pie(labels=labels,\n                   values=values,\n                   hole=hole,\n                   textinfo='label+percent',\n                   pull=pull,\n                   marker_colors=colors)\n\n    layout = go.Layout(\n        title=title\n    )\n\n    fig = go.FigureWidget(data=[trace],\n                          layout=layout)\n\n    fig.update_layout(showlegend=False,\n                      autosize=False,\n                      width=width,\n                      height=height, )\n\n    gc.collect()\n\n    return fig\n","a556660e":"countries = sorted(set(np.append(surveyDF.Q3.values, \"All\")))\n\n\ndef getCountryISODictionary():\n    \"\"\"\n    This method will add the alpha_3 code for the missing entries in pycountry.countries.\n    :return: Dictionary of country name along with the alpha 3 code.\n    \"\"\"\n    countries = {}\n\n    for country in pycountry.countries:\n        countries[country.name] = country.alpha_3\n\n    countries['Taiwan'] = 'ZHO'\n    countries['Iran'] = 'IRN'\n    countries['United Kingdom of Great Britain and Northern Ireland'] = 'GBR'\n    countries['South Korea'] = 'KOR'\n    countries['Republic of Korea'] = 'KOR'\n    countries['United States of America'] = 'USA'\n    countries['Russia'] = 'RUS'\n\n    return countries\n\n\ndef createLocationDF(countries, surveyDF):\n    \"\"\"\n    This method will create locationDF with country name, alpha 3 code and the number of participants are from the\n    country.\n    :param countries: Dictionary of country name along with the alpha 3 code.\n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :return: Pandas dataframe with country name, alpha 3 code and the number of participants are from the\n    country.\n    \"\"\"\n    locationDF = surveyDF[['Q3']]\n\n    locationDF.drop(locationDF[locationDF.Q3 == 'Other'].index, inplace=True)\n    locationDF.reset_index(drop=True, inplace=True)\n\n    locationDF.loc[locationDF.Q3 == 'Iran, Islamic Republic of...', 'Q3'] = 'Iran'\n\n    for country in set(locationDF.Q3.values):\n        locationDF.loc[locationDF.Q3 == country, 'alpha_3'] = countries[country]\n\n    locationDF['country'] = locationDF['Q3']\n\n    locationDF = locationDF.groupby(['country', 'alpha_3'])['Q3'].count().reset_index(name=\"count\")\n\n    return locationDF\n\n\ndef geoDistribution(surveyDF):\n    \"\"\"\n    This method will create the geographical distribution visualization.\n    :param surveyDF: Pandas dataframe generated by reading the survey responses.\n    :return: None.\n    \"\"\"\n    countries = getCountryISODictionary()\n\n    locationDF = createLocationDF(countries, surveyDF)\n\n    trace = go.Choropleth(\n        locations=locationDF['alpha_3'],\n        z=locationDF['count'],\n        text=locationDF['country'],\n        colorscale='Blues',\n        autocolorscale=False,\n        marker_line_color='darkgray',\n        marker_line_width=0.5,\n        colorbar_title='Number of participants', )\n\n    layout = go.Layout(title='Participants Geographic Distribution',\n                       geo=dict(\n                           showframe=False,\n                           showcoastlines=False,\n                           projection_type='equirectangular'\n                       ))\n\n    fig = go.Figure(data=[trace], layout=layout)\n\n    iplot(fig)\n\n    del locationDF\n    gc.collect()\n\n\ngeoDistribution(surveyDF)","2b49abc6":"ageDistributionLabels = sorted(surveyDF['Q1'].value_counts().index)\n\nageDistributionFig = verticalHistogramSingleColumn(surveyDF,\n                                                   column='Q1',\n                                                   title='Participants Age Distribution',\n                                                   xaxis='Age',\n                                                   yaxis='Count',\n                                                   labels=ageDistributionLabels,\n                                                   width=990,\n                                                   height=600)\n\nageDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nageDistributionContainer = widgets.HBox(children=[ageDistributionTextbox])\n\n\ndef ageDistributionResponse(change):\n    if (ageDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == ageDistributionTextbox.value][['Q1']].reset_index(drop=True)\n\n    with ageDistributionFig.batch_update():\n        for i in range(len(ageDistributionFig.data)):\n            ageDistributionFig.data[i].x = df[df['Q1'] == ageDistributionFig.data[i].name]['Q1'].values\n        if (ageDistributionTextbox.value == 'All'):\n            ageDistributionFig.layout.title = dict(text=\"Participants Age Distribution\")\n        else:\n            ageDistributionFig.layout.title = dict(text=ageDistributionTextbox.value + \" Participants Age Distribution\")\n\n\nageDistributionTextbox.observe(ageDistributionResponse, names=\"value\")\n\nwidgets.VBox([ageDistributionContainer,\n              ageDistributionFig])","0f7be352":"colors = ['rgba(171,171,171,1)', 'rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)']\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2]\n\ngenderDistributionFig = donutPie(surveyDF, column='Q2', title=\"Participants Gender Distribution\", colors=colors,\n                                 pull=pull, hole=.3, width=990, height=600)\n\ngenderDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ngenderDistributionContainer = widgets.HBox(children=[genderDistributionTextBox])\n\n\ndef genderDistributionResponse(change):\n    if (genderDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == genderDistributionTextBox.value][['Q2']].reset_index(drop=True)\n\n    with genderDistributionFig.batch_update():\n        values = df['Q2'].value_counts().values\n        genderDistributionFig.data[0].values = values\n        if (genderDistributionTextBox.value == 'All'):\n            genderDistributionFig.layout.title = dict(\n                text=\"Participants Gender Distribution\")\n        else:\n            genderDistributionFig.layout.title = dict(\n                text=genderDistributionTextBox.value + \" Participants Gender Distribution\")\n\n\ngenderDistributionTextBox.observe(genderDistributionResponse, names=\"value\")\n\nwidgets.VBox([genderDistributionContainer,\n              genderDistributionFig])","5cb31cd8":"surveyDF['Q4'] = surveyDF['Q4'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q4 == 'Some college\/university study without earning a bachelor\u2019s degree',\n    'Q4'\n] = 'Some college\/university study without<br>earning a bachelor\u2019s degree'\n\nacademicQualificationLabels = ['I prefer not to answer', 'No formal education past high school',\n                               'Some college\/university study without<br>earning a bachelor\u2019s degree',\n                               'Professional degree',\n                               'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree']\n\nacademicQualificationDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q4',\n                                                                       title='Participants Academic Qualification',\n                                                                       xaxis='Count',\n                                                                       yaxis='Qualification',\n                                                                       labels=academicQualificationLabels, width=990,\n                                                                       height=600)\n\nacademicQualificationDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nacademicQualificationDistributionContainer = widgets.HBox(children=[academicQualificationDistributionTextbox])\n\n\ndef academicQualificationDistributionResponse(change):\n    if (academicQualificationDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == academicQualificationDistributionTextbox.value][['Q4']].reset_index(drop=True)\n\n    with academicQualificationDistributionFig.batch_update():\n        for i in range(len(academicQualificationDistributionFig.data)):\n            academicQualificationDistributionFig.data[i].y = \\\n                df[df['Q4'] == academicQualificationDistributionFig.data[i].name]['Q4'].values\n        if (academicQualificationDistributionTextbox.value == 'All'):\n            academicQualificationDistributionFig.layout.title = dict(\n                text=\"Participants Academic Qualification\")\n        else:\n            academicQualificationDistributionFig.layout.title = dict(\n                text=academicQualificationDistributionTextbox.value + \" Participants Academic Qualification\")\n\n\nacademicQualificationDistributionTextbox.observe(academicQualificationDistributionResponse, names=\"value\")\n\nwidgets.VBox([academicQualificationDistributionContainer,\n              academicQualificationDistributionFig])","f8081e68":"dsLearningPlatformColumns = ['Q37_Part_1', 'Q37_Part_2', 'Q37_Part_3', 'Q37_Part_4', 'Q37_Part_5', 'Q37_Part_6',\n                             'Q37_Part_7',\n                             'Q37_Part_8',\n                             'Q37_Part_9', 'Q37_Part_10', 'Q37_Part_11', 'Q37_OTHER']\n\nsurveyDF['Q37_Part_9'] = surveyDF['Q37_Part_9'].str.strip()\nsurveyDF['Q37_Part_10'] = surveyDF['Q37_Part_10'].str.strip()\nsurveyDF.loc[\n    surveyDF.Q37_Part_9 == 'Cloud-certification programs (direct from AWS, Azure, GCP, or similar)'\n    , 'Q37_Part_9'] = 'Cloud-certification programs<br>(direct from AWS, Azure, GCP, or similar)'\nsurveyDF.loc[\n    surveyDF.Q37_Part_10 == 'University Courses (resulting in a university degree)'\n    , 'Q37_Part_10'] = 'University Courses<br>(resulting in a university degree)'\n\ndsLearningPlatformDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=dsLearningPlatformColumns,\n                                                                       title='Data Science Learning Platform',\n                                                                       xaxis='Count',\n                                                                       yaxis='Data Science Learning Platform',\n                                                                       width=990, height=800)\n\ndsLearningPlatformDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ndsLearningPlatformDistributionContainer = widgets.HBox(children=[dsLearningPlatformDistributionTextbox])\n\n\ndef dsLearningPlatformDistributionResponse(change):\n    if (dsLearningPlatformDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == dsLearningPlatformDistributionTextbox.value][\n            dsLearningPlatformColumns].reset_index(drop=True)\n\n    with dsLearningPlatformDistributionFig.batch_update():\n        for i in range(len(dsLearningPlatformDistributionFig.data)):\n            dsLearningPlatformDistributionFig.data[i].y = df[dsLearningPlatformDistributionFig.data[i].name].dropna()\n        if (dsLearningPlatformDistributionTextbox.value == 'All'):\n            dsLearningPlatformDistributionFig.layout.title = dict(text=\"Data Science Learning Platform\")\n        else:\n            dsLearningPlatformDistributionFig.layout.title = dict(\n                text=dsLearningPlatformDistributionTextbox.value + \" Data Science Learning Platform\")\n\n\ndsLearningPlatformDistributionTextbox.observe(dsLearningPlatformDistributionResponse, names=\"value\")\n\nwidgets.VBox([dsLearningPlatformDistributionContainer,\n              dsLearningPlatformDistributionFig])","b37f9565":"codingExperience = ['I have never written code', '< 1 years', '1-2 years', '3-5 years',\n                    '5-10 years', '10-20 years', '20+ years', ]\n\ncodingExperienceDistributionFig = verticalHistogramSingleColumn(surveyDF, column='Q6',\n                                                                title='Participants Coding Experience',\n                                                                xaxis='Experience', yaxis='Count',\n                                                                labels=codingExperience, width=990, height=600)\n\ncodingExperienceDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ncodingExperienceDistributionContainer = widgets.HBox(children=[codingExperienceDistributionTextbox])\n\n\ndef codingExperienceDistributionResponse(change):\n    if (codingExperienceDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == codingExperienceDistributionTextbox.value][['Q6']].reset_index(drop=True)\n\n    with codingExperienceDistributionFig.batch_update():\n        for i in range(len(codingExperienceDistributionFig.data)):\n            codingExperienceDistributionFig.data[i].x = df[df['Q6'] == codingExperienceDistributionFig.data[i].name][\n                'Q6'].values\n        if (codingExperienceDistributionTextbox.value == 'All'):\n            codingExperienceDistributionFig.layout.title = dict(\n                text=\"Participants Coding Experience\")\n        else:\n            codingExperienceDistributionFig.layout.title = dict(\n                text=codingExperienceDistributionTextbox.value + \" Participants Coding Experience\")\n\n\ncodingExperienceDistributionTextbox.observe(codingExperienceDistributionResponse, names=\"value\")\n\nwidgets.VBox([codingExperienceDistributionContainer,\n              codingExperienceDistributionFig])","9449449f":"programmingLanguageLabels = sorted(surveyDF['Q8'].value_counts().index)\n\nfirstProgrammingLanguageDistributionFig = verticalHistogramSingleColumn(surveyDF, column='Q8',\n                                                                        title='Programming Language For Aspiring Data Scientist',\n                                                                        xaxis='Programming Language', yaxis='Count',\n                                                                        labels=programmingLanguageLabels, width=990,\n                                                                        height=600)\n\nfirstProgrammingLanguageDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nfirstProgrammingLanguageDistributionContainer = widgets.HBox(children=[firstProgrammingLanguageDistributionTextbox])\n\n\ndef firstProgrammingLanguageDistributionResponse(change):\n    if (firstProgrammingLanguageDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == firstProgrammingLanguageDistributionTextbox.value][['Q8']].reset_index(\n            drop=True)\n\n    with firstProgrammingLanguageDistributionFig.batch_update():\n        for i in range(len(firstProgrammingLanguageDistributionFig.data)):\n            firstProgrammingLanguageDistributionFig.data[i].x = \\\n                df[df['Q8'] == firstProgrammingLanguageDistributionFig.data[i].name]['Q8'].values\n        if (firstProgrammingLanguageDistributionTextbox.value == 'All'):\n            firstProgrammingLanguageDistributionFig.layout.title = dict(\n                text=\"Programming Language For Aspiring Data Scientist\")\n        else:\n            firstProgrammingLanguageDistributionFig.layout.title = dict(\n                text=firstProgrammingLanguageDistributionTextbox.value + \" Programming Language For Aspiring Data Scientist\")\n\n\nfirstProgrammingLanguageDistributionTextbox.observe(firstProgrammingLanguageDistributionResponse, names=\"value\")\n\nwidgets.VBox([firstProgrammingLanguageDistributionContainer,\n              firstProgrammingLanguageDistributionFig])","f4703d64":"programmingLanguageColumns = ['Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3', 'Q7_Part_4', 'Q7_Part_5', 'Q7_Part_6', 'Q7_Part_7',\n                              'Q7_Part_8',\n                              'Q7_Part_9', 'Q7_Part_10', 'Q7_Part_11', 'Q7_Part_12', 'Q7_OTHER']\n\nprogrammingLanguageDistributionFig = verticalHistogramMultipleColumns(surveyDF, columns=programmingLanguageColumns,\n                                                                      title='Programming Language',\n                                                                      xaxis='Programming Language', yaxis='Count',\n                                                                      width=990, height=600)\n\nprogrammingLanguageDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nprogrammingLanguageDistributionContainer = widgets.HBox(children=[programmingLanguageDistributionTextbox])\n\n\ndef programmingLanguageDistributionResponse(change):\n    if (programmingLanguageDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == programmingLanguageDistributionTextbox.value][\n            programmingLanguageColumns].reset_index(drop=True)\n\n    with programmingLanguageDistributionFig.batch_update():\n        for i in range(len(programmingLanguageDistributionFig.data)):\n            programmingLanguageDistributionFig.data[i].x = df[programmingLanguageDistributionFig.data[i].name].dropna()\n\n        if (programmingLanguageDistributionTextbox.value == 'All'):\n            programmingLanguageDistributionFig.layout.title = dict(text=\"Programming Language\")\n        else:\n            programmingLanguageDistributionFig.layout.title = dict(\n                text=programmingLanguageDistributionTextbox.value + \" Programming Language\")\n\n\nprogrammingLanguageDistributionTextbox.observe(programmingLanguageDistributionResponse, names=\"value\")\n\nwidgets.VBox([programmingLanguageDistributionContainer,\n              programmingLanguageDistributionFig])","02c7699c":"salaryLabels = ['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499',\n                '7,500-9,999', '10,000-14,999', '15,000-19,999', '20,000-24,999', '25,000-29,999',\n                '30,000-39,999', '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999',\n                '80,000-89,999', '90,000-99,999', '100,000-124,999', '125,000-149,999', '150,000-199,999',\n                '200,000-249,999', '250,000-299,999', '300,000-500,000', '> $500,000']\n\nsalaryDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q24', title='Participants Salary',\n                                                        xaxis='Count',\n                                                        yaxis='Salary', labels=salaryLabels, width=990, height=1000)\n\nsalaryDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nsalaryDistributionContainer = widgets.HBox(children=[salaryDistributionTextbox])\n\n\ndef salaryDistributionResponse(change):\n    if (salaryDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == salaryDistributionTextbox.value][['Q24']].reset_index(drop=True)\n\n    with salaryDistributionFig.batch_update():\n        for i in range(len(salaryDistributionFig.data)):\n            salaryDistributionFig.data[i].y = df[df['Q24'] == salaryDistributionFig.data[i].name]['Q24'].values\n        if (salaryDistributionTextbox.value == 'All'):\n            salaryDistributionFig.layout.title = dict(text=\"Participants Salary\")\n        else:\n            salaryDistributionFig.layout.title = dict(text=salaryDistributionTextbox.value + \" Participants Salary\")\n\n\nsalaryDistributionTextbox.observe(salaryDistributionResponse, names=\"value\")\n\nwidgets.VBox([salaryDistributionContainer,\n              salaryDistributionFig])","2c032285":"colors = ['rgba(171,171,171,1)', 'rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)',\n          'rgba(89,89,89,1)', 'rgba(255,188,121,1)', 'rgba(207,207,207,1)', 'rgba(200,82,0,1)',\n          'rgba(162,200,236,1)', 'rgba(137,137,137,1)', 'rgba(171,171,171,1)', 'rgba(95,158,209,1)',\n          'rgba(0,107,164,1)']\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\njobTitleDistributionFig = donutPie(surveyDF, column='Q5', title='Participants Job Title', colors=colors, pull=pull,\n                                   hole=.0, width=990, height=600)\n\njobTitleDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\njobTitleDistributionContainer = widgets.HBox(children=[jobTitleDistributionTextBox])\n\n\ndef jobTitleDistributionResponse(change):\n    if (jobTitleDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == jobTitleDistributionTextBox.value][['Q5']].reset_index(drop=True)\n\n    with jobTitleDistributionFig.batch_update():\n        values = df['Q5'].value_counts().values\n        jobTitleDistributionFig.data[0].values = values\n        if (jobTitleDistributionTextBox.value == 'All'):\n            jobTitleDistributionFig.layout.title = dict(\n                text=\"Participants Job Title\")\n        else:\n            jobTitleDistributionFig.layout.title = dict(\n                text=jobTitleDistributionTextBox.value + \" Participants Job Title\")\n\n\njobTitleDistributionTextBox.observe(jobTitleDistributionResponse, names=\"value\")\n\nwidgets.VBox([jobTitleDistributionContainer,\n              jobTitleDistributionFig])","af2a0875":"dailyActivityColumns = ['Q23_Part_1', 'Q23_Part_2', 'Q23_Part_3', 'Q23_Part_4', 'Q23_Part_5', 'Q23_Part_6',\n                        'Q23_Part_7',\n                        'Q23_OTHER']\n\nsurveyDF['Q23_Part_1'] = surveyDF['Q23_Part_1'].str.strip()\nsurveyDF['Q23_Part_2'] = surveyDF['Q23_Part_2'].str.strip()\nsurveyDF['Q23_Part_3'] = surveyDF['Q23_Part_3'].str.strip()\nsurveyDF['Q23_Part_4'] = surveyDF['Q23_Part_4'].str.strip()\nsurveyDF['Q23_Part_5'] = surveyDF['Q23_Part_5'].str.strip()\nsurveyDF['Q23_Part_6'] = surveyDF['Q23_Part_6'].str.strip()\nsurveyDF['Q23_Part_7'] = surveyDF['Q23_Part_7'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_1 == 'Analyze and understand data to influence product or business decisions',\n    'Q23_Part_1'\n] = 'Analyze and understand data to influence<br>product or business decisions'\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_2 == 'Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data',\n    'Q23_Part_2'\n] = 'Build and\/or run the data infrastructure that<br>my business uses for storing, analyzing,<br>and operationalizing data'\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_3 == 'Build prototypes to explore applying machine learning to new areas',\n    'Q23_Part_3'\n] = 'Build prototypes to explore applying<br>machine learning to new areas'\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_4 == 'Build and\/or run a machine learning service that operationally improves my product or workflows',\n    'Q23_Part_4'\n] = 'Build and\/or run a machine learning service<br>that operationally improves my product or workflows'\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_5 == 'Experimentation and iteration to improve existing ML models',\n    'Q23_Part_5'\n] = 'Experimentation and iteration to<br>improve existing ML models'\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_6 == 'Do research that advances the state of the art of machine learning',\n    'Q23_Part_6'\n] = 'Do research that advances the state<br>of the art of machine learning'\n\nsurveyDF.loc[\n    surveyDF.Q23_Part_7 == 'None of these activities are an important part of my role at work',\n    'Q23_Part_7'\n] = 'None of these activities are an<br>important part of my role at work'\n\ndailyActivityDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=dailyActivityColumns,\n                                                                  title='Daily Activities',\n                                                                  xaxis='Count',\n                                                                  yaxis='Daily Activity', width=990, height=600)\n\ndailyActivityDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ndailyActivityDistributionContainer = widgets.HBox(children=[dailyActivityDistributionTextbox])\n\n\ndef dailyActivityDistributionResponse(change):\n    if (dailyActivityDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == dailyActivityDistributionTextbox.value][dailyActivityColumns].reset_index(\n            drop=True)\n\n    with dailyActivityDistributionFig.batch_update():\n        for i in range(len(dailyActivityDistributionFig.data)):\n            dailyActivityDistributionFig.data[i].y = df[dailyActivityDistributionFig.data[i].name].dropna()\n        if (dailyActivityDistributionTextbox.value == 'All'):\n            dailyActivityDistributionFig.layout.title = dict(text=\"Daily Activities\")\n        else:\n            dailyActivityDistributionFig.layout.title = dict(\n                text=dailyActivityDistributionTextbox.value + \" Daily Activities\")\n\n\ndailyActivityDistributionTextbox.observe(dailyActivityDistributionResponse, names=\"value\")\n\nwidgets.VBox([dailyActivityDistributionContainer,\n              dailyActivityDistributionFig])","58b71f68":"colors = ['rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)', 'rgba(171,171,171,1)', ]\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2]\n\nemployeeCountDistributionFig = donutPie(surveyDF, column='Q20', title='Participants Company Size',\n                                        colors=colors, pull=pull, hole=.0, width=990, height=600)\n\nemployeeCountDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nemployeeCountDistributionContainer = widgets.HBox(children=[employeeCountDistributionTextBox])\n\n\ndef employeeCountDistributionResponse(change):\n    if (employeeCountDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == employeeCountDistributionTextBox.value][['Q20']].reset_index(drop=True)\n\n    with employeeCountDistributionFig.batch_update():\n        values = df['Q20'].value_counts().values\n        employeeCountDistributionFig.data[0].values = values\n        if (employeeCountDistributionTextBox.value == 'All'):\n            employeeCountDistributionFig.layout.title = dict(\n                text=\"Participants Company Size\")\n        else:\n            employeeCountDistributionFig.layout.title = dict(\n                text=employeeCountDistributionTextBox.value + \" Participants Company Size\")\n\n\nemployeeCountDistributionTextBox.observe(employeeCountDistributionResponse, names=\"value\")\n\nwidgets.VBox([employeeCountDistributionContainer,\n              employeeCountDistributionFig])","4590d847":"colors = ['rgba(171,171,171,1)', 'rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)',\n          'rgba(255,188,121,1)', 'rgba(207,207,207,1)', ]\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\ndsTeamSizeDistributionFig = donutPie(surveyDF, column='Q21', title='Participants Data Science Team Size',\n                                     colors=colors, pull=pull, hole=.0, width=990, height=600)\n\ndsTeamSizeDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ndsTeamSizeDistributionContainer = widgets.HBox(children=[dsTeamSizeDistributionTextBox])\n\n\ndef dsTeamSizeDistributionResponse(change):\n    if (dsTeamSizeDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == dsTeamSizeDistributionTextBox.value][['Q21']].reset_index(drop=True)\n\n    with dsTeamSizeDistributionFig.batch_update():\n        values = df['Q21'].value_counts().values\n        dsTeamSizeDistributionFig.data[0].values = values\n        if (dsTeamSizeDistributionTextBox.value == 'All'):\n            dsTeamSizeDistributionFig.layout.title = dict(\n                text=\"Participants Data Science Team Size\")\n        else:\n            dsTeamSizeDistributionFig.layout.title = dict(\n                text=dsTeamSizeDistributionTextBox.value + \" Participants Data Science Team Size\")\n\n\ndsTeamSizeDistributionTextBox.observe(dsTeamSizeDistributionResponse, names=\"value\")\n\nwidgets.VBox([dsTeamSizeDistributionContainer,\n              dsTeamSizeDistributionFig])","7753bc13":"ideColumns = ['Q9_Part_1', 'Q9_Part_2', 'Q9_Part_3', 'Q9_Part_4', 'Q9_Part_5', 'Q9_Part_6', 'Q9_Part_7', 'Q9_Part_8',\n              'Q9_Part_9', 'Q9_Part_10', 'Q9_Part_11', 'Q9_OTHER']\n\nsurveyDF['Q9_Part_1'] = surveyDF['Q9_Part_1'].str.strip()\nsurveyDF['Q9_Part_4'] = surveyDF['Q9_Part_4'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q9_Part_1 == 'Jupyter (JupyterLab, Jupyter Notebooks, etc)',\n    'Q9_Part_1'\n] = 'Jupyter<br>(JupyterLab, Jupyter Notebooks, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q9_Part_4 == 'Visual Studio Code (VSCode)',\n    'Q9_Part_4'\n] = 'Visual Studio Code<br>(VSCode)'\n\nideDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=ideColumns, title='IDE Usage', xaxis='Count',\n                                                        yaxis='IDE', width=990, height=600)\n\nideDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nideDistributionContainer = widgets.HBox(children=[ideDistributionTextbox])\n\n\ndef ideDistributionResponse(change):\n    if (ideDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == ideDistributionTextbox.value][ideColumns].reset_index(drop=True)\n\n    with ideDistributionFig.batch_update():\n        for i in range(len(ideDistributionFig.data)):\n            ideDistributionFig.data[i].y = df[ideDistributionFig.data[i].name].dropna()\n        if (ideDistributionTextbox.value == 'All'):\n            ideDistributionFig.layout.title = dict(text=\"IDE Usage\")\n        else:\n            ideDistributionFig.layout.title = dict(text=ideDistributionTextbox.value + \" IDE Usage\")\n\n\nideDistributionTextbox.observe(ideDistributionResponse, names=\"value\")\n\nwidgets.VBox([ideDistributionContainer,\n              ideDistributionFig])","c99cd68b":"notebookColumns = ['Q10_Part_1', 'Q10_Part_2', 'Q10_Part_3', 'Q10_Part_4', 'Q10_Part_5', 'Q10_Part_6', 'Q10_Part_7',\n                   'Q10_Part_8',\n                   'Q10_Part_9', 'Q10_Part_10', 'Q10_Part_11', 'Q10_Part_12', 'Q10_Part_13', 'Q10_OTHER']\n\nnotebookDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=notebookColumns,\n                                                             title='Interactive Notebooks Usage', xaxis='Count',\n                                                             yaxis='Notebooks', width=990, height=600)\n\nnotebookDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nnotebookDistributionContainer = widgets.HBox(children=[notebookDistributionTextbox])\n\n\ndef notebookDistributionResponse(change):\n    if (notebookDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == notebookDistributionTextbox.value][notebookColumns].reset_index(drop=True)\n\n    with notebookDistributionFig.batch_update():\n        for i in range(len(notebookDistributionFig.data)):\n            notebookDistributionFig.data[i].y = df[notebookDistributionFig.data[i].name].dropna()\n        if (notebookDistributionTextbox.value == 'All'):\n            notebookDistributionFig.layout.title = dict(text=\"Interactive Notebooks Usage\")\n        else:\n            notebookDistributionFig.layout.title = dict(\n                text=notebookDistributionTextbox.value + \" Interactive Notebooks Usage\")\n\n\nnotebookDistributionTextbox.observe(notebookDistributionResponse, names=\"value\")\n\nwidgets.VBox([notebookDistributionContainer,\n              notebookDistributionFig])","6322f18a":"surveyDF['Q38'] = surveyDF['Q38'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q38 == 'Local development environments (RStudio, JupyterLab, etc.)', 'Q38'] = 'Local development environments<br>(RStudio, JupyterLab, etc.)'\nsurveyDF.loc[\n    surveyDF.Q38 == 'Basic statistical software (Microsoft Excel, Google Sheets, etc.)', 'Q38'] = 'Basic statistical software<br>(Microsoft Excel, Google Sheets, etc.)'\nsurveyDF.loc[\n    surveyDF.Q38 == 'Business intelligence software (Salesforce, Tableau, Spotfire, etc.)', 'Q38'] = 'Business intelligence software<br>(Salesforce, Tableau, Spotfire, etc.)'\nsurveyDF.loc[\n    surveyDF.Q38 == 'Advanced statistical software (SPSS, SAS, etc.)', 'Q38'] = 'Advanced statistical software<br>(SPSS, SAS, etc.)'\nsurveyDF.loc[\n    surveyDF.Q38 == 'Cloud-based data software & APIs (AWS, GCP, Azure, etc.)', 'Q38'] = 'Cloud-based data software & APIs<br>(AWS, GCP, Azure, etc.)'\n\nprimaryDataAnalysisLabels = surveyDF.Q38.value_counts().index\n\nprimaryDataAnalysisDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q38',\n                                                                     title='Primary Data Analysis Tools', xaxis='Count',\n                                                                     yaxis='Data Analysis Product',\n                                                                     labels=primaryDataAnalysisLabels,\n                                                                     width=990, height=600)\n\nprimaryDataAnalysisDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nprimaryDataAnalysisDistributionContainer = widgets.HBox(children=[primaryDataAnalysisDistributionTextbox])\n\n\ndef primaryDataAnalysisDistributionResponse(change):\n    if (primaryDataAnalysisDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == primaryDataAnalysisDistributionTextbox.value][['Q38']].reset_index(drop=True)\n\n    with primaryDataAnalysisDistributionFig.batch_update():\n        for i in range(len(primaryDataAnalysisDistributionFig.data)):\n            primaryDataAnalysisDistributionFig.data[i].y = \\\n                df[df['Q38'] == primaryDataAnalysisDistributionFig.data[i].name]['Q38'].values\n        if (primaryDataAnalysisDistributionTextbox.value == 'All'):\n            primaryDataAnalysisDistributionFig.layout.title = dict(text=\"Primary Data Analysis Tools\")\n        else:\n            primaryDataAnalysisDistributionFig.layout.title = dict(\n                text=primaryDataAnalysisDistributionTextbox.value + \" Primary Data Analysis Tools\")\n\n\nprimaryDataAnalysisDistributionTextbox.observe(primaryDataAnalysisDistributionResponse, names=\"value\")\n\nwidgets.VBox([primaryDataAnalysisDistributionContainer,\n              primaryDataAnalysisDistributionFig])","8fe37ccb":"visualizationToolColumns = ['Q14_Part_1', 'Q14_Part_2', 'Q14_Part_3', 'Q14_Part_4', 'Q14_Part_5', 'Q14_Part_6',\n                            'Q14_Part_7',\n                            'Q14_Part_8',\n                            'Q14_Part_9', 'Q14_Part_10', 'Q14_Part_11', 'Q14_OTHER']\n\nvisualizationToolDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=visualizationToolColumns,\n                                                                      title='Visualization Framework', xaxis='Count',\n                                                                      yaxis='Visualization Framework', width=990,\n                                                                      height=600)\n\nvisualizationToolDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nvisualizationToolDistributionContainer = widgets.HBox(children=[visualizationToolDistributionTextbox])\n\n\ndef visualizationToolDistributionResponse(change):\n    if (visualizationToolDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == visualizationToolDistributionTextbox.value][\n            visualizationToolColumns].reset_index(drop=True)\n\n    with visualizationToolDistributionFig.batch_update():\n        for i in range(len(visualizationToolDistributionFig.data)):\n            visualizationToolDistributionFig.data[i].y = df[visualizationToolDistributionFig.data[i].name].dropna()\n        if (visualizationToolDistributionTextbox.value == 'All'):\n            visualizationToolDistributionFig.layout.title = dict(text=\"Visualization Framework\")\n        else:\n            visualizationToolDistributionFig.layout.title = dict(\n                text=visualizationToolDistributionTextbox.value + \" Visualization Framework\")\n\n\nvisualizationToolDistributionTextbox.observe(visualizationToolDistributionResponse, names=\"value\")\n\nwidgets.VBox([visualizationToolDistributionContainer,\n              visualizationToolDistributionFig])","bf7528a3":"primaryBILabels = surveyDF.Q32.value_counts().index\n\nprimaryBIDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q32',\n                                                           title='Primary Business Intelligence Tool', xaxis='Count',\n                                                           yaxis='BI Product', labels=primaryBILabels, width=990,\n                                                           height=1000)\n\nprimaryBIDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nprimaryBIDistributionContainer = widgets.HBox(children=[primaryBIDistributionTextbox])\n\n\ndef primaryBIDistributionResponse(change):\n    if (primaryBIDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == primaryBIDistributionTextbox.value][['Q32']].reset_index(drop=True)\n\n    with primaryBIDistributionFig.batch_update():\n        for i in range(len(primaryBIDistributionFig.data)):\n            primaryBIDistributionFig.data[i].y = df[df['Q32'] == primaryBIDistributionFig.data[i].name]['Q32'].values\n        if (primaryBIDistributionTextbox.value == 'All'):\n            primaryBIDistributionFig.layout.title = dict(text=\"Primary Business Intelligence Tool\")\n        else:\n            primaryBIDistributionFig.layout.title = dict(\n                text=primaryBIDistributionTextbox.value + \" Primary Business Intelligence Tool\")\n\n\nprimaryBIDistributionTextbox.observe(primaryBIDistributionResponse, names=\"value\")\n\nwidgets.VBox([primaryBIDistributionContainer,\n              primaryBIDistributionFig])","522f96b2":"biColumns = ['Q31_A_Part_1', 'Q31_A_Part_2', 'Q31_A_Part_3', 'Q31_A_Part_4', 'Q31_A_Part_5', 'Q31_A_Part_6',\n           'Q31_A_Part_7', 'Q31_A_Part_8',\n           'Q31_A_Part_9', 'Q31_A_Part_10', 'Q31_A_Part_11', 'Q31_A_Part_12', 'Q31_A_Part_13', 'Q31_A_Part_14',\n           'Q31_A_OTHER']\n\nbiDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=biColumns,\n                                                       title='Business Intelligence Products',\n                                                       xaxis='Count',\n                                                       yaxis='Business Intelligence Product', width=990, height=800)\n\nbiDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nbiDistributionContainer = widgets.HBox(children=[biDistributionTextbox])\n\n\ndef biDistributionResponse(change):\n    if (biDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == biDistributionTextbox.value][biColumns].reset_index(drop=True)\n\n    with biDistributionFig.batch_update():\n        for i in range(len(biDistributionFig.data)):\n            biDistributionFig.data[i].y = df[biDistributionFig.data[i].name].dropna()\n        if (biDistributionTextbox.value == 'All'):\n            biDistributionFig.layout.title = dict(text=\"Business Intelligence Products\")\n        else:\n            biDistributionFig.layout.title = dict(text=biDistributionTextbox.value + \" Business Intelligence Products\")\n\n\nbiDistributionTextbox.observe(biDistributionResponse, names=\"value\")\n\nwidgets.VBox([biDistributionContainer,\n              biDistributionFig])","a1820489":"biToLearnColumns = ['Q31_B_Part_1', 'Q31_B_Part_2', 'Q31_B_Part_3', 'Q31_B_Part_4', 'Q31_B_Part_5', 'Q31_B_Part_6',\n                    'Q31_B_Part_7', 'Q31_B_Part_8',\n                    'Q31_B_Part_9', 'Q31_B_Part_10', 'Q31_B_Part_11', 'Q31_B_Part_12', 'Q31_B_Part_13', 'Q31_B_Part_14',\n                    'Q31_B_OTHER']\n\nbiToLearnDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=biToLearnColumns,\n                                                              title='Business Intelligence Products To Learn',\n                                                              xaxis='Count',\n                                                              yaxis='Business Intelligence Product', width=990,\n                                                              height=800)\n\nbiToLearnDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nbiToLearnDistributionContainer = widgets.HBox(children=[biToLearnDistributionTextbox])\n\n\ndef biToLearnDistributionResponse(change):\n    if (biToLearnDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == biToLearnDistributionTextbox.value][biToLearnColumns].reset_index(drop=True)\n\n    with biToLearnDistributionFig.batch_update():\n        for i in range(len(biToLearnDistributionFig.data)):\n            biToLearnDistributionFig.data[i].y = df[biToLearnDistributionFig.data[i].name].dropna()\n        if (biToLearnDistributionTextbox.value == 'All'):\n            biToLearnDistributionFig.layout.title = dict(text=\"Business Intelligence Products To Learn\")\n        else:\n            biToLearnDistributionFig.layout.title = dict(\n                text=biToLearnDistributionTextbox.value + \" Business Intelligence Products To Learn\")\n\n\nbiToLearnDistributionTextbox.observe(biToLearnDistributionResponse, names=\"value\")\n\nwidgets.VBox([biToLearnDistributionContainer,\n              biToLearnDistributionFig])","fae028c8":"primaryBigDataLabels = surveyDF.Q30.value_counts().index\n\nprimaryBigDataDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q30', title='Primary BigData Product',\n                                                                xaxis='Count',\n                                                                yaxis='BigData Product', labels=primaryBigDataLabels,\n                                                                width=990,\n                                                                height=1000)\n\nprimaryBigDataDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nprimaryBigDataDistributionContainer = widgets.HBox(children=[primaryBigDataDistributionTextbox])\n\n\ndef primaryBigDataDistributionResponse(change):\n    if (primaryBigDataDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == primaryBigDataDistributionTextbox.value][['Q30']].reset_index(drop=True)\n\n    with primaryBigDataDistributionFig.batch_update():\n        for i in range(len(primaryBigDataDistributionFig.data)):\n            primaryBigDataDistributionFig.data[i].y = df[df['Q30'] == primaryBigDataDistributionFig.data[i].name][\n                'Q30'].values\n        if (primaryBigDataDistributionTextbox.value == 'All'):\n            primaryBigDataDistributionFig.layout.title = dict(text=\"Primary BigData Product\")\n        else:\n            primaryBigDataDistributionFig.layout.title = dict(\n                text=primaryBigDataDistributionTextbox.value + \" Primary BigData Product\")\n\n\nprimaryBigDataDistributionTextbox.observe(primaryBigDataDistributionResponse, names=\"value\")\n\nwidgets.VBox([primaryBigDataDistributionContainer,\n              primaryBigDataDistributionFig])","1ae6e189":"bigDataColumns = ['Q29_A_Part_1', 'Q29_A_Part_2', 'Q29_A_Part_3', 'Q29_A_Part_4', 'Q29_A_Part_5', 'Q29_A_Part_6',\n                  'Q29_A_Part_7', 'Q29_A_Part_8',\n                  'Q29_A_Part_9', 'Q29_A_Part_10', 'Q29_A_Part_11', 'Q29_A_Part_12', 'Q29_A_Part_13', 'Q29_A_Part_14',\n                  'Q29_A_Part_15', 'Q29_A_Part_16', 'Q29_A_Part_17', 'Q29_A_OTHER']\n\nbigDataDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=bigDataColumns,\n                                                            title='Big Data Products',\n                                                            xaxis='Count',\n                                                            yaxis='BigData Product', width=990, height=800)\n\nbigDataDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nbigDataDistributionContainer = widgets.HBox(children=[bigDataDistributionTextbox])\n\n\ndef bigDataDistributionResponse(change):\n    if (bigDataDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == bigDataDistributionTextbox.value][bigDataColumns].reset_index(drop=True)\n\n    with bigDataDistributionFig.batch_update():\n        for i in range(len(bigDataDistributionFig.data)):\n            bigDataDistributionFig.data[i].y = df[bigDataDistributionFig.data[i].name].dropna()\n        if (bigDataDistributionTextbox.value == 'All'):\n            bigDataDistributionFig.layout.title = dict(text=\"Big Data Products\")\n        else:\n            bigDataDistributionFig.layout.title = dict(text=bigDataDistributionTextbox.value + \" Big Data Products\")\n\n\nbigDataDistributionTextbox.observe(bigDataDistributionResponse, names=\"value\")\n\nwidgets.VBox([bigDataDistributionContainer,\n              bigDataDistributionFig])","b068a6a4":"bigDataToLEarnColumns = ['Q29_B_Part_1', 'Q29_B_Part_2', 'Q29_B_Part_3', 'Q29_B_Part_4', 'Q29_B_Part_5', 'Q29_B_Part_6',\n                         'Q29_B_Part_7', 'Q29_B_Part_8',\n                         'Q29_B_Part_9', 'Q29_B_Part_10', 'Q29_B_Part_11', 'Q29_B_Part_12', 'Q29_B_Part_13',\n                         'Q29_B_Part_14',\n                         'Q29_B_Part_15', 'Q29_B_Part_16', 'Q29_B_Part_17', 'Q29_B_OTHER']\n\nbigDataToLearnDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=bigDataToLEarnColumns,\n                                                                   title='Big Data Products To Learn',\n                                                                   xaxis='Count',\n                                                                   yaxis='BigData Product', width=990, height=800)\n\nbigDataToLearnDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nbigDataToLearnDistributionContainer = widgets.HBox(children=[bigDataToLearnDistributionTextbox])\n\n\ndef bigDataToLearnDistributionResponse(change):\n    if (bigDataToLearnDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == bigDataToLearnDistributionTextbox.value][bigDataToLEarnColumns].reset_index(\n            drop=True)\n\n    with bigDataToLearnDistributionFig.batch_update():\n        for i in range(len(bigDataToLearnDistributionFig.data)):\n            bigDataToLearnDistributionFig.data[i].y = df[bigDataToLearnDistributionFig.data[i].name].dropna()\n        if (bigDataToLearnDistributionTextbox.value == 'All'):\n            bigDataToLearnDistributionFig.layout.title = dict(text=\"Big Data Products To Learn\")\n        else:\n            bigDataToLearnDistributionFig.layout.title = dict(\n                text=bigDataToLearnDistributionTextbox.value + \" Big Data Products To Learn\")\n\n\nbigDataToLearnDistributionTextbox.observe(bigDataToLearnDistributionResponse, names=\"value\")\n\nwidgets.VBox([bigDataToLearnDistributionContainer,\n              bigDataToLearnDistributionFig])","d08af2e5":"machineLearningExperience = ['I do not use machine learning methods', 'Under 1 year', '1-2 years', '2-3 years',\n                             '3-4 years', '4-5 years', '5-10 years', '10-20 years', '20 or more years']\n\nmlExperienceDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q15',\n                                                              title='Machine Learning Experience', xaxis='Count',\n                                                              yaxis='Experience', labels=machineLearningExperience,\n                                                              width=990, height=600)\n\nmlExperienceDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlExperienceDistributionContainer = widgets.HBox(children=[mlExperienceDistributionTextbox])\n\n\ndef mlExperienceDistributionResponse(change):\n    if (mlExperienceDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlExperienceDistributionTextbox.value][['Q15']].reset_index(drop=True)\n\n    with mlExperienceDistributionFig.batch_update():\n        for i in range(len(mlExperienceDistributionFig.data)):\n            mlExperienceDistributionFig.data[i].y = df[df['Q15'] == mlExperienceDistributionFig.data[i].name][\n                'Q15'].values\n        if (mlExperienceDistributionTextbox.value == 'All'):\n            mlExperienceDistributionFig.layout.title = dict(text=\"Machine Learning Experience\")\n        else:\n            mlExperienceDistributionFig.layout.title = dict(\n                text=mlExperienceDistributionTextbox.value + \" Machine Learning Experience\")\n\n\nmlExperienceDistributionTextbox.observe(mlExperienceDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlExperienceDistributionContainer,\n              mlExperienceDistributionFig])","272949f2":"mlFrameworkColumns = ['Q16_Part_1', 'Q16_Part_2', 'Q16_Part_3', 'Q16_Part_4', 'Q16_Part_5', 'Q16_Part_6', 'Q16_Part_7',\n                      'Q16_Part_8',\n                      'Q16_Part_9', 'Q16_Part_10', 'Q16_Part_11', 'Q16_Part_12', 'Q16_Part_13', 'Q16_Part_14',\n                      'Q16_Part_15',\n                      'Q16_OTHER']\n\nmlFrameworkDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=mlFrameworkColumns,\n                                                                title='Machine Learning Framework', xaxis='Count',\n                                                                yaxis='ML Framework', width=990, height=900)\n\nmlFrameworkDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlFrameworkDistributionContainer = widgets.HBox(children=[mlFrameworkDistributionTextbox])\n\n\ndef mlFrameworkDistributionResponse(change):\n    if (mlFrameworkDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlFrameworkDistributionTextbox.value][mlFrameworkColumns].reset_index(drop=True)\n\n    with mlFrameworkDistributionFig.batch_update():\n        for i in range(len(mlFrameworkDistributionFig.data)):\n            mlFrameworkDistributionFig.data[i].y = df[mlFrameworkDistributionFig.data[i].name].dropna()\n        if (mlFrameworkDistributionTextbox.value == 'All'):\n            mlFrameworkDistributionFig.layout.title = dict(text=\"Machine Learning Framework\")\n        else:\n            mlFrameworkDistributionFig.layout.title = dict(\n                text=mlFrameworkDistributionTextbox.value + \" Machine Learning Framework\")\n\n\nmlFrameworkDistributionTextbox.observe(mlFrameworkDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlFrameworkDistributionContainer,\n              mlFrameworkDistributionFig])","a628d5b9":"mlAlogColumns = ['Q17_Part_1', 'Q17_Part_2', 'Q17_Part_3', 'Q17_Part_4', 'Q17_Part_5', 'Q17_Part_6', 'Q17_Part_7',\n                 'Q17_Part_8',\n                 'Q17_Part_9', 'Q17_Part_10', 'Q17_Part_11', 'Q17_OTHER']\n\nsurveyDF['Q17_Part_3'] = surveyDF['Q17_Part_3'].str.strip()\nsurveyDF['Q17_Part_6'] = surveyDF['Q17_Part_6'].str.strip()\nsurveyDF['Q17_Part_10'] = surveyDF['Q17_Part_10'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q17_Part_3 == 'Gradient Boosting Machines (xgboost, lightgbm, etc)',\n    'Q17_Part_3'\n] = 'Gradient Boosting Machines<br>(xgboost, lightgbm, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q17_Part_6 == 'Dense Neural Networks (MLPs, etc)',\n    'Q17_Part_6'\n] = 'Dense Neural Networks<br>(MLPs, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q17_Part_10 == 'Transformer Networks (BERT, gpt-3, etc)',\n    'Q17_Part_10'\n] = 'Transformer Networks<br>(BERT, gpt-3, etc)'\n\nmlAlogDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=mlAlogColumns,\n                                                           title='Machine Learning Algorithm',\n                                                           xaxis='Count', yaxis='ML Algorithm', width=990, height=600)\n\nmlAlogDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlAlogDistributionContainer = widgets.HBox(children=[mlAlogDistributionTextbox])\n\n\ndef mlAlogDistributionResponse(change):\n    if (mlAlogDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlAlogDistributionTextbox.value][mlAlogColumns].reset_index(drop=True)\n\n    with mlAlogDistributionFig.batch_update():\n        for i in range(len(mlAlogDistributionFig.data)):\n            mlAlogDistributionFig.data[i].y = df[mlAlogDistributionFig.data[i].name].dropna()\n        if (mlAlogDistributionTextbox.value == 'All'):\n            mlAlogDistributionFig.layout.title = dict(text=\"Machine Learning Algorithm\")\n        else:\n            mlAlogDistributionFig.layout.title = dict(\n                text=mlAlogDistributionTextbox.value + \" Machine Learning Algorithm\")\n\n\nmlAlogDistributionTextbox.observe(mlAlogDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlAlogDistributionContainer,\n              mlAlogDistributionFig])","93377d03":"cvColumns = ['Q18_Part_1', 'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', 'Q18_Part_5', 'Q18_Part_6']\n\nsurveyDF['Q18_Part_1'] = surveyDF['Q18_Part_1'].str.strip()\nsurveyDF['Q18_Part_2'] = surveyDF['Q18_Part_2'].str.strip()\nsurveyDF['Q18_Part_3'] = surveyDF['Q18_Part_3'].str.strip()\nsurveyDF['Q18_Part_4'] = surveyDF['Q18_Part_4'].str.strip()\nsurveyDF['Q18_Part_5'] = surveyDF['Q18_Part_5'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q18_Part_1 == 'General purpose image\/video tools (PIL, cv2, skimage, etc)',\n    'Q18_Part_1'\n] = 'General purpose image\/video tools<br>(PIL, cv2, skimage, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q18_Part_2 == 'Image segmentation methods (U-Net, Mask R-CNN, etc)',\n    'Q18_Part_2'\n] = 'Image segmentation methods<br>(U-Net, Mask R-CNN, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q18_Part_3 == 'Object detection methods (YOLOv3, RetinaNet, etc)',\n    'Q18_Part_3'\n] = 'Object detection methods<br>(YOLOv3, RetinaNet, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q18_Part_4 == 'Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)',\n    'Q18_Part_4'\n] = 'Image classification and other<br>general purpose networks (VGG, Inception,<br>ResNet, ResNeXt, NASNet, EfficientNet, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q18_Part_5 == 'Generative Networks (GAN, VAE, etc)',\n    'Q18_Part_5'\n] = 'Generative Networks<br>(GAN, VAE, etc)'\n\ncvDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=cvColumns, title='Computer Vision Methods',\n                                                       xaxis='Count', yaxis='Computer Vision Methods', width=990,\n                                                       height=600)\n\ncvDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ncvDistributionContainer = widgets.HBox(children=[cvDistributionTextbox])\n\n\ndef cvDistributionResponse(change):\n    if (cvDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == cvDistributionTextbox.value][cvColumns].reset_index(drop=True)\n\n    with cvDistributionFig.batch_update():\n        for i in range(len(cvDistributionFig.data)):\n            cvDistributionFig.data[i].y = df[cvDistributionFig.data[i].name].dropna()\n        if (cvDistributionTextbox.value == 'All'):\n            cvDistributionFig.layout.title = dict(text=\"Computer Vision Methods\")\n        else:\n            cvDistributionFig.layout.title = dict(text=cvDistributionTextbox.value + \" Computer Vision Methods\")\n\n\ncvDistributionTextbox.observe(cvDistributionResponse, names=\"value\")\n\nwidgets.VBox([cvDistributionContainer,\n              cvDistributionFig])","b7992028":"nlpColumns = ['Q19_Part_1', 'Q19_Part_2', 'Q19_Part_3', 'Q19_Part_4', 'Q19_Part_5']\n\nsurveyDF['Q19_Part_1'] = surveyDF['Q19_Part_1'].str.strip()\nsurveyDF['Q19_Part_2'] = surveyDF['Q19_Part_2'].str.strip()\nsurveyDF['Q19_Part_3'] = surveyDF['Q19_Part_3'].str.strip()\nsurveyDF['Q19_Part_4'] = surveyDF['Q19_Part_4'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q19_Part_1 == 'Word embeddings\/vectors (GLoVe, fastText, word2vec)',\n    'Q19_Part_1'\n] = 'Word embeddings\/vectors<br>(GLoVe, fastText, word2vec)'\n\nsurveyDF.loc[\n    surveyDF.Q19_Part_2 == 'Encoder-decorder models (seq2seq, vanilla transformers)',\n    'Q19_Part_2'\n] = 'Encoder-decorder models<br>(seq2seq, vanilla transformers)'\n\nsurveyDF.loc[\n    surveyDF.Q19_Part_3 == 'Contextualized embeddings (ELMo, CoVe)',\n    'Q19_Part_3'\n] = 'Contextualized embeddings<br>(ELMo, CoVe)'\n\nsurveyDF.loc[\n    surveyDF.Q19_Part_4 == 'Transformer language models (GPT-3, BERT, XLnet, etc)',\n    'Q19_Part_4'\n] = 'Transformer language models<br>(GPT-3, BERT, XLnet, etc)'\n\nnlpDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=nlpColumns,\n                                                        title='Natural Language Processing Methods',\n                                                        xaxis='Count', yaxis='Natural Language Processing Methods',\n                                                        width=990, height=600)\n\nnlpDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nnlpDistributionContainer = widgets.HBox(children=[nlpDistributionTextbox])\n\n\ndef nlpDistributionResponse(change):\n    if (nlpDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == nlpDistributionTextbox.value][nlpColumns].reset_index(drop=True)\n\n    with nlpDistributionFig.batch_update():\n        for i in range(len(nlpDistributionFig.data)):\n            nlpDistributionFig.data[i].y = df[nlpDistributionFig.data[i].name].dropna()\n        if (nlpDistributionTextbox.value == 'All'):\n            nlpDistributionFig.layout.title = dict(text=\"Natural Language Processing Methods\")\n        else:\n            nlpDistributionFig.layout.title = dict(\n                text=nlpDistributionTextbox.value + \" Natural Language Processing Methods\")\n\n\nnlpDistributionTextbox.observe(nlpDistributionResponse, names=\"value\")\n\nwidgets.VBox([nlpDistributionContainer,\n              nlpDistributionFig])","914cb718":"surveyDF['Q22'] = surveyDF['Q22'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q22 == 'We are exploring ML methods (and may one day put a model into production)',\n    'Q22'\n] = 'We are exploring ML methods<br>(and may one day put a<br>model into production)'\n\nsurveyDF.loc[\n    surveyDF.Q22 == 'We have well established ML methods (i.e., models in production for more than 2 years)',\n    'Q22'\n] = 'We have well established ML methods<br>(i.e., models in production<br>for more than 2 years)'\n\nsurveyDF.loc[\n    surveyDF.Q22 == 'We recently started using ML methods (i.e., models in production for less than 2 years)',\n    'Q22'\n] = 'We recently started using ML methods<br>(i.e., models in production<br>for less than 2 years)'\n\nsurveyDF.loc[\n    surveyDF.Q22 == 'We use ML methods for generating insights (but do not put working models into production)',\n    'Q22'\n] = 'We use ML methods for generating<br>insights (but do not put working<br>models into production)'\n\nmlInProduction = surveyDF.Q22.value_counts().index\n\nmlInProdDistributionFig = horizontalHistogramSingleColumn(surveyDF, column='Q22',\n                                                          title='Machine Learning Deployed in Production',\n                                                          xaxis='Count',\n                                                          yaxis='ML in Production', labels=mlInProduction, width=990,\n                                                          height=600)\n\nmlInProdDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlInProdDistributionContainer = widgets.HBox(children=[mlInProdDistributionTextbox])\n\n\ndef mlInProdDistributionResponse(change):\n    if (mlInProdDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlInProdDistributionTextbox.value][['Q22']].reset_index(drop=True)\n\n    with mlInProdDistributionFig.batch_update():\n        for i in range(len(mlInProdDistributionFig.data)):\n            mlInProdDistributionFig.data[i].y = df[df['Q22'] == mlInProdDistributionFig.data[i].name]['Q22'].values\n        if (mlInProdDistributionTextbox.value == 'All'):\n            mlInProdDistributionFig.layout.title = dict(text=\"Machine Learning Deployed in Production\")\n        else:\n            mlInProdDistributionFig.layout.title = dict(\n                text=mlInProdDistributionTextbox.value + \" Machine Learning Deployed in Production\")\n\n\nmlInProdDistributionTextbox.observe(mlInProdDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlInProdDistributionContainer,\n              mlInProdDistributionFig])","89d59a0d":"mlRepositoryColumns = ['Q35_A_Part_1', 'Q35_A_Part_2', 'Q35_A_Part_3', 'Q35_A_Part_4', 'Q35_A_Part_5', 'Q35_A_Part_6',\n                       'Q35_A_Part_7', 'Q35_A_Part_8',\n                       'Q35_A_Part_9', 'Q35_A_Part_10', 'Q35_A_OTHER']\n\nmlRepositoryDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=mlRepositoryColumns,\n                                                                 title='Machine Learning Repositories',\n                                                                 xaxis='Count',\n                                                                 yaxis='ML Repository', width=990, height=800)\n\nmlRepositoryDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlRepositoryDistributionContainer = widgets.HBox(children=[mlRepositoryDistributionTextbox])\n\n\ndef mlRepositoryDistributionResponse(change):\n    if (mlRepositoryDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlRepositoryDistributionTextbox.value][mlRepositoryColumns].reset_index(\n            drop=True)\n\n    with mlRepositoryDistributionFig.batch_update():\n        for i in range(len(mlRepositoryDistributionFig.data)):\n            mlRepositoryDistributionFig.data[i].y = df[mlRepositoryDistributionFig.data[i].name].dropna()\n        if (mlRepositoryDistributionTextbox.value == 'All'):\n            mlRepositoryDistributionFig.layout.title = dict(text=\"Machine Learning Repositories\")\n        else:\n            mlRepositoryDistributionFig.layout.title = dict(\n                text=mlRepositoryDistributionTextbox.value + \" Machine Learning Repositories\")\n\n\nmlRepositoryDistributionTextbox.observe(mlRepositoryDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlRepositoryDistributionContainer,\n              mlRepositoryDistributionFig])","da9a4ce6":"mlRepositoryToLearnColumns = ['Q35_B_Part_1', 'Q35_B_Part_2', 'Q35_B_Part_3', 'Q35_B_Part_4', 'Q35_B_Part_5',\n                              'Q35_B_Part_6',\n                              'Q35_B_Part_7', 'Q35_B_Part_8',\n                              'Q35_B_Part_9', 'Q35_B_Part_10', 'Q35_B_OTHER']\n\nmlRepositoryToLearnDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=mlRepositoryToLearnColumns,\n                                                                        title='Machine Learning Repositories To Learn',\n                                                                        xaxis='Count',\n                                                                        yaxis='ML Repository Product', width=990,\n                                                                        height=800)\n\nmlRepositoryToLearnDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlRepositoryToLearnDistributionContainer = widgets.HBox(children=[mlRepositoryToLearnDistributionTextbox])\n\n\ndef mlRepositoryToLearnDistributionResponse(change):\n    if (mlRepositoryToLearnDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlRepositoryToLearnDistributionTextbox.value][\n            mlRepositoryToLearnColumns].reset_index(drop=True)\n\n    with mlRepositoryToLearnDistributionFig.batch_update():\n        for i in range(len(mlRepositoryToLearnDistributionFig.data)):\n            mlRepositoryToLearnDistributionFig.data[i].y = df[mlRepositoryToLearnDistributionFig.data[i].name].dropna()\n        if (mlRepositoryToLearnDistributionTextbox.value == 'All'):\n            mlRepositoryToLearnDistributionFig.layout.title = dict(text=\"Machine Learning Repositories To Learn\")\n        else:\n            mlRepositoryToLearnDistributionFig.layout.title = dict(\n                text=mlRepositoryToLearnDistributionTextbox.value + \" Machine Learning Repositories To Learn\")\n\n\nmlRepositoryToLearnDistributionTextbox.observe(mlRepositoryToLearnDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlRepositoryToLearnDistributionContainer,\n              mlRepositoryToLearnDistributionFig])","c04a7f81":"mlPublicDeploymentColumns = ['Q36_Part_1', 'Q36_Part_2', 'Q36_Part_3', 'Q36_Part_4', 'Q36_Part_5', 'Q36_Part_6',\n                             'Q36_Part_7',\n                             'Q36_Part_8',\n                             'Q36_Part_9', 'Q36_OTHER']\n\nmlPublicDeploymentDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=mlPublicDeploymentColumns,\n                                                                       title='Machine Learnign Public Deployment',\n                                                                       xaxis='Count',\n                                                                       yaxis='ML Public Deployment Product', width=990,\n                                                                       height=800)\n\nmlPublicDeploymentDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nmlPublicDeploymentDistributionContainer = widgets.HBox(children=[mlPublicDeploymentDistributionTextbox])\n\n\ndef mlPublicDeploymentDistributionResponse(change):\n    if (mlPublicDeploymentDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == mlPublicDeploymentDistributionTextbox.value][\n            mlPublicDeploymentColumns].reset_index(drop=True)\n\n    with mlPublicDeploymentDistributionFig.batch_update():\n        for i in range(len(mlPublicDeploymentDistributionFig.data)):\n            mlPublicDeploymentDistributionFig.data[i].y = df[mlPublicDeploymentDistributionFig.data[i].name].dropna()\n        if (mlPublicDeploymentDistributionTextbox.value == 'All'):\n            mlPublicDeploymentDistributionFig.layout.title = dict(text=\"Machine Learnign Public Deployment\")\n        else:\n            mlPublicDeploymentDistributionFig.layout.title = dict(\n                text=mlPublicDeploymentDistributionTextbox.value + \" Machine Learnign Public Deployment\")\n\n\nmlPublicDeploymentDistributionTextbox.observe(mlPublicDeploymentDistributionResponse, names=\"value\")\n\nwidgets.VBox([mlPublicDeploymentDistributionContainer,\n              mlPublicDeploymentDistributionFig])","63060e9d":"surveyDF.loc[(\n                     surveyDF.Q33_A_Part_1 == 'Automated data augmentation (e.g. imgaug, albumentations)'), 'Q33_A_Part_1'] = 'Automated data augmentation<br>(e.g. imgaug, albumentations)'\nsurveyDF.loc[(\n                     surveyDF.Q33_A_Part_2 == 'Automated feature engineering\/selection (e.g. tpot, boruta_py)'), 'Q33_A_Part_2'] = 'Automated feature engineering\/selection<br>(e.g. tpot, boruta_py)'\nsurveyDF.loc[(\n                     surveyDF.Q33_A_Part_3 == 'Automated model selection (e.g. auto-sklearn, xcessiv)'), 'Q33_A_Part_3'] = 'Automated model selection<br>(e.g. auto-sklearn, xcessiv)'\nsurveyDF.loc[(\n                     surveyDF.Q33_A_Part_4 == 'Automated model architecture searches (e.g. darts, enas)'), 'Q33_A_Part_4'] = 'Automated model architecture searches<br>(e.g. darts, enas)'\nsurveyDF.loc[(\n                     surveyDF.Q33_A_Part_5 == 'Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)'), 'Q33_A_Part_5'] = 'Automated hyperparameter tuning<br>(e.g. hyperopt, ray.tune, Vizier)'\nsurveyDF.loc[(\n                     surveyDF.Q33_A_Part_6 == 'Automation of full ML pipelines (e.g. Google AutoML, H20 Driverless AI)'), 'Q33_A_Part_6'] = 'Automation of full ML pipelines<br>(e.g. Google AutoML, H20 Driverless AI)'\n\nautoMLColumns = ['Q33_A_Part_1', 'Q33_A_Part_2', 'Q33_A_Part_3', 'Q33_A_Part_4', 'Q33_A_Part_5', 'Q33_A_Part_6',\n                 'Q33_A_Part_7', 'Q33_A_OTHER']\n\nautoMLDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=autoMLColumns,\n                                                           title='Automated Machine Learning Methods',\n                                                           xaxis='Count',\n                                                           yaxis='Automated Machine Learning Methods', width=990,\n                                                           height=800)\n\nautoMLDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nautoMLDistributionContainer = widgets.HBox(children=[autoMLDistributionTextbox])\n\n\ndef autoMLDistributionResponse(change):\n    if (autoMLDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == autoMLDistributionTextbox.value][autoMLColumns].reset_index(drop=True)\n\n    with autoMLDistributionFig.batch_update():\n        for i in range(len(autoMLDistributionFig.data)):\n            autoMLDistributionFig.data[i].y = df[autoMLDistributionFig.data[i].name].dropna()\n        if (autoMLDistributionTextbox.value == 'All'):\n            autoMLDistributionFig.layout.title = dict(text=\"Automated Machine Learning Methods\")\n        else:\n            autoMLDistributionFig.layout.title = dict(\n                text=autoMLDistributionTextbox.value + \" Automated Machine Learning Methods\")\n\n\nautoMLDistributionTextbox.observe(autoMLDistributionResponse, names=\"value\")\n\nwidgets.VBox([autoMLDistributionContainer,\n              autoMLDistributionFig])","bc6ab865":"autoMLToLearnColumns = ['Q33_B_Part_1', 'Q33_B_Part_2', 'Q33_B_Part_3', 'Q33_B_Part_4', 'Q33_B_Part_5', 'Q33_B_Part_6',\n                        'Q33_B_Part_7', 'Q33_B_OTHER']\n\nsurveyDF.loc[(\n                     surveyDF.Q33_B_Part_1 == 'Automated data augmentation (e.g. imgaug, albumentations)'), 'Q33_B_Part_1'] = 'Automated data augmentation<br>(e.g. imgaug, albumentations)'\nsurveyDF.loc[(\n                     surveyDF.Q33_B_Part_2 == 'Automated feature engineering\/selection (e.g. tpot, boruta_py)'), 'Q33_B_Part_2'] = 'Automated feature engineering\/selection<br>(e.g. tpot, boruta_py)'\nsurveyDF.loc[(\n                     surveyDF.Q33_B_Part_3 == 'Automated model selection (e.g. auto-sklearn, xcessiv)'), 'Q33_B_Part_3'] = 'Automated model selection<br>(e.g. auto-sklearn, xcessiv)'\nsurveyDF.loc[(\n                     surveyDF.Q33_B_Part_4 == 'Automated model architecture searches (e.g. darts, enas)'), 'Q33_B_Part_4'] = 'Automated model architecture searches<br>(e.g. darts, enas)'\nsurveyDF.loc[(\n                     surveyDF.Q33_B_Part_5 == 'Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)'), 'Q33_B_Part_5'] = 'Automated hyperparameter tuning<br>(e.g. hyperopt, ray.tune, Vizier)'\nsurveyDF.loc[(\n                     surveyDF.Q33_B_Part_6 == 'Automation of full ML pipelines (e.g. Google Cloud AutoML, H20 Driverless AI)'), 'Q33_B_Part_6'] = 'Automation of full ML pipelines<br>(e.g. Google Cloud AutoML, H20 Driverless AI)'\n\nautoMLToLearnDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=autoMLToLearnColumns,\n                                                                  title='Automated Machine Learning Methods To Learn',\n                                                                  xaxis='Count',\n                                                                  yaxis='Automated Machine Learning Methods', width=990,\n                                                                  height=800)\n\nautoMLToLearnDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nautoMLToLearnDistributionContainer = widgets.HBox(children=[autoMLToLearnDistributionTextbox])\n\n\ndef autoMLToLearnDistributionResponse(change):\n    if (autoMLToLearnDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == autoMLToLearnDistributionTextbox.value][autoMLToLearnColumns].reset_index(\n            drop=True)\n\n    with autoMLToLearnDistributionFig.batch_update():\n        for i in range(len(autoMLToLearnDistributionFig.data)):\n            autoMLToLearnDistributionFig.data[i].y = df[autoMLToLearnDistributionFig.data[i].name].dropna()\n        if (autoMLToLearnDistributionTextbox.value == 'All'):\n            autoMLToLearnDistributionFig.layout.title = dict(text=\"Automated Machine Learning Methods\")\n        else:\n            autoMLToLearnDistributionFig.layout.title = dict(\n                text=autoMLToLearnDistributionTextbox.value + \" Automated Machine Learning Methods\")\n\n\nautoMLToLearnDistributionTextbox.observe(autoMLToLearnDistributionResponse, names=\"value\")\n\nwidgets.VBox([autoMLToLearnDistributionContainer,\n              autoMLToLearnDistributionFig])","58e27689":"autoMLToolColumns = ['Q34_A_Part_1', 'Q34_A_Part_2', 'Q34_A_Part_3', 'Q34_A_Part_4', 'Q34_A_Part_5', 'Q34_A_Part_6',\n                     'Q34_A_Part_7', 'Q34_A_Part_8',\n                     'Q34_A_Part_9', 'Q34_A_Part_10', 'Q34_A_Part_11', 'Q34_A_OTHER']\n\nautoMLToolDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=autoMLToolColumns,\n                                                               title='Auto Machine Learning Tools',\n                                                               xaxis='Count',\n                                                               yaxis='Auto ML Tool', width=990, height=800)\n\nautoMLToolDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nautoMLToolDistributionContainer = widgets.HBox(children=[autoMLToolDistributionTextbox])\n\n\ndef autoMLToolDistributionResponse(change):\n    if (autoMLToolDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == autoMLToolDistributionTextbox.value][autoMLToolColumns].reset_index(drop=True)\n\n    with autoMLToolDistributionFig.batch_update():\n        for i in range(len(autoMLToolDistributionFig.data)):\n            autoMLToolDistributionFig.data[i].y = df[autoMLToolDistributionFig.data[i].name].dropna()\n        if (autoMLToolDistributionTextbox.value == 'All'):\n            autoMLToolDistributionFig.layout.title = dict(text=\"Auto Machine Learning Tools\")\n        else:\n            autoMLToolDistributionFig.layout.title = dict(\n                text=autoMLToolDistributionTextbox.value + \" Auto Machine Learning Tools\")\n\n\nautoMLToolDistributionTextbox.observe(autoMLToolDistributionResponse, names=\"value\")\n\nwidgets.VBox([autoMLToolDistributionContainer,\n              autoMLToolDistributionFig])","316b43d5":"autoMLToolToLearnColumns = ['Q34_B_Part_1', 'Q34_B_Part_2', 'Q34_B_Part_3', 'Q34_B_Part_4', 'Q34_B_Part_5',\n                            'Q34_B_Part_6',\n                            'Q34_B_Part_7', 'Q34_B_Part_8',\n                            'Q34_B_Part_9', 'Q34_B_Part_10', 'Q34_B_Part_11', 'Q34_B_OTHER']\n\nautoMLToolToLearnDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=autoMLToolToLearnColumns,\n                                                                      title='Auto Machine Learning Tools To Learn',\n                                                                      xaxis='Count',\n                                                                      yaxis='Auto ML Tools', width=990, height=800)\n\nautoMLToolToLearnDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nautoMLToolToLearnDistributionContainer = widgets.HBox(children=[autoMLToolToLearnDistributionTextbox])\n\n\ndef autoMLToolToLearnDistributionResponse(change):\n    if (autoMLToolToLearnDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == autoMLToolToLearnDistributionTextbox.value][\n            autoMLToolToLearnColumns].reset_index(drop=True)\n\n    with autoMLToolToLearnDistributionFig.batch_update():\n        for i in range(len(autoMLToolToLearnDistributionFig.data)):\n            autoMLToolToLearnDistributionFig.data[i].y = df[autoMLToolToLearnDistributionFig.data[i].name].dropna()\n        if (autoMLToolToLearnDistributionTextbox.value == 'All'):\n            autoMLToolToLearnDistributionFig.layout.title = dict(text=\" Auto Machine Learning Tools To Learn\")\n        else:\n            autoMLToolToLearnDistributionFig.layout.title = dict(\n                text=autoMLToolToLearnDistributionTextbox.value + \" Auto Machine Learning Tools To Learn\")\n\n\nautoMLToolToLearnDistributionTextbox.observe(autoMLToolToLearnDistributionResponse, names=\"value\")\n\nwidgets.VBox([autoMLToolToLearnDistributionContainer,\n              autoMLToolToLearnDistributionFig])","6bcc9d0f":"colors = ['rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)', 'rgba(171,171,171,1)', ]\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2]\n\nsurveyDF['Q11'] = surveyDF['Q11'].str.strip()\n\nsurveyDF.loc[\n    surveyDF.Q11 == 'A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)',\n    'Q11'\n] = 'A cloud computing platform<br>(AWS, Azure, GCP, hosted notebooks, etc)'\n\nsurveyDF.loc[\n    surveyDF.Q11 == 'A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)',\n    'Q11'\n] = 'A deep learning workstation<br>(NVIDIA GTX, LambdaLabs, etc)'\n\ncomputingPlatformDistributionFig = donutPie(surveyDF, column='Q11', title='Computing Platformn', colors=colors,\n                                            pull=pull, hole=.3, width=990, height=600)\n\ncomputingPlatformDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ncomputingPlatformDistributionContainer = widgets.HBox(children=[computingPlatformDistributionTextBox])\n\n\ndef computingPlatformDistributionResponse(change):\n    if (computingPlatformDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == computingPlatformDistributionTextBox.value][['Q11']].reset_index(drop=True)\n\n    with computingPlatformDistributionFig.batch_update():\n        values = df['Q11'].value_counts().values\n        computingPlatformDistributionFig.data[0].values = values\n        if (computingPlatformDistributionTextBox.value == 'All'):\n            computingPlatformDistributionFig.layout.title = dict(text=\"Computing Platform\")\n        else:\n            computingPlatformDistributionFig.layout.title = dict(\n                text=computingPlatformDistributionTextBox.value + \" Computing Platform\")\n\n\ncomputingPlatformDistributionTextBox.observe(computingPlatformDistributionResponse, names=\"value\")\n\nwidgets.VBox([computingPlatformDistributionContainer,\n              computingPlatformDistributionFig])","c57881bc":"splHardwareColumns = ['Q12_Part_1', 'Q12_Part_2', 'Q12_Part_3', 'Q12_OTHER']\n\nsplHardwareDistributionFig = verticalHistogramMultipleColumns(surveyDF, columns=splHardwareColumns,\n                                                              title='Specialized Hardware Usage',\n                                                              xaxis='IDE', yaxis='Count', width=990, height=600)\n\nsplHardwareDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\nsplHardwareDistributionContainer = widgets.HBox(children=[splHardwareDistributionTextbox])\n\n\ndef splHardwareDistributionResponse(change):\n    if (splHardwareDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == splHardwareDistributionTextbox.value][splHardwareColumns].reset_index(drop=True)\n\n    with splHardwareDistributionFig.batch_update():\n        for i in range(len(splHardwareDistributionFig.data)):\n            splHardwareDistributionFig.data[i].x = df[splHardwareDistributionFig.data[i].name].dropna()\n        if (splHardwareDistributionTextbox.value == 'All'):\n            splHardwareDistributionFig.layout.title = dict(text=\"Specialized Hardware Usage\")\n        else:\n            splHardwareDistributionFig.layout.title = dict(\n                text=splHardwareDistributionTextbox.value + \" Specialized Hardware Usage\")\n\n\nsplHardwareDistributionTextbox.observe(splHardwareDistributionResponse, names=\"value\")\n\nwidgets.VBox([splHardwareDistributionContainer,\n              splHardwareDistributionFig])","949a9b1f":"colors = ['rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)', 'rgba(171,171,171,1)', ]\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2]\n\ntpuUsageDistributionFig = donutPie(surveyDF, column='Q13', title='TPU Usage', colors=colors, pull=pull, hole=.3,\n                                   width=990, height=600)\n\ntpuUsageDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ntpuUsageDistributionContainer = widgets.HBox(children=[tpuUsageDistributionTextBox])\n\n\ndef tpuUsageDistributionResponse(change):\n    if (tpuUsageDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == tpuUsageDistributionTextBox.value][['Q13']].reset_index(drop=True)\n\n    with tpuUsageDistributionFig.batch_update():\n        values = df['Q13'].value_counts().values\n        tpuUsageDistributionFig.data[0].values = values\n        if (tpuUsageDistributionTextBox.value == 'All'):\n            tpuUsageDistributionFig.layout.title = dict(\n                text=\"TPU Usage\")\n        else:\n            tpuUsageDistributionFig.layout.title = dict(\n                text=tpuUsageDistributionTextBox.value + \" TPU Usage\")\n\n\ntpuUsageDistributionTextBox.observe(tpuUsageDistributionResponse, names=\"value\")\n\nwidgets.VBox([tpuUsageDistributionContainer,\n              tpuUsageDistributionFig])","b18012de":"colors = ['rgba(171,171,171,1)', 'rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)',\n          'rgba(255,188,121,1)', ]\n\npull = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\ncloudBudgetDistributionFig = donutPie(surveyDF, column='Q25', title='Cloud Budget', colors=colors, pull=pull, hole=.0,\n                                      width=990, height=600)\n\ncloudBudgetDistributionTextBox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ncloudBudgetDistributionContainer = widgets.HBox(children=[cloudBudgetDistributionTextBox])\n\n\ndef cloudBudgetDistributionResponse(change):\n    if (cloudBudgetDistributionTextBox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == cloudBudgetDistributionTextBox.value][['Q11']].reset_index(drop=True)\n\n    with cloudBudgetDistributionFig.batch_update():\n        values = df['Q11'].value_counts().values\n        cloudBudgetDistributionFig.data[0].values = values\n        if (cloudBudgetDistributionTextBox.value == 'All'):\n            cloudBudgetDistributionFig.layout.title = dict(\n                text=\"Cloud Budget\")\n        else:\n            cloudBudgetDistributionFig.layout.title = dict(\n                text=cloudBudgetDistributionTextBox.value + \" Cloud Budget\")\n\n\ncloudBudgetDistributionTextBox.observe(cloudBudgetDistributionResponse, names=\"value\")\n\nwidgets.VBox([cloudBudgetDistributionContainer,\n              cloudBudgetDistributionFig])","cc294582":"surveyDF['Q26_A_Part_1'] = surveyDF['Q26_A_Part_1'].str.strip()\nsurveyDF['Q26_A_Part_2'] = surveyDF['Q26_A_Part_2'].str.strip()\nsurveyDF['Q26_A_Part_3'] = surveyDF['Q26_A_Part_3'].str.strip()\nsurveyDF['Q26_A_Part_4'] = surveyDF['Q26_A_Part_4'].str.strip()\nsurveyDF['Q26_A_Part_5'] = surveyDF['Q26_A_Part_5'].str.strip()\nsurveyDF['Q26_A_Part_6'] = surveyDF['Q26_A_Part_6'].str.strip()\nsurveyDF['Q26_A_Part_7'] = surveyDF['Q26_A_Part_7'].str.strip()\nsurveyDF['Q26_A_Part_8'] = surveyDF['Q26_A_Part_8'].str.strip()\nsurveyDF['Q26_A_Part_9'] = surveyDF['Q26_A_Part_9'].str.strip()\nsurveyDF['Q26_A_Part_10'] = surveyDF['Q26_A_Part_10'].str.strip()\nsurveyDF['Q26_A_Part_11'] = surveyDF['Q26_A_Part_11'].str.strip()\nsurveyDF['Q26_A_OTHER'] = surveyDF['Q26_A_OTHER'].str.strip()\n\ncloudProviderColumns = ['Q26_A_Part_1', 'Q26_A_Part_2', 'Q26_A_Part_3', 'Q26_A_Part_4', 'Q26_A_Part_5', 'Q26_A_Part_6',\n                        'Q26_A_Part_7', 'Q26_A_Part_8',\n                        'Q26_A_Part_9', 'Q26_A_Part_10', 'Q26_A_Part_11', 'Q26_A_OTHER']\n\ncloudProviderDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=cloudProviderColumns,\n                                                                  title='Cloud Provider Usage',\n                                                                  xaxis='Count',\n                                                                  yaxis='Cloud Provider', width=990, height=600)\n\ncloudProviderDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ncloudProviderDistributionContainer = widgets.HBox(children=[cloudProviderDistributionTextbox])\n\n\ndef cloudProviderDistributionResponse(change):\n    if (cloudProviderDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == cloudProviderDistributionTextbox.value][cloudProviderColumns].reset_index(\n            drop=True)\n\n    with cloudProviderDistributionFig.batch_update():\n        for i in range(len(cloudProviderDistributionFig.data)):\n            cloudProviderDistributionFig.data[i].y = df[cloudProviderDistributionFig.data[i].name].dropna()\n        if (cloudProviderDistributionTextbox.value == 'All'):\n            cloudProviderDistributionFig.layout.title = dict(text=\"Cloud Provider Usage\")\n        else:\n            cloudProviderDistributionFig.layout.title = dict(\n                text=cloudProviderDistributionTextbox.value + \" Cloud Provider Usage\")\n\n\ncloudProviderDistributionTextbox.observe(cloudProviderDistributionResponse, names=\"value\")\n\nwidgets.VBox([cloudProviderDistributionContainer,\n              cloudProviderDistributionFig])","9779eb4a":"def cloudProductUsage(surveyDF):\n    df = pd.concat([\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q27_A_Part_1']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q27_A_Part_1\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q27_A_Part_2']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q27_A_Part_2\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q27_A_Part_3']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q27_A_Part_3\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q27_A_Part_11']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q27_A_Part_11\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q27_A_OTHER']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q27_A_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q28_A_Part_1']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q28_A_Part_1\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q28_A_Part_2']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q28_A_Part_2\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q28_A_Part_3']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q28_A_Part_3\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q28_A_Part_10']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q28_A_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_1 == 'Amazon Web Services (AWS)'][['Q26_A_Part_1', 'Q28_A_OTHER']].rename(\n            columns={\"Q26_A_Part_1\": \"cloud_provider\", \"Q28_A_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q27_A_Part_4']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q27_A_Part_4\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q27_A_Part_5']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q27_A_Part_5\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q27_A_Part_6']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q27_A_Part_6\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q27_A_Part_11']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q27_A_Part_11\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q27_A_OTHER']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q27_A_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q28_A_Part_4']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q28_A_Part_4\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q28_A_Part_5']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q28_A_Part_5\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q28_A_Part_10']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q28_A_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_2 == 'Microsoft Azure'][['Q26_A_Part_2', 'Q28_A_OTHER']].rename(\n            columns={\"Q26_A_Part_2\": \"cloud_provider\", \"Q28_A_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q27_A_Part_7']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q27_A_Part_7\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q27_A_Part_8']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q27_A_Part_8\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q27_A_Part_9']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q27_A_Part_9\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q27_A_Part_10']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q27_A_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q27_A_Part_11']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q27_A_Part_11\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q27_A_OTHER']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q27_A_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q28_A_Part_6']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q28_A_Part_6\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q28_A_Part_7']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q28_A_Part_7\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q28_A_Part_8']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q28_A_Part_8\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q28_A_Part_9']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q28_A_Part_9\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q28_A_Part_10']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q28_A_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_A_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_A_Part_3', 'Q28_A_OTHER']].rename(\n            columns={\"Q26_A_Part_3\": \"cloud_provider\", \"Q28_A_OTHER\": \"cloud_product\"}),\n    ]).reset_index(drop=True)\n\n    df = df.groupby(['cloud_provider', 'cloud_product'])['cloud_provider'].count().reset_index(name=\"count\")\n\n    colors = ['rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)',\n              'rgba(255,188,121,1)',\n              'rgba(207,207,207,1)', 'rgba(200,82,0,1)', 'rgba(162,200,236,1)', 'rgba(137,137,137,1)',\n              'rgba(171,171,171,1)', ]\n\n    fig = px.sunburst(df,\n                      path=['cloud_provider', 'cloud_product'],\n                      values='count',\n                      color='cloud_product',\n                      branchvalues='total',\n                      color_discrete_sequence=colors)\n\n    fig.update_layout(title=\"Cloud Computing Products Usage\",\n                      autosize=False,\n                      width=990,\n                      height=800)\n\n    fig.show()\n\n    gc.collect()\n\n\ncloudProductUsage(surveyDF)","b0a8994d":"surveyDF['Q26_B_Part_1'] = surveyDF['Q26_B_Part_1'].str.strip()\nsurveyDF['Q26_B_Part_2'] = surveyDF['Q26_B_Part_2'].str.strip()\nsurveyDF['Q26_B_Part_3'] = surveyDF['Q26_B_Part_3'].str.strip()\nsurveyDF['Q26_B_Part_4'] = surveyDF['Q26_B_Part_4'].str.strip()\nsurveyDF['Q26_B_Part_5'] = surveyDF['Q26_B_Part_5'].str.strip()\nsurveyDF['Q26_B_Part_6'] = surveyDF['Q26_B_Part_6'].str.strip()\nsurveyDF['Q26_B_Part_7'] = surveyDF['Q26_B_Part_7'].str.strip()\nsurveyDF['Q26_B_Part_8'] = surveyDF['Q26_B_Part_8'].str.strip()\nsurveyDF['Q26_B_Part_9'] = surveyDF['Q26_B_Part_9'].str.strip()\nsurveyDF['Q26_B_Part_10'] = surveyDF['Q26_B_Part_10'].str.strip()\nsurveyDF['Q26_B_Part_11'] = surveyDF['Q26_B_Part_11'].str.strip()\nsurveyDF['Q26_B_OTHER'] = surveyDF['Q26_B_OTHER'].str.strip()\n\ncloudProviderToLearnColumns = ['Q26_B_Part_1', 'Q26_B_Part_2', 'Q26_B_Part_3', 'Q26_B_Part_4', 'Q26_B_Part_5',\n                               'Q26_B_Part_6',\n                               'Q26_B_Part_7', 'Q26_B_Part_8',\n                               'Q26_B_Part_9', 'Q26_B_Part_10', 'Q26_B_Part_11', 'Q26_B_OTHER']\n\ncloudProviderToLearnDistributionFig = horizontalHistogramMultipleColumns(surveyDF, columns=cloudProviderToLearnColumns,\n                                                                         title='Cloud Provider To Learn',\n                                                                         xaxis='Count',\n                                                                         yaxis='Cloud Provider', width=990, height=600)\n\ncloudProviderToLearnDistributionTextbox = widgets.Dropdown(\n    description='Country:   ',\n    value='All',\n    options=countries\n)\n\ncloudProviderToLearnDistributionContainer = widgets.HBox(children=[cloudProviderToLearnDistributionTextbox])\n\n\ndef cloudProviderToLearnDistributionResponse(change):\n    if (cloudProviderToLearnDistributionTextbox.value == 'All'):\n        df = surveyDF\n    else:\n        df = surveyDF[surveyDF['Q3'] == cloudProviderToLearnDistributionTextbox.value][\n            cloudProviderToLearnColumns].reset_index(drop=True)\n\n    with cloudProviderToLearnDistributionFig.batch_update():\n        for i in range(len(cloudProviderToLearnDistributionFig.data)):\n            cloudProviderToLearnDistributionFig.data[i].y = df[\n                cloudProviderToLearnDistributionFig.data[i].name].dropna()\n        if (cloudProviderToLearnDistributionTextbox.value == 'All'):\n            cloudProviderToLearnDistributionFig.layout.title = dict(text=\"Cloud Provider To Learn\")\n        else:\n            cloudProviderToLearnDistributionFig.layout.title = dict(\n                text=cloudProviderToLearnDistributionTextbox.value + \" Cloud Provider To Learn\")\n\n\ncloudProviderToLearnDistributionTextbox.observe(cloudProviderToLearnDistributionResponse, names=\"value\")\n\nwidgets.VBox([cloudProviderToLearnDistributionContainer,\n              cloudProviderToLearnDistributionFig])","8f996512":"def cloudProductToLearn(surveyDF):\n    df = pd.concat([\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q27_B_Part_1']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q27_B_Part_1\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q27_B_Part_2']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q27_B_Part_2\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q27_B_Part_3']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q27_B_Part_3\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q27_B_Part_11']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q27_B_Part_11\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q27_B_OTHER']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q27_B_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q28_B_Part_1']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q28_B_Part_1\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q28_B_Part_2']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q28_B_Part_2\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q28_B_Part_3']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q28_B_Part_3\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q28_B_Part_10']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q28_B_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_1 == 'Amazon Web Services (AWS)'][['Q26_B_Part_1', 'Q28_B_OTHER']].rename(\n            columns={\"Q26_B_Part_1\": \"cloud_provider\", \"Q28_B_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q27_B_Part_4']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q27_B_Part_4\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q27_B_Part_5']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q27_B_Part_5\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q27_B_Part_6']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q27_B_Part_6\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q27_B_Part_11']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q27_B_Part_11\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q27_B_OTHER']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q27_B_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q28_B_Part_4']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q28_B_Part_4\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q28_B_Part_5']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q28_B_Part_5\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q28_B_Part_10']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q28_B_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_2 == 'Microsoft Azure'][['Q26_B_Part_2', 'Q28_B_OTHER']].rename(\n            columns={\"Q26_B_Part_2\": \"cloud_provider\", \"Q28_B_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q27_B_Part_7']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q27_B_Part_7\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q27_B_Part_8']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q27_B_Part_8\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q27_B_Part_9']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q27_B_Part_9\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q27_B_Part_10']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q27_B_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q27_B_Part_11']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q27_B_Part_11\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q27_B_OTHER']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q27_B_OTHER\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q28_B_Part_6']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q28_B_Part_6\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q28_B_Part_7']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q28_B_Part_7\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q28_B_Part_8']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q28_B_Part_8\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q28_B_Part_9']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q28_B_Part_9\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q28_B_Part_10']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q28_B_Part_10\": \"cloud_product\"}),\n        surveyDF[surveyDF.Q26_B_Part_3 == 'Google Cloud Platform (GCP)'][['Q26_B_Part_3', 'Q28_B_OTHER']].rename(\n            columns={\"Q26_B_Part_3\": \"cloud_provider\", \"Q28_B_OTHER\": \"cloud_product\"}),\n    ]).reset_index(drop=True)\n\n    df = df.groupby(['cloud_provider', 'cloud_product'])['cloud_provider'].count().reset_index(name=\"count\")\n\n    colors = ['rgba(95,158,209,1)', 'rgba(0,107,164,1)', 'rgba(255,128,14,1)', 'rgba(89,89,89,1)',\n              'rgba(255,188,121,1)',\n              'rgba(207,207,207,1)', 'rgba(200,82,0,1)', 'rgba(162,200,236,1)', 'rgba(137,137,137,1)',\n              'rgba(171,171,171,1)', ]\n\n    fig = px.sunburst(df,\n                      path=['cloud_provider', 'cloud_product'],\n                      values='count',\n                      color='cloud_product',\n                      branchvalues='total',\n                      color_discrete_sequence=colors)\n\n    fig.update_layout(title=\"Cloud Products To Learn\",\n                      autosize=False,\n                      width=990,\n                      height=800)\n\n    fig.show()\n\n    gc.collect()\n\n\ncloudProductToLearn(surveyDF)","ec42ff19":"###  <a class=\"anchor\" id=\"Business-Intelligence\">4.6.5. Business Intelligence<\/a>\n    \n###  <a class=\"anchor\" id=\"Primary-Business-Intelligence-Tools\">4.6.5.1. Primary Business Intelligence Tools<\/a>\n    \nParticipants are asked to select the business intelligence tools do you use on a regular basis? (Select all that apply)\n* __[Amazon QuickSight](https:\/\/aws.amazon.com\/quicksight\/)__\n* __[Microsoft Power BI](https:\/\/powerbi.microsoft.com\/en-us\/)__\n* __[Google Data Studio](https:\/\/datastudio.google.com\/u\/0\/navigation\/reporting)__\n* __[Looker](https:\/\/cloud.google.com\/looker)__\n* __[Tableau](https:\/\/www.tableau.com\/solutions\/salesforce)__\n* __[Salesforce](https:\/\/www.salesforce.com\/ca\/?ir=1)__\n* __[Einstein Analytics](https:\/\/www.salesforce.com\/products\/crm-analytics\/overview\/)__\n* __[Qlik](https:\/\/www.qlik.com\/us\/)__\n* __[Domo](https:\/\/www.domo.com\/)__\n* __[TIBCO Spotfire](https:\/\/www.tibco.com\/products\/tibco-spotfire)__\n* __[Alteryx](https:\/\/www.alteryx.com\/)__\n* __[Sisense](https:\/\/www.sisense.com\/)__\n* __[SAP Analytics Cloud](https:\/\/saphanajourney.com\/sap-analytics-cloud\/)__\n* None\n* Other","fffd98ce":"###  <a class=\"anchor\" id=\"ML-Repository\">4.6.7.7. Machine Learning Repository<\/a>\n\nParticipants are asked to select the tools they use to manage machine learning experiments? (Select all that apply)\n* __[Neptune.ai](https:\/\/neptune.ai\/)__\n* __[Weights & Biases](https:\/\/wandb.ai\/site)__\n* __[Comet.ml](https:\/\/www.comet.ml\/site\/)__\n* __[Sacred + Omniboard](https:\/\/github.com\/IDSIA\/sacred\/)__\n* __[TensorBoard](https:\/\/www.tensorflow.org\/tensorboard\/)__\n* __[Guild.ai](https:\/\/guild.ai\/)__\n* __[Polyaxon](https:\/\/polyaxon.com\/)__\n* __[Trains](https:\/\/github.com\/allegroai\/clearml)__\n* __[Domino Model Monitor](https:\/\/www.dominodatalab.com\/product\/domino-model-monitor\/)__\n* No \/ None\n* Other","91ecce31":"# State of Data Science and Machine Learning 2020","d0b38a82":"## Table of Contents\n1. [Introduction](#Introduction)<br>\n2. [Demographics](#Demographic)<br>\n    2.1. [Geographic Distribution](#Geographic-Distribution)<br>\n    2.2. [Age Distribution](#Age-Distribution)<br>\n    2.3. [Gender Distribution](#Gender-Distribution)<br>\n3. [Making of a Data Scientist](#Making-of-Data-Scientist)<br>\n    3.1. [Academic Qualification](#Academic-Qualification)<br>\n    3.2. [Data Science Learning Platform](#Data-Science-Learning-Platform)<br>\n    3.3. [Programming Experience](#Programming-Experience)<br>\n    3.4. [First Programming Language](#First-Programming-Language)<br>\n    3.5. [Programming Languages](#Programming-Language)<br>\n4. [Being a Data Scientist](#Being-A-Data-Scientist)<br>\n    4.1. [Salary](#Salary)<br>\n    4.2. [Job Title](#Job-Title)<br>\n    4.3. [Daily Activities](#Daily-Activities)<br>\n    4.4. [Company Size](#Company-Size)<br>\n    4.5. [Data Science Team Size](#Data-Science-Team-Size)<br>\n    4.6. [Data Scientist Arsenal](#Data-Scientist-Arsenal)<br>\n    4.6.1. [Integrated Development Environments](#Integrated-Development-Environments)<br>\n    4.6.2. [Hosted Notebook Products](#Hosted-Notebook-Products)<br>\n    4.6.3. [Primary Data Analysis Tools](#Primary-Data-Analysis-Tools)<br>\n    4.6.4. [Data Visualization Tools](#Data-Visualization-Tools)<br>\n    4.6.5. [Business Intelligence](#Business-Intelligence)<br>\n    4.6.5.1. [Primary Business Intelligence Tools](#Primary-Business-Intelligence-Tools)<br>\n    4.6.5.2 [Business Intelligence Tools](#Business-Intelligence-Tools)<br>\n    4.6.5.3. [Business Intelligence Tools To Learn](#Business-Intelligence-Tools-To-Learn)<br>\n    4.6.6. [Big Data](#Big-Data)<br>\n    4.6.6.1 [Primary Big Data Products](#Primary-Big-Data-Products)<br>\n    4.6.6.2 [Big Data Products](#Big-Data-Products)<br>\n    4.6.6.3 [Big Data Products To Learn](#Big-Data-Products-To-Learn)<br>\n    4.6.7. [Machine Learning](#Machine-Learning)<br>\n    4.6.7.1. [Machine Learning Experience](#Machine-Learning-Experience)<br>\n    4.6.7.2. [Primary Machine Learning Framework](#Primary-Machine-Learning-Framework)<br>\n    4.6.7.3. [Machine Learning Algorithm](#Machine-Learning-Algorithm)<br>\n    4.6.7.4. [Computer Vision Methods](#Computer-Vision-Methods)<br>\n    4.6.7.5. [Natural Language Processing Methods](#NLP-Methods)<br>\n    4.6.7.6. [Machine Learning in Production](#ML-PROD)<br>\n    4.6.7.7. [Machine Learning Repository](#ML-Repository)<br>\n    4.6.7.8. [Machine Learning Repository To Learn](#ML-Repository-To-Learn)<br>\n    4.6.7.9. [Machine Learning Public Deployment Tools](#ML-Public-Deployment-Tools)<br>\n    4.6.8. [Auto Machine Learning](#Auto-ML)<br>\n    4.6.8.1. [Auto ML Methods](#Auto-ML-Methods)<br>\n    4.6.8.2. [Auto ML Methods To Learn](#Auto-ML-Methods-To-Learn)<br>\n    4.6.8.3. [Auto ML Tools](#Auto-ML-Tools)<br>\n    4.6.8.4. [Auto ML Tools To Learn](#Auto-ML-Tools-To-Learn)<br>\n    4.7. [Computing Environment](#Computing-Environment)<br>\n    4.7.1. [Computing Platform](#Computing-Platform)<br>\n    4.7.2. [Specialized Hardware](#Specialized-Hardware)<br>\n    4.7.3. [TPU Usage](#TPU-Usage)<br>\n    4.7.4. [Cloud Environments](#Cloud-Environments)<br>\n    4.7.4.1. [Cloud Budget](#Cloud-Budget)<br>\n    4.7.4.2. [Cloud Platforms](#Cloud-Platforms)<br>\n    4.7.4.3. [Cloud Computing Products](#Cloud-Computing-Products)<br>\n    4.7.4.4. [Cloud Platforms To Learn](#Cloud-Platforms-To-Learn)<br>\n    4.7.4.5. [Cloud Computing Products To Learn](#Cloud-Computing-Products-To-Learn)\n","752c135d":"##  <a class=\"anchor\" id=\"Demographic\">2. Demographics<\/a>\n###  <a class=\"anchor\" id=\"Geographic-Distribution\">2.1. Geographic Distribution<\/a>","ccd298bf":"###  <a class=\"anchor\" id=\"Auto-ML-Tools\">4.6.8.3. Auto ML Tools<\/a>\n\nParticipants are asked to select the automated machine learning tools (or partial AutoML tools) do they use on a regular basis? (Select all that apply)\n* __[Google Cloud AutoML](https:\/\/cloud.google.com\/automl\/)__\n* __[H20 Driverless AI](https:\/\/www.h2o.ai\/products\/h2o-driverless-ai\/)__\n* __[Databricks AutoML](https:\/\/databricks.com\/product\/automl-on-databricks)__\n* __[DataRobot AutoML](https:\/\/www.datarobot.com\/lp\/automated-machine-learning-works-business\/)__\n* __[Tpot](https:\/\/github.com\/EpistasisLab\/tpot\/)__\n* __[Auto-Keras](https:\/\/github.com\/keras-team\/autokeras\/)__\n* __[Auto-Sklearn](https:\/\/github.com\/automl\/auto-sklearn\/)__\n* __[Auto_ml](https:\/\/github.com\/ClimbsRocks\/auto_ml\/)__\n* __[Xcessiv](https:\/\/github.com\/reiinakano\/xcessiv\/)__\n* __[MLbox](https:\/\/github.com\/AxeldeRomblay\/MLBox\/)__\n* No \/ None\n* Other","6df1c32c":"###  <a class=\"anchor\" id=\"Data-Visualization-Tools\">4.6.4. Data Visualization Tools<\/a>\n\nParticipants are asked to select the data visualization libraries or tools do you use on a regular basis? (Select all that apply)\n* __[Matplotlib](https:\/\/matplotlib.org\/)__\n* __[Seaborn](https:\/\/seaborn.pydata.org\/)__\n* __[Plotly \/ Plotly Express](https:\/\/plotly.com\/)__\n* __[Ggplot \/ ggplot2](https:\/\/ggplot2.tidyverse.org\/reference\/ggplot.html)__\n* __[Shiny](https:\/\/cran.r-project.org\/web\/packages\/shiny\/index.html)__\n* __[D3js](https:\/\/d3js.org\/)__\n* __[Altair](https:\/\/altair-viz.github.io\/)__\n* __[Bokeh](https:\/\/docs.bokeh.org\/en\/latest\/index.html\/)__\n* __[Geoplotlib](https:\/\/github.com\/andrea-cuttone\/geoplotlib\/)__\n* __[Leaflet \/ Folium](https:\/\/leafletjs.com\/)__\n* None\n* Other","74bdbee2":"###  <a class=\"anchor\" id=\"Company-Size\">4.4. Company Size<\/a>\nParticipants are asked to select the size of the company that they are employed?\n* 0-49 employees\n* 50-249 employees \n* 250-999 employees \n* 1000-9,999 employees \n* 10,000 or more employees","c0bc72e1":"###  <a class=\"anchor\" id=\"Programming-Experience\">3.3. Programming Experience<\/a>\n\nParticipants are asked about their coding\/programming experience.\n* I have never written code\n* < 1 years\n* 1-2 years\n* 3-5 years\n* 5-10 years\n* 10-20 years\n* 20+ years","a9ec72cf":"###  <a class=\"anchor\" id=\"Daily-Activities\">4.3. Daily Activities<\/a>\n\nParticipants are asked to select the activities that make up an important part of your role at work: (Select all that apply)\n* Analyze and understand data to influence product or business decisions\n* Build and\/or run the data infrastructure that my business uses for storing, analyzing, and\noperationalizing data\n* Build prototypes to explore applying machine learning to new areas\n* Build and\/or run a machine learning service that operationally improves my product or\nworkflows\n* Experimentation and iteration to improve existing ML models\n* Do research that advances the state of the art of machine learning\n* None of these activities are an important part of my role at work\n* Other","f48138e1":"###  <a class=\"anchor\" id=\"Data-Science-Team-Size\">4.5. Data Science Team Size<\/a>\n\nParticipants are asked to select approximately how many individuals are responsible for data science workloads?\n* 0\n* 1-2\n* 3-4\n* 5-9\n* 10-14\n* 15-19\n* 20+","7cfd472b":"###  <a class=\"anchor\" id=\"Big-Data\">4.6.6. Big Data<\/a>\n\n###  <a class=\"anchor\" id=\"Primary-Big-Data-Products\">4.6.6.1 Primary Big Data Products<\/a>\n\nParticipants are asked to select the big data products (relational databases, data warehouses, data lakes, or similar) they use most often? (Select all that apply)\n* __[MySQL](https:\/\/www.mysql.com\/)__\n* __[PostgreSQL](https:\/\/www.postgresql.org\/)__\n* __[SQLite](https:\/\/www.sqlite.org\/index.html)__\n* __[Oracle Database](https:\/\/www.oracle.com\/database\/)__\n* __[MongoDB](https:\/\/www.mongodb.com\/)__\n* __[Snowflake](https:\/\/www.snowflake.com\/)__\n* __[IBM Db2](https:\/\/www.ibm.com\/analytics\/db2)__\n* __[Microsoft SQL Server](https:\/\/www.microsoft.com\/en-us\/sql-server)__\n* __[Microsoft Access](https:\/\/www.microsoft.com\/en-us\/microsoft-365\/access\/)__\n* __[Microsoft Azure Data Lake Storage](https:\/\/azure.microsoft.com\/en-us\/services\/storage\/data-lake-storage\/#overview\/)__\n* __[Amazon Redshift](https:\/\/aws.amazon.com\/redshift\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)__\n* __[Amazon Athena](https:\/\/aws.amazon.com\/athena\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)__\n* __[Amazon DynamoDB](https:\/\/aws.amazon.com\/dynamodb\/)__\n* __[Google Cloud BigQuery](https:\/\/cloud.google.com\/bigquery\/)__\n* __[Google Cloud SQL](https:\/\/cloud.google.com\/sql\/)__\n* __[Google Cloud Firestore](https:\/\/cloud.google.com\/firestore\/)__\n* None\n* Other","4739418e":"###  <a class=\"anchor\" id=\"Auto-ML-Tools-To-Learn\">4.6.8.4. Auto ML Tools To Learn<\/a>\n\nNon-professional participants are asked to select the automated machine learning tools (or partial AutoML tools) they hope to become more familiar with in the next 2 years? (Select all that apply)\n* __[Google Cloud AutoML](https:\/\/cloud.google.com\/automl\/)__\n* __[H20 Driverless AI](https:\/\/www.h2o.ai\/products\/h2o-driverless-ai\/)__\n* __[Databricks AutoML](https:\/\/databricks.com\/product\/automl-on-databricks)__\n* __[DataRobot AutoML](https:\/\/www.datarobot.com\/lp\/automated-machine-learning-works-business\/)__\n* __[Tpot](https:\/\/github.com\/EpistasisLab\/tpot\/)__\n* __[Auto-Keras](https:\/\/github.com\/keras-team\/autokeras\/)__\n* __[Auto-Sklearn](https:\/\/github.com\/automl\/auto-sklearn\/)__\n* __[Auto_ml](https:\/\/github.com\/ClimbsRocks\/auto_ml\/)__\n* __[Xcessiv](https:\/\/github.com\/reiinakano\/xcessiv\/)__\n* __[MLbox](https:\/\/github.com\/AxeldeRomblay\/MLBox\/)__\n* No \/ None\n* Other","328b893e":"###  <a class=\"anchor\" id=\"TPU-Usage\">4.7.3. TPU Usage<\/a>\n\nParticipants are asked to select approximately how many times they have used a TPU (tensor processing unit)?\n* Never\n* Once\n* 2-5 times\n* 6-25 times\n* More than 25 times","1ebbbf81":"###  <a class=\"anchor\" id=\"Big-Data-Products-To-Learn\">4.6.6.3 Big Data Products To Learn<\/a>\n\nNon-professional Participants are asked to select the big data products (relational databases, data warehouses, data lakes, or similar) they hope to become more familiar with in the next 2 years? (Select all that apply)\n* __[MySQL](https:\/\/www.mysql.com\/)__\n* __[PostgreSQL](https:\/\/www.postgresql.org\/)__\n* __[SQLite](https:\/\/www.sqlite.org\/index.html)__\n* __[Oracle Database](https:\/\/www.oracle.com\/database\/)__\n* __[MongoDB](https:\/\/www.mongodb.com\/)__\n* __[Snowflake](https:\/\/www.snowflake.com\/)__\n* __[IBM Db2](https:\/\/www.ibm.com\/analytics\/db2)__\n* __[Microsoft SQL Server](https:\/\/www.microsoft.com\/en-us\/sql-server)__\n* __[Microsoft Access](https:\/\/www.microsoft.com\/en-us\/microsoft-365\/access\/)__\n* __[Microsoft Azure Data Lake Storage](https:\/\/azure.microsoft.com\/en-us\/services\/storage\/data-lake-storage\/#overview\/)__\n* __[Amazon Redshift](https:\/\/aws.amazon.com\/redshift\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)__\n* __[Amazon Athena](https:\/\/aws.amazon.com\/athena\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)__\n* __[Amazon DynamoDB](https:\/\/aws.amazon.com\/dynamodb\/)__\n* __[Google Cloud BigQuery](https:\/\/cloud.google.com\/bigquery\/)__\n* __[Google Cloud SQL](https:\/\/cloud.google.com\/sql\/)__\n* __[Google Cloud Firestore](https:\/\/cloud.google.com\/firestore\/)__\n* None\n* Other\n\nNote - Non-professionals received questions with an alternate phrasing (questions for non-professionals asked what tools they hope to become familiar with in the next 2 years instead of asking what tools they use on a regular basis). Non-professionals were defined as students, unemployed, and respondents that have never spent any money in the cloud.","80be28f0":"###  <a class=\"anchor\" id=\"ML-Repository-To-Learn\">4.6.7.8. Machine Learning Repository To Learn<\/a>\n\nNon-professional participants are asked to select the tools they use to manage machine learning experiments they hope to become more familiar with in the next 2 years? (Select all that apply)\n* __[Neptune.ai](https:\/\/neptune.ai\/)__\n* __[Weights & Biases](https:\/\/wandb.ai\/site)__\n* __[Comet.ml](https:\/\/www.comet.ml\/site\/)__\n* __[Sacred + Omniboard](https:\/\/github.com\/IDSIA\/sacred\/)__\n* __[TensorBoard](https:\/\/www.tensorflow.org\/tensorboard\/)__\n* __[Guild.ai](https:\/\/guild.ai\/)__\n* __[Polyaxon](https:\/\/polyaxon.com\/)__\n* __[Trains](https:\/\/github.com\/allegroai\/clearml)__\n* __[Domino Model Monitor](https:\/\/www.dominodatalab.com\/product\/domino-model-monitor\/)__\n* No \/ None\n* Other","8a2239bf":"###  <a class=\"anchor\" id=\"Cloud-Computing-Products\">4.7.4.3. Cloud Computing Products<\/a>\n\nParticipants are asked to select the cloud computing products on a regular basis? (Select all that apply)3\u200b\n* __[Amazon EC2](https:\/\/aws.amazon.com\/ec2\/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&ec2-whats-new.sort-order=desc)__\n* __[AWS Lambda](https:\/\/aws.amazon.com\/lambda\/)__\n* __[Amazon Elastic Container Service](https:\/\/aws.amazon.com\/ecs\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc&ecs-blogs.sort-by=item.additionalFields.createdDate&ecs-blogs.sort-order=desc)__\n* __[Azure Cloud Services](https:\/\/azure.microsoft.com\/en-us\/services\/cloud-services\/)__\n* __[Microsoft Azure Container Instances](https:\/\/azure.microsoft.com\/en-us\/services\/cloud-services\/)__\n* __[Azure Functions](https:\/\/azure.microsoft.com\/en-us\/services\/functions\/)__\n* __[Google Cloud Compute Engine](https:\/\/cloud.google.com\/compute)__\n* __[Google Cloud Functions](https:\/\/cloud.google.com\/functions\/)__\n* __[Google Cloud Run](https:\/\/cloud.google.com\/run\/)__\n* __[Google Cloud App Engine](https:\/\/cloud.google.com\/appengine\/)__\n* No \/ None\n* Other","55866390":"###  <a class=\"anchor\" id=\"Machine-Learning-Algorithm\">4.6.7.3. Machine Learning Algorithm<\/a>\n\nParticipants are asked to select the ML algorithms do you use on a regular basis? (Select all that apply):\n* Linear or Logistic Regression\n* Decision Trees or Random Forests\n* Gradient Boosting Machines (xgboost, lightgbm, etc)\n* Bayesian Approaches\n* Evolutionary Approaches\n* Dense Neural Networks (MLPs, etc)\n* Convolutional Neural Networks\n* Generative Adversarial Networks\n* Recurrent Neural Networks\n* Transformer Networks (BERT, gpt-3, etc)\n* None\n* Other","7d91ebca":"###  <a class=\"anchor\" id=\"Auto-ML\">4.6.8. Auto Machine Learning<\/a>\n###  <a class=\"anchor\" id=\"Auto-ML-Methods\">4.6.8.1. Auto ML Methods<\/a>\n\nParticipants are asked to select the automated machine learning tools (or partial AutoML tools) on a regular basis? (Select all that apply)\n* Automated data augmentation (e.g. imgaug, albumentations)\n* Automated feature engineering\/selection (e.g. tpot, boruta_py)\n* Automated model selection (e.g. auto-sklearn, xcessiv)\n* Automated model architecture searches (e.g. darts, enas)\n* Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)\n* Automation of full ML pipelines (e.g. Google AutoML, H20 Driverless AI)\n* No \/ None\n* Other","5d9afb1b":"###  <a class=\"anchor\" id=\"ML-Public-Deployment-Tools\">4.6.7.9. Machine Learning Public Deployment Tools<\/a>\n\nParticipants are asked to select the tools they use to publicly share or deploy your data analysis or machine learning applications? (Select apply)\n* __[Plotly Dash](https:\/\/plotly.com\/dash\/)__\n* __[Streamlit](https:\/\/www.streamlit.io\/)__\n* __[NBViewer](https:\/\/nbviewer.jupyter.org\/)__\n* __[GitHub](https:\/\/github.com\/)__\n* __[Personal blog](https:\/\/medium.com\/)__\n* __[Kaggle](https:\/\/www.kaggle.com\/)__\n* __[Colab](https:\/\/colab.research.google.com\/notebooks\/intro.ipynb#recent=true)__\n* __[Shiny](https:\/\/shiny.rstudio.com\/)__\n* None \/ I do not share my work publicly \n* Other","e6491d31":"###  <a class=\"anchor\" id=\"Being-A-Data-Scientist\">4. Being a Data Scientist<\/a>\n###  <a class=\"anchor\" id=\"Salary\">4.1. Salary<\/a>","8ed612ac":"###  <a class=\"anchor\" id=\"Gender-Distribution\">2.3. Gender Distribution<\/a>","0a15d3b7":"##  <a class=\"anchor\" id=\"Introduction\">1. Introduction<\/a>\n\nThis notebook is an Exploratory Data Analysis (EDA) of the 2020 Kaggle Data Science & Machine Learning survey. The survey was live from 07-October-2020 to 30-October-2020 and captured impressions from 20,036 participants.\n\nThe intended audience of this analysis are:\n1. Students - to learn the path to become a Data Scientist\/ Machine Learning practitioner.\n2. Software Developers - to learn the trending frameworks and technologies peers are using.\n3. Product Managers - to learn about the costs associated with planing and executing a DS\/ML project.\n4. Recruiters - to learn the true snapshot of the workforce and make educated requirements in the job posts.\n\nAll the visualizations in this notebook can be toggled between the global and specific country level view.","9c6be5f9":"###  <a class=\"anchor\" id=\"Programming-Language\">3.5. Programming Languages<\/a>\n\nParticipants are asked to select the programming languages that they used on a regular basis? (Select all that apply)\n* Python \n* R\n* SQL \n* C\n* C++\n* Java\n* Javascript \n* Julia\n* Swift\n* Bash\n* MATLAB \n* None\n* Other","f4479a5f":"###  <a class=\"anchor\" id=\"ML-PROD\">4.6.7.6. Machine Learning in Production<\/a>\n\nParticipants are asked if their current employer incorporate machine learning methods into their business?\n* We are exploring ML methods (and may one day put a model into production)\n* We use ML methods for generating insights (but do not put working models into production) \n* We recently started using ML methods (i.e., models in production for less than 2 years)\n* We have well established ML methods (i.e., models in production for more than 2 years) \n* No (we do not use ML methods)\n* I do not know","bce02958":"###  <a class=\"anchor\" id=\"Cloud-Platforms-To-Learn\">4.7.4.4. Cloud Platforms To Learn<\/a>\n\nNon-professional participants are asked to select cloud computing platforms do they hope to become more familiar with in the next 2 years?\n* __[Amazon Web Services (AWS)](https:\/\/aws.amazon.com\/)__\n* __[Microsoft Azure](https:\/\/azure.microsoft.com\/en-us\/)__\n* __[Google Cloud Platform (GCP)](https:\/\/cloud.google.com\/gcp\/)__\n* __[IBM Cloud \/ Red Hat](https:\/\/www.ibm.com\/cloud)__\n* __[Oracle Cloud](https:\/\/www.oracle.com\/cloud\/)__\n* __[SAP Cloud](https:\/\/www.sap.com\/products\/cloud-platform.html?btp=470d9626-7bbe-4ce8-afd2-1f36444df031)__\n* __[Salesforce Cloud](https:\/\/www.salesforce.com\/products\/sales-cloud\/features\/)__\n* __[VMware Cloud](https:\/\/cloud.vmware.com\/)__\n* __[Alibaba Cloud](https:\/\/us.alibabacloud.com\/)__\n* __[Tencent Cloud](https:\/\/intl.cloud.tencent.com\/)__\n* None\n* Other\n\nNote - Non-professionals received questions with an alternate phrasing (questions for non-professionals asked what tools they hope to become familiar with in the next 2 years instead of asking what tools they use on a regular basis). Non-professionals were defined as students, unemployed, and respondents that have never spent any money in the cloud.","5e0e35bb":"###  <a class=\"anchor\" id=\"Computing-Environment\">4.7. Computing Environment<\/a>\n\n###  <a class=\"anchor\" id=\"Computing-Platform\">4.7.1. Computing Platform<\/a>\n\nParticipants are asked to select the type of computing platform do you use most often for your data science projects?\n* A personal computer or laptop\n* A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)\n* A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)\n* None\n* Other","4068b95a":"###  <a class=\"anchor\" id=\"Business-Intelligence-Tools-To-Learn\">4.6.5.3. Business Intelligence Tools To Learn<\/a>\n\nNon-professional participants are asked to select the business intelligence tools they hope to become more familiar with in the next 2 years? (Select all that apply)\n* __[Amazon QuickSight](https:\/\/aws.amazon.com\/quicksight\/)__\n* __[Microsoft Power BI](https:\/\/powerbi.microsoft.com\/en-us\/)__\n* __[Google Data Studio](https:\/\/datastudio.google.com\/u\/0\/navigation\/reporting)__\n* __[Looker](https:\/\/cloud.google.com\/looker)__\n* __[Tableau](https:\/\/www.tableau.com\/solutions\/salesforce)__\n* __[Salesforce](https:\/\/www.salesforce.com\/ca\/?ir=1)__\n* __[Einstein Analytics](https:\/\/www.salesforce.com\/products\/crm-analytics\/overview\/)__\n* __[Qlik](https:\/\/www.qlik.com\/us\/)__\n* __[Domo](https:\/\/www.domo.com\/)__\n* __[TIBCO Spotfire](https:\/\/www.tibco.com\/products\/tibco-spotfire)__\n* __[Alteryx](https:\/\/www.alteryx.com\/)__\n* __[Sisense](https:\/\/www.sisense.com\/)__\n* __[SAP Analytics Cloud](https:\/\/saphanajourney.com\/sap-analytics-cloud\/)__\n* None\n* Other\n\nNote - Non-professionals received questions with an alternate phrasing (questions for non-professionals asked what tools they hope to become familiar with in the next 2 years instead of asking what tools they use on a regular basis). Non-professionals were defined as students, unemployed, and respondents that have never spent any money in the cloud.","f13ea514":"###  <a class=\"anchor\" id=\"Primary-Data-Analysis-Tools\">4.6.3. Primary Data Analysis Tools<\/a>\n\nParticipants are asked to select the primary tool that you use at work or school to analyze data? (Include text response)\n* Basic statistical software (Microsoft Excel, Google Sheets, etc.) \n* Advanced statistical software (SPSS, SAS, etc.)\n* Business intelligence software (Salesforce, Tableau, Spotfire, etc.) \n* Local development environments (RStudio, JupyterLab, etc.) \n* Cloud-based data software & APIs (AWS, GCP, Azure, etc.)\n* Other","560632fb":"###  <a class=\"anchor\" id=\"Machine-Learning\">4.6.7. Machine Learning<\/a>\n###  <a class=\"anchor\" id=\"Machine-Learning-Experience\">4.6.7.1. Machine Learning Experience<\/a>\n\nParticipants are asked to select the number of years they have used machine learning methods?\n* I do not use machine learning methods\n* Under 1 year\n* 1-2 years\n* 2-3 years\n* 3-4 years\n* 4-5 years\n* 5-10 years\n* 10-20 years\n* 20 or more years","29081963":"###  <a class=\"anchor\" id=\"Specialized-Hardware\">4.7.2. Specialized Hardware<\/a>\n\nParticipants are asked to select the types of specialized hardware do you use on a regular basis? (Select all that apply)\n* GPUs \n* TPUs\n* None\n* Other","db183e69":"###  <a class=\"anchor\" id=\"Cloud-Platforms\">4.7.4.2. Cloud Platforms<\/a>\n\nParticipants are asked to select the cloud computing platforms they use on a regular basis? (Select all that apply)\n* __[Amazon Web Services (AWS)](https:\/\/aws.amazon.com\/)__\n* __[Microsoft Azure](https:\/\/azure.microsoft.com\/en-us\/)__\n* __[Google Cloud Platform (GCP)](https:\/\/cloud.google.com\/gcp\/)__\n* __[IBM Cloud \/ Red Hat](https:\/\/www.ibm.com\/cloud)__\n* __[Oracle Cloud](https:\/\/www.oracle.com\/cloud\/)__\n* __[SAP Cloud](https:\/\/www.sap.com\/products\/cloud-platform.html?btp=470d9626-7bbe-4ce8-afd2-1f36444df031)__\n* __[Salesforce Cloud](https:\/\/www.salesforce.com\/products\/sales-cloud\/features\/)__\n* __[VMware Cloud](https:\/\/cloud.vmware.com\/)__\n* __[Alibaba Cloud](https:\/\/us.alibabacloud.com\/)__\n* __[Tencent Cloud](https:\/\/intl.cloud.tencent.com\/)__\n* None\n* Other","c085bfcc":"###  <a class=\"anchor\" id=\"Primary-Machine-Learning-Framework\">4.6.7.2. Primary Machine Learning Framework<\/a>\n\nParticipants are asked to select the machine learning frameworks they use on a regular basis? (Select all that apply)\n* __[Scikit-learn](https:\/\/scikit-learn.org\/stable\/)__\n* __[TensorFlow](https:\/\/www.tensorflow.org\/)__\n* __[Keras](https:\/\/keras.io\/)__\n* __[PyTorch](https:\/\/pytorch.org\/)__\n* __[Fast.ai](https:\/\/docs.fast.ai\/)__\n* __[MXNet](https:\/\/github.com\/apache\/incubator-mxnet\/)__\n* __[Xgboost](https:\/\/xgboost.readthedocs.io\/en\/latest\/)__\n* __[LightGBM](https:\/\/lightgbm.readthedocs.io\/en\/latest\/)__\n* __[CatBoost](https:\/\/catboost.ai\/docs\/)__\n* __[Prophet](https:\/\/facebook.github.io\/prophet\/)__\n* __[H2O3](http:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/welcome.html\/)__\n* __[Caret](https:\/\/github.com\/topepo\/caret\/)__\n* __[Tidymodels](https:\/\/github.com\/tidymodels\/tidymodels\/)__ \n* __[JAX](https:\/\/github.com\/google\/jax\/)__\n* None\n* Other","f96c4cee":"###  <a class=\"anchor\" id=\"Age-Distribution\">2.2. Age Distribution<\/a>","d6905f9a":"###  <a class=\"anchor\" id=\"Auto-ML-Methods-To-Learn\">4.6.8.2. Auto ML Methods To Learn<\/a>\n\nNon-professional Participants are asked to select automated machine learning tools (or partial AutoML tools) they hope to become more familiar with in the next 2 years? (Select all that apply)\n* Automated data augmentation (e.g. imgaug, albumentations)\n* Automated feature engineering\/selection (e.g. tpot, boruta_py)\n* Automated model selection (e.g. auto-sklearn, xcessiv)\n* Automated model architecture searches (e.g. darts, enas)\n* Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)\n* Automation of full ML pipelines (e.g. Google Cloud AutoML, H20 Driverless AI)\n* None\n* Other","43240abc":"###  <a class=\"anchor\" id=\"Big-Data-Products\">4.6.6.2 Big Data Products<\/a>\n\nParticipants are asked to select the big data products (relational databases, data warehouses, data lakes, or similar) they use on a regular basis? (Select all that apply)\n* __[MySQL](https:\/\/www.mysql.com\/)__\n* __[PostgreSQL](https:\/\/www.postgresql.org\/)__\n* __[SQLite](https:\/\/www.sqlite.org\/index.html)__\n* __[Oracle Database](https:\/\/www.oracle.com\/database\/)__\n* __[MongoDB](https:\/\/www.mongodb.com\/)__\n* __[Snowflake](https:\/\/www.snowflake.com\/)__\n* __[IBM Db2](https:\/\/www.ibm.com\/analytics\/db2)__\n* __[Microsoft SQL Server](https:\/\/www.microsoft.com\/en-us\/sql-server)__\n* __[Microsoft Access](https:\/\/www.microsoft.com\/en-us\/microsoft-365\/access\/)__\n* __[Microsoft Azure Data Lake Storage](https:\/\/azure.microsoft.com\/en-us\/services\/storage\/data-lake-storage\/#overview\/)__\n* __[Amazon Redshift](https:\/\/aws.amazon.com\/redshift\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)__\n* __[Amazon Athena](https:\/\/aws.amazon.com\/athena\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)__\n* __[Amazon DynamoDB](https:\/\/aws.amazon.com\/dynamodb\/)__\n* __[Google Cloud BigQuery](https:\/\/cloud.google.com\/bigquery\/)__\n* __[Google Cloud SQL](https:\/\/cloud.google.com\/sql\/)__\n* __[Google Cloud Firestore](https:\/\/cloud.google.com\/firestore\/)__\n* None\n* Other","55c8bb44":"###  <a class=\"anchor\" id=\"Job-Title\">4.2. Job Title<\/a>\nParticipants are asked to select the title most similar to their current role (or most recent title if retired):\n* Business Analyst\n* Data Analyst\n* Data Engineer\n* Data Scientist\n* DBA\/Database Engineer\n* Machine Learning Engineer\n* Product\/Project Manager\n* Research Scientist\n* Software Engineer\n* Statistician\n* Student\n* Currently not employed\n* Other ","86214da8":"###  <a class=\"anchor\" id=\"Business-Intelligence-Tools\">4.6.5.2 Business Intelligence Tools<\/a>\n\nParticipants are asked to select the business intelligence tools do you use on a regular basis? (Select all that apply)\n* __[Amazon QuickSight](https:\/\/aws.amazon.com\/quicksight\/)__\n* __[Microsoft Power BI](https:\/\/powerbi.microsoft.com\/en-us\/)__\n* __[Google Data Studio](https:\/\/datastudio.google.com\/u\/0\/navigation\/reporting)__\n* __[Looker](https:\/\/cloud.google.com\/looker)__\n* __[Tableau](https:\/\/www.tableau.com\/solutions\/salesforce)__\n* __[Salesforce](https:\/\/www.salesforce.com\/ca\/?ir=1)__\n* __[Einstein Analytics](https:\/\/www.salesforce.com\/products\/crm-analytics\/overview\/)__\n* __[Qlik](https:\/\/www.qlik.com\/us\/)__\n* __[Domo](https:\/\/www.domo.com\/)__\n* __[TIBCO Spotfire](https:\/\/www.tibco.com\/products\/tibco-spotfire)__\n* __[Alteryx](https:\/\/www.alteryx.com\/)__\n* __[Sisense](https:\/\/www.sisense.com\/)__\n* __[SAP Analytics Cloud](https:\/\/saphanajourney.com\/sap-analytics-cloud\/)__\n* None\n* Other","21ba36d5":"###  <a class=\"anchor\" id=\"Cloud-Computing-Products-To-Learn\">4.7.4.5. Cloud Computing Products To Learn<\/a>\n\nNon-professional participants are asked to select cloud computing products do they hope to become more familiar with in the next 2 years?\n* __[Amazon EC2](https:\/\/aws.amazon.com\/ec2\/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&ec2-whats-new.sort-order=desc)__\n* __[AWS Lambda](https:\/\/aws.amazon.com\/lambda\/)__\n* __[Amazon Elastic Container Service](https:\/\/aws.amazon.com\/ecs\/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc&ecs-blogs.sort-by=item.additionalFields.createdDate&ecs-blogs.sort-order=desc)__\n* __[Azure Cloud Services](https:\/\/azure.microsoft.com\/en-us\/services\/cloud-services\/)__\n* __[Microsoft Azure Container Instances](https:\/\/azure.microsoft.com\/en-us\/services\/cloud-services\/)__\n* __[Azure Functions](https:\/\/azure.microsoft.com\/en-us\/services\/functions\/)__\n* __[Google Cloud Compute Engine](https:\/\/cloud.google.com\/compute)__\n* __[Google Cloud Functions](https:\/\/cloud.google.com\/functions\/)__\n* __[Google Cloud Run](https:\/\/cloud.google.com\/run\/)__\n* __[Google Cloud App Engine](https:\/\/cloud.google.com\/appengine\/)__\n* No \/ None\n* Other\n\nNote - Non-professionals received questions with an alternate phrasing (questions for non-professionals asked what tools they hope to become familiar with in the next 2 years instead of asking what tools they use on a regular basis). Non-professionals were defined as students, unemployed, and respondents that have never spent any money in the cloud.","cd309ab1":"###  <a class=\"anchor\" id=\"Computer-Vision-Methods\">4.6.7.4. Computer Vision Methods<\/a>\n\nParticipants are asked to select the computer vision methods do you use on a regular basis? (Select all that apply)\n* General purpose image\/video tools (PIL, cv2, skimage, etc)\n* Image segmentation methods (U-Net, Mask R-CNN, etc)\n* Object detection methods (YOLOv3, RetinaNet, etc)\n* Image classification and other general purpose networks (VGG, Inception, ResNet,\nResNeXt, NASNet, EfficientNet, etc)\n* Generative Networks (GAN, VAE, etc)\n* None\n* Other\n\nNote - This question was only asked to respondents that selected the relevant answer choices in the Machine Leanring Algorithm question. ","8a9875ed":"###  <a class=\"anchor\" id=\"Hosted-Notebook-Products\">4.6.2. Hosted Notebook Products<\/a>\n\nParticipants are asked to select the hosted notebook products they have used on a regular basis? (Select all that apply)\n* __[Kaggle Notebooks](https:\/\/www.kaggle.com\/notebooks\/)__\n* __[Colab Notebooks](https:\/\/colab.research.google.com\/notebooks\/intro.ipynb#recent=true)__\n* __[Azure Notebooks](https:\/\/notebooks.azure.com\/)__\n* __[Paperspace \/ Gradient](https:\/\/gradient.paperspace.com\/)__\n* __[Binder \/ JupyterHub](https:\/\/mybinder.org\/)__\n* __[Code Ocean](https:\/\/codeocean.com\/)__\n* __[IBM Watson Studio](https:\/\/www.ibm.com\/cloud\/watson-studio)__\n* __[Amazon Sagemaker Studio](https:\/\/docs.aws.amazon.com\/sagemaker\/latest\/dg\/notebooks.html)__\n* __[Amazon EMR Notebooks](https:\/\/docs.aws.amazon.com\/emr\/latest\/ManagementGuide\/emr-managed-notebooks.html)__\n* __[Google Cloud AI Platform Notebooks](https:\/\/cloud.google.com\/ai-platform-notebooks\/)__\n* __[Google Cloud Datalab Notebooks](https:\/\/cloud.google.com\/datalab\/docs\/how-to\/working-with-notebooks\/)__\n* __[Databricks Collaborative Notebooks](https:\/\/databricks.com\/product\/collaborative-notebooks)__\n* None\n* Other","fb40a763":"###  <a class=\"anchor\" id=\"Data-Science-Learning-Platform\">3.2. Data Science Learning Platform<\/a>\n\nParticipants are asked to select the platforms on which they have begun or completed data science courses? (Select all that apply)\n* Coursera\n* edX\n* Kaggle Learn Courses\n* DataCamp\n* Fast.ai\n* Udacity\n* Udemy\n* LinkedIn Learning\n* Cloud-certification programs (direct from AWS, Azure, GCP, or similar)\n* University Courses (resulting in a university degree)\n* None\n* Other","4a9219b8":"###  <a class=\"anchor\" id=\"Cloud-Environments\">4.7.4. Cloud Environments<\/a>\n###  <a class=\"anchor\" id=\"Cloud-Budget\">4.7.4.1. Cloud Budget<\/a>\n\nParticipants are asked to select approximately how much money they have (or their team) spent on machine learning and\/or cloud\ncomputing services at home (or at work) in the past 5 years (\u200bapproximate $USD\u200b)?\n* 0 (USD)\n* 1-99\n* 100-999\n* 1000-9,999\n* 10,000-99,999\n* 100,000 or more (USD)","5d7b6599":"###  <a class=\"anchor\" id=\"First-Programming-Language\">3.4. First Programming Language<\/a>\n\nParticipants are asked to select the programming language would they would recommend an aspiring data scientist to learn first?\n* Python\n* R\n* SQL\n* C\n* C++\n* Java\n* Javascript\n* Julia\n* Swift\n* Bash\n* MATLAB\n* None\n* Other","51d8f595":"###  <a class=\"anchor\" id=\"Making-of-Data-Scientist\">3. Making of a Data Scientist<\/a>\n\n###  <a class=\"anchor\" id=\"Academic-Qualification\">3.1. Academic Qualification<\/a>\n\nParticipants are surveyed on the highest level of formal education that they have attained or plan to attain within the next 2 years with the following options to choose from:\n\n* No formal education past high school\n* Some college\/university study without earning a bachelor\u2019s degreeBachelor\u2019s degree\n* Master\u2019s degree\n* Doctoral degree\n* Professional degree\n* I prefer not to answer ","36583fe8":"###  <a class=\"anchor\" id=\"Data-Scientist-Arsenal\">4.6. Data Scientist Arsenal<\/a>\n###  <a class=\"anchor\" id=\"Integrated-Development-Environments\">4.6.1. Integrated Development Environments<\/a>\n\nParticipants are asked to select the integrated development environments (IDE's) they use on a regular basis? (Select all that apply)\n* __[JupyterLab (or products based off of Jupyter)](https:\/\/jupyter.org\/)__\n* __[RStudio](https:\/\/rstudio.com\/)__\n* __[Visual Studio](https:\/\/visualstudio.microsoft.com\/)__\n* __[Visual Studio Code (VSCode)](https:\/\/code.visualstudio.com\/)__\n* __[PyCharm](https:\/\/www.jetbrains.com\/pycharm\/)__\n* __[Spyder](https:\/\/www.spyder-ide.org\/)__\n* __[Notepad++](https:\/\/notepad-plus-plus.org\/)__\n* __[Sublime Text](https:\/\/www.sublimetext.com\/)__\n* __[Vim, Emacs, or similar](https:\/\/www.vim.org\/)__\n* __[MATLAB](https:\/\/www.mathworks.com\/products\/matlab.html)__\n* None\n* Other","59fbdd87":"###  <a class=\"anchor\" id=\"NLP-Methods\">4.6.7.5. Natural Language Processing Methods<\/a>\n\nParticipants are asked to select the natural language processing (NLP) methods do you use on a regular basis? (Select all that apply)\n* Word embeddings\/vectors (GLoVe, fastText, word2vec)\n* Encoder-decoder models (seq2seq, vanilla transformers)\n* Contextualized embeddings (ELMo, CoVe)\n* Transformer language models (GPT-3, BERT, XLnet, etc)\n* None\n* Other\n\nNote - This question was only asked to respondents that selected the relevant answer choices in the Machine Leanring Algorithm question. "}}