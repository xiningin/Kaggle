{"cell_type":{"fb9d9cf9":"code","c1162587":"code","210bc0c4":"code","6ddbc11a":"code","4dd9a2a1":"code","2a46f829":"code","11eb0dfd":"code","51f46f19":"code","680b2d3f":"code","94d0435a":"code","6e6fd8f8":"code","0bf75714":"code","19aa1605":"code","11f05e8b":"code","62cb4829":"code","b55429b7":"code","d919c8b7":"code","80c667fd":"code","bd03f640":"code","1fac00d2":"code","957c24b2":"code","f33a55b3":"code","8689952e":"code","bbe63dc7":"code","c30907f6":"code","11f72e94":"code","9cb8efcd":"code","903fa84c":"code","94006a45":"code","c8b6181c":"code","6202f3de":"code","f7e24a84":"code","abc520c4":"code","3509cd7a":"code","ba3b4aaf":"code","24e499a1":"code","758599c7":"code","0ec76077":"code","98a3498c":"code","030e13e7":"code","d68941a4":"code","b0fb18cb":"code","8f94254a":"code","806fb0a4":"code","a430b772":"code","abe8ad1d":"code","93e606a0":"code","55139057":"code","7c20601b":"code","4c615442":"code","31881011":"code","6390b66c":"code","9a60aae1":"code","076e2737":"code","c21fc48d":"code","80e71c98":"code","5da03999":"code","09e8e5ff":"code","07c9fc98":"code","094985d6":"code","6799ed2d":"code","eb1a94ab":"code","bcd911ab":"code","b9b2fef4":"code","8aaa4f4c":"code","84e0f6f0":"code","56ceac2d":"code","88c7e2d1":"code","717b076e":"code","39e893f1":"code","4e52c01b":"code","53e92ab6":"code","92702458":"code","68dfe8af":"code","0bd587bb":"code","d945ee48":"code","3c7a6680":"code","d3c63d1e":"code","4e6399d7":"code","90446491":"code","a0330977":"code","58f1c380":"code","f8e5825c":"code","542dab42":"code","514e09bd":"code","c48033cb":"code","81f331d2":"code","17e7ea8e":"code","64753206":"code","803be0a2":"code","5f0f153c":"code","e6eac406":"code","9b1eb522":"code","29d74761":"code","121a0294":"code","7945871c":"code","7ca41630":"code","f67c1844":"code","9dc39810":"code","4b0ba307":"code","79c57db9":"markdown","24917175":"markdown","308bfe70":"markdown","663d2048":"markdown","c451a046":"markdown","3ef0ffe0":"markdown","bf9b10fb":"markdown","90d6afef":"markdown","acf35948":"markdown","104bad09":"markdown","55851ee0":"markdown"},"source":{"fb9d9cf9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c1162587":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","210bc0c4":"from fastai.imports import *","6ddbc11a":"from fastai.structured import *\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nfrom IPython.display import display","4dd9a2a1":"os.getcwd()","2a46f829":"os.listdir(\"\/kaggle\/working\")","11eb0dfd":"os.chdir(\"..\/\")","51f46f19":"os.makedirs(\"working\/data\")","680b2d3f":"os.listdir(\"working\")","94d0435a":"os.listdir(\"working\/data\")","6e6fd8f8":"train_file = \"input\/train\/Train.csv\"\ntest_file = \"input\/Test.csv\"\nvalid_file = \"input\/Valid.csv\"\nreq_files = [train_file,test_file,valid_file]\ndest = \"working\/data\"\ndef move_files(filename,destination):\n    shutil.copy(filename,destination)\n    \nfor i in req_files:\n    move_files(i,dest)\n","0bf75714":"os.chdir(\"working\")","19aa1605":"os.getcwd()","11f05e8b":"PATH = \"data\/\"","62cb4829":"df_raw = pd.read_csv(f\"{PATH}Train.csv\",low_memory=False,parse_dates=['saledate'])","b55429b7":"df_raw.head()","d919c8b7":"df_raw.describe()","80c667fd":"df_raw.info()","bd03f640":"df_raw.SalePrice = np.log(df_raw.SalePrice)","1fac00d2":"def display_all(df):\n    with pd.option_context(\"display.max_rows\",1000):\n        with pd.option_context(\"display.max_columns\",1000):\n            display(df)","957c24b2":"display_all(df_raw.describe(include='all').T)","f33a55b3":"add_datepart(df_raw,'saledate')\ndf_raw.columns","8689952e":"train_cats(df_raw)","bbe63dc7":"df_raw.head()","c30907f6":"df_raw.UsageBand.cat.set_categories([\"High\",\"Low\",\"Medium\"],ordered = True,inplace = True)\n#df_raw.ProductSize.cat.set_categories([\"High\",\"Low\",\"Medium\"],ordered = True,inplace = True)","11f72e94":"#Percentage of nulls in each column\ndisplay_all(df_raw.isnull().sum().sort_index()\/len(df_raw))","9cb8efcd":"df_raw.UsageBand.cat.categories","903fa84c":"os.makedirs('tmp',exist_ok=True)\ndf_raw.to_feather('tmp\/raw')","94006a45":"df_raw = pd.read_feather('tmp\/raw')","c8b6181c":"df,y,nas = proc_df(df_raw,'SalePrice')","6202f3de":"m = RandomForestRegressor(n_jobs = -1)\nm.fit(df,y)\nm.score(df,y)","f7e24a84":"def split_vals(a,n): return a[:n].copy(),a[n:].copy()\nn_valid = 12000\nn_train = len(df) - n_valid\nraw_train,raw_valid = split_vals(df_raw,n_train)\nX_train,X_valid = split_vals(df,n_train)\ny_train,y_valid = split_vals(y,n_train)\nX_train.shape,y_train.shape,X_valid.shape","abc520c4":"def rmse(x,y):return math.sqrt(((x-y)**2).mean())\ndef print_score(m):\n    res = [rmse(m.predict(X_train),y_train),rmse(m.predict(X_valid),y_valid),\n           m.score(X_train,y_train),m.score(X_valid,y_valid)]\n    if hasattr(m,\"oob_score_\"): res.append(m.oob_score_)\n    print(res)","3509cd7a":"m = RandomForestRegressor(n_jobs = -1)\n%time m.fit(X_train,y_train)\nprint_score(m)","ba3b4aaf":"df_trn,y_trn, nas = proc_df(df_raw,\"SalePrice\",subset=30000,na_dict=nas)\nX_train,_ = split_vals(df_trn,20000)\ny_train,_ = split_vals(y_trn,20000)","24e499a1":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train,y_train)\nprint_score(m)","758599c7":"m = RandomForestRegressor(n_jobs=-1,n_estimators=1,max_depth=3,bootstrap=False)\n%time m.fit(X_train,y_train)\nprint_score(m)","0ec76077":"draw_tree(m.estimators_[0],df_trn,precision=3)","98a3498c":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train,y_train)\nprint_score(m)","030e13e7":"preds = np.stack([t.predict(X_valid) for t in m.estimators_])\npreds[:,0],np.mean(preds[:,0]),y_valid[0]","d68941a4":"plt.plot([metrics.r2_score(y_valid, np.mean(preds[:i+1], axis=0)) for i in range(10)])","b0fb18cb":"m = RandomForestRegressor(n_jobs=-1,n_estimators=1)\n%time m.fit(X_train,y_train)\nprint_score(m)","8f94254a":"m = RandomForestRegressor(n_jobs=-1,n_estimators=20)\n%time m.fit(X_train,y_train)\nprint_score(m)","806fb0a4":"m = RandomForestRegressor(n_jobs=-1,n_estimators=80)\n%time m.fit(X_train,y_train)\nprint_score(m)","a430b772":"m = RandomForestRegressor(n_jobs=-1,n_estimators=100,bootstrap=True)\n%time m.fit(X_train,y_train)\nprint_score(m)","abe8ad1d":"m = RandomForestRegressor(n_estimators=80, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","93e606a0":"df_trn,y_trn,nas = proc_df(df_raw,\"SalePrice\")\nX_train,X_valid = split_vals(df_trn,n_train)\ny_train,y_valid = split_vals(y,n_train)","55139057":"set_rf_samples(20000)       ## Subsampling to get nrows from the training set for each tree","7c20601b":"m = RandomForestRegressor(n_estimators= 40 , n_jobs = -1,oob_score=True)\nm.fit(X_train,y_train)\nprint_score(m)","4c615442":"reset_rf_samples()","31881011":"m = RandomForestRegressor(n_estimators= 40 , n_jobs = -1,oob_score=True)\nm.fit(X_train,y_train)\nprint_score(m)","6390b66c":"m = RandomForestRegressor(n_estimators= 40 ,min_samples_leaf=3, n_jobs = -1,oob_score=True)\nm.fit(X_train,y_train)\nprint_score(m)","9a60aae1":"m = RandomForestRegressor(n_estimators= 40 ,min_samples_leaf=3,max_features= 0.5, n_jobs = -1,oob_score=True)\nm.fit(X_train,y_train)\nprint_score(m)","076e2737":"%time preds = np.stack([t.predict(X_valid) for t in m.estimators_])","c21fc48d":"preds[0:5]","80e71c98":"np.mean(preds[:,0]),np.std(preds[:,0])","5da03999":"#### Parallel trees\n\ndef get_preds(t): return t.predict(X_valid)\n%time preds = np.stack(parallel_trees(m,get_preds))\nnp.mean(preds[:,0]),np.std(preds[:,0])","09e8e5ff":"x = raw_valid.copy()\nx.Enclosure.value_counts()","07c9fc98":"x = raw_valid.copy()\nx[\"pred\"] = np.mean(preds,axis = 0)\nx[\"pred_std\"] = np.std(preds,axis = 0)\nx.Enclosure.value_counts().plot.barh()","094985d6":"cols = ['Enclosure', 'SalePrice','pred', 'pred_std' ]\nenc_summ = x[cols].groupby('Enclosure',as_index = False).mean()\nenc_summ","6799ed2d":"enc_summ = enc_summ[~pd.isnull(enc_summ.SalePrice)]\nenc_summ.plot(\"Enclosure\", \"SalePrice\", 'barh',xlim = (0,11))","eb1a94ab":"enc_summ.plot(\"Enclosure\", \"pred\", 'barh',xlim = (0,11),xerr = \"pred_std\" )","bcd911ab":"fi = rf_feat_importance(m,df_trn);fi[:10]","b9b2fef4":"fi.plot('cols','imp',legend = False, figsize= (12,6))","8aaa4f4c":"def plot_fi(fi): return fi.plot('cols','imp','barh',figsize = (12,7))\nplot_fi(fi[:30])","84e0f6f0":"keep_cols = fi[fi.imp > 0.005].cols\nkeep_cols","56ceac2d":"df_keep = df_trn[keep_cols].copy()\nX_train,X_valid = split_vals(df_keep,n_train)","88c7e2d1":"m = RandomForestRegressor(n_estimators= 40 ,min_samples_leaf=3,max_features= 0.5, n_jobs = -1,oob_score=True)\nm.fit(X_train,y_train)\nprint_score(m)","717b076e":"fi = rf_feat_importance(m,df_keep)\nplot_fi(fi[:30])","39e893f1":"df_trn2,y_trn,nas = proc_df(df_raw,\"SalePrice\" , max_n_cat= 7)\nX_train,X_valid = split_vals(df_trn2,n_train)\ny_train,y_valid = split_vals(y_trn,n_train)","4e52c01b":"X_valid.shape,y_valid.shape","53e92ab6":"set_rf_samples(20000)","92702458":"m = RandomForestRegressor(n_estimators= 40 ,min_samples_leaf=3,max_features= 0.5, n_jobs = -1,oob_score=True)\nm.fit(X_train,y_train)\nprint_score(m)","68dfe8af":"display_all(X_train.head())","0bd587bb":"#### Feature importance after one hot encoding\nfi = rf_feat_importance(m,df_trn2)\nfi[:10]","d945ee48":"plot_fi(fi[:25])","3c7a6680":"from scipy.cluster import hierarchy as hc","d3c63d1e":"corr = np.round(scipy.stats.spearmanr(df_keep).correlation,4)\ncorr","4e6399d7":"corr_condensed = hc.distance.squareform(1-corr)\ncorr_condensed","90446491":"z = hc.linkage(corr_condensed,method = \"average\")\nz","a0330977":"fig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z,labels=df_keep.columns,orientation=\"left\",leaf_font_size=16)\nplt.show()","58f1c380":"def get_oob(df):\n    x,_ = split_vals(df,n_train)\n    m = RandomForestRegressor(n_estimators=40,max_features=0.5,min_samples_leaf=3,n_jobs=-1,\n                              oob_score=True)\n    m.fit(x,y_train)\n    return m.oob_score_","f8e5825c":"get_oob(df_keep)","542dab42":"for c in ('saleYear', 'saleElapsed', 'Grouser_Tracks', 'Hydraulics_Flow', 'Coupler_System',\n          'ProductGroupDesc', 'fiProductClassDesc','fiBaseModel', 'fiModelDesc'):\n    print (c,get_oob(df_keep.drop(c,axis = 1)))","514e09bd":"###Simpler model\nto_drop = ['saleYear', 'fiBaseModel', 'Grouser_Tracks']\nget_oob(df_keep.drop(to_drop,axis = 1))","c48033cb":"df_keep.drop(to_drop,axis = 1, inplace=True)\nX_train,X_valid = split_vals(df_keep,n_train)","81f331d2":"reset_rf_samples()","17e7ea8e":"m = RandomForestRegressor(n_estimators=40,max_features=0.5,min_samples_leaf=3,n_jobs=-1,\n                              oob_score=True)\n%time m.fit(X_train,y_train)\nprint_score(m)","64753206":"set_rf_samples(50000)","803be0a2":"df_trn2,y_trn,nas = proc_df(df_raw,\"SalePrice\",max_n_cat=7)\nX_train,X_valid = split_vals(df_trn2,n_train)\nm = RandomForestRegressor(n_estimators=40,max_features=0.5,min_samples_leaf=3,n_jobs=-1,\n                              oob_score=True)\n%time m.fit(X_train,y_train)\nprint_score(m)","5f0f153c":"plot_fi(rf_feat_importance(m,df_trn2)[:10])","e6eac406":"df_trn2.plot('YearMade', 'saleElapsed','scatter',figsize=(10,8),alpha = 0.01)","9b1eb522":"x_all = get_sample(df_trn2[df_trn2[\"YearMade\"] > 1930],500)","29d74761":"x = get_sample(X_train[X_train.YearMade > 1930],500)","121a0294":"from pdpbox import pdp","7945871c":"from plotnine import *","7ca41630":"mod_features = x.columns","f67c1844":"def pdp_plot(feat):\n    p = pdp.pdp_isolate(\n        model=m, dataset=x, model_features=mod_features, feature= feat\n    )\n    return pdp.pdp_plot(p, feat, plot_lines=True, frac_to_plot=100)","9dc39810":"pdp_plot(\"YearMade\")","4b0ba307":"f = ['saleElapsed','YearMade']\np = pdp.pdp_interact(model=m,features=f,dataset=x,model_features=mod_features)\npdp.pdp_interact_plot(pdp_interact_out=p,feature_names=f)","79c57db9":"## More fine tuning with Partial Dependence Plot","24917175":"## Feature importance","308bfe70":"## Bagging","663d2048":"## Train Test Validation split","c451a046":"## Pre-Processing","3ef0ffe0":"## Subsampling to reduce overfitting","bf9b10fb":"## Clustering to remove redundant features","90d6afef":"## Fiddling with other hyperparameters","acf35948":"## Confidence Intervals","104bad09":"## Faster computation","55851ee0":"## One Hot Encoding"}}