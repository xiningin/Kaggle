{"cell_type":{"7a2380cc":"code","a89ad7c8":"code","f3adebd2":"code","44700378":"code","cdaa9f31":"code","2a2bd57c":"code","5e53ff35":"code","29a10689":"code","c5d8f2ef":"code","3e1bbac9":"code","aa85021a":"markdown","f694feee":"markdown"},"source":{"7a2380cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to loadss\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a89ad7c8":"full_train = pd.read_csv(\"\/kaggle\/input\/riiid-test-answer-prediction\/train.csv\",nrows=20000)\nquestions = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv')\nlectures = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/lectures.csv')","f3adebd2":"features = ['row_id', 'timestamp', 'user_id', 'content_id', 'content_type_id',\n       'task_container_id', 'user_answer',\n       'prior_question_elapsed_time']\ntarget = ['answered_correctly']","44700378":"full_train = full_train.dropna()","cdaa9f31":"X = full_train[features]\ny = full_train[target]","2a2bd57c":"X = np.array(X)\ny = np.array(y)","5e53ff35":"import catboost as cb\nimport optuna\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","29a10689":"\n\ndef objective(trial):\n    train_x, valid_x, train_y, valid_y = train_test_split(X,y, test_size=0.3)\n\n    param = {\n        \"objective\": trial.suggest_categorical(\"objective\", [\"Logloss\", \"CrossEntropy\"]),\n        \"colsample_bylevel\": trial.suggest_float(\"colsample_bylevel\", 0.01, 0.1),\n        \"depth\": trial.suggest_int(\"depth\", 1, 12),\n        \"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Ordered\", \"Plain\"]),\n        \"bootstrap_type\": trial.suggest_categorical(\n            \"bootstrap_type\", [\"Bayesian\", \"Bernoulli\", \"MVS\"]\n        ),\n        \"used_ram_limit\": \"3gb\",\n    }\n\n    if param[\"bootstrap_type\"] == \"Bayesian\":\n        param[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n    elif param[\"bootstrap_type\"] == \"Bernoulli\":\n        param[\"subsample\"] = trial.suggest_float(\"subsample\", 0.1, 1)\n\n    gbm = cb.CatBoostClassifier(**param)\n\n    gbm.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], verbose=0, early_stopping_rounds=100)\n\n    preds = gbm.predict(valid_x)\n    pred_labels = np.rint(preds)\n    accuracy = accuracy_score(valid_y, pred_labels)\n    return accuracy","c5d8f2ef":"study = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=50, timeout=600)","3e1bbac9":"print(\"Number of finished trials: {}\".format(len(study.trials)))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","aa85021a":"### You can use these parameters to increase the metric score","f694feee":"## CatBoost HyperParameter Tuning with OPTUNA\n#### (For Beginners)"}}