{"cell_type":{"2965bf98":"code","02e26c8c":"code","48d0ad00":"code","81539807":"code","fff6b297":"code","d3c739f2":"code","63635f02":"code","f5046f8a":"code","e427ab30":"code","1d0f8d60":"code","ce5bde84":"code","5c5bc584":"code","32f8d32a":"code","b662d6b4":"code","e55a8bc4":"code","10c4332f":"code","2af7e018":"code","29ff94b8":"code","510da0d1":"code","bbae0c86":"code","d7b2e22a":"code","3abcc5e0":"code","303744e9":"code","4b63ae4b":"code","7fc09782":"markdown","297662ab":"markdown","623f776e":"markdown","54c71448":"markdown","ff47715e":"markdown","0eee4890":"markdown","9a7eb6ac":"markdown","7968681a":"markdown","b622839f":"markdown"},"source":{"2965bf98":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#visualization libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#model selection and evaluation\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import r2_score\n\n\n# Model libraries\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","02e26c8c":"data = pd.read_csv(\"\/kaggle\/input\/housesalesprediction\/kc_house_data.csv\")\ndata.head()","48d0ad00":"data.info()","81539807":"f, ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data.corr(),annot=True, fmt=\".2f\", linewidths=.5, ax=ax)\nplt.show()","fff6b297":"plt.subplots(figsize=(7, 5))\nsns.countplot(data[\"bedrooms\"])\nplt.show()","d3c739f2":"plt.subplots(figsize=(15, 5))\nsns.countplot(data[\"bathrooms\"])\nplt.show()","63635f02":"sns.countplot(data[\"floors\"])\nplt.show()","f5046f8a":"sns.countplot(data[\"waterfront\"])\nplt.show()","e427ab30":"sns.countplot(data[\"view\"])\nplt.show()","1d0f8d60":"sns.countplot(data[\"condition\"])\nplt.show()","ce5bde84":"plt.subplots(figsize=(15, 5))\nsns.countplot(data[\"grade\"])\nplt.show()","5c5bc584":"fig, ax= plt.subplots(figsize=(27,30), ncols=3, nrows=6)\nsns.scatterplot(x=\"bedrooms\", y=\"price\",data=data, ax=ax[0][0])\nsns.scatterplot(x=\"bathrooms\", y=\"price\",data=data, ax=ax[0][1])\nsns.scatterplot(x=\"sqft_living\", y=\"price\",data=data, ax=ax[0][2])\nsns.scatterplot(x=\"sqft_lot\", y=\"price\",data=data, ax=ax[1][0])\nsns.scatterplot(x=\"floors\", y=\"price\",data=data, ax=ax[1][1])\nsns.scatterplot(x=\"waterfront\", y=\"price\",data=data, ax=ax[1][2])\nsns.scatterplot(x=\"view\", y=\"price\",data=data, ax=ax[2][0])\nsns.scatterplot(x=\"condition\", y=\"price\",data=data, ax=ax[2][1])\nsns.scatterplot(x=\"grade\", y=\"price\",data=data, ax=ax[2][2])\nsns.scatterplot(x=\"sqft_above\", y=\"price\",data=data, ax=ax[3][0])\nsns.scatterplot(x=\"sqft_basement\", y=\"price\",data=data, ax=ax[3][1])\nsns.scatterplot(x=\"yr_built\", y=\"price\",data=data, ax=ax[3][2])\nsns.scatterplot(x=\"yr_renovated\", y=\"price\",data=data, ax=ax[4][0])\nsns.scatterplot(x=\"zipcode\", y=\"price\",data=data, ax=ax[4][1])\nsns.scatterplot(x=\"lat\", y=\"price\",data=data, ax=ax[4][2])\nsns.scatterplot(x=\"long\", y=\"price\",data=data, ax=ax[5][0])\nsns.scatterplot(x=\"sqft_living15\", y=\"price\",data=data, ax=ax[5][1])\nsns.scatterplot(x=\"sqft_lot15\", y=\"price\",data=data, ax=ax[5][2])\nplt.show();","32f8d32a":"model = []\nscore = []\nx_train, x_test, y_train, y_test = train_test_split(data.drop([\"id\",\"date\",\"price\",\"zipcode\"],axis=1),data[\"price\"],test_size=0.2,random_state=42)\nprint(\"X Train Shape\", x_train.shape)\nprint(\"Y Train Shape\", y_train.shape)\nprint(\"X Test Shape\", x_test.shape)\nprint(\"Y Test Shape\", y_test.shape)","b662d6b4":"linear_model = LinearRegression()\nlinear_model.fit(x_train,y_train)\nlinear_model_predict = linear_model.predict(x_test)\nprint(\"Score: \",r2_score(linear_model_predict,y_test))\nmodel.append(\"Multi Linear Regression\")\nscore.append(r2_score(linear_model_predict,y_test))","e55a8bc4":"ridge_model = Ridge()\nridge_model.fit(x_train,y_train)\nridge_model_predict = ridge_model.predict(x_test)\nprint(\"Score: \",r2_score(ridge_model_predict,y_test))\nmodel.append(\"Ridge Regression\")\nscore.append(r2_score(ridge_model_predict,y_test))","10c4332f":"lasso_model = Lasso()\nlasso_model.fit(x_train,y_train)\nlasso_model_predict = lasso_model.predict(x_test)\nprint(\"Score: \",r2_score(lasso_model_predict,y_test))\nmodel.append(\"Lasso Regression\")\nscore.append(r2_score(lasso_model_predict,y_test))","2af7e018":"elasticnet_model = ElasticNet()\nelasticnet_model.fit(x_train,y_train)\nelasticnet_model_predict = elasticnet_model.predict(x_test)\nprint(\"Score: \",r2_score(elasticnet_model_predict,y_test))\nmodel.append(\"Elastic Net Regression\")\nscore.append(r2_score(elasticnet_model_predict,y_test))","29ff94b8":"tree_reg = DecisionTreeRegressor()\ntree_reg.fit(x_train,y_train)\ntree_reg_predict = tree_reg.predict(x_test)\nprint(\"Score: \",r2_score(tree_reg_predict,y_test))\nmodel.append(\"Decision Tree Regression\")\nscore.append(r2_score(tree_reg_predict,y_test))","510da0d1":"reg = RandomForestRegressor(n_estimators=100, random_state = 42)\nreg.fit(x_train,y_train)\nreg_predict = reg.predict(x_test)\nprint(\"Score: \",r2_score(reg_predict,y_test))\nmodel.append(\"Random Forest Regression\")\nscore.append(r2_score(reg_predict,y_test))","bbae0c86":"reg_ada = AdaBoostRegressor(random_state=0, n_estimators=5)\nreg_ada.fit(x_train,y_train)\nreg_ada_predict = reg_ada.predict(x_test)\nprint(\"Score: \",r2_score(reg_ada_predict,y_test))\nmodel.append(\"Ada Boost Regression\")\nscore.append(r2_score(reg_ada_predict,y_test))","d7b2e22a":"reg_gb = GradientBoostingRegressor()\nreg_gb.fit(x_train,y_train)\nreg_gb_predict = reg_gb.predict(x_test)\nprint(\"Score: \",r2_score(reg_gb_predict,y_test))\nmodel.append(\"Gradient Boosting Regression\")\nscore.append(r2_score(reg_gb_predict,y_test))","3abcc5e0":"reg_xgb = XGBRegressor()\nreg_xgb.fit(x_train,y_train)\nreg_xgb_predict = reg_xgb.predict(x_test)\nprint(\"Score: \",r2_score(reg_xgb_predict,y_test))\nmodel.append(\"XGBoost Regression\")\nscore.append(r2_score(reg_xgb_predict,y_test))","303744e9":"plt.subplots(figsize=(15, 5))\nsns.barplot(x=score,y=model,palette = sns.cubehelix_palette(len(score)))\nplt.xlabel(\"Score\")\nplt.ylabel(\"Regression\")\nplt.title('Regression Score')\nplt.show()","4b63ae4b":"#set ids as Id and predict survival \nids = data['id']\npredict = reg_xgb.predict(data.drop([\"id\",\"date\",\"price\",\"zipcode\"],axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'HouseID' : ids, 'Price': predict})\noutput.to_csv('submission.csv', index=False)","7fc09782":"<a id=\"4\"><\/a>\n## Train and Test Split\n\n* I splitted dataset as train and test. Train data is %80 all dataset and test data is %20 all dataset.","297662ab":"**In this above correlation matrix:**\n\nIn general there is positive relationship between price and other features. Just there is negative relationship between three feature and price. ","623f776e":"<a id=\"5\"><\/a>\n## Create and Evaluation Model\n\nI compared regression models in order to find the best model. In this dataset I used to regression model in below:\n\n* Multilinear Regression\n* Ridge Regression\n* Lasso Regression\n* Elastic Net Regression\n* Decision Tree Regression\n* Random Forest Regression\n* Ada Boosting Regression\n* Gradient Boosting Regression\n* XGBoosting Regression","54c71448":"<a id=\"3\"><\/a>\n## Visualization","ff47715e":"<a id=\"1\"><\/a>\n## Libraries\n\nYou can find the libraries that I use.","0eee4890":"# Prediction Price with Machine Learning ! :)\n\nHello everyone ! In this kernel, I predicted house price in King Country. I like predicting price by using regression algorithms. :) I used regularization, regression and boosting algorithms. \n\nEnjoy with Machine Learning !\n\n## CONTENT\n\n[Libararies](#1) <br\/>\n[EDA House Sales in King Country Dataset](#2) <br\/>\n[Visualization](#3) <br\/>\n[Train and Test Split](#4) <br\/>\n[Create and Evaluation Model](#5) <br\/>\n[Conclusion](#6) <br\/>","9a7eb6ac":"In this dataset:\n\n* It has 21613 house information.\n* It has 21 feature.\n* 5 feature(price, bathrooms, floors,lat and long) are float64 type.\n* 15 feature (id, bedrooms, sqft_living, sqft_lot, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, sqft_living15, sqft_lot15) are int64 type.\n* 1 feature (object) is object type.\n* There isn't null all feature.","7968681a":"<a id=\"2\"><\/a>\n## EDA House Sales in King Country Dataset\n\n\nIn this dataset, it is used these feature:\n\n* id: house id             \n* date: date that the house was bought.        \n* price: house price           \n* bedrooms: number of bedroom      \n* bathrooms: number of bathroom\n* sqft_living: Square foot Living\n* sqft_lot: Square foot Lot\n* floors: Number of floor\n* waterfront: waterfront\n* view: Number of view\n* condition: condition\n* grade: grade\n* sqft_above: Square foot above\n* sqft_basement: Square foot basement  \n* yr_built: year that house was built   \n* yr_renovated: year that house was renovated   \n* zipcode: zipcode\n* lat: latitude   \n* long: longitude\n* sqft_living15: Square foot Living in 2015 \n* sqft_lot15: Square foot Lot in 2015\n","b622839f":"<a id=\"6\"><\/a>\n## Conclusion\n\nAccording to result, The best model can set up XGBoost regression algorithm. This algorithm achived 86% successful. Elastic Net,which is regulaziton regression algorithm, aren't convenient to the dataset. I believe that dataset and model could be improved. You may see my prediction in below. :)"}}