{"cell_type":{"ad1f44d4":"code","16b86474":"markdown"},"source":{"ad1f44d4":"'''\nRiiid Competition Submission Ver 1.0.1 Alpha\n(C) Copyright By Author 2020 - Now\nAll rights reserved\n'''\nimport sys\nsys.path.append('\/kaggle\/input\/riiid-dataset\/')\n#\u8def\u5f84\nquestion_metadata_dir = r'\/kaggle\/input\/riiid-dataset\/question_metadata.csv'\nlesson_metadata_dir = r'\/kaggle\/input\/riiid-dataset\/lesson_metadata.csv'\npickle_dir= r'\/kaggle\/input\/riiid-dataset\/stage.pickle'\nmodel_dir = r'\/kaggle\/input\/riiid-dataset\/classifier.model'\n\nimport datetime\nprint(\"{} \u63d0\u4ea4\u542f\u52a8\".format(str(datetime.datetime.now())))\n# \u52a0\u8f7d\u5e93\ntry:\n    import pandas as pd\n    import pickle\n    import trueskill\n    import math\n    import lightgbm as lgb\n    import riiideducation\n    import time\n    from sklearn.metrics import roc_auc_score\n\n\nexcept ImportError as e:\n    print(\"{} \u5bfc\u5165\u9519\u8bef\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{}\".format(str(datetime.datetime.now()), e))\n\nprint(\"{} \u5305\u5bfc\u5165\u5b8c\u6210\".format(str(datetime.datetime.now())))\nenv = trueskill.TrueSkill(mu=0.3, sigma=0.164486, beta=0.05, tau=0.00164, draw_probability=0)\nenv.make_as_global()\n\n\ndef win_probability(team1, team2):\n    '''\n    \u6839\u636e\u4e24\u4e2aTrueSkill\u5bf9\u8c61\uff0c\u8ba1\u7b97\u83b7\u80dc\u6982\u7387\n    :param team1:\u7528\u6237TrueSkill\u5bf9\u8c61\n    :param team2:\u95ee\u9898Trueskill\u5bf9\u8c61\n    :return: \u83b7\u80dc\u6982\u7387\n    '''\n    delta_mu = team1.mu - team2.mu\n    sum_sigma = sum([team1.sigma ** 2, team2.sigma ** 2])\n    size = 2\n    denom = math.sqrt(size * (0.05 * 0.05) + sum_sigma)\n    ts = trueskill.global_env()\n    return ts.cdf(delta_mu \/ denom)\n\n\nclass user:\n    '''\n    \u7528\u6237 \u7c7b\n    '''\n\n    def __init__(self):\n        '''\n        \u521d\u59cb\u5316user\u7c7b\n        :param None\n        :return: None\n        '''\n        # \u76f4\u63a5\u53ef\u8f93\u51fa\u7684\u7279\u5f81\n\n        # \u6570\u91cf\u7c7b\n        self.question_answered_num = 0  # \u7528\u6237\u56de\u7b54\u95ee\u9898\u7684\u603b\u6570\u91cf\n        self.question_answered_num_agg_field = [0] * 7  # \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\n        # \u6b63\u786e\u7387\u7c7b\n        self.question_answered_mean_accuracy = 0  # \u7528\u6237\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u6b63\u786e\u7387\n        self.question_answered_mean_accuracy_agg_field = [0] * 7  # \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u6b63\u786e\u7387\n        self.question_answered_mean_difficulty_weighted_accuracy = 0  # \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u96be\u5ea6\u52a0\u6743\u6b63\u786e\u7387\n        self.question_answered_mean_difficulty_weighted_accuracy_agg_field = [0] * 7  # \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u96be\u5ea6\u52a0\u6743\u6b63\u786e\u7387(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\n        # \u6781\u503c\u7c7b\n        self.max_solved_difficulty = 1  # \u7528\u6237\u89e3\u7b54\u7684\u6700\u96be\u95ee\u9898\n        self.max_solved_difficulty_agg_field = [1] * 7  # \u7528\u6237\u89e3\u7b54\u7684\u6700\u96be\u95ee\u9898(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n        self.min_wrong_difficulty = 0  # \u7528\u6237\u505a\u9519\u7684\u6700\u7b80\u5355\u95ee\u9898\n        self.min_wrong_difficulty_agg_field = [0] * 7  # \u7528\u6237\u505a\u9519\u7684\u6700\u7b80\u5355\u95ee\u9898\n\n        # \u8bfe\u7a0b\u5b66\u4e60\u7c7b\n        self.lessons_overall = 0  # \u7528\u6237\u603b\u5171\u5b66\u4e86\u591a\u5c11\u8bfe\n        self.lessons_overall_agg_field = [0] * 7  # \u7528\u6237\u603b\u5171\u5b66\u4e86\u591a\u5c11\u8bfe\uff08\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1\uff09\n\n        # \u4ea4\u4e92\u65f6\u95f4\u4fe1\u606f\u7c7b\n        self.session_time = 0  # \u7528\u6237\u672cSession\u7684\u5206\u949f\u6570\n        self.since_last_session_time = 0  # \u8ddd\u79bb\u4e0a\u6b21Session\u7684\u5c0f\u65f6\u6570\n\n        # \u9700\u8981\u8fdb\u4e00\u6b65\u5904\u7406\u7684\u7279\u5f81\n        self._mmr_object = trueskill.setup(mu=0.3, sigma=0.164486, beta=0.05, tau=0.00164,\n                                           draw_probability=0).Rating()  # MMR\u6a21\u5757\n        self._mmr_object_agg_field = [trueskill.setup(mu=0.3, sigma=0.164486, beta=0.05, tau=0.00164,\n                                                      draw_probability=0).Rating()] * 7  # MMR\u6a21\u5757\uff08\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1\uff09\n        self._most_liked_guess = [0] * 4  # \u7528\u6237\u505a\u9519\u65f6\u6700\u559c\u6b22\u7684\u9009\u9879\n        self._last_session_start_time = 0  # \u672cSession\u5f00\u59cb\u7684\u65f6\u95f4\n        self._first_action_time = 0  # \u9996\u6b21\u4ea4\u4e92\u7684\u65f6\u95f4\n        self._question_num_dict = {}  # \u7528\u6237\u56de\u7b54\u95ee\u9898\u7684\u8bb0\u5f55\n        self._first_processed_flag = False  # \u662f\u5426\u5904\u7406\u7684\u8868\u793a\n\n    def update_user(self, data: pd.DataFrame):\n        '''\n        \u5904\u7406\u4e00\u5e27\u6d4b\u8bd5\u96c6\n        :param data: pandas DataFrame\n        :return: None\n        '''\n        _temp = None\n\n        # \u5224\u65ad\u7528\u6237\u662f\u5426\u6b63\u5728\u89c2\u770b\u8bfe\u7a0b\n        if data['content_type_id'] == 0:\n            # Content Type \u4e3a 0\uff0c\u5373\u7528\u6237\u6b63\u5728\u56de\u7b54\u95ee\u9898\n\n            # \u5904\u7406\u56de\u7b54\u8ba1\u6570\u90e8\u5206\n            self.question_answered_num = self.question_answered_num + 1\n            question_field = int(data['content_field'])\n            self.question_answered_num_agg_field[question_field - 1] = int(self.question_answered_num_agg_field[\n                                                                               question_field - 1]) + 1\n\n            # \u5904\u7406\u6b63\u786e\u7387\u90e8\u5206\n            if data['answered_correctly'] == 1:\n                self.question_answered_mean_accuracy = \\\n                    (self.question_answered_mean_accuracy * (\n                            self.question_answered_num - 1) + 1) \/ self.question_answered_num\n\n                self.question_answered_mean_accuracy_agg_field[question_field - 1] = \\\n                    (self.question_answered_mean_accuracy_agg_field[question_field - 1] * (\n                            self.question_answered_num_agg_field[question_field - 1] - 1) + 1) \\\n                    \/ self.question_answered_num_agg_field[question_field - 1]\n\n                self.question_answered_mean_difficulty_weighted_accuracy = \\\n                    (self.question_answered_mean_difficulty_weighted_accuracy * (self.question_answered_num - 1) + (\n                            1 - data['mean_question_accuracy']) * 3) \\\n                    \/ self.question_answered_num\n\n                self.question_answered_mean_difficulty_weighted_accuracy_agg_field[question_field - 1] = \\\n                    (self.question_answered_mean_difficulty_weighted_accuracy_agg_field[question_field - 1] * (\n                            self.question_answered_num_agg_field[question_field - 1] - 1) + (\n                             1 - data['mean_question_accuracy']) * 3) \\\n                    \/ self.question_answered_num_agg_field[question_field - 1]\n\n\n            else:\n                self.question_answered_mean_accuracy = \\\n                    (self.question_answered_mean_accuracy * (\n                            self.question_answered_num - 1)) \/ self.question_answered_num\n\n                self.question_answered_mean_accuracy_agg_field[question_field - 1] = \\\n                    (self.question_answered_mean_accuracy_agg_field[question_field - 1] * (\n                            self.question_answered_num_agg_field[question_field - 1] - 1)) \/ \\\n                    self.question_answered_num_agg_field[question_field - 1]\n\n                self.question_answered_mean_difficulty_weighted_accuracy = \\\n                    (self.question_answered_mean_difficulty_weighted_accuracy * (self.question_answered_num - 1)) \\\n                    \/ self.question_answered_num\n\n                self.question_answered_mean_difficulty_weighted_accuracy_agg_field[question_field - 1] = \\\n                    (self.question_answered_mean_difficulty_weighted_accuracy_agg_field[question_field - 1] * (\n                            self.question_answered_num_agg_field[question_field - 1] - 1)) \\\n                    \/ self.question_answered_num_agg_field[question_field - 1]\n\n            # \u5904\u7406\u6700\u5927\/\u6700\u5c0f\u6b63\u786e\u7387\u90e8\u5206\n\n            if data['answered_correctly'] == 1:\n                if data['mean_question_accuracy'] < self.max_solved_difficulty:\n                    self.max_solved_difficulty = data['mean_question_accuracy']\n                if data['mean_question_accuracy'] < self.max_solved_difficulty_agg_field[question_field - 1]:\n                    self.max_solved_difficulty_agg_field[question_field - 1] = data['mean_question_accuracy']\n            else:\n                if data['mean_question_accuracy'] > self.min_wrong_difficulty:\n                    self.min_wrong_difficulty = data['mean_question_accuracy']\n                if data['mean_question_accuracy'] > self.min_wrong_difficulty_agg_field[question_field - 1]:\n                    self.min_wrong_difficulty_agg_field[question_field - 1] = data['mean_question_accuracy']\n\n            # \u5904\u7406\u731c\u6d4b\u90e8\u5206\n            if data['answered_correctly'] == 0:\n                self._most_liked_guess[int(data['user_answer'])] = self._most_liked_guess[\n                                                                       int(data['user_answer'])] + 1\n\n            # \u5904\u7406\u65f6\u95f4\u90e8\u5206\n            if self._first_action_time == 0:\n                self._first_action_time = data['timestamp']\n                self._last_session_start_time = data['timestamp']\n            else:\n                if data['timestamp'] - self._last_session_start_time >= 7200 * 1000:\n                    self.since_last_session_time = (data[\n                                                        'timestamp'] - self._last_session_start_time) \/ 1000 \/ 3600\n                    self._last_session_start_time = data['timestamp']\n                    self.session_time = 0\n                else:\n                    self.session_time = (data['timestamp'] - self._last_session_start_time) \/ 1000 \/ 60\n\n            # \u5904\u7406\u95ee\u9898\u8bb0\u5f55\u90e8\u5206\n            if str(data['content_id']) in self._question_num_dict:\n                self._question_num_dict[str(data['content_id'])] = self._question_num_dict[str(data['content_id'])] + 1\n            else:\n                self._question_num_dict[str(data['content_id'])] = 1\n\n            # \u5904\u7406TrueSkill\u90e8\u5206\n            if data['answered_correctly'] == 1:\n                self._mmr_object, _temp = \\\n                    trueskill.rate_1vs1(self._mmr_object,\n                                        trueskill.setup(mu=1 - data['mean_question_accuracy'], sigma=0.164486,\n                                                        beta=0.05, tau=0.00164, draw_probability=0).Rating())\n                self._mmr_object_agg_field[question_field - 1], _temp = \\\n                    trueskill.rate_1vs1(self._mmr_object_agg_field[question_field - 1],\n                                        trueskill.setup(mu=1 - data['mean_question_accuracy'], sigma=0.164486,\n                                                        beta=0.05,\n                                                        tau=0.00164, draw_probability=0).Rating())\n            else:\n                _temp, self._mmr_object = \\\n                    trueskill.rate_1vs1(trueskill.setup(mu=1 - data['mean_question_accuracy'], sigma=0.164486,\n                                                        beta=0.05, tau=0.00164, draw_probability=0).Rating(),\n                                        self._mmr_object)\n\n                _temp, self._mmr_object_agg_field[question_field - 1] = \\\n                    trueskill.rate_1vs1(trueskill.setup(mu=1 - data['mean_question_accuracy'], sigma=0.164486,\n                                                        beta=0.05,\n                                                        tau=0.00164, draw_probability=0).Rating(),\n                                        self._mmr_object_agg_field[question_field - 1])\n\n\n\n        else:\n            # Content Type \u4e0d\u4e3a 0 \uff0c\u5373\u7528\u6237\u5728\u89c2\u770b\u89c6\u9891\n\n            self.lessons_overall = self.lessons_overall + 1\n            lesson_field = int(data['content_field'])\n            self.lessons_overall_agg_field[lesson_field - 1] = self.lessons_overall_agg_field[lesson_field - 1] + 1\n\n    def process_output(self, data):\n        '''\n        \u6839\u636euser\u73b0\u6709\u5c5e\u6027\u8bbe\u7f6e\u8f93\u51fa\u8bad\u7ec3\u6570\u636e\n        :param data: \u672c\u884c\u6570\u636e\u96c6\n        :return: output_dict \u8bad\u7ec3\u6570\u636e\n        '''\n        output_dict = {}\n\n        # \u56de\u7b54\u6570\u91cf\u7c7b\n        output_dict['question_answered_num'] = self.question_answered_num\n        output_dict['question_answered_num_agg_field'] = self.question_answered_num_agg_field[\n            int(data['content_field']) - 1]\n\n        # \u56de\u7b54\u6b63\u786e\u7387\u7c7b\n        output_dict['question_answered_mean_accuracy'] = self.question_answered_mean_accuracy\n\n        output_dict['question_answered_mean_accuracy_agg_field'] = self.question_answered_mean_accuracy_agg_field[\n            int(data['content_field']) - 1]\n        output_dict[\n            'question_answered_mean_difficulty_weighted_accuracy'] = self.question_answered_mean_difficulty_weighted_accuracy\n        output_dict['question_answered_mean_difficulty_weighted_accuracy_agg_field'] = \\\n            self.question_answered_mean_difficulty_weighted_accuracy_agg_field[int(data['content_field']) - 1]\n\n        # \u6781\u503c\u7c7b\n\n        output_dict['max_solved_difficulty'] = self.max_solved_difficulty\n        output_dict['max_solved_difficulty_agg_field'] = self.max_solved_difficulty_agg_field[\n            int(data['content_field']) - 1]\n        output_dict['min_wrong_difficulty'] = self.min_wrong_difficulty\n        output_dict['min_wrong_difficulty_agg_field'] = self.min_wrong_difficulty_agg_field[\n            int(data['content_field']) - 1]\n\n        # \u8bfe\u7a0b\u5b66\u4e60\u7c7b\n        output_dict['lessons_overall'] = self.lessons_overall\n        output_dict['lessons_overall_agg_field'] = self.lessons_overall_agg_field[int(data['content_field']) - 1]\n        if output_dict['lessons_overall_agg_field'] > 0:\n            output_dict['field_learnt'] = 1\n        else:\n            output_dict['field_learnt'] = 0\n        # \u4ea4\u4e92\u65f6\u95f4\u7c7b\n        output_dict['session_time'] = self.session_time\n        output_dict['time_to_last_session'] = self.since_last_session_time\n\n        output_dict['task_id'] = data['task_container_id']\n        output_dict['prior_time'] = data['prior_question_elapsed_time']\n        # \u95ee\u9898\u4fe1\u606f\u7c7b\n        output_dict['mean_question_accuracy'] = data['mean_question_accuracy']\n        output_dict['std_question_accuracy'] = data['std_accuracy']\n        output_dict['question_id'] = data['content_id']\n        # TrueSkill \u4fe1\u606f\u7c7b\n        output_dict['mmr_overall'] = self._mmr_object.mu\n        output_dict['mmr_overall_agg_field'] = self._mmr_object_agg_field[int(data['content_field']) - 1].mu\n        output_dict['mmr_confidence'] = self._mmr_object.sigma\n\n        output_dict['mmr_overall_agg_field'] = self._mmr_object_agg_field[int(data['content_field']) - 1].sigma\n        output_dict['mmr_win_prob'] = win_probability(self._mmr_object,\n                                                      trueskill.setup(mu=1 - data['mean_question_accuracy'],\n                                                                      sigma=0.164486,\n                                                                      beta=0.05, tau=0.00164,\n                                                                      draw_probability=0).Rating())\n        output_dict['mmr_win_prob_agg_field'] = win_probability(\n            self._mmr_object_agg_field[int(data['content_field']) - 1],\n            trueskill.setup(mu=1 - data['mean_question_accuracy'], sigma=0.164486, beta=0.05,\n                            tau=0.00164, draw_probability=0).Rating())\n        output_dict['user_id'] = data['user_id']\n        output_dict['tag_1'] = data['tag_1']\n        output_dict['tag_2'] = data['tag_2']\n\n        output_dict['tags_encoded'] = data['tags_encoded']\n        # \u7279\u6b8a\u7279\u5f81\u7c7b\n\n        if not pd.isna(['prior_question_had_explanation']):\n            output_dict['previous_explained'] = data['prior_question_had_explanation']\n        else:\n            output_dict['previous_explained'] = False\n\n        if str(data['content_id']) in self._question_num_dict:\n            output_dict['question_seen'] = 1\n        else:\n            output_dict['question_seen'] = 0\n\n        # \u731c\u6d4b\u7c7b\n        max_choice = 0\n        max_choice_num = 0\n        i = 0\n        for item in self._most_liked_guess:\n            if item > max_choice_num:\n                max_choice_num = item\n                max_choice = i\n            i = i + 1\n\n        if output_dict['mmr_win_prob'] <= 0.4:\n            if max_choice == data['correct_answer']:\n                output_dict['most_liked_guess_correct'] = True\n            else:\n                output_dict['most_liked_guess_correct'] = False\n        else:\n            output_dict['most_liked_guess_correct'] = True\n\n        # \u8bad\u7ec3\u76ee\u6807\n        #output_dict['answered_correctly'] = data['answered_correctly']\n\n        return output_dict\n\n# \u5bfc\u5165Metadata\nquestion_metadata = pd.read_csv(question_metadata_dir)\nlesson_metadata = pd.read_csv(lesson_metadata_dir)\nprint(\"{} Metadata \u6587\u4ef6\u5bfc\u5165\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\n#\u8bbe\u7f6eMetadata\u7d22\u5f15\nquestion_metadata = question_metadata.set_index(keys=['content_id'])\nlesson_metadata = lesson_metadata.set_index(keys=['content_id'])\nprint(\"{} Metadata \u7d22\u5f15\u8bbe\u7f6e\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\n#\u5bfc\u5165Pickle\u72b6\u6001\nwith open(pickle_dir, 'rb') as fo:\n    user_pickle = pickle.load(fo)\n\nprint(\"{} Pickle \u5bfc\u5165\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\n#\u91cd\u7f6eTrueskill\u72b6\u6001\nfor user_id,user_info in user_pickle.items():\n    user_pickle[user_id]._mmr_object = trueskill.setup(mu=user_pickle[user_id]._mmr_object[0],\n                                                       sigma=user_pickle[user_id]._mmr_object[1],\n                                                       beta=0.05, tau=0.00164,\n                                                       draw_probability=0).Rating()\n    for i in range(0, 7):\n        # 1+1\n        user_pickle[user_id]._mmr_object_agg_field[i] =  trueskill.setup(mu=user_pickle[user_id]._mmr_object_agg_field[i][0],\n                                                       sigma=user_pickle[user_id]._mmr_object_agg_field[i][1],\n                                                       beta=0.05, tau=0.00164,\n                                                       draw_probability=0).Rating()\n\nprint(\"{} Pickle Trueskill\u72b6\u6001\u91cd\u7f6e\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\n#\u5bfc\u5165\u6a21\u578b\nmodel = lgb.Booster(model_file=model_dir)\nprint(\"{} \u6a21\u578b\u5bfc\u5165\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\n#\u521d\u59cb\u5316\u73af\u5883\nenv = riiideducation.make_env()\niter_test = env.iter_test()\nprint(\"{} \u6bd4\u8d5b\u73af\u5883\u8bbe\u7f6e\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\n#\u521d\u59cb\u6362\u53d8\u91cf\nrows_accum = 0 #\u884c\u8ba1\u6570\u5668\nfirst_submission = True #\u662f\u5426\u7b2c\u4e00\u7ec4\u6807\u8bb0\nmodel_prd = [0]\ntrue_value = []\nlast_df = pd.DataFrame()\nprint(\"{} \u6bd4\u8d5b\u53d8\u91cf\u8bbe\u7f6e\u5b8c\u6210\".format(str(datetime.datetime.now())))\n\nfor (test_df, sample_prediction_df) in iter_test:\n    if first_submission == False:\n        last_df['answered_correctly'] = eval(test_df.iloc[0]['prior_group_answers_correct'])\n        last_df['user_answer'] = eval(test_df.iloc[0]['prior_group_responses'])\n        true_value.extend(eval(test_df.iloc[0]['prior_group_answers_correct']))\n        for index,row in last_df.iterrows():\n            user_pickle[row['user_id']].update_user(row)\n    rows_accum = rows_accum + test_df.shape[0]\n    if first_submission == False:\n        1+1\n        #print(\"{} \u5f53\u524d\u6b63\u5728\u5904\u7406\u7b2c {} \u884c , \u622a\u81f3\u76ee\u524dAUC\u4e3a {}\".format(str(datetime.datetime.now()),rows_accum,roc_auc_score(true_value,model_prd)))\n    test_df['answered_correctly'] = 0.6524\n    st = float(time.time())\n    # \u5b8c\u6210Merge \u4e0e Concat \u5de5\u4f5c\n    try:\n        sub_1 = test_df[test_df['content_type_id'] == False]\n        sub_2 = test_df[test_df['content_type_id'] == True]\n        del test_df\n        sub_1 = sub_1.merge(question_metadata, on=\"content_id\", how=\"left\")\n        sub_2 = sub_2.merge(lesson_metadata, on=\"content_id\", how=\"left\")\n        test_df = pd.DataFrame()\n        test_df = pd.concat([sub_1,sub_2])\n    except Exception:\n        pass\n\n    for index, row in test_df.iterrows():\n        try:\n            if row['user_id'] not in user_pickle:\n                user_pickle[row['user_id']] = user()\n            if row['content_type_id'] == 0:\n                predict_dict = user_pickle[row['user_id']].process_output(row)\n                l = []\n                for i,v in predict_dict.items():\n                    l.append(v)\n                prd_value = float(model.predict([l])[0])\n                test_df.loc[test_df.row_id == row.row_id, 'answered_correctly'] = prd_value\n                model_prd.append(prd_value)\n\n\n        except Exception as e:\n            print(e)\n            pass\n\n    time_taken = float(time.time()) - st\n    print(\"{} \u57fa\u4e8e\u5f53\u524d\u901f\u7387\uff0c\u5171\u9700\u8981 {} \u5206\u949f\u5b8c\u6210\u9884\u6d4b\".format(\n        str(datetime.datetime.now()),int(time_taken \/ test_df.shape[0] * 2500000 \/ 60)))\n    if first_submission == True:\n        first_submission = False\n    last_df = test_df\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])\n","16b86474":"# **\u672cNotebook\u4ec5\u7528\u4e8e\u63d0\u4ea4LB\uff0criiid_dataset \u5305\u542b\u4e86\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u548c\u72b6\u6001\uff0c\u672cNotebook\u4e0d\u5305\u542b\u8bad\u7ec3\u8fc7\u7a0b\uff01**\n\n\n* **\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u53c2\u52a0Kaggle\u7684\u7ade\u8d5b\uff0c\u76ee\u524d\u6211\u5728\u67d0\u975e985\u9662\u6821\u5927\u4e00\uff08\u521a\u5165\u68213\u4e2a\u6708\uff09\u8bfb\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\uff0c\u4e4b\u524d\u5728\u9ad8\u4e2d\u4e5f\u672a\u53c2\u52a0\u8fc7\u4efb\u4f55\u7ade\u8d5b\u3002\u5927\u90e8\u5206Python \u548c \u662f\u62bd\u7a7a\u5728\u7f51\u4e0a\u5b66\u7684\u3002\u6545\u4ee3\u7801\u98ce\u683c\/\u6a21\u578b\u63cf\u8ff0\u5341\u5206\u6df7\u4e71\uff0c\u8fd8\u8bf7\u591a\u591a\u591a\u5305\u6db5\u3002\u82e5\u60a8\u6709\u4efb\u4f55\u5efa\u8bae\u6216\u7591\u95ee\uff0c\u6b22\u8fce\u60a8\u5728\u4e0b\u65b9\u8bc4\u8bba\u533a\u6307\u51fa\u3002**\n\n* \u672cNotebook\u4ec5\u7528\u4e8e\u63d0\u4ea4\uff0c\u8bad\u7ec3Notebook\u4ee3\u7801\u7531\u4e8e\u592a\u4e71\uff0c\u9700\u8981\u6574\u7406\uff0c\u82e5\u8fd1\u671f\u6709\u7a7a\uff0c\u6211\u53ef\u80fd\u4f1a\u4e0a\u4f20\u3002\n\n\n* **\u5173\u4e8eriiid-dataset \u6570\u636e\u96c6\u7684\u8bf4\u660e**\n\n\n1. \u6a21\u578b\uff08classifier.model\uff09\n\nclassifier.model \u4e3aLightGBM \u672a\u7ecf\u53c2\u6570\u4f18\u5316\u6240\u8bad\u7ec3\u5f97\u7684\u6a21\u578b\uff0c\u6240\u6709\u53c2\u6570\u5747\u4e3aLightGBM\u9ed8\u8ba4(\u968f\u673a\u79cd\u5b50\u4e3a2020)\uff0c\u4e14\u4ec5\u5728\u524d20M\u884c\u6570\u636e\u4e0a\u8bad\u7ec3\u3002\n\u82e5\u7ecf\u8fc7\u53c2\u6570\u4f18\u5316\/\u5728\u6574\u4e2a\u6570\u636e\u96c6\u8bad\u7ec3\uff0c\u672c\u6a21\u578b\u53ef\u80fd\u5c1a\u6709\u63d0\u9ad8\u7a7a\u95f4\u3002\n\n2. Stage.Pickle\n\n\u9274\u4e8e\u7279\u5f81\u5de5\u7a0b\u662f\u904d\u5386DataFrame\u5f97\u5230\u7684\uff0c\u800c\u8fd9\u4e00\u8fc7\u7a0b\u8017\u65f6\u8f83\u957f\uff0c\u4e3a\u52a0\u5febNotebook\u8fd0\u884c\u901f\u5ea6\uff0c\u6211\u4eec\u5c06\u904d\u5386\u5b8c\u6210\u540e\u7684\u6700\u7ec8\u72b6\u6001\u4fdd\u5b58\u5728Pickle\u6587\u4ef6\u4e2d\u3002\n\n3. Lesson_Metadata \u4e0e Question_Metadata\n\n\u5728Lesson_Metadata \u4e0e Question_Metadata \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u4fdd\u5b58\u4e86\u9884\u5148\u8ba1\u7b97\u7684\u548c\u8bd5\u9898\u6709\u5173\u7684\u7279\u5f81\uff08Tag\uff0c\u5e73\u5747\u6b63\u786e\u7387\u7b49\uff09\u53ca\u548c\u8bfe\u7a0b\u6709\u5173\u7684\u7279\u5f81\uff08Tag\uff09\u3002\n\n\n* **\u7279\u5f81\u8bf4\u660e**\n\nquestion_answered_num \u7528\u6237\u56de\u7b54\u95ee\u9898\u7684\u603b\u6570\u91cf\n\nquestion_answered_num_agg_field \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nquestion_answered_mean_accuracy \u7528\u6237\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u6b63\u786e\u7387\n\nquestion_answered_mean_accuracy_agg_field \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u6b63\u786e\u7387 (\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nquestion_answered_mean_difficulty_weighted_accuracy = 0  \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u96be\u5ea6\u52a0\u6743\u6b63\u786e\u7387\n\nquestion_answered_mean_difficulty_weighted_accuracy_agg_field \u7528\u6237\u603b\u56de\u7b54\u7684\u95ee\u9898\u7684\u5e73\u5747\u96be\u5ea6\u52a0\u6743\u6b63\u786e\u7387(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nmax_solved_difficulty \u7528\u6237\u89e3\u7b54\u7684\u6700\u96be\u95ee\u9898\n\nmax_solved_difficulty_agg_field  \u7528\u6237\u89e3\u7b54\u7684\u6700\u96be\u95ee\u9898(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nmin_wrong_difficulty = 0   \u7528\u6237\u505a\u9519\u7684\u6700\u7b80\u5355\u95ee\u9898\n\nmin_wrong_difficulty_agg_field \u7528\u6237\u505a\u9519\u7684\u6700\u7b80\u5355\u95ee\u9898(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nlessons_overall \u7528\u6237\u603b\u5171\u5b66\u4e86\u591a\u5c11\u8bfe\n\nlessons_overall_agg_field \u7528\u6237\u603b\u5171\u5b66\u4e86\u591a\u5c11\u8bfe\uff08\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1\uff09\n\nsession_time \u7528\u6237\u672cSession\u7684\u5206\u949f\u6570 \n\nsince_last_session_time  \u8ddd\u79bb\u4e0a\u6b21Session\u7684\u5c0f\u65f6\u6570\n\nuser_id \u7528\u6237ID \n\ntag_1 \u95ee\u9898\u7684Tag1\u6807\u7b7e\n\ntag_2 \u95ee\u9898\u7684Tag1\u6807\u7b7e\n\ntag_encoded \u57fa\u4e8eTag1\uff0c2\uff0c3\u521b\u5efa\u7684\u7f16\u7801\n\nquestion_id \u95ee\u9898\u7684content_id\n\nprevious_explained \u4e4b\u524d\u95ee\u9898\u662f\u5426\u5f97\u5230\u89e3\u7b54\n\nquestion_seen \u7528\u6237\u662f\u5426\u66fe\u7ecf\u89c1\u5230\u8fc7\u8fd9\u4e00\u95ee\u9898\n\nmean_question_accuracy \u8be5\u9898\u7684\u4e2d\u4f4d\u6b63\u786e\u7387\n\nstd_question_accuracy \u8be5\u9898\u6b63\u786e\u7387\u7684\u6807\u51c6\u5dee\n\nmost_liked_guess_correct \u5047\u8bbe\u4f60\u5728\u8003\u8bd5\u4e2d\u67d0\u9053\u9009\u62e9\u9898\u4e0d\u4f1a\u505a\uff0c\u90a3\u4e48\u4f60\u5927\u6982\u7387\u4f1a\u731c\u4e2aC\uff08\u6211\u4e60\u60ef\u731c\u9009\u9879\u8f83\u957f\u7684\u90a3\u4e00\u4e2a\uff09\u4e4b\u7c7b\u7684\u3002\u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u5728\u6bcf\u4e00\u6b21\u7528\u6237\u505a\u9519\u65f6\u8bb0\u5f55\u5176\u6700\u559c\u6b22\u9009\u7684\u9009\u9879\u3002\u4e4b\u540e\uff0c\u82e5\u4e0b\u9762\u63d0\u5230\u7684Trueskill\u6a21\u578b\u8ba4\u4e3a\u7528\u6237\u8be5\u9898\u505a\u5bf9\u7684\u6982\u7387\u8f83\u5c0f\uff0c\u6211\u4eec\u4fbf\u5c06\u7528\u6237\u6700\u559c\u6b22\u7684\u9009\u9879\u4e0e\u8be5\u9898\u9009\u9879\u505a\u5bf9\u6bd4\uff0c\u770b\u770b\u6539\u4e3a\u7528\u6237\u731c\u7684\u5bf9\u4e0d\u5bf9\u3002\n\n\n\n*\u5176\u4f59\u7279\u5f81\u4e0eTrueskill\u8bc4\u5206\u7cfb\u7edf\u6709\u5173*\n\nTrueskill \u662f\u7531\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u5957\u8bc4\u5206\u7cfb\u7edf\uff08https:\/\/www.microsoft.com\/en-us\/research\/project\/trueskill-ranking-system\/\uff09\n\n\u82e5\u4f60\u73a9\u8fc7\u5f69\u516d\uff0c\u4f60\u6216\u8bb8\u63a5\u89e6\u8fc7\u8fd9\u5957\u7cfb\u7edf\uff0c\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4f60\u7684\u6392\u4f4d\u5c31\u662f\u7531Trueskill\u7cfb\u7edf\u51b3\u5b9a\u7684\u3002\n\n\u4e0d\u59a8\u5c06\u6bcf\u4e00\u4e2aQuestion\u4f5c\u4e3a\u4e00\u4e2a\u5df2\u7ecf\u786e\u5b9a\u80fd\u529b\u7684\u7528\u6237\uff08\u8001\u73a9\u5bb6\uff09\uff0c\u800cUser\u4f5c\u4e3a\u521a\u5f00\u59cb\u73a9\u7684\u65b0\u624b\uff0c\u4e4b\u540e\uff0c\u5c31\u53ef\u7528Trueskill\u7cfb\u7edf\u6765\u51b3\u5b9a\u5176\u6392\u4f4d\u53ca\u5176\u83b7\u80dc\u6982\u7387\u3002\n\n*\u6ce8 \u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u591f\u5957\u7528Trueskill\u7cfb\u7edf\uff0c\u662f\u7531\u4e8e\u95ee\u9898\u96be\u5ea6\u7684\u5206\u5e03\u8fd1\u4f3c\u4e8e\u6b63\u6001\u5206\u5e03\uff08\u4ee5\uff081-\u7528\u6237\u6574\u4f53\u7684\u4e2d\u4f4d\u6b63\u786e\u7387\uff09\u51b3\u5b9a\uff09\u3002\n\n\nmmr_overall \u7528\u6237\u7684MMR\u5206\u6570\n\nmmr_overall_agg_field \u7528\u6237\u7684MMR\u5206\u6570(\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nmmr_confidence \u7528\u6237\u7684MMR\u7f6e\u4fe1\u5ea6\n\nmmr_overall_agg_field \u7528\u6237\u7684MMR\u7f6e\u4fe1\u5ea6 (\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\nmmr_win_prob \u7528\u6237'\u6218\u80dc\u2019\u8be5\u9898\u7684\u6982\u7387\n\nmmr_win_prob_agg_field  \u7528\u6237'\u6218\u80dc\u2019\u8be5\u9898\u7684\u6982\u7387 (\u6309TOEIC\u5b66\u79d1\u9886\u57df\u7edf\u8ba1)\n\n\n\n\n\n\n* **\u7248\u6743\u58f0\u660e**\n\nTrueskill(TM) \u662f\u5fae\u8f6f\u516c\u53f8\u7684\u6ce8\u518c\u5546\u6807\u3002\n\ntruskill \u5e93 \u662f\u7531Heungsub Lee\u521b\u4f5c\u7684\uff0c\u57fa\u4e8eBSD\u5f00\u6e90\u7684\u9879\u76ee\uff0c\u9879\u76ee\u5730\u5740\uff1ahttps:\/\/trueskill.org\/"}}