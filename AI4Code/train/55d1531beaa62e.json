{"cell_type":{"62fd7137":"code","03604d82":"code","fd28f174":"code","ba68f906":"code","54b9405a":"code","970e5585":"code","bdb338f2":"code","c3ddcd4f":"code","463e2b44":"code","cec55794":"code","e19a218f":"code","01352343":"code","2bf66c01":"code","e6011317":"markdown","224ef4cc":"markdown"},"source":{"62fd7137":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","03604d82":"dataset = pd.read_csv(\"..\/input\/data.csv\",header = 0)\ndataset.head()","fd28f174":"\nX= dataset.iloc[:,2:32].values\nY = dataset.iloc[:,1].values","ba68f906":"X","54b9405a":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nle = LabelEncoder()\nY = le.fit_transform(Y)\n","970e5585":"print(X.shape)\n\n","bdb338f2":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","c3ddcd4f":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)","463e2b44":"import keras\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout","cec55794":"    classifier = Sequential()\n    classifier.add(Dense(units = 16,input_dim = 30, kernel_initializer = 'uniform', activation = 'relu'))\n    ##classifier.add(Dropout(p=0.1))\n    classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\n    ##classifier.add(Dropout(p=0.1))\n    classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\n    ##classifier.add(Dropout(p=0.1))\n    classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\n    ##classifier.add(Dropout(p=0.1))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n","e19a218f":"classifier.compile(optimizer = 'adam' ,loss  = 'binary_crossentropy' ,metrics = ['accuracy'])","01352343":"classifier.fit(x_train, y_train, batch_size = 30, epochs = 100)","2bf66c01":"y_pred = classifier.predict(x_test)\ny_pred = y_pred > 0.5\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix (y_pred, y_test)","e6011317":"Conclusion -\n\n96% accuracy","224ef4cc":"# Using the Wisconsin breast cancer diagnostic data set for predictive analysis\n## Priya Theru\n\nANN"}}