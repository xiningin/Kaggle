{"cell_type":{"b7df6dda":"code","fefc9811":"code","598da5b0":"code","d65704fc":"code","f9c4267b":"code","65eb2cea":"code","eda21158":"code","e0c80c47":"code","5a94e1ad":"code","6817f6bf":"code","11b7e8bc":"code","34ff7271":"code","9b42194b":"code","e1c436b8":"code","913372db":"code","e47bf12a":"code","9688a5bf":"code","d12cb543":"code","3d73794a":"code","696327fd":"code","005b0337":"code","d41535bb":"code","1ab46e85":"code","ca1abc2f":"code","07db947b":"code","aed96000":"code","6301c78b":"code","ee0b55d2":"code","2a2e2ffc":"code","15d2ddab":"code","df6e543a":"code","37b47be0":"code","ce66cacd":"code","33bb6e7c":"code","b6b5ebd5":"code","d70fbcfb":"code","e0a162c2":"code","5c3c7cd4":"code","c47dfa61":"markdown","a682b33f":"markdown","5839152d":"markdown","521b773d":"markdown","dd2fc23d":"markdown","963579af":"markdown","914887da":"markdown","c38a6cb1":"markdown","c8b38ddf":"markdown","32641088":"markdown","7e5c1dc2":"markdown","f8dd7eb9":"markdown","7f798658":"markdown","7e665ff8":"markdown","622741b6":"markdown","fbfc6002":"markdown","ed8490c9":"markdown","972834f9":"markdown","81acbadb":"markdown","0f86fda1":"markdown","6c77c6b0":"markdown","42e4bf14":"markdown","09afa774":"markdown","fb954a22":"markdown","db5c2d2a":"markdown"},"source":{"b7df6dda":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom pandas import Series, DataFrame\nfrom pylab import rcParams\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics \nfrom sklearn.metrics import classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix","fefc9811":"%matplotlib inline\nrcParams['figure.figsize'] = 10, 8\nsns.set_style('whitegrid')","598da5b0":"titanic_train = pd.read_csv('..\/input\/titanic-dataset\/train.csv')\ntitanic_train.columns = ['PassengerId','Survived','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked']\ntitanic_test = pd.read_csv('..\/input\/titanic-dataset\/test.csv')\ntitanic = titanic_train.append(titanic_test, ignore_index=True)\n\ntitanic.head()","d65704fc":"sns.countplot(x='Survived',data=titanic, palette='hls')","f9c4267b":"titanic.isnull().sum()","65eb2cea":"titanic.info()","eda21158":"titanic.describe()","e0c80c47":"titanic[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","5a94e1ad":"titanic[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6817f6bf":"titanic_data = titanic.drop(['PassengerId','Name','Ticket','Cabin'], 1)\ntitanic_data.head()","11b7e8bc":"sns.boxplot(x='Pclass', y='Age', data=titanic_data, palette='hls')","34ff7271":"titanic_data.head()","9b42194b":"def age_approx(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","e1c436b8":"titanic_data['Age'] = titanic_data[['Age', 'Pclass']].apply(age_approx, axis=1)\ntitanic_data.isnull().sum()","913372db":"titanic_data.dropna(inplace=True)\ntitanic_data.isnull().sum()","e47bf12a":"titanic_data['Family_Size'] = titanic_data['SibSp'] + titanic_data['Parch'] + 1\n\ntitanic_data[['Family_Size', 'Survived']].groupby(['Family_Size'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9688a5bf":"titanic_data['IsAlone'] = 0\ntitanic_data.loc[titanic_data['Family_Size'] == 1, 'IsAlone'] = 1\ntitanic_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","d12cb543":"titanic_data = titanic_data.drop(['Parch', 'SibSp', 'Family_Size'], axis=1)","3d73794a":"titanic_data.head()","696327fd":"gender = pd.get_dummies(titanic_data['Sex'],drop_first=True)\ngender.head()","005b0337":"embark_location = pd.get_dummies(titanic_data['Embarked'],drop_first=True)\nembark_location.head()","d41535bb":"titanic_data.head()","1ab46e85":"titanic_data.drop(['Sex', 'Embarked'],axis=1,inplace=True)\ntitanic_data.head()","ca1abc2f":"titanic_dmy = pd.concat([titanic_data,gender,embark_location],axis=1)\ntitanic_dmy.head()","07db947b":"sns.heatmap(titanic_dmy.corr())  ","aed96000":"#Fare and Pclass are dependent of each other.\ntitanic_dmy.drop(['Fare', 'Pclass'],axis=1,inplace=True)\ntitanic_dmy.head()","6301c78b":"titanic_dmy.info()","ee0b55d2":"X = titanic_dmy.iloc[:,1:].values\ny = titanic_dmy.iloc[:,0].values","2a2e2ffc":"X","15d2ddab":"y","df6e543a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.25, random_state=25)","37b47be0":"LogReg = LogisticRegression()\nLogReg.fit(X_train, y_train)\ny_pred = LogReg.predict(X_test)\n\nLogReg_confusion_matrix = confusion_matrix(y_test, y_pred)\nLogReg_confusion_matrix\n\nprint(classification_report(y_test, y_pred))","ce66cacd":"# instantiate the model\ngnb = GaussianNB()\n# fit the model\nfit2=gnb.fit(X_train, y_train)\ny_pred = fit2.predict(X_test)\n\ngnb_conf = confusion_matrix(y_test, y_pred)\nprint(gnb_conf)\n\nprint(classification_report(y_test, y_pred))","33bb6e7c":"# instantiate the model\nsvm = SVC()\n# fit the model\nsvm.fit(X_train, y_train)\n\nsvm_conf = confusion_matrix(y_test, y_pred)\nprint(svm_conf)\nprint(classification_report(y_test, y_pred))","b6b5ebd5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.30, random_state=25)","d70fbcfb":"LogReg = LogisticRegression()\nLogReg.fit(X_train, y_train)\ny_pred = LogReg.predict(X_test)\n\nLogReg_confusion_matrix = confusion_matrix(y_test, y_pred)\nLogReg_confusion_matrix\n\nprint(classification_report(y_test, y_pred))","e0a162c2":"# instantiate the model\ngnb = GaussianNB()\n# fit the model\nfit2=gnb.fit(X_train, y_train)\ny_pred = fit2.predict(X_test)\n\ngnb_conf = confusion_matrix(y_test, y_pred)\nprint(gnb_conf)\n\nprint(classification_report(y_test, y_pred))","5c3c7cd4":"# instantiate the model\nsvm = SVC()\n# fit the model\nsvm.fit(X_train, y_train)\n\nsvm_conf = confusion_matrix(y_test, y_pred)\nprint(svm_conf)\nprint(classification_report(y_test, y_pred))","c47dfa61":"### Taking care of missing values\n##### Dropping missing values\nDrop all the variables that aren't relevant for predicting survival. We should at least keep the following:\n- Survived - This variable is obviously relevant.\n- Pclass - Does a passenger's class on the boat affect their survivability?\n- Sex - Could a passenger's gender impact their survival rate?\n- Age - Does a person's age impact their survival rate?\n- SibSp - Does the number of relatives on the boat (that are siblings or a spouse) affect a person survivability? Probability\n- Parch - Does the number of relatives on the boat (that are children or parents) affect a person survivability? Probability\n- Fare - Does the fare a person paid effect his survivability? Maybe \n- Embarked - Does a person's point of embarkation matter? It depends on how the boat was filled","a682b33f":"### Checking that your target variable is binary\nThe target is going to be \"Survived\" variable from the titanic dataframe. To make sure that it's a binary variable by using Seaborn's countplot() function.","5839152d":"##### First experiment with test size 25%","521b773d":"### 1-Logistic Regression","dd2fc23d":"## Deploying and evaluating the model using two experiments","963579af":"### Converting categorical variables to a dummy indicators","914887da":"### 1-Logistic Regression","c38a6cb1":"records are there in the data frame","c8b38ddf":"Younger a passenger is, the more likely it is for them to be in 3rd class. The older a passenger is, the more likely it is for them to be in 1st class. So there is a loose relationship between these variables. Write a function that approximates a passengers age, based on their class. From the box plot, it looks like the average age of 1st class passengers is about 37, 2nd class passengers is 29, and 3rd class pasengers is 24.","32641088":"### Checking for independence between features","7e5c1dc2":"# Data analysis of titanic dataset","f8dd7eb9":"### 3-Support Vector Machine","7f798658":"### 2-Gaussian Naive Bayes","7e665ff8":"There are 4 null values in the embarked variable. We can drop those 4 records without loosing too much important information from our dataset, so we will do that.","622741b6":"### Checking for missing values","fbfc6002":"### 3-Support Vector Machine","ed8490c9":"### 2-Gaussian Naive Bayes","972834f9":"#### Imputing missing values\nhow passenger age is related to their class as a passenger on the boat.","81acbadb":"### reading dataset","0f86fda1":"### Combine both train and test dataset in one large dataset.  And splitting the data with 25% for the test set all the 3 models achieve accuracy score with:77% . \n\n### On the other hand, splitting the data with the test size with 30% the accuracy was: 76%","6c77c6b0":"#### 1-Change train and test size to improve the accuracy and achieve better results for all 3 models \n#### 2- Apply analysis on both train and test dataset","42e4bf14":"Just a quick fyi (we will examine these variables more closely in a minute):\n\n##### VARIABLE DESCRIPTIONS\n\nSurvived - Survival (0 = No; 1 = Yes)<br>\nPclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)<br>\nName - Name<br>\nSex - Sex<br>\nAge - Age<br>\nSibSp - Number of Siblings\/Spouses Aboard<br>\nParch - Number of Parents\/Children Aboard<br>\nTicket - Ticket Number<br>\nFare - Passenger Fare (British pound)<br>\nCabin - Cabin<br>\nEmbarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","09afa774":"### Checking dataset size\nThere are 6 predictive features that remain. The rule of thumb is 50 records per feature, so we need to have at least 300 records in this dataset.","fb954a22":"Apply the function and check again for null values.","db5c2d2a":"##### Second experiment with test size 30%"}}