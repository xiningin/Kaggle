{"cell_type":{"a9c0a6ae":"code","5060f6ea":"code","45be268e":"code","9ce9125b":"code","d5379e2f":"code","258603d2":"code","91af03ce":"code","79af911d":"code","8208ce8e":"code","0c89cd11":"code","6af78e25":"code","a8bb16d5":"code","de11cf66":"code","de3bcf51":"code","ed1e7c51":"code","a966f209":"code","640134a5":"code","2c510a61":"code","f83e51b0":"code","27462753":"code","8125265f":"code","1109997f":"code","a2885c87":"code","e50c6d56":"code","c524b16f":"code","2ec339ea":"code","b72f5a2c":"code","3520987b":"code","8bd375b1":"code","e99d4ee2":"code","8042bbcb":"code","cd00c393":"code","0487df1e":"code","d64c61bd":"code","6132f59a":"code","d5b5806d":"code","5355132a":"code","a10f7b52":"code","14ef4c8f":"code","9c040f80":"code","589b4846":"code","f632759a":"code","49507234":"code","f48384c2":"code","bf48d8d1":"code","ebba7a97":"code","c2f46eb9":"code","40f2c2ac":"code","6b252997":"code","dc91234b":"code","e60d2f71":"code","bd7126f0":"code","529bd7aa":"code","571615ee":"code","98532232":"code","058c77fa":"code","7546ae05":"code","53dc9871":"code","a9a5fba2":"code","36bd8e4d":"code","095cd1d1":"code","ac00a21e":"code","10e15265":"code","55b6de66":"code","1ce4b7aa":"code","abae915b":"code","e85d9795":"code","cd895ba3":"code","203306b7":"code","90a6bb72":"code","a51840b6":"code","6f93bff5":"code","11154ef0":"code","c71e033f":"code","b85e2105":"code","b83dbb7b":"code","f735595d":"code","f8bb928f":"code","fcd9605c":"code","2b1a2bfc":"code","9d03852e":"code","b520c17b":"code","72033066":"code","1bf051b1":"code","f321dc87":"markdown","1997b3fe":"markdown","a7488b86":"markdown","d89f72ff":"markdown","391e4c7d":"markdown","dd3127c4":"markdown","735e6496":"markdown","3064cce6":"markdown","81784ff5":"markdown","3fcac048":"markdown","27a7f7b2":"markdown","2c3390ff":"markdown","cc71317b":"markdown","64565dd6":"markdown","1b4f469b":"markdown","11366bc7":"markdown","b00e9f79":"markdown","d1579ea2":"markdown","62bfd601":"markdown","65b42a8e":"markdown","e396d569":"markdown"},"source":{"a9c0a6ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport lightgbm as lgb\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5060f6ea":"df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\", parse_dates=[\"date_time\"])\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\", parse_dates=[\"date_time\"])","45be268e":"df.head()","9ce9125b":"print(\"Date Start:\", df[\"date_time\"].dt.date.min())\nprint(\"Date End:\", df[\"date_time\"].dt.date.max())","d5379e2f":"df.describe()","258603d2":"# day, month modifier\nday = 2\nmonth = 0\n\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day+1)*24], y=df[\"relative_humidity\"][day*24:(day+1)*24], ci=None)\nplt.xlabel(\"Hour of the day\")\nplt.title(\"Humidity-Day\")","91af03ce":"sns.lineplot(x=df[\"date_time\"], y=df[\"relative_humidity\"]-df[\"relative_humidity\"].shift(1, fill_value=0), ci=None)\nplt.xlabel(\"Hour of the day\")\nplt.title(\"Humidity-Day\")","79af911d":"sns.lineplot(x=df[\"date_time\"].dt.date, y=df[\"relative_humidity\"], ci=None)\nplt.xlabel(\"Month of the year\")\n_ = plt.xticks(rotation=45)","8208ce8e":"sns.lineplot(x=df[\"date_time\"].dt.month, y=df[\"sensor_1\"], ci=None)\nplt.xlabel(\"Month of the year\")","0c89cd11":"sns.lineplot(x=df[\"date_time\"].dt.month, y=df[\"sensor_2\"], ci=None)\nplt.xlabel(\"Month of the year\")","6af78e25":"sns.lineplot(x=df[\"date_time\"].dt.month, y=df[\"sensor_3\"], ci=None)\nplt.xlabel(\"Month of the year\")","a8bb16d5":"sns.lineplot(x=df[\"date_time\"].dt.month, y=df[\"sensor_4\"], ci=None)","de11cf66":"sns.lineplot(x=df[\"date_time\"].dt.month, y=df[\"sensor_5\"], ci=None)","de3bcf51":"sns.lineplot(x=df[\"date_time\"][::24], y=df[\"target_carbon_monoxide\"], ci=None)","ed1e7c51":"sns.lineplot(x=df[\"date_time\"][::24], y=df[\"target_benzene\"][::24], ci=None)","a966f209":"sns.lineplot(x=df[\"date_time\"][::24], y=df[\"target_nitrogen_oxides\"][::24], ci=None)\n_ = plt.xticks(rotation=90)","640134a5":"sensor = 1\n\n_ = sns.lineplot(x=df[\"date_time\"][::24], y=df[f\"sensor_{sensor}\"][::24], ci=None)\n_ = sns.lineplot(x=test_df[\"date_time\"][::24], y=test_df[f\"sensor_{sensor}\"][::24], ci=None)\n_ = plt.xticks(rotation=90)","2c510a61":"sensor = 3\n\n_ = sns.lineplot(x=df[\"date_time\"][::24], y=df[f\"sensor_{sensor}\"][::24], ci=None)\n_ = sns.lineplot(x=test_df[\"date_time\"][::24], y=test_df[f\"sensor_{sensor}\"][::24], ci=None)\n_ = plt.xticks(rotation=90)","f83e51b0":"# _ = sns.lineplot(x=df[\"date_time\"][::24], y=df[\"target_nitrogen_oxides\"][::24], )\n#mon = 7\n#_ = sns.lineplot(x=df[\"date_time\"][(mon*720):(mon*720)+720], y=df[\"target_nitrogen_oxides\"][(mon*720):(mon*720)+720], ci=None)","27462753":"ax = plot_pacf(df[\"target_carbon_monoxide\"], lags=24)","8125265f":"ax = plot_pacf(df[\"target_benzene\"], lags=24)","1109997f":"ax = plot_pacf(df[\"target_nitrogen_oxides\"], lags=24)","a2885c87":"df.head()","e50c6d56":"day = 2\n\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"sensor_1\"][day*24:(day*24)+24])\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"sensor_2\"][day*24:(day*24)+24])\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"sensor_3\"][day*24:(day*24)+24])\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"sensor_4\"][day*24:(day*24)+24])\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"sensor_5\"][day*24:(day*24)+24])\n\nplt.ylabel(\"sensor reading\")\nplt.xlabel(\"time in hour(24)\")\nplt.legend([\"1\", \"2\", \"3\", \"4\", \"5\"])","c524b16f":"day = 12\n\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"target_nitrogen_oxides\"][day*24:(day*24)+24])","2ec339ea":"day = 20\n\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"target_benzene\"][day*24:(day*24)+24])\nsns.lineplot(x=df[\"date_time\"].dt.hour[day*24:(day*24)+24], y=df[\"target_carbon_monoxide\"][day*24:(day*24)+24])","b72f5a2c":"sns.lineplot(x=df[\"date_time\"].dt.dayofweek, y=df[\"target_nitrogen_oxides\"])","3520987b":"sns.lineplot(x=df[\"date_time\"].dt.dayofweek, y=df[\"target_benzene\"])\nsns.lineplot(x=df[\"date_time\"].dt.dayofweek, y=df[\"target_carbon_monoxide\"])","8bd375b1":"sns.heatmap(df.corr())","e99d4ee2":"df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\", parse_dates=[\"date_time\"])","8042bbcb":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\", parse_dates=[\"date_time\"])","cd00c393":"df.head(3)","0487df1e":"def encode_cyclic(col, maxi=None):\n    if maxi==None:\n        maxi = col.max()\n    sin = np.sin(2 * np.pi * col\/maxi)\n    cos = np.cos(2 * np.pi * col\/maxi)\n    return sin, cos","d64c61bd":"# time as cyclic feature\ndf[\"month_sin\"], df[\"month_cos\"] = encode_cyclic(df[\"date_time\"].dt.month, maxi=12)\ndf[\"dow_sin\"], df[\"dow_cos\"] = encode_cyclic(df[\"date_time\"].dt.dayofweek, maxi=6)\ndf[\"day_sin\"], df[\"day_cos\"] = encode_cyclic(df[\"date_time\"].dt.day, maxi=31)\ndf[\"hour_sin\"], df[\"hour_cos\"] = encode_cyclic(df[\"date_time\"].dt.hour, maxi=23)\n\n# time as categorical features\ndf[\"is_weekend\"] = (df[\"date_time\"].dt.dayofweek>=5).astype(\"int\")\ndf[\"working_hours\"] =  df[\"date_time\"].dt.hour.isin(np.arange(10, 14)).astype(\"int\")\ndf[\"is_home\"] =  df[\"date_time\"].dt.hour.isin([0,1,2,3,4,5,21,22,23]).astype(\"int\")\ndf[\"is_commute_m\"] =  df[\"date_time\"].dt.hour.isin(np.arange(6, 9)).astype(\"int\")\ndf[\"is_commute_e\"] =  df[\"date_time\"].dt.hour.isin(np.arange(15,20)).astype(\"int\")\n\n\n# for test df\ntest_df[\"month_sin\"], test_df[\"month_cos\"] = encode_cyclic(test_df[\"date_time\"].dt.month, maxi=12)\ntest_df[\"dow_sin\"], test_df[\"dow_cos\"] = encode_cyclic(test_df[\"date_time\"].dt.dayofweek, maxi=6)\ntest_df[\"day_sin\"], test_df[\"day_cos\"] = encode_cyclic(test_df[\"date_time\"].dt.day, maxi=31)\ntest_df[\"hour_sin\"], test_df[\"hour_cos\"] = encode_cyclic(test_df[\"date_time\"].dt.hour, maxi=23)\n\ntest_df[\"is_weekend\"] = (test_df[\"date_time\"].dt.dayofweek>=5).astype(\"int\")\ntest_df[\"working_hours\"] =  test_df[\"date_time\"].dt.hour.isin(np.arange(10, 14)).astype(\"int\")\ntest_df[\"is_home\"] =  test_df[\"date_time\"].dt.hour.isin([0,1,2,3,4,5,21,22,23]).astype(\"int\")\ntest_df[\"is_commute_m\"] = test_df[\"date_time\"].dt.hour.isin(np.arange(6, 9)).astype(\"int\")\ntest_df[\"is_commute_e\"] =  test_df[\"date_time\"].dt.hour.isin(np.arange(15,20)).astype(\"int\")\n","6132f59a":"df[\"sensor_1_e1\"] = df[\"sensor_1\"] - df[\"sensor_1\"].shift(1, fill_value=df[\"sensor_1\"].mean())\ndf[\"sensor_2_e1\"] = df[\"sensor_2\"] - df[\"sensor_2\"].shift(1, fill_value=df[\"sensor_2\"].mean())\ndf[\"sensor_3_e1\"] = df[\"sensor_3\"] - df[\"sensor_3\"].shift(1, fill_value=df[\"sensor_3\"].mean())\ndf[\"sensor_4_e1\"] = df[\"sensor_4\"] - df[\"sensor_4\"].shift(1, fill_value=df[\"sensor_4\"].mean())\ndf[\"sensor_5_e1\"] = df[\"sensor_5\"] - df[\"sensor_5\"].shift(1, fill_value=df[\"sensor_5\"].mean())\ndf[\"hum_e1\"] = df[\"relative_humidity\"] - df[\"relative_humidity\"].shift(1, fill_value=df[\"relative_humidity\"].mean())\ndf[\"deg_c_e1\"] = df[\"deg_C\"] - df[\"deg_C\"].shift(1, fill_value=df[\"deg_C\"].mean())\n\ndf[\"sensor_1_e24\"] = df[\"sensor_1\"] - df[\"sensor_1\"].shift(24, fill_value=df[\"sensor_1\"].mean())\ndf[\"sensor_2_e24\"] = df[\"sensor_2\"] - df[\"sensor_2\"].shift(24, fill_value=df[\"sensor_2\"].mean())\ndf[\"sensor_3_e24\"] = df[\"sensor_3\"] - df[\"sensor_3\"].shift(24, fill_value=df[\"sensor_3\"].mean())\ndf[\"sensor_4_e24\"] = df[\"sensor_4\"] - df[\"sensor_4\"].shift(24, fill_value=df[\"sensor_4\"].mean())\ndf[\"sensor_5_e24\"] = df[\"sensor_5\"] - df[\"sensor_5\"].shift(24, fill_value=df[\"sensor_5\"].mean())\ndf[\"hum_e24\"] = df[\"relative_humidity\"] - df[\"relative_humidity\"].shift(24, fill_value=df[\"relative_humidity\"].mean())\ndf[\"deg_c_e24\"] = df[\"deg_C\"] - df[\"deg_C\"].shift(24, fill_value=df[\"deg_C\"].mean())\n\ntest_df[\"sensor_1_e1\"] = test_df[\"sensor_1\"] - test_df[\"sensor_1\"].shift(1, fill_value=test_df[\"sensor_1\"].mean())\ntest_df[\"sensor_2_e1\"] = test_df[\"sensor_2\"] - test_df[\"sensor_2\"].shift(1, fill_value=test_df[\"sensor_2\"].mean())\ntest_df[\"sensor_3_e1\"] = test_df[\"sensor_3\"] - test_df[\"sensor_3\"].shift(1, fill_value=test_df[\"sensor_3\"].mean())\ntest_df[\"sensor_4_e1\"] = test_df[\"sensor_4\"] - test_df[\"sensor_4\"].shift(1, fill_value=test_df[\"sensor_4\"].mean())\ntest_df[\"sensor_5_e1\"] = test_df[\"sensor_5\"] - test_df[\"sensor_5\"].shift(1, fill_value=test_df[\"sensor_5\"].mean())\ntest_df[\"hum_e1\"] = test_df[\"relative_humidity\"] - test_df[\"relative_humidity\"].shift(1, fill_value=test_df[\"relative_humidity\"].mean())\ntest_df[\"deg_c_e1\"] = test_df[\"deg_C\"] - test_df[\"deg_C\"].shift(1, fill_value=test_df[\"deg_C\"].mean())\n\ntest_df[\"sensor_1_e24\"] = test_df[\"sensor_1\"] - test_df[\"sensor_1\"].shift(24, fill_value=test_df[\"sensor_1\"].mean())\ntest_df[\"sensor_2_e24\"] = test_df[\"sensor_2\"] - test_df[\"sensor_2\"].shift(24, fill_value=test_df[\"sensor_2\"].mean())\ntest_df[\"sensor_3_e24\"] = test_df[\"sensor_3\"] - test_df[\"sensor_3\"].shift(24, fill_value=test_df[\"sensor_3\"].mean())\ntest_df[\"sensor_4_e24\"] = test_df[\"sensor_4\"] - test_df[\"sensor_4\"].shift(24, fill_value=test_df[\"sensor_4\"].mean())\ntest_df[\"sensor_5_e24\"] = test_df[\"sensor_5\"] - test_df[\"sensor_5\"].shift(24, fill_value=test_df[\"sensor_5\"].mean())\ntest_df[\"hum_e24\"] = test_df[\"relative_humidity\"] - test_df[\"relative_humidity\"].shift(24, fill_value=test_df[\"relative_humidity\"].mean())\ntest_df[\"deg_c_e24\"] = test_df[\"deg_C\"] - test_df[\"deg_C\"].shift(24, fill_value=test_df[\"deg_C\"].mean())\n","d5b5806d":"df.head(3)","5355132a":"test_df.head(3)","a10f7b52":"target_cols = {\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"}\nuseless_cols  = {\"date_time\"}\nfeature_cols = {cols for cols in df.columns if not (cols in target_cols or cols in useless_cols)}\nfeature_cols","14ef4c8f":"# we do not use train_test_split from sklearn because we dont need shuffle, and data has to be sequential, continous wrt date_time\nlength = df.shape[0]\nvalidation_split = 0.1\n\ntraining_set = df.iloc[:int((1-validation_split)*length)].copy()\nvalidation_set = df.iloc[int((1-validation_split)*length)+1:].copy()\nprint(\"Training dataset shape: \", training_set.shape)\nprint(\"Validation dataset shape: \", validation_set.shape)","9c040f80":"training_set.head(3)","589b4846":"print(\"Shape of the Training data(3 extra cols for targets):\", training_set.shape)\nprint(\"Shape of the Testing data:\", test_df.shape)","f632759a":"sc = StandardScaler()\ntraining_set.loc[:, feature_cols] = sc.fit_transform(training_set.loc[:, feature_cols])\nvalidation_set.loc[:, feature_cols] =  sc.transform(validation_set.loc[:, feature_cols])\ntest_df.loc[:, feature_cols] =  sc.transform(test_df.loc[:, feature_cols])","49507234":"training_set.head(3)","f48384c2":"test_df.head(3)","bf48d8d1":"def create_dataset(df, datetime_col: str, history: int = 10, training: bool = True, feature_cols=None, target_cols = None, extra_data = None):\n    '''\n    df: dateframe\n    datetime_col: datetime attribute on which data is sequentially arranged\n    history: number of prior examples to use to predict target\n    training: True, in case of training and validation, False in case of testing(no target columns)\n    target_col: default=-1, incase more than one target columns then negative integer denoting number of target columns from back.\n    '''\n    assert feature_cols is not None\n    assert target_cols is not None\n    df = df.copy()\n    df.drop(datetime_col, axis=1, inplace=True)\n    batches = []\n    if training:\n        batches_target = []\n        for example in range(history,len(df)):\n            batch = []\n            target = []\n            for prefix in range(example-history,example):\n                batch.append(df.iloc[prefix][feature_cols].values)\n            batches.append(batch)\n            batches_target.append(df.iloc[example][target_cols])\n\n        return np.array(batches).astype(\"float32\"), np.array(batches_target).astype(\"float32\")\n    \n    else:\n        assert extra_data is not None\n        extra_data = extra_data.copy()\n        extra_data.drop(datetime_col, axis=1, inplace=True)\n        df = extra_data.iloc[-history:][feature_cols].append(df)\n        for example in range(history,len(df)):\n            batch = []\n            target = []\n            for prefix in range(example-history,example):\n                batch.append(df.iloc[prefix][feature_cols].values)\n            batches.append(batch)\n        \n        return np.array(batches).astype(\"float32\")\n    ","ebba7a97":"# x_train, y_train = create_dataset(training_set, datetime_col=\"date_time\", history=10, training=True, feature_cols=feature_cols, target_cols=target_cols)\n# x_val, y_val = create_dataset(validation_set, datetime_col=\"date_time\" , history=10, training=True, feature_cols=feature_cols, target_cols=target_cols)\n# x_test =  create_dataset(test_df, datetime_col=\"date_time\", history=10, training=False, feature_cols=feature_cols, target_cols=target_cols, extra_data=df)","c2f46eb9":"#print(\"training set shapes:\", x_train.shape, y_train.shape)\n#print(\"validation set shapes: \", x_val.shape, y_val.shape)\n#print(\"testing set shapes: \", x_test.shape)","40f2c2ac":"# class RMSLE(keras.losses.Loss):    \n#     def call(self, y_true, y_pred):\n#         loss = tf.math.sqrt(tf.reduce_mean(tf.square(tf.math.log(y_pred+1)-tf.math.log(y_true+1))))\n#         return loss","6b252997":"def rmsle(y_true, y_pred):\n        loss = np.sqrt(np.mean(np.square(np.log1p(y_pred)-np.log1p(y_true))))\n        return \"RMSLE\", loss, False","dc91234b":"training_set.columns","e60d2f71":"x_train = training_set[feature_cols].values\ny_train_b = training_set[\"target_benzene\"].values\ny_train_no = training_set[\"target_nitrogen_oxides\"].values\ny_train_cmo = training_set[\"target_carbon_monoxide\"].values\n\nx_val = validation_set[feature_cols].values\ny_val_b = validation_set[\"target_benzene\"].values\ny_val_no = validation_set[\"target_nitrogen_oxides\"].values\ny_val_cmo = validation_set[\"target_carbon_monoxide\"].values\nx_test = test_df[feature_cols].values","bd7126f0":"gbm_b = lgb.LGBMRegressor(num_leaves=4, learning_rate=0.002, n_estimators=10000)\ngbm_b.fit(x_train, y_train_b,\n       eval_set=[(x_val, y_val_b)],\n       eval_metric=rmsle,\n       early_stopping_rounds=100,\n       verbose=100\n       )","529bd7aa":"_ = sns.barplot(x=list(feature_cols), y=gbm_b.feature_importances_) # x must be list or vector not set\n_ = plt.xticks(rotation=90)","571615ee":"gbm_cmo = lgb.LGBMRegressor(num_leaves=16, learning_rate=0.002, n_estimators=20000)\ngbm_cmo.fit(x_train, y_train_cmo,\n        eval_set=[(x_val, y_val_cmo)],\n        eval_metric=rmsle,\n        early_stopping_rounds=200,\n        verbose=100\n       )","98532232":"_ = sns.barplot(x=list(feature_cols), y=gbm_cmo.feature_importances_)\n_ = plt.xticks(rotation=90)","058c77fa":"gbm_no = lgb.LGBMRegressor(num_leaves=50, learning_rate=0.005, n_estimators=10000)\ngbm_no.fit(x_train, y_train_no,\n        eval_set=[(x_val, y_val_no)],\n        eval_metric=rmsle,\n        early_stopping_rounds=500,\n        verbose=500\n       )","7546ae05":"_ = sns.barplot(x=list(feature_cols), y=gbm_no.feature_importances_)\n_ = plt.xticks(rotation=90)","53dc9871":"_ = sns.lineplot(x=validation_set[\"date_time\"], y=validation_set[\"sensor_2\"])\n_ = sns.lineplot(x=test_df[\"date_time\"], y=test_df[\"sensor_2\"])\n_ = plt.xticks(rotation=90)","a9a5fba2":"_ = sns.lineplot(x=test_df[\"date_time\"], y=test_df[\"absolute_humidity\"])\n_ = plt.xticks(rotation=90)\n\n_ = sns.lineplot(x=validation_set[\"date_time\"], y=validation_set[\"absolute_humidity\"])\n_ = plt.xticks(rotation=90)","36bd8e4d":"test_df.head()","095cd1d1":"sns.lineplot(x=test_df[\"date_time\"], y=test_df[\"absolute_humidity\"])","ac00a21e":"val_set = y_val_cmo\nmodel = gbm_cmo\n\nsns.lineplot(x=np.arange(len(x_val)), y=val_set, alpha=0.7)\nsns.lineplot(x=np.arange(len(x_val)), y=model.predict(x_val), alpha=0.8)","10e15265":"gbm_b.fit(x_val, y_val_b,\n       eval_set=[(x_val, y_val_b)],\n       eval_metric=rmsle,\n       early_stopping_rounds=100,\n       verbose=100\n       )","55b6de66":"gbm_cmo.fit(x_val, y_val_cmo,\n        eval_set=[(x_val, y_val_cmo)],\n        eval_metric=rmsle,\n        early_stopping_rounds=200,\n        verbose=100\n       )","1ce4b7aa":"gbm_no.fit(x_val, y_val_no,\n        eval_set=[(x_val, y_val_no)],\n        eval_metric=rmsle,\n        early_stopping_rounds=300,\n        verbose=500\n       )","abae915b":"prediction_cmo = gbm_cmo.predict(x_test)\nprediction_no = gbm_no.predict(x_test)\nprediction_b = gbm_b.predict(x_test)","e85d9795":"sub_df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\", parse_dates=[\"date_time\"])","cd895ba3":"sub_df[\"target_carbon_monoxide\"] = prediction_cmo\nsub_df[\"target_benzene\"] = prediction_b\nsub_df[\"target_nitrogen_oxides\"] = prediction_no","203306b7":"sub_df.head(11)","90a6bb72":"sns.lineplot(x=sub_df[\"date_time\"][::24], y=prediction_no[::24])\n_ = plt.xticks(rotation=90)","a51840b6":"sns.lineplot(x=sub_df[\"date_time\"][::24], y=prediction_cmo[::24])\n_ = plt.xticks(rotation=90)","6f93bff5":"sub_df.to_csv(\"submission.csv\", index=False)","11154ef0":"# class LSTMModel(keras.models.Model):\n#     def __init__(self, n_classes):\n#         super().__init__()\n#         self.n_classes = n_classes\n#         self.lstm1 = keras.layers.LSTM(16, return_sequences=True, recurrent_dropout=0.2)\n#         self.lstm2 = keras.layers.LSTM(16)\n#         self.dense1 = keras.layers.Dense(10, activation=\"relu\")\n#         self.dense2 = keras.layers.Dense(self.n_classes, activation=\"relu\")\n#         self.dropout = keras.layers.Dropout(0.2)\n        \n#     def call(self, inputs, training=False):\n#         outputs = self.lstm1(inputs)\n#         outputs = self.lstm2(outputs)\n#         outputs = self.dropout(outputs, training=training)\n#         outputs = self.dense1(outputs)\n#         outputs = self.dense2(outputs)\n#         return outputs\n        ","c71e033f":"#lstm_no.compile(loss=RMSLE(), optimizer=keras.optimizers.Adam(lr=0.003))\n#lstm_cmo.compile(loss=RMSLE(), optimizer=keras.optimizers.Adam(lr=0.003))\n#lstm_b.compile(loss=RMSLE(), optimizer=keras.optimizers.Adam(lr=0.003))\n#lrreducer = keras.callbacks.ReduceLROnPlateau(monitor=\"loss\", patience=5, min_lr=0.0001)","b85e2105":"#x_train.shape, y_train.shape","b83dbb7b":"# y_train_b = y_train[:, 0][:, np.newaxis]\n# y_train_no = y_train[:, 2][:, np.newaxis]\n# y_train_cmo = y_train[:, 1][:, np.newaxis]\n\n\n# y_val_b = y_val[:, 0][:, np.newaxis]\n# y_val_no = y_val[:, 2][:, np.newaxis]\n# y_val_cmo = y_val[:, 1][:, np.newaxis]\n# # x_test = test_df[feature_cols]","f735595d":"#history = lstm_no.fit(x=x_train, y=y_train_no, validation_data=(x_val, y_val_no), epochs=20, callbacks=[lrreducer])","f8bb928f":"#history = lstm_b.fit(x=x_train, y=y_train_b, validation_data=(x_val, y_val_b), epochs=20, callbacks=[lrreducer])","fcd9605c":"#history = lstm_cmo.fit(x=x_train, y=y_train_cmo, validation_data=(x_val, y_val_cmo), epochs=20, callbacks=[lrreducer])","2b1a2bfc":"#sns.lineplot(x=range(0, len(history.history[\"loss\"])), y=history.history[\"loss\"])\n#sns.lineplot(x=range(0, len(history.history[\"val_loss\"])), y=history.history[\"val_loss\"])","9d03852e":"#prediction = lstm_model.predict(x_val)\n#print(prediction.shape)\n#print(df[\"date_time\"][-:].shape)\n#sns.lineplot(x=df[\"date_time\"][:6389:24], y=df[\"target_nitrogen_oxides\"][::24])\n#sns.lineplot(x=df[\"date_time\"][-10:], y=lstm_model.predict(x_val).reshape(-1))\n#plt.xticks(rotation=90)","b520c17b":"#prediction_cmo = lstm_cmo.predict(x_test)\n#prediction_no = lstm_no.predict(x_test)\n#prediction_b = lstm_b.predict(x_test)","72033066":"#sub_df[\"target_carbon_monoxide\"] = prediction_cmo\n#sub_df[\"target_benzene\"] = prediction_b\n#sub_df[\"target_nitrogen_oxides\"] = prediction_no","1bf051b1":"#sub_df.head(11)","f321dc87":"# How well model predicts Val set","1997b3fe":"# Creating Time Series Dataset","a7488b86":"**Target Carbon Monoxide**","d89f72ff":"# Model Training","391e4c7d":"# Full Trainset Training\ntime series data needs most recent data for better predictions (got 0.03 improvement)","dd3127c4":"* Week Days have higher target values due to work related commute.","735e6496":"**sensor_2**","3064cce6":"# Feature Engineering","81784ff5":"* Morning hours 6 to 12 and evening hours 6 to 10 have higher NO values","3fcac048":"# Day-wise Sensor Data","27a7f7b2":"# Loss Function","2c3390ff":"* Again same trend","cc71317b":"**sensor_1**","64565dd6":"# Plotting PACF","1b4f469b":"**sensor_5**","11366bc7":"* Strong correlation with two previous day's value.","b00e9f79":"**sensor_4**","d1579ea2":"# Feature Scaling","62bfd601":"# Feature Selection","65b42a8e":"**sensor_3**","e396d569":"# **Train vs Test  Sensor Data**"}}