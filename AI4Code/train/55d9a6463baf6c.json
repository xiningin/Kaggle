{"cell_type":{"10c07a15":"code","d447f5d4":"code","30804249":"code","18bed9ff":"code","5e505a3e":"code","0c75e37d":"code","6fe514ce":"code","ce43a9f5":"code","5e768b3c":"code","9ba74ed1":"code","8daa6f92":"code","f6c95666":"code","9a0332e6":"code","e36ddac3":"code","e329360b":"code","681f6461":"code","0484722b":"code","c3810fa8":"code","4d108c73":"code","7956c761":"code","f2a021e4":"code","51b9beaa":"code","534a0c98":"code","1c12fe82":"code","f3fee67b":"code","1fb61287":"code","008ec766":"markdown","920967e5":"markdown","a4320ce5":"markdown","d18d2329":"markdown","7419af59":"markdown","ed09a35c":"markdown","4b4aa531":"markdown","7ead47c8":"markdown","7f41e5cb":"markdown","85edb9e7":"markdown","002dcc20":"markdown","8e0920d4":"markdown","0327e7f9":"markdown","8c57f5d3":"markdown"},"source":{"10c07a15":"import numpy as np # linear algebra\nimport pandas as pd # data processing,","d447f5d4":"train_orig = pd.read_csv(\"..\/input\/train.csv\")\ntest_orig = pd.read_csv(\"..\/input\/test.csv\")","30804249":"housing = train_orig.append(test_orig, sort = False)\nhousing = housing.reset_index(drop=True)","18bed9ff":"train_orig.shape","5e505a3e":"test_orig.shape","0c75e37d":"nullval = housing.isnull().sum()\nnullval[nullval > 10].sort_values(ascending = False)","6fe514ce":"housing_imputed = housing.copy()","ce43a9f5":"ColToDrop = ['PoolQC', 'PoolArea', 'SalePrice','Id']\nhousing_imputed = housing_imputed.drop(ColToDrop, axis = 1)","5e768b3c":"housing_imputed.MiscFeature = housing_imputed.MiscFeature.fillna('NoMisc')\nhousing_imputed.Alley = housing_imputed.Alley.fillna('NoAlley')\nhousing_imputed.Fence = housing_imputed.Fence.fillna('Nofnc')\nhousing_imputed.FireplaceQu = housing_imputed.FireplaceQu.fillna('NoFP')\nhousing_imputed.LotFrontage = housing_imputed.LotFrontage.fillna(0)\nhousing_imputed.GarageFinish = housing_imputed.GarageFinish.fillna('NoGrg')\nhousing_imputed.GarageYrBlt=housing_imputed.GarageYrBlt.fillna(0)\nhousing_imputed.GarageCond=housing_imputed.GarageCond.fillna('NoGrg')\nhousing_imputed.GarageType=housing_imputed.GarageType.fillna('NoGrg')\nhousing_imputed.GarageQual = housing_imputed.GarageQual.fillna(0)\nhousing_imputed.BsmtExposure=housing_imputed.BsmtExposure.fillna('NoBsmnt')\nhousing_imputed.BsmtQual=housing_imputed.BsmtQual.fillna('NoBsmnt')\nhousing_imputed.BsmtCond=housing_imputed.BsmtCond.fillna('NoBsmnt')\nhousing_imputed.BsmtFinType2=housing_imputed.BsmtFinType2.fillna('NoBsmnt')\nhousing_imputed.BsmtFinType1=housing_imputed.BsmtFinType1.fillna('NoBsmnt')\nhousing_imputed.MasVnrType=housing_imputed.MasVnrType.fillna('Other')\nhousing_imputed.MasVnrArea=housing_imputed.MasVnrArea.fillna(0)","9ba74ed1":"for col in housing_imputed.columns:\n    if(housing_imputed[col].isnull().sum() > 0):\n        housing_imputed[col].fillna(housing_imputed[col].mode()[0], inplace=True)","8daa6f92":"housing_imputed = pd.get_dummies(housing_imputed)\ntrain_final = housing_imputed[0:1460]\ntest_final =  (housing_imputed[1460: 2919]).reset_index(drop= True)\nY = housing.iloc[0:1460,-1]","f6c95666":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_final, Y, test_size = 0.3, random_state = 0)\n","9a0332e6":"from sklearn.linear_model import LinearRegression\nlmodel = LinearRegression()\nlmodel.fit(X_train, y_train)","e36ddac3":"y_pred = lmodel.predict(X_test)","e329360b":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","681f6461":"from sklearn.ensemble import RandomForestRegressor\nRFmodel = RandomForestRegressor(random_state=1)\nRFmodel.fit(X_train, y_train)","0484722b":"import matplotlib.pyplot as plt","c3810fa8":"features = X_train.columns\nlen(features)","4d108c73":"features = X_train.columns\nimportances = RFmodel.feature_importances_\nindices = np.argsort(importances)[-20:]  # top 20 features\nplt.title('Feature Importance plot')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","7956c761":"y_pred_RF = RFmodel.predict(X_test)","f2a021e4":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nsqrt(mean_squared_error(y_test, y_pred_RF))","51b9beaa":"sqrt(mean_squared_error(y_test, y_pred))","534a0c98":"model = RandomForestRegressor(random_state=1)\nmodel.fit(train_final, Y)\ny_out = model.predict(test_final)","1c12fe82":"output = pd.DataFrame(test_orig['Id'])","f3fee67b":"output['SalePrice'] = y_out","1fb61287":"output.head()","008ec766":"> Handling the missing values:\n* poolQua & Pool area - Remove the variables.(>90% data missing)\n\n> Imputing the missing values :\n-------------------------------------\n    Feature - Proposed Imputation\n\n    * MiscFeature - NoMisc \n    * Alley - NoAlley\n    * Fence - NoFence\n    * FirePlaceQu - NoFP \n    * LotFrontage - 0\n    * GarageFinish - NoGrg\n    * GarageYrBlt - 0\n    * GarageCond - NoGrg\n    * GarageType - NoGrg\n    * BsmtExposure - NoBsmnt\n    * BsmtCond     - NoBsmnt\n    * BsmtQual     - NoBsmnt\n    * BsmtFinType2 - NoBsmnt\n    * BsmtFinType1 - NoBsmnt\n    * MasVnrType  - Other\n    * MasVnrArea  - 0","920967e5":"## Model - Ordinary Least Squares Regression","a4320ce5":"## Pre process for Modelling","d18d2329":"Combining train and test into a single dataset for further analysis","7419af59":"For all other features which are missing values less than 10, replace those with the mode","ed09a35c":"There are many applicable models for the dataset. **Since the dependent varibale is a quantitative\/numerical variable, regression methods are suitable for model fit and predictions.**\n\nSome regression methods that can be used are:\n* Linear Regression\/Ordinary Least Squares Regression\n* Linear SVM\n* Decision(Regression) tree\n* Random Forest Regression\n* XGBoost\n","4b4aa531":"Check if there are null values in the data","7ead47c8":"## Random Forest Regression","7f41e5cb":"A quick look at the missing values clearly says that missing data follows \"MAR\" (Missing At Random).\n\n\"Missing at Random means the propensity for a data point to be missing is not related to the missing data, but it's related to some of the observed data\"\n\n* Fireplacequality is missing for the data points that has 0 fire places\n* All the basement related variables are missing the same number of data points close to 80 which indicates the house has no basement. Which in case might be a service apartment\n* Similarly all the garage realted features are missing 159 values except GarageType which has 157 missing data points\n* Veneer type and veneer area also have the same behavior\n","85edb9e7":"Obtaining feature importance plot","002dcc20":"Retain a copy of the original dataset ","8e0920d4":"RMSE for randomforest regressor is less, hence training the entire set using RF regressor and getting the predictions for the test data","0327e7f9":"Create one-hot encoded value matrix for the categorical features","8c57f5d3":"## Feature engineering"}}