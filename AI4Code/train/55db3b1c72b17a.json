{"cell_type":{"ffcd7b0f":"code","c2762247":"code","860dfa92":"code","07874e05":"code","c7d78f4e":"code","06842aa7":"code","decb2f77":"code","3e116d34":"code","a6293b0e":"code","6cb46f19":"code","bc814de1":"code","01706373":"code","88929f89":"markdown"},"source":{"ffcd7b0f":"\n\nimport numpy as np \nimport pandas as pd \nimport os\n\n","c2762247":"import tensorflow as tf\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","860dfa92":"\n\n    train_ds=tf.keras.preprocessing.image_dataset_from_directory(\n        \"..\/input\/flowers-recognition\/flowers\",\n        labels=\"inferred\",\n        label_mode=\"categorical\",\n        class_names=None,\n        color_mode=\"rgb\",\n        batch_size=32,\n        image_size=(255, 255),\n        shuffle=True,\n        seed=50,\n        validation_split=0.1,\n        subset='training',\n\n    )\n    data_test=tf.keras.preprocessing.image_dataset_from_directory(\n        \"..\/input\/flowers-recognition\/flowers\",\n        labels=\"inferred\",\n        label_mode=\"categorical\",\n        class_names=None,\n        color_mode=\"rgb\",\n        batch_size=32,\n        image_size=(255, 255),\n        shuffle=True,\n        seed=50,\n        validation_split=0.1,\n        subset='validation',\n\n    )\n","07874e05":"data_augmentation = tf.keras.Sequential(\n    [\n        tf.keras.layers.RandomFlip(\"horizontal\"),\n        tf.keras.layers.RandomRotation(0.1),\n    ]\n)","c7d78f4e":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10, 10))\nfor images, _ in train_ds.take(1):\n    for i in range(9):\n        augmented_images = data_augmentation(images)\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(augmented_images[0].numpy().astype(\"uint8\"))\n        plt.axis(\"off\")","06842aa7":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","decb2f77":"train_ds = train_ds.prefetch(buffer_size=32)\nval_ds = data_test.prefetch(buffer_size=32)","3e116d34":"def make_model(input_shape, num_classes):\n    inputs = keras.Input(shape=input_shape)\n    x = data_augmentation(inputs)\n\n    # Entry block\n    x = layers.Rescaling(1.0 \/ 255)(x)\n    x = layers.Conv2D(32, 3, strides=2, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    x = layers.Conv2D(64, 3, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    previous_block_activation = x  \n\n    for size in [128, 256, 512, 728]:\n        x = layers.Activation(\"relu\")(x)\n        x = layers.SeparableConv2D(size, 3, padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Activation(\"relu\")(x)\n        x = layers.SeparableConv2D(size, 3, padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.MaxPooling2D(3, strides=2, padding=\"same\")(x)\n\n        residual = layers.Conv2D(size, 1, strides=2, padding=\"same\")(\n            previous_block_activation\n        )\n        x = layers.add([x, residual])  \n        previous_block_activation = x \n\n    x = layers.SeparableConv2D(1024, 3, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    x = layers.GlobalAveragePooling2D()(x)\n    if num_classes == 2:\n        activation = \"sigmoid\"\n        units = 1\n    else:\n        activation = \"softmax\"\n        units = num_classes\n\n    x = layers.Dropout(0.5)(x)\n    outputs = layers.Dense(units, activation=activation)(x)\n    return keras.Model(inputs, outputs)\n\n\nmodel = make_model(input_shape=(255, 255) + (3,), num_classes=5)\nkeras.utils.plot_model(model, show_shapes=True)","a6293b0e":"epochs = 50\n\ncallbacks = [\n    keras.callbacks.ModelCheckpoint(\"save_at_{epoch}.h5\"),\n]\nmodel.compile(\n    optimizer=keras.optimizers.Adam(1e-3),\n    loss=\"binary_crossentropy\",\n    metrics=[\"accuracy\"],\n)\nmodel.fit(\n    train_ds, epochs=epochs, callbacks=callbacks, validation_data=val_ds,\n)","6cb46f19":"import numpy as np\ndef predict_image(path):\n    img = keras.preprocessing.image.load_img(\n        path, target_size=(255,255,3)\n    )\n    img_array = keras.preprocessing.image.img_to_array(img)\n    img_array = tf.expand_dims(img_array, 0)  # Create batch axis\n\n    predictions = model.predict(img_array)\n    score = predictions[0]\n    predicted=np.argmax(score)\n    if predicted==0:\n        print(\"output = 'daisy' with confidence\",predictions[0][predicted]*100,\"%\")\n    elif predicted==1:\n        print(\"output = 'dandelion' with confidence\",predictions[0][predicted]*100,\"%\")\n    elif predicted==2:\n        print(\"output = 'rose' with confidence\",predictions[0][predicted]*100,\"%\")\n    elif predicted==3:\n        print(\"output = 'sunflower' with confidence\",predictions[0][predicted]*100,\"%\")\n    elif predicted==4:\n        print(\"output = 'tulip' with confidence\",predictions[0][predicted]*100,\"%\")\n\n","bc814de1":"predict_image(\"..\/input\/flowers-recognition\/flowers\/sunflower\/1008566138_6927679c8a.jpg\")\npredict_image(\"..\/input\/flowers-recognition\/flowers\/tulip\/10791227_7168491604.jpg\")\npredict_image(\"..\/input\/flowers-recognition\/flowers\/daisy\/1031799732_e7f4008c03.jpg\")\npredict_image(\"..\/input\/flowers-recognition\/flowers\/dandelion\/12093962485_7c3e9a2a23_n.jpg\")\npredict_image(\"..\/input\/flowers-recognition\/flowers\/rose\/15222804561_0fde5eb4ae_n.jpg\")","01706373":"print(\"test accuracy = 88.17\")","88929f89":"#### "}}