{"cell_type":{"29e511bd":"code","562b56de":"code","346adb92":"code","f53bca86":"code","286b0508":"code","06808302":"code","4a34f24a":"code","6f43eb45":"code","a30fb2aa":"code","e1d82cd0":"code","55285d97":"code","174190e0":"code","42da34b3":"code","c64ab31d":"code","c6066d8e":"code","bfa843b2":"code","22781c7a":"code","9fe63ff4":"code","904d71ad":"code","858889fc":"code","dd353da0":"code","f8d329d4":"code","8a576c37":"code","46908adf":"code","6196975f":"code","e94ea5ad":"code","ee13c645":"code","634d890f":"code","ec1dbde0":"code","2e370bc7":"code","83eb0ed7":"code","2b7bf9f8":"code","a61966b1":"code","85a1faaa":"code","936c8753":"code","95bc50c7":"code","40299be7":"code","11b6eb7e":"code","23110a18":"code","cfbfef82":"code","c8795cb9":"code","968200a5":"code","1da7f71c":"code","47508fe8":"code","ab3c8457":"code","66d1ed89":"code","5e4cd23a":"code","ceea4630":"code","afd56074":"code","62009800":"code","6828effa":"code","7c475e49":"code","ef342c9b":"code","b675f2a2":"code","c3ceaf01":"code","0581390e":"code","a1918d0b":"code","11a68ec1":"code","ba8e4098":"code","379c765d":"code","89c1ddc9":"code","8e982105":"markdown","f80a7851":"markdown","100e2749":"markdown","a3b621ba":"markdown","ba7eff77":"markdown","7064155d":"markdown","7348c7e2":"markdown","2774f55a":"markdown","24bbf4e1":"markdown","138fd6d4":"markdown","ee45d9ab":"markdown","ef467442":"markdown","30b24741":"markdown","641e171b":"markdown","5cf94d76":"markdown","fac0d1e3":"markdown","332271d3":"markdown","536651b5":"markdown","b46ff22c":"markdown","931038cf":"markdown","b0a3b758":"markdown","d7fdcd18":"markdown","e94a1aa4":"markdown","35c7df90":"markdown","9acc7f4c":"markdown","3ba2260c":"markdown","a8624eb1":"markdown","4b9a9274":"markdown","fcc0068d":"markdown","0d91a5e1":"markdown","a00e7a09":"markdown","cbb2ce18":"markdown","65dd0145":"markdown","e1ca99a3":"markdown","841dcf84":"markdown","87bd1c48":"markdown","c1a4d954":"markdown","80e16288":"markdown","f383412e":"markdown","6491f358":"markdown","d21a9726":"markdown","bfb64f6b":"markdown","0298d6e6":"markdown","c196390c":"markdown","4777e252":"markdown","0cd588d2":"markdown","57a51d78":"markdown","f7389320":"markdown","d72f5384":"markdown","e8b35a0b":"markdown","07534e32":"markdown","f3b44c4d":"markdown","592036c8":"markdown","9e50e846":"markdown","99516c1d":"markdown","6622f222":"markdown","441648a9":"markdown","b9467df4":"markdown","ba1ff547":"markdown"},"source":{"29e511bd":"!nvidia-smi","562b56de":"!pip install -q -U watermark","346adb92":"!pip install -qq transformers","f53bca86":"%reload_ext watermark\n%watermark -v -p numpy,pandas,torch,transformers","286b0508":"#@title Setup & Config\nimport transformers\nfrom transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup\nimport torch\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom collections import defaultdict\nfrom textwrap import wrap\n\nfrom torch import nn, optim\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn.functional as F\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\nsns.set(style='whitegrid', palette='muted', font_scale=1.2)\n\nHAPPY_COLORS_PALETTE = [\"#01BEFE\", \"#FFDD00\", \"#FF7D00\", \"#FF006D\", \"#ADFF02\", \"#8F00FF\"]\n\nsns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))\n\nrcParams['figure.figsize'] = 12, 8\n\nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)\ntorch.manual_seed(RANDOM_SEED)\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\ndevice","06808302":"df = pd.read_csv(\"..\/input\/playstore-reviews\/reviews.csv\")\ndf.head()","4a34f24a":"df.shape","6f43eb45":"df.info()","a30fb2aa":"sns.countplot(df.score)\nplt.xlabel('review score');","e1d82cd0":"def to_sentiment(rating):\n  rating = int(rating)\n  if rating <= 2:\n    return 0\n  elif rating == 3:\n    return 1\n  else: \n    return 2\n\ndf['sentiment'] = df.score.apply(to_sentiment)","55285d97":"class_names = ['negative', 'neutral', 'positive']","174190e0":"ax = sns.countplot(df.sentiment)\nplt.xlabel('review sentiment')\nax.set_xticklabels(class_names);","42da34b3":"PRE_TRAINED_MODEL_NAME = 'bert-base-cased'","c64ab31d":"tokenizer = BertTokenizer.from_pretrained(PRE_TRAINED_MODEL_NAME)","c6066d8e":"sample_txt = 'When was I last outside? I am stuck at home for 2 weeks.'","bfa843b2":"tokens = tokenizer.tokenize(sample_txt)\ntoken_ids = tokenizer.convert_tokens_to_ids(tokens)\n\nprint(f' Sentence: {sample_txt}')\nprint(f'   Tokens: {tokens}')\nprint(f'Token IDs: {token_ids}')","22781c7a":"tokenizer.sep_token, tokenizer.sep_token_id","9fe63ff4":"tokenizer.cls_token, tokenizer.cls_token_id","904d71ad":"tokenizer.pad_token, tokenizer.pad_token_id","858889fc":"tokenizer.unk_token, tokenizer.unk_token_id","dd353da0":"encoding = tokenizer.encode_plus(\n  sample_txt,\n  max_length=32,\n  add_special_tokens=True, # Add '[CLS]' and '[SEP]'\n  return_token_type_ids=False,\n  pad_to_max_length=True,\n  return_attention_mask=True,\n  return_tensors='pt',  # Return PyTorch tensors\n)\n\nencoding.keys()","f8d329d4":"print(len(encoding['input_ids'][0]))\nencoding['input_ids'][0]","8a576c37":"print(len(encoding['attention_mask'][0]))\nencoding['attention_mask']","46908adf":"tokenizer.convert_ids_to_tokens(encoding['input_ids'][0])","6196975f":"token_lens = []\n\nfor txt in df.content:\n  tokens = tokenizer.encode(txt, max_length=512)\n  token_lens.append(len(tokens))","e94ea5ad":"sns.distplot(token_lens)\nplt.xlim([0, 256]);\nplt.xlabel('Token count');","ee13c645":"MAX_LEN = 160","634d890f":"class GPReviewDataset(Dataset):\n\n  def __init__(self, reviews, targets, tokenizer, max_len):\n    self.reviews = reviews\n    self.targets = targets\n    self.tokenizer = tokenizer\n    self.max_len = max_len\n  \n  def __len__(self):\n    return len(self.reviews)\n  \n  def __getitem__(self, item):\n    review = str(self.reviews[item])\n    target = self.targets[item]\n\n    encoding = self.tokenizer.encode_plus(\n      review,\n      add_special_tokens=True,\n      max_length=self.max_len,\n      return_token_type_ids=False,\n      pad_to_max_length=True,\n      return_attention_mask=True,\n      return_tensors='pt',\n    )\n\n    return {\n      'review_text': review,\n      'input_ids': encoding['input_ids'].flatten(),\n      'attention_mask': encoding['attention_mask'].flatten(),\n      'targets': torch.tensor(target, dtype=torch.long)\n    }","ec1dbde0":"df_train, df_test = train_test_split(df, test_size=0.1, random_state=RANDOM_SEED)\ndf_val, df_test = train_test_split(df_test, test_size=0.5, random_state=RANDOM_SEED)","2e370bc7":"df_train.shape, df_val.shape, df_test.shape","83eb0ed7":"def create_data_loader(df, tokenizer, max_len, batch_size):\n  ds = GPReviewDataset(\n    reviews=df.content.to_numpy(),\n    targets=df.sentiment.to_numpy(),\n    tokenizer=tokenizer,\n    max_len=max_len\n  )\n\n  return DataLoader(\n    ds,\n    batch_size=batch_size,\n    num_workers=4\n  )","2b7bf9f8":"BATCH_SIZE = 16\n\ntrain_data_loader = create_data_loader(df_train, tokenizer, MAX_LEN, BATCH_SIZE)\nval_data_loader = create_data_loader(df_val, tokenizer, MAX_LEN, BATCH_SIZE)\ntest_data_loader = create_data_loader(df_test, tokenizer, MAX_LEN, BATCH_SIZE)","a61966b1":"data = next(iter(train_data_loader))\ndata.keys()","85a1faaa":"print(data['input_ids'].shape)\nprint(data['attention_mask'].shape)\nprint(data['targets'].shape)","936c8753":"bert_model = BertModel.from_pretrained(PRE_TRAINED_MODEL_NAME)","95bc50c7":"last_hidden_state, pooled_output = bert_model(\n  input_ids=encoding['input_ids'], \n  attention_mask=encoding['attention_mask'],\n    return_dict = False\n)","40299be7":"last_hidden_state.shape","11b6eb7e":"bert_model.config.hidden_size","23110a18":"pooled_output.shape","cfbfef82":"class SentimentClassifier(nn.Module):\n\n  def __init__(self, n_classes):\n    super(SentimentClassifier, self).__init__()\n    self.bert = BertModel.from_pretrained(PRE_TRAINED_MODEL_NAME)\n    self.drop = nn.Dropout(p=0.3)\n    self.out = nn.Linear(self.bert.config.hidden_size, n_classes)\n  \n  def forward(self, input_ids, attention_mask):\n    _, pooled_output = self.bert(\n      input_ids=input_ids,\n      attention_mask=attention_mask,\n      return_dict = False\n    )\n    output = self.drop(pooled_output)\n    return self.out(output)","c8795cb9":"model = SentimentClassifier(len(class_names))\nmodel = model.to(device)","968200a5":"input_ids = data['input_ids'].to(device)\nattention_mask = data['attention_mask'].to(device)\n\nprint(input_ids.shape) # batch size x seq length\nprint(attention_mask.shape) # batch size x seq length","1da7f71c":"F.softmax(model(input_ids, attention_mask), dim=1)","47508fe8":"EPOCHS = 10\n\noptimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)\ntotal_steps = len(train_data_loader) * EPOCHS\n\nscheduler = get_linear_schedule_with_warmup(\n  optimizer,\n  num_warmup_steps=0,\n  num_training_steps=total_steps\n)\n\nloss_fn = nn.CrossEntropyLoss().to(device)","ab3c8457":"def train_epoch(\n  model, \n  data_loader, \n  loss_fn, \n  optimizer, \n  device, \n  scheduler, \n  n_examples\n):\n  model = model.train()\n\n  losses = []\n  correct_predictions = 0\n  \n  for d in data_loader:\n    input_ids = d[\"input_ids\"].to(device)\n    attention_mask = d[\"attention_mask\"].to(device)\n    targets = d[\"targets\"].to(device)\n\n    outputs = model(\n      input_ids=input_ids,\n      attention_mask=attention_mask\n    )\n\n    _, preds = torch.max(outputs, dim=1)\n    loss = loss_fn(outputs, targets)\n\n    correct_predictions += torch.sum(preds == targets)\n    losses.append(loss.item())\n\n    loss.backward()\n    nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n    optimizer.step()\n    scheduler.step()\n    optimizer.zero_grad()\n\n  return correct_predictions.double() \/ n_examples, np.mean(losses)","66d1ed89":"def eval_model(model, data_loader, loss_fn, device, n_examples):\n  model = model.eval()\n\n  losses = []\n  correct_predictions = 0\n\n  with torch.no_grad():\n    for d in data_loader:\n      input_ids = d[\"input_ids\"].to(device)\n      attention_mask = d[\"attention_mask\"].to(device)\n      targets = d[\"targets\"].to(device)\n\n      outputs = model(\n        input_ids=input_ids,\n        attention_mask=attention_mask\n      )\n      _, preds = torch.max(outputs, dim=1)\n\n      loss = loss_fn(outputs, targets)\n\n      correct_predictions += torch.sum(preds == targets)\n      losses.append(loss.item())\n\n  return correct_predictions.double() \/ n_examples, np.mean(losses)","5e4cd23a":"%%time\n\nhistory = defaultdict(list)\nbest_accuracy = 0\n\nfor epoch in range(EPOCHS):\n\n  print(f'Epoch {epoch + 1}\/{EPOCHS}')\n  print('-' * 10)\n\n  train_acc, train_loss = train_epoch(\n    model,\n    train_data_loader,    \n    loss_fn, \n    optimizer, \n    device, \n    scheduler, \n    len(df_train)\n  )\n\n  print(f'Train loss {train_loss} accuracy {train_acc}')\n\n  val_acc, val_loss = eval_model(\n    model,\n    val_data_loader,\n    loss_fn, \n    device, \n    len(df_val)\n  )\n\n  print(f'Val   loss {val_loss} accuracy {val_acc}')\n  print()\n\n  history['train_acc'].append(train_acc)\n  history['train_loss'].append(train_loss)\n  history['val_acc'].append(val_acc)\n  history['val_loss'].append(val_loss)\n\n  if val_acc > best_accuracy:\n    torch.save(model.state_dict(), 'best_model_state.bin')\n    best_accuracy = val_acc","ceea4630":"plt.plot(history['train_acc'], label='train accuracy')\nplt.plot(history['val_acc'], label='validation accuracy')\n\nplt.title('Training history')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\nplt.ylim([0, 1]);","afd56074":"plt.plot(history['train_loss'], label='train loss')\nplt.plot(history['val_loss'], label='validation loss')\n\nplt.title('Training history')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\nplt.ylim([0, 1]);","62009800":"# Download the model and run these commands.\n\n# model = SentimentClassifier(len(class_names))\n# model.load_state_dict(torch.load('best_model_state.bin'))\n# model = model.to(device)","6828effa":"test_acc, _ = eval_model(\n  model,\n  test_data_loader,\n  loss_fn,\n  device,\n  len(df_test)\n)\n\ntest_acc.item()","7c475e49":"def get_predictions(model, data_loader):\n  model = model.eval()\n  \n  review_texts = []\n  predictions = []\n  prediction_probs = []\n  real_values = []\n\n  with torch.no_grad():\n    for d in data_loader:\n\n      texts = d[\"review_text\"]\n      input_ids = d[\"input_ids\"].to(device)\n      attention_mask = d[\"attention_mask\"].to(device)\n      targets = d[\"targets\"].to(device)\n\n      outputs = model(\n        input_ids=input_ids,\n        attention_mask=attention_mask\n      )\n      _, preds = torch.max(outputs, dim=1)\n\n      probs = F.softmax(outputs, dim=1)\n\n      review_texts.extend(texts)\n      predictions.extend(preds)\n      prediction_probs.extend(probs)\n      real_values.extend(targets)\n\n  predictions = torch.stack(predictions).cpu()\n  prediction_probs = torch.stack(prediction_probs).cpu()\n  real_values = torch.stack(real_values).cpu()\n  return review_texts, predictions, prediction_probs, real_values","ef342c9b":"y_review_texts, y_pred, y_pred_probs, y_test = get_predictions(\n  model,\n  test_data_loader\n)","b675f2a2":"print(classification_report(y_test, y_pred, target_names=class_names))","c3ceaf01":"def show_confusion_matrix(confusion_matrix):\n  hmap = sns.heatmap(confusion_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n  hmap.yaxis.set_ticklabels(hmap.yaxis.get_ticklabels(), rotation=0, ha='right')\n  hmap.xaxis.set_ticklabels(hmap.xaxis.get_ticklabels(), rotation=30, ha='right')\n  plt.ylabel('True sentiment')\n  plt.xlabel('Predicted sentiment');\n\ncm = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(cm, index=class_names, columns=class_names)\nshow_confusion_matrix(df_cm)","0581390e":"idx = 90\n\nreview_text = y_review_texts[idx]\ntrue_sentiment = y_test[idx]\npred_df = pd.DataFrame({\n  'class_names': class_names,\n  'values': y_pred_probs[idx]\n})","a1918d0b":"print(\"\\n\".join(wrap(review_text)))\nprint()\nprint(f'True sentiment: {class_names[true_sentiment]}')","11a68ec1":"sns.barplot(x='values', y='class_names', data=pred_df, orient='h')\nplt.ylabel('sentiment')\nplt.xlabel('probability')\nplt.xlim([0, 1]);","ba8e4098":"review_text = \"The app is amazing , but it take much time to load!!!\" # lets give a tricky one Example","379c765d":"encoded_review = tokenizer.encode_plus(\n  review_text,\n  max_length=MAX_LEN,\n  add_special_tokens=True,\n  return_token_type_ids=False,\n  pad_to_max_length=True,\n  return_attention_mask=True,\n  return_tensors='pt',\n)","89c1ddc9":"input_ids = encoded_review['input_ids'].to(device)\nattention_mask = encoded_review['attention_mask'].to(device)\n\noutput = model(input_ids, attention_mask)\n_, prediction = torch.max(output, dim=1)\n\nprint(f'Review text: {review_text}')\nprint(f'Sentiment  : {class_names[prediction]}')","8e982105":"Let's have a look at an example batch from our training data loader:","f80a7851":"This is similar to the evaluation function, except that we're storing the text of the reviews and the predicted probabilities (by applying the softmax on the model outputs):","100e2749":"The training accuracy starts to approach 100% after 10 epochs or so. You might try to fine-tune the parameters a bit more, but this will be good enough for us.\n\nUncomment the next cell and download the pre-trained model that you have saved.","a3b621ba":"We have the hidden state for each of our 32 tokens (the length of our example sequence). But why 768? This is the number of hidden units in the feedforward-networks. We can verify that by checking the config:","ba7eff77":"The accuracy is about 1% lower on the test set. Our model seems to generalize well.\n\nWe'll define a helper function to get the predictions from our model:","7064155d":"## Evaluation\n\nSo how good is our model on predicting sentiment? Let's start by calculating the accuracy on the test data:","7348c7e2":"Some basic operations can convert the text to tokens and tokens to unique integers (ids):","2774f55a":"We'll move the example batch of our training data to the GPU:","24bbf4e1":"## Setup\n\nWe'll need [the Transformers library](https:\/\/huggingface.co\/transformers\/) by Hugging Face:","138fd6d4":"and plot the distribution:","ee45d9ab":"Whoo, this took some time! We can look at the training vs validation accuracy:","ef467442":"All of that work can be done using the [`encode_plus()`](https:\/\/huggingface.co\/transformers\/main_classes\/tokenizer.html#transformers.PreTrainedTokenizer.encode_plus) method:","30b24741":"To get the predicted probabilities from our trained model, we'll apply the softmax function to the outputs:","641e171b":"The token ids are now stored in a Tensor and padded to a length of 32:","5cf94d76":"`[CLS]` - we must add this token to the start of each sentence, so BERT knows we're doing classification","fac0d1e3":"Let's get the predictions from our model:","332271d3":"Training the model should look familiar, except for two things. The scheduler gets called every time a batch is fed to the model. We're avoiding exploding gradients by clipping the gradients of the model using [clip_grad_norm_](https:\/\/pytorch.org\/docs\/stable\/nn.html#clip-grad-norm).\n\nLet's write another one that helps us evaluate the model on a given data loader:","536651b5":"We can use all of this knowledge to create a classifier that uses the BERT model:","b46ff22c":"There is also a special token for padding:","931038cf":"The tokenizer is doing most of the heavy lifting for us. We also return the review texts, so it'll be easier to evaluate the predictions from our model. Let's split the data:","b0a3b758":"## What is BERT?\n\nBERT (introduced in [this paper](https:\/\/arxiv.org\/abs\/1810.04805)) stands for Bidirectional Encoder Representations from Transformers. If you don't know what most of that means - you've come to the right place! Let's unpack the main ideas:\n\n- Bidirectional - to understand the text  you're looking you'll have to look back (at the previous words) and forward (at the next words)\n- Transformers - The [Attention Is All You Need](https:\/\/arxiv.org\/abs\/1706.03762) paper presented the Transformer model. The Transformer reads entire sequences of tokens at once. In a sense, the model is non-directional, while LSTMs read sequentially (left-to-right or right-to-left). The attention mechanism allows for learning contextual relations between words (e.g. `his` in a sentence refers to Jim).\n- (Pre-trained) contextualized word embeddings - [The ELMO paper](https:\/\/arxiv.org\/abs\/1802.05365v2) introduced a way to encode words based on their meaning\/context. Nails has multiple meanings - fingernails and metal nails.\n\nBERT was trained by masking 15% of the tokens with the goal to guess them. An additional objective was to predict the next sentence. Let's look at examples of these tasks:\n\n### Masked Language Modeling (Masked LM)\n\nThe objective of this task is to guess the masked tokens. Let's look at an example, and try to not make it harder than it has to be:\n\nThat's `[mask]` she `[mask]` -> That's what she said\n\n### Next Sentence Prediction (NSP)\n\nGiven a pair of two sentences, the task is to say whether or not the second follows the first (binary classification). Let's continue with the example:\n\n*Input* = `[CLS]` That's `[mask]` she `[mask]`. [SEP] Hahaha, nice! [SEP]\n\n*Label* = *IsNext*\n\n*Input* = `[CLS]` That's `[mask]` she `[mask]`. [SEP] Dwight, you ignorant `[mask]`! [SEP]\n\n*Label* = *NotNext*\n\nThe training corpus was comprised of two entries: [Toronto Book Corpus](https:\/\/arxiv.org\/abs\/1506.06724) (800M words) and English Wikipedia (2,500M words). While the original Transformer has an encoder (for reading the input) and a decoder (that makes the prediction), BERT uses only the decoder.\n\nBERT is simply a pre-trained stack of Transformer Encoders. How many Encoders? We have two versions - with 12 (BERT base) and 24 (BERT Large).\n\n### Is This Thing Useful in Practice?\n\nThe BERT paper was released along with [the source code](https:\/\/github.com\/google-research\/bert) and pre-trained models.\n\nThe best part is that you can do Transfer Learning (thanks to the ideas from OpenAI Transformer) with BERT for many NLP tasks - Classification, Question Answering, Entity Recognition, etc. You can train with small amounts of data and achieve great performance!","d7fdcd18":"And try to use it on the encoding of our sample text:","e94a1aa4":"That's hugely imbalanced, but it's okay. We're going to convert the dataset into negative, neutral and positive sentiment:","35c7df90":"How do we come up with all hyperparameters? The BERT authors have some recommendations for fine-tuning:\n\n- Batch size: 16, 32\n- Learning rate (Adam): 5e-5, 3e-5, 2e-5\n- Number of epochs: 2, 3, 4\n\nWe're going to ignore the number of epochs recommendation but stick with the rest. Note that increasing the batch size reduces the training time significantly, but gives you lower accuracy.\n\nLet's continue with writing a helper function for training our model for one epoch:","9acc7f4c":"We'll use this text to understand the tokenization process:","3ba2260c":"### Special Tokens\n\n`[SEP]` - marker for ending of a sentence\n","a8624eb1":"The `last_hidden_state` is a sequence of hidden states of the last layer of the model. Obtaining the `pooled_output` is done by applying the [BertPooler](https:\/\/github.com\/huggingface\/transformers\/blob\/edf0582c0be87b60f94f41c659ea779876efc7be\/src\/transformers\/modeling_bert.py#L426) on `last_hidden_state`:","4b9a9274":"Let's have a look at the classification report","fcc0068d":"## Data Preprocessing\n\nYou might already know that Machine Learning models don't work with raw text. You need to convert text to numbers (of some sort). BERT requires even more attention (good one, right?). Here are the requirements: \n\n- Add special tokens to separate sentences and do classification\n- Pass sequences of constant length (introduce padding)\n- Create array of 0s (pad token) and 1s (real token) called *attention mask*\n\nThe Transformers library provides (you've guessed it) a wide variety of Transformer models (including BERT). It works with TensorFlow and PyTorch! It also includes prebuild tokenizers that do the heavy lifting for us!\n","0d91a5e1":"Great, no missing values in the score and review texts! Do we have class imbalance?","a00e7a09":"Using those two, we can write our training loop. We'll also store the training history:","cbb2ce18":"We have all building blocks required to create a PyTorch dataset. Let's do it:","65dd0145":"## Data Exploration\n\nWe'll load the Google Play app reviews dataset, that we've put together in the previous part:","e1ca99a3":"Our classifier delegates most of the heavy lifting to the BertModel. We use a dropout layer for some regularization and a fully-connected layer for our output. Note that we're returning the raw output of the last layer since that is required for the cross-entropy loss function in PyTorch to work.\n\nThis should work like any other PyTorch model. Let's create an instance and move it to the GPU:","841dcf84":"We have about 16k examples. Let's check for missing values:","87bd1c48":"We also need to create a couple of data loaders. Here's a helper function to do it:","c1a4d954":"## References\n\n- [BERT Fine-Tuning Tutorial with PyTorch](https:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/)\n- [How to Fine-Tune BERT for Text Classification?](https:\/\/arxiv.org\/pdf\/1905.05583.pdf)\n- [Huggingface Transformers](https:\/\/huggingface.co\/transformers\/)\n- [BERT Explained: State of the art language model for NLP](https:\/\/towardsdatascience.com\/bert-explained-state-of-the-art-language-model-for-nlp-f8b21a9b6270)\n- [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https:\/\/arxiv.org\/abs\/1810.04805)\n- [L11 Language Models - Alec Radford (OpenAI)](https:\/\/www.youtube.com\/watch?v=BnpB3GrpsfM)\n- [The Illustrated BERT, ELMo, and co.](https:\/\/jalammar.github.io\/illustrated-bert\/)","80e16288":"We have to use the tokenizer to encode the text:","f383412e":"## Summary\n\nNice job! WE have learned how to use BERT for sentiment analysis. You built a custom classifier using the Hugging Face library and trained it on our app reviews dataset. Scrappe your own data and just run the model. And see how it works.\n","6491f358":"We can inverse the tokenization to have a look at the special tokens:","d21a9726":"### Predicting on Raw Text\n\nLet's use our model to predict the sentiment of some raw text:","bfb64f6b":"> You can use a cased and uncased version of BERT and tokenizer. I've experimented with both. The cased version works better. Intuitively, that makes sense, since \"BAD\" might convey more sentiment than \"bad\".","0298d6e6":"Looks like it is really hard to classify neutral (3 stars) reviews. And I can tell you from experience, looking at many reviews, those are hard to classify.\n\nWe'll continue with the confusion matrix:","c196390c":"### Choosing Sequence Length\n\nBERT works with fixed-length sequences. We'll use a simple strategy to choose the max length. Let's store the token length of each review:","4777e252":"Now we can look at the confidence of each sentiment of our model:","0cd588d2":"Note that we're storing the state of the best model, indicated by the highest validation accuracy.","57a51d78":"This confirms that our model is having difficulty classifying neutral reviews. It mistakes those for negative and positive at a roughly equal frequency.\n\nThat's a good overview of the performance of our model. But let's have a look at an example from our test data:","f7389320":"The attention mask has the same length:","d72f5384":"# Sentiment Analysis with BERT\n\nIn this Project, you'll learn how to fine-tune BERT for sentiment analysis. You'll do the required text preprocessing (special tokens, padding, and attention masks) and build a Sentiment Classifier using the amazing Transformers library by Hugging Face!\n\n\n\nYou'll learn how to:\n\n- Intuitively understand what BERT\n- Preprocess text data for BERT and build PyTorch Dataset (tokenization, attention masks, and padding)\n- Use Transfer Learning to build Sentiment Classifier using the Transformers library by Hugging Face\n- Evaluate the model on test data\n- Predict sentiment on raw text\n","e8b35a0b":"Let's load a pre-trained [BertTokenizer](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#berttokenizer):","07534e32":"To reproduce the training procedure from the BERT paper, we'll use the [AdamW](https:\/\/huggingface.co\/transformers\/main_classes\/optimizer_schedules.html#adamw) optimizer provided by Hugging Face. It corrects weight decay, so it's similar to the original paper. We'll also use a linear scheduler with no warmup steps:","f3b44c4d":"BERT understands tokens that were in the training set. Everything else can be encoded using the `[UNK]` (unknown) token:","592036c8":"Nice!!! it can generalize our tricky review also.","9e50e846":"\n\nYou can think of the `pooled_output` as a summary of the content, according to BERT. Albeit, you might try and do better. Let's look at the shape of the output:","99516c1d":"Most of the reviews seem to contain less than 128 tokens, but we'll be on the safe side and choose a maximum length of 160.","6622f222":"The balance was (mostly) restored.","441648a9":"## Sentiment Classification with BERT and Hugging Face","b9467df4":"There are a lot of helpers that make using BERT easy with the Transformers library. Depending on the task you might want to use [BertForSequenceClassification](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertforsequenceclassification), [BertForQuestionAnswering](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertforquestionanswering) or something else. \n\nBut who cares, right? We're *hardcore*! We'll use the basic [BertModel](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertmodel) and build our sentiment classifier on top of it. Let's load the model:","ba1ff547":"### Training"}}