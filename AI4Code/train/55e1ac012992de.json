{"cell_type":{"8ba30551":"code","3dcd9b24":"code","103b248f":"code","c6d664eb":"code","e3f5df2d":"code","7cd68dd4":"code","af48fced":"code","f78db243":"code","05f16748":"code","40579164":"code","1464f58f":"code","bbfa7295":"code","a3b4c63f":"code","b87aa5ac":"code","48142d43":"code","4bec7bc1":"code","358b74ed":"code","d4977173":"code","aea853cd":"code","059f94de":"markdown"},"source":{"8ba30551":"\n# refer : https:\/\/www.kaggle.com\/zinovadr\/mnist-fastai-pytorch-0-98720-ps-15-mins-to-run\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3dcd9b24":"from fastai import *\nfrom fastai.vision import *","103b248f":"DATAPATH = Path('\/kaggle\/input\/Kannada-MNIST')","c6d664eb":"for dirname, _, filename in os.walk(DATAPATH):\n    print(filename)","e3f5df2d":"def get_data_labels(csv, label):\n    fileraw = pd.read_csv(csv)\n    labels = fileraw[label].to_numpy()\n    data = fileraw.drop([label],axis=1).to_numpy(dtype=np.float32).reshape((fileraw.shape[0],28,28))\n    data = np.expand_dims(data, axis=1)\n    return data, labels","7cd68dd4":"train_data, train_labels = get_data_labels(DATAPATH\/'train.csv','label')\ntest_data, test_labels = get_data_labels(DATAPATH\/'test.csv','id')\nother_data, other_labels = get_data_labels(DATAPATH\/'Dig-MNIST.csv','label')","af48fced":"print(f' Train:\\tdata shape {train_data.shape}\\tlabel shape {train_labels.shape}\\n \\\nTest:\\tdata shape {test_data.shape}\\tlabel shape {test_labels.shape}\\n \\\nOther:\\tdata shape {other_data.shape}\\tlabel shape {other_labels.shape}')","f78db243":"plt.title(f'Training label: {train_labels[6]}')\nplt.imshow(train_data[6,0])\n","05f16748":"np.random.seed(42)\n\nran_10_pct_idx = (np.random.random_sample(train_labels.shape)) < .001\nprint(np.random.random_sample(train_labels.shape) < 0.01)\n\ntrain_90_labels = train_labels[np.invert(ran_10_pct_idx)]\ntrain_90_data = train_data[np.invert(ran_10_pct_idx)]\n\nvalid_10_labels = train_labels[ran_10_pct_idx]\nvalid_10_data = train_data[ran_10_pct_idx]","40579164":"class ArrayDataset(Dataset):\n    \"Dataset for numpy arrays based on fastai example: \"\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n        self.c = len(np.unique(y))\n    \n    def __len__(self):\n        return len(self.x)\n    \n    def __getitem__(self, i):\n        return self.x[i], self.y[i]","1464f58f":"train_ds = ArrayDataset(train_90_data,train_90_labels)\nvalid_ds = ArrayDataset(valid_10_data,valid_10_labels)\nother_ds = ArrayDataset(other_data, other_labels)\ntest_ds = ArrayDataset(test_data, test_labels)","bbfa7295":"bs = 256\ndatabunch = DataBunch.create(train_ds, valid_ds, test_ds=test_ds, bs=bs)","a3b4c63f":"def conv2(ni,nf,stride=2,ks=5): \n    return conv_layer(ni,nf,stride=stride,ks=ks)","b87aa5ac":"best_architecture = nn.Sequential(\n    conv2(1,32,stride=1,ks=5),\n    conv2(32,32,stride=1,ks=5),\n    conv2(32,32,stride=2,ks=8),\n    nn.Dropout(0.4),\n    \n    conv2(32,64,stride=1,ks=5),\n    conv2(64,64,stride=1,ks=5),\n    conv2(64,64,stride=2,ks=5),\n    nn.Dropout(0.4),\n    \n    Flatten(),\n    nn.Linear(3136, 256),\n    relu(inplace=True),\n    nn.BatchNorm1d(256),\n    nn.Dropout(0.4),\n    nn.Linear(256,10)\n)","48142d43":"learn = Learner(databunch, best_architecture, loss_func = nn.CrossEntropyLoss(), metrics=[accuracy] )","4bec7bc1":"learn.fit_one_cycle(42)","358b74ed":"preds, ids = learn.get_preds(DatasetType.Test)\ny = torch.argmax(preds, dim=1)","d4977173":"submission = pd.DataFrame({'id': ids, 'label': y})\nsubmission.to_csv(path_or_buf=\"submission.csv\", index=False)","aea853cd":"#learn.export()\n# not working","059f94de":"refer : https:\/\/www.kaggle.com\/zinovadr\/mnist-fastai-pytorch-0-98720-ps-15-mins-to-run"}}