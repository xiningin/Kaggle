{"cell_type":{"8dc5644b":"code","d426ca0f":"code","a26a95c5":"code","118c441d":"code","5b21072f":"code","f6a599db":"code","a124d07d":"code","a318db17":"code","916fceb6":"code","51dcb958":"code","6257ac71":"code","bafe4347":"code","7327883e":"code","1c6c60bb":"code","757dbb8a":"code","2bee4e9c":"code","b2a0ca53":"markdown","07fc26c6":"markdown","b3165eb9":"markdown","75bc8e5d":"markdown","d7c0bc08":"markdown","dc29e307":"markdown","22e57d8c":"markdown","8b38b644":"markdown"},"source":{"8dc5644b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread","d426ca0f":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping","a26a95c5":"import os\nos.environ[\"KAGGLE_CONFIG_DIR\"]=\"\/content\"","118c441d":"!kaggle datasets download -d iarunava\/cell-images-for-detecting-malaria","5b21072f":"#In that cell we've taken the main path and put it in a variable\nprimary_path=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/\"","f6a599db":"# Here we display the files located in the main path.\nos.listdir(primary_path)","a124d07d":"# Here we print the number of data in each file that ends with a certain pattern.\nprint(\"uninfected count:  \",len(os.listdir(primary_path+\"\/Uninfected\")))\nprint(\"Parasitized count:  \",len(os.listdir(primary_path+\"\/Parasitized\")))","a318db17":"# To see the dimensions of one of the images that we have, we can use this formula.\nsh=primary_path+\"\/Parasitized\"+\"\/C100P61ThinF_IMG_20150918_144348_cell_141.png\"\nprint(\"shape of image: \",imread(sh).shape)\nimread(sh).max()","916fceb6":"# There is another formula\nsh=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_164.png\"\nprint(\"shape of image: \",imread(sh).shape)\nimread(sh).max()","51dcb958":"import cv2\nparasitized=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_164.png\"\nuninfected=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_25.png\"\n\nplt.figure(1, figsize = (15 , 10))\nplt.subplot(1 , 2 , 1)\nplt.imshow(cv2.imread(uninfected))\nplt.title('Uninfected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.subplot(1 , 2 , 2)\nplt.imshow(cv2.imread(parasitized))\nplt.title('Infected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.show()","6257ac71":"# Now we will do a lot of data through the wonderful algorithm\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                  shear_range = 0.3,\n                  horizontal_flip=True,\n                  vertical_flip=False,\n                  zoom_range = 0.3\n                  )\ntest_datagen  = ImageDataGenerator(rescale = 1.\/255, validation_split=0.2)\n\ntrain_generator = train_datagen.flow_from_directory(directory=primary_path,\n                                                    target_size=(150,150),\n                                                    batch_size =32,\n                                                    color_mode= \"rgb\",\n                                                    class_mode = \"binary\",\n                                                    subset='training')\ntest_generator = test_datagen.flow_from_directory(directory=primary_path,\n                                                    target_size=(150,150),\n                                                    batch_size = 32,\n                                                    color_mode= \"rgb\",\n                                                    class_mode = \"binary\",\n                                                  subset='training')","bafe4347":"len(test_generator)","7327883e":"model = Sequential()\nmodel.add(Conv2D(32, (2,2), input_shape= (150,150,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32, (2,2),))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32, (2,2),))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(100))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2))#output\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss = \"binary_crossentropy\",\n             optimizer = \"adam\",\n             metrics = [\"accuracy\"])","1c6c60bb":"hist = model.fit_generator(generator = train_generator, \n                   steps_per_epoch = len(train_generator),\n                   epochs = 9,\n                   validation_data = test_generator,\n                   validation_steps = len(test_generator))","757dbb8a":"model.summary()","2bee4e9c":"def plotLearningCurve(hist,epochs):\n  epochRange = range(1,epochs+1)\n  plt.plot(epochRange,hist.history['accuracy'])\n  plt.plot(epochRange,hist.history['val_accuracy'])\n  plt.title('Model Accuracy')\n  plt.xlabel('Epoch')\n  plt.ylabel('Accuracy')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()\n\n  plt.plot(epochRange,hist.history['loss'])\n  plt.plot(epochRange,hist.history['val_loss'])\n  plt.title('Model Loss')\n  plt.xlabel('Epoch')\n  plt.ylabel('Loss')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()\n\nplotLearningCurve(hist,9)","b2a0ca53":"*The* algorithm has finally finished the training process, it took a time, but this time was not too bad for the results we got.","07fc26c6":"# Finally, thank you my friend","b3165eb9":"# convoluted neural network","75bc8e5d":"# malaria-cell-image-classification\n\n---\n\n\n\nIn that software paper, I applied the convolutional neural network to data from cells infected and not infected with malaria.\nAnd I got very good results, reaching 95.5% in the test data.","d7c0bc08":"After we finished our data. Now it's time to build our model.","dc29e307":"The data in this process is divided into two sets: data for infected \n\n1.   uninfected\n2.   infected\n\ncells.","22e57d8c":"By looking at the accuracy we got, it was definitely possible to get higher results by tuning the neural network architecture further and adding the padding technique, in addition to the appropriate number of epochs.\n> One more thing. I added the early stop algorithm but I didn't use it, and I don't recommend this technique in this data because while modifying the neural network architecture and while training one of the structures, I noticed that the network stopped learning for up to 8 epochs, but then there was a noticeable increase in accuracy .\n> Also, I think there is a misclassification of this data from the ground up, so I hope the biologist will review this data.","8b38b644":"Nice graphics, isn't it, my friend?\nIn the end, we got very good results, but beware, these results are not taken yet, so it is necessary to review the doctors regarding this matter."}}