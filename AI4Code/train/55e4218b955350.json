{"cell_type":{"7e3a0dc8":"code","4d2e85bc":"code","8fd2bd06":"code","a505fbb0":"code","52789dad":"code","1b72e8b0":"code","f591d4e5":"code","08c35763":"code","a37c295e":"code","a4284e4f":"code","b5cc20e7":"code","5b5119cf":"code","3cb14df5":"code","060c851e":"code","b62faa11":"code","a8696824":"code","9693fe92":"code","c348b0ea":"code","6b21f85a":"code","2bd03f48":"code","e865f4e2":"code","1047ed14":"code","586fa71f":"code","54145419":"code","ebac0d6b":"code","5ac1adc5":"markdown","a4e3baff":"markdown","d1283fc8":"markdown","0ae4b77c":"markdown","9a77fbcc":"markdown"},"source":{"7e3a0dc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d2e85bc":"\nimport numpy as np\nimport pandas as pd\n#Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Machine Learning\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.applications import ResNet50\n#Evaluation\nimport time\nfrom sklearn.metrics import precision_score, recall_score,\\\n                            confusion_matrix, classification_report, \\\n                            accuracy_score, f1_score\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport cv2         \n\n%matplotlib inline\nfrom os import listdir","8fd2bd06":"listdir()","a505fbb0":"data_dir = r'\/kaggle\/input\/chest-xray-covid19-pneumonia\/Data'\ntest_dir = data_dir+'\/test\/'\ntrain_dir = data_dir+'\/train\/'\n\nPneumonaimages = listdir(train_dir + \"\/PNEUMONIA\")\nNormalimages = listdir(train_dir + \"\/NORMAL\")\nCOVID19images = listdir(train_dir + \"\/COVID19\")\n\n\nTest_Normal=os.listdir(test_dir+\"\/NORMAL\")\nTest_Pneumonia=os.listdir(test_dir+\"\/PNEUMONIA\")\nTest_Covid=os.listdir(test_dir+\"\/COVID19\")","52789dad":"plt.figure()\nfor i in range(6):\n    plt.subplot(3, 3, i + 1)\n    plt.imshow(plt.imread(os.path.join(train_dir + \"\/PNEUMONIA\",Pneumonaimages[i])),cmap='gray')\n    plt.title(\"PNEUMONIA\")\n    plt.tight_layout() \nplt.show()","1b72e8b0":"plt.figure(figsize=(10,10))\nfor i in range(6):\n    plt.subplot(3, 3, i + 1)\n    plt.imshow(plt.imread(os.path.join(train_dir + \"\/NORMAL\",Normalimages[i])),cmap='gray')\n    plt.title(\"NORMAL\")\n\n","f591d4e5":"plt.figure(figsize=(10,10))\nfor i in range(6):\n    plt.subplot(3, 3, i + 1)\n    plt.imshow(plt.imread(os.path.join(train_dir + \"\/COVID19\",COVID19images[i])),cmap='gray')\n    plt.title(\"COVID19\")","08c35763":"len(Pneumonaimages)","a37c295e":"len(COVID19images)","a4284e4f":"len(Normalimages)","b5cc20e7":"Normalimages[i]","5b5119cf":"x = np.arange(3)\nplt.bar(x, height=[len(Normalimages),len(Pneumonaimages),len(COVID19images)])\nplt.xticks(x, ['Normalimages','Pneumonaimages','COVID19images'])\nplt.show()","3cb14df5":"from PIL import Image\nnor=[]\nfor filenames in Normalimages:   \n    im = Image.open(os.path.join(train_dir,\"NORMAL\",filenames))\n    [width_nor, height_nor] = im.size\n    nor.append([width_nor, height_nor])\n\nfor i in range(len(nor)):\n    print(\"Normal-xray image\",nor[i])\n","060c851e":"train_datagen = ImageDataGenerator( rescale = 1.0\/255.,\n                                    featurewise_center=True,\n                                    featurewise_std_normalization=True,\n                                    rotation_range=30,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    vertical_flip=True)\ntest_datagen  = ImageDataGenerator( rescale = 1.0\/255.)","b62faa11":"image_shape=224\ntrain_generator = train_datagen.flow_from_directory(train_dir,\n                                                    batch_size=32,\n                                                    class_mode='categorical',\n                                                    target_size=(image_shape, image_shape),\n                                                    color_mode='grayscale',\n                                                    shuffle=True)  \n\ntest_generator =  test_datagen.flow_from_directory (test_dir,\n                                                    batch_size=32,\n                                                    class_mode  = 'categorical',\n                                                    color_mode='grayscale',\n                                                    target_size = (image_shape, image_shape))","a8696824":"Labels=train_generator.class_indices\nprint(Labels)","9693fe92":"model = Sequential()\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3),input_shape=(image_shape, image_shape, 1), activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=(image_shape, image_shape, 1), activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=(image_shape, image_shape, 1), activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Flatten())\n\n\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(3, activation = 'softmax'))\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel.summary()","c348b0ea":"early_stop = EarlyStopping(monitor='val_loss',patience=3, verbose = 1, restore_best_weights=True)\nbatch_size = 32\n","6b21f85a":"history = model.fit(train_generator,epochs=30,\n                              validation_data=test_generator,\n                             callbacks=[early_stop])","2bd03f48":"history.history","e865f4e2":"epochs = [i for i in range(len(history.history['accuracy']))]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Validation Accuracy')\nax[0].set_title('Training & Validation Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'r-o' , label = 'Validation Loss')\nax[1].set_title('Testing Accuracy & Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Training & Validation Loss\")\nplt.show()","1047ed14":"prediction=model.predict(test_generator)\nprediction","586fa71f":"predictions = np.argmax(model.predict(test_generator), axis = -1)\npredictions","54145419":"model.evaluate(test_generator)","ebac0d6b":"model.save('Deeplearning_covid19.h5')\n","5ac1adc5":"Imbalanced dataset","a4e3baff":"# Images size","d1283fc8":"# Exploration","0ae4b77c":"returning the indice of the maximum value out of the prediction","9a77fbcc":"----> images in the data set have different sizes\nWell have to standarize our input"}}