{"cell_type":{"8012a058":"code","501d50a0":"code","fd999e3f":"code","b7447302":"code","ec43256b":"code","45267bac":"code","ddfba143":"code","06d461a2":"code","7c744187":"code","19c1732b":"code","133798fb":"code","63744b80":"code","c7dc7bdf":"markdown","8b722806":"markdown","68596ce5":"markdown","2873535a":"markdown","30abcb33":"markdown","b3df9152":"markdown","3835540c":"markdown","9e314221":"markdown"},"source":{"8012a058":"import pandas as pd\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nfrom matplotlib import pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nimport pkg_resources\nprint(pkg_resources.get_distribution(\"pandas\").version)\n\ndf = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ny = df.iloc[:,1]\nx = df.iloc[:,2:-1]\n\ndf.head()","501d50a0":"x.head()","fd999e3f":"y.head()","b7447302":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 20)","ec43256b":"decision_tree_without_bagging = DecisionTreeClassifier()\ndecision_tree_without_bagging.fit(x_train, y_train)\nprint(decision_tree_without_bagging.score(x_test, y_test))\nfig = plt.figure(figsize=(50,20))\n_ = tree.plot_tree( decision_tree_without_bagging, \n                    class_names=['B', 'M'],\n                    feature_names=x.columns, \n                    filled=True)","45267bac":"decision_tree_with_bagging = BaggingClassifier(n_estimators = 12, random_state = 20)\ndecision_tree_with_bagging.fit(x_train, y_train)\nprint(decision_tree_with_bagging.score(x_test, y_test))\nfig, axes = plt.subplots(figsize = (30,2), nrows = 1, ncols = 12)\nfor index in range(0,12):\n    tree.plot_tree( decision_tree_with_bagging.estimators_[index], \n                    class_names=['B', 'M'],\n                    feature_names=x.columns,\n                    filled=True,\n                    ax = axes[index])\n    axes[index].set_title('Estimator: ' + str(index), fontsize = 11)\nfig.savefig('trees.png')","ddfba143":"KNN_without_bagging = KNeighborsClassifier()\nKNN_without_bagging.fit(x_train, y_train)\nKNN_without_bagging.score(x_test, y_test)","06d461a2":"\nKNN_with_bagging = BaggingClassifier(KNeighborsClassifier(), n_estimators = 13, random_state = 20)\nKNN_with_bagging.fit(x_train, y_train)\nKNN_with_bagging.score(x_test, y_test)","7c744187":"knnb_tests = []\nfor i in range(1, 26):\n    for j in range(1, 23):\n        KNN_with_bagging = BaggingClassifier(KNeighborsClassifier(n_neighbors = i), n_estimators = j, random_state = 20)\n        KNN_with_bagging.fit(x_train, y_train)\n        knnb_tests.append({'neighbors':i, 'estimators':j, 'score':KNN_with_bagging.score(x_test, y_test)})","19c1732b":"df_knnb_tests = pd.DataFrame(knnb_tests)\ndf_knnb_tests.iloc[df_knnb_tests['score'].idxmax()] ","133798fb":"dtb_tests = []\nfor i in range(1, 23):\n    KNN_with_bagging = BaggingClassifier(n_estimators = i, random_state = 20)\n    KNN_with_bagging.fit(x_train, y_train)\n    dtb_tests.append({'n_estimators':i, 'score':KNN_with_bagging.score(x_test, y_test)})","63744b80":"df_dtb_tests = pd.DataFrame(dtb_tests)\ndf_dtb_tests.iloc[df_dtb_tests['score'].idxmax()]","c7dc7bdf":"# Split dos dados","8b722806":"# KNN sem Bagging","68596ce5":"# Carregamento dos dados","2873535a":"# \u00c1rvore de Decis\u00e3o sem Bagging","30abcb33":"# KNN com Bagging","b3df9152":"# Teste com quantidade diferentes de estimadores para Decision Tree + Bagging","3835540c":"# \u00c1rvore de Decis\u00e3o com Bagging","9e314221":"# Teste com quantidade diferentes de estimadores para KNN + Bagging"}}