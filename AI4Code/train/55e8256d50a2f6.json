{"cell_type":{"4fef577f":"code","88a719f8":"code","d19ad2f3":"code","24a8c458":"code","d81d8aca":"code","b842bbb6":"code","f11817a3":"code","aee51a7c":"code","f0cbff01":"code","bdca5f14":"code","9a9f240b":"code","dd3bcbee":"code","077b7fb8":"code","0740210f":"code","110bcbf6":"code","702d7498":"code","af92e1bd":"code","ae246feb":"code","36946ec6":"code","05a83d9b":"code","98910a82":"code","a78c822d":"code","55b4e895":"code","fd1263bd":"code","dddac518":"code","62dfbdc9":"code","186cb2b3":"code","8ed2ff80":"code","a533227f":"code","dad6c562":"code","597c3d82":"code","09c25939":"code","af3c3b8e":"code","52cef4d6":"code","bace35cd":"code","6b215f78":"code","a59ccf64":"code","c08897ed":"code","e0b87b30":"code","cc0824ca":"code","75fb5378":"code","c21d6bfc":"code","5f3e5bed":"code","9dd28dcf":"markdown","433429b1":"markdown","5b0f72a9":"markdown","976939a0":"markdown","fa49d429":"markdown","e70cf131":"markdown","bbb110fd":"markdown","254f25db":"markdown","df70effa":"markdown","76d15063":"markdown","742e2ce1":"markdown","fd269fc8":"markdown","055ccde4":"markdown","c594b15e":"markdown","582f89d0":"markdown","0f5634e0":"markdown","54b70589":"markdown","236f2db4":"markdown","afefee37":"markdown","a3bd5108":"markdown","5eebd55b":"markdown","1bf9560b":"markdown"},"source":{"4fef577f":"# A thing\n2","88a719f8":"# Use print to show multiple things in the same cell\n# Note that you can use single or double quotes for strings\nprint(2)\nprint('hello')","d19ad2f3":"# Things can be stored as variables\na = 2\nb = 'hello'\nc = True  # This is case sensitive\nprint(a, b, c)","24a8c458":"# The type function tells us the type of thing we have\nprint(type(a))\nprint(type(b))\nprint(type(c))","d81d8aca":"# What happens when a new variable point to a previous variable?\na = 1\nb = a\na = 2\n## What is b?\nprint(a,b)","b842bbb6":"a= 3\nb=4 \na,b = b,a\nprint(a,b)","f11817a3":"# Standard math operators work as expected on numbers\na = 2\nb = 3\nprint(a + b)\nprint(a * b)\nprint(a ** b)  # a to the power of b (a^b does something completely different!)\nprint(a \/ b)   # Careful with dividing integers if you use Python 2","aee51a7c":"# There are also operators for strings\nprint('hello' + 'world')\nprint('hello' * 3)\n#print('hello' \/ 3)  # You can't do this!","f0cbff01":"# Boolean operators compare two things\na = (1 > 3)\nb = (3 == 3)\nprint(a)\nprint(b)\nprint(a or b)\nprint(a and b)","bdca5f14":"# There are thousands of functions that operate on things\nprint(type(3))\nprint(len('hello'))\nprint(round(3.3))","9a9f240b":"round?\n\nround(3.14159, 2)","dd3bcbee":"# Many useful functions are in external packages\n# Let's meet numpy\nimport numpy as np","077b7fb8":"# To see what's in a package, type the name, a period, then hit tab\n#np?\nnp.","0740210f":"# Some examples of numpy functions and \"things\"\nprint(np.sqrt(4))\nprint(np.pi)  # Not a function, just a variable\nprint(np.sin(np.pi))","110bcbf6":"# A string is actually an object\na = 'hello, world'\nprint(type(a))","702d7498":"# Objects have bundled methods\n#a.\nprint(a.capitalize())\nprint(a.replace('l', 'X'))","af92e1bd":"# Lists are created with square bracket syntax\na = ['blueberry', 'strawberry', 'pineapple']\nprint(a, type(a))","ae246feb":"# Lists (and all collections) are also indexed with square brackets\n# NOTE: The first index is zero, not one\nprint(a[0])\nprint(a[1])","36946ec6":"## You can also count from the end of the list\nprint('last item is:', a[-1])\nprint('second to last item is:', a[-2])","05a83d9b":"# you can access multiple items from a list by slicing, using a colon between indexes\n# NOTE: The end value is not inclusive\nprint('a =', a)\nprint('get first two:', a[0:2])","98910a82":"# You can leave off the start or end if desired\nprint(a[:2])\nprint(a[2:])\nprint(a[:])\nprint(a[:-1])","a78c822d":"# Lists are objects, like everything else, and have methods such as append\na.append('banana')\nprint(a)\n\na.append([1,2])\nprint(a)\n\na.pop()\nprint(a)","55b4e895":"a = 1\nb = a\na = 2\n## What is b?\nprint('What is b?', b)\n\na = [1, 2, 3]\nb = a\nprint('original b', b)\na[0] = 42\nprint('What is b after we change a ?', b)","fd1263bd":"xy = (23, 45)\nprint(xy[0])\nxy[0] = \"this won't work with a tuple\"","dddac518":"# Make a dictionary of model parameters\nconvertors = {'inches_in_feet' : 12,\n              'inches_in_metre' : 39}\n\nprint(convertors)\nprint(convertors['inches_in_feet'])","62dfbdc9":"## Add a new key:value pair\nconvertors['metres_in_mile'] = 1609.34\nprint(convertors)","186cb2b3":"# Raise a KEY error\nprint(convertors['blueberry'])","8ed2ff80":"# A basic for loop - don't forget the white space!\nwordlist = ['hi', 'hello', 'bye']\nfor word in wordlist:\n    print(word + '!')","a533227f":"# Indentation error: Fix it!\nfor word in wordlist:\n    new_word = word.capitalize()\n   print(new_word + '!') # Bad indent","dad6c562":"# Sum all of the values in a collection using a for loop\nnumlist = [1, 4, 77, 3]\n\ntotal = 0\nfor num in numlist:\n    total = total + num\n    \nprint(\"Sum is\", total)","597c3d82":"# Often we want to loop over the indexes of a collection, not just the items\nprint(wordlist)\n\nfor i, word in enumerate(wordlist):\n    print(i, word, wordlist[i])","09c25939":"# While loops are useful when you don't know how many steps you will need,\n# and want to stop once a certain condition is met.\nstep = 0\nprod = 1\nwhile prod < 100:\n    step = step + 1\n    prod = prod * 2\n    print(step, prod)\n    \nprint('Reached a product of', prod, 'at step number', step)","af3c3b8e":"# A simple if statement\nx = 3\nif x > 0:\n    print('x is positive')\nelif x < 0:\n    print('x is negative')\nelse:\n    print('x is zero')","52cef4d6":"# If statements can rely on boolean variables\nx = -1\ntest = (x > 0)\nprint(type(test)); print(test)\n\nif test:\n    print('Test was true')","bace35cd":"# We've been using functions all day\nx = 3.333333\nprint(round(x, 2))\nprint(np.sin(x))","6b215f78":"# It's very easy to write your own functions\ndef multiply(x, y):\n    return x*y","a59ccf64":"# Once a function is \"run\" and saved in memory, it's available just like any other function\nprint(type(multiply))\nprint(multiply(4, 3))","c08897ed":"# It's useful to include docstrings to describe what your function does\ndef say_hello(time, people):\n    '''\n    Function says a greeting. Useful for engendering goodwill\n    '''\n    return 'Good ' + time + ', ' + people","e0b87b30":"say_hello('afternoon', 'friends')","cc0824ca":"# All arguments must be present, or the function will return an error\nsay_hello('afternoon')","75fb5378":"# Keyword arguments can be used to make some arguments optional by giving them a default value\n# All mandatory arguments must come first, in order\ndef say_hello(time, people='friends'):\n    return 'Good ' + time + ', ' + people","c21d6bfc":"say_hello('afternoon')","5f3e5bed":"say_hello('afternoon', 'students')","9dd28dcf":"## 3. Collections of things\n\nWhile it is interesting to explore your own height, in science we work with larger  slightly more complex datasets. In this example, we are interested in the characteristics and distribution of heights. Python provides us with a number of objects to handle collections of things.\n\nProbably 99% of your work in scientific Python will use one of four types of collections:\n`lists`, `tuples`, `dictionaries`, and `numpy arrays`. We'll look quickly at each of these and what\nthey can do for you.","433429b1":"__TIP:__ Many useful functions are not in the Python built in library, but are in external\nscientific packages. These need to be imported into your Python notebook (or program) before\nthey can be used. Probably the most important of these are numpy and matplotlib.","5b0f72a9":"## 1. Individual things\n\nThe most basic component of any programming language are \"things\", also called variables or\n(in special cases) objects.\n\nThe most common basic \"things\" in Python are integers, floats, strings, booleans, and\nsome special objects of various types. We'll meet many of these as we go through the lesson.","976939a0":"### 2.2 Use a function\n\nThese will be very familiar to anyone who has programmed in any language, and work like you\nwould expect.","fa49d429":"__TIP:__ To quickly create a new cell below an existing one, type ESC then b.\nOther shortcuts for making, deleting, and moving cells are in the menubar at the top of the\nscreen.","e70cf131":"__TIP:__ To find out what a function does, you can type it's name and then a question mark to\nget a pop up help window. Or, to see what arguments it takes, you can type its name, an open\nparenthesis, and hit tab.","bbb110fd":"## 4. Repeating yourself\n\nSo far, everything that we've done could, in principle, be done by hand calculation. In this section\nand the next, we really start to take advantage of the power of programming languages to do things\nfor us automatically.\n\nWe start here with ways to repeat yourself. The two most common ways of doing this are known as for\nloops and while loops. For loops in Python are useful when you want to cycle over all of the items\nin a collection (such as all of the elements of an array), and while loops are useful when you want to\ncycle for an indefinite amount of time until some condition is met.\n\nThe basic examples below will work for looping over lists, tuples, and arrays. Looping over dictionaries\nis a bit different, since there is a key and a value for each item in a dictionary. Have a look at the\nPython docs for more information.","254f25db":"### 2.3 Use a method\n\nBefore we get any farther into the Python language, we have to say a word about \"objects\". We\nwill not be teaching object oriented programming in this workshop, but you will encounter objects\nthroughout Python (in fact, even seemingly simple things like ints and strings are actually\nobjects in Python).\n\nIn the simplest terms, you can think of an object as a small bundled \"thing\" that contains within\nitself both data and functions that operate on that data. For example, strings in Python are\nobjects that contain a set of characters and also various functions that operate on the set of\ncharacters. When bundled in an object, these functions are called \"methods\".\n\nInstead of the \"normal\" `function(arguments)` syntax, methods are called using the\nsyntax `variable.method(arguments)`.","df70effa":"## 5. Making choices\n\nOften we want to check if a condition is True and take one action if it is, and another action if the\ncondition is False. We can achieve this in Python with an if statement.\n\n__TIP:__ You can use any expression that returns a boolean value (True or False) in an if statement.\nCommon boolean operators are ==, !=, <, <=, >, >=. You can also use `is` and `is not` if you want to\ncheck if two variables are identical in the sense that they are stored in the same location in memory.","76d15063":"# Python Basics","742e2ce1":"# __TIP:__ A 'gotcha' for some new Python users is that many collections, including lists,\nactually store pointers to data, not the data itself. \n\nRemember when we set `b=a` and then changed `a`?\n\nWhat happens when we do this in a list?\n\n__HELP:__ look into the `copy` module\n","fd269fc8":"## 6. Creating chunks with functions and modules\n\nOne way to write a program is to simply string together commands, like the ones described above, in a long\nfile, and then to run that file to generate your results. This may work, but it can be cognitively difficult\nto follow the logic of programs written in this style. Also, it does not allow you to reuse your code\neasily - for example, what if we wanted to run our logistic growth model for several different choices of\ninitial parameters?\n\nThe most important ways to \"chunk\" code into more manageable pieces is to create functions and then\nto gather these functions into modules, and eventually packages. Below we will discuss how to create\nfunctions and modules. A third common type of \"chunk\" in Python is classes, but we will not be covering\nobject-oriented programming in this workshop.","055ccde4":"**Docstrings**: A docstring is a special type of comment that tells you what a function does.  You can see them when you ask for help about a function.","c594b15e":"__TIP:__ Once we start really generating useful and large collections of data, it becomes unwieldy to\ninspect our results manually. The code below shows how to make a very simple plot of an array.\nWe'll do much more plotting later on, this is just to get started.","582f89d0":"\n## 2. Commands that operate on things\n\nJust storing data in variables isn't much use to us. Right away, we'd like to start performing\noperations and manipulations on data and variables.\n\nThere are three very common means of performing an operation on a thing.","0f5634e0":"### Anatomy of a traceback error\n\nTraceback errors are `raised` when you try to do something with code it isn't meant to do.  It is also meant to be informative, but like many things, it is not always as informative as we would like.\n\nLooking at our error:\n\n    TypeError                                 Traceback (most recent call last)\n    <ipython-input-25-4d15943dd557> in <module>()\n          1 xy = (23, 45)\n          2 xy[0]\n    ----> 3 xy[0] = 'this wont work with a tuple'\n\n    TypeError: 'tuple' object does not support item assignment\n    \n1. The command you tried to run raise a **TypeError**  This suggests you are using a variable in a way that its **Type** doesnt support\n2. the arrow ----> points to the line where the error occurred, In this case on line 3 of your code form the above line.\n3. Learning how to **read** a traceback error is an important skill to develop, and helps you know how to ask questions about what has gone wrong in your code.\n\n\n","54b70589":"**Note on indentation**: Notice the indentation once we enter the for loop.  Every idented statement after the for loop declaration is part of the for loop.  This rule holds true for while loops, if statements, functions, etc. Required identation is one of the reasons Python is such a beautiful language to read.\n\nIf you do not have consistent indentation you will get an `IndentationError`.  Fortunately, most code editors will ensure your indentation is correction.\n\n__NOTE__ In Python the default is to use four (4) spaces for each indentation, most editros can be configured to follow this guide.","236f2db4":"### 3.1 Lists\n\nLists are probably the handiest and most flexible type of container. \n\nLists are declared with square brackets []. \n\nIndividual elements of a list can be selected using the syntax `a[ind]`.","afefee37":"__TIP:__ To run the code in a cell quickly, press Ctrl-Enter.","a3bd5108":"### 3.2 Tuples\n\nWe won't say a whole lot about tuples except to mention that they basically work just like lists, with\ntwo major exceptions:\n\n1. You declare tuples using () instead of []\n1. Once you make a tuple, you can't change what's in it (referred to as immutable)\n\nYou'll see tuples come up throughout the Python language, and over time you'll develop a feel for when\nto use them. \n\nIn general, they're often used instead of lists:\n\n1. to group items when the position in the collection is critical, such as coord = (x,y)\n1. when you want to make prevent accidental modification of the items, e.g. shape = (12,23)","5eebd55b":"### 2.1 Use an operator\n\nAll of the basic math operators work like you think they should for numbers. They can also\ndo some useful operations on other things, like strings. There are also boolean operators that\ncompare quantities and give back a `bool` variable as a result.","1bf9560b":"### 3.3 Dictionaries\n\nDictionaries are the collection to use when you want to store and retrieve things by their names\n(or some other kind of key) instead of by their position in the collection. A good example is a set\nof model parameters, each of which has a name and a value. Dictionaries are declared using {}."}}