{"cell_type":{"49775e8f":"code","bc222f37":"code","00ec37a5":"code","efbc6ef6":"code","5d83fdcf":"code","69bc2df7":"code","d700a21c":"code","c5cf3fa5":"code","5618671c":"code","fbea3f13":"code","a925f37b":"code","aec55095":"code","c70e66b4":"code","7f93c586":"code","de3811c1":"code","fade3522":"code","dc6c3e6a":"code","84d7b983":"code","45529700":"code","2e7c3f51":"code","c45bb054":"code","2971f015":"code","cb55f2eb":"code","34840d85":"code","88432fd5":"code","99587e7b":"code","cccb97fc":"code","a4cba0a3":"code","7096f168":"code","815d610f":"code","eb57f58d":"code","4c0ea5e4":"code","9486d38e":"code","0857ed2e":"code","9af78da4":"code","aaeb8306":"code","b8b1a706":"code","01f3e85f":"code","b553c252":"markdown","f5060d72":"markdown","1c3775d5":"markdown","40c9633e":"markdown","31600e8c":"markdown","e04e193e":"markdown","488afb62":"markdown","3f28c912":"markdown","ffd85a77":"markdown","6b2fca12":"markdown","f8a5ad2d":"markdown","60069159":"markdown"},"source":{"49775e8f":"import numpy as np \nimport pandas as pd\nimport matplotlib.pylab as plt\nimport os\nfrom os import listdir\nfrom os.path import isfile, join\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model, load_model","bc222f37":"# Resized images directory\ndir_2019_images = \"\/kaggle\/input\/resizedsiimisic\/train_resized\/\"\nimages_2019 = [f for f in listdir(dir_2019_images) if isfile(join(dir_2019_images, f))]\ndir_2019_aug_images = \"\/kaggle\/input\/models\/oversampling\/train_resized\/\"\n\n# CSV files\ntrain_df = pd.read_csv('\/kaggle\/input\/resizedsiimisic\/train.csv')\n\nundersampling_calib = pd.read_csv('\/kaggle\/input\/models\/random_undersampling\/calib.csv')\nweighted_calib = pd.read_csv('\/kaggle\/input\/models\/weighted_loss\/calib.csv')\noversampling_calib = pd.read_csv('\/kaggle\/input\/models\/oversampling\/calib.csv')\n\nundersampling_test = pd.read_csv('\/kaggle\/input\/models\/random_undersampling\/test.csv')\nweighted_test = pd.read_csv('\/kaggle\/input\/models\/weighted_loss\/test.csv')\noversampling_test = pd.read_csv('\/kaggle\/input\/models\/oversampling\/test.csv')\n\n\n# Load models\nundersampling = load_model('\/kaggle\/input\/models\/random_undersampling\/undersampling_model.h5')\nweighted = load_model('\/kaggle\/input\/models\/weighted_loss\/weighted_model.h5')\noversampling = load_model('\/kaggle\/input\/models\/oversampling\/oversampling_model.h5')","00ec37a5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.isotonic import IsotonicRegression\nfrom sklearn.metrics import brier_score_loss, log_loss\n!pip install ml_insights\nimport ml_insights as mli\n!pip install betacal\nfrom betacal import BetaCalibration","efbc6ef6":"undersampling_calib[\"target\"] = undersampling_calib['target'].astype(str)\nweighted_calib[\"target\"] = weighted_calib['target'].astype(str)\noversampling_calib[\"target\"] = oversampling_calib['target'].astype(str)\n\nundersampling_test[\"target\"] = undersampling_test['target'].astype(str)\nweighted_test[\"target\"] = weighted_test['target'].astype(str)\noversampling_test[\"target\"] = oversampling_test['target'].astype(str)","5d83fdcf":"datagen = ImageDataGenerator(rescale=1.\/255.)\n\ncalib_generator_under = datagen.flow_from_dataframe(\n    dataframe=undersampling_calib,\n    directory=dir_2019_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=True,\n    class_mode=\"binary\"\n)\n\ncalib_generator_weight = datagen.flow_from_dataframe(\n    dataframe=weighted_calib,\n    directory=dir_2019_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=True,\n    class_mode=\"binary\"\n)\n\ncalib_generator_over = datagen.flow_from_dataframe(\n    dataframe=oversampling_calib,\n    directory=dir_2019_aug_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=True,\n    class_mode=\"binary\"\n)","69bc2df7":"test_generator_under = datagen.flow_from_dataframe(\n    dataframe=undersampling_test,\n    directory=dir_2019_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=True,\n    class_mode=\"binary\"\n)\n\ntest_generator_weight = datagen.flow_from_dataframe(\n    dataframe=weighted_test,\n    directory=dir_2019_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=True,\n    class_mode=\"binary\"\n)\n\ntest_generator_over = datagen.flow_from_dataframe(\n    dataframe=oversampling_test,\n    directory=dir_2019_aug_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=True,\n    class_mode=\"binary\"\n)","d700a21c":"true_labels_calib_under = undersampling_calib['target']\ntrue_labels_calib_weight = weighted_calib['target']\ntrue_labels_calib_over = oversampling_calib['target']\n\ntrue_labels_test_under = undersampling_test['target']\ntrue_labels_test_weight = weighted_test['target']\ntrue_labels_test_over = oversampling_test['target']\n\npredict_undersampling_calib = undersampling.predict(calib_generator_under, verbose=1)\npredict_weighted_calib = weighted.predict(calib_generator_weight, verbose=1)\npredict_oversampling_calib = oversampling.predict(calib_generator_over, verbose=1)\n\npredict_undersampling_test = undersampling.predict(test_generator_under, verbose=1)\npredict_weighted_test = weighted.predict(test_generator_weight, verbose=1)\npredict_oversampling_test = oversampling.predict(test_generator_over, verbose=1)","c5cf3fa5":"print('Calibracion Brier Score (undersampling) :', brier_score_loss(true_labels_calib_under, predict_undersampling_calib))\nprint('Calibracion Brier Score (weighted) :', brier_score_loss(true_labels_calib_weight, predict_weighted_calib))\nprint('Calibracion Brier Score (oversampling) :', brier_score_loss(true_labels_calib_over, predict_oversampling_calib))\nprint(\"-----------------------\")\nprint('Test Brier Score (undersampling) :', brier_score_loss(true_labels_test_under, predict_undersampling_test))\nprint('Test Brier Score (weighted) :', brier_score_loss(true_labels_test_weight, predict_weighted_test))\nprint('Test Brier Score (oversampling) :', brier_score_loss(true_labels_test_over, predict_oversampling_test))","5618671c":"true_labels_calib_under = true_labels_calib_under.to_numpy().astype(float)\ntrue_labels_calib_weight = true_labels_calib_weight.to_numpy().astype(float)\ntrue_labels_calib_over = true_labels_calib_over.to_numpy().astype(float)\n\ntrue_labels_test_under = true_labels_test_under.to_numpy().astype(float)\ntrue_labels_test_weight = true_labels_test_weight.to_numpy().astype(float)\ntrue_labels_test_over = true_labels_test_over.to_numpy().astype(float)","fbea3f13":"def plot_reliability_diagram(true_labels, predict_labels):\n    plt.figure(figsize=(15,5))\n    rd = mli.plot_reliability_diagram(true_labels, predict_labels, show_histogram=True)\n    return rd","a925f37b":"rd = plot_reliability_diagram(np.array(true_labels_calib_under), predict_undersampling_calib.ravel())\nprint('Reliability Diagram Undersampling on Calibration Data')","aec55095":"rd = plot_reliability_diagram(np.array(true_labels_calib_weight), predict_weighted_calib.ravel())\nprint('Reliability Diagram Weighted on Calibration Data')","c70e66b4":"rd = plot_reliability_diagram(np.array(true_labels_calib_over), predict_oversampling_calib.ravel())\nprint('Reliability Diagram Oversampling on Calibration Data')","7f93c586":"rd = plot_reliability_diagram(np.array(true_labels_test_under),predict_undersampling_test.ravel())\nprint('Reliability Diagram Undersampling on Test Data')","de3811c1":"rd = plot_reliability_diagram(np.array(true_labels_test_weight),predict_weighted_test.ravel())\nprint('Reliability Diagram Weighted on Test Data')","fade3522":"rd = plot_reliability_diagram(np.array(true_labels_test_over),predict_oversampling_test.ravel())\nprint('Reliability Diagram Oversampling on Test Data')","dc6c3e6a":"# Fit Platt scaling (logistic calibration)\nlr_under = LogisticRegression(C=99999999999, solver='lbfgs')\nlr_under.fit(predict_undersampling_calib.reshape(-1,1), np.array(true_labels_calib_under))\n\nlr_weight = LogisticRegression(C=99999999999, solver='lbfgs')\nlr_weight.fit(predict_weighted_calib.reshape(-1,1), np.array(true_labels_calib_weight))\n\nlr_over = LogisticRegression(C=99999999999, solver='lbfgs')\nlr_over.fit(predict_oversampling_calib.reshape(-1,1), np.array(true_labels_calib_over))","84d7b983":"calibset_platt_probs_under = lr_under.predict_proba(predict_undersampling_calib.reshape(-1,1))[:,1]\ntestset_platt_probs_under = lr_under.predict_proba(predict_undersampling_test.reshape(-1,1))[:,1]\n\ncalibset_platt_probs_weight = lr_weight.predict_proba(predict_weighted_calib.reshape(-1,1))[:,1]\ntestset_platt_probs_weight = lr_weight.predict_proba(predict_weighted_test.reshape(-1,1))[:,1]\n\ncalibset_platt_probs_over = lr_over.predict_proba(predict_oversampling_calib.reshape(-1,1))[:,1]\ntestset_platt_probs_over = lr_over.predict_proba(predict_oversampling_test.reshape(-1,1))[:,1]","45529700":"iso_under = IsotonicRegression(out_of_bounds = 'clip')\niso_under.fit(predict_undersampling_calib.ravel(), np.array(true_labels_calib_under))\n\niso_weight = IsotonicRegression(out_of_bounds = 'clip')\niso_weight.fit(predict_weighted_calib.ravel(), np.array(true_labels_calib_weight))\n\niso_over = IsotonicRegression(out_of_bounds = 'clip')\niso_over.fit(predict_oversampling_calib.ravel(), np.array(true_labels_calib_over))","2e7c3f51":"calibset_iso_probs_under = iso_under.predict(predict_undersampling_calib.ravel())\ntestset_iso_probs_under = iso_under.predict(predict_undersampling_test.ravel())\n\ncalibset_iso_probs_weight = iso_weight.predict(predict_weighted_calib.ravel())\ntestset_iso_probs_weight = iso_weight.predict(predict_weighted_test.ravel())\n\ncalibset_iso_probs_over = iso_over.predict(predict_oversampling_calib.ravel())\ntestset_iso_probs_over = iso_over.predict(predict_oversampling_test.ravel())","c45bb054":"# Fit three-parameter beta calibration\nbc_under = BetaCalibration()\nbc_under.fit(predict_undersampling_calib.ravel(), np.array(true_labels_calib_under))\n\nbc_weight = BetaCalibration()\nbc_weight.fit(predict_weighted_calib.ravel(), np.array(true_labels_calib_weight))\n\nbc_over = BetaCalibration()\nbc_over.fit(predict_oversampling_calib.ravel(), np.array(true_labels_calib_over))","2971f015":"calibset_bc_probs_under = bc_under.predict(predict_undersampling_calib.ravel())\ntestset_bc_probs_under = bc_under.predict(predict_undersampling_test.ravel())\n\ncalibset_bc_probs_weight = bc_under.predict(predict_weighted_calib.ravel())\ntestset_bc_probs_weight = bc_under.predict(predict_weighted_test.ravel())\n\ncalibset_bc_probs_over = bc_over.predict(predict_oversampling_calib.ravel())\ntestset_bc_probs_over = bc_over.predict(predict_oversampling_test.ravel())","cb55f2eb":"# Define SplineCalib object\nsplinecalib_under = mli.SplineCalib()\nsplinecalib_under.fit(predict_undersampling_calib.ravel(), np.array(true_labels_calib_under))\n\nsplinecalib_weight = mli.SplineCalib()\nsplinecalib_weight.fit(predict_weighted_calib.ravel(), np.array(true_labels_calib_weight))\n\nsplinecalib_over = mli.SplineCalib()\nsplinecalib_over.fit(predict_oversampling_calib.ravel(), np.array(true_labels_calib_over))","34840d85":"calibset_splinecalib_probs_under = splinecalib_under.predict(predict_undersampling_calib.ravel())\ntestset_splinecalib_probs_under = splinecalib_under.predict(predict_undersampling_test.ravel())\n\ncalibset_splinecalib_probs_weight = splinecalib_weight.predict(predict_weighted_calib.ravel())\ntestset_splinecalib_probs_weight = splinecalib_weight.predict(predict_weighted_test.ravel())\n\ncalibset_splinecalib_probs_over = splinecalib_over.predict(predict_oversampling_calib.ravel())\ntestset_splinecalib_probs_over = splinecalib_over.predict(predict_oversampling_test.ravel())","88432fd5":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), predict_undersampling_test.ravel())\nplt.title('Reliability Diagram on Test Data\\n before Platt Calibration')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), testset_platt_probs_under.ravel())\nplt.title('Reliability Diagram on Test Data\\n after Platt Calibration')","99587e7b":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), predict_undersampling_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, iso_under.predict(tvec), label='Isotonic')\nplt.title('Isotonic Calibration Curve on Test Data')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), testset_iso_probs_under)\nplt.title('Reliability Diagram on Test Data\\n after Isotonic Calibration')","cccb97fc":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), predict_undersampling_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, bc_under.predict(tvec))\nplt.title('Beta Calibration Curve on Test Set')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), testset_bc_probs_under)\nplt.title('Reliability Diagram on Test Data\\n after Beta Calibration')","a4cba0a3":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), predict_undersampling_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, splinecalib_under.predict(tvec))\nplt.title('SplineCalib Calibration Curve on Test Set')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_under), testset_splinecalib_probs_under)\nplt.title('Reliability Diagram on Test Data\\n after SplineCalib Calibration')","7096f168":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), predict_weighted_test.ravel())\nplt.title('Reliability Diagram on Test Data\\n before Platt Calibration')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), testset_platt_probs_weight.ravel())\nplt.title('Reliability Diagram on Test Data\\n after Platt Calibration')","815d610f":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), predict_weighted_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, iso_weight.predict(tvec), label='Isotonic')\nplt.title('Isotonic Calibration Curve on Test Data')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), testset_iso_probs_weight)\nplt.title('Reliability Diagram on Test Data\\n after Isotonic Calibration')","eb57f58d":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), predict_weighted_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, bc_weight.predict(tvec))\nplt.title('Beta Calibration Curve on Test Set')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), testset_bc_probs_weight)\nplt.title('Reliability Diagram on Test Data\\n after Beta Calibration')","4c0ea5e4":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), predict_weighted_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, splinecalib_weight.predict(tvec))\nplt.title('SplineCalib Calibration Curve on Test Set')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_weight), testset_splinecalib_probs_weight)\nplt.title('Reliability Diagram on Test Data\\n after SplineCalib Calibration')","9486d38e":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), predict_oversampling_test.ravel())\nplt.title('Reliability Diagram on Test Data\\n before Platt Calibration')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), testset_platt_probs_over.ravel())\nplt.title('Reliability Diagram on Test Data\\n after Platt Calibration')","0857ed2e":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), predict_oversampling_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, iso_over.predict(tvec), label='Isotonic')\nplt.title('Isotonic Calibration Curve on Test Data')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), testset_iso_probs_over)\nplt.title('Reliability Diagram on Test Data\\n after Isotonic Calibration')","9af78da4":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), predict_oversampling_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, bc_over.predict(tvec))\nplt.title('Beta Calibration Curve on Test Set')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), testset_bc_probs_over)\nplt.title('Reliability Diagram on Test Data\\n after Beta Calibration')","aaeb8306":"plt.subplot(1, 2, 1)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), predict_oversampling_test.ravel())\ntvec = np.linspace(.01, .99, 99)\nplt.plot(tvec, splinecalib_over.predict(tvec))\nplt.title('SplineCalib Calibration Curve on Test Set')\n\nplt.subplot(1, 2, 2)\nmli.plot_reliability_diagram(np.array(true_labels_test_over), testset_splinecalib_probs_over)\nplt.title('Reliability Diagram on Test Data\\n after SplineCalib Calibration')","b8b1a706":"print(\"Undersampling model\")\nprint('Uncalibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_under, predict_undersampling_test.ravel())))\nprint('Platt calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_under, testset_platt_probs_under)))\nprint('Isotonic calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_under, testset_iso_probs_under)))\nprint('Beta calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_under, testset_bc_probs_under)))\nprint('Spline calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_under, testset_splinecalib_probs_under)))\nprint(\"-----------------------\")\nprint(\"Weighted model\")\nprint('Uncalibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_weight, predict_weighted_test.ravel())))\nprint('Platt calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_weight, testset_platt_probs_weight)))\nprint('Isotonic calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_weight, testset_iso_probs_weight)))\nprint('Beta calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_weight, testset_bc_probs_weight)))\nprint('Spline calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_weight, testset_splinecalib_probs_weight)))\nprint(\"-----------------------\")\nprint(\"Oversampling model\")\nprint('Uncalibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_over, predict_oversampling_test.ravel())))\nprint('Platt calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_over, testset_platt_probs_over)))\nprint('Isotonic calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_over, testset_iso_probs_over)))\nprint('Beta calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_over, testset_bc_probs_over)))\nprint('Spline calibrated Brier Score = {}'.format(brier_score_loss(true_labels_test_over, testset_splinecalib_probs_over)))","01f3e85f":"print(\"Undersampling model\")\nprint('Uncalibrated log_loss = {}'.format(log_loss(true_labels_test_under, predict_undersampling_test.ravel())))\nprint('Platt calibrated log_loss = {}'.format(log_loss(true_labels_test_under, testset_platt_probs_under)))\nprint('Isotonic calibrated log_loss = {}'.format(log_loss(true_labels_test_under, testset_iso_probs_under)))\nprint('Beta calibrated log_loss = {}'.format(log_loss(true_labels_test_under, testset_bc_probs_under)))\nprint('Spline calibrated log_loss = {}'.format(log_loss(true_labels_test_under, testset_splinecalib_probs_under)))\nprint(\"-----------------------\")\nprint(\"Weighted model\")\nprint('Uncalibrated log_loss = {}'.format(log_loss(true_labels_test_weight, predict_weighted_test.ravel())))\nprint('Platt calibrated log_loss = {}'.format(log_loss(true_labels_test_weight, testset_platt_probs_weight)))\nprint('Isotonic calibrated log_loss = {}'.format(log_loss(true_labels_test_weight, testset_iso_probs_weight)))\nprint('Beta calibrated log_loss = {}'.format(log_loss(true_labels_test_weight, testset_bc_probs_weight)))\nprint('Spline calibrated log_loss = {}'.format(log_loss(true_labels_test_weight, testset_splinecalib_probs_weight)))\nprint(\"-----------------------\")\nprint(\"Oversampling model\")\nprint('Uncalibrated log_loss = {}'.format(log_loss(true_labels_test_over, predict_oversampling_test.ravel())))\nprint('Platt calibrated log_loss = {}'.format(log_loss(true_labels_test_over, testset_platt_probs_over)))\nprint('Isotonic calibrated log_loss = {}'.format(log_loss(true_labels_test_over, testset_iso_probs_over)))\nprint('Beta calibrated log_loss = {}'.format(log_loss(true_labels_test_over, testset_bc_probs_over)))\nprint('Spline calibrated log_loss = {}'.format(log_loss(true_labels_test_over, testset_splinecalib_probs_over)))","b553c252":"#### M\u00e9todo 3: Beta Calibration","f5060d72":"#### M\u00e9todo 1: Platt Scaling","1c3775d5":"#### M\u00e9tricas","40c9633e":"## <font color=red>2. <\/font>Calibraci\u00f3n del modelo de funci\u00f3n de p\u00e9rdida ponderada","31600e8c":"#### Se cargan los modelos y los CSV de prueba y calibraci\u00f3n.","e04e193e":"#### Se aplican los m\u00e9todos de calibraci\u00f3n sobre los tres modelos","488afb62":"#### M\u00e9todo 4: SplineCalib","3f28c912":"## <font color=red>3. <\/font>Calibraci\u00f3n del modelo de sobremuestreo","ffd85a77":"## <font color=red>1. <\/font>Calibraci\u00f3n del modelo de submuestreo","6b2fca12":"#### M\u00e9todo 2: Isotonic Regression","f8a5ad2d":"#### A continuaci\u00f3n, se realiza las predicciones con los modelos sobre el conjunto de prueba y calibraci\u00f3n.","60069159":"# Calibraci\u00f3n de los modelos"}}