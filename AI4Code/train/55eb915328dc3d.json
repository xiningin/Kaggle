{"cell_type":{"c35b5fa5":"code","0a2fab3e":"code","d0d941fd":"code","682ef36b":"code","6fa6807d":"code","bdba3d48":"code","4e8b3283":"code","36188189":"code","8b010deb":"code","62a79623":"code","2eeb4d2f":"code","90423f63":"code","7dbf393a":"code","b5b90b37":"code","48351f51":"code","3ea699ed":"code","0dac6040":"code","219b0d47":"code","0ce8215c":"code","69064d4d":"code","2ed042c9":"code","63b1d578":"code","c2ef5ff2":"code","0d6ba670":"code","d076161d":"code","267f82e0":"code","2e9b9256":"code","534e3e89":"code","e440b018":"code","f1de7c0f":"code","d8d9cd71":"code","347cda75":"code","244bd259":"code","779e1eaa":"code","f6313c50":"markdown","7903c294":"markdown","ea22ce69":"markdown","a1c64593":"markdown","ecb9faf9":"markdown","24f9f926":"markdown","ba97808b":"markdown","a02dbbad":"markdown","64976627":"markdown","7e3a3fa9":"markdown","2cee276d":"markdown","e3abe17c":"markdown","3a7ee9d1":"markdown","2a8d57af":"markdown","d5362b02":"markdown","f9cd96a2":"markdown","2844fbc7":"markdown","69bf0d6b":"markdown","725c7bcd":"markdown","b1bcc8b4":"markdown","f5bbc7bb":"markdown","0a96b58d":"markdown","c9b74c46":"markdown","59ea84ca":"markdown","1122ee0a":"markdown","66b810c9":"markdown","7fd00770":"markdown"},"source":{"c35b5fa5":"# dataframe manipulation\nimport pandas as pd\nimport numpy as np\n\n# data visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport altair as alt\n\n# regex\nimport re","0a2fab3e":"file_path = '..\/input\/cheapest-electric-cars\/\\\nCheapestelectriccars-EVDatabase.csv'\n\n# read csv\ndf = pd.read_csv(file_path, na_values='-')","d0d941fd":"df.head()","682ef36b":"df.shape","6fa6807d":"def missing_data(dataset):\n    \"\"\"\n    This function prints the percentage and count of missing values \n    in features (only features with missing values).\n    Takes pandas dataframe as an argument.\n    \"\"\"\n    missing_values = dataset.isnull().sum()\n    missing_values = missing_values[missing_values > 0]\n    perc_missing = pd.DataFrame(\n        round(missing_values\/len(dataset)*100, 2), \n        columns=['missing%']\n    )\n    count_missing = pd.DataFrame(missing_values, columns=['count'])\n    missing_data = pd.concat(\n        [perc_missing, count_missing], \n        axis=1\n    ).sort_values(by='missing%', ascending=False)\n    \n    return missing_data.style.background_gradient(cmap='PuBuGn')\n\nmissing_data(df)","bdba3d48":"# extract numeric data\ndef extract_num(x):\n    \"\"\"\n    this function extracts the numeric data from the string \n    and converts the data type to float. \n    It uses a regex to extact intergers and floats.\n    \"\"\"\n    return float(re.findall(r\"[-+]?\\d*\\.?\\d+|\\d+\", x)[0])","4e8b3283":"df['Acceleration'][0]","36188189":"print(extract_num(df['Acceleration'][0]))\nprint(type(extract_num(df['Acceleration'][0])))","8b010deb":"df['BatteryCapacity'] = df['Subtitle'].apply(extract_num)","62a79623":"# extract brand name from name\ndf['BrandName'] = df['Name'].apply(lambda x: x.split()[0])","2eeb4d2f":"# example\ndf['Name'][0].split()","90423f63":"df['Name'][0].split()[0]","7dbf393a":"for col_name in ['Acceleration', 'TopSpeed', 'Range', 'Efficiency']:\n    df[col_name] = df[col_name].apply(extract_num)","b5b90b37":"#df['FastChargeSpeed'].apply(extract_num)","48351f51":"df['FastChargeSpeed'] = df['FastChargeSpeed']\\\n                                             .fillna('-1')\\\n                                             .apply(extract_num) \\\n                                             .replace(-1, np.nan)","3ea699ed":"df['PriceinGermany'] = df['PriceinGermany']\\\n                                           .fillna('-1')\\\n                                           .apply(lambda x: re.sub(',', '', x))\\\n                                           .apply(extract_num)\\\n                                           .replace(-1, np.nan)","0dac6040":"df.drop(columns='PriceinUK', axis=1, inplace=True)","219b0d47":"df.rename(columns={'PriceinGermany': 'PriceInGermany'}, inplace=True)","0ce8215c":"df.dropna(axis=0, subset=['PriceInGermany'], inplace=True)","69064d4d":"df['FastChargeSpeed'].fillna(value=np.median(df.FastChargeSpeed), axis=0, inplace=True)","2ed042c9":"df['Drive'] = df['Drive'].astype('category')\ndf['BrandName'] = df['BrandName'].astype('category')","63b1d578":"df.head(1)","c2ef5ff2":"# datatypes of cleaned dataset\ndf.info()","0d6ba670":"# shape of cleaned dataset\ndf.shape","d076161d":"df.isnull().sum()","267f82e0":"\"\"\"\ndifferent themes for altair library:\n1. ggplot2\n2. quartz \n3. vox \n4. fivethirtyeight \n5. dark\n6. urbaninstitute\n7. excel\n\"\"\"\n\nalt.themes.enable(\"vox\")","2e9b9256":"def altair_dist(df, colname):\n    \"\"\"\n    This function plots the histogram and boxplot (in Altair)\n    for a given dataframe and column name.\n    \"\"\"\n    name = ' '.join(re.findall('[A-Z][^A-Z]*', colname))\n    hist = alt.Chart(df).mark_bar().encode(\n        x=alt.X(\n            shorthand=colname, \n            bin=alt.Bin(maxbins=20), \n            title=f\"{name} (binned)\"\n        ),\n        y=alt.Y(\n            shorthand='count()', \n            title='Number of Electric Cars'\n        )\n    ).properties(title=f'Histogram of {name}')\n\n    box = alt.Chart(df).mark_boxplot().encode(\n        x=alt.X(\n            shorthand=colname,\n            title=name\n        ),\n        tooltip='BrandName'\n    ).properties(title=f'Boxplot of {name}')\n\n    return hist & box","534e3e89":"altair_dist(df, 'PriceInGermany')","e440b018":"brush = alt.selection(type='interval', resolve='global')\n\n# common base for all subplots\nbase = alt.Chart(df).mark_point().encode(\n    y=alt.Y('PriceInGermany', title='Price'),\n    color=alt.condition(\n        brush, \n        'Drive', \n        alt.ColorValue('black'), \n        legend=alt.Legend(orient=\"top\"), \n        scale=alt.Scale(scheme='set1'),\n    ),\n    tooltip='BrandName'\n).add_selection(\n    brush\n).properties(\n    width=350,\n    height=250\n)\n\nx1 = alt.X('Acceleration', title='Acceleration')\nx2 = alt.X('TopSpeed', title='Top Speed')\nx3 = alt.X('Range', title='Range ')\nx4 = alt.X('Efficiency', title='Efficiency')\nx5 = alt.X('FastChargeSpeed', title='Fast Charge Speed')\nx6 = alt.X('BatteryCapacity', title='Battery Capacity')\n\n# layout for subplots\n(base.encode(x=x1) | base.encode(x=x2)) &\\\n(base.encode(x=x3) | base.encode(x=x4)) &\\\n(base.encode(x=x5) | base.encode(x=x6))","f1de7c0f":"base = alt.Chart(df).mark_boxplot().encode(\n    y=alt.Y('PriceInGermany', title='Price'), \n    color=alt.Color(\n        shorthand='Drive', \n        scale=alt.Scale(scheme='set1'),\n        legend=alt.Legend(orient=\"top\"),\n    ), \n    tooltip='BrandName'\n).properties(\n    width=300, \n    height=300\n)\n\nx1 = alt.X('NumberofSeats:O') # O for Ordinal\nx2 = alt.X('Drive:N') # N for nominal\ntitle1 = 'Distribution of Price across Number of Seats and Drive Type'\ntitle2 = 'Distribution of Price across Drive Type'\n\nbase.encode(x=x1).properties(title=title1) | base.encode(x=x2).properties(title=title2)","d8d9cd71":"sns.catplot(data=df, x='NumberofSeats', y='PriceInGermany', \n            hue='Drive', palette=\"Set1\", kind='point', height=5, \n            aspect=1.5)","347cda75":"numeric = ['Acceleration', 'TopSpeed', 'Range', 'Efficiency', \n           'FastChargeSpeed','NumberofSeats', 'BatteryCapacity']\n\n(altair_dist(df, numeric[0]) | altair_dist(df, numeric[1])) &\\\n(altair_dist(df, numeric[2]) | altair_dist(df, numeric[3])) &\\\n(altair_dist(df, numeric[4]) | altair_dist(df, numeric[5])) &\\\n(altair_dist(df, numeric[6]))","244bd259":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nplt.subplots_adjust(wspace=0.5)\n\nsns.heatmap(\n    data=df[numeric].corr(method='pearson'), \n    vmin=-1, vmax=1, \n    annot=True, cmap='PiYG', \n    ax=ax[0]\n)\nsns.heatmap(\n    data=df[numeric].corr(method='spearman'), \n    vmin=-1, vmax=1, \n    annot=True, cmap='PiYG', \n    ax=ax[1]\n)\n\nax[0].set_title('Pearson Correlation')\nax[1].set_title('Spearman Correlation')\nplt.show()","779e1eaa":"# correlation of numeric features w.r.t. the Price\ndf.corr()['PriceInGermany']","f6313c50":"# Imports","7903c294":"## 2.3 Extract Brand Name from column `Name`\n- Since every electric car name starts with its brand name, the below lambda function first splits the strings on spaces and extracts the first element. \n","ea22ce69":"#### Example:","a1c64593":"## 1.3 Missing Values\n- Only 3 variable consists of missing values.\n- `PriceinUK` contains the highest percentage of missing values.","ecb9faf9":"# 1. Data Exploration","24f9f926":"#### Example:","ba97808b":"## 1.1 First 5 rows\nAfter looking at the first five rows it can be observed that the data requires a lot of cleaning.\n- Numeric data needs to extracted from features such as acceleration, top speed, range etc.\n- There missing values.\n- `Subtitle` column contains the battery capacity (in kWh), which can be also extracted as a new feature. Also brand name can be extracted from the `Name` column.","a02dbbad":"## 2.7 Remove all missing values `PriceInGermany` \nRemove all missing values Price in Germany since its the target variable","64976627":"## 3.2 Relationship between Price and other Numeric Electric Car Features","7e3a3fa9":"## 3.1 Distribution of Price (Target variable)","2cee276d":"## 2.2 Extract Battery Capacity from column `Subtitle`\n- Using pandas `apply`, the function is applied to every row. ","e3abe17c":"## 2.10 Cleaned Data","3a7ee9d1":"# 2. Data Cleaning","2a8d57af":"## 3.4 Distribution of Numeric Features","d5362b02":"## 2.4 Extract Remaining Numeric data","f9cd96a2":"## 2.5 Exceptions\nAs observed in the data exploration that `FastChargeSpeed` and `PriceinGermany` consisted of nans. So apply the `extract_num` function directly without dealing with missing values will result in an error.","2844fbc7":"# 3. EDA","69bf0d6b":"## 1.2 Number of observations and features\nThe csv file contains data of 180 electric cars (rows) in 11 features (columns).","725c7bcd":"## 2.1 Function to extract numeric data\n- Since a lot of features contain numeric data as strings, lets define a function to extract the numeric information and avoid repeating steps.","b1bcc8b4":"# Introduction\n- This analysis involves data cleaning and exploratory data analysis of the \n[Cheapest Electric Cars dataset](https:\/\/www.kaggle.com\/kkhandekar\/cheapest-electric-cars).\n- Altair, seaborn and matplotlib are used for data visualization. Interactive charts are made using Altair.","f5bbc7bb":"## 3.3 Relationship between Price and Categorical Electric Car features\n- Across drive type, it can be observed from the box plot that the median price of `All Wheel Drive` Type Cars is higher as compared to Front and Rear Wheel Drive.","0a96b58d":"## 2.6 Drop column `PriceinUK`\nSince column `PriceinGermany` and `PriceinUK` both represents the price of a car. Lets use `PriceinGermany` as it contains less missing values and can be used later for regression analysis.\n","c9b74c46":"So to tackle this problem: \n- I have first encoded the missing values with `-1` (string, since the function `extract_num` function expects a string)","59ea84ca":"## 3.5 Multicollinearity\nMulticollinearity can be observed within numeric features","1122ee0a":"## 2.9 Fix Data type of `Drive` and `BrandName`","66b810c9":"#### Example:","7fd00770":"## 2.8 Replace Missing values in `FastChargeSpeed`\nReplace the missing values with the median value"}}