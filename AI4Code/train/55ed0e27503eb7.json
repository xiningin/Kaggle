{"cell_type":{"17cb98d1":"code","0446fa71":"code","895c413a":"code","dee334d0":"code","81112a18":"code","1bd60aaf":"code","3c5d6d2c":"code","2abf9e5f":"code","0eceb62a":"code","dc9d9782":"code","377b818a":"code","9562252c":"code","7d48f04a":"code","5a51d13d":"code","0df3e2e1":"code","98af0267":"code","3c2d8378":"code","b7bdd6bd":"code","f42fca42":"code","8624278e":"code","f89accf1":"code","622e2538":"code","c722fb4d":"code","5d6971fe":"code","8a3153ec":"code","9a21cb92":"code","ccaee7ab":"code","8a1fda65":"code","1e03fbe3":"code","d44b9b71":"code","8043aeb3":"code","ab7e9f96":"code","87eab405":"code","485aa077":"code","82e8dd2f":"code","73b771d2":"code","c3c05113":"code","b3b1fc93":"code","d77d2f56":"code","0cf7eeb9":"code","ab038d49":"code","bbcfc62d":"code","88899f75":"code","000c292b":"code","283b2445":"code","2abbe3a9":"code","49b14103":"code","ad9ef882":"code","d7766813":"code","88b162f1":"code","e4de8ae9":"code","5e84aba8":"code","6acc1c93":"code","9eb185db":"code","f8837051":"code","8d184b3f":"code","6627dffe":"code","8661ee3a":"code","3841c95d":"code","6e5c244c":"code","86cacc0b":"code","a56ba50c":"code","baa8be55":"code","9ea4aac7":"code","bec4d406":"code","d3b9a253":"code","883c7cd9":"code","8c4cd4a3":"code","949cc6c3":"code","7405bbd8":"code","e65a92ed":"code","51b48d55":"code","3bd883c7":"code","46e32722":"code","875999ce":"code","7fa8a474":"code","c2e705aa":"code","23b3522c":"code","22b424e4":"code","5cdd169c":"code","a77577c0":"code","438989c1":"code","b2dc4402":"code","058f3860":"code","25ae731a":"code","c90bd566":"code","6ae027cf":"code","1099a851":"code","e46536b2":"code","98468c6d":"code","a13eb503":"code","4a6d6923":"code","e4fcf3fa":"code","c8e8103b":"code","2a96e21c":"code","6a738ff9":"code","f55c0e7d":"code","01f736b7":"code","35c364f4":"code","5d9915af":"code","65539570":"code","9a1531b4":"code","1b2fbaf6":"code","93c058b7":"code","f57a8f2a":"code","2234cd02":"code","b35651fd":"code","f7fd5db9":"code","052289e4":"code","43a30cce":"code","94c9317a":"code","7d410101":"code","79ad216b":"code","326260a5":"code","23cb427f":"code","409825c1":"code","18e3bd0d":"code","d6be2268":"code","c53a39d9":"code","69d93d83":"code","60add0be":"code","2a7934e7":"code","a7d93f1e":"code","5b7d252a":"code","198f3f3d":"code","e626c6c5":"code","22203a38":"code","9110491e":"code","e47a765c":"code","272d318f":"code","d53608b4":"code","458ccce9":"code","91b0ac84":"code","ded4f0f8":"code","186c6b09":"code","f7d7c95a":"code","db7406b7":"code","0dc19299":"code","d6c123fc":"code","c8feeda1":"code","6b7c2180":"code","73fa50dc":"code","affdae35":"code","23870607":"code","d6a21b4e":"code","c2015930":"code","642f4abd":"code","c2e298e4":"code","19e2647b":"code","511c733d":"code","33bce3d2":"code","5b42f697":"code","7930b8c9":"code","6afd3c6f":"code","add179bf":"code","1388b88e":"code","e9e9b350":"code","0b1c4dbf":"code","b9600e96":"code","1f8b59cb":"code","57d0bc90":"code","70607ace":"code","64323a34":"code","1d80bc92":"code","08de0b57":"code","9cbb09a2":"code","ec849a16":"code","7879d489":"code","5acc7764":"code","a9452f9b":"code","1cb91395":"code","d5a78933":"code","73e306c3":"code","5a42d813":"code","e0c91b86":"code","1fc3f3a9":"code","f4f3a3ed":"code","619636c0":"code","6e92c189":"code","3a1548cb":"code","62671e0f":"code","f65be061":"code","58df41bb":"code","fe88dba5":"code","1e11f72a":"code","f3e25c6b":"code","2c0344f3":"code","29e3ee4e":"code","c0c09a2a":"code","317cc439":"code","d1c4da7a":"code","18f37736":"code","0f074f0f":"code","da24a5b0":"code","92fbc536":"code","89302c60":"code","98b67f27":"code","b02c8031":"code","bd46c1ab":"code","a7ba26f0":"code","10930818":"code","b8e30662":"code","ea170435":"code","c0134edd":"code","643e34cf":"code","94d48a94":"code","a66729eb":"code","11480a4a":"code","76016fdc":"code","61617ef0":"code","2fe9bb7b":"code","f892d7c0":"code","0f7775b9":"code","aef8545d":"code","acbcf111":"code","2648552c":"code","0c823979":"code","707b2957":"code","a2c3be78":"code","85ff1d4e":"code","a6f6a187":"code","fb85909f":"code","eafeddcf":"code","0d520a13":"code","027e25de":"code","a2a38ae0":"code","3a888a8f":"code","f961b1a8":"code","d7004130":"code","bac3fbd8":"code","2a2fd04e":"code","783648c2":"code","49bfc950":"code","73ec28f1":"code","e5ce090f":"code","56e465e4":"markdown","e0d7cdab":"markdown","abf8def9":"markdown","8551f75c":"markdown","fadfeea5":"markdown","f72922bb":"markdown","b8edd7bc":"markdown","4a4b0b94":"markdown","8f6a3601":"markdown","e1373fc9":"markdown","993ed7c6":"markdown","edd44988":"markdown","f90976f3":"markdown","cf820253":"markdown","1f2301a2":"markdown","1ded0daa":"markdown","5eeac3aa":"markdown","82204ca5":"markdown","d511f0be":"markdown","fa783b83":"markdown","a522fa2f":"markdown","54ff4f6e":"markdown","eb0b70cd":"markdown","a2f89de3":"markdown","1066274b":"markdown","689e35ed":"markdown","3b89899e":"markdown","594fece6":"markdown","7a87edaf":"markdown","0e33e3cd":"markdown","597bbfd3":"markdown","d08c37ad":"markdown","0e8ef72a":"markdown","79eb9c09":"markdown","a22c81e1":"markdown","4acb9e25":"markdown","de4b914b":"markdown","30bea4fa":"markdown","234c01e6":"markdown","5ce28df8":"markdown","162f678b":"markdown","9d3ffeb6":"markdown","77a91759":"markdown","004afa10":"markdown","f7f8dd77":"markdown","379cd43c":"markdown","94ef47be":"markdown","7bbad886":"markdown","4894244e":"markdown","75e39e1d":"markdown","bcb2f971":"markdown","694be79b":"markdown","c032d20c":"markdown","666d738b":"markdown","258a68f9":"markdown","85f19911":"markdown","ee15323e":"markdown","16bc3fd1":"markdown","ac662293":"markdown","4b41c22e":"markdown","04b201df":"markdown","a21e633f":"markdown","917e3c45":"markdown","85b1a891":"markdown","27b708dc":"markdown","d3ff428d":"markdown","f420f0b0":"markdown","e9bfdcb9":"markdown","8e4ef55b":"markdown","d105869c":"markdown","88eb0264":"markdown","f14b6a09":"markdown","ee717939":"markdown","9b063996":"markdown","987f9621":"markdown","66ffc7c7":"markdown","1ef14859":"markdown","bc7d4123":"markdown","af092c36":"markdown","3fe3a0ee":"markdown","111fe611":"markdown","afc5af31":"markdown","85965d21":"markdown","9fb7e968":"markdown","40b78fff":"markdown","559d2cf1":"markdown","c0bddec6":"markdown","b06b2625":"markdown","5d081b7d":"markdown","19531f83":"markdown","1159bfb4":"markdown","0b4f9ef2":"markdown","411b0fd1":"markdown","0715cde5":"markdown","511c1ee2":"markdown","eaaf1e05":"markdown","d24fcdfb":"markdown"},"source":{"17cb98d1":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport datetime as dt\nfrom datetime import timedelta\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport statsmodels.api as sm\nfrom statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\nfrom fbprophet import Prophet\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\n#pd.set_option('display.float_format', lambda x: '%.6f' % x)","0446fa71":"# install Required Libraries\n# ==============\n\n! pip install calmap\n! pip install plotly psutil requests\n!yes Y | conda install -c plotly plotly-orca","895c413a":"COUNTRY = \"Poland\"\n\npopulation_df  = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\npoland_only_df = pd.read_csv(\"..\/input\/covid19-in-poland-dataset\/2020-04-28.csv\")\ndf             = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid          = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n\ndf['Country\/Region'] = df['Country\/Region'].astype('category')\npoland = df[df.loc[:, 'Country\/Region'] == COUNTRY]\ncovid.head()","dee334d0":"population_df.head()","81112a18":"#Converting \"Observation Date\" into Datetime format\ncovid[\"ObservationDate\"]=pd.to_datetime(covid[\"ObservationDate\"])\ncovid[\"Last Update\"]=pd.to_datetime(covid[\"Last Update\"])\ncovid.head()","1bd60aaf":"#Converting \"Observation Date\" into Datetime format\n\npoland_only_df[\"Last Update\"]=pd.to_datetime(poland_only_df[\"Last Update\"])\npoland_only_df.head()","3c5d6d2c":"polonia = pd.concat([poland_only_df.set_index('Last Update'),covid.set_index('Last Update')])\npolonia.rename(columns={'Last Update': 'Date','Voivodeship': 'Province\/State'}, inplace=True)\npolonia","2abf9e5f":"#covid = polonia","0eceb62a":"#Dropping column as SNo is of no use, and \"Province\/State\" contains too many missing values\ncovid.drop([\"SNo\"],1,inplace=True)","dc9d9782":"#Converting \"Observation Date\" into Datetime format\ncovid[\"ObservationDate\"]=pd.to_datetime(covid[\"ObservationDate\"])","377b818a":"#Grouping different types of cases as per the date\ndatewise=covid.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","9562252c":"from datetime import date\n\nx = date.today()\n\nx.strftime(\"%b %d %Y\")\ntoday = x.strftime(\"%d-%m-%Y\")\n#today","7d48f04a":"\nprint(\"General Information about the spread across the world on \" + str(today) +\".\")\n\nprint(\" \")\n\n\nprint(\"Total number of countries with Disease Spread:      \",len(covid[\"Country\/Region\"].unique()))\nprint(\"Total number of Confirmed Cases around the World:  {:.0f} \".format(datewise[\"Confirmed\"].iloc[-1]))\nprint(\"Total number of Recovered Cases around the World:   {:.0f}\".format(datewise[\"Recovered\"].iloc[-1]))\nprint(\"Total number of Deaths Cases around the World:       {:.0f}\".format(datewise[\"Deaths\"].iloc[-1]))\nprint(\"Total number of Active Cases around the World:     \",int((datewise[\"Confirmed\"].iloc[-1]-datewise[\"Recovered\"].iloc[-1]-datewise[\"Deaths\"].iloc[-1])))\nprint(\"Total number of Closed Cases around the World:     \",int(datewise[\"Recovered\"].iloc[-1]+datewise[\"Deaths\"].iloc[-1]))\nprint(\"Number of Confirmed Cases per Day around the World: \",int(np.round(datewise[\"Confirmed\"].iloc[-1]\/datewise.shape[0])))\nprint(\"Number of Recovered Cases per Day around the World:  \",int(np.round(datewise[\"Recovered\"].iloc[-1]\/datewise.shape[0])))\nprint(\"Number of Death Cases per Day around the World:      \",int(np.round(datewise[\"Deaths\"].iloc[-1]\/datewise.shape[0])))\nprint(\"Number of Confirmed Cases per hour around the World:  \",int(np.round(datewise[\"Confirmed\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Number of Recovered Cases per hour around the World:  \",int(np.round(datewise[\"Recovered\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Number of Death Cases per hour around the World:      \",int(np.round(datewise[\"Deaths\"].iloc[-1]\/((datewise.shape[0])*24))))\n\nprint(\" \")\nprint(\"Acknowledgements:\")\nprint(\"Thanks to the WHO and Johns Hopkins University for making the \")\nprint(\"data available for educational and academic research purposes - Jair Ribeiro\")","5a51d13d":"plt.figure(figsize=(25,8))\nsns.barplot(x=datewise.index.date, y=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"])\nplt.title(\"Distribution Plot for Active Cases Cases over Date\")\nplt.xticks(rotation=90)\n\nplt.savefig('001pl.png')","0df3e2e1":"plt.figure(figsize=(25,8))\nsns.barplot(x=datewise.index.date, y=datewise[\"Recovered\"]+datewise[\"Deaths\"])\nplt.title(\"Distribution Plot for Closed Cases Cases over Date\")\nplt.xticks(rotation=90)\nplt.savefig('002pl.png')","98af0267":"datewise[\"WeekOfYear\"]=datewise.index.weekofyear\n\nweek_num=[]\nweekwise_confirmed=[]\nweekwise_recovered=[]\nweekwise_deaths=[]\nw=1\nfor i in list(datewise[\"WeekOfYear\"].unique()):\n    weekwise_confirmed.append(datewise[datewise[\"WeekOfYear\"]==i][\"Confirmed\"].iloc[-1])\n    weekwise_recovered.append(datewise[datewise[\"WeekOfYear\"]==i][\"Recovered\"].iloc[-1])\n    weekwise_deaths.append(datewise[datewise[\"WeekOfYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num.append(w)\n    w=w+1\n\nplt.figure(figsize=(8,5))\nplt.plot(week_num,weekwise_confirmed,linewidth=3)\nplt.plot(week_num,weekwise_recovered,linewidth=3)\nplt.plot(week_num,weekwise_deaths,linewidth=3)\nplt.ylabel(\"Number of Cases\")\nplt.xlabel(\"Week Number\")\nplt.title(\"Weekly progress of Different Types of Cases\")\nplt.xlabel","3c2d8378":"fig, (ax1,ax2) = plt.subplots(1, 2,figsize=(25,8))\nsns.barplot(x=week_num,y=pd.Series(weekwise_confirmed).diff().fillna(0),ax=ax1)\nsns.barplot(x=week_num,y=pd.Series(weekwise_deaths).diff().fillna(0),ax=ax2)\nax1.set_xlabel(\"Week Number\")\nax2.set_xlabel(\"Week Number\")\nax1.set_ylabel(\"Number of Confirmed Cases\")\nax2.set_ylabel(\"Number of Death Cases\")\nax1.set_title(\"Weekly increase in Number of Confirmed Cases\")\nax2.set_title(\"Weekly increase in Number of Death Cases\")\nplt.savefig('003pl.png')","b7bdd6bd":"plt.figure(figsize=(25,8))\nplt.plot(datewise[\"Confirmed\"],marker=\"o\",label=\"Confirmed Cases\")\nplt.plot(datewise[\"Recovered\"],marker=\"*\",label=\"Recovered Cases\")\nplt.plot(datewise[\"Deaths\"],marker=\"^\",label=\"Death Cases\")\nplt.ylabel(\"Number of Patients\")\nplt.xlabel(\"Dates\")\nplt.xticks(rotation=90)\nplt.title(\"Growth of different Types of Cases over Time\")\nplt.legend()\nplt.savefig('004pl.png')","f42fca42":"#Calculating the Mortality Rate and Recovery Rate\ndatewise[\"Mortality Rate\"]=(datewise[\"Deaths\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Recovery Rate\"]=(datewise[\"Recovered\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Active Cases\"]=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"]\ndatewise[\"Closed Cases\"]=datewise[\"Recovered\"]+datewise[\"Deaths\"]\n\n#Plotting Mortality and Recovery Rate \nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\nax1.plot(datewise[\"Mortality Rate\"],label='Mortality Rate',linewidth=3)\nax1.axhline(datewise[\"Mortality Rate\"].mean(),linestyle='--',color='black',label=\"Mean Mortality Rate\")\nax1.set_ylabel(\"Mortality Rate\")\nax1.set_xlabel(\"Timestamp\")\nax1.set_title(\"Overall Datewise Mortality Rate\")\nax1.legend()\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nax2.plot(datewise[\"Recovery Rate\"],label=\"Recovery Rate\",linewidth=3)\nax2.axhline(datewise[\"Recovery Rate\"].mean(),linestyle='--',color='black',label=\"Mean Recovery Rate\")\nax2.set_ylabel(\"Recovery Rate\")\nax2.set_xlabel(\"Timestamp\")\nax2.set_title(\"Overall Datewise Recovery Rate\")\nax2.legend()\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\n    \n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Average Mortality Rate: {:.{}f}\".format( datewise[\"Mortality Rate\"].mean(), precision )) \n#print( \"Median Mortality Rate:  {:.{}f}\".format( datewise[\"Mortality Rate\"].median(), precision ))     \nprint( \"Average Recovery Rate   {:.{}f}\".format( datewise[\"Recovery Rate\"].mean(), precision )) \n#print( \"Median Recovery Rate:   {:.{}f}\".format( datewise[\"Recovery Rate\"].median(), precision ))\n\nplt.savefig('005pl.png')","8624278e":"plt.figure(figsize=(25,8))\nplt.plot(datewise[\"Confirmed\"].diff().fillna(0),label=\"Daily increase in Confiremd Cases\",linewidth=3)\nplt.plot(datewise[\"Recovered\"].diff().fillna(0),label=\"Daily increase in Recovered Cases\",linewidth=3)\nplt.plot(datewise[\"Deaths\"].diff().fillna(0),label=\"Daily increase in Death Cases\",linewidth=3)\nplt.xlabel(\"dates\")\nplt.ylabel(\"Daily Increment\")\nplt.title(\"Daily increase in different Types of Cases Worldwide\")\nplt.xticks(rotation=90)\nplt.legend()\n\nprint(\"Daily increase in different Types of Cases Worldwide\")\nprint(\"Average increase in number of Confirmed Cases every day: \",np.round(datewise[\"Confirmed\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Recovered Cases every day: \",np.round(datewise[\"Recovered\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Deaths Cases every day:     \",np.round(datewise[\"Deaths\"].diff().fillna(0).mean()))\n\nplt.savefig('006pl.png')","f89accf1":"daily_increase_confirm=[]\ndaily_increase_recovered=[]\ndaily_increase_deaths=[]\nfor i in range(datewise.shape[0]-1):\n    daily_increase_confirm.append(((datewise[\"Confirmed\"].iloc[i+1]\/datewise[\"Confirmed\"].iloc[i])))\n    daily_increase_recovered.append(((datewise[\"Recovered\"].iloc[i+1]\/datewise[\"Recovered\"].iloc[i])))\n    daily_increase_deaths.append(((datewise[\"Deaths\"].iloc[i+1]\/datewise[\"Deaths\"].iloc[i])))\ndaily_increase_confirm.insert(0,1)\ndaily_increase_recovered.insert(0,1)\ndaily_increase_deaths.insert(0,1)","622e2538":"#Calculating countrywise Moratality and Recovery Rate\ncountrywise=covid[covid[\"ObservationDate\"]==covid[\"ObservationDate\"].max()].groupby([\"Country\/Region\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'}).sort_values([\"Confirmed\"],ascending=False)\ncountrywise[\"Mortality\"]=(countrywise[\"Deaths\"]\/countrywise[\"Confirmed\"])*100\ncountrywise[\"Recovery\"]=(countrywise[\"Recovered\"]\/countrywise[\"Confirmed\"])*100","c722fb4d":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ntop_15_confirmed=countrywise.sort_values([\"Confirmed\"],ascending=False).head(15)\ntop_15_deaths=countrywise.sort_values([\"Deaths\"],ascending=False).head(15)\nsns.barplot(x=top_15_confirmed[\"Confirmed\"],y=top_15_confirmed.index,ax=ax1)\nax1.set_title(\"Top 15 countries as per Number of Confirmed Cases\")\nsns.barplot(x=top_15_deaths[\"Deaths\"],y=top_15_deaths.index,ax=ax2)\nax2.set_title(\"Top 15 countries as per Number of Death Cases\")\n\nplt.savefig('007pl.png')","5d6971fe":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise_plot_mortal=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Mortality\"],ascending=False).head(15)\nsns.barplot(x=countrywise_plot_mortal[\"Mortality\"],y=countrywise_plot_mortal.index,ax=ax1)\nax1.set_title(\"Top 15 Countries according High Mortatlity Rate\")\nax1.set_xlabel(\"Mortality (in Percentage)\")\ncountrywise_plot_recover=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Recovery\"],ascending=False).head(15)\nsns.barplot(x=countrywise_plot_recover[\"Recovery\"],y=countrywise_plot_recover.index, ax=ax2)\nax2.set_title(\"Top 15 Countries according High Recovery Rate\")\nax2.set_xlabel(\"Recovery (in Percentage)\")\n\nplt.savefig('008pl.png')","8a3153ec":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise_plot_mortal=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Mortality\"],ascending=False).tail(15)\nsns.barplot(x=countrywise_plot_mortal[\"Mortality\"],y=countrywise_plot_mortal.index,ax=ax1)\nax1.set_title(\"Top 15 Countries according Low Mortatlity Rate\")\nax1.set_xlabel(\"Mortality (in Percentage)\")\ncountrywise_plot_recover=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Recovery\"],ascending=False).tail(15)\nsns.barplot(x=countrywise_plot_recover[\"Recovery\"],y=countrywise_plot_recover.index, ax=ax2)\nax2.set_title(\"Top 15 Countries according Low Recovery Rate\")\nax2.set_xlabel(\"Recovery (in Percentage)\")\n\nplt.savefig('009pl.png')","9a21cb92":"no_recovered_countries=countrywise[(countrywise[\"Confirmed\"]>50)&(countrywise[\"Recovered\"]==0)][[\"Confirmed\",\"Deaths\"]]\nno_recovered_countries[\"Mortality Rate\"]=(no_recovered_countries[\"Deaths\"]\/no_recovered_countries[\"Confirmed\"])*100\nno_recovered_countries[no_recovered_countries[\"Mortality Rate\"]>0].sort_values([\"Mortality Rate\"],ascending=False)","ccaee7ab":"no_deaths=countrywise[(countrywise[\"Confirmed\"]>100)&(countrywise[\"Deaths\"]==0)]\nno_deaths[no_deaths[\"Recovery\"]>0].sort_values([\"Recovery\"],ascending=False).drop([\"Mortality\"],1)","8a1fda65":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise[\"Active Cases\"]=(countrywise[\"Confirmed\"]-countrywise[\"Recovered\"]-countrywise[\"Deaths\"])\ncountrywise[\"Outcome Cases\"]=(countrywise[\"Recovered\"]+countrywise[\"Deaths\"])\ntop_15_active=countrywise.sort_values([\"Active Cases\"],ascending=False).head(15)\ntop_15_outcome=countrywise.sort_values([\"Outcome Cases\"],ascending=False).head(15)\nsns.barplot(x=top_15_active[\"Active Cases\"],y=top_15_active.index,ax=ax1)\nsns.barplot(x=top_15_outcome[\"Outcome Cases\"],y=top_15_outcome.index,ax=ax2)\nax1.set_title(\"Top 15 Countries with Most Number of Active Cases\")\nax2.set_title(\"Top 15 Countries with Most Number of Closed Cases\")\n\nplt.savefig('010pl.png')","1e03fbe3":"country_date=covid.groupby([\"Country\/Region\",\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nconfirm_rate=[]\nfor country in countrywise.index:\n    days=country_date.ix[country].shape[0]\n    confirm_rate.append((countrywise.ix[country][\"Confirmed\"])\/days)\ncountrywise[\"Confirm Cases\/Day\"]=confirm_rate","d44b9b71":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ntop_15_ccpd=countrywise.sort_values([\"Confirm Cases\/Day\"],ascending=False).head(15)\nsns.barplot(y=top_15_ccpd.index,x=top_15_ccpd[\"Confirm Cases\/Day\"],ax=ax1)\nax1.set_title(\"Top 15 countries as per high number Confirmed Cases per Day\")\nbottom_15_ccpd=countrywise[countrywise[\"Confirmed\"]>1000].sort_values([\"Confirm Cases\/Day\"],ascending=False).tail(15)\nsns.barplot(y=bottom_15_ccpd.index,x=bottom_15_ccpd[\"Confirm Cases\/Day\"],ax=ax2)\nax2.set_title(\"Top 15 countries as per Lowest Confirmed Cases per Day having more than 1000 Confirmed Cases\")\n\nplt.savefig('011pl.png')","8043aeb3":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise[\"Survival Probability\"]=(1-(countrywise[\"Deaths\"]\/countrywise[\"Confirmed\"]))*100\ntop_25_survival=countrywise[countrywise[\"Confirmed\"]>1000].sort_values([\"Survival Probability\"],ascending=False).head(15)\nsns.barplot(x=top_25_survival[\"Survival Probability\"],y=top_25_survival.index,ax=ax1)\nax1.set_title(\"Top 25 Countries with Maximum Survival Probability having more than 1000 Confiremed Cases\")\n\nprecision = 2\n \n\nprint( \"Mean Survival Probability across all countries: {:.{}f}\".format( countrywise[\"Survival Probability\"].mean(), precision ))\nprint( \"Median Survival Probability across all countries: {:.{}f}\".format( countrywise[\"Survival Probability\"].median(), precision ))\nprint( \"Mean Death Probability across all countries: {:.{}f}\".format( 100-countrywise[\"Survival Probability\"].mean(), precision ))\nprint( \"Median Death Probability across all countries: {:.{}f}\".format( 100-countrywise[\"Survival Probability\"].median(), precision ))\n\n\nBottom_5_countries=countrywise[countrywise[\"Confirmed\"]>100].sort_values([\"Survival Probability\"],ascending=True).head(15)\nsns.barplot(x=Bottom_5_countries[\"Survival Probability\"],y=Bottom_5_countries.index,ax=ax2)\nplt.title(\"Bottom 15 Countries as per Survival Probability\")\n\nplt.savefig('012pl.png')","ab7e9f96":"china_data=covid[covid[\"Country\/Region\"]==\"Mainland China\"]\nItaly_data=covid[covid[\"Country\/Region\"]==\"Italy\"]\nUS_data=covid[covid[\"Country\/Region\"]==\"US\"]\npoland_data=covid[covid[\"Country\/Region\"]==\"Poland\"]\nbrazil_data=covid[covid[\"Country\/Region\"]==\"Brazil\"]\nrest_of_world=covid[(covid[\"Country\/Region\"]!=\"Mainland China\")&(covid[\"Country\/Region\"]!=\"Italy\")&(covid[\"Country\/Region\"]!=\"US\")&(covid[\"Country\/Region\"]!=\"Spain\")]\n\ndatewise_china=china_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_Italy=Italy_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_US=US_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_brazil=brazil_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_restofworld=rest_of_world.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","87eab405":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3,figsize=(25,8))\nax1.plot(datewise_poland[\"Confirmed\"],label=\"Confirmed Cases of Poland\",linewidth=3)\nax1.plot(datewise_brazil[\"Confirmed\"],label=\"Confirmed Cases of Brazil\",linewidth=3)\nax1.plot(datewise_US[\"Confirmed\"],label=\"Confirmed Cases of USA\",linewidth=3)\n#ax1.plot(datewise_Spain[\"Confirmed\"],label=\"Confirmed Cases of Spain\",linewidth=3)\n#ax1.plot(datewise_restofworld[\"Confirmed\"],label=\"Confirmed Cases of Rest of the World\",linewidth=3)\nax1.set_title(\"Confirmed Cases Plot\")\nax1.set_ylabel(\"Number of Patients\")\nax1.set_xlabel(\"Dates\")\nax1.legend()\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nax2.plot(datewise_poland[\"Recovered\"],label=\"Recovered Cases of Poland\",linewidth=3)\nax2.plot(datewise_brazil[\"Recovered\"],label=\"Recovered Cases of Brazil\",linewidth=3)\nax2.plot(datewise_US[\"Recovered\"],label=\"Recovered Cases of US\",linewidth=3)\n#ax2.plot(datewise_Spain[\"Recovered\"],label=\"Recovered Cases Spain\",linewidth=3)\n#ax2.plot(datewise_restofworld[\"Recovered\"],label=\"Recovered Cases of Rest of the World\",linewidth=3)\nax2.set_title(\"Recovered Cases Plot\")\nax2.set_ylabel(\"Number of Patients\")\nax2.set_xlabel(\"Dates\")\nax2.legend()\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\nax3.plot(datewise_poland[\"Deaths\"],label='Death Cases of Poland',linewidth=3)\nax3.plot(datewise_brazil[\"Deaths\"],label='Death Cases of Brazil',linewidth=3)\nax3.plot(datewise_US[\"Deaths\"],label='Death Cases of USA',linewidth=3)\n#ax3.plot(datewise_Spain[\"Deaths\"],label='Death Cases Spain',linewidth=3)\n#ax3.plot(datewise_restofworld[\"Deaths\"],label=\"Deaths Cases of Rest of the World\",linewidth=3)\nax3.set_title(\"Death Cases Plot\")\nax3.set_ylabel(\"Number of Patients\")\nax3.set_xlabel(\"Dates\")\nax3.legend()\nfor tick in ax3.get_xticklabels():\n    tick.set_rotation(90)\n    \nplt.savefig('013pl.png')","485aa077":"confirmed_covid19 = datewise[\"Confirmed\"]\nconfirmed_covid19.sum()","82e8dd2f":"datewise_china[\"Mortality\"]=(datewise_china[\"Deaths\"]\/datewise_china[\"Confirmed\"])*100\ndatewise_Italy[\"Mortality\"]=(datewise_Italy[\"Deaths\"]\/datewise_Italy[\"Confirmed\"])*100\ndatewise_US[\"Mortality\"]=(datewise_US[\"Deaths\"]\/datewise_US[\"Confirmed\"])*100\ndatewise_poland[\"Mortality\"]=(datewise_poland[\"Deaths\"]\/datewise_poland[\"Confirmed\"])*100\ndatewise_restofworld[\"Mortality\"]=(datewise_restofworld[\"Deaths\"]\/datewise_restofworld[\"Confirmed\"])*100\n\ndatewise_china[\"Recovery\"]=(datewise_china[\"Recovered\"]\/datewise_china[\"Confirmed\"])*100\ndatewise_Italy[\"Recovery\"]=(datewise_Italy[\"Recovered\"]\/datewise_Italy[\"Confirmed\"])*100\ndatewise_US[\"Recovery\"]=(datewise_US[\"Recovered\"]\/datewise_US[\"Confirmed\"])*100\ndatewise_poland[\"Recovery\"]=(datewise_poland[\"Recovered\"]\/datewise_poland[\"Confirmed\"])*100\ndatewise_restofworld[\"Recovery\"]=(datewise_restofworld[\"Recovered\"]\/datewise_restofworld[\"Confirmed\"])*100","73b771d2":"country = \"Poland\"\npoland_data=covid[covid[\"Country\/Region\"]==\"Poland\"]\n\npoland_data=covid[covid[\"Country\/Region\"]==country]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","c3c05113":"print(\"COVID19 situation in \" +country +\" on \" + str(today) +\".\")\n\nprint(\" \")\n\nprint(\"Total number of Confirmed Cases:                {:.0f} \".format(datewise_poland[\"Confirmed\"].iloc[-1]))\nprint(\"Total number of Recovered Cases:                 {:.0f}\".format(datewise_poland[\"Recovered\"].iloc[-1]))\nprint(\"Total number of Deaths Cases:                     {:.0f}\".format(datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"Total number of Active Cases:                   \",int((datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])))\nprint(\"Total number of Closed Cases:                   \",int(datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"Number of Confirmed Cases per Day:               \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Number of Recovered Cases per Day:                \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Number of Death Cases per Day:                    \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Number of Confirmed Cases per hour:                \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Number of Recovered Cases per hour:                \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\n#print(\"Number of Death Cases per hour:                \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\n\nprint(\" \")\nprint(\"Acknowledgements:\")\nprint(\"Thanks to the WHO and Johns Hopkins University for making the \")\nprint(\"data available for educational and academic research purposes - Jair Ribeiro\")","b3b1fc93":"#Calculating the Mortality Rate and Recovery Rate Worldwide\ndatewise[\"Mortality Rate\"]=(datewise[\"Deaths\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Recovery Rate\"]=(datewise[\"Recovered\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Active Cases\"]=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"]\ndatewise[\"Closed Cases\"]=datewise[\"Recovered\"]+datewise[\"Deaths\"]\n\n#Calculating the Mortality Rate and Recovery Rate local\ndatewise_poland[\"Mortality Rate\"]=(datewise_poland[\"Deaths\"]\/datewise_poland[\"Confirmed\"])*100\ndatewise_poland[\"Recovery Rate\"]=(datewise_poland[\"Recovered\"]\/datewise_poland[\"Confirmed\"])*100\ndatewise_poland[\"Active Cases\"]=datewise_poland[\"Confirmed\"]-datewise_poland[\"Recovered\"]-datewise_poland[\"Deaths\"]\ndatewise_poland[\"Closed Cases\"]=datewise_poland[\"Recovered\"]+datewise_poland[\"Deaths\"]\n\n#Plotting Mortality and Recovery Rate \nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\nax1.plot(datewise_poland[\"Mortality Rate\"],label='Mortality Rate',linewidth=3)\nax1.axhline(datewise_poland[\"Mortality Rate\"].mean(),linestyle='--',color='black',label=\"Mean Mortality Rate\")\nax1.set_ylabel(\"Mortality Rate in \" + country +\".\")\nax1.set_xlabel(\"Timestamp\")\nax1.set_title(\"Overall Datewise Mortality Rate in \" + country +\".\")\nax1.legend()\n\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nax2.plot(datewise_poland[\"Recovery Rate\"],label=\"Recovery Rate\",linewidth=3)\nax2.axhline(datewise_poland[\"Recovery Rate\"].mean(),linestyle='--',color='black',label=\"Mean Recovery Rate\")\nax2.set_ylabel(\"Recovery Rate in \" + country +\".\")\nax2.set_xlabel(\"Timestamp\")\nax2.set_title(\"Overall Datewise Recovery Rate in \" + country +\".\")\nax2.legend()\n\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\n    \nplt.savefig('014pl.png')\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint(\"Average Mortality and Recovery Rates in \" + country + \".(between parenthesis the rates worldwide rate).\")\nprint()\n\nprint( \"Average Mortality Rate: {:.{}f}\".format( datewise_poland[\"Mortality Rate\"].mean(), precision ) + \" ({:.{}f}\".format( datewise[\"Mortality Rate\"].mean(), precision )+\")\") \n#print( \"Median Mortality Rate: {:.{}f}\".format( datewise_poland[\"Mortality Rate\"].median(), precision ) + \" ({:.{}f}\".format( datewise[\"Mortality Rate\"].median(), precision )+\")\")\nprint( \"Average Recovery Rate: {:.{}f}\".format( datewise_poland[\"Recovery Rate\"].mean(), precision ) + \" ({:.{}f}\".format( datewise[\"Recovery Rate\"].mean(), precision )+\")\")\n#print( \"Median Recovery Rate: {:.{}f}\".format( datewise_poland[\"Recovery Rate\"].median(), precision ) + \" ({:.{}f}\".format( datewise[\"Recovery Rate\"].median(), precision )+\")\")","d77d2f56":"fig, (ax1,ax2) = plt.subplots(2, 1,figsize=(20,10))\nax1.plot(datewise_poland[\"Confirmed\"],marker='o',label=\"Confirmed Cases\")\nax1.plot(datewise_poland[\"Recovered\"],marker='*',label=\"Recovered Cases\")\nax1.plot(datewise_poland[\"Deaths\"],marker='^',label=\"Death Cases\")\nax1.set_ylabel(\"Number of Patients\")\nax1.set_xlabel(\"Date\")\nax1.legend()\nax1.set_title(\"Growth Rate Plot for different Types of cases in \" + country +\".\")\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nsns.barplot(datewise_poland.index.date,datewise_poland[\"Confirmed\"]-datewise_poland[\"Recovered\"]-datewise_poland[\"Deaths\"],ax=ax2)\nax2.set_xlabel(\"Date\")\nax2.set_ylabel(\"Number of Active Cases\")\nax2.set_title(\"Distribution of Number of Active Cases over Date\")\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\n    \nplt.savefig('015pl.png')","0cf7eeb9":"plt.figure(figsize=(25,8))\nplt.plot(datewise_poland[\"Confirmed\"].diff().fillna(0),label=\"Daily increase in Confiremd Cases\",linewidth=3)\nplt.plot(datewise_poland[\"Recovered\"].diff().fillna(0),label=\"Daily increase in Recovered Cases\",linewidth=3)\nplt.plot(datewise_poland[\"Deaths\"].diff().fillna(0),label=\"Daily increase in Death Cases\",linewidth=3)\nplt.xlabel(\"dates\")\nplt.ylabel(\"Daily Increment\")\nplt.title(\"Daily increase in different Types of Cases Worldwide\")\nplt.xticks(rotation=90)\nplt.legend()\n\nprint(\"Daily increase in different Types of Cases in \" + country +\".\")\nprint()\nprint(\"Average increase in number of Confirmed Cases every day: \",np.round(datewise_poland[\"Confirmed\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Recovered Cases every day:  \",np.round(datewise_poland[\"Recovered\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Deaths Cases every day:     \",np.round(datewise_poland[\"Deaths\"].diff().fillna(0).mean()))\n\nplt.savefig('016pl.png')","ab038d49":"poland_increase_confirm=[]\npoland_increase_recover=[]\npoland_increase_deaths=[]\nfor i in range(datewise_poland.shape[0]-1):\n    poland_increase_confirm.append(((datewise_poland[\"Confirmed\"].iloc[i+1])\/datewise_poland[\"Confirmed\"].iloc[i]))\n    poland_increase_recover.append(((datewise_poland[\"Recovered\"].iloc[i+1])\/datewise_poland[\"Recovered\"].iloc[i]))\n    poland_increase_deaths.append(((datewise_poland[\"Deaths\"].iloc[i+1])\/datewise_poland[\"Deaths\"].iloc[i]))\npoland_increase_confirm.insert(0,1)\npoland_increase_recover.insert(0,1)\npoland_increase_deaths.insert(0,1)\n\nplt.figure(figsize=(25,8))\nplt.plot(datewise_poland.index,poland_increase_confirm,label=\"Growth Factor of Confirmed Cases\",linewidth=3)\nplt.plot(datewise_poland.index,poland_increase_recover,label=\"Growth Factor of Recovered Cases\",linewidth=3)\nplt.plot(datewise_poland.index,poland_increase_deaths,label=\"Growth Factor of Death Cases\",linewidth=3)\nplt.axhline(1,linestyle='--',color=\"black\",label=\"Baseline\")\nplt.xticks(rotation=90)\nplt.title(\"Datewise Growth Factor of different Types of Cases in \" + country +\".\")\nplt.ylabel(\"Growth Rate\")\nplt.xlabel(\"Date\")\nplt.legend()\n\nplt.savefig('017pl.png')","bbcfc62d":"plt.figure(figsize=(25,8))\nplt.plot(datewise_poland[\"Confirmed\"].diff().fillna(0),linewidth=3)\nplt.plot(datewise_poland[\"Recovered\"].diff().fillna(0),linewidth=3)\nplt.plot(datewise_poland[\"Deaths\"].diff().fillna(0),linewidth=3)\nplt.ylabel(\"Number of Confirmed Cases\")\nplt.xlabel(\"Date\")\nplt.title(\"Daily increase in Number of Confirmed Cases in \" + country +\".\")\nplt.xticks(rotation=90)\n\nplt.savefig('018pl.png')","88899f75":"plt.figure(figsize=(25,8))\nplt.plot(datewise_poland[\"Confirmed\"].diff().fillna(0),label=\"Daily increase in Confiremd Cases\",linewidth=3)\nplt.plot(datewise_poland[\"Recovered\"].diff().fillna(0),label=\"Daily increase in Recovered Cases\",linewidth=3)\nplt.plot(datewise_poland[\"Deaths\"].diff().fillna(0),label=\"Daily increase in Death Cases\",linewidth=3)\nplt.xlabel(\"dates\")\nplt.ylabel(\"Daily Increment\")\nplt.title(\"Daily increase in different Types of Cases Worldwide\")\nplt.xticks(rotation=90)\nplt.legend()\n\nprint(\"Average increase in number of Confirmed Cases every day: \",np.round(datewise_poland[\"Confirmed\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Recovered Cases every day:  \",np.round(datewise_poland[\"Recovered\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Deaths Cases every day:     \",np.round(datewise_poland[\"Deaths\"].diff().fillna(0).mean()))\n\nplt.savefig('019pl.png')","000c292b":"datewise_poland[\"WeekOfYear\"]=datewise_poland.index.weekofyear\n\nweek_num_poland=[]\npoland_weekwise_confirmed=[]\npoland_weekwise_recovered=[]\npoland_weekwise_deaths=[]\nw=1\nfor i in list(datewise_poland[\"WeekOfYear\"].unique()):\n    poland_weekwise_confirmed.append(datewise_poland[datewise_poland[\"WeekOfYear\"]==i][\"Confirmed\"].iloc[-1])\n    poland_weekwise_recovered.append(datewise_poland[datewise_poland[\"WeekOfYear\"]==i][\"Recovered\"].iloc[-1])\n    poland_weekwise_deaths.append(datewise_poland[datewise_poland[\"WeekOfYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num_poland.append(w)\n    w=w+1\n    \nplt.figure(figsize=(25,8))\nplt.plot(week_num_poland,poland_weekwise_confirmed,linewidth=3,label=\"Weekly Growth of Confirmed Cases\")\nplt.plot(week_num_poland,poland_weekwise_recovered,linewidth=3,label=\"Weekly Growth of Recovered Cases\")\nplt.plot(week_num_poland,poland_weekwise_deaths,linewidth=3,label=\"Weekly Growth of Death Cases\")\nplt.xlabel('Week Number')\nplt.ylabel(\"Number of Cases\")\nplt.title(\"Weekly Growth of different types of Cases in \" + country +\".\")\nplt.legend()\n\nplt.savefig('020pl.png')","283b2445":"fig, (ax1,ax2) = plt.subplots(1, 2,figsize=(25,8))\nsns.barplot(x=week_num_poland,y=pd.Series(poland_weekwise_confirmed).diff().fillna(0),ax=ax1)\nsns.barplot(x=week_num_poland,y=pd.Series(poland_weekwise_deaths).diff().fillna(0),ax=ax2)\nax1.set_xlabel(\"Week Number\")\nax2.set_xlabel(\"Week Number\")\nax1.set_ylabel(\"Number of Confirmed Cases\")\nax2.set_ylabel(\"Number of Death Cases\")\nax1.set_title(\"Weekwise increase in Number of Confirmed Cases in \" + country +\".\")\nax2.set_title(\"Weekwise increase in Number of Death Cases in \" + country +\".\")\n\nplt.savefig('021pl.png')","2abbe3a9":"#poland_data=covid[covid[\"Country\/Region\"]==\"Poland\"]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","49b14103":"datewise = datewise_poland\ndatewise[\"Days Since\"]=datewise.index-datewise.index[0]\ndatewise[\"Days Since\"]=datewise[\"Days Since\"].dt.days","ad9ef882":"train_ml=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid_ml=datewise.iloc[int(datewise.shape[0]*0.90):]\nmodel_scores=[]","d7766813":"lin_reg=LinearRegression(normalize=True)","88b162f1":"lin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Confirmed\"]).reshape(-1,1))","e4de8ae9":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","5e84aba8":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_linreg)))","6acc1c93":"plt.figure(figsize=(25,8))\nprediction_linreg=lin_reg.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Confirmed\"],label=\"Actual Confirmed Cases\")\nplt.plot(datewise.index,prediction_linreg, linestyle='--',label=\"Predicted Confirmed Cases using Linear Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Confirmed Cases')\nplt.title(\"Confirmed Cases Linear Regression Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","9eb185db":"#Intializing SVR Model and with hyperparameters for GridSearchCV\nsvm=SVR(C=1,degree=6,kernel='poly',epsilon=0.01)","f8837051":"#Performing GridSearchCV to find the Best Estimator\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Confirmed\"]).reshape(-1,1))","8d184b3f":"prediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","6627dffe":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_svm)))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Support Vectore Machine: {:.{}f}\".format( np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_svm)), precision ))","8661ee3a":"plt.figure(figsize=(25,8))\nprediction_svm=svm.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Confirmed\"],label=\"Train Confirmed Cases\",linewidth=3)\nplt.plot(datewise.index,prediction_svm, linestyle='--',label=\"Best Fit for SVR\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Confirmed Cases')\nplt.title(\"Confirmed Cases Support Vector Machine Regressor Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","3841c95d":"new_date=[]\nnew_prediction_lr=[]\nnew_prediction_svm=[]\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_prediction_lr.append(lin_reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_prediction_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])","6e5c244c":"pd.set_option('precision', 0)\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nmodel_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n#model_predictions.head()","86cacc0b":"df = pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM'}, inplace=True)\n#df","a56ba50c":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]","baa8be55":"holt=Holt(np.asarray(model_train[\"Confirmed\"])).fit(smoothing_level=1.3, smoothing_slope=0.9)\ny_pred=valid.copy()","9ea4aac7":"y_pred[\"Holt\"]=holt.forecast(len(valid))\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error Holt's Linear Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt\"])), precision ))","bec4d406":"plt.figure(figsize=(25,8))\nplt.plot(model_train.Confirmed,label=\"Train Set\",marker='o')\nvalid.Confirmed.plot(label=\"Validation Set\",marker='*')\ny_pred.Holt.plot(label=\"Holt's Linear Model Predicted Set\",marker='^')\nplt.ylabel(\"Confirmed Cases\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Confirmed Holt's Linear Model Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","d3b9a253":"holt_new_date=[]\nholt_new_prediction=[]\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])\n\nmodel_predictions[\"Holts Linear Model Prediction\"]=holt_new_prediction\n#model_predictions.head()","883c7cd9":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'Holts'}, inplace=True)\n#df","8c4cd4a3":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","949cc6c3":"es=ExponentialSmoothing(np.asarray(model_train['Confirmed']),seasonal_periods=5,trend='add', seasonal='add').fit()","7405bbd8":"y_pred[\"Holt's Winter Model\"]=es.forecast(len(valid))","e65a92ed":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt's Winter Model\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Holt's Winter Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt's Winter Model\"])), precision ))","51b48d55":"plt.figure(figsize=(25,8))\nplt.plot(model_train.Confirmed,label=\"Train Set\",marker='o')\nvalid.Confirmed.plot(label=\"Validation Set\",marker='*')\ny_pred[\"Holt\\'s Winter Model\"].plot(label=\"Holt's Winter Model Predicted Set\",marker='^')\nplt.ylabel(\"Confirmed Cases\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Confirmedd Cases Holt's Winter Model Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","3bd883c7":"holt_winter_new_prediction=[]\nfor i in range(1,18):\n    holt_winter_new_prediction.append(es.forecast((len(valid)+i))[-1])\nmodel_predictions[\"Holts Winter Model Prediction\"]=holt_winter_new_prediction\nmodel_predictions.head()\n#model_predictions","46e32722":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM'}, inplace=True)\ndf","875999ce":"y_pred[\"Holt\\'s Winter Model\"].head()","7fa8a474":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","c2e705aa":"from pandas.plotting import autocorrelation_plot\nplt.figure(figsize=(25,8))\nautocorrelation_plot(datewise[\"Confirmed\"])","23b3522c":"#fig, (ax1,ax2,ax3) = plt.subplots(3, 1,figsize=(11,7))\n#import statsmodels.api as sm\n#results=sm.tsa.seasonal_decompose(model_train[\"Confirmed\"])\n#ax1.plot(results.trend)\n#ax2.plot(results.seasonal)\n#ax3.plot(results.resid)","22b424e4":"print(\"Results of Dickey-Fuller test for Original Time Series\")\ndftest = adfuller(model_train[\"Confirmed\"], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint(dfoutput)","5cdd169c":"log_series=np.log(model_train[\"Confirmed\"])","a77577c0":"prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_confirmed=pd.DataFrame(zip(list(datewise.index),list(datewise[\"Confirmed\"])),columns=['ds','y'])","438989c1":"prophet_c.fit(prophet_confirmed)","b2dc4402":"forecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_confirmed=forecast_c.copy()","058f3860":"confirmed_forecast=prophet_c.predict(forecast_c)\n#print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])","25ae731a":"model_scores.append(np.sqrt(mean_squared_error(datewise[\"Confirmed\"],confirmed_forecast['yhat'].head(datewise.shape[0]))))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Squared Error for Prophet Model: {:.{}f}\".format( np.sqrt(mean_squared_error(datewise[\"Confirmed\"],confirmed_forecast['yhat'].head(datewise.shape[0]))), precision ))","c90bd566":"print(prophet_c.plot(confirmed_forecast))","6ae027cf":"print(prophet_c.plot_components(confirmed_forecast))","1099a851":"model_names=[\"Linear Regression\",\"Support Vector Machine Regressor\",\"Holt's Linear\",\"Holt's Winter Model\",\n            \"Auto Regressive Model (AR)\",\"Moving Average Model (MA)\",\"ARIMA Model\",\"Facebook's Prophet Model\"]\npd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])\nprint(datewise_poland.iloc[-1])","e46536b2":"model_predictions[\"Prophet's Prediction\"]=list(confirmed_forecast[\"yhat\"].tail(17))\nmodel_predictions[\"Prophet's Upper Bound\"]=list(confirmed_forecast[\"yhat_upper\"].tail(17))\n#model_predictions.head()","98468c6d":"\n\n\ndf = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\",\"Prophet's Prediction\",\"Prophet's Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM','Prophet\\'s Prediction': 'Prophet','Prophet\\'s Upper Bound': 'PUB'}, inplace=True)\nforecast_table = df\n\ndf","a13eb503":"from datetime import date\n\ntoday = date.today()\n#print(\"Today's date:\", today)\n\nstart_date = today\nend_date = today\ndf = forecast_table\nafter_start_date = df[\"Dates\"] >= start_date\nbefore_end_date = df[\"Dates\"] <= end_date\nbetween_two_dates = after_start_date & before_end_date\ntodays_cases_forecast = df.loc[between_two_dates]\n\ntodays_cases_forecast","4a6d6923":"def closest(lst, K): \n      \n    return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] \n      \n# Driver code\nDeaths = int(datewise_poland[\"Confirmed\"].iloc[-1])\nlst =  [int(todays_cases_forecast.LRP),int(todays_cases_forecast.SVM),int(todays_cases_forecast.HLM)\\\n        ,int(todays_cases_forecast.HWM),int(todays_cases_forecast.Prophet),int(todays_cases_forecast.PUB)]\nK = int(datewise_poland[\"Confirmed\"].iloc[-1])\n\n# Visualization code\nprint(\"Real Number of Cases in \" + country +\":      \" + str(Deaths))\n\nprint(\"Closest Prediction on \" + str(today) + \":   \" + str(int(closest(lst, K))))","e4fcf3fa":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Holts Linear Model Prediction': 'Forecast'}, inplace=True)\nforecast_table = df\ncases_forecast = df\ndf","c8e8103b":"plt.figure(figsize=(25,8))\nplt.plot(datewise[\"Confirmed\"],label=\"Actual Cases\")\nplt.bar(df.Dates, df.Forecast, color='royalblue', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Confirmed Cases until '+ str(today)])\n\n\nplt.show()","2a96e21c":"#poland_data=covid[covid[\"Country\/Region\"]==\"Poland\"]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","6a738ff9":"datewise = datewise_poland\ndatewise[\"Days Since\"]=datewise.index-datewise.index[0]\ndatewise[\"Days Since\"]=datewise[\"Days Since\"].dt.days","f55c0e7d":"train_ml=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid_ml=datewise.iloc[int(datewise.shape[0]*0.90):]\nmodel_scores=[]","01f736b7":"lin_reg=LinearRegression(normalize=True)","35c364f4":"lin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Deaths\"]).reshape(-1,1))","5d9915af":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","65539570":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_linreg)))","9a1531b4":"plt.figure(figsize=(20,6))\nprediction_linreg=lin_reg.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Deaths\"],label=\"Actual Confirmed Cases\")\nplt.plot(datewise.index,prediction_linreg, linestyle='--',label=\"Predicted Deaths using Linear Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Deaths')\nplt.title(\"Deaths Linear Regression Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","1b2fbaf6":"#Intializing SVR Model and with hyperparameters for GridSearchCV\nsvm=SVR(C=1,degree=6,kernel='poly',epsilon=0.01)","93c058b7":"#Performing GridSearchCV to find the Best Estimator\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Deaths\"]).reshape(-1,1))","f57a8f2a":"prediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","2234cd02":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_svm)))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Support Vectore Machine: {:.{}f}\".format( np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_svm)), precision ))","b35651fd":"plt.figure(figsize=(20,6))\nprediction_svm=svm.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Deaths\"],label=\"Train cases of Deaths\",linewidth=3)\nplt.plot(datewise.index,prediction_svm, linestyle='--',label=\"Best Fit for SVR\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Deaths')\nplt.title(\"Deaths Support Vector Machine Regressor Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","f7fd5db9":"new_date=[]\nnew_prediction_lr=[]\nnew_prediction_svm=[]\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_prediction_lr.append(lin_reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_prediction_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])","052289e4":"pd.set_option('precision', 0)\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nmodel_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n#model_predictions.head()","43a30cce":"df = pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM'}, inplace=True)\n#df","94c9317a":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]","7d410101":"holt=Holt(np.asarray(model_train[\"Deaths\"])).fit(smoothing_level=1.3, smoothing_slope=0.9)\ny_pred=valid.copy()","79ad216b":"y_pred[\"Holt\"]=holt.forecast(len(valid))\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error Holt's Linear Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt\"])), precision ))","326260a5":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Deaths,label=\"Train Set\",marker='o')\nvalid.Deaths.plot(label=\"Validation Set\",marker='*')\ny_pred.Holt.plot(label=\"Holt's Linear Model Predicted Set\",marker='^')\nplt.ylabel(\"Deaths\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Deaths Holt's Linear Model Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","23cb427f":"holt_new_date=[]\nholt_new_prediction=[]\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])\n\nmodel_predictions[\"Holts Linear Model Prediction\"]=holt_new_prediction\n#model_predictions.head()","409825c1":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'Holts'}, inplace=True)\n#df","18e3bd0d":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","d6be2268":"es=ExponentialSmoothing(np.asarray(model_train['Deaths']),seasonal_periods=5,trend='add', seasonal='add').fit()","c53a39d9":"y_pred[\"Holt's Winter Model\"]=es.forecast(len(valid))","69d93d83":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt's Winter Model\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Holt's Winter Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt's Winter Model\"])), precision ))","60add0be":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Deaths,label=\"Train Set\",marker='o')\nvalid.Deaths.plot(label=\"Validation Set\",marker='*')\ny_pred[\"Holt\\'s Winter Model\"].plot(label=\"Holt's Winter Model Predicted Set\",marker='^')\nplt.ylabel(\"Deaths\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Deaths Cases Holt's Winter Model Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","2a7934e7":"holt_winter_new_prediction=[]\nfor i in range(1,18):\n    holt_winter_new_prediction.append(es.forecast((len(valid)+i))[-1])\nmodel_predictions[\"Holts Winter Model Prediction\"]=holt_winter_new_prediction\nmodel_predictions.head()\n#model_predictions","a7d93f1e":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM'}, inplace=True)\ndf","5b7d252a":"y_pred[\"Holt\\'s Winter Model\"].head()","198f3f3d":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","e626c6c5":"from pandas.plotting import autocorrelation_plot\nplt.figure(figsize=(20, 5))\nautocorrelation_plot(datewise[\"Deaths\"])","22203a38":"#fig, (ax1,ax2,ax3) = plt.subplots(3, 1,figsize=(11,7))\n#import statsmodels.api as sm\n#results=sm.tsa.seasonal_decompose(model_train[\"Confirmed\"])\n#ax1.plot(results.trend)\n#ax2.plot(results.seasonal)\n#ax3.plot(results.resid)","9110491e":"print(\"Results of Dickey-Fuller test for Original Time Series\")\ndftest = adfuller(model_train[\"Deaths\"], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint(dfoutput)","e47a765c":"log_series=np.log(model_train[\"Deaths\"])","272d318f":"prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_Deaths=pd.DataFrame(zip(list(datewise.index),list(datewise[\"Deaths\"])),columns=['ds','y'])","d53608b4":"prophet_c.fit(prophet_Deaths)","458ccce9":"forecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_Deaths=forecast_c.copy()","91b0ac84":"Deaths_forecast=prophet_c.predict(forecast_c)\n#print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])","ded4f0f8":"model_scores.append(np.sqrt(mean_squared_error(datewise[\"Deaths\"],Deaths_forecast['yhat'].head(datewise.shape[0]))))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Squared Error for Prophet Model: {:.{}f}\".format( np.sqrt(mean_squared_error(datewise[\"Deaths\"],Deaths_forecast['yhat'].head(datewise.shape[0]))), precision ))","186c6b09":"print(prophet_c.plot(Deaths_forecast))","f7d7c95a":"print(prophet_c.plot_components(Deaths_forecast))","db7406b7":"model_names=[\"Linear Regression\",\"Support Vector Machine Regressor\",\"Holt's Linear\",\"Holt's Winter Model\",\n            \"Auto Regressive Model (AR)\",\"Moving Average Model (MA)\",\"ARIMA Model\",\"Facebook's Prophet Model\"]\npd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])\nprint(datewise_poland.iloc[-1])","0dc19299":"model_predictions[\"Prophet's Prediction\"]=list(Deaths_forecast[\"yhat\"].tail(17))\nmodel_predictions[\"Prophet's Upper Bound\"]=list(Deaths_forecast[\"yhat_upper\"].tail(17))\n#model_predictions.head()","d6c123fc":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\",\"Prophet's Prediction\",\"Prophet's Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM','Prophet\\'s Prediction': 'Prophet','Prophet\\'s Upper Bound': 'PUB'}, inplace=True)\nforecast_table = df\n\ndf","c8feeda1":"from datetime import date\n\ntoday = date.today()\n#print(\"Today's date:\", today)\n\nstart_date = today\nend_date = today\ndf = forecast_table\nafter_start_date = df[\"Dates\"] >= start_date\nbefore_end_date = df[\"Dates\"] <= end_date\nbetween_two_dates = after_start_date & before_end_date\ntodays_deaths_forecast = df.loc[between_two_dates]\n\ntodays_deaths_forecast","6b7c2180":"def closest(lst, K): \n      \n    return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] \n      \n# Driver code\nDeaths = int(datewise_poland[\"Deaths\"].iloc[-1])\nlst =  [int(todays_deaths_forecast.LRP),int(todays_deaths_forecast.SVM),int(todays_deaths_forecast.HLM)\\\n        ,int(todays_deaths_forecast.HWM),int(todays_deaths_forecast.Prophet),int(todays_deaths_forecast.PUB)]\nK = int(datewise_poland[\"Deaths\"].iloc[-1])\n\n# Visualization code\nprint(\"Real Number of Deaths in \" + country +\":    \" + str(Deaths))\n\nprint(\"Closest Prediction on \" + str(today) + \":   \" + str(int(closest(lst, K))))","73fa50dc":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Prophet's Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Prophet\\'s Prediction': 'Deaths Forecast'}, inplace=True)\nforecast_table = df\ndeaths_forecast = df\ndf","affdae35":"#poland_data=covid[covid[\"Country\/Region\"]==\"Poland\"]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","23870607":"datewise = datewise_poland\ndatewise[\"Days Since\"]=datewise.index-datewise.index[0]\ndatewise[\"Days Since\"]=datewise[\"Days Since\"].dt.days","d6a21b4e":"train_ml=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid_ml=datewise.iloc[int(datewise.shape[0]*0.90):]\nmodel_scores=[]","c2015930":"lin_reg=LinearRegression(normalize=True)","642f4abd":"lin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Recovered\"]).reshape(-1,1))","c2e298e4":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","19e2647b":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_linreg)))","511c733d":"plt.figure(figsize=(20,6))\nprediction_linreg=lin_reg.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Recovered\"],label=\"Actual Recovered Cases\")\nplt.plot(datewise.index,prediction_linreg, linestyle='--',label=\"Predicted Recoverings using Linear Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Recovered')\nplt.title(\"Recovered Linear Regression Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","33bce3d2":"#Intializing SVR Model and with hyperparameters for GridSearchCV\nsvm=SVR(C=1,degree=6,kernel='poly',epsilon=0.01)","5b42f697":"#Performing GridSearchCV to find the Best Estimator\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Recovered\"]).reshape(-1,1))","7930b8c9":"prediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","6afd3c6f":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_svm)))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Support Vectore Machine: {:.{}f}\".format( np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_svm)), precision ))","add179bf":"plt.figure(figsize=(20,6))\nprediction_svm=svm.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Recovered\"],label=\"Train cases of Recovered cases\",linewidth=3)\nplt.plot(datewise.index,prediction_svm, linestyle='--',label=\"Best Fit for SVR\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Recovered')\nplt.title(\"Recovered Support Vector Machine Regressor Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","1388b88e":"new_date=[]\nnew_prediction_lr=[]\nnew_prediction_svm=[]\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_prediction_lr.append(lin_reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_prediction_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])","e9e9b350":"pd.set_option('precision', 0)\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nmodel_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n#model_predictions.head()","0b1c4dbf":"df = pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM'}, inplace=True)\n#df","b9600e96":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]","1f8b59cb":"holt=Holt(np.asarray(model_train[\"Recovered\"])).fit(smoothing_level=1.3, smoothing_slope=0.9)\ny_pred=valid.copy()","57d0bc90":"y_pred[\"Holt\"]=holt.forecast(len(valid))\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Recovered\"],y_pred[\"Holt\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error Holt's Linear Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Recovered\"],y_pred[\"Holt\"])), precision ))","70607ace":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Recovered,label=\"Train Set\",marker='o')\nvalid.Recovered.plot(label=\"Validation Set\",marker='*')\ny_pred.Holt.plot(label=\"Holt's Linear Model Predicted Set\",marker='^')\nplt.ylabel(\"Recovered\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Recovered Holt's Linear Model Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","64323a34":"holt_new_date=[]\nholt_new_prediction=[]\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])\n\nmodel_predictions[\"Holts Linear Model Prediction\"]=holt_new_prediction\n#model_predictions.head()","1d80bc92":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'Holts'}, inplace=True)\n#df","08de0b57":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","9cbb09a2":"es=ExponentialSmoothing(np.asarray(model_train['Recovered']),seasonal_periods=5,trend='add', seasonal='add').fit()","ec849a16":"y_pred[\"Holt's Winter Model\"]=es.forecast(len(valid))","7879d489":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt's Winter Model\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Holt's Winter Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Recovered\"],y_pred[\"Holt's Winter Model\"])), precision ))","5acc7764":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Recovered,label=\"Train Set\",marker='o')\nvalid.Recovered.plot(label=\"Validation Set\",marker='*')\ny_pred[\"Holt\\'s Winter Model\"].plot(label=\"Holt's Winter Model Predicted Set\",marker='^')\nplt.ylabel(\"Recovered\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Recovered Cases Holt's Winter Model Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","a9452f9b":"holt_winter_new_prediction=[]\nfor i in range(1,18):\n    holt_winter_new_prediction.append(es.forecast((len(valid)+i))[-1])\nmodel_predictions[\"Holts Winter Model Prediction\"]=holt_winter_new_prediction\nmodel_predictions.head()\n#model_predictions","1cb91395":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM'}, inplace=True)\ndf","d5a78933":"y_pred[\"Holt\\'s Winter Model\"].head()","73e306c3":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","5a42d813":"from pandas.plotting import autocorrelation_plot\nplt.figure(figsize=(20, 5))\nautocorrelation_plot(datewise[\"Recovered\"])","e0c91b86":"#fig, (ax1,ax2,ax3) = plt.subplots(3, 1,figsize=(11,7))\n#import statsmodels.api as sm\n#results=sm.tsa.seasonal_decompose(model_train[\"Confirmed\"])\n#ax1.plot(results.trend)\n#ax2.plot(results.seasonal)\n#ax3.plot(results.resid)","1fc3f3a9":"print(\"Results of Dickey-Fuller test for Original Time Series\")\ndftest = adfuller(model_train[\"Recovered\"], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint(dfoutput)","f4f3a3ed":"log_series=np.log(model_train[\"Recovered\"])","619636c0":"prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_Recovered=pd.DataFrame(zip(list(datewise.index),list(datewise[\"Recovered\"])),columns=['ds','y'])","6e92c189":"prophet_c.fit(prophet_Recovered)","3a1548cb":"forecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_Recovered=forecast_c.copy()","62671e0f":"Recovered_forecast=prophet_c.predict(forecast_c)\n#print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])","f65be061":"model_scores.append(np.sqrt(mean_squared_error(datewise[\"Recovered\"],Deaths_forecast['yhat'].head(datewise.shape[0]))))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Squared Error for Prophet Model: {:.{}f}\".format( np.sqrt(mean_squared_error(datewise[\"Recovered\"],Recovered_forecast['yhat'].head(datewise.shape[0]))), precision ))","58df41bb":"print(prophet_c.plot(Recovered_forecast))","fe88dba5":"print(prophet_c.plot_components(Recovered_forecast))","1e11f72a":"model_names=[\"Linear Regression\",\"Support Vector Machine Regressor\",\"Holt's Linear\",\"Holt's Winter Model\",\n            \"Auto Regressive Model (AR)\",\"Moving Average Model (MA)\",\"ARIMA Model\",\"Facebook's Prophet Model\"]\npd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])\nprint(datewise_poland.iloc[-1])","f3e25c6b":"model_predictions[\"Prophet's Prediction\"]=list(Recovered_forecast[\"yhat\"].tail(17))\nmodel_predictions[\"Prophet's Upper Bound\"]=list(Recovered_forecast[\"yhat_upper\"].tail(17))\n#model_predictions.head()","2c0344f3":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\",\"Prophet's Prediction\",\"Prophet's Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM','Prophet\\'s Prediction': 'Prophet','Prophet\\'s Upper Bound': 'PUB'}, inplace=True)\nforecast_table = df\n\ndf","29e3ee4e":"from datetime import date\n\ntoday = date.today()\n#print(\"Today's date:\", today)\n\nstart_date = today\nend_date = today\ndf = forecast_table\nafter_start_date = df[\"Dates\"] >= start_date\nbefore_end_date = df[\"Dates\"] <= end_date\nbetween_two_dates = after_start_date & before_end_date\ntodays_recovered_forecast = df.loc[between_two_dates]\n\ntodays_recovered_forecast","c0c09a2a":"def closest(lst, K): \n      \n    return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] \n      \n# Driver code\nRecovered = int(datewise_poland[\"Recovered\"].iloc[-1])\nlst =  [int(todays_recovered_forecast.LRP),int(todays_recovered_forecast.SVM),int(todays_recovered_forecast.HLM),int(todays_recovered_forecast.HWM)\\\n        ,int(todays_recovered_forecast.Prophet),int(todays_recovered_forecast.PUB)]\nK = int(datewise_poland[\"Recovered\"].iloc[-1])\n\n# Visualization code\nprint(\"Real Number of Recovered Cases in \" + country +\":    \" + str(Recovered))\n\nprint(\"Closest Prediction on \" + str(today) + \":            \" + str(int(closest(lst, K))))","317cc439":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Prophet\\'s Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Prophet\\'s Prediction': 'Recovered'}, inplace=True)\nforecast_table = df\nrecovered_forecast = df\n\ndf","d1c4da7a":"complete_forecast = pd.concat([cases_forecast,recovered_forecast, deaths_forecast])\n\n# Stack the DataFrames on top of each other\nvertical_stack = pd.concat([cases_forecast,recovered_forecast, deaths_forecast], axis=0)\n\n# Place the DataFrames side by side\nhorizontal_stack = pd.concat([cases_forecast,recovered_forecast, deaths_forecast], axis=1)","18f37736":"todays_cases_forecast","0f074f0f":"todays_deaths_forecast","da24a5b0":"todays_recovered_forecast","92fbc536":"forecast_summary = pd.concat([cases_forecast.set_index('Dates'), recovered_forecast.set_index('Dates'), deaths_forecast.set_index('Dates')], axis=1, join='inner')\nforecast_summary.rename(columns={'Dates': 'Date','Forecast': 'Cases','Deaths Forecast': 'Deaths'}, inplace=True)","89302c60":"plt.figure(figsize=(25,8))\nplt.plot(datewise_poland[\"Confirmed\"],label=\"Actual Cases\")\nplt.bar(df.Dates, forecast_summary.Cases, color='royalblue', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Confirmed Cases until '+ str(today)])\n\nplt.savefig('022pl.png')\nplt.show()","98b67f27":"plt.figure(figsize=(25,8))\nplt.plot(datewise_poland[\"Recovered\"],label=\"Recovered\")\nplt.bar(df.Dates, forecast_summary.Recovered, color='green', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Recovered Cases until '+ str(today)])\n\nplt.savefig('023pl.png')\nplt.show()","b02c8031":"plt.figure(figsize=(25,8))\nplt.plot(datewise_poland[\"Deaths\"],label=\"Deaths\")\nplt.bar(df.Dates, forecast_summary.Deaths, color='red', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Deaths until '+ str(today)])\n\nplt.savefig('024pl.png')\nplt.show()","bd46c1ab":"\nforecast_summary","a7ba26f0":"from IPython.core.display import HTML","10930818":"# Import\n# ======\n\n# essential libraries\nimport random\nfrom datetime import timedelta\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport calmap\nimport folium\n\n# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\n\nif not os.path.exists(\"images\"):\n    os.mkdir(\"images\")","b8e30662":"# for offline ploting\n# ===================\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","ea170435":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","c0134edd":"# importing datasets\n# ==================\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', parse_dates=['Date'])\nfull_table.sample(6)","643e34cf":"# dataframe info\n# full_table.info()","94d48a94":"# checking for missing value\n# full_table.isna().sum()","a66729eb":"# Ship\n# ====\n\n# ship rows\nship_rows = full_table['Province\/State'].str.contains('Grand Princess') | full_table['Province\/State'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('MS Zaandam')\n\n# ship\nship = full_table[ship_rows]\n\n# full table \nfull_table = full_table[~(ship_rows)]\n\n# Latest cases from the ships\nship_latest = ship[ship['Date']==max(ship['Date'])]\n\n# ship_latest.style.background_gradient(cmap='Pastel1_r')","11480a4a":"# Cleaning data\n# =============\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[['Confirmed', 'Deaths', 'Recovered', 'Active']] = full_table[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)\n\n# fixing datatypes\nfull_table['Recovered'] = full_table['Recovered'].astype(int)\n\nfull_table.sample(6)","76016fdc":"# Grouped by day, country\n# =======================\n\nfull_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n# new cases ======================================================\ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'New cases', 'New deaths', 'New recovered']\n# =================================================================\n\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n\n# fixing data types\ncols = ['New cases', 'New deaths', 'New recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\n\nfull_grouped['New cases'] = full_grouped['New cases'].apply(lambda x: 0 if x<0 else x)\n\nfull_grouped.sample(6)","61617ef0":"# Day wise\n# ========\n\n# table\nday_wise = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# number cases per 100 cases\nday_wise['Deaths \/ 100 Cases'] = round((day_wise['Deaths']\/day_wise['Confirmed'])*100, 2)\nday_wise['Recovered \/ 100 Cases'] = round((day_wise['Recovered']\/day_wise['Confirmed'])*100, 2)\nday_wise['Deaths \/ 100 Recovered'] = round((day_wise['Deaths']\/day_wise['Recovered'])*100, 2)\n\n# no. of countries\nday_wise['No. of countries'] = full_grouped[full_grouped['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len).values\n\n# fillna by 0\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\nday_wise[cols] = day_wise[cols].fillna(0)\n\nday_wise.head()","2fe9bb7b":"# Country wise\n# ============\n\n# getting latest values\ncountry_wise = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)\n\n# group by country\ncountry_wise = country_wise.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# per 100 cases\ncountry_wise['Deaths \/ 100 Cases'] = round((country_wise['Deaths']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Recovered \/ 100 Cases'] = round((country_wise['Recovered']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Deaths \/ 100 Recovered'] = round((country_wise['Deaths']\/country_wise['Recovered'])*100, 2)\n\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\ncountry_wise[cols] = country_wise[cols].fillna(0)\ncountry_wise.sort_values(by=['New cases'], inplace=True, ascending=False)\n\ncountry_wise.head()","f892d7c0":"# load population dataset\npop = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# select only population\npop = pop.iloc[:, :2]\n\n# rename column names\npop.columns = ['Country\/Region', 'Population']\n\n# merged data\ncountry_wise = pd.merge(country_wise, pop, on='Country\/Region', how='left')\n\n# update population\ncols = ['Burma', 'Congo (Brazzaville)', 'Congo (Kinshasa)', \"Cote d'Ivoire\", 'Czechia', \n        'Kosovo', 'Saint Kitts and Nevis', 'Saint Vincent and the Grenadines', \n        'Taiwan*', 'US', 'West Bank and Gaza', 'Poland']\npops = [54409800, 89561403, 5518087, 26378274, 10708981, 1793000, \n        53109, 110854, 23806638, 330541757, 4543126,37854825]\nfor c, p in zip(cols, pops):\n    country_wise.loc[country_wise['Country\/Region']== c, 'Population'] = p\n    \n# missing values\n# country_wise.isna().sum()\n# country_wise[country_wise['Population'].isna()]['Country\/Region'].tolist()\n\n# Cases per population\ncountry_wise['Cases \/ Million People'] = round((country_wise['Confirmed'] \/ country_wise['Population']) * 1000000)\n\ncountry_wise.sort_values(by=['Cases \/ Million People'], inplace=True, ascending=False)\n\ncountry_wise.head()","0f7775b9":"country = \"Poland\"\n#poland_data=covid[covid[\"Country\/Region\"]==\"Poland\"]\n\npoland_data=covid[covid[\"Country\/Region\"]==country]\n#datewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\n#print(datewise_poland.iloc[-1])\n#print(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\n#print(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])\n\n\n\n\n# load population dataset\npop = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# select only population\npop = pop.iloc[:, :2]\n\n# rename column names\npop.columns = ['Country\/Region', 'Population']\n\n# merged data\ncountry_wise = pd.merge(country_wise, pop, on='Country\/Region', how='left')\n\n# update population\ncols = ['Burma', 'Congo (Brazzaville)', 'Congo (Kinshasa)', \"Cote d'Ivoire\", 'Czechia', \n        'Kosovo', 'Saint Kitts and Nevis', 'Saint Vincent and the Grenadines', \n        'Taiwan*', 'US', 'West Bank and Gaza', 'Poland']\npops = [54409800, 89561403, 5518087, 26378274, 10708981, 1793000, \n        53109, 110854, 23806638, 330541757, 4543126,37854825]\nfor c, p in zip(cols, pops):\n    country_wise.loc[country_wise['Country\/Region']== c, 'Population'] = p\n    \n# missing values\n# country_wise.isna().sum()\n# country_wise[country_wise['Population'].isna()]['Country\/Region'].tolist()\n\n# Cases per population\ncountry_wise['Cases \/ Million People'] = round((country_wise['Confirmed'] \/ country_wise['Population']) * 1000000)\n\ncountry_wise_local=country_wise[country_wise[\"Country\/Region\"]==country]\n\ncountry_wise_local.head()","aef8545d":"print(\"General Information about the COVID-19 in \" +country +\" on \" + str(today) +\".\")\n\nprint(\" \")\n\nprint(\"Number of Confirmed Cases:                {:.0f} \".format(datewise_poland[\"Confirmed\"].iloc[-1]))\nprint(\"Number of Recovered Cases:                 {:.0f}\".format(datewise_poland[\"Recovered\"].iloc[-1]))\nprint(\"Number of Deaths Cases:                     {:.0f}\".format(datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"Number of Active Cases:                   \",int((datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])))\nprint(\"Number of Closed Cases:                   \",int(datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"Number of Cases \/ Million People :         \",int(country_wise_local[\"Cases \/ Million People\"].iloc[-1]))\n\nprint(\" \")\n\nprint(\"Number of Deaths every 100 cases :           \",int(country_wise_local[\"Deaths \/ 100 Cases\"].iloc[-1]))\nprint(\"Number of Recoveries every 100 cases :      \",int(country_wise_local[\"Recovered \/ 100 Cases\"].iloc[-1]))\nprint(\"Number of Deaths every 100 recoveries :     \",int(country_wise_local[\"Deaths \/ 100 Recovered\"].iloc[-1]))\n\nprint(\" \")\n\nprint(\"Confirmed Cases per Day:                   \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Recovered Cases per Day:                    \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Death Cases per Day:                        \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Confirmed Cases per hour:                    \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Recovered Cases per hour:                    \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\n#print(\"Number of Death Cases per hour:                \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\n\nprint(\" \")\nprint(\"Acknowledgements:\")\nprint(\"Thanks to the WHO and Johns Hopkins University for making the \")\nprint(\"data available for educational and academic research purposes - Jair Ribeiro\")","acbcf111":"today = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\nlast_week = full_grouped[full_grouped['Date']==max(full_grouped['Date'])-timedelta(days=7)].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\n\ntemp = pd.merge(today, last_week, on='Country\/Region', suffixes=(' today', ' last week'))\n\n# temp = temp[['Country\/Region', 'Confirmed last week']]\ntemp['1 week change'] = temp['Confirmed today'] - temp['Confirmed last week']\n\ntemp = temp[['Country\/Region', 'Confirmed last week', '1 week change']]\n\ncountry_wise = pd.merge(country_wise, temp, on='Country\/Region')\n\ncountry_wise['1 week % increase'] = round(country_wise['1 week change']\/country_wise['Confirmed last week']*100, 2)\n\n\ncountry_wise.sort_values(by=['Cases \/ Million People'], inplace=True, ascending=False)\n\ncountry_wise.head()","2648552c":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n\ntm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=225, width=640,\n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","0c823979":"fig_c = px.bar(day_wise, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [act])\nfig_d = px.bar(day_wise, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [dth])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Deaths reported'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=480)\n\n# ===============================\n\nfig_1 = px.line(day_wise, x=\"Date\", y=\"Deaths \/ 100 Cases\", color_discrete_sequence = [dth])\nfig_2 = px.line(day_wise, x=\"Date\", y=\"Recovered \/ 100 Cases\", color_discrete_sequence = [rec])\nfig_3 = px.line(day_wise, x=\"Date\", y=\"Deaths \/ 100 Recovered\", color_discrete_sequence = ['#333333'])\n\nfig = make_subplots(rows=1, cols=3, shared_xaxes=False, \n                    subplot_titles=('Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=1, col=3)\n\nfig.update_layout(height=480)\n\n# ===================================\n\nfig_c = px.bar(day_wise, x=\"Date\", y=\"New cases\", color_discrete_sequence = [act])\nfig_d = px.bar(day_wise, x=\"Date\", y=\"No. of countries\", color_discrete_sequence = [dth])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('No. of new cases everyday', 'No. of countries'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=480)","707b2957":"# new cases - cases per million people\ntemp = country_wise[country_wise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(15), x=\"Cases \/ Million People\", y=\"Country\/Region\", \n               text='Cases \/ Million People', orientation='h', color_discrete_sequence = ['#741938'])\n\n# plot\nfig = make_subplots(rows=1, cols=1, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Top Countries according to the number of Cases per Million People', 'Deaths reported'))\n\nfig.add_trace(fig_p['data'][0], row=1, col=1)\n\n\n\nfig.update_layout(height=500)\n\n#plt.savefig('images\/025pl.png')","a2c3be78":"# confirmed - deaths\nfig_c = px.bar(country_wise.sort_values('Confirmed').tail(15), x=\"Confirmed\", y=\"Country\/Region\", \n               text='Confirmed', orientation='h', color_discrete_sequence = [act])\nfig_d = px.bar(country_wise.sort_values('Deaths').tail(15), x=\"Deaths\", y=\"Country\/Region\", \n               text='Deaths', orientation='h', color_discrete_sequence = [dth])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Confirmed cases', 'Deaths reported'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('026pl.png')","85ff1d4e":"# recovered - active\nfig_r = px.bar(country_wise.sort_values('Recovered').tail(15), x=\"Recovered\", y=\"Country\/Region\", \n               text='Recovered', orientation='h', color_discrete_sequence = [rec])\nfig_a = px.bar(country_wise.sort_values('Active').tail(15), x=\"Active\", y=\"Country\/Region\", \n               text='Active', orientation='h', color_discrete_sequence = ['#333333'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Recovered', 'Active cases'))\n\nfig.add_trace(fig_r['data'][0], row=1, col=1)\nfig.add_trace(fig_a['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('027pl.png')","a6f6a187":"# death - recoverd \/ 100 cases\nfig_dc = px.bar(country_wise.sort_values('Deaths \/ 100 Cases').tail(15), x=\"Deaths \/ 100 Cases\", y=\"Country\/Region\", \n               text='Deaths \/ 100 Cases', orientation='h', color_discrete_sequence = ['#f38181'])\nfig_rc = px.bar(country_wise.sort_values('Recovered \/ 100 Cases').tail(15), x=\"Recovered \/ 100 Cases\", y=\"Country\/Region\", \n               text='Recovered \/ 100 Cases', orientation='h', color_discrete_sequence = ['#a3de83'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Number of deaths per 100 cases', 'Number of recovered per 100 cases'))\n\nfig.add_trace(fig_dc['data'][0], row=1, col=1)\nfig.add_trace(fig_rc['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('028pl.png')","fb85909f":"# new cases - cases per million people\nfig_nc = px.bar(country_wise.sort_values('New cases').tail(15), x=\"New cases\", y=\"Country\/Region\", \n               text='New cases', orientation='h', color_discrete_sequence = ['#c61951'])\ntemp = country_wise[country_wise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(15), x=\"Cases \/ Million People\", y=\"Country\/Region\", \n               text='Cases \/ Million People', orientation='h', color_discrete_sequence = ['#741938'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('New cases', \n                                    'Cases \/ Million People'))\n\nfig.add_trace(fig_nc['data'][0], row=1, col=1)\nfig.add_trace(fig_p['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('029pl.png')","eafeddcf":"# week change, percent increase\nfig_wc = px.bar(country_wise.sort_values('1 week change').tail(15), x=\"1 week change\", y=\"Country\/Region\", \n               text='1 week change', orientation='h', color_discrete_sequence = ['#004a7c'])\ntemp = country_wise[country_wise['Confirmed']>100]\nfig_pi = px.bar(temp.sort_values('1 week % increase').tail(15), x=\"1 week % increase\", y=\"Country\/Region\", \n               text='1 week % increase', orientation='h', color_discrete_sequence = ['#005691'], \n                hover_data=['Confirmed last week', 'Confirmed'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('1 week increase', '1 week % increase'))\n\nfig.add_trace(fig_wc['data'][0], row=1, col=1)\nfig.add_trace(fig_pi['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n#plt.savefig('030pl.png')","0d520a13":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:15, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', height=700,\n                 text='Country\/Region', log_x=True, log_y=True, title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","027e25de":"fig = px.bar(full_grouped, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.bar(full_grouped, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.bar(full_grouped, x=\"Date\", y=\"New cases\", color='Country\/Region', height=600,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","a2a38ae0":"fig = px.line(full_grouped, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.line(full_grouped, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.line(full_grouped, x=\"Date\", y=\"New cases\", color='Country\/Region', height=600,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","3a888a8f":"gt_100 = full_grouped[full_grouped['Confirmed']>100]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_100)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>100]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_100th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_100th_case['N days'] = (from_100th_case['Date'] - from_100th_case['Min Date']).dt.days\n# print(from_100th_case.head())\n\nfig = px.line(from_100th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 100 case', height=600)\nfig.show()\n\n# ===========================================================================\n\ngt_1000 = full_grouped[full_grouped['Confirmed']>1000]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_1000)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>1000]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_1000th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_1000th_case['N days'] = (from_1000th_case['Date'] - from_1000th_case['Min Date']).dt.days\n# print(from_1000th_case.head())\n\nfig = px.line(from_1000th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 1000 case', height=600)\nfig.show()\n\n# ===========================================================================\n\ngt_10000 = full_grouped[full_grouped['Confirmed']>10000]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_10000)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>10000]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_10000th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_10000th_case['N days'] = (from_10000th_case['Date'] - from_10000th_case['Min Date']).dt.days\n# print(from_10000th_case.head())full_grouped\n\nfig = px.line(from_10000th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 10000 case', height=600)\nfig.show()","f961b1a8":"full_latest = full_table[full_table['Date'] == max(full_table['Date'])]\n                         \nfig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\n#fig.show()","d7004130":"temp = full_grouped[full_grouped['New cases']>0].sort_values('Country\/Region', ascending=False)\nfig = px.scatter(temp, x='Date', y='Country\/Region', size='New cases', color='New cases', height=3000, \n           color_continuous_scale=px.colors.sequential.Viridis)\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update(layout_coloraxis_showscale=False)\n#fig.show()","bac3fbd8":"# first date\n# ==========\nfirst_date = full_table[full_table['Confirmed']>0]\nfirst_date = first_date.groupby('Country\/Region')['Date'].agg(['min']).reset_index()\n# first_date.head()\n\n# last date\n# =========\nlast_date = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Country\/Region'] != last_date['Country\/Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country\/Region')['Date'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ==========\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Country\/Region']\n\n# rename columns\nfirst_last.columns = ['Country\/Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# =============\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n# plot\nfig = ff.create_gantt(first_last, index_col='Country\/Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=2500)\n#fig.show()","2a2fd04e":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\ntemp = temp[temp['Country\/Region'].isin(gt_1000)]\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","783648c2":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'].isin(gt_1000)]\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# plt.style.use('seaborn')\n# g = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\",  sharey=False, col_wrap=5)\n# g = g.map(sns.lineplot, \"Date\", \"Confirmed\")\n# g.set_xticklabels(rotation=90)\n# plt.show()","49bfc950":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","73ec28f1":"!yes Y | conda install -c plotly plotly-orca\n\nimport plotly.io as pio\nimport plotly as plotly\nplotly.io.orca.config.executable = '\/path\/to\/orca'\npio.orca.config.use_xvfb = True\npio.orca.config.save()","e5ce090f":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\n\n\nfig.show()\n#fig.write_image(\"images\/031pl_pandemia.png\")","56e465e4":"Recovering Forecast","e0d7cdab":"# Composition of Cases","abf8def9":"> **Beginning of  Recovery Forecasts**","8551f75c":"### Confirmed cases (countries with > 1000 cases)","fadfeea5":"#### Holt's Linear Model","f72922bb":"The notebook consists of detailed data analysis specific to Poland, Comparison of Poland's situation with other countries, Comparison with worst affected countries in this pandemic and try and build Machine Learnig Prediction and Time Series and Forecasting models to try and understand the how the numbers are going to be in near future.","b8edd7bc":"# Libraries","4a4b0b94":"Poland's Cases per million","8f6a3601":"**Today's forecast for New Cases of Covid-19**","e1373fc9":"# Choosing the best forecast model results.","993ed7c6":"## Time Series Forecasting","edd44988":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis","f90976f3":"> ## Worldwide Analysis","cf820253":"#### Summarization of Forecasts using different Models","1f2301a2":"#### Holt's Linear Model","1ded0daa":"#### Countries with more than 50 Confirmed and Cases with No Recovered Patients with considerable Mortality Rate","5eeac3aa":"## Importing required Python Packages and Libraries","82204ca5":"Calculation of Forecasted Active Cases","d511f0be":"#### Growth Factor constantly above 1 is an clear indication of Exponential increase in all form of cases.","fa783b83":"#### Linear Regression Model for Confirm Cases Prediction","a522fa2f":"****Showcasing all the forecast model's results for today","54ff4f6e":"### Facebook's Prophet Model for forecasting Recovered cases","eb0b70cd":"# Comparison with similar epidemics","a2f89de3":"**Today's forecast for deaths by Covid-19**","1066274b":"#### Survival Probability is the only graph that looks the most promising! Having average survival probability of 97%+ across all countries but it's dropping by slight margin everyday. The difference between Mean and Death Probability is an clear indication that there few countries with really high mortality rate e.g. Italy, Algeria, UK etc.","689e35ed":"### Objective of the Notebook","3b89899e":"**End of Recovery Forecasts**","594fece6":"#### The Linear Regression Model seems to be really falling aprat. As it is clearly visible that the trend of Confirmed Cases in not at all Linear","7a87edaf":"finish here the timeseries forecast","0e33e3cd":"#### China has been able to \"flatten the curve\" looking at their graphs of Confirmed and Death Cases. With staggering Recovery Rate.\n#### US seems to have good control on Deaths, but number of people getting affected is going way out of hand.","597bbfd3":"### Number of new cases every day","d08c37ad":"#### Holt's Winter Model for Daily Time Series","0e8ef72a":"**Beginning of Death Forecasts**","79eb9c09":"# Prediction number of victims of covid-19 using Machine Learning Models","a22c81e1":"# Cases over the time","4acb9e25":"finish here the timeseries forecast","de4b914b":"#### Holt's Linear Model","30bea4fa":"### Number of new countries every day","234c01e6":"# COVID-19","5ce28df8":"### New cases (countries with > 1000 cases)","162f678b":"#### Support Vector Machine ModelRegressor for Prediction of Deaths","9d3ffeb6":"#### Predictions of Linear Regression are nowhere close to actual numbers","77a91759":"# # **Forecast of deaths by covid-19 cases **","004afa10":"# # **Forecast of recovery from covid-19 cases **","f7f8dd77":"# Country Dimentions","379cd43c":"### Comparison of China, Italy, US, Spain and Rest of the World","94ef47be":"**End of Death Forecasts**","7bbad886":"New Cases Forecast","4894244e":"**Today's forecast for recovered patients from the Covid-19**","75e39e1d":"#### Summarization of Forecasts using different Models","bcb2f971":"# This is the forecast for today from our my models","694be79b":"Final forecast plotings","c032d20c":"****Comparing Average mortality and recovery rate in Poland and Worldwide","666d738b":"Objective of this notebook is to study COVID-19 outbreak with the help of some basic visualizations techniques. Comparison of Poland where the COVID-19 originally originated from with the Rest of the World. Perform predictions and Time Series forecasting in order to study the impact and spread of the COVID-19 in comming days.","258a68f9":"## Time Series Forecasting","85f19911":"#### Countries with more than 100 Confirmed Cases and No Deaths with considerably high Recovery Rate","ee15323e":"# Top 20 Countries","16bc3fd1":"# Calander map","ac662293":"# Prediction of the number of patients will be recovered from the covid-19 using Machine Learning Models","4b41c22e":"Note : In the graph, last day is shown as one day after the last time a new confirmed cases reported in the Country \/ Region","04b201df":"#### Holt's Winter Model for Daily Time Series","a21e633f":"# # **Forecast of new covid-19 cases in Poland **","917e3c45":"#### Cambodia has able to contain COVID-19 pretty well with no Deaths recorded so far with pretty healthy Recovery Rate.","85b1a891":"#### Active Cases = Number of Confirmed Cases - Number of Recovered Cases - Number of Death Cases\n#### Increase in number of Active Cases is probably an indication of Recovered case or Death case number is dropping in comparison to number of Confirmed Cases drastically. Will look for the conclusive evidence for the same in the notebook ahead.","27b708dc":"****Tajikistan is the country we need to look after as the number of Positive cases are well above 1000 with considerable number of death cases with sign of Recovered Patients.","d3ff428d":"#### Summarization of Forecasts using different Models","f420f0b0":"#### Support Vector Machine ModelRegressor for Prediction of Recoverings","e9bfdcb9":"#### Growth rate of Confirmed, Recovered and Death Cases","8e4ef55b":"# Dataset","d105869c":"### Facebook's Prophet Model for forecasting new cases","88eb0264":"#### Linear Regression Model for Confirm Cases Prediction","f14b6a09":"# Date vs","ee717939":"## Time Series Forecasting","9b063996":"#### Top 25 Countries as per Mortatlity Rate and Recovery Rate with more than 500 Confirmed Cases","987f9621":"# Analysis on similar epidemics","66ffc7c7":"#### Mortality rate = (Number of Death Cases \/ Number of Confirmed Cases) x 100\n#### Recovery Rate= (Number of Recoverd Cases \/ Number of Confirmed Cases) x 100\n#### Mortality rate increment is pretty significant along with drastic drop in recovery rate falling even below the average Recovery Rate around the World. That's a conclusive evidence why number of Active Cases are rising, also there is increase in number of Closed Cases as the mortality rate is a clear indication of increase number of Death Cases","1ef14859":"#### Support Vector Machine ModelRegressor for Prediction of Confirmed Cases","bc7d4123":"# Preprocessing","af092c36":"#### Predictions of Linear Regression are nowhere close to actual numbers","3fe3a0ee":"#### Mortality and Recovery Rate analysis around the World","111fe611":"## Countrywise Analysis","afc5af31":"# Choosing the best forecast model results.","85965d21":"# Epidemic Span","9fb7e968":"#### The Linear Regression Model seems to be really falling aproach. As it is clearly visible that the trend of Confirmed Cases in not at all Linear","40b78fff":"* #### Linear Regression Model for recovery Prediction","559d2cf1":"#### Predictions of Linear Regression are nowhere close to actual numbers","c0bddec6":"## Data Analysis for Poland","b06b2625":"#### Holt's Winter Model for Daily Time Series","5d081b7d":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1","19531f83":"### Facebook's Prophet Model for forecasting new cases","1159bfb4":"Number of Deaths Forecast","0b4f9ef2":"# Forecast Summary","411b0fd1":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit","0715cde5":"#### Closed Cases = Number of Recovered Cases + Number of Death Cases \n#### Increase in number of Closed classes imply either more patients are getting recovered from the disease or more people are dying because of COVID-19","511c1ee2":"# Country Wise","eaaf1e05":"### Growth Factor\nGrowth factor is the factor by which a quantity multiplies itself over time. The formula used is:\n\n**Formula: Every day's new (Confirmed,Recovered,Deaths) \/ new (Confirmed,Recovered,Deaths) on the previous day.**\n\nA growth factor **above 1 indicates an increase correspoding cases**.\n\nA growth factor **above 1 but trending downward** is a positive sign, whereas a **growth factor constantly above 1 is the sign of exponential growth**.\n\nA growth factor **constant at 1 indicates there is no change in any kind of cases**.","d24fcdfb":"## Prediction using Machine Learning Models"}}