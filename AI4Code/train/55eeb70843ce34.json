{"cell_type":{"4c86af67":"code","3a192030":"code","5754a468":"code","aaef73ab":"code","1657438d":"code","b17fcef1":"code","c068f077":"code","5a575860":"code","48390650":"code","e6327013":"code","6ad4394e":"code","af4e1d04":"code","fec2f2ef":"code","44839488":"code","32e88582":"code","4761b913":"code","35a1d2a7":"code","03702083":"code","9e1714df":"code","1abb8ed7":"code","65f9f7fe":"code","15782575":"code","dd819dc0":"code","0ba85340":"code","5a1cfc66":"code","fdb5534c":"code","948b0e3f":"code","5fcecdec":"code","46594bf6":"code","68368051":"code","228ac714":"code","50d3a6ec":"code","e2461505":"code","39a6a857":"code","efa6defc":"code","b4353356":"code","5ba7f4ba":"code","8dccbea3":"code","1533e581":"code","af592e50":"code","9d63fff9":"code","386f1a8a":"code","1b04c1a9":"code","7a35398a":"code","46f9f08a":"code","23cdb574":"code","a0c99c74":"code","4bbb4aae":"code","adac686a":"code","a6906748":"code","d7d2d858":"markdown","4ba0f976":"markdown","6408191e":"markdown","cb709853":"markdown","b11d0975":"markdown","b9c922cd":"markdown","dd7c975b":"markdown","398b242c":"markdown","11bbbabb":"markdown","eeeade2a":"markdown","6d7b34e4":"markdown","e6d9b74b":"markdown","81a2d365":"markdown","04d35851":"markdown","871a1403":"markdown","da8ceb63":"markdown","bf4f5851":"markdown","f1e6ebc5":"markdown","91960e36":"markdown","2e7a646f":"markdown","4235f8ce":"markdown","4fbb7373":"markdown","8a40deb0":"markdown","d4015e14":"markdown","0e1a5294":"markdown","5f214de7":"markdown","dbe36de5":"markdown","0f3fd58a":"markdown","84eb5196":"markdown","9ab8a492":"markdown","f7ccf8d7":"markdown","fcb01847":"markdown","c41dd1bd":"markdown","d1cbba5f":"markdown","d6f72a05":"markdown","934b7166":"markdown","2e4d7be8":"markdown","4258b3de":"markdown","f157802d":"markdown","a9f67029":"markdown","4b0ab5eb":"markdown","161d4642":"markdown","e4a76d52":"markdown","090868fe":"markdown","589318b0":"markdown","9d566990":"markdown","773562ba":"markdown","552b2b25":"markdown","e5d354af":"markdown","e6aa4d52":"markdown","b506b216":"markdown","9ac2550e":"markdown","06651b1d":"markdown","f180605a":"markdown","817b46b2":"markdown","808f7d9c":"markdown","8640b95a":"markdown","b604f8fa":"markdown","f2ada1c0":"markdown"},"source":{"4c86af67":"from IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))","3a192030":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA","5754a468":"df = pd.read_csv('..\/input\/kc_house_data.csv')","aaef73ab":"# Convert date to timestamp\ndf['date'] = pd.to_datetime(df['date'])","1657438d":"df.head()","b17fcef1":"df.shape","c068f077":"df.columns","5a575860":"df.dtypes","48390650":"df.corr()['price'].sort_values(ascending=False)","e6327013":"plt.figure(figsize=(12,12))\nsns.heatmap(df.corr(),vmax=1.0,vmin=-1.0, square=True, fmt='.2f',\n            annot=True, cbar_kws={\"shrink\": .75}, cmap='coolwarm')\nplt.show()","6ad4394e":"plt.hist(df['price'], bins=200, alpha=0.3)\nplt.grid()\nplt.xlabel('House price ($)')\nplt.ylabel('Transactions')\nplt.xlim(0,1200000)\nplt.show()","af4e1d04":"print('Maximum house price: \\t${:0,.2f}'.format(df['price'].max()))\nprint('Minimum house price: \\t${:0,.2f}'.format(df['price'].min()))\nprint('Mean house price: \\t${:0,.2f}'.format(df['price'].mean()))\nprint('Median house price: \\t${:0,.2f}'.format(df['price'].median()))","fec2f2ef":"df_week = df.copy()\ndf_week['day_of_week'] = df_week['date'].dt.dayofweek\ndf_week = df_week.groupby('day_of_week', as_index=False).count()","44839488":"# Group transactions by date\ndf_date = df.groupby('date', as_index=False).count()\n\n# Plot transactions throughout a year\nplt.figure(figsize=(12,6))\nplt.plot(df_date['date'], df_date['id'])\nplt.xlabel('Date')\nplt.ylabel('Transactions')\nplt.grid()\nplt.show()","32e88582":"plt.bar(df_week['day_of_week'], df_week['id'])\nplt.xlabel('Day of Week')\nplt.ylabel('Transactions')\nplt.xticks(np.arange(7), ('Mon', 'Tue', 'Wed', 'Thu', 'Fri','Sat','Sun'))\nplt.show()","4761b913":"plt.hexbin(df['sqft_living'], df['price'], gridsize=150, cmap='Blues')\nplt.xlim(0,4000)\nplt.ylim(0,1500000)\nplt.xlabel('Square Footage of Living Space')\nplt.ylabel('Price (USD)')\nplt.show()","35a1d2a7":"# Houses sold more than once\ndf_id = df.groupby('id', as_index=False).count()[['id','date']]\ndf_id = df_id[df_id['date']>1][['id']]\ndf_twice = df_id.merge(df, on='id', how='inner')\ndf_twice['price'].hist(bins=50)\nplt.xticks(rotation=60)\nplt.xlabel('Price (USD)')\nplt.ylabel('Transactions')\nplt.show()","03702083":"df_twice[df_twice['id']==7200179]","9e1714df":"# Split data into features and target\nX = df.drop('price', axis=1)\ny = df['price']\n\n# Transform date from single timestamp feature to multiple numerical \n# features\nX['date_day'] = X['date'].dt.day\nX['date_month'] = X['date'].dt.month\nX['date_year'] = X['date'].dt.year\nX['date_DoW'] = X['date'].dt.dayofweek\nX = X.drop('date', axis=1)\n\n# Split data set into training and test sets\nX_train, X_test, y_train, y_test = \\\n        train_test_split(X, y, test_size=0.2, random_state=0)\n    \n# Create standardized feature matrix\nX_std = StandardScaler().fit_transform(X_train)","1abb8ed7":"# Linear Regression\nlr = LinearRegression()\n\n# Evaluate model with cross-validation\ncvs = cross_val_score(estimator=lr, X=X_train, \n                                    y=y_train, \n                                    cv=10, scoring='r2')\nprint('CV score: %.3f \u00b1 %.3f' % (cvs.mean(), cvs.std()))","65f9f7fe":"lr.fit(X_train, y_train)\ncoef_list = list(lr.coef_)\nname_list = list(X_train.columns)\npd.Series(coef_list, index=name_list)","15782575":"def eval_model(estimator, X=X_train, y=y_train, out=True):\n    '''\n    Evaluates a model provided in 'estimator' and returns the \n    cross-validation score (as a list of 10 results)\n    X: Feature matrix\n    y: Targets\n    '''\n    cvs = cross_val_score(estimator=estimator, X=X, y=y, \n                          cv=10, scoring='r2')\n    \n    if out == True:\n        print('CV score: %.3f \u00b1 %.3f' % (cvs.mean(), cvs.std()))\n    \n    return cvs","dd819dc0":"# Calculate correlation or each feature and create sorted \n# pandas Series of correlation factors\ncorr_ranking = df.corr()['price'].sort_values(ascending=False)[1:]\ncorr_ranking","0ba85340":"feat_list = []       # List of features added to the model \nscore_list = []      # List of CV scores obtained after adding features\n\n# Loop over features in order of correlation with price\nfor feat in list(corr_ranking.index):\n    \n    feat_list.append(feat)      # Add feature name to feat_list\n    \n    # Calculate CV score\n    cvs = eval_model(lr, X=X_train[feat_list], out=False)     \n    \n    score_list.append(cvs.mean())   # Add score to score_list","5a1cfc66":"fig, ax = plt.subplots(1,1, figsize=(12,6))\n\n# Accumulated CV score\nax.plot(score_list)\nax.set_xticks(list(range(len(feat_list))))\nax.set_xticklabels(feat_list, rotation=60)\nax.set_xlabel('Added feature')\nax.set_ylabel('CV score (R2) (blue)')\nax.grid()\n\n# Derivative\naxR = ax.twinx()\naxR.set_ylabel('Individual feature contribution (orange)')\naxR.bar(left=list(range(19)), height=np.diff([0]+score_list),\n        alpha=0.4, color='orange')\n\nplt.show()","fdb5534c":"features_range = range(1,24)\nscores_list = []\n\nfor n in features_range:\n    rfe = RFE(lr, n, step=1)\n    rfe.fit(X_train, y_train)\n    scores_list.append(rfe.score(X_train, y_train))","948b0e3f":"fig, ax = plt.subplots(1,1, figsize=(12,6))\n\n# Regular sized plot\nax.plot(features_range, scores_list)\nax.set_xlabel('Number of features')\nax.set_ylabel('CV score (R2)')\nax.set_xticks(features_range)\nax.grid()\n\n# Vertical magnification\naxR = ax.twinx()\naxR.plot(features_range, scores_list\/max(scores_list), linestyle='--')\naxR.set_ylabel('% of maximum CV score (dashed)')\naxR.set_ylim(0.94,1.01)\n\nplt.show()","5fcecdec":"# Fit RFE model with n_features_to_select=13 to X_train\nrfe = RFE(lr, 13, step=1)\nrfe.fit(X_train, y_train)\n\n# Print list of selected columns\nlist(X_train.columns[rfe.support_])","46594bf6":"X_rfe = X_train[list(X_train.columns[rfe.support_])]","68368051":"eval_model(lr, X=X_std);","228ac714":"ridge = linear_model.Ridge()\neval_model(ridge, X=X_std);","50d3a6ec":"# Trying different alpha parameters for Ridge regression\n\ntest_int = np.logspace(-10, 6, 17)\n\ntrain_scores, valid_scores = \\\n            validation_curve(ridge, X_std, y_train, 'alpha',\n                                test_int, cv=5)\n\n# Plot validation curve\nplt.figure(figsize=(12,6))\nplt.title('Validation curve')\nplt.semilogx(test_int, np.mean(train_scores, axis=1), \n             marker='o', label='Training data')\nplt.semilogx(test_int, np.mean(valid_scores, axis=1), \n             marker='o', label='Validation data')\nplt.legend()\nplt.ylabel('CV score (R2)')\nplt.xlabel('alpha parameter')\nplt.grid()\nplt.show()","e2461505":"lasso = linear_model.Lasso()\neval_model(lasso, X=X_std);","39a6a857":"# Trying different alpha parameters for Lasso regression\n\ntest_int = np.logspace(-10, 6, 17)\n\ntrain_scores, valid_scores = \\\n            validation_curve(lasso, X_std, y_train, 'alpha',\n                                test_int, cv=5)\n\n# Plot validation curve\nplt.figure(figsize=(12,6))\nplt.title('Validation curve')\nplt.semilogx(test_int, np.mean(train_scores, axis=1), \n             marker='o', label='Training data')\nplt.semilogx(test_int, np.mean(valid_scores, axis=1), \n             marker='o', label='Validation data')\nplt.legend()\nplt.ylabel('CV score (R2)')\nplt.xlabel('alpha parameter')\nplt.grid()\nplt.show()","efa6defc":"svr = SVR(kernel='linear', C=1)\neval_model(svr, X=X_std);","b4353356":"forest = RandomForestRegressor(max_depth=4, random_state=0,\n                              n_estimators=200)\neval_model(forest, X=X_std);","5ba7f4ba":"%timeit eval_model(lr, X=X_std, out=False)","8dccbea3":"%timeit eval_model(forest, X=X_std, out=False)","1533e581":"%timeit eval_model(forest, X=X_rfe, out=False)","af592e50":"# Second order (quadratic) polynomials with linear regression\npipe = Pipeline([('poly', PolynomialFeatures(2)),\n                 ('lr', lr)])","9d63fff9":"eval_model(pipe, X=X_train); # quadratic terms, unstandardized features","386f1a8a":"eval_model(pipe, X=X_std);   # quadratic terms, standardized features","1b04c1a9":"# Third order (cubic) polynomials with linear regression\npipe = Pipeline([('poly', PolynomialFeatures(3)),\n                 ('lr', lr)])","7a35398a":"eval_model(pipe, X=X_train); # cubic terms, unstandardized features","46f9f08a":"pipe = Pipeline([('rfe', RFE(lr, 13, step=1)),\n                 ('poly', PolynomialFeatures(3)),\n                 ('lr', lr)])\neval_model(pipe, X=X_std);","23cdb574":"pipe = Pipeline([('pca', PCA(n_components=13)),\n                 ('lr', lr)])\neval_model(pipe, X=X_std);","a0c99c74":"pipe = Pipeline([('pca', PCA(n_components=13)),\n                 ('poly', PolynomialFeatures(3)),\n                 ('lr', lr)])\neval_model(pipe, X=X_std);","4bbb4aae":"scores_list = []  # List in which scores will be saved\n\n# Loop over values for n_components\nfor n_components in range(7,17):\n    \n    # Build pipe\n    pipe = Pipeline([('pca', PCA(n_components=n_components)),\n                     ('poly', PolynomialFeatures(3)),\n                     ('lr', lr)])\n    \n    # Evaluate model, print, and save score in scores_list\n    cvs = eval_model(pipe, X=X_std, out=False);\n    print('n_components = %d :  %.3f pm %.3f' % \\\n          (n_components, cvs.mean(), cvs.std()))\n    scores_list.append(cvs.mean())","adac686a":"plt.figure(figsize=(12,6))\nplt.xlabel('n_components')\nplt.ylabel('CV score (R2)')\nplt.plot(range(7,17), scores_list, marker='o')\nplt.grid()\nplt.show()","a6906748":"from mpl_toolkits.basemap import Basemap\nfrom matplotlib.cm import bwr # import color map\n\nplt.figure(figsize=(12, 12))\n\n# Create map with basemap\nm = Basemap(projection='cyl', resolution='i',\n            llcrnrlat = df['lat'].min()+0.1, \n            llcrnrlon = df['long'].min()-0.1,\n            urcrnrlat = df['lat'].max(), \n            urcrnrlon = df['long'].max()-0.6)\n\n# Load satellite image (deactivated for Kaggle)\n#m.arcgisimage(service='ESRI_Imagery_World_2D', \n#              xpixels=1500, verbose=True)\n\n# Reducing number of properties shown\nplot_df = df[::10]\n\nfor index, house in plot_df.iterrows(): # Loop over houses\n    \n    # Get position on the map from geo coordinates\n    x,y = m(house['long'], house['lat'])\n    \n    #  Get color from price\n    price_min = 200000\n    price_max = 800000\n    price_norm = (house['price'] - price_min) \/ (price_max - price_min)\n\n    rgb_exp = price_norm\n    rgb=[0,0,0]\n    for i in range(3): rgb[i] = int(bwr(rgb_exp)[i]*255)\n    color_hex = \"#%02x%02x%02x\" % (rgb[0], rgb[1], rgb[2])\n    \n    #Plot data point\n    plt.plot(x,y, 'o', markersize=6, color=color_hex, alpha=0.6)\n   \nplt.show()","d7d2d858":"# House Sales in King County","4ba0f976":"# 2. Pridictive Model for House Prices<a id='model'><\/a>","6408191e":"### 2.3.1. Ridge","cb709853":"### 2.4.1. Add polynomial features","b11d0975":"The feature most correlated with price is the size of the living area `sqft_living`. Here, I'm visualizing the relationship of these two quantities in a hexagonal binning plot.","b9c922cd":"In this section, the size of the feature matrix will be reduced not through RFE before adding cubic terms, but using principal component analysis (PCA). First, I will train a linear regression model on the PCA-reduced feature matrix alone. Not surprisingly, this reduces the score:","dd7c975b":"### 2.2.1. Add features according to their correlation with price","398b242c":"One example is the house with `id` 7200179 which was sold in October 2014 for \\$150,000 and then sold again for \\$175,000 six months later.","11bbbabb":"First, the dataset is loaded from a csv file and the date column is converted from string to a timestamp.","eeeade2a":"## 2.4. Feature Engineering<a id='fe'><\/a>","6d7b34e4":"I'm creating a new feature matrix `X_rfe` containing only the 13 most relevant features.","e6d9b74b":"As the above plot shows, the ideal number for `n_components` is 14, yielding a score of 0.78. Thus, the combination of PCA and adding cubic terms does not yield a better result than square terms alone.","81a2d365":"# 1.2. House Prices","04d35851":"Below is a histogram of the sales prices. Most prices are between \\$200,000 and \\$1,000,000.","871a1403":"The model's score approaches the maximum value relatively quickly and already after 13 features, the score is above 99% of the final score, meaning that 10 features (almost half) can be discarded without significantly impacting the model accuracy. These are those 13 features:","da8ceb63":"It becomes clear from this map that house prices are higher in the downtown area (near Elliott Bay in top left of the map) and in Redmond (east of Lake Washington). House prices are intermediate north and south of downtown, and are lowest south of the city, near the airport. In addition we can see that waterfront property is more expensive.","bf4f5851":"Next, I will group the data by date and then day of the week to get a sense for how the number of transactions varies over the course of a year and a week. The a significant dips in transactions in the winter and on the weekend.","f1e6ebc5":"Now, I will loop over the features sorted by correlation and successively add more and more features to the model. At each step, the CV score is calculated and stored in `score_list`. The order in which features were added is stored in `feat_list`.","91960e36":"Using `sciki-learn`'s `PolynomialFeatures()`, I am expanding the feature matrix by quadratic and cubic terms. This improves the model quality to a score of 0.81 in case of polynomial order 2 and a standardized input matrix.","2e7a646f":"On the other hand, the Random Forest Regressor proves the most accurate model with an R2 score of 0.72, however this comes at the substantial computational cost. The random forest regressor takes over 400 times longer, although using the reduced feature set `X_rfe`, the computation takes less than half as long.","4235f8ce":"In this section I will try to reduce the number of features in order to possibly reduce the effects of overfitting and reduce training time. First, I will build a model with successively more relevant features, second, I will use recursive feature elimination (RFE).","4fbb7373":"According to this model, every square foot of living space adds \\$112 to the property value, every bathroom adds \\$39,528, and a waterfron view adds \\$606,251. While these numbers may sound reasonable, the is cause for scepticism looking at some of the other predictions: it seems counter-intuitive that each bedroom would *reduce* the value by \\$34,997 and that the size of the lot has no influence on the pricing.\n\nSince I will be evaluating various regressors in combination with other estimators, the following function is defined as a shortcut to evaluate a model:","8a40deb0":"Ridge regression is an alternative to ordinary least squares regression, the main difference being that large coefficients are penalized in this model. The strength of this regularization is determined by the hyperparameter `alpha`. With the default of `alpha`=1.0, ridge regression yields the same R2 score:","d4015e14":"Now, I'm adding cubic terms after reducing the feature matrix size. The combination of PCA and cubic terms yields a score of 0.77 which is significantly better than the score of the linear model alone.","0e1a5294":"# 3. Visualization on a Map<a id='map'><\/a>","5f214de7":"### 2.4.3. Combine polynomial features with PCA","dbe36de5":"## 2.3. Different Regression Algorithms<a id='alg'><\/a>","0f3fd58a":"### 2.3.3. SVR","84eb5196":"So far I've only used ordiniary least squares regression, `lr`. The highest score achieved with this model was 0.70.","9ab8a492":"All of the features are numerical, except for the date of the transaction.","f7ccf8d7":"__Different regressors__: I started with a simple linear model (`LinearRegression()`), which achieved a score of 0.70. The related ridge and lasso models (`Ridge()`, `Lasso()`) which penalize large weights yield the same result, 0.70. A support vector classifier (`SVR()`) gave a score of only 0.09 but random forest regression (`RandomForestRegressor()`) gave a slightly better (the best) score with 0.72, but at significant computational cost.\n\n__Feature engineering__: I then modified the feature set used by the model, and evaluated them with the linear model. First, I used polynomial features (`PolynomialFeatures()`) which improved the score to 0.74 but this result was improved even further to __0.82__ when using scaled features. This is the overall best result. \n\nMoving further to cubic terms reduced the score to 0.63, in addition the computational cost went up substantially. To combate that, I tried preprocessing the data with RFE (which yielded bad results) and PCA. After just reducing the dimensionality to 13 with PCA, the score was 0.66. But when PCA was used for preprocessing before creating cubic terms with `PolynomialFeatures(3)`, the score went up to 0.78.","fcb01847":"In the following, I will build a predictive regression model which will predic the price of a house based on the various features of the house. In order to prepare the data set for model building, the `date` column is transformed into numerical features (year, month, day, and day of the week) and the data are split into a training and a test set. In addition, a standardized feature matrix `X_std` is created.","c41dd1bd":"The following correlation matrix shows the correlation between any two features of the data set.","d1cbba5f":"## 2.1. Simple Model: Linear Regression<a id='simple'><\/a>","d6f72a05":"Another alternative regression model is Support Vector Regression (SVR), which in this case proves much worse than the linear model:","934b7166":"The data includes geographic information in the form of latitude and longitude of the sold properties. In the following, I use `Basemap` to plot a fraction (10%) of the houses on a map, with their price colorcoded, blue being cheap and red being expensive.","2e4d7be8":"After having investigated options to eliminate irrelevant features above, I will now create additional features that improve the quality of the model.","4258b3de":"## 1.1. Correlation Matrix","f157802d":"The first idea is to start building a very simple model with only one feature, namely the one with the highest correlation with `price`, namely `sqft_living`. Then, more features are added in order of their correlation with `price`. For each model, a score is calculated.\n\nThe following code segment produces a `Series` of features and their respective correlations with `price`.","a9f67029":"## 2.2. Feature Selection<a id='sel'><\/a>","4b0ab5eb":"The following plot shows the improvement of the model with each new feature added. `sqft_living` along yields a score of 0.49 and the score continuously increases with every feature. There are only a few features that do not inprove the model and none that reduce its score. The contributions of the individual features is indicated by the orange bars.","161d4642":"# 1. Exploratory Data Analysis<a id='eda'><\/a>","e4a76d52":"Some `id`s appear more than once in the dataset, indicating that the house was sold twice within a year. By grouping the data by `id` and filtering the original data, I can investigate these properties. For example, the below histogram shows their sales price distribution.","090868fe":"Training the model on a feature matrix containing cubic terms increases the training time substantially. Therefore, I will try to reduce the number of features in the following by using RFE to reduce the size of the feature matrix before adding cubic terms. However, this model does not yield useful predictions.","589318b0":"Next, I will use `scikit-learn`'s RFE implementation to eliminate features in a more sophisticated manner. In the following, RFE is performed for any an increasing number of features to be selected `n` and for each model, the score is recorded in `scores_list`. The below plot shows how the score increases are `n` increases.","9d566990":"In the following, I will test PCA with different values for `n_components`.","773562ba":"In addition to the correlations between `price` and other features, there are some other noteworthy facts about the correlation matrix: the strongest correlation is between `sqft_living` and `sqft_above`, the srongest negative correlation is between `zipcode` and `longitode`, suggesting that zipcodes in King County were drawn from east to west. Generally, there is a strong correlation between the quantities that relate to the size of the house: `sqft_living`, `sqft_living15`, `sqft_above`, `bedrooms`, and `bathrooms`.","552b2b25":"The same behavior (and no improvement in the R2 score) is observed for regression with lasso (L1) regularization. This is likely due to the relatively small number of features.","e5d354af":"### 2.2.2. Recursive Feature Elimination (RFE)","e6aa4d52":"## 2.5. Summary of Models<a id='25'><\/a>","b506b216":"### 2.3.4. Random Forest Regressor","9ac2550e":"In this project, I am analyzing a dataset of about 21,000 house sales in King County (Seattle) over the course of a year (in 2014\/15). The data are  taken from a [Kaggle competition](https:\/\/www.kaggle.com\/harlfoxem\/housesalesprediction). The goal is to build a model predicting sales prices.\n\nIn the first section, I will explore the correlation between the different features and the target variable (price) and visualize the data. In the second part, I will build a predictive regression model. In order to do so, I will use different regression algorithms and various different feature selection and engineering techniques. The best model is linear regression with data preprocessed by creating quadratic polynomial features. This model has an accuracy of 0.82 (R2 score).\n\n[1. Exploratory Data Analysis](#eda)<br>\n[2. Predictive Model for House Prices](#model)<br>\n[2.1. Simple Model: Linear Regression](#simple)<br>\n[2.2. Feature Selection](#sel)<br>\n[2.3. Different Regression Algorithms](#alg)<br>\n[2.4. Feature Engineering](#fe)<br>\n[2.5. Summary of Models](#25)<br>\n[3. Visualization on a Map](#map)<br>","06651b1d":"The simplest approach to this regression task is an ordinary least squares regression. I'm using the `LinearRegression` regressor implemented in `scikit-learn`. The performance of the regressor is evaluated by 10-fold cross-validation on the training set using the R2 score as the scoring metric.","f180605a":"In the following, a validation curve is used to determine whether other parameters of `alpha` yield improved scores. As the plot below shows, this is not the case. In fact, the model score seems independent of `alpha`, except for values exceeding 1,000 for which the model quickly deteriorates.","817b46b2":"First, I'm going to gather some basic information about the data set:","808f7d9c":"There are 21,613 house sales in this data set, each of which has 21 features (listed above).","8640b95a":"### 2.3.2. Lasso","b604f8fa":"Looking at the correlation between `price` and the other features, one can notice that the strongest correlation is between price and `sqft_living` (0.7), `grade` (0.67), and `sqft_above` (0.61). Not surprisingly, there is virtually no correlation between `price` and `zipcode`, `id`, and `longitude`.","f2ada1c0":"This simple model achieves an R2 score of 0.70 and we can use the coefficients of the individual features to gain quantiative insights into what affects the pricing of the houses."}}