{"cell_type":{"3181753e":"code","cf448fc9":"code","019c6340":"code","fea8c146":"code","83a4157d":"code","7567bb2a":"code","3c97f513":"code","8ff1d4f8":"code","c8aa101a":"code","ffd660f9":"code","d976a2e0":"code","3fa345bf":"code","ac1ddbc4":"code","acee4ab7":"code","3efc1060":"code","3260dc15":"code","2ff7be4b":"code","9be86648":"markdown","c62a7973":"markdown","e719561d":"markdown","949f7d92":"markdown","26d04159":"markdown","55fb9ff3":"markdown","c5942417":"markdown","0913eeb8":"markdown","d8574abc":"markdown","079c718e":"markdown"},"source":{"3181753e":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()\nwarnings","cf448fc9":"print(tf.__version__)","019c6340":"from sklearn.datasets import load_breast_cancer\n\ndataset = load_breast_cancer()\ndataset.keys()","fea8c146":"dataset.data.shape, dataset.target.shape","83a4157d":"print(dataset.DESCR)","7567bb2a":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target)\n\nfor i, val in enumerate((X_train, X_test, y_train, y_test)):\n    var = ['X', 'y']\n    label = ['train', 'test']\n    print(f'# {var[i\/\/2]}_{label[i%2]}\\t : ', val.shape)","3c97f513":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","8ff1d4f8":"from sklearn.decomposition import PCA\n\npca = PCA()\npca.fit(X_train)\n\nplt.figure(figsize=(8, 5), dpi=100)\nplt.plot(np.cumsum(pca.explained_variance_ratio_))","c8aa101a":"X_pca = PCA(2).fit_transform(X_train)\n\nplt.figure(figsize=(8, 5), dpi=100)\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_train,\n            cmap=plt.cm.get_cmap('RdBu'), s=15)\nplt.title(f'Information preserved {np.cumsum(pca.explained_variance_ratio_)[1].round(2)}', size=26)\n","ffd660f9":"pca1 = PCA(1)\nX_pca = pca1.fit_transform(X_train)\n\nplt.figure(figsize=(8, 5), dpi=100)\nplt.scatter(X_pca[:, 0], y_train, c=y_train,\n            cmap=plt.cm.get_cmap('RdBu'), s=15)\nplt.title(f'Information preserved {np.cumsum(pca1.explained_variance_ratio_)[0].round(2)}', size=26)","d976a2e0":"from keras.models import Sequential\nfrom keras.layers import Dense, BatchNormalization, Dropout\nfrom tensorflow.keras.optimizers import RMSprop\nfrom keras import callbacks\n\nmodel = Sequential()\nmodel.add(Dense(1, activation='sigmoid', input_shape=(30, )))\n","3fa345bf":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['binary_accuracy'])\nearly_stopping = callbacks.EarlyStopping(min_delta=0.01, patience=26, restore_best_weights=True)\n\nhistory = model.fit(X_train, y_train, batch_size=3, epochs=1000, validation_data=(X_test, y_test), callbacks=early_stopping, verbose=True)","ac1ddbc4":"dump = history.history\n\nloss = dump['loss']\nval_loss = dump['val_loss']\n\nacc = dump['binary_accuracy']\nval_acc = dump['val_binary_accuracy']\n","acee4ab7":"fig, ax = plt.subplots(1, 2, figsize=(16, 5), dpi=100)\n\nepochs = np.array(history.epoch) + 1\nax[0].plot(epochs, loss, label='train loss')\nax[0].plot(epochs, val_loss, label='val_loss')\nax[0].legend()\n\nax[1].plot(epochs, acc, label='train acc')\nax[1].plot(epochs, val_acc, label='val_acc')\nax[1].legend(loc='best')\n\nplt.suptitle('Model Performance curve', size=26)","3efc1060":"from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n\ny_proba = model.predict(X_test)\ny_pred = y_proba.round().astype(int)\ncm = confusion_matrix(y_pred, y_test)\n","3260dc15":"sns.heatmap(cm, cbar=False, annot=True, square=True)","2ff7be4b":"print(classification_report(y_pred, y_test))","9be86648":"# creating a ANN model","c62a7973":"# Splitting the data in train and test sets","e719561d":"# compiling and fitting the model","949f7d92":"# Loading the dataset from sklearn","26d04159":"# scoring the predictions","55fb9ff3":"# Importing the Standard Libraries","c5942417":"# Checking the tf version","0913eeb8":"# Feature Scaling","d8574abc":"# visualizing clusters","079c718e":"# plotting the training and validation curve"}}