{"cell_type":{"a76b52a7":"code","70cfb23e":"code","03b6aaea":"code","ca1a230d":"code","aba9a080":"code","69c14052":"code","2ac62762":"code","3744cb1e":"code","8cad5218":"code","afd4eb52":"code","f4a255f8":"code","d5a8b329":"code","57d6d186":"code","66fbdb68":"code","a5852499":"code","2ad64924":"code","eef85cbf":"code","f3561f32":"code","167aba1f":"code","65615a5e":"code","ac79cd08":"code","c38d18e2":"code","1bfea768":"code","11e60f7b":"code","0b8649dd":"code","3ae97e95":"code","f225ea35":"code","969cfc5d":"code","d461b8cf":"code","d26345a3":"code","b52c80b7":"code","42413b0b":"code","7360ed67":"code","14a18116":"code","defea432":"code","99a6d7aa":"code","e4d9b8c1":"code","a5b2df5d":"markdown","c2f1487c":"markdown","8c1a5bb9":"markdown","4b77f1e9":"markdown","44119cd1":"markdown","04615ebe":"markdown","20d96600":"markdown","8aebcc60":"markdown","0f14ec73":"markdown","e233ccab":"markdown","6d33eff2":"markdown","5eb39400":"markdown","7beba4a6":"markdown","aecaa742":"markdown","ec818a30":"markdown","bc9ca0b7":"markdown","8c664ef4":"markdown","5455b33d":"markdown","49c3435a":"markdown","3a2a10b3":"markdown","0fa8d562":"markdown","424768ba":"markdown","95e1a93e":"markdown","4b7bda70":"markdown"},"source":{"a76b52a7":"# Custom G-Research python module needed\nimport gresearch_crypto\n\n# Pandas for data manipulation\nimport pandas as pd\nimport numpy as np\n\n# module provides a portable way of using operating system dependent functionality\nimport os \n\n # Importing pyplot interface using matplotlib\nimport matplotlib.pyplot as plt \n\n# Importing seaborn library for interactive visualization\nimport seaborn as sns \n\n# Importing WordCloud for text data visualization\nfrom wordcloud import WordCloud\n\n# Importing matplotlib for plots\nimport matplotlib as mpl\n\n#Importing datetime for using datetime\nfrom datetime import datetime\n\n#Importing plotly Express for visualization\nimport plotly.express as px\n\n# Importing statsmodel for statistical methods\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\n\n#Importing for customizing properties in matplotlib\nfrom pylab import rcParams\n\nimport itertools","70cfb23e":"# Custom G-Research python module requires this step\n#env = gresearch_crypto.make_env()","03b6aaea":"# Display files available in this competition folder\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca1a230d":"# load training data\ntrain_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv', low_memory=False)\n\n# load asset details data\nasset_details_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv', low_memory=False)\n\n# load example test data\ntest_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/example_test.csv', low_memory=False)","aba9a080":"# get shape of dataframe\nprint('Shape of train dataset is:', train_df.shape)\n\n# print summary of dataframe\ntrain_df.info(show_counts=True)","69c14052":"# print first 10 rows of dataframe\ntrain_df.head(10)","2ac62762":"# print summary of asset details dataframe\nasset_details_df.sort_values(by=['Weight'], ascending=False)","3744cb1e":"# print descriptive statistics for train dataset\ntrain_df.describe(include='all').round(1)","8cad5218":"# merge dataframe using Asset_ID as key\ngresearch_crypto_df = pd.merge(train_df,asset_details_df,on=['Asset_ID'])","afd4eb52":"# print first 10 rows of merged dataframe\ngresearch_crypto_df.head(10)","f4a255f8":"# print last 10 rows of merged dataframe\ngresearch_crypto_df.tail(10)","d5a8b329":"# drop missing value from dataframe\ngresearch_crypto_df.dropna(axis=0, inplace=True)","57d6d186":"# print summary of dataframe\ngresearch_crypto_df.info(show_counts=True)","66fbdb68":"# convert timestamp to Datetime for further analysis\ngresearch_crypto_df['Datetime'] = pd.to_datetime(gresearch_crypto_df['timestamp'], unit='s')","a5852499":"# Lookup asset name and return asset series\ndef asset_lookup (asset_name):\n    # check for Asset_Name\n    crypto_asset =gresearch_crypto_df.loc[gresearch_crypto_df['Asset_Name'] == asset_name]\n    # drop all other columns as of now\n    crypto_asset_df= crypto_asset.drop(columns=['timestamp','Asset_ID','Count','Open','High','Low','Close','Volume','VWAP','Weight','Asset_Name'], axis=1)\n    # sort by Datetime and set index\n    crypto_asset_df = crypto_asset_df.sort_values('Datetime')\n    crypto_asset_df = crypto_asset_df.groupby('Datetime')['Target'].sum().reset_index()\n    crypto_asset_df = crypto_asset_df.set_index('Datetime')\n    # group the data by business day\n    return crypto_asset_df['Target'].resample('B').mean()","2ad64924":"# check for stationarity using ADF Test for a given asset series\ndef asset_stationarity (asset_series):\n    result = adfuller(asset_series)\n    print('ADF Statistic: %f' % result[0])\n    print('p-value: %f' % result[1])\n    print('Critical Values:')\n    for key, value in result[4].items():\n     print('\\t%s: %.3f' % (key, value))","eef85cbf":"# visualization for trend,seasonality and residual for a given asset series\ndef asset_decompose (asset_series):\n    rcParams['figure.figsize'] = 18, 8\n    decomposition = sm.tsa.seasonal_decompose(asset_series, model='additive')\n    fig = decomposition.plot()\n    plt.show()","f3561f32":"# create series for Asset_Name Bitcoin\nbitcoin = asset_lookup('Bitcoin')\nbitcoin.isna().sum()","167aba1f":"# check asset stationarity\nasset_stationarity (bitcoin)","65615a5e":"# visualize trend, seasonality and residual\nasset_decompose(bitcoin)","ac79cd08":"# ARIMA models are denoted by p,d,q which are seasonality, trend and residual (noise)\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","c38d18e2":"# search for best parameter combination for ARIMA model\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(bitcoin,order=param,seasonal_order=param_seasonal,enforce_stationarity=False,enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","1bfea768":"# lets fit ARIMA model\nmodel = sm.tsa.statespace.SARIMAX(bitcoin,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = model.fit()\nprint(results.summary().tables[1])","11e60f7b":"# model diagnostics to check for errors\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","0b8649dd":"# validate forecast\npred = results.get_prediction(start=pd.to_datetime('2021-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = bitcoin['2018':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Target')\nplt.legend()\nplt.show()","3ae97e95":"y_forecasted = pred.predicted_mean\ny_truth = bitcoin['2021-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","f225ea35":"print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))","969cfc5d":"# visualization of forecast\npred_uc = results.get_forecast(steps=100)\npred_ci = pred_uc.conf_int()\nax = bitcoin.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Target')\nplt.legend()\nplt.show()","d461b8cf":"# create series for Asset_Name Ethereum\nethereum = asset_lookup('Ethereum')\nethereum.isna().sum()","d26345a3":"# check asset stationarity\nasset_stationarity (ethereum)","b52c80b7":"# visualize trend, seasonality and residual\nasset_decompose(ethereum)","42413b0b":"# search for best parameter combination for ARIMA model\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(ethereum,order=param,seasonal_order=param_seasonal,enforce_stationarity=False,enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","7360ed67":"# lets fit ARIMA model\nmodel = sm.tsa.statespace.SARIMAX(ethereum,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = model.fit()\nprint(results.summary().tables[1])","14a18116":"# model diagnostics to check for errors\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","defea432":"# validate forecast\npred = results.get_prediction(start=pd.to_datetime('2021-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = bitcoin['2018':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Target')\nplt.legend()\nplt.show()","99a6d7aa":"# visualization of forecast\npred_uc = results.get_forecast(steps=100)\npred_ci = pred_uc.conf_int()\nax = bitcoin.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Target')\nplt.legend()\nplt.show()","e4d9b8c1":"thank_you_str=\"Thanks,Happy Learning,Collaboration,Thankyou,Keep Learning\"\n# create WordCloud with converted string\nwordcloud = WordCloud(width = 1000, height = 500, random_state=1, background_color='white', collocations=True).generate(thank_you_str)\nplt.figure(figsize=(20, 20))\nplt.imshow(wordcloud) \nplt.axis(\"off\")\nplt.show()","a5b2df5d":"---\n**Q: What does data looks like for asset_details dataset?**\n\n---","c2f1487c":"---\n**Q: What is the structure of train dataset?**\n\n---","8c1a5bb9":"Need to merge train_df and asset_details_df","4b77f1e9":"**Problem Statement:**\n\n* Over $40 billion worth of cryptocurrencies are traded every day. \n * They are among the most popular assets for speculation and investment, yet have proven wildly volatile. \n * Fast-fluctuating prices have made millionaires of a lucky few, and delivered crushing losses to others. \n* Could some of these price movements have been predicted in advance?\n\n* Use machine learning expertise to forecast short term returns in 14 popular cryptocurrencies. \n* Dataset contains millions of rows of high-frequency market data dating back to 2018 which can be used to build ML model. \n* Once the submission deadline has passed, final score will be calculated over the following 3 months using live crypto data as it is collected. \n \n---\n \n**Main Dataset:**\n\n* **train.csv** file contains training set.\n* **example_test.csv** file includes example of the data that will be delivered by the time series API.\n* **example_sample_submission.csv** file includes example of the data that will be delivered by the time series API. The data is just copied from train.csv.\n* **asset_details.csv** file provides the real name and of the cryptoasset for each Asset_ID and the weight each cryptoasset receives in the metric.\n* **supplemental_train.csv**- After the submission period is over this file's data will be replaced with cryptoasset prices from the submission period.\n\n**gresearch_crypto** - An unoptimized version of the time series API files for offline work. You may need Python 3.7 and a Linux environment to run it without errors.\n\n---","44119cd1":"**train dataset information:**\n\n* There are 24236806 data points (rows) and 10 feature (column) in train dataset.\n* There are seven columns which are of numerical float type and three column of numerical int type.\n* There are missing values (non-null count is not same) for VWAP and Target columns.","04615ebe":"---\n**Thank you and Happy Learning.**\n\n---","20d96600":"---\n**Q: What is the statistics description for train dataset?**\n\n---","8aebcc60":"**train dataset data description:**\n\n* There are no missing values for timestamp and appears to be having normal distribution of datapoints.\n* There are no missing values for Asset_ID and appears to be having normal distribution of datapoints.\n* There are no missing values for Count, Open, High, Low, Close and Volume but appears to be having skewed distribution of datapoints.\n* There are missing values for VWAP and Target but appears to be having normal distribution of datapoints.","0f14ec73":"---\n**Q: What does model diagnostics visualization looks like for Bitcoin?**\n\n---","e233ccab":"---\n**Q: What does One-step ahead forecast looks like for Bitcoin?**\n\n---","6d33eff2":"---\n# Model Building\/Prediction\n\n---","5eb39400":"**Lets explore ARIMA model for Ethereum**","7beba4a6":"---\n**Data Definition:**\n\n---\n\n* **train.csv:** This dataset contains information on historic trades for several cryptoassets.","aecaa742":"---\n**Importing Libraries:**\n\n* To get started we will use Python for data pre-processing and data analysis.\n\n* Import python libraries as necessary to get started for data load and later import other libraries as needed\n\n---","ec818a30":"---\n**Q: What does visualization of forecast looks like for Bitcoin?**\n\n---","bc9ca0b7":"---\n**Q: What does visualization of forecast looks like for Ethereum?**\n\n---","8c664ef4":"---\n**Q: What does One-step ahead forecast looks like for Ethereum?**\n\n---","5455b33d":"---\n# Data Definition\/Description\n\n---","49c3435a":"---\n**Q: What does model diagnostics visualization looks like for Ethereum?**\n\n---","3a2a10b3":"**Lets explore ARIMA model for Bitcoin**","0fa8d562":"---\n# G-Research Crypto Forecasting - Prediction\n\n---","424768ba":"| No. | Feature Name | Description of the feature |\n| :-- | :--| :--| \n|01| **timestamp**   | A timestamp for the minute covered by the row |\n|02| **Asset_ID** | An ID code for the cryptoasset                 |\n|03| **Count**   | The number of trades that took place this minute                 |\n|04| **Open**   | The USD price at the beginning of the minute  |\n|05| **High**   | The highest USD price during the minute|\n|06| **Low**   | The lowest USD price during the minute  |\n|07| **Close**   | The USD price at the end of the minute|\n|08| **Volume**   | The number of cryptoasset units traded during the minute|\n|09| **VWAP**   | The volume weighted average price for the minute  |\n|10| **Target**   | 15 minute residualized returns|","95e1a93e":"---\n**Q: What does data looks like for train dataset?**\n\n---","4b7bda70":"Handle missing value, will drop them"}}