{"cell_type":{"254e7ba7":"code","488ced18":"code","b06593ab":"code","be2a96e5":"code","5c20013d":"code","34a87bb9":"code","046f823e":"code","a6002ae9":"code","8064bf57":"code","768be230":"code","a1634402":"code","e4206fc1":"code","f644225b":"code","be05ba7b":"code","3113276f":"code","6b38449c":"code","607ed069":"code","c4fd5e1f":"code","38ebab6f":"code","daa29faf":"code","ae8afd0f":"code","70b01c27":"code","a7a656a1":"code","d3146a6c":"markdown","5482f5d8":"markdown"},"source":{"254e7ba7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","488ced18":"# read train \ntrain = pd.read_csv(\"..\/input\/train.csv\")\nprint(train.shape)\ntrain.head()","b06593ab":"# read test \ntest= pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)\ntest.head()","be2a96e5":"# to seperate labels from train data\nY_train = train[\"label\"]\nX_train = train.drop([\"label\"],axis=1)","5c20013d":"plt.figure(figsize=(15,7))\nsns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","34a87bb9":"# plot some samples\nimg = X_train.iloc[3].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","046f823e":"# Normalization - Reducing to grayscale\nX_train = X_train \/ 255.0  # max value for colors is 255, so we divide into 255 \ntest = test \/ 255.0\nprint(\"X_train shape: \", X_train.shape)\nprint(\"test shape: \", test.shape)","a6002ae9":"# Reshaping\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","8064bf57":"# Label encoding\nfrom keras.utils.np_utils import to_categorical # one hot encoding\nY_train = to_categorical(Y_train, num_classes=10)","768be230":"# Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","a1634402":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters=16, kernel_size=(7,7), padding = 'Same',\n                activation='relu',input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))   # %25 random dropout\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (4,4),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","e4206fc1":"# Define the optimizer\noptimizer = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999)","f644225b":"# Compile the model\nmodel.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])","be05ba7b":"epochs = 100  # for better result increase the epochs\nbatch_size = 50","3113276f":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimension reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","6b38449c":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),\n                             epochs = epochs, validation_data = (X_val, Y_val), \n                             steps_per_epoch = X_train.shape[0] \/\/ batch_size)","607ed069":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","c4fd5e1f":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","38ebab6f":"Y_test = model.predict(test)\n# Convert predictions classes to one hot vectors \nY_test_classes = np.argmax(Y_test,axis = 1)","daa29faf":"print(test.shape[0])","ae8afd0f":"x = list(range(1,28001))\ndata_x = pd.DataFrame(x)\ndata_x[1] = Y_test_classes\nprint(data_x.shape)","70b01c27":"data_x.columns = ['ImageId', 'Label']\n","a7a656a1":"data_x.to_csv('mycsvfile.csv',index=False)","d3146a6c":"**CNN**","5482f5d8":"<a id=\"1\"><\/a>\n## Loading the Data Set\n"}}