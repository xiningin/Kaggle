{"cell_type":{"e1c7be8d":"code","6aeda743":"code","ec288e61":"code","beeb9f22":"code","0c3f220b":"code","4df63c10":"code","98247c34":"code","14bfc923":"code","f9389260":"code","fce9eda1":"code","d0c3cf67":"code","4c29ad6a":"code","c285d468":"code","90fad138":"code","16f91dbf":"code","3f123ec6":"code","149854a2":"code","e7b91d86":"code","c18fd923":"code","3d4398f9":"code","fc5bc6e0":"code","ebcbadc0":"code","eb895c1f":"code","05de5ca2":"code","288cc6fc":"code","6d0ecddd":"code","62e69230":"code","cc592670":"code","ae890e18":"code","2c2820db":"code","2b881ef5":"code","ad47c0f6":"code","29c65bd7":"code","900ce4b2":"code","95e0b559":"markdown","d94a8811":"markdown","d84dd18b":"markdown","63024449":"markdown","5a419d72":"markdown","a69c037c":"markdown","6bd302d9":"markdown","bbf8aba8":"markdown","b0150008":"markdown","61149098":"markdown","bed0dbbc":"markdown","1407b192":"markdown","04d89b02":"markdown","9afd9670":"markdown","7c51a9c8":"markdown","6a57165a":"markdown","7199aa64":"markdown","2586b6d9":"markdown","c4836078":"markdown","68a1d811":"markdown","581324d0":"markdown","b71c29e3":"markdown","323da1a6":"markdown","786b29c7":"markdown","b26cb178":"markdown","558a51eb":"markdown","62b33e5e":"markdown","03c0cd99":"markdown","d79955b8":"markdown","cc6a3508":"markdown","866fc5a2":"markdown","640196a5":"markdown"},"source":{"e1c7be8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6aeda743":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use(\"fivethirtyeight\")\nsns.set_style(\"darkgrid\")","ec288e61":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","beeb9f22":"display(train.head(3))\ndisplay(test.head(3))\ndisplay(sub.head(3))","0c3f220b":"display(train.shape)\nprint(\"--------\"*5)\ndisplay(test.shape)","4df63c10":"train.sample(10)","98247c34":"display(train.info())\nprint('-'*80)\ndisplay(test.info())","14bfc923":"print(\"Missing Values in Train:\\n\\n\", train.isnull().sum())\nprint(\"\\n\\nMissing Values in Test:\\n\\n\", test.isnull().sum())","f9389260":"display(train.describe().T)\ndisplay(test.describe().T)","fce9eda1":"train['target'].value_counts()","d0c3cf67":"import missingno as msno","4c29ad6a":"# Visualize missing values as a matrix\n# msno.matrix(train,figsize=(11,7), sparkline=False, fontsize=12, color=(0.27, 0.52, 1.0));\n# msno.matrix(train,figsize=(11,7), sparkline=False, fontsize=12, color=(0,.3,.3));\nmsno.matrix(train,figsize=(11,7), fontsize=12, color=(1, 0.38, 0.27));","c285d468":"# Visualize the number of missing values as a bar chart\n# color=\"dodgerblue\" \"orangered\"\n# msno.bar(train, color=\"dodgerblue\", sort=\"ascending\", figsize=(13,7), fontsize=12);","90fad138":"# Visualize the correlation between the number of missing values in different columns as a heatmap\n# msno.heatmap(train, cmap=\"RdYlGn\", figsize=(10,5), fontsize=12)","16f91dbf":"# msno.dendrogram(train, figsize=(12,7), fontsize=12)","3f123ec6":"!pip install evalml","149854a2":"import evalml","e7b91d86":"X = train.drop(columns=['target'])\ny = train['target']","c18fd923":"# X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)\n# X_train, X_test, y_train, y_test = evalml.preprocessing.split_data(X, y, problem_type='binary', test_size=.2)\n\n# binary classification --> problem_type='binary'\n# multi classification --> problem_type='multiclass'\n\nX_train, X_test, y_train, y_test = evalml.preprocessing.split_data(X, y, problem_type='multiclass')","3d4398f9":"evalml.problem_types.ProblemTypes.all_problem_types","fc5bc6e0":"# automl = AutoMLSearch(X_train=X_train, y_train=y_train, problem_type='binary')\n# automl = AutoMLSearch(X_train = X_train, y_train = y_train, problem_type='binary', max_batches=1, optimize_thresholds=True)\n\n# objective=\"F1\"              --> Binary Classification\n# objective=\"F1 Micro\"        --> Multiclass Classification  --> using micro averaging\n# objective=\"F1 Macro\"        --> Multiclass Classification  --> using macro averaging\n# objective=\"F1 Weighted\"     --> Multiclass Classification  --> using Weighted averaging\n\nfrom evalml import AutoMLSearch\n\nautoml = AutoMLSearch(X_train=X_train, y_train=y_train, problem_type=\"multiclass\", objective=\"F1 Micro\", \n                      allowed_model_families=['random_forest' , 'xgboost', 'lightgbm'],\n                      additional_objectives=None, max_batches=5)\nautoml.search()","ebcbadc0":"automl.rankings","eb895c1f":"# We can get the object of any pipeline via their id as well:\npipeline = automl.get_pipeline(1)\nprint('Name:\\n',pipeline.name)\nprint('\\n\\nParameters:\\n\\n', pipeline.parameters)","05de5ca2":"best_pipeline = automl.best_pipeline\nbest_pipeline","288cc6fc":"# We can also visualize the structure of our pipeline\nbest_pipeline.graph()","6d0ecddd":"automl.describe_pipeline(3)","62e69230":"automl.describe_pipeline(automl.rankings.iloc[0][\"id\"])","cc592670":"automl.results","ae890e18":"# Evaluate on the test data\nscores = best_pipeline.score(X_test, y_test, objectives=evalml.objectives.get_core_objectives('multiclass'))\nprint(f'Accuracy Binary: {scores[\"F1 Micro\"]}')                                                                                              ","2c2820db":"best_pipeline.fit(X_train, y_train)\npredictions_X_test = best_pipeline.predict(X_test)","2b881ef5":"predictions_test = best_pipeline.predict(test)","ad47c0f6":"# graph_permutation_importance(best_pipeline, X_test, y_test, \"F1\")\nbest_pipeline.graph_feature_importance(importance_threshold=0)","29c65bd7":"graph_confusion_matrix(y_test, predictions_X_test)","900ce4b2":"sub['Survived'] = predictions_test.to_series()\nsub.to_csv('submission.csv',index=False)\nsub.head()","95e0b559":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 4.1) Missing values <\/h1>","d94a8811":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.4) Get pipeline <\/h1>","d84dd18b":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.6) Describe pipeline <\/h1>","63024449":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:left;\"> Version 1 to 5 : Tabular Playground Apr <\/h1>\n<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:left;\"> Version 6 : Tabular Playground May <\/h1>","5a419d72":"- The **AutoMLSearch** class records detailed results information under the results field, including information about the **cross-validation scoring and parameters.**","a69c037c":"<h1 style='background-color:magenta; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;' > 3) Read Data <\/h1>","6bd302d9":"#### If we are interested in see more details about the pipeline, we can describe it using the id from the rankings table:","bbf8aba8":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 4.5) Visualize missing values as a dendogram <\/h1>","b0150008":"best_pipeline = automl.best_pipeline\nbest_pipeline.fit(X_train,y_train)\nprediction = best_pipeline.predict(test)","61149098":"<h2 style=color:green align=\"left\"> Table of Contents <\/h2>\n\n#### 1) Introduction to EvalML\n#### 2) Load Required Libraries\n#### 3) Read Data\n#### 4) EDA (Exploratory Data Analysis)\n#### 5) EvalML (AutoML)","bed0dbbc":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.7) Access raw results <\/h1>","1407b192":"<h1 style='background-color:magenta; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;' > 2) Load Required Libraries <\/h1>","04d89b02":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.1) Install EvalML (AutoML) <\/h1>","9afd9670":"<h1 style='background-color:magenta; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;' > 5) EvalML (AutoML) <\/h1>","7c51a9c8":"<h2 style=color:green align=\"left\"> 5.7.2) Confusion Matrix <\/h2>","6a57165a":"#### a) Install EvalML (AutoML)\n#### b) Configure search\n#### c) Pipeline Rankings\n#### d) Get pipeline\n#### e) Select Best pipeline\n#### f) Describe pipeline\n#### g) Access raw results","7199aa64":"- **EvalML** is an AutoML library which builds, optimizes, and evaluates machine learning pipelines using domain-specific objective functions.\n\n#### Key Functionality\n\n- **Automation**: Makes machine learning easier. Avoid training and tuning models by hand. Includes data quality checks, cross-validation and more.\n\n- **Data Checks**: Catches and warns of problems with your data and problem setup before modeling.\n\n- **End-to-end**: Constructs and optimizes pipelines that include state-of-the-art preprocessing, feature engineering, feature selection, and a variety of modeling techniques.\n\n- **Model Understanding**: Provides tools to understand and introspect on models, to learn how they'll behave in your problem domain.\n\n- **Domain-specific**: Includes repository of domain-specific objective functions and an interface to define your own.\n\n### Reference:\n - https:\/\/github.com\/alteryx\/evalml\n - https:\/\/github.com\/alteryx\/evalml\n - https:\/\/evalml.alteryx.com\/en\/stable\/install.html","2586b6d9":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 4.4) Visualize missing values as a heatmap <\/h1>","c4836078":"- Each **pipeline is given an id.** We can get more information about any **particular pipeline** using that id. Here, we will get more information about the **pipeline with id = 1.**","68a1d811":"from evalml.objectives.standard_metrics import AccuracyBinary, AUC, F1, PrecisionWeighted, Recall\n\n#acc = AccuracyBinary()\nauc = AUC()\nf1 = F1()\npre_w = PrecisionWeighted()\nrec = Recall()\n\nprint(f\"Accuracy (Binary): {acc.score(y_true=y_test, y_predicted=predictions)}\")\nprint(f\"Area Under Curve: {auc.score(y_true=y_test, y_predicted=predictions)}\")\nprint(f\"F1: {f1.score(y_true=y_test, y_predicted=predictions)}\")\nprint(f\"Precision (Weighted): {pre_w.score(y_true=y_test, y_predicted=predictions)}\")\nprint(f\"Recall: {rec.score(y_true=y_test, y_predicted=predictions)}\")","581324d0":"### Visualize missing values (NaN) values using Missingno Library\n\n a) Visualize missing values as a matrix\n \n b) Visualize missing values as a barplot\n \n c) Visualize missing values as a heatmap\n \n d) Visualize missing values as a dendrogram","b71c29e3":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.3) Pipeline Rankings <\/h1>","323da1a6":"from evalml.model_understanding.graphs import (\n    graph_prediction_vs_actual, \n    #graph_feature_importance, \n    graph_confusion_matrix\n)\n\ngraph_prediction_vs_actual(best_pipeline, X_test, y_test, \"F1 Micro\")","786b29c7":"<h1 style='background-color:magenta; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;' > 4) EDA (Exploratory Data Analysis) <\/h1>","b26cb178":"check_model = automl.load('model'.pkl)\ncheck_model.predict_proba(X_test).to_dataframe()","558a51eb":"<h1 style='background-color:magenta; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;' > 1) Introduction to EvalML <\/h1>","62b33e5e":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.2) Configure search <\/h1>","03c0cd99":"<h2 style=color:green align=\"left\"> 5.7.1) Feature Importance <\/h2>","d79955b8":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:center; border-radius: 15px 50px;' > Submission <\/h1>","cc6a3508":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 5.5) Select Best pipeline <\/h1>","866fc5a2":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 4.3) Visualize missing values as a barplot <\/h1>","640196a5":"<h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:170%; text-align:left;' > 4.2) Visualize missing values as a matrix <\/h1>"}}