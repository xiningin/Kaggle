{"cell_type":{"2397fba4":"code","85cfc69b":"code","3383865a":"code","fd598dea":"code","834e0a14":"code","9cf0203e":"code","1249be45":"code","4400dc2c":"code","82eaec7e":"code","873a0057":"code","69659ef6":"code","c62c39c7":"code","bdce7c9a":"code","c36fb8de":"code","563b1431":"code","75acaaff":"code","e9c5718b":"code","d129f27f":"code","09d31a9a":"code","35268b80":"code","0232fbbc":"code","1fb47a7d":"code","e59c4e17":"code","54e845eb":"code","32bd8b96":"code","3ccd7f4c":"code","59b1b7bc":"code","0262dc65":"code","0e6d2845":"code","2e5dfd4a":"code","f5c88ae7":"code","725a1550":"code","8d268ca4":"code","934fdb92":"code","0067903a":"code","ea100da2":"code","e75fe0af":"code","66b29fd2":"code","21259cbd":"code","5189b99f":"code","6c35b882":"markdown"},"source":{"2397fba4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85cfc69b":"import glob\ndef convert_job_to_df(\npath='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/*.txt',\nraw_text_col_name='raw_job_text'):\n    job_list = []\n    # glob module is used to retrieve files\/pathnames matching a specified pattern\n    files = glob.glob(path)\n    for file in files:\n        #\u2018replace\u2019\tthe unencodable character is replaced by questionmark\n        with open(file,'r',errors='replace') as f:\n            content=f.read()\n            job_list.append(content)\n    else:\n        return pd.DataFrame({raw_text_col_name:job_list})\nconvert_job_to_df()","3383865a":"def _whole_clean_text(text):\n    return text.replace(\"\\n\",\"\").replace(\"\\t\",\"\").strip()\ntext='''\nline1\nline2   line2.1\n'  test '\n'''\n_whole_clean_text(text)","fd598dea":"#convert_job_to_df()['raw_job_text'][0]","834e0a14":"def pre_processing(dataframe):\n    # remove all first new line characters from text\n    dataframe['raw_job_text'] = dataframe['raw_job_text'].apply(\n        lambda x: x.lstrip())\n    return dataframe\npre_processing(convert_job_to_df())","9cf0203e":"# string.split(separator, maxsplit)\ndef extract_job_title(dataframe):\n    # split at newline charecter, then grab first text\n    # and that is the title\n    dataframe['JOB_CLASS_TITLE'] = dataframe['raw_job_text'].apply(\n        lambda x: x.split('\\n', 1)[0])\n    dataframe['JOB_CLASS_TITLE'] = dataframe['JOB_CLASS_TITLE'].apply(\n        lambda x: _whole_clean_text(x))\n    return dataframe\nextract_job_title(convert_job_to_df())","1249be45":"import re\ndef _class_code_apply(text):\n    \"\"\"\n    This class extract job class code\n    \"\"\"\n    match = re.search('Class Code: (\\d+)', text)\n    class_code = None\n    try:\n        class_code = match.group(1)\n    except:\n        class_code = None\n    return class_code\n_class_code_apply(text='Class Code: 1234')","4400dc2c":"def extract_class_code(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    # find class code\n    dataframe['JOB_CLASS_NO'] = temp.apply(lambda x: _class_code_apply(x))\n    return dataframe\nextract_class_code(convert_job_to_df())","82eaec7e":"def _exam_type_apply(text):\n    \n    \"\"\"\n    Extract entire exam type section\n    \"\"\"\n    \n    exam_type = \"\"\n#Class Code: 5885 Open Date: 12-21-18 (Exam Open to All, including Current City Employees) ANNUAL SALARY\n    result= re.search(\n        \"(Class Code:|Class  Code:)(.*)(ANNUAL SALARY|ANNUALSALARY)\",\n        text)\n    \n    shortContent=''\n    if result:\n        shortContent=result.group(2).strip()\n        result= re.search(\n            \"\\(+(.*?)\\)\", shortContent,flags=re.IGNORECASE)\n        if result:\n            #(Exam Open to All, including Current City Employees)\n            exam_type=result.group(1).strip()\n    return exam_type","873a0057":"def extract_exam_type(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['TEMP_EXAM_TYPE'] = temp.apply(lambda x: _exam_type_apply(x))\n    return dataframe\nextract_exam_type(convert_job_to_df())","69659ef6":"def _salary_apply(text):\n    \"\"\"\n    Extract entire salary section\n    \"\"\"\n    '''\n    ANNUAL SALARY $106,049 to $155,034 NOTE: The current salary range is subject to change. \n    You may confirm the starting salary with the hiring department before accepting a job \n    offer. DUTIES\n    '''\n    salary = ''\n    salary_notes = ''\n    result=re.search(\n        \"(ANNUAL SALARY|ANNUALSALARY)(.*?)DUTIES\", text)\n    if result:\n        salContent= result.group(2).strip()\n        if \"NOTE:\" in salContent or \"NOTES:\" in salContent:\n            #$106,049 to $155,034 NOTE:\n            result=re.search(\n                \"(.*?)(NOTE:|NOTES:)\",\n                salContent,flags=re.IGNORECASE)\n            if result:\n                salary=result.group(1).strip()  \n            #NOTE: The current salary range is subject to change. You may confirm the starting salary with the hiring department before accepting a job offer.\n            result= re.search(\n                \"(NOTE:|NOTES:)(.*)\",\n                salContent,flags=re.IGNORECASE)\n            if result:\n                salary_notes= result.group(2).strip()\n        else:#$106,049 to $155,034\n            salary = salContent\n    else:\n        '''\n        ANNUAL SALARY $91,955 to $108,283 NOTE: The current salary range is \n        subject to change. You may confirm the starting salary with the hiring department before accepting a job offer. \n        REQUIREMENT\n        '''\n        result=re.search(\n            \"(ANNUAL SALARY|ANNUALSALARY)(.*?)REQUIREMENT\",\n            text,flags=re.IGNORECASE)\n        if result:\n            salContent= result.group(2).strip()\n            if \"NOTE:\" in salContent or \"NOTES:\" in salContent:\n                #$91,955 to $108,283 NOTE:\n                result=re.search(\n                    \"(.*?)(NOTE:|NOTES:)\",\n                    salContent,flags=re.IGNORECASE)\n                if result:\n                    salary=result.group(1).strip()\n                #NOTE: The current salary range is subject to change. You may confirm the starting salary with the hiring department before accepting a job offer. \n                result= re.search(\n                    \"(NOTE:|NOTES:)(.*)\",\n                    salContent,flags=re.IGNORECASE)\n                if result:\n                    salary_notes= result.group(2).strip()\n            else:#$91,955 to $108,283\n                salary= salContent\n    salary_text = \"|||||||||||||||\".join([salary, salary_notes])\n    return salary_text","c62c39c7":"def extract_salary(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['TEMP_SALARY'] = temp.apply(lambda x: _salary_apply(x))\n    return dataframe\nextract_salary(convert_job_to_df())","bdce7c9a":"def _duties_apply(text):\n    \"\"\"\n    Extract job duties section\n    \"\"\"\n    '''\n    DUTIES A Pipefitter does skilled work in the installation, replacement, maintenance, and repair of industrial steam, oil,\n    air, gas, water, steam heating and other pipe systems, including high pressure and high temperature systems. \n    REQUIREMENT\n    '''\n    duties=''\n    result=duties= re.search(\"DUTIES(.*?)REQUIREMENT\", text)\n    if result:\n        duties= result.group(1).strip()\n    return duties","c36fb8de":"def extract_duties(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['JOB_DUTIES'] = temp.apply(lambda x: _duties_apply(x))\n    return dataframe\nextract_duties(convert_job_to_df())","563b1431":"def _requirements_apply(text):\n    \"\"\"\n    Extract entire job requirements section\n    \"\"\"\n    '''\n    REQUIREMENT\/MINIMUM QUALIFICATION Two years of full-time paid experience as a Senior Claims Representative \n    or in a class at that level which provides experience in the investigation of personal injury and property damage accidents \n    and .... . WHERE TO APPLY\n    '''\n    req='|'.join([\"REQUIREMENT\/MIMINUMUM QUALIFICATION\",\n                  \"REQUIREMENT\/MINUMUM QUALIFICATION\",\n                  \"REQUIREMENT\/MINIMUM QUALIFICATION\",\n                  \"REQUIREMENT\/MINIMUM QUALIFICATIONS\",\n                  \"REQUIREMENT\/ MINIMUM QUALIFICATION\",\n                  \"REQUIREMENTS\/MINUMUM QUALIFICATIONS\",\n                  \"REQUIREMENTS\/ MINIMUM QUALIFICATIONS\",\n                  \"REQUIREMENTS\/MINIMUM QUALIFICATIONS\",\n                  \"REQUIREMENTS\/MINIMUM REQUIREMENTS\",\n                  \"REQUIREMENTS\/MINIMUM QUALIFCATIONS\",\n                  \"MINIMUM REQUIREMENTS:\",\n                  \"REQUIREMENTS\",\n                  \"REQUIREMENT\"])\n    \n    result= re.search(f\"({req})(.*)(WHERE TO APPLY|HOW TO APPLY)\", text)\n    requirements=''\n    if result:\n        requirements = result.group(2).strip()\n    return requirements","75acaaff":"def extract_requirements(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['TEMP_REQUIREMENTS'] = temp.apply(lambda x: _requirements_apply(x))\n    return dataframe\nextract_requirements(convert_job_to_df())","e9c5718b":"def _where_to_apply(text):\n    \n    \"\"\"\n    Extract entire 'WHERE TO APPLY' section\n    \"\"\"\n    '''\n    WHERE TO APPLY Applications will only be accepted on-line. When you are viewing the on-line job bulletin of your choice, \n    simply scroll to the top of the page and select the \"Apply\" icon. On-line job bulletins are also available \n    at https:\/\/www.governmentjobs.com\/careers\/lacity. NOTE: Applicants are urged to apply early to ensure you have time to \n    resolve any technical issues you may encounter. APPLICATION DEADLINE\n    '''\n    \n    where_to_apply = ''\n    result= re.search(\n        \"(HOW TO APPLY|WHERE TO APPLY)(.*)(APPLICATION DEADLINE|APPLICATION PROCESS)\",\n        text)\n    if result:\n        where_to_apply= result.group(2).strip()\n    else:\n        '''\n        WHERE TO APPLY THE SELECTION PROCESS IS STARTED by faxing a letter stating your desire to apply for Police Specialist. The \n        ...to schedule the necessary steps. SELECTION PROCESS\n        '''\n        result= re.search(\n            \"(HOW TO APPLY|WHERE TO APPLY)(.*)(SELECTION PROCESS|SELELCTION PROCESS)\",\n            text)\n        if result:\n            where_to_apply= result.group(2).strip()\n    return where_to_apply","d129f27f":"def extract_where_to_apply(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['WHERE_TO_APPLY'] = temp.apply(lambda x: _where_to_apply(x))\n    return dataframe\nextract_where_to_apply(convert_job_to_df())","09d31a9a":"def _deadline_apply(text):\n    \"\"\"\n    Extract entire deadline section\n    \"\"\"\n    '''\n    APPLICATION DEADLINE\n    Applications and Qualifications Questionnaires must be received by THURSDAY, JUNE 14, 2018.\n    SELECTION PROCESS\n    '''\n    deadline=''\n    result= re.search(\n        \"(APPLICATION DEADLINE|APPLICATION PROCESS)(.*?)(SELECTION PROCESS|SELELCTION PROCESS)\",\n        text)\n    if result:\n        deadline= result.group(2).strip()\n    else:\n        '''\n        APPLICATION DEADLINE Applications must be received by THURSDAY, AUGUST 30, 2018. Examination Weight:\n        '''\n        result= re.search(\n            \"(APPLICATION DEADLINE|APPLICATION PROCESS)(.*?)(Examination Weight:)\",\n            text)\n        if result:\n            deadline= result.group(2).strip()\n            \n    return deadline","35268b80":"def extract_deadline(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['DEADLINE'] = temp.apply(lambda x: _deadline_apply(x))\n    return dataframe\nextract_deadline(convert_job_to_df())","0232fbbc":"def _selection_process_apply(text):\n    \n    \"\"\"\n    Extract selectioin process section\n    \"\"\"\n    '''\n    SELECTION PROCESS Examination Weight: Multiple-Choice Test ...\n    time, and location of their interview (anticipated to be held in late March 2017). APPOINTMENT\n    '''\n    selection_process=''\n    result=selection_process= re.search(\n        \"(SELECTION PROCESS|Examination Weight:)(.*)(APPOINTMENT|APPOINTMENT IS SUBJECT TO:)\",\n        text)\n    if result:\n        selection_process= result.group(2).strip()\n    else:\n        '''\n        SELECTION PROCESS Examination Weight: Multiple-Choice Test ...\n        '''\n        result=selection_process= re.search(\n            \"(SELECTION PROCESS|Examination Weight:)(.*)\",\n            text)\n        if result:\n            selection_process= result.group(2).strip()\n            \n    return selection_process","1fb47a7d":"def extract_selection_process(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['SELECTION_PROCESS'] = temp.apply(lambda x: _selection_process_apply(x))\n    return dataframe\nextract_selection_process(convert_job_to_df())","e59c4e17":"def _open_date_apply(text):\n    \n    \"\"\"\n    Extract entire job open date section\n    \"\"\"\n    '''\n    Class Code:       1590\n    Open Date:  06-01-18(Exam Open to Current City Employees)\n    ANNUAL SALARY\n    '''\n    open_date = ''\n    result= re.search(\n        \"(Class Code:|Class  Code:)(.*)(ANNUAL SALARY|ANNUALSALARY)\",\n        text)\n    \n    shortContent=''\n    if result:\n        shortContent=result.group(2).strip()\n        #Open Date:  06-01-18 REVISED\n        result= re.search(\n            \"Open Date:(.*)REVISED\",\n            shortContent,flags=re.IGNORECASE)\n        if result:\n            open_date=result.group(1).strip()\n        if open_date=='':\n            #Open Date:  06-01-18(Exam Open to Current City Employees)\n            result= re.search(\n                \"Open Date:(.*)\\(Exam\",\n                shortContent,flags=re.IGNORECASE)\n            if result:\n                open_date=result.group(1).strip()\n        if open_date=='':\n            #Open Date:  06-01-18\n            result= re.search(\n                \"Open Date:(.*)\",\n                shortContent,flags=re.IGNORECASE)\n            if result:\n                open_date=result.group(1).strip()\n    return open_date","54e845eb":"def extract_open_date(dataframe):\n    # remove all extra white spaces\n    temp = dataframe['raw_job_text'].apply(lambda x: ' '.join(x.split()))\n    \n    dataframe['OPEN_DATE'] = temp.apply(lambda x: _open_date_apply(x))\n    return dataframe\nextract_open_date(convert_job_to_df())","32bd8b96":"# first let's convert folder of raw text job bulletins\n# to pandas dataframe\ndata = convert_job_to_df()\n\n# do some initial text cleaning\ndata = pre_processing(data)\n\n###############################\n# Here is actual extraction of main section begin\n# we just call the function\n###############################\ndata = extract_job_title(data) # extract job title\n\ndata = extract_class_code(data) # extract class code\n\ndata = extract_open_date(data) # extract open date\n\ndata = extract_exam_type(data) # extract exam type section\n\ndata = extract_salary(data) # extract salary section\n\ndata = extract_duties(data) # extract duties section\n\ndata = extract_requirements(data) # extract requirements section\n\ndata = extract_where_to_apply(data) # extract where to apply section\n\ndata = extract_deadline(data) # extract deadline section\n\ndata = extract_selection_process(data) # extract selectin pro section","3ccd7f4c":"# create a new column containing whole text but clean from new line and tab \ndata['raw_clean_job_text'] = data['raw_job_text'].apply(\n    lambda x: _whole_clean_text(x))","59b1b7bc":"# finally let's see what we have got\ndata.head(2)","0262dc65":"data.tail(2)","0e6d2845":"data.shape","2e5dfd4a":"def base_info(data):\n  print(f' Zero \\n:{data.isnull().sum()}\\n')\n  print(f'NaN :\\n {data.isna().sum()}\\n')\n  print(f\"type of data:\\n {data.dtypes}\\n\")\nbase_info(data)","f5c88ae7":"data.info(verbose=True)","725a1550":"data.info(verbose=False)","8d268ca4":"data['JOB_CLASS_NO'].describe()","934fdb92":"print(data['JOB_CLASS_NO'].isnull().sum())\nprint(data['JOB_CLASS_NO'].isna().sum())","0067903a":"data['JOB_CLASS_NO'].fillna(0, inplace=True)","ea100da2":"data['JOB_CLASS_NO'] = data['JOB_CLASS_NO'].astype(str).astype(int)","e75fe0af":"data['JOB_CLASS_NO'].describe()","66b29fd2":"mas_pronouns =[\"he\", \"his\", \"him\", \"himself\"]\nfem_pronouns =[\"she\", \"her\", \"herself\"]","21259cbd":"for i in mas_pronouns:\n    sum= data.TEMP_REQUIREMENTS.str.contains(r'i').sum() + data.SELECTION_PROCESS.str.contains(r'i').sum()\n    print(f'{i} : {sum}')","5189b99f":"for i in fem_pronouns:\n    sum= data.TEMP_REQUIREMENTS.str.contains(r'i').sum() + data.SELECTION_PROCESS.str.contains(r'i').sum()\n    print(f'{i} : {sum}')","6c35b882":"#Reference\n\nhttps:\/\/www.kaggle.com\/kalininvladislav\/city-of-los-angeles-to-csv-basic-analytics\/data"}}