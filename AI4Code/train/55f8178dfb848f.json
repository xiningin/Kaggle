{"cell_type":{"09c2a7c1":"code","3e6e2df5":"code","5c819e37":"code","7f6c150b":"code","af2695e6":"code","9c6eafd8":"code","5fa57309":"code","94d5d56d":"code","b657eb5b":"code","03c43275":"code","f0fa9d40":"code","d7e2fb35":"code","5eae4d57":"code","4026ac3e":"code","1f0a8a19":"code","b38e8791":"code","03be666d":"code","a58b6557":"code","cd00e5d8":"code","abcdfb89":"code","65233608":"code","50b3d279":"code","b28f2ccb":"code","f6e7e161":"code","4506995a":"code","ea070b77":"code","95b2b36f":"code","23c9d107":"code","71662639":"markdown","0df33a06":"markdown","3f193be2":"markdown"},"source":{"09c2a7c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e6e2df5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5c819e37":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","7f6c150b":"df.head()","af2695e6":"df.columns","9c6eafd8":"df.info()","5fa57309":"#target variable\ndf['class'].unique()","94d5d56d":"df.isnull().sum()","b657eb5b":"df['class'].value_counts()","03c43275":"df = df.astype('object')","f0fa9d40":"df.dtypes","d7e2fb35":"X = df.drop('class',axis=1)\ny = df['class']","5eae4d57":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(y)\ny = pd.DataFrame(le.transform(y))","4026ac3e":"y.head()","1f0a8a19":"from category_encoders import target_encoder\nfrom sklearn.model_selection import KFold","b38e8791":"kf = KFold(n_splits=4, shuffle=True, random_state=1111)\ntrain_te = pd.DataFrame()\nfor tra_idx, val_idx in kf.split(X):\n    te = target_encoder.TargetEncoder(handle_missing='return_nan',handle_unknown='return_nan')\n    te.fit(X.iloc[tra_idx],y.iloc[tra_idx])\n    temp = te.transform(X.iloc[val_idx])\n    train_te = pd.concat([train_te,temp],axis=0)\n\ntrain_te.sort_index(inplace=True)\nX_new = train_te","03be666d":"### source: X_new\n### target: y","a58b6557":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.30, random_state=42)","cd00e5d8":"# Import required libraries for performance metrics\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import cross_validate","abcdfb89":"# Define dictionary with performance metrics\nscoring = {'accuracy':make_scorer(accuracy_score), \n           'precision':make_scorer(precision_score),\n           'recall':make_scorer(recall_score), \n           'f1_score':make_scorer(f1_score)}","65233608":"# Import required libraries for machine learning classifiers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB","50b3d279":"# Instantiate the machine learning classifiers\nlog_model = LogisticRegression(max_iter=10000)\nsvc_model = LinearSVC(dual=False)\ndtr_model = DecisionTreeClassifier()\nrfc_model = RandomForestClassifier()\ngnb_model = GaussianNB()","b28f2ccb":"# Define the models evaluation function\ndef models_evaluation(X, y, folds):\n    \n    '''\n    X : data set features\n    y : data set target\n    folds : number of cross-validation folds\n    \n    '''\n    \n    # Perform cross-validation to each machine learning classifier\n    log = cross_validate(log_model, X, y, cv=folds, scoring=scoring)\n    svc = cross_validate(svc_model, X, y, cv=folds, scoring=scoring)\n    dtr = cross_validate(dtr_model, X, y, cv=folds, scoring=scoring)\n    rfc = cross_validate(rfc_model, X, y, cv=folds, scoring=scoring)\n    gnb = cross_validate(gnb_model, X, y, cv=folds, scoring=scoring)\n\n    # Create a data frame with the models perfoamnce metrics scores\n    models_scores_table = pd.DataFrame({'Logistic Regression':[log['test_accuracy'].mean(),\n                                                               log['test_precision'].mean(),\n                                                               log['test_recall'].mean(),\n                                                               log['test_f1_score'].mean()],\n                                       \n                                      'Support Vector Classifier':[svc['test_accuracy'].mean(),\n                                                                   svc['test_precision'].mean(),\n                                                                   svc['test_recall'].mean(),\n                                                                   svc['test_f1_score'].mean()],\n                                       \n                                      'Decision Tree':[dtr['test_accuracy'].mean(),\n                                                       dtr['test_precision'].mean(),\n                                                       dtr['test_recall'].mean(),\n                                                       dtr['test_f1_score'].mean()],\n                                       \n                                      'Random Forest':[rfc['test_accuracy'].mean(),\n                                                       rfc['test_precision'].mean(),\n                                                       rfc['test_recall'].mean(),\n                                                       rfc['test_f1_score'].mean()],\n                                       \n                                      'Gaussian Naive Bayes':[gnb['test_accuracy'].mean(),\n                                                              gnb['test_precision'].mean(),\n                                                              gnb['test_recall'].mean(),\n                                                              gnb['test_f1_score'].mean()]},\n                                      \n                                      index=['Accuracy', 'Precision', 'Recall', 'F1 Score'])\n    \n    # Add 'Best Score' column\n    models_scores_table['Best Score'] = models_scores_table.idxmax(axis=1)\n    \n    # Return models performance metrics scores data frame\n    return(models_scores_table)\n  \n# Run models_evaluation function\nmodels_evaluation(X_train, y_train, 5)","f6e7e161":"### Random Forest Classification is the final model\nrfc_model.fit(X_train,np.ravel(y_train))\ny_pred = rfc_model.predict(X_test)","4506995a":"from sklearn.metrics import confusion_matrix\nlabels = ['p','e']\ncm = confusion_matrix(y_test, y_pred)\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title('Confusion matrix of the classifier')\nfig.colorbar(cax)\nax.set_xticklabels([''] + labels)\nax.set_yticklabels([''] + labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()","ea070b77":"## Feature importances\nfrom matplotlib import pyplot\nimportance = rfc_model.feature_importances_\n# summarize feature importance\nfeat_importances = pd.Series(importance, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\npyplot.show()","95b2b36f":"import eli5\nfrom eli5.sklearn import PermutationImportance\n#Permutation Importance\nperm_train = PermutationImportance(rfc_model, scoring='accuracy',\nn_iter=100, random_state=1)\n# fit and see the permuation importances\nperm_train.fit(X_train, y_train)\neli5.explain_weights_df(perm_train, feature_names = X_train.columns.tolist()).head()\n# top 5 important features","23c9d107":"perm = PermutationImportance(rfc_model, random_state = 0).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())\n#The most important feature is odor","71662639":"Upon Comparison of multiple classifiers menitoned above the classification metrics voted **Random Forest** as the most efficient classifier.\nUpon feature importance check Odor was considered to be the greatest determinant of class of Mushroom.","0df33a06":"### Feature Importance","3f193be2":"### permutation Importance"}}