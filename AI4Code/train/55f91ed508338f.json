{"cell_type":{"1fccac43":"code","15d781c6":"code","68d99a40":"code","add989ab":"code","a0b21f98":"code","5e8a32ff":"code","ac992341":"code","62899505":"code","84851b33":"code","07c32234":"code","40fa548a":"code","952ec10a":"code","669ca55f":"code","b01f39e8":"code","85b69e0c":"code","816f1f7e":"code","a5df931c":"code","8952ef7c":"code","d7d6e7a8":"code","2c2dd06c":"code","69af0793":"code","f8cc3e8d":"code","a53681a4":"code","7073a895":"code","15baedb0":"markdown","d9536785":"markdown","c56aa8d0":"markdown","a209a287":"markdown","befbc015":"markdown","67625a03":"markdown","a2719591":"markdown","14017d28":"markdown","0df894b7":"markdown","3c23cdf9":"markdown"},"source":{"1fccac43":"pretrain_dir = None#\"\/kaggle\/input\/covid-v9-no-consis\/\"\n\none_fold = False\n# one_fold = True#False\n# with_ae = False#True\nrun_test = False\n# run_test = True\ndenoise = True\n\nae_epochs = 20\nae_epochs_each = 5\nae_batch_size = 32\n\nepochs_list = [50, 30, 20, 20, 15, 15]\nbatch_size_list = [8, 16, 32, 64, 128, 256]\n\n## copy pretrain model to working dir\nimport shutil\nimport glob\nif pretrain_dir is not None:\n    for d in glob.glob(pretrain_dir + \"*\"):\n        shutil.copy(d, \".\")\n    \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","15d781c6":"import json\nimport glob\nfrom tqdm.notebook import tqdm\n\ntrain = pd.read_json(\"\/kaggle\/input\/stanford-covid-vaccine\/train.json\",lines=True)\nif denoise:\n    train = train[train.signal_to_noise > 1].reset_index(drop = True)\ntest  = pd.read_json(\"\/kaggle\/input\/stanford-covid-vaccine\/test.json\",lines=True)\ntest_pub = test[test[\"seq_length\"] == 107]\ntest_pri = test[test[\"seq_length\"] == 130]\nsub = pd.read_csv(\"\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv\")\n\nif run_test:\n    train = train[:30]\n    test_pub = test_pub[:30]\n    test_pri = test_pri[:30]\n\nAs = []\nfor id in tqdm(train[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As.append(a)\nAs = np.array(As)\nAs_pub = []\nfor id in tqdm(test_pub[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As_pub.append(a)\nAs_pub = np.array(As_pub)\nAs_pri = []\nfor id in tqdm(test_pri[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As_pri.append(a)\nAs_pri = np.array(As_pri)","68d99a40":"print(train.shape)\ntrain.head()","add989ab":"print(test.shape)\ntest.head()","a0b21f98":"print(sub.shape)\nsub.head()","5e8a32ff":"# aug43 = pd.read_csv('..\/input\/augmented-data-for-stanford-covid-vaccine\/43k_augment.csv')\n# aug48 = pd.read_csv('..\/input\/augmented-data-for-stanford-covid-vaccine\/48k_augment.csv')\naug_df = pd.read_csv('..\/input\/augmented-data-for-stanford-covid-vaccine\/aug_data1.csv')\n\ndef aug_data(df):\n    target_df = df.copy()\n    new_df = aug_df[aug_df['id'].isin(target_df['id'])]\n                         \n    del target_df['structure']\n    del target_df['predicted_loop_type']\n    new_df = new_df.merge(target_df, on=['id','sequence'], how='left')\n\n    df['cnt'] = df['id'].map(new_df[['id','cnt']].set_index('id').to_dict()['cnt'])\n    df['log_gamma'] = 100\n    df['score'] = 1.0\n    df = df.append(new_df[df.columns])\n    return df\n\ntrain = aug_data(train)\ntest = aug_data(test)\nprint(train.shape)","ac992341":"test.shape","62899505":"As = []\nfor id in tqdm(train[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As.append(a)\nAs = np.array(As)\nAs_pub = []\nfor id in tqdm(test_pub[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As_pub.append(a)\nAs_pub = np.array(As_pub)\nAs_pri = []\nfor id in tqdm(test_pri[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As_pri.append(a)\nAs_pri = np.array(As_pri)","84851b33":"As.shape","07c32234":"targets = list(sub.columns[1:])\nprint(targets)\n\ny_train = []\nseq_len = train[\"seq_length\"].iloc[0]\nseq_len_target = train[\"seq_scored\"].iloc[0]\nignore = -10000\nignore_length = seq_len - seq_len_target\nfor target in targets:\n    y = np.vstack(train[target])\n    dummy = np.zeros([y.shape[0], ignore_length]) + ignore\n    y = np.hstack([y, dummy])\n    y_train.append(y)\ny = np.stack(y_train, axis = 2)\ny.shape","40fa548a":"def get_structure_adj(train):\n    Ss = []\n    for i in tqdm(range(len(train))):\n        seq_length = train[\"seq_length\"].iloc[i]\n        structure = train[\"structure\"].iloc[i]\n        sequence = train[\"sequence\"].iloc[i]\n\n        cue = []\n        a_structures = {\n            (\"A\", \"U\") : np.zeros([seq_length, seq_length]),\n            (\"C\", \"G\") : np.zeros([seq_length, seq_length]),\n            (\"U\", \"G\") : np.zeros([seq_length, seq_length]),\n            (\"U\", \"A\") : np.zeros([seq_length, seq_length]),\n            (\"G\", \"C\") : np.zeros([seq_length, seq_length]),\n            (\"G\", \"U\") : np.zeros([seq_length, seq_length]),\n        }\n        a_structure = np.zeros([seq_length, seq_length])\n        for i in range(seq_length):\n            if structure[i] == \"(\":\n                cue.append(i)\n            elif structure[i] == \")\":\n                start = cue.pop()\n#                 a_structure[start, i] = 1\n#                 a_structure[i, start] = 1\n                a_structures[(sequence[start], sequence[i])][start, i] = 1\n                a_structures[(sequence[i], sequence[start])][i, start] = 1\n        \n        a_strc = np.stack([a for a in a_structures.values()], axis = 2)\n        a_strc = np.sum(a_strc, axis = 2, keepdims = True)\n        Ss.append(a_strc)\n    \n    Ss = np.array(Ss)\n    print(Ss.shape)\n    return Ss\nSs = get_structure_adj(train)\nSs_pub = get_structure_adj(test_pub)\nSs_pri = get_structure_adj(test_pri)","952ec10a":"def get_distance_matrix(As):\n    idx = np.arange(As.shape[1])\n    Ds = []\n    for i in range(len(idx)):\n        d = np.abs(idx[i] - idx)\n        Ds.append(d)\n\n    Ds = np.array(Ds) + 1\n    Ds = 1\/Ds\n    Ds = Ds[None, :,:]\n    Ds = np.repeat(Ds, len(As), axis = 0)\n    \n    Dss = []\n    for i in [1, 2, 4]:\n        Dss.append(Ds ** i)\n    Ds = np.stack(Dss, axis = 3)\n    print(Ds.shape)\n    return Ds\n\nDs = get_distance_matrix(As)\nDs_pub = get_distance_matrix(As_pub)\nDs_pri = get_distance_matrix(As_pri)","669ca55f":"## concat adjecent\nAs = np.concatenate([As[:,:,:,None], Ss, Ds], axis = 3).astype(np.float32)\nAs_pub = np.concatenate([As_pub[:,:,:,None], Ss_pub, Ds_pub], axis = 3).astype(np.float32)\nAs_pri = np.concatenate([As_pri[:,:,:,None], Ss_pri, Ds_pri], axis = 3).astype(np.float32)\ndel Ss, Ds, Ss_pub, Ds_pub, Ss_pri, Ds_pri\ngc.collect()\nAs.shape, As_pub.shape, As_pri.shape","b01f39e8":"## sequence\ndef return_ohe(n, i):\n    tmp = [0] * n\n    tmp[i] = 1\n    return tmp\n\ndef get_input(train):\n    mapping = {}\n    vocab = [\"A\", \"G\", \"C\", \"U\"]\n    for i, s in enumerate(vocab):\n        mapping[s] = return_ohe(len(vocab), i)\n    X_node = np.stack(train[\"sequence\"].apply(lambda x : list(map(lambda y : mapping[y], list(x)))))\n\n    mapping = {}\n    vocab = [\"S\", \"M\", \"I\", \"B\", \"H\", \"E\", \"X\"]\n    for i, s in enumerate(vocab):\n        mapping[s] = return_ohe(len(vocab), i)\n    X_loop = np.stack(train[\"predicted_loop_type\"].apply(lambda x : list(map(lambda y : mapping[y], list(x)))))\n    \n    mapping = {}\n    vocab = [\".\", \"(\", \")\"]\n    for i, s in enumerate(vocab):\n        mapping[s] = return_ohe(len(vocab), i)\n    X_structure = np.stack(train[\"structure\"].apply(lambda x : list(map(lambda y : mapping[y], list(x)))))\n    \n    \n    X_node = np.concatenate([X_node, X_loop], axis = 2)\n    \n    ## interaction\n    a = np.sum(X_node * (2 ** np.arange(X_node.shape[2])[None, None, :]), axis = 2)\n    vocab = sorted(set(a.flatten()))\n    print(vocab)\n    ohes = []\n    for v in vocab:\n        ohes.append(a == v)\n    ohes = np.stack(ohes, axis = 2)\n    X_node = np.concatenate([X_node, ohes], axis = 2).astype(np.float32)\n    \n    \n    print(X_node.shape)\n    return X_node\n\nX_node = get_input(train)\nX_node_pub = get_input(test_pub)\nX_node_pri = get_input(test_pri)","85b69e0c":"import tensorflow as tf\nfrom tensorflow.keras import layers as L\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import backend as K\n\ndef mcrmse(t, p, seq_len_target = seq_len_target):\n    score = np.mean(np.sqrt(np.mean((p - y_va) ** 2, axis = 2))[:, :seq_len_target])\n    return score\n\ndef mcrmse_loss(t, y, seq_len_target = seq_len_target):\n    t = t[:, :seq_len_target]\n    y = y[:, :seq_len_target]\n    \n    loss = tf.reduce_mean(tf.sqrt(tf.reduce_mean((t - y) ** 2, axis = 2)))\n    return loss\n\ndef attention(x_inner, x_outer, n_factor, dropout):\n    x_Q =  L.Conv1D(n_factor, 1, activation='linear', \n                  kernel_initializer='glorot_uniform',\n                  bias_initializer='glorot_uniform',\n                 )(x_inner)\n    x_K =  L.Conv1D(n_factor, 1, activation='linear', \n                  kernel_initializer='glorot_uniform',\n                  bias_initializer='glorot_uniform',\n                 )(x_outer)\n    x_V =  L.Conv1D(n_factor, 1, activation='linear', \n                  kernel_initializer='glorot_uniform',\n                  bias_initializer='glorot_uniform',\n                 )(x_outer)\n    x_KT = L.Permute((2, 1))(x_K)\n    res = L.Lambda(lambda c: K.batch_dot(c[0], c[1]) \/ np.sqrt(n_factor))([x_Q, x_KT])\n    res = tf.expand_dims(res, axis = 3)\n    res = L.Conv2D(16, 3, 1, padding = \"same\", activation = \"relu\")(res)\n    res = L.Conv2D(1, 3, 1, padding = \"same\", activation = \"relu\")(res)\n    res = tf.squeeze(res, axis = 3)\n    att = L.Lambda(lambda c: K.softmax(c, axis=-1))(res)\n    att = L.Lambda(lambda c: K.batch_dot(c[0], c[1]))([att, x_V])\n    return att\n\ndef multi_head_attention(x, y, n_factor, n_head, dropout):\n    if n_head == 1:\n        att = attention(x, y, n_factor, dropout)\n    else:\n        n_factor_head = n_factor \/\/ n_head\n        heads = [attention(x, y, n_factor_head, dropout) for i in range(n_head)]\n        att = L.Concatenate()(heads)\n        att = L.Dense(n_factor, \n                      kernel_initializer='glorot_uniform',\n                      bias_initializer='glorot_uniform',\n                     )(att)\n    x = L.Add()([x, att])\n    x = L.LayerNormalization()(x)\n    if dropout > 0:\n        x = L.Dropout(dropout)(x)\n    return x\n\ndef res(x, unit, kernel = 3, rate = 0.1):\n    h = L.Conv1D(unit, kernel, 1, padding = \"same\", activation = None)(x)\n    h = L.LayerNormalization()(h)\n    h = L.LeakyReLU()(h)\n    h = L.Dropout(rate)(h)\n    return L.Add()([x, h])\n\ndef forward(x, unit, kernel = 3, rate = 0.1):\n#     h = L.Dense(unit, None)(x)\n    h = L.Conv1D(unit, kernel, 1, padding = \"same\", activation = None)(x)\n    h = L.LayerNormalization()(h)\n    h = L.Dropout(rate)(h)\n#         h = tf.keras.activations.swish(h)\n    h = L.LeakyReLU()(h)\n    h = res(h, unit, kernel, rate)\n    return h\n\ndef adj_attn(x, adj, unit, n = 2, rate = 0.1):\n    x_a = x\n    x_as = []\n    for i in range(n):\n        x_a = forward(x_a, unit)\n        x_a = tf.matmul(adj, x_a)\n        x_as.append(x_a)\n    if n == 1:\n        x_a = x_as[0]\n    else:\n        x_a = L.Concatenate()(x_as)\n    x_a = forward(x_a, unit)\n    return x_a\n\n\ndef get_base(config):\n    node = tf.keras.Input(shape = (None, X_node.shape[2]), name = \"node\")\n    adj = tf.keras.Input(shape = (None, None, As.shape[3]), name = \"adj\")\n    \n    adj_learned = L.Dense(1, \"relu\")(adj)\n    adj_all = L.Concatenate(axis = 3)([adj, adj_learned])\n        \n    xs = []\n    xs.append(node)\n    x1 = forward(node, 128, kernel = 3, rate = 0.0)\n    x2 = forward(x1, 64, kernel = 6, rate = 0.0)\n    x3 = forward(x2, 32, kernel = 15, rate = 0.0)\n    x4 = forward(x3, 16, kernel = 30, rate = 0.0)\n    x = L.Concatenate()([x1, x2, x3, x4])\n    \n    for unit in [64, 32, 16, 8]:\n        x_as = []\n        for i in range(adj_all.shape[3]):\n            x_a = adj_attn(x, adj_all[:, :, :, i], unit, rate = 0.0)\n            x_as.append(x_a)\n        x_c = forward(x, unit, kernel = 30)\n        \n        x = L.Concatenate()(x_as + [x_c])\n        x = forward(x, unit)\n        x = multi_head_attention(x, x, unit, 4, 0.0)\n        xs.append(x)\n        \n    x = L.Concatenate()(xs)\n\n    model = tf.keras.Model(inputs = [node, adj], outputs = [x])\n    return model\n\n\ndef get_ae_model(base, config):\n    node = tf.keras.Input(shape = (None, X_node.shape[2]), name = \"node\")\n    adj = tf.keras.Input(shape = (None, None, As.shape[3]), name = \"adj\")\n\n    x = base([L.SpatialDropout1D(0.3)(node), adj])\n    x = forward(x, 64, rate = 0.3)\n    p = L.Dense(X_node.shape[2], \"sigmoid\")(x)\n    \n    loss = - tf.reduce_mean(20 * node * tf.math.log(p + 1e-4) + (1 - node) * tf.math.log(1 - p + 1e-4))\n    model = tf.keras.Model(inputs = [node, adj], outputs = [loss])\n    \n    opt = get_optimizer()\n    model.compile(optimizer = opt, loss = lambda t, y : y)\n    return model\n\n\ndef get_model(base, config):\n    node = tf.keras.Input(shape = (None, X_node.shape[2]), name = \"node\")\n    adj = tf.keras.Input(shape = (None, None, As.shape[3]), name = \"adj\")\n    \n    x = base([node, adj])\n    x = forward(x, 128, rate = 0.4)\n    x = L.Dense(5, None)(x)\n\n    model = tf.keras.Model(inputs = [node, adj], outputs = [x])\n    \n    opt = get_optimizer()\n    model.compile(optimizer = opt, loss = mcrmse_loss)\n    return model\n\ndef get_optimizer():\n#     sgd = tf.keras.optimizers.SGD(0.05, momentum = 0.9, nesterov=True)\n    adam = tf.optimizers.Adam()\n#     radam = tfa.optimizers.RectifiedAdam()\n#     lookahead = tfa.optimizers.Lookahead(adam, sync_period=6)\n#     swa = tfa.optimizers.SWA(adam)\n    return adam","816f1f7e":"# config = {}\n\n# if ae_epochs > 0:\n#     base = get_base(config)\n#     ae_model = get_ae_model(base, config)\n#     ## TODO : simultaneous train\n#     for i in range(ae_epochs\/\/ae_epochs_each):\n#         print(f\"------ {i} ------\")\n#         print(\"--- train ---\")\n#         ae_model.fit([X_node, As], [X_node[:,0]],\n#                   epochs = ae_epochs_each,\n#                   batch_size = ae_batch_size)\n#         print(\"--- public ---\")\n#         ae_model.fit([X_node_pub, As_pub], [X_node_pub[:,0]],\n#                   epochs = ae_epochs_each,\n#                   batch_size = ae_batch_size)\n#         print(\"--- private ---\")\n#         ae_model.fit([X_node_pri, As_pri], [X_node_pri[:,0]],\n#                   epochs = ae_epochs_each,\n#                   batch_size = ae_batch_size)\n#         gc.collect()\n#     print(\"****** save ae model ******\")\n#     base.save_weights(\".\/base_ae\")","a5df931c":"# from sklearn.model_selection import StratifiedKFold\n# cv = StratifiedKFold(5, shuffle=True, random_state=42)\n\n# scores = []\n# preds = np.zeros([len(X_node), X_node.shape[1], 5])\n# for i, (tr_idx, va_idx) in enumerate(cv.split(X_node, train[\"SN_filter\"])):\n#     if i in (4,):\n#         print(f\"------ fold {i} start -----\")\n#         print(f\"------ fold {i} start -----\")\n#         print(f\"------ fold {i} start -----\")\n#         X_node_tr = X_node[tr_idx]\n#         X_node_va = X_node[va_idx]\n#         As_tr = As[tr_idx]\n#         As_va = As[va_idx]\n#         y_tr = y[tr_idx]\n#         y_va = y[va_idx]\n\n#         base = get_base(config)\n#         if ae_epochs > 0:\n#             print(\"****** load ae model ******\")\n#             base.load_weights(\".\/base_ae\")\n#         model = get_model(base, config)\n#         if pretrain_dir is not None:\n#             d = f\".\/model{i}\"\n#             print(f\"--- load from {d} ---\")\n#             model.load_weights(d)\n#         for epochs, batch_size in zip(epochs_list, batch_size_list):\n#             print(f\"epochs : {epochs}, batch_size : {batch_size}\")\n#             model.fit([X_node_tr, As_tr], [y_tr],\n#                       validation_data=([X_node_va, As_va], [y_va]),\n#                       epochs = epochs,\n#                       batch_size = batch_size, validation_freq = 3)\n\n#         model.save_weights(f\".\/model{i}\")\n#         p = model.predict([X_node_va, As_va])\n#         scores.append(mcrmse(y_va, p))\n#         print(f\"fold {i}: mcrmse {scores[-1]}\")\n#         preds[va_idx] = p\n#         if one_fold:\n#             break\n        \n# pd.to_pickle(preds, \"oof.pkl\")","8952ef7c":"# print(scores)","d7d6e7a8":"config = {}\nbase = get_base(config)\nmodel = get_model(base, config)","2c2dd06c":"ls ..\/input\/epoch50\/","69af0793":"p_pub = 0\np_pri = 0\nfor i in range(2):\n    model.load_weights(f\"..\/input\/augd43\/model{i}\")\n    p_pub += model.predict([X_node_pub, As_pub]) \/ 2\n    p_pri += model.predict([X_node_pri, As_pri]) \/ 2\n    if one_fold:\n        p_pub *= 2\n        p_pri *= 2\n        break\n\nfor i, target in enumerate(targets):\n    test_pub[target] = [list(p_pub[k, :, i]) for k in range(p_pub.shape[0])]\n    test_pri[target] = [list(p_pri[k, :, i]) for k in range(p_pri.shape[0])]","f8cc3e8d":"preds_ls = []\nfor df, preds in [(test_pub, p_pub), (test_pri, p_pri)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=targets)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_ls.append(single_df)\n\npreds_df = pd.concat(preds_ls)\npreds_df.to_csv(\"submission.csv\", index = False)","a53681a4":"preds_df.shape","7073a895":"# print(scores)\n# print(np.mean(scores))","15baedb0":"## node","d9536785":"## load","c56aa8d0":"## sub","a209a287":"## distance adj","befbc015":"## predict","67625a03":"## target","a2719591":"## model","14017d28":"## pretrain","0df894b7":"## structure adj","3c23cdf9":"## train"}}