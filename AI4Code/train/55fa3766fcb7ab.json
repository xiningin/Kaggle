{"cell_type":{"938b77de":"code","a5249ee6":"code","c745e043":"code","fd5ee44a":"code","3c8414d8":"code","a8da9480":"code","5eac7659":"code","6c1c41cb":"code","973da08c":"code","0503b104":"code","3ee22f9d":"code","54662e15":"code","4e651c32":"code","db4993c8":"code","92551c44":"code","7ea55a3c":"code","ccada063":"code","d215871d":"code","b9b2a7c3":"code","cd02a71f":"code","50575fbc":"code","2073f246":"code","153163bc":"code","81791332":"code","ba40f8b3":"code","f5f98025":"code","1c91ea24":"code","d8b3e8b4":"code","d2e7858d":"code","0289061b":"code","fd4216a0":"code","e13df3c7":"code","39555867":"code","336044ce":"code","e411594b":"code","48ba0ca7":"code","4d58fb0a":"code","4db2593b":"code","d1a2888a":"code","08760e7e":"code","ab139eed":"code","acbd2ff0":"code","d06bf15b":"code","56e3c3bc":"code","e090c6b4":"code","2ebdf9bf":"code","173aeeb3":"code","2241dd44":"code","1b7d460f":"code","0222e663":"code","71e05b88":"code","e91b01dd":"code","d0494d46":"code","3878a279":"code","b71db11e":"code","f632dee2":"code","90d0885c":"code","07589bc1":"code","09ba6157":"code","5fd4a9dd":"code","6557d61a":"code","4602ac47":"code","31525272":"code","cb790df3":"code","e5002c58":"code","db6c7eab":"code","ae954373":"code","ff57d2e1":"code","91c4d137":"code","3ee0fba6":"code","6ee382e8":"code","0b81b0d5":"code","9fbbb073":"markdown","3b7f5d27":"markdown","b50f3ee6":"markdown","db6e6200":"markdown","c46c459d":"markdown","cdf0c8ee":"markdown","70071db2":"markdown","1136e454":"markdown","65972b8d":"markdown","976fcb31":"markdown","9f59e25b":"markdown","9a53918e":"markdown","6889fe47":"markdown","dedf28a3":"markdown","31c4ffb7":"markdown","51651bff":"markdown","ab762037":"markdown","c570ae3e":"markdown","8b2e60c5":"markdown","fda337cb":"markdown","df3eeb07":"markdown","4cef1303":"markdown","e9245a53":"markdown","30d73d4c":"markdown","0c711e5a":"markdown","c14708b4":"markdown","46e2cb3e":"markdown","5b21cb2f":"markdown","dbdb86d3":"markdown","8e5cb7ba":"markdown","a3a5b0de":"markdown","2315e6ce":"markdown","c4a584fe":"markdown","46319b0c":"markdown","80d60b14":"markdown","810f8fbb":"markdown","6d743a94":"markdown","d9758913":"markdown","f4924829":"markdown"},"source":{"938b77de":"#basic libraries\nimport os\nimport re\nimport csv\nimport sqlite3\nimport pandas as pd\nimport pandasql as ps\nimport numpy as np\n\n#visualization libraaries\nimport plotly \nimport cufflinks as cf\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.subplots as subplots\nfrom plotly.offline import init_notebook_mode, iplot\n\n# You can go offline on demand by using\ncf.go_offline() \n# To connect java script to your notebook\ninit_notebook_mode(connected=True)\noriginal_path = '..\/input\/dsc1069'","a5249ee6":"files = ['dsv1069_users.csv','dsv1069_orders.csv','dsv1069_events.csv',\n         'dsv1069_items.csv','dsc1069_date_rollup.csv']","c745e043":"conn = sqlite3.connect('data.db')\nc = conn.cursor()\n\nfor file in files:\n    tb_name = ''.join(re.findall('([A-Za-z]+)',file)[1:-1])\n    df = pd.read_csv(os.path.join(original_path,file))\n    df.to_sql(tb_name, conn, if_exists='append', index=False)","fd5ee44a":"# lets define these functions to be able to write sql query easily !!\n\ndef sq(q):\n    with conn:\n        return pd.read_sql_query(q, conn)\n\n# the same function but rename the columns to be more readable\ndef sq1(q):\n    with conn:\n        return pd.read_sql_query(q, conn).rename(columns=lambda x : x.title().replace('_',' '))","3c8414d8":"tables = sq('''\nSELECT \n  Name,\n  type\nFROM \n  sqlite_master \nWHERE \n  type='table' \n''')\n\ntables","a8da9480":"events = sq('''\nSELECT * \nFROM events\n''')\n\nevents.head()","5eac7659":"users = sq('''\nSELECT * \nFROM users\n''')\n\nusers.head()","6c1c41cb":"orders = sq('''\nSELECT * \nFROM orders\n''')\n\norders.head()","973da08c":"items = sq('''\nSELECT * \nFROM items\n''')\n\nitems.head()","0503b104":"#for events table\nsq('''\nSELECT COUNT(*)-COUNT(event_id) As event_id_null, \n       COUNT(*)-COUNT(event_time) As event_time_null,\n       COUNT(*)-COUNT(event_name) As event_name,\n       COUNT(*)-COUNT(platform) As platform_null, \n       COUNT(*)-COUNT(parameter_name) As parameter_name_null,\n       COUNT(*)-COUNT(parameter_value) As parameter_value_null\nFROM events; \n''')","3ee22f9d":"#for users table\nsq('''\nSELECT COUNT(*)-COUNT(created_at) As created_at_null, \n       COUNT(*)-COUNT(deleted_at) As deleted_at_null,\n       COUNT(*)-COUNT(email_address) As email_address_null,\n       COUNT(*)-COUNT(first_name) As first_name_null, \n       COUNT(*)-COUNT(id) As id_null,\n       COUNT(*)-COUNT(last_name) As last_name_null,\n       COUNT(*)-COUNT(merged_at) As merged_at_null,\n       COUNT(*)-COUNT(parent_user_id) As parent_user_id_null\nFROM users;\n''')","54662e15":"#for orders table\nsq('''\nSELECT COUNT(*)-COUNT(invoice_id) As invoice_id_null, \n       COUNT(*)-COUNT(line_item_id) As line_item_id_null,\n       COUNT(*)-COUNT(user_id) As user_id_null,\n       COUNT(*)-COUNT(item_id) As item_id_null, \n       COUNT(*)-COUNT(item_name) As item_name_null,\n       COUNT(*)-COUNT(item_category) As item_category_null,\n       COUNT(*)-COUNT(price) As price_null,\n       COUNT(*)-COUNT(created_at) As created_at_null,\n       COUNT(*)-COUNT(paid_at) As paid_at_null\nFROM orders; \n''')","4e651c32":"#for items table\nsq('''\nSELECT COUNT(*)-COUNT(adjective) As adjective_null, \n       COUNT(*)-COUNT(category) As category_null,\n       COUNT(*)-COUNT(created_at) As created_at_null,\n       COUNT(*)-COUNT(id) As id_null, \n       COUNT(*)-COUNT(modifier) As modifier_null,\n       COUNT(*)-COUNT(name) As name_null,\n       COUNT(*)-COUNT(price) As price_null\nFROM items; \n''')","db4993c8":"# lets define a function to plot a line plot easily\ndef line_plot(x,y,df,title,yaxis=None):\n    \n    fig = px.line(x=x,\n                  y=y,\n                  data_frame=df,\n                  template=\"simple_white\")\n\n    fig['layout'].title=title\n\n    for trace in fig.data:\n        trace.name = trace.name.replace('_',' ').capitalize()\n\n    fig.update_yaxes(tickprefix=\"\", showgrid=True)\n\n    fig.show()","92551c44":"# lets define a function to plot a line plot easily\ndef bar_plot(x,y,df,title,yaxis=None):\n    \n    fig = px.bar(x=x,\n                 y=y,\n                 data_frame=df,\n                 template=\"simple_white\")\n\n    fig['layout'].title=title\n\n    for trace in fig.data:\n        trace.name = trace.name.replace('_',' ').capitalize()\n\n    fig.update_yaxes(tickprefix=\"\", showgrid=True)\n\n    fig.show()","7ea55a3c":"def pie_plot(names,values,df,title,template=None):\n    \n    fig = px.pie(data_frame=df,\n                names=names,\n                values=values,\n                title=title,\n                template=template,\n                hole=0.5)\n    fig.show()","ccada063":"#Ceate a table containing the new created users\n\ncreated_at = sq('''\nSELECT\n  DATE(created_at) AS DAY,\n  COUNT(*) AS users\nFROM\n  users\nWHERE\n  deleted_at IS NULL\nGROUP BY\n  DAY\nORDER BY \n  DAY\n''')\ncreated_at.head()","d215871d":"title='Line PLot for all new created users over the years' \n\nline_plot(x='DAY',y=['users'],df=created_at,title=title)","b9b2a7c3":"#Ceate a table containing the deleted users\n\ndeleted_at = sq('''\nSELECT\n  DATE(deleted_at) AS DAY,\n  COUNT(*) AS deleted_users\nFROM\n  users\nWHERE\n  deleted_at IS NOT NULL\nGROUP BY\n  DAY\n''')\ndeleted_at.head()","cd02a71f":"title='Line PLot for deleted users over the years' \n\nline_plot(x='DAY',y=['deleted_users'],df=deleted_at,title=title)","50575fbc":"merged_at = sq('''\nSELECT\n  DATE(merged_at) AS DAY,\n  COUNT(*) AS merged_users\nFROM\n  users\nWHERE\n  merged_at IS NOT NULL\n  AND id <> parent_user_id\nGROUP BY\n  DAY\n''')\nmerged_at.head()","2073f246":"title='Line PLot for merged users over the years' \nline_plot(x='DAY',y=['merged_users'],df=merged_at,title=title)","153163bc":"temp = sq1('''\nSELECT\n  STRFTIME(new.day) AS DAY,\n  new.new_added_users,\n  COALESCE(deleted.deleted_users, 0) AS deleted_users,\n  COALESCE(merged.merged_users, 0) AS merged_users,\n  (\n    new.new_added_users - COALESCE(deleted.deleted_users, 0) - COALESCE(merged.merged_users, 0)\n  ) AS net_added_users\nFROM\n  (\n    SELECT\n      DATE(created_at) AS DAY,\n      COUNT(*) AS new_added_users\n    FROM\n      users\n    GROUP BY\n      DAY\n  ) new\n  LEFT JOIN (\n    SELECT\n      DATE(created_at) AS DAY,\n      COUNT(*) AS deleted_users\n    FROM\n      users\n    WHERE\n      deleted_at IS NOT NULL\n    GROUP BY\n      DAY\n  ) deleted ON deleted.day = new.day\n  LEFT JOIN (\n    SELECT\n      DATE(merged_at) AS DAY,\n      COUNT(*) AS merged_users\n    FROM\n      users\n    WHERE\n      merged_at IS NOT NULL\n    AND \n      id <> parent_user_id\n    GROUP BY\n      DAY\n  ) merged ON merged.day = new.day\nORDER BY\n  DAY DESC\n''')\ntemp.head()","81791332":"temp['Day'] = pd.to_datetime(temp['Day'])","ba40f8b3":"title='Line PLot for new, deleted and merged users over the years' \nline_plot(x='Day',y=['New Added Users','Deleted Users','Merged Users','Net Added Users'],df=temp,title=title)","f5f98025":"user_count = sq1('''\nSELECT \n  COUNT(DISTINCT(id)) as user_count \nFROM \n  users\n''').values[0][0]\n\nprint('We have {} users'.format(user_count))","1c91ea24":"user_with_orders_count = sq1('''\nSELECT COUNT(*) as number_of_users_who_have_ordered_an_item\nFROM users u\nINNER JOIN orders o\nON u.id = o.user_id\n''').values[0][0]\n\nprint('We have {} users that have orderd items'.format(user_with_orders_count))","d8b3e8b4":"event_name_count = sq1('''\nSELECT\n  event_name,\n  count(*) AS event_count\nFROM\n  events\nGROUP BY\n  event_name\nORDER BY \n  event_count DESC\n''')\nevent_name_count","d2e7858d":"title = 'Number of events for each event name'\nbar_plot(x='Event Name', y='Event Count',df=event_name_count,title=title)","0289061b":"events_platform_count = sq1('''\nSELECT\n  platform,\n  count(*) AS platform_count\nFROM\n  events\nGROUP BY\n  platform\nORDER BY \n  platform_count DESC\n''')\nevents_platform_count","fd4216a0":"title = 'Number of events for each Platform'\nbar_plot(x='Platform', y='Platform Count',df=events_platform_count,title=title)","e13df3c7":"items_for_sale = sq1('''\nSELECT category,\n       COUNT(id) AS item_count\nFROM items\nGROUP BY category\nORDER BY item_count DESC;\n''')\n# items['category'].value_counts()\nitems_for_sale","39555867":"title = 'Number of items for sale in each category'\nbar_plot(x='Category', y='Item Count',df=items_for_sale,title=title)","336044ce":"view_user_profile = sq1('''\nSELECT\n  (\n    CASE\n      WHEN first_view IS NULL THEN 'NO'\n      ELSE 'YES'\n    END\n  ) AS has_viewed_profile_page,\n  COUNT(user_id) AS users -- creates first_profile_views table\nFROM\n  (\n    SELECT\n      users.id AS user_id,\n      MIN(event_time) AS first_view\n    FROM\n      users\n      LEFT JOIN events ON EVENTS.user_id = users.id\n      AND event_name = 'view_user_profile'\n    GROUP BY\n      users.id\n  ) first_profile_views\nGROUP BY\n  has_viewed_profile_page;\n''')\nview_user_profile","e411594b":"title = 'Number of viewed profile page'\npie_plot('Has Viewed Profile Page','Users',view_user_profile,title,'presentation')","48ba0ca7":"#lets see the types of email domains do we have\nimport numpy as np\ne_mail_domains = np.unique(users['email_address'].apply(lambda x:re.findall('@[\\w]+'.lower(),x.lower())[0][1:]))\nprint('We have {} E-Mail domains:\\n{}'.format(len(e_mail_domains),e_mail_domains))","4d58fb0a":"email_domain_users_count = pd.DataFrame(columns=e_mail_domains)\nfor email in e_mail_domains:\n    q = '''SELECT COUNT(*)\n           FROM users \n           WHERE email_address like '{}' '''.format('%@'+email+'.%')\n    count = sq(q).values[0]\n    email_domain_users_count[email] = count\nemail_domain_users_count = email_domain_users_count.T.sort_values(by=0,ascending=False).reset_index().\\\n                                        rename(columns={0:'Domain users count','index':'Domain name'})\nemail_domain_users_count","4db2593b":"bar_plot('Domain name','Domain users count',email_domain_users_count,title='')","d1a2888a":"view_item_event_1 = c.execute('''\nCREATE TABLE IF NOT EXISTS view_item_event_1 AS\n  SELECT\n    event_id,\n    DATE(event_time) AS event_time,\n    user_id,\n    platform,\n    MAX(\n      CASE\n        WHEN parameter_name = 'item_id' THEN parameter_value\n        ELSE NULL\n      END\n    ) AS item_id,\n    MAX(\n      CASE\n        WHEN parameter_name = 'referrer' THEN parameter_value\n        ELSE NULL\n      END\n    ) AS referrer\n  FROM\n    events\n  WHERE\n    event_name = 'view_item'\n  GROUP BY\n    event_id,\n    event_time,\n    user_id,\n    platform\n''')\nview_item_event_1","08760e7e":"#lets check our tables\nsq('''\nSELECT * FROM sqlite_master\n''')","ab139eed":"events['event_name'].unique()","acbd2ff0":"view_item_events = c.execute('''\nCREATE TABLE IF NOT EXISTS view_item_events AS\n  SELECT\n    event_id,\n    DATE(event_time) AS event_time,\n    user_id,\n    platform,\n    MAX(\n      CASE\n        WHEN parameter_name = 'item_id' THEN parameter_value\n        ELSE NULL\n      END\n    ) AS item_id,\n    MAX(\n      CASE\n        WHEN parameter_name = 'referrer' THEN parameter_value\n        ELSE NULL\n      END\n    ) AS referrer\n  FROM\n    events\n  WHERE\n    event_name = 'view_item'\n  GROUP BY\n    event_id,\n    event_time,\n    user_id,\n    platform\n''')","d06bf15b":"view_user_profile_event = c.execute('''\nCREATE TABLE IF NOT EXISTS view_user_profile_event AS\nSELECT\n  event_id,\n  DATETIME(event_time) AS event_time,\n  user_id,\n  platform,\n  MAX(CASE WHEN parameter_name = 'viewed_user_id' THEN parameter_value\n      ELSE NULL\n      END) as viewed_user_id\nFROM\n  EVENTS\nWHERE\n  event_name = 'view_user_profile'\nGROUP BY\n  event_id,\n  event_time,\n  user_id,\n  platform\n''')","56e3c3bc":"test_assignment_event = c.execute('''\nCREATE TABLE IF NOT EXISTS test_assignment_event AS\nSELECT\n  event_id,\n  DATETIME(event_time) AS event_time,\n  user_id,\n  platform,\n  MAX(CASE WHEN parameter_name = 'test_assignment' THEN parameter_value\n      ELSE NULL\n      END) as test_assignment,\n  MAX(CASE WHEN parameter_name = 'test_id' THEN parameter_value\n      ELSE NULL\n      END) as test_id\nFROM\n  EVENTS\nWHERE\n  event_name = 'test_assignment'\nGROUP BY\n  event_id,\n  event_time,\n  user_id,\n  platform\n''')","e090c6b4":"#lets check our tables\nsq('''\nSELECT * \nFROM sqlite_master\n''')","2ebdf9bf":"view_item_events = sq('''SELECT * FROM view_item_events''')\nview_item_events.head()","173aeeb3":"test_assignment_event = sq('''SELECT * FROM test_assignment_event''')\ntest_assignment_event.head()","2241dd44":"view_user_profile_event = sq('''SELECT * FROM view_user_profile_event ''')\nview_user_profile_event.head()","1b7d460f":"cat_users_viewed_count = sq1(''' \nWITH view_item_event_category_group AS (\n  SELECT\n    i.category AS category,\n    v.user_id AS user_id\n  FROM\n    view_item_events v\n    LEFT JOIN items i ON i.id = v.item_id\n)\nSELECT\n  category,\n  count(DISTINCT user_id) AS users_viewed_count\nFROM\n  view_item_event_category_group\nGROUP BY\n  category\n''')\n# sq('''\n# SELECT\n#   items.category,\n#   count(DISTINCT user_id)\n# FROM\n#   view_item_event\n#   JOIN items ON items.id = view_item_event.item_id\n# GROUP BY\n#   items.category\n# ''')\ncat_users_viewed_count","0222e663":"title='Number of users have viewed items for each product category'\nbar_plot('Category','Users Viewed Count',cat_users_viewed_count,title)","71e05b88":"sq1('''\nSELECT\n  COUNT(DISTINCT(items.id)) AS items_count,\n  COUNT(orders.item_id) AS items_ever_purchased_count\nFROM\n  orders\n  JOIN items ON items.id = orders.item_id\n''')","e91b01dd":"sq1('''\nSELECT\n  o.item_category AS category,\n  COUNT(DISTINCT COALESCE(parent_user_id, user_id)) AS user_with_orders\nFROM\n  orders o\n  JOIN users u ON u.id = o.user_id\nGROUP BY\n  o.item_category\nORDER BY\n  user_with_orders DESC\n''')","d0494d46":"num_each_day = sq1('''\nSELECT\n  DATE(paid_at) AS DAY,\n  COUNT(DISTINCT invoice_id) AS orders,\n  COUNT(DISTINCT line_item_id) AS line_items\nFROM\n  orders\nGROUP BY\n  DAY\nORDER BY\n  DAY DESC;\n''')\nnum_each_day","3878a279":"line_plot('Day',['Orders','Line Items'],num_each_day,title='')","b71db11e":"#first lets create a tabe with recently viewed events for each user\nrecent_views = c.execute('''\nCREATE TABLE IF NOT EXISTS 'recent_views' AS\nSELECT\n  user_id,\n  item_id,\n  event_time,\n  ROW_NUMBER() OVER (\n    PARTITION BY user_id\n    ORDER BY\n      event_time DESC\n  ) AS row_number,\n  RANK() OVER (\n    PARTITION BY user_id\n    ORDER BY\n      event_time DESC\n  ) AS rank,\n  DENSE_RANK() OVER (\n    PARTITION BY user_id\n    ORDER BY\n      event_time DESC\n  ) AS dense_rank\nFROM\n  view_item_events\n''')","f632dee2":"recent_views = sq('''SELECT * FROM recent_views''')\nrecent_views.head()","90d0885c":"#lets join recent_views, users, items tables together \nc.execute('''\nCREATE TABLE IF NOT EXISTS 'full_recent_view' AS\nSELECT\n  u.id AS user_id,\n  (u.first_name || ' ' || u.last_name) AS name,\n  i.id AS item_id,\n  event_time,\n  row_number,\n  rank,\n  dense_rank,\n  u.created_at,\n  i.category\nFROM\n  recent_views r\n  LEFT JOIN users u ON r.user_id = u.id\n  LEFT JOIN items i ON r.item_id = i.id\n''')","07589bc1":"full_recent_view = sq('''SELECT * FROM full_recent_view ''')\nfull_recent_view.head()","09ba6157":"#now we need to get the needed information about the item they viewed more recently.\nsq('''\nSELECT u.id AS user_id,\n  (u.first_name || ' ' || u.last_name) AS name,\n  i.id AS item_id,\n  i.name AS item_name,\n  event_time,\n  row_number,\n  u.created_at,\n  i.category\nfrom full_recent_view r\nJOIN users u\n  ON u.id = r.user_id\nJOIN items i\n  ON i.id = r.item_id\n''')","5fd4a9dd":"#now select the most recently viewed for each user(row_view = 1)\nc.execute('''\nCREATE TABLE IF NOT EXISTS 'recent_view_user' AS\nSELECT\n  COALESCE(users.parent_user_id, users.id) AS user_id,\n  (users.first_name || ' ' || users.last_name) AS name,\n  items.id AS item_id,\n  items.name AS item_name,\n  event_time,\n  users.created_at,\n  items.category\nFROM\n  full_recent_view\n  JOIN users ON users.id = full_recent_view.user_id\n  JOIN items ON items.id = full_recent_view.item_id\n  LEFT JOIN orders\n  \/*LEFT OUTER JOIN to filter the users who viewed and ordered*\/\n  ON orders.item_id = full_recent_view.item_id\n  AND orders.user_id = full_recent_view.user_id\nWHERE\n  row_number = 1\n  AND users.deleted_at IS NOT NULL\n  AND orders.item_id IS NULL\n''')","6557d61a":"sq('''\nSELECT * FROM recent_view_user \n''')","4602ac47":"sq1('''\nSELECT\n  recent_view_user.*,\n(DATETIME('now') - DATETIME(created_at)) AS date_difference\nFROM\n  recent_view_user\n''')","31525272":"sq1('''\nSELECT COUNT(DISTINCT user_id) as users_re_ordered\nFROM\n  ( SELECT user_id,\n           COUNT(DISTINCT invoice_id) AS order_count\n   FROM orders\n   GROUP BY user_id ) user_level\nWHERE order_count > 1;\n''')","cb790df3":"sq1('''\nSELECT\n  COUNT(*) as re_order_the_same_item\nFROM\n  (\n    SELECT\n      user_id,\n      item_id,\n      COUNT (DISTINCT line_item_id) AS times_user_ordered\n    FROM\n      orders\n    GROUP BY\n      user_id,\n      item_id\n  )\nWHERE\n  times_user_ordered > 1;\n''')","e5002c58":"sq1('''\nSELECT\n  item_id,\n  name,\n  category,\n  orders_count\nFROM\n  (\n    SELECT\n      item_id,\n      count(invoice_id) orders_count\n    FROM\n      orders\n    GROUP BY\n      item_id\n  ) AS orders\n  LEFT JOIN items ON items.id = orders.item_id\nORDER BY\n  Orders_Count DESC\n''')","db6c7eab":"sq1('''\nSELECT\n  category,\n  count(*) AS orders_by_category\nFROM\n  orders\n  LEFT JOIN items ON items.id = orders.item_id\nGROUP BY\n  category\nORDER BY\n  orders_by_category DESC;\n''')","ae954373":"#lets try the previous example with pandas \ntemp = orders.set_index('item_id').join(items.set_index('id'),how='left',lsuffix='_caller', rsuffix='_other')\ntemp['category'].value_counts().to_frame().rename(columns={'category':'Category Count'})","ff57d2e1":"sq('''\nSELECT item_category,\n  AVG(times_category_ordered) AS avg_times_category_ordered\nFROM\n  (SELECT user_id,\n          item_category,\n          COUNT(DISTINCT line_item_id) AS times_category_ordered\n   FROM orders\n   GROUP BY user_id,\n            item_category) user_level\nGROUP BY item_category\n''')","91c4d137":"sq1('''\nSELECT first_orders.user_id,\n       DATE(first_orders.paid_at) AS first_order_date,\n       DATE(second_orders.paid_at) AS second_order_date,\n       DATE(second_orders.paid_at) - DATE(first_orders.paid_at) AS date_diff\nFROM\n    (SELECT user_id,\n            invoice_id,\n            paid_at,\n            DENSE_RANK() OVER (PARTITION BY user_id\n                               ORDER BY paid_at ASC) AS order_num\n   FROM orders) first_orders\nJOIN\n  (SELECT user_id,\n          invoice_id,\n          paid_at,\n          DENSE_RANK() OVER (PARTITION BY user_id\n                             ORDER BY paid_at ASC) AS order_num\n   FROM orders) second_orders\n  ON first_orders.user_id = second_orders.user_id\nWHERE first_orders.order_num = 1\n  AND second_orders.order_num = 2;\n\n''')","3ee0fba6":"#first lets load all the data we have in this dictionary\nall_data = {} \ndfs = tables['name'].values\nfor df_name in dfs:\n    q = '''SELECT *\n           FROM {}'''.format(df_name)\n    temp = sq(q)\n    all_data[df_name] = temp","6ee382e8":"#create a filter funstion that takes the naame of table, the column in this table and the filter to apply\ndef apply_filter():       \n    print('Let\\'s apply some filters to the data')\n    \n    #take the name of table from the user to load it\n    while True:\n        print('All data : {}'.format(all_data.keys()))\n        data_name = str(input('Enter the name of data to apply filter on it or end to close : '))\n        if data_name.lower()=='end':\n            return False\n        if data_name not in all_data.keys():\n            print('Not in data, Please try again!')\n        else:\n            break\n            \n    data = all_data[data_name]\n    \n    #take the name of column in this table from the user\n    while True:\n        print('All columns : {}'.format(all_data[data_name].columns))\n        column = str(input('Enter the column to apply your filter or end to close : '))\n        if column.lower()=='end':\n            return False\n        if column not in data.columns:\n            print('Not in data, Please try again!')\n        else:\n            break\n            \n    col_type = all_data[data_name][column].dtypes\n\n        \n    #take the filter from the user to apply\n    while True:\n        if col_type == 'object':\n            print('Type of column is : {}'.format(col_type),'\\n',all_data[data_name][column].unique())\n            app_filter = input('Enter the filter (that has the same type) to apply or type end to close  : ')\n        else: \n            print('Type of column is : {}'.format(col_type))\n            app_filter = input('Enter the filter (that has the same type) to apply or type end to close  : ')\n        if app_filter.lower()=='end':\n            return False\n        if app_filter not in data[column].unique():\n            print('Not in data, Please try again!')\n            print(app_filter,type(app_filter))\n        else:\n            break\n\n    print('-'*40)\n    return data_name,column,app_filter","0b81b0d5":"# def main():\n#     while True:\n        \n#         data_name,column,app_filter=apply_filter()\n#         print('Your data is ready \\n')\n#         data = all_data[data_name]\n#         new_data = data[data[column]==app_filter]\n#         print(new_data)\n#         restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n#         if restart.lower() != 'yes':\n#             break\n\n# #  return new_data\n    \n# if __name__ == \"__main__\":\n#     main()","9fbbb073":"<a id=\"q6\"><\/a>\n<h3>What is the number of view user profile?<\/h3>","3b7f5d27":"<a id=\"q3\"><\/a>\n<h3>What is the number of events for each event name?<\/h3>","b50f3ee6":"<a id=\"q4\"><\/a>\n<h3>What is the number of events for each Platform?<\/h3>","db6e6200":"<h3>Conclusions<\/h3><br>\n<b><li>Average number of new created users increases over the time","c46c459d":"<a id=\"q14\"><\/a> \n<h3>What is the most recently viewed item for each user?<\/h3>","cdf0c8ee":"<a id=\"q12\"><\/a>\n<h3>How many items have been purchased for each category?<\/h3>","70071db2":"<a id=\"q11\"><\/a>\n<h3>How many items have been purchased and how many items do we have?<\/h3>","1136e454":"<a id=\"q17\"><\/a>\n<h3>How many users have reordered the same item?<\/h3>","65972b8d":"<a id=\"q8\"><\/a>\n<h3>Show the users who have viewed items?<\/h3>","976fcb31":"<a id=\"q10\"><\/a>\n<h3>What percent of users have viewed items for each product category?<\/h3>","9f59e25b":"<a id=\"q2\"><\/a>\n<h3>What is the number of users who have ordered an item?<\/h3>","9a53918e":"<a id=\"q18\"><\/a>\n<h3>How many orders per items?<\/h3>","6889fe47":"<a id=\"q9\"><\/a>\n<h3>Create a tables for each event name (view_item, view_user_profile, test_assignment events)<\/h3>","dedf28a3":"<b><li>Window Function: It is a function that computes a value on a certain partition, or window, of the data that is specified in the PARTITION BY statement.\n<li>You can see <a href='https:\/\/sqlite.org\/windowfunctions.html'>windowfunctions<\/a><\/h3>","31c4ffb7":"### users table","51651bff":"<a id=\"q21\"><\/a>\n<h3>What is the average time between orders?<\/h3>","ab762037":"### items table","c570ae3e":"<a id=\"q1\"><\/a>\n<h3>How many users do we have?<\/h3>","8b2e60c5":"<p style=\"background-color:skyblue; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 10px 100px;\"><b>Introduction<\/b><\/p>\n<b>\n<li>In this notebook i will do some data cleaning and data analysis using SQL and Pandas.<\/li>\n<br>\n<li>This data from <a href=\"https:\/\/www.coursera.org\/learn\/data-wrangling-analysis-abtesting\">Data Wrangling, Analysis and AB Testing with SQL<\/a> Coursera course from University of California, and i will join all the data together in one database using python library <b><a href=\"https:\/\/docs.python.org\/3\/library\/sqlite3.html\">sqlite3<\/a><\/b>,then i will try to do some data analysis and data visualization using <b>plotly<\/b> library (more intractive) and answer some questions.<\/li>\n<br>\n<p style=\"background-color:skyblue; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 10px 100px;\">Outline:<\/p>\n<ul>\n   <li><a href=\"#Importing the needed libraries\">Importing the needed libraries<\/a><\/li>\n   <li><a href=\"#Importing the data and join them in a database\">Importing the data and join them in a database and explore our tables<\/a><\/li>\n   <li><a href=\"#EDA\">EDA<\/a><\/li>\n   <li>\n      <a href=\"#Answering some quistions:\">Answering some quistions:<\/a>\n      <ul>\n         <li><a href=\"#q1\">How many users do we have?<\/a><\/li>\n         <li><a href=\"#q2\">What is the number of users who have ordered an item?<\/a><\/li>\n         <li><a href=\"#q3\">What is the number of events for each event name?<\/a><\/li>\n         <li><a href=\"#q4\">What is the number of events for each Platform?<\/a><\/li>\n         <li><a href=\"#q5\">What is the number of items for sale in each category?<\/a><\/li>\n         <li><a href=\"#q6\">What is the number of view user profile?<\/a><\/li>\n         <li><a href=\"#q7\">How many email address for each email domains?<\/a><\/li>\n         <li><a href=\"#q8\">Show the users who have viewed items?<\/a><\/li>\n         <li><a href=\"#q9\">Create a tables for each event name (view_item, view_user_profile, test_assignment events)<\/a><\/li>\n         <li><a href=\"#q10\">What percent of users have viewed items for each product category?<\/a><\/li>\n         <li><a href=\"#q11\">How many items have been purchased and how many items do we have?<\/a><\/li>\n         <li><a href=\"#q12\">How many items have been purchased for each category?<\/a><\/li>\n         <li><a href=\"#q13\">How many orders are placed each day?<\/a><\/li>\n         <li><a href=\"#q14\">What is the most recently viewed item for each user?<\/a><\/li>\n         <li><a href=\"#q15\">How long ago was their most recent view?<\/a><\/li>\n         <li><a href=\"#q16\">How many users have reordered an item?<\/a><\/li>\n         <li><a href=\"#q17\">How many users have reordered the same item?<\/a><\/li>\n         <li><a href=\"#q18\">How many orders per items?<\/a><\/li>\n         <li><a href=\"#q19\">How many orders per category?<\/a><\/li>\n         <li><a href=\"#q20\">What is the avgerage times each category has ordered?<\/a><\/li>\n         <li><a href=\"#q21\">What is the average time between orders?<\/a><\/li>\n      <\/ul>\n<\/ul>\n<li><a href=\"#filter\">create a filter function  to apply a filter on our data using pandas<\/a><\/li>\n<br>\n<p style=\"background-color:skyblue; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 10px 100px;\">You can also see<\/p>\n<ul>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/object-oriented-programming-for-data-science-8'>Object oriented programming for data science<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/predicting-the-survival-of-titanic-top-6'>Predicting the Survival of Titanic (Top 6%)<\/a><br>    \n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/house-price-prediction-top-8'>\u2714 House Price prediction(Top 8%)<\/a><br> \n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda'>CommonLit Readability EDA \ud83c\udfa8\n<\/a><br>    \n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/hotel-booking-eda-cufflinks-and-plotly'>Hotel booking EDA (Cufflinks and plotly)<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/data-exploration-and-visualization-uber-data'>Data exploration and visualization(Uber Data)<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-data-analysis-with-plotly-clustering'>Superstore Data Analysis With Plotly(Clustering)<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>Chinook Questions with sqlite<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a>","fda337cb":"<h3>Conclusions<\/h3><br>\n<b><li>In events table, We don't have null values\n<b><li>In users table, We have null values in deleted_at, merged_at and parent_user_id columns\n<b><li>In orders table, We don't have null values\n<b><li>In items table, We have null values in adjective and modifier columns","df3eeb07":"### Just remove the comment and run the code","4cef1303":"## Lets Explore our tables ","e9245a53":"<a id=\"16\"><\/a>\n<h3>How many users have reordered an item?<\/h3>","30d73d4c":"<a id=\"q15\"><\/a>\n<h3>How long ago was their most recent view?<\/h3>","0c711e5a":"<a id=\"q7\"><\/a>\n<h3>How many email address for each email domains?<\/h3>","c14708b4":"<a id=\"q5\"><\/a>\n<h3>What is the number of items for sale in each category?<\/h3>","46e2cb3e":"<a id='Importing the needed libraries'><\/a>\n<h2>Importing the needed libraries","5b21cb2f":"### EVents table","dbdb86d3":"<a id=\"q19\"><\/a>\n<h3>How many orders per category?<\/h3>","8e5cb7ba":"<a id=\"Answering some quistions:\"><\/a>\n<h1>Let's answer some quistions<\/h1>","a3a5b0de":"<a id='NULL'><\/a>\n<h3>Lets Check the null values in each column<\/h3>","2315e6ce":"<a id='Importing the data and join them in a database'><\/a>\n<h2>Importing the data and join them in a database<\/h2>","c4a584fe":"------------------------------------------\n------------------------------------------\n# <p style=\"background-color:yellow; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 10px 100px; color:black; hight:max\"> Upvote my work if you found it useful.\ud83c\udfaf <\/p>\n------------------------------------------\n------------------------------------------\n# <p style=\"background-color:#CCE3F2; font-family:newtimeroman; font-size:175%; text-align:center; border-radius: 15px 50px;\">Data Analysis using SQL and Pandas<\/p>\n\n------------------------------------------\n------------------------------------------","46319b0c":"<a id=\"EDA\"><\/a>\n<h2>EDA<\/h2>","80d60b14":"### orders table","810f8fbb":"<h1 align=\"center\"> Thanks, I hope it was useful<\/h1>","6d743a94":"<a id=\"q20\"><\/a>\n<h3>What is the avgerage times each category has ordered?<\/h3>","d9758913":"<a id=\"q13\"><\/a>\n<h3>How many orders are placed each day?<\/h3>","f4924829":"<a id=\"filter\"><\/a>\n<h2>lets create a filter function  to apply a filter on our data using pandas<\/h2>"}}