{"cell_type":{"41705583":"code","428ced90":"code","19c11ffb":"code","5ee1cec5":"code","77757aa2":"code","3a99dc44":"code","74f43e4a":"code","47ac1dfa":"code","563fe909":"code","7579a0eb":"code","9ea24550":"code","9aa4c903":"code","54a2994c":"code","f6af8d06":"code","2352b888":"code","8558428f":"code","ed7e522c":"code","a496faff":"code","5c7dd6a8":"code","01e1cfc9":"code","29edacce":"code","4db3d910":"code","4815eef9":"code","b135d4cc":"code","135ba335":"markdown","6f3f4dac":"markdown","9a73c4df":"markdown","702459e5":"markdown","0c36bdad":"markdown","32f91888":"markdown"},"source":{"41705583":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","428ced90":"#  variables\n\n# paths for files\npath_str = \"..\/input\/bank-loan-modelling\/Bank_Personal_Loan_Modelling.xlsx\"\n","19c11ffb":"#  Load data\n# create dataframe from data\n\n# Openpyxl needed to read Excel file.  May need to be installed. \ntry:\n    import openpyxl\nexcept ImportError as e:\n    !pip install openpyxl\n    import openpyxl\n\n# Load to dataframe\ndf = pd.read_excel(path_str, sheet_name='Data')\n\ndf.head()","5ee1cec5":"# Check column names and types\ndf.info()","77757aa2":"# Check stats on column values\ndf.describe()","3a99dc44":"# Clean up the data, removing unneeded columns and renaming\ndf.drop(columns=['ID', 'ZIP Code'], axis=1, inplace=True)\ndf.rename(columns={\"Experience\": \"yrs_job_experience\", \"CCAvg\": \"average_cc_per_month\", \"Mortgage\": \"value_of_mortgage_thousands\",\n                  \"Personal Loan\": \"bank_relationship_loan\",\"Securities Account\": \"bank_rel_securities_acct\",\n                  \"CD Account\": \"bank_rel_CD_acct\",\"Online\": \"bank_rel_use_online\", \"CreditCard\": \"bank_rel_CR_card\"}, inplace=True)\n\n# Create total column for number of bank relationshps\ndf['total_bank_relationships'] = (df['bank_relationship_loan'] + df['bank_rel_securities_acct'] + df['bank_rel_CD_acct'] + \n                                  df['bank_rel_use_online'] + df['bank_rel_CR_card'])\n\n# Create binary column for clients with 2 or more bank relationships\ndf['two_or_more_bank_rel'] = np.where(df['total_bank_relationships']<2, 0, 1)\n\ndf.head()","74f43e4a":"df.describe()","47ac1dfa":"# import packages\nimport seaborn as sn\nimport matplotlib.pyplot as plt","563fe909":"# Correlation matrix to get a good visual\n# set width and height \nf = plt.figure() \nf.set_figwidth(14) \nf.set_figheight(11) \n\n# create matrix\nsn.heatmap(df.corr(), annot = True, vmin=-1, vmax=1, center= 0, cmap= 'Blues', linewidths=1, linecolor='black')\n# Make x and y descriptions larger so they are easier to read\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show()","7579a0eb":"# Now create a decision tree with total number of relationships as target\n\nfeatures = ['Age', 'yrs_job_experience', 'Income', 'Family', 'average_cc_per_month', 'Education',\n            'value_of_mortgage_thousands', 'bank_relationship_loan', 'bank_rel_securities_acct', 'bank_rel_CD_acct', 'bank_rel_use_online']\n\nX = df[features]\ny = df['two_or_more_bank_rel']","9ea24550":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\n# Train the model\n# Here is where you can adjust the type of decision tree algorith as well as the number of levels in the tree.\n# I used trial and error here to get a view of the tree that wasn't too big, but also resulted in high accuracy, \n#  and enough detail to get a sense of the result\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\nclassifier.fit(X_train, y_train)","9aa4c903":"# predict using the rest of the data that was put into the test group\n\ny_pred = classifier.predict(X_test)","54a2994c":"# run test to see how accurate the prediction was\nfrom sklearn import metrics\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","f6af8d06":"# accuracy by group\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))\n\n# Precision \u2014 What percent of your predictions were correct?\n# Recall \u2014 What percent of the positive cases did you catch?\n# F1 score \u2014 What percent of positive predictions were correct?","2352b888":"# Create visual of the decision tree\n\nfrom io import StringIO    \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\n\n# pydot may need to be installed. \ntry:\n    import pydotplus\nexcept ImportError as e:\n    !pip install pydotplus\n    import pydotplus\n","8558428f":"dot_data = StringIO()\nexport_graphviz(classifier, out_file=dot_data,  \n                filled=True, rounded=True,\n                # rename to descriptive classes [0,1]\n                special_characters=True, feature_names = features,class_names=['less_than_2_bank_rel','gte_2_bank_rel'])     \ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('credit.png')\nImage(graph.create_png())\n","ed7e522c":"# Look at data with greater than two relationships to see where they are concentrated.\ndf_rel = df.loc[df['total_bank_relationships'] > 2]\ndf_rel.to_csv('df_rel.csv',index=False)","a496faff":"#  Now group by number of bank relationships and average in selected categories\ndf_group = df.groupby('total_bank_relationships')['Age', 'yrs_job_experience', 'Income', \n                                                  'average_cc_per_month', 'value_of_mortgage_thousands',\n                                                 'bank_relationship_loan', 'bank_rel_securities_acct',\n                                                 'bank_rel_CD_acct', 'bank_rel_use_online', 'bank_rel_CR_card', ].mean().reset_index()\ndf_group.round(0)","5c7dd6a8":"#  Remove age and job experience and run again.\ndf_group = df.groupby('total_bank_relationships')['Income', \n                                                  'average_cc_per_month', 'value_of_mortgage_thousands',\n                                                 ].mean().reset_index()\ndf_group.round(0)","01e1cfc9":"# subset of columns from original dataset\n#df_plot = df[['Income', 'average_cc_per_month', 'value_of_mortgage_thousands']]\ndf_plot = df_group.round(0).reset_index()\ndf_plot = df_group[['Income', 'average_cc_per_month', 'value_of_mortgage_thousands']]\ndf_plot","29edacce":"\n# Bar chart of the above table\nfig=plt.figure(figsize=(20,10))\nsn.set_theme(style=\"whitegrid\")\nfor i,col in enumerate(df_plot):\n    ax=fig.add_subplot(2,3,i+1)\n    sn.barplot(data=df_plot, y=df_plot[col], x=df_group['total_bank_relationships'], color=\"blue\", saturation=.3)","4db3d910":"#  Now group-avg just by the bank relationships\ndf_group = df.groupby('total_bank_relationships')['bank_relationship_loan', 'bank_rel_securities_acct',\n                                                 'bank_rel_CD_acct', 'bank_rel_use_online', 'bank_rel_CR_card', ].mean().reset_index()\ndf_group.round(0)","4815eef9":"# subset of columns from original dataset\ndf_plot = df_group.round(0).reset_index()\ndf_plot = df_group[['bank_relationship_loan', 'bank_rel_securities_acct', 'bank_rel_CD_acct', 'bank_rel_use_online', 'bank_rel_CR_card']]\n","b135d4cc":"# Bar chart of the above table\nfig=plt.figure(figsize=(20,10))\nsn.set_theme(style=\"whitegrid\")\nfor i,col in enumerate(df_plot):\n    ax=fig.add_subplot(2,3,i+1)\n    sn.barplot(data=df_plot, y=df_plot[col], x=df_group['total_bank_relationships'], color=\"blue\", saturation=.3)","135ba335":"* All groups with any relationship are very active online, though there is a slight correlation with increase in online activity.\n\n* Those with loans, securities accounts, and credit card accounts tend to have strong relationships with the bank, validating what the decision tree showed.\n\n* Those with CD accounts tend to have strong overall relationships with the bank.","6f3f4dac":"* The above correlation matrix suggests a strong relationship between number of banking relationships and CD account,\nperhaps suggesting that if the Bank can sign up their new customers with a CD account, a stronger relationship\nwith loans, credit card, etc. may follow once the relationship is established.\n\n* The highest correlation is between income and average credit card balance per month.  The bank may want to offer credit card deals\nto high income earners who are not already using the bank's credit card.\n","9a73c4df":"* In the above list with reduced columns, we can see that there is a strong relationship between income and number of relationships.\n\n* There is also a correlation between average credit card balance per month and bank relationships.\n\n* The relationship between relationships and value of mortgage is flat when relationships are less than 2, but once it reaches 80K, it spikes and splits along the $55-$75K range.","702459e5":"From the more traditional table and bar chart approach, we can see that the total number of bank relationships increases with income-related factors such as income, average credit card balance, and size of mortgage.","0c36bdad":"The blue boxes in the above tree suggest that those with loans and securities accounts tend to have strong relationships by the >=2 definition.","32f91888":"In the above group-average by selected categories, we can see that there is a correlation between income and number of relationships, which didn't really come out in the other.  Correlation with age and experience are negligible."}}