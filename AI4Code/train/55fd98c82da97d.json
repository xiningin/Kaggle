{"cell_type":{"eb380f4d":"code","752cdba9":"code","d5a28863":"code","15fb278a":"code","c55d41a4":"code","4ff7312b":"code","6c26c1dd":"code","d18f7c17":"code","72b704b0":"code","82278d85":"code","ca9fba6a":"code","0da46cf3":"code","ebeb7d15":"code","4bda15eb":"code","4014e0bc":"code","04b4b3fa":"code","424f45b2":"code","f7e2fe43":"code","c7168dac":"code","9815e852":"code","4f9c6030":"code","c1720644":"code","7bbc9ace":"code","0146f948":"code","5ef7d315":"code","c97dded8":"code","7d57d3cc":"code","a7a627d5":"code","acb271bd":"code","8a22c6c8":"code","8b142315":"code","49ca3d9d":"code","2bf1c035":"code","3a345e4b":"code","5663d46a":"code","616ebed4":"code","ce27c245":"code","ce296ce0":"code","315aa272":"code","a086427d":"code","4946f88a":"code","75efc104":"code","7bfb1778":"code","98ff256d":"code","9ad1ff2a":"code","ab655178":"code","94eb1d6e":"code","65188088":"code","ab65dc33":"code","fb4ae183":"code","b7b207ed":"code","beb595ea":"code","2637bcb0":"code","17545468":"code","a1636262":"code","2db3f206":"code","8e3bd4a7":"code","07d13a2f":"markdown","59454427":"markdown","9178879b":"markdown"},"source":{"eb380f4d":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","752cdba9":"air = pd.read_csv('..\/input\/covidpollutant\/openaq.csv', sep=';')\ncovid = pd.read_csv('..\/input\/covidpollutant\/WHO_COVID.csv')","d5a28863":"test = air[air['Unit']=='ppm'] #convert all unit to \u00b5g\/m\u00b3\ntest","15fb278a":"test['Pollutant'].unique()","c55d41a4":"#Formula: concentration (mg\/m3) = 0.0409 x concentration (ppm) x molecular weight of gas\nfor i in range(len(air['Unit'])):\n    if air['Unit'][i] == 'ppm' and air['Pollutant'][i] =='O3':\n        air['Value'][i] = 0.0409 * air['Value'][i] * 48.00\n    elif air['Unit'][i] == 'ppm' and air['Pollutant'][i] =='SO2':\n        air['Value'][i] = 0.0409 * air['Value'][i] * 64.06\n    elif air['Unit'][i] == 'ppm' and air['Pollutant'][i] =='CO':\n        air['Value'][i] = 0.0409 * air['Value'][i] * 28.01\n    elif air['Unit'][i] == 'ppm' and air['Pollutant'][i] =='NO2':\n        air['Value'][i] = 0.0409 * air['Value'][i] * 46.01\n    elif air['Unit'][i] == 'ppm' and air['Pollutant'][i] =='NO':\n        air['Value'][i] = 0.0409 * air['Value'][i] * 30.01 \n    else:\n        air['Value'][i] == air['Value'][i]","4ff7312b":"air['Unit'] = air['Unit'].replace(['ppm'],['\u00b5g\/m\u00b3'])   ","6c26c1dd":"air.sort_values('Value', ascending=True)# last date 16-10-2021 and we need the data start with pandamic on 1-03-2020","d18f7c17":"air.info()","72b704b0":"air['Last Updated'] = pd.to_datetime(air['Last Updated'], format='%Y-%m-%d')","82278d85":"air = air[air['Last Updated']>= '2020-03-01']","ca9fba6a":"air['date'] = air['Last Updated'].dt.strftime('%Y-%m-%d')","0da46cf3":"air['date'] = pd.to_datetime(air['date'], format='%Y-%m-%d')","ebeb7d15":"df = air[['Pollutant', 'Value', 'Country Label']].dropna()","4bda15eb":"df.head()","4014e0bc":"df_air = pd.pivot_table(df, values='Value', index=['Country Label'],\n                    columns=['Pollutant'], aggfunc=np.mean)","04b4b3fa":"df_air","424f45b2":"df_air = df_air.reset_index()","f7e2fe43":"np.array(df_air['Country Label'])","c7168dac":"np.array(covid['Name'])","9815e852":"df_air['Country Label'] = df_air['Country Label'].replace(['United States', 'United Kingdom', 'USSR', 'Serbia and Montenegro', 'Sudan, The Republic of', 'Macedonia, The former Yugoslav Rep. of'], ['United States of America', 'The United Kingdom', 'Russian Federation', 'Montenegro', 'Sudan', 'North Macedonia'])","4f9c6030":"#import difflib \n#covid['Name'] = covid['Name'].map(lambda x: difflib.get_close_matches(x, df_air['Country Label']))","c1720644":"#np.array(covid['Name'])","7bbc9ace":"#g_pollutant = df_air.groupby(['Country Label','Pollutant'])['Value'].agg({np.mean, np.max, np.min})","0146f948":"#g_pollutant = g_pollutant.reset_index()","5ef7d315":"#g_pollutant['Country Label'].unique()","c97dded8":"df_air = df_air.set_index('Country Label')","7d57d3cc":"covid = covid.rename(columns={'Cases - cumulative total per 100000 population':'Cases', 'Deaths - cumulative total per 100000 population':'Deaths'})\ncovid = covid[['Name', 'Cases', 'Deaths']]","a7a627d5":"covid","acb271bd":"df_covid = covid.set_index('Name')","8a22c6c8":"all_df = pd.merge(df_air, df_covid, how='inner', left_index=True, right_index=True)","8b142315":"all_df","49ca3d9d":"all_df.plot(alpha=0.7, figsize=(19, 12)); # noted the most effective gasesis (SO2, O3, NO2)","2bf1c035":"all_df.plot('NO2', 'Deaths', kind='scatter');","3a345e4b":"all_df.plot('NO2', 'Cases', kind='scatter');","5663d46a":"all_df.index","616ebed4":"x = list(range(1,81))\ny = list(range(-1200, 2000, 40))\n                 \nfig, ax = plt.subplots(figsize=(19, 15))\nax.set_ylim(-2000, 20000)                \nax.scatter(x, all_df['PM2.5'], label=\"PM2.5\", s=15, c=\"gray\", alpha=0.9)\nax.scatter(x, all_df['CO'], label=\"CO\", s=15, c=\"red\", alpha=0.9)\nax.scatter(x, all_df['O3'], label=\"O3\", s=15, c=\"blue\", alpha=0.9)\nax.scatter(x, all_df['NO2'], label=\"NO2\", s=15, c=\"green\", alpha=0.9)\nax.scatter(x, all_df['SO2'], label=\"SO2\", s=15, c=\"orange\", alpha=0.9)\nax.scatter(x, all_df['PM2.5'], label=\"PM2.5\", s=15, alpha=0.9)\nax.scatter(x, all_df['NO'], label=\"NO\", s=15, alpha=0.5)\nax.bar(x, all_df['Cases'], label=\"Cases\", alpha=0.2)\n\n\nplt.legend(loc=10, bbox_to_anchor=(0.5, -0.25), ncol=4, frameon = False, fontsize=15)\nplt.legend()\nax.tick_params(top='off', bottom='on', left='off', right='off', labelleft='on', labelbottom='on')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n\nplt.xlabel(\"countries\")\nplt.ylabel(\"Covid-19 Cases\")\nplt.title(\"Relation Between Covid-19 spreading and Pollutant Gases\")\n\nax.grid(False)\nfig.subplots_adjust(bottom=0.4)\n\n\nplt.show()","ce27c245":"x = list(range(1,81))\ny = list(range(-1200, 2000, 40))\n                 \nfig, ax = plt.subplots(figsize=(19, 15))\nax.set_ylim(-100, 600)                \nax.scatter(x, all_df['PM2.5'], label=\"PM2.5\", s=15, alpha=0.9)\n#ax.scatter(x, all_df['CO'], label=\"CO\", s=15, c='brown', alpha=0.9)\nax.scatter(x, all_df['O3'], label=\"O3\", s=15, alpha=0.9)\nax.scatter(x, all_df['NO2'], label=\"NO2\", s=15, alpha=0.9)\nax.scatter(x, all_df['SO2'], label=\"SO2\", s=15, alpha=0.9)\nax.scatter(x, all_df['PM2.5'], label=\"PM2.5\", s=15, alpha=0.9)\nax.scatter(x, all_df['NO'], label=\"NO\", s=15, alpha=0.9)\n#ax.bar(x, all_df['Cases'], label=\"Cases\")\nax.bar(x, all_df['Deaths'], label=\"Deaths\", alpha=0.2)\n\n#ax.fill_between(x, new_df_gro[\"min\"], new_df_gro[\"max\"], facecolor='gray', alpha=0.1)\nplt.legend(loc=10, bbox_to_anchor=(0.5, -0.25), ncol=4, frameon = False, fontsize=15)\nplt.legend()\nax.tick_params(top='off', bottom='on', left='off', right='off', labelleft='on', labelbottom='on')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n\nplt.xlabel(\"countries\")\nplt.ylabel(\"Covid-19 Death Cases\")\nplt.title(\"Relation Between Covid-19 Death cases and Pollutant Gases\")\n\nax.grid(False)\nfig.subplots_adjust(bottom=0.4)\n\n\nplt.show()","ce296ce0":"ax = all_df.plot.scatter('Cases', 'Deaths', c='CO', s=all_df['CO'], colormap='viridis', legend=True)\n","315aa272":"fg = sns.jointplot(all_df['CO'], all_df['Cases'], alpha=0.4);","a086427d":"all_df.columns","4946f88a":"all_df.sort_values('Deaths', ascending=True)","75efc104":"list(range(0, 600, 80))","7bfb1778":"all_df['critical_label'] = None\nfor h in range(len(all_df['Deaths'])):\n    if all_df['Deaths'][h] >= 0 and all_df['Deaths'][h] <= 80:\n        all_df['critical_label'][h] = 1\n    elif all_df['Deaths'][h] > 80 and all_df['Deaths'][h] <=160:\n        all_df['critical_label'][h] = 2\n    elif all_df['Deaths'][h] > 160 and all_df['Deaths'][h] <=240:\n        all_df['critical_label'][h] = 3\n    elif all_df['Deaths'][h] > 240 and all_df['Deaths'][h] <=320:\n        all_df['critical_label'][h] = 4\n    elif all_df['Deaths'][h] > 320 and all_df['Deaths'][h] <=400:\n        all_df['critical_label'][h] = 5\n    elif all_df['Deaths'][h] > 400:\n        all_df['critical_label'][h] = 6","98ff256d":"all_df['critical_label'].unique()","9ad1ff2a":"all_df[all_df['Deaths']> 330]","ab655178":"all_df = all_df.fillna(0)\nall_df['critical_label'] = all_df['critical_label'].astype(int)","94eb1d6e":"all_df.info()","65188088":"from sklearn.model_selection import train_test_split\nfrom matplotlib import cm\nfrom pandas.plotting import scatter_matrix\nX = all_df[['BC', 'CO', 'NO', 'NO2', 'O3', 'PM10', 'PM2.5', 'SO2']]\ny = all_df['critical_label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\ncmap = cm.get_cmap('gnuplot')\nscatter = pd.plotting.scatter_matrix(X_train, c= y_train, marker = 'o', s=40, hist_kwds={'bins':15}, figsize=(18,18), cmap=cmap)\n","ab65dc33":"# plotting a 3D scatter plot\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\nax.scatter(X_train['NO'], X_train['PM2.5'], X_train['SO2'], c = y_train, marker = 'o', s=100)\nax.set_xlabel('NO')\nax.set_ylabel('PM2.5')\nax.set_zlabel('SO2')\nax.legend()\nplt.show()","fb4ae183":"fig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\nax.scatter(X_train['NO2'], X_train['PM10'], X_train['O3'], c = y_train, marker = 'o', s=100)\nax.set_xlabel('NO2')\nax.set_ylabel('PM10')\nax.set_zlabel('O3')\nax.legend()\nplt.show()","b7b207ed":"fig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\nax.scatter(X_train['BC'], X_train['CO'], X_train['CO'], c = y_train, marker = 'o', s=100)\nax.set_xlabel('BC')\nax.set_ylabel('CO')\nax.set_zlabel('O3')\nax.legend()\nplt.show()","beb595ea":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)","2637bcb0":"knn.fit(X_train, y_train)","17545468":"knn.score(X_test, y_test)","a1636262":"critical_cases_prediction = knn.predict([[0, 0, 0, 0, 0, 0, 0, 0]])\nprint('level of Danger: {}'.format(critical_cases_prediction[0]))","2db3f206":"critical_cases_prediction = knn.predict([[0, 1486.918750, 0, 17.513750, 5.990000, 75.828000, 26.322857, 21.507500]])\nprint('level of Danger: {}'.format(critical_cases_prediction[0]))","8e3bd4a7":"critical_cases_prediction = knn.predict([[ 0.36659, 0, 0.02571, 0, 10.333333, 11.000000, 0, 11657.40]])\nprint('level of Danger: {}'.format(critical_cases_prediction[0]))","07d13a2f":"### If the country has zero in all of pollutant gases ['BC', 'CO', 'NO', 'NO2', 'O3', 'PM10', 'PM2.5', 'SO2']\n### level of danger from 1 to 5 ( 1 is the loest and 5 is the highest)","59454427":"### Sources link:\nCovid-19 Cases\n\nhttps:\/\/covid19.who.int\/table\n\nPollutant gases \n\nhttps:\/\/public.opendatasoft.com\/explore\/dataset\/openaq\/export\/?disjunctive.city&disjunctive.location&disjunctive.measurements_parameter\n\n-to get the Molecular Weight for converting from ppm to MG\/M3:\n\nhttps:\/\/www.breeze-technologies.de\/blog\/air-pollution-how-to-convert-between-mgm3-%C2%B5gm3-ppm-ppb\/\n\nhttps:\/\/www.teesing.com\/en\/page\/library\/tools\/ppm-mg3-converter\n\nhttps:\/\/www3.epa.gov\/region1\/airquality\/pm-aq-standards.html\n\n\n### Region and Domain \nStudy for 80 countries\n\n'Afghanistan', 'Andorra', 'Antigua and Barbuda', 'Argentina',\n'Australia', 'Austria', 'Bahrain', 'Bangladesh', 'Belgium',\n'Bosnia and Herzegovina', 'Brazil', 'Bulgaria', 'Canada', 'Chad',\n'Chile', 'China', 'Colombia', 'Croatia', 'Cyprus', 'Denmark', 'Ecuador'\n'Estonia', 'Ethiopia', 'Finland', 'France', 'Germany', 'Ghana',\n'Greece', 'Guatemala', 'Guinea', 'Hungary', 'Iceland', 'India',\n'Indonesia', 'Iraq', 'Ireland', 'Italy', 'Jordan', 'Kazakhstan',\n'Kyrgyzstan', 'Latvia', 'Lithuania', 'Luxembourg', 'North Macedonia',\n'Mali', 'Malta', 'Mexico', 'Mongolia', 'Morocco', 'Myanmar', 'Nepal',\n'Netherlands', 'Norway', 'Pakistan', 'Peru', 'Poland', 'Portugal',\n'Romania', 'Rwanda', 'Saudi Arabia', 'Serbia', 'Montenegro', 'Slovakia'\n'Slovenia', 'South Africa', 'Spain', 'Sri Lanka', 'Sudan', 'Sweden',\n'Switzerland', 'Tajikistan', 'Thailand', 'Turkmenistan',\n'Russian Federation', 'Uganda', 'United Arab Emirates',\n'The United Kingdom', 'United States of America', 'Uzbekistan',\n'Viet Nam'.\n\n### Research Question:\nIs there a relation between pollutant gases and Covid-19?\n \n\n\n### Discussion:\nSome how the graphs looks like it\u2019s more likely to have a death case when the country has high pollutant gases especially when the country has more quantity from (SO2, O3, NO2), however it\u2019s not that much clear picture as the data is quate small than giving a confirmed fact, it\u2019s only 80 countries.\n\nThe country Covid-19 cases and death cases from WHO website is a cumulative total per 100000 population, the air pollutant gas data had 2 kind of measurement value first is PPM and second is \u00b5g\/m\u00b3, hence I changed all to \u00b5g\/m\u00b3 and took the average for the last 2 years.\n\nThe country which has low pollutant gases average more likely to have low Covid-19 cases and low death cases for example:\n\nAfghanistan the only pollutant gas average id for PM2.5 gas is (-431.5 \u00b5g\/m\u00b3)  and death cases is 18.59 (cumulative total per 100000 population), but for United States of America has (BC: 0.858, CO: 0.390585, NO: 0.008618, NO2: 0.020526, O3: 0.044527, PM10: 21.123515, PM2.5: 8.084504, SO2: 0.001204 \u00b5g\/m\u00b3) hence the Covid-19 cases 13416.39, and death cases 216.06 (cumulative total per 100000 population).\n","9178879b":"### If the country has high values in some of pollutant gases ['BC', 'CO', 'NO', 'NO2', 'O3', 'PM10', 'PM2.5', 'SO2']"}}