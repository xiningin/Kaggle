{"cell_type":{"a744bb34":"code","23d88de8":"code","c1479e6d":"code","14105f0c":"code","b2475a81":"code","3691f482":"code","a8c0b030":"code","8870305b":"code","59aa06cf":"code","57dafc12":"code","a7d732dd":"code","66c38ad8":"code","23ab982a":"code","9a51e013":"code","b8e0e92f":"code","700706cc":"code","0fc127cb":"code","58c4ec1e":"code","7f0ae5c3":"code","59c1b8e8":"code","8dc929da":"code","f9e4596e":"code","42a405b8":"code","5c78ed7d":"code","0b9cd350":"code","cc250646":"code","a9572807":"code","2ba3e85a":"code","0543990c":"code","0417e196":"code","a06c2395":"code","b0da269d":"code","2f5bccd0":"code","8d73012c":"code","a6586d8c":"code","6597463a":"code","b979922b":"code","2293044c":"code","85fe939c":"code","6e1727ce":"code","986b5dbd":"code","f772c00e":"code","5b12ef1b":"code","49901c6c":"code","41840f48":"code","275fcc1a":"code","d990743f":"code","cc9fc3db":"code","ecc83f77":"code","35e7d53b":"code","029ed4b9":"code","03083ef7":"code","685e1abb":"code","2b7c01cb":"code","a4d6bf8c":"code","3ff2b58b":"code","ab8da6c0":"code","427049d3":"code","7f700b7d":"code","1770e9fb":"code","eae4d9d3":"code","652dfbff":"code","20cce82d":"code","df5fd823":"code","6be762ee":"code","9e641ee3":"code","cfb901b1":"code","9b82d3eb":"code","7d7a8a53":"code","3026119a":"code","262fbfaa":"code","671a16e6":"code","9fa6f1e3":"code","a815ee14":"code","93cf3d1e":"code","87351d21":"code","2b547a87":"code","e5164183":"code","de7d8c22":"code","12261edd":"code","b87cf4da":"code","dbf2a19e":"code","975137bc":"code","abff4def":"code","824241fe":"code","73274c73":"code","73e7670f":"code","3b75132c":"code","b8c342b8":"code","efda5886":"code","0afdc88a":"code","5eff035e":"code","0bb19c3b":"code","9fc3a4e9":"code","fcfa2b15":"code","afd0173d":"code","c32899e1":"code","85624fc7":"code","fb8afdae":"code","51789c64":"code","dc91ab4d":"markdown","a9ee1e0b":"markdown","aefcfa9d":"markdown","3ff45590":"markdown","930dd91c":"markdown","b7666408":"markdown","a13e255b":"markdown"},"source":{"a744bb34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","23d88de8":"# Import all of them \nsales=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\", parse_dates=True, squeeze=True)\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nitem_cat=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitem=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nsub=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nshops=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ntest=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")\n","c1479e6d":"from __future__ import print_function\nimport os\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf \nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smtsa","14105f0c":"sales.head()","b2475a81":"ts=sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nplt.figure(figsize=(16,8))\nplt.title('Total Sales of the company')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nplt.plot(ts);","3691f482":"plt.figure(figsize=(5.5, 5.5))\nts.plot(color='b')\nplt.title('Monthly item sold')\nplt.xlabel('Monthly')\nplt.ylabel('Sales')\nplt.xticks(rotation=30)\n","a8c0b030":"from sklearn.linear_model import LinearRegression\ntrend_model = LinearRegression(normalize=True, fit_intercept=True)\ntrend_model.fit(np.array(ts.index).reshape((-1,1)), ts.values)\nprint('Trend model coefficient={} and intercept={}'.format(trend_model.coef_[0], trend_model.intercept_) \n)","8870305b":"residuals = np.array(ts.values) - trend_model.predict(np.array(ts.index).reshape((-1,1)))\nplt.figure(figsize=(5.5, 5.5))\npd.Series(data=residuals, index=ts.index).plot(color='b')\nplt.title('Residuals of trend model for sales')\nplt.xlabel('monthly')\nplt.ylabel('sales')\nplt.xticks(rotation=30)\n","59aa06cf":"ts= pd.DataFrame(ts)","57dafc12":"ts.index.size","a7d732dd":"len(residuals)","66c38ad8":"ts['Residuals'] = residuals","23ab982a":"sa= sales.groupby('date_block_num')['date'].apply(np.copy)","9a51e013":"sa= sa.map(lambda x: x[0])","b8e0e92f":"ts['year']= (pd.to_datetime(sa)).dt.year","700706cc":"ts.shape","0fc127cb":"sales.shape","58c4ec1e":"ts.tail()","7f0ae5c3":"seasonal_sub_series_data = ts.groupby(by=['year'])['Residuals'].aggregate([np.mean, np.std]) ","59c1b8e8":"seasonal_sub_series_data.columns = ['yearly Mean', 'yearly Standard Deviation']","8dc929da":"seasonal_sub_series_data","f9e4596e":"plt.figure(figsize=(5.5, 5.5))\nseasonal_sub_series_data['yearly Mean'].plot(color='b')\nplt.title('yearly Mean of Residuals')\nplt.xlabel('Time')\nplt.ylabel('sales')\nplt.xticks(rotation=30)\n","42a405b8":"plt.figure(figsize=(5.5, 5.5))\nseasonal_sub_series_data['yearly Standard Deviation'].plot(color='b')\nplt.title('yearly Standard Deviation of Residuals')\nplt.xlabel('Time')\nplt.ylabel('sales')\nplt.xticks(rotation=30)\n","5c78ed7d":"import seaborn as sns","0b9cd350":"plt.figure(figsize=(5.5, 5.5))\ng = sns.boxplot(data=ts, y='Residuals', x='year')\ng.set_title('yearly Mean of Residuals')\ng.set_xlabel('Time')\ng.set_ylabel('sales')\n","cc250646":"ts.index.size","a9572807":"lag = range(0,34)\nacf = []\nfor l in lag:\n    acf.append(ts['item_cnt_day'].autocorr(l))","2ba3e85a":"plt.figure(figsize=(5.5, 5.5))\nplt.plot(acf, marker='.', color='b')\nplt.title('Autocorrelation function for sales')\nplt.xlabel('Lag in terms of number of months')\nplt.ylabel('Autocorrelation function')\n","0543990c":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf","0417e196":"#Plot autocorrelation and confidence intervals using the plot_acf function\nplt.figure(figsize=(5.5, 5.5))\nplot_acf(ts['item_cnt_day'], lags=30)\n","a06c2395":"#Plot autocorrelation and confidence intervals using the plot_acf function\nplt.figure(figsize=(5.5, 5.5))\nplot_pacf(ts['item_cnt_day'], lags=30)\n","b0da269d":"from statsmodels.tsa import stattools","2f5bccd0":"adf_result = stattools.adfuller(ts['item_cnt_day'], autolag='AIC')","8d73012c":"print('p-val of the ADF test in sales:', adf_result[1])","a6586d8c":"ts['5-month Moving Avg'] = ts['item_cnt_day'].rolling(5).mean()","6597463a":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(2,1,1)\nts['item_cnt_day'].plot(ax=ax, color='b')\nax.set_title('sales during Oct2013-Oct2015')\nax = fig.add_subplot(2,1,2)\nts['5-month Moving Avg'].plot(ax=ax, color='r')\nax.set_title('5-month Moving Average')\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=2.0)\n","b979922b":"MA2 = ts['item_cnt_day'].rolling(window=2).mean()\nTwoXMA2 = MA2.rolling(window=2).mean()\n\nMA4 = ts['item_cnt_day'].rolling(window=4).mean()\nTwoXMA4 = MA4.rolling(window=2).mean()\n\nMA3 = ts['item_cnt_day'].rolling(window=3).mean()\nThreeXMA3 = MA3.rolling(window=3).mean()","2293044c":"MA2 = MA2.loc[~pd.isnull(MA2)]\nTwoXMA2 = TwoXMA2.loc[~pd.isnull(TwoXMA2)]\n\nMA4 = MA4.loc[~pd.isnull(MA4)]\nTwoXMA4 = TwoXMA4.loc[~pd.isnull(TwoXMA4)]\n\nMA3 = MA3.loc[~pd.isnull(MA3)]\nThreeXMA3 = TwoXMA4.loc[~pd.isnull(ThreeXMA3)]","85fe939c":"f, axarr = plt.subplots(3, sharex=True)\nf.set_size_inches(5.5, 5.5)\n\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=axarr[0])\nMA2.plot(color='r', linestyle = '-', ax=axarr[0])\nTwoXMA2.plot(color='r', linestyle = '--', ax=axarr[0])\naxarr[0].set_title('2 month MA & 2X2 month MA')\n\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=axarr[1])\nMA4.plot(color='g', linestyle = '-', ax=axarr[1])\nTwoXMA4.plot(color='g', linestyle = '--', ax=axarr[1])\naxarr[1].set_title('4 month MA & 2X4 month MA')\n\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=axarr[2])\nMA3.plot(color='k', linestyle = '-', ax=axarr[2])\nThreeXMA3.plot(color='k', linestyle = '--', ax=axarr[2])\nplt.xticks(rotation=45)\naxarr[2].set_title('3 month MA & 3X 3month MA')","6e1727ce":"sales['date']= pd.to_datetime(sales['date'])","986b5dbd":"sales= sales.set_index('date')","f772c00e":"quaterly = sales['item_cnt_day'].resample('Q')\nquaterly_mean = quaterly.mean()\n","5b12ef1b":"type(quaterly_mean)","49901c6c":"quaterly_mean.head()","41840f48":"semi = sales['item_cnt_day'].resample('SM')\nsemi_mean = semi.mean()","275fcc1a":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(1,1,1)\n\nsemi_mean.plot(ax=ax, color='b')\nquaterly_mean.plot(ax=ax, color='r')\n\nax.set_title('semi-monthly sales (blue) & quaterly Mean (red)')\nax.set_xlabel('monthly')\nax.set_ylabel('sales')","d990743f":"quater_mean = ts['item_cnt_day'].rolling(5).mean()\nquater_mean.dropna(inplace= True)","cc9fc3db":"quater_std = ts['item_cnt_day'].rolling(5).std()\n","ecc83f77":"quater_std.dropna(inplace= True)","35e7d53b":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(1,1,1)\n\nquater_mean.plot(ax=ax, color='b')\nquater_std.plot(ax=ax, color='r')\n\nax.set_title('quater statistics: Mean (blue) & Std. Dev. (red)')\n","029ed4b9":"adf_result = stattools.adfuller(quater_mean, autolag='AIC')\nprint('p-val of the ADF test in sales:', adf_result[1])","03083ef7":"semi_mean.dropna(inplace= True)\nquaterly_mean.dropna(inplace= True)\n","685e1abb":"adf_result = stattools.adfuller(semi_mean, autolag='AIC')\nprint('p-val of the ADF test in sales:', adf_result[1])","2b7c01cb":"adf_result = stattools.adfuller(quaterly_mean, autolag='AIC')\nprint('p-val of the ADF test in sales:', adf_result[1])","a4d6bf8c":"adf_result = stattools.adfuller(ts['item_cnt_day'], autolag='AIC')\nprint('p-val of the ADF test in sales:', adf_result[1])\n","3ff2b58b":"plt.figure(figsize=(5.5, 5.5))\nplot_acf(semi_mean, lags=45)\n","ab8da6c0":"plt.figure(figsize=(5.5, 5.5))\nplot_pacf(semi_mean, lags=45)\n","427049d3":"MA4 = ts['item_cnt_day'].rolling(window=4).mean()\nTwoXMA4 = MA4.rolling(window=2).mean()\nTwoXMA4 = TwoXMA4.loc[~pd.isnull(TwoXMA4)]","7f700b7d":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(1,1,1)\nts['item_cnt_day'].plot(ax=ax, color='b', linestyle='-')\nTwoXMA4.plot(ax=ax, color='r', linestyle='-')\nplt.xticks(rotation=60)\nax.set_title('monthly sales  and 2X4 quarter sales')","1770e9fb":"residuals = ts['item_cnt_day']-TwoXMA4\nresiduals = residuals.loc[~pd.isnull(residuals)]","eae4d9d3":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(1,1,1)\nresiduals.plot(ax=ax, color='b', linestyle='-')\nplt.xticks(rotation=60)\nax.set_title('Residuals in Quaterly sales')\n","652dfbff":"from pandas.plotting import autocorrelation_plot","20cce82d":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(2,2,2)\nautocorrelation_plot(residuals, ax=ax)\nax.set_title('ACF of Residuals in Quaterly sales time series')\n\n","df5fd823":"residuals_qtr_diff = residuals.diff(4)\nresiduals_qtr_diff = residuals_qtr_diff.loc[~pd.isnull(residuals_qtr_diff)]","6be762ee":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(1,1,1)\nautocorrelation_plot(residuals_qtr_diff, ax=ax)\nax.set_title('ACF of Quaterly Differenced Residuals')\n","9e641ee3":"first_order_diff = ts['item_cnt_day'].diff(1)","cfb901b1":"fig, ax = plt.subplots(2, sharex=True)\nfig.set_size_inches(5.5, 5.5)\nts['item_cnt_day'].plot(ax=ax[0], color='b')\nax[0].set_title('sales values during oct 2013-oct 2015')\nfirst_order_diff.plot(ax=ax[1], color='r')\nax[1].set_title('First-order differences of sales values during oct 2013-oct 2015')","9b82d3eb":"fig, ax = plt.subplots(2, sharex=True)\nfig.set_size_inches(5.5, 5.5)\nautocorrelation_plot(ts['item_cnt_day'], color='b', ax=ax[0])\nax[0].set_title('ACF of monthly sales values')\nautocorrelation_plot(first_order_diff.iloc[1:], color='r', ax=ax[1])\nax[1].set_title('ACF of first differences of monthly sales values')\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=2.0)\n","7d7a8a53":"acf_sales, confint_sales, qstat_sales, pvalues_sales = stattools.acf(ts['item_cnt_day'],\n                                                                 unbiased=True,\n                                                                 nlags=20,\n                                                                 qstat=True,\n                                                                 alpha=0.05)","3026119a":"alpha = 0.05\nfor l, p_val in enumerate(pvalues_sales):\n    if p_val > alpha:\n        print('Null hypothesis is accepted at lag = {} for p-val = {}'.format(l, p_val))\n    else:\n        print('Null hypothesis is rejected at lag = {} for p-val = {}'.format(l, p_val))","262fbfaa":"acf_first_diff, confint_first_diff, qstat_first_diff, pvalues_first_diff = stattools.acf(first_order_diff.iloc[1:],\n                                                                                         unbiased=True,\n                                                                                         nlags=20,\n                                                                                         qstat=True,\n                                                                                         alpha=0.05)","671a16e6":"alpha = 0.05\nfor l, p_val in enumerate(pvalues_first_diff):\n    if p_val > alpha:\n        print('Null hypothesis is accepted at lag = {} for p-val = {}'.format(l, p_val))\n    else:\n        print('Null hypothesis is rejected at lag = {} for p-val = {}'.format(l, p_val))","9fa6f1e3":"from statsmodels.tsa import seasonal","a815ee14":"decompose_model = seasonal.seasonal_decompose(ts.item_cnt_day.tolist(), freq=12, model='additive')","93cf3d1e":"fig, axarr = plt.subplots(4, sharex=True)\nfig.set_size_inches(5.5, 5.5)\n\nts['item_cnt_day'].plot(ax=axarr[0], color='b', linestyle='-')\naxarr[0].set_title('Monthly sales')\n\npd.Series(data=decompose_model.trend, index=ts.index).plot(color='r', linestyle='-', ax=axarr[1])\naxarr[1].set_title('Trend component in monthly sales')\n\npd.Series(data=decompose_model.seasonal, index=ts.index).plot(color='g', linestyle='-', ax=axarr[2]) \naxarr[2].set_title('Seasonal component in monthly sales')\n\npd.Series(data=decompose_model.resid, index=ts.index).plot(color='k', linestyle='-', ax=axarr[3])\naxarr[3].set_title('Irregular variations in monthly sales')\n\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=2.0)\nplt.xticks(rotation=10)\n","87351d21":"adf_result = stattools.adfuller(decompose_model.resid[np.where(np.isfinite(decompose_model.resid))[0]], autolag='AIC')","2b547a87":"print('p-val of the ADF test on irregular variations in employment data:', adf_result[1])","e5164183":"decompose_model = seasonal.seasonal_decompose(ts.item_cnt_day.tolist(), freq=12, model='multiplicative') ","de7d8c22":"fig, axarr = plt.subplots(4, sharex=True)\nfig.set_size_inches(5.5, 5.5)\n\nts['item_cnt_day'].plot(ax=axarr[0], color='b', linestyle='-')\naxarr[0].set_title('Monthly sales')\n\naxarr[1].plot(decompose_model.trend, color='r', linestyle='-')\naxarr[1].set_title('Trend component in monthly sales')\n\naxarr[2].plot(decompose_model.seasonal, color='g', linestyle='-')\naxarr[2].set_title('Seasonal component in monthly sales')\n\naxarr[3].plot(decompose_model.resid, color='k', linestyle='-')\naxarr[3].set_title('Irregular variations in monthly sales')\n\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=2.0)\nplt.xticks(rotation=10)\n","12261edd":"adf_result = stattools.adfuller(decompose_model.resid[np.where(np.isfinite(decompose_model.resid))[0]], autolag='AIC')","b87cf4da":"print('p-val of the ADF test on irregular variations in sales data:', adf_result[1])","dbf2a19e":"def double_exp_smoothing(x, alpha, beta):\n    yhat = [x[0]]\n    for t in range(1, len(x)):\n        if t==1:\n            F, T= x[0], x[1] - x[0]\n        F_n_1, F = F, alpha*x[t] + (1-alpha)*(F+T)\n        T=beta*(F-F_n_1)+(1-beta)*T\n        yhat.append(F+T)\n    return yhat","975137bc":"ts['DEF00'] = double_exp_smoothing(ts['item_cnt_day'],0, 0)\nts['DEF01'] = double_exp_smoothing(ts['item_cnt_day'],0, 1)\nts['DEF10'] = double_exp_smoothing(ts['item_cnt_day'],1, 0)\nts['DEF11'] = double_exp_smoothing(ts['item_cnt_day'],1, 1)","abff4def":"fig = plt.figure(figsize=(10, 8))\nfig.subplots_adjust(hspace=.5, wspace=.5)\n\nax = fig.add_subplot(2,2,1)\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=ax)\nts['DEF00'].plot(color='r', linestyle = '--', ax=ax)\nax.set_title('Alpha 0 and Beta 0')\n\nax = fig.add_subplot(2,2,2)\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=ax)\nts['DEF01'].plot(color='r', linestyle = '--', ax=ax)\nax.set_title('Alpha 0 and Beta 1')\n\nax = fig.add_subplot(2,2,3)\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=ax)\nts['DEF10'].plot(color='r', linestyle = '--', ax=ax)\nax.set_title('TES: alpha=1, beta=0')\n\nax = fig.add_subplot(2,2,4)\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=ax)\nts['DEF11'].plot(color='r', linestyle = '--', ax=ax)\nax.set_title('TES: alpha=1, beta=1')","824241fe":"def single_exp_smoothing(x, alpha):\n    F = [x[0]]\n    for t in range(1, len(x)):\n        F.append(alpha * x[t] + (1 - alpha) * F[t-1])\n    return F\nts['Single_Exponential_Forecast'] = single_exp_smoothing(ts['item_cnt_day'], 1)","73274c73":"fig = plt.figure(figsize=(5.5, 5.5))\nax = fig.add_subplot(2,1,1)\nfig.subplots_adjust(hspace=.5)\nts['Single_Exponential_Forecast'].plot(ax=ax)\nax.set_title('Single Exponential Smoothing')\nax = fig.add_subplot(2,1,2)\nts['DEF10'].plot(ax=ax, color='r')\nax.set_title('Double Smoothing Forecast')","73e7670f":"f, axarr = plt.subplots(2, sharex=True)\nf.set_size_inches(5.5, 5.5)\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=axarr[0])\nts['DEF10'].plot(color='r', linestyle = '--', ax=axarr[0])\naxarr[0].set_title('Actual Vs Double Smoothing Forecasting')\n\nts['item_cnt_day'].plot(color='b', linestyle = '-', ax=axarr[1])\nts['Single_Exponential_Forecast'].plot(color='r', linestyle = '--', ax=axarr[1])\naxarr[1].set_title('Actual Vs Single Smoothing Forecasting')","3b75132c":"import statsmodels.tsa.api as smtsa  ","b8c342b8":"ar1model = smtsa.ARMA(ts['item_cnt_day'].tolist(), order=(1, 0))\nar1=ar1model.fit(maxlag=30, method='mle', trend='nc')\nar1.summary()","efda5886":"arma_obj = smtsa.ARMA(ts['item_cnt_day'].tolist(), order=(1, 1)).fit(maxlag=20, method='mle', trend='nc') ","0afdc88a":"arima_obj = ARIMA(ts['item_cnt_day'].tolist(), order=(0,2,1))\narima_obj_fit = arima_obj.fit(disp=0)\narima_obj_fit.summary()","5eff035e":"pred=np.append([0,0],arima_obj_fit.fittedvalues.tolist())\nts['ARIMA']=pred\ndiffval=np.append([0,0], arima_obj_fit.resid+arima_obj_fit.fittedvalues)\nts['diffval']=diffval","0bb19c3b":"x = sm.qqplot(arima_obj_fit.resid, line='s')","9fc3a4e9":"f, axarr = plt.subplots(1, sharex=True)\nf.set_size_inches(5.5, 5.5)\nts['diffval'].iloc[2:].plot(color='b', linestyle = '-', ax=axarr)\nts['ARIMA'].iloc[2:].plot(color='r', linestyle = '--', ax=axarr)\naxarr.set_title('ARIMA(0,2,1)')\nplt.xlabel('Index')\nplt.ylabel('Closing')","fcfa2b15":"mod = sm.tsa.statespace.SARIMAX(ts['item_cnt_day'], trend='n')\nsarimax= mod.fit()\nsarimax.summary()","afd0173d":"f, err, ci=arima_obj_fit.forecast(30)\nplt.plot(f)\nplt.plot(ci)\nplt.xlabel('Forecasting Index')\nplt.ylabel('Forecasted value')","c32899e1":"aicVal=[]\nfor ari in range(1, 3):\n    for maj in range(0,3):\n        arma_obj = smtsa.ARMA(ts.item_cnt_day.tolist(), order=(ari, maj)).fit(maxlag=30, method='mle', trend='nc') \n        aicVal.append([ari, maj, arma_obj.aic])","85624fc7":"aicVal","fb8afdae":"arma_obj_fin = smtsa.ARMA(ts.item_cnt_day.tolist(), order=(1, 1)).fit(maxlag=30, method='mle', trend='nc') \nts['ARMA']=arma_obj_fin.predict()\narma_obj_fin.summary()","51789c64":"f, axarr = plt.subplots(1, sharex=True)\nf.set_size_inches(5.5, 5.5)\nts['item_cnt_day'].iloc[1:].plot(color='b', linestyle = '-', ax=axarr)\nts['ARMA'].iloc[1:].plot(color='r', linestyle = '--', ax=axarr)\naxarr.set_title('ARMA(1,1)')\nplt.xlabel('Index')\nplt.ylabel('sales')","dc91ab4d":"\nLet us check if at confidence level 95% (alpha=0.05) if the null hypothesis is rejected at any of the lags\n","a9ee1e0b":"The above results show that ACF is essentially random in the differenced sales values for lags 0 to 7","aefcfa9d":"\nLet us check if at confidence level of 95% (alpha = 0.05) ,if the null hypothesis is rejected at any of the lags\n","3ff45590":"\nLet us obtain the confidence intervals, Ljung-Box Q-statistics and p-values for the original monthly sales values\n","930dd91c":"\nThe above results show statistically significant ACF in the original monthly sales values\n","b7666408":"\nLet us obtain the confidence intervals, Ljung-Box Q-statistics and p-values for the differenced sales  values\n","a13e255b":"Seasonal adjustment"}}