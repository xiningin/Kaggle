{"cell_type":{"72f6c666":"code","307c9e88":"code","9ad18cc7":"code","4ad1ad1f":"code","50f815f3":"code","c5cb9523":"code","0f1d5fd1":"code","4d491b0d":"code","1b73e6f7":"code","a76bc914":"code","fd5328f3":"code","cb941979":"code","8e93eb44":"code","1d43d216":"code","9a531781":"code","3194a733":"code","759737f7":"code","76086185":"code","4f71b1c0":"code","7e0e1490":"code","ab47fdd1":"code","faa2f6be":"code","35139ef2":"code","f7664559":"code","084af93b":"code","4aa2c64a":"code","eae5165e":"code","fee683d3":"code","03030658":"code","136ea89f":"code","9c26b857":"code","eca40aac":"code","0cb5a47e":"code","4fca5c35":"code","bddecedb":"code","e2c88526":"code","073bc9a7":"code","05f2c382":"code","1b2c7bff":"code","80e9d096":"code","0548af8b":"code","255deb17":"code","6c0f53f6":"code","008cb255":"code","1cb90a05":"code","1232d6f6":"code","fa8e56ff":"code","9d55563f":"code","12cc5f6b":"code","79e737f3":"code","292e3882":"code","be3f3c7e":"code","77aa0170":"code","922b2323":"code","29829190":"code","09685b56":"code","58ec1d6f":"code","6579afeb":"code","fc389410":"code","ba4fbd5a":"code","a6078372":"code","6ee49cfc":"code","27900802":"code","88292924":"code","0966ee50":"code","542e27f5":"code","56a304dd":"code","11ae6308":"code","4a00e418":"code","90caf028":"code","87d0a8a3":"code","5f73ea3e":"code","d2777a65":"code","777bfba4":"code","751794f6":"code","4f9287f6":"code","7157cf64":"code","23cc1c69":"code","39742c48":"code","b1bb1abd":"code","c017589d":"code","590c330a":"code","5b84a8c5":"code","8e3e85e5":"code","bd01a519":"code","d6940c5d":"code","db5a1b7f":"code","69dea4fb":"code","ad6c8f69":"code","14119678":"code","ddb21e7b":"code","7d6268e6":"code","2f2d2deb":"code","c5c7ba63":"code","0b92af65":"code","6e7ac5ec":"code","570a3071":"code","8e57a4f1":"code","848d2bb4":"code","64e1d985":"code","7f4107bf":"code","e6eee487":"code","51fe254e":"code","823397fb":"code","c4c2ef16":"code","6bfd57e2":"code","5139bb57":"code","e1a2ea46":"code","4b6c26fe":"markdown","a71b98c1":"markdown","1efcf48b":"markdown","d6d17463":"markdown","928dff76":"markdown","22d290c7":"markdown","7d5a501a":"markdown","c546a08c":"markdown","a12c0532":"markdown","059c2633":"markdown","679da776":"markdown","f7b83c00":"markdown","b3014bc0":"markdown","0c4d0f32":"markdown","3a7bae62":"markdown","41999b05":"markdown","8c7c77b4":"markdown","3b427888":"markdown","0be63805":"markdown","aaebf397":"markdown","c4b40e74":"markdown","d103e8d0":"markdown","6aa2373c":"markdown","af5f4cc5":"markdown","b26cd69a":"markdown","dae5f8d0":"markdown","6f97d8f2":"markdown","7e55ee09":"markdown","394088fc":"markdown","dbd0b9ba":"markdown","72b885a6":"markdown","52c527b3":"markdown","32b547e3":"markdown","93398d2f":"markdown","83212496":"markdown","5afbfa4d":"markdown","2b1925f0":"markdown","7d063511":"markdown","2d50be3c":"markdown","75dd957b":"markdown","a0598a54":"markdown","7084c227":"markdown","9daad631":"markdown","5d686460":"markdown","47b8c820":"markdown","6a56e46d":"markdown","e3c4c0ec":"markdown","b4ef6307":"markdown","93818ef4":"markdown","845d7baf":"markdown"},"source":{"72f6c666":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# print(os.listdir(\"..\/input\/avani24\"))\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","307c9e88":"import pandas as pd # Data processing\nimport numpy as np # For Linear Algebra Calculation","9ad18cc7":"heart_disease = pd.read_csv('..\/input\/heart\/heart.csv')\nheart_disease.tail()","4ad1ad1f":"# Find how many variables and objects in the data set\nheart_disease.shape","50f815f3":"# view the type of data in the data set\nheart_disease.info()","c5cb9523":"heart_disease= heart_disease.rename(columns= {'cp': 'chest_pain_type' , 'trestbps': 'resting_blood_pressure' , 'chol' : 'cholesterol',\n                                             'fbs': 'fasting_blood_sugar' , 'restecg' : 'rest_ecg' ,'thalach' : 'max_heart_rate_achieved',\n                                             'exang' : 'exercise_induced_angina' , 'oldpeak' : 'st_depression' , 'slope' : 'st_slope',\n                                             'ca' : 'num_major_vessels' , 'thal' : 'thalassemia'})","0f1d5fd1":"# View the first 10 rows in data set\nheart_disease.head(10)","4d491b0d":"# View the last 10 rows in the data set\nheart_disease.tail(10)","1b73e6f7":"heart_disease.isnull().sum()","a76bc914":"# Convert Sex Column data\nheart_disease['sex'][heart_disease['sex'] == 0] = 'Female'\nheart_disease['sex'][heart_disease['sex'] == 1] = 'Male'","fd5328f3":"# Convert Chest pain type column data\nheart_disease['chest_pain_type'][heart_disease['chest_pain_type'] == 0] = 'typical angina'\nheart_disease['chest_pain_type'][heart_disease['chest_pain_type'] == 1] = 'atypical angina'\nheart_disease['chest_pain_type'][heart_disease['chest_pain_type'] == 2] = 'non-anginal pain'\nheart_disease['chest_pain_type'][heart_disease['chest_pain_type'] == 3] = 'asymptomatic'","cb941979":"# Convert Fast Blood sugar column\nheart_disease['fasting_blood_sugar'][heart_disease['fasting_blood_sugar'] == 0] = 'lower than 120mg\/ml'\nheart_disease['fasting_blood_sugar'][heart_disease['fasting_blood_sugar'] == 1] = 'greater than 120mg\/ml'","8e93eb44":"# Convert rest_ecg column data\nheart_disease['rest_ecg'][heart_disease['rest_ecg'] == 0] = 'normal'\nheart_disease['rest_ecg'][heart_disease['rest_ecg'] == 1] = 'ST-T wave abnormality'\nheart_disease['rest_ecg'][heart_disease['rest_ecg'] == 2] = 'left ventricular hypertrophy'","1d43d216":"# Convert exercise_included_angina\nheart_disease['exercise_induced_angina'][heart_disease['exercise_induced_angina'] == 0] = 'no'\nheart_disease['exercise_induced_angina'][heart_disease['exercise_induced_angina'] == 1] = 'yes'","9a531781":"# Convert solpe column data\nheart_disease['st_slope'][heart_disease['st_slope'] == 1] = 'upsloping'\nheart_disease['st_slope'][heart_disease['st_slope'] == 2] = 'flat'\nheart_disease['st_slope'][heart_disease['st_slope'] == 3] = 'downsloping'","3194a733":"# convert Thalassemia column data\nheart_disease['thalassemia'][heart_disease['thalassemia'] == 1] = 'normal'\nheart_disease['thalassemia'][heart_disease['thalassemia'] == 2] = 'fixed defect'\nheart_disease['thalassemia'][heart_disease['thalassemia'] == 3] = 'reversable defect'","759737f7":"# View the data set after changing it to Categorical\nheart_disease.head(10)","76086185":"heart_disease.describe().transpose()","4f71b1c0":"# Calaculte on individual column count -Sex\nheart_disease['sex'].value_counts()","7e0e1490":"# Calaculte on individual column count -chest_pain_type\nheart_disease['chest_pain_type'].value_counts()","ab47fdd1":"# Calculate on individual column count - fasting_blood_sugar\nheart_disease['fasting_blood_sugar'].value_counts()","faa2f6be":"# Calculate on individual column count - rest_ecg\nheart_disease['rest_ecg'].value_counts()","35139ef2":"# Calculate on individual column count -exercise_induced_angina\nheart_disease['exercise_induced_angina'].value_counts()","f7664559":"# Calculate on individual column count -st_slope\nheart_disease['st_slope'].value_counts()","084af93b":"# Calculate on individual column count -  thalassemia\nheart_disease['thalassemia'].value_counts()","4aa2c64a":"# Import Libraries\nfrom scipy.stats import skew , kurtosis","eae5165e":"# Calculate Skewnes and Kurtosis on individual columns -Sex\nprint(\"skewness of the age\" , skew(heart_disease['age']))\nprint(\"Kurtosis of Age \", kurtosis(heart_disease['age']))\n","fee683d3":"# Calculate Skewnes and Kurtosis on individual columns - resting_blood_pressure\nprint(\"skewness of the resting_blood_pressure\" , skew(heart_disease['resting_blood_pressure']))\nprint(\"Kurtosis of resting_blood_pressure \", kurtosis(heart_disease['resting_blood_pressure']))","03030658":"# Calculate Skewnes and Kurtosis on individual columns - cholesterol\nprint(\"skewness of the cholesterol\" , skew(heart_disease['cholesterol']))\nprint(\"Kurtosis of cholesterol \", kurtosis(heart_disease['cholesterol']))","136ea89f":"# Calculate Skewnes and Kurtosis on individual columns - max_heart_rate_achieved\nprint(\"skewness of the max_heart_rate_achieved\" , skew(heart_disease['max_heart_rate_achieved']))\nprint(\"Kurtosis of max_heart_rate_achieved \", kurtosis(heart_disease['max_heart_rate_achieved']))","9c26b857":"# Calculate Skewnes and Kurtosis on individual columns - st_depression\nprint(\"skewness of the st_depression\" , skew(heart_disease['st_depression']))\nprint(\"Kurtosis of st_depression \", kurtosis(heart_disease['st_depression']))","eca40aac":"# Import Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0cb5a47e":"fig,ax = plt.subplots(figsize=(5,5))\nax = sns.countplot(heart_disease['age'])\nplt.show()","4fca5c35":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['sex'])\nplt.show()","bddecedb":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['chest_pain_type'])\nplt.show()","e2c88526":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['target'])\nplt.show()","073bc9a7":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['exercise_induced_angina'])\nplt.show()","05f2c382":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['rest_ecg'])\nplt.show()","1b2c7bff":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['st_slope'])\nplt.show()","80e9d096":"fig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(heart_disease['thalassemia'])\nplt.show()","0548af8b":"sns.distplot(heart_disease['age'])\n","255deb17":"heart_disease.head()","6c0f53f6":"sns.distplot(heart_disease['cholesterol'])","008cb255":"sns.distplot(heart_disease['resting_blood_pressure'])","1cb90a05":"sns.distplot(heart_disease['max_heart_rate_achieved'])","1232d6f6":"\nsns.distplot(heart_disease['st_depression'])","fa8e56ff":"\nsns.distplot(heart_disease['num_major_vessels'])","9d55563f":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='sex',y='age',data=heart_disease)\nplt.show()","12cc5f6b":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='age',y='max_heart_rate_achieved',data=heart_disease)\nplt.show()","79e737f3":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='age',y='max_heart_rate_achieved',data=heart_disease)\nplt.show()","292e3882":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='age',y='target',data=heart_disease)\nplt.show()","be3f3c7e":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='age',y='cholesterol',data=heart_disease)\nplt.show()","77aa0170":"sns.distplot(heart_disease['target'])","922b2323":"pd.crosstab(heart_disease.age,heart_disease.target).plot(kind=\"bar\",figsize=(25,8),color=['gold','brown' ])\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Sex')\nplt.ylabel('Frequency')\nplt.show()","29829190":"pd.crosstab(heart_disease.sex,heart_disease.target).plot(kind=\"bar\",figsize=(10,5),color=['cyan','coral' ])\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","09685b56":"sns.pairplot(data=heart_disease)","58ec1d6f":"plt.figure(figsize=(14,10))\nsns.heatmap(heart_disease.corr(),annot=True,cmap='hsv',fmt='.3f',linewidths=2)\nplt.show()","6579afeb":"heart_disease.groupby('chest_pain_type', as_index=False)['target'].mean()","fc389410":"heart_disease.groupby('st_slope',as_index=False)['target'].mean()","ba4fbd5a":"heart_disease.groupby('thalassemia',as_index=False)['target'].mean()","a6078372":"heart_disease.groupby('target').mean()","6ee49cfc":"# Convert the data into categorical data type\nheart_disease.chest_pain_type = heart_disease.chest_pain_type.astype(\"category\")\nheart_disease.exercise_induced_angina = heart_disease.exercise_induced_angina.astype(\"category\")\nheart_disease.fasting_blood_sugar = heart_disease.fasting_blood_sugar.astype(\"category\")\nheart_disease.rest_ecg = heart_disease.rest_ecg.astype(\"category\")\nheart_disease.sex = heart_disease.sex.astype(\"category\")\nheart_disease.st_slope = heart_disease.st_slope.astype(\"category\")\nheart_disease.thalassemia = heart_disease.thalassemia.astype(\"category\")","27900802":"# Dummy values\nheart_disease1 = pd.get_dummies(heart_disease, drop_first=True)\nprint(heart_disease1)","88292924":"heart_disease1.head()","0966ee50":"# Import Libraries\nfrom sklearn.preprocessing import scale\nscale(heart_disease1)","542e27f5":"np.exp(scale(heart_disease1))","56a304dd":"x = heart_disease1.drop(['target'], axis = 1)\ny = heart_disease1.target.values","11ae6308":"# Input values\nx","4a00e418":"# Output Values\ny","90caf028":"# Import Libraries\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.80)","87d0a8a3":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()","5f73ea3e":"# Fit the model\nlogmodel.fit(x_train,y_train)","d2777a65":"# Predict the model\nLR_pred = logmodel.predict(x_test)\nLR_pred","777bfba4":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(LR_pred,y_test))","751794f6":"# Accuracy\nfrom sklearn.metrics import accuracy_score\nLR_accuracy = accuracy_score(LR_pred,y_test)\nLR_accuracy","4f9287f6":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=3)\nclassifier","7157cf64":"# Fit the Model\nclassifier.fit(x_train,y_train)","23cc1c69":"# Predict the Model\nknn_pred = classifier.predict(x_test)\nknn_pred","39742c48":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(knn_pred,y_test))","b1bb1abd":"# Accuracy Score\nfrom sklearn.metrics import accuracy_score\naccuracy_knn=accuracy_score(knn_pred,y_test)\naccuracy_knn","c017589d":"from sklearn.naive_bayes import GaussianNB\nclassifier2 = GaussianNB()\nclassifier2","590c330a":"# Fit the model\nclassifier2.fit(x_train,y_train)","5b84a8c5":"# Predict the model\nNBC_pred = classifier2.predict(x_test)\nNBC_pred","8e3e85e5":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(NBC_pred,y_test))","bd01a519":"# Accuracy\nfrom sklearn.metrics import accuracy_score\nNBC_accuracy = accuracy_score(NBC_pred,y_test)\nNBC_accuracy","d6940c5d":"from sklearn.tree import DecisionTreeClassifier\nclassifier1 = DecisionTreeClassifier(criterion='entropy',random_state=0)\nclassifier1","db5a1b7f":"# Fit the model\nclassifier1.fit(x_train,y_train)","69dea4fb":"# Predict the model\nDT_pred = classifier1.predict(x_test)\nDT_pred","ad6c8f69":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(DT_pred,y_test))","14119678":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_DT = accuracy_score(DT_pred,y_test)\naccuracy_DT","ddb21e7b":"from sklearn.ensemble import RandomForestClassifier\nclassifier3 = RandomForestClassifier(criterion='entropy',random_state=0)\nclassifier3","7d6268e6":"# Fit the model\nclassifier3.fit(x_train,y_train)","2f2d2deb":"# Predict the model\nRF_pred = classifier3.predict(x_test)\nRF_pred","c5c7ba63":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(RF_pred,y_test))","0b92af65":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_RF = accuracy_score(RF_pred,y_test)\naccuracy_RF","6e7ac5ec":"from sklearn.svm import SVC\nclassifier4 = SVC(kernel = 'linear', random_state = 0)\nclassifier4","570a3071":"# Fit the model\nclassifier4.fit(x_train,y_train)","8e57a4f1":"# Predict the model\nSVC_pred = classifier4.predict(x_test)\nSVC_pred","848d2bb4":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(SVC_pred,y_test))","64e1d985":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_SVC = accuracy_score(SVC_pred,y_test)\naccuracy_SVC","7f4107bf":"from sklearn.ensemble import RandomForestClassifier\nclf= RandomForestClassifier()","e6eee487":"parameters = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]\n             }\n","51fe254e":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer, accuracy_score\nclassifier5 = GridSearchCV(clf, parameters, cv=5, scoring='accuracy')\nclassifier5","823397fb":"# Type of scoring used to compare parameter combinations\nacc_scorer = make_scorer(accuracy_score)","c4c2ef16":"\n# Run the grid search\ngrid_obj = GridSearchCV(clf, parameters, scoring=acc_scorer)\ngrid_obj = grid_obj.fit(x_train, y_train)","6bfd57e2":"# Set the clf to the best combination of parameters\nclf = grid_obj.best_estimator_","5139bb57":"# Fit the best algorithm to the data. \nclf.fit(x_train, y_train)","e1a2ea46":"predictions = clf.predict(x_test)\nprint(accuracy_score(y_test, predictions))","4b6c26fe":"# Various Graphical Visualizations","a71b98c1":"# 4. Excercise againist Heart Disease","1efcf48b":"# 4. Target","d6d17463":"# Check if any missing values in the data","928dff76":"# Exploaratory Data Analysis","22d290c7":"# 3. Naive Bayes Classifier (NBC)","7d5a501a":"# Logistic Regression Accuracy Score is : 87%","c546a08c":"# IMPORT NECESSARY LIBRARIES TO READING THE DATA","a12c0532":"# Accuracy Scores for All ML Models:\n# 1. K-Nearest Neighbor : 65 %\n# 2. Decision Trees : 74 %\n# 3. Support Vector Machine : 77 %\n# 4. Naive Bayes Classifier : 80 %\n# 5. Random Forest : 82 %\n# 6. Logistic Regression : 87 %\n# 7. GridSearch CV : 81 %","059c2633":"# Data Cleaning on Categorical Data","679da776":"# 3. Age Vs Heart Rate","f7b83c00":"# KNN Accuracy Score is :65 %","b3014bc0":"# Pairplot","0c4d0f32":"# Split the data as Training and Testing","3a7bae62":"# 7. GridSearchCV Algorithm","41999b05":"# Univariate Analysis","8c7c77b4":"# 6. Support Vector Machine (SVM)","3b427888":"# We can use Logistic Regression model to predict the heart disease.","0be63805":"# 5. Random Forest","aaebf397":"# Build Machine Learning Models","c4b40e74":"# NBC Accuracy Score is : 80%","d103e8d0":"# Change the Object names as meaningfull","6aa2373c":"# 4. Age Vs target","af5f4cc5":"# Decision Tree Classifier Accuracy score is : 74%","b26cd69a":"# Bivariate Analysis","dae5f8d0":"# Distribution of the Target","6f97d8f2":"# Normalize \/ Scale the Data","7e55ee09":"# 1 . Logistic Regression","394088fc":"# Random Forest Classifier Accuracy score is : 82%","dbd0b9ba":"# 4. Decision Tree","72b885a6":"# SVM Accuracy Score is : 77%","52c527b3":"There is no  NAN \/ NA values in the given data set","32b547e3":"# 2. K-Nearest Neighbor (KNN)","93398d2f":"# Engineering Featuring","83212496":"# Skewness and Kurtosis","5afbfa4d":"# Correlation Diagram","2b1925f0":"# Divide the data as input and output","7d063511":"# 1. Age Vs Sex","2d50be3c":"# 1. People getting Heart disease of Aged persons","75dd957b":"It's a clean, easy to understand set of data. However, the meaning of some of the column headers are not obvious. Here's what they mean,\n\n1.age: The person's age in years\n\n2.sex: The person's sex (1 = male, 0 = female)\n\n3.cp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n\n4.trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n\n5.chol: The person's cholesterol measurement in mg\/dl\n\n6.fbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n\n7.restecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n\n8.thalach: The person's maximum heart rate achieved\n\n9.exang: Exercise induced angina (1 = yes; 0 = no)\n\n10.oldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n\n11.slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n\n12.ca: The number of major vessels (0-3)\n\n13.thal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n\n14.target: Heart disease (0 = no, 1 = yes)\n","a0598a54":"# Convert to categorical data using Dummy","7084c227":"# 5. Age Vs Cholestrol","9daad631":"# 7. Slope of Heart Disease","5d686460":"# 3. Chest Pain  type is more of Typical Angina","47b8c820":"# 6. ECG","6a56e46d":"# 2. Most of Male people getting Heart Disease","e3c4c0ec":"# 8. Thalassemia","b4ef6307":"# 2. Age Vs Heart Rate Type","93818ef4":"There is -Ve values in normalized data ,hence we can use exponential of the scaled data","845d7baf":"# GridSearchCV Accuracy Score is : 81 %"}}