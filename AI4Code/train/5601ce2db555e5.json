{"cell_type":{"b6efd284":"code","6aaad0d5":"code","06f70894":"code","1b192405":"code","982942d7":"code","5ec8c812":"code","834b57ce":"code","2b7e17fd":"code","865e18aa":"code","b1817fe6":"code","06414b39":"code","efb0be40":"code","c80485ad":"code","d7e9345b":"code","1dee6209":"code","3684571b":"code","64981cd3":"code","987f7f36":"code","d69ccc20":"markdown","57f72627":"markdown","1e6cf9ba":"markdown","8edb488c":"markdown","9c1c487c":"markdown","120e0987":"markdown","567e6c16":"markdown","64bbabff":"markdown","f39b3156":"markdown","99d69c8d":"markdown"},"source":{"b6efd284":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","6aaad0d5":"df_train = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_train.csv\", header=None)\ndf_test = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_test.csv\", header=None)\ndf_train.head()","06f70894":"# df[187] is y (class 0~4)\nprint(df_train[187].value_counts())\nprint(df_test[187].value_counts())","1b192405":"X_train = df_train.values[:, :-1]\ny_train = df_train.values[:, -1].astype(int)\n\nX_test  = df_test.values[:, :-1]\ny_test  = df_test.values[:, -1].astype(int)\n\nprint(X_train.shape)\nprint(X_test.shape)","982942d7":"X_train = X_train.reshape(X_train.shape[0], 1, X_train.shape[1],1)\nX_test = X_test.reshape(X_test.shape[0], 1, X_test.shape[1],1)\n\nprint(X_train.shape)\nprint(X_test.shape)","5ec8c812":"from tensorflow.keras import utils\ny_train = utils.to_categorical(y_train)\ny_test  = utils.to_categorical(y_test)\n\nprint(y_train.shape)\nprint(y_test.shape)","834b57ce":"input_shape = X_train.shape[1:]\nnum_classes= 5","2b7e17fd":"# Build Model \nfrom tensorflow.keras import models, layers\n\ninputs = layers.Input(shape=input_shape)\nx = layers.Conv2D(16, kernel_size=5, activation='relu', padding='same')(inputs)\n#x = layers.Conv2D(16, kernel_size=5, activation='relu', padding='same')(x)\n#x = layers.MaxPooling2D((2,2), padding='same')(x)\n\nx = layers.Flatten()(x)\nx = layers.Dense(16)(x)\noutputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n\nmodel = models.Model(inputs=inputs, outputs=outputs)\n\nmodel.summary()","865e18aa":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","b1817fe6":"batch_size = 100\nnum_epochs = 10 ","06414b39":"# Train Model\nhistory = model.fit(X_train, y_train, epochs=num_epochs, batch_size=batch_size, validation_data=(X_test, y_test))","efb0be40":"# Save Model\nmodels.save_model(model, 'ecg_arrhythmia.hdf5')","c80485ad":"!pip install tinymlgen","d7e9345b":"from tinymlgen import port\nc_code = port(model, variable_name='ecg_arrhythmia', pretty_print=True, optimize=False) \n\nwith open('ecg_arrhythmia.h', 'w') as f:\n    print(c_code, file=f)","1dee6209":"with open('x_test.h', 'w') as f:\n    print(\"float x_test_dat[187] = {\", file=f)    \n    s=\"    \"\n    for i in range(187):\n        s+=str(X_test[0][0][i][0])+', '\n        if i==186:\n            print(s, file=f) \n        elif (i+1)%8==0:\n            print(s, file=f)\n            s=\"    \"\n    print(\"};\", file=f)\nf.close()","3684571b":"!cat x_test.h","64981cd3":"print(y_test[0])","987f7f36":"plt.plot(X_test[0][0])","d69ccc20":"### export model\n    import tensorflow as tf\n    converter = tf.lite.TFLiteConverter.from_keras_model(model)\n    tflite_model = converter.convert()\n\n    # Save the model to disk\n    open(\"ecg_arrhythmia.tflite\", \"wb\").write(tflite_model)\n    \n    # hex dump\n    !xxd -i ecg_arrhythmia.tflite > ecg_arrhythmia.cc","57f72627":"### *Conv1D not supported by TFLite for Micro, so Conv2D is used, not much difference in code size*","1e6cf9ba":"## TinyML","8edb488c":"## Save Model","9c1c487c":"## Read Dataset","120e0987":"### export a test data","567e6c16":"## Train Model","64bbabff":"## Prepare Dataset","f39b3156":"## Build Model","99d69c8d":"# TinyML ECG Classification"}}