{"cell_type":{"4f3d0f27":"code","b18a61e7":"code","0d5fb94b":"code","cd30fe89":"code","42e15819":"code","d67f8afc":"code","e7cbdf7e":"code","bbbb428f":"code","6494eaee":"code","2ee19819":"code","61efe1b2":"code","2b695134":"code","1ace2f48":"code","88696b1b":"code","37e9684d":"code","b579910a":"code","32479654":"code","95d834b7":"code","48a4e580":"code","4c4210cf":"code","647ebd07":"code","5d2a754a":"code","23f6e4e0":"code","d446d389":"code","437ce876":"code","ba32a5e2":"code","04f8976f":"code","42a4c5f8":"code","86036d22":"code","ccb9dc3e":"code","b5a9adfb":"code","d84aa175":"code","356ecba4":"code","98f1f127":"code","62b7b430":"code","821c19e1":"code","10408fea":"code","422d0fa6":"code","e3fd43b6":"code","56d76085":"code","b5529f04":"markdown","e69d7f61":"markdown","0bb892e1":"markdown","ec656eb9":"markdown","e74be6fc":"markdown","7e66a59a":"markdown","6f206869":"markdown","b004d373":"markdown","a40e8007":"markdown","1989f251":"markdown","fcbbf2e7":"markdown","9d676b01":"markdown","807a97cb":"markdown","d5c60f28":"markdown","14f1067e":"markdown","5c5ad90b":"markdown","0b6d373f":"markdown","e80aa6ed":"markdown","21c78046":"markdown","c248a631":"markdown","706a6ae5":"markdown","a31d054b":"markdown","343346c8":"markdown","e041ceb8":"markdown","ef9e7b3d":"markdown","b3bcef7b":"markdown","45d5dba6":"markdown","dd45ec66":"markdown","516958ba":"markdown","f83d4688":"markdown","149270ce":"markdown","2b560489":"markdown","f97e5e92":"markdown","7d264719":"markdown","844f515c":"markdown","3992b827":"markdown","e58450b0":"markdown","325cccd1":"markdown","02ea98c0":"markdown","ec71e02e":"markdown","1d5e0f37":"markdown","d6b527a3":"markdown","45b29228":"markdown","5257755d":"markdown","f1c9dde2":"markdown","91643010":"markdown","40d6885d":"markdown","9bc9207b":"markdown","052edf8e":"markdown","81d9503b":"markdown","2f3c1e0b":"markdown","e79bd7f1":"markdown","e509cb0a":"markdown","756f7f42":"markdown","a4295432":"markdown"},"source":{"4f3d0f27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b18a61e7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport matplotlib as mpl\nfrom matplotlib.patches import Circle, Rectangle, Arc\nimport seaborn as sns\nplt.style.use('seaborn-dark-palette')\nmypal = plt.rcParams['axes.prop_cycle'].by_key()['color'] # Grab the color pal\nimport os #\u7528\u6765\u5411Python\u7a0b\u5e8f\u63d0\u4f9b\u8fd0\u884c\u73af\u5883\uff0c\u7279\u522b\u662f\u5728\u6587\u4ef6\u7cfb\u7edf\u3001\u521b\u5efa\u65b0\u8fdb\u7a0b\u3001\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u7684\u4e00\u4e9b\u4fe1\u606f\uff08\u6bd4\u5982uname)\uff0c\u5e76\u5c4f\u853d\u5404\u79cd\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u7684\u7ec6\u8282\u5dee\u5f02\u3002\nimport gc #garbage collector\u4e3b\u8981\u4f9d\u9760gc\uff08garbage collector\uff09\u6a21\u5757\u7684\u5f15\u7528\u8ba1\u6570\u6280\u672f\u6765\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002\n\nMENS_DIR = '..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament'","0d5fb94b":"MTeams = pd.read_csv(f'{MENS_DIR}\/MDataFiles_Stage1\/MTeams.csv')","cd30fe89":"MTeams.count()","42e15819":"MTeams.head(5)","d67f8afc":"MTeams[MTeams['LastD1Season'] == 2020].count()","e7cbdf7e":"MTeams.sort_values('FirstD1Season').head()","bbbb428f":"MTeams[MTeams['FirstD1Season'] == 1985].count()","6494eaee":"MTeams.sort_values('FirstD1Season', ascending=False).head(5)","2ee19819":"MSeasons = pd.read_csv(f'{MENS_DIR}\/MDataFiles_Stage1\/MSeasons.csv')\nMSeasons.head()","61efe1b2":"MNCAATourneySeeds = pd.read_csv(f'{MENS_DIR}\/MDataFiles_Stage1\/MNCAATourneySeeds.csv')","2b695134":"MNCAATourneySeeds.head()","1ace2f48":"# As Lets join this with the teams data to see some of the past matchups\nMNCAATourneySeeds.merge(MTeams, validate='many_to_one').head()\n#\u5408\u5e76\u65f6\u67094\u79cd\u65b9\u6cd5how = ['left', 'right', 'outer', 'inner']\uff0c\u9ed8\u8ba4\u503chow='inner'\n#validate\uff1a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3aNone\n#\u5982\u679c\u6307\u5b9a\uff0c\u5219\u68c0\u67e5\u5408\u5e76\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\u3002\n#\u201c one_to_one\u201d\u6216\u201c 1\uff1a1\u201d\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u53f3\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 \n#\u201c one_to_many\u201d\u6216\u201c 1\uff1am\u201d\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 \n#\u201c many_to_one\u201d\u6216\u201c m\uff1a1\u201d\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u6b63\u786e\u7684\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 \n#\u201c many_to_many\u201d\u6216\u201c m\uff1am\u201d\uff1a\u5141\u8bb8\uff0c\u4f46\u4e0d\u8fdb\u884c\u68c0\u67e5\u3002","88696b1b":"MRegularSeasonCompactResults = pd.read_csv(f'{MENS_DIR}\/MDataFiles_Stage1\/MRegularSeasonCompactResults.csv')","37e9684d":"# We have the team the won, lost and the score.\nMRegularSeasonCompactResults.head(5)","b579910a":"# Lets Add the winning and losing team names to the results\nMRegularSeasonCompactResults = \\\n    MRegularSeasonCompactResults \\\n    .merge(MTeams[['TeamName', 'TeamID']],\n           left_on='WTeamID',\n           right_on='TeamID',\n           validate='many_to_one') \\\n    .drop('TeamID', axis=1) \\\n    .rename(columns={'TeamName': 'MTeamName'}) \\\n    .merge(MTeams[['TeamName', 'TeamID']],\n           left_on='LTeamID',\n           right_on='TeamID') \\\n    .drop('TeamID', axis=1) \\\n    .rename(columns={'TeamName': 'LTeamName'})","32479654":"MRegularSeasonCompactResults.head()","95d834b7":"MRegularSeasonCompactResults['Score_Diff'] = MRegularSeasonCompactResults['WScore'] - MRegularSeasonCompactResults['LScore']","48a4e580":"plt.style.use('fivethirtyeight')\nMRegularSeasonCompactResults['Score_Diff'] \\\n    .plot(kind='hist',\n          bins=90,\n          figsize=(15, 5),\n          label='Mens',\n          alpha=0.5)\nplt.title('Mens Score Differential')\nplt.xlim(0,60)\nplt.legend()\nplt.show()\n","4c4210cf":"plt.style.use('fivethirtyeight')\nfig, axs = plt.subplots(1, 2, figsize=(15, 5))\nMRegularSeasonCompactResults['counter'] = 1\nMRegularSeasonCompactResults.groupby('MTeamName')['counter'] \\\n    .count() \\\n    .sort_values() \\\n    .tail(20) \\\n    .plot(kind='barh',\n          title='\u2b06\ufe0f Most Regular Season Wins (Mens)',\n          figsize=(15, 8),\n          xlim=(400, 900),\n          color=mypal[0],\n          ax=axs[0])\n\n\n\nMRegularSeasonCompactResults.groupby('MTeamName')['counter'] \\\n    .count() \\\n    .sort_values(ascending=False) \\\n    .tail(20) \\\n    .plot(kind='barh',\n          title='\u2b07\ufe0f Least Regular Season Wins (Mens)',\n          figsize=(15, 8),\n          xlim=(0, 150),\n          color=mypal[1],\n          ax=axs[1])\nplt.tight_layout()\nplt.show()","647ebd07":"team_name = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MTeamSpellings.csv',\n                       encoding='cp1252')\nteam_name = team_name.drop_duplicates(subset=['TeamID'], keep='last').reset_index(drop=True)\nresult = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MNCAATourneyCompactResults.csv')\nresult = result.drop(columns=['WLoc', 'NumOT', 'DayNum'])\nWname = team_name.rename(columns={'TeamNameSpelling':'Wteam_name', 'TeamID':'WTeamID'})\nteam_result = pd.merge(left=result, right=Wname, how='left', on=['WTeamID'])\n\nwin_by_year = team_result.groupby(['Season', 'Wteam_name'])\\\n              ['WScore'].count().reset_index()\\\n              .rename(columns={'Wteam_name':'Team', 'WScore':'Win_matches'})\n              \ndf = win_by_year[win_by_year.Win_matches == win_by_year.Win_matches.max()].drop(columns=['Win_matches']).set_index('Season')\nwin_by_year = win_by_year.groupby(['Team', 'Season']).Win_matches.sum()\\\n              .unstack(fill_value=0).cumsum(axis=1).sort_values(by=2019, ascending=False).head(15)\ncum_win = pd.melt(win_by_year, value_vars=win_by_year.columns, value_name=\"Win_matches\")\ncum_win['Team'] = list(win_by_year.index)*35\ncum_win = cum_win[['Season', 'Team', 'Win_matches']]","5d2a754a":"import random\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nimport matplotlib.ticker as ticker\nfig, ax = plt.subplots(figsize=(15, 8))\n\ncolors = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for i in range(15)]\nteam2color = dict(zip(cum_win.Team, colors))\n\ndef draw_barchart(current_season):\n    dff = cum_win[cum_win['Season'].eq(current_season)].sort_values(by='Win_matches', ascending=True)\n    ax.clear()\n    ax.barh(dff['Team'], dff['Win_matches'], color=dff['Team'].map(team2color))\n    dx = dff['Win_matches'].max() \/ 200\n    for i, (value, name) in enumerate(zip(dff['Win_matches'], dff['Team'])):\n        ax.text(value-dx, i,     name,       size=10, weight=600, ha='right', va='bottom')\n        ax.text(value+dx, i,     f'{value:}',size=10, ha='left',  va='center')\n        \n    ax.text(1, 0.4, current_season, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Matches', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.15, 'Number of win matches of top 15 NCAA teams from 1985 to 2019',\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    plt.box(False)\n    \nanimator = animation.FuncAnimation(fig, draw_barchart, frames=range(1985, 2020),repeat=True, interval=500)\nHTML(animator.to_jshtml())","23f6e4e0":"mens_events = []\nfor year in [2015, 2016, 2017, 2018, 2019]:\n    mens_events.append(pd.read_csv(f'{MENS_DIR}\/MEvents{year}.csv'))\nMEvents = pd.concat(mens_events)\nprint(MEvents.shape)\nMEvents.head()","d446d389":"del mens_events\ngc.collect() #\u8868\u793a\u5236\u5bf9\u6240\u6709\u4ee3\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 (\u4ece\u5185\u5b58\u4e2d\u91ca\u653e\u8d85\u51fa\u4f5c\u7528\u8303\u56f4\u7684\u53d8\u91cf\uff0c\u4e0d\u5728\u4f7f\u7528\u7684\u5bf9\u8c61\u7b49)","437ce876":"# Event Types\nplt.style.use('fivethirtyeight')\nMEvents['counter'] = 1\nMEvents.groupby('EventType')['counter'] \\\n    .sum() \\\n    .sort_values(ascending=False) \\\n    .plot(kind='bar',\n          figsize=(15, 5),\n         color=mypal[2],\n         title='Event Type Frequency (Mens)')\nplt.xticks(rotation=0)\nplt.show()\n","ba32a5e2":"area_mapping = {0: np.nan,\n                1: 'under basket',\n                2: 'in the paint',\n                3: 'inside right wing',\n                4: 'inside right',\n                5: 'inside center',\n                6: 'inside left',\n                7: 'inside left wing',\n                8: 'outside right wing',\n                9: 'outside right',\n                10: 'outside center',\n                11: 'outside left',\n                12: 'outside left wing',\n                13: 'backcourt'}\n\nMEvents['Area_Name'] = MEvents['Area'].map(area_mapping)","04f8976f":"MEvents.groupby('Area_Name')['counter'].sum() \\\n    .sort_values() \\\n    .plot(kind='barh',\n          figsize=(15, 8),\n          title='Frequency of Event Area')\nplt.show()","42a4c5f8":"fig, ax = plt.subplots(figsize=(15, 8))\nfor i, d in MEvents.loc[~MEvents['Area_Name'].isna()].groupby('Area_Name'):\n    d.plot(x='X', y='Y', style='.', label=i, ax=ax, title='Visualizing Event Areas')\n    ax.legend()\nplt.legend(bbox_to_anchor=(1.04,1), loc=\"upper left\")\nax.set_xticks([])\nax.set_yticks([])\nax.set_xlabel('')\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\nplt.show()","86036d22":"# Normalize X, Y positions for court dimentions\n# Court is 50 feet wide and 94 feet end to end.\nMEvents['X_'] = (MEvents['X'] * (94\/100))\nMEvents['Y_'] = (MEvents['Y'] * (50\/100))","ccb9dc3e":"def create_ncaa_full_court(ax=None, three_line='mens', court_color='#dfbb85',\n                           lw=3, lines_color='black', lines_alpha=0.5,\n                           paint_fill='blue', paint_alpha=0.4,\n                           inner_arc=False):\n    \"\"\"\n    Version 2020.2.19\n    Creates NCAA Basketball Court\n    Dimensions are in feet (Court is 97x50 ft)\n    Created by: Rob Mulla \/ https:\/\/github.com\/RobMulla\n\n    * Note that this function uses \"feet\" as the unit of measure.\n    * NCAA Data is provided on a x range: 0, 100 and y-range 0 to 100\n    * To plot X\/Y positions first convert to feet like this:\n    ```\n    Events['X_'] = (Events['X'] * (94\/100))\n    Events['Y_'] = (Events['Y'] * (50\/100))\n    ```\n    \n    ax: matplotlib axes if None gets current axes using `plt.gca`\n\n\n    three_line: 'mens', 'womens' or 'both' defines 3 point line plotted\n    court_color : (hex) Color of the court\n    lw : line width\n    lines_color : Color of the lines\n    lines_alpha : transparency of lines\n    paint_fill : Color inside the paint\n    paint_alpha : transparency of the \"paint\"\n    inner_arc : paint the dotted inner arc\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    # Create Pathes for Court Lines\n    center_circle = Circle((94\/2, 50\/2), 6,\n                           linewidth=lw, color=lines_color, lw=lw,\n                           fill=False, alpha=lines_alpha)\n    hoop_left = Circle((5.25, 50\/2), 1.5 \/ 2,\n                       linewidth=lw, color=lines_color, lw=lw,\n                       fill=False, alpha=lines_alpha)\n    hoop_right = Circle((94-5.25, 50\/2), 1.5 \/ 2,\n                        linewidth=lw, color=lines_color, lw=lw,\n                        fill=False, alpha=lines_alpha)\n\n    # Paint - 18 Feet 10 inches which converts to 18.833333 feet - gross!\n    left_paint = Rectangle((0, (50\/2)-6), 18.833333, 12,\n                           fill=paint_fill, alpha=paint_alpha,\n                           lw=lw, edgecolor=None)\n    right_paint = Rectangle((94-18.83333, (50\/2)-6), 18.833333,\n                            12, fill=paint_fill, alpha=paint_alpha,\n                            lw=lw, edgecolor=None)\n    \n    left_paint_boarder = Rectangle((0, (50\/2)-6), 18.833333, 12,\n                           fill=False, alpha=lines_alpha,\n                           lw=lw, edgecolor=lines_color)\n    right_paint_boarder = Rectangle((94-18.83333, (50\/2)-6), 18.833333,\n                            12, fill=False, alpha=lines_alpha,\n                            lw=lw, edgecolor=lines_color)\n\n    left_arc = Arc((18.833333, 50\/2), 12, 12, theta1=-\n                   90, theta2=90, color=lines_color, lw=lw,\n                   alpha=lines_alpha)\n    right_arc = Arc((94-18.833333, 50\/2), 12, 12, theta1=90,\n                    theta2=-90, color=lines_color, lw=lw,\n                    alpha=lines_alpha)\n    \n    leftblock1 = Rectangle((7, (50\/2)-6-0.666), 1, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    leftblock2 = Rectangle((7, (50\/2)+6), 1, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    ax.add_patch(leftblock1)\n    ax.add_patch(leftblock2)\n    \n    left_l1 = Rectangle((11, (50\/2)-6-0.666), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    left_l2 = Rectangle((14, (50\/2)-6-0.666), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    left_l3 = Rectangle((17, (50\/2)-6-0.666), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    ax.add_patch(left_l1)\n    ax.add_patch(left_l2)\n    ax.add_patch(left_l3)\n    left_l4 = Rectangle((11, (50\/2)+6), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    left_l5 = Rectangle((14, (50\/2)+6), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    left_l6 = Rectangle((17, (50\/2)+6), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    ax.add_patch(left_l4)\n    ax.add_patch(left_l5)\n    ax.add_patch(left_l6)\n    \n    rightblock1 = Rectangle((94-7-1, (50\/2)-6-0.666), 1, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    rightblock2 = Rectangle((94-7-1, (50\/2)+6), 1, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    ax.add_patch(rightblock1)\n    ax.add_patch(rightblock2)\n\n    right_l1 = Rectangle((94-11, (50\/2)-6-0.666), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    right_l2 = Rectangle((94-14, (50\/2)-6-0.666), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    right_l3 = Rectangle((94-17, (50\/2)-6-0.666), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    ax.add_patch(right_l1)\n    ax.add_patch(right_l2)\n    ax.add_patch(right_l3)\n    right_l4 = Rectangle((94-11, (50\/2)+6), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    right_l5 = Rectangle((94-14, (50\/2)+6), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    right_l6 = Rectangle((94-17, (50\/2)+6), 0.166, 0.666,\n                           fill=True, alpha=lines_alpha,\n                           lw=0, edgecolor=lines_color,\n                           facecolor=lines_color)\n    ax.add_patch(right_l4)\n    ax.add_patch(right_l5)\n    ax.add_patch(right_l6)\n    \n    # 3 Point Line\n    if (three_line == 'mens') | (three_line == 'both'):\n        # 22' 1.75\" distance to center of hoop\n        three_pt_left = Arc((6.25, 50\/2), 44.291, 44.291, theta1=-78,\n                            theta2=78, color=lines_color, lw=lw,\n                            alpha=lines_alpha)\n        three_pt_right = Arc((94-6.25, 50\/2), 44.291, 44.291,\n                             theta1=180-78, theta2=180+78,\n                             color=lines_color, lw=lw, alpha=lines_alpha)\n\n        # 4.25 feet max to sideline for mens\n        ax.plot((0, 11.25), (3.34, 3.34),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n        ax.plot((0, 11.25), (50-3.34, 50-3.34),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n        ax.plot((94-11.25, 94), (3.34, 3.34),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n        ax.plot((94-11.25, 94), (50-3.34, 50-3.34),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n        ax.add_patch(three_pt_left)\n        ax.add_patch(three_pt_right)\n\n    if (three_line == 'womens') | (three_line == 'both'):\n        # womens 3\n        three_pt_left_w = Arc((6.25, 50\/2), 20.75 * 2, 20.75 * 2, theta1=-85,\n                              theta2=85, color=lines_color, lw=lw, alpha=lines_alpha)\n        three_pt_right_w = Arc((94-6.25, 50\/2), 20.75 * 2, 20.75 * 2,\n                               theta1=180-85, theta2=180+85,\n                               color=lines_color, lw=lw, alpha=lines_alpha)\n\n        # 4.25 inches max to sideline for mens\n        ax.plot((0, 8.3), (4.25, 4.25), color=lines_color,\n                lw=lw, alpha=lines_alpha)\n        ax.plot((0, 8.3), (50-4.25, 50-4.25),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n        ax.plot((94-8.3, 94), (4.25, 4.25),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n        ax.plot((94-8.3, 94), (50-4.25, 50-4.25),\n                color=lines_color, lw=lw, alpha=lines_alpha)\n\n        ax.add_patch(three_pt_left_w)\n        ax.add_patch(three_pt_right_w)\n\n    # Add Patches\n    ax.add_patch(left_paint)\n    ax.add_patch(left_paint_boarder)\n    ax.add_patch(right_paint)\n    ax.add_patch(right_paint_boarder)\n    ax.add_patch(center_circle)\n    ax.add_patch(hoop_left)\n    ax.add_patch(hoop_right)\n    ax.add_patch(left_arc)\n    ax.add_patch(right_arc)\n    \n    if inner_arc:\n        left_inner_arc = Arc((18.833333, 50\/2), 12, 12, theta1=90,\n                             theta2=-90, color=lines_color, lw=lw,\n                       alpha=lines_alpha, ls='--')\n        right_inner_arc = Arc((94-18.833333, 50\/2), 12, 12, theta1=-90,\n                        theta2=90, color=lines_color, lw=lw,\n                        alpha=lines_alpha, ls='--')\n        ax.add_patch(left_inner_arc)\n        ax.add_patch(right_inner_arc)\n\n    # Restricted Area Marker\n    restricted_left = Arc((6.25, 50\/2), 8, 8, theta1=-90,\n                        theta2=90, color=lines_color, lw=lw,\n                        alpha=lines_alpha)\n    restricted_right = Arc((94-6.25, 50\/2), 8, 8,\n                         theta1=180-90, theta2=180+90,\n                         color=lines_color, lw=lw, alpha=lines_alpha)\n    ax.add_patch(restricted_left)\n    ax.add_patch(restricted_right)\n    \n    # Backboards\n    ax.plot((4, 4), ((50\/2) - 3, (50\/2) + 3),\n            color=lines_color, lw=lw*1.5, alpha=lines_alpha)\n    ax.plot((94-4, 94-4), ((50\/2) - 3, (50\/2) + 3),\n            color=lines_color, lw=lw*1.5, alpha=lines_alpha)\n    ax.plot((4, 4.6), (50\/2, 50\/2), color=lines_color,\n            lw=lw, alpha=lines_alpha)\n    ax.plot((94-4, 94-4.6), (50\/2, 50\/2),\n            color=lines_color, lw=lw, alpha=lines_alpha)\n\n    # Half Court Line\n    ax.axvline(94\/2, color=lines_color, lw=lw, alpha=lines_alpha)\n\n    # Boarder\n    boarder = Rectangle((0.3,0.3), 94-0.4, 50-0.4, fill=False, lw=3, color='black', alpha=lines_alpha)\n    ax.add_patch(boarder)\n    \n    # Plot Limit\n    ax.set_xlim(0, 94)\n    ax.set_ylim(0, 50)\n    ax.set_facecolor(court_color)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    return ax\n\n\nfig, ax = plt.subplots(figsize=(15, 8.5))\ncreate_ncaa_full_court(ax, three_line='both', paint_alpha=0.4)\nplt.show()","b5a9adfb":"fig, ax = plt.subplots(figsize=(15, 7.8))\nms = 10\nax = create_ncaa_full_court(ax, paint_alpha=0.1)\nMEvents.query('EventType == \"turnover\"') \\\n    .plot(x='X_', y='Y_', style='X',\n          title='Turnover Locations (Mens)',\n          c='red',\n          alpha=0.3,\n         figsize=(15, 9),\n         label='Steals',\n         ms=ms,\n         ax=ax)\nax.set_xlabel('')\nax.get_legend().remove()\nplt.show()","d84aa175":"COURT_COLOR = '#dfbb85'\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 4))\n# Where are 3 pointers made from? (This is really cool)\nMEvents.query('EventType == \"made3\"') \\\n    .plot(x='X_', y='Y_', style='.',\n          color='blue',\n          title='3 Pointers Made (Mens)',\n          alpha=0.01, ax=ax1)\nax1 = create_ncaa_full_court(ax1, lw=0.5, three_line='mens', paint_alpha=0.1)\nax1.set_facecolor(COURT_COLOR)\nMEvents.query('EventType == \"miss3\"') \\\n    .plot(x='X_', y='Y_', style='.',\n          title='3 Pointers Missed (Mens)',\n          color='red',\n          alpha=0.01, ax=ax2)\nax2.set_facecolor(COURT_COLOR)\nax2 = create_ncaa_full_court(ax2, lw=0.5, three_line='mens', paint_alpha=0.1)\nax1.get_legend().remove()\nax2.get_legend().remove()\nax1.set_xticks([])\nax1.set_yticks([])\nax2.set_xticks([])\nax2.set_yticks([])\nax1.set_xlabel('')\nax2.set_xlabel('')\nplt.show()","356ecba4":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 4))\n# Where are 3 pointers made from? (This is really cool)\nMEvents.query('EventType == \"made2\"') \\\n    .plot(x='X_', y='Y_', style='.',\n          color='blue',\n          title='2 Pointers Made (mens)',\n          alpha=0.01, ax=ax1)\nax1.set_facecolor(COURT_COLOR)\nax1 = create_ncaa_full_court(ax1, lw=0.5, three_line='mens', paint_alpha=0.1)\nMEvents.query('EventType == \"miss2\"') \\\n    .plot(x='X_', y='Y_', style='.',\n          title='2 Pointers Missed (mens)',\n          color='red',\n          alpha=0.01, ax=ax2)\nax2.set_facecolor(COURT_COLOR)\nax2 = create_ncaa_full_court(ax2, lw=0.5, three_line='mens', paint_alpha=0.1)\nax1.get_legend().remove()\nax2.get_legend().remove()\nax1.set_xticks([])\nax1.set_yticks([])\nax2.set_xticks([])\nax2.set_yticks([])\nax1.set_xlabel('')\nax2.set_xlabel('')\nplt.show()","98f1f127":"MPlayers = pd.read_csv(f'{MENS_DIR}\/MPlayers.csv', error_bad_lines=False)","62b7b430":"MPlayers.head()","821c19e1":"MPlayers[(MPlayers['LastName']=='Williamson')&(MPlayers['FirstName']=='Zion')]","10408fea":"# Merge Player name onto events\nMEvents = MEvents.merge(MPlayers,\n              how='left',\n              left_on='EventPlayerID',\n              right_on='PlayerID')\n","422d0fa6":"MEvents.loc[MEvents['PlayerID'] == 2825].groupby('EventType')['EventID'].count() \\\n    .sort_values() \\\n    .plot(kind='barh',\n          figsize=(15, 5),\n          title='Zion Williamson event type count',\n          color=mypal[1])\nplt.show()","e3fd43b6":"ms = 10 # Marker Size\nFirstName = 'Zion'\nLastName = 'Williamson'\nfig, ax = plt.subplots(figsize=(15, 8))\nax = create_ncaa_full_court(ax)\nMEvents.query('FirstName == @FirstName and LastName == @LastName and EventType == \"made2\"') \\\n    .plot(x='X_', y='Y_', style='o',\n          title='Shots (Zion Williamson)',\n          alpha=0.5,\n         figsize=(15, 8),\n         label='Made 2',\n         ms=ms,\n         ax=ax)\nplt.legend()\nMEvents.query('FirstName == @FirstName and LastName == @LastName and EventType == \"miss2\"') \\\n    .plot(x='X_', y='Y_', style='X',\n          alpha=0.5, ax=ax,\n         label='Missed 2',\n         ms=ms)\nplt.legend()\nMEvents.query('FirstName == @FirstName and LastName == @LastName and EventType == \"made3\"') \\\n    .plot(x='X_', y='Y_', style='o',\n          c='brown',\n          alpha=0.5,\n         figsize=(15, 8),\n         label='Made 3', ax=ax,\n         ms=ms)\nplt.legend()\nMEvents.query('FirstName == @FirstName and LastName == @LastName and EventType == \"miss3\"') \\\n    .plot(x='X_', y='Y_', style='X',\n          c='green',\n          alpha=0.5, ax=ax,\n         label='Missed 3',\n         ms=ms)\nax.set_xlabel('')\nplt.legend()\nplt.show()","56d76085":"N_bins = 100\nshot_events = MEvents.loc[MEvents['EventType'].isin(['miss3','made3','miss2','made2']) & (MEvents['X_'] != 0)]\nfig, ax = plt.subplots(figsize=(15, 7))\nax = create_ncaa_full_court(ax,\n                            paint_alpha=0.0,\n                            three_line='mens',\n                            court_color='black',\n                            lines_color='white')\n_ = plt.hist2d(shot_events['X_'].values + np.random.normal(0, 0.1, shot_events['X_'].shape), # Add Jitter to values for plotting\n           shot_events['Y_'].values + np.random.normal(0, 0.1, shot_events['Y_'].shape),\n           bins=N_bins, norm=mpl.colors.LogNorm(),\n               cmap='plasma')\n\n# Plot a colorbar with label.\ncb = plt.colorbar()\ncb.set_label('Number of shots')\n\nax.set_title('Shot Heatmap (Mens)')\nplt.show()","b5529f04":"\n\nSeason - this is the year of the associated entry in MSeasons.csv (the year in which the final tournament occurs). \n\nDayNum - this integer always ranges from 0 to 132, and tells you what day the game was played on. \n\nWTeamID - this identifies the id number of the team that won the game, as listed in the \"MTeams.csv\" file. No matter whether the game was won by the home team or visiting team, or if it was a neutral-site game, the \"WTeamID\" always identifies the winning team.\n\nWScore - this identifies the number of points scored by the winning team.\n\nLTeamID - this identifies the id number of the team that lost the game.\n\nLScore - this identifies the number of points scored by the losing team. Thus you can be confident that WScore will be greater than LScore for all games listed.\n\nWLoc - this identifies the \"location\" of the winning team. If the winning team was the home team, this value will be \"H\". If the winning team was the visiting team, this value will be \"A\". If it was played on a neutral court, then this value will be \"N\". \n\nNumOT - this indicates the number of overtime periods in the game, an integer 0 or higher.","e69d7f61":"We can plot a heatmap of where shots occur on the court. Interesting observation is that many of the shots for mens come from directly under the hoop","0bb892e1":"Team name and Team ID, first and last D1 Season. Sorting by the FirstD1Season column we can see some of the newest teams in D1 basketball. Welcome to D1 Merrimack! Cool mascot.","ec656eb9":"# Player IDs","e74be6fc":"This is some of the most exciting data provided, but after looking there are some things to consider.\n\nX, Y points are not available for all games- so this is not a complete sample\nThe X\/Y position is provided for fouls, turnovers, and field-goal attempts (either 2-point or 3-point). No X\/Y data for other events.","7e66a59a":"# Tourney Seed Data","6f206869":"# **9. A #5 Seed Has Never Won the Tournament**\nIf a #8 seed has won the tournament, then it sounds odd hearing that a #5 seed has never won it right? But it's true, 5 is the unlucky number for teams in the NCAA. Three #5 seeds (Indiana, Florida, and Butler) have made it to the championship game sure, but none have ever won.","b004d373":"# **How does March Madness work?**\nThe NCAA men's basketball tournament is made up of 68 teams. ... Four of those teams are eliminated in the opening round of the tournament (known as the First Four), leaving us with a field of 64 for the first round. Those 64 teams are split into four regions of 16 teams each, with each team being ranked 1 through 16\n![image.png](attachment:image.png)","a40e8007":"![](https:\/\/www.sportingcharts.com\/media\/240276\/restricted_area.jpg)","1989f251":"We can join our regular season results on the team names to more clearly identify the games.","fcbbf2e7":"# Regular Season Results","9d676b01":"# Plotting X, Y Data","807a97cb":"TeamID - a 4 digit id number\n\nTeamName - a compact spelling of the team's college name, 16 characters or fewer. \n\n\nFirstD1Season - the first season in our dataset that the school was a Division-I school. \n\n\nLastD1Season - the last season in our dataset that the school was a Division-I school. ","d5c60f28":"This file identifies the seeds for all teams in each NCAA\u00ae tournament, for all seasons of historical data.","14f1067e":"These files identify the game-by-game NCAA\u00ae tournament results for all seasons of historical data.","5c5ad90b":"![image.png](attachment:image.png)","0b6d373f":"# **4. Peach Baskets Were the First Ever Basketball Hoops**\nWhen the game began, peach baskets with the bottom still intact were used as basketball hoops. This of course was very problematic because the ball had to be retrieved from the basket by officials after every score. But this eventually changed in the 1900s with the introduction of string nets.","e80aa6ed":"under basket is the most Frequency of Event Area","21c78046":"# **1. The NCAA Once Banned the Slam Dunk**\nSounds unbelievable right? How could the slam dunk, one of the most popular moves in basketball, ever be banned? Well between 1967 to 1976, the NCAA banned the slam dunk from stopping one man who would later on become Kareem Abdul-Jabbar. Lew Alcindor and his slam dunks just couldn't be stopped, and so in an attempt to stop him from dominating the court, NCAA banned the move.","c248a631":"LastD1Season=2020, and you can confirm there are 353 such teams.  ","706a6ae5":"# **7. Lowest Ranked Seed to Ever Win Was Just #8**\nIf the team you're rooting for is ranked lower than #8, then chances are you won't be winning the tournament. In the history of the NCAA so far, the lowest ranked seed to win has been #8, back in 1985. This win is still considered one of the biggest upsets in NCAA history, with #8 seed Villanova beating #1 seed Georgetown.","a31d054b":"# **Interesting Facts About The NCAA**\n![image.png](attachment:image.png)","343346c8":"# Shot Heatmap","e041ceb8":"0 ~ 10 score differential is the biggest","ef9e7b3d":"Obviously, there are more mistakes or Made near the stadium, and the closer to the stadium lead to more competition","b3bcef7b":"Check out my notebook here for an example and code for a half court plot:\n\nhttps:\/\/www.kaggle.com\/robikscube\/ncaa-basketball-court-plot-helper-functions","45d5dba6":"# **6. Only Once Have the Four #1 Seeds Won Their Regionals**\nYou would think that the four #1 seeds had the highest chances of winning their regionals to get to the Final Four. However, this had only happened once in NCAA history, back in 2008, when all four #1 seeds UCLA, Kansas, North Carolina and Memphis won the regionals to get to the Final Four. Meaning you should always be cautious when backing the favorites with sports betting sites such as Betway.","dd45ec66":"# **10. Marquette is Kentucky's Only Weakness**\nThe most winningest team in NCAA history is Kentucky with 11 title wins to themselves. But Marquette is that one team that can even bring Kentucky down to its knees. The two teams have faced off ten times in NCAA history, and Marquette has won 6 of those games.","516958ba":"# **5. March Madness Makes Corporations Lose Quite Some Money**\nMarch Madness creates such a frenzy and excitement that it draws employees away from their work and responsibilities, so much so that it starts to cost the company money. According to WalletHub, it is estimated that nearly $1.9 billion is lost by companies every hour because of the distraction of March Madness going on.","f83d4688":"# Team Data","149270ce":"# **8. Ohio Is the Only State to Have 2 Teams Compete in NCAA**\nBack in 1961, Ohio State and University of Cincinnati both competed in the NCAA tournament, playing against one another in the championship game. This is the only time when a state has had 2 of its teams playing in the tournament.","2b560489":"Each MEvents & WEvents file lists the play-by-play event logs for more than 99.5% of games from that season. Each event is assigned to either a team or a single one of the team's players. Thus if a basket is made by one player and an assist is credited to a second player, that would show up as two separate records. The players are listed by PlayerID within the xPlayers.csv file.\n\nMens Event Files:\n\nMEvents2015.csv, MEvents2016.csv, MEvent2017.csv, MEvents2018.csv, MEvents2019.csv\n#Stage 1 - You should submit predicted probabilities for every possible matchup in the past 5 NCAA\u00ae tournaments (seasons 2015-2019).","f97e5e92":"This shows the Event Type Frequency (Mens)","7d264719":"The graph shows the Most Regular Season Wins (Mens) and Least Regular Season Wins (Mens)","844f515c":"# **3. A Canadian Invented Basketball**\nCanadians are associated with hockey so what are we talking about here? You probably expected that some American right would have invented basketball? Wrong! It was a Canadian physical education instructor who invented basketball in 1891 to keep his students active even on rainy days.","3992b827":"We can find :    \n2020 : Merrimack (TeamName)       \n2019 : North Alabama(TeamName) , Cal Baptist(TeamName)\n","e58450b0":"# Seasons Data","325cccd1":"# Event Data","02ea98c0":"Now that we have player names in the event data, lets single out specific players. Starting with one of the most exciting players of the last decade.","ec71e02e":"These files identify the different seasons included in the historical data, along with certain season-level properties.","1d5e0f37":"# Area of Event","d6b527a3":"Season - the year that the tournament was played in\n\nSeed - this is a 3\/4-character identifier of the seed, where the first character is either W, X, Y, or Z (identifying the region the team was in) and the next two digits (either 01, 02, ..., 15, or 16) tell you the seed within the region. \n\nTeamID - this identifies the id number of the team, as specified in the MTeams.csv file","45b29228":"# Plotting Specific Players' Made\/Missed Shots","5257755d":"There was 282 teams in 1985 .","f1c9dde2":"\n\nSeason - indicates the year in which the tournament was played. Remember that the current season counts as 2020.\n\nDayZero - tells you the date during that season. \n\nRegionW, RegionX, Region Y, Region Z - by our contests' convention, each of the four regions in the final tournament is assigned a letter of W, X, Y, or Z. The national semifinal pairings in the Final Four will depend upon the overall ranks of the four #1 seeds.","91643010":"We can find that FirstD1Season came from 1985.","40d6885d":"# Common Event Types","9bc9207b":"There is an issue when trying to read in lines where the player name has a comma. We can use *[error_bad_lines](http:\/\/)* to get past this, but ideally the data would be cleaned to remove the comma or a different delimiter would be used.","052edf8e":"# NCAA Court Plot Function","81d9503b":"This file identifies the different college teams present in the dataset. There are overall total of 367 teams in our team listing.","2f3c1e0b":"Obviously, there are more mistakes near the stadium, and the closer to the stadium lead to more competition","e79bd7f1":"We are told that the Area feature describes the 13 \"areas\" of the court, as follows: 1=under basket; 2=in the paint; 3=inside right wing; 4=inside right; 5=inside center; 6=inside left; 7=inside left wing; 8=outside right wing; 9=outside right; 10=outside center; 11=outside left; 12=outside left wing; 13=backcourt.\n\nWe can map these values to their names.","e509cb0a":"# **2. It's Impossible to Pick a Perfect March Madness Bracket**\nThere is no such thing as the perfect bracket in March Madness. It has never happened, and chances are it will never happen. The chances of such a thing happening are so slim that you are more likely to win the Mega Millions lottery two times back to back than selecting the perfect bracket, according to math professor Jeff Bergen.\n","756f7f42":"# **What NCAA means?**\nNational Collegiate Athletic Association\nThe National Collegiate Athletic Association (NCAA) is a nonprofit organization that regulates student athletes from 1,268 North American institutions and conferences.\n","a4295432":"# Common Events by Player"}}