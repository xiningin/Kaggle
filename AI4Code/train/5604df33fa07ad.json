{"cell_type":{"82f6ff90":"code","f7683370":"code","d1293ff6":"code","cf3ba776":"code","3701f971":"code","9360c0e0":"code","76658832":"code","7d10b640":"code","999e0f60":"code","c849000c":"code","b0e10471":"code","9efd18f7":"code","85ba922b":"code","df8f1e8b":"code","43b18178":"code","7ffc1746":"code","d0ee35eb":"code","66f7e379":"code","d7d5b466":"code","aa259dd2":"code","9b7abbed":"code","8acfc5af":"code","f2fa0e88":"code","6fe8f291":"code","aa4914a6":"code","6960e907":"code","5fe87d49":"code","49f13035":"code","18eb8b6e":"markdown","924afabe":"markdown","cfc91a0e":"markdown","9cc7ba27":"markdown","479c3ede":"markdown","d1acc5d9":"markdown","febb1060":"markdown"},"source":{"82f6ff90":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt","f7683370":"train = pd.read_csv('..\/input\/train.csv', header='infer', index_col='PassengerId')\ntest = pd.read_csv('..\/input\/test.csv', header='infer', index_col='PassengerId')\ntrain.head()","d1293ff6":"print('****** DFs shape: ******', train.shape)\nprint(train.info())\nprint(train.describe())","cf3ba776":"train.loc[:, train.isnull().any()].head()","3701f971":"print(train['Embarked'].value_counts())\n\n# We will fill the missing values in Embarked with 'S' which is the most common.\ntrain['Embarked'] = train['Embarked'].fillna('S')\ntest['Embarked']  = test['Embarked'].fillna('S')","9360c0e0":"# We'll fill the missing age values by the mean for training and testing data.\ntrain['Age'].fillna(train['Age'].median(), inplace = True)\ntest['Age'] = test['Age'].fillna(test['Age'].mean())","76658832":"train.loc[:, train.isnull().any()].head()","7d10b640":"survived = train['Survived'] == 1\nmale = train['Sex'] == 'male'\nfemale = train['Sex'] == 'female'\n\nprint('Average age of male who survived', train[survived & male].Age.mean())\nprint('Average age of female who survived', train[survived & female].Age.mean())","999e0f60":"train['Title'] = train['Name'].str.extract(' ([A-Za-z]+).', expand=False)\npd.crosstab(train['Title'], train['Sex'])","c849000c":"g = sns.factorplot(x=\"Embarked\", y=\"Survived\", hue=\"Sex\", data=train,\n                   size=6, kind=\"bar\", palette=\"muted\")\ng.despine(left=True)\ng.set_ylabels(\"survival probability\")","b0e10471":"print(train[['Pclass', 'Survived']].groupby('Pclass').mean())\ng = sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train,\n                   size=6, kind=\"bar\", palette=\"muted\")\ng.set_ylabels(\"survival probability\")","9efd18f7":"print(train[['Sex', 'Survived']].groupby('Sex').mean())\n\ng = sns.factorplot(x=\"Sex\", y=\"Survived\", data=train,\n                   size=6, kind=\"bar\", palette=\"muted\")\ng.set_ylabels(\"survival probability\")","85ba922b":"print(train[['Embarked', 'Survived']].groupby('Embarked').mean())\ng = sns.factorplot(x=\"Embarked\", y=\"Survived\", data=train,\n                   size=6, kind=\"bar\", palette=\"muted\")\ng.despine(left=True)\ng.set_ylabels(\"survival probability\")","df8f1e8b":"sns.violinplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train, split=True,\n               inner=\"quart\", palette=\"Set3\")\nsns.despine(left=True)","43b18178":"sns.violinplot(x=\"Embarked\", y=\"Survived\", hue=\"Sex\", data=train, split=True,\n               inner=\"quart\", palette=\"Set2\")\nsns.despine(left=True)","7ffc1746":"train.drop(['Name', 'Fare', 'Ticket', 'Cabin'], axis=1).head()","d0ee35eb":"train.columns","66f7e379":"test.drop(['Name', 'Fare', 'Ticket', 'Cabin'], axis=1).head()","d7d5b466":"# Here some mapping to encode categorical variables.\n\nsex_mapping  = {'male': 1, 'female': 0}\nembark_encode = {'C': 1, 'S': 2, 'Q': 3}","aa259dd2":"test.head()\ntest['Sex'] = test['Sex'].map(sex_mapping)\ntest['Embarked'] = test['Embarked'].map(embark_encode)","9b7abbed":"train['Sex'] = train['Sex'].map(sex_mapping)\ntrain['Embarked'] = train['Embarked'].map(embark_encode)","8acfc5af":"train.head()","f2fa0e88":"X_train = train.loc[:, ['Pclass', 'Sex', 'Age', 'Embarked']]\nY_train = train.loc[:, ['Survived']]\n\nX_test = test.loc[:, ['Pclass', 'Sex', 'Age', 'Embarked']]\n\nprint(X_test.head())\nprint(X_test.info())","6fe8f291":"from sklearn.linear_model import LogisticRegression","aa4914a6":"lr = LogisticRegression()\nlr.fit(X_train, Y_train)\ny_pred = lr.predict(X_test)\n# acc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\n# print(acc_logreg)\nprint(round(lr.score(X_train, Y_train) * 100, 2))","6960e907":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier()\nclf.fit(X_train, Y_train)\ny_pred = clf.predict(X_test)\n\nprint(round(clf.score(X_train, Y_train) * 100, 2))","5fe87d49":"X_test.reset_index(inplace=True)\nX_test.columns\nsubmission = pd.concat([pd.Series(X_test[\"PassengerId\"]), pd.Series(y_pred)], axis=1)\nsubmission.head()","49f13035":"submission.to_csv('to_submit.csv', index=False)","18eb8b6e":"##### It is safe to assume the following:\n    - Cabine feature seems to be irrelevant to whether a person survived or not, plus there are a lot of missing values.\n    - Ticket doesn't really affect survival.\n    - Fare either\n    - And name","924afabe":"We can see that **Age** and **Cabin** columns have quite some NaN, this will need to be fixed.\n\n#### For now, let's explore the data through some plots.","cfc91a0e":"Let's check the **shape** of dataset and see if there are any **zeros** or **NaNs**. As well as some **basic summary** about the dataframe.","9cc7ba27":"#### You might have noticed that in the text Column there are some tittles for people.\n\nLet's get a count for those.\n","479c3ede":"###### From the plots we can validate the following assumptions:\n\n    * Women survived more than men, gentleman titanic people.\n    * People who embarked from Cherbourg survived more.\n    * First class people survived more than other classes, their survival percentage is 63%!\n    * Survival was lowest in third class passengers.","d1acc5d9":"##### Initial Hypothesis.\n    * Women are likely to survive more than men.\n    * First class people, are likely to survive more.\n    * People travelling without any relatives are more likely to survive\n    \n Let's check those hyposesis with some metrics and visualizatons!","febb1060":"### In this notebook, we're going to explore first of the training set, make some EDA see how those features are what they are, then select our features and finally train a classifier which predicts whether a person survived or not.  "}}