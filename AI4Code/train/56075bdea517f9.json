{"cell_type":{"87a86c13":"code","30d85e6c":"code","e5d50652":"code","b1c7ab09":"code","5729047d":"code","0a2e90ce":"code","f13da11b":"code","78c41576":"code","bcce07df":"code","ea743c42":"code","37dab6fa":"code","1977d9b8":"code","32f52edb":"code","d618962d":"code","9f105b1a":"code","d3e819b3":"code","0a126a7c":"code","03cf3b0d":"code","398b1bd7":"code","a2be1eb2":"code","0eb06581":"code","d177ec1f":"code","c4166bc3":"code","7c25c25b":"code","31216685":"code","9b46487b":"code","eae2e626":"code","fbfe5105":"code","083ae69c":"code","c70396b3":"code","afdd1434":"code","53e76f7e":"code","77752094":"code","19b71105":"code","fad127cc":"code","1e74750b":"code","113a5341":"code","ab863866":"markdown","7a148d28":"markdown","21aeffd1":"markdown","8de197da":"markdown","2047f37d":"markdown","79791af3":"markdown","f510febb":"markdown","9bd267a2":"markdown","bc57c62c":"markdown","6486669b":"markdown","0aa44aba":"markdown","c590d58e":"markdown","5bd3e655":"markdown","da2dd5ed":"markdown","6d606de9":"markdown","5dc8e45e":"markdown","8e8ace09":"markdown","01dcbba6":"markdown","32a20e39":"markdown","4bac99b0":"markdown","372a67eb":"markdown"},"source":{"87a86c13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30d85e6c":"import time\nt0_start = time.time()\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e5d50652":"import scipy.sparse\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex2_zero_dose_sparse.npz'\nsparse_matrix = scipy.sparse.load_npz(fn)\ntype(sparse_matrix), sparse_matrix.shape","b1c7ab09":"print(sparse_matrix[:10,:8].toarray())","5729047d":"fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/genes_sciPlex2.csv'\ngenes = pd.read_csv(fn, index_col = 0)\ngenes","0a2e90ce":"m = sparse_matrix.copy()\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])","f13da11b":"# Show that expression and variance are both growing \n\nt = m2.copy()\nt.data **= 2#.toarray()\n#print( t.toarray() )\nX_var = np.array(t.mean(axis = 0 )).ravel() - np.array(m2.mean(axis = 0) ).ravel()**2  \n\ngenes['Variance'] = X_var\n#plt.plot( np.sort( (  genes['Variance'].values) ))\n\ngenes['Expression Sum'] = np.asarray(m2.sum(axis = 0)).ravel()\n\ng2 = genes.sort_values('Expression Sum')\ng2 = genes.sort_values('Variance')\n\nplt.plot(np.log10(1+ g2['Expression Sum'].values) )\n# plt.plot(g2['Variance'].values)\nplt.title('Expression sum')\nplt.show()\nplt.plot(np.log10(1+ g2['Variance'].values) )\nplt.title('Variance')\nplt.show()","78c41576":"t = m2.copy()\nt.data **= 2#.toarray()\n#print( t.toarray() )\nX_var = np.array(t.mean(axis = 0 )).ravel() - np.array(m2.mean(axis = 0) ).ravel()**2  \nIX = np.argsort(X_var)\nIX = IX[-10000:]\n","bcce07df":"m = m[:,IX]\nm2 = m2[:,IX]\ngenes = genes.iloc[IX,:]\n\ngenes.shape, m2.shape, m.shape","ea743c42":"genes.shape, m2.shape, m.shape","37dab6fa":"if 1:\n    import seaborn  as sns\n    from sklearn.decomposition import TruncatedSVD\n    import time\n    import umap\n\n    reducer = umap.UMAP(random_state=42)\n    str_reducer = 'UMAP'\n    #reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    svd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\n    v = np.asarray(m2.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n\n    t00 = time.time()\n    for count_made_zeros in [10]: # range(10,100,10):\n\n        m3 = m2.copy()#  != 0 # \n        if count_made_zeros != 0:\n            #m3[:,IX[-count_made_zeros:]] = 0\n            m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n        t0 = time.time()\n        r = svd.fit_transform(m3)\n        print(time.time() - t0, 'seconds passed on svd')\n        t0 = time.time()\n        r = reducer.fit_transform(r)\n        print(time.time() - t0, 'seconds passed on ', str_reducer)\n\n        fig = plt.figure(figsize = (20,12))\n        c = 0; \n\n        #c+=1; fig.add_subplot(1, 2 , c)         \n        #color_by = df['drug'].copy()\n        sns.scatterplot(x=r[:,0],y=r[:,1] ) # ,   hue= color_by, alpha = 0.7, marker = '.')\n        plt.title(str_reducer + '  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n\n        print(time.time() - t0, 'seconds passed')\n\n    print('Finished.', time.time() - t00, 'seconds passed total ')    ","1977d9b8":"!pip install ncvis\nimport ncvis\nvis = ncvis.NCVis()\n\n!pip install trimap \nimport trimap\ntrimap1 = trimap.TRIMAP()","32f52edb":"from sklearn.decomposition import TruncatedSVD\nimport time\n\nt00 = time.time()\n\nif 1: # drop top expressed genes\n    count_drop_top_expressed_genes = 10 # ]: # range(10,100,10):\n    v = np.asarray(m2.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        m3 = m3[:,IX[:-count_drop_top_expressed_genes]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\nX = svd.fit_transform(m3)\nprint(time.time() - t0, 'seconds passed on svd')\nt0 = time.time()\n\n\nfrom sklearn import manifold\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import NMF\nfrom sklearn.decomposition import FastICA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.ensemble import RandomTreesEmbedding\nfrom sklearn.random_projection import SparseRandomProjection\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import TruncatedSVD\n\n\nfrom collections import OrderedDict\nfrom functools import partial\nfrom matplotlib.ticker import NullFormatter\n\n\n\nn_neighbors = 10\nn_components = 2\n# Set-up manifold methods\nLLE = partial(manifold.LocallyLinearEmbedding,\n              n_neighbors, n_components, eigen_solver='auto')\n\nmethods = OrderedDict()\nmethods['PCA'] = PCA()\nmethods['umap'] = umap.UMAP(n_components = n_components)\nmethods['t-SNE'] = manifold.TSNE(n_components=n_components, init='pca', random_state=0)\nmethods['NCIvis'] = ncvis.NCVis()\nmethods['trimap'] = trimap.TRIMAP()\nmethods['ICA'] = FastICA(n_components=n_components,         random_state=0)\nmethods['FA'] = FactorAnalysis(n_components=n_components, random_state=0)\nmethods['LLE'] = LLE(method='standard')\nmethods['Modified LLE'] = LLE(method='modified')\nmethods['Isomap'] = manifold.Isomap(n_neighbors, n_components)\nmethods['MDS'] = manifold.MDS(n_components, max_iter=100, n_init=1)\nmethods['SE'] = manifold.SpectralEmbedding(n_components=n_components,\n                                           n_neighbors=n_neighbors)\nmethods['NMF'] = NMF(n_components=n_components,  init='random', random_state=0) \nmethods['RandProj'] = SparseRandomProjection(n_components=n_components, random_state=42)\n\nrand_trees_embed = make_pipeline(RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5), TruncatedSVD(n_components=n_components) )\nmethods['RandTrees'] = rand_trees_embed\nmethods['LatDirAll'] = LatentDirichletAllocation(n_components=n_components,  random_state=0)\nmethods['LTSA'] = LLE(method='ltsa') \nmethods['Hessian LLE'] = LLE(method='hessian') \n\nlist_fast_methods = ['PCA','umap','FA', 'ICA','NMF','RandProj','RandTrees']\nlist_slow_methods = ['t-SNE','LLE','Modified LLE','Isomap','MDS','SE','LatDirAll','LTSA','Hessian LLE']\n\n# transformer = NeighborhoodComponentsAnalysis(init='random',  n_components=2, random_state=0) # Cannot be applied since supervised - requires y \n# methods['LinDisA'] = LinearDiscriminantAnalysis(n_components=n_components)# Cannot be applied since supervised - requires y \n\n\n# Create figure\nfig = plt.figure(figsize=(25, 16))\n\n# Plot results\nc = 0\nfor i, (label, method) in enumerate(methods.items()):\n    #if label in ['umap']: continue\n    if 0:\n        if label not in  list_fast_methods :\n            continue\n        \n    t0 = time.time()\n    try:\n        r = method.fit_transform(X.copy())\n    except:\n        print('Got Exception', label )\n        continue \n    t1 = time.time()\n    print(\"%s: %.2g sec\" % (label, t1 - t0))\n    \n    if 1:\n        c+=1\n        fig.add_subplot(2, 3 , c) \n        sns.scatterplot(x=r[:,0],y=r[:,1] )# , hue= y)#  cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label )\n        plt.legend('')\n        if c == 6:\n            plt.show()\n            fig = plt.figure(figsize=(25, 16))\n            c = 0\n\n    else:\n        plt.figure(figsize = (20,12))\n        sns.scatterplot(x=r[:,0],y=r[:,1] , hue= y)# cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label)# \n        plt.show()","d618962d":"url = 'https:\/\/raw.githubusercontent.com\/chervov\/genes\/main\/cell_cycle_genes_reactome_extended.txt'\ndf_list_genes_cc = pd.read_csv(url, header = None)\ndf_list_genes_cc","9f105b1a":"genes.head(1)","d3e819b3":"mask = genes['1'].isin( list( df_list_genes_cc[0].values) )\nIX_cc = np.where(mask > 0)[0]\n\nIX_cc, \nlen(IX_cc)","0a126a7c":"m2.shape","03cf3b0d":"from sklearn.decomposition import TruncatedSVD\nimport time\n\nt00 = time.time()\n\nm3 = m2.copy()#  != 0 # \nm3 = m3[:,IX_cc]\n\nif 0: # drop top expressed genes\n    count_drop_top_expressed_genes = 10 # ]: # range(10,100,10):\n    v = np.asarray(m2.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n    if count_made_zeros != 0:\n        m3 = m3[:,IX[:-count_drop_top_expressed_genes]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\nX = svd.fit_transform(m3)\nprint(time.time() - t0, 'seconds passed on svd')\nt0 = time.time()\n\n\nfrom sklearn import manifold\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import NMF\nfrom sklearn.decomposition import FastICA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.ensemble import RandomTreesEmbedding\nfrom sklearn.random_projection import SparseRandomProjection\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import TruncatedSVD\n\n\nfrom collections import OrderedDict\nfrom functools import partial\nfrom matplotlib.ticker import NullFormatter\n\n\n\nn_neighbors = 10\nn_components = 2\n# Set-up manifold methods\nLLE = partial(manifold.LocallyLinearEmbedding,\n              n_neighbors, n_components, eigen_solver='auto')\n\nmethods = OrderedDict()\nmethods['PCA'] = PCA()\nmethods['umap'] = umap.UMAP(n_components = n_components)\nmethods['t-SNE'] = manifold.TSNE(n_components=n_components, init='pca', random_state=0)\nmethods['NCIvis'] = ncvis.NCVis()\nmethods['trimap'] = trimap.TRIMAP()\nmethods['ICA'] = FastICA(n_components=n_components,         random_state=0)\nmethods['FA'] = FactorAnalysis(n_components=n_components, random_state=0)\nmethods['LLE'] = LLE(method='standard')\nmethods['Modified LLE'] = LLE(method='modified')\nmethods['Isomap'] = manifold.Isomap(n_neighbors, n_components)\nmethods['MDS'] = manifold.MDS(n_components, max_iter=100, n_init=1)\nmethods['SE'] = manifold.SpectralEmbedding(n_components=n_components,\n                                           n_neighbors=n_neighbors)\nmethods['NMF'] = NMF(n_components=n_components,  init='random', random_state=0) \nmethods['RandProj'] = SparseRandomProjection(n_components=n_components, random_state=42)\n\nrand_trees_embed = make_pipeline(RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5), TruncatedSVD(n_components=n_components) )\nmethods['RandTrees'] = rand_trees_embed\nmethods['LatDirAll'] = LatentDirichletAllocation(n_components=n_components,  random_state=0)\nmethods['LTSA'] = LLE(method='ltsa') \nmethods['Hessian LLE'] = LLE(method='hessian') \n\nlist_fast_methods = ['PCA','umap','FA', 'ICA','NMF','RandProj','RandTrees']\nlist_slow_methods = ['t-SNE','LLE','Modified LLE','Isomap','MDS','SE','LatDirAll','LTSA','Hessian LLE']\n\n# transformer = NeighborhoodComponentsAnalysis(init='random',  n_components=2, random_state=0) # Cannot be applied since supervised - requires y \n# methods['LinDisA'] = LinearDiscriminantAnalysis(n_components=n_components)# Cannot be applied since supervised - requires y \n\n\n# Create figure\nfig = plt.figure(figsize=(25, 16))\n\n# Plot results\nc = 0\nfor i, (label, method) in enumerate(methods.items()):\n    #if label in ['umap']: continue\n    if 0:\n        if label not in  list_fast_methods :\n            continue\n        \n    t0 = time.time()\n    try:\n        r = method.fit_transform(X.copy())\n    except:\n        print('Got Exception', label )\n        continue \n    t1 = time.time()\n    print(\"%s: %.2g sec\" % (label, t1 - t0))\n    \n    if 1:\n        c+=1\n        fig.add_subplot(2, 3 , c) \n        sns.scatterplot(x=r[:,0],y=r[:,1] )# , hue= y)#  cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label )\n        plt.legend('')\n        if c == 6:\n            plt.show()\n            fig = plt.figure(figsize=(25, 16))\n            c = 0\n\n    else:\n        plt.figure(figsize = (20,12))\n        sns.scatterplot(x=r[:,0],y=r[:,1] , hue= y)# cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label)# \n        plt.show()","398b1bd7":"print(genes['1'].nunique())\nprint(genes['1'].value_counts().head(1) )","a2be1eb2":"# Technical renaming to fit previous notebooks style \ngenes.columns = [ 0, 1, genes.columns[2], genes.columns[3] ]\ngenes.columns","0eb06581":"IX = np.where( genes[1] =='MALAT1' ) [0] \nprint( genes.iloc[IX,:] )\n\nIX = np.where( genes[0] =='ENSG00000278217.1' )[0][0]\ngenes[1].iat[IX] = 'MALAT1_AP000769' # This gene in somehow related (part of?) to MALAT1 -  \n# see e.g. http:\/\/www.ensembl.org\/Homo_sapiens\/Gene\/Summary?db=core;g=ENSG00000278217;r=11:65502914-65503008;t=ENST00000618249\n# But to avoid name duplicates we rename it differently from existing MALAT1 - ENSG00000251562.7","d177ec1f":"# Check deduplicating worked okay \nprint(genes[1].nunique())\nprint(genes[1].value_counts().head(1) )","c4166bc3":"!pip install scanpy","7c25c25b":"import anndata as ad\nimport scanpy as sc","31216685":"obs = pd.DataFrame( range(m2.shape[0] ) )","9b46487b":"print( genes.shape,m2.shape,m.shape)# , df.shape )\n#df.head(1)\n# obs = df.copy() # \nobs = pd.DataFrame( range(m2.shape[0] ) )\n\ndisplay(genes.head(1))\nvar = genes.reset_index().set_index(1) # Create \"var\" dataframe for anndat\nvar.columns = ['Old Index','Ensemble Id', 'Variance', 'Expression Sum']\nvar.index.name = 'Gene'\ndisplay(var.head(2))\nadata = ad.AnnData( m2.toarray(), obs=obs, var=var ) # memory consumed less than 1G\nif 0: # Examples \n    adata.obs['cell_groups'] = anno['cell_groups']  # categorical annotation of type pandas.Categorical\n    adata.obs['time'] = anno['time']                # numerical annotation of type float\n    # alternatively, you could also set the whole dataframe\n    # adata.obs = anno\n\nadata ","eae2e626":"s_genes = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', 'CDCA7', 'DTL', 'PRIM1', 'UHRF1', 'MLF1IP', 'HELLS', 'RFC2', 'RPA2', 'NASP', 'RAD51AP1', 'GMNN', 'WDR76', 'SLBP', 'CCNE2', 'UBR7', 'POLD3', 'MSH2', 'ATAD2', 'RAD51', 'RRM2', 'CDC45', 'CDC6', 'EXO1', 'TIPIN', 'DSCC1', 'BLM', 'CASP8AP2', 'USP1', 'CLSPN', 'POLA1', 'CHAF1B', 'BRIP1', 'E2F8']\n\ng2m_genes = ['HMGB2', 'CDK1', 'NUSAP1', 'UBE2C', 'BIRC5', 'TPX2', 'TOP2A', 'NDC80', 'CKS2', 'NUF2', 'CKS1B', 'MKI67', 'TMPO', 'CENPF', 'TACC3', 'FAM64A', 'SMC4', 'CCNB2', 'CKAP2L', 'CKAP2', 'AURKB', 'BUB1', 'KIF11', 'ANP32E', 'TUBB4B', 'GTSE1', 'KIF20B', 'HJURP', 'CDCA3', 'HN1', 'CDC20', 'TTK', 'CDC25C', 'KIF2C', 'RANGAP1', 'NCAPD2', 'DLGAP5', 'CDCA2', 'CDCA8', 'ECT2', 'KIF23', 'HMMR', 'AURKA', 'PSRC1', 'ANLN', 'LBR', 'CKAP5', 'CENPE', 'CTCF', 'NEK2', 'G2E3', 'GAS2L3', 'CBX5', 'CENPA']\nprint( len(s_genes), len(g2m_genes) )\n\n\ns_genes = list( set(adata.var_names) & set(s_genes) )\ng2m_genes = list( set(adata.var_names) & set(g2m_genes) )\nprint( len(s_genes), len(g2m_genes) )\n","fbfe5105":"sc.tl.score_genes_cell_cycle(adata, s_genes=s_genes, g2m_genes=g2m_genes)\nadata","083ae69c":"adata.obs.phase[:3]","c70396b3":"!pip install ncvis\nimport ncvis\nvis = ncvis.NCVis()\n\n!pip install trimap \nimport trimap\ntrimap1 = trimap.TRIMAP()","afdd1434":"vec_color_by = adata.obs.phase.values\n\nurl = 'https:\/\/raw.githubusercontent.com\/chervov\/genes\/main\/cell_cycle_genes_reactome_extended.txt'\ndf_list_genes_cc = pd.read_csv(url, header = None)\ndf_list_genes_cc\nmask = genes[1].isin( list( df_list_genes_cc[0].values) )\nIX_cc = np.where(mask > 0)[0]\nIX_cc, \nlen(IX_cc)\n\n\nfrom sklearn.decomposition import TruncatedSVD\nimport time\n\nt00 = time.time()\n\nm3 = m2.copy()#  != 0 # \nm3 = m3[:,IX_cc]\n\nif 0: # drop top expressed genes\n    count_drop_top_expressed_genes = 10 # ]: # range(10,100,10):\n    v = np.asarray(m2.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n    if count_made_zeros != 0:\n        m3 = m3[:,IX[:-count_drop_top_expressed_genes]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\nX = svd.fit_transform(m3)\nprint(time.time() - t0, 'seconds passed on svd')\nt0 = time.time()\n\nimport umap\nfrom sklearn import manifold\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import NMF\nfrom sklearn.decomposition import FastICA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.ensemble import RandomTreesEmbedding\nfrom sklearn.random_projection import SparseRandomProjection\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import TruncatedSVD\n\n\nfrom collections import OrderedDict\nfrom functools import partial\nfrom matplotlib.ticker import NullFormatter\n\n\n\nn_neighbors = 10\nn_components = 2\n# Set-up manifold methods\nLLE = partial(manifold.LocallyLinearEmbedding,\n              n_neighbors, n_components, eigen_solver='auto')\n\nmethods = OrderedDict()\nmethods['PCA'] = PCA()\nmethods['umap'] = umap.UMAP(n_components = n_components)\nmethods['t-SNE'] = manifold.TSNE(n_components=n_components, init='pca', random_state=0)\nmethods['NCIvis'] = ncvis.NCVis()\nmethods['trimap'] = trimap.TRIMAP()\nmethods['ICA'] = FastICA(n_components=n_components,         random_state=0)\nmethods['FA'] = FactorAnalysis(n_components=n_components, random_state=0)\nmethods['LLE'] = LLE(method='standard')\nmethods['Modified LLE'] = LLE(method='modified')\nmethods['Isomap'] = manifold.Isomap(n_neighbors, n_components)\nmethods['MDS'] = manifold.MDS(n_components, max_iter=100, n_init=1)\nmethods['SE'] = manifold.SpectralEmbedding(n_components=n_components,\n                                           n_neighbors=n_neighbors)\nmethods['NMF'] = NMF(n_components=n_components,  init='random', random_state=0) \nmethods['RandProj'] = SparseRandomProjection(n_components=n_components, random_state=42)\n\nrand_trees_embed = make_pipeline(RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5), TruncatedSVD(n_components=n_components) )\nmethods['RandTrees'] = rand_trees_embed\nmethods['LatDirAll'] = LatentDirichletAllocation(n_components=n_components,  random_state=0)\nmethods['LTSA'] = LLE(method='ltsa') \nmethods['Hessian LLE'] = LLE(method='hessian') \n\nlist_fast_methods = ['PCA','umap','FA', 'ICA','NMF','RandProj','RandTrees']\nlist_slow_methods = ['t-SNE','LLE','Modified LLE','Isomap','MDS','SE','LatDirAll','LTSA','Hessian LLE']\n\n# transformer = NeighborhoodComponentsAnalysis(init='random',  n_components=2, random_state=0) # Cannot be applied since supervised - requires y \n# methods['LinDisA'] = LinearDiscriminantAnalysis(n_components=n_components)# Cannot be applied since supervised - requires y \n\n\n# Create figure\nfig = plt.figure(figsize=(25, 16))\n\n# Plot results\nc = 0\nfor i, (label, method) in enumerate(methods.items()):\n    #if label in ['umap']: continue\n    if 0:\n        if label not in  list_fast_methods :\n            continue\n        \n    t0 = time.time()\n    try:\n        r = method.fit_transform(X.copy())\n    except:\n        print('Got Exception', label )\n        continue \n    t1 = time.time()\n    print(\"%s: %.2g sec\" % (label, t1 - t0))\n    \n    if 1:\n        c+=1\n        fig.add_subplot(2, 3 , c) \n        sns.scatterplot(x=r[:,0],y=r[:,1]  , hue= vec_color_by )#  cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label )\n        plt.legend()\n        if c == 6:\n            plt.show()\n            fig = plt.figure(figsize=(25, 16))\n            c = 0\n","53e76f7e":"print(time.time()-t0_start,'secondas passed total')","77752094":"s_genes = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', 'CDCA7', 'DTL', 'PRIM1', 'UHRF1', 'MLF1IP', 'HELLS', 'RFC2', 'RPA2', 'NASP', 'RAD51AP1', 'GMNN', 'WDR76', 'SLBP', 'CCNE2', 'UBR7', 'POLD3', 'MSH2', 'ATAD2', 'RAD51', 'RRM2', 'CDC45', 'CDC6', 'EXO1', 'TIPIN', 'DSCC1', 'BLM', 'CASP8AP2', 'USP1', 'CLSPN', 'POLA1', 'CHAF1B', 'BRIP1', 'E2F8']\n\ng2m_genes = ['HMGB2', 'CDK1', 'NUSAP1', 'UBE2C', 'BIRC5', 'TPX2', 'TOP2A', 'NDC80', 'CKS2', 'NUF2', 'CKS1B', 'MKI67', 'TMPO', 'CENPF', 'TACC3', 'FAM64A', 'SMC4', 'CCNB2', 'CKAP2L', 'CKAP2', 'AURKB', 'BUB1', 'KIF11', 'ANP32E', 'TUBB4B', 'GTSE1', 'KIF20B', 'HJURP', 'CDCA3', 'HN1', 'CDC20', 'TTK', 'CDC25C', 'KIF2C', 'RANGAP1', 'NCAPD2', 'DLGAP5', 'CDCA2', 'CDCA8', 'ECT2', 'KIF23', 'HMMR', 'AURKA', 'PSRC1', 'ANLN', 'LBR', 'CKAP5', 'CENPE', 'CTCF', 'NEK2', 'G2E3', 'GAS2L3', 'CBX5', 'CENPA']\nprint( len(s_genes), len(g2m_genes) )\ns_genes = list( set(adata.var_names) & set(s_genes) )\ng2m_genes = list( set(adata.var_names) & set(g2m_genes) )\nprint( len(s_genes), len(g2m_genes) )\n\ngenes_selected_Tirosh = s_genes + g2m_genes\nprint(type(genes_selected_Tirosh), len(genes_selected_Tirosh) )\n","19b71105":"genes_selected = genes_selected_Tirosh\n\nvec_color_by = adata.obs.phase.values\n\n\nmask = genes[1].isin( list( genes_selected ) )\nIX_cc = np.where(mask > 0)[0]\nIX_cc, \n\nprint('Number of selected genes: ', len(IX_cc) )\n\nfrom sklearn.decomposition import TruncatedSVD\nimport time\n\nt00 = time.time()\n\nm3 = m2.copy()#  != 0 # \nm3 = m3[:,IX_cc]\n\nif 0: # drop top expressed genes\n    count_drop_top_expressed_genes = 10 # ]: # range(10,100,10):\n    v = np.asarray(m2.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n    if count_made_zeros != 0:\n        m3 = m3[:,IX[:-count_drop_top_expressed_genes]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\nX = svd.fit_transform(m3)\nprint(time.time() - t0, 'seconds passed on svd')\nt0 = time.time()\n\nimport umap\nfrom sklearn import manifold\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import NMF\nfrom sklearn.decomposition import FastICA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.ensemble import RandomTreesEmbedding\nfrom sklearn.random_projection import SparseRandomProjection\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import TruncatedSVD\n\n\nfrom collections import OrderedDict\nfrom functools import partial\nfrom matplotlib.ticker import NullFormatter\n\n\n\nn_neighbors = 10\nn_components = 2\n# Set-up manifold methods\nLLE = partial(manifold.LocallyLinearEmbedding,\n              n_neighbors, n_components, eigen_solver='auto')\n\nmethods = OrderedDict()\nmethods['PCA'] = PCA()\nmethods['umap'] = umap.UMAP(n_components = n_components)\nmethods['t-SNE'] = manifold.TSNE(n_components=n_components, init='pca', random_state=0)\nmethods['NCIvis'] = ncvis.NCVis()\nmethods['trimap'] = trimap.TRIMAP()\nmethods['ICA'] = FastICA(n_components=n_components,         random_state=0)\nmethods['FA'] = FactorAnalysis(n_components=n_components, random_state=0)\nmethods['LLE'] = LLE(method='standard')\nmethods['Modified LLE'] = LLE(method='modified')\nmethods['Isomap'] = manifold.Isomap(n_neighbors, n_components)\nmethods['MDS'] = manifold.MDS(n_components, max_iter=100, n_init=1)\nmethods['SE'] = manifold.SpectralEmbedding(n_components=n_components,\n                                           n_neighbors=n_neighbors)\nmethods['NMF'] = NMF(n_components=n_components,  init='random', random_state=0) \nmethods['RandProj'] = SparseRandomProjection(n_components=n_components, random_state=42)\n\nrand_trees_embed = make_pipeline(RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5), TruncatedSVD(n_components=n_components) )\nmethods['RandTrees'] = rand_trees_embed\nmethods['LatDirAll'] = LatentDirichletAllocation(n_components=n_components,  random_state=0)\nmethods['LTSA'] = LLE(method='ltsa') \nmethods['Hessian LLE'] = LLE(method='hessian') \n\nlist_fast_methods = ['PCA','umap','FA', 'ICA','NMF','RandProj','RandTrees']\nlist_slow_methods = ['t-SNE','LLE','Modified LLE','Isomap','MDS','SE','LatDirAll','LTSA','Hessian LLE']\n\n# transformer = NeighborhoodComponentsAnalysis(init='random',  n_components=2, random_state=0) # Cannot be applied since supervised - requires y \n# methods['LinDisA'] = LinearDiscriminantAnalysis(n_components=n_components)# Cannot be applied since supervised - requires y \n\n\n# Create figure\nfig = plt.figure(figsize=(25, 16))\n\n# Plot results\nc = 0\nfor i, (label, method) in enumerate(methods.items()):\n    #if label in ['umap']: continue\n    if 0:\n        if label not in  list_fast_methods :\n            continue\n        \n    t0 = time.time()\n    try:\n        r = method.fit_transform(X.copy())\n    except:\n        print('Got Exception', label )\n        continue \n    t1 = time.time()\n    print(\"%s: %.2g sec\" % (label, t1 - t0))\n    \n    if 1:\n        c+=1\n        fig.add_subplot(2, 3 , c) \n        sns.scatterplot(x=r[:,0],y=r[:,1]  , hue= vec_color_by )#  cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label )\n        plt.legend()\n        if c == 6:\n            plt.show()\n            fig = plt.figure(figsize=(25, 16))\n            c = 0\n","fad127cc":"s_genes = ['BRCA1', 'MRE11', 'DEPDC1B', 'POLQ', 'NDC1', 'MCM10', 'ASPM', 'WDR62', 'MCM6', 'UNG', 'POLD3', 'RBL1', 'ORC1', 'L2HGDH', 'CLSPN', 'MCM5', 'POLE2', 'TRIM9', 'CEP128', 'MYBL2', 'TTI1', 'E2F1', 'CEP152', 'LIG1', 'NEIL3', 'GALNT18', 'FBXO5', 'MCM3', 'HMGCS1', 'CEBPZ', 'SRSF7', 'MASTL', 'CIT', 'STIL', 'HJURP', 'HIST1H1D', 'PKMYT1', 'MIS18BP1', 'GINS2', 'NUP210', 'PCNA', 'SLF1', 'DOCK10', 'USP37', 'BRIP1', 'KIAA0319', 'DNA2', 'ZGRF1', 'SLC7A1', 'DIAPH3', 'TICRR', 'COPS3', 'SSH2', 'ITGB3BP', 'DTL', 'OSBPL10', 'MMS22L', 'CDCA5', 'NPAT', 'NCAPD3', 'CENPU', 'CENPJ', 'SPC25', 'JAZF1', 'ATAD2', 'PAXIP1', 'GALNT14', 'FANCC', 'KIAA1524', 'ZNF704', 'ZNF367', 'E2F7', 'MCM7', 'PLEKHA7', 'CDT1', 'C19orf48', 'TK1', 'CDCA4', 'RRM2', 'MACROD2', 'IQCB1', 'EXO1', 'POLE', 'PLD5', 'GPC6', 'SLC35F3', 'LIN9', 'WWOX', 'KIF18B', 'FANCA', 'ARHGAP11B', 'CENPP', 'FHIT', 'XRCC2', 'RAD54B', 'NUP62CL', 'ZNF43', 'EMP2', 'AC073529.1', 'LINC01036', 'ZFPM2-AS1', 'AC134511.1', 'LINC01572', 'AC016205.1']\n\ng2m_genes = ['PAF1', 'ANLN', 'TACC3', 'CPS1', 'DEPDC1', 'DEPDC1B', 'POLQ', 'SLC12A2', 'ASPM', 'PRR11', 'HMMR', 'GTSE1', 'WDR62', 'SPAG5', 'AURKA', 'TPX2', 'BIRC5', 'KIF4A', 'RANGAP1', 'CEP128', 'ZMYND8', 'TUBD1', 'NEIL3', 'HSPA8', 'FOXM1', 'CEP70', 'SFPQ', 'CDC20', 'NEK2', 'CENPF', 'KIF14', 'CEP89', 'KIF18A', 'CIT', 'TUBA1B', 'STIL', 'HJURP', 'CKS2', 'DLGAP5', 'MIS18BP1', 'SGO1', 'TOP2A', 'CCNB1', 'CENPE', 'DIAPH3', 'TICRR', 'CCNA2', 'MKI67', 'SOGA1', 'SCLT1', 'SPC25', 'POC5', 'CCNB2', 'CDC25C', 'RACGAP1', 'CCNF', 'KIAA1524', 'H2AFZ', 'PLK1', 'TUBA1C', 'TK1', 'CKAP2L', 'BUB1', 'CDK1', 'ARL6IP1', 'SHCBP1', 'RRM2', 'LCORL', 'AURKB', 'PAPPA', 'PRKX', 'CDCA2', 'H1FX', 'WWOX', 'KIF18B', 'PRELID2', 'ARHGAP11B', 'TUBB4B', 'H2AFX', 'TUBB', 'ARHGAP11A', 'PRC1', 'HSPA1B', 'HSPA1A', 'MT-RNR1', 'MXD3', 'AC073529.1', 'MALAT1', 'LINC01572', 'AC016205.1']\n\nprint( len(s_genes), len(g2m_genes) )\ns_genes = list( set(adata.var_names) & set(s_genes) )\ng2m_genes = list( set(adata.var_names) & set(g2m_genes) )\nprint( len(s_genes), len(g2m_genes) )\n\ngenes_selected_AZ = s_genes + g2m_genes\nprint(type(genes_selected_AZ), len(genes_selected_AZ) )\n","1e74750b":"genes_selected = genes_selected_AZ\n\nvec_color_by = adata.obs.phase.values\n\n\nmask = genes[1].isin( list( genes_selected ) )\nIX_cc = np.where(mask > 0)[0]\nIX_cc, \n\nprint('Number of selected genes: ', len(IX_cc) )\n\nfrom sklearn.decomposition import TruncatedSVD\nimport time\n\nt00 = time.time()\n\nm3 = m2.copy()#  != 0 # \nm3 = m3[:,IX_cc]\n\nif 0: # drop top expressed genes\n    count_drop_top_expressed_genes = 10 # ]: # range(10,100,10):\n    v = np.asarray(m2.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n    if count_made_zeros != 0:\n        m3 = m3[:,IX[:-count_drop_top_expressed_genes]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\nX = svd.fit_transform(m3)\nprint(time.time() - t0, 'seconds passed on svd')\nt0 = time.time()\n\nimport umap\nfrom sklearn import manifold\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import NMF\nfrom sklearn.decomposition import FastICA\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.ensemble import RandomTreesEmbedding\nfrom sklearn.random_projection import SparseRandomProjection\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import TruncatedSVD\n\n\nfrom collections import OrderedDict\nfrom functools import partial\nfrom matplotlib.ticker import NullFormatter\n\n\n\nn_neighbors = 10\nn_components = 2\n# Set-up manifold methods\nLLE = partial(manifold.LocallyLinearEmbedding,\n              n_neighbors, n_components, eigen_solver='auto')\n\nmethods = OrderedDict()\nmethods['PCA'] = PCA()\nmethods['umap'] = umap.UMAP(n_components = n_components)\nmethods['t-SNE'] = manifold.TSNE(n_components=n_components, init='pca', random_state=0)\nmethods['NCIvis'] = ncvis.NCVis()\nmethods['trimap'] = trimap.TRIMAP()\nmethods['ICA'] = FastICA(n_components=n_components,         random_state=0)\nmethods['FA'] = FactorAnalysis(n_components=n_components, random_state=0)\nmethods['LLE'] = LLE(method='standard')\nmethods['Modified LLE'] = LLE(method='modified')\nmethods['Isomap'] = manifold.Isomap(n_neighbors, n_components)\nmethods['MDS'] = manifold.MDS(n_components, max_iter=100, n_init=1)\nmethods['SE'] = manifold.SpectralEmbedding(n_components=n_components,\n                                           n_neighbors=n_neighbors)\nmethods['NMF'] = NMF(n_components=n_components,  init='random', random_state=0) \nmethods['RandProj'] = SparseRandomProjection(n_components=n_components, random_state=42)\n\nrand_trees_embed = make_pipeline(RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5), TruncatedSVD(n_components=n_components) )\nmethods['RandTrees'] = rand_trees_embed\nmethods['LatDirAll'] = LatentDirichletAllocation(n_components=n_components,  random_state=0)\nmethods['LTSA'] = LLE(method='ltsa') \nmethods['Hessian LLE'] = LLE(method='hessian') \n\nlist_fast_methods = ['PCA','umap','FA', 'ICA','NMF','RandProj','RandTrees']\nlist_slow_methods = ['t-SNE','LLE','Modified LLE','Isomap','MDS','SE','LatDirAll','LTSA','Hessian LLE']\n\n# transformer = NeighborhoodComponentsAnalysis(init='random',  n_components=2, random_state=0) # Cannot be applied since supervised - requires y \n# methods['LinDisA'] = LinearDiscriminantAnalysis(n_components=n_components)# Cannot be applied since supervised - requires y \n\n\n# Create figure\nfig = plt.figure(figsize=(25, 16))\n\n# Plot results\nc = 0\nfor i, (label, method) in enumerate(methods.items()):\n    #if label in ['umap']: continue\n    if 0:\n        if label not in  list_fast_methods :\n            continue\n        \n    t0 = time.time()\n    try:\n        r = method.fit_transform(X.copy())\n    except:\n        print('Got Exception', label )\n        continue \n    t1 = time.time()\n    print(\"%s: %.2g sec\" % (label, t1 - t0))\n    \n    if 1:\n        c+=1\n        fig.add_subplot(2, 3 , c) \n        sns.scatterplot(x=r[:,0],y=r[:,1]  , hue= vec_color_by )#  cell_lines_tissues_top_truncated, style =cell_lines_tissues_top_truncated , s = 250 )# df['drug'] ,  style=df['dose'])\n        plt.title(label )\n        plt.legend()\n        if c == 6:\n            plt.show()\n            fig = plt.figure(figsize=(25, 16))\n            c = 0\n","113a5341":"print(time.time()-t0_start,'secondas passed total')","ab863866":"# Visualization based on marker genes ","7a148d28":"# What is about ? \n\nHere we show various visualizations for single-cell data file obtained from sciPlex2 with zero dose.\n\nWe load data matrix in sparse format and add informations saved in other files.\n","21aeffd1":"# Visualization is done on subset of cell cycle related genes","8de197da":"# Visualuzations by many methods ","2047f37d":"# Filter genes by variance  - take top 10 000 \n\n\nin our case filtering by variance is more or less the same as by expression sum\n\nthere is NO built-in variance calculation for sparse matrices in python, so we calculate by hands ","79791af3":"# Load expression matrix in sparse format\n\n\n3500 cells x 58347 genes ","f510febb":"# Visualization - UMAP ( preceded by svd to 50 dimensions) \n\n\nAlso droping out 10 most expressed components","9bd267a2":"# Load genes names \n\n58347 genes","bc57c62c":"# Avoid duplicate gene names\n\namong all 10 000 only MALAT1 repeated twice - with different ensemble ID , so we correct it by adding part of Ensemble ID to second gene symbol","6486669b":"# Genes selected by AZ based on ICA (using specifics of the current dataset)","0aa44aba":"## Load list of cell cycle genes","c590d58e":"## Prepare list of phase marker genes \n\nSee detailes here: https:\/\/www.kaggle.com\/alexandervc\/cell-cycle-markers-compare \n\nBased on Tirosh 2016 and Scanpy cell cycle tutorial \n","5bd3e655":"## Calculate variance","da2dd5ed":"## Create scores and phase marker by scanpy","6d606de9":"# Markers of cell cycle with SCANPY ","5dc8e45e":"## do filtering ","8e8ace09":"## prepare 10000 indexes","01dcbba6":"## Create List of positions of cell cycle genes","32a20e39":"# Visualizations on subset of cell cycle  genes ","4bac99b0":"# Start processing","372a67eb":"# Log and normalization "}}