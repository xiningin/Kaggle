{"cell_type":{"3ad85eb8":"code","451bd065":"code","d4211c34":"code","d0b2515c":"code","f1005e21":"code","f256c19b":"code","b67b5246":"code","d98fee52":"code","9477d1df":"code","6fb9c7a7":"code","8974fb5f":"code","0761a19b":"code","d520b473":"code","ad256580":"code","1a189530":"code","c5f5b0a8":"code","209b5e91":"code","66d7de41":"code","d5dff44c":"code","e1067cb8":"code","00bbc873":"code","bf3259ed":"code","c8f1c2dc":"code","b6bef6e2":"code","7a616032":"code","704f89d3":"code","685899f7":"code","2f6ea41f":"code","dfded976":"code","722bbce6":"code","842bc8e2":"code","253aff60":"code","1e8602a5":"code","a5d4f443":"code","7de0c316":"markdown","334c683a":"markdown","875c7373":"markdown","745f38ab":"markdown","7d353f93":"markdown","2445cc36":"markdown","cd49fc8c":"markdown","1d096306":"markdown","3f271e77":"markdown","3ba792c5":"markdown","6421f4e2":"markdown","d12c60aa":"markdown","530014e9":"markdown","85293d5c":"markdown","f3aee4a5":"markdown","d385d192":"markdown","7088b85f":"markdown","d6e9985d":"markdown","674fbc93":"markdown","f9e19777":"markdown","b51aa960":"markdown","13ef212f":"markdown","e5eddd80":"markdown","7a5aae49":"markdown","d4198b17":"markdown","afad1599":"markdown","49fdf95e":"markdown","255f4486":"markdown","5085b7b2":"markdown","06365c50":"markdown","918f7d97":"markdown","1dc1b423":"markdown","a0556093":"markdown","949c6b42":"markdown","77a65de3":"markdown","15d1af28":"markdown","41ecf181":"markdown","b594dcaf":"markdown","9ce899bc":"markdown","c7f69d92":"markdown","c7640767":"markdown","93f6ee9b":"markdown","7bc97fe1":"markdown","e8b11efc":"markdown","6c28f3f2":"markdown","1419fada":"markdown","363ce9e9":"markdown","92a4a716":"markdown","b10e19ab":"markdown","ea21c231":"markdown","88e4b927":"markdown","44f7dbf2":"markdown","87d91b74":"markdown","8fa89042":"markdown","0ff5d1a9":"markdown","1f6b5e2d":"markdown","93af618c":"markdown","3501dc6e":"markdown","8208a092":"markdown","7b8695a7":"markdown"},"source":{"3ad85eb8":"import pandas as pd\nimport numpy as np\nimport matplotlib \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport json\nimport re\nfrom collections import Counter,OrderedDict\nfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout\nimport ipywidgets as widgets\n'''\nimport gmaps\nimport gmaps.datasets\ngmaps.configure(api_key=\" \") # Your Google API key\n\nAS kaggle wont render gmaps im commenting this section also I have used images for output whenever gmaps is used\n'''","451bd065":"df=pd.read_csv('..\/input\/zomato-india-restaurants2-lakh-restaurants-data\/data\/india_all_restaurants_details.csv')","d4211c34":"df.set_index('zomato_url',inplace=True)\ndf.drop('sno',axis=1,inplace=True)\ndf.drop('Unnamed: 0',axis=1,inplace=True)\ndf.columns","d0b2515c":"def clean_data(row):\n    '''\n    impose none\n    '''\n    for cell in ['rating','rating_count','telephone','cusine','cost_for_two']:\n        try:\n            if float(row[cell]) == 0:\n                row[cell] =None\n        except:\n            pass \n    if str(row['rating']) == \"NEW\" or str(row['rating']) == \"Nov\u00e9\":\n        row['rating']=None\n    elif row['rating'] is not None :\n        \n        row['rating'] =float(row['rating'] ) \n        \n    '''\n    change quotes in timing from other language\n    (this is because of unknown causes during scraping of data)\n    to english\n    '''\n    if type(row['timings'])==str:\n            row['timings']=row['timings'].replace(\"'\",'\"')\n            \n            row['timings']=row['timings'].replace(\"Pon\",'Mon')\n            row['timings']=row['timings'].replace(\"Uto\",'Tue')\n            row['timings']=row['timings'].replace(\"Str\",'Wed')\n            row['timings']=row['timings'].replace(\"\u0160tv\",'Thu')\n            row['timings']=row['timings'].replace(\"Pia\",'Fri')\n            row['timings']=row['timings'].replace(\"Sob\",'Sat')\n            row['timings']=row['timings'].replace(\"Ned\",'Sun')\n            \n            row['timings']=row['timings'].replace(\"Lun\",'Mon')\n            row['timings']=row['timings'].replace(\"Mar\",'Tue')\n            row['timings']=row['timings'].replace(\"Mer\",'Wed')\n            row['timings']=row['timings'].replace(\"Gio\",'Thu')\n            row['timings']=row['timings'].replace(\"Ven\",'Fri')\n            row['timings']=row['timings'].replace(\"Sab\",'Sat')\n            row['timings']=row['timings'].replace(\"Dom\",'Sun')\n            \n            row['timings']=row['timings'].replace(\"Po\",'Mon')\n            row['timings']=row['timings'].replace(\"\u00dat\",'Tue')\n            row['timings']=row['timings'].replace(\"St\",'Wed')\n            row['timings']=row['timings'].replace(\"\u010ct\",'Thu')\n            row['timings']=row['timings'].replace(\"P\u00e1\",'Fri')\n            row['timings']=row['timings'].replace(\"So\",'Sat')\n            row['timings']=row['timings'].replace(\"Ne\",'Sun')\n            \n                        \n            row['timings']=row['timings'].replace(\"Pts\",'Mon')\n            row['timings']=row['timings'].replace(\"Sa\",'Tue')\n            row['timings']=row['timings'].replace(\"\u00c7r\u015f\",'Wed')\n            row['timings']=row['timings'].replace(\"Pr\u015f\",'Thu')\n            row['timings']=row['timings'].replace(\"Cum\",'Fri')\n            row['timings']=row['timings'].replace(\"Cts\",'Sat')\n            row['timings']=row['timings'].replace(\"Paz\",'Sun')\n            \n            row['timings']=row['timings'].replace(\"Wt\",'Tue')\n            row['timings']=row['timings'].replace(\"\u015ar\",'Wed')\n            row['timings']=row['timings'].replace(\"Czw\",'Thu')\n            row['timings']=row['timings'].replace(\"Pt\",'Fri')\n            row['timings']=row['timings'].replace(\"Sb\",'Sat')\n            row['timings']=row['timings'].replace(\"Nd\",'Sun')\n            \n            row['timings']=row['timings'].replace(\"Tuet\",'Sat')\n            row['timings']=row['timings'].replace(\"Zamkni\u0119te\",'Closed')\n            row['timings']=row['timings'].replace(\"Zatvoren\u00e9\",'Closed')\n            \n            '''\n            change timings from format 10am - 8pm to\n            [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0]\n            '''    \n            timings=json.loads(row['timings'])\n            new_timings=dict()\n            for key,value in timings.items():\n                if (value.find('24')>=0):\n                    new_timings[key]= [1 for i in range(24)]\n                    continue\n                if (value.find('Closed')>=0  ):\n                    new_timings[key]= [0 for i in range(24)]\n                    continue\n\n                value=value.replace(\" do \",\"\u2013\")\n                value=value.replace(\" a \",\"\u2013\")\n                value=value.replace(\"-\",\"\u2013\")\n                value=value.replace(\"midnight\",\"am\")\n                value=value.replace(\"noon\",\"pm\")\n                value=value.replace(\"PM\",\"pm\")\n                value=value.replace(\"AM\",\"pm\")\n                value=value.replace(\"12 am\",\"0 am\")\n                value=value.replace(\"12am\",\"0am\")\n\n                if (not value.find('\u2013')>=0  ):\n                    new_timings[key]= [0 for i in range(24)]\n                    fff.append(value)\n                    continue\n\n                _temp=[0 for i in range(24)]\n                _time=value.split(',')\n                for t in _time:\n                    hour=[0,0]\n                    mins=[0,0]\n                    j=0\n                    for i in t.split(\"\u2013\"):\n                        try:\n                            ___==int(re.findall(\"\\d+\", i)[0])\n                        except:\n                            print(key,value,t,i)\n                        if \"12\" in i and \"am\" in i:\n                            i=i.replace(\"12\",\"0\")\n                        #hour[j]=int(re.findall(\"\\d+\", i)[0])\n                        tym=i.replace(\"pm\",\"\").replace(\"am\",\"\").split(\":\")\n                        hour[j]=int(tym[0])\n                        if(len(tym)>1):\n                            if(int(tym[1])<=15):\n                                mins[j]= float( 0.25 )\n                            elif(int(tym[1])<=30):\n                                mins[j]=float( 0.50)\n                            elif(int(tym[1])<=45):\n                                mins[j]=float( 0.75)\n\n                        if(i.find('pm')>=0):\n                            if not i.find('12')>=0:\n                                hour[j]=hour[j]+12 \n                        j=j+1\n\n                    for i in range(hour[0],hour[0]+23):\n                        if i%24 ==hour[1]:\n                            if mins[1]>0:\n                                _temp[i%24]=mins[1]\n                            break;\n                        _temp[i%24]=1\n                        if i==hour[0]:\n                            if mins[0]>0:\n                                _temp[i%24]=mins[0]\n                new_timings[key]=_temp\n            row['timings']=new_timings\n    if type(row['cost_for_two'])==str:\n            row['cost_for_two']=int(row['cost_for_two'].replace(',',''))\n\n    '''\n    Get latitude and longitide coordinates seperately and impose none if\n    the values are not in range.\n    '''\n    lat,long=row['coordinates'].split(',')\n    long=float(long)\n    lat=float(lat)\n    if long > 180  or long < -180 or lat > 90  or lat < -90:\n        lat=None\n        long=None\n    row['longitude']=long\n    row['latitude']=lat\n    del row['coordinates']\n    \n    \n    return row\n\n\n ","f1005e21":"df=df.apply(clean_data,axis=1)","f256c19b":"\ndf.to_csv(\"..\/input\/zomato-india-restaurants2-lakh-restaurants-data\/data\/indian_restaurants_details_cleaned_data.csv\")","b67b5246":"df=pd.read_csv('..\/input\/zomato-india-restaurants2-lakh-restaurants-data\/data\/indian_restaurants_details_cleaned_data.csv')\ndf.head()","d98fee52":"def find_famous_cusines(data_frame,title,min_no_of_cusines):    \n    cusines=data_frame['cusine'].dropna()\n    all_cus=list()\n    for cusine in cusines:\n            temp=cusine.split(',')\n            for t in temp:\n                all_cus.append(t.strip().lower())\n    cusines_counter=dict(Counter(all_cus))\n    cusine_dict= OrderedDict()\n    cusine_list=[]\n    counter_list=[]\n    \n    for key, value in sorted(cusines_counter.items(), key=lambda item: item[1],reverse=True ):\n        cusine_dict[key]=value\n        if value > min_no_of_cusines:\n            cusine_list.append(key)\n            counter_list.append(value)\n    sns.set(style=\"whitegrid\")\n    plt.figure(figsize=(15,10))  \n    sns.barplot(x= counter_list,y=cusine_list)\n    plt.xlabel(\"Number of restaurants\",size=18)\n    plt.title(title,size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(12)\n    plt.show()\n#Famous cusines - india\nfind_famous_cusines(df,\"Famous cusines around the country\",1000)\n\n#Famous cusines - chennai\ndf_chennai=df[df.city==\"Chennai\"]\nfind_famous_cusines(df_chennai,\"Famous cusines around Chennai city\",200)","9477d1df":"@interact\ndef show_famous_cusines(min_no_of_cusines=widgets.IntSlider(description='Cusines with restaurants count more than',min=100,max=25000,step=500,value=1000, continuous_update=False,style = {'description_width': 'initial'},layout=Layout(width='50%', height='80px'))\n                 ,city=widgets.Dropdown(\n    options=df.city.unique(),\n    value='Chennai',\n    description='City:',\n    disabled=False,\n)          ):\n    try:\n        df_city=df[df.city==city]\n        cusines=df_city['cusine'].dropna()\n        all_cus=list()\n        for cusine in cusines:\n                temp=cusine.split(',')\n                for t in temp:\n                    all_cus.append(t.strip().lower())\n        cusines_counter=dict(Counter(all_cus))\n        cusine_dict= OrderedDict()\n        cusine_list=[]\n        counter_list=[]\n\n\n        for key, value in sorted(cusines_counter.items(), key=lambda item: item[1],reverse=True ):\n            cusine_dict[key]=value\n            if value > min_no_of_cusines:\n                cusine_list.append(key)\n                counter_list.append(value)\n        sns.set(style=\"whitegrid\")\n        plt.figure(figsize=(15,10))  \n        sns.barplot(x= counter_list,y=cusine_list)\n        #sns.barh(cusine_list, counter_list)\n        plt.xlabel(\"Number of restaurants\",size=18)\n        plt.title(\"Find the famous cusines around the country\",size=24)\n        for tick in plt.gca().get_yticklabels():\n            tick.set_fontsize(14)\n        plt.show()\n    except:\n        print(\"please reduce the count...\")\n    \n\n\n   ","6fb9c7a7":"\nindia_map_df = df[['latitude', 'longitude']]\nindia_map_df=india_map_df[(india_map_df.latitude > 0) & (india_map_df.longitude >0) ]\nindia_map_df.dropna(inplace=True)\nheatmap = gmaps.heatmap_layer(india_map_df)\nheatmap.max_intensity = 5000\nheatmap.point_radius = 10\ncentre_coord=(np.mean( india_map_df.latitude),np.mean( india_map_df.longitude))\nfig = gmaps.figure(center=centre_coord,zoom_level=4)\nfig.add_layer(heatmap)\nfig\n","8974fb5f":"df_chennai=df[df.city==\"Chennai\"]\nchennai_map_df = df_chennai[['latitude', 'longitude']]\nchennai_map_df=chennai_map_df[(chennai_map_df.latitude > 0) & (chennai_map_df.longitude >0) ]\nchennai_map_df.dropna(inplace=True)\nheatmap_chennai = gmaps.heatmap_layer(chennai_map_df)\nheatmap_chennai.max_intensity = 20\nheatmap_chennai.point_radius = 5\n\ncentre_coord_chennai=(np.mean( chennai_map_df.latitude),np.mean( chennai_map_df.longitude))\nfig_chennai = gmaps.figure(center=centre_coord_chennai,zoom_level=10)\nfig_chennai.add_layer(heatmap_chennai)\nfig_chennai\n","0761a19b":"@interact\ndef show_heatmap_of_restaurants(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):   \n    df_city=df[df.city==city]\n    city_map_df = df_city[['latitude', 'longitude']]\n    city_map_df=city_map_df[(city_map_df.latitude > 0) & (city_map_df.longitude >0) ]\n    city_map_df.dropna(inplace=True)\n    heatmap_city = gmaps.heatmap_layer(city_map_df)\n    heatmap_city.max_intensity = 20\n    heatmap_city.point_radius = 5\n\n    centre_coord_city=(np.mean( city_map_df.latitude),np.mean( city_map_df.longitude))\n    fig_city = gmaps.figure(center=centre_coord_city,zoom_level=10)\n    fig_city.add_layer(heatmap_city)\n    display(fig_city)","d520b473":"restaurant_chains=df.city.value_counts()[:10]\n\nfig1, ax1 = plt.subplots(figsize=(20,10))\npatches, texts, autotexts=ax1.pie(restaurant_chains.values,  labels=restaurant_chains.index, autopct='%1.1f%%',\n        shadow=True, startangle=0)\nax1.axis('equal')\nplt.title(\"Restaurant distribution of top Cities in India\",size=24)\nfor text in texts:\n    text.set_fontsize(15)\nfor text in autotexts:\n    text.set_fontsize(15)\nplt.show()","ad256580":"def find_famous_restaurant_chains(title,df):\n    restaurant_chains=df.name.value_counts()[:25]\n    sns.set(style=\"whitegrid\")\n    plt.figure(figsize=(15,10))  \n    sns.barplot(x= restaurant_chains.values,y=restaurant_chains.index)\n    plt.xlabel(\"Numer of outlets\",size=18)\n    plt.title(title,size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(14)\n    \n    plt.show()\nfind_famous_restaurant_chains(\"Famous restaurant chains in India\",df)\nfind_famous_restaurant_chains(\"Famous restaurant chains in Chennai\",df[df.city==\"Chennai\"])","1a189530":"@interact\ndef show_famous_restaurant_chains(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    restaurant_chains=df[df.city==city].name.value_counts()[:25]\n    sns.set(style=\"whitegrid\")\n    plt.figure(figsize=(15,10))  \n    sns.barplot(x= restaurant_chains.values,y=restaurant_chains.index)\n    plt.xlabel(\"Numer of outlets\",size=18)\n    plt.title(\"Famous restaurant chains in \"+city,size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(14)\n    plt.show()\n","c5f5b0a8":"plt.figure(figsize=(15,10)) \nsns.distplot(df.rating.dropna(),bins=30,color='b',kde_kws={\"color\": \"g\"})\nplt.ylabel(\"Probability\")\nplt.xlabel(\"Restaurant Rating\")\nplt.title(\"Rating distribution \",size=24)\nplt.show()","209b5e91":"fig, ax = plt.subplots(figsize =(15,10)) \nplt.subplot(1,2,1)\nsns.boxplot(y=df.cost_for_two.dropna())\nplt.ylabel(\"Cost for two\")\nplt.title(\"Cost distribution box plot \",size=20)\nplt.subplot(1,2,2)\nsns.boxplot( y = df.cost_for_two.dropna()[(df.cost_for_two<1000)])\nplt.ylabel(\"Cost for two\")\nplt.title(\"Cost distribution - zoomed in \",size=20)\nplt.suptitle(\"Cost distribution\",size=24)\nplt.show()","66d7de41":"def plot_famous_food_static(df_food,title):\n    famous_food_df=df_food.famous_food.dropna()\n    famous_food_list=[]\n    for food in famous_food_df:\n            temp=food.split(',')\n            for t in temp:\n                # this commented code was to split the food name and take the second part of name\n                # for counting.for example, chicken biriyani -> biriyani. \n                # If we do so biriyani count will increase\n                ''''t=t.split()\n                if len(t) >1:\n                    t=t[1]\n                else:\n                    t=t[0]'''\n                famous_food_list.append(t.strip().lower())\n\n    famous_food_df= pd.Series( famous_food_list)\n    famous_food_list=famous_food_df.value_counts()[:25]\n\n    plt.figure(figsize=( 15,10))\n    sns.barplot(x=famous_food_list.values,y=famous_food_list.index)\n    plt.title(title,size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(14)\n    plt.xlabel(\"Number of restaurants\",size=18)\n    plt.show()\nplot_famous_food_static(df,\"Famous food in India\")\n\nplot_famous_food_static(df[df.city==\"Chennai\"],\"Famous food in Chennai\")","d5dff44c":"@interact\ndef plot_famous_food_dynamic(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    famous_food_df=df[df.city==city].famous_food.dropna()\n    famous_food_list=[]\n    for food in famous_food_df:\n            temp=food.split(',')\n            for t in temp:\n                # this commented code was to split the food name and take the second part of name\n                # for counting.for example, chicken biriyani -> biriyani. \n                # If we do so biriyani count will increase\n                '''t=t.split()\n                if len(t) >1:\n                    t=t[1]\n                else:\n                    t=t[0]'''\n                famous_food_list.append(t.strip().lower())\n\n    famous_food_df= pd.Series( famous_food_list)\n    famous_food_list=famous_food_df.value_counts()[:25]\n\n    plt.figure(figsize=( 15,10))\n    sns.barplot(x=famous_food_list.values,y=famous_food_list.index)\n    plt.title(\"Famous food in \"+str(city),size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(14)\n    plt.xlabel(\"Number of restaurants\",size=18)\n    plt.show()    \n    ","e1067cb8":"def plot_online_orders_static(df_oo,title):\n    online_orders=df_oo.online_order.value_counts()\n\n    idx_list=online_orders.index.tolist()\n    \n    if idx_list[0]==True:\n        idx_list[0]=\"Yes\"\n        idx_list[1]=\"No\"\n    else:\n        idx_list[1]=\"Yes\"\n        idx_list[0]=\"No\"\n    online_orders.index=idx_list \n    \n    plt.figure(figsize=(15,10))\n    plt.pie(x=online_orders.values,labels=online_orders.index, autopct='%1.1f%%',\n            shadow=True, startangle=90,textprops={'size':20})\n    plt.title(title,size=24)\n    plt.show()\n\n#plot_online_orders_static(df,\"Restaurants accepting online orders - India\")\nplot_online_orders_static(df[df.city==\"Chennai\"],\"Restaurants accepting online orders - Chennai\")   \n    \n    ","00bbc873":"@interact\ndef plot_famous_food_dynamic(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    online_orders=df[df.city==city].online_order.value_counts()\n    \n    idx_list=online_orders.index.tolist()\n    if idx_list[0]==True:\n        idx_list[0]=\"yes\"\n        idx_list[1]=\"No\"\n    else:\n        idx_list[1]=\"yes\"\n        idx_list[0]=\"No\"\n    online_orders.index=idx_list \n    \n    plt.figure(figsize=(15,10))\n    plt.pie(x=online_orders.values,labels=online_orders.index, autopct='%1.1f%%',\n            shadow=True, startangle=90,textprops={'size':20},explode=(0,0.05))\n    plt.title(\"Restaurants accepting online orders - \"+str(city),size=24)\n    plt.show()","bf3259ed":"def plot_table_reserve_static(df_tr,title):\n    table_reserve=df_tr.table_reservation.value_counts()\n\n    idx_list=table_reserve.index.tolist()\n    if idx_list[0]==True:\n        idx_list[0]=\"yes\"\n        idx_list[1]=\"No\"\n    else:\n        idx_list[1]=\"yes\"\n        idx_list[0]=\"No\"\n    table_reserve.index=idx_list \n    \n    plt.figure(figsize=(15,10))\n    plt.pie(x=table_reserve.values,labels=table_reserve.index, autopct='%1.1f%%',\n            shadow=True, startangle=0,textprops={'size':20})\n    plt.title(title,size=24)\n    plt.gca().axis('equal')\n    plt.show()\n\nplot_table_reserve_static(df,\"Restaurants accepting table reservation - India\")\nplot_table_reserve_static(df[df.city==\"Chennai\"],\"Restaurants accepting table reservation - Chennai\")   \n    \n    ","c8f1c2dc":"@interact\ndef plot_famous_food_dynamic(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    table_reserve=df[df.city==city].table_reservation.value_counts()\n\n    idx_list=table_reserve.index.tolist()\n    if idx_list[0]==True:\n        idx_list[0]=\"yes\"\n        idx_list[1]=\"No\"\n    else:\n        idx_list[1]=\"yes\"\n        idx_list[0]=\"No\"\n    table_reserve.index=idx_list \n\n    plt.figure(figsize=(15,10))\n    plt.pie(x=table_reserve.values,labels=table_reserve.index, autopct='%1.1f%%',\n            shadow=True, startangle=90,textprops={'size':20},explode=(0,0.05))\n    plt.title(\"Restaurants accepting table reservation - \"+str(city),size=24)\n    plt.show()","b6bef6e2":"def plot_delivery_only_static(df_tr,title):\n    delivery_only=df_tr.delivery_only.value_counts()\n\n    idx_list=delivery_only.index.tolist()\n    if idx_list[0]==True:\n        idx_list[0]=\"yes\"\n        idx_list[1]=\"No\"\n    else:\n        idx_list[1]=\"yes\"\n        idx_list[0]=\"No\"\n    delivery_only.index=idx_list \n    \n    plt.figure(figsize=(15,10))\n    plt.pie(x=delivery_only.values,labels=delivery_only.index, autopct='%1.1f%%',\n            shadow=True, startangle=0,textprops={'size':20})\n    plt.title(title,size=24)\n    plt.gca().axis('equal')\n    plt.show()\n\nplot_delivery_only_static(df,\"Delivery only restaurants - India\")\nplot_delivery_only_static(df[df.city==\"Chennai\"],\"Delivery only restaurants - Chennai\")   \n    \n    ","7a616032":"@interact\ndef plot_delivery_only_dynamic(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    delivery_only=df[df.city==city].delivery_only.value_counts()\n\n    idx_list=delivery_only.index.tolist()\n    if idx_list[0]==True:\n        idx_list[0]=\"yes\"\n        idx_list[1]=\"No\"\n    else:\n        idx_list[1]=\"yes\"\n        idx_list[0]=\"No\"\n    delivery_only.index=idx_list \n\n    plt.figure(figsize=(15,10))\n    plt.pie(x=delivery_only.values,labels=delivery_only.index, autopct='%1.1f%%',\n            shadow=True, startangle=90,textprops={'size':20})\n    plt.title(\"Delivery only restaurants - \"+str(city),size=24)\n    plt.show()","704f89d3":"g_days={}\ndef get_timings(row):\n    global g_days\n    if type(row) is str:\n        try:\n            days = json.loads(row.replace(\"'\",'\"'))\n            for day in days:\n                for hour,state in enumerate( days[day]):\n                    if state > 0:\n                        g_days[day][hour] =g_days[day][hour]+ state\n        except:\n            print(row)\n    else:\n        pass\n    return row","685899f7":"def plot_restaurants_open_static(df_tr,title):\n    global g_days\n    g_days={'Mon': np.zeros(24), 'Tue': np.zeros(24), 'Wed': np.zeros(24), 'Thu': np.zeros(24), 'Fri': np.zeros(24), 'Sat': np.zeros(24), 'Sun': np.zeros(24)}\n    _=df_tr['timings'].apply(get_timings)\n    \n    plt.figure(figsize=(12,7))\n    plt.plot(np.arange(0,24), g_days['Mon'])\n    plt.plot(np.arange(0,24), g_days['Tue'])\n    plt.plot(np.arange(0,24), g_days['Wed'])\n    plt.plot(np.arange(0,24), g_days['Thu'])\n    plt.plot(np.arange(0,24), g_days['Fri'])\n    plt.plot(np.arange(0,24), g_days['Sat'])\n    plt.plot(np.arange(0,24), g_days['Sun'])\n    plt.legend(('Mon', 'Tue', 'Wed','Thu','Fri','Sat','Sun'),\n               loc='upper right')\n    plt.title(title,size=20)\n    plt.ylabel(\"Number of open restaurants\")\n    plt.xlabel(\"Hours of the day (0-23)\")\n    plt.show()\n\nplot_restaurants_open_static(df,\"At what time most of the restaurants remains open - India?\")\nplot_restaurants_open_static(df[df.city==\"Chennai\"],\"At what time most of the restaurants remains open - Chennai?\")","2f6ea41f":"@interact\ndef plot_restaurants_open_static(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    global g_days\n    g_days={'Mon': np.zeros(24), 'Tue': np.zeros(24), 'Wed': np.zeros(24), 'Thu': np.zeros(24), 'Fri': np.zeros(24), 'Sat': np.zeros(24), 'Sun': np.zeros(24)}\n    df_tr=df[df.city==city]\n    _=df_tr['timings'].apply(get_timings)\n    \n    plt.figure(figsize=(12,7))\n    plt.plot(np.arange(0,24), g_days['Mon'])\n    plt.plot(np.arange(0,24), g_days['Tue'])\n    plt.plot(np.arange(0,24), g_days['Wed'])\n    plt.plot(np.arange(0,24), g_days['Thu'])\n    plt.plot(np.arange(0,24), g_days['Fri'])\n    plt.plot(np.arange(0,24), g_days['Sat'])\n    plt.plot(np.arange(0,24), g_days['Sun'])\n    plt.legend(('Mon', 'Tue', 'Wed','Thu','Fri','Sat','Sun'),\n               loc='upper right')\n    plt.title(\"At what time most of the restaurants remains open - \"+str(city),size=20)\n    plt.ylabel(\"Number of open restaurants\")\n    plt.xlabel(\"Hours of the day (0-23)\")\n    plt.show()","dfded976":"def get_night_restaurants(row): \n    timings=row['timings']\n    if type(timings) is str:\n        days = json.loads(timings.replace(\"'\",'\"'))\n        day=\"Mon\"\n        for hour,state in enumerate( days[day]):\n                if state > 0 and (hour<5 ):\n                    return row","722bbce6":"chennai_map_df=df[df.city==\"Chennai\"]\nchennai_map_df = chennai_map_df.apply(get_night_restaurants,axis=1,result_type='broadcast')\nchennai_map_df.dropna(inplace=True)\n\nchennai_map_df = chennai_map_df[['latitude', 'longitude']]\nchennai_map_df=chennai_map_df[(chennai_map_df.latitude > 0) & (chennai_map_df.longitude >0) ]\n\n\nheatmap_chennai = gmaps.heatmap_layer(chennai_map_df)\nheatmap_chennai.max_intensity = 10\nheatmap_chennai.point_radius = 5\n\ncentre_coord_chennai=(np.mean( chennai_map_df.latitude),np.mean( chennai_map_df.longitude))\nfig_chennai = gmaps.figure(center=centre_coord_chennai,zoom_level=10)\nfig_chennai.add_layer(heatmap_chennai)\nfig_chennai","842bc8e2":"@interact\ndef plot_restaurants_open_dynamic(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    city_map_df=df[df.city==city]\n    city_map_df = city_map_df.apply(get_night_restaurants,axis=1,result_type='broadcast')\n    city_map_df.dropna(inplace=True)\n\n    city_map_df = city_map_df[['latitude', 'longitude']]\n    city_map_df=city_map_df[(city_map_df.latitude > 0) & (city_map_df.longitude >0) ]\n    if city_map_df.count().latitude <1:\n        return \"No restaurants available\"\n\n    heatmap_city = gmaps.heatmap_layer(city_map_df)\n    heatmap_city.max_intensity = 10\n    heatmap_city.point_radius = 5\n\n    centre_coord_city=(np.mean( city_map_df.latitude),np.mean( city_map_df.longitude))\n    fig_city = gmaps.figure(center=centre_coord_city,zoom_level=10)\n    fig_city.add_layer(heatmap_city)\n    display(fig_city)","253aff60":"def get_midnight_restaurants(row): \n    timings=row['timings']\n    if type(timings) is str:\n        days = json.loads(timings.replace(\"'\",'\"'))\n        day=\"Mon\"\n        for hour,state in enumerate( days[day]):\n                if state > 0 and (hour<5 ):\n                    return row","1e8602a5":"def find_famous_cusines_at_midnight(data_frame,title,min_no_of_cusines): \n    data_frame = data_frame.apply(get_midnight_restaurants,axis=1,result_type='broadcast')\n    data_frame.dropna(inplace=True)\n    cusines=data_frame['cusine'].dropna()\n    all_cus=list()\n    for cusine in cusines:\n            temp=cusine.split(',')\n            for t in temp:\n                all_cus.append(t.strip().lower())\n    cusines_counter=dict(Counter(all_cus))\n\n    cusine_dict= OrderedDict()\n    cusine_list=[]\n    counter_list=[]\n    \n    for key, value in sorted(cusines_counter.items(), key=lambda item: item[1],reverse=True ):\n        cusine_dict[key]=value\n        if value > min_no_of_cusines:\n            cusine_list.append(key)\n            counter_list.append(value)\n    sns.set(style=\"whitegrid\")\n    plt.figure(figsize=(15,10)) \n\n    sns.barplot(x= counter_list,y=cusine_list)\n    plt.xlabel(\"Number of restaurants\",size=18)\n    plt.title(title,size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(12)\n    plt.show()\n#Famous cusines - india\nfind_famous_cusines_at_midnight(df,\"Famous midnight cusines around the country\",1000)\n\n#Famous cusines - chennai\ndf_chennai=df[df.city==\"Chennai\"]\nfind_famous_cusines_at_midnight(df_chennai,\"Famous midnight cusines around Chennai city\",20)","a5d4f443":"@interact\ndef find_famous_cusines_at_midnight_dynamic(city=widgets.Dropdown(options=df.city.unique(),value='Chennai', description='City:',disabled=False)):\n    min_no_of_cusines = 20\n    data_frame=df[df.city==city]\n    data_frame = data_frame.apply(get_midnight_restaurants,axis=1,result_type='broadcast')\n    data_frame.dropna(inplace=True)\n    cusines=data_frame['cusine'].dropna()\n    all_cus=list()\n    for cusine in cusines:\n            temp=cusine.split(',')\n            for t in temp:\n                all_cus.append(t.strip().lower())\n    cusines_counter=dict(Counter(all_cus))\n\n    cusine_dict= OrderedDict()\n    cusine_list=[]\n    counter_list=[]\n    \n    for key, value in sorted(cusines_counter.items(), key=lambda item: item[1],reverse=True ):\n        cusine_dict[key]=value\n        if value > min_no_of_cusines:\n            cusine_list.append(key)\n            counter_list.append(value)\n            \n    if len(cusine_list) <1:\n        return \"No data available\"\n    \n    sns.set(style=\"whitegrid\")\n    plt.figure(figsize=(15,10)) \n\n    sns.barplot(x= counter_list,y=cusine_list)\n    plt.xlabel(\"Number of restaurants\",size=18)\n    plt.title(\"Famous midnight cusines around \"+city+\" city\",size=24)\n    for tick in plt.gca().get_yticklabels():\n        tick.set_fontsize(12)\n    plt.show()\n","7de0c316":"## 12.2) Dynamic Chart","334c683a":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In India, we can see big red spots in Delhi, Kolkatta, Mumbai, Pune, Bangalore ,Hyderabad and Chennai.<br\/>\n    In chennai, we can see red spots in the middle of the city and along the OMR \n    <\/p>","875c7373":"# 1. Import libraries","745f38ab":"# 4. Find the famous cusines around the country","7d353f93":"## 15.2) Dymanic Chart","2445cc36":"# 10.Famous food around the country","cd49fc8c":"## 13.1) Static Chart","1d096306":"# 9. Cost distribution","3f271e77":"## 11.2) Dynamic Chart","3ba792c5":"## 15.1) Static Chart","6421f4e2":"# 14. At what time most of the restaurants remains open?","d12c60aa":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In Cennai most of the restaurants are open in the mid of the city.<br>\n    There is scope to open new restaurants along ECR and OMR.\n    <\/p>","530014e9":"![](https:\/\/github.com\/ngokulakannan\/zomato-india\/blob\/master\/images\/chennai%20heatmap.png?raw=true)","85293d5c":"## 14.1) Static Chart","f3aee4a5":"# <center>Zomato India Data Cleaning, Visualizing and Analysing patterns<\/center>","d385d192":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    Delhi takes the share of 25% of the top 10 cites followed by Mumbai, Bangalore, Pune, Hyderabad and Chennai.\n    <\/p>","7088b85f":"# 8. Rating distribution","d6e9985d":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    Most of the restaurants has the rating of 3 to 4. Spike reaches its peak by 3.2\n    <\/p>","674fbc93":"# 6.Restaurant distribution of top Cities in India","f9e19777":"## 10.1) Static Chart ","b51aa960":"\n# 5.Heatmap of number of restaurants around the country","13ef212f":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In India most of the rstaurants are open during 7-8 PM in the night.This applicable for Chennai also.<br\/>\n    Most of the cities follows the same pattern. We can also see a high between 12-2 PM in the noon.\n    <\/p>","e5eddd80":"# 12. Table reservation - accepting vs not accepting restaurants","7a5aae49":"# 11. Online Orders - accepting vs not accepting restaurants","d4198b17":"# 15.Heatmap of restaurants available after midnight till 5 am","afad1599":"## 11.1) Static Chart","49fdf95e":"![](https:\/\/github.com\/ngokulakannan\/zomato-india\/blob\/master\/images\/india%20heat%20map.png?raw=true)","255f4486":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In India only 6.3% of the rstaurants accept table reservation <br\/>\n    In chennai only 4.1% of the restaurants accept table reservetion<br\/>\n    <\/p>","5085b7b2":"# 16.Type of restaurants available after midnight till 5 am","06365c50":"## 5.1 b) Static Map - Chennai","918f7d97":"## 5.1 a) Static Map - India","1dc1b423":"### Analysis:\n   <p style=\"font-size:15px;\"> It seems North Indian, Chinese , South Indian and Fast food are prdominant in both chennai and whole India\n    <\/p>","a0556093":"## 16.1) Static Chart","949c6b42":"#  3. Basic info about colums in cleaned data","77a65de3":"# 2.Data cleaning","15d1af28":"![](https:\/\/github.com\/ngokulakannan\/zomato-india\/blob\/master\/images\/chennai%20midnight%20restaurants.png?raw=true)","41ecf181":"![](https:\/\/github.com\/ngokulakannan\/zomato-india\/blob\/master\/images\/chennai%20dynamic%20heatmap.png?raw=true)","b594dcaf":"<ul style=\"font-size:15px;\">\n<li> zomato_url - Zomato_url of the retaurant <\/li>\n<li>name - Name of the restaurant<\/li>\n<li> city - City where the restaurant is located<\/li>\n<li> area - Area within the city<\/li>\n<li>rating - Zomato rating of the restaurant<\/li>\n<li>rating_count - Number of votes for the restaurant<\/li>\n<li>telephone - Telephone number of the restaurant<\/li>\n<li>cusine - Cusines available at the restaurant<\/li>\n<li>cost_for_two - Average cost for two person<\/li>\n<li>address - Address of the restaurant<\/li>\n<li> timings - Open timings of the restaurant<\/li>\n<li>online_order - Whether restaurant accepts online order or not <\/li>\n<li> table_reservation - Whether restaurant accepts table reservation or not <\/li>\n<li> delivery_only - Whether restaurant accepts only delivery or not<\/li>\n<li> famous_food - Famous food of the restaurant<\/li>\n<li>longitude - geographical longitude<\/li>\n<li> latitude - geographical latitude<\/li>\n<\/ul>","9ce899bc":"## 7.2) Dynamic Chart","c7f69d92":"## 7.1) Static Chart ","c7640767":"# List of contents:\n<ol>\n    <li>Import libraries<\/li>\n    <li>Data cleaning  <\/li>\n    <li> Basic info about colums in cleaned data <\/li>\n    <li>  Find the famous cusines around the country<\/li>\n    <li>Heatmap of number of restaurants around the country  <\/li>\n    <li>  Restaurant distribution of top Cities in India<\/li>\n    <li>  Famous restaurant chains around the country<\/li>\n    <li> Rating distribution <\/li>\n    <li> Cost distribution <\/li>\n    <li>  Famous food around the country<\/li>\n    <li> Online Orders - accepting vs not accepting restaurants <\/li>\n    <li> Table reservation - accepting vs not accepting restaurants <\/li>\n    <li> Delivery only restaurants <\/li>\n    <li> At what time most of the restaurants remains open?<\/li>\n    <li> Heatmap of restaurants available after midnight till 5 am<\/li>\n    <li> Type of restaurants available after midnight till 5 am  <\/li>\n    \n<\/ol>\n    ","93f6ee9b":"## 13.2) Dynamic Chart","7bc97fe1":"\n![image](https:\/\/github.com\/ngokulakannan\/zomato-india\/blob\/master\/images\/thali.jpg?raw=true)\n\n","e8b11efc":"![](https:\/\/github.com\/ngokulakannan\/zomato-india\/blob\/master\/images\/chennai%20midnight%20restaurants.png?raw=true)","6c28f3f2":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In chennai, equal number of retaurants accept and not accept online orders.\n    <\/p>","1419fada":"# 13. Delivery only restaurants","363ce9e9":"## 12.1) Static Chart","92a4a716":"### 4.1) Static chart","b10e19ab":"## 14.2) Dymanic Chart","ea21c231":"<p style=\"font-size:15px;\">     Day by day online purchasing trend is increasing in India. \nThis genearates massive amount of data to process and visualise. One day while ordering in zomato, I wondered how many places these guys are delivering food. So I checked their website and found they are offering this service in 20+ countries. That's massive. I thought we can get a lot of data to anaylze. But before proceeding, I checked out in kaggle for similar dataset.\nTwo were there, but. One has much data but only for bangalore. Other has very small data using zomato api but for whole India. So I thought of creating a new dataset covering whole India . So I crawled the zomato site and got this data. Thats a teadious work. But its worthy. Then I visualised and analysed the data.    But I was late. This data was taken 4 months before.<br\/><br\/>\n\nThis is the initial analysis. A lot more to come in next versions.<br><br>\n<b>Note:<\/b> I'm uploading two CSV files. One before data cleaning (india_all_restaurants_details.csv) and other after cleaning data(indian_restaurants_details_cleaned_data.csv). <br\/><br\/>\n<b>DISCLAIMER:<\/b> Data in this dataset belongs to \"Zomato Media Private Limited\". I have taken this data only for educational purpose. <p>","88e4b927":"### 4.2) interactive chart","44f7dbf2":"## 5.2) Dynamic Map","87d91b74":"## 16.2) Dymanic Chart","8fa89042":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    Most of the restaurants has the average cost for two varying between \u20b9200 - \u20b9500. \n    Some restaurants has higher price range above \u20b95000, even \u20b930000.\n    <\/p>","0ff5d1a9":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In India only 2.9% of the rstaurants accept table reservation <br\/>\n    In chennai only 4% of the restaurants accept table reservetion<br\/>\n    <\/p>","1f6b5e2d":"# 7.Famous restaurant chains around the country","93af618c":"## 10.2) Dynamic Chart","3501dc6e":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In India, Cafe coffe day, Domino's and subway leads the chart.<br\/>\n    In chennai, suprisingly we can see Amma unavagam(Govnment restauant) leading the chart!!! Dominos and CCD comes next.\n    <\/p>","8208a092":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    North indian, Chinese, fast food are most available cuisines  open during the midnight <br>\n    Above statement is true for both India and chennai.\n    <\/p>","7b8695a7":"### Analysis:\n   <p style=\"font-size:15px;\"> \n    In India pasta,pizza, burger and sandwhich leads the charts above our traditional biriyani <br\/>\n    In chennai, pasta , biriyani and paratha leads the chart.<br\/><br\/>\n    <b>Note:<\/b> There is a commented code above to split the food name and take the second part of name\n                for counting.for example, chicken biriyani -> biriyani. \n                 If we do so biriyani count will increase.\n    <\/p>"}}