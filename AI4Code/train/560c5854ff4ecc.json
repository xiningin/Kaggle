{"cell_type":{"a8dcd9d1":"code","5d1c214f":"code","01c42b2c":"code","6fcf928f":"code","52382241":"code","6fe42ce1":"code","bd372e68":"code","989594d3":"code","b8eba799":"code","2d2b6cfb":"code","27c7a20b":"code","703d6b7b":"code","4b779058":"code","c35610c1":"code","61fab02e":"code","507e2e59":"code","27e2216f":"code","86d6b974":"code","abb68496":"code","f265e441":"code","1f5e7222":"code","32dcf7ff":"code","06f0eaa8":"code","3faa9de2":"code","81376a11":"markdown","87b11bde":"markdown","79e2521c":"markdown","aee28d65":"markdown","c102f240":"markdown","bd56a6aa":"markdown"},"source":{"a8dcd9d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d1c214f":"df = pd.read_csv('..\/input\/iris\/Iris.csv')","01c42b2c":"df.head()","6fcf928f":"df.shape","52382241":"df['Species'].value_counts()","6fe42ce1":"df.describe()","bd372e68":"df.corr()","989594d3":"df.dtypes","b8eba799":"from sklearn.preprocessing import LabelEncoder\nfrom keras.utils import np_utils\n\n# encode class values as integers\nencoder = LabelEncoder()\nY = df['Species']\nencoded_Y = encoder.fit_transform(Y)\n\n\ny = np_utils.to_categorical(encoded_Y)\nX = df.drop(['Id','Species'],axis=1)","2d2b6cfb":"y = pd.DataFrame(data=y,columns=['Iris-setosa','Iris-versicolor','Iris-virginica'])\ny.head()","27c7a20b":"X.head()","703d6b7b":"import matplotlib.pyplot as plt \nfig = plt.figure(figsize = (20,15))\nax = fig.gca()\nX.hist(ax=ax)\nplt.show()","4b779058":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.33)","c35610c1":"from sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import SVC\nmodel = OneVsRestClassifier(SVC()).fit(X_train, y_train)","61fab02e":"from sklearn.metrics import accuracy_score","507e2e59":"y_pred = model.predict(X_test)","27e2216f":"accuracy_score(y_test,y_pred)","86d6b974":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout","abb68496":"model_NN = Sequential()\nmodel_NN.add(Dense(16, input_dim=4, activation='relu'))\nDropout(0.5),\nmodel_NN.add(Dense(8, activation='relu'))\nDropout(0.5),\nmodel_NN.add(Dense(3, activation='softmax'))\n# Compile model\nmodel_NN.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","f265e441":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', patience=10,restore_best_weights=True)","1f5e7222":"model_NN.fit(x=X_train, \n          y=y_train, \n          epochs=500,\n          batch_size=15,\n          validation_data=(X_test, y_test),\n           callbacks=[early_stop]\n          )","32dcf7ff":"model_NN.evaluate(X_test, y_test)","06f0eaa8":"pred = model_NN.predict(X_test)\ny_test.iloc[9]","3faa9de2":"model_NN.predict(np.array([X_test.iloc[9]]))","81376a11":"# Load Data","87b11bde":"## Encoder Data ","79e2521c":"## Split Data ","aee28d65":"# Building The Model","c102f240":"# Building NN Model","bd56a6aa":"# Exploring Data"}}