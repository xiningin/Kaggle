{"cell_type":{"7a5717a3":"code","c0758ad7":"code","1930f478":"code","704d9d61":"code","167f4abe":"code","2a06f580":"code","3d343ecb":"code","2fc08151":"code","dc539de3":"code","6ff184a6":"code","27e7fd87":"code","028f73ea":"code","a8f4f225":"code","5eac430c":"code","dfc6f5ac":"code","18ef024b":"code","2abc0658":"code","6e4fe37b":"code","a85169b7":"code","1d8245a4":"code","c7a2b97b":"code","404a1d00":"code","5723030d":"code","970a32d4":"code","c761f846":"code","eac6f88b":"code","cdbdd60f":"code","8559948e":"code","10a410bf":"markdown","65f07f1b":"markdown","0920fd0e":"markdown","3a7f7eff":"markdown","58a65e61":"markdown","23003090":"markdown"},"source":{"7a5717a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0758ad7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1930f478":"data = pd.read_csv('\/kaggle\/input\/kaggle_movie_train.csv')\ndata.head()","704d9d61":"data.info()","167f4abe":"data.drop(columns= 'id', inplace= True)\ndata.head()","2a06f580":"data.isna().any()","3d343ecb":"data['genre'].value_counts()","2fc08151":"plt.style.use('seaborn')\ndata['genre'].value_counts().plot(kind = 'bar')\nplt.show()","dc539de3":"\ngenre_mapping = {'other': 0, 'action': 1, 'romance': 2, 'horror': 3, 'sci-fi': 4, 'comedy': 5,'thriller': 6, 'drama': 7,'adventure': 8}\ngenre_mapping","6ff184a6":"data['genre'] = data['genre'].map(genre_mapping)\ndata.head()","27e7fd87":"data['text'][0]","028f73ea":"import nltk\nnltk.download('stopwords')\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer","a8f4f225":"corpus = []\nps = PorterStemmer()\n\nfor i in range(0, data.shape[0]):\n    text = re.sub(pattern= '[^a-zA-Z]', repl= ' ', string= data['text'][i])\n    text = text.lower()\n    text = text.split()\n    text = [ words for words in text if words not in set(stopwords.words('english'))]\n    text = [ps.stem(words)  for words in text]\n    text = ' '.join(text)\n    corpus.append(text)","5eac430c":"corpus[:5]","dfc6f5ac":"genre_mapping","18ef024b":"scifi_words = []\nromance_words = []\nthriller_words = []\n\nfor i in list(data[data['genre']==4].index):\n    scifi_words.append(corpus[i])\n\nfor i in list(data[data['genre']==2].index):\n    romance_words.append(corpus[i])\n\nfor i in list(data[data['genre']==6].index):\n    thriller_words.append(corpus[i])\n\nscifi = ''\nromance = ''\nthriller = ''\nfor i in range(0, 3):\n    scifi += scifi_words[i]\n    romance += romance_words[i]\n    thriller += thriller_words[i]","2abc0658":"from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nwc = WordCloud(background_color='white', width=3000, height=2500).generate(scifi)\nplt.figure(figsize=(8,8))\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","6e4fe37b":"\nwc = WordCloud(background_color='white', width=3000, height=2500).generate(romance)\nplt.figure(figsize=(8,8))\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","a85169b7":"wc = WordCloud(background_color='white', width=3000, height=2500).generate(thriller)\nplt.figure(figsize=(8,8))\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","1d8245a4":"# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=10000, ngram_range=(1,2))\nX = cv.fit_transform(corpus).toarray()","c7a2b97b":"\ny = data['genre'].values","404a1d00":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)","5723030d":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nnb_classifier = MultinomialNB()\nnb_classifier.fit(X_train, y_train)","970a32d4":"# Predicting the Test set results\ny_pred = nb_classifier.predict(X_test)","c761f846":"# Calculating Accuracy\nfrom sklearn.metrics import accuracy_score\nscore_ = accuracy_score(y_test, y_pred)\nprint(\"Accuracy score is: {}%\".format(round(score_*100,2)))","eac6f88b":"y_test[:5]","cdbdd60f":"y_pred[:5]","8559948e":"# model performance\nfrom sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(classification_report(y_test, y_pred))","10a410bf":"### Checking what kind of words in each genre","65f07f1b":"### Data Cleaning","0920fd0e":"### Word Cloud for respective genre","3a7f7eff":"### Bag of words model","58a65e61":"### Train and test split","23003090":"### Model building"}}