{"cell_type":{"1c98de53":"code","9ae3cbc7":"code","03dc1ba8":"code","fd55f3e5":"code","2df4e686":"code","81c738a8":"code","4adab9d2":"code","9a6328f3":"code","9b66e7ed":"code","bff0e1ec":"code","a66bb325":"code","330fd261":"code","7047273c":"code","e12ad486":"code","0c5943ed":"code","0baf0973":"code","43c19b1a":"code","53d87018":"code","a3e716d5":"code","73bef514":"code","54eed6ad":"code","d18dc31d":"code","1184fc31":"code","b8e41128":"code","24dfb98c":"code","f5e183ed":"code","35ae6ecd":"code","106ad25a":"code","5ae9c72d":"code","fe698de0":"code","fe8bce03":"code","7e8676f8":"code","047f128b":"code","3fe3f8d0":"code","d49060e8":"code","42d0b9cf":"code","966e5a19":"code","04c65b35":"code","a5248b1b":"code","81793069":"code","ae3e233a":"code","86855a42":"code","8182014c":"code","f899fd8b":"code","4da9c7d9":"code","43c3375a":"code","b422bb9a":"code","b6fd52cc":"code","2a6b5a58":"code","9d3600a3":"code","394399a0":"code","53a7f757":"code","a47d25bd":"code","6c1100ac":"code","e8cb7873":"code","2d9a4814":"code","8b59f5dd":"code","68270be6":"code","aeba0802":"code","d36ef18d":"code","60c58420":"code","ec0c51b6":"code","91002d81":"code","6e8055c4":"code","d0d2d5d8":"code","530bbb90":"code","9511f22b":"code","4374f463":"code","3d5d70e4":"markdown","64e148b0":"markdown","06e598a0":"markdown","7cb9e62f":"markdown","a181ae04":"markdown","977935c1":"markdown","d98ac442":"markdown","d2b97903":"markdown","761f6ae6":"markdown","479309c3":"markdown","f2809065":"markdown","0fbe9ff9":"markdown","f677c7f2":"markdown","74711d32":"markdown","cc69fbfa":"markdown","6aa91b5f":"markdown","43914cc2":"markdown","6ef8d1df":"markdown","50795e9b":"markdown","52d3b381":"markdown","30df3559":"markdown","c5441c9d":"markdown","a9aa8285":"markdown","dc4b9cd4":"markdown","088b848d":"markdown","e48c7eb0":"markdown"},"source":{"1c98de53":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nimport seaborn as sns\n\nsns.set_style('darkgrid')\nplt.rcParams['font.size'] = 22\nplt.rcParams['font.family'] = 'Tahoma'\nplt.rcParams['font.weight'] = 'bold'\nplt.rcParams['figure.figsize'] = (9, 5)\nplt.rcParams['figure.facecolor'] = '#00000000'","9ae3cbc7":"proteome=pd.read_csv('..\/input\/breastcancerproteomes\/77_cancer_proteomes_CPTAC_itraq.csv',header=0)","03dc1ba8":"proteome.head(n=3)","fd55f3e5":"proteome.shape","2df4e686":"# extract gene description coloumns for downstream analysis\ngene_name_df=proteome.loc[:,['RefSeq_accession_number','gene_symbol','gene_name']]\ngene_name_df.set_index('RefSeq_accession_number',inplace=True)\ngene_name_df.head()","81c738a8":"# type of features in the data\ndata_type=proteome.dtypes.reset_index()\ndata_type.columns=[\"count\",\"column_type\"]\ndata_type.groupby(\"column_type\").aggregate(\"count\").reset_index()","4adab9d2":"# save the accession numbers to a list\nproteins=proteome.RefSeq_accession_number.tolist() ","9a6328f3":"# dataset with numerical features only\nproteome_samples=proteome.iloc[:,3:] \nproteome_samples.head()","9b66e7ed":"reshaped_proteome=proteome_samples.transpose() # dataset transposed to features as columns and samples as rows\nreshaped_proteome.columns=proteins # adding the column names\nreshaped_proteome.head()","bff0e1ec":"# plot the distribution of NA values\nna_val=reshaped_proteome.isna().sum()\nna_val.sort_values(ascending=False).plot(kind='hist',bins=20)\nplt.ylabel('frequency',fontsize=22,weight='bold')\nplt.xlabel('NA values',fontsize=22,weight='bold')\nplt.show()","a66bb325":"# get features with NA values greater than 8\nna_val[na_val>0].shape,na_val[na_val>8].shape","330fd261":"# get list of features with NA values greater than 8\nna_val_index=na_val[na_val>8].index.tolist() ","7047273c":"# filter columns in dataset to remove feaures with NA values greater than 8\ncomp_cases=[n for n in reshaped_proteome.columns if n not in na_val_index]    ","e12ad486":"# number of features (proteins) with less than 8 NA values\nlen(comp_cases)","0c5943ed":"# filter dataset from features with NA >8 \nfl_proteome=reshaped_proteome[comp_cases]\nfl_proteome.shape","0baf0973":"fl_proteome=fl_proteome.fillna(fl_proteome.mean()) # NA values filled with mean","43c19b1a":"np.any(fl_proteome.isna()) # check if NA values present","53d87018":"from sklearn.preprocessing import StandardScaler","a3e716d5":"# scaling the data\nscaler=StandardScaler()\nscaled_proteome=scaler.fit_transform(fl_proteome)\nscaled_proteome=pd.DataFrame(scaled_proteome)\nscaled_proteome.columns=fl_proteome.columns","73bef514":"# visualizing data before and after scaling\nx=[np.random.randint(0,9000) for n in range(50)]\ndata1=fl_proteome.iloc[:,x]\ndata2=scaled_proteome.iloc[:,x]\nfig,axs=plt.subplots(2,sharex=True,figsize=(25,8))\nag=sns.boxplot(data=data1,ax=axs[0])\nag.legend(['before scaling'],loc='lower right')\nbg=sns.boxplot(data=data2,ax=axs[1])\nbg.legend(['after scaling'],loc='lower right')\nbg.set_xticklabels(x)\nplt.xticks(rotation=90)\nag.set_title('features chosen randomly')\nplt.show()","54eed6ad":"# removal of outliers\nfrom scipy import stats\nz = np.abs(stats.zscore(scaled_proteome))\n\nthreshold=3\nz_bool=np.all(z<threshold,axis=0)","d18dc31d":"zscaled_proteome=scaled_proteome.loc[:,z_bool]\n\nzscaled_proteome.shape # dataset after scaling and removing outliers\n","1184fc31":"zscaled_proteome_lst=zscaled_proteome.columns.tolist()","b8e41128":"fl_proteome['Type']=\"Cancer\"\nfl_proteome.iloc[-3:,-1]=\"Healthy\"","24dfb98c":"fl_proteome.iloc[:3,-1]","f5e183ed":"fl_proteome.iloc[-3:,-1]","35ae6ecd":"fl_proteome.Type.value_counts().plot(kind='bar',figsize=(4,3),rot=0)\nplt.show()","106ad25a":"# we are choosing only cancer samples\ncancer_proteome=fl_proteome.iloc[:-3,:-1]\ncancer_proteome.shape","5ae9c72d":"cancer_mean_list=cancer_proteome.mean().values.tolist()","fe698de0":"cmean=cancer_proteome.mean()\ncstd=cancer_proteome.std()","fe8bce03":"cmean.name='mean_cancer'\ncstd.name='std_cancer'","7e8676f8":"# mean and median of the cancer samples\nprint(f'mean cancer dataset {cmean.mean()}, medain cancer dataset {cmean.median()}')","047f128b":"fig=plt.figure(figsize=(8,3))\nsns.distplot(cancer_mean_list,hist=True,axlabel=\"Fold Change\")\nplt.legend(['cancer'])\nplt.xlabel('Fold Change',fontsize=22,weight='bold')\nplt.ylabel('Density',fontsize=22,weight='bold')\nplt.show()","3fe3f8d0":"# we are choosing healthy samples in the dataset\nHealthy_proteome=fl_proteome.iloc[-3:,:-1]\nHealthy_proteome.shape","d49060e8":"healthy_mean_list=Healthy_proteome.mean().values.tolist()","42d0b9cf":"hmean=Healthy_proteome.mean()\nhstd=Healthy_proteome.std()","966e5a19":"hmean.name='mean_healthy'\nhstd.name='std_healthy'","04c65b35":"# mean and median of the healthy samples\nprint(f'mean healthy dataset {hmean.mean()}, median healthy dataset {hmean.median()}')","a5248b1b":"fig=plt.figure(figsize=(8,3))\nsns.distplot(healthy_mean_list,hist=True,axlabel=\"Fold Change\")\nplt.legend(['healthy'])\nplt.xlabel('Fold Change',fontsize=22,weight='bold')\nplt.ylabel('Density',fontsize=22,weight='bold')\nplt.show()","81793069":"fig=plt.figure(figsize=(10,4))\ng=sns.distplot(cancer_mean_list,hist=True,axlabel=\"Fold Change\")\nh=sns.distplot(healthy_mean_list,hist=True,axlabel=\"Fold Change\")\nplt.legend(['cancer','healthy'])\nplt.xlabel('Fold Change',fontsize=22,weight='bold')\nplt.ylabel('Density',fontsize=22,weight='bold')\nplt.show()","ae3e233a":"proteome_foldchange_df=pd.concat([gene_name_df,cmean,cstd,hmean,hstd],axis=1,join='inner')","86855a42":"proteome_foldchange_df['log_coeffvar_cncr']=np.log10(np.abs(proteome_foldchange_df.std_cancer\/proteome_foldchange_df.mean_cancer))\nproteome_foldchange_df['log_coeffvar_hlth']=np.log10(np.abs(proteome_foldchange_df.std_healthy\/proteome_foldchange_df.mean_healthy))","8182014c":"proteome_foldchange_df","f899fd8b":"housekeeping=['NP_000968','NP_000966','NP_001013','NP_001017963','NP_057004','NP_821133','NP_001092','NP_002037','NP_000960']","4da9c7d9":"proteome_foldchange_df.loc[housekeeping,:]","43c3375a":"house_names=['RPL13','RPL11','RPS19','HSP90','RPS27','TUBB','ACTB','GAPDH','RPL5']","b422bb9a":"housekeeping_cancer=cancer_proteome[housekeeping]","b6fd52cc":"housekeeping_healthy=Healthy_proteome[housekeeping]","2a6b5a58":"fig,axs=plt.subplots(2,sharex=True,figsize=(16,8))\nghk=sns.boxplot(data=housekeeping_cancer,ax=axs[0])\nghk.set_title('Fold Change of Housekeeping Genes')\nghk.legend([\"cancer\"],loc='lower right')\nhhk=sns.boxplot(data=housekeeping_healthy,ax=axs[1])\nhhk.legend([\"healthy\"],loc='lower right')\nhhk.set_xticklabels(house_names,rotation=90)\nhhk.set(ylim=(-3,3))\nplt.xticks(rotation=60)\nplt.show()","9d3600a3":"proteome_foldchange_df['corrected_cancer']=proteome_foldchange_df.mean_cancer-0.257342\nproteome_foldchange_df['corrected_health']=proteome_foldchange_df.mean_healthy-(-0.463977)","394399a0":"proteome_foldchange_df['foldchange_cancer']=proteome_foldchange_df['corrected_cancer']-proteome_foldchange_df['corrected_health']","53a7f757":"proteome_foldchange_df['composite_coeff']=proteome_foldchange_df['log_coeffvar_cncr']+proteome_foldchange_df['log_coeffvar_hlth']","a47d25bd":"cancer_altered_df=proteome_foldchange_df.loc[:,['gene_name','corrected_cancer','corrected_health','foldchange_cancer','composite_coeff']]","6c1100ac":"fig=plt.figure()\nfig=sns.scatterplot(data=cancer_altered_df, x='foldchange_cancer',y='composite_coeff')\nfig.set_ylim(-2,5)\nfig.set_xlabel('Fold change cancer',fontsize=22,weight='bold')\nfig.set_ylabel('composite variation',fontsize=22,weight='bold')\nplt.show()","e8cb7873":"# test for normality of 'foldchange' in cancer_altered_df\nfrom scipy import stats\nstats.kstest(cancer_altered_df.foldchange_cancer,'norm',alternative='greater')","2d9a4814":"# calculate z-score  for foldchange \ncancer_altered_df['zscore_foldchange']=np.abs(stats.zscore(cancer_altered_df.foldchange_cancer))","8b59f5dd":"# calculate p-value for foldchange\nfrom scipy.special import ndtr as ndtr\ncancer_altered_df['pvalue_foldchange']=1- ndtr(cancer_altered_df.zscore_foldchange)","68270be6":"cancer_altered_df.head()","aeba0802":"# proteins with statistically significant foldchange \nsignificant_fold_change=cancer_altered_df[cancer_altered_df.pvalue_foldchange<0.025]","d36ef18d":"significant_fold_change.shape","60c58420":"# upregulated proteins in cancer\nsignificant_fold_change[significant_fold_change.corrected_cancer>significant_fold_change.corrected_health].sort_values(by='foldchange_cancer',ascending=False).head(n=10)","ec0c51b6":"# downregulated proteins in cancer\nsignificant_fold_change[significant_fold_change.corrected_cancer<significant_fold_change.corrected_health].sort_values(by='foldchange_cancer').head(n=10)","91002d81":"!conda install -c plotly plotly --yes","6e8055c4":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(x=significant_fold_change['foldchange_cancer'],\n                                y=significant_fold_change['composite_coeff'],\n                                mode='markers',\n                                marker_color=significant_fold_change['corrected_cancer'],\n                                text=significant_fold_change['gene_name'])) # hover text goes here\n\nfig.update_yaxes(range=[-5, 5])\nfig.update_layout(title='Altered proteins in Breast Cancer')\nfig.show()","d0d2d5d8":"import re\nnames=cancer_altered_df.gene_name.tolist()","530bbb90":"def rep_gene(name):\n    try:\n        var=re.findall('^brc+',name,re.IGNORECASE)\n        if var:\n            return name\n    except:\n        print('wrong input')","9511f22b":"x=list(filter(rep_gene,names))","4374f463":"cancer_altered_df[cancer_altered_df.gene_name.isin(x)]","3d5d70e4":"### There is an imbalance in the 2 classes in this dataset","64e148b0":"### Observation\n### The distribution appears normal with negative skew with mean less than median","06e598a0":"### foldchange values are normally distributed","7cb9e62f":"## Data Preparation and Cleaning\n\n#### This is a Cancer Proteome Dataset from Kaggle\n\n#### Load Libraries","a181ae04":"### Observation\n### The distribution appears as Normal distribution with mean greater than median","977935c1":"### Distribution of samples in the dataset","d98ac442":"### List of housekeeping proteins","d2b97903":"### There is an imbalance in the 2 classes in this dataset","761f6ae6":"## **no NA values, all features are filled with values**","479309c3":"##### get NA values","f2809065":"### 4559 features (proteins) have missing data in samples causing NA values, of them 3219 features have NA values greater than 8 samples. Such features with  missing values > 10% of sample size will cause errors and have to be removed","0fbe9ff9":"### superimposing both the cancer and healthy sample expression levels","f677c7f2":"### The changes in cancer would be due to overexpression of genes or repression of genes, and this will be reflected in the levels of the protein. Since absolute levels are not given, we  cannot compare the levels of protein in cancer and healthy samples directly. To compare cancer and healthy samples,we shall use the concept of Housekeeping genes. The expression of these genes is fairly constant and the proteins are present at constant levels. Prominently GAPDH, beta actin, beta tubulin are also used as loadng controls in western blots. A paper also cites that ribosome protein levels are fairly constant (Geiger T, Wehner A, Schaab C, Cox J, Mann M.  Mol Cell Proteomics. 2012 Mar;11(3))","74711d32":"## Observation\n### Ribosomal protein L11 (RPL11) and beta tubulin (TUBB) can be suitably used to study cancer related protein changes. We shall use beta tubulin, as we can co-relate our study with previous experimental studies ","cc69fbfa":"### proteins with fold change greater than beta-tubulin ","6aa91b5f":"### Observation\n### There is a shift in the abundance of proteins in cancer samples and a remarkable uniformity in their abundance, as compared to normal samples. It would be worthwhile to see proteins overexpressed in cancer as compared to healthy samples. iTRAQ measures protein abundance. The levels of protein can fall by proteolytic  processing and\/or lower expression. The levels will rise due to increased expression","43914cc2":"The last 3 samples are healthy tissue.We have created a column 'Type', and labelled cancer tissue\nas Cancer and healthy tissue as Healthy","6ef8d1df":"#### EDA","50795e9b":"### OBSERVATION\n#### The dataset has 12553 rows. These rows are 12553 proteins identified by iTRAQ (annotated here their NCBI Refseq database accession number and gene name)  and 86 columns. These columns are Refseq ID, gene symbol, gene name and are 83 samples with their identifiers.\n#### Thus format is rows as features and columns as samples\n#### To make it biologically meaningful, we have to reshape the data to the conventional rows as samples and columns as features","52d3b381":"## Housekeeping Genes","30df3559":"### The distribution of fold change in proteins in the healthy samples","c5441c9d":"# Scaling the data and removing outliers","a9aa8285":"# Exploratory Data Analysis of Kaggle Breast Cancer Proteomes","dc4b9cd4":"### Healthy samples type","088b848d":"### The distribution of fold change in proteins in the cancer samples","e48c7eb0":"### Cancer samples type"}}