{"cell_type":{"8949528d":"code","e17dde66":"code","f6d63d9b":"code","5964f67c":"code","1825cbd5":"code","9624efc7":"code","7dab5450":"code","8be5ab97":"code","4f0f7c94":"code","ea81eba2":"code","168afe4b":"code","15dcb0da":"code","1f27cc39":"code","8011182e":"code","8ec4456f":"code","cbe6342e":"code","e41a9036":"code","a60eb00b":"code","ad9f27a2":"code","183b8e4e":"code","25e63be9":"markdown","fb23bb29":"markdown","09b6703f":"markdown","4d04665b":"markdown","38174d34":"markdown","2b3d3570":"markdown","299725ff":"markdown","920a817f":"markdown","18955e13":"markdown","6e3a5cd5":"markdown","53e0f4e4":"markdown","a90b265b":"markdown","d562deb7":"markdown","55f062a6":"markdown","2fbaad16":"markdown","606518f8":"markdown","f4589dc9":"markdown","f0d7d6f6":"markdown"},"source":{"8949528d":"import numpy as np\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import fetch_openml as fetch_mldata\n","e17dde66":"SEED = 42\nEARLY_STOP_NUM = 5 \nDATA_NUM = 1000 # row number \nCOL_NUM = 5 #column number \nMAX_DEPTH = 2\nMAX_ESTIMATOR = 120\nIS_WARM_START = True","f6d63d9b":"mnist = fetch_mldata('mnist_784')","5964f67c":"from sklearn.model_selection import train_test_split","1825cbd5":"X_train_val, X_test, y_train_val, y_test = train_test_split(\n    mnist.data, mnist.target, test_size=10000, random_state=SEED)\nX_train, X_val, y_train, y_val = train_test_split(\n    X_train_val, y_train_val, test_size=10000, random_state=SEED)","9624efc7":"from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.neural_network import MLPClassifier\n\nrandom_forest_clf = RandomForestClassifier(n_estimators=100, random_state=SEED)\nextra_trees_clf = ExtraTreesClassifier(n_estimators=100, random_state=SEED)\nsvm_clf = LinearSVC(max_iter=100, tol=20, random_state=SEED)\nmlp_clf = MLPClassifier(random_state=SEED)\n\nestimators = [random_forest_clf, extra_trees_clf, svm_clf, mlp_clf]\nfor estimator in estimators:\n    print(\"Training the\", estimator)\n    estimator.fit(X_train, y_train)","7dab5450":"[estimator.score(X_val, y_val) for estimator in estimators]","8be5ab97":"from sklearn.ensemble import VotingClassifier\n\nnamed_estimators = [\n    (\"random_forest_clf\", random_forest_clf),\n    (\"extra_trees_clf\", extra_trees_clf),\n    (\"svm_clf\", svm_clf),\n    (\"mlp_clf\", mlp_clf),\n]\n\nvoting_clf = VotingClassifier(named_estimators)\n\nvoting_clf.fit(X_train, y_train)\n\nvoting_clf.score(X_val, y_val)","4f0f7c94":"voting_clf.estimators_","ea81eba2":"del voting_clf.estimators_[2]","168afe4b":"voting_clf.score(X_val, y_val)","15dcb0da":"voting_clf.voting = \"soft\"\nvoting_clf.score(X_val, y_val)","1f27cc39":"voting_clf.voting = \"hard\"\nvoting_clf.score(X_val, y_val)","8011182e":"X_val_predictions = np.empty((len(X_val), len(estimators)), dtype=np.float32)\n\nfor index, estimator in enumerate(estimators):\n    X_val_predictions[:, index] = estimator.predict(X_val)","8ec4456f":"X_val_predictions","cbe6342e":"rnd_forest_blender = RandomForestClassifier(n_estimators=200, oob_score=True, random_state=SEED)\nrnd_forest_blender.fit(X_val_predictions, y_val)","e41a9036":"rnd_forest_blender.oob_score_","a60eb00b":"X_test_predictions = np.empty((len(X_test), len(estimators)), dtype=np.float32)\n\nfor index, estimator in enumerate(estimators):\n    X_test_predictions[:, index] = estimator.predict(X_test)","ad9f27a2":"y_pred = rnd_forest_blender.predict(X_test_predictions)","183b8e4e":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","25e63be9":"# global variables","fb23bb29":"# import libraries","09b6703f":"## stacking test data ","4d04665b":"# 1.get each model score (validation set)","38174d34":"# 4.predict stacking validation data (validation set)","2b3d3570":"# 3.2 hard voting score","299725ff":"## 3.voting score after deleting LinearSVC (validation set)","920a817f":"## predict stacking test data ","18955e13":"## stacking validation data ","6e3a5cd5":"# 5.predict stacking test data (test set)","53e0f4e4":"# load data ","a90b265b":"# split train set and validation set and test set ","d562deb7":"# 3.1 soft voting scrore","55f062a6":"# blend validation data ","2fbaad16":"# get validation stacking oob score","606518f8":"# make models","f4589dc9":"# 2.get voting model score (validation set)","f0d7d6f6":"## get stacking test accuracy score "}}