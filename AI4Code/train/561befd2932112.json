{"cell_type":{"2750cd79":"code","f3e122c6":"code","5fa89d6d":"code","e947784f":"code","ac71af37":"code","afb9161e":"code","c012c558":"code","9bf81082":"code","a978d380":"code","62f1e9ff":"code","c2887bba":"code","ee3f16b7":"code","d134fdd9":"code","8731156e":"code","26dfa26e":"code","bfc8702b":"code","3c443181":"code","42fbeb0a":"code","f787c233":"code","59172383":"code","ac82bacb":"code","667a2e4c":"code","cc8eee78":"code","16be5dd1":"code","daabb8fc":"code","e3eac316":"code","b90c427c":"code","2bc06798":"code","cb6caf0a":"code","29dd7a1c":"code","0bdd25b6":"code","72b7a784":"code","d2065c42":"code","909dc15e":"code","61196dcb":"code","e70e2e94":"code","09a1bf25":"code","79e3f4fc":"code","f5f6e1e6":"code","c2932838":"code","8e929a75":"code","feb254c5":"code","3b1434b6":"code","7046331e":"code","8293f242":"code","82888aea":"code","fbfd9676":"code","401d4570":"code","7d22910e":"code","1dd1f536":"code","7ca34236":"code","33d32d18":"code","3881a101":"code","50bb22b4":"code","f5fca77e":"code","be200785":"code","03998920":"code","65730337":"code","820c22b3":"code","d75f45a5":"code","6c156021":"code","90ad2e9a":"code","c6550718":"code","1976e26c":"code","ed2e987d":"code","89021c1d":"code","acb39742":"code","eef7f969":"code","1a3c50d8":"code","0722a77c":"code","4c06fa36":"code","1110dd55":"code","4f6f4c7a":"code","b83dda04":"code","1c466d71":"code","de2c6abc":"code","764dba21":"code","e4128b8a":"code","7ae83a78":"code","4484a8b7":"code","a138fbef":"code","d11194f1":"markdown","83770ba5":"markdown","45a20551":"markdown","a2f0657f":"markdown","81c403c9":"markdown","9d406f3b":"markdown","2951fe0b":"markdown","1638e5d9":"markdown"},"source":{"2750cd79":"import pandas as pd\nimport sklearn\nimport numpy as np\nimport matplotlib.pyplot as plt","f3e122c6":"adult = pd.read_csv('..\/input\/adult-pmr3508\/train_data.csv', names=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")","5fa89d6d":"adultTest = pd.read_csv('..\/input\/adult-pmr3508\/test_data.csv', names=[\"Id\",\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',    na_values=\"?\")","e947784f":"adult.head()","ac71af37":"adultTest.head()","afb9161e":"nadult = adult.dropna()","c012c558":"Xadult = nadult[[\"Age\",\"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]]\nXadult.head()","9bf81082":"Yadult = nadult.Target","a978d380":"XtestAdult = adultTest[[\"Age\",\"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]]\nXtestAdult.head()","62f1e9ff":"for a in XtestAdult.columns:\n    XtestAdult[a].fillna(XtestAdult[a].mode()[0],inplace=True)","c2887bba":"Xadult.drop(['Id'])","ee3f16b7":"Xadult.to_csv('Xadult', header=False, index=False)\nXadult = pd.read_csv('Xadult', header=None)","d134fdd9":"Xadult = Xadult.drop([0])","8731156e":"Yadult = Yadult.drop(['Id'])","26dfa26e":"XtestAdult = XtestAdult.drop([0])\nXtestAdult.head()","bfc8702b":"XtestAdult.to_csv('XtestAdult', header=False, index=False)\nXtestAdult = pd.read_csv('XtestAdult', header=None)","3c443181":"YtestAdult = adultTest.Target","42fbeb0a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score","f787c233":"best = 0\nmedia_anterior = 0\nfor i in range(120,130):\n    rf = RandomForestClassifier(n_estimators=i)  \n    scores = cross_val_score(rf, Xadult, Yadult, cv=10)\n    media = sum(scores)\/len(scores)\n    if media > media_anterior:\n        media_anterior = media\n        best = i\n    print(i)\nprint(media_anterior)\nprint(best)","59172383":"rf = RandomForestClassifier(n_estimators=i) ","ac82bacb":"rf.fit(Xadult,Yadult)","667a2e4c":"YtestPredrf = rf.predict(XtestAdult)","cc8eee78":"Index = []\nfor j in range( len(YtestPredrf)):\n    Index.append(j)","16be5dd1":"Id = pd.DataFrame(Index)","daabb8fc":"Predrf = pd.DataFrame(YtestPredrf)\nPredrf.columns = ['Income']\nPredrf.insert(0, 'Id', Id, True)\nPredrf.head()","e3eac316":"Predrf.to_csv('AdultPredictionrf.csv')","b90c427c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score","2bc06798":"log = LogisticRegression(penalty='l2', dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=400, multi_class='auto', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)","cb6caf0a":"scoreslog = cross_val_score(log, Xadult, Yadult, cv=10)\nmedialog = sum(scoreslog)\/len(scoreslog)\nprint(medialog)","29dd7a1c":"log.fit(Xadult,Yadult)","0bdd25b6":"YtestPredlog = log.predict(XtestAdult)","72b7a784":"Index = []\nfor j in range( len(YtestPredlog)):\n    Index.append(j)","d2065c42":"Id = pd.DataFrame(Index)","909dc15e":"Predlog = pd.DataFrame(YtestPredlog)\nPredlog.columns = ['Income']\nPredlog.insert(0, 'Id', Id, True)\nPredlog.head()","61196dcb":"Predlog.to_csv('AdultPredictionlog.csv')","e70e2e94":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score","09a1bf25":"svc=SVC(gamma='auto')","79e3f4fc":"scoressvc = cross_val_score(svc, Xadult, Yadult, cv=10)\nmediasvc = sum(scoressvc)\/len(scoressvc)\nprint(mediasvc)","f5f6e1e6":"svc.fit(Xadult,Yadult)","c2932838":"YtestPredsvc = svc.predict(XtestAdult)","8e929a75":"Index = []\nfor j in range( len(YtestPredsvc)):\n    Index.append(j)","feb254c5":"Id = pd.DataFrame(Index)","3b1434b6":"Predsvc = pd.DataFrame(YtestPredsvc)\nPredsvc.columns = ['Income']\nPredsvc.insert(0, 'Id', Id, True)\nPredsvc.head()","7046331e":"Predsvc.to_csv('AdultPredictionsvc.csv')","8293f242":"calitrain = pd.read_csv('..\/input\/california\/calitrain.csv')","82888aea":"calitest = pd.read_csv('..\/input\/california\/calitest.csv')","fbfd9676":"calitrain.head()","401d4570":"calitest.head()","7d22910e":"ncalitrain = calitrain.dropna()","1dd1f536":"calitrain.shape","7ca34236":"ncalitrain.shape","33d32d18":"for df in [calitrain,calitest]:\n    df.set_index('Id',inplace=True)","3881a101":"Xcalitrain = calitrain.drop(columns='median_house_value')\nYcalitrain = calitrain.median_house_value","50bb22b4":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score","f5fca77e":"lin = LinearRegression()","be200785":"CVlin = cross_val_score(lin, Xcalitrain, Ycalitrain, cv=10)\nmedialin = sum(CVlin)\/len(CVlin)\nprint(medialin)","03998920":"lin.fit(Xcalitrain,Ycalitrain)","65730337":"Ytestlin = lin.predict(calitest)","820c22b3":"Ytestlin","d75f45a5":"Index = []\nfor j in range( len(Ytestlin)):\n    Index.append(j)","6c156021":"Id = pd.DataFrame(Index)","90ad2e9a":"Predlin = pd.DataFrame(Ytestlin)\nPredlin.columns = ['median_house_value']\nPredlin.insert(0, 'Id', Id, True)\nPredlin.head()","c6550718":"Predlin.to_csv('CaliPredictionlin.csv')","1976e26c":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score","ed2e987d":"lasso = Lasso(alpha = 0.1)","89021c1d":"CVlasso = cross_val_score(lasso, Xcalitrain, Ycalitrain, cv=10)\nmedialasso = sum(CVlasso)\/len(CVlasso)\nprint(medialasso)","acb39742":"lasso.fit(Xcalitrain,Ycalitrain)","eef7f969":"Ytestlasso = lasso.predict(calitest)","1a3c50d8":"Index = []\nfor j in range( len(Ytestlasso)):\n    Index.append(j)","0722a77c":"Id = pd.DataFrame(Index)","4c06fa36":"Predlasso = pd.DataFrame(Ytestlasso)\nPredlasso.columns = ['median_house_value']\nPredlasso.insert(0, 'Id', Id, True)\nPredlasso.head()","1110dd55":"Predlasso.to_csv('CaliPredictionlasso.csv')","4f6f4c7a":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score","b83dda04":"rid = Ridge()","1c466d71":"CVrid = cross_val_score(rid, Xcalitrain, Ycalitrain, cv=10)\nmediarid = sum(CVrid)\/len(CVrid)\nprint(mediarid)","de2c6abc":"rid.fit(Xcalitrain,Ycalitrain)","764dba21":"Ytestrid = rid.predict(calitest)","e4128b8a":"Index = []\nfor j in range( len(Ytestrid)):\n    Index.append(j)","7ae83a78":"Id = pd.DataFrame(Index)","4484a8b7":"Predrid = pd.DataFrame(Ytestrid)\nPredrid.columns = ['median_house_value']\nPredrid.insert(0, 'Id', Id, True)\nPredrid.head()","a138fbef":"Predrid.to_csv('CaliPredictionlasso.csv')","d11194f1":"**SVC**","83770ba5":"**Conclus\u00e3o**\n\nNesta atividade foram testados 3 tipo de classificadores Random Forest, Regress\u00e3o Log\u00edstica e SVC. Como o resultado depende da resposta obtida no kaggle, as an\u00e1lises ser\u00e3o feitas com rela\u00e7\u00e3o \u00e0 m\u00e9dia entre os resultados obtidos em uma valida\u00e7\u00e3o cruzada com 10 folds. Ser\u00e3o avaliadas at\u00e9 4 casas decimais, uma vez que os resultados foram bem parecidos.\n\nRandom Forest (0.8181) - O tempo necess\u00e1rio para executar o c\u00f3digo foi um pouco longo, no entanto isso deve-se ao fato de que foram testados 10 valores diferentes para a quantidade de florestas. Foi simples de ser implementado, apenas foi necess\u00e1rio definir o n\u00famero de florestas a serem utilizadas. Foi o m\u00e9todo com melhor desempenho.\n\nRegress\u00e3o Log\u00edstica (0.8091) - Foi o m\u00e9todo com o pior desempenho, no entanto, ainda assim, superou os 80% de acur\u00e1cia na valida\u00e7\u00e3o cruzada. Foi simples de ser implementado, no entanto, os par\u00e2metros default da fun\u00e7\u00e3o apresentaram problemas de converg\u00eancia para o n\u00famero de itera\u00e7\u00f5es definidos como padr\u00e3o, por conta disso gerou mais dificuldade que o m\u00e9todo random forest.\n\nSVC (0.8106) -  Apresentou desempenho intermedi\u00e1rio, no entanto o tempo necess\u00e1rio a execu\u00e7\u00e3o foi, consideravelmente, superior aos outros m\u00e9todos. Foi o \u00fanico c\u00f3digo executado sem alterar os par\u00e2metros padr\u00f5es da biblioteca.\n\nConclus\u00e3o: Para o referido problema observa-se que que os modelos chegam a resultados muito pr\u00f3ximos entre si. No entanto o tempo de execu\u00e7\u00e3o deles \u00e9 extremamente diferente obdecendo a seguinte rela\u00e7\u00e3o: Regress\u00e3o Log\u00edstica << Random Forest < SVC.\n","45a20551":"**California Housing**","a2f0657f":"**Random Forest**","81c403c9":"**LASSO**","9d406f3b":"**Regress\u00e3o Log\u00edstica**","2951fe0b":"At\u00e9 aqui os dados foram organizados para se adequerem ao formato do resultado desejado","1638e5d9":"**RIDGE**"}}