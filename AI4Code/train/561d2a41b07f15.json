{"cell_type":{"2167dabd":"code","0d42d9d2":"code","4565bd90":"code","db136054":"code","4f0ea9b4":"code","d4da16fd":"code","b24db6db":"code","d52ae2fe":"code","2b48c2b1":"code","67b851f2":"code","07bbda08":"code","b41433b5":"code","6cd19a67":"code","4f327a8b":"code","f5150fa7":"code","0e3b05cf":"code","829e2250":"code","c0602a11":"code","59ad4eed":"code","a82d7981":"markdown","ea18f09c":"markdown","dd25b48d":"markdown","42c239f8":"markdown"},"source":{"2167dabd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d42d9d2":"from keras.datasets import mnist\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nimport pandas as pd","4565bd90":"train, test = mnist.load_data()","db136054":"distrain = pd.DataFrame(data=train[1], columns=['Label'])\n_ = distrain['Label'].value_counts().plot(kind='bar')\nplt.show()","4f0ea9b4":"import random\nfrom matplotlib import pyplot as plt\nrand = random.randint(0,60000)\nplt.imshow(train[0][rand])","d4da16fd":"print(train[0].shape, train[1].shape)\nprint(test[0].shape, test[1].shape)","b24db6db":"train_x = train[0].reshape(60000,784)\ntest_x = test[0].reshape(10000,784)\ntrain_y = train[1]\ntest_y = test[1]\nprint(train_x.shape, test_x.shape)","d52ae2fe":"print(train_x[20])","2b48c2b1":"from sklearn import preprocessing\ntrain_x = preprocessing.scale(train_x)\nprint(train_x[20])\n","67b851f2":"model = LogisticRegression()\nmodel.fit(train_x, train_y)\npre = model.predict(test_x)\n","07bbda08":"print(classification_report(test_y, pre))","b41433b5":"print(confusion_matrix(test_y, pre))","6cd19a67":"print(accuracy_score(test_y, pre))","4f327a8b":"from sklearn.decomposition import PCA\npca = PCA(0.95)\npca.fit(train_x)\nprint(pca.n_components_)","f5150fa7":"train = pca.transform(train_x)\ntest = pca.transform(test_x)","0e3b05cf":"model = LogisticRegression()\nmodel.fit(train,train_y)\npre = model.predict(test)","829e2250":"print(classification_report(test_y, pre))","c0602a11":"print(confusion_matrix(test_y, pre))","59ad4eed":"print(accuracy_score(test_y, pre))","a82d7981":"Reshaping the data as it is 28*28","ea18f09c":"Distribution of The digits in the dataset","dd25b48d":"Preprocessing of the training data for the model","42c239f8":"Principal Component Analysis With Varience of 95%"}}