{"cell_type":{"881c54c6":"code","96279299":"code","dca9558f":"code","41f82f75":"code","60ba5001":"code","3136e028":"code","61c626c5":"code","f3b4924e":"code","5186da3e":"code","8e656192":"code","de865f0b":"code","6d098d4c":"code","c726f854":"code","b5891e94":"code","f7d617bd":"code","1207c9d7":"code","e237295f":"code","5d795647":"code","0bc0bb5b":"code","125fbcea":"code","3919a666":"code","079713c2":"code","4b929e3a":"code","2854b2af":"code","70c111cf":"code","05ee828d":"code","191a02f3":"code","54171f5a":"code","359302bb":"code","94d69bce":"code","2a433897":"code","d399d70d":"code","62e3baf3":"code","26f0f81f":"code","dbcf9c4e":"code","9c733f56":"code","723537dd":"code","8954dbc7":"code","befc5f77":"code","21e789b5":"markdown","d8ab11e5":"markdown","4569ed8d":"markdown","e3479701":"markdown"},"source":{"881c54c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndf = pd.read_csv('\/kaggle\/input\/hta-tagging\/train.csv')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96279299":"texts = []\nfor i in range(len(df['Filename'])):\n    fn = df['Filename'][i]\n    folder = fn.split(\"-\")[0]\n    f = open('\/kaggle\/input\/hta-tagging\/train-data\/train-data\/'+folder+'\/'+fn, \"r\")\n    texts.append(f.read())\n\ndf['text'] = texts","dca9558f":"df","41f82f75":"intervention = df.copy().drop(['Blinding of Outcome assessment','Classes'], axis=1)\noutcome = df.copy().drop(['Blinding of intervention','Classes'], axis=1)","60ba5001":"intervention","3136e028":"outcome","61c626c5":"!pip install pycaret\n","f3b4924e":"from pycaret.nlp import *\ninter_exp = setup (data = intervention, target='text', session_id=23) ","5186da3e":"# interest to try on other topic modeling algorithms??: https:\/\/github.com\/pycaret\/pycaret\/blob\/master\/nlp.py#L549\nlda = create_model('lda')","8e656192":"lda","de865f0b":"lda_results = assign_model(lda)","6d098d4c":"lda_results","c726f854":"plot_model(lda)","b5891e94":"plot_model(lda, plot = 'bigram')","f7d617bd":"plot_model(lda, plot = 'topic_distribution')","1207c9d7":"plot_model(lda, plot = 'tsne')","e237295f":"# plot_model(lda, plot = 'umap')\n","5d795647":"evaluate_model(lda)","0bc0bb5b":"from pycaret.classification import *","125fbcea":"lda_data = lda_results.drop(['text','Dominant_Topic','Perc_Dominant_Topic'], axis=1)","3919a666":"lda_data","079713c2":"inter_class = setup(data = lda_data, ignore_features=['Filename'], target='Blinding of intervention', train_size=0.8, session_id = 24)","4b929e3a":"%time compare_models()","2854b2af":"# View the abbrevation of model names here: https:\/\/github.com\/pycaret\/pycaret\/blob\/master\/classification.py#L3022\n%time catboost = create_model(\"catboost\")","70c111cf":"%time catboost_tune = tune_model(\"catboost\")","05ee828d":"# ensemble_catboost = ensemble_model(catboost, method=\"Bagging\") #or Boosting","191a02f3":"# rf = create_model('rf')\n# xgboost = create_model('xgboost')\n# blend_models = blend_models(estimateor_list = [catboost, rf, xgboost])","54171f5a":"plot_model(catboost, plot='confusion_matrix')","359302bb":"evaluate_model(catboost)","94d69bce":"validation_set = predict_model(catboost)","2a433897":"ready = finalize_model(catboost)","d399d70d":"# Don't forget that  N: 0, P: 1, Q: 2\nresult = predict_model(ready, data=lda_data)#.drop(\"Blinding of intervention\", axis=1))","62e3baf3":"result","26f0f81f":"result['Label'] = result['Label'].replace([0,1,2],['N','P','Q'])","dbcf9c4e":"result","9c733f56":"#Assume that Blinding of interventaion and Blinding of outcome assessement is identical!!!\nresult['Prediction'] = result['Label']+result['Label']\nresult['Id'] = result['Filename']","723537dd":"out = result[['Id', 'Prediction']]","8954dbc7":"out","befc5f77":"out.to_csv(\"out.csv\", index=False)","21e789b5":"# Classification","d8ab11e5":"# Topic Modeling","4569ed8d":"# Export CSV","e3479701":"# Prepare Data"}}