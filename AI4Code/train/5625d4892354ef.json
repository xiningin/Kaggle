{"cell_type":{"ebccb944":"code","d9395450":"code","6061bd82":"code","b76fbd0e":"code","14fbdfea":"code","89fcdeb5":"code","3aa93147":"code","3dc335b4":"code","f58506b3":"code","ce5c354b":"code","b74cc44d":"code","86cafe72":"code","ece59b14":"code","f80cf095":"code","da2b8777":"code","94404ecf":"code","4cf9c751":"code","d36e4c65":"code","23703833":"code","1240bcf1":"code","7149dbee":"code","70f39cad":"code","33ca7924":"code","4fcaa53d":"code","62f38c05":"code","2a385129":"code","d9864df1":"code","26f39f6d":"code","076b29de":"code","f706b7fe":"code","7e52003e":"code","f49c88ba":"code","5a2f535b":"code","16197852":"code","d5cb26ea":"code","dd2c2a88":"code","084e0344":"code","d62d7ade":"code","0babd76e":"code","426ef4d3":"code","f017be8e":"code","2a61846c":"code","963a5edf":"code","94a5816d":"code","9e63c432":"code","41175d91":"code","8a0985e7":"code","a444183d":"code","e8e186e8":"code","2097cb34":"code","025c6e95":"code","e72c96b7":"code","84e4fa6a":"code","53383766":"code","077ac175":"code","51da358c":"code","3ade7a32":"code","5d6dc7f9":"code","5e77aa77":"code","b2eebdcd":"code","565332b8":"code","50b27207":"code","c452e4f9":"code","74177311":"code","93bbecc3":"code","94950bf1":"code","4e4e8308":"code","44ff0e7d":"code","aff237a7":"code","534609ef":"code","eb1557d7":"code","4cbda428":"code","afb18a28":"code","73c02435":"code","82605b15":"code","3dd83fda":"code","52c6e1c3":"code","0cc005f9":"code","584b09a3":"code","1225759f":"code","0abe9440":"code","df781fe9":"code","c2508cb2":"code","5351019d":"code","48f39644":"code","52942d51":"code","564c0a99":"code","e57b6d33":"code","8391b7ca":"code","56d856fe":"code","18344941":"code","93f41cc9":"code","7a89bae6":"code","94180ada":"code","1b602511":"code","4db2c47b":"code","1da2c622":"code","c6b61776":"code","adbc2a0a":"code","d3b13731":"code","0c8dca0b":"code","15588aba":"code","e977294c":"code","85a71319":"code","20ca3ec4":"code","7e2b4b7f":"code","6b815942":"code","485c5ced":"code","2226259a":"code","cb2080d7":"code","b1429ca5":"code","0b977e37":"code","86e51c31":"code","7eba43e4":"code","4573c1bf":"code","22727265":"code","c77d8e95":"code","eedabc77":"code","1d11bdca":"code","143cc31e":"code","21276db6":"code","cfb9f2fe":"code","d10f553a":"code","40f93159":"code","6b17765c":"code","60ffac5a":"code","3a82552d":"code","3548001e":"code","b092f5cd":"code","62a6d797":"code","a5d67e50":"code","07117a7f":"code","63a7ae00":"code","51fe03f5":"code","c78817c6":"code","e879d136":"code","ea54ea96":"code","9c138933":"code","6de6b8e7":"code","30c8f368":"code","012a58b5":"code","cd65288c":"code","21b91a76":"code","7ae779e4":"code","a2a0a99b":"code","4fae6dda":"code","2735f1e3":"code","f3ba60b4":"code","396b4bc4":"code","474bc4c8":"code","df11e842":"code","d039baca":"code","d70e6352":"code","4b01091c":"code","f30d3e97":"code","c8b6bd8e":"code","80a055a7":"code","6a47a42a":"code","8d44700d":"code","a95d9a58":"code","44ad2cee":"code","3316f940":"code","f5550c05":"code","afee6498":"code","6891ce3a":"code","2b8583b9":"code","b9491eb7":"code","13ba4e44":"code","52e5b486":"code","b4377c27":"code","2265bd14":"code","b458161f":"code","a67cc9d1":"code","8d1d5875":"code","8126aa4d":"code","952b2752":"code","cbdc6946":"code","cc62bdd1":"code","690a94f4":"code","605d735b":"code","b1d4a824":"code","7d60ae7d":"code","d77b0d79":"code","2a15ab3c":"code","912f6aaf":"code","62c926d9":"code","5b875dfb":"code","f4bd77a2":"code","c6c3abdf":"markdown","14ede841":"markdown","beec72cc":"markdown","c9c80e18":"markdown","ce062251":"markdown","297e8b4a":"markdown","1cfe832f":"markdown","fa78295a":"markdown","f9ae3a77":"markdown","549114b9":"markdown","9fe9f585":"markdown","7baa9a8b":"markdown","41bcf233":"markdown","44dc5312":"markdown","6704fd6c":"markdown","78d22f92":"markdown","7f20637f":"markdown","4fd0674e":"markdown","88848b48":"markdown","d9d87645":"markdown","84c035d2":"markdown","6349c783":"markdown","29e2845c":"markdown","241ce364":"markdown","da74d654":"markdown","1ba892a6":"markdown","318de399":"markdown","cd5a124e":"markdown","b26d202c":"markdown","65909529":"markdown","45404191":"markdown","e5c27be9":"markdown","128b2ddf":"markdown","0b3e47b4":"markdown","bf8d8e57":"markdown","dcf4a45b":"markdown","c969b73f":"markdown","7f1930ed":"markdown","9dc63313":"markdown","c8198bc1":"markdown","14f3e03d":"markdown","7fa24214":"markdown","bca575ad":"markdown","a8d04eeb":"markdown","51a5b1c5":"markdown","ef83fb95":"markdown","b86634ba":"markdown","0511ec4a":"markdown","f24e655b":"markdown","6ba6f6d7":"markdown","687dd4b2":"markdown","b3ddbf3f":"markdown","4a905424":"markdown","aa1b3bee":"markdown","17cc8913":"markdown","5b9f844e":"markdown","ef0735e4":"markdown","f86f0db6":"markdown","0d129a00":"markdown","ea0bb429":"markdown","51c32bd0":"markdown","670cf45d":"markdown","806f4fc0":"markdown","9dcc399b":"markdown","8eea4c28":"markdown","77ada3a7":"markdown","23a16df3":"markdown","9d1513d4":"markdown","e7ab427f":"markdown","f392c2b5":"markdown","7c6c984a":"markdown","03980aa2":"markdown","773a9c01":"markdown"},"source":{"ebccb944":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\n%matplotlib inline\n\npd.set_option('display.max_rows', 50)\npd.set_option('display.max_columns', 50)\n\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","d9395450":"#Check the number of columns and their names\ntrain_cols = train.columns\ntest_cols = test.columns\n\nprint(\"Train columns: {}\".format(len(train_cols)))\nprint(\"Test columns: {}\".format(len(test_cols)))\n\nprint(\"Is in train, not in test: {}\".format(set(train_cols) - set(test_cols)))\nprint(\"Is in test, not in train: {}\".format(set(test_cols) - set(train_cols)))","6061bd82":"#Check first and last id in train\/test set\nprint(train[\"Id\"].min())\nprint(train[\"Id\"].max())\nprint(test[\"Id\"].min())\nprint(test[\"Id\"].max())","b76fbd0e":"all_data = train.append(test, ignore_index=True)\nall_data[\"is_train\"] = all_data[\"Id\"].apply(lambda x: True if x <= 1460 else False)","14fbdfea":"#Setting general parameters\ncorr_cap = 0.2\nmissing_cap = 90\nvariance_cap = 0.05\n\ncolumns_to_drop = []\n\n#Create clearing function\ndef clear_function(info_df):\n    drop_total = []\n    \n    drop_corr = list(info_df[info_df[\"corr\"].abs() < corr_cap].index)\n    if len(drop_corr) > 0:\n        columns_to_drop.extend(drop_corr)\n        drop_total.extend(drop_corr)\n        \n    drop_miss = list(info_df[info_df[\"missing_perc\"] > missing_cap].index)\n    if len(drop_miss) > 0:\n        columns_to_drop.extend(drop_miss)\n        drop_total.extend(drop_miss)\n        \n    drop_freq = list(info_df[info_df[\"var\"] < variance_cap].index)\n    if len(drop_freq) > 0:\n        columns_to_drop.extend(drop_freq)\n        drop_total.extend(drop_freq)\n\n    #Remove duplicates\n    return list(set(drop_total))","89fcdeb5":"from sklearn.metrics import mutual_info_score\n\ndef show_corr_heatmap(df, method, width=10):\n    corr = df.corr(method)\n    \n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr, dtype=bool))\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(width, width))\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.8, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True, fmt=\".2f\")\n    \n    return corr","3aa93147":"#Features overview function\n\ndef generate_features_overview(df):\n    df_info = pd.DataFrame()\n    df_info[\"type\"] = df.dtypes\n    df_info[\"missing_count\"] = df.isna().sum()\n    df_info[\"missing_perc\"] = (df_info[\"missing_count\"] \/ len(df) * 100).astype(int)\n    df_info[\"unique\"] = df.nunique()\n    df_info[\"top\"] = df.mode().head(1).T\n    df_info[\"freq\"] = df[df==df_info[\"top\"]].count()\n    df_info[\"freq_perc\"] = (df_info[\"freq\"] \/ len(df) * 100).astype(int)\n    \n    temp_df = df.apply(lambda x : pd.factorize(x)[0] if x.dtypes == \"object\" else x)\n\n    temp_df.fillna(-1, inplace=True)\n\n    df_info[\"var\"] = temp_df[temp_df[\"is_train\"] == True].var()\n    df_info[\"skew\"] = temp_df[temp_df[\"is_train\"] == True].skew()\n    \n    \n    df_info[\"corr\"] = df[df[\"is_train\"] == True].corr(\"spearman\")[target_feature]\n\n    for feature in df.loc[:, df.dtypes == \"object\"].columns:\n        dummies_df = pd.get_dummies(df[feature].fillna(-1),prefix=feature)\n        dummies_df[target_feature] = df[target_feature]\n        \n        \n        ma = dummies_df.corr()[target_feature][:-1].max()\n        mi = dummies_df.corr()[target_feature][:-1].min()\n        \n        if abs(ma) > abs(mi):\n            df_info.loc[feature, \"corr\"] = ma\n        else:\n            df_info.loc[feature, \"corr\"] = mi\n    \n    \n    df_info = pd.concat([df_info, df.describe().T], axis=1)\n    return df_info","3dc335b4":"all_data.head(10)","f58506b3":"#Features categorization\n\nlocation_features = [\"MSZoning\", \"LotFrontage\", \"LotArea\", \"Street\", \"Alley\", \"LotShape\", \"LandContour\",\n                     \"Utilities\", \"LotConfig\", \"LandSlope\", \"Neighborhood\", \"Condition1\", \"Condition2\"]\n\nbuilding_features = [\"MSSubClass\", \"BldgType\", \"HouseStyle\", \"OverallQual\", \"OverallCond\", \"YearBuilt\", \"YearRemodAdd\"]\n\nconstruction_features = [\"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"MasVnrType\", \"MasVnrArea\", \"ExterQual\", \"ExterCond\", \"Foundation\"]\n\nbasement_features = [\"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinSF1\", \"BsmtFinType2\", \"BsmtFinSF2\",\n                     \"BsmtUnfSF\", \"TotalBsmtSF\", \"BsmtFullBath\", \"BsmtHalfBath\"]\n\nab_grade_features = [\"1stFlrSF\", \"2ndFlrSF\", \"LowQualFinSF\", \"GrLivArea\", \"FullBath\", \"HalfBath\", \"BedroomAbvGr\", \"KitchenAbvGr\", \"KitchenQual\", \"TotRmsAbvGrd\"]\n\ngarage_features = [\"GarageType\", \"GarageYrBlt\", \"GarageFinish\", \"GarageCars\", \"GarageArea\", \"GarageQual\", \"GarageCond\"]\n\nutilities_features = [\"Heating\", \"HeatingQC\", \"CentralAir\", \"Electrical\"]\n\ncomfort_features = [\"Fireplaces\", \"FireplaceQu\", \"PoolArea\", \"PoolQC\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\"]\n\nother_features = [\"PavedDrive\", \"Fence\", \"MiscFeature\", \"MiscVal\"]\n\nsale_features = [\"Functional\", \"SaleType\", \"SaleCondition\", \"MoSold\", \"YrSold\"]\n\nrating_features = [\"OverallQual\", \"OverallCond\", \"ExterQual\", \"ExterCond\", \"BsmtQual\", \"BsmtCond\", \"HeatingQC\", \"KitchenQual\",\n                   \"FireplaceQu\", \"GarageQual\", \"GarageCond\", \"PoolQC\"]\n\ndate_features = [\"YearBuilt\", \"YearRemodAdd\", \"GarageYrBlt\", \"MoSold\", \"YrSold\"]\n\narea_features = [\"LotArea\", \"MasVnrArea\", \"BsmtFinSF1\", \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\", \"LowQualFinSF\", \"GrLivArea\",\n                      \"GarageArea\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\", \"PoolArea\"]\n\nid_feature = \"Id\"\n\ntarget_feature = \"SalePrice\"","ce5c354b":"info_df = generate_features_overview(all_data)\ninfo_df","b74cc44d":"#MSSubClass should be converted to type object since it represents categorical data\nall_data[\"MSSubClass\"] = all_data[\"MSSubClass\"].astype(str)\n\n#Update info_df\ninfo_df = generate_features_overview(all_data)","86cafe72":"info_location = info_df.loc[location_features]\ninfo_location","ece59b14":"clear_function(info_location)","f80cf095":"location_features_c = [x for x in location_features if x not in columns_to_drop]\nlocation_features_c.append(target_feature)\ninfo_df.loc[location_features_c]","da2b8777":"#Check correlations on lot frontage\nall_data[location_features_c].corr(\"spearman\")[\"LotFrontage\"]","94404ecf":"#Fill LotFrontage missing values with KNNImputer on LotArea\nfrom sklearn.impute import KNNImputer\n\nimputer = KNNImputer(n_neighbors=5)\nall_data[['LotFrontage', 'LotArea']] = imputer.fit_transform(all_data[['LotFrontage', 'LotArea']])","4cf9c751":"#Fill missing MSZoning with mode\nall_data[\"MSZoning\"].fillna(all_data[\"MSZoning\"].mode()[0], inplace=True)","d36e4c65":"sns.pairplot(all_data[location_features_c])","23703833":"#Outliers\noutliers = all_data[(all_data[\"LotFrontage\"] > 300) | (all_data[\"LotArea\"] > 100000)]\noutliers[location_features_c]","1240bcf1":"all_data.drop(outliers.index, axis=0, inplace=True)","7149dbee":"sns.stripplot(x=\"MSZoning\", y=target_feature, data=all_data, jitter=0.20)","70f39cad":"#Outliers\nall_data[all_data[target_feature] > 700000]","33ca7924":"all_data.drop([691, 1182], axis=0, inplace=True)","4fcaa53d":"#Correlations of dummy values to the target\ndummies_df = pd.get_dummies(all_data[\"MSZoning\"],prefix=\"MSZoning\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"MSZoning\"].value_counts())","62f38c05":"#New binary column - is_low_density\nall_data[\"is_low_density\"] = (all_data[\"MSZoning\"] == \"FV\") | (all_data[\"MSZoning\"] == \"RL\")","2a385129":"#New feature correlation and strip plot\nprint(all_data[[\"is_low_density\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"is_low_density\", y=target_feature, data=all_data, jitter=0.20)","d9864df1":"#There is no significant correlation increase, so we should drop new column\nall_data.drop(\"is_low_density\", axis=1, inplace=True)","26f39f6d":"sns.stripplot(x=\"LotShape\", y=target_feature, data=all_data, jitter=0.20)","076b29de":"dummies_df = pd.get_dummies(all_data[\"LotShape\"],prefix=\"LotShape\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"LotShape\"].value_counts())","f706b7fe":"#Create binary column - is_lotShape_regular\nall_data[\"is_lot_irregular\"] = all_data[\"LotShape\"] != \"Reg\"","7e52003e":"#New feature correlation and strip plot\nprint(all_data[[\"is_lot_irregular\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"is_lot_irregular\", y=target_feature, data=all_data, jitter=0.20)","f49c88ba":"#There is no significant correlation increase, so we should drop new column\nall_data.drop(\"is_lot_irregular\", axis=1, inplace=True)","5a2f535b":"f, ax = plt.subplots(figsize=(20, 7))\nsns.stripplot(x=\"Neighborhood\", y=target_feature, data=all_data, jitter=0.20)","16197852":"dummies_df = pd.get_dummies(all_data[\"Neighborhood\"],prefix=\"Neighborhood\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\", 20)\nprint(all_data[\"Neighborhood\"].value_counts())","d5cb26ea":"group_neigh = cor[target_feature].sort_values(ascending=False)[1:]\ngroup_neigh\n","dd2c2a88":"#Create binary column - is_high_class_neigh\ndef groupNeighborhoods(row):\n    row_name = \"Neighborhood_\" + row \n    if group_neigh.loc[row_name] > 0.20:\n        return True\n    else:\n        return False\n\nall_data[\"is_high_class_neigh\"] = all_data[\"Neighborhood\"].apply(groupNeighborhoods)","084e0344":"#New feature correlation and strip plot\nprint(all_data[[\"is_high_class_neigh\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"is_high_class_neigh\", y=target_feature, data=all_data, jitter=0.20)","d62d7ade":"info_building = info_df.loc[building_features]\ninfo_building","0babd76e":"clear_function(info_building)","426ef4d3":"building_features_c = [x for x in building_features if x not in columns_to_drop]\nbuilding_features_c.append(target_feature)\ninfo_df.loc[building_features_c]","f017be8e":"#Check year built agains year remodeled. Year built must always be lower or equal.\nall_data[all_data[\"YearBuilt\"] > all_data[\"YearRemodAdd\"]]","2a61846c":"#Correct the faulty value\nall_data.loc[1876, \"YearRemodAdd\"] = all_data.loc[1876, \"YearBuilt\"]","963a5edf":"#Correlation withing numerical values\nsns.pairplot(all_data[[\"OverallQual\", \"YearBuilt\", \"YearRemodAdd\", \"SalePrice\"]])","94a5816d":"#Outliers\nall_data[(all_data[\"YearBuilt\"] < 1900) & (all_data[\"SalePrice\"] > 400000)]","9e63c432":"all_data.drop(185, inplace=True)","41175d91":"f, ax = plt.subplots(figsize=(20, 7))\nsns.stripplot(x=\"MSSubClass\", y=target_feature, data=all_data, jitter=0.20)","8a0985e7":"#Remove feature since we have the same data in HouseStyle and YearBuilt\ncolumns_to_drop.append(\"MSSubClass\")","a444183d":"sns.stripplot(x=\"HouseStyle\", y=target_feature, data=all_data, jitter=0.20)","e8e186e8":"#Correlations of dummy values to the target\ndummies_df = pd.get_dummies(all_data[\"HouseStyle\"],prefix=\"HouseStyle\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"HouseStyle\"].value_counts())","2097cb34":"info_construction = info_df.loc[construction_features]\ninfo_construction","025c6e95":"clear_function(info_construction)","e72c96b7":"construction_features_c = [x for x in construction_features if x not in columns_to_drop]\nconstruction_features_c.append(target_feature)\ninfo_df.loc[construction_features_c]","84e4fa6a":"#Fill missing values in MasVnrArea with 0\nall_data[\"MasVnrArea\"].fillna(0, inplace=True)\nall_data[\"MasVnrType\"].fillna(\"None\", inplace=True)\n\n#Check if MasVnrArea == 0 when MasVnrType == None \ncheck = all_data[(all_data[\"MasVnrType\"]==\"None\") & (all_data[\"MasVnrArea\"]!=0)]\ncheck","53383766":"#Correct the faulty values\nall_data.loc[check.index, \"MasVnrArea\"] = 0","077ac175":"#Fill missing values in Exterior1st and Exterior2nd with mode\nall_data[\"Exterior1st\"].fillna(all_data[\"Exterior1st\"].mode()[0], inplace=True)\nall_data[\"Exterior2nd\"].fillna(all_data[\"Exterior2nd\"].mode()[0], inplace=True)","51da358c":"sns.pairplot(all_data[construction_features_c])","3ade7a32":"sns.stripplot(x=\"RoofStyle\", y=target_feature, data=all_data, jitter=0.20)","5d6dc7f9":"#Correlations of dummy values to the target\ndummies_df = pd.get_dummies(all_data[\"RoofStyle\"],prefix=\"RoofStyle\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"RoofStyle\"].value_counts())","5e77aa77":"f, ax = plt.subplots(figsize=(20, 7))\nsns.stripplot(x=\"Exterior1st\", y=target_feature, data=all_data, jitter=0.20)","b2eebdcd":"f, ax = plt.subplots(figsize=(20, 7))\nsns.stripplot(x=\"Exterior2nd\", y=target_feature, data=all_data, jitter=0.20)","565332b8":"#Check for two different exterior coverings\nall_data[\"Exterior_comb\"] = all_data[\"Exterior1st\"] != all_data[\"Exterior2nd\"]\nall_data[\"Exterior_comb\"].value_counts()","50b27207":"#Feature correlation to the target\nprint(all_data[[\"Exterior_comb\", target_feature]].corr()[target_feature][0])","c452e4f9":"#Correlations of dummy values to the target\ndummies_df = pd.get_dummies(all_data[\"Exterior1st\"],prefix=\"Exterior1st\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"Exterior1st\"].value_counts())","74177311":"#New binary column - has_vinyl_sidig\nall_data[\"has_vinyl_sidig\"] = (all_data[\"Exterior1st\"] == \"VinylSd\") | (all_data[\"Exterior2nd\"] == \"VinylSd\")","93bbecc3":"#New feature correlation and strip plot\nprint(all_data[[\"has_vinyl_sidig\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"has_vinyl_sidig\", y=target_feature, data=all_data, jitter=0.20)","94950bf1":"#No correlation gain, so we should drop the column.\nall_data.drop(\"Exterior_comb\", axis=1, inplace=True)\nall_data.drop(\"has_vinyl_sidig\", axis=1, inplace=True)\n\n#Remove Exterior2nd since we have mostly the same data Exterior1st, those which differ have no correlation to the target.\ncolumns_to_drop.append(\"Exterior2nd\")","4e4e8308":"sns.stripplot(x=\"MasVnrType\", y=target_feature, data=all_data, jitter=0.20)","44ff0e7d":"#Correlations of dummy values to the target\ndummies_df = pd.get_dummies(all_data[\"MasVnrType\"],prefix=\"MasVnrType\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"MasVnrType\"].value_counts())","aff237a7":"#New binary column - has_mas_vnr\nall_data[\"has_mas_vnr\"] = all_data[\"MasVnrType\"] != \"None\"","534609ef":"#New feature correlation and strip plot\nprint(all_data[[\"has_mas_vnr\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"has_mas_vnr\", y=target_feature, data=all_data, jitter=0.20)","eb1557d7":"sns.stripplot(x=\"Foundation\", y=target_feature, data=all_data, jitter=0.20)","4cbda428":"dummies_df = pd.get_dummies(all_data[\"Foundation\"],prefix=\"Foundation\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"Foundation\"].value_counts())","afb18a28":"sns.stripplot(x=\"ExterQual\", y=target_feature, data=all_data, jitter=0.20)","73c02435":"info_basement = info_df.loc[basement_features]\ninfo_basement","82605b15":"clear_function(info_basement)","3dd83fda":"basement_features_c = [x for x in basement_features if x not in columns_to_drop]\nbasement_features_c.append(target_feature)\ninfo_df.loc[basement_features_c]","52c6e1c3":"plt.figure(figsize=(20,7))\nsns.heatmap(all_data[basement_features].isnull(),cbar=False)","0cc005f9":"#Actual missing values\nbasement_missing = all_data[basement_features].isna()\nbasement_missing[\"basement_missing\"] = basement_missing.sum(axis=1)\nbasement_missing = basement_missing[(basement_missing[\"basement_missing\"] > 0) & (basement_missing[\"basement_missing\"] < 5)]\n\n#Fill categorical missing values where there is no basement\nall_data[\"BsmtQual\"].fillna(\"No_basement\", inplace=True)\nall_data[\"BsmtExposure\"].fillna(\"No_basement\", inplace=True)\nall_data[\"BsmtFinType1\"].fillna(\"No_basement\", inplace=True)\n\n\n#Fill numerical missing values\nall_data[\"BsmtFinSF1\"].fillna(0, inplace=True)\nall_data[\"BsmtFinSF2\"].fillna(0, inplace=True)\nall_data[\"BsmtUnfSF\"].fillna(0, inplace=True)\nall_data[\"TotalBsmtSF\"].fillna(0, inplace=True)\nall_data[\"BsmtFullBath\"].fillna(0, inplace=True)\n\n#Fill missing values with mode\nbsmnt_fill_mode = all_data.loc[basement_missing.index][[\"BsmtExposure\", \"BsmtFinType1\"]].replace(\"No_basement\", all_data[[\"BsmtExposure\", \"BsmtFinType1\"]].mode().T[0])\nall_data.update(bsmnt_fill_mode)","584b09a3":"#Check if no basement == total sq is 0\nall_data[(all_data[\"BsmtExposure\"] == \"No_basement\") & (all_data[\"TotalBsmtSF\"] != 0)][basement_features]","1225759f":"#Check if square feet add up to total value\nall_data[all_data[\"BsmtFinSF1\"] + all_data[\"BsmtFinSF2\"] + all_data[\"BsmtUnfSF\"] != all_data[\"TotalBsmtSF\"]]","0abe9440":"sns.pairplot(all_data[basement_features_c])","df781fe9":"#Outliers\nall_data[all_data[\"BsmtFinSF1\"] > 3000]","c2508cb2":"# This feature will be later converted to numerical, since it is rating feature\nsns.stripplot(x=\"BsmtQual\", y=target_feature, data=all_data, jitter=0.20)","5351019d":"sns.stripplot(x=\"BsmtExposure\", y=target_feature, data=all_data, jitter=0.20)","48f39644":"dummies_df = pd.get_dummies(all_data[\"BsmtExposure\"],prefix=\"BsmtExposure\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"BsmtExposure\"].value_counts())","52942d51":"#New binary column - has_basement_exposure\nall_data[\"has_basement_exposure\"] = (all_data[\"BsmtExposure\"] != \"No\") & (all_data[\"BsmtExposure\"] != \"No_basement\")","564c0a99":"#New feature correlation and strip plot\nprint(all_data[[\"has_basement_exposure\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"has_basement_exposure\", y=target_feature, data=all_data, jitter=0.20)","e57b6d33":"#No correlation gain, so we should drop the column.\nall_data.drop(\"has_basement_exposure\", axis=1, inplace=True)","8391b7ca":"sns.stripplot(x=\"BsmtFinType1\", y=target_feature, data=all_data, jitter=0.20)","56d856fe":"dummies_df = pd.get_dummies(all_data[\"BsmtFinType1\"],prefix=\"BsmtFinType1\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"BsmtFinType1\"].value_counts())","18344941":"#Convert to binary column - has_basement_GLQ\nall_data[\"has_basement_GLQ\"] = all_data[\"BsmtFinType1\"] == \"GLQ\"","93f41cc9":"\n#New feature correlation and strip plot\nprint(all_data[[\"has_basement_GLQ\", target_feature]].corr()[target_feature][0])\nsns.stripplot(x=\"has_basement_GLQ\", y=target_feature, data=all_data, jitter=0.20)","7a89bae6":"#Drop original column to reduce overfitting\ncolumns_to_drop.append(\"BsmtFinType1\")","94180ada":"info_ab_grade = info_df.loc[ab_grade_features]\ninfo_ab_grade","1b602511":"clear_function(info_ab_grade)","4db2c47b":"ab_grade_features_c = [x for x in ab_grade_features if x not in columns_to_drop]\nab_grade_features_c.append(target_feature)\ninfo_df.loc[ab_grade_features_c]","1da2c622":"#Check areas\nall_data[all_data[\"1stFlrSF\"] + all_data[\"2ndFlrSF\"] + all_data[\"LowQualFinSF\"] != all_data[\"GrLivArea\"]]","c6b61776":"#Fill missing KitchenQual with mode\nall_data[\"KitchenQual\"].fillna(all_data[\"KitchenQual\"].mode()[0], inplace=True)","adbc2a0a":"sns.pairplot(all_data[ab_grade_features_c])","d3b13731":"#Outliers\nall_data[(all_data[\"GrLivArea\"] > 4000) & (all_data[\"SalePrice\"] < 300000)]","0c8dca0b":"all_data.drop(523, axis=0, inplace=True)","15588aba":"sns.stripplot(x=\"KitchenQual\", y=target_feature, data=all_data, jitter=0.20)","e977294c":"info_garage = info_df.loc[garage_features]\ninfo_garage","85a71319":"clear_function(info_garage)","20ca3ec4":"garage_features_c = [x for x in garage_features if x not in columns_to_drop]\ngarage_features_c.append(target_feature)\ninfo_df.loc[garage_features_c]","7e2b4b7f":"#Outlier\nall_data[all_data[\"GarageYrBlt\"] > 2050]","6b815942":"all_data.loc[2592, \"GarageYrBlt\"] = all_data[\"GarageYrBlt\"].mode()[0]","485c5ced":"plt.figure(figsize=(20,7))\nsns.heatmap(all_data[garage_features].isnull(),cbar=False)","2226259a":"#Actual missing values\ngarage_missing = all_data[garage_features].isna()\ngarage_missing[\"garage_missing\"] = garage_missing.sum(axis=1)\ngarage_missing = garage_missing[(garage_missing[\"garage_missing\"] > 0) & (garage_missing[\"garage_missing\"] < 5)]\n\n#Fill categorical missing values where there is no basement\nall_data[\"GarageType\"].fillna(\"No_garage\", inplace=True)\nall_data[\"GarageFinish\"].fillna(\"No_garage\", inplace=True)\nall_data[\"GarageQual\"].fillna(\"No_garage\", inplace=True)\nall_data[\"GarageCond\"].fillna(\"No_garage\", inplace=True)\n\n#Fill numerical missing values\nall_data[\"GarageYrBlt\"].fillna(0, inplace=True)\nall_data[\"GarageArea\"].fillna(0, inplace=True)\nall_data[\"GarageCars\"].fillna(0, inplace=True)\n\n#Fill missing values with mode\ngarage_fill_mode = all_data.loc[garage_missing.index][\"GarageFinish\"].replace(\"No_garage\", all_data[\"GarageFinish\"].mode().T[0])\nall_data.update(garage_fill_mode)","cb2080d7":"#Correlation withing numerical values\nsns.pairplot(all_data[all_data[\"GarageYrBlt\"] > 0][garage_features_c])","b1429ca5":"#Outliers\nall_data[(all_data[\"GarageArea\"] > 1200) & (all_data[\"SalePrice\"] < 300000)]","0b977e37":"all_data.drop([581, 1061, 1190], axis=0, inplace=True)","86e51c31":"sns.stripplot(x=\"GarageType\", y=target_feature, data=all_data, jitter=0.20)","7eba43e4":"dummies_df = pd.get_dummies(all_data[\"GarageType\"],prefix=\"GarageType\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"GarageType\"].value_counts())","4573c1bf":"sns.stripplot(x=\"GarageFinish\", y=target_feature, data=all_data, jitter=0.20)","22727265":"dummies_df = pd.get_dummies(all_data[\"GarageFinish\"],prefix=\"GarageFinish\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"GarageFinish\"].value_counts())","c77d8e95":"sns.stripplot(x=\"GarageQual\", y=target_feature, data=all_data, jitter=0.20)","eedabc77":"sns.stripplot(x=\"GarageCond\", y=target_feature, data=all_data, jitter=0.20)","1d11bdca":"info_utilities = info_df.loc[utilities_features]\ninfo_utilities","143cc31e":"clear_function(info_utilities)","21276db6":"utilities_features_c = [x for x in utilities_features if x not in columns_to_drop]\nutilities_features_c.append(target_feature)\ninfo_df.loc[utilities_features_c]","cfb9f2fe":"all_data[\"Electrical\"].fillna(all_data[\"Electrical\"].mode()[0], inplace=True)","d10f553a":"sns.stripplot(x=\"HeatingQC\", y=target_feature, data=all_data, jitter=0.20)","40f93159":"sns.stripplot(x=\"CentralAir\", y=target_feature, data=all_data, jitter=0.20)","6b17765c":"#Convert to binary column\nall_data[\"CentralAir\"] = all_data[\"CentralAir\"] == \"Y\"","60ffac5a":"sns.stripplot(x=\"Electrical\", y=target_feature, data=all_data, jitter=0.20)","3a82552d":"dummies_df = pd.get_dummies(all_data[\"Electrical\"],prefix=\"Electrical\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"Electrical\"].value_counts())","3548001e":"info_comfort = info_df.loc[comfort_features]\ninfo_comfort","b092f5cd":"clear_function(info_comfort)","62a6d797":"comfort_features_c = [x for x in comfort_features if x not in columns_to_drop]\ncomfort_features_c.append(target_feature)\ninfo_df.loc[comfort_features_c]","a5d67e50":"#Fill categorical missing values where there is no fireplace\nall_data[\"FireplaceQu\"].fillna(\"No_fireplace\", inplace=True)","07117a7f":"#Check two fireplaces features\nall_data[(all_data[\"FireplaceQu\"] == \"No_fireplace\") & (all_data[\"Fireplaces\"] != 0)]","63a7ae00":"sns.pairplot(all_data[comfort_features_c])","51fe03f5":"#Outliers\nall_data[(all_data[\"OpenPorchSF\"] > 400) & (all_data[\"SalePrice\"] < 100000)]","c78817c6":"all_data.drop([495], axis=0, inplace=True)","e879d136":"sns.stripplot(x=\"FireplaceQu\", y=target_feature, data=all_data, jitter=0.20)","ea54ea96":"info_other = info_df.loc[other_features]\ninfo_other","9c138933":"clear_function(info_other)","6de6b8e7":"other_features_c = [x for x in other_features if x not in columns_to_drop]\nother_features_c.append(target_feature)\ninfo_df.loc[other_features_c]","30c8f368":"sns.stripplot(x=\"PavedDrive\", y=target_feature, data=all_data, jitter=0.20)","012a58b5":"dummies_df = pd.get_dummies(all_data[\"PavedDrive\"],prefix=\"PavedDrive\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"PavedDrive\"].value_counts())","cd65288c":"#Convert PavedDrive to binary column\nall_data[\"PavedDrive\"] = all_data[\"PavedDrive\"] == \"Y\"","21b91a76":"info_sale = info_df.loc[sale_features]\ninfo_sale","7ae779e4":"clear_function(info_sale)","a2a0a99b":"sale_features_c = [x for x in sale_features if x not in columns_to_drop]\nsale_features_c.append(target_feature)\ninfo_df.loc[sale_features_c]","4fae6dda":"all_data[\"SaleType\"].fillna(all_data[\"SaleType\"].mode()[0], inplace=True)","2735f1e3":"sns.stripplot(x=\"SaleType\", y=target_feature, data=all_data, jitter=0.20)","f3ba60b4":"dummies_df = pd.get_dummies(all_data[\"SaleType\"],prefix=\"SaleType\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"SaleType\"].value_counts())","396b4bc4":"sns.stripplot(x=\"SaleCondition\", y=target_feature, data=all_data, jitter=0.20)","474bc4c8":"dummies_df = pd.get_dummies(all_data[\"SaleCondition\"],prefix=\"SaleCondition\")\ndummies_df[target_feature] = all_data[target_feature]\ncor = show_corr_heatmap(dummies_df, \"pearson\")\nprint(all_data[\"SaleCondition\"].value_counts())","df11e842":"#Remove already droped features\nrating_features_c = set(rating_features) - set(columns_to_drop)\nrating_features_c","d039baca":"info_rating = info_df.loc[rating_features_c]\ninfo_rating","d70e6352":"#Create replacement dictionary\nreplacement_dict = {\"Ex\": 9, \"Gd\": 7, \"TA\": 5, \"Fa\": 3, \"Po\": 1, \"No_fireplace\": 0, \"No_garage\": 0, \"No_basement\": 0}","4b01091c":"#Make replacements\nall_data.replace({\"GarageQual\": replacement_dict}, inplace=True)\nall_data.replace({\"BsmtQual\": replacement_dict}, inplace=True)\nall_data.replace({\"HeatingQC\": replacement_dict}, inplace=True)\nall_data.replace({\"FireplaceQu\": replacement_dict}, inplace=True)\nall_data.replace({\"GarageCond\": replacement_dict}, inplace=True)\nall_data.replace({\"ExterQual\": replacement_dict}, inplace=True)\nall_data.replace({\"KitchenQual\": replacement_dict}, inplace=True)","f30d3e97":"info_date = info_df.loc[date_features]\ninfo_date","c8b6bd8e":"#Chronology 1 cleaning\nchron_1 = all_data[(all_data[\"YearBuilt\"] > all_data[\"GarageYrBlt\"]) & (all_data[\"GarageYrBlt\"] != 0)][date_features]\nchron_1","80a055a7":"all_data.loc[chron_1.index, \"GarageYrBlt\"] = chron_1[\"YearBuilt\"]","6a47a42a":"#Chronology 2 cleaning\nall_data[all_data[\"YearBuilt\"] > all_data[\"YearRemodAdd\"]][date_features]","8d44700d":"all_data[all_data[\"YearRemodAdd\"] > all_data[\"YrSold\"]][date_features]","a95d9a58":"all_data[all_data[\"YearBuilt\"] > all_data[\"YrSold\"]][date_features]","44ad2cee":"#Cleaning faulty values\nall_data.loc[[2295, 2549], [\"YearBuilt\", \"YearRemodAdd\", \"GarageYrBlt\"]] = 2007","3316f940":"#Remove already droped features\narea_features_c = set(area_features) - set(columns_to_drop)\narea_features_c","f5550c05":"info_area = info_df.loc[area_features_c]\ninfo_area","afee6498":"all_data[all_data[\"1stFlrSF\"] > all_data[\"GrLivArea\"]][area_features_c]","6891ce3a":"list(set(columns_to_drop))\nall_data_c1 = all_data.drop(columns_to_drop, axis=1)","2b8583b9":"info_df = generate_features_overview(all_data_c1)\nfeatures_to_normalize = info_df[info_df[\"skew\"].abs()>0.5]\nnumeric_features_to_normalize = list(features_to_normalize[(features_to_normalize[\"type\"] != \"object\") & (features_to_normalize[\"type\"] != \"bool\")].index)","b9491eb7":"numeric_features_to_normalize","13ba4e44":"#Since there are a few rating features, we should include all off them\nnumeric_features_to_normalize.extend(rating_features_c)","52e5b486":"for feature in list(set(numeric_features_to_normalize)):\n    if feature.index == target_feature:\n        last_train_index = all_data[all_data[\"is_train\"] == True].tail(1).index[0]\n        all_data_c1.loc[:last_train_index, target_feature] = np.log1p(all_data_c1.loc[:last_train_index, target_feature])\n    else:\n        all_data_c1[feature] = np.log1p(all_data_c1[feature])","b4377c27":"def create_dummies(df,features):\n    for col in features:\n        dummies = pd.get_dummies(df[col],prefix=col)\n        df = pd.concat([df,dummies],axis=1)\n        df = df.drop(col, axis=1)\n    return df","2265bd14":"info_df = generate_features_overview(all_data_c1)\ndummies = list(info_df[info_df[\"type\"] == \"object\"].index)\nall_data_c1 = create_dummies(all_data_c1, dummies)\ninfo_df_new = generate_features_overview(all_data_c1)","b458161f":"train_f = all_data_c1[all_data_c1[\"is_train\"] == True]\ntest_f = all_data_c1[all_data_c1[\"is_train\"] == False]\n\ntrain_f.drop(\"is_train\", axis=1, inplace=True)\ntest_f.drop(\"is_train\", axis=1, inplace=True)","a67cc9d1":"selected_features = list(list(info_df_new[info_df_new[\"type\"] != \"uint8\"].index))\nselected_features.remove(\"Id\")\nselected_features.remove(\"is_train\")","8d1d5875":"top_correlation_features = list(train_f[selected_features].corr()[target_feature].sort_values(ascending=False).index)\ntop = show_corr_heatmap(train_f[top_correlation_features], \"pearson\", 30)","8126aa4d":"#Remove good correlated independent features\nselected_features.remove(\"TotRmsAbvGrd\")\nselected_features.remove(\"2ndFlrSF\")\nselected_features.remove(\"GarageArea\")\nselected_features.remove(\"GarageQual\")\nselected_features.remove(\"GarageCond\")\nselected_features.remove(\"1stFlrSF\")\nselected_features.remove(\"Fireplaces\")\nselected_features.remove(\"BsmtFullBath\")\nselected_features.remove(\"has_mas_vnr\")\nselected_features.remove(\"EnclosedPorch\")","952b2752":"top_correlation_features = list(train_f[selected_features].corr()[target_feature].sort_values(ascending=False).index)\ntop = show_corr_heatmap(train_f[top_correlation_features], \"pearson\", 30)","cbdc6946":"selected_features.remove(\"BedroomAbvGr\")\nselected_features.remove(\"LotFrontage\")","cc62bdd1":"#Add dummy features with correlation > 0.1\nselected_features.extend(list(info_df_new[(info_df_new[\"corr\"].abs() > 0.1) & (info_df_new[\"type\"] == \"uint8\")].index))","690a94f4":"#Remove target feature\nselected_features.remove(target_feature)","605d735b":"import contextlib\nimport time\n\n@contextlib.contextmanager\ndef timer():\n    start = time.time()\n    \n    yield\n\n    end = time.time()\n    runtime = '{:.2f}s \\n'.format(end - start)\n    print(runtime)","b1d4a824":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom xgboost.sklearn import XGBRegressor\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform\n\ndef select_regression_model(df, features, target, typ):\n    \n    all_X = df[features]\n    all_y = df[target]\n    \n    models = [\n        {\n            \"name\": \"LinearRegression\",\n            \"estimator\": LinearRegression(),\n            \"hyperparameters\":\n                {\n                    \"normalize\": [True, False]\n                }\n         },\n                {\n            \"name\": \"LassoRegression\",\n            \"estimator\": Lasso(),\n            \"hyperparameters\":\n                {\n                    \"alpha\": [0.0005, 0.0010, 0.0015]\n                }\n        },\n        {\n            \"name\": \"RidgeRegression\",\n            \"estimator\": Ridge(),\n            \"hyperparameters\":\n                {\n                    \"alpha\": [0.01, 0.02, 0.03]\n                }\n        },  \n        {\n            \"name\": \"ElasticNet\",\n            \"estimator\": ElasticNet(),\n            \"hyperparameters\":\n                {\n                    \"alpha\": [0.0005, 0.0010, 0.0015],\n                    \"l1_ratio\": [0.9]\n                }\n        },\n        {\n            \"name\": \"KNeighborsRegressor\",\n            \"estimator\": KNeighborsRegressor(),\n            \"hyperparameters\":\n                {\n                    \"n_neighbors\": range(1,20,2),\n                    \"weights\": [\"distance\", \"uniform\"],\n                    \"algorithm\": [\"ball_tree\", \"kd_tree\", \"brute\"],\n                    \"p\": [1,2]\n                }\n        },\n        {\n            \"name\": \"RandomForestRegressor\",\n            \"estimator\": RandomForestRegressor(random_state=1),\n            \"hyperparameters\":\n                {\n                    \"max_depth\": [2, 5, 10],\n                }\n        }\n    ]\n    \n    for model in models:\n        with timer():\n            print(model[\"name\"])\n            if typ == \"grid\":\n                search = GridSearchCV(model[\"estimator\"], param_grid=model[\"hyperparameters\"], cv=10, scoring='neg_root_mean_squared_error')\n            elif typ == \"random\":\n                search = RandomizedSearchCV(model[\"estimator\"], param_distributions=model[\"hyperparameters\"], n_iter = 1, cv=10, scoring='neg_root_mean_squared_error')\n\n            search.fit(all_X, all_y)\n            model[\"best_params\"] = search.best_params_\n            model[\"best_score\"] = search.best_score_\n            model[\"best_model\"] = search.best_estimator_\n            \n            print(model[\"best_params\"])\n            print(model[\"best_score\"])\n\n    return models","7d60ae7d":"result = select_regression_model(train_f, selected_features, target_feature, \"grid\")","d77b0d79":"#Best model selection\nbest_rf_model = result[2][\"best_model\"]\nbest_rf_model.fit(train_f[selected_features], train_f[target_feature])","2a15ab3c":"predictions = best_rf_model.predict(test_f[selected_features])","912f6aaf":"test_f[\"predictions\"] = np.expm1(predictions)\ntest_f[\"predictions\"].describe()","62c926d9":"np.expm1(train_f[\"SalePrice\"]).describe()","5b875dfb":"def save_submission_file(data, filename=\"submission.csv\"):\n    test_ids = data[\"Id\"]\n    predictions = data[\"predictions\"]\n    \n    submission_df = {\"Id\": test_ids,\n                 \"SalePrice\": predictions}\n    \n    submission = pd.DataFrame(submission_df)\n    submission.to_csv(filename,index=False)","f4bd77a2":"save_submission_file(test_f)","c6c3abdf":"Highlights:\n- strong correlation between target column and TotalBsmtSF","14ede841":"Highlights:\n- strong correlation between target column and OverallQual\n\nChecks:\n- Year remodeled is higher or equal to year build","beec72cc":"<a id=\"section-2.7\"><\/a>\n## 2.7. Garage Features ##\n\nFeatures about garage.","c9c80e18":"### Categorical features ###","ce062251":"Cleaning garage features:\n- some garage features are actual missing values (those with less than 5 missing features according to chart above)\n- most of them are just meaning there is no basement, which is not a missing value","297e8b4a":"Highlights:\n- strong correlation between target column and living area columns\n\nChecks:\n- 1stFlrSF + 2ndFlrSF + LowQualFinSF should be equal to GrLivArea","1cfe832f":"### Categorical features ###","fa78295a":"Highlights:\n- strong correlation with number of fireplaces\n\nChecks:\n- If there are 0 fireplaces there must be na in fireplaces Q","f9ae3a77":"Dealing with missing values","549114b9":" <a id=\"section-2.5\"><\/a>\n## 2.5. Basement Features ##\n\nFeatures related to basement.","9fe9f585":" <a id=\"section-2.4\"><\/a>\n## 2.4. Construction Features ##\n\nFeatures related to constuction of the house such as foundations, materials used, quality of materials etc.","7baa9a8b":"Table of contents:\n\n1. [DATA IMPORT AND MERGE](#section-1)\n\n\n2. [DATA EXPLORATION, CLEANING AND ENGINEERING](#section-2)\n    - [Features overview and categorization](#section-2.1)\n    - [Location Features](#section-2.2)\n    - [Building Features](#section-2.3)\n    - [Construction Features](#section-2.4)\n    - [Basement Features](#section-2.5)\n    - [Above grade Features](#section-2.6)\n    - [Garage Features](#section-2.7)\n    - [Utilities Features](#section-2.8)\n    - [Comfort Features](#section-2.9)\n    - [Other Features](#section-2.10)\n    - [Sale Features](#section-2.11)\n    - [Rating Features](#section-2.12)\n    - [Date Features](#section-2.13)\n    - [Area Features](#section-2.14)\n    - [Original dataframe features drop](#section-2.15)\n    - [Taking care of skewness](#section-2.16)\n\n\n3. [FEATURE SELECTION](#section-3)\n\n\n4. [MODELING](#section-4)\n    - [Training and evaluating](#section-4.1)\n    - [Predicting](#section-4.2)\n\n\n5. [CREATING SUBMISSION FILE](#section-5)","41bcf233":"Generate info dataframe.","44dc5312":"<a id=\"section-3\"><\/a>\n# 3. FEATURE SELECTION #","6704fd6c":"Most of the houses have only one exterior covering. Let's check if those with 2 have different prices.","78d22f92":"<a id=\"section-2.8\"><\/a>\n## 2.8. Utilities Features ##\n\nFeatures about utilities.","7f20637f":"Checks:\n- Chronology 1: Build => Garage\n- Chronology 2: Build => Remod => Sold","4fd0674e":"<a id=\"section-2.16\"><\/a>\n## 2.16. Taking care of skewness ##","88848b48":"### Numerical features ###","d9d87645":"### Data visualisation and cleaning ###","84c035d2":"<a id=\"section-2.13\"><\/a>\n## 2.13. Date Features ##","6349c783":"### Data visualisation and cleaning ###","29e2845c":"Dealing with missing values","241ce364":"### Merging train and test data ###\nTrain and test data merge for easier cleaning and engineering.","da74d654":"Cleaning missing features:\n- some basement features are actual missing values (those with less than 5 missing features according to chart above)\n- most of them are just meaning there is no basement, which is not a missing value","1ba892a6":"### Data visualisation and cleaning ###","318de399":"### Categorical features ###","cd5a124e":"<a id=\"section-2.15\"><\/a>\n## 2.15. Original dataframe features drop ##","b26d202c":"### Data visualisation and cleaning ###","65909529":"<a id=\"section-2.2\"><\/a>\n## 2.2. Location Features ##\n\nAll the features regarding the location such as MS Zoning, Neighborhood, Street, Lot, Proximity to variour conditions etc.","45404191":"<a id=\"section-2.12\"><\/a>\n## 2.12. Rating Features ##","e5c27be9":"There are 16% missing values in LotFrontage, which we need to fill carefuly since this column has a moderate correlation with target column.","128b2ddf":"### Categorical features ###","0b3e47b4":"### Numerical features ###","bf8d8e57":"<a id=\"section-2.1\"><\/a>\n## 2.1 Features overview and categorization ##\n\nWe have 80 total features (SalesPrice and is_train excluded), so we should first categorize features and inspect them separately.","dcf4a45b":"<a id=\"section-2.6\"><\/a>\n## 2.6. Above grade Features ##\n\nFeatures above grade floors.","c969b73f":"Checks:\n- If MasVnrType is None, than MasVnrArea is 0","7f1930ed":"### Categorical features ###","9dc63313":"Checks:\n- check if sum sq feet is equal to 0 when there is no basement\n- check if sum of square feet gives us the total value","c8198bc1":"### Data visualisation and cleaning ###","14f3e03d":"### Categorical features ###","7fa24214":"### Data visualisation and cleaning ###","bca575ad":"### Numerical features ###","a8d04eeb":"<a id=\"section-2.9\"><\/a>\n## 2.9. Comfort Features ##\n\nFeatures for extra comfort.","51a5b1c5":"Checks:\n- 1stFlrSF < GrLivArea","ef83fb95":"### Data visualisation and cleaning ###","b86634ba":"<a id=\"section-2.10\"><\/a>\n## 2.10. Other Features ##","0511ec4a":"<a id=\"section-2.14\"><\/a>\n## 2.14. Area Features ##","f24e655b":"### Categorical features ###","6ba6f6d7":"### Numerical features ###","687dd4b2":"<a id=\"section-4.2\"><\/a>\n## 4.2 Predictions ##","b3ddbf3f":"We can't remove this row, since it is in the test set. However it will be very hard to predict according to basement features.","4a905424":"<a id=\"section-5\"><\/a>\n# 5. CREATING SUBMISSION FILE #","aa1b3bee":"Highlights:\n- GarageYrBlt outlier","17cc8913":"<a id=\"section-1\"><\/a>\n# 1. DATA IMPORT AND MERGE #","5b9f844e":"We should convert all rating features to numeric values using the scale in OverallQual feature:\n- 10 Very Excellent\n- 9\tExcellent\n- 8\tVery Good\n- 7\tGood\n- 6\tAbove Average\t\n- 5\tAverage\n- 4\tBelow Average\t\n- 3\tFair\n- 2\tPoor\n- 1\tVery Poor\n","ef0735e4":"<a id=\"section-2.11\"><\/a>\n## 2.11. Sale Features ##","f86f0db6":"<a id=\"section-2.3\"><\/a>\n## 2.3. Building Features ##\n\nAll the features regarding the actual building.","0d129a00":"### Numerical features ###","ea0bb429":"Using clear function:\n- remove features with correlation values less than 0.20\n    - numerical features use Spearmans correlations because there is no normal distribution\n    - categorical features correlation is the max value based on one-hot encoding.\n- remove features with more missing values then 90%\n- remove features with variance less than 0.05","51c32bd0":"### Data visualisation and cleaning ###","670cf45d":"### Numerical features ###","806f4fc0":"### Categorical features ###","9dcc399b":"### Data visualisation and cleaning ###","8eea4c28":"Predictions sanity check.","77ada3a7":"<a id=\"section-4.1\"><\/a>\n## 4.1 Training and evaluating ##","23a16df3":"### Numerical features ###","9d1513d4":"<a id=\"section-2\"><\/a>\n# 2. DATA EXPLORATION, CLEANING AND FEATURE ENGINNERING #","e7ab427f":"<a id=\"section-4\"><\/a>\n# 4. MODELING #","f392c2b5":"This column should be converted to numerical value, since it is a rating column, but we will consider that later.","7c6c984a":"There is a good correlation between LotArea and LotFrontage, so we should use LotArea to fill missing values in LotFrontage.\nI will use KNNImputer - thanks @mviola!","03980aa2":"Add new column for easy distinction between train and test set.","773a9c01":"### Data visualisation and cleaning ###"}}