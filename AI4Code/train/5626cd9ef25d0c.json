{"cell_type":{"a0187909":"code","454f8d2f":"code","a6d95bdd":"code","8f4f608b":"code","6a169df1":"code","b8fb71c3":"code","07adc503":"code","1415ceb4":"code","8d636713":"code","479956d0":"code","cc618c11":"code","be8b7d0b":"code","418878ae":"code","593695f8":"code","5f55f07f":"code","be32516e":"code","7cb171e9":"code","34f041ce":"code","4df9d03a":"code","87b68b94":"code","de66c72d":"code","60503345":"code","50b31c86":"code","f5b7141c":"code","fdf894e3":"code","5e858cb6":"code","97fe4ca3":"code","9197a868":"code","28d27a81":"code","dac4b44b":"code","9d3f2e24":"code","087fc594":"code","c1b1c4b3":"code","5402ea4a":"code","053371b4":"code","cb27a189":"code","340104e0":"markdown","c65912f1":"markdown","ce48d894":"markdown"},"source":{"a0187909":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","454f8d2f":"df = pd.read_csv('\/kaggle\/input\/tesla-stock-price-complete-data\/TSLA.csv')","a6d95bdd":"df.head()","8f4f608b":"df.tail()","6a169df1":"df1 = df.reset_index()['Close']","b8fb71c3":"df1.shape","07adc503":"import matplotlib.pyplot as plt\nplt.plot(df1)","1415ceb4":"#Scaling our data to pass into LSTM as it is sensitive to scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\ndf1 = scaler.fit_transform(np.array(df1).reshape(-1,1))","8d636713":"\ndf1.shape","479956d0":"#separating traing and testing data\ntraining_size = int(len(df1)*0.70)\ntest_size = len(df1) - training_size\ntrain_data,test_data = df1[0:training_size,:],df1[training_size:len(df1),:1]","cc618c11":"training_size,test_size","be8b7d0b":"#convert an arrays of value into dataset matrix\ndef create_dataset(dataset,timestep=1):\n    dataX,dataY = [],[]\n    for i in range(len(dataset)-timestep-1):\n        a = dataset[i:(i+timestep),0]\n        dataX.append(a)\n        dataY.append(dataset[i+timestep,0])\n    return np.array(dataX),np.array(dataY)","418878ae":"#reshape our dataset into 100 time steps\ntime_step=100\nx_train,y_train = create_dataset(train_data,time_step)\nx_test,y_test = create_dataset(test_data,time_step)","593695f8":"x_train.shape,y_train.shape","5f55f07f":"x_test.shape,y_test.shape","be32516e":"#As LSTM model expexts 3D input so we would reshape our input data\nx_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)\nx_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)","7cb171e9":"#Creating LSTM Model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","34f041ce":"model = Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","4df9d03a":"model.summary()","87b68b94":"model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=100,batch_size=64,verbose=1)","de66c72d":"import tensorflow as tf\ntf.__version__","60503345":"train_predict = model.predict(x_train)\ntest_predict = model.predict(x_test)","50b31c86":"train_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)","f5b7141c":"import math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","fdf894e3":"math.sqrt(mean_squared_error(y_test,test_predict))","5e858cb6":"### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","97fe4ca3":"len(test_data)","9197a868":"x_input=test_data[688:].reshape(1,-1)\nx_input.shape\n","28d27a81":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","dac4b44b":"temp_input","9d3f2e24":"from numpy import array\n\nlst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","087fc594":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","c1b1c4b3":"import matplotlib.pyplot as plt","5402ea4a":"len(df1)","053371b4":"plt.plot(day_new,scaler.inverse_transform(df1[2524:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","cb27a189":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","340104e0":"We will be forcasting based on 'Close' Parameter","c65912f1":"1735 is number of records and 100 is number of timesteps","ce48d894":"How Tesla Stock Price is varying with time"}}