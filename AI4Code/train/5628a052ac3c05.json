{"cell_type":{"5ba37338":"code","e3749b89":"code","0db9a276":"code","2224c97f":"code","9cfd0160":"code","99794aa9":"code","9b04bc37":"code","aeaa13b4":"code","c320d3d5":"code","bf6249da":"code","a1936896":"code","904b5980":"code","0af132f1":"code","ab50121b":"code","e7cc3685":"code","870c4fa8":"code","da87b4cd":"code","cc965e47":"code","3dd54cf7":"code","a222e235":"markdown","5e41f2a8":"markdown","4c0bcec5":"markdown","350a6440":"markdown","6c3a51e1":"markdown","e589c5ac":"markdown","26a7a52d":"markdown","ea694cd0":"markdown","d64ce900":"markdown","ba6d2baf":"markdown","09809dca":"markdown","b30241a3":"markdown","badcda46":"markdown","81071662":"markdown","784912ba":"markdown","59c956e7":"markdown","a2dad817":"markdown"},"source":{"5ba37338":"!pip install dataprep","e3749b89":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.regularizers import l1, l2\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import ReduceLROnPlateau\nfrom dataprep.eda import plot","0db9a276":"data = pd.read_csv('..\/input\/voicegender\/voice.csv')\ndata","2224c97f":"plot(data)","9cfd0160":"y = data['label'].copy()\ny = np.array(y)","99794aa9":"y = np.where(y == 'male', 0, y)\ny = np.where(y == 'female', 1, y)\ny = np.asarray(y).astype(np.float32)","9b04bc37":"x = data.drop('label', axis=1).copy()\nx = np.array(x, dtype='float32')","aeaa13b4":"(trainX, testX, trainY, testY) = train_test_split(x,\n    y, test_size=0.25, random_state=42)","c320d3d5":"regul = [0.01, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001]\nall_train, all_test = list(), list()\nmodels = list()\nINIT_LR = 0.0002\nEPOCHS = 150\nBATCH = 8","bf6249da":"for param in regul:\n    # define model\n    model = Sequential()\n    model.add(tf.keras.layers.Dense(input_shape=(trainX.shape[1],), units=256, \n                                activation=\"relu\", kernel_regularizer=l2(param)))\n    model.add(tf.keras.layers.Dense(128, activation=\"relu\", kernel_regularizer=l2(param)))\n    model.add(tf.keras.layers.Dense(64, activation=\"relu\", kernel_regularizer=l2(param)))\n    model.add(tf.keras.layers.Dense(64, activation=\"relu\", kernel_regularizer=l2(param)))\n    model.add(tf.keras.layers.Dense(32, activation=\"relu\", kernel_regularizer=l2(param)))\n    model.add(tf.keras.layers.Dense(1, activation=\"sigmoid\"))\n    #compile the model using Adam as an optimizer and \n    #a binary cross entropy as a loss function\n    print(\"[INFO] training network...\")\n    opt = Adam(lr=INIT_LR)\n    model.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n    callbacks = [ReduceLROnPlateau(monitor='loss', factor=0.5, patience=5, min_lr=0.00001)] \n    history_model = model.fit(trainX, trainY, epochs=EPOCHS, batch_size=BATCH, callbacks=callbacks, verbose=1)\n    models.append(model)\n    # evaluate the model using train and test data\n    _, train_acc = model.evaluate(trainX, trainY, verbose=0)\n    _, test_acc = model.evaluate(testX, testY, verbose=0)\n    print('Param: %f, Train: %.3f, Test: %.3f' % (param, train_acc, test_acc))\n    all_train.append(train_acc)\n    all_test.append(test_acc)","a1936896":"plt.semilogx(regul, all_train, label='train', marker='o')\nplt.semilogx(regul, all_test, label='test', marker='o')\nplt.legend()\nplt.show()","904b5980":"all_train_array = np.array(all_train)\nall_test_array = np.array(all_test)\naccuracy_frame = pd.DataFrame({\n                        'regularization' : regul,\n                        'accuracy_on_train': all_train_array*100, \n                         'accuracy_on_test': all_test_array*100,\n                         'accuracy_difference': abs((all_train_array - all_test_array)*100)\n                              })\nacc=accuracy_frame.sort_values(by=['accuracy_difference'])\nacc","0af132f1":"predict = (models[1].predict(testX) > 0.5).astype(\"int32\")\nprint(classification_report(testY,predict))\nprint(confusion_matrix(testY, predict))","ab50121b":"print('Accuracy:',(accuracy_score(testY, predict))*100)","e7cc3685":"all_train, all_test = list(), list()\nmodels = list()\nparameters = [0.1, 0.2, 0.3, 0.4, 0.5]\nfor i in parameters:\n    model = Sequential()\n    model.add(Dense(input_shape=(trainX.shape[1],), units=256, \n                                activation=\"relu\"))\n    model.add(Dropout(i))\n    model.add(Dense(128, activation=\"relu\"))\n    model.add(Dropout(i))\n    model.add(Dense(64, activation=\"relu\"))\n    model.add(Dense(64, activation=\"relu\"))\n    model.add(Dense(32, activation=\"relu\"))\n    model.add(Dense(1, activation=\"sigmoid\"))\n    #compile the model using Adam as an optimizer and \n    #a binary cross entropy as a loss function\n    print(\"[INFO] training network...\")\n    opt = Adam(lr=INIT_LR)\n    model.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n    callbacks = [ReduceLROnPlateau(monitor='loss', factor=0.5, patience=5, min_lr=0.00001)] \n    history_model = model.fit(trainX, trainY, epochs=EPOCHS, batch_size=BATCH, callbacks=callbacks, verbose=1)\n    models.append(model)\n    # evaluate the model using train and test data\n    _, train_acc = model.evaluate(trainX, trainY, verbose=0)\n    _, test_acc = model.evaluate(testX, testY, verbose=0)\n    print('Param: %f, Train: %.3f, Test: %.3f' % (param, train_acc, test_acc))\n    all_train.append(train_acc)\n    all_test.append(test_acc)","870c4fa8":"plt.semilogx(parameters, all_train, label='train', marker='o')\nplt.semilogx(parameters, all_test, label='test', marker='o')\nplt.legend()\nplt.show()","da87b4cd":"all_train_array = np.array(all_train)\nall_test_array = np.array(all_test)\naccuracy_frame = pd.DataFrame({\n                        'parameter' : parameters,\n                        'accuracy_on_train': all_train_array*100, \n                         'accuracy_on_test': all_test_array*100,\n                         'accuracy_difference': abs((all_train_array - all_test_array)*100)\n                              })\nacc=accuracy_frame.sort_values(by=['accuracy_difference'])\nacc","cc965e47":"predict = (models[3].predict(testX) > 0.5).astype(\"int32\")\nprint(classification_report(testY,predict))\nprint(confusion_matrix(testY, predict))","3dd54cf7":"print('Accuracy:',(accuracy_score(testY, predict))*100)","a222e235":"Setting the model","5e41f2a8":"Splitting the data into train and test","4c0bcec5":"First of all, let's analyze the data using dataprep.eda tool","350a6440":"# Voice gender recognition (DNN)","6c3a51e1":"Importing libraries","e589c5ac":"Plotting train and test accuracies depending on Dropout parameter","26a7a52d":"Loading the dataframe","ea694cd0":"Building dataframe for finding high accuracy and low difference between train and test accuracies. It will define the best regularization parameter","d64ce900":"The best accuracy is 97% and best parameter regularization is 0.005","ba6d2baf":"Let's build model with Dropout regularization technique for reducing overfitting","09809dca":"Let's build models with different regularization parameters.","b30241a3":"We don't have a lot of objects in the dataset and I want to use a DNN. For reducing overfitting let's find the best regularization parameter and find the best accuracy then let's use DNN with Dropout. It is different techniques of regularization and interesting compare accuracies.","badcda46":"Below is the project of building voice gender recognition model(using DNN) and finding the best parameter regularization and the best accuracy.","81071662":"We have equal objects labeled as female and male ","784912ba":"## Finding best regularization parameter for reducing overfitting","59c956e7":"Plotting train and test accuracies depending on regularization parameters","a2dad817":"## DNN with Dropout"}}