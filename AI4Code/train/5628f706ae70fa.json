{"cell_type":{"3609e300":"code","9e73a3ed":"code","0675123d":"code","d771a122":"code","1588b90c":"code","cc9c721c":"code","a7500d71":"code","ecd38e29":"code","955c2f8f":"code","a03f1b7c":"code","7bb4bb06":"code","8bf0dcdc":"code","edf4e153":"code","54cae312":"code","04580894":"code","96604ce9":"code","5c42407e":"code","8cb4117b":"code","ad82178f":"code","86dcc8b0":"code","18634e21":"code","3fbe15fc":"code","bde4426a":"code","c14818cf":"code","d585498e":"code","5aa8378f":"code","3967b1b4":"code","43ab38ab":"code","b0425f66":"code","7dcf6e5f":"code","f10b774e":"code","4b84ea02":"code","bb22b4fe":"code","3747504f":"code","c449eca6":"code","6b51a904":"code","de3cfe90":"code","78784837":"code","d44c8581":"code","9db8e89d":"code","bafffdaa":"code","c9155e74":"code","2a735236":"code","a16c2ebd":"code","36b96756":"code","62fdf302":"code","a291a303":"code","2bcbdffd":"code","8b953bba":"code","74243082":"code","7131f805":"code","dbc9e539":"code","ab2ee3e1":"code","3f3a3951":"code","7a72a870":"code","80596e0b":"code","132ef173":"code","6993722e":"code","89da88bb":"code","b62fa731":"code","0b13e8e9":"code","9a09778c":"code","198198f9":"code","e9e67a6b":"code","81ccb1f9":"code","8b81712d":"code","4fcb4887":"code","8009723d":"code","de416abb":"code","3502acb7":"markdown","a3bb43a4":"markdown","cdf0ae01":"markdown","3a9f9fa6":"markdown","ea4d3f04":"markdown","3657b9ad":"markdown","f51d4cc4":"markdown","e9eef894":"markdown","154cb344":"markdown","858a0229":"markdown","fe34e0be":"markdown","e06ba6d4":"markdown","66fd3189":"markdown","3a93f8f3":"markdown","d983d48d":"markdown","3e657ef3":"markdown","87e69642":"markdown","3800c2d4":"markdown","fc1e2449":"markdown","80c32708":"markdown","e9dd3a14":"markdown","7a5cd6ac":"markdown","4cf11461":"markdown","d79fc6f4":"markdown","91def0da":"markdown","f05b3ad7":"markdown","9076242b":"markdown","6bc35689":"markdown","a8122eff":"markdown","67aabc60":"markdown","59b9338d":"markdown"},"source":{"3609e300":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e73a3ed":"!pip install --upgrade pip","0675123d":"!pip install seaborn==0.11 > \/dev\/null","d771a122":"import seaborn as sns\nsns.set_style('whitegrid')\nsns.__version__","1588b90c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\nimport plotly as py\nimport plotly.express as px\nimport seaborn as sns\n!pip install datatable > \/dev\/null\nimport datatable as dt\nimport gc\n\npd.options.display.max_columns = 999\n\n","cc9c721c":"%%time\ntrain_data = dt.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv', index_col=0)\n","a7500d71":"#del train_data_datatable\n#gc.collect()","ecd38e29":"## Let get some info from trai_data\ntrain_data.head()","955c2f8f":"## And what about our \"example_test\"\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nexample_test.head()","a03f1b7c":"#____________________________________\n# What about features\nfeatures.head()","7bb4bb06":"(features*1).T.head()","8bf0dcdc":"# Let me create a sample from train for EDA\ntrain_sample = train_data.sample(frac=.05, random_state=10).copy()","edf4e153":"# in addition to :\n# \"Trades with weight = 0 were intentionally included in the dataset for completeness, \n# although such trades will not contribute towards the scoring evaluation.\"\ntrain_sample = train_sample[train_sample['weight']!=0]","54cae312":"train_sample.describe()","04580894":"train_sample.head()","96604ce9":"#______________________\n# Save samaple_dataset\ntrain_sample.to_csv('\/kaggle\/working\/my_train_sample.csv', index=False)","5c42407e":"## Check dtypes \nprint('Train sample dtypes: \\n{}'.format(train_sample.dtypes.value_counts()))\nprint('Train data dtypes: \\n{}'.format(train_data.dtypes.value_counts()))\nprint('-'*20)","8cb4117b":"# Check missing values\nprint('Columns with NaN (Train): %d' %train_data.isna().any().sum())\nprint('Columns with NaN (train_sample): %d' %train_sample.isna().any().sum())","ad82178f":"#_____________________\n## Plot Missing Values \ndef find_missing(data):\n    # number of missing values\n    count_missing = data.isnull().sum().values\n    # total records\n    total = data.shape[0]\n    # percentage of missing\n    ratio_missing = count_missing\/total\n    # return a dataframe to show: feature name, # of missing and % of missing\n    return pd.DataFrame(data={'missing_count':count_missing, 'missing_ratio':ratio_missing}, index=data.columns.values)\n","86dcc8b0":"#___________________________\n# Plot top 20 missing ratio\nfind_missing(train_sample).sort_values(by='missing_ratio', ascending=False).head(20)['missing_ratio'].plot.barh(figsize=(12,8))\nplt.xlabel(\"Missing Values (%)\")\nplt.title(\"Missing Ratio Train Sample\");","18634e21":"#______________________________\n# Plot Numerical\ndef plot_numerical(data, col, size=[10, 6], bins='auto'):\n    sns.set_style('whitegrid')\n    #plt.rcParams.update({'font.size': 14, 'font.weight' : 'bold'})\n    #'''use this for ploting the distribution of numercial features'''\n    plt.figure(figsize=size)\n    plt.title(\"Distribution of %s\"%col, fontsize = 22, fontweight=\"bold\")\n    sns.histplot(data[col].dropna(), kde=True,bins=bins)\n    #plt.title('Distribution des fr\u00e9quences , fontsize = 22, fontweight=\"bold\")\n    #plt.xlabel(\"Labels\", fontsize = 16, fontweight=\"bold\")\n    #plt.ylabel(\"(%)\", fontsize = 16, fontweight=\"bold\")plot_numerical(train_sample, 'date')\n    #plt.savefig(\"Distribution %s\"%col+\".png\", bbox_inches = 'tight')\n    plt.show()","3fbe15fc":"plot_numerical(train_sample, 'resp')","bde4426a":"plot_numerical(train_sample, 'date')","c14818cf":"plot_numerical(train_sample, 'weight')","d585498e":"plot_numerical(train_sample, 'feature_1')","5aa8378f":"#________________________________\n# Create target and\/or \"action\" \ntrain_sample['action'] = np.where(train_sample['resp']>0,1,0)","3967b1b4":"#train_sample.drop(columns=('target'), inplace=True)","43ab38ab":"def plot_numerical_bylabel(data, col, target, size=[12, 6]):\n    plt.figure(figsize=size)\n    # Calculate the correlation coefficient between the new variable and the target\n    corr = data[target].corr(data[col])\n    \n    # Calculate medians for repaid vs not repaid\n    #avg_repaid = data.loc[data['resp'] <= 0, col].median()\n    #avg_not_repaid = data.loc[data['resp'] > 0, col].median()\n    \n    plt.figure(figsize = (12, 6))\n    \n    # Plot the distribution for target == 0 and target == 1\n    sns.kdeplot(data.loc[data[target] <= 0, col], label = str(target) + '<= 0')\n    sns.kdeplot(data.loc[data[target] > 0 , col], label = str(target) + ' > 0')\n    \n    # label the plot\n    plt.xlabel(col); plt.ylabel('Density'); plt.title('%s Distribution' % col)\n    plt.legend();\n    # print out the correlation\n    print('The correlation between %s and the TARGET is %0.4f' % (col, corr));\n    # Print out average values","b0425f66":"plot_numerical_bylabel(train_sample, 'weight', 'action')","7dcf6e5f":"plot_numerical_bylabel(train_sample, 'resp', 'action')","f10b774e":"plot_numerical_bylabel(train_sample, 'date', 'action')","4b84ea02":"plot_numerical_bylabel(train_sample, 'feature_0', 'action')","bb22b4fe":"\nsns.lmplot('resp','weight', train_sample.head(1000), hue='action',fit_reg=True)","3747504f":"np.corrcoef(train_sample['feature_0'], train_sample['resp']),np.corrcoef(np.where(train_sample['feature_0']>0,1,0), train_sample['resp']>0)","c449eca6":"#___________________________\n# creat a list of \"dropable columns\"\n#_________________\n# Drop unnecessary variables \ndrop_col = [col for col in train_sample if col.startswith('resp') or col in ('date','ts_id')]\ndrop_col","6b51a904":"# Find correlations with the target and sort\ncorrelations = train_sample.drop(columns=(drop_col)).corr()['action'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(15))\nprint('\\nMost Negative Correlations:\\n', correlations.head(15))","de3cfe90":"%%time\n#______________________\n# Pairplot Top 10 most correlated features \ncols_to_pairplot = pd.DataFrame(correlations.tail(10)).reset_index()['index'].to_list()\nsns.pairplot(train_sample.loc[:,cols_to_pairplot], hue = \"action\")","78784837":"train_sample[train_sample['date']==499].head(3)","d44c8581":"train_sample[train_sample['date']==125].head(3)","9db8e89d":"pd.concat([train_sample[train_sample['date']==125], train_sample[train_sample['date']==499]])","bafffdaa":"pd.concat([train_sample[train_sample['date']==125], train_sample[train_sample['date']==499]]).drop(columns=(drop_col)).head(5).corr(method='pearson').\\\nstyle.background_gradient(cmap='coolwarm', axis=None).set_precision(2)","c9155e74":"# code from: https:\/\/izziswift.com\/list-highest-correlation-pairs-from-a-large-correlation-matrix-in-pandas\/\ndef corrFilter(x: pd.DataFrame, bound: float):\n    xCorr = x.corr()\n    xFiltered = xCorr[((xCorr >= bound) | (xCorr <= -bound)) & (xCorr !=1.000)]\n    xFlattened = xFiltered.unstack().sort_values().drop_duplicates()\n    return xFlattened","2a735236":"#_________________________________\ncorrFilter(pd.concat([train_sample[train_sample['date']==125], train_sample[train_sample['date']==499]]).drop(columns=(drop_col)), .99).to_frame()","a16c2ebd":"#_______________________________________________\n# target Distribution\ntrain_sample['action'].value_counts().plot.bar()","36b96756":"drop_col","62fdf302":"drop_col = [col for col in train_sample if col.startswith('resp') or col in ('date','ts_id','action')]\ndrop_col","a291a303":"#______________________\n# Setting variables \nX_train_sample = train_sample.drop(columns=(drop_col))\nX_train_sample.head()","2bcbdffd":"y_train_sample = train_sample['action']","8b953bba":"y_train_sample[:2]","74243082":"from xgboost import XGBClassifier","7131f805":"xgbclass = XGBClassifier(subsample=.5,\n                             learning_rate =  0.05,\n                             n_estimators = 500,\n                             missing = -999,\n                             objective = 'binary:logistic'\n                             #tree_method = 'gpu_hist'\n                            )","dbc9e539":"from sklearn.metrics import f1_score, roc_auc_score, auc, precision_score, \\\nrecall_score, roc_curve, multilabel_confusion_matrix, classification_report, \\\nconfusion_matrix, precision_recall_fscore_support, plot_roc_curve","ab2ee3e1":"from sklearn.metrics.scorer import make_scorer\nscoring = {\n               'f1': make_scorer(f1_score, average='binary'),\n               'roc_auc': make_scorer(roc_auc_score)\n               }","3f3a3951":"from sklearn.model_selection import cross_val_score, cross_validate","7a72a870":"\n%%time\ncross_validate(xgbclass, X_train_sample.fillna(-999), y_train_sample, \n               return_train_score=False, return_estimator=False, \n               scoring=scoring)\n","80596e0b":"import numpy as np\nnp.asarray([0.53149275, 0.52729442, 0.53138409, 0.52497502, 0.53380748]).mean().round(2)","132ef173":"## Split du dataset en Train et Test avec train test split\nfrom sklearn.model_selection import train_test_split","6993722e":"X_train, X_test, y_train, y_test = train_test_split(X_train_sample, y_train_sample, test_size=0.2, \n                                                    random_state=42, shuffle=True, stratify = y_train_sample )","89da88bb":"%%time\n#___________________________________\n# We fit our sample data \nxgbclass.fit(X_train, y_train)","b62fa731":"cols=list(X_train.columns)\ntabfe=[]\nfor i,j in zip(cols,xgbclass.feature_importances_):\n    tabfe.append([i,j])\npd.DataFrame(tabfe, columns=('feature','score'))[:30].sort_values(by='score', ascending=False).plot.barh(x='feature',figsize=(12,10))","0b13e8e9":"%%time\npreds =  xgbclass.predict(X_test)","9a09778c":"print('ROC AUC score: %.3f' \n      %roc_auc_score(y_test, xgbclass.predict(X_test)))","198198f9":"label = [0,1]\ncf_matrix = confusion_matrix(y_test, preds, label)\npd.DataFrame(cf_matrix\/np.sum(cf_matrix))","e9e67a6b":"import pickle\npickle.dump(xgbclass, open('\/kaggle\/working\/xgbclassifier_janestreet.pickle', 'wb'))","81ccb1f9":"# create the environment\n#import janestreet\n#print('Creating competition environment...', end='')\n#env = janestreet.make_env()\n#print('Finished.')\n#or\n#import janestreet\n#env = janestreet.make_env() # initialize the environment\n#iter_test = env.iter_test() # an iterator which loops over the test set","8b81712d":"#features = X_train_sample.columns.to_list()\n#features","4fcb4887":"#X_train.info(verbose=True, null_counts=True)#","8009723d":"#X_train.describe()","de416abb":"#%%time\n#___________________________________\n# We fit our sample data \n#model.fit(X_train, y_train)\n#model.predict(X_test)","3502acb7":"- So at this point, I starting asking myself questions, \n- We can see we're not able to find distinct \"regions\" for each label (1 & 0) between these features, which, are mots correlated with our target\n- The way target values are distributed with these pair of features looks completely random, even if some regions are more populated than others \n- So, my question, how and which features most contribute to predictions, knowing that none of these seems to be good candidates among most \"weak\" correlated?\n- One idea, is to compare correlation between trading days\n- I'll inspire my work from Carl McBride to make my point\n","a3bb43a4":"- Bigger weights are commonly associated with resp between +\/- .05\n- Higher \"Weight values\" are not only associted with positive response\n- Wheight frequency are bewteen 0 and ~130","cdf0ae01":"# Build baseline model","3a9f9fa6":"## Multivariate analysis - Correlation Matrix","ea4d3f04":"## Cross validation","3657b9ad":"## Save model","f51d4cc4":"## Final model evaluation and submitting \n- Following lines provide information how to submit your work.\n- Good luck","e9eef894":"- Our dataset is well balanced, even tough there's a sligthly difference between number on each label, only visible if zooming :)","154cb344":"- I invite you to take a look into \"Carl McBride Notebook to get more info on this dataset, he did a great job, \nhttps:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-eda-of-day-0-and-feature-importance\/notebook\n- My conclusions: this dataset migth \"hide\" some precious information, but so far I've no clue how to exploit it\n- I also invite you to look into Mathias notebook to get a better understanding regading \"feature_0\" he did a great job too\nhttps:\/\/www.kaggle.com\/nanomathias\/feature-0-beyond-feature-0\/notebook","858a0229":"- Timeline goes between 0 and 500 and lowest frequency between day 100 and 150 \n- Also meaning, some days have a higher frequency on trades then others","fe34e0be":"- surprisingly, only feature_27 (most correlated feature from correlation matrix) seems to be most important feature for this model.","e06ba6d4":"- Even if they have almost same density, unfortunnately no correlation between these 2 features, \"c'est dommage\"","66fd3189":"- F1_score of 53%, not so bad for a \"blind shoot\"","3a93f8f3":"print('Creating submissions file...', end='')\nrcount = 0\nfor (test_df, prediction_df) in env.iter_test():\n    if test_df['weight'].item() != 0:\n        X_test = test_df.loc[:, features]\n        #X_test.fillna(-999)\n        y_preds = model.predict(X_test)\n        prediction_df.action = y_preds\n        env.predict(prediction_df)\n        rcount += len(test_df.index)\nprint(f'Finished processing {rcount} rows.')","d983d48d":"## Split and fit","3e657ef3":"#%%time\nfor (test_df, sample_prediction_df) in iter_test:\n    #X_test = test_df.loc[:, test_df.drop(columns=(drop_col+['resp']))]\n    if test_df['weight'].item() > 0:\n        X_test_set = test_df.drop(columns=(['date','ts_id'])).values\n        #X_test = test_df\n        X_test_set.fillna(-999)\n        preds = xgbclass.predict(X_test_set)\n        sample_prediction_df.action = preds\n        env.predict(sample_prediction_df)\n    \n    #pred = model.predict(X_test.values.reshape(1, -1))\n    #sample_prediction_df.action = transformPred(pred)[0] #make your 0\/1 prediction here\n    #env.predict(sample_prediction_df)","87e69642":"## Assumptions\n- This dataset contains an anonymized set of features, feature_{0...129}, representing real stock market data. Each row in the dataset represents a trading opportunity, for which you will be predicting an action value: 1 to make the trade and 0 to pass on it. Each trade has an associated weight and resp, which together represents a return on the trade. The date column is an integer which represents the day of the trade, while ts_id represents a time ordering. In addition to anonymized feature values, you are provided with metadata about the features in features.csv.\n\n- In the training set, train.csv, you are provided a resp value, as well as several other resp_{1,2,3,4} values that represent returns over different time horizons. These variables are not included in the test set. Trades with weight = 0 were intentionally included in the dataset for completeness, although such trades will not contribute towards the scoring evaluation.\n\n### Caveats\n\n- Each trade has an associated weight and resp, which together represents a return on the trade ... What's exactly is the \"nature\" of this association? Are they getting partners in some kind of business or what?","3800c2d4":"- What these 2 days have most correlated features in common ?\n## Find the pairs of features with a correlation > 0.99:","fc1e2449":"## Correlation distribution between Target and:\n- Weight\n- Resp\n- Date \n- Feature_0\n\nWe'll come back into this subject after analyzing \"correlations between features\" which will provide more accurate information on which features we should focus on","80c32708":"- Values are mostly frequently distributed between -0,1 and 0.1 with extreme values around +\/- 0.4","e9dd3a14":"### Features Importance","7a5cd6ac":"- I need to make some more researches on this subject, as depending on the day of trade on don't get \"approximatively\" the same features (comparing with McBride results)\n- Let's build a baseline Model to get some more information about features","4cf11461":"- 6 features show a ratio over 16%; from feature 84 to 96 ratio is between 14% and 16 %.\n- For Remaining features missing ratio drops below 0.04%, \n- We'll use some missing values inputting strategy to fill the gaps\n- Otherwise missing values are relatively balanced between each \"group\" \n***\n# Univariate analysis\n### Data Frequency Distribution ","d79fc6f4":"### Confusion Matrix","91def0da":"## Bivariate Analysis\n> Considering :\n- \"Each row in the dataset represents a trading opportunity, for which you will be predicting an action value: 1 to make the trade and 0 to pass on it. Each trade has an associated weight and resp, which together represents a return on the trade\"\n\n- Our target, I mean \"what we intend to predict\", the action value is the association of weight and resp representing the return on trade \n- I've some doubts in here, as I saw some notebooks using only \"resp\" as target, \n- In the other hand, \"the so called association between resp and weight\" is not clearly explained, so if  \"Jane Street\" could provide some more details on it, that would be great\n- Meantime I'll use \"resp\" as \"target\"","f05b3ad7":"- First observation between \"train\" and \"example\" dataset, variables (resp_1\tresp_2\tresp_3\tresp_4\tresp and date) are not available on example_test, this exclude this variables from our model. \n- Nevertheless, we'll keep \"date\" in train_data for EDA \n\n## EDA","9076242b":"## Crosscheck both datasets","6bc35689":"for (test_df, sample_prediction_df) in iter_test:\n    X_test_set = test_df.loc[:, features]\n    #X_test_set = test_df.drop(columns=(['date'])).values\n    print(X_test_set.columns)\n    X_test_set.fillna(-999)\n    preds = xgbclass.predict(X_test_set)\n    sample_prediction_df.action = preds\n    env.predict(sample_prediction_df)","a8122eff":"- We've one variable missing comparing missing values between source data and our sample, it means one variable with missing values from source dataset doesn't have missing values in my sample","67aabc60":"- Feature_0 and Target have almos sam density for target values greatter then 0 and target values smaller the zero","59b9338d":"# perform test and create submissions file\n\nprint('Creating submissions file...', end='')\nrcount = 0\nfor (test_df, prediction_df) in env.iter_test():\n    X_test = test_df.loc[:, features]\n    y_preds = clf.predict(X_test)\n    prediction_df.action = y_preds\n    env.predict(prediction_df)\n    rcount += len(test_df.index)\nprint(f'Finished processing {rcount} rows.')"}}