{"cell_type":{"4debfcde":"code","c2f9b344":"code","56e305ff":"code","edc422f0":"code","6757837f":"code","bfc07066":"code","3a00ea2f":"code","6be41711":"code","b7cce739":"code","5427c4ad":"code","df99394e":"code","9fe16267":"code","7de689b7":"code","2ae80ee2":"code","88502bf9":"code","c51ad024":"code","e030710d":"code","99ebddd6":"code","6b16c2a3":"code","625d4377":"code","ba4e900a":"code","35875734":"code","659d6d31":"code","b59a8586":"code","f7b1df6c":"code","8221609c":"code","9364626f":"code","5dcc3651":"code","f7cb40fa":"code","595d4aae":"code","efad091d":"code","72b5c8da":"code","5ac6c04f":"code","a701087f":"code","2b936258":"code","ded76f51":"code","bd38a5c6":"code","ef58953a":"code","4da4f1db":"markdown","a416b21c":"markdown","b56ad270":"markdown","b4b5d181":"markdown","445c2092":"markdown","596750bc":"markdown","9b190ec9":"markdown","4ba2a200":"markdown","c8ca39e9":"markdown","2fe0dd9d":"markdown","afc46046":"markdown","ec77a037":"markdown","9023ab7c":"markdown","fb638ca8":"markdown","0e66f90e":"markdown","700000b0":"markdown","6a8258db":"markdown","9e81ed2a":"markdown","95d2a7d5":"markdown","7ac4c890":"markdown","d3b88041":"markdown","06e9108c":"markdown","0ab574b6":"markdown","987a3d86":"markdown","582b4299":"markdown","d9c8814d":"markdown","7c8c2491":"markdown"},"source":{"4debfcde":"# Import some libraries\n\nimport pandas as pd\npd.options.mode.chained_assignment = None\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style = 'whitegrid')\nimport textwrap","c2f9b344":"# Load data from a CSV file into pandas dataFrame\n\ndata_score_humanities = pd.read_csv('..\/input\/indonesia-college-entrance-examination-utbk-2019\/score_humanities.csv')\ndata_score_science = pd.read_csv('..\/input\/indonesia-college-entrance-examination-utbk-2019\/score_science.csv')\ndata_universities = pd.read_csv('..\/input\/indonesia-college-entrance-examination-utbk-2019\/universities.csv')\ndata_majors = pd.read_csv('..\/input\/indonesia-college-entrance-examination-utbk-2019\/majors.csv')","56e305ff":"score_humanities = data_score_humanities.copy()\nscore_humanities.head()","edc422f0":"score_science = data_score_science.copy()\nscore_science.head()","6757837f":"data_majors.head()","bfc07066":"data_universities.head()","3a00ea2f":"# Informations on each data\n\nprint(score_humanities.info())\nprint('\\n')\nprint(score_science.info())\nprint('\\n')\nprint(data_majors.info())\nprint('\\n')\nprint(data_universities.info())","6be41711":"data_majors.head()","b7cce739":"data_universities.head()","5427c4ad":"# Merge data majors and univ to get university name\ndata_major_univ = pd.merge(data_majors, data_universities[['id_university', 'university_name']], left_on = 'id_university',\n                           right_on = 'id_university')\ndata_major_univ.drop(['Unnamed: 0'], axis = 1, inplace = True)\n# Join major and university name\ndata_major_univ['major_univ_name'] = data_major_univ['major_name'] +' - ' +data_major_univ['university_name']","df99394e":"data_major_univ","9fe16267":"#  Calculate the average of total score\nscore_humanities['avg_score'] = score_humanities.iloc[:, 6:15].mean(axis = 1)\nscore_science['avg_score'] = score_science.iloc[:, 6:14].mean(axis = 1)","7de689b7":"score_humanities.head()","2ae80ee2":"# Merge score_humanities with major and university dataframe to get major and university names\n# First choice major and university\nscore_humanities = pd.merge(score_humanities, data_major_univ[['id_major', 'id_university', 'major_name', 'university_name', 'major_univ_name']]\n                            , left_on = ['id_first_major', 'id_first_university']\n                            , right_on = ['id_major', 'id_university']).drop(['id_major', 'id_university', 'id_first_major', 'id_first_university'], axis = 1)\n\nscore_humanities.rename(columns={'major_univ_name' : 'specific_first_choice'}, inplace = True)\nscore_humanities['avg_score_first_choice'] = score_humanities.groupby('specific_first_choice')['avg_score'].transform('mean')\n\n# Second choice major and university\n# Initiate suffixes to give specific columns name because there are major and university name columns before, so it will be duplicated.\nscore_humanities = pd.merge(score_humanities, data_major_univ[['id_major', 'id_university', 'major_name', 'university_name', 'major_univ_name']]\n                            , left_on = ['id_second_major', 'id_second_university']\n                            , right_on = ['id_major', 'id_university']\n                            , suffixes=('_first_choice', '_second_choice')).drop(['id_major', 'id_university', 'id_second_major', 'id_second_university'], axis = 1)\n\nscore_humanities.rename(columns={'major_univ_name' : 'specific_second_choice'}, inplace = True)\nscore_humanities['avg_score_second_choice'] = score_humanities.groupby('specific_second_choice')['avg_score'].transform('mean')\n\n\n# Drop 'Unnamed: 0' columns, which is will not use in this project. Then, sort values by id_user\nscore_humanities = score_humanities.drop('Unnamed: 0', axis = 1).sort_values('id_user')\nscore_humanities.head()","88502bf9":"# Merge score_science with major and university dataframe to get major and university names\n# First choice major and university\nscore_science = pd.merge(score_science, data_major_univ[['id_major', 'id_university', 'major_name', 'university_name', 'major_univ_name']]\n                            , left_on = ['id_first_major', 'id_first_university']\n                            , right_on = ['id_major', 'id_university']).drop(['id_major', 'id_university', 'id_first_major', 'id_first_university'], axis = 1)\n\nscore_science.rename(columns={'major_univ_name' : 'specific_first_choice'}, inplace = True)\nscore_science['avg_score_first_choice'] = score_science.groupby('specific_first_choice')['avg_score'].transform('mean')\n\n# Second choice major and university\n# Initiate suffixes to give specific columns name because there are major and university name columns before, so it will be duplicated.\n\nscore_science = pd.merge(score_science, data_major_univ[['id_major', 'id_university', 'major_name', 'university_name', 'major_univ_name']]\n                            , left_on = ['id_second_major', 'id_second_university']\n                            , right_on = ['id_major', 'id_university']\n                            , suffixes=('_first_choice', '_second_choice')).drop(['id_major', 'id_university', 'id_second_major', 'id_second_university'], axis = 1)\n\nscore_science.rename(columns={'major_univ_name' : 'specific_second_choice'}, inplace = True)\nscore_science['avg_score_second_choice'] = score_science.groupby('specific_second_choice')['avg_score'].transform('mean')\n\n\n# Drop 'Unnamed: 0' columns, which is will not use in this project. Then, sort values by id_user\nscore_science = score_science.drop('Unnamed: 0', axis = 1).sort_values('id_user')\nscore_science.head()","c51ad024":"fig, ax = plt.subplots(figsize = (8, 4))\nfig.tight_layout(pad = 5)\n\nsns.distplot(ax = ax, a = data_major_univ['capacity'].dropna(), label = \"Skewness : %.2f\"%(data_major_univ['capacity'].skew()))\nax.set_title('capacity', fontsize = 18)\nax.legend(loc = 'best')\n\nplt.show()","e030710d":"fig, ax = plt.subplots(figsize = (6, 6))\nsizes = [count for count in data_major_univ['type'].value_counts()]\nlabels = list(data_major_univ['type'].value_counts().index + ' major')\nax.pie(x = sizes, labels = labels, autopct = '%1.1f%%',textprops={'fontsize': 14})\nplt.show()","99ebddd6":"# Visualize with barplot\n\nfig, ax = plt.subplots(2,1, figsize = (14, 8))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nindex = data_major_univ['major_name'].fillna('NaN').value_counts().index[0:10]\ncount = data_major_univ['major_name'].fillna('NaN').value_counts()[0:10]\nsns.barplot(ax = ax[0], x = index, y = count, order = index)\nax[0].set_title('Top 10 Most Majors are Provided by Universities', fontsize = 18)\nax[0].set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax[0].get_xticklabels()), fontsize = 10)\nfor index,count in enumerate(count):\n    ax[0].text(x=index-0.1 , y =count+0 , s=f\"{count}\" , fontdict=dict(fontsize=10))\nax[0].set_ylabel('No. of Universities', fontsize = 14)\nax[0].set_ylim(40, 65)\n\n\nindex = data_major_univ['university_name'].fillna('NaN').value_counts().index[0:10]\ncount = data_major_univ['university_name'].fillna('NaN').value_counts()[0:10]\nsns.barplot(ax = ax[1], x = index, y = count, order = index)\nax[1].set_title('Top 10 Universities Based on the Most Number of Majors', fontsize = 18)\nax[1].set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax[1].get_xticklabels()), fontsize = 10)\nfor index,count in enumerate(count):\n    ax[1].text(x=index-0.1 , y=count+0 , s=f\"{count}\" , fontdict=dict(fontsize=10))\nax[1].set_ylabel('No. of Majors', fontsize = 14)\nax[1].set_ylim(60, 85)\nplt.show()","6b16c2a3":"# Define numeric columns on \"Score Humanities\" Data\nnum_score_humanities = ['score_eko', 'score_geo', 'score_kmb', 'score_kpu','score_kua'\n                        , 'score_mat', 'score_ppu', 'score_sej', 'score_sos', 'avg_score']\n\n# Create distribution plot on each columns\nfig, ax = plt.subplots(5, 2, figsize = (14, 14))\nfig.tight_layout(pad = 5)\n\nfor ax, n in zip(ax.flatten(), num_score_humanities):\n    sns.distplot(ax = ax, a = score_humanities[n].dropna(), label = \"Skewness : %.2f\"%(score_humanities[n].skew()))\n    ax.set_title(n, fontsize = 18)\n    ax.legend(loc = 'best')\n\nplt.show()","625d4377":"# Create heatmap data numeric\ncormat = score_humanities[num_score_humanities].corr()\nfig, ax = plt.subplots(figsize = (12, 8))\nsns.heatmap(ax = ax, data = cormat, annot = True)\nax.set_yticklabels(cormat,rotation = 0)\nplt.show()","ba4e900a":"# Define categorical columns on \"Score Humanities\" Data\nfirst_choice_humanities = ['major_name_first_choice', 'university_name_first_choice']\nfirst_choice_titles = ['Top 10 First Choices Humanities Majors', 'Top 10 First Choices Universities (Humanities Majors)']","35875734":"# Visualize top 10 first choices humanities majors and universities with barplot\n\nfig, ax = plt.subplots(len(first_choice_humanities), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), first_choice_humanities, first_choice_titles, ['Major', 'University']):\n    index = score_humanities[col].fillna('NaN').value_counts().index[0:10]\n    count = score_humanities[col].fillna('NaN').value_counts()[0:10]\n    sns.barplot(ax = ax, x = index, y = count, order = index)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n    for index,count in enumerate(count):\n        ax.text(x=index-0.1 , y=count+0 , s=f\"{count}\" , fontdict=dict(fontsize=10))\n    ax.set_ylabel('No. of Participants', fontsize = 14)\n    ax.set_ylim(0,6000)\n    \nplt.show()","659d6d31":"# Visualize top 10 first choices humanities majors and universities with boxplot based on average score participants\n\nfig, ax = plt.subplots(len(first_choice_humanities), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), first_choice_humanities, first_choice_titles, ['Major', 'University']):\n    values = score_humanities[col].value_counts().sort_values(ascending = False).index[0:10]\n    top_data = score_humanities[score_humanities[col].isin(values)]\n    sns.boxplot(ax = ax, data=top_data, x = top_data[col], y = top_data['avg_score'], order = values)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n    ax.set_ylabel('Participants Average Score', fontsize = 14)\n\nplt.show()","b59a8586":"# Visualize top 5 first choices humanities majors - universities with barplot and boxplot\n\nfig, ax = plt.subplots(2, 1, figsize = (10, 8))\nfig.tight_layout(pad = 6)\n\nindex = score_humanities['specific_first_choice'].fillna('NaN').value_counts().index[0:5]\ncount = score_humanities['specific_first_choice'].fillna('NaN').value_counts()[0:5]\nsns.barplot(ax = ax[0], x = count, y = index, order = index)\nax[0].set_title('Top 5 First Choices Humanities Majors - Universities', fontsize = 16)\nax[0].set_xlabel('No. of Participants', fontsize = 14)\nax[0].set_ylabel('Humanities Majors - Universities', fontsize = 14)\nax[0].set_yticklabels(ax[0].get_yticklabels(), fontsize = 8)\nfor index,count in enumerate(count):\n        ax[0].text(x=count+1, y=index+0.1, s=f\"{count}\" , fontdict=dict(fontsize=10))\n\n\nvalues = score_humanities['specific_first_choice'].value_counts().sort_values(ascending = False).index[0:5]\ntop5_data = score_humanities[score_humanities['specific_first_choice'].isin(values)]\nsns.boxplot(ax = ax[1], data=top5_data, x = top_data['avg_score'], y = top5_data['specific_first_choice'], order = values)\nax[1].set_title('Top 5 First Choices Humanities Majors - Universities', fontsize = 16)\nax[1].set_xlabel('Participants Average Score', fontsize = 14)\nax[1].set_ylabel('Humanities Majors - Universities', fontsize = 14)\nax[1].set_yticklabels(ax[1].get_yticklabels(), fontsize = 8)\nplt.show()","f7b1df6c":"# Define categorical columns on \"Score Humanities\" Data\nsecond_choice_humanities = ['major_name_second_choice', 'university_name_second_choice']\nsecond_choice_titles = ['Top 10 Second Choices Humanities Majors', 'Top 10 Second Choices Universities (Humanities Majors)']","8221609c":"# Visualize top 10 second choices humanities majors and universities with barplot\n\nfig, ax = plt.subplots(len(first_choice_humanities), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), second_choice_humanities, second_choice_titles, ['Majors', 'Universities']):\n    index = score_humanities[col].fillna('NaN').value_counts().index[0:10]\n    count = score_humanities[col].fillna('NaN').value_counts()[0:10]\n    sns.barplot(ax = ax, x = index, y = count, order = index)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n    for index,count in enumerate(count):\n        ax.text(x=index-0.1 , y =count+0 , s=f\"{count}\" , fontdict=dict(fontsize=10))\n    ax.set_ylabel('No. of Participants', fontsize = 14)\n    ax.set_ylim(0, 5500)\n\nplt.show()","9364626f":"# Visualize top 10 second choices humanities majors and universities with boxplot based on average score participants\n\nfig, ax = plt.subplots(len(second_choice_humanities), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), second_choice_humanities, second_choice_titles, ['Majors', 'Universities']):\n    values = score_humanities[col].value_counts().sort_values(ascending = False).index[0:10]\n    top_data = score_humanities[score_humanities[col].isin(values)]\n    sns.boxplot(ax = ax, data=top_data, x = top_data[col], y = top_data['avg_score'], order = values)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n    ax.set_ylabel('Participants Average Score', fontsize = 14)\n\nplt.show()","5dcc3651":"# Visualize top 5 second choices humanities majors - universities with barplot and boxplot\n\nfig, ax = plt.subplots(2, 1, figsize = (10, 8))\nfig.tight_layout(pad = 6)\n\nindex = score_humanities['specific_second_choice'].fillna('NaN').value_counts().index[0:5]\ncount = score_humanities['specific_second_choice'].fillna('NaN').value_counts()[0:5]\nsns.barplot(ax = ax[0], x = count, y = index, order = index)\nax[0].set_title('Top 5 Second Choices Humanities Majors - Universities', fontsize = 16)\nax[0].set_xlabel('No. of Participants', fontsize = 14)\nax[0].set_ylabel('Humanities Majors - Universities', fontsize = 14)\nax[0].set_yticklabels(ax[0].get_yticklabels(), fontsize = 8)\nfor index,count in enumerate(count):\n        ax[0].text(x=count+1, y=index+0.1, s=f\"{count}\" , fontdict=dict(fontsize=10))\n\n\nvalues = score_humanities['specific_second_choice'].value_counts().sort_values(ascending = False).index[0:5]\ntop5_data = score_humanities[score_humanities['specific_second_choice'].isin(values)]\nsns.boxplot(ax = ax[1], data=top_data, x = top5_data['avg_score'], y = top5_data['specific_second_choice'], order = values)\nax[1].set_title('Top 5 Second Choices Humanities Majors - Universities', fontsize = 16)\nax[1].set_xlabel('Participants Average Score', fontsize = 14)\nax[1].set_ylabel('Humanities Majors - Universities', fontsize = 14)\nax[1].set_yticklabels(ax[1].get_yticklabels(), fontsize = 8)\nplt.show()","f7cb40fa":"# Create distribution plot on each columns\nfig, ax = plt.subplots(5, 2, figsize = (14, 14))\nfig.tight_layout(pad = 5)\n\n# Define numeric columns on \"Score Humanities\" Data\nnum_score_science = ['score_bio', 'score_fis', 'score_kim', 'score_kmb','score_kpu'\n                     , 'score_kua', 'score_mat', 'score_ppu', 'avg_score']\n\nfor ax, n in zip(ax.flatten(), num_score_science):\n    sns.distplot(ax = ax, a = score_science[n].dropna(), label = \"Skewness : %.2f\"%(score_science[n].skew()))\n    ax.set_title(n, fontsize = 18)\n    ax.legend(loc = 'best')\n\nplt.show()","595d4aae":"# Create heatmap data numeric\ncormat = score_science[num_score_science].corr()\nfig, ax = plt.subplots(figsize = (12, 8))\nsns.heatmap(ax = ax, data = cormat, annot = True)\nax.set_yticklabels(cormat,rotation = 0)\nplt.show()","efad091d":"# Define categorical columns on \"Score Humanities\" Data\nfirst_choice_science = ['major_name_first_choice', 'university_name_first_choice']\nfirst_choice_titles = ['Top 10 First Choices Science Majors', 'Top 10 First Choices Universities (Science Majors)']","72b5c8da":"# Visualize top 10 first choices science majors and universities with barplot\n\nfig, ax = plt.subplots(len(first_choice_science), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), first_choice_science, first_choice_titles, ['Majors', 'Universities']):\n    index = score_science[col].fillna('NaN').value_counts().index[0:10]\n    count = score_science[col].fillna('NaN').value_counts()[0:10]\n    sns.barplot(ax = ax, x = index, y = count, order = index)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n    for index,count in enumerate(count):\n        ax.text(x=index-0.1 , y =count+0 , s=f\"{count}\" , fontdict=dict(fontsize=10))    \n    ax.set_ylabel('No. of Participants', fontsize = 14)\nplt.show()","5ac6c04f":"# Visualize top 10 first choices science majors and universities with boxplot based on average score participants\n\nfig, ax = plt.subplots(len(first_choice_science), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), first_choice_science, first_choice_titles, ['Majors', 'Universities']):\n    values = score_science[col].value_counts().sort_values(ascending = False).index[0:10]\n    top_data = score_science[score_science[col].isin(values)]\n    sns.boxplot(ax = ax, data=top_data, x = top_data[col], y = top_data['avg_score'], order = values)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_ylabel('Participants Average Score', fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n\nplt.show()","a701087f":"# Visualize top 5 first choices science majors - universities with barplot and boxplot\n\nfig, ax = plt.subplots(2, 1, figsize = (10, 8))\nfig.tight_layout(pad = 6)\n\nindex = score_science['specific_first_choice'].fillna('NaN').value_counts().index[0:5]\ncount = score_science['specific_first_choice'].fillna('NaN').value_counts()[0:5]\nsns.barplot(ax = ax[0], x = count, y = index, order = index)\nax[0].set_title('Top 5 First Choices Science Majors - Universities', fontsize = 16)\nax[0].set_xlabel('No. of Participants', fontsize = 14)\nax[0].set_ylabel('Science Majors - Universities', fontsize = 14)\nax[0].set_yticklabels(ax[0].get_yticklabels(), fontsize = 8)\nfor index,count in enumerate(count):\n        ax[0].text(x=count+1, y=index+0.1, s=f\"{count}\" , fontdict=dict(fontsize=10))\n\nvalues = score_science['specific_first_choice'].value_counts().sort_values(ascending = False).index[0:5]\ntop5_data = score_science[score_science['specific_first_choice'].isin(values)]\nsns.boxplot(ax = ax[1], data=top5_data, x = top_data['avg_score'], y = top5_data['specific_first_choice'], order = values)\nax[1].set_title('Top 5 First Choices Science Majors - Universities', fontsize = 16)\nax[1].set_xlabel('Participants Average Score', fontsize = 14)\nax[1].set_ylabel('Science Majors - Universities', fontsize = 14)\nax[1].set_yticklabels(ax[1].get_yticklabels(), fontsize = 8)\nplt.show()","2b936258":"# Define categorical columns on \"Score Humanities\" Data\nsecond_choice_science = ['major_name_second_choice', 'university_name_second_choice']\nsecond_choice_titles = ['Top 10 Second Choices Science Majors', 'Top 10 Second Choices Universities (Science Majors)']","ded76f51":"# Visualize top 10 first choices science majors and universities with barplot\n\nfig, ax = plt.subplots(len(first_choice_science), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), second_choice_science, second_choice_titles, ['Majors', 'Universities']):\n    index = score_science[col].fillna('NaN').value_counts().index[0:10]\n    count = score_science[col].fillna('NaN').value_counts()[0:10]\n    sns.barplot(ax = ax, x = index, y = count, order = index)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n    for index,count in enumerate(count):\n        ax.text(x=index-0.1 , y =count+0 , s=f\"{count}\" , fontdict=dict(fontsize=10))  \n    ax.set_ylabel('No. of Participants', fontsize = 14)\n\nplt.show()","bd38a5c6":"# Visualize top 10 first choices science majors and universities with boxplot\n\nfig, ax = plt.subplots(len(second_choice_science), 1, figsize = (14, 10))\nfig.tight_layout(pad = 6)\nmax_width = 13\n\nfor ax, col, name, xlabel in zip(ax.flatten(), second_choice_science, second_choice_titles, ['Majors', 'Universities']):\n    values = score_science[col].value_counts().sort_values(ascending = False).index[0:10]\n    top_data = score_science[score_science[col].isin(values)]\n    sns.boxplot(ax = ax, data=top_data, x = top_data[col], y = top_data['avg_score'], order = values)\n    ax.set_title(name, fontsize = 18)\n    ax.set_xlabel(xlabel, fontsize = 14)\n    ax.set_ylabel('Participants Average Score', fontsize = 14)\n    ax.set_xticklabels((textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels()), fontsize = 10)\n\nplt.show()","ef58953a":"# Visualize top 5 second choices science majors - universities with barplot and boxplot\n\nfig, ax = plt.subplots(2, 1, figsize = (10, 8))\nfig.tight_layout(pad = 5)\n\nindex = score_science['specific_second_choice'].fillna('NaN').value_counts().index[0:5]\ncount = score_science['specific_second_choice'].fillna('NaN').value_counts()[0:5]\nsns.barplot(ax = ax[0], x = count, y = index, order = index)\nax[0].set_title('Top 5 Second Choices Science Majors - Universities', fontsize = 16)\nax[0].set_xlabel('No. of Participants', fontsize = 14)\nax[0].set_ylabel('Science Majors - Universities', fontsize = 14)\nax[0].set_yticklabels(ax[0].get_yticklabels(), fontsize = 8)\nfor index,count in enumerate(count):\n        ax[0].text(x=count+1, y=index+0.1, s=f\"{count}\" , fontdict=dict(fontsize=10))\n\nvalues = score_science['specific_second_choice'].value_counts().sort_values(ascending = False).index[0:5]\ntop5_data = score_science[score_science['specific_second_choice'].isin(values)]\nsns.boxplot(ax = ax[1], data=top_data, x = top5_data['avg_score'], y = top5_data['specific_second_choice'], order = values)\nax[1].set_title('Top 5 Second Choices Science Majors - Universities', fontsize = 16)\nax[1].set_xlabel('Participants Average Score', fontsize = 14)\nax[1].set_ylabel('Science Majors - Universities', fontsize = 14)\nax[1].set_yticklabels(ax[1].get_yticklabels(), fontsize = 8)\nplt.show()","4da4f1db":"#### - Barplot (Counts Participants) and Boxplot (Participants AVG Score) Top 5 First Choices Humanities Majors - Universities","a416b21c":"#### - Barplot Top 10 First Choices Science Majors and Universities","b56ad270":"#### - Barplot Top 10 First Choices  Humanities Majors and Universities","b4b5d181":"#### Analysis First Choice Major & University on \"Score Science\" Data","445c2092":"#### Analysis Second Choice Major & University on \"Score Humanities\" Data","596750bc":"#### - Boxplot Top 10 Second Choices Humanities Majors and Universities Based on Average Score Participants","9b190ec9":"#### - Barplot (Counts Participants) and Boxplot (Participants AVG Score) Top 5 First Choices Science Majors - Universities","4ba2a200":"#### - Boxplot Top 10 Second Choices Majors and Universities","c8ca39e9":"# Exploratory Data Analysis","2fe0dd9d":"#### Analysis Second Choice Major & University on \"Score Science\" Data","afc46046":"#### - Barplot Top 10 Second Choices Major and University","ec77a037":"#### - Barplot (Counts Participants) and Boxplot (Participants AVG Score) Top 5 Second Choices Humanities Majors - Universities","9023ab7c":"#### Top 10 Most Major are Provided by Universities & Universities Based on the Most Number of Majors","fb638ca8":"### Analysis Numeric Data on \"Score Humanities\" Data","0e66f90e":"### Analysis Numeric Data on \"Score Science\" Data","700000b0":"## Analysis Numeric and Categorical Data on Major and University Data","6a8258db":"#### - Barplot (Counts Participants) and Boxplot (Participants AVG Score) Top 5 Second Choices Science Majors - Universities","9e81ed2a":"#### Piechart Type of Majors","95d2a7d5":"#### Analysis First Choice Major & University on \"Score Humanities\" Data","7ac4c890":"#### - Barplot Top 10 Second Choices Humanities Majors and Universities","d3b88041":"#### - Boxplot Top 10 First Choices Science Majors and Universities Based on Average Score Participants","06e9108c":"#### Distribution Plot of Capacity College Students on Each Major","0ab574b6":"## Analysis Numeric and Categorical Data on \"Score Science\" Data","987a3d86":"#### - Boxplot Top 10 First Choices Humanities Majors and Universities Based on Average Score Participants","582b4299":"### Analysis Categorical Data on \"Score Humanities\" Data","d9c8814d":"## Analysis Numeric and Categorical Data on \"Score Humanities\" Data","7c8c2491":"### Analysis Categorical Data on \"Score Science\" Data"}}