{"cell_type":{"5f632f76":"code","113ca953":"code","8bc9c186":"code","7d11dbe8":"code","91ae3beb":"code","612fede1":"code","b91e95e2":"code","2c9d22df":"code","3a38af3b":"code","e78d3981":"code","829eaf00":"code","f7b8e8da":"code","711ccace":"code","1b44e719":"code","eee1ff76":"code","6f1df743":"code","4c757813":"code","cf3c3fad":"code","8c2a2ff6":"code","dbf17b55":"code","c2ac8915":"code","09abcedd":"code","539014b8":"code","1e40771a":"code","c98db4c1":"code","2580b712":"code","06d83666":"code","45a28888":"code","47a4cf9f":"code","e85b9026":"markdown","be41e465":"markdown","38f64e94":"markdown","210be15c":"markdown","794b3252":"markdown","2fa9bca1":"markdown","202d2ca9":"markdown","888e2f39":"markdown","c65fce87":"markdown","8ecfc7c6":"markdown","ec14bfcf":"markdown","25daecb7":"markdown","9640e705":"markdown","734be664":"markdown","e3fab160":"markdown","cc8b8778":"markdown","5592920b":"markdown","7d4d00b1":"markdown","fa2b6eaa":"markdown","aee65adc":"markdown","0580a41d":"markdown","8d4b2ac2":"markdown","73410dd2":"markdown","e21208bd":"markdown","8693c977":"markdown","1bae9e68":"markdown","beba35db":"markdown","31951df9":"markdown","aeff769b":"markdown","1c4eedbd":"markdown","11a30208":"markdown","9eeb87e1":"markdown","0ef74c7d":"markdown","6e862a0d":"markdown","a7f5f339":"markdown","6ef73be8":"markdown","af9148e5":"markdown","d68819f9":"markdown","f9c04ff3":"markdown","31b302ee":"markdown","3f6690f9":"markdown","2ac9031e":"markdown","8b19c1b7":"markdown","b23678c1":"markdown","42a27433":"markdown"},"source":{"5f632f76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","113ca953":"def count_plot(df, col, top_most=50, title=None, is_top=True):\n     \n    if not is_top:\n        temp = df[col].astype(\"str\").value_counts(ascending=True).to_frame().reset_index().head(top_most)\n    else:\n        temp = df[col].astype(\"str\").value_counts().to_frame().reset_index().head(top_most)\n    \n    temp.columns = [col,'count']\n    \n    plt.figure(figsize=(6, 10))\n    sns.barplot(\"count\", col, data=temp, orient=\"h\", order=temp[col].values.tolist())\n    plt.show()\n    pass","8bc9c186":"import os\nimport gc\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\n\nimport cv2\nimport imageio\nimport subprocess\nfrom PIL import Image\n\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as ptc\n\nfrom IPython.display import Video, display\n\nsns.set_style(\"whitegrid\")\ncolorpal = sns.color_palette(\"husl\", 9)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\nplt.rcParams['figure.dpi'] = 150\nplt.rcParams['figure.figsize'] = 12, 8","7d11dbe8":"image_path = \"..\/input\/nfl-impact-detection\/images\"\ntrain_videos = \"..\/input\/nfl-impact-detection\/train\"\ntest_videos = \"..\/input\/nfl-impact-detection\/test\"\nimage_labels = \"..\/input\/nfl-impact-detection\/image_labels.csv\"\ntrain_labels = \"..\/input\/nfl-impact-detection\/train_labels.csv\"\ntrain_player_tracking = \"..\/input\/nfl-impact-detection\/train_player_tracking.csv\"\ntest_player_tracking = \"..\/input\/nfl-impact-detection\/test_player_tracking.csv\"\nsample_submissions = \"..\/input\/nfl-impact-detection\/sample_submission.csv\"","91ae3beb":"tr_labels = pd.read_csv(train_labels)\ntr_labels","612fede1":"tr_labels.info()","b91e95e2":"# Unique Videos\ntr_labels[\"video\"].nunique()","2c9d22df":"tr_labels[\"video\"].apply(lambda x: x[:12]).nunique()","3a38af3b":"tr_labels.nunique().to_frame().rename(columns={0:\"count\"}).style.background_gradient(cmap=\"gnuplot\")","e78d3981":"count_plot(tr_labels, \"gameKey\")","829eaf00":"count_plot(tr_labels, \"playID\")","f7b8e8da":"count_plot(tr_labels, \"label\")","711ccace":"count_plot(tr_labels, \"label\", is_top=False)","1b44e719":"count_plot(tr_labels, \"video\")","eee1ff76":"count_plot(tr_labels, \"video\", is_top=False)","6f1df743":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(12, 10))\nsns.distplot(tr_labels[\"gameKey\"].value_counts(), ax=ax[0, 0], rug=True, color=\"red\")\nax[0, 0].set_title(\"Game Counts\")\nsns.distplot(tr_labels[\"playID\"].value_counts(), ax=ax[0, 1], rug=True, color=\"blue\")\nax[0, 1].set_title(\"Play Counts\")\nsns.distplot(tr_labels[\"label\"].value_counts(), ax=ax[1, 0], rug=True, color=\"green\")\nax[1, 0].set_title(\"Labels Counts\")\nsns.distplot(tr_labels[\"video\"].value_counts(), ax=ax[1, 1], rug=True, color=\"yellow\")\nax[1, 1].set_title(\"Videos Counts\")\nfig.show()","4c757813":"_ = sns.catplot(x=\"impactType\", hue=\"visibility\", col=\"view\",\n                data=tr_labels, kind=\"count\")","cf3c3fad":"_ = sns.catplot(x=\"impactType\", hue=\"confidence\", col=\"view\",\n                data=tr_labels, kind=\"count\")","8c2a2ff6":"_ = sns.catplot(x=\"view\", hue=\"impactType\", col=\"confidence\",\n                data=tr_labels, kind=\"count\")","dbf17b55":"_ = sns.catplot(x=\"view\", hue=\"impactType\", col=\"visibility\",\n                data=tr_labels, kind=\"count\")","c2ac8915":"img_labels = pd.read_csv(image_labels)\nimg_labels","09abcedd":"img_labels.label.value_counts()","539014b8":"_ = sns.catplot(x=\"label\", data=img_labels, kind=\"count\")\nplt.gcf().set_size_inches(20, 8)","1e40771a":"# take a sample image\nridx = np.random.randint(0, len(os.listdir(image_path)))\nimg_fn = os.listdir(image_path)[ridx]\nprint(\"Image: \", img_fn)\nimg_sample = Image.open(os.path.join(image_path, img_fn))\n\nplt.imshow(img_sample)\nplt.show()","c98db4c1":"def add_img_boxes(image_name, image_labels=img_labels):\n    # Set label colors for bounding boxes\n    _, ax = plt.subplots(1)\n    \n    boxes = img_labels.loc[img_labels['image'] == image_name]\n    \n    for j, box in boxes.iterrows():\n        if box.label==\"Helmet\":\n            edc = \"blue\"\n        elif box.label==\"Helmet-Blurred\":\n            edc = \"orange\"\n        elif box.label==\"Helmet-Difficult\":\n            edc = \"green\"\n        elif box.label==\"Helmet-Sideline\":\n            edc = \"red\"\n        else:\n            edc = \"purple\"\n        \n        patch = ptc.Rectangle((box.left, box.top), width=box.width, height=box.height, fill=False, edgecolor=edc)\n        ax.text(box.left, box.top, box.label, fontsize=8, bbox=dict(facecolor=edc, alpha=0.1))\n        ax.add_patch(patch)\n        \n    # Display the image with bounding boxes added\n    ax.imshow(img_sample)\n    ax.set_title(f\"{image_name} with bounded boxes\")\n    plt.show()\n    \nadd_img_boxes(img_fn)","2580b712":"tr_track = pd.read_csv(train_player_tracking)\ntr_track","06d83666":"ts_track = pd.read_csv(test_player_tracking)\nts_track","45a28888":"# take a sample image\nridx = np.random.randint(0, len(os.listdir(train_videos)))\nvid_fn = os.listdir(train_videos)[ridx]\nprint(\"Video: \", vid_fn)\n\ndisplay(Video(data=os.path.join(train_videos, vid_fn), embed=True))","47a4cf9f":"ss = pd.read_csv(sample_submissions)\nss","e85b9026":"## But What is F1 Score?","be41e465":"# Data Overview","38f64e94":"<h2 style=\"color:brown\">Task: <\/h2>\n<p>Segment helmet collisions in videos of football plays using bounding boxes.<\/p>\n<h2 style=\"color:brown\">Metric: <\/h2>\n<p>Evaluated using <em>micro F1 score<\/em> at an <em>Intersection Over Union<\/em> threshold of 0.35.<\/p>","210be15c":"`\ngameKey,playID,view,video,frame,left,width,top,height\n57590,3607,Endzone,57590_003607_Endzone.mp4,1,1,1,1,1\n57590,3607,Sideline,57590_003607_Sideline.mp4,1,1,1,1,1\n57595,1252,Endzone,57595_001252_Endzone.mp4,1,1,1,1,1\n57595,1252,Sideline,57595_001252_Sideline.mp4,1,1,1,1,1\netc.\n`","794b3252":"# Imports","2fa9bca1":"## Organisers and additional perks","202d2ca9":"<h1><center>NFL 1st and Future - Impact Detection<\/center><\/h1>\n<h2><center>Detect helmet impacts in videos of NFL plays<\/center><\/h2>","888e2f39":"### Top 50 PlayIDs","c65fce87":"# Have a look at sample submission!","8ecfc7c6":"# Top 50 Videos","ec14bfcf":"# About the Competition","25daecb7":"**A valid sample submission file.**\n\n- **gameKey:** the ID code for the game.\n\n- **playID:** the ID code for the play.\n\n- **view:** the camera orientation.\n\n- **video:** the filename of the associated video.\n\n- **frame:** the frame number for this play.\n\n- **[left\/width\/top\/height]:** the specification of the bounding box of the prediction.","9640e705":"- We are tasked with identifying helmet collisions in video files. \n- Each play has two associated videos, showing a `sideline` and `endzone` view, and the videos are aligned so that frames correspond between the videos. \n- The training set videos are in `train` with corresponding labels in `train_labels.csv`, while the videos for which you must predict are in the `test` folder.\n- We are also provided an ancillary dataset of images showing helmets with labeled bounding boxes. These files are located in `images` and the bounding boxes in `image_labels.csv`.\n\n<p style=\"color:red\">This is a code competition. When you submit, your model will be rerun on a set of 15 unseen videos located in the same test location. The publicly provided test videos are simply a set of mock plays (copied from the training set) which are not used in scoring.<\/p>\n\n<p style=\"color:blue\">The dataset provided for this competition has been carefully designed for the purposes of training computer vision models and therefore contains plays that have much higher incidence of helmet impacts than is normal. This dataset should not be used to make inferences about the incidence of helmet impact rates during football games, as it is not a representative sample of those rates.<\/p>\n\nFiles\n[train\/test] mp4 videos of each play. Each play has two copies, one shot from the endzone and the other shot from the sideline. The video pairs are matched frame for frame in time, but different players may be visible in each view. You only need to make predictions for the view that a player is actually visible in.","734be664":"### 50 Rare Videos","e3fab160":"## More on Guidelinses\/submissions:\n\n- CPU Notebook <= 9 hours run-time\n- GPU Notebook <= 9 hours run-time\n- Freely & publicly available external data is allowed, including pre-trained models","cc8b8778":"### Top 50 gameKeys","5592920b":"\n**Contains the bounding boxes corresponding to the images.**\n\n- **image:** the image file name.\n\n- **label:** the label type.\n\n- **[left\/width\/top\/height]:** the specification of the bounding box of the label, with left=0 and top=0 being the top left corner.","7d4d00b1":"## Test Players tracking","fa2b6eaa":"# Evaluation Metric","aee65adc":"# Player Tracking","0580a41d":"The dataframe should be in the following format:\n- Each row in your submission represents a single predicted bounding box for the given frame.\n- Note that it is not required to include labels of which players had an impact, only a bounding box where it occurred.","8d4b2ac2":"As said, we need to predict a single bouding box for the givenn frame. The bouding boxe is represented by `left`, `width`, `top` and `height`.","73410dd2":"### Least 50 labels","e21208bd":"<h2 style=\"color:red\">Work in Progress.<\/h2>\n<h3 style=\"color:brown\">Shoot your thoughts in the comment section and Don't forget to upvote if you like the notebook :)<\/h3>","8693c977":"# Image Labels","1bae9e68":"# Train Labels","beba35db":"- This competition is part of the **NFL\u2019s annual 1st and Future competition**, which is designed to spur innovation in athlete safety and performance. \n- For the first time this year, 1st and Future will be broadcast in primetime during Super Bowl LV week on NFL Network, and winning Kagglers may have the opportunity to present their computer vision systems as part of this exciting event.  \n- If successful, you could support the NFL\u2019s research programs in a big way: improving athletes' safety. Backed by this research, the NFL may implement rule changes and helmet design improvements to try to better protect the athletes who play the game millions watch each week.","31951df9":"**Helmet tracking and collision labels for the training set.**\n\n- **gameKey:** the ID code for the game.\n\n- **playID:** the ID code for the play.\n\n- **view:** the camera orientation.\n\n- **video:** the filename of the associated video.\n\n- **frame:** the frame number for this play.\n\n- **label:** the associate player's number.\n\n- **[left\/width\/top\/height]:** the specification of the bounding box of the prediction.\n\n- **impact:** an indicator (1 = helmet impact) for bounding boxes associated with helmet impacts\n\n- **impactType:** a description of the type of helmet impact: helmet, shoulder, body, ground, etc.\n\n- **confidence:** 1 = Possible, 2 = Definitive, 3 = Definitive and Obvious\n\n- **visibility:** 0 = Not Visible from View, 1 = Minimum, 2 = Visible, 3 = Clearly Visible\n\nFor the purposes of evaluation, definitive helmet impacts are defined as meeting three criteria:\n\n- `impact = 1`\n- `confidence > 1`\n- `visibility > 0` \n\nThose labels with confidence = 1 document cases in which human labelers asserted it was possible that a helmet impact occurred, but it was not clear that the helmet impact altered the trajectory of the helmet. Those labels with visibility = 0 indicate that although there is reason to believe that an impact occurred to that helmet at that time, the impact itself was not visible from the view.","aeff769b":"<img src=\"https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F3258%2F820e86013d48faacf33b7a32a15e814c%2FIncreasing%20Dir%20and%20O.png?generation=1572285857588233&alt=media\">","1c4eedbd":"F1 is calculated as follows:\n\\begin{equation}\nF1 = 2 \u2217 \\frac{{precision\u2217recall}} {precision+recall}\n\\end{equation}\n\nwhere:\n\n\\begin{align}\nprecision = \\frac{TP}{TP+FP} \\\\\nrecall = \\frac{{TP}}{TP+FN}\n\\end{align}","11a30208":"`\nimport nflimpact\nenv = nflimpact.make_env()\nenv.predict(df) # df is a pandas dataframe of your entire submission file\n`","9eeb87e1":"## Train Players tracking","0ef74c7d":"### Top 50 Labels","6e862a0d":"# Videos Analysis","a7f5f339":"**Each player wears a sensor that allows us to precisely locate them on the field; that information is reported in these two files.**\n\n- **gameKey:** the ID code for the game.\n\n- **playID:** the ID code for the play.\n\n- **player:** the player's ID code.\n\n- **time:** timestamp at **10 Hz**.\n\n- **x:** player position along the long axis of the field. See figure below.\n\n- **y:** player position along the short axis of the field. See figure below.\n\n- **s:** speed in yards\/second.\n\n- **a:** acceleration in yards\/second^2.\n\n- **dis:** distance traveled from prior time point, in yards.\n\n- **o:** orientation of player (deg).\n\n- **dir:** angle of player motion (deg).\n\n- **event:** game events like a snap, whistle, etc.","6ef73be8":"# Helper Functions","af9148e5":"The IoU of a proposed bounding box and a ground truth bounding box is calculated as:\n\n\\begin{equation}\nIoU(A,B) = \\frac{{A\u2229B}}{A\u222aB}\n\\end{equation}","d68819f9":"## What is IoU?","f9c04ff3":"## What to do?\n\n- We\u2019ll develop a computer vision model that automatically detects helmet impacts that occur on the field. \n- Kick off with the dataset of more than one thousand definitive head impacts from thousands of game images, labeled video from the sidelines and end zones, and player tracking data. \n\n## Data Source\n\n- This information is sourced from the NFL\u2019s Next Gen Stats (NGS) system, which documents the position, speed, acceleration, and orientation for every player on the field during NFL games.","31b302ee":"<center><img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/12125\/logos\/header.png?t=2018-11-30-18-08-32\"><\/center>","3f6690f9":"So we have `120` unique videos. Technically Yes, but as per the descirption, we have `60` videos each having `2` view or we can say being captured from `2` view, one is **EndZone** and another is **Sideline**. We can see that the last token of each video file's name depicts from which view it's been captured. We can confirm once.","2ac9031e":"## Why F1-Score?\n\n- The main departure from a traditional metric is that some imprecision on the timing of the impact is acceptable. For a given ground truth impact, a prediction within **+\/- 4 frames (9 frames total)** within the same play can be accepted as valid without necessarily degrading the score. Assuming the player is moving over the course of those frames, the exact bounding box predicted to achieve an IoU of 1.0 would also vary depending on the frame.\n- As one helmet may partially obscure another from the camera's perspective, both predicted and ground truth bounding boxes may overlap. However, at most one prediction will ever be assigned to a given ground truth box.\n\nThe two criteria described above mean that one or more predictions could theoretically be assigned to more than one ground truth boxes. If this happens, our metric will optimize for the assignments between your prediction(s) and the ground truth boxes that lead to the highest total number of True Positives (thereby maximizing the F1 score). At most one prediction will be assigned to any ground truth box and vice versa.","8b19c1b7":"# Make a submission, but how to?","b23678c1":"Due to the custom metric, this competition relies on an evaluation pipeline which is slightly different than a typical code competition. Your notebook must import and submit via the custom `nflimpact` python module available in Kaggle notebooks.\n\nTo submit, simply add these three lines at the end of your code:","42a27433":"### Number of unique values in each Column"}}