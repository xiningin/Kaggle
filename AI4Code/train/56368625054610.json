{"cell_type":{"e712930a":"code","fd84a54a":"code","285aed3f":"code","bf632c03":"code","d69e7e29":"code","9d67ed74":"code","68fd0f37":"code","27960b51":"code","e270e7d9":"code","bcd151d4":"code","e52dc32b":"code","a1964d50":"code","2413c877":"code","61d93f9d":"code","d8e25928":"code","6bb6eb99":"code","f1b4811d":"code","ae4f9b5e":"code","465b0ae8":"code","93d627fe":"code","3d84eb06":"code","6f187e33":"code","41197000":"code","09e2e4fd":"code","3dd08c73":"code","8e2e8fb8":"code","be8977b1":"code","b5d6b41c":"code","f0d18b8a":"code","7881660e":"code","01ae652a":"code","549c5f42":"code","dc2316a2":"code","f2a86de6":"code","596f94a8":"code","30b17a5b":"code","1882e2c5":"code","0508d9dc":"code","29ac5a26":"code","7afd6be9":"code","8157eaec":"code","0e9abe33":"code","294a9545":"markdown","73da8741":"markdown","500a94d1":"markdown","c1327186":"markdown"},"source":{"e712930a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd84a54a":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","285aed3f":"df = pd.read_csv('..\/input\/face-mask-detection-dataset\/train.csv')\ndf[:20]","bf632c03":"#df5 = df[df.classname == 'face_no_mask','face_with_mask','face_with_mask_incorrect','mask_surgical','mask_colorful','face_other_covering','other']\n#df5.head()\n#indexNames = df[ (df['classname']!=  'face_no_mask') & (df['classname'] != 'face_with_mask')\n#                &(df['classname']!=  'face_with_mask_incorrect') & (df['classname'] != 'mask_surgical')\n#                &(df['classname']!=  'mask_colorful') & (df['classname'] != 'face_other_covering')& (df['classname'] != 'other') ].index\ndf1 =df[df.classname.str.contains('face_no_mask')| df.classname.str.contains('face_with_mask')]\n#df5 = df.drop(indexNames , inplace=True)\ndf1.reset_index(drop=True, inplace=True)\n\n\ndf1 = df1.drop(df1.index[3111])\n# df1.reset_index(drop=True, inplace=True)\n#df1 = df1.drop(df1.index[1348])\ndf1.reset_index(drop=True, inplace=True)\n\n#df1.reset_index(drop=True, inplace=True)\n#df1[df1.name.str.contains('1861.jpg')]\ndf1[df1.name.str.contains('1861.jpg')]","d69e7e29":"df1[df1.classname.str.contains('face_with_mask_incorrect')]","9d67ed74":"df1 = df1[~df1.classname.str.contains('face_with_mask_incorrect')]","68fd0f37":"df1[df1.classname.str.contains('face_with_mask_incorrect')]","27960b51":"! pip install imutils","e270e7d9":"import cv2 \nfrom imutils import paths as pth\nimport matplotlib.pyplot as plt","bcd151d4":"#parent_dir = \"\"\n#path = os.path.join(parent_dir, 'face_no_mask')\n#os.mkdir(path)\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import resnet50\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","e52dc32b":"df2 = df1.iloc[np.random.permutation(len(df1))]\ndf2.reset_index(drop=True, inplace=True)\ndf2[:20], len(df2)\nlabels = df2['classname']\nlabels = np.array(labels)\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nprint(labels[:5]),df2[:5]","a1964d50":"(train_df,test_df,train_labels,test_labels) = train_test_split(df2,labels,test_size=0.20, stratify=labels, random_state=42)\nlen(train_df ), len(test_df ),len(train_labels),len(test_labels)","2413c877":"train_df.head(),test_df.head(),train_labels[:5],test_labels[:5]","61d93f9d":"train_df.reset_index(drop=True, inplace=True)\ntest_df.reset_index(drop=True, inplace=True)\ntrain_df.head(),  test_df.head(), len(train_df),len(test_df)","d8e25928":"df3 = train_df.drop(['name','classname'], axis=1)\npoints = df3.to_numpy() \nint(points[3][0])","6bb6eb99":"len(df1),len(df2)","f1b4811d":"train_data = []\nfor i,j in enumerate(train_df ['name']):\n    direc = '..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/%s'%j\n    img1 = cv2.imread(direc,cv2.IMREAD_COLOR )\n    img1 = cv2.cvtColor(img1,cv2.COLOR_BGR2RGB)\n    x1= int(points[i][0])\n    y1= int(points[i][1])\n    x2= int(points[i][2])\n    y2= int(points[i][3])\n    #img2 = cv2.rectangle(img1.copy(), (x1,y1), (x2,y2), (0,0,255), 3)\n    cropped = img1[y1:y2,x1:x2]\n    \n    image = cv2.resize(cropped,(224,224))\n    image = img_to_array(image)\n    image = preprocess_input(image)\n    \n    train_data.append(image)\n    \n#     fig = plt.figure()\n#     a = fig.add_subplot(1, 2, 1)\n#     plt.imshow(img2)\n#     a = fig.add_subplot(1, 2, 2)\n#     plt.imshow(cropped)\n#     a.set_title(train_df['classname'][i])\n#     print(i)\n\ntrain_data = np.array(train_data, dtype=\"float32\")\n\n#print(data[5].shape)\ntrain_labels = np.array(train_labels)\nprint(type(train_labels))\nprint(len(train_labels))\n\ntrain_labels1 = to_categorical(train_labels)\nprint(train_labels1.shape)\n\n","ae4f9b5e":"len(train_data),i,j","465b0ae8":"train_labels1[:5]","93d627fe":"df1[df1.name.str.contains('1861.jpg')]","3d84eb06":"df3 = test_df.drop(['name','classname'], axis=1)\npoints = df3.to_numpy() \nint(points[3][0])","6f187e33":"test_data = []\nfor i,j in enumerate(test_df ['name']):\n    direc = '..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/%s'%j\n    img1 = cv2.imread(direc,cv2.IMREAD_COLOR )\n    img1 = cv2.cvtColor(img1,cv2.COLOR_BGR2RGB)\n    x1= int(points[i][0])\n    y1= int(points[i][1])\n    x2= int(points[i][2])\n    y2= int(points[i][3])\n    #img2 = cv2.rectangle(img1.copy(), (x1,y1), (x2,y2), (0,0,255), 3)\n    cropped = img1[y1:y2,x1:x2]\n    \n    image = cv2.resize(cropped,(224,224))\n    image = img_to_array(image)\n    image = preprocess_input(image)\n   \n    test_data.append(image)\n    \n#     fig = plt.figure()\n#     a = fig.add_subplot(1, 2, 1)\n#     plt.imshow(img2)\n#     a = fig.add_subplot(1, 2, 2)\n#     plt.imshow(cropped)\n#     a.set_title(test_df['classname'][i])\n#     print(i)\n\ntest_data = np.array(test_data, dtype=\"float32\")\n\n#print(data[5].shape)\ntest_labels = np.array(test_labels)\nprint(type(test_labels))\nprint(len(test_labels))\n\ntest_labels1 = to_categorical(test_labels)\nprint(test_labels1.shape)","41197000":"train_labels.shape, train_data.shape","09e2e4fd":"aug = ImageDataGenerator(\n\trotation_range=20,\n\tzoom_range=0.15,\n\twidth_shift_range=0.2,\n\theight_shift_range=0.2,\n\tshear_range=0.15,\n\thorizontal_flip=True,\n\tfill_mode=\"nearest\")","3dd08c73":"baseModel = resnet50.ResNet50(weights=\"imagenet\", include_top=False,\n\tinput_tensor=Input(shape=(224, 224, 3)))","8e2e8fb8":"headModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)","be8977b1":"model = Model(inputs=baseModel.input, outputs=headModel)","b5d6b41c":"for layer in baseModel.layers:\n\tlayer.trainable = False","f0d18b8a":"INIT_LR = 1e-3\nEPOCHS = 5\n\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])","7881660e":"BS = 32\n\nprint(\"[INFO] training head...\")\nH = model.fit(\n\taug.flow(train_data, train_labels1, batch_size=BS),\n\tsteps_per_epoch=len(train_data) \/\/ BS,\n\tvalidation_data=(test_data, test_labels1),\n\tvalidation_steps=len(test_data) \/\/ BS,\n\tepochs=EPOCHS)","01ae652a":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(test_data, batch_size=BS)\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n# show a nicely formatted classification report\nprint(classification_report(test_labels.argmax(axis=1), predIdxs,\n\ttarget_names=lb.classes_))\n# serialize the model to disk\n# print(\"[INFO] saving mask detector model...\")\n# model.save(args[\"model\"], save_format=\"h5\")","549c5f42":"# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")","dc2316a2":"#face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n#eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')","f2a86de6":"df5 =  pd.read_csv('..\/input\/face-mask-detection-dataset\/submission.csv')\ndf5.head(), len(df5)","596f94a8":"df5.drop_duplicates(subset =\"name\", \n                     keep = 'first', inplace = True)\ndf5.reset_index(drop=True, inplace=True)\ndf5.head()","30b17a5b":"df5[df5.name.str.contains('0619.jpg')]\ndf5['name'][0]","1882e2c5":"net = cv2.dnn.readNetFromCaffe('..\/input\/facedetector-model\/deploy.prototxt.txt', '..\/input\/facedetector-model\/res10_300x300_ssd_iter_140000.caffemodel')","0508d9dc":"plt.rcParams[\"axes.grid\"] = False\nclassname = []\nimgname   = []\nx1 = []\ny1 = []\nx2 = []\ny2 = []\nfor n,i in enumerate(df5['name']):\n    direc = '..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/%s'%i\n    image = cv2.imread(direc)\n    image2 =cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    image3 = image2.copy()\n    (h, w) = image.shape[:2]\n    blob = cv2.dnn.blobFromImage(cv2.resize(image, (300, 300)), 1.0,\n\t(300, 300), (104.0, 177.0, 123.0))\n    net.setInput(blob)\n    detections = net.forward()\n    for j in range(0, detections.shape[2]):\n\t# extract the confidence (i.e., probability) associated with\n\t# the detection\n        confidence = detections[0, 0, j, 2]\n\t# filter out weak detections by ensuring the confidence is\n\t# greater than the minimum confidence\n        if confidence > 0.5:\n\t\t# compute the (x, y)-coordinates of the bounding box for\n\t\t# the object\n            box = detections[0, 0, j, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype(\"int\")\n\t\t# ensure the bounding boxes fall within the dimensions of\n\t\t# the frame\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            # draw the bounding box of the face along with the associated\n            if startX > w or startY > h:\n                break\n\t\t# probability\n            face = image2[startY:endY, startX:endX]\n            #face = cv2.cvtColor(face,cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            face = np.expand_dims(face, axis=0)\n            \n            # pass the face through the model to determine if the face\n\t\t# has a mask or not\n            (withoutMask, mask) = model.predict(face)[0]\n            \n            labl = \"face_with_mask\" if mask > withoutMask else \"face_no_mask\"\n        \n            classname.append(labl)\n            imgname.append(i)\n            x1.append(startX)\n            y1.append(startY)\n            x2.append(endX)\n            y2.append(endY)\n#             text = \"{:.2f}%\".format(confidence * 100)\n#             y = startY - 10 if startY - 10 > 10 else startY + 10\n            cv2.rectangle(image3, (startX, startY), (endX, endY),\n \t\t\t(0, 0, 255),10)\n#             cv2.putText(image, text, (startX, y),\n# \t\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.45, (255, 0, 0), 2)\n    if n < 10:\n        plt.axis('off')\n        plt.grid(b=None)\n        fig = plt.figure()\n        a = fig.add_subplot(1, 2, 1)\n        plt.imshow(image3)\n        a.set_title(labl)\n        ","29ac5a26":"classname[:20], imgname[:20], len(classname),len(imgname),","7afd6be9":"len(x1),len(y1),len(x2),len(y2)","8157eaec":"name = pd.Series(imgname)\nx1 = pd.Series(x1)\ny1 = pd.Series(y1)\nx2 = pd.Series(x2)\ny2 = pd.Series(y2)\nclassname =  pd.Series(classname)\nsubmit = pd.DataFrame({ 'name': name, 'x1': x1,'y1': y1, 'x2': x2,'y2': y2,'classname': classname })\n\nlen(submit), submit.tail(), df5.tail()","0e9abe33":"submit.to_csv('submission.csv')    ","294a9545":"# Training the Neural Network","73da8741":"# ***Inferece on Test Data:***","500a94d1":"# Implementing a pretrained Face detector","c1327186":"**Performance**"}}