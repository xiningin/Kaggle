{"cell_type":{"5a6b5349":"code","45abb712":"code","f4364667":"code","934556f3":"code","33e591df":"code","27688f4f":"code","5b76b9da":"code","0cbcaec7":"code","9b7357a4":"code","28d68ee2":"code","145272a3":"code","ec4425bc":"code","a18e29af":"code","88f98487":"code","4386b95d":"code","3f53ca8b":"code","78300b8f":"code","a9fce9c8":"code","07209624":"markdown","0166ca56":"markdown","6ae0e18e":"markdown","ac104d1c":"markdown","e6075e39":"markdown","60d9f338":"markdown","d26acfe4":"markdown","5595b1e9":"markdown","c535a152":"markdown","2c0746b6":"markdown","eeb4f595":"markdown","05955a94":"markdown"},"source":{"5a6b5349":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45abb712":"file_path = r'\/kaggle\/input\/usa-housing\/USA_Housing.csv'\nData = pd.read_csv(file_path)","f4364667":"Data.head()","934556f3":"Data.shape","33e591df":"Data.info()","27688f4f":"data = Data.select_dtypes(exclude = 'object')\ndata","5b76b9da":"data.describe()","0cbcaec7":"sns.pairplot(data)","9b7357a4":"sns.heatmap(data.corr(), annot = True)","28d68ee2":"# Lets get the distribution with price\n\nsns.distplot(data['Price'])\n","145272a3":"# We can then split the data into a training set and testing set\n# Lets use random sampling\nfrom sklearn.model_selection import train_test_split","ec4425bc":"X = data[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n       'Avg. Area Number of Bedrooms', 'Area Population']]\ny = data['Price']","a18e29af":"X_train,X_test,y_train,y_test = train_test_split(X ,y , test_size = 0.2, random_state= 40)","88f98487":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","4386b95d":"pipeline = Pipeline([('std_scalar', StandardScaler())])\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","3f53ca8b":"reg_model = linear_model.LinearRegression()\nreg_model.fit(X_train,y_train)","78300b8f":"pred_val = reg_model.predict(X_test)\n# pred_val\nreg_model.score(X_train,y_train)","a9fce9c8":"plt.scatter(y_test,pred_val)","07209624":"We can then create an object for our linear regression model and fit it with the training set,  ","0166ca56":"# Split data to training and testing","6ae0e18e":"As we can notice the above data has no missing values and there are two data types, the float64 and object\nI will split the dataFrame, that is I will not consider Address for the model. \nLets also explore the stats and we check the distribution of thee data","ac104d1c":"# Lets visualise the data.","e6075e39":"Thus shown above the score of the model is 91%, we can then compare the y_test results with the predicted values","60d9f338":"We can see the distribution is normal, \nIt is not skwed either to the left or right. \nThis allows us not to transform pipeline as per below. \nUse piplines to scale data (Whenever our data is not normally distributed, \nwe use it to get normal distribution. You must have tried using distplots and found that the data is right or\nleft skewed. So it helps dealing with that.","d26acfe4":"# Correlation ","5595b1e9":"The below project, I will be applying the linear regression model to the given dataset.\nI aim to predict the housing prizess based on the income, house age, bedrooms and area population.","c535a152":"If you can pay close attention, the above plots gives as a relation on which each factor. \nThe above correlation matrix shows the Avg. Area Income has a strong\/highest correlation with Price, followed by Area\nHouse Age. The Area population has the least correlation","2c0746b6":"To get more on the data, notice how the max price is 2,4 million for a house with 6,5 bedrooms, 10,7 number\nof rooms on averange, house age  of 9,5 and avarage income of 107701.748378. The same goes for min, the count, min, std and more","eeb4f595":"# Housing Price Prediction","05955a94":"There are 5000 rows and 7 columns"}}