{"cell_type":{"33ddee8c":"code","0a8f6084":"code","44546242":"code","b94923cb":"code","8b8d4cd7":"code","67399ad7":"code","a94b7a1c":"code","92db1bb5":"code","315dd5cc":"code","55a2d59c":"code","b50fb94c":"code","6499913f":"markdown","cc965177":"markdown","fbd14e79":"markdown","31ed3413":"markdown","cc021a9b":"markdown","c95dd467":"markdown","40be4d48":"markdown","979125ba":"markdown","b49fc1a1":"markdown"},"source":{"33ddee8c":"from urllib.request import urlretrieve\nimport pandas as pd\nimport numpy as np\nimport json\nimport time\nfrom datetime import datetime, timezone\nfrom IPython.display import HTML, Video\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning) ","0a8f6084":"leaderboard_df = pd.read_csv(\"..\/input\/rpssanta20-leaderboard\/rps_leaderboard.csv\") \nleaderboard_temp = leaderboard_df[leaderboard_df['time']== leaderboard_df['time'].max()].reset_index(drop=True)","44546242":"leaderboard_df.head()","b94923cb":"### Reshape dataset\ndf = pd.DataFrame(columns=leaderboard_df['team_id'].sort_values().unique(), index=leaderboard_df['time'].sort_values().unique())\nfor t in leaderboard_df['time'].unique():\n    df.loc[t] = leaderboard_df[leaderboard_df['time'] == t].sort_values('team_id')['score'].tolist()\ndf = df.astype('float')\ndf = df.reset_index().rename(columns = {'index':'date'})","8b8d4cd7":"df.head()","67399ad7":"top = 250\ndf = df[['date'] + leaderboard_temp['team_id'][:top].tolist()]\ndf = df[df['date'] > 1612431713].reset_index(drop=True)","a94b7a1c":"def prepare_data(df, steps=10):\n    ### clean data\n    df['date'] = df['date'].apply(lambda x: datetime.fromtimestamp(x, tz=timezone.utc).strftime(\"%B %d, %Y %H:%M\"))\n    df = df.rename(columns = dict(zip(leaderboard_temp['team_id'], leaderboard_temp['team_name'])))\n    df = df.reset_index(drop = True)\n    \n    ### prepare for smooth animation\n    df.index = df.index * steps\n    last_idx = df.index[-1] + 1\n    df_expanded = df.reindex(range(last_idx))\n    df_expanded['date'] = df_expanded['date'].fillna(method = 'ffill')\n    df_expanded = df_expanded.set_index('date')\n    df_rank_expanded = df_expanded.rank(axis = 1, method = 'first')\n    df_expanded = df_expanded.interpolate()\n    df_rank_expanded = df_rank_expanded.interpolate()\n    return df_expanded, df_rank_expanded\n\ndf_expanded, df_rank_expanded = prepare_data(df)\ndf_expanded.head()","92db1bb5":"import matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n\n# plt.rcParams[\"mathtext.fontset\"] = \"cm\"\n\ncolors = plt.cm.tab20(range(20))","315dd5cc":"def nice_axes(ax):\n    ax.set_facecolor('.92')\n    ax.tick_params(labelsize=8, length=0)\n    # ax.grid(True, axis='x', color='white')\n    ax.set_axisbelow(True)\n    [spine.set_visible(False) for spine in ax.spines.values()]\n    \ndef init():\n    ax.clear()\n    nice_axes(ax)\n\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    for t in ax.texts:\n        t.set_visible(False)\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    labels = df_expanded.columns\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i] + ' UTC'\n    ax.set_title(date_str, fontsize=12)\n    ax.set_xlim(leaderboard_df['score'][50] - 100, max(leaderboard_df['score']) + 50)\n    ax.set_ylim(top - 50.5, top + 0.5)\n    for i, v in enumerate(width):\n        ax.text(v + 3, y[i] - 0.2, str(round(v,1)), fontsize = 6, clip_on=True)\n    if top > 13:\n        ax.axhline(top - 12.5, color=\"gold\")\n        ax.text(max(leaderboard_df['score']) - 10, top - 12.3, 'gold line', color = 'gold')\n    if top > 83:\n        ax.axhline(top - 82.5, color=\"silver\")\n        ax.text(1100, top - 82.3, 'silver line', color = 'silver')\n    if top > 166:\n        ax.axhline(top - 165.5, color=\"#a97142\")\n        ax.text(1100, top - 165.3, 'bronze line', color = '#a97142') \n        \nfig = plt.Figure(figsize=(8, 12), dpi = 111)\nax = fig.add_subplot()\n\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), \n                     interval=75, repeat=False, cache_frame_data = False)\n\nanim.save('gold.mp4')\nVideo(\".\/gold.mp4\", embed=True)","55a2d59c":"def update(i):\n    for bar in ax.containers:\n        bar.remove()\n    for t in ax.texts:\n        t.set_visible(False)\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    labels = df_expanded.columns\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i] + ' UTC'\n    ax.set_title(date_str, fontsize=12)\n    ax.set_xlim(leaderboard_df['score'][100] - 100, leaderboard_df['score'][50] + 50)\n    ax.set_ylim(top - 100.5, top - 50.5)\n    for i, v in enumerate(width):\n        ax.text(v + 3, y[i] - 0.2, str(round(v,1)), fontsize = 6, clip_on=True)\n    if top > 13:\n        ax.axhline(top - 12.5, color=\"gold\")\n        ax.text(1100, top - 12.3, 'gold line', color = 'gold')\n    if top > 83:\n        ax.axhline(top - 82.5, color=\"silver\")\n        ax.text(leaderboard_df['score'][50] + 10, top - 82.3, 'silver line', color = 'silver')\n    if top > 166:\n        ax.axhline(top - 165.5, color=\"#a97142\")\n        ax.text(960, top - 165.3, 'bronze line', color = '#a97142') \n        \nfig = plt.Figure(figsize=(8, 12), dpi = 111)\nax = fig.add_subplot()\n\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), \n                     interval=75, repeat=False, cache_frame_data = False)\n\nanim.save('silver.mp4')\nVideo(\".\/silver.mp4\", embed=True)","b50fb94c":"\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    for t in ax.texts:\n        t.set_visible(False)\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    labels = df_expanded.columns\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i] + ' UTC'\n    ax.set_title(date_str, fontsize=12)\n    ax.set_xlim(leaderboard_df['score'][190] - 50, leaderboard_df['score'][140] + 50)\n    ax.set_ylim(top - 190.5, top - 140.5)\n    for i, v in enumerate(width):\n        ax.text(v + 3, y[i] - 0.2, str(round(v,1)), fontsize = 6, clip_on=True)\n    if top > 13:\n        ax.axhline(top - 12.5, color=\"gold\")\n        ax.text(1100, top - 12.3, 'gold line', color = 'gold')\n    if top > 83:\n        ax.axhline(top - 82.5, color=\"silver\")\n        ax.text(1000, top - 82.3, 'silver line', color = 'silver')\n    if top > 166:\n        ax.axhline(top - 165.5, color=\"#a97142\")\n        ax.text(leaderboard_df['score'][140] + 10, top - 165.3, 'bronze line', color = '#a97142') \n        \nfig = plt.Figure(figsize=(8, 12), dpi = 111)\nax = fig.add_subplot()\n\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), \n                     interval=75, repeat=False, cache_frame_data = False)\n\nanim.save('bronze.mp4')\nVideo(\".\/bronze.mp4\", embed=True)","6499913f":"<h2><center> <img src=\"https:\/\/media.giphy.com\/media\/6Z3D5t31ZdoNW\/giphy.gif\" alt=\"Run img\"><\/center><\/h2>\n","cc965177":"**Version 20**: added individual animation for gold, silver and bronze battlegrounds\n\n**Version 23**: data I collected before Feb 4th, 2021 has too much gap so I filtered them. Now data range is from Feb 4th, 2021 and the frequency is 2 hours\n\n**Version 28**: animation to jshtml has duration limitation so I switched to .mp4 video\n\n**Version 45**: improved the runtime by sacrificing animation smoothness ","fbd14e79":"## Updates","31ed3413":"<h2 style=\"color:silver\">SILVER ZONE BATTLEGROUNDS<\/h2>.","cc021a9b":"## About this Notebook","c95dd467":"<h2 style=\"color:gold\">GOLD ZONE BATTLEGROUNDS<\/h2>.","40be4d48":"<h2 style=\"color:#a97142\">BRONZE ZONE BATTLEGROUNDS<\/h2>.","979125ba":"<h2><center> RPS - Leaderboard Race Animation <\/center><\/h2>","b49fc1a1":"The purpose of this notebook is just for fun :D\n\nThe coding is inspired by this [article](https:\/\/www.dunderdata.com\/blog\/create-a-bar-chart-race-animation-in-python-with-matplotlib).\n\nI'll keep updating this notebook."}}