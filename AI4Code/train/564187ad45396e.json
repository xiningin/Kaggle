{"cell_type":{"d48cd238":"code","c2349b32":"code","f8a68139":"code","98aa72a4":"code","8b75ec67":"code","ef334bd9":"code","32477207":"code","e384800d":"code","444fab98":"code","18161c0f":"code","bafc4bc6":"code","9aadd162":"code","f84315bc":"code","27888f48":"code","a0eb40ab":"code","daeb7dd1":"code","fa433557":"code","ed48610f":"code","324b70ac":"code","02378ef9":"code","4eb5d884":"code","c1dbc55a":"code","70856a7b":"code","ad0b9c42":"code","c9f83264":"code","2ec883ac":"code","9dac72ed":"markdown","d02868e6":"markdown","fc5206e1":"markdown","1d4c3b5f":"markdown","b252d425":"markdown","b10dc110":"markdown","1548f5d3":"markdown","29ae42eb":"markdown","ad5bb7a5":"markdown","fd31ed88":"markdown"},"source":{"d48cd238":"import tensorflow as tf\ntf.enable_eager_execution()\n\nimport numpy as np\nimport os\nimport time","c2349b32":"# path_to_file = tf.keras.utils.get_file('..\/input\/shakespeare.txt', 'https:\/\/storage.googleapis.com\/download.tensorflow.org\/data\/shakespeare.txt')\n# Read, then decode for py2 compat.\npath_to_file = '..\/input\/Shakespeare'\ntext = open(path_to_file, 'rb').read().decode(encoding='utf-8')\n# length of text is the number of characters in it\nprint ('Length of text: {} characters'.format(len(text)))\n# length of text is the number of characters in it\nprint(text[:250])\n# The unique characters in the file\nvocab = sorted(set(text))\nprint ('{} unique characters'.format(len(vocab)))","f8a68139":"# Creating a mapping from unique characters to indices\nchar2idx = {u:i for i, u in enumerate(vocab)}\nidx2char = np.array(vocab)\n\ntext_as_int = np.array([char2idx[c] for c in text])","98aa72a4":"print('{')\nfor char,_ in zip(char2idx, range(10)):\n    print('  {:4s}: {:3d},'.format(repr(char), char2idx[char]))\nprint('  ...\\n}')","8b75ec67":"# Show how the first 13 characters from the text are mapped to integers\nprint ('{} ---- characters mapped to int ---- > {}'.format(repr(text[:13]), text_as_int[:13]))","ef334bd9":"# The maximum length sentence we want for a single input in characters\nseq_length = 100\nexamples_per_epoch = len(text)\/\/seq_length\nchar_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)\n\nfor i in char_dataset.take(5):\n    print(idx2char[i.numpy()])\n    \nsequences = char_dataset.batch(seq_length+1, drop_remainder=True)\n\nfor item in sequences.take(5):\n    print(\"Batch:\", repr(''.join(idx2char[item.numpy()])))","32477207":"def split_input_target(chunk):\n    input_text = chunk[:-1]\n    target_text = chunk[1:]\n    return input_text, target_text","e384800d":"dataset = sequences.map(split_input_target)\nfor input_example, target_example in  dataset.take(1):\n    print ('Input data: ', repr(''.join(idx2char[input_example.numpy()])))\n    print ('Target data:', repr(''.join(idx2char[target_example.numpy()])))\n    print(\"*\"*20)\n\nfor i, (input_idx, target_idx) in enumerate(zip(input_example[:5], target_example[:5])):\n    print(\"Step {:4d}\".format(i))\n    print(\"  input: {} ({:s})\".format(input_idx, repr(idx2char[input_idx])))\n    print(\"  expected output: {} ({:s})\".format(target_idx, repr(idx2char[target_idx])))\n    ","444fab98":"# Batch size\nBATCH_SIZE = 64\nsteps_per_epoch = examples_per_epoch\/\/BATCH_SIZE\n\n# Buffer size to shuffle the dataset\n# (TF data is designed to work with possibly infinite sequences,\n# so it doesn't attempt to shuffle the entire sequence in memory. Instead,\n# it maintains a buffer in which it shuffles elements).\nBUFFER_SIZE = 10000\n\ndataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)\ndataset","18161c0f":"vocab_size = len(vocab)\n\n# The embedding dimension\nembedding_dim = 256\n\n# Number of RNN units\nrnn_units = 1024","bafc4bc6":"if tf.test.is_gpu_available():\n    rnn = tf.keras.layers.CuDNNGRU\nelse:\n    import functools\n    rnn = functools.partial(\n        tf.keras.layers.GRU, recurrent_activation='sigmoid')","9aadd162":"def build_model(vocab_size, embedding_dim, rnn_units, batch_size):\n    embed = tf.keras.layers.Embedding(vocab_size, embedding_dim, batch_input_shape=[batch_size, None])\n    model = tf.keras.Sequential(\n    [ \n        embed, \n        rnn(rnn_units, return_sequences=True, recurrent_initializer='glorot_uniform', stateful=True),\n        tf.keras.layers.Dense(vocab_size)\n    ])\n    return model","f84315bc":"model = build_model(\n  vocab_size = len(vocab),\n  embedding_dim=embedding_dim,\n  rnn_units=rnn_units,\n  batch_size=BATCH_SIZE)","27888f48":"for input_example_batch, target_example_batch in dataset.take(1):\n    example_batch_predictions = model(input_example_batch)\n    print(example_batch_predictions.shape, \"# (batch_size, sequence_length, vocab_size)\")","a0eb40ab":"model.summary()\n","daeb7dd1":"sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)\nsampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()\nsampled_indices\n","fa433557":"print(\"Input: \\n\", repr(\"\".join(idx2char[input_example_batch[0]])))\nprint(\"Next Char Predictions: \\n\", repr(\"\".join(idx2char[sampled_indices ])))","ed48610f":"def loss(labels, logits):\n    return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)\n\nexample_batch_loss  = loss(target_example_batch, example_batch_predictions)\nprint(\"Prediction shape: \", example_batch_predictions.shape, \" # (batch_size, sequence_length, vocab_size)\")\nprint(\"scalar_loss:      \", example_batch_loss.numpy().mean())","324b70ac":"model.compile(\n    optimizer = tf.train.AdamOptimizer(),\n    loss = loss)","02378ef9":"checkpoint_dir = '.\/training_checkpoints'\n# Name of the checkpoint files\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")\n\ncheckpoint_callback=tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_prefix,\n        save_weights_only=True)\n","4eb5d884":"EPOCHS=3\n\nhistory = model.fit(dataset.repeat(), epochs=EPOCHS, steps_per_epoch=steps_per_epoch, callbacks=[checkpoint_callback])\n","c1dbc55a":"tf.train.latest_checkpoint(checkpoint_dir)","70856a7b":"model = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)\n\nmodel.load_weights(tf.train.latest_checkpoint(checkpoint_dir))\n\nmodel.build(tf.TensorShape([1, None]))","ad0b9c42":"model.summary()\n","c9f83264":"def generate_text(model, start_string):\n    # Evaluation step (generating text using the learned model)\n\n    # Number of characters to generate\n    num_generate = 1000\n\n    # Converting our start string to numbers (vectorizing)\n    input_eval = [char2idx[s] for s in start_string]\n    input_eval = tf.expand_dims(input_eval, 0)\n\n    # Empty string to store our results\n    text_generated = []\n\n    # Low temperatures results in more predictable text.\n    # Higher temperatures results in more surprising text.\n    # Experiment to find the best setting.\n    temperature = 1.0\n\n    # Here batch size == 1\n    model.reset_states()\n    for i in range(num_generate):\n#         print(len(input_eval))\n        predictions = model(input_eval)\n        # remove the batch dimension\n        predictions = tf.squeeze(predictions, 0)\n#         print(predictions)\n        # using a multinomial distribution to predict the word returned by the model\n        predictions = predictions \/ temperature\n        predicted_id = tf.multinomial(predictions, num_samples=1)[-1,0].numpy()\n#         print(idx2char[predicted_id])\n        # We pass the predicted word as the next input to the model\n        # along with the previous hidden state\n        input_eval = tf.expand_dims([predicted_id], 0)\n\n        text_generated.append(idx2char[predicted_id])\n\n    return (start_string + ''.join(text_generated))","2ec883ac":"print(generate_text(model, start_string=u\"ROMEO: \"))\n","9dac72ed":"Next define a function to build the model.\n\nUse CuDNNGRU if running on GPU.","d02868e6":"For each character the model looks up the embedding, runs the GRU one timestep with the embedding as input, and applies the dense layer to generate logits predicting the log-likelihood of the next character:\n\n![Model](https:\/\/tensorflow.org\/tutorials\/sequences\/images\/text_generation_training.png)","fc5206e1":"## The prediction task\n\nGiven a character, or a sequence of characters, what is the most probable next character? This is the task we're training the model to perform. The input to the model will be a sequence of characters, and we train the model to predict the output\u2014the following character at each time step.\n\nSince RNNs maintain an internal state that depends on the previously seen elements, given all the characters computed until this moment, what is the next character?\n\n**Create training examples and targets**\n\nNext divide the text into example sequences. Each input sequence will contain seq_length characters from the text.\n\nFor each input sequence, the corresponding targets contain the same length of text, except shifted one character to the right.\n\nSo break the text into chunks of seq_length+1. For example, say seq_length is 4 and our text is \"Hello\". The input sequence would be \"Hell\", and the target sequence \"ello\".\n\nTo do this first use the tf.data.Dataset.from_tensor_slices function to convert the text vector into a stream of character indices.","1d4c3b5f":"## Train the model\n\nAt this point the problem can be treated as a standard classification problem. Given the previous RNN state, and the input this time step, predict the class of the next character.\n\n**Attach an optimizer, and a loss function**\n\nThe standard tf.keras.losses.sparse_softmax_crossentropy loss function works in this case because it is applied across the last dimension of the predictions.\n\nBecause our model returns logits, we need to set the from_logits flag.","b252d425":"**Text Ex:**\nQUEENE:\nI had thought thou hadst a Roman; for the oracle,\nThus by All bids the man against the word,\nWhich are so weak of care, by old care done;\nYour children were in your holy love,\nAnd the precipitation through the bleeding throne.\n\nBISHOP OF ELY:\nMarry, and will, my lord, to weep in such a one were prettiest;\nYet now I was adopted heir\nOf the world's lamentable day,\nTo watch the next way with his father with his face?****\n# ____________________\n\nWhile some of the sentences are grammatical, most do not make sense. The model has not learned the meaning of words, but consider:\n\n* The model is character-based. When training started, the model did not know how to spell an English word, or that words were even a unit of text.\n* The structure of the output resembles a play\u2014blocks of text generally begin with a speaker name, in all capital letters similar to the dataset.\n* As demonstrated below, the model is trained on small batches of text (100 characters each), and is still able to generate a longer sequence of text with coherent structure.","b10dc110":"## **Process the text**\n**Vectorize the text**\n\nBefore training, we need to map strings to a numerical representation. Create two lookup tables: one mapping characters to numbers, and another for numbers to characters.","1548f5d3":"\nThis tutorial demonstrates how to generate text using a character-based RNN. We will work with a dataset of Shakespeare's writing from Andrej Karpathy's The Unreasonable Effectiveness of Recurrent Neural Networks. Given a sequence of characters from this data (\"Shakespear\"), train a model to predict the next character in the sequence (\"e\"). Longer sequences of text can be generated by calling the model repeatedly.\n\nThis tutorial includes runnable code implemented using tf.keras and eager execution. The following is sample output when the model in this tutorial trained for 30 epochs, and started with the string \"Q\":","29ae42eb":"Download the Shakespeare dataset\nhttps:\/\/storage.googleapis.com\/download.tensorflow.org\/data\/shakespeare.txt","ad5bb7a5":"## Build The Model\n\nUse tf.keras.Sequential to define the model. For this simple example three layers are used to define our model:\n\ntf.keras.layers.Embedding: The input layer. A trainable lookup table that will map the numbers of each character to a vector with embedding_dim dimensions;\n\ntf.keras.layers.GRU: A type of RNN with size units=rnn_units (You can also use a LSTM layer here.)\n\ntf.keras.layers.Dense: The output layer, with vocab_size outputs.","fd31ed88":"Each index of these vectors are processed as one time step. For the input at time step 0, the model receives the index for \"F\" and tries to predict the index for \"i\" as the next character. At the next timestep, it does the same thing but the RNN considers the previous step context in addition to the current input character."}}