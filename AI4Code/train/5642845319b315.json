{"cell_type":{"7a111601":"code","66fe4687":"code","af413c7e":"code","e41290e1":"code","09c7d0a1":"code","f8a994f9":"code","21ac03bb":"code","60638d34":"code","9e436cef":"code","f575781a":"code","e2e773fd":"code","d5095db5":"code","5112247d":"code","c877833e":"code","adb09ffc":"code","f674cf2e":"code","10d6d28d":"code","e129f0de":"code","280af3e8":"code","1ef5f662":"code","88b5aeee":"code","bdfca436":"code","581ae15a":"code","7bf6fe9e":"code","2371bea9":"code","da3bf24b":"code","dd2fc349":"code","0a3f7945":"code","33601dc5":"code","3f11afd0":"code","8ca96492":"code","0cb7180d":"code","fc75d659":"code","8550de3b":"code","bd3d9106":"code","8d01039a":"code","12b688f2":"code","6797da94":"code","d6b77025":"code","fa39a9c2":"code","c6665ffb":"code","81aa6d04":"code","b6d80dbd":"code","74507738":"code","0aee2c18":"code","36f127c0":"code","cd2bdfd0":"code","70ce4520":"code","a49c768d":"code","57ea87e9":"code","520f2cec":"code","d84f5fca":"code","6718bc55":"code","381ddd18":"code","ca8f67ac":"code","dfc245c5":"code","e992b884":"markdown","b2a659c4":"markdown","79f433de":"markdown","39287ed0":"markdown","0f6e82de":"markdown","0fe14019":"markdown","afcb68d2":"markdown","9b9fe25f":"markdown","d6645872":"markdown","2da5d8d8":"markdown","5590f972":"markdown","103ead43":"markdown","fed70299":"markdown","7295fe28":"markdown","d258a591":"markdown","3fbe2c31":"markdown","55836123":"markdown","90563460":"markdown","ca60fc67":"markdown","bab544db":"markdown","b8a1d443":"markdown","a609cf9c":"markdown","fb72f2c1":"markdown","90001716":"markdown","d9112c62":"markdown","62b2dcb8":"markdown"},"source":{"7a111601":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom fastai.vision import *\nimport fastai\nfrom fastai.metrics import *\nfrom fastai import *\nfrom os import *\nimport seaborn as sns\nfrom sklearn.metrics import auc,roc_curve,accuracy_score, roc_auc_score\nimport matplotlib.patches as patches\nimport matplotlib.pyplot as plt\nimport random\nnp.random.seed(42)\nfrom glob import glob \n%matplotlib inline","66fe4687":"model_path='.'\npath='\/kaggle\/input\/histopathologic-cancer-detection\/'\ntrain_folder=f'{path}train'\ntest_folder=f'{path}test'\ntrain_lbl=f'{path}train_labels.csv'\n\nbs=64\nnum_workers=None \nsz=96","af413c7e":"# Programming framework behind the scenes of NVIDIA GPU is CUDA\nprint(torch.cuda.is_available())\n# Check if gpu is enabled\nprint(torch.backends.cudnn.enabled)","e41290e1":"df_train = pd.read_csv(train_lbl)\nprint(f'Number of labels {len(df_train)}')","09c7d0a1":"# Proportion of classes \ndf_train['label'].value_counts(normalize=True)","f8a994f9":"sns.countplot(x='label',data=df_train)","21ac03bb":"cancer_cell = df_train[df_train['label']==1].head()\ncancer_cell","60638d34":"non_cancer_cell = df_train[df_train['label']==0].head()\nnon_cancer_cell","9e436cef":"plt.subplot(1 , 2 , 1)\nimg = np.asarray(plt.imread(train_folder+'\/'+cancer_cell.iloc[1][0]+'.tif'))\nplt.title('METASTATIC CELL TISSUE')\nplt.imshow(img)\n\nplt.subplot(1 , 2 , 2)\nimg = np.asarray(plt.imread(train_folder+'\/'+ non_cancer_cell.iloc[1][0]+'.tif'))\nplt.title('NON-METASTATIC CELL TISSUE')\nplt.imshow(img)\n\nplt.show()","f575781a":"list = os.listdir(test_folder) # dir is your directory path\nlen(list)","e2e773fd":"list = os.listdir(train_folder) # dir is your directory path\nlen(list)","d5095db5":"tfms = get_transforms(do_flip=True, flip_vert=True, max_rotate=.0, max_zoom=1.1,max_lighting=0.05, max_warp=0.)","5112247d":"data = ImageDataBunch.from_csv(path,folder='train',valid_pct=0.3,csv_labels=train_lbl,ds_tfms=tfms, size=90, suffix='.tif',test=test_folder,bs=64)","c877833e":"data.classes","adb09ffc":"print(data.c, len(data.train_ds), len(data.valid_ds))","f674cf2e":"stats=data.batch_stats()        \ndata.normalize(stats)\n#data.normalize(imagenet_stats)","10d6d28d":"#See the classes and labels\ndata.show_batch(rows=3, figsize=(8,5))","e129f0de":"model_dir = \"\/kaggle\/working\/tmp\/models\/\"\nos.makedirs('\/kaggle\/working\/tmp\/models\/')","280af3e8":"#fastai comes with various models\ndir(fastai.vision.models)","1ef5f662":"#create learner object by passing data bunch, specifying model architecture and metrics to use to evaluate training stats\nlearner_resnet50 = cnn_learner(data=data, base_arch=models.resnet50,model_dir=model_dir, metrics=[accuracy,error_rate], ps=0.5) #densenet201","88b5aeee":"lr_find(learner_resnet50)","bdfca436":"learner_resnet50.recorder.plot()","581ae15a":"defaults.device = torch.device('cuda') # makes sure the gpu is used","7bf6fe9e":"learner_resnet50.fit_one_cycle(1, 1e-02)","2371bea9":"learner_resnet50.recorder.plot(return_fig=True)","da3bf24b":"#See how the learning rate and momentum varies with the training and losses\nlearner_resnet50.recorder.plot_lr(show_moms=True)","dd2fc349":"learner_resnet50.recorder.plot_losses(show_grid=True)","0a3f7945":"learner_resnet50.show_results(alpha=1)","33601dc5":"#save weights in a file\nlearner_resnet50.save('stage-1',return_path=True)","3f11afd0":"#Unfreeze the encoder resnet\nlearner_resnet50.unfreeze()","8ca96492":"lr_find(learner_resnet50)\nlearner_resnet50.recorder.plot()","0cb7180d":"#slice suggests is, train the initial layers at start value specified and last layer at the end value specified and interpolate for the rest of the layers\nlearner_resnet50.fit_one_cycle(1,slice(1e-06,1e-05),pct_start=0.8)","fc75d659":"learner_resnet50.recorder.plot_losses()","8550de3b":"learner_resnet50.save('stage-2',return_path=True)","bd3d9106":"#create interpreter object\ninterp = ClassificationInterpretation.from_learner(learner_resnet50)","8d01039a":"#Plot the biggest losses of the model\ninterp.plot_top_losses(9,figsize=(12,12),heatmap=False)","12b688f2":"losses,idxs = interp.top_losses()\nlen(data.valid_ds)==len(losses)==len(idxs)","6797da94":"interp.plot_confusion_matrix(figsize=(15,5))","d6b77025":"#To view the list of classes most misclassified as a list\n#Sorted descending list of largest non-diagonal entries of confusion matrix, presented as actual, predicted, number of occurrences\ninterp.most_confused(min_val=2)","fa39a9c2":"pred_val ,y_val = learner_resnet50.get_preds()\n\ndef auc_score(y_pred,y_true,tens=True):\n    score=roc_auc_score(y_true,torch.sigmoid(y_pred)[:,1])\n    if tens:\n        score=tensor(score)\n    else:\n        score=score\n    return score\n\npred_score=auc_score(pred_val ,y_val)\npred_score","c6665ffb":"pred_score_acc=accuracy(pred_val ,y_val)\npred_score_acc","81aa6d04":"fpr, tpr, thresholds = roc_curve(y_val.numpy(), pred_val.numpy()[:,1], pos_label=1)\npred_score_auc = auc(fpr, tpr)\nprint(f'ROC area: {pred_score_auc}')","b6d80dbd":"plt.figure()\nplt.plot(fpr, tpr, color='orange', label='ROC curve (area = %0.2f)' % pred_score_auc)\nplt.plot([0, 1], [0, 1], color='navy', linestyle='--')\nplt.xlim([-0.01, 1.0])\nplt.ylim([0.0, 1.01])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")","74507738":"learner_resnet50.export('\/kaggle\/working\/tmp\/models\/export.pkl')","0aee2c18":"loaded_learner = load_learner(Path(model_dir))\nloaded_learner.data.classes","36f127c0":"img, cat = data.train_ds[0]\nimg.show()\nprint(cat)","cd2bdfd0":"pred_class,pred_idx,pred_probs = loaded_learner.predict(img)\nprint(pred_class, pred_idx,pred_probs)","70ce4520":"img, cat = data.valid_ds[1]\nimg.show()\nprint(cat)","a49c768d":"pred_class,pred_idx,pred_probs = loaded_learner.predict(img)\nprint(pred_class, pred_idx,pred_probs)","57ea87e9":"img = open_image(Path('..\/input\/test-image\/test_img.tif'))\npred_class,pred_idx,pred_probs = loaded_learner.predict(img)\nimg.show()\ntargets = ['Non-Cancerous','Cancerous'] #since sequence of classes in data is as 0,1\nprint(\"Tissue cell is identified as\" , targets[pred_idx] , \"with probability of\", float(pred_probs[pred_idx]*100))","520f2cec":"loaded_learner_val = load_learner(Path(model_dir),test=ImageList.from_folder(Path(test_folder)))","d84f5fca":"pred_test ,y_test = loaded_learner_val.get_preds(ds_type=DatasetType.Test)","6718bc55":"sub=pd.read_csv('..\/input\/histopathologic-cancer-detection\/sample_submission.csv').set_index('id')","381ddd18":"clean_names = np.vectorize(lambda imgname: str(imgname).split('\/')[-1][:-4])\ncleaned_names = clean_names(data.test_ds.items).astype(str)","ca8f67ac":"sub.loc[cleaned_names,'label']=pred_test.numpy()[:,1]\nsub.to_csv(f'\/kaggle\/working\/submission_{int(pred_score_auc*100)}auc.csv')","dfc245c5":"predicted_prob_test = pd.read_csv('.\/submission_98auc.csv')\npredicted_prob_test.head(10)","e992b884":"## RoadMap\n- Import Libraries\n- Check GPU\n- EDA\n- Model Building\n- Model Improvement\n- Model Validation\n- Submission","b2a659c4":"### Transfer learning\n- Allows you to train nets with 1\/100th less time using 1\/100 less data.","79f433de":"## Check GPU ","39287ed0":"### Feel free to share doubts, feedbacks or concerns. Also, fuel some motivation by upvoting if notebook has enhanced your learning. \n\n<b> Happy Learning! \n","0f6e82de":"# EDA","0fe14019":"#### Prediction using saved model on testing single image","afcb68d2":"#### AUC SCORE","9b9fe25f":"#### ACCURACY","d6645872":"#### Prediction using saved model on testing data for submission purpose","2da5d8d8":"#### Predict on train data","5590f972":"### Analyze cancer and non-cancer cell","103ead43":"#### Prediction using saved model on training and validation images","fed70299":"## Model Improvement\n- Generally, when you call fit_one_cycle it only trains the last or last few layers. To improve this better, you need to call learn.unfreeze() to unfreeze the model and train it again.","7295fe28":"### Create DataBunch object","d258a591":"## Model Validation\n    - Plot top losses images\n    - Confusion Matrix\n    - Validate across validation set by auc_score and accuracy\n    - Plot roc_curve","3fbe2c31":"#### Create Learning Classifier","55836123":"## Predictions\n    - Export the final learner object for productionizing\n    - Prediction using above saved model on:\n        - Train and validation images\n        - Uploaded single image\n        - Test images        ","90563460":"## Model Building\n- Model Training requires the objects of DataBunch and Learner","ca60fc67":"#### Classifier Training","bab544db":"### Data Augmentation","b8a1d443":"### Data Preprocesing (Normalization)","a609cf9c":"#### ROC CURVE","fb72f2c1":"### Model Training\n- Model Training requires DataBunch object and learner","90001716":"# Histopathological Cancer Detection ","d9112c62":"## Submission","62b2dcb8":"#### Predict on validation data"}}