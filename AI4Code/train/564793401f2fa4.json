{"cell_type":{"e541e3b1":"code","9361a579":"code","29af3b8f":"code","72009488":"code","cc2217ca":"code","d27973be":"code","289cda62":"code","010b6693":"code","e17c144d":"code","d9da08f8":"code","940f5f13":"markdown","a2166009":"markdown"},"source":{"e541e3b1":"import os\n\n# The Google Cloud Notebook product has specific requirements\nIS_GOOGLE_CLOUD_NOTEBOOK = os.path.exists(\"\/opt\/deeplearning\/metadata\/env_version\")\n\n# Google Cloud Notebook requires dependencies to be installed with '--user'\nUSER_FLAG = \"\"\nif IS_GOOGLE_CLOUD_NOTEBOOK:\n    USER_FLAG = \"--user\"\n\n! pip3 install {USER_FLAG} -qU google-cloud-aiplatform","9361a579":"import os\n\nif not os.getenv(\"IS_TESTING\"):\n    # Restart the kernel after pip3 installs\n    import IPython\n\n    app = IPython.Application.instance()\n    app.kernel.do_shutdown(True)","29af3b8f":"# Authenticate Kaggle with gcloud\nimport sys\nif \"kaggle_secrets\" in sys.modules:\n    from kaggle_secrets import UserSecretsClient\n    UserSecretsClient().set_gcloud_credentials()","72009488":"# Need to replace key-file with service account key-file (shouldn't be needed for user accounts)\nimport json\nfrom kaggle_secrets import UserSecretsClient\n\nuser_secrets = UserSecretsClient()\nsecret = json.loads(user_secrets.get_secret(\"kaggle\"))\n\nwith open('\/root\/gcloud_credential.json', 'w', encoding='utf-8') as f:\n    json.dump(secret, f, ensure_ascii=False, indent=4)","cc2217ca":"import datetime\nimport json\nfrom google.cloud import aiplatform_v1beta1\n\n# Fill in your project ID and region\nREGION = \"us-central1\"\nPROJECT_ID = \"[your-project-id]\"\n\n! gcloud config set project $PROJECT_ID\n\n\n# These will be automatically filled in\nSTUDY_DISPLAY_NAME = \"{}_study_{}\".format(\n    PROJECT_ID.replace(\"-\", \"\"), datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n)\nENDPOINT = REGION + \"-aiplatform.googleapis.com\"\nPARENT = \"projects\/{}\/locations\/{}\".format(PROJECT_ID, REGION)","d27973be":"# We'll test Vizier on the Rosenbrock function\nfrom scipy.optimize import rosen\n\ndef metric_y_evaluation(x1, x2):\n    y = rosen([x1, x2])\n    return {\"metric_id\": \"y\", \"value\": y}","289cda62":"# Define hyperparameter study\nparam_x1 = {\n    'parameter_id': 'x1',\n    'double_value_spec': {\n        'min_value': -1.25,\n        'max_value': 1.25\n    }\n}\n\nparam_x2 = {\n    'parameter_id': 'x2',\n    'double_value_spec': {\n        'min_value': -1.25,\n        'max_value': 1.25\n    }\n}\n\nmetric_y = {\n    'metric_id': 'y',\n    'goal': 'MINIMIZE'\n}\n\nstudy = {\n    'display_name': STUDY_DISPLAY_NAME,\n    'study_spec': {\n      'parameters': [param_x1, param_x2],\n      'metrics': [metric_y],\n    }\n}\n\nvizier_client = aiplatform_v1beta1.VizierServiceClient(\n    client_options=dict(api_endpoint=ENDPOINT)\n)\nstudy = vizier_client.create_study(parent=PARENT, study=study)\nSTUDY_ID = study.name","010b6693":"# Run the study\n\nclient_id = \"client_1\"  # rerun with the same client name to resume a study\nrequests = 20\nsuggestions_per_request = 4  # >1 for parallel optimization\n\nfor k in range(requests):\n    suggest_response = vizier_client.suggest_trials(\n        {\n            \"parent\": STUDY_ID,\n            \"suggestion_count\": suggestions_per_request,\n            \"client_id\": client_id,\n        }\n    )\n    print(f\"Request {k}\")\n    for suggested_trial in suggest_response.result().trials:\n        suggested_params = suggested_trial.parameters\n        x1 = suggested_params[0].value\n        x2 = suggested_params[1].value\n        y = metric_y_evaluation(x1, x2)\n        print(f\"Trial Results x1={x1:.4f}, x2={x2:.4f}, y={y['value']:.4f}\")\n    \n        vizier_client.add_trial_measurement({\n        'trial_name': suggested_trial.name,\n        'measurement': {\n            'metrics': [y]\n            }\n        })\n\n        response = vizier_client.complete_trial(\n            {\"name\": suggested_trial.name, \"trial_infeasible\": False}\n        )","e17c144d":"optimal_trial = vizier_client.list_optimal_trials({\n    \"parent\": STUDY_ID\n}).optimal_trials[0]\n\noptimal_parameters = {\n    param.parameter_id: param.value\n    for param in optimal_trial.parameters\n}\noptimal_metrics = {\n    metric.metric_id: metric.value\n    for metric in optimal_trial.final_measurement.metrics\n}\n\nprint(optimal_parameters)\nprint(optimal_metrics)","d9da08f8":"vizier_client.delete_study({\"name\": STUDY_ID})","940f5f13":"# Vertex Config #","a2166009":"# Setup Vizier #"}}