{"cell_type":{"8473e04d":"code","7e30ffc2":"code","1186a33b":"code","dd75b992":"code","bfcb8dba":"code","2e16fab0":"code","3ce14da1":"markdown","45a44e90":"markdown","72fb9188":"markdown","2a6bd621":"markdown","224a9e3c":"markdown","f8fb0462":"markdown","b7fb4c63":"markdown"},"source":{"8473e04d":"!pip install torchRDS","7e30ffc2":"from torchRDS.RDS import RDS\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","1186a33b":"class LR:\n    def run(self, state, action):\n        data_x, data_y = state\n        train_x, train_y, test_x = data_x[action == 1], data_y[action == 1, 1], data_x[action == 0]\n        \n        clf = LogisticRegression(solver='liblinear')\n        clf.fit(train_x, train_y)\n        return clf.predict_proba(test_x)\n    \nclass KNN:\n    def run(self, state, action):   \n        data_x, data_y = state\n        train_x, train_y, test_x = data_x[action == 1], data_y[action == 1, 1], data_x[action == 0]\n\n        clf = KNeighborsClassifier(n_neighbors=3)\n        clf.fit(train_x, train_y)\n\n        return clf.predict_proba(test_x)\n\nclass RF:\n    def run(self, state, action):   \n        data_x, data_y = state\n        train_x, train_y, test_x = data_x[action == 1], data_y[action == 1, 1], data_x[action == 0]\n\n        clf = RandomForestClassifier(n_estimators=16, bootstrap=False, n_jobs=-1)\n        clf.fit(train_x, train_y)\n\n        return clf.predict_proba(test_x)","dd75b992":"trainer = RDS(data_file=\"..\/input\/dccc-dataset\/default_of_credit_card_clients.csv\", target=[0], task=\"classification\", measure=\"auc\", \n              models=[LR(), KNN(), RF()], learn=\"deterministic\", ratio=0.6, delta=0.02, weight_iid=0.1, iters=100, device=\"cuda\")","bfcb8dba":"sample = trainer.train()","2e16fab0":"print(\"Number of observations in the trainning set:\", sum(sample))\nprint(\"Number of observations in the test set:\", len(sample) - sum(sample))","3ce14da1":"# 3. Setup RDS","45a44e90":"# 4. Run RDS","72fb9188":"**This notebook serves as a demonstration for Reinforced Data Sampling (RDS).**\n\nRDS provides a method to learn how to sample data effectively on the search for useful models and meaningful insights. By employing diverse base learners such as neural networks, decision trees, or support vector machines, it aims to maximize the learning potentials and optimum allocation of data sampling to disentangle dataset shift and evidence ambiguity. In the hope of saving a massive amount of computational resources and time, we design RDS as a viable alternative to simple randomization and stratification in train_test_split for various machine learning tasks such as classification and regression.\n\nThe Default of Credit Card Clients (DCCC) Data Set is only used for illustrative purposes.\n\nhttps:\/\/github.com\/probeu\/RDS\n","2a6bd621":"Parameters:\n* data_file: *path to your csv file*\n* target: *indexes of your output columns*\n* task: *classification or regression*\n* measure: *auc, cross_entropy, mse, f1_micro, r2*\n* models: *initialized base models*\n* learn: *deterministic or stochastic*\n* ratio: *sampling ratio*\n* delta: *acceptable allocation error (e.g., 0.02 = +- 2% from the sampling ratio)*\n* weight_iid: *weight factor to ensure the same distribution of classes in both the training and test sets*\n* iters: *iterations to run*\n* device: *cuda or cpu*","224a9e3c":" # 1. Load Libraries","f8fb0462":"# 2. Preparing Base Models","b7fb4c63":"# 5. Selection Results"}}