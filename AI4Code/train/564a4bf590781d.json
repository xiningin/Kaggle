{"cell_type":{"2b4d0c8a":"code","68408cd4":"code","dbc52224":"code","56489af3":"code","7b53f83f":"code","c8513616":"code","f7a00887":"code","1938788a":"code","59b6b965":"code","78e4eb8f":"code","28130f58":"code","22477848":"code","62bc1ae4":"code","5c359fd0":"code","307db6e2":"code","11b4e446":"code","79041505":"code","8806e02d":"code","9f000367":"code","7b4a1ab8":"markdown","9b61625c":"markdown","7f0d41ad":"markdown","e34522ab":"markdown","4ed55d7b":"markdown","8f755c31":"markdown","64536aa8":"markdown"},"source":{"2b4d0c8a":"#Import Numpy to perform mathematical computations over nd-arrays\nimport numpy as np\n\n#Import Pandas to prepare the data for analysis\nimport pandas as pd\n#Import is_string_dtype() method to check if an attribute \/ feature consists of string values or not\nfrom pandas.api.types import is_string_dtype\n\n#Import XGBoost to train the model\nfrom xgboost import XGBRegressor\n\n#Import train_test_split() method from Sk-learn to split the dataframe into training and validation sets\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, StratifiedKFold\nfrom scipy.stats import randint, uniform\n\n#Import Matplotlib for visualisation of Insights\nimport matplotlib.pyplot as plt\n#Import Seaborn for data visualisation\nimport seaborn as sns\nsns.set()\n\n#Ignore the warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#Set the random seed to a particular state\nseed=50\nnp.random.seed(seed)\n\n#The svg format provides sharp visualisations\n%config InlineBackend.figure_format = 'svg'","68408cd4":"#Import data into a data frame\ndata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n#Import test data into a data frame\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nactual_y = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv').SalePrice\n#Save Id(s) of test data for later submission\nId = test.Id\n\n#Select columns for X\ncols = data.columns\n#Drop the target label (SalePrice)\ncols=cols.drop('SalePrice')\n\ndata.info()","dbc52224":"#Drop down data instances whose Sale Price is not defined\ndata = data[data.SalePrice.notnull()]\n\ncols=cols.drop(['Alley','PoolQC','MiscFeature'])\n\n#Display 1st five instances of data\ndata.head()","56489af3":"#Seperate categorical from numerical data\ncategorical = data.select_dtypes(exclude = [np.number])\nnumerical = data.select_dtypes(include = [np.number])","7b53f83f":"%config InlineBackend.figure_format = 'png'\n#Plot numerical data against Sale Price\nfor idx, feat in enumerate(numerical.columns.difference(['Price'])):\n    ax = sns.jointplot(x=feat, y='SalePrice', data=numerical, kind='scatter');\n    ax.set_axis_labels(feat, 'SalePrice');","c8513616":"#Removal of Outlier\ndata=data.drop(data[data['1stFlrSF']>4000].index)","f7a00887":"#Describe Sale Price's characteristics\ndata['SalePrice'].describe()","1938788a":"%config InlineBackend.figure_format = 'svg'\n#Plot the SalePrice of each instance\ng = sns.distplot(data['SalePrice'])\nfor item in g.get_xticklabels():\n    item.set_rotation(90)","59b6b965":"#skewness and kurtosis\nprint(\"Skewness: %f\" % data['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % data['SalePrice'].kurt())","78e4eb8f":"#Tranform categorical data into numerical data for training purpose\nfor col, col_data in data.items():\n    if is_string_dtype(col_data):\n        data[col] = data[col].astype('category').cat.as_ordered().cat.codes\n        test[col] = test[col].astype('category').cat.as_ordered().cat.codes","28130f58":"y = data.SalePrice\nX = data[cols]\n\ntest=test[cols]\n\n#Split the data into training and validation data sets\n#train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2)","22477848":"params_var = {\n    'max_depth': [1, 2, 3, 4, 5],\n    'gamma': [0, 0.5, 1],\n    'n_estimators': randint(1, 1001), # uniform discrete random distribution\n    'learning_rate': uniform(), # gaussian distribution\n    'subsample': uniform(), # gaussian distribution\n    'colsample_bytree': uniform() # gaussian distribution\n}\n\nparams_fixed = {\n    'silent': 1\n}\n\ncv = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)","62bc1ae4":"#Train a model using XGBRegressor\nmodel = RandomizedSearchCV(\n    estimator=XGBRegressor(**params_fixed, seed=seed),\n    param_distributions=params_var,\n    n_iter=10,\n    cv=cv,\n    scoring='r2',\n    random_state=seed\n)\n#Fit the model over training data\nmodel.fit(X, y, eval_set=[(test, actual_y)], verbose=False)","5c359fd0":"print(\"Best Score:\",model.best_score_)\nprint(\"Best Parameters: \",model.best_params_)","307db6e2":"model.best_estimator_","11b4e446":"#Predict Sale Price for houses in test data\npredicted_y = model.predict(test)","79041505":"#Extract the actual Sale Price value of test data\nprint(\"Actual Price of first 5 instances:\\n\")\nprint(actual_y.head())\nprint(\"\\nPredicted Price of first 5 instances:\\n\")\nprint(pd.DataFrame(predicted_y).head())","8806e02d":"%config InlineBackend.figure_format = 'svg'\n#Plot the actual Price value against predicted Sale Price \ng = sns.jointplot(x= actual_y, y= predicted_y, kind='reg', xlim = (0,400000), ylim=(0,600000),\n                  joint_kws={'line_kws':{'color':'darkorange'}})\ng.set_axis_labels(xlabel='Actual Price', ylabel='Predicted Price')","9f000367":"my_submission = pd.DataFrame({'Id': Id, 'SalePrice': predicted_y})\n\nmy_submission.to_csv('sample_submission.csv', index=False)","7b4a1ab8":"<h2>Data Exploration, Cleaning and Transformation:<\/h2>","9b61625c":"<h2>Submission of Results:<\/h2>","7f0d41ad":"<h2>Test Data:<\/h2>","e34522ab":"<h2>Train Model:<\/h2>","4ed55d7b":"<h2>Extract Training & Test Data:<\/h2>","8f755c31":"<h2>Import Libraries:<\/h2>","64536aa8":"<h1>HOUSE PRICE PREDICTION<\/h1>"}}