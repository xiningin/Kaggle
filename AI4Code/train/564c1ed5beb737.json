{"cell_type":{"e3f105d6":"code","e1d2775f":"code","aac5e1fb":"code","82932722":"code","43a215ae":"code","90344a5e":"code","d7857aca":"code","7ce9e40b":"code","e7d91b78":"code","3c5c4041":"code","37757af4":"code","2d74cd16":"code","4f9d9d00":"code","f602b9f8":"code","97587d10":"markdown","90294abc":"markdown","53aa1ff7":"markdown","6a4198c1":"markdown","7967a435":"markdown","8493d8ba":"markdown","f3d5dd5d":"markdown","8734398b":"markdown","4f63a0f9":"markdown","532146b9":"markdown","f5bea8ba":"markdown","348ce20b":"markdown","c0781089":"markdown","2c14ff63":"markdown","b8c8e98b":"markdown","0ed8359a":"markdown","651d6689":"markdown"},"source":{"e3f105d6":"!python -m pip install gwpy\n!pip install astropy==4.2.1","e1d2775f":"from gwpy.timeseries import TimeSeries\nfrom gwpy.plot import Plot\nimport numpy as np\nfrom scipy import signal\nfrom sklearn.preprocessing import MinMaxScaler\nfrom PIL import Image\nfrom matplotlib import pyplot as plt","aac5e1fb":"def read_file(fname):\n    data = np.load(fname)\n    d1 = TimeSeries(data[0,:], sample_rate=2048)\n    d2 = TimeSeries(data[1,:], sample_rate=2048)\n    d3 = TimeSeries(data[2,:], sample_rate=2048)\n    return d1, d2, d3\n\ndef plot_time_data(d1, d2, d3):\n    plot = Plot(d1, d2, d3, separate=True, sharex=True, figsize=[12, 8])\n    ax = plot.gca()\n    ax.set_xlim(0,2)\n    ax.set_xlabel('Time [s]')\n    plot.show()","82932722":"d1, d2, d3 = read_file('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/000a5b6e5c.npy')\nplot_time_data(d1, d2, d3)","43a215ae":"window = signal.tukey(4096)\nplt.plot(window);","90344a5e":"d1, d2, d3 = d1*window, d2*window, d3*window\nplot_time_data(d1, d2, d3)","d7857aca":"fig2 = d1.asd(fftlength=2).plot(figsize=[12, 6])\nplt.xlim(10,1024)\nplt.ylim(1e-25, 1e-20);","7ce9e40b":"fig2b = d1.highpass(15).asd(fftlength=2).plot(figsize=[12, 6])\nplt.xlim(10,1024)\nplt.ylim(1e-25, 1e-20);","e7d91b78":"white_data = d1.whiten(window=(\"tukey\",0.2)) # whiten-function has a built-in window function\nbp_data = white_data.bandpass(35, 350) # frequency range 35-350Hz\nfig3 = bp_data.plot(figsize=[12, 6])\nplt.xlim(0, 2)\nax = plt.gca()\nax.set_title('Whitened and bandpassed')\nax.set_xlabel('Time [s]');","3c5c4041":"def preprocess(d1, d2, d3, bandpass=False, lf=35, hf=350):\n    white_d1 = d1.whiten(window=(\"tukey\",0.2))\n    white_d2 = d2.whiten(window=(\"tukey\",0.2))\n    white_d3 = d3.whiten(window=(\"tukey\",0.2))\n    if bandpass: # bandpass filter\n        bp_d1 = white_d1.bandpass(lf, hf) \n        bp_d2 = white_d2.bandpass(lf, hf)\n        bp_d3 = white_d3.bandpass(lf, hf)\n        return bp_d1, bp_d2, bp_d3\n    else: # only whiten\n        return white_d1, white_d2, white_d3","37757af4":"r1, r2, r3 = read_file('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/000a5b6e5c.npy') # this signal has target=1\np1, p2, p3 = preprocess(r1, r2, r3)\nhq = p2.q_transform(qrange=(16,32), frange=(30,400), logf=True, whiten=False)\nfig4 = hq.plot(figsize=[12, 10])\nax = fig4.gca()\nfig4.colorbar(label=\"Normalised energy\")\nax.grid(False)\nax.set_yscale('log')\nax.set_xlabel('Time [s]');","2d74cd16":"Q_RANGE = (16,32)\nF_RANGE = (30,400)\n\ndef create_rgb(fname):\n    r1, r2, r3 = read_file(fname)\n    p1, p2, p3 = preprocess(r1, r2, r3)\n    hq1 = p1.q_transform(qrange=Q_RANGE, frange=F_RANGE, logf=True, whiten=False)\n    hq2 = p2.q_transform(qrange=Q_RANGE, frange=F_RANGE, logf=True, whiten=False)\n    hq3 = p3.q_transform(qrange=Q_RANGE, frange=F_RANGE, logf=True, whiten=False)\n    img = np.zeros([hq1.shape[0], hq1.shape[1], 3], dtype=np.uint8)\n    scaler = MinMaxScaler()\n    img[:,:,0] = 255*scaler.fit_transform(hq1)\n    img[:,:,1] = 255*scaler.fit_transform(hq2)\n    img[:,:,2] = 255*scaler.fit_transform(hq3)\n    return Image.fromarray(img).rotate(90, expand=1).resize((760,760))","4f9d9d00":"create_rgb('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/000a5b6e5c.npy')","f602b9f8":"create_rgb('..\/input\/g2net-gravitational-wave-detection\/test\/0\/0\/2\/0021f9dd71.npy')","97587d10":"Take a look at the spectrum - there is a lot of low frequency noise:","90294abc":"## Combine three channels into one RGB image\nSince we have 3 detectors, we can combine the Q-Transforms as RGB channels into one color image. Let's make a function for that:","53aa1ff7":"Now, we have a preprocessed data that is ready for further analysis. First, let's define a function that combines all the steps above and outputs preprocessed data:","6a4198c1":"# Read & plot files\nLet's define helper function to read numpy data and convert into GWpy TimeSeries format and plot the data. All the files are 2s recordings at 2048Hz sample rate from the 3 detectors.","7967a435":"Awesome! (Or crazy?) Next step is to find out if we can train an image classifier with these images...","8493d8ba":"# Preprocess\nThen we will follow the general processing steps outlined in [this article](https:\/\/iopscience.iop.org\/article\/10.1088\/1361-6382\/ab685e):  \n* Apply a window function (Tukey - tapered cosine window) to suppress spectral leakage\n* Whiten the spectrum\n* Bandpass","f3d5dd5d":"## Spectral whitening and bandpass filtering\nThis is super simple with GWpy:","8734398b":"And import a few libraries.","4f63a0f9":"Here is a very obvious one (chirp) from the test set:","532146b9":"Visualize a file:","f5bea8ba":"Let's look at the signal after windowing:","348ce20b":"## Apply window function","c0781089":"# Processing of gravitational data\nIn this notebook we will apply some signal processing to the gravitational data. Preprocessing is definately required on these signals, and thankfully there is a Python package called [GWpy](https:\/\/gwpy.github.io\/docs\/latest\/index.html) that has all functions that are needed. Theory will not be discussed here in detail, but there is plenty of info and code on the topic:   \n  * [GW tutorials](https:\/\/www.gw-openscience.org\/tutorials\/)\n  * [Gravitational Wave Open Science Center](https:\/\/www.gw-openscience.org\/software\/)\n  * [A guide to LIGO\u2013Virgo detector noise and extraction of transient gravitational-wave signals](https:\/\/iopscience.iop.org\/article\/10.1088\/1361-6382\/ab685e)\n  \n  \nFirst, install GWpy:","2c14ff63":"![logo](https:\/\/gwpy.github.io\/images\/gwpy_1200.png)","b8c8e98b":"We can easily highpass the data (here with 15Hz highpass frequency):","0ed8359a":"The Tukey window looks like this:","651d6689":"# Q-Transform\nThe Q-Transform is related to the Fourier transform, and very closely related to a wavelet transform. The spectrogram is a possible candidate as input for a CNN model."}}