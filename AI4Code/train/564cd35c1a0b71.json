{"cell_type":{"2b5314d1":"code","ecc25c6a":"code","8ca12572":"code","d0255c77":"code","c48cf20b":"code","b8be2104":"code","f7927e28":"code","103777df":"code","a9ca7d72":"code","a4d40133":"code","422f3aaa":"code","1848d7fd":"code","a73289fb":"code","70082a97":"code","d1e6f187":"code","55e0a921":"code","50ffbb92":"code","15e95d71":"code","6e3fbedd":"code","f463fe21":"code","3b808fb3":"code","b22dc58e":"code","0f436ae4":"code","61e39b45":"code","67c5966f":"code","1ade78e4":"code","b0030f35":"code","f67e8246":"code","01b15b07":"code","90ab7739":"code","039d9f48":"code","e271aab6":"code","240bfac0":"code","61cc0942":"code","eff0602f":"code","11c4d368":"code","49c2f7e3":"code","82a1f841":"code","98569681":"code","0d4db6f3":"code","8ce88b64":"code","101f05c4":"code","6cd1036e":"code","21284d1b":"code","c9c538fe":"code","3322a32f":"code","b93a717a":"code","d1880d0c":"code","8f756aae":"code","a1b84236":"code","8468aaa0":"code","9be1a939":"code","c3a568be":"code","20d39d11":"code","ba16bf40":"code","2e690e82":"code","38ad595e":"code","ad8c6c01":"code","2a163bd6":"code","121c8778":"code","56eafca8":"code","d88da194":"code","4ef28bd5":"code","495e9052":"code","61ea9064":"code","b1637f8d":"markdown","29c058ef":"markdown","d15cac1c":"markdown","b157e6e4":"markdown","2daaad14":"markdown","f042870f":"markdown","8490b4f5":"markdown","621e7611":"markdown","6436e29c":"markdown","5525553b":"markdown","ca3ba955":"markdown","37261734":"markdown","3fb495d1":"markdown"},"source":{"2b5314d1":"import zipfile\nimport pandas as pd\nimport numpy as np\nimport operator \nimport re\nimport gc\nfrom keras import layers\nimport os\nimport keras\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Model\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Embedding, Bidirectional, concatenate, Input, Dropout\nfrom tensorflow.keras.layers import Input, Embedding, Bidirectional, LSTM, Dense,Flatten,Conv2D,Conv1D,GlobalMaxPooling1D,Concatenate, TimeDistributed\nfrom keras.optimizers import Adam\nfrom keras import optimizers, callbacks \nfrom sklearn.metrics import log_loss,f1_score\n\nfor dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ecc25c6a":"train_df = pd.read_csv(\"\/kaggle\/input\/quora-insincere-questions-classification\/train.csv\")\n","8ca12572":"train_df.head()","d0255c77":"with zipfile.ZipFile(\"..\/input\/quora-insincere-questions-classification\/embeddings.zip\",\"r\") as z:\n    z.extractall(\".\")\n","c48cf20b":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr, dtype='float32')\n    embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n    return embeddings_index","b8be2104":"glove = '.\/glove.840B.300d\/glove.840B.300d.txt'\nembed_glove = load_embed(glove)","f7927e28":"def build_vocab(texts):\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab\n","103777df":"def check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.3%} of vocab'.format(len(known_words) \/ len(vocab)))\n    print('Found embeddings for  {:.3%} of all text'.format(nb_known_words \/ (nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words\n","a9ca7d72":"vocabulary = build_vocab(train_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)","a4d40133":"uncovered[:10]","422f3aaa":"puncts = [',', '.', '\"', ':', ')', '(', '-', '!', '?', '|', ';', \n          \"'\",  '&', '\/', '[', ']', '>', '<', '%', '=', '#', '+', \n          '\\\\',  '\u00a7', '\u2033', '\u2032','\u00bf','\u2550']\n\n\ndef preprocessing1(text):\n    text = text.lower()\n    for punct in puncts:\n        text = text.replace(punct, f' {punct} ')\n    return text\n    ","1848d7fd":"train_df.question_text = train_df.question_text.apply(preprocessing1)","a73289fb":"vocabulary = build_vocab(train_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)","70082a97":"uncovered[:10]","d1e6f187":"contraction_map = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\",\n                    \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\", \n                   \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \n                   \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\",\n                   \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\",\n                   \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \n                   \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \n                    \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\",\n                   \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\",\n                   \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \n                   \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n                   \"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\",\n                   \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n                    \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\",\n                   \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\",\n                   \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\",\n                   \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\":\n                   \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \n                   \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\",                        \n                   \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \n                    \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\n                   \"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \n                   \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\",\n                   \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \n                   \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \n                   \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\",                       \n                   \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",\n                    \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \n                   \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \n                   \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \n                   \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\",\n                   \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\",\n                   \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\",\n                    \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\n                   \"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\",\n                   \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\",\n                   \"you're\": \"you are\", \"you've\": \"you have\" }\n","55e0a921":"def preprocessing2(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","50ffbb92":"train_df.question_text = train_df.question_text.apply(lambda x: preprocessing2(x, contraction_map))","15e95d71":"vocabulary = build_vocab(train_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)","6e3fbedd":"uncovered[0:20]","f463fe21":"special_map = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\",\n               \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"',\n               \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a',\n               '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi','\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '',\n               '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': '' }\npunct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'","3b808fb3":"def preprocessing3(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])  \n    for p in punct:\n        text = text.replace(p, f' {p} ')   \n    return text","b22dc58e":"train_df.question_text = train_df.question_text.apply(lambda x: preprocessing3(x, punct, special_map))","0f436ae4":"vocabulary = build_vocab(train_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)","61e39b45":"uncovered[:100]","67c5966f":"mispell_dict = {'pubg':'video game','fortnite':'video game','redmi':'phone mark','brexit':'britain exit',\n                'cryptocurrencies':'crypto currencies','pok\u00e9mon':'video game','laravel':'framework',\n                'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', \n                'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor',\n                'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ',\n                'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do',\n                'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', \n                'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', \n                'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating',\n                'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', \n                '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', \n                'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization',\n                'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n","1ade78e4":"def preprocessing4(x, dic):\n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x\n","b0030f35":"train_df.question_text = train_df.question_text.apply(lambda x: preprocessing4(x, mispell_dict))","f67e8246":"vocabulary = build_vocab(train_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)","01b15b07":"len_voc = 95000\nmax_len = 60","90ab7739":"def make_data(X):\n    t = Tokenizer(num_words=len_voc)\n    t.fit_on_texts(X)\n    X = t.texts_to_sequences(X)\n    X = pad_sequences(X, maxlen=max_len)\n    return X, t.word_index, t","039d9f48":"X, word_index, t = make_data(train_df['question_text'])\nY = train_df['target'].values\nlen_voc = len(word_index)\ndel train_df\nlen_voc","e271aab6":"len_voc","240bfac0":"X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state = 420, test_size = 0.1)","61cc0942":"def make_embed_matrix(embeddings_index, word_index, len_voc):\n    all_embs = np.stack(embeddings_index.values())\n    emb_mean,emb_std = all_embs.mean(), all_embs.std()\n    embed_size = all_embs.shape[1]\n    word_index = word_index\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (len_voc, embed_size))\n    \n    for word, i in word_index.items():\n        if i >= len_voc: continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None: \n            embedding_matrix[i] = embedding_vector\n    \n    return embedding_matrix","eff0602f":"embedding = make_embed_matrix(embed_glove, word_index,len_voc)\ndel word_index\ngc.collect()","11c4d368":"embedding[0].shape","49c2f7e3":"embedding.shape","82a1f841":"from keras import backend as K\n","98569681":"def f1(y_true, y_pred):\n    def recall(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    \n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n","0d4db6f3":"from tensorflow.compat.v1.keras.layers import CuDNNGRU\nfrom keras.layers import GlobalAveragePooling1D, GlobalMaxPool1D\nfrom keras.layers import Embedding,Bidirectional,LSTM,Dropout,Conv1D,MaxPooling1D,Dense\n\n","8ce88b64":"def make_model(embedding_matrix, embed_size=300,loss='binary_crossentropy') :\n    model = Sequential()\n    model.add(Embedding(len_voc, embed_size , weights=[embedding_matrix], trainable=False))\n    model.add(LSTM(128)) \n    model.add(Dense(128,activation='relu'))\n    model.add(Dropout(0.2)) \n    model.add(Dense(1, activation=\"sigmoid\"))\n    model.compile(loss='binary_crossentropy', optimizer='adam' ,metrics=['accuracy',f1])\n    return model\n","101f05c4":"modelTest= make_model(embedding)","6cd1036e":"modelTest.summary()","21284d1b":"WEIGHTS_PATH = '.\/w0.h5'\nmc = callbacks.ModelCheckpoint( filepath=WEIGHTS_PATH, monitor='val_loss', mode='min', save_best_only=True )\nes = callbacks.EarlyStopping( patience=5 )\n","c9c538fe":"history = modelTest.fit(X_train, y_train, epochs = 10, validation_data = (X_test, y_test) , callbacks=[es , mc] , batch_size=2048 )\nplt.plot(history.history['val_loss'])\nplt.plot(history.history['loss'])\nplt.legend( ['test', 'train'] )","3322a32f":"test_pred = modelTest.predict(X_test, batch_size=512, verbose=1)","b93a717a":"from sklearn.metrics import f1_score\n","d1880d0c":"def tweak_threshold(pred, truth):\n    thresholds = []\n    scores = []\n    for thresh in np.arange(0.1, 0.501, 0.01):\n        thresh = np.round(thresh, 2)\n        thresholds.append(thresh)\n        score = f1_score(truth, (pred>thresh).astype(int))\n        scores.append(score)\n    return np.max(scores), thresholds[np.argmax(scores)]","8f756aae":"score_val, threshold_val = tweak_threshold(test_pred, y_test)\n\nprint(f\"Scored {round(score_val, 4)} for threshold {threshold_val} with untreated texts on validation data\")\n","a1b84236":"test_df  = pd.read_csv(\"\/kaggle\/input\/quora-insincere-questions-classification\/test.csv\")","8468aaa0":"test_df","9be1a939":"vocabulary = build_vocab(test_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)    ","c3a568be":"test_df.question_text = test_df.question_text.apply(preprocessing1)\ntest_df.question_text = test_df.question_text.apply(lambda x: preprocessing2(x, contraction_map))\ntest_df.question_text = test_df.question_text.apply(lambda x: preprocessing3(x, punct, special_map))\ntest_df.question_text = test_df.question_text.apply(lambda x: preprocessing4(x, mispell_dict))","20d39d11":"vocabulary = build_vocab(test_df['question_text'])\nuncovered = check_coverage(vocabulary,embed_glove)    ","ba16bf40":"test_X = test_df[\"question_text\"].fillna(\"_na_\").values\ntest_X = t.texts_to_sequences(test_X)\ntest_X = pad_sequences(test_X, maxlen=max_len)\n","2e690e82":"test_X","38ad595e":"test_X.shape","ad8c6c01":"pred_val = modelTest.predict(test_X, batch_size=512, verbose=1)","2a163bd6":"test_y = (pred_val>0.34).astype(int)","121c8778":"test_y.shape","56eafca8":"test_y","d88da194":"(unique, counts) = np.unique(test_y, return_counts=True)\nfrequencies = np.asarray((unique, counts)).T\nfrequencies","4ef28bd5":"submission = pd.DataFrame({\"qid\":test_df[\"qid\"].values})\nsubmission['prediction'] = test_y\n","495e9052":"submission","61ea9064":"submission.to_csv(\"submission.csv\", index=False)","b1637f8d":"Model creation","29c058ef":"1-1 words with ponctuation","d15cac1c":"1-3 special characters & espace around ponctuation","b157e6e4":"Submission","2daaad14":"**Checking the coverage of embeddings to our vocabulary**","f042870f":"Function for extracting embeddings files","8490b4f5":"1-2 Contraction words","621e7611":"4 Embeddings","6436e29c":"1-3 miss spelling words","5525553b":"2 Tokenizing + padding","ca3ba955":"1 - Checking the coverage without any modifcation to data","37261734":"testing our model befor submitting","3fb495d1":"**Building the vocabulary of our dataset**"}}