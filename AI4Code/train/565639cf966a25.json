{"cell_type":{"d91872d7":"code","ec1c7c86":"code","628bf7e7":"code","1846d275":"code","85aefc0d":"code","f6339397":"code","6deb4364":"code","28c84f94":"code","86ae4e0b":"code","5b1f13d0":"code","f32663df":"code","065f164f":"code","ea4f4e7a":"code","29d271d7":"code","bab3c2ae":"code","841fbc16":"markdown","8528cda1":"markdown","4054277a":"markdown","5df67d62":"markdown","9b8b410a":"markdown","ddc23add":"markdown","723cabb8":"markdown","cd14974b":"markdown","93e5c467":"markdown","0c2842ed":"markdown","4a9e2646":"markdown"},"source":{"d91872d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Packages to Analyze Data\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\n#for summary statistics\nimport statsmodels.api as sm\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec1c7c86":"train_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-02\/train.csv')\neval_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-02\/eval.csv')","628bf7e7":"train_data.head()","1846d275":"train_data.describe()","85aefc0d":"train_data.isnull().sum()","f6339397":"eval_data.isnull().sum()","6deb4364":"train_data.drop(columns=['id','title', 'console'], axis = 1, inplace=True)\neval_data.drop(columns=['console'], axis=1, inplace=True)","28c84f94":"train_data.columns","86ae4e0b":"cols = ['alcohol_reference', 'animated_blood', 'blood', 'blood_and_gore',\n       'cartoon_violence', 'crude_humor', 'drug_reference', 'fantasy_violence',\n       'intense_violence', 'language', 'lyrics', 'mature_humor', 'mild_blood',\n       'mild_cartoon_violence', 'mild_fantasy_violence', 'mild_language',\n       'mild_lyrics', 'mild_suggestive_themes', 'mild_violence',\n       'no_descriptors', 'nudity', 'partial_nudity', 'sexual_content',\n       'sexual_themes', 'simulated_gambling', 'strong_janguage',\n       'strong_sexual_content', 'suggestive_themes', 'use_of_alcohol',\n       'use_of_drugs_and_alcohol', 'violence']\n\nX = pd.get_dummies(train_data[cols])\ny = train_data['esrb_rating']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, shuffle=False)","5b1f13d0":"# LinearRegression Model\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\nlr_fit = lr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)\n\n\n#print(lr.score(X_test, y_test))\n#Getting the mean\nlr_score = cross_val_score(lr, X, y, cv=5)\nprint('LinearRegression mean score:' + str(np.mean(lr_score)))","f32663df":"sv = SVC()\nsv.fit(X_train, y_train)\nsv_pred = sv.predict(X_test)\n\nprint(sv.score(X_test, y_test))\n\n\nsv_score = cross_val_score(sv, X, y, cv=5)\nprint(type(sv_score))\n\nprint('Support Vector Machine mean score:' + str(np.mean(sv_score)))","065f164f":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ndt_pred = dt.predict(X_test)\n\nprint(dt.score(X_test, y_test))\n\n#Getting the mean\ndt_score = cross_val_score(dt, X, y, cv=5)\nprint('DecisionTreeClassifier mean score:' + str(np.mean(dt_score)))","ea4f4e7a":"rfc = RandomForestClassifier(random_state=42)\nrfc.fit(X_train, y_train)\nrfc_pred = rfc.predict(X_test)\n\nprint(rfc.score(X_test, y_test))\n\nrfc_score = cross_val_score(rfc, X, y, cv=5)\nprint('RandomForestClassifier mean score: ' + str(np.mean(rfc_score)))","29d271d7":"kn = KNeighborsClassifier()\nkn.fit(X_train, y_train)\n\n\nprint(kn.score(X_test, y_test))\n#Getting the mean\nkn_score = cross_val_score(kn, X, y, cv=5)\nprint('KNeighborsClassifier mean score:' + str(np.mean(kn_score)))","bab3c2ae":"X_test = pd.get_dummies(eval_data[cols])\n\npred = sv.predict(X_test)\n\nout = pd.DataFrame({'Id': eval_data.id, 'esrb_rating': pred})\nprint(out)\nout.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","841fbc16":"# Looking for Missing Values","8528cda1":"# Importing the data from CSV files","4054277a":"# Random Forest","5df67d62":"# Creating Test Data","9b8b410a":"# Exploratory Data Anlysis","ddc23add":"# Logistic Regression","723cabb8":"# Support Vector Machine","cd14974b":"# Decision Tree","93e5c467":"# K Nearest Neighbors","0c2842ed":"# Predicting the Best Model","4a9e2646":"# Extracting Usefull Data from the Training Data"}}