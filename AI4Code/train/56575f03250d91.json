{"cell_type":{"893c18dc":"code","465eb3a8":"code","014788ef":"code","6ed2afbd":"code","1c1ea3b6":"code","2bdac1ed":"code","c77b9534":"code","8aea5f71":"code","702fb298":"code","e72c6f99":"code","3f000d09":"code","67439688":"code","a812263d":"code","ae225a55":"code","0b67193f":"code","044d0d77":"markdown","cbefa0cc":"markdown","b25b220e":"markdown","e36ca5ac":"markdown","4d51eb69":"markdown","81b5d309":"markdown"},"source":{"893c18dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","465eb3a8":"# The following notebook uses Support Vector Machines on the famous Iris dataset.\n# This dataset was introduced by the British statistician and biologist Sir Ronald Fisher \n# in his 1936 paper The use of multiple measurements in taxonomic problems\n\n# This dataset is openly available at UCI Machine Learning Repository","014788ef":"#The iris dataset contains measurements for 150 iris flowers from three different species.\n\n#The three classes in the Iris dataset:\n\n#    Iris-setosa (n=50)\n#    Iris-versicolor (n=50)\n#    Iris-virginica (n=50)\n\n# The four features of the Iris dataset:\n\n#    sepal length in cm\n#    sepal width in cm\n#    petal length in cm\n#    petal width in cm\n\n## Get the data\n\n#**Use seaborn to get the iris data by using: iris = sns.load_dataset('iris') **","6ed2afbd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1c1ea3b6":"# Import the dataset using Seaborn library\niris=pd.read_csv('..\/input\/IRIS.csv')","2bdac1ed":"# Checking the dataset\niris.head()","c77b9534":"# Creating a pairplot to visualize the similarities and especially difference between the species\nsns.pairplot(data=iris, hue='species', palette='Set2')","8aea5f71":"from sklearn.model_selection import train_test_split","702fb298":"# Separating the independent variables from dependent variables\nimport hashlib \n\ndef myHash1(XX):\n    for i in range(0, len(XX)):\n        temp = int(hashlib.sha256(str(XX[i]).encode('utf-8')).hexdigest(), 16)\n        #temp = int(hashlib.md5(str(XX[i])).hexdigest(), 16)\n        XX[i] = (temp % (10**6))\n        #XX[i] = temp\n    return XX\n\n#print(iris)\nx=iris.iloc[:,:-1]\nprint(\"Normal Dataset\")\nprint(x)\n\nx1=iris.iloc[:,:-1]\nx1['petal_width'] = myHash1(x1['petal_width'])\nx1['petal_length'] = myHash1(x1['petal_length'])\nx1['sepal_width'] = myHash1(x1['sepal_width'])\nx1['sepal_length'] = myHash1(x1['sepal_length'])\nprint(\"Dataset with Hashed Features\")\nprint(x1)\n\ny=iris.iloc[:,4]\nx_train,x_test, y_train, y_test=train_test_split(x,y,test_size=0.30)\nx_train1,x_test1, y_train1, y_test1=train_test_split(x1,y,test_size=0.30)","e72c6f99":"from sklearn.svm import SVC\nmodel=SVC()\nmodel1=SVC()","3f000d09":"model.fit(x_train, y_train)\nmodel1.fit(x_train1, y_train1)","67439688":"pred=model.predict(x_test)\npred_train=model.predict(x_train)\n\npred1=model1.predict(x_test1)\npred_train1=model1.predict(x_train1)","a812263d":"# Importing the classification report and confusion matrix\nfrom sklearn.metrics import classification_report, confusion_matrix","ae225a55":"print(confusion_matrix(y_test,pred))\nprint(confusion_matrix(y_test1,pred1))","0b67193f":"print(\"Normal Training\")\nprint(\"train error:\")\n#print(classification_report(y_train, pred_train))\nprint(len(y_train[y_train != pred_train]) \/ len(y_train) * 100)\nprint('test error:')\nprint(len(y_test[y_test != pred]) \/ len(y_test) * 100)\n#print(classification_report(y_test, pred))\nprint()\nprint(\"Training with Hashed Features\")\nprint(\"train error:\")\nprint(len(y_train1[y_train1 != pred_train1]) \/ len(y_train1) * 100)\n#print(classification_report(y_train1, pred_train1))\nprint('test error:')\nprint(len(y_test1[y_test1 != pred1]) \/ len(y_test1) * 100)\n#print(classification_report(y_test1, pred1))\n","044d0d77":"## Importing important libraries first","cbefa0cc":"## Train Test Split","b25b220e":"## Predictions from the trained model","e36ca5ac":"## Training and Fitting the model","4d51eb69":"## Iris flower dataset","81b5d309":"## Model Evaluation"}}