{"cell_type":{"8bfdbd9e":"code","5fdfb9e7":"code","90f24d1e":"code","b98b97da":"code","2a6aecd3":"code","641e0f3d":"code","88888fa9":"code","9f8486bf":"code","e52e2ce9":"code","59a69d4b":"code","f2b59905":"code","2fc688f1":"code","1278e98e":"code","b6addb2e":"code","f2e047e5":"code","806de967":"code","1d944418":"code","a130dc48":"code","42ac76e0":"code","cd8d73fa":"code","1e9f429a":"markdown"},"source":{"8bfdbd9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5fdfb9e7":"df_responses = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\")\ndf_other_text = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2019\/other_text_responses.csv\")","90f24d1e":"df_responses.shape","b98b97da":"df_schema = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2019\/survey_schema.csv\")","2a6aecd3":"df_schema.shape","641e0f3d":"#df_schema","88888fa9":"df_responses","9f8486bf":"from IPython.display import display, HTML\n\ndef print_full(x):\n    pd.set_option('display.max_rows', len(x))\n    pd.set_option('display.max_columns', None)\n    pd.set_option('display.width', 2000)\n    pd.set_option('display.float_format', '{:20,.2f}'.format)\n    pd.set_option('display.max_colwidth', -1)\n    x = x.style.set_properties(**{'text-align': 'left'})\n    display(x)\n#    print(x)\n    pd.reset_option('display.max_rows')\n    pd.reset_option('display.max_columns')\n    pd.reset_option('display.width')\n    pd.reset_option('display.float_format')\n    pd.reset_option('display.max_colwidth')","e52e2ce9":"qs = df_responses.iloc[0].T.to_frame()\nqs.index.name = \"name\"\nqs.columns = [\"description\"]","59a69d4b":"print_full(qs)","f2b59905":"q_to_plot = [9, 12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]\nq_count_to_plot = [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 15, 19, 22, 23]","2fc688f1":"df_responses = df_responses.fillna(0)","1278e98e":"def create_df_q(qn):\n    cols = [col for col in df_responses if f\"Q{qn}_\" in col]\n    q_data = []\n    names = []\n    title = None\n    for col in cols:\n        parts = qs.loc[col][\"description\"].split(\"-\")\n        q_str = parts[0].split(\"?\")[0]\n        title = q_str\n        name = parts[2].strip()\n        names.append(name)\n        count = df_responses[col].astype(bool).sum()\n        q_data.append(count)\n#    other_values = df_responses[cols[-1]]\n    q_data = q_data[:-1]\n    names = names[:-1]\n#    others = pd.DataFrame(columns=[\"other\"], data=other_values)\n    df_x = pd.DataFrame(columns=names, data=[q_data])\n    others = df_other_text[cols[-1]].str.lower().value_counts()\n    return df_x, title, others","b6addb2e":"import matplotlib.pyplot as plt\n\ndef plot_q(qn):\n    df_q, title, others = create_df_q(qn)\n    ax = df_q.T.plot(kind=\"bar\", figsize=(10,6))\n    ax.set_title(title, fontsize=20)\n    #ax.xaxis.label.set_size(20)\n    ax.tick_params(axis=\"x\", labelsize=20)\n    plt.show()\n    display(others.to_frame()[:10])\n","f2e047e5":"#plot_q(25)","806de967":"for qn in q_to_plot:\n    plot_q(qn)","1d944418":"df_responses = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\")","a130dc48":"orders = {\n    1: None,\n    2: None,\n    3: None,\n    4: [\"No formal education past high school\", \"Professional degree\", \"Some college\/university study without earning a bachelor\u2019s degree\", \"Bachelor\u2019s degree\", \"Master\u2019s degree\", \"Doctoral degree\", \"I prefer not to answer\"],\n    5: None,\n    6: [\"0-49 employees\", \"50-249 employees\", \"250-999 employees\", \"1000-9,999 employees\", \"> 10,000 employees\"],\n    7: [\"0\", \"1-2\", \"3-4\", \"5-9\", \"10-14\", \"15-19\", \"20+\"],\n    8: [\"No (we do not use ML methods)\", \"We are exploring ML methods (and may one day put a model into production)\", \"We use ML methods for generating insights (but do not put working models into production)\", \"We recently started using ML methods (i.e., models in production for less than 2 years)\", \"We have well established ML methods (i.e., models in production for more than 2 years)\", \"I do not know\"],\n    10: [\"$0-999\", \"1,000-1,999\", \"2,000-2,999\", \"3,000-3,999\", \"4,000-4,999\", \"5,000-7,499\", \"7,500-9,999\", \"10,000-14,999\", \"15,000-19,999\", \"20,000-24,999\", \"25,000-29,999\", \"30,000-39,999\", \"40,000-49,999\", \"50,000-59,999\", \"60,000-69,999\", \"70,000-79,999\", \"80,000-89,999\", \"90,000-99,999\", \"100,000-124,999\", \"125,000-149,999\", \"150,000-199,999\", \"200,000-249,999\", \"250,000-299,999\", \"300,000-500,000\", \"> $500,000\"],\n    11: [\"$0 (USD)\", \"$1-$99\", \"$100-$999\", \"$1000-$9,999\", \"$10,000-$99,999\", \"> $100,000 ($USD)\"],\n    15: [\"I have never written code\", \"< 1 years\", \"1-2 years\", \"3-5 years\", \"5-10 years\", \"10-20 years\", \"20+ years\"],\n    19: None,\n    22: [\"Never\", \"Once\", \"2-5 times\", \"6-24 times\", \"> 25 times\"],\n    23: [\"< 1 years\", \"1-2 years\", \"2-3 years\", \"3-4 years\", \"4-5 years\", \"5-10 years\", \"10-15 years\", \"20+ years\"]    \n}","42ac76e0":"def plot_count_qs():\n    for qn in q_count_to_plot:\n        q_data = df_responses[f\"Q{qn}\"]\n        title = q_data[0]\n        counts = q_data[1:].dropna().value_counts()\n        width = 8\n        if len(counts) > 20:\n            width = 24\n        ordering = orders[qn]\n        #print(\"using ordering:\"+str(ordering))\n        if ordering is None:\n            plot_data = counts.sort_index()\n        else:\n            idx = pd.Categorical(counts.index.values,\n                      categories=ordering,\n                      ordered=True)\n            counts = counts.reindex(idx)\n            plot_data = counts.sort_index()\n        ax = plot_data.plot(kind=\"bar\", figsize=(width,6))\n        ax.set_title(title, fontsize=20)\n        ax.tick_params(axis=\"x\", labelsize=20)\n        #print(qn)\n        plt.show()\n        display(plot_data.to_frame())\n","cd8d73fa":"plot_count_qs()","1e9f429a":"This is just a brief look at the questions and answers to make them a bit more readable"}}