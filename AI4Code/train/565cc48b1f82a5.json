{"cell_type":{"f1bf4972":"code","8da151c1":"code","72d5a25a":"code","4b192957":"code","b5f6fe03":"code","90737ac9":"code","4f3900c0":"code","e563f061":"code","245acefa":"code","c88d9db2":"code","7ced124c":"code","e9726e8a":"code","c272cfa0":"code","1f6a3c5f":"code","e022dafa":"code","d3b903ef":"code","1f415ef0":"code","89393ecd":"code","5abce7c9":"code","9898b008":"code","6eb8f3a9":"code","d5e1f8d1":"code","39fcb8ad":"code","bb7f2b96":"code","82cea122":"code","b5dca993":"code","749628b2":"code","85297293":"code","ab8938de":"code","d8b56b98":"code","28a71e39":"code","3a6493c1":"code","6c91378c":"code","aa1a6de5":"code","936edc55":"code","3877dcde":"code","e6740f34":"code","2545047d":"code","37e08466":"code","90f63966":"code","5a40c2eb":"code","2ef8ba3d":"code","23cc2ff3":"code","33481787":"code","c3b2d8f7":"code","5f3194aa":"code","67b44064":"code","1c0c382b":"code","cf8e4c7f":"code","25a7a4cf":"code","600d8fab":"code","4b3471f7":"code","01296328":"code","c1eed478":"code","3e69f82b":"code","3d3a874b":"markdown","fb42bdf2":"markdown","1c26ba4a":"markdown","54d12157":"markdown","22121db7":"markdown","1e7ba16a":"markdown","35d51a43":"markdown","4ff81a55":"markdown","4ad66e69":"markdown","59fd9f99":"markdown","3107229e":"markdown","a5eb7d18":"markdown","f15d391e":"markdown","20b50cdc":"markdown","8f8aa335":"markdown","eca22815":"markdown"},"source":{"f1bf4972":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","8da151c1":"dataset = pd.read_csv('..\/input\/titanic\/train.csv')\ndataset.head()","72d5a25a":"df = pd.read_csv('..\/input\/titanic\/test.csv')\ndf.head()","4b192957":"dataset.describe()","b5f6fe03":"df.describe()","90737ac9":"pd.crosstab(dataset.Sex, dataset.Survived)","4f3900c0":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.title('Sex',fontsize=15)\nsns.countplot(dataset['Sex'])\nplt.subplot(1,2,2)\nplt.title('Survival wrt Sex',fontsize=15)\nsns.countplot(dataset['Survived'], hue=dataset['Sex'],palette='mako')\nplt.show()","e563f061":"pd.crosstab(dataset.Pclass, dataset.Survived)","245acefa":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.title('Ticket class',fontsize=15)\nsns.countplot(dataset['Pclass'])\nplt.subplot(1,2,2)\nplt.title('Survival wrt Ticket class',fontsize=15)\nsns.countplot(dataset['Survived'], hue=dataset['Pclass'],palette='rocket')\nplt.show()","c88d9db2":"plt.figure(figsize=(10,5))\nplt.subplot()\nplt.title(\"Distribution of AGE\")\nsns.distplot(dataset['Age'],bins=8)\nplt.show()","7ced124c":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.distplot(dataset[dataset['Survived']==0]['Age'],hist=False,label=\"Not survived\")\nsns.distplot(dataset[dataset['Survived']==1]['Age'],hist=False,label='Survived')\nplt.legend()\nplt.title(\"Survival wrt Age\")\nplt.subplot(1,2,2)\nplt.title(\"Boxplot of Age for Survived Passangers\")\nsns.boxplot(x = dataset[dataset['Survived']==1]['Age'])\nplt.plot()","e9726e8a":"dataset['Family']=dataset['SibSp']+dataset['Parch']\ndf['Family']=dataset['SibSp']+dataset['Parch']","c272cfa0":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.title('Family Member',fontsize=15)\nsns.countplot(dataset['Family'])\nplt.subplot(1,2,2)\nplt.title('Survival wrt No of Family members',fontsize=15)\nsns.countplot(dataset['Survived'], hue=dataset['Family'],palette='rocket')\nplt.show()","1f6a3c5f":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.distplot(dataset[dataset['Survived']==0]['Fare'],hist=False,label=\"Not survived\")\nsns.distplot(dataset[dataset['Survived']==1]['Fare'],hist=False,label='Survived')\nplt.legend()\nplt.title(\"Survival wrt Fare\")\nplt.subplot(1,2,2)\nplt.title(\"Boxplot of Fare of Survived Passangers\")\nsns.boxplot(x = dataset[dataset['Survived']==1]['Fare'])\nplt.plot()","e022dafa":"pd.crosstab(dataset.Embarked, dataset.Survived)","d3b903ef":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.title('Port of Embarkation',fontsize=15)\nsns.countplot(dataset['Embarked'])\nplt.subplot(1,2,2)\nplt.title('Survival wrt Port of Embarkation',fontsize=15)\nsns.countplot(dataset['Survived'], hue=dataset['Embarked'],palette='mako')\nplt.show()","1f415ef0":"for col in dataset.columns :\n  print(\"{} : {}\".format(col,dataset[col].isnull().sum()))","89393ecd":"for col in df.columns :\n  print(\"{} : {}\".format(col,df[col].isnull().sum()))","5abce7c9":"dataset.drop(['Name','PassengerId','SibSp','Parch','Cabin','Ticket'],axis='columns',inplace=True)","9898b008":"Id=df['PassengerId']\nId","6eb8f3a9":"df.drop(['Name','PassengerId','SibSp','Parch','Cabin','Ticket'],axis='columns',inplace=True)","d5e1f8d1":"avg_age=dataset['Age'].mean()\ndataset['Age'].fillna(avg_age,inplace=True)","39fcb8ad":"avg_age1=df['Age'].mean()\ndf['Age'].fillna(avg_age1,inplace=True)","bb7f2b96":"dummies  = pd.get_dummies(dataset.Embarked)\ndataset = pd.concat([dataset,dummies],axis='columns')\ndataset.drop(['Embarked'],axis='columns',inplace=True)","82cea122":"dataset","b5dca993":"dummies1  = pd.get_dummies(df.Embarked)\ndf = pd.concat([df,dummies1],axis='columns')\ndf.drop(['Embarked'],axis='columns',inplace=True)","749628b2":"df","85297293":"X = dataset.drop(\"Survived\",axis=\"columns\")\ny = dataset[\"Survived\"]","ab8938de":"X","d8b56b98":"y","28a71e39":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nX['Sex']=le.fit_transform(X['Sex'])\nX","3a6493c1":"le=LabelEncoder()\ndf['Sex']=le.fit_transform(df['Sex'])\ndf","6c91378c":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(df)\ndf = imputer.transform(df)","aa1a6de5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","936edc55":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","3877dcde":"test_X=sc.transform(df)","e6740f34":"from sklearn.svm import SVC\nclf_svm = SVC(kernel = 'rbf')\nclf_svm.fit(X_train, y_train)","2545047d":"y_pred = clf_svm.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","37e08466":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = clf_svm, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","90f63966":"from sklearn.tree import DecisionTreeClassifier\nclf_dt = DecisionTreeClassifier(criterion = 'entropy')\nclf_dt.fit(X_train, y_train)","5a40c2eb":"y_pred1 = clf_dt.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\ncm1 = confusion_matrix(y_test, y_pred1)\nprint(cm1)","2ef8ba3d":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = clf_dt, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","23cc2ff3":"from sklearn.neighbors import KNeighborsClassifier\nclf_knn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclf_knn.fit(X_train, y_train)","33481787":"y_pred2 = clf_knn.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\ncm2 = confusion_matrix(y_test, y_pred2)\nprint(cm2)","c3b2d8f7":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = clf_knn, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","5f3194aa":"from sklearn.linear_model import LogisticRegression\nclf_lr = LogisticRegression(random_state = 0)\nclf_lr.fit(X_train, y_train)","67b44064":"y_pred3 = clf_lr.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\ncm3 = confusion_matrix(y_test, y_pred3)\nprint(cm3)","1c0c382b":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = clf_lr, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","cf8e4c7f":"from sklearn.ensemble  import VotingClassifier\nclf_voting=VotingClassifier(estimators=[('lr',clf_lr),('svm',clf_svm),('dt',clf_dt)])\nclf_voting.fit(X_train,y_train)\ny_pred4=clf_voting.predict(X_test)","25a7a4cf":"from sklearn.metrics import confusion_matrix\ncm4 = confusion_matrix(y_test, y_pred4)\nprint(cm4)","600d8fab":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred4))","4b3471f7":"test_X","01296328":"pred_y=clf_svm.predict(test_X)","c1eed478":"pred_y","3e69f82b":"submission_data = {'PassengerId': Id, 'Survived': pred_y}\nsubmission_datasheet = pd.DataFrame(data=submission_data)\nsubmission_datasheet.to_csv('.\/data1.csv',index =False)","3d3a874b":"### SEX","fb42bdf2":"## DATA VISUALIZATION ON TRAINING SET","1c26ba4a":"### Port of Embarkation","54d12157":"### AGE","22121db7":"### FAMILY ( siblings \/ spouses + parents \/ children )","1e7ba16a":"### KNN","35d51a43":"## PREDICTION","4ff81a55":"### SVM","4ad66e69":"### TICKET CLASS","59fd9f99":"### DECISION TREE","3107229e":"## IMPORTING LIBRARIES","a5eb7d18":"## DATA PREPROCESSING","f15d391e":"> ****I have tried to apply VOTING Ensemble Learning method. This is the 1st time I am submitting my code. Please suggest how can I improve my model accuracy . If I have made any mistake in my code or sometthing needs to be change please suggest me in the comment.****","20b50cdc":"### LOGISTIC REGRESSION","8f8aa335":"### VOTING ENSEMBLE","eca22815":"### FARE"}}