{"cell_type":{"30cac758":"code","ee5a7c45":"code","ea88c26b":"code","ad3e288b":"code","4b458972":"code","cceb5f3f":"code","e3056b28":"code","e18dd63a":"code","9bfe2333":"markdown","c76a1b37":"markdown"},"source":{"30cac758":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nfrom sklearn.utils import shuffle\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, Flatten, Conv2D\nfrom keras.layers import MaxPooling2D, Dropout\nfrom sklearn.model_selection import KFold\nfrom keras.models import Model\nfrom PIL import Image\nimport cv2\nimport IPython\n","ee5a7c45":"print(os.listdir('..\/input'))","ea88c26b":"print(os.listdir('..\/input\/objects'))","ad3e288b":"photo_array=[]\ntarget=[]\nsize=100\nfrom os import listdir\nfrom matplotlib import image\nloaded_images = list()\nfor filename in listdir('..\/input\/objects\/glass'):\n    image = Image.open('..\/input\/objects\/glass\/' + filename)\n    if (image.mode != 'RGB'):\n        image=image.convert('RGB')\n    img_resized = np.array(image.resize((size,size)))\n    photo_array.append(img_resized) \n    target.append(0)\n    \nfor filename in listdir('..\/input\/objects\/water_bottle'):\n    if (image.mode != 'RGB'):\n        image=image.convert('RGB')\n    img_resized = np.array(image.resize((size,size)))\n    photo_array.append(img_resized) \n    target.append(1)\n    \nfor filename in listdir('..\/input\/objects\/chair'):\n    image = Image.open('..\/input\/objects\/chair\/' + filename)\n    if (image.mode != 'RGB'):\n        image=image.convert('RGB')\n    img_resized = np.array(image.resize((size,size)))\n    photo_array.append(img_resized) \n    target.append(2)","4b458972":"X=np.array(photo_array)\ny=np.array(target)\nX=X\/255","cceb5f3f":"X,y=shuffle(X,y,random_state=44)","e3056b28":"from sklearn.preprocessing import OneHotEncoder\nhot = OneHotEncoder()\ny=y.reshape(len(y), 1)\ny = hot.fit_transform(y).toarray()","e18dd63a":"kfold = KFold(n_splits=10, shuffle=False, random_state=22)\ncvscores = []\nfor train, test in kfold.split(X, y):\n    size=X.shape[1]\n    model = Sequential()\n    model.add(ZeroPadding2D(2, input_shape=(size, size, 3)))\n    model.add(Conv2D(32, (7, 7),strides=(1, 1),padding=\"valid\", kernel_initializer='random_uniform',\n                bias_initializer='zeros',activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, (3, 3),strides=(1, 1),padding=\"valid\", activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Conv2D(128, (3,3),strides=(1, 1),padding=\"valid\", activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(256, (1,1),strides=(1, 1),padding=\"valid\", activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(3, activation=\"softmax\")) \n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    model.fit(X[train], y[train],batch_size = 128, epochs=30,verbose=0 )\n    scores = model.evaluate(X[test], y[test], verbose=0)\n    print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n    cvscores.append(scores[1] * 100)\nprint(\"%.2f%% (+\/- %.2f%%)\" % (np.mean(cvscores), np.std(cvscores)))  ","9bfe2333":"\nConclusion\n\nThe model classifies images with average accuracy of 90%.\n","c76a1b37":"Goal: To classify images from 3 classes (chair, glass, water_bottle) collected using bing image search."}}