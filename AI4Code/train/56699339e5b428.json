{"cell_type":{"fb613666":"code","9fe7ecfd":"code","b0401ff3":"code","56b9da47":"code","2d1e7f7d":"code","7af6f9c0":"code","afd93567":"code","c2dfc05f":"code","2bc73f00":"code","8512d654":"code","d1176606":"code","45e8a9a3":"code","d6c46125":"code","f6c6c13d":"code","2e632e51":"code","71263dfe":"code","9d25189b":"code","42eef74b":"code","1e267e67":"code","e62daad5":"code","a40b6c6c":"code","86ef23b1":"code","ccc28515":"code","d5134d54":"code","83edb358":"code","28cd4038":"code","86ba8260":"code","e0f827b4":"code","2cd540a6":"code","0fe650db":"code","3e39c356":"code","c412b0d2":"code","b7af3ede":"code","47a87fd7":"code","a2a1d37a":"code","187d3f29":"code","2ea10b94":"code","ac6ffe1b":"code","ff1092eb":"code","372fefa9":"code","436fa78c":"code","7d128601":"code","d79979f2":"code","6d0f4981":"code","52b79634":"code","b930563a":"code","8c4a5a9c":"code","5cdb5571":"code","dd862a33":"code","e2ef6a1a":"code","15b5443b":"code","9ac62d8d":"code","3d5d4d83":"code","876ce466":"code","b402be8a":"code","7022e44e":"code","258055e7":"code","493b6a19":"code","e091cd9b":"code","b18bb672":"code","cf18e024":"code","fb79cbbd":"code","8bef63a6":"code","3e0649c4":"code","f7be6851":"markdown","e3c69376":"markdown","7ebdce89":"markdown","32181980":"markdown","dae8cb27":"markdown","521de181":"markdown","08dc39d5":"markdown","b273f692":"markdown","d4318348":"markdown","22b01fa8":"markdown","5a71a706":"markdown","5523b36b":"markdown","fc939093":"markdown","d3831665":"markdown","b7be1a56":"markdown","30ebd41b":"markdown","124e1bb6":"markdown","dafe6c44":"markdown","27264db1":"markdown","5f69e1d8":"markdown","56b5aaea":"markdown"},"source":{"fb613666":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib as plt\nimport seaborn as sns\nimport io\nimport cufflinks as cf\ncf.go_offline()\n\n%matplotlib inline","9fe7ecfd":"#df1 = pd.read_csv('vaccine-data.csv')\ndf1 = pd.read_csv(\"..\/input\/vaccinedata\/vaccine-data.csv\")","b0401ff3":"df1.head(5)","56b9da47":"print(\"########################################################################\")\nprint(\"                       Info Of the Data Set\")\nprint(\"########################################################################\")\ndf1.info()","2d1e7f7d":"print(\"########################################################\")\nprint(\"             NULL VALUES IN ASCENDING ORDER\")\nprint(\"########################################################\")\n\npd.options.display.min_rows = 115\ndf1.isnull().sum().sort_values(ascending=True)","7af6f9c0":"df1 = df1.drop(columns = ['total_cases_per_million', \n                          'new_cases_per_million', \n                          'total_deaths_per_million', \n                          'new_cases_smoothed_per_million', \n                          'new_deaths_smoothed_per_million',\n                          'new_deaths_per_million',\n                          'icu_patients_per_million', \n                          'hosp_patients_per_million', \n                          'weekly_icu_admissions_per_million', \n                          'weekly_hosp_admissions_per_million', \n                          'total_tests_per_thousand', \n                          'new_tests_per_thousand',\n                          'new_tests_smoothed_per_thousand',\n                          'total_vaccinations_per_hundred', \n                          'people_vaccinated_per_hundred', \n                          'people_fully_vaccinated_per_hundred', \n                          'total_boosters_per_hundred', \n                          'new_vaccinations_smoothed_per_million', \n                          'new_people_vaccinated_smoothed',\n                          'new_people_vaccinated_smoothed_per_hundred',\n                          'stringency_index', 'handwashing_facilities', \n                          'hospital_beds_per_thousand', \n                          'life_expectancy', \n                          'human_development_index', \n                          'excess_mortality_cumulative_per_million'])","afd93567":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,20))    \nsns.heatmap(df1.corr(), annot=False, linewidths=.5, ax=ax, cmap = 'mako')\n","c2dfc05f":"df2 = df1.copy()          #keeping copy of the original data\n\ndf2 = df2.drop(columns = ['population_density',\n                          'median_age', \n                          'aged_65_older', \n                          'aged_70_older', \n                          'gdp_per_capita', \n                          'extreme_poverty',\n                          'cardiovasc_death_rate',\n                          'diabetes_prevalence', \n                          'female_smokers', \n                          'male_smokers', \n                          'excess_mortality_cumulative', \n                          'excess_mortality',\n                          'reproduction_rate',\n                          'tests_per_case', \n                          'positive_rate', \n                          'new_cases_smoothed', \n                          'new_deaths_smoothed', \n                          'new_tests_smoothed'])","2bc73f00":"fig, ax = plt.subplots(figsize=(10,10))        \nsns.heatmap(df2.corr(), annot=False, linewidths=.5, ax=ax, cmap = 'mako')\n","8512d654":"df2 = df2.drop(columns = ['total_boosters', 'excess_mortality_cumulative_absolute', 'weekly_hosp_admissions', 'weekly_hosp_admissions','weekly_icu_admissions'])","d1176606":"df2.isnull().sum().sort_values(ascending=True)","45e8a9a3":"pd.options.display.float_format = '{:.4f}'.format #convert large numbers from scientific notation to regular numbers\ndf2.describe()","d6c46125":"df2.hist(figsize=(16, 20), bins=50, xlabelsize=8, ylabelsize=8); ","f6c6c13d":"df2.plot(kind = \"box\" , subplots = True , figsize = (20, 20), layout = (5, 3) )\nplt.show()","2e632e51":"#dropping columns that will not be relevant with greater than 80% null values\ndf_nan = df2.copy()\n\ndf_nan = df_nan.drop(columns = ['icu_patients', 'hosp_patients', 'tests_units']) #'continent'])","71263dfe":"#dropping rows that has low number of null values\n\ndf_nan.dropna(subset=['population'], inplace = True)","9d25189b":"#Last observation carried forward (LOCF) use the last valid observation to fill the missing value\n\ndf_nan[\"total_cases\"] = df_nan[\"total_cases\"].fillna(method='backfill')\ndf_nan[\"new_cases\"] = df_nan[\"new_cases\"].fillna(method='backfill')\ndf_nan[\"new_deaths\"] = df_nan[\"new_deaths\"].fillna(method='backfill')\ndf_nan[\"total_deaths\"] = df_nan[\"total_deaths\"].fillna(method='backfill')\ndf_nan[\"total_tests\"] = df_nan[\"total_tests\"].fillna(method='backfill')\ndf_nan[\"continent\"] = df_nan[\"continent\"].fillna(method='backfill')\n\n\n","42eef74b":"#filling values with interpolation (number between the previous and the next record)\n\"\"\"\ndf_nan[\"total_vaccinations\"] = df_nan[\"total_vaccinations\"].fillna(method='backfill')\ndf_nan[\"people_vaccinated\"] = df_nan[\"people_vaccinated\"].fillna(method='backfill')\ndf_nan[\"people_fully_vaccinated\"] = df_nan[\"people_fully_vaccinated\"].fillna(method='backfill')\ndf_nan[\"new_vaccinations\"] = df_nan[\"new_vaccinations\"].fillna(method='backfill')\ndf_nan[\"new_vaccinations_smoothed\"] = df_nan[\"new_vaccinations_smoothed\"].fillna(method='backfill')\n\n\"\"\"\ndf_nan[\"total_vaccinations\"] = df_nan[\"total_vaccinations\"].interpolate(method='linear', limit_direction='forward', axis=0)\ndf_nan[\"people_vaccinated\"] = df_nan[\"people_vaccinated\"].interpolate(method='linear', limit_direction='forward', axis=0)\ndf_nan[\"people_fully_vaccinated\"] = df_nan[\"people_fully_vaccinated\"].interpolate(method='linear', limit_direction='forward', axis=0)\ndf_nan[\"new_vaccinations\"] = df_nan[\"new_vaccinations\"].interpolate(method='linear', limit_direction='forward', axis=0)\ndf_nan[\"new_vaccinations_smoothed\"] = df_nan[\"new_vaccinations_smoothed\"].interpolate(method='linear', limit_direction='forward', axis=0)\ndf_nan[\"new_tests\"] = df_nan[\"new_tests\"].interpolate(method='linear', limit_direction='forward', axis=0)\n","1e267e67":"df_nan.dropna(subset=['total_vaccinations'], inplace = True)\ndf_nan.dropna(subset=['people_vaccinated'], inplace = True)\ndf_nan.dropna(subset=['people_fully_vaccinated'], inplace = True)\ndf_nan.dropna(subset=['people_fully_vaccinated'], inplace = True)\ndf_nan.dropna(subset=['new_vaccinations_smoothed'], inplace = True)\ndf_nan.dropna(subset=['new_vaccinations'], inplace = True)\ndf_nan.dropna(subset=['total_tests'], inplace = True)\ndf_nan.dropna(subset=['new_tests'], inplace = True)\n\n\n\ndf_nan.isnull().sum().sort_values(ascending=True)","e62daad5":"df_nan.shape","a40b6c6c":"#importing libraries for different visualisations\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.offline as py\nfrom plotly.offline import iplot\nfrom plotly.graph_objs import Scatter\n\npy.init_notebook_mode(connected=True)\ncf.go_offline()","86ef23b1":"#removing negative values\n\ndf_nan[df_nan['new_cases'] < 0 ]['date'].index\nnegatives = [4302,   4612,   9693,  13654,  17776,  25598,  26014,  29098,\n             32023,  32229,  33335,  34846,  35560,  35561,  35564,  35683,\n             36993,  43188,  43189,  43769,  43772,  43788,  43794,  43819,\n             43828,  43829,  43854,  45476,  47239,  52061,  54058,  55221,\n             56308,  60397,  60461,  60474,  60895,  61297,  61517,  61671,\n             63932,  64934,  70337,  70890,  71716,  71717,  74420,  75239,\n             78540,  79026,  80098,  82536,  85626,  87345,  88926,  88934,\n             89204,  89306,  90273,  97282, 100587, 109347, 109471, 109650,\n             116557, 116588, 116869, 118372, 121248, 121254, 123155, 123242,\n             123278, 123279, 127873, 127906, 130227, 130266, 131869, 136516,\n             137671]\n\ndf_nan.drop(negatives, inplace = True)","ccc28515":"#vreating a dataframe of groupby = countries, to analyse each country's result alone\n\ncountries = df_nan.groupby('iso_code').sum()\ncountries = countries.reset_index()\ncountries.drop(columns = ['total_cases', 'total_deaths'], inplace = True)","d5134d54":"cases = countries.sort_values(by = 'new_cases', ascending = False)\ncases.drop([152, 158, 159, 165, 162, 157, 164, 154, 165, 160, 161, 155, 163, 153, 156], inplace = True)\n\ndeaths = countries.sort_values(by = 'new_deaths', ascending = False)\ndeaths.drop([152, 158, 159, 165, 157, 162, 164, 154, 165, 160, 161, 155, 163, 153, 156], inplace = True)","83edb358":"#creating a dataframe for each country and the number of fully vaccinated people\n\nlocation_list = df_nan['location'].unique()\nfully_vaccinated = []\n\nfor location in location_list:\n    fully_vaccinated.append(df_nan[df_nan['location'] == location]['people_fully_vaccinated'].tail(1).values[0].round(decimals = 2))\n\ndf = pd.DataFrame([location_list, fully_vaccinated]).transpose()\n\n#removing rows that contain continents and country classifications\ndf.drop([231, 11, 223, 123, 91, 68, 155, 194, 69, 1], inplace = True)","28cd4038":"#creating a dataframe for the hgihest 20 countries in Covid-19 cases\n\n#cases['iso_code'].head(20).values\ncontries_list = ['USA', 'IND', 'BRA', 'GBR', 'RUS', 'FRA', 'TUR', 'DEU', 'IRN','ARG', \n                 'ESP', 'ITA', 'COL', 'IDN', 'MEX', 'POL', 'UKR', 'ZAF','PHL', 'NLD']\n\nUSA = df_nan[df_nan[\"iso_code\"].str.contains('USA', na = False)]\nIND = df_nan[df_nan[\"iso_code\"].str.contains('IND', na = False)]\nBRA = df_nan[df_nan[\"iso_code\"].str.contains('BRA', na = False)]\nGBR = df_nan[df_nan[\"iso_code\"].str.contains('GBR', na = False)]\nRUS = df_nan[df_nan[\"iso_code\"].str.contains('RUS', na = False)]\nFRA = df_nan[df_nan[\"iso_code\"].str.contains('FRA', na = False)]\nTUR = df_nan[df_nan[\"iso_code\"].str.contains('TUR', na = False)]\nDEU = df_nan[df_nan[\"iso_code\"].str.contains('DEU', na = False)]\nIRN = df_nan[df_nan[\"iso_code\"].str.contains('IRN', na = False)]\nARG = df_nan[df_nan[\"iso_code\"].str.contains('ARG', na = False)]\nESP = df_nan[df_nan[\"iso_code\"].str.contains('ESP', na = False)]\nITA = df_nan[df_nan[\"iso_code\"].str.contains('ITA', na = False)]\nCOL = df_nan[df_nan[\"iso_code\"].str.contains('COL', na = False)]\nIDN = df_nan[df_nan[\"iso_code\"].str.contains('IDN', na = False)]\nPOL = df_nan[df_nan[\"iso_code\"].str.contains('POL', na = False)]\nUKR = df_nan[df_nan[\"iso_code\"].str.contains('UKR', na = False)]\nZAF = df_nan[df_nan[\"iso_code\"].str.contains('ZAF', na = False)]\nPHL = df_nan[df_nan[\"iso_code\"].str.contains('PHL', na = False)]\nNLD = df_nan[df_nan[\"iso_code\"].str.contains('NLD', na = False)]\nMEX = df_nan[df_nan[\"iso_code\"].str.contains('MEX', na = False)]\nEGY = df_nan[df_nan[\"iso_code\"].str.contains('EGY', na = False)]\n\n\nworld = pd.concat([USA, IND, BRA, GBR, RUS, FRA, TUR, DEU, IRN, ARG, \n                   ESP, ITA, COL, IDN, MEX, POL, UKR, ZAF,PHL, NLD])","86ba8260":"#to be able to run the choromap on online notebooks\n\n!pip install chart_studio\n\ndef configure_plotly_browser_state():\n  import IPython\n  display(IPython.core.display.HTML('''\n        <script src=\"\/static\/components\/requirejs\/require.js\"><\/script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: '\/static\/base',\n              plotly: 'https:\/\/cdn.plot.ly\/plotly-latest.min.js?noext',\n            },\n          });\n        <\/script>\n        '''))","e0f827b4":"import chart_studio.plotly as py\nimport plotly.graph_objs as go\n\ndata = dict(type  = 'choropleth', \n\t\tlocations = cases['iso_code'], \n\t\tcolorscale = 'rdbu', \n        reversescale = True,\n\t\ttext = cases['iso_code'], \n\t\tz = cases['new_cases'],\n\t\tcolorbar = {'title' : 'cases around the world'})\n\nlayout = dict(title = 'cases around the world', \n              geo = dict(showframe = False, projection = {'type': 'equirectangular'}))\n\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap) ","2cd540a6":"x = world['date']\ny = world['total_cases']\n\nfig = px.line(world, \n              x = x, \n              y = y, \n              color='location' ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='Top 20 countries in total number cases',\n              labels=dict(x=\"Date\", y=\"total number of cases\"))\nfig.show()","0fe650db":"Total_Cases = df_nan[df_nan['location'] == 'World']['total_cases']\nDate = df_nan[df_nan['location'] == 'World']['date']\n\nfig = px.line(df_nan, \n              x = Date , \n              y = Total_Cases ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='Total cases in World',\n              labels=dict(x=\"Date\", y=\"total number of cases in World\"))\nfig.show()","3e39c356":"New_Cases = df_nan[df_nan['location'] == 'World']['new_cases']\nDate = df_nan[df_nan['location'] == 'World']['date']\n\nfig = px.line(df_nan, \n              x = Date , \n              y = New_Cases ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='new cases in World',\n              labels=dict(x=\"Date\", y=\"Number of new cases in World\"))\nfig.show()","c412b0d2":"x = df_nan[df_nan['location'] == 'World']['date']\ny = df_nan[df_nan['location'] == 'World']['people_fully_vaccinated']\n\nfig = px.line(df_nan, \n              x = x, \n              y = y ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='Fully Vaccinated People around the world',\n              labels=dict(x=\"Date\", y=\"Number of Fully vaccinated people\"))\nfig.show()","b7af3ede":"x = world[world['date'] > '2021-01-01']['date']\ny = world[world['date'] > '2021-01-01']['people_fully_vaccinated']\n\nfig = px.line(world, \n              x = x, \n              y = y, \n              color = world[world['date'] > '2021-01-01']['location'] ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='vaccination in Top 20 countries',\n              labels=dict(x=\"Date\", y=\"number of fully vaccinated\"))\nfig.show()","47a87fd7":"cases_df = cases.head(20)\nfig = px.colors.sequential.swatches_continuous()\n\nfig = px.bar(cases_df, \n             x ='iso_code', \n             y='new_cases', \n             color = 'new_cases',  \n             color_continuous_scale=px.colors.sequential.Oryel, \n             title='vaccination in the top 20 countries',\n             labels=dict(x= \"country\", y=\"Death number\", color = 'Death Number'),\n             barmode=\"group\")\nfig.show()","a2a1d37a":"deaths_df = deaths.head(20)\nfig = px.colors.sequential.swatches_continuous()\n\nfig = px.bar(deaths_df, \n             x ='iso_code', \n             y='new_deaths',\n             color = 'new_deaths', \n             labels=dict(x= \"country\", y=\"Death number\", color = 'Death Number'),\n             color_continuous_scale=px.colors.sequential.Blugrn , \n             title='COVID-19 death cases according to  countries',\n             barmode=\"group\")\nfig.show()","187d3f29":"sorted_df = df.sort_values(by = 1, ascending = False).head(20)\n\nfig = px.bar(sorted_df, \n             x = 0, \n             y = 1, \n             title='Numbers of fully vaccinated people in each country',\n             labels=dict(x= \"country\", y=\"number of fully vaccinated\", color = 'Country'),\n             color = 0)\nfig.show()","2ea10b94":"fig = px.scatter(USA, \n                 x=\"people_fully_vaccinated\", \n                 y=\"new_cases\", \n                 color=\"new_deaths\",\n                 hover_name=\"iso_code\", \n                 log_x= True, \n                 title='number of new cases relevance to number of vaccinated people -USA-',\n                 color_continuous_scale=px.colors.sequential.Plasma,\n                 labels=dict(x=\"number of fully vaccinate\", y=\"number of cases\", color = 'Death number'))\nfig.show()","ac6ffe1b":"y = df_nan[df_nan['location'] == 'World']['new_cases']\nx = df_nan[df_nan['location'] == 'World']['people_fully_vaccinated']\n\nfig = px.scatter(USA, \n                 x=x, \n                 y=y, \n                 color=\"new_deaths\",\n                 hover_name=y, \n                 log_x= True, \n                 color_continuous_scale=px.colors.sequential.Plasma,\n                 title='number of new cases relevance to number of vaccinated people -WORLD-',\n                 labels=dict(x=\"number of fully vaccinate\", y=\"number of cases\", color = 'Death number'))\nfig.show()","ff1092eb":"x = df_nan[df_nan['location'] == 'World']['new_cases'].sum()\ny = df_nan[df_nan['location'] == 'World']['new_deaths'].sum()\n\nfig = px.pie(df_nan, values=[x, y], color = [x, y], title='Percentage of Cases to Death')\nfig.show()","372fefa9":"fig = px.sunburst(world, \n                  path=['continent', 'iso_code'], \n                  values='new_cases',\n                  color='location', \n                  hover_data=['new_cases'])\nfig.show()","436fa78c":"y = world['new_cases']\nx = world['new_tests']\n\nfig = px.scatter(world, \n                 x=x, \n                 y=y, \n                 color=\"new_cases\",\n                 hover_name=y, \n                 log_x= True, \n                 color_continuous_scale=px.colors.sequential.Aggrnyl,\n                 title='effect of performing more tests on revealing new cases',\n                 labels=dict(x=\"number of tests\", y=\"number of cases\", color = 'Death number'))\nfig.show()","7d128601":"x = EGY[EGY['date'] > '2021-01-01']['date']\ny = EGY[EGY['date'] > '2021-01-01']['new_vaccinations']\n\nfig = px.line(EGY, \n              x = x, \n              y = y, \n              color= EGY[EGY['date'] > '2021-01-01']['location'] ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='vaccination progress in egypt',\n             labels=dict(x=\"Date\", y=\"vaccination\"))\nfig.show()","d79979f2":"x = EGY[EGY['date'] > '2021-01-01']['date']\ny = EGY[EGY['date'] > '2021-01-01']['people_fully_vaccinated']\n\nfig = px.line(EGY, \n              x = x, \n              y = y, \n              color= EGY[EGY['date'] > '2021-01-01']['location'] ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='vaccination progress in egypt',\n             labels=dict(x=\"Date\", y=\"vaccination\"))\nfig.show()","6d0f4981":"x = EGY['date']\ny = EGY['total_cases']\n\nfig = px.line(EGY, \n              x = x, \n              y = y, \n              color= EGY['location'] ,\n              line_shape=\"spline\", \n              render_mode=\"svg\", \n              title='new_cases in egypt',\n             labels=dict(x=\"Date\", y=\"vaccination\"))\nfig.show()","52b79634":"df_nan = df_nan.drop(columns = ['continent',  'new_vaccinations_smoothed', 'date'])","b930563a":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf_model = df_nan.copy()\n\ndf_model['iso_code'] = label_encoder.fit_transform(df_model['iso_code'])\ndf_model['location'] = label_encoder.fit_transform(df_model['location'])","8c4a5a9c":"#Linear regression model\nfrom sklearn.model_selection import train_test_split\n\nX = df_model.drop(\"new_cases\" , axis = 1).values\ny = df_model['new_cases'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","5cdb5571":"from sklearn.preprocessing import StandardScaler\n\nscale = StandardScaler ()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)","dd862a33":"from sklearn.linear_model import LinearRegression\n\n\nlr = LinearRegression()\nlr.fit(X_train,y_train)","e2ef6a1a":"lr.score(X_train,y_train)","15b5443b":"lr.score(X_test,y_test)","9ac62d8d":"from sklearn.linear_model import Ridge\nrid = Ridge()","3d5d4d83":"rid.fit(X_train,y_train)","876ce466":"rid.score(X_train,y_train)","b402be8a":"rid.score(X_test,y_test)","7022e44e":"from sklearn.linear_model import Lasso\n\nmodel_lasso = Lasso(alpha=0.01)\nmodel_lasso.fit(X_train, y_train) \n","258055e7":"pred_train_lasso= model_lasso.predict(X_train)","493b6a19":"model_lasso.score(X_train,y_train)","e091cd9b":"pred_test_lasso= model_lasso.predict(X_test)","b18bb672":"model_lasso.score(X_test,y_test)","cf18e024":"y_pred = lr.predict(X_test)\ny_pred2 = rid.predict(X_test)","fb79cbbd":"from sklearn.metrics import r2_score\n\nr2 = r2_score(y_test , y_pred)\nr2","8bef63a6":"import statsmodels.api as sm\nfrom scipy import stats\nX2 = sm.add_constant(X)\nest = sm.OLS(y,X2)\nest2 = est.fit()\nest2.summary()","3e0649c4":"y_pred = lr.predict(X_test)\ntest = pd.DataFrame({'Predicted':y_pred,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[:50])\nplt.legend(['Actual','Predicted'])\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","f7be6851":"# Dealing with NULLS","e3c69376":"### **We may drop columns that are duplicated but with different scales (in hundreds, thousands...etc) as original values will be more accurate and helpful to our study**\n\n","7ebdce89":"### the distribution of new cases according to the continents","32181980":"#### USA, India and Brazil have the highest number of total cases","dae8cb27":"### visualising the results","521de181":"# Visualisations and insights","08dc39d5":"# EDA \n### 1- Missing values\n### 2- Outliers\n### 3- Taking insights from data","b273f692":"### India was the highest to vaccinate its population due to the big wave that occured mid-june following the black fungus\n### other countries going with normal pace with USA being the 2nd after India","d4318348":"### we can see the ratio of death cases to new cases ratio is very low","22b01fa8":"### Egypt started vaccinating more people throught the third wave (August 2021)","5a71a706":"### From these informations we can already see that some features won't be relevant in our exploratory analysis, as there are too many missing values. Plus there is so much features to analyse that it may be better to concentrate on the ones which can give us real insights and have high correlation with the study we are onducting. most of the these features have NaN percentage of above 80% so it would be more helpful to drop them as well","5523b36b":"### we can see the effect of vaccinating people on lowering the number of new cases (both in USA and World) and the effect it has on decreasing deaths numbers\n### but now as we are going through the 4th wave, and the new emerging covid-19 variants, vaccination's effect becoming lower","fc939093":"### the curve for the cases is continuing to grow, as covid-19 is continuously developing new variants","d3831665":"### we can trace the number of cases around the world through the three waves since Oct 2020, and going for the 4th wave by Oct 2021","b7be1a56":"# MODELS\n## Linear Regression","30ebd41b":"### number of fully vaccinated people started increasing with higher speed starting from the beginning of 2021","124e1bb6":"## Lasso Regression","dafe6c44":"## KNN","27264db1":"### increasing to the number of tests performed on people for covid-19 reveals greater number of cases so we could have more accurate data and representations so governments can deal with it","5f69e1d8":"## Ridge Regression","56b5aaea":"# Outliers\n\n## I believe that dealing with outliers is of no use as the nature of the distribution of the data is left skewed, as the data is decreasing by time naturally."}}