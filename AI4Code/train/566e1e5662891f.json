{"cell_type":{"1f573313":"code","cf5d42dd":"code","c55f3d2b":"code","2ec966bf":"code","e2631522":"code","e2e8c351":"code","24276ff3":"code","59e43cdd":"code","df3394e4":"code","d6516465":"code","24b2f733":"code","cca2654e":"code","382f2b8e":"code","5dd4daa0":"code","d5860f17":"code","e30e0875":"code","c31b4bbf":"code","d1841021":"code","eafbd670":"code","ac3e2052":"code","446b2fc8":"code","4d43201a":"code","4be27c1f":"code","5d92ab48":"code","2870d0e3":"code","d71d0363":"code","800b52fc":"code","fc18bc83":"code","09e06574":"code","1770cc57":"code","78b160fa":"code","2e8d32d7":"code","d19ec689":"code","92ccd8f3":"code","109f0d64":"code","94babc04":"markdown","5e0ac802":"markdown","a10c3c1b":"markdown","37344d20":"markdown","c531600f":"markdown","cc16d172":"markdown","8d2a342e":"markdown"},"source":{"1f573313":"# Basic packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rd # generating random numbers\nimport datetime # manipulating date formats\n# Viz\nimport matplotlib.pyplot as plt # basic plotting\nimport seaborn as sns # for prettier plots\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","cf5d42dd":"candy = pd.read_csv('..\/input\/data-for-datavis\/candy.csv')","c55f3d2b":"candy.info()\n#There are no null \/ missing values, so the data looks cleaned up","2ec966bf":"candy.describe()\n#Below statiscal inference shows \n#1) Max win% is 84% and Min is 22.4%. This shows favorable relation to price%","e2631522":"candy.head()","e2e8c351":"def label_encode(df):\n    X = df.copy()\n    for colname in X.select_dtypes([\"category\"]):\n        X[colname] = X[colname].cat.codes\n    return X","24276ff3":"#Using iloc will keep rest of the data in the dataframe untouched\ncandy.iloc[:,[2,3,4,5,6,7,8,9,10]] = candy.iloc[:,[2,3,4,5,6,7,8,9,10]].astype('category') ","59e43cdd":"candy = label_encode(candy)\n#Once you convert the columns to categories, then label encode function can be used","df3394e4":"# Factorize also can be used for doing the encoding in simple function\nenco = pd.read_csv('..\/input\/data-for-datavis\/candy.csv')\nenco.bar = pd.factorize(enco.bar)[0]","d6516465":"enco.info()","24b2f733":"candy.info()\n#The transformation to categories to integers, gives dataset with integers\n#Reason for transforming categories is to integers is:\n#Correlation functions, Pairplot functions and Feature analysis can be done ","cca2654e":"# correlation matrix\ncor = candy.corr()","382f2b8e":"cor","5dd4daa0":"plt.figure(figsize=(14,10))\nsns.heatmap(cor,annot=True,square=True)","d5860f17":"cand_corr = candy.iloc[:,[2,3,4,5,6,7,8,9,10,11,12]].corrwith(candy.iloc[:,13])","e30e0875":"# Here we see the positive and negative correlation vividly\n# Setting up the canvas with 5 commands, and plotting distribution with 1 command\n# Importance of setting up environment can be seen, as we mask more influential features\nmy_colors = 'rgbkymc'\ncand_corr.plot(kind='bar')\nplt.xlabel('Features')\nplt.ylabel('Correlation with Win%')\nplt.title('Correlation Bar Chart')\nplt.grid()\nplt.show()","c31b4bbf":"#Building Bar plot with the line plot running over it\nbars = plt.bar(cand_corr.index,cand_corr.values, color='deepskyblue', width=0.73)\nplt.title('1 Year Returns(%)')\nplt.xlabel('Features', fontsize=24, fontname=\"Comic Sans MS\")\nplt.ylabel('Correlation', fontsize=24, fontname=\"Comic Sans MS\" )\nplt.plot(cand_corr.index,cand_corr.values, linewidth='2.0', color='black', marker='o', markersize='6')\nplt.grid()\nplt.xticks(cand_corr.index, rotation='vertical')\nplt.rcParams['figure.figsize']=(20,6)\nplt.rcParams['font.size'] = 14","d1841021":"candy.skew().plot()\n#Most of the features have positive skew","eafbd670":"sns.displot(candy[['pricepercent','sugarpercent']])\n#Distribution of price and sugar % is on scale 0 to 1. That is why they cannot be combined with win%","ac3e2052":"sns.displot(candy.winpercent)","446b2fc8":"colum = [2,3,4,5,6,7,8,9,10,11,12]","4d43201a":"for col in colum:\n  #plt.title(candy.columns[col])\n    sns.relplot(x='winpercent',y='pricepercent',hue=candy.columns[col],data=candy)\n","4be27c1f":"sns.catplot(x='chocolate',y='winpercent',data=candy,col='peanutyalmondy')","5d92ab48":"#You will see all this line of code is replaced by the pivot function and associated plot function at the bottom\nX = ['chocolate','fruity','caramel','peanutyalmondy','nougat','crispedricewafer','hard','bar','pluribus']\ntemp =[]\nr =[]\ni = 0\nfor col in X:\n  #print(col)\n  temp.append(list(candy[col].value_counts()))\n  r.append([np.arange(0,6,3)+i])\n  i = i + 0.25\n#print(temp,r)\n\ncolor = ['red','green','yellow','blue','black','orange','pink','brown','violet']\nfor i in range(len(temp)):\n  #print(r[i][0],temp[i])\n  p = plt.bar(r[i][0],temp[i], color= color[i], width=0.25, edgecolor='white')  \nplt.xlabel(['absent','present'])\nplt.legend(X)\nplt.show()","2870d0e3":"#checking how the function returns output\nlist(candy.chocolate.value_counts())","d71d0363":"X = cand_corr.index\nY = cand_corr.values\n\nmask1 = Y < 0.3   # masking with respect to R-SQUARD VALUE\nmask2 = Y >= 0.3\nmask3 = Y <= -0.3\n\nplt.bar(X[mask1], Y[mask1], color = 'red')\nplt.bar(X[mask2], Y[mask2], color = 'lime')\nplt.bar(X[mask3], Y[mask3], color = 'lime')\nplt.title('Target Correlation')\nplt.xlabel('Features', fontsize=24, fontname=\"Comic Sans MS\")\nplt.ylabel('Correlation', fontsize=24, fontname=\"Comic Sans MS\" )\nplt.grid()\nplt.xticks(cand_corr.index, rotation='vertical')\nplt.rcParams['figure.figsize']=(20,6)\nplt.rcParams['font.size'] = 14\nplt.show()","800b52fc":"df = candy.iloc[:-1,[1,2,3,4,7,8,6,5,9,10,11,12,13]]\n\nprint(df)","fc18bc83":"df_melted = pd.melt(df, id_vars=[\"competitorname\",\"pricepercent\",\"winpercent\",\"sugarpercent\"], value_vars=[\"chocolate\", \"fruity\",\"caramel\",\"bar\",\"pluribus\",\"peanutyalmondy\",\"nougat\",\"hard\"])\n\nprint(df_melted)","09e06574":"sns.boxplot(y=df_melted.winpercent,x=df_melted.variable)\n#We see all the plots are same, so there are lot of duplicates\n## Not a useful plot","1770cc57":"print(len(candy.winpercent.unique()))\nprint(len(candy.sugarpercent.unique()))\nprint(len(candy.pricepercent.unique()))","78b160fa":"df_pivot = pd.pivot_table(df_melted,values=['winpercent'],index=['variable'],columns=['value'],aggfunc=np.mean)","2e8d32d7":"df_pivot.plot(kind='bar')\n#The pivot transforms the entire look of the data, and gives more information too","d19ec689":"df_pivot.T.plot(kind='bar')\n#Once you apply transpose, you get to compare each of the features with other features easily","92ccd8f3":"qc = pd.qcut(candy['winpercent'],4)","109f0d64":"qc.head()","94babc04":"Changing the shape of the data in the data frame can be accomplished in 3 ways, melt, pivot and groupby. Below is just an experiment with those functions.","5e0ac802":"## Getting back on to our data visualisation","a10c3c1b":"## There you have it... All that the data can give you it has given. \nStay tuned for more such insightful visualisations","37344d20":"## Chocolate, peanutyalmondy tastes are having higher correlation to the win% than the sugar% and price%\n\n## We will see more intuitive way of seeing the same information","c531600f":"\n\n## Patterns \nAre everywhere around us. We as users of tools want to find a Hypothesis, a model or a  repeatable formula that can produce the output that we are seeing in the real world.\n\n## In datavisualisation we use the functions to bring out those patterns for below four reasons.\n\n1) Relationships between data features\n\n2) Dimensions that matters\n\n3) Tranformation or encoding that reduces complexity\n\n4) Mastering the data slicing and visualisations functions\n\n## Objective : \nTo visualise the data in multiple ways,and compare the insights it provides. You will see multiple functions, and assemby of functions to achive visualisations. These are done for the practical purpose of answering questions.\n\n## Strategy : \nAsking questions, imagining creative ways to pull out information from the data. \n\n## Tactics : \nUse the graphing modules under pyplot and seaborn. Extensive use of functions to achieve new ways to see the data. Categorical data points used for filtering the continous data points. This divides the observed space ","cc16d172":"#Starting Visualisation\n\nAfter learning about the data from the statistical inference, and making transformation that will help the visualising functions.","8d2a342e":"## Slight Detour: To try alternate function to do same task"}}