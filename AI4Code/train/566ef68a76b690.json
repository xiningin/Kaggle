{"cell_type":{"994caa25":"code","ed6d7369":"code","d93c949e":"code","099968fa":"code","39d1599f":"code","1eb5c649":"code","5cc992d7":"code","7b82974a":"code","99fdd890":"code","597f6817":"code","2cdb5838":"code","8a776774":"code","b7d43c87":"code","b0979837":"code","3929088e":"code","1371bc7b":"code","3a5c7fad":"code","d20fafd4":"code","6f7e5bd3":"code","d0914bfc":"code","f44a2a93":"code","cd0841f6":"code","79e6725e":"code","1a38cd65":"code","933e3171":"code","9f378e8d":"code","76b1f2fa":"code","55e8b9ae":"code","f218e21d":"code","90e700a5":"code","6d45d93a":"code","362409c2":"code","3714ce5f":"code","f4a4fde8":"code","4eed5124":"code","dbae06d1":"code","8f3fc689":"code","3ed28f19":"markdown","97887da1":"markdown","b76ac03a":"markdown","5ccc17d7":"markdown","5e0716e2":"markdown","a238a280":"markdown","285eaf79":"markdown"},"source":{"994caa25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed6d7369":"import matplotlib.pyplot as plt","d93c949e":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","099968fa":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","39d1599f":"football","1eb5c649":"edu = pd.read_csv('\/kaggle\/input\/assessment-2-ict-data-science\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","5cc992d7":"edu.head(2)","7b82974a":"edu.tail(2)","99fdd890":"edu.describe()","597f6817":"edu['Value']","2cdb5838":"edu[10:14]","8a776774":"edu['GEO']","b7d43c87":"edu.iloc[90:94][['TIME','GEO']]","b0979837":"edu[edu['Value'] > 6.5].tail()","3929088e":"edu[edu['Value'] > 6.5]","1371bc7b":"edu['Value'] > 6.5","3a5c7fad":"edu.max(axis = 0)","d20fafd4":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","6f7e5bd3":"s = edu[\"Value\"]\/100\ns.head()","d0914bfc":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","f44a2a93":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","cd0841f6":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","79e6725e":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","1a38cd65":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","933e3171":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","9f378e8d":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","76b1f2fa":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","55e8b9ae":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","f218e21d":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","90e700a5":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","6d45d93a":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","362409c2":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","3714ce5f":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","f4a4fde8":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","4eed5124":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","dbae06d1":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","8f3fc689":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","3ed28f19":"**1- Which is the size of the edu DataFrame (rows x columns)?**\n\n384 rows and 3 columns","97887da1":"**3- What does the method tail()return?**\n\nIt returns the last rows given by the argument","b76ac03a":"**5- What does this index return? What does the first index represent? And the second one?**\n\nIndex returns cells 90 to 94 of the columns TIME and GEO","5ccc17d7":"**7- What do you observe regarding the parameter ascending=False?**\n\nThis parameter has an impact on the sequence of values, it means that when you write \"ascending = false\" you get the values in a desceding way. On the contrary when you write \"ascending = true\" you get the values in ascending way.\n","5e0716e2":"**4- Which measures does the result show? It seems that it shows some default values, can you guess which ones?**\n\n\"Count\" gives the number of values in the \"TIME\" and \"Value\" column.\n\"Mean\" gives the mean of all values in the columns\n\"std\" is the standard deviation that measures the dispersion relative to the mean of the sample\n\"Min\" gives the minimum of the column\nPourcentages are giving the quartiles\n\"Max\" is giving the maximum value of the column.\n\n","a238a280":"**2- What happens if we give a number as argument to the method head()?**\n\nIt we put \"3\" as an argument, we get the first three rows.**\n","285eaf79":"**6- What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this a Series or a DataFrame?**\n\nThe operation \"edu[\u2019Value\u2019] > 6.5\" returns for each cell in the column value TRUE or FALSE if the condition is verified. If we add \"edu\", we get all the values that are > 6.5 in a table. Serie, one index and only one series, data frames one index and several series so here we have a dataframe.\n"}}