{"cell_type":{"419f96ae":"code","b614aa21":"code","f6f7c334":"code","a9cd73ad":"code","8e296b1c":"code","8b7669d3":"code","7dd3c773":"code","ee586ea4":"code","79c196ec":"code","118efbe0":"code","7cdaaa39":"code","6da8416a":"code","b8bdd587":"code","80da6e59":"code","e7e1c3bb":"code","06f616ee":"code","4a9cf792":"code","582d9e6b":"code","21f913aa":"code","c4f5447e":"code","82e3ece2":"code","7a41602e":"code","409a37fa":"code","7a05dad1":"code","9e2e6f3b":"code","a976c67f":"code","c9d737f1":"code","aa57957f":"code","db91c617":"code","1391578d":"code","ca682dc0":"code","0dfe8ee5":"code","641ed396":"code","4063fd43":"code","fb873868":"code","8b7473f6":"code","90bcbcf2":"code","9af73654":"code","5af63762":"code","131ad68d":"code","3bbe96c6":"code","4b6a4525":"code","d8fa4516":"code","bed27e5d":"code","40b056d2":"code","76492c93":"code","970a8dfb":"code","db7ddeba":"code","2d215c68":"code","6b3fd84b":"code","a6ae4e48":"code","b5165730":"code","62afb432":"code","ba6b8789":"code","d074714c":"code","6a1cef80":"code","5cce98ea":"code","1b5f9911":"code","f657e7c5":"code","7be02870":"code","76f0dedb":"code","0da4120e":"code","e14725dc":"code","4b10c21d":"code","6bccaa50":"code","9608a428":"code","ba47fcaa":"code","13915c7d":"code","a710a288":"code","3fa27ec1":"code","b541aff2":"code","bbccd7a7":"code","1cd15931":"code","0ebcb5a9":"markdown","903e69a3":"markdown","984155e5":"markdown","818e1ec7":"markdown","ded1d89c":"markdown","bac781fd":"markdown","83b6eda4":"markdown","af098170":"markdown"},"source":{"419f96ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b614aa21":"\n%matplotlib inline\n\nfrom IPython.display import display, Markdown\nimport matplotlib.pyplot as plt\nimport matplotlib\n\nimport seaborn as sns\nimport arviz as az\nimport pymc3 as pm\n\n\n","f6f7c334":"train_df = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv')\ntrain_df.head()\n                       ","a9cd73ad":"def get_per_country_data(df, country='Italy',initial_number=100):\n    \"\"\"\n    Will extract country and aggregate over dates (this is crucial for countries divided by states).\n    The initial data well be date with number of cases greater than or equal to initial_number\n    \"\"\"\n    this_country_df = df[df['Country\/Region']==country]\n    this_country_df = this_country_df[['ConfirmedCases', 'Fatalities', 'Date']].groupby('Date').sum()\n    this_country_df = this_country_df[this_country_df['ConfirmedCases']>= initial_number]\n    return(this_country_df)\n\n\ndef plot_newcases_and_fatalities(df, country):\n    fig = plt.figure(figsize=(15,5))\n    ax = df['ConfirmedCases'].plot.line(lw=3, color='blue', label='New Cases')\n    df['Fatalities'].plot.line(lw=3, color='red', ax=ax, label='Fatalities')\n    ax.legend( ['ConfirmedCases', 'Fatalities'], fontsize=20)\n    ax.grid()\n    ax.set_xlabel('Date', fontsize=20)\n    ax.set_ylabel('Counts', fontsize=20)\n    ax.set_title(country, fontsize=30)\n    \n    \ndef predict_value(trace, x):\n    A = trace['A'].mean()\n    B = trace['B'].mean()\n    K = trace['K'].mean()\n    y =   A \/ (1 + B*np.exp(-K*x))\n    return(np.exp(y))\n\nclass Country:\n    def __init__(self, name, n_passed_days, recent_date, model, trace, ppc, x, y):\n        self.name = name\n        self.n_passed_days_since100 = n_passed_days\n        self.recent_date = recent_date\n        self.model = model\n        self.trace = trace\n        self.ppc = ppc\n        self.y = y\n        self.x =x\n        \ndef plot_predicted_mu(models_dic, country='Italy', n_future_days=30):\n    name = models_dic[country].name\n    x = models_dic[country].x\n    y = models_dic[country].y\n    trace = models_dic[country].trace\n    mu = trace['mu'].mean(0)\n    sigma = trace['sigma'].mean(0)\n    \n    yhat = np.exp( mu)\n    \n    xhat = np.arange(n_future_days) \n    y_pred = [np.rint(predict_value(trace, x)) for x in xhat]\n    \n    \n\n    \n    _, ax = plt.subplots(1, 3, figsize=(20, 6))\n    ax[0].scatter(x, np.log(y), s=50, color='black')\n    ax[0].plot(x, mu, c='k',lw=4, color='blue')\n    ax[0].fill_between(x, mu+1*sigma, mu-1*sigma, alpha=0.6, color='C1')\n    ax[0].fill_between(x, mu+2*sigma, mu-2*sigma, alpha=0.6,  color='C1')\n    ax[0].set_xlabel('Days since 100 Confirmed Cases', fontsize=20)\n    ax[0].set_ylabel('log(Confirmed Cases)', fontsize=20)\n    ax[0].set_title(name, fontsize=30)\n    ax[0].grid()\n    \n    ax[1].scatter(x, y, s=50, color='black')\n    ax[1].plot(x, yhat, c='k',lw=4, color='blue')\n    ax[1].set_xlabel('Days since 100 Confirmed Cases', fontsize=20)\n    ax[1].set_ylabel('Confirmed Cases', fontsize=20)\n    ax[1].set_title(name, fontsize=30)\n    ax[1].grid()\n    \n    ax[2].scatter(xhat, y_pred, s=50, color='black')\n    ax[2].axvline(x[-1], color='red', linestyle='--')\n    ax[2].set_xlabel('Days since 100 Confirmed Cases', fontsize=20)\n    ax[2].set_ylabel('Confirmed Cases', fontsize=20)\n    ax[2].set_title( 'Future ', fontsize=30)\n    ax[2].grid()\n    \n\n    ","8e296b1c":"# China\ncountry = 'China'\nlower = 0\nupper = 800000\nchina_df = get_per_country_data(train_df, country=country,initial_number=lower)\nchina_df = china_df[china_df['ConfirmedCases'] <=  upper]\n\nprint(china_df.shape)\nchina_df.head()\n# china_df.tail()\n","8b7669d3":"plot_newcases_and_fatalities(china_df, country='China')","7dd3c773":"\ny = np.log(china_df.ConfirmedCases.values- china_df.ConfirmedCases.values[0]+1)\nx = np.arange(1, len(y)+1)\n\nplt.plot(x, y)\nplt.axhline(12, color='red')\n","ee586ea4":"\n\nwith pm.Model() as china_model:\n    sigma = pm.Normal('sigma', mu=2, sd=10)\n    C = pm.Normal('C', mu=5, sd=10)\n    K = pm.Uniform('K', 0, 1)\n    mu = pm.Deterministic('mu', C*(1 -  np.exp(-K*x)))\n    \n    y_pred = pm.Normal('y_pred', mu=mu, sd=sigma,  observed=y)\n    china_trace = pm.sample(1000, tune=1000, chains=4) ","79c196ec":"## PPC\nchina_ppc = pm.sample_posterior_predictive(china_trace, samples=5000, model=china_model)","118efbe0":"_, ax = plt.subplots(figsize=(12, 6))\nchina_ppc['y_pred'].shape\nax.hist([y_pred.mean() for y_pred in china_ppc['y_pred']], bins=20, alpha=0.5)\nax.axvline(y.mean())\nax.set(title='China: Posterior Predictive of the mean', xlabel='mean', ylabel='Frequency')","7cdaaa39":"pm.summary(china_trace, var_names=['C', 'K', 'sigma'])","6da8416a":"pm.traceplot(china_trace, var_names=['C', 'K', 'sigma'])","b8bdd587":"C = china_trace['C'].mean()\nsaturation = np.exp(C) + china_df.ConfirmedCases.values[0]\nsaturation","80da6e59":"_, ax = plt.subplots(1,1, figsize=(8,8))\nplt.scatter(x, y, s=50, color='black')\nplt.ylabel('log(ConfirmedCases)', fontsize=20)\nplt.xlabel('dates', fontsize=20)\nchina_mu_m = china_trace['mu'].mean(0) \nsigma= china_trace['sigma'].mean(0)\nprint(sigma)\nplt.plot(x, china_mu_m, c='k',lw=4, color='blue')\nplt.fill_between(x, china_mu_m+1*sigma, china_mu_m-1*sigma, alpha=0.6, color='C1')\nplt.fill_between(x, china_mu_m+2*sigma, china_mu_m-2*sigma, alpha=0.6,  color='C1')\nplt.title(country)","e7e1c3bb":"yhat_china = np.exp(china_mu_m) + (china_df.ConfirmedCases.values[0]-1)\n_, ax = plt.subplots(1,1, figsize=(8,8))\n\nplt.scatter(x, china_df.ConfirmedCases.values,  s=40, color='blue')\nplt.plot(x, yhat_china, lw=3, color='red')\nplt.ylabel('ConfirmedCases', fontsize=20)\nplt.xlabel('dates', fontsize=20)\nplt.yscale('log')","06f616ee":"N= 20\ntrain_agg_df = train_df[['Country\/Region', 'Date', 'ConfirmedCases', 'Fatalities']].groupby(['Country\/Region', 'Date']).sum()\n# train_agg_df.head()\ntop_countries = train_agg_df.groupby('Country\/Region').sum().sort_values(by='ConfirmedCases').tail(N).index\ntop_countries","4a9cf792":"# class Country:\n#     def __init__(self, name, n_passed_days, recent_date, model, trace, ppc, x, y):\n#         self.name = name\n#         self.n_passed_days_since100 = n_passed_days\n#         self.recent_date = recent_date\n#         self.model = model\n#         self.trace = trace\n#         self.ppc = ppc\n#         self.y = y\n#         self.x =x\n    ","582d9e6b":"LOWER = 100\ncountries_df = []\nlower = 100\ni = 0\nfor country in top_countries:\n    if country =='China':\n        continue ### China has been delt with a different model\n    df = get_per_country_data(train_df, country, initial_number=100)\n#     print(df.shape)\n    if (df.shape[0] >= 15):\n        i += 1\n\n        df['country'] = country\n        df['days_since_100'] = np.arange(1, df.shape[0]+1)\n        print('Country: ', country, df.shape[0], df.index[0])\n        countries_df.append(df)\n    \ncount_since_100_df = pd.concat(countries_df, axis=0)\ncount_since_100_df = count_since_100_df.reset_index()\ncount_since_100_df.shape\ncount_since_100_df.head()\n","21f913aa":"selected_countris = np.unique(count_since_100_df.country.values)\n# selected_countris\n\ncountries_dic = {}\n\nfor a_country in selected_countris:\n    print('********* ' , a_country, ' ********')\n    df = count_since_100_df[count_since_100_df.country == a_country]\n    last_date = df.Date.values[-1]\n    days_since100 = df.shape[0]    \n    y = df. ConfirmedCases\n    x = np.arange(len(y))\n    with pm.Model() as model:\n        A = pm.Normal('A', mu=5, sd=10)\n        B = pm.Normal('B', mu=2, sd=10)\n        K = pm.HalfCauchy('K', 1)\n        sigma = pm.Normal('sigma', mu=5, sd=10)\n    \n        mu = pm.Deterministic('mu', A \/ (1 + B*np.exp(-K*x)))\n        y_pred = pm.Normal('y_pred', mu=mu, sd=sigma, observed=np.log(y)) ## \n    \n        trace = pm.sample(2000, tune=2000, chains=4)\n        ppc = pm.sample_posterior_predictive(trace, 2000)\n        \n        country_obj = Country(name=a_country, n_passed_days=days_since100, recent_date=last_date, model=model, trace=trace, ppc=ppc, x=x, y=y)\n        countries_dic[a_country] = country_obj\n        \n        \n    ","c4f5447e":"countries_dic['Italy'].x","82e3ece2":"# def predict_future(models_dic, country='Italy', n_future_days=30):\n#     n_passed_days_since100 = models_dic[country].n_passed_days_since100\n#     x = models_dic[country].x\n#     y = models_dic[country].y\n#     trace = models_dic[country].trace\n    \n    \n#     _, ax = plt.subplots(1, 1, figsize=(16, 8))\n    \n    ","7a41602e":"  \n    \n   \n\nplot_predicted_mu(countries_dic, country='Italy', n_future_days=60)\n\n\n","409a37fa":"pm.summary(countries_dic['Italy'].trace, var_names=['A', 'B', 'K', 'sigma'])","7a05dad1":"plot_predicted_mu(countries_dic, country='United Kingdom', n_future_days=30)","9e2e6f3b":"pm.summary(countries_dic['United Kingdom'].trace, var_names=['A', 'B', 'K', 'sigma'])","a976c67f":"plot_predicted_mu(countries_dic, country='Spain', n_future_days=30)","c9d737f1":"pm.summary(countries_dic['Spain'].trace, var_names=['A', 'B', 'K', 'sigma'])","aa57957f":"plot_predicted_mu(countries_dic, country='France', n_future_days=30)","db91c617":"plot_predicted_mu(countries_dic, country='Korea, South', n_future_days=60)","1391578d":"plot_predicted_mu(countries_dic, country='Iran', n_future_days=60)","ca682dc0":"## Italy\ncountry = 'Italy'\nlower = 100\nupper = 800000\nthis_country_df = get_per_country_data(train_df, country=country,initial_number=lower)\n\n\n\n_, ax = plt.subplots(figsize=(12, 6))\nthis_country_df['ConfirmedCases'].plot.line(ax=ax)\nax.set(title='Italy: Posterior Predictive of the mean', xlabel='date', ylabel='ConfirmedCases')\n\n\n","0dfe8ee5":"\nplot_newcases_and_fatalities(this_country_df, country=country)","641ed396":"_, ax = plt.subplots(figsize=(6, 6))\ny = this_country_df.ConfirmedCases\nx = np.arange(1, len(y)+1)\nprint('number of days', len(y))\nsns.scatterplot(x, np.log(y))\nax.set_ylabel('log(ConfirmedCases)')","4063fd43":"### Italy  Expony Decay (Increasing) y= a \/ (1 + b e-kx ), k > 0\nwith pm.Model() as italy_edi_model:\n    A = pm.Normal('A', mu=5, sd=10)\n    B = pm.Normal('B', mu=2, sd=10)\n    K = pm.HalfCauchy('K', 1)\n    sigma = pm.Normal('sigma', mu=5, sd=10)\n    \n    mu = pm.Deterministic('mu', A \/ (1 + B*np.exp(-K*x)))\n    y_pred = pm.Normal('y_pred', mu=mu, sd=sigma, observed=np.log(y)) ## \n    \n    italy_edi_trace = pm.sample(2000, tune=2000, chains=4)\n    italy_ppc = pm.sample_posterior_predictive(italy_edi_trace, 2000)","fb873868":"pm.summary(italy_edi_trace, var_names=['A', 'B', 'K', 'sigma'])","8b7473f6":"future_dates = np.arange(30, 60)\n[np.rint(predict_value(italy_edi_trace, x)) for x in future_dates]","90bcbcf2":"italy_ppc['y_pred'].shape\n_, ax = plt.subplots(figsize=(6, 6))\nax.hist([y_pred.mean() for y_pred in italy_ppc['y_pred']], bins=19, alpha=0.5)\nax.axvline(np.log(y).mean())\nax.set(title= country + ': Posterior predictive of the mean', xlabel='mean(x)', ylabel='Frequency');\n","9af73654":"plt.scatter(x, np.log(y), s=50, color='black')\nitaly_mu_m = italy_edi_trace['mu'].mean(0)\nsigma= italy_edi_trace['sigma'].mean(0)\nprint(sigma)\nplt.plot(x, italy_mu_m, c='k',lw=4, color='blue')\nplt.fill_between(x, italy_mu_m+1*sigma, italy_mu_m-1*sigma, alpha=0.6, color='C1')\nplt.fill_between(x, italy_mu_m+2*sigma, italy_mu_m-2*sigma, alpha=0.6,  color='C1')\nplt.xlabel('Days from >= 10', fontsize=10)\nplt.ylabel('log(Confirmed Cases)', fontsize=10)\nplt.title(country, fontsize=20)","5af63762":"plt.scatter(x, y, s=50, color='black')\nplt.yscale('log')\nitaly_yhat = np.exp( italy_edi_trace['mu'].mean(0)) \nplt.plot(x, italy_yhat, color='red', lw=3)\nplt.xlabel('Days from >= 10', fontsize=10)\nplt.ylabel('Confirmed Cases', fontsize=10)\nplt.title('Italy', fontsize=20)\nplt.axvline(23,  color='C1', linestyle='--')\n","131ad68d":"### Italy Negative Binomial\n\n### It doesnt look like a good fit. Since I log-transform the data, Normal likelihood seems to be a better option.\n### I have left the following nex cells for just to illustration purpose, otherwise, I will be using normal distribution\n\n\nwith pm.Model() as italy_nb_model:\n    A = pm.Normal('A', mu=5, sd=10)\n    B = pm.Normal('B', mu=2, sd=10)\n    K = pm.HalfCauchy('K', 1)\n    sigma = pm.Normal('sigma', mu=5, sd=10)\n    \n    mu = pm.Deterministic('mu', A \/ (1 + B*np.exp(-K*x)))\n    y_pred = pm.NegativeBinomial('y_pred', mu, sigma, observed=np.log(y))\n   \n    \n    italy_nb_trace = pm.sample(2000, tune=2000, chains=4)\n    italy_nb_ppc = pm.sample_posterior_predictive(italy_edi_trace, 2000)\n","3bbe96c6":"pm.summary(italy_nb_trace, var_names=['A', 'B', 'K', 'sigma'])","4b6a4525":"italy_ppc['y_pred'].shape\n_, ax = plt.subplots(figsize=(6, 6))\nax.hist([y_pred.mean() for y_pred in italy_nb_ppc['y_pred']], bins=19, alpha=0.5)\nax.axvline(np.log(y).mean())\nax.set(title= country + ': NB Posterior predictive of the mean', xlabel='mean(x)', ylabel='Frequency');\n","d8fa4516":"plt.scatter(x, np.log(y), s=50, color='black')\nnb_italy_mu_m = italy_nb_trace['mu'].mean(0)\nsigma= italy_nb_trace['sigma'].mean(0)\nprint(sigma)\nplt.plot(x, nb_italy_mu_m, c='k',lw=4, color='blue')\nplt.fill_between(x, nb_italy_mu_m+1*sigma, nb_italy_mu_m-1*sigma, alpha=0.6, color='C1')\nplt.fill_between(x, nb_italy_mu_m+2*sigma, nb_italy_mu_m-2*sigma, alpha=0.6,  color='C1')\nplt.xlabel('Days from >= 10', fontsize=10)\nplt.ylabel('log(Confirmed Cases)', fontsize=10)\nplt.title(country, fontsize=20)","bed27e5d":"\n### Iran\nnext_country = 'Iran'\nlower = 10\nupper = 800000\niran_df = get_per_country_data(train_df, country=next_country, initial_number=lower)\n\n\n\nplot_newcases_and_fatalities(iran_df, country=next_country)\n\n  ","40b056d2":"y_iran = iran_df.ConfirmedCases.values\ny_iran = y_iran \nx = np.arange(1, len(y_iran)+1)\n# plt.plot(x, np.log(y))\n\nwith pm.Model() as iran_edi_model:\n    A = pm.Normal('A', mu=5, sd=10)\n    B = pm.Normal('B', mu=2, sd=10)\n    K = pm.HalfCauchy('K', 1)\n    sigma = pm.Normal('sigma', mu=5, sd=10)\n    \n    mu = pm.Deterministic('mu', A \/ (1 + B*np.exp(-K*x)))\n    irany_pred = pm.Normal('irany_pred', mu=mu, sd=sigma, observed=np.log(y_iran )) \n    \n    iran_edi_trace = pm.sample(2000, tune=2000, chains=4)\n    iran_ppc = pm.sample_posterior_predictive(iran_edi_trace, 2000)","76492c93":"pm.summary(iran_edi_trace, var_names=['A', 'B', 'K', 'sigma'])","970a8dfb":"future_dates = np.arange(30, 60)\n[np.rint(predict_value(iran_edi_trace, x)) for x in future_dates]","db7ddeba":"### Mean of PPC doesnt match with mean of data reported!!!!\n\niran_ppc['irany_pred'].shape\n_, ax = plt.subplots(figsize=(6, 6))\nax.hist([y_pred.mean() for y_pred in iran_ppc['irany_pred']], bins=19, alpha=0.5)\nax.axvline(np.log(y_iran).mean(), color='red', linestyle='--')\nax.set(title= next_country + ': Posterior predictive of the mean', xlabel='mean(x)', ylabel='Frequency');\n","2d215c68":"plt.scatter(x, np.log(y_iran), s=50, color='black')\niran_mu_m = iran_edi_trace['mu'].mean(0)\nsigma = iran_edi_trace['sigma'].mean(0)\nprint(sigma)\nplt.plot(x, iran_mu_m, c='k',lw=4, color='blue')\nplt.fill_between(x, iran_mu_m+1*sigma, iran_mu_m-1*sigma, alpha=0.6, color='C1')\nplt.fill_between(x, iran_mu_m+2*sigma, iran_mu_m-2*sigma, alpha=0.6,  color='C1')\nplt.xlabel('Days from >= 10', fontsize=10)\nplt.ylabel('log(Confirmed Cases)', fontsize=10)\nplt.title(next_country, fontsize=20)","6b3fd84b":"plt.scatter(x, y_iran, s=50, color='black')\niran_yhat = np.exp( iran_edi_trace['mu'].mean(0)) \nplt.plot(x, iran_yhat, color='red', lw=3)\nplt.xlabel('Days from >= 10', fontsize=10)\nplt.ylabel('Confirmed Cases', fontsize=10)\nplt.title(next_country, fontsize=20)\nplt.axvline(25,  color='C1', linestyle='--')\n","a6ae4e48":"\nplt.scatter(x, np.log(y_iran), s=50, color='black')\nmu_m = iran_edi_trace['mu'].mean(0)\nsigma= iran_edi_trace['sigma'].mean(0)\nprint(sigma)\nplt.plot(x, mu_m, c='k',lw=4, color='blue')\nplt.fill_between(x, mu_m+1*sigma, mu_m-1*sigma, alpha=0.6, color='C1')\nplt.fill_between(x, mu_m+2*sigma, mu_m-2*sigma, alpha=0.6,  color='C1')","b5165730":"# _, ax = plt.subplots(1,1, figsize=(6,6))\n\n# plt.scatter(x, y, s=50, color='black')\n# mu_m = np.exp(new_case_trace['mu'].mean(0))\n# sigma= np.exp(new_case_trace['sigma'].mean(0))\n# print(sigma)\n# plt.plot(x, mu_m, c='k',lw=4, color='blue')\n# plt.fill_between(x, mu_m + np.exp(1)*sigma, mu_m- np.exp(1)*sigma, alpha=0.6,  color='C1')\n# plt.fill_between(x, mu_m + np.exp(2)*sigma, mu_m- np.exp(2)*sigma, alpha=0.6,  color='C1')\n# ax.axvline(x=22, lw=1, color='red')\n# ax.set_xlabel('Days after 100 cases', fontsize=20)\n# ax.set_ylabel('Number of new cases', fontsize=20)\n# ax.set_title(country, fontsize=30)","62afb432":"country = 'Korea, South'\nlower =100\nthis_country_df = get_per_country_data(train_df, country=country, initial_number=lower)\nplot_newcases_and_fatalities(this_country_df, country=a_country)\n\n ","ba6b8789":"_, ax = plt.subplots(figsize=(6, 6))\ny = this_country_df.ConfirmedCases\nx = np.arange(1, len(y)+1)\nprint('number of days', len(y))\nsns.scatterplot(x, np.log(y))\nax.set_ylabel('log(ConfirmedCases)')","d074714c":"\nwith pm.Model() as country_model:\n    A = pm.Normal('A', mu=5, sd=10)\n    B = pm.Normal('B', mu=2, sd=10)\n    K = pm.HalfCauchy('K', 1)\n    sigma = pm.Normal('sigma', mu=5, sd=10)\n    \n    mu = pm.Deterministic('mu', A \/ (1 + B*np.exp(-K*x)))\n    y_pred = pm.Normal('y_pred', mu, sigma, observed=np.log(y))\n   \n    \n    country_trace = pm.sample(2000, tune=2000, chains=4)\n    country_ppc = pm.sample_posterior_predictive(country_trace, 2000) ","6a1cef80":"pm.summary(country_trace, var_names=['A', 'B', 'K', 'sigma'])","5cce98ea":"\nfuture_dates = np.arange(30, 60)\n[np.rint(predict_value(country_trace, x)) for x in future_dates]\n\n","1b5f9911":"country_ppc['y_pred'].shape\n_, ax = plt.subplots(figsize=(6, 6))\nax.hist([y_pred.mean() for y_pred in country_ppc['y_pred']], bins=19, alpha=0.5)\nax.axvline(np.log(y).mean())\nax.set(title= country + ': Posterior predictive of the mean', xlabel='mean(x)', ylabel='Frequency');","f657e7c5":"plt.scatter(x, np.log(y), s=50, color='black')\ncountry_mu_m = country_trace['mu'].mean(0)\ncountry_sigma = country_trace['sigma'].mean(0)\nprint(country_sigma)\nplt.plot(x, country_mu_m, c='k',lw=4, color='blue')\nplt.fill_between(x, country_mu_m+1*country_sigma, country_mu_m-1*country_sigma, alpha=0.6, color='C1')\nplt.fill_between(x, country_mu_m+2*country_sigma, country_mu_m-2*country_sigma, alpha=0.6,  color='C1')\nplt.xlabel('Days from >= 100', fontsize=10)\nplt.ylabel('log(Confirmed Cases)', fontsize=10)\nplt.title(country, fontsize=20)","7be02870":"plt.scatter(x, y, s=50, color='black')\n\nyhat = np.exp(country_trace['mu'].mean(0)) + y[0] \nplt.plot(x, yhat, color='red', lw=3)\nplt.yscale('log')\nplt.xlabel('Days from >= 10', fontsize=10)\nplt.ylabel('Confirmed Cases', fontsize=10)\nplt.title(country, fontsize=20)\n","76f0dedb":"# N= 20\n# train_agg_df = train_df[['Country\/Region', 'Date', 'ConfirmedCases', 'Fatalities']].groupby(['Country\/Region', 'Date']).sum()\n# # train_agg_df.head()\n# top_countries = train_agg_df.groupby('Country\/Region').sum().sort_values(by='ConfirmedCases').tail(N).index\n# top_countries","0da4120e":"\ncountries_df = []\nlower = 100\n\nfor country in top_countries:\n    df = get_per_country_data(train_df, country, initial_number=100)\n    df['country'] = country\n    df['days_since_100'] = np.arange(1, df.shape[0]+1)\n    print('Country: ', country, df.shape[0], df.index[0])\n    countries_df.append(df)\n    \ncount_since_100_df = pd.concat(countries_df, axis=0)\ncount_since_100_df = count_since_100_df.reset_index()\ncount_since_100_df.shape\ncount_since_100_df.head()\n","e14725dc":"NUM_COLORS = len(top_countries)\nclrs = sns.color_palette('husl', n_colors=NUM_COLORS)\n\n_, ax = plt.subplots(1,1, figsize=(15, 10))\nax.set_yscale('log')\nax.set_xlim((0, 60))\nfor i, country in  enumerate(top_countries):\n    col = clrs[i]\n    if country == 'Iran':\n        col = 'black'\n    df = count_since_100_df[count_since_100_df.country==country]\n    sns.lineplot(x='days_since_100', y='ConfirmedCases',data=df, ax=ax, label=country, lw=6, color=col)\n","4b10c21d":"plt.figure(figsize=(15,5))\n\ntop_n_countires_df = train_agg_df.loc[top_countries].reset_index('Country\/Region')\nax = sns.lineplot(data=top_n_countires_df.reset_index('Date'), y='ConfirmedCases', hue='Country\/Region', x='Date', lw=5)\na = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='small'  \n)","6bccaa50":"models_and_traces = {}\nlower = 10\nfor country in top_countries:\n    if (country =='China') or (country =='Iran') or (country =='Italy'):\n        continue\n    print('modeling:', country)\n    \n    df = get_per_country_data(train_df, country=country, initial_number=lower)\n    y = df.ConfirmedCases.values\n    y = y - y[0]+1\n    x = np.arange(1, len(y)+1)\n    \n    with pm.Model() as model:\n        A = pm.Normal('A', mu=5, sd=10)\n        B = pm.Normal('B', mu=2, sd=10)\n        K = pm.HalfCauchy('K', 1)\n        sigma = pm.Normal('sigma', mu=5, sd=10)\n    \n        mu = pm.Deterministic('mu', A \/ (1 + B*np.exp(-K*x)))\n        y_pred = pm.Normal('irany_pred', mu=mu, sd=sigma, observed=np.log(y )) \n    \n        trace = pm.sample(2000, tune=2000, chains=4)\n        ppc = pm.sample_posterior_predictive(trace, 2000)\n        models_and_traces[country] = (model, trace, ppc)\n    \n        \n        \n        ","9608a428":"spain_model, spain_trace, spain_ppc = models_and_traces['Spain']\npm.summary(spain_trace, var_names=['A', 'B', 'K', 'sigma'])\n\n\nspain_df = get_per_country_data(train_df, country=\"Spain\", initial_number=lower)\nspain_y = spain_df.ConfirmedCases.values\nspain_y = spain_y - spain_y[0]+1\nspain_x = np.arange(1, len(spain_y)+1)\n\n\n\n\nplt.scatter(spain_x, np.log(spain_y), s=50, color='black')\nspain_mu_m = spain_trace['mu'].mean(0)\nspain_mu_m.shape\nspain_sigma= spain_trace['sigma'].mean(0)\nprint(spain_sigma)\nplt.plot(spain_x, spain_mu_m, c='k',lw=4, color='blue')\nplt.fill_between(spain_x, spain_mu_m+1*spain_sigma, spain_mu_m-1*spain_sigma, alpha=0.6, color='C1')\nplt.fill_between(spain_x, spain_mu_m+2*spain_sigma, spain_mu_m-2*spain_sigma, alpha=0.6,  color='C1')","ba47fcaa":"### Negative Binomial with Exponential regression\ncountry = 'Iran'\nlower =10\n\ndf = get_per_country_data(train_df, country=country, initial_number=lower)\ny = df.ConfirmedCases.values\n\nx = np.arange(1, len(y)+1)\n\nplt.plot(x, y)","13915c7d":"with pm.Model() as nb_ex_model:\n    ### Priors\n    A = pm.Normal('A', 5, 10)\n    B = pm.Normal('B', 1, 10)\n    sigma = pm.HalfNormal('sigma', 1)\n    \n    tetha = pm.Deterministic('tetha', A + B* x)\n    y_pred = pm.NegativeBinomial('y_pred', tetha, sigma, observed=np.log(y))\n    nb_ex_trace = pm.sample(2000, tune=2000, chains=4)\n    nb_ex_ppc = pm.sample_posterior_predictive(nb_ex_trace, samples=100)\n","a710a288":"pm.summary(nb_ex_trace, var_names=['A', 'B',  'sigma'])","3fa27ec1":"a_m = np.exp(nb_ex_trace['A'].mean())\nb_m = np.exp(nb_ex_trace['B'].mean())\nyhat = a_m * b_m ** x\n\n\nplt.scatter(x, y)\nplt.plot(x, yhat)","b541aff2":"#  hierarchical_models  = {}\n# tmp_df = top_n_countires_df[top_n_countires_df['Country\/Region']!= 'China']\n# tmp_df = tmp_df[tmp_df['Country\/Region'] != 'Cruise Ship']\n\n# countries = np.unique(tmp_df['Country\/Region'].values)\n# n_countries = len(countries)\n# countries\n\n\n# # idx = pd.Categorical(tmp_df['Country\/Region']).codes\n# # groups = len(np.unique(idx))\n# # groups\n\n\n# # Hyperpriors for group nodes\n#     mu_a = pm.Normal('mu_a', mu=0., sigma=100)\n#     sigma_a = pm.HalfNormal('sigma_a', 5.)\n#     mu_b = pm.Normal('mu_b', mu=0., sigma=100)\n#     sigma_b = pm.HalfNormal('sigma_b', 5.)\n\n#     # Intercept for each county, distributed around group mean mu_a\n#     # Above we just set mu and sd to a fixed value while here we\n#     # plug in a common group distribution for all a and b (which are\n#     # vectors of length n_counties).\n#     a = pm.Normal('a', mu=mu_a, sigma=sigma_a, shape=n_counties)\n#     # Intercept for each county, distributed around group mean mu_a\n#     b = pm.Normal('b', mu=mu_b, sigma=sigma_b, shape=n_counties)\n\n#     # Model error\n#     eps = pm.HalfCauchy('eps', 5.)\n\n#     radon_est = a[county_idx] + b[county_idx]*data.floor.values\n\n#     # Data likelihood\n#     radon_like = pm.Normal('radon_like', mu=radon_est,\n#                            sigma=eps, observed=data.log_radon)","bbccd7a7":"#  hierarchical_models  = {}\n# tmp_df = top_n_countires_df[top_n_countires_df['Country\/Region']!= 'China']\n# tmp_df = tmp_df[tmp_df['Country\/Region'] != 'Cruise Ship']\n\n# y = tmp_df['ConfirmedCases'].values\n# x = np.arange(len(y))\n\n\n\n# countries = np.unique(tmp_df['Country\/Region'].values)\n# n_countries = len(countries)\n# # countries\n\n\n# idx = pd.Categorical(tmp_df['Country\/Region']).codes\n# groups = len(np.unique(idx))\n\n   \n  ","1cd15931":"# with model:\n#     # Sample posterior\n#     trace = pm.sample(tune=1500, chains=1, cores=1, target_accept=.9)","0ebcb5a9":"##  Pandemic in Italy seems to uncontroled\nThe following figure suggests that based on our EDI model, 23 days after observing 10 Confirmed Cases, the pandemic excceds the model prediction, meaning that it is unmitigated. Although I cannot rule out the possibility of unappropriateness of the model.","903e69a3":"# Modeling Confirmed Cases\nWhat we see as a NewCases in china is a sigmoid behaviour. If we want fit a sigmoid or logistic function to this data, we will run into overlfow errors because we are having fairly big numbers. We therefore logtransformed the data.  The logtransfomed curve (above) looks like an exponential increasing decay which has a form of $f(X)=C(1-e^{-K\\times X}) $","984155e5":"## South Korea\nModel very nicely fit with what we see in the country that the spread has been mitigated.","818e1ec7":"# Iran\nIn Iran, models predict a saturation, that doesn match with numbers reported in the country. I beleive this illustrate numbers we get from Iranian authorities are not correct!!!","ded1d89c":"# China\nLets have a look into china.\nWe will limit ourselves into a period of time that number of newcases were in interval of [0, 8000]","bac781fd":"# COVID19\n## Aim of this task\nHere, I have been trying to take a Bayesian approach using PYMC3 platform to model 'ConfirmedCases' and 'Fatality' over time.\nI have limited myself on a number of countires with more widespread disease. I treat China differently (with a different model), but all other contries that I have been looking into seem to fit the same model. For this countries (excep China), I log transfomed ConfirmedCases and then fit a Logistic Growth Model $ \\log(y) = A \/ (1 + B e^{-K \\times X )$ where , $K > 0$. The likelihood function a Normal Distribution.\nFor China, though, I fit an Exponential Decay (Increasing) $ \\log (y) = C ( 1 - e^{-K \\times X )$, where $ K > 0$.\n","83b6eda4":"## UK \nFor UK, Figure explanation is the same as Italy, except, I have been looking into 30 days after 100 ConfirmedCases, this is because I have had lower number of days to train the model.\n* Of particular note is that, 30 days since 100, number of Confirmed Cases in the UK will exceed 175k, and\n* There is no sign of saturtation\n* Note, This is perhaps  effect of Govrment initial policy of 'Herd Immunity', and with recent extreme measures, thigs will hopefully change.\n","af098170":"# Italy\nIn the following three panels, I illustrate ConfirmedCases over time. A) Log transformed, shaded areas show 1, and 2standard deviation respectively from the infered values. The midle panel is number of cases over time,and the third panel shows what will be case in future. the dashed red line shows the latest date (since 100 confirmed cases) that I have had data from.\nIn Italy:\n* 60 days since 100 confirmed, we the model predicts nearly 120k\n* The rate after of infection after that will be slightly slower"}}