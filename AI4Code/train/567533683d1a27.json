{"cell_type":{"c2d2626a":"code","5aedd7aa":"code","89d33f35":"code","1253daed":"code","5021cc95":"code","e60bfb77":"code","1cd2b898":"code","0eba24fa":"code","ede3ceb1":"code","ad9c027b":"code","b1eb54c0":"code","f0df4b80":"code","8e11cd41":"code","b3ab86fc":"code","241b5e8e":"code","62e1568a":"code","b9d27e52":"code","b7f36442":"code","43520f00":"code","a8a7c96b":"code","da86d0a4":"code","616b8327":"code","65b4420e":"code","8bcffb84":"code","30aef4a4":"code","d1d95cd9":"code","e7cf8e60":"markdown","c804459d":"markdown","524a2a1e":"markdown","2e26e3a1":"markdown","a735ce00":"markdown"},"source":{"c2d2626a":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import accuracy_score","5aedd7aa":"data = pd.read_csv('..\/input\/prostate-cancer\/Prostate_Cancer.csv')\ndata.head()","89d33f35":"data.info()","1253daed":"print(data.shape)","5021cc95":"data.describe()","e60bfb77":"plt.figure(figsize=(10,8))\nplt.bar(list(data['diagnosis_result'].value_counts().index), data['diagnosis_result'].value_counts(), color = ['g','r'])\nplt.title('Diagnosis Result')\nplt.show()\nprint(data['diagnosis_result'].value_counts())","1cd2b898":"sns.clustermap(data.corr(),annot=True)","0eba24fa":"data['perimeter x area'] = data['perimeter'] * data['area'] # feature crosses","ede3ceb1":"data.head()","ad9c027b":"sns.pairplot(data, hue = 'diagnosis_result')","b1eb54c0":"target_dict = {'M': 1, 'B':0}\ndata['diagnosis_result'] = data['diagnosis_result'].map(target_dict)\ndata.head()","f0df4b80":"data['id'].nunique()","8e11cd41":"data = data.drop('id', axis=1)\ndata.head()","b3ab86fc":"y = data['diagnosis_result']\nX = data.drop('diagnosis_result',axis=1)","241b5e8e":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)","62e1568a":"print('X_train Shape : {} | y_train Shape : {}'.format(X_train.shape, y_train.shape))\nprint('X_test  Shape : {} | y_test  Shape : {}'.format(X_test.shape, y_test.shape))","b9d27e52":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","b7f36442":"pd.DataFrame(X_train, columns= data.columns[:-1]).head()","43520f00":"pd.DataFrame(X_test, columns= data.columns[:-1]).head()","a8a7c96b":"model = Sequential()\nmodel.add(Dense(32,activation = 'relu',input_dim = X_train.shape[1]))\nmodel.add(Dense(64,activation = 'relu'))\nmodel.add(Dense(1,activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs = 120, validation_data=(X_test,y_test))","da86d0a4":"plt.figure(figsize=(10,8))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'],color='orange')\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.show()","616b8327":"plt.figure(figsize=(10,8))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.show()","65b4420e":"y_pred = model.predict_classes(X_test)\ny_pred","8bcffb84":"y_test.shape","30aef4a4":"y_pred = np.squeeze(y_pred)\ny_pred.shape","d1d95cd9":"print('Test Accuracy : ',accuracy_score(y_test, y_pred))","e7cf8e60":"### Scale Data","c804459d":"# EDA","524a2a1e":"# Preprocess","2e26e3a1":"# Train - Test Split","a735ce00":"# Create Neural Network"}}