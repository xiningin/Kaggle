{"cell_type":{"dd311adb":"code","fb43c488":"code","c1a664ab":"code","04527466":"code","e2071109":"code","de469670":"code","9153e41e":"code","d347766b":"code","c35c88d1":"code","c8234bf4":"code","35248844":"code","56fec254":"code","58c2a65d":"code","d75e2b9f":"code","979c295c":"code","80d96f2c":"code","c4a4d021":"code","afd9534f":"code","e9b3066c":"code","92660081":"code","1602656d":"code","6eee1d88":"code","1770f0d5":"code","eb18724b":"code","63af2645":"code","0ccc7c23":"code","59bd4f93":"code","00e7a4f4":"code","4abb2a9c":"code","c72e0755":"code","7d654aa0":"code","f5a96a58":"code","f1963889":"code","b51ec4bb":"code","97a1b29a":"code","b354d5e0":"code","7c3dd80a":"markdown","7caf8d80":"markdown","9f505955":"markdown","012e70c2":"markdown","946753c6":"markdown"},"source":{"dd311adb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom catboost import Pool, CatBoostClassifier, cv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nimport xgboost as xgb\n","fb43c488":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n#                 if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n#                     df[col] = df[col].astype(np.float16)\n#                 elif\n\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","c1a664ab":"def nan_analize(X):\n    nan_df = (X.isna().sum() \/ X.shape[0]).reset_index()\n    nan_df.columns=['feature', 'nan_percent']\n\n    plt.figure(figsize=(16,4))\n    sns.barplot(nan_df['feature'], nan_df['nan_percent'])\n    plt.title('Percent Missing')\n    plt.ylabel('Missing', fontsize=12)\n    plt.xlabel('Features', fontsize=12)\n    plt.xticks(rotation=90)\n    plt.show()","04527466":"def evaluate_preds(true_values, pred_values, save=False):\n    \"\"\"\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a preds vs true\"\"\"\n    \n    print(\"R2:\\t\" + str(round(r2(true_values, pred_values), 5)) + \"\\n\" +\n          \"RMSE:\\t\" + str(round(np.sqrt(mse(true_values, pred_values)), 3)) + \"\\n\" +\n          \"MSE:\\t\" + str(round(mse(true_values, pred_values), 3))\n         )\n    \n    plt.figure(figsize=(8,8))\n    \n    sns.scatterplot(x=pred_values, y=true_values)\n    plt.plot([0, 500000], [0, 500000], linestyle='--', color='black')  # \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c, \u0433\u0434\u0435 true_values = pred_values\n    \n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('True vs Predicted values')\n    \n    if save == True:\n        plt.savefig(REPORTS_FILE_PATH + 'report.png')\n    plt.show()","e2071109":"def plot_feature_importances(importances, X):\n    \n    indices = np.argsort(importances)[::-1]\n\n    plt.figure(figsize = (20, 6))\n    plt.title(\"Feature importances\", fontsize=16)\n    plt.bar(range(X.shape[1]), importances[indices] \/ importances.sum(),\n           color=\"darkblue\", align=\"center\")\n    plt.xticks(range(X.shape[1]), X.columns[indices], rotation = 90, fontsize=14)\n    plt.xlim([-1, X.shape[1]])\n\n    plt.tight_layout()\n    # plt.savefig('fe.jpg')\n    plt.show()","de469670":"ans = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\ndf_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv\")","9153e41e":"X = df_train.drop('Cover_Type', axis=1)\ny = df_train['Cover_Type']\n\nX.set_index('Id', inplace=True)","d347766b":"X_final = df_test\nX_final.set_index('Id', inplace=True)","c35c88d1":"X = reduce_mem_usage(X)","c8234bf4":"X_final = reduce_mem_usage(X_final)","35248844":"X.columns","56fec254":"arr = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology',\n       'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways',\n       'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm',\n       'Horizontal_Distance_To_Fire_Points']\nfor i in arr:\n    print(i)\n    print(X[i].describe().apply(lambda x: format(x, 'f')))\n    print()","58c2a65d":"#1\nX.loc[X['Aspect'] < 0, 'Aspect'] = X.loc[X['Aspect'] < 0, 'Aspect'] + 360\nX_final.loc[X_final['Aspect'] < 0, 'Aspect'] = X_final.loc[X_final['Aspect'] < 0, 'Aspect'] + 360","d75e2b9f":"#3\nX.loc[X['Horizontal_Distance_To_Hydrology'] < 0, 'Horizontal_Distance_To_Hydrology'] = X.loc[X['Horizontal_Distance_To_Hydrology'] < 0, 'Horizontal_Distance_To_Hydrology'] * -1\nX_final.loc[X_final['Horizontal_Distance_To_Hydrology'] < 0, 'Horizontal_Distance_To_Hydrology'] = X_final.loc[X_final['Horizontal_Distance_To_Hydrology'] < 0, 'Horizontal_Distance_To_Hydrology'] * -1","979c295c":"#4\nX.loc[X['Vertical_Distance_To_Hydrology'] < 0, 'Vertical_Distance_To_Hydrology'] = X.loc[X['Vertical_Distance_To_Hydrology'] < 0, 'Vertical_Distance_To_Hydrology'] * -1\nX_final.loc[X_final['Vertical_Distance_To_Hydrology'] < 0, 'Vertical_Distance_To_Hydrology'] = X_final.loc[X_final['Vertical_Distance_To_Hydrology'] < 0, 'Vertical_Distance_To_Hydrology'] * -1","80d96f2c":"#5\nX.loc[X['Horizontal_Distance_To_Roadways'] < 0, 'Horizontal_Distance_To_Roadways'] = X.loc[X['Horizontal_Distance_To_Roadways'] < 0, 'Horizontal_Distance_To_Roadways'] * -1\nX_final.loc[X_final['Horizontal_Distance_To_Roadways'] < 0, 'Horizontal_Distance_To_Roadways'] = X_final.loc[X_final['Horizontal_Distance_To_Roadways'] < 0, 'Horizontal_Distance_To_Roadways'] * -1","c4a4d021":"#6\nX.loc[256 <= X['Hillshade_9am'], 'Hillshade_9am'] = X.loc[256 <= X['Hillshade_9am'], 'Hillshade_9am'] % 256\nX_final.loc[256 <= X_final['Hillshade_9am'], 'Hillshade_9am'] = X_final.loc[256 <= X_final['Hillshade_9am'], 'Hillshade_9am'] % 256","afd9534f":"#7\nX.loc[256 <= X['Hillshade_Noon'], 'Hillshade_Noon'] = X.loc[256 <= X['Hillshade_Noon'], 'Hillshade_Noon'] % 256\nX_final.loc[256 <= X_final['Hillshade_Noon'], 'Hillshade_Noon'] = X_final.loc[256 <= X_final['Hillshade_Noon'], 'Hillshade_Noon'] % 256","e9b3066c":"#8\nX.loc[256 <= X['Hillshade_3pm'], 'Hillshade_3pm'] = X.loc[256 <= X['Hillshade_3pm'], 'Hillshade_3pm'] % 256\nX_final.loc[256 <= X_final['Hillshade_3pm'], 'Hillshade_3pm'] = X_final.loc[256 <= X_final['Hillshade_3pm'], 'Hillshade_3pm'] % 256","92660081":"#9\nX.loc[X['Hillshade_9am'] < 0, 'Hillshade_9am'] = X.loc[X['Hillshade_9am'] < 0, 'Hillshade_9am'] % 256\nX_final.loc[X_final['Hillshade_9am'] < 0, 'Hillshade_9am'] = X_final.loc[X_final['Hillshade_9am'] < 0, 'Hillshade_9am'] % 256","1602656d":"#10\nX.loc[X['Hillshade_Noon'] < 0, 'Hillshade_Noon'] = X.loc[X['Hillshade_Noon'] < 0, 'Hillshade_Noon'] % 256\nX_final.loc[X_final['Hillshade_Noon'] < 0, 'Hillshade_Noon'] = X_final.loc[X_final['Hillshade_Noon'] < 0, 'Hillshade_Noon'] % 256","6eee1d88":"#11\nX.loc[X['Hillshade_3pm'] < 0, 'Hillshade_3pm'] = X.loc[X['Hillshade_3pm'] < 0, 'Hillshade_3pm'] % 256\nX_final.loc[X_final['Hillshade_3pm'] < 0, 'Hillshade_3pm'] = X_final.loc[X_final['Hillshade_3pm'] < 0, 'Hillshade_3pm'] % 256","1770f0d5":"#12\nX.loc[X['Horizontal_Distance_To_Fire_Points'] < 0, 'Horizontal_Distance_To_Fire_Points'] = X.loc[X['Horizontal_Distance_To_Fire_Points'] < 0, 'Horizontal_Distance_To_Fire_Points'] * -1\nX_final.loc[X_final['Horizontal_Distance_To_Fire_Points'] < 0, 'Horizontal_Distance_To_Fire_Points'] = X_final.loc[X_final['Horizontal_Distance_To_Fire_Points'] < 0, 'Horizontal_Distance_To_Fire_Points'] * -1","eb18724b":"arr = ['Soil_Type1', 'Soil_Type2', 'Soil_Type3', 'Soil_Type4', 'Soil_Type5',\n       'Soil_Type6', 'Soil_Type7', 'Soil_Type8', 'Soil_Type9', 'Soil_Type10',\n       'Soil_Type11', 'Soil_Type12', 'Soil_Type13', 'Soil_Type14',\n       'Soil_Type15', 'Soil_Type16', 'Soil_Type17', 'Soil_Type18',\n       'Soil_Type19', 'Soil_Type20', 'Soil_Type21', 'Soil_Type22',\n       'Soil_Type23', 'Soil_Type24', 'Soil_Type25', 'Soil_Type26',\n       'Soil_Type27', 'Soil_Type28', 'Soil_Type29', 'Soil_Type30',\n       'Soil_Type31', 'Soil_Type32', 'Soil_Type33', 'Soil_Type34',\n       'Soil_Type35', 'Soil_Type36', 'Soil_Type37', 'Soil_Type38',\n       'Soil_Type39', 'Soil_Type40']\nfor i in arr:\n    print(i)\n    print(X[i].describe().apply(lambda x: format(x, 'f')))\n    print()","63af2645":"X_final.describe()","0ccc7c23":"X.info()","59bd4f93":"X_final.info()","00e7a4f4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","4abb2a9c":"model =CatBoostClassifier(thread_count=3,\n                       iterations=500,\n                       l2_leaf_reg = 4.0, \n                       learning_rate = 0.035,\n                       random_seed=63)\n\n#y_train.ravel()\n\n\nmodel.fit(X_train, y_train)\n\ny_pred_test = model.predict(X_test)","c72e0755":"model.score(X_test, y_test)","7d654aa0":"model_ans = CatBoostClassifier(thread_count=3,\n                       iterations=500,\n                       l2_leaf_reg = 4.0, \n                       learning_rate = 0.035,\n                       random_seed=63)\n\nmodel_ans.fit(X, y)\n\ny_pred_test = model_ans.predict(X)\nmodel_ans.score(X, y)","f5a96a58":"y_pred_final = model_ans.predict(X_final)\ny_pred_final","f1963889":"y_pred_df = pd.DataFrame(y_pred_final, columns=['target1'])\nans_pd = y_pred_df","b51ec4bb":"ans_pd","97a1b29a":"ans['Cover_Type'] = ans_pd\nans.to_csv('submission.csv',index=False)","b354d5e0":"ans","7c3dd80a":"# Analysis datasets","7caf8d80":"# Train model","9f505955":"# Libraries","012e70c2":"# Input datasets","946753c6":"# Reduce memory"}}