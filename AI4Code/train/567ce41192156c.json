{"cell_type":{"99715685":"code","6d12a065":"code","eded91e4":"code","bcc49470":"code","98bd1581":"code","9b11d1a8":"code","8f772d62":"markdown","2cf28a57":"markdown"},"source":{"99715685":"import torch\nfrom torch.utils import data\nfrom torch.nn.utils.rnn import pack_padded_sequence\nfrom keras.preprocessing import sequence\nimport numpy as np # linear algebra","6d12a065":"# truncated sentence by lens percentile of batch\nPERCENTILE = 80\n# truncated sentence by a constant\nMAX_LEN = 4\nBATCH_SIZE = 4","eded91e4":"class MyDataset(data.Dataset):\n    \n    def __init__(self, text, lens, y=None):\n        self.text = text\n        self.y = y\n        self.lens = lens\n    \n    def __len__(self):\n        return len(self.lens)\n    \n    def __getitem__(self, index):\n        if self.y is None:\n            return self.text[index], self.lens[index]\n        else:\n            return self.text[index], self.lens[index], self.y[index]\n    \n\ndef collate_fn(batch):\n    \"\"\"\n    batch = [dataset[i] for i in N]\n    \"\"\"\n    size = len(batch[0])\n    if size == 3:\n        texts, lens, y = zip(*batch)\n    else:\n        texts, lens = zip(*batch)\n    lens = np.array(lens)\n    sort_idx = np.argsort(-1 * lens)\n    reverse_idx = np.argsort(sort_idx)\n    max_len = min(int(np.percentile(lens, PERCENTILE)), MAX_LEN)\n    \n    lens = np.clip(lens, 0, max_len)[sort_idx]\n    texts = torch.tensor(sequence.pad_sequences(texts, maxlen=max_len)[sort_idx], dtype=torch.long)\n    if size == 3:\n        return texts, lens, reverse_idx, torch.tensor(y, dtype=torch.float32)\n    else:\n        return texts, lens, reverse_idx\n\n\ndef build_data_loader(texts, lens, y=None, batch_size=BATCH_SIZE):\n    dset = MyDataset(texts, lens, y)\n    dloader = data.DataLoader(dset, batch_size=batch_size, shuffle=False, collate_fn=collate_fn)\n    return dloader","bcc49470":"seqs = [[1,2,3,3,4,5,6,7], [1,2,3], [2,4,1,2,3], [1,2,4,1]]\nlens = [len(i) for i in seqs]\n\ndata_loader = build_data_loader(seqs, lens)\n\nfor batch in data_loader:\n    seq_batch, lens_batch, reverse_idx_batch = batch\n    break","98bd1581":"print(f'original seqs:')\nprint(seqs)\nprint(f'batch seqs, already sort by lens, and padding dynamic in batch:')\nprint(seq_batch.numpy().tolist())\nprint(f'reverse batch seqs:')\nprint(seq_batch[reverse_idx_batch].numpy().tolist())","9b11d1a8":"pack_padded_sequence(seq_batch, lens_batch, batch_first=True)","8f772d62":"## Test","2cf28a57":"## pack_padded_seq"}}