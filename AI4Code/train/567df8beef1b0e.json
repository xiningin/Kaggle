{"cell_type":{"c3bc86e9":"code","3e9ed2d5":"code","d9f2f7a6":"code","f56b90a1":"code","ad970b3e":"code","4693f54d":"code","ced0929f":"code","d4aa58b4":"code","71b4b3d3":"code","877015de":"code","875230e2":"code","77667a05":"code","b0923f64":"code","4d470f59":"markdown","1ea5dd30":"markdown","8aa7a4c4":"markdown","8d9c5b52":"markdown","5a2589bb":"markdown","bb80a683":"markdown","18914305":"markdown"},"source":{"c3bc86e9":"import pandas as pd \nimport numpy as np \nimport sys\nimport warnings\nimport itertools\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom matplotlib import pyplot as plt\nfrom pandas.plotting import lag_plot\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nimport statsmodels.formula.api as smf\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport datetime\nimport calendar\nimport seaborn as sns\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.arima_model import ARMA\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\nwarnings.filterwarnings(\"ignore\")","3e9ed2d5":"df_train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_train.fillna('NA',inplace=True)\ndf_train.head()","d9f2f7a6":"df_test = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_test.fillna('NA',inplace=True)\ndf_test.head()","f56b90a1":"df_train['region']=df_train['Province_State']+df_train['Country_Region']\ndf_train.drop('Province_State',axis=1,inplace=True)\ndf_train.drop('Country_Region',axis=1,inplace=True)","ad970b3e":"df_test['region']=df_test['Province_State']+df_test['Country_Region']\ndf_test.drop('Province_State',axis=1,inplace=True)\ndf_test.drop('Country_Region',axis=1,inplace=True)","4693f54d":"# Define the p, d and q parameters to take any value between 0 and 2\np = range(0,2)\nd = range(0,2)\nq = range(0,1)","ced0929f":"# Generate all different combinations of p, d and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]","d4aa58b4":"best_aic = np.inf\nbest_pdq = None\nbest_seasonal_pdq = None\ntemp_model = None\nfor param in pdq:   \n    for param_seasonal in seasonal_pdq: \n        temp_model = SARIMAX(df_train.ConfirmedCases,order=param,seasonal_order = param_seasonal,enforce_invertibility=False,\n                             enforce_stationarity=False)\n        results = temp_model.fit(disp=False)\n        if results.aic < best_aic:\n            best_aic = results.aic\n            best_pdq = param\n            best_seasonal_pdq = param_seasonal\nprint(\"Best ARIMA {} x {} model - AIC:{}\".format(best_pdq,best_seasonal_pdq,best_aic))","71b4b3d3":"countries_list=df_train.region.unique()\ndistictRegions=[]\nfor i in countries_list:\n    distictRegions.append(df_train[df_train['region']==i])\nprint(\"Total Regions =  \"+ str(len(countries_list)))\n\ndistictTestRegions=[]\nfor i in countries_list:\n    distictTestRegions.append(df_test[df_test['region']==i])","877015de":"#create the estimates assuming measurement error \nimport math\nconfirmed=[]\nfatal=[]\nj = 0\nfor region in distictRegions:\n    test_len = len(distictTestRegions[j])\n    j = j + 1\n    # contrived dataset\n    data = region.ConfirmedCases.astype('int32').tolist()\n    # fit model\n    try:       \n        model = SARIMA(data, order=(1,1,0), seasonal_order=(1,1,0,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))       \n        #model = ARIMA(data, order=(3,1,2))\n        model_fit = model.fit(disp=False)\n        # make prediction\n        predicted = model_fit.predict(len(data), len(data)+test_len-1)\n        new=np.concatenate((np.array(data),np.array([int(num) for num in predicted])),axis=0)\n        confirmed.extend(list(new[-test_len:]))\n    except:\n        confirmed.extend(list(data[-10:-1]))\n        for j in range(34):\n            confirmed.append(data[-1]*2)\n    \n    # contrived dataset\n    data = region.Fatalities.astype('int32').tolist()\n    # fit model\n    try:        \n        model = SARIMAX(data, order=(1,1,0), seasonal_order=(1,1,0,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))\n        #model = ARIMA(data, order=(3,1,2))\n        model_fit = model.fit(disp=False)\n        predicted = model_fit.predict(len(data))\n        new=np.concatenate((np.array(data),np.array([int(num) for num in predicted])),axis=0)\n        fatal.extend(list(new[-test_len:]))\n    except:\n        fatal.extend(list(data[-10:-1]))\n        for j in range(34):\n            fatal.append(data[-1]*2)","875230e2":"df_submit=pd.concat([pd.Series(np.arange(1,1+len(confirmed))),pd.Series(confirmed),pd.Series(fatal)],axis=1)\ndf_submit=df_submit.fillna(method='pad').astype(int)\ndf_submit.rename(columns={0: 'ForecastId', 1: 'ConfirmedCases',2: 'Fatalities',}, inplace=True)","77667a05":"df_submit.head() ","b0923f64":"df_submit.to_csv('submission.csv',index=False)\n","4d470f59":"## Finding Best Arima parameters","1ea5dd30":"## Reading test","8aa7a4c4":"# Submission\nExporting forecasting for test data [submission.csv]","8d9c5b52":"## Reading train data","5a2589bb":"## Import Libraries","bb80a683":"### Making regions and dropping columns","18914305":"## Time Series Analysis using SARIMA model"}}