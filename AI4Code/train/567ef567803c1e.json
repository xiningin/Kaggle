{"cell_type":{"e654924d":"code","46773177":"code","4a2abe7a":"code","5dd50b05":"code","e9f4c748":"code","93ca85dd":"code","08da798c":"code","5892bd31":"code","00910e73":"code","36c52623":"markdown","6fb09599":"markdown","b0d9c442":"markdown"},"source":{"e654924d":"import numpy as np\nimport pandas as pd","46773177":"prediction_strings = pd.read_csv('..\/input\/rsna-pred-train\/model_1_train.csv')\nprediction_strings.head()","4a2abe7a":"ground_truth = pd.read_csv('..\/input\/rsna-pneumonia-detection-challenge\/stage_1_train_labels.csv')\nground_truth.head()","5dd50b05":"prediction = pd.DataFrame(index = ['patientId', 'confidence', 'x', 'y', 'width', 'height'])\n\nfor i, row in prediction_strings.iterrows():\n    if len(str(row[1])) > 3:\n        row_array = row[1].split(' ')\n        for i in range(int(len(row_array) \/ 5)):\n            prediction[prediction.shape[1]] = [row[0], float(row_array[i * 5])] + \\\n                                              [int(b) for b in row_array[i * 5 + 1 : i * 5 + 5]]\n            \nprediction = prediction.T\nprediction.head()","e9f4c748":"def iou(x1, y1, width1, height1, x2, y2, width2, height2):\n    x1, y1, width1, height1, x2, y2, width2, height2 = [int(v) for v in [x1, y1, width1, height1, x2, y2, width2, height2]]\n\n    mask_1 = np.zeros((max(y1 + height1, y2 + height2), max(x1 + width1, x2 + width2)))\n    mask_2 = np.zeros((max(y1 + height1, y2 + height2), max(x1 + width1, x2 + width2)))\n    \n    mask_1[y1 : y1 + height1, x1 : x1 + width1] = 1\n    mask_2[y2 : y2 + height2, x2 : x2 + width2] = 1\n\n    mask_i = mask_1 * mask_2\n    mask_u = mask_1 + mask_2 - mask_i\n    \n    return float(sum(sum(mask_i))) \/ sum(sum(mask_u))","93ca85dd":"threshold = .4","08da798c":"tp_candidates = pd.DataFrame(index = ['patientId', 'index_prediction', 'index_gtruth', 'iou'])\n\nfor patient in list(prediction['patientId'].unique()):\n    pred = prediction[prediction['patientId'] == patient].sort_values('confidence', ascending = False)\n    g_tr = ground_truth[ground_truth['patientId'] == patient]\n    \n    if g_tr['Target'].sum() > 0:\n        for ig, g in g_tr.iterrows():\n            for ip, p in pred.iterrows():\n                iou_score = iou(p['x'], p['y'], p['width'], p['height'], \n                                g['x'], g['y'], g['width'], g['height'])\n                if iou_score > threshold:\n                    tp_candidates[tp_candidates.shape[1]] = [patient, ip, ig, iou_score]\n                    break\n                    \ntp_candidates = tp_candidates.T\ntp_candidates.head(10)","5892bd31":"rates = pd.DataFrame(index = ['TP', 'FP', 'FN', 'score'])\n\nfor threshold in [.4, .45, .5, .55, .6, .65, .7, .75]:\n    tp = sum(tp_candidates['iou'] > threshold)\n    fp = prediction.shape[0] - tp\n    fn = ground_truth.dropna().shape[0] - \\\n         ground_truth.loc[tp_candidates[tp_candidates['iou'] > threshold]['index_gtruth']].dropna().shape[0]\n    rates[threshold] = [tp, fp, fn, float(tp) \/ (tp + fp + fn)]\n    \nrates.T","00910e73":"rates.T['score'].mean()","36c52623":"# Attempt of metric's implementation","6fb09599":"__LB score: 0.014__","b0d9c442":"This is an attempt to step-by-step implement the code of the metric described by the organizers of the competition. \n\nResult is very similar on LB score!\n\n__Request for help:__ how can I rewrite the code in terms of tensors? I need to realize a metric function such as:\n\n`def mean_iou(y_true, y_pred):\n    y_pred = tf.round(y_pred)\n    intersect = tf.reduce_sum(y_true * y_pred, axis = [1, 2, 3])\n    union = tf.reduce_sum(y_true, axis = [1, 2, 3]) + tf.reduce_sum(y_pred, axis = [1, 2, 3])\n    smooth = tf.ones(tf.shape(intersect))\n    return tf.reduce_mean((intersect + smooth) \/ (union - intersect + smooth))`"}}