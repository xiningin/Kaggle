{"cell_type":{"c5e5c048":"code","f9fac5ad":"code","db97147d":"code","e23262a0":"code","6a7e52a8":"code","37bfc754":"code","05793a9e":"code","4c8a6948":"markdown"},"source":{"c5e5c048":"# Standard library\nimport copy\n\n# Basic data libraries\nimport numpy as np\n\n# Interactivity\nimport ipywidgets as widgets\n\n# Graphs\nimport matplotlib\nimport plotly.graph_objects as go\nimport plotly.express as px","f9fac5ad":"# Set plotly template\n\nimport plotly.io as pio\n\ntemplate = pio.templates[\"simple_white\"]\n\nseaborn_colorblind_palette = [(0.00392156862745098, 0.45098039215686275, 0.6980392156862745),\n        (0.8705882352941177, 0.5607843137254902, 0.0196078431372549),\n        (0.00784313725490196, 0.6196078431372549, 0.45098039215686275),\n        (0.8352941176470589, 0.3686274509803922, 0.0),\n        (0.8, 0.47058823529411764, 0.7372549019607844),\n        (0.792156862745098, 0.5686274509803921, 0.3803921568627451),\n        (0.984313725490196, 0.6862745098039216, 0.8941176470588236),\n        (0.5803921568627451, 0.5803921568627451, 0.5803921568627451),\n        (0.9254901960784314, 0.8823529411764706, 0.2),\n        (0.33725490196078434, 0.7058823529411765, 0.9137254901960784)]\n\ntemplate.layout[\"colorway\"] = [matplotlib.colors.to_hex(color) for color in seaborn_colorblind_palette]\ntemplate.layout[\"xaxis\"][\"showgrid\"] = True\ntemplate.layout[\"yaxis\"][\"showgrid\"] = True\ntemplate.layout[\"xaxis\"][\"mirror\"] = True\ntemplate.layout[\"yaxis\"][\"mirror\"] = True\ntemplate.layout[\"font\"][\"size\"] = 16\ntemplate.layout[\"annotationdefaults\"][\"font\"][\"size\"] = 32\n\npio.templates.default = template","db97147d":"def change_likelihood(initial_likelihood, N):\n    \"\"\"\n    Computes likelihood of gaining a reward after `N`-th pull.\n    \n    Parameters\n    ==========\n    initial_likelihood: np.array\n        Possible initial likelihood to gain a reward.\n    N: int\n        Number of pulls\n        \n    Returns\n    =======\n    np.array\n        Likelihood to gain a reward after `N`-th pull.\n    \"\"\"\n    return initial_likelihood * 0.97**N","e23262a0":"def apply_history_results(prior, history_results):\n    \"\"\"\n    Update prior probability using results from history.\n    \n    Parameters\n    ==========\n    prior: np.array\n        Prior probability\n    history_resutls: list of str\n        \"S\" for success, \"F\" for failure, everything else\n        for an unknown result\n    \n    Returns\n    =======\n    np.array\n        Posterior probability\n    \"\"\"\n    posterior = prior\n    initial_likelihood = np.arange(0, 101) \/ 101\n    likelihood = copy.deepcopy(initial_likelihood)\n    for N_pulls, outcome in enumerate(history_results, 1):\n        if outcome == \"S\":\n            posterior *= likelihood\n            posterior \/= posterior.sum()\n            likelihood = change_likelihood(initial_likelihood, N_pulls)\n        elif outcome == \"F\":\n            posterior *= (1-likelihood)\n            posterior \/= posterior.sum()\n            likelihood = change_likelihood(initial_likelihood, N_pulls)\n        else:\n            likelihood = change_likelihood(initial_likelihood, N_pulls)\n    return posterior","6a7e52a8":"hypotheses = np.arange(0, 101)\nprior = np.ones(101) \/ 101 \nhistory_results = []\nposterior = apply_history_results(prior, history_results)\nmode = posterior.argmax()\nmean = np.average(np.arange(0, 101), weights=posterior)\nyrange = (np.ceil(posterior.max() * 100)+1) \/ 100","37bfc754":"# Create Plotly interactive graph\nhistory = widgets.Text(\n    value=\"\",\n    description=\"Results:\",)\n\nbars = go.Bar(x=hypotheses, y=posterior,\n              name=\"Posterior probability\",\n              hovertemplate=\n                \"Initial likelihood of reward: %{x}<br>\" +\n                \"Posterior probability: %{y:0.5f}<br><extra><\/extra>\",)\nmode_line = go.Scatter(x=[mode]*100, y=np.linspace(0, yrange, 100),\n                       name=\"Mode\", \n                       hovertemplate=\"Mode: %{x}<extra><\/extra>\", mode=\"lines\")\nmean_line = go.Scatter(x=[mean]*100, y=np.linspace(0, yrange, 100),\n                       name=\"Mean\", \n                       hovertemplate=\"Mean: %{x}<extra><\/extra>\", mode=\"lines\")\n\nfig = go.Figure()\nfig.add_trace(bars)\nfig.add_trace(mode_line)\nfig.add_trace(mean_line)\nfig.update_yaxes(range=[0, yrange])\nfig.update_xaxes(range=[-0.5, 100.5])\n\n\ngraph = go.FigureWidget(fig)\ngraph.update_layout(\n        autosize=True,\n        margin=dict(\n            l=20,\n            r=20,\n            b=20,\n            t=100,\n            pad=0),\n        yaxis=dict(\n            range=[0, yrange]),\n)\n\ndef response(change):\n    prior = np.ones(101) \/ 101 \n    history_results = history.value\n    posterior = apply_history_results(prior, history_results)\n    mode = posterior.argmax()\n    mean = np.average(np.arange(0, 101), weights=posterior)\n    yrange = (np.ceil(posterior.max() * 100)+1) \/ 100\n    with graph.batch_update():\n        graph.data[0].y = posterior\n        graph.data[1].x = [mode]*100\n        graph.data[1].y = np.linspace(0, yrange, 100)\n        graph.data[2].x = [mean]*100\n        graph.data[2].y = np.linspace(0, yrange, 100)\n        graph.layout[\"yaxis\"].update(range=[0, yrange])\n\nhistory.observe(response)","05793a9e":"widgets.VBox([history, graph])","4c8a6948":"# Posterior probability\n\nIn [my solution](https:\/\/www.kaggle.com\/somnambwl\/santa-2020) of [Santa-2020 competition](https:\/\/www.kaggle.com\/c\/santa-2020\/overview), I have used the mode of posterior probability to estimate one-armed bandits' thresholds. However, [Dmitriy Guller](https:\/\/www.kaggle.com\/dmitriyguller) [suggested](https:\/\/www.kaggle.com\/c\/santa-2020\/discussion\/216189#1181690) that mean of the posterior distribution may have worked better than mode.\n\nThis notebook contains an interactive plot which shows the posterior distribution, it's mode and mean, for comparison. Use the textbox widget below to write \"S\" for success, \"F\" for failure or anything else for an unknown result. You can also change the `change_likelihood` function, the default is as for Santa-2020 competition. "}}