{"cell_type":{"d89102d5":"code","1956260a":"code","90356023":"code","db926aff":"code","974e2cf8":"code","e1a0492b":"code","2b870b2e":"code","157446db":"code","0d4eee09":"code","7f76dc84":"code","8746e1b1":"code","a7a5626e":"code","bf5e8b4b":"code","093fcd76":"markdown","63c15f51":"markdown","fb5dbfc8":"markdown","28743b62":"markdown","8d140963":"markdown","6e92ea22":"markdown","1882b9b0":"markdown","f0f593fb":"markdown","5276f961":"markdown","67bb5d4e":"markdown","de9551e1":"markdown","67eecfe4":"markdown","09b90c7b":"markdown","f48bdd94":"markdown","952dfd06":"markdown","4466a474":"markdown"},"source":{"d89102d5":"import matplotlib.pyplot as plt #Matplotlib allows us to draw graphs\nimport numpy as np #Numpy allows us to perform complex mathematical processes quickly\nimport pandas as pd #Pandas is another useful set of tools for statistics\nimport datetime\nfrom fbprophet import Prophet","1956260a":"energy = pd.read_csv('..\/input\/schoolsmartmeterdata\/meter-amr-readings-1200050359109 (3).csv')\nenergy.head()","90356023":"energy = pd.melt(energy, id_vars=['Reading Date', 'One Day Total kWh', 'Status', 'Substitute Date'], var_name='Time', value_name=\"Energy\")\nenergy.head()","db926aff":"energy['Timestamp'] = pd.to_datetime(energy['Reading Date'] + \" \" + energy['Time'], format='%Y-%m-%d %H:%M')\nprint('Start of data collection: ', energy['Timestamp'].min())\nprint('End of data collection: ', energy['Timestamp'].max())\nenergy = energy.sort_values(by=['Timestamp'])\n\n###### take one year of data for simplicity ########\nenergy = energy[(energy['Timestamp'] > '2018') & (energy['Timestamp'] < '2019')]\nprint('Start of data collection: ', energy['Timestamp'].min())\nprint('End of data collection: ', energy['Timestamp'].max())\n","974e2cf8":"london = pd.read_csv('..\/input\/smart-meters-in-london\/halfhourly_dataset\/halfhourly_dataset\/block_0.csv')\nlondon['tstp'] = pd.to_datetime(london['tstp'].replace('.0000000', ''), format='%Y-%m-%d %H:%M:%S')\nlondon['Timestamp'] = london['tstp'] # we will create a second, fake date column so we can overlay data from different years\nhouseholds = [\"MAC000246\", \"MAC004387\", \"MAC004431\"] # choose some household IDs to include in the data\nlondon = london[london['LCLid'].isin(households)]\nlondon.reset_index(drop=True, inplace=True)\nlondon['energy(kWh\/hh)'][london['energy(kWh\/hh)'] == 'Null'] = 0\nlondon['energy(kWh\/hh)'] = london['energy(kWh\/hh)'].astype(float)\n\n# print(london.head())\nprint('Start of data collection: ', london['Timestamp'].min())\nprint('End of data collection: ', london['Timestamp'].max())\n\n# take one year of the London data for simplicity\nlondon = london[(london['Timestamp'] > '2012') & (london['Timestamp'] < '2013')]\n","e1a0492b":"london['Timestamp'] = london['Timestamp'].mask(london['Timestamp'].dt.year < 2021, london['Timestamp'] + pd.offsets.DateOffset(year=2021))\nenergy['Timestamp'] = energy['Timestamp'].mask(energy['Timestamp'].dt.year < 2021, energy['Timestamp'] + pd.offsets.DateOffset(year=2021))\n\n# energy = energy[(energy['Timestamp'] > '2021-04-15') & (energy['Timestamp'] < '2021-05-15')]\n# london = london[(london['Timestamp'] > '2021-04-15') & (london['Timestamp'] < '2021-05-15')]\n","2b870b2e":"energy_week = energy[(energy['Timestamp'] > '2021-05-15') & (energy['Timestamp'] < '2021-05-22')]\nprint(energy_week.shape)\nlondon_week = london[(london['Timestamp'] > '2021-05-15') & (london['Timestamp'] < '2021-05-22')]\nprint(london_week.shape)\n\nfig, ax1 = plt.subplots(figsize=(15, 6))\nplt.xticks( rotation=25 )\nax2 = ax1.twinx()  \n\ngroups = london_week.groupby('LCLid')\nfor name, group in groups:\n    ax1.plot(group['Timestamp'], group['energy(kWh\/hh)'], label=name)\nax1.legend(title='Household energy use', loc='upper left')\nax1.set_ylim(-0.1,2.5)\n\nax2.plot(energy_week['Timestamp'], energy_week['Energy'], color='blue', label=name)\nax2.legend(['School energy use'], loc='upper right')\nax2.set_ylim(11,150)\n","157446db":"train_data = london[['Timestamp', 'energy(kWh\/hh)', 'LCLid']][(london['Timestamp']> \"2021-04-15\") & (london['Timestamp']< \"2021-04-30\")] #  & (london['LCLid'] == households[0]) & (london['tstp'].dt.year == 2013)\ntest_data = london[['Timestamp', 'energy(kWh\/hh)', 'LCLid']][(london['Timestamp']>= \"2021-04-30\") & (london['Timestamp']< \"2021-05-15\")] #  & (london['LCLid'] == households[0]) & (london['tstp'].dt.year == 2013)\n\ntrain_data.columns = ['ds', 'y', 'LCLid']\ntest_data.columns = ['ds', 'y', 'LCLid']\n\ntrain_data","0d4eee09":"model = Prophet(daily_seasonality=True)\n# model = Prophet(daily_seasonality=True, weekly_seasonality=True) # this doesn't work for so little data, but may work on the day\nmodel.fit(train_data)\n\nforecast = model.predict(test_data)\nfig = model.plot(forecast)","7f76dc84":"fig = model.plot_components(forecast)\n","8746e1b1":"fig, ax1 = plt.subplots(figsize=(15,8))\n# rotate the date labels so they don't overlap\nplt.xticks( rotation=25 )\n\ngroups = london.groupby('LCLid')\nfor name, group in groups:\n    ax1.plot(group['Timestamp'], group['energy(kWh\/hh)'], label=name)\nax1.plot(forecast['ds'], forecast['yhat'], color='red', linewidth=3, label='Forecast')\nax1.legend(title='Household energy use', loc='upper right')\nax1.set_xlim(datetime.datetime(2021, 4, 30), datetime.datetime(2021, 5, 15))\nax1.set_ylim(0,3)","a7a5626e":"fig, ax1 = plt.subplots(figsize=(12,8))\n# rotate the date labels so they don't overlap\nplt.xticks( rotation=25 )\n\nax1.plot(energy['Timestamp'], energy['Energy'], color='blue', label='School energy usage')\nax1.set_xlabel('Timestamp')\nax1.set_ylabel('Energy use')\n\nax1.plot(forecast['ds'], forecast['yhat'], color='red', label='Forecasted energy usage')\nax1.set_xlim(datetime.datetime(2021, 4, 30), datetime.datetime(2021, 5, 15))\nax1.legend(loc='upper right')\n","bf5e8b4b":"fig, ax1 = plt.subplots(figsize=(15,8))\n# rotate the date labels so they don't overlap\nplt.xticks( rotation=25 )\n# set up the 2nd axis\nax2 = ax1.twinx()  \n\n# energy_single = energy[energy['Reading Date'].str.contains(\"2019\")]\n\n# ax1.plot(energy_single['Timestamp'], energy_single['Energy'], color='blue')\nax1.plot(energy['Timestamp'], energy['Energy'], color='blue', label='School energy usage')\nax1.set_xlabel('Timestamp')\nax1.set_ylabel('Energy use')\nax1.set_xlim(datetime.datetime(2021, 5, 1), datetime.datetime(2021, 5, 15))\n\n# the only difference here is giving the forecast data it's own y-axis, so it can lay over the school data\nax2.plot(forecast['ds'], forecast['yhat'], color='red', label='Forecasted energy usage')\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n","093fcd76":"Now, we can look at the different seasonal components of the model - how do these compare to the school model?","63c15f51":"We will build a forecasting model using the larger London dataset and investigate what it has learned, to see if it would be useful for predicting school energy usage. First, we split the data into training and testing sets:","fb5dbfc8":"Next, we build the model and look at the forecast it produces. What can you notice about the forecast compared to the model built on data from the school?","28743b62":"The model predicts more consistent energy usage each day, and predicts peak energy usage in the evening instead of during school time. ","8d140963":"# Step 2 - Comparing the two data sources\n","6e92ea22":"# Step 1 - Loading libraries and data","1882b9b0":"By trying to make a general prediction for all homes, the model doesn't do well at predicting energy use for any homes. A more complex modelling approach is needed to do this. \n\nLet's see how the model's predictions compare to the school's data. ","f0f593fb":"# Step 3 - Building a model","5276f961":"The dates that the energy data was collected over don't overlap, so we can switch all the years to 2021 in order to overlay the data.","67bb5d4e":"Next, we need to turn the date and time columns into a datetime column for python to work with. ","de9551e1":"This time, we will include data from other London smartmeters. ","67eecfe4":"We can plot the forecast from the London data for multiple homes over the real data. ","09b90c7b":"In this lesson, we will explore the use of 'big data' in our model. We can do this by using smartmeter data collected from across London, rather than just data from the school. \n\nIn AI, more data is generally better. But, the new data needs to be representative of what you're trying to model, other wise you will train a model to make predictions that aren't relevant to the situation you're interested in. ","f48bdd94":"Let's look at one week of data from the two data sources. How does the school data compare to the household data? What might this mean for our ability to build a better model using this larger dataset?\n\n**Note:** the y-axes on the two datasets are different (see the left and right edges of the plot), because energy usage in the school is a lot higher than in an individual household. ","952dfd06":"The basic predictions are very bad, because they underestimate energy use by a school. What if we adjust for this and just look at the usage pattern?","4466a474":"The data has been read in successfully, but we need one column for the energy readings, rather than one per time point. We can use the 'melt' function to do this. "}}