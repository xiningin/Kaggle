{"cell_type":{"7cadd9f4":"code","d3d4ebe5":"code","e75de1b1":"code","eb25b194":"code","abc02e50":"code","fb4a2dd9":"code","a5a7ad24":"code","a8d2c471":"code","8b0545c1":"markdown","ceeb0de2":"markdown","5eecfc38":"markdown","4d06ef8e":"markdown","10e924a6":"markdown","604379d7":"markdown","46b975fe":"markdown","7a103426":"markdown"},"source":{"7cadd9f4":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline \nimport cv2 as cv","d3d4ebe5":"FACE_DETECTION_FOLDER = \"..\/\/input\/\/cat-face-detection\/\/\"\n#Frontal cat face detector\nfrontal_cascade_path = os.path.join(FACE_DETECTION_FOLDER,'haarcascade_frontalcatface.xml')","e75de1b1":"class CatFaceDetector():\n    '''\n    Class for Cat Face Detection\n    '''\n    def __init__(self,object_cascade_path):\n        '''\n        param: object_cascade_path - path for the *.xml defining the parameters for cat face detection algorithm\n        source of the haarcascade resource is: https:\/\/github.com\/opencv\/opencv\/tree\/master\/data\/haarcascades\n        '''\n\n        self.objectCascade=cv.CascadeClassifier(object_cascade_path)\n\n\n    def detect(self, image, scale_factor=1.15,\n               min_neighbors=1,\n               min_size=(30,30)):\n        '''\n        Function return rectangle coordinates of cat face for given image\n        param: image - image to process\n        param: scale_factor - scale factor used for cat face detection\n        param: min_neighbors - minimum number of parameters considered during cat face detection\n        param: min_size - minimum size of bounding box for object detected\n        '''\n        bbox=self.objectCascade.detectMultiScale(image,\n                                                scaleFactor=scale_factor,\n                                                minNeighbors=min_neighbors,\n                                                minSize=min_size)\n        return bbox","eb25b194":"#Detector for cat frontal face detectiob created\nfcfd=CatFaceDetector(frontal_cascade_path)","abc02e50":"def detect_cat_face(image, scale_factor, min_neighbors, min_size):\n    '''\n    Cat Face detection function\n    Identify frontal cat face and display the detected marker over the image\n    param: image - the image extracted from the video\n    param: scale_factor - scale factor parameter for `detect` function of ObjectDetector object\n    param: min_neighbors - min neighbors parameter for `detect` function of ObjectDetector object\n    param: min_size - minimum size parameter for f`detect` function of ObjectDetector object\n    '''\n    \n    image_gray=cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n\n    cat_face=fcfd.detect(image_gray,\n                   scale_factor=scale_factor,\n                   min_neighbors=min_neighbors,\n                   min_size=min_size)\n\n    for x, y, w, h in cat_face:\n        #detected cat face shown in color image\n        cv.circle(image,(int(x+w\/2),int(y+h\/2)),(int((w + h)\/4)),(0, 127,255),3)\n\n    # image\n    fig = plt.figure(figsize=(6,6))\n    ax = fig.add_subplot(111)\n    image = cv.cvtColor(image, cv.COLOR_BGR2RGB)\n    ax.imshow(image)\n    #return image","fb4a2dd9":"os.listdir(\"..\/\/input\/\/cat-dataset\/\/CAT_00\")\n\nfile_list = []\nfor root, dirs, files in os.walk(\"..\/\/input\/\/cat-dataset\/\/CAT_00\"):\n    for file in files:\n        if file.endswith(\".jpg\"):    \n            file_list.append(file)","a5a7ad24":"excerpt_file_list = file_list[0:10]\nexcerpt_file_list","a8d2c471":"# cat image\nfor img_src in excerpt_file_list:\n    img_source = cv.imread(os.path.join(\"..\/\/input\/\/cat-dataset\/\/CAT_00\",img_src))\n    # detect face and show cat face marker over image\n    detect_cat_face(image=img_source,scale_factor=1.10, min_neighbors=3, min_size=(50, 50)) ","8b0545c1":"We initialize an object of type CatFaceDetector.","ceeb0de2":"# Data preparation\n\n## Load packages  \n\nWe start by loading the packages.","5eecfc38":"## Load Haar Cascade resource\n\nHere we load the Haar Cascade resource for Cat Face detection.","4d06ef8e":"We define a function for cat face detection. The detected cat face is marked with an orange circle.","10e924a6":"# Introduction\n\nFrom [Face Detection using OpenCV](https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv) by @serkanpeldek we got and slightly modified the functions to extract the cat face.   \n\nIn [Detect Cat Face](https:\/\/www.kaggle.com\/gpreda\/detect-cat-face) we used the functions to check one image only.  \n\nWe will check now the Cat Face Detection functions against more images from a [Cat Dataset](https:\/\/www.kaggle.com\/crawford\/cat-dataset) (included here).\n","604379d7":"# More inspiration\n\nUse these resources to start tagging your favorite cat pictures.   \n\nHave fun!","46b975fe":"# Cat Face Detection\n\nThe class CatFaceDetector initialize the cascade classifier (using the imported resource for cat face detection). The function detect uses a method of the CascadeClassifier to detect objects into images - in this case the cat face.","7a103426":"We read a series of 25 cat images and we test the algorithm against this collection of images."}}