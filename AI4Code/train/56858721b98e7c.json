{"cell_type":{"74e6d2fe":"code","13be6bcc":"code","9757959a":"code","181fe43b":"code","7b33512a":"code","dd422544":"code","8892f721":"code","7607cca4":"code","c5bf25b3":"code","5d8c5338":"code","0984b8ff":"markdown","3006f036":"markdown","c5d3c048":"markdown","1d141634":"markdown","5e803683":"markdown","94dd1830":"markdown","7ad597e5":"markdown","38da7cc7":"markdown","88a19c33":"markdown","27172ecc":"markdown"},"source":{"74e6d2fe":"from IPython.display import clear_output\n!pip3 install -U lazypredict\n\nclear_output()","13be6bcc":"!pip3 install -U pandas==1.2.3 #Upgrading pandas\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport lazypredict\nfrom lazypredict import Supervised\nfrom lazypredict.Supervised import LazyRegressor\n\n\nplt.style.use('fivethirtyeight')\nplt.rcParams[\"figure.figsize\"] = (20,5)\nnum_models = 36   #Number of Models\nclear_output()","9757959a":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\")\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\n\ncat_features = [\"cat\" + str(i) for i in range(10)]\nnum_features = [\"cont\" + str(i) for i in range(14)]\n\nfor col in cat_features:\n    encoder = OrdinalEncoder()\n    train[col] = encoder.fit_transform(np.array(train[col]).reshape(-1, 1))\n    test[col] = encoder.transform(np.array(test[col]).reshape(-1, 1))\n    \nX = train.drop([\"id\", \"target\"], axis=1)\nX_test = test.drop([\"id\"], axis=1)\ny = train[\"target\"]\n\n\n#Spliting into training and validation set\noffset = int(X.shape[0] * 0.67)\nX_train, y_train = X[:offset], y[:offset]\nX_valid, y_valid = X[offset:], y[offset:]","181fe43b":"reg_idx = [i for i in range(num_models)]\nnoregs_idx = [10,15,23,24,29,32] # Removing 6 models from 42 models. Some of these models are time consuming whereas other require lot of ram.\nregs_name =[]\nregs = []\nfor i in range(42):\n    regs_name.append(lazypredict.Supervised.REGRESSORS[i][0])\n    regs.append(lazypredict.Supervised.REGRESSORS[i][1])\n\nfor i in noregs_idx:\n    del regs_name[i]\n    del regs[i]","7b33512a":"print(\"ALL 36 AVAILABLE REGRESSION MODELS:\")\nfor i in range(num_models):\n    print(i+1 , regs_name[i])","dd422544":"results = pd.DataFrame()\nfor i in range(num_models):\n    reg = LazyRegressor(verbose=0, \n                    ignore_warnings=False,\n                    custom_metric=None,\n                    regressors = [regs[i]])\n    models, predictions = reg.fit(X_train, X_valid, y_train, y_valid)\n    models.index = [regs_name[i]]\n    results = results.append(models)\nclear_output()","8892f721":"results = results.sort_values(by = \"RMSE\")\nresults","7607cca4":"results.head()","c5bf25b3":"plt.plot(reg_idx , results[\"RMSE\"],label = \"RMSE\" ,marker='o')\nplt.xlabel(\"Model ID\")\nplt.ylabel(\"RMSE\")\nplt.title(\"RMSE Comparison of 36 Different Models\")\nplt.legend()\nplt.show()","5d8c5338":"plt.plot(reg_idx , results[\"Time Taken\"],label = \"Time Taken\" ,marker='*' , color = 'r')\nplt.xlabel(\"Model ID\")\nplt.ylabel(\"Time Taken\")\nplt.title(\"TIME TAKEN of 36 Different Models\")\nplt.legend()\nplt.show()","0984b8ff":"## TOP 5 Performing Models (BY RMSE)","3006f036":"# Import Libraries","c5d3c048":"# Installing Lazy Predict","1d141634":"# <center>If you find this notebook useful, support with an upvote!<\/center>","5e803683":"# Comparison Plots","94dd1830":"**Created by Sanskar Hasija**\n\n**30dml- Comparison on 36 different models**\n\n**20 August 2021**\n","7ad597e5":"# MODEL SELECTION ","38da7cc7":"# Data Pre-Processing","88a19c33":"# Training on 36 different models","27172ecc":"# RESULTS"}}