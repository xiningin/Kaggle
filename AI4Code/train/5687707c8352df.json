{"cell_type":{"4a1b40bd":"code","9924ee13":"code","2957fb82":"code","84330acb":"code","8e39eb7c":"code","985ede15":"code","08fe96e8":"code","ba6f4a6c":"code","1ede044a":"code","94a6866d":"code","22a86353":"code","7159fb60":"markdown","66980648":"markdown","d8ef638d":"markdown","79c79ebe":"markdown","9574430e":"markdown","3aff3a51":"markdown","13e3ac7a":"markdown","0e815458":"markdown","ec00d074":"markdown"},"source":{"4a1b40bd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","9924ee13":"#taking only the id,excerpt,target\ndf = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\",usecols=[\"id\",\"excerpt\",\"target\"])\ntest_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/test.csv\",usecols=[\"id\",\"excerpt\"])\nprint(\"train shape\",df.shape)\ndf.head()","2957fb82":"from sklearn.feature_extraction.text import CountVectorizer","84330acb":"df.loc[0,'excerpt']","8e39eb7c":"vectorizer = CountVectorizer()","985ede15":"words_excerpt = df.loc[0,'excerpt']\nwords_excerpt","08fe96e8":"# Intially attempted to just put this in as (words_excerpt) but ran into a string error. \n# added as array and no error. \nvector = vectorizer.fit([words_excerpt])\nvocab = vector.vocabulary_\n# summarize your tokenization of vocab that was just built\nprint(vocab)","ba6f4a6c":"# encode your excerpt\nvect_enc = vectorizer.transform([words_excerpt])\nprint(vect_enc.shape)\nprint(type(vect_enc))\nprint(vect_enc.toarray())","1ede044a":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# create the transform\nvectorizer = TfidfVectorizer()\n#tokenize and build vocab\nvectorizer.fit([words_excerpt])\n# summarize\nprint(vectorizer.vocabulary_)\nprint(vectorizer.idf_)\n","94a6866d":"# encode document\nvect_tf = vectorizer.transform([words_excerpt])\n# summarize encoded vector\nprint(vect_tf.shape)\nprint(vect_tf.toarray())","22a86353":"from sklearn.feature_extraction.text import HashingVectorizer\n\nvectorizer = HashingVectorizer(n_features=20)\n# encode text\nvect_hash = vectorizer.transform([words_excerpt])\n# summarize\nprint(vect_hash.shape)\nprint(vect_hash.toarray())","7159fb60":"We now have normalized scores between 0 and 1 and the encoded document vectors can then be used directly with most machine learning algorithms.","66980648":"This is the bag-of-words model in which we are only concerned with encoding schemes that represent what words are present or the degree to which they are present in encoded documents without any information about order.\n\nSteps:\n* Create an instance of the CountVectorizer class\n* Call the fit() function in order to learn a vocabulary from one or more documents.\n* Call the transform() function on one or more documents as needed to encode each as a vector.","d8ef638d":"There are 104 words in the vocab and encoded vectors have a length of 104. \n\nThe encoded vector is a sparse matrix. \n\nWe output an array version of the encoded vector showing a count of 1 when there is one occurrence and number counts for the rest. One shows up 19 times!","79c79ebe":"# Lets try TF-IDF\n\nThis is an acronym that stands for Term Frequency - Inverse Document Frequency which are the components of the resulting scores assigned to each word.\n\n* Term Frequency: This summarizes how often a given word appears within a document. \udbff\udc00 \n* Inverse Document Frequency: This downscales words that appear a lot across documents.\n\nTF-IDF are word frequency scores that try to highlight words that are more interesting, e.g. frequent in a document but not across documents.","9574430e":"# Hashing\n\nWhy Hash? The above counts and frequencies can be useful, however the vocabulary can become very large which will require large vectors for encoding documents and impose large requirements on memory and slow down algorithms. \n\nWe can use a one way hash of words to convert them to integers. The clever part is that no vocabulary is required and you can choose an arbitrary-long fixed length vector. A downside is that the hash is a one-way function so there is no way to convert the encoding back to a word.\n\nThe example below demonstrates the HashingVectorizer for encoding a single document. An arbitrary fixed-length vector size of 20 was chosen. This corresponds to the range of the hash function, where small values (like 20) may result in hash collisions.","3aff3a51":"So. Well. We have some work to do here. \n1. We have capital letters.\n2. We have punctuation (which we may want\/need to understand complexity).\n3. We have \\n for new line.\n4. And finally, we have sentences. \n\nMaybe a fun exercise will be to clean all of it up and test it in various ways! ","13e3ac7a":"Running the example encodes the sample document as a 20-element sparse array. The values of the encoded document correspond to normalized word counts by default in the range of -1 to 1, but could be made simple integer counts by changing the default configuration.","0e815458":"So what is all this text about anyway? Do we have sentences? punctuation? Capital letters, etc. etc. etc.?? Let's look at one to see. \n\nAnd then on to fun!","ec00d074":"# Cleaning Text can be Fun. And, painful ;)\n\nIt's kind of an EDA but kind of Not an EDA. NDA :)\nSometimes you have to just play around with data to see what surprises might popup. \n\nGet your Bag on! We are going to work using the Bag of Words method with scikit-learn next.\n\n# Bag-of-Words!\n\nThe model is simple in that it throws away all of the order information in the words and focuses on the occurrence of words in a document. This can be done by assigning each word a unique number."}}