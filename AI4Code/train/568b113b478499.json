{"cell_type":{"28235d13":"code","35bffedc":"code","7c40f9f7":"code","d17e8e23":"code","5b53d6ad":"code","fd72ca7c":"code","f84f7df3":"code","9a3ad758":"code","436eccfc":"code","b193b292":"code","19ae4273":"code","8ea310f3":"code","72c83c36":"code","e5c12211":"code","aa5b02a6":"code","4f6aee37":"code","95cf70d0":"code","07c38228":"markdown","278c07d4":"markdown","ab8ec06e":"markdown","43e77023":"markdown","4064492f":"markdown","1a2de267":"markdown","d5759b60":"markdown","425cacb0":"markdown"},"source":{"28235d13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35bffedc":"df = pd.read_csv(\"\/kaggle\/input\/map-of-the-ancient-greek-and-roman-sites-in-turkey\/AncientSitesinTurkey.csv\", delimiter=',', encoding='utf8')\ndf.head()","7c40f9f7":"df.isnull().sum()","d17e8e23":"#Code by Varshini PJ  user: varshinipj\n\nfig = px.scatter_mapbox(df,\n# Here, plotly gets, (x,y) coordinates\nlat=\"LatDec\",\nlon=\"LongDec\",\ntext='Name',\n\n                #Here, plotly detects color of series\n                size=\"Unnamed: 0\",\n                color = \"Type\",\n                labels=\"Name\",\n\n                zoom=14.5,\n                center={\"lat\":, \"lon\":},\n                height=600,\n                width=800)\nfig.update_layout(mapbox_style='stamen-terrain')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"Ancient Greeks and Romans in Turkey\")\nfig.show()","5b53d6ad":"greek = df[(df['Type']=='Greek')].reset_index(drop=True)\ngreek.head(2)","fd72ca7c":"joint_greek=pd.merge(greek,greek,left_on='Name',right_on='Name',how='inner')","f84f7df3":"#Ascending order False\ntop_rated=greek.sort_values('Name', ascending=False)\ntop10=top_rated.head(10)\nf=['Name','ImageUrl']\ndispl=(top10[f])\ndispl.set_index('Name', inplace=True)","9a3ad758":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/netflix-vs-books-recommender-analysis-eda\n\nfrom IPython.display import Image, HTML\n\ndef path_to_image_html(path):\n    '''\n     This function essentially convert the image url to \n     '<img src=\"'+ path + '\"\/>' format. And one can put any\n     formatting adjustments to control the height, aspect ratio, size etc.\n     within as in the below example. \n    '''\n\n    return '<img src=\"'+ path + '\"\"\/width=\"200\" height=\"40\" alt=\"Computer Hope\">'\n\nHTML(displ.to_html(escape=False ,formatters=dict(ImageUrl=path_to_image_html),justify='center'))","436eccfc":"roman = df[(df['Type']=='Roman')].reset_index(drop=True)\nroman.head()","b193b292":"joint_roman=pd.merge(roman,roman,left_on='Name',right_on='Name',how='inner')","19ae4273":"#Ascending order False\ntop_rated=roman.sort_values('Name', ascending=False)\ntop10=top_rated.head(10)\nf=['Name','ImageUrl']\ndispl=(top10[f])\ndispl.set_index('Name', inplace=True)","8ea310f3":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/netflix-vs-books-recommender-analysis-eda\n\nfrom IPython.display import Image, HTML\n\ndef path_to_image_html(path):\n    '''\n     This function essentially convert the image url to \n     '<img src=\"'+ path + '\"\/>' format. And one can put any\n     formatting adjustments to control the height, aspect ratio, size etc.\n     within as in the below example. \n    '''\n\n    return '<img src=\"'+ path + '\"\"\/width=\"200\" height=\"40\" alt=\"Computer Hope\">'\n\nHTML(displ.to_html(escape=False ,formatters=dict(ImageUrl=path_to_image_html),justify='center'))","72c83c36":"istanbul = df[(df['Name']=='Istanbul')].reset_index(drop=True)\nistanbul.head(2)","e5c12211":"#Code by Varshini PJ  user: varshinipj\n\nfig = px.scatter_mapbox(istanbul,\n# Here, plotly gets, (x,y) coordinates\nlat=\"LatDec\",\nlon=\"LongDec\",\ntext='Name',\n\n                #Here, plotly detects color of series\n                size=\"Unnamed: 0\",\n                color = \"Description\",\n                labels=\"Name\",\n\n                zoom=8,\n                center={\"lat\":37.575278, \"lon\":30.983056},\n                height=600,\n                width=800)\nfig.update_layout(mapbox_style='stamen-terrain')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"Ancient Greek and Romans in Turkey\")\nfig.show()","aa5b02a6":"joint_df=pd.merge(df,df,left_on='Unnamed: 0',right_on='Unnamed: 0',how='inner')","4f6aee37":"#Ascending order False\ntop_rated=df.sort_values('Unnamed: 0', ascending=False)\ntop10=top_rated.head(10)\nf=['Name','ImageUrl']\ndispl=(top10[f])\ndispl.set_index('Name', inplace=True)","95cf70d0":"#Code by Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/netflix-vs-books-recommender-analysis-eda\n\nfrom IPython.display import Image, HTML\n\ndef path_to_image_html(path):\n    '''\n     This function essentially convert the image url to \n     '<img src=\"'+ path + '\"\/>' format. And one can put any\n     formatting adjustments to control the height, aspect ratio, size etc.\n     within as in the below example. \n    '''\n\n    return '<img src=\"'+ path + '\"\"\/width=\"200\" height=\"40\" alt=\"Computer Hope\">'\n\nHTML(displ.to_html(escape=False ,formatters=dict(ImageUrl=path_to_image_html),justify='center'))","07c38228":"Since people give rankings to anything: How a ruin is better than another? No clue at all.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSQK7FQ4eSO1wbIOvxJoTOR--VtKqjnzltHqg&usqp=CAU)thefrugaltourist.com","278c07d4":"#Below I removed N, E (north\/east...) and degree from Latitude\/Longitude.","ab8ec06e":"#Istanbul","43e77023":"#Ancient Roman Sites in Turkey","4064492f":"\"Size - numerical attribute to quantify\"\n\n\"Color - categorical attribute to classify the data points on the map according to the class of that categorical attribute.\"\n\nBy Varshini P.J.","1a2de267":"#Ancient Greek Sites in Turkey","d5759b60":"That's all for now Kagglers! ","425cacb0":"#Only Roman. The intriguing is that some names sound that they come from Lord of the Rings or Game of Thrones. (e.g. Amorium, D\u00f6rtayak)"}}