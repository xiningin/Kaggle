{"cell_type":{"49cf8c8d":"code","1403b509":"code","0c7b6a04":"code","267a398c":"code","46635a57":"code","1dd550d3":"code","a6a02153":"markdown"},"source":{"49cf8c8d":"!pip install git+https:\/\/github.com\/jacobgil\/pytorch-grad-cam.git","1403b509":"import copy\nfrom pytorch_grad_cam import GradCAM, ScoreCAM, GradCAMPlusPlus, AblationCAM, XGradCAM, EigenCAM, FullGrad\nfrom pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget\nfrom pytorch_grad_cam.utils.image import show_cam_on_image\nfrom torchvision.models import resnet18\nimport numpy as np\nfrom PIL import Image\nimport torch\nimport torch.nn as nn\nimport torchvision","0c7b6a04":"# Load model resnet18\nmodel = resnet18(pretrained=True)\n# Pick up layers for visualization\ntarget_layers = [model.layer4[-1]]","267a398c":"path = \"\/kaggle\/input\/retail-product-checkout-dataset\/test2019\/20180824-13-35-55-2.jpg\"\n\nrgb_img = Image.open(path).convert('RGB')\n# Max min normalization\nrgb_img = (rgb_img - np.min(rgb_img)) \/ (np.max(rgb_img) - np.min(rgb_img))\n# Create an input tensor image for your model\ninput_tensor = torchvision.transforms.functional.to_tensor(rgb_img).unsqueeze(0).float()\n# Note: input_tensor can be a batch tensor with several images!\n\n# Construct the CAM object once, and then re-use it on many images:\ncam = GradCAM(model=model, target_layers=target_layers, use_cuda=False)\n# cam = GradCAMPlusPlus(model=model, target_layers=target_layers, use_cuda=False)\n# cam = ScoreCAM(model=model, target_layers=target_layers, use_cuda=False)\n\n# You can also use it within a with statement, to make sure it is freed,\n# In case you need to re-create it inside an outer loop:\n# with GradCAM(model=model, target_layers=target_layers, use_cuda=args.use_cuda) as cam:\n#   ...\n\n# We have to specify the target we want to generate\n# the Class Activation Maps for.\n# If targets is None, the highest scoring category\n# will be used for every image in the batch.\n# Here we use ClassifierOutputTarget, but you can define your own custom targets\n# That are, for example, combinations of categories, or specific outputs in a non standard model.\n# targets = [e.g ClassifierOutputTarget(281)]\n# target_category = None\n\n# You can also pass aug_smooth=True and eigen_smooth=True, to apply smoothing.\ngrayscale_cam = cam(input_tensor=input_tensor)\n\n# In this example grayscale_cam has only one image in the batch:\ngrayscale_cam = grayscale_cam[0, :]\nvisualization = show_cam_on_image(rgb_img, grayscale_cam, use_rgb=True)","46635a57":"Image.fromarray(visualization, 'RGB')","1dd550d3":"Image.open(path).convert('RGB')","a6a02153":"Introducing quick GradCAM visualization technique using PyTorch.\n\nNice repositry: https:\/\/github.com\/jacobgil\/pytorch-grad-cam"}}