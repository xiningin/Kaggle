{"cell_type":{"4a2108d3":"code","9dc91368":"code","d7f83ed9":"code","7a1128fe":"code","c12d82d9":"code","9afa5c16":"code","ac9124a3":"code","d04547e1":"code","93153771":"code","d361a6bb":"code","756317c8":"code","86db62d7":"code","1d56e532":"code","c9b22ffb":"code","e618ca24":"code","166ce05a":"code","5ec450be":"code","da93f290":"code","39a23348":"code","a84640df":"code","118058d5":"code","204b6ccd":"code","c409ed67":"code","20f4b0c0":"code","199a79cb":"code","2ee8e8c8":"code","1c3c0fb3":"code","b77f0dd5":"code","5fd87243":"code","8e707b7d":"markdown","76c304d5":"markdown","ddaa3dc9":"markdown","3a0fc40b":"markdown","38631653":"markdown","8a3b7938":"markdown","475f0044":"markdown","f54b324a":"markdown","1a0f0d46":"markdown","03eee7ee":"markdown","3d5ddf83":"markdown","76d69438":"markdown","0219a4ac":"markdown","5dc97342":"markdown","1b293f77":"markdown","e447b1be":"markdown","cc3eca65":"markdown","d1286ca4":"markdown","86b27776":"markdown","ba1db447":"markdown","f9aaaa8c":"markdown","440c266a":"markdown","34b7274e":"markdown"},"source":{"4a2108d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport glob\nimport json","9dc91368":"#creating a list of all csv files to make loading them easier\ncsvs = glob.glob('..\/input\/youtube-new\/*.{}'.format('csv'))\ncsvs","d7f83ed9":"df_list = []\nfor csv in csvs:\n    if csv[21:23] in ['KR', 'MX', 'JP', 'RU']:\n        df = pd.read_csv(csv, index_col = 'video_id', engine='python')\n    else:\n        df = pd.read_csv(csv, index_col = 'video_id')\n    df['country'] = csv[21:23] #This gives the 2 letter country code\n    df_list.append(df)\n    \nyt_df = pd.concat(df_list)\nyt_df.head()","7a1128fe":"yt_df.info()\n#From the .head() sample and the .info() description, we can see that there are two date\/time related columns\n#We should change these columns from dtype = object to dtype = datetime","c12d82d9":"#Now we will add a category column using the json files provided\nyt_df['category_id'] = yt_df['category_id'].astype(str)\n\ncategory_ids = {}\n\n#Some of the json files were missing one category label so I had to use the US version\n#Thus we only need to unpack one json file to fill out our dictionary\n\nj = open('..\/input\/youtube-new\/US_category_id.json', 'r')\njson_data = json.load(j)\nfor category in json_data['items']:\n    category_ids[category['id']] = category['snippet']['title']\n\nyt_df.insert(4,'category', yt_df['category_id'].map(category_ids))\nprint(yt_df['category'].unique())\nyt_df.head()","9afa5c16":"#Changing the trending date and publish time to datetime\n#Let's also split the publish time column into a publish date and a publish time column\n#Notice that the format for trending date is Year.day.month\n#the format for publish time is Year-month-day (T)Hour:Minute:Second.milisecond(Z)\nfrom datetime import datetime\nyt_df['trending_date'] = pd.to_datetime(yt_df['trending_date'], errors = 'coerce',format = '%y.%d.%m')\nyt_df['publish_time'] = pd.to_datetime(yt_df['publish_time'], errors = 'coerce', format = '%Y-%m-%dT%H:%M:%S.%fZ')\nyt_df.insert(5,'publish_date', yt_df['publish_time'].dt.date)\nyt_df['publish_time'] = yt_df['publish_time'].dt.time\nyt_df.info()\nyt_df[['trending_date', 'publish_date', 'publish_time']].head(10)","ac9124a3":"#It looks like there are videos where the video id is missing\nprint(yt_df.reset_index()['video_id'].str.startswith('#').sum())\n\n#Let us remove these rows\nyt_df = yt_df.reset_index()\nyt_df = (yt_df[~yt_df['video_id'].str.startswith('#')])\nyt_df = yt_df.set_index('video_id')\nprint(yt_df.reset_index()['video_id'].str.startswith('#').sum())","d04547e1":"countries = yt_df['country'].unique()\ncountries","93153771":"for country in countries:\n    cat_counts_df = yt_df[yt_df['country']==country]['category'].value_counts().reset_index()\n    plt.figure(figsize=(15,10))\n    sns.set_style(\"darkgrid\")\n    ax = sns.barplot(y=cat_counts_df['index'],x=cat_counts_df['category'], data=cat_counts_df,orient='h')\n    plt.xlabel(\"Number of Videos\")\n    plt.ylabel(\"Category\")\n    plt.title(f'Trending Videos by Category in {country}')\n    plt.show()","d361a6bb":"#Reset the index to make video ID a separate column again, then filter out all but the first instance of each video\nfirst_trending = yt_df.reset_index().drop_duplicates('video_id', keep = 'first').set_index('video_id')\n\n#Find the difference between the date published and the first trending date\nfirst_diff = first_trending['trending_date'].astype('datetime64[ns]') - first_trending['publish_date'].astype('datetime64[ns]')\nfirst_diff = first_diff.reset_index()\nfirst_diff.columns = ['video_id', 'pub_to_trend_first']\n\n#Store the time from publishing to trending in a dictionary\npub_to_trend_dict = {}\nfor row in first_diff.itertuples():\n    pub_to_trend_dict[str(row[1])] = row[2].days\n\n#Find the most recent instacne of trending\nlast_trending = yt_df.reset_index().drop_duplicates('video_id', keep = 'last').set_index('video_id')\nlast_diff = last_trending['trending_date'].astype('datetime64[ns]') - last_trending['publish_date'].astype('datetime64[ns]')\nlast_diff = last_diff.reset_index()\nlast_diff.columns = ['video_id', 'pub_to_trend_last']\nyt_df = yt_df.reset_index()\n\npub_to_trend_dict2 = {}\nfor row in last_diff.itertuples():\n    pub_to_trend_dict2[str(row[1])] = row[2].days\n\n#insert columns for the publication-trending time differences\nyt_df.insert(4, 'pub_to_trend_last', yt_df['video_id'].map(pub_to_trend_dict2))\nyt_df.insert(4, 'pub_to_trend', yt_df['video_id'].map(pub_to_trend_dict))\nyt_df.insert(4, 'trending_duration', 0)\n\nyt_df['trending_duration'] = abs(yt_df['pub_to_trend_last'] - yt_df['pub_to_trend']) +1\nyt_df.set_index('video_id')[['pub_to_trend', 'trending_duration']].sort_values('trending_duration', ascending = False).head()","756317c8":"yt_df[['category','trending_duration']].head()","86db62d7":"trending_time_category = yt_df.groupby(['category', 'trending_duration']).count()['video_id'].unstack().clip(upper = 500)\nyt_df = yt_df.set_index('video_id')\nplt.figure(figsize=(15,15))\nsns.set_style(\"dark\")\nsns.heatmap(trending_time_category, cmap = 'cool')\nplt.title('Trending Duration by Video Category')\nplt.show()","1d56e532":"#Lets create a dataframe that tracks the number of times each video trends, grouped by country\ntrend_count = yt_df.groupby([yt_df.index, 'country']).count()['title'].sort_values(ascending=False).reset_index()\ntrend_count.head()","c9b22ffb":"#Create a dataframe to calculate the correlation between countries\ncorr_df = trend_count.pivot(index='video_id', columns = 'country', values = 'title')\ncorr_df = corr_df.fillna(0).astype(int)\ncorr_df['total'] = corr_df.sum(axis=1)\ncorr_df","e618ca24":"countries = [c for c in corr_df.columns if c != 'total']\n\ncorr_mat = corr_df[countries].corr()\n\nfig = plt.figure(figsize=(15,15))\nsns.heatmap(corr_mat, annot = True)\nplt.show()","166ce05a":"yt_df.info()\n#looks like the interactions stats are already integers. Dope","5ec450be":"#List of interactions and the number of countries we have\ninteractions = ['views', 'likes', 'dislikes', 'comment_count']\ncountry_count = len(countries)\n\n#Creating a dataframe of all the info we want to graph\ninteract_df = yt_df.groupby(['country'])[interactions].sum()\ninteract_df['unique_counts'] = pd.DataFrame(yt_df.reset_index().groupby(['country'])['video_id'].nunique())\n#Diving the total interaction counts by the number of unique trending videos in each country\ninteract_df = interact_df.apply(lambda x: x\/interact_df['unique_counts'])\ninteract_df = interact_df.drop('unique_counts', axis=1)\n\n\nfor column in interact_df.columns:\n    fig = plt.figure(figsize=(15,10))\n    sns.barplot(x = interact_df.index, y = column, data = interact_df)\n    plt.title('Number of {} by Country'.format(column.capitalize()))\n    plt.show()","da93f290":"t_counts_country = pd.DataFrame(trend_count.groupby(['country'])['title'].value_counts())\nt_counts_country.columns = ['title_counts']\nt_counts_country = t_counts_country.reset_index()\n\nfor country in t_counts_country['country'].unique():\n    fig = plt.figure(figsize=(10,10))\n    sns.lineplot(x='title', y='title_counts', data = t_counts_country[t_counts_country['country']==country])\n    plt.title(f'How Many Times Do Videos Trend in {country}')\n    plt.xlabel('Instances of Trending')\n    plt.ylabel('Number of Videos')\n    plt.show()","39a23348":"like_dislike = yt_df.groupby(['category'])[['likes', 'dislikes']].sum()\nfor col in like_dislike.columns:\n    fig = plt.figure(figsize=(10,10))\n    sns.barplot(x = like_dislike.index, y = like_dislike[col], data = like_dislike)\n    plt.xticks(rotation = 'vertical')\n    plt.title(f'Number of {col.capitalize()} by Category')\n    plt.show()","a84640df":"like_dislike['ratio'] = like_dislike['likes']\/like_dislike['dislikes']\nlike_dislike = like_dislike.sort_values(by='ratio', ascending=False)\n#This makes the bars red if they have fewer likes than dislikes, and green otherwise\nclrs = ['red' if (x < 1) else 'green' for x in like_dislike['ratio'].values ]\n\nfig = plt.figure(figsize=(10,10))\nsns.barplot(x = like_dislike.index, y = like_dislike['ratio'], data = like_dislike, palette = clrs)\nplt.xticks(rotation = 'vertical')\nplt.title('Like\/Dislike Ratio by Category')\nplt.show()","118058d5":"import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom nltk.corpus import stopwords\nfrom nltk import sent_tokenize, word_tokenize\nfrom itertools import chain\nimport re","204b6ccd":"#let's create a list of stopwords from all of the avialable languages in nltk\nlanguages = ['english','french','german','russian','spanish']\nstopwords_list = [stopwords.words(lang) for lang in languages]\nstopwords_list = list(chain(*stopwords_list))","c409ed67":"polarities = [12.5359,10.352399999999996,7.096599999999999,9.528299999999998,16.047199999999997,7.9980999999999955,15.507100000000001,5.694699999999998,1.9956000000000005,-6.599499999999999,\n6.049099999999998,9.764000000000005,1.4337,12.204700000000004,9.140699999999994,3.0110000000000006,1.85,0.0]\n\ncat_list = yt_df['category'].unique()","20f4b0c0":"tag_sentiments = pd.concat([pd.DataFrame(cat_list),pd.DataFrame(polarities)], axis=1)\ntag_sentiments.columns = ['category','polarity']\ntag_sentiments = tag_sentiments.sort_values('polarity').reset_index()","199a79cb":"fig = plt.figure(figsize=(10,10))\nsns.barplot(x='polarity', y='category', data=tag_sentiments, orient='h', palette='coolwarm_r')\nplt.xlabel('Categories')\nplt.ylabel('Polarity')\nplt.show()","2ee8e8c8":"year_counts = yt_df['publish_date'].apply(lambda x: x.year).reset_index()\nyear_counts = year_counts.groupby('publish_date').count()\nyears_upto_2016 = year_counts[year_counts.index <= 2016]\nyears_after_2016 = year_counts[year_counts.index >2016]\n\nfig = plt.figure(figsize=(10,10))\nsns.barplot(x=years_upto_2016.index, y=years_upto_2016['video_id'], data=years_upto_2016, palette='Pastel2')\nplt.xlabel('Year Published')\nplt.ylabel('Number of Trending Videos')\nplt.show()\n\nsns.barplot(x=years_after_2016.index, y=years_after_2016['video_id'], data=years_after_2016, palette='Pastel2')\nplt.xlabel('Year Published')\nplt.ylabel('Number of Trending Videos')\nplt.show()","1c3c0fb3":"channels = yt_df.groupby('channel_title').size().reset_index(name='video_count')\nchannels = channels.sort_values('video_count', ascending=False)\nchannels_head = channels.head(20)","b77f0dd5":"fig = plt.figure(figsize=(10,10))\nsns.barplot(x=channels_head['video_count'], y=channels_head['channel_title'], data=channels_head, palette='ocean')\nplt.xlabel('Number of Trending Videos')\nplt.ylabel('Channel Name')\nplt.show()","5fd87243":"Metrics = yt_df.drop(['pub_to_trend','pub_to_trend_last'], axis=1)\n\nfig = plt.figure(figsize=(10,10))\nsns.heatmap(Metrics.corr(), annot=True, cmap='RdBu')\nplt.show()","8e707b7d":"## Question 7: What Categories Are the Most Controversial","76c304d5":"**Insight:** The heatmap above seems to suggest that in general, most metrics are not correlated. However, there are a few (the blue cluster near the center) that do have a significant correlation. It seems like views and likes are highly correlated, as well as likes and comment count. Interestingly, the correlation between views and dislikes is only about 50% of the correlation between views and likes","ddaa3dc9":"**Insight:** What these graphs show us is that there was a meteoric rise in the number of trending videos that emerged after 2016. The actual cause of this increase is a bit complicated and is probably due to a number of different factors. Some possible explanations that come to mind are that large media companies started shift over to youtube around that time, and that the general number of users and content creators have increases dramatically as YouTube became a household name.","3a0fc40b":"**Insights:** As we can see, the Entertainment category is the most heavily trending category in the majority of the countries in this dataset. Even in the few countries where this is not the case, the most trending categories are very similar in concept, such as Music in Great Britain and People\/Blogs in Russia.\n\nAnother interesting observation is that News\/Politics are generally pretty high up for most countries (usually top 5). However, in Britain, News\/Politics is ranked 9th. This is surprising given the state of british politics in the past few years. Perhaps this trend is an indiciation that British residents used YouTube as a way to relax and get away from the political events of this time period.","38631653":"## Question 2: Videos From Which Category Trend For the Longest","8a3b7938":" # Data Analysis","475f0044":"## Question 6: \n### a)Which Types of Videos are Most Liked? Most Disliked?\n### b)Which Types of Videos have the Best Like\/Dislike Ratio?","f54b324a":"**Insight:** After filtering out all of the stopwords in the tags, we find that the sentiments expressed within the tags for each category. The way to interpret this graph is that negative polarity means that there are more negative sentiments expressed in the videos of that category, while positive polarity means there are more positive sentiments expressed. News and politics is the most negative category, which is to be expected. A surprising thing to see is that pets and animals is 4th in terms of positive sentiment, despite being the category with the highest ratio of likes to dislike. I would've expected pets and animals to be the number 1 or 2 stop on this graph. In general, it seems like all categories barring politics are tagged in a positive way, which is pretty nice to see.","1a0f0d46":"## Question 5: How Long do Videos Trend in Each Country","03eee7ee":"**Insights:** I think these graphs help us understand why british videos get so much more interaction compared to videos in other regions. Videos trend for much longer in Great Britain than in any other region in this dataset. During their time on the trending page, these british videos probably get a lot more attention and interaction than the videos of other countries, which fade out of the spotlight relatively quickly.","3d5ddf83":"#calculate the polarities for each category based on video tags\n\npolarities = []\ncat_list = yt_df['category'].unique()\n\nfor cat in cat_list:\n    \n    tag_words = yt_df[yt_df['category']==cat]['tags'].str.lower().str.cat(sep='|')\n    tag_words = re.sub('[^A-Za-z]+', ' ', tag_words)\n    token_words = word_tokenize(tag_words)\n    \n    filtered_tags = [word for word in token_words if not word in stopwords_list]\n    filtered_tags = [word for word in filtered_tags if len(word)>2]\n    filtered_tags = [word for word in filtered_tags if not word.isdigit()]\n    \n    word_distribution = nltk.FreqDist(filtered_tags)\n    freq_df = pd.DataFrame(word_distribution.most_common(1000), columns=['word','freq'])\n    \n    compound=.0\n    for word in freq_df['word'].head(1000):\n        compound += SentimentIntensityAnalyzer().polarity_scores(word)['compound']\n    polarities.append(compound)","76d69438":"## Question 1: What Types of Videos Trend Most Often","0219a4ac":"**Insight:** What I learned from this graph is that the trending content on youtube seems to be controlled by big media corporations. Nearly every channel in the top 20 (in terms of how many trending videos each channel had) is a big media corporation. Most of them are American corporations, but there are a few Indian ones such as SET India and VikatanTV. The only content creator in the top 20 is PewDiePie, who has always been at the top of YouTube. In my opinion, this graph is very sad to see. A platform that was once all about ordinary content creators seems to have turned into another playground for huge corporations.","5dc97342":"**Insight:** Although music videos have the highest number of likes compared to any other category, they also have the most dislikes. This makes sense, as music evokes a lot of emotion from people. Also, songs and music videos can, and often do, carry very heavy political, social, and\/or emotional themes, which can garner a lot of love but also a lot of hate. Despite getting a relatively low number of likes, pet videos have, by far, the best like\/dislike ratio. This also makes sense, due to the fact that animal videos are usually just cute animals doing silly things.","1b293f77":"**Insights:** From this heatmap, we can see a few things. First, we see that very few videos trend for more than a few days. For most categories, videos that trend for long periods of time are few and far between. The exception to this rule seems to be the Music category. Music videos trend for a long time and in higher frequencies than other types of videos. This makes sense, considering people are much more likely to play a catchy song over and over again than a 2hr long movie.","e447b1be":"## Question 10: Are Different Metrics of Viewer Interaction Correlated?","cc3eca65":"## Question 3: Are Trends in One Country Connected to Trends in Other Countries?","d1286ca4":"## Question 4: Do Different Countries Interact with Trending Videos Differently?\n### Note: We will count interaction based on views, likes, dislikes, and comments","86b27776":"**Insights:** Well, this is sorta strange isn't it? British videos seem to have much higher levels of interaction compared to all other countries. The US is second in all categories but it's not even closer. This begs the question, why are trending videos in Britain being interacted with so much more than other countries","ba1db447":"# Create A Dataframe for all Countries","f9aaaa8c":"## Question 9: Which YouTube Channels Trend the Most Often? Least Often?","440c266a":"**insights:** From this heatmap, we can see that there is generally very little correlation between trending vidoes between countries. However, we can see that the correlation is higher between the US, Canada, and Great Britain. This is most likely because these countries are all English-speaking countries, thus making it easier for videos to spread throughout all three countries. However, it is also interesting that the correlation between France and Canada is pretty weak. I would expect a higher correlation given the fact that French is an official Canadian language.","34b7274e":"## Question 8: How Has the Volume of Trending Videos Changed Over Time"}}