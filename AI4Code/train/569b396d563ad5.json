{"cell_type":{"642e7406":"code","0702d750":"code","e73d313d":"code","76fb1f62":"code","07ec1388":"code","4379e095":"code","a9394980":"code","2747306a":"code","ce35572f":"code","3c32bec1":"code","eb0da49d":"code","c095f6a5":"code","db60d581":"code","b348ffbf":"code","808f908f":"code","713d96f4":"code","0fcfd583":"code","cd5c1fda":"code","99facb51":"code","42622883":"code","be910139":"code","b137d85f":"code","20ad1777":"code","f1cac6ca":"code","64f78178":"code","3cb8515f":"code","eaa710ee":"code","9929a769":"code","31553d35":"code","99cbb634":"code","1052c671":"code","121aadc4":"code","107ee4ee":"code","b135c1fb":"code","68abc18c":"code","6babd62c":"code","8313d351":"code","5fd9719d":"code","57fd0061":"code","405b247b":"code","93ad9a1d":"code","12eebe26":"code","5f81daaa":"code","56ee63b5":"code","d8c2635c":"code","ee52eb3a":"code","f76c6eea":"code","0063f07e":"code","dae0084a":"code","e346a942":"code","0b6869af":"code","14b8c7df":"code","c0658bf7":"code","362e44ae":"code","2a5816d7":"code","c9ea8060":"code","f94791d4":"code","56b8bf7e":"code","da2b62d5":"code","09f7ea06":"code","f552a4ad":"code","c106dd02":"code","72efc825":"code","72cfefc5":"code","be689a85":"code","620bedde":"code","558e1aa5":"code","a3330f16":"code","1e20e1b0":"code","38e81978":"code","1cd4428d":"code","4c3ad7c8":"code","9977d16e":"markdown","16fe925a":"markdown","1e563d00":"markdown","b2d060f4":"markdown","58cb4ae1":"markdown","bfcdb400":"markdown","0116e28c":"markdown","a87e2dd3":"markdown","0cba3e18":"markdown","514136b4":"markdown","c8c4bcdc":"markdown","fb35d11f":"markdown","9f81d65c":"markdown","6ff8170b":"markdown","08d35fc8":"markdown","1a494914":"markdown","8bcde388":"markdown","f26f42af":"markdown"},"source":{"642e7406":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n#import itertools","0702d750":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e73d313d":"os.listdir()","76fb1f62":"traindata= pd.read_csv(\"\/kaggle\/input\/big-mart-sales-prediction\/Train.csv\")\ntestdata= pd.read_csv(\"\/kaggle\/input\/big-mart-sales-prediction\/Test.csv\")","07ec1388":"traindata","4379e095":"testdata","a9394980":"corr = traindata.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corr,cmap=\"YlGnBu\")","2747306a":"print(traindata.info())\nprint('*'*20)\nprint(testdata.info())\n","ce35572f":"fig,axes=plt.subplots(1,1,figsize=(12,8))\nsns.scatterplot(x='Item_MRP',y='Item_Outlet_Sales',hue='Item_Fat_Content',size='Item_Weight',data=traindata)","3c32bec1":"traindatacol= ['Item_Identifier', 'Item_Weight', 'Item_Fat_Content', 'Item_Visibility',\n       'Item_Type', 'Item_MRP', 'Outlet_Identifier',\n       'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type',\n        'Outlet_Type']\nfor i in traindatacol:\n    print(\"print(traindata.{}.unique())\".format(i))\n    \n\n    ","eb0da49d":"traindata.Item_Type.unique()","c095f6a5":"print(traindata.Item_Identifier.unique())\nprint(traindata.Item_Weight.unique())\nprint(traindata.Item_Fat_Content.unique())\nprint(traindata.Item_Visibility.unique())\nprint(traindata.Item_Type.unique())\nprint(traindata.Item_MRP.unique())\nprint(traindata.Outlet_Identifier.unique())\nprint(traindata.Outlet_Establishment_Year.unique())\nprint(traindata.Outlet_Size.unique())\nprint(traindata.Outlet_Location_Type.unique())\nprint(traindata.Outlet_Type.unique())","db60d581":"traindata.hist(figsize=(15,12))","b348ffbf":"\ntraindatacol= ['Item_Identifier', 'Item_Weight', 'Item_Fat_Content', 'Item_Visibility',\n       'Item_Type', 'Item_MRP', 'Outlet_Identifier',\n       'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type',\n        'Outlet_Type']\nfor i in traindatacol:\n    print(\"traindata.{}.value_counts()\".format(i))\n","808f908f":"hel = [traindata.Item_Identifier.value_counts(),\ntraindata.Item_Weight.value_counts(),\ntraindata.Item_Fat_Content.value_counts(),\ntraindata.Item_Visibility.value_counts(),\ntraindata.Item_Type.value_counts(),\ntraindata.Item_MRP.value_counts(),\ntraindata.Outlet_Identifier.value_counts(),\ntraindata.Outlet_Establishment_Year.value_counts(),\ntraindata.Outlet_Size.value_counts(),\ntraindata.Outlet_Location_Type.value_counts(),\ntraindata.Outlet_Type.value_counts()]\nfor i in range(11):\n    print(hel[i])","713d96f4":"traindata.apply(lambda x: len(x.unique()))","0fcfd583":"testdata.apply(lambda x: len(x.unique()))","cd5c1fda":"traindata=traindata.drop(columns=['Item_Identifier','Item_Visibility'])","99facb51":"testdata=testdata.drop(columns=['Item_Identifier','Item_Visibility'])","42622883":"traindata.Item_Weight.describe()","be910139":"testdata.Item_Weight.describe()","b137d85f":"traindata.loc[traindata.Item_Weight.isnull()]","20ad1777":"# we can remove Item_Weight due to low correlation but here is how we can fill nan values and use\ntraindata.Item_Weight.fillna(12.857645, inplace=True)\ntestdata.Item_Weight.fillna(12.695633, inplace=True)","f1cac6ca":"traindata.Item_Weight.isnull().any()","64f78178":"traindata.loc[traindata.Outlet_Size.isnull()]","3cb8515f":"traindata.groupby(['Outlet_Location_Type','Outlet_Type'])['Outlet_Size'].value_counts()","eaa710ee":"traindata.groupby('Outlet_Size').Outlet_Identifier.value_counts()","9929a769":"traindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT013'),'Outlet_Size']='High'\ntraindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT027'),'Outlet_Size']='Medium'\ntraindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT049'),'Outlet_Size']='Medium'\ntraindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT018'),'Outlet_Size']='Medium'\n\ntraindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT035'),'Outlet_Size']='Small'\ntraindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT046'),'Outlet_Size']='Small'\ntraindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Identifier=='OUT019'),'Outlet_Size']='Small'","31553d35":"testdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT013'),'Outlet_Size']='High'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT027'),'Outlet_Size']='Medium'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT049'),'Outlet_Size']='Medium'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT018'),'Outlet_Size']='Medium'\n\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT035'),'Outlet_Size']='Small'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT046'),'Outlet_Size']='Small'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Identifier=='OUT019'),'Outlet_Size']='Small'","99cbb634":"traindata.loc[traindata.Outlet_Size.isnull()]","1052c671":"traindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Type=='Grocery Store'),'Outlet_Size']='Small'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Type=='Grocery Store'),'Outlet_Size']='Small'","121aadc4":"traindata.loc[traindata.Outlet_Size.isnull()]","107ee4ee":"traindata.loc[(traindata.Outlet_Size.isnull())&(traindata.Outlet_Type=='Supermarket Type1')&(traindata.Outlet_Location_Type=='Tier 2'),'Outlet_Size']='Small'\ntestdata.loc[(testdata.Outlet_Size.isnull())&(testdata.Outlet_Type=='Supermarket Type1')&(testdata.Outlet_Location_Type=='Tier 2'),'Outlet_Size']='Small'","b135c1fb":"traindata.loc[traindata.Outlet_Size.isnull()]","68abc18c":"traindata.isnull().sum()","6babd62c":"testdata.isnull().sum()","8313d351":"traindata['Item_Fat_Content'].replace(['low fat','LF ','reg'],['Low Fat','Low Fat','Regular'],inplace=True)\ntestdata['Item_Fat_Content'].replace(['low fat','LF ','reg'],['Low Fat','Low Fat','Regular'],inplace=True)","5fd9719d":"traindata['Item_Fat_Content'].value_counts()","57fd0061":"fig,axes=plt.subplots(1,1,figsize=(12,8))\nsns.scatterplot(x='Item_MRP',y='Item_Outlet_Sales',hue='Item_Fat_Content',size='Item_Weight',data=traindata)","405b247b":"traindata","93ad9a1d":"testdata","12eebe26":"Y_train=traindata.pop('Item_Outlet_Sales')\n","5f81daaa":"traindata","56ee63b5":"Y_train.head()","d8c2635c":"traindata.Outlet_Establishment_Year= traindata.Outlet_Establishment_Year.astype(object)","ee52eb3a":"\ntestdata.Outlet_Establishment_Year= testdata.Outlet_Establishment_Year.astype(object) ","f76c6eea":"traindata= pd.get_dummies(traindata)","0063f07e":"testdata= pd.get_dummies(testdata)","dae0084a":"traindata.head()","e346a942":"testdata.head()","0b6869af":"X_train=traindata","14b8c7df":"from sklearn.model_selection import train_test_split","c0658bf7":"Y_train","362e44ae":"x_train1, x_test1, y_train1, y_test1 = train_test_split( X_train, Y_train, test_size=0.09, random_state=42)","2a5816d7":"x_test1.shape","c9ea8060":"y_train1","f94791d4":"x_train1","56b8bf7e":"Y_test= testdata","da2b62d5":"Y_test","09f7ea06":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nimport numpy as np","f552a4ad":"from sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neural_network import MLPRegressor   \nfrom sklearn.ensemble import  GradientBoostingRegressor","c106dd02":"import warnings\nwarnings.filterwarnings('ignore')","72efc825":"import warnings\nwarnings.filterwarnings('ignore')\nmodel= [LinearRegression(), DecisionTreeRegressor() ,   Lasso(), Ridge(),  MLPRegressor(), GradientBoostingRegressor()  ]\nname = ['LinearRegression','DecisionTreeRegressor','Lasso','Ridge','MLPRegressor','GradientBoostingRegressor']\nSCORE= []\nTESTING=[]\nRSME=[]\nfor ku in model:\n    #ku will be replaced with each model like as first one is LogisticRegression()\n    algorithm = ku.fit(x_train1,y_train1)\n    print(ku)\n    #now 'algorithm' will be fitted by API with above line and next line will check score with data training and testing\n    predict_ku=ku.predict(x_test1)\n    print('RSME: {:.4f}'.format(np.sqrt(mean_squared_error(y_test1,predict_ku))))\n    score=cross_val_score(ku,x_train1,y_train1,cv=10,scoring='neg_mean_squared_error')\n    ku_score_cross=np.sqrt(-score)\n    \n    print('mean: {:.2f} and std:{:.2f}'.format(np.mean(ku_score_cross),np.std(ku_score_cross)))\n    print('---'*10)\n    print('training set accuracy: {:.2f}'.format(algorithm.score(x_train1,y_train1)))\n    print('test set accuracy: {:.2f}'.format(algorithm.score(x_test1,y_test1)))\n    print('---'*30)\n    #Now we are making a dataframe where by each loop the dataframe is added by SCORE,TESTING\n    RSME.append(np.sqrt(mean_squared_error(y_test1,predict_ku)))\n    SCORE.append(algorithm.score(x_train1,y_train1))\n    TESTING.append(algorithm.score(x_test1,y_test1))\nmodels_dataframe=pd.DataFrame({'training score':SCORE,'testing score':TESTING,'RSME':RSME},index=name)","72cfefc5":"models_dataframe","be689a85":"asendingtraining = models_dataframe.sort_values(by='RSME', ascending=False)\nasendingtraining ","620bedde":"asendingtraining['RSME'].plot.barh(width=0.8)\nplt.title('RSME')\nfig=plt.gcf()\nfig.set_size_inches(8,8)\nplt.show()","558e1aa5":"model = GradientBoostingRegressor()\nmodel.fit(X_train,Y_train)\nprediction=model.predict(Y_test)","a3330f16":"sample=pd.read_csv('\/kaggle\/input\/big-mart-sales-prediction\/Submission.csv')","1e20e1b0":"del sample['Item_Outlet_Sales']","38e81978":"df=pd.DataFrame({'Item_Outlet_Sales':prediction})\ncorr_ans=pd.concat([sample,df],axis=1)\ndel corr_ans['Unnamed: 0']\ncorr_ans","1cd4428d":"corr_ans.to_csv('correct.csv',index=None)","4c3ad7c8":"#corr_ans.to_csv('C:\\\\Users\\\\ernag\\\\Desktop\\\\ML Projects\\BigMart Sales Prediction\\corr_submission.csv',index=False)","9977d16e":"#### grocery store are all small size in data","16fe925a":"#### MODEL COMPARISON\nSEEING IN ASCENDING ORDER FOR EASIER COMPARISON","1e563d00":"### importing all of Algoriths that we want to use\n#### Linear_model: \n<font color=blue> Lasso, Ridge \n    \n#### Neighbors:\n<font color=red> KNeighborsRegressor\n<font color=black>\n    \n    \n#### Tree:\n<font color=blue> DecisionTreeRegressor\n<font color=black>\n    \n#### Neural network:\n<font color=red> MLPRegressor \n<font color=black>\n    \n#### Ensemble:\n<font color=black> GradientBoostingRegressor","b2d060f4":"thanks for help:https:\/\/www.kaggle.com\/littleraj30\/big-mart-sale-prediction-in-depth-ensemble","58cb4ae1":"## import important library : we will import other libraries when we need them\nbetter way is to speculate what you will need and import exactly that thing for saving memory usage.","bfcdb400":"<img src=\"https:\/\/datahack-prod.s3.amazonaws.com\/profile_photos\/final-grocery_480.png\" \/>","0116e28c":"# BIG MART SALES PREDICTION\nThe data scientists at BigMart have collected 2013 sales data for 1559 products across 10 stores in different cities. Also, certain attributes of each product and store have been defined. The aim is to build a predictive model and find out the sales of each product at a particular store.","a87e2dd3":"# Submission","0cba3e18":"### Checking if both of train and test data are of similar dimension","514136b4":"#### we can see when Tier 2 & Supermarket Type1 are together then Outlet size is Small ,check   930 - previous data","c8c4bcdc":"## LOOP FOR FITTING AND PREDICTING USING ALL MODEL (API) ","fb35d11f":"name=['Linear Regression','Linear Regression CV','Ridge Regression','Ridge Regression CV','Lasso Regression',\n     'Lasso Regression CV','Elastic Net Regression','Elastic Net Regression CV','SGD Regression','SGD Regression CV',\n     'SVM','SVM CV','Decision Tree','Decision Tree Regression','Random Forest','Random Forest CV','Ada Boost','Ada Boost CV',\n     'Bagging','Bagging CV','Gradient Boost','Gradient Boost CV']","9f81d65c":"## Predictive Modeling (Using API)","6ff8170b":"## DATA CLEANING","08d35fc8":"# Train Test Split : for checking RMSE ","1a494914":"## DATA WRANGLING","8bcde388":"## ONE HOT ENCODING ","f26f42af":"#### from upper cell, we can see the values for NaN in Outlet_Size"}}