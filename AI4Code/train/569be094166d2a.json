{"cell_type":{"42021d37":"code","3af96b76":"code","617fa750":"code","3bb0f256":"code","bc4e2ce4":"code","f3fb5070":"code","ff0c9881":"code","5d05ac7e":"code","d5d8d64d":"code","b17fe157":"code","9275bc5b":"code","bd914487":"code","70a36fdb":"markdown","2c802db0":"markdown"},"source":{"42021d37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport matplotlib as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nauto_mpg_df=pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv', na_values='?')\nauto_mpg_df.pop('car name')\nauto_mpg_df.dropna(inplace=True)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3af96b76":"auto_mpg_df.head()","617fa750":"auto_mpg_df.describe()","3bb0f256":"# method = pearson is by default and can be avoided to mention\ncorr_matrix = auto_mpg_df.corr(method='pearson')\ncorr_matrix","bc4e2ce4":"corr_matrix['mpg']","f3fb5070":"sns.scatterplot(data=auto_mpg_df, x='mpg', y = 'weight');","ff0c9881":"sns.heatmap(auto_mpg_df.corr());","5d05ac7e":"sns.scatterplot(data=auto_mpg_df, y='mpg', x= 'weight');","d5d8d64d":"sns.pairplot(auto_mpg_df, vars=['mpg','weight','cylinders','acceleration','displacement','origin','model year'])","b17fe157":"Y = auto_mpg_df.pop('mpg')","9275bc5b":"Y = np.asarray(Y)\nX_train,X_test,y_train,y_test = train_test_split(auto_mpg_df,Y,test_size=0.3,random_state=42)","bd914487":"linearRegModel = LinearRegression()\nlinearRegModel.fit(X_train,y_train)\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\ny_pred = linearRegModel.predict(X_test)\nlinearRegModel.score(X_test,y_test)\nmetrics.explained_variance_score(y_test,y_pred)","70a36fdb":"From the above correlation marix it can be observered that weight, acceleration & cylinders have strong negative relation with mpg where as model year, origin has not so strong positive relation with mpg and acceleration has lower positive relation with mpg. This relation can also be visualized using the heat map as shown below stronger the relation darker the color","2c802db0":"auto_mpg_df.corr() finds the correlation each variable with all the other variables in the dataframe. In the following step we are storing the correlation values to the variable corr_matrix. Since in our dataframe mpg is the target variable and we are more interested to know how other variables are correlated to this, we are just displaying the correlation values with respect to mpg using corr_matrix['mpg']"}}