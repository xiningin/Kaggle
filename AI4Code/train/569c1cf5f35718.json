{"cell_type":{"50ccced0":"code","ae0220a1":"code","0a05d7a7":"code","a59b4044":"code","7bed98d8":"code","276156ed":"code","4bc7e6e1":"code","826d65de":"code","d4153b6b":"code","21a74bef":"code","b058375e":"code","5e266bfd":"code","196edf9b":"code","9174fec9":"code","256fd6e9":"code","b09a096c":"code","abdd57ff":"code","6bb8e5ed":"code","63d299a3":"code","9b8bcdd6":"code","aa8f813f":"code","31e93986":"code","95841a44":"code","ba125b9d":"code","210d31b9":"code","935e5d96":"code","a1122bed":"code","2d4aeadf":"code","23f267cc":"code","317c056b":"code","82c7f647":"code","d8a50cec":"code","1a83d2d4":"code","52eb39b4":"code","7ac38208":"code","3544368c":"code","7cad4933":"code","b6e40a92":"code","3efb65bc":"code","8775948f":"code","012b4924":"code","e2156ca8":"code","0802a971":"code","395d78d6":"code","dcef3ff8":"code","5b7bbc99":"code","dd9ce1ff":"code","385f1f71":"code","162fc2ce":"code","ff8b7c31":"code","5f3ec171":"code","5e28e0e4":"code","d55f1d8d":"code","ce0cd955":"code","546a5138":"code","407e2292":"code","75dd4ba5":"code","f4d72657":"code","b4079317":"code","f5f503b4":"code","7eaa8cde":"code","47c4af3a":"code","f5ccb2f4":"code","1e8a5b85":"code","01e23d41":"code","9aecfc8c":"code","f061d213":"code","60d43116":"code","05360f05":"code","af4e1268":"code","8df1675b":"code","5b34ec03":"code","ba4e0a3b":"code","613411ac":"code","dde5c076":"code","ec2b09cb":"code","4e515981":"code","28792666":"code","797cc030":"code","bf4f114d":"code","6f743241":"code","79a199ac":"code","7ce77a94":"code","4e7e3f1a":"code","8aa34578":"markdown","b5e66a4a":"markdown"},"source":{"50ccced0":"#Importing Numpy package\nimport numpy as np\n","ae0220a1":"a = np.array([3.1,4,6,8])\nprint(a)\nprint(a.ndim)\nprint(type(a))\nprint(a.dtype)","0a05d7a7":"b = np.array([[[2,4,9],[3,6,7]],\n              [[6,8,10],[13,16,17]],\n             [[12,14,19],[23,26,27]]])\nprint(b)\nprint(b.ndim)\nprint(b.shape)\nprint(b.dtype)","a59b4044":"#Declaring simple array\na = np.array([[3,7,2,9],[9,12,15]])\nprint(type(a))\na","7bed98d8":"a.shape","276156ed":"b = np.array([[[3,4],[2,4],[2,6]],\n              [[3,80],[2,100],[2,6]],\n              [[3,78],[2,44],[2,90]]])\nb.shape","4bc7e6e1":"b[2][1][1]","826d65de":"b.ndim","d4153b6b":"a.shape","21a74bef":"a.ndim","b058375e":"#Initiating static two dimensional array\nb = np.array([[2,3,4,6,2],[4,5,6,9,4],[4,5,6,9,4]])\nprint(b)","5e266bfd":"# ndim parameter to get dimension of array\nb.ndim","196edf9b":"b.shape","9174fec9":"c = np.array([[[2,3],[4,5]],[[6,7],[8,9]]])","256fd6e9":"print(c)","b09a096c":"#array shape parameter to get shape of the array\nb.shape","abdd57ff":"print(a)","6bb8e5ed":"#dtype parameter to get type of array\ntype(b)\nb.dtype","63d299a3":"# auto type casting to higher data types as Array is homogenous\nc = np.array([2,3,4.2,6,2])\nc.dtype","9b8bcdd6":"type(b)","aa8f813f":"b.dtype","31e93986":"#Checking auto typecasting\nc.dtype\n","95841a44":"#string can be auto typecasted as well.\nb = np.array([6, 7, 8.0,'a'])\nprint(b)","ba125b9d":"# array transforms sequences of sequences into two-dimensional arrays, sequences of sequences of sequences into three-dimensional arrays, and so on.\nb = np.array([(1.5,2,3), (4,5,6)])\nb","210d31b9":"#The type of the array can also be explicitly specified at creation time:\nc = np.array( [ [1,2.2], [3,4] ], dtype=int )\nc","935e5d96":"#The function zeros creates an array full of zeros\nnp.zeros( (3,4) )","a1122bed":"np.array([2,4.0,5])","2d4aeadf":"c = np.arange(100,200,5).reshape(2,2,5)\nprint(c)\nprint(c.shape)","23f267cc":"c.ravel().reshape(4,5)","317c056b":"np.linspace(100,200,5)","82c7f647":"np.random.rand(3,4)","d8a50cec":"np.random.randint(10,50,15).reshape(5,3)","1a83d2d4":"a = [3,4,5]\nb=a.copy()","52eb39b4":"a[2]=500\na","7ac38208":"b","3544368c":"#arange function to create sequential array\ndata = np.arange(10)\ndata","7cad4933":"data = np.arange(10,20,2)\ndata","b6e40a92":"np.arange(12).reshape(3,2,2)","3efb65bc":"data = np.arange(100,200,5).reshape(2,2,5)\ndata","8775948f":"data.shape","012b4924":"data.ravel()","e2156ca8":"data1 = np.linspace(10,100,20)\ndata1","0802a971":"data2 = np.round(100*np.random.rand(10).reshape(2,5))\ndata2","395d78d6":"data3 = np.random.randint(50,100,15).reshape(3,5)\ndata3","dcef3ff8":"#reshape function to reshape array to the required dimension\ndata= data.reshape(6,5)\ndata","5b7bbc99":"np.arange(200000).reshape(20,200,50)","dd9ce1ff":"#more reshape examples\ndata1 = np.arange(10,100,5).reshape(6,3)\ndata2 = np.arange(110,200,5).reshape(6,3)\ndata1","385f1f71":"data3= np.arange(18).reshape(6,3)\ndata3**153459","162fc2ce":"#creating array for spliting examples\na = np.arange(24).reshape(6,4)\na","ff8b7c31":"#horizontal splititing\na_hsplit = np.hsplit(a,4)\na_hsplit[3]","5f3ec171":"#Vertical split\na_vsplit=np.vsplit(a,2)\na_vsplit[0]","5e28e0e4":"#creating arrays for stacking examples\na = np.arange(16).reshape(4,4)\nb = np.arange(16,32).reshape(4,4)","d55f1d8d":"a","ce0cd955":"b","546a5138":"#combing arrays with vertical stacking\nnp.hstack((a,b))","407e2292":"#combing arrays with hozontal stacking\nnp.hstack((a,b))","75dd4ba5":"#universal functions such as sqrt, sin, cos etc.,\nprint(\"Pi constant value : \",np.pi)  # pi constant\nd = np.arange(0,120,30).reshape(2,2)  # array to apply sin cos\nprint(\"d array with angles in degrees\")\nprint(d)\nd_rad = d*np.pi\/180 # converted angles to radians\nprint(\"d array with angles in radians\")\nprint(d_rad)\nprint(\"Sin values of angles 0,30,60,90\")\nprint(np.sin(d_rad))\nprint(\"Square root function on array\")\ne = np.array([4,9,16,25])\nnp.sqrt(e)","f4d72657":"#Numpy is capable of  huge Arrays manuplation very efficiently\na = np.arange(9000000).reshape(9000,1000)\na","b4079317":"#shape manuplation\na = np.arange(4).reshape(2,2)\nb = np.arange(11,15).reshape(2,2)\nprint(a)\nprint(b)\n","f5f503b4":"#Generating random number with Numpy. random number are between 0 and 1\nint(50+np.random.random()*10)\n# min+rand*(max-min)","7eaa8cde":"#### Random number functions in numpy.random\nrand(d0, d1, \u2026, dn)\tRandom values in a given shape. <br\\>\nrandn(d0, d1, \u2026, dn)\tReturn a sample (or samples) from the \u201cstandard normal\u201d distribution.<br\\>\nrandint(low[, high, size, dtype])\tReturn random integers from low (inclusive) to high (exclusive).<br\\>\nrandom_integers(low[, high, size])\tRandom integers of type np.int between low and high, inclusive.<br\\>\nrandom_sample([size])\tReturn random floats in the half-open interval [0.0, 1.0).<br\\>\nrandom([size])\tReturn random floats in the half-open interval [0.0, 1.0).<br\\>\nranf([size])\tReturn random floats in the half-open interval [0.0, 1.0).<br\\>\nsample([size])\tReturn random floats in the half-open interval [0.0, 1.0).<br\\>\nchoice(a[, size, replace, p])\tGenerates a random sample from a given 1-D array<br\\>\nbytes(length)\tReturn random bytes.\n","47c4af3a":"np.random.random_integers(100,200,20).reshape(4,5)","f5ccb2f4":"np.random.randint(100,200,20)","1e8a5b85":"np.random.rand(2,2,3)","01e23d41":"print(\"Random numbers with required shape\")\nprint(np.random.rand(3,2))\nprint(\"random integers betweet two numbers with required size\")\nprint(np.random.randint(10,50,100))","9aecfc8c":"#Numpy floor, ceil and round\nprint(np.floor(5.9))\nprint(np.ceil(3.3))\nprint(np.round(4.3))\n","f061d213":"np.floor((np.random.rand(20).reshape(4,5)*100))","60d43116":"#Copies and Views\n\n# No Copy at All\u00b6\n\na = np.arange(6)\na","05360f05":"b = a          # no new object is created\nb","af4e1268":"a[5] = 160\na","8df1675b":"b = a.copy()","5b34ec03":"b.shape = 3,4    # changes the shape of a.shape(3, 4)","ba4e0a3b":"a.shape","613411ac":"c.base is a  \na.shape\na","dde5c076":"c.shape = 2,6                      # a's shape doesn't change\nprint(a.shape)\nc","ec2b09cb":"c[0,4] = 999                    # a's data changes\nc","4e515981":"a","28792666":"# Deep Copy\n\nb = a.copy() \n","797cc030":"a[4] = 234\na","bf4f114d":"b","6f743241":"data = np.linspace(10,20,10)\ndata","79a199ac":"x = np.arange(20)\nx","7ce77a94":"a = [[1,2],[1,3]]\nb = [[4,2],[1,3]]","4e7e3f1a":"np.matmul(a,b)","8aa34578":"## This completes basic tutorial on Numpy package","b5e66a4a":"# Numpy Tutorial"}}