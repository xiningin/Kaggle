{"cell_type":{"7521fefd":"code","51f25058":"code","c6ce93bc":"code","c13e6542":"code","75b41f4a":"code","0fcf0978":"code","23f2b787":"code","328ca0b1":"code","81ec063d":"code","d75cc04a":"code","86d9079a":"code","174dcaf3":"code","43d650ab":"code","3c29c3df":"code","21b3cd2a":"code","141fd768":"code","886b94c9":"code","21ab7d0a":"code","7e16b361":"code","4b1ab4ec":"code","58f4c05b":"code","b2a61ee1":"code","19856c66":"code","52cf96f4":"code","0e0d6a11":"code","77c2a43a":"code","65fce113":"code","8ad550eb":"code","a73e0e9e":"code","fe50d363":"code","ae2dd29e":"code","f17d4abc":"code","3773adfe":"code","3b28041f":"code","10316027":"code","0c537045":"code","6ba4b24d":"markdown","4956b6dd":"markdown","9ce6bf47":"markdown","507ee739":"markdown","beeb6231":"markdown","73ebd5dc":"markdown","9cf890c3":"markdown","d9c621dd":"markdown"},"source":{"7521fefd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51f25058":"# importing all the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c6ce93bc":"# filter warnings out\nimport warnings\nwarnings.filterwarnings('ignore')","c13e6542":"# making a connection to the SQLite3\nimport sqlite3\nconnection = sqlite3.connect('\/kaggle\/input\/california-traffic-collision-data-from-switrs\/switrs.sqlite')","75b41f4a":"# creating queries for each databases\n# case_id_query = 'SELECT * FROM case_ids'\nparties_query = 'SELECT party_type, party_sex, party_age, cellphone_use FROM parties'","0fcf0978":"# fetching the data from the connection and the query\n# case_id_dataset = pd.read_sql_query(case_id_query, connection)\nparties_dataset_initial = pd.read_sql_query(parties_query, connection)","23f2b787":"parties_dataset = parties_dataset_initial","328ca0b1":"parties_dataset.shape","81ec063d":"# checking missing values\nparties_dataset.isnull().sum()","d75cc04a":"# How much percentage of values are missing from the total\nmissing = round((parties_dataset.isnull().sum() * 100) \/ parties_dataset.shape[0], 3)\nmissing_list = []\nfor i in range(0, len(missing)):\n    missing_list.append(str(missing[i]) + ' %')\nmissing_data = pd.DataFrame(data = missing_list, index = missing.index, columns = ['missing percentage'])\nmissing_data","86d9079a":"parties_dataset = parties_dataset.dropna()\nparties_dataset.isnull().sum()","174dcaf3":"parties_dataset.info()","43d650ab":"# converting the sex \nparties_dataset['party_sex'].value_counts()","3c29c3df":"# Converting the sex from categorical to numerical\nparties_dataset['party_sex'][parties_dataset['party_sex'] == 'male'] = 1\nparties_dataset['party_sex'][parties_dataset['party_sex'] == 'female'] = 0\nparties_dataset['party_sex'][parties_dataset['party_sex'] == 'X'] = 2\nparties_dataset['party_sex'].value_counts()","21b3cd2a":"parties_dataset['party_type'].value_counts()","141fd768":"parties_dataset['party_type'][parties_dataset['party_type'] == 'driver'] = 0\nparties_dataset['party_type'][parties_dataset['party_type'] == 'pedestrian'] = 1\nparties_dataset['party_type'][parties_dataset['party_type'] == 'bicyclist'] = 2\nparties_dataset['party_type'][parties_dataset['party_type'] == 'other'] = 3\nparties_dataset['party_type'][parties_dataset['party_type'] == 'parked vehicle'] = 4\nparties_dataset['party_type'].value_counts()","886b94c9":"parties_dataset['cellphone_use'].value_counts()","21ab7d0a":"parties_dataset['cellphone_use'][parties_dataset['cellphone_use'] == '3'] = 0\nparties_dataset['cellphone_use'][parties_dataset['cellphone_use'] == 'D'] = 0\nparties_dataset['cellphone_use'][parties_dataset['cellphone_use'] == 'C'] = 0\nparties_dataset['cellphone_use'][parties_dataset['cellphone_use'] == '1'] = 1\nparties_dataset['cellphone_use'][parties_dataset['cellphone_use'] == 'B'] = 1\nparties_dataset['cellphone_use'][parties_dataset['cellphone_use'] == '2'] = 1\nparties_dataset['cellphone_use'].value_counts()","7e16b361":"parties_dataset.info()","4b1ab4ec":"plt.hist(x = parties_dataset['party_age'], bins = 'auto')\nplt.grid(axis = 'both', color='r')\nplt.title('Histogram of AGE vs number of accidents')\nplt.xlabel('AGE of the party')\nplt.ylabel('Number of accidents')","58f4c05b":"# discretize the age of the party manually\nparties_dataset['party_age'].min()\n# There cannot be a 0 age.","b2a61ee1":"parties_dataset['party_age'].max()\n# This age is also wrongly mentioned","19856c66":"# parties_dataset[(parties_dataset['party_age'] < 17) | (parties_dataset['party_age'] > 95)].count()","52cf96f4":"parties_dataset.count()","0e0d6a11":"parties_dataset[parties_dataset['party_age'] > 95].count()\n# almost 5K drivers above the age of 95. Must be surely outliers or errors","77c2a43a":"parties_dataset[parties_dataset['party_age'] < 17].count()\n# 200K drivers are underage. Maybe gross errors or illegal.","65fce113":"parties_dataset = parties_dataset[(parties_dataset['party_age'] > 17) & (parties_dataset['party_age'] < 95)]\nplt.hist(x = parties_dataset['party_age'], bins = 'auto')\nplt.grid(axis = 'both', color='r')\nplt.title('Histogram of AGE vs number of accidents')\nplt.xlabel('AGE of the party')\nplt.ylabel('Number of accidents')","8ad550eb":"parties_dataset.head()","a73e0e9e":"# scaling the dataset using Standard Scaler\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_dataset = scaler.fit_transform(parties_dataset[parties_dataset.columns])","fe50d363":"parties_dataset = pd.DataFrame(scaled_dataset, columns = parties_dataset.columns)\nparties_dataset.head()","ae2dd29e":"# clustering\nfrom sklearn.cluster import KMeans\nfrom kneed import KneeLocator\ncluster = KMeans(n_clusters = 4)\ncluster.fit(parties_dataset)","f17d4abc":"print('inertia = {0}'.format(cluster.inertia_))","3773adfe":"cluster.labels_","3b28041f":"inertia_list = []\nfor i in range(1, 11):\n    cluster = KMeans(n_clusters = i)\n    cluster.fit(parties_dataset)\n    inertia_list.append(cluster.inertia_)","10316027":"inertia_list","0c537045":"plt.scatter(x = range(1, 11), y = inertia_list)","6ba4b24d":"Perfect. Now we can play with the data. We can create questions like\n\n1. Which age group of the population contains the most and least number of accidents?\n2. Which sex group contributes the most and least number of accidents?","4956b6dd":"for now, we will remove the parties with age more than 95 and less than 17 (underage to drive)","9ce6bf47":"Before implementing the algorithm we need to bin the age. The age is an integer and it has continious values. So it has to be discerete.","507ee739":"We have a combination of numerical and non numerical values. We can change the non numerical values into numerical ones using Label Encoder in pandas","beeb6231":"We can drop missing values in this scenario as we have many rows","73ebd5dc":"We can say, the number of accidents are higher in the age group 20 to 30 according to the visualization. The number of accidents decreases with the increase with age.","9cf890c3":"Now we have converted all the categorical data into numerical data.","d9c621dd":"https:\/\/realpython.com\/k-means-clustering-python\/#how-to-perform-k-means-clustering-in-python"}}