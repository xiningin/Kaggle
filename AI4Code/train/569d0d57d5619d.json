{"cell_type":{"047aa52d":"code","2981ed98":"code","86af1687":"code","1328c248":"code","18c846e1":"code","e9bcfe9a":"code","9dc61e15":"code","14518d4f":"code","0ccee1eb":"code","6fd0d330":"code","7b84431c":"code","4af8c957":"code","14c51799":"code","d3a0445b":"code","61cf798f":"code","ff0acf4e":"code","5a3b1a00":"code","7855a7b9":"code","aaf6e578":"code","cf0c49e8":"code","7d35416a":"code","0e2e653f":"code","c3062022":"code","a696728e":"code","7d6a2e75":"code","95a9b4cd":"code","52b7e589":"code","dfac2b48":"code","6a75837f":"code","3fb5f0d5":"code","8f80853a":"code","b2ebecba":"code","ae33b5a0":"code","3d71cc73":"code","a95757de":"code","be3bf526":"markdown","a26d5a01":"markdown","58c361b3":"markdown","98ba4a44":"markdown","96411bf5":"markdown","edb3e0e7":"markdown","9be77c21":"markdown","7afe10a4":"markdown","4d2ba758":"markdown","d9ebab29":"markdown","5815d3eb":"markdown","c0f869e9":"markdown","397b3b04":"markdown","5e2adf5a":"markdown","3fa27ea6":"markdown","66102bbe":"markdown","b7f6caf7":"markdown","3bde6abe":"markdown","fabc2331":"markdown","4d5cdc87":"markdown","e1df3e70":"markdown","7d3f3ef5":"markdown","0da99d43":"markdown","99c8f3fd":"markdown","36cb2739":"markdown","60ac8a4b":"markdown","d776b417":"markdown"},"source":{"047aa52d":"# Do komunikacji z BigQuery importujemy dedykowany pythonowy pakiet\nfrom google.cloud import bigquery","2981ed98":"client = bigquery.Client()","86af1687":"# Na pocz\u0105tek rzu\u0107my okiem na dataset dot. jako\u015bci powietrza w r\u00f3\u017cnych miastach. Ma on b. prost\u0105 struktur\u0119.\ndataset_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\n\n# Zapytanie do API o wybrany dataset \ndataset = client.get_dataset(dataset_ref)","1328c248":"# Wylistujmy teraz wszystkie tablice jakie s\u0105 dost\u0119pne w tym datasecie\ntables = list(client.list_tables(dataset))\n\n# Wyprintujmy j\u0105 (jest tylko jedna!) \nfor table in tables:  \n    print(table.table_id)","18c846e1":"# Stw\u00f3rzmy odniesienie do tablicy \"global_air_quality\" \ntable_ref = dataset_ref.table(\"global_air_quality\")\n\n# zapytanie API odno\u015bnie wybranej tablicy \ntable = client.get_table(table_ref)\n\n# Sp\u00f3jrzmy na pierwsze 5 linijek. Wygodnie mo\u017cemy u\u017cy\u0107 tu przekszta\u0142cenia do pandasowego dataframe przy u\u017cyciu metody `to_dataframe()`\nclient.list_rows(table, max_results=5).to_dataframe()","e9bcfe9a":"df=client.list_rows(table).to_dataframe()\ndf[df['country']=='PL'].head(5)","9dc61e15":"table.schema","14518d4f":"dataset_ref = client.dataset(\"___\", project=\"bigquery-public-data\")\n\n# Zapytanie do API o wybrany dataset \ndataset = client.get_dataset(dataset_ref)","0ccee1eb":"tables = \"___\"","6fd0d330":"# Stw\u00f3rzmy odniesienie do tablicy \"full\" \ntable_ref = \"___\"\n\n# zapytanie API odno\u015bnie wybranej tablicy \ntable = \"___\"\n\n# Sp\u00f3jrzmy na pierwsze 5 linijek. Wygodnie mo\u017cemy u\u017cy\u0107 tu przekszta\u0142cenia do pandasowego dataframe przy u\u017cyciu metody `to_dataframe()`\nclient.list_rows(\"___\")","7b84431c":"query = \"\"\"\n        SELECT city\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE \"___\"\n        \"\"\"","4af8c957":"query_job = client.query(query)","14c51799":"pl_cities = query_job.to_dataframe()","d3a0445b":"pl_cities","61cf798f":"query = \"\"\"\n        SELECT city, country\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE country = 'PL'\n        \"\"\"","ff0acf4e":"query = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE country = 'PL'\n        \"\"\"","5a3b1a00":"query = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE pollutant = 'pm10' AND value > 200\n        \"\"\"","7855a7b9":"query_job = client.query(query)","aaf6e578":"pm10_high = query_job.to_dataframe()","cf0c49e8":"pm10_high['city'].unique()","7d35416a":"dataset_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\n\n# Zapytanie do API o wybrany dataset \ndataset = client.get_dataset(dataset_ref)\n\n# Stw\u00f3rzmy odniesienie do tablicy \"global_air_quality\" \ntable_ref = dataset_ref.table(\"global_air_quality\")\n\n# zapytanie API odno\u015bnie wybranej tablicy \ntable = client.get_table(table_ref)","0e2e653f":"table.schema","c3062022":"# COUNT(nazwa_kolumny) zwraca liczb\u0119 element\u00f3w w kolumnie\n\nquery = \"\"\"\n        SELECT COUNT(location)\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        \"\"\"","a696728e":"query_job = client.query(query)\nquery_job.to_dataframe()","7d6a2e75":"# COUNT (DISTINCT nazwa_kolumny) zwr\u00f3ci liczb\u0119 unikalnych element\u00f3w w kolumnie\nquery = \"\"\"\n        SELECT COUNT(DISTINCT location)\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        \"\"\"","95a9b4cd":"query_job = client.query(query)\nquery_job.to_dataframe()","52b7e589":"# GROUP BY traktuje wszystkie wiersze o tej samej warto\u015bci w danej kolumnie\/kolumnach jako jedn\u0105 grup\u0119. Dla tej grupy mo\u017cemy policzy\u0107 np. \u015bredni\u0105 warto\u015b\u0107 zanieczyszczenia powietrza\nquery = \"\"\"\n        SELECT city, pollutant, AVG(value)\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        GROUP BY city, pollutant\n        \"\"\"","dfac2b48":"query_job = client.query(query)\nquery_job.to_dataframe()","6a75837f":"# HAVING dzia\u0142a w po\u0142\u0105czeniu z GROUP BY i s\u0142u\u017cy do ignorowania grup nie spe\u0142niaj\u0105cych za\u0142o\u017conych kryteri\u00f3w\n# Klauzula HAVING zosta\u0142a dodana do SQL, bo WHERE nie mo\u017ce by\u0107\u00a0u\u017cywany z funkcjami agreguj\u0105cymi\n\n# norma PM10 w PL 50ug\/m3\n\nquery = \"\"\"\n        SELECT city, pollutant, AVG(value)\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE pollutant = 'pm10'\n        GROUP BY city, pollutant\n        HAVING AVG(value) > 100\n        \"\"\"","3fb5f0d5":"query_job = client.query(query)\nquery_job.to_dataframe()","8f80853a":"query = \"\"\"\n        SELECT country, city, pollutant, AVG(value), COUNT(location)\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE pollutant = 'pm25'\n        GROUP BY country, city, pollutant\n        HAVING AVG(value) > 100\n        ORDER BY AVG(value) desc\n        \"\"\"","b2ebecba":"query_job = client.query(query)\nquery_job.to_dataframe()","ae33b5a0":"# test\nlen(df[(df['city']=='Delhi') & (df['pollutant']=='pm25')])","3d71cc73":"query = \"\"\"\n        SELECT country, city, pollutant, AVG(value) AS wartosc_lub_smog_nas_wykonczy, COUNT(location) AS liczba_obserwacji\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE pollutant = 'pm25'\n        GROUP BY country, city, pollutant\n        HAVING AVG(value) > 100\n        ORDER BY AVG(value) desc\n        \"\"\"","a95757de":"query_job = client.query(query)\nquery_job.to_dataframe()","be3bf526":"Uporz\u0105dkujmy warto\u015bci malej\u0105co\/rosn\u0105co korzystaj\u0105c z poznanych ju\u017c klauzul i nowej klauzuli ORDER BY ... desc\/asc","a26d5a01":"# \u0106wiczenie prostych zapyta\u0144 w SQL","58c361b3":"## Na zaj\u0119ciach Data-driven research przerobimy jeszcze \u0142\u0105czenie danych (JOIN). Materia\u0142y udost\u0119pnimy oczywi\u015bcie r\u00f3wnie\u017c tym z Pa\u0144stwa, kt\u00f3rzy nie ucz\u0119szczaj\u0105 na te zaj\u0119cia.","98ba4a44":"![first_commands](https:\/\/i.imgur.com\/biYqbUB.png)\n*\u0179r\u00f3d\u0142o*: https:\/\/www.kaggle.com\/learn\/intro-to-sql","96411bf5":"## Umiemy ju\u017c po\u0142\u0105czy\u0107 si\u0119 z wybran\u0105 baz\u0105 w BigQuery, przekszta\u0142ci\u0107 tabel\u0119 do df i wiemy jak sprawdzi\u0107\u00a0jej schemat. Jeste\u015bmy gotowi do pierwszego zapytania w SQL.\n\n\n- Zapytania SQL (SQL queries) pozwalaj\u0105 na szybk\u0105 eksploracj\u0119 du\u017cych zbior\u00f3w danych. \n- Zaczniemy od wykorzystania 3 podstawowych klauzuli (inaczej instrukcji, komend) **SELECT**, **FROM** i **WHERE**, kt\u00f3re pozwalaj\u0105 na zwr\u00f3cenie danych z wybranych kolumn w oparciu o zdefiniowane przez nas warunki. \n- Pos\u0142u\u017cymy si\u0119 graficznym przyk\u0142adem obecnym w wielu wprowadzeniach do SQL. W naszym zbiorze danych opisuj\u0105cym zwierz\u0119ta domowe i ich w\u0142a\u015bcicieli `pet_records` zawarta jest jedna tabela `pets`.\n\n![](https:\/\/i.imgur.com\/fI5Pvvp.png)\n\n# SELECT ... FROM\n\nNajprostszy przypadek: wybieramy jedn\u0105 kolumn\u0119 z wybranej tabeli.\n- nazw\u0119 kolumny wpisujemy po **SELECT**, nast\u0119pnie:\n- okre\u015blamy nazw\u0119 tabeli po **FROM**.  \n\nNp. \u017ceby zaznaczy\u0107 kolumn\u0119 `Name` z tabeli `pets` z bazy danych `pet_records` umieszczonej w projekcie `bigquery-public-data` nasze zapytanie wygl\u0105da\u0142oby w ten spos\u00f3b: \n  \n![](https:\/\/i.imgur.com\/c3GxYRt.png)\n\n\nWa\u017cne: Zwr\u00f3\u0107cie uwag\u0119, \u017ce argument do **FROM** umieszczony jest w \\`, nie za\u015b w cudzys\u0142owie lub apostrofie. \n\n\n# WHERE ...\n\nKiedy pracujemy z du\u017cymi bazami wa\u017cne staje si\u0119 ograniczenie zwracanych wynik\u00f3w (inaczej mo\u017cemy sobie poczeka\u0107...). Wtedy przydaje si\u0119 klauzula WHERE.\nRobimy to co powy\u017cej, ale dodajemy warunek: zwracamy kom\u00f3rki z kolumny `Name`, kt\u00f3re s\u0105 w wierszach, gdzie kolumna `Animal` zawiera tekst `Cat`\n\n![](https:\/\/i.imgur.com\/HJOT8Kb.png)","edb3e0e7":"Jak widzicie w schemacie tabeli autor mo\u017ce zawrze\u0107 opis kolumny, dost\u0119pny jest r\u00f3wnie\u017c typ danych\n\nKa\u017cde pole schematu [`SchemaField`](https:\/\/googleapis.github.io\/google-cloud-python\/latest\/bigquery\/generated\/google.cloud.bigquery.schema.SchemaField.html#google.cloud.bigquery.schema.SchemaField) opisuje jedn\u0105\u00a0kolumn\u0119.\n\n`SchemaField` zawiera:\n* **nazw\u0119** kolumny\n* **format danych** zawartych w kolumnie\n* **tryb** kolumny (oryg. *mode*): `'NULLABLE'` je\u015bli dopuszczone s\u0105\u00a0braki danych - NULL values, domy\u015blna opcja\n* **opis** kolumny","9be77c21":"- Z poziomu klienta mo\u017cemy okre\u015bli\u0107, kt\u00f3ry zbi\u00f3r danych nas interesuje. \n- List\u0119 dost\u0119pnych publicznie zbior\u00f3w znajdziecie tu: [BigQuery public datasets](https:\/\/console.cloud.google.com\/marketplace\/browse?filter=solution-type:dataset&_ga=2.182087780.2111534254.1614262259-1837716836.1591167542).","7afe10a4":"## Wybierzcie tabel\u0119 `full`, sprawd\u017acie jak wygl\u0105da jej schemat i wydrukujcie pierwszych kilka wierszy","4d2ba758":"## Przypomnijcie sobie jak wylistowali\u015bmy dost\u0119pne tabele","d9ebab29":"### Wiemy ju\u017c jak wy\u015bwietli\u0107\u00a0wybrany fragment bazy danych w postaci pandasowego df. A jak zabra\u0107 si\u0119\u00a0do tego wykorzystuj\u0105c SQL? \n\n- Zacznijmy od wprowadzenia podstawowego poj\u0119cia: `SQL schema`\n- Bazy SQL zawieraj\u0105 r\u00f3\u017cne rodzaje obiekt\u00f3w, takich jak tabele, widoki, funkcje (i inne!).\n- `SQL schema` to logiczne powi\u0105zanie tych obiekt\u00f3w posiadaj\u0105ce swojego w\u0142a\u015bciciela.\n- Schematy s\u0105 wygodnym sposobem na uporz\u0105dkowanie bazy danych oraz na zarz\u0105dzanie dost\u0119pem do r\u00f3\u017cnych jej element\u00f3w (obiekt\u00f3w).\n- Tabele, czyli podstawowy obiekt w bazie SQL te\u017c maj\u0105 sw\u00f3j schemat! Wy\u015bwietlmy go dla naszej tabeli. ","5815d3eb":"# Pierwsze zapytanie w SQL!","c0f869e9":"# AS ","397b3b04":"## Przyk\u0142ad bazy z wi\u0119ksz\u0105 liczb\u0105 tabel ","5e2adf5a":"# Szybki wgl\u0105d w wybran\u0105 baz\u0119: SQL","3fa27ea6":"Zaczynamy od stworzenia obiektu `Client`, kt\u00f3ry jest pos\u0142u\u017cy nam do pozyskiwania danych z baz w BigQuery. Zobacz: [link](https:\/\/google-cloud.readthedocs.io\/en\/latest\/bigquery).","66102bbe":"## Wr\u00f3\u0107my do naszej bazy danych dot. jako\u015bci powietrza. U\u017cywaj\u0105c klauzuli **WHERE** wyfiltrujcie polskie  miasta znajduj\u0105ce si\u0119 w bazie","b7f6caf7":"# Szybki wgl\u0105d w wybran\u0105 baz\u0119: Pandas","3bde6abe":"### Stw\u00f3rzcie w miejsce \"___\" odniesienie do zbioru danych post\u00f3w i komentarzy z serwisu Hacker News. Dataset nazywa si\u0119 `hacker_news`","fabc2331":"# ORDER BY","4d5cdc87":"# Wprowadzenie \n\n\n- Structured Query Language, inaczej **SQL**, jest podstawowym j\u0119zykiem programowanie wykorzystywanym do pracy z bazami danych. \n- Z tego wzgl\u0119du podstawowe umi\u0119j\u0119tno\u015bci korzystania z SQL przydadz\u0105 si\u0119\u00a0w Waszej pracy jako analitykom danych.\n- Osobi\u015bcie nauka SQL kojarzy mi si\u0119 nienajlepiej. Na zaj\u0119ciach z informatyki w szkole m\u0119czono nas programem MS Access i nudnymi bazami, zazwyczaj dot. struktury zatrudnienia w firmie krzak...\n\n\n![](https:\/\/www.geeksengine.com\/img\/article\/ms-timeout-2.gif)\n\n- Na naszych zaj\u0119ciach chcieliby\u015bmy tego unikn\u0105\u0107. Dlatego SQL u\u017cyjemy od razu do czego\u015b przydatnego. Poka\u017cemy Wam jak wykorzysta\u0107\u00a0podstawowe komendy w SQL do uzyskania dost\u0119pu i podstawowego przetwarzania danych na przyk\u0142adzie publicznych baz danych w BigQuery.\n- BigQuery to hurtownia danych w chmurze Google'a, kt\u00f3ra umo\u017cliwia wykonywanie bardzo szybkich zapyta\u0144 obejmuj\u0105cych du\u017ce i cz\u0119sto **ciekawe** zbiory danych przy wykorzystaniu SQL.\n- Na zaj\u0119ciach Data Driven Research ca\u0142e zaj\u0119cia po\u015bwi\u0119cimy na nauk\u0119 wykorzystywania BigQuery. \n- Na tych zaj\u0119ciach ograniczymy si\u0119 do kilku komend, kt\u00f3re pozwol\u0105 nam nawi\u0105za\u0107 po\u0142\u0105czenie z bazami danych w BigQuery z poziomu notebooka Kaggle. \n- Skorzystamy z faktu, \u017ce Kaggle jest wygodnie zintegrowany z wieloma us\u0142ugami Google Cloud, w tym z BigQuery i umo\u017cliwia darmowe korzystanie z nich (oczywi\u015bcie s\u0105 tu limity dot. rozmiaru przetwarzania danych). \n- Skoncentrujemy si\u0119 za\u015b na nauce podstaw SQL.\n\nZaczynajmy! \ud83d\ude80","e1df3e70":"# Po\u0142\u0105czenie z BigQuery","7d3f3ef5":"## Je\u015bli chcemy zaznaczy\u0107\u00a0wi\u0119cej kolumn, robimy to poprzecinku","0da99d43":"### \u0179r\u00f3d\u0142a i dodatkowe materia\u0142y:\n- oficjalny kurs SQL stworzony przez Kaggle: https:\/\/www.kaggle.com\/learn\/intro-to-sql","99c8f3fd":"Umiemy ju\u017c wczytywa\u0107 dane. Czas si\u0119 nimi pobawi\u0107! ","36cb2739":"## Je\u015bli chcemy zaznaczy\u0107\u00a0wszystkie kolumny u\u017cywamy `*`","60ac8a4b":"## Formatowanie\n- Potr\u00f3jne cudzys\u0142owy `\"\"\"`: w Pythonie informuj\u0105, \u017ce wszystko mi\u0119dzy nimi to jeden `string`, nie musimy si\u0119 przejmowa\u0107\u00a0nowymi liniami, kt\u00f3re \u0142adnie formatuj\u0105\u00a0nam zapytania.\n- Przyj\u0119\u0142o si\u0119\u00a0u\u017cywa\u0107 kapitalizacji w klauzulach, ale jak u\u017cyjecie formy `select`, czy `from` to te\u017c\u00a0b\u0119dzie dzia\u0142a\u0107. Sprawd\u017acie!","d776b417":"# Group by, Having i Count, SUM, AVG, MIN,MAX"}}