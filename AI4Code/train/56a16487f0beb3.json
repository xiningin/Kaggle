{"cell_type":{"632d9797":"code","2f96c0cd":"code","9519f40f":"code","8f547c24":"code","52f5f37d":"code","7c6d8628":"code","840d0702":"code","753ea735":"code","f9d09f3b":"code","449c3189":"code","1910bb9e":"code","7c7dd1fd":"code","ade8ad77":"code","3ab6c28c":"code","736a8734":"code","a00f66f8":"markdown","f2d44f15":"markdown","6c68d8b3":"markdown","090c2487":"markdown","4f76bb57":"markdown","7b910b56":"markdown","1fbb2312":"markdown","829a124b":"markdown","3917a13e":"markdown","48b1346d":"markdown"},"source":{"632d9797":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2f96c0cd":"df=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","9519f40f":"df.head()","8f547c24":"df.info()","52f5f37d":"x_data=df.drop([\"target\"],axis=1)\n    \nx=((x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))).values","7c6d8628":"y=df.target.values","840d0702":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\nx_train=x_train.T\nx_test=x_test.T\ny_train=y_train.T\ny_test=y_test.T\n\nprint(\"x train shape: \",x_train.shape)\nprint(\"x test shape: \",x_test.shape)\nprint(\"y train shape: \",y_train.shape)\nprint(\"y test shape: \",y_test.shape)","753ea735":"def initialize_weights_and_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\n","f9d09f3b":"def sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head","449c3189":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z=np.dot(w.T,x_train)+b\n    y_head = sigmoid(z)\n    loss= -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    # backward propagation\n    derivative_weight= (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\":derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","1910bb9e":"def update(w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    \n    for i in range(number_of_iteration):\n        \n        cost,gradients=forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        w=w- learning_rate*gradients[\"derivative_weight\"]\n        \n        b= b - learning_rate*gradients[\"derivative_bias\"]\n        \n        if i%10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"cost after iteration {}:{}\".format(i,cost))\n            \n    parameters={\"weight\":w,\"bias\":b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation = \"vertical\")\n    plt.xlabel(\"Number of iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters,gradients,cost_list","7c7dd1fd":"def predict(w,b,x_test):\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    \n    Y_prediction=np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            Y_prediction[0,i]=0\n        else:\n            Y_prediction[0,i]=1\n    \n    return Y_prediction","ade8ad77":"def logistic_regression(x_train,y_train,x_test,y_test,learning_rate,num_iterations):\n    dimension=x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n    \n    parameters,gradients,cost_list = update(w,b,x_train,y_train,learning_rate,num_iterations)\n    \n    y_prediction_test= predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    print(\"test accuracy: {} %\".format(100- np.mean(np.abs(y_prediction_test- y_test))*100))","3ab6c28c":"logistic_regression(x_train,y_train,x_test,y_test,learning_rate=2,num_iterations=120)","736a8734":"from sklearn.linear_model import LogisticRegression\n\nlr=LogisticRegression()\n\nlr.fit(x_train.T,y_train.T)\n\nprint(\"test accuracy {} %\".format(lr.score(x_test.T,y_test.T)*100))","a00f66f8":"<a id=\"5\"><\/a><br>\n# Forward Backward Propagation","f2d44f15":"<a id=\"1\"><\/a><br>\n# Entering and Cleaning Data","6c68d8b3":"# Introduction\n\nIn this dataset I tried to predict target.\n\n1. [Entering and Cleaning Data](#1)\n1. [Train Test Split](#2)\n1. [Initialize Weights and Bias](#3)\n1. [Sigmoid Function](#4)\n1. [Forward Backward Propagation](#5)\n1. [Update Part](#6)\n1. [Prediction Part](#7)\n1. [Logistic Regression](#8)\n1. [Logistic Regression with Sklearn](#9)\n","090c2487":"<a id=\"4\"><\/a><br>\n# Sigmoid Function","4f76bb57":"<a id=\"9\"><\/a><br>\n# Logistic Regresion with Sklearn","7b910b56":"<a id=\"7\"><\/a><br>\n# Prediction Part","1fbb2312":"<a id=\"8\"><\/a><br>\n# Logistic Regression","829a124b":"<a id=\"2\"><\/a><br>\n# Train Test Split","3917a13e":"<a id=\"6\"><\/a><br>\n# Update Part","48b1346d":"<a id=\"3\"><\/a><br>\n# Initialize Weights and Bias"}}