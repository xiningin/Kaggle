{"cell_type":{"2b612ddc":"code","d4aa96ac":"code","ac832c4a":"code","662a7e05":"code","642e164d":"code","b4e8a974":"code","ec5df6f6":"code","e1d68681":"code","af7e9c64":"code","3f404f08":"code","e48d11fe":"code","0a8243a1":"code","4f059985":"code","10ae120b":"code","b99ec180":"code","6ade060e":"code","04ea60d3":"code","1af44dfa":"code","d32b6a6d":"code","cb800762":"code","04e8abba":"markdown","6147e4cc":"markdown","0f6207dc":"markdown","beb2ca04":"markdown","1ec207fc":"markdown","c03eafbe":"markdown","821d9e75":"markdown","011c560b":"markdown","da8e27ae":"markdown","3e64a309":"markdown","944e0c2e":"markdown","dff947c4":"markdown","0e669130":"markdown","83a809b6":"markdown","7036dacb":"markdown"},"source":{"2b612ddc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4aa96ac":"median_house_hold_in_come = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","ac832c4a":"'''\nHer bir eyaletin fakirlik oran\u0131n\u0131 g\u00f6steren grafik (seaborn barplot)\n'''\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0, inplace = True) #  datada bulunan - de\u011ferleri 0 a e\u015fitledik\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float) # str olan say\u0131sal verileri float cinsine \u00e7evirdik\narea_list = list(percentage_people_below_poverty_level[\"Geographic Area\"].unique()) # unique metodu ile eyalet isimlerini liste i\u00e7ine ald\u0131k (unique = dataset i\u00e7indeki elemanlardar tekrar etmeyenleri al\u0131r)\narea_poverty_ratio = [] # for d\u00f6ng\u00fcs\u00fcnden gelenleri dizi i\u00e7ine al\u0131yoruz.\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level[\"Geographic Area\"]==i]\n    area_poverty_rate = sum(x.poverty_rate\/len(x))\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list' : area_list, 'area_poverty_ratio' : area_poverty_ratio})  # olu\u015fturdu\u011fumuz listeleri bir data frame i\u00e7ine at\u0131yoruz\nnew_index = (data['area_poverty_ratio'].sort_values(ascending = False).index.values) # area_poverty_ratio listemizi s\u0131ral\u0131 hale indexledik\nsorted_data = data.reindex(new_index) # s\u0131ral\u0131 listeyi yeni bir datan\u0131n i\u00e7ine att\u0131k\n\n#visualization\n\nplt.figure(figsize = (15,10))  # matplotlib ile bir fig\u00fcr olu\u015fturduk\nsns.barplot(x = sorted_data['area_list'], y = sorted_data['area_poverty_ratio'])  # Seaborn barplot olu\u015fumu\nplt.xticks(rotation = 45)  # \u015eehir isimleri 45 derece e\u011fik\nplt.xlabel('States') # x ekseni ismi\nplt.ylabel('Poverty Rate') # y ekseni ismi\nplt.title('Poverty Rate Given States') # grafik ismi\nplt.show()\n","662a7e05":"'''\n\u0130sim veya soyisim olarak en \u00e7ok \u00f6ld\u00fcr\u00fclen 15 \u0130nsan\n'''\nseparate = kill.name[kill.name != 'TK TK'].str.split()  # Datada bozuk veri olan TK TK isimlerini ay\u0131rd\u0131k\na,b = zip(*separate)\nname_list = a+b\nname_count = Counter(name_list)  # \u0130simlerin ka\u00e7 tane oldu\u011funu ald\u0131k\nmost_common_names = name_count.most_common(15) # en \u00e7ok olan 15 tanesini ald\u0131k\nx,y = zip(*most_common_names) \nx,y = list(x), list(y)\n\nplt.figure(figsize = (15,10))\nsns.barplot(x = x, y = y, palette = sns.cubehelix_palette(len(x)))  # palette grafik renklendirme\nplt.xlabel(\"Name or Surname\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Name or Surname of Killeo People\")\nplt.show()","642e164d":"'''\nEyaletlerde 25 ya\u015f\u0131ndan b\u00fcy\u00fck insanlar\u0131n lise mezunu olma oran\u0131\n'''\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'], 0.0, inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool[\"Geographic Area\"].unique())\narea_highschool = []\n\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool[\"Geographic Area\"] == i]\n    area_highschool_rate = sum(x.percent_completed_hs) \/ len(x)\n    area_highschool.append(area_highschool_rate)\ndata = pd.DataFrame({'area_list' : area_list, 'area_highschool_ratio' : area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending = True)).index.values\nsorted_data2 = data.reindex(new_index)\n\nplt.figure(figsize = (15,10))\nsns.barplot(x = sorted_data2['area_list'], y = sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation = 90)\nplt.xlabel(\"States\")\nplt.ylabel(\"High School Graduate Rate\")\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\nplt.show()","b4e8a974":"'''\nEyaletlerdeki etnik kimlik oran\u0131\n'''\nshare_race_city.replace(['-'], 0.0, inplace = True)\nshare_race_city.replace(['(X)'], 0.0, inplace = True)\nshare_race_city.loc[:, ['share_white', 'share_black', 'share_native_american', 'share_asian', 'share_hispanic']] = share_race_city.loc[:, ['share_white', 'share_black', 'share_native_american', 'share_asian', 'share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area'] == i]\n    share_white.append(sum(x.share_white) \/ len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\nf, ax = plt.subplots(figsize = (9,15))                #Alpha grafi\u011fin saydaml\u0131\u011f\u0131n\u0131 ayarlar\nsns.barplot(x = share_white, y = area_list, color = 'green', alpha = 0.5, label = 'White')\nsns.barplot(x = share_black, y = area_list, color = 'blue', alpha = 0.7, label = 'African American')\nsns.barplot(x = share_native_american, y = area_list, color = 'cyan', alpha = 0.6, label = 'Native American')\nsns.barplot(x = share_asian, y = area_list, color = 'yellow', alpha = 0.6, label = 'Asian')\nsns.barplot(x = share_hispanic, y = area_list, color = 'red', alpha = 0.6, label = 'Hispanic')\n\nax.legend(loc = 'lower right', frameon = True)   # label lerin yer tutmas\u0131 i\u00e7in \nax.set(xlabel = 'Percentage of Races', ylabel = 'States', title = 'Percentage of States Population According to Races')\n","ec5df6f6":"'''\nEyaletlerdeki liseden mezun olma ve fakirlik oran\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131  (Point Plot)\n'''\n# \u0130lk iki sat\u0131rda de\u011ferleri max de\u011fere b\u00f6lerek normalization yapt\u0131k\n\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio'] \/ max(sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio'] \/ max(sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data, sorted_data2['area_highschool_ratio']], axis = 1)\ndata.sort_values('area_poverty_ratio', inplace = True)\n\nf, ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x = 'area_list', y = 'area_poverty_ratio', data = data, color='lime', alpha = 0.8)\nsns.pointplot(x = 'area_list', y = 'area_highschool_ratio', data = data, color='red', alpha = 0.8)\nplt.text(40,0.6, 'high school graduate ratio', color = 'red', fontsize = 17, style = 'italic')\nplt.text(40,0.55, 'poverty ratio', color = 'lime', fontsize = 17, style = 'italic')\nplt.xlabel('States', fontsize = 15, color = 'blue')\nplt.ylabel('Values', fontsize = 15, color = 'blue')\nplt.title('High School Graduate ve Poverty Ratio', fontsize = 20, color = 'blue')\nplt.grid()\n\n","e1d68681":"'''\nBir \u00fcstteki grafi\u011fi (JointPlot) ile tekrar yapal\u0131m\n\nPearsonr = 1 e ne kadar yak\u0131nsa o kadar do\u011fru -1 e ne kadar yak\u0131nsa o kadar ters orant\u0131 vard\u0131r.\nE\u011fer de\u011fer s\u0131f\u0131r 0 ise oran yoktur.\nkde = kernel density estimation\n'''\n\ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind='kde', size = 7)\nplt.savefig('graph.png')\nplt.show()","af7e9c64":"g = sns.jointplot('area_poverty_ratio', 'area_highschool_ratio', data = data, size = 5, ratio = 3, color = 'r')","3f404f08":"'''\n\u00d6ld\u00fcr\u00fclen insanlar\u0131n \u0131rklar\u0131n\u0131n oran\u0131      (Pie Plot)\n'''\nkill.race.dropna(inplace = True)  # race k\u0131sm\u0131 bo\u015f olan verileri \u00e7\u0131kartt\u0131k\nlabels = kill.race.value_counts().index    # race k\u0131sm\u0131nda hangi veriden ka\u00e7 tane olu\u011funu bulup indexlerini ald\u0131k ('w','a','b') gibi\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values   # kill.race.value_counts() k\u0131sm\u0131ndaki valueleri ald\u0131k\n\n# visual\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races', color = 'blue', fontsize = 15)\nplt.show()","e48d11fe":"'''\nEyaletlerdeki liseden mezun olma ve fakirlik oran\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131 (LM Plot)\nlmplot\nShow the results of a linear regression within each dataset\n'''\n\nsns.lmplot(x = \"area_poverty_ratio\", y = \"area_highschool_ratio\", data=data)\nplt.show()","0a8243a1":"'''\nEyaletlerdeki liseden mezun olma ve fakirlik oran\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131 (KDE Plot)\n'''\n\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=5)\nplt.show()","4f059985":"'''\nEyaletlerdeki liseden mezun olma ve fakirlik oran\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131 (Violin Plot)\nShow each data both violins and points\ncubehelix kulland\u0131k ve palette ile \u00f6zelle\u015ftirdik\n'''\n\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner='points')\nplt.show()","10ae120b":"'''\nCorrelation Map\nEyaletlerdeki liseden mezun olma ve fakirlik oran\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131\n'''\n\nf, ax = plt.subplots(figsize = (5,5))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()","b99ec180":"'''\nmanner of death (\u00d6l\u00fcm \u015fekli) shot: ate\u015f edilerek, Tasered: \u015fok tabancas\u0131 ile    (Box Plot)\ngender: cinsiyet\nage: ya\u015f\n'''\nsns.boxplot(x = 'gender', y = 'age', hue='manner_of_death', data=kill, palette='PRGn')\nplt.show()","6ade060e":"'''\nYukar\u0131daki problemi (Swarm Plot) ile \u00e7izelim\n'''\n\nsns.swarmplot(x = 'gender', y = 'age', hue='manner_of_death', data=kill)\nplt.show()","04ea60d3":"'''\nEyaletlerdeki liseden mezun olma ve fakirlik oran\u0131 kar\u015f\u0131la\u015ft\u0131rmas\u0131 (Pair Plot)\n'''\nsns.pairplot(data)\nplt.show()\n","1af44dfa":"# manner of death\n# gender\n\nsns.countplot(kill.gender)\nsns.countplot(kill.manner_of_death)\nplt.title('Manner of Death', color = 'blue', fontsize = 15)\nplt.show()","d32b6a6d":"# kill weapon (\u00d6ld\u00fcr\u00fclen insanlar\u0131n kulland\u0131\u011f\u0131 silahlar)\n\narmed = kill.armed.value_counts()\nplt.figure(figsize = (10,7))\nsns.barplot(x = armed[:7].index, y = armed[:7].values)  # ilk 7 veriyi kullanmak istiyoruz [:7]\nplt.ylabel(\"Number of weapon\")\nplt.xlabel(\"Weapon Type\")\nplt.title(\"Kill Weapon\", color = 'blue', fontsize = 15)\nplt.show()","cb800762":"# \u00d6len insanlar\u0131n ya\u015f\u0131\nabove25 = ['above25' if i >= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age': above25})\nsns.countplot(x = df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of Killed People', color = 'blue', fontsize = 15)\nplt.show()","04e8abba":"<a id = '5'><\/a><br>\n### Joint Plot","6147e4cc":"<a id = '11'><\/a><br>\n### Box Plot","0f6207dc":"<a id = '7'><\/a><br>\n### LM Plot","beb2ca04":"<a id = '6'><\/a><br>\n### Pie Plot","1ec207fc":"<a id = '4'><\/a><br>\n### Point Plot","c03eafbe":"<a id = '1'><\/a><br>\n## Read datasets","821d9e75":"<a id = '9'><\/a><br>\n### Violin Plot","011c560b":"<a id = '14'><\/a><br>\n### Count Plot","da8e27ae":"<a id = '2'><\/a><br>\n## Seaborn Plots","3e64a309":"<a id = '8'><\/a><br>\n### KDE Plot","944e0c2e":"<a id = '3'><\/a><br>\n### Bar Plot","dff947c4":"<a id = '13'><\/a><br>\n### Pair Plot","0e669130":"# Data Visualization\n<font color = 'blue'>\n\n1. [Read Data](#1)\n2. [Seaborn Plots](#2)\n    \n    * [Bar Plot](#3)\n    * [Point Plot](#4)\n    * [Join Plot](#5)\n    * [Pie Plot](#6)\n    * [LM Plot](#7)\n    * [KDE Plot](#8)\n    * [Violin Plot](#9)\n    * [Correlation Map](#10)\n    * [Box Plot](#11)\n    * [Swarm Plot](#12)\n    * [Pair Plot](#13)\n    * [Count Plot](#14)\n    ","83a809b6":"<a id = '12'><\/a><br>\n### Swarm Plot","7036dacb":"<a id = '10'><\/a><br>\n### Correlation Map"}}