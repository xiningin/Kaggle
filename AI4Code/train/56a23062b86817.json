{"cell_type":{"3f2cf331":"code","ae8cebeb":"code","e4043d12":"code","01072356":"code","3ae0172c":"code","f72f4d92":"code","a8cbfd57":"code","f4aedb34":"markdown","cbce5056":"markdown","ad51c99e":"markdown","708ae83f":"markdown","1e1a3f99":"markdown"},"source":{"3f2cf331":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","ae8cebeb":"training_data1 = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntraining_labels1 = training_data1.label\ntraining_data1 = training_data1.drop(['label'],axis=1)\n\ntraining_data1 = training_data1.to_numpy()\ntraining_data1 = training_data1.reshape(training_data1.shape[0],28,28,1)\ntraining_data1 = training_data1.astype('float32')\ntraining_data1 \/= 255\ntraining_data1.shape","e4043d12":"training_labels1 = tf.keras.utils.to_categorical(training_labels1,num_classes=10)\ntraining_labels1.shape","01072356":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu',padding='same'),\n    \n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Conv2D(64,(3,3),padding='same',activation='relu'),\n  \n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Conv2D(128,(3,3),padding='same',activation='relu'),\n    \n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512,activation='relu'),\n    tf.keras.layers.Dense(128,activation='relu'),\n    tf.keras.layers.Dense(10,activation='softmax')\n])\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","3ae0172c":"from sklearn.model_selection import train_test_split\n\nx_train,x_val,y_train,y_val = train_test_split(training_data1,training_labels1,test_size=0.2)\n\nhistory = model.fit(training_data1,training_labels1,\n          epochs=10,\n         validation_data=(x_val,y_val)\n         )","f72f4d92":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'])\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'])\nplt.show()","a8cbfd57":"testing_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntesting_data = testing_data.to_numpy()\ntesting_data = testing_data.reshape(-1,28,28,1)\ntesting_data = testing_data.astype('float32')\ntesting_data \/= 255\n\ntest_predictions = model.predict_classes(testing_data)\nimage_ids =  np.arange(1,28001)\nsubmission = pd.DataFrame({\"ImageId\":image_ids,\"Label\":test_predictions})\nsubmission.to_csv('submission_digit_recignizer.csv',index=False)","f4aedb34":"then the labels extracted from the training data are one-hot encoded to a tensor with 10 values","cbce5056":"below is the model architecture, chich consists of\n    - 3 sets of convolution layers followed by max pooling layer\n    - flattening the data\n    - followed by 3 dense layers","ad51c99e":"following code block, reads the input data, and performs data preprocessing:\n    - extracting the target labels from training data\n    - comverting the data from dataframe to numpy array\n    - reshaping the data from a row of 784 numbers to a matrix or order 2 tensor of (28 * 28) size\n    - converting the data to float type and nurmalizing it","708ae83f":"#### The following approch was implement for the purpose of learning Hand Written Digit Recognition, for Digit Recognisition competition held on Kaggle","1e1a3f99":" Importing all the required libraries"}}