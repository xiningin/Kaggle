{"cell_type":{"4729e576":"code","ff7910ba":"code","3dc70805":"code","77c75647":"code","93daf4fb":"code","c10d84d1":"code","c22adc4e":"code","2b12aab1":"code","9628103c":"code","2821479b":"code","6d0016fc":"code","803bab32":"code","78812a31":"code","34146ffc":"code","279452c0":"code","447f92fa":"code","48b4f42a":"code","2bc9931a":"code","6c4d0bed":"code","51d104db":"code","5032f246":"markdown","a2c98bb5":"markdown","e09379f3":"markdown","d3ab36c0":"markdown","8c1ca452":"markdown","9224b2f9":"markdown","0f6892d1":"markdown","5ff5ce9b":"markdown","eb337315":"markdown","040c0e71":"markdown","93a3375d":"markdown","0ca01e2c":"markdown","45a87cce":"markdown","4dc6baef":"markdown","844d6bc2":"markdown","22b020e0":"markdown","46b776c5":"markdown"},"source":{"4729e576":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.layers import Dense, Activation,Dropout,Conv2D, MaxPooling2D,BatchNormalization\nfrom tensorflow.keras.optimizers import Adam, Adamax\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model, load_model, Sequential\nimport numpy as np\nimport pandas as pd\nimport time\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport os\nimport cv2\nimport seaborn as sns\nimport shutil\nsns.set_style('darkgrid')\nfrom sklearn.metrics import confusion_matrix, classification_report","ff7910ba":"basalt_dir=r'..\/input\/rock-classification\/Dataset\/Igneous\/Basalt'\ngranite_dir=r'..\/input\/rock-classification\/Dataset\/Igneous\/Granite'\nmarble_dir=r'..\/input\/rock-classification\/Dataset\/Metamorphic\/Marble'\nquartzite_dir=r'..\/input\/rock-classification\/Dataset\/Metamorphic\/Quartzite'\ncoal_dir=r'..\/input\/rock-classification\/Dataset\/Sedimentary\/Coal'\nlimestone_dir=r'..\/input\/rock-classification\/Dataset\/Sedimentary\/Limestone'\nsandstone_dir=r'..\/input\/rock-classification\/Dataset\/Sedimentary\/Sandstone'\ndirlist=[basalt_dir, granite_dir, marble_dir, quartzite_dir, coal_dir, limestone_dir, sandstone_dir]\nclasses=['basalt', 'granite', 'marble', 'quartzite', 'coal', 'limestone', 'sandstone']\nfilepaths=[]\nlabels=[]\nfor d,c in zip(dirlist, classes):\n    flist=os.listdir(d)\n    for f in flist:\n        fpath=os.path.join (d,f)\n        filepaths.append(fpath)\n        labels.append(c)\nprint ('filepaths: ', len(filepaths), '   labels: ', len(labels))","3dc70805":"Fseries=pd.Series(filepaths, name='filepaths')\nLseries=pd.Series(labels, name='labels')\ndf=pd.concat([Fseries,Lseries], axis=1)\n\nbalance=df['labels'].value_counts()\nprint (balance)","77c75647":"out_dir=r'.\/'  \naux_dir_path=os.path.join(out_dir, 'Aux')\nif os.path.isdir(aux_dir_path)== False:\n    os.mkdir(aux_dir_path)\nelse:\n    shutil.rmtree(aux_dir_path)\n    os.mkdir(aux_dir_path)\nbasalt_path=os.path.join(aux_dir_path, 'basalt')\nos.mkdir(basalt_path)\ngranite_path=os.path.join(aux_dir_path, 'granite')\nos.mkdir(granite_path)\nprint(os.listdir(aux_dir_path))\nunder_classes=[basalt_dir, granite_dir]\nbasalt_array=np.zeros((86,224,224,3))                      \ngranite_array=np.zeros((101,224,224,3))  \nfor d in under_classes:\n    if d==basalt_dir:\n        darray=basalt_array\n        dpath=basalt_path\n        batch_size=86\n    else:\n        darray=granite_array\n        dpath=granite_path\n        batch_size=101\n    flist=os.listdir(d)\n    for i, f in enumerate(flist):\n        fpath=os.path.join(d,f)\n        img=cv2.imread(fpath)\n        img=cv2.resize(img,(224,224))\n        darray[i]=img\n    gen=ImageDataGenerator( horizontal_flip=True, rotation_range=30, zoom_range=.2,\n                          height_shift_range=.2, width_shift_range=.2).flow(darray, batch_size=batch_size, shuffle=True, save_to_dir=dpath, )\n    next(gen)\n    next(gen)\nbasalt_list=os.listdir(basalt_path)\ngranite_list=os.listdir(granite_path)\nprint (len(basalt_list), '  ', len(granite_list))","93daf4fb":"\nlabels=[]\nfilepaths=[]\nsdir=aux_dir_path\nslist=os.listdir(sdir)\nfor klass in slist:\n    class_path=os.path.join(sdir, klass)\n    flist=os.listdir(class_path)\n    for f in flist:\n        fpath=os.path.join(class_path,f)\n        filepaths.append(fpath)\n        labels.append(klass)\nFseries=pd.Series(filepaths, name='filepaths')\nLseries=pd.Series(labels, name='labels')\naux_df=pd.concat([Fseries, Lseries], axis=1)\nprint(aux_df.head())\nprint(aux_df['labels'].value_counts())\nprint('len of df: ', len(df), '  len of aux_df: ', len(aux_df))\ndf=pd.concat([df,aux_df], axis=0).reset_index(drop=True)\nprint (len(df))\nprint(df['labels'].value_counts())","c10d84d1":"height=224\nwidth=224\nchannels=3\nbatch_size=60\nimg_shape=(height, width, channels)\nimg_size=(height, width)\ntrain_split=.8\ntest_split=.1\ndummy_split=test_split\/(1-train_split)\ntrain_df, dummy_df=train_test_split(df, train_size=train_split, shuffle=True, random_state=123)\ntest_df, valid_df= train_test_split(dummy_df, train_size=dummy_split, shuffle=True, random_state=123)\nprint (len(train_df), len(test_df), len(valid_df))\nvcounts=train_df['labels'].value_counts()\nprint (vcounts)\nvmin=np.min(list(vcounts))","c22adc4e":"file_count = vmin\nsamples = []\nfor category in train_df['labels'].unique():    \n    category_slice = train_df.query(\"labels == @category\")    \n    samples.append(category_slice.sample(file_count, replace=False,random_state=1))\ntrain_df = pd.concat(samples, axis=0).sample(frac=1.0, random_state=1).reset_index(drop=True)\nprint (  train_df['labels'].value_counts()) # check to see each class has 200 samples\nprint (len(train_df))","2b12aab1":"def scalar(img):\n    return img\/127.5-1  # scale pixel between -1 and +1\ntrgen=ImageDataGenerator(preprocessing_function=scalar, horizontal_flip=True, vertical_flip=True)\ntvgen=ImageDataGenerator(preprocessing_function=scalar)\ntrain_gen=trgen.flow_from_dataframe( train_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=False, batch_size=batch_size)\ntest_gen=tvgen.flow_from_dataframe( test_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=False, batch_size=batch_size)\nvalid_gen=tvgen.flow_from_dataframe( valid_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=False, batch_size=batch_size)","9628103c":"model_name='InceptionResNetV2'\nbase_model=tf.keras.applications.InceptionResNetV2(include_top=False, weights=\"imagenet\",input_shape=img_shape, pooling='max') \nx=base_model.output\nx=keras.layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001 )(x)\nx = Dense(256, kernel_regularizer = regularizers.l2(l = 0.016),activity_regularizer=regularizers.l1(0.006),\n        bias_regularizer=regularizers.l1(0.006) ,activation='relu', kernel_initializer= tf.keras.initializers.GlorotUniform(seed=123))(x)\nx=Dropout(rate=.45, seed=123)(x)\noutput=Dense(len(classes), activation='softmax',kernel_initializer=tf.keras.initializers.GlorotUniform(seed=123))(x)\nmodel=Model(inputs=base_model.input, outputs=output)\nmodel.compile(Adamax(lr=.001), loss='categorical_crossentropy', metrics=['accuracy']) \n       ","2821479b":"### create function to print text in RGB foreground and background colors","6d0016fc":"def print_in_color(txt_msg,fore_tupple,back_tupple,):\n    #prints the text_msg in the foreground color specified by fore_tupple with the background specified by back_tupple \n    #text_msg is the text, fore_tupple is foregroud color tupple (r,g,b), back_tupple is background tupple (r,g,b)\n    rf,gf,bf=fore_tupple\n    rb,gb,bb=back_tupple\n    msg='{0}' + txt_msg\n    mat='\\33[38;2;' + str(rf) +';' + str(gf) + ';' + str(bf) + ';48;2;' + str(rb) + ';' +str(gb) + ';' + str(bb) +'m' \n    print(msg .format(mat), flush=True)\n    print('\\33[0m', flush=True) # returns default print color to back to black\n    return","803bab32":"class LRA(keras.callbacks.Callback):\n    reset=False\n    count=0\n    stop_count=0\n    tepochs=0\n    def __init__(self,model, patience,stop_patience, threshold, factor, dwell, model_name, freeze, initial_epoch):\n        super(LRA, self).__init__()\n        self.model=model\n        self.patience=patience # specifies how many epochs without improvement before learning rate is adjusted\n        self.stop_patience=stop_patience\n        self.threshold=threshold # specifies training accuracy threshold when lr will be adjusted based on validation loss\n        self.factor=factor # factor by which to reduce the learning rate\n        self.dwell=dwell\n        self.lr=float(tf.keras.backend.get_value(model.optimizer.lr)) # get the initiallearning rate and save it in self.lr\n        self.highest_tracc=0.0 # set highest training accuracy to 0\n        self.lowest_vloss=np.inf # set lowest validation loss to infinity\n        #self.count=0 # initialize counter that counts epochs with no improvement\n        #self.stop_count=0 # initialize counter that counts how manytimes lr has been adjustd with no improvement  \n        self.initial_epoch=initial_epoch \n        #self.epochs=epochs\n        best_weights=self.model.get_weights() # set a class vaiable so weights can be loaded after training is completed        \n        msg=' '\n        if freeze==True:\n            msgs=f' Starting training using  base model { model_name} with weights frozen to imagenet weights initializing LRA callback'\n        else:\n            msgs=f' Starting training using base model { model_name} training all layers '            \n        print_in_color (msgs, (244, 252, 3), (55,65,80)) \n        \n    def on_epoch_begin(self,epoch, logs=None):\n        self.now= time.time()\n        \n    def on_epoch_end(self, epoch, logs=None):  # method runs on the end of each epoch\n        later=time.time()\n        duration=later-self.now        \n        if epoch== self.initial_epoch or LRA.reset==True:  \n            LRA.reset=False           \n            msg='{0:^8s}{1:^10s}{2:^9s}{3:^9s}{4:^9s}{5:^9s}{6:^9s}{7:^11s}{8:^8s}'.format('Epoch', 'Loss', 'Accuracy','V_loss','V_acc', 'LR', 'Next LR', 'Monitor', 'Duration')\n            print_in_color(msg, (244,252,3), (55,65,80)) \n            \n        lr=float(tf.keras.backend.get_value(self.model.optimizer.lr)) # get the current learning rate\n        current_lr=lr\n        v_loss=logs.get('val_loss')  # get the validation loss for this epoch\n        acc=logs.get('accuracy')  # get training accuracy \n        v_acc=logs.get('val_accuracy')\n        loss=logs.get('loss')\n        #print ( '\\n',v_loss, self.lowest_vloss, acc, self.highest_tracc)\n        if acc < self.threshold: # if training accuracy is below threshold adjust lr based on training accuracy\n            monitor='accuracy'\n            if acc>self.highest_tracc: # training accuracy improved in the epoch                \n                self.highest_tracc=acc # set new highest training accuracy\n                LRA.best_weights=self.model.get_weights() # traing accuracy improved so save the weights\n                self.count=0 # set count to 0 since training accuracy improved\n                self.stop_count=0 # set stop counter to 0\n                if v_loss<self.lowest_vloss:\n                    self.lowest_vloss=v_loss\n                color= (0,255,0)\n                self.lr=lr\n            else: \n                # training accuracy did not improve check if this has happened for patience number of epochs\n                # if so adjust learning rate\n                if self.count>=self.patience -1:\n                    color=(255,0,0)\n                    self.lr= lr* self.factor # adjust the learning by factor\n                    tf.keras.backend.set_value(self.model.optimizer.lr, self.lr) # set the learning rate in the optimizer\n                    self.count=0 # reset the count to 0\n                    self.stop_count=self.stop_count + 1\n                    if self.dwell:\n                        self.model.set_weights(LRA.best_weights) # return to better point in N space                        \n                    else:\n                        if v_loss<self.lowest_vloss:\n                            self.lowest_vloss=v_loss                                    \n                else:\n                    self.count=self.count +1 # increment patience counter                    \n        else: # training accuracy is above threshold so adjust learning rate based on validation loss\n            monitor='val_loss'\n            if v_loss< self.lowest_vloss: # check if the validation loss improved \n                self.lowest_vloss=v_loss # replace lowest validation loss with new validation loss                \n                LRA.best_weights=self.model.get_weights() # validation loss improved so save the weights\n                self.count=0 # reset count since validation loss improved  \n                self.stop_count=0  \n                color=(0,255,0)\n                self.lr=lr\n            else: # validation loss did not improve\n                if self.count>=self.patience-1:\n                    color=(255,0,0)\n                    self.lr=self.lr * self.factor # adjust the learning rate\n                    self.stop_count=self.stop_count + 1 # increment stop counter because lr was adjusted \n                    self.count=0 # reset counter\n                    tf.keras.backend.set_value(self.model.optimizer.lr, self.lr) # set the learning rate in the optimizer\n                    if self.dwell:\n                        self.model.set_weights(LRA.best_weights) # return to better point in N space\n                else: \n                    self.count =self.count +1 # increment the patience counter                    \n                if acc>self.highest_tracc:\n                    self.highest_tracc= acc\n        msg=f'{str(epoch+1):^3s}\/{str(LRA.tepochs):4s} {loss:^9.3f}{acc*100:^9.3f}{v_loss:^9.5f}{v_acc*100:^9.3f}{current_lr:^9.5f}{self.lr:^9.5f}{monitor:^11s}{duration:^8.2f}'\n        print_in_color (msg,color, (55,65,80))\n        if self.stop_count> self.stop_patience - 1: # check if learning rate has been adjusted stop_count times with no improvement\n            msg=f' training has been halted at epoch {epoch + 1} after {self.stop_patience} adjustments of learning rate with no improvement'\n            print_in_color(msg, (0,255,0), (55,65,80))\n            self.model.stop_training = True # stop training","78812a31":"epochs =20\npatience= 1 # number of epochs to wait to adjust lr if monitored value does not improve\nstop_patience =3 # number of epochs to wait before stopping training if monitored value does not improve\nthreshold=.9 # if train accuracy is < threshhold adjust monitor accuracy, else monitor validation loss\nfactor=.5 # factor to reduce lr by\ndwell=False # experimental, if True and monitored metric does not improve on current epoch set  modelweights back to weights of previous epoch\nfreeze=False # if true free weights of  the base model\ncallbacks=[LRA(model=model,patience=patience,stop_patience=stop_patience, threshold=threshold,\n                   factor=factor,dwell=dwell, model_name=model_name, freeze=freeze, initial_epoch=0 )]\nLRA.tepochs=epochs  # used to determine value of last epoch for printing","34146ffc":"history=model.fit(x=train_gen,  epochs=epochs, verbose=0, callbacks=callbacks,  validation_data=valid_gen,\n               validation_steps=None,  shuffle=False,  initial_epoch=0)","279452c0":"def tr_plot(tr_data, start_epoch):\n    #Plot the training and validation data\n    tacc=tr_data.history['accuracy']\n    tloss=tr_data.history['loss']\n    vacc=tr_data.history['val_accuracy']\n    vloss=tr_data.history['val_loss']\n    Epoch_count=len(tacc)+ start_epoch\n    Epochs=[]\n    for i in range (start_epoch ,Epoch_count):\n        Epochs.append(i+1)   \n    index_loss=np.argmin(vloss)#  this is the epoch with the lowest validation loss\n    val_lowest=vloss[index_loss]\n    index_acc=np.argmax(vacc)\n    acc_highest=vacc[index_acc]\n    plt.style.use('fivethirtyeight')\n    sc_label='best epoch= '+ str(index_loss+1 +start_epoch)\n    vc_label='best epoch= '+ str(index_acc + 1+ start_epoch)\n    fig,axes=plt.subplots(nrows=1, ncols=2, figsize=(15,8))\n    axes[0].plot(Epochs,tloss, 'r', label='Training loss')\n    axes[0].plot(Epochs,vloss,'g',label='Validation loss' )\n    axes[0].scatter(index_loss+1 +start_epoch,val_lowest, s=150, c= 'blue', label=sc_label)\n    axes[0].set_title('Training and Validation Loss')\n    axes[0].set_xlabel('Epochs')\n    axes[0].set_ylabel('Loss')\n    axes[0].legend()\n    axes[1].plot (Epochs,tacc,'r',label= 'Training Accuracy')\n    axes[1].plot (Epochs,vacc,'g',label= 'Validation Accuracy')\n    axes[1].scatter(index_acc+1 +start_epoch,acc_highest, s=150, c= 'blue', label=vc_label)\n    axes[1].set_title('Training and Validation Accuracy')\n    axes[1].set_xlabel('Epochs')\n    axes[1].set_ylabel('Accuracy')\n    axes[1].legend()\n    plt.tight_layout\n    #plt.style.use('fivethirtyeight')\n    plt.show()\n","447f92fa":"tr_plot(history, 0)","48b4f42a":"acc=model.evaluate(test_gen, verbose=1)[1]*100\nprint (' Accuracy on test set: ', acc)","2bc9931a":"def print_info( test_gen, preds, print_code, save_dir, subject ):\n    class_dict=test_gen.class_indices\n    labels= test_gen.labels\n    file_names= test_gen.filenames \n    error_list=[]\n    true_class=[]\n    pred_class=[]\n    prob_list=[]\n    new_dict={}\n    error_indices=[]\n    y_pred=[]\n    for key,value in class_dict.items():\n        new_dict[value]=key             # dictionary {integer of class number: string of class name}\n    # store new_dict as a text fine in the save_dir\n    classes=list(new_dict.values())     # list of string of class names\n    dict_as_text=str(new_dict)\n    dict_name= subject + '-' +str(len(classes)) +'.txt'  \n    dict_path=os.path.join(save_dir,dict_name)    \n    with open(dict_path, 'w') as x_file:\n        x_file.write(dict_as_text)    \n    errors=0      \n    for i, p in enumerate(preds):\n        pred_index=np.argmax(p)        \n        true_index=labels[i]  # labels are integer values\n        if pred_index != true_index: # a misclassification has occurred\n            error_list.append(file_names[i])\n            true_class.append(new_dict[true_index])\n            pred_class.append(new_dict[pred_index])\n            prob_list.append(p[pred_index])\n            error_indices.append(true_index)            \n            errors=errors + 1\n        y_pred.append(pred_index)    \n    if print_code !=0:\n        if errors>0:\n            if print_code>errors:\n                r=errors\n            else:\n                r=print_code           \n            msg='{0:^28s}{1:^28s}{2:^28s}{3:^16s}'.format('Filename', 'Predicted Class' , 'True Class', 'Probability')\n            print_in_color(msg, (0,255,0),(55,65,80))\n            for i in range(r):\n                msg='{0:^28s}{1:^28s}{2:^28s}{3:4s}{4:^6.4f}'.format(error_list[i], pred_class[i],true_class[i], ' ', prob_list[i])\n                print_in_color(msg, (255,255,255), (55,65,60))\n                #print(error_list[i]  , pred_class[i], true_class[i], prob_list[i])               \n        else:\n            msg='With accuracy of 100 % there are no errors to print'\n            print_in_color(msg, (0,255,0),(55,65,80))\n    if errors>0:\n        plot_bar=[]\n        plot_class=[]\n        for  key, value in new_dict.items():        \n            count=error_indices.count(key) \n            if count!=0:\n                plot_bar.append(count) # list containg how many times a class c had an error\n                plot_class.append(value)   # stores the class \n        fig=plt.figure()\n        fig.set_figheight(len(plot_class)\/3)\n        fig.set_figwidth(10)\n        plt.style.use('fivethirtyeight')\n        for i in range(0, len(plot_class)):\n            c=plot_class[i]\n            x=plot_bar[i]\n            plt.barh(c, x, )\n            plt.title( ' Errors by Class on Test Set')\n    \n    if len(classes)<= 30:\n        # create a confusion matrix and a test report        \n        y_true= np.array(labels)        \n        y_pred=np.array(y_pred)        \n        cm = confusion_matrix(y_true, y_pred )\n        clr = classification_report(y_true, y_pred, target_names=classes)\n        length=len(classes)\n        if length<8:\n            fig_width=8\n            fig_height=8\n        else:\n            fig_width= int(length * .5)\n            fig_height= int(length * .5)\n        plt.figure(figsize=(fig_width, fig_height))\n        sns.heatmap(cm, annot=True, vmin=0, fmt='g', cmap='Blues', cbar=False)       \n        plt.xticks(np.arange(length)+.5, classes, rotation= 90)\n        plt.yticks(np.arange(length)+.5, classes, rotation=0)\n        plt.xlabel(\"Predicted\")\n        plt.ylabel(\"Actual\")\n        plt.title(\"Confusion Matrix\")\n        plt.show()    \n        print(\"Classification Report:\\n----------------------\\n\", clr)","6c4d0bed":"save_dir=r'.\/'\nsubject='rocks'\nsave_id=str (model_name +  '-' + subject +'-'+ str(acc)[:str(acc).rfind('.')+3] + '.h5')\nsave_loc=os.path.join(save_dir, save_id)\nmodel.save(save_loc)","51d104db":"print_code=0\npreds=model.predict(test_gen) \nprint_info( test_gen, preds, print_code, save_dir, subject )  ","5032f246":"### evaluate model on test set","a2c98bb5":"### make train, test, valid generators","e09379f3":"### balance the data set so all classes have an equal number of samples","d3ab36c0":"###  create subclass of callbacks to control learning rate and print training data per epoch","8c1ca452":"### define directories and create a list of filepaths and labels","9224b2f9":"### data set is severely unbalanced ","0f6892d1":"### instantiate the callback","5ff5ce9b":"### build the model","eb337315":"### create some augmented images for basalt and marble clases which are wy underrepresented","040c0e71":"### define function to plot training data","93a3375d":"### save the model","0ca01e2c":"### train the model","45a87cce":"### define function to generate confusion matrix and classification report report","4dc6baef":"### create train_df, test_df, valid_df","844d6bc2":"### make predictions on test set and show confusion matrix and classification report","22b020e0":"### create data frames from auxiliary images and append to original dataframe","46b776c5":"### create a dataframe"}}