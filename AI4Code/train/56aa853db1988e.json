{"cell_type":{"6d39637c":"code","1f86ee71":"code","befd3c87":"code","71535888":"code","94ec91ed":"code","1d649b96":"code","68cf9c76":"code","304d1be7":"code","ff7d8eb1":"code","72150d56":"code","35786ec2":"code","5e477695":"code","85b54e06":"code","79bd0da7":"code","3a4bf4b6":"code","126a855c":"code","c6bd3e79":"code","d8f02efa":"code","3633d94d":"code","a3b1f682":"code","0362b38b":"code","43428cdb":"code","b4e0b958":"code","d87dd593":"code","33799f01":"code","c2cd539a":"code","36729476":"code","91fb2f7f":"code","193b9eab":"code","2b47f8d0":"code","eb788dfc":"code","a87e1cb1":"code","118c6187":"code","bb9b21d3":"code","11dbf61d":"code","7c9cf59a":"code","db092fc6":"code","eefd5387":"code","377f81af":"code","a84c63e4":"code","b8729bb8":"code","5a81e2e9":"code","30896d24":"code","e68f61a7":"markdown","fb5b6ea7":"markdown","efcd3260":"markdown","0ca171a5":"markdown","d3dde938":"markdown","03ff8baf":"markdown","bd8844cd":"markdown","76bf6634":"markdown","a24965e5":"markdown","af1f078a":"markdown","e9542c1e":"markdown","a06510cc":"markdown","3e0ff80c":"markdown","39c03f8c":"markdown","876db755":"markdown","1a02a2f7":"markdown","71b07134":"markdown","94ab3b18":"markdown","ac4a2235":"markdown","4e1488c7":"markdown","10d65866":"markdown","a26accdd":"markdown","22c4e0dc":"markdown","6b23e32b":"markdown","7bd1403a":"markdown","37626063":"markdown","7ffb5cf0":"markdown"},"source":{"6d39637c":"# \u6700\u521d\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","1f86ee71":"# csv\u3092\u8aad\u307f\u8fbc\u307f\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest  = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n# \u30c7\u30fc\u30bf\u3092\u7d71\u5408\u3057\u307e\u3059\u3002\ndf = pd.concat([train, test], ignore_index = True)\n\n# \u63d0\u51fa\u7528\u306bPasssegnerId\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\nPassengerId = test['PassengerId']\n","befd3c87":"df.head()","71535888":"# df\u3092\u3088\u308a\u8a73\u3057\u304f\u78ba\u8a8d\u3057\u307e\u3059\u3002\n# \u307e\u305a\u306f.info()\u3067\u60c5\u5831\u3092\u57fa\u672c\u60c5\u5831\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\ndf.info()","94ec91ed":"# \u6b20\u640d\u5024\u306e\u72b6\u6cc1\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\ndisplay(msno.matrix(df))\nplt.show()\ndisplay(msno.bar(df))\nplt.show()","1d649b96":"#\u6b21\u306b.describe()\u3067\u6570\u5024\u306e\u5916\u89b3\u3092\u898b\u307e\u3059\u3002\ndf.describe()","68cf9c76":"# Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of Survived\")\nsns.countplot(x='Survived', data=df)\n\n# Suvived\u306e\u5186\u30b0\u30e9\u30d5\nplt.subplot(1,2,2)\nplt.title(\"Pie of Survived\")\nlabel=[\"0\", \"1\"]\nplt.pie(df['Survived'].value_counts(),\n       labels=label, counterclock=False, startangle=90,\n       autopct='%1.1f%%', pctdistance=0.7)\nplt.show()","304d1be7":"# Pclass\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of Survived per Pclass\")\nsns.countplot(x=\"Survived\", hue=\"Pclass\", data=df)\n\nplt.subplot(1,2,2)\nplt.title(\"Bar of Pclass per Survived\")\nsns.countplot(x=\"Pclass\", hue=\"Survived\", data=df)\nplt.tight_layout()\nplt.show()","ff7d8eb1":"# Sex\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of Survived per Sex\")\nsns.countplot(x=\"Survived\", hue=\"Sex\", data=df)\n\nplt.subplot(1,2,2)\nplt.title(\"Bar of Sex per Survived\")\nsns.countplot(x=\"Sex\", hue=\"Survived\", data=df)\nplt.tight_layout()\nplt.show()","72150d56":"# Age\u3068Suvived\u306e\u30b0\u30e9\u30d5\ng = sns.FacetGrid(df,hue='Survived',aspect=3)\ng.map(sns.kdeplot,'Age',shade=True)\noldest = df['Age'].max()\ng.set(xlim=(0,oldest))\ng.add_legend()\n\nplt.show()","35786ec2":"# SibSp\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of Survived per SibSp\")\nsns.countplot(x=\"Survived\", hue=\"SibSp\", data=df)\nplt.legend(bbox_to_anchor=(1,1))\n\nplt.subplot(1,2,2)\nplt.title(\"Bar of SibSp per Survived\")\nsns.countplot(x=\"SibSp\", hue=\"Survived\", data=df)\nplt.legend(bbox_to_anchor=(1,1))\n\nplt.tight_layout()\nplt.show()","5e477695":"# Parch\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of Survived per Parch\")\nsns.countplot(x=\"Survived\", hue=\"Parch\", data=df)\nplt.legend(bbox_to_anchor=(1,1))\n\nplt.subplot(1,2,2)\nplt.title(\"Bar of Parch per Survived\")\nsns.countplot(x=\"Parch\", hue=\"Survived\", data=df)\nplt.legend(bbox_to_anchor=(1,1))\n\nplt.tight_layout()\nplt.show()","85b54e06":"# Fare\u3068Suvived\u306e\u30b0\u30e9\u30d5\ng = sns.FacetGrid(df,hue='Survived',aspect=3)\ng.map(sns.kdeplot,'Fare',shade=True)\nhighest = df['Fare'].max()\ng.set(xlim=(0,highest))\ng.add_legend()\n\nplt.show()","79bd0da7":"# Embarked\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of Survived per Embarked\")\nsns.countplot(x=\"Survived\", hue=\"Embarked\", data=df)\n\nplt.subplot(1,2,2)\nplt.title(\"Bar of Embarked per Survived\")\nsns.countplot(x=\"Embarked\", hue=\"Survived\", data=df)\nplt.tight_layout()\nplt.show()","3a4bf4b6":"df.info()","126a855c":"# Embarked\u306b\u306f\u6700\u983b\u5024\u3067\u3042\u308b\"S\"\u3092\u5165\u308c\u307e\u3059\u3002\ndf[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")","c6bd3e79":"# Cabin\u306f\u30c7\u30fc\u30bf\u6709\u308a\u7121\u3057\u3067\u4e57\u5ba2\u3092\u90e8\u5c4b\u6709\u308a\u7121\u3057\u3068\u533a\u5225\u3057\u307e\u3059\u3002\ndf[\"Cabin\"].fillna(0, inplace=True)\ndf['Cabin'] = df['Cabin'].where(df['Cabin'] == 0, 1)\ndf['Cabin'] = df['Cabin'].astype(int)","d8f02efa":"# Fare\u306e\u6b20\u640d\u5024\u306b\u306f\u5e73\u5747\u3092\u5165\u308c\u307e\u3059\u3002\ndf[\"Fare\"] = df[\"Fare\"].fillna(df[\"Fare\"].mean())","3633d94d":"df.info()","a3b1f682":"# SlibSp\u3068Parch\u304b\u3089FamilySize\u306e\u533a\u5206\u3092\u4f5c\u308a\u307e\u3059\u3002\ndf['FamilySize'] = df['Parch'] + df['SibSp'] + 1 ","0362b38b":"# Family Size\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.figure(figsize=(14,5))\ng = sns.countplot(x=\"Survived\", hue=\"FamilySize\", data=df)\nplt.title(\"Bar of Survived per Family Size\")\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()\n\nplt.figure(figsize=(14,5))\ng = sns.countplot(x=\"FamilySize\", hue=\"Survived\", data=df)\nplt.title(\"Bar of FamilySize per Survived\")\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()\n","43428cdb":"# Name\u304b\u3089Title\u306e\u533a\u5206\u3092\u4f5c\u308a\u307e\u3059\u3002\u3000\ndf_name1 = df['Name'].str.split(',', expand=True).rename(columns={0:'First', 1:'Other'})\ndf_name2 = df_name1['Other'].str.split('.', expand=True).rename(columns=({0:'Title', 1:'Last', 2:'Other'}))\ndf_names = pd.concat([df_name1, df_name2], axis=1)[['First', 'Title', 'Last']]\ndf = pd.concat([df, df_names], axis=1)\n# \u5c11\u306a\u3044Title\u3092\u307e\u3068\u3081\u307e\u3059\u3002\ndf[\"Title\"] = df[\"Title\"].replace([\" Dona\",\" Dr\", \" Rev\", \" Major\", \" Col\", \" Mlle\", \" Jonkheer\", \" Ms\", \" Capt\", \" Mme\", \" Sir\", \" Don\", \" Lady\", \" the Countess\"], \"Other\")","b4e0b958":"df[\"Title\"].value_counts()","d87dd593":"# Title\u3068Suvived\u306e\u68d2\u30b0\u30e9\u30d5\nplt.figure(figsize=(14,5))\nplt.title(\"Bar of Survived per Title\")\nsns.countplot(x=\"Survived\", hue=\"Title\", data=df)\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()\n\nplt.figure(figsize=(14,5))\nplt.title(\"Bar of Title per Survived\")\nsns.countplot(x=\"Title\", hue=\"Survived\", data=df)\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()","33799f01":"df.head()","c2cd539a":"# Age \u3092 Pclass, Sex, Fare, Cabin,FamilySize, Title \u304b\u3089\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u63a8\u5b9a\nfrom sklearn.ensemble import RandomForestRegressor\n\n# \u63a8\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u9805\u76ee\u3092\u62bd\u51fa\nage_data = df[['Age', 'Pclass','Sex','Fare','Cabin','FamilySize','Title']]\n\n# \u30e9\u30d9\u30eb\u7279\u5fb4\u91cf\u3092\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nage_data=pd.get_dummies(age_data)\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u96e2\u3057\u3001numpy\u306b\u5909\u63db\nknown_age = age_data[age_data.Age.notnull()].values  \nunknown_age = age_data[age_data.Age.isnull()].values\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092X, y\u306b\u5206\u96e2\nX = known_age[:, 1:]  \ny = known_age[:, 0]\n","36729476":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {\n        'n_estimators'      : [14,15,16],\n        'random_state'      : [1],\n        'n_jobs'            : [1],\n        'min_samples_split' : [26,27,28],\n        'max_depth'         : [6,7,8]\n}\n\nage_clf = model_selection.GridSearchCV(RandomForestRegressor(), parameters)\nage_clf.fit(X, y)\n \nprint(age_clf.best_estimator_)","91fb2f7f":"# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u63a8\u5b9a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\nrfr = RandomForestRegressor(max_depth=7, min_samples_split=27, n_estimators=15,n_jobs=1, random_state=1)\nrfr.fit(X, y)\n\n# \u63a8\u5b9a\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306eAge\u3092\u4e88\u6e2c\u3057\u3001\u88dc\u5b8c\npredictedAges = rfr.predict(unknown_age[:, 1:])\ndf.loc[(df.Age.isnull()), 'Age'] = predictedAges","193b9eab":"df.info()","2b47f8d0":"# one-hot encoding\u3067object\u306e\u30c7\u30fc\u30bf\u3092int\u306b\u5909\u3048\u307e\u3059\u3002\nfeatures = [\"Survived\",\"Pclass\", \"Sex\", \"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Cabin\",\"Embarked\",\"FamilySize\",\"Title\",\"Last\"]\ndf_dummy = pd.get_dummies(df[features])","eb788dfc":"# df_dummy.info()","a87e1cb1":"# train\u3068test\u306bdf\u3092\u5206\u3051\u307e\u3059\u3002\ntrain = df_dummy[df_dummy['Survived'].notnull()]\ntest  = df_dummy[df_dummy['Survived'].isnull()]","118c6187":"# DataFrame\u3092ndarray\u3078\u5909\u63db\u3059\u308b\u3002\ntrain = train.to_numpy()\ntest = test.to_numpy()","bb9b21d3":"X_train = train[:, 1:] # Pclass\u4ee5\u964d\u306e\u5909\u6570\ny_train = train[:, 0] # \u6b63\u89e3\u30c7\u30fc\u30bf\nX_test = test[:, 1:] ","11dbf61d":"print(X_train.shape)\nprint(X_test.shape)","7c9cf59a":"\"\"\"\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {\n        'n_estimators'      : [50,51,52,53,54,55,56],\n        'random_state'      : [1],\n        'n_jobs'            : [1],\n        'min_samples_split' : [34,35,36,37,38,39],\n        'max_depth'         : [9,10,11]\n}\n\nclf = model_selection.GridSearchCV(RandomForestClassifier(), parameters)\nclf.fit(X_train, y_train)\n \nprint(clf.best_estimator_)\n\"\"\"","db092fc6":"\"\"\"\nmodel = RandomForestClassifier(max_depth=10, min_samples_split=37, n_estimators=51,n_jobs=1, random_state=1)\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\"\"\"","eefd5387":"\"\"\"\n# xgboost\u3092\u4f7f\u3046\u305f\u3081import\u3059\u308b\u3002\nimport xgboost as xgb\n\n#\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u3092xgboost\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u5909\u63db\u3059\u308b\u3002\ndtrain = xgb.DMatrix(X_train, y_train) \ndtest = xgb.DMatrix(X_test)# y_test\u306a\u304f\u3066\u3044\u3044\uff1f\n\n\n# \u5b66\u7fd2\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nparams ={'objective': 'binary:logistic',# \u4e8c\u5024\u5206\u985e\u554f\u984c\n        'eval_metric': 'logloss',# \u8a55\u4fa1\u6307\u6a19\n        }\n\n# \u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\nmodel = xgb.train(params,\n                  dtrain,\n                  num_boost_round=50,# \u5b66\u7fd2\u30e9\u30a6\u30f3\u30c9\u6570\u306f\u9069\u5f53\n                 )\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u63a8\u5b9a\npredictions = model.predict(dtest)\n\"\"\"","377f81af":"# Modeling\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\n#Input layer-Hidden layer 1\nmodel.add(Dense(input_dim=(1143), units=100,activation=('relu')))\nmodel.add(Dropout(0.5))\n\n#Hidden layer 1-Hidden layer 2\nmodel.add(Dense(units=100,activation=('relu')))\nmodel.add(Dropout(0.5))\n\n#Hidden layer 2-Hidden layer 3\nmodel.add(Dense(units=100,activation=('relu')))\nmodel.add(Dropout(0.5))\n\n#Hidden layer 3-Output layer\nmodel.add(Dense(units=1,activation=(\"sigmoid\")))\n\n# Compile the model\nmodel.compile(optimizer=\"adam\",\n              loss=\"binary_crossentropy\",\n              metrics=['accuracy'])\n \n# Fit the model\nmodel.fit(X_train, y_train,\n           epochs=30,\n          batch_size = 10\n         )","a84c63e4":"predictions = model.predict(X_test)","b8729bb8":"predictions = predictions.reshape(418)","5a81e2e9":"predictions","30896d24":"submission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"Your submission was successfully saved!\")","e68f61a7":"Age\u4ee5\u5916\u306e\u6b20\u640d\u5024\u306f\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002Age\u306e\u6b20\u640d\u5024\u306f\u307e\u3060\u5148\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002","fb5b6ea7":"# 3. \u5206\u6790  ","efcd3260":"# 1. \u78ba\u8a8d\n\u307e\u305a\u306f\u3001\u554f\u984c\u3084\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u7406\u89e3\u3092\u6df1\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n","0ca171a5":"\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u304c\u3067\u304d\u307e\u3057\u305f\u3002  \n\u3053\u308c\u3092\u4f7f\u3063\u3066\u63d0\u51fa\u3057\u307e\u3059\u3002","d3dde938":"\u7279\u306b\u5909\u306a\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u6570\u5024\u306f\u7121\u3055\u305d\u3046\u306b\u601d\u3044\u307e\u3057\u305f\u3002  \n\u3060\u3060\u3001Fare=0\u306e\u4e57\u5ba2\u3082\u3044\u308b\u3053\u3068\u306b\u9a5a\u304d\u3067\u3059\u3002","03ff8baf":"\u5144\u5f1f\/\u914d\u5076\u8005\u304c1\u540d\u3082\u3057\u304f\u306f2\u540d\u3044\u308b\u5834\u5408\u306b\u306f\u751f\u5b58\u7387\u304c\u9ad8\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002","bd8844cd":"10\u6b73\u672a\u6e80\u306e\u4e57\u5ba2\u306e\u751f\u5b58\u7387\u304c\u9ad8\u305d\u3046\u3067\u3059\u3002  \n\u4e00\u65b9\u300110\u4ee3\u5f8c\u534a\uff5e20\u4ee3\u5f8c\u534a\u306b\u639b\u3051\u3066\u4ea1\u304f\u306a\u3063\u305f\u4e57\u5ba2\u306e\u5272\u5408\u304c\u5927\u304d\u305d\u3046\u3067\u3059\u3002","76bf6634":"\u547d\u3092\u843d\u3068\u3057\u305f\u4e57\u5ba2\u306e\u5185\u3001\u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u306e3rd\u306e\u4e57\u5ba2\u306e\u5272\u5408\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002  \n\u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u306e3rd\u306e\u4e57\u5ba2\u306f\u3001\u4ea1\u304f\u306a\u3063\u305f\u65b9\u306e\u65b9\u304c\u591a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002","a24965e5":"\u5206\u6790\u306b\u306f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002","af1f078a":"Mrs.\u3068Miss\u3001Master\u306f\u751f\u5b58\u7387\u304c\u9ad8\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002","e9542c1e":"FamilySize\u306e\u5927\u304d\u3044\u4e57\u5ba2\u306e\u65b9\u304c\u751f\u5b58\u7387\u306f\u9ad8\u305d\u3046\u3067\u3059\u3002","a06510cc":"## 2-3. \u6587\u5b57\u5217\u306e\u5909\u63db\none-hot encoding\u3067object\u306e\u30c7\u30fc\u30bf\u3092int\u306b\u5909\u3048\u307e\u3059\u3002","3e0ff80c":"\u4e21\u89aa\/\u5b50\u4f9b\u304c\u4e00\u4eba\u3067\u3082\u3044\u308b\u3068\u751f\u5b58\u7387\u304c\u9ad8\u307e\u308b\u3088\u3046\u3067\u3059\u3002","39c03f8c":"38.4%\u306e\u4e57\u5ba2\u304c\u751f\u5b58\u3057\u305f\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u534a\u5206\u4ee5\u4e0a\u306e\u65b9\u304c\u547d\u3092\u843d\u3068\u3057\u3066\u3044\u307e\u3059\u3002","876db755":"\u5168\u90e8\u30671309\u884c12\u5217\u3042\u308a\u307e\u3059\u3002\\\n\u7279\u306bCabin\u5217\u306b\u306f\u6b20\u640d\u5024\u304c\u591a\u304f\u3042\u308b\u3088\u3046\u3067\u3059\u3002","1a02a2f7":"## 1-2. \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002","71b07134":"# 2. \u30c7\u30fc\u30bf\u306e\u52a0\u5de5\n\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n","94ab3b18":"# 1st Submission to Kaggle - Titanic (Japanese)\n\n\u521d\u3081\u3066Kaggle\u306b\u6311\u6226\u3057\u307e\u3059\u3002  \n\u307e\u305a\u306f\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u554f\u984c\u306b\u53d6\u308a\u7d44\u307fKaggle\u306b\u3064\u3044\u3066\u77e5\u898b\u3092\u6df1\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \n\u4ee5\u4e0b\u306e\u901a\u308a\u9032\u3081\u3066\u53c2\u308a\u307e\u3059\u3002\n\n1. \u78ba\u8a8d  \n    1-1. \u554f\u984c\u306e\u8a8d\u8b58  \n    1-2. \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n2. \u30c7\u30fc\u30bf\u306e\u52a0\u5de5  \n    2-1. \u6b20\u640d\u5024\u306e\u5bfe\u5fdc  \n    2-2. \u7279\u5fb4\u91cf\u306e\u8ffd\u52a0  \n    2-3. \u6587\u5b57\u5217\u306e\u5909\u63db  \n3. \u5206\u6790\n4. \u63d0\u51fa\n\n\u9593\u9055\u3063\u3066\u3044\u308b\u7b87\u6240\u3001\u6539\u5584\u3067\u304d\u308b\u7b87\u6240\u7b49\u3042\u308a\u307e\u3057\u305f\u3089\u304a\u6559\u3048\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\\\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002","ac4a2235":"Age, Cabin, Embarked, Fare\u306b\u6b20\u640d\u5024\u304c\u3042\u308a\u307e\u3059\u3002\\\n\u203bSurvived\u306f\u7121\u8996\u3057\u307e\u3059\u3002\n\n\u8003\u3048\u65b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u3057\u307e\u3059\u3002\n* Age\u306b\u306fMean\u3092\u5165\u308c\u307e\u3059\u3002\u2190\u30b9\u30b3\u30a2\u304c\u4e0a\u304c\u3089\u306a\u3044\u306e\u3067\u6700\u5f8c\u306b\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u63a8\u5b9a\u3057\u307e\u3059\u3002\n* Embarked\u306f\u6700\u983b\u5024\u3092\u5165\u308c\u307e\u3059\u3002\n* Cabin\u306b\u30c7\u30fc\u30bf\u304c\u6709\u308b\u5834\u5408\u306f\u90e8\u5c4b\u6709\u308a\u3068\u3057\u3066\u3001\u7121\u3044\u5834\u5408\u306f\u90e8\u5c4b\u7121\u3057\u3068\u533a\u5225\u3057\u307e\u3059\u3002\n* Fare\u306b\u306f\u5e73\u5747\u3092\u3044\u308c\u307e\u3059\u3002","4e1488c7":"\u547d\u3092\u843d\u3068\u3057\u305f\u4e57\u5ba2\u306e\u5185\u3001\u7537\u6027\u306e\u5272\u5408\u304c\u975e\u5e38\u306b\u5927\u304d\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002  \n\u307e\u305f\u3001\u7537\u6027\u306e\u4e57\u5ba2\u306f\u547d\u3092\u843d\u3068\u3057\u305f\u4e57\u5ba2\u306e\u65b9\u304c\u751f\u5b58\u3057\u305f\u4e57\u5ba2\u3088\u308a\u975e\u5e38\u306b\u591a\u304f\u3001  \n\u5973\u6027\u306e\u4e57\u5ba2\u306f\u751f\u5b58\u3057\u305f\u4e57\u5ba2\u306e\u65b9\u304c\u547d\u3092\u843d\u3068\u3057\u305f\u4e57\u5ba2\u3088\u308a\u591a\u304b\u3063\u305f\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002","10d65866":"# 4. \u63d0\u51fa\n\u63d0\u51fa\u8cc7\u6599\u3092\u4f5c\u308a\u307e\u3059\u3002","a26accdd":"## 2-2. \u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n* SlibSp\u3068Parch\u304b\u3089FamilySize\u306e\u533a\u5206\u3092\u4f5c\u308a\u307e\u3059\u3002  \n* Name\u304b\u3089Title\u306e\u533a\u5206\u3092\u4f5c\u308a\u307e\u3059\u3002","22c4e0dc":"Southampton\u3067\u4e57\u8239\u3057\u305f\u4e57\u5ba2\u304c\u591a\u304f\u547d\u3092\u843d\u3068\u3057\u3066\u3044\u307e\u3059\u3002","6b23e32b":"\u4e57\u8239\u6599\u306e\u9ad8\u3044\u4e57\u5ba2\u306e\u65b9\u304c\u751f\u5b58\u78ba\u7387\u306f\u9ad8\u305d\u3046\u3067\u3059\u3002","7bd1403a":"## 1-1. \u554f\u984c\u306e\u8a8d\u8b58\n1912\u5e74\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306f\u6c37\u5c71\u306b\u885d\u7a81\u3057\u6c88\u6ca1\u3057\u3001\u591a\u304f\u306e\u65b9\u304c\u547d\u3092\u843d\u3068\u3057\u307e\u3057\u305f\u3002  \n\u3053\u306e\u554f\u984c\u306e\u30c6\u30fc\u30de\u306f\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u30c7\u30fc\u30bf\u304b\u3089\u300c\u3069\u306e\u3088\u3046\u306a\u4eba\u305f\u3061\u304c\u751f\u304d\u6b8b\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u304b\u300d\u3092\u5c0e\u304f\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u3067\u3059\u3002","37626063":"df\u306e\u5404\u5217\u306b\u4f55\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002  \n\u516c\u5f0f\u30da\u30fc\u30b8\u306eData Description\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\n\n* PasangerId\uff1a   \u4e57\u5ba2ID\n* Survived\uff1a     \u751f\u5b58\u53ef\u5426\uff08\u751f\u5b58\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u300c0\u300d\u3001\u751f\u5b58\u3057\u305f\u5834\u5408\u306f\u300c1\u300d\uff09\n* Pclass\uff1a       \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\uff081 = 1st, 2 = 2nd, 3 = 3rd\u30001\u304c\u6700\u9ad8\u30e9\u30f3\u30af\uff09\n* Name\uff1a         \u4e57\u5ba2\u540d\n* Sex\uff1a          \u6027\u5225\n* Age\uff1a          \u5e74\u9f62\n* SibSp\uff1a        \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u4e57\u8239\u3057\u3066\u3044\u305f\u5144\u5f1f\/\u914d\u5076\u8005\u306e\u6570\n* Parch\uff1a        \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u4e57\u8239\u3057\u3066\u3044\u305f\u4e21\u89aa\/\u5b50\u4f9b\u306e\u6570\n* Ticket\uff1a       \u30c1\u30b1\u30c3\u30c8\u756a\u53f7\n* Fare\uff1a         \u4e57\u8239\u6599\n* Cabin\uff1a        \u8239\u5ba4\u756a\u53f7\n* Embarked\uff1a     \u4e57\u8239\u6e2f\uff08C = Cherbourg, Q = Queenstown, S = Southampton\uff09\n\n\u4eca\u56de\u306e\u554f\u984c\u306fSurvived\u304c\u76ee\u7684\u5909\u6570\u3068\u306a\u308a\u3001\u305d\u308c\u4ee5\u5916\u304c\u8aac\u660e\u5909\u6570\u306b\u306a\u308a\u307e\u3059\u3002","7ffb5cf0":"## 2-1. \u6b20\u640d\u5024\u306e\u5bfe\u5fdc"}}