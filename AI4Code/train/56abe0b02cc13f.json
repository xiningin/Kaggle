{"cell_type":{"8ee2fd7d":"code","6d4ab55b":"code","69c702eb":"code","2cef9fb4":"code","0ed0797d":"code","5da73ae7":"code","756a9707":"code","7b168dd0":"code","6cd7117b":"code","dc68aeeb":"code","30a7e41e":"code","18001ace":"code","4768af93":"code","412469c6":"code","1b5a129a":"code","bca432a7":"code","067e5e36":"code","c8cd02ae":"code","0291b4d4":"code","e25b8f1f":"code","ae7a0a6e":"code","4425372c":"code","e896f6f7":"code","ce85f2c7":"code","3f0f9a47":"code","e6ea15c6":"code","f77f4c2e":"code","535b315b":"code","8c6c1e0f":"code","e1ccc021":"code","9fac80f5":"code","9d546ece":"code","2dfc8359":"code","d0deea6c":"markdown","11c355bd":"markdown","747131bb":"markdown","2a8ceac9":"markdown","968dd46e":"markdown","3242ca21":"markdown","2ffd9ad1":"markdown","26780f94":"markdown"},"source":{"8ee2fd7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d4ab55b":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder \nfrom sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\nfrom sklearn.utils import shuffle\nimport csv","69c702eb":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\npred = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","2cef9fb4":"train","0ed0797d":"sns.heatmap(train.isnull())","5da73ae7":"temp=train.copy()\ntemp['Cabin']=np.where(temp['Cabin'].isnull(),0,1)\ntemp.groupby('Cabin')['Survived'].mean().plot.bar()","756a9707":"train['cabin_missing']=np.where(train['Cabin'].isnull(),0,1)\npred['cabin_missing']=np.where(pred['Cabin'].isnull(),0,1)\npred.drop('Cabin',axis=1,inplace=True)\ntrain.drop('Cabin',axis=1,inplace=True)","7b168dd0":"temp=train.copy()\ntemp['Age']=np.where(temp['Age'].isnull(),0,1)\ntemp.groupby('Age')['Survived'].mean().plot.bar()","6cd7117b":"train.groupby(\"Age\")[\"Survived\"].mean().plot()","dc68aeeb":"mu=train['Age'].mean()\nsigma=(train['Age'].var())**0.5\ntrain['Age']=np.where(train['Age'].isnull(),mu+3*sigma,train['Age'])\npred['Age']=np.where(pred['Age'].isnull(),mu+3*sigma,pred['Age'])","30a7e41e":"sns.heatmap(pred.isnull())","18001ace":"train.dropna(inplace=True)","4768af93":"pred['Fare'].fillna(pred['Fare'].median(),inplace=True)\npred.isnull().sum()","412469c6":"plt.hist(train[train['Survived']==0]['Fare'],bins=50)","1b5a129a":"plt.hist(train[train['Survived']==1]['Fare'],bins=50)","bca432a7":"train.groupby('Sex')['Survived'].mean().plot.bar()","067e5e36":"train['Sex']=np.where(train['Sex']=='female',1,0)\npred['Sex']=np.where(pred['Sex']=='female',1,0)","c8cd02ae":"train.groupby('Parch')['Survived'].mean().plot.bar()","0291b4d4":"train.groupby('Pclass')['Survived'].mean().plot.bar()","e25b8f1f":"train.groupby('SibSp')['Survived'].mean().plot.bar()","ae7a0a6e":"train.groupby('Embarked')['Survived'].mean().plot.bar()","4425372c":"# Extract the first two letters\ntrain['Ticket_lett'] = train.Ticket.apply(lambda x: x[:2])\npred['Ticket_lett'] = pred.Ticket.apply(lambda x: x[:2])\n# Calculate ticket length\ntrain['Ticket_len'] = train.Ticket.apply(lambda x: len(x))\npred['Ticket_len'] = pred.Ticket.apply(lambda x: len(x))\n\nle = LabelEncoder() \n  \ntrain['Ticket_lett']= le.fit_transform(train['Ticket_lett']) \npred['Ticket_lett']= le.fit_transform(pred['Ticket_lett']) ","e896f6f7":"train[\"Name\"]=train[\"Name\"].str.split(\",\", n = 0, expand = True)[0]\npred[\"Name\"]=pred[\"Name\"].str.split(\",\", n = 0, expand = True)[0]\nle = LabelEncoder() \n  \ntrain['Name']= le.fit_transform(train['Name']) \npred['Name']= le.fit_transform(pred['Name']) ","ce85f2c7":"train['family']=train['Parch']+train['SibSp']\npred['family']=pred['Parch']+pred['SibSp']\ntrain","3f0f9a47":"mapping={'C':1,'Q':2,'S':3}\ntrain['Embarked'].replace(mapping,inplace=True)\npred['Embarked'].replace(mapping,inplace=True)\ntrain","e6ea15c6":"train.drop(['PassengerId','Name','Ticket','Embarked','SibSp','Parch'],axis=1,inplace=True)\npred.drop(['PassengerId','Name','Ticket','Embarked','SibSp','Parch'],axis=1,inplace=True)","f77f4c2e":"y_train=train['Survived'].values","535b315b":"train.drop('Survived',axis=1,inplace=True)","8c6c1e0f":"train.shape","e1ccc021":"sc = StandardScaler()\nx_train = sc.fit_transform(train)\nx_test=x_train[711:]\nx_train=x_train[:711]\ny_test=y_train[711:]\ny_train=y_train[:711]","9fac80f5":"knn = KNeighborsClassifier(n_neighbors = 20, metric = 'manhattan')\nknn.fit(x_train, y_train)\n\npredictions = knn.predict(x_test)\n\nprint('KNN:')\nprint( str(confusion_matrix(y_test, predictions)))\nprint('accuracy = ' + str(accuracy_score(y_test, predictions)))","9d546ece":"rfc = RandomForestClassifier(n_estimators=1000, criterion='entropy', n_jobs=-1,max_depth=50)\nrfc.fit( x_train, y_train)\n\npredictions = rfc.predict(x_test)\n\nprint('RFC Entropy:')\nprint(str(confusion_matrix(y_test, predictions)))\nprint('accuracy = ' +str(accuracy_score(y_test, predictions)))\n\nrfc2 = RandomForestClassifier(n_estimators=1000, criterion='gini', n_jobs=-1,max_depth=50)\nrfc2.fit( x_train, y_train)\n\npredictions = rfc2.predict(x_test)\n\nprint('RFC Gini:')\nprint(str(confusion_matrix(y_test, predictions)))\nprint('accuracy = ' +str(accuracy_score(y_test, predictions)))","2dfc8359":"result=[]\npredictions=rfc2.predict(sc.fit_transform(pred))\nfor i in range(892, 1310):\n    row = [i, predictions[i - 892]]\n    result.append(row)\n\nwith open('titanic_result.csv', \"w+\") as csv_file:\n    csvWriter = csv.writer(csv_file, delimiter = ',')\n    csvWriter.writerow([g for g in  ['PassengerId','Survived']]) \n    csvWriter.writerows(result)","d0deea6c":"**Chances of survival decrease with class**","11c355bd":"**Although missing cabin data is too large to imputate the above graph shows that people with missing cabin values have a lower rate of survival. Thus we can add a column which denotes weather cabin data is missing or not**\n","747131bb":"**Majority of Survivors where female**","2a8ceac9":"**The Higher and lower ages have higher survival rate thus we cant remove the values like cabin. But we also need the significance of missing values as people with missing ages have lower survival rate. Thus we can use end of sample distribution technique where we plug mu+3*sigma in null values thus capturing their significance**","968dd46e":"**Rest of Missing Values are small enough for us to drop**","3242ca21":"**People from certain parches have higher probablity of survival**","2ffd9ad1":"**We can drop passengerID ticket and name as they dont provide much information**","26780f94":"**Probablity of survival increases with increase in fare**"}}