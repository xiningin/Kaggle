{"cell_type":{"8b3c50b4":"code","f597a291":"code","ba462ba6":"code","b84082d9":"markdown","d98e935f":"markdown","d494bbd5":"markdown","2c224d55":"markdown","16a68493":"markdown","f134cf36":"markdown"},"source":{"8b3c50b4":"####################################################################################\n# imports \nimport numpy as np\nimport pandas as pd \nimport os,random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt\n\nfrom sklearn import ensemble\nfrom sklearn.model_selection import cross_validate\n\n####################################################################################\n# variables\nTRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\n\nSEED = 2022\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything()\n\nRS_CV = 3\nRS_N_ITER = 10\nRS_N_JOBS = -1\nRS_SCORING = 'roc_auc'\n\nCV_SCORING = 'roc_auc'\n####################################################################################\n# load \ntrain = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\n####################################################################################\n#preprocess \n#delete unnessary column\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)\n####################################################################################","f597a291":"####################################################################################\n#split input data and target data \nX = train.drop([TARGET],axis=1)\ny = train[TARGET]\n####################################################################################\n# search best parameter and model\nmodel = ensemble.GradientBoostingClassifier()\nparameters = {\n    'n_estimators' : sp_randInt(100,1000), \n    'learning_rate' : sp_randFloat(1e-7, 1e+7) \n}\n\nrs = RandomizedSearchCV(estimator=model, \n                           param_distributions = parameters,\n                           scoring=RS_SCORING,\n                           cv = RS_CV, \n                           n_iter = RS_N_ITER, \n                           n_jobs=RS_N_JOBS,\n                           verbose=10)\nrs.fit(X, y)\n    \ncv_results = cross_validate(rs, X, y, cv=5,scoring=(CV_SCORING),return_train_score=True)\nprint(cv_results)\n\n# best model \nprint(rs.best_params_)\nbestModel = rs.best_estimator_\n####################################################################################","ba462ba6":"####################################################################################\n#predict\nX_test = test\npred_test = bestModel.predict(X_test)\n####################################################################################\n#submit\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test\nsub.to_csv(SUBMISSION_PATH, index=False)\nsub.head()\n####################################################################################","b84082d9":"### imports & variables & load & preprocess","d98e935f":"# Build Model","d494bbd5":"### split data & search best model","2c224d55":"### predict & submit","16a68493":"# Before Building Model","f134cf36":"# After Building Model"}}