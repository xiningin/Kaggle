{"cell_type":{"8c0301ec":"code","9b3317fe":"code","5a0966c3":"code","e7b39744":"code","e1ce290d":"code","950de360":"code","307037d4":"code","6c9cf6bf":"code","3c04f475":"code","66373c20":"code","7f3f4f42":"code","198fc343":"code","1a8fdfcb":"code","9eddc6ca":"code","07cf779d":"markdown","277b9af1":"markdown","d2336def":"markdown","5149ef66":"markdown","814ff39f":"markdown","5fc30c14":"markdown","f51751b8":"markdown","a894caac":"markdown","936ede9f":"markdown","aff5e543":"markdown","63fb002d":"markdown","9779dc9a":"markdown","123b16c9":"markdown"},"source":{"8c0301ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b3317fe":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nnp.set_printoptions(suppress=True)\nnp.seterr(divide = 'ignore') \n\n(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()\nassert X_train.shape == (60000, 28, 28)\nassert X_test.shape == (10000, 28, 28)\nassert y_train.shape == (60000,)\nassert y_test.shape == (10000,)\n\n# normalisation\nX_train = X_train \/ 255\nX_test = X_test \/ 255\n\ndef formatY(y):\n    Y = np.zeros(10)\n    Y[y] = 1\n    return Y\n\n# reshape\nX_train = X_train.reshape(60000, 28 ** 2)\nX_test = X_test.reshape(10000, 28 ** 2)\ny_train = np.array([formatY(y) for y in y_train])\ny_test =np.array([formatY(y) for y in y_test])\n\n# tensorflow\nX_train = tf.constant(X_train, dtype=tf.float64)\nX_test = tf.constant(X_test, dtype=tf.float64)\ny_train = tf.constant(y_train, dtype=tf.float64)\ny_test = tf.constant(y_test, dtype=tf.float64)","5a0966c3":"def inistial_parameters(n, dims):\n    \n    W = {}\n    B = {}\n    \n    for i in range(len(dims)):\n        dim = dims[i]\n        if i == 0:\n            w =  np.random.rand(n, dim) * 1e-3 #* (np.sqrt(2 \/ dim))\n            W['W' + str(i + 1)] = tf.constant(w)\n            b = np.zeros((1, dim))\n            B['b' + str(i + 1)] = tf.constant(b)\n        else:\n            w = np.random.rand(dims[i-1], dim) * 1e-3 #* (np.sqrt(2 \/ dim))\n            W['W' + str(i + 1)] = tf.constant(w)\n            b = np.zeros((1, dim))\n            B['b' + str(i + 1)] = tf.constant(b)\n            \n    return {\n        'W' : W,\n        'b' : B\n    }","e7b39744":"def linear(X, W, b):\n    return np.dot(X, W) + b","e1ce290d":"def relu(X):\n    return np.maximum(X, 0)","950de360":"def softmax(X):\n    return np.exp(X) \/ (np.sum(np.exp(X), axis=1, keepdims=True)) ","307037d4":"def activation(A_prev, W, b, active):\n    \"\"\"\n    activation - relu\/softmax\n    \"\"\"\n    \n    if active == 'relu':\n        Z = linear(A_prev, W, b)\n        A = relu(Z)\n    elif active == 'softmax':\n        Z = linear(A_prev, W, b)\n        A = softmax(Z)\n        \n    return A, Z","6c9cf6bf":"def L_model_forward(X, W, b):\n    A = X\n    L = len(b)\n    # caches = {}\n    \n    # caches['A0'] = A\n    \n    for i in range(1, L):\n        A_prev = A\n        \n        A, Z = activation(A_prev, W['W' + str(i)], b['b' + str(i)], 'relu')\n        # caches['A' + str(i)] = A\n        # caches['Z' + str(i)] = Z\n        \n    AL, ZL = activation(A, W['W' + str(L)], b['b' + str(L)], 'softmax')\n    # caches['A' + str(L)] = AL\n    # caches['Z' + str(L)] = ZL\n    \n    return AL","3c04f475":"def crossEntropy(haty, Y):\n    m = haty.shape[0]\n\n    ce = np.sum(Y * np.log(haty))\n\n    return - ce \/ m","66373c20":"def SGDRange(m, setpsize):\n  sum = m\n  setpsize = setpsize\n\n  rangeArr = []\n\n  for i in range(0, (sum \/\/ setpsize) * setpsize, setpsize):\n    rangeArr.append([i, i + setpsize])\n    \n  if sum % setpsize != 0:\n    lastone = sum \/\/ setpsize * setpsize\n    rangeArr.append([lastone, lastone + sum % setpsize])\n  return rangeArr\n\n# debug\n# rangeArr = SGDRange(124, 50)\n# print(rangeArr)","7f3f4f42":"n = X_train.shape[1]\nalpha = 0.1\n\ndims = [512, 10]\nL = len(dims)\n\nparameters = inistial_parameters(n, dims)\nW = parameters['W']\nb = parameters['b']\n\n# AL, caches = L_model_forward(X_train, W, b)\n\ncost_train = []\ncost_test = []\n\ndef backpropagation(X, y):\n    m = X.shape[0]\n\n    with tf.GradientTape(persistent=True) as g:\n        \n        for i in range(1, L + 1):\n            g.watch(W['W' + str(i)])\n            g.watch(b['b' + str(i)])\n\n        # ReLU\n        A_previous = X\n        for i in range(1, L):\n            L_hidden = tf.experimental.numpy.dot(A_previous, W['W' + str(i)]) + b['b' + str(i)]\n            A_previous = tf.math.maximum(L_hidden, 0) \n\n        # softmax\n        LL = tf.experimental.numpy.dot(A_previous, W['W' + str(L)]) + b['b' + str(L)]\n        AL = (tf.experimental.numpy.exp(LL)) \/ (tf.experimental.numpy.sum(tf.experimental.numpy.exp(LL), axis=1, keepdims=True)) \n\n        # cost function\n        J = - tf.experimental.numpy.sum(y * tf.experimental.numpy.log(AL)) \/ m\n    \n    for i in range(1, L + 1):\n        \n        dJ_W = g.gradient(J, W['W' + str(i)])\n        dJ_b = g.gradient(J, b['b' + str(i)])\n\n        W['W' + str(i)] = W['W' + str(i)] - alpha * dJ_W\n        b['b' + str(i)] = b['b' + str(i)] - alpha * dJ_b\n\niteration = 40\nfor i in range(iteration):\n\n  rangeArr = SGDRange(X_train.shape[0], 512)\n  for index in rangeArr:\n    backpropagation(X_train[index[0]:index[1]], y_train[index[0]:index[1]])\n\n  cost_train.append(crossEntropy(L_model_forward(X_train, W, b), y_train))\n  cost_test.append(crossEntropy(L_model_forward(X_test, W, b), y_test))\n\n  if i % 5 == 0 or i == iteration - 1:\n    print('====enoch == {enoch}===='.format(enoch=i))\n    print('cost_train: {cost_train}'.format(cost_train=cost_train[i]))\n    print('cost_test: {cost_test}'.format(cost_test=cost_test[i]))\n\n","198fc343":"import matplotlib.pyplot as plt\n\nplt.plot(cost_train[3:], label=\"Train Data\")\nplt.plot(cost_test[3:], label=\"Validation Data\")\nplt.ylabel('cost')\nplt.xlabel('epochs')\nplt.legend()\nplt.show()","1a8fdfcb":"def getCorrectPercentage(X, y):\n  m = len(X)\n  hatys = L_model_forward(X, W, b)\n  hatys = np.array([formatY(np.argmax(y)) for y in hatys])\n  corrent_num = np.sum(y * hatys)\n  return corrent_num \/ m\n\nprint(getCorrectPercentage(X_train, y_train))\nprint(getCorrectPercentage(X_test, y_test))","9eddc6ca":"## Test\nindex = 1\nsingle_label = np.where(y_test[index] == 1)[0]\nsingle_Image = X_test[index].numpy()\nsingle_Image_r = single_Image.reshape((28, 28))\ntest = L_model_forward(single_Image, W, b)\nprint(test)\nprint(np.argmax(test))\nplt.title('Label is {label}'.format(label=single_label))\nplt.imshow(single_Image_r, cmap='gray')\nplt.show()","07cf779d":"## Load Data","277b9af1":"## L model forward","d2336def":"## get correct percentage","5149ef66":"## Softmax","814ff39f":"## Activation function","5fc30c14":"## Plot","f51751b8":"## Linear Regression","a894caac":"## CrossEntropy","936ede9f":"## Initialize HyperParameters","aff5e543":"# MNIST task achieved by Gradient Descent of Tensorflow\nThis note utilised the part ability of Tensorflow (Gradient Descent) to achieve the aim of recognition of number image. The dataset comes from MNIST. It has 60000 training examples and 10000 test examples. The result data (notation as Y) is preprocessed to \"One-Hot\" format. Following this notebook, it will step-by-step take you to create a complete Neural Networks Model.","63fb002d":"## Train","9779dc9a":"SGDRange function will split data to subsets for achievement of SGD.","123b16c9":"## ReLU"}}