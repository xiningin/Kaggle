{"cell_type":{"17439d5a":"code","d3a55742":"code","75d16a2c":"code","be49317c":"code","08c2f53a":"code","8d27fdd7":"code","0f45d8ac":"code","4cc2aef8":"code","261ee594":"code","46ac087e":"code","8a0ec3aa":"code","feb89820":"code","f9e0c8b4":"code","b336a8aa":"code","55090b80":"code","c026e8ea":"code","f7e80ffb":"code","3a259c50":"code","36889d13":"code","a3d77e21":"code","a1386f65":"markdown","9b0ab856":"markdown","a81631c6":"markdown","24695009":"markdown"},"source":{"17439d5a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","d3a55742":"import csv\nimport sklearn\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM\nfrom pylab import rcParams\nrcParams['figure.figsize']=14,8\nRANDOM_SEED=42\nLABELS=['Normal','Fraud']","75d16a2c":"dp=pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","be49317c":"dp.head()","08c2f53a":"dp.info()","8d27fdd7":"#exploratory data analysis","0f45d8ac":"dp.shape","4cc2aef8":"dp.isnull().values.any()","261ee594":"count_classes=pd.value_counts(dp['Class'],sort=True)\ncount_classes.plot(kind='bar',rot=0)\nplt.title('Transcation Class Distribution')\nplt.xticks(range(2),LABELS)\nplt.ylabel('Frequency')","46ac087e":"fraud=dp[dp['Class']==1]\nnormal=dp[dp['Class']==0]\nprint(fraud.shape,normal.shape)","8a0ec3aa":"fraud.Amount.describe()","feb89820":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nf.suptitle('Amount per transaction by class')\nbins = 50\nax1.hist(fraud.Amount, bins = bins)\nax1.set_title('Fraud')\nax2.hist(normal.Amount, bins = bins)\nax2.set_title('Normal')\nplt.xlabel('Amount ($)')\nplt.ylabel('Number of Transactions')\nplt.xlim((0, 20000))\nplt.yscale('log')\nplt.show();","f9e0c8b4":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nf.suptitle('Time of transaction vs Amount by class')\nax1.scatter(fraud.Time, fraud.Amount)\nax1.set_title('Fraud')\nax2.scatter(normal.Time, normal.Amount)\nax2.set_title('normal')\nplt.xlabel('Time (in Seconds)')\nplt.ylabel('Amount')\nplt.show()","b336a8aa":"#Take some sample of the data\n\ndp_1= dp.sample(frac = 0.2,random_state=1)\n\ndp_1.shape","55090b80":"#Determine the number of fraud and valid transactions in the dataset\n\nFraud = dp_1[dp_1['Class']==1]\n\nValid = dp_1[dp_1['Class']==0]\n\noutlier_fraction = len(Fraud)\/float(len(Valid))\n\nprint(outlier_fraction)\n\nprint(\"Fraud Cases : {}\".format(len(Fraud)))\n\nprint(\"Valid Cases : {}\".format(len(Valid)))","c026e8ea":"#Create independent and Dependent Features\ncolumns = dp_1.columns.tolist()\n# Filter the columns to remove data we do not want \ncolumns = [c for c in columns if c not in [\"Class\"]]\n# Store the variable we are predicting \ntarget = \"Class\"\n# Define a random state \nstate = np.random.RandomState(42)\nX = dp_1[columns]\nY = dp_1[target]\nX_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))\n# Print the shapes of X & Y\nprint(X.shape)\nprint(Y.shape)","f7e80ffb":"pip install -U scikit-learn","3a259c50":"##Define the outlier detection methods\n\nclassifiers = {\"Isolation Forest\":IsolationForest(n_estimators=100, max_samples=len(X),\n                                                  contamination=outlier_fraction,verbose=0,random_state=state),\n               \"Local Outlier Factor\":LocalOutlierFactor(n_neighbors=20, algorithm='auto',leaf_size=30, metric='minkowski',p=2,\n                                                         metric_params=None,contamination=outlier_fraction),\n               #\"Support Vector Machine\":OneClassSVM(kernel='rbf', degree=3, gamma=0.1,nu=0.05,max_iter=-1,\n                                                    #some reason random_state=state is giving type error and hence been left out)\n              }\n","36889d13":"type(classifiers)","a3d77e21":"n_outliers = len(Fraud)\nfor i, (clf_name,clf) in enumerate(classifiers.items()):\n    #Fit the data and tag outliers\n    if clf_name == \"Local Outlier Factor\":\n        y_pred = clf.fit_predict(X)\n        scores_prediction = clf.negative_outlier_factor_\n    #elif clf_name == \"Support Vector Machine\":\n        #clf.fit(X)\n        #y_pred = clf.predict(X)\n    else:    \n        clf.fit(X)\n        scores_prediction = clf.decision_function(X)\n        y_pred = clf.predict(X)\n    #Reshape the prediction values to 0 for Valid transactions , 1 for Fraud transactions\n    y_pred[y_pred == 1] = 0\n    y_pred[y_pred == -1] = 1\n    n_errors = (y_pred != Y).sum()\n    # Run Classification Metrics\n    print(\"{}: {}\".format(clf_name,n_errors))\n    print(\"Accuracy Score :\")\n    print(accuracy_score(Y,y_pred))\n    print(\"Classification Report :\")\n    print(classification_report(Y,y_pred))","a1386f65":"here we r using 2 diffrent models isolation forest,local outlier..to see which model works best with imbalanced datasets","9b0ab856":"<b>Isolation Forest Algorithm :<\/b><br>\nOne of the newest techniques to detect anomalies is called Isolation Forests. The algorithm is based on the fact that anomalies are\ndata points that are few and different. As a result of these properties, anomalies are susceptible to a mechanism called isolation.\nThis method is highly useful and is fundamentally different from all existing methods. It introduces the use of isolation as a\nmore effective and efficient means to detect anomalies than the commonly used basic distance and density measures. Moreover, \nthis method is an algorithm with a low linear time complexity and a small memory requirement. It builds a good performing model\nwith a small number of trees using small sub-samples of fixed size, regardless of the size of a data set.\nTypical machine learning methods tend to work better when the patterns they try to learn are balanced, meaning the same amount of good \nand bad behaviors are present in the dataset.\nHow Isolation Forests Work The Isolation Forest algorithm isolates observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. The logic argument goes: isolating anomaly observations is easier because only a few conditions are needed to separate those cases from the normal observations. On the other hand, isolating normal observations require more conditions. Therefore, an anomaly score can be calculated as the number of conditions required to separate a given observation.\n\nThe way that the algorithm constructs the separation is by first creating isolation trees, or random decision trees. Then, the score is calculated as the path length to isolate the observation.\n\n<b>Local Outlier Factor(LOF) Algorithm<\/b><br>\nThe LOF algorithm is an unsupervised outlier detection method which computes the local density deviation of a given data point with respect to its neighbors. It considers as outlier samples that have a substantially lower density than their neighbors.\n\nThe number of neighbors considered, (parameter n_neighbors) is typically chosen 1) greater than the minimum number of objects a cluster has to contain, so that other objects can be local outliers relative to this cluster, and 2) smaller than the maximum number of close by objects that can potentially be local outliers. In practice, such informations are generally not available, and taking n_neighbors=20 appears to work well in general.\n","a81631c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24695009":"<h6>Observations :<\/h6>\nso in the pool of 20% of sample of the dataset \nIsolation Forest detected 137 errors versus Local Outlier Factor detecting 173 errors vs. SVM detecting 29070 errors<br>\nIsolation Forest has a 99.75% more accurate than LOF of 99.69% and SVM of 48.96<br>\nWhen comparing error precision & recall for 3 models , the Isolation Forest performed much better than the LOF as we can see<br> that the detection of fraud cases is around 22 % versus LOF detection rate of just 1 % and SVM of 0%.<br>\nSo overall Isolation Forest Method performed much better in determining the fraud cases which is around 30%.<br>\nWe can also improve on this accuracy by increasing the sample size or use deep learning algorithms however at the cost of<br> computational expense.<br>We can also use complex anomaly detection models to get better accuracy in determining more fraudulent cases"}}