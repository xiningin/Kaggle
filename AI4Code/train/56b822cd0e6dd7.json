{"cell_type":{"fa69dc87":"code","95372cf5":"code","421c6a41":"code","177cd0fe":"code","b10b1460":"code","3cddc30f":"code","e6003140":"code","dbc67413":"code","a1ac883d":"code","6227efdd":"code","72668603":"code","3dea303e":"code","d72c5625":"code","cbc2d97b":"code","485dfda7":"code","9a2c6d57":"code","f88fec29":"code","ddd25f11":"code","e686e7b7":"code","3926a275":"code","226cf69c":"code","334d1416":"code","506b20fa":"code","ca6d0677":"code","23636334":"code","c02e6772":"code","a91cc52d":"code","51d3b79b":"code","1c5bf7c8":"code","8fe06cb6":"code","cfb6ae1e":"code","52e86e55":"code","8b9a6cbb":"code","3d52514d":"code","4c47f193":"markdown","95e31e9f":"markdown","f88466ee":"markdown","bff66b4c":"markdown","4c35190d":"markdown","ce90db0b":"markdown","b8f30c6b":"markdown","c3ca72ae":"markdown","da72e570":"markdown","b14328fc":"markdown","3d784407":"markdown","8e06d8d9":"markdown","efeb4e48":"markdown","3e5b7f80":"markdown","59f933db":"markdown","5915a198":"markdown","142ab454":"markdown","b726613e":"markdown"},"source":{"fa69dc87":"import pandas as pd \nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","95372cf5":"#read excel file\nfile = '..\/input\/all.xlsx'\ndf = pd.read_excel(file, index_col=\"Jahr\")","421c6a41":"df.tail()","177cd0fe":"df.isnull().sum()\ndf.info()","b10b1460":"#show all empty cells (amount=26)\ndf[df.Zweck.isnull()]","3cddc30f":"# shows most frequent value\ndf['Zweck'].value_counts()","e6003140":"df['Zweck'].fillna('Kosten f\u00fcr die Besch\u00e4ftigung von \u00dcbungsleitern')\n#print(df.isnull().sum())\nprint(df)","dbc67413":"#list only the numerical ones:\nlist(set(df.dtypes.tolist()))","a1ac883d":"df_num = df.select_dtypes(include = ['float64', 'int64'])\ndf_num.head()","6227efdd":"# plot every numeric data\ndf_num.hist(figsize=(10, 6), bins=50, xlabelsize=8, ylabelsize=8); # ; avoid having the matplotlib verbose informations","72668603":"encode = LabelEncoder()\ndf['Politikbereich'] = encode.fit_transform(df['Politikbereich'])","3dea303e":"df['Politikbereich']","d72c5625":"# Deciding the inital threshold to be 0.05% of dataset size\ntot_instances = df.shape[0]\nthreshold = tot_instances*0.0005\nprint ('The minimum count threshold is: '+str(threshold))","cbc2d97b":"# Apply the count threshold to all the categorical values\nobj_columns = list(df.select_dtypes(include=['object']).columns)    # Get a list of all the columns' names with object dtype\ndel obj_columns[0:4]\ndf = df.apply(lambda x: x.mask(x.map(x.value_counts())<threshold, 'RARE') if x.name in obj_columns else x)","485dfda7":"df_encoded = pd.get_dummies(data=df, columns=obj_columns)\ndf_encoded.dtypes","9a2c6d57":"df_encoded.head()","f88fec29":"df.columns","ddd25f11":"df['Art'] = [x.replace('institutionelle F\u00f6rderung','Institutionelle F\u00f6rderung') for x in df['Art']]","e686e7b7":"labels = df.Art.value_counts().index\ncolors = ['pink','orange']\nexplode = [0,0]\nsizes = df.Art.value_counts().values\n\n# visual \nplt.figure(0,figsize = (6,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Art der Ausgabe',color = 'blue',fontsize = 15)\nplt.show()","3926a275":"df_bet=df.groupby([\"Jahr\"])[\"Betrag\"].sum()\n#df_bet.drop(df.columns[0])\ndf_bet.head()","226cf69c":"df_med_by_year = df_by_year.sum()\ndf_rat_by_year = df_med_by_year['Betrag']\nplt.scatter(df_rat_by_year.index, df_rat_by_year)\nplt.xlabel('Year')\nplt.ylabel('Expenses')","334d1416":"plt.scatter(df.index,df['Betrag'],df['Politikbereich'])\nplt.xlabel('Year')\nplt.ylabel('Expenses')","506b20fa":"sns.barplot(x=df.index, y=df['Betrag'])","ca6d0677":"sns.swarmplot(x=insurance_data['smoker'],\n              y=insurance_data['charges'])","23636334":"# Split the dataset and remove unnecessary columns\nX_orig = df_encoded.drop(['Name','Geber','Art','Jahr','Anschrift','Politikbereich'], axis=1)\nY_orig = df['Politikbereich']     # Set the target column","c02e6772":"# Split the data set to train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X_orig, Y_orig, test_size=0.3, random_state=42)","a91cc52d":"model = XGBClassifier(silent=False, \n                      scale_pos_weight=1,\n                      learning_rate=0.01,  \n                      colsample_bytree = 0.4,\n                      subsample = 0.8,\n                      objective='binary:logistic', \n                      n_estimators=1000, \n                      reg_alpha = 0.3,\n                      max_depth=3, \n                      gamma=5)","51d3b79b":"model.fit(X_train, y_train)","1c5bf7c8":"# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]","8fe06cb6":"# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","cfb6ae1e":"#cross_val_score(LogisticRegression(), X_orig,Y_orig,cv=7)","52e86e55":"kfold = StratifiedKFold(n_splits=10, random_state=7)\nresults=cross_val_score(model, X_orig,Y_orig,cv=kfold)\nprint(\"Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","8b9a6cbb":"#randomforest\nres =cross_val_score(RandomForestClassifier(n_estimators=400), X_orig,Y_orig,cv=kfold)\nprint(\"Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","3d52514d":"rf = RandomForestClassifier(n_estimators=500)\nrf.fit(X_train,y_train)\nrf.score(X_test,y_test)","4c47f193":"## Load the Data","95e31e9f":"# First Data Science Project\nHi Guys, this is my very first Data Science Project. I've been reading through the Kaggle Learn Section for a couple of months already and this is my first hands on experience. Could you please give me feedback, especally:\n- Did I overfit? \n- Why is my score low (46%)\n- Is there a better way than LabelEncoding for the (categorical) Target (y)?\n- Choose of Machine Learning model correct? (XGBClassifier)\n- I have seen that most of the people first plot the data. I never worked with that and have no idea when, what and where to do that?\n\n\nThank you!\n\n\n\n\n# Berlin City Expenses\n\nThis data set contains the government spending data for the state of Berlin (Germany) for 2014-2018, alongside amount of money, purpose, what kind of spending and policy area data.\n\nFurther information can be found at [Zuwendungsdatenbank](https:\/\/www.berlin.de\/sen\/finanzen\/service\/zuwendungsdatenbank\/)\n\n## Task\n### Classification\nIndividual expenses must be assigned to the appropriate policy area based on purpose and amount field.\n\n## Import Packages","f88466ee":"## One Hot Encoding","bff66b4c":"I am aware that there are empty cells in the address column (---). However, the column is not relevant to this project, so I will leave it like this.","4c35190d":"## Label Encode the target\nBecause the Target (Politikbereich) has categorical data (non-numeric), it has to be converted in numeric values.\n*I was trying to implement the One Hot Algorithm for the Target Value, but it didn't work out: My target had more than one column*","ce90db0b":"## EDA","b8f30c6b":"## XGBoost Classifier","c3ca72ae":"### Replace every empty cell in column \"Zweck\" with most frequent value\n","da72e570":"### K-Fold","b14328fc":"## Look for missing values","3d784407":"## K-Fold\/Train-Test-Split","8e06d8d9":"### Optional: Thresholding Values in Columns by Counts \nThis step is optional because, due to the One Hot algorithm, too many columns have been created for my laptop, so I got a MemoryError while training the data.\n","efeb4e48":"### K-Fold RandomForestClassifier","3e5b7f80":"TODO:\n\nHyperparameter Optimization\n* Grid Search\/Random Search\n* Bayessche Optimierung (bayesian-optimization)\n\n\nFeature Engineering\n* Try diffrent Encoding Methods and compare their score\n* Count Encoding\n* Target Encoding\n* Cat Boost Encoding","59f933db":"### Train-test-split XGBoostClassifier","5915a198":"### Train-Test-Split","142ab454":"### K-Fold XGBClassifier","b726613e":"## RandomForest"}}