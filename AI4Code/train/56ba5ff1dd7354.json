{"cell_type":{"10587cb1":"code","a5605e8b":"code","91116aa1":"code","46a1cc6c":"code","dd8313bf":"code","d02eedc9":"code","dbbac9dd":"code","22cbab6a":"code","a47bfcb8":"code","761fa72e":"code","3a16c648":"code","d21e3ef8":"code","6b7569f0":"code","4bb2ae6b":"code","deb44640":"code","5c40ef19":"code","86e89890":"code","70dd8a1d":"code","5331f23e":"code","ce01078c":"code","190e7dd8":"code","9bf65077":"code","ca6b3fd2":"markdown","dbaf1755":"markdown","5f9a8d4c":"markdown","53828938":"markdown","cd48995e":"markdown","d06175c4":"markdown","3441c45a":"markdown","8dfa66f8":"markdown","187b5a43":"markdown","d4a35f66":"markdown","5b054328":"markdown","674022af":"markdown","511cd279":"markdown","7339c5b7":"markdown","053cb218":"markdown"},"source":{"10587cb1":"!pip install -q efficientnet","a5605e8b":"import math, re, os\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nfrom tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.applications import DenseNet201\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nprint(\"Tensorflow version \" + tf.__version__)\nfrom tensorflow.keras import backend as K\nimport gc","91116aa1":"#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))","46a1cc6c":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Create strategy from tpu\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('flower-classification')\nGCS_DS_PATH2 = KaggleDatasets().get_gcs_path('tf-flower-photo-tfrec')\n# Configuration\nimg_size=224\nIMAGE_SIZE = [img_size, img_size]\nEPOCHS = 15#15\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","dd8313bf":"LR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","d02eedc9":"GCS_PATH_SELECT = { # available image sizes\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH_SELECT2 = { # available image sizes\n    192: GCS_DS_PATH2 + '\/oxford102\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH2 + '\/oxford102\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH2 + '\/oxford102\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH2 + '\/oxford102\/tfrecords-jpeg-512x512'\n}\nGCS_PATH_SELECT3 = { # available image sizes\n    192: GCS_DS_PATH2 + '\/imagenet\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH2 + '\/imagenet\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH2 + '\/imagenet\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH2 + '\/imagenet\/tfrecords-jpeg-512x512'\n}\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]\nGCS_PATH2 = GCS_PATH_SELECT2[IMAGE_SIZE[0]]\nGCS_PATH3 = GCS_PATH_SELECT3[IMAGE_SIZE[0]]\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nTRAINING_FILENAMES2 = tf.io.gfile.glob(GCS_PATH2 + '\/*.tfrec')\nTRAINING_FILENAMES3 = tf.io.gfile.glob(GCS_PATH3 + '\/*.tfrec')\nTRAINING_FILENAMES=TRAINING_FILENAMES+TRAINING_FILENAMES3#+TRAINING_FILENAMES3\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition\n\n# watch out for overfitting!\nSKIP_VALIDATION = True\nif SKIP_VALIDATION:\n    TRAINING_FILENAMES = TRAINING_FILENAMES + VALIDATION_FILENAMES","dbbac9dd":"print(len(TRAINING_FILENAMES))","22cbab6a":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","a47bfcb8":"def display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","761fa72e":"def random_blockout(img, sl=0.1, sh=0.2, rl=0.4):\n\n    h, w, c = img_size, img_size, 3\n    origin_area = tf.cast(h*w, tf.float32)\n\n    e_size_l = tf.cast(tf.round(tf.sqrt(origin_area * sl * rl)), tf.int32)\n    e_size_h = tf.cast(tf.round(tf.sqrt(origin_area * sh \/ rl)), tf.int32)\n\n    e_height_h = tf.minimum(e_size_h, h)\n    e_width_h = tf.minimum(e_size_h, w)\n\n    erase_height = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_height_h, dtype=tf.int32)\n    erase_width = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_width_h, dtype=tf.int32)\n\n    erase_area = tf.zeros(shape=[erase_height, erase_width, c])\n    erase_area = tf.cast(erase_area, tf.uint8)\n\n    pad_h = h - erase_height\n    pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n    pad_bottom = pad_h - pad_top\n\n    pad_w = w - erase_width\n    pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n    pad_right = pad_w - pad_left\n\n    erase_mask = tf.pad([erase_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n    erase_mask = tf.squeeze(erase_mask, axis=0)\n    erased_img = tf.multiply(tf.cast(img,tf.float32), tf.cast(erase_mask, tf.float32))\n\n    return tf.cast(erased_img, img.dtype)","3a16c648":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    #\u589e\u52a0\u968f\u673a\u4e0a\u4e0b\u53cd\u8f6c\n    image = tf.image.random_flip_left_right(image)#\u968f\u673a\u5de6\u53f3\u53cd\u8f6c\n    #random cut\n    image= random_blockout(image)\n#     #image_gen_train = ImageDataGenerator(\n#                                      rotation_range=15,#\u968f\u673a15\u5ea6\u65cb\u8f6c\n#                                      width_shift_range=0.1,#\u5bbd\u5ea6\u504f\u79fb\n#                                      height_shift_range=0.1,#\u9ad8\u5ea6\u504f\u79fb\n#                                      horizontal_flip=True,#\u6c34\u5e73\u7ffb\u8f6c\n#                                      )\n#     #image_gen_train.fit(image)\n#     #image = tf.image.random_flip_up_down(image)#\u968f\u673a\u4e0a\u4e0b\u53cd\u8f6c\n#     #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = (1 - SKIP_VALIDATION) * count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","d21e3ef8":"# Need this line so Google will recite some incantations\n# for Turing to magically load the model onto the TPU\nwith strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(img_size, img_size, 3),\n        weights='imagenet',\n        include_top=False\n    )\n\n    model = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ]) \n\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel.summary()","6b7569f0":"#scheduler = tf.keras.callbacks.ReduceLROnPlateau(patience=3, verbose=1)\n\nhistory = model.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS,\n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)\n\ntest_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\n\npreds1=model.predict(test_images_ds)\ndel model\ngc.collect()\n# K.clear_session()\n\ntf.tpu.experimental.initialize_tpu_system(tpu)","4bb2ae6b":"if not SKIP_VALIDATION:\n    display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\n    display_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","deb44640":"with strategy.scope():\n    Inet = InceptionResNetV2(\n        input_shape=(img_size, img_size, 3),\n        weights='imagenet',\n        include_top=False\n    )\n\n    model2 = tf.keras.Sequential([\n        Inet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel2.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel2.summary()","5c40ef19":"history2 = model2.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)\npreds2=model2.predict(test_images_ds)\ndel model2\ngc.collect()\ntf.tpu.experimental.initialize_tpu_system(tpu)","86e89890":"if not SKIP_VALIDATION:\n    display_training_curves(history2.history['loss'], history2.history['val_loss'], 'loss', 211)\n    display_training_curves(history2.history['sparse_categorical_accuracy'], history2.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","70dd8a1d":"with strategy.scope():\n    desnet=DenseNet201(\n        weights='imagenet',\n        include_top=False\n      \n    )\n    model3 = tf.keras.Sequential([\n        desnet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel3.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n","5331f23e":"history3 = model3.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)\npreds3=model3.predict(test_images_ds)\ndel model3\ngc.collect()\ntf.tpu.experimental.initialize_tpu_system(tpu)","ce01078c":"# Need this line so Google will recite some incantations\n# for Turing to magically load the model onto the TPU\nwith strategy.scope():\n    enet = efn.EfficientNetB6(\n        input_shape=(img_size, img_size, 3),\n        weights='imagenet',\n        include_top=False\n    )\n\n    model4 = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ]) \n\nmodel4.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)","190e7dd8":"history4 = model4.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)\npreds4=model4.predict(test_images_ds)\ndel model4\ngc.collect()\ntf.tpu.experimental.initialize_tpu_system(tpu)","9bf65077":"# test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\n# test_images_ds = test_ds.map(lambda image, idnum: image)\n# probabilities = best_alpha*model.predict(test_images_ds) + (best_beta)*model2.predict(test_images_ds)+(1-best_alpha-best_beta)*model3.predict(test_images_ds)\nprobabilities = 0.85*(0.44*preds1+0.56*preds3) + (0.15)*(0.5*preds2+0.5*preds4)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\nnp.savez_compressed('probs.npz', a=probabilities)","ca6b3fd2":"# Confusion matrix","dbaf1755":"# Configurations","5f9a8d4c":"# Custom LR schedule","53828938":"## Training 2:","cd48995e":"# About this kernel\n\nV1: This one is just a blend of two kernels:\n\nhttps:\/\/www.kaggle.com\/xhlulu\/flowers-tpu-concise-efficientnet-b7\n\nhttps:\/\/www.kaggle.com\/ratan123\/densenet201-flower-classification-with-tpus\n\nCore kernel: [starter kernel](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu). \n\nV2: added confusion matrix from starter kernel, epochs = 20\n\nV3: Vote up original kernels and this one if you like my work :)\n\nV4: Custom LR schedule + adding validation data to training data (https:\/\/www.kaggle.com\/msheriey\/flowers-on-tpu-ensemble-lr-schedule)\n\nV5: Skip validation = FALSE + finding best_alpha\n\nV7: Skip validation = TRUE + best_alpha = 0.44\n\nmy_V3:ENet B7 + IncepentionResnetV2 0.9558\n\nmy_V5:ENet B7 + IncepentionResnetV2 + Densenet201 Skip validation = FALSE + finding best_alpha,beta\n\nmy_V6:ENet B7 + IncepentionResnetV2 + Densenet201 Skip validation = True + best_alpha=0.37,best_beta = 0.26\n\nmy_V8:\u4e0d\u4e0a\u4e0b\u7ffb\u8f6c + \u65cb\u8f6c90 \n\nmy_V5: 15 epoch \u9632\u6b62\u8fc7\u62df\u5408\n","d06175c4":"# Training Model","3441c45a":"# Finding best alpha and Beta\nOur final model is just mix of two presented above. In the first commit it was arithmetic mean (alpha = 0.5). Note that using validation data as training will fit your model with accuracy equal 1.0.\nThus formula presented below of linear combination of models will work only with validation data:\n\nprob = alpha * (model) + beta * (model2) + (1-alpha-beta) * (model3)","8dfa66f8":"# Predictions","187b5a43":"## Load Model into TPU","d4a35f66":"# Helper Functions\n## Visualization","5b054328":"Unhide to see `CLASSES`:","674022af":"## Datasets Functions","511cd279":"# Efficentnet e6","7339c5b7":"## Training 3:","053cb218":"## Training"}}