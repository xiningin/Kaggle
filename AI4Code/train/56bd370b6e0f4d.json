{"cell_type":{"359798e9":"code","b78b77c1":"code","68e7bcaa":"code","986845a8":"code","2ed08e83":"code","37a6bde0":"code","133cffc3":"code","15ff49aa":"code","46a56e30":"code","c7cb4ebd":"code","07b76bf7":"code","c612b4f8":"code","efc55481":"code","9ec438eb":"code","9028ec77":"code","26b891a6":"code","f15d1215":"code","74acda12":"code","97799823":"code","903b5fe9":"code","a403598b":"code","9b49b077":"code","722238e1":"code","daedf867":"code","c5daa0a1":"code","6b0d31c2":"code","ad1511a3":"code","6ce73d08":"markdown","2cd55887":"markdown","fbccbd53":"markdown","6868cf88":"markdown","6e7b1db4":"markdown","867c12be":"markdown","ee1df635":"markdown","f3bbce70":"markdown","46e5632d":"markdown","f2d05dd0":"markdown","f33ddc7e":"markdown","eca40f35":"markdown","fa2ad954":"markdown"},"source":{"359798e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b78b77c1":"!pip install nltp","68e7bcaa":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom nltp import Preprocessor","986845a8":"df = pd.read_csv('..\/input\/fraud-email-dataset\/fraud_email_.csv')\ndf.head()","2ed08e83":"df.rename(columns={'Text':'Emails'}, inplace=True)","37a6bde0":"df.isnull().sum()","133cffc3":"df.dropna(inplace=True)","15ff49aa":"df['Class'].value_counts()","46a56e30":"df.shape","c7cb4ebd":"#VISUALIZING OUR TARGET VALUES\nsns.countplot(df['Class'])\nplt.title(\"Plot of Target Variable\")\nplt.show()","07b76bf7":"pre = Preprocessor(df['Emails']).text_cleaner()","c612b4f8":"pre[2]","efc55481":"words = pre\nplt.figure(figsize = (15,15))\nword_cloud  = WordCloud(max_words = 1000 , width = 1600 , height = 800,\n               collocations=False).generate(\" \".join(words))\nplt.imshow(word_cloud,interpolation='bilinear')\nplt.axis('off')\nplt.show()","9ec438eb":"X = pre\ny = df['Class']","9028ec77":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import BernoulliNB","26b891a6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=42)\nprint(f'Spliting Completed')\nprint(f'X Train: {len(X_train)} X Test: {len(X_test)} y Train: {len(y_train)} y Test: {len(y_test)}')","f15d1215":"#creating a function that can be used to train and test our models\ndef fit_predict(model):   \n    #CREATING A PIPELINE TO PROCESSING THE REVIEWS INTO O's AND 1's WITH Tf idf VECTORIZER\n    clf = Pipeline([('tfidf',TfidfVectorizer()),\n                   ('clf',model)])\n\n    #training model\n    clf.fit(X_train, y_train)\n    print(f'Fitting Model Completed.')\n    \n    #USING THE TEST DATA TO EVALUATED THE MODEL CREATED\n    Score = clf.score(X_test,y_test)\n    print(f'Accuracy: {Score*100}') \n    \n    return clf\n    ","74acda12":"class Metrics():\n    \n    def __init__(self, pred):\n        self.pred = pred\n        \n    def cm(self):\n        cm = confusion_matrix(y_test, self.pred)\n        labels = ['Not Spam','Spam']\n\n        f, ax = plt.subplots(figsize=(5,5))\n        sns.heatmap(cm,annot =True, linewidth=.6, linecolor=\"r\", fmt=\".0f\", ax = ax)\n\n        ax.set_xticklabels(labels)\n        ax.set_yticklabels(labels)\n        plt.show()\n\n    def report(self):\n        class_report = classification_report(y_test, self.pred)\n        print(class_report)\n  ","97799823":"LR_model = fit_predict(LogisticRegression())\n\nLR_pred = LR_model.predict(X_test)","903b5fe9":"Metrics(LR_pred).cm()\n\nMetrics(LR_pred).report()","a403598b":"SVC_model = fit_predict(LinearSVC())\n\nSVC_pred = SVC_model.predict(X_test)","9b49b077":"Metrics(SVC_pred).cm()\n\nMetrics(SVC_pred).report()","722238e1":"NB_model = fit_predict(BernoulliNB())\n\nNB_pred = NB_model.predict(X_test)","daedf867":"\n\nMetrics(NB_pred).cm()\n\nMetrics(NB_pred).report()","c5daa0a1":"import joblib\n\nfilename = 'model.joblib'\njoblib.dump(LR_model,open(filename,'wb'))","6b0d31c2":"with open('model.joblib','rb') as f:\n    model = joblib.load(f)","ad1511a3":"model","6ce73d08":"Instantiating the  Naive Bayes classifier, and testing the fitted model.","2cd55887":"Since different models will be used, it would be proper to modularize our codes by breaking them into functions","fbccbd53":"Getting the Confusion metric and classification report from the Metrics calss","6868cf88":"Using the nltp library simplfies the text cleaning process, as it cleans the emails passed to it by default(removes bad pattern and stop words, tokenization and lemmatization). We can also get the token form of the text passed to it by using .token().","6e7b1db4":"Getting the Confusion metric and classification report from the Metrics calss","867c12be":"Getting the Confusion metric and classification report from the Metrics calss","ee1df635":"<h3>Conclusion<\/h3>\n\nThe Linear SVC out perfroms the other classifiers for this example","f3bbce70":"Instantiating the Linear SVC model, and testing the fitted model","46e5632d":"Now we have the cleaned text from nltp, we can select our features and and split our data into training and testing set","f2d05dd0":"The nltp library simplfy data cleaning process by outputing the cleaned version of text passed with just one line of code.\n\nTo insatll simple pip install nltp on your terminal. You can get more inform in the documentation\nfrom the project github link: https:\/\/github.com\/izzyx6\/nltp","f33ddc7e":"The fraud email dataset used here is gotten from kaggle","eca40f35":"Instantiating the model, and testing the fitted Logistic Regression model","fa2ad954":"Also a class called \"Metrics\" is created to group the various perfromance metrics used for evaluation of the models"}}