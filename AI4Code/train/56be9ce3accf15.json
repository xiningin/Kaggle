{"cell_type":{"53b09d44":"code","69e1f57c":"code","533ade62":"code","40bf4283":"code","f6be991c":"code","399fc717":"code","cca31bed":"code","ad4046a2":"code","1e82b32f":"code","7219691f":"code","0de51113":"code","b432f1d6":"code","9b578077":"code","e0bf3340":"code","a9a30c65":"code","5b389d1e":"code","289ba54a":"code","bbb855a5":"code","3fb2400f":"markdown","f97fe405":"markdown","6526267a":"markdown","fbddf5ed":"markdown","673feb75":"markdown"},"source":{"53b09d44":"from keras.datasets import mnist\nfrom keras import models\nfrom keras import layers\nfrom keras.utils import to_categorical\n\nimport matplotlib.pyplot as plt","69e1f57c":"# trainX = train_image\n# trainy = train_labels\n# testX = test_images\n# testy = test_labels\n\n(train_image, train_labels), (test_images, test_labels) = mnist.load_data()","533ade62":"train_image.shape","40bf4283":"train_labels.shape","f6be991c":"len(train_labels)","399fc717":"test_images.shape","cca31bed":"test_labels.shape","ad4046a2":"len(test_labels)","1e82b32f":"for i in range(9):\n    plt.subplot( 330 + 1 + i )\n    plt.imshow(train_image[i], cmap=plt.get_cmap('gray'))\n\nplt.show()","7219691f":"network = models.Sequential()\n# network.add(layers.Dense(50, activation='relu', kernel_initializer='normal', input_shape=(28 * 28,)))\n# network.add(layers.BatchNormalization())\n# network.add(layers.Dense(50, activation='relu', kernel_initializer='normal'))\n# network.add(layers.BatchNormalization())\n# network.add(layers.Dense(50, activation='relu', kernel_initializer='normal'))\n# network.add(layers.BatchNormalization())\n# network.add(layers.Dense(10, activation='softmax',  kernel_initializer='normal', ))\nnetwork.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\nnetwork.add(layers.MaxPooling2D((2, 2)))\nnetwork.add(layers.Conv2D(64, (3,3), activation='relu'))\nnetwork.add(layers.MaxPooling2D(2,2))\nnetwork.add(layers.Conv2D(64, (3,3), activation='relu'))\nnetwork.add(layers.Flatten())\nnetwork.add(layers.Dense(64, activation='relu'))\nnetwork.add(layers.Dense(10, activation='softmax'))","0de51113":"network.summary()","b432f1d6":"train_image = train_image.reshape((60000, 28 , 28, 1))\ntrain_image = train_image.astype('float32') \/ 255\n\ntest_images = test_images.reshape((10000, 28 , 28, 1))\ntest_images = test_images.astype('float32') \/ 255","9b578077":"train_labels = to_categorical(train_labels)\ntest_labels = to_categorical(test_labels)","e0bf3340":"network.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","a9a30c65":"history = network.fit(train_image, train_labels, epochs=60)","5b389d1e":"def plot_loss(loss, acc):\n    plt.figure()\n    plt.plot(loss)\n    plt.plot(acc)\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.legend(['Traning Loss', 'Traning Accuracy'], loc='upper right')\n    plt.show()","289ba54a":"plot_loss(history.history['loss'], history.history['accuracy'])","bbb855a5":"test_loss, test_acc = network.evaluate(test_images, test_labels)\nprint('test_acc: ', test_acc)","3fb2400f":"The images are encoded as Numpy arrays, and the labels are an array of digits.","f97fe405":"### And here's the test data","6526267a":"### Lets look at the training data","fbddf5ed":"# The network architecture","673feb75":"###  Creates a plot of the first nine images in the training dataset."}}