{"cell_type":{"26098b5e":"code","257f9e85":"code","2d3c74f1":"code","3e83fd02":"code","73057657":"code","38ed4c0f":"code","fd53a4fe":"code","a5c6dff8":"code","da0c0efa":"code","4e03c6ae":"code","a3af7fb9":"code","7b571382":"code","b62faf7a":"code","c263afa2":"code","3ba0ecb3":"code","f45f82ca":"code","9d1821ac":"code","1b392795":"code","85a6a07e":"code","21659a96":"code","af421d17":"code","7a8ac71e":"code","74b086db":"code","590fd5ce":"code","648a9c24":"code","2cf0b712":"code","e7f7bbe1":"code","795781e1":"code","5eae68a3":"code","1cec17fd":"code","0e34f5dd":"code","ddb673b1":"code","c344ead5":"code","e7f8e8de":"code","2d5d55e2":"code","5f50a1cd":"code","19af18be":"code","4a4f0b8f":"code","da636b8a":"code","10f18db7":"code","69cd9adf":"code","9c6898b5":"code","70e139bc":"code","a31d4027":"code","00f4af19":"code","f418f019":"code","e8a65f14":"code","0be07578":"code","36f14528":"code","663b5a37":"code","8c7bab16":"code","37b8e0f3":"code","497e2776":"code","dd29ea03":"code","2357325c":"code","b2ea4058":"code","a9d403ae":"markdown","7b13a62c":"markdown","dce29a0a":"markdown","c46c2921":"markdown","9df23100":"markdown","5f08a184":"markdown","4c4274a3":"markdown","b5cd1fa5":"markdown","e086e2b6":"markdown","c19e108c":"markdown","aaeb9153":"markdown","fc72a3e8":"markdown","544c0f85":"markdown","c3a8c3e4":"markdown","6001e16f":"markdown","45e6ea68":"markdown","73be5406":"markdown","c258f7f3":"markdown","19b2e87f":"markdown","bca5279a":"markdown","d12dd925":"markdown","29d4f995":"markdown","1a3966cb":"markdown","c054d4d5":"markdown","98af09b1":"markdown","6e12ef8f":"markdown","bc058e13":"markdown","c309b556":"markdown","87ea5882":"markdown","cd12396d":"markdown","e612d920":"markdown","2516feb9":"markdown","898e2916":"markdown","195f56b1":"markdown","0d8020f5":"markdown","9fc2564f":"markdown","fc6a0b64":"markdown","4fd55341":"markdown","ecf3ae1a":"markdown","2040bad4":"markdown","da80c285":"markdown","9db1c0be":"markdown","f43331cb":"markdown","db820194":"markdown","6ce0ab2c":"markdown"},"source":{"26098b5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","257f9e85":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n\n\nfrom sklearn.ensemble import VotingClassifier,RandomForestClassifier,AdaBoostClassifier,BaggingClassifier,GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom prettytable import PrettyTable","2d3c74f1":"data_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('..\/input\/titanic\/test.csv')","3e83fd02":"data_train.head(10)","73057657":"data_train.tail()","38ed4c0f":"print('train size',data_train.shape)\nprint('test size',data_test.shape)","fd53a4fe":"print(data_train.info())\nprint('#####################################')\nprint(data_test.info())","a5c6dff8":"print(data_train.isnull().sum())\nprint('##############################')\nprint(data_test.isnull().sum())","da0c0efa":"plt.figure(figsize=(12,8))\nsns.heatmap(data_train.isnull())\nplt.show()","4e03c6ae":"print(round((data_train.isnull().sum()\/len(data_train))*100))\nprint('##############################')\nprint(round((data_test.isnull().sum()\/len(data_test))*100))\n","a3af7fb9":"plt.figure(figsize=(10,6))\nmpl.style.use('seaborn')\nsns.countplot(data_train.Embarked,hue=data_train.Survived,palette='rainbow')\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('Passengers boarded in various Ports & Survived',**title)\nplt.xlabel('Embarked',**axis_font)\nplt.ylabel('Count of People',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","7b571382":"plt.figure(figsize=(10,6))\nmpl.style.use('seaborn')\nsns.countplot(data_train.Pclass,palette='Set2',hue=data_train.Survived)\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('people in each class & survived',**title)\nplt.xlabel('Pclass',**axis_font)\nplt.ylabel('Count',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","b62faf7a":"sns.lineplot(y=data_train.Survived,x=data_train.SibSp,ci=0)\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('No.Of Siblings & survivality',**title)\nplt.xlabel('no.of Siblings',**axis_font)\nplt.ylabel('Survived',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","c263afa2":"sns.lineplot(y=data_train.Survived,x=data_train.Parch,ci=0)\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('No.Of Parents',**title)\nplt.xlabel('Parents',**axis_font)\nplt.ylabel('Survived',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","3ba0ecb3":"sns.countplot(x=data_train.Sex,hue=data_train.Survived)\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('comparing gender to survivality',**title)\nplt.xlabel('Gender',**axis_font)\nplt.ylabel('Count',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","f45f82ca":"sns.countplot(x=data_train.Embarked,hue=data_train.Survived,palette='Set2')\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('Pclass & Survivality',**title)\nplt.xlabel('Pclass',**axis_font)\nplt.ylabel('Count',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","9d1821ac":"sns.countplot(hue=data_train.Pclass,x=data_train.Embarked,palette='Accent')\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('Count people in all classes boarded in which port ',**title)\nplt.xlabel('Pclass',**axis_font)\nplt.ylabel('Count',**axis_font)\nplt.xticks(**tick_font)","1b392795":"plt.figure(figsize=(10,8))\nsns.boxenplot(x=data_train.Pclass,y=data_train.Age)\naxis_font = {'fontname':'Arial', 'size':'16'}\ntick_font = {'fontname':'Arial', 'size':'14'}\ntitle = {'fontname':'Arial', 'size':'18'}\nplt.title('Checking for Outliers in Age by Pclass',**title)\nplt.xlabel('Pclass',**axis_font)\nplt.ylabel('Age',**axis_font)\nplt.xticks(**tick_font)\nplt.show()","85a6a07e":"corr= data_train.corr()\nsns.heatmap(corr,annot=True)\nplt.show()","21659a96":"data_test.drop(['Cabin','Ticket','PassengerId'],axis=1,inplace=True)\ndata_train.drop(['Cabin','Ticket','PassengerId'],axis=1,inplace=True)","af421d17":"data_train.head()","7a8ac71e":"data_train.head()","74b086db":"print(data_test.shape)\nprint(data_train.shape)","590fd5ce":"data_train.Embarked.fillna('S',inplace=True)\ndata_train.Fare.fillna(53,inplace=True)","648a9c24":"data_test.Fare.fillna(53,inplace=True)","2cf0b712":"def name_extract(word):\n return word.split(',')[1].split('.')[0].strip() ","e7f7bbe1":"data_train['n_name'] = data_train['Name'].apply(name_extract) \ndata_test['n_name'] = data_test['Name'].apply(name_extract) \ndata_train.replace(['Dr','Rev','Col','Major','Mlle','Mme','Capt','Jonkheer','Lady','Don','Sir','the Countess','Ms'],'others',inplace=True) \ndata_test.replace(['Col','Rev','Dr','Ms','Dona'],'others',inplace=True) ","795781e1":"data_train.drop('Name',axis=1,inplace=True)  \ndata_test.drop('Name',axis=1,inplace=True) ","5eae68a3":"data_train.Age.fillna(28,inplace=True)\ndata_test.Age.fillna(27,inplace=True)","1cec17fd":"data_train['family'] = data_train['SibSp'] + data_train['Parch'] + 1\ndata_test['family'] = data_test['SibSp'] + data_test['Parch'] + 1","0e34f5dd":"def size_family(x):\n    if(x==1):\n        return(0)\n    elif(x>1) and (x<=4):\n        return(1)\n    elif(x>4):\n        return(2)","ddb673b1":"data_train['size'] = data_train['family'].apply(size_family)\ndata_test['size'] = data_test['family'].apply(size_family)","c344ead5":"def dependent(x):\n    if(x<=10):\n        return(0)\n    elif(x<10)and(x<=19):\n        return(1)\n    elif(x>19)and(x<50):\n        return(2)\n    else:\n        return(3) ","e7f8e8de":"data_train['dependent'] = data_train['Age'].apply(dependent)\ndata_test['dependent'] = data_test['Age'].apply(dependent)","2d5d55e2":"data_train.head()","5f50a1cd":"data_test.head()","19af18be":"train_d = pd.get_dummies(data_train)\ntest_d = pd.get_dummies(data_test)","4a4f0b8f":"train_d.head() ","da636b8a":"test_d.head()","10f18db7":"x=train_d.drop(['Survived'],axis=1)\ny=train_d[['Survived']]","69cd9adf":"sc=StandardScaler()\nx_sc = pd.DataFrame(sc.fit_transform(x),columns=x.columns) \ntest_sc =pd.DataFrame(sc.transform(test_d),columns=test_d.columns) ","9c6898b5":"x_sc.head() ","70e139bc":"ytest = pd.read_csv('..\/input\/scores\/scores.csv')","a31d4027":"rf = RandomForestClassifier(random_state=323,n_estimators=5,criterion='gini',max_depth=4,max_leaf_nodes=11)\nrf.fit(x_sc,y)\ny_rf_pre = rf.predict(test_sc)","00f4af19":"print(metrics.accuracy_score(ytest,y_rf_pre))\nprint(metrics.recall_score(ytest,y_rf_pre))\nprint(metrics.precision_score(ytest,y_rf_pre))\nprint(metrics.f1_score(ytest,y_rf_pre))\nprint(metrics.confusion_matrix(ytest,y_rf_pre))\nprint(metrics.cohen_kappa_score(ytest,y_rf_pre))","f418f019":"lr = LogisticRegression()\nlr.fit(x_sc,y)\ny_lr_pre = lr.predict(test_sc)\nprint(metrics.accuracy_score(ytest,y_lr_pre))\nprint(metrics.recall_score(ytest,y_lr_pre))\nprint(metrics.precision_score(ytest,y_lr_pre))\nprint(metrics.f1_score(ytest,y_lr_pre))\nprint(metrics.confusion_matrix(ytest,y_lr_pre))\nprint(metrics.cohen_kappa_score(ytest,y_lr_pre))","e8a65f14":"lr = LogisticRegression(random_state=1,penalty='l1')\nrf = RandomForestClassifier(random_state=323,n_estimators=5,criterion='gini',max_depth=4,max_leaf_nodes=11)\nada = AdaBoostClassifier(random_state=21)\nbag = BaggingClassifier(random_state=2)\ngb = GradientBoostingClassifier(random_state=8)\n","0be07578":"vc = VotingClassifier(estimators=[('lr',lr),('rf',rf),('ada',ada),('bag',bag),('gb',gb)],voting='hard')\nvc=vc.fit(x_sc,y)\ny_vc_pre=vc.predict(test_sc)","36f14528":"print('accuracy ',metrics.accuracy_score(ytest,y_vc_pre))\nprint('precision',metrics.precision_score(ytest,y_vc_pre))\nprint('recall',metrics.recall_score(ytest,y_vc_pre))\nprint('F1',metrics.f1_score(ytest,y_vc_pre))\nprint('roc_auc_score',metrics.roc_auc_score(ytest,y_vc_pre))\nprint('cohen_kappa',metrics.cohen_kappa_score(ytest,y_vc_pre))\nprint(metrics.classification_report(ytest,y_vc_pre))\nprint(metrics.confusion_matrix(ytest,y_vc_pre))","663b5a37":"test_pred = pd.DataFrame(y_rf_pre, columns= ['Survived'])","8c7bab16":"z = pd.read_csv('..\/input\/titanic\/test.csv')","37b8e0f3":"final_test = pd.concat([z, test_pred], axis=1, join='inner')","497e2776":"df= final_test[['PassengerId' ,'Survived']]","dd29ea03":"df.to_csv('Predicted_rf_k.csv',index=False)","2357325c":"t = PrettyTable(['Model', 'Accuracy', 'Recall','Precision','F1','cohen_kappa'])\nt.add_row(['Random Forest',94.4,95.3,90.6,92.6,88.2])\nt.add_row(['Logistic Regression',92.5,94.0,86.6,90.2,84.2])\nt.add_row(['Voting Classifier',93.7,88.8,94.7,91.7,86.7])","b2ea4058":"\nprint(t)","a9d403ae":"### column 3 - creating column family size from variable family","7b13a62c":"# Number of people in each class & survived","dce29a0a":"    Survival (0 = No; 1 = Yes)\n\n### The people survived is high in C = Cherbourg . when we see Q = Queenstown chance of survivality is around 70% and the least about 50% people survived who ported in S = Southampton.","c46c2921":"# Starte with EDA","9df23100":"# Rate of survivality to number of parents","5f08a184":"# comparing gender to survivality","4c4274a3":"##  Suggestions are highly Encouraged","b5cd1fa5":"### column 4 - creating column ages like teen , young, adult , old from variable Age","e086e2b6":"# Boxplot of Pclass to Age","c19e108c":"# Droping train & test ( cabin , ticket , PassengerId )","aaeb9153":"### Column 2 - creating column family  from siblings & parents Variables","fc72a3e8":"for better accuracy dont drop siblings & parents columns as you are giving the model more information . More information means More accurate prediction of outcome","544c0f85":"### Filling missing values in Embarked & Fare","c3a8c3e4":"### This is obvious that 1st class people are more survived when compared to 3rd class and 2nd class survived is 80%","6001e16f":"### Females survivied more percent compared to males","45e6ea68":"Note : If you tune the parameters for voting classifier you will get highest accuracy. I made a basic Model","73be5406":"    0 - single\n    1 - medium\n    2 - large","c258f7f3":"# Count of Passengers boarded in various Ports & Survived","19b2e87f":"# Standardising the data","bca5279a":"# Creating dummy variables","d12dd925":"# Importing Library's","29d4f995":"# Checking size of data","1a3966cb":"## Viewing through Data","c054d4d5":"# Null values represented in graphical view","98af09b1":"# Info","6e12ef8f":"# Predicting with VotingClassifier ","bc058e13":"### while having 4 & 6 NumberofParents\/Children Aboard there is least survivality","c309b556":"### When there are less siblings there is high chance of survivality ","87ea5882":"Drop the orginal variable Name","cd12396d":"# visualization of survivality depend on Pclass","e612d920":"## Data looks there are missing values and more specific variables .","2516feb9":"# Spliting x & y","898e2916":"# Feature Engineering","195f56b1":"# Checking null values","0d8020f5":"### From above result shows  Age--20% & Cabin--77% having null values in Train data.\n### in test data having Age--21% & Cabin--78% null values.\n\n### Now we have the proof to drop variable Cabin .\n ### Age we will replace them with Mean or Median Later\n    ","9fc2564f":"# Rate of survivality to number of siblings","fc6a0b64":"### filling Null in Age values with Median ","4fd55341":"# Boarding of all Pclass in various Ports","ecf3ae1a":"### Column 1 - creating column  n_name from name variable","2040bad4":"# checking null values in units percentage ","da80c285":"    Pclass -> Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n    survival -> Survival (0 = No; 1 = Yes)\n    name -> Name\n    sex -> Sex\n    age -> Age\n    sibsp -> Number of Siblings\/Spouses Aboard\n    parch -> Number of Parents\/Children Aboard\n    ticket -> Ticket Number\n    fare -> Passenger Fare (British pound)\n    cabin -> Cabin\n    embarked -> Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n    \n    \n    \n  ","9db1c0be":"# Importing Datasets","f43331cb":"# Predicting with RandomForestClassifier","db820194":"# Predicting with LogisticRegression","6ce0ab2c":"# Thank You"}}