{"cell_type":{"2ef15a77":"code","5fe5e3a5":"code","5f69c914":"code","c53f17c4":"code","c46612b5":"code","a366e41f":"code","028ecef5":"code","a5b6471b":"code","b4234642":"code","8c5b98b7":"code","5e94f370":"code","cf739f87":"code","d596a482":"code","e2b288d8":"code","fbf83e92":"code","07534286":"code","d76589ad":"code","99c90a6f":"code","33fa7471":"code","b8bf8409":"code","b7d11d32":"code","4cc9f5a7":"code","e39c0122":"code","8b48b41f":"code","87f6318f":"code","057fe0dd":"code","7d310e8f":"code","e2f7b3b2":"code","ef82ae1d":"code","ff56de96":"code","aa0008f9":"code","30a733c0":"code","b0d7afce":"code","89ed9679":"code","fd5df5d2":"code","01dc570b":"code","1923b660":"code","2699939a":"code","fa9e1607":"code","359ff72d":"code","e6cfd8a7":"code","2c6634f2":"code","3f44daea":"markdown","6d666d54":"markdown","eb791c4a":"markdown","25c740bb":"markdown","647c16df":"markdown","29dc468d":"markdown"},"source":{"2ef15a77":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport os\nimport tensorflow as tf","5fe5e3a5":"df=pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/train.csv')","5f69c914":"df","c53f17c4":"df.isna().sum().sum()","c46612b5":"df.info()","a366e41f":"df.describe()","028ecef5":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df[1:].corr(),annot=True)","a5b6471b":"import seaborn as sns\nsns.barplot(df['Subject Focus'],df['Pawpularity'])","b4234642":"sns.histplot(df['Pawpularity'])","8c5b98b7":"sns.histplot(df['Subject Focus'])","5e94f370":"np.unique(df['Eyes'])","cf739f87":"sns.barplot(df['Human'],df['Pawpularity'])","d596a482":"sns.jointplot(df['Human'],df['Pawpularity'])","e2b288d8":"df2=df['Pawpularity']\ndf1=df.drop('Pawpularity',axis=1)","fbf83e92":"from sklearn.model_selection import train_test_split","07534286":"train_x,test_x,train_y,test_y=train_test_split(df1,df2,test_size=0.3)","d76589ad":"#ddf=test_x['Id']","99c90a6f":"#train_x=train_x.drop('Id',axis=1)\n#test_x=test_x.drop('Id',axis=1)","33fa7471":"print(train_x.shape[0],test_x.shape[0])","b8bf8409":"from sklearn.linear_model import LinearRegression","b7d11d32":"train_x.iloc[:,1:]","4cc9f5a7":"ddff=pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/test.csv')","e39c0122":"ddff","8b48b41f":"from sklearn.preprocessing import PolynomialFeatures","87f6318f":"test_x.iloc[:,1:]","057fe0dd":"from sklearn.metrics import mean_squared_error\nlin=LinearRegression()\nreg=PolynomialFeatures(degree = 1)\ndd=reg.fit_transform(train_x.iloc[:,1:])\nlin.fit(dd, train_y)\ndd1=reg.fit_transform(test_x.iloc[:,1:])\ndf_y=lin.predict(dd1)\nddf1=reg.fit_transform(ddff.iloc[:,1:])\nddff['Pawpularity']=lin.predict(ddf1)\nprint(np.sqrt(mean_squared_error(df_y, test_y)))","7d310e8f":"ddff[['Id','Pawpularity']].to_csv('submission.csv',index=False)","e2f7b3b2":"from IPython.display import FileLink\nFileLink(r'submission.csv')","ef82ae1d":"dd.shape","ff56de96":"print(df_y.shape)\nprint(test_x.iloc[:,1:].shape)","aa0008f9":"test_y","30a733c0":"train_folder='..\/input\/petfinder-pawpularity-score\/train'\ntest_folder='..\/input\/petfinder-pawpularity-score\/test'","b0d7afce":"d_tr=pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\nd_ts=pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","89ed9679":"autotune = tf.data.experimental.AUTOTUNE\nimg_size=299\nbatch_size=8","fd5df5d2":"y = 'Pawpularity'\ndef id_to_path(img_id,dir):\n    return os.path.join(dir, f'{img_id}.jpg')\n\ndef get_image(path):\n    image = tf.image.decode_jpeg(tf.io.read_file(path), channels=3)\n    image = tf.cast(tf.image.resize_with_pad(image, img_size, img_size), dtype=tf.float32)\n    return tf.keras.applications.inception_v3.preprocess_input(image)\n\ndef process_dataset(path, label):\n    return get_image(path), label\n\ndef get_dataset(x, y=None):\n    if y is not None:\n        ds = tf.data.Dataset.from_tensor_slices((x, y))\n        return ds.map(process_dataset, num_parallel_calls=autotune) \\\n            .batch(batch_size).prefetch(buffer_size=autotune)\n    else:\n        ds = tf.data.Dataset.from_tensor_slices(x)\n        return ds.map(get_image, num_parallel_calls=autotune) \\\n            .batch(batch_size).prefetch(buffer_size=autotune)\n\nd_tr['path'] = d_tr['Id'].apply(lambda x: id_to_path(x, train_folder))\nd_ts['path'] = d_ts['Id'].apply(lambda x: id_to_path(x, test_folder))\n\ntrain_subset, valid_subset = train_test_split(\n    d_tr[['path', y]],\n    test_size=0.3, shuffle=True, random_state=5\n)    ","01dc570b":"train_data = get_dataset(x=train_subset['path'], y=train_subset[y]\/100.).shuffle(1000)\nvalid_data = get_dataset(x=valid_subset['path'], y=valid_subset[y]\/100.).shuffle(1000)\ntest_data = get_dataset(x=d_ts['path'])","1923b660":"EfficientNet_path='..\/input\/keras-applications-models\/Xception.h5'","2699939a":"# Load pre-trained model: EfficientNet\n# This needs an input shape of (224,224,3)\nmodel = tf.keras.models.load_model(EfficientNet_path)\nmodel.trainable=False","fa9e1607":"from keras.models import Model\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.layers import BatchNormalization,Dropout\nflat1 = Flatten()(model.layers[-1].output)\nx = Dense(512,activation='relu',kernel_initializer='he_normal',kernel_regularizer=l2())(flat1)\nx = Dense(512,activation='relu',kernel_initializer='he_normal',kernel_regularizer=l2())(x)\noutput = Dense(1,activation='elu')(x)\n# define new model\nmodel = Model(inputs=model.inputs, outputs=output)\ndef rmse(y_true, y_pred):\n    return K.sqrt(K.mean(K.square(y_true*100 - y_pred*100)))\nopt = tf.keras.optimizers.Adam(lr=0.001)\nmodel.compile(optimizer=opt,\n              loss=rmse,\n              metrics=[rmse])\nhist = model.fit(train_data,validation_data=valid_data, epochs=5)","359ff72d":"model.evaluate(valid_data)","e6cfd8a7":"d_ts[y]=model.predict(test_data)*100","2c6634f2":"d_ts[['Id', y]].to_csv('submission.csv', index=False)\nd_ts[['Id', y]].head()","3f44daea":"# Pretrained Models :  https:\/\/www.kaggle.com\/ekaterinadranitsyna\/keras-applications-models","6d666d54":"## Check for Null Values","eb791c4a":"### No Null Values","25c740bb":"# Data Visualization and EDA","647c16df":"## Most Animals Pawpularity score is in between 20 to 50","29dc468d":"# Data Preprocessing"}}