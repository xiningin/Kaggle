{"cell_type":{"b37e6834":"code","b97b7ccd":"code","738959e4":"code","39a30856":"code","b3308a12":"code","eccd6dae":"code","89dcdc9b":"code","bff58dde":"code","ad23d590":"code","3f0f1e48":"code","e20c7149":"code","e8fe50aa":"code","b641760e":"code","636c9080":"code","d47bc78a":"code","920cf758":"code","7789a664":"code","c2f95cdd":"code","2be1374b":"code","de722c3c":"code","92db094f":"code","646a835a":"code","d7c190d1":"code","55e8da6b":"code","e332ca2c":"code","488126e8":"code","019ee85e":"code","9ce8b3e2":"code","3891be51":"code","f0b2ff96":"code","160aea81":"code","066439f1":"code","998fcdc5":"code","7228d811":"code","330a00fc":"code","de48c0f1":"code","e881b64c":"code","29d3d08c":"code","94c6d547":"code","146c4f23":"code","4da92eb0":"markdown","1f1c853f":"markdown","94ed6722":"markdown","b814a747":"markdown","f7102b0d":"markdown","b16d30eb":"markdown","6e4c770c":"markdown","b6c8e99f":"markdown","644ed8e8":"markdown","09002c47":"markdown","a9fdb7ee":"markdown","7bea779c":"markdown","632be78a":"markdown","945f8db4":"markdown","7a6a857a":"markdown","33cb19f4":"markdown","4a63fabd":"markdown","97e915f0":"markdown","63cc6dd2":"markdown","5eccd129":"markdown","b3d8f3c0":"markdown","35bcaa98":"markdown","ce2912ee":"markdown","7086be81":"markdown","4a0134ca":"markdown","4f96a2d2":"markdown","ce9c04d8":"markdown","95706ae7":"markdown","e323238e":"markdown","a03c29ab":"markdown","4e3b5d98":"markdown","6e82bcfd":"markdown","cfe7fe90":"markdown"},"source":{"b37e6834":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n#Modelling\n\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n#importing all the required ML packages\nfrom sklearn.linear_model import LogisticRegression #logistic regression\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b97b7ccd":"ByPlatform = pd.read_csv('..\/input\/By-Platform.csv')\nByCountry = pd.read_csv('..\/input\/By-Country.csv')\nByAge = pd.read_csv('..\/input\/By-Age.csv')","738959e4":"ByPlatform.head(2)","39a30856":"ByCountry.head(5)","b3308a12":"ByAge.head(5)","eccd6dae":"ByPlatform.shape","89dcdc9b":"ByPlatform.columns","bff58dde":"ByPlatform.describe()","ad23d590":"ByPlatform.columns","3f0f1e48":"ByPlatform = ByPlatform.rename(columns= {'Reporting Starts':'ReportingStarts', 'Reporting Ends':'ReportingEnds', 'Ad Set':'AdSet', \n                                         'Result Rate':'ResultRate', 'Result Indicator':'ResultIndicator',\n                                         'Cost per Results':'CostPerResults', 'Budget Type':'BudgetType',\n                                         'Link Clicks':'LinkClicks', 'CPC (Link) (EUR)':'CPC_Link', 'CPC (All) (EUR)':'CPC_All',\n                                         'Cost per 1,000 People Reached (EUR)':'CostPerThousandPeopleReached', 'CTR (All)':'CTR_All',\n                                         'Amount Spent Today (EUR)':'AmountSpentToday_EUR',\n                                         'Add to Cart (Facebook Pixel)':'AddtoCart_FPix',\n                                         'Cost per Add To Cart (Facebook Pixel) (EUR)':'CostPerAddToCart_FPix',\n                                         'Initiate Checkout (Facebook Pixel)':'InitiateCheckout_FPix',\n                                         'Cost per Initiate Checkout (Facebook Pixel) (EUR)':'CostPerInitiateCheckout_FPix',\n                                         'Purchase (Facebook Pixel)':'Purchase_FPix', \n                                         'Cost per Purchase (Facebook Pixel) (EUR)':'CostPerPurchase_FPix',\n                                         'Amount Spent (EUR)':'AmountSpent_EUR', \n                                         'Purchase Conversion Value (Facebook Pixel)':'PurchaseConversionValue_FPix'})\nByPlatform.info()","e20c7149":"f,ax = plt.subplots(figsize=(17, 17))\nsns.heatmap(ByPlatform.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax ,cmap=\"Blues\")\nplt.show()","e8fe50aa":"plt.rcParams['figure.figsize']=25,12  #to adjust the plot size\n\ndf = ByPlatform.drop(['ReportingStarts', 'ReportingEnds', 'AdSet', \n                      'Delivery','CostPerInitiateCheckout_FPix','BudgetType',\n                      'ResultIndicator', 'Ends', 'Starts', 'CPC_Link', 'CPC_All', \n                      'CostPerThousandPeopleReached', 'CostPerAddToCart_FPix', \n                      'CostPerPurchase_FPix', 'Frequency','CTR_All', 'AmountSpentToday_EUR',\n                     'ResultRate', 'CostPerResults','Reach', 'Purchase_FPix'], axis=1)\nsns.boxplot(data=df) \nplt.ylim(0, 800)\n\nplt.show()","b641760e":"#prepare data frame\ndfcut = df.iloc[:, :500]\nNdf = dfcut.iloc[:1000,:]\n\n# Creating trace1\ntrace1 = go.Scatter(y = Ndf.AddtoCart_FPix,\n                    x = Ndf.index,\n                    mode = \"lines+markers\",\n                    name = \"AddtoCart\",\n                    marker = dict(color = 'blue'))\n# Creating trace2\ntrace2 = go.Scatter(y = Ndf.InitiateCheckout_FPix,\n                    x = Ndf.index,\n                    mode = \"lines\",\n                    name = \"InitiateCheckout\",\n                    marker = dict(color = 'red'))\n\ndataS = [trace1, trace2]\nlayout = dict(title = 'AddtoCart_FPix and InitiateCheckout_FPix of the Ad Sets',\n              xaxis= dict(title= 'Index',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = dataS, layout = None)\niplot(fig)","636c9080":"# create trace 1 that is 3d scatter\ndf2 = ByPlatform.drop(['ReportingStarts', 'ReportingEnds', 'AdSet', \n                      'Delivery','CostPerInitiateCheckout_FPix','BudgetType',\n                      'ResultIndicator', 'Ends', 'Starts', 'CPC_Link', 'CPC_All', \n                      'CostPerThousandPeopleReached', 'CostPerAddToCart_FPix', \n                      'CostPerPurchase_FPix', 'Frequency','CTR_All', 'AmountSpentToday_EUR',\n                     'ResultRate', 'CostPerResults'], axis=1)\ndf3 = df2.iloc[:, :500]\n\n#prepare data frame\nNdf2 = df3.iloc[:1800,:]\n\ntrace1 = go.Scatter3d(\n                    y = Ndf2.Reach,\n                    x = Ndf2.Purchase_FPix,\n                    z = Ndf2.index,\n                    mode = \"markers\",\n                    name = \"Reach\",\n                    marker=dict(size=10,color='rgb(255,0,0)'))\n\nData = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=Data, layout=layout)\n\niplot(fig)","d47bc78a":"#Plotting Link Clicks against Cost per Click\n#It is expected to get smaller cost per clich while number of clicks increases. \n\nfig,axes = plt.subplots(1,1,figsize=(8,6),sharey=True)\naxes.scatter(ByPlatform.CPC_Link.values,ByPlatform.LinkClicks.values)\naxes.set_xlabel(\"CPC_Link\")\naxes.set_ylabel(\"LinkClicks\")\nplt.xlim(0, 2)\nplt.show()","920cf758":"fig, axarr = plt.subplots(2, 2, figsize=(10, 10))\n#AmountSpentToday\nByPlatform.groupby([\"Platform\"])[\"AmountSpentToday_EUR\"].count().sort_values().plot(kind=\"barh\",\ntitle=\"Amount Spend Today per Platform\", ax=axarr[0][0], color=sns.color_palette(\"BrBG\", 7));\n#Reach\nByPlatform.groupby([\"Platform\"])[\"Reach\"].count().sort_values().plot(kind=\"barh\",\ntitle=\"Reach\", ax=axarr[0][1],color=sns.color_palette(\"hls\", 8) );\n#Purchase\nByPlatform.groupby([\"Platform\"])[\"Purchase_FPix\"].count().sort_values().plot(kind=\"barh\",\ntitle=\"Purchase per Platform\",ax=axarr[1][0],color=sns.color_palette(\"Set2\"));\n#Link Clicked\nByPlatform.groupby([\"Platform\"])[\"LinkClicks\"].count().sort_values().plot(kind=\"barh\",\ntitle=\"Link Clicks\",ax=axarr[1][1],color=sns.color_palette(\"BuGn_r\"));\n","7789a664":"plt.subplots(figsize = (10,5))\nplt.title('Frequency \/ Platform')\nsns.violinplot(x='Platform',data=ByPlatform, y = \"Frequency\")\nplt.show()","c2f95cdd":"#let's compare the Reach and InitiateCheckout stats by taking platforms into consideration.\n\nsns.lmplot(x='Reach', y='InitiateCheckout_FPix', data=df2, height=4, aspect=2, fit_reg=True, \n           hue='Platform')\nplt.show()","2be1374b":"#check the missing columns\nByPlatform.isnull().values.any()","de722c3c":"#Let's see if there is columns with at least 20% missing values and delete them if so. \nthreshold = 0.2\n\nByPlatform = ByPlatform.drop(ByPlatform.std()[ByPlatform.std() < threshold].index.values, axis=1)\n\nByPlatform.shape","92db094f":"ByPlatformVars = ByPlatform.columns\ndata_types = {Var: ByPlatform[Var].dtype for Var in ByPlatformVars}\n\nfor Var in ByPlatformVars:\n    if data_types[Var] == int:\n        x = ByPlatform[Var].astype(float)\n        ByPlatform.loc[:, Var] = x\n        data_types[Var] = x.dtype\n    elif data_types[Var] != float:\n        x = ByPlatform[Var].astype('category')\n        ByPlatform.loc[:, Var] = x\n        data_types[Var] = x.dtype\n\ndata_types","646a835a":"float_ByPlatformVars = [Var for Var in ByPlatformVars\n                     if data_types[Var] == float]\nfloat_ByPlatformVars","d7c190d1":"float_x_means = ByPlatform.mean()\n\nfor Var in float_ByPlatformVars:\n    x = ByPlatform[Var]\n    isThereMissing = x.isnull()\n    if isThereMissing.sum() > 0:\n        ByPlatform.loc[isThereMissing.tolist(), Var] = float_x_means[Var]   ","55e8da6b":"ByPlatform[float_ByPlatformVars].isnull().sum()","e332ca2c":"np.allclose(ByPlatform.mean(), float_x_means)","488126e8":"#Let's see the number of categories of each categorical feature:\n\nByPlatformVars = ByPlatform.columns\n\ncategorical_ByPlatformVars = [Var for Var in ByPlatformVars\n                           if data_types[Var] != float]\n\ncategorical_levels = ByPlatform[categorical_ByPlatformVars].apply(lambda col: len(col.cat.categories))\n\ncategorical_levels","019ee85e":"collapsed_categories = {}\nremoved_categorical_ByPlatformVars = set()\n\nfor Vars in categorical_ByPlatformVars:\n    \n    isTheremissing_value = ByPlatform[Vars].isnull()\n    if isTheremissing_value.sum() > 0:\n        ByPlatform[Vars].cat.add_categories('unknown', inplace=True)\n        ByPlatform.loc[isTheremissing_value.tolist(), Vars] = 'unknown'","9ce8b3e2":"ByPlatform[categorical_ByPlatformVars].isnull().sum()","3891be51":"ByPlatform.info()","f0b2ff96":"ByPlatform.columns","160aea81":"#Let's build a model with only a some featuresthat are int type\n#selecting multiple features\n#Purchase_FPix is prediction Target = y\nByPlatformData_features = ['Reach', 'Results', \n                           'CTR_All', 'AddtoCart_FPix','AmountSpent_EUR']\nDatatoModel = ByPlatform[ByPlatformData_features].reindex()\nDatatoModel.head()","066439f1":"from sklearn.tree import DecisionTreeRegressor\ny = ByPlatform['Purchase_FPix']  #prediction target\n# Define model. Specify a number for random_state to ensure same results each run\nModelData = DecisionTreeRegressor(random_state=1)\n\n# Fit model\nModelData.fit(DatatoModel, y) ","998fcdc5":"print(\"Making predictions for the following 5 reports:\")\nprint(DatatoModel.head())\nprint(\"The predictions are\")\nprint(ModelData.predict(DatatoModel.head()))","7228d811":"df.groupby('Platform').apply(np.mean)","330a00fc":"df2.columns","de48c0f1":"df2['Platform'].value_counts()","e881b64c":"sns.countplot(x='Platform', data = df2, palette = 'hls')\nplt.show()","29d3d08c":"NewData = ByPlatform.copy()\nNewData['Platform'].replace(['Facebook','Instagram','Audience Network'],[1,0,-1],inplace=True)\nNewData['Platform'].tail(10)","94c6d547":"#we'll build a model with the data that categorical features droped.\n#We select multiple features\n\nfeatures = ['Reach', 'Results','AddtoCart_FPix','AmountSpent_EUR','Platform']\nLegModData = NewData[features].reindex()\nLegModData.head()","146c4f23":"#LegModData['Platform'] = LegModData_target\n\ndecisiontree = DecisionTreeClassifier() # defining  new object\ntrain = LegModData[50:]   # seperated the first 50 rows are as test rest as train dataset\ntest = LegModData[:50]\n\nx_train = LegModData.drop('Platform', axis=1) # x_train as Platform feature droped\ny_train = LegModData['Platform']  # y_train is the Platform value\n\nx_test = test.drop('Platform', axis=1) # same thing for test dataset\ny_test = test['Platform']\n\ndecisiontree.fit(x_train, y_train) # model decisiontree fit to x_train, y_train values\n\npred = decisiontree.predict(x_test) # make prediction to the model about x_test and keep in pred \n\nprint(\"accuracy:\", accuracy_score(y_test, pred)) #to test the accuracy of the model","4da92eb0":"------------------------------\n> It is a good way to start with a heatmap to see what sort of relationships pop out. The purpose is just to get a quick overview of the data.","1f1c853f":"Let's create a new categorical feature named  \"Unknown\" for imputing the missing values for categorical variables. That will be a good enough practice, since we are not losing any samples and not making any assumptions on features distribution.","94ed6722":"**Understanding of Data Sets and the features itself**\n> We have a data of an AdSets Analytics reports set that reporting starts from 2016-07-05 and ends at 2017-03-23 . There are three different sheets are included. \n> Sheets are customised slightly different.\n> First one is including the reports by platforms (others are reports by country and age)\n> Let's talk about the first data set (Reports By Platform) and its features in details. Other data sets will be easier to understand after understanding what this very first data set offers us to see.\n> \n> Firts of all lets understand where these data sets are coming from.\n> \n> About ads reporting,\n> Ads reporting allows you to create, customise, export, share and schedule reports on your ad performance based on a set of parameters that you choose. You can get the information you need to manage your campaigns and create recurring emailed reports.\n> These Reports are created in Ads Manager in Ads Reporting and you can save your reports externally as an .xlsx or .csv file (here I converted the datasets into CSV format) with the metrics you wants to select for your report (e.g., reach, delivery, etc. in these first dataset we have 28 metrics\/features we will see and analyse each closely. )\n> \n> What is these reports are used for?\n> Ads Manager shows you how your advertising is helping you achieve your business goals across Facebook, Instagram and Audience Network to analyse a campaign results and learn more about audience, campaign's reach etc. It used to make more informed decisions in building campaigns and ultimately improve the results.\n> \n> What we do here in this analysis?\n> \n> We have three report sets and will extract as much as information and insights we can get from these data sets.\n> \n> LET'S START....\n","b814a747":"> Let's see the distributions of values among different platforms in one figure.\nPlatform: Categories = 'Audience Network',  'Facebook',  'Instagram'","f7102b0d":"As Facebook platform gets more investment in the Budget, it brings more clicks, reach and purchase accordingly. \nSecond platform is Instagram and Audience Network comes as the last platform in performance base. ","b16d30eb":"**DATA CLEANING** is needed as there are many missed values of the features. ","6e4c770c":"---------------------------------\n**We now have a model fit that we can use to make predictions.**","b6c8e99f":"-----------------\n\n**CONCLUTION**\n","644ed8e8":"We need to reduce the categorical features for a better modelling.","09002c47":"Let's go in details....","a9fdb7ee":"**FILLING MISSING DATA ACCORDINGLY\/PROPERLY **\n\nFirst of all, let's check the numerical values.","7bea779c":"**LET'S TRY ANOTHER MODEL**","632be78a":"As we see from this interactive 3D plot, the number of purchase is too small (or zero) according to the number of people reached. Thus, the campaign has to reach an enormous number of people to increase sells to the desired or aimed point. ","945f8db4":"**Let's select data for modeling**","7a6a857a":">Here also the close relation between Amount Spent & Add to Cart is most visiable outcome. \n>\n>It wouldn't be wrong to say that initiates checkout is quite less when it compare with Add to Cart valu.\n>\n>**Let's use an interactive plot to see this relation in each report.**\n>","33cb19f4":">Let's convert data types, int to float and object to category.\n>","4a63fabd":"We still need to fill the empty columns to get more accuracy in moelling the data later. ","97e915f0":"**The documenation describes the columns in the data as follows:**\nThe self-explanatory ones haven't been explained.\n> \n> 3) Ad Set :  *The name of the ad set that you're viewing in reporting. An ad set is a group of ads that share the same budget, schedule, delivery optimisation and targeting.*\n> \n> 4) Platform :  *Facebook Ad Placement. You can choose the places where your ads are shown*\n> \n> 5) Delivery :  *The current status of your campaign, ad set or ad delivery.*\n> \n> 6) Result Rate :  *The percentage of results you received out of all of the views of your adverts. This metric is calculated as the results you received divided by the number of impressions.*\n> \n> 7) Result Indicator :   \n> \n> 8) Results :  *The number of times that your ad achieved an outcome, based on the objective and settings you selected.*\n> \n> 9) Reach :  *The number of people who saw your adverts at least once. Reach is different to impressions, which may include multiple views of your adverts by the same people. This metric is estimated. *\n> \n> 10) Frequency :  * The average number of times that each person saw your ad. Frequency is calculated as the number of impressions divided by the reach. It is a related metrics with Reach *\n> \n> 11) Cost per Results :  *The average cost per result from your adverts. The metric is calculated as the total amount spent divided by the number of results.*\n> \n> 14) Ends : \n> \n> 15) Starts : *\n> \n> 16) Link Clicks:  *Number of clicks on to the link for that ad.*\n> \n> 17) CPC (Link) (EUR) :  *Self-explanatory this one: how much (on average) did each click cost. (Link)*\n> \n> 20) CTR (All):  *This is the percentage of how many of our impressions became clicks. A high CTR is often seen as a sign of good creative being presented to a relevant audience.  2% would be a reasonable benchmark.*\n> \n> 22) Add to Cart (Facebook Pixel):  *The number of Add to Basket events attributed to the used ads, based on information received from one or more of your connected Facebook Business tools. This metric counts add to basket events that are tracked by one of your Facebook business tools that is a Facebook pixel in our case and attributed to your ads the 23rd feature is also a related metrics.*\n> \n> 24) Initiate Checkout (Facebook Pixel) :  *The number of Initiate Checkout events attributed to your ads, based on information received from one or more of your connected Facebook Business tools.(Faxebook Pixel in our data)and it is related with the feature 25th Cost per Initiate Checkout * \n> \n> 26) Purchase (Facebook Pixel) :  *The number of Purchase events attributed to your ads, based on information received from one or more of your connected Facebook Business tools. and 27th feature is also related Cost per Purchase *  \n> \n> 28) Amount Spent (EUR):  *Amount paid by company to Facebook, to show that ad. The estimated total amount of money you've spent on your campaign, ad set or ad during its schedule.*\n> \n> 29) Purchase Conversion Value (Facebook Pixel): *The total value of purchases tracked with the Conversions objective. The metric is calculated by adding the value parameters that you set for the purchase conversion standard event.*\n> \nWe can see that most of the variables are numerical, but two are character.\n>\nHere it is good to talk a bit about what is Facebook Pixel to expand the understanding of data.\nThe Facebook Business Tools are technologies offered to help website owners and publishers, app developers, and business partners, including advertisers and others, integrate with Facebook, understand and measure their products and services, and better reach and serve people who use or might be interested in their products and services. Facebook Pixel is one of these tools and works when someone visits your website and takes an action (for example, buying something), the Facebook pixel is triggered and reports this action. This way, you'll know when a customer took an action after seeing your Facebook ad.","63cc6dd2":"**x :  Purchase     y : Reach    z : Index**","5eccd129":"> ---------------------------------\n> \n> PREDICTIVE MODELING\n> \n> We have gained some insights from the visualisation of data. Now let's see if we can accurately predict some of the features' values\n> \n> The steps to building and using a model are:\n> \n> Define: What type of model will it be?\n> Fit: Capture patterns from provided data.\n> Predict: Use the model to predict.\n> Evaluate: Determine how accurate the model's predictions are. ...","b3d8f3c0":"Linear regration line for Facebook has the biggest slope and lowest slope is of Audience Network. We can say that the highest check out at the same point of reach is of Facebook. \nI think this explains why there is more budget investment on facebook placement. ","35bcaa98":"**Cleaning Categorical Variables**\n\nNow, time to fill the missing values of the categorical features","ce2912ee":"Visualizing information is a great way to understand ad set data that you want to delve into further.","7086be81":"Let's see the information about remaining data","4a0134ca":"> The first data set is giving data according to Platforms where campaigns are shown (Facebook, Instagram and Audience Network) so that we analysed by taking the Platform feature into consideration and most of the visualisation and modelling turned around this specific feature. \n>\n> For the next datasets, it would be similar steps but we would get insights around ages and countries of the targeting group.\n>\n> Predictive models for such data can be misleading. However, with stronger predictive models it is possible to reach high accuracy, as well.\n>\n>  Overall, we can say that data shows the relations between the money spent, platforms that ad-sets has shown, the number of people reached, the number of clicks and purchase. \n>\n> Finally, It is the first and most visible outcome that the more you spend money, the more your advertisements reach people and the purchase comes as a natural result.\n\n\n\n\n\n\n\n","4f96a2d2":"Let's rename the features to not have problem in analysing process.","ce9c04d8":">\n>Now we can go advance things and work on predictive models for this data.","95706ae7":"The model couldn't predict correctly. It is not a strong model to predict such a complex and unexpected data. ","e323238e":"**Imputing the missing values for numerical variables: **\n\nLet\u2019s fill up the missing values with the means of the respective columns:","a03c29ab":"Let's look at the data by taking platforms into consideration and see distributions in different visual tools to get further insight.","4e3b5d98":">With the first glance to the heat map, we see dramatic correlations between some of the features.\n>\n> Initiate Checkouts & Perchase Conversion Value (Facebook Pixel) is corraleted by (0.9)\n>\n>Initiate Checkouts & Amount Spent (0.9)\n>\n> Reach & Perchase Conversion Value (Facebook Pixel) (0.5)\n>\n> Reach & Add to Cart (Facebook Pixel)  (0.6)\n>\n>\n>As we might expect, we've got some strong correlations (0.7) between the amount has been spent and how many clicks have been gotten and (0.9) add to cart, (0.9) initiate checkout.\n>\n>From our broad overview of the data, we can see that the more we spend, the more clicks and conversions we seem to get. That's quite reassuring to know, but doesn't really give us the 'actionable insight' we were looking for.\n\n> Other importand correlations are:\n>\n> Amount Spent & Add to Cart Today (0.4)\n>\n> Amount Spent & Add to Cart (0.9)\n>\n>In short time the effect of spent money on add to cart event is not as visiable as long term look.\n\n-----------------------------------\n","6e82bcfd":"> BudgetType': CategoricalDtype(categories=['Dagelijks', 'Looptijd']\n>\n>Here names are in Dutch.\n>\n>Dagelijks means Daily\n>\n>Looptijd means Duration","cfe7fe90":">**The missing values for all the variables (numerical\/categorical) have been imputed, and there are no features with missing values in the dataset.**\n"}}