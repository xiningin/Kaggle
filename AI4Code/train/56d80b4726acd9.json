{"cell_type":{"462d19cc":"code","a9694b66":"code","5d98053e":"code","9ab54776":"code","d3884e1e":"code","71cd53c4":"code","75bd0ecb":"code","286aea3d":"code","68712400":"code","37278615":"code","e32fe852":"code","4ace03fb":"code","a8e051f7":"code","6324738a":"code","fd126a39":"code","4266eede":"code","5861f836":"code","8e08e61b":"code","392f0215":"code","734956e1":"code","ed1931a7":"markdown","18a79305":"markdown","588a36a7":"markdown","16ba8e47":"markdown","5e2c4b33":"markdown","2b3ba1f6":"markdown","4e085e22":"markdown","97910054":"markdown","a79441fa":"markdown"},"source":{"462d19cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models, datasets\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.applications.vgg16 import decode_predictions\nimport matplotlib.pyplot as plt\nimport os\nfrom PIL import Image\nimport cv2\nimport pydicom","a9694b66":"#load the data\ntrain = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')","5d98053e":"print('The training data contains columns: ')\nfor key in train.keys():\n    print(key)","9ab54776":"plt.hist(train['target'],align='left')\nplt.title('Number of benign and malignant cases in train.csv')\nplt.xticks([0,1],labels=['Benign','Malignant'])\nplt.show()","d3884e1e":"hist = plt.hist(train['diagnosis'],rwidth=0.5,align='left',orientation='vertical')\nplt.xticks(rotation='vertical')\nplt.show()","71cd53c4":"train.diagnosis.value_counts()","75bd0ecb":"#plot cases as a function of age\ngroup = train.groupby(['target','age_approx'])['benign_malignant'].count()\n\ntrain[(train['target']!=1) & (train['sex']=='female')]['age_approx'].hist(bins=15,rwidth=0.5,label='female',align='right',alpha=0.7)\ntrain[(train['target']!=1) & (train['sex']=='male')]['age_approx'].hist(bins=15,rwidth=0.5,label='male',align='mid',alpha=0.7)\nplt.title('Benign cases as a function of age and gender')\nplt.legend()\nplt.ylabel('frequency')\nplt.xlabel('age (yrs)')\nplt.show()\n\ntrain[(train['target']==1) & (train['sex']=='female')]['age_approx'].hist(bins=15,rwidth=0.5,label='female',align='right',alpha=0.7)\ntrain[(train['target']==1) & (train['sex']=='male')]['age_approx'].hist(bins=15,rwidth=0.5,label='male',align='mid',alpha=0.7)\nplt.title('Malignant cases as a function of age and gender')\nplt.legend()\nplt.ylabel('frequency')\nplt.xlabel('age (yrs)')\nplt.show()\n","286aea3d":"train['anatom_site_general_challenge'].hist(align='mid', rwidth=0.5)\nplt.xticks(rotation='vertical')\nplt.ylabel('frequency')\nplt.show()","68712400":"train.anatom_site_general_challenge.value_counts()","37278615":"#plt.imshow the first 10 training set images\ni=0\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/siim-isic-melanoma-classification\/train\/'):\n    while i < 10:\n        image = pydicom.dcmread(os.path.join(dirname, filenames[i]))\n        plt.imshow(image.pixel_array)\n        plt.xticks([])\n        plt.yticks([])\n        plt.show()\n        i+=1","e32fe852":"benigns = train[train.target==0]['image_name'].iloc[0:3]\nmalignants = train[train.target==1]['image_name'].iloc[0:3]\n\ndef preprocess_image(im):\n    #vary parameters here to try and highlight features in malignant cases\n    im = np.asarray(im)\n    im = cv2.resize(im, (224, 224))\n    im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)\n    im = cv2.addWeighted(im, 4, cv2.GaussianBlur(im, (0,0) , 224\/5), -4 ,112)\n    return im\n\nfor image in benigns:\n    im = Image.open('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/' + image + '.jpg')\n    im = preprocess_image(im)\n    plt.figure(figsize=(3,4))\n    plt.imshow(im)\n    plt.title('benign')\n    plt.xticks([])\n    plt.yticks([])\n\nfor image in malignants:\n    im = Image.open('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/' + image + '.jpg')\n    im = preprocess_image(im)\n    plt.figure(figsize=(3,4))\n    plt.imshow(im)\n    plt.title('malignant')\n    plt.xticks([])\n    plt.yticks([])\n\nplt.show()","4ace03fb":"#load the data\ntrain = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\n\ntrain['image_name'] += '.jpg'\n\ndata_generator = ImageDataGenerator(rescale=1.\/255.,validation_split=0.25)\ntrain_generator = data_generator.flow_from_dataframe(train,\n                                                     directory='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/',\n                                                     x_col='image_name',\n                                                     y_col='target',\n                                                     target_size=(224, 224),\n                                                     class_mode='raw',\n                                                     subset='training',\n                                                     batch_size=24,\n                                                     color_mode='rgb',\n                                                     fill_mode='nearest')\nvalid_generator = data_generator.flow_from_dataframe(train,\n                                                     directory='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/',\n                                                     x_col='image_name',\n                                                     y_col='target',\n                                                     target_size=(224, 224),\n                                                     class_mode='raw',\n                                                     subset='validation',\n                                                     batch_size=24,\n                                                     color_mode='rgb',\n                                                     fill_mode='nearest')","a8e051f7":"model = models.Sequential()\nmodel.add(VGG16(include_top=False, pooling='avg', weights='imagenet', input_shape=(224, 224, 3), classes=2))\nmodel.add(layers.Dense(2, activation='softmax'))\nmodel.layers[0].trainable = False\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","6324738a":"model.summary()","fd126a39":"#try and improve predictions, by including a greater fraction of malignant cases in training sample\n\nzeros = train[train.target==0].sample(5000)\nones = train[train.target==1]\ntrain_df = pd.concat([ones,zeros]).sample(frac=1)","4266eede":"data_generator = ImageDataGenerator(rescale=1.\/255.,validation_split=0.25)\ntrain_generator = data_generator.flow_from_dataframe(train_df,\n                                                     directory='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/',\n                                                     x_col='image_name',\n                                                     y_col='target',\n                                                     target_size=(224, 224),\n                                                     class_mode='raw',\n                                                     subset='training',\n                                                     batch_size=24,\n                                                     color_mode='rgb',\n                                                     fill_mode='nearest')\nvalid_generator = data_generator.flow_from_dataframe(train_df,\n                                                     directory='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/',\n                                                     x_col='image_name',\n                                                     y_col='target',\n                                                     target_size=(224, 224),\n                                                     class_mode='raw',\n                                                     subset='validation',\n                                                     batch_size=24,\n                                                     color_mode='rgb',\n                                                     fill_mode='nearest')","5861f836":"history = model.fit_generator(train_generator,\n                    steps_per_epoch=150,\n                    epochs=1,\n                    validation_data=valid_generator,\n                    validation_steps=30)","8e08e61b":"preds = model.predict_generator(valid_generator,steps=10)","392f0215":"print(preds)","734956e1":"for i in range(10):\n    print(valid_generator[i][1])","ed1931a7":"**Lets take some benign cases and malignant cases, and apply different filters to see if we can highlight any important features...**","18a79305":"# 2. View images, and idenitfy potentially useful data augmentation and preprocessing techniques.","588a36a7":"**The overwhelming majority of cases have 'unknown' diagnoses...**","16ba8e47":"**Our training data is significantly biased toward benign cases...**","5e2c4b33":"**What does the training data distribution look like in terms of age and gender?**","2b3ba1f6":"# **Helpful comments and advice on how to improve network performance are appreciated! I'm only a beginner, learning and trying to gain experience\/practise using neural networks :)**","4e085e22":"# 1. Data visualisation and undestanding the data","97910054":"**Where are the images located on the body?**","a79441fa":"# 3. attempt at modelling the data using a CNN. I use the VGG16 architecture in tensorflow, and apply it to this problem using transfer learning "}}