{"cell_type":{"50a2f7dc":"code","e5506cb5":"code","d13cefdc":"code","49e1db83":"code","6f064072":"code","21f8e869":"code","deca74c7":"code","60d8bdb2":"code","8639b777":"code","1b5b12ce":"code","26c5c790":"code","9c2c26ff":"code","96d7fdac":"code","f6acc762":"code","90f1e250":"code","477190e7":"code","efbe145e":"code","c22df094":"code","1d95aaec":"code","e8b2c563":"code","cbbfdc1f":"code","29c2041c":"code","ac113e13":"code","57faf2b4":"code","c12ff319":"code","987e5f34":"code","7ee3a461":"code","5672c4da":"code","0592d9b7":"code","ead5e0eb":"code","0e1a3071":"code","22176024":"code","5d48e20e":"code","78490e15":"code","9ecd3a9d":"code","bb2a325d":"code","df663abb":"code","b2549630":"code","f7d72a58":"code","5dc972a0":"markdown","3e58f3cf":"markdown","07372ce4":"markdown","b52e7c57":"markdown","b9103ed3":"markdown","c62bfc9c":"markdown","9504ed21":"markdown","cbb0856c":"markdown","4cd5d911":"markdown","fbb2de6d":"markdown","f5ea1373":"markdown","f70ba605":"markdown","d021f105":"markdown","5ff6cef5":"markdown","d8c30e92":"markdown","86f1aebf":"markdown"},"source":{"50a2f7dc":"import datetime\nimport os\nimport time\nwith os.scandir(\"\/kaggle\/input\/covid-world-vaccination-progress\") as dir_entries:\n    for entry in dir_entries:\n        unix_timestamp  = int(entry.stat().st_mtime)\n        utc_time = time.gmtime(unix_timestamp)\n        print(f\"Dataset last time updated: {utc_time.tm_year}-{utc_time.tm_mon}-{utc_time.tm_mday}\")\n        break\n        \nldt = datetime.datetime.now()\nprint(f\"Noteboook last time updated: {ldt.year}-{ldt.month}-{ldt.day}\")","e5506cb5":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d13cefdc":"data_df = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","49e1db83":"country_vaccine = data_df.groupby([\"country\", \"iso_code\", \"vaccines\"])['total_vaccinations', \n                                                                       'total_vaccinations_per_hundred',\n                                                                      'daily_vaccinations',\n                                                                      'daily_vaccinations_per_million',\n                                                                      'people_vaccinated',\n                                                                      'people_vaccinated_per_hundred',\n                                                                       'people_fully_vaccinated', 'people_fully_vaccinated_per_hundred'\n                                                                      ].max().reset_index()\ncountry_vaccine.columns = [\"Country\", \"iso_code\", \"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\", \"People vaccinated\", \"People vaccinated per hundred\",\n                           'People fully vaccinated', 'People fully vaccinated percent']","6f064072":"vaccines = country_vaccine.Vaccines.unique()\nfor v in vaccines:\n    countries = country_vaccine.loc[country_vaccine.Vaccines==v, 'Country'].values\n    print(f\"Vaccines: {v}: \\nCountries: {list(countries)}\\n\")","21f8e869":"fig = px.choropleth(locations=country_vaccine['Country'], \n                    locationmode=\"country names\",\n                    color=country_vaccine['Vaccines'],\n                    title=\"Countries using each vaccine (different colors for each vaccine)\",\n                    height = 800\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Vaccine scheme'})\nfig.show()","deca74c7":"vaccine = data_df.groupby([\"vaccines\"])['total_vaccinations','total_vaccinations_per_hundred',\n                                       'daily_vaccinations','daily_vaccinations_per_million'].max().reset_index()\nvaccine.columns = [\"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\"]\ndef draw_trace_bar_vaccine(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['Vaccines'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Vaccines']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest',\n              height = 800\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')","60d8bdb2":"draw_trace_bar_vaccine(vaccine, 'Total vaccinations', 'Total per vaccine scheme', 'Vaccine', 'Vaccination total', \"darkmagenta\" )","8639b777":"fig = px.treemap(country_vaccine, path = ['Vaccines', 'Country'], values = 'Total vaccinations',\n                title=\"Total vaccinations per country, grouped by vaccine scheme\")\nfig.show()","1b5b12ce":"fig = px.treemap(country_vaccine, path = ['Vaccines', 'Country'], values = 'Daily vaccinations',\n                title=\"Daily vaccinations per country, grouped by vaccine scheme\")\nfig.show()","26c5c790":"fig = px.treemap(country_vaccine, path = ['Vaccines', 'Country'], values = 'People vaccinated',\n                title=\"People vaccinated per country, grouped by vaccine scheme\")\nfig.show()","9c2c26ff":"def draw_trace_bar(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['Country'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Country']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest'\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')\n","96d7fdac":"draw_trace_bar(country_vaccine, 'Total vaccinations', 'Vaccination total per country', 'Country', 'Vaccination total', \"Darkgreen\" )","f6acc762":"draw_trace_bar(country_vaccine, 'Percent', 'Vaccination percent per country', 'Country', 'Vaccination percent' )","90f1e250":"draw_trace_bar(country_vaccine, 'Daily vaccinations', 'Daily vaccinations per country', 'Country', 'Daily vaccinations', \"red\" )","477190e7":"draw_trace_bar(country_vaccine, 'Daily vaccinations per million', 'Daily vaccinations per million per country', 'Country',\\\n               'Daily vaccinations per million', \"magenta\" )","efbe145e":"draw_trace_bar(country_vaccine, 'People vaccinated', 'People vaccinated per country', 'Country',\\\n               'People vaccinated', \"lightblue\" )","c22df094":"draw_trace_bar(country_vaccine, 'People vaccinated per hundred', 'People vaccinated per hundred per country', 'Country',\\\n               'People vaccinated per hundred', \"orange\" )","1d95aaec":"def plot_custom_scatter(df, x, y, size, color, hover_name, title):\n    fig = px.scatter(df, x=x, y=y, size=size, color=color,\n               hover_name=hover_name, size_max=80, title = title)\n    fig.update_layout({'legend_orientation':'h'})\n    fig.update_layout(legend=dict(yanchor=\"top\", y=-0.2))\n    fig.update_layout({'legend_title':'Vaccine scheme'})\n    fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_xaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_yaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.show()    ","e8b2c563":"plot_custom_scatter(country_vaccine, x=\"Total vaccinations\", y=\"Percent\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Percent vs. total), grouped per country and vaccines\")","cbbfdc1f":"plot_custom_scatter(country_vaccine, x=\"Total vaccinations\", y=\"Daily vaccinations\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Total vs. Daily) grouped per country and vaccines\")","29c2041c":"plot_custom_scatter(country_vaccine, x=\"Percent\", y=\"Daily vaccinations per million\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Daily \/ million vs. Percent) grouped per country and vaccines\")","ac113e13":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Total vaccinations'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Total vaccinations',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","57faf2b4":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Percent'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Percent',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per hundred per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","c12ff319":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Daily vaccinations'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Daily vaccinations',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Daily vaccinations per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","987e5f34":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Daily vaccinations per million'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Daily vaccinations per million',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Daily vaccinations per million per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","7ee3a461":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['People vaccinated'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'People vaccinated',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'People vaccinated per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","5672c4da":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['People vaccinated per hundred'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'People vaccinated per hundred',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'People vaccinated per hundred per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","0592d9b7":"country_vaccine_time = data_df[[\"country\", \"vaccines\", \"date\", 'total_vaccinations', \n                                'total_vaccinations_per_hundred',  'people_vaccinated','people_vaccinated_per_hundred',\n                               'daily_vaccinations','daily_vaccinations_per_million', \n                                'people_fully_vaccinated', 'people_fully_vaccinated_per_hundred'\n                               ]].dropna()\ncountry_vaccine_time.columns = [\"Country\", \"Vaccines\", \"Date\", 'Total vaccinations', 'Percent', 'People vaccinated', 'People percent',\n                               \"Daily vaccinations\", \"Daily vaccinations per million\", \n                                'People fully vaccinated', 'People fully vaccinated percent']","ead5e0eb":"countries = ['Austria', 'Belgium', 'Bulgaria','Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany',\n             'Greece', 'Hungary', 'Ireland', 'Israel', 'Italy', 'Latvia','Lithuania', 'Luxembourg', 'Malta',\n             'Netherlands', 'Norway','Poland', 'Portugal', 'Romania', 'Serbia', 'Slovakia', 'Spain', 'Sweden',\n             'United Kingdom', 'United States', 'China']","0e1a3071":"def plot_time_variation_countries_group(data_df, feature, title, countries):\n    data = []\n    for country in countries:\n        df = data_df.loc[data_df.Country==country]\n        trace = go.Scatter(\n            x = df['Date'],y = df[feature],\n            name=country,\n            mode = \"markers+lines\",\n            marker_line_width = 1,\n            marker_size = 8,\n            marker_symbol = 'circle',\n            text=df['Country'])\n        data.append(trace)\n    layout = dict(title = title,\n          xaxis = dict(title = 'Date', showticklabels=True,zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True,\n                       tickfont=dict(size=10,color='darkblue'),), \n          yaxis = dict(title = feature, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True, type=\"log\"),\n                       plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n         hovermode = 'x', \n         height=800\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='all_countries')","22176024":"plot_time_variation_countries_group(country_vaccine_time, 'Percent', 'Total vaccination percent evolution (selected countries, log scale)', countries)","5d48e20e":"plot_time_variation_countries_group(country_vaccine_time, 'Total vaccinations', 'Total vaccination evolution (selected countries, log scale)', countries)","78490e15":"plot_time_variation_countries_group(country_vaccine_time, 'People percent', 'People vaccinated percent evolution (selected countries, log scale)', countries)","9ecd3a9d":"plot_time_variation_countries_group(country_vaccine_time, 'People vaccinated', 'People vaccinated evolution (selected countries, log scale)', countries)","bb2a325d":"plot_time_variation_countries_group(country_vaccine_time, 'Daily vaccinations', 'Daily vaccinations evolution (selected countries, log scale)', countries)","df663abb":"plot_time_variation_countries_group(country_vaccine_time, 'Daily vaccinations per million', 'Daily vaccinations per million evolution (selected countries, log scale)', countries)","b2549630":"plot_time_variation_countries_group(country_vaccine_time, 'People fully vaccinated percent', 'People fully vaccinated percent evolution (selected countries, log scale)', countries)","f7d72a58":"plot_time_variation_countries_group(country_vaccine_time, 'People fully vaccinated', 'People fully vaccinated evolution (selected countries, log scale)', countries)","5dc972a0":"<a id=\"1\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>Analysis preparation<\/center><\/h1>\n\n\nWe initialize the Python packages we will use for data ingestion, preparation and visualization. We will use mostly Plotly for visualization.\nThen we read the data file and aggregate the data on few fields (country, iso_code and vaccines - that is the vaccination scheme used in a certain country).\n\nWe will mainly look to:\n* What vaccination schemes are used in various countries;  \n* Total number of vaccinations and percent of vaccinations;  \n* Daily vaccinations and daily vaccinations per million;\n* Total people vaccinated and percent of people vaccinated;   \n\nIn the dataset is also information about the total number of people completely vaccinated (and percent of them).\n\nWe visualize the latest (maximum) values and as well for the variation in time of the above mentioned values.\n","3e58f3cf":"\n<a id=\"2\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>What vaccines are used in each country?<\/center><\/h1>","07372ce4":"## Overall\n\nLet's look first to the vaccination scheme used overall (not splitted per countries).","b52e7c57":"\n<a id=\"4\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>How many are vaccinated (total and as percent from population)?<\/center><\/h1>\n\nLet's look now to the countries statistics, irrespective to the vaccine scheme. We will look to the top of the countries by:\n\n- Total number of vaccinations;  \n- Percent of vaccinations from entire population;  \n- Daily number of vaccinations;  \n- Daily number of vaccination per million population;  \n- People vaccinated;  \n- Percent of vaccinated people from entire population.","b9103ed3":"Press **Output** button to see a list of countries where each vaccine is used. ","c62bfc9c":"\n<a id=\"5\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>How the vaccination progressed<\/center><\/h1>\n\nLet's look to the way the vaccination progressed.\n\nWe will look to the values of total vaccination and daily vaccination.","9504ed21":"<small><a href='#0'>Go to top<\/a><\/small>  ","cbb0856c":"## Per countries\n\nTo see the vaccination scheme distribution per countries, we will use treemap representations. \n\nWe look to the total vaccinations, to daily vaccinations values as well as total people vaccinated.\n\n<font color=\"red\">Note<\/font>: click on a treemap item to navigate down the tree structure and expand the current branch.","4cd5d911":"Some countries are using a mixed vaccination scheme (they are using more than one vaccine).\n\nThe mapping is as following:\n* Moderna, Pfizer\/BioNTech - USA;  \n* CNBG, Sinovac - China;  \n* Oxford\/AstraZeneca, Pfizer\/BioNTech', 'Pfizer\/BioNTech - UK;  \n* Pfizer\/BioNTech - mostly EU;  \n* Pfizer\/BioNTech, Sinopharm - UAE;  \n* Sinovac - Turkey;   \n* Covaxin, Covishield - India;  \n","fbb2de6d":"<small><a href='#0'>Go to top<\/a><\/small>  ","f5ea1373":"<a id=\"3\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>Which vaccination scheme is used most?<\/center><\/h1>","f70ba605":"<center><h1>COVID-19 Vaccination Progress<\/h1><\/center>\n<br>\n<center><img src=\"https:\/\/c.files.bbci.co.uk\/53A9\/production\/_115371412_gettyimages-1265248637.jpg\" width=600><\/img><\/center>  \n\n<br>\n\n<h1 style='background:#26A2AB; border:0; color:black'><center>Introduction<\/center><\/h1> \n\nThe data contains the following information:  \n\n* **Country** - this is the country for which the vaccination information is provided;     \n* **Country ISO Code** - ISO code for the country;   \n* **Date**- date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;   \n* **Total number of vaccin ations** - this is the absolute number of total immunizations in the country;  \n* **Total number of people vaccinated** - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;  \n* **Total number of people fully vaccinated** - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;  \n* **Daily vaccinations (raw)** - for a certain data entry, the number of vaccination for that date\/country;  \n* **Daily vaccinations** - for a certain data entry, the number of vaccination for that date\/country;  \n* **Total vaccinations per hundred** - ratio (in percent) between vaccination number and total population up to the date in the country;  \n* **Total number of people vaccinated per hundred** - ratio (in percent) between population immunized and total population up to the date in the country;  \n* **Total number of people fully vaccinated per hundred** - ratio (in percent) between population fully immunized and total population up to the date in the country;   \n* **Number of vaccinations per day** - number of daily vaccination for that day and country;   \n* **Daily vaccinations per million** -  ratio (in ppm) between vaccination number and total population for the current date in the country;    \n* **Vaccines used in the country** - total number of vaccines used in the country (up to date);    \n* **Source name** - source of the information (national authority, international organization, local organization etc.);   \n* **Source website** - website of the source of information;    \n\n\n<a id=\"0\"><\/a>\n\n### Content  \n\n* <a href='#1'>Analysis preparation<\/a>  \n* <a href='#2'>What vaccines are used in each country?<\/a>    \n* <a href='#3'>Which vaccination scheme is used most?<\/a>    \n* <a href='#4'>How many are vaccinated (total and as percent from population)?<\/a>    \n* <a href='#5'>How the vaccination progressed<\/a>  \n\n\n### Last updated\n","d021f105":"<small><a href='#0'>Go to top<\/a><\/small>  ","5ff6cef5":"<small><a href='#0'>Go to top<\/a><\/small>  ","d8c30e92":"<small><a href='#0'>Go to top<\/a><\/small>  ","86f1aebf":"<small><a href='#0'>Go to top<\/a><\/small>  "}}