{"cell_type":{"95011d7d":"code","7092ae0d":"code","f7c29b2b":"code","147ff23d":"code","cd04a281":"code","b94d9583":"code","a767db06":"code","f89799ff":"code","86a77541":"code","b090a912":"code","48ba391b":"code","ee66bc6b":"code","8246bc31":"code","2193a1ea":"code","ca17ef33":"code","4000aac3":"code","8f8be507":"code","c7fa0a74":"code","c35d2eea":"code","f1b56a1d":"code","9b0a636b":"code","5a98d7b0":"code","bc4e7820":"code","81e26795":"code","22924690":"code","6171683b":"code","1ef6fe17":"code","595f9883":"code","c4c0e490":"code","b92a156b":"code","2b11f9b4":"code","4155a337":"code","d22ed001":"code","5e699e27":"code","674dfc5c":"code","18101734":"code","e3fd76a6":"code","acc4db76":"code","9e0d9a9f":"code","6183cd4f":"code","8819daeb":"markdown","520ce7ad":"markdown","10a1ad89":"markdown","bb9913d8":"markdown","d88c7480":"markdown","d8b7c22e":"markdown","7f66b30e":"markdown","c97c8a38":"markdown","9316fde1":"markdown","53beea13":"markdown","b6b6d129":"markdown","a478aa9c":"markdown","4887ecf3":"markdown","1098c3a5":"markdown","a2efb7a5":"markdown"},"source":{"95011d7d":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm import tqdm_notebook as tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\nfrom sklearn.metrics import mean_squared_error","7092ae0d":"\n# Original code from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage by @gemartin\n# Modified to support timestamp type, categorical type\n# Modified to add option to use float16 or not. feather format does not support float16.\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            # skip datetime type or categorical type\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","f7c29b2b":"%%time\nroot = Path('..\/input\/ashrae-feather-format-for-fast-loading')\n\ntrain_df = pd.read_feather(root\/'train.feather')\ntest_df = pd.read_feather(root\/'test.feather')\n#weather_train_df = pd.read_feather(root\/'weather_train.feather')\n#weather_test_df = pd.read_feather(root\/'weather_test.feather')\nbuilding_meta_df = pd.read_feather(root\/'building_metadata.feather')","147ff23d":"# i'm now using my leak data station kernel to shortcut.\nleak_df = pd.read_feather('..\/input\/ashrae-leak-data-station\/leak.feather')\n\nleak_df.fillna(0, inplace=True)\nleak_df = leak_df[(leak_df.timestamp.dt.year > 2016) & (leak_df.timestamp.dt.year < 2019)]\nleak_df.loc[leak_df.meter_reading < 0, 'meter_reading'] = 0 # remove large negative values\nleak_df = leak_df[leak_df.building_id!=245]","cd04a281":"leak_df.meter.value_counts()","b94d9583":"print (leak_df.duplicated().sum())","a767db06":"print (len(leak_df) \/ len(train_df))","f89799ff":"! ls ..\/input","86a77541":"del train_df\ngc.collect()","b090a912":"sample_submission1 = pd.read_csv('..\/input\/ashrae-kfold-lightgbm-without-leak-1-08\/submission.csv', index_col=0)\nsample_submission2 = pd.read_csv('..\/input\/ashrae-half-and-half\/submission.csv', index_col=0)\nsample_submission3 = pd.read_csv('..\/input\/ashrae-highway-kernel-route4\/submission.csv', index_col=0)","48ba391b":"test_df['pred1'] = sample_submission1.meter_reading\ntest_df['pred2'] = sample_submission2.meter_reading\ntest_df['pred3'] = sample_submission3.meter_reading\n\ntest_df.loc[test_df.pred3<0, 'pred3'] = 0 \n\ndel  sample_submission1,  sample_submission2,  sample_submission3\ngc.collect()\n\ntest_df = reduce_mem_usage(test_df)\nleak_df = reduce_mem_usage(leak_df)","ee66bc6b":"leak_df = leak_df.merge(test_df[['building_id', 'meter', 'timestamp', 'pred1', 'pred2', 'pred3', 'row_id']], left_on = ['building_id', 'meter', 'timestamp'], right_on = ['building_id', 'meter', 'timestamp'], how = \"left\")\nleak_df = leak_df.merge(building_meta_df[['building_id', 'site_id']], on='building_id', how='left')","8246bc31":"leak_df['pred1_l1p'] = np.log1p(leak_df.pred1)\nleak_df['pred2_l1p'] = np.log1p(leak_df.pred2)\nleak_df['pred3_l1p'] = np.log1p(leak_df.pred3)\nleak_df['meter_reading_l1p'] = np.log1p(leak_df.meter_reading)","2193a1ea":"leak_df.head()","ca17ef33":"leak_df[leak_df.pred1_l1p.isnull()]","4000aac3":"#ashrae-kfold-lightgbm-without-leak-1-08\nsns.distplot(leak_df.pred1_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred1_l1p, leak_df.meter_reading_l1p))\nprint ('score1=', leak_score)","8f8be507":"#ashrae-half-and-half\nsns.distplot(leak_df.pred2_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred2_l1p, leak_df.meter_reading_l1p))\nprint ('score2=', leak_score)","c7fa0a74":"# meter split based\nsns.distplot(leak_df.pred3_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred3_l1p, leak_df.meter_reading_l1p))\nprint ('score3=', leak_score)","c35d2eea":"# ashrae-kfold-lightgbm-without-leak-1-08 looks best","f1b56a1d":"leak_df['mean_pred'] = np.mean(leak_df[['pred1', 'pred2', 'pred3']].values, axis=1)\nleak_df['mean_pred_l1p'] = np.log1p(leak_df.mean_pred)\nleak_score = np.sqrt(mean_squared_error(leak_df.mean_pred_l1p, leak_df.meter_reading_l1p))\n\n\nsns.distplot(leak_df.mean_pred_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nprint ('mean score=', leak_score)","9b0a636b":"leak_df['median_pred'] = np.median(leak_df[['pred1', 'pred2', 'pred3']].values, axis=1)\nleak_df['median_pred_l1p'] = np.log1p(leak_df.median_pred)\nleak_score = np.sqrt(mean_squared_error(leak_df.median_pred_l1p, leak_df.meter_reading_l1p))\n\nsns.distplot(leak_df.median_pred_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nprint ('meadian score=', leak_score)","5a98d7b0":"N = 10\nscores = np.zeros(N,)\nfor i in range(N):\n    p = i * 1.\/N\n    v = p * leak_df['pred1'].values + (1.-p) * leak_df ['pred3'].values\n    vl1p = np.log1p(v)\n    scores[i] = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))","bc4e7820":"plt.plot(scores)","81e26795":"best_weight = np.argmin(scores) *  1.\/N\nprint (scores.min(), best_weight)","22924690":"# and more\nscores = np.zeros(N,)\nfor i in range(N):\n    p = i * 1.\/N\n    v =  p * (best_weight * leak_df['pred1'].values + (1.-best_weight) * leak_df ['pred3'].values) + (1.-p) * leak_df ['pred2'].values\n    vl1p = np.log1p(v)\n    scores[i] = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))","6171683b":"plt.plot(scores)","1ef6fe17":"best_weight2 = np.argmin(scores) *  1.\/N\nprint (scores.min(), best_weight2)\n# its seams better than simple mean 0.92079717","595f9883":"all_combinations = list(np.linspace(0.2,0.5,31))\nall_combinations","c4c0e490":"import itertools","b92a156b":"l = [all_combinations, all_combinations, all_combinations]\n# remember to do the reverse!\nall_l = list(itertools.product(*l)) + list(itertools.product(*reversed(l)))","2b11f9b4":"filtered_combis = [l for l in all_l if l[0] + l[1] + l[2] > 0.93 and l[0] + l[1] + l[2] < 1.03]","4155a337":"print(len(filtered_combis))","d22ed001":"best_combi = [] # of the form (i, score)\nfor i, combi in enumerate(filtered_combis):\n    #print(\"Now at: \" + str(i) + \" out of \" + str(len(filtered_combis))) # uncomment to view iterations\n    score1 = combi[0]\n    score2 = combi[1]\n    score3 = combi[2]\n    v = score1 * leak_df['pred1'].values + score2 * leak_df['pred3'].values + score3 * leak_df['pred2'].values\n    vl1p = np.log1p(v)\n    curr_score = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))\n    \n    if best_combi:\n        prev_score = best_combi[0][1]\n        if curr_score < prev_score:\n            best_combi[:] = []\n            best_combi += [(i, curr_score)]\n    else:\n        best_combi += [(i, curr_score)]\n            \nscore = best_combi[0][1]\nprint(score)","5e699e27":"sample_submission = pd.read_feather(os.path.join(root, 'sample_submission.feather'))\n\n# extract best combination\nfinal_combi = filtered_combis[best_combi[0][0]]\nw1 = final_combi[0]\nw2 = final_combi[1]\nw3 = final_combi[2]\nprint(\"The weights are: w1=\" + str(w1) + \", w2=\" + str(w2) + \", w3=\" + str(w3))\n\nsample_submission['meter_reading'] = w1 * test_df.pred1 +  w2 * test_df.pred3  + w3 * test_df.pred2\nsample_submission.loc[sample_submission.meter_reading < 0, 'meter_reading'] = 0","674dfc5c":"sample_submission.head()","18101734":"sns.distplot(np.log1p(sample_submission.meter_reading))","e3fd76a6":"leak_df = leak_df[['meter_reading', 'row_id']].set_index('row_id').dropna()\nsample_submission.loc[leak_df.index, 'meter_reading'] = leak_df['meter_reading']","acc4db76":"sns.distplot(np.log1p(sample_submission.meter_reading))","9e0d9a9f":"sample_submission.head()","6183cd4f":"sample_submission.to_csv('submission.csv', index=False, float_format='%.4f')","8819daeb":"### Create List of Possible Combinations","520ce7ad":"# Find Best Weight","10a1ad89":"Ummm... it looks mean blending is beter than median blending","bb9913d8":"# Leak Validation for public kernels(not used leak data)","d88c7480":"# Heuristic way","d8b7c22e":"### Filter Combinations to Have Those With Sum of Weights > 0.95 \n\nReason being weight sum of 0.96 led to LB score of 0.99","7f66b30e":"### Create List of All Possible Combinations of Three Lists","c97c8a38":"# Acknowledgements\n\nOriginal Kernel: https:\/\/www.kaggle.com\/yamsam\/ashrae-leak-validation-and-more\/notebook#Leak-Validation-for-public-kernels(not-used-leak-data)\n\nAdditions: Added a search method to find combination of weights with best score","9316fde1":"# All we need is Leak Validation(LV) ?\n\n* **if you like this kernel, please upvote original kernels.**\n* update site-4 and site-15","53beea13":"# Leak Validation for Blending","b6b6d129":"# Future Work\n\n- Increase the range of weights\n- Vary tolerance for sum of weights (currently tol = 0.95)","a478aa9c":"this kernel is still work in progress, but i hope you can find something usefull from this.","4887ecf3":"A one idea how we can use LV usefull is blending. We probably can find best blending method without LB probing and it's means we can save our submission.","1098c3a5":"## Begin the Search For Combination With Lowest Score!","a2efb7a5":"# Submit"}}