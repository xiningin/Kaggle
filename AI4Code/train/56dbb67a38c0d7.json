{"cell_type":{"04e56498":"code","9d9c7211":"code","66360cdd":"code","b82c0401":"code","105e0d98":"code","6ee2de61":"code","d6b2c17d":"code","a1d6835d":"code","349ccf17":"code","80863972":"code","c295e8c1":"code","b983fb2d":"markdown","01c4185a":"markdown","b23e784b":"markdown","792c7de1":"markdown","cd20b741":"markdown","977145e8":"markdown","ff65c0c4":"markdown","6692c937":"markdown","f3dc4951":"markdown","af2e18d5":"markdown","ecab9f4c":"markdown"},"source":{"04e56498":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import models, layers","9d9c7211":"df = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv\")\ndf['price'] = (df['High']+ df['Low'])\/2\ndf.drop(['Open','Close','Volume_(BTC)','Volume_(Currency)', 'Weighted_Price','High','Low'],axis=1, inplace=True)\n\ndf['Timestamp'] = pd.to_datetime(df['Timestamp'],unit='s')\ndf = df.set_index('Timestamp')\ndf = df.resample('6H').mean()\ndf = df.dropna()\n\ndf.head()","66360cdd":"plt.figure(figsize=(20,10))\nplt.plot(df)\nplt.title('Bitcoin price',fontsize=20)\nplt.xlabel('year',fontsize=15)\nplt.ylabel('price',fontsize=15)\nplt.show()","b82c0401":"scaler = MinMaxScaler()\nprice = scaler.fit_transform(np.array(df['price']).reshape(-1,1))\ndf['price'] = price","105e0d98":"X_l = []\ny_l = []\nN = len(df)\nD = 50\nfor i in range(N-D-1):\n    X_l.append(df.iloc[i:i+D])\n    y_l.append(df.iloc[i+D])\n    \nX = np.array(X_l)\ny = np.array(y_l)\n\nprint(X.shape, y.shape)","6ee2de61":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state= 100)","d6b2c17d":"m_x = layers.Input(shape = X_train.shape[1:])\nm_h = layers.LSTM(10)(m_x)\nm_y = layers.Dense(1)(m_h)\nm = models.Model(m_x,m_y)\nm.compile('adam','mse')\nm.summary()","a1d6835d":"history = m.fit(X_train, y_train, epochs=500, validation_data=(X_test, y_test),verbose=0)","349ccf17":"plt.figure(figsize=(15,5))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['Train','Test'])\nplt.title(\"The model's evaluation\", fontsize=14)\nplt.xlabel('Epoch')\nplt.xlim(2,500)\nplt.ylabel('Loss')\nplt.show()","80863972":"pred = []\n\npr = m.predict(np.array(df[-50:]))\n\npred.append(pr[0])\n\nfor i in range(1,50):\n    pr = m.predict(np.concatenate((np.array(df[-50+i:]), pred[:]), axis=0))\n    pred.append(pr[0])\n\nfor i in range(0,250):\n    pr = m.predict(np.concatenate(pred[i:],axis=0).reshape(-1,1))\n    pred.append(pr[0])","c295e8c1":"pred = pd.DataFrame(pred)\n\npred = pred.reset_index()\n\npred.columns = ['z','price']\n\npred.drop(['z'],axis=1,inplace=True)\n\ndata = pd.concat([df.reset_index().drop('Timestamp',axis=1),pred],ignore_index=True)\n\nplt.figure(figsize=(17,7))\nplt.plot(data[-1300:-300])\nplt.title(\"Bitcoin predict\",fontsize=20)\nplt.text(13200,1,\"predict data\",fontsize=14)\nplt.text(13015,1,\"- 2020\/12\/31\",fontsize=14)\nplt.plot(data[-300:])\nplt.show()","b983fb2d":"## 3. Using Scaler ( MinMaxScaler )\n---\n### By using MinMaxScaler, The price range is (0 ~ 1) now.","01c4185a":"## 7. Predict the price!\n---\n### We will predict 300 datas","b23e784b":"## 5. Make LSTM model\n---","792c7de1":"### LSTM is the one of the powerful DeepLearning Algorithm. But, It can't predict the Bitcoin Price that have enormous increase never before ","cd20b741":"### After Sliding window, We split data to X_train, X_test, y_train, y_test ","977145e8":"## 1. Import Libraries\n---","ff65c0c4":"# LSTM : Can we predict the Bitcoin price ?\n---\n## What is the LSTM?\n![](https:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/img\/LSTM3-chain.png)\n\nLong Short Term Memory networks \u2013 usually just called \u201cLSTMs\u201d \u2013 are a special kind of RNN, capable of learning long-term dependencies. They were introduced by Hochreiter & Schmidhuber (1997), and were refined and popularized by many people in following work.1 They work tremendously well on a large variety of problems, and are now widely used.\n\n### url : https:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/\n---","6692c937":"## 4. Sliding window and Split Train, Test data \n---\n### We predict 1 data by using 50 datas.\n---\n\n### After Sliding window\n* X.shape : (12965, 50, 1)\n* y.shape : (12965, 1)","f3dc4951":"## 6. Fit and Evaluate the model\n---","af2e18d5":"![](https:\/\/www.tradingview.com\/x\/soDyDqe1)","ecab9f4c":"## 2. Load Dataset\n---\n### Using Bitcoin-historical datasets. \n---\n### Features\n* Timestamp - Start time of time window (60s window), in Unix time\n* High - High price within time window\n* Low - Low price within time window\n---\nI only use Timestamp, High price and Low price."}}