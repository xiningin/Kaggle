{"cell_type":{"907822d5":"code","08aa5a0a":"code","9677837e":"code","f497260c":"code","86d6f61b":"code","a8bda50b":"code","d3f3f349":"code","cd22b9fe":"code","39bbf8af":"code","0c3b1799":"code","6a7f74c8":"code","b93b01ad":"code","0594764d":"code","b92c3732":"code","a62ed4d2":"code","a1d9bb90":"code","9dbc804e":"code","9199a084":"code","394ce1d3":"code","6b1e8b81":"code","5413f0fa":"code","15321dde":"code","b9aa022a":"code","5ad71e5a":"code","70b3b0a2":"code","d84fd0d4":"code","8ce71a31":"code","2740b74d":"code","c3f4f716":"code","92906245":"code","83dd06a2":"code","a82993ca":"code","f88287ea":"code","49a840cf":"markdown","62684eda":"markdown","9d66ff02":"markdown","fd05a110":"markdown","1be93feb":"markdown","52715f44":"markdown","0e0f60ad":"markdown","4071f062":"markdown","568e8db4":"markdown","e5362eba":"markdown","f7977208":"markdown","e1e8a12d":"markdown","5465c425":"markdown","61cf5d1b":"markdown","0eebfabc":"markdown","9d329204":"markdown","39ad0017":"markdown","8f492d5d":"markdown","86a0bf2f":"markdown","2b9777c1":"markdown"},"source":{"907822d5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.max_columns = 50\npd.options.display.max_colwidth  = 200\nfrom dataclasses import dataclass\n\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 0})\nplt.style.use('fivethirtyeight')\nplt.rcParams.update({'font.size': 14})\nimport seaborn as sns # visualization\n\nimport warnings # Supress warnings \nwarnings.filterwarnings('ignore')\n\nfrom tqdm import tqdm\n\nimport json\nimport plotly.graph_objs as go\nfrom PIL import Image, ImageOps\nimport os\nimport glob\nimport math\nimport json\nimport cv2\nfrom skimage import io\nfrom skimage.color import rgba2rgb, rgb2xyz\nfrom math import floor, ceil\nmycolors = [\"#797D62\", \"#9B9B7A\", \"#D9AE94\", \"#FFCB69\", \"#D08C60\", \"#997B66\"]\nimport colorama\nfrom colorama import Fore, Back, Style\nimport folium\nimport re\nimport pyproj\nfrom pyproj import Proj, transform\nfrom shapely.ops import cascaded_union\nimport warnings # Supress warnings \nwarnings.filterwarnings('ignore')\nimport geopandas as gpd\nmetadata_path = '\/kaggle\/input\/indoor-location-navigation\/metadata\/'\ntrain_path = '\/kaggle\/input\/indoor-location-navigation\/train\/'\ntest_path = '\/kaggle\/input\/indoor-location-navigation\/test\/'\n\ntest_structure = {test_path: ['path_1.txt','path_2.txt','path_3.txt','...', 'path_n.txt']}\n\nmetadata_structure = {metadata_path: \n                               {'site_1': {'floor_1': ['geojson_map.json', 'floor_info.json', 'floor_image.png'],\n                                           'floor_2': ['geojson_map.json', 'floor_info.json', 'floor_image.png']},\n                                'site_2': {'basement': ['geojson_map.json', 'floor_info.json', 'floor_image.png'],\n                                           'floor_1': ['geojson_map.json', 'floor_info.json', 'floor_image.png']},\n                               }\n                     }\n\ntrain_structure = {train_path: \n                               {'site_1': {'floor_1': ['path_1.txt', 'path_2.txt'],\n                                           'floor_2': ['path_1.txt', 'path_2.txt', 'path_3.txt']},\n                                'site_2': {'basement': ['path_1.txt'],\n                                           'floor_1': ['path_1.txt', 'path_2.txt']},\n                               }\n                     }\n\ndef pretty(d, indent=0, max_enum = 10):\n    for enum, (key, value) in enumerate(d.items()):\n        if enum < max_enum:\n            if ((len(str(key)) < 5) or (any(x in str(key) for x in ['floor', 'basement']))) and ('site' not in str(key)):\n                print('\\t'*indent, color_dict['floor'] + str(key)) \n            \n            elif ((len(str(key)) > 5)):\n                print('\\t'*indent, color_dict['site'] + str(key)) \n            \n            else:\n                print('\\t' * indent + str(key))\n            if isinstance(value, dict):\n                pretty(value, indent+1)\n            else:\n                if (len(value)>0) & (any(x in str(value) for x in ['.json', '.txt', '.png'])):\n                    print(\"\"\"{0}{1}{2}\"\"\".format('\\t'*(indent+1), color_dict['path'], str(value)))\n                else: \n                    print('\\t' * (indent+1) + str(value))\n        print(Style.RESET_ALL)\n                    \ndef create_dict(metadata_path, max_enum = 1000, files_enum = None):\n    \n    metadata_dict = {}\n    sites = os.listdir(metadata_path)\n    metadata_dict[metadata_path] = sites\n    sites_path = list(map(lambda x: os.path.join(metadata_path, x), sites))\n    sites_dict = {}\n    for sites_enum, site_path in enumerate(sites_path):\n        \n        if sites_enum<max_enum:\n            \n            site_floors = os.listdir(site_path)\n            floors_path = list(map(lambda x: os.path.join(site_path, x), site_floors)) \n            \n            floor_dict = {}\n            for floor_enum, floor in enumerate(floors_path): \n                if floor_enum<max_enum:\n                    if files_enum:\n                        floor_dict[site_floors[floor_enum]] = len(os.listdir(floor)[:files_enum])\n                    else:\n                        floor_dict[site_floors[floor_enum]] = len(os.listdir(floor))\n                        \n            sites_dict[sites[sites_enum]] = floor_dict\n                    \n                    \n    return {metadata_path: sites_dict}\n                    \n# copy from https:\/\/github.com\/location-competition\/indoor-location-competition-20\/blob\/master\/io_f.py\n\n@dataclass\nclass ReadData:\n    acce: np.ndarray\n    acce_uncali: np.ndarray\n    gyro: np.ndarray\n    gyro_uncali: np.ndarray\n    magn: np.ndarray\n    magn_uncali: np.ndarray\n    ahrs: np.ndarray\n    wifi: np.ndarray\n    ibeacon: np.ndarray\n    waypoint: np.ndarray\n\n\ndef read_data_file(data_filename):\n    acce = []\n    acce_uncali = []\n    gyro = []\n    gyro_uncali = []\n    magn = []\n    magn_uncali = []\n    ahrs = []\n    wifi = []\n    ibeacon = []\n    waypoint = []\n\n    with open(data_filename, 'r', encoding='utf-8') as file:\n        lines = file.readlines()\n\n    for line_data in lines:\n        line_data = line_data.strip()\n        if not line_data or line_data[0] == '#':\n            continue\n\n        line_data = line_data.split('\\t')\n\n        if line_data[1] == 'TYPE_WAYPOINT':\n            waypoint.append([int(line_data[0]), float(line_data[2]), float(line_data[3])])\n            continue\n       \n        if line_data[1] == 'TYPE_ACCELEROMETER':\n            acce.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n        \n        if line_data[1] == 'TYPE_ACCELEROMETER_UNCALIBRATED':\n            acce_uncali.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n        \n        if line_data[1] == 'TYPE_GYROSCOPE':\n            gyro.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n\n        if line_data[1] == 'TYPE_GYROSCOPE_UNCALIBRATED':\n            gyro_uncali.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n        \n        if line_data[1] == 'TYPE_MAGNETIC_FIELD':\n            magn.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n\n        if line_data[1] == 'TYPE_MAGNETIC_FIELD_UNCALIBRATED':\n            magn_uncali.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n\n        if line_data[1] == 'TYPE_ROTATION_VECTOR':\n            ahrs.append([int(line_data[0]), float(line_data[2]), float(line_data[3]), float(line_data[4])])\n            continue\n\n        if line_data[1] == 'TYPE_WIFI':\n            sys_ts = line_data[0]\n            ssid = line_data[2]\n            bssid = line_data[3]\n            rssi = line_data[4]\n            lastseen_ts = line_data[6]\n            wifi_data = [sys_ts, ssid, bssid, rssi, lastseen_ts]\n            wifi.append(wifi_data)\n            continue\n\n        if line_data[1] == 'TYPE_BEACON':\n            ts = line_data[0]\n            uuid = line_data[2]\n            major = line_data[3]\n            minor = line_data[4]\n            rssi = line_data[6]\n            ibeacon_data = [ts, '_'.join([uuid, major, minor]), rssi]\n            ibeacon.append(ibeacon_data)\n            continue\n        \n    \n    acce = np.array(acce)\n    acce_uncali = np.array(acce_uncali)\n    gyro = np.array(gyro)\n    gyro_uncali = np.array(gyro_uncali)\n    magn = np.array(magn)\n    magn_uncali = np.array(magn_uncali)\n    ahrs = np.array(ahrs)\n    wifi = np.array(wifi)\n    ibeacon = np.array(ibeacon)\n    waypoint = np.array(waypoint)\n    \n    \n    \n    return ReadData(acce, acce_uncali, gyro, gyro_uncali, magn, magn_uncali, ahrs, wifi, ibeacon, waypoint)\n\ndef visualize_trajectory(trajectory, floor_plan_filename, width_meter, \n                         height_meter, title=None, mode='lines + markers + text', show=False):\n    \"\"\"\n    Copied from from https:\/\/github.com\/location-competition\/indoor-location-competition-20\/blob\/master\/visualize_f.py\n\n    \"\"\"\n    fig = go.Figure()\n\n    # add trajectory\n    size_list = [6] * trajectory.shape[0]\n    size_list[0] = 10\n    size_list[-1] = 10\n\n    color_list = ['rgba(4, 174, 4, 0.5)'] * trajectory.shape[0]\n    color_list[0] = 'rgba(12, 5, 235, 1)'\n    color_list[-1] = 'rgba(235, 5, 5, 1)'\n\n    position_count = {}\n    text_list = []\n    for i in range(trajectory.shape[0]):\n        if str(trajectory[i]) in position_count:\n            position_count[str(trajectory[i])] += 1\n        else:\n            position_count[str(trajectory[i])] = 0\n        text_list.append('        ' * position_count[str(trajectory[i])] + f'{i}')\n    text_list[0] = 'Start 0'\n    text_list[-1] = f'End {trajectory.shape[0] - 1}'\n\n    fig.add_trace(\n        go.Scattergl(\n            x=trajectory[:, 0],\n            y=trajectory[:, 1],\n            mode=mode,\n            marker=dict(size=size_list, color=color_list),\n            line=dict(shape='linear', color='lightgrey', width=3, dash='dash'),\n            text=text_list,\n            textposition=\"top center\",\n            name='trajectory',\n        ))\n\n    # add floor plan\n    floor_plan = Image.open(floor_plan_filename)\n    fig.update_layout(images=[\n        go.layout.Image(\n            source=floor_plan,\n            xref=\"x\",\n            yref=\"y\",\n            x=0,\n            y=height_meter,\n            sizex=width_meter,\n            sizey=height_meter,\n            sizing=\"contain\",\n            opacity=1,\n            layer=\"below\",\n        )\n    ])\n\n    # configure\n    fig.update_xaxes(autorange=False, range=[0, width_meter])\n    fig.update_yaxes(autorange=False, range=[0, height_meter], scaleanchor=\"x\", scaleratio=1)\n    fig.update_layout(\n        title=go.layout.Title(\n            text=title or \"No title.\",\n            xref=\"paper\",\n            x=0,\n        ),\n        autosize=True,\n        width=800,\n        height=  800 * height_meter \/ width_meter,\n        template=\"plotly_white\",\n    )\n\n    if show:\n        fig.show()\n\n    return fig\n\ndef visualize_train_trajectory(path):\n    \"\"\"\n    Edited from \n    https:\/\/www.kaggle.com\/ihelon\/indoor-location-exploratory-data-analysis\n    \"\"\"\n    _id, floor = path.split(\"\/\")[:2]\n    \n    train_floor_data = read_data_file(f\"..\/input\/indoor-location-navigation\/train\/{path}\")\n    with open(f\"..\/input\/indoor-location-navigation\/metadata\/{_id}\/{floor}\/floor_info.json\") as f:\n        train_floor_info = json.load(f)\n\n    return visualize_trajectory(\n        train_floor_data.waypoint[:, 1:3], \n        f\"..\/input\/indoor-location-navigation\/metadata\/{_id}\/{floor}\/floor_image.png\",\n        train_floor_info[\"map_info\"][\"width\"], \n        train_floor_info[\"map_info\"][\"height\"],\n        f\"Visualization of {path}\"\n    )","08aa5a0a":"# \ubaa8\ub4e0 train\uacfc test \ud30c\uc77c\uc758 \uacbd\ub85c\ub97c \uad6c\ud569\ub2c8\ub2e4.\ntrain_paths = glob.glob('..\/input\/indoor-location-navigation\/train\/*\/*\/*')\ntest_paths = glob.glob('..\/input\/indoor-location-navigation\/test\/*')\nsites = glob.glob('..\/input\/indoor-location-navigation\/metadata\/*')\n\nprint(\"Train \ud30c\uc77c \uac1c\uc218: {:,}\".format(len(train_paths)), \"\\n\" +\n      \"Test \ud30c\uc77c \uac1c\uc218: {:,}\".format(len(test_paths)), \"\\n\" +\n      \"\ucd1d \uc9c0\uc5ed\uc218 (metadata): {:,}\".format(len(sites)))","9677837e":"def plot_all_floors(path_to_building):\n    plt.figure(figsize=(16, 10))\n    floor_paths = glob.glob(os.path.join(path_to_building, \"*\/floor_image.png\"))\n    for ind, floor_path in enumerate(floor_paths):\n        w = math.ceil(len(floor_paths) \/ 2)\n        h = math.ceil(len(floor_paths) \/ w)\n        if len(floor_paths) <= 4:\n            w = 4\n            h = 1\n        plt.subplot(h, w, ind + 1)\n        image = cv2.imread(floor_path)  \n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        plt.imshow(image)\n        plt.axis(\"off\")\n        plt.title(floor_path.split(\"\/\")[-2], fontsize=16)\n    plt.show()","f497260c":"plot_all_floors(\"..\/input\/indoor-location-navigation\/metadata\/5a0546857ecc773753327266\/\")","86d6f61b":"plot_all_floors(\"..\/input\/indoor-location-navigation\/metadata\/5c3c44b80379370013e0fd2b\/\")","a8bda50b":"plot_all_floors(\"..\/input\/indoor-location-navigation\/metadata\/5cd56b6be2acfd2d33b59d1f\/\")","d3f3f349":"with open('..\/input\/indoor-location-navigation\/metadata\/5a0546857ecc773753327266\/B1\/floor_info.json', 'r') as f:\n    json_data = json.load(f)\nprint(json.dumps(json_data, indent=\"\\t\"))","cd22b9fe":"with open('..\/input\/indoor-location-navigation\/metadata\/5c3c44b80379370013e0fd2b\/F2\/floor_info.json', 'r') as f:\n    json_data = json.load(f)\nprint(json.dumps(json_data, indent=\"\\t\"))","39bbf8af":"site_name_ = '5cd56c0ce2acfd2d33b6ab27'\nsite_path = os.path.join(metadata_path, site_name_)\nsite_structure = {site_path: {'B1': ['geojson_map.json', 'floor_info.json', 'floor_image.png'],\n                              'F3': ['geojson_map.json', 'floor_info.json', 'floor_image.png'],\n                              'F2': ['geojson_map.json', 'floor_info.json', 'floor_image.png']}}","0c3b1799":"floor_info = pd.read_json(os.path.join(site_path, 'B1\/floor_info.json'))\nfloor_image = plt.imread(os.path.join(site_path, 'B1\/floor_image.png'))\nfloor_geo = (gpd.GeoDataFrame.from_features(\n                        pd.read_json(os.path.join(site_path, 'B1\/geojson_map.json'))['features'])\n                     .assign(site_name=site_name_))\nfig, axes = plt.subplots(1, 2, figsize = (16, 10))\nax = axes.ravel()\nfloor_geo['geometry'].plot(ax=ax[0], color = 'red')\nax[0].set_title('Floor {} polygon'.format('B1'))\nax[1].imshow(floor_image)\nax[1].set_title('Floor {} image'.format('B1'))\nprint(\"\uc544\ub798\uc640 \uac19\uc774 geojson_map.json \ud30c\uc77c\ub9cc\uc73c\ub85c \uc774\ubbf8\uc9c0 \ud30c\uc77c \uc5c6\uc774 \uac01 \uce35\uc758 \ud615\ud0dc\ub97c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\")\nfig.suptitle('Floor Polygon and corresponding Floor Image')","6a7f74c8":"fig, axes = plt.subplots(2, 3, figsize = (20, 12))\nax = axes.ravel()\n\nsingle_poly_df = (floor_geo.loc[floor_geo.geometry.apply(lambda x: x.geom_type == 'Polygon')]\n                 .reset_index(drop = True))\n\nfor j in range(len(single_poly_df)):\n    single_poly_df.iloc[[j]].plot(ax = ax[j])\n    ax[j].set_title(\"Polygon {}\".format(j+1))\n    \npolygons = []\nboundary = gpd.GeoSeries(cascaded_union(single_poly_df.geometry.tolist()))\nboundary.plot(color = 'red', ax = ax[4])\nax[4].set_title('Polygon Unions')\nfloor_geo.iloc[[0]]['geometry'].plot(ax = ax[5], color = 'orange')\nax[5].set_title('MultiPolygon')\nprint(\"\ubaa8\ub4e0 \uce35\uc744 json \ud30c\uc77c\uc744 \uc774\uc6a9\ud574 \ud45c\ud604\ud55c \ubaa8\uc2b5\uc785\ub2c8\ub2e4.\")\nplt.suptitle('Floor {} at Site {} Polygons'.format('B1', site_name_ ))","b93b01ad":"geo_dfs = []\ngeo_cols = [\"geometry\",\"Vr\",\"category\",\"name\",\"code\",\"floor_num\", 'sid',\n            \"type\",\"id\",\"version\",\"display\",\"point\",\"points\",\"doors\", \"site_name\"]\n\nproblematic_sites = []\nfor site in os.listdir(metadata_path):\n    site_path = os.path.join(metadata_path, site)\n    for floor in os.listdir(site_path):\n        floor_path = os.path.join(site_path, floor)\n        try:\n            geo_df = (gpd.GeoDataFrame.from_features(\n                        pd.read_json(os.path.join(floor_path, 'geojson_map.json'))['features'])\n                     .assign(site_name=site))\n        except:\n            problematic_sites+=[site]\n        geo_dfs.append(geo_df)\nproblematic_sites=list(set(problematic_sites))\nfull_geo_df = pd.concat(geo_dfs, axis = 0, ignore_index = True)","0594764d":"print(\"geojson_map.json \ud30c\uc77c\uc758 \ub300\ub7b5\uc801\uc778 \ubaa8\uc2b5\uc785\ub2c8\ub2e4. \uc804\uccb4 \ud30c\uc77c\uc740 \ub9e4\uc6b0 \uae38\uc5b4\uc11c \uc0dd\ub7b5\ud588\uc2b5\ub2c8\ub2e4.\")\nfull_geo_df[['geometry', 'point', 'site_name']].sample()","b92c3732":"def get_lat_lon(point, proj = pyproj.Transformer.from_crs(3857, 4326, always_xy=True)):\n    try:\n        x1, y1 = point[0], point[1]\n        lon, lat = proj.transform(x1, y1)\n        return lat, lon\n    except:\n        return np.nan\n\ndef get_point(x, i=0):\n    try:\n        return x[i]\n    except:\n        return np.nan\n    \nfull_geo_df_sample = full_geo_df.sample(500).reset_index(drop = True)\nfull_geo_df_sample['lat_lon'] = full_geo_df_sample.point.apply(get_lat_lon)\nfull_geo_df_sample['lat'] = full_geo_df_sample['lat_lon'].apply(lambda x: get_point(x,0))\nfull_geo_df_sample['lon'] = full_geo_df_sample['lat_lon'].apply(lambda x: get_point(x,1))","a62ed4d2":"m = folium.Map(location=[30.7444062,121.1146543], tiles='openstreetmap', zoom_start = 8)\n\nfor j in range(len(full_geo_df_sample)):\n    try:\n        folium.Marker(location=[full_geo_df_sample['lat'][j],\n                                full_geo_df_sample['lon'][j]],\n                        popup=full_geo_df_sample['site_name'][j],\n                        icon = folium.Icon(prefix = 'fa', icon = \"map-pin\", color = 'blue'),\n                        fill_color='#132b5e', num_sides=3, radius=5).add_to(m)\n    except:\n        continue\nm","a1d9bb90":"from datetime import datetime\nstart_time = 1573713056850 #\uc720\ub2c9\uc2a4 \uc2dc\uac04\uc758 \uc608\uc2dc\nend_time = 1573713091483 # \uc815\uc218 \ud615\ud0dc\ub85c \ud45c\ud604\uc774 \ub418\uc5b4\uc788\uc5b4 \ub370\uc774\ud130 \ucc98\ub9ac\uc5d0 \uc6a9\uc774\ud558\uc9c0\ub9cc \uc9c1\uad00\uc801\uc774\uc9c0 \uc54a\ub2e4.\n\nprint(datetime.fromtimestamp(start_time\/1000.0)) #\ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\nprint(datetime.fromtimestamp(end_time\/1000.0))\nprint(datetime.fromtimestamp(end_time\/1000.0)-datetime.fromtimestamp(start_time\/1000.0)) #\ub450 \uc2dc\uac04\ub300\uc758 \ucc28\uc774\ub97c \uacc4\uc0b0","9dbc804e":"train_floor_data = read_data_file(\"..\/input\/indoor-location-navigation\/train\/5a0546857ecc773753327266\/B1\/5e15730aa280850006f3d005.txt\")\nprint(\"acce\", train_floor_data.acce.shape)\nprint(\"acce_uncali\", train_floor_data.acce_uncali.shape)\nprint(\"gyro\", train_floor_data.gyro.shape)\nprint(\"gyro_uncali\", train_floor_data.gyro_uncali.shape)\nprint(\"magn\", train_floor_data.magn.shape)\nprint(\"magn_uncali\", train_floor_data.magn_uncali.shape)\nprint(\"ahrs\", train_floor_data.ahrs.shape)\nprint(\"wifi\", train_floor_data.wifi.shape)\nprint(\"ibeacon\", train_floor_data.ibeacon.shape)\nprint(\"waypoint\", train_floor_data.waypoint.shape)\nwith open(\"..\/input\/indoor-location-navigation\/metadata\/5a0546857ecc773753327266\/B1\/floor_info.json\") as f:\n    train_floor_info = json.load(f)","9199a084":"test_floor_data = read_data_file(\"..\/input\/indoor-location-navigation\/test\/00ff0c9a71cc37a2ebdd0f05.txt\")\nprint(\"acce\", test_floor_data.acce.shape)\nprint(\"acce_uncali\", test_floor_data.acce_uncali.shape)\nprint(\"gyro\", test_floor_data.gyro.shape)\nprint(\"gyro_uncali\", test_floor_data.gyro_uncali.shape)\nprint(\"magn\", test_floor_data.magn.shape)\nprint(\"magn_uncali\", test_floor_data.magn_uncali.shape)\nprint(\"ahrs\", test_floor_data.ahrs.shape)\nprint(\"wifi\", test_floor_data.wifi.shape)\nprint(\"ibeacon\", test_floor_data.ibeacon.shape)\nprint(\"waypoint\", test_floor_data.waypoint.shape)\nprint(\"test \ud30c\uc77c\uc5d0\ub294 waypoint \uc815\ubcf4\uac00 \uc5c6\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\")","394ce1d3":"# copy from https:\/\/github.com\/location-competition\/indoor-location-competition-20\/blob\/master\/visualize_f.py\n\n\ndef save_figure_to_html(fig, filename):\n    fig.write_html(filename)\n\n\ndef visualize_trajectory(trajectory, floor_plan_filename, width_meter, height_meter, title=None, mode='lines + markers + text', show=False):\n    fig = go.Figure()\n\n    # add trajectory\n    size_list = [6] * trajectory.shape[0]\n    size_list[0] = 10\n    size_list[-1] = 10\n\n    color_list = ['rgba(4, 174, 4, 0.5)'] * trajectory.shape[0]\n    color_list[0] = 'rgba(12, 5, 235, 1)'\n    color_list[-1] = 'rgba(235, 5, 5, 1)'\n\n    position_count = {}\n    text_list = []\n    for i in range(trajectory.shape[0]):\n        if str(trajectory[i]) in position_count:\n            position_count[str(trajectory[i])] += 1\n        else:\n            position_count[str(trajectory[i])] = 0\n        text_list.append('        ' * position_count[str(trajectory[i])] + f'{i}')\n    text_list[0] = 'Start Point: 0'\n    text_list[-1] = f'End Point: {trajectory.shape[0] - 1}'\n\n    fig.add_trace(\n        go.Scattergl(\n            x=trajectory[:, 0],\n            y=trajectory[:, 1],\n            mode=mode,\n            marker=dict(size=size_list, color=color_list),\n            line=dict(shape='linear', color='rgb(100, 10, 100)', width=2, dash='dot'),\n            text=text_list,\n            textposition=\"top center\",\n            name='trajectory',\n        ))\n\n    # add floor plan\n    floor_plan = Image.open(floor_plan_filename)\n    fig.update_layout(images=[\n        go.layout.Image(\n            source=floor_plan,\n            xref=\"x\",\n            yref=\"y\",\n            x=0,\n            y=height_meter,\n            sizex=width_meter,\n            sizey=height_meter,\n            sizing=\"contain\",\n            opacity=1,\n            layer=\"below\",\n        )\n    ])\n\n    # configure\n    fig.update_xaxes(autorange=False, range=[0, width_meter])\n    fig.update_yaxes(autorange=False, range=[0, height_meter], scaleanchor=\"x\", scaleratio=1)\n    fig.update_layout(\n        title=go.layout.Title(\n            text=title or \"No title.\",\n            xref=\"paper\",\n            x=0,\n        ),\n        autosize=True,\n        width=900,\n        height=200 + 900 * height_meter \/ width_meter,\n        template=\"plotly_white\",\n    )\n\n    if show:\n        fig.show()\n\n    return fig\n\n\ndef visualize_heatmap(position, value, floor_plan_filename, width_meter, height_meter, colorbar_title=\"colorbar\", title=None, show=False):\n    fig = go.Figure()\n\n    # add heat map\n    fig.add_trace(\n        go.Scatter(x=position[:, 0],\n                   y=position[:, 1],\n                   mode='markers',\n                   marker=dict(size=7,\n                               color=value,\n                               colorbar=dict(title=colorbar_title),\n                               colorscale=\"Rainbow\"),\n                   text=value,\n                   name=title))\n\n    # add floor plan\n    floor_plan = Image.open(floor_plan_filename)\n    fig.update_layout(images=[\n        go.layout.Image(\n            source=floor_plan,\n            xref=\"x\",\n            yref=\"y\",\n            x=0,\n            y=height_meter,\n            sizex=width_meter,\n            sizey=height_meter,\n            sizing=\"contain\",\n            opacity=1,\n            layer=\"below\",\n        )\n    ])\n\n    # configure\n    fig.update_xaxes(autorange=False, range=[0, width_meter])\n    fig.update_yaxes(autorange=False, range=[0, height_meter], scaleanchor=\"x\", scaleratio=1)\n    fig.update_layout(\n        title=go.layout.Title(\n            text=title or \"No title.\",\n            xref=\"paper\",\n            x=0,\n        ),\n        autosize=True,\n        width=900,\n        height=200 + 900 * height_meter \/ width_meter,\n        template=\"plotly_white\",\n    )\n\n    if show:\n        fig.show()\n\n    return fig","6b1e8b81":"def visualize_train_trajectory(path):\n    _id, floor = path.split(\"\/\")[:2]\n    \n    train_floor_data = read_data_file(os.path.join(\"..\/input\/indoor-location-navigation\/train\/\", path))\n    with open(f\"..\/input\/indoor-location-navigation\/metadata\/{_id}\/{floor}\/floor_info.json\") as f:\n        train_floor_info = json.load(f)\n\n    return visualize_trajectory(\n        train_floor_data.waypoint[:, 1:3], \n        f\"..\/input\/indoor-location-navigation\/metadata\/{_id}\/{floor}\/floor_image.png\",\n        train_floor_info[\"map_info\"][\"width\"], \n        train_floor_info[\"map_info\"][\"height\"],\n    )","5413f0fa":"visualize_train_trajectory(\"5a0546857ecc773753327266\/B1\/5e15730aa280850006f3d005.txt\")","15321dde":"visualize_train_trajectory(\"5cd56b67e2acfd2d33b596bd\/F2\/5cf5dd5bd1378b0009268ad5.txt\")","b9aa022a":"visualize_train_trajectory(\"5cd56b5ae2acfd2d33b5854a\/B1\/5d07424a1a69370008bc5de5.txt\")","5ad71e5a":"visualize_train_trajectory('5cd56b5ae2acfd2d33b58549\/5F\/5d06134c4a19c000086c4324.txt')","70b3b0a2":"sample_file = read_data_file(\"..\/input\/indoor-location-navigation\/train\/5a0546857ecc773753327266\/F2\/5dccf516c04f060006e6e3c9.txt\")\ntemp = np.concatenate([sample_file.acce, \n                       sample_file.acce_uncali[:, 1:],\n                       sample_file.gyro[:, 1:],\n                       sample_file.gyro_uncali[:, 1:],\n                       sample_file.magn[:, 1:],\n                       sample_file.magn_uncali[:, 1:],\n                       sample_file.ahrs[:, 1:],\n                      ], axis=1)\n\nimu_df = pd.DataFrame(temp)\n\nimu_df.columns = ['timestamp', 'acce_x','acce_y', 'acce_z','acce_uncali_x','acce_uncali_y', 'acce_uncali_z',\n              'gyro_x','gyro_y', 'gyro_z','gyro_uncali_x','gyro_uncali_y', 'gyro_uncali_z',\n              'magn_x','magn_y', 'magn_z','magn_uncali_x','magn_uncali_y', 'magn_uncali_z',\n              'ahrs_x','ahrs_y', 'ahrs_z']\n\ndisplay(imu_df.head(8).style.set_caption('IMU Data'))","d84fd0d4":"def plot_imu_signals(col, uncali = True):\n    fig, ax = plt.subplots(nrows=3, ncols=1, figsize=(14, 9))\n    ax[0].set_ylabel(f\"{col}_x\")\n    ax[1].set_ylabel(f\"{col}_y\")\n    ax[2].set_ylabel(f\"{col}_z\")\n    if uncali:\n        sns.lineplot(x=imu_df.timestamp, y=imu_df[f\"{col}_uncali_x\"], ax=ax[0], label = 'uncali', color='orange')\n        sns.lineplot(x=imu_df.timestamp, y=imu_df[f\"{col}_uncali_y\"], ax=ax[1], label = 'uncali', color='orange')\n        sns.lineplot(x=imu_df.timestamp, y=imu_df[f\"{col}_uncali_z\"], ax=ax[2], label = 'uncali', color='orange')\n        ax[0].set_ylabel(f\"{col}_x \\n(calib.\/uncalib.)\")\n        ax[1].set_ylabel(f\"{col}_y \\n(calib.\/uncalib.)\")\n        ax[2].set_ylabel(f\"{col}_z \\n(calib.\/uncalib.)\")\n    \n    sns.lineplot(x=imu_df.timestamp, y=imu_df[f\"{col}_x\"], ax=ax[0], label='cali', color='cornflowerblue')\n    sns.lineplot(x=imu_df.timestamp, y=imu_df[f\"{col}_y\"], ax=ax[1], label='cali', color='cornflowerblue')\n    sns.lineplot(x=imu_df.timestamp, y=imu_df[f\"{col}_z\"], ax=ax[2], label='cali', color='cornflowerblue')\n\n    for i in range(3):\n        ax[i].set_xlim([start_time, end_time])\n    plt.tight_layout()\n    plt.show()\n    \nplot_imu_signals('acce')\n    ","8ce71a31":"imu_df.acce_z.mean() #\uc2e4\uc81c z\ucd95 \uac00\uc18d\ub3c4\uacc4\uc758 \ud3c9\uade0. \uc911\ub825\uac00\uc18d\ub3c4\uc640 \ub9e4\uc6b0 \uc720\uc0ac\ud558\ub2e4. ","2740b74d":"def calc_from_pos(timestamp, pos):\n    df = pd.DataFrame({'timestamp' : timestamp, 'position' : pos})\n    df['timestamp_ms'] = df['timestamp'].apply(lambda x: datetime.fromtimestamp(x\/1000.0))\n    df['timedelta_ms'] = df['timestamp_ms'].diff()\n    df['timedelta_s'] = df['timedelta_ms'].apply(lambda x: x.total_seconds()).fillna(0)\n    df['velocity'] = (df['position'].diff() \/ df['timedelta_s']).fillna(0)\n    df['acceleration'] = (df['velocity'].diff() \/ df['timedelta_s']).fillna(0)\n\n    return df[['timestamp', 'timestamp_ms', 'timedelta_s', 'position', 'velocity', 'acceleration']]\n\ndef calc_from_acce(timestamp, acce, p_0):\n    df = pd.DataFrame({'timestamp' : timestamp, 'acceleration' : acce})\n    df['timestamp_ms'] = df['timestamp'].apply(lambda x: datetime.fromtimestamp(x\/1000.0))\n    df['timedelta_ms'] = df['timestamp_ms'].diff()\n    df['timedelta_s'] = df['timedelta_ms'].apply(lambda x: x.total_seconds()).fillna(0)\n    df['velocity'] = (df['acceleration']*df['timedelta_s']).cumsum()\n    df['position'] = p_0 + (df['velocity']*df['timedelta_s']).cumsum()\n\n    return df[['timestamp', 'timestamp_ms', 'timedelta_s', 'position', 'velocity', 'acceleration']]\n\na_df = calc_from_acce(pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) * 1000 + start_time, \n               pd.Series([0, 0, 1.2, 1.2, 1.2, 0, 0, 0, -1.2, -1.2, -1.2, 0, 0]), -6)\n# display(a_df.style.set_caption('Calculated Position and Velocity from Acceleration'))\n\nb_df = calc_from_pos(a_df.timestamp, a_df.position)\n# display(b_df.style.set_caption('Calculated Acceleration and Velocity from Position'))\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(14, 6))\nsns.lineplot(x=a_df.timestamp, y=a_df.position, ax=ax, color='cornflowerblue', marker='o', label='Position ($m$)')\nsns.lineplot(x=a_df.timestamp, y=a_df.velocity, ax=ax, color='blue', marker='o', label='Velocity ($m\/s$)')\nsns.lineplot(x=a_df.timestamp, y=a_df.acceleration, ax=ax, color='seagreen', marker='o', label='Acceleration ($m\/s^2$)')\n\nplt.show()","c3f4f716":"waypoint_df = pd.DataFrame(sample_file.waypoint)\nwaypoint_df.columns = ['timestamp', 'waypoint_x','waypoint_y']\n# Resampled\nimu_df_temp = calc_from_acce(imu_df.timestamp, \n                      (-1)*imu_df.acce_x, \n                      waypoint_df.waypoint_x.iloc[0])\n\nimu_df_resampled = imu_df[['timestamp', 'acce_x' ]].copy()\nimu_df_resampled.index = imu_df_resampled['timestamp'].apply(lambda x: datetime.fromtimestamp(x\/1000.0))\nimu_df_resampled = imu_df_resampled.resample('1S').mean().reset_index(drop=True)\nimu_df_resampled.acce_x.iloc[0] = 0\nimu_df_resampled.head()\n\nimu_df_temp_resampled = calc_from_acce(imu_df_resampled.timestamp, \n                      (-1)*imu_df_resampled.acce_x, \n                      waypoint_df.waypoint_x.iloc[0])\nwaypoint_df_temp = calc_from_pos(waypoint_df.timestamp, waypoint_df.waypoint_x)\n# display(imu_df_temp_resampled.head(5).style.set_caption('Calculated Position and Velocity from resampled acce_x'))\n\nfig, ax = plt.subplots(nrows=3, ncols=1, figsize=(14, 14))\n\nsns.lineplot(x=waypoint_df_temp.timestamp, y=waypoint_df_temp.position, ax=ax[0], color='orange', marker='o', label='waypoint')\nsns.lineplot(x=imu_df_temp.timestamp, y=imu_df_temp.position, ax=ax[0], color='cornflowerblue', label='acce_x')\nsns.lineplot(x=imu_df_temp_resampled.timestamp, y=imu_df_temp_resampled.position, ax=ax[0], color='green', marker='o', label='resampled acce_x')\nax[0].set_ylabel('Position x \\n($m$)')\n\nsns.lineplot(x=waypoint_df_temp.timestamp, y=waypoint_df_temp.velocity, ax=ax[1], color='orange', marker='o', label='waypoint')\nsns.lineplot(x=imu_df_temp.timestamp, y=imu_df_temp.velocity, ax=ax[1], color='cornflowerblue', label='acce_x')\nsns.lineplot(x=imu_df_temp_resampled.timestamp, y=imu_df_temp_resampled.velocity, ax=ax[1], color='green', marker='o', label='resampled acce_x')\n\nax[1].set_ylabel('Velocity x \\n($m\/s$)')\n\nsns.lineplot(x=waypoint_df_temp.timestamp, y=waypoint_df_temp.acceleration, ax=ax[2], color='orange', marker='o', label='waypoint')\nsns.lineplot(x=imu_df_temp.timestamp, y=imu_df_temp.acceleration, ax=ax[2], color='cornflowerblue', label='acce_x')\nsns.lineplot(x=imu_df_temp_resampled.timestamp, y=imu_df_temp_resampled.acceleration, ax=ax[2], color='green', marker='o', label='resampled acce_x')\n\nax[2].set_ylabel('Acceleration x \\n($m\/s^2$)')\n\nplt.show()","92906245":"!cp -r ..\/input\/indoor-locationnavigation-2021\/indoor-location-competition-20-master\/* .\/","83dd06a2":"# GitHub functions\nfrom main import calibrate_magnetic_wifi_ibeacon_to_position\nfrom main import extract_magnetic_strength\n# GitHub functions\nfrom visualize_f import visualize_trajectory, visualize_heatmap\nbase = '..\/input\/indoor-location-navigation'\nsite_path = f\"{base}\/metadata\/{site}\/*\/floor_image.png\"\npath = f'{base}\/train\/5cd56b5ae2acfd2d33b58549\/5F\/5d06134c4a19c000086c4324.txt'\n\n# Read in a sample\nexample = read_data_file(path)\n\n# ~~~~~~~~~\n\n# Returns timestamp, x, y values\ntrajectory = example.waypoint\n# Removes timestamp (we only need the coordinates)\ntrajectory = trajectory[:, 1:3]\n\n# Prepare floor_plan coresponding with our example\nsite = path.split(\"\/\")[4]\nfloorNo = path.split(\"\/\")[5]\nfloor_plan_filename = f'{base}\/metadata\/{site}\/{floorNo}\/floor_image.png'\n\n# Prepare width_meter & height_meter\n### (taken from the .json file)\njson_plan_filename = f'{base}\/metadata\/{site}\/{floorNo}\/floor_info.json'\nwith open(json_plan_filename) as json_file:\n    json_data = json.load(json_file)\n    \nwidth_meter = json_data[\"map_info\"][\"width\"]\nheight_meter = json_data[\"map_info\"][\"height\"]\n\n# Extracting the magnetic strength\nmwi_datas = calibrate_magnetic_wifi_ibeacon_to_position([path])\nmagnetic_strength = extract_magnetic_strength(mwi_datas)\n\nheat_positions = np.array(list(magnetic_strength.keys()))\nheat_values = np.array(list(magnetic_strength.values()))\n\n# Visualize the heatmap\nvisualize_heatmap(heat_positions, \n                  heat_values, \n                  floor_plan_filename,\n                  width_meter, \n                  height_meter, \n                  colorbar_title='mu tesla', \n                  title='Magnetic Strength',\n                  g_size=755,\n                  colorscale='temps')","a82993ca":"# GitHub Libraries\nfrom main import extract_wifi_rssi, extract_wifi_count\n\n# Get WiFi data\nwifi_rssi = extract_wifi_rssi(mwi_datas)\nprint(f'This floor has {len(wifi_rssi.keys())} wifi aps (access points).')\n\nwifi_counts = extract_wifi_count(mwi_datas)\nheat_positions = np.array(list(wifi_counts.keys()))\nheat_values = np.array(list(wifi_counts.values()))\n# filter out positions that no wifi detected\nmask = heat_values != 0\nheat_positions = heat_positions[mask]\nheat_values = heat_values[mask]\n\n# The heatmap\nvisualize_heatmap(heat_positions, \n                  heat_values, \n                  floor_plan_filename, \n                  width_meter, \n                  height_meter, \n                  colorbar_title='count', \n                  title=f'WiFi Count',\n                  g_size=755,\n                  colorscale='temps')","f88287ea":"from main import extract_ibeacon_rssi\n\n# Getting the iBeacon data\nibeacon_rssi = extract_ibeacon_rssi(mwi_datas)\nprint(f'This floor has {len(ibeacon_rssi.keys())} ibeacons.')\nibeacon_ummids = list(ibeacon_rssi.keys())\ntarget_ibeacon = ibeacon_ummids[0]\nheat_positions = np.array(list(ibeacon_rssi[target_ibeacon].keys()))\nheat_values = np.array(list(ibeacon_rssi[target_ibeacon].values()))[:, 0]\n\n# The heatmap\nvisualize_heatmap(heat_positions, \n                  heat_values, \n                  floor_plan_filename, \n                  width_meter, \n                  height_meter, \n                  colorbar_title='dBm', \n                  title='iBeacon RSSE',\n                  g_size=755,\n                  colorscale='temps')","49a840cf":"geojson_map.json \ud30c\uc77c\uc5d0 \uc788\ub294 \uacbd\ub3c4\uc640 \uc704\ub3c4 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud574 \uac01 \uc9c0\uc5ed\uc744 \uc9c0\ub3c4 \uc704\uc5d0 \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4.","62684eda":"\uc2e4\uc81c \uc704\uce58\uc640 \uac00\uc18d\ub3c4\uacc4\uac04\uc758 \uad00\uacc4\uc5d0 \uc624\ub958\uac00 \ub9ce\uc544 \ubcf4\uc785\ub2c8\ub2e4. \uc758\ubbf8\uc788\ub294 \uc704\uce58 \uc608\uce21\uc744 \uc704\ud574\uc11c\ub294 \uac00\uc18d\ub3c4\uacc4\uc758 \ub370\uc774\ud130\ub97c \ub354 \uc88b\uc740 \ubc29\ubc95\uc73c\ub85c \ubcc0\ud658\ud574\uc57c \ud560 \ud544\uc694\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. ","9d66ff02":"# **Metadata**\n\n* floor_image.png : \uac01 \uce35\uc758 \ud3c9\uba74\ub3c4\uc785\ub2c8\ub2e4. \uba87 \uac00\uc9c0\ub97c \uc2dc\uac01\ud654\ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n","fd05a110":"* train\/test txt \ud30c\uc77c\uc758 \ud615\ud0dc\n\n\uac01 \ud30c\uc77c\uc758 feature\ub4e4\uacfc \uadf8 \ubaa8\uc591\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. \uac01\uc790 \ub2e4\ub978 \uc9c0\uc5ed\uc774\ub098 \uc2dc\uac04\ub300\ub9c8\ub2e4 feature\ub4e4\uc758 \ubaa8\uc591\uc774 \uc11c\ub85c \ub2e4\ub985\ub2c8\ub2e4. \uac01 \uc9c0\uc5ed\ub4e4\uc758 \uc13c\uc11c, \uc640\uc774\ud30c\uc774 \uacf5\uc720\uae30 \ub4f1\uc758 \uc218\uac00 \ubaa8\ub450 \ub2e4\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub610\ud55c, \ud55c \uacbd\ub85c\uc5d0 \ud3ec\ud568\ub41c \uc704\uce58\ub4e4\uc758 \uac1c\uc218\uac00 \ucc28\uc774\ub0a9\ub2c8\ub2e4. ","1be93feb":"* floor_info.json : \uc8fc\ub85c \uac01 \uce35\uc758 \ud3ed\uacfc \ub108\ube44 \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","52715f44":"# **\ud30c\uc77c \uad6c\uc870**\n\n* train - \ud6c8\ub828\uc744 \uc704\ud55c \ub370\uc774\ud130\uc785\ub2c8\ub2e4. '\uac01 \uc9c0\uc5ed > \uac01 \uce35 > \uac01 \uc2dc\uac04\ub300\uc758' txt \ud30c\uc77c \uc758 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. \n* test - \uc608\uce21\ud558\uae30 \uc704\ud55c \ub370\uc774\ud130\uc785\ub2c8\ub2e4. train\uacfc \uad6c\uc870\uac00 \ub3d9\uc77c\ud558\uc9c0\ub9cc \uc704\uce58 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n* metadata - \uac01 \uc9c0\uc5ed\uacfc \uce35\uc5d0 \uad00\ub828\ud55c \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \n    * floor_image.png : \uac01 \uce35\uc758 \ud3c9\uba74\ub3c4\n    * floor_info.json : \uac01 \uce35\uc758 \uc815\ubcf4\uac00 \uc788\ub294 json \ud30c\uc77c\n    * geojson_map.json : \uc9c0\uc5ed\uc758 \uc704\uce58\ub97c \uc54c\ub824\uc8fc\ub294 json \ud30c\uc77c\n\n![image.png](attachment:image.png)","0e0f60ad":"* Waypoint : \uc0ac\ub78c\uc774 \uc774\ub3d9\ud55c \uacbd\ub85c\uc758 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc2dc\uac01\ud654\ud558\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. ","4071f062":"\uc2dc\uac04\uc5d0 \ub530\ub978 \uac00\uc18d\ub3c4\uc758 \ubcc0\ud654\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uadf8\ub798\ud504\uc785\ub2c8\ub2e4. \uba3c\uc800 z\ucd95 \ubc29\ud5a5\uc758 \uac00\uc18d\ub3c4\uacc4\ubd80\ud130 \ubcf4\uba74, \uc8fc\ub85c 10 \ubd80\uadfc\uc744 \uae30\uc900\uc73c\ub85c \uc704\uc544\ub798\ub85c \uc9c4\ub3d9\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc911\ub825\uac00\uc18d\ub3c4 g\uac00 \uc57d 9.8\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. ","568e8db4":"* Magnetic Strength (\uc790\uae30\uc7a5 \uc138\uae30)\n\n\uac74\ubb3c \uc548\uc5d0\uc11c\ub294 \ubaa8\ub450 \uace0\uc720\uc758 \uc790\uae30\uc7a5\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc790\uae30\uc7a5 \ub370\uc774\ud130\ub294  3\ucc28\uc6d0 \uacf5\uac04\uc5d0 \ud615\uc131\ub41c \uc790\uae30\uc7a5\uc744 x, y, z \ubca1\ud130\ub85c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01 \uc0ac\uc6a9\uc790\uac00 \uc9c0\ub2cc \uc2a4\ub9c8\ud2b8\ud3f0\uc774 \uace0\uc720\ud55c \uc790\uae30\uc7a5 \uc548\uc5d0\uc11c \uc6b4\ub3d9\ud558\uba70 \uc790\uae30\uc801 \ud30c\ub3d9\uc744 \uc13c\uc11c\ub85c \uac10\uc9c0\ud569\ub2c8\ub2e4. \uac74\ubb3c\uc758 \uac01 \uc704\uce58\ub098 \uc6b4\ub3d9\ub7c9 \ub4f1\uc5d0 \ub530\ub77c\uc11c \uc790\uae30\uc7a5\uc758 \uc138\uae30\ub294 \uc27d\uac8c \ubc14\ub014 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n\uc544\ub798\uc758 \uc9c0\ub3c4\ub294 \uacbd\ub85c\uc5d0 \ub530\ub978 \uc790\uae30\uc7a5\uc758 \uc138\uae30 \ubcc0\ud654\ub97c \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uac74\ubb3c\uc758 \uc67c\ucabd \ubd80\uadfc\uc5d0\uc11c\ub294 \uc790\uae30\uc7a5\uc758 \uc138\uae30\uac00 \uc57d\ud55c \ubc18\uba74, \uc624\ub978\ucabd \uc544\ub798 \ubd80\uadfc\uc5d0\uc11c\ub294 \uc0c1\ub300\uc801\uc73c\ub85c \uc790\uae30\uc7a5\uc758 \uc138\uae30\uac00 \uac15\ud55c \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","e5362eba":"\ub2e4\uc74c\uc73c\ub85c x\ucd95\uacfc y\ucd95 \ubc29\ud5a5\uc758 \uac00\uc18d\ub3c4\uacc4\uc785\ub2c8\ub2e4. \uc704 \uac00\uc18d\ub3c4 \uac12\uc744 \uc774\uc6a9\ud574 \uc18d\ub3c4 \uac12\uc744 \uad6c\ud558\uace0, \uadf8\uac83\uc744 \uc2e4\uc81c \uc704\uce58\uc640 \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n\uba3c\uc800, \uc18d\ub3c4\uc640 \uac00\uc18d\ub3c4, \uc2e4\uc81c \uc704\uce58\uac04\uc758 \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud55c \uc608\uc2dc\uc785\ub2c8\ub2e4. (\uace0\ub4f1\ud559\uc0dd \ub54c \ubc30\uc6b4 \uac04\ub2e8\ud55c \ubb3c\ub9ac\uc785\ub2c8\ub2e4!)","f7977208":"# **Train\/Test**\n\n* \uc720\ub2c9\uc2a4 \uc2dc\uac04 : \uc774 \ub300\ud68c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc2dc\uac04 \ub2e8\uc704\uc785\ub2c8\ub2e4. 1970\ub144 1\uc6d4 1\uc77c\uc744 0\uc73c\ub85c \uc124\uc815\ud558\uba70, \uc815\uc218 \ud615\ud0dc\ub85c \ud45c\ud604\uc774 \ub429\ub2c8\ub2e4. \ndatetime \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud1b5\ud558\uc5ec \ubcf4\ud1b5 \uc0ac\uc6a9\ub418\ub294 \ub144-\uc6d4-\uc77c-\uc2dc-\ubd84-\ucd08 \ud615\ud0dc\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc720\ub2c9\uc2a4 \uc2dc\uac04\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ub2e4\uc74c [\ub9c1\ud06c](https:\/\/ko.wikipedia.org\/wiki\/%EC%9C%A0%EB%8B%89%EC%8A%A4_%EC%8B%9C%EA%B0%84)\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. \n\n\uc2dc\uc791 \uc2dc\uac01\uacfc \uc885\ub8cc \uc2dc\uac01\uc774 \uc720\ub2c9\uc2a4 \uc2dc\uac04 \ud615\ud0dc\ub85c \uac01 txt \ud30c\uc77c\ub9c8\ub2e4 \uae30\uc7ac\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. ","e1e8a12d":"* Accelerometer (\uac00\uc18d\ub3c4\uacc4) : \uc18d\ub3c4\uc758 \ubcc0\ud654\ub7c9\uc778 \uac00\uc18d\ub3c4\ub97c \uce21\uc815\ud569\ub2c8\ub2e4. x, y, z \ucd95 \ubc29\ud5a5\uc73c\ub85c\uc758 \uac00\uc18d\ub3c4 \uc815\ubcf4\uac00 \ub2f4\uaca8\uc788\uc2b5\ub2c8\ub2e4. ","5465c425":"\uae30\ubcf8\uc801\uc73c\ub85c \uc774\ud574\ud558\uba74 \uc88b\uc740 \uac83\uc740 \uc704\uce58, \uc18d\ub3c4, \uac00\uc18d\ub3c4\uac04\uc758 \uad00\uacc4\uc785\ub2c8\ub2e4. \uc704\uce58\uc758 \ubcc0\ud654\ub7c9\uc740 \uc18d\ub3c4\uc774\uba70, \uc18d\ub3c4\uc758 \ubcc0\ud654\ub7c9\uc740 \uac00\uc18d\ub3c4\uc785\ub2c8\ub2e4. \uc704 \uadf8\ub798\ud504\uc5d0\uc11c -5\uc758 \uc704\uce58\uc5d0\uc11c \uc18d\ub3c4\ub97c \ub192\uc5ec \uc774\ub3d9\ud558\ub2e4\uac00 5 \uc815\ub3c4\uc5d0\uc11c \ub4f1\uc18d\uc73c\ub85c \uc6b4\ub3d9\ud558\uba70, 10 \uc815\ub3c4\ubd80\ud130 \uc18d\ub3c4\ub97c \uc904\uc5ec 15 \uc815\ub3c4\uc5d0\uc11c \uba48\ucd94\uac8c \ub429\ub2c8\ub2e4. \uc18d\ub3c4\ub97c \ub192\uc774\ub294 \uad6c\uac04\uc5d0\uc11c\ub294 \uac00\uc18d\ub3c4\uac00 \uc591\uc218\uc774\uba70, \uc18d\ub3c4\ub97c \uc904\uc774\ub294 \uac10\uc18d \uad6c\uac04\uc5d0\uc11c\ub294 \uac00\uc18d\ub3c4\uac00 \uc74c\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \n\n\uc704 \uadf8\ub798\ud504\uc5d0\uc11c \uc2e4\uc81c \uc704\uce58\ub294 \uba48\ucd94\uc5c8\uc9c0\ub9cc \uac00\uc18d\ub3c4\uc640 \uc18d\ub3c4\ub294 \uc5ec\uc804\ud788 0\uc774 \uc544\ub2cc \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. (timestamp 67000 \uc988\uc74c) \uc774\uac83\uc5d0\uc11c \ubcf4\uc544 \uc2e4\uc81c \ub370\uc774\ud130\uc758 \uac00\uc18d\ub3c4\uacc4\ub85c \uc608\uce21\ud55c \uc704\uce58\ub294 \uc815\ud655\ud558\uc9c0 \uc54a\uace0 \uc624\ub958\uac00 \uc874\uc7ac\ud560 \uac83\uc785\ub2c8\ub2e4. \n\n\uc774\uc81c \uc704\uc758 \uac00\uc18d\ub3c4\uacc4 \ub370\uc774\ud130\uc640 \uc2e4\uc81c \uc704\uce58\uc640\uc758 \uad00\uacc4\ub97c \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ucd08\ub85d\uc0c9 resampled data\ub294 \uac00\uc18d\ub3c4\uacc4\uc758 \uc2dc\uac04 \uac04\uaca9\uc744 0.2\ucd08\ub85c \uc870\uc815\ud558\uc5ec \ub098\ud0c0\ub0b8 \uac83\uc785\ub2c8\ub2e4. (\ud558\ub298\uc0c9\uc740 1\ucd08 \uac04\uaca9)","61cf5d1b":"* geojson_map.json : \uac01 \uc9c0\uc5ed\uc758 \uc704\uce58 (\uc704\ub3c4 \ubc0f \uacbd\ub3c4), \uac01 \uce35\uc758 \ubaa8\uc591\uc774 \uc790\uc138\ud558\uac8c \uc124\uba85 \ub418\uc5b4\uc788\ub294 json \ud30c\uc77c\uc785\ub2c8\ub2e4.","0eebfabc":"**\ub3c4\uc6c0\uc774 \ub418\uc5c8\ub2e4\uba74 \uc5c5\ubcf4\ud2b8 (+upvote) \ud55c \ubc88 \uc529 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4:)**","9d329204":"* Wifi\n\uc640\uc774\ud30c\uc774\ub294 \uac00\uc7a5 \uc911\uc694\ud55c feature\uc911\uc5d0 \ud558\ub098\uc785\ub2c8\ub2e4. \uc640\uc774\ud30c\uc774\ub9cc \uc774\uc6a9\ud558\ub354\ub77c\ub3c4 \ub192\uc740 \uc815\ud655\ub3c4\ub85c \uc0ac\uc6a9\uc790\uc758 \uc704\uce58\ub97c \uc608\uce21\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\uc640\uc774\ud30c\uc774\ub294 \ud55c \uacf5\uc720\uae30 \ub2f9 \ub450\uac1c\uc758 \uc544\uc774\ub514\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. SSID\ub294 \ubcf4\ud1b5 \ubcf4\uc5ec\uc9c0\ub294 \uc640\uc774\ud30c\uc774\uc758 \uc774\ub984\uc73c\ub85c, \uad00\ub9ac\uc790\uac00 \uc6d0\ud558\ub294 \uac83\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. BSSID\ub294 \uc640\uc774\ud30c\uc774 \uacf5\uc720\uae30\uc758 \uace0\uc720\ud55c ID\ub85c \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \uac83\uc774 \ud2b9\uc9d5\uc785\ub2c8\ub2e4. \n\n\uc774 \ub300\ud68c\uc758 \uc640\uc774\ud30c\uc774 \ub370\uc774\ud130\ub294 \uc640\uc774\ud30c\uc774 \uacf5\uc720\uae30\ub85c\ubd80\ud130 \uc624\ub294 \uc2e0\ud638\uc758 \uc138\uae30\ub97c \uac01\uac01 \uce21\uc815\ud558\uc5ec \uacbd\ub85c\ub9c8\ub2e4 \uae30\ub85d\ud55c \uac83\uc785\ub2c8\ub2e4. \uc774 \uc815\ubcf4\ub97c \ud1b5\ud574 \uc0ac\uc6a9\uc790\uc758 \uc704\uce58\ub97c \uc608\uce21\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc9c0\ub3c4\ub294 \uacbd\ub85c \uc8fc\ubcc0\uc758 \uc640\uc774\ud30c\uc774 \uacf5\uc720\uae30 \uc704\uce58\ub97c \ud45c\uc2dc\ud55c \uac83\uc785\ub2c8\ub2e4. ","39ad0017":"* Blutooth iBeacon : \ube14\ub8e8\ud22c\uc2a4\ub97c \uae30\ubc18\uc73c\ub85c \uc791\ub3d9\ud558\ub294 \ube44\ucf58\uc740 \uc640\uc774\ud30c\uc774\uc640 \ube44\uc2b7\ud55c \uc6d0\ub9ac\ub85c \uc0ac\uc6a9\uc790\uc758 \uc704\uce58\ub97c \ucd94\uc801\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c \ube44\ucf58\uc774 \ub2e8 \ud558\ub098\ub3c4 \uc5c6\ub294 \uc9c0\uc5ed\uc774 \uc788\uc5b4 \uc8fc\uc758\ub97c \uc694\ud569\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc2dc\ub294 3\uac1c\uc758 \ube44\ucf58\uc774 \uc788\uc73c\uba70 \uac01 \uacbd\ub85c\uc5d0\uc11c \uce21\uc815\ub41c \uc138\uae30\ub97c \ud45c\uc2dc\ud55c \uac83\uc785\ub2c8\ub2e4. \n\n\ube44\ucf58\uc758 \uc138\uae30 \ub2e8\uc704\ub294 dBm (\ub370\uc2dc\ubca8 \ubc00\ub9ac\uc640\ud2b8)\ub85c, \ubaa8\ub450 \uc74c\uc218\uc774\uba70 0\uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \ub354 \uac15\ud55c \uc138\uae30\uc785\ub2c8\ub2e4. ","8f492d5d":"\uacc4\uc18d\ud574\uc11c \ucd94\uac00 \uc608\uc815\uc785\ub2c8\ub2e4.... ","86a0bf2f":"# **\ub300\ud68c \uc18c\uac1c**\n\n\uc774 \ub300\ud68c\ub294 Microsoft Research\uc5d0\uc11c \uc8fc\ucd5c\ud558\ub294 Indoor Location & Navigation \ub300\ud68c\uc785\ub2c8\ub2e4. \ub300\ud68c\uc758 \uc774\ub984\uc5d0\uc11c\ubd80\ud130 \uc54c \uc218 \uc788\ub4ef\uc774, \uc2e4\ub0b4\uc5d0\uc11c\uc758 \uc0ac\ub78c \uc704\uce58 \ubc0f \uacbd\ub85c\ub97c \uc608\uce21\ud558\ub294 \uac83\uc744 \ubaa9\uc801\uc73c\ub85c \ud569\ub2c8\ub2e4. \uc2a4\ub9c8\ud2b8\ud3f0\uc5d0\uc11c \uc218\uc9d1\ud560 \uc218 \uc788\ub294 \uc640\uc774\ud30c\uc774 \uc2e0\ud638, \uac00\uc18d\ub3c4\uacc4, \uc790\uae30\uc7a5 \uc13c\uc11c \ub4f1\uc744 \uc774\uc6a9\ud558\uc5ec \uc2e4\ub0b4\uc5d0\uc11c\uc758 \uc704\uce58\uc640 \ub3d9\uc120\uc744 \uc608\uce21\ud569\ub2c8\ub2e4. LGBM \ub4f1 GBDT \ubaa8\ub378\uc774\ub098 RNN \uac19\uc740 \ub525\ub7ec\ub2dd\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n\ub300\ud68c\uc5d0 \ub4f1\uc7a5\ud558\ub294 \uc7a5\uc18c\ub4e4\uc740 \uc8fc\ub85c \uc911\uad6d\uc5d0 \uc2e4\uc81c\ub85c \uc704\uce58\ud55c \uc1fc\ud551\ubab0, \ucee8\ubca4\uc158 \uc13c\ud130 \ub4f1 \uac70\ub300\ud55c \uc2e4\ub0b4 \uacf5\uac04\uc774 \uc788\ub294 \uc7a5\uc18c\ub4e4\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\ub098\ub77c\ub85c \uc608\ub97c \ub4e4\uc790\uba74 \ucf54\uc5d1\uc2a4\uc640 \ube44\uc2b7\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4. \n\n\uc8fc\ub85c csv \ud30c\uc77c\ub85c \uc8fc\uc5b4\uc9c0\ub294 \ub2e4\ub978 \ub300\ud68c\ub4e4\uacfc \ub2ec\ub9ac \uc774 \ub300\ud68c\ub294 txt \ud30c\uc77c\uc744 \uc774\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ub610\ud55c, \uc774\ubbf8\uc9c0 \ud30c\uc77c \ubc0f json \ub4f1\uc758 \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130\uac00 \ub9ce\uc544 \ud6c8\ub828\uc5d0 \uc88b\uac8c \ub370\uc774\ud130\ub97c \uc804\ucc98\ub9ac\ud558\ub294 \uac83\uc5d0 \ud070 \ub178\ub825\uc774 \ud544\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4. \uc774 notebook\uc5d0\uc11c\ub294 \ub300\ud68c\uc758 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uad6c\uc870\uc640 \uac01 feature\ub4e4\uc744 \uc124\uba85\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. ","2b9777c1":"This notebook is for Korean.\n\nI refer to these codes for making this notebook. Special thanks to @iamleonie, @ihelon, @andradaolteanu, @tomwarrens.\n* https:\/\/www.kaggle.com\/iamleonie\/intro-to-indoor-location-navigation\n* https:\/\/www.kaggle.com\/ihelon\/indoor-location-exploratory-data-analysis\n* https:\/\/www.kaggle.com\/andradaolteanu\/indoor-navigation-complete-data-understanding\n* https:\/\/www.kaggle.com\/tomwarrens\/indoor-location-and-navigation-start"}}