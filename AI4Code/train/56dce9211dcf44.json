{"cell_type":{"7d507d87":"code","a0493846":"code","013714d5":"code","83377f99":"code","a8eed3fc":"code","197b4907":"code","5e314db1":"code","e8ae8eee":"code","483217b7":"code","cb03a828":"code","afe08c7f":"code","cb60cb2d":"code","9f2ba16d":"code","55143629":"code","c6484ab1":"code","ba0abd38":"code","2d994ace":"code","86e91e5a":"code","e4d55bdb":"code","13e7b77c":"code","7a2f9051":"code","56b22e06":"code","dfca1bd0":"code","635dcf61":"code","a3f10659":"code","b3f21c9f":"code","5d664f1b":"code","79f457ea":"code","3f38543b":"code","948b52c4":"code","e6c3bfb0":"markdown"},"source":{"7d507d87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0493846":"!pip install torch-lr-finder\nimport torch\nfrom PIL import Image\nimport os\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.data import Dataset,DataLoader\nimport torchvision.models as models\nimport albumentations as A\nimport cv2\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch_lr_finder import *\nfrom torch_lr_finder import LRFinder\nimport matplotlib.pyplot as plt\nimport torchvision.models as models\nfrom sklearn.model_selection import train_test_split\nfrom numpy import asarray ","013714d5":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n        os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/resnet18\/resnet18.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/resnet18-333f7ec4.pth'","83377f99":"tfms = transforms.Compose([\n    \n    transforms.RandomRotation(degrees=(-10,10)),\n    transforms.RandomAffine(degrees=(-16, 16), translate=(.1,.1)),\n    transforms.Normalize(mean=(0.1307,), std=(0.3081,))\n                           \n                          ])\nv_tfms = transforms.Compose([\n    transforms.Normalize(mean=(0.1307,), std=(0.3081,))\n])","a8eed3fc":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","197b4907":"df.info()","5e314db1":"df.head()","e8ae8eee":"df.iloc[0,1:]","483217b7":"X, y = df.iloc[:,1:].values, df['label'].values\nX_train, X_valid, Y_train, Y_valid = train_test_split(X, y, test_size=0.2)","cb03a828":"class NumDataset(Dataset):\n    def __init__(self, DataFrame, Labels, Transform, test=False, valid=False):\n        self.df = DataFrame\n        self.transform = Transform\n        self.lbs = Labels\n        self.test = test\n        self.valid = valid\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, index):\n        \n        x = self.df[index].reshape(28,28)\n        x = np.expand_dims(x, axis=0)\n        image = x.astype(np.float32)\n        \n        if self.valid:\n            return v_tfms(torch.tensor(image)), self.lbs[index]\n        elif self.test:\n            return v_tfms(torch.tensor(image))\n        else:\n            image = self.transform(torch.tensor(image))\n            return image, self.lbs[index]\n            \n","afe08c7f":"num_trainset = NumDataset(X_train, Y_train, tfms)\nnum_trainloader = DataLoader(num_trainset, batch_size=64, shuffle=True, num_workers=4)\n\nnum_validset = NumDataset(X_valid, Y_valid, tfms, valid=True)\nnum_validloader = DataLoader(num_validset, batch_size=64, shuffle=True, num_workers=4)","cb60cb2d":"def visualize(image, label):\n    plt.figure(figsize=(4, 3))\n    plt.xlabel(label)\n    plt.imshow(image)\n\nfor i in range(10):\n    visualize(num_trainset[i][0][-1][:], num_trainset[i][1] )","9f2ba16d":"def train_(epocs, loader, model, valid_set, early_stop):\n    best_v_acc = 0.0\n    bad_rds = 0\n    for epoch in range(epocs):  # loop over the dataset multiple times\n        print(\"Training...\")\n        correct = 0\n        total = 0\n        running_loss = 0.0\n        for i, data in enumerate(loader, 0):\n            model.train()\n            # get the inputs; data is a list of [inputs, labels]\n            inputs, labels = data\n            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n\n            # zero the parameter gradients\n            optimizer.zero_grad()\n\n            # forward + backward + optimize\n            outputs = model(inputs)\n            loss=criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            max_index = outputs.max(dim = 1)[1]\n            correct += (max_index == labels).sum().item()\n            total += labels.size(0)\n\n            \n            # print statistics\n            running_loss += loss.item()\n            if i % len(loader) == len(loader) - 1:    \n                print('[epoc: %d, %5d] training loss: %.3f' %\n                      (epoch + 1, i + 1, running_loss \/ len(loader)))\n                running_loss = 0.0\n        print(\"Training Accuracy = {}\".format(100 * correct \/ total))\n        \n        \n        correct = 0\n        total = 0\n        running_loss = 0.0\n        print(\"Validating...\")\n        for i, data in enumerate(valid_set, 0):\n            model.eval()\n            with torch.no_grad():\n                inputs, labels = data\n                inputs, labels = inputs.to('cuda'), labels.to('cuda')\n                outputs = model(inputs)\n                loss=criterion(outputs, labels)\n                max_index = outputs.max(dim = 1)[1]\n                correct += (max_index == labels).sum().item()\n                total += labels.size(0)\n                \n                # print statistics\n                running_loss += loss.item()\n                if i % len(valid_set) == len(valid_set) - 1:    \n                    print('[epoc: %d, %5d] valid loss: %.3f' %\n                          (epoch + 1, i + 1, running_loss \/ len(loader)))\n                    running_loss = 0.0\n                    \n        if (100 * correct \/ total) > best_v_acc:\n            best_v_acc = 100 * correct \/ total\n            print(\"BEST MODEL SAVED\")\n            torch.save(model.state_dict(), 'best_model.pt')\n            bad_rds = 0\n        else:\n            bad_rds += 1\n        print(\"\\nvalid Accuracy = {}\".format(100 * correct \/ total))\n        \n        if bad_rds == early_stop:\n            print(\"EARLY STOPPING AFTER \", bad_rds, \" BAD ROUNDS\")\n            return ","55143629":"model_ft = models.resnet18(pretrained=True)","c6484ab1":"model_ft.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\nnum_ftrs = model_ft.fc.in_features\nmodel_ft.fc = nn.Linear(num_ftrs, 10, bias=True)\nmodel_ft = model_ft.to(\"cuda\")","ba0abd38":"criterion = nn.CrossEntropyLoss()","2d994ace":"\noptimizer = optim.SGD(model_ft.parameters(), lr=1e-7, momentum=0.9)\nlr_finder = LRFinder(model_ft, optimizer, criterion)\nlr_finder.range_test(num_trainloader, end_lr=100, num_iter=100)\nlr_finder.plot()\nlr_finder.reset()","86e91e5a":"optimizer = optim.SGD(model_ft.parameters(), lr=1e-2, momentum=0.9)","e4d55bdb":"train_(20, num_trainloader, model_ft, num_validloader, 3)","13e7b77c":"model_ft.load_state_dict(torch.load('best_model.pt'))\nmodel_ft.eval()","7a2f9051":"test_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsample_sub = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","56b22e06":"test_df.head()","dfca1bd0":"X_test = test_df.iloc[:,:].values\nlen(X_test)","635dcf61":"test_set = NumDataset(X_test, None, v_tfms, test=True)\ntest_loader = DataLoader(test_set, batch_size=64, shuffle=False, num_workers=4)","a3f10659":"len(test_loader)","b3f21c9f":"test_preds = []\nwith torch.no_grad():\n    for x in test_loader:\n        x = x.to('cuda')\n        y_pred = model_ft(x)\n        \n\n        test_preds += y_pred.cpu().numpy().argmax(1).tolist()\n\n    \ntest_preds = np.array(test_preds)","5d664f1b":"test_preds\n","79f457ea":"sample_sub['Label'] = test_preds","3f38543b":"sample_sub","948b52c4":"sample_sub.to_csv('submission.csv', index=False)","e6c3bfb0":"* The transforms should help. Slight angle rotation and affine transformation should make the training data more robust\n* Dataset seems to be working. Lets load some models"}}