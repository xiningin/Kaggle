{"cell_type":{"4211fe1b":"code","9add3516":"code","5efb9853":"code","81b5a0b1":"code","b3c1a4b1":"code","f61b575b":"code","da0bf107":"code","76d5336f":"code","041f7303":"code","2300e3f0":"code","4b15415d":"code","79830cc8":"code","06a392c0":"code","0e1c54e2":"code","f4920cc0":"code","af64de44":"code","9dbc7490":"code","cdc9de91":"code","178179f9":"code","8904bf07":"code","d7456515":"code","32514bfd":"code","a89f555e":"code","2b0de91f":"code","a5b39e92":"code","5f1bda91":"code","9c9ff529":"code","d89b27b9":"code","2b175e81":"code","e929fcb7":"markdown","2550e374":"markdown","badad892":"markdown","ca24989e":"markdown","c7664275":"markdown","241edb18":"markdown","90374714":"markdown","db567198":"markdown","1f3d9a37":"markdown","3114bb0d":"markdown","de57f2a5":"markdown","84f55a31":"markdown","c663926e":"markdown"},"source":{"4211fe1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9add3516":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\"\"\n%matplotlib inline\nsns.set_style(\"darkgrid\")","5efb9853":"true = pd.read_csv(\"..\/input\/fake-and-real-news-dataset\/True.csv\")\nfalse = pd.read_csv(\"..\/input\/fake-and-real-news-dataset\/Fake.csv\")","81b5a0b1":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in true.text.unique())\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","b3c1a4b1":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in false.text.unique())\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","f61b575b":"true['label'] = 1\nfalse['label'] = 0","da0bf107":"news = pd.concat([true,false]) \nnews","76d5336f":"news['text'] = news['text'] + \" \" + news['title']\nnews","041f7303":"df=news.drop([\"date\",\"title\",\"subject\"],axis=1)","2300e3f0":"df","4b15415d":"print(false.shape)\nprint(true.shape)\n","79830cc8":"sns.countplot(x=\"label\", data=news);\nplt.show()","06a392c0":"import nltk\nimport string\nfrom nltk.corpus import stopwords\nimport re","0e1c54e2":"def rem_punctuation(text):\n  return text.translate(str.maketrans('','',string.punctuation))\n\ndef rem_numbers(text):\n  return re.sub('[0-9]+','',text)\n\n\ndef rem_urls(text):\n  return re.sub('https?:\\S+','',text)\n\n\ndef rem_tags(text):\n  return re.sub('<.*?>',\" \",text)\n","f4920cc0":"df['text'].apply(rem_urls)\ndf['text'].apply(rem_punctuation)\ndf['text'].apply(rem_tags)\ndf['text'].apply(rem_numbers)\n","af64de44":"stop = set(stopwords.words('english'))\n\ndef rem_stopwords(df_news):\n    \n    words = [ch for ch in df_news if ch not in stop]\n    words= \"\".join(words).split()\n    words= [words.lower() for words in df_news.split()]\n    \n    return words    ","9dbc7490":"df['text'].apply(rem_stopwords)\n","cdc9de91":"from nltk.stem import WordNetLemmatizer\n#nltk.download('wordnet')\nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_words(text):\n  lemmas = []\n  for word in text.split():\n    lemmas.append(lemmatizer.lemmatize(word))\n  return \" \".join(lemmas)","178179f9":"df['text'].apply(lemmatize_words)\n","8904bf07":"from keras.preprocessing.text import Tokenizer\n\nfrom keras.utils import to_categorical\n","d7456515":"x = df['text'].values\ny= df['label'].values","32514bfd":"tokenizer = Tokenizer()\ntokenizer.fit_on_texts(x)\nword_to_index = tokenizer.word_index\nx = tokenizer.texts_to_sequences(x)","a89f555e":"vocab_size =  len(word_to_index)\noov_tok = \"<OOV>\"\nmax_length = 250\nembedding_dim = 100","2b0de91f":"from keras.preprocessing.sequence import pad_sequences\n\nx = pad_sequences(x, maxlen=max_length)","a5b39e92":"embeddings_index = {};\nwith open('..\/input\/glove6b100dtxt\/glove.6B.100d.txt') as f:\n    for line in f:\n        values = line.split();\n        word = values[0];\n        coefs = np.asarray(values[1:], dtype='float32');\n        embeddings_index[word] = coefs;\n\nembeddings_matrix = np.zeros((vocab_size+1, embedding_dim));\nfor word, i in word_to_index.items():\n    embedding_vector = embeddings_index.get(word);\n    if embedding_vector is not None:\n        embeddings_matrix[i] = embedding_vector;","5f1bda91":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.20,random_state=1)\n","9c9ff529":"import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size+1, embedding_dim, input_length=max_length, weights=[embeddings_matrix], trainable=False),\n    tf.keras.layers.LSTM(64,return_sequences=True),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.LSTM(32),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n\n   \n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","d89b27b9":"epochs = 10\nhistory = model.fit(X_train,y_train,epochs=epochs,validation_data=(X_test,y_test),batch_size=128)","2b175e81":"result = model.evaluate(X_test, y_test)\n# extract those\nloss = result[0]\naccuracy = result[1]\n\n\nprint(f\"[+] Accuracy: {accuracy*100:.2f}%\")","e929fcb7":"* labeling the fake news as 0 and real news as 1","2550e374":"* **Lemmatization** \nperforms vocabulary and morphological analysis of the word and is normally aimed at removing **inflectional endings** only.That isconvert the words to their base or root form eg in \"plays\" it is converted to \"play\" by removing \"s\"","badad892":"* Finding the most used words in fake and real news using Word cloud","ca24989e":"# Loading the dataset","c7664275":"# Tokenizing & Padding\n\n* **Tokenizing**\nis the process of breaking down a text into words. Tokenization can happen on any character, however the most common way of tokenization is to do it on space character.\n\n* **Padding**\nNaturally, some of the sentences are longer or shorter. We need to have the inputs with the same size, for this we use padding","241edb18":"rem_stopwords() is the function for removing stopwords and for converting the words to lower case","90374714":"# Vectorization\n Word vectorization is a methodology in NLP to map words or phrases from vocabulary to a corresponding vector of real numbers \n There are many  method for doing vectorization including  Bag of words,TFIDF or prettrained method such as Word2Vec ,Glove etc\n \n we are using **GloVe** learning algorithm for obtaining vector representations for words devolped by Stanford\n ","db567198":"* containing  23481 fake news and 21417 non fake news","1f3d9a37":"The following 4 functions will help as to remove punctions (<,.'':, etc),numbers,tags and urls","3114bb0d":"## Dataset\nThe dataset consists of about 40000 articles consisting around equal number of fake as well as real news Most of the news where collected from U.S newspapers and contian news about american poltics,world news ,news etc.","de57f2a5":"# data Preproccessing\nWe have to convert the raw messages (sequence of characters) into vectors (sequences of numbers).before that we need to do the following:\n1. Remove punctuation\n2. Remove numbers\n3. Remove tags\n4. Remove urls\n5. Remove stepwords\n6. Change the news to lower case\n7. Lemmatisation ","84f55a31":"* Merging the 2 datasets","c663926e":"# FAKE NEWS CLASSIFICATION USING DEEP LEARNING WITH GloVe\n\n\nIn this notebook i have tried to classify news into 2 classes real and fake using LSTM nueral network .\n\n![](https:\/\/cdn.factcheck.org\/UploadedFiles\/fakenews.jpg)\nI have used pretrained Glove for vectorization and able to achive an accuracy of 99% by the proposed LSTM model.\n"}}