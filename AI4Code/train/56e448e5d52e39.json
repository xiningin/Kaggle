{"cell_type":{"b85d6b16":"code","8109aee8":"code","eb47eb40":"code","9d1651ee":"code","621f37f8":"code","81c7a747":"code","4a00e20d":"code","500b1a46":"code","ee90c5ed":"code","b1156f3c":"code","07ab9fac":"code","8176e2a7":"markdown","6c8957df":"markdown","986cc988":"markdown","1318f9ed":"markdown","df2dfb75":"markdown","c099902b":"markdown","c597917c":"markdown","e462567a":"markdown","8c1bcf54":"markdown","79b1800d":"markdown","bee4f977":"markdown","9d6c3e21":"markdown","b45c3925":"markdown","de07ff65":"markdown","8b9144fa":"markdown","c98e4a87":"markdown"},"source":{"b85d6b16":"!pip3 install imutils","8109aee8":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\nimport cv2\nimport os","eb47eb40":"print(\"[INFO] loading images...\")\nimagePaths = list(paths.list_images(\"..\/input\/brain-mri-images-for-brain-tumor-detection\"))\ndata = []\nlabels = []\n\nfor imagePath in imagePaths:\n\n\tlabel = imagePath.split(os.path.sep)[-2]\n\n\n\timage = cv2.imread(imagePath)\n\timage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\timage = cv2.resize(image, (224, 224))\n\n\n\tdata.append(image)\n\tlabels.append(label)\n\n\ndata = np.array(data) \/ 255.0\nlabels = np.array(labels)\n\n# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)","9d1651ee":"(trainX, testX, trainY, testY) = train_test_split(data, labels,test_size=0.20,\n                                                  stratify=labels, random_state=42)\n\n# initialize the training data augmentation object\ntrainAug = ImageDataGenerator(\n\trotation_range=15,\n\tfill_mode=\"nearest\")\n\n# load the VGG16 network, ensuring the head fully connected layer sets are left off\nbaseModel = VGG16(weights=\"imagenet\", include_top=False,input_tensor=Input(shape=(224, 224, 3)))","621f37f8":"headModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(4, 4))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(64, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)","81c7a747":"INIT_LR = 1e-3\nEPOCHS = 25\nBS = 8","4a00e20d":"model = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n\tlayer.trainable = False\n\n# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])","500b1a46":"print(\"[INFO] training head...\")\nH = model.fit_generator(\n\ttrainAug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=EPOCHS)","ee90c5ed":"print(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs,\n\ttarget_names=lb.classes_))\n\n# compute the confusion matrix and and use it to derive the raw\n# accuracy, sensitivity, and specificity\ncm = confusion_matrix(testY.argmax(axis=1), predIdxs)\ntotal = sum(sum(cm))\nacc = (cm[0, 0] + cm[1, 1]) \/ total\nsensitivity = cm[0, 0] \/ (cm[0, 0] + cm[0, 1])\nspecificity = cm[1, 1] \/ (cm[1, 0] + cm[1, 1])\n\n# show the confusion matrix, accuracy, sensitivity, and specificity\nprint(cm)\nprint(\"acc: {:.4f}\".format(acc))\nprint(\"sensitivity: {:.4f}\".format(sensitivity))\nprint(\"specificity: {:.4f}\".format(specificity))","b1156f3c":"#plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy on Brain Dataset\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.savefig(\"plot.jpg\")","07ab9fac":"# serialize the model to disk\nprint(\"[INFO] saving Brain Tumor detector model...\")\nmodel.save(\"brain.model\", save_format=\"h5\")","8176e2a7":"**There are 95 correct observations out of 102 (total observations)**","6c8957df":"# Plotting the training and validation with respect to loss and accuracy","986cc988":"# Project Description","1318f9ed":"# Saving the model","df2dfb75":"**Credits - Please refer to this article for more details https:\/\/www.theaidream.com\/post\/brain-tumor-detection-using-mask-r-cnn**","c099902b":"# Importing the required libraries","c597917c":"**Initialising learning rate as 1e-3 , epochs as 25 and batch size as 8**","e462567a":"# Building the model","8c1bcf54":"# Training the model","79b1800d":"# Training the data augmented object and loading the VGG16 model","bee4f977":"# Installing imutils package","9d6c3e21":"# Result","b45c3925":"**We are getting an accuracy of 93% with Sensitivity as 0.95 and Specificity as 0.91**","de07ff65":"# Evaluating the model","8b9144fa":"**A brain tumor occurs when abnormal cells form within the brain. There are two main types of tumors: cancerous (malignant) tumors and benign tumors. Malignant tumors can be divided into primary tumors, which start within the brain, and secondary tumors, which have spread from elsewhere, known as brain metastasis tumors.**\n\n**Artificial intelligence (AI) algorithms, particularly Deep learning, have shown remarkable progress in image-recognition jobs. Practices ranging from convolutional neural networks(CNN) to variational autoencoders have found innumerable applications in the medical image analysis field, driving it forward at a rapid pace. In radiology, trained physicians visually evaluated medical images for the detection, characterization, and monitoring of diseases. AI algorithms outshine at automatically recognizing complex patterns in imaging data and producing quantitative, rather than qualitative, evaluations of radiographic features.**","c98e4a87":"# Loading the images"}}