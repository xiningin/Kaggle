{"cell_type":{"e9ab11ee":"code","912a27f5":"code","29180e15":"code","5cf5a1b9":"code","b15f1dff":"code","cfb5906f":"code","c9cf961d":"code","04e1d5f2":"code","4c609f04":"code","c56a338f":"code","2163bd43":"code","87b21998":"code","0acebe08":"code","a586b581":"code","f8ef2a77":"code","a0e19b1f":"code","c9b0ac15":"code","06834981":"code","afc326be":"code","edf5f1b1":"code","eff7fea0":"code","70618a1c":"code","0e7956df":"code","b7b0de02":"code","ab856f4f":"code","d345671b":"code","c4940060":"code","c254cf0c":"code","b1b92519":"code","5777c3df":"code","dde5dab2":"code","dd30052b":"code","bb71fa07":"code","dcac86d8":"code","47060d8b":"code","1b1c5820":"code","408484c0":"code","43c6b5e9":"code","3c875020":"code","dd03039b":"code","e3d01beb":"code","3757240e":"code","fc5457c7":"code","5785f0ec":"code","d9d20bb4":"code","98312430":"code","cc66768d":"code","310d5ba9":"code","52439ae2":"code","d63df4a3":"code","03f1d458":"code","ef8f792b":"markdown","514f73a1":"markdown","d18d5af7":"markdown","2182608a":"markdown","9c123317":"markdown","35fbc854":"markdown","78927a79":"markdown","01b63070":"markdown","33a30fed":"markdown","9150fc41":"markdown","4e7378fa":"markdown","57a7651e":"markdown","6f517078":"markdown","2e56d886":"markdown","71016787":"markdown"},"source":{"e9ab11ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","912a27f5":"df = pd.read_csv('..\/input\/Chicago_Crimes_2012_to_2017.csv')\ndf.head()","29180e15":"import folium\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5cf5a1b9":"plt.figure(figsize=(10,7))\nsns.heatmap(df.isnull(), cbar = False, cmap = 'viridis')","b15f1dff":"df = df.dropna()\ndf = df.drop(columns=['Unnamed: 0', 'ID', 'Case Number', 'Block', 'IUCR','Domestic', 'Beat', 'District', 'Ward','X Coordinate', 'Y Coordinate','Updated On', 'FBI Code'], axis = 1)","cfb5906f":"pd.value_counts(df['Location Description'])[:10]","c9cf961d":"pd.value_counts(df['Primary Type'])[:10]","04e1d5f2":"plt.figure(figsize = (15, 10))\nsns.countplot(y= 'Location Description', data = df, order = df['Location Description'].value_counts().iloc[:10].index)","4c609f04":"chicago_map = folium.Map(location=[41.864073,-87.706819],\n                        zoom_start=11,\n                        tiles=\"CartoDB dark_matter\")","c56a338f":"locations = df.groupby('Community Area').first()","2163bd43":"new_locations = locations.loc[:, ['Latitude', 'Longitude', 'Location Description', 'Arrest']]","87b21998":"new_locations.head()","0acebe08":"popup_text = \"\"\"Community Index : {}<br\n                Arrest : {}<br>\n                Location Description : {}<br>\"\"\"","a586b581":"for i in range(len(new_locations)):\n    lat = new_locations.iloc[i][0]\n    long = new_locations.iloc[i][1]\n    popup_text = \"\"\"Community Index : {}<br>\n                Arrest : {}<br>\n                Location Description : {}<br>\"\"\"\n    popup_text = popup_text.format(new_locations.index[i],\n                               new_locations.iloc[i][-1],\n                               new_locations.iloc[i][-2]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text, fill = True).add_to(chicago_map)","f8ef2a77":"chicago_map","a0e19b1f":"unique_locations = df['Location'].value_counts()","c9b0ac15":"unique_locations.index","06834981":"CR_index = pd.DataFrame({\"Raw_String\" : unique_locations.index, \"ValueCount\":unique_locations})\nCR_index.index = range(len(unique_locations))\nCR_index.head()","afc326be":"def Location_extractor(Raw_Str):\n    preProcess = Raw_Str[1:-1].split(',')\n    lat =  float(preProcess[0])\n    long = float(preProcess[1])\n    return (lat, long)","edf5f1b1":"CR_index['LocationCoord'] = CR_index['Raw_String'].apply(Location_extractor)","eff7fea0":"CR_index  = CR_index.drop(columns=['Raw_String'], axis = 1)","70618a1c":"%%time\n\nchicago_map_crime = folium.Map(location=[41.895140898, -87.624255632],\n                        zoom_start=13,\n                        tiles=\"CartoDB dark_matter\")\n\nfor i in range(500):\n    lat = CR_index['LocationCoord'].iloc[i][0]\n    long = CR_index['LocationCoord'].iloc[i][1]\n    radius = CR_index['ValueCount'].iloc[i] \/ 45\n    \n    if CR_index['ValueCount'].iloc[i] > 1000:\n        color = \"#FF4500\"\n    else:\n        color = \"#008080\"\n    \n    popup_text = \"\"\"Latitude : {}<br>\n                Longitude : {}<br>\n                Criminal Incidents : {}<br>\"\"\"\n    popup_text = popup_text.format(lat,\n                               long,\n                               CR_index['ValueCount'].iloc[i]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text,radius = radius, color = color, fill = True).add_to(chicago_map_crime)","0e7956df":"chicago_map_crime","b7b0de02":"df_theft = df[df['Primary Type'] == 'THEFT']","ab856f4f":"plt.figure(figsize = (15, 7))\nsns.countplot(y = df_theft['Description'])","d345671b":"df_theft_data = pd.DataFrame({\"Counts\": df_theft['Description'].value_counts(), \"Description\" : df_theft['Description'].value_counts().index})","c4940060":"df_theft_data.reset_index(inplace=True)","c254cf0c":"df_theft_data = df_theft_data.drop(columns=['index'], axis = 1)\ndf_theft_data.head()","b1b92519":"plt.figure(figsize = (15, 7))\nsns.barplot(y =\"Description\", x = \"Counts\", data = df_theft_data, palette=\"jet_r\")","5777c3df":"%%time\ndf_theft['Date'] = pd.to_datetime(df_theft['Date'])","dde5dab2":"df_theft['Month'] = df_theft['Date'].apply(lambda x : x.month)","dd30052b":"theft_in_months = pd.DataFrame({\"thefts\" : df_theft['Month'].value_counts(), \"month\" : df_theft[\"Month\"].value_counts().index}, index = range(12))","bb71fa07":"theft_in_months.fillna(0, inplace=True)\ntheft_in_months = theft_in_months.sort_values(['month'], ascending=[1])","dcac86d8":"theft_in_months.head()","47060d8b":"plt.figure(figsize = (15,7))\nplt.plot(theft_in_months['month'],theft_in_months['thefts'], label = 'Total In Month')\nplt.plot(theft_in_months['month'],theft_in_months['thefts'].rolling(window = 2).mean(),color='red', linewidth=5, label='2-months Moving Average' )\n\nplt.title('Thefts per month', fontsize=16)\nplt.xlabel('Months')\nplt.legend(prop={'size':16})\nplt.tick_params(labelsize=16);","1b1c5820":"print(max(df_theft['Date']))\nprint(min(df_theft['Date']))","408484c0":"df_theft['Date'].iloc[0].date()","43c6b5e9":"df_theft_dates = df_theft['Location']\ndf_theft_dates.index = df_theft['Date']\nresampled = df_theft_dates.resample('D')\ndf_theft_dates['MEAN'] = resampled.size().mean()\ndf_theft_dates['STD'] = resampled.size().std()\n","3c875020":"UCL = df_theft_dates['MEAN'] + 3 * df_theft_dates['STD']\nLCL = df_theft_dates['MEAN'] -  3 * df_theft_dates['STD']","dd03039b":"%%time\n\nplt.figure(figsize=(20, 7))\nresampled.size().plot(label = \"Thefts on a daily basis\", color = 'red')\n# plt.plot(y = UCL,x = resampled.index, color='red', ls='--', linewidth=1.5, label='UCL')\n\n# LCL.plot(color='red', ls='--', linewidth=1.5, label='LCL')\n# df_theft_dates['MEAN'].plot(color='red', linewidth=2, label='Average')\n\nplt.title('Total crimes per day', fontsize=16)\nplt.xlabel('Day')\nplt.ylabel('Number of crimes')\nplt.tick_params(labelsize=14)\nplt.legend(prop={'size':16})","e3d01beb":"resampled.size().std()","3757240e":"df_public_peace =  df[df['Primary Type'] == 'PUBLIC PEACE VIOLATION']","fc5457c7":"df_public_data = pd.DataFrame({\"Counts\": df_public_peace['Description'].value_counts(), \"Description\" : df_public_peace['Description'].value_counts().index})\ndf_public_data.reset_index(inplace=True)\ndf_public_data = df_public_data.drop(columns=['index'], axis = 1)\ndf_public_data.head()","5785f0ec":"plt.figure(figsize = (15, 7))\nsns.barplot(y =\"Description\", x = \"Counts\", data = df_public_data, palette=\"cool\")","d9d20bb4":"unique_locations_bombs = df_public_peace['Location'].value_counts()","98312430":"PB_index = pd.DataFrame({\"Raw_String\" : unique_locations_bombs.index, \"ValueCount\":unique_locations_bombs})\nPB_index.index = range(len(unique_locations_bombs))\nPB_index.head()","cc66768d":"PB_index['LocationCoord'] = PB_index['Raw_String'].apply(Location_extractor)\nPB_index  = PB_index.drop(columns=['Raw_String'], axis = 1)","310d5ba9":"chicago_crime_pp = folium.Map(location=[41.895140898, -87.624255632],\n                        zoom_start=13)","52439ae2":"for i in range(500):\n    lat = PB_index['LocationCoord'].iloc[i][0]\n    long = PB_index['LocationCoord'].iloc[i][1]\n    radius = PB_index['ValueCount'].iloc[i] \/ 3\n    \n    if PB_index['ValueCount'].iloc[i] > 30:\n        color = \"#FF4500\"\n    else:\n        color = \"#008080\"\n    \n    popup_text = \"\"\"Latitude : {}<br>\n                Longitude : {}<br>\n                Peace Disruptions : {}<br>\"\"\"\n    popup_text = popup_text.format(lat,\n                               long,\n                               PB_index['ValueCount'].iloc[i]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text,radius = radius, color = color, fill = True).add_to(chicago_crime_pp)","d63df4a3":"folium.TileLayer('cartodbpositron').add_to(chicago_crime_pp)","03f1d458":"chicago_crime_pp","ef8f792b":"# A little self explanatory data exploration from our side.\nMostly focussing on the top 10 value counts available to us in terms of Location Description and the Primary Type of Crime","514f73a1":"# Having a look at Public Peace Violations","d18d5af7":"# Having a look at the null values in our dataset","2182608a":"# A simple Criminal Rate Index DataFrame","9c123317":"# Focussing on Reckless Conduct, one can see how it out numbers our threats \nSadly, Bomb and Arson Threats still are a major problem in society and it's obvious to notice that most of these threats are based in Schools or Public Places.\n\nBut , can we predict where will be next Bombing threats? Let's check out that scenario.","35fbc854":"# Location Description and it's semantics","78927a79":"# A Simple Chicago Mapping showing the total criminal rates.\n\n( As per the number of total criminal rates)","01b63070":"# Having a closer look at the thefts ","33a30fed":"![](http:\/\/)","9150fc41":"# Maybe a sorted array of counts would look good","4e7378fa":"# These are the actual figures of pubic disruptions ","57a7651e":"# Welcome to Chicago Crime Mapping\n### A simple map and graph based interaction between crimes in chicago and the coordinates.\n\n![](https:\/\/i.imgur.com\/ZZNGFv9.png)","6f517078":"# As you may have noticed, the yearly crime statistics follow a general trend.\n\nHere, the noticable trend is a rise in curve at the start of the year and achieveing the peak at the mid point. somehwhere at **June - July** . After that it has an equally sharp drop to the initial number of crimes as the year started!","2e56d886":"# An overall monthly trend presented in a plate","71016787":"# Preparing the first map. \n\n### Using one location each in a particular community area"}}