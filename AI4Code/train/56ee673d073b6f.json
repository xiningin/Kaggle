{"cell_type":{"4174fd16":"code","fbb91128":"code","33c06d36":"code","2a3a62ee":"code","daf5ac1b":"code","85be4d67":"code","53dabb57":"code","1887a9ae":"code","5d2ff0c8":"code","faf2c60b":"code","636316c1":"code","f50cf2b5":"code","f1bd9d24":"code","ffff6726":"code","1335c960":"code","f3d57e4b":"code","9e28fbd3":"code","31d16c6a":"code","9ab4e967":"code","689885ae":"code","2ffb8775":"code","60d9f355":"code","d2a5f865":"code","02266ff6":"code","e6263885":"code","a1022c63":"code","df8be05b":"code","8b460210":"code","26157544":"code","64ad7632":"code","86bd66e6":"code","b5871a58":"code","1f7576ac":"code","93a6aa33":"code","b699f609":"code","05e80907":"code","83588c8b":"code","cc30daf0":"markdown","217e3ac3":"markdown","327aa725":"markdown"},"source":{"4174fd16":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom nltk import word_tokenize, sent_tokenize\nfrom random import shuffle\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fbb91128":"df = pd.read_csv(\"\/kaggle\/input\/ukara-enhanced\/dataset.csv\")","33c06d36":"df.head(10)","2a3a62ee":"df.groupby(['kelompok', 'label']).count()","daf5ac1b":"len(df)","85be4d67":"groups = {}\n\nkelompok = [1, 3, 4, 7, 8, 9, 10, 'A', 'B']\n\nfor I in kelompok:\n    groups[(I,0)] = df.query(\"kelompok == '%s' and label == 0 \" % (str(I)))['teks'].values \n\nfor I in kelompok:\n    groups[(I,1)] = df.query(\"kelompok == '%s' and label == 1 \" % (str(I)))['teks'].values\n\nfor K in groups:\n    length = len(groups[K])\n    groups[K] = [list(groups[K][length*(J)\/\/5 : length*(J+1)\/\/5]) for J in range(5)]\n\ndef generate_fold_data(test_index, sentence_preprocess, dictionary):\n    train = []\n    test  = {}\n    \n    for K in dictionary:\n        if K[0] not in test:\n            test[K[0]] = []\n        for index in range(5):\n            if test_index == index:\n                for M in dictionary[K][index]:\n                    test[K[0]].append((sentence_preprocess(K, M), K[1]))\n            else:\n                for M in dictionary[K][index]:\n                    train.append((sentence_preprocess(K, M), K[1]))\n    \n    shuffle(train)\n    return train, test","53dabb57":"file = open(\"\/kaggle\/input\/ukara-enhanced\/stopword_list.txt\")\n    \nstopwords = [I.strip() for I in file.readlines()]\n\nfile.close()","1887a9ae":"def remove_stopwords(words):\n    words = word_tokenize(words.lower())\n    words = [I for I in words if I not in stopwords]\n    return \" \".join(words)","5d2ff0c8":"def vanila_preprocess(group_id, sentence):\n    sentence = remove_stopwords(sentence)\n    return sentence","faf2c60b":"from sklearn.feature_extraction.text import CountVectorizer as CV\nfrom sklearn.feature_extraction.text import TfidfVectorizer as TV","636316c1":"countVector = CV(min_df = 5)\ntfidfVector = TV(min_df = 5)","f50cf2b5":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score","f1bd9d24":"def format_accuracy(dictionary_result):\n    total = 0\n    for I in dictionary_result:\n        total += dictionary_result[I]\n        print(I, dictionary_result[I])\n    print(\"Macro All\", total \/ len(dictionary_result))    ","ffff6726":"dictionary = {}\nfor J in kelompok:\n    dictionary[J] = 0\n    for test_index in range(5):\n        train,test = generate_fold_data(test_index, vanila_preprocess, {(J,0) : groups[(J,0)], \n                                                                   (J,1) : groups[(J,1)]})\n        train_X = countVector.fit_transform([I[0] for I in train])\n        train_y = [I[1] for I in train]\n        test_X  = countVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        model = MultinomialNB()\n        model.fit(train_X, train_y)\n        \n        prediction = model.predict(test_X)\n        dictionary[J] += f1_score(test_y, prediction)\n    dictionary[J] \/= 5","1335c960":"format_accuracy(dictionary)","f3d57e4b":"dictionary = {}\nfor J in kelompok:\n    dictionary[J] = 0\n    for test_index in range(5):\n        train,test = generate_fold_data(test_index, vanila_preprocess, {(J,0) : groups[(J,0)], \n                                                                   (J,1) : groups[(J,1)]})\n        train_X = tfidfVector.fit_transform([I[0] for I in train])\n        train_y = [I[1] for I in train]\n        test_X  = tfidfVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        model = MultinomialNB()\n        model.fit(train_X, train_y)\n        \n        prediction = model.predict(test_X)\n        dictionary[J] += f1_score(test_y, prediction)\n    dictionary[J] \/= 5","9e28fbd3":"format_accuracy(dictionary)","31d16c6a":"bigramVector = CV(min_df = 5, ngram_range=(1, 2))","9ab4e967":"dictionary = {}\nfor J in kelompok:\n    dictionary[J] = 0\n    for test_index in range(5):\n        train,test = generate_fold_data(test_index, vanila_preprocess, {(J,0) : groups[(J,0)], \n                                                                   (J,1) : groups[(J,1)]})\n        train_X = bigramVector.fit_transform([I[0] for I in train])\n        train_y = [I[1] for I in train]\n        test_X  = bigramVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        model = MultinomialNB()\n        model.fit(train_X, train_y)\n        \n        prediction = model.predict(test_X)\n        dictionary[J] += f1_score(test_y, prediction)\n    dictionary[J] \/= 5","689885ae":"format_accuracy(dictionary)","2ffb8775":"from sklearn.svm import LinearSVC","60d9f355":"dictionary = {}\nfor J in kelompok:\n    dictionary[J] = 0\n    for test_index in range(5):\n        train,test = generate_fold_data(test_index, vanila_preprocess, {(J,0) : groups[(J,0)], \n                                                                   (J,1) : groups[(J,1)]})\n        train_X = countVector.fit_transform([I[0] for I in train])\n        train_y = [I[1] for I in train]\n        test_X  = countVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        model = LinearSVC()\n        model.fit(train_X, train_y)\n        \n        prediction = model.predict(test_X)\n        dictionary[J] += f1_score(test_y, prediction)\n    dictionary[J] \/= 5","d2a5f865":"format_accuracy(dictionary)","02266ff6":"from sklearn.ensemble import AdaBoostClassifier as Ada","e6263885":"dictionary = {}\nfor J in kelompok:\n    dictionary[J] = 0\n    for test_index in range(5):\n        train,test = generate_fold_data(test_index, vanila_preprocess, {(J,0) : groups[(J,0)], \n                                                                   (J,1) : groups[(J,1)]})\n        train_X = countVector.fit_transform([I[0] for I in train])\n        train_y = [I[1] for I in train]\n        test_X  = countVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        model = Ada()\n        model.fit(train_X, train_y)\n        \n        prediction = model.predict(test_X)\n        dictionary[J] += f1_score(test_y, prediction)\n    dictionary[J] \/= 5","a1022c63":"format_accuracy(dictionary)","df8be05b":"from sklearn.linear_model import LogisticRegression as LR","8b460210":"dictionary = {}\nfor J in kelompok:\n    dictionary[J] = 0\n    for test_index in range(5):\n        train,test = generate_fold_data(test_index, vanila_preprocess, {(J,0) : groups[(J,0)], \n                                                                   (J,1) : groups[(J,1)]})\n        train_X = countVector.fit_transform([I[0] for I in train])\n        train_y = [I[1] for I in train]\n        test_X  = countVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        model = LR()\n        model.fit(train_X, train_y)\n        \n        prediction = model.predict(test_X)\n        dictionary[J] += f1_score(test_y, prediction)\n    dictionary[J] \/= 5","26157544":"format_accuracy(dictionary)","64ad7632":"dictionary = {}\n\nfor J in kelompok:\n    dictionary[J] = 0\n\nfor test_index in range(5):\n    train,test = generate_fold_data(test_index, vanila_preprocess, groups)\n    train_X = bigramVector.fit_transform([I[0] for I in train])\n    train_y = [I[1] for I in train]\n    \n    model = MultinomialNB()\n    model.fit(train_X, train_y)\n    for J in kelompok:\n        test_X  = bigramVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        prediction = model.predict(test_X)\n\n        dictionary[J] += f1_score(test_y, prediction)\n\nfor J in kelompok:\n    dictionary[J] \/= 5","86bd66e6":"format_accuracy(dictionary)","b5871a58":"dictionary = {}\n\nfor J in kelompok:\n    dictionary[J] = 0\n\nfor test_index in range(5):\n    train,test = generate_fold_data(test_index, vanila_preprocess, groups)\n    train_X = bigramVector.fit_transform([I[0] for I in train])\n    train_y = [I[1] for I in train]\n    \n    model = LinearSVC()\n    model.fit(train_X, train_y)\n    for J in kelompok:\n        test_X  = bigramVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        prediction = model.predict(test_X)\n\n        dictionary[J] += f1_score(test_y, prediction)\n\nfor J in kelompok:\n    dictionary[J] \/= 5","1f7576ac":"format_accuracy(dictionary)","93a6aa33":"dictionary = {}\n\nfor J in kelompok:\n    dictionary[J] = 0\n\nfor test_index in range(5):\n    train,test = generate_fold_data(test_index, vanila_preprocess, groups)\n    train_X = bigramVector.fit_transform([I[0] for I in train])\n    train_y = [I[1] for I in train]\n    \n    model = LR()\n    model.fit(train_X, train_y)\n    for J in kelompok:\n        test_X  = bigramVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        prediction = model.predict(test_X)\n\n        dictionary[J] += f1_score(test_y, prediction)\n\nfor J in kelompok:\n    dictionary[J] \/= 5","b699f609":"format_accuracy(dictionary)","05e80907":"dictionary = {}\n\nfor J in kelompok:\n    dictionary[J] = 0\n\nfor test_index in range(5):\n    train,test = generate_fold_data(test_index, vanila_preprocess, groups)\n    train_X = bigramVector.fit_transform([I[0] for I in train])\n    train_y = [I[1] for I in train]\n    \n    model = Ada()\n    model.fit(train_X, train_y)\n    for J in kelompok:\n        test_X  = bigramVector.transform([I[0] for I in test[J]])\n        test_y  = [I[1] for I in test[J]]\n        \n        prediction = model.predict(test_X)\n\n        dictionary[J] += f1_score(test_y, prediction)\n\nfor J in kelompok:\n    dictionary[J] \/= 5","83588c8b":"format_accuracy(dictionary)","cc30daf0":"Statistik","217e3ac3":"**Gabung**","327aa725":"**Dipisah**"}}