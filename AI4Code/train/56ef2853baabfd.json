{"cell_type":{"25932754":"code","375f3e15":"code","dafddbe5":"code","d0ddbacf":"code","846235c2":"code","85cf731b":"code","74e40cfe":"code","1b937d8b":"code","4880a159":"code","5422e49c":"code","39886571":"code","208dc0b2":"code","959551da":"code","3aba19a9":"code","b40bf625":"code","8c02fb45":"code","1c1ae906":"code","8a32237d":"code","94e28d5f":"code","2560fdf6":"code","bebce23a":"code","c8d35528":"code","7503c12f":"code","0a3ef0da":"markdown"},"source":{"25932754":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","375f3e15":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/laptop-prices\/laptops.csv\")\ndata.shape","dafddbe5":"data.head()","d0ddbacf":"data.columns","846235c2":"data.info() #data.info() gives different output","85cf731b":"del data['Unnamed: 0']\ndata.columns.tolist()","74e40cfe":"data_num = data.select_dtypes(include = [\"int64\", \"float64\"])\ndata_num.columns.tolist()","1b937d8b":"data_num.shape","4880a159":"data_obj = data.select_dtypes(exclude = \"float64\")\ndata_obj.shape","5422e49c":"data.shape","39886571":"data.isnull().sum()","208dc0b2":"#plotting histograms\nimport seaborn as sns\nwith sns.axes_style(\"white\"):\n    sns.jointplot(x='Inches', y='Price_euros', data= data_num, kind = \"reg\")","959551da":"import matplotlib.pyplot as plt\ndata_num.plot(subplots=True)","3aba19a9":"sns.histplot(data = data, x= \"Price_euros\", kde=True)","b40bf625":"sns.histplot(x = \"Price_euros\", data = data, hue = \"Company\")","8c02fb45":"sns.histplot(data = data, x= \"Price_euros\",hue = \"Company\", hue_order = [ \"HP\",\"Lenovo\", 'Dell',\"Acer\"],\n            log_scale = True, element =\"step\", fill = False, stat = \"density\", common_norm = False)","1c1ae906":"sns.histplot(data=data_num, x=\"Inches\", stat=\"probability\", discrete=True)","8a32237d":"data.columns","94e28d5f":"data['Company'].value_counts()","2560fdf6":"data.describe()","bebce23a":"data['Inches'].value_counts()","c8d35528":"data['Weight'].unique()","7503c12f":"w= data['Weight']\n#[word.strip('kg') for word in w]\n#[word.replace('kg','') for word in w]\n#w = pd.as_numeric[w]\nw.astype(str).astype(int)\n#data.info()\n#data['Weight'] = pd.to_numeric(data['Weight'])","0a3ef0da":"import category_encoders as ce\nencoder=ce.OneHotEncoder(cols=[data['Company'],data['Product'], data['TypeName'], data['Inches'], data['ScreenResolution'], data['Cpu'],\n       data['Ram'], data['Memory'], data['Gpu'], data['OpSys'] ])\n      #dtype='object',handle_unknown='return_nan',return_df=True,use_cat_names=True)\ndata_encoded = encoder.fit_transform(data)\n"}}