{"cell_type":{"6ce4ba21":"code","29e4af58":"code","5e89c1b8":"code","d2180983":"code","9bb03977":"code","659c1ba1":"code","1adc0a4b":"code","3f221d92":"code","2451641c":"code","92b3fd44":"code","38665609":"markdown","3712da25":"markdown","b32f11ee":"markdown","3e382c1e":"markdown"},"source":{"6ce4ba21":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\ntrain=pd.read_csv('..\/input\/utkml\/train_final.csv')#.fillna(99)\ntest=pd.read_csv('..\/input\/utkml\/test_final.csv')#.fillna(99)\ntotal=train.append(test,ignore_index=True)\n","29e4af58":"total.sort_values('user_id')","5e89c1b8":"datacol=total[['user_id','JOKE:5']]\ndatacol.columns=['user_id','rating']\ndatacol['item_id']=0\n\ndata=datacol.dropna()\nfor ci in range(2,141):\n    colnm=train.columns[ci]\n    datacol=total[['user_id',colnm]]\n    datacol.columns=['user_id','rating']\n    datacol['item_id']=ci-1\n    data=data.append(datacol.dropna())\ndata\n\nfrom scipy.sparse import coo_matrix\n\ndatacoo=coo_matrix((data.rating, ( data.item_id,data.user_id)) )\n\ndatacoo\n","d2180983":"import implicit\n\n# initialize a model\nmodel = implicit.als.AlternatingLeastSquares(factors=50)\n\n# train the model on a sparse matrix of item\/user\/confidence weights\nmodel.fit(datacoo)\n\n# recommend items for a user\nuser_items = datacoo.T.tocsr()\nrecommendations = model.recommend(1, user_items)\nprint('recommended ',recommendations)\n# find related items\nrelated = model.similar_items(1)\nprint(related)","9bb03977":"ratings=datacoo\nimport argparse\nimport codecs\nimport logging\nimport time\n\nimport numpy as np\nimport tqdm\n\nfrom implicit.als import AlternatingLeastSquares\nfrom implicit.bpr import BayesianPersonalizedRanking\nfrom implicit.datasets.movielens import get_movielens\nfrom implicit.lmf import LogisticMatrixFactorization\nfrom implicit.nearest_neighbours import (BM25Recommender, CosineRecommender,\n                                         TFIDFRecommender, bm25_weight)\n\nlog = logging.getLogger(\"implicit\")\n","659c1ba1":"    # read in the input data file\n    start = time.time()\n    output_filename='output.txt'\n    model_name='bpr'\n    min_rating=-10.0,\n    titles=train.columns[1:]\n    # remove things < min_rating, and convert to implicit dataset\n    # by considering ratings as a binary preference only\n    ratings.data[ratings.data < min_rating] = 0\n    ratings.eliminate_zeros()\n    ratings.data = np.ones(len(ratings.data))\n\n    log.info(\"read data file in %s\", time.time() - start)\n\n    # generate a recommender model based off the input params\n    if model_name == \"als\":\n        model = AlternatingLeastSquares()\n\n        # lets weight these models by bm25weight.\n        print(\"weighting matrix by bm25_weight\")\n        ratings = (bm25_weight(ratings, B=0.9) * 5).tocsr()\n\n    elif model_name == \"bpr\":\n        model = BayesianPersonalizedRanking()\n\n    elif model_name == \"lmf\":\n        model = LogisticMatrixFactorization()\n\n    elif model_name == \"tfidf\":\n        model = TFIDFRecommender()\n\n    elif model_name == \"cosine\":\n        model = CosineRecommender()\n\n    elif model_name == \"bm25\":\n        model = BM25Recommender(B=0.2)\n\n    else:\n        raise NotImplementedError(\"TODO: model %s\" % model_name)\n\n    # train the model\n    print(\"training model %s\", model_name)\n    start = time.time()\n    model.fit(ratings)\n    print(\"trained model '%s' in %s\", model_name, time.time() - start)\n    log.debug(\"calculating top movies\")\n\n    user_count = np.ediff1d(ratings.indptr)\n    to_generate = sorted(np.arange(len(titles)), key=lambda x: -user_count[x])\n\n    print(\"calculating similar movies\")\n    with tqdm.tqdm(total=len(to_generate)) as progress:\n        with codecs.open(output_filename, \"w\", \"utf8\") as o:\n            for movieid in to_generate:\n                print(movieid,model.similar_items(movieid))\n                # if this movie has no ratings, skip over (for instance 'Graffiti Bridge' has\n                # no ratings > 4 meaning we've filtered out all data for it.\n                if ratings.indptr[movieid] != ratings.indptr[movieid + 1]:\n                    title = titles[movieid]\n                    for other, score in model.similar_items(movieid):\n                        #o.write(\"%s\\t%s\\t%s\\n\" % (title, titles[other], score))\n                        try:\n                            print(title,titles[other],score)\n                            print()\n                        except:\n                            print(title,other,score)\n                progress.update(1)\n\n\n","1adc0a4b":"for xi in range(10):\n    recommendations = model.recommend(xi, user_items)\n    print('USER',xi,train.iloc[xi].sort_values(ascending=False)[:3])\n    for ri,prob in recommendations:\n        print('recommended ',ri,titles[ri],prob)\n","3f221d92":"train.iloc[1]","2451641c":"test['predictions']='np.nan'\nfor xi in range(len(train),len(total)):\n\n    testxi=xi-len(train)\n    testuserid=test.iloc[testxi]['user_id']\n    recommendations = model.recommend(testuserid, user_items)    \n    test.iat[testxi,141]=titles[recommendations[0][0]]\n    if xi\/1000==int(xi\/1000):\n        print('USER',testxi,total.iloc[xi].sort_values(ascending=False)[:3])\n        for ri,prob in recommendations:\n            print('recommended ',ri,titles[ri],prob)\n    ","92b3fd44":"test[['user_id','predictions']].to_csv('submit.csv',index=False)","38665609":"# test best jokes for first 10 users","3712da25":"# test implicit ALS\nusing Alternating Least Squares","b32f11ee":"# ALS on BM25\nprobably the best solution lets try","3e382c1e":"# fill in submission"}}