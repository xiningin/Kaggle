{"cell_type":{"9e183dd8":"code","c5bb81bd":"code","2ef1e8e2":"code","3a0030ba":"code","a964c508":"code","985702e2":"code","6e619290":"code","228cf902":"code","4a6a43fa":"code","2207658b":"code","65f4ab3d":"code","4af3ced2":"code","38babc54":"code","8c806505":"code","81b98c45":"code","c3067e18":"code","07875ba4":"code","40d3539e":"code","eb1ba63e":"code","486947b4":"code","708b31c3":"code","d9a87914":"code","271e5494":"code","6a36cc31":"code","8e5e5c03":"code","7628a916":"code","add91116":"markdown","f10c8d74":"markdown","35a6ed08":"markdown","1cb887e0":"markdown","5fc745b4":"markdown","9d77e74d":"markdown","69b8d539":"markdown","34c589b7":"markdown"},"source":{"9e183dd8":"!pip uninstall kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","c5bb81bd":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","2ef1e8e2":"! kaggle competitions download -c forrest-gump-1994","3a0030ba":"!unzip forrest-gump-1994.zip","a964c508":"import torch\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler # For Normalization","985702e2":"import random\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","6e619290":"train= pd.read_csv(\"kaggle_train.csv\")\nx_train= train.iloc[:,1:-1]\ny_train= train.iloc[:,[-1]]","228cf902":"train","4a6a43fa":"x_train= x_train.to_numpy()\ny_train = y_train.to_numpy()\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)","2207658b":"learning_rate = 0.01\n#1000\ntraining_epochs = 100\nbatch_size =50","65f4ab3d":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","4af3ced2":"linear=torch.nn.Linear(9718,1,bias=True)\n#dropout=torch.nn.Dropout(p=0.3)\nrelu=torch.nn.ReLU()","38babc54":"torch.nn.init.xavier_uniform_(linear.weight)","8c806505":"model = torch.nn.Sequential(linear).to(device)","81b98c45":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","c3067e18":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","07875ba4":"model(x_train)","40d3539e":"x_test = pd.read_csv(\"kaggle_test.csv\",\n                        encoding = 'utf,8',\n                        )\nx_test.head()","eb1ba63e":"x_test =test_data.to_numpy()\nx_test = torch.FloatTensor(x_test)","486947b4":"with torch.no_grad():\n  model.eval()\n  x_test=test_data.iloc[:,1:]\n  x_test=np.array(x_test)\n  x_test=torch.from_numpy(x_test).float().to(device)\n  predict=model(x_test)","708b31c3":"correct_prediction = predict.cpu().numpy().reshape(-1,1)","d9a87914":"predict","271e5494":"result = pd.read_csv('submit_sample.csv')","6a36cc31":"for i in range(29):\n  result['result[Forrest Gump (1994)]'][i]=predict[i].item()","8e5e5c03":"result","7628a916":"result.to_csv('submit.csv', index=False)","add91116":"\uc120\ud615 \ud68c\uae30 \ubb38\uc81c\uc774\uae30 \ub54c\ubb38\uc5d0 MSE\ub97c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.","f10c8d74":"\ubaa8\ub378\ud559\uc2b5\ucf54\ub4dc\uc785\ub2c8\ub2e4.","35a6ed08":"\ubca0\uc774\uc2a4\ub77c\uc778 \ucf54\ub4dc\uc640 \uac19\uc774 test\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc654\uc2b5\ub2c8\ub2e4.","1cb887e0":"\uc815\ud655\ub3c4\ub97c \ub192\uc774\uae30\uc704\ud574 \ubc30\uce58\uc0ac\uc774\uc988\ub97c \uc0ac\uc6a9\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","5fc745b4":"https:\/\/www.youtube.com\/watch?v=JA93syD0MJs","9d77e74d":"\ub808\uc774\uc5b4\ub97c \ud55c\uce35 \uc313\uc544\uc8fc\uc5b4 \ub525\ub7ec\ub2dd\ubaa8\ub378\ub85c \ubc14\uafb8\uc5c8\uc2b5\ub2c8\ub2e4.","69b8d539":"\ud14c\uc2a4\ud2b8\ub370\uc774\ud130\ub85c\ub4dc\ub97c \ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","34c589b7":"# \uae30\uc874 baseline\uacfc \ucc28\uc774\uc810\n* \uc77c\ubc18 \uc120\ud615\ud68c\uadc0\ub97c \ub525\ub7ec\ub2dd \ubaa8\ub378\ub85c \ubc14\uafb8\uc5b4\uc8fc\uc5c8\ub2e4.\n* xaiver \ucd08\uae30\ud654\ub97c\ud574\uc8fc\uc5c8\ub2e4.\n* MSELoss\uc744 \uc774\uc6a9\ud558\uc600\ub2e4.\n* batch\ub97c \uc0ac\uc6a9\ud558\uc600\ub2e4."}}