{"cell_type":{"d4fc66ec":"code","e93cd3a7":"code","7d41b1d3":"code","c88f4f5e":"code","e0e9acda":"code","718ca781":"code","e2af967e":"code","cae26a05":"code","8a0c2322":"code","2a38f1df":"code","f9d584c7":"code","1dc8b798":"code","02cbf88e":"code","d5cea6ad":"code","1190f76e":"code","d5ac3698":"code","90fb369c":"code","6544eb5c":"code","22c71cf5":"code","ce0dbdb1":"code","166fe44a":"code","72ecfccf":"code","143ec270":"code","9d8bcd1f":"code","fc3a190a":"code","1230dd3a":"code","7a1b2a31":"code","bd4b2b53":"code","a727cfab":"code","b1f4c9a0":"markdown"},"source":{"d4fc66ec":"!pip install tensorflow==2.0-rc1","e93cd3a7":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7d41b1d3":"input_folder = \"..\/input\/house-prices-advanced-regression-techniques\/\"","c88f4f5e":"def load_data(file):\n    return pd.read_csv(input_folder+file)","e0e9acda":"raw_train_data = load_data(\"train.csv\")\nraw_test_data = load_data(\"test.csv\")","718ca781":"raw_train_data.head()","e2af967e":"na_df = raw_train_data.isna().sum()\nna_df[na_df>0]","cae26a05":"def preprocess_na(dataframe):\n    df = dataframe.copy()\n    df.MiscFeature = df.MiscFeature.fillna('NA')\n    df.Fence = df.Fence.fillna('NA')\n    df.PoolQC = df.PoolQC.fillna('NA')\n    df.GarageCond = df.GarageCond.fillna('NA')\n    df.GarageQual = df.GarageQual.fillna('NA')\n    df.GarageFinish = df.GarageFinish.fillna('NA')\n    df.GarageYrBlt = df.GarageYrBlt.fillna(0)\n    df.GarageType = df.GarageType.fillna('NA')\n    df.FireplaceQu = df.FireplaceQu.fillna('NA')\n    df.Alley = df.Alley.fillna('NA')\n    df.MasVnrType = df.MasVnrType.fillna('NA')\n    df.MasVnrArea = df.MasVnrArea.fillna(0)\n    df.LotFrontage = df.LotFrontage.fillna(0)\n    df.BsmtQual = df.BsmtQual.fillna('NA')\n    df.BsmtCond = df.BsmtCond.fillna('NA')\n    df.BsmtExposure = df.BsmtExposure.fillna('NA')\n    df.BsmtFinType1 = df.BsmtFinType1.fillna('NA')\n    df.BsmtFinType2 = df.BsmtFinType2.fillna('NA')\n    df.Electrical = df.Electrical.fillna('SBrkr')\n    df.MSZoning = df.MSZoning.fillna(\"RL\")\n    df.SaleType = df.SaleType.fillna(\"Oth\")\n    df.Utilities = df.Utilities.fillna(\"AllPub\")\n    df.Exterior1st = df.Exterior1st.fillna(\"Other\")\n    df.Exterior2nd = df.Exterior2nd.fillna(\"Other\")\n    df.BsmtFinSF1 = df.BsmtFinSF1.fillna(0)\n    df.BsmtFinSF2 = df.BsmtFinSF2.fillna(0)\n    df.BsmtUnfSF = df.BsmtUnfSF.fillna(0)\n    df.TotalBsmtSF = df.TotalBsmtSF.fillna(0)\n    df.BsmtFullBath = df.BsmtFullBath.fillna(0)\n    df.BsmtHalfBath = df.BsmtHalfBath.fillna(0)\n    df.KitchenQual = df.KitchenQual.fillna('TA')\n    df.Functional = df.Functional.fillna(\"Typ\")\n    df.GarageCars = df.GarageCars.fillna(0)\n    df.GarageArea = df.GarageArea.fillna(0)\n    return df","8a0c2322":"train_data = preprocess_na(raw_train_data)\ntest_data = preprocess_na(raw_test_data)","2a38f1df":"na_df = test_data.isna().sum()\nna_df[na_df>0]","f9d584c7":"train_labels = train_data.pop('SalePrice')","1dc8b798":"describe = train_data.describe()\ndescribe","02cbf88e":"def norm(X):\n    df = X.copy()\n    for column in describe:\n        if df[column].dtype!='object':\n            df[column] = (df[column]-describe[column]['mean'])\/describe[column]['mean']\n    return df","d5cea6ad":"# train_data = norm(train_data)\n# test_data = norm(test_data)","1190f76e":"train_data.describe()","d5ac3698":"categorical_columns = train_data.columns[train_data.dtypes=='object']\nnumerical_columns = train_data.columns[train_data.dtypes!='object']\ncategorical_columns, numerical_columns","90fb369c":"feature_columns = []\nfor column in numerical_columns:\n    feature_columns.append(tf.feature_column.numeric_column(column))\n\nfor column in categorical_columns:\n    vocabulary = list(set(train_data[column].unique()) | set(test_data[column].unique()))\n    col = tf.feature_column.categorical_column_with_vocabulary_list(column,vocabulary)\n    col_one_hot = tf.feature_column.indicator_column(col)\n    feature_columns.append(col_one_hot)\nfeature_columns","6544eb5c":"train_data_dic = dict(train_data)\ntest_data_dic = dict(test_data)","22c71cf5":"ds = tf.data.Dataset.from_tensor_slices((train_data_dic, train_labels))\nval = ds.take(100)\nval = val.batch(32)\nds = ds.skip(100)\nds = ds.shuffle(buffer_size=len(train_data)-100)\nds = ds.batch(32)","ce0dbdb1":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.DenseFeatures(feature_columns))\nmodel.add(tf.keras.layers.Dense(64, 'relu'))\nmodel.add(tf.keras.layers.Dense(1))","166fe44a":"optimizer = tf.keras.optimizers.RMSprop(0.001)\nmodel.compile(optimizer=optimizer, loss='mse', metrics=['mse','mae'])","72ecfccf":"early_stop = tf.keras.callbacks.EarlyStopping(patience=10)\n\nhistory = model.fit(ds, epochs=200, validation_data=val, callbacks=[early_stop])","143ec270":"model.summary()","9d8bcd1f":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.head()","fc3a190a":"plt.figure()\nplt.plot(hist.epoch, hist.val_mae, label=\"Validation MAE\")\nplt.plot(hist.epoch, hist.mae, label=\"Train MAE\")\nplt.legend()","1230dd3a":"plt.figure()\nplt.plot(hist.epoch, hist.val_mse, label=\"Validation MSE\")\nplt.plot(hist.epoch, hist.mse, label=\"Train MSE\")\nplt.legend()","7a1b2a31":"pred = model.predict(test_data_dic)","bd4b2b53":"result = pd.DataFrame(pred, columns=['SalePrice'], index=test_data.Id)","a727cfab":"result.to_csv(\"submission.csv\")","b1f4c9a0":"This problem can be solved by using machine learning algoritms like decision trees or random forest. For learning purpose I will be using Neaural Network using Tensorflow 2.0. "}}