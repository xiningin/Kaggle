{"cell_type":{"f6cc16fd":"code","599bfde5":"code","4eeb1115":"code","e139eb55":"code","c18f426d":"code","cd976466":"code","fa3695ee":"code","e9796aa4":"code","7cdc8d33":"code","c50aa4cd":"code","f2ef534a":"code","717bbfd6":"code","8eb2c871":"code","8b01c5a9":"code","cefa0462":"code","f231a79d":"code","2f8e8fb6":"code","1d1894fc":"code","2dc32b4d":"code","82db8e0c":"code","0c2020fc":"code","be9f4255":"code","944ee25e":"code","10e76aed":"code","4d350d1e":"markdown","dab02676":"markdown","72a5e2c5":"markdown","a141ec45":"markdown","aa7c6f60":"markdown","e3222798":"markdown","c93a129a":"markdown","f4636770":"markdown","b6578bc2":"markdown"},"source":{"f6cc16fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","599bfde5":"# import the necessary packages\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Dense\nfrom keras.utils import np_utils\nimport tensorflow as tf\nimport cv2\nimport matplotlib.pyplot as plt","4eeb1115":"train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","e139eb55":"display(train.shape)\ndisplay(test.shape)","c18f426d":"from PIL import Image\n# create figure\nfig = plt.figure(figsize=(15, 15))\n\n# setting values to rows and column variables\nrows = 3\ncolumns = 3\n\nfor i in range(9):\n    # Adds a subplot at the 1st position\n    fig.add_subplot(rows, columns, i+1)\n    img_arr=train.iloc[i,1:].values.reshape(28,28)\n    plt.imshow(img_arr)\n    plt.axis('off')\n    plt.title(\"Label\"+' '+str(train.iloc[i,0]))","cd976466":"trainX = train.drop(\"label\", axis = 1)\ntrainY = train[\"label\"]\n\ntrainX = trainX.astype(\"float32\") \/ 255.0\ntrainX = trainX.values.reshape(-1,28,28,1)","fa3695ee":"testX = test.astype(\"float32\") \/ 255.0\ntestX = testX.values.reshape(-1,28,28,1)","e9796aa4":"display(testX.shape)\ndisplay(trainX.shape)\ndisplay(trainY.shape)","7cdc8d33":"trainY.unique()## 10 classes","c50aa4cd":"#Encoding the output class label (One-Hot Encoding)\ntrainY=np_utils.to_categorical(trainY,10)","f2ef534a":"trainY","717bbfd6":"# Note you only need to define the input data shape with the first layer. \n# The last layers is a dense layer with softmax activation that classifies the 10 categories.\n\n\nmodel = tf.keras.Sequential()\n# Must define the input shape in the first layer of the neural network\nmodel.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, padding='same', activation='relu', input_shape=(28,28,1))) \nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2 , padding='same'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, padding='same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2 , padding='valid'))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n# Take a look at the model summary\nmodel.summary()","8eb2c871":"model.compile(loss='categorical_crossentropy',\n            optimizer='adam',\n            metrics=['accuracy'])\n\n\n# model.compile(loss='categorical_crossentropy',\n#              optimizer='rmsprop',\n#              metrics=['accuracy'])","8b01c5a9":"model.fit(trainX, trainY ,batch_size=64,epochs=10,verbose=1)","cefa0462":"model.fit(trainX, trainY ,batch_size=64,epochs=20,verbose=1,initial_epoch=10)","f231a79d":"### predict \ntest_pred=model.predict(testX)","2f8e8fb6":"test_pred = np.argmax(test_pred,1)","1d1894fc":"test_pred.shape","2dc32b4d":"test.shape","82db8e0c":"test['label']=test_pred","0c2020fc":"### File for submission\nsubmission=pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","be9f4255":"submission['Label']=test_pred","944ee25e":"submission","10e76aed":"submission.to_csv('DR_submission.csv',index=False)","4d350d1e":"### Create the Graph Model","dab02676":"### Fit the model","72a5e2c5":"### Show the image","a141ec45":"### Predict the model on test set","aa7c6f60":"### Encoding target labels","e3222798":"### Reshape all the image sizes","c93a129a":"### Compile the model","f4636770":"### Import required libraries","b6578bc2":"### Load Dataset"}}