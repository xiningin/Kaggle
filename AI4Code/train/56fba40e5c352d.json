{"cell_type":{"6685d0be":"code","0256d3f0":"code","f6a48ae8":"code","2e3e3873":"code","34501697":"code","d4ef8759":"code","4786a9d4":"code","6d58f6b3":"code","fb74ac89":"code","5bb11c26":"code","8bfee5c8":"code","4ee09470":"code","b411de9c":"code","1e03c256":"code","2166eb5e":"code","78526821":"code","9b2bde60":"code","a1e0271b":"code","2c4e3320":"code","b60dab0f":"code","14d6211d":"code","a4554f76":"code","cb9245b5":"code","c362d60e":"code","097c648a":"code","fa29a84c":"code","d80f7968":"code","d40037f8":"code","dff703cc":"code","644856c3":"code","7980279d":"code","9c228ef2":"code","742c3269":"code","21a76c65":"code","5ee3fa57":"markdown","85b8dfa5":"markdown","ae554474":"markdown","c77b208e":"markdown","5dce4284":"markdown","641daae0":"markdown","c780519b":"markdown","31cc2d44":"markdown","ba0b6afa":"markdown","360925c5":"markdown","b0ae6129":"markdown","01631009":"markdown","b6ee26d4":"markdown","bb657a2f":"markdown","70f2343c":"markdown","eb456ad1":"markdown","0eaf5b3d":"markdown","4c0e0909":"markdown","8e4aeb6e":"markdown","eac06c31":"markdown","869a780c":"markdown"},"source":{"6685d0be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0256d3f0":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib as mpl","f6a48ae8":"sns.set_palette(\"CMRmap\")\nmpl.rcParams['figure.dpi'] = 200","2e3e3873":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","34501697":"df.head(5)","d4ef8759":"df= df.drop('PassengerId',axis= 1)","4786a9d4":"df['Deck'] = df['Cabin'].apply(lambda x: x[0] if pd.notnull(x) else 'M')","6d58f6b3":"df = df.drop('Cabin',axis=1)","fb74ac89":"df.head()","5bb11c26":"df[\"Deck\"].value_counts()","8bfee5c8":"df[df['Deck'] == 'T']","4ee09470":"idx = df[df['Deck'] == 'T'].index\ndf.loc[idx, 'Deck'] = 'A'","b411de9c":"df_all_decks = df.groupby(['Deck', 'Pclass']).count().drop(columns=['Survived', 'Sex', 'Age', 'SibSp', 'Parch', \n                                                                        'Fare', 'Embarked', 'Ticket']).rename(columns={'Name': 'Count'}).transpose()\n","1e03c256":"def get_pclass_dist(df):\n    \n    # Creating a dictionary for every passenger class count in every deck\n    deck_counts = {'A': {}, 'B': {}, 'C': {}, 'D': {}, 'E': {}, 'F': {}, 'G': {}, 'M': {}, 'T': {}}\n    decks = df.columns.levels[0]    \n    \n    for deck in decks:\n        for pclass in range(1, 4):\n            try:\n                count = df[deck][pclass][0]\n                deck_counts[deck][pclass] = count \n            except KeyError:\n                deck_counts[deck][pclass] = 0\n                \n    df_decks = pd.DataFrame(deck_counts)    \n    deck_percentages = {}\n\n    # Creating a dictionary for every passenger class percentage in every deck\n    for col in df_decks.columns:\n        deck_percentages[col] = [(count \/ df_decks[col].sum()) * 100 for count in df_decks[col]]\n        \n    return deck_counts, deck_percentages","2166eb5e":"def display_pclass_dist(percentages):\n    \n    df_percentages = pd.DataFrame(percentages).transpose()\n    deck_names = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'M', 'T')\n    bar_count = np.arange(len(deck_names))  \n    bar_width = 0.85\n    \n    pclass1 = df_percentages[0]\n    pclass2 = df_percentages[1]\n    pclass3 = df_percentages[2]\n    \n    plt.figure(figsize=(20, 10))\n    plt.bar(bar_count, pclass1, color='#b5ffb9', edgecolor='white', width=bar_width, label='Passenger Class 1')\n    plt.bar(bar_count, pclass2, bottom=pclass1, color='#f9bc86', edgecolor='white', width=bar_width, label='Passenger Class 2')\n    plt.bar(bar_count, pclass3, bottom=pclass1 + pclass2, color='#a3acff', edgecolor='white', width=bar_width, label='Passenger Class 3')\n\n    plt.xlabel('Deck', size=15, labelpad=20)\n    plt.ylabel('Passenger Class Percentage', size=15, labelpad=20)\n    plt.xticks(bar_count, deck_names)    \n    plt.tick_params(axis='x', labelsize=15)\n    plt.tick_params(axis='y', labelsize=15)\n    \n    plt.legend(loc='upper left', bbox_to_anchor=(1, 1), prop={'size': 15})\n    plt.title('Passenger Class Distribution in Decks', size=18, y=1.05)   \n    \n    plt.show()    \n\n","78526821":"all_deck_count, all_deck_per = get_pclass_dist(df_all_decks)\ndisplay_pclass_dist(all_deck_per)","9b2bde60":"df_all_decks_survived = df.groupby(['Deck', 'Survived']).count().drop(columns=['Sex', 'Age', 'SibSp', 'Parch', 'Fare', \n                                                                                   'Embarked', 'Pclass', 'Ticket']).rename(columns={'Name':'Count'}).transpose()\n\ndef get_survived_dist(df):\n    \n    # Creating a dictionary for every survival count in every deck\n    surv_counts = {'A':{}, 'B':{}, 'C':{}, 'D':{}, 'E':{}, 'F':{}, 'G':{}, 'M':{}}\n    decks = df.columns.levels[0]    \n\n    for deck in decks:\n        for survive in range(0, 2):\n            surv_counts[deck][survive] = df[deck][survive][0]\n            \n    df_surv = pd.DataFrame(surv_counts)\n    surv_percentages = {}\n\n    for col in df_surv.columns:\n        surv_percentages[col] = [(count \/ df_surv[col].sum()) * 100 for count in df_surv[col]]\n        \n    return surv_counts, surv_percentages\n\ndef display_surv_dist(percentages):\n    \n    df_survived_percentages = pd.DataFrame(percentages).transpose()\n    deck_names = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'M')\n    bar_count = np.arange(len(deck_names))  \n    bar_width = 0.85    \n\n    not_survived = df_survived_percentages[0]\n    survived = df_survived_percentages[1]\n    \n    plt.figure(figsize=(20, 10))\n    plt.bar(bar_count, not_survived, color='#b5ffb9', edgecolor='white', width=bar_width, label=\"Not Survived\")\n    plt.bar(bar_count, survived, bottom=not_survived, color='#f9bc86', edgecolor='white', width=bar_width, label=\"Survived\")\n \n    plt.xlabel('Deck', size=15, labelpad=20)\n    plt.ylabel('Survival Percentage', size=15, labelpad=20)\n    plt.xticks(bar_count, deck_names)    \n    plt.tick_params(axis='x', labelsize=15)\n    plt.tick_params(axis='y', labelsize=15)\n    \n    plt.legend(loc='upper left', bbox_to_anchor=(1, 1), prop={'size': 15})\n    plt.title('Survival Percentage in Decks', size=18, y=1.05)\n    \n    plt.show()\n\nall_surv_count, all_surv_per = get_survived_dist(df_all_decks_survived)\ndisplay_surv_dist(all_surv_per)","a1e0271b":"df['Cat_Age']=pd.cut(df['Age'], bins=[0,18,30,45,80], include_lowest=True,labels=['Child','Young','Adult','Old'])","2c4e3320":"sns.barplot(data=df,x=\"Cat_Age\",y=\"Survived\").set(title=\"Age distribution on Survive\");","b60dab0f":"sns.displot(df, x=\"Cat_Age\").set(title=\"Age distribution\");","14d6211d":"sns.displot(df, x=\"Sex\").set(title=\"Sex distribution\");","a4554f76":"sns.barplot(data=df,x=\"Sex\",y=\"Survived\").set(title=\"Sex percentage on Survive\");","cb9245b5":"sns.barplot(data=df,x=\"Sex\",y=\"Survived\",hue=\"Cat_Age\").set(title=\"Sex\/Age distribution\");","c362d60e":"df[\"Family\"] = df[\"SibSp\"] + df[\"Parch\"] + 1\ndf = df.drop([\"SibSp\",\"Parch\"],axis=1)","097c648a":"df[\"Family\"].value_counts()","fa29a84c":"df['Cat_Family']=pd.cut(df['Family'], bins=[0,1,3,4,12], include_lowest=True,labels=['Alone','Small','Medium','Large'])","d80f7968":"df[\"Cat_Family\"].value_counts()","d40037f8":"df = df.drop(\"Family\",axis=1)","dff703cc":"sns.barplot(data=df,x=\"Cat_Family\",y=\"Survived\").set(title=\"Family size on Surviving probability\");","644856c3":"sns.barplot(data=df,x=\"Cat_Family\",y=\"Fare\").set(title=\"Family size on Fare amount\");","7980279d":"df['Ticket_Frequency'] = df.groupby('Ticket')['Ticket'].transform('count')","9c228ef2":"fig, axs = plt.subplots(figsize=(12, 9))\nsns.countplot(x='Ticket_Frequency', hue='Survived', data=df)\n\nplt.xlabel('Ticket Frequency', size=15, labelpad=20)\nplt.ylabel('Passenger Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=15)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Count of Survival in {} Feature'.format('Ticket Frequency'), size=15, y=1.05)\n\nplt.show()","742c3269":"df['Title'] = df['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ndf['Is_Married'] = 0\ndf['Is_Married'].loc[df['Title'] == 'Mrs'] = 1","21a76c65":"fig, axs = plt.subplots(nrows=2, figsize=(20, 20))\nsns.barplot(x=df['Title'].value_counts().index, y=df['Title'].value_counts().values, ax=axs[0])\n\naxs[0].tick_params(axis='x', labelsize=10)\naxs[1].tick_params(axis='x', labelsize=15)\n\nfor i in range(2):    \n    axs[i].tick_params(axis='y', labelsize=15)\n\naxs[0].set_title('Title Feature Value Counts', size=20, y=1.05)\n\ndf['Title'] = df['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ndf['Title'] = df['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')\n\nsns.barplot(x=df['Title'].value_counts().index, y=df['Title'].value_counts().values, ax=axs[1])\naxs[1].set_title('Title Feature Value Counts After Grouping', size=20, y=1.05)\n\nplt.show()","5ee3fa57":"### 1.Extracting Deck feature with Cabin numbers\n\n<b> Cabin feature includes deck classes and numbers of where passenger stay. So, we just need to cabin class <\/b>\n\n<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/0d\/Olympic_%26_Titanic_cutaway_diagram.png\" width=\"700\" \/><\/center>\n<center><img src=\"https:\/\/vignette.wikia.nocookie.net\/titanic\/images\/f\/f9\/Titanic_side_plan.png\/revision\/latest?cb=20180322183733\" width=\"900\" \/><\/center>\n","85b8dfa5":"### Passenger Class and Deck Distribution","ae554474":"_____","c77b208e":"## 3.Family-size ","5dce4284":"_____","641daae0":"## 3. Sex Distributions","c780519b":"<b>People using the same ticket can be friends and so on, even if they are not family. So we will find out how many people used the same ticket to find truly lonely people and assign this information to each ticket owner.<\/b>","31cc2d44":"<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e5\/Titanic_%281997_film%29_logo.svg\/1024px-Titanic_%281997_film%29_logo.svg.png\" width=\"700\" \/><\/center>","ba0b6afa":"## Overview\nPassengerId is the unique id of the row and it doesn't have any effect on target\n\nSurvived is the target variable we are trying to predict (0 or 1):\n- 1 = Survived\n- 0 = Not Survived\nPclass (Passenger Class) is the socio-economic status of the passenger and it is a categorical ordinal feature which has 3 unique values (1, 2 or 3):\n- 1 = Upper Class\n- 2 = Middle Class\n- 3 = Lower Class\nName, Sex and Age are self-explanatory\n\nSibSp is the total number of the passengers' siblings and spouse\n\nParch is the total number of the passengers' parents and children\n\nTicket is the ticket number of the passenger\n\nFare is the passenger fare\n\nCabin is the cabin number of the passenger\n\nEmbarked is port of embarkation and it is a categorical feature which has 3 unique values (C, Q or S):\n- C = Cherbourg\n- Q = Queenstown\n- S = Southampton","360925c5":"<b>As can be seen from the graph, there are many lonely people and the effect on the death rate is quite large.<\/b>","b0ae6129":"## 5. Title","01631009":"<b>Blackwell travelled with fellow Trentonian Washington Augustus Roebling II and the latter's chauffeur Frank Stanley on a tour of Europe in the early months of 1912. When sailing to Europe the two men became acquainted with Caroline Bonnell. They met up with Miss Bonnell and the family of George Dennick Wick while touring France and they boarded the Titanic together in Southampton. Blackwell occupied cabin \"T\" on the Boat Deck (ticket number 113784 which cost \u00a335, 10s).<\/b>\n\n<b>Miss Bonnell said she last saw Mr Blackwell in the smoking room talking with Captain Smith just shortly before the evacuation began. He was lost in the sinking.<\/b>","b6ee26d4":"_____\n","bb657a2f":"______","70f2343c":"_____","eb456ad1":"_______","0eaf5b3d":"## 2.Creating Categorical Age & EDA","4c0e0909":"# EDA&Feature Engineering","8e4aeb6e":"_____","eac06c31":"## 4.Ticket Frequency ","869a780c":"## Importing "}}