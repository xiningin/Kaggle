{"cell_type":{"571e3262":"code","8b30b632":"code","84c83d41":"code","2ca3cdba":"code","6680cfc1":"code","a0aa2684":"code","c5ae600d":"code","64d601da":"code","01dc8b95":"code","7ab3ecfc":"code","c0ffd2d5":"code","4396829f":"code","0ee18b81":"code","5c7405a4":"code","aabc9044":"code","780e054c":"code","a87d5857":"code","6da48ff5":"code","6e137542":"code","559a2944":"code","6bc9807d":"code","4028d2ca":"code","a6023ec8":"code","f7b5d63d":"code","2edd95cd":"code","9b43605b":"code","323df110":"code","9fe01183":"code","acaaa530":"code","89217dfe":"code","658b1bae":"code","528f6ab1":"code","806be1a9":"code","aeadaed9":"code","60b3279d":"code","934e591d":"code","0421ea7a":"code","09ee02a2":"code","7d6df653":"code","a3dd0d46":"code","f4c49bc9":"code","7c6afd9e":"code","4ba60940":"code","1713685f":"code","b8eb8a01":"code","2e90f966":"code","f7e7226a":"code","5ab16ad4":"code","0c94c0b9":"code","d797d59d":"code","d929155c":"code","63fd044a":"code","dc10c6a1":"code","88f00a67":"code","b0da69a8":"code","94e004b1":"code","2ea00371":"code","0a5a1c35":"code","b3bf7621":"markdown","aee3e688":"markdown","ccd64fc5":"markdown","aa4a1261":"markdown","bd0256b5":"markdown","7e6d85ea":"markdown","2781235b":"markdown","9d375030":"markdown","17a58c5e":"markdown","a7803390":"markdown","d1cb8b08":"markdown","3317fba3":"markdown","7614c4b3":"markdown","2e27fb1c":"markdown","74beacce":"markdown","72f0130a":"markdown","896a835e":"markdown","2885cecc":"markdown","4985a9e0":"markdown","9a54a18d":"markdown","46ab5fa3":"markdown","e1cdcc1b":"markdown","c6041b37":"markdown","fbc77a8d":"markdown","b84486cd":"markdown","a23e2743":"markdown","31ca0c59":"markdown"},"source":{"571e3262":"import numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","8b30b632":"df = pd.read_csv(\"..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv\")\ndf","84c83d41":"df_missing_values = df.isnull().sum()\ndf_missing_values","2ca3cdba":"df.dtypes","6680cfc1":"df_numeric_columns = df.select_dtypes(include=[\"int64\",\"float64\"]).keys()\ndf_numeric_columns","a0aa2684":"columns_numeric_missing = [var for var in df_numeric_columns if df_missing_values[var]>0]\ncolumns_numeric_missing","c5ae600d":"df_categorical_columns = df.select_dtypes(include=[\"object\"]).keys()\ndf_categorical_columns","64d601da":"columns_categorical_missing = [var for var in df_categorical_columns if df_missing_values[var]>0]\ncolumns_categorical_missing","01dc8b95":"numeric_value_mean_imputer = Pipeline(steps=[(\"imputer\", SimpleImputer(strategy=\"mean\"))])\ncategorical_value_mode_imputer = Pipeline(steps=[(\"imputer\", SimpleImputer(strategy=\"most_frequent\"))])","7ab3ecfc":"preprocessing = ColumnTransformer(transformers=[(\"mean_imputer\", numeric_value_mean_imputer, columns_numeric_missing),\n                                                (\"mode_imputer\", categorical_value_mode_imputer, columns_categorical_missing)])\n\npreprocessing","c0ffd2d5":"df_clean_null_value = preprocessing.fit_transform(df)\ndf_clean_null_value","4396829f":"df_missing_value_solve = pd.DataFrame(df_clean_null_value, columns=columns_numeric_missing+columns_categorical_missing)\ndf_missing_value_solve","0ee18b81":"df_missing_value_solve.isnull().sum()","5c7405a4":"df.update(df_missing_value_solve)","aabc9044":"df.isnull().sum().sum()","780e054c":"df","a87d5857":"df[\"availability\"]","6da48ff5":"availability_most = df[\"availability\"].value_counts().idxmax()\navailability_most","6e137542":"all = []\nfor i,var in enumerate(df[\"availability\"]):\n  if availability_most != var:\n    #df[\"availability\"].replace({df[\"availability\"][i]:availability_most}, inplace=True)\n    all.append(i)\n\ndf = df.drop(all)\ndf = df.reset_index(drop=True)\ndf","559a2944":"df[\"availability\"].value_counts()","6bc9807d":"df","4028d2ca":"df[\"size\"]","a6023ec8":"cap = []\nfor i,var in enumerate(df[\"size\"]):\n  if var[-3:] != 'BHK':\n    cap.append(i)\n\ndf = df.drop(cap)\ndf = df.reset_index(drop=True)\ndf","f7b5d63d":"le = LabelEncoder()","2edd95cd":"le.fit_transform(df[\"size\"])","9b43605b":"df[\"bhk\"] = le.fit_transform(df[\"size\"])\ndf = df.drop([\"size\"], axis=1)\ndf","323df110":"df[\"bath\"] = pd.to_numeric(df[\"bath\"], downcast=\"float\")\ndf[\"balcony\"] = pd.to_numeric(df[\"balcony\"], downcast=\"float\")","9fe01183":"df","acaaa530":"df.dtypes","89217dfe":"df = df.drop([\"society\"], axis=1)\ndf","658b1bae":"khali = []\nfor i,var in enumerate(df[\"total_sqft\"]):\n  try:\n    df[\"total_sqft\"][i] = float(var)\n  except ValueError:\n    khali.append(i)\n\ndf = df.drop(khali)\ndf = df.reset_index(drop=True)\ndf","528f6ab1":"df[\"total_sqft\"] = pd.to_numeric(df[\"total_sqft\"], downcast=\"float\")\ndf","806be1a9":"location_all = df[\"location\"].value_counts()\nlocation_all","aeadaed9":"last_location = location_all[location_all > 20].keys()\n\nlast_location","60b3279d":"save_location = last_location.value_counts().sum()\ncount = 0\njamp = []\nloc_df = df\nfor i, var in enumerate(loc_df[\"location\"]):\n  for j in last_location:\n    if var != j:\n      count += 1\n  if count == save_location:\n    jamp.append(i)\n  count = 0\n\nloc_df = loc_df.drop(jamp)\nloc_df = loc_df.reset_index(drop=True)\nloc_df","934e591d":"df = loc_df","0421ea7a":"df","09ee02a2":"pd.set_option('display.max_rows', None)","7d6df653":"df.isnull().sum().sum()","a3dd0d46":"dummy_df = pd.get_dummies(df)\ndummy_df","f4c49bc9":"pd.set_option('display.max_columns',None)","7c6afd9e":"dummy_df","4ba60940":"dummy_df","1713685f":"x = dummy_df.drop(\"price\",axis=1)\ny = dummy_df[\"price\"]\n\nprint(\"Shape of x: \",x.shape)\nprint(\"Shape of y: \",y.shape)","b8eb8a01":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=51)\n\nprint(\"Shape of x_train: \",x_train.shape)\nprint(\"Shape of x_test: \",x_test.shape)\nprint(\"Shape of y_train: \",y_train.shape)\nprint(\"Shape of y_test: \",y_test.shape)","2e90f966":"sc = StandardScaler()\nsc.fit(x_train)\nx_train = sc.transform(x_train)\nx_test = sc.transform(x_test)","f7e7226a":"x_train","5ab16ad4":"from sklearn.linear_model import LinearRegression","0c94c0b9":"lr = LinearRegression()","d797d59d":"lr.fit(x_train, y_train)","d929155c":"lr.coef_","63fd044a":"lr.intercept_","dc10c6a1":"x_test[0,:]","88f00a67":"lr.predict([x_test[0]])","b0da69a8":"lr.predict(x_test)","94e004b1":"y_test","2ea00371":"lr.score(x_test, y_test)","0a5a1c35":"lr.score(x_test, y_test) * 100","b3bf7621":"# Make all numeric value","aee3e688":"## split data - x train and y train","ccd64fc5":"# Delete gurbage value","aa4a1261":"## total sqrt","bd0256b5":"### select categorical columns","7e6d85ea":"## Linear Rigression model training","2781235b":"# Missing value ","9d375030":"## Load Dataset","17a58c5e":"## Standard Scaler - feature scaling","a7803390":"## Accuracy","d1cb8b08":"### columns transform","3317fba3":"## Find missing categorical columns","7614c4b3":"### select missing categorical columns","2e27fb1c":"### clean missing value","74beacce":"## Find missing numeric columns","72f0130a":"### select numerical columns\n","896a835e":"## Find Null Value","2885cecc":"### select missing numeric columns","4985a9e0":"# Import Data","9a54a18d":"## size - feature","46ab5fa3":"## split data","e1cdcc1b":"### make pipeline","c6041b37":"## Fill missing value","fbc77a8d":"### update main data frame","b84486cd":"## Location - feature","a23e2743":"## availability - feature","31ca0c59":"# Linear Regression - Start"}}