{"cell_type":{"091b3603":"code","0d0819f8":"code","99bb1ef7":"code","ebd86e07":"code","4e4538d7":"code","b1319cc5":"code","d07c4fbd":"code","e4d73357":"code","46d37983":"code","75ac388d":"code","d1069dee":"code","c9a2956b":"code","5595148b":"code","ca584b2d":"code","2f8a9c93":"code","fbe78b0d":"code","2bcc3414":"code","3799fd32":"code","0d0d51bd":"code","2e0348e8":"code","ee0a73b7":"code","8341d673":"code","1131256e":"code","fa8f4131":"code","0266ea26":"code","ae7096e3":"code","48de5fca":"code","836c1045":"code","5c12375b":"code","5ae535bb":"code","913fb047":"code","d2e63332":"code","3ed42a99":"code","b5cd6e26":"code","a914a3eb":"markdown","cde4dfae":"markdown","1c78b27a":"markdown","5103781b":"markdown","13342d95":"markdown","e67d0b16":"markdown","3a4a51d4":"markdown","f8364639":"markdown","1d355bc4":"markdown","b5c2f06b":"markdown","2a10d8ee":"markdown","e6112dcd":"markdown","2d609220":"markdown","d92a5b38":"markdown","367aabad":"markdown","45719a6e":"markdown","ef50b230":"markdown","5bdb8053":"markdown","e8695f25":"markdown","32ca31a8":"markdown","03f62b64":"markdown","806859f8":"markdown","1d26fb5a":"markdown","0a83f9b5":"markdown","2792a73a":"markdown","2ee61ca4":"markdown","d2badf41":"markdown","91352fbb":"markdown","7784d607":"markdown","f6a4b7ee":"markdown","70314ddf":"markdown","9c79aef4":"markdown","4882284f":"markdown"},"source":{"091b3603":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d0819f8":"edu = pd.read_csv('..\/input\/ense32020-marco\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","99bb1ef7":"edu.head()","ebd86e07":"edu.head(10)","4e4538d7":"edu.tail()","b1319cc5":"edu.describe()","d07c4fbd":"edu.iloc[90:94][['TIME','GEO']]","e4d73357":"edu[edu['Value']>6.5].tail()","46d37983":"edu['Value']>6.5","75ac388d":"edu[edu['Value']>6.5]","d1069dee":"edu[edu[\"Value\"].isnull()].head()","c9a2956b":"edu.max(axis=0)","5595148b":"print('Pandas max function:',edu['Value'].max())\nprint('Python max function:',max(edu['Value']))","ca584b2d":"s=edu[\"Value\"]\/100\ns.head()","2f8a9c93":"s=edu[\"Value\"].apply(np.sqrt)\ns.head()","fbe78b0d":"s=edu[\"Value\"].apply(lambda d:d**2)\ns.tail()","2bcc3414":"edu['ValueNorm']=edu['Value']\/edu['Value'].max()\nedu.tail()","3799fd32":"df=edu.drop('ValueNorm',axis=1,inplace=False)\ndf.head()\n","0d0d51bd":"edu.head()","2e0348e8":"edu.drop('ValueNorm',axis=1,inplace=True)\nedu.head()","ee0a73b7":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","8341d673":"edu.drop(max(edu.index),axis=0,inplace=True)\nedu.tail()","1131256e":"eduDrop=edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","fa8f4131":"eduDrop = edu.dropna(how='any',subset=['Value'])\neduDrop.head()","0266ea26":"eduFilled = edu.fillna(value={\"Value\":0})\neduFilled.head()","ae7096e3":"edu.sort_values(by='Value',ascending=False,inplace=True)\nedu.head()","48de5fca":"edu.sort_index(axis=0,ascending=True,inplace=True)\nedu.head()","836c1045":"group = edu[[\"GEO\",\"Value\"]].groupby('GEO').mean()\ngroup.head()","5c12375b":"filtered_data=edu[edu[\"TIME\"]>2005]\npivedu=pd.pivot_table(filtered_data,values='Value',index=['GEO'],columns=['TIME'])\npivedu.head()","5ae535bb":"pivedu.loc[['Spain','Portugal'],[2006,2011]]","913fb047":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()\n\n","d2e63332":"totalSum = pivedu.sum(axis = 1)\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","3ed42a99":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4, title = \"Total Values for Country\")\n","b5cd6e26":"import matplotlib.pyplot as plt\nmy_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","a914a3eb":"We can also plot all the dataframe directly. Each column is plotted as a single series.","cde4dfae":"6)If we apply the precedent operation we filter the dataframe for all the values that satisfy the Boolean condition. It's an extract of a dataframe so it's a dataframe","1c78b27a":"Plotting data\n\nLet's plot the accumulated values for each country over the last 6 years :","5103781b":"Another method is to use the specific function dropna().\nThe argument how if set to any indicate all the raw that contain NaN values. We can also chose the range with subset.","13342d95":"To see missing values we use the method isnull() as it follows : (because of head() it gives us the first 5 missing values) ","e67d0b16":"We can rearrange the data with pivot_table. For example the country names become the new indexes and the columns are represented by the year","3a4a51d4":"To remove the column we created we can use the method drop(). If axis=0 it removes the indicated raws, if axis=1 it removes the indicated column. We can conserve the original dataframe with the argument inplace. If it's true the dataframe is overwritten. otherwise it is conserved.","f8364639":"Now we are going to see how to rank data. We use the panda function rank.\nFirst we clean the data","1d355bc4":"Now we are going to see how to manipulate data\n","b5c2f06b":"edu.head() give the first 5 values of the dataframe ","2a10d8ee":"We can instead of removing the rows with NaN replacing the missing values by a value we chose.","e6112dcd":"In this example the value correspond to the position that the country occupied in the ranking based on \"Value\" a determined year.\nFor instance in 2006 Austria is the 10th position and Belgium is the 5th position. We are using ascending=False it means that country that have greater value are better ranked. In 2006 Austria had a value of 5.40 and Belgium 5.98 so our hypothesis is confirmed.\n\nWe can also make a global ranking based on all the years ","2d609220":"We can also set new values in our dataframe. This is done directly using the assign operator\"=\".\nTo add a new column we asign a series to a column that does not exist.\nFor instance if we want to add a column with normalized values (values of each rows are divided by the maximal value in the column) we do:\n","d92a5b38":"To inspect data we can also group data according to some criteria.\nThe function of panda groupby() will produce a special grouped dataframe. To obtain a proper dataframe we use an aggregation function. For instance we use mean() to obtain a mean value of Value for each country.","367aabad":"To remove this new raw we use the function drop() with axis=0.\nWe want to remove the last raw so we can use max() applied on the index to identify it","45719a6e":"2) if we give a number as argument to the method head(), for instance head(N), it shows the first N values of the dataframe","ef50b230":"We can also apply an in line function without a specific name. this type of function is known as Lambda function.\nFor example in the following code the values are squared.","5bdb8053":"We can see that the dataframe is not overwritten. Instead if inplace=True","e8695f25":"6)This operation produce the Boolean corresponding operation over the data. If a row satisfy the condition Value>6.5 it returns True for the corresponding index of the raw. Otherwise it returns False","32ca31a8":"We can use the new indexes to select specific rows of the table","03f62b64":"This function is applied to each raw of the column Value.\nWe can apply any function to our Dataframe series using the method apply() and setting the argument as the desired function","806859f8":"Now we are going to see how to sort data.\nFor example we can sort the column \"Value\" by descending value :","1d26fb5a":"We can also insert a new row at the bttom of the datafram. We use the method append().\nThe new row is represented as a dictionnary where the keys are the name of the colummns and the values are the values associated.\nIt's important to know that if ignore_indexflag is set to False, the index 0 is given to this new row.","0a83f9b5":"1)the edu Dataframe has 384 rows and 3 comumns ****","2792a73a":"To remove the missing values from the dataframe we use isnull(). We copy the existing dataframe to a new one without the NaN values\nThe \"~\" mean not","2ee61ca4":"4) \nthe method describe() give statistical information about the dataset.\nit gives how many values are present in each column, but also the mean and the standard deviation.\nit gives also respectively the min and max values and the median value and also the first and last quartile**","d2badf41":" This method return the raw that contain the maximal value in the column \"Values\"","91352fbb":"We can return to the original order","7784d607":"To conclude we need to remenber that the value correspond to the total public expenditure on as % of GDP, for all level of education. The data shows us that the nothern countries of Europe tend to invest more on education. The 2 islands Malta and Cyprus are also well ranked. On the other hand the eastern countries invest less on education.","f6a4b7ee":"The python max function interpret NaN value as infinite. Instead the max function of panda interpret it as a missing value","70314ddf":"3) the method tail() (without argument) give the last 5 values of the dataframe****","9c79aef4":"this operation allow us to filter data. It gives us the 5 last rows of the dataframe that respect the condition Value>5\n","4882284f":"5) This index return the values of the columns 'TIME' and 'GEO' localized at index labels 90 to 93.\n[90:94] stand for the index values range. And [['TIME','GEO']] stand for the columns concerned\n"}}