{"cell_type":{"e25c793f":"code","a904dc37":"code","b04c9518":"code","4b152628":"code","8445e687":"code","211b4e08":"code","e577fd8b":"code","9ff2762b":"code","86d4c152":"code","ab64c930":"code","2775c4cc":"code","8a402d78":"code","b83618a6":"code","40d70dc9":"code","c1b5ddf4":"code","060267a3":"code","90166cfb":"code","18d8f452":"code","e45de66a":"code","d3b16ef4":"code","4d4e7671":"markdown","aec15e26":"markdown","619d28e9":"markdown","0355b42f":"markdown","559f842e":"markdown","4e2bd836":"markdown","b24d04c3":"markdown","5f922def":"markdown","d8d1c029":"markdown","56f2d576":"markdown","93f5e1f8":"markdown","4a6a0dcb":"markdown","f9bec5ea":"markdown","329e0f8c":"markdown","59242236":"markdown","a214b8d5":"markdown","e8749296":"markdown","07c51b06":"markdown","243d1835":"markdown","6529f847":"markdown"},"source":{"e25c793f":"from mpl_toolkits.mplot3d import Axes3D\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn.preprocessing import StandardScaler\r\nimport matplotlib.pyplot as plt # plotting\r\nimport numpy as np # linear algebra\r\nimport os # accessing directory structure\r\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\r\n","a904dc37":"print(os.listdir('..\/input'))\nprint(os.listdir('..\/input\/csvs_per_year\/csvs_per_year'))","b04c9518":"# Plot the PCA with either 2 or 3 reduced components\r\ndef plotPCA(df, nComponents):\n\tdf = df.select_dtypes(include =[np.number]) # keep only numerical columns\r\n\tdf = df.dropna('columns') # drop columns with NaN\r\n\tif df.shape[1] < nComponents:\r\n\t\tprint(f'No PCA graph shown: The number of numeric columns ({df.shape[1]}) is less than the number of PCA components ({nComponents})')\r\n\t\treturn\r\n\tdf = df.astype('float64') # Cast to float for sklearn functions\r\n\tdf = StandardScaler().fit_transform(df) # Standardize features by removing the mean and scaling to unit variance\r\n\tpca = PCA(n_components = nComponents)\r\n\tprincipalComponents = pca.fit_transform(df)\r\n\tprincipalDf = pd.DataFrame(data = principalComponents, columns = ['Principal Component ' + str(i) for i in range(1, nComponents + 1)])\r\n\tfig = plt.figure(figsize = (8, 8))\r\n\tif (nComponents == 3):\r\n\t\tax = fig.add_subplot(111, projection = '3d')\r\n\t\tax.set_xlabel('Principal Component 1', fontsize = 15)\r\n\t\tax.set_ylabel('Principal Component 2', fontsize = 15)\r\n\t\tax.set_zlabel('Principal Component 3', fontsize = 15)\r\n\t\tax.set_title('3 component PCA', fontsize = 20)\r\n\t\tax.scatter(xs = principalDf.iloc[:, 0], ys = principalDf.iloc[:, 1], zs = principalDf.iloc[:, 2])\r\n\telse:\r\n\t\tax = fig.add_subplot(111)\r\n\t\tax.set_xlabel('Principal Component 1', fontsize = 15)\r\n\t\tax.set_ylabel('Principal Component 2', fontsize = 15)\r\n\t\tax.set_title('2 component PCA', fontsize = 20)\r\n\t\tax.scatter(x = principalDf.iloc[:, 0], y = principalDf.iloc[:, 1])\r\n","4b152628":"# Histogram of column data\r\ndef plotHistogram(df, nHistogramShown, nHistogramPerRow):\n\tnunique = df.nunique()\r\n\tdf = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\r\n\tnRow, nCol = df.shape\r\n\tcolumnNames = list(df)\r\n\tnHistRow = (nCol + nHistogramPerRow - 1) \/ nHistogramPerRow\r\n\tplt.figure(num=None, figsize=(6*nHistogramPerRow, 8*nHistRow), dpi=80, facecolor='w', edgecolor='k')\n\tfor i in range(min(nCol, nHistogramShown)):\r\n\t\tplt.subplot(nHistRow, nHistogramPerRow, i+1)\r\n\t\tdf.iloc[:,i].hist()\r\n\t\tplt.ylabel('counts')\r\n\t\tplt.xticks(rotation=90)\r\n\t\tplt.title(f'{columnNames[i]} (column {i})')\r\n\tplt.tight_layout(pad=1.0, w_pad=1.0, h_pad=1.0)\r\n\tplt.show()\r\n","8445e687":"# Correlation matrix\r\ndef plotCorrelationMatrix(df, graphWidth):\n\tfilename = df.dataframeName\r\n\tdf = df.dropna('columns') # drop columns with NaN\r\n\tdf = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\r\n\tif df.shape[1] < 2:\r\n\t\tprint(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\r\n\t\treturn\r\n\tcorr = df.corr()\r\n\tplt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\r\n\tcorrMat = plt.matshow(corr, fignum = 1)\r\n\tplt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\r\n\tplt.yticks(range(len(corr.columns)), corr.columns)\r\n\tplt.gca().xaxis.tick_bottom()\r\n\tplt.colorbar(corrMat)\r\n\tplt.title(f'Correlation Matrix for {filename}', fontsize=15)\r\n\tplt.show()\r\n","211b4e08":"# Scatter and density plots\r\ndef plotScatterMatrix(df, plotSize, textSize):\n\tdf = df.select_dtypes(include =[np.number]) # keep only numerical columns\r\n\t# Remove rows and columns that would lead to df being singular\r\n\tdf = df.dropna('columns')\r\n\tdf = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\r\n\tcolumnNames = list(df)\r\n\tif len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n\t\tcolumnNames = columnNames[:10]\n\tdf = df[columnNames]\r\n\tax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\r\n\tcorrs = df.corr().values\r\n\tfor i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\r\n\t\tax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\r\n\tplt.suptitle('Scatter and Density Plot')\r\n\tplt.show()\r\n","e577fd8b":"nRowsRead = 100 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/stations.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'stations.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","9ff2762b":"df1.head(5)","86d4c152":"plotHistogram(df1, 10, 5)","ab64c930":"plotCorrelationMatrix(df1, 8)","2775c4cc":"plotScatterMatrix(df1, 12, 10)","8a402d78":"plotPCA(df1, 2) # 2D PCA\nplotPCA(df1, 3) # 3D PCA","b83618a6":"nRowsRead = 100 # specify 'None' if want to read whole file\n# madrid_2011.csv may have more rows in reality, but we are only loading\/previewing the first 100 rows\ndf2 = pd.read_csv('..\/input\/csvs_per_year\/csvs_per_year\/madrid_2011.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'madrid_2011.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","40d70dc9":"df2.head(5)","c1b5ddf4":"plotHistogram(df2, 10, 5)","060267a3":"plotPCA(df2, 2) # 2D PCA\nplotPCA(df2, 3) # 3D PCA","90166cfb":"nRowsRead = 100 # specify 'None' if want to read whole file\n# madrid_2017.csv may have more rows in reality, but we are only loading\/previewing the first 100 rows\ndf3 = pd.read_csv('..\/input\/csvs_per_year\/csvs_per_year\/madrid_2017.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'madrid_2017.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","18d8f452":"df3.head(5)","e45de66a":"plotHistogram(df3, 10, 5)","d3b16ef4":"plotPCA(df3, 2) # 2D PCA\nplotPCA(df3, 3) # 3D PCA","4d4e7671":"2D and 3D PCA Plots","aec15e26":"Let's take a quick look at what the data looks like:","619d28e9":"Histogram of sampled columns:","0355b42f":"Let's take a quick look at what the data looks like:","559f842e":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","4e2bd836":"Now, read in the data and use the plotting functions to visualize the data.","b24d04c3":"Histogram of sampled columns:","5f922def":"Correlation matrix:","d8d1c029":"## Exploratory Analysis\r\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made.Remember, I'm only a kerneling bot, not Jeff Dean or a Kaggle Competitions Grandmaster!","56f2d576":"### Let's check 3rd file: ..\/input\/csvs_per_year\/csvs_per_year\/madrid_2017.csv","93f5e1f8":"### Let's check 2nd file: ..\/input\/csvs_per_year\/csvs_per_year\/madrid_2011.csv","4a6a0dcb":"Histogram of sampled columns:","f9bec5ea":"Let's take a quick look at what the data looks like:","329e0f8c":"## Conclusion\r\nThis concludes this starter analysis! To continue from here, click the blue \"Fork Notebook\" button at the top. This will create a copy of the code and environment for you to edit, delete, modify, and add code as you please. Happy Kaggling!","59242236":"### Let's check 1st file: ..\/input\/stations.csv","a214b8d5":"## Introduction\r\nGreetings! This is an automatically generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing your own copy.","e8749296":"2D and 3D PCA Plots","07c51b06":"2D and 3D PCA Plots","243d1835":"Scatter and density plots:","6529f847":"There are 19 csv files in the current version of the dataset:\n"}}