{"cell_type":{"6fcb1a67":"code","4e23cea3":"code","cc3e175b":"code","07cb795a":"code","373ccb95":"code","9522aba3":"code","992a7269":"code","99e4dd3f":"code","afc3bac1":"code","d673b777":"code","f9506887":"code","82bf0a57":"code","afb14d1a":"code","ec115ed5":"code","c8bb6328":"code","fede1052":"code","480b12de":"code","9ac357e4":"code","15acf4be":"code","97d2e6ec":"code","2ef10c4d":"code","ad7247f5":"code","eb3359eb":"code","4e33733b":"code","e02948b8":"code","07437dff":"code","e4006889":"code","7ab8f7b3":"code","bbdfd99c":"code","888cd8e7":"code","f679500d":"code","64e05a9c":"code","19cdbfc1":"code","22c8d358":"code","e395e751":"code","fa810cae":"code","5ae266d0":"code","3b38fa1f":"code","3a5c505f":"code","540b16ab":"code","2efecb25":"code","2e7ca065":"code","0b7a8f17":"code","22eed6ba":"code","747780e8":"code","83168ebb":"code","6bf0950b":"code","6a7eab0a":"code","a7d6fbc3":"code","9f168f23":"code","84c536ba":"code","a361b328":"code","477e318c":"code","24e1cfdc":"code","a0a15cb9":"code","fc156a12":"code","62bc79de":"code","ac5c4ba6":"code","47f0acbf":"markdown","95e2a9a0":"markdown","a35551c0":"markdown","9d2f51cc":"markdown","35900dbf":"markdown","0d5d84fe":"markdown","c0d60c66":"markdown","9c1457e5":"markdown","0a3071cf":"markdown","4f777ed0":"markdown","564e525b":"markdown","d2cc00e4":"markdown","265b0886":"markdown","4cc70ea3":"markdown","a8fce9eb":"markdown","a90df03c":"markdown","04835b59":"markdown","29469248":"markdown","a58ea99c":"markdown","04bd2a6f":"markdown","322ff371":"markdown","16106b5f":"markdown","b2d92a21":"markdown","f4dd738c":"markdown","89979260":"markdown","b25431cb":"markdown","61a78011":"markdown","07457035":"markdown","ab128c4c":"markdown","a4223e31":"markdown","2354474a":"markdown","3fa72000":"markdown","02328399":"markdown","432103d4":"markdown","e0cf38a2":"markdown","3a0738c3":"markdown","f2489d49":"markdown","a7c97d45":"markdown","53aed68b":"markdown","5f86dd8f":"markdown","32e7aa20":"markdown","366fea00":"markdown","c31f177c":"markdown","c9ba30df":"markdown","052c59af":"markdown","e29439b3":"markdown"},"source":{"6fcb1a67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e23cea3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns    # used for plot interactive graph.\nimport matplotlib.pyplot as plt\n%matplotlib inline","cc3e175b":"g_data= pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","07cb795a":"g_data.head()  #head() inspects the first 5 rows","373ccb95":"#Similarly to read\/inspect the rows at the end\/tail\ng_data.tail()      #Inspecting the end 5 rows","9522aba3":"g_data.shape     # same as print(g_data.shape)","992a7269":"g_data.dtypes","99e4dd3f":"g_data.describe()       # Summary Statistics","afc3bac1":"g_data.boxplot()  #Make a box plot from DataFrame (i.e.,g_data) columns.\n#A boxplot() method is for graphically depicting groups of numerical data through their quartiles","d673b777":"g_data.hist()     #representation of the distribution of data of g_data DataFrame","f9506887":"g = sns.kdeplot(g_data.Rating, color=\"Red\", shade = True, bw=4)\ng.set_xlabel(\"Rating\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Rating',size = 20)\nplt.rcParams['figure.figsize'] = 11,8\n#figsize(float, float), default: rcParams[\"figure.figsize\"] (default: [6.4, 4.8])\n#Width, height in inches.","82bf0a57":"g = sns.kdeplot(g_data.Rating, color=\"Red\", shade = True)\ng.set_xlabel(\"Rating\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Rating',size = 20)\nplt.rcParams['figure.figsize'] = 11,5\nplt.xscale('symlog' , linthresh= 4)\nplt.show()","afb14d1a":"g_data.info()","ec115ed5":"g_data.isnull().sum()  #isnull().sum() returns the number(int type) of missing values in g_data","c8bb6328":"g_data.isnull().sum().sort_values(ascending=True)\n# sorted in ascending order of null values","fede1052":"g_data.isnull().sum().sort_values(ascending=True).tail(6)\n# a=g_data.isnull().sum().sort_values(ascending=True)\n# a.tail(6)    we can also use this ","480b12de":"g_data.Rating > 5   \n#From here it is quite difficult to understand which index corresponds to True","9ac357e4":"g_data[g_data.Rating > 5]","15acf4be":"# selecting rows based on condition using loc[]\ng_data.loc[g_data['Rating']>5]","97d2e6ec":"g_data.drop([10472],inplace=True)","2ef10c4d":"g_data[10470:10475]    #It shows rows of index=10470 to 10475","ad7247f5":"g_data.boxplot()","eb3359eb":"g_data.hist()","4e33733b":"#Define a function impute_median\ndef impute_median(series):\n    return series.fillna(series.median()) \n# The function takes column as argument and returns median of that column from where\n#it is called. We have to update the column using transform()","e02948b8":"g_data.Rating   ","07437dff":"g_data.Rating = g_data['Rating'].transform(impute_median) ","e4006889":"# modes of categorical values\ng_data.Type.mode()","7ab8f7b3":"print(g_data['Current Ver'].mode())\nprint(g_data['Android Ver'].mode())","bbdfd99c":"\n#Or we can write : \ng_data['Type'].fillna(str(g_data['Type'].mode().values), inplace=True)","888cd8e7":"g_data.Type.isnull().sum()","f679500d":"g_data['Current Ver'].fillna(str(g_data['Current Ver'].mode().values), inplace=True)\n# g_data['Current Ver'].fillna((g_data['Current Ver'].mode()), inplace=True)\n\ng_data['Current Ver'].isnull().sum()","64e05a9c":"g_data['Android Ver'].fillna(str(g_data['Android Ver'].mode().values), inplace=True)\ng_data['Android Ver'].isnull().sum()","19cdbfc1":"#Check the entire dataset now.\ng_data.isnull().sum()","22c8d358":"g_data.tail(7)","e395e751":"g_data['Price'] = g_data['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ng_data['Price'] = g_data['Price'].apply(lambda x: float(x))\ng_data['Reviews'] = pd.to_numeric(g_data['Reviews'], errors='coerce')","fa810cae":"g_data.Installs = g_data.Installs.apply(lambda x: str(x).replace('+','') if '+' in str(x) else str(x))\ng_data.Installs = g_data.Installs.apply(lambda x: str(x).replace(',','') if ',' in str(x) else str(x))\ng_data.Installs = g_data.Installs.apply(lambda x: float(x))","5ae266d0":"g_data.dtypes","3b38fa1f":"g_data.head()","3a5c505f":"#g_data.drop(columns=['Type'], axis= 1,inplace = True,, errors =\u2018ignore\u2019)\n#del g_data['Type']    Syntax: df.drop('column_name', 1)\n#g_data.drop('Type',1)\ng_data = g_data.drop(columns=['Type'])\n#print(g_data.tail())\n","540b16ab":"g_data.tail()","2efecb25":"#print(\"\\n\",g_data['Category'].unique())\ng_data['Category'].unique()      #both are same","2e7ca065":"#len(g_data['Category'].unique())    33\nprint(\"No. of unique categories present in category column: \"+ str(len(g_data['Category'].unique())))","0b7a8f17":"a= g_data.Category.value_counts()\na","22eed6ba":"g = sns.countplot(x=\"Category\",data=g_data ,order= a.index, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng \nplt.title('Count of app in each category',size = 20)","747780e8":"g= sns.catplot(x=\"Category\",y=\"Rating\",data= g_data,order= a.index, height = 10)\ng.set_xticklabels(rotation=90)\ng = g.set_ylabels(\"Rating\")\nplt.title('Pointplot of Rating VS Category',size = 20)","83168ebb":"g_data.info()","6bf0950b":"g = sns.kdeplot(g_data.Reviews, color=\"Green\", shade = True,bw= 5)\ng.set_xlabel(\"Reviews\")\ng.set_ylabel(\"Frequency\")\n#g.set( xlabel=range(0,4))\nplt.title('Distribution of Reveiw',size = 20)\nplt.rcParams['figure.figsize'] = 11.7,8.27","6a7eab0a":"# By Observing the dataset making comments\ng_data.describe()","a7d6fbc3":"g_data[g_data.Reviews > 5000000].head()","9f168f23":"len(g_data[g_data.Size == 'Varies with device'])","84c536ba":"#g_data.Size.median()","a361b328":"g_data.Size.value_counts()","477e318c":"# change it to NA first\n\ng_data['Size'].replace('Varies with device', np.nan, inplace = True )","24e1cfdc":"g_data.Size.isnull().sum()   #To see that it is converted to null values ","a0a15cb9":"g_data.Size = (g_data.Size.replace(r'[kM]+$', '', regex=True).astype(float) * \\\n             g_data.Size.str.extract(r'[\\d\\.]+([KM]+)', expand=False)\n            .fillna(1)\n            .replace(['k','M'], [10**3, 10**6]).astype(int))","fc156a12":"g_data.Size.fillna(g_data.groupby('Category')['Size'].transform('mean'),inplace = True)","62bc79de":"g_data.Size.value_counts()","ac5c4ba6":"g_data.tail()","47f0acbf":"**Family category has the most appearances for application in store**","95e2a9a0":"Functions\/Methods Used: \n* pd.read_csv \n* head() , tail()\n* describe()\n* boxplot()\n* hist()\n* info()\n* isnull()\n* sum()\n* drop()\n* dropna()\n* len()\n* transform()\n* mode()\n* str()\n* fillna()\n* apply()\n* groupby()\n* agg()\n* figure()\n* plot()\n* show()\n\nAttribute:\n* shape\n* dtypes","a35551c0":"Documentation link : https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.boxplot.html\n\nFrom describe() output, observe that Range of Rating values : [1,19]\nmin\t1.000000\nmax\t19.000000\n\nFrom plot, most of the data clusters in between 2.5 to 5. Also a outlier value exists near Rating= 19 approx. We would like to drop\/ remove the data i.e., the row entirely.","9d2f51cc":"The info() function is used to print a concise summary of a DataFrame. This method prints information about a DataFrame including the index of both rows and columns, dtype and column dtypes, non-null values and memory usage.\nFrom output observe the following:\nRow index \ncolumn index from 0 to 12 , no. of columns = 13\nName of different **columns** along with no. of non-null values and datatypes  (in form of a table) \nTherefore Column 'Rating','Type','Content Rating','Current Ver','Android Ver' contain some null values.\n\nAlso 'dtypes: float64(1), object(12)' tells that only one column of float64 and remaining 12 columns are of object datatype. We have ensured it earlier also. \n","35900dbf":"Max value of Reviews is approx 78.2 Million. Now I want figure out for which category of apps or rows the value the Reviews exceed 50 Million. ","0d5d84fe":"As the dataset contains only one feature\/column 'Rating' having numeric data , so describe() method gives details only of this column. ","c0d60c66":"Now cleaning is done for those columns . \n* We have 9 more columns of object dtype","9c1457e5":"Now check if the row is deleted or not\n","0a3071cf":"Look the number of columns is 12 . Hence the column is successfully omitted.","4f777ed0":"# Let's consider the size column now.","564e525b":"Motive : To replace those null values using the mean\/median\/mode of the respective columns.\nBut the 'Rating' column contains an outlier. We have to remove it which can be done by dropping(\/removing) the entire row using drop() method. Otherwise it will affect the **mean** of this column.","d2cc00e4":"As the column contains categorical value , It also returns a mode of categorical value. So it is **optional** to typecast the return value to use in fillna. ","265b0886":"We know that the feature 'Content Rating' and 'Type' contain single null value. From above output it is clear that row of index 10472 conatins that. Also the row of index= 10472 contains the outlier. Hence **drop** the row by passing the index to the method.","4cc70ea3":"# C)Reviews distibution using seaborn.kdeplot\n> https:\/\/seaborn.pydata.org\/generated\/seaborn.kdeplot.html","a8fce9eb":"> Suppose we want to find the frequency counts of column \u2018Category\u2019 in the dataframe g_data. \nWe can use pandas\u2019 function **value_counts** on the column of interest. It will return\nNumPy array with unique items and the frequency of it.","a90df03c":"> Observe the previous cell output. The column 'Size' contains some values 'Varies with device'.","04835b59":"****2.Data Imputation and Manipulation**","29469248":"Frequency distribution of values in between 2.5 and 5 is maximum\/ more as compared to other values.","a58ea99c":"**In order to know total no. of unique categories we use len().**  or nunique()\n\nHere we sum() doesn't give desire reult","04bd2a6f":"We have taken care of 4 columns 'Price' , 'Reviews','Rating' and 'Installs' to change their datatype. \n* Print the datatype of the dataset.","322ff371":"**3.convert Price, Reviews and Ratings into Numerical Values**","16106b5f":"# Frequency Counts of the column \u201cCategory\u201d","b2d92a21":"From the index of rows we understand that our dataset contains 10841 rows starting from index=0 to index=10840","f4dd738c":"As 'Type' column is there is the dataset for similar purpose as the column 'Price', we can ignore the column.\n* drop 'Type' column\n* [https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html](http:\/\/)   Documentation of drop()\n","89979260":"shade= True is used to shade underneath the Kdeplot","b25431cb":"This means the columns are unimodal","61a78011":"**Taking care of missing data**\n\n**1.Count the number of missing values in the Dataframe**","07457035":"***B) seaborn.catplot *** ","ab128c4c":"So 1695 rows of Size column have this value. So I want to replace those stings by the median of the numerical data available in the column. \n*  we want to find the frequency counts of column \u2018Size\u2019 in the dataframe g_data. We can use pandas\u2019 function value_counts on the column of interest. It will return NumPy array with unique items and the frequency of it.","a4223e31":"str(x) corresponds to respective value of g_data.Price in every iteration \nIf str(x) contains '$' symbol then it will be replaced by ' ' i.e.,empty\/null string\nelse it will remain as it is\nIt commands to convert each value (i.e.,str(x)) in the column g_data.Price to follow the process \n\nNow I want to convert Price column datatype to float.\n\nThen using pandas library to apply to_numeric() to Reviews column and if the function encounters any such errors while execution, then simply ignore that error. This is the meaning of **coerce** ","2354474a":"Reviews column contain values of int datatype.","3fa72000":"# Data Cleaning","02328399":"Observe that the dataset no longer contains the row of index=10472. ","432103d4":"# Data Visualization","e0cf38a2":"g_data.Size = (g_data.Size.replace(r'[kM]+$', '', regex=True).astype(float) * \\ g_data.Size.str.extract(r'[\\d\\.]+([KM]+)', expand=False).fillna(1).replace(['k','M'], [10**3, 10**6]).astype(int))","3a0738c3":"# 2.Importing the dataset","f2489d49":"Hence the dataset contains only one variable\/feature of float64 datatype i.e., numeric data and all other variables contain string values \/ categorical data .\nNote: Text data type is known as Strings in Python, or Objects in Pandas. Strings can contain numbers and \/ or characters","a7c97d45":"As interpreted earlier that the columns 5 columns at the end of previous table contain null values . So for better visualization we can use tail() method.","53aed68b":"# Check how many ratings are more than 5 - Outliers","5f86dd8f":"Observe that the null values of Rating column is not updated yet, because we haven't called the function yet. So We have to update the column using transform()","32e7aa20":"Therefore Reviews for apps under Communication Category have most no. of customer reviews. \nObviously, well-known applictions have a lot of reviews","366fea00":"So the dataset contains 10841 rows and 13 columns","c31f177c":"A) **seaborn.countplot** Shows the counts of observations in each categorical bin using bars.\n\nA count plot can be thought of as a histogram across a categorical, instead of quantitative, variable. The basic API and options are identical to those for barplot()","c9ba30df":"# 1.Import the Required Modules","052c59af":"\n**We can use Pandas unique() function on a variable of interest to get the unique values of the column.**","e29439b3":"END"}}