{"cell_type":{"32b2d732":"code","95033c96":"code","ed4ac37f":"code","2896194b":"code","4298761e":"code","ef0f5ed6":"code","9f45ef40":"code","5ce7a183":"code","3fa7d8c1":"code","27739dc6":"code","464aa8de":"code","df9d0667":"code","bf8d4f58":"code","de8e5e86":"code","ccbe9791":"code","dd301ca1":"code","fd797073":"code","d443f03b":"code","72137d99":"code","c29fb4d2":"code","580dfd25":"code","9bb2e8a4":"code","4a81098a":"code","7c0d47b4":"code","5b1eef8c":"code","b366c97a":"code","113eb8c7":"code","98a8e3d6":"code","1c51690b":"code","1a9b9a68":"code","1861d3bc":"code","f50ea4a5":"code","6e1a54f8":"code","1b4f3954":"code","11ff6b8f":"code","1930a3ea":"code","186d3bbc":"code","ef9e01ad":"code","85d67a9d":"code","8de08979":"code","10e5c2b1":"code","a2ad92fe":"markdown","8bf2fa24":"markdown","580b84bb":"markdown","ec131c75":"markdown","77bc03b9":"markdown","d652fbc7":"markdown","0592bd6a":"markdown","049b3670":"markdown","899a6830":"markdown","e4aff5d9":"markdown","cafb82d2":"markdown","5e07a851":"markdown","86d0df99":"markdown","b48ba96e":"markdown","728b39ca":"markdown","5ddf815a":"markdown","742ffdb3":"markdown","db1f7d12":"markdown","4281d0c0":"markdown","039f5fa3":"markdown","60d24557":"markdown"},"source":{"32b2d732":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95033c96":"import os\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np","ed4ac37f":"train_set = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ngender_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest_set = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","2896194b":"train_set","4298761e":"gender_sub","ef0f5ed6":"ages = train_set[\"Age\"].copy()\nfares = train_set[\"Fare\"].copy()\n\nplt.plot(fares,ages,\"g*\")","9f45ef40":"for i in range(891):# WE ARE USING .LOC INSTEAD OF CHAINED (  [][]  ) BRACKETS BECAUSE CHAINED BRACKETS CAN'T GUARANTEE THAT THEY WILL MAKE WANTED CHANGE FOR MORE INFO PLEASE READ PANDAS DOCUMENTATION\n    if train_set.loc[i,'Sex'] == \"male\":\n        train_set.loc[i,'Sex'] = 0\n    else:\n        train_set.loc[i,'Sex'] = 1\n#DON'T RUN TWICE OR MORE\n#MALE = 0, FEMALE = 1","5ce7a183":"train_set[\"Sex\"]","3fa7d8c1":"train_set","27739dc6":"correlation_matrix = train_set.corr()\ncorrelation_matrix[\"Survived\"]","464aa8de":"sex = train_set[\"Sex\"].copy()\nsurvived = train_set[\"Survived\"].copy()\nsex = sex\nsurvived = survived\nindices = []\nfor idx,x in enumerate(sex):\n    if x == 0:\n        indices.append(idx)\nmalesInSurvive = survived[indices]\n\nsurvivedMales = 0\n\nfor x in malesInSurvive:\n    if x == 1:\n        survivedMales = survivedMales + 1\nsurvivedMalesRate = survivedMales \/ len(malesInSurvive)\nprint(survivedMalesRate)\n\n\nindicesF = []\nfor idx,x in enumerate(sex):\n    if x == 1:\n        indicesF.append(idx)\nfemalesInSurvive = survived[indicesF]\n\nsurvivedFemales = 0\n\nfor x in femalesInSurvive:\n    if x == 1:\n        survivedFemales = survivedFemales + 1\nsurvivedFemalesRate = survivedFemales \/ len(femalesInSurvive)\nprint(survivedFemalesRate)","df9d0667":"train_set[\"Sex\"].value_counts()","bf8d4f58":"train_set[\"Survived\"].value_counts()","de8e5e86":"train_set.describe()","ccbe9791":"for x in range(891):\n    train_set.loc[x,'Name'] = len(train_set.loc[x,'Name'])\ntrain_set[\"Name\"] = pd.to_numeric(train_set[\"Name\"])#you need this to change string column to numeric completely\ntrain_set[\"Sex\"] = pd.to_numeric(train_set[\"Sex\"])#you need this to change string column to numeric completely\ncorrelation_matrix = train_set.corr()\ncorrelation_matrix[\"Survived\"]\n#As you can see turning name into len(name) is working somehow.","dd301ca1":"if \"train_labels\" in globals() or \"train_labels\" in locals():#this code checks for train_labels and plots it if it exists\n    plt.plot(train_set[\"Name\"],train_labels,\"r*\")#you can ask that why i did this ? Because train_labels variable is created at the\n    #end of the notebook so you are not going to be able to use it at first run but i don't want you to get an error too","fd797073":"%matplotlib inline\nfrom pandas.plotting import scatter_matrix\n\nattributes = [\"Sex\",\"Name\",\"Survived\",\"Pclass\"]\n\nscatter_matrix(train_set[attributes], figsize=(12,8))","d443f03b":"train_set = train_set.drop(\"Embarked\",axis=1)\ntrain_set = train_set.drop(\"Ticket\",axis=1)\ntrain_set = train_set.drop(\"Cabin\",axis=1)","72137d99":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values=np.nan, strategy='median')\n\nimputer.fit(train_set)\n\nimputer.statistics_","c29fb4d2":"train_set = imputer.transform(train_set)\ntrain_set = pd.DataFrame(train_set, columns=[\"PassengerId\",\"Survived\",\"Pclass\",\"Name\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\"])#recreating data frame because imputer outputs a plain array\ntrain_set#checking if everything is okey","580dfd25":"train_labels = train_set[\"Survived\"]\ntrain_set = train_set.drop(\"Survived\",axis=1)#axis 1 means column-wise","9bb2e8a4":"train_labels#checking if everything is okey","4a81098a":"train_set","7c0d47b4":"some_data = train_set.iloc[:20]\nsome_labels = train_labels.iloc[:20]\nsome_labels","5b1eef8c":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nparam_grid = [\n    {'n_estimators': [20,30,46,47,48,49,50], 'max_features': [6,8]},\n    {'bootstrap': [False], 'n_estimators': [3,10,20,30,40], 'max_features': [4,5,6,7]},\n]\n\nforest_reg = RandomForestRegressor()\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring='neg_mean_squared_error')\ngrid_search.fit(train_set, train_labels)\n\ngrid_search.best_params_","b366c97a":"grid_search.best_estimator_","113eb8c7":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators = 50000,max_features = 8)#Don't forget to change these \nforest_reg.fit(train_set, train_labels)\n\n\n\nforest_reg.predict(some_data)\nresults = 0\nfor idx,x in enumerate(forest_reg.predict(some_data)):\n    if x >= 0.5 and some_labels[idx] == 1:\n        results = results + 1\n    if x < 0.5 and some_labels[idx] == 0:\n        results = results + 1\nresults = results \/ len(some_labels)\nprint(results)","98a8e3d6":"test_set","1c51690b":"for i in range(418):\n    if test_set.loc[i,'Sex'] == \"male\":\n        test_set.loc[i,'Sex'] = 0\n    else:\n        test_set.loc[i,'Sex'] = 1\n#DON'T RUN TWICE OR MORE\n#MALE = 0, FEMALE = 1","1a9b9a68":"test_set","1861d3bc":"for i in range(418):\n    test_set.loc[i,'Name'] = len(test_set.loc[i,'Name'])\n#DON'T RUN TWICE OR MORE","f50ea4a5":"test_set","6e1a54f8":"column_names = test_set.columns\ncolumn_names","1b4f3954":"imputer.statistics_#medians that calculated before","11ff6b8f":"test_set.describe()","1930a3ea":"for idx,x in enumerate(range(418)):#we are manually assigning median's that calculated before\n    if pd.isna(test_set.loc[idx,\"Age\"]):test_set.loc[idx,\"Age\"] = 28\nfor idx,x in enumerate(range(418)):\n    if pd.isna(test_set.loc[idx,\"Fare\"]):test_set.loc[idx,\"Fare\"] = 14.4542\ntest_set","186d3bbc":"test_set = test_set.drop(\"Embarked\",axis=1)\ntest_set = test_set.drop(\"Ticket\",axis=1)\ntest_set = test_set.drop(\"Cabin\",axis=1)","ef9e01ad":"test_set","85d67a9d":"predictions = forest_reg.predict(test_set)#we are making forest to predict\nresults_test = predictions>=0.5#Our threshold is 0.5 and we are assigning everything bigger than and equal to 0.5, to True then 1\npassengers = test_set[\"PassengerId\"]#getting passenger ids to a variable to access quickly\nresults_test.reshape(-1,1)#ReShaping so we can use this with Passenger Ids\nresults_test = results_test * 1 # to turn Falses and Trues to 0s and 1s\nstr_array = [[\"PassengerId\",\"Survived\"]]#to turn array to csv we need to include column names as a list at the top of *list of lists*\nfor i,p in zip(passengers,results_test):#turning our results into wanted format\n    str_array.append([i,p])\nfor idx,x in enumerate(str_array):\n    if idx <10:\n        print(x)\nprint(\"...\")","8de08979":"import csv\n\n# open the file in the write mode\nf = open('\/kaggle\/working\/submission.csv',\"w\")\n\n\n# create the csv writer\nwriter = csv.writer(f)\n\n# write a row to the csv file\nfor row in str_array:\n    writer.writerow(row)\n\n# close the file\nf.close()\n","10e5c2b1":"submission_with_forest = pd.read_csv(\"\/kaggle\/working\/submission.csv\")\nsubmission_with_forest#we will submit this, you can download it from the \"DATA\" segment of this page","a2ad92fe":"# **Searching For Optimal(at least close to optimal) Parameters**","8bf2fa24":"# **Checking If Conversion Worked**","580b84bb":"# **Analysing Example Output**","ec131c75":"# **Checking If There is Relation In Data**","77bc03b9":"# **Dropping(Returning then removing) \"Survived\" Column because It's Our Label That We Will Fit Into ML Algorithms**","d652fbc7":"# **Dropping Unuseful Features(Probably they are not unuseful but we need to convert them to numbers in a reasonable way and to do this we need to understand the problem more)**","0592bd6a":"# **Now We are Making Predictions On Test Set And Format Them As Wanted**","049b3670":"# **Importing Mandatory Libraries**","899a6830":"# **Checking If Anything Changed Unintentionally**","e4aff5d9":"# **Analysing Overall Data**","cafb82d2":"# **Completing Missing Values With Others' Median**","5e07a851":"# **Correlation Matrix**","86d0df99":"# **Turning \"Name\" and \"Sex\" to numeric completely and checking for correlations(ofc linear)**","b48ba96e":"# **Checking For Rates of Survive for Males and Females discretely**","728b39ca":"# **From Now On We Will Prepare Test Set but Since I have Already Explained at Training Set(there will be really no change) I Won't Explain Again and You Can Skip to Bottom of Page If You Want**","5ddf815a":"# **Checking Which Classes Still Not Numeric**","742ffdb3":"# **Turning \"Sex\" Into Number**","db1f7d12":"# **Checking the Accuracy on Some Data**","4281d0c0":"# **Preparing Some Data to Use**","039f5fa3":"# **Checking For (Linear) Correlations**","60d24557":"# **Getting Data**"}}