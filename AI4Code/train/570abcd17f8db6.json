{"cell_type":{"67200e88":"code","2f942a27":"code","8e317990":"code","60312130":"code","c06a0340":"code","f22f2dda":"code","40be5bba":"code","bc28002f":"code","4b07329a":"code","7101efb2":"code","6500798a":"code","d7036e48":"code","e044b7dd":"code","d4df4198":"code","480200f2":"code","9fd5b3dd":"code","a1b0a2f1":"code","25d565df":"code","fc63d525":"code","d284e394":"code","1ba0b93a":"code","0997ce57":"code","224a9179":"code","74f10e64":"code","0d63240e":"code","acba1846":"code","993e9d8e":"code","03eeb034":"code","fbfe0302":"code","7285ac82":"code","996371e1":"code","6d49cfc0":"code","dae9d750":"code","18391f4a":"code","adf2287c":"code","c4d1c251":"code","92dcdef1":"code","61d0c209":"code","4aa4199b":"code","2c0867f3":"code","df5a0349":"code","eab09863":"code","0e098acf":"code","0c9fbb48":"code","2ac44cf8":"code","25aafb35":"code","40b93286":"code","d2da0290":"code","e1767188":"code","e8625a71":"code","e3e16808":"code","db310aae":"code","42072a61":"code","d64469f3":"code","5596ecf2":"code","98d3443b":"code","6c0fcb6c":"code","f8f88451":"code","e7918d3d":"code","eb557df2":"code","5c5f171c":"code","cd6d817a":"code","7e469004":"code","2cb8d057":"code","588adfe1":"code","8384c012":"code","7ad37668":"code","191ce004":"code","3bb3ea0d":"code","e24cf3aa":"code","22872af1":"code","44f968cb":"code","7e38593b":"markdown","ad3fee3e":"markdown","c7334c4a":"markdown","92b3a7bf":"markdown","2408117c":"markdown","4c91df16":"markdown","376c7254":"markdown","2f81a366":"markdown","f3f36d6f":"markdown","da8935b1":"markdown","3960c8e9":"markdown","230c6bd9":"markdown","df650790":"markdown","ac848e59":"markdown","c577d348":"markdown","f147a8cf":"markdown","92b0022e":"markdown","c7fbb357":"markdown","de142110":"markdown","56fd54c2":"markdown","1e1b735a":"markdown","498a2f1d":"markdown","88b939ee":"markdown","00068ec7":"markdown","3b7a81cf":"markdown","128db180":"markdown","d73ae9e7":"markdown","b214df13":"markdown","eb4f33ae":"markdown","0795a775":"markdown","eae9b190":"markdown","6cf7b136":"markdown","5812665b":"markdown","aa6c2f15":"markdown","86db6d2c":"markdown","77844af3":"markdown","ff4d8637":"markdown","8954e35a":"markdown","ca58473e":"markdown","29801633":"markdown","1e8839ff":"markdown","9ecb0562":"markdown","7936d56a":"markdown","19dcef11":"markdown","ed03f721":"markdown","3b29fe3f":"markdown","ad00c53a":"markdown","7a217880":"markdown","cf4e8f1b":"markdown","9c7bb161":"markdown","cd092291":"markdown","128e8fe9":"markdown","67250534":"markdown","952f25ed":"markdown","bbf24d20":"markdown","6538fe9c":"markdown","27e74529":"markdown","c9a3e795":"markdown","cc915386":"markdown","f0892be8":"markdown","f62e7a8b":"markdown","d1185d6f":"markdown","f4d47534":"markdown","0ab3da06":"markdown","82d55234":"markdown","f46ca576":"markdown","6e5207d3":"markdown","3c38f0bb":"markdown","819bb51c":"markdown","78776a95":"markdown","bfcc6f05":"markdown","f31191a6":"markdown","4cea1383":"markdown","006b1c45":"markdown","e71201fd":"markdown","111caddd":"markdown","df8d1451":"markdown","76173b36":"markdown","b29e8fbb":"markdown"},"source":{"67200e88":"import numpy as np # linear algebra\nimport pandas as pd # import in pandas\n\nimport os\nprint(os.listdir(\"..\/input\"))","2f942a27":"mySeries = pd.Series([3,-5,7,4], index=['a','b','c','d'])\ntype(mySeries)","8e317990":"data = {'Country' : ['Belgium', 'India', 'Brazil' ],\n        'Capital': ['Brussels', 'New Delhi', 'Brassilia'],\n        'Population': [1234,1234,1234]}\ndatas = pd.DataFrame(data, columns=['Country','Capital','Population'])\nprint(type(data))\nprint(type(datas))","60312130":"df = pd.read_csv('..\/input\/DJIA_table.csv')\ntype(df)\n# If your Python file is not in the same folder as your CSV file, you should do this as follows.\n# df = pd.read_csv('\/home\/desktop\/Iris.csv')","c06a0340":"# pd.read_excel('filename')\n# pd.to_excel('dir\/dataFrame.xlsx', sheet_name='Sheet1')","f22f2dda":"# pd.read_sql(query,connection_object) -> Reads from a SQL table\/database\n# pd.read_table(filename) -> From a delimited text file(like TSV)\n# pd.read_json(json_string) -> Reads from a json formatted string, URL or file\n# pd.read_html(url) -> Parses an html URL, string or file and extracts tables to a list of dataframes\n# pd.read_clipboard() -> Takes the contentes of your clipboard and passes it to read_table()\n# pd.DataFrame(dict) -> From a dict, keys for columns names, values for data as lists","40be5bba":"# df.to_csv(filename) -> Writes to a CSV file\n# df.to_excel(filename) -> Writes on an Excel file\n# df.to_sql(table_name, connection_object) -> Writes to a SQL table\n# df.to_json(filename) -> Writes to a file in JSON format\n# df.to_html(filename) -> Saves as an HTML table\n# df.to_clipboard() -> Writes to the clipboard","bc28002f":"pd.DataFrame(np.random.rand(20,5)) # 5 columns and 20 rows of random floats","4b07329a":"df.info()","7101efb2":"df.shape","6500798a":"df.index","d7036e48":"df.columns","e044b7dd":"df.count()","d4df4198":"df.sum()","480200f2":"df.cumsum().head()","9fd5b3dd":"df.min()","a1b0a2f1":"df.max()","25d565df":"print(\"df: \",df['Open'].idxmin())\nprint(\"series\", mySeries.idxmin())","fc63d525":"print(\"df: \",df['Open'].idxmax())\nprint(\"series: \",mySeries.idxmax())","d284e394":"df.describe()","1ba0b93a":"df.mean()","0997ce57":"df.median()","224a9179":"df.quantile([0.25,0.75])","74f10e64":"df.var()","0d63240e":"df.std()","acba1846":"df.cummax()","993e9d8e":"df.cummin()","03eeb034":"df['Open'].cumprod().head()","fbfe0302":"len(df)","7285ac82":"df.isnull().head()","996371e1":"df.corr()","6d49cfc0":"mySeries['b']","dae9d750":"df[1982:]\n#Or\n#df[5:7]","18391f4a":"df.iloc[[0],[3]]","adf2287c":"#df.loc[n:]\n# OR\ndf.loc[5:7]","c4d1c251":"df['Open'].head()\n# OR\n# df.Open","92dcdef1":"df['Open'][0]\n# OR\n# df.Open[0]\n# df[\"Open\"][1]\n# df.loc[1,[\"Open\"]]","61d0c209":"df['Open'].nunique()","4aa4199b":"df['Open'].unique()\n# We can write the above code as follows:: df.Open.unique()","2c0867f3":"df.Open.head()","df5a0349":"print(df.Open.value_counts(dropna =True).head())\n# OR\n# print(df['Item'].value_counts(dropna =False))","eab09863":"df.head()\n# OR\n# df.head(15)","0e098acf":"df.tail()\n# OR\n# df.tail(20)","0c9fbb48":"df.sample(5)","2ac44cf8":"df.sample(frac=0.5).head()","25aafb35":"df.nlargest(5,'Open')","40b93286":"df.nsmallest(3,'Open')","d2da0290":"df[df.Open > 18281.949219]","e1767188":"df[['High','Low']].head()\n# df.loc[:,[\"High\",\"Low\"]]","e8625a71":"df.loc[:,\"Date\":\"Close\"].head()\n# OR\n# data.loc[:3,\"Date\":\"Close\"]","e3e16808":"filters = df.Date > '2016-06-27'\ndf[filters]","db310aae":"df.filter(regex='^L').head()","42072a61":"df[np.logical_and(df['Open']>18281.949219, df['Date']>'2015-05-20' )]","d64469f3":"df[(df['Open']>18281.949219) & (df['Date']>'2015-05-20')]","5596ecf2":"df.sort_values('Open').head()","98d3443b":"df.sort_values('Date', ascending=False).head()","6c0fcb6c":"df.sort_index().head()","f8f88451":"df.rename(columns= {'Adj Close' : 'Adjclose'}).head()\n# df = df.rename(columns= {'Id' : 'Identif'}, inplace=True) -> True way\n# inplace= True or False; This meaning, overwrite the data set.\n# Other Way\n# df.columns = ['date', 'open', 'high', 'low', 'close', 'volume', 'adjclose']","e7918d3d":"df[\"Difference\"] = df.High - df.Low\ndf.head()","eb557df2":"print(df.index.name)\ndf.index.name = \"index_name\"\ndf.head()","5c5f171c":"#df.columns = map(str.lower(), df.columns)","cd6d817a":"#df.columns = map(str.upper(), df.columns)","7e469004":"df.drop(columns=['Adj Close']).head()\n# df = df.drop(columns=['Id']) -> True way\n# OR\n# df = df.drop('col', axis=1)\n# axis = 1 is meaning delete columns\n# axis = 0 is meaning delete rows","2cb8d057":"mySeries.drop(['a'])","588adfe1":"# df.drop(['2016-07-01', '2016-06-27'])","8384c012":"# df.drop('Volume', axis=1)","7ad37668":"df.dtypes","191ce004":"df.Date.astype('category').dtypes\n# OR Convert Datetime\n# df.Date= pd.to_datetime(df.Date)","3bb3ea0d":"df_new = df.head()\nmelted = pd.melt(frame=df_new,id_vars = 'Date', value_vars= ['Low'])\nmelted","e24cf3aa":"def examples(x):   #create a function\n    return x*2\n\ndf.Open.apply(examples).head()  #use the function with apply() ","22872af1":"df.Open.apply(lambda x: x*2).head()","44f968cb":"# pd.get_option OR pd.set_option\n# pd.reset_option(\"^display\")\n\n# pd.reset_option(\"display.max_rows\")\n# pd.get_option(\"display.max_rows\")\n# pd.set_option(\"max_r\",102)                 -> specifies the maximum number of rows to display.\n# pd.options.display.max_rows = 999          -> specifies the maximum number of rows to display.\n\n# pd.get_option(\"display.max_columns\")\n# pd.options.display.max_columns = 999       -> specifies the maximum number of columns to display.\n\n# pd.set_option('display.width', 300)\n\n# pd.set_option('display.max_columns', 300)  -> specifies the maximum number of rows to display.\n# pd.set_option('display.max_colwidth', 500) -> specifies the maximum number of columns to display. \n\n# pd.get_option('max_colwidth')\n# pd.set_option('max_colwidth',40)\n# pd.reset_option('max_colwidth')\n\n# pd.get_option('max_info_columns')\n# pd.set_option('max_info_columns', 11)\n# pd.reset_option('max_info_columns')\n\n# pd.get_option('max_info_rows')\n# pd.set_option('max_info_rows', 11)\n# pd.reset_option('max_info_rows')\n\n# pd.set_option('precision',7) -> sets the output display precision in terms of decimal places. This is only a suggestion.\n# OR\n# pd.set_option('display.precision',3)\n\n# pd.set_option('chop_threshold', 0) -> sets at what level pandas rounds to zero when it displays a Series of DataFrame. This setting does not change the precision at which the number is stored.\n# pd.reset_option('chop_threshold') ","7e38593b":"# **Pandas Data Structure** <a id=\"4\"><\/a>\n<mark>[Return Contents](#0)\n<hr>\n\nPandas has two types of data structures. These are series and dataframe.\n\n### **Series** <a id=\"5\"><\/a>\n\nThe series is a one-dimensional labeled array. It can accommodate any type of data in it.","ad3fee3e":"### **df.max()** <a id=\"22\"><\/a>\nThis code brings up the largest among the data.\n\n<mark>[Return Contents](#0)\n<hr>","c7334c4a":"### **df['columnName']** <a id=\"41\"><\/a>\nWith this code, we can select and bring any column we want.\n\n<mark>[Return Contents](#0)\n<hr>","92b3a7bf":"# **Overview** <a id=\"1\"><\/a>\n<mark>[Return Contents](#0)\n<hr>\n\nWelcome to my Kernel! In this kernel, I show you Pandas functions and how to use pandas. Why do I this? Because everyone who's just starting out or who's a professional is using the pandas.\n\nIf you have a question or feedback, do not hesitate to write and if you **like** this kernel, please do not forget to **UPVOTE**.","2408117c":"### **Make all columns uppercase** <a id=\"69\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","4c91df16":"### **df['columnName'].cumproad()** <a id=\"33\"><\/a>\nThis code returns the cumulative production of the data.\n\n<mark>[Return Contents](#0)\n<hr>","376c7254":"### **df.quantile([0.25,0.75])**  <a id=\"28\"><\/a>\nThis code calculates the values 0.25 and 0.75 of the columns for each column.\n\n<mark>[Return Contents](#0)\n<hr>","2f81a366":"# **Sort Data** <a id=\"60\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>\n\n### **df.sort_values('columnName')** <a id=\"61\"><\/a>\nThis code sorts the column we specify in the form of low to high.","f3f36d6f":"### **len(df)** <a id=\"34\"><\/a>\nThis code gives you how many data there is.\n\n<mark>[Return Contents](#0)\n<hr>","da8935b1":"### **Create Filter** <a id=\"56\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","3960c8e9":"### **idxmin()**  <a id=\"23\"><\/a>\nThis code fetches the smallest value in the data. The use on series and dataframe is different.\n\n<mark>[Return Contents](#0)\n<hr>","230c6bd9":"### **mySeries['b']** <a id=\"37\"><\/a>\nThis code returns data with a value of B in series.\n\n<mark>[Return Contents](#0)\n<hr>","df650790":"### **df.filter(regex = 'code')** <a id=\"57\"><\/a>\nThis code allows regex to filter any data we want.\n\n<mark>[Return Contents](#0)\n<hr>","ac848e59":"### **df.sample(n)** <a id=\"49\"><\/a>\nThis code fetches random n data from the data.\n\n<mark>[Return Contents](#0)\n<hr>","c577d348":"### **df.isnull()** <a id=\"35\"><\/a>\nChecks for null values, returns boolean.\n\n<mark>[Return Contents](#0)\n<hr>","f147a8cf":"### **df.loc[:,\"columnName1\":\"columnName2\"]** <a id=\"55\"><\/a>\nThis code returns columns from columnname1 to columnname2.\n\n<mark>[Return Contents](#0)\n<hr>","92b0022e":"### **df.tail(n)** <a id=\"48\"><\/a>\nThis code optionally brings 5 data at the end. returns the number of data that you type instead of N.\n\n<mark>[Return Contents](#0)\n<hr>","c7fbb357":"### **df.sort_index()** <a id=\"63\"><\/a>\nThis code sorts from small to large according to the DataFrame index.\n\n<mark>[Return Contents](#0)\n<hr>","de142110":"### **df.mean()**  <a id=\"26\"><\/a>\nThis code returns the mean value for the numeric column.\n\n<mark>[Return Contents](#0)\n<hr>","56fd54c2":"### **df.min()** <a id=\"21\"><\/a>\nThis code brings us the smallest of the data.\n\n<mark>[Return Contents](#0)\n<hr>","1e1b735a":"# **Exporting Data** <a id=\"11\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","498a2f1d":"### **df.sample(frac=0.5)** <a id=\"50\"><\/a>\nThis code selects the fractions of random rows and fetches the data to that extent.\n\n<mark>[Return Contents](#0)\n<hr>","88b939ee":"### **idxmax()**  <a id=\"24\"><\/a>\nThis code returns the largest value in the data.\n\n<mark>[Return Contents](#0)\n<hr>","00068ec7":"### **np.logical_and** <a id=\"58\"><\/a>\nFiltering with logical_and. Lets look at the example.\n\n<mark>[Return Contents](#0)\n<hr>","3b7a81cf":"### **pd.melt(frame=dataFrameName,id_vars = 'columnName', value_vars= ['columnName'])** <a id=\"76\"><\/a>\nThis code is confusing, so lets look at the example.\n\n<mark>[Return Contents](#0)\n<hr>","128db180":"### **Excel** <a id=\"9\"><\/a>\n\nWhen we want to work with Excel files, we need to type the following code.","d73ae9e7":"### **df.nsmallest(n,'columnName')** <a id=\"52\"><\/a>\nThis code brings N from the column where we have specified the smallest data.\n\n<mark>[Return Contents](#0)\n<hr>","b214df13":"### **Method 2** <a id=\"79\"><\/a>","eb4f33ae":"### **df['columnName'][n]** <a id=\"42\"><\/a>\nWith this code, we can select and return any value of the column we want.\n\n<mark>[Return Contents](#0)\n<hr>","0795a775":"### **df.cummax()** <a id=\"31\"><\/a>\nThis code calculates the cumulative max value between the data.\n\n<mark>[Return Contents](#0)\n<hr>","eae9b190":"### **df.columnName** <a id=\"45\"><\/a>\nThis code is another way to select the column we want.\n\n<mark>[Return Contents](#0)\n<hr>","6cf7b136":"### **df.sort_values('columnName', ascending=False)** <a id=\"62\"><\/a>\nThis code is the column we specify in the form of high to low.\n\n<mark>[Return Contents](#0)\n<hr>","5812665b":"### **df.sum()** <a id=\"19\"><\/a>\nThis code shows us the sum of the data in each column.\n\n<mark>[Return Contents](#0)\n<hr>","aa6c2f15":"### **Change Index Name** <a id=\"67\"><\/a>\nChange index name to new index name\n\n<mark>[Return Contents](#0)\n<hr>","86db6d2c":"### **df['columnName'].nunique()** <a id=\"43\"><\/a>\nThis code shows how many of the data that is in the selected column and does not repeat.\n\n<mark>[Return Contents](#0)\n<hr>","77844af3":"### **df.var()**  <a id=\"29\"><\/a>\nThis code calculates the variance value for each column with a numeric value.\n\n<mark>[Return Contents](#0)\n<hr>","ff4d8637":"### **df.info()** <a id=\"14\"><\/a>\nThis Code provides detailed information about our data.\n\n* **RangeIndex:** Specifies how many data there is.\n* **Data Columns:** Specifies how many columns are found.\n* **Columns:** Gives information about Columns.\n* **dtypes:** It says what kind of data you have and how many of these data you have.\n* **Memory Usage:** It says how much memory usage is.\n\n<mark>[Return Contents](#0)\n<hr>","8954e35a":"### **df.cummin()** <a id=\"32\"><\/a>\nThis code returns the cumulative min value of the data.\n\n<mark>[Return Contents](#0)\n<hr>","ca58473e":"# **Import Library** <a id=\"3\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","29801633":"# **Import Library** <a id=\"7\"><\/a>\n<mark>[Return Contents](#0)\n<hr>\n\nWith pandas, we can open CSV, Excel and SQL databases. I will show you how to use this method for CSV and Excel files only.\n\n### **CSV(comma - separated values)** <a id=\"8\"><\/a>\n\nIt is very easy to open and read CSV files and to overwrite the CSV file.","1e8839ff":"### **df.rename(columns= {'columnName' : 'newColumnName'})** <a id=\"65\"><\/a>\nThis code helps us change the column name. The code I wrote below changes the ID value, but as we did not assign the change to the variable DF, it seems to be unchanged as you see below.","9ecb0562":"# **Drop Data** <a id=\"70\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>","7936d56a":"### **mySeries.drop(['a'])** <a id=\"72\"><\/a>\nThis code allows us to delete the value specified in the series.\n\n<mark>[Return Contents](#0)\n<hr>","19dcef11":"### **Filtering with &** <a id=\"59\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","ed03f721":"### **df.corr()** <a id=\"81\"><\/a>\nit gives information about the correlation between the data.\n\n<mark>[Return Contents](#0)\n<hr>","3b29fe3f":"### **df.describe()**  <a id=\"25\"><\/a>\nThis Code provides basic statistical information about the data. The numerical column is based.\n\n* **count:** vnumber of entries\n* **mean: **average of entries\n* **std:** standart deviation\n* **min:** minimum entry\n* **25%:** first quantile\n* **50%:** median or second quantile\n* **75%:** third quantile\n* **max:** maximum entry\n\n<mark>[Return Contents](#0)\n<hr>","ad00c53a":"### **DataFrame** <a id=\"6\"><\/a>\n\nThe dataframe is a two-dimensional data structure. It contains columns.","7a217880":"# **Summarize Data** <a id=\"13\"><\/a>\n<mark>[Return Contents](#0)\n<hr>\n\nIt's easy to get information about data with pandas. It makes it easier for us. Let's examine the existing functions one by one","cf4e8f1b":"# **Rename & Defining New & Change Columns** <a id=\"64\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","9c7bb161":"### **df.std()** <a id=\"30\"><\/a>\nThis code calculates the standard deviation value for each column with numeric value.\n\n<mark>[Return Contents](#0)\n<hr>","cd092291":"### **df['columnName'] = df['columnName'].astype('dataType')** <a id=\"75\"><\/a>\nThis code convert the column we specify into the data type we specify.\n\n<mark>[Return Contents](#0)\n<hr>","128e8fe9":"### **df.head(n)** <a id=\"47\"><\/a>\nThis code optionally brings in the first 5 data. returns the number of data that you type instead of N.\n\n<mark>[Return Contents](#0)\n<hr>","67250534":"### **Drop a variable (column)** <a id=\"83\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>\nNote: axis=1 denotes that we are referring to a column, not a row","952f25ed":"### **df.index** <a id=\"16\"><\/a>\nThis code shows the total number of index found.\n\n<mark>[Return Contents](#0)\n<hr>","bbf24d20":"### **df.median()**  <a id=\"27\"><\/a>\nThis code returns median for columns with numeric values.\n\n<mark>[Return Contents](#0)\n<hr>","6538fe9c":"### **df.drop(columns=['columnName'])** <a id=\"71\"><\/a>\nThis code deletes the column we have specified. But as above, I have to reset the delete to the df variable again.","27e74529":"### **Others(json, SQL, table, html)** <a id=\"10\"><\/a>","c9a3e795":"### **df['columnName'].unique()** <a id=\"44\"><\/a>\nThis code shows which of the data in the selected column repeats.\n\n<mark>[Return Contents](#0)\n<hr>","cc915386":"###  **Defining New Column** <a id=\"66\"><\/a>\nCreate a new column\n\n<mark>[Return Contents](#0)\n<hr>","f0892be8":"### **df.nlargest(n,'columnName')** <a id=\"51\"><\/a>\nThis code brings N from the column where we have specified the largest data.\n\n<mark>[Return Contents](#0)\n<hr>","f62e7a8b":"# **What is the pandas?** <a id=\"2\"><\/a>\n<mark>[Return Contents](#0)\n<hr>\n\npandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\npandas is a NumFOCUS sponsored project. This will help ensure the success of development of pandas as a world-class open-source project, and makes it possible to donate to the project.","d1185d6f":"### **df[n:n]** <a id=\"38\"><\/a>\nThis code fetches data from N to N.\n\n<mark>[Return Contents](#0)\n<hr>","f4d47534":"### **df[['columnName','columnName']]** <a id=\"54\"><\/a>\nThis code helps us pick and bring any columns we want.\n\n<mark>[Return Contents](#0)\n<hr>","0ab3da06":"### **df['columnName'].value_counts(dropna =False)** <a id=\"46\"><\/a>\nThis code counts all of the data in the column we have specified, but does not count the null\/none values.\n\n<mark>[Return Contents](#0)\n<hr>","82d55234":"### **df[df.columnName < 5]** <a id=\"53\"><\/a>\nThis code returns the column name we have specified, which is less than 5.\n\n<mark>[Return Contents](#0)\n<hr>","f46ca576":"# **Create Test Objects** <a id=\"12\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","6e5207d3":"# **Pandas Tutorial** <a id=\"0\"><\/a>\n<hr>\n1. [Overview](#1)\n2. [Pandas Library About](#2)\n3. [Import Library](#3)\n4. [Pandas Data Structure](#4)\n    * [Series](#5)\n    * [DataFrame](#6)\n5. [Import Data](#7)\n    * [CSV](#8)\n    * [Excel](#9)\n    * [Others(json, SQL, html)](#10)\n6. [Exporting Data](#11)\n7. [Create Test Objects](#12)\n8. [Summariza Data](#13)\n    * [df.info()](#14)\n    * [df.shape()](#15)\n    * [df.index](#16)\n    * [df.columns](#17)\n    * [df.count()](#18)\n    * [df.sum()](#19)\n    * [df.cumsum()](#20)\n    * [df.min()](#21)\n    * [df.max()](#22)\n    * [idxmin()](#23)\n    * [idxmax()](#24)\n    * [df.describe()](#25)\n    * [df.mean()](#26)\n    * [df.median()](#27)\n    * [df.quantile([0.25,0.75])](#28)\n    * [df.var()](#29)\n    * [df.std()](#30)\n    * [df.cummax()](#31)\n    * [df.cummin()](#32)\n    * [df['columnName'].cumproad()](#33)\n    * [len(df)](#34)\n    * [df.isnull()](#35)\n    * [df.corr()](#81)\n9. [Pandas with Selection & Filtering](#36)\n    * [series['index']](#37)\n    * [df[n:n]](#38)\n    * [df.iloc[[0],[5]]](#39)\n    * [df.loc[n:n]](#40)\n    * [df['columnName']](#41)\n    * [df['columnName][n]](#42)\n    * [df['columnName'].nunique()](#43)\n    * [df['columnName'].unique()](#44)\n    * [df.columnName](#45)\n    * [df['columnName'].value_counts(dropna =False)](#46)\n    * [df.head(n)](#47)\n    * [df.tail(n)](#48)\n    * [df.sample(n)](#49)\n    * [df.sample(frac=0.5)](#50)\n    * [df.nlargest(n,'columnName')](#51)\n    * [df.nsmallest(n,'columnName')](#52)\n    * [df[df.columnName < n]](#53)\n    * [df[['columnName','columnName']] ](#54)\n    * [df.loc[:,\"columnName1\":\"columnName2\"]](#55)\n    * [Create Filter](#56)\n    * [df.filter(regex = 'code')](#57)\n    * [np.logical_and](#58)\n    * [Filtering with &](#59)\n10. [Sort Data](#60)\n    * [df.sort_values('columnName')](#61)\n    * [df.sort_values('columnName', ascending=False)](#62)\n    * [df.sort_index()](#63)\n11. [Rename & Defining New & Change Columns](#64)\n    * [df.rename(columns= {'columnName' : 'newColumnName'})](#65)\n    * [Defining New Column](#66)\n    * [Change Index Name](#67)\n    * [Make all columns lowercase](#68)\n    * [Make all columns uppercase](#69)\n12. [Drop Data](#70)\n    * [df.drop(columns=['columnName'])](#71)\n    * [Series.drop(['index'])](#72)\n    * [Drop an observation (row)](#82)\n    * [Drop a variable (column)](#83)\n13. [Convert Data Types](#73)\n    * [df.dtypes](#74)\n    * [df['columnName'] = df['columnName'].astype('dataType')](#75)\n    * [pd.melt(frame=dataFrameName,id_vars = 'columnName', value_vars= ['columnName'])](#76)\n14. [Apply Function](#77)\n    * [Method 1](#78)\n    * [Method 2](#79)\n15. [Utilities Code](#80)","3c38f0bb":"# **Utilities Code** <a id=\"80\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>","819bb51c":"### **df.cumsum()** <a id=\"20\"><\/a>\nThis code gives us cumulative sum of the data.\n\n<mark>[Return Contents](#0)\n<hr>","78776a95":"# **Convert Data Types** <a id=\"73\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>\n\n### **df.dtypes** <a id=\"74\"><\/a>\nThis code shows what data type of columns are. Boolean, int, float, object(String), date and categorical.","bfcc6f05":"### **df.count()** <a id=\"18\"><\/a>\nThis code shows us how many pieces of data are in each column.\n\n<mark>[Return Contents](#0)\n<hr>","f31191a6":"### **df.columns** <a id=\"17\"><\/a>\nThis code shows all the columns contained in the data we have examined.\n\n<mark>[Return Contents](#0)\n<hr>","4cea1383":"### **df.shape()** <a id=\"15\"><\/a>\nThis code shows us the number of rows and columns.\n\n<mark>[Return Contents](#0)\n<hr>","006b1c45":"# **Selection & Filtering** <a id=\"36\"><\/a>\n<mark>[Return Contents](#0)\n<hr>\n\nThis is how we can choose the data we want with pandas, how we can bring unique data.","e71201fd":"### **df.iloc[[n],[n]]** <a id=\"39\"><\/a>\nThis code brings the data in the N row and N column in the DataFrame.\n\n<mark>[Return Contents](#0)\n<hr>","111caddd":"# **Apply Function** <a id=\"77\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>\n\n### **Method 1** <a id=\"78\"><\/a>","df8d1451":"### **Make all columns lowercase** <a id=\"68\"><\/a>\n<mark>[Return Contents](#0)\n<hr>","76173b36":"### **Drop an observation (row)** <a id=\"82\"><\/a>\n\n<mark>[Return Contents](#0)\n<hr>","b29e8fbb":"### **df.loc[n:n]** <a id=\"40\"><\/a>\nThis code allows us to fetch the data in the range we specify.\n\n<mark>[Return Contents](#0)\n<hr>"}}