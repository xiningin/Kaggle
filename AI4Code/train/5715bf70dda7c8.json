{"cell_type":{"0741c3ba":"code","fbed971e":"code","d4f908dd":"code","684a6a62":"code","e941c80f":"code","b62e026e":"code","de41de2d":"code","2ba179e2":"code","730ba62b":"code","0be65c0f":"code","e5ccd37c":"code","be7e664b":"code","a32b5b63":"code","13785fdc":"code","14d5fdfb":"code","cd96e13b":"code","5f21c19d":"code","7343af26":"code","c8d6681b":"code","db446ebd":"code","a3501435":"code","02ff66ed":"code","cb4fa1b3":"code","bb0bc121":"markdown","882d56cb":"markdown","9fdf5196":"markdown","13238e57":"markdown","c86d54f5":"markdown"},"source":{"0741c3ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fbed971e":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom mlxtend.plotting import plot_decision_regions","d4f908dd":"df = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv') ","684a6a62":"set(df.species)","e941c80f":"df.columns","b62e026e":"df.head()","de41de2d":"sns.pairplot(df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']])","2ba179e2":"dict ={\n    'Iris-setosa': 1 ,\n    'Iris-versicolor' : 2,\n    'Iris-virginica' : 3\n}\ndef flip(x):\n    return dict[x]","730ba62b":"df['species'] = df['species'].apply(lambda x : flip(x))","0be65c0f":"X = df[['sepal_length','sepal_width','petal_length','petal_width']]\ny = df['species']","e5ccd37c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","be7e664b":"#Using Logistic Regression  \nlog = LogisticRegression()\nlog.fit(X_train , y_train)\npred = log.predict(X_test)","a32b5b63":"pred","13785fdc":"score = log.score(X_test, y_test)\nprint(score)\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(y_test,pred))\nprint(classification_report(y_test,pred))","14d5fdfb":"df.shape","cd96e13b":"from sklearn.svm import SVC\n#svc = SVC(kernel = 'linear')\nsvc = SVC(kernel = 'poly')\n#svc = SVC(kernel = 'sigmoid')\n#svc = SVC(kernel = 'rbf')\n\nsvc.fit(X_train , y_train)\ny_pred = svc.predict(X_test)\n\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\n\n\n\n","5f21c19d":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\npc = pca.fit_transform(X_train)\nldf = pd.DataFrame(data = pc, columns = ['p1', 'p2'])","7343af26":"from sklearn.svm import SVC\n#svc = SVC(kernel = 'linear')\n#svc = SVC(kernel = 'poly')\n#svc = SVC(kernel = 'sigmoid')\nsvc = SVC(kernel = 'rbf')\nsvc.fit(ldf, y_train)\npc = pca.fit_transform(X_test)\nldf = pd.DataFrame(data = pc, columns = ['p1', 'p2'])\ny_pred = svc.predict(pc)","c8d6681b":"plot_decision_regions(ldf.values, y_pred,clf =  svc,legend = 1)\n# Adding axes annotations\nplt.xlabel('sepal length [cm]')\nplt.ylabel('petal length [cm]')\nplt.title('SVM on Iris')\n","db446ebd":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","a3501435":"df = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv') ","02ff66ed":"X = df[['sepal_length','sepal_width','petal_length','petal_width']]\nY = df['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","cb4fa1b3":"encoder = LabelEncoder()\nencoder.fit(Y)\nencoded_Y = encoder.transform(Y)\ndef create_baseline():\n    # create model\n    model = Sequential()\n    model.add(Dense(4, input_dim=4, activation='relu'))\n    model.add(Dense(2, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    # Compile model\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n# evaluate model with standardized dataset\nestimator = KerasClassifier(build_fn=create_baseline, epochs=100, batch_size=5, verbose=0)\nkfold = StratifiedKFold(n_splits=10, shuffle=True)\nresults = cross_val_score(estimator, X, encoded_Y, cv=kfold)\nprint(\"Baseline: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","bb0bc121":"# Using svm classifier","882d56cb":"# Data is far to less to train a proper neural net.","9fdf5196":"To allow representation on a 2D axis , we will use PCA algorithm to aid in getting data in 2D.\n","13238e57":"# Using Logistic Regression for classification","c86d54f5":"# Using neural network :"}}