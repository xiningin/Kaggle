{"cell_type":{"670bed33":"code","c08a98aa":"code","9e165402":"code","21baccf5":"code","23d63c18":"code","640ba256":"code","cfa6f42b":"code","716fd0ef":"code","43895ea5":"code","efc27416":"code","1d2fb0eb":"code","5efe0f72":"markdown","70325e3f":"markdown","3ae3006d":"markdown"},"source":{"670bed33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c08a98aa":"import librosa, librosa.display\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport IPython.display as ipd","9e165402":"pd.set_option(\"display.max_columns\", 40)","21baccf5":"train_df = pd.read_csv(\"\/kaggle\/input\/birdsong-recognition\/train.csv\")\ntrain_df.head()","23d63c18":"base_dir = \"\/kaggle\/input\/birdsong-recognition\/train_audio\/\"\ntrain_df['full_path'] = base_dir + train_df['ebird_code'] + '\/' + train_df['filename']","640ba256":"# Lets see about the 'aldfly' bird\nfile = train_df[train_df['ebird_code'] == 'aldfly'].reset_index()['full_path'][0]\nsignal, sr = librosa.load(file, sr=40200)\n# WAVEPLOT\nlibrosa.display.waveplot(signal, sr = sr)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Amplitude\")\nplt.show()\n\n\nn_fft = 2048\nhop_length = 512 # How much we have to shift\nstft = librosa.core.stft(signal, hop_length = hop_length, n_fft = n_fft)\nspectrogram = np.abs(stft)\n\nlog_spectrogram  = librosa.amplitude_to_db(spectrogram)\n\n# SPECTROFRAM\nlibrosa.display.specshow(spectrogram, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Frequency\")\nplt.colorbar()\nplt.set_cmap(\"viridis\")\nplt.show()\n\n# LOG SPECTROGRAM\nlibrosa.display.specshow(log_spectrogram, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Frequency\")\nplt.set_cmap(\"viridis\")\nplt.colorbar()\nplt.show()\n\n#MFCCs\nMFCCs = librosa.feature.mfcc(signal, n_fft = n_fft, hop_length = hop_length, n_mfcc = 13)\nlibrosa.display.specshow(MFCCs, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"MFCCs\")\nplt.set_cmap(\"viridis\")\nplt.colorbar()\nplt.show()\n","cfa6f42b":"ipd.Audio(file)","716fd0ef":"# Lets see about the 'ameavo' bird\nfile = train_df[train_df['ebird_code'] == 'ameavo'].reset_index()['full_path'][0]\nsignal, sr = librosa.load(file, sr=40200)\n# WAVEPLOT\nlibrosa.display.waveplot(signal, sr = sr)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Amplitude\")\nplt.show()\n\n\nn_fft = 2048\nhop_length = 512 # How much we have to shift\nstft = librosa.core.stft(signal, hop_length = hop_length, n_fft = n_fft)\nspectrogram = np.abs(stft)\n\nlog_spectrogram  = librosa.amplitude_to_db(spectrogram)\n\n# SPECTROFRAM\nlibrosa.display.specshow(spectrogram, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Frequency\")\nplt.colorbar()\nplt.set_cmap(\"viridis\")\nplt.show()\n\n# LOG SPECTROGRAM\nlibrosa.display.specshow(log_spectrogram, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Frequency\")\nplt.set_cmap(\"viridis\")\nplt.colorbar()\nplt.show()\n\n#MFCCs\nMFCCs = librosa.feature.mfcc(signal, n_fft = n_fft, hop_length = hop_length, n_mfcc = 13)\nlibrosa.display.specshow(MFCCs, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"MFCCs\")\nplt.set_cmap(\"viridis\")\nplt.colorbar()\nplt.show()\n","43895ea5":"ipd.Audio(file)","efc27416":"# Lets see about the 'brdowl' bird\nfile = train_df[train_df['ebird_code'] == 'brdowl'].reset_index()['full_path'][0]\nsignal, sr = librosa.load(file, sr=40200)\n# WAVEPLOT\nlibrosa.display.waveplot(signal, sr = sr)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Amplitude\")\nplt.show()\n\n\nn_fft = 2048\nhop_length = 512 # How much we have to shift\nstft = librosa.core.stft(signal, hop_length = hop_length, n_fft = n_fft)\nspectrogram = np.abs(stft)\n\nlog_spectrogram  = librosa.amplitude_to_db(spectrogram)\n\n# SPECTROFRAM\nlibrosa.display.specshow(spectrogram, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Frequency\")\nplt.colorbar()\nplt.set_cmap(\"viridis\")\nplt.show()\n\n# LOG SPECTROGRAM\nlibrosa.display.specshow(log_spectrogram, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Frequency\")\nplt.set_cmap(\"viridis\")\nplt.colorbar()\nplt.show()\n\n#MFCCs\nMFCCs = librosa.feature.mfcc(signal, n_fft = n_fft, hop_length = hop_length, n_mfcc = 13)\nlibrosa.display.specshow(MFCCs, sr = sr, hop_length = hop_length)\nplt.xlabel(\"Time\")\nplt.ylabel(\"MFCCs\")\nplt.set_cmap(\"viridis\")\nplt.colorbar()\nplt.show()\n","1d2fb0eb":"ipd.Audio(file)","5efe0f72":"# ***Aldfly Bird***","70325e3f":"# ***Ameavo Bird***","3ae3006d":"# ***Brdowl Bird***"}}