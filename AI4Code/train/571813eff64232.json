{"cell_type":{"7498439e":"code","f1f7f38f":"code","b807e443":"code","19762ac6":"code","454960ee":"code","93ae3981":"code","b88254ac":"code","2e4c9137":"code","f2c57acf":"code","3423737d":"code","cf0adb4d":"code","6ee2f24e":"code","2990f09c":"markdown"},"source":{"7498439e":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport re\nimport os\nimport imageio\n\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\n\nimport numpy as np # linear algebra\nimport random\n\nimport tensorflow as tf","f1f7f38f":"for dirname, _, filenames in os.walk('..\/input\/predictions'):\n    name_list = []\n    for filename in filenames:\n        name_list.append(filename)\n    name_list.sort()\n    predictions = np.array([imageio.imread(os.path.join(dirname, filename)) for filename in name_list[:100]])\n    groundtruth = np.array([imageio.imread(os.path.join(dirname, filename)) for filename in name_list[100:]])\n\nprint(predictions.shape)\nprint(groundtruth.shape)\n","b807e443":"from skimage import measure\nimport skimage.data as data\nimport skimage.segmentation as seg\nimport skimage.filters as filters\nimport skimage.draw as draw\nimport skimage.color as color\nimport skimage.transform as trsf\n\nfor ined in range(40,50):\n    fig = plt.figure()\n    fig.add_subplot(1, 4, 1)\n    plt.imshow(groundtruth[ined])\n\n    fig.add_subplot(1, 4, 2)\n    plt.imshow(predictions[ined])\n\n\n    fel = seg.felzenszwalb(predictions[ined], 1000, sigma=0.80, min_size = 2700)\n    fig.add_subplot(1, 4, 3)\n    plt.imshow(fel)\n    \n    i = 0\n    while (fel == i).sum() != 0:\n        mask = fel == i\n        avg = np.mean(predictions[ined][mask])\n        avg = 1 if avg > 100 else 0\n        fel[mask] = avg\n        i += 1\n    fig.add_subplot(1, 4, 4)\n    plt.imshow(fel)\n    ","19762ac6":"import cv2\nfor dirname, _, filenames in os.walk('..\/input\/alexandrejeudi'):\n    name_list = []\n    for filename in filenames:\n        name_list.append(filename)\n    name_list.sort()\n    predictionsFinal = np.array([cv2.resize(cv2.imread(os.path.join(dirname, filename)), dsize=(608,608)) for filename in name_list])\n    print(name_list[:10])\nprint(predictionsFinal.shape)\n","454960ee":"predictionsFinal = predictionsFinal\/255\npredictionsFinal = np.array([cv2.GaussianBlur(img, (1,1),0) for img in predictionsFinal])","93ae3981":"a = np.array([[0, 1, 2],\n              [2, 0, 4],\n              [0, 3, 2]])\nprint(np.array(np.where(a == 0)))\nprint(np.amin(np.array(np.where(a == 0)), axis=1))\nprint(np.amax(np.array(np.where(a == 0)), axis=1))","b88254ac":"import matplotlib\n\n\nfor ined in range(0,10):\n    fig = plt.figure()\n    fig.add_subplot(1, 5, 1)\n    plt.imshow(predictionsFinal[ined])\n\n\n    fel = seg.felzenszwalb(predictionsFinal[ined], 5, sigma=1, min_size = 4000)\n    fig.add_subplot(1, 5, 2)\n    plt.imshow(fel)\n    edged = cv2.Canny(np.uint8(fel), 0, 0)\n    image = np.zeros(shape=(608,608))\n    i = 0\n    masks = fel == -1\n    while (fel == i).sum() != 0:\n        mask = fel == i\n        avg = np.mean(predictionsFinal[ined][mask])\n        if avg > 100:\n            where = np.array(np.where(mask))\n            x1, y1 = np.amin(where, axis=1)\n            x2, y2 = np.amax(where, axis=1)\n            \n            if np.count_nonzero(mask == True)\/((x2-x1)*(y2-y1)) > 0.3 and (x2-x1)*(y2-y1) > 40*500:\n                if (x2-x1)\/(y2-y1) < 0.4 or (x2-x1)\/(y2-y1) > 1.6:\n                    image = cv2.rectangle(image, (y1, x1), (y2, x2), (255, 0, 0) , -1)\n                    masks[mask] = True\n        i += 1\n    fig.add_subplot(1, 5, 3)\n    plt.imshow(masks)\n    fig.add_subplot(1, 5, 4)\n    plt.imshow(image)\n    ","2e4c9137":"guesses= []\n\nfor ined in range(len(predictionsFinal)):\n\n\n    fel = seg.felzenszwalb(predictionsFinal[ined], 20000, sigma=0.01, min_size = 20000)\n    \n    i = 0\n    while (fel == i).sum() != 0:\n        mask = fel == i\n        avg = np.mean(predictionsFinal[ined][mask])\n        avg = 1 if avg < 159 else 0\n        fel[mask] = avg\n        i += 1\n    guesses.append(fel)    ","f2c57acf":"print(len(guesses))\nguesses = np.array(guesses)*255","3423737d":"for i in range(len(guesses)):\n    print(cv2.imwrite(\"gauthier\" + str(i) + \".jpg\", guesses[i]))","cf0adb4d":"print(len([el for el in np.array(guesses).flatten() if el == 1])\/len(np.array(guesses).flatten()))","6ee2f24e":"foreground_threshold = 0.4 # percentage of pixels > 1 required to assign a foreground label to a patch\nfrom tqdm import tqdm\n\n# assign a label to a patch\ndef patch_to_label(patch):\n    df = np.mean(patch)\n    if df > foreground_threshold:\n        return 0\n    else:\n        return 1\n\ndef mask_to_submission_strings(image):\n    patch_size = 16\n    im = image[0]\n    img_number = image[1]\n    for j in range(0, im.shape[1], patch_size):\n        for i in range(0, im.shape[0], patch_size):\n            patch = im[i:i + patch_size, j:j + patch_size]\n            label = patch_to_label(patch)\n            yield(\"{:03d}_{}_{},{}\".format(img_number, j, i, label))\n\n\ndef masks_to_submission(submission_filename, guesses):\n    \"\"\"Converts images into a submission file\"\"\"\n    with open(submission_filename, 'w') as f:\n        f.write('id,prediction\\n')\n        for image in tqdm(guesses):\n            f.writelines('{}\\n'.format(s) for s in mask_to_submission_strings(image))\n            \ncombined = list(zip(guesses, [int(el.split(\"_\")[1].split(\".\")[0]) for el in name_list]))\nmasks_to_submission(\"out.csv\", combined)\nprint(\"done.\")","2990f09c":"###### import matplotlib\n\nguesses= []\n\nfor ined in range(0,10):\n    fig = plt.figure()\n    fig.add_subplot(1, 5, 1)\n    plt.imshow(predictionsFinal[ined])\n\n\n    fel = seg.felzenszwalb(predictionsFinal[ined], 20000, sigma=0.01, min_size = 20000)\n    fig.add_subplot(1, 5, 2)\n    plt.imshow(fel)\n    \n    edged = cv2.Canny(fel, 30, 200)\n    _, contours, hierarchy = cv2.findContours(edged, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)\n    fig.add_subplot(1, 5, 3)\n    plt.imshow(fel)\n    \n    i = 0\n    while (fel == i).sum() != 0:\n        mask = fel == i\n        avg = np.mean(predictionsFinal[ined][mask])\n        avg = 1 if avg < 159 else 0\n        fel[mask] = avg\n        i += 1\n    guesses.append(fel)\n    fig.add_subplot(1, 5, 3)\n    plt.imshow(fel)\n    \n    \n    fel = fel.reshape(38, 16, -1, 16).swapaxes(1,2).reshape(-1, 16, 16)\n    final = np.array([0 if np.mean(el) > 0.9 else 1  for el in fel]).reshape(38,38)\n    fig.add_subplot(1, 5, 4)\n    plt.imshow(final)\n    \n    cv2.findContours(edged, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)\n    "}}