{"cell_type":{"a47244c1":"code","c13f1ec5":"code","21028eee":"code","10383620":"code","8a974e42":"code","0d4bbfd0":"code","8098e1de":"code","c5a61e07":"code","7ff0cbb7":"code","bc96f075":"code","2d7b0fe3":"code","b88626ca":"code","bf540396":"code","5f69a57f":"code","cbc582fb":"code","84714a33":"code","b3fc0c31":"code","b4f5150f":"code","a1fd022c":"code","547659c6":"code","3fa4d4b4":"code","0d7da373":"code","23584573":"code","e209b5aa":"code","3b9d3e57":"code","18e1db03":"markdown","e8bf1aef":"markdown"},"source":{"a47244c1":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport sys\nprint(os.listdir(\"..\/input\"))\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\n\nimport fastai\nfrom fastai.vision import *\nfrom mask_functions import * \nfrom fastai.callbacks import SaveModelCallback\nimport gc\nfrom sklearn.model_selection import KFold\nfrom PIL import Image\n\nfastai.__version__\n","c13f1ec5":"print(os.listdir(\"..\/input\/pneumotorax256\"))\nprint(os.listdir(\"..\/input\/pneumotorax256\/data256\"))\nprint(os.listdir(\"..\/input\/pneumotorax256\/data256\/data256\"))","21028eee":"sz = 256\nbs = 32\nn_acc = 64\/\/bs\nnfolds = 4\n\n\nnoise_th = 75.0 * (sz\/128.0)**2\nbest_thr0 = 0.2\n\nif sz == 256:\n    stats = ([0.540,0.540,0.540],[0.264,0.264,0.264])\n    TRAIN = '..\/input\/pneumotorax256\/data256\/data256\/train'\n    TEST = '..\/input\/pneumotorax256\/data256\/data256\/test'\n    MASKS = '..\/input\/pneumotorax256\/data256\/data256\/masks'\nelif sz == 128:\n    stats = ([0.615,0.615,0.615],[0.291,0.291,0.291])\n    TRAIN = '..\/input\/pneumotorax128\/data128\/data128\/train'\n    TEST = '..\/input\/pneumotorax128\/data128\/data128\/test'\n    MASKS = '..\/input\/pneumotorax128\/data128\/data128\/masks'","10383620":"Path('\/tmp\/.cache\/torch\/checkpoints\/').mkdir(exist_ok=True,parents=True)\n!cp '..\/input\/resnet34\/resnet34.pth' '\/tmp\/.cache\/torch\/checkpoints\/resnet34-333f7ec4.pth'\n","8a974e42":"print(os.listdir(\"\/tmp\/\"))\nprint(os.listdir(\"\/tmp\/.cache\/\"))\nprint(os.listdir(\"\/tmp\/.cache\/torch\"))\nprint(os.listdir(\"\/tmp\/.cache\/torch\/checkpoints\"))","0d4bbfd0":"SEED = 2019\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    #tf.set_random_seed(seed)\nseed_everything(SEED)","8098e1de":"# Setting div=True in open_mask\nclass SegmentationLabelList(SegmentationLabelList):\n    def open(self, fn): return open_mask(fn, div=True)\n    \nclass SegmentationItemList(SegmentationItemList):\n    _label_cls = SegmentationLabelList\n\n# Setting transformations on masks to False on test set\ndef transform(self, tfms:Optional[Tuple[TfmList,TfmList]]=(None,None), **kwargs):\n    if not tfms: tfms=(None,None)\n    assert is_listy(tfms) and len(tfms) == 2\n    self.train.transform(tfms[0], **kwargs)\n    self.valid.transform(tfms[1], **kwargs)\n    kwargs['tfm_y'] = False # Test data has no labels\n    if self.test: self.test.transform(tfms[1], **kwargs)\n    return self\nfastai.data_block.ItemLists.transform = transform","c5a61e07":"# Create databunch\ndata = (SegmentationItemList.from_folder(path=Path(TRAIN)).split_by_rand_pct(0.2)\n            .label_from_func(lambda x: str(x).replace('train','masks'), classes=[0,1])\n            .add_test(Path(TEST).ls(),label=None)\n            .transform(get_transforms(), size=sz, tfm_y=True)\n            .databunch(path=Path('.'), bs=32)\n            .normalize(imagenet_stats)\n       )","7ff0cbb7":"data.show_batch()","bc96f075":"learn = unet_learner(data, models.resnet34, metrics=[dice])","2d7b0fe3":"epoch=10\nlearn.fit_one_cycle(epoch),slice(1e-3)","b88626ca":"learn.unfreeze()\nlearn.fit_one_cycle(12,slice(3e-5,3e-4))","bf540396":"# predictions for the validation set\npreds, ys = learn.get_preds()","5f69a57f":"print(preds.shape)\nprint(ys.shape)","cbc582fb":"preds = preds[:,1,...]\nys=ys.squeeze()","84714a33":"n = preds.shape[0]\nprint(preds.view(n, -1).shape)","b3fc0c31":"def dice_overall(preds, targs):\n    n = preds.shape[0]\n    preds = preds.view(n, -1)\n    targs = targs.view(n, -1)\n    intersect = (preds * targs).sum(-1).float()\n    union = (preds+targs).sum(-1).float()\n    u0 = union==0\n    intersect[u0] = 1\n    union[u0] = 2\n    return (2. * intersect \/ union)","b4f5150f":"# find optimal threshold for DICE. similar in principle with ROC Curve.\ndices = []\nthrs = np.arange(0.01,1,0.05)\nfor i in progress_bar(thrs):\n    preds_m = (preds>i).long()\n    dices.append(dice_overall(preds_m,ys).mean())\ndices = np.array(dices)","a1fd022c":"best_dice = dices.max()\nbest_thr = thrs[dices.argmax()]\n\nplt.figure(figsize=(8,4))\nplt.plot(thrs, dices)\nplt.vlines(x=best_thr, ymin=dices.min(), ymax=dices.max())\nplt.text(best_thr+0.03, best_dice-0.15, f'DICE = {best_dice:.2f} \\nThreshold = {best_thr:.2f}', fontsize=14);\nplt.show()","547659c6":"rows = 20\nplot_idx = ys.sum((1,2)).sort(descending=True).indices[:rows]\nprint(plot_idx)","3fa4d4b4":"for idx in plot_idx:\n    fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, figsize=(12, 4))\n    ax0.imshow(data.valid_ds[idx][0].data.numpy().transpose(1,2,0))\n    ax1.imshow(ys[idx], vmin=0, vmax=1)\n    ax2.imshow(preds[idx], vmin=0, vmax=1)\n    ax1.set_title('Targets')\n    ax2.set_title('Predictions')","0d7da373":"# Predictions for test set\npreds, _ = learn.get_preds(ds_type=DatasetType.Test)\npreds = (preds[:,1,...]>best_thr).long().numpy()\nprint(preds.sum())","23584573":"# Generate rle encodings (images are first converted to the original size)\nrles = []\nfor p in progress_bar(preds):\n    im = PIL.Image.fromarray((p.T*255).astype(np.uint8)).resize((1024,1024))\n    im = np.asarray(im)\n    rles.append(mask2rle(im, 1024, 1024))","e209b5aa":"ids = [o.stem for o in data.test_ds.items]\nsub_df = pd.DataFrame({'ImageId': ids, 'EncodedPixels': rles})\nsub_df.loc[sub_df.EncodedPixels=='', 'EncodedPixels'] = '-1'\nsub_df.head()","3b9d3e57":"sub_df.to_csv('submission.csv', index=False)","18e1db03":"# Plot some samples","e8bf1aef":"# Overview\n\nFirst attempt to build the prediction model.\n\nThis kernel is based on the following:\n* Base foundation: https:\/\/www.kaggle.com\/mnpinto\/pneumothorax-fastai-u-net\n* Adding hypercolumns etc: https:\/\/www.kaggle.com\/iafoss\/hypercolumns-pneumothorax-fastai-0-819-lb"}}