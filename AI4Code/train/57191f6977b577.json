{"cell_type":{"96a28d60":"code","68217b12":"code","182b7bcc":"code","a494dca5":"code","e8a9b9fd":"code","ed0db8fe":"code","8d5fca1e":"code","9aad7f8e":"code","c7851a57":"code","7d8bb2c3":"code","24938651":"code","a4bba184":"code","7c671a1d":"code","c6fbad91":"code","b9efe718":"code","d39125f3":"code","cf05e10b":"code","fdcfbe7e":"code","cc670d06":"code","51bf5dba":"code","98f281e1":"code","eeabae3b":"code","39cd45fd":"code","a6634177":"code","55202d2b":"code","4c87b0b3":"code","c1489360":"code","1c561dbe":"code","0dc83770":"code","b1cb20b9":"code","125058f1":"code","c8574656":"code","d0e749ca":"code","b4e3da8b":"code","58386c3b":"code","8b06ebf8":"code","8f746c33":"markdown","23e997cf":"markdown","8b1e32e5":"markdown","ac4208e3":"markdown","b1ac26c1":"markdown"},"source":{"96a28d60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68217b12":"import pandas as pd \nimport matplotlib.pyplot as plt \nimport numpy as np\nimport seaborn as sns\nfrom scipy.stats import norm \nfrom sklearn.preprocessing import StandardScaler \nfrom scipy import stats \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline","182b7bcc":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","a494dca5":"df_train.head()","e8a9b9fd":"df_train.shape","ed0db8fe":"df_train.columns","8d5fca1e":"df_train['SalePrice'].describe()\n\n#print(df_train['SalePrice'])","9aad7f8e":"sns.distplot(df_train['SalePrice'])","c7851a57":"print('skewness : %f' % df_train['SalePrice'].skew()) #IN7IRAAAF\nprint('kurtosis : %f' % df_train['SalePrice'].kurt()) #kimat fitcher tenaw3","7d8bb2c3":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]] , axis= 1 ) \ndata.plot.scatter(x=var , y = 'SalePrice' , ylim =(0.00000))\nprint(data[:5])","24938651":"'OverallQual' in df_train ","a4bba184":"var = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]] , axis = 1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x= var , y='SalePrice' , data=data)\nfig.axis(ymin= 0 , ymax=800000)\nprint(data[:5])","7c671a1d":"'YearBuilt' in df_train","c6fbad91":"var = 'YearBuilt'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var , y='SalePrice' , data=data)\nfig.axis(ymin=0, ymax=800000)\nplt.xticks(rotation=90)\nprint(data[:5])","b9efe718":"corrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax= 0, square=True)","d39125f3":"k = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","cf05e10b":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","fdcfbe7e":"#missing data\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","cc670d06":"#dealing with missing data\ndf_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index,1)\ndf_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)\ndf_train.isnull().sum().max() #just checking that there's no missing data missing...","51bf5dba":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","98f281e1":"#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","eeabae3b":"#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","39cd45fd":"#bivariate analysis saleprice\/grlivarea\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","a6634177":"#histogram and normal probability plot\nsns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","55202d2b":"#applying log transformation\ndf_train['SalePrice'] = np.log(df_train['SalePrice'])","4c87b0b3":"#transformed histogram and normal probability plot\nsns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","c1489360":"#histogram and normal probability plot\nsns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","1c561dbe":"#data transformation\ndf_train['GrLivArea'] = np.log(df_train['GrLivArea'])","0dc83770":"#transformed histogram and normal probability plot\nsns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","b1cb20b9":"#histogram and normal probability plot\nsns.distplot(df_train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['TotalBsmtSF'], plot=plt)\n","125058f1":"#create column for new variable (one is enough because it's a binary categorical feature)\n#if area>0 it gets 1, for area==0 it gets 0\ndf_train['HasBsmt'] = pd.Series(len(df_train['TotalBsmtSF']), index=df_train.index)\ndf_train['HasBsmt'] = 0 \ndf_train.loc[df_train['TotalBsmtSF']>0,'HasBsmt'] = 1","c8574656":"#create column for new variable (one is enough because it's a binary categorical feature)\n#if area>0 it gets 1, for area==0 it gets 0\ndf_train['HasBsmt'] = pd.Series(len(df_train['TotalBsmtSF']), index=df_train.index)\ndf_train['HasBsmt'] = 0 \ndf_train.loc[df_train['TotalBsmtSF']>0,'HasBsmt'] = 1","d0e749ca":"#histogram and normal probability plot\nsns.distplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], plot=plt)","b4e3da8b":"#scatter plot\nplt.scatter(df_train['GrLivArea'], df_train['SalePrice']);","58386c3b":"#scatter plot\nplt.scatter(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], df_train[df_train['TotalBsmtSF']>0]['SalePrice']);","8b06ebf8":"#convert categorical variable into dummy\ndf_train = pd.get_dummies(df_train)","8f746c33":"### Correlation matrix (heatmap style)","23e997cf":"missing data","8b1e32e5":"### Relationship with numerical variables**","ac4208e3":"1. So.. What can we expect ?******","b1ac26c1":"> **GETTEING AND SCORE"}}