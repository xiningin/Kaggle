{"cell_type":{"6fb3e3dc":"code","789bc4f6":"code","f388b000":"code","c9ec5d26":"code","54e2118d":"code","cdc81668":"code","c49669ab":"code","139d36bb":"code","28ed8f15":"markdown","68f2fa25":"markdown","4eff03ee":"markdown","e1c76363":"markdown","cd4c5588":"markdown","06ce52da":"markdown"},"source":{"6fb3e3dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","789bc4f6":"iris_data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\niris_data.info()\nX = iris_data.iloc[:,1:5].copy()\nY = iris_data.iloc[:,5].copy()","f388b000":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nY = le.fit_transform(Y)\nY","c9ec5d26":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","54e2118d":"from sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier \ngrid = GridSearchCV(KNeighborsClassifier(),param_grid={'n_neighbors':list(range(1,51,2))}, cv=10,scoring='accuracy',return_train_score=False)","cdc81668":"grid.fit(X,Y)\nplt.plot(grid.cv_results_['mean_test_score'],marker='o')\nplt.xlabel('Value of K for KNN')\nplt.ylabel('accuracy')\nprint(grid.best_estimator_)\n# Every dot represents odd k value","c49669ab":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state = 24)\nmodel = KNeighborsClassifier(n_neighbors=15)\nmodel.fit(X_train,Y_train)\n\npredictions = model.predict(X_test)\npredictions","139d36bb":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test,predictions))","28ed8f15":"## Using GridSearchCV to find best KNN Neighbors","68f2fa25":"## Making our KNN Model","4eff03ee":"## Label Encoding Species","e1c76363":"## Final Report","cd4c5588":"## Scaling the features","06ce52da":"## Loading Data"}}