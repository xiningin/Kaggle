{"cell_type":{"66adfb13":"code","82ec6804":"code","c9982dda":"code","5dc1a1e2":"code","2ee16837":"code","2093f707":"code","4164e867":"code","a8fd1f30":"code","18073993":"code","a87e9307":"code","646267bb":"code","bc6e856e":"code","47085101":"code","ee93b878":"code","4b0fd8df":"code","e5bc32dd":"code","3f49b456":"code","b05d32ee":"code","47ac598f":"code","a745ea71":"code","ac948d21":"code","484c43b0":"code","dfceb696":"code","5bce8eb6":"code","95eb7a1b":"code","c83f06c6":"code","a9dabfaa":"code","b7a51dcb":"code","b61c8595":"code","dc73ca8f":"code","71ae1ee0":"code","6f73fc39":"code","7f9d7711":"code","dbfa48f9":"code","ff9d195a":"code","284ffb1b":"code","4c6f6aff":"code","70328f31":"code","20f5ac35":"code","c4b464b5":"code","9bf2fcd8":"code","04227da7":"code","488b65d8":"code","8eae15bb":"code","d4280aca":"code","d6a61b3e":"markdown","a1bc8961":"markdown","5f12846c":"markdown"},"source":{"66adfb13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82ec6804":"import pandas as pd","c9982dda":"covid_train=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ncovid_train.head()","5dc1a1e2":"covid_test=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ncovid_test.head()","2ee16837":"covid_train.shape","2093f707":"covid_test.shape","4164e867":"covid_train.columns","a8fd1f30":"covid_test.columns","18073993":"covid_train.count()","a87e9307":"covid_test.count()","646267bb":"covid_train.describe()","bc6e856e":"covid_test.describe()","47085101":"covid_train.isna().sum()","ee93b878":"covid_test.isna().sum()","4b0fd8df":"covid_train.isna().any()","e5bc32dd":"print(covid_train.isnull().sum())","3f49b456":"# Rename the Columns of Train and Test Datasets\ncovid_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ncovid_test.rename(columns={'Country_Region':'Country'}, inplace=True)\n\ncovid_train.rename(columns={'Province_State':'State'}, inplace=True)\ncovid_test.rename(columns={'Province_State':'State'}, inplace=True)","b05d32ee":"covid_train.info()","47ac598f":"covid_test.info()","a745ea71":"covid_train[covid_train['Country']=='China'].groupby(by='Country').sum()","ac948d21":"covid_train.loc[covid_train.Country == 'China', :].head(10)","484c43b0":"covid_train[~covid_train['State'].isnull()]['Country'].value_counts()","dfceb696":"covid_train.corr()","5bce8eb6":"import matplotlib.pyplot as plt\nimport seaborn as sns","95eb7a1b":"sns.heatmap(covid_train.corr(), annot=True, fmt=\".2f\", cmap=\"coolwarm\", linewidths=2)","c83f06c6":"covid_train.boxplot(column=['ConfirmedCases', 'Fatalities','Id'])","a9dabfaa":"covid_train.hist()","b7a51dcb":"# Converting Date Time object\nimport time\nfrom datetime import datetime","b61c8595":"covid_train['Date']=pd.to_datetime(covid_train['Date'],infer_datetime_format=True)\ncovid_test['Date']=pd.to_datetime(covid_test['Date'],infer_datetime_format=True)","dc73ca8f":"covid_train.info()","71ae1ee0":"covid_test.info()","6f73fc39":"Groupby = covid_train.groupby(by='Country')[['ConfirmedCases','Fatalities']].sum().reset_index()\nplt.figure(figsize=(20,10))\n\nsns.barplot(x='ConfirmedCases',y='Country',data=Groupby[Groupby['ConfirmedCases'] != 0].sort_values(by='ConfirmedCases',ascending=False).head(20))","7f9d7711":"Groupby[Groupby['ConfirmedCases'] != 0].sort_values(by='ConfirmedCases',ascending=False).head(10)","dbfa48f9":"covid_x=covid_train.drop(['ConfirmedCases','Country','State','Date'],axis='columns')\ncovid_x.head()","ff9d195a":"covid_y=pd.DataFrame(covid_train.iloc[:,-2])\ncovid_y.head()","284ffb1b":"# Splitting X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(covid_x,covid_y)","4c6f6aff":"from sklearn.linear_model import LinearRegression\nregression=LinearRegression()\nregression.fit(X_train,Y_train)","70328f31":"print(X_train.shape)\nprint(X_test.shape)","20f5ac35":"from sklearn.tree import DecisionTreeRegressor","c4b464b5":"tree_regressor=DecisionTreeRegressor()\ntree_regressor.fit(X_train,Y_train)","9bf2fcd8":"y_pred_tree=tree_regressor.predict(X_test)\ny_tree_pred_df=pd.DataFrame(y_pred_tree,columns=['Predict_tree'])\ny_tree_pred_df.head()","04227da7":"DTCscore = tree_regressor.score(X_train,Y_train)\nprint(\"Decision Tree Score: \",DTCscore)","488b65d8":"sub=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')\nsub.to_csv('submission.csv',index=False)","8eae15bb":"sns.pairplot(covid_train)","d4280aca":"sns.distplot(covid_train['ConfirmedCases'], kde=True, rug=True)","d6a61b3e":"### Linear Regression","a1bc8961":"### Decision Tree","5f12846c":"Dataframe Details"}}