{"cell_type":{"42988a76":"code","796ec370":"code","43f4edba":"code","f4e356a8":"code","520eda9a":"code","0278242f":"code","8b86a686":"code","2eb98cb1":"code","968689eb":"code","22d9bcba":"code","614c75b0":"code","31ad45cf":"code","026251f0":"code","999f441a":"code","ac4eb246":"code","f04090d7":"code","188eee96":"code","ef464dc0":"code","6c5fd5fc":"code","b4099e62":"code","4d70ab39":"code","4cf56322":"code","9e3aa51f":"code","9d255e13":"code","e655d17f":"code","582cdeee":"code","a40e479d":"code","e8bbd607":"code","cb8ac03a":"code","e459b8eb":"code","d32d134b":"code","4c092109":"code","fa1654e2":"code","5c2ab8f6":"code","2c82b292":"code","74a9add5":"code","f7b55d24":"markdown","5c131991":"markdown","dfa31543":"markdown","ddc97dee":"markdown","cb4d77fb":"markdown","e899c0f6":"markdown","05bf2ef4":"markdown","89dffc07":"markdown","64b206d4":"markdown","bbbab6e7":"markdown","0dc35a3a":"markdown","8846bb02":"markdown","dab693d0":"markdown"},"source":{"42988a76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","796ec370":"import matplotlib.pyplot as plt\nimport seaborn as sns  \n%matplotlib inline","43f4edba":"df = pd.read_csv('..\/input\/advertising-dataset\/advertising.csv')","f4e356a8":"df.head()","520eda9a":"df.info()","0278242f":"df.shape","8b86a686":"sns.pairplot(df, diag_kind='kde')","2eb98cb1":"sns.histplot(df['Sales'] , kde=True)","968689eb":"sns.distplot(df['Sales'])","22d9bcba":"sns.heatmap(df.corr(),annot=True, cmap='rocket', lw=4)","614c75b0":"X=df.drop('Sales', axis=1)\ny=df.Sales","31ad45cf":"from sklearn.preprocessing import PolynomialFeatures","026251f0":"ploynomialConvertor = PolynomialFeatures(degree=2 , include_bias=False)","999f441a":"polyFeatures = ploynomialConvertor.fit_transform(X)","ac4eb246":"polyFeatures.shape","f04090d7":"from sklearn.model_selection import train_test_split","188eee96":"X_train, X_test, y_train, y_test = train_test_split(polyFeatures, y, test_size=0.3, random_state=101)","ef464dc0":"from sklearn.linear_model import LinearRegression","6c5fd5fc":"model = LinearRegression()","b4099e62":"model.fit(X_train , y_train)","4d70ab39":"y_pred = model.predict(X_test)","4cf56322":"pd.DataFrame({'Y_Test':y_test , 'y_pred':y_pred , 'Residuals':(y_pred-y_test) }).head()","9e3aa51f":"from sklearn import metrics","9d255e13":"MAE= metrics.mean_absolute_error(y_pred , y_test)\nMSE=metrics.mean_squared_error(y_pred, y_test)\nRMSE=np.sqrt(MSE)\npd.DataFrame([MAE , MSE , RMSE], index=['MAE', 'MSE', 'RMSE'] , columns=['Metrics'])","e655d17f":"XS_train, XS_test, ys_train, ys_test = train_test_split(X, y, test_size=0.3, random_state=101)\nlinearmodel=LinearRegression()\nlinearmodel.fit(XS_train, ys_train)\nys_pred=linearmodel.predict(XS_test)\n\nMAE_linear = metrics.mean_absolute_error(ys_test,ys_pred)\nMSE_linear = metrics.mean_squared_error(ys_test,ys_pred)\nRMSE_linear = np.sqrt(MSE_linear)\npd.DataFrame({'PolyMetrics':[MAE , MSE ,RMSE] , 'LinearMetrics':[MAE_linear, MSE_linear ,RMSE_linear]}, index=['MAE', 'MSE', 'RMSE'])","582cdeee":"# Train List of RMSE per degree\ntrain_RMSE_list=[]\n#Test List of RMSE per degree\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    \n    #Preprocessing\n    #create poly data set for degree (d)\n    polynomial_converter= PolynomialFeatures(degree=d, include_bias=False)\n    poly_features= polynomial_converter.fit(X)\n    poly_features= polynomial_converter.transform(X)\n    \n    #Split the dataset\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n    #Train the Model\n    polymodel=LinearRegression()\n    polymodel.fit(X_train, y_train)\n    \n    #Predicting on both Train & Test Data\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    #Evaluating the Model\n    \n    #RMSE of Train set\n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    \n    #RMSE of Test Set\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #Append the RMSE to the Train and Test List\n    \n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)","a40e479d":"test_RMSE_list","e8bbd607":"plt.plot(range(1,6), train_RMSE_list[:5], label='Train RMSE')\nplt.plot(range(1,6), test_RMSE_list[:5], label='Test RMSE')\n\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()","cb8ac03a":"#Create Polynomial Features\nFinal_Polynomial_converter= PolynomialFeatures(degree=3, include_bias=False)\n\nFinal_poly_features= Final_Polynomial_converter.fit(X)\nFinal_poly_features= Final_Polynomial_converter.transform(X)\n\n#Split the DataSet\nX_train, X_test, y_train, y_test = train_test_split(Final_poly_features, y, test_size=0.3, random_state=101)\n\n#Train the model\nFinal_PolyModel=LinearRegression()\nFinal_PolyModel.fit(X_train, y_train)","e459b8eb":"from joblib import dump , load","d32d134b":"dump(Final_PolyModel, 'Sales_Poly_Model.joblib')","4c092109":"dump(Final_Polynomial_converter, 'Ploynomial_Converter.joblib')","fa1654e2":"Load_Converter=load('Ploynomial_Converter.joblib')\nLoad_PolyModel=load('Sales_Poly_Model.joblib')","5c2ab8f6":"#Predict the sale for a campaign with advertising in TV=150, radio=25, newspaper=10\ncampaign=[[149,22,12]]","2c82b292":"campaign_poly=Load_Converter.transform(campaign)","74a9add5":"Final_PolyModel.predict(campaign_poly)","f7b55d24":"# Determine the Features and the Target variables","5c131991":"# Deployment","dfa31543":"# Train the model ","ddc97dee":"# Preprocessing","cb4d77fb":"# Exploratory Data Analysis","e899c0f6":"# Saving the model ","05bf2ef4":"#  Adjusting Model Parameters","89dffc07":"# Finalizing Model Parameters","64b206d4":"# Spliting data into train and test ","bbbab6e7":"# Predciting test data","0dc35a3a":"# Evaluating the model","8846bb02":"# Plot the Polynomial degree VS RMSE","dab693d0":"# Data overview"}}