{"cell_type":{"ec96381d":"code","7280d69e":"code","73fef6ed":"code","52065a21":"code","1ce4f70c":"code","e679fcf6":"code","3a53e3b2":"code","6a1c7d74":"code","aea9ba03":"code","885120d0":"code","98a9fa35":"code","7bfbd03f":"code","f6d1f716":"code","a2d1066d":"code","bbbe6a7a":"code","caa88b63":"code","c1031782":"markdown","390527d7":"markdown","a43e2ae8":"markdown","764a1339":"markdown","6ac3cda6":"markdown","cb603aa9":"markdown","d342f961":"markdown","cc9c64f5":"markdown","5709ca8a":"markdown","0a329fe6":"markdown","27463b21":"markdown"},"source":{"ec96381d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7280d69e":"fashion_mnist = tf.keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","73fef6ed":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat','Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","52065a21":"train_images.shape","1ce4f70c":"len(train_labels)","e679fcf6":"train_labels","3a53e3b2":"len(test_labels)","6a1c7d74":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","aea9ba03":"train_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0","885120d0":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","98a9fa35":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)\n])","7bfbd03f":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","f6d1f716":"model.fit(train_images, train_labels, epochs=10)","a2d1066d":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)","bbbe6a7a":"probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])","caa88b63":"predictions = probability_model.predict(test_images)\npredictions[0]","c1031782":"This model reaches an accuracy of about 0.91 (or 91%) on the training data.\n\nEvaluate accuracy\n\nNext, compare how the model performs on the test dataset:","390527d7":"Make predictions\n\nWith the model trained, you can use it to make predictions about some images.\n\n","a43e2ae8":"To verify that the data is in the correct format and that you're ready to build and train the network, let's display the first 25 images from the training set and display the class name below each image.","764a1339":"TRAIN THE MODEL\n\nFeed the training data to the model. In this example, the training data is in the train_images and train_labels arrays. Verify that the predictions match the labels from the test_labels array.","6ac3cda6":"Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model. The basic building block of a neural network is the layer. Layers extract representations from the data fed into them.","cb603aa9":"Preprocess the data\n\nThe data must be preprocessed before training the network.","d342f961":"Compile the model\n\nBefore the model is ready for training, it needs a few more settings. These are added during the model's compile step.","cc9c64f5":"Explore the data\n\nExplore the format of the dataset before training the model.","5709ca8a":"Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, we divide the values by 255. It's important that the training set and the testing set be preprocessed in the same way.","0a329fe6":"A prediction is an array of 10 numbers. They represent the model's \"confidence\" that the image corresponds to each of the 10 different articles of clothing.\n\nTest accuracy of 0.88 was achieved which could be further improved.","27463b21":"Each image is mapped to a single label.\n\nLabel Class (0 - T-shirt\/top) (1 - Trouser) (2 - Pullover) (3 - Dress) (4 - Coat) (5 - Sandal) (6 - Shirt) (7 - Sneaker) (8 - Bag) (9 - Ankle boot)"}}