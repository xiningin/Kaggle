{"cell_type":{"a8fb581c":"code","29472e98":"code","f6bedf11":"code","a8f0353d":"code","55600260":"code","385cc63e":"code","cf68210b":"code","133d0181":"code","14b9b658":"code","a874b79d":"code","66c0cad8":"code","b58b4bf5":"code","36921fef":"code","6ef0e4ad":"code","2dd5a5ae":"code","7aee8a75":"code","b752d806":"code","870e2f51":"code","b94fc8a6":"code","8a2e74f6":"code","65f30f80":"markdown","08c04335":"markdown","a078c0be":"markdown","3a2ae3db":"markdown","715dda75":"markdown","61e91930":"markdown"},"source":{"a8fb581c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport pickle\n\n\nfrom xgboost import XGBClassifier, XGBRegressor\n\ntry:\n    import matplotlib.pyplot as plt\nexcept ImportError:\n    pass\n\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import roc_auc_score\n","29472e98":"train_df = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/train.csv')","f6bedf11":"train_df.head()","a8f0353d":"def run_preprocessing(dataframe: pd.DataFrame()) -> pd.DataFrame():\n    \"\"\"\n    This function takes a dataframe as input and returns a dataframe with the preprocessing steps applied.\n\n\n    Parameters\n    ----------\n    dataframe : pd.DataFrame()\n        The dataframe to be preprocessed.\n    \n    Returns\n    -------\n    pd.DataFrame()\n        The preprocessed dataframe.\n    \"\"\"\n\n    dataframe[\"song_duration_ms\"].fillna(\n        dataframe[\"song_duration_ms\"].mean(), inplace=True\n    )\n    dataframe[\"acousticness\"].fillna(dataframe[\"acousticness\"].mean(), inplace=True)\n    dataframe[\"danceability\"].fillna(dataframe[\"danceability\"].mean(), inplace=True)\n    dataframe[\"energy\"].fillna(dataframe[\"energy\"].mean(), inplace=True)\n    dataframe[\"instrumentalness\"].fillna(dataframe[\"instrumentalness\"].mean(), inplace=True)\n    dataframe[\"key\"].fillna(dataframe[\"key\"].mean(), inplace=True)\n    dataframe[\"liveness\"].fillna(dataframe[\"liveness\"].mean(), inplace=True)\n    dataframe[\"loudness\"].fillna(dataframe[\"loudness\"].mean(), inplace=True)\n    dataframe[\"audio_mode\"].fillna(dataframe[\"audio_mode\"].mode(), inplace=True)\n    dataframe[\"speechiness\"].fillna(dataframe[\"speechiness\"].mode(), inplace=True)\n    dataframe[\"tempo\"].fillna(dataframe[\"tempo\"].mean(), inplace=True)\n    dataframe[\"time_signature\"].fillna(dataframe[\"time_signature\"].mode(), inplace=True)\n    dataframe[\"audio_valence\"].fillna(dataframe[\"audio_valence\"].mode(), inplace=True)\n    dataframe['song_duration_ms'] = dataframe['song_duration_ms'].astype(int)\n    dataframe['tempo'] = dataframe['tempo'].astype(int)\n\n    return dataframe\n","55600260":"train_df = run_preprocessing(dataframe = train_df)","385cc63e":"train_df.head()","cf68210b":"sns.pairplot(train_df)","133d0181":"# sns.heatmap(train_df.corr(), cmap=\"YlGnBu\", annot=True)","14b9b658":"MODEL_NAME = \"song_xgb_model.pkl\"\nMODEL_COLUMNS =\"xgb_model_columns.pkl\"","a874b79d":"class GenerateXGBoostModel(object):\n    \"\"\"\n    Blue print for generating and training the XGBoost Model.\n    ...\n\n    Attrubutes:\n    ---------\n    df : pd.DataFrame\n        dataframe for training the model.\n    \"\"\"\n\n    def __init__(self, df: pd.DataFrame):\n        self.df = df\n        super(GenerateXGBoostModel, self).__init__()\n\n    def get_splitted_data(self):\n        X = self.df.drop(\"song_popularity\", axis=1)\n        y = self.df[\"song_popularity\"]\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, test_size=0.3, random_state=42\n        )\n\n        return X_train, X_test, y_train, y_test\n\n    def train_test_xgb_model(self):\n        \"\"\"\n        Trains the XGBoost Model and dupms the trained object file and respective feature columns.\n        \"\"\"\n        X_train, X_test, y_train, y_test = self.get_splitted_data()\n        \n#         model = XGBClassifier(learning_rate=0.01, n_estimators=50, max_depth=10)\n\n        model = XGBClassifier(\n            silent=False,\n            scale_pos_weight=1,\n            learning_rate=0.01,\n            colsample_bytree=0.4,\n            subsample=0.8,\n            objective=\"binary:logistic\",\n            n_estimators=4000,\n            reg_alpha=0.3,\n            max_depth=4,\n            gamma=1,\n        )\n        model.fit(X_train, y_train)\n        pickle.dump(model, open(MODEL_NAME, \"wb\"))\n        model_columns = list(X_train.columns)\n        pickle.dump(model_columns, open(MODEL_COLUMNS, \"wb\"))\n        \n        #Testing\n        ax = plt.subplot()\n        \n        \n        \n        y_pred = model.predict(X_test)\n        ns_auc = roc_auc_score(y_test, y_pred)\n    \n        report = classification_report(y_test, y_pred)\n        plot_confusion_matrix(model, X_test, y_test)  \n        plt.show()\n        \n        \n        return model, ns_auc, report\n\n","66c0cad8":"xgb = GenerateXGBoostModel(df = train_df)","b58b4bf5":"model, ns_auc, report = xgb.train_test_xgb_model()","36921fef":"ns_auc","6ef0e4ad":"print(report)","2dd5a5ae":"test_df = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/test.csv')","7aee8a75":"test_df.head()","b752d806":"test_df = run_preprocessing(dataframe=test_df)","870e2f51":"predicted = model.predict(test_df)","b94fc8a6":"test_df['song_popularity'] = predicted\n# test_df.to_csv('\/kaggle\/input\/song-popularity-prediction\/sample_submission_file.csv')\nsample_submission = test_df[['id', 'song_popularity']]","8a2e74f6":"sample_submission.to_csv('initial_submission.csv')\n","65f30f80":"## Data Preprocessing","08c04335":"## Model Building and Training","a078c0be":"## Pairplot among features","3a2ae3db":"## Lets do some EDA in the training set","715dda75":"## Corelation plot","61e91930":"## Plot the confusion matrix"}}