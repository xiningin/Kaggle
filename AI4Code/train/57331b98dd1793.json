{"cell_type":{"00b1b4e3":"code","6740dafa":"code","c15cadc9":"code","ab2ed75e":"code","eef8adbc":"code","2f56c5be":"code","060cde53":"code","14f41ce5":"code","1816b8fa":"code","9828355e":"code","f07426a3":"code","e86e6348":"code","03bd4a69":"code","be4bae1d":"code","0eaf2f2e":"code","8ea28da1":"code","0c81e3b3":"code","67cce7cc":"code","1673fc6d":"code","9c605ab1":"code","aa7e5fff":"code","7dc301aa":"code","6a22ddfd":"code","d12ebdac":"code","4c634bd2":"code","e16ea6d8":"code","2507d9a6":"code","078532cb":"code","034d10ef":"code","b2f8aaed":"code","ffc5d5af":"code","f908691e":"code","cd2eb4a1":"code","acd76a01":"code","626348ba":"code","704d21b7":"code","4e4621eb":"code","6571c8d9":"code","092d0932":"code","7022ebf2":"code","72a7935f":"code","7ecfbc8e":"code","b702763b":"code","69c0ba8b":"code","9d732b2a":"code","aec3c837":"code","9151100e":"code","a068480c":"code","4dd8f320":"code","dcccb995":"code","bbec2dca":"code","6256bf81":"code","9e5c5f5b":"code","f3b887aa":"code","3b10f987":"code","1f50a24b":"code","8d020411":"code","e0e660b6":"code","3fd6e3a2":"code","c0c3880f":"code","fceb7a0a":"code","6461f4dd":"code","a9ff2676":"code","bb41c0ca":"code","e8da006c":"code","e0b8ec76":"code","33813de1":"code","92028051":"code","ff35519a":"code","61f4ec9e":"code","f0e4fab3":"code","3c91aba3":"code","f87d5164":"code","627d5c07":"code","9c7fa498":"code","2248d308":"code","112e1e95":"code","46b69aa5":"code","00746a66":"code","08b1c7e7":"code","01144a98":"code","07d125ae":"code","5d003dac":"code","3be75c00":"code","f67daa3b":"code","47d67218":"code","7411c8f2":"code","7d66ab5b":"code","e066a058":"code","340d2e8c":"code","0d97b343":"code","9781568a":"code","b7245c3f":"code","f6b735fc":"code","241ed019":"code","09515ef1":"code","4da905d6":"code","52aa933e":"code","7a0e95eb":"code","5f41b11a":"code","89328bc0":"code","37fd7f57":"code","bafd5c54":"code","1281f5d1":"code","8a0dd306":"code","e6ce4629":"code","b5bd2f2d":"code","27dacefe":"code","6760a7e2":"code","36193eaa":"code","e6499b67":"code","1e979dbc":"code","8dbd2b66":"code","6d56da1f":"code","92d6b223":"code","58ca58d9":"code","4d1ad98d":"code","27959c4e":"code","d10eafa4":"code","605892f8":"code","dd1dfc47":"code","6af150bc":"code","35d669b4":"code","3a938ffc":"code","83278151":"code","44ee3038":"code","86deadce":"code","c41f0e2b":"code","674ef0ab":"code","e690e2c7":"code","89af1bb7":"code","6780895c":"code","fde37400":"code","5980d567":"code","e954998a":"code","632a047e":"code","5e28d966":"code","6965df71":"code","4d0b7972":"code","957e1f7c":"code","d3cbfedf":"code","3a34e8d5":"code","678736b8":"code","d58493f6":"code","25b02dcf":"code","ac60e90b":"code","971045bf":"code","b1c1e58c":"code","2ff77070":"code","2ba8677a":"code","045b4561":"code","11ce0201":"code","3c9ffc19":"code","6883ff4b":"code","0c308f77":"code","ab18b8ed":"code","95ed2369":"code","10cef74b":"code","6b259d73":"code","e8e2d9bb":"code","29cfec9a":"code","fbd95047":"code","487113f4":"code","a0e4408e":"code","80c81feb":"code","95cfd262":"code","f4146362":"code","79332b0d":"code","2fb58721":"code","ba3e6f78":"code","e8408cd1":"code","71833846":"code","1893a0c1":"code","75837276":"code","46564e5a":"code","c4fd8b71":"code","6de7950e":"code","221def64":"code","357de676":"code","1be77a55":"code","2f4687f3":"code","538e9bd2":"code","aba035cd":"code","83c02ed6":"code","d49314d1":"code","f49a1386":"code","4d6fbf40":"code","5d34d04b":"markdown","5781bd51":"markdown","2f9a0c56":"markdown","5d7f32c0":"markdown","fa3a408f":"markdown","e61d5abd":"markdown","e64ff653":"markdown","4e63fde0":"markdown","d2b6e2ec":"markdown","17d0a23c":"markdown","8f3fae78":"markdown","6e509dba":"markdown","e34b6270":"markdown","68f888a9":"markdown","1cabb3f4":"markdown","9fd51735":"markdown","c8d7a4c5":"markdown","cfedf46c":"markdown","3188d62e":"markdown"},"source":{"00b1b4e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6740dafa":"# list can be dublicate, mutable, ordered\nanimal_name = [\"Dog\",\"Cat\",\"Tigger\",\"Fox\"]\nanimal_name","c15cadc9":"#creating empty list\n#We can add element in this list\nempty_list = list()\nprint(empty_list)","ab2ed75e":"#list with mix data types\nmix_info = [\"Ravi\", 30, True]\nprint(mix_info)","eef8adbc":"#list with dublicate element\ndup_element = [\"Ravi\", \"Hari\",\"Ravi\", \"Hari\"]\nprint(dup_element)","2f56c5be":"print(animal_name)","060cde53":"#Access element through index\n#Index start with 0\nprint(animal_name[0])","14f41ce5":"print(animal_name[-1])","1816b8fa":"for i in animal_name:\n    print(i)","9828355e":"for name, i in zip(animal_name, dup_element):\n    print(name, i)","f07426a3":"#check in list\nif \"Tigger\" in animal_name:\n    print(\"yes\")\nelse:\n    print(\"No\")","e86e6348":"# Check how many element in list\nprint(len(animal_name))","03bd4a69":"#append item in list\nempty_list.append(\"Raipur\")","be4bae1d":"print(empty_list)","0eaf2f2e":"print(empty_list[0])","8ea28da1":"print(empty_list[0][-1])","0c81e3b3":"#Insert element in specified location\nempty_list.insert(1, \"Korba\")\nempty_list.insert(2,\"Champa\")","67cce7cc":"print(empty_list)","1673fc6d":"item = empty_list.pop()","9c605ab1":"print(item)","aa7e5fff":"print(empty_list)","7dc301aa":"empty_list.remove(\"Korba\")","6a22ddfd":"print(empty_list)","d12ebdac":"# remove all element in list\nempty_list.clear()","4c634bd2":"print(empty_list)","e16ea6d8":"empty_list.append(\"Korba\")\nempty_list.append(\"Banki Mongra\")\nempty_list.append(\"Raipur\")\nempty_list.append(\"Durg\")\nempty_list.append(\"Bhilai\")","2507d9a6":"print(empty_list)","078532cb":"# Reverse list\nempty_list.reverse()","034d10ef":"empty_list","b2f8aaed":"#sort list\n#original list change \nempty_list.sort()","ffc5d5af":"print(empty_list)","f908691e":"# If we don't want to change original list\nnew_city = sorted(empty_list)","cd2eb4a1":"print(new_city)","acd76a01":"list1 = [0]*5\nprint(list1)","626348ba":"list2 = [1, 2, 3,4,5]\nlist3 = list1+list2\nprint(list3)","704d21b7":"#list slicing\nnumber_list = [1,2,3,4,5,6,7,8,9,10]\nprint(number_list[1:6])","4e4621eb":"# without specified starting index\nprint(number_list[:7])","6571c8d9":"# without specified last index\nprint(number_list[3:])","092d0932":"# add specified step\nprint(number_list[3:9:2])","7022ebf2":"# reverse order in other way\nprint(number_list[::-1])","72a7935f":"#copy of list\ncpy_number = number_list","7ecfbc8e":"print(cpy_number)","b702763b":"# If we changed cpy_number also modifiy number_list\ncpy_number.pop()","69c0ba8b":"print(number_list)","9d732b2a":"# Use copy method for copy list\ncpy_number = number_list.copy()","aec3c837":"print(cpy_number)","9151100e":"cpy_number.pop()","a068480c":"print(cpy_number)\nprint(number_list)","4dd8f320":"# two other way to copy list\n#first one is\ncpy_number = list(number_list)\n# Second one is\n# useing slicing\ncpy_number = number_list[:]","dcccb995":"mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = [i*2 for i in mylist]\nprint(b)","bbec2dca":"mytuple = (\"Ravi\", 32, \"Korba\")\nprint(mytuple)","6256bf81":"# Parenthisis is optional\nmytuple = \"Ravi\", 32, \"Korba\"\nprint(mytuple)","9e5c5f5b":"#change list to tuple\ncity_tuple = tuple(new_city)\nprint(city_tuple)","f3b887aa":"#If only a single element in tuple there is not tuple in python, like\ncar = (\"Tata Tiago\")\n","3b10f987":"print(type(car))","1f50a24b":"# access element\nprint(city_tuple[2])","8d020411":"#last item in tuple\nprint(city_tuple[-1])","e0e660b6":"for city in city_tuple:\n    print(city)","3fd6e3a2":"# check element in tuple\nif \"Durg\" in city_tuple:\n    print(\"Yes\")\nelse:\n    print(\"No\")","c0c3880f":"# length of element\nprint(len(city_tuple))","fceb7a0a":"# How many times Raipur.\nprint(city_tuple.count(\"Raipur\"))","6461f4dd":"print(city_tuple.index(\"Raipur\"))","a9ff2676":"# Convert tuple to list\ncity_list = list(city_tuple)\nprint(city_list)","bb41c0ca":"# Slicing in tuple\n# Slicing is same as list\nprint(city_tuple[3:7])","e8da006c":"tuple3 = (\"Ravi\", 32, \"Banki Mongra\")","e0b8ec76":"name, age, city = tuple3\nprint(\"name:\",name)\nprint(\"age:\", age)\nprint(\"city:\", city)","33813de1":"tuple4 = (1,2,3,4,5,6)\n\nil1, *il2, il3 = tuple4\nprint(*il2)\nprint(il3)","92028051":"import sys\nlist4 = list(tuple4)","ff35519a":"#compare size of tuple and list in same element\nprint(sys.getsizeof(list4), \"bytes\")\nprint(sys.getsizeof(tuple4), \"bytes\")","61f4ec9e":"import timeit","f0e4fab3":"print(timeit.timeit(stmt=\"[0,1,2,3,4,5]\", number=1000000))\nprint(timeit.timeit(stmt=\"(0,1,2,3,4,5)\", number=1000000))","3c91aba3":"myDict = {\"name\":\"Ravi\", \"age\":32, \"city\":\"korba\"}\nprint(myDict)","f87d5164":"# Creating dictionary other way\nmyDict2 = dict(name=\"prashant\", age=27, city=\"Bilaspur\")\nprint(myDict2)","627d5c07":"print(myDict2['name'])","9c7fa498":"myDict2[\"email\"] =\"prashant@gmail.com\"\nprint(myDict2)","2248d308":"# Remove element\ndel myDict2[\"city\"]\nprint(myDict2)","112e1e95":"# Remove element in pop method\n# popitem other method\nmyDict2.pop(\"age\")\nprint(myDict2)","46b69aa5":"if \"name\" in myDict2:\n    print(myDict2['name'])","00746a66":"try:\n    print(myDict2['name'])\nexcept:\n    print(\"Error\")","08b1c7e7":"myDict.keys()","01144a98":"myDict.values()","07d125ae":"myDict.items()","5d003dac":"for key, value in myDict.items():\n    print(key, value)","3be75c00":"# simple assignment opertor also copy but it is only poiter of the original dictioary\ncpy_dict = myDict.copy()\n#same as \n#cpy_dit = dict(myDict)\nprint(cpy_dict)","f67daa3b":"#update dictionary\nnewDict = dict(name=\"Hari\", age=33)\nmyDict.update(newDict)\n","47d67218":"print(myDict)","7411c8f2":"# define like dictionary but not put key\nmySet = {4, 5, 6}","7d66ab5b":"print(mySet)","e066a058":"print(type(mySet))","340d2e8c":"myset2 = set([5, 4, 9, 4, 5])","0d97b343":"# duplicate value not allow in sets\nprint(myset2)","9781568a":"s = set(\"ShivaManhar\")","b7245c3f":"# Unordered and without duplicate\nprint(s)","f6b735fc":"#if we try to create empty set using {} it is dictionary not a set\nempty_set = {}\nprint(type(empty_set))","241ed019":"empty_set = set()\nprint(type(empty_set))","09515ef1":"# using add method to add element in set and remove for remove element in set\nempty_set.add(4)\nempty_set.add(7)\nempty_set.add(11)\nempty_set.add(17)\nprint(empty_set)","4da905d6":"# remove element\n# aslo use discard method\nempty_set.remove(11)\nprint(empty_set)","52aa933e":"#clear method for clear set\nempty_set.clear()\nprint(empty_set)","7a0e95eb":"empty_set.add(4)\nempty_set.add(7)\nempty_set.add(11)\nempty_set.add(17)\nprint(empty_set)","5f41b11a":"for i in empty_set:\n    print(i)","89328bc0":"if 17 in empty_set:\n    print(\"yes\")\nelse:\n    print(\"No\")","37fd7f57":"odds = {1, 3, 5, 7, 9, 11, 13}\neven = {0,2, 4, 6, 8, 10, 12, 14, 16}\nprimes = {2, 3, 5, 7, 13, 17, 19}","bafd5c54":"# find union\nu = odds.union(even)\nprint(u)","1281f5d1":"# intersection\ni = odds.intersection(primes)\nprint(i)","8a0dd306":"setA = {1,2,3,4,5,6,7,8,9}\nsetB = {1,2,3,10,11,13}","e6ce4629":"diff = setA.difference(setB)\nprint(diff)","b5bd2f2d":"diff= setB.difference(setA)\nprint(diff)","27dacefe":"# No comman element in both sets\ndiff = setA.symmetric_difference(setB)\nprint(diff)","6760a7e2":"setA.update(setB)\nprint(setA)","36193eaa":"setA = {1, 2, 3, 4,5,6,8,9,10}\nsetB = {1, 2, 4}\nsetA.intersection_update(setB)","e6499b67":"print(setA)","1e979dbc":"# find subset\nsetA = {1, 2, 3,4,5,6}\nsetB = {1, 2, 3}\nprint(setA.issubset(setB))","8dbd2b66":"print(setB.issubset(setA))","6d56da1f":"print(setA.issuperset(setB))","92d6b223":"print(setB.issuperset(setA))","58ca58d9":"setA = {1, 2, 3,4,5,6}\nsetB = {1, 2, 3}\nsetC = {13, 14,15, 16}\nprint(setB.isdisjoint(setC))","4d1ad98d":"print(setB.isdisjoint(setA))","27959c4e":"# immutable set\nsetD = frozenset([4, 5, 6])\nprint(setD)","d10eafa4":"my_string = \"I'm a programmer\"\nprint(my_string)","605892f8":"my_string = 'I\\'m a programmer'\nprint(my_string)","dd1dfc47":"multiline_string = \"\"\"\nRavi\nHari\nprashant\n\"\"\"\nprint(multiline_string)","6af150bc":"print(my_string[0])","35d669b4":"print(my_string[7:12])","3a938ffc":"print(my_string[6:])","83278151":"# Reverse string\nprint(my_string[::-1])","44ee3038":"# concatenate string\ngreeting =\"Hello\"\nname =\"Ravi\"\nsentence = greeting+\" \"+name\nprint(sentence)","86deadce":"for i in greeting:\n    print(i)","c41f0e2b":"# find character\nif 'e' in greeting:\n    print(\"yes\")\nelse:\n    print(\"no\")","674ef0ab":"# also work in substring\nif 'ell' in greeting:\n    print(\"yes\")\nelse:\n    print(\"no\")","e690e2c7":"name =\"     Ravi       \"\nprint(len(name))","89af1bb7":"name = name.strip()\nprint(len(name))\nprint(name)","6780895c":"# Upper case\nname = name.upper()\nprint(name)","fde37400":"print(name)","5980d567":"# lower case\nname = name.lower()\nprint(name)","e954998a":"print(name.startswith('r'))","632a047e":"print(name.endswith('i'))","5e28d966":"# find character or substring\n# Only first character index return\n# When not find character or substring they  return -1\nprint(greeting.find('o'))","6965df71":"print(greeting.find('t'))","4d0b7972":"# how many 'l' in \"Hello\"\nprint(greeting.count('l'))","957e1f7c":"greeting = \"Hello world\"\nprint(greeting)","d3cbfedf":"# Replace string\n# If string not find that condition string not change.\ngreeting = greeting.replace(\"world\", \"ajay\")\nprint(greeting)","3a34e8d5":"# santance convert to list.\n# default delemeter is space.\nsantance = \"Hello programmer how are you\"\nmy_list = santance.split()\nprint(my_list)","678736b8":"santance = \"Hello,programmer,how,are,you\"\nmy_list = santance.split(',')\nprint(my_list)","d58493f6":"new_string = \" \".join(my_list)\nprint(new_string)","25b02dcf":"my_list = ['a']*5\nprint(my_list)","ac60e90b":"a = ''.join(my_list)\nprint(a)","971045bf":"import timeit","b1c1e58c":"start = timeit.default_timer()\na = ''.join(my_list)\nstop = timeit.default_timer()\nprint(stop-start)","2ff77070":"var  = 3\nprint(\"number = %d\"%var)","2ba8677a":"# new style\nprint(\"number = {}\".format(var))","045b4561":"var2 = 10\nprint(f\"variable value is {var} and {var2}\")","11ce0201":"import collections","3c9ffc19":"a=\"aaaaaabbbbbcccccddddddddddddd\"","6883ff4b":"my_counter = collections.Counter(a)\nprint(my_counter)","0c308f77":"print(my_counter.items())","ab18b8ed":"print(my_counter.keys())","95ed2369":"print(my_counter.values())","10cef74b":"print(my_counter.most_common(1))","6b259d73":"print(my_counter.most_common(2))","e8e2d9bb":"print(my_counter.most_common(2)[0][0])","29cfec9a":"print(list(my_counter.elements()))","fbd95047":"Pointer = collections.namedtuple(\"Pointer\",\"x,y\")\npt = Pointer(4,5)\nprint(pt)\nprint(f\"X = {pt.x}\")","487113f4":"import itertools","a0e4408e":"a = [1, 3]\nb = [5, 9]","80c81feb":"#cartesian product\nproduct = itertools.product(a, b)\nprint(list(product))","95cfd262":"a = [1, 4]\nb = [3]\nproduct = itertools.product(a, b, repeat=2)\nprint(list(product))","f4146362":"#permutaions\na = [4,7,2]\npermut = itertools.permutations(a)\nprint(list(permut))","79332b0d":"a = [4,7,2]\npermut = itertools.permutations(a,2)\nprint(list(permut))","2fb58721":"a = [1,2,3,4]\ncom = itertools.combinations(a, 2)\nprint(list(com))","ba3e6f78":"a = [1,2,3,4]\ncom_wr =itertools.combinations_with_replacement(a,2)\nprint(list(com_wr))","e8408cd1":"a = [1,2,3,4]\nacc = itertools.accumulate(a)\nprint(a)\nprint(list(acc))","71833846":"import operator","1893a0c1":"a = [1,2,3,4]\nacc = itertools.accumulate(a, func=operator.mul)\nprint(a)\nprint(list(acc))","75837276":"a = [1,2, 5, 9 ,8]\nacc = itertools.accumulate(a, func=max)\nprint(list(acc))","46564e5a":"a = [1,2, 5, 9 ,8, 11, 12, -5, -9, 19, 29]\n\ndef big_then_5(x):\n    return x > 5\n\ngroup_obj = itertools.groupby(a, key=big_then_5)\n\nfor key, value in group_obj:\n    print(key, list(value))","c4fd8b71":"persons =[\n    {\"name\":\"Ravi\", \"age\":32},\n    {\"name\":\"Prashant\", \"age\":32},\n    {\"name\":\"Shankar\",\"age\":34}\n]\n\ngroup_obj = itertools.groupby(persons, key = lambda x: x['age'] < 33)\nfor key, value in group_obj:\n    print(key, list(value))","6de7950e":"add = lambda x,y:x+y\nprint(add(5,3))","221def64":"my_list = [(2, 3), (4,5),(8, -9), (6, -2)]\nprint(sorted(my_list))","357de676":"my_list_sorted = sorted(my_list, key=lambda x: x[1])\nprint(my_list_sorted)","1be77a55":"a = [1, 2,3,4,5]\nb = map(lambda x: x*2, a)\nprint(list(b))","2f4687f3":"c = [x*2 for x in a]\nprint(c)","538e9bd2":"# find even number\na = [1,2,3,4,6,7,8,9,10,12,13]\neven = filter(lambda x: x%2 ==0, a)\nprint(list(even))","aba035cd":"xi = [i for i in range(1, 10)]\nprint(xi)","83c02ed6":"c = [x for x in a if x%2 ==0 ]\nprint(c)","d49314d1":"# raise exceptions\n#a = -5\n#if a < 0:\n    #raise Exception(\"a value should me positive\")\n    \n#also use assert key word\n#assert (a > 0), \"a is not positive\" ","f49a1386":"try:\n    a = 5\/0\nexcept:\n    print(\"Error occur\")","4d6fbf40":"try:\n    a = 5\/0\nexcept Exception as e:\n    print(e)","5d34d04b":"<a  id =\"except\"><\/a>\n<h1>Exceptions<\/h1>","5781bd51":"<p id=\"tuples\"><\/p>","2f9a0c56":"I am learning python for my best. so this process i found one website but i know without practice only learning is not useful. That's why i have try every code. and shared. <br\/>\nI will update in future. <br\/>\nReference website is [python-engineer.com](https:\/\/www.python-engineer.com\/courses\/advancedpython\/18-function-arguments\/)<br\/>\n**[Kaggele Part-1](https:\/\/www.kaggle.com\/shivamanhar\/python-next-level-part-1\/)<br\/>\n[Kaggele Part-2](https:\/\/www.kaggle.com\/shivamanhar\/python-next-level-part-2\/)**<br\/>\n<ol>\n    <li><a href=\"#list\"> List <\/a> <\/li>\n    <li><a href=\"#tuples\"> Tuples <\/a> <\/li>\n    <li><a href=\"#dictionary\"> Dictionary <\/a> <\/li>\n    <li><a href=\"#sets\"> Sets<\/a><\/li>\n    <li><a href=\"#string\">Strings <\/a><\/li>\n    <li><a href=\"#collection\">Collections<\/a><\/li>\n    <li><a href=\"#itertools\">Itertools<\/a><\/li>\n    <li><a href=\"#lambda\">Lambda function <\/a><\/li>\n    <li><a href=\"#except\">Exceptions<\/a><\/li>\n    <li><a href=\"#logging\">Logging <\/a><\/li>\n<\/ol>","5d7f32c0":"<p id=\"itertools\"><\/p>","fa3a408f":"# Dictionary \nKey-value pairs, Unorder, mutable\n","e61d5abd":"<h1 id=\"tuples\">Tuples<\/h1>\nOrdered, immutable and duplicate allow","e64ff653":"<p id=\"sets\"><\/p>","4e63fde0":"<p id=\"string\"><\/p>","d2b6e2ec":"<p id=\"dictionary\"><\/p>","17d0a23c":"# Strings\nOrdered, immutable","8f3fae78":"<p id=\"logging\"><\/p>\n<h1> Logging <\/h1>","6e509dba":"<p id=\"list\"><\/p>\n<h1> List <\/h1>","e34b6270":"# Sets\nUnordered, mutable, no duplicate","68f888a9":"# Itertools","1cabb3f4":"<p id=\"collection\"><\/p>","9fd51735":"<p id=\"lambda\"><\/p>\n<h1>Lambda function<\/h1>\n\nlambda arguments: expression","c8d7a4c5":"**You can read more about collection\n[Collection doc](https:\/\/docs.python.org\/3\/library\/collections.html)**","cfedf46c":"# Collections","3188d62e":"**More read about [itertools](https:\/\/docs.python.org\/3\/library\/itertools.html)**"}}