{"cell_type":{"e60fea68":"code","bd6d0c51":"code","47237292":"code","62bcef82":"code","967dbf26":"code","9c47d748":"code","8eeca591":"code","eb64eeb7":"code","4ae203a1":"code","985e4463":"code","3353dfd9":"code","6d83c5df":"markdown"},"source":{"e60fea68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bd6d0c51":"df = pd.read_csv('..\/input\/ratings.csv')","47237292":"df = df.drop(columns = ['timestamp'])\ndf.head(5)","62bcef82":"n_users = df.userId.unique().shape[0]\nn_items = df.movieId.unique().shape[0]\nprint(str(n_users) + ' users')\nprint(str(n_items) + ' movies')","967dbf26":"ratings = np.zeros((df['userId'].max(), df['movieId'].max()))\nratings.shape\nfor row in df.itertuples():\n    ratings[row[1]-1, row[2]-1] = row[3]","9c47d748":"ratings","8eeca591":"# Sparsity of rating matrix\nsparsity = float(len(ratings.nonzero()[0]))\nsparsity \/= (ratings.shape[0] * ratings.shape[1])\nsparsity *= 100\nsparsity = 100 - sparsity\nprint(\"Sparsity \"+ str(sparsity) + \" %\")","eb64eeb7":"def get_RMSE(Q, X, Y):\n    return np.sqrt(np.sum((Q - np.dot(X, Y))**2))\n\ndef ALS_no_bias_no_reg(ratings, latent_factors = 8, iterations = 10):\n    M,N = ratings.shape\n    K = latent_factors\n    U = np.random.randn(M, K)\n    V = np.random.randn(K, N)\n    errors = []\n    for i in range(iterations):\n        U = np.linalg.solve(np.dot(V, V.T), np.dot(V, ratings.T)).T\n        V = np.linalg.solve(np.dot(U.T, U), np.dot(U.T, ratings))\n        error = get_RMSE(ratings,U,V)\n        print(\"Iteration - \"+str(i)+\" Error - \"+str(error)) \n        errors.append(error)\n    predictor = np.dot(U,V)\n    return predictor, errors\n\ndef ALS_no_bias_with_reg(ratings, latent_factors = 8, reg_term = 0.1, iterations = 10):\n    M,N = ratings.shape\n    K = latent_factors\n    U = np.random.randn(M, K)\n    V = np.random.randn(K, N)\n    errors = []\n    for i in range(iterations):\n        U = np.linalg.solve(np.dot(V, V.T) + reg_term * np.eye(K), np.dot(V, ratings.T)).T\n        V = np.linalg.solve(np.dot(U.T, U) + reg_term * np.eye(K), np.dot(U.T, ratings))\n        error = get_RMSE(ratings,U,V)\n        print(\"Iteration - \"+str(i)+\" Error - \"+str(error)) \n        errors.append(error)\n    predictor = np.dot(U,V)\n    return predictor, errors\n\ndef ALS_full(ratings, latent_factors = 8, reg_term = 0.1, iterations = 10):\n    M,N = ratings.shape\n    K = latent_factors\n    U = np.random.randn(M, K)\n    V = np.random.randn(K, N)\n    B = np.random.randn(M,1)\n    C = np.random.randn(1,N)\n    errors = []\n    for i in range(iterations):\n        U = np.linalg.solve(np.dot(V, V.T) + reg_term * np.eye(K), np.dot(V , ratings.T - B.T - C.T)).T\n        V = np.linalg.solve(np.dot(U.T, U) + reg_term * np.eye(K), np.dot(U.T, ratings - B - C))\n        B = (ratings - np.dot(U,V) - C)\/(1+reg_term)\n        C = (ratings - np.dot(U,V) - B)\/(1+reg_term)\n        error = np.sqrt(np.sum((ratings - (np.dot(U, V) + B + C))**2))\n        print(\"Iteration - \"+str(i+1)+\" Error - \"+str(error)) \n        errors.append(error)\n    predictor = np.dot(U,V) + B + C\n    return predictor, errors","4ae203a1":"predictor_full,errors_full = ALS_full(ratings, latent_factors = 10, iterations = 20, reg_term = 0.1)","985e4463":"print(predictor_full[0,1424])\nprint(ratings[0,1424])","3353dfd9":"df.head(20)","6d83c5df":"***Alternating Least Squares Implementation***"}}