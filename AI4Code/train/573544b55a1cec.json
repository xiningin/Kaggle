{"cell_type":{"f44a7b6f":"code","9c3c444c":"code","ed63173c":"code","b12ed2a6":"code","2ece56c0":"code","3b867cba":"code","4a2ddbe5":"code","b003bc97":"code","7958f284":"code","ebe626d8":"code","84f44b40":"code","bf67d53a":"code","968c4810":"code","4386f85a":"markdown","5e320863":"markdown"},"source":{"f44a7b6f":"# \u30e9\u30a4\u30d6\u30e9\u30eaimport\u3057\u3066\u304a\u304d\u307e\u3059\nimport os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.utils import to_categorical, Sequence\nimport cv2","9c3c444c":"# \u30c7\u30fc\u30bf\u4e00\u89a7\u3092DataFrame\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021\/test.csv')","ed63173c":"# \u30c7\u30fc\u30bf\u306e\u5148\u982d\u90e8\u5206\u3092\u30c1\u30e9\u30c3\u3068\u898b\u3066\u304a\u304d\u307e\u3057\u3087\u3046\ndf_train.head()","b12ed2a6":"df_test.head()","2ece56c0":"# \u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u306e\u65b9\u30821\u500b\u76ee\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_sensor = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021\/train\/train_0000.csv')","3b867cba":"df_sensor.head()","4a2ddbe5":"# \u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u306f\u6570\u767e\u884c\u7a0b\u5ea6\u306e\u53ef\u5909\u9577\u30c7\u30fc\u30bf\u3067\u3059\u3002\n# \u3053\u308c\u3092\u9ad8\u3055\u304cH\u30d4\u30af\u30bb\u30eb\u3001\u5e45\u304c1\u30d4\u30af\u30bb\u30eb\u3001\u30c1\u30e3\u30cd\u30eb\u657020\u306e\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n# \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f1d\u306a\u306e\u3067\u3059\u304c\u3042\u3048\u3066\u5e451\u30d4\u30af\u30bb\u30eb\u306e2d\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u306b\u3088\u3063\u3066OpenCV\u306a\u3069\u306e\u753b\u50cf\u95a2\u9023\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u6a5f\u80fd\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ndef create_image(df, H):\n    X = []\n    for path in df.file_path:\n        arr = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021' + path, index_col=0).values.reshape(1,-1,20)\n        arr = cv2.resize(arr.astype(float), (H, 1))\n        arr = arr.reshape(-1, H, 1, 20)\n        X.append(arr)\n    X = np.concatenate(X)\n    return X","b003bc97":"# \u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nX_train = create_image(df_train, 512)\nX_test = create_image(df_test, 512)","7958f284":"# \u4eca\u56de\u306fData Augmentation\u3060\u3051\u306e\u3054\u7d39\u4ecb\u3067\u3059\u304c\u3001\u4e00\u5fdc\u30bf\u30fc\u30b2\u30c3\u30c8\u3082\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ny_train = df_train.action_seq.values\nle = LabelEncoder()\ny_train = to_categorical(le.fit_transform(y_train))","ebe626d8":"# \u30c7\u30fc\u30bf\u306eshape\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nX_train.shape, y_train.shape, X_test.shape","84f44b40":"# \u3055\u3066\u3001\u30c7\u30fc\u30bf\u306b\u7a2e\u3005\u306e\u5909\u63db\u64cd\u4f5c\u3092\u65bd\u3057\u305f\u4e0a\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u5410\u304d\u51fa\u3057\u3066\u304f\u308c\u308bGenerator\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# Credit: https:\/\/github.com\/yu4u\/mixup-generator\nclass EskinGenerator(Sequence):\n        'Generates data for Keras'\n        def __init__(self, X_train, y_train, batch_size=32, shuffle=True, alpha=.2, datagen=None):\n            'Initialization'\n            self.batch_size = batch_size\n            self.X_train = X_train\n            self.y_train = y_train\n            self.shuffle = shuffle\n            self.on_epoch_end()\n            self.alpha= alpha\n            self.datagen=datagen\n    \n        def __len__(self):\n            'Denotes the number of batches per epoch'\n            return int(np.floor(len(self.X_train) \/ self.batch_size))\n    \n        def __getitem__(self, index):\n            'Generate one batch of data'\n            # Generate indexes of the batch\n            indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n            # Generate data\n            X, y = self.__data_generation(indexes)\n    \n            return X, y\n    \n        def on_epoch_end(self):\n            'Updates indexes after each epoch'\n            self.indexes = np.arange(len(self.X_train))\n            if self.shuffle == True:\n                np.random.shuffle(self.indexes)\n        \n        def __data_generation(self, batch_ids):\n            if self.alpha>0:\n                _, h, w, c = self.X_train.shape\n                l = np.random.beta(self.alpha, self.alpha, self.batch_size)\n                X_l = l.reshape(self.batch_size, 1, 1, 1)\n                y_l = l.reshape(self.batch_size, 1)\n\n                X1 = self.X_train[batch_ids]\n                X2 = self.X_train[np.flip(batch_ids)] #replaced this with flip\n                X = X1 * X_l + X2 * (1 - X_l)\n                y1 = self.y_train[batch_ids]\n                y2 = self.y_train[np.flip(batch_ids)]\n                y = y1 * y_l + y2 * (1 - y_l) \n            else:\n                X = self.X_train[batch_ids]\n                y = self.y_train[batch_ids]\n        \n            if self.datagen:\n                for i in range(self.batch_size):\n                    X[i] = self.datagen.random_transform(X[i])\n                    X[i] = self.datagen.standardize(X[i])\n        \n            return X, y","bf67d53a":"# EskinGenerator\u306b\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n# \u3053\u3053\u3067\u3001\u30bf\u30a4\u30e0\u30aa\u30d5\u30bb\u30c3\u30c8\u306f\u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304carbiterary decision\u3067\u3042\u308a\u3001\u672c\u8cea\u7684\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3092\u5909\u3048\u306a\u3044\uff08\u30d1\u30f3\u30c1\u3092\u6253\u3064\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u5c11\u3005\u305a\u308c\u3066\u3082\u3001\u540c\u3058\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u3068\u3044\u3046\u4e8b\u5b9f\u3092\u5909\u3048\u306a\u3044\uff09\u3053\u3068\u304b\u3089\u3001height_shift\u3092\u5165\u308c\u3066\u307f\u307e\u3059\u3002\n# \u4ed6\u306b\u3082\u8272\u3005\u8003\u3048\u3089\u308c\u308b\u3067\u3057\u3087\u3046\u3002\ndatagen = image.ImageDataGenerator(\n    height_shift_range=0.1,  \n)\n\ntraining_generator = EskinGenerator(X_train, y_train, alpha=0, batch_size=1, datagen=datagen, shuffle=False)","968c4810":"# \u5148\u982d\u30c7\u30fc\u30bf\u306e\u53f3\u8098\u90e8\u306e\u30bb\u30f3\u30b5\u30fc\u5024\u306b\u3064\u3044\u3066\u3001augmentation\u306e\u7d50\u679c\u3068\u3057\u3066\u51fa\u529b\u304c\u3069\u306e\u3088\u3046\u306b\u306a\u308b\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u3088\u304f\u307f\u308b\u3068\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u6642\u9593\u65b9\u5411\u306e\u30b7\u30d5\u30c8\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\ncol = 'ELBOW_R'\ncol_ix = np.where(df_sensor.columns=='ELBOW_R')[0][0]-1\n\nplt.figure(figsize=[30,10])\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    X, y = training_generator.__getitem__(0)\n    plt.title('output %d'%i)\n    plt.plot(X[0,:,:,col_ix], label=col)\n    plt.xlabel('relative time position')\n    plt.ylabel('sensor_output')\n    plt.legend()\nplt.show()","4386f85a":"# Data Augmentation\u306b\u3064\u3044\u3066\n> Data augmentation can be viewed as an injection of prior knowledge about the invariant properties of the data against certain transformations. Augmented data can cover unexplored input space, prevent overfitting, and improve the generalization ability of a DL model.\n\n[https:\/\/arxiv.org\/pdf\/1706.00527.pdf](https:\/\/arxiv.org\/pdf\/1706.00527.pdf)\u3088\u308a\u5f15\u7528\n\nData Augmentation\u3068\u306f\u753b\u50cf\u3067\u304a\u99b4\u67d3\u307f\u306e\u64cd\u4f5c\u3067\u3001Deep Learning\u5927\u6d41\u884c\u306e\u6628\u4eca\u3001\u7686\u3055\u3093\u3082\u30a4\u30cc\u30cd\u30b3\u306e\u753b\u50cf\u5206\u985e\u3067\u5de6\u53f3\u306b\u30d5\u30ea\u30c3\u30d7\u3057\u305f\u308a\u5fae\u5c0f\u306a\u5e73\u884c\u79fb\u52d5\u3084\u56de\u8ee2\u3092\u52a0\u3048\u3066\u30c7\u30fc\u30bf\u6570\u3092\u6c34\u5897\u3057\u3059\u308b\u3068\u3044\u3046\u306e\u3092\u898b\u305f\u3053\u3068\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u306e\u753b\u50cf\u306e\u4f8b\u304b\u3089Data Augmentation\u306f\u30c7\u30fc\u30bf\u306e\u6c34\u5897\u3057\u3068\u3044\u3046\u5370\u8c61\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u304c\u3001\u3067\u306f\u3053\u306e\u64cd\u4f5c\u306b\u3088\u308b\u7cbe\u5ea6\u306e\u30b2\u30a4\u30f3\u306f\u3069\u3053\u304b\u3089\u6765\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u7121\u304b\u3089\u6709\u306f\u751f\u307e\u308c\u307e\u305b\u3093\u304b\u3089\u3001\u305d\u308c\u306b\u76f8\u5f53\u3059\u308b\u60c5\u5831\u3092\u3069\u3053\u304b\u3089\u304b\u5f97\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u306f\u3053\u308c\u306f\u672c\u8cea\u7684\u306b\u306f\u300c\u3068\u3042\u308b\u5909\u63db\u64cd\u4f5c\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3092\u5909\u5316\u3055\u305b\u306a\u3044\u300d\u3068\u3044\u3046Prior Information\u3092\u30e2\u30c7\u30eb\u306b\u6ce8\u5165\u3059\u308b\u3053\u3068\u306b\u76f8\u5f53\u3057\u3066\u3044\u308b\u3068\u8a00\u3048\u307e\u3059\u3002\u4ed6\u306b\u3082\u6b63\u5247\u5316\u306e\u4e00\u7a2e\u3068\u307f\u308b\u898b\u65b9\u3082\u3042\u308a\u3001\u3044\u305a\u308c\u3082\u540c\u3058\u3053\u3068\u3067\u3059\u304c\u3001\u3053\u306e\u8aac\u660e\u306f\u30c7\u30fc\u30bf\u3068\u5411\u304d\u5408\u3044\u3001\u3069\u306e\u3088\u3046\u306aaugmentation\u304c\u3042\u308a\u5f97\u308b\u306e\u304b\u3092\u8003\u3048\u308b\u4e0a\u3067\u3068\u3066\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8003\u3048\u65b9\u306b\u7acb\u3064\u3068\u3001\u753b\u50cf\u4ee5\u5916\u306e\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306b\u5bfe\u3057\u3066\u3082\u9069\u7528\u53ef\u80fd\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u3001\u300c\u4f55\u304c\u3069\u3046\u306a\u3063\u305f\u3089\u30e9\u30d9\u30eb\u304cTrue\u306b\u306a\u308b\u304b\u300d\u306a\u3069\u3092\u8003\u3048\u308bFeature Engineering\u3068\u30b9\u30bf\u30f3\u30b9\u306f\u7570\u306a\u308a\u307e\u3059\u304c\u8fd1\u3044\u3082\u306e\u304c\u3042\u308b\u3088\u3046\u306b\u3082\u611f\u3058\u3089\u308c\u307e\u3059\u306d\u3002\n","5e320863":"# \u305d\u308c\u3067\u306f\u5f15\u304d\u7d9a\u304d\u30c7\u30fc\u30bf\u3068\u30b3\u30f3\u30da\u3092\u304a\u697d\u3057\u307f\u304f\u3060\u3055\u3044\uff01"}}