{"cell_type":{"66d13b16":"code","e86ffce0":"code","a7596edc":"code","f852b2ca":"markdown","ac8a021d":"markdown","25f27e5b":"markdown"},"source":{"66d13b16":"%%writefile random_agent.py\nimport random\nimport time\n\n# Arbitrary 'salt' to keep submissions far from time.time()\nOFFSET = 99999\n\n# Will be replaced based on the number of submissions made\nsubmission_id = 1\n\nrandom.seed(time.time() + OFFSET + submission_id)\n\ndef random_agent(obs, config):\n    return random.randint(0,2)","e86ffce0":"!mkdir -p \/root\/.kaggle\/\n!cp \/kaggle\/input\/kaggle-json\/kaggle.json \/root\/.kaggle\/kaggle.json\n!sed -i \"s\/1\/$(kaggle competitions submissions rock-paper-scissors | wc -l)\/g\" random_agent.py","a7596edc":"!cat random_agent.py","f852b2ca":"# Independent Random Agent Generator\nHypothesis: the nash equilibria for the rock, paper, scissors game is to choose each of rock, paper, & scissors with probability (1\/3, 1\/3, 1\/3), therefore the optimal strategy is to use a random uniform agent.\n\nSince all agents submitted to this competition are evaluated, this competition is more of a numbers game rather than a competition to find the best agent (assuming that random seeds cannot be easily found due to runtime containerization).\n\nTherefore we would like to submit many random agents and make sure that each one produces different results.\n\n## 1. Define the random agent","ac8a021d":"## 3. Show the new independent agent","25f27e5b":"## 2. Replace our submission ID placeholder (1) with the submission ID by using the kaggle API\n\nYou will need to add your kaggle.json API key to \/root\/.kaggle\/kaggle.json in order to use this command.\n\nThis command counts the number of submissions made by me, then replaces submission_id with that number."}}