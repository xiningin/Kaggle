{"cell_type":{"02ea99fd":"code","f849ce4d":"code","07e1e34d":"code","6ef200a5":"code","b94a9108":"code","cf8caee8":"code","48c5885f":"code","59e3b848":"code","7fc5aabd":"code","74f861b4":"code","0f8f5042":"code","34a95f60":"code","0a1af6d1":"code","83b8cea6":"code","88aa1b77":"code","cb86e565":"code","d0a9321c":"code","a2464ac0":"code","1d5b4fd5":"code","1e7a713d":"code","bbff2da5":"code","08bbb7a4":"code","b9083fd0":"code","f1c6ceb3":"code","77ac04e7":"code","3a57ae6a":"code","b03e11a4":"code","2758868b":"code","a316a1f9":"markdown","6ee864a0":"markdown","e9145722":"markdown","5edf6b41":"markdown","729aeee3":"markdown","39d5464b":"markdown","5334d859":"markdown","a1dedd69":"markdown","28a03c31":"markdown","4c4086d4":"markdown","a9e402f8":"markdown","80b1a59d":"markdown","71aa9391":"markdown","fa0ff5f1":"markdown","af5a3796":"markdown","50463040":"markdown"},"source":{"02ea99fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f849ce4d":"#loading packages for plotting \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams['figure.dpi'] = 200\n\n#for data preporocessing, and predicting\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\n\n# ignoring warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")","07e1e34d":"#lets first list the files in acea-water-prediction directory\nos.listdir('..\/input\/acea-water-prediction')\n\n#9 csv files, 9 datasets","6ef200a5":"#saving csv \nAquifer_Doganella = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Doganella.csv', index_col = 'Date')\nAquifer_Auser = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Auser.csv', index_col = 'Date')\nWater_Spring_Amiata = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Amiata.csv', index_col = 'Date')\nLake_Bilancino = pd.read_csv('..\/input\/acea-water-prediction\/Lake_Bilancino.csv', index_col = 'Date')\nWater_Spring_Madonna_di_Canneto = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Madonna_di_Canneto.csv', index_col = 'Date')\nAquifer_Luco = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Luco.csv', index_col = 'Date')\nAquifer_Petrignano = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Petrignano.csv', index_col = 'Date')\nWater_Spring_Lupa = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Lupa.csv', index_col = 'Date')\nRiver_Arno = pd.read_csv('..\/input\/acea-water-prediction\/River_Arno.csv', index_col = 'Date')\n","b94a9108":"datasets = [Aquifer_Doganella,Aquifer_Auser,Water_Spring_Amiata,Lake_Bilancino,Water_Spring_Madonna_di_Canneto,Aquifer_Luco,Aquifer_Petrignano,Water_Spring_Lupa,River_Arno]\ndatasets_names = ['Aquifer_Doganella', 'Aquifer_Auser', 'Water_Spring_Amiata','Lake_Bilancino', 'Water_Spring_Madonna_di_Canneto', 'Aquifer_Luco','Aquifer_Petrignano', 'Water_Spring_Lupa', 'River_Arno']","cf8caee8":"#info for each dataset\n\n#[print('{}: \\n{}\\n -------------------------------'.format(datasets_names[i], datasets[i].dtypes.value_counts())) for i in range(len(datasets))]","48c5885f":"#[print('{}: \\n{}\\n -------------------------------'.format(datasets_names[i], datasets[i].head(3))) for i in range(len(datasets))]","59e3b848":"def bar_plot(x, y, title, palette_len, xlim = None, ylim = None, \n             xticklabels = None, yticklabels = None, \n             top_visible = False, right_visible = False, \n             bottom_visible = True, left_visible = False,\n             xlabel = None, ylabel = None, figsize = (6, 4),\n             axis_grid = 'x'):\n    fig, ax = plt.subplots(figsize = figsize)\n    plt.title(title)\n    \n    #borders\n    ax.spines['top'].set_visible(top_visible)\n    ax.spines['right'].set_visible(right_visible)\n    ax.spines['bottom'].set_visible(bottom_visible)\n    ax.spines['left'].set_visible(left_visible)\n    for i in ['top', 'right', 'bottom', 'left']:\n        ax.spines[i].set_color('blue')\n    \n    #plotting the graph\n    sns.barplot(x = x, y = y, edgecolor = 'black', ax = ax,\n                palette = sns.color_palette(\"mako\", len(palette_len)))\n    \n    #formatting the axes\n    ax.set_xlim(xlim)\n    ax.set_ylim(ylim)    \n    ax.set_xticklabels(xticklabels)\n    ax.set_yticklabels(yticklabels)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    ax.grid(axis = axis_grid, linestyle = ':', alpha = 0.5) #try changing these values and note down the differences\n    plt.show()","7fc5aabd":"def columns_viz(data, color=\"#1DF1C9\"):\n    for i in range(len(data.columns)):\n        line_plot(data=data, y=data.columns[i],\n                  color = color,\n                  title = '{} dynamics'.format(data.columns[i]),\n                  bottom_visible = False, figsize = (10, 3))","74f861b4":"colors=['#000080', '#9999ff', '#3399ff', '#cce6ff', '#1f3d7a',' #0000e6']\ndef line_plot(data, y, title, color,\n              top_visible = False, right_visible = False, \n              bottom_visible = True, left_visible = False,\n              ylabel = None, figsize = (10, 4), axis_grid = 'y'):\n    \n    fig, ax = plt.subplots(figsize = figsize)\n    plt.title(title, size = 15, fontweight = 'bold', fontfamily = 'serif')\n    \n    #borders\/spines\n    for i in ['top', 'right', 'bottom', 'left']:\n        ax.spines[i].set_color('black')\n    \n    ax.spines['top'].set_visible(top_visible)\n    ax.spines['right'].set_visible(right_visible)\n    ax.spines['bottom'].set_visible(bottom_visible)\n    ax.spines['left'].set_visible(left_visible)\n    \n    sns.lineplot(x=data.index.values, y = data[y], color = color)\n    \n    ax.set_xticks([])\n    plt.xlabel('')\n    plt.ylabel(ylabel, fontfamily = 'serif')\n    ax.grid(axis = axis_grid, linestyle = '--', alpha = 0.9)\n    plt.show()","0f8f5042":"def corr_plot(dataset, x):\n    corr_temp = dataset[dataset.columns[dataset.columns.str.contains(x)].tolist()].corr()\n    mask = np.triu(np.ones_like(corr_temp, dtype=bool))\n\n\n    fig, ax = plt.subplots(figsize=(10, 8))\n\n    sns.heatmap(corr_temp, mask=mask, annot=True, cmap=\"Blues\")\n    plt.show()","34a95f60":"Aquifer = [Aquifer_Doganella, Aquifer_Auser, Aquifer_Luco, Aquifer_Petrignano]\nAquifer_names = ['Aquifer_Doganella', 'Aquifer_Auser', 'Aquifer_Luco', 'Aquifer_Petrignano']","0a1af6d1":"for i in range(len(Aquifer)):\n    print('{}: \\n{}\\n Shape- {}\\n -------------------------------'.format(Aquifer_names[i], Aquifer[i].dtypes.value_counts(), Aquifer[i].shape))","83b8cea6":"for i in range(len(Aquifer)):\n    NaN_values = (Aquifer[i].isnull().sum() \/ len(Aquifer[i]) * 100).sort_values(ascending = False)\n    bar_plot(x = NaN_values, \n             y = NaN_values.index,\n             title = Aquifer_names[i] + 'NaN values (%)',\n             palette_len = NaN_values.index, \n             xlim = (0, 100), \n             xticklabels = range(0, 101, 20),\n             yticklabels = NaN_values.index,\n             left_visible = True,\n             figsize = (10, 8), axis_grid = 'x')","88aa1b77":"for i in range(len(Aquifer)):\n    print(Aquifer_names[i],'*'*30)\n    columns_viz(Aquifer[i], color = colors[i])\n    print('*'*30)\n","cb86e565":"for i in range(len(Aquifer)):\n    print(Aquifer_names[i],'*'*30)\n    corr_plot(Aquifer[i], x=\"^Depth_to_Groundwater\")\n    print('*'*30)","d0a9321c":"Lake_Bilancino.head(3)","a2464ac0":"NaN_values = (Lake_Bilancino.isnull().sum() \/ len(Lake_Bilancino) * 100).sort_values(ascending = False)\nbar_plot(x = NaN_values, \n y = NaN_values.index,\n title = 'Lake_Bilancino NaN values (%)',\n palette_len = NaN_values.index, \n xlim = (0, 100), \n xticklabels = range(0, 101, 20),\n yticklabels = NaN_values.index,\n left_visible = True,\n figsize = (10, 8), axis_grid = 'x')","1d5b4fd5":"columns_viz(Lake_Bilancino)","1e7a713d":"corr_plot(Lake_Bilancino, x=\"\")","bbff2da5":"River_Arno.head(3)","08bbb7a4":"NaN_values = (River_Arno.isnull().sum() \/ len(River_Arno) * 100).sort_values(ascending = False)\nbar_plot(x = NaN_values, \n y = NaN_values.index,\n title = 'River_Arno NaN values (%)',\n palette_len = NaN_values.index, \n xlim = (0, 100), \n xticklabels = range(0, 101, 20),\n yticklabels = NaN_values.index,\n left_visible = True,\n figsize = (10, 8), axis_grid = 'x')","b9083fd0":"columns_viz(River_Arno)","f1c6ceb3":"corr_plot(River_Arno, x=\"\")","77ac04e7":"Springs = [Water_Spring_Amiata,  Water_Spring_Madonna_di_Canneto, Water_Spring_Lupa]\nSprings_names =['Water_Spring_Amiata',  'Water_Spring_Madonna_di_Canneto', 'Water_Spring_Lupa']","3a57ae6a":"for i in range(len(Springs)):\n    NaN_values = (Springs[i].isnull().sum() \/ len(Springs[i]) * 100).sort_values(ascending = False)\n    bar_plot(x = NaN_values, \n             y = NaN_values.index,\n             title = Springs_names[i] + 'NaN values (%)',\n             palette_len = NaN_values.index, \n             xlim = (0, 100), \n             xticklabels = range(0, 101, 20),\n             yticklabels = NaN_values.index,\n             left_visible = True,\n             figsize = (10, 8), axis_grid = 'x')","b03e11a4":"'''for i in range(len(Springs)):\n    print(Springs_names[i],'*'*30)\n    columns_viz(Springs[i], color = colors[i])\n    print('*'*30)\n'''\n\n","2758868b":"for i in range(len(Springs)):\n    print(Springs_names[i],'*'*30)\n    corr_plot(Springs[i], x=\"\")\n    print('*'*30)","a316a1f9":"The Notebook will majorly contain: **Data Visualization**\n* **Follow the below table of contents to scroll easily through the notebook** (click the serail numbers to jump to the section)\n* Pictures\/Photographs used in this Notebook belong to their respective owners\n\n<a id='tc'><\/a>\n* [1](#s1) **Introduction**\n* [2](#s2) **Data Visualization**\n  * [2.1](#s21) **Loading Data**\n  * [2.2](#s22) **Defining Graph**\n* [3](#s3) **Aquifer**\n* [4](#s4) **Lake**\n* [5](#s5) **River**\n* [6](#s6) **Water Spring**","6ee864a0":"<a id='s1'><h2>Section 1<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style=\"background:#e6ffff;color:#004d4d\"><center>Introduction<\/center><\/h1>\n\nThis competition uses nine different datasets, completely independent and not linked to each other. Each dataset can represent a different kind of waterbody. As each waterbody is different from the other, the related features as well are different from each other. So, if for instance we consider a water spring we notice that its features are different from the lake\u2019s one. This is correct and reflects the behavior and characteristics of each waterbody. The Acea Group deals with four different type of waterbodies: water spring (for which three datasets are provided), lake (for which a dataset is provided), river (for which a dataset is provided) and aquifers (for which four datasets are provided). **Link to download data description is given** [here](https:\/\/www.kaggle.com\/c\/acea-water-prediction\/data?select=datasets_description.ods)\n\n![Water](https:\/\/www.theheraldtimes.com\/wp-content\/uploads\/2020\/04\/27-scaled.jpg)\n\n","e9145722":"<a id='s3'><h2>Section 3<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style= \"background:#e6ffff;color:#004d4d\"><center>Aquifer<\/center><\/h1>\n\n![Aquifer](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/04\/Aquifer_en.svg\/350px-Aquifer_en.svg.png)","5edf6b41":"The Notebook is based on Acea water prediction competition. The competition is closed already! [Click here to view Acea Water Prediction](https:\/\/www.kaggle.com\/c\/acea-water-prediction)\n* For beginners you can practice the code by creating new notebook(PS Don't forget to tag me as reference ;)","729aeee3":"***\n\n<h2>Aquifer_Doganella, Aquifer_Auser, Aquifer_Luco, Aquifer_Petrignano<\/h2>","39d5464b":"* x- data for x axis\n* y- data for y axis\n* palette_len - Every bar plotted will have a unique color and the number of colors required is defined as palette length (basically it's equal to y)\n* xlim, ylim - limit for x and y\n* xticklables - https:\/\/www.mathworks.com\/help\/matlab\/ref\/xticklabels.html (tick lables for x axis)\n* yticklables - https:\/\/www.mathworks.com\/help\/matlab\/ref\/yticklabels.html (tick lables for y axis)\n* top_visible - this parameter is used for visibility of top axis . Respectively for right, bottom and left\n* xlabel, ylabel - Lable for respective axis\n* figsize(x, y) - size of figure\n* axis_grid - grid lines (here the dotted lines vertical lines specifiying x lables)\n","5334d859":"Will be used to study the pattern of each column","a1dedd69":"<h1 style=\"background:#e6ffff;color:#ffff80\"><center>Please Upvote to Support<\/center><\/h1>","28a03c31":"In the given datasets, there are 4 types of water bodies. We will evaluate each of these 4 water bodies separately","4c4086d4":"<a id='s21'><h2>Section 2.1<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style= \"color:#004d4d\">Loading The Data<\/h1>","a9e402f8":"<a id='s5'><h2>Section 5<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style= \"background:#e6ffff;color:#004d4d\"><center>River<\/center><\/h1>\n\n![River](https:\/\/www.followyourdetour.com\/wp-content\/uploads\/2020\/10\/Florence-Arno-River.jpg)","80b1a59d":"<a id='s6'><h2>Section 6<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style= \"background:#e6ffff;color:#004d4d\"><center>Water Spring<\/center><\/h1>\n\n![Water Spring](https:\/\/www.toscanaumbriaintreno.com\/thumbs\/1000x1000\/n\/territorio\/1\/5cb9a95b070d8_amiata.jpg)\n\n\n<h2 style='color:#1f3d7a;'>Water_Spring_Amiata,  Water_Spring_Madonna_di_Canneto, Water_Spring_Lupa<\/h2>","71aa9391":"<a id='s22'><h2>Section 2.2<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style= \"color:#004d4d\">Defining Graph Functions<\/h1>\n\nHere we will create a series of graph to understand the data. After every function - there will be a list of the parameters used and their explaination and role in plotting the graph. Some graphs are commented, you can uncomment and run the graphs","fa0ff5f1":"<a id='s2'><h2>Section 2<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style=\"background:#e6ffff;color:#004d4d\"><center>Data Visualization<\/center><\/h1>","af5a3796":"**Uncomment the below line of code and run!**\n* It may take some time","50463040":"<a id='s4'><h2>Section 4<\/h2><\/a>\n[back to table of contents](#tc)\n****\n<h1 style= \"background:#e6ffff;color:#004d4d\"><center>Lake<\/center><\/h1>\n\n![Lake](https:\/\/www.hoteldeivicari.com\/images\/demo\/gallery\/intestazione1280x500\/mugello_florence_lake_bilancino_near_florence.jpg)\n* Since there is only one lake, we will not make any List or List_names"}}