{"cell_type":{"bf360fb4":"code","428ead9e":"code","8b603755":"code","aeb036a4":"code","0b888e79":"code","81ff28dd":"code","882b1752":"code","2b3a4f8a":"code","9ed1d5b0":"code","61d91634":"code","267b560f":"code","26bba87f":"code","956f3752":"markdown","134a15fe":"markdown","3d53ca27":"markdown","053124de":"markdown","1a3ac019":"markdown","1a616768":"markdown"},"source":{"bf360fb4":"import pandas as pd\nimport seaborn as sns\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\nmatplotlib.rcParams['figure.figsize'] = (12, 8)","428ead9e":"df = pd.read_csv('..\/input\/russian-legislative-election-2021\/2021_result_full.csv')\ndf.rename(columns={\n    'transaction_time': 'time',\n    'transaction_time_5m': 'time_5m',\n    'transaction_time_15m': 'time_15m',\n    'transaction_time_30m': 'time_30m',},\n    inplace=True)\n\ndf","8b603755":"# Convert dates to 'datetime' type.\ndate_cols = ['time', 'time_5m', 'time_15m', 'time_30m']\nfor col in date_cols:\n    df[col] = pd.to_datetime(df[col], format='%Y-%m-%d %H:%M:%S.%f')\ndf.sort_values('time', inplace=True)\n\n# Add 3 hours to 'time' column.\ndf['time'] += pd.DateOffset(hours=3)\n\ndf","aeb036a4":"# Pro-government candidates. \n# https:\/\/www.sobyanin.ru\/komanda-kandidatov-v-gosudarstvennuyu-dumu\ngov_candidates = [\n    \"\u041f\u041e\u041f\u041e\u0412 \u0415\u0432\u0433\u0435\u043d\u0438\u0439\",\n    \"\u0425\u041e\u0412\u0410\u041d\u0421\u041a\u0410\u042f\",\n    \"\u0422\u041e\u041b\u0421\u0422\u041e\u0419\",\n    \"\u041f\u0415\u0412\u0426\u041e\u0412\",\n    \"\u0420\u0410\u0417\u0412\u041e\u0420\u041e\u0422\u041d\u0415\u0412\u0410\",\n    \"\u0421\u0410\u0411\u041b\u0418\u041d\",\n    \"\u041d\u0418\u0424\u0410\u041d\u0422\u042c\u0415\u0412\",\n    \"\u0411\u0423\u0426\u041a\u0410\u042f\",\n    \"\u0412\u0410\u0421\u0421\u0415\u0420\u041c\u0410\u041d\",\n    \"\u041c\u0410\u0416\u0423\u0413\u0410\",\n    \"\u0411\u0415\u041b\u042b\u0425\",\n    \"\u041b\u0415\u041e\u041d\u041e\u0412\",\n    \"\u0420\u0423\u041c\u042f\u041d\u0426\u0415\u0412\",\n    \"\u0420\u041e\u041c\u0410\u041d\u0415\u041d\u041a\u041e\",\n    \"\u0411\u0410\u0416\u0415\u041d\u041e\u0412\"\n]\n\n# Opposition.\nopp_candidates = [\n    \"\u041b\u041e\u0411\u0410\u041d\u041e\u0412\",\n    \"\u0411\u0420\u042e\u0425\u0410\u041d\u041e\u0412\u0410\",\n    \"\u0413\u0423\u041b\u0418\u0427\u0415\u0412\u0410\",\n    \"\u041f\u0410\u0420\u0424\u0415\u041d\u041e\u0412\",\n    \"\u0423\u0414\u0410\u041b\u042c\u0426\u041e\u0412\u0410\",\n    \"\u041c\u0410\u0425\u041d\u0418\u0426\u041a\u0418\u0419\",\n    \"\u041f\u0415\u0422\u0420\u041e\u0412 \u0412\u0438\u0442\u0430\u043b\u0438\u0439\",\n    \"\u041a\u0423\u0420\u0413\u0410\u041d\u0421\u041a\u0418\u0419\",\n    \"\u041e\u0411\u0423\u0425\u041e\u0412\",\n    \"\u0413\u0420\u0415\u0411\u0415\u041d\u041d\u0418\u041a\",\n    \"\u0423\u041b\u042c\u042f\u041d\u0427\u0415\u041d\u041a\u041e\",\n    \"\u041c\u0418\u0422\u0420\u041e\u0425\u0418\u041d\",\n    \"\u041d\u0418\u041a\u041e\u041b\u0410\u0415\u0412\",\n    \"\u0422\u0410\u0420\u0410\u041d\u0426\u041e\u0412\",\n    \"\u0420\u0410\u0428\u041a\u0418\u041d \u0412\u0430\u043b\u0435\u0440\u0438\u0439 \u0424\u0435\u0434\u043e\u0440\u043e\u0432\u0438\u0447\"\n]\n\nprint(len(gov_candidates + opp_candidates), 'candidates')","0b888e79":"interval = 'time_30m'\ndf_votes = df.groupby([interval, 'candidate_name']).agg({interval: 'count'})\ndf_votes.rename(columns={interval: 'votes'}, inplace=True)\ndf_votes.reset_index(inplace=True)\ndf_votes = df_votes[df_votes['candidate_name'].str.contains('|'.join(gov_candidates + opp_candidates), regex=True)]\n\nprint(len(df_votes['candidate_name'].unique()), 'candidates')\ndf_votes","81ff28dd":"for gov, opp in zip(gov_candidates, opp_candidates):\n    df_candidates = df_votes[df_votes['candidate_name'].str.contains('|'.join([gov, opp]))]\n    sns.lineplot(x=df_votes[interval], y=df_candidates['votes'], hue=df_candidates['candidate_name'])\n    plt.show()","882b1752":"df_gov = df_votes[df_votes['candidate_name'].str.contains('|'.join(gov_candidates), regex=True)]\ndf_opp = df_votes[df_votes['candidate_name'].str.contains('|'.join(opp_candidates), regex=True)]","2b3a4f8a":"sns.lineplot(x=df_gov[interval], y=df_gov['votes'], hue=df_gov['candidate_name'])\nplt.title('Pro-government candidates')\nplt.show()\n\nsns.lineplot(x=df_opp[interval], y=df_opp['votes'], hue=df_opp['candidate_name'])\nplt.title('Opposition candidates')\nplt.show()","9ed1d5b0":"votes_sum = df_votes.groupby('candidate_name').agg({'votes': 'sum'})\nvotes_sum.sort_values('votes', ascending=False, inplace=True)\nvotes_sum['scale'] = votes_sum['votes'] \/ votes_sum['votes'].max()\nvotes_sum","61d91634":"def scaler(row):\n    row['votes'] \/= votes_sum[votes_sum.index == row['candidate_name']]['scale'][0]\n    return row\ndf_scaled = df_votes.apply(scaler, axis='columns')\ndf_scaled","267b560f":"df_scaled_gov = df_scaled[df_scaled['candidate_name'].str.contains('|'.join(gov_candidates), regex=True)]\ndf_scaled_opp = df_scaled[df_scaled['candidate_name'].str.contains('|'.join(opp_candidates), regex=True)]","26bba87f":"sns.lineplot(x=df_scaled_gov[interval], y=df_scaled_gov['votes'], hue=df_scaled_gov['candidate_name'])\nplt.title('Pro-government candidates (scaled)')\nplt.show()\n\nsns.lineplot(x=df_scaled_opp[interval], y=df_scaled_opp['votes'], hue=df_scaled_opp['candidate_name'])\nplt.title('Opposition candidates (scaled)')\nplt.show()","956f3752":"# Load the data.","134a15fe":"# Plot every district.","3d53ca27":"# Pro-government and opposition plots.","053124de":"# Pro-government and opposition plots scaled by votes.","1a3ac019":"# Get transaction amount for every candidate in every time interval.","1a616768":"# Pro-government and opposition candidates."}}