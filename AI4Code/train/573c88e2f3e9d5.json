{"cell_type":{"2206d61b":"code","b11d3cdd":"code","4f0e9295":"code","4ad193e6":"code","83e8dfca":"code","a80bc188":"code","9087e971":"code","c55bcfc2":"code","ce635371":"code","2c739017":"code","23412da8":"code","04c1df90":"code","5d429e04":"code","6e03ed93":"code","4c1d7c59":"code","0d52e9f6":"code","99bef128":"code","f0dcbf05":"code","4f012df6":"code","d691b8fb":"code","6702d124":"code","a95a65e4":"code","1b4a0e09":"code","2bae15a2":"code","8b3dc1cd":"code","ab534188":"code","fce20a58":"code","784b14bb":"markdown","14bc9302":"markdown","fb952725":"markdown","4977210b":"markdown","b1a656d5":"markdown","7ae4c9c0":"markdown","191d8fc7":"markdown","d6bd09f3":"markdown","d6feb570":"markdown","1058df17":"markdown","b0c1334f":"markdown","0091c76d":"markdown","aefb9c38":"markdown","393e2878":"markdown","e386925b":"markdown","fddf0aee":"markdown","098a94ce":"markdown","e1022336":"markdown","62e70698":"markdown","c74fa6aa":"markdown","42faa6e2":"markdown","30af4c22":"markdown","58d186c9":"markdown"},"source":{"2206d61b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b11d3cdd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style ('dark')\nsns.set_palette('RdYlGn')\n","4f0e9295":"df = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndf.head()","4ad193e6":"for col in df.columns:\n    print('Unique values in each columns are:', '\\n',col,'\\n', df[col].unique(), '\\n')","83e8dfca":"df.columns","a80bc188":"fig, axes = plt.subplots(2, 3, figsize=(18, 10))\n\nfig.suptitle('Output Stats by Age')\n\nsns.scatterplot(ax=axes[0, 0], data=df, x='age', y='trtbps', hue = 'output')\nsns.scatterplot(ax=axes[0, 1], data=df, x='age', y='chol', hue = 'output')\nsns.scatterplot(ax=axes[0, 2], data=df, x='age', y='thalachh', hue = 'output')\nsns.scatterplot(ax=axes[1, 0], data=df, x='age', y='exng', hue = 'output')\nsns.scatterplot(ax=axes[1, 1], data=df, x='age', y='oldpeak', hue = 'output')\nsns.scatterplot(ax=axes[1, 2], data=df, x='age', y='caa', hue = 'output')\n","9087e971":"plt.figure(figsize=(10,7))\ncorr = df.corr()\nsns.heatmap(corr, cmap = 'coolwarm', linewidth =0.7)","c55bcfc2":"fig, axes = plt.subplots(3,4, figsize=(18, 10))\n\nfig.suptitle('Output Stats by Age')\n\nsns.histplot(ax=axes[0, 0], data=df,  x='age', color=\"g\")\nsns.histplot(ax=axes[0, 1], data=df,  x='sex', color=\"m\")\nsns.histplot(ax=axes[0, 2], data=df,  x='cp', color=\"b\")\nsns.histplot(ax=axes[1, 0], data=df,  x='trtbps', color=\"r\")\nsns.histplot(ax=axes[1, 1], data=df,  x='chol', color=\"y\")\nsns.histplot(ax=axes[1, 2], data=df,  x='fbs', color=\"c\")\nsns.histplot(ax=axes[2, 0], data=df,  x='restecg', color=\"k\")\nsns.histplot(ax=axes[2, 1], data=df,  x='thalachh', color=\"g\")\nsns.histplot(ax=axes[2, 2], data=df,  x='oldpeak', color=\"g\")\nsns.histplot(ax=axes[0, 3], data=df,  x='exng')\nsns.histplot(ax=axes[1, 3], data=df,  x='slp', color=\"b\")\nsns.histplot(ax=axes[2, 3], data=df,  x='caa', color=\"r\")\n","ce635371":"g = sns.FacetGrid(df, col=\"sex\", hue=\"output\")\ng.map(sns.scatterplot, \"age\", \"chol\", alpha=.7)\nplt.figure(figsize=(15,7))\ng.add_legend()","2c739017":"g = sns.FacetGrid(df, col=\"thall\", hue=\"output\", palette = 'dark')\ng.map(sns.scatterplot, \"oldpeak\", \"chol\", alpha=.7)\nplt.figure(figsize=(15,7))\ng.add_legend()","23412da8":"g = sns.FacetGrid(df, col=\"caa\", hue=\"output\", palette = 'mako')\ng.map(sns.scatterplot, \"thalachh\", \"chol\", alpha=.7)\nplt.figure(figsize=(15,7))\ng.add_legend()","04c1df90":"g = sns.FacetGrid(df, col=\"slp\", hue=\"output\", palette = 'mako')\ng.map(sns.scatterplot, \"cp\", \"thalachh\", alpha=.7)\nplt.figure(figsize=(15,7))\ng.add_legend()","5d429e04":"g = sns.FacetGrid(df, col=\"cp\", hue=\"output\", palette = 'rocket')\ng.map(sns.scatterplot, \"oldpeak\", \"chol\", alpha=.7)\nplt.figure(figsize=(15,7))\ng.add_legend()","6e03ed93":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import train_test_split\nrf = RandomForestClassifier()\ndt = DecisionTreeClassifier()\nsgd = SGDClassifier()\nadc = AdaBoostClassifier(base_estimator= rf, n_estimators=50, learning_rate=1.0)\n","4c1d7c59":"X = df.drop(['output'], axis = 1)\ny = df.output","0d52e9f6":"X_train, X_test,y_train, y_test = train_test_split(X, y, random_state=42, test_size = 0.2)","99bef128":"from sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nmodel_rf = rf.fit(X_train, y_train)\ny_pred_rf = model_rf.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\naccu_score_rf = accuracy_score(y_test, y_pred_rf)\n\nprint('accu_score_rf:', accu_score_rf)\n\n","f0dcbf05":"model_dt = dt.fit(X_train, y_train)\ny_pred_dt = model_dt.predict(X_test)\naccu_score_dt = accuracy_score(y_test, y_pred_dt)\nprint('accu_score_dt:', accu_score_dt)","4f012df6":"model_adc = adc.fit(X_train, y_train)\ny_pred_adc = model_adc.predict(X_test)\naccu_score_adc = accuracy_score(y_test, y_pred_adc)\nprint('accu_score_adc:', accu_score_adc)","d691b8fb":"model_sgd = sgd.fit(X_train, y_train)\ny_pred_sgd = sgd.predict(X_test)\naccu_score_sgd = accuracy_score(y_test, y_pred_sgd)\nprint('accu_score_sgd:', accu_score_sgd)","6702d124":"#result=pd.DataFrame(y_test)\n#result['prediction_sgd']=y_pred_sgd\n#result['prediction_adc']=y_pred_adc\n#result['prediction_dt']=y_pred_dt\n#result['prediction_rf']=y_pred_rf\n#result['prediction_rf1']=y_pred_rf1\n#result","a95a65e4":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","1b4a0e09":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(X, y)","2bae15a2":"rf_random.best_params_","8b3dc1cd":"rf1 = RandomForestClassifier(n_estimators= 400,\n min_samples_split= 10,\n min_samples_leaf= 4,\n max_features= 'auto',\n max_depth= 90,\n bootstrap= True)\nmodel_rf1 = rf1.fit(X_train, y_train)\ny_pred_rf1 = model_rf1.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\naccu_score_rf1 = accuracy_score(y_test, y_pred_rf1)\n\nprint('accu_score_rf1:', accu_score_rf1)","ab534188":"!pip install xlrd\n!pip install autoviz\nfrom autoviz.AutoViz_Class import AutoViz_Class\n#Instantiate the AutoViz class\nAV = AutoViz_Class()","fce20a58":"df = AV.AutoViz('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv', depVar = 'output', verbose=1)","784b14bb":"# Plotting Scatter Plot Keeping Age as the base ","14bc9302":"# Final Improved accuracy","fb952725":"# REading the Data","4977210b":"# Checking the best Parameters","b1a656d5":"# Model Decision Tree","7ae4c9c0":"# MOdel S_Gradient Decent","191d8fc7":"# Best Score is with AdaBoostRegressor i.e. 85.3%\n# Please don't forget to like \/ vote","d6bd09f3":"# Further Visualization with AutoViz","d6feb570":"# Random Forest","1058df17":"# TRain Test & Split","b0c1334f":"# Model AdaBoost Classifier","0091c76d":"# > ***Hyperparameter Tuning Random Forest***","aefb9c38":"> ***Accuracy Decision Tree Classifier as above***","393e2878":"About this dataset\nAge : Age of the patient\n\nSex : Sex of the patient\n\nexang: exercise induced angina (1 = yes; 0 = no)\n\n**ca: number of major vessels (0-3)\n\ncp : Chest Pain type chest pain type\n\nValue 1: typical angina\nValue 2: atypical angina\nValue 3: non-anginal pain\nValue 4: asymptomatic\ntrtbps : resting blood pressure (in mm Hg)\n\nchol : cholestoral in mg\/dl fetched via BMI sensor\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrest_ecg : resting electrocardiographic results\n\nValue 0: normal\nValue 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\nthalach : maximum heart rate achieved\n\noutput : 0= less chance of heart attack 1= more chance of heart attack","e386925b":"# Affect on Chest Pain w.r.t oldpeak & Cholestrol level","fddf0aee":"> ***Accuracy with Adaboost Classifier, base estimator as RandomForest as above***","098a94ce":"# Histogram of all the parameters in DataFrame","e1022336":"> ***Accuracy Randomforest as above***","62e70698":"> ***Accuracy S_GradientDecent Classifier as above***","c74fa6aa":"# Affect of Age & Cholestrol on Gender","42faa6e2":"# Corelation mapping","30af4c22":"# Print unique values in each column","58d186c9":"# Columns in DataFrame"}}