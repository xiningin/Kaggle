{"cell_type":{"17650d4c":"code","2ba72886":"code","610a34df":"code","d953ea24":"code","d14e7870":"code","4dae1c2e":"code","6ff7ad44":"code","678dea61":"code","a5ed7d06":"code","4825ca1f":"code","ac4852df":"code","e4ed58d8":"code","1c3e9f4e":"code","dc9d0eb3":"code","ae587092":"markdown","9a022049":"markdown","4b705038":"markdown","cc430865":"markdown","eaee10a1":"markdown","72c26a54":"markdown","cec35585":"markdown","ae063e42":"markdown","c4119e52":"markdown","db84d61e":"markdown","23d969ec":"markdown","27da402d":"markdown","30a5177b":"markdown","31cf3b7a":"markdown"},"source":{"17650d4c":"# Basics\nimport sys\nimport pandas as pd\nimport numpy as np\n%matplotlib inline\n\n# Imports for data loading\n# import psycopg2\n# import sqlalchemy\n# import imp\n# import os\n\n# Sklearn imports\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import f1_score, recall_score\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn.model_selection import TimeSeriesSplit","2ba72886":"# secrets_filepath = '\/home\/casey\/secrets.py'\n# secrets = imp.load_source('secrets', secrets_filepath)\n\n# # Postgres connection info\n# POSTGRES_ADDRESS = secrets.psql_ad\n# POSTGRES_PORT = secrets.psql_port\n# POSTGRES_USERNAME = secrets.psql_username\n# POSTGRES_DBNAME = secrets.psql_db\n# POSTGRES_PASSWORD = secrets.psql_pw\n\n# # Form string\n# postgres_str = ('postgresql:\/\/{username}:{password}@{ipaddress}:{port}\/{dbname}'\n#                 .format(username=POSTGRES_USERNAME, \n#                         password=POSTGRES_PASSWORD, \n#                         ipaddress=POSTGRES_ADDRESS, \n#                         port=POSTGRES_PORT, \n#                         dbname=POSTGRES_DBNAME)) \n\n# # Make connection\n# cnx = sqlalchemy.create_engine(postgres_str)","610a34df":"# companies = pd.read_sql_query('''SELECT * from casey;''', cnx)\n\n### UNCOMMENT BELOW TO LOAD FROM FILE ###\n\ncompanies = pd.read_csv('..\/input\/Financial Distress.csv')\ncompanies.rename(index=str, columns={\"Company\": \"company\", \"Time\": \"time\", \"Financial Distress\": \"financial_distress\"}, inplace=True)","d953ea24":"# Take a look at our loaded data to ensure all is in order\ncompanies.head()\n\n# Print some summaries and checks\n\n # shape\nprint(companies.shape)\n\n# dtypes\nprint(companies.iloc[:5,:5].dtypes)\n\n# check for nulls\nprint(companies.iloc[:5,:5].isnull().any())\n\n# Describe\nprint(companies.describe(percentiles=[0.25,0.5,0.75,0.99]))","d14e7870":"total_n = len(companies.groupby('company')['company'].nunique())\nprint(total_n)\n\ndistress_companies = companies[companies['financial_distress'] < -0.5]\nu_distress = distress_companies['company'].unique()\nprint(u_distress.shape)\n\nfeature_names = list(companies.columns.values)[3:] # ignore first 3: company, time, financial_distress\nprint(feature_names)","4dae1c2e":"f80 = list(companies.groupby('company')['x80'].agg('mean'))\nf80 = [int(c) for c in f80]\n\n# print(f80)\n# print(len(f80))","6ff7ad44":"companies.hist(column=['time'], bins=14)","678dea61":"# We can see from this that most companies start at time period 1, \n# but there are some which start their life much later.\n\n# print(companies.groupby(['company'])['time'].agg('min'))","a5ed7d06":"# What about the histogram of the timestamps when the distress event occurs?\ndistress_companies.hist(column=['time'], bins=14)","4825ca1f":"# Generate new train\/val\/test sets.\n\n# Populate the entire pandas array into a dict for easier processing\n\ndatadict = {}\ndistress_dict = {}\n\nfor i in range (1, total_n+1):\n    datadict[i] = {}\n    distress_dict[i] = {}\n\nprint(\"Populating dictionary...\")\nfor idx, row in companies.iterrows():\n    company = row['company']\n    time = int(row['time'])\n    \n    datadict[company][time] = {}\n    \n    if row['financial_distress'] < -0.5:\n        distress_dict[company][time] = 1\n    else:\n        distress_dict[company][time] = 0\n        \n    for feat_idx, column in enumerate(row[3:]):\n        feat = feature_names[feat_idx]\n        datadict[company][time][feat] = column\n        \n# print('Dict population complete. Sample below:')\n# print(\"\\nData for company 1, time 1:\")\n# print(datadict[1][1])\n\n# print(\"\\nDistress history for company 1:\")\n# print(distress_dict[1])\n\nprint('We can encode categorical feature 80 as a one-hot vector with this many dimensions:')\nprint(len(list(set(f80))))\n\nlabel_binarizer = LabelBinarizer()\nlabel_binarizer.fit(range(max(f80)))\nf80_oh = label_binarizer.transform(f80)\n\n# print(f80_oh[0:5])","ac4852df":"# Make new features as np array. We'll even add x80 back!\n\ndef rolling_operation(time, train_array, datadict, distress_dict, feature_names, total_n,\n                         lookback_periods):\n\n    for company in range(1, total_n+1):\n            \n            all_periods_exist = True\n            for j in range(0, lookback_periods):\n                if not time-j in distress_dict[company]:\n                    all_periods_exist = False\n            if not all_periods_exist:\n                continue\n            \n            distress_at_eop = distress_dict[company][time]\n            new_row = [company]\n\n            for feature in feature_names:\n                if feature == 'x80':\n                    continue\n                feat_sum = 0.0\n                variance_arr = []\n                for j in range(0, lookback_periods):\n                    feat_sum += datadict[company][time-j][feature]\n                    variance_arr.append(datadict[company][time-j][feature])\n                new_row.append(feat_sum)\n                new_row.append(np.var(variance_arr))\n                \n            for j in range(0,len(f80_oh[0])):\n                new_row.append(f80_oh[company-1][j])\n\n            if len(new_row) == ((len(feature_names)-1)*2 + 1 + len(f80_oh[0])) : # we have a complete row\n                new_row.append(distress_at_eop)\n                new_row_np = np.asarray(new_row)\n                train_array.append(new_row_np)\n    \n\ndef custom_timeseries_cv(datadict, distress_dict, feature_names, total_n, val_time, test_time, \n                         lookback_periods, total_periods=14):\n\n    # Train data\n    train_array = []\n    for _t in range(1, val_time+1):\n        time = (val_time+1) -_t # Start from time period 10 and work backwards\n        train_array_np = rolling_operation(time, train_array, datadict, distress_dict, feature_names, total_n,\n                         lookback_periods)\n\n    train_array_np = np.asarray(train_array)\n    print(train_array_np.shape)\n    # print(train_array_np[0])\n    \n    # Val data\n    if val_time != test_time:\n        val_array = []\n        for time in range(val_time+1, test_time+1):\n            val_array_np = rolling_operation(time, val_array, datadict, distress_dict, feature_names, total_n,\n                         lookback_periods)\n\n        val_array_np = np.asarray(val_array)\n        print(val_array_np.shape)\n        # print(val_array_np[0])\n    else:\n        val_array_np = None\n\n    # Test data\n    test_array = []\n    # start from time period 11 and work forwards\n    for time in range(test_time+1,total_periods+1):\n        test_array_np = rolling_operation(time, test_array, datadict, distress_dict, feature_names, total_n,\n                         lookback_periods)\n\n    test_array_np = np.asarray(test_array)\n    print(test_array_np.shape)\n    # print(test_array_np[0])\n    \n    return train_array_np, val_array_np, test_array_np\n\n# Generate our sets\ntrain_array_np, val_array_np, test_array_np = custom_timeseries_cv(datadict, distress_dict, feature_names, total_n,\n                                                     val_time=9, test_time=12, lookback_periods=3, total_periods=14)","e4ed58d8":"X_train = train_array_np[:,0:train_array_np.shape[1]-1]\ny_train = train_array_np[:,-1].astype(int)\n\nX_val = val_array_np[:,0:val_array_np.shape[1]-1]\ny_val = val_array_np[:,-1].astype(int)\n\nX_test = test_array_np[:,0:test_array_np.shape[1]-1]\ny_test = test_array_np[:,-1].astype(int)\n\nnp.set_printoptions(threshold=sys.maxsize)\nprint(X_train[0,:])\nprint(y_train)\n\nprint(X_val[0,:])\nprint(y_val)\n\nprint(X_test[0,:])\nprint(y_test)","1c3e9f4e":"# Try a couple of different basic classification models\n\nfrom sklearn.linear_model import Ridge, LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef model_trial(model_type, hyperparam):\n    if model_type in ['logistic-regression']:\n        # Logistic Regression. Try 11, l2 penalty, understand one-vs-rest vs multinomial (cross-entropy) \n        model = LogisticRegression(penalty=hyperparam, solver='saga', max_iter=4000)\n    elif model_type in ['decision-tree']:\n        model = DecisionTreeClassifier(criterion='entropy', splitter='best', max_depth=None)\n    elif model_type in ['random-forest']:\n        model = RandomForestClassifier(n_estimators=hyperparam)\n    else:\n        print(\"Warning: model {} not recognized.\".format(model_type))\n        \n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_val)\n\n    f1 = f1_score(y_val, y_pred)\n    recall = recall_score(y_val, y_pred)\n    print(\"Mean acc: %f\" % model.score(X_val, y_val))\n    print(\"F1: %f\" % f1)\n    print(\"Recall: %f\" % recall)","dc9d0eb3":"print(\"-\"*20 + \"Logistic regression, l1:\" + \"-\"*20)\nmodel_trial('logistic-regression', 'l1')\n\nprint(\"-\"*20 + \"Logistic regression, l2:\" + \"-\"*20)\nmodel_trial('logistic-regression', 'l2')\n\nprint(\"-\"*20 + \"Decision tree:\" + \"-\"*20)\nmodel_trial('decision-tree', None)\n\nfor i in [2, 4, 10, 50, 100, 1000]:\n    print(\"-\"*20 + \"Random forest, {} estimators:\".format(i) + \"-\"*20)\n    model_trial('random-forest', i)\n","ae587092":"We notice a bit of a decline, then uptick in the histogram around time period 10.\n\nDeclines imply that a company dies out of the dataset, so if we set our cut around t=10, we should still get a decent number of distress events in the training data.","9a022049":"# Pull out last column as labels\n\n","4b705038":"# Does distress occur uniformly over time periods?","cc430865":"# Intro\n\nThis dataset is from https:\/\/www.kaggle.com\/shebrahimi\/financial-distress.\n\nThe goal is to predict whether a currently healthy company will become distressed, before it becomes distressed.\n\nWe'll use **F-1 score** as our main evaluation metric to deal with the unbalanced set. \n\nWe'll pay particular attention to **recall** (of all companies that truly do become distressed, how often can we predict their distress before they become distressed?). \n\nWe can imagine that if this model were being used to guide investment choices or loans, it would be much more costly to accidentally classify a bad company as a good one (false negative - make a type II error) than to miss out on a good company because we falsely thought it was distress-prone.\n\nNote that this desire to avoid type II errors (with regards to being afraid of failing to identify \"badness\") is characteristic of many processes (companies that hire elite talent, universities with high admissions standards, highly-regarded VC firms).","eaee10a1":"# ...roll-forward cross validation\n\nWe'll now output a new set of features per training row: sum over each feature during time t, t-1, t-2...t-n. Note that this differs from the average by a constant, so while these features may represent something that shouldn't be summed (like average \"Google maps rating\" - I don't know), it'll just get normalized out later.\n\nThe training targets will be whether or not a distress event occured at the end of the period (t).","72c26a54":"# Now try some models! Just the super basic, intro on Udacity stuff. :)","cec35585":"Hm. Features x1, x7, and x81 look a little funny in terms of their maxes being much higher than their 99th percentile. If we knew what these features were we could have a decent interpretation, but unfortunately we do not.","ae063e42":"# We know feature 80 is categorical...\n...so let's pull it out as a list for use later.","c4119e52":"# Quick validity checks\n\nGet number of unique companies.\n\nCheck how many of these companies ever reach a distressed state (should be 136 by Kaggle description).\n\nGet a list of feature names.","db84d61e":"# Temporal cross validation: how to do it?\n\nLet's follow the guidance set out in https:\/\/github.com\/dssg\/hitchhikers-guide\/blob\/master\/curriculum\/3_modeling_and_machine_learning\/temporal-cross-validation\/temporal_cross_validation_slides.pdf.\n\nIn order to pick a good date to separate train\/test, we should ideally pick a date that allows most entities to appear in both the train and test data.\n\nUnfortunately not all the companies live for the same amount of time, so if we pick a date that is too early or late, we may cut many of the companies out of the test set.\n\nLet's generate a histogram of counts for each time period so we can pick a reasonable place to cut.","23d969ec":"The Kaggle description tells us that if the number in the **financal_distress** column < -0.5, the company should be considered distressed. \n\nWe can imagine that this might be a financial ratio of some sort - ratio of income to capital or something.","27da402d":"# Data generation","30a5177b":"Interesting...the frequency of distress definitely does not seem to be uniform across the time periods. \n\nThat indicates that it may be bad science to obtain validation or test sets by simply picking out some companies, as we cannot assume that different companies are independent. The timestamp itself may be a useful signal (i.e. if a certain time period represents a macroeconomic state of decline for a certain industry, or the economy as a whole). Ok then, onto...","31cf3b7a":"# Loading Data\n\nI've loaded this into my local PostgreSQL db, but this can easily be replaced with a load from the csv file."}}