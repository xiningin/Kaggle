{"cell_type":{"f94e0262":"code","e373d9c4":"code","d9012a4d":"code","7e047859":"code","53c7d68d":"code","57a9d2fa":"code","01598d89":"code","7d0426c0":"code","55a6fb83":"code","73a49566":"code","08258ddc":"code","8f74fb9b":"code","93f53265":"code","9868fd2e":"markdown"},"source":{"f94e0262":"# Import dependencies\n\nimport io\nimport os\nimport numpy as np\nimport pandas as pd\nimport json\nimport csv\n# import matplotlib.pyplot as plt\npd.set_option('display.max_rows', 1000)","e373d9c4":"# Import COVID-19 dataset from CSSE at Johns Hopkins University Github\nconfirmed = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\")\nrecovered = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\")\ndeaths = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\")\n\n\n# Fetch the column names of the dataset for each categories\ncols_confirmed = [col for col in confirmed.columns]\ncols_recovered = [col for col in recovered.columns]\ncols_deaths = [col for col in deaths.columns]","d9012a4d":"# Initialize empty DataFrame so that we can assign\/prepare subset columns we need\ninitial_columns = ['country']\ncountry_lat_lng = pd.DataFrame(columns=initial_columns)\nconfirmed_temp = pd.DataFrame(columns=initial_columns)\nrecovered_temp = pd.DataFrame(columns=initial_columns)\ndeaths_temp = pd.DataFrame(columns=initial_columns)","7e047859":"## Country with Latitude and Longitude\n\ncountry_lat_lng['country'] = confirmed[cols_confirmed[1]]\ncountry_lat_lng['latitude'] = confirmed[cols_confirmed[2]]  \ncountry_lat_lng['longitude'] = confirmed[cols_confirmed[3]] \n\n# Group by country for \"Country\"\n# We need to do this since we are only selecting the \"Country\" totals\n\ncountry_lat_lng.drop_duplicates(subset =\"country\", keep = 'last', inplace = True) \n","53c7d68d":"## CONFIRMED CASES\n\n# Fetch the necessary data column from the original \"confirmed\" dataset\nconfirmed_temp[\"country\"] = confirmed['Country\/Region']\n\n\n# Confirmed data => total cases, past 24 hours, 7 days, and 30 days\nconfirmed_temp[\"total_confirmed\"] = confirmed[cols_confirmed[-1]]\nconfirmed_temp[\"c_last_24hours\"] = confirmed[cols_confirmed[-1]] - confirmed[cols_confirmed[-2]]\nconfirmed_temp[\"c_last_7days\"] = confirmed[cols_confirmed[-1]] - confirmed[cols_confirmed[-7]]\nconfirmed_temp[\"c_last_30days\"] = confirmed[cols_confirmed[-1]] - confirmed[cols_confirmed[-30]]\n\n# Group by country for \"Country\"\n# We need to do this since we are only selecting the \"Country\" totals\nconfirmed_unique_country = confirmed_temp.groupby('country')['total_confirmed','c_last_24hours','c_last_7days','c_last_30days'].agg('sum')","57a9d2fa":"## RECOVERED CASES\n\n# Fetch the necessary data column from the original \"confirmed\" dataset\nrecovered_temp[\"country\"] = recovered['Country\/Region']\n\n# Confirmed data => total cases, past 24 hours, 7 days, and 30 days\nrecovered_temp[\"total_recovered\"] = recovered[cols_recovered[-1]]\nrecovered_temp[\"r_last_24hours\"] = recovered[cols_recovered[-1]] - recovered[cols_recovered[-2]]\nrecovered_temp[\"r_last_7days\"] = recovered[cols_recovered[-1]] - recovered[cols_recovered[-7]]\nrecovered_temp[\"r_last_30days\"] = recovered[cols_recovered[-1]] - recovered[cols_recovered[-30]]\n\n# Group by country for \"Country\"\n# We need to do this since we are only selecting the \"Country\" totals\nrecovered_unique_country = recovered_temp.groupby('country')['total_recovered','r_last_24hours','r_last_7days','r_last_30days'].agg('sum')","01598d89":"## DEATHS CASES\n\n# Fetch the necessary data column from the original \"confirmed\" dataset\ndeaths_temp[\"country\"] = deaths['Country\/Region']\n\n# Confirmed data => total cases, past 24 hours, 7 days, and 30 days\ndeaths_temp[\"total_deaths\"] = deaths[cols_deaths[-1]]\ndeaths_temp[\"d_last_24hours\"] = deaths[cols_deaths[-1]] - deaths[cols_deaths[-2]]\ndeaths_temp[\"d_last_7days\"] = deaths[cols_deaths[-1]] - deaths[cols_deaths[-7]]\ndeaths_temp[\"d_last_30days\"] = deaths[cols_deaths[-1]] - deaths[cols_deaths[-30]]\n\n# Group by country for \"Country\"\n# We need to do this since we are only selecting the \"Country\" totals\ndeaths_unique_country = deaths_temp.groupby('country')['total_deaths','d_last_24hours','d_last_7days','d_last_30days'].agg('sum')","7d0426c0":"## MERGE all frames by country name\n\n# c_r for confirmed and recovered\nc_r = pd.merge(confirmed_unique_country, recovered_unique_country, on='country')\n\n# c_r_d for confirmed, recovered, and deaths\nc_r_d = pd.merge(c_r, deaths_unique_country, on='country')\n\n\n# all_summary for country, latitude, longitude, confirmed, recovered, and deaths data\nall_summary = pd.merge(country_lat_lng, c_r_d,  on='country')","55a6fb83":"\n# Fetch the \"all_summary\" column names\n[col for col in all_summary.columns]\n","73a49566":"all_summary.info()","08258ddc":"# Save the \"all_summary\" data into a file named \"all_summary_final.csv\"\n\nall_summary.to_csv(\"all_summary_final.csv\", index=False)\n\n","8f74fb9b":"# Read the \"all_summary_final.csv\" file to create a JSON object\n\nwith open('all_summary_final.csv') as csv_file:\n    read_csv = csv.reader(csv_file, delimiter = ',')\n    first_line = True\n    all_summary_json = []\n    for row in read_csv:\n        if not first_line:\n            all_summary_json.append({\n            \"country\" : str(row[0]),\n            \"latitude\" : float(row[1]),\n            \"longitude\" : float(row[2]),\n            \"total_confirmed\" : float(row[3]),\n            \"c_last_24hours\" : float(row[4]),\n            \"c_last_7days\" : float(row[5]),\n            \"c_last_30days\" : float(row[6]),\n            \"total_recovered\" : float(row[7]),\n            \"r_last_24hours\" : float(row[8]),\n            \"r_last_7days\" : float(row[9]),\n            \"r_last_30days\" : float(row[10]),\n            \"total_deaths\" : float(row[11]),\n            \"d_last_24hours\" : float(row[12]),\n            \"d_last_7days\" : float(row[13]),\n            \"d_last_30days\" : float(row[14])\n            })\n        else:\n            first_line = False\n    \n","93f53265":"# View the JSON object\n\nall_summary_json","9868fd2e":"That's all! \n\nThanks for going over it. Please let me know if the code could be further improved via a discussion post."}}