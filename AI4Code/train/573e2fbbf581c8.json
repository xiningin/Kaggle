{"cell_type":{"172aafc4":"code","2225f4e5":"code","22f2f65a":"code","b2c84c03":"code","1bdafb17":"code","c66fc918":"code","1aa083f9":"code","b171ff90":"code","2cd9f934":"code","13e7fc66":"code","0b31a420":"code","761a5d67":"code","285ff0f9":"code","2435770e":"code","00ba2146":"code","ddf70a1e":"code","6c14d3bf":"code","3511c3e1":"code","28056ca0":"code","cac1961f":"code","5e52bd5e":"code","fd7271d0":"code","33a70174":"code","99ece625":"code","d76a6a59":"code","d791ce69":"code","14c707c4":"code","87380de1":"code","9dcc5519":"code","ddad4f15":"code","8d933317":"code","163e9d8a":"code","17f2f6a3":"code","fa06bf45":"code","024eb3fd":"code","35d614fe":"code","61543b1f":"code","3ac31579":"code","bba836fe":"code","74304a97":"code","e69b4aea":"code","f49af6e3":"code","c57519a0":"code","2d52fe96":"code","86a40945":"code","dad9194e":"code","264dbfbf":"code","cb876b0e":"code","8d92c2d4":"code","209a9d53":"code","018816a2":"code","e101564b":"code","5c6a49b3":"code","b590f6ea":"code","74fd2496":"code","97fdd281":"code","bb5d5192":"code","14447801":"code","ec1a0da3":"code","2733ccec":"code","3670305e":"markdown","cac9bb1e":"markdown","dd6bfff7":"markdown","5402eb9b":"markdown","3c3c04ff":"markdown","9c3cb220":"markdown","014c26d0":"markdown","37f68d69":"markdown","7ebc6a3c":"markdown","659edbb6":"markdown","b9fceadf":"markdown","01f6330d":"markdown","c23898b7":"markdown","38f7c67c":"markdown","fce934b8":"markdown","f8493ca1":"markdown","c16c2702":"markdown","491842c4":"markdown","07218139":"markdown","a0f54040":"markdown","8a7333a8":"markdown","c0f8ba34":"markdown","3b64a45c":"markdown","2dc24179":"markdown","49e5beed":"markdown","56795e2d":"markdown","95d3ba3e":"markdown","420395e2":"markdown","e39ec1aa":"markdown"},"source":{"172aafc4":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np","2225f4e5":"data = pd.read_csv('..\/input\/who-suicide-statistics\/who_suicide_statistics.csv')","22f2f65a":"data.head()","b2c84c03":"# Checking for the total data points\ndata.shape","1bdafb17":"data.describe()","c66fc918":"# Checking for any null values \ndata.isnull().sum()","1aa083f9":"data = data.sort_values(['year'],ascending=True)\ndata.head()","b171ff90":"print(\"Number of unique countries :\" , data['country'].nunique())","2cd9f934":"# Checking for the total data points\n# after dropping the null rows \ndata.dropna(inplace = True)\ndata.isnull().sum()","13e7fc66":"data.head()","0b31a420":"data[['country','suicides_no']].groupby(['country']).agg('sum').sort_values(by='suicides_no',ascending=False).head(10)","761a5d67":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nplt.rcParams['figure.figsize'] = (15, 10)\n\nxval = pd.DataFrame(data.groupby(['country'])['suicides_no'].sum().reset_index())\nxval.sort_values(by = ['suicides_no'], ascending = False, inplace = True)\n\nsns.barplot(xval['country'].head(10),y = xval['suicides_no'].head(10), data= xval, palette = 'winter')\nplt.title('Top 10 Countries with maximum number of suicides ', fontsize = 19)\nplt.xlabel('Name of the Country')\nplt.xticks(rotation = 90)\nplt.ylabel('Count ( unit = 1e6 )')\nplt.rcParams['font.size'] = 19\nplt.show()","285ff0f9":"data[['country','suicides_no']].groupby(['country']).agg('sum').sort_values(by='suicides_no',ascending=True).head(10)","2435770e":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nplt.rcParams['figure.figsize'] = (20, 10)\n\nxval = pd.DataFrame(data.groupby(['country'])['suicides_no'].sum().reset_index())\nxval.sort_values(by = ['suicides_no'], ascending = True, inplace = True)\n\nsns.barplot(xval['country'].head(10),y = xval['suicides_no'].head(10), data= xval, palette = 'winter')\nplt.title('Top 10 Countries with maximum number of suicides ', fontsize = 19)\nplt.xlabel('Name of the Country')\nplt.xticks(rotation = 90)\nplt.ylabel('Count')\nplt.rcParams['font.size'] = 19\nplt.show()","00ba2146":"xvals = data[['year','suicides_no']].groupby('year').agg('sum').sort_values(by='suicides_no',ascending=False)\nxvals.head(10)","ddf70a1e":"data[['population','suicides_no','year']].groupby('year').agg('sum').sort_values(by='suicides_no',ascending=False).head(10)","6c14d3bf":"corr= data['suicides_no'].corr(data['population'])\nprint(\"Correlation between the number of suicides and population is :\",corr)","3511c3e1":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nplt.rcParams['figure.figsize'] = (15, 9)\n\nxvals = pd.DataFrame(data.groupby(['year'])['suicides_no'].sum().reset_index())\nxvals.sort_values(by = ['suicides_no'], ascending = False , inplace = True)\n\nsns.barplot(x = \"year\", y = \"suicides_no\", data= xvals.head(10), palette = 'winter')\nplt.title('Top 10 years having the most suicides', fontsize = 20)\nplt.xlabel('Year')\nplt.rcParams['font.size'] = 19\nplt.xticks(rotation = 45)\nplt.ylabel('Count')\nplt.show()","28056ca0":"data[['age','suicides_no']].groupby('age').agg('sum').sort_values(by='suicides_no',ascending=False)","cac1961f":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\n\nx = pd.DataFrame(data.groupby(['age'])['suicides_no'].sum().reset_index())\nx.sort_values(by = ['suicides_no'], ascending = False , inplace = True)\n\nsns.barplot(x['age'].head(10), y = x['suicides_no'].head(10), data= x, palette = 'winter')\nplt.title('Top age groups with highest number Suicides', fontsize = 20)\nplt.xlabel('age group')\nplt.xticks(rotation = 45)\nplt.ylabel('Count')\nplt.show()","5e52bd5e":"data[['sex','suicides_no']].groupby('sex').agg('sum').sort_values(by='suicides_no')","fd7271d0":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nplt.rcParams['figure.figsize'] = (9,5)\n\ncolor = plt.cm.winter(np.linspace(0, 10, 100))\nx = pd.DataFrame(data.groupby(['sex'])['suicides_no'].sum().reset_index())\nx.sort_values(by = ['suicides_no'], ascending = False , inplace = True)\n\n# sns.pieplot(x['sex'], y = x['suicides_no'], data= x, palette = 'winter')\nx.plot.pie(y ='suicides_no')\nplt.title('Sex vise division', fontsize = 20)\nplt.xlabel('Sex')\nplt.ylabel('Count (unit = 1e6)')\nplt.show()","33a70174":"bm_df = data.copy()","99ece625":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()\nbm_df['sex'] = LE.fit_transform(bm_df['sex'])\nbm_df['age'] = LE.fit_transform(bm_df['age'])\nbm_df['country'] = LE.fit_transform(bm_df['country'])\ndata['sex'] = LE.fit_transform(data['sex'])","d76a6a59":"bm_df.head()","d791ce69":"bm_df.shape","14c707c4":"# correlation betwwen the features\nplt.style.use('seaborn-dark')\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ncorrmat = bm_df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\nsns.heatmap(bm_df[top_corr_features].corr() ,annot=True,cmap=\"RdYlGn\")\nplt.show()","87380de1":"data = pd.get_dummies(data,drop_first = True)","9dcc5519":"data.head()","ddad4f15":"data.shape","8d933317":"X= data.drop(['suicides_no'],axis=1)\ny= data['suicides_no']\n\nbm_X= bm_df.drop(['suicides_no','country'],axis=1)\nbm_y= bm_df['suicides_no']","163e9d8a":"nplace = True# splitting into train_test_split\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 45)\nbm_x_train, bm_x_test, bm_y_train, bm_y_test = train_test_split(bm_X, bm_y, test_size = 0.2, random_state = 45)\n\nprint(\"Shapes of train data :\")\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n\nprint(\"Shapes of benchmark data :\")\nprint(bm_x_train.shape)\nprint(bm_x_test.shape)\nprint(bm_y_train.shape)\nprint(bm_y_test.shape)","17f2f6a3":"from sklearn.preprocessing import MinMaxScaler\n\n# creating a scaler\nmm = MinMaxScaler()\n\n# scaling the independent variables\nx_train = mm.fit_transform(x_train)\nx_test = mm.transform(x_test)\n\nbm_x_train = mm.fit_transform(bm_x_train)\nbm_x_test = mm.transform(bm_x_test)\n\nX = mm.fit_transform(X)","fa06bf45":"results = pd.DataFrame(columns = [\"model_name\",\"MSE\",\"RMSE\",\"r2_score\"])\n\nbm_results = pd.DataFrame(columns = [\"model_name\",\"MSE\",\"RMSE\",\"r2_score\"])","024eb3fd":"from sklearn.experimental import enable_hist_gradient_boosting\n\nfrom sklearn.linear_model import LinearRegression, Lasso, ElasticNet, SGDRegressor, Ridge\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor,HistGradientBoostingRegressor,BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.metrics import r2_score","35d614fe":"# creating the model\nmodel = DecisionTreeRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(bm_x_train, bm_y_train)\n\n# predicting the test set results\ny_pred = model.predict(bm_x_test)\n\n# calculating the mean squared error\nmse = np.mean((bm_y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(bm_y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nbm_results = bm_results.append({\"model_name\" : \"Desicion Tree Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","61543b1f":"# creating the model\nmodel = LinearRegression()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Linear Regression\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","3ac31579":"# creating the model\nmodel = Lasso()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Losso\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","bba836fe":"# creating the model\nmodel = ElasticNet()\nprint(\"Model :\",model)\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Elastic Net\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","74304a97":"# creating the model\nmodel = SGDRegressor() \nprint(\"Model :\",model)\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"SGD Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","e69b4aea":"# creating the model\nmodel = Ridge()\nprint(\"Model :\",model)\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Ridge\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","f49af6e3":"# creating the model\nmodel = RandomForestRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Random Forest Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","c57519a0":"# creating the model\nmodel = AdaBoostRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Ada Boost Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","2d52fe96":"# creating the model\nmodel = GradientBoostingRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Gradient Boosting Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","86a40945":"# creating the model\nmodel = ExtraTreesRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n\ny_pred = model.predict(x_test)\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Extra Trees Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","dad9194e":"# creating the model\nmodel = HistGradientBoostingRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Histogram Gradient Boosting Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","264dbfbf":"# creating the model\nmodel = BaggingRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Bagging Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","cb876b0e":"# creating the model\nmodel = DecisionTreeRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"Desicion Tree Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","8d92c2d4":"# creating the model\nmodel = XGBRegressor()\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n\nresults = results.append({\"model_name\" : \"XGBoost Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","209a9d53":"results.head(20)","018816a2":"results.sort_values(by='r2_score',ascending=False)","e101564b":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nsns.barplot(x = \"model_name\", y = \"MSE\" , data = results.sort_values(by = \"MSE\", ascending = True), palette = 'winter')\nplt.title('Comparison of MSE values of different models(Lower the better)', fontsize = 20)\nplt.xlabel('Name of Models')\nplt.xticks(rotation = 90)\nplt.ylabel('Count')\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.rcParams['font.size'] = 19\nplt.show()","5c6a49b3":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nsns.barplot(x = \"model_name\", y = \"RMSE\" , data = results.sort_values(by = \"RMSE\", ascending = True), palette = 'winter')\nplt.title('Comparison of RMSE values of different models.(Lower the better)', fontsize = 20)\nplt.xlabel('Name of Models')\nplt.xticks(rotation = 90)\nplt.ylabel('Count')\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.show()","b590f6ea":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nsns.barplot(x = \"model_name\", y = \"r2_score\" , data = results.sort_values(by = \"r2_score\", ascending = False), palette = 'winter')\nplt.title('Comparison of R2 score of models.(Higher the better)', fontsize = 20)\nplt.xlabel('Name of Models')\nplt.xticks(rotation = 90)\nplt.ylabel('Count')\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.show()","74fd2496":"# creating the model\nmodel = ExtraTreesRegressor(n_estimators = 115, n_jobs = 10)\nprint(\"Model :\",model)\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)","97fdd281":"bm_results = bm_results.append({\"model_name\" : \"Tuned Extra Trees Regressor\",\"MSE\":mse,\"RMSE\":rmse,\"r2_score\":r2},ignore_index=True)","bb5d5192":"bm_results.head()","14447801":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nsns.barplot(x = \"model_name\", y = \"MSE\" , data = bm_results.sort_values(by = \"MSE\", ascending = True), palette = 'winter')\nplt.title('Comparison of MSE values of the 2 models (Lower the better)', fontsize = 20)\nplt.xlabel('Name of Models')\nplt.ylabel('Count')\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.rcParams['font.size'] = 19\nplt.show()","ec1a0da3":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nsns.barplot(x = \"model_name\", y = \"RMSE\" , data = bm_results.sort_values(by = \"RMSE\", ascending = True), palette = 'winter')\nplt.title('Comparison of RMSE values of the 2 models (Lower the better)', fontsize = 20)\nplt.xlabel('Name of Models')\nplt.ylabel('Count')\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.rcParams['font.size'] = 19\nplt.show()","2733ccec":"plt.style.use('seaborn-dark')\nplt.style.use('dark_background')\nsns.barplot(x = \"model_name\", y = \"r2_score\" , data = bm_results.sort_values(by = \"r2_score\", ascending = True), palette = 'winter')\nplt.title('Comparison of R2 score values of the 2 models (Higher the better)', fontsize = 20)\nplt.xlabel('Name of Models')\nplt.ylabel('Count')\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.rcParams['font.size'] = 19\nplt.show()","3670305e":"## Creating and training the above imported model\n### The models created in order are :\n- Linear Regression\n- Losso\n- Elastic Net\n- SGD Regressor\n- Ridge\n- Random Forest Regressor\n- Ada Boost Regressor\n- Gradient Boosting Regressor\n- Extra Trees Regressor\n- Histogram Gradient Boosting Regressor\n- BaggingRegressor\n- Decision Tree Regressor\n- XGBoost Regressor","cac9bb1e":"### Lets look at these 10 countries graphically","dd6bfff7":"### Loading all the necessary libraries","5402eb9b":"### Finding the number of unique countries in the dataset","3c3c04ff":"### [Reading the CSV file](\/edit\/who_suicide_statistics.csv)","9c3cb220":"### Top 10 years with most number of Suicides in 141 countries","014c26d0":"## Using pd.get_dummies to encode the country column in the data and using\n```python\ndrop_first = True\n```\n## to avoid dummy variable trap.","37f68d69":"## Importing all the models that I will be using for the comparison","7ebc6a3c":"### Looking at the above data graphically\n","659edbb6":"### Lets see the top 10 countries with minimum suicides over the years","b9fceadf":"### Copying the dataframe so that it can be used for the benchmark model.","01f6330d":"## Lets use the label encoder to :\n- To encode to column sex and the column age to plot coorelation headtmap.","c23898b7":"## According to the results we can see that Extra Trees Regressor Performs the best. Now lets try to finetune the hyperparameters","38f7c67c":"### Total population of countries having the most suicides","fce934b8":"### Looking at the number of suicides with respect to gender","f8493ca1":"## Plotting the Coorelation Heatmap","c16c2702":"### Finding the correlation coefficient between total suicides and total population","491842c4":"### Lets see the age groups having the most suicides","07218139":"### Graphically representing the top 10 years having the most suicides","a0f54040":"## Sorting the dataframe in ascending order according to year","8a7333a8":"## Creating a results dataframe which will allow us to compare the results after all the model are trained and evaluated","c0f8ba34":"### Lets see the top 10 countries having the most suicides over the years","3b64a45c":"## Standardizing the data by performing scaling","2dc24179":"### Since we have a large dataset, we can drop the rows which have null values for suicide_no and population colums","49e5beed":"### Lets look at the above numbers graphically","56795e2d":"## Splitting the independant variables into test and train","95d3ba3e":"## Spliting the data into independant vatiables.","420395e2":"### Lets look at these 10 countries graphically","e39ec1aa":"### Creating the benchmark model first.\n"}}