{"cell_type":{"0b3ed984":"code","1d76c8da":"code","138d0ddd":"code","68d8c912":"code","33e9327d":"code","faacc2fe":"code","887c4e37":"code","f2841a13":"markdown","c2d3fc3b":"markdown","f60c7623":"markdown","48238fb1":"markdown","0dfc4343":"markdown","89afa33c":"markdown"},"source":{"0b3ed984":"# importing the pyplot\nimport matplotlib.pyplot as plt","1d76c8da":"plt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show()\n# You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. \n#If you provide a single list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically generates the x values for you. Since python ranges start with 0, the default x vector has the same length as y but starts with 0. Hence the x data are [0,1,2,3].\n","138d0ddd":"# plot() is a versatile command, and will take an arbitrary number of arguments. For example, to plot x versus y, you can issue the command:\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])","68d8c912":"# For every x, y pair of arguments, there is an optional third argument which is the format string that indicates the color and line type of the plot. The letters and symbols of the format string are from MATLAB, and you concatenate a color string with a line style string. \n# The default format string is 'b-', which is a solid blue line. \n# For example, to plot the above with red circles, you would issue.\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')\nplt.axis([0, 6, 0, 20])\nplt.show()\n# The axis() command takes a list of [xmin, xmax, ymin, ymax] and specifies the viewport of the axes.\n# Other format string are 'r--' for Red Dashes; 'bs' for Blue Square; 'g^' is for Green Traingle.","33e9327d":"import numpy as np\n#x = np.array( [1, 2, 3, 4] )\n#y = np.array( [1, 4, 9, 16] )\n\n# Creating an array of range from 0 to 5 with a difference of 0.2\nx = np.arange(0., 5., 0.2)\n\n#print (type(x))\nplt.plot(x, x, 'r--', x, x**2, 'bs', x, x**3, 'g^')\nplt.show()","faacc2fe":"data = {'a': np.arange(50),\n        'c': np.random.randint(0, 50, 50),\n        'd': np.random.randn(50)}\ndata['b'] = data['a'] + 10 * np.random.randn(50)\ndata['d'] = np.abs(data['d']) * 100\n\nprint(\"Data -->\", data)\n\nplt.scatter('a', 'b', c='c', s='d', data=data)\nplt.xlabel('entry a')\nplt.ylabel('entry b')\nplt.show()","887c4e37":"names = ['group_a', 'group_b', 'group_c']\nvalues = [1, 10, 100]\n\nplt.figure(figsize=(9, 3))\n\nplt.subplot(131)\nplt.bar(names, values)\nplt.subplot(132)\nplt.scatter(names, values)\nplt.subplot(133)\nplt.plot(names, values)\nplt.suptitle('Categorical Plotting')\nplt.show()","f2841a13":"### Plotting with keyword strings\nThere are some instances where you have data in a format that lets you access particular variables with strings. For example, with numpy.recarray or pandas.DataFrame.\n\nMatplotlib allows you provide such an object with the data keyword argument. If provided, then you may generate plots with the strings corresponding to these variables.","c2d3fc3b":"### Plot Multiple sets in one Graph","f60c7623":"### Formatting the style of your plot","48238fb1":"### Plotting with categorical variables\nIt is also possible to create a plot using categorical variables. Matplotlib allows you to pass categorical variables directly to many plotting functions.","0dfc4343":"## Introduction","89afa33c":"# Matplotlib\nAn introduction to the pyplot interface"}}