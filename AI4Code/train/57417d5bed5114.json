{"cell_type":{"284ac175":"code","7d3cf20f":"code","ef58d47b":"code","7b48aefc":"code","81dfb301":"code","17cee0e8":"code","7819bef1":"code","627dabcf":"code","2c0c77d1":"code","52c72166":"markdown"},"source":{"284ac175":"from sklearn.datasets import load_digits\nimport numpy as np\nfrom matplotlib import style\nimport matplotlib.pyplot as plt\nstyle.use('fivethirtyeight')\nmnist=load_digits()","7d3cf20f":"x=np.array(mnist.images)\ny=np.array(mnist.target)\n#n=int(input(\"enter the number btw 1 to 1500>>\"))\nsome_digit=np.array(x[25])\nplt.imshow(some_digit,cmap=plt.cm.gray_r,interpolation='nearest')\nplt.axis(\"off\")\nplt.show\nprint(f\"expected output {y[25]}\")","ef58d47b":"nsamples=len(x)\nx=x.reshape((nsamples,-1))","7b48aefc":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nx_train,y_train,x_test,y_test=x[:1300],y[:1300],x[1300:],y[1300:]\nshuffle_index=np.random.permutation(1300)\nx_train,y_train=x_train[shuffle_index],y_train[shuffle_index]","81dfb301":"def nva():\n    nvb=MultinomialNB()\n    nvb.fit(x_train,y_train)\n    y_pred=nvb.predict(x_test)\n    print(confusion_matrix(y_test,y_pred))\n    print(classification_report(y_test,y_pred))\n    print(cross_val_score(nvb,x_train,y_train,cv=13).mean())\n    print(\"predicted output >>\",end=\" \")\n    print(nvb.predict(some_digit.reshape((1,-1))))","17cee0e8":"def kna():\n    knn=KNeighborsClassifier(n_neighbors=3)\n    knn.fit(x_train,y_train)\n    y_pred=knn.predict(x_test)\n    print(confusion_matrix(y_test,y_pred))\n    print(classification_report(y_test,y_pred))\n    print(cross_val_score(knn,x_train,y_train,cv=13).mean())\n    print(\"predicted output >>\",end=\" \")\n    print(knn.predict(some_digit.reshape((1,-1))))","7819bef1":"def error():\n    error_rate=[]\n    for i in range(1,10):\n         knn=KNeighborsClassifier(n_neighbors=i)\n         knn.fit(x_train,y_train)\n         y_pred=knn.predict(x_test)\n         error_rate.append(np.mean(y_pred!=y_test))\n    plt.plot(range(1,10),\n             error_rate,color='blue',\n             linestyle='dashed',\n             marker='o',\n             markersize=10,\n             markerfacecolor='red')\n    plt.xlabel(\"k value\")\n    plt.ylabel(\" error rate\")\n    plt.show()","627dabcf":"nva()\nkna()","2c0c77d1":"error()","52c72166":"MnistClassification using KNN algorithm"}}