{"cell_type":{"8e91e0ce":"code","7cfb38ef":"code","552f1433":"code","2c997b0e":"code","10c74a10":"code","9bd6a9fd":"code","4d0db4e3":"code","aa5a86c8":"code","f57a757d":"code","ebb4a20a":"code","88b56035":"code","634725f9":"code","a33584d6":"code","455db1e5":"code","79c77bdf":"code","45dd4e19":"code","099e9c18":"code","7907b9d8":"code","db4a3670":"code","05fcd6aa":"code","3dcc1602":"code","cf202934":"code","6e09005e":"code","28771fe9":"code","ac277a05":"code","bda728bb":"code","f5f4026a":"code","2f09af51":"code","e2ee3165":"code","b76fb400":"code","ac49fc4d":"code","9cb59c5d":"code","f2e576a3":"code","fcd41fde":"code","0ca208c4":"code","e31b20e0":"code","0b1b760c":"code","593a26cf":"code","19003923":"code","53cc5886":"code","8a77105c":"code","66d30aee":"code","df81cb88":"code","d63fc94e":"code","783b4362":"code","ccf434e6":"code","6a673ff9":"code","d9bde062":"code","43845f44":"markdown","3b85e959":"markdown","99599818":"markdown","bead01b2":"markdown","786a28ab":"markdown","e233670f":"markdown","cdea9e9e":"markdown","d5c33ff8":"markdown","cee257c1":"markdown","02ff89af":"markdown","265b8862":"markdown","8d397270":"markdown","2037189e":"markdown","4376c694":"markdown","de3118aa":"markdown","0f8d6a5c":"markdown","cd950b7b":"markdown"},"source":{"8e91e0ce":"# To have reproducible results\nseed = 5 \nimport numpy as np \nnp.random.seed(seed)\nimport tensorflow as tf\ntf.set_random_seed(seed)","7cfb38ef":"import json\nimport math\nimport os\n\nimport cv2\nfrom PIL import Image\n\nfrom keras import layers\nfrom keras.applications.resnet50 import ResNet50, preprocess_input\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint,EarlyStopping\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nfrom tqdm import tqdm\nprint(os.listdir('..\/input\/aptos2019-blindness-detection'))\n%matplotlib inline\n\nIMG_SIZE=256\nBATCH_SIZE = 32","552f1433":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ntest_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\n# pretrain_df=pd.read_csv('..\/input\/diabetic-retinopathy-resized\/trainLabels.csv')\n# print(train_df.shape)\n# print(test_df.shape)\n# print(pretrain_df.shape)\n# pretrain_df.head()","2c997b0e":"train_df.head()","10c74a10":"# train_df['id_code']=train_df['id_code'].apply(lambda x: x+'.png')","9bd6a9fd":"train_df['diagnosis'].value_counts()","4d0db4e3":"# pretrain_df['level'].value_counts()","aa5a86c8":"# df0=pretrain_df[pretrain_df['level']==0]\n# df1=pretrain_df[pretrain_df['level']==1]\n# df2=pretrain_df[pretrain_df['level']==2]\n# df3=pretrain_df[pretrain_df['level']==3]\n# df4=pretrain_df[pretrain_df['level']==4]\n\n# df0=df0.sample(n=1000,random_state=seed)\n# df1=df1.sample(n=1000,random_state=seed)\n# df2=df2.sample(n=1000,random_state=seed)\n# # df3=df3.sample(n=1500,replace=True,random_state=seed)\n# # df4=df4.sample(n=1500,replace=True,random_state=seed)","f57a757d":"# pre_df=pd.concat([df0,df1,df2,df3,df4],axis=0,ignore_index=True)","ebb4a20a":"# pre_df=pre_df.sample(frac=1,random_state=seed).reset_index(drop=True)","88b56035":"# pre_df['level'].value_counts().plot.bar()","634725f9":"train_df['diagnosis'].hist()\ntrain_df['diagnosis'].value_counts()","a33584d6":"# pre_df.head()","455db1e5":"def display_samples(df, columns=4, rows=3):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'id_code']\n        image_id = df.loc[i,'diagnosis']\n        img = cv2.imread(f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_path}.png')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.axis('off')\n        plt.imshow(img)\n    \n    plt.tight_layout()\n\ndisplay_samples(train_df)","79c77bdf":"# def display_samples2(df, columns=4, rows=3):\n#     fig=plt.figure(figsize=(5*columns, 4*rows))\n\n#     for i in range(columns*rows):\n#         image_path = df.loc[i,'image']\n#         image_id = df.loc[i,'level']\n#         img = cv2.imread(f'..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train\/{image_path}.jpeg')\n#         img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n#         fig.add_subplot(rows, columns, i+1)\n#         plt.title(image_id)\n#         plt.axis('off')\n#         plt.imshow(img)\n    \n#     plt.tight_layout()\n\n# display_samples2(pre_df)","45dd4e19":"def get_pad_width(im, new_shape, is_rgb=True):\n    pad_diff = new_shape - im.shape[0], new_shape - im.shape[1]\n    t, b = math.floor(pad_diff[0]\/2), math.ceil(pad_diff[0]\/2)\n    l, r = math.floor(pad_diff[1]\/2), math.ceil(pad_diff[1]\/2)\n    if is_rgb:\n        pad_width = ((t,b), (l,r), (0, 0))\n    else:\n        pad_width = ((t,b), (l,r))\n    return pad_width\n\ndef crop_image_from_gray(img,tol=7):\n    if img.ndim ==2:\n        mask = img>tol\n        return img[np.ix_(mask.any(1),mask.any(0))]\n    elif img.ndim==3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        mask = gray_img>tol\n        \n        check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0]\n        if (check_shape == 0): # image is too dark so that we crop out everything,\n            return img # return original image\n        else:\n            img1=img[:,:,0][np.ix_(mask.any(1),mask.any(0))]\n            img2=img[:,:,1][np.ix_(mask.any(1),mask.any(0))]\n            img3=img[:,:,2][np.ix_(mask.any(1),mask.any(0))]\n    #         print(img1.shape,img2.shape,img3.shape)\n            img = np.stack([img1,img2,img3],axis=-1)\n    #         print(img.shape)\n        return img\n    \ndef preprocess_image(path, sigmaX=40):\n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = crop_image_from_gray(image)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n#     image=cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0) , sigmaX) ,-4 ,128)\n        \n    return image\n\n# def preprocess_image(image_path):\n#     im = Image.open(image_path)\n#     im = im.resize((IMG_SIZE, )*2, resample=Image.LANCZOS)\n    \n#     return im\n\n","099e9c18":"# fig,ax=plt.subplots(5,5,figsize=(10,10))\n# for i in range(25):\n#     data=train_df[train_df['diagnosis']==i\/\/5].reset_index()\n#     a=np.random.randint(len(data))\n#     img_code=data['id_code'][a]\n#     img=preprocess_image_with_ben(f'..\/input\/aptos2019-blindness-detection\/train_images\/{img_code}.png')\n#     ax[i\/\/5,i%5].imshow(img)\n#     ax[i\/\/5,i%5].axis('off')\n#     ax[i\/\/5,i%5].set_title(data['diagnosis'][a])\n        \n# plt.tight_layout()\n# plt.show()","7907b9d8":"# def display_samples3(df, columns=4, rows=3):\n#     fig=plt.figure(figsize=(5*columns, 4*rows))\n\n#     for i in range(columns*rows):\n#         image_path = df.loc[i,'image']\n#         image_id = df.loc[i,'level']\n#         img = cv2.imread(f'..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train\/{image_path}.jpeg')\n#         img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n#         img=cv2.resize(img,(IMG_SIZE,IMG_SIZE))\n#         fig.add_subplot(rows, columns, i+1)\n#         plt.title(image_id)\n#         plt.axis('off')\n#         plt.imshow(img)\n    \n#     plt.tight_layout()\n\n# display_samples3(pre_df)","db4a3670":"N = train_df.shape[0]\nx_train = np.empty((N, IMG_SIZE, IMG_SIZE, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(train_df['id_code'])):\n    x_train[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_id}.png'\n    )","05fcd6aa":"# N = test_df.shape[0]\n# x_test = np.empty((N, IMG_SIZE, IMG_SIZE, 3), dtype=np.uint8)\n\n# for i, image_id in enumerate(tqdm(test_df['id_code'])):\n#     x_test[i, :, :, :] = preprocess_image_with_ben(\n#         f'..\/input\/aptos2019-blindness-detection\/test_images\/{image_id}.png'\n#     )","3dcc1602":"y_train = pd.get_dummies(train_df['diagnosis']).values\n\n\nprint(y_train.shape)\n","cf202934":"y_train_multi = np.empty(y_train.shape, dtype=y_train.dtype)\ny_train_multi[:, 4] = y_train[:, 4]\n\nfor i in range(3, -1, -1):\n    y_train_multi[:, i] = np.logical_or(y_train[:, i], y_train_multi[:, i+1])\n\nprint(\"Original y_train:\", y_train.sum(axis=0))\nprint(\"Multilabel version:\", y_train_multi.sum(axis=0))","6e09005e":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train_multi, \n    test_size=0.15, \n    random_state=2019\n)","28771fe9":"x_val=x_val\/255","ac277a05":"class MixupGenerator():\n    def __init__(self, X_train, y_train, batch_size=32, alpha=0.2, shuffle=True, datagen=None):\n        self.X_train = X_train\n        self.y_train = y_train\n        self.batch_size = batch_size\n        self.alpha = alpha\n        self.shuffle = shuffle\n        self.sample_num = len(X_train)\n        self.datagen = datagen\n\n    def __call__(self):\n        while True:\n            indexes = self.__get_exploration_order()\n            itr_num = int(len(indexes) \/\/ (self.batch_size * 2))\n\n            for i in range(itr_num):\n                batch_ids = indexes[i * self.batch_size * 2:(i + 1) * self.batch_size * 2]\n                X, y = self.__data_generation(batch_ids)\n\n                yield X, y\n\n    def __get_exploration_order(self):\n        indexes = np.arange(self.sample_num)\n\n        if self.shuffle:\n            np.random.shuffle(indexes)\n\n        return indexes\n\n    def __data_generation(self, batch_ids):\n        _, h, w, c = self.X_train.shape\n        l = np.random.beta(self.alpha, self.alpha, self.batch_size)\n        X_l = l.reshape(self.batch_size, 1, 1, 1)\n        y_l = l.reshape(self.batch_size, 1)\n\n        X1 = self.X_train[batch_ids[:self.batch_size]]\n        X2 = self.X_train[batch_ids[self.batch_size:]]\n        X = X1 * X_l + X2 * (1 - X_l)\n\n        if self.datagen:\n            for i in range(self.batch_size):\n                X[i] = self.datagen.random_transform(X[i])\n                X[i] = self.datagen.standardize(X[i])\n\n        if isinstance(self.y_train, list):\n            y = []\n\n            for y_train_ in self.y_train:\n                y1 = y_train_[batch_ids[:self.batch_size]]\n                y2 = y_train_[batch_ids[self.batch_size:]]\n                y.append(y1 * y_l + y2 * (1 - y_l))\n        else:\n            y1 = self.y_train[batch_ids[:self.batch_size]]\n            y2 = self.y_train[batch_ids[self.batch_size:]]\n            y = y1 * y_l + y2 * (1 - y_l)\n\n        return X, y","bda728bb":"# pre_df.head()","f5f4026a":"# pre_df['image']=pre_df['image'].apply(lambda x: x + '.jpeg')","2f09af51":"# pre_df['level']=pre_df['level'].astype(str)","e2ee3165":"train_df['diagnosis']=train_df['diagnosis'].astype(str)","b76fb400":"\n\ndef create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.15,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,# randomly flip images\n        rotation_range=360,\n        rescale=1.\/255\n    )\n\n# train_datagen=ImageDataGenerator(rescale=1.\/255,zoom_range=0.15,horizontal_flip=True,vertical_flip=True,validation_split=0.2,\n#                                 preprocessing_function=preprocess_input)\n# val_datagen=ImageDataGenerator(rescale=1.\/255)\n# Using original generator\n# train_gen = train_datagen.flow_from_dataframe(pre_df, directory='..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train',\n#                                                       batch_size=BATCH_SIZE,x_col='image',y_col='level',target_size=(IMG_SIZE,IMG_SIZE),\n#                                              subset='training')\n\n# val_generator=train_datagen.flow_from_dataframe(pre_df,directory='..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train',\n#                                              batch_size=BATCH_SIZE,x_col='image',y_col='level',target_size=(IMG_SIZE,IMG_SIZE),\n#                                                subset='validation')\n# Using Mixup\n# mixup_generator = MixupGenerator(x_train, y_train, batch_size=BATCH_SIZE, alpha=0.2, datagen=create_datagen())()","ac49fc4d":"data_generator = create_datagen().flow(x_train, y_train, batch_size=BATCH_SIZE, seed=2019)","9cb59c5d":"# val_labels=pd.get_dummies(train_df['diagnosis']).values\n# val_labels","f2e576a3":"# y_val=[np.argmax(val_generator[i][1],axis=1) for i in range(np.ceil(val_generator.samples\/BATCH_SIZE).astype(int))]","fcd41fde":"# y_val=np.concatenate(y_val,axis=0)","0ca208c4":"# train_df.head()","e31b20e0":"true_labels = np.array([1, 0, 1, 1, 0, 1])\npred_labels = np.array([1, 0, 0, 0, 0, 1])","0b1b760c":"accuracy_score(true_labels, pred_labels)","593a26cf":"cohen_kappa_score(true_labels, pred_labels)","19003923":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_kappas = []\n\n    def on_epoch_end(self, epoch, logs={}):\n# #         X_val, y_val =self.val_generator[0],self.val_generator[1]\n# #         y_val = y_val.sum(axis=1) - 1\n#         y_pred=self.model.predict_generator(val_generator,steps=np.ceil(val_generator.samples\/BATCH_SIZE).astype(int))\n# #         y_pred = self.model.predict(X_val) > 0.5\n# #         y_pred = y_pred.astype(int).sum(axis=1) - 1\n#         y_pred=np.argmax(y_pred,axis=1)\n\n    \n        X_val, y_val = self.validation_data[:2]\n        y_val = y_val.sum(axis=1) - 1\n        \n        y_pred = self.model.predict(X_val) > 0.5\n        y_pred = y_pred.astype(int).sum(axis=1) - 1\n        \n        _val_kappa = cohen_kappa_score(\n            y_val,\n            y_pred, \n            weights='quadratic'\n        )\n\n        self.val_kappas.append(_val_kappa)\n\n        print(f\"val_kappa: {_val_kappa:.4f}\")\n        \n        if _val_kappa == max(self.val_kappas):\n            print(\"Validation Kappa has improved. Saving model.\")\n            model.save_weights('model.h5')\n            model_json = model.to_json()\n            with open('model.json', \"w\") as json_file:\n                json_file.write(model_json)\n            json_file.close()\n\n        return","53cc5886":"densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(IMG_SIZE,IMG_SIZE,3)\n)","8a77105c":"# resnet=ResNet50(weights='..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5',\n#                include_top=False,input_shape=(IMG_SIZE,IMG_SIZE,3))","66d30aee":"def build_model():\n    model = Sequential()\n    model.add(densenet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(5, activation='sigmoid'))\n    \n#     for layer in model.layers:\n#         layer.trainable=True\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=0.00005),\n        metrics=['accuracy']\n    )\n    \n    return model","df81cb88":"model = build_model()\nmodel.summary()","d63fc94e":"kappa_metrics = Metrics()\n# filename='1500images_lr003.h5'\n# checkpoint=ModelCheckpoint(filename,monitor='val_loss',save_best_only='True')\nest=EarlyStopping(monitor='val_loss',patience=5, min_delta=0.005)\ncall_backs=[est,kappa_metrics]\n\nhistory = model.fit_generator(\n    data_generator,\n    steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n    validation_data=(x_val,y_val),\n     epochs=20,\n    callbacks=call_backs)","783b4362":"# with open('history.json', 'w') as f:\n#     json.dump(history.history, f)\n\n# history_df = pd.DataFrame(history.history)\n# history_df[['loss', 'val_loss']].plot()\n# history_df[['acc', 'val_acc']].plot()","ccf434e6":"# plt.plot(kappa_metrics.val_kappas)","6a673ff9":"# model.load_weights('model.h5')\n# # y_val_pred = model.predict(x_val)\n\n# # def compute_score_inv(threshold):\n# #     y1 = y_val_pred > threshold\n# #     y1 = y1.astype(int).sum(axis=1) - 1\n# #     y2 = y_val.sum(axis=1) - 1\n# #     score = cohen_kappa_score(y1, y2, weights='quadratic')\n    \n# #     return 1 - score\n\n# # simplex = scipy.optimize.minimize(\n# #     compute_score_inv, 0.5, method='nelder-mead'\n# # )\n\n# # best_threshold = simplex['x'][0]\n\n# # print('Best threshold is : ',best_threshold)\n\n# # print('Validation QWK score: ',(1-compute_score_inv(best_threshold)))","d9bde062":"# y_test = model.predict(x_test) > best_threshold\n# y_test = y_test.astype(int).sum(axis=1) - 1\n\n# test_df['diagnosis'] = y_test\n# test_df.to_csv('submission.csv',index=False)","43845f44":"We can construct the following table:\n\n| true | pred | agreement      |\n|------|------|----------------|\n| 1    | 1    | true positive  |\n| 0    | 0    | true negative  |\n| 1    | 0    | false negative |\n| 1    | 0    | false negative |\n| 0    | 0    | true negative  |\n| 1    | 1    | true positive  |\n\n\nThen the \"observed proportionate agreement\" is calculated exactly the same way as accuracy:\n\n$$\np_o = acc = \\frac{tp + tn}{all} = {2 + 2}{6} = 0.66\n$$\n\nThis can be confirmed using scikit-learn:","3b85e959":"### What is the weighted kappa?\n\nThe wikipedia page offer a very concise explanation: \n> The weighted kappa allows disagreements to be weighted differently and is especially useful when **codes are ordered**. Three matrices are involved, the matrix of observed scores, the matrix of expected scores based on chance agreement, and the weight matrix. Weight matrix cells located on the diagonal (upper-left to bottom-right) represent agreement and thus contain zeros. Off-diagonal cells contain weights indicating the seriousness of that disagreement.\n\nSimply put, if two scores disagree, then the penalty will depend on how far they are apart. That means that our score will be higher if (a) the real value is 4 but the model predicts a 3, and the score will be lower if (b) the model instead predicts a 0. This metric makes sense for this competition, since the labels 0-4 indicates how severe the illness is. Intuitively, a model that predicts a severe retinopathy (3) when it is in reality a proliferative retinopathy (4) is probably better than a model that predicts a mild retinopathy (1).","99599818":"This kernel is forked from **xhlulu's** kernel : https:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter\n\nThings I have added :\n*  Ben's processing on images \n*  Cropping images \n* Added EarlyStopping Callback\n* Increased Dropout ...both of these to reduce overfitting.\n\nBoth the ideas are taken from **Neuron Engineer's** kernel : https:\/\/www.kaggle.com\/ratthachat\/aptos-updatedv14-preprocessing-ben-s-cropping\n\nI thank both of them for their amazing kernels.\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Loading & Exploration<\/a>  : A quick overview of the dataset\n- <a href='#2'>Ben's,Cropping and Loading images<\/a> : Here we shall apply Ben's preprocessing, crop the images, resize and load them\n- <a href='#3'>Mixup and Generator<\/a> :  We show how to create a data generator that will perform random transformation to our datasets (flip vertically\/horizontally, rotation, zooming). This will help our model generalize better to the data, since it is fairly small (only ~3000 images). \n- <a href='#4'> Quadratic Weight Kappa<\/a>    : A thorough overview of the metric used for this competition, with an intuitive example. Check it out!\n- <a href='#5'>DenseNet121<\/a>   : We will use a DenseNet-121 pre-trained on ImageNet. We will finetune it using Adam for 15 epochs, and evaluate it on an unseen validation set.   \n- <a href='#6'>Training & Evaluation<\/a>\n\n\n### Citations & Resources\n\n* I had the idea of using mixup from [KeepLearning's ResNet50 baseline](https:\/\/www.kaggle.com\/mathormad\/aptos-resnet50-baseline). Since the implementation was in PyTorch, I instead used an [open-sourced keras implementation](https:\/\/github.com\/yu4u\/mixup-generator).\n* The transfer learning procedure is mostly inspired from my [previous kernel for iWildCam](https:\/\/www.kaggle.com\/xhlulu\/densenet-transfer-learning-iwildcam-2019). The workflow was however heavily modified since then.\n* Used similar [method as Abhishek](https:\/\/www.kaggle.com\/abhishek\/optimizer-for-quadratic-weighted-kappa) to find the optimal threshold.\n* [Lex's kernel](https:\/\/www.kaggle.com\/lextoumbourou\/blindness-detection-resnet34-ordinal-targets) prompted me to try using Multilabel instead of multiclass classification, which slightly improved the kappa score.","bead01b2":"## Find best threshold","786a28ab":"Additionally, we also need to compute `p_e`:\n\n$$p_{yes} = \\frac{tp + fp}{all} \\frac{tp + fn}{all} = \\frac{2}{6} \\frac{4}{6} = 0.222$$\n\n$$p_{no} = \\frac{fn + tn}{all} \\frac{fp + tn}{all} = \\frac{4}{6} \\frac{2}{6} = 0.222$$\n\n$$p_{e} = p_{yes} + p_{no} = 0.222 + 0.222 = 0.444$$\n\nFinally,\n\n$$\n\\kappa = \\frac{p_o - p_e}{1-p_e} = \\frac{0.666 - 0.444}{1 - 0.444} = 0.4\n$$\n\nLet's verify with scikit-learn:","e233670f":"## Submit","cdea9e9e":"# <a id='5'>Model : DenseNet121<\/a> ","d5c33ff8":"# <a id='6'>Training and Evaluation<\/a> ","cee257c1":"# <a id='2'>Ben's preprocessing and Cropping images<\/a> \n\nWe will resize the images to 224x224, then create a single numpy array to hold the data.","02ff89af":"## Creating multilabels\n\nInstead of predicting a single label, we will change our target to be a multilabel problem; i.e., if the target is a certain class, then it encompasses all the classes before it. E.g. encoding a class 4 retinopathy would usually be `[0, 0, 0, 1]`, but in our case we will predict `[1, 1, 1, 1]`. For more details, please check out [Lex's kernel](https:\/\/www.kaggle.com\/lextoumbourou\/blindness-detection-resnet34-ordinal-targets).","265b8862":"# <a id='1'>Loading and Exploration<\/a> ","8d397270":"# <a id='4'>Quadratic Weighted Kappa<\/a> \n\nQuadratic Weighted Kappa (QWK, the greek letter $\\kappa$), also known as Cohen's Kappa, is the official evaluation metric. For our kernel, we will use a custom callback to monitor the score, and plot it at the end.\n\n### What is Cohen Kappa?\n\nAccording to the [wikipedia article](https:\/\/en.wikipedia.org\/wiki\/Cohen%27s_kappa), we have\n> The definition of $\\kappa$ is:\n> $$\\kappa \\equiv \\frac{p_o - p_e}{1 - p_e}$$\n> where $p_o$ is the relative observed agreement among raters (identical to accuracy), and $p_e$ is the hypothetical probability of chance agreement, using the observed data to calculate the probabilities of each observer randomly seeing each category.\n\n### How is it computed?\n\nLet's take the example of a binary classification problem. Say we have:","2037189e":"# <a id='3'>Mixup Generator<\/a> ","4376c694":"<h1><center><font size=\"6\">APTOS Diabetic Retinopathy<\/font><\/center><\/h1>\n\n\n\n\n<img src=\"https:\/\/www.eye7.in\/wp-content\/uploads\/illustration-showing-diabetic-retinopathy.jpg\" width=\"800\"><\/img>\n\n\n\n<br>","de3118aa":"### Creating keras callback for QWK","0f8d6a5c":"Now we can split it into a training and validation set.","cd950b7b":"### Displaying some Sample Images"}}