{"cell_type":{"50249531":"code","f420785c":"code","134286c8":"code","654ac1f2":"code","f3866a20":"code","d2c37100":"code","19babc3f":"code","69809ac4":"code","aaaf2967":"code","3fa2a622":"code","6eec4ff9":"code","9ce83641":"code","bcbf9a37":"code","d46b77b7":"code","0804d124":"code","588cab53":"code","ae849c23":"code","af83a932":"code","02d6bff5":"code","7ac8cf76":"code","99d462cf":"code","982b807d":"code","079b2c6c":"code","6cd79038":"code","55026e6b":"code","f08d4bb0":"code","81692529":"code","3684a863":"code","6e928295":"code","dc7932b2":"code","edeb81a2":"code","6bb0468e":"code","18252b9d":"code","0b516b7d":"code","b6105d4a":"code","4a148b79":"code","bebcb6cd":"code","9e9380d8":"code","891d867f":"code","9cd7f0e7":"code","cafc5b7d":"code","12630f3e":"code","e0ae1519":"code","de35ebf6":"code","54648c47":"code","b945059d":"markdown","8ccce9ef":"markdown","d5fc3ec4":"markdown","b24e65bf":"markdown","ee3c3ccd":"markdown","6f607c0a":"markdown","71ebff61":"markdown","e0358ba8":"markdown"},"source":{"50249531":"from fastai.tabular import *\nfrom tqdm import tqdm_notebook as tqdm\nimport os\nprint(os.listdir(\"..\/input\"))","f420785c":"fund = pd.read_csv('..\/input\/fundamentals.csv')\n#price = pd.read_csv('..\/input\/prices.csv')\np_split = pd.read_csv('..\/input\/prices-split-adjusted.csv')\nsec = pd.read_csv('..\/input\/securities.csv')","134286c8":"fund.drop('Unnamed: 0', 1, inplace=True)\nfund.head()","654ac1f2":"# we have adjusted price, don't need this \n#price.head()","f3866a20":"p_split.head()","d2c37100":"sec.head()","19babc3f":"sec_col = ['Ticker symbol',\n 'GICS Sector',\n 'GICS Sub Industry',\n 'Date first added']\nsec = sec[sec_col]","69809ac4":"p_split = pd.merge(p_split, sec, left_on='symbol', right_on='Ticker symbol')","aaaf2967":"bin_list = ['Cash Ratio', 'Current Ratio', 'Gross Margin', \n            'Operating Margin', 'Profit Margin', 'Quick Ratio', \n            'Earnings Per Share']","3fa2a622":"for col in bin_list:\n    fund[f'{col}_bin'] = pd.qcut(fund[col], 10, labels=False)\n# pd.qcut(fund['Profit Margin'], 4, labels=False)","6eec4ff9":"fund.head()","9ce83641":"add_datepart(p_split, 'date', drop=False)","bcbf9a37":"# creating a year shift to avoid data leakage from fundamental data\nfund['For Year'].dropna(inplace=True)\n# use 2012 data in 2013\nfund['year+1'] = fund['For Year'] + 1","d46b77b7":"fund['year+1'][fund['year+1'].values==1214.0] = 2014","0804d124":"# drop na reports\nfund = fund[~fund['year+1'].isna()]\nfund['year+1'] = fund['year+1'].astype(np.int64)","588cab53":"# Using last year fundamental data for current year in price\np_split = pd.merge(p_split, fund, left_on=['symbol', 'Year'], right_on=['Ticker Symbol', 'year+1'])","ae849c23":"drop_cols = ['Ticker symbol', 'Ticker Symbol', 'Period Ending', 'For Year', 'year+1']\np_split.drop(drop_cols, 1, inplace=True)","af83a932":"p_split.head()","02d6bff5":"p_split.sort_values(['symbol', 'date'], inplace=True)","7ac8cf76":"p_split.set_index(['symbol', 'date'], inplace=True)\np_split.sort_index(inplace=True)","99d462cf":"p_split['future_close'] = p_split.groupby(['symbol'])['close'].transform(lambda x: x.shift(-1))","982b807d":"p_split.reset_index(inplace=True)","079b2c6c":"p_split.dropna(subset=['future_close'], inplace=True)","6cd79038":"p_split['future_close'] = np.log(p_split['future_close'])","55026e6b":"add_datepart(p_split, 'Date first added', prefix='first_added')","f08d4bb0":"p_split.sort_values(['date', 'symbol'], inplace=True)","81692529":"p_split['date'] = pd.to_datetime(p_split['date'])","3684a863":"# Testing data = last month of the dataset","6e928295":"mask = (p_split['date'] > '2016-12-01') & (p_split['date'] <= '2016-12-29')","dc7932b2":"train = p_split.loc[~mask]\ntest = p_split.loc[mask]","edeb81a2":"train.shape","6bb0468e":"test.shape","18252b9d":"dep_var = 'future_close'\ncat_names = ['symbol', 'GICS Sector', 'GICS Sub Industry', 'Year', 'Month', 'Week', 'Day', \n             'Dayofweek', 'Dayofyear', 'Is_month_end', 'Is_month_start', 'Is_quarter_end', \n             'Is_quarter_start', 'Is_year_end', 'Is_year_start', 'Elapsed', 'first_addedYear',\n            'Cash Ratio_bin', 'Current Ratio_bin', 'Gross Margin_bin', 'Operating Margin_bin',\n             'Profit Margin_bin', 'Quick Ratio_bin', 'Earnings Per Share_bin']\n\nnot_names = ['date', 'first_addedYear', 'first_addedMonth', 'first_addedWeek', 'first_addedDay', \n             'first_addedDayofweek', 'first_addedDayofyear', 'first_addedIs_month_end',\n             'first_addedIs_month_start', 'first_addedIs_quarter_end',\n             'first_addedIs_quarter_start', 'first_addedIs_year_end', \n             'first_addedIs_year_start', 'first_addedElapsed', 'future_close']\n\ncont_names = [col for col in p_split.columns if col not in cat_names and col not in not_names]","0b516b7d":"procs = [FillMissing, Categorify, Normalize]","b6105d4a":"data = (TabularList.from_df(train, cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           .split_by_idx(list(range(373287-436, 373287)))\n                           .label_from_df(cols=dep_var)\n                           .add_test(TabularList.from_df(test, cat_names=cat_names, cont_names=cont_names))\n                           .databunch())","4a148b79":"learn = tabular_learner(data, layers=[500,200,100], ps=0.5, emb_drop=0.04, wd=1e-1)","bebcb6cd":"learn.lr_find()","9e9380d8":"learn.recorder.plot(skip_end=2)","891d867f":"learn.fit_one_cycle(10, 1e+0\/20, pct_start=0.9)","9cd7f0e7":"learn.recorder.plot_losses(skip_start=10000)","cafc5b7d":"learn.recorder.plot_lr(True)","12630f3e":"preds, ys = learn.get_preds()","e0ae1519":"from sklearn.metrics import mean_squared_error\nmean_squared_error(ys, preds)","de35ebf6":"preds_test, _ = learn.get_preds(DatasetType.Test)","54648c47":"from sklearn.metrics import mean_squared_error\nmean_squared_error(test['future_close'], preds_test)","b945059d":"# Test set MSE","8ccce9ef":"# Import data ","d5fc3ec4":"It's been 2 years since my last notebook release, I will present a whole new model with the latest state of the art technique. With entity embedding, The model perceives the market interactively like a trader.\n\nMost of the current models are based on signal processing techniques or time series like ARIMA, LSTM or GRU, The main problem is :\n\n1. They are discarding useful fundamental information. \n2. Ignoring dates like special dates like, ex-dividend date. \n3. Only focusing on one stock instead of the whole market, which also leads to overfitting. Different industry behaves differently, we should account for the characteristics of the stocks into our model.","b24e65bf":"# Categorical data transform to entity embedding\n\nHere we do not just one hot encoded the categorical data. We create a vector space for categorical variables. This way, the data can interact with each other.\n\nFor more, please refer \nhttps:\/\/www.fast.ai\/2018\/04\/29\/categorical-embeddings\/","ee3c3ccd":"# Time split the dataset\n\nWe are using the last month as testing data, the last day as validation data.","6f607c0a":"# Data preprocessing","71ebff61":"# extra feature engineering for \"date first added\"","e0358ba8":"# Validation set MSE"}}