{"cell_type":{"6d4c0730":"code","2ffc2a8e":"code","7feaf578":"code","dd273052":"code","f8f8451d":"code","5dee93b3":"code","0466cb62":"code","9ad2f6f9":"code","fc0b4a25":"code","36b5b461":"code","a78ee807":"code","f0d8032a":"code","18e91641":"code","03de55fe":"code","3df67a2e":"code","903dbf48":"code","7295edcf":"code","4be8c9e7":"code","4d2c12ca":"code","2d9cbeb5":"code","4b86d99b":"code","a3a398ed":"code","d6103389":"code","afc9f24e":"code","120b998f":"code","ecbc602a":"code","075aae08":"code","87d8b405":"code","a46aa803":"code","f69df9e8":"code","eb893b1a":"code","3a7449c1":"code","88f3fe3b":"code","b889f6fb":"code","1ce24b90":"code","d354b0bd":"code","28e56239":"code","af2ef7a6":"code","c9c98b1b":"code","f0f07a59":"code","1c88c482":"code","5a95a9de":"code","525d2e0c":"code","598386e7":"code","ce748a80":"code","080de2c0":"code","eb3e920e":"code","3c12f3df":"markdown","4dea7643":"markdown","e31ce24c":"markdown","fab9b7c9":"markdown","f7484e27":"markdown","ba5ba88c":"markdown","731d4aa6":"markdown","21152f1c":"markdown","c29c65fa":"markdown","d8c3a3ef":"markdown","45d5126c":"markdown","ce7d02f7":"markdown","25a7b0a7":"markdown","6e96c4fa":"markdown","b2c2bc53":"markdown","9360b36e":"markdown","5952d06c":"markdown","f39e7d97":"markdown","c799f37e":"markdown","0dd64d3b":"markdown","38915fbe":"markdown","25f1ffe3":"markdown"},"source":{"6d4c0730":"# DataFrame\nimport pandas as pd\n\n# Matplot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Scikit-learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.manifold import TSNE\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout, Embedding, Flatten, Conv1D, MaxPooling1D, LSTM, Layer, Input,Reshape\nfrom keras import utils\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\n# nltk\nimport nltk\nfrom nltk.corpus import stopwords\nfrom  nltk.stem import SnowballStemmer\n\n# Word2vec\nimport gensim\n\n# Utility\nimport re\nimport numpy as np\nimport seaborn as sns\nimport os\nfrom collections import Counter\nimport logging\nimport time\nimport pickle\nimport itertools\n\n# Set log\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)","2ffc2a8e":"nltk.download('stopwords')","7feaf578":"# DATASET\nDATASET_COLUMNS = [\"target\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\nDATASET_ENCODING = \"ISO-8859-1\"\nTRAIN_SIZE = 0.8\n\n# TEXT CLENAING\nTEXT_CLEANING_RE = \"@\\S+|https?:\\S+|http?:\\S|[^A-Za-z0-9]+\"\n\n# WORD2VEC \nW2V_SIZE = 300\nW2V_WINDOW = 7\nW2V_EPOCH = 32\nW2V_MIN_COUNT = 10\n\n# KERAS\nSEQUENCE_LENGTH = 300\nEPOCHS = 10\nBATCH_SIZE = 1024\n\n# SENTIMENT\nPOSITIVE = \"POSITIVE\"\nNEGATIVE = \"NEGATIVE\"\nNEUTRAL = \"NEUTRAL\"\nSENTIMENT_THRESHOLDS = (0.4, 0.7)\n\n# EXPORT\nKERAS_MODEL = \"model.h5\"\nWORD2VEC_MODEL = \"model.w2v\"\nTOKENIZER_MODEL = \"tokenizer.pkl\"\nENCODER_MODEL = \"encoder.pkl\"","dd273052":"dataset_filename = os.listdir(\"..\/input\")[0]\ndataset_path = os.path.join(\"..\",\"input\",dataset_filename)\nprint(\"Open file:\", dataset_path)\ndf = pd.read_csv(dataset_path, encoding =DATASET_ENCODING , names=DATASET_COLUMNS)","f8f8451d":"print(\"Dataset size:\", len(df))","5dee93b3":"df.head(5)","0466cb62":"decode_map = {0: \"NEGATIVE\", 2: \"NEUTRAL\", 4: \"POSITIVE\"}\ndef decode_sentiment(label):\n    return decode_map[int(label)]","9ad2f6f9":"%%time\ndf.target = df.target.apply(lambda x: decode_sentiment(x))","fc0b4a25":"df.head()","36b5b461":"df_old = df.text.copy()","a78ee807":"target_cnt = Counter(df.target)\n\nplt.figure(figsize=(16,8))\nplt.bar(target_cnt.keys(), target_cnt.values())\nplt.title(\"Dataset labels distribuition\")","f0d8032a":"stop_words = stopwords.words(\"english\")\nstemmer = SnowballStemmer(\"english\")","18e91641":"def preprocess(text, stem=False):\n    # Remove link,user and special characters\n    text = re.sub(TEXT_CLEANING_RE, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)","03de55fe":"%%time\ndf.text = df.text.apply(lambda x: preprocess(x))","3df67a2e":"check = 12\nprint(df_old[check])\nprint(df.text[check])","903dbf48":"df_train, df_test = train_test_split(df, test_size=1-TRAIN_SIZE, random_state=42)\nprint(\"TRAIN size:\", len(df_train))\nprint(\"TEST size:\", len(df_test))","7295edcf":"%%time \ndocuments = [_text.split() for _text in df_train.text] ","4be8c9e7":"w2v_model = gensim.models.word2vec.Word2Vec(size=W2V_SIZE, \n                                            window=W2V_WINDOW, \n                                            min_count=W2V_MIN_COUNT, \n                                            workers=8)","4d2c12ca":"w2v_model.build_vocab(documents)","2d9cbeb5":"words = w2v_model.wv.vocab.keys()\nvocab_size = len(words)\nprint(\"Vocab size\", vocab_size)","4b86d99b":"%%time\nw2v_model.train(documents, total_examples=len(documents), epochs=W2V_EPOCH)","a3a398ed":"w2v_model.most_similar(\"love\")","d6103389":"%%time\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(df_train.text)\n\nvocab_size = len(tokenizer.word_index) + 1\nprint(\"Total words\", vocab_size)","afc9f24e":"%%time\nx_train = pad_sequences(tokenizer.texts_to_sequences(df_train.text), maxlen=SEQUENCE_LENGTH)\nx_test = pad_sequences(tokenizer.texts_to_sequences(df_test.text), maxlen=SEQUENCE_LENGTH)","120b998f":"labels = df_train.target.unique().tolist()\nlabels.append(NEUTRAL)\nlabels","ecbc602a":"encoder = LabelEncoder()\nencoder.fit(df_train.target.tolist())\n\ny_train = encoder.transform(df_train.target.tolist())\ny_test = encoder.transform(df_test.target.tolist())\n\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\n\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","075aae08":"print(\"x_train\", x_train.shape)\nprint(\"y_train\", y_train.shape)\nprint()\nprint(\"x_test\", x_test.shape)\nprint(\"y_test\", y_test.shape)","87d8b405":"embedding_matrix = np.zeros((vocab_size, W2V_SIZE))\nfor word, i in tokenizer.word_index.items():\n  if word in w2v_model.wv:\n    embedding_matrix[i] = w2v_model.wv[word]\nprint(embedding_matrix.shape)","a46aa803":"embedding_layer = Embedding(vocab_size, W2V_SIZE, weights=[embedding_matrix], input_length=SEQUENCE_LENGTH, trainable=False)","f69df9e8":"class attention(Layer):\n    def _init_(self,**kwargs):\n        super(attention,self)._init_(**kwargs)\n\n    def build(self,input_shape):\n        self.W=self.add_weight(name=\"att_weight\",shape=(input_shape[-1],1),initializer=\"normal\")\n        self.b=self.add_weight(name=\"att_bias\",shape=(input_shape[1],1),initializer=\"zeros\")        \n        super(attention, self).build(input_shape)\n\n    def call(self,x):\n        et=K.squeeze(K.tanh(K.dot(x,self.W)+self.b),axis=-1)\n        at=K.softmax(et)\n        at=K.expand_dims(at,axis=-1)\n        output=x*at\n        return K.sum(output,axis=1)\n\n    def compute_output_shape(self,input_shape):\n        return (input_shape[0],input_shape[-1])\n\n    def get_config(self):\n        return super(attention,self).get_config()","eb893b1a":"from keras.models import Input\nmodel = Sequential()\nmodel.add(embedding_layer)\nmodel.add(Conv1D(filters=128, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.5))\nmodel.add(attention())\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.summary()","3a7449c1":"model.compile(loss='binary_crossentropy',\n              optimizer=\"adam\",\n              metrics=['accuracy'])","88f3fe3b":"from keras.callbacks import ModelCheckpoint\ncallbacks = [ ReduceLROnPlateau(monitor='val_loss', patience=5, cooldown=0),\n              EarlyStopping(monitor='val_acc', min_delta=1e-4, patience=5),\n              ModelCheckpoint(filepath='weights.best.hdf5',save_weights_only=True,monitor='val_accuracy',mode='max',save_best_only=True)]","b889f6fb":"%%time\nhistory = model.fit(x_train, y_train,\n                    batch_size=BATCH_SIZE,\n                    epochs=EPOCHS,\n                    validation_split=0.1,\n                    verbose=1,\n                    callbacks=callbacks)","1ce24b90":"%%time\nscore = model.evaluate(x_test, y_test, batch_size=BATCH_SIZE)\nprint()\nprint(\"ACCURACY:\",score[1])\nprint(\"LOSS:\",score[0])","d354b0bd":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n \nepochs = range(len(acc))\n \nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n \nplt.figure()\n \nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n \nplt.show()","28e56239":"def decode_sentiment(score, include_neutral=True):\n    if include_neutral:        \n        label = NEUTRAL\n        if score <= SENTIMENT_THRESHOLDS[0]:\n            label = NEGATIVE\n        elif score >= SENTIMENT_THRESHOLDS[1]:\n            label = POSITIVE\n\n        return label\n    else:\n        return NEGATIVE if score < 0.5 else POSITIVE","af2ef7a6":"def predict(text, include_neutral=True):\n    start_at = time.time()\n    # Tokenize text\n    x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=SEQUENCE_LENGTH)\n    # Predict\n    score = model.predict([x_test])[0]\n    # Decode sentiment\n    label = decode_sentiment(score, include_neutral=include_neutral)\n\n    return {\"label\": label, \"score\": float(score),\n       \"elapsed_time\": time.time()-start_at}  ","c9c98b1b":"predict(\"I love the music\")","f0f07a59":"predict(\"I hate the rain\")","1c88c482":"predict(\"i don't know what i'm doing\")","5a95a9de":"%%time\ny_pred_1d = []\ny_test_1d = list(df_test.target)\nscores = model.predict(x_test, verbose=1, batch_size=8000)\ny_pred_1d = [decode_sentiment(score, include_neutral=False) for score in scores]","525d2e0c":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n\n    cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, fontsize=30)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90, fontsize=22)\n    plt.yticks(tick_marks, classes, fontsize=22)\n\n    fmt = '.2f'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontsize=25)\n    plt.xlabel('Predicted label', fontsize=25)","598386e7":"%%time\n\ncnf_matrix = confusion_matrix(y_test_1d, y_pred_1d)\nplt.figure(figsize=(12,12))\nplot_confusion_matrix(cnf_matrix, classes=df_train.target.unique(), title=\"Confusion matrix\")\nplt.show()","ce748a80":"print(classification_report(y_test_1d, y_pred_1d))","080de2c0":"accuracy_score(y_test_1d, y_pred_1d)","eb3e920e":"model.save(KERAS_MODEL)\nw2v_model.save(WORD2VEC_MODEL)\npickle.dump(tokenizer, open(TOKENIZER_MODEL, \"wb\"), protocol=0)\npickle.dump(encoder, open(ENCODER_MODEL, \"wb\"), protocol=0)","3c12f3df":"### Compile model","4dea7643":"### Callbacks","e31ce24c":"### Classification Report","fab9b7c9":"### Predict","f7484e27":"### Dataset details\n* **target**: the polarity of the tweet (0 = negative, 2 = neutral, 4 = positive)\n* **ids**: The id of the tweet ( 2087)\n* **date**: the date of the tweet (Sat May 16 23:58:44 UTC 2009)\n* **flag**: The query (lyx). If there is no query, then this value is NO_QUERY.\n* **user**: the user that tweeted (robotickilldozr)\n* **text**: the text of the tweet (Lyx is cool)","ba5ba88c":"### Save model","731d4aa6":"### Evaluate","21152f1c":"### Accuracy Score","c29c65fa":"### Label Encoder ","d8c3a3ef":"### Split train and test","45d5126c":"### Tokenize Text","ce7d02f7":"### Confusion Matrix","25a7b0a7":"### Map target label to String\n* **0** -> **NEGATIVE**\n* **2** -> **NEUTRAL**\n* **4** -> **POSITIVE**","6e96c4fa":"### Pre-Process dataset","b2c2bc53":"### Word2Vec ","9360b36e":"### Embedding layer","5952d06c":"# Twitter Sentiment Analysis","f39e7d97":"### Build Model","c799f37e":"Remove stopwords","0dd64d3b":"### Read Dataset","38915fbe":"### Train","25f1ffe3":"### Settings"}}