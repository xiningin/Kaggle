{"cell_type":{"db2bc087":"code","aee397a1":"code","4e7eadaa":"code","01ee8d64":"code","02408e9a":"code","1269f034":"code","dfb7fb5d":"code","618f796b":"code","92c2d1b1":"code","0dad8213":"code","12332678":"code","15a11783":"code","6f8d31c5":"code","8d156b10":"code","91f95ebe":"code","785f4a0f":"code","15e4318c":"code","726bbbd5":"code","1aa1a80c":"code","0b1c6a38":"code","e8926f6a":"code","fbd7b4c6":"code","d2eeea59":"code","9561ae86":"code","0d13b1a6":"markdown","a47da9bb":"markdown","4ed03bc6":"markdown"},"source":{"db2bc087":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aee397a1":"import os, psutil  \n\ndef cpu_stats():\n    pid = os.getpid()\n    py = psutil.Process(pid)\n    memory_use = py.memory_info()[0] \/ 2. ** 30\n    return 'memory GB:' + str(np.round(memory_use, 2))","4e7eadaa":"cpu_stats()","01ee8d64":"data_file = '..\/input\/arxiv\/arxiv-metadata-oai-snapshot.json'","02408e9a":"def get_metadata():\n    with open(data_file, 'r') as f:\n        for line in f:\n            yield line","1269f034":"import json","dfb7fb5d":"metadata = get_metadata()\nfor paper in metadata:\n    paper_dict = json.loads(paper)\n    print('Title: {}\\n\\nAbstract: {}\\nRef: {}'.format(paper_dict.get('title'), paper_dict.get('abstract'), paper_dict.get('journal-ref')))\n#     print(paper)\n    break","618f796b":"titles = []\nabstracts = []\nyears = []\nmetadata = get_metadata()\nfor paper in metadata:\n    paper_dict = json.loads(paper)\n    ref = paper_dict.get('journal-ref')\n    try:\n        year = int(ref[-4:]) \n        if 2010 < year < 2021:\n            years.append(year)\n            titles.append(paper_dict.get('title'))\n            abstracts.append(paper_dict.get('abstract'))\n    except:\n        pass \n\nlen(titles), len(abstracts), len(years)","92c2d1b1":"cpu_stats()","0dad8213":"papers = pd.DataFrame({\n    'title': titles,\n    'abstract': abstracts,\n    'year': years\n})\npapers","12332678":"del titles","15a11783":"del abstracts","6f8d31c5":"del years","8d156b10":"cpu_stats()","91f95ebe":"papers.to_json('arXiv_title_abstract_20200809_2011_2020.json')","785f4a0f":"val_df = papers.sample(frac=0.1, random_state=1007)\ntrain_df = papers.drop(val_df.index)\ntest_df = train_df.sample(frac=0.1, random_state=1007)\ntrain_df.drop(test_df.index, inplace=True)","15e4318c":"del papers","726bbbd5":"cpu_stats()","1aa1a80c":"train_df","0b1c6a38":"val_df","e8926f6a":"test_df","fbd7b4c6":"train_df.shape[0], val_df.shape[0], test_df.shape[0]","d2eeea59":"train_df.info()","9561ae86":"cpu_stats()","0d13b1a6":"# Explore one paper ","a47da9bb":"# get papers between 2010 and 2020 ","4ed03bc6":"use [this recipe](https:\/\/keras.io\/examples\/nlp\/lstm_seq2seq\/) to predict titles where the input is the abstract and the title is the target "}}