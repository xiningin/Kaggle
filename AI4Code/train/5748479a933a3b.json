{"cell_type":{"7c03dcee":"code","6f39f89a":"code","4cf16fe9":"code","f4143729":"code","aadf40f2":"code","ce67c849":"code","f6eec84b":"code","1f9f4bb1":"code","b90d2ed1":"code","126a578c":"code","1e13c5f5":"code","ae7a06b0":"code","31997762":"code","ae9e38f9":"code","26ff39f3":"code","92f318a5":"code","8de3027a":"code","29bba68c":"code","f87de429":"code","22d4f12b":"code","200a876c":"code","9521804c":"code","903bbe45":"code","9a1cd864":"code","bee4e761":"code","45f71abf":"code","e005f505":"code","e0839c34":"code","bb594580":"code","d267c14a":"code","7a62b0ab":"code","da758a02":"code","5c5173f6":"code","6fb70a06":"code","104a9257":"code","7def3dfd":"code","250a1c0c":"code","300cac98":"code","9ed48e23":"code","f450929f":"code","36ce7daa":"code","0b747d0d":"code","83128cbb":"code","49ae9ad3":"code","720da35e":"code","0a83abf2":"code","75c96d8f":"markdown","4db3a055":"markdown","f5c2f775":"markdown","9609ef54":"markdown","364c5512":"markdown","44e60221":"markdown","8c9a57f0":"markdown","14f47acb":"markdown","f3a90cd6":"markdown","47860746":"markdown","04ce6123":"markdown","fbe03cb3":"markdown","5202fb2d":"markdown","8ef4ca1a":"markdown","13f0e1bd":"markdown","91d6241e":"markdown","8eb7c75e":"markdown","46d136e1":"markdown","35af8ad6":"markdown","5c2837f8":"markdown"},"source":{"7c03dcee":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.cross_validation import train_test_split\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline","6f39f89a":"df = pd.read_csv('..\/input\/googleplaystore.csv')","4cf16fe9":"df.head()","f4143729":"df.info()","aadf40f2":"df.dropna(inplace=True)","ce67c849":"df.info()","f6eec84b":"df.head()","1f9f4bb1":"# Cleaning Categories into integers\nCategoryString = df[\"Category\"]\ncategoryVal = df[\"Category\"].unique()\ncategoryValCount = len(categoryVal)\ncategory_dict = {}\nfor i in range(0,categoryValCount):\n    category_dict[categoryVal[i]] = i\ndf[\"Category_c\"] = df[\"Category\"].map(category_dict).astype(int)","b90d2ed1":"# scaling and cleaning size of installation\n# I found this online at Git:\ndef change_size(size):\n    if 'M' in size:\n        x = size[:-1]\n        x = float(x)*1000000\n        return(x)\n    elif 'k' == size[-1:]:\n        x = size[:-1]\n        x = float(x)*1000\n        return(x)\n    else:\n        return None\n\ndf[\"Size\"] = df[\"Size\"].map(change_size)\n\n#filling Size of those who had NA\ndf.Size.fillna(method = 'ffill', inplace = True)\n","126a578c":"# Cleaning:\ndf['Installs'] = [int(i[:-1].replace(',','')) for i in df['Installs']]","1e13c5f5":"#Converting Type classification into binary\ndef type_cat(types):\n    if types == 'Free':\n        return 0\n    else:\n        return 1\n\ndf['Type'] = df['Type'].map(type_cat)","ae7a06b0":"#Cleaning of content rating classification\nRatingL = df['Content Rating'].unique()\nRatingDict = {}\nfor i in range(len(RatingL)):\n    RatingDict[RatingL[i]] = i\ndf['Content Rating'] = df['Content Rating'].map(RatingDict).astype(int)","31997762":"#dropping of unrelated and unnecessary items\ndf.drop(labels = ['Last Updated','Current Ver','Android Ver','App'], axis = 1, inplace = True)","ae9e38f9":"#Cleaning of genres\nGenresL = df.Genres.unique()\nGenresDict = {}\nfor i in range(len(GenresL)):\n    GenresDict[GenresL[i]] = i\ndf['Genres_c'] = df['Genres'].map(GenresDict).astype(int)","26ff39f3":"#Cleaning prices\ndef price_clean(price):\n    if price == '0':\n        return 0\n    else:\n        price = price[1:]\n        price = float(price)\n        return price\n\ndf['Price'] = df['Price'].map(price_clean).astype(float)","92f318a5":"# convert reviews to numeric\ndf['Reviews'] = df['Reviews'].astype(int)","8de3027a":"df.info()","29bba68c":"df.head()","f87de429":"# dummy variable for Categories\ndf2 = pd.get_dummies(df, columns=['Category'])","22d4f12b":"df2.head()","200a876c":"# 3 different regression models:","9521804c":"#for evaluation of error term and \ndef Evaluationmatrix(y_true, y_predict):\n    print ('Mean Squared Error: '+ str(metrics.mean_squared_error(y_true,y_predict)))\n    print ('Mean absolute Error: '+ str(metrics.mean_absolute_error(y_true,y_predict)))\n    print ('Mean squared Log Error: '+ str(metrics.mean_squared_log_error(y_true,y_predict)))","903bbe45":"#to add into results_index for evaluation of error term \ndef Evaluationmatrix_dict(y_true, y_predict, name = 'Linear - Integer'):\n    dict_matrix = {}\n    dict_matrix['Series Name'] = name\n    dict_matrix['Mean Squared Error'] = metrics.mean_squared_error(y_true,y_predict)\n    dict_matrix['Mean Absolute Error'] = metrics.mean_absolute_error(y_true,y_predict)\n    dict_matrix['Mean Squared Log Error'] = metrics.mean_squared_log_error(y_true,y_predict)\n    return dict_matrix","9a1cd864":"#excluding Genre label\nfrom sklearn.linear_model import LinearRegression \n\n#Integer encoding\nX = df.drop(labels = ['Category','Rating','Genres','Genres_c'],axis = 1)\ny = df.Rating\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)\nResults = model.predict(X_test)\n\n#Creation of results dataframe and addition of first entry\nresultsdf = pd.DataFrame()\nresultsdf = resultsdf.from_dict(Evaluationmatrix_dict(y_test,Results),orient = 'index')\nresultsdf = resultsdf.transpose()\n\n#dummy encoding\n\nX_d = df2.drop(labels = ['Rating','Genres','Category_c','Genres_c'],axis = 1)\ny_d = df2.Rating\nX_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_d, y_d, test_size=0.30)\nmodel_d = LinearRegression()\nmodel_d.fit(X_train_d,y_train_d)\nResults_d = model_d.predict(X_test_d)\n\n#adding results into results dataframe\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_d,Results_d, name = 'Linear - Dummy'),ignore_index = True)","bee4e761":"plt.figure(figsize=(15,10))\nsns.regplot(Results,y_test,color='teal', label = 'Integer', marker = 'x')\nsns.regplot(Results_d,y_test_d,color='orange',label = 'Dummy')\nplt.legend()\nplt.title('Linear model - Excluding Genres')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","45f71abf":"print ('Actual mean of population:' + str(y.mean()))\nprint ('Integer encoding(mean) :' + str(Results.mean()))\nprint ('Dummy encoding(mean) :'+ str(Results_d.mean()))\nprint ('Integer encoding(std) :' + str(Results.std()))\nprint ('Dummy encoding(std) :'+ str(Results_d.std()))","e005f505":"#Including genre label\n\n#Integer encoding\nX = df.drop(labels = ['Category','Rating','Genres'],axis = 1)\ny = df.Rating\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)\nResults = model.predict(X_test)\n\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results, name = 'Linear(inc Genre) - Integer'),ignore_index = True)\n\n#dummy encoding\n\nX_d = df2.drop(labels = ['Rating','Genres','Category_c'],axis = 1)\ny_d = df2.Rating\nX_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_d, y_d, test_size=0.30)\nmodel_d = LinearRegression()\nmodel_d.fit(X_train_d,y_train_d)\nResults_d = model_d.predict(X_test_d)\n\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_d,Results_d, name = 'Linear(inc Genre) - Dummy'),ignore_index = True)","e0839c34":"plt.figure(figsize=(12,7))\nsns.regplot(Results,y_test,color='teal', label = 'Integer', marker = 'x')\nsns.regplot(Results_d,y_test_d,color='orange',label = 'Dummy')\nplt.legend()\nplt.title('Linear model - Including Genres')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","bb594580":"print ('Integer encoding(mean) :' + str(Results.mean()))\nprint ('Dummy encoding(mean) :'+ str(Results_d.mean()))\nprint ('Integer encoding(std) :' + str(Results.std()))\nprint ('Dummy encoding(std) :'+ str(Results_d.std()))","d267c14a":"#Excluding genres\nfrom sklearn import svm\n#Integer encoding\n\nX = df.drop(labels = ['Category','Rating','Genres','Genres_c'],axis = 1)\ny = df.Rating\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nmodel2 = svm.SVR()\nmodel2.fit(X_train,y_train)\n\nResults2 = model2.predict(X_test)\n\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results2, name = 'SVM - Integer'),ignore_index = True)\n\n#dummy based\n\n\nX_d = df2.drop(labels = ['Rating','Genres','Category_c','Genres_c'],axis = 1)\ny_d = df2.Rating\n\nX_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_d, y_d, test_size=0.30)\n\nmodel2 = svm.SVR()\nmodel2.fit(X_train_d,y_train_d)\n\nResults2_d = model2.predict(X_test_d)\n\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_d,Results2_d, name = 'SVM - Dummy'),ignore_index = True)","7a62b0ab":"plt.figure(figsize=(12,7))\nsns.regplot(Results2,y_test,color='teal', label = 'Integer', marker = 'x')\nsns.regplot(Results2_d,y_test_d,color='orange',label = 'Dummy')\nplt.legend()\nplt.title('SVM model - excluding Genres')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","da758a02":"print ('Integer encoding(mean) :' + str(Results2.mean()))\nprint ('Dummy encoding(mean) :'+ str(Results2_d.mean()))\nprint ('Integer encoding(std) :' + str(Results2.std()))\nprint ('Dummy encoding(std) :'+ str(Results2_d.std()))","5c5173f6":"#Integer encoding, including Genres_c\nmodel2a = svm.SVR()\n\nX = df.drop(labels = ['Category','Rating','Genres'],axis = 1)\ny = df.Rating\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nmodel2a.fit(X_train,y_train)\n\nResults2a = model2a.predict(X_test)\n\n#evaluation\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results2a, name = 'SVM(inc Genres) - Integer'),ignore_index = True)\n\n#dummy encoding, including Genres_c\nmodel2a = svm.SVR()\n\nX_d = df2.drop(labels = ['Rating','Genres','Category_c'],axis = 1)\ny_d = df2.Rating\n\nX_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_d, y_d, test_size=0.30)\n\nmodel2a.fit(X_train_d,y_train_d)\n\nResults2a_d = model2a.predict(X_test_d)\n\n#evaluation\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_d,Results2a_d, name = 'SVM(inc Genres) - Dummy'),ignore_index = True)","6fb70a06":"plt.figure(figsize=(12,7))\nsns.regplot(Results2a,y_test,color='teal', label = 'Integer', marker = 'x')\nsns.regplot(Results2a_d,y_test_d,color='orange',label = 'Dummy')\nplt.legend()\nplt.title('SVM model - including Genres')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","104a9257":"print ('Integer encoding (mean) :' + str(Results2a.mean()))\nprint ('Dummy encoding (mean) :'+ str(Results2a_d.mean()))\nprint ('Integer encoding (standard dev) :' + str(Results2a.std()))\nprint ('Dummy encoding (standard dev) :'+ str(Results2a_d.std()))","7def3dfd":"# random forest regression model: This was found online:\nfrom sklearn.ensemble import RandomForestRegressor\n\n#Integer encoding\nX = df.drop(labels = ['Category','Rating','Genres','Genres_c'],axis = 1)\ny = df.Rating\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\nmodel3 = RandomForestRegressor()\nmodel3.fit(X_train,y_train)\nResults3 = model3.predict(X_test)\n\n# evaluation of results:\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results3, name = 'RFR - Integer'),ignore_index = True)\n\n# dummy model:\n\nX_d = df2.drop(labels = ['Rating','Genres','Category_c','Genres_c'],axis = 1)\ny_d = df2.Rating\nX_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_d, y_d, test_size=0.30)\nmodel3_d = RandomForestRegressor()\nmodel3_d.fit(X_train_d,y_train_d)\nResults3_d = model3_d.predict(X_test_d)\n\n#evaluation\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results3_d, name = 'RFR - Dummy'),ignore_index = True)","250a1c0c":"plt.figure(figsize=(12,7))\nsns.regplot(Results3,y_test,color='teal', label = 'Integer', marker = 'x')\nsns.regplot(Results3_d,y_test_d,color='orange',label = 'Dummy')\nplt.legend()\nplt.title('RFR model - excluding Genres')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","300cac98":"print ('Integer encoding (mean) :' + str(Results3.mean()))\nprint ('Dummy encoding (mean) :'+ str(Results3_d.mean()))\nprint ('Integer encoding (standard dev) :' + str(Results3.std()))\nprint ('Dummy encoding (standard dev) :'+ str(Results3_d.std()))","9ed48e23":"#for integer\nFeat_impt = {}\nfor col,feat in zip(X.columns,model3.feature_importances_):\n    Feat_impt[col] = feat\n\nFeat_impt_df = pd.DataFrame.from_dict(Feat_impt,orient = 'index')\nFeat_impt_df.sort_values(by = 0, inplace = True)\nFeat_impt_df.rename(index = str, columns = {0:'Pct'},inplace = True)\n\nplt.figure(figsize= (14,10))\nFeat_impt_df.plot(kind = 'barh',figsize= (14,10),legend = False)\nplt.show()","f450929f":"#for dummy\nFeat_impt_d = {}\nfor col,feat in zip(X_d.columns,model3_d.feature_importances_):\n    Feat_impt_d[col] = feat\n\nFeat_impt_df_d = pd.DataFrame.from_dict(Feat_impt_d,orient = 'index')\nFeat_impt_df_d.sort_values(by = 0, inplace = True)\nFeat_impt_df_d.rename(index = str, columns = {0:'Pct'},inplace = True)\n\nplt.figure(figsize= (14,10))\nFeat_impt_df_d.plot(kind = 'barh',figsize= (14,10),legend = False)\nplt.show()","36ce7daa":"\n#Including Genres_C\n\n#Integer encoding\nX = df.drop(labels = ['Category','Rating','Genres'],axis = 1)\ny = df.Rating\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\nmodel3a = RandomForestRegressor()\nmodel3a.fit(X_train,y_train)\nResults3a = model3a.predict(X_test)\n\n#evaluation\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results3a, name = 'RFR(inc Genres) - Integer'),ignore_index = True)\n\n#dummy encoding\n\nX_d = df2.drop(labels = ['Rating','Genres','Category_c'],axis = 1)\ny_d = df2.Rating\nX_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_d, y_d, test_size=0.30)\nmodel3a_d = RandomForestRegressor()\nmodel3a_d.fit(X_train_d,y_train_d)\nResults3a_d = model3a_d.predict(X_test_d)\n\n#evaluation\nresultsdf = resultsdf.append(Evaluationmatrix_dict(y_test,Results3a_d, name = 'RFR(inc Genres) - Dummy'),ignore_index = True)","0b747d0d":"plt.figure(figsize=(12,7))\nsns.regplot(Results3a,y_test,color='teal', label = 'Integer', marker = 'x')\nsns.regplot(Results3a_d,y_test_d,color='orange',label = 'Dummy')\nplt.legend()\nplt.title('Random Forest Model - including Genres')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","83128cbb":"print ('Integer encoding (mean): ' + str(Results3.mean()))\nprint ('Dummy encoding (mean): '+ str(Results3_d.mean()))\nprint ('Integer encoding(standard dev): ' + str(Results3.std()))\nprint ('Dummy encoding(standard dev): '+ str(Results3_d.std()))","49ae9ad3":"#for integer\nFeat_impt = {}\nfor col,feat in zip(X.columns,model3a.feature_importances_):\n    Feat_impt[col] = feat\n\nFeat_impt_df = pd.DataFrame.from_dict(Feat_impt,orient = 'index')\nFeat_impt_df.sort_values(by = 0, inplace = True)\nFeat_impt_df.rename(index = str, columns = {0:'Pct'},inplace = True)\n\nplt.figure(figsize= (14,10))\nFeat_impt_df.plot(kind = 'barh',figsize= (14,10),legend = False)\nplt.show()","720da35e":"#for dummy\nFeat_impt_d = {}\nfor col,feat in zip(X_d.columns,model3a_d.feature_importances_):\n    Feat_impt_d[col] = feat\n\nFeat_impt_df_d = pd.DataFrame.from_dict(Feat_impt_d,orient = 'index')\nFeat_impt_df_d.sort_values(by = 0, inplace = True)\nFeat_impt_df_d.rename(index = str, columns = {0:'Pct'},inplace = True)\n\nplt.figure(figsize= (14,10))\nFeat_impt_df_d.plot(kind = 'barh',figsize= (14,10),legend = False)\nplt.show()","0a83abf2":"resultsdf.set_index('Series Name', inplace = True)\n\nplt.figure(figsize = (10,12))\nplt.subplot(3,1,1)\nresultsdf['Mean Squared Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.3, 0.4, 0.6, 1), title = 'Mean Squared Error')\nplt.subplot(3,1,2)\nresultsdf['Mean Absolute Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.5, 0.4, 0.6, 1), title = 'Mean Absolute Error')\nplt.subplot(3,1,3)\nresultsdf['Mean Squared Log Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.7, 0.4, 0.6, 1), title = 'Mean Squared Log Error')\nplt.show()\n","75c96d8f":"Removing all null entries:","4db3a055":"Looking at the breakdown even further, it would seem that indeed Reviews, size and number of install remain as a significant contributer to the predictiveness of app ratings.  What's interesting to me is that how the Tools category of apps have such a high level of predictiveness in terms of ratings, as say compared to the Food and Drink category.","f5c2f775":"We start off by looking at **linear regression** model (without the genre label)","9609ef54":"This is where I am cleaning up the data from our .csv file: ","364c5512":"Looking at the linear model using the genre label as a numeric value.","44e60221":"Doing checks and we are good to go! So I created first this dataframe that has **integer encoding** of categorical variables, defined as df","8c9a57f0":"We see a slight difference in the mean between the integer and dummy encoded linear models. The dummy encoded model's std is still higher than the integer encoded model.\n\n","14f47acb":"Finally converting the number reviews column into integers","f3a90cd6":"* Converting of the content rating section into int","47860746":"The results are quite interesting. Overall the model predicted quite a bit of ratings to be approximately at 4.2, even though the actual ratings were not. Looking at the scatterplot, the integer encoded model seems to have performed better in this instance.\n\nAs usual, the dummy encoded model has a higher std than the integer encoded model.","04ce6123":"The following is code to obtain the error terms for the various models:","fbe03cb3":"Cleaning of the prices of the apps to floats","5202fb2d":"Cleaning the number of installations column","8ef4ca1a":"Converting the paid\/free classification types into binary","13f0e1bd":"In this instance, I created another dataframe that specifically created **dummy values** for each categorical instance in the dataframe, defined as df2","91d6241e":"I dropped these portions of information as i deemed it unecessary for our machine learning algorithm","8eb7c75e":"Cleaning of sizes of the apps and also filling up the missing values using ffill","46d136e1":"This is my final project which I used machine learning to find predictions of future application reviews:","35af8ad6":"Again with the inclusion of the genre variable, the results do not seem to defer significantly as compared to the previous results.","5c2837f8":"From the results, it would seem that the genre section actually plays an important part in the decision tree making. Yet the exclusion of it dosent seem to significantly impact results. This to me is quite interesting."}}